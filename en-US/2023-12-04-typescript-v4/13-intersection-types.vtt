WEBVTT

1
00:00:00.190 --> 00:00:05.940
So we talked conceptually about
intersection types a bit earlier.

2
00:00:05.940 --> 00:00:10.280
We regard it as sort of end,
but for types.

3
00:00:11.630 --> 00:00:20.420
So, let's apply similar to how
we probe that the union type.

4
00:00:20.420 --> 00:00:26.366
Let's look at what kinds of values
an intersection type accepts and

5
00:00:26.366 --> 00:00:31.880
then what the resultant
intersection type can be used as.

6
00:00:31.880 --> 00:00:36.585
So here, if you recall when we go back
to our union type example, union types

7
00:00:36.585 --> 00:00:42.120
accepted just about all the examples we
had, it wouldn't accept like a string.

8
00:00:42.120 --> 00:00:47.570
But any number that's either even,
or one through five, it'll accept.

9
00:00:49.330 --> 00:00:52.600
Look how picky this intersection type is.

10
00:00:52.600 --> 00:00:56.020
It won't accept an even and low number.

11
00:00:56.020 --> 00:01:01.240
Sorry, it won't accept 6,
because six is not a low number.

12
00:01:01.240 --> 00:01:02.620
It's not in one through five.

13
00:01:02.620 --> 00:01:05.550
It won't accept three
because it's not even.

14
00:01:05.550 --> 00:01:08.490
It'll accept four or two, and that's it.

15
00:01:08.490 --> 00:01:12.260
So it's very,
very picky in terms of what it accepts.

16
00:01:12.260 --> 00:01:17.419
But if we look at how it can be used,
all of these functions

17
00:01:17.419 --> 00:01:24.220
are very happy to take the intersection
type as an argument, right?

18
00:01:24.220 --> 00:01:28.670
This is two or four, it's guaranteed
to be even, and a low number.

19
00:01:28.670 --> 00:01:32.130
It's guaranteed to be an even
number that is also under five.

20
00:01:32.130 --> 00:01:33.510
And of course it's a number.

21
00:01:33.510 --> 00:01:37.012
And if we look back up to
our union type example,

22
00:01:37.012 --> 00:01:40.000
look at all these that failed, right?

23
00:01:40.000 --> 00:01:43.540
And it's because a union type is so
accepting.

24
00:01:43.540 --> 00:01:47.134
There's always a member in the set,
for these three,

25
00:01:47.134 --> 00:01:50.360
that causes TypeScript to object, right?

26
00:01:50.360 --> 00:01:52.470
Here it's not happy with the number one.

27
00:01:52.470 --> 00:01:54.780
Here it's not happy with the number six.

28
00:01:54.780 --> 00:01:57.600
Here it's also not happy
with the number six.

29
00:01:57.600 --> 00:02:04.170
Okay, so there's sort of, there's a little
bit of interesting asymmetry here.

30
00:02:04.170 --> 00:02:08.855
So what intersection types are it
means that is it's everything

31
00:02:08.855 --> 00:02:14.260
that is in both sets, in this case,
the numbers two and four.

32
00:02:14.260 --> 00:02:19.129
And because of that we can use any of
the behavior that's present In either set,

33
00:02:19.129 --> 00:02:24.069
meaning if there are methods on either set
we have access to all of those methods in

34
00:02:24.069 --> 00:02:26.730
terms of where we can use this value.

35
00:02:26.730 --> 00:02:30.931
It can sub in for an even number or
for a number one through five,

36
00:02:30.931 --> 00:02:33.990
it kind of makes everything happy there.

37
00:02:33.990 --> 00:02:39.065
So when I say there's some asymmetry,
I mean this in terms of

38
00:02:39.065 --> 00:02:45.310
values allowed in the set,
a union type on the left, very accepting.

39
00:02:45.310 --> 00:02:48.430
Anything can join the set.

40
00:02:48.430 --> 00:02:52.200
Anything can join the union and
as long as it's in one of the two sets.

41
00:02:53.680 --> 00:02:58.070
The requirements that all members meet,
you could think of that as very small.

42
00:02:58.070 --> 00:03:03.660
We can only assume that it's I
guess a number lower than ten.

43
00:03:03.660 --> 00:03:08.210
It can't stand in for an even cuz
it's not guaranteed to be even.

44
00:03:08.210 --> 00:03:11.274
It can't stand in for
one through five cuz well,

45
00:03:11.274 --> 00:03:14.400
it's not guaranteed to
be one through five.

46
00:03:14.400 --> 00:03:19.349
And on the other side,
we have a very picky intersection type.

47
00:03:20.670 --> 00:03:24.420
But in terms of the requirements that
all members meet, it's everything.

48
00:03:25.910 --> 00:03:29.673
Meaning it's an even number,
it is a number one through five,

49
00:03:29.673 --> 00:03:32.950
it can it can be used,
going back to this example here.

50
00:03:34.120 --> 00:03:36.420
It can be passed into
all of these functions.

51
00:03:37.450 --> 00:03:39.270
So that's what I mean by asymmetry.

52
00:03:39.270 --> 00:03:44.243
They're sort of like what values can
it hold versus what guarantees do

53
00:03:44.243 --> 00:03:48.051
we have about any given
member of the resultant type.

54
00:03:48.051 --> 00:03:52.871
I already mentioned here I say 50
to one earlier I said 100 to one.

55
00:03:52.871 --> 00:03:58.590
It's in application code it is very,
very rare to see intersection types.

56
00:03:58.590 --> 00:04:01.157
You'll see union types all over the place

57
00:04:01.157 --> 00:04:06.210
because of control flow to places
where intersection types will appear.

58
00:04:06.210 --> 00:04:09.813
It's object.assign and
the equivalent object spread,

59
00:04:09.813 --> 00:04:13.710
where you're literally
merging two objects together.

60
00:04:13.710 --> 00:04:18.095
Those are places where you may not
explicitly end up writing an intersection

61
00:04:18.095 --> 00:04:21.130
type, but
it's happening behind the scenes.

62
00:04:21.130 --> 00:04:24.224
You're getting kind of
the merged two things together.

