WEBVTT

1
00:00:00.400 --> 00:00:02.274
For the remainder of this course,

2
00:00:02.274 --> 00:00:05.860
we're gonna work in another
package within this repo.

3
00:00:05.860 --> 00:00:08.114
And it's a notes package, so

4
00:00:08.114 --> 00:00:14.980
the point here is really to have examples
of TypeScript code that we can poke at.

5
00:00:14.980 --> 00:00:18.182
We may try to build it at times,
but it's mainly just so

6
00:00:18.182 --> 00:00:21.890
we have an authoring
environment that we can share.

7
00:00:21.890 --> 00:00:25.392
It matches what we're gonna be looking
at on the website, if we go and look at

8
00:00:25.392 --> 00:00:29.530
the website, it's gonna be each code
snippet that you're able to see there.

9
00:00:29.530 --> 00:00:34.380
So you're going to go to
notes TS fundamentals v4.

10
00:00:34.380 --> 00:00:39.476
We're gonna open up this source folder,
and

11
00:00:39.476 --> 00:00:47.240
you can see for every chapter of
this course we have a notes file.

12
00:00:47.240 --> 00:00:50.752
In JavaScript,
you're familiar with this concept here,

13
00:00:50.752 --> 00:00:53.080
right this is a variable declaration.

14
00:00:53.080 --> 00:01:00.355
We're using let here, and let would allow
us to reassign this variable, right?

15
00:01:00.355 --> 00:01:04.403
And if we hover over
this word temperature.

16
00:01:04.403 --> 00:01:08.367
Well, we're being told we
haven't used this variable, but

17
00:01:08.367 --> 00:01:12.880
we'll use it in a sec, but
we can see let temperature, colon number.

18
00:01:12.880 --> 00:01:18.336
So what we're seeing here is TypeScript
has inferred that this is a number

19
00:01:18.336 --> 00:01:23.529
based on us just saying that we're
initializing this variable to 6.

20
00:01:25.470 --> 00:01:28.737
It knows that we're dealing
with numbers here, and

21
00:01:28.737 --> 00:01:30.900
what we get here is type checking.

22
00:01:30.900 --> 00:01:35.802
So TypeScript said okay you
initially gave me this number 6 and

23
00:01:35.802 --> 00:01:39.314
now I'm going to try to
use the string warm and

24
00:01:39.314 --> 00:01:44.679
TypeScript objects it says string
is not assignable to type number,

25
00:01:44.679 --> 00:01:50.750
what we're seeing here is that
variables are sort of born with types.

26
00:01:50.750 --> 00:01:55.325
Meaning, if we have something like this,
and temperature is a number,

27
00:01:55.325 --> 00:02:00.670
there's really nothing we can do to make
this variable accept a different type.

28
00:02:00.670 --> 00:02:05.415
There are things we could do on this line
that will make it initially be created

29
00:02:05.415 --> 00:02:07.270
with a different type.

30
00:02:07.270 --> 00:02:11.760
But once it's created,
a variables type can never change.

31
00:02:11.760 --> 00:02:13.320
Let's try the same thing with const.

32
00:02:14.940 --> 00:02:19.098
So, can somebody tell me in the classroom
like what's the difference between a const

33
00:02:19.098 --> 00:02:20.902
declaration and a let declaration?

34
00:02:20.902 --> 00:02:21.515
Go ahead.

35
00:02:21.515 --> 00:02:24.720
&gt;&gt; It const is constant so
you can't change the value.

36
00:02:24.720 --> 00:02:29.298
&gt;&gt; You can't reassign the variable
common misconception that you can't

37
00:02:29.298 --> 00:02:34.100
change the value, so in this case it's
actually both 79 is a number, and

38
00:02:34.100 --> 00:02:37.240
in JavaScript that's
an immutable value type.

39
00:02:37.240 --> 00:02:40.740
We never change numbers,
we can only create new numbers.

40
00:02:42.270 --> 00:02:46.085
So here we have non re
assignability coming from const,

41
00:02:46.085 --> 00:02:49.421
but we also have
immutability coming from 79.

42
00:02:49.421 --> 00:02:52.070
As opposed to if we made
this an array like this,

43
00:02:52.070 --> 00:02:57.420
we can certainly change the value, we can
push more things into the array, right?

44
00:02:57.420 --> 00:03:01.680
It's not like it's frozen in place, the
variable always will point to that array,

45
00:03:01.680 --> 00:03:03.830
but we can change the array in place.

46
00:03:03.830 --> 00:03:08.449
We can't change this number in place,
we can't make it 80.

47
00:03:08.449 --> 00:03:12.640
So, let's look at the type of this,

48
00:03:12.640 --> 00:03:17.782
const humidity79, 79 in this context,

49
00:03:17.782 --> 00:03:22.310
it's not a value, it's a type.

50
00:03:22.310 --> 00:03:27.160
TypeScript has noted that we
have an immutable value type.

51
00:03:27.160 --> 00:03:31.620
And we can never reassign this
variable humidity can never be

52
00:03:31.620 --> 00:03:35.119
anything other than 79,
we could assign it or

53
00:03:35.119 --> 00:03:40.460
we couldn't assign it to something
new like it's only the number 79.

54
00:03:40.460 --> 00:03:48.059
So I want you to start building a little
bit of a mental model here based on sets.

55
00:03:48.059 --> 00:03:50.740
Does everybody know what a set is?

56
00:03:50.740 --> 00:03:57.288
It's like a group of values where there
are no duplicates in the list of values,

57
00:03:57.288 --> 00:04:02.970
so you could think of types as
describing a set of allowed values.

58
00:04:02.970 --> 00:04:10.016
So, of course a let declaration lets
us reassign given a different number.

59
00:04:10.016 --> 00:04:13.595
We can actually take this 79
that we had in humidity, and

60
00:04:13.595 --> 00:04:16.824
we could set the temperature equal to 79,
right?

61
00:04:16.824 --> 00:04:21.320
There's no problem with that,
temperature will accept any number.

62
00:04:23.210 --> 00:04:26.156
Now what we can't do, while for

63
00:04:26.156 --> 00:04:31.179
a variety of reasons but
we can't take temperature and

64
00:04:31.179 --> 00:04:36.810
assign it to humidity because
humidity is a constant.

65
00:04:36.810 --> 00:04:40.217
Yeah, we're gonna have to make
this slightly different, and

66
00:04:40.217 --> 00:04:41.899
I'll explain why in a moment.

67
00:04:44.772 --> 00:04:48.712
So I'm making this a let declaration
that sort of allows us to

68
00:04:48.712 --> 00:04:52.517
have re-assignability, but
it's typed is still 79.

69
00:04:52.517 --> 00:04:57.094
I'm doing something here called
casting where I'm saying,

70
00:04:57.094 --> 00:05:02.810
I have value here, this is the type
I want you to regard this value as.

71
00:05:02.810 --> 00:05:06.844
So here we can see number is
not assignable to type 79, and

72
00:05:06.844 --> 00:05:10.310
if we think about this in terms of sets.

73
00:05:10.310 --> 00:05:14.911
Humidity is allowed to be any number
as long as it's the number 79

74
00:05:14.911 --> 00:05:19.758
It's only got one thing and it said
it can only accept 79s on this line

75
00:05:19.758 --> 00:05:24.523
13 You can see it's perfectly happy
to accept a new number 79 like

76
00:05:24.523 --> 00:05:29.240
this is in a different place in
memory Than this original 79 here.

77
00:05:29.240 --> 00:05:31.768
So we are assigning it a new number, but

78
00:05:31.768 --> 00:05:37.070
it must be exactly the value that we gave
it before, it must be just that one value.

79
00:05:38.210 --> 00:05:42.763
Here, we're seeing that we can't
just take an arbitrary number and

80
00:05:42.763 --> 00:05:46.923
put it into a slot that only accepts 79s,
because of course,

81
00:05:46.923 --> 00:05:50.290
they're all of the other numbers, right?

82
00:05:50.290 --> 00:05:53.554
We can't ensure that there's
compatibility there, so

83
00:05:53.554 --> 00:05:57.770
we would say this is a very general type,
and this is a very specific type.

84
00:06:00.090 --> 00:06:04.138
And here's an example of us trying
to put a specific value in there,

85
00:06:04.138 --> 00:06:07.930
78 is not a 79, but
if I change this, it would be fine.

86
00:06:07.930 --> 00:06:13.336
So what we would call this here,
it's a literal type,

87
00:06:13.336 --> 00:06:17.096
and that means we're using a value and

88
00:06:17.096 --> 00:06:22.400
creating a type that represents
only that one value.

89
00:06:23.950 --> 00:06:30.420
We could do the same thing with
the string if we wanted to.

90
00:06:30.420 --> 00:06:35.600
String is also an immutable value type,
const does not allow us to reassign.

91
00:06:35.600 --> 00:06:40.493
So those two facts mean this
will always be foo, right?

92
00:06:40.493 --> 00:06:45.370
So that's called a literal type, and
I'm going to put this back to const.

93
00:06:45.370 --> 00:06:50.770
Let's think more about types as
representing sets of values.

94
00:06:50.770 --> 00:06:54.829
So if we create another variable here,
we're calling it temp2,

95
00:06:54.829 --> 00:06:59.539
we're setting it equal to 19, the type
of temp2 number represents the set

96
00:06:59.539 --> 00:07:03.900
of all numbers, that's what I'm
using these little braces for here.

97
00:07:06.270 --> 00:07:09.779
If we use this as const casting here,

98
00:07:09.779 --> 00:07:15.216
we're basically saying,
I want the mutability of let,

99
00:07:15.216 --> 00:07:22.280
but treat it in terms of obtaining
its type as if it's a const, right?

100
00:07:22.280 --> 00:07:24.675
And you can see we get that 79 here,

101
00:07:24.675 --> 00:07:28.083
just as above where we
were saying like 79 as 79.

102
00:07:28.083 --> 00:07:31.323
This is kind of the same thing,
except it's saying,

103
00:07:31.323 --> 00:07:33.699
instead of saying the 79 type again,

104
00:07:33.699 --> 00:07:38.460
we're just saying treat it like it's
a const in terms of inferring its title.

105
00:07:39.490 --> 00:07:43.230
So now we have a lead declaration that's
also just containing this one thing.

106
00:07:45.790 --> 00:07:49.418
When we're doing something like this,
anytime we see an equal sign,

107
00:07:49.418 --> 00:07:52.960
we're performing what we call
a type equivalence check.

108
00:07:52.960 --> 00:07:59.323
And that means, can the type of
the variable or function parameter or

109
00:07:59.323 --> 00:08:03.709
whatever it is,
on the left side of the equals,

110
00:08:03.709 --> 00:08:08.336
can that hold a value of
the type on the right side?

111
00:08:10.944 --> 00:08:14.809
So can a number,
something that wants a number,

112
00:08:14.809 --> 00:08:17.742
will that be happy if I give it a 79?

113
00:08:17.742 --> 00:08:18.665
Sure.

114
00:08:18.665 --> 00:08:23.562
But if I have something that only
accepts 79s, I can't just give

115
00:08:23.562 --> 00:08:28.466
it any arbitrary number,
it only wants that one specific number.

116
00:08:31.569 --> 00:08:33.131
Does this make sense,

117
00:08:33.131 --> 00:08:38.400
thinking about types in terms of
the values that type will accept.

118
00:08:38.400 --> 00:08:42.705
&gt;&gt; So
could you do let humidity equals 10 as 79

119
00:08:42.705 --> 00:08:49.073
&gt;&gt; Let's try that You could,

120
00:08:49.073 --> 00:08:51.120
don't do this.

121
00:08:51.120 --> 00:08:55.583
You could this is like,
I described this as casting,

122
00:08:55.583 --> 00:09:00.280
a lot of languages have
this concept of casting.

123
00:09:00.280 --> 00:09:05.268
When you do casting,
you're effectively telling the TypeScript,

124
00:09:05.268 --> 00:09:10.944
you know better, there's telling the type
checking system you know better,

125
00:09:10.944 --> 00:09:13.610
irrespective of what this value is.

126
00:09:15.860 --> 00:09:18.163
Well, in this case we're
gonna get an objection here,

127
00:09:18.163 --> 00:09:20.129
because there's even more incompatibility.

128
00:09:20.129 --> 00:09:23.439
But you're telling it,
I know what I'm doing,

129
00:09:23.439 --> 00:09:28.609
please regard this as this other type,
it's really sort of a heavy-handed

130
00:09:28.609 --> 00:09:33.327
way to override the safety that
typescript would normally give you.

131
00:09:33.327 --> 00:09:38.434
Now, this is why it's sort of preferred
to do this, because it ensures you

132
00:09:38.434 --> 00:09:43.460
get like a valid type that fits this
value It's just a very specific type,

133
00:09:43.460 --> 00:09:47.678
but it will always be valid
you're just telling typescript to

134
00:09:47.678 --> 00:09:52.330
be more bold in its assumptions
that like it's not just any number.

135
00:09:53.500 --> 00:09:58.243
It's specifically the number 79, what
TypeScript generally tries to do is make

136
00:09:58.243 --> 00:10:02.391
the most reasonable assumption it can
make without getting in your way.

137
00:10:02.391 --> 00:10:08.413
So if every let declaration like this
turned out to be specifically the type 79,

138
00:10:08.413 --> 00:10:11.556
like that would interfere with our ability

139
00:10:11.556 --> 00:10:14.890
to use let's the way
we normally use let's.

140
00:10:16.200 --> 00:10:19.896
This is why we see the behavior
change when we switch to const,

141
00:10:19.896 --> 00:10:24.891
because it can make safely a more specific
assumption without getting in your way.

142
00:10:24.891 --> 00:10:32.370
So sometimes we need to declare
a variable before it's initialized.

143
00:10:32.370 --> 00:10:36.920
And let me uncomment
the next section here.

144
00:10:36.920 --> 00:10:42.157
So in this example,
we have sort of a time interval,

145
00:10:42.157 --> 00:10:46.890
that's what we're trying to model here.

146
00:10:46.890 --> 00:10:51.470
So we have a random wait time up at
the top, we generate some random value.

147
00:10:51.470 --> 00:10:56.354
We have a time interval, we know the start
time, because we're running this code, and

148
00:10:56.354 --> 00:10:59.200
then we initialize start time,
we get a new date.

149
00:10:59.200 --> 00:11:03.212
That is like right now,
at the moment, that date invocation,

150
00:11:03.212 --> 00:11:08.148
that date instance is created,
endTime we're gonna fill in later, right?

151
00:11:08.148 --> 00:11:11.259
We need to wait however
long this random wait is.

152
00:11:12.580 --> 00:11:18.895
And then we'll know what the endTime is,
and what we can see here is endTime,

153
00:11:18.895 --> 00:11:24.162
because we don't initialize this variable,
it is of type any.

154
00:11:24.162 --> 00:11:28.054
We would call this an implicit any, any,

155
00:11:28.054 --> 00:11:35.520
you can think of as a type that represents
the way variables work in JavaScript.

156
00:11:35.520 --> 00:11:38.997
You could take this and
you could make it a function,

157
00:11:38.997 --> 00:11:43.974
or you could then pass it a number,
you could then give it an HTML input tag,

158
00:11:43.974 --> 00:11:47.947
and it would be happy to accept
all of these things, right?

159
00:11:47.947 --> 00:11:52.177
Any is ,we'll talk more about this in
the intermediate TypeScript course,

160
00:11:52.177 --> 00:11:54.440
but we would call this a top type.

161
00:11:54.440 --> 00:11:58.480
It can accept absolutely any value that
is possible to create in JavaScript.

162
00:12:00.280 --> 00:12:05.176
But this isn't what we want,
even once we assign end time its

163
00:12:05.176 --> 00:12:09.126
date in the end,
we lose type information here.

164
00:12:09.126 --> 00:12:16.990
So we talked about any why
is this an implicit any?

165
00:12:16.990 --> 00:12:21.909
It's implicit because we haven't stated
a type here, but TypeScript cannot obtain

166
00:12:21.909 --> 00:12:26.000
the necessary information in order
to know what this should be.

167
00:12:26.000 --> 00:12:30.198
And so effectively anything
TypeScript can't figure out,

168
00:12:30.198 --> 00:12:35.640
it will type as any, at least with the way
we have the compiler set up right now.

169
00:12:38.070 --> 00:12:43.000
We can change this though, we can give
this what's called a type annotation.

170
00:12:43.000 --> 00:12:48.980
And we've already seen this, we saw this
in our our hello world TypeScript program.

171
00:12:48.980 --> 00:12:53.260
We're gonna add a colon and then date.

172
00:12:55.230 --> 00:12:56.810
See how it says interface date?

173
00:12:57.950 --> 00:13:00.850
This is the type of a date instance.

174
00:13:03.140 --> 00:13:05.030
And down here you can see all right,

175
00:13:05.030 --> 00:13:08.680
well we're being busted now
we're setting endTime =0.

176
00:13:08.680 --> 00:13:12.616
While it should be a date, this is a line
of code that shouldn't have worked

177
00:13:12.616 --> 00:13:17.710
like in regular JavaScript this would have
worked we might not have noticed this.

178
00:13:17.710 --> 00:13:23.154
But now if we had some function that would
like measured the start and the end time

179
00:13:23.154 --> 00:13:28.448
and give us a very human-readable time
interval, how many seconds is this?

180
00:13:28.448 --> 00:13:33.389
How many it would format it properly
like now we know we're not gonna work

181
00:13:33.389 --> 00:13:38.249
with a number here we will always have
a date and a date both of these end up

182
00:13:38.249 --> 00:13:43.271
being dates this one up here start time
gets it because of how we initialize

183
00:13:43.271 --> 00:13:47.501
the variable and here we have
this explicit type annotation.

184
00:13:47.501 --> 00:13:52.258
And you'll see this pattern all over the
place, it works for function parameters,

185
00:13:52.258 --> 00:13:56.412
it works for function return types for
class fields, it's just colon and

186
00:13:56.412 --> 00:13:57.900
then the name of the type.

187
00:13:59.220 --> 00:14:03.497
So we can delete this because,
that's a bug, and we'll move forward

