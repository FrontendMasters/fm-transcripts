WEBVTT

1
00:00:00.450 --> 00:00:04.228
Next, we're gonna talk about
interfaces and type aliases.

2
00:00:04.228 --> 00:00:08.946
These are both mechanisms that
TypeScript allows us to use to give

3
00:00:08.946 --> 00:00:10.419
names to our types.

4
00:00:10.419 --> 00:00:14.855
And to pass them across module
boundaries using imports and

5
00:00:14.855 --> 00:00:19.743
exports, similar to how we treat
values in JavaScript modules.

6
00:00:19.743 --> 00:00:23.010
The first concept we're gonna
discuss is called the type alias.

7
00:00:23.010 --> 00:00:27.325
So if you think back to this
syntax that we used for

8
00:00:27.325 --> 00:00:33.550
the object in our success tuple case,
it gets noisy and complicated.

9
00:00:33.550 --> 00:00:37.409
If we use this all over the place,
if we just look back at that function real

10
00:00:37.409 --> 00:00:40.487
quick, I actually made it look
a little bit simpler here.

11
00:00:40.487 --> 00:00:46.222
But look at this return type,
this is just a lot of noisy syntax.

12
00:00:46.222 --> 00:00:50.913
Imagine you have five or six functions
that deal with this type, and

13
00:00:50.913 --> 00:00:54.840
you have this written in your code,
like this.

14
00:00:54.840 --> 00:00:59.682
I just doubled the cognitive burden
here by writing this type explicitly.

15
00:00:59.682 --> 00:01:03.139
And then imagine you have a whole
library dealing with user info, and

16
00:01:03.139 --> 00:01:04.819
it's kind of all over the place.

17
00:01:04.819 --> 00:01:09.706
So what we want to do is
give this type a name, and

18
00:01:09.706 --> 00:01:12.780
type aliases help us do that.

19
00:01:14.650 --> 00:01:17.224
So, we can define a name for the type,

20
00:01:17.224 --> 00:01:20.960
we can define the shape of
a type in a single place.

21
00:01:20.960 --> 00:01:24.848
Similar to how you could have a class
in your JavaScript code base that you

22
00:01:24.848 --> 00:01:26.772
use in a bunch of different places.

23
00:01:26.772 --> 00:01:29.284
But there's only one
place where it's defined.

24
00:01:29.284 --> 00:01:32.698
That is strictly not the case
when we're doing this.

25
00:01:32.698 --> 00:01:35.679
It's almost like instead
of defining a class,

26
00:01:35.679 --> 00:01:39.039
you have object literals
with methods on the object.

27
00:01:39.039 --> 00:01:42.650
And you're using those all over the place,
you have no central definition for those.

28
00:01:42.650 --> 00:01:47.880
It'd be very easy for them to sort of
drift apart at different call sites.

29
00:01:47.880 --> 00:01:50.600
So we wanna have a central
place where this is defined.

30
00:01:50.600 --> 00:01:52.870
And, of course,
we want the benefits of import and export.

31
00:01:52.870 --> 00:01:57.054
I'm gonna open the equivalent
code snippet in our editor here.

32
00:02:01.278 --> 00:02:07.475
So let's say that we have something
that represents an amount, right?

33
00:02:07.475 --> 00:02:09.767
We've got a currency type and a value,

34
00:02:09.767 --> 00:02:13.880
so you could say like 300 Canadian
dollars, something like that.

35
00:02:15.130 --> 00:02:19.380
And let's say we wanted to define
a function called printAmount.

36
00:02:21.720 --> 00:02:24.800
Well, what we've done here is
we've created a type alias.

37
00:02:24.800 --> 00:02:29.299
So we're saying typeAmount =, and
then look at the right side of this.

38
00:02:29.299 --> 00:02:31.816
It's definitely a type, right?

39
00:02:31.816 --> 00:02:33.119
There are no commas here.

40
00:02:34.650 --> 00:02:39.040
This is a string, like string and number,
these are types, they are not values.

41
00:02:39.040 --> 00:02:43.919
This is one of the only times
you will see type information on

42
00:02:43.919 --> 00:02:46.661
the right side of an assignment.

43
00:02:46.661 --> 00:02:50.727
And this is something that will completely
melt away as part of the compile process.

44
00:02:50.727 --> 00:02:54.229
This will get erased from your code,
not your source code,

45
00:02:54.229 --> 00:02:58.170
but when you do your build,
this will just completely disappear.

46
00:03:00.110 --> 00:03:04.240
Because we've defined this and
we've given it a name, look at this,

47
00:03:04.240 --> 00:03:08.310
we can use it in place of what would
have been a literal type like this.

48
00:03:08.310 --> 00:03:14.000
So instead of doing this,
we can just say, that's amount.

49
00:03:14.000 --> 00:03:15.790
We could use this in a bunch
of different places.

50
00:03:15.790 --> 00:03:19.630
You can, of course, export it,
import it, as we'll see later.

51
00:03:19.630 --> 00:03:25.209
So here I've got an object I'm creating
called donation, and it's valid.

52
00:03:25.209 --> 00:03:29.974
So there's no need that I say this
is an amount, it must be an amount.

53
00:03:29.974 --> 00:03:33.198
It's literally just a shorthand for

54
00:03:33.198 --> 00:03:38.919
an explicitly defined type,
there's no other formality to it.

55
00:03:41.283 --> 00:03:44.573
Is asking what are the differences
between types of interfaces.

56
00:03:44.573 --> 00:03:49.820
I promise we will get to that, that is
in this section, we will get there.

57
00:03:49.820 --> 00:03:55.650
So, a type alias,
here's one difference with interfaces.

58
00:03:55.650 --> 00:04:00.442
A type alias can hold any type that
you're able to define in TypeScript.

59
00:04:00.442 --> 00:04:01.033
So we could say,

60
00:04:09.250 --> 00:04:12.845
Something like that, MightBeNull,
string might be null.

61
00:04:12.845 --> 00:04:15.841
You can put whatever you want here,
that's not the case for interfaces,

62
00:04:15.841 --> 00:04:16.720
as we'll see later.

63
00:04:16.720 --> 00:04:20.660
But that is one of the great
powers of a type alias.

64
00:04:20.660 --> 00:04:23.300
If it's a type, you can give it a name.

65
00:04:23.300 --> 00:04:24.704
And then you can import and export.

66
00:04:27.923 --> 00:04:33.001
So if we look at the example from last
chapter where we're flipping a coin.

67
00:04:33.001 --> 00:04:36.269
And we've got this maybeGetUserInfo thing,
and

68
00:04:36.269 --> 00:04:40.250
I've got in all its full glory,
there's your return type.

69
00:04:40.250 --> 00:04:42.676
It's just a lot of syntax here, right?

70
00:04:42.676 --> 00:04:45.294
Lots of square brackets, lots of braces,

71
00:04:45.294 --> 00:04:48.287
it kind of makes you cross
your eyes a little bit.

72
00:04:50.240 --> 00:04:54.841
So there's our flipCoin,
it's heads or tails.

73
00:04:54.841 --> 00:04:58.514
And then maybeGetUserInfo,
there's its return type.

74
00:04:58.514 --> 00:05:04.064
So if we were to model
the return type as a type alias,

75
00:05:08.678 --> 00:05:16.016
We could do it like this,
create a tuple type, right?

76
00:05:16.016 --> 00:05:21.591
UserInfoOutcomeError,
UserInfoOutcomeSuccess.

77
00:05:21.591 --> 00:05:25.541
Then we could union those types together.

78
00:05:25.541 --> 00:05:28.400
And the tooltips get much nicer.

79
00:05:28.400 --> 00:05:34.454
You have words that can explain
what the meaning of this thing is.

80
00:05:34.454 --> 00:05:37.669
It's a little bit like we're no longer
telling someone how to build a watch,

81
00:05:37.669 --> 00:05:39.214
we're telling them what time it is.

82
00:05:39.214 --> 00:05:43.562
We're giving these types a semantic
meaning, as opposed to just

83
00:05:43.562 --> 00:05:48.159
spitting out the contents of
the structure that we're looking for.

84
00:05:48.159 --> 00:05:50.069
Just like variable names, right?

85
00:05:50.069 --> 00:05:51.569
Variables have a name,

86
00:05:51.569 --> 00:05:56.226
and you can write it in such a way that
it conveys the purpose of this thing.

87
00:05:56.226 --> 00:05:58.679
Now you can do that for types as well.

88
00:05:58.679 --> 00:06:00.791
Just think of it like a variable for
types.

89
00:06:03.283 --> 00:06:07.540
So let's talk a little bit how we
can work with these type aliases.

90
00:06:07.540 --> 00:06:10.520
And I'm calling it inheritance for
type aliases.

91
00:06:10.520 --> 00:06:12.864
It's not really inheritance, but

92
00:06:12.864 --> 00:06:17.940
it's sort of how do you build type
aliases based on other type aliases.

93
00:06:17.940 --> 00:06:19.940
And you do that with an intersection type.

94
00:06:19.940 --> 00:06:24.818
So here's an example where we have,
let's say, we have a library that makes

95
00:06:24.818 --> 00:06:29.410
every JavaScript date, gives it
a method on it called getDescription.

96
00:06:29.410 --> 00:06:32.050
So all dates can have descriptions now.

97
00:06:32.050 --> 00:06:35.789
So we could say, all right,
well, this is a special date.

98
00:06:35.789 --> 00:06:38.575
And sorry, to be clear,
not all dates would have descriptions.

99
00:06:38.575 --> 00:06:43.765
We're creating a special date type for
those that have descriptions.

100
00:06:43.765 --> 00:06:47.193
So we would say, all right,
I want everything that's on the date type.

101
00:06:47.193 --> 00:06:54.086
And I also want to add a method to it,
getDescription, which returns a string.

102
00:06:54.086 --> 00:06:57.880
And here we can actually
create a SpecialDate, right?

103
00:06:57.880 --> 00:07:01.929
We're gonna create a new Date, and
we're gonna add a method to it like this.

104
00:07:03.810 --> 00:07:07.464
And look at this, we've got newYearsEve,
it's a SpecialDate, so

105
00:07:07.464 --> 00:07:10.010
the tooltip just got pretty clean.

106
00:07:10.010 --> 00:07:13.533
And here, look,
I've got all of the Date functions,

107
00:07:13.533 --> 00:07:18.220
but there's getDescription, but
getFullYear is still there as well.

108
00:07:18.220 --> 00:07:20.560
These are things that are available
on a conventional Date.

109
00:07:20.560 --> 00:07:25.538
So if you wanna think about this kind of
like inheritance, where we can say, all

110
00:07:25.538 --> 00:07:31.230
right, I have a type alias, I want to make
another type alias that's a subtype of it.

111
00:07:31.230 --> 00:07:35.380
This is a subtype of a Date,
it can pass as a Date.

112
00:07:36.480 --> 00:07:40.580
If you need me to give you a Date, and
I hand you this, you'll be totally happy.

113
00:07:40.580 --> 00:07:47.335
It has getFullYear, it has valueOf,
it can create an ISO 8601 string.

114
00:07:47.335 --> 00:07:48.963
But it's also got some other stuff.

115
00:07:48.963 --> 00:07:56.110
This is actually a more specific type of
Date, cuz it has this extra requirement.

116
00:07:56.110 --> 00:07:58.440
The getDescription method must be on it.

