WEBVTT

1
00:00:00.413 --> 00:00:02.998
So we've got two big topics
left in this course.

2
00:00:02.998 --> 00:00:06.418
The first is type guards and
narrowing, and

3
00:00:06.418 --> 00:00:10.955
then we're going to touch on
generics as our final topic.

4
00:00:10.955 --> 00:00:15.233
Type guards are really
important pieces of code.

5
00:00:15.233 --> 00:00:20.324
You can think of them as
a junction between something

6
00:00:20.324 --> 00:00:24.490
with special meaning
to the type system and

7
00:00:24.490 --> 00:00:31.452
something equivalent that, actually,
it's evaluated at runtime.

8
00:00:31.452 --> 00:00:35.570
A great example of this, or
several examples, is this here,

9
00:00:35.570 --> 00:00:37.005
which we saw before.

10
00:00:37.005 --> 00:00:42.678
Where we're like, okay, I've got this
function that could return some tuples.

11
00:00:42.678 --> 00:00:48.799
I'm gonna use the first element
of the tupple, To narrow, right?

12
00:00:48.799 --> 00:00:53.646
To handle the error case, and
then here's the else down here.

13
00:00:53.646 --> 00:00:59.611
When I say that there's something
where compile-time type checking and

14
00:00:59.611 --> 00:01:04.716
runtime evaluation meet,
it's really this line right here.

15
00:01:04.716 --> 00:01:09.155
This line of code is run, it's part of
what your JavaScript program will run.

16
00:01:09.155 --> 00:01:12.259
And it also has meaning
to the type system, and

17
00:01:12.259 --> 00:01:15.051
those two things are in close alignment.

18
00:01:15.051 --> 00:01:19.625
This check at runtime will only pass
if the first element of the tuple is

19
00:01:19.625 --> 00:01:21.185
the string "error".

20
00:01:21.185 --> 00:01:27.044
And we know that it's safe to narrow
down this way if that check passes.

21
00:01:27.044 --> 00:01:30.743
There are lots of other built-in
type guards that you can use, so

22
00:01:30.743 --> 00:01:32.300
here are a variety of them.

23
00:01:32.300 --> 00:01:36.143
We've seen this one, instanceof,
we've seen this one today, typeof,

24
00:01:36.143 --> 00:01:37.919
there's a specific value check.

25
00:01:37.919 --> 00:01:41.045
We saw this with discriminated unions,
remember?

26
00:01:41.045 --> 00:01:45.844
When we were checking explicitly if the
first element of the tuple is the string

27
00:01:45.844 --> 00:01:49.127
"success" or "error",
we were able to use that.

28
00:01:49.127 --> 00:01:52.151
A truthy/falsy check is a type guard,
right?

29
00:01:52.151 --> 00:01:59.049
If you have a value that could be
undefined, it can become defined.

30
00:01:59.049 --> 00:02:03.499
There's a built-in array function called
isArray, property presence check, right?

31
00:02:03.499 --> 00:02:08.190
This is just seeing if
value has date range in it.

32
00:02:08.190 --> 00:02:10.835
And I think that's the full list.

33
00:02:10.835 --> 00:02:13.680
Now let's go through, let's look at this.

34
00:02:13.680 --> 00:02:18.552
We've got this value,
which could be a date, null, undefined,

35
00:02:18.552 --> 00:02:23.520
the string "pineapple",
a tuple of size 1 containing a number.

36
00:02:23.520 --> 00:02:26.929
Or this object containing a date
range with a pair of dates.

37
00:02:26.929 --> 00:02:29.258
So this is one big conditional here.

38
00:02:29.258 --> 00:02:33.883
And we can see how we use these type
guards to narrow down into specific

39
00:02:33.883 --> 00:02:34.930
little cases.

40
00:02:34.930 --> 00:02:38.878
Where we know we can handle
this value in a specific way,

41
00:02:38.878 --> 00:02:42.164
depending on the type
guard that's applied.

42
00:02:42.164 --> 00:02:44.613
Here, instanceof Date,
we narrowed down to Date.

43
00:02:44.613 --> 00:02:47.486
Here we're checking to see if
the value is a string, and

44
00:02:47.486 --> 00:02:51.234
we know "pineapple" is the only
possibility that this thing could be.

45
00:02:51.234 --> 00:02:54.438
That's the only option
here that's a string.

46
00:02:54.438 --> 00:02:55.970
Here's the specific value check.

47
00:02:55.970 --> 00:02:58.945
We're checking to see if
it equals the value null.

48
00:02:58.945 --> 00:03:01.494
Null is the only thing it could be, so

49
00:03:01.494 --> 00:03:05.620
we kind of were crossing these
off the list, effectively.

50
00:03:05.620 --> 00:03:10.335
Now we can apply a truthy/falsy check,
and it could have been null, but

51
00:03:10.335 --> 00:03:12.510
we handled that up here already.

52
00:03:12.510 --> 00:03:16.666
And we're in the else block,
so we know that it's not null,

53
00:03:16.666 --> 00:03:18.308
it has to be undefined.

54
00:03:18.308 --> 00:03:21.996
If it's still falsy, it must be undefined.

55
00:03:21.996 --> 00:03:26.617
We can check to see if it's an array,
and then we get that tuple.

56
00:03:26.617 --> 00:03:30.882
We can check to see if it's an object,
I mean, actually,

57
00:03:30.882 --> 00:03:35.160
by this point,
this is the only thing it could be, right?

58
00:03:35.160 --> 00:03:39.091
So we're checking to see if dateRange
is in the object, and it is.

59
00:03:39.091 --> 00:03:41.971
And down at the end here,
we get this thing called never,

60
00:03:41.971 --> 00:03:46.060
remember that's the type, call it a bottom
type, it represents the empty set.

61
00:03:46.060 --> 00:03:50.165
What this means is we're all finished,
there's nothing else it could be.

62
00:03:50.165 --> 00:03:54.255
We've handled every possible thing
it could be using these type guards.

63
00:03:54.255 --> 00:03:56.533
And within each of these code branches,

64
00:03:56.533 --> 00:03:59.146
we have a very specific
type that we can act on.

65
00:04:03.303 --> 00:04:06.961
We can define our own type guards, so

66
00:04:06.961 --> 00:04:11.098
let me go back to our
code here real quick.

67
00:04:11.098 --> 00:04:18.232
There are the built-in type guards,
here are our user-defined type guards.

68
00:04:18.232 --> 00:04:25.125
So let's say that we have this interface,
CarLike, something car-ish.

69
00:04:25.125 --> 00:04:32.502
And we have this value which is an any,
could be anything, right?

70
00:04:32.502 --> 00:04:36.128
We wanna determine whether it's a car, and

71
00:04:36.128 --> 00:04:40.250
we wanna do that just
exclusively based on shape.

72
00:04:40.250 --> 00:04:42.509
So, what this would do,
it's very verbose here,

73
00:04:42.509 --> 00:04:45.828
we're gonna work our way towards things
that are a lot more sane than this.

74
00:04:45.828 --> 00:04:49.840
We first have to see, okay,
is this is this truthy or not, is it null,

75
00:04:49.840 --> 00:04:50.860
is it undefined?

76
00:04:50.860 --> 00:04:53.886
All right,
we check to see if it's an object.

77
00:04:53.886 --> 00:04:57.536
We check to see if make is
a property in the object, and

78
00:04:57.536 --> 00:04:59.578
the value of make is a string.

79
00:04:59.578 --> 00:05:02.342
And we do the same thing for
the other fields.

80
00:05:02.342 --> 00:05:05.743
And then when we get down here,
we get nothing,

81
00:05:05.743 --> 00:05:08.304
doesn't seem to be working for us.

82
00:05:09.681 --> 00:05:14.898
But this is what you would have
that represents this check.

83
00:05:14.898 --> 00:05:21.047
Part of the challenge here is,
there's so much going on here.

84
00:05:21.047 --> 00:05:28.057
And we start with an any,
it's just not able to narrow it down.

85
00:05:28.057 --> 00:05:34.130
So what we can do instead,
we need this user-defined type-guard.

86
00:05:35.227 --> 00:05:39.548
We can define this function
that says isCarLike, and

87
00:05:39.548 --> 00:05:42.051
we put that same check in here.

88
00:05:42.051 --> 00:05:45.910
And what we would hope is,
when we're done,

89
00:05:45.910 --> 00:05:50.380
we can write something like this,
where we'd say,

90
00:05:50.380 --> 00:05:55.066
if isCarLike, and
then we'd get the type car in here.

91
00:05:55.066 --> 00:05:56.421
Now, we don't have it yet.

92
00:05:58.535 --> 00:06:00.227
But this is the syntax we'd like.

93
00:06:00.227 --> 00:06:04.095
Maybe we define this in one place,
and then we can use this

94
00:06:04.095 --> 00:06:08.780
nice readable JavaScript,
TypeScript everywhere else in our app.

95
00:06:08.780 --> 00:06:14.565
So we're gonna have to alter
our function signature

96
00:06:14.565 --> 00:06:19.831
slightly by adding
the following return type.

97
00:06:21.011 --> 00:06:25.735
ValueToTest, isCarLike.

98
00:06:25.735 --> 00:06:29.925
Now, looking at this,
what is the actual return type here?

99
00:06:29.925 --> 00:06:34.002
Forget what I just wrote, what's
the type of the thing I'm returning?

100
00:06:40.265 --> 00:06:41.080
&gt;&gt; Boolean?

101
00:06:41.080 --> 00:06:43.980
&gt;&gt; It's a Boolean,
you're absolutely right, it is a Boolean.

102
00:06:43.980 --> 00:06:48.092
Type guards should return Booleans,
they need to.

103
00:06:48.092 --> 00:06:53.001
This tells the compiler
what the Boolean means.

104
00:06:53.001 --> 00:06:59.354
If the Boolean is true,
it means valueToTest is a CarLike.

105
00:06:59.354 --> 00:07:05.505
If the Boolean returns false,
it means it's not a CarLike.

106
00:07:05.505 --> 00:07:09.725
And that's what lets us have
a user-defined type guard here.

107
00:07:09.725 --> 00:07:14.611
It's not just about returning a Boolean,
it's about this line of code here,

108
00:07:14.611 --> 00:07:18.845
this expression, that tells
the compiler what the Boolean means.

109
00:07:18.845 --> 00:07:25.512
It's what connects this stuff that
runs at runtime with what it means and

110
00:07:25.512 --> 00:07:29.568
what we should take it
to mean at build time.

111
00:07:29.568 --> 00:07:32.670
And it's very important that
you keep these things well

112
00:07:32.670 --> 00:07:35.580
aligned when you write
user-defined type guards.

113
00:07:35.580 --> 00:07:39.811
If you write these poorly,
if you write type guards that lie to you,

114
00:07:39.811 --> 00:07:41.903
the lies will be very confident.

115
00:07:41.903 --> 00:07:46.980
And you'll have weird stuff popping
up throughout your application.

116
00:07:46.980 --> 00:07:53.546
So it's very, very important that you
kind of keep this well-aligned with this.

117
00:07:53.546 --> 00:07:56.301
And as long as you do that,
these things are great.

118
00:07:56.301 --> 00:07:59.728
They help you handle
union types beautifully,

119
00:07:59.728 --> 00:08:04.623
it's common to use these for
API responses that you've received.

120
00:08:04.623 --> 00:08:08.401
And you don't know what this JSON thing
is, but you pass it to one of these.

121
00:08:08.401 --> 00:08:12.890
And then you get a great type that you can
send downstream to the rest of your code

122
00:08:12.890 --> 00:08:15.150
and it's a very nice type of response.

123
00:08:15.150 --> 00:08:19.386
But it has to be consistent,
the runtime and

124
00:08:19.386 --> 00:08:24.664
the meaning of the check have
to be in close alignment.

125
00:08:24.664 --> 00:08:29.264
So that is a type guard
of the value is foo form.

126
00:08:29.264 --> 00:08:35.022
There's another thing we can write here,
slightly different.

127
00:08:41.433 --> 00:08:47.536
Oops, yeah, that's great, and
I'm gonna get rid of the bottom thing.

128
00:08:53.668 --> 00:08:56.545
Okay, this is a different
flavor of type guard,

129
00:08:56.545 --> 00:08:59.294
and I want you to look at
this return type here.

130
00:08:59.294 --> 00:09:03.213
It still returns a Boolean,
we've inverted it,

131
00:09:03.213 --> 00:09:08.269
there's the bang and
parentheses around it, so we flipped it.

132
00:09:08.269 --> 00:09:15.822
And we're saying, if it turns out
to not be CarLike, throw an error.

133
00:09:15.822 --> 00:09:19.680
Now we can say assertsIsCarLike,
and we say this,

134
00:09:19.680 --> 00:09:22.834
it asserts that value to test is CarLike.

135
00:09:22.834 --> 00:09:27.205
And instead of having to use
it in a condition like this,

136
00:09:27.205 --> 00:09:29.068
we can use it like this.

137
00:09:29.068 --> 00:09:34.305
Effectively, it's the same concept,
except we're saying, look,

138
00:09:34.305 --> 00:09:39.032
it's not about if-else,
it's about throw versus not throw.

139
00:09:39.032 --> 00:09:45.083
The fact that we made it to the next line,
the fact that we're on line 114 and

140
00:09:45.083 --> 00:09:51.057
haven't thrown, that means it's a CarLike,
whereas up here it was an any.

141
00:09:54.606 --> 00:09:58.484
These are also good,
it just depends on what you're doing,

142
00:09:58.484 --> 00:10:01.080
whether you wanna throw or not, right?

143
00:10:01.080 --> 00:10:03.787
I would use these when you intend
to throw, when you should throw.

144
00:10:08.638 --> 00:10:13.863
All right, we're gonna come back
full circle to classes right now.

145
00:10:13.863 --> 00:10:17.534
So remember our private
field presence check, right?

146
00:10:17.534 --> 00:10:20.630
We use that to make our equals method.

147
00:10:20.630 --> 00:10:23.329
Well, I mean, remember how nice this was?

148
00:10:23.329 --> 00:10:28.028
The fact that we can see this field
here means it's definitely a car,

149
00:10:28.028 --> 00:10:30.711
right up until this point it was an any.

150
00:10:30.711 --> 00:10:35.069
But getting past this one
check told us that it's a car.

151
00:10:35.069 --> 00:10:40.668
I love static methods as
user-defined type guards here,

152
00:10:40.668 --> 00:10:47.761
because it can see private data, and
this is a pretty bulletproof thing.

153
00:10:47.761 --> 00:10:51.556
I mean, just consider how
good that looks versus this.

154
00:10:51.556 --> 00:10:56.469
Now, they're not equivalent, because
this kind of type guard is much more

155
00:10:56.469 --> 00:10:59.080
conducive to a structural type system,

156
00:10:59.080 --> 00:11:03.412
where you're really just dealing
with issues relating to shape.

157
00:11:03.412 --> 00:11:07.044
Not issues relating to which
constructor you came out of.

158
00:11:07.044 --> 00:11:08.691
Sometimes this is what you want.

159
00:11:08.691 --> 00:11:12.049
Sometimes you want nominal
style type guards, and

160
00:11:12.049 --> 00:11:14.322
this this will work beautifully.

161
00:11:14.322 --> 00:11:19.273
I would just recognize which each one is,
they're both tools in the toolbox, and

162
00:11:19.273 --> 00:11:20.800
this one is really nice.

163
00:11:20.800 --> 00:11:25.781
So that I've just taken our .equals
method, and removed the comparison

164
00:11:25.781 --> 00:11:30.453
of serial numbers, and I just returned
true, if we make it this far.

165
00:11:30.453 --> 00:11:32.591
That's all I did here.

166
00:11:32.591 --> 00:11:37.179
But the presence of a private field,
it is conclusive,

167
00:11:37.179 --> 00:11:42.658
the fact that you can see it at all
means you know what this thing is.

168
00:11:42.658 --> 00:11:48.080
You could do this, and then,
instead of returning false down here,

169
00:11:48.080 --> 00:11:52.577
maybe you kick out and
you check some structural things.

170
00:11:52.577 --> 00:11:57.312
You got options, but
they're both kind of good tools.

171
00:11:57.312 --> 00:12:02.285
And we can see proof that it works,
although it will,

172
00:12:02.285 --> 00:12:05.168
there's car, there's any.

173
00:12:05.168 --> 00:12:09.782
But static methods
are pretty good with that.

174
00:12:09.782 --> 00:12:14.257
This is something that was
added pretty recently,

175
00:12:14.257 --> 00:12:21.034
I think it's a 5.3 feature,
the ability to narrow with switch (true).

176
00:12:21.034 --> 00:12:25.982
So I've created two classes here, a fish
and bird, fish can swim, birds can fly.

177
00:12:25.982 --> 00:12:30.133
And I can write a nice little
switch statement like this,

178
00:12:30.133 --> 00:12:34.720
which some of you that come from
other programming languages,

179
00:12:34.720 --> 00:12:37.593
this is a very common construct to see.

180
00:12:37.593 --> 00:12:39.764
If you've ever heard
the term pattern matching,

181
00:12:39.764 --> 00:12:41.889
this looks a lot like pattern matching,
right?

182
00:12:41.889 --> 00:12:44.959
If you've used Scala or Erlang or Elixir,

183
00:12:44.959 --> 00:12:49.750
there are lots of languages that
have pattern matching like this.

184
00:12:49.750 --> 00:12:52.449
So effectively, we're saying,
I'm going to switch on true.

185
00:12:52.449 --> 00:12:59.348
But really it just comes to each case
clause being compared with true.

186
00:12:59.348 --> 00:13:04.236
So we're gonna keep going
down these case clauses until

187
00:13:04.236 --> 00:13:07.359
we find one that evaluates to true.

188
00:13:07.359 --> 00:13:10.621
And so here, did this work?

189
00:13:10.621 --> 00:13:18.661
val instanceof Bird, Wait a sec.

190
00:13:22.432 --> 00:13:25.065
I suspect I know what's going on here.

191
00:13:25.065 --> 00:13:29.375
Yep, it's definitely a 5.3 feature,

192
00:13:29.375 --> 00:13:33.693
because it's not working in 5.2.2.

193
00:13:33.693 --> 00:13:39.800
Here's 5.3, hey, there we go,
super, super modern.

194
00:13:39.800 --> 00:13:44.750
VS Code likes to troll me by switching
which TypeScript version it uses without

195
00:13:44.750 --> 00:13:45.581
telling me.

196
00:13:45.581 --> 00:13:50.524
But this looks very neat,
especially if you have a long

197
00:13:50.524 --> 00:13:54.934
chain of things that
you're trying to process.

198
00:13:54.934 --> 00:13:57.643
It's nice to have an option
to write things this way.

199
00:14:00.963 --> 00:14:03.500
So my advice for
writing high quality type guards,

200
00:14:03.500 --> 00:14:07.404
I talked about this a little already,
but here's an especially bad one here.

201
00:14:07.404 --> 00:14:10.919
Write a type guard that's supposed
to check if val is specifically

202
00:14:10.919 --> 00:14:11.806
the value null.

203
00:14:11.806 --> 00:14:15.982
And we're writing it as if null is
the only falsy thing that could exist.

204
00:14:15.982 --> 00:14:19.596
The number 0 will pass through here,
an empty string will pass through here,

205
00:14:19.596 --> 00:14:21.580
the Boolean false will pass through here.

206
00:14:21.580 --> 00:14:27.712
Undefined, it's just,
these are all really bad, these are bad.

207
00:14:27.712 --> 00:14:33.498
We would fix it by saying val,
Something like that.

208
00:14:33.498 --> 00:14:37.549
This would be a silly type guard to
write because you have a built in one,

209
00:14:37.549 --> 00:14:38.571
this right here.

210
00:14:38.571 --> 00:14:42.981
But this is a particularly harmful
place to lie in your types.

211
00:14:42.981 --> 00:14:46.804
Cuz TypeScript will take you at your work,
and

212
00:14:46.804 --> 00:14:50.339
it will trickle off throughout your code.

213
00:14:50.339 --> 00:14:55.434
You'll think that I sold you a bill of
goods, that I told you that this will

214
00:14:55.434 --> 00:15:01.115
help catch bugs, and instead it's creating
bugs, so, be careful in this area.

