WEBVTT

1
00:00:00.310 --> 00:00:02.710
Next, we're going to
talk about type queries.

2
00:00:02.710 --> 00:00:06.406
Type queries are a way that
you can extract a type from

3
00:00:06.406 --> 00:00:11.680
a value that you might have, and
TypeScript offers a couple of these.

4
00:00:11.680 --> 00:00:16.011
We're going to look at each of the
different kinds of type queries that we

5
00:00:16.011 --> 00:00:17.005
can, perform.

6
00:00:17.005 --> 00:00:21.053
And then we're going to look at
an interesting use case called a type

7
00:00:21.053 --> 00:00:23.130
registry pattern.

8
00:00:23.130 --> 00:00:27.607
Where we'll combine open
interfaces with type queries and

9
00:00:27.607 --> 00:00:30.030
get some interesting results.

10
00:00:31.120 --> 00:00:35.570
So, first, let's look at keyof.

11
00:00:35.570 --> 00:00:44.160
The keyof type query allows us to
obtain the type representing an object.

12
00:00:44.160 --> 00:00:49.592
So in this case,
we've got date property names.

13
00:00:49.592 --> 00:00:51.859
We're saying keyof date.

14
00:00:53.929 --> 00:00:58.458
And I'm using an intersection
type here in an interesting way.

15
00:00:58.458 --> 00:01:00.601
What are valid property names?

16
00:01:00.601 --> 00:01:04.485
What kinds of things could be
property keys in JavaScript?

17
00:01:04.485 --> 00:01:08.988
Can we have property
keys that are strings?

18
00:01:08.988 --> 00:01:11.810
Certainly, any other types?

19
00:01:13.830 --> 00:01:14.520
&gt;&gt; Numbers.

20
00:01:14.520 --> 00:01:15.100
&gt;&gt; Numbers.

21
00:01:15.100 --> 00:01:15.660
&gt;&gt; Symbols.

22
00:01:15.660 --> 00:01:17.610
&gt;&gt; And symbols,
those are the three things.

23
00:01:17.610 --> 00:01:23.372
So when we say, give me the intersection
type of date, property names, and string,

24
00:01:23.372 --> 00:01:28.670
we're gonna get the complete set of
properties on date that have string keys.

25
00:01:28.670 --> 00:01:32.429
We're kind of like excluding
the numeric properties and

26
00:01:32.429 --> 00:01:35.101
symbol properties, if they may exist.

27
00:01:35.101 --> 00:01:38.401
I'm sure there's a symbol
property somewhere in there, but

28
00:01:38.401 --> 00:01:41.705
that's why we get all of these
spelled out so nice, right?.

29
00:01:41.705 --> 00:01:44.687
Those are all the names of
the things you could find on dates.

30
00:01:44.687 --> 00:01:48.009
They're method names and field names.

31
00:01:49.250 --> 00:01:50.670
And here are the symbols.

32
00:01:52.430 --> 00:01:54.640
Doesn't appear, they're already.

33
00:01:54.640 --> 00:02:00.440
Typeof, okay.

34
00:02:00.440 --> 00:02:03.993
In any case, this is a neat little
trick if you ever wanna expand out

35
00:02:03.993 --> 00:02:08.055
what something is, just intersect it
with string and TypeScript will say,

36
00:02:08.055 --> 00:02:11.150
I can't just regard this
as key update anymore.

37
00:02:11.150 --> 00:02:15.090
I have to make it all those strings,
question?

38
00:02:15.090 --> 00:02:19.569
&gt;&gt; I think you might have just answered
I was like why can't I hover over date

39
00:02:19.569 --> 00:02:24.198
property names to see them but you're
saying it just it's like a shorthand

40
00:02:24.198 --> 00:02:28.440
it VS Code on expand but once you do
the intersection, it forces it to

41
00:02:28.440 --> 00:02:29.508
&gt;&gt; There you go,

42
00:02:29.508 --> 00:02:35.420
I'm defeating it's convenient and
concise representation here.

43
00:02:35.420 --> 00:02:38.730
Being a good guy developer, I know better.

44
00:02:38.730 --> 00:02:41.430
So I'm saying spell it all out for you.

45
00:02:41.430 --> 00:02:44.160
And you see we get 33 more,
you're not seeing it all.

46
00:02:45.420 --> 00:02:48.650
Let's look at another type query,
it's called typeof.

47
00:02:50.370 --> 00:02:54.260
And I'm just going to uncomment this
code here, oops, that is a caps lock.

48
00:02:56.800 --> 00:03:02.629
So here we have a function called main (),

49
00:03:02.629 --> 00:03:08.470
and we have an API
response that comes back.

50
00:03:08.470 --> 00:03:12.933
And you can see that I have a fetch,
which this function

51
00:03:12.933 --> 00:03:17.780
returns a promise that
resolves to a response object.

52
00:03:17.780 --> 00:03:21.300
It's not ultimately the JSON but
the HTTP response.

53
00:03:21.300 --> 00:03:27.178
It can think of this promise as like,
the first byte when the response comes in,

54
00:03:27.178 --> 00:03:31.854
and then you could, wait for
the last byte and get all the JSON.

55
00:03:31.854 --> 00:03:37.240
And then here I've got a promise that
is immediately resolved to a string.

56
00:03:39.060 --> 00:03:44.820
So I've got this API response here, it's
tuple, cuz I'm waiting for both promises.

57
00:03:44.820 --> 00:03:50.760
I'm kind of racing them against each
other, waiting for both to resolve.

58
00:03:50.760 --> 00:03:57.690
And I get this tuple response string,
but I don't have a type here.

59
00:03:57.690 --> 00:04:02.740
Maybe this is more complicated and
I don't wanna write it out by hand.

60
00:04:02.740 --> 00:04:05.339
I want it to just always be,
whatever this is,

61
00:04:05.339 --> 00:04:08.490
I wanna create a variable
that has a matching type.

62
00:04:08.490 --> 00:04:16.150
I would use typeof here and look at API
response type, its response, string.

63
00:04:16.150 --> 00:04:23.420
So it's almost like I'm taking a value and
typeof extracts the type of the value.

64
00:04:23.420 --> 00:04:30.390
Be careful, this is different when
you're in type space over here, right?

65
00:04:30.390 --> 00:04:36.249
This is the same keyword but
used in a very different way compared to.

66
00:04:44.639 --> 00:04:48.047
You can kind of think of it I mean,
in both cases,

67
00:04:48.047 --> 00:04:51.632
we're like inquiring about
the type of the thing.

68
00:04:51.632 --> 00:04:55.020
But remember,
this can only be like the primitive types.

69
00:04:55.020 --> 00:04:58.670
Well, sorry, it can only be
a very small set of strings.

70
00:04:58.670 --> 00:05:02.350
Object will come back as a string for
anything that's an object.

71
00:05:03.400 --> 00:05:09.680
So, this, when used in the context
of obtaining a type from a value.

72
00:05:09.680 --> 00:05:13.668
This can return a much like higher
resolution piece of information,

73
00:05:13.668 --> 00:05:16.270
the actual type of whatever this is.

74
00:05:16.270 --> 00:05:19.190
So don't get these two mixed up,
it's the same word.

75
00:05:19.190 --> 00:05:22.924
Conceptually, you're still getting
a type from a value, but this one's,

76
00:05:22.924 --> 00:05:26.590
I think there are only like eight
strings that this can return.

77
00:05:26.590 --> 00:05:29.080
Whereas this can return any type.

78
00:05:29.080 --> 00:05:32.393
Also, this is an interesting
place to just point this out,

79
00:05:32.393 --> 00:05:34.130
cuz it was convenient to do so.

80
00:05:35.440 --> 00:05:38.920
This is a type alias defined
within a function scope.

81
00:05:38.920 --> 00:05:42.933
Up until now, just for convenience,
all of our Interfaces and

82
00:05:42.933 --> 00:05:46.350
types have been in sort of
top level module scope.

83
00:05:46.350 --> 00:05:49.241
There's nothing to stop you
from creating type aliases or

84
00:05:49.241 --> 00:05:51.930
interfaces wherever
you'd create variables.

85
00:05:51.930 --> 00:05:56.320
You could technically, although it's
kind of weird, create a class in here.

86
00:05:56.320 --> 00:06:00.363
It's unusual, but absolutely possible.

87
00:06:00.363 --> 00:06:04.009
Maybe if you have a big outer function
scope that emits an inner function

88
00:06:04.009 --> 00:06:06.759
object like you're doing
functional programming.

89
00:06:06.759 --> 00:06:12.023
It might make sense to have type
declarations that sort of live

90
00:06:12.023 --> 00:06:18.616
within a closure and can influence what
you're emitting from that closure.

91
00:06:18.616 --> 00:06:23.505
So a common use of typeof here is to

92
00:06:23.505 --> 00:06:29.160
obtain the static side of a class.

93
00:06:29.160 --> 00:06:30.530
So what do we mean by that?

94
00:06:30.530 --> 00:06:33.210
So a CSS rule, it's a class, right?

95
00:06:33.210 --> 00:06:34.170
Normally we do this.

96
00:06:35.740 --> 00:06:38.180
And then we get a CSS rule here and.

97
00:06:40.387 --> 00:06:43.722
I've misnamed my variables here, but

98
00:06:43.722 --> 00:06:48.782
these are all of the things that
are available on a CSS rule.

99
00:06:48.782 --> 00:06:52.468
It's a base class, so that's why we
only have CSS text in parent rule.

100
00:06:52.468 --> 00:06:54.593
But what if we wanted
to get the constructor?

101
00:06:59.650 --> 00:07:04.638
So what we have here is a new signature,

102
00:07:04.638 --> 00:07:07.970
we'll look at that more.

103
00:07:07.970 --> 00:07:14.957
We have a prototype if you're familiar
with writing ES5 JavaScript, pre-2015.

104
00:07:14.957 --> 00:07:18.965
This was the this was
technically the standard,

105
00:07:18.965 --> 00:07:24.734
although arguably 2013,
a lot of folks are already using Babel or

106
00:07:24.734 --> 00:07:29.446
at the time it was called 65
because it was ES6 to ES5.

107
00:07:29.446 --> 00:07:35.506
Which is a name of a project with a very
short shelf life, if I've ever heard one.

108
00:07:35.506 --> 00:07:37.640
But this is prototypal inheritance,

109
00:07:37.640 --> 00:07:41.440
which is what's happening
behind the scenes with classes.

110
00:07:41.440 --> 00:07:46.712
We're seeing that her, so
look what we can do here we can say.

111
00:07:49.300 --> 00:07:54.280
Let's call this MyRule.

112
00:07:54.280 --> 00:07:59.060
const foo = new MyRule().

113
00:07:59.060 --> 00:08:06.274
So this is proof that this is not
an interface representing an instance,

114
00:08:06.274 --> 00:08:11.137
this is a class and
we can obtain its type like this

115
00:08:20.195 --> 00:08:25.275
And there it is, typeof MyRule,
it gives us the type of this value,

116
00:08:25.275 --> 00:08:30.641
not the type of an instance of a class
but, the type of the class itself.

117
00:08:30.641 --> 00:08:36.642
Sometimes we call this
the static side of the class.

118
00:08:36.642 --> 00:08:39.728
If you've used static fields before or

119
00:08:39.728 --> 00:08:44.507
static methods this is the static
side of the class, right?

120
00:08:44.507 --> 00:08:49.264
Including things like this STYLE_RULE,
these are just variables that are hanging

121
00:08:49.264 --> 00:08:52.222
off of the class itself,
and you can see those here.

122
00:08:55.700 --> 00:09:01.516
So one more type query we're gonna
touch on is indexed access types.

123
00:09:01.516 --> 00:09:04.763
These are pretty cool and
fairly, the syntax at least for

124
00:09:04.763 --> 00:09:08.820
me is pretty easy to understand,
I hope it is for you too.

125
00:09:08.820 --> 00:09:12.347
Let's say we have an interface called car,
we've got our make,

126
00:09:12.347 --> 00:09:16.160
model here, and
then we've got an RGB color of some sort.

127
00:09:16.160 --> 00:09:21.018
But let's say we wanted to extract
just the color of the car,

128
00:09:21.018 --> 00:09:23.550
the type of this thing here.

129
00:09:23.550 --> 00:09:24.640
It's not a named type.

130
00:09:24.640 --> 00:09:29.368
There's no type alias we have access to,
but we can use square bracket notation,

131
00:09:29.368 --> 00:09:34.300
passing in the string, representing this
property key, and look what we get, red,

132
00:09:34.300 --> 00:09:35.910
green, blue.

133
00:09:35.910 --> 00:09:40.806
Indexed access type,
meaning you're accessing within

134
00:09:40.806 --> 00:09:44.690
a type using an index,
this being the index.

135
00:09:46.730 --> 00:09:50.160
You can use this for tuples as well,
where you'd pass in a numeric index.

136
00:09:51.460 --> 00:09:54.409
And you can see we get real
type checking happening here,

137
00:09:54.409 --> 00:09:58.720
this is a property that's not on the car,
we're getting a type error as we should.

138
00:09:58.720 --> 00:10:02.205
Here's an example of a double dip, right?

139
00:10:02.205 --> 00:10:07.317
Reaching into colour and then getting the
property, red, what is the type of red?

140
00:10:07.317 --> 00:10:11.450
So you're going here, and
then here, and then what's its type?

141
00:10:11.450 --> 00:10:13.360
And so we get a string.

142
00:10:13.360 --> 00:10:14.922
There's your string.

143
00:10:14.922 --> 00:10:18.947
And this is really interesting here,

144
00:10:18.947 --> 00:10:24.231
projecting a union type
through the index without

145
00:10:24.231 --> 00:10:29.529
hovering over this what do
you think we might get?

146
00:10:30.904 --> 00:10:31.662
Any ideas?

147
00:10:34.055 --> 00:10:37.378
What would what would make sense?

148
00:10:37.378 --> 00:10:42.905
&gt;&gt; Year
&gt;&gt; Year?

149
00:10:42.905 --> 00:10:45.138
Other ideas?

150
00:10:45.138 --> 00:10:46.761
Color or a string.

151
00:10:46.761 --> 00:10:52.360
Color or a string so
you're both right, you get year or

152
00:10:52.360 --> 00:10:57.613
the type of year, but
you also get this other type.

153
00:10:57.613 --> 00:11:03.359
The way I want you to think
about this is it's as if we take

154
00:11:03.359 --> 00:11:11.323
each member of the union type projected
through the indexed access pathway.

155
00:11:11.323 --> 00:11:15.640
And then we take all of those results and
then union them together.

156
00:11:18.030 --> 00:11:22.307
Sometimes this is referred to
as projecting a union through

157
00:11:22.307 --> 00:11:24.180
an indexed access type.

158
00:11:24.180 --> 00:11:27.851
If you pass into property names and
then you get back,

159
00:11:27.851 --> 00:11:31.940
here's your years type and
then here's your colors type.

160
00:11:31.940 --> 00:11:34.636
It's pretty cool.

161
00:11:38.915 --> 00:11:42.580
Okay, yes sir?

162
00:11:42.580 --> 00:11:44.549
&gt;&gt; One question from the chat.

163
00:11:44.549 --> 00:11:47.382
Could you clarify the difference
between keypf and typeof.

164
00:11:47.382 --> 00:11:49.963
&gt;&gt; Yep, happy to go through that again.

165
00:11:49.963 --> 00:11:56.206
Keyof I'm gonna add another example here.

166
00:12:04.689 --> 00:12:11.262
All right, so we've got a contact here.

167
00:12:11.262 --> 00:12:17.099
And if we wanted to get the names,
a type representing all

168
00:12:17.099 --> 00:12:23.553
valid names of properties, Like this.

169
00:12:27.458 --> 00:12:32.349
I want this type, but
I don't want to explicitly define it.

170
00:12:32.349 --> 00:12:35.520
I want to get it derived
somehow from this object.

171
00:12:35.520 --> 00:12:39.533
I would have some problems
because effectively,

172
00:12:39.533 --> 00:12:42.810
I kinda want like object.keys.

173
00:12:42.810 --> 00:12:45.000
But I have a value here.

174
00:12:45.000 --> 00:12:51.444
I can't really, we'll call this Try1.

175
00:12:51.444 --> 00:12:54.230
I can't do this, I can't, I can't do this.

176
00:12:57.890 --> 00:13:02.994
Contact refers to a value, but
it's being used as a type here.

177
00:13:02.994 --> 00:13:07.742
This is a value, so,
let's replace this with typeof.

178
00:13:10.540 --> 00:13:13.436
Well now, I get a type.

179
00:13:13.436 --> 00:13:15.710
I get the type of this value.

180
00:13:16.770 --> 00:13:21.570
I've taken a value, and
I've obtained a type from it.

181
00:13:21.570 --> 00:13:23.230
Now if I wanted to put them together.

182
00:13:26.378 --> 00:13:29.960
Look at that, name and email.

183
00:13:29.960 --> 00:13:31.029
So keyof.

184
00:13:37.845 --> 00:13:47.100
It's Object.keys() for types And
typeof is get me the type of this value.

