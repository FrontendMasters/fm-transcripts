WEBVTT

1
00:00:00.150 --> 00:00:05.310
While we're talking about callables,
let's talk about void.

2
00:00:05.310 --> 00:00:09.740
So if we look at this function,
look at its return type, its void.

3
00:00:10.890 --> 00:00:15.950
If you've gotten really deep into
Javascript, you may know that

4
00:00:15.950 --> 00:00:23.344
there is a void keyword
in Javascript It means,

5
00:00:23.344 --> 00:00:27.270
in this context, ignore it.

6
00:00:27.270 --> 00:00:31.790
It literally means do not consume
the return value of this function.

7
00:00:33.990 --> 00:00:40.187
It is not what we would call a unit
type as null and undefined are for

8
00:00:40.187 --> 00:00:45.075
one reason, Don't do this.

9
00:00:48.225 --> 00:00:49.911
So you could do this.

10
00:00:52.460 --> 00:00:54.158
Technically correct.

11
00:00:55.730 --> 00:00:57.240
So it accepts a void.

12
00:00:59.540 --> 00:01:01.150
It also accepts an undefined.

13
00:01:01.150 --> 00:01:05.960
Can anyone think of why would it be
important that void accepts an undefined?

14
00:01:05.960 --> 00:01:09.660
&gt;&gt; That would functions actually
return when there's no return.

15
00:01:09.660 --> 00:01:11.050
&gt;&gt; That is exactly right.

16
00:01:11.050 --> 00:01:14.190
It's what functions return
when there is no return.

17
00:01:14.190 --> 00:01:22.400
So a void can be,
the type void is itself and undefined.

18
00:01:22.400 --> 00:01:25.088
There are exactly two things
that are allowed in there.

19
00:01:27.050 --> 00:01:31.735
Whereas null, or
if we were to do undefined here, or

20
00:01:31.735 --> 00:01:36.959
if we were to do, yeah, null,
undefined is not gonna do.

21
00:01:39.889 --> 00:01:46.628
This is not gonna do Only
this will do we would call

22
00:01:46.628 --> 00:01:53.010
that a unit type like those literal types
right it's a set with one thing in it so.

23
00:01:54.700 --> 00:01:58.207
Let's look at these two examples here

24
00:01:58.207 --> 00:02:03.640
as an illustration of why
it's useful to have void.

25
00:02:03.640 --> 00:02:09.490
This kind of demonstrates
the importance of void's existence.

26
00:02:09.490 --> 00:02:10.640
So we've got two functions here.

27
00:02:10.640 --> 00:02:13.360
We've got InvokeInFourSeconds and
InvokeInFiveSeconds.

28
00:02:13.360 --> 00:02:14.150
They're very similar.

29
00:02:14.150 --> 00:02:17.360
This is the only change between them,
so don't stare at them too closely.

30
00:02:17.360 --> 00:02:20.470
We're going to create an array of values.

31
00:02:20.470 --> 00:02:23.250
And here we're going to say
invoke in four seconds.

32
00:02:23.250 --> 00:02:28.890
And then we're going to have pass
in an arrow function values.push 4.

33
00:02:30.230 --> 00:02:34.979
If we do the same exact thing for
invoking five seconds,

34
00:02:34.979 --> 00:02:40.200
it type checks And here's why.

35
00:02:41.770 --> 00:02:45.510
Most people don't think about this
too much, but push returns a number.

36
00:02:46.850 --> 00:02:48.740
It actually returns a number.

37
00:02:48.740 --> 00:02:55.480
And so what we'd be saying here is,
I'm actually returning something.

38
00:02:55.480 --> 00:02:59.370
And it's not undefined.

39
00:02:59.370 --> 00:03:04.600
It is not the specific value undefined,
like as if I was doing this.

40
00:03:08.680 --> 00:03:11.140
I am not returning an undefined.

41
00:03:11.140 --> 00:03:16.290
I am returning a number.

42
00:03:16.290 --> 00:03:21.020
Here I'm also returning a number,
but you know what we're saying.

43
00:03:21.020 --> 00:03:22.420
Don't worry about it.

44
00:03:22.420 --> 00:03:24.760
I don't care what the return is.

45
00:03:24.760 --> 00:03:27.900
That's where you would use
a void in place of an undefined.

46
00:03:29.940 --> 00:03:33.720
Do not create variables of type void.

47
00:03:33.720 --> 00:03:38.734
It really only has meaning in the context
of the return value of a function,

48
00:03:38.734 --> 00:03:41.130
but it does have a purpose here.

49
00:03:41.130 --> 00:03:45.143
I mean, you could also do this,
but then of course,

50
00:03:45.143 --> 00:03:51.439
like within this function you could start
to consume the value of this callback and

51
00:03:51.439 --> 00:03:55.470
types your would be perfectly
happy to let you do so.

52
00:03:56.530 --> 00:03:59.386
When it's void,
you won't get anywhere trying that,

53
00:03:59.386 --> 00:04:01.040
which is what you want, right?

54
00:04:01.040 --> 00:04:02.869
You want a helpful constraint there.

55
00:04:05.285 --> 00:04:08.690
Yep, LJ, you're right,
push returns the length of the array.

56
00:04:08.690 --> 00:04:11.670
Is it after the push?

57
00:04:11.670 --> 00:04:12.850
Returns the new length, yep.

58
00:04:15.110 --> 00:04:19.537
Last question in the chat, so we use void
when we don't care about the return value

59
00:04:19.537 --> 00:04:22.970
irrespective of a value being returned or
not, correct.

60
00:04:22.970 --> 00:04:23.830
That's correct.

61
00:04:23.830 --> 00:04:26.340
Void means ignore my return value.

62
00:04:26.340 --> 00:04:31.608
And one caveat here, if you do this

63
00:04:36.479 --> 00:04:41.948
You'll be busted on this so
on the one hand we've we have a callback

64
00:04:41.948 --> 00:04:46.929
here I put this back this is saying
I accept a function with any

65
00:04:46.929 --> 00:04:51.714
return type and
please ignore it up here, we're saying,

66
00:04:51.714 --> 00:04:57.500
I'm a function that should not return,
or I think I can still do this.

67
00:04:59.760 --> 00:05:00.460
Can I do this?

68
00:05:02.060 --> 00:05:03.650
Yeah, I can do that too.

69
00:05:03.650 --> 00:05:08.000
But like literally anything else,
I will be stopped from doing.

70
00:05:09.220 --> 00:05:12.358
So it's sorta a has a similar meaning but

71
00:05:12.358 --> 00:05:17.528
slightly different depending on
what you're using where you're

72
00:05:17.528 --> 00:05:22.513
defining the return type if it
is a function declaration,right

73
00:05:22.513 --> 00:05:27.890
remember this is a value to value of
type function with a return type.

74
00:05:27.890 --> 00:05:33.026
So when it's used as the return
type of a function declaration

75
00:05:33.026 --> 00:05:39.270
it means I should follow through on
a commitment to return nothing useful.

76
00:05:40.910 --> 00:05:43.460
At best, I return undefined.

77
00:05:43.460 --> 00:05:45.940
Either I'll create
an undefined which is weird.

78
00:05:45.940 --> 00:05:47.347
Or I'll just write return or

79
00:05:47.347 --> 00:05:51.110
I won't have anything at all
like this function right now.

80
00:05:51.110 --> 00:05:53.400
Like it's just pure side effects.

81
00:05:53.400 --> 00:05:55.975
And it returns when you reach
the end of the function.

82
00:05:55.975 --> 00:06:01.169
Here, it's perfectly willing
to accept a return value,

83
00:06:01.169 --> 00:06:07.423
but it makes sure that within
the function that this callback is used,

84
00:06:07.423 --> 00:06:11.990
you're not doing anything
with the return value.

85
00:06:11.990 --> 00:06:16.862
A little bit of nuance there but
they kind of both mean I

86
00:06:16.862 --> 00:06:21.088
shouldn't return anything interesting, or

87
00:06:21.088 --> 00:06:26.528
whatever I'm returning is
not interesting that's void.

