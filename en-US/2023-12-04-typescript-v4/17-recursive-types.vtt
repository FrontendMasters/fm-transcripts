WEBVTT

1
00:00:00.019 --> 00:00:04.771
Let's talk for a moment about recursive
types which you'll need in order to

2
00:00:04.771 --> 00:00:07.828
attempt the exercise
that we're leading into.

3
00:00:07.828 --> 00:00:14.197
So let's imagine we wanted to type,
values like this, right?

4
00:00:14.197 --> 00:00:18.006
It's an array of numbers nested.

5
00:00:18.006 --> 00:00:22.137
You can nest numbered arrays
inside other numbered arrays.

6
00:00:22.137 --> 00:00:24.836
You can't put a string here,

7
00:00:27.514 --> 00:00:32.778
Because it's not number, but
you can go as deep as you want.

8
00:00:32.778 --> 00:00:37.628
So we would need a recursive
type in order to describe this,

9
00:00:37.628 --> 00:00:41.510
and this is an example of
a recursive type here.

10
00:00:41.510 --> 00:00:44.893
So we're saying nested numbers,

11
00:00:44.893 --> 00:00:49.336
can be a number or
an array of nested numbers.

12
00:00:49.336 --> 00:00:55.098
As we're evaluating this type, we're
first looking at the right hand side,

13
00:00:55.098 --> 00:00:59.899
just like a JavaScript expression,
where if you say x equals 5 or

14
00:00:59.899 --> 00:01:03.333
x equals the result of this function,
right?

15
00:01:03.333 --> 00:01:07.966
Well, first we're gonna run the function
and then we're gonna get the return value.

16
00:01:07.966 --> 00:01:11.306
And then finally,
we're gonna assign it to the variable.

17
00:01:11.306 --> 00:01:14.658
Type aliases are processed
in much the same way,

18
00:01:14.658 --> 00:01:19.257
where we're gonna look at the right
hand side of the equals first.

19
00:01:19.257 --> 00:01:22.180
And so what's happening here
is we're saying, all right,

20
00:01:22.180 --> 00:01:23.625
it's allowed to be a number.

21
00:01:23.625 --> 00:01:28.035
It's allowed to be this type, which I
know we're in the process of defining.

22
00:01:28.035 --> 00:01:32.136
So I'm going to put a pin in that,
all right, now I'm gonna say,

23
00:01:32.136 --> 00:01:36.028
this is typed nested numbers and
it sort of all fits together.

24
00:01:36.028 --> 00:01:39.163
It's almost like you can just
reference the type itself here.

25
00:01:39.163 --> 00:01:42.835
So this lets you say, numbers or

26
00:01:42.835 --> 00:01:47.330
arrays of numbers infinitely nested.

27
00:01:47.330 --> 00:01:52.608
This is an example of a recursive type,
It's a little mind-bending.

28
00:01:52.608 --> 00:01:58.030
This is a simple example, but
a little bit of an abstract one,

29
00:01:58.030 --> 00:02:03.161
but we're gonna need it in
order to define types for JSON.

30
00:02:03.161 --> 00:02:07.938
So here,
let's prove to ourselves that this works.

31
00:02:07.938 --> 00:02:09.168
We can push 41,

32
00:02:09.168 --> 00:02:14.180
you can push an array containing
the number 41 as many times as we want.

33
00:02:19.754 --> 00:02:21.986
But we cannot push the string.

34
00:02:21.986 --> 00:02:23.730
I wonder if we could push an empty array.

35
00:02:23.730 --> 00:02:26.783
I think so,
it'll infer that it's a number array.

36
00:02:26.783 --> 00:02:30.914
It'll try to make it work,
yep, that's fine.

37
00:02:30.914 --> 00:02:35.774
It's like those are empty,
I can see how they could be numbers,

38
00:02:35.774 --> 00:02:38.752
I'll treat them as arrays of numbers.

39
00:02:38.752 --> 00:02:44.435
It's trying to bend things in
order to make it all happen.

40
00:02:44.435 --> 00:02:45.815
That's a recursive type.

41
00:02:45.815 --> 00:02:48.917
If you look online or if you Google this,

42
00:02:48.917 --> 00:02:54.668
you may come across outdated information
that says you must use a technique

43
00:02:54.668 --> 00:02:59.698
involving interfaces and
type aliases to make recursive types.

44
00:02:59.698 --> 00:03:04.577
Used to be the case that you had to use
both, have one feed into the other.

45
00:03:04.577 --> 00:03:07.790
You don't have to do that anymore,
just type aliases will do.

