WEBVTT

1
00:00:00.000 --> 00:00:06.017
So the first thing we're gonna do is
a Hello World TypeScript program.

2
00:00:06.017 --> 00:00:09.025
We're gonna learn how
the TypeScript CLI works.

3
00:00:09.025 --> 00:00:10.805
There's a small project ready for

4
00:00:10.805 --> 00:00:14.005
us to get started with right in
this repo that you checked out.

5
00:00:14.005 --> 00:00:19.476
And we will get hands on here, we'll look
at the output of a TypeScript program,

6
00:00:19.476 --> 00:00:23.586
we'll see the readable JavaScript
that I promised exists.

7
00:00:23.586 --> 00:00:27.864
And we will see how the compile
process results in that

8
00:00:27.864 --> 00:00:31.572
readable JavaScript and
a declaration file,

9
00:00:31.572 --> 00:00:37.098
which represents the types that
sort of match onto that JavaScript.

10
00:00:37.098 --> 00:00:44.394
You can think of it like the shadow of an
object where they have to be in sync and

11
00:00:44.394 --> 00:00:48.276
together, it's almost like a TS file.

12
00:00:48.276 --> 00:00:52.237
But when you compile it, the types are
separated from the runnable JavaScript.

13
00:00:52.237 --> 00:00:56.497
And that's your declaration file and
the program that's actually run,

14
00:00:56.497 --> 00:00:58.773
we'll look at how that process works.

15
00:00:58.773 --> 00:01:03.976
So you can get to this project
in the repo that we just

16
00:01:03.976 --> 00:01:09.544
checked out by going to
packages/welcome-to-ts.

17
00:01:12.058 --> 00:01:16.765
And if we navigate to that here,
there are a bunch of packages here which

18
00:01:16.765 --> 00:01:21.243
we'll get into a couple others in
this course and in later courses.

19
00:01:21.243 --> 00:01:25.446
But welcome-to-ts within the packages
folder, that's what we're looking for.

20
00:01:25.446 --> 00:01:28.664
We're gonna spend a little
bit of time here for now.

21
00:01:28.664 --> 00:01:31.059
So I want you to look at
the folder structure here,

22
00:01:31.059 --> 00:01:33.978
we've got a couple different
things that are interesting.

23
00:01:33.978 --> 00:01:35.312
Ignore this dist folder for

24
00:01:35.312 --> 00:01:38.329
now, the fact that it's grayed
out means it's get ignored.

25
00:01:38.329 --> 00:01:41.629
So this is not something
that's checked in.

26
00:01:41.629 --> 00:01:44.334
We've got a couple different files here,
three.

27
00:01:44.334 --> 00:01:46.405
We've got our package.json,

28
00:01:46.405 --> 00:01:50.939
which you should be familiar with
if you've used JavaScript before.

29
00:01:50.939 --> 00:01:54.229
This is the package
manifest of your program.

30
00:01:54.229 --> 00:01:58.400
You can see we have a dev dependency here,
which is TypeScript 5.3.

31
00:01:58.400 --> 00:02:03.961
It is a beta right now, but I expect
the release is gonna be cut any day now.

32
00:02:03.961 --> 00:02:08.959
We've got a couple scripts we can run,
which we'll look into later, and

33
00:02:08.959 --> 00:02:12.680
then here's the volta stuff
we talked about earlier.

34
00:02:12.680 --> 00:02:17.548
And then we've got something called

35
00:02:17.548 --> 00:02:21.479
a tsconfig and an index.ts.

36
00:02:21.479 --> 00:02:25.279
So let's look at this tsconfig.

37
00:02:25.279 --> 00:02:31.379
So we're telling the TypeScript compiler
a couple things here in this config file.

38
00:02:31.379 --> 00:02:34.949
We're saying, where do we want the output?

39
00:02:34.949 --> 00:02:40.919
What language level do we want as output?

40
00:02:40.919 --> 00:02:44.658
So this would be ES 2015 language level.

41
00:02:44.658 --> 00:02:49.969
This includes the promise constructor,
classes, right?

42
00:02:49.969 --> 00:02:53.069
Before ES 2015, we didn't have classes.

43
00:02:53.069 --> 00:02:57.919
We'll mess with this, and we'll see what
happens as we change the language level.

44
00:02:57.919 --> 00:03:01.872
Module resolution node, you don't have
to worry about too much here, but

45
00:03:01.872 --> 00:03:06.157
just think of this as the conventional
setting where things are in node modules.

46
00:03:06.157 --> 00:03:11.084
And it's the module module resolution
you would expect if you weren't using

47
00:03:11.084 --> 00:03:12.002
TypeScript.

48
00:03:12.002 --> 00:03:16.939
And then here include, this is
where we say what are we compiling,

49
00:03:16.939 --> 00:03:18.889
where is the source code?

50
00:03:18.889 --> 00:03:23.569
We're saying, everything in the source
folder, compile everything in there.

51
00:03:23.569 --> 00:03:28.329
Let's take a look at this index.ts file.

52
00:03:28.329 --> 00:03:32.530
So this is a very relatively
simple TypeScript program.

53
00:03:32.530 --> 00:03:36.744
I have chosen a couple features
here that will illustrate

54
00:03:36.744 --> 00:03:40.273
the difference between
language levels here.

55
00:03:40.273 --> 00:03:45.089
So there are a couple things in
here that only work in ES 2015.

56
00:03:45.089 --> 00:03:50.946
There's async await,
which only landed in ES 2017,

57
00:03:50.946 --> 00:03:55.846
and then I've thrown in
a static private field,

58
00:03:55.846 --> 00:03:59.203
which only works in ES 2022.

59
00:03:59.203 --> 00:04:05.649
So what we hope to see here is that all
of this kind of blows down to ES 2015.

60
00:04:05.649 --> 00:04:09.024
There's a way that it can do that.

61
00:04:09.024 --> 00:04:11.259
But let's look at what this program does.

62
00:04:11.259 --> 00:04:16.281
So up here, if we ignore
the types aspect of things here,

63
00:04:16.281 --> 00:04:22.679
we take in an argument n, and
we resolve a promise after n milliseconds.

64
00:04:22.679 --> 00:04:24.388
That's effectively what this means.

65
00:04:26.789 --> 00:04:29.055
Here, oops, I spotted a typo.

66
00:04:29.055 --> 00:04:31.214
We're adding two numbers,
not three numbers.

67
00:04:31.214 --> 00:04:36.379
We're adding a and
b after waiting half a second.

68
00:04:37.799 --> 00:04:41.997
And then we have a class here that
has a private static field and

69
00:04:41.997 --> 00:04:43.545
a getValue function.

70
00:04:43.545 --> 00:04:51.949
This kind of exists mostly to throw in
a very modern JavaScript language feature.

71
00:04:51.949 --> 00:04:56.449
Down here we're saying, okay,
I want to add the numbers,

72
00:04:56.449 --> 00:05:01.131
I wanna get this number 3,
right, which will come out here.

73
00:05:01.131 --> 00:05:05.371
So we're adding 3 and 4 here and
we're waiting for that result to come in,

74
00:05:05.371 --> 00:05:07.839
which will happen after
this half a second.

75
00:05:07.839 --> 00:05:12.049
And once that wait is done,
we're gonna console.log the result.

76
00:05:12.049 --> 00:05:16.579
All right, here's our dist folder,
we've got an index.js file.

77
00:05:16.579 --> 00:05:20.079
Now if we look at this,
there's a lot going on here.

78
00:05:20.079 --> 00:05:24.240
So we've got something up here
that looks like an awaiter.

79
00:05:24.240 --> 00:05:28.844
We've got something here that's
called classPrivateFieldGet.

80
00:05:28.844 --> 00:05:32.295
And now it's sort of starting to
look like our original code, but

81
00:05:32.295 --> 00:05:34.882
with some of the type
information stripped out.

82
00:05:37.564 --> 00:05:43.529
So now we're here,
we looked at this output, right?

83
00:05:43.529 --> 00:05:48.655
It's a bunch of junk up here,
junk like, we didn't write this.

84
00:05:48.655 --> 00:05:50.258
We don't understand it.

85
00:05:50.258 --> 00:05:51.872
We can run this code.

86
00:05:54.863 --> 00:05:57.064
Just pass it straight to node, oops.

87
00:05:57.064 --> 00:06:02.266
Unexpected token 'export',
mm-hmm, that's interesting.

88
00:06:02.266 --> 00:06:05.488
Well, we can't run it like this,
right, with this export here.

89
00:06:05.488 --> 00:06:10.590
We'd have to make this a CJS module for
node to just take it as is.

90
00:06:10.590 --> 00:06:11.999
Well, we have two options.

91
00:06:11.999 --> 00:06:17.439
We can make this an MJS file,
if you're familiar with what those are.

92
00:06:17.439 --> 00:06:18.877
But let's make it a CJS file.

93
00:06:18.877 --> 00:06:23.193
MJS is these native JavaScript
modules with this export keyword.

94
00:06:23.193 --> 00:06:27.159
But let's make it the classic thing
that node has been able to run for ages.

95
00:06:27.159 --> 00:06:30.734
So we could go into our tsconfig and

96
00:06:30.734 --> 00:06:35.429
we could say, "module": "commonjs".

97
00:06:35.429 --> 00:06:39.089
And we can run this again, you have to
build it again and then run it again.

98
00:06:44.759 --> 00:06:46.229
So there's the build.

99
00:06:48.909 --> 00:06:53.353
And here, I just tried to run it,
and there's our number 7.

100
00:06:53.353 --> 00:06:57.539
So what we've seen here,
if we look at this dist folder,

101
00:06:57.539 --> 00:07:01.490
look at that,
exports.addNumbers = addNumbers.

102
00:07:01.490 --> 00:07:06.451
So this, we can see TypeScript is able to
generate a variety of different module

103
00:07:06.451 --> 00:07:08.904
formats for us, CJS being one of them.

104
00:07:12.829 --> 00:07:15.970
Let's play with that
tsconfig a little bit more.

105
00:07:15.970 --> 00:07:20.463
I'm gonna just pull it off to the side
here so we can see it at the same time,

106
00:07:20.463 --> 00:07:24.180
and we can get rid of,
I'll just pull this down a little bit.

107
00:07:24.180 --> 00:07:26.449
So let's change our language level.

108
00:07:26.449 --> 00:07:29.159
Let's bump this up to ES 2017.

109
00:07:31.718 --> 00:07:34.998
Let's build it again and
then we'll run it.

110
00:07:34.998 --> 00:07:39.969
And what we expect to see,
some of this junk will disappear.

111
00:07:39.969 --> 00:07:45.246
And it did, that awaiter thing
up at the top disappeared,

112
00:07:45.246 --> 00:07:50.969
and an await keyword has started
to become present in our code.

113
00:07:50.969 --> 00:07:52.723
So now we're seeing, all right,

114
00:07:52.723 --> 00:07:55.820
we're targeting a more modern
JavaScript language level.

115
00:07:55.820 --> 00:08:00.306
Now there's still this
classPrivateFieldGet thing because that's

116
00:08:00.306 --> 00:08:02.289
not supported in ES 2017.

117
00:08:02.289 --> 00:08:04.054
This is kind of a polyfill.

118
00:08:04.054 --> 00:08:10.449
It's a way to backport the behavior where
we would see, here's the class, right?

119
00:08:10.449 --> 00:08:14.359
We can have a static field,
we just can't have a private static field.

120
00:08:14.359 --> 00:08:20.309
And you could see what's happening
is it's generating this _Foo_bar.

121
00:08:20.309 --> 00:08:22.664
That's to sort of make up for this,

122
00:08:22.664 --> 00:08:27.779
it's trying to pick a secret property
that nobody will guess accidentally.

123
00:08:27.779 --> 00:08:32.361
And it's putting the value of 3 in
there and then somewhere up here,

124
00:08:32.361 --> 00:08:35.919
it's probably getting
the value out of that object.

125
00:08:35.919 --> 00:08:41.959
It's sort of a compatibility layer,
right, for ES 2017.

126
00:08:41.959 --> 00:08:48.559
What if we bump this up to ES 2022,
built and run it again?

127
00:08:48.559 --> 00:08:50.786
Sorry, I didn't run that last version, but

128
00:08:50.786 --> 00:08:52.964
trust me that it would
output the number 7.

129
00:08:52.964 --> 00:08:56.291
We'll run this one, there's 7.

130
00:08:56.291 --> 00:09:01.141
And now look, we've lost almost
all of the stuff that was

131
00:09:01.141 --> 00:09:04.284
up at the top of our output file here.

132
00:09:04.284 --> 00:09:09.420
And if we look down, here is a static
field, a private static field,

133
00:09:09.420 --> 00:09:12.800
which is natively supported in ES 2022.

134
00:09:12.800 --> 00:09:17.216
Node is happy to run this,
Node 18, and you can see that

135
00:09:17.216 --> 00:09:22.464
TypeScript is able to sort of
down-level our code to some degree and

136
00:09:22.464 --> 00:09:26.331
allow us to use very modern
JavaScript features,

137
00:09:26.331 --> 00:09:30.039
even if we have to run in
maybe an older browser.

138
00:09:30.039 --> 00:09:34.873
It's less of a concern now, cuz we're sort
of past the Internet Explorer days and

139
00:09:34.873 --> 00:09:38.319
we can rely on browsers
supporting pretty modern things.

140
00:09:38.319 --> 00:09:42.092
But this is an example of
TypeScript acting kind of Babel,

141
00:09:42.092 --> 00:09:46.943
if you've used that before, which is
a way you can sort of adopt very modern

142
00:09:46.943 --> 00:09:51.640
language features even if your target
runtime doesn't support it yet.

143
00:09:51.640 --> 00:09:54.119
So that's one of the things
TypeScript is doing for us.

144
00:09:54.119 --> 00:09:57.139
It's also removing all of
that type information.

145
00:09:57.139 --> 00:10:02.091
So let's go back to our tsconfig and

146
00:10:02.091 --> 00:10:07.710
add an option here called declaration.

147
00:10:07.710 --> 00:10:10.369
And we'll set that to True.

148
00:10:10.369 --> 00:10:15.883
And we can run TSC again,
and let's run it.

149
00:10:15.883 --> 00:10:19.083
Program still works,
a new file has appeared though.

150
00:10:19.083 --> 00:10:23.073
I'm gonna get rid of our TSC for
now or put it back here.

151
00:10:23.073 --> 00:10:24.477
Let's look at this.

152
00:10:24.477 --> 00:10:29.304
So remember I told you there's this
thing called a declaration file and

153
00:10:29.304 --> 00:10:34.051
I described this as sort of the shadow
of the resultant JavaScript code

154
00:10:34.051 --> 00:10:35.831
that TypeScript admits.

155
00:10:35.831 --> 00:10:37.162
These are the types.

156
00:10:37.162 --> 00:10:42.009
So if we looked at this, sorry,
this is our source code.

157
00:10:42.009 --> 00:10:45.355
We've got addNumbers, number and number.

158
00:10:45.355 --> 00:10:51.239
Our JavaScript file just has addNumbers(a,
b), missing the type information.

159
00:10:51.239 --> 00:10:54.210
But here is the type information.

160
00:10:54.210 --> 00:10:57.098
It's not really a function
cuz it doesn't have a body.

161
00:10:57.098 --> 00:11:02.785
We would call this a function type
declaration, something like that,

162
00:11:02.785 --> 00:11:07.064
but it's meant to match
the output JavaScript code.

163
00:11:07.064 --> 00:11:08.149
Why do we do this?

164
00:11:08.149 --> 00:11:13.138
Well first, we want people who
just run regular JavaScript

165
00:11:13.138 --> 00:11:15.647
to be able to run our program.

166
00:11:15.647 --> 00:11:18.229
So we need to have
JavaScript as an output.

167
00:11:18.229 --> 00:11:23.789
We also want developers who use
TypeScript to benefit from our types.

168
00:11:23.789 --> 00:11:28.794
And so we want to include the type
information along with the JavaScript so

169
00:11:28.794 --> 00:11:33.974
that you almost put these two files
together and you're back to index.ts.

170
00:11:33.974 --> 00:11:35.491
You're back to typed code,

171
00:11:35.491 --> 00:11:38.852
because you kind of layer these
two things on top of each other.

172
00:11:38.852 --> 00:11:42.305
You have the code that runs and
the types that describe it.

