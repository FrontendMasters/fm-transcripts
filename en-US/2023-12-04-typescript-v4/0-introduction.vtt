WEBVTT

1
00:00:00.430 --> 00:00:05.710
So, welcome to TypeScript Fundamentals,
my name is Mike North.

2
00:00:05.710 --> 00:00:09.181
I've been a Frontend Master's
instructor for about eight or

3
00:00:09.181 --> 00:00:11.718
nine years now depending
on whether you count

4
00:00:11.718 --> 00:00:14.670
when we recorded the course
versus when it came out.

5
00:00:15.820 --> 00:00:19.292
So, I've been working with
Frontend Masters for a while,

6
00:00:19.292 --> 00:00:23.737
I'm a principal staff engineer at Stripe,
and I'm also their tech lead for

7
00:00:23.737 --> 00:00:27.150
their external facing
developer platform org.

8
00:00:27.150 --> 00:00:31.840
So this is the part of the company that
makes Stripe node, the Node.js SDK,

9
00:00:31.840 --> 00:00:34.710
which is written in TypeScript.

10
00:00:34.710 --> 00:00:38.934
If you go to stripe.sh,
you can see a little in-browser CLI,

11
00:00:38.934 --> 00:00:40.460
which is pretty cool.

12
00:00:40.460 --> 00:00:46.350
So that's made by some of
the teams that I support.

13
00:00:46.350 --> 00:00:51.015
And Stripe Workbench, which is kind of
like Chrome DevTools but for Stripe,

14
00:00:51.015 --> 00:00:53.620
it's another big, TypeScript project.

15
00:00:54.630 --> 00:00:58.902
In addition to this,
I am one of a few engineers that works

16
00:00:58.902 --> 00:01:03.263
very closely with teams at
Stripe to shape the public API,

17
00:01:03.263 --> 00:01:08.520
that anyone building a payments
integration on top of Stripe, uses.

18
00:01:09.530 --> 00:01:13.088
We use Typescript to discuss
the API semantics and

19
00:01:13.088 --> 00:01:16.900
the shapes of requests and
responses that we get, and

20
00:01:16.900 --> 00:01:22.257
this powers nearly a trillion dollars
worth of payment volume every year.

21
00:01:22.257 --> 00:01:27.785
So it's a very high stakes API where
getting the shapes of things right and

22
00:01:27.785 --> 00:01:31.903
making it easy to build on
Stripe is really important.

23
00:01:31.903 --> 00:01:34.052
And knowing how to work with types and

24
00:01:34.052 --> 00:01:38.086
how to model different things with
types is of critical importance.

25
00:01:38.086 --> 00:01:42.990
So that's kind of where TypeScript DNA

26
00:01:42.990 --> 00:01:47.157
is helping me in my career there.

27
00:01:47.157 --> 00:01:52.124
The number one goal I have for this course
is that by the end of our time together,

28
00:01:52.124 --> 00:01:55.705
you should have a mental model for
how TypeScript works.

29
00:01:55.705 --> 00:01:59.524
Of course we're gonna discuss a bunch
of different language features, and

30
00:01:59.524 --> 00:02:03.390
how to work with variables and
arrays and objects, things like that.

31
00:02:03.390 --> 00:02:06.975
But the most important thing I
wanna to leave you with is how to

32
00:02:06.975 --> 00:02:08.560
think about types.

33
00:02:08.560 --> 00:02:12.525
And this is what will let you not only
understand the latest TypeScript release,

34
00:02:12.525 --> 00:02:15.160
but all of the releases that
follow after it, right?

35
00:02:15.160 --> 00:02:19.699
I want you to have an intuition for
how these kinds of things work.

36
00:02:20.870 --> 00:02:25.851
Which is better than just mastering
a particular feature of the language, and

37
00:02:25.851 --> 00:02:28.350
I think we'll be able to do that today.

38
00:02:30.400 --> 00:02:33.464
So for
those of you who are new to TypeScript,

39
00:02:33.464 --> 00:02:36.458
let me explain a little
bit about what it is.

40
00:02:36.458 --> 00:02:41.456
It's an open source project that
is maintained by Microsoft, and

41
00:02:41.456 --> 00:02:45.394
it represents a syntactic
superset of JavaScript.

42
00:02:45.394 --> 00:02:49.070
And what that means is,
where JavaScript's syntax ends,

43
00:02:49.070 --> 00:02:52.754
you could think of that as sort
of where TypeScript begins.

44
00:02:52.754 --> 00:02:58.130
This is not to say, all JavaScript
programs are valid TypeScript programs.

45
00:02:58.130 --> 00:03:03.272
It's not a superset in that sense, but
all of the JavaScript syntax you know and

46
00:03:03.272 --> 00:03:07.590
use every day, that is gonna work
as part of a TypeScript program.

47
00:03:09.050 --> 00:03:12.787
There are three parts to TypeScript,
there's the language itself,

48
00:03:12.787 --> 00:03:16.412
the programming language,
the compiler, and a language server.

49
00:03:16.412 --> 00:03:20.376
The compiler is what turns TypeScript
code into clean JavaScript.

50
00:03:20.376 --> 00:03:23.544
It's very readable,
you can look at the build output and

51
00:03:23.544 --> 00:03:27.030
we'll be able to make
sense of it quite easily.

52
00:03:27.030 --> 00:03:32.361
The language server if you've used
something like Visual Studio Code, or

53
00:03:32.361 --> 00:03:38.029
WebStorm, other IDEs, it's the kind of
software component that powers those

54
00:03:38.029 --> 00:03:43.870
nice little type heads and helps validate
code right as you're authoring it.

55
00:03:43.870 --> 00:03:48.370
And so
that's what the language server does.

56
00:03:48.370 --> 00:03:52.828
You can think of TypeScript
a little bit like a fancy linter.

57
00:03:52.828 --> 00:03:57.686
The reason I encourage you
to use this mental model is,

58
00:03:57.686 --> 00:04:02.236
TypeScript only does things for
you at build time.

59
00:04:02.236 --> 00:04:06.938
It helps ensure that your code is correct,
but it kind of compiles away the thing

60
00:04:06.938 --> 00:04:10.319
that's actually running in a browser,
or in Node.js.

61
00:04:10.319 --> 00:04:16.090
That's just regular JavaScript, and that's
part of the goal of this project, right?

62
00:04:16.090 --> 00:04:20.889
You should be able to use this to build
JavaScript code that can run anywhere

63
00:04:20.889 --> 00:04:25.936
like on unembedded devices or in a
browser, wherever you can run JavaScript.

64
00:04:25.936 --> 00:04:29.983
This is not quite the same as using
something like Java, or C sharp or

65
00:04:29.983 --> 00:04:33.390
other languages that have
at runtime type validation.

66
00:04:33.390 --> 00:04:38.140
There's some cost associated with that
as well to validate types at runtime.

67
00:04:38.140 --> 00:04:41.623
So, think of it like something that helps
you as you're building your project, and

68
00:04:41.623 --> 00:04:45.410
then it sort of melts away, and
you're left with regular JavaScript.

69
00:04:45.410 --> 00:04:50.305
TypeScript is very very popular, so
I have here a little graph comparing

70
00:04:50.305 --> 00:04:55.281
React to TypeScript and you can see
that even something as popular as React

71
00:04:55.281 --> 00:04:59.710
is not even close to the growth
curve of TypeScript downloads.

72
00:04:59.710 --> 00:05:04.620
It is starting to become
almost a ubiquitous part of

73
00:05:04.620 --> 00:05:09.531
a modern frontend stack,
there's sort of varying

74
00:05:09.531 --> 00:05:13.867
degrees of typing that you can use for
it, but

75
00:05:13.867 --> 00:05:18.571
it is definitely a dominant
option in the space.

76
00:05:18.571 --> 00:05:20.088
So why are types a big deal?

77
00:05:20.088 --> 00:05:22.087
Why is TypeScript so popular?

78
00:05:22.087 --> 00:05:26.688
Well, first, it lets you leave
more of your intent on the page,

79
00:05:26.688 --> 00:05:29.350
as the author of a piece of code.

80
00:05:29.350 --> 00:05:33.603
So if we look at this function here where
we're adding two numbers together, or

81
00:05:33.603 --> 00:05:36.060
possibly concatenating two strings.

82
00:05:36.060 --> 00:05:40.960
It's not very clear what the author of
this function intended to be done here.

83
00:05:40.960 --> 00:05:44.915
I mean, we could look into the word add,
and try to infer,

84
00:05:44.915 --> 00:05:50.410
this is addition, but you could pass
a string in for A and B and it would work.

85
00:05:50.410 --> 00:05:54.379
And imagine that you did that and
then somebody comes along and

86
00:05:54.379 --> 00:05:57.440
says, all right,
I need a third operand here.

87
00:05:58.740 --> 00:06:02.032
It's optional,
I wanna to be able to add C to A and B.

88
00:06:02.032 --> 00:06:05.695
And they default that to 0, well,
now whoever was using this for

89
00:06:05.695 --> 00:06:10.492
string concatenation, they're gonna end up
with the character 0 at the end of their

90
00:06:10.492 --> 00:06:12.590
string, it doesn't quite work.

91
00:06:12.590 --> 00:06:18.302
We're missing some intent here,
we don't know what the author meant to do.

92
00:06:18.302 --> 00:06:23.130
This is a preview of what typing
a function like this looks like, but

93
00:06:23.130 --> 00:06:27.365
you can see here very clearly,
we're saying a is a number,

94
00:06:27.365 --> 00:06:30.858
b is a number, and
this means we return a number.

95
00:06:30.858 --> 00:06:34.300
And this is a real TypeScript
error that's popping up here,

96
00:06:34.300 --> 00:06:38.967
saying an argument of type string is not
assignable to a parameter of type number.

97
00:06:38.967 --> 00:06:43.163
And you can see a red squiggles underneath
the string containing a number 4.

98
00:06:43.163 --> 00:06:47.651
So we're being busted on mixed use of
strings and numbers here as we should,

99
00:06:47.651 --> 00:06:48.153
right?

100
00:06:48.153 --> 00:06:52.147
So this represents more
information in your source code.

101
00:06:52.147 --> 00:06:56.027
And I'm sure you can imagine here
where in your authoring environment,

102
00:06:56.027 --> 00:07:00.481
you're getting a lot more feedback about
correct usage of all of your libraries and

103
00:07:00.481 --> 00:07:03.552
other parts of your code that
maybe somebody else wrote.

104
00:07:03.552 --> 00:07:08.293
You're able to sort of to find some
constraints here in terms of how these

105
00:07:08.293 --> 00:07:10.540
functions are meant to be used.

106
00:07:10.540 --> 00:07:11.309
So in essence,

107
00:07:11.309 --> 00:07:15.401
what we're seeing here is that TypeScript
removes things that typically would be

108
00:07:15.401 --> 00:07:19.870
problems at runtime into compile time, is
that you're getting this feedback earlier.

109
00:07:19.870 --> 00:07:21.320
You're getting it more clearly.

110
00:07:21.320 --> 00:07:25.800
You're getting it right at the call site
where you're misusing this add function.

111
00:07:25.800 --> 00:07:30.080
And that's a lot more actionable,
you're gonna catch things more easily.

112
00:07:30.080 --> 00:07:33.990
You don't have to wait until unit
tests catch this kind of thing,

113
00:07:33.990 --> 00:07:37.759
although TypeScript's not
a replacement for unit tests, but

114
00:07:37.759 --> 00:07:42.650
it does represent a greater degree of
feedback that you can get right away.

115
00:07:42.650 --> 00:07:47.256
So throughout the course, you're gonna see
that we have a lot of these little code

116
00:07:47.256 --> 00:07:51.780
snippets here in the website which you
can visit typescript-training.com.

117
00:07:51.780 --> 00:07:53.644
And you can see this website.

118
00:07:53.644 --> 00:07:59.136
These are actually rendered from
a TypeScript compiled code snippet here,

119
00:07:59.136 --> 00:08:02.137
so you can hover over
these code points and

120
00:08:02.137 --> 00:08:07.317
actually explore what's going on with
each of these parts of the code.

121
00:08:07.317 --> 00:08:10.937
I would encourage you to do so, there's
a ton of valuable information you can get

122
00:08:10.937 --> 00:08:14.627
from little tooltips, sometimes that's
where the type information is hiding.

123
00:08:14.627 --> 00:08:17.609
You're going to need,
for sure, two things.

124
00:08:17.609 --> 00:08:21.964
You gotta be able to access this website
that we're looking at right now, and

125
00:08:21.964 --> 00:08:26.788
you're going to wanna make sure that you
can visit the official TypeScript website,

126
00:08:26.788 --> 00:08:28.667
which is typescriptlang.org.

127
00:08:28.667 --> 00:08:34.017
So if you wanted to just watch along,
that's what you would need.

128
00:08:34.017 --> 00:08:38.934
If you want to code along with us,
which I would encourage you to do,

129
00:08:38.934 --> 00:08:43.962
we're gonna have to clone a GitHub
project and work with it locally.

130
00:08:43.962 --> 00:08:47.593
So that you can open up VS Code or
another editor of your choice and

131
00:08:47.593 --> 00:08:50.500
work through some of
the examples as we study them.

132
00:08:50.500 --> 00:08:53.135
&gt;&gt; What are the pros and
cons of using TypeScript for

133
00:08:53.135 --> 00:08:56.310
its strict typing compared
to regular JavaScript?

134
00:08:56.310 --> 00:09:00.514
Typing seems useful, but
as an experienced user,

135
00:09:00.514 --> 00:09:05.305
I'm afraid that it will be hard
to understand the benefits

136
00:09:05.305 --> 00:09:10.313
will be of making the language
less dynamic and more strict.

137
00:09:10.313 --> 00:09:13.756
&gt;&gt; Yeah, I would look back at this
example that we just covered,

138
00:09:13.756 --> 00:09:17.797
which kind of illustrates how this
regular JavaScript function could be

139
00:09:17.797 --> 00:09:19.867
used in a variety of different ways.

140
00:09:19.867 --> 00:09:24.888
Sometimes dynamic typing or duck typing,

141
00:09:24.888 --> 00:09:30.884
where JavaScript kind of
attempts to use a value and

142
00:09:30.884 --> 00:09:36.323
it'll try to treat
a variable as if things work

143
00:09:36.323 --> 00:09:41.204
right up until the moment
things blow up or

144
00:09:41.204 --> 00:09:44.838
you get an unexpected result.

145
00:09:44.838 --> 00:09:48.428
So for example,
you could pass a function for

146
00:09:48.428 --> 00:09:52.312
the argument A, or a class,
or an HTML DOM node.

147
00:09:52.312 --> 00:09:56.922
And where you would start to hit
problems is attempting to concatenate

148
00:09:56.922 --> 00:09:58.569
these things together.

149
00:09:58.569 --> 00:10:01.384
Effectively, you only in JavaScript,

150
00:10:01.384 --> 00:10:06.448
know things fail right at the moment
where the problematic use happens.

151
00:10:06.448 --> 00:10:09.399
What TypeScript is doing for
us here is it lets us say,

152
00:10:09.399 --> 00:10:12.350
all right, here's the boundary for
a unit of code and

153
00:10:12.350 --> 00:10:15.318
here are the constraints
that I'm looking to apply.

154
00:10:15.318 --> 00:10:20.094
And so we're getting not only a better
error that's telling us where

155
00:10:20.094 --> 00:10:24.787
was the problem, specifically this
value here is the problem, but

156
00:10:24.787 --> 00:10:29.836
it's telling us at the invocation site,
not deep down in the function.

157
00:10:29.836 --> 00:10:34.130
I mean, imagine a + b,
this is a much more intricate function.

158
00:10:34.130 --> 00:10:38.410
Imagine there are promises involved or
there's some async error that happens.

159
00:10:38.410 --> 00:10:43.549
It's easier to debug something like this,
and particularly as code

160
00:10:43.549 --> 00:10:48.599
bases get more complex and you have
a lot of data moving around and you

161
00:10:48.599 --> 00:10:54.459
have some very interesting data structures
to hold a lot of different things.

162
00:10:54.459 --> 00:10:59.128
JavaScript gets to a point
sometimes where you start tripping

163
00:10:59.128 --> 00:11:01.740
over your own shoelaces, right?

164
00:11:03.450 --> 00:11:07.496
There's not enough that you can hold all
of the conventions you've established in

165
00:11:07.496 --> 00:11:11.220
your own mind, and TypeScript helps
you put that in the source code.

166
00:11:11.220 --> 00:11:13.890
Yeah, Kevin has a great comment in chat.

167
00:11:13.890 --> 00:11:18.671
Add the string 1 to the string 1,
and you get back the string 11.

168
00:11:18.671 --> 00:11:24.514
You might not even catch that bug,
that's a good point with this.

169
00:11:24.514 --> 00:11:29.692
Even in the TypeScript case, I mean, you
would catch that bug cuz this is saying

170
00:11:29.692 --> 00:11:35.363
it must return a number, but you certainly
wouldn't catch it in the JavaScript case.

171
00:11:35.363 --> 00:11:40.500
Well, later in the course we'll look
at how you could introduce some dynamic

172
00:11:40.500 --> 00:11:46.130
typing, I mean not dynamic typing, but
flexibility in your types to TypeScript.

173
00:11:46.130 --> 00:11:49.939
So this is a good opportunity to talk
about what we're going to cover in

174
00:11:49.939 --> 00:11:52.210
TypeScript Fundamentals.

175
00:11:52.210 --> 00:11:57.129
We're gonna first build a very
small TypeScript program using

176
00:11:57.129 --> 00:11:59.520
the TSC CLI command.

177
00:11:59.520 --> 00:12:03.170
And then we're going to start getting
into the details of the language itself.

178
00:12:03.170 --> 00:12:08.240
We'll cover variables and values,
object, array, and tuple types.

179
00:12:08.240 --> 00:12:11.886
We'll talk a little bit about
the difference between a structural and

180
00:12:11.886 --> 00:12:13.340
nominal type system.

181
00:12:13.340 --> 00:12:19.350
If you've used Java or C Sharp, something
like that, that's a nominal type system.

182
00:12:19.350 --> 00:12:22.491
We'll get into union and
intersection types,

183
00:12:22.491 --> 00:12:27.214
which you can think of as TypeScript's
concept of and and or for types.

184
00:12:27.214 --> 00:12:29.958
We'll talk about giving types names,

185
00:12:29.958 --> 00:12:34.110
kind of the way we can give classes or
functions names.

186
00:12:34.110 --> 00:12:38.620
It allows us to import and
export types across module boundaries.

187
00:12:38.620 --> 00:12:41.683
We can do that with interfaces and
type aliases.

188
00:12:41.683 --> 00:12:46.759
And then as a class we're going
to go through an exercise

189
00:12:46.759 --> 00:12:52.596
where we try to write a type that
describes any valid JSON value.

190
00:12:52.596 --> 00:12:56.319
Which could be, as you know,
objects, it could be arrays,

191
00:12:56.319 --> 00:13:01.076
we can have strings and numbers and
Booleans, null is an allowed JSON value.

192
00:13:01.076 --> 00:13:06.193
So we'll build a type that describes
anything that is valid JSON.

193
00:13:09.221 --> 00:13:12.636
After that we'll get into type
queries which allow us to

194
00:13:12.636 --> 00:13:15.699
extract type information
from existing values.

195
00:13:15.699 --> 00:13:20.898
So if you have a return value from
a function and you wanna create

196
00:13:20.898 --> 00:13:26.880
a new variable whose type is the same
type as what the function returned,

197
00:13:26.880 --> 00:13:32.400
you could extract the type out and
then use it in another place.

198
00:13:32.400 --> 00:13:37.190
That's a type query,
getting a type from a value that you have.

199
00:13:37.190 --> 00:13:42.217
We'll discuss callables and
constructables, which is another way

200
00:13:42.217 --> 00:13:47.677
of saying things you can invoke like
functions and things you can use the new

201
00:13:47.677 --> 00:13:52.636
keyword with like classes when you
create a new instance of a class.

202
00:13:52.636 --> 00:13:57.293
And then towards the end of the class,
we'll talk about type guards and

203
00:13:57.293 --> 00:14:02.105
narrowing, which is the concept of
building branches of code that handle

204
00:14:02.105 --> 00:14:03.830
specific parts of types.

205
00:14:03.830 --> 00:14:06.493
And then we'll get into generics,

206
00:14:06.493 --> 00:14:12.008
which is a really powerful feature
that allows us to parameterize types.

207
00:14:12.008 --> 00:14:17.040
Kind of like how a function
parameterizes a value, right?

208
00:14:17.040 --> 00:14:20.610
You could say, f(x) equals x squared.

209
00:14:20.610 --> 00:14:25.805
We can create a type that is
defined in terms of a variable,

210
00:14:25.805 --> 00:14:28.358
and that variable is a type.

211
00:14:28.358 --> 00:14:32.706
And then we'll wrap up the day by
taking everything we've learned and

212
00:14:32.706 --> 00:14:36.627
building a map, filter, and
reduce kind of utility library.

213
00:14:36.627 --> 00:14:39.365
Which you may be familiar
with using those on arrays.

214
00:14:39.365 --> 00:14:43.039
We're gonna make versions
that work on dictionaries.

215
00:14:43.039 --> 00:14:47.791
So you'll take those same concepts and
we'll sort of handwrite those

216
00:14:47.791 --> 00:14:51.750
utility functions ourselves
with dictionaries in mind.

