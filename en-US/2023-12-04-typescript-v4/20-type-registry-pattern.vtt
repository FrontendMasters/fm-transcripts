WEBVTT

1
00:00:00.340 --> 00:00:05.641
All right, let's put some of what
we've learned here together and

2
00:00:05.641 --> 00:00:07.770
explore a use case.

3
00:00:07.770 --> 00:00:11.690
And I call this the type registry pattern.

4
00:00:11.690 --> 00:00:16.199
And we're gonna look in a special
folder I've created here just for

5
00:00:16.199 --> 00:00:19.928
this purpose,
cuz I wanna have multiple modules here.

6
00:00:22.129 --> 00:00:24.960
So let's look at what we've got.

7
00:00:24.960 --> 00:00:28.956
So in this type registry folder,
I have a data folder and

8
00:00:28.956 --> 00:00:31.710
a lib folder and then this index.ts.

9
00:00:31.710 --> 00:00:39.080
So what we want to do, well,
I have to introduce a concept here first.

10
00:00:39.080 --> 00:00:42.070
Remember when we were augmenting
the window object and

11
00:00:42.070 --> 00:00:43.890
we said declare global, right?

12
00:00:47.180 --> 00:00:50.780
Let's see, it was here at the very bottom.

13
00:00:52.590 --> 00:00:54.590
Remember when we did this?

14
00:00:54.590 --> 00:00:59.025
This is like saying, I'm going to
provide some type information and

15
00:00:59.025 --> 00:01:04.270
I want to state which scope that
type information should pertain to.

16
00:01:04.270 --> 00:01:10.220
Well, we're gonna do the same thing here,
but we can do it for a particular module.

17
00:01:10.220 --> 00:01:15.532
We can say, I want to declare some type
information, and it should be treated

18
00:01:15.532 --> 00:01:20.290
as if that type information were
like literally in a different file.

19
00:01:21.640 --> 00:01:25.100
In this case, the lib/registry file.

20
00:01:25.100 --> 00:01:30.187
If I put an interface between these
braces, it will be as if I took that

21
00:01:30.187 --> 00:01:35.570
interface and I went and I pasted
it into the /lib/registry.ts file.

22
00:01:37.020 --> 00:01:38.880
That's a new concept that
I wanna introduce here.

23
00:01:40.860 --> 00:01:45.881
So what we're gonna do is look at
a use case where the key of type

24
00:01:45.881 --> 00:01:50.613
query is going to be useful as
well as an index access type,

25
00:01:50.613 --> 00:01:54.220
I believe, in order to solve the problem.

26
00:01:54.220 --> 00:01:58.390
The problem we're going to try to solve
here is building a data layer for

27
00:01:58.390 --> 00:02:00.290
a web application.

28
00:02:00.290 --> 00:02:05.241
And let's say it's my team's job to make
sure that a bunch of other teams have

29
00:02:05.241 --> 00:02:07.080
an easy time fetching data.

30
00:02:08.860 --> 00:02:15.285
And I wanna build a nice easy to
use function that takes the name

31
00:02:15.285 --> 00:02:21.476
of a resource to fetch and
its ID and returns the right type.

32
00:02:23.139 --> 00:02:28.540
We don't know exactly what types users
will need because maybe the teams

33
00:02:28.540 --> 00:02:34.940
that I'm helping empower, they're defining
what book is and what magazine is.

34
00:02:34.940 --> 00:02:39.910
So I kind of need to set something
up that allows very easily for

35
00:02:39.910 --> 00:02:44.800
new things,
new types of records to be created.

36
00:02:44.800 --> 00:02:49.060
And they should kind of just work
with fetch record, that's our goal.

37
00:02:49.060 --> 00:02:50.890
So here's our file structure.

38
00:02:50.890 --> 00:02:54.220
We've got a data folder with book and
magazine in there.

39
00:02:54.220 --> 00:02:59.052
You'll see those are like
trivial little classes where

40
00:02:59.052 --> 00:03:03.070
we define what a book is and
what a magazine is.

41
00:03:03.070 --> 00:03:06.748
You can imagine that we get
JSON back from a server and

42
00:03:06.748 --> 00:03:12.280
we sort of deserialize that JSON and
end up providing an instance of the class.

43
00:03:12.280 --> 00:03:14.140
That's what fetchRecord will return,

44
00:03:14.140 --> 00:03:16.990
a promise that resolves to
an instance of that class, maybe.

45
00:03:18.280 --> 00:03:21.226
We've got a file called registry which
is where some interesting stuff is

46
00:03:21.226 --> 00:03:21.858
gonna happen.

47
00:03:21.858 --> 00:03:27.125
And then index.ts, let's say that's
the entry point of our program,

48
00:03:27.125 --> 00:03:30.419
that's where fetchRecord is gonna be used.

49
00:03:32.699 --> 00:03:39.559
So let's go and
look at a couple of these different files.

50
00:03:42.509 --> 00:03:44.859
We'll start with registry.

51
00:03:46.842 --> 00:03:50.900
So what we've got here
is an empty interface.

52
00:03:50.900 --> 00:03:58.389
This is empty by design, and
we've got our fetchRecord function.

53
00:03:58.389 --> 00:04:02.978
Our fetchRecord function takes
an argument which is key of data type,

54
00:04:02.978 --> 00:04:04.470
registry and string.

55
00:04:04.470 --> 00:04:09.470
And that's just to make it easy for
us to see what's going on here.

56
00:04:09.470 --> 00:04:12.458
And I'm actually gonna comment
a couple things out here, so

57
00:04:12.458 --> 00:04:14.518
we can see a before and after more easily.

58
00:04:16.989 --> 00:04:22.050
So our starting point,
arg is never, you haven't

59
00:04:22.050 --> 00:04:28.180
talked about this yet, but
it represents an impossibility.

60
00:04:30.010 --> 00:04:35.946
The set of values that corresponds
to the never type is an empty set,

61
00:04:35.946 --> 00:04:40.780
represents that nothing
will make this happy.

62
00:04:40.780 --> 00:04:51.060
Now, if we put something in here,
Well, there we go, arg can be foo.

63
00:04:51.060 --> 00:04:53.490
It's the key of this data type registry.

64
00:04:53.490 --> 00:04:55.990
And I'm just adding this so
that we can see it easily.

65
00:04:55.990 --> 00:04:57.650
We'll see when things pop up.

66
00:04:57.650 --> 00:05:01.860
And then the second argument here
is the ID of the thing to fetch.

67
00:05:01.860 --> 00:05:06.772
So what we're gonna do, let's look at
our starting point here where we're

68
00:05:06.772 --> 00:05:09.623
saying I wanna fetch a book, fetchRecord.

69
00:05:09.623 --> 00:05:13.135
It returns a void right now,
don't worry about that so much.

70
00:05:13.135 --> 00:05:17.779
But certainly,
these are a bit of a problem, right?

71
00:05:17.779 --> 00:05:21.369
These aren't accepted values yet,
and let me delete this.

72
00:05:23.290 --> 00:05:29.247
So what we can do is each of these models,
like this class representing a book,

73
00:05:29.247 --> 00:05:34.600
can have at the bottom of the file
a little module declaration.

74
00:05:34.600 --> 00:05:40.174
And it's using this concept of
open interfaces and it's saying,

75
00:05:40.174 --> 00:05:44.552
look, I'm gonna add something
to the interface and

76
00:05:44.552 --> 00:05:49.540
treat it as if this stuff was
in that /lib/registry file.

77
00:05:50.720 --> 00:05:55.950
I want property named book and
here's book.

78
00:05:55.950 --> 00:06:03.031
It's the interface representing
instances of this class, key and value.

79
00:06:03.031 --> 00:06:05.700
Magazine, we're gonna do the same thing.

80
00:06:09.289 --> 00:06:13.819
Key is magazine,
here's an instance of magazine.

81
00:06:17.460 --> 00:06:22.440
And now, if we look at index.ts,
we don't get errors here.

82
00:06:22.440 --> 00:06:23.030
Look at that.

83
00:06:23.030 --> 00:06:24.580
We've got book or magazine.

84
00:06:24.580 --> 00:06:26.130
We get some type checking there.

85
00:06:26.130 --> 00:06:29.812
So you could imagine,
different people at the company,

86
00:06:29.812 --> 00:06:33.200
they're creating different
resources like this.

87
00:06:33.200 --> 00:06:37.369
We could call this, we could say,
video, this is duration.

88
00:06:42.119 --> 00:06:43.929
And this is video.

89
00:06:47.670 --> 00:06:51.540
All I have to do is that I
just create a new class, and

90
00:06:51.540 --> 00:06:56.130
because of this,
it's sort of like just picked up for free.

91
00:06:56.130 --> 00:07:01.190
Look at that, book or magazine or video.

92
00:07:01.190 --> 00:07:05.855
So what I'm taking advantage of here
is I have a central interface that

93
00:07:05.855 --> 00:07:11.440
represent sort of a registry that other
modules are populating stuff into.

94
00:07:11.440 --> 00:07:13.770
They're adding their own entry there.

95
00:07:13.770 --> 00:07:15.794
And remember when we discussed,

96
00:07:15.794 --> 00:07:20.690
there's only one representation of
a type in memory when things compile?

97
00:07:20.690 --> 00:07:25.267
If we go to registry.ts, look at arg,

98
00:07:25.267 --> 00:07:30.070
book or magazine or vehicle or video.

99
00:07:30.070 --> 00:07:34.540
Now, this would work the same way if the
code we're looking at right now were in

100
00:07:34.540 --> 00:07:36.620
your node modules folder.

101
00:07:36.620 --> 00:07:38.780
So you might ask, why would we want this?

102
00:07:38.780 --> 00:07:40.110
Why is this important?

103
00:07:40.110 --> 00:07:45.051
I could just go and create, ask teams
to add their entry into this interface,

104
00:07:45.051 --> 00:07:45.890
right?

105
00:07:45.890 --> 00:07:50.186
Well, if you're publishing a library, you
don't necessarily know what the use cases

106
00:07:50.186 --> 00:07:52.520
of people consuming your
library are gonna do.

107
00:07:52.520 --> 00:07:56.854
You don't want them to have to sort of
modify the library in order to make

108
00:07:56.854 --> 00:07:58.130
things work.

109
00:07:58.130 --> 00:08:03.004
This would let you build something that's
general purpose where you could sort of

110
00:08:03.004 --> 00:08:05.350
register things with a library.

111
00:08:05.350 --> 00:08:09.738
And then, when the compile step happens,
if you go into that libraries code and

112
00:08:09.738 --> 00:08:13.690
your node modules folder,
you'd see something just like this.

113
00:08:13.690 --> 00:08:16.020
The types are sort of fleshing out.

114
00:08:16.020 --> 00:08:18.876
Even though if you look
at this file by itself,

115
00:08:18.876 --> 00:08:22.320
there's nothing here that says book,
right?

116
00:08:22.320 --> 00:08:29.940
It's been sort of injected because
of these module declarations here.

117
00:08:29.940 --> 00:08:35.793
So what's happening is, effectively,
we're using an indexed,

118
00:08:35.793 --> 00:08:43.100
sorry, we're using a type query here and
an open interface in order to create this.

119
00:08:45.040 --> 00:08:47.253
I could take this one step further.

120
00:08:47.253 --> 00:08:51.300
Actually, we will take this one
step further a little bit later.

121
00:08:51.300 --> 00:08:55.290
We will return the correct type, but

122
00:08:55.290 --> 00:08:59.804
we'll need generics in order to do that.

123
00:08:59.804 --> 00:09:03.850
LJ, I see you said the declare
module thing is a bit confusing.

124
00:09:05.410 --> 00:09:09.928
If you want to learn more, Intermediate
TypeScript is a great course to take.

125
00:09:09.928 --> 00:09:14.818
We will get much deeper into
module declarations there and

126
00:09:14.818 --> 00:09:21.220
it's a more advanced concept but
I promise we will scratch your itch there.

