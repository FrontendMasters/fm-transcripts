WEBVTT

1
00:00:00.180 --> 00:00:05.120
Okay, so you need to be able
to view the course website.

2
00:00:05.120 --> 00:00:07.580
TypeScript-training.com is
the correct link.

3
00:00:07.580 --> 00:00:11.656
We looked at the official TypeScript
website, and then if you want to code

4
00:00:11.656 --> 00:00:15.143
along, which I would encourage
everybody in the classroom and

5
00:00:15.143 --> 00:00:18.370
watching live and you watching the video.

6
00:00:18.370 --> 00:00:22.200
This is the best way to learn
Typescript is hands-on.

7
00:00:22.200 --> 00:00:24.120
You're going to want to install Volta.

8
00:00:26.280 --> 00:00:31.096
Volta is a Javascript toolchain manager
and what it will ensure is you have

9
00:00:31.096 --> 00:00:36.230
the right version of node and the right
version of yarn for this project.

10
00:00:36.230 --> 00:00:38.792
We want this project to work for
everybody, and

11
00:00:38.792 --> 00:00:41.360
Volta is part of making sure that happens.

12
00:00:41.360 --> 00:00:46.226
There are other tools like this,
like nvm, and I heard in the classroom

13
00:00:46.226 --> 00:00:51.009
this one called N, apparently,
I'm not familiar with that one, but

14
00:00:51.009 --> 00:00:56.200
if you're using the right node and
yarn version, you should be okay.

15
00:00:56.200 --> 00:00:59.145
So we're gonna go through
the steps of installing Volta, but

16
00:00:59.145 --> 00:01:03.050
I'll show you if you use these other tool
chain managers, what version of node and

17
00:01:03.050 --> 00:01:05.050
yarn you're looking for.

18
00:01:05.050 --> 00:01:09.130
So first we're going to run this command.

19
00:01:09.130 --> 00:01:14.480
We're gonna curl from get.volta.sh,
pipe that into bash.

20
00:01:14.480 --> 00:01:17.206
If you're using Windows and PowerShell,

21
00:01:17.206 --> 00:01:22.060
there's an installation process
described on the Volta website for this.

22
00:01:22.060 --> 00:01:25.050
There's a little MSI bundle
that you have to install.

23
00:01:25.050 --> 00:01:31.340
But we're gonna go, assuming people
are using a POSIX compliant environment.

24
00:01:31.340 --> 00:01:35.620
Like if you're using Windows subsystem for
Linux, this will work as well.

25
00:01:35.620 --> 00:01:39.390
So I just pasted that in and
you can see it installed Volta.

26
00:01:40.710 --> 00:01:43.230
I already have Volta installed here.

27
00:01:43.230 --> 00:01:48.433
It's a good idea to close your terminal
and reopen it because in some cases,

28
00:01:48.433 --> 00:01:52.350
it will insert something into
your bash RC or your ZSH RC.

29
00:01:52.350 --> 00:01:55.270
I already have that here.

30
00:01:55.270 --> 00:01:58.638
And you should be able to run Volta and
see some reasonable output here,

31
00:01:58.638 --> 00:02:00.420
something that's not an error.

32
00:02:00.420 --> 00:02:03.850
The next thing you'll wanna
do is run this command.

33
00:02:03.850 --> 00:02:05.896
And this is globally installing,

34
00:02:05.896 --> 00:02:09.500
meaning it's not associated
with any particular project.

35
00:02:09.500 --> 00:02:11.590
It's still within Volta.

36
00:02:11.590 --> 00:02:16.390
Globally installing the latest node LTS,

37
00:02:16.390 --> 00:02:19.999
which is node 18 and yarn v3.

38
00:02:19.999 --> 00:02:21.292
You could run this.

39
00:02:24.063 --> 00:02:29.530
And you may see some progress bars where
it's downloading things on the fly.

40
00:02:29.530 --> 00:02:34.100
But this will ensure you have some
node and some yarn inside Volta.

41
00:02:34.100 --> 00:02:37.640
And all of this is happening
in this directory.

42
00:02:39.400 --> 00:02:43.370
So this is where all of the stuff,
all of the nodes in the yarns live.

43
00:02:44.600 --> 00:02:46.520
And then you're good to go.

44
00:02:46.520 --> 00:02:48.110
Once you've done that,
you should be good to go.

45
00:02:50.060 --> 00:02:52.580
So you're gonna clone the Git repo.

46
00:02:52.580 --> 00:02:56.758
I'm suggesting using HTTPS here because
you're not gonna be pushing to this repo

47
00:02:56.758 --> 00:03:01.010
and you're gonna have to worry about SSH
keys in case you haven't set those up yet.

48
00:03:03.240 --> 00:03:06.359
Then you're gonna enter the folder and
you're gonna run yarn.

49
00:03:17.913 --> 00:03:22.610
So something like that, and you should
see some output that looks like this.

50
00:03:22.610 --> 00:03:25.828
The fact that you're seeing these
messages starting with a Y,

51
00:03:25.828 --> 00:03:29.440
that's an indication you're
using a modern version of yarn.

52
00:03:29.440 --> 00:03:35.191
If you don't see these, that likely
means that you're using yarn 1.

53
00:03:35.191 --> 00:03:39.431
And interestingly, that's sort of
a separate project that's deprecated now,

54
00:03:39.431 --> 00:03:41.960
it's a different repo,
a different code base.

55
00:03:41.960 --> 00:03:45.910
So you want to make sure you're seeing,

56
00:03:45.910 --> 00:03:50.100
some evidence that you're using Yarn 3.

57
00:03:50.100 --> 00:03:54.060
I've used yarn yarn 4 with this as well,
it's a release candidate right now.

58
00:03:54.060 --> 00:03:58.800
There should be no problems using that,
but this makes sure you're using yarn 3.

59
00:03:58.800 --> 00:04:04.136
And where you can see the versions
that are pinned in the root package

60
00:04:04.136 --> 00:04:10.229
JSON of the project, you can see this,
so node 18.18.2 Yarn 364.

61
00:04:10.229 --> 00:04:11.750
That's what we're using here.

62
00:04:11.750 --> 00:04:16.006
I do not plan to change these unless
we release a V5 of this course,

63
00:04:16.006 --> 00:04:21.100
in which case we may try to move these
forward, but that's how to get all set up.

64
00:04:21.100 --> 00:04:26.150
Vanessa has a question about whether the
value of TypeScript has a lot to do with

65
00:04:26.150 --> 00:04:31.370
full stack development where you're
coming from static typing in the backend.

66
00:04:31.370 --> 00:04:35.108
And then dynamic typing in the front
end represents like a loss of type

67
00:04:35.108 --> 00:04:35.950
information.

68
00:04:37.040 --> 00:04:43.570
And I would say you get a lot of value out
of TypeScript in that situation, right?

69
00:04:43.570 --> 00:04:48.326
If you already have types and
you know the shapes of your API responses,

70
00:04:48.326 --> 00:04:53.319
failing to bring that into the front end
puts you in a position where you sort

71
00:04:53.319 --> 00:04:57.758
of have to keep a backend and
frontend aligned with human vigilance

72
00:04:57.758 --> 00:05:02.080
as opposed to having types
that are generated for you.

73
00:05:02.080 --> 00:05:05.344
Some large companies use something
called Protobufs for this,

74
00:05:05.344 --> 00:05:08.040
where they can generate
a single set of types.

75
00:05:08.040 --> 00:05:10.010
Both for their backend and frontend.

76
00:05:10.010 --> 00:05:13.251
There's a full stack TypeScript
course that I've recorded for

77
00:05:13.251 --> 00:05:17.031
Frontend Masters which you can take
a look at that, where we use Graphql and

78
00:05:17.031 --> 00:05:20.110
a set of TypeScript interfaces and
we can do that very thing.

79
00:05:20.110 --> 00:05:21.670
But that's certainly a use case, right?

80
00:05:21.670 --> 00:05:26.553
Having types that sorta flow from your
back end code base over the wire into

81
00:05:26.553 --> 00:05:30.200
your front end, and
it all works together in concert.

