WEBVTT

1
00:00:00.380 --> 00:00:05.371
Let's talk about constructables, so
here's an example of a date constructor,

2
00:00:05.371 --> 00:00:08.930
this is exactly the same,
this would be a call signature.

3
00:00:10.320 --> 00:00:14.933
Now, it's a construct signature,
just add the word new in front of it,

4
00:00:14.933 --> 00:00:16.740
this is for newables.

5
00:00:16.740 --> 00:00:20.823
Anything that you can use to create
an instance, classes, of course,

6
00:00:20.823 --> 00:00:23.760
are probably the first thing you think of,
right?

7
00:00:24.770 --> 00:00:31.108
So here we can say MyDateConstructor
is a DateConstructor,

8
00:00:31.108 --> 00:00:37.582
and I'm gonna take Date,
not new date, but literally Date.

9
00:00:39.593 --> 00:00:44.376
Now, I can do this, And this is a date,

10
00:00:44.376 --> 00:00:47.656
this here,
this is the interface of the class.

11
00:00:50.947 --> 00:00:55.470
So this is a construct signature,
I would say this is fairly rare.

12
00:00:55.470 --> 00:00:59.409
It's more common certainly
to write call signatures,

13
00:00:59.409 --> 00:01:03.110
cuz anytime you have a call back,
things like that.

14
00:01:03.110 --> 00:01:07.106
If you're writing higher order functions,
you're gonna end up with a call signature,

15
00:01:07.106 --> 00:01:11.020
but they're no more difficult,
just remember to add the new keyword.

16
00:01:11.020 --> 00:01:14.396
So another interesting
thing that has to do

17
00:01:14.396 --> 00:01:19.770
with call signatures is a concept
called function overloads.

18
00:01:19.770 --> 00:01:23.988
Let's imagine a scenario
where we have a form,

19
00:01:23.988 --> 00:01:29.348
and, Maybe we have
a central event listener,

20
00:01:29.348 --> 00:01:32.050
which is, as I understand it,
best practice, right?

21
00:01:32.050 --> 00:01:35.469
So you don't have a bunch of different
event listeners to set up and

22
00:01:35.469 --> 00:01:37.740
all those separate callbacks to maintain.

23
00:01:37.740 --> 00:01:41.931
We can have kind of a global
event listener that dispatches

24
00:01:41.931 --> 00:01:43.734
events appropriately.

25
00:01:43.734 --> 00:01:52.385
And we want to handle events that
could come from a form or an iframe.

26
00:01:52.385 --> 00:01:54.800
So with that, let's give it a shot and

27
00:01:54.800 --> 00:01:59.820
let's think about the different
types of handlers we would need.

28
00:01:59.820 --> 00:02:04.407
So a form of SubmitHandler takes
FormData as an argument, and

29
00:02:04.407 --> 00:02:09.970
a MessageHandler, which would be
a post message channel, right?

30
00:02:09.970 --> 00:02:11.547
Or you're communicating with an iframe.

31
00:02:13.281 --> 00:02:16.854
You'd have this on message event,
and you'd pass in,

32
00:02:16.854 --> 00:02:22.170
something that looks like this,
this is the type of a message handler.

33
00:02:22.170 --> 00:02:29.139
So let's say we wanna have
a function that could handle both,

34
00:02:29.139 --> 00:02:36.500
they could allow us to pass
as one argument, the element.

35
00:02:36.500 --> 00:02:40.154
The second argument is the type, and we
kind of registered those together somehow.

36
00:02:44.097 --> 00:02:49.520
So we can get an iframe,
there's an HTMLIFrameElement,

37
00:02:49.520 --> 00:02:53.506
and then we can call handleMainEvent, and

38
00:02:53.506 --> 00:02:58.836
if we look at the type of val:,
well, it has an any type.

39
00:02:58.836 --> 00:03:01.606
And, all right, well, I don't know,

40
00:03:01.606 --> 00:03:05.940
I kind of expected it to infer more here,
but we can keep going.

41
00:03:10.843 --> 00:03:15.718
Cuz I think we get to the same place here,
so I'll tell you what I expected to see,

42
00:03:15.718 --> 00:03:19.980
these are both single argument functions,
they return void.

43
00:03:19.980 --> 00:03:24.133
So I kind of expected to see
something like FormData or

44
00:03:24.133 --> 00:03:28.302
MessageEvent as an argument
with a void return type.

45
00:03:28.302 --> 00:03:32.433
But it seems to have bailed, and

46
00:03:32.433 --> 00:03:36.109
this is now an implicit any.

47
00:03:36.109 --> 00:03:39.077
In either case, we kinda wanna allow for

48
00:03:39.077 --> 00:03:43.350
two specific things that
could happen here, right?

49
00:03:43.350 --> 00:03:47.533
Where I pass in my form element,
and I get a form submit handler,

50
00:03:47.533 --> 00:03:52.160
or I pass in my iframe element,
and I get a message handler.

51
00:03:52.160 --> 00:03:58.570
We don't wanna mix and match, we don't
want these two, or these two here, right?

52
00:03:58.570 --> 00:04:01.958
We wanna have one pair on the left or
the pair on the right, and

53
00:04:01.958 --> 00:04:04.760
we can accomplish this
with function overloads.

54
00:04:06.090 --> 00:04:11.020
So the way this works is
we're going to create

55
00:04:11.020 --> 00:04:16.630
multiple function heads,
we would call these.

56
00:04:16.630 --> 00:04:21.470
So the thing to note here is these
are what we call function heads,

57
00:04:21.470 --> 00:04:26.350
they don't have a body,
there's no implementation here.

58
00:04:26.350 --> 00:04:31.829
We're gonna grab these two,
and we're gonna put them above

59
00:04:31.829 --> 00:04:36.887
what we would call
the implementation of the function.

60
00:04:36.887 --> 00:04:39.136
And we'll need a return type here,

61
00:04:45.528 --> 00:04:50.439
All right, so if we look at how
we're allowed to call this now,

62
00:04:53.342 --> 00:04:56.950
You see this 1 out of 2 and 2 out of 2?

63
00:04:56.950 --> 00:05:00.765
Look at that,
first argument is a FormElement,

64
00:05:00.765 --> 00:05:05.350
the second argument is
our form SubmitHandler.

65
00:05:05.350 --> 00:05:09.720
Here's two out of two, got the iframe
element, and the message handler.

66
00:05:09.720 --> 00:05:14.688
So although, the underlying implementation
of this function would technically allow

67
00:05:14.688 --> 00:05:18.180
us to mix and match, right,
they're just union types.

68
00:05:18.180 --> 00:05:22.382
There's nothing in this function
itself that sort of expresses any

69
00:05:22.382 --> 00:05:25.854
relationship between the first and
second arguments.

70
00:05:25.854 --> 00:05:30.515
What's happened is we've hidden this,
this is not callable in and

71
00:05:30.515 --> 00:05:36.250
of itself, you can only call this
function through one of these two heads.

72
00:05:36.250 --> 00:05:42.420
And so we've sort of limited the scope,
the combinations of what can be done here.

73
00:05:43.530 --> 00:05:46.521
And so now,
this should be typed and it is,

74
00:05:46.521 --> 00:05:51.111
there's a message event, but
if I were to type in, we got a form,

75
00:05:56.260 --> 00:06:00.047
Look at that, it's FormData,
it switched on us,

76
00:06:00.047 --> 00:06:04.290
because it knows you have to
do one pair or the other pair.

77
00:06:04.290 --> 00:06:07.780
It's sort of using the first argument
to figure out the second argument.

78
00:06:07.780 --> 00:06:12.542
And you can think of it almost,
when we call this function,

79
00:06:12.542 --> 00:06:19.225
it's going through the various function
heads one by one to find one that matches.

80
00:06:19.225 --> 00:06:23.416
But the first argument we're passing in,
and then it'll try to find one that also

81
00:06:23.416 --> 00:06:27.190
matches the second argument,
and then it'll let us use that.

82
00:06:27.190 --> 00:06:31.972
But if we were to delete this,
for example, so now,

83
00:06:31.972 --> 00:06:35.144
there's no iframe element here.

84
00:06:35.144 --> 00:06:40.536
If we were to switch back,
This doesn't exist,

85
00:06:40.536 --> 00:06:45.341
you can't pass a frame in, if we were to
look at this, it's just the form element.

86
00:06:45.341 --> 00:06:49.489
So you see how this
implementation of the function,

87
00:06:49.489 --> 00:06:54.589
the last function head that has an actual,
like this body here.

88
00:07:02.481 --> 00:07:06.995
We can't directly access that, we kind of
only access it through the heads when you

89
00:07:06.995 --> 00:07:08.810
do this overloading technique.

90
00:07:10.260 --> 00:07:15.249
It is a really powerful idea,
particularly because there are other

91
00:07:15.249 --> 00:07:20.910
ways of doing this that just
are incredibly advanced in terms of types.

92
00:07:20.910 --> 00:07:25.211
This kind of makes an approach,
what we're looking at here,

93
00:07:25.211 --> 00:07:30.176
much more accessible without getting
into generics where we have types

94
00:07:30.176 --> 00:07:33.751
described in terms of
other parameterized types.

95
00:07:33.751 --> 00:07:37.227
You don't wanna be reaching for

96
00:07:37.227 --> 00:07:42.127
that unless it's important and necessary.

97
00:07:47.160 --> 00:07:49.717
One other thing I should mention here,

98
00:07:53.555 --> 00:07:57.395
The types of the heads,
these being the heads,

99
00:07:57.395 --> 00:08:02.010
they have to align with
the actual implementation here.

100
00:08:02.010 --> 00:08:09.440
So if we were to do this, we wouldn't be
able to do this function head, right?

101
00:08:10.450 --> 00:08:15.211
Each of these parameters here,
each of the function types represented by

102
00:08:15.211 --> 00:08:20.960
the heads here, they have to fit
within the underlying implementation.

103
00:08:20.960 --> 00:08:23.630
So once we add that back,
we should be good.

104
00:08:23.630 --> 00:08:26.888
It's common,
sometimes people even do this, and

105
00:08:26.888 --> 00:08:30.604
then they'll cast within
the function implementation,

106
00:08:30.604 --> 00:08:34.570
knowing that they can sort of
sort out what the type should be.

107
00:08:34.570 --> 00:08:38.144
If you have a wide range of things, and

108
00:08:38.144 --> 00:08:43.300
you don't wanna turn this
into a crazy expanded type.

109
00:08:43.300 --> 00:08:48.223
The reason it's somewhat a little bit
safer here is no one can directly

110
00:08:48.223 --> 00:08:49.230
access this.

111
00:08:49.230 --> 00:08:52.036
Like you have a guarantee that
if someone gets into this,

112
00:08:52.036 --> 00:08:54.860
they came through one of these two heads.

113
00:08:54.860 --> 00:08:58.700
So it's not the same as just
having an any out in the wild.

114
00:08:58.700 --> 00:09:02.358
You have some narrow set of pathways
that someone must have taken to get into

115
00:09:02.358 --> 00:09:03.126
the function.

116
00:09:06.437 --> 00:09:11.389
&gt;&gt; Is there a reason that we
have to specify the types with

117
00:09:11.389 --> 00:09:16.905
a union instead of just letting
it infer from the overload?

118
00:09:16.905 --> 00:09:22.406
&gt;&gt; The, Typescriptive

119
00:09:22.406 --> 00:09:27.000
does not infer that way, so,
I mean, that would be the reason.

120
00:09:27.000 --> 00:09:32.301
It's more that the type of the function
itself is processed first,

121
00:09:32.301 --> 00:09:34.905
and then the heads are checked for

122
00:09:34.905 --> 00:09:39.690
compatibility with
the underlying implementation.

123
00:09:39.690 --> 00:09:43.386
So I think it's sort of an order
of operations issue where the real

124
00:09:43.386 --> 00:09:48.430
function comes first, and then the heads
have to be compatible with that function.

125
00:09:48.430 --> 00:09:54.060
So the overloads, those heads don't really
influence the type of the function itself.

126
00:09:54.060 --> 00:09:58.989
And it would also make it really kind of
hard to maintain one of these, if sort of

127
00:09:58.989 --> 00:10:03.936
the arguments would sort of get altered
based on different signatures above.

128
00:10:03.936 --> 00:10:08.686
You wanna get really tight about
this being well-typed, and

129
00:10:08.686 --> 00:10:15.090
then you can sort of constrain different
usage patterns using the function heads.

130
00:10:16.190 --> 00:10:18.462
You wouldn't wanna add
another function head, and

131
00:10:18.462 --> 00:10:20.630
then everything inside
your function lights up,

132
00:10:20.630 --> 00:10:23.330
because there's implicitly a new
thing that could be there.

