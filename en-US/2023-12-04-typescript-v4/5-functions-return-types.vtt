WEBVTT

1
00:00:00.380 --> 00:00:05.457
So we can return to our example we
showed in the introductory chapter,

2
00:00:05.457 --> 00:00:10.650
where we had this add function
that takes two arguments in.

3
00:00:10.650 --> 00:00:14.390
Now, we are in the context
of a TypeScript file.

4
00:00:14.390 --> 00:00:18.662
And TypeScript is not super happy
that we have these things and

5
00:00:18.662 --> 00:00:20.480
that they're not typed.

6
00:00:21.780 --> 00:00:24.477
So we're going to give those types here.

7
00:00:27.263 --> 00:00:29.132
You can do the same technique here.

8
00:00:33.483 --> 00:00:36.753
So we're adding colon number and
colon number, and

9
00:00:36.753 --> 00:00:41.490
GitHub code pilot is trying to help
me out here, and add another number.

10
00:00:41.490 --> 00:00:44.951
So this represents the return value here.

11
00:00:44.951 --> 00:00:47.658
It's a lot more syntax, but
you'll get used to it, meaning,

12
00:00:47.658 --> 00:00:50.584
you're gonna see colons all over
the place and it gets a little odd.

13
00:00:50.584 --> 00:00:54.616
If you're used to seeing parentheses and
then the open brace right after it,

14
00:00:54.616 --> 00:00:56.053
like it's a little noisy.

15
00:00:56.053 --> 00:01:02.439
But now we can see a is a number,
b is a number, and we return to number.

16
00:01:04.949 --> 00:01:12.332
And if we just change this,
This will type, check.

17
00:01:15.668 --> 00:01:19.904
So here,
let's see what the type error is here.

18
00:01:19.904 --> 00:01:24.169
So previously, before we had this
return type here, we can go back.

19
00:01:26.706 --> 00:01:30.571
You see that we were able to get
this result, which is an any, and

20
00:01:30.571 --> 00:01:32.360
we were able to pass this in.

21
00:01:32.360 --> 00:01:36.050
Maybe some of you didn't even notice,
I didn't notice, it just now.

22
00:01:36.050 --> 00:01:40.120
We pass this in as the argument
to a promise constructor.

23
00:01:40.120 --> 00:01:42.780
What should we be passing
to a promise constructor?

24
00:01:43.900 --> 00:01:46.170
In general, what type of value?

25
00:01:46.170 --> 00:01:46.879
&gt;&gt; Callback function?

26
00:01:46.879 --> 00:01:48.301
&gt;&gt; It's a callback, it's a function.

27
00:01:48.301 --> 00:01:50.063
But because this is an any,

28
00:01:50.063 --> 00:01:54.780
TypeScript isn't warning us that
there's problem here, right?

29
00:01:54.780 --> 00:01:56.050
You have to spot this.

30
00:01:57.530 --> 00:02:00.180
This is part of the benefit
of using TypeScript, right?

31
00:02:00.180 --> 00:02:02.361
So if we go back and we add these back in,

32
00:02:02.361 --> 00:02:04.950
now this is starting to
come to our attention.

33
00:02:04.950 --> 00:02:09.844
So hopefully some of you in the chat and
some of you at home who are wondering,

34
00:02:09.844 --> 00:02:13.300
what's the value of adding
TypeScript to your code?

35
00:02:14.540 --> 00:02:17.470
It helps you catch these kinds
of things more reliably.

36
00:02:17.470 --> 00:02:22.775
And even once you adopt the TypeScript,
if you have any's,

37
00:02:22.775 --> 00:02:28.393
these sort of wildcard types
floating around in your code base,

38
00:02:28.393 --> 00:02:30.903
you'll start out that way.

39
00:02:30.903 --> 00:02:34.843
Particularly, if you have a JavaScript
code base and you convert to TypeScript,

40
00:02:34.843 --> 00:02:38.090
you'll incrementally get to stronger and
stronger types.

41
00:02:38.090 --> 00:02:42.854
But these effectively like
untyped values floating around,

42
00:02:42.854 --> 00:02:49.850
they can silently be there waiting,
it's like a bug that's waiting to happen.

43
00:02:49.850 --> 00:02:53.670
And this is part of what TypeScript
helps you catch more easily.

44
00:02:53.670 --> 00:02:56.605
Normally, like if this were
a JavaScript code base,

45
00:02:56.605 --> 00:03:00.136
I mean maybe we have a linter
that's smart enough to catch this.

46
00:03:00.136 --> 00:03:03.981
But if not, you have to wait for
a user to go through this code path and

47
00:03:03.981 --> 00:03:08.435
you better hope you have test coverage
here, where you would see like, okay,

48
00:03:08.435 --> 00:03:12.880
the promise constructor blows up
because it has no callback pass to it.

49
00:03:12.880 --> 00:03:16.140
&gt;&gt; Do you still need
ESLint with TypeScript?

50
00:03:16.140 --> 00:03:17.650
&gt;&gt; Very good question.

51
00:03:18.650 --> 00:03:22.180
ESLint and
TypeScript work really well together.

52
00:03:22.180 --> 00:03:25.320
TypeScript is all about type checking,
right?

53
00:03:25.320 --> 00:03:29.570
It's doing its work whenever an argument
is passed to a function like this.

54
00:03:29.570 --> 00:03:33.950
Remember, we had red squiggles
here when it was this string 4.

55
00:03:33.950 --> 00:03:36.220
So TypeScript is great at catching this.

56
00:03:36.220 --> 00:03:42.149
It's great at catching assignment
errors or things like this up here.

57
00:03:43.150 --> 00:03:47.795
It doesn't really try to do much for
you in terms of code style,

58
00:03:47.795 --> 00:03:50.150
and sort of best practices.

59
00:03:50.150 --> 00:03:54.190
So I look at them almost as like
a low level and a high level concept.

60
00:03:54.190 --> 00:03:58.490
And in fact ESLint rules
that are written to use type

61
00:03:58.490 --> 00:04:02.350
information can be incredibly useful.

62
00:04:02.350 --> 00:04:06.096
So there is a project called
TypeScript dash ESLint,

63
00:04:06.096 --> 00:04:11.258
which I think the TypeScript core team
contribute to do significantly and

64
00:04:11.258 --> 00:04:15.770
it's sort of like more information for
lint rules to use.

65
00:04:15.770 --> 00:04:19.263
And you can start to get really
crisp about the kinds of

66
00:04:19.263 --> 00:04:21.380
problems that you detect.

67
00:04:21.380 --> 00:04:23.120
So don't throw away your linter.

68
00:04:23.120 --> 00:04:25.710
It's even more valuable with TypeScript.

69
00:04:25.710 --> 00:04:28.260
Rod asks a good question.

70
00:04:28.260 --> 00:04:34.250
Doesn't TypeScript infer the return
type of the function to number?

71
00:04:34.250 --> 00:04:38.650
It will, It will.

72
00:04:38.650 --> 00:04:42.644
The fact that we're returning a plus b,
it knows that that's a number,

73
00:04:42.644 --> 00:04:44.029
it'll return a number.

74
00:04:46.080 --> 00:04:47.440
There are pros and cons here.

75
00:04:47.440 --> 00:04:51.752
It's more concise,
if you updated the function,

76
00:04:51.752 --> 00:04:55.230
it would update the return value.

77
00:04:55.230 --> 00:05:00.318
I tend to want to type my function
returns because it represents sort of

78
00:05:00.318 --> 00:05:05.770
an encapsulation boundary, and
it's a contract that I have to live up to.

79
00:05:05.770 --> 00:05:10.019
So for example,
if we have this and I do this.

80
00:05:20.032 --> 00:05:22.410
Okay, so I just added this.

81
00:05:22.410 --> 00:05:24.565
Now, if I didn't have this return type,
and

82
00:05:24.565 --> 00:05:26.846
let's say I was using
this function properly.

83
00:05:29.849 --> 00:05:31.420
Everything seems fine, right?

84
00:05:31.420 --> 00:05:33.260
Let's ignore this promise one.

85
00:05:33.260 --> 00:05:35.010
Seems good, seems good.

86
00:05:35.010 --> 00:05:35.730
But is this good?

87
00:05:37.270 --> 00:05:38.130
What's happening here?

88
00:05:39.830 --> 00:05:41.110
Look at that.

89
00:05:41.110 --> 00:05:44.776
What this means is, it could be
a number and it could be undefined.

90
00:05:44.776 --> 00:05:48.111
So this is a little sneaky
bug waiting to happen here.

91
00:05:48.111 --> 00:05:52.545
So yes, we were able to alter this
function and we could just alternate and

92
00:05:52.545 --> 00:05:56.981
TypeScript automatically updates
this function, the return type, and

93
00:05:56.981 --> 00:05:59.240
it says it could be undefined.

94
00:05:59.240 --> 00:06:04.038
But I would prefer to be very explicit
about what I intend to return

95
00:06:04.038 --> 00:06:07.540
from the function, and
then I can live up to it.

96
00:06:07.540 --> 00:06:12.050
So, let's say, just for a moment,
I'm gonna write one more line of code here

97
00:06:20.874 --> 00:06:22.650
All right, toExponential.

98
00:06:22.650 --> 00:06:26.598
So that is a function,
that's a method available on number.

99
00:06:26.598 --> 00:06:27.870
That's all we need to know.

100
00:06:27.870 --> 00:06:30.110
All right, let's add this line back in.

101
00:06:31.180 --> 00:06:36.420
So I'm gonna get an error, but
I'm getting it kind of late.

102
00:06:36.420 --> 00:06:41.066
This is almost like where you'd expect a
duck-typing error to pop up, where you're

103
00:06:41.066 --> 00:06:45.777
getting right up to the point where you're
reaching for this method and you're trying

104
00:06:45.777 --> 00:06:49.997
to use it, and then TypeScript goes,
oops, this thing could be undefined.

105
00:06:52.179 --> 00:06:55.105
Cuz there's the possibility
that we didn't,

106
00:06:55.105 --> 00:06:58.280
our coin flip didn't
work out in our favor.

107
00:06:58.280 --> 00:07:00.349
I don't like this for one big reason, and

108
00:07:00.349 --> 00:07:03.030
it's really about where
the error shows up.

109
00:07:03.030 --> 00:07:06.048
Let's imagine this file here,
it was in a different JavaScript module,

110
00:07:06.048 --> 00:07:08.250
a different TypeScript module.

111
00:07:08.250 --> 00:07:11.655
I'm gonna see errors at
all the call sites or

112
00:07:11.655 --> 00:07:15.810
all the attempts to use
return values of my function.

113
00:07:16.950 --> 00:07:24.220
When I really wanna see errors here,
I wanna see an error here that's saying,

114
00:07:24.220 --> 00:07:28.480
look, you stated you are gonna return
a number from this function and

115
00:07:28.480 --> 00:07:32.990
not all paths in this function end
up with you returning a number.

116
00:07:32.990 --> 00:07:37.607
And so I think this explicit return
type here ends up bringing errors

117
00:07:37.607 --> 00:07:42.030
closer to the place where you
probably want to make the fix.

118
00:07:42.030 --> 00:07:46.790
You'll see me not put explicit return
types everywhere in this course when I'm

119
00:07:46.790 --> 00:07:51.352
writing code intended to go to production,
I tend to wanna do this, right?

120
00:07:51.352 --> 00:07:56.185
It's a little mini contract that this
function has with the outside world.

