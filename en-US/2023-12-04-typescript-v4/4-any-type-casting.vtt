WEBVTT

1
00:00:00.140 --> 00:00:02.400
So we talked a little
bit about type casting.

2
00:00:02.400 --> 00:00:06.890
So you can see here,
we have the frontEndMastersFounding: Date.

3
00:00:06.890 --> 00:00:13.750
This is approximately right at least on
the corporate paperwork, it's right, 2012?

4
00:00:13.750 --> 00:00:18.100
&gt;&gt; So the actual company
was incorporated in 2008.

5
00:00:18.100 --> 00:00:19.340
&gt;&gt; Wow.

6
00:00:19.340 --> 00:00:23.878
&gt;&gt; And I went full-time in
Frontend Masters in 2014, but

7
00:00:23.878 --> 00:00:27.430
before then,
it was a kind of one-off event.

8
00:00:27.430 --> 00:00:28.880
So it's a little bit complicated.

9
00:00:28.880 --> 00:00:30.060
&gt;&gt; It's a little complicated.

10
00:00:30.060 --> 00:00:32.652
This was a date I found somewhere,
so I used that one.

11
00:00:32.652 --> 00:00:34.146
&gt;&gt; Probably, a ChatGPT or something.

12
00:00:34.146 --> 00:00:34.811
&gt;&gt; Kind of it.

13
00:00:34.811 --> 00:00:36.563
&gt;&gt; [LAUGH]
&gt;&gt; Kind of it, so

14
00:00:36.563 --> 00:00:40.923
it just did math.random and converted that
into something I just found the oldest

15
00:00:40.923 --> 00:00:43.870
article I could find on the Internet.

16
00:00:43.870 --> 00:00:47.640
So you can see date one, we used that.

17
00:00:48.700 --> 00:00:51.480
Date one ends up being a date,
just through assignment.

18
00:00:52.570 --> 00:00:55.080
There is, we can call this inference.

19
00:00:55.080 --> 00:00:58.890
It's hardly inference here, cuz we know
exactly what type the value is here.

20
00:01:00.080 --> 00:01:04.200
Date two, let's say we wanted some
degree of flexibility for some reason.

21
00:01:04.200 --> 00:01:06.660
We can cast this to an any, right?

22
00:01:06.660 --> 00:01:12.400
We looked at as any,
we looked at as 79 before, as const.

23
00:01:12.400 --> 00:01:14.320
These are all varieties of casting.

24
00:01:16.100 --> 00:01:21.247
Sometimes, TypeScript will object to
you doing certain types of casts,

25
00:01:21.247 --> 00:01:24.909
and we saw that above when
we tried to do null as 79.

26
00:01:26.740 --> 00:01:32.098
So as long as these types are compatible,
reasonably compatible,

27
00:01:32.098 --> 00:01:35.580
types group will let
you perform this cast.

28
00:01:37.280 --> 00:01:42.601
That's why when we had the question,
it's actually a good question,

29
00:01:42.601 --> 00:01:48.464
when we had, can we cast 10 to a type
of 79, 10 and 79 are both numbers.

30
00:01:48.464 --> 00:01:51.130
Conceptually, it almost makes sense.

31
00:01:51.130 --> 00:01:56.070
I mean, we know if we're treating these
as literal types, they're not the same.

32
00:01:57.080 --> 00:01:58.880
Maybe one day,
TypeScript will object to that.

33
00:02:00.170 --> 00:02:04.400
Here's an example that
TypeScript will object to, and

34
00:02:04.400 --> 00:02:07.320
I'm gonna back this stuff up here.

35
00:02:07.320 --> 00:02:10.600
So we have a string, and
we're trying to cast that to a date.

36
00:02:10.600 --> 00:02:14.510
There is just no intersection
between string and date.

37
00:02:14.510 --> 00:02:16.150
They're so incompatible.

38
00:02:16.150 --> 00:02:20.710
TypeScript, it's almost like it's asking
us, are you really sure you wanna do this?

39
00:02:20.710 --> 00:02:23.500
These are very different.

40
00:02:23.500 --> 00:02:28.610
You're not gonna be able to pass
this value around safely as a date.

41
00:02:28.610 --> 00:02:32.598
And if we really wanted to tell
TypeScript we know what we're doing,

42
00:02:32.598 --> 00:02:34.860
we'd first cast it to an any.

43
00:02:34.860 --> 00:02:38.510
So you can cast it to a top
type back down to a date.

44
00:02:40.330 --> 00:02:44.886
You might do this in tests, where you're
trying to create erroneous value.

45
00:02:44.886 --> 00:02:49.862
And make sure that when it flows through
your code, it's caught at runtime,

46
00:02:49.862 --> 00:02:53.846
the way that you would expect
unexpected values to be caught,

47
00:02:53.846 --> 00:02:56.160
but this is funky code, to be sure.

48
00:02:57.660 --> 00:03:01.531
And this is why it's dangerous to
do casting here where TypeScript is

49
00:03:01.531 --> 00:03:05.535
perfectly happy to let us use a method
that's only available on dates,

50
00:03:05.535 --> 00:03:07.180
certainly not on strings.

51
00:03:07.180 --> 00:03:09.710
And at runtime, this will,
of course, blow up.

52
00:03:10.760 --> 00:03:14.970
It's cannot call to ISO string on type
string, you'll get some error like that.

53
00:03:16.010 --> 00:03:22.137
Cody in chat asks, is there a reason
to cast to any versus unknown?

54
00:03:22.137 --> 00:03:26.600
Unknown as another top type, which we'll
talk about in the intermediate course.

55
00:03:26.600 --> 00:03:28.410
All you need to know is
that it's a top type.

56
00:03:29.730 --> 00:03:33.190
For this technique,
that's the only thing that matters.

57
00:03:33.190 --> 00:03:37.534
There is no benefit to using one over
the other, you just must use a top type.

58
00:03:37.534 --> 00:03:41.337
You can always cast to a top type and
then back down, and

59
00:03:41.337 --> 00:03:46.630
there are some benefits to using
unknown which we'll explain later.

60
00:03:46.630 --> 00:03:52.050
But it's not gonna come through here,
they're both equal.

61
00:03:52.050 --> 00:03:55.760
They're both equivalent, cuz eventually,
it's coming back down to a date anyway.

