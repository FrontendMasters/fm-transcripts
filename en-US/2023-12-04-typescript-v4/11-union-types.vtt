WEBVTT

1
00:00:00.000 --> 00:00:02.079
Let's talk about union
types in TypeScript.

2
00:00:02.079 --> 00:00:04.209
Let's get back into TypeScript code.

3
00:00:04.209 --> 00:00:08.724
And I'm actually going to
switch back to VS code here, so

4
00:00:08.724 --> 00:00:12.499
we can get hands-on and
play with some things.

5
00:00:12.499 --> 00:00:17.054
So first, remember this concept of literal
types we dealt with earlier, right?

6
00:00:17.054 --> 00:00:22.243
Where humidity is literally the number 79,
it cannot be any other number.

7
00:00:22.243 --> 00:00:27.373
And we can create sets for
numbers from 1 through 5,

8
00:00:27.373 --> 00:00:31.594
and a set of even numbers
from 1 through 9.

9
00:00:31.594 --> 00:00:34.048
So here you go, 1 through 5.

10
00:00:34.048 --> 00:00:36.069
And we've got it spelled right out here.

11
00:00:36.069 --> 00:00:39.620
It's 1 or 2 or 3 or 4 or 5.

12
00:00:39.620 --> 00:00:43.460
By the way,
don't try to get clever and use.

13
00:00:43.460 --> 00:00:46.639
It's possible, but it's slow as hell.

14
00:00:46.639 --> 00:00:51.444
You can make TypeScript types
do arithmetic for you, but

15
00:00:51.444 --> 00:00:56.060
it involves a crazy degree
of what we're seeing here.

16
00:00:56.060 --> 00:00:59.510
Imagine every number from 1 through 1,000,
and

17
00:00:59.510 --> 00:01:02.289
then you end up with
a lot of types like this.

18
00:01:02.289 --> 00:01:03.509
It's possible to do this.

19
00:01:03.509 --> 00:01:10.209
It's useful for an example, but
don't do this at a large scale.

20
00:01:10.209 --> 00:01:12.800
So we've got our type
representing 1 through 5.

21
00:01:12.800 --> 00:01:18.855
And we can create a value here,
lowNumber, it's of type OneThroughFive.

22
00:01:18.855 --> 00:01:21.359
And we give it 3, it's perfectly happy.

23
00:01:21.359 --> 00:01:24.980
We try to give it 8 and
it says, 8 is not on the set.

24
00:01:24.980 --> 00:01:26.154
You can't give me an 8.

25
00:01:26.154 --> 00:01:28.300
I only accept 1 through 5.

26
00:01:28.300 --> 00:01:30.215
Here's our set of even numbers.

27
00:01:30.215 --> 00:01:34.165
We've got 2, 4, 6 and 8.

28
00:01:34.165 --> 00:01:36.558
We can initialize an even number with 2.

29
00:01:36.558 --> 00:01:41.975
It's perfectly happy, but if we try to
give it 5, not in the set, not allowed.

30
00:01:45.121 --> 00:01:53.369
So here's how we would create
a union type, evenOrLowNumber.

31
00:01:53.369 --> 00:01:59.189
So there's 1, 2, 3, 4, 5,
6, 8 just as promised.

32
00:01:59.189 --> 00:02:02.469
And I'm having to do
a little casting here,

33
00:02:02.469 --> 00:02:06.289
because, unfortunately,
this is kind of funny.

34
00:02:06.289 --> 00:02:08.423
TypeScript is a little bit too clever for

35
00:02:08.423 --> 00:02:11.234
me to be able to teach
this the way I want.

36
00:02:11.234 --> 00:02:16.805
It knows it's 5, it's gonna be,

37
00:02:16.805 --> 00:02:24.809
hopefully, I'm gonna get very specific for
you.

38
00:02:24.809 --> 00:02:27.989
So we're gonna leave it cast this way.

39
00:02:30.569 --> 00:02:33.665
But this is an example of a safe cast.

40
00:02:33.665 --> 00:02:39.989
It's a let declaration, 5 fits within
that set, it's perfectly fine.

41
00:02:39.989 --> 00:02:43.159
&gt;&gt; How do you express sets
besides enumerating the values?

42
00:02:43.159 --> 00:02:44.239
&gt;&gt; That's a great question.

43
00:02:44.239 --> 00:02:48.421
How do you express sets
without enumerating values?

44
00:02:48.421 --> 00:02:50.840
You would really use other types.

45
00:02:50.840 --> 00:02:54.685
So if you wanted to create something
that's like the set of all possible

46
00:02:54.685 --> 00:03:00.280
numbers, It's just this.

47
00:03:00.280 --> 00:03:01.499
You just do number.

48
00:03:01.499 --> 00:03:06.941
And if you wanted to add the set
of all strings, you could do that.

49
00:03:06.941 --> 00:03:10.189
Oops, sorry, it's not plural, right?

50
00:03:10.189 --> 00:03:13.319
This is the set of all
numbers from strings now.

51
00:03:13.319 --> 00:03:14.544
That's what this means.

52
00:03:14.544 --> 00:03:20.139
So it's a very relevant question, because
you would kind of compose types together.

53
00:03:20.139 --> 00:03:25.955
You can think of all the types that
exist as existing sets, right?

54
00:03:25.955 --> 00:03:28.072
Now, we're suffering a little bit here.

55
00:03:28.072 --> 00:03:32.977
Not suffering, but
JavaScript numbers are all doubles.

56
00:03:32.977 --> 00:03:37.908
We have no concept of an integer
here which is why I'm

57
00:03:37.908 --> 00:03:42.630
having to be very explicit
about creating these.

58
00:03:42.630 --> 00:03:44.862
It makes it relatable, but it's not.

59
00:03:44.862 --> 00:03:49.755
I'm trying to go against the grain here
in terms of the way JavaScript thinks

60
00:03:49.755 --> 00:03:51.139
about these things.

61
00:03:51.139 --> 00:03:54.764
But yeah,
you create sets by creating types.

62
00:03:54.764 --> 00:03:57.891
And you can define types
in terms of other types.

63
00:03:59.557 --> 00:04:03.199
And we'll talk more about this
syntax here, in later chapters.

64
00:04:03.199 --> 00:04:08.070
This is called the type alias,
where we're defining a type.

65
00:04:08.070 --> 00:04:12.789
So this is the name of the type and
then this is how it's defined.

66
00:04:12.789 --> 00:04:14.964
We'll get much deeper into that later on.

67
00:04:14.964 --> 00:04:21.068
But for right now, observe that it works.

68
00:04:21.068 --> 00:04:22.266
Another one.

69
00:04:24.739 --> 00:04:27.664
&gt;&gt; So if numbers in JavaScript
are actually doubles,

70
00:04:27.664 --> 00:04:31.209
isn't it dangerous to write
programs which do math on money?

71
00:04:31.209 --> 00:04:34.708
I've heard double and
precise numbers are a no-no.

72
00:04:34.708 --> 00:04:39.706
&gt;&gt; [LAUGH] I'm a very
good person to ask about

73
00:04:39.706 --> 00:04:44.561
doing math with the currency amounts.

74
00:04:44.561 --> 00:04:49.399
I would say in this case,
you can represent a 1,

75
00:04:49.399 --> 00:04:53.176
a 2, a 3, a 4, and a 5 as doubles.

76
00:04:53.176 --> 00:04:55.849
They're very simple when
represented on the screen.

77
00:04:55.849 --> 00:05:00.668
It's like, you do this and
make everyone feel a little better,

78
00:05:00.668 --> 00:05:04.249
cuz JavaScript's perfectly
happy to do this.

79
00:05:04.249 --> 00:05:06.164
It's just a shorthand.

80
00:05:06.164 --> 00:05:11.113
The fact that I'm writing no decimal
point on the screen does not change

81
00:05:11.113 --> 00:05:15.165
the fact that these are really
doubles behind the scenes.

82
00:05:15.165 --> 00:05:17.877
But think of this more
like an AOM kind of,

83
00:05:17.877 --> 00:05:23.239
where it's got a set of specific values
that it allows, which is perfectly fine.

84
00:05:23.239 --> 00:05:28.886
It's less about the precision here.

85
00:05:28.886 --> 00:05:30.709
We're not necessarily doing math here.

86
00:05:30.709 --> 00:05:33.149
We're just observing how sets work.

87
00:05:33.149 --> 00:05:35.063
But good question.

88
00:05:35.063 --> 00:05:38.894
&gt;&gt; And you might get into this later,
I'm sure you probably well.

89
00:05:38.894 --> 00:05:42.189
Can we use expressions in our types?

90
00:05:42.189 --> 00:05:47.499
&gt;&gt; What kinds of it,
it's unclear what kinds of expressions.

91
00:05:47.499 --> 00:05:50.119
&gt;&gt; Yeah, I ask for clarification on that.

92
00:05:50.119 --> 00:05:52.289
&gt;&gt; This is an expression.

93
00:05:52.289 --> 00:05:54.199
This whole thing is a type expression.

94
00:05:54.199 --> 00:05:56.657
We have five types here and

95
00:05:56.657 --> 00:06:02.479
we're using a union type operator
to operate on those types.

96
00:06:02.479 --> 00:06:03.479
It's an expression.

97
00:06:03.479 --> 00:06:06.195
&gt;&gt; Did you say arithmetic and

98
00:06:06.195 --> 00:06:11.638
hyper expressions is a bad
idea across the board or?

99
00:06:11.638 --> 00:06:14.771
&gt;&gt; Arithmetic and
hyper expressions is possible, but

100
00:06:14.771 --> 00:06:17.059
you have to get really exotic with it.

101
00:06:17.059 --> 00:06:22.037
I would put it in the same category
where I believe it's possible

102
00:06:22.037 --> 00:06:25.830
in Ruby to write programs
that are 90% emoji.

103
00:06:25.830 --> 00:06:29.230
I wouldn't necessarily advise doing it,
but it's possible.

104
00:06:29.230 --> 00:06:32.838
Maybe like a hackathon thing where you're
interested in pushing the limits of what

105
00:06:32.838 --> 00:06:33.360
you can do.

106
00:06:33.360 --> 00:06:37.231
But what you end up having to
do to make that work would be,

107
00:06:37.231 --> 00:06:41.601
not going from 1 through 5 but
you go from 1 through 1000.

108
00:06:41.601 --> 00:06:47.536
And then you'd need some mapping of like,
what is the minus 1 of every number?

109
00:06:47.536 --> 00:06:52.339
999 is subtract 1 from 1,000, you get 999.

110
00:06:52.339 --> 00:06:59.511
And then you could recursively apply
that to subtract multiple 1s from 1,000.

111
00:06:59.511 --> 00:07:02.849
It's incredibly inefficient.

112
00:07:02.849 --> 00:07:08.349
&gt;&gt; So if you thought you needed a type
of all even numbers or something.

113
00:07:08.349 --> 00:07:13.049
&gt;&gt; It's not possible to define it,
literally the type of all even numbers.

114
00:07:13.049 --> 00:07:16.590
TypeScript does not give you
a way of doing that yet.

115
00:07:16.590 --> 00:07:17.543
But this is okay.

116
00:07:17.543 --> 00:07:19.673
This is five members.

117
00:07:19.673 --> 00:07:25.105
So really, that's a question of
something called cardinality,

118
00:07:25.105 --> 00:07:29.666
which is the number of members in a set or
in a dimension.

119
00:07:29.666 --> 00:07:33.807
And here, we would say we have a
cardinality of five, it's perfectly fine.

120
00:07:33.807 --> 00:07:37.632
We're not going to melt all of our CPU
cores with TypeScript trying to figure

121
00:07:37.632 --> 00:07:38.719
out what this means.

122
00:07:38.719 --> 00:07:43.353
But as soon as you start trying
to get into the general case,

123
00:07:43.353 --> 00:07:49.009
you would need to exhaustively go from
everything between min number and

124
00:07:49.009 --> 00:07:55.054
max number allowable in JavaScript and
explicitly create every even value.

125
00:07:55.054 --> 00:08:00.349
Maybe you could do it but don't.

126
00:08:00.349 --> 00:08:01.284
[LAUGH]

