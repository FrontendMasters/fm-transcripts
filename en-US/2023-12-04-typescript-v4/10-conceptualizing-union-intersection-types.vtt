WEBVTT

1
00:00:00.520 --> 00:00:03.698
Next we're gonna talk about union and
intersection types.

2
00:00:03.698 --> 00:00:08.666
We've seen or and and for
types a couple of times, really just or

3
00:00:08.666 --> 00:00:12.260
so far, but
we're gonna dive deep into them.

4
00:00:12.260 --> 00:00:16.815
We're gonna learn how to understand
what this means, and we're gonna lean

5
00:00:16.815 --> 00:00:22.540
heavily on this mental model of thinking
about types as sets of allowed values.

6
00:00:22.540 --> 00:00:26.412
So just to help us understand
what's going on, so

7
00:00:26.412 --> 00:00:31.962
we can we can build our mental model
with an evidence-based approach.

8
00:00:31.962 --> 00:00:36.442
Where we can kind of create situations for
TypeScript to tell us stuff, and

9
00:00:36.442 --> 00:00:40.540
we can prove to ourselves that
it works in a particular way.

10
00:00:40.540 --> 00:00:44.809
Let's create two sets here,
we've got evens, even numbers under 10,

11
00:00:44.809 --> 00:00:48.826
and then we've got 1 through 5,
which is the numbers 1 through 5.

12
00:00:48.826 --> 00:00:50.840
These are two sets.

13
00:00:50.840 --> 00:00:54.030
And if we drew these on a Venn diagram,
they would look like this, right?

14
00:00:54.030 --> 00:00:58.569
2 and 4 are in both sets, but
low numbers has 1, 3, and

15
00:00:58.569 --> 00:01:04.770
5 they're not even, and evens has 6 and
8, which are both greater than 5.

16
00:01:04.770 --> 00:01:08.719
So those are not shared by the sets.

17
00:01:08.719 --> 00:01:16.050
Union types, this is or
in TypeScript for types.

18
00:01:16.050 --> 00:01:20.658
TypeScript uses the pipe symbol for
this, which makes it easy to remember,

19
00:01:20.658 --> 00:01:25.410
because it's kind of conceptually related
to double pipe, which we know from

20
00:01:25.410 --> 00:01:30.150
JavaScript is how we can express an or
logical Boolean operator.

21
00:01:30.150 --> 00:01:35.148
In the above example, if we wanted to
create the set that is represented

22
00:01:35.148 --> 00:01:39.980
by 1 through 5 or evens,
what effectively we're saying is you're

23
00:01:39.980 --> 00:01:44.590
allowed in this set if you belong
to either of these sets, right?

24
00:01:44.590 --> 00:01:49.027
If the bouncer's at the door to let each
value into the set, if you're less than 5,

25
00:01:49.027 --> 00:01:53.217
you're good, if you're 1 through 5,
you're good, also if you're even,

26
00:01:53.217 --> 00:01:54.930
you're also good.

27
00:01:54.930 --> 00:01:59.720
We accept all of these values, and
that's why we get this set here.

28
00:01:59.720 --> 00:02:04.105
This is what you would see in
TypeScript as well 1, 2, 3, 4, 5, 6,

29
00:02:04.105 --> 00:02:08.510
8, you could think of this almost like
we're taking all of the first set.

30
00:02:08.510 --> 00:02:12.879
And then Evens, we're gonna go through and
we'll check to see if something's already

31
00:02:12.879 --> 00:02:16.620
in the set, and if it's already in there,
we won't do anything.

32
00:02:16.620 --> 00:02:22.670
But it's gonna find 6 and 8, and
it's like, I'm gonna add these to the set.

33
00:02:22.670 --> 00:02:26.450
It's almost like some for loop behavior
is happening behind the scenes.

34
00:02:28.710 --> 00:02:32.142
So one thing that I want
us to ask ourselves here,

35
00:02:32.142 --> 00:02:35.675
there are two different
modes we can think about.

36
00:02:35.675 --> 00:02:42.275
There's what values is
a type willing to accept?

37
00:02:42.275 --> 00:02:46.799
And then on the other hand,
what guarantees do we have,

38
00:02:46.799 --> 00:02:52.170
what can we depend on being true for
every member of that set?

39
00:02:52.170 --> 00:02:56.527
So for example, here,
well what values can it accept,

40
00:02:56.527 --> 00:03:00.560
anything in either set,
but what can we assume?

41
00:03:00.560 --> 00:03:04.999
Well, if we needed to pass something
that was of this type to a function

42
00:03:04.999 --> 00:03:09.990
that only wanted even numbers, we
couldn't do that, there are odds in here.

43
00:03:09.990 --> 00:03:15.061
There's a possibility that it's
the number 1, that's not even, so

44
00:03:15.061 --> 00:03:20.480
you can't pass for an even if you're
the mix of these two sets together.

45
00:03:20.480 --> 00:03:25.930
And you can't pass for a number between 1
and 5 either, because you could be 6 or 8.

46
00:03:25.930 --> 00:03:29.138
So there's sort of two
ways to think about it,

47
00:03:29.138 --> 00:03:33.270
what values are allowed versus
what guarantees do we have?

48
00:03:34.270 --> 00:03:36.000
That'll be a common theme here.

49
00:03:36.000 --> 00:03:40.804
So let's think about intersection types,
this is the opposite, well, this is and

50
00:03:40.804 --> 00:03:41.490
for types.

51
00:03:41.490 --> 00:03:46.370
It's the opposite in some way, which I'll
save that for the fancy finish here.

52
00:03:46.370 --> 00:03:51.262
You can think of this as and for types,
TypeScript uses this ampersand, or

53
00:03:51.262 --> 00:03:52.640
and operator.

54
00:03:52.640 --> 00:03:57.204
And again, like you probably use and
and in logical Boolean operators and

55
00:03:57.204 --> 00:04:01.390
conditions if you're just
writing regular JavaScript.

56
00:04:01.390 --> 00:04:04.336
So hopefully easy to remember there, and

57
00:04:04.336 --> 00:04:08.380
let's look at the set 1 through 5 and
evens.

58
00:04:08.380 --> 00:04:12.660
What we would end up with is this set,
we'd end up with this set, right?

59
00:04:12.660 --> 00:04:19.656
It's only 2 and 4, it's only
the things that are shared by the sets.

60
00:04:19.656 --> 00:04:25.091
When we're saying and, we're not saying
all of the values in this set and

61
00:04:25.091 --> 00:04:27.647
all of the values in the other set.

62
00:04:27.647 --> 00:04:33.340
We're saying, all of the values that
are in this set and the other set, right?

63
00:04:33.340 --> 00:04:37.720
And what passes is 2 and 4,
you have to be a member of both.

64
00:04:38.960 --> 00:04:43.485
So, sometimes it's easy to get
confused about which is the and, and

65
00:04:43.485 --> 00:04:47.162
which is the or,
why do we call it an intersection type?

66
00:04:47.162 --> 00:04:48.921
When we're using the and sign,

67
00:04:48.921 --> 00:04:52.388
right, it makes us think that
it's the two bubbles together.

68
00:04:52.388 --> 00:04:57.294
Just remember that when we describe types,
we're describing a requirement,

69
00:04:57.294 --> 00:04:59.060
a constraint, if you will.

70
00:05:00.100 --> 00:05:04.917
And what we're saying here is
you must pass both constraints.

71
00:05:04.917 --> 00:05:09.670
There's two bouncers in a row, you've
gotta be in both or we don't let you in.

72
00:05:09.670 --> 00:05:12.439
Whereas up here,
look either, either works,

73
00:05:12.439 --> 00:05:16.802
maybe there are two doors with a bouncer
for each set, and you can try both,

74
00:05:16.802 --> 00:05:19.630
and you get in one way or
the other, right?

75
00:05:19.630 --> 00:05:21.870
So that's why this is the smaller set.

76
00:05:21.870 --> 00:05:25.435
Now if we think about what
values are allowed, well,

77
00:05:25.435 --> 00:05:29.970
it's very strict here,
you have to meet both requirements.

78
00:05:29.970 --> 00:05:34.462
But in terms of what we can assume
about these values, well, if we had

79
00:05:34.462 --> 00:05:39.430
a function that wanted even numbers,
could we use this, are 2 and 4 even?

80
00:05:40.450 --> 00:05:44.338
Yes, and
if we had a function that demanded that we

81
00:05:44.338 --> 00:05:48.515
only pass numbers between 1 and
5, can we use this?

82
00:05:48.515 --> 00:05:53.071
Sure, so
we kind of get the benefits of both sets,

83
00:05:53.071 --> 00:05:58.389
we can pass for
both because we're in that intersection.

84
00:05:58.389 --> 00:06:01.096
So it's sort of two different
ways to think about this.

85
00:06:01.096 --> 00:06:04.441
What is the type willing
to accept as a value, and

86
00:06:04.441 --> 00:06:09.580
then what guarantees do we have about
every single member of that set?

87
00:06:09.580 --> 00:06:13.460
And in this case, it's both even and

88
00:06:13.460 --> 00:06:18.598
digits between 1 and
5 meets both requirements

89
00:06:21.866 --> 00:06:25.492
So there you go,
values allowed in the set,

90
00:06:25.492 --> 00:06:29.412
there's your first piece
of the mental model.

