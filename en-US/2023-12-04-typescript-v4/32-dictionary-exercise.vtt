WEBVTT

1
00:00:00.395 --> 00:00:04.420
Finally, I want to give you
some further research for

2
00:00:04.420 --> 00:00:09.163
further learning if you'd like to
choose to do it as homework or

3
00:00:09.163 --> 00:00:12.663
as an exercise that you
can do in your own time.

4
00:00:12.663 --> 00:00:15.794
There's one last challenge
at the end of the course.

5
00:00:15.794 --> 00:00:20.299
And it is taking what we've
just used to define our

6
00:00:20.299 --> 00:00:25.342
listToDict generic function,
to build map, filter,

7
00:00:25.342 --> 00:00:29.974
and reduce functions that
apply to dictionaries.

8
00:00:29.974 --> 00:00:33.576
You're probably familiar using
these methods on arrays.

9
00:00:33.576 --> 00:00:37.071
And we're just going to create
the dictionary equivalent because they're

10
00:00:37.071 --> 00:00:38.004
both collections.

11
00:00:38.004 --> 00:00:41.086
And so it's sort of the same concept, but

12
00:00:41.086 --> 00:00:44.533
instead of iterating
through a list in order.

13
00:00:44.533 --> 00:00:48.159
We're going to iterate over
key value pairs and you know,

14
00:00:48.159 --> 00:00:52.833
your map function will create a new
dictionary with some transformation.

15
00:00:52.833 --> 00:00:56.655
Your filter will filter
through key value pairs,

16
00:00:56.655 --> 00:01:01.028
your reduce function will
iterate over key value pairs.

17
00:01:01.028 --> 00:01:04.624
In a dictionary and
give you a reduced value, and

18
00:01:04.624 --> 00:01:10.782
it's like the caller's decision with their
reducer to define what that value is.

19
00:01:10.782 --> 00:01:14.241
So, here's the starting point code and
this is just sample data.

20
00:01:14.241 --> 00:01:18.508
But I'd like you to write these
functions such that they would work for

21
00:01:18.508 --> 00:01:20.474
a variety of different inputs.

22
00:01:20.474 --> 00:01:25.100
I've given you a dictionary of fruits,
that have color and mass.

23
00:01:25.100 --> 00:01:27.121
The mass is there for the reduce example,

24
00:01:27.121 --> 00:01:30.428
if you wanted to sort of sum up
the mass of a bunch of different stuff.

25
00:01:30.428 --> 00:01:35.791
That would be a great example of getting
a single value out of a group of things.

26
00:01:35.791 --> 00:01:39.051
Here's an interface that
describes a dictionary.

27
00:01:39.051 --> 00:01:44.526
We're using a type param here, so you
could say this is a dictionary of fruits,

28
00:01:44.526 --> 00:01:47.728
or something like that,
just by passing in T.

29
00:01:47.728 --> 00:01:51.394
And you can fill in these functions, so

30
00:01:51.394 --> 00:01:55.404
mapDict, filterDict, and reduceDict.

31
00:01:55.404 --> 00:01:59.530
As usual,
don't mess with stuff below this line.

32
00:01:59.530 --> 00:02:03.497
This is a test suite, you've got some
positive and negative test cases.

33
00:02:03.497 --> 00:02:05.608
Here's an example of a negative test case.

34
00:02:05.608 --> 00:02:10.514
This should fail, but
your goal would be to write

35
00:02:10.514 --> 00:02:15.429
those functions until all
of these things pass.

36
00:02:15.429 --> 00:02:19.763
And there's a spoiler down here, if you
click this, you'll see the solution.

37
00:02:19.763 --> 00:02:21.795
So why don't you give this a shot?

38
00:02:21.795 --> 00:02:26.353
See how far you get, and then come back,
compare with the solution, and

39
00:02:26.353 --> 00:02:29.210
see if we wrote the functions
in the same way.

