WEBVTT

1
00:00:00.180 --> 00:00:04.710
So we can create that union
type as we did before, right?

2
00:00:04.710 --> 00:00:07.667
We're using the or operator here,
I explained the casting a little bit.

3
00:00:07.667 --> 00:00:13.022
You're going to see union
types a lot in your programs.

4
00:00:13.022 --> 00:00:16.706
And the main reason for
that has to do with control flow.

5
00:00:16.706 --> 00:00:21.862
So we talked a little bit about
explicitly typing function return values.

6
00:00:21.862 --> 00:00:24.199
But anytime you have a branch like this,

7
00:00:24.199 --> 00:00:27.842
where we have a coin flip and
it's either heads or it's tails,

8
00:00:27.842 --> 00:00:33.029
those are two different branches within
your function, right, there's an if-else.

9
00:00:33.029 --> 00:00:37.095
If we wanted to represent this as,

10
00:00:37.095 --> 00:00:42.145
not just returning a string like this, but

11
00:00:42.145 --> 00:00:49.030
we could say, this returns heads or
tails, there you go.

12
00:00:49.030 --> 00:00:54.284
So this is like, when thinking
about union and intersection types,

13
00:00:54.284 --> 00:00:58.190
it's so
much more common to see these union types.

14
00:00:58.190 --> 00:01:01.269
I expect in your day-to-day
use of TypeScript,

15
00:01:01.269 --> 00:01:04.440
it's gonna be at least
like a 100 to 1 ratio.

16
00:01:04.440 --> 00:01:08.060
These are overwhelmingly
the more common thing.

17
00:01:08.060 --> 00:01:12.736
And it just has to do with control flow
and different possibilities happening,

18
00:01:12.736 --> 00:01:16.039
depending on which branch of
code you end up going down.

19
00:01:17.120 --> 00:01:23.500
So here's a more complicated example,
so here's heads or tails.

20
00:01:23.500 --> 00:01:26.710
In fact, we could do this more,
aah, I'll leave it the way it is.

21
00:01:26.710 --> 00:01:30.000
You could also do this
just to see like this.

22
00:01:30.000 --> 00:01:35.122
This would let it infer that it's not
just a string, it's the string tails.

23
00:01:36.981 --> 00:01:38.850
So here's the outcome of a coin flip.

24
00:01:39.940 --> 00:01:43.924
Now, let's look at a slightly
more complicated example,

25
00:01:43.924 --> 00:01:48.790
and this is gonna build on what we
saw in the last chapter with tuples.

26
00:01:48.790 --> 00:01:54.350
Remember, I told you I use tuples of
size 2 all the time in my programs?

27
00:01:54.350 --> 00:01:55.940
Here's an example.

28
00:01:55.940 --> 00:02:01.011
So I, let's say, I have some random
processing task like, let's say, adding

29
00:02:01.011 --> 00:02:06.440
a user to my address book, and maybe
this involves an API call or something.

30
00:02:06.440 --> 00:02:13.360
So I've got a success and a fail example,
a successful result and a failing result.

31
00:02:13.360 --> 00:02:18.380
The first element of the tupple is
the string success, or the string error.

32
00:02:18.380 --> 00:02:21.043
And then depending on which
case I'm dealing with,

33
00:02:21.043 --> 00:02:23.897
we could end up with this
object that has name and email.

34
00:02:23.897 --> 00:02:28.742
Or we could end up with, literally,
like an instance of the error class,

35
00:02:28.742 --> 00:02:30.945
something that might be thrown.

36
00:02:32.768 --> 00:02:37.440
So let's define a function
called maybeGetUserInfo.

37
00:02:37.440 --> 00:02:43.285
Which flips a coin and
if we get heads, it'll return success,

38
00:02:43.285 --> 00:02:48.620
if we get tails,
it will return the failure result.

39
00:02:48.620 --> 00:02:52.640
And we can see in the outcome here,
we've got, here's the success type.

40
00:02:53.640 --> 00:02:57.340
There's that tupple,
here's the string, here's the object.

41
00:02:59.240 --> 00:03:02.096
And then here's the failing case,
it's error, and

42
00:03:02.096 --> 00:03:05.345
then here's my instance of error,
that's the type error.

43
00:03:07.669 --> 00:03:12.060
So, Great,
we can represent this as a tuple.

44
00:03:12.060 --> 00:03:17.066
But, Outcome2.,

45
00:03:18.829 --> 00:03:23.776
All right, so I've got my array here,
I've got a 0 position and a 1 position, so

46
00:03:23.776 --> 00:03:26.123
it knows I've got two elements there.

47
00:03:26.123 --> 00:03:28.411
Let's reach for number 1.

48
00:03:28.411 --> 00:03:29.800
What do we got there?

49
00:03:29.800 --> 00:03:32.360
Literally, just the property name.

50
00:03:32.360 --> 00:03:35.310
That's all I can access on this thing,
name.

51
00:03:36.390 --> 00:03:40.148
And that's because while I
have a name here, right,

52
00:03:40.148 --> 00:03:43.980
errors also have a property called name.

53
00:03:43.980 --> 00:03:48.030
And if we think back to our
Venn diagram here, right,

54
00:03:48.030 --> 00:03:52.980
remember we said a union type allows for
any of these values to be,

55
00:03:52.980 --> 00:03:56.326
whoops, to be present, that's perfect.

56
00:03:56.326 --> 00:04:00.627
But in terms of what assumptions we
can make, how can we treat this?

57
00:04:00.627 --> 00:04:04.961
Well, we can't be sure it's an error and
we can't be sure it's that object with

58
00:04:04.961 --> 00:04:09.480
the property name and email, so you kind
of get the lowest common denominator.

59
00:04:09.480 --> 00:04:15.975
You get anything that's on both and
that's just name.

60
00:04:15.975 --> 00:04:22.350
So it's a very accepting type, but
it's not very useful in its current form.

61
00:04:23.880 --> 00:04:27.584
And so we need to learn how
to work with types like this.

62
00:04:31.477 --> 00:04:34.110
Let's introduce a bunch of functions here.

63
00:04:34.110 --> 00:04:37.706
So we've got print even,
which only takes even, right?

64
00:04:37.706 --> 00:04:42.090
This takes 2,468,
that's the only thing allowed here.

65
00:04:42.090 --> 00:04:45.400
We've got print lowNum,
which only takes a digit OneThroughFive.

66
00:04:46.900 --> 00:04:50.959
We've got printEvenNumberUnder5,
which literally,

67
00:04:50.959 --> 00:04:56.352
the only thing this will be happy with
is 2 or 4, very restricted function.

68
00:04:56.352 --> 00:04:58.930
And then we've got printNumber,
it'll take any number.

69
00:04:58.930 --> 00:05:02.288
So that'll work with everything
we've been discussing so far,

70
00:05:02.288 --> 00:05:05.829
as well as all of the doubles in
between those nice round numbers, and

71
00:05:05.829 --> 00:05:09.180
all of the other doubles that
you can create in JavaScript.

72
00:05:09.180 --> 00:05:14.509
So, all right,
let's create our value x, which is,

73
00:05:14.509 --> 00:05:19.210
I've reversed the orders of these now,
right?

74
00:05:19.210 --> 00:05:21.343
So now look at how the type
is serialized on the screen.

75
00:05:21.343 --> 00:05:26.531
It's 2, 4, 6, 8, and
then the missing things from 1, 3, and 5.

76
00:05:26.531 --> 00:05:27.880
So there you see evidence.

77
00:05:27.880 --> 00:05:30.640
It's sort of like one by one,
putting these in.

78
00:05:34.272 --> 00:05:38.422
So let's look at what this type,

79
00:05:38.422 --> 00:05:43.820
evenOrLowNumber, what does it accept?

80
00:05:43.820 --> 00:05:49.133
In fact, I'll leave this commented out
because it already exists somewhere,

81
00:05:51.663 --> 00:05:53.770
In a higher-up example.

82
00:05:53.770 --> 00:05:56.796
So it accepts an even,
it accepts a lowNumber,

83
00:05:56.796 --> 00:06:00.980
it accepts an evenOrLowNumber,
very accepting.

84
00:06:00.980 --> 00:06:04.614
But when we try to pass it
into these functions, well,

85
00:06:04.614 --> 00:06:07.340
it's not guaranteed to be even.

86
00:06:07.340 --> 00:06:08.340
And look at this.

87
00:06:08.340 --> 00:06:12.650
It says, in our error,
one is not assignable to type evens.

88
00:06:12.650 --> 00:06:17.524
It's almost like, it's going
through the set and it's like, 2,

89
00:06:17.524 --> 00:06:22.750
you're fine, 4, you're fine,
6 and 8, both fine, 1, problem.

90
00:06:23.960 --> 00:06:25.230
And then it bails.

91
00:06:25.230 --> 00:06:28.120
That's enough for
it to know this will not type check.

92
00:06:30.327 --> 00:06:37.538
PrintLowNumber, Well, it's okay with 2 and
4, but once it gets to 6, bails.

93
00:06:37.538 --> 00:06:39.210
It says, this is not gonna work.

94
00:06:39.210 --> 00:06:40.884
Just the fact that you have a 6 in there,

95
00:06:40.884 --> 00:06:43.340
I don't even care about
the rest of the set.

96
00:06:43.340 --> 00:06:45.860
I already know you're
not going to type check.

97
00:06:45.860 --> 00:06:50.960
PrintEvenNumberUnder5, all right, 2 and 4
are fine, 6 is where it hits the problem.

98
00:06:50.960 --> 00:06:53.250
And then finally,
printNumber, It's fine there.

99
00:06:53.250 --> 00:06:56.360
It looks through every
element of the set and says,

100
00:06:56.360 --> 00:06:59.629
looks like y'all are numbers,
I'm fine with that.

101
00:06:59.629 --> 00:07:04.598
&gt;&gt; When you say heads and tails is
a return type, will e be a valid return?

102
00:07:06.126 --> 00:07:07.680
&gt;&gt; Well, what be a valid return?

103
00:07:08.890 --> 00:07:10.050
&gt;&gt; E.

104
00:07:10.050 --> 00:07:11.110
&gt;&gt; E?

105
00:07:11.110 --> 00:07:16.154
&gt;&gt; String error, I think you
&gt;&gt; Heads and

106
00:07:16.154 --> 00:07:18.270
tails are a valid return type.

107
00:07:18.270 --> 00:07:21.870
So, let me see if I can
answer that question.

108
00:07:21.870 --> 00:07:25.496
If I've said,
I'm gonna return heads or tails, and

109
00:07:25.496 --> 00:07:29.509
I do this I'm gonna get busted,

110
00:07:29.509 --> 00:07:34.680
literally nothing else other than
the string heads and tails will do.

111
00:07:34.680 --> 00:07:38.805
And TypeScript's even clever about trying
to correct a little misspelling that I

112
00:07:38.805 --> 00:07:40.670
have here, like, did I mean tails?

113
00:07:42.560 --> 00:07:45.730
So, yeah, that one,
I can answer, literally,

114
00:07:45.730 --> 00:07:47.850
nothing other than this or this.

115
00:07:47.850 --> 00:07:52.560
Now, I could always
return tails That's fine.

116
00:07:52.560 --> 00:07:55.590
I can say, there's some possibility
that it could be heads.

117
00:07:55.590 --> 00:08:00.542
Maybe I'm designing for the future where
I will introduce heads as a concept, and

118
00:08:00.542 --> 00:08:03.938
I don't wanna break people
who consume this function.

119
00:08:03.938 --> 00:08:08.948
They should prepare for the possibility
that heads will exist, I could do that.

120
00:08:08.948 --> 00:08:13.898
But I certainly can't do anything,
like, what we would say here is that,

121
00:08:13.898 --> 00:08:17.042
what we're actually
returning is just tails,

122
00:08:17.042 --> 00:08:21.190
and the contract we have to
live up to is heads or tails.

123
00:08:21.190 --> 00:08:25.417
And so the set, the string tails,
it fits within heads and tails,

124
00:08:25.417 --> 00:08:27.920
it is type equivalent.

125
00:08:27.920 --> 00:08:31.090
Next, we're going to talk about
narrowing with type cards.

126
00:08:31.090 --> 00:08:39.360
Because we can see a union type allows us
to accept a variety of different values.

127
00:08:39.360 --> 00:08:44.368
But as we saw earlier,
when we were looking at the second element

128
00:08:44.368 --> 00:08:49.204
of our tuple up here, right,
we only had this name property.

129
00:08:49.204 --> 00:08:53.994
So we're gonna talk a little bit about
how you can use a union type to do

130
00:08:53.994 --> 00:08:56.230
some more useful things.

131
00:08:56.230 --> 00:08:59.030
And really,
it's about narrowing with type_guards.

132
00:08:59.030 --> 00:09:02.279
We mentioned type_guards a little
bit earlier in the course.

133
00:09:02.279 --> 00:09:06.180
Remember, we used typeof
something equals number, or

134
00:09:06.180 --> 00:09:09.089
it's not undefined, so we used typeof.

135
00:09:10.370 --> 00:09:14.936
There's another built in JavaScript
concept that is regarded as

136
00:09:14.936 --> 00:09:18.430
a type_guard by TypeScript, instanceof.

137
00:09:18.430 --> 00:09:22.180
So I've got my first and
my second elements of this tuple.

138
00:09:22.180 --> 00:09:24.617
And just remind yourselves that this was,

139
00:09:24.617 --> 00:09:27.668
it's either this success or
this fail case, right?

140
00:09:27.668 --> 00:09:32.400
We've got the string, and then a different
value here, depending on the string.

141
00:09:32.400 --> 00:09:38.019
So, if the second element of
the tuple is an instanceof error,

142
00:09:38.019 --> 00:09:42.800
note that the type in this
branch of code is error.

143
00:09:42.800 --> 00:09:45.451
So we're no longer in
a place where we're saying,

144
00:09:45.451 --> 00:09:47.870
I can only access this name property,
right?

145
00:09:47.870 --> 00:09:52.820
Now we get the full glory of everything
that's on error, which is a stack.

146
00:09:52.820 --> 00:09:55.960
Stack trace might be there,
a message and a name.

147
00:09:55.960 --> 00:10:00.870
And then when we have this else block,
well, what's left?

148
00:10:00.870 --> 00:10:02.560
What's left after error?

149
00:10:02.560 --> 00:10:04.540
It's this object.

150
00:10:04.540 --> 00:10:08.411
So you can kind of think of this
like a pie chart if you want,

151
00:10:08.411 --> 00:10:11.492
where part of your pie
is like this error type,

152
00:10:11.492 --> 00:10:16.140
part of your pie is this object
with a name and an email property.

153
00:10:16.140 --> 00:10:18.382
And when you have a conditional like this,

154
00:10:18.382 --> 00:10:22.305
you're almost taking slices of
the pie out, chunks, and saying, okay,

155
00:10:22.305 --> 00:10:26.260
I'm gonna handle the possibility
that this is an error.

156
00:10:26.260 --> 00:10:27.215
And then down here,

157
00:10:27.215 --> 00:10:31.070
you get everything that's left that
you haven't handled specifically.

158
00:10:31.070 --> 00:10:33.540
And in this case, it's this object.

159
00:10:33.540 --> 00:10:37.815
But if you had more union types here,
right, if it's this object or

160
00:10:37.815 --> 00:10:41.340
another object or a date,
you could use an instanceof,

161
00:10:41.340 --> 00:10:44.042
you can handle all of those specifically.

162
00:10:44.042 --> 00:10:48.162
And then what's left in your else block,
you'll see just anything that hasn't been

163
00:10:48.162 --> 00:10:51.440
handled yet cuz that's the only
way you get to the else.

164
00:10:51.440 --> 00:10:52.290
Does that make sense?

165
00:10:53.510 --> 00:10:56.920
Good, okay, so
this is a way you could use a type_guard.

166
00:10:56.920 --> 00:11:02.410
There's another thing you could do,
and it's called a discriminated_union.

167
00:11:03.480 --> 00:11:05.619
It's a fancy name for a technique.

168
00:11:07.811 --> 00:11:10.930
So we're still dealing
with that same tuple.

169
00:11:10.930 --> 00:11:14.010
We still have the first and
the second element here, right?

170
00:11:14.010 --> 00:11:19.150
The first element, if we look at it,
we've got success or error.

171
00:11:19.150 --> 00:11:23.176
And the second element,
we've got this object or error.

172
00:11:23.176 --> 00:11:27.133
But TypeScript actually has stored
more information, it's not telling us.

173
00:11:27.133 --> 00:11:31.517
If we just hovered over these,
we might assume that, well,

174
00:11:31.517 --> 00:11:36.330
the first could be success, and
then the second could be an error.

175
00:11:36.330 --> 00:11:39.584
So maybe we'll allow success
in the first position and

176
00:11:39.584 --> 00:11:42.140
an error instance in the second position.

177
00:11:42.140 --> 00:11:46.834
But TypeScript knows
that it's really this.

178
00:11:46.834 --> 00:11:51.070
You get this pair or the other pair,
you don't mix and match.

179
00:11:52.240 --> 00:11:55.020
And we'll see that with
discriminated_unions.

180
00:11:55.020 --> 00:11:56.470
So here, look at what we're doing?

181
00:11:56.470 --> 00:12:03.842
We're saying, if the first is equal
to error, look at the second.

182
00:12:03.842 --> 00:12:06.399
So it knows they're connected,

183
00:12:06.399 --> 00:12:11.985
it knows we're in that first situation,
right, the error situation.

184
00:12:11.985 --> 00:12:14.157
And down here, what's left?

185
00:12:15.795 --> 00:12:17.730
A case where it's successful.

186
00:12:17.730 --> 00:12:22.590
So what we would say is, this is
a discriminated_union because we're using

187
00:12:22.590 --> 00:12:25.820
the first element of
the tuple as a discriminator.

188
00:12:25.820 --> 00:12:30.588
We're using that as a way to,
it's almost like a signal that we can

189
00:12:30.588 --> 00:12:35.114
use to sort of take a whole larger
picture, a larger scenario.

190
00:12:35.114 --> 00:12:39.998
And we're using that first position as
an indicator of what the whole tuple

191
00:12:39.998 --> 00:12:43.186
value must be,
depending on the first element.

192
00:12:43.186 --> 00:12:45.945
It's almost like a label, right?

193
00:12:45.945 --> 00:12:51.649
And as long as we don't mix, as long as
every of these two scenarios up here,

194
00:12:51.649 --> 00:12:54.427
right, so we don't reuse success.

195
00:12:54.427 --> 00:12:55.630
What if we did this?

196
00:12:57.082 --> 00:13:00.940
It's not an effective
discriminated_union now,

197
00:13:00.940 --> 00:13:04.981
cuz it's, first off,
it's never gonna be success.

198
00:13:04.981 --> 00:13:06.579
I mean, it's never gonna be error, sorry.

199
00:13:07.817 --> 00:13:14.110
And now we're, sorry Is that it?

200
00:13:14.110 --> 00:13:19.910
Yep, but we haven't narrowed it
down to anything cuz that's for

201
00:13:19.910 --> 00:13:22.342
both success and failure.

202
00:13:23.827 --> 00:13:26.519
So that's how a discriminated_union works.

203
00:13:26.519 --> 00:13:32.744
You use you often a literal type or
a union of literal types,

204
00:13:32.744 --> 00:13:37.849
right, to serve as
an indication that you can use

205
00:13:37.849 --> 00:13:43.972
to make a decision about
the larger value in and of itself.

