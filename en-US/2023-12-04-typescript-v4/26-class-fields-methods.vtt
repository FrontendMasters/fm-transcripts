WEBVTT

1
00:00:00.360 --> 00:00:04.544
The next topic we're going
to talk about is classes, so

2
00:00:04.544 --> 00:00:10.290
hopefully you are familiar with
classes as they exist in JavaScript.

3
00:00:10.290 --> 00:00:15.620
So you're familiar with
the constructor function.

4
00:00:15.620 --> 00:00:20.870
This is what's called when you invoke
a constructor and you'd say new car.

5
00:00:20.870 --> 00:00:25.510
We're building on our example
of a car here by giving

6
00:00:25.510 --> 00:00:28.470
this class a make model and year.

7
00:00:28.470 --> 00:00:32.060
So in regular JavaScript,
you might not see these.

8
00:00:32.060 --> 00:00:36.184
And you would be able to kind
of set these dynamically,

9
00:00:36.184 --> 00:00:41.050
you can just sort of dropped
properties on an instance.

10
00:00:41.050 --> 00:00:49.100
Because one of the goals
of TypeScript is to,

11
00:00:49.100 --> 00:00:52.806
Any value that you're passing around,

12
00:00:52.806 --> 00:00:57.910
you have to define in some way,
class fields upfront.

13
00:00:57.910 --> 00:01:00.610
And so this looks a little bit verbose.

14
00:01:00.610 --> 00:01:03.240
But you can see there's carved out model.

15
00:01:03.240 --> 00:01:06.110
And then this is the model that
comes in from the constructor.

16
00:01:06.110 --> 00:01:10.430
It looks for both, I promise we're gonna
get to something a little bit later

17
00:01:10.430 --> 00:01:15.490
called puram properties, which reduce
some of the syntax down significantly.

18
00:01:15.490 --> 00:01:18.990
Here effectively we're seeing
make model and year three times.

19
00:01:18.990 --> 00:01:21.455
In the parameters for the constructor and

20
00:01:21.455 --> 00:01:25.329
then in the names of the class
fields actually it's four times and

21
00:01:25.329 --> 00:01:28.820
then twice in each of these
lines here will trim that down.

22
00:01:28.820 --> 00:01:32.947
So you see those words once each and

23
00:01:32.947 --> 00:01:37.222
in a much more abbreviated syntax.

24
00:01:39.283 --> 00:01:44.236
So If we were using regular
JavaScript like we wouldn't get

25
00:01:44.236 --> 00:01:49.092
any help necessarily on whether
we're invoking the right

26
00:01:49.092 --> 00:01:55.000
methods on a class like there
is no activate turn signal here.

27
00:01:55.000 --> 00:01:57.260
Here we're passing in
arguments in the wrong order.

28
00:01:57.260 --> 00:02:01.414
So just like with a function type
a construct signature will validate that

29
00:02:01.414 --> 00:02:05.660
you're passing in that year as the last,
the third parameter here.

30
00:02:05.660 --> 00:02:11.570
So this is TypeScript doing its job right
at the gate just by using class fields.

31
00:02:13.830 --> 00:02:16.230
So, let's talk a little bit about methods.

32
00:02:16.230 --> 00:02:18.330
Methods are something
that lives on a class.

33
00:02:18.330 --> 00:02:23.380
So I'm gonna grab this hunk method and I'm
gonna just drop it right into the class.

34
00:02:23.380 --> 00:02:27.853
And here we're emitting a string
where the number of O's in

35
00:02:27.853 --> 00:02:31.710
the honk is determined by
the argument you pass in.

36
00:02:32.860 --> 00:02:35.340
And here you can see we're
able to create a new car.

37
00:02:36.360 --> 00:02:42.210
And c.honk, take my word for it,
it would return this particular string.

38
00:02:42.210 --> 00:02:43.850
But this is a method now.

39
00:02:46.060 --> 00:02:47.736
This looks a lot like typing a function,

40
00:02:47.736 --> 00:02:50.970
like the freestanding functions
that we've been working with.

41
00:02:50.970 --> 00:02:52.850
Right, the arguments are the same.

42
00:02:52.850 --> 00:02:55.710
Optional fields are the same
if you wanted to do this.

43
00:02:55.710 --> 00:02:59.251
Right, methods are pretty easy, or

44
00:02:59.251 --> 00:03:04.630
pretty much natural extension
from typing functions.

45
00:03:06.390 --> 00:03:10.470
So there's something new that has
arrived in JavaScript recently,

46
00:03:10.470 --> 00:03:14.288
which for me means like the last
several years, static fields.

47
00:03:14.288 --> 00:03:18.868
[COUGH] So I'm gonna grab this,
just another chunk of

48
00:03:18.868 --> 00:03:23.670
stuff we're gonna add to car
I'm gonna put it up here.

49
00:03:23.670 --> 00:03:26.331
I'm just gonna sort these in the way
I would sort it if I were doing

50
00:03:26.331 --> 00:03:26.984
this for real.

51
00:03:30.409 --> 00:03:33.380
Cool, so what just happened?

52
00:03:33.380 --> 00:03:41.200
Well, we have a static field
called the nextSerialNumber.

53
00:03:41.200 --> 00:03:44.622
And when we say it's a static field,
let me just get these out of the way so

54
00:03:44.622 --> 00:03:46.320
I can squeeze something down here.

55
00:03:48.800 --> 00:03:53.515
Look at that I can call nextSerialNumber
on the car class itself,

56
00:03:53.515 --> 00:03:57.690
not an instance of the class,
the car class itself.

57
00:03:57.690 --> 00:04:00.290
So this is what we mean by
the static side of a class.

58
00:04:00.290 --> 00:04:02.470
It's where the constructor lives.

59
00:04:02.470 --> 00:04:06.900
Not instance properties,
this is a class field.

60
00:04:06.900 --> 00:04:09.294
And similarly, this is a class method.

61
00:04:11.953 --> 00:04:15.406
Generate next serial number,
we could call that and

62
00:04:15.406 --> 00:04:18.162
it would invoke nextSerialNumber++.

63
00:04:18.162 --> 00:04:21.917
We just spent a lot of time
talking about this and

64
00:04:25.718 --> 00:04:31.662
In a class method,
what we're looking at here, this

65
00:04:33.946 --> 00:04:37.744
Is of type of car.

66
00:04:37.744 --> 00:04:42.513
Not to be confused with down here

67
00:04:46.197 --> 00:04:51.327
This is not being very useful to me,
it's car in an instance.

68
00:04:51.327 --> 00:04:56.780
Car being the interface describing a car,
right?

69
00:04:56.780 --> 00:05:02.050
See, there it is, car, Up here.

70
00:05:03.540 --> 00:05:04.420
Type of car.

71
00:05:05.420 --> 00:05:09.280
Type of car represents
the static side of the class.

72
00:05:09.280 --> 00:05:13.686
Thats it's as if we're in
there doing the following.

73
00:05:17.414 --> 00:05:20.230
Not new car, but just car.

74
00:05:20.230 --> 00:05:24.150
They're sort of just like things
dangling off of the class itself.

75
00:05:24.150 --> 00:05:28.890
So that's what this is in
a static field context.

76
00:05:28.890 --> 00:05:35.512
Okay, we have a we have
a missing member field here,

77
00:05:35.512 --> 00:05:41.010
which I can go ahead and add real quick.

78
00:05:41.010 --> 00:05:43.700
So we'll just say serial number.

79
00:05:45.340 --> 00:05:48.600
And we'll say car dot
generate serial number.

80
00:05:48.600 --> 00:05:52.990
So, this this we would
say is a class field.

81
00:05:52.990 --> 00:05:56.880
And this is a class field initializer.

82
00:05:56.880 --> 00:06:00.520
So you can think of it as
we're processing this class.

83
00:06:00.520 --> 00:06:05.989
And we go down and we find that field and
we invoke, generate serial number and

84
00:06:05.989 --> 00:06:10.160
assign whatever the return
value is to serial number.

85
00:06:10.160 --> 00:06:12.824
You sure could go down here and

86
00:06:12.824 --> 00:06:18.160
say this.serialNumber =
car.generateSerialNumber.

87
00:06:18.160 --> 00:06:19.857
In fact, it's equivalent to that.

88
00:06:22.629 --> 00:06:24.610
Generally ordering doesn't matter.

89
00:06:24.610 --> 00:06:26.382
We'll look a little bit at ordering later.

90
00:06:26.382 --> 00:06:30.080
Like, when is this run?

91
00:06:30.080 --> 00:06:31.470
When are these things run?

92
00:06:32.840 --> 00:06:35.000
One has to be first and we'll see later.

93
00:06:35.000 --> 00:06:40.070
But the main goal for me when I'm
using field initializers like this.

94
00:06:40.070 --> 00:06:42.740
Is I want stuff out of the constructor.

95
00:06:42.740 --> 00:06:45.876
It's really nice to be able to look
at this one line and say, okay,

96
00:06:45.876 --> 00:06:46.940
there's this thing.

97
00:06:46.940 --> 00:06:51.850
It's a serial number, it starts out
with a value that comes from here.

98
00:06:51.850 --> 00:06:53.853
And, of course,
because this returns a number,

99
00:06:53.853 --> 00:06:55.680
we don't need an explicit type here.

100
00:06:55.680 --> 00:07:00.528
Here we do because you kind of need to
know what those fields are before we start

101
00:07:00.528 --> 00:07:02.108
dealing with this code.

102
00:07:02.108 --> 00:07:04.138
We need to know up front
what they will be.

103
00:07:08.258 --> 00:07:11.419
All right, and here because we have added,

104
00:07:11.419 --> 00:07:14.929
I think I got my example
code here a little wrong.

105
00:07:15.970 --> 00:07:16.780
No, I have it right.

106
00:07:16.780 --> 00:07:20.125
So the thing that's been added to
get label is a little hash tag with

107
00:07:20.125 --> 00:07:21.150
the serial number.

108
00:07:21.150 --> 00:07:21.810
And here we go.

109
00:07:21.810 --> 00:07:24.525
I'm just indicating that it's
going to increment by one,

110
00:07:24.525 --> 00:07:28.218
because we have that static field where
we're holding the next serial number and

111
00:07:28.218 --> 00:07:30.760
it keeps incrementing over and over.

112
00:07:30.760 --> 00:07:34.280
There's another static thing we
can do called a static block.

113
00:07:34.280 --> 00:07:39.591
This is a very recent
addition to Typescript and

114
00:07:39.591 --> 00:07:46.910
to JavaScript, and here's what
that looks like a static block.

115
00:07:47.910 --> 00:07:52.354
So let's imagine that instead
of just saying I'm gonna set my

116
00:07:52.354 --> 00:07:56.969
serial number equal to 100 what I
wanna do is make an API call to

117
00:07:56.969 --> 00:08:01.400
some endpoint that gets me
some serial number data.

118
00:08:01.400 --> 00:08:07.290
And I wanna say the starting serial
number is whatever the API says.

119
00:08:07.290 --> 00:08:10.960
Like it'll tell me where I last left off.

120
00:08:10.960 --> 00:08:13.690
And I'll start counting from there.

121
00:08:13.690 --> 00:08:14.922
So we would delete this for sure.

122
00:08:19.179 --> 00:08:24.630
And this code ends up
initializing that field.

123
00:08:24.630 --> 00:08:27.370
Now, when is this code run?

124
00:08:27.370 --> 00:08:34.779
It's run very shortly after the car
class declaration is processed.

125
00:08:36.400 --> 00:08:39.981
What that means is, you don't have
to create an instance in order for

126
00:08:39.981 --> 00:08:41.030
this to run.

127
00:08:41.030 --> 00:08:44.190
This is run before you
create any instances.

128
00:08:44.190 --> 00:08:45.550
I mean, it's async here.

129
00:08:45.550 --> 00:08:51.380
So I'll say, the fetch is dispatched
before any instances are created.

130
00:08:51.380 --> 00:08:55.023
This needs some sort of readiness
indicator where you would say don't

131
00:08:55.023 --> 00:08:58.960
create any cars until we have
the serial numbers that we start with.

132
00:08:58.960 --> 00:09:03.721
But conceptually,
this is sort of like class level setup

133
00:09:03.721 --> 00:09:09.770
stuff similar to the way this
is set up stuff for an instance.

134
00:09:09.770 --> 00:09:15.120
This could be set up stuff for
the class itself, a static block.

135
00:09:15.120 --> 00:09:19.738
This is not something that
you invoke specifically,

136
00:09:19.738 --> 00:09:24.252
it's just something that
runs immediately after,

137
00:09:24.252 --> 00:09:28.971
this class declaration here
is kind of evaluated, and

138
00:09:28.971 --> 00:09:33.190
you eval this file and
the static block will run.

139
00:09:34.440 --> 00:09:35.710
And I think you can have more than one.

140
00:09:38.590 --> 00:09:39.818
You can have more than one.

141
00:09:39.818 --> 00:09:43.629
So you could have a couple,
they're gonna run from top to bottom, and

142
00:09:43.629 --> 00:09:47.650
you could comment on each of them to
say what's the purpose of this thing?

143
00:09:47.650 --> 00:09:53.049
A very special thing, but it's something
that you could see with the static keyword

144
00:09:53.049 --> 00:09:58.160
and it can live on a class as of very
recent Javascript and Typescript versions.

