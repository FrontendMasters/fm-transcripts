WEBVTT

1
00:00:00.230 --> 00:00:02.060
Let's attempt our first exercise.

2
00:00:02.060 --> 00:00:07.273
We're going to define a type that
accepts any valid JSON value, and

3
00:00:07.273 --> 00:00:12.520
I've extracted the important bit
out of the JSON specification.

4
00:00:12.520 --> 00:00:15.360
This describes what is allowed in JSON.

5
00:00:15.360 --> 00:00:20.328
So JSON value must be an object,
array, number, or string, or

6
00:00:20.328 --> 00:00:25.480
one of these three literal names,
false, true, or null.

7
00:00:25.480 --> 00:00:28.310
This is a 100 percent of
what's allowed in JSON.

8
00:00:28.310 --> 00:00:30.080
You don't see functions here.

9
00:00:30.080 --> 00:00:31.090
You don't see classes.

10
00:00:31.090 --> 00:00:33.460
Those are things that
are allowed in JavaScript.

11
00:00:33.460 --> 00:00:37.840
You don't see undefined, for
example, that is not a JSON concept.

12
00:00:37.840 --> 00:00:40.351
So you have some starting point code here.

13
00:00:40.351 --> 00:00:43.463
This is an important line to observe.

14
00:00:43.463 --> 00:00:46.970
Everything below this line,
you can think of as your test suite.

15
00:00:46.970 --> 00:00:51.950
These are a bunch of test cases to see
if you have the following valid JSON

16
00:00:51.950 --> 00:00:54.150
things are valid down here.

17
00:00:54.150 --> 00:00:58.570
These are negative test cases,
they should fail to compile.

18
00:00:58.570 --> 00:01:03.528
And we're getting yelled at here with
ts-expect- error because it should

19
00:01:03.528 --> 00:01:07.670
fail to compile and
it's not failing to compile right now.

20
00:01:07.670 --> 00:01:13.746
So think of this almost like an inverse,
like you need to make this throw or

21
00:01:13.746 --> 00:01:18.156
reject compiling not throw,
but you need to make it,

22
00:01:18.156 --> 00:01:22.470
have a type error in order
to make this test pass.

23
00:01:22.470 --> 00:01:29.460
So in the end, you want everything
below this line all green, right?

24
00:01:29.460 --> 00:01:33.343
Where you can see all of the things
that should fail, will fail, and

25
00:01:33.343 --> 00:01:36.250
all of the things that should pass, pass.

26
00:01:36.250 --> 00:01:39.480
In terms of doing this,
there are two ways you could do it.

27
00:01:39.480 --> 00:01:41.251
One is to click this try button,

28
00:01:41.251 --> 00:01:44.640
which will launch you into
the TypeScript playground.

29
00:01:44.640 --> 00:01:47.850
And this is a totally
freestanding piece of code.

30
00:01:47.850 --> 00:01:49.950
You can see your red squiggles down here.

31
00:01:49.950 --> 00:01:53.180
You can code above this
line to attempt this.

32
00:01:53.180 --> 00:01:56.088
Also, if you go into
your workshop project,

33
00:01:56.088 --> 00:01:59.650
you'll notice we have
chapter 8 in our notes.

34
00:01:59.650 --> 00:02:03.380
And then this gives you
the exact same thing down here.

35
00:02:03.380 --> 00:02:09.254
What you'll wanna do is just,
all of these TS expect error things,

36
00:02:09.254 --> 00:02:15.334
oops, you'll want to do one level of
uncommenting so they light up and

37
00:02:15.334 --> 00:02:20.281
yell at you, as they should,
because right now there's

38
00:02:20.281 --> 00:02:25.420
no compile error and
we want there to be a compile error.

39
00:02:25.420 --> 00:02:28.090
Please feel free to
attempt this on your own.

40
00:02:28.090 --> 00:02:30.690
Don't write any code below this line.

41
00:02:30.690 --> 00:02:35.161
You should just be defining these
types here, and we'll see you and

42
00:02:35.161 --> 00:02:37.370
we'll walk through a solution.

43
00:02:40.721 --> 00:02:44.980
Let's go through the solution
to the JSON types exercise.

44
00:02:44.980 --> 00:02:48.350
I'm gonna actually close
this bottom terminal.

45
00:02:48.350 --> 00:02:49.120
We won't need it.

46
00:02:51.040 --> 00:02:55.778
All right, so
let's try to solve this in pieces.

47
00:02:57.913 --> 00:03:02.990
First, let's work with this JSONObject.

48
00:03:02.990 --> 00:03:07.150
And we might create
a new type here as well.

49
00:03:07.150 --> 00:03:11.787
It's not necessarily gonna be the ones
that sort of add up to this end thing,

50
00:03:11.787 --> 00:03:14.480
but we can call something
a JSON primitive.

51
00:03:19.037 --> 00:03:20.750
And there we go.

52
00:03:20.750 --> 00:03:23.690
Copilot knows exactly what that means.

53
00:03:23.690 --> 00:03:27.400
Maybe I'll just like solve this with
copilot, where you just said JSONValue.

54
00:03:28.750 --> 00:03:32.360
That's a valid tool in the toolbox,
but we'll talk through it anyway.

55
00:03:32.360 --> 00:03:35.460
So let's look at our checklist here.

56
00:03:35.460 --> 00:03:39.870
These are really the primitive JavaScript
types that are possible in JSON.

57
00:03:39.870 --> 00:03:45.190
We've got string, we've got number,
we've got Boolean, these two, and null.

58
00:03:45.190 --> 00:03:52.107
All right, now, a JSONObject,
we can say that that is,

59
00:03:52.107 --> 00:03:57.440
wow, that is using an index signature, and

60
00:03:57.440 --> 00:04:03.080
we can say for any key,
there's a JSONValue.

61
00:04:03.080 --> 00:04:08.000
Now, we haven't defined what JSONValue is,
but you can imagine,

62
00:04:08.000 --> 00:04:13.370
you could have a number here, or
another object, or an array of objects.

63
00:04:13.370 --> 00:04:18.914
So any valid JSONValue can be
in one of these JSON objects.

64
00:04:18.914 --> 00:04:21.284
And in array,
it's gonna be something very similar.

65
00:04:25.029 --> 00:04:27.140
It's just an array of JSONValues.

66
00:04:29.450 --> 00:04:32.320
And then what is a JSONValue in the end?

67
00:04:32.320 --> 00:04:36.857
Well, it's primitives, Or

68
00:04:36.857 --> 00:04:40.115
objects, or arrays.

69
00:04:41.530 --> 00:04:42.880
Let's check our tests.

70
00:04:43.950 --> 00:04:49.280
All the positive ones pass and
no red squiggles for the failing ones.

71
00:04:49.280 --> 00:04:52.066
So we could have avoided
creating this type.

72
00:04:52.066 --> 00:04:55.668
If we wanted,
we could have just done this, and

73
00:04:55.668 --> 00:04:58.380
it would have been perfectly fine.

74
00:04:58.380 --> 00:05:03.101
But I don't know, I kind of like
the explicitness of this and

75
00:05:03.101 --> 00:05:06.910
it makes this last type
very easy to think about.

76
00:05:08.220 --> 00:05:11.230
We can kind of think about the three
different classes of JSONValues that we

77
00:05:11.230 --> 00:05:12.210
could have.

78
00:05:12.210 --> 00:05:13.739
So this is a recursive type.

79
00:05:14.960 --> 00:05:15.790
Why?

80
00:05:15.790 --> 00:05:19.610
Well, object is defined
in terms of JSONValue,

81
00:05:19.610 --> 00:05:25.400
which is defined in terms of object and
the same is true with array.

82
00:05:25.400 --> 00:05:27.287
But it's all possible, and

83
00:05:27.287 --> 00:05:32.167
we can use this to define any kind of
valid piece of JSON that we might have.

