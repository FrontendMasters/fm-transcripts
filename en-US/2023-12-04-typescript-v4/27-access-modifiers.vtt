WEBVTT

1
00:00:00.068 --> 00:00:01.291
Let's add more stuff here.

2
00:00:01.291 --> 00:00:03.900
So we kind of have a problem.

3
00:00:03.900 --> 00:00:08.311
I don't like that I can
just like edit the serial

4
00:00:08.311 --> 00:00:12.513
number on my car here
like hang it goes to Den.

5
00:00:12.513 --> 00:00:17.284
SerialNumber=-123, that seems bad.

6
00:00:17.284 --> 00:00:20.123
We shouldn't be able to mess with
serial numbers on these cars.

7
00:00:20.123 --> 00:00:24.975
So what we're gonna do is
we're gonna make that serial

8
00:00:24.975 --> 00:00:30.151
number private and
we're going to define a getter for it.

9
00:00:30.151 --> 00:00:32.928
So here we go.

10
00:00:32.928 --> 00:00:36.337
So these are the new lines here, okay?

11
00:00:36.337 --> 00:00:39.781
So what we have here and
I have to delete this line in a sec, but

12
00:00:39.781 --> 00:00:42.496
I just want to leave it for
comparison's sake.

13
00:00:42.496 --> 00:00:48.116
What we have here is a new property
that we're saying is private.

14
00:00:48.116 --> 00:00:55.970
Private means only instances of
this class can view this field.

15
00:00:55.970 --> 00:01:01.747
If I created a subclass,
l would not be able to see this field.

16
00:01:01.747 --> 00:01:05.351
It's only this class itself.

17
00:01:05.351 --> 00:01:09.940
Protected means subclasses can see it too,
but

18
00:01:09.940 --> 00:01:13.159
the outside world cannot see it.

19
00:01:13.159 --> 00:01:19.175
Just cause you created a car and
you have a variable called my car.

20
00:01:19.175 --> 00:01:22.259
That doesn't give you a right
to access the serial number.

21
00:01:22.259 --> 00:01:28.224
So if I delete this or comment it out,
great, I've got this private field,

22
00:01:28.224 --> 00:01:34.488
at least it's a TypeScript private field
still generating the serial number.

23
00:01:34.488 --> 00:01:38.847
And then I created this getter
which will let, for example,

24
00:01:38.847 --> 00:01:43.730
this work, but I won't be able in
subclasses to do something like,

25
00:01:46.744 --> 00:01:51.412
That, it's a read-only property.

26
00:01:51.412 --> 00:01:54.323
There's only a getter for it.

27
00:01:54.323 --> 00:02:00.938
So this is an example of us using access
modifier key words like private and

28
00:02:00.938 --> 00:02:07.569
protected to sort of store information
with one level of access private.

29
00:02:07.569 --> 00:02:10.134
And then expose it in a controlled way,

30
00:02:10.134 --> 00:02:13.412
with another another level
of access protected.

31
00:02:13.412 --> 00:02:16.740
So like we can store it,
no one can see it but

32
00:02:16.740 --> 00:02:19.976
we are no one can write to it or
read to it and

33
00:02:19.976 --> 00:02:25.361
then we can deliberately open up
a door that lets subclasses read it.

34
00:02:25.361 --> 00:02:29.354
But the outside public
cannot sit down here,

35
00:02:29.354 --> 00:02:33.567
this is it's not accessible
from the outside.

36
00:02:40.663 --> 00:02:46.317
You can create static, private,
and protected fields as well.

37
00:02:46.317 --> 00:02:51.455
So we're gonna use this
to kind of lock down

38
00:02:51.455 --> 00:02:56.173
the serial number generation up here.

39
00:02:59.688 --> 00:03:02.978
Really I'm just gonna add the static,
sorry,

40
00:03:02.978 --> 00:03:05.617
the private keyword to both of these.

41
00:03:09.277 --> 00:03:14.863
And this is kind of interesting because,
we were thinking about private and

42
00:03:14.863 --> 00:03:18.719
protected as pertaining to
instances of the class.

43
00:03:18.719 --> 00:03:22.600
The mental model still
holds true with one caveat.

44
00:03:22.600 --> 00:03:27.736
If you think about, like,
a car as having this static side,

45
00:03:27.736 --> 00:03:32.068
this stuff up here, and
then there are instances,

46
00:03:32.068 --> 00:03:37.330
private and protected still
behave the way you would expect.

47
00:03:37.330 --> 00:03:41.081
In static areas of this class,

48
00:03:41.081 --> 00:03:45.420
I can access private static stuff.

49
00:03:45.420 --> 00:03:50.791
In this instance, I can access private
instance stuff and private static stuff.

50
00:03:50.791 --> 00:03:54.226
That's what lets me have
access to this function here.

51
00:03:54.226 --> 00:03:56.297
This is instance stuff
that's happening here.

52
00:03:56.297 --> 00:04:02.492
There's no static keyword, right I
could say same as in here like I do or

53
00:04:02.492 --> 00:04:06.226
car generate serial number, no problem.

54
00:04:09.652 --> 00:04:14.540
If I were to change these to
protected then subclasses on their

55
00:04:14.540 --> 00:04:19.433
static side can access it,
as well as on their instance side.

56
00:04:19.433 --> 00:04:21.967
So really think about it
as a two-dimensional thing.

57
00:04:21.967 --> 00:04:26.759
There's static and instance, and
then there's private and protected.

58
00:04:26.759 --> 00:04:32.110
Private and protected relate to, like,
only this class, none of its subclasses.

59
00:04:32.110 --> 00:04:34.381
And then protected opens
it up to subclasses.

60
00:04:34.381 --> 00:04:36.081
And then there's one more but

61
00:04:36.081 --> 00:04:40.232
it's implied like you don't need
an access modifier keyword for this.

62
00:04:40.232 --> 00:04:43.865
You could say public like this.

63
00:04:43.865 --> 00:04:46.223
But everything's public by default.

64
00:04:49.200 --> 00:04:50.482
Unless you say otherwise.

65
00:04:52.563 --> 00:04:54.177
&gt;&gt; Two quick questions.

66
00:04:54.177 --> 00:05:00.834
One, the underscore naming convention
is just a naming convention, correct?

67
00:05:00.834 --> 00:05:04.066
&gt;&gt; It is a naming convention,
but I've done it for a reason.

68
00:05:04.066 --> 00:05:09.750
And that is, you have to remember,
TypeScript melts away at build time.

69
00:05:09.750 --> 00:05:13.723
It checks your code and
then it says, I'm done, good luck.

70
00:05:13.723 --> 00:05:14.865
I'm going home.

71
00:05:14.865 --> 00:05:20.822
So, if you were at runtime,
you would still see this field here.

72
00:05:20.822 --> 00:05:25.230
It doesn't actually prevent other
code from accessing this field.

73
00:05:25.230 --> 00:05:28.719
If you were to open up
a JavaScript console.

74
00:05:28.719 --> 00:05:33.642
And you were dealing with a deployed
website with this code in it, you would be

75
00:05:33.642 --> 00:05:38.747
able to see underscore serial number, and
you'd be able to write to it as well.

76
00:05:38.747 --> 00:05:42.796
It's just sort of something to help keep
you honest within your own code base.

77
00:05:42.796 --> 00:05:47.014
So, leaving an underscore there is
important to give you a clue if

78
00:05:47.014 --> 00:05:50.939
you're ever, looking at a log file or
something like that.

79
00:05:50.939 --> 00:05:54.901
Or you've attached a debugger to
a running version of the app, and

80
00:05:54.901 --> 00:05:59.289
you're dealing with something in
a console, like you still want to leave

81
00:05:59.289 --> 00:06:03.066
yourself an indication that this
is not supposed to be public.

82
00:06:03.066 --> 00:06:08.568
But it's just kind of
a statement of intention and

83
00:06:08.568 --> 00:06:13.808
it's sort of,
the honesty policy in that it's

84
00:06:13.808 --> 00:06:18.401
designed to help you, don't defeat it.

85
00:06:18.401 --> 00:06:20.981
There are ways now of making
fields actually private,

86
00:06:20.981 --> 00:06:24.356
which we will talk about later in
this chapter that we're on right now.

87
00:06:24.356 --> 00:06:28.677
I see there's a question in
the chat about hashtag fields.

88
00:06:28.677 --> 00:06:31.622
We will talk about that that's
exactly where we're headed.

89
00:06:31.622 --> 00:06:38.813
&gt;&gt; And the other question was just about
the implicit getter, not needing a type,

90
00:06:38.813 --> 00:06:45.379
because it can be inferred from
the class property, on line 23 there.

91
00:06:45.379 --> 00:06:47.401
&gt;&gt; It's inferred from
the return type here.

92
00:06:47.401 --> 00:06:49.478
So unfortunately, if we did this,

93
00:06:52.236 --> 00:06:56.473
I'm gonna follow my own advice, do that.

94
00:06:58.892 --> 00:07:01.675
Yeah, return types are inferred.

95
00:07:01.675 --> 00:07:06.640
It's a good idea to add
the return type here.

96
00:07:06.640 --> 00:07:09.050
Okay, onwards we go.

97
00:07:09.050 --> 00:07:10.437
So we talked about static blocks.

98
00:07:10.437 --> 00:07:14.223
We talked about the access modifier
keywords on member fields,

99
00:07:14.223 --> 00:07:17.246
which are instance fields,
and on static fields.

100
00:07:17.246 --> 00:07:21.207
You can see now I can't just call
car.generateSerialNumber from

101
00:07:21.207 --> 00:07:22.556
the outside anymore.

102
00:07:22.556 --> 00:07:23.797
That is private.

103
00:07:23.797 --> 00:07:26.069
Even subclasses won't be able to get that.

104
00:07:26.069 --> 00:07:31.417
They'll be able to access their own serial
number because there's that getter,

105
00:07:31.417 --> 00:07:34.839
but they won't be able to
generate a serial number.

106
00:07:34.839 --> 00:07:38.021
That happens in the base class and
stays there.

107
00:07:38.021 --> 00:07:43.088
All right, JavaScript private fields.

108
00:07:43.088 --> 00:07:48.332
So the access modifier keywords
like private and protected.

109
00:07:48.332 --> 00:07:53.588
Predate actual private fields that landed

110
00:07:53.588 --> 00:07:58.267
in Javascript relatively recently.

111
00:07:58.267 --> 00:08:01.505
In the spirit of continuing
to evolve our example,

112
00:08:01.505 --> 00:08:05.421
let's take our serial number field and
make it instead of like

113
00:08:05.421 --> 00:08:09.208
typescript private,
which is just like the honor system.

114
00:08:09.208 --> 00:08:11.789
Let's make it actually private.

115
00:08:11.789 --> 00:08:14.107
So we're gonna go up here and

116
00:08:14.107 --> 00:08:19.816
I can get rid of my underscore here
because it doesn't really matter.

117
00:08:19.816 --> 00:08:24.025
I don't need an indication
of what this should be.

118
00:08:24.025 --> 00:08:29.435
I'm just gonna literally change
its name to begin with, a hashtag.

119
00:08:29.435 --> 00:08:31.829
And that denotes that
this is a private field.

120
00:08:31.829 --> 00:08:36.297
I'm getting yelled at by TypeScript
because it's like, this is private.

121
00:08:36.297 --> 00:08:37.185
This is private.

122
00:08:37.185 --> 00:08:38.735
You don't need to tell me.

123
00:08:38.735 --> 00:08:41.291
It supersedes the honor system here.

124
00:08:41.291 --> 00:08:47.793
This is actually difficult
to access at runtime.

125
00:08:47.793 --> 00:08:52.113
And here you can see we have
access to hashtag serial number.

126
00:08:52.113 --> 00:08:58.013
But we won't be able to access it
from outside the class like this.

127
00:08:58.013 --> 00:08:59.659
There's my car.

128
00:08:59.659 --> 00:09:03.040
This is not accessible outside the class.

129
00:09:03.040 --> 00:09:08.071
And this will match, like if you were
to open up Chrome DevTools or attach

130
00:09:08.071 --> 00:09:13.777
a debugger to a running Node program, you
would see that this is for sure private.

131
00:09:13.777 --> 00:09:19.433
Now, it's private in terms of
encapsulation, but you should remember,

132
00:09:19.433 --> 00:09:24.729
if you attach a debugger, if your
code is running somewhere that users

133
00:09:24.729 --> 00:09:30.234
have access to, they can attach
a debugger and they can view this field.

134
00:09:30.234 --> 00:09:34.443
Don't put anything here
that's actually a secret.

135
00:09:34.443 --> 00:09:35.939
It's not private in that sense.

136
00:09:35.939 --> 00:09:43.229
Chrome DevTools has an API that you
can use to just grab private fields.

137
00:09:43.229 --> 00:09:45.191
It's not secure, it's just private.

138
00:09:50.835 --> 00:09:54.439
All right, we could use this for static
fields as well, I'm just gonna up top and

139
00:09:54.439 --> 00:09:56.032
make the modification similarly.

140
00:09:56.032 --> 00:10:00.159
So we're gonna take the private
static fields, get rid of this.

141
00:10:05.380 --> 00:10:08.224
And do this and

142
00:10:08.224 --> 00:10:13.201
we need to update this and

143
00:10:13.201 --> 00:10:17.471
this should be good.

144
00:10:17.471 --> 00:10:20.468
One more, see I should have
used the like f2 to rename and

145
00:10:20.468 --> 00:10:22.605
it would have taken care of everything.

146
00:10:22.605 --> 00:10:27.273
All right so now we have
legitimately like, actually private.

147
00:10:27.273 --> 00:10:31.188
Static fields, static methods,
they cannot be accessed.

148
00:10:31.188 --> 00:10:34.768
Even once this compiles to JavaScript,
they are still private.

149
00:10:34.768 --> 00:10:39.441
As opposed to this, which is just,
it'll compile away and

150
00:10:39.441 --> 00:10:43.840
the getter will be there for
all to see and all to access.

151
00:10:43.840 --> 00:10:48.691
It's important when you think about
libraries in particular because

152
00:10:48.691 --> 00:10:51.485
people can just like ignore that type and

153
00:10:51.485 --> 00:10:55.939
just call the getter anyway and
they'll get the value, right?

154
00:10:55.939 --> 00:10:57.106
And they'll depend on that.

155
00:10:57.106 --> 00:10:58.422
It's not really a security issue.

156
00:10:58.422 --> 00:11:04.065
It's more like they will start
to depend on that thing and

157
00:11:04.065 --> 00:11:09.014
now, they'll break if
that thing ever changes.

158
00:11:14.182 --> 00:11:16.505
So we talked about static fields, great.

159
00:11:16.505 --> 00:11:18.873
Okay, this is really cool.

160
00:11:18.873 --> 00:11:22.334
Private field presence checks.

161
00:11:22.334 --> 00:11:28.562
So we're gonna take advantage of something
really cool here about private fields.

162
00:11:28.562 --> 00:11:30.242
So I'm gonna grab this =method.

163
00:11:30.242 --> 00:11:33.008
We'll drop it into the class and
then we'll talk about it.

164
00:11:37.849 --> 00:11:43.052
Okay, so
we've defined a method called equals.

165
00:11:43.052 --> 00:11:49.273
And the purpose of this is we want
to see whether I obtain a car,

166
00:11:49.273 --> 00:11:53.595
I want to see if I am
equal to this other car.

167
00:11:53.595 --> 00:11:57.779
Now, we could do it with an instance of.

168
00:11:57.779 --> 00:12:04.875
We could do it with checking for
properties, like say, does my structure.

169
00:12:04.875 --> 00:12:09.826
Look like it's a car, but we're gonna
take advantage of something else.

170
00:12:09.826 --> 00:12:16.520
We're gonna take advantage of this
private field presence check.

171
00:12:16.520 --> 00:12:24.471
What this means is if we are given
other paths to us is of type car.

172
00:12:24.471 --> 00:12:27.030
We're able to access it.

173
00:12:27.030 --> 00:12:30.313
So this is important in terms of
understanding how private fields work.

174
00:12:30.313 --> 00:12:36.792
It's not that this instance can
see that instance's private data,

175
00:12:36.792 --> 00:12:43.947
it's that all instances of CAR can see
private data on all other instances.

176
00:12:43.947 --> 00:12:49.779
So here, through typeguards, we first say,
all right, if this value passed to us,

177
00:12:49.779 --> 00:12:54.481
we can start with this, just to not
throw you for a loop with unknown.

178
00:12:54.481 --> 00:12:58.445
If it is truthy, meaning it's not null,

179
00:12:58.445 --> 00:13:02.649
it's undefined, and it is an object type.

180
00:13:02.649 --> 00:13:05.558
Well, now we know it could
have properties on it.

181
00:13:05.558 --> 00:13:11.210
And so what we can do then
is a private field presence

182
00:13:11.210 --> 00:13:16.336
check where we say is
serial number in other and

183
00:13:16.336 --> 00:13:20.819
if it is, guess what we know it's a car.

184
00:13:20.819 --> 00:13:24.257
The very fact that we're
able to determine.

185
00:13:24.257 --> 00:13:27.470
So that field is there,
and it's a private field,

186
00:13:27.470 --> 00:13:32.648
the only way we'd be able to do that is if
it's another instance of the same class.

187
00:13:32.648 --> 00:13:38.949
So we know for sure that this is a car,
otherwise we would not be able to.

188
00:13:38.949 --> 00:13:41.769
We wouldn't be allowed to even
know if a serial number exists.

189
00:13:41.769 --> 00:13:47.290
You could have another class like
Computer class called computer.

190
00:13:47.290 --> 00:13:49.610
Computers have serial numbers too but

191
00:13:49.610 --> 00:13:54.468
you wouldn't be able to see this you
wouldn't be able to ascertain whether that

192
00:13:54.468 --> 00:13:58.624
serial number that you're looking for
see car.#serialNumber.

193
00:13:58.624 --> 00:14:04.008
It's the one that you have it's
the field on your class not just

194
00:14:04.008 --> 00:14:10.121
the name serial number, but
specifically a field that you can access.

195
00:14:10.121 --> 00:14:13.387
The fact that you can see that
means this is for sure a car.

196
00:14:13.387 --> 00:14:20.963
And that's why this guard here
takes you from any straight to car.

197
00:14:20.963 --> 00:14:25.483
And now for our equality check we can
actually compare serial numbers and

198
00:14:25.483 --> 00:14:26.232
we can see.

199
00:14:26.232 --> 00:14:27.481
Am I a car?

200
00:14:27.481 --> 00:14:28.351
Are you a car?

201
00:14:28.351 --> 00:14:29.969
So this teaches us a couple of things.

202
00:14:29.969 --> 00:14:34.576
One is that if we're given
a reference to another car,

203
00:14:34.576 --> 00:14:38.795
we can see all of the private
fields on that thing.

204
00:14:38.795 --> 00:14:41.762
It's not a little bubble
around each instance.

205
00:14:41.762 --> 00:14:45.506
It's kind of above all,
that all instances share.

206
00:14:45.506 --> 00:14:49.596
And within that bubble, they can access
each other's private data as long as they

207
00:14:49.596 --> 00:14:52.338
have references to each other so
they can reach for it.

208
00:14:52.338 --> 00:14:54.814
So that's how you want
to think about this.

209
00:14:54.814 --> 00:14:57.480
And then finally,
this private field presence check.

210
00:14:57.480 --> 00:14:59.401
We talked a little bit about type guards.

211
00:14:59.401 --> 00:15:04.263
This is a prime type guard.

212
00:15:04.263 --> 00:15:08.091
We'll talk more in the next chapter about
user defined type cards where you can

213
00:15:08.091 --> 00:15:08.904
write your own.

214
00:15:08.904 --> 00:15:13.758
This is one of the most solid ones,
but it is a little bit nominal

215
00:15:13.758 --> 00:15:18.261
type system ish,
because it's legitimately checking.

216
00:15:18.261 --> 00:15:23.201
Are you an instance of car that's
the only way you'd be able to

217
00:15:23.201 --> 00:15:25.196
see that private field?

218
00:15:25.196 --> 00:15:27.800
Dimitar, I think I answered
your question just now.

219
00:15:27.800 --> 00:15:31.366
If another object has a serial number too,
and

220
00:15:31.366 --> 00:15:36.214
I'm gonna assume you mean like
an instance of a different class

221
00:15:36.214 --> 00:15:40.984
has hashtag serial number that
is a different serial number.

222
00:15:40.984 --> 00:15:43.389
Like if we had this.

223
00:15:49.747 --> 00:15:54.587
Right, when you get to this check,
inside this instance of Car,

224
00:15:54.587 --> 00:16:00.055
you're not allowed to read this,
you're not allowed to know it exists.

225
00:16:00.055 --> 00:16:03.364
So this condition would fail.

226
00:16:03.364 --> 00:16:08.174
And the fact that it passes it means
not only is there a private field with

227
00:16:08.174 --> 00:16:13.164
this name, but is it specifically
the private field that you can access?

228
00:16:13.164 --> 00:16:16.976
And that's how we know it must be a car.

229
00:16:16.976 --> 00:16:19.859
Hopefully that makes sense.

230
00:16:19.859 --> 00:16:21.485
It's a pretty powerful idea though.

231
00:16:24.806 --> 00:16:29.682
It also makes private fields like much
more useful because you can share

232
00:16:29.682 --> 00:16:31.476
data amongst each other.

233
00:16:31.476 --> 00:16:37.815
If you couldn't do that, it would be kind
of very limited in terms of usefulness.

234
00:16:37.815 --> 00:16:40.418
All right,
one more access modifier key word here.

235
00:16:40.418 --> 00:16:41.503
We've used it already.

236
00:16:41.503 --> 00:16:43.573
It's called read only.

237
00:16:43.573 --> 00:16:46.819
We can make this change really quick, but

238
00:16:46.819 --> 00:16:51.012
we could make that serial
number a read-only field.

239
00:16:51.012 --> 00:16:55.399
So now it's a private field that
is set when it's initialized and

240
00:16:55.399 --> 00:16:57.811
we cannot change it after it is set.

241
00:16:57.811 --> 00:17:02.817
Remember this is also a type
script construct at runtime

242
00:17:02.817 --> 00:17:08.248
if you had misbehaving code that
casts this to another type,

243
00:17:08.248 --> 00:17:11.348
they will be able to write to this.

244
00:17:11.348 --> 00:17:16.337
That's bad TypeScript code if
it's like casting away read-only.

245
00:17:16.337 --> 00:17:21.543
So, it's just an expression of
what you want this to be used for.

246
00:17:21.543 --> 00:17:26.284
Actually, in this case, since you can't
access this from the outside world,

247
00:17:26.284 --> 00:17:30.487
you could be pretty confident that
no one would be able to change this.

248
00:17:30.487 --> 00:17:32.648
You could have a method in
here that changes that but

249
00:17:32.648 --> 00:17:34.414
you're telling yourself at that point.

250
00:17:38.708 --> 00:17:41.384
Yep, someone caught a bug.

251
00:17:41.384 --> 00:17:46.282
She'd be triple equals, and guess what?

252
00:17:46.282 --> 00:17:48.476
The read-only just caught that.

253
00:17:48.476 --> 00:17:51.925
We'll pretend I left that in there as
a bug so that when I added that step,

254
00:17:51.925 --> 00:17:53.070
it worked out perfectly

