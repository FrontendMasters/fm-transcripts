WEBVTT

1
00:00:00.000 --> 00:00:01.929
Let's move on to Array Types.

2
00:00:01.929 --> 00:00:06.474
So you're familiar, hopefully,
with JavaScript arrays.

3
00:00:06.474 --> 00:00:09.021
So there's fileExtensions, and

4
00:00:09.021 --> 00:00:13.421
you can see that we've got,
wait, what's going on here?

5
00:00:13.421 --> 00:00:16.009
That is not valid code,
that should have stayed a comment.

6
00:00:16.009 --> 00:00:20.129
fileExtensions, we've got js and
ts in an array.

7
00:00:20.129 --> 00:00:23.873
We can see that Typescript has
inferred that this is string and

8
00:00:23.873 --> 00:00:26.324
then a pair of square brackets after it.

9
00:00:26.324 --> 00:00:32.786
That is how you describe or a preferred
way to describe arrays in TypeScript.

10
00:00:32.786 --> 00:00:35.046
There's also another
way you could do this.

11
00:00:38.640 --> 00:00:45.905
I would encourage you not to do this,
because if you're a React developer,

12
00:00:45.905 --> 00:00:50.333
those little greater than,
less than signs,

13
00:00:50.333 --> 00:00:56.362
they will clash with your JSX and
cause weird things to happen.

14
00:00:56.362 --> 00:01:02.270
So this is really the preferred
way to type arrays.

15
00:01:02.270 --> 00:01:06.259
And you can see we have inference
there working for us as is.

16
00:01:06.259 --> 00:01:08.769
This works for
more complicated objects, too.

17
00:01:08.769 --> 00:01:12.429
So here's our car object with make,
model, and year.

18
00:01:12.429 --> 00:01:15.961
And we've got a type here
that it's the same as before,

19
00:01:15.961 --> 00:01:20.036
we're just following it with
these square brackets at the end.

20
00:01:20.036 --> 00:01:23.771
So it's all you have to do for
array types.

21
00:01:23.771 --> 00:01:24.906
And what do we mean by arrays?

22
00:01:24.906 --> 00:01:27.149
They're arbitrary length.

23
00:01:27.149 --> 00:01:30.529
We can pop things out of
them until they're empty,

24
00:01:30.529 --> 00:01:33.448
we can fill them up with
a thousand objects.

25
00:01:33.448 --> 00:01:37.581
That is the meaning of
an array in this context.

26
00:01:37.581 --> 00:01:41.662
May seem strange that I'm
defining it that way, but

27
00:01:41.662 --> 00:01:47.708
the next topic we're gonna talk about
is arrays of fixed length, or tuples.

28
00:01:47.708 --> 00:01:51.711
So you may have seen this in
other programming languages.

29
00:01:51.711 --> 00:01:56.092
Some programming languages have
a formalized tuple type that looks very

30
00:01:56.092 --> 00:01:59.621
different from arrays in terms
of the syntax that you use.

31
00:01:59.621 --> 00:02:05.325
Because ultimately we have to create
code that runs as JavaScript,

32
00:02:05.325 --> 00:02:10.339
we're kind of piggybacking on
the JavaScript array type.

33
00:02:10.339 --> 00:02:13.499
Let's look at an example of a tuple here.

34
00:02:13.499 --> 00:02:19.986
So sorry, I'm gonna call this myCar2 just
to not collide with the previous myCar.

35
00:02:19.986 --> 00:02:22.508
So here we've got an array, or

36
00:02:22.508 --> 00:02:28.629
here is an array containing three
elements, a year, a make, and a model.

37
00:02:28.629 --> 00:02:33.237
So it's another way of representing a car,
but we kind of have an implicit convention

38
00:02:33.237 --> 00:02:36.696
here, where we're saying the first
element is gonna be a year.

39
00:02:36.696 --> 00:02:40.479
The second element is gonna be make,
the third element is gonna be model.

40
00:02:40.479 --> 00:02:43.273
And maybe we can pass this around and

41
00:02:43.273 --> 00:02:48.130
we know from some contextual cue
that this is what this means.

42
00:02:48.130 --> 00:02:51.419
This is a car, and
we know how to take this information.

43
00:02:51.419 --> 00:02:54.299
It's almost a row of a CSV or
a spreadsheet or something.

44
00:02:54.299 --> 00:02:57.240
If the column names,
you can make sense of that.

45
00:02:57.240 --> 00:03:00.447
And you can see here, we can take myCar2,

46
00:03:00.447 --> 00:03:04.472
and we can destructure it,
but we run into a problem.

47
00:03:04.472 --> 00:03:07.862
String or number, string or
number, string or number,

48
00:03:07.862 --> 00:03:10.769
those are the types of all
three of those values.

49
00:03:10.769 --> 00:03:14.183
And what's happened here is TypeScript has

50
00:03:14.183 --> 00:03:18.989
made the safest assumption it
can without getting in our way.

51
00:03:18.989 --> 00:03:23.212
And it's more common to use
arrays of arbitrary length.

52
00:03:23.212 --> 00:03:26.456
So you're adding things to them and
you're removing things from them, and

53
00:03:26.456 --> 00:03:29.205
things at certain positions in
the array have special meaning.

54
00:03:29.205 --> 00:03:31.764
That's usually not the case, right?

55
00:03:31.764 --> 00:03:34.469
So we need to do some casting here, and

56
00:03:34.469 --> 00:03:40.235
there were some questions in the chat
earlier, what is the valid use of casting?

57
00:03:40.235 --> 00:03:41.609
Is it always dangerous?

58
00:03:41.609 --> 00:03:46.014
Well, this is a great example of
where casting helps quite a bit.

59
00:03:47.659 --> 00:03:53.587
So here we can see part of the problem is,

60
00:03:55.666 --> 00:03:58.996
We can keep adding stuff to this array or
we can create.

61
00:03:58.996 --> 00:04:03.314
Effectively, we don't have a convention
that TypeScript is helping us with here.

62
00:04:03.314 --> 00:04:07.387
All it's doing is enforcing that
the contents of this array,

63
00:04:07.387 --> 00:04:10.205
every member is either a string or number,

64
00:04:10.205 --> 00:04:14.769
but we can add a bunch of junk here and
TypeScript is not gonna help us.

65
00:04:14.769 --> 00:04:20.275
So, We can either cast or

66
00:04:20.275 --> 00:04:25.008
we can use an explicit
type annotation like this.

67
00:04:28.599 --> 00:04:31.722
So instead of doing something like this,

68
00:04:31.722 --> 00:04:36.629
which is how you type an array of
arbitrary length, with a tuple,

69
00:04:36.629 --> 00:04:40.845
we're gonna put stuff in
between the square brackets.

70
00:04:40.845 --> 00:04:45.346
And we're saying it is
specifically number, string,

71
00:04:45.346 --> 00:04:48.322
string, 2002 Toyota Corolla.

72
00:04:48.322 --> 00:04:50.756
And let's look at what happens here.

73
00:04:55.007 --> 00:04:59.045
So here we're getting type
checking helping us out.

74
00:04:59.045 --> 00:05:03.369
The year is supposed to be the first
element, and it's not here.

75
00:05:03.369 --> 00:05:05.501
So it's saying string is
not assignable to number.

76
00:05:05.501 --> 00:05:07.192
This is supposed to be a string.

77
00:05:08.829 --> 00:05:12.259
And then down here,
we've got too many elements.

78
00:05:12.259 --> 00:05:16.258
We're trying to give it 4,
but it only wants 3.

79
00:05:18.621 --> 00:05:24.883
So these are useful, especially I love
to use these as function return values,

80
00:05:24.883 --> 00:05:29.289
where maybe you have a successful case or
an error case.

81
00:05:29.289 --> 00:05:34.161
I use tuples of length 2 all the time,
where I kind of will have some

82
00:05:34.161 --> 00:05:39.646
indication of success or failure and
then information about the success.

83
00:05:39.646 --> 00:05:43.197
The string error, and then here's
an error that needs to be thrown,

84
00:05:43.197 --> 00:05:44.369
something like that.

85
00:05:44.369 --> 00:05:49.044
So we do get some value in type checking.

86
00:05:49.044 --> 00:05:53.486
Here, we're told we don't have
the correct number of elements, so

87
00:05:53.486 --> 00:05:58.399
that's good, but there's some
interesting stuff that starts to happen.

88
00:05:58.399 --> 00:06:00.030
So let's look at this.

89
00:06:00.030 --> 00:06:04.881
This is an array literal, right,
because it's a value we're creating,

90
00:06:04.881 --> 00:06:06.809
containing three elements.

91
00:06:06.809 --> 00:06:11.614
.length is number, as it should be, right,
cuz we could push stuff into this array.

92
00:06:11.614 --> 00:06:16.079
If only we had a variable, where we had
a handle on it, we could add stuff to it.

93
00:06:16.079 --> 00:06:19.778
But let's look at this tuple,
numPair.length.

94
00:06:19.778 --> 00:06:20.835
it's of length 2.

95
00:06:20.835 --> 00:06:24.223
So TypeScript knows this is a tuple,
the length is always 2,

96
00:06:24.223 --> 00:06:26.190
it's specifically the number 2.

97
00:06:26.190 --> 00:06:28.659
This is a literal type popping up again.

98
00:06:28.659 --> 00:06:32.430
It's the set of values that are 2.

99
00:06:32.430 --> 00:06:35.594
It's got one thing in there, the number 2.

100
00:06:35.594 --> 00:06:38.014
Now, what happens, though,

101
00:06:38.014 --> 00:06:43.794
is we still find that because underneath
the tuple is a JavaScript array.

102
00:06:43.794 --> 00:06:48.134
We're not getting any safety when
it comes to pushing and popping.

103
00:06:48.134 --> 00:06:51.462
Here, we're adding 6,
and so we get 4, 5, 6,

104
00:06:51.462 --> 00:06:54.669
and then we pop, and
then we pop, and then we pop.

105
00:06:54.669 --> 00:06:59.236
And check this out, the length, it's still
saying it's of type 2, but we know this is

106
00:06:59.236 --> 00:07:03.034
effectively empty at this point cuz
we've popped everything out of it.

107
00:07:03.034 --> 00:07:06.576
So it's kind of tuples are nice, but

108
00:07:06.576 --> 00:07:11.833
we haven't really seen a whole
lot of safety here yet,

109
00:07:11.833 --> 00:07:16.309
aside from the original assignment, right?

110
00:07:16.309 --> 00:07:24.354
However, There's a keyword you
can use here called readonly.

111
00:07:24.354 --> 00:07:29.237
And what this does is it
tells TypeScript that it

112
00:07:29.237 --> 00:07:33.519
should treat this as an immutable array.

113
00:07:33.519 --> 00:07:39.655
So here, if we hover over the type, you
can see it's a readonly number, number.

114
00:07:39.655 --> 00:07:42.720
The length, well, we expect it to be 2.

115
00:07:42.720 --> 00:07:45.944
It's still 2, but look what happens here.

116
00:07:45.944 --> 00:07:52.539
Push and pop, they don't exist, we're not
allowed to mess with these things anymore.

117
00:07:52.539 --> 00:07:56.180
So the readonly keyword,
when used with tuples, is pretty cool.

118
00:07:56.180 --> 00:08:01.493
You get very close to a degree of safety,
where you can rely

119
00:08:01.493 --> 00:08:07.579
on these things being the shape
they were when you generated them.

120
00:08:07.579 --> 00:08:11.745
What would you do if you wanted to
guarantee a fixed size array like a tuple

121
00:08:11.745 --> 00:08:13.530
but want to change the values?

122
00:08:13.530 --> 00:08:18.099
Tuples inherently allow you to do that.

123
00:08:18.099 --> 00:08:20.756
Let's see how readonly works there.

124
00:08:33.024 --> 00:08:36.469
Yeah, it prevents you from doing that.

125
00:08:36.469 --> 00:08:38.635
So it is a bit of a trade off.

126
00:08:38.635 --> 00:08:41.279
What I would say is, generally,

127
00:08:41.279 --> 00:08:46.286
if you're dealing with immutable
data structures like this,

128
00:08:46.286 --> 00:08:52.530
you will end up just creating a new tuple
that has the rest of an existing tuple.

129
00:08:52.530 --> 00:08:54.571
To change the first element,

130
00:08:54.571 --> 00:08:59.809
you'd probably set a brand new first
element and then spread the old tuple.

131
00:08:59.809 --> 00:09:02.409
Destructure the old first element out,
take the rest, and

132
00:09:02.409 --> 00:09:04.699
spread it into the new tuple,
something like that.

133
00:09:04.699 --> 00:09:09.405
But yeah, that is a consequence
of working with a readonly array.

134
00:09:15.039 --> 00:09:18.921
Abhishek asks,
how do we create a two-dimensional array?

135
00:09:18.921 --> 00:09:22.364
It would just be like this,
same as you would imagine.

136
00:09:33.234 --> 00:09:37.889
There's twod, threed, fourd,
fived into the multiverse we go.

137
00:09:37.889 --> 00:09:41.699
Next, we're gonna talk about
structural versus nominal type systems.

138
00:09:41.699 --> 00:09:45.794
We've seen enough of TypeScripts so
far to sort of develop an intuition for

139
00:09:45.794 --> 00:09:47.095
how TypeScript works.

140
00:09:47.095 --> 00:09:51.021
And I wanna compare this to
other programming languages and

141
00:09:51.021 --> 00:09:54.004
other type systems you
might see in the wild so

142
00:09:54.004 --> 00:09:58.100
you can understand how TypeScript
is a little bit different.

143
00:09:58.100 --> 00:10:02.598
This is an important part of building
that mental model we talked about,

144
00:10:02.598 --> 00:10:07.244
where knowing what TypeScript means
when it's checking to see whether two

145
00:10:07.244 --> 00:10:08.807
values are compatible.

146
00:10:08.807 --> 00:10:11.880
We wanna understand how
TypeScript does that.

