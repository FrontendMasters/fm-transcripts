WEBVTT

1
00:00:00.310 --> 00:00:05.310
The last topic we're going to
cover in this course is generics.

2
00:00:07.170 --> 00:00:11.012
This is really getting to
the end of fundamentals and

3
00:00:11.012 --> 00:00:15.750
sort of tipping your toe
into the intermediate level.

4
00:00:15.750 --> 00:00:17.579
And if you wanna go deeper than this,

5
00:00:17.579 --> 00:00:20.960
check out the intermediate
TypeScript course.

6
00:00:20.960 --> 00:00:26.044
We pick up right where we leave off here
and we start working with generics and

7
00:00:26.044 --> 00:00:32.100
talking about more interesting and
powerful things that layer on top of it.

8
00:00:32.100 --> 00:00:36.171
Generics let us parameterize types and

9
00:00:36.171 --> 00:00:40.979
it allows us to create
more reusable types that

10
00:00:40.979 --> 00:00:46.500
can be expressed in terms
of type parameters.

11
00:00:46.500 --> 00:00:51.382
So let's talk about a motivating use case
because I don't wanna just throw abstract

12
00:00:51.382 --> 00:00:54.832
stuff at you and tell you that
it works this particular way.

13
00:00:54.832 --> 00:00:57.130
Let's ground this in a story.

14
00:00:57.130 --> 00:01:02.920
So I'm back to my contact information app.

15
00:01:02.920 --> 00:01:05.200
I wanna store phone numbers, right?

16
00:01:05.200 --> 00:01:06.886
Now I have an index signature here.

17
00:01:06.886 --> 00:01:12.071
So each in my dictionary of phone numbers,

18
00:01:12.071 --> 00:01:17.543
each value has a customer id,
an area code and

19
00:01:17.543 --> 00:01:22.450
a num, this is a number, phone number.

20
00:01:23.910 --> 00:01:28.451
And we can see that I can hang
whatever I want off of this thing and

21
00:01:28.451 --> 00:01:30.520
they all have the same type.

22
00:01:30.520 --> 00:01:31.580
Here you go.

23
00:01:31.580 --> 00:01:33.740
All have the same type.

24
00:01:33.740 --> 00:01:35.550
I'm going to switch to my code actually.

25
00:01:35.550 --> 00:01:38.349
You can follow along on the website,
but it's the same stuff.

26
00:01:40.210 --> 00:01:45.740
So let's say had a list of these

27
00:01:45.740 --> 00:01:51.090
phone numbers here, right?

28
00:01:51.090 --> 00:01:56.950
And I want to create a dictionary of them.

29
00:01:56.950 --> 00:02:01.560
I have something like this and
I want to end up with something like this.

30
00:02:01.560 --> 00:02:04.510
And I'll tell you where
we're going to go here.

31
00:02:04.510 --> 00:02:05.910
I'm here.

32
00:02:05.910 --> 00:02:07.770
So I'm not trying to throw
a crazy twist at you.

33
00:02:07.770 --> 00:02:10.760
We're going to solve this
problem specifically.

34
00:02:10.760 --> 00:02:13.401
And then we're going to widen it out,
and then to put

35
00:02:13.401 --> 00:02:17.980
the generic solution that will allow us
to go from a data structure like this.

36
00:02:17.980 --> 00:02:22.560
To one like this, in the general case,
phone numbers, anything else.

37
00:02:24.530 --> 00:02:30.160
So, first off, we're going to create
an interface representing phone info.

38
00:02:30.160 --> 00:02:34.290
It's the same type of object that we were
seeing in that index signature before.

39
00:02:34.290 --> 00:02:40.570
And what we want in the end,
this is just the type of the function.

40
00:02:40.570 --> 00:02:45.522
We're kind of just stating what we're
taking in as an argument, that,

41
00:02:45.522 --> 00:02:49.190
and what we're returning
at the end of the function.

42
00:02:49.190 --> 00:02:51.360
In fact,
I can implement this really quickly.

43
00:02:52.990 --> 00:02:54.960
Done, all right, let's go home.

44
00:02:54.960 --> 00:02:57.590
No, we still have a lot of work to do.

45
00:02:57.590 --> 00:02:59.690
In particular,
we need to provide this third thing.

46
00:02:59.690 --> 00:03:05.300
It's a function that we use to
determine the ID of each object.

47
00:03:05.300 --> 00:03:11.210
So, if we look at this,
we need to figure out this here, right?

48
00:03:11.210 --> 00:03:16.340
Given one of these, we need to
extract out, like, what's the key?

49
00:03:16.340 --> 00:03:19.880
I want the stored in the dictionary as.

50
00:03:19.880 --> 00:03:24.680
So I'm going to take in a function there
because I want my caller to be able to

51
00:03:24.680 --> 00:03:27.410
provide me with that information.

52
00:03:27.410 --> 00:03:31.996
The caller gives me the list, the caller
tells me how each item of the list should

53
00:03:31.996 --> 00:03:34.811
be treated, and
I'll spit out the dictionary.

54
00:03:40.175 --> 00:03:43.378
So the first thing we need in our function

55
00:03:43.378 --> 00:03:48.290
body here is to initialize a data
structure of the right type.

56
00:03:48.290 --> 00:03:52.487
We can return it at the end.

57
00:03:56.249 --> 00:04:02.120
And we want to loop through every
element of the array, right?

58
00:04:02.120 --> 00:04:04.350
So this is the list of phone numbers.

59
00:04:04.350 --> 00:04:09.620
For each of them, we're going to take this
element, which is a PhoneInfo, right?

60
00:04:09.620 --> 00:04:16.490
So it's just one of these, and
we're going to get the key from it.

61
00:04:16.490 --> 00:04:18.100
The dictionary key.

62
00:04:18.100 --> 00:04:21.550
I'm going to invoke the callback
that I'm provided with.

63
00:04:21.550 --> 00:04:25.211
Remember, it's the caller's
responsibility to tell me,

64
00:04:25.211 --> 00:04:30.410
each member of the array, how do I obtain
an ID from that member of the array?

65
00:04:30.410 --> 00:04:34.139
And so it's going to generate an ID,
it's going to take a phone info in, and

66
00:04:34.139 --> 00:04:35.730
it's going to return a string.

67
00:04:37.200 --> 00:04:39.300
So that's my dictionary key.

68
00:04:39.300 --> 00:04:42.752
Then I'm going to take my dictionary,
and under the key,

69
00:04:42.752 --> 00:04:45.570
I'm going to store the element.

70
00:04:45.570 --> 00:04:46.660
Everyone following so far?

71
00:04:47.700 --> 00:04:48.200
Good.

72
00:04:49.750 --> 00:04:54.660
Okay, and this is what we're
going to get as the output.

73
00:04:55.810 --> 00:04:59.097
So, we would we would get this result out.

74
00:05:01.115 --> 00:05:02.350
And this will work.

75
00:05:02.350 --> 00:05:05.720
If we were to run this code,
it would work.

76
00:05:07.920 --> 00:05:11.350
But, it's not very generalised, is it?

77
00:05:11.350 --> 00:05:14.250
There's phone info all over the place.

78
00:05:14.250 --> 00:05:18.652
What if we wanted this to work in a way
where we could do an array of dates, or

79
00:05:18.652 --> 00:05:21.563
we could do an array of,
I don't know payments,

80
00:05:21.563 --> 00:05:24.200
each of which has an ID
something like that.

81
00:05:24.200 --> 00:05:27.068
And we want the ability
to say here's a list,

82
00:05:27.068 --> 00:05:30.480
transform it into a dictionary for me.

83
00:05:30.480 --> 00:05:32.096
So if we want to generalize this,

84
00:05:32.096 --> 00:05:35.402
we're going to have to change
the function signature a little bit.

85
00:05:40.719 --> 00:05:44.220
And let's start by
making it more flexible.

86
00:05:44.220 --> 00:05:49.580
So to make it more flexible, I need to
be able to return a list of anything.

87
00:05:52.020 --> 00:05:52.520
I could do this.

88
00:06:04.266 --> 00:06:08.641
Great, now it works with
whatever I need it to work with.

89
00:06:10.183 --> 00:06:11.620
I mean, is anyone happy with this?

90
00:06:13.350 --> 00:06:16.870
Are these some great types
that we've written out here?

91
00:06:16.870 --> 00:06:19.620
Not really, any is all over the place.

92
00:06:19.620 --> 00:06:26.072
We have flexibility now, we needed to sort
of broaden what we tolerate as inputs,

93
00:06:26.072 --> 00:06:30.009
but we've lost all that
great type information.

94
00:06:31.250 --> 00:06:35.890
So what we need to do is
define a type parameter.

95
00:06:35.890 --> 00:06:37.339
I'll uncomment these so

96
00:06:37.339 --> 00:06:40.790
you can see the little clues
that I'm reading as I go along.

97
00:06:40.790 --> 00:06:45.692
I already know how to do this one here,
but the we're going to define

98
00:06:45.692 --> 00:06:50.560
a type parameter and
we're going to start writing it this way.

99
00:06:50.560 --> 00:06:56.900
So this, you can almost think of this
as another arguments list for types.

100
00:06:59.260 --> 00:07:02.940
So, I could do something like that.

101
00:07:04.020 --> 00:07:05.614
It's just like an arguments list for
a function.

102
00:07:09.732 --> 00:07:14.300
In case you're wondering, you might
see T all over the place for generics.

103
00:07:14.300 --> 00:07:17.344
You can trace that back to,
I think they're called,

104
00:07:17.344 --> 00:07:22.450
I've gotta think back to my C++ days,
template classes, T for template classes.

105
00:07:22.450 --> 00:07:26.290
So it's just a cargo call,
a convention that people stick to.

106
00:07:26.290 --> 00:07:28.780
You can make this whatever you want.

107
00:07:28.780 --> 00:07:32.360
I can make as many letters,
whatever you want.

108
00:07:32.360 --> 00:07:37.660
The conventional, its capital, it's helps
disambiguate between function arguments,

109
00:07:37.660 --> 00:07:40.170
which should start with lowercase.

110
00:07:40.170 --> 00:07:43.580
Okay, so we have this type T and

111
00:07:43.580 --> 00:07:48.440
we're going to say we
take in an array of Ts.

112
00:07:50.700 --> 00:07:52.974
And we're going to say,

113
00:07:52.974 --> 00:07:58.510
our ID generation function takes
in a t and returns a string.

114
00:07:59.850 --> 00:08:06.310
And ultimately what our function's
going to return is a dictionary of Ts.

115
00:08:06.310 --> 00:08:07.630
Sorry, this isn't in any array.

116
00:08:07.630 --> 00:08:08.130
This should be just a t.

117
00:08:11.748 --> 00:08:14.670
All right, T for everyone.

118
00:08:14.670 --> 00:08:18.500
So, okay, now,
this is starting to look interesting.

119
00:08:18.500 --> 00:08:21.770
Let's see what our function
invocation looks like.

120
00:08:21.770 --> 00:08:24.080
Okay, that's something.

121
00:08:24.080 --> 00:08:28.110
Notice how this is between
the angle brackets there.

122
00:08:28.110 --> 00:08:31.525
Our type param has been inferred,

123
00:08:31.525 --> 00:08:36.430
meaning we passed in
this phone list thing.

124
00:08:36.430 --> 00:08:39.569
And we knew we're taking
in an array of Ts, so

125
00:08:39.569 --> 00:08:43.205
you can think of it as the type
param is figured out for

126
00:08:43.205 --> 00:08:49.650
you behind the scenes by TypeScript based
on what you're passing into the function.

127
00:08:49.650 --> 00:08:55.270
So you don't often need to
explicitly state your type params.

128
00:08:55.270 --> 00:08:58.790
Sometimes you do in cases
where it can't be inferred.

129
00:08:58.790 --> 00:09:00.273
But in a lot of cases,

130
00:09:00.273 --> 00:09:06.490
you might be benefiting from generics from
type parameters without even knowing it.

131
00:09:06.490 --> 00:09:09.320
That's kind of the best
type of generics were like.

132
00:09:09.320 --> 00:09:10.220
Engaging with them.

133
00:09:10.220 --> 00:09:11.440
It's simple.

134
00:09:11.440 --> 00:09:14.510
You don't even know they're helping you.

135
00:09:14.510 --> 00:09:17.890
But you get all this great type
information coming out the other end.

136
00:09:17.890 --> 00:09:19.250
Look at our result.

137
00:09:19.250 --> 00:09:24.840
It's a dictionary of these objects
here of our phone info objects.

138
00:09:25.980 --> 00:09:29.140
And we get type checking.

139
00:09:29.140 --> 00:09:33.152
In our little callback here, because
we've taken an argument of type T, and

140
00:09:33.152 --> 00:09:33.780
here it is.

141
00:09:33.780 --> 00:09:38.010
So if we were to look at the type
of that argument, look at that.

142
00:09:38.010 --> 00:09:38.510
Here it is.

143
00:09:38.510 --> 00:09:41.940
Here's the arg, here's the return value.

144
00:09:43.620 --> 00:09:46.204
So we get type checking
all the way through.

145
00:09:49.459 --> 00:09:52.006
This is a type param,
that's what's working for us here.

146
00:09:54.952 --> 00:09:58.401
So let's take a little bit of a step back
and look at a simpler example, just so

147
00:09:58.401 --> 00:09:59.954
we can wrap our heads around this.

148
00:09:59.954 --> 00:10:06.748
Let's define a much simpler typed
function, and we'll call this wrapInArray.

149
00:10:12.939 --> 00:10:19.090
So this function just takes in an argument
and returns it in a tuple of size 1.

150
00:10:19.090 --> 00:10:20.210
That's all it does.

151
00:10:20.210 --> 00:10:21.210
This is it.

152
00:10:21.210 --> 00:10:22.780
That's the whole story.

153
00:10:22.780 --> 00:10:26.608
So if we say wrapInArray(3), well, look,

154
00:10:26.608 --> 00:10:32.350
we've passed in a number and
it's figured out what t should be.

155
00:10:32.350 --> 00:10:37.400
And it returns this,
a tuple of size one with a number in it.

156
00:10:37.400 --> 00:10:42.250
If we do the same thing with date,
it figures that out.

157
00:10:42.250 --> 00:10:46.180
It's like auto setting T for
us behind the scenes.

158
00:10:46.180 --> 00:10:50.240
We do it for RegExp look at that.

159
00:10:50.240 --> 00:10:55.405
So we get this flexibility,
the same flexibility we got with any,

160
00:10:55.405 --> 00:10:58.273
but we're not losing specificity.

161
00:10:58.273 --> 00:11:03.124
We're not losing all of that type
information by calling this function and

162
00:11:03.124 --> 00:11:05.440
getting a bunch of anys coming out.

163
00:11:05.440 --> 00:11:05.967
We get to keep that.

164
00:11:11.837 --> 00:11:14.082
Let's see, can I do that wrapInArray?

165
00:11:14.082 --> 00:11:15.930
I would've to do this, right?

166
00:11:15.930 --> 00:11:16.930
It's all in there.

167
00:11:16.930 --> 00:11:21.090
There's my exec method,
which is on RegExp.

168
00:11:22.190 --> 00:11:25.172
So all of the type information
is flowing through.

