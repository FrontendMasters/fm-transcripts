WEBVTT

1
00:00:00.000 --> 00:00:06.272
Next we're gonna talk about
objects arrays and tuples,

2
00:00:06.272 --> 00:00:13.068
so in JavaScript you're familiar
with creating an object for

3
00:00:13.068 --> 00:00:17.783
something like a car that looks like this.

4
00:00:21.746 --> 00:00:25.680
Right, you got to make a model
any air three properties.

5
00:00:25.680 --> 00:00:28.250
The first two are strings,
the last one is a number.

6
00:00:28.250 --> 00:00:31.520
We have an equal sign here,
that's the assignment, right?

7
00:00:31.520 --> 00:00:36.202
And if we hover over this you can
see TypeScript is telling us what

8
00:00:36.202 --> 00:00:38.121
the type of this value is.

9
00:00:38.121 --> 00:00:42.851
So object types, just like objects,
are wrapped in braces, and

10
00:00:42.851 --> 00:00:45.690
the key thing to look for is this colon.

11
00:00:45.690 --> 00:00:48.766
That's how you know we're not
doing an assignment here,

12
00:00:48.766 --> 00:00:51.110
an initialization of this property.

13
00:00:51.110 --> 00:00:52.970
We're simply stating its type.

14
00:00:52.970 --> 00:00:57.664
So previously in the last chapter when we
were doing colon date, this is something

15
00:00:57.664 --> 00:01:02.030
very similar except we're describing
the type as an object type like this.

16
00:01:03.810 --> 00:01:06.890
You can have field names here.

17
00:01:06.890 --> 00:01:10.751
And then types that are you know the type
that you're willing to accept for

18
00:01:10.751 --> 00:01:12.040
each field name.

19
00:01:12.040 --> 00:01:16.833
Note that you don't need commas here you
can use semicolons if you want depending

20
00:01:16.833 --> 00:01:22.290
on your preference for using semicolons in
other areas of your JavaScript code base.

21
00:01:22.290 --> 00:01:28.827
But this is our first
example of an object type.

22
00:01:28.827 --> 00:01:35.845
So we could create a function that uses
an object type to describe its argument.

23
00:01:35.845 --> 00:01:41.330
Okay so here we're saying we
have a function called print

24
00:01:41.330 --> 00:01:48.541
car we take an argument called car whose
type is this make model year thing.

25
00:01:48.541 --> 00:01:53.455
And then we when we run console.log you
can see our autocomplete is telling

26
00:01:53.455 --> 00:01:58.369
us these properties are available when
we hover over each of them you can see

27
00:01:58.369 --> 00:02:02.986
make is a string, model is a string,
year should be a number, right?

28
00:02:02.986 --> 00:02:08.110
So this is what lets us safely use
these properties within the function if

29
00:02:08.110 --> 00:02:13.291
we did this We would say, flat tires is

30
00:02:13.291 --> 00:02:17.865
not a thing on cars, so this is more value
that TypeScript is giving you, right?

31
00:02:17.865 --> 00:02:21.075
You get to state up front
what this thing has, and

32
00:02:21.075 --> 00:02:26.022
you will be alerted to any use of
something that's not defined on the type.

33
00:02:33.308 --> 00:02:37.330
So we're getting an error saying car
is used before it's being assigned.

34
00:02:37.330 --> 00:02:38.300
Let's just do this.

35
00:02:40.770 --> 00:02:43.270
We'll set equal to my car.

36
00:02:43.270 --> 00:02:45.130
And now the function's happy.

37
00:02:45.130 --> 00:02:50.028
So TypeScript knows whether variables have
been initialized or not, and it will.

38
00:02:50.028 --> 00:02:53.173
Warn you if you're trying to use
it before it was set to something.

39
00:02:58.441 --> 00:03:06.770
So what if we wanted to introduce as
part of like an electric car feature.

40
00:03:06.770 --> 00:03:12.280
We wanted to introduce the concept
of a charging voltage.

41
00:03:12.280 --> 00:03:16.810
I don't have an electric car, but I assume
they have different charging voltages like

42
00:03:16.810 --> 00:03:19.615
for fast charge and
slow charge something like that.

43
00:03:19.615 --> 00:03:22.848
Let's pretend them right
&gt;&gt; 110 or 221?

44
00:03:22.848 --> 00:03:24.340
&gt;&gt; 110 or 220, there you go.

45
00:03:25.660 --> 00:03:28.254
So I'm just gonna take
this code block here,

46
00:03:28.254 --> 00:03:31.460
this is the contents of
our function up top.

47
00:03:31.460 --> 00:03:35.600
And I'm gonna replace
this one line with this.

48
00:03:35.600 --> 00:03:39.180
So now I'm saying,
I think I left this here just so

49
00:03:39.180 --> 00:03:44.520
we could hover over the type, but
we can do that just fine with it here.

50
00:03:44.520 --> 00:03:50.269
So we can say if the car's charging
voltage is not equal to undefined.

51
00:03:51.740 --> 00:03:55.590
Or we could write this as, if it's
equal to a number, you could do either.

52
00:03:58.860 --> 00:04:03.560
Then we're going to add to this string,

53
00:04:03.560 --> 00:04:07.300
what's the charging voltage?

54
00:04:09.020 --> 00:04:11.330
And we'll do console log string.

55
00:04:12.580 --> 00:04:15.848
But charging voltage is not there,
and we need to account for

56
00:04:15.848 --> 00:04:18.170
the fact that not all cars are electric.

57
00:04:18.170 --> 00:04:21.970
Charging voltage doesn't make
sense on a gasoline car, so

58
00:04:21.970 --> 00:04:24.555
we need this to be an optional property.

59
00:04:24.555 --> 00:04:29.990
And what we can do is add it here,
and we're gonna use It actually

60
00:04:29.990 --> 00:04:35.125
copilot is super annoying today
we can use this question mark

61
00:04:35.125 --> 00:04:41.588
to indicate charge charging voltage
like might be there might not be there.

62
00:04:41.588 --> 00:04:48.140
And if we hover over that we can see
that if you if you believe this pipe.

63
00:04:48.140 --> 00:04:53.397
In the tool tip where it says number
pipe undefined, if you think of that as,

64
00:04:53.397 --> 00:04:58.010
or we use double pipe and logic,
logical Boolean operators here.

65
00:05:00.070 --> 00:05:02.200
There's a potential that it's not there.

66
00:05:02.200 --> 00:05:07.777
And the fact that we're checking on
it here, check this out number or

67
00:05:07.777 --> 00:05:12.700
undefined, but once we make it
past this it's just number.

68
00:05:13.950 --> 00:05:18.122
Once we make it past this check,
TypeScript knows that we've

69
00:05:18.122 --> 00:05:23.060
sort of eliminated the possibility
that it's undefined.

70
00:05:23.060 --> 00:05:25.610
And that lets us treat this as a number.

71
00:05:25.610 --> 00:05:27.280
We'll learn more about this later.

72
00:05:27.280 --> 00:05:31.220
But what we're seeing
here is a type guard,

73
00:05:31.220 --> 00:05:37.420
which is sort of a condition that
has type implications, right?

74
00:05:37.420 --> 00:05:39.480
The condition is we're using type of.

75
00:05:39.480 --> 00:05:41.820
That's gonna work in regular JavaScript.

76
00:05:41.820 --> 00:05:46.756
But TypeScript knows that this has special
meaning that pertains to the type of

77
00:05:46.756 --> 00:05:48.130
charge voltage.

78
00:05:48.130 --> 00:05:50.230
That's what makes it a type guard.

79
00:05:50.230 --> 00:05:54.771
And then we see an effect
that is called narrowing,

80
00:05:54.771 --> 00:06:01.120
which means an increased specificity
of type within this code branch.

81
00:06:01.120 --> 00:06:06.150
We'll add braces here to make it
obvious fall within these braces.

82
00:06:06.150 --> 00:06:08.090
Charge voltage is a number.

83
00:06:08.090 --> 00:06:11.400
So we've made it more specific,
why do I say it's more specific?

84
00:06:11.400 --> 00:06:16.251
If we think about our analogy of sets,
charge voltage,

85
00:06:16.251 --> 00:06:21.622
the set up here the allowed values
of what all possible numbers

86
00:06:21.622 --> 00:06:26.390
that you can create in JavaScript and
also undefined.

87
00:06:27.650 --> 00:06:32.850
And in here, it's more specific
because we've eliminated undefined.

88
00:06:32.850 --> 00:06:33.850
It's a smaller set.

89
00:06:33.850 --> 00:06:35.850
It's a subset of the original.

90
00:06:35.850 --> 00:06:37.410
So we've narrowed it down.

91
00:06:37.410 --> 00:06:38.520
Only slightly, but

92
00:06:38.520 --> 00:06:42.330
in a very important way that lets
us use this as a defined property.

93
00:06:42.330 --> 00:06:45.560
So we can see here our
original function will work.

94
00:06:47.180 --> 00:06:54.660
And if we pass in a charge
voltage that's fine too.

95
00:06:56.320 --> 00:06:59.027
That's an optional property.

96
00:06:59.027 --> 00:07:04.170
And by the way, the same thing
works on function arguments here.

97
00:07:04.170 --> 00:07:05.950
This is gonna blow up the function here.

98
00:07:05.950 --> 00:07:08.050
It's gonna be very unhappy,
but I can do this.

99
00:07:09.830 --> 00:07:14.708
And now we're gonna be told Whoa, we don't
even know if cars here like you can't

100
00:07:14.708 --> 00:07:18.590
just reach in there for
a dot make that's not safe.

101
00:07:18.590 --> 00:07:22.638
Up here we'd have to say like,

102
00:07:22.638 --> 00:07:26.680
if car or if yeah if not car.

103
00:07:26.680 --> 00:07:28.223
No card to print, exit.

104
00:07:28.223 --> 00:07:31.474
All right, and now down here we could say,
all right, well, we know the car is here.

105
00:07:31.474 --> 00:07:37.278
We know the function exited in
the case where it was undefined.

106
00:07:37.278 --> 00:07:38.880
This is another type card, right?

107
00:07:38.880 --> 00:07:44.000
TypeScript knows this isn't just
any old Boolean, any old condition.

108
00:07:44.000 --> 00:07:46.280
This is something that has meaning.

109
00:07:46.280 --> 00:07:51.080
as it pertains to the type of car and
it knows that we return.

110
00:07:51.080 --> 00:07:56.140
And so it knows well if you're down here
there's no question mark here anymore.

111
00:07:57.460 --> 00:07:58.150
We've narrowed.

112
00:07:58.150 --> 00:08:05.530
I'm gonna undo this cuz I
think examples down below.

113
00:08:05.530 --> 00:08:08.170
Depend on this actually accepting a car.

114
00:08:08.170 --> 00:08:12.040
All right, great.

115
00:08:13.570 --> 00:08:19.770
So TypeScript does this thing called
excess property checking around objects.

116
00:08:19.770 --> 00:08:23.770
And what we've done here is
we've added a color field.

117
00:08:23.770 --> 00:08:27.467
To this, this car object, and
we're saying it's red and

118
00:08:27.467 --> 00:08:30.190
TypeScript getting all angry at us.

119
00:08:30.190 --> 00:08:34.446
It's saying object literal may
only specify known properties and

120
00:08:34.446 --> 00:08:36.710
color does not exist in type.

121
00:08:36.710 --> 00:08:40.850
And then it lists the type that we've
actually defined for the argument to

122
00:08:40.850 --> 00:08:45.990
the print car function, so let's saying
we can only list known properties.

123
00:08:45.990 --> 00:08:51.210
And you might wonder, why would TypeScript
prevent us from passing this in?

124
00:08:51.210 --> 00:08:54.400
We're giving it everything
at once make model and year.

125
00:08:54.400 --> 00:08:58.400
There's no charging voltage here, but we
don't need to provide that it's optional.

126
00:08:58.400 --> 00:09:01.750
Why would it object to us passing this in?

127
00:09:01.750 --> 00:09:03.624
And it has to do with.

128
00:09:05.554 --> 00:09:07.980
There being no point to doing this.

129
00:09:07.980 --> 00:09:10.770
Meaning, this is an object literal.

130
00:09:10.770 --> 00:09:15.200
We have a field here, that is not
going to be used inside the printCar

131
00:09:15.200 --> 00:09:20.050
function because the printCar is
typed like there's no color here.

132
00:09:20.050 --> 00:09:23.975
So within the printCar function, you're
not gonna be able to reach for color.

133
00:09:23.975 --> 00:09:26.870
Okay, so it's fairly pointless for
us to do this.

134
00:09:26.870 --> 00:09:28.510
It's an excess property.

135
00:09:28.510 --> 00:09:35.760
Now, if we wanted to,
we could take this and now pass it in.

136
00:09:37.220 --> 00:09:42.539
And TypeScript is not going to object to
this because now there's a variable here.

137
00:09:44.620 --> 00:09:49.429
And we can access color like there
is some scope where we can access

138
00:09:49.429 --> 00:09:54.239
the color property and it's no
longer just this sort of this thing

139
00:09:54.239 --> 00:09:58.460
that's just almost guaranteed
to be safely removable.

140
00:09:59.560 --> 00:10:00.525
I have a question from chat.

141
00:10:00.525 --> 00:10:06.545
&gt;&gt; Yeah, would this be the same thing
as if you use the spread operator and

142
00:10:06.545 --> 00:10:09.721
spread it into the function as well?

143
00:10:12.575 --> 00:10:17.460
It wouldn't check for the extra property
if you spread an object into there.

144
00:10:19.480 --> 00:10:21.350
&gt;&gt; So that's a little bit different.

145
00:10:21.350 --> 00:10:26.020
Let me address that with an example
here about the spread operator.

146
00:10:26.020 --> 00:10:29.202
So, let's create a new function here, and

147
00:10:29.202 --> 00:10:33.330
I'm going to make a little
section here in the notes, and

148
00:10:33.330 --> 00:10:38.851
we'll call this, I see what you're
saying with the spread operator.

149
00:10:38.851 --> 00:10:42.562
&gt;&gt; Yeah, if you spread my arms into there,
it wouldn't or just the object.

150
00:10:42.562 --> 00:10:44.671
&gt;&gt; Well,
you'd still have to do like this, right?

151
00:10:48.206 --> 00:10:52.065
The point here,
I don't think the spread operator,

152
00:10:52.065 --> 00:10:55.080
let's try the worst the worst scenario.

153
00:10:55.080 --> 00:10:56.580
&gt;&gt; It might be irrelevant,
to be honest, but.

154
00:10:56.580 --> 00:10:59.416
&gt;&gt; It might be irrelevant,
I'm curious now.

155
00:10:59.416 --> 00:11:01.140
Yeah, so here you go.

156
00:11:01.140 --> 00:11:04.220
We've defeated TypeScript's
helpfulness here.

157
00:11:04.220 --> 00:11:10.290
We've we've created a value here and
we've spread it into an outer object.

158
00:11:10.290 --> 00:11:13.530
And yes, like TypeScript no
longer warns us about this.

159
00:11:13.530 --> 00:11:15.900
Now, it's still the same problem.

160
00:11:15.900 --> 00:11:19.990
There is nowhere because this is
an object literal, it's not a variable.

161
00:11:19.990 --> 00:11:22.410
So we have nowhere like
in this scope out here.

162
00:11:22.410 --> 00:11:26.750
We can access color,
we can't access it from within print car.

163
00:11:26.750 --> 00:11:30.411
So this is like you're defeating
the helpfulness here, but

164
00:11:30.411 --> 00:11:32.580
you're like this is a valid point.

165
00:11:32.580 --> 00:11:36.514
This does not make the error occur,
but it's also like when you just take

166
00:11:36.514 --> 00:11:43.455
an object like this and
spread it in It's kind of odd here.

167
00:11:43.455 --> 00:11:45.610
Now, of course, you could do this.

168
00:11:45.610 --> 00:11:48.612
I'm changing my opinion here slightly.

169
00:11:48.612 --> 00:11:49.395
Let's do this.

170
00:11:52.239 --> 00:11:57.518
So you need much more
sophisticated analysis here.

171
00:11:57.518 --> 00:12:01.208
To figure out within
a spread statement here,

172
00:12:01.208 --> 00:12:05.094
what's usable and
what's not usable, right?

173
00:12:05.094 --> 00:12:08.380
We're not creating an object literal
in the simple sense anymore.

174
00:12:08.380 --> 00:12:12.685
We're assembling an object like behind the
scenes, you can almost think of this as

175
00:12:12.685 --> 00:12:16.019
like object assigned and
you're building up your object here.

176
00:12:17.440 --> 00:12:19.749
Maybe one day,
TypeScript will figure this out, but

177
00:12:19.749 --> 00:12:22.070
there's a lot more dynamic behavior here.

178
00:12:22.070 --> 00:12:25.925
You could even, if you had
a function that returned an object,

179
00:12:25.925 --> 00:12:28.980
you could do something like that, right?

180
00:12:28.980 --> 00:12:31.260
And take its return value and spread it.

181
00:12:31.260 --> 00:12:35.839
And so it's not as simple of an analysis
as just looking at a property and seeing.

182
00:12:35.839 --> 00:12:37.956
All right,
this field you should get rid of.

