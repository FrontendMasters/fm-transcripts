WEBVTT

1
00:00:00.240 --> 00:00:01.250
&gt;&gt; Mathew DesLauriers: And
so, the next thing we'll do,

2
00:00:01.250 --> 00:00:07.040
maybe is, why don't we just
introduce a bit of color?

3
00:00:07.040 --> 00:00:10.820
So I'm gonna change this to say color,
and I'm gonna create a new

4
00:00:12.050 --> 00:00:15.130
variable called color, rather than
putting it all in a single line.

5
00:00:17.090 --> 00:00:21.360
And maybe what we'll do, is we'll say,

6
00:00:22.460 --> 00:00:27.740
we can start to play around here with
some math, sometimes, it's kind of fun.

7
00:00:27.740 --> 00:00:32.570
So we can, I'm sort of just riffing here,
but we can say sign.

8
00:00:32.570 --> 00:00:36.020
This is like Math.sign in JavaScript.

9
00:00:36.020 --> 00:00:42.370
We can say sin of time, and
we can just try a few different variables.

10
00:00:42.370 --> 00:00:47.340
This might give us an odd effect
where it goes to pure white, and

11
00:00:47.340 --> 00:00:50.160
then, it sort of fades down to black.

12
00:00:50.160 --> 00:00:53.690
And what's happening is that we're
putting time which is a, in seconds,

13
00:00:53.690 --> 00:00:58.110
between zero and how ever many
seconds this loop is running for.

14
00:00:58.110 --> 00:01:00.700
And we're doing sin with time.

15
00:01:00.700 --> 00:01:02.960
And that's producing a number
between negative one and one.

16
00:01:05.240 --> 00:01:07.400
So maybe what we'll do, is we'll try and

17
00:01:07.400 --> 00:01:12.160
create a colorful gradient, instead of
just making a black and white gradient.

18
00:01:12.160 --> 00:01:20.370
So maybe what I'll do, is I'll go back
to using vuv.x to create a gradient.

19
00:01:21.420 --> 00:01:25.499
And the next thing we're gonna do is maybe

20
00:01:25.499 --> 00:01:30.440
interpolate between one color and another.

21
00:01:31.870 --> 00:01:39.670
And so, what we can do is create
colorA and let's make that red.

22
00:01:39.670 --> 00:01:43.906
And then, we can create colorB,

23
00:01:43.906 --> 00:01:48.900
and let's make that green, or
blue, or whatever you'd like.

24
00:01:48.900 --> 00:01:55.570
Just by setting a different component,
so we're using 100, 010.

25
00:01:55.570 --> 00:02:00.870
And here, instead of doing
this line with the gradient,

26
00:02:01.990 --> 00:02:04.160
maybe what we can do is we can say,

27
00:02:04.160 --> 00:02:09.070
I want to mix from colorA to colorB
based on this gradient value.

28
00:02:10.660 --> 00:02:14.970
And we can introduce this new key word,
called mix, and

29
00:02:14.970 --> 00:02:18.080
it's a function that's built into GLSL.

30
00:02:18.080 --> 00:02:22.790
And the way it works, is you specify
the A and B that you wanna mix between.

31
00:02:22.790 --> 00:02:27.650
And then,
you specify the value between 0 and 1.

32
00:02:27.650 --> 00:02:32.100
And if you remember back to earlier in
our lesson, we were talking about lurp.

33
00:02:32.100 --> 00:02:35.750
And that was at the very start when
we were trying to create that margin.

34
00:02:35.750 --> 00:02:39.120
And the way it works, is that you pass
in a minimum, and you pass in a maximum.

35
00:02:39.120 --> 00:02:42.800
And then,
you pass in some value between 0 and 1.

36
00:02:42.800 --> 00:02:44.600
And if you pass in a value that's 0,

37
00:02:44.600 --> 00:02:47.370
it's gonna be the minimum,
one is gonna be the maximum.

38
00:02:47.370 --> 00:02:50.570
Anything in between there, and it's gonna
slowly interpolate between those two.

39
00:02:50.570 --> 00:02:52.990
And that's exactly what's
happening with mix.

40
00:02:52.990 --> 00:02:57.680
Mix is actually just another way of
saying lerp in the case of shaders.

41
00:02:57.680 --> 00:03:01.040
It's the exact same
function down to the code.

42
00:03:01.040 --> 00:03:04.870
So now, I mean,
you could try tweaking these things.

43
00:03:06.090 --> 00:03:11.470
Maybe make it less green or less red,
still, we're not really there yet.

44
00:03:11.470 --> 00:03:19.060
So maybe what we'll do, is maybe
we'll try and mask this as a circle.

45
00:03:19.060 --> 00:03:23.530
Because remember our branding
that we're sort of going for

46
00:03:23.530 --> 00:03:27.000
here, is a circle, and
it's got a white background.

47
00:03:27.000 --> 00:03:29.020
And all of the colors are happening
inside of that circle.

48
00:03:30.300 --> 00:03:33.450
So to do that, we're gonna have to

49
00:03:35.540 --> 00:03:40.610
think about how do we say, for
certain pixels, we want it to be white.

50
00:03:40.610 --> 00:03:43.620
And for everything within a circle,
we want it to be colorful.

51
00:03:44.710 --> 00:03:51.590
And so, what we'll do, is we will try and
find the center coordinate,

52
00:03:51.590 --> 00:03:58.029
and then, try and see based on how far
away from the center the current pixel is.

53
00:03:59.070 --> 00:04:01.860
That's how we're gonna end up changing it,
whether it's colorful, or

54
00:04:01.860 --> 00:04:02.750
whether it's not colorful.

55
00:04:03.840 --> 00:04:06.590
And so, this is where it starts
to get a little bit more,

56
00:04:06.590 --> 00:04:10.040
you have to wrap your head
around the idea that shaders,

57
00:04:10.040 --> 00:04:15.390
you can't just say I want
the third pixel from the left,

58
00:04:15.390 --> 00:04:19.020
you can't just say I want the top
left of the screen to be blue.

59
00:04:19.020 --> 00:04:22.990
You have to just act on
being blind to other pixel.

60
00:04:22.990 --> 00:04:26.010
You can't operate them on neighboring
pixels and stuffs like that.

61
00:04:26.010 --> 00:04:31.506
So what we'll do, is we'll

62
00:04:31.506 --> 00:04:37.002
have a vec2 called center,

63
00:04:37.002 --> 00:04:41.593
and we do vUv- 0.5.

64
00:04:41.593 --> 00:04:45.668
Another way of writing this
would be to say vec2.5.5,

65
00:04:45.668 --> 00:04:50.474
the way I just wrote that is the same
no matter what, so it's basically

66
00:04:50.474 --> 00:04:55.525
taking the vUv, the UV coordinates,
and subtracting 0.5, and now,

67
00:04:55.525 --> 00:05:01.064
what we have is this center value is the
exact center of the screen, and now, what

68
00:05:01.064 --> 00:05:07.340
we wanna find is how far away from the
center of the screen is the current pixel.

69
00:05:07.340 --> 00:05:12.170
So what we're gonna do, is we're gonna
say is dist is a float which is a number,

70
00:05:13.210 --> 00:05:18.140
decimal value number, and
we're gonna say length (center).

71
00:05:19.710 --> 00:05:21.850
And so far,
the visuals aren't changing, and

72
00:05:21.850 --> 00:05:24.370
that's because our pixel
color hasn't changed.

73
00:05:24.370 --> 00:05:27.020
So we have to actually change that.

74
00:05:27.020 --> 00:05:31.930
So one thing we can try and
do is, instead of using one here,

75
00:05:31.930 --> 00:05:35.950
we can set the alpha to dist.

76
00:05:35.950 --> 00:05:38.720
And it's hard to see on the screen,
but what you're gonna have.

77
00:05:38.720 --> 00:05:43.660
It's this black hole effect where all
the colors are gonna be on the outer rim,

78
00:05:43.660 --> 00:05:47.080
and it's gonna go black as you get
closer and closer to the center.

79
00:05:47.080 --> 00:05:52.690
And what's actually happening,
is that the value in the very center,

80
00:05:52.690 --> 00:05:58.330
the pixel in the very center, is saying
the distance from the center is 0,

81
00:05:58.330 --> 00:06:00.880
because it's at the very center.

82
00:06:00.880 --> 00:06:04.250
And the pixels that are far away from
the center, they're gonna be closer to 1,

83
00:06:04.250 --> 00:06:07.610
or closer to some large value like 1.

84
00:06:07.610 --> 00:06:10.280
And it's gonna slowly increase.

85
00:06:10.280 --> 00:06:15.960
This length function here
is just saying what is the,

86
00:06:15.960 --> 00:06:20.090
this is where it starts to get
a bit more like math-y, and

87
00:06:20.090 --> 00:06:23.590
this is something that, at first,
when I was learning this stuff, I didn't

88
00:06:23.590 --> 00:06:27.440
understand the implications of what length
means, and that's okay if you don't.

89
00:06:27.440 --> 00:06:31.630
But if you're familiar with vectors or
anything like that,

90
00:06:31.630 --> 00:06:33.450
length is just the magnitude of a vector.

91
00:06:34.500 --> 00:06:35.104
But again,

92
00:06:35.104 --> 00:06:39.214
it's maybe not something that you'll
understand the first time you look at it,

93
00:06:39.214 --> 00:06:43.091
especially, if you aren't so familiar
with vectors and that kind of math.

94
00:06:43.091 --> 00:06:45.410
And that's okay,
don't worry about it too much.

95
00:06:45.410 --> 00:06:53.340
But what we'll do, is we'll say that
if the distance is greater than,

96
00:06:53.340 --> 00:06:58.640
let's say, 0.5, let's make our alpha one,

97
00:06:58.640 --> 00:07:02.570
and if the distance is less than 0.5,
let's make our alpha 0.

98
00:07:02.570 --> 00:07:07.200
So we're just gonna use a here.

99
00:07:07.200 --> 00:07:08.890
Just like in JavaScript,
it's the same thing.

100
00:07:11.650 --> 00:07:14.838
And you'll notice now that
we have this big circle,

101
00:07:14.838 --> 00:07:19.775
we can make the circle smaller by just
making that 0.5 less, like a 0.25.

102
00:07:22.331 --> 00:07:25.785
&gt;&gt; Mathew DesLauriers: You'll also
notice that it's a bit like an ellipse,

103
00:07:25.785 --> 00:07:27.256
rather than a circle.

104
00:07:27.256 --> 00:07:32.560
And what we'll do in a second,
is we're gonna fix that.

105
00:07:32.560 --> 00:07:35.340
But before we fix that,
we have to actually try and

106
00:07:35.340 --> 00:07:40.080
make this a bit more like the primary
branding that we had before, cuz remember,

107
00:07:40.080 --> 00:07:43.410
it's colorful on the inside,
and it's white on the outside.

108
00:07:43.410 --> 00:07:45.840
So I'm gonna just flip these numbers.

109
00:07:50.034 --> 00:07:52.920
&gt;&gt; Mathew DesLauriers: And so, now,
we have something a little bit closer.

110
00:07:52.920 --> 00:07:54.990
The colors are a bit weird and ugly.

111
00:07:54.990 --> 00:07:58.690
It's a little bit like a squashed circle
rather than a perfect circle, and

112
00:07:58.690 --> 00:08:01.560
the background is black, and
we need the background to be white.

113
00:08:01.560 --> 00:08:02.950
But we're getting there,
we're getting closer.

114
00:08:04.830 --> 00:08:08.890
The first thing I'm gonna do with this
code, is I'm gonna fix this circle, so

115
00:08:08.890 --> 00:08:11.640
that it's not squashed
depending on the aspect ratio.

116
00:08:12.710 --> 00:08:17.800
And so, to do that,
we will pass in a uniform from JavaScript.

117
00:08:17.800 --> 00:08:20.720
So this is a good
opportunity to understand

118
00:08:20.720 --> 00:08:23.290
how do we pass in values from JavaScript.

119
00:08:23.290 --> 00:08:29.360
So first, let's say, what we need to do to
fix this aspect ratio correction stuff,

120
00:08:29.360 --> 00:08:32.940
is we need to correct the coordinates
based on the width and

121
00:08:32.940 --> 00:08:36.230
height of the screen, as it currently is.

122
00:08:36.230 --> 00:08:41.240
And we need to correct it based on aspect
ratio, which we're gonna use float for.

123
00:08:41.240 --> 00:08:43.920
So it's just gonna be a single value,
gonna call it aspect.

124
00:08:45.380 --> 00:08:46.420
I'm gonna scroll down.

125
00:08:46.420 --> 00:08:48.460
Once we've added this
uniform float aspect.

126
00:08:48.460 --> 00:08:52.920
I'm gonna scroll down and I'm gonna go
to my uniforms, and you'll see already,

127
00:08:52.920 --> 00:08:58.730
we're passing down time, and so, that's
how we had that weird effect earlier.

128
00:08:58.730 --> 00:09:01.970
We're gonna just pass down one
more thing called aspect, and

129
00:09:01.970 --> 00:09:07.130
the way we pass it down,
is using a function and returning a value.

130
00:09:08.130 --> 00:09:11.940
And the function, this object
here that's being destructured,

131
00:09:11.940 --> 00:09:15.930
is the same props that we've been
using all day from Canvas Sketch.

132
00:09:15.930 --> 00:09:17.800
So we have things like width and height.

133
00:09:17.800 --> 00:09:18.670
We have time.

134
00:09:18.670 --> 00:09:19.880
We have play head.

135
00:09:19.880 --> 00:09:23.550
We have all those other props
that comes with Canvas Sketch.

136
00:09:23.550 --> 00:09:26.703
And so, the way we're gonna do this
is we're gonna take the props from

137
00:09:26.703 --> 00:09:30.337
the Canvas Sketch, we're gonna take
the current width and the current height,

138
00:09:30.337 --> 00:09:32.688
divide the current width
by the current height, and

139
00:09:32.688 --> 00:09:34.210
we send that value to the shader.

140
00:09:35.310 --> 00:09:40.570
So it just looks like that, make sure
that this property is called aspect.

141
00:09:43.440 --> 00:09:47.490
And then, up here, we actually have to
use this aspect value, and to do that,

142
00:09:47.490 --> 00:09:52.980
we're going to squeeze
the center by that aspect ratio.

143
00:09:54.020 --> 00:09:58.130
And what's gonna end up happening,
is that we're shrinking the width

144
00:09:58.130 --> 00:10:04.610
of the the circle here
to be a bit better when

145
00:10:04.610 --> 00:10:08.970
we change the size of our image or
our browser, in our case.

