WEBVTT

1
00:00:00.380 --> 00:00:04.078
&gt;&gt; Mathew DesLauriers: What we're gonna
do is we're just gonna chat about some of

2
00:00:04.078 --> 00:00:05.972
the stuff around three.js.

3
00:00:05.972 --> 00:00:08.228
I'm just gonna introduce
some of these concepts and

4
00:00:08.228 --> 00:00:11.458
then once we introduce them, we're
gonna actually open up our own code and

5
00:00:11.458 --> 00:00:14.090
start to create our own three.js scene.

6
00:00:14.090 --> 00:00:18.700
So before we get too far into three.js
there's this, these terms that I've been

7
00:00:18.700 --> 00:00:22.460
using already called material, and
geometry and so what are these terms?

8
00:00:22.460 --> 00:00:24.880
So a material in 3-D.

9
00:00:24.880 --> 00:00:28.882
This describes,
at least in the context of three.js,

10
00:00:28.882 --> 00:00:32.042
it describes the surface
quality of a mesh.

11
00:00:32.042 --> 00:00:35.224
And so for an example,
you may have a sphere and

12
00:00:35.224 --> 00:00:37.940
the sphere is exactly always white.

13
00:00:37.940 --> 00:00:38.820
It looks like this.

14
00:00:38.820 --> 00:00:40.060
It doesn't always look like a sphere.

15
00:00:40.060 --> 00:00:41.940
It looks more like a circle.

16
00:00:41.940 --> 00:00:43.370
It looks two dimensional.

17
00:00:43.370 --> 00:00:46.100
But, it is actually a sphere and

18
00:00:46.100 --> 00:00:50.340
we can tell it's a sphere by using
a wire frame rendering mode.

19
00:00:50.340 --> 00:00:53.400
So this is a very useful mode,
it's an attribute and

20
00:00:53.400 --> 00:00:58.150
it's a flag that you just set to true and
it allows you to visualize the mesh

21
00:00:58.150 --> 00:01:02.920
itself because again if it's just white,
you can't really tell what it is.

22
00:01:02.920 --> 00:01:08.120
But when it's a wire frame, you can
give a sense of its structure and so on.

23
00:01:08.120 --> 00:01:11.316
And so that's,
this is called a mesh basic material and

24
00:01:11.316 --> 00:01:15.736
if you wanted to do a solid color or if
you wanted to do a solid wire frame color,

25
00:01:15.736 --> 00:01:19.190
it can be any color can be red or
blue or whatever.

26
00:01:19.190 --> 00:01:20.920
Then you'd use a mesh basic material.

27
00:01:20.920 --> 00:01:23.790
And this means that there's
no lighting information.

28
00:01:23.790 --> 00:01:27.200
It's always gonna be that color no matter
where it's placed in the scene and

29
00:01:27.200 --> 00:01:29.440
no matter what lights might be around it.

30
00:01:30.870 --> 00:01:33.380
This is another material
that's really handy to use for

31
00:01:33.380 --> 00:01:37.360
debugging purposes,
it's called mesh normal material and

32
00:01:37.360 --> 00:01:41.960
it allows us to see and
visualize the faces of the mesh.

33
00:01:41.960 --> 00:01:46.640
So in a 3D mesh like in this
sphere you can really see that

34
00:01:46.640 --> 00:01:49.330
this sphere is curving around like that.

35
00:01:49.330 --> 00:01:52.110
And it gives us a better sense
of what the topology looks like.

36
00:01:52.110 --> 00:01:53.500
So it's very useful for debugging.

37
00:01:55.070 --> 00:01:57.920
And then when we start to try and
replicate more of like,

38
00:01:57.920 --> 00:02:01.690
what's around us with lighting,
shading, and

39
00:02:01.690 --> 00:02:07.400
lighting that's where we will use
what's called a MeshStandardMaterial.

40
00:02:07.400 --> 00:02:11.590
Standard just meaning like it's a standard
pipeline or something like that.

41
00:02:11.590 --> 00:02:16.470
And it starts to introduce shading and
shadows and lights so if you don't have

42
00:02:16.470 --> 00:02:19.630
a light in your scene, you're not
going to be able to see anything.

43
00:02:19.630 --> 00:02:21.400
Because just like in real life,

44
00:02:21.400 --> 00:02:23.590
if you turn the lights off
you can't see anything.

45
00:02:23.590 --> 00:02:27.380
And so the standard material tries
to be a bit more like real life.

46
00:02:29.010 --> 00:02:31.100
And just another thing to note is that,

47
00:02:31.100 --> 00:02:35.270
these two images are using the same
material, sorry these two.

48
00:02:35.270 --> 00:02:38.730
The only difference in this material
is that one of them is flat shaded.

49
00:02:38.730 --> 00:02:41.114
And one of them is smooth shaded.

50
00:02:41.114 --> 00:02:45.060
And those are concepts that
are kinda handy to know.

51
00:02:45.060 --> 00:02:46.790
And then the other thing
I was mentioning and

52
00:02:46.790 --> 00:02:50.060
the other thing we were seeing in
the documentation is geometry.

53
00:02:50.060 --> 00:02:54.930
So Geometry is just the actual
typology that we're working with.

54
00:02:54.930 --> 00:02:58.690
Whether it's a sphere, or
in this case a TorusGeometry, or

55
00:02:58.690 --> 00:03:02.910
it could be a BoxGeometry, or
you could load models from the web.

56
00:03:02.910 --> 00:03:05.010
We're gonna just stick
with simple shapes for

57
00:03:05.010 --> 00:03:07.030
now just because we
want to keep it simple.

58
00:03:07.030 --> 00:03:10.390
But you can get more advanced, you can
create your own geometries, and so on.

59
00:03:11.450 --> 00:03:12.270
So that's geometry.

60
00:03:12.270 --> 00:03:13.550
So far we have material,

61
00:03:13.550 --> 00:03:17.660
we have geometry, then the next
thing to understand would be mesh.

62
00:03:17.660 --> 00:03:22.130
Mesh is where we, we take those two
concepts, we take geometry and we take

63
00:03:22.130 --> 00:03:27.550
material and we combine them into a sort
of wrapper around those two concepts.

64
00:03:27.550 --> 00:03:29.770
And so let's say we wanted
to draw multiple circles or

65
00:03:29.770 --> 00:03:34.650
squares in this case two boxes,
instead of having two separate

66
00:03:34.650 --> 00:03:38.040
box geometries,
we're gonna have one box geometry,

67
00:03:38.040 --> 00:03:42.370
and we just create that once, and
then we use two different meshes.

68
00:03:42.370 --> 00:03:47.390
And so one of the things that trips
a lot of people up when they start

69
00:03:47.390 --> 00:03:50.680
with 3D is that, let's say they
want to draw a hundred circles or

70
00:03:50.680 --> 00:03:54.380
a hundred squares,
they create a hundred box geometries,

71
00:03:54.380 --> 00:03:58.030
and then they're performance
is gonna get really impacted.

72
00:03:58.030 --> 00:04:03.190
Their app is gonna be really slow because
they have a 100 different of these

73
00:04:03.190 --> 00:04:07.480
big structures that are like, imagine them
as like, really heavy data structures.

74
00:04:07.480 --> 00:04:10.720
And so what we actually wanna do is
we just wanna use the same instance,

75
00:04:10.720 --> 00:04:14.560
the same box geometry or
the same sphere geometry and

76
00:04:14.560 --> 00:04:17.560
then basically replicate it
like clone it many many times.

77
00:04:17.560 --> 00:04:18.610
And that's what we're doing here,

78
00:04:18.610 --> 00:04:23.430
we have one box geometry that's shared
amongst two different instances.

79
00:04:23.430 --> 00:04:26.650
And it's very cheap an very
fast to create instances and

80
00:04:26.650 --> 00:04:29.480
to render lots of instances
of the same geometry.

81
00:04:29.480 --> 00:04:32.380
You can also scale each instance
differently, just like in

82
00:04:32.380 --> 00:04:36.120
the morning when we were scaling
different grid cells, different radiuses.

83
00:04:36.120 --> 00:04:37.380
This is the same kind of concept.

84
00:04:37.380 --> 00:04:39.610
We can scale each of
those in different ways.

85
00:04:39.610 --> 00:04:42.590
We can apply different colors,
different materials and so on.

86
00:04:42.590 --> 00:04:46.160
And so
when you combine all that together and

87
00:04:46.160 --> 00:04:49.610
you mash up a bunch of meshes,
you have like say 50 meshes or

88
00:04:49.610 --> 00:04:54.340
100 meshes, combined,
it forms the scene that you are rendering.

89
00:04:54.340 --> 00:04:56.340
In this case we have a scene which is,

90
00:04:56.340 --> 00:05:00.270
lots of different cubes, different colors,
and it looks a bit like that.

91
00:05:00.270 --> 00:05:02.200
And this is sort of one of
the things we're gonna try and

92
00:05:02.200 --> 00:05:03.850
aim for in the afternoon.

93
00:05:05.350 --> 00:05:09.640
The last concept to sort of understand
of all these terms that we're using like

94
00:05:09.640 --> 00:05:14.790
mesh and geometry and
material is a camera, and so.

95
00:05:14.790 --> 00:05:19.930
Camera when we're talking about 3D is a
virtual, almost like a virtual eye piece,

96
00:05:19.930 --> 00:05:22.910
or a virtual way of looking at the world.

97
00:05:22.910 --> 00:05:27.060
And in this case the camera might be
somewhere in the air just like if you're

98
00:05:27.060 --> 00:05:29.080
in a helicopter or something like that.

99
00:05:29.080 --> 00:05:32.040
And we can see that it's
giving us a sense of depth.

100
00:05:32.040 --> 00:05:35.820
We can see that the squares in the top and

101
00:05:35.820 --> 00:05:39.820
the distant are sort of getting
smaller and growing smaller.

102
00:05:39.820 --> 00:05:42.590
So this is what
a PerspectiveCamera is called.

103
00:05:42.590 --> 00:05:45.460
OrthographicCamera, this
is another type of camera.

104
00:05:45.460 --> 00:05:48.959
Three.js has two main types,
one of them is called Perspective,

105
00:05:48.959 --> 00:05:50.904
one of them is called Orthographic.

106
00:05:51.980 --> 00:05:55.730
And it just changes the way
that we see this virtual world.

107
00:05:55.730 --> 00:06:00.790
So when we have a perspective camera,
we are seeing two-point perspective

108
00:06:00.790 --> 00:06:03.950
sort of like a vanishing points on the
sides, you can imagine like if you've ever

109
00:06:03.950 --> 00:06:08.450
drawn one of those scenes where you have a
point on left and a point on the right and

110
00:06:08.450 --> 00:06:12.150
all the lines go towards the points,
that's a similar concept.

111
00:06:12.150 --> 00:06:16.394
Or you can also see that there's
foreshortening in the way that the square

112
00:06:16.394 --> 00:06:19.720
gets smaller and
gets sort of noticeably more distant.

113
00:06:19.720 --> 00:06:22.370
Whereas here with an orthographic camera.

114
00:06:22.370 --> 00:06:25.960
Everything looks kind of flat and
it looks kind of two-dimensional and

115
00:06:25.960 --> 00:06:30.900
it's actually a very good camera for
our sort of artsy purposes.

116
00:06:30.900 --> 00:06:33.320
And it has some other uses as well.

117
00:06:33.320 --> 00:06:37.530
So Monument Valley, if you guys
are familiar with that video game,

118
00:06:37.530 --> 00:06:41.600
it's using a sort of form of orthographic
camera to produce some of their lines and

119
00:06:41.600 --> 00:06:43.210
some of their shapes.

120
00:06:43.210 --> 00:06:45.600
And as well,
if you wanted to create 2D artworks, or

121
00:06:45.600 --> 00:06:50.992
if you wanted to create maybe a game or
some sort of visualization that's 2.5D or

122
00:06:50.992 --> 00:06:53.060
2D, then you might be using
an orthographic camera.

123
00:06:54.500 --> 00:06:57.740
And when you combine all that you end
up with an image, or in this case,

124
00:06:57.740 --> 00:06:58.420
an animation.

125
00:06:58.420 --> 00:07:01.753
And that's what we're going to be doing
today is a bit more animation now rather

126
00:07:01.753 --> 00:07:02.810
than just still images.

127
00:07:04.010 --> 00:07:05.770
Here's another animation.

128
00:07:05.770 --> 00:07:08.330
This example is a little
bit more complicated,

129
00:07:08.330 --> 00:07:11.610
but the code for it is also in the repo.

130
00:07:13.450 --> 00:07:15.720
And you can see it's really
just a bunch of cubes.

131
00:07:15.720 --> 00:07:20.650
It's using with a graphic perspective,
the cubes are scaling in and

132
00:07:20.650 --> 00:07:24.070
out and actually, they're scaling in and
out using a noise function,

133
00:07:24.070 --> 00:07:27.960
just the same type of noise function
we're using earlier in the day.

134
00:07:27.960 --> 00:07:31.760
And they're moving up constantly and
eventually they're disappearing and

135
00:07:31.760 --> 00:07:33.540
eventually they're starting
again from the bottom.

136
00:07:34.870 --> 00:07:37.700
So that's maybe something
we can build our way up to.

137
00:07:37.700 --> 00:07:40.360
We'll start simple,
just like we did this morning.

138
00:07:40.360 --> 00:07:44.360
And we might not get there necessarily,
but we'll try and get as close as we can.

139
00:07:44.360 --> 00:07:49.049
Here's another output of the same
generative sort of loop, or

140
00:07:49.049 --> 00:07:50.735
generative artwork.

141
00:07:50.735 --> 00:07:53.260
Yeah, you can see that
it's really just cubes.

142
00:07:53.260 --> 00:07:57.280
And one of the things actually that
I did in this particular piece is

143
00:07:57.280 --> 00:08:00.710
that instead of randomly generating
cubes all over the place,

144
00:08:00.710 --> 00:08:04.780
I'm generating them within
a three dimensional grid.

145
00:08:04.780 --> 00:08:08.480
But that's something we can maybe get into
later, because it's a bit more tricky.

146
00:08:08.480 --> 00:08:10.217
And we just want to start
with the basics first.

