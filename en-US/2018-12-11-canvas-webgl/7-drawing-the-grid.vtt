WEBVTT

1
00:00:00.130 --> 00:00:02.760
&gt;&gt; Mathew DesLauriers: So,
the first I'm gonna do is I'm gonna

2
00:00:02.760 --> 00:00:06.250
go back to my code and I'm gonna try and
start a bit more fresh.

3
00:00:06.250 --> 00:00:10.530
So I'm gonna just delete most of
this stuff, delete the settings so

4
00:00:10.530 --> 00:00:11.740
that we just have dimensions.

5
00:00:11.740 --> 00:00:15.470
And then delete the render stuff inside
the render function just so we have

6
00:00:15.470 --> 00:00:20.390
a blank slate to work with, and then I
save, we should have an empty canvas.

7
00:00:20.390 --> 00:00:24.810
And we're gonna start by just making
sure we clear the canvas with white.

8
00:00:24.810 --> 00:00:28.930
Cuz right now if we save our image,
we're gonna end up with a transparent PNG.

9
00:00:28.930 --> 00:00:32.900
So the first thing we have to
do is set a fillStyle to white.

10
00:00:32.900 --> 00:00:37.210
And we fill a white rectangle
the full size of the screen,

11
00:00:37.210 --> 00:00:39.559
so top left corner all
the way to bottom right.

12
00:00:41.000 --> 00:00:45.490
And then we're going
to create a four loop.

13
00:00:45.490 --> 00:00:48.050
So outside of our render function,

14
00:00:48.050 --> 00:00:52.880
remember this our render function, we
can actually before our render function,

15
00:00:52.880 --> 00:00:56.970
before we return it we can
create some local state here.

16
00:00:56.970 --> 00:01:02.430
So I'm gonna create a function
called create grid, and

17
00:01:04.030 --> 00:01:08.710
this function is gonna return
basically the points on a grid.

18
00:01:08.710 --> 00:01:11.108
And so what I'm gonna do is I'm
gonna have a list of points,

19
00:01:11.108 --> 00:01:15.370
as just an empty array to start off,
and then I'm gonna have a count.

20
00:01:15.370 --> 00:01:16.500
So this is the grid size.

21
00:01:16.500 --> 00:01:19.130
So how many across by how many down?

22
00:01:19.130 --> 00:01:24.150
And if we look at, I'll just switch
this for one second, I'll switch back.

23
00:01:24.150 --> 00:01:28.870
But if we look at this image, we have one,
two, three, four, five by five, so

24
00:01:28.870 --> 00:01:34.590
that's a five by five grid, so in our code
here we're gonna use a count of five.

25
00:01:34.590 --> 00:01:37.270
We can change that later, just for now.

26
00:01:37.270 --> 00:01:39.900
And then we're gonna have
a nested four loop, so

27
00:01:39.900 --> 00:01:42.440
we're gonna create a four loop across and
a four loop down.

28
00:01:45.280 --> 00:01:51.200
And this is using x, so
x is in horizontal, y is in vertical.

29
00:01:51.200 --> 00:01:52.270
These are the two axes,

30
00:01:52.270 --> 00:01:56.210
the two sort of coordinates that
we're working with in two dimensions.

31
00:01:56.210 --> 00:02:00.978
And you basically say,
x starts at zero, x continues to count,

32
00:02:00.978 --> 00:02:04.349
then we do the same thing for
the y dimension.

33
00:02:06.731 --> 00:02:09.520
&gt;&gt; Mathew DesLauriers: So this might
be basic to you, this might not.

34
00:02:09.520 --> 00:02:12.730
But right now we're just
creating a two-dimensional grid.

35
00:02:12.730 --> 00:02:18.710
And here is where we want to, we wanna
have the point at each grid point.

36
00:02:18.710 --> 00:02:22.120
So we wanna basically figure out
what's the pixel coordinate for

37
00:02:22.120 --> 00:02:23.680
each of those grid points.

38
00:02:23.680 --> 00:02:25.570
And instead of using pixel coordinates,

39
00:02:25.570 --> 00:02:29.580
I'm gonna actually use something
that I like to call UV space.

40
00:02:29.580 --> 00:02:34.720
And this is an idea where you
work in numbers between zero and

41
00:02:34.720 --> 00:02:37.760
one rather than working in
your final pixel coordinates.

42
00:02:37.760 --> 00:02:40.333
And I like to work in UV
space between zero and

43
00:02:40.333 --> 00:02:45.066
one just because then you can start to
manipulate the numbers in different ways,

44
00:02:45.066 --> 00:02:47.519
and we'll start to see why it's useful.

45
00:02:47.519 --> 00:02:52.450
But to do that we're gonna create a U
variable, which is between zero and one.

46
00:02:52.450 --> 00:02:57.964
And so to get that we have to actually
divide the x by the count, and

47
00:02:57.964 --> 00:03:03.010
that's gonna give us roughly
a value between zero and one.

48
00:03:03.010 --> 00:03:05.970
So when we're at the very
left we're going to get zero,

49
00:03:05.970 --> 00:03:08.890
and we're at the very right of the grid
we're gonna get something closer to one.

50
00:03:08.890 --> 00:03:13.186
And I'm going to do the same
thing with the V coordinate, and

51
00:03:13.186 --> 00:03:15.219
that's y divided by count.

52
00:03:15.219 --> 00:03:20.513
And so now we have a UV sort of coordinate
where top left would be (0,0) and

53
00:03:20.513 --> 00:03:23.890
the bottom right would be closer to (1,1).

54
00:03:23.890 --> 00:03:27.230
And we'll see later why this
is kind of useful, but for

55
00:03:27.230 --> 00:03:32.470
now you can just add this
coordinate to our points array.

56
00:03:32.470 --> 00:03:37.622
And whenever I work with coordinates or
vectors or 2D x-y pairs or

57
00:03:37.622 --> 00:03:41.583
something like that,
I just use arrays like this.

58
00:03:41.583 --> 00:03:43.649
You can also use objects,
but I like to use arrays.

59
00:03:45.010 --> 00:03:47.738
And then we just return the points.

60
00:03:47.738 --> 00:03:48.910
And so that's our whole function.

61
00:03:50.400 --> 00:03:52.674
And here we can use this function,
we can actually call it.

62
00:03:54.873 --> 00:03:58.940
&gt;&gt; Mathew DesLauriers: [COUGH] So
here we go, I've just called the function.

63
00:03:58.940 --> 00:04:04.930
So now if I was to console log,
we should just see an array of arrays.

64
00:04:04.930 --> 00:04:08.489
And the point should go from zero
almost all the way to one, not quite.

65
00:04:11.769 --> 00:04:15.410
&gt;&gt; Mathew DesLauriers: And so now what
we're gonna do with this array of points

66
00:04:15.410 --> 00:04:19.866
is we're going to loop through
each of them, using just for each.

67
00:04:19.866 --> 00:04:23.960
And so we have this point variable here.

68
00:04:23.960 --> 00:04:27.980
I like to destructure these
kind of things using EF6.

69
00:04:27.980 --> 00:04:33.820
So you don't have to,
you can also access it old school style.

70
00:04:33.820 --> 00:04:39.284
But if you wrap the array with brackets
and then you use these brackets,

71
00:04:39.284 --> 00:04:44.129
you can destructure the U and
V coordinates that we have above.

72
00:04:44.129 --> 00:04:47.580
And then remember that these
are between zero and one.

73
00:04:47.580 --> 00:04:49.750
And so because our image is 2048 by 2048,

74
00:04:49.750 --> 00:04:54.450
we have to scale these
back up to pixel space.

75
00:04:54.450 --> 00:05:00.100
So I'm gonna say, the x is u times
width and y is v times height.

76
00:05:01.290 --> 00:05:04.373
That's gonna give us the actual
pixel position of each of those

77
00:05:04.373 --> 00:05:05.369
things in our grid.

78
00:05:08.562 --> 00:05:09.851
&gt;&gt; Mathew DesLauriers: And
then at this position,

79
00:05:09.851 --> 00:05:13.620
here is where we're gonna draw a circle or
a square, whatever you want to draw.

80
00:05:13.620 --> 00:05:16.770
We're gonna draw a circle
just to keep it simple.

81
00:05:16.770 --> 00:05:21.490
And we're gonna do exactly what we were
doing before, where we begin path to say

82
00:05:21.490 --> 00:05:27.670
we're gonna start drawing a path, and then
we use arc to draw the circle at x and y.

83
00:05:27.670 --> 00:05:31.060
We give it a radius, let's say 200,
and we can change that later.

84
00:05:31.060 --> 00:05:34.460
We give it a start angle which is zero,
and an end angle which is two pi.

85
00:05:34.460 --> 00:05:38.886
And you can put false or true, it doesn't
really matter for that last parameter.

86
00:05:38.886 --> 00:05:46.320
And then we will, let's say we stroke,
you can also fill.

87
00:05:46.320 --> 00:05:51.077
If you fill you're gonna notice that it's
not gonna show up cuz the fill style is

88
00:05:51.077 --> 00:05:51.579
white.

89
00:05:51.579 --> 00:05:56.771
So before we stroke or fill,
let's make sure we set the color.

90
00:05:56.771 --> 00:05:59.428
So I'm just going to set it to black,
it defaults to black, but

91
00:05:59.428 --> 00:06:02.000
sometimes it's nice just to be
very specific with our code.

92
00:06:03.650 --> 00:06:07.780
I'm also gonna make it thicker
just like we did earlier, and

93
00:06:07.780 --> 00:06:09.240
maybe make it 20 or 40.

94
00:06:09.240 --> 00:06:14.110
And then if you get this far you'll
start to see that we have almost a grid

95
00:06:14.110 --> 00:06:16.760
of circles,
it's not looking very nice yet.

96
00:06:16.760 --> 00:06:21.279
We can change the radius to something
else, like 100 or whatever.

97
00:06:21.279 --> 00:06:25.129
And one thing you'll notice is
that this grid is very left,

98
00:06:25.129 --> 00:06:29.070
top left aligned, and
that's because our UV coordinates.

99
00:06:29.070 --> 00:06:32.000
They go all the way to 0.8 but
they don't go all the way to 1.

100
00:06:32.000 --> 00:06:36.806
So there's no points that are at 1.1,
and when you multiply 1 by width

101
00:06:36.806 --> 00:06:40.930
you should get the very end of the page,
same with 1 by height.

102
00:06:40.930 --> 00:06:44.980
So we actually need to,
instead of dividing by count,

103
00:06:44.980 --> 00:06:47.370
we divide it by count minus one.

104
00:06:47.370 --> 00:06:48.590
We wrap that in a bracket.

105
00:06:48.590 --> 00:06:51.348
And that's just gonna sort
of scale everything so

106
00:06:51.348 --> 00:06:54.840
that the u coordinate goes exactly
from zero all the way to one.

107
00:06:56.190 --> 00:07:01.260
One other thing to be mindful of is that
if your count happens to be really low,

108
00:07:01.260 --> 00:07:06.700
like let's say I was to use a count
of one instead of a count of five,

109
00:07:06.700 --> 00:07:10.520
we're not gonna see anything, and that's
because we're getting a bit of a not

110
00:07:10.520 --> 00:07:12.460
a number situation,
where we're dividing by zero.

111
00:07:12.460 --> 00:07:18.569
So to guard for that sort of situation,
just do the if count is less than or

112
00:07:18.569 --> 00:07:22.950
equal to 1, we will use 0.5, let's say.

113
00:07:22.950 --> 00:07:25.590
Otherwise, we'll use
the x divided by count.

114
00:07:25.590 --> 00:07:28.400
And the same for the y.

115
00:07:28.400 --> 00:07:31.850
So this just guards against that last
situation that I was talking about,

116
00:07:31.850 --> 00:07:34.310
if count is less than or equal to one.

117
00:07:35.320 --> 00:07:38.630
So now when we use a count of one, we
should see it in the center of the screen.

118
00:07:38.630 --> 00:07:43.754
And that's because in UV coordinates,
(0.5,0.5) is the very

119
00:07:43.754 --> 00:07:48.379
center cuz (0,0) is top left,
(1,1) is bottom right.

