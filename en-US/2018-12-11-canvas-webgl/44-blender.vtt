WEBVTT

1
00:00:00.030 --> 00:00:05.237
&gt;&gt; Mathew DesLauriers: Something else
I have done in the past is creating

2
00:00:05.237 --> 00:00:10.571
a large print series from JavaScript,
but then,

3
00:00:10.571 --> 00:00:15.651
taking the 3D model, and
taking a 3D model and

4
00:00:15.651 --> 00:00:19.588
putting it into Blender, and then,

5
00:00:19.588 --> 00:00:26.720
using Blender to render the 3D
model at a much higher resolution.

6
00:00:26.720 --> 00:00:33.202
So this is just a three.js seen
that is exported as a mesh and

7
00:00:33.202 --> 00:00:37.000
imported into Blender, and so,
to export it as a mesh from 3GS and

8
00:00:37.000 --> 00:00:39.660
from JavaScript,
I'm using the same concept here.

9
00:00:39.660 --> 00:00:44.870
I'm just returning a glTF or an OBJ file
that can be fed into a Blender file.

10
00:00:46.270 --> 00:00:48.180
And then, just rendered in a high quality.

11
00:00:48.180 --> 00:00:51.190
And then, printed on nice ink paper.

12
00:00:53.760 --> 00:00:54.260
Yeah.

13
00:01:01.990 --> 00:01:05.566
&gt;&gt; Mathew DesLauriers: So
I just, I'll show you.

14
00:01:05.566 --> 00:01:07.120
I don't have the code itself right now.

15
00:01:07.120 --> 00:01:13.700
But you basically,
if you write your code in a certain way.

16
00:01:13.700 --> 00:01:15.098
Let's say you're using three.js.

17
00:01:15.098 --> 00:01:19.990
Three.js has a OBJ Exporter,
or something like that.

18
00:01:19.990 --> 00:01:25.493
It's called something like that, here.

19
00:01:25.493 --> 00:01:27.860
&gt;&gt; Mathew DesLauriers: Basically,
you give it a mesh.

20
00:01:27.860 --> 00:01:34.000
And when you export the mesh, or the
scene, or whatever it is you're giving it,

21
00:01:34.000 --> 00:01:38.890
the geometry, it gives you back this,
so we J file, which in this case,

22
00:01:38.890 --> 00:01:42.040
in this example, for three,js,
they just have it showing up here.

23
00:01:42.040 --> 00:01:48.430
But if you're using Canvas Sketch, you can
actually return the actual OBJ data here,

24
00:01:48.430 --> 00:01:53.210
and so,
when you hit Cmd + S in Canvas Sketch,

25
00:01:53.210 --> 00:01:56.190
whatever the data is here,
is gonna get exported as a file.

26
00:01:57.480 --> 00:02:01.794
To your downloads, just like a canvas
stuff we've done so far, except,

27
00:02:01.794 --> 00:02:05.090
instead of being a PNG, it'll be J file.

28
00:02:05.090 --> 00:02:09.697
And then, with that OBJ file,
you can import it into Blender, and

29
00:02:09.697 --> 00:02:12.756
you can get into the scene,
so for example.

30
00:02:18.232 --> 00:02:22.919
&gt;&gt; Mathew DesLauriers: This is the file
that would get exported from three.js.

31
00:02:22.919 --> 00:02:28.070
And this is actually exactly how
I created this is by taking this

32
00:02:28.070 --> 00:02:33.054
three.js scene, which is created
from some parametric geometries,

33
00:02:33.054 --> 00:02:37.373
and kind of like what we've been
talking about with shaders,

34
00:02:37.373 --> 00:02:41.608
same kind of concept, and then,
exporting it as a OBJ file,

35
00:02:41.608 --> 00:02:46.260
importing that Shader, or
importing that OBJ file into Blender,

36
00:02:46.260 --> 00:02:51.190
and actually, going to town with
more lighting and stuff like that.

37
00:02:51.190 --> 00:02:55.200
And the reason I'm using Blender instead
of three.js is just cuz, the lighting and

38
00:02:55.200 --> 00:02:58.815
quality is much more realistic, and
you can get some materials like glass,

39
00:02:58.815 --> 00:03:02.655
you can get some materials like mirrors
and stuff like that, that are really hard

40
00:03:02.655 --> 00:03:06.325
to reproduce in WebGL, but in Blender,
you just set the material to the glass

41
00:03:06.325 --> 00:03:10.091
material, and all the sudden, it looks
beautiful, or something like that.

42
00:03:18.801 --> 00:03:22.130
&gt;&gt; Speaker 3: Some sort of data that was
feeding the different cities that you had.

43
00:03:22.130 --> 00:03:26.712
&gt;&gt; Mathew DesLauriers: Yeah.
Yeah, actually, I didn't really mention

44
00:03:26.712 --> 00:03:30.780
that, but that project is, let's see.

45
00:03:32.630 --> 00:03:37.320
The project was kind of just a bit of
a data wiz of different cities and

46
00:03:37.320 --> 00:03:39.880
their skyscraper heights, and

47
00:03:39.880 --> 00:03:44.330
how their skyscrapers are distributed
amongst the data set.

48
00:03:44.330 --> 00:03:49.610
And so, I had scrapes like thousands
of different towers and the different

49
00:03:49.610 --> 00:03:53.160
heights of the different towers and
different skyscrapers for each city.

50
00:03:53.160 --> 00:03:57.450
And then, using that, I was able to
sort of change the distribution of these

51
00:03:57.450 --> 00:04:00.040
crystals, and that kind of thing.

52
00:04:00.040 --> 00:04:04.440
So you'll see Rotterdam is quite short,
whereas something

53
00:04:04.440 --> 00:04:09.060
like Shanghai has a lot of really tall and
really ominous skyscrapers.

54
00:04:09.060 --> 00:04:11.110
So it produced that crystal
that looks a bit like that.

55
00:04:12.230 --> 00:04:14.370
And yeah, and the actual,

56
00:04:14.370 --> 00:04:18.120
the fracture pattern that's happening
here is another type of noise.

57
00:04:18.120 --> 00:04:22.750
So, so far,
we've talked about perlin noise, or

58
00:04:22.750 --> 00:04:24.980
we talked about simplex noise,
I guess, you can say.

59
00:04:24.980 --> 00:04:26.800
It's very similar.

60
00:04:26.800 --> 00:04:29.550
It's like this imagery we've
been seeing over and over again.

61
00:04:30.670 --> 00:04:32.510
And if you just use
a different noise function,

62
00:04:33.580 --> 00:04:37.900
it's basically the same
concept we're talking about.

63
00:04:37.900 --> 00:04:40.620
But instead of using the noise
that we've been doing,

64
00:04:40.620 --> 00:04:43.190
it's a different noise function called,
Voronoi.

65
00:04:43.190 --> 00:04:44.550
And it looks a bit like that.

66
00:04:44.550 --> 00:04:49.500
And this is not exactly how I created it,
but I did use some aspects

67
00:04:49.500 --> 00:04:53.930
of Voronoi to produce this sort
of fracture pattern in the mesh.

