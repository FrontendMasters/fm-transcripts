WEBVTT

1
00:00:00.270 --> 00:00:01.590
&gt;&gt; Mathew DesLauriers: Just scroll down.

2
00:00:01.590 --> 00:00:03.030
Here's our circles.

3
00:00:03.030 --> 00:00:05.510
We're just gonna comment those out for
now.

4
00:00:05.510 --> 00:00:07.110
And instead of circles
we're gonna just try and

5
00:00:07.110 --> 00:00:10.540
draw a text item at each
of those positions.

6
00:00:10.540 --> 00:00:16.100
So we're gonna use context.fillStyle is
equal to color, just like we did before.

7
00:00:16.100 --> 00:00:18.610
And then we just need to
write context.fillText.

8
00:00:19.990 --> 00:00:23.180
And you can pass a string and an x and

9
00:00:23.180 --> 00:00:27.790
y coordinate and that's how this
function works as you pass a string.

10
00:00:27.790 --> 00:00:29.570
Which is,
it doesn't need to be a single character.

11
00:00:29.570 --> 00:00:33.810
It could be a full string but
we're just gonna draw the letter A for

12
00:00:33.810 --> 00:00:38.500
now and then an x and y coordinate
of where we're drawing the text.

13
00:00:38.500 --> 00:00:41.070
And before we draw the text,
we wanna make the text

14
00:00:41.070 --> 00:00:44.390
much bigger because if you're on your
screen, you might see little tiny pixels.

15
00:00:44.390 --> 00:00:45.900
It's cuz they're quite small.

16
00:00:45.900 --> 00:00:51.050
So we're gonna use context.font, and
let's say we're gonna use 100 pixels,

17
00:00:53.410 --> 00:00:56.040
and then you have to specify
a font family string.

18
00:00:56.040 --> 00:00:57.370
So it looks like this.

19
00:00:57.370 --> 00:01:01.752
So 100 pixels is the size of the font, and
then in quotes Ariel is the font family,

20
00:01:01.752 --> 00:01:05.458
and you can tweak that font family
to something else like Helvetica, or

21
00:01:05.458 --> 00:01:07.220
something, whatever you want.

22
00:01:09.700 --> 00:01:13.970
And so, now we have some text drawing and

23
00:01:13.970 --> 00:01:18.570
like we did before we wanna make it so
that all of these are different sizes.

24
00:01:18.570 --> 00:01:22.860
So instead of using a string,
I'm gonna use a template string here,

25
00:01:22.860 --> 00:01:27.230
yes 6 feature and
I'm gonna replace 100 with radius

26
00:01:28.510 --> 00:01:31.930
and probably won't see anything yet but

27
00:01:31.930 --> 00:01:37.760
that's because our radius is actually very
small, we had to do radius times width.

28
00:01:37.760 --> 00:01:42.133
So now if you do that you should start to
see the letter A a whole bunch of times

29
00:01:42.133 --> 00:01:42.771
in a grid.

30
00:01:42.771 --> 00:01:44.799
And it might be very small,

31
00:01:44.799 --> 00:01:49.929
if it's very small go back up to your
data here and make it bit bigger.

32
00:01:55.315 --> 00:01:57.480
&gt;&gt; Mathew DesLauriers: And
now instead of using the letter A.

33
00:01:58.780 --> 00:02:03.660
Let's just try and use an equal sign and
that's gonna make it a bit more artistic

34
00:02:03.660 --> 00:02:07.900
looking rather than
a bunch of random letters.

35
00:02:07.900 --> 00:02:09.560
Now, we're starting to get
something more interesting.

36
00:02:12.000 --> 00:02:18.220
And one last thing we can do is we can
try and rotate this text before we drive.

37
00:02:18.220 --> 00:02:22.300
And so right now all of them are being
drawn just using normal rotation.

38
00:02:22.300 --> 00:02:26.380
But if we, let's say try and

39
00:02:26.380 --> 00:02:31.770
rotate the canvas before drawing, so
there's this method called rotate,

40
00:02:31.770 --> 00:02:36.260
and you pass in a number, so
let's just pass in the number 1 for now.

41
00:02:37.300 --> 00:02:39.010
It's gonna produce some weirdness.

42
00:02:39.010 --> 00:02:43.500
And that's because remember that Canvas
is a state-based API, so when you

43
00:02:43.500 --> 00:02:47.940
change something, it's just gonna remember
that same thing until you change it back.

44
00:02:47.940 --> 00:02:53.230
So right now what's happening
is every time we draw something,

45
00:02:53.230 --> 00:02:56.710
we're rotating the canvas
additionally one extra degree or

46
00:02:56.710 --> 00:02:59.880
one extra radiant I think is
the value actually, not degrees.

47
00:02:59.880 --> 00:03:04.830
And so what we need to do is
either rotate it backwards.

48
00:03:04.830 --> 00:03:09.810
So you can do rotate -1, so
that's one way of doing things.

49
00:03:10.890 --> 00:03:13.970
Another way I'm gonna do things is,
instead of doing that, I'll delete that,

50
00:03:13.970 --> 00:03:19.546
I'm gonna say, before I draw my text,
and before I rotate I'm gonna

51
00:03:19.546 --> 00:03:25.490
say context.save and then after I
draw it I'm gonna do context.restore.

52
00:03:25.490 --> 00:03:28.350
And that's just gonna save
the transformation state.

53
00:03:28.350 --> 00:03:29.760
And then I'm gonna draw stuff and

54
00:03:29.760 --> 00:03:34.060
then once it's done drawing I'm gonna
restore it back to how it was before.

55
00:03:34.060 --> 00:03:37.039
We're still not quite there yet
we just need one more thing.

56
00:03:37.039 --> 00:03:40.963
Which is that we're rotating
the canvas by one radian here.

57
00:03:40.963 --> 00:03:42.345
You can tweak this value and

58
00:03:42.345 --> 00:03:45.670
you can start to see that it's
gonna look a little wonky.

59
00:03:45.670 --> 00:03:50.180
That's because we're rotating
everything from the top left point.

60
00:03:50.180 --> 00:03:53.720
And so what we actually wanna do
is we wanna rotate everything from

61
00:03:53.720 --> 00:03:56.920
the grid coordinate.

62
00:03:56.920 --> 00:03:58.310
Before drawing your text.

63
00:03:58.310 --> 00:04:03.545
So what we're gonna do is
do context.translate[x,

64
00:04:03.545 --> 00:04:08.093
y], and then we have to,
so it's translate,

65
00:04:08.093 --> 00:04:12.216
then rotate, then fillText, at 0.0.

66
00:04:12.216 --> 00:04:15.367
So we've translated to
the grid coordinate,

67
00:04:15.367 --> 00:04:18.720
we've rotated the context by 7 degrees.

68
00:04:18.720 --> 00:04:23.761
And then we're filling the text and
because we use translate we can

69
00:04:23.761 --> 00:04:28.635
use 0.0 because the new origin point for
our context is x,y.

70
00:04:28.635 --> 00:04:31.044
And then if you wanted
something just quick and

71
00:04:31.044 --> 00:04:34.400
easy instead of using the same
rotation for all of them.

72
00:04:34.400 --> 00:04:36.840
You can use some value.

73
00:04:38.490 --> 00:04:42.402
Ideally what we want is we want
a different value from our data structure

74
00:04:42.402 --> 00:04:44.105
both let's call it rotation.

75
00:04:47.315 --> 00:04:49.992
&gt;&gt; Mathew DesLauriers: And
I'm just gonna de-structure that, and

76
00:04:49.992 --> 00:04:52.890
I'm gonna add it to my object here.

77
00:04:52.890 --> 00:04:58.780
So we have rotation, we're adding it
to the same grid of points, objects.

78
00:04:58.780 --> 00:05:02.070
And then here we're de-structuring it
again, just like we did with the color and

79
00:05:02.070 --> 00:05:03.310
the position.

80
00:05:03.310 --> 00:05:05.090
And we're using that in
our rotate function.

81
00:05:06.110 --> 00:05:10.240
And up here now, we can either give it

82
00:05:10.240 --> 00:05:15.180
an entirely different value,
we can randomize it, we can use noise.

83
00:05:15.180 --> 00:05:18.870
Or we can make it based on
the randomness as well.

84
00:05:18.870 --> 00:05:23.828
The same randomness that we're using,
the same noise

85
00:05:23.828 --> 00:05:29.013
randomness that we're using for
the size of the damage.

86
00:05:29.013 --> 00:05:34.211
And so if you're getting this far then you
should already pretty much be in a state

87
00:05:34.211 --> 00:05:39.760
where we can create pretty much the image
that we were looking at earlier.

88
00:05:39.760 --> 00:05:40.760
It's pretty close,

89
00:05:40.760 --> 00:05:45.530
it's maybe not exact, but with a bit more
tweaking we can definitely get there.

90
00:05:45.530 --> 00:05:48.810
And you can imagine by
using different symbols,

91
00:05:48.810 --> 00:05:53.960
such as instead of a circle you might
use a dash symbol or a period symbol.

92
00:05:53.960 --> 00:05:59.110
You can also imagine using unicode symbols
like an arrow symbol might be kinda cool.

93
00:05:59.110 --> 00:06:01.950
Or even taking random singles.

94
00:06:01.950 --> 00:06:05.000
So just like we're de-structuring
the color, and the radius and

95
00:06:05.000 --> 00:06:09.960
the position, you can de-structure
the single up here, maybe

96
00:06:09.960 --> 00:06:14.540
choosing from the random list of different
characters or something like that.

97
00:06:14.540 --> 00:06:17.814
And that's how I ended up producing
those images I've shown earlier.

98
00:06:21.228 --> 00:06:24.280
&gt;&gt; Mathew DesLauriers: And again you can
tweak all these values cuz right now

99
00:06:24.280 --> 00:06:28.023
maybe it's a bit too small you can
make the grid a bit less dense,

100
00:06:28.023 --> 00:06:30.730
you can make the sizes
a bit more pronounced.

101
00:06:30.730 --> 00:06:36.690
You can also multiply the rotation
here by some other value.

102
00:06:36.690 --> 00:06:40.114
If you multiply it by 0.5,
it's gonna rotate each thing less.

103
00:06:42.471 --> 00:06:46.130
&gt;&gt; Mathew DesLauriers: So that's kind of,
I wanted to just give that whole workflow

104
00:06:46.130 --> 00:06:51.009
for how to create an image like that,
because now we've introduced a whole bunch

105
00:06:51.009 --> 00:06:56.940
of different topics, like noise,
randomness, using different color pallets.

106
00:06:56.940 --> 00:07:00.790
And as well as just using canvas and
create a stuff like that.

