WEBVTT

1
00:00:00.410 --> 00:00:06.920
&gt;&gt; Mathew DesLauriers: What I wanted
to do now is just to, along this sort

2
00:00:06.920 --> 00:00:12.140
of path, is to try and
bring back some of the concepts

3
00:00:12.140 --> 00:00:17.430
we were talking about earlier around
noise and bring those into our shader.

4
00:00:17.430 --> 00:00:21.760
That will be a nice sort of way
of introducing modular shaders.

5
00:00:21.760 --> 00:00:26.080
And it will also be a nice way of
introducing some cool functions

6
00:00:26.080 --> 00:00:28.020
to make our art a bit more interesting.

7
00:00:29.660 --> 00:00:33.015
So what I'm gonna do is I'm gonna just
sort of clean this up a little bit

8
00:00:33.015 --> 00:00:35.610
cuz I've been just like
tweaking code as I go.

9
00:00:36.710 --> 00:00:38.990
Maybe I'll just comment
all of this out for now.

10
00:00:41.256 --> 00:00:45.442
&gt;&gt; Mathew DesLauriers: And
maybe we'll come back to that and

11
00:00:45.442 --> 00:00:48.858
start again from a gradient.

12
00:00:48.858 --> 00:00:51.190
Just I like to start from
a gradient cuz it just

13
00:00:52.390 --> 00:00:54.580
makes me sure that the code
is running properly.

14
00:00:58.091 --> 00:01:00.918
&gt;&gt; Mathew DesLauriers: And what we're
gonna do is we're going to install

15
00:01:00.918 --> 00:01:05.428
a module, except instead of requiring
the module up here and installing it like

16
00:01:05.428 --> 00:01:09.970
this, we're gonna install it and require
it inside of our actual shader code.

17
00:01:11.230 --> 00:01:18.390
And to do that we're going to go ahead and
install a module called glsl-noise.

18
00:01:18.390 --> 00:01:23.001
And if you Google NPM glsl-noise,
just like I'm doing here.

19
00:01:26.850 --> 00:01:28.142
&gt;&gt; Mathew DesLauriers: You'll see this NPM

20
00:01:28.142 --> 00:01:30.909
module,
&gt;&gt; Mathew DesLauriers: And

21
00:01:30.909 --> 00:01:35.691
it includes a few examples here,
and this is the noise

22
00:01:35.691 --> 00:01:40.366
function just like we were
doing earlier in the day,

23
00:01:40.366 --> 00:01:44.421
this noise function is
the same sort of idea.

24
00:01:44.421 --> 00:01:49.690
It's using 2D or 3D or 4D noise
except instead of being JavaScript.

25
00:01:49.690 --> 00:01:52.120
It's actually all written in glsl.

26
00:01:53.330 --> 00:01:57.980
So I'm going to go back to my canvas,
&gt;&gt; Mathew DesLauriers: And to install it

27
00:01:57.980 --> 00:02:03.800
we just have to use the same command we've
been using before to install modules.

28
00:02:03.800 --> 00:02:07.820
So we do NPM install glsl-noise.

29
00:02:07.820 --> 00:02:11.820
And so actually, although it is GLSL,
it's still published on NPM,

30
00:02:11.820 --> 00:02:13.130
which is kind of neat and cool.

31
00:02:14.960 --> 00:02:17.830
Bit of a hack, but
it's kind of interesting.

32
00:02:17.830 --> 00:02:20.464
And it's installed so
now we can require it.

33
00:02:20.464 --> 00:02:22.060
But remember we're not
requiring it up here.

34
00:02:22.060 --> 00:02:23.620
We're requiring it inside of our string.

35
00:02:23.620 --> 00:02:25.710
Inside of our shader string.

36
00:02:25.710 --> 00:02:29.577
So before our main function,

37
00:02:29.577 --> 00:02:34.380
we have to write this sort of syntax.

38
00:02:34.380 --> 00:02:35.880
It's kind of weird and funky.

39
00:02:35.880 --> 00:02:37.676
We do pound.

40
00:02:37.676 --> 00:02:44.430
Pragma glslify, colon,
and then this just says,

41
00:02:44.430 --> 00:02:50.320
okay, this next command that we're gonna
put here in our shader code is an import.

42
00:02:50.320 --> 00:02:54.750
Because this is a bit of a hack,
it's a bit of a custom feature.

43
00:02:54.750 --> 00:02:58.624
It doesn't exist in WebGL and
it doesn't exist in GLSL.

44
00:02:58.624 --> 00:03:02.971
In GLSL, if you wanted to use a noise
function you'd have to copy and

45
00:03:02.971 --> 00:03:06.540
paste like hundreds of lines
of code into your shader.

46
00:03:06.540 --> 00:03:10.260
And the way we're doing this is just
going to make it a bit easier so

47
00:03:10.260 --> 00:03:14.040
that we don't have to copy and paste
hundreds and hundreds of lines of code.

48
00:03:14.040 --> 00:03:16.080
And this is gonna allow us to
be just a bit more modular.

49
00:03:16.080 --> 00:03:19.320
But again,
it's not a built-in feature of GLSL and

50
00:03:19.320 --> 00:03:22.140
the reason it's gonna work is because
we're combining it with this thing

51
00:03:22.140 --> 00:03:24.770
up here which we haven't used yet,
GLSL file.

52
00:03:26.130 --> 00:03:32.517
And so we just have to write the syntax
like this, and then we can say,

53
00:03:32.517 --> 00:03:37.875
noise is equal to require
glsl-noise/simplex/3d.

54
00:03:37.875 --> 00:03:43.220
And it's a little bit like the require
syntax that we have above.

55
00:03:43.220 --> 00:03:48.180
It's not that dissimilar, and then we're
actually requiring a specific package

56
00:03:48.180 --> 00:03:52.400
within this noise package cuz it has
a whole bunch of different types of noise.

57
00:03:52.400 --> 00:03:55.910
And we won't get into those, but
it has different types like prolane or

58
00:03:55.910 --> 00:03:59.800
simplex kind of differences, and
they just produce different values.

59
00:03:59.800 --> 00:04:03.660
And a 3D, meaning we're gonna
do this three dimensional noise.

60
00:04:03.660 --> 00:04:05.970
And so far we've just used 2D noise,

61
00:04:05.970 --> 00:04:09.630
but now we're gonna sorta take it
up a notch and add a new dimension.

62
00:04:10.820 --> 00:04:12.230
And so that's how that looks.

63
00:04:12.230 --> 00:04:16.840
And if you save, it should just work.

64
00:04:16.840 --> 00:04:17.760
So you shouldn't have an error.

65
00:04:18.960 --> 00:04:20.830
And if you have an error
maybe just check the error.

66
00:04:20.830 --> 00:04:22.160
See what's up.

67
00:04:22.160 --> 00:04:25.270
But that's how that looks.

68
00:04:25.270 --> 00:04:27.350
And now we can use this noise function.

69
00:04:27.350 --> 00:04:31.600
And this noise function is very
much like what we had earlier

70
00:04:31.600 --> 00:04:36.950
where we pass in an xyz coordinate and
we get back a number.

71
00:04:36.950 --> 00:04:37.550
So let's do that.

72
00:04:38.580 --> 00:04:42.440
So we're gonna do noise and

73
00:04:42.440 --> 00:04:46.390
instead of using just coordinates,
we actually have to pass in a vec3.

74
00:04:47.620 --> 00:04:51.140
So let's do what we
are doing this morning.

75
00:04:51.140 --> 00:04:56.600
The U and the V or
the XY of the UV coordinate and then time.

76
00:04:56.600 --> 00:05:00.600
So what's happening here is
we have our noise function

77
00:05:00.600 --> 00:05:04.370
we're giving in three coordinates cuz
it's a three dimensional noise function.

78
00:05:04.370 --> 00:05:07.510
We're giving it the UV
coordinate of our surface and

79
00:05:07.510 --> 00:05:10.470
we're giving it the time
parameter in seconds.

80
00:05:10.470 --> 00:05:14.570
And then we get back a floating point
number between negative one and one.

81
00:05:15.770 --> 00:05:18.857
And with that floating point number
we can just put that in here.

82
00:05:21.240 --> 00:05:24.360
&gt;&gt; Mathew DesLauriers: And, all of a
sudden, we're going to see something very

83
00:05:24.360 --> 00:05:27.289
similar to what we have in
some of the earlier slides.

84
00:05:33.633 --> 00:05:35.770
&gt;&gt; Mathew DesLauriers: So just wait
a second, so you guys can catch up there.

85
00:05:37.120 --> 00:05:39.770
And, just another reminder in case
you run into errors when you're

86
00:05:39.770 --> 00:05:41.690
typing out numbers.

87
00:05:41.690 --> 00:05:45.870
I said it earlier, but for
decimal numbers you have to have a period.

88
00:05:45.870 --> 00:05:49.712
So instead of just doing 1,
you should do 1.0.

89
00:05:49.712 --> 00:05:53.949
That's just a reminder in
case you run into that.

90
00:05:53.949 --> 00:05:56.429
And so
just like in the earlier part of today,

91
00:05:56.429 --> 00:06:00.820
we were changing the frequency of the
noise, we were making it scale in and out.

92
00:06:00.820 --> 00:06:02.060
You can do the same thing here.

93
00:06:03.760 --> 00:06:06.519
Just by multiplying XY by some number.

94
00:06:09.548 --> 00:06:12.610
&gt;&gt; Mathew DesLauriers: But let's keep it
at something low like two, or even one.

95
00:06:14.460 --> 00:06:15.056
Or two.

96
00:06:15.056 --> 00:06:19.410
And then if you have this code
here that I commented above.

97
00:06:19.410 --> 00:06:22.460
Remember how we did some
aspect ratio stuff.

98
00:06:22.460 --> 00:06:26.300
And so actually you might notice with
the noise function, if you squeeze your

99
00:06:26.300 --> 00:06:31.260
browser like this, the noise function's
no longer going to look very square-like,

100
00:06:31.260 --> 00:06:32.630
it's going to look a little bit squashed.

101
00:06:32.630 --> 00:06:35.720
And it's the same problem
we ran into before.

102
00:06:35.720 --> 00:06:40.130
So what we're actually going
to do is we are going to,

103
00:06:41.130 --> 00:06:43.730
we can use the same center value here.

104
00:06:43.730 --> 00:06:48.140
So I'm just gonna uncomment that and

105
00:06:48.140 --> 00:06:51.960
pass this coordinate in as
our 2D coordinate instead.

106
00:06:51.960 --> 00:06:58.471
And basically it's just a vec2 that has
its x axis squashed by the aspect ratio.

107
00:06:58.471 --> 00:07:01.670
It doesn't need to have this negative
0.5 but it doesn't really matter.

108
00:07:04.218 --> 00:07:05.490
&gt;&gt; Mathew DesLauriers: That's a small fix.

109
00:07:05.490 --> 00:07:09.430
I'm gonna make it a bit more frequent
just by multiplying it by some number.

