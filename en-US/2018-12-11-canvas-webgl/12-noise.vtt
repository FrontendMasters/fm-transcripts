WEBVTT

1
00:00:00.460 --> 00:00:04.054
&gt;&gt; Mathew DesLauriers: I wanna go back to
this image that we're trying to create.

2
00:00:04.054 --> 00:00:06.540
We're trying to create these things.

3
00:00:06.540 --> 00:00:10.200
And we're not quite there yet, and that's
because we don't have this rotation,

4
00:00:10.200 --> 00:00:16.040
we don't have this text, and we don't have
this sort of undulating wavy-like pattern.

5
00:00:16.040 --> 00:00:20.010
And the way we're gonna
achieve that is using noise.

6
00:00:20.010 --> 00:00:23.430
So this is a new topic, here we go.

7
00:00:25.330 --> 00:00:29.915
So noise function is a specific type
of function that you don't really need

8
00:00:29.915 --> 00:00:31.889
to know what's under the hood.

9
00:00:31.889 --> 00:00:35.049
You don't really need to know the black
box that goes on inside this function.

10
00:00:35.049 --> 00:00:38.520
You just need to understand
the way that noise functions work.

11
00:00:38.520 --> 00:00:43.297
Is that you pass in a coordinate,
which is gonna be either

12
00:00:43.297 --> 00:00:47.587
a 2D coordinate like xy or
a 3D xyz, or a 4D xyzw.

13
00:00:47.587 --> 00:00:52.250
And with that coordinate, you get
back a value for that coordinate, so

14
00:00:52.250 --> 00:00:57.315
you get back a value, which is v here,
and this value's between -1 and 1.

15
00:00:57.315 --> 00:01:02.581
And this value is gonna be
slowly varying between -1 and

16
00:01:02.581 --> 00:01:06.440
1 based on the coordinate you pass in.

17
00:01:06.440 --> 00:01:07.431
So if you pass in 0.5,

18
00:01:07.431 --> 00:01:11.800
0.5 as your coordinate, you're always
gonna get back the same value.

19
00:01:11.800 --> 00:01:15.335
Maybe it's a -0.325 or
something like that,

20
00:01:15.335 --> 00:01:18.890
and it's just some
pseudo-random looking value.

21
00:01:18.890 --> 00:01:22.782
But if you pass in a coordinate that's
very close to the other coordinate, you're

22
00:01:22.782 --> 00:01:26.689
gonna end up with a value that's also very
close to the random value you had before.

23
00:01:26.689 --> 00:01:30.325
And so, what that's gonna allow us to
do is, it's gonna allow us to create

24
00:01:30.325 --> 00:01:34.196
this sort of undulating range of different
numbers, cuz right now, our random

25
00:01:34.196 --> 00:01:38.591
functions, they're all just using either
Gaussian randomness or uniform randomness,

26
00:01:38.591 --> 00:01:42.450
and you end up, every time you call that
function, you get a different value.

27
00:01:42.450 --> 00:01:46.470
Sometimes it's like 0.9,
sometimes it;s like 0.1.

28
00:01:46.470 --> 00:01:48.430
And so, those two different values are so

29
00:01:48.430 --> 00:01:52.140
different that if you place two different
out of brush strokes or two different

30
00:01:52.140 --> 00:01:55.896
items next to each other, they're
gonna end up looking wildly different.

31
00:01:55.896 --> 00:02:00.420
What we wanna do is make it so that they
slowly undulate from one value to another.

32
00:02:00.420 --> 00:02:04.753
And so a noise value can sort
of be visualized like this grid.

33
00:02:04.753 --> 00:02:08.767
And the way you would actually visualize
a grid like that, or an image like that,

34
00:02:08.767 --> 00:02:12.870
is by using the noise function,
where you have the x and y coordinate.

35
00:02:12.870 --> 00:02:17.275
So in the case of this image,
it's actually just like a grid,

36
00:02:17.275 --> 00:02:22.953
like what we were doing before,
except instead of a grid of 5x5 or 10x10,

37
00:02:22.953 --> 00:02:28.208
it's a grid of 100 pixels or
200 pixels wide by 150 pixels high,

38
00:02:28.208 --> 00:02:31.129
so it's actually just a grid of pixels.

39
00:02:31.129 --> 00:02:35.855
And so, you pass in the x and
y coordinate for that grid item,

40
00:02:35.855 --> 00:02:39.285
you get back a value between -1 and 1, and

41
00:02:39.285 --> 00:02:43.580
you map that value from -1 and
1 into a 0 to 1 range.

42
00:02:43.580 --> 00:02:46.444
And this is a pattern
that I like to use a lot,

43
00:02:46.444 --> 00:02:52.680
is to change a value that goes between -1
and 1 into a 0 to 1 range, you use this.

44
00:02:52.680 --> 00:02:55.930
And then, we turn that into a percentage,
we floor it so

45
00:02:55.930 --> 00:03:01.420
we get like a 98 or a 32, and
we just pass that into a CSS color string.

46
00:03:01.420 --> 00:03:04.889
And that's what produces
an image like this.

47
00:03:04.889 --> 00:03:08.474
You can also, you might be wondering
why is this useful so far, but

48
00:03:08.474 --> 00:03:12.570
one of the nice things is the way
you can manipulate the coordinates.

49
00:03:12.570 --> 00:03:15.890
And so, by scaling the coordinates that
are going into this noise function,

50
00:03:15.890 --> 00:03:17.940
you can end up with
a very different image.

51
00:03:17.940 --> 00:03:23.020
So this is multiplying the coordinates by
some large number, you end up with a lot

52
00:03:23.020 --> 00:03:27.930
more variation and a lot more
frequent changes in the way that

53
00:03:27.930 --> 00:03:32.820
the image is going from black to white or
from -1 to 1.

54
00:03:32.820 --> 00:03:37.640
And this kind of, if you imagine
you're on a helicopter looking down

55
00:03:37.640 --> 00:03:40.560
like a mountain terrain or
something like that.

56
00:03:40.560 --> 00:03:44.270
Imagine the helicopter moves very far up,
the mountains look much smaller.

57
00:03:44.270 --> 00:03:48.780
Or if the helicopter goes right down
to the hill, it looks much bigger.

58
00:03:48.780 --> 00:03:51.330
And that's exactly what
happens when you multiply

59
00:03:51.330 --> 00:03:54.040
the frequency by something smaller than 1,

60
00:03:54.040 --> 00:03:57.110
you end up not really seeing the mountains
anymore, you just see like a big hill.

61
00:03:57.110 --> 00:03:58.280
It's almost like you're
standing on a hill.

62
00:03:59.530 --> 00:04:02.650
That's how I visualize
these noise functions.

63
00:04:02.650 --> 00:04:07.373
You can also think of it as like a signal,
like an electromagnetic signal, or a wave

64
00:04:07.373 --> 00:04:11.976
like a sound wave or something like that,
and the sound wave is going up and down.

65
00:04:11.976 --> 00:04:15.766
And by changing the frequency of
the sound wave by like stretching it or

66
00:04:15.766 --> 00:04:20.420
putting it closer, you end up with
different frequency of the image.

67
00:04:20.420 --> 00:04:24.563
And so, we're gonna use the same thing,
except instead of randomly choosing

68
00:04:24.563 --> 00:04:28.204
a size, instead of just using
random.value or random.gaussian,

69
00:04:28.204 --> 00:04:32.369
we're gonna say, for each coordinate
in our grid, what's the noise value?

70
00:04:32.369 --> 00:04:36.849
And then, we're gonna use that noise value
to change the size of the brush stroke or

71
00:04:36.849 --> 00:04:40.241
the circle, or whatever the image
is that we're drawing, and

72
00:04:40.241 --> 00:04:42.272
then also change the rotation.

73
00:04:42.272 --> 00:04:45.640
And that's gonna be, it's not very
useful yet because if you try and

74
00:04:45.640 --> 00:04:47.670
rotate a circle,
you can't see anything different,

75
00:04:47.670 --> 00:04:51.960
but when we start to draw a text,
that will become more important.

