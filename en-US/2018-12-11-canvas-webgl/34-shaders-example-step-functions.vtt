WEBVTT

1
00:00:00.650 --> 00:00:04.343
&gt;&gt; Mathew DesLauriers: Next thing would
be let's have a white background.

2
00:00:04.343 --> 00:00:08.476
So you'll notice if the pixel
is transparent, like 0,

3
00:00:08.476 --> 00:00:11.040
we're just drawing black.

4
00:00:11.040 --> 00:00:14.986
And so actually, we have to set up the
background in this utility function here.

5
00:00:14.986 --> 00:00:17.764
And we set it by doing clear color.

6
00:00:17.764 --> 00:00:21.350
And you can use a string
ClearColor is white.

7
00:00:25.296 --> 00:00:26.758
&gt;&gt; Mathew DesLauriers: And
if you set this to be false,

8
00:00:26.758 --> 00:00:28.629
it's actually gonna be transparent.

9
00:00:28.629 --> 00:00:31.277
And you're gonna test that
again like we did earlier,

10
00:00:31.277 --> 00:00:34.800
by downloading the output and
you'll see that it's a transparent PNG.

11
00:00:34.800 --> 00:00:36.807
But we're gonna use white for now.

12
00:00:40.423 --> 00:00:43.258
&gt;&gt; Mathew DesLauriers: So another thing
we'll do and another thing you might

13
00:00:43.258 --> 00:00:47.479
notice if you're looking at this image and
you want it to be a really high quality

14
00:00:47.479 --> 00:00:51.846
image that you're sending to a client for
their branding or something like that.

15
00:00:51.846 --> 00:00:55.170
You might notice these jagged
edges around the circle.

16
00:00:55.170 --> 00:00:57.333
It's a bit hard to see on the screen but

17
00:00:57.333 --> 00:01:00.044
it's definitely noticeable
when you zoom in.

18
00:01:00.044 --> 00:01:03.723
And we want to smooth that circle a bit.

19
00:01:03.723 --> 00:01:05.810
So we're going to use another concept.

20
00:01:05.810 --> 00:01:11.520
So here we have this line here,
just this part,

21
00:01:11.520 --> 00:01:16.320
and the reason it's jagged is because
we're using such a harsh step.

22
00:01:16.320 --> 00:01:20.950
We're saying as soon as the distance is
greater than a certain value make it 0 and

23
00:01:20.950 --> 00:01:23.754
as soon as is less than
a certain value make it 1.

24
00:01:23.754 --> 00:01:26.940
And there's no smoothness in
between there, so is either 1 or 0.

25
00:01:26.940 --> 00:01:31.625
It's like a bit map but we actually want
it to do is slowly go from 0 to 1 and

26
00:01:31.625 --> 00:01:32.615
vice-versa.

27
00:01:32.615 --> 00:01:38.212
So we're gonna set this to the value,
we're gonna call this value alpha.

28
00:01:38.212 --> 00:01:40.909
Just leave it at 1 for
now just to make sure it works.

29
00:01:43.343 --> 00:01:45.700
&gt;&gt; Mathew DesLauriers: And
you should see everything.

30
00:01:45.700 --> 00:01:50.013
This means all the pixels in
the image are full transparency.

31
00:01:52.500 --> 00:01:55.288
&gt;&gt; Mathew DesLauriers: And what we're
gonna do is we're gonna learn about two

32
00:01:55.288 --> 00:01:56.509
different functions.

33
00:01:56.509 --> 00:01:58.904
The first one is exactly
what we had before,

34
00:01:58.904 --> 00:02:01.316
it's just looking a little bit different.

35
00:02:04.073 --> 00:02:06.320
&gt;&gt; Mathew DesLauriers: And
this is called a step function.

36
00:02:07.420 --> 00:02:12.253
In a step function,
it says if this is less than this value,

37
00:02:12.253 --> 00:02:16.797
if the first argument is less
than the second argument,

38
00:02:16.797 --> 00:02:19.613
return 0, otherwise return 1.

39
00:02:19.613 --> 00:02:24.966
I might have the arguments mixed up, but
either way it's basically exactly what

40
00:02:24.966 --> 00:02:30.255
we did before with the ternary where if
a is less than b use 0, otherwise use 1.

41
00:02:30.255 --> 00:02:34.486
But instead of step, which is a built-in
function just like mix and length,

42
00:02:34.486 --> 00:02:37.432
we're gonna use something
else called smoothstep.

43
00:02:37.432 --> 00:02:40.190
So step is really useful to learn,
and generally,

44
00:02:40.190 --> 00:02:44.039
whenever you're writing shaders,
if you're using the built-ins,

45
00:02:44.039 --> 00:02:48.110
it's gonna be a bit faster than
trying to do the math yourself.

46
00:02:48.110 --> 00:02:53.014
So that's just a tip if you're working
with shaders and want better performance.

47
00:02:53.014 --> 00:02:54.289
So smoothstep works like this.

48
00:02:54.289 --> 00:02:58.786
You pass in a low value, and
you pass in a high value.

49
00:02:58.786 --> 00:03:03.474
And then you pass in the value that you
have that lies somewhere between your low

50
00:03:03.474 --> 00:03:04.550
and high values.

51
00:03:05.740 --> 00:03:10.706
And what's gonna happen
is if this dist value is

52
00:03:10.706 --> 00:03:15.929
less than 0.25, we're gonna end up with 0.

53
00:03:15.929 --> 00:03:20.724
And if this dist value is greater
than 0.5, we're gonna end up with 1.

54
00:03:20.724 --> 00:03:22.815
But if it's anywhere between those,

55
00:03:22.815 --> 00:03:26.090
it's going too smoothly sort
of roll off between 0 and 1.

56
00:03:26.090 --> 00:03:30.690
And so that's what's happening here is
we have this smooth gradient effect,

57
00:03:30.690 --> 00:03:35.580
which is kind of cool on its own right and
you can try flipping those numbers around.

58
00:03:35.580 --> 00:03:39.239
Just doing instead of the first and
second parameter, just do them flipped.

59
00:03:40.270 --> 00:03:42.735
And so this is way too smooth.

60
00:03:42.735 --> 00:03:46.907
You know how the whole purpose of this
image was to make a really crisp mask?

61
00:03:46.907 --> 00:03:51.120
Although it's pretty cool already,
we have this blurry thing.

62
00:03:51.120 --> 00:03:56.345
What we should do is let's make this value
much, much closer to the other value.

63
00:03:56.345 --> 00:03:59.281
So the closer this value
is to the other value,

64
00:03:59.281 --> 00:04:02.380
the less of a gradient
fall off we're gonna get.

65
00:04:03.500 --> 00:04:05.350
So if we were to use
almost the same value.

66
00:04:05.350 --> 00:04:09.213
You just don't wanna use the same
value but almost the same,

67
00:04:09.213 --> 00:04:11.730
you can do 0.5005 or something.

68
00:04:11.730 --> 00:04:15.247
And there's a point which is too close and
it starts to look pixel-y again.

69
00:04:15.247 --> 00:04:18.611
But there might be a point at
which it starts to look smooth.

70
00:04:18.611 --> 00:04:24.610
And there's actually more technical
ways of achieving really perfect edges.

71
00:04:24.610 --> 00:04:28.139
But just for the sake of this class,
we're gonna just do this effect here.

