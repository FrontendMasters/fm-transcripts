WEBVTT

1
00:00:01.650 --> 00:00:05.981
&gt;&gt; Speaker 1: Can you do the exporting
GIFs and videos with these shader,

2
00:00:05.981 --> 00:00:08.325
with shader templates as well?

3
00:00:08.325 --> 00:00:09.912
&gt;&gt; Mathew DesLauriers: Mm-hm, mm-hm, yeah.

4
00:00:09.912 --> 00:00:13.142
&gt;&gt; Speaker 1: So
the main Canvas sketch doesn't change,

5
00:00:13.142 --> 00:00:16.124
it's just the template you're using?

6
00:00:16.124 --> 00:00:20.180
&gt;&gt; Mathew DesLauriers: Yeah, the template
is really just a copy-pasted sort of

7
00:00:20.180 --> 00:00:26.340
preset thing that I've decided on, but
all the actual structure is the same.

8
00:00:26.340 --> 00:00:30.592
So you can hit Cmd + S
to save a PNG from here.

9
00:00:30.592 --> 00:00:35.846
You can also change the dimensions just
like we were doing before to be like 512

10
00:00:35.846 --> 00:00:40.723
by 512, and all the sudden you get
a fixed size every time you export it.

11
00:00:40.723 --> 00:00:45.311
And you can even do things like use
preset sizes here, pixels per inch,

12
00:00:45.311 --> 00:00:48.216
and all of a sudden you're
taking a shader and

13
00:00:48.216 --> 00:00:52.596
you're exporting it as like a print
artwork, which is kinda neat.

14
00:00:54.932 --> 00:00:56.362
&gt;&gt; Mathew DesLauriers: And
yeah, you can do anime.

15
00:00:56.362 --> 00:00:58.671
So it's already animated, animate true.

16
00:00:58.671 --> 00:01:04.534
You can just set the duration like 4,
and maybe set an FPS as well,

17
00:01:04.534 --> 00:01:09.692
which is pretty common when
you're doing GIF exporting.

18
00:01:09.692 --> 00:01:15.867
So like FPS 24, maybe I'll set these
dimensions back to something normal for

19
00:01:15.867 --> 00:01:21.874
a GIF like 512 by 512 and remove this,
cuz I don't want it to be too big.

20
00:01:21.874 --> 00:01:25.892
And now if I was to save this out,
it would end up giving me,

21
00:01:25.892 --> 00:01:31.058
in whatever folder my output is,
it's gonna, like if I hit Cmd Shift + S,

22
00:01:31.058 --> 00:01:35.338
it's gonna export hundreds of
frames over dozens of frames.

23
00:01:35.338 --> 00:01:40.230
And that's why generally whenever I'm
doing GIF I just make sure my terminal

24
00:01:40.230 --> 00:01:45.196
command is saying output is equal to,
and then some temporary folder, just so

25
00:01:45.196 --> 00:01:48.151
I'm keeping my folders
a big more organized.

26
00:01:48.151 --> 00:01:52.486
But yeah, now you can see it's
exporting all these frames, and

27
00:01:52.486 --> 00:01:54.501
I can create a GIF out of that.

28
00:01:54.501 --> 00:01:57.663
And you can actually, cuz you know
how earlier we were using time, and

29
00:01:57.663 --> 00:01:59.872
that wasn't super helpful for
seamless loops?

30
00:01:59.872 --> 00:02:05.010
So instead of using time, you can change
this uniform to say playhead, and then

31
00:02:05.010 --> 00:02:10.241
you just take the playhead prop, you pass
the playhead prop down to the uniform.

32
00:02:10.241 --> 00:02:13.074
And then here instead of using
time you'd use playhead,

33
00:02:13.074 --> 00:02:17.101
and you'd multiply it by pi or pi 2 to
get those perfect, seamless loops again.

34
00:02:20.681 --> 00:02:21.820
&gt;&gt; Mathew DesLauriers: Yep.

35
00:02:27.142 --> 00:02:30.924
&gt;&gt; Speaker 3: Is there anything else
that you would use besides FragColor to

36
00:02:30.924 --> 00:02:32.606
manipulate a given pixel?

37
00:02:37.432 --> 00:02:42.272
&gt;&gt; Mathew DesLauriers: There's FragDepth,
which is another topic.

38
00:02:42.272 --> 00:02:44.153
It's like around the depth buffer and

39
00:02:44.153 --> 00:02:47.812
it goes back to that question you had
earlier about how do you sort things.

40
00:02:47.812 --> 00:02:53.268
But generally speaking in this version
of WebGL, in this version of GLSL,

41
00:02:53.268 --> 00:02:58.568
the only thing you really need to be
concerned with is this GL FragColor.

42
00:02:58.568 --> 00:03:02.935
There's other built-in variables depending
on what you're using shaders for,

43
00:03:02.935 --> 00:03:06.445
cuz something we haven't really
talked about is vertex shaders.

44
00:03:06.445 --> 00:03:11.662
So there's actually in this
I think this shader example

45
00:03:11.662 --> 00:03:16.324
here in the repo,
custom shaders and three.js.

46
00:03:16.324 --> 00:03:20.440
I think it introduces vertex shaders,
yeah.

47
00:03:20.440 --> 00:03:24.942
And because so
far we've just talked about pixel shaders

48
00:03:24.942 --> 00:03:29.275
where these are pixel shaders
on the surface of a mesh.

49
00:03:29.275 --> 00:03:32.981
And then when you actually change
the topology of the mesh that's when you

50
00:03:32.981 --> 00:03:34.732
start to get into vertex shaders.

51
00:03:34.732 --> 00:03:39.538
And it's just another string,
another source code just like the ones

52
00:03:39.538 --> 00:03:44.344
we've been writing so far,
except instead of outputting a FragColor

53
00:03:44.344 --> 00:03:48.590
you're outputting a position for
each triangle in the mesh.

54
00:03:48.590 --> 00:03:53.242
And I didn't want to get far into them cuz
it involves a little bit more math, and

55
00:03:53.242 --> 00:03:56.021
it involves some other
concepts that you have to

56
00:03:56.021 --> 00:03:59.000
build your way up to
understanding those things.

57
00:03:59.000 --> 00:04:03.529
But you can definitely follow this guide
and get the same sort of output of these

58
00:04:03.529 --> 00:04:08.211
exploding triangles, and it's animated and
it's moving and stuff like that.

59
00:04:08.211 --> 00:04:12.061
And the same concept is used
in this demo that I have here.

60
00:04:12.061 --> 00:04:17.610
Just to show you what it looks
like when you explode a 3D mesh,

61
00:04:17.610 --> 00:04:21.472
or in this case a 2D
mesh by its triangles.

62
00:04:21.472 --> 00:04:24.697
So when it's filled in you can
see that it's just a shape, but

63
00:04:24.697 --> 00:04:28.543
when you see it like that, when it's
outlined you can really get a sense of

64
00:04:28.543 --> 00:04:30.550
the triangles that make up this mesh.

65
00:04:30.550 --> 00:04:33.861
And the vertex shader is what's
creating this animation.

66
00:04:33.861 --> 00:04:35.860
And vertex shaders are really good for

67
00:04:35.860 --> 00:04:39.872
doing this kind of stuff because they
are really fast and really efficient.

68
00:04:39.872 --> 00:04:44.665
If we try to animate each of
these individual triangles

69
00:04:44.665 --> 00:04:47.278
manually it might be slower.

70
00:04:47.278 --> 00:04:51.086
Whereas with the vertex shader you can
animate millions of things at the same

71
00:04:51.086 --> 00:04:54.434
time, and it's still gonna be
running at 60 frames per second.

72
00:05:01.112 --> 00:05:06.740
&gt;&gt; Mathew DesLauriers: And
this link is also I think in the modules.

73
00:05:06.740 --> 00:05:11.245
And there's a lot of other stuff, too
that I hadn't really covered getting in

74
00:05:11.245 --> 00:05:13.976
the whole Canvas sketch ecosystem,
because so

75
00:05:13.976 --> 00:05:18.501
far I've been wanting to to focus more
on like Canvas API and are on three.js.

76
00:05:18.501 --> 00:05:22.260
But the actual tool that I've
been building Canvas sketch,

77
00:05:22.260 --> 00:05:27.370
there's things like using a sync and
a weight and using asynchronous functions.

78
00:05:27.370 --> 00:05:31.227
And this hot loading thing is something
that I haven't even really shown, I just

79
00:05:31.227 --> 00:05:34.875
showed a very basic example, but you can
do some cool stuff with it for sure.

80
00:05:37.292 --> 00:05:41.284
&gt;&gt; Mathew DesLauriers: Yeah,
just wondering actually, let's see.

81
00:05:46.822 --> 00:05:49.587
&gt;&gt; Mathew DesLauriers: Yeah,
definitely if you're interested in this,

82
00:05:49.587 --> 00:05:51.912
just take a look at
the Canvas Sketch Repo.

83
00:05:51.912 --> 00:05:57.442
One of the things I showed in one of
the slides was Pen Plotter artwork,

84
00:05:57.442 --> 00:05:59.545
and that looks like this.

85
00:05:59.545 --> 00:06:05.994
And this kind of thing is actually
exported with Canvas Sketch as well,

86
00:06:05.994 --> 00:06:09.969
and so
right now in our render functions, so

87
00:06:09.969 --> 00:06:15.463
if I was to look at,
let's say I go back to my 2D sketch file.

88
00:06:19.553 --> 00:06:22.293
&gt;&gt; Mathew DesLauriers: So remember how
we have this render function, it returns

89
00:06:22.293 --> 00:06:25.850
a render function, and it's just like
React where you have those props.

90
00:06:25.850 --> 00:06:30.252
And every time the props come in,
you give some context settings.

91
00:06:30.252 --> 00:06:33.442
You can actually return something
at the end of this function.

92
00:06:33.442 --> 00:06:38.553
And depending on what you return is gonna
change the way that the file exports.

93
00:06:38.553 --> 00:06:45.148
So right now if you return the canvas or
the context I guess you could say,

94
00:06:45.148 --> 00:06:50.338
it's gonna just render a PNG,
but if you return an object

95
00:06:50.338 --> 00:06:55.340
that says extension is a .txt and
data is hello world.

96
00:06:55.340 --> 00:06:57.906
And then I was to run this
through Canvas Sketch,

97
00:07:01.451 --> 00:07:03.325
&gt;&gt; Mathew DesLauriers: Now it's running,

98
00:07:03.325 --> 00:07:05.420
and now when I export,

99
00:07:05.420 --> 00:07:10.695
instead of exporting,
&gt;&gt; Mathew DesLauriers: Well,

100
00:07:10.695 --> 00:07:13.122
I mean, it should,
I might have messed something up.

101
00:07:13.122 --> 00:07:17.562
But instead of exporting
a PNG It will export a txt file.

102
00:07:17.562 --> 00:07:22.971
And you can do the same thing to export G
code if you're sending something to a CNC

103
00:07:22.971 --> 00:07:28.403
or a robotic printer, and you can actually
get into pretty complex workflows.

104
00:07:28.403 --> 00:07:32.233
One of the things I did, let's see.

105
00:07:33.712 --> 00:07:35.790
&gt;&gt; Mathew DesLauriers: I don't
know if I have an image of it, but

106
00:07:35.790 --> 00:07:38.123
another example for
more advanced print is.

107
00:07:38.123 --> 00:07:41.626
Let's say you're doing print
that's using risograph or

108
00:07:41.626 --> 00:07:45.555
offset printing where you have to
send a print to a print studio and

109
00:07:45.555 --> 00:07:49.934
they actually ask for three different
layers or three different masks.

110
00:07:49.934 --> 00:07:53.336
And they say okay, instead of it being
in color I want all of the shapes in

111
00:07:53.336 --> 00:07:57.081
the background to be black and all of the
shapes in the foreground to be black but

112
00:07:57.081 --> 00:07:58.820
I want them to be two separate PNGs.

113
00:07:58.820 --> 00:08:01.923
And then the print studio will
end up doing silkscreen or

114
00:08:01.923 --> 00:08:06.490
they'll end up doing some technique that
gives it a much more organic print look.

115
00:08:06.490 --> 00:08:11.831
And so you can actually code your way
through that instead of just rendering

116
00:08:11.831 --> 00:08:16.512
a single canvas you can export
multiple PNGs and stuff like that.

117
00:08:16.512 --> 00:08:20.075
So it's definitely yeah,
it's a bit more complex than it looks.

118
00:08:20.075 --> 00:08:23.739
We've just been taking some of
the basics and making sure that we're

119
00:08:23.739 --> 00:08:27.731
focusing on the basic concepts that
aren't so specific to Canvas Sketch.

120
00:08:27.731 --> 00:08:32.200
Cuz the idea is that you're probably gonna
go back to whatever you're doing this

121
00:08:32.200 --> 00:08:35.892
stuff on, whether it's or
anything else, or Frontend.

122
00:08:35.892 --> 00:08:38.190
And you might not be using Canvas Sketch,
but

123
00:08:38.190 --> 00:08:42.076
the concepts we've talked about are pretty
much they apply no matter what.

124
00:08:42.076 --> 00:08:46.916
I mean, there's a few specific API things,
but they should apply generally

125
00:08:46.916 --> 00:08:51.845
across the board, whether you're doing
Frontend or three.js or whatever.

126
00:08:51.845 --> 00:08:56.437
&gt;&gt; Speaker 3: Have you ever generated like
noise, like pixelated noise type stuff or

127
00:08:56.437 --> 00:08:59.344
do you know resources for
that sort of thing,

128
00:08:59.344 --> 00:09:00.157
or-
&gt;&gt; Mathew DesLauriers: Like for

129
00:09:00.157 --> 00:09:01.643
what purpose, I guess?

130
00:09:01.643 --> 00:09:05.220
&gt;&gt; Speaker 3: Almost like a speckle noise
effect, you know what I'm talking about?

131
00:09:05.220 --> 00:09:06.563
Almost like a subtle texture.

132
00:09:06.563 --> 00:09:07.385
&gt;&gt; Mathew DesLauriers: You're
getting into a current project?

133
00:09:07.385 --> 00:09:08.481
[LAUGH]
&gt;&gt; Speaker 3: [LAUGH] What's that?

134
00:09:08.481 --> 00:09:10.933
&gt;&gt; Mathew DesLauriers: No, just kidding.

135
00:09:10.933 --> 00:09:14.742
Yes, so you can actually use
noise from a noise function,

136
00:09:14.742 --> 00:09:17.710
just like what we were
doing with the shader.

137
00:09:19.620 --> 00:09:22.974
So here's an example, where's our noise?

138
00:09:24.980 --> 00:09:28.343
&gt;&gt; Mathew DesLauriers: Basically, you
just change the frequency to be much more

139
00:09:28.343 --> 00:09:33.445
frequent, so here you see,
&gt;&gt; Mathew DesLauriers: This

140
00:09:33.445 --> 00:09:36.826
is a frequency of 5 versus
a frequency of 0.5.

141
00:09:36.826 --> 00:09:41.406
And if you were to use noise and you were
to use a frequency of 50 or 100 or 5,000,

142
00:09:41.406 --> 00:09:43.972
then you can start to get
these little speckles and

143
00:09:43.972 --> 00:09:46.376
you can start to get that
effect like you want.

