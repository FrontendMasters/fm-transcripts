WEBVTT

1
00:00:00.290 --> 00:00:00.990
&gt;&gt; Speaker 1: Quick question.

2
00:00:00.990 --> 00:00:04.660
&gt;&gt; Mathew DesLauriers: Yep.
&gt;&gt; Speaker 1: We're doing center.X

3
00:00:04.660 --> 00:00:09.120
times the aspect because we're passing in
width divided by height of the aspect.

4
00:00:10.750 --> 00:00:13.860
If we had done height divided by width

5
00:00:13.860 --> 00:00:17.700
would we want to do
center.Y equals the aspect?

6
00:00:17.700 --> 00:00:19.430
&gt;&gt; Mathew DesLauriers: Yeah
that sounds right.

7
00:00:19.430 --> 00:00:21.810
We can just confirm that.

8
00:00:23.236 --> 00:00:26.350
I always end up just doing
width divided by height, but

9
00:00:26.350 --> 00:00:31.380
I think this would also work, you can do
center.y times aspect if you're passing

10
00:00:31.380 --> 00:00:36.040
in height divided by width,
or if you're passing in,

11
00:00:36.040 --> 00:00:40.420
let's say passing in
width divided by height.

12
00:00:42.150 --> 00:00:48.570
You can do center.x times aspect or
you can do center.y divided by aspect.

13
00:00:48.570 --> 00:00:53.444
And there's some subtle
differences in terms of which axis

14
00:00:53.444 --> 00:00:56.865
it sort of aligns it to, stuff like that.

15
00:00:56.865 --> 00:01:00.885
So, let's say, oops.

16
00:01:04.107 --> 00:01:07.691
&gt;&gt; Mathew DesLauriers: So now, no matter
if I'm doing center.x times aspect, and

17
00:01:07.691 --> 00:01:12.397
aspect is width divided by height, no
matter if I resize my browser wide or not,

18
00:01:12.397 --> 00:01:15.370
the circle is going to be the same size.

19
00:01:15.370 --> 00:01:16.740
But if I was to do this
the other way around,

20
00:01:16.740 --> 00:01:20.249
where center.y is divided by aspect.

21
00:01:21.300 --> 00:01:27.490
Now, when I resize wider or not wide
it changes the side of the circle.

22
00:01:27.490 --> 00:01:30.290
Sometimes that's actually useful if
you have an image that's always maybe

23
00:01:30.290 --> 00:01:33.010
going up and down and growing in height.

24
00:01:33.010 --> 00:01:36.670
You might want to use an aspect
ratio correction like this so

25
00:01:36.670 --> 00:01:38.640
that your circle's always the same size.

26
00:01:40.940 --> 00:01:41.440
Yeah.
And

27
00:01:41.440 --> 00:01:45.090
just feel free to play
around these values.

28
00:01:45.090 --> 00:01:49.500
Maybe it is kinda cool to have
a fall off that's a bit smoother.

29
00:01:49.500 --> 00:01:54.260
You can also just try adding,
assign time to things.

30
00:01:54.260 --> 00:01:57.370
[LAUGH] Sometimes,
it creates these cool images.

31
00:01:57.370 --> 00:02:00.300
You can try like just
playing around with things.

32
00:02:00.300 --> 00:02:03.230
So kind of one of the fun
things about shaders is,

33
00:02:03.230 --> 00:02:05.168
you can just have a lot of fun
tweaking things for hours.

34
00:02:05.168 --> 00:02:08.222
[LAUGH] But, yeah.

35
00:02:10.409 --> 00:02:13.520
&gt;&gt; Speaker 1: So length,
smoothstep, and mix,

36
00:02:13.520 --> 00:02:17.910
are those all shader functions or
are those GSLs?

37
00:02:17.910 --> 00:02:20.700
&gt;&gt; Mathew DesLauriers: Yeah, so
it's basically the same, those two things.

38
00:02:20.700 --> 00:02:26.810
In the context of what we're doing today,
we're working with shaders in WebGL.

39
00:02:26.810 --> 00:02:29.457
Which is basically,
that means we're gonna,

40
00:02:29.457 --> 00:02:34.330
all of our shaders are gonna be using
GLSL, which is a programming language.

41
00:02:34.330 --> 00:02:37.460
So, it's a bit like JavaScript or
Java, it's just different language.

42
00:02:37.460 --> 00:02:42.220
And the GLSL language,
it has these built in functions,

43
00:02:42.220 --> 00:02:45.360
like sign, and length, and smoothstep.

44
00:02:45.360 --> 00:02:49.216
And it has these built in data
types like float, and vec2.

45
00:02:49.216 --> 00:02:53.661
And, so yeah, I mean,
it is both shaders and GLSL.

46
00:02:53.661 --> 00:02:58.569
Because GLSL is the language, and
shader is sort of the concept,

47
00:02:58.569 --> 00:03:02.080
I guess you could say,
if that makes sense.

48
00:03:02.080 --> 00:03:07.341
Somebody was asking about how
do you apply fragment shaders or

49
00:03:07.341 --> 00:03:10.690
shaders, pixel shaders to a 3D mesh.

50
00:03:10.690 --> 00:03:15.050
This is a bit of an advanced topic that
we might not really get into today, but

51
00:03:15.050 --> 00:03:18.620
I'll just show an example
of how simple it is.

52
00:03:20.250 --> 00:03:24.070
There's a bit more complexity
involved than this because Three.js,

53
00:03:24.070 --> 00:03:26.450
it handles shaders
a little bit differently.

54
00:03:26.450 --> 00:03:29.240
It tries to make a few things easier for
you, but

55
00:03:29.240 --> 00:03:32.716
as a result there's some
slight differences.

56
00:03:32.716 --> 00:03:35.980
But in Three.js if you
use a shader material,

57
00:03:35.980 --> 00:03:40.590
you can specify your own fragment
shader string, just looks like this.

58
00:03:40.590 --> 00:03:45.200
And then you can change
the string to change the shade or

59
00:03:45.200 --> 00:03:48.190
just like we are with
the full screen shader.

60
00:03:49.590 --> 00:03:52.680
And then, there's sort of a whole another,

61
00:03:52.680 --> 00:03:56.870
like a can of worms if you wanted
to get into doing individual

62
00:03:58.320 --> 00:04:03.500
shading or textures, or
materials for each of these cubes.

63
00:04:03.500 --> 00:04:07.570
So it's not really something we'll get
into because it involves passing down some

64
00:04:07.570 --> 00:04:12.680
things like UV coordinates through
Three.js that we might not get into,

65
00:04:12.680 --> 00:04:18.060
but basically once you're getting more
familiar with shaders and shader code,

66
00:04:18.060 --> 00:04:22.180
doing this sort of thing in Three.js
is definitely gonna be much easier.

67
00:04:22.180 --> 00:04:23.820
And there's a lots of tutorials.

68
00:04:23.820 --> 00:04:28.060
Actually, if you're interested in that,
go to the repo and

69
00:04:28.060 --> 00:04:34.310
at the very bottom there's a couple
links on GLSL and shaders.

70
00:04:34.310 --> 00:04:35.250
And this one,

71
00:04:35.250 --> 00:04:38.590
the second one here it's gonna cover
some of the stuff we're talking about

72
00:04:38.590 --> 00:04:42.630
today in more depth, talking about
the data structures and stuff like that.

73
00:04:42.630 --> 00:04:44.820
And it'll explain some of the syntax.

74
00:04:44.820 --> 00:04:47.750
And then this one here,
the custom shaders in Three.js,

75
00:04:47.750 --> 00:04:49.600
this is probably exactly what you want.

76
00:04:51.820 --> 00:04:55.014
And both of these will go
through using shaders.

77
00:04:55.014 --> 00:04:59.720
This one will go through like really
doing everything from scratch

78
00:04:59.720 --> 00:05:02.930
using a few different tools
than what we're using today.

79
00:05:02.930 --> 00:05:04.870
But a lot of the same concepts.

80
00:05:06.150 --> 00:05:09.350
So it's just a link to
check out maybe later.

