WEBVTT

1
00:00:00.140 --> 00:00:03.490
&gt;&gt; Mathew DesLauriers: So what I'm gonna
do is I'm gonna go back to my terminal,

2
00:00:03.490 --> 00:00:09.270
and I'm going to hit Ctrl+C
to stop that process.

3
00:00:09.270 --> 00:00:11.460
And I'm gonna create a new sketch.

4
00:00:12.590 --> 00:00:16.010
So this one I'm gonna call shader.js.

5
00:00:16.010 --> 00:00:19.369
Again, I'm gonna do --new
to create a new file, and

6
00:00:19.369 --> 00:00:22.082
then I'm gonna do --template=shader.

7
00:00:25.470 --> 00:00:30.938
&gt;&gt; Mathew DesLauriers: And now what should
happen is if we reload our page and

8
00:00:30.938 --> 00:00:37.775
just see 9966,
&gt;&gt; Mathew DesLauriers: We

9
00:00:37.775 --> 00:00:40.731
should have this sort of
gradient-looking thing.

10
00:00:41.780 --> 00:00:45.066
And I'm gonna just open up our
code that we just created, so

11
00:00:45.066 --> 00:00:48.178
it should be in the same folder
as the rest of your stuff.

12
00:00:59.473 --> 00:01:01.888
&gt;&gt; Mathew DesLauriers: So
there is a few new things here,

13
00:01:01.888 --> 00:01:05.980
one thing you'll notice is
that there is no three.js.

14
00:01:05.980 --> 00:01:09.650
And you can us three.js to create shaders,
and to create these kind of images.

15
00:01:11.260 --> 00:01:17.250
But what I wanted to do is just focus
this example on just purely the code that

16
00:01:17.250 --> 00:01:23.450
makes up the shader, the GLSL code, and
try and create images just using shaders.

17
00:01:23.450 --> 00:01:28.090
Because actually there's such a sort
of big, complex world to shaders.

18
00:01:28.090 --> 00:01:32.050
You can use them on meshes, and you can
create really interesting patterns and

19
00:01:32.050 --> 00:01:33.090
surfaces.

20
00:01:33.090 --> 00:01:36.650
You can also use shaders to manipulate
the way a mesh actually looks.

21
00:01:36.650 --> 00:01:39.260
Instead of making it a sphere,
you can make it a really bumpy sphere,

22
00:01:39.260 --> 00:01:42.540
you can make it a really sort
of parametric-looking thing.

23
00:01:42.540 --> 00:01:46.320
And so it's really, really powerful, but
it's such a big topic that it would take

24
00:01:46.320 --> 00:01:48.428
at least a couple days to
start to cover it all.

25
00:01:48.428 --> 00:01:53.073
And so what I wanted to do was just focus
purely on the shader code, just get us

26
00:01:53.073 --> 00:01:58.300
a bit familiar with the syntax,
because it's a bit of a different syntax.

27
00:01:58.300 --> 00:02:01.220
And so at the very top of our
program we have CANVAS-sketch, and

28
00:02:01.220 --> 00:02:04.150
then we have a util/shader.

29
00:02:04.150 --> 00:02:08.360
And this is a utility that I
like to use to just get really

30
00:02:08.360 --> 00:02:14.050
quickly started with a full screen shader,
just like this.

31
00:02:14.050 --> 00:02:16.840
And then we have this
thing called glslify.

32
00:02:18.220 --> 00:02:21.524
And we're gonna get into this in a second,
but

33
00:02:21.524 --> 00:02:26.183
this is basically a module and
a tool that we use to write shaders,

34
00:02:26.183 --> 00:02:29.761
just like we're writing
the rest of our program.

35
00:02:29.761 --> 00:02:33.194
Cuz you'll notice, so far during
the day we've been requiring modules,

36
00:02:33.194 --> 00:02:36.690
we've been getting utilities from NPM and
stuff like that.

37
00:02:36.690 --> 00:02:40.290
Well, we wanna be able to do
the same thing with our shader code.

38
00:02:40.290 --> 00:02:43.720
But you'll notice it's not JavaScript,
so we can't just require or

39
00:02:43.720 --> 00:02:48.570
import something,
just like we are with everything else.

40
00:02:48.570 --> 00:02:52.170
So we actually have to use
this tool called glslify,

41
00:02:52.170 --> 00:02:55.700
and that's going to allow us
to import some utilities.

42
00:02:55.700 --> 00:02:59.700
So just like we're importing other
utilities, whether it's color palette or

43
00:02:59.700 --> 00:03:01.230
something like that.

44
00:03:01.230 --> 00:03:05.090
Because of this, we're gonna end
up being able to import utilities.

45
00:03:05.090 --> 00:03:07.740
You don't really need to use this yet.

46
00:03:07.740 --> 00:03:11.580
You could just go without using it for
the first exercise.

47
00:03:11.580 --> 00:03:15.270
But we will probably be using it a bit
later, so I'll just keep it here for now.

48
00:03:16.530 --> 00:03:20.010
And then we have our settings,
they're pretty familiar.

49
00:03:20.010 --> 00:03:23.206
You just need to make sure you
specify webgl instead of using 2D,

50
00:03:23.206 --> 00:03:27.260
cuz we're now using WebGL canvas,
and you make sure it's animated.

51
00:03:29.170 --> 00:03:32.240
Then here we have our actual shader code.

52
00:03:32.240 --> 00:03:34.160
And so two things you'll notice.

53
00:03:34.160 --> 00:03:37.244
One is that it's a template string,
just es6,

54
00:03:37.244 --> 00:03:39.962
this allows us to do multi-line strings.

55
00:03:39.962 --> 00:03:43.681
And then the other thing is we're
wrapping it inside of this GLSL.

56
00:03:43.681 --> 00:03:47.500
And if I was to delete that,
it's still gonna work fine.

57
00:03:47.500 --> 00:03:53.240
And so really GLSL, this utility glslify,
it's really just gonna be useful

58
00:03:53.240 --> 00:03:58.710
when we start to bring in modules and
put them inside of our shader code.

59
00:03:58.710 --> 00:04:01.720
But we're not doing that yet, so
whether or not you have this function,

60
00:04:01.720 --> 00:04:05.060
it's not gonna make a difference,
it will just be handy later on.

61
00:04:06.910 --> 00:04:10.080
And then, if we just skip this string for
now and we just come back to it,

62
00:04:10.080 --> 00:04:13.150
and then we have a sketch function.

63
00:04:13.150 --> 00:04:17.543
This is our artwork,
we're just sort of using this utility.

64
00:04:17.543 --> 00:04:22.020
Remember this is the utility
that I brought in, createShader.

65
00:04:22.020 --> 00:04:27.788
And you pass in the WebGL context,
which comes from CANVAS-sketch,

66
00:04:27.788 --> 00:04:32.693
you pass along your string,
your fragment shader string.

67
00:04:32.693 --> 00:04:37.015
Basically, the way that you specify
this language is with strings in

68
00:04:37.015 --> 00:04:40.831
JavaScript with WebGL, and
then you specify any uniforms.

69
00:04:40.831 --> 00:04:46.063
And remember how we're saying uniform is
something that is a value from JavaScript,

70
00:04:46.063 --> 00:04:48.897
and it's basically like
imagine a variable,

71
00:04:48.897 --> 00:04:53.782
except it's a variable inside of our
shader, and we'll get into that as well.

72
00:04:53.782 --> 00:04:58.678
So going back to the shader stuff here,
what I'm gonna do, and it might not

73
00:04:58.678 --> 00:05:03.573
work in your editor, but you can actually
set it up if you want in your time or

74
00:05:03.573 --> 00:05:08.890
later, is to use GLSL syntax
highlighting for this template string.

75
00:05:08.890 --> 00:05:13.580
And this is from an extension, there's a
couple extensions that I have in VS Code.

76
00:05:13.580 --> 00:05:18.830
One of them is called Shader languages
support and the other one is called,

77
00:05:18.830 --> 00:05:22.960
what is it, Tagged template strings, or

78
00:05:22.960 --> 00:05:28.140
something like that, in your Comment
tagged template strings in VS Code.

79
00:05:28.140 --> 00:05:31.360
Sublime Text probably has
some similar stuff, but

80
00:05:31.360 --> 00:05:33.850
it's really handy when
you're working with shaders.

81
00:05:33.850 --> 00:05:36.230
You just put a comment saying glsl, and

82
00:05:36.230 --> 00:05:39.430
then any string after it is
gonna get syntax highlighters.

83
00:05:39.430 --> 00:05:40.500
And I'm just doing that mainly for

84
00:05:40.500 --> 00:05:43.870
you guys to see and
understand this a bit better as we code.

85
00:05:46.130 --> 00:05:51.240
So if we try and dissect this,
we have some variables here.

86
00:05:52.940 --> 00:05:58.210
One of them is coming from JavaScript,
time, this is the current time in seconds.

87
00:05:58.210 --> 00:06:00.992
It's a float,
which means it's a decimal value.

88
00:06:00.992 --> 00:06:05.880
And then we have this other variable,
which is a varying called vUv.

89
00:06:05.880 --> 00:06:10.780
And we can't really control this one,
it just comes from the WebGl, and

90
00:06:10.780 --> 00:06:14.050
you can just imagine it as coming
from this black box for now.

91
00:06:14.050 --> 00:06:18.967
And it gives us the UV coordinates of
the surface that we're drawing into.

92
00:06:18.967 --> 00:06:21.149
And then here we have
a big bunch of stuff, and

93
00:06:21.149 --> 00:06:23.631
I'm just gonna replace
this with nothing for now.

94
00:06:23.631 --> 00:06:25.696
We're gonna start again, just so

95
00:06:25.696 --> 00:06:28.981
that we don't have to dissect
whatever that code was.

96
00:06:28.981 --> 00:06:31.999
So if you don't have anything
in your main function,

97
00:06:31.999 --> 00:06:36.159
main function is where all the sort
of pixel manipulation comes from, and

98
00:06:36.159 --> 00:06:38.530
every shader has to have a main function.

99
00:06:40.070 --> 00:06:44.600
And remember, the point of the shader
is to define what is the pixel color.

100
00:06:44.600 --> 00:06:46.450
So let's start by just
making everything white.

101
00:06:48.380 --> 00:06:49.620
And it looks like this.

102
00:06:49.620 --> 00:06:53.992
We have FragColor,
which is a very special built-in reserve

103
00:06:53.992 --> 00:06:58.543
word in shader languages, or
at least in this shader language.

104
00:06:58.543 --> 00:07:04.041
And we assign that to vec4[1.0].

105
00:07:04.041 --> 00:07:08.632
Something that's really important, that's
really annoying and really important.

106
00:07:08.632 --> 00:07:14.593
If I was to open my console and then I was
just to put in, maybe it will work here.

107
00:07:14.593 --> 00:07:18.688
But in some cases, and
we'll probably get into this later,

108
00:07:18.688 --> 00:07:23.507
but in some cases you're gonna get
an error where if you just put a number

109
00:07:23.507 --> 00:07:27.210
without a decimal point,
it might error out.

110
00:07:27.210 --> 00:07:30.267
And that's just something
to be really mindful of.

111
00:07:30.267 --> 00:07:34.574
So if you have an error in your code,
just check to make sure your numbers,

112
00:07:34.574 --> 00:07:39.100
they have to have a decimal point
if they're a floating point number.

113
00:07:39.100 --> 00:07:41.490
Cuz if you don't have a decimal point,
sometimes

114
00:07:41.490 --> 00:07:46.686
the language will interpret that as
an integer and that will create an error.

115
00:07:46.686 --> 00:07:49.120
So just, that's one thing to keep in mind.

116
00:07:49.120 --> 00:07:52.632
Okay, so if you got this far
you'll have a white background.

117
00:07:52.632 --> 00:07:58.229
And we're just gonna try and decipher
this sort of data structure and create

118
00:07:58.229 --> 00:08:04.011
something that's red by using instead
of a single value in the constructors.

119
00:08:04.011 --> 00:08:06.919
Cuz remember, when you use a single value,

120
00:08:06.919 --> 00:08:10.781
it sets that same value for
all the different components.

121
00:08:10.781 --> 00:08:16.953
And if we set it to 1.0, 0.1, we should
end up with a pure red background.

122
00:08:16.953 --> 00:08:22.083
And what's happening is that we're
using a four component vector,

123
00:08:22.083 --> 00:08:27.930
where it's red, green, blue, and
then alpha, the opacity of the canvas.

124
00:08:27.930 --> 00:08:31.620
We can set that to a different value, and
we're gonna end up with a darker canvas.

125
00:08:31.620 --> 00:08:35.671
So usually, we wanna use alpha of 1,

126
00:08:35.671 --> 00:08:39.472
just means full transparency, and

127
00:08:39.472 --> 00:08:45.312
we're using vec4 because
FragColor is a RGBA value.

128
00:08:45.312 --> 00:08:50.226
Just like in CSS, we have RGBA, and
then you can specify different values

129
00:08:50.226 --> 00:08:53.724
you might be familiar with,
I'll just write here.

130
00:08:53.724 --> 00:08:58.652
You might be familiar with this
syntax in CSS or in, sometimes,

131
00:08:58.652 --> 00:09:01.260
the JavaScript as well.

132
00:09:01.260 --> 00:09:04.652
And this syntax is where it's
the red color, the green color,

133
00:09:04.652 --> 00:09:08.109
the blue color, and
those values are between 0 and 255, and

134
00:09:08.109 --> 00:09:10.370
then you have the alpha between 0 and 1.

135
00:09:10.370 --> 00:09:13.776
Well, this is pretty similar,
except all of our values and

136
00:09:13.776 --> 00:09:16.651
shaders are generally
gonna be between 0 and 1.

137
00:09:16.651 --> 00:09:20.896
So it's red of 1, it's basically
just like saying red of 255.

138
00:09:20.896 --> 00:09:21.640
Makes sense?

139
00:09:23.370 --> 00:09:30.132
Okay, so the first thing to try and do
here is to, say, I wanna make a gradient.

140
00:09:30.132 --> 00:09:34.676
So instead of using
these three components,

141
00:09:34.676 --> 00:09:38.739
which is red, by doing r 1, g 0, b 0,

142
00:09:38.739 --> 00:09:43.163
we're gonna replace this with a vec3, and

143
00:09:43.163 --> 00:09:48.922
inside of that vec3 we're
going to set the UVcoord.x.

144
00:09:48.922 --> 00:09:56.761
So just remember that vUv
is pointing to a vec2.

145
00:09:56.761 --> 00:10:02.048
And when you have a vec2 or
a vec3, vec2 means it has an x and

146
00:10:02.048 --> 00:10:05.987
y coordinate,
vec3 means it has an x and y and

147
00:10:05.987 --> 00:10:10.577
z coordinate, and
vec4 means it has x, y, z and w.

148
00:10:10.577 --> 00:10:16.060
And so because this is a vec2 we can do .x
or .y, we end up with that gradient image.

