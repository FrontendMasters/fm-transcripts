WEBVTT

1
00:00:03.310 --> 00:00:05.010
&gt;&gt; Mathew DesLauriers: So
far we've got some scene.

2
00:00:05.010 --> 00:00:07.180
We've got everything animated.

3
00:00:07.180 --> 00:00:10.775
We've been talking about
how to position things,

4
00:00:10.775 --> 00:00:14.208
how to export them as GIF,
and things like that.

5
00:00:14.208 --> 00:00:17.870
And we could go on this
sort of path a bit more.

6
00:00:17.870 --> 00:00:21.530
We could try and
animate each individual cube.

7
00:00:21.530 --> 00:00:25.310
Or we could try and rotate each
individual cube or something like that.

8
00:00:25.310 --> 00:00:27.080
But I just wanted to move forward and

9
00:00:27.080 --> 00:00:32.180
pave ahead with the next kind of concept,
which would be around shaders.

10
00:00:32.180 --> 00:00:34.522
And then after we get into shaders,

11
00:00:34.522 --> 00:00:37.892
we'll have a bit more time
to just relax and chill.

12
00:00:37.892 --> 00:00:39.613
So for now I'm just going to close that.

13
00:00:44.923 --> 00:00:46.960
&gt;&gt; Mathew DesLauriers: So
what is a shader?

14
00:00:46.960 --> 00:00:54.190
So a shader is a small little program
that looks a bit like this and

15
00:00:54.190 --> 00:00:58.950
it's a small little program that
is meant to do a single task and

16
00:00:58.950 --> 00:01:01.720
it's meant to do a single
task really really well.

17
00:01:01.720 --> 00:01:05.240
And it's actually not even in JavaScript
so when we look at this we're gonna see

18
00:01:05.240 --> 00:01:08.390
some things that look familiar but
it's using a different language.

19
00:01:08.390 --> 00:01:13.630
It's called GLSL and
GLSL is a shader language for

20
00:01:13.630 --> 00:01:17.920
WebGL or for OpenGL and
it has some different syntax.

21
00:01:17.920 --> 00:01:20.710
It's a bit more like C
rather than JavaScript.

22
00:01:21.770 --> 00:01:24.600
And it is composed of these
different things here.

23
00:01:24.600 --> 00:01:29.820
So we have some stuff at
the top of the program

24
00:01:29.820 --> 00:01:33.400
which specifies the floating
point precisions so,

25
00:01:33.400 --> 00:01:37.200
this is sort of something that we don't
really need to deal with in JavaScript but

26
00:01:37.200 --> 00:01:40.530
it's basically telling us
how precise our numbers are.

27
00:01:40.530 --> 00:01:44.860
And we usually just wanna keep it at
high p which it means high precision.

28
00:01:44.860 --> 00:01:49.540
That just means accurate numbers for
now and then we have some inputs.

29
00:01:49.540 --> 00:01:50.900
These are our values.

30
00:01:50.900 --> 00:01:54.020
Usually numbers,
sometimes like an opacity or

31
00:01:54.020 --> 00:01:59.460
like some sort of information that's
stored in a number or a coordinate.

32
00:01:59.460 --> 00:02:01.750
Those are coming from WebGL.

33
00:02:01.750 --> 00:02:03.850
And they're called varying.

34
00:02:03.850 --> 00:02:08.550
We're gonna get into what all these mean,
but I'll just walk you through them.

35
00:02:08.550 --> 00:02:13.611
And it's using vec2, so
unlike JavaScript where we just say

36
00:02:13.611 --> 00:02:18.680
var x is equal to 3,
we actually have to say what that type is.

37
00:02:18.680 --> 00:02:21.130
So it's a bit more like c or
c++ or something like that,

38
00:02:21.130 --> 00:02:23.920
or Java maybe, something like that,

39
00:02:23.920 --> 00:02:29.134
where you have to say that this
variable VUV is actually of type vec2.

40
00:02:29.134 --> 00:02:34.310
And vec2 is a type that means two
dimensional vector, or coordinate.

41
00:02:34.310 --> 00:02:37.670
Like XY position or something like that.

42
00:02:37.670 --> 00:02:40.482
And then you can also use float types.

43
00:02:40.482 --> 00:02:45.040
So basically, we're just going to be
dealing with vec2s, and vec3s and vec4s.

44
00:02:45.040 --> 00:02:47.120
And float types.

45
00:02:47.120 --> 00:02:49.240
And then there's these other
things called uniforms, and

46
00:02:49.240 --> 00:02:50.710
we're going to get into
what all these mean.

47
00:02:50.710 --> 00:02:54.360
But basically, just think of shaders as
little tiny programs that look like this.

48
00:02:55.470 --> 00:03:00.210
And one way to try and visualize and
conceptualize what a shader is,

49
00:03:00.210 --> 00:03:03.740
is to consider an image,
like triangle, a colored triangle.

50
00:03:05.010 --> 00:03:07.730
But instead of just looking at
it as an image or a graphic or

51
00:03:07.730 --> 00:03:12.200
a vector image,
try to image it as a grid of pixels.

52
00:03:12.200 --> 00:03:13.380
And you can zoom in on the image and

53
00:03:13.380 --> 00:03:16.760
start to see that it is really just
made up of little tiny square pixels.

54
00:03:16.760 --> 00:03:19.770
If we were to zoom in further,
if we were to pixellate it further,

55
00:03:19.770 --> 00:03:21.550
we'd see really it is a grid.

56
00:03:21.550 --> 00:03:25.350
Just like the grids we've been
working on so far in our workshop and

57
00:03:25.350 --> 00:03:28.660
it's just a grid of different
squares that are different colors.

58
00:03:28.660 --> 00:03:31.780
And what the shader is doing,
is the shader

59
00:03:31.780 --> 00:03:36.960
is this piece of code that just says, how
does each individual pixel get colored.

60
00:03:36.960 --> 00:03:39.430
And so the shader is getting run,

61
00:03:39.430 --> 00:03:43.210
potentially millions of times
because the shader is getting run.

62
00:03:43.210 --> 00:03:46.750
It's like a function that gets run
on every single pixel in a shape.

63
00:03:46.750 --> 00:03:50.419
And so in this image,
it's a very chunky pixellated grid, and

64
00:03:50.419 --> 00:03:55.650
there's maybe like a 100 or 200 or
300 of these little colored squares.

65
00:03:55.650 --> 00:03:58.560
And so that shader would
have to get run 300 times.

66
00:03:58.560 --> 00:04:02.800
But in real, like in real images, we're
not dealing with these big chunky pixels.

67
00:04:02.800 --> 00:04:06.120
We're dealing with pixels that are so
small that we can hardly even see them.

68
00:04:06.120 --> 00:04:09.110
And so really in this kind of an image,
you might have a shader

69
00:04:09.110 --> 00:04:13.540
that's run a million times, because it's
being run for each individual pixel.

70
00:04:13.540 --> 00:04:16.500
And the shader is just
running on those pixels, and

71
00:04:16.500 --> 00:04:20.990
it doesn't know anything about the other
pixels this is something that's one

72
00:04:20.990 --> 00:04:23.420
of the core concepts of
working with shaders.

73
00:04:23.420 --> 00:04:28.930
And it really changes the way you have
to think about writing your code.

74
00:04:28.930 --> 00:04:32.640
You can no longer say that
I have a pixel that's

75
00:04:32.640 --> 00:04:35.150
blue because the pixel next to it is red.

76
00:04:35.150 --> 00:04:38.619
You have to only say that
this pixel is blue because.

77
00:04:39.760 --> 00:04:41.930
It doesn't know anything
about its neighbors.

78
00:04:41.930 --> 00:04:47.340
So a shader, it has to be the same
code that runs across all these

79
00:04:47.340 --> 00:04:51.500
different pixels, and it's just simply
there's too many pixels for it to have

80
00:04:51.500 --> 00:04:56.520
information about what's happening in
the pixel up here or the pixel down here.

81
00:04:56.520 --> 00:04:58.769
Just all it knows is, okay,
I'm gonna make something blue,

82
00:04:58.769 --> 00:05:01.080
I'm gonna make something red,
pink, yellow, that's all.

83
00:05:02.140 --> 00:05:07.900
And so this is kind of what we're gonna
try and pick apart and dissect today.

84
00:05:07.900 --> 00:05:10.630
And there's some helper functions
as well that we're gonna work with,

85
00:05:10.630 --> 00:05:12.330
just like we did with three.js.

86
00:05:12.330 --> 00:05:15.990
So it'll hopefully make it easier,
but yeah, we're gonna work on that.

87
00:05:17.240 --> 00:05:20.310
And so let's say we're, for example,
gonna try and reproduce this image,

88
00:05:20.310 --> 00:05:23.000
this exact image with a shader.

89
00:05:23.000 --> 00:05:25.060
This is a very simple image to start with.

90
00:05:25.060 --> 00:05:27.290
And it's just a grayed-in
from gray to white.

91
00:05:28.420 --> 00:05:33.810
And it might look like this if we were to
recreate this exact image with a shader.

92
00:05:33.810 --> 00:05:38.100
And the way it's going to work is that
we specify a precision at the top.

93
00:05:38.100 --> 00:05:41.210
This is kind of you copy paste it,
you always use the same one,

94
00:05:41.210 --> 00:05:43.330
precision hype float.

95
00:05:43.330 --> 00:05:46.520
And then we have some variables.

96
00:05:46.520 --> 00:05:52.120
So in JavaScript we just have our
x is equal to five or whatever.

97
00:05:52.120 --> 00:05:56.384
Whereas in shaders we have two different
types of variables that we can think of in

98
00:05:56.384 --> 00:05:57.458
a fragment shader.

99
00:05:57.458 --> 00:06:03.310
And sorry we're talking about specific
type of shader that renders pixels.

100
00:06:03.310 --> 00:06:05.730
That's just kind of something
that we're talking about today.

101
00:06:05.730 --> 00:06:09.720
There's other types of shaders in
more complex applications that render

102
00:06:09.720 --> 00:06:14.410
different types of functions, sometimes
you'll actually use shaders in like

103
00:06:14.410 --> 00:06:17.970
machine learning or competition that
doesn't actually render anything,

104
00:06:17.970 --> 00:06:22.400
it's used for really fast programming and
really fast competition.

105
00:06:22.400 --> 00:06:26.590
We're just talking about
creating color with shaders, and

106
00:06:26.590 --> 00:06:28.510
so back to this thing here.

107
00:06:28.510 --> 00:06:29.510
So there's two types.

108
00:06:29.510 --> 00:06:35.050
There's something called varying and
a varying is a,

109
00:06:35.050 --> 00:06:40.250
usually a coordinate or a number or
a value that's coming from WebGL,

110
00:06:40.250 --> 00:06:45.510
and the reason it's called varying is
because if you're to imagine the surface,

111
00:06:45.510 --> 00:06:49.170
the value changes,
it varies across the surface.

112
00:06:49.170 --> 00:06:52.730
As it moves across the surface
the value is not the same.

113
00:06:52.730 --> 00:06:56.410
So up here the value might be one or
two or three or

114
00:06:56.410 --> 00:06:59.170
whatever down here might be a different
value that's why it's called varying.

115
00:07:00.250 --> 00:07:02.880
This other type of data
we're working with.

116
00:07:02.880 --> 00:07:04.690
And shaders is called uniform.

117
00:07:04.690 --> 00:07:10.150
So those are the two types varyings and
uniforms and uniform, it's called uniform

118
00:07:10.150 --> 00:07:14.430
because the value is the same across all
of the different pixels in our surface.

119
00:07:14.430 --> 00:07:15.870
It's uniformly constant.

120
00:07:15.870 --> 00:07:17.190
It's uniform.

121
00:07:17.190 --> 00:07:20.893
So those are the two types of data that
we have to try and remember to try and

122
00:07:20.893 --> 00:07:22.123
wrap our heads around.

123
00:07:24.536 --> 00:07:28.985
&gt;&gt; Mathew DesLauriers: So back to this
image, we have a varying which is called

124
00:07:28.985 --> 00:07:33.920
vec2, VUV which is basically
a 2D coordinate called VUV,

125
00:07:33.920 --> 00:07:40.590
which is a UV coordinate and if you
remember back to earlier in the workshop.

126
00:07:40.590 --> 00:07:44.889
We we're dealing with the grid and we had
the top left to the grid was zero zero,

127
00:07:44.889 --> 00:07:47.297
and the bottom right of
the grid was one one,

128
00:07:47.297 --> 00:07:50.960
and I was referring to that as UNV,
this is very similar.

129
00:07:50.960 --> 00:07:54.720
This is using UNV
coordinate just to classify

130
00:07:54.720 --> 00:07:57.086
where in the surface of the image we are.

131
00:07:57.086 --> 00:08:01.970
And so in this image, the UNV coordinate
might be similar where you know,

132
00:08:01.970 --> 00:08:04.840
on one end is zero zero and
on the other end is one one.

133
00:08:04.840 --> 00:08:06.270
Something a bit like that.

134
00:08:06.270 --> 00:08:07.790
It's a very similar concept.

135
00:08:09.290 --> 00:08:12.440
And then, what we can do is
we can create a color and

136
00:08:12.440 --> 00:08:16.660
an opacity, using this varying value.

137
00:08:16.660 --> 00:08:21.830
We can create the color,
using the X property of the vector,

138
00:08:21.830 --> 00:08:26.820
and that's basically just saying I
want the U coordinate, and we can

139
00:08:26.820 --> 00:08:31.800
then wrap that with this structure
called a vec3, and then we can

140
00:08:31.800 --> 00:08:37.460
create an opacity which is just gonna be
one for now, which means 100% opacity.

141
00:08:37.460 --> 00:08:42.680
And when we wrap that structure, because
we have a three component structure here,

142
00:08:42.680 --> 00:08:47.030
and a one component here, that ends
up being four different components.

143
00:08:47.030 --> 00:08:48.690
That's why we call it vec4.

144
00:08:48.690 --> 00:08:52.590
So it's some new concepts, and we're
gonna try and work our way through it.

145
00:08:52.590 --> 00:08:57.800
But this goes back to this UV coordinate
grid that I was chatting about before.

146
00:08:57.800 --> 00:09:01.820
So let's say you were to
create this gradient ramp.

147
00:09:01.820 --> 00:09:07.030
You might end up with this thing, where
gl_FragColor is sort of the output color,

148
00:09:07.030 --> 00:09:09.560
that's what your pixel
is gonna end up being.

149
00:09:10.570 --> 00:09:15.110
And you would assign that to an RGB value.

150
00:09:16.380 --> 00:09:20.090
And in this case, if you just
specify a single value for vec3,

151
00:09:20.090 --> 00:09:23.370
you end up with the same red,
green, and blue.

152
00:09:23.370 --> 00:09:25.160
So you create a grayscale image.

153
00:09:25.160 --> 00:09:27.770
So this is using the U coordinate,
which goes from zero to one.

154
00:09:29.020 --> 00:09:31.430
We can also use the V coordinate, or

155
00:09:31.430 --> 00:09:37.570
if you do dot Y to access the second
coordinate of our UV coordinates.

156
00:09:37.570 --> 00:09:41.230
You can end up with a gradient
that goes from one to zero.

157
00:09:41.230 --> 00:09:44.710
One little gotcha is that in
the morning we were talking about

158
00:09:44.710 --> 00:09:47.570
top left being zero zero and
bottom right being one one.

159
00:09:47.570 --> 00:09:53.990
It's a, in WebGL quite often things
are flipped, inverted on the y axis.

160
00:09:53.990 --> 00:09:58.800
And so in this case, the top of

161
00:09:58.800 --> 00:10:03.160
the image is actually gonna be white or
one, and the bottom is gonna be black.

162
00:10:03.160 --> 00:10:05.750
Just something to note that if sometimes
you're creating something that looks

163
00:10:05.750 --> 00:10:08.940
upside down, it's because WebGL
just sometimes will use a different

164
00:10:08.940 --> 00:10:12.760
coordinate system, where the Y axis
is flipped sort of upside down.

