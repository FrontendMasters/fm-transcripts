WEBVTT

1
00:00:00.310 --> 00:00:01.990
&gt;&gt; Mathew DesLauriers: So
what we're gonna do, is first thing,

2
00:00:01.990 --> 00:00:05.790
you can just open
the Canvas API docs link here.

3
00:00:05.790 --> 00:00:10.210
And you can maybe just keep this open,
in case you're new to Canvas,

4
00:00:10.210 --> 00:00:13.640
there's lots of examples,
lots of references here.

5
00:00:13.640 --> 00:00:16.820
Especially, this link here,
Canvas rendering context 2D.

6
00:00:17.990 --> 00:00:22.330
And, so let's just break down
what's happening, and then,

7
00:00:22.330 --> 00:00:25.060
we're gonna get into things a bit more.

8
00:00:25.060 --> 00:00:28.340
And the way today's gonna go, is that it's
probably gonna start a bit easy maybe, and

9
00:00:28.340 --> 00:00:33.710
then, as the day goes, it's gonna be
a little bit more and more technical.

10
00:00:33.710 --> 00:00:38.080
But, just to start things off,
we're using this line here at the top,

11
00:00:38.080 --> 00:00:42.120
which requires the library, canvas-sketch,
is like I was saying earlier,

12
00:00:42.120 --> 00:00:44.950
it's both a command line interface,
but it's also a JavaScript library.

13
00:00:44.950 --> 00:00:49.820
And so we're requiring the JavaScript
library using Node.js required syntax.

14
00:00:50.870 --> 00:00:55.120
And then, we have a settings object, and
this is gonna define our parameters for

15
00:00:55.120 --> 00:01:00.140
our artwork, such as the size of artwork
or export settings, or animation settings.

16
00:01:00.140 --> 00:01:01.760
Then, we have a sketch function.

17
00:01:01.760 --> 00:01:06.817
And the idea of this whole project is
to encapsulate each of your artworks or

18
00:01:06.817 --> 00:01:11.570
each of your creative projects within
a single function, if you can.

19
00:01:11.570 --> 00:01:14.918
I find that it's a really nice way
to basically wrap a project and

20
00:01:14.918 --> 00:01:19.980
encapsulate it, and then, sometimes reuse
the same code from project to project.

21
00:01:19.980 --> 00:01:22.530
And so
the idea is that you have a function, and

22
00:01:22.530 --> 00:01:25.750
this function returns another function.

23
00:01:25.750 --> 00:01:30.540
The function that it's returning is
what I'm calling a render function.

24
00:01:30.540 --> 00:01:34.250
So if you guys ever use React or
View, or anything like that?

25
00:01:34.250 --> 00:01:38.760
So you know how in React, you have a
render function, where you have some props

26
00:01:38.760 --> 00:01:41.900
coming in, and then, you're supposed
to make it a pure function, so

27
00:01:41.900 --> 00:01:43.440
that every time you get the same props,

28
00:01:43.440 --> 00:01:48.510
you get the same output,
the same JSX tree, or something like that.

29
00:01:48.510 --> 00:01:50.300
So this is a similar concept.

30
00:01:50.300 --> 00:01:54.210
You have some props coming in, giving
you that current state, the application,

31
00:01:54.210 --> 00:01:56.280
such as width and height.

32
00:01:56.280 --> 00:01:59.569
RIght now, it's always gonna
be this same width and height.

33
00:01:59.569 --> 00:02:03.840
Which was 2048 wide by
2048 high in pixels.

34
00:02:03.840 --> 00:02:06.080
But sometimes, depending on settings,

35
00:02:06.080 --> 00:02:11.950
maybe you're doing it full screen instead
of thick size, these prompts might change.

36
00:02:11.950 --> 00:02:16.110
And the idea is that instead of returning
a JSX tree in react, or in View, or

37
00:02:16.110 --> 00:02:19.990
whatever, you're rendering
into your canvas.

38
00:02:19.990 --> 00:02:23.910
And so you still wanna try and
keep it to be a pure function,

39
00:02:23.910 --> 00:02:27.610
if you can, even though we're
setting state on this canvas.

40
00:02:27.610 --> 00:02:31.070
The idea is that every time we render
into it, we're clearing the canvas,

41
00:02:31.070 --> 00:02:33.480
and restarting again from a fresh canvas.

42
00:02:33.480 --> 00:02:38.430
So it is kind of still in a sense
a pure function, but not really.

43
00:02:38.430 --> 00:02:40.430
But that's kind of
the ethos of this project,

44
00:02:40.430 --> 00:02:45.850
is to be a bit more declarative and
a bit more,

45
00:02:46.910 --> 00:02:52.480
in a sense, react,
that kind of way of doing things.

46
00:02:52.480 --> 00:02:56.040
And then, you'll see here there's
this context variable, and

47
00:02:56.040 --> 00:02:58.920
that is the Canvas API context.

48
00:02:58.920 --> 00:03:03.040
So if you actually look at the docs,
you'll see this example here.

49
00:03:03.040 --> 00:03:09.200
This is basically the most primitive
example you can get with using canvas.

50
00:03:09.200 --> 00:03:13.340
You basically just have a canvas tag,
and then, with that canvas tag,

51
00:03:13.340 --> 00:03:18.260
there's a function called get context and
you say, I want a 2D context, and

52
00:03:18.260 --> 00:03:20.450
then, you can use the canvas API.

53
00:03:20.450 --> 00:03:24.860
And you can, all of a sudden,
fill things, fill shapes and rectangles,

54
00:03:24.860 --> 00:03:28.780
polygons, circles, text, etc., etc.

55
00:03:28.780 --> 00:03:33.350
And canvas-sketch does some of that
sort of initial setup for you.

56
00:03:33.350 --> 00:03:37.490
So that's what this last line is doing,
is it's saying using my sketch function,

57
00:03:37.490 --> 00:03:42.040
and using my settings,
let's create a Canvas 2D boilerplate.

58
00:03:43.210 --> 00:03:46.050
And so just a couple more basics for
the APIs.

59
00:03:46.050 --> 00:03:50.890
So you'll see here that I'm setting
a fill style, which is orange.

60
00:03:50.890 --> 00:03:54.150
And the Canvas API is kind of state based.

61
00:03:54.150 --> 00:03:58.760
So you set a color, or you set a certain
parameter, like a line width, and then,

62
00:03:58.760 --> 00:04:03.600
anytime you render after that,
it's gonna use that variable that you set.

63
00:04:03.600 --> 00:04:04.530
That's what we're doing here.

64
00:04:04.530 --> 00:04:06.761
We're setting the fill color.

65
00:04:06.761 --> 00:04:11.042
And then, here, we're filling a rectangle,
just a 2D square,

66
00:04:11.042 --> 00:04:12.960
with the x and y coordinates.

67
00:04:12.960 --> 00:04:16.175
You can try tweaking these and
saving your file.

68
00:04:16.175 --> 00:04:20.112
You'll start to see,
it'll start to push it along the x axis or

69
00:04:20.112 --> 00:04:24.791
along the y axis, and then, here is
the width and height of the rectangle,

70
00:04:24.791 --> 00:04:29.647
you can divide that by two and see it's
rendering half as much, etc., etc.

