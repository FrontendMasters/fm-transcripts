WEBVTT

1
00:00:00.380 --> 00:00:01.060
&gt;&gt; Mathew DesLauriers: So yeah, so

2
00:00:01.060 --> 00:00:05.484
I'm just gonna reset this to how it was
before I started tweaking this stuff.

3
00:00:07.041 --> 00:00:09.657
&gt;&gt; Mathew DesLauriers: So,
remember we had mesh basic material,

4
00:00:09.657 --> 00:00:14.500
which is just choosing a random color,
and it's an unlet material.

5
00:00:14.500 --> 00:00:19.340
So let's say we wanted to actually give
each of these cubes its own sort of

6
00:00:19.340 --> 00:00:22.720
shader surface,
rather than just doing a single color.

7
00:00:22.720 --> 00:00:28.019
So here's where we would replace mesh
basic material with shader material.

8
00:00:28.019 --> 00:00:31.951
And three.js has these two different
types of shader materials.

9
00:00:31.951 --> 00:00:36.660
It has one called ShaderMaterial, it has
another one called RawShaderMaterial.

10
00:00:37.820 --> 00:00:42.806
And RawShaderMaterial is for more
advanced uses like if you really wanna

11
00:00:42.806 --> 00:00:47.709
have full control over the shader,
and you don't want three.js doing

12
00:00:47.709 --> 00:00:52.304
anything helpful or fancy,
then you can use raw ShaderMaterial.

13
00:00:52.304 --> 00:00:55.705
But usually, I like to use ShaderMaterial,

14
00:00:55.705 --> 00:01:01.443
three.js just makes a few things a little
bit easier, and so we can do that.

15
00:01:01.443 --> 00:01:06.209
Another thing I'm gonna do is before
I get too far into this, I'm gonna

16
00:01:06.209 --> 00:01:11.214
rerun this command with hard loading,
just cuz I think it's really cool,

17
00:01:11.214 --> 00:01:15.526
and now when I say it's just gonna
be nicer and so, that's all.

18
00:01:15.526 --> 00:01:17.424
So, to get started with this,

19
00:01:17.424 --> 00:01:22.101
you have to first use ShaderMaterial and
then you specify fragmentShader.

20
00:01:23.171 --> 00:01:25.473
&gt;&gt; Mathew DesLauriers: And this is
a string that we have to pass, and so

21
00:01:25.473 --> 00:01:28.023
we're gonna create the string
up here somewhere.

22
00:01:29.701 --> 00:01:31.955
&gt;&gt; Mathew DesLauriers: And
it'll just be ESC templates string.

23
00:01:34.452 --> 00:01:38.450
&gt;&gt; Mathew DesLauriers: And it's gonna
look like this, so again it's our shader.

24
00:01:38.450 --> 00:01:40.430
You'll notice immediately
a couple of different things,

25
00:01:40.430 --> 00:01:42.170
one of the things that different.

26
00:01:42.170 --> 00:01:47.082
Is that we don't have to say precision
high P float at the very top of our file.

27
00:01:47.082 --> 00:01:52.630
We don't have to do this precision thing,
that's because three.js inserts it for us.

28
00:01:52.630 --> 00:01:56.020
And if we were using raw ShaderMaterial,

29
00:01:56.020 --> 00:01:59.050
then we would have to specify our
own precision and stuff like that.

30
00:01:59.050 --> 00:02:03.190
But if you just want the basic shader,
just use it like this, and

31
00:02:03.190 --> 00:02:06.910
so here we have our shader code.

32
00:02:06.910 --> 00:02:10.837
And let's just try making everything
red to start off, my like go to.

33
00:02:15.350 --> 00:02:20.035
&gt;&gt; Mathew DesLauriers: And if it all works
you should end up with this red mesh.

34
00:02:23.932 --> 00:02:28.449
&gt;&gt; Mathew DesLauriers: And now we can
actually do basically the same stuff we

35
00:02:28.449 --> 00:02:33.789
were doing before around things
like creating cool colors and

36
00:02:33.789 --> 00:02:38.731
creating different ramps of colors and
stuff like that.

37
00:02:38.731 --> 00:02:44.100
One thing is sometimes in three.js,
I don't know actually how this is gonna

38
00:02:44.100 --> 00:02:49.570
work, vUv might exist by default in
their shader or it might not, let's see.

39
00:02:50.800 --> 00:02:56.310
So if I just use vUV.x,
it's gonna give me an error, and

40
00:02:56.310 --> 00:02:59.840
this is where things get
a little bit more in depth.

41
00:02:59.840 --> 00:03:04.178
Let's see,
&gt;&gt; Mathew DesLauriers: Varying vec2.

42
00:03:04.178 --> 00:03:08.720
And it's most likely because
the default vertex shader of

43
00:03:08.720 --> 00:03:12.930
three.js doesn't include this information.

44
00:03:12.930 --> 00:03:16.992
And this is where we get into
a bit of a higher concept,

45
00:03:16.992 --> 00:03:21.434
we have to actually write our
own vertex shader, as well.

46
00:03:21.434 --> 00:03:26.509
And again, it's a string,
we just pass it into our shader material,

47
00:03:26.509 --> 00:03:29.910
and our string is gonna look like this.

48
00:03:29.910 --> 00:03:32.730
Void main, and in a vertex shader,

49
00:03:32.730 --> 00:03:37.350
we're not putting the frag color,
we're outputting the GL position.

50
00:03:37.350 --> 00:03:42.220
And just like frag colors in vec four,
it's talking about the xyz and

51
00:03:42.220 --> 00:03:47.920
w position and,
it's actually the screen position.

52
00:03:47.920 --> 00:03:50.380
Anyways, we just imagine
it as the position of

53
00:03:51.820 --> 00:03:54.720
each vertex in our cubes
in all of our scene.

54
00:03:56.090 --> 00:03:59.194
And the way it's gonna work is you
have to just kinda memorize this line.

55
00:04:04.673 --> 00:04:08.850
&gt;&gt; Mathew DesLauriers: So it's a long
line, and the reason we're memorizing it

56
00:04:08.850 --> 00:04:13.899
like this, is because three.js gives
us a couple built in utilities

57
00:04:13.899 --> 00:04:18.181
that don't exist if you're
using a raw ShaderMaterial.

58
00:04:18.181 --> 00:04:21.510
But they do exist when you're using
just a regular shader material.

59
00:04:21.510 --> 00:04:26.690
And what's happening is that we're
matrix math, whereas this is a matrix,

60
00:04:26.690 --> 00:04:29.060
and this is a matrix,
and this is a vector.

61
00:04:29.060 --> 00:04:33.780
And this is kinda why I didn't wanna
include this in today's lesson,

62
00:04:33.780 --> 00:04:36.102
but it's a little bit more scary.

63
00:04:36.102 --> 00:04:39.690
Because matrix math is something,
maybe, not everyone's familiar with.

64
00:04:39.690 --> 00:04:45.320
But, what's happening is we have a matrix
that defines the way that the camera looks

65
00:04:45.320 --> 00:04:50.460
so this projection matrix is gonna
either be perspective or orthographic.

66
00:04:50.460 --> 00:04:54.353
Just for
reference just remember the difference,

67
00:04:54.353 --> 00:04:57.974
this is perspective versus orthographic,
and

68
00:04:57.974 --> 00:05:03.692
you can sort of wrap up this information
of whether its this way or this way.

69
00:05:03.692 --> 00:05:08.152
You can wrap that up in a matrix,
in a set of numbers.

70
00:05:08.152 --> 00:05:12.697
And this set of numbers is
kinda contained in there and

71
00:05:12.697 --> 00:05:17.242
then model view matrix,
that's just saying that's

72
00:05:17.242 --> 00:05:22.193
basically gonna position each
cube in the correct place.

73
00:05:22.193 --> 00:05:26.997
And this last part is basically
just gonna position each vertex and

74
00:05:26.997 --> 00:05:31.885
each cube in the correct place, and
remember how with a pixel shader

75
00:05:31.885 --> 00:05:36.000
everything is running on
each pixel in the surface.

76
00:05:36.000 --> 00:05:39.322
We're talking about that grid of pixels,
and

77
00:05:39.322 --> 00:05:42.484
how each pixel shader
runs on its own pixel.

78
00:05:42.484 --> 00:05:49.459
Well in the vertex shader,
every vertex runs its own vertex shader.

79
00:05:49.459 --> 00:05:54.984
And so it's a similar concept
of running many, many times, and

80
00:05:54.984 --> 00:06:01.751
when we talk about a vertex, a triangle
is made up of three vertices is plural.

81
00:06:01.751 --> 00:06:06.312
And a cube would be made up of a lot of
vertices because it have one face which is

82
00:06:06.312 --> 00:06:11.330
two triangles, and then another face and
then another face and then another face.

83
00:06:11.330 --> 00:06:14.928
So there is a lot of vertices in a cube,
and this method,

84
00:06:14.928 --> 00:06:19.611
this main method, for the vertex
shader has been called on each vertex.

85
00:06:19.611 --> 00:06:22.660
So it's still, you're gonna get
an error if you look in the console.

86
00:06:22.660 --> 00:06:28.190
And that's because it's varying
UV doesn't exist anywhere yet.

87
00:06:28.190 --> 00:06:37.090
And we hae to pass it down from
the vertexShader to the fragmentShader.

88
00:06:37.090 --> 00:06:41.690
And this is a bit of a mind
bender is the way the opengl

89
00:06:41.690 --> 00:06:45.890
pipeline works is that
you specify vertices.

90
00:06:45.890 --> 00:06:50.170
So you create a triangle, or you create
a cube, or you create a sphere and

91
00:06:50.170 --> 00:06:54.110
that sphere is gonna be made
up of lots of these vertices.

92
00:06:54.110 --> 00:06:58.850
And then you have a shader that
describes each of those vertices.

93
00:06:58.850 --> 00:07:02.285
And then you'd pass down your
information from your vertexShader,

94
00:07:02.285 --> 00:07:04.957
down through the pipeline,
to the fragmentShader.

95
00:07:04.957 --> 00:07:08.992
And the fragmentShader will use
those things that you passed down,

96
00:07:08.992 --> 00:07:11.480
it'll use those varying things.

97
00:07:11.480 --> 00:07:16.223
So, uniform is something we
were setting from JavaScript

98
00:07:16.223 --> 00:07:20.981
varying is something that's
set from the vertexShader.

99
00:07:20.981 --> 00:07:26.631
And already we can see with this code
we have a custom shader on our mesh.

100
00:07:26.631 --> 00:07:31.140
We can see that it's a bit like a gradient
ramp, like we were doing earlier.

101
00:07:32.540 --> 00:07:34.840
The only difference is
that it's just red so

102
00:07:34.840 --> 00:07:37.648
I can I can just do the same
code we were doing earlier.

103
00:07:40.981 --> 00:07:44.731
&gt;&gt; Mathew DesLauriers: Just using
gradients, this is kinda cool actually

104
00:07:44.731 --> 00:07:51.983
interesting, if I set the clear color to,
&gt;&gt; Mathew DesLauriers: White.

105
00:07:51.983 --> 00:07:56.060
I mean, it's kind of a cool image
on itself, these gradient cues.

106
00:07:56.060 --> 00:07:59.740
And this is kind of a nice part of
creative coding in generative art, is when

107
00:07:59.740 --> 00:08:03.690
you just like tweaking things and you're
like, this is kinda cool, I like this.

108
00:08:03.690 --> 00:08:07.829
So that's kind of nice,
and then with this code,

109
00:08:07.829 --> 00:08:14.437
we already have everything we need to
manipulate either the pixels of the mesh,

110
00:08:14.437 --> 00:08:18.403
or manipulate the actual
vertices of the mesh.

111
00:08:18.403 --> 00:08:22.224
So let's say we wanted to manipulate
the vertices of the mesh,

112
00:08:22.224 --> 00:08:26.419
which is quite an advanced topic but
we're gonna just do it anyways.

113
00:08:28.510 --> 00:08:32.523
&gt;&gt; Mathew DesLauriers: So
the way it would look is a bit like this,

114
00:08:32.523 --> 00:08:36.892
we would first,
make sure we have position.

115
00:08:36.892 --> 00:08:43.860
We just pull it out as a vec3 variable
here, just reference it from here.

116
00:08:43.860 --> 00:08:49.238
And we're going to just
multiply it by some value

117
00:08:49.238 --> 00:08:53.920
sine of time, and
we're gonna get an error.

118
00:08:53.920 --> 00:08:56.780
And that's because time doesn't
exist in our shader anywhere.

119
00:08:58.150 --> 00:09:02.487
Just like with our 2D code,
we need to specify a uniform for time,

120
00:09:02.487 --> 00:09:05.282
because it's being set from JavaScript.

121
00:09:05.282 --> 00:09:09.553
And uniforms are set from JavaScript,
varyings are set from vertex\Shaders.

122
00:09:11.941 --> 00:09:13.441
&gt;&gt; Mathew DesLauriers: So here we go,

123
00:09:13.441 --> 00:09:18.451
first step is to define
it in the vertexShader.

124
00:09:18.451 --> 00:09:22.580
And then the next task is to pass it
down from JavaScript, and this three.js,

125
00:09:22.580 --> 00:09:26.588
the syntax is a little bit different,
you can tell it's vertexShader, and

126
00:09:26.588 --> 00:09:27.602
fragmentShader.

127
00:09:27.602 --> 00:09:32.066
Different syntax, same with the uniforms,
it's not passed down in the same

128
00:09:32.066 --> 00:09:35.852
way that we're passing down
the uniforms in our other sketches.

129
00:09:35.852 --> 00:09:41.033
But in this case,
you just have to say uniforms, time,

130
00:09:41.033 --> 00:09:46.340
it's kind of a tedious syntax,
but this is how it looks.

131
00:09:47.360 --> 00:09:49.846
You say uniforms, it's an object, and

132
00:09:49.846 --> 00:09:52.782
within that object you
have other properties.

133
00:09:52.782 --> 00:09:56.698
These properties have to be the same
name as the value you're putting into

134
00:09:56.698 --> 00:09:58.180
the shader.

135
00:09:58.180 --> 00:10:00.619
And then instead of just an actual number,

136
00:10:00.619 --> 00:10:03.813
you have to wrap that number
in an object that has value.

137
00:10:10.622 --> 00:10:13.060
&gt;&gt; Mathew DesLauriers: And
I might have broken something.

138
00:10:18.879 --> 00:10:20.952
&gt;&gt; Mathew DesLauriers: I did
break something, sort of,

139
00:10:20.952 --> 00:10:26.900
because right now we're setting the time
to zero and we're not changing the time.

140
00:10:26.900 --> 00:10:29.500
So this is where three.js

141
00:10:29.500 --> 00:10:32.810
is a little different than this
shader utility I was using.

142
00:10:32.810 --> 00:10:36.160
And the reason I had us all working with
the shader utility is just cuz the syntax

143
00:10:36.160 --> 00:10:38.140
is really tight and really simple.

144
00:10:38.140 --> 00:10:42.301
But when we actually go into three.js
you have to set the uniforms,

145
00:10:42.301 --> 00:10:44.493
you have to define it in the shader.

146
00:10:44.493 --> 00:10:47.360
And then you have to
update it on each frame,

147
00:10:47.360 --> 00:10:49.850
so here we are in the render function.

148
00:10:50.990 --> 00:10:56.115
Let's expose the time prop, and
let's go through all of our meshes.

149
00:10:56.115 --> 00:11:00.676
So we have to use a foreloop or
a foreeach function, and

150
00:11:00.676 --> 00:11:05.544
we have to actually get a value
that's our list of meshes.

151
00:11:05.544 --> 00:11:09.231
So I'm just gonna create this array,
it's an empty array,

152
00:11:09.231 --> 00:11:12.670
and I'm gonna push each
mesh into this array.

153
00:11:12.670 --> 00:11:17.210
So meshes.pushmesh,
cuz I just wanna store a reference to

154
00:11:17.210 --> 00:11:19.830
all of these mesh objects that I've
created, so that's all I'm doing.

155
00:11:20.930 --> 00:11:25.828
And then down here, when we're rendering,
before each time we render,

156
00:11:25.828 --> 00:11:31.214
we're gonna do meshes.forEach, and
we're gonna loop over all those meshes.

157
00:11:31.214 --> 00:11:35.835
And we're gonna update each of the meshes
uniform time values to be the same as

158
00:11:35.835 --> 00:11:38.410
the time it's coming from canvas sketch.

159
00:11:39.550 --> 00:11:48.242
So it has to look like this
mesh.material.uniforms.time.value = time.

160
00:11:48.242 --> 00:11:52.050
And make sure you have that value at
the end here, it's kind of important.

161
00:11:55.735 --> 00:12:00.781
&gt;&gt; Speaker 2: Are they not all
sharing the same like shader program?

162
00:12:00.781 --> 00:12:02.656
They all have their own-
&gt;&gt; Mathew DesLauriers: So

163
00:12:02.656 --> 00:12:06.200
they're all sharing the same
exact code from the shader.

164
00:12:06.200 --> 00:12:11.608
And the only way you're gonna produce
differences between different cubes

165
00:12:11.608 --> 00:12:16.942
is by setting different uniform
variables or different values like that.

166
00:12:16.942 --> 00:12:22.052
Yeah, so because each cube is it's
own mesh, we can give each cube

167
00:12:22.052 --> 00:12:27.371
a different uniform, right, but
the actual code isn't changing.

168
00:12:27.371 --> 00:12:31.925
The code itself is always this exact
string and it's just, if we introduce

169
00:12:31.925 --> 00:12:36.407
another uniform which actually we
should do, let's introduce a color,

170
00:12:36.407 --> 00:12:40.940
cuz in our original thing we had
each cube as a different color.

171
00:12:40.940 --> 00:12:45.824
So a color is gonna be vec3,
and color being RGB, so

172
00:12:45.824 --> 00:12:48.939
that's why we're using vec3.

173
00:12:48.939 --> 00:12:54.790
I'm sorry, I'm messing up, this color
stuff should go in our pixelShader.

174
00:12:54.790 --> 00:13:00.058
Not in our vertex here because pixel
shaders we to site things like color and

175
00:13:00.058 --> 00:13:01.656
those kind of things.

176
00:13:01.656 --> 00:13:07.775
And let's just remove this one here
cuz we all ready have it here,

177
00:13:07.775 --> 00:13:12.127
and for
now we'll just do color times vUv.x.

178
00:13:12.127 --> 00:13:14.270
You'll see everything is black and

179
00:13:14.270 --> 00:13:18.566
that's because we're not passing
any color down through three.js.

180
00:13:18.566 --> 00:13:25.824
So here inside of our uniforms,
we had a new uniform called color,

181
00:13:25.824 --> 00:13:31.150
and three.js has this
nice color constructor.

182
00:13:32.874 --> 00:13:37.452
&gt;&gt; Mathew DesLauriers: And so the color,
let's say we're gonna set it to be red,

183
00:13:37.452 --> 00:13:43.917
you'll see all of them are gonna be red or
orange, all of them are gonna be orange.

184
00:13:43.917 --> 00:13:47.612
And then this whole thing down here,
this color attribute,

185
00:13:47.612 --> 00:13:52.248
is not even being used and it's actually
giving us an error in the console and

186
00:13:52.248 --> 00:13:54.071
it's warning us about that.

187
00:13:54.071 --> 00:13:56.453
And it's because when
you use shader material,

188
00:13:56.453 --> 00:13:59.660
you don't just have a material
attribute called color anymore.

189
00:13:59.660 --> 00:14:03.233
You have to actually wire up all
of your individual attributes,

190
00:14:03.233 --> 00:14:05.691
whether it's color or anything like that.

191
00:14:05.691 --> 00:14:11.630
So, here we're just gonna replace
orange with random.pick pallette.

192
00:14:14.487 --> 00:14:19.147
&gt;&gt; Mathew DesLauriers: So now, we'll end
up With cubes with multiple colors and

193
00:14:19.147 --> 00:14:24.586
gradients, and all of these cubes
their vertexShader is actually

194
00:14:24.586 --> 00:14:30.042
changing the size by multiplying
something in the vertexShader.

195
00:14:30.042 --> 00:14:35.030
Which is still kind of boring, and this is
where you can like start to really like

196
00:14:35.030 --> 00:14:39.440
combine all the stuff we've talked about,
like let's say glslify.

197
00:14:41.050 --> 00:14:46.230
You can just import that and
use it, if you wanted to introduce

198
00:14:46.230 --> 00:14:51.790
noise into your shader, instead of just
using the functions that are built in.

199
00:14:51.790 --> 00:14:56.704
So we can actually do like pragma glslify,
and

200
00:14:56.704 --> 00:15:03.391
then noise =
require('glsl-noise/simplex/3d').

201
00:15:03.391 --> 00:15:06.961
We're actually going to use
four dimensional noise, so, so

202
00:15:06.961 --> 00:15:10.200
far we've used 2D and 3D and
we haven't used 4D yet.

203
00:15:10.200 --> 00:15:14.450
And that's because instead of
using a grid position of uv or

204
00:15:14.450 --> 00:15:18.192
grid position of 2D coordinates,
now we have xyz.

205
00:15:18.192 --> 00:15:23.819
So we just have to use four dimensional
noise if we wanna use the xyz and

206
00:15:23.819 --> 00:15:25.480
the time together.

207
00:15:27.100 --> 00:15:31.388
So I mean if I was just to
do something like this,

208
00:15:31.388 --> 00:15:36.447
noise that for
because it's a four dimensional noise.

209
00:15:36.447 --> 00:15:41.661
This a position.xyz and then time,
and all of a sudden we're

210
00:15:41.661 --> 00:15:46.686
gonna get some cool crazy stuff
going on in our screen here.

211
00:15:49.481 --> 00:15:53.655
&gt;&gt; Mathew DesLauriers: We can even do
something like this where instead of just

212
00:15:53.655 --> 00:15:58.919
adding the noise value the negative
one to one value we take normal and

213
00:15:58.919 --> 00:16:04.841
this is the surface normal vector of
the cube that's coming from three.js.

214
00:16:04.841 --> 00:16:10.108
And this is a bit more math stuff,
but it's not producing

215
00:16:10.108 --> 00:16:15.614
a very nice image yet so
we can tweak something we could say,

216
00:16:18.918 --> 00:16:21.681
&gt;&gt; Mathew DesLauriers: Fix this no.

217
00:16:23.497 --> 00:16:24.472
&gt;&gt; Mathew DesLauriers: Anyways.

218
00:16:26.811 --> 00:16:31.788
&gt;&gt; Mathew DesLauriers: This is getting
into like weird territory of weird images,

219
00:16:31.788 --> 00:16:34.381
it could be kinda cool though.

220
00:16:34.381 --> 00:16:40.637
You can start to like really play with
these values and create spiky monsters.

221
00:16:43.913 --> 00:16:47.501
&gt;&gt; Mathew DesLauriers: But that's as you
can see, it's running really efficiently,

222
00:16:47.501 --> 00:16:50.243
and it's because we're
using a vertexShader.

223
00:16:50.243 --> 00:16:55.069
And so all of the points inside of
these cubes is moving around with

224
00:16:55.069 --> 00:16:56.399
the shader here.

