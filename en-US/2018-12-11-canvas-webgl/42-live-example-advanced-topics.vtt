WEBVTT

1
00:00:01.340 --> 00:00:03.996
&gt;&gt; Speaker 1: What would
you do to this one,

2
00:00:03.996 --> 00:00:09.966
you have that rotation of the whole
scene set up to loop perfectly.

3
00:00:09.966 --> 00:00:13.070
What would you need to do to-
&gt;&gt; Mathew DesLauriers: It's really

4
00:00:13.070 --> 00:00:16.700
complicated, so
there's something that I've,

5
00:00:16.700 --> 00:00:19.290
that's an issue that I'm
struggling with sometimes.

6
00:00:19.290 --> 00:00:24.210
And if you have,
okay I think it's if you have 2D

7
00:00:24.210 --> 00:00:30.200
noise there's a way of using multiple
noise things so that it loops perfectly.

8
00:00:30.200 --> 00:00:37.050
But it's a big thing that I haven't yet
solved properly in all of my work.

9
00:00:39.260 --> 00:00:43.172
So let's say I was to try and
do something like that.

10
00:00:45.631 --> 00:00:49.089
&gt;&gt; Mathew DesLauriers: I mean maybe here
you could say, instead of using time,

11
00:00:49.089 --> 00:00:53.005
you could use the playhead
value times 3.14, which is pi.

12
00:00:54.532 --> 00:00:56.989
&gt;&gt; Mathew DesLauriers: But
you'll probably sometimes see a jump.

13
00:00:58.060 --> 00:01:01.980
And I think there's definitely
ways of doing it, but

14
00:01:01.980 --> 00:01:03.490
I think you'd have to look into it a bit.

15
00:01:06.260 --> 00:01:08.395
So I'm just gonna replace time
with the playhead everywhere.

16
00:01:11.380 --> 00:01:14.250
&gt;&gt; Speaker 1: Is the noise
that's the tricky part?

17
00:01:14.250 --> 00:01:19.000
&gt;&gt; Mathew DesLauriers: Yeah,
the main tricky part is if you need.

18
00:01:19.000 --> 00:01:23.390
The common way of doing it is let's say
you have 2D noise like the image that we

19
00:01:23.390 --> 00:01:27.450
had before,
this gradient-looking image, and

20
00:01:27.450 --> 00:01:30.250
you wanted it to be seamless,
so that it's a seamless image.

21
00:01:30.250 --> 00:01:35.030
So that when it gets to one end, it's
perfectly gonna loop and go to the next

22
00:01:35.030 --> 00:01:40.850
end, one approach to doing that is to
sample the noise from a higher dimension.

23
00:01:40.850 --> 00:01:45.846
So you use, instead of using 2D noise
here, which is what we're using here,

24
00:01:45.846 --> 00:01:47.360
you'd use 3D noise and

25
00:01:47.360 --> 00:01:51.841
that third coordinate would help
you create this seamlessness to it.

26
00:01:51.841 --> 00:01:55.450
And so that works if you're just using
image and you want seamless images.

27
00:01:55.450 --> 00:02:01.920
But when you get into positions that are
x, y, z, then you have to use 4D noise.

28
00:02:01.920 --> 00:02:05.669
And if you have a 4D noise function
already and you wanna make it seamless,

29
00:02:05.669 --> 00:02:08.241
then you might have to use
five dimensional noise.

30
00:02:08.241 --> 00:02:10.850
And I haven't used five
dimensional noise yet.

31
00:02:10.850 --> 00:02:12.920
That sounds a bit advanced.

32
00:02:12.920 --> 00:02:17.940
But, I mean people have done that, and
then there's other approaches as well.

33
00:02:17.940 --> 00:02:21.530
One approach is instead of always

34
00:02:24.090 --> 00:02:29.730
using a grid like u and v,
you can imagine a virtual

35
00:02:29.730 --> 00:02:35.210
circle that's going around the noise
map and it loops sometimes perfectly.

36
00:02:35.210 --> 00:02:38.490
And then if you wanted to extend that
into 3D, then you can imagine instead of

37
00:02:38.490 --> 00:02:42.060
a circle, it's actually
para-metrically mapped onto a taurus.

38
00:02:42.060 --> 00:02:45.000
It starts to get more complicated,
but yeah.

39
00:02:45.000 --> 00:02:47.086
Basically the answer is, it's complicated.

40
00:02:47.086 --> 00:02:49.153
What's up, Mark?

41
00:02:49.153 --> 00:02:55.093
&gt;&gt; Mark: How do you determine when
you need just 3GS plus pixel shaders,

42
00:02:55.093 --> 00:02:59.824
or when you need to go
further into vertex shaders.

43
00:02:59.824 --> 00:03:01.770
&gt;&gt; Mathew DesLauriers: Depends
on what you want to achieve.

44
00:03:01.770 --> 00:03:07.430
So if you wanted just to tweak
the surface textures and

45
00:03:07.430 --> 00:03:10.530
the surface colors of your mesh.

46
00:03:10.530 --> 00:03:15.380
So let's say you had a cube and you wanted
instead of it to be like a red color.

47
00:03:15.380 --> 00:03:19.480
You wanted it to have like
a funky gradient to it, or

48
00:03:19.480 --> 00:03:24.350
you want it to have a funky,
some sort of texture or pattern.

49
00:03:24.350 --> 00:03:27.900
Or even if you wanted it to make it
look a bit more like a certain metal, or

50
00:03:27.900 --> 00:03:29.630
a certain material in the real world?

51
00:03:29.630 --> 00:03:34.410
That's when you'd really be working with
pixel shaders, and fragment shaders.

52
00:03:34.410 --> 00:03:38.820
Whereas if you wanted to manipulate
the position of the cube, so

53
00:03:38.820 --> 00:03:42.570
if you wanted to make it so
that a cube morphs into a sphere.

54
00:03:42.570 --> 00:03:45.990
Or if you wanted to make it so that the
cube is exploding into many triangles like

55
00:03:45.990 --> 00:03:49.790
confetti, that's manipulating
the vertex information of the cube.

56
00:03:49.790 --> 00:03:53.820
So it's the difference between
the surface of the mesh,

57
00:03:53.820 --> 00:03:57.949
versus the actual topology or
the makeup or the construct of the mesh.

58
00:03:59.240 --> 00:04:02.970
So actually a really good thing to test,
if you're if you're getting to this point

59
00:04:02.970 --> 00:04:07.200
and you've got a vertex shader in
a fragment shader working together.

60
00:04:07.200 --> 00:04:10.620
The coolest and easiest thing you
can start to do with vertex shaders

61
00:04:10.620 --> 00:04:13.530
is to use a sphere
instead of using a cube.

62
00:04:13.530 --> 00:04:15.870
So I'm just gonna change this
geometry instead of box geometry.

63
00:04:15.870 --> 00:04:17.250
I'm gonna change it to sphere geometry.

64
00:04:18.660 --> 00:04:23.920
And sphere geometry takes in a coordinate
that is the radius of the sphere, and then

65
00:04:23.920 --> 00:04:30.120
it takes in how dense the sphere is in
terms of the sub division or the segments.

66
00:04:30.120 --> 00:04:35.978
And maybe what I'll do is I'll just
use one mesh just to visualize it.

67
00:04:38.034 --> 00:04:39.333
&gt;&gt; Mathew DesLauriers: And
we'll just put it in the center just so

68
00:04:39.333 --> 00:04:40.270
you can see what's going on.

69
00:04:42.120 --> 00:04:45.518
And so,
&gt;&gt; Mathew DesLauriers: Here we have our

70
00:04:45.518 --> 00:04:46.990
simple set of shaders.

71
00:04:46.990 --> 00:04:52.430
We have a simple vertex shader that passes
along the UV to the fragment shader,

72
00:04:52.430 --> 00:04:55.580
we have a position that's
not being affected.

73
00:04:55.580 --> 00:04:58.710
And then here, our fragment shooter's
doing some weird thing with color and

74
00:04:58.710 --> 00:05:00.010
the uv map.

75
00:05:00.010 --> 00:05:01.600
Can just set the color to just be normal.

76
00:05:02.750 --> 00:05:04.451
But then what we're going to do is,

77
00:05:04.451 --> 00:05:07.361
we're going to manipulate
the vertices of the sphere here.

78
00:05:07.361 --> 00:05:14.281
So we're gonna try and do pos,
which is the position,

79
00:05:14.281 --> 00:05:20.605
+=noise{vec4(pos.xyz, playhead)}.

80
00:05:20.605 --> 00:05:24.883
And you'll notice that everything is being
offset in one direction or the other,

81
00:05:24.883 --> 00:05:26.240
like diagonally.

82
00:05:26.240 --> 00:05:28.400
What we want to achieve is more
of this like, weird, bumpy,

83
00:05:28.400 --> 00:05:30.830
uniformly bumpy sphere.

84
00:05:30.830 --> 00:05:35.093
And the reason is because we're just
doing position += to some value

85
00:05:35.093 --> 00:05:36.401
between -1 and 1.

86
00:05:36.401 --> 00:05:39.900
So it's all being scaled along
the same sort of direction.

87
00:05:39.900 --> 00:05:43.356
So instead of doing that,
we're gonna do normal * noise,

88
00:05:43.356 --> 00:05:45.913
and now it's gonna use the surface normal,

89
00:05:45.913 --> 00:05:49.865
which is a vector pointing outwards
from the surface of the sphere.

90
00:05:52.013 --> 00:05:54.343
&gt;&gt; Mathew DesLauriers: And
one more thing I'm gonna do here,

91
00:05:57.402 --> 00:05:58.607
&gt;&gt; Mathew DesLauriers: Let's see.

92
00:06:03.921 --> 00:06:07.125
&gt;&gt; Mathew DesLauriers: There we go, so
when we change the pixel shader a bit,

93
00:06:07.125 --> 00:06:10.470
we can visualize our sphere a bit more.

94
00:06:10.470 --> 00:06:14.923
And now we have this kind of cool,
I don't know, flowery type shape.

95
00:06:14.923 --> 00:06:18.837
And we can play with the noise function,
we can give more frequency,

96
00:06:18.837 --> 00:06:20.760
make it really spiky.

97
00:06:20.760 --> 00:06:23.150
Or we can make it really less frequent and

98
00:06:23.150 --> 00:06:29.340
make it more like bulbousy and
more soft and rounded and stuff like that.

99
00:06:29.340 --> 00:06:34.136
Something else you can really think
about here is, using noise functions you

100
00:06:34.136 --> 00:06:38.527
can layer them up to create,
&gt;&gt; Mathew DesLauriers: Very,

101
00:06:38.527 --> 00:06:41.020
much more organic looking values.

102
00:06:41.020 --> 00:06:42.410
Cuz right now, so far with noise,

103
00:06:42.410 --> 00:06:45.600
we're always seeing it either being
really spiky or not very spiky.

104
00:06:45.600 --> 00:06:48.750
And so what you can do is,
you can do multiple layers of noise.

105
00:06:48.750 --> 00:06:52.608
You can take this layer of noise, and
make it really soft, and really subtle,

106
00:06:52.608 --> 00:06:59.700
by multiplying the whole thing by 0.1,
&gt;&gt; Mathew DesLauriers: And then there.

107
00:06:59.700 --> 00:07:03.240
Now, we'll see,
it's a bit more like a planet surface,

108
00:07:03.240 --> 00:07:07.880
and that's cuz we just scaled down
those noise values a little bit.

109
00:07:07.880 --> 00:07:11.466
And just by multiplying that by 0.1 or
0.05 and

110
00:07:11.466 --> 00:07:16.210
tweaking this frequency,
we can start to get a nice edge to it.

111
00:07:16.210 --> 00:07:20.800
And then we can layer things up by
copy-pasting, doing again the same thing,

112
00:07:20.800 --> 00:07:23.530
but changing these values
around a little bit.

113
00:07:23.530 --> 00:07:28.190
And so, making it so that we introduce
a bit more of these hills and valleys.

114
00:07:28.190 --> 00:07:34.030
So maybe using a low frequency like one or
two, and a higher value here.

115
00:07:34.030 --> 00:07:36.360
This value would be considered amplitude.

116
00:07:36.360 --> 00:07:42.260
So if you're talking about wave signals,
and sound waves, or electricity or

117
00:07:42.260 --> 00:07:45.980
something like that, this would be
amplitude, this would be frequency.

118
00:07:45.980 --> 00:07:51.880
And just by doing this and
by layering up multiple noise offsets,

119
00:07:51.880 --> 00:07:55.330
we can introduce these kinda
interesting planet like features.

120
00:07:56.680 --> 00:07:59.080
And maybe you don't always
wanna use the playhead.

121
00:07:59.080 --> 00:08:00.054
Leave that at zero.

122
00:08:08.573 --> 00:08:14.076
&gt;&gt; Mathew DesLauriers: And now all of
a sudden we're sort of creating this

123
00:08:14.076 --> 00:08:19.070
look and
feel of like a sort of planet almost.

124
00:08:19.070 --> 00:08:24.408
Let's just try one thing here, and
you can combine this with actually

125
00:08:24.408 --> 00:08:29.310
a different fragment shader and all of a
sudden your surface could also look noisy

126
00:08:29.310 --> 00:08:34.410
and bumpy in the same technique here,
just by copy pasting our noise stuff.

127
00:08:35.500 --> 00:08:39.900
Except instead of using 4D noise
in our fragment shader, which is

128
00:08:39.900 --> 00:08:45.460
just two dimensions of information, x and
y we can use three dimension noise.

129
00:08:45.460 --> 00:08:47.233
So that might look like
this where we have,

130
00:08:49.198 --> 00:08:49.866
&gt;&gt; Mathew DesLauriers: Let's say we

131
00:08:49.866 --> 00:08:50.599
have a color.

132
00:08:55.024 --> 00:08:57.020
&gt;&gt; Mathew DesLauriers: That
didn't work for some reason.

133
00:08:57.020 --> 00:09:01.360
It didn't work because I need
to wrap it with glsify, and

134
00:09:01.360 --> 00:09:03.030
that will allow us to import modules.

135
00:09:03.030 --> 00:09:06.658
If we don't wrap something with glsify,
then it's just a regular GLSL string.

136
00:09:08.861 --> 00:09:11.767
&gt;&gt; Mathew DesLauriers: And
here we can, let's say,

137
00:09:11.767 --> 00:09:15.850
increase the color offset by some value.

138
00:09:17.830 --> 00:09:20.128
And this value can be based
on the noise function.

139
00:09:24.966 --> 00:09:28.236
&gt;&gt; Mathew DesLauriers: And we'll just
do this and then that'll be that.

140
00:09:29.777 --> 00:09:33.687
&gt;&gt; Mathew DesLauriers: So
we do uniform float playhead; taking in

141
00:09:33.687 --> 00:09:36.843
the playhead value from the code.

142
00:09:36.843 --> 00:09:38.451
And we run into an error and

143
00:09:38.451 --> 00:09:42.196
that's probably gonna give us
a very specific line number.

144
00:09:42.196 --> 00:09:45.090
And I can already tell what it is,
but I'll just open this up.

145
00:09:46.190 --> 00:09:48.760
And you'll have to sort of,
as you're working with shaders,

146
00:09:48.760 --> 00:09:52.390
you'll have to get familiar with some
of this horrible debugging experience.

147
00:09:53.390 --> 00:09:55.200
Just like looking through
lots of console logs,

148
00:09:55.200 --> 00:09:57.810
but the problem here is
that noise returns a float.

149
00:09:57.810 --> 00:09:59.097
It doesn't return a vec3.

150
00:09:59.097 --> 00:10:00.999
And so your types have to match.

151
00:10:02.972 --> 00:10:07.165
&gt;&gt; Mathew DesLauriers: And
now we're starting to get something weird.

152
00:10:07.165 --> 00:10:09.780
I can tweak this.

153
00:10:09.780 --> 00:10:13.310
Just play with the numbers and
change them then all of a sudden

154
00:10:14.320 --> 00:10:19.100
we can start to get a bit more diversity
maybe in the surface of the mesh.

155
00:10:21.070 --> 00:10:23.456
Just using these different
various functions.

156
00:10:26.990 --> 00:10:28.102
&gt;&gt; Mathew DesLauriers: Yeah.

157
00:10:31.525 --> 00:10:36.019
&gt;&gt; Mark: Is it possible to write
your own vertex shader to go

158
00:10:36.019 --> 00:10:40.192
along with the shader
that the standard mesh,

159
00:10:40.192 --> 00:10:44.950
I can't remember what
the standard one was called.

160
00:10:44.950 --> 00:10:49.640
But can you write your own vertex shader,
but then get the lighting and

161
00:10:49.640 --> 00:10:51.070
everything back from your JS?

162
00:10:51.070 --> 00:10:53.090
It seems like we're sort
of coming up on all that.

163
00:10:53.090 --> 00:10:54.030
&gt;&gt; Mathew DesLauriers: Yeah, yeah, yeah,

164
00:10:54.030 --> 00:10:57.240
so that's a problem that
a lot of people run into.

165
00:10:57.240 --> 00:11:03.708
And there's not a super solid solution,
it starts to get a bit more complicated.

166
00:11:03.708 --> 00:11:08.645
Basically,
&gt;&gt; Mathew DesLauriers: I think there

167
00:11:08.645 --> 00:11:11.836
is a way to,
&gt;&gt; Mathew DesLauriers: You can do include

168
00:11:11.836 --> 00:11:16.324
or something like that, and
three.js has this special syntax that is

169
00:11:16.324 --> 00:11:20.980
a little bit like glsfi, but theirs
is more focused on their own engine.

170
00:11:24.140 --> 00:11:25.350
Yeah, it's complicated.

171
00:11:26.640 --> 00:11:31.890
There's a way of doing it, and
what I've done in the past, is

172
00:11:34.330 --> 00:11:37.720
just extending their mesh basic materials.

173
00:11:38.730 --> 00:11:44.580
So if you search custom mesh
standard material with glslify.

174
00:11:44.580 --> 00:11:48.650
This shows an example
of how you can do that.

175
00:11:48.650 --> 00:11:56.475
You have to extend their
mesh standard material.

176
00:11:56.475 --> 00:11:59.487
This is using old school ES5 syntax but

177
00:11:59.487 --> 00:12:03.420
you can use class extends
mesh standard material.

178
00:12:03.420 --> 00:12:05.640
But there's a bit of
like a setup required.

179
00:12:05.640 --> 00:12:09.560
Then the annoying thing is you
can't just write it from scratch.

180
00:12:09.560 --> 00:12:13.160
You actually have to copy and
paste all of their code and

181
00:12:13.160 --> 00:12:16.360
then just like insert your
own stuff in between.

182
00:12:16.360 --> 00:12:18.590
So that's definitely possible, and
a lot of people are doing that, and

183
00:12:18.590 --> 00:12:23.020
there's a lot of people that are trying to
find different ways of making it easier.

184
00:12:23.020 --> 00:12:25.970
And hopefully in the future
three.js will make it much easier

185
00:12:25.970 --> 00:12:27.590
to do that kind of stuff.

186
00:12:27.590 --> 00:12:30.310
But right now it's a bit messy and
it's not super easy.

187
00:12:31.470 --> 00:12:33.630
But it's definitely
possible if you're keen.

