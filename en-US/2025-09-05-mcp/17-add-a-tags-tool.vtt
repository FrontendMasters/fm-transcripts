WEBVTT

1
00:00:00.590 --> 00:00:01.840
&gt;&gt; Brian Holt: Let's add tags, right?

2
00:00:01.840 --> 00:00:05.734
Because right now if I say, hey, add a tag
of bug or feature or something like that,

3
00:00:05.734 --> 00:00:09.465
it can't do it because it actually doesn't
know the numbers of the tags because

4
00:00:09.465 --> 00:00:11.600
the tags are all stored
in a different table.

5
00:00:12.720 --> 00:00:16.626
So this time I'm not going to make you
write it, we're just gonna copy and

6
00:00:16.626 --> 00:00:17.200
paste it.

7
00:00:19.120 --> 00:00:23.040
Come back over here and
just copy this block right here.

8
00:00:25.690 --> 00:00:30.810
So tags list, okay?

9
00:00:30.810 --> 00:00:35.326
Then come back over to
your VS code somewhere

10
00:00:35.326 --> 00:00:39.610
underneath this, this one right there.

11
00:00:41.609 --> 00:00:45.890
So here we're just gonna create another
tool and we're gonna call it Tags List.

12
00:00:45.890 --> 00:00:49.170
It lists all the tags and
that's really all it does.

13
00:00:49.170 --> 00:00:53.241
It doesn't really do much
else besides goes and

14
00:00:53.241 --> 00:00:57.733
gets all the available tags
plus their IDs, right?

15
00:00:57.733 --> 00:01:00.656
Okay, and then now you can copy
this prompt as well if you want.

16
00:01:08.530 --> 00:01:10.438
&gt;&gt; Brian Holt: That's cool,
make sure you stop and

17
00:01:10.438 --> 00:01:13.526
restart it because it does have
to restart your MCP server.

18
00:01:18.370 --> 00:01:20.860
&gt;&gt; Brian Holt: I'm going to come
back into the same chat here.

19
00:01:20.860 --> 00:01:24.661
Reason being is that it already has
a valid API key and I don't wanna go and

20
00:01:24.661 --> 00:01:25.580
validate it.

21
00:01:25.580 --> 00:01:27.900
And it'll be smart enough to reuse it,
which is cool.

22
00:01:27.900 --> 00:01:29.340
I don't even care if it's formatted.

23
00:01:31.020 --> 00:01:34.180
Can I just paste without style?

24
00:01:34.180 --> 00:01:35.580
Nope, doesn't care, okay.

25
00:01:37.020 --> 00:01:39.424
But they create a new issue in
my issue tracker that says,

26
00:01:39.424 --> 00:01:41.820
Add Microsoft login to my app,
mark it as not started.

27
00:01:41.820 --> 00:01:45.496
Mark it as urgent priority and
add the tags front end and feature.

28
00:01:53.580 --> 00:01:57.340
&gt;&gt; Brian Holt: So notice it's
gonna do tags-list first, right?

29
00:01:57.340 --> 00:02:01.935
It goes and grabs all the tags,
then it's going to call issue create and

30
00:02:01.935 --> 00:02:04.780
it's gonna to get the proper tags 1 and 4.

31
00:02:07.580 --> 00:02:09.180
Obviously Claude did this just fine.

32
00:02:09.180 --> 00:02:13.980
I would bet you even Quinn 0.6
billion would probably get it right.

33
00:02:15.230 --> 00:02:17.988
But the smaller the things,
the more sequential things,

34
00:02:17.988 --> 00:02:22.670
the more the house of cards you build up,
the more likely it is to fail, right?

35
00:02:22.670 --> 00:02:26.990
Do you see why I'm wanting you to do not
API based things, but jobs based things?

36
00:02:29.070 --> 00:02:31.217
I promise you that you will
have a much better time and so

37
00:02:31.217 --> 00:02:32.670
will your users if you do it that way.

38
00:02:34.910 --> 00:02:39.716
But let's go see,
just to drive it home here,

39
00:02:39.716 --> 00:02:46.636
issue number 10 has feature and
front end there as well, right?

40
00:02:46.636 --> 00:02:49.400
Urgent not started.

41
00:02:49.400 --> 00:02:53.880
We could go in and do assigned user and
all that kind of stuff as well.

42
00:02:53.880 --> 00:02:56.932
I'm just going to have you
copy the entire API and

43
00:02:56.932 --> 00:02:59.320
you can start messing around with it.

44
00:03:00.440 --> 00:03:04.760
But let's pause here for a second,
what questions do you have about this?

45
00:03:04.760 --> 00:03:07.562
&gt;&gt; Speaker 2: How does
the testing workflow fit here for

46
00:03:07.562 --> 00:03:12.140
unit testing, do we just test
the underlying JavaScript as usual?

47
00:03:13.500 --> 00:03:19.763
&gt;&gt; Brian Holt: Yeah, that is what's
very nice about MCP servers.

48
00:03:19.763 --> 00:03:24.428
Just wildly easy to test, right, cuz it's
meant to be a very deterministic behavior.

49
00:03:24.428 --> 00:03:28.940
And the nice thing about it is AI
is really good at writing tests.

50
00:03:28.940 --> 00:03:31.420
I use it all the time because
I don't like writing tests.

51
00:03:31.420 --> 00:03:33.660
I'm supposed to write tests, [LAUGH].

52
00:03:33.660 --> 00:03:35.481
So I just say, here's a block of code,

53
00:03:35.481 --> 00:03:38.420
please write me a suite of tests
that test these kind of things.

54
00:03:38.420 --> 00:03:41.764
By all means, please go make sure that
the tests are actually testing what you

55
00:03:41.764 --> 00:03:43.100
desire them to test.

56
00:03:43.100 --> 00:03:46.832
Because AI is also very good at writing
tests that will make itself pass because

57
00:03:46.832 --> 00:03:49.340
it wants to make you happy, right?

58
00:03:49.340 --> 00:03:51.739
But it's very easy to test standard I/O.

59
00:03:51.739 --> 00:03:54.380
It's very easy to test HTTP.

60
00:03:54.380 --> 00:03:57.291
So I would just say, hey,
Claude, here's my MCP server,

61
00:03:57.291 --> 00:03:59.980
I'm going to go get a coffee,
you test all this stuff.

62
00:03:59.980 --> 00:04:00.540
You got it?

63
00:04:00.540 --> 00:04:01.420
Okay, good.

64
00:04:01.420 --> 00:04:04.139
Then I just go, forget about it,
and then run away.

