WEBVTT

1
00:00:00.400 --> 00:00:02.400
&gt;&gt; Brian Holt: So everything we've
been doing is through standard IO.

2
00:00:02.400 --> 00:00:04.324
Everything that we've done so

3
00:00:04.324 --> 00:00:08.320
far, more or less probably could
be done by a remote MCP server.

4
00:00:08.320 --> 00:00:09.600
Is that true?

5
00:00:09.600 --> 00:00:12.560
Yeah, it could be done
as a remote MCP server.

6
00:00:16.000 --> 00:00:18.400
It's good to just start with standard IO.

7
00:00:18.400 --> 00:00:23.440
I think cuz that's how most MCP
servers are being run at the moment.

8
00:00:23.440 --> 00:00:26.640
I view streamable HTTP in
the server side event.

9
00:00:26.640 --> 00:00:31.247
They do add some complexity to
them as being something that you

10
00:00:31.247 --> 00:00:34.370
would run as a company, right?

11
00:00:34.370 --> 00:00:37.899
So like as neon we run, we actually have
all three of the MCP servers available

12
00:00:37.899 --> 00:00:39.490
because it's really easy to add.

13
00:00:41.010 --> 00:00:43.449
But we run certainly a remote MCP server.

14
00:00:43.449 --> 00:00:46.960
So Cursor, for example,
can call our MCP server,

15
00:00:46.960 --> 00:00:50.890
which then we could manage
people's services for them.

16
00:00:50.890 --> 00:00:53.970
We're not gonna dwell too
much on server side events.

17
00:00:53.970 --> 00:00:57.330
SSE as it's frequently abbreviated.

18
00:00:59.810 --> 00:01:04.794
The problem with standard IO transport
is it runs locally, right, it's not able

19
00:01:04.794 --> 00:01:10.370
to run on the cloud, it's not able to
run for your business, for your clients.

20
00:01:10.370 --> 00:01:12.859
Wherever the standard
IO server is running,

21
00:01:12.859 --> 00:01:15.290
it is necessarily running on that machine.

22
00:01:15.290 --> 00:01:17.010
So it has to have some level of access.

23
00:01:18.050 --> 00:01:21.220
You can try and lock it down,
you can try and run it in container, but

24
00:01:21.220 --> 00:01:25.112
at the end of the day it's code that's
being executed somewhere that you control,

25
00:01:25.112 --> 00:01:27.180
which is always scary a little bit, right?

26
00:01:28.700 --> 00:01:31.852
So that's why server
side sses were invented.

27
00:01:31.852 --> 00:01:34.300
I would say invented, but
used for MCP servers.

28
00:01:36.380 --> 00:01:39.420
So this was the first attempt
of a remote MCP server.

29
00:01:41.660 --> 00:01:45.920
It's a bit simpler, but it works
relatively similar to how standard IO

30
00:01:45.920 --> 00:01:48.618
does, which is why I
think they went with it,

31
00:01:48.618 --> 00:01:54.110
is that the mental model of how SSE works,
works really similar to standard IO.

32
00:01:54.110 --> 00:01:58.299
And you can see here, this is just
directly from their docs here,

33
00:01:58.299 --> 00:02:02.881
that it has a sub process,
it exchanged message, it rans standard in.

34
00:02:02.881 --> 00:02:05.790
It's basically like bridging
standard IO to the Internet, right?

35
00:02:07.630 --> 00:02:08.670
This had some issues.

36
00:02:10.430 --> 00:02:15.510
The biggest issue is that if it's on
a stable network, everything works okay.

37
00:02:15.510 --> 00:02:18.865
But the moment that your server drops it,
you kinda lose state and

38
00:02:18.865 --> 00:02:20.890
then you have to re establish context.

39
00:02:20.890 --> 00:02:22.810
It's stateful,
as we were talking about earlier.

40
00:02:23.930 --> 00:02:26.750
And that just does not work very well for

41
00:02:26.750 --> 00:02:31.370
anything that's over a network [LAUGH] for
that matter, right?

42
00:02:33.450 --> 00:02:38.195
So they needed something that was
more resilient to dropped sessions,

43
00:02:38.195 --> 00:02:41.370
resumed sessions,
a bunch of stuff like that.

44
00:02:41.370 --> 00:02:43.370
And SSEs were just not a good fit for
that.

45
00:02:44.500 --> 00:02:48.020
If you wanna read more about it,
I'm not gonna talk any more about it here.

46
00:02:48.020 --> 00:02:49.420
This is all from the docs here.

47
00:02:49.420 --> 00:02:52.874
It's still supported,
we still support it for MCP,

48
00:02:52.874 --> 00:02:56.580
but streamable HTTP is much
more of the way forward here.

49
00:02:57.940 --> 00:03:01.247
In other words, I want you to be
aware of it, so if you encounter it,

50
00:03:01.247 --> 00:03:03.580
you're not afraid of it or
anything like that.

51
00:03:03.580 --> 00:03:04.980
But I don't think you
should be writing these.

52
00:03:04.980 --> 00:03:06.980
So I'm not gonna show
you how to write these.

53
00:03:06.980 --> 00:03:08.810
Not that it's very different
from what we've been writing.

