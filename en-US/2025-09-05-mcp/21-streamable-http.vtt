WEBVTT

1
00:00:00.400 --> 00:00:02.960
&gt;&gt; Brian Holt: So, as you can see here,
this get a little bit more complicated.

2
00:00:02.960 --> 00:00:06.240
You start exchanging session IDs and
all that kind of stuff.

3
00:00:06.240 --> 00:00:10.800
The nice thing here is the SDK kind of
handles all this for you, which is great.

4
00:00:12.800 --> 00:00:16.760
Another problem with SSEs is that it was
really hard to horizontally scale them.

5
00:00:16.760 --> 00:00:19.478
If you have lots of users using your MCP,
like spin

6
00:00:19.478 --> 00:00:23.960
up multiple servers running the same MCP
server, this handles this a bit better.

7
00:00:23.960 --> 00:00:28.790
Where you have sessions that work in
a very normal web server kind of way.

8
00:00:30.630 --> 00:00:34.950
And if you drop a connection, it's
very easy to go back and resume later.

9
00:00:36.550 --> 00:00:39.830
So yeah, the topography of the handshake
is a bit more complicated.

10
00:00:39.830 --> 00:00:42.021
But again,
usually you're not writing this,

11
00:00:42.021 --> 00:00:44.390
normally your framework
is handling this for you.

12
00:00:47.590 --> 00:00:51.690
Key here is you have a UUID as a session,
like some unique identifier,

13
00:00:51.690 --> 00:00:55.540
and the client refers to
that in the HTTP header.

14
00:00:55.540 --> 00:00:56.980
That's basically it.

15
00:00:59.700 --> 00:01:02.191
So, you can see here the code
ends up being really similar.

16
00:01:08.180 --> 00:01:09.860
&gt;&gt; Brian Holt: We're
gonna talk about this.

17
00:01:09.860 --> 00:01:12.710
I don't think I'm gonna have you
necessarily rewrite this because again,

18
00:01:12.710 --> 00:01:14.340
it's not really that interesting.

19
00:01:14.340 --> 00:01:16.340
We're just gonna be exposing
this all over Express.

20
00:01:19.300 --> 00:01:23.318
In fact, we'll copy this and

21
00:01:23.318 --> 00:01:28.630
we'll put it into the NCP server here.

22
00:01:28.630 --> 00:01:30.924
We're gonna just use all the same
job tools, which is nice.

23
00:01:43.590 --> 00:01:46.347
&gt;&gt; Brian Holt: Call this streamable.js or
something like that.

24
00:01:53.680 --> 00:01:57.040
&gt;&gt; Brian Holt: So again, we could have
written this, but it's an Express server.

25
00:01:57.040 --> 00:02:00.128
We could use Fast5,
you could use anything you want.

26
00:02:00.128 --> 00:02:01.840
We're gonna use random UUID.

27
00:02:01.840 --> 00:02:03.928
Like as long as it's a unique identifier,

28
00:02:03.928 --> 00:02:07.120
which node crypto is more
than apt to provide for us.

29
00:02:07.120 --> 00:02:09.610
MCP server, this is exactly the same.

30
00:02:09.610 --> 00:02:14.480
Streamable HTTP transport, this works
in kind of a transparent way for us.

31
00:02:18.660 --> 00:02:23.235
Initialized request, you have to
kind of handle that explicitly.

32
00:02:23.235 --> 00:02:24.757
Create your MCP server,

33
00:02:24.757 --> 00:02:28.900
we're gonna use their same job space
tools that we were just using.

34
00:02:31.140 --> 00:02:32.820
And then, again,
we could have written all this.

35
00:02:32.820 --> 00:02:38.138
This just wasn't terribly interesting for
me to have you write all of this.

36
00:02:38.138 --> 00:02:43.540
But you're gonna grab the session ID
from the headers, MCP session ID.

37
00:02:46.040 --> 00:02:47.800
I'm just doing this in a local object.

38
00:02:47.800 --> 00:02:50.557
I'm storing all the sessions locally
because I'm not going to scale this up to

39
00:02:50.557 --> 00:02:51.280
multiple servers.

40
00:02:51.280 --> 00:02:54.453
But if you were gonna scale it to multiple
servers, you just toss it at Redis and

41
00:02:54.453 --> 00:02:56.840
pull it back out of Redis, right?.

42
00:02:56.840 --> 00:03:00.440
Here we're just throwing it in
an object and pulling that back out.

43
00:03:03.400 --> 00:03:05.400
And just initializing a session.

44
00:03:05.400 --> 00:03:08.745
If you've ever written auth code,
this should look really similar,

45
00:03:08.745 --> 00:03:11.020
that's because it's essentially just that.

46
00:03:12.620 --> 00:03:15.386
And a big thing that I have disabled here,

47
00:03:15.386 --> 00:03:21.260
which you should not disable in
production, is DNS rebinding protection.

48
00:03:21.260 --> 00:03:26.576
This is like a big attack vector of like,
okay, I have this client over here and

49
00:03:26.576 --> 00:03:30.380
it has a bunch of sensitive
information in its context.

50
00:03:31.660 --> 00:03:34.918
And then I'm gonna have this other client,
like sniff a packet or

51
00:03:34.918 --> 00:03:39.020
something like that, catch that session
ID and just resend that same session ID.

52
00:03:40.180 --> 00:03:44.984
If you don't have this, it's going to
let them essentially hijack the session,

53
00:03:44.984 --> 00:03:47.712
which could be bad or
it could matter, right?

54
00:03:47.712 --> 00:03:50.260
But that's what this protects against.

55
00:03:50.260 --> 00:03:51.860
Why am I turning it off?

56
00:03:51.860 --> 00:03:52.460
For fun.

57
00:03:52.460 --> 00:03:53.140
No, I'm just kidding.

58
00:03:53.140 --> 00:03:56.420
It's because the DNS inspector, right?

59
00:03:56.420 --> 00:03:58.820
You have to turn this off for
the DNS inspector to work.

60
00:03:58.820 --> 00:04:01.458
We're gonna use the NCP inspector
here in just a second, and

61
00:04:01.458 --> 00:04:03.955
this won't work unless you
turn off that MCP inspector.

62
00:04:03.955 --> 00:04:06.622
On close, once you're done
with everything, you just say,

63
00:04:06.622 --> 00:04:08.740
delete this out of here,
you close the session.

64
00:04:12.630 --> 00:04:17.910
Otherwise, this is a session handler for.

65
00:04:19.030 --> 00:04:21.990
So they're gonna call basically,
what is this?

66
00:04:21.990 --> 00:04:26.550
MCP, yeah, right here.

67
00:04:26.550 --> 00:04:30.105
So, if it calls a get on MCP,
it's basically creating a new session,

68
00:04:30.105 --> 00:04:31.866
which is what you're doing here.

69
00:04:37.600 --> 00:04:38.507
&gt;&gt; Brian Holt: Yeah, basically that's it.

70
00:04:43.040 --> 00:04:44.800
&gt;&gt; Brian Holt: Does that make sense?

71
00:04:44.800 --> 00:04:47.985
It's all just session management, and
then on top of that it's just MCP.

72
00:04:53.120 --> 00:04:54.800
&gt;&gt; Brian Holt: So
I didn't really mess too much with it.

73
00:04:56.320 --> 00:05:01.960
I'm sure Claude can handle remote MCP, but
I didn't mess around too much with it.

74
00:05:01.960 --> 00:05:04.116
We're just going to do with the MCP
inspector because I wanted to show

75
00:05:04.116 --> 00:05:04.721
you how to do that.

76
00:05:08.970 --> 00:05:15.298
&gt;&gt; Brian Holt: So now that we've done
that, let's go to our server here.

77
00:05:15.298 --> 00:05:21.210
So I'm in my MCP and I'm gonna say node.

78
00:05:22.730 --> 00:05:29.477
Actually what I'm going to do is I'm
going to copy the command up here.

79
00:05:29.477 --> 00:05:35.464
Is this one,
&gt;&gt; Brian Holt: Yep.

80
00:05:41.637 --> 00:05:48.198
&gt;&gt; Brian Holt: So I’m gonna say,
npx @modelcontextprotocol/inspector.

81
00:05:48.198 --> 00:05:53.456
Really cool tool for making MCP servers..

82
00:05:53.456 --> 00:05:55.050
So it's going to ask if
you want to do that.

83
00:05:55.050 --> 00:05:55.751
You're going to say yes.

84
00:06:02.940 --> 00:06:05.766
&gt;&gt; Brian Holt: So I'm showing this for
streamable HTTP, but

85
00:06:05.766 --> 00:06:07.220
it does work with SSCs.

86
00:06:07.220 --> 00:06:09.260
It works with standard IO.

87
00:06:09.260 --> 00:06:14.220
It's this cool webpage that
allows you to mess around with.

88
00:06:14.220 --> 00:06:16.620
This was already installed for me.

89
00:06:16.620 --> 00:06:21.020
But you're probably going to have to
put in local host MCP here as well.

90
00:06:24.150 --> 00:06:25.750
And then we have to get
that running as well.

91
00:06:26.950 --> 00:06:32.010
So I’m gonna create here as well,
node streamable as well, streamable.

92
00:06:38.390 --> 00:06:39.350
&gt;&gt; Brian Holt: So,
you should see something like this.

93
00:06:47.350 --> 00:06:48.078
&gt;&gt; Brian Holt: Okay?
And

94
00:06:48.078 --> 00:06:52.650
then now you should be
able to click Connect.

95
00:06:52.650 --> 00:06:54.506
If it says connected here,
then it's working,

96
00:06:54.506 --> 00:06:56.330
otherwise it might give
you some sort of error.

97
00:06:59.130 --> 00:07:00.810
You can choose what kind of transport.

98
00:07:00.810 --> 00:07:02.490
We're doing this over streamable HTTP.

99
00:07:02.490 --> 00:07:03.170
That's why we have it there.

100
00:07:03.170 --> 00:07:05.833
But if you're doing standard IO,
you would tell it there and

101
00:07:05.833 --> 00:07:08.250
then you would tell how to
run your MCP server locally.

102
00:07:10.170 --> 00:07:13.042
It does have this big ugly auth token,
that's so

103
00:07:13.042 --> 00:07:16.840
that no one on your local network
hijacks your session, right?

104
00:07:18.200 --> 00:07:21.775
Because again, it's running arbitrary
code on your computer that could be very

105
00:07:21.775 --> 00:07:23.560
damaging, right?

106
00:07:23.560 --> 00:07:26.360
So there is some extra
layers of security here.

107
00:07:27.560 --> 00:07:32.920
So you can see the history here of this is
what it called, this is what it got back.

108
00:07:32.920 --> 00:07:34.592
You can see the tools that are available.

109
00:07:34.592 --> 00:07:35.800
So list tools.

110
00:07:37.720 --> 00:07:39.520
This will tell you that it creates bugs.

111
00:07:39.520 --> 00:07:42.356
Create feature requests.

112
00:07:42.356 --> 00:07:45.495
We have, this doesn't have it.

113
00:07:45.495 --> 00:07:48.645
Yeah, because we didn't put in
the resources of the prompts here, but

114
00:07:48.645 --> 00:07:50.230
you would be able to see those here.

115
00:07:50.230 --> 00:07:52.470
They're just blacked out
because there's nothing there.

116
00:07:52.470 --> 00:07:57.350
You can ping says method ping.

117
00:07:57.350 --> 00:08:02.310
I think technically, according to spect,
you should respond pong.

118
00:08:02.310 --> 00:08:04.950
But we didn't, so who cares?

119
00:08:04.950 --> 00:08:07.369
But samplings here,
elicitation roots, auth,

120
00:08:07.369 --> 00:08:09.510
all that kind of stuff
here all exists here.

121
00:08:12.090 --> 00:08:16.010
Tools, let's click on Create Bug.

122
00:08:16.010 --> 00:08:23.092
You're gonna say, this program is stupid.

123
00:08:23.092 --> 00:08:27.711
And description,
we should make it less stupid.

124
00:08:28.989 --> 00:08:34.860
&gt;&gt; Brian Holt: API key, let's go grab one,
&gt;&gt; Brian Holt: Run tool and

125
00:08:34.860 --> 00:08:40.260
then you'll see this tool call right here.

126
00:08:40.260 --> 00:08:46.100
It'll tell you what it did, it'll tell you
what the response is, so we got a 201.

127
00:08:46.100 --> 00:08:51.780
If we go look at our issue
tracker here issues.

128
00:08:51.780 --> 00:08:54.660
You can see this program is stupid and
we should make it less stupid.

129
00:08:54.660 --> 00:08:56.980
It's official now, so
we should make it less stupid.

130
00:09:00.660 --> 00:09:01.258
Pretty cool, right?

131
00:09:01.258 --> 00:09:05.018
The MCP inspector, I'm sure you can see
that if you're developing an MCP server,

132
00:09:05.018 --> 00:09:08.188
this can be highly useful in trying
to figure out why stuff is working,

133
00:09:08.188 --> 00:09:09.280
why it's not working.

134
00:09:10.320 --> 00:09:14.085
What's nice about this is we have this
running locally so we can actually see all

135
00:09:14.085 --> 00:09:18.000
of the output from it as opposed to
trying to go dig them out of Claude.

136
00:09:18.000 --> 00:09:21.181
This is a nice client for
getting MCP development going.

