WEBVTT

1
00:00:00.160 --> 00:00:02.120
&gt;&gt; Brian Holt: Okay,
we are almost done with our MCP server.

2
00:00:02.120 --> 00:00:04.160
Let's just add our last couple lines here.

3
00:00:05.520 --> 00:00:14.000
Const Transport equals new
standard IO server transport.

4
00:00:15.520 --> 00:00:17.960
Transport is just basically
like how am I getting this?

5
00:00:17.960 --> 00:00:19.960
Like, how am I managing all
the messaging out of this?

6
00:00:19.960 --> 00:00:24.400
We talked about there was sses,
streaming HTTP and then standard IO.

7
00:00:24.400 --> 00:00:25.520
We're using that.

8
00:00:25.520 --> 00:00:27.240
Those are all called transports.

9
00:00:27.240 --> 00:00:30.430
That's what that term is in
that particular case means.

10
00:00:30.430 --> 00:00:36.350
And we're just going to say await server,
connect transport.

11
00:00:37.550 --> 00:00:41.065
So this is just a process
that you leave running or

12
00:00:41.065 --> 00:00:46.293
in the case of like Claude desktop,
you give it the files like to go run and

13
00:00:46.293 --> 00:00:51.550
then it'll go run that server for
you inside of its shared processes.

14
00:00:51.550 --> 00:00:57.406
In our case here, we should just
be able to say nodemcp JS yeah,

15
00:00:57.406 --> 00:01:03.270
you probably need to tell this as
a type module right here as well.

16
00:01:04.550 --> 00:01:08.567
So in your package JSON,
if you see something like this,

17
00:01:08.567 --> 00:01:11.590
it's because I'm using import, right?

18
00:01:11.590 --> 00:01:16.192
So you have to say type module and

19
00:01:16.192 --> 00:01:22.000
it's running and I needed to save.

20
00:01:25.910 --> 00:01:27.390
Cancel, save.

21
00:01:27.390 --> 00:01:28.070
There we go.

22
00:01:29.510 --> 00:01:33.168
Okay, so you should see something
like this where it's just like,

23
00:01:33.168 --> 00:01:35.230
it seems like it's hanging, right?

24
00:01:35.230 --> 00:01:39.299
That's because the server is running and
it's waiting for

25
00:01:39.299 --> 00:01:41.990
something to be input into it, right?

26
00:01:43.990 --> 00:01:48.880
So let's go give it something now.

27
00:01:48.880 --> 00:01:49.960
Well, you know, let's do it.

28
00:01:49.960 --> 00:01:53.560
Let's make you type painful
JSON by hand because it's fun.

29
00:01:53.560 --> 00:01:54.760
We're gonna do this once.

30
00:01:54.760 --> 00:01:57.400
After that I'm going to let you copy and
paste.

31
00:01:57.400 --> 00:02:01.800
So we're gonna echo something into
the standard IO into the input, right?

32
00:02:01.800 --> 00:02:04.042
We're going to pipe that
into our node server and

33
00:02:04.042 --> 00:02:05.800
then we're going to see what it says.

34
00:02:08.280 --> 00:02:09.400
Echo.

35
00:02:09.400 --> 00:02:12.106
So if you're not familiar with echo,
it just outputs something and

36
00:02:12.106 --> 00:02:13.680
then we're going to pipe that into it.

37
00:02:13.680 --> 00:02:19.840
So if I say echo hi, it's just
going to say hi echo, single quote.

38
00:02:19.840 --> 00:02:25.762
Make sure adamant here
that we're single quote,

39
00:02:25.762 --> 00:02:30.000
open and curly brace, jsonrpc:.

40
00:02:32.399 --> 00:02:34.960
We'll say what kind of
JSON RPC we're doing.

41
00:02:34.960 --> 00:02:37.560
MCP is all based on JSON RPC 2.0.

42
00:02:37.560 --> 00:02:40.160
We will talk in just
a second about what that is.

43
00:02:42.010 --> 00:02:47.139
Okay.
And we're going to say ID one because

44
00:02:47.139 --> 00:02:52.569
you have to identify
what client you are or

45
00:02:52.569 --> 00:02:55.530
what command you are.

46
00:02:55.530 --> 00:02:57.790
In any case, McP requires this ID here,

47
00:02:57.790 --> 00:03:00.523
something that you'll
never manage yourself.

48
00:03:00.523 --> 00:03:03.290
All your client and your server will
kinda handshake those things together.

49
00:03:06.730 --> 00:03:07.290
Method.

50
00:03:09.070 --> 00:03:15.470
If you're not Familiar with the RPC,
all RPCs look like this Tools list.

51
00:03:17.870 --> 00:03:20.270
Okay, we'll say params.

52
00:03:22.990 --> 00:03:30.141
Another opening curly brace here,

53
00:03:30.141 --> 00:03:36.338
name add and then arguments and

54
00:03:36.338 --> 00:03:42.630
then opening curly brace.

55
00:03:42.630 --> 00:03:44.470
Closing, closing.

56
00:03:44.470 --> 00:03:45.350
Single quote.

57
00:03:48.470 --> 00:03:49.430
Hopefully you got it.

58
00:03:51.590 --> 00:03:53.510
Let's just make sure that I got it there.

59
00:03:53.510 --> 00:03:54.030
I did.

60
00:03:54.030 --> 00:03:57.581
Okay, if you're not familiar with JQ or
if you don't have it installed,

61
00:03:57.581 --> 00:04:00.350
does it come installed on Mac or
do you have to install it?

62
00:04:00.350 --> 00:04:00.950
I don't remember.

63
00:04:00.950 --> 00:04:04.220
If you have Brew,
you can just say brew, install jq.

64
00:04:04.220 --> 00:04:04.940
It'll work.

65
00:04:07.260 --> 00:04:09.820
It's like a JSON query language.

66
00:04:09.820 --> 00:04:13.900
It's a really handy binary for
working with JSON in the command line.

67
00:04:13.900 --> 00:04:14.660
As you can see here.

68
00:04:14.660 --> 00:04:15.980
It just pretty prints it for me.

69
00:04:17.500 --> 00:04:19.020
Okay, so that's correct.

70
00:04:20.860 --> 00:04:26.429
So I'm gonna take that
same command here and

71
00:04:26.429 --> 00:04:33.600
then I'm gonna say node mcp.js,
this is just a pipe.

72
00:04:33.600 --> 00:04:39.440
This is saying take this and then insert
that as the input into this process.

73
00:04:41.440 --> 00:04:44.294
You'll get some amount of results there.

74
00:04:44.294 --> 00:04:49.223
If you want it to as well,
you can just pipe that into JQ as well,

75
00:04:49.223 --> 00:04:53.120
and you can get this nice
pretty printed thing.

76
00:04:53.120 --> 00:04:58.736
Essentially I called the Tools list,
which is basically saying like,

77
00:04:58.736 --> 00:05:04.072
tell me everything that you know
about this particular function and

78
00:05:04.072 --> 00:05:08.810
it'll tell you this is the name,
this is the addition.

79
00:05:08.810 --> 00:05:12.330
It adds two numbers together,
all these things.

80
00:05:12.330 --> 00:05:13.450
Here's the required.

81
00:05:13.450 --> 00:05:17.220
This is all the information that your MCP
server would pass back to a client and

82
00:05:17.220 --> 00:05:19.134
basically how they handshake it like,

83
00:05:19.134 --> 00:05:21.460
here's the tools that are available,
right?

84
00:05:22.500 --> 00:05:25.060
Cuz imagine Claude Desktop is starting up.

85
00:05:25.060 --> 00:05:28.336
It's going to call this MCP Server,
and the MCP server is going to say,

86
00:05:28.336 --> 00:05:30.820
here's everything that I can do for you.

87
00:05:30.820 --> 00:05:34.033
Here's all the text that you need
to ingest to know that I have

88
00:05:34.033 --> 00:05:36.500
an addition tool,
I have a subtraction tool.

89
00:05:38.020 --> 00:05:39.860
This is what it responds with here.

90
00:05:43.860 --> 00:05:45.220
Pretty cool.

91
00:05:45.220 --> 00:05:48.859
Most of this wiring up is all done
by this model Context Protocol SDK,

92
00:05:48.859 --> 00:05:51.950
which is to say that we could
have written all of this.

93
00:05:51.950 --> 00:05:55.550
It just wouldn't have been very fun nor
useful to anybody here, right?

94
00:05:58.190 --> 00:06:02.111
But this results call all that kind of
stuff, like keeping track of all your

95
00:06:02.111 --> 00:06:05.550
tools and all that kind of stuff
is what this package does for you.

96
00:06:08.590 --> 00:06:10.270
Okay, so it's listing stuff now.

97
00:06:10.270 --> 00:06:13.390
Let's actually make it add, right?

98
00:06:13.390 --> 00:06:15.150
We've come so far.

99
00:06:15.150 --> 00:06:17.770
What is two plus three?

100
00:06:17.770 --> 00:06:18.570
I don't know.

101
00:06:18.570 --> 00:06:19.290
Let's ask.

102
00:06:22.010 --> 00:06:24.010
There's no other way I
could figure this out.

103
00:06:25.210 --> 00:06:27.250
So we're going to come
back to the same call.

104
00:06:27.250 --> 00:06:28.330
It looks really similar.

105
00:06:30.410 --> 00:06:34.090
Instead of saying Tools list,
we're going to say Tools call.

106
00:06:35.610 --> 00:06:37.570
And we're going to give
it two arguments here.

107
00:06:37.570 --> 00:06:42.867
We're going to

108
00:06:42.867 --> 00:06:48.163
give it A two and

109
00:06:48.163 --> 00:06:51.425
B three.

110
00:06:51.425 --> 00:06:53.038
So I changed two things.

111
00:06:53.038 --> 00:06:56.100
Instead of Tools call, it's Tools list.

112
00:06:57.140 --> 00:06:59.940
Other way around,
instead of Tools list, it's Tools call.

113
00:06:59.940 --> 00:07:01.620
And then I gave it two params.

114
00:07:01.620 --> 00:07:03.140
So now we should be able to call this.

115
00:07:05.140 --> 00:07:10.932
And through all of this machinery,
all this code,

116
00:07:10.932 --> 00:07:16.110
we have discovered that 23 is indeed 5.

117
00:07:16.110 --> 00:07:20.991
What's cool about this though
is we now have this server that

118
00:07:20.991 --> 00:07:24.510
we can hand over to an LLM and
say run this.

119
00:07:24.510 --> 00:07:28.978
And whenever you run into a problem shaped
of this nature that this tool looks like

120
00:07:28.978 --> 00:07:32.986
it can solve, pass in all of your
parameters that the user has given you or

121
00:07:32.986 --> 00:07:35.490
that you have invented yourself.

122
00:07:35.490 --> 00:07:39.242
And then I deterministically,
using software,

123
00:07:39.242 --> 00:07:43.810
will discover the answer for
you and then hand it back to you.

124
00:07:46.530 --> 00:07:51.410
The addition was just a good way for
us to get started here.

125
00:07:51.410 --> 00:07:55.319
So let's talk for just a hot second about
JSON rpc because I think it's useful for

126
00:07:55.319 --> 00:07:59.346
you to know that the language that's being
spoken here because inevitably you're

127
00:07:59.346 --> 00:08:01.090
going to have to read some of these.

128
00:08:04.680 --> 00:08:06.760
Yeah, we showed you Tools list.

129
00:08:06.760 --> 00:08:08.960
This is just like, hey,
show me everything that you can do.

130
00:08:08.960 --> 00:08:10.520
There's also Tools initialize.

131
00:08:11.560 --> 00:08:13.480
In fact, I think we do that down here.

132
00:08:13.480 --> 00:08:17.720
Yeah, I'll show you Tools Initialize here
in just a second or just initialize.

133
00:08:17.720 --> 00:08:22.046
In general, there's also like
resources and prompts and

134
00:08:22.046 --> 00:08:25.400
all these other capabilities.

135
00:08:25.400 --> 00:08:27.372
But that's what this method is.

136
00:08:27.372 --> 00:08:33.078
Essentially, a RP stands for
Remote Protocol.

137
00:08:33.078 --> 00:08:34.440
No, I forgot what it says.

138
00:08:34.440 --> 00:08:35.520
&gt;&gt; Student: Remote Procedure call.

139
00:08:35.520 --> 00:08:36.520
&gt;&gt; Brian Holt: Remote Procedure call.

140
00:08:36.520 --> 00:08:37.200
Thank you.

141
00:08:37.200 --> 00:08:39.680
Where basically you're
telling something remotely.

142
00:08:39.680 --> 00:08:42.560
I want you to run this
function on your side.

143
00:08:42.560 --> 00:08:46.882
That's what the RPC parts of it stand for.

144
00:08:46.882 --> 00:08:51.470
And then JSON's, obviously, and
I'm going to do this with you using JSON,

145
00:08:51.470 --> 00:08:53.320
obviously there is an XML rpc.

146
00:08:53.320 --> 00:08:54.880
There's other ways of doing it as well.

147
00:08:56.220 --> 00:08:56.980
I mean that's really it.

148
00:08:56.980 --> 00:09:01.151
JSON, rpc, if you look here, has been out.

149
00:09:01.151 --> 00:09:04.380
So we're using 2.0 since 2009.

150
00:09:07.580 --> 00:09:09.300
That's longer than at
least some of our careers.

151
00:09:09.300 --> 00:09:10.340
Is it longer than my career?

152
00:09:10.340 --> 00:09:12.700
It's basically as old as my career.

153
00:09:12.700 --> 00:09:15.180
I think I got my first Dev job in 2009.

154
00:09:18.060 --> 00:09:22.997
We're reusing old technology here.

155
00:09:22.997 --> 00:09:27.280
So I mean, you can think of RPC
as like an alternative to rest.

156
00:09:27.280 --> 00:09:31.014
So rest, essentially you have like a
resource that exists out in the cloud and

157
00:09:31.014 --> 00:09:33.427
you're saying, hey,
I'm going to patch this,

158
00:09:33.427 --> 00:09:36.240
Use this information to
patch this resource.

159
00:09:36.240 --> 00:09:42.240
RPC is less around resources,
which is what REST cares about.

160
00:09:42.240 --> 00:09:48.420
RPC is more around like, hey, you do
something for me using these parameters?

161
00:09:48.420 --> 00:09:49.220
Does that make sense?

162
00:09:50.340 --> 00:09:55.220
We don't really use it too much outside
of like, it's really common for

163
00:09:55.220 --> 00:09:59.860
infrastructure like DevOps kind of
stuff to use RPC for like web dev.

164
00:09:59.860 --> 00:10:03.332
We don't use RPC because we're in
love with like GraphQL or rest or

165
00:10:03.332 --> 00:10:04.820
some of these other things.

166
00:10:08.580 --> 00:10:09.300
That's it.

167
00:10:09.300 --> 00:10:11.780
That is all that JSON RPC is.

168
00:10:13.630 --> 00:10:15.630
There's actually nothing
AI specific about this.

169
00:10:16.830 --> 00:10:19.550
So let's just run this command for fun.

170
00:10:19.550 --> 00:10:22.030
I'm not gonna make you type it,
that sounds way too hard.

171
00:10:31.630 --> 00:10:33.070
So this is initializing.

172
00:10:33.070 --> 00:10:35.550
You're telling it what version of the
protocol that you're going to be using.

173
00:10:36.910 --> 00:10:38.990
This is MCP protocol.

174
00:10:40.690 --> 00:10:41.610
Has a list changed?

175
00:10:41.610 --> 00:10:42.594
Yes.
There's a bunch of

176
00:10:42.594 --> 00:10:43.650
stuff you can basically ask it.

177
00:10:43.650 --> 00:10:45.650
Like, I have these things cached.

178
00:10:45.650 --> 00:10:47.410
Are these things okay to keep cached?

179
00:10:48.530 --> 00:10:49.810
It tells you what it is.

180
00:10:49.810 --> 00:10:52.570
Then at that point you say,
okay, you have an AD server.

181
00:10:52.570 --> 00:10:53.970
Tell me everything about the AD server.

182
00:10:53.970 --> 00:10:57.090
Tell me all your tools, tell me all your
prompts, tell me all your resources.

183
00:10:57.090 --> 00:10:58.788
And this does all the handshaking and

184
00:10:58.788 --> 00:11:03.010
figuring out, here's everything that
this MCP server purports that it can do.

185
00:11:03.010 --> 00:11:06.567
Everything that we're going to do with
writing MCP servers after this is just

186
00:11:06.567 --> 00:11:08.440
variations on this.

187
00:11:08.440 --> 00:11:12.025
At this point, I'm very okay if you just
choose to copy and paste code, because

188
00:11:12.025 --> 00:11:15.680
rewriting this code over and over again is
not really going to teach you too much.

189
00:11:15.680 --> 00:11:18.934
It's actually more just about
the semantics that I care about

190
00:11:18.934 --> 00:11:21.438
than the actual individual
pieces of code when I

191
00:11:21.438 --> 00:11:25.320
write MCP servers because I
somewhat frequently do it for like.

192
00:11:25.320 --> 00:11:26.320
Well, here's a good example.

193
00:11:26.320 --> 00:11:28.920
I was working with Vercel the other day.

194
00:11:28.920 --> 00:11:35.170
Vercel doesn't have
a streamable HTTP MCP server.

195
00:11:35.170 --> 00:11:37.970
They have a local one, but
they don't have one that works remotely.

196
00:11:39.810 --> 00:11:44.530
I just had my claude code write one for
me and then I started using it.

197
00:11:44.530 --> 00:11:46.490
I actually rarely author them myself.

198
00:11:46.490 --> 00:11:50.210
I just make all of my coding tools author
their own tools and then use the tools.

