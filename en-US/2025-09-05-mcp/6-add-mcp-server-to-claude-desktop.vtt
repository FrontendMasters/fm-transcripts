WEBVTT

1
00:00:00.480 --> 00:00:02.480
&gt;&gt; Brian Holt: So
now we have a valid MCP server.

2
00:00:03.520 --> 00:00:08.000
We've used it locally, but we have not
used it with actually using AI yet.

3
00:00:08.000 --> 00:00:12.801
We haven't actually seen our AI using yet.

4
00:00:12.801 --> 00:00:15.680
So I'm gonna show you how to add
an MCP server to Cloud Desktop.

5
00:00:15.680 --> 00:00:17.040
It's a pain in the butt.

6
00:00:17.040 --> 00:00:20.048
My guess is in the very near future
they're going to make it even easier for

7
00:00:20.048 --> 00:00:21.280
us to do this.

8
00:00:21.280 --> 00:00:26.962
But for now, if you're following along,
we're going to do it for Claude Desktop.

9
00:00:26.962 --> 00:00:29.656
So open Claude.

10
00:00:29.656 --> 00:00:34.845
There is a Settings panel here and

11
00:00:34.845 --> 00:00:39.853
I think it's under Developer.

12
00:00:39.853 --> 00:00:43.908
Yeah, so I'm gonna trash that one for
the moment.

13
00:00:43.908 --> 00:00:46.262
And then you're gonna
wanna click Edit Config.

14
00:00:50.382 --> 00:00:52.822
It's going to take you to
some file somewhere and

15
00:00:52.822 --> 00:00:55.510
I'm just going to open that
file directly in VS code.

16
00:00:57.590 --> 00:01:00.470
So it tells me at the moment
I have no MCP servers.

17
00:01:02.150 --> 00:01:05.270
So here we're going to
add some sort of server.

18
00:01:05.270 --> 00:01:07.978
You can call it, I called it Demo Server,
you can call it Add Server,

19
00:01:07.978 --> 00:01:08.790
whatever you want.

20
00:01:13.030 --> 00:01:15.670
In fact,
let's actually just call this demo,

21
00:01:15.670 --> 00:01:18.710
because I think we're going
to reuse it here command.

22
00:01:21.680 --> 00:01:25.760
So here you have to give it
the full path to your node binary.

23
00:01:25.760 --> 00:01:30.160
So just come in here to your cli.

24
00:01:30.160 --> 00:01:32.151
Say which node.

25
00:01:32.151 --> 00:01:34.755
You can see mine is very
silly because I use fnm, so

26
00:01:34.755 --> 00:01:36.560
what I was talking about earlier.

27
00:01:37.680 --> 00:01:38.710
But if you type which,

28
00:01:38.710 --> 00:01:41.920
it should give you the full path to
what binary you're using for that.

29
00:01:44.000 --> 00:01:47.396
If you're not getting anything, you
don't have node in your default path and

30
00:01:47.396 --> 00:01:48.640
you need to go install node.

31
00:01:51.090 --> 00:01:56.771
Okay, so
just paste that whole ugly thing there.

32
00:01:56.771 --> 00:02:01.212
Then you're gonna give it args, And

33
00:02:01.212 --> 00:02:05.036
then you're gonna have to give it
the full path to your mcp.js file.

34
00:02:08.287 --> 00:02:10.730
Okay, so it's in a parenthesis.

35
00:02:10.730 --> 00:02:12.730
We're not going to give it like
any additional flags afterwards.

36
00:02:12.730 --> 00:02:13.410
But you could.

37
00:02:13.410 --> 00:02:14.450
This is where you would do it.

38
00:02:17.050 --> 00:02:24.730
So I'm here, I'm going to say I'm in my
MCP folder that we've been writing in.

39
00:02:24.730 --> 00:02:29.690
If you put pwd,
it should give you where you are.

40
00:02:30.970 --> 00:02:36.070
Grab that and then just put on the end

41
00:02:36.070 --> 00:02:40.330
MCP js if you're on Windows.

42
00:02:40.330 --> 00:02:44.302
I think this will work in
PowerShell both which and

43
00:02:44.302 --> 00:02:47.814
PWD, which is present working directory.

44
00:02:47.814 --> 00:02:49.330
Am I good?
Yeah, close enough.

45
00:02:49.330 --> 00:02:50.210
Believable enough.

46
00:02:50.210 --> 00:02:51.690
Good.
Okay, good.

47
00:02:51.690 --> 00:02:58.606
And then a nice thing for
it to do is add an env.

48
00:02:58.606 --> 00:03:04.266
You don't have to do this,
but I'm just gonna suggest

49
00:03:04.266 --> 00:03:09.076
that you always do if
you're using Node js,.

50
00:03:09.076 --> 00:03:17.280
Node.js will output deprecation
warnings into the standard I/O, right?

51
00:03:17.280 --> 00:03:21.600
So if you start using something that knows
like, this is about to be deprecated in

52
00:03:21.600 --> 00:03:25.501
version 26 of node, that would actually
be passed directly to your agent.

53
00:03:25.501 --> 00:03:27.520
And your agent would be like,
I don't know what to do with this, right?

54
00:03:27.520 --> 00:03:28.760
Why are you telling me that?

55
00:03:28.760 --> 00:03:30.320
You can't use promises this way.

56
00:03:32.720 --> 00:03:34.080
So that's what this does.

57
00:03:34.080 --> 00:03:35.760
This suppresses all those warnings.

58
00:03:37.200 --> 00:03:38.680
Right now, this should be fine.

59
00:03:38.680 --> 00:03:39.800
You actually probably don't need this.

60
00:03:39.800 --> 00:03:42.040
But I just make a habit
of putting it in there.

61
00:03:42.040 --> 00:03:45.741
That's it.
That's how you add an McP server to

62
00:03:45.741 --> 00:03:46.636
Claude.

63
00:03:46.636 --> 00:03:54.106
So in theory,
I'm gonna quit Claude altogether and

64
00:03:54.106 --> 00:03:58.023
then I'm gonna reopen it.

65
00:04:01.991 --> 00:04:05.187
It's gonna ask me if it can ask,
cuz my Node server is on my desktop,

66
00:04:05.187 --> 00:04:06.600
that's why it asked me that.

67
00:04:07.760 --> 00:04:15.279
Then you should see, if you click
this Tools Demo server right there,

68
00:04:15.279 --> 00:04:19.240
it'll tell you what tools are open.

69
00:04:19.240 --> 00:04:22.000
You can actually turn off
the add tool if you want to.

70
00:04:23.920 --> 00:04:27.163
Then the other thing to look at here,
which is helpful for

71
00:04:27.163 --> 00:04:29.200
debugging is Settings Developer.

72
00:04:29.200 --> 00:04:30.960
You can see that this is running.

73
00:04:30.960 --> 00:04:34.910
It tells you where it's running,
what the arguments were, advanced options.

74
00:04:34.910 --> 00:04:36.830
Let's just break it intentionally for fun.

75
00:04:47.790 --> 00:04:50.846
Very descriptive errors.

76
00:04:50.846 --> 00:04:52.350
Okay, and then I'm gonna to restart this.

77
00:04:55.390 --> 00:04:57.079
If you change anything
about your MCP server,

78
00:04:57.079 --> 00:04:59.950
you do have to totally restart
Claude Desktop every single time.

79
00:04:59.950 --> 00:05:01.231
Yeah.
Okay.

80
00:05:01.231 --> 00:05:02.910
So it's gonna tell you
that it has a problem.

81
00:05:02.910 --> 00:05:04.605
You're going to open
Developer Settings and

82
00:05:04.605 --> 00:05:06.750
then it's going to give
you Open Logs folder.

83
00:05:06.750 --> 00:05:12.670
And you can see here, I have Demo Server
and I can actually see all the logs.

84
00:05:13.710 --> 00:05:15.110
Normally you don't have this many logs.

85
00:05:15.110 --> 00:05:17.150
This is because I've been
writing this course for a while.

86
00:05:19.310 --> 00:05:21.438
But actually,
if you go all the way down to the bottom,

87
00:05:21.438 --> 00:05:22.750
let's just open it altogether.

88
00:05:25.470 --> 00:05:30.336
All the way down to the bottom.

89
00:05:30.336 --> 00:05:35.014
Error, it should tell
you that right there.

90
00:05:35.014 --> 00:05:39.780
LOL, WF, I promise that says LOL WTF OMG.

91
00:05:41.060 --> 00:05:41.860
Yeah, question.

92
00:05:41.860 --> 00:05:42.980
&gt;&gt; Speaker 2: I think you
might have just said.

93
00:05:42.980 --> 00:05:47.717
There'S no way to reload MCP servers in
CLAUDE without just killing the app and

94
00:05:47.717 --> 00:05:48.740
reopening it.

95
00:05:48.740 --> 00:05:50.180
&gt;&gt; Brian Holt: Correct.

96
00:05:50.180 --> 00:05:51.700
I hope they fix that sometime.

97
00:05:51.700 --> 00:05:54.940
But most people aren't doing what we're
doing and they're not building for us.

98
00:05:54.940 --> 00:05:57.030
They're building for,
like, the general populace.

99
00:05:57.030 --> 00:06:00.149
Okay, we're going to show you
in tome how to add it as well.

100
00:06:00.149 --> 00:06:05.026
So with Tome very similar,

101
00:06:05.026 --> 00:06:11.398
just node and then mcp.js, Save.

102
00:06:18.427 --> 00:06:23.030
Okay, and then now if I go over here,
I have these other ones.

103
00:06:23.030 --> 00:06:25.372
Can I just delete these for now?

104
00:06:25.372 --> 00:06:28.356
Delete and delete.

105
00:06:28.356 --> 00:06:33.060
Okay, it's a Battle of Waterloo,
just kidding.

106
00:06:33.060 --> 00:06:37.497
So now you can see over here I have all my
servers, but I also have this ad server

107
00:06:37.497 --> 00:06:41.620
here that I can turn on and off for
every single command I'm about to do.

108
00:06:42.660 --> 00:06:48.571
This one you don't have to restart,
which is nice.

109
00:06:48.571 --> 00:06:50.500
So let's go to Claude.

110
00:06:50.500 --> 00:06:57.860
Let's start a new chat and say I really
want to add two numbers together.

111
00:07:00.340 --> 00:07:04.740
I want you to use the add server.

112
00:07:04.740 --> 00:07:07.920
MCP server,

113
00:07:07.920 --> 00:07:13.128
please add 2 and 7.

114
00:07:13.128 --> 00:07:15.468
We don't need Opus for
this, Sonnet is just fine.

115
00:07:15.468 --> 00:07:18.810
[LAUGH] That's pretty funny.

116
00:07:26.964 --> 00:07:29.856
No, you do have it though.

117
00:07:29.856 --> 00:07:30.890
Cause I broke it, did I?

118
00:07:32.730 --> 00:07:34.010
&gt;&gt; Speaker 2: You restarted since.

119
00:07:34.010 --> 00:07:35.690
&gt;&gt; Brian Holt: I don't think I did.

120
00:07:35.690 --> 00:07:36.570
Yeah.
Okay.

121
00:07:37.930 --> 00:07:39.690
See this, this happens to me all the time.

122
00:07:41.370 --> 00:07:45.700
And you say, hey Claude,
now try, you fool.

123
00:07:45.700 --> 00:07:48.664
Create a new chat.

124
00:07:48.664 --> 00:07:54.546
And you can see now I have my demo server,

125
00:07:54.546 --> 00:07:59.053
Add is activated, all right.

126
00:07:59.053 --> 00:08:00.860
And that's gonna say, okay,
I wanna use this tool.

127
00:08:00.860 --> 00:08:02.500
It's always going to ask you,
which is good.

128
00:08:08.990 --> 00:08:09.950
There you go.

129
00:08:09.950 --> 00:08:13.550
This is the request that it sent to
your server and this is the response.

130
00:08:15.790 --> 00:08:17.310
Pretty cool stuff?

131
00:08:17.310 --> 00:08:18.980
We should be able to take this over.

132
00:08:18.980 --> 00:08:19.950
We're gonna do this with.

133
00:08:21.310 --> 00:08:25.230
We'll see how well QEN6 handles this.

134
00:08:26.670 --> 00:08:29.486
I'm just going to go ahead and
suggest all of you just go ahead and

135
00:08:29.486 --> 00:08:30.750
use the QEN models for this.

136
00:08:30.750 --> 00:08:33.470
If you have no opinion on this,
just use the QEN models.

137
00:08:38.342 --> 00:08:39.563
I didn't even turn it on.

138
00:08:39.563 --> 00:08:43.188
Nope, we're gonna try this again.

139
00:08:43.188 --> 00:08:46.680
Turn this on, 0.6, ready, go.

140
00:08:51.000 --> 00:08:52.320
There you go.

141
00:08:52.320 --> 00:08:55.019
So Qwen 0.6,
if it's very straightforward and

142
00:08:55.019 --> 00:08:59.240
it's just one tools call, Qwen 0.6 can
generally handle that pretty well.

143
00:09:01.090 --> 00:09:05.171
Response is nine.

144
00:09:05.171 --> 00:09:07.250
So we got it going in Tome as well.

145
00:09:07.250 --> 00:09:09.443
Mark?
&gt;&gt; Speaker 2: Can you write these MCP

146
00:09:09.443 --> 00:09:12.610
servers in other languages like Go?

147
00:09:12.610 --> 00:09:13.453
&gt;&gt; Brian Holt: Absolutely.

148
00:09:13.453 --> 00:09:20.850
It's all standard I/O, so JavaScript and
Python have really good SDKs for it.

149
00:09:20.850 --> 00:09:23.613
I would even say the best SDK for

150
00:09:23.613 --> 00:09:28.640
writing MCP servers is fast MCP,
which is in Python.

151
00:09:28.640 --> 00:09:31.493
They took fastAPI,
which is a great API framework, and

152
00:09:31.493 --> 00:09:34.480
they just made it MCP oriented
as opposed to API oriented.

153
00:09:35.840 --> 00:09:39.822
Actually today if I was going to go write
my own MCP server professionally maintain

154
00:09:39.822 --> 00:09:42.720
it, I would just Write it in Python and
I would use Fast mcp.

155
00:09:44.080 --> 00:09:45.680
This could definitely be written in Go.

156
00:09:45.680 --> 00:09:50.000
I don't know if there's a Go MCP
server framework already exists.

157
00:09:50.000 --> 00:09:53.602
My intuition is that it probably exists,
but if not,

158
00:09:53.602 --> 00:09:58.004
it's a minimal amount of framework
that you would have to write,

159
00:09:58.004 --> 00:10:01.860
that Claude Code could definitely do for
you.

160
00:10:01.860 --> 00:10:06.218
&gt;&gt; Speaker 3: What's the best development
experience you've found to do this?

161
00:10:06.218 --> 00:10:08.049
Cuz restarting obviously is.

162
00:10:08.049 --> 00:10:09.291
&gt;&gt; Brian Holt: A pain in the butt.

163
00:10:09.291 --> 00:10:11.248
&gt;&gt; Speaker 3: Logs are hard to get to.

164
00:10:11.248 --> 00:10:12.337
What do you typically do?

165
00:10:12.337 --> 00:10:13.914
&gt;&gt; Brian Holt: For writing MCP servers,

166
00:10:13.914 --> 00:10:16.927
The fastest loop I have
found is with Claude Code.

167
00:10:16.927 --> 00:10:20.919
Cuz Claude Code's usually pretty good
about churning this out pretty quickly.

168
00:10:20.919 --> 00:10:25.503
And then pointing Claude Code at
the directory that has your logs and so

169
00:10:25.503 --> 00:10:28.230
you can say this didn't work, try this.

170
00:10:29.670 --> 00:10:32.381
Cloud code is usually able
to iterate pretty quickly.

171
00:10:32.381 --> 00:10:35.178
And then I just open it in Claude Desktop,
cuz I mean,

172
00:10:35.178 --> 00:10:39.670
it's annoying, but you just restart it and
open it again and it goes pretty quickly.

173
00:10:41.750 --> 00:10:42.950
Yeah, question.

174
00:10:42.950 --> 00:10:48.256
&gt;&gt; Speaker 4: Yeah, I had a typo on my
server on the response where I had test

175
00:10:48.256 --> 00:10:54.410
instead of text for the answer and
CLAUDE did not know what to do there.

176
00:10:54.410 --> 00:10:56.130
How rigid are these responses?

177
00:10:56.130 --> 00:10:58.250
Are those all defined in the protocol?

178
00:10:58.250 --> 00:10:59.290
&gt;&gt; Brian Holt: Good question.

179
00:10:59.290 --> 00:11:04.251
So his question is around like some
of these like title description,

180
00:11:04.251 --> 00:11:06.816
input schemas, all that like, and

181
00:11:06.816 --> 00:11:12.649
just everything in the JSON rpc highly
rigid like it is, depending on that fact.

182
00:11:12.649 --> 00:11:17.320
Because it's not actually the LLM that's
interpreting that, it's the client.

183
00:11:17.320 --> 00:11:22.113
So it's Claude desktop, not Claude
that's interpreting those responses,

184
00:11:22.113 --> 00:11:26.640
it's calling the tool for it,
passing that into the LLM.

185
00:11:26.640 --> 00:11:31.330
As far as what happens if you called this?

186
00:11:31.330 --> 00:11:34.480
Well, I mean, if you called this C, then
it wouldn't get input in here correctly.

187
00:11:34.480 --> 00:11:37.866
But what happens if you had
three numbers in here and

188
00:11:37.866 --> 00:11:41.200
then you just had two numbers in here?

189
00:11:41.200 --> 00:11:44.100
Chances are the LLM would
probably just sail over it and

190
00:11:44.100 --> 00:11:46.710
be fine with it because the LLM can.

191
00:11:46.710 --> 00:11:49.110
Well, humans are dumb and
do dumb things, right?

192
00:11:51.270 --> 00:11:54.690
So there's places you could definitely
make typos and it'd be okay, but

193
00:11:54.690 --> 00:11:58.165
it would be on the LLM side because
the LLM could recover from it, whereas,

194
00:11:58.165 --> 00:12:00.670
like, the client will not
be able to recover from it.

195
00:12:00.670 --> 00:12:01.736
Does that answer your question?

196
00:12:01.736 --> 00:12:02.539
&gt;&gt; Speaker 4: Yeah,
yeah, that makes sense.

197
00:12:02.539 --> 00:12:04.550
&gt;&gt; Brian Holt: Cool, good question.

198
00:12:04.550 --> 00:12:05.590
This is cool, right?

199
00:12:05.590 --> 00:12:06.950
Like, am I out to lunch here?

200
00:12:06.950 --> 00:12:08.230
I think this is pretty cool.

