WEBVTT

1
00:00:00.400 --> 00:00:04.400
&gt;&gt; Brian Holt: So let's go back to our
my MCP that we were developing before.

2
00:00:04.400 --> 00:00:08.480
Let's implement a tool
that just creates issues.

3
00:00:12.160 --> 00:00:18.920
So let's go to VS code, not this one,
we're gonna get rid of this one.

4
00:00:18.920 --> 00:00:20.280
I think we're done with this one.

5
00:00:20.280 --> 00:00:25.570
For the rest of the class, we want just
the issue tracker, which is this one.

6
00:00:30.280 --> 00:00:32.520
Okay, and we're here in my MCP.

7
00:00:36.360 --> 00:00:40.465
So the way that I chose to do this is
I'm going to create another file here,

8
00:00:40.465 --> 00:00:42.600
call something like API based tools.

9
00:00:45.800 --> 00:00:52.390
Okay, and I'm gonna import Z from Zod.

10
00:00:53.420 --> 00:00:58.380
We're going to export a default function
that basically defines all these tools.

11
00:00:58.380 --> 00:01:00.140
So we can keep it in two separate files.

12
00:01:03.020 --> 00:01:06.614
API based tools server and

13
00:01:06.614 --> 00:01:11.100
then down here at the bottom.

14
00:01:11.100 --> 00:01:13.020
Actually, we don't need to
do that because we did that.

15
00:01:17.020 --> 00:01:20.940
This server will be our MCP server
that we defined here in main JS.

16
00:01:22.860 --> 00:01:27.836
Okay.
We're going to say const API base URL is

17
00:01:27.836 --> 00:01:33.104
assigned process env apibaseurl by default

18
00:01:33.104 --> 00:01:38.460
we'll have it be HTTP localhost3000.

19
00:01:38.460 --> 00:01:40.420
That's what I have the API
server running on.

20
00:01:40.420 --> 00:01:45.399
You could also do 5,173 as
long as the front end server

21
00:01:45.399 --> 00:01:50.490
was running because it's
proxying it through vite/API.

22
00:01:54.410 --> 00:01:54.930
Okay.

23
00:01:54.930 --> 00:01:59.050
And then we're going to make
a helper function here.

24
00:01:59.050 --> 00:02:06.128
Async function makeRequest,

25
00:02:06.128 --> 00:02:10.482
have a method url,

26
00:02:10.482 --> 00:02:14.020
data = null and

27
00:02:14.020 --> 00:02:18.430
options = blah.

28
00:02:18.430 --> 00:02:21.150
We'll use this for
the rest of our requests.

29
00:02:24.910 --> 00:02:32.430
Const config equals method headers.

30
00:02:33.710 --> 00:02:39.080
It's always gonna be a JSON type, right,

31
00:02:39.080 --> 00:02:44.904
content type, application/json and...

32
00:02:44.904 --> 00:02:47.200
Options.headers.

33
00:02:51.680 --> 00:02:56.726
And then if data, then config.body

34
00:02:56.726 --> 00:03:01.040
= JSON.stringify data.

35
00:03:01.040 --> 00:03:03.751
I mean, I'm basically
reimplementing Axios here, right,

36
00:03:03.751 --> 00:03:06.160
you probably could have just
done this all with Axios.

37
00:03:08.150 --> 00:03:12.908
Const response =

38
00:03:12.908 --> 00:03:18.934
await fetch url config

39
00:03:18.934 --> 00:03:24.643
const result = await

40
00:03:24.643 --> 00:03:29.084
response text,

41
00:03:29.084 --> 00:03:34.158
let jsonResult try

42
00:03:34.158 --> 00:03:39.233
jsonResult = JSON

43
00:03:39.233 --> 00:03:44.000
parse and catch.

44
00:03:47.360 --> 00:03:50.877
If it fails to parse,
just make it the actual result.

45
00:04:05.149 --> 00:04:11.261
Okay, and then we'll return status

46
00:04:11.261 --> 00:04:17.770
response.status data jsonResult and

47
00:04:17.770 --> 00:04:23.687
headers will be object from entries

48
00:04:23.687 --> 00:04:29.220
response.headers.entries.

49
00:04:32.980 --> 00:04:34.980
I didn't do that at the top, did I?

50
00:04:34.980 --> 00:04:35.940
No, I don't think I did.

51
00:04:37.940 --> 00:04:38.740
Yeah, up here.

52
00:04:38.740 --> 00:04:39.780
Sorry.
Above data.

53
00:04:41.300 --> 00:04:43.260
Just making sure that the headers
get passed in as well.

54
00:04:43.260 --> 00:04:48.063
Const headers,

55
00:04:48.063 --> 00:04:52.866
options, other

56
00:04:52.866 --> 00:04:59.390
options Right there.

57
00:05:16.200 --> 00:05:23.320
Object assign config other options.

58
00:05:27.880 --> 00:05:31.560
So just pulling in the options from
this and making it More flexible.

59
00:05:31.560 --> 00:05:36.762
Okay, and then catch error down here and

60
00:05:36.762 --> 00:05:42.423
return status zero error error.message.

61
00:05:42.423 --> 00:05:50.030
Okay, so now we have something
that can make requests and

62
00:05:50.030 --> 00:05:54.943
then we're going to come down here,

63
00:05:54.943 --> 00:06:01.599
make sure that we're in
the right function here,

64
00:06:01.599 --> 00:06:05.100
purple one, there we go.

65
00:06:07.910 --> 00:06:14.103
Server.registerTool

66
00:06:14.103 --> 00:06:19.676
issue-create title

67
00:06:19.676 --> 00:06:27.110
create issue description.

68
00:06:32.640 --> 00:06:37.840
Create a new issue in our issue

69
00:06:37.840 --> 00:06:42.000
tracker input schema.

70
00:06:49.920 --> 00:06:51.120
We have quite a few here.

71
00:06:55.200 --> 00:06:58.309
Title will be

72
00:06:58.309 --> 00:07:07.360
a z.string.describe issue title.

73
00:07:10.880 --> 00:07:14.615
So again, whatever you put in describe
is pretty important, with sod, whatever,

74
00:07:14.615 --> 00:07:15.520
who cares, right?

75
00:07:15.520 --> 00:07:20.238
But specifically with MCP service,
it's really important here

76
00:07:20.238 --> 00:07:24.880
because this is what the LLM is
gonna use to decide to put in here.

77
00:07:28.680 --> 00:07:32.540
Status.

78
00:07:32.540 --> 00:07:37.427
What do we need to do description first,

79
00:07:37.427 --> 00:07:42.200
description Z.string.optional.

80
00:07:42.200 --> 00:07:48.237
Because it is optional,

81
00:07:48.237 --> 00:07:55.136
describe issue description

82
00:07:55.136 --> 00:08:03.185
status Z enumerated type enum and

83
00:08:03.185 --> 00:08:08.071
it can be not started

84
00:08:08.071 --> 00:08:13.250
in progress or done.

85
00:08:17.260 --> 00:08:21.689
It is optional and

86
00:08:21.689 --> 00:08:27.004
describe, I put just

87
00:08:27.004 --> 00:08:32.620
issue status in here.

88
00:08:34.060 --> 00:08:38.064
These are probably not
the best descriptions of them,

89
00:08:38.064 --> 00:08:41.380
but I also wasn't having
any issues with it.

90
00:08:41.380 --> 00:08:46.549
So it's one of those things
like you kind of just go

91
00:08:46.549 --> 00:08:52.290
as far as you need to go until spaces two,
please.

92
00:08:52.290 --> 00:08:55.490
Spaces two, please.

93
00:08:58.450 --> 00:08:59.970
There we go.

94
00:08:59.970 --> 00:09:06.530
Priority Z Enum.

95
00:09:10.860 --> 00:09:15.839
This is low, medium,

96
00:09:15.839 --> 00:09:20.294
high, and urgent,

97
00:09:20.294 --> 00:09:25.020
and it's optional.

98
00:09:27.020 --> 00:09:30.242
So the amount of times I've actually
authored these things by hand is

99
00:09:30.242 --> 00:09:30.860
pretty low.

100
00:09:32.140 --> 00:09:37.057
Usually I'll like take like a open API
spec or something like that and feed that

101
00:09:37.057 --> 00:09:41.972
into like CLAUDE code and say, hey, write
like a basic MCP server with this and

102
00:09:41.972 --> 00:09:46.550
then I'll go just fine tune it after
it gets like a nice framework for it.

103
00:09:47.830 --> 00:09:51.381
That being said, it is useful for
you to kind of like see like how the,

104
00:09:51.381 --> 00:09:53.110
how the sausage is made, right?

105
00:09:54.550 --> 00:10:01.196
This is priority assigned

106
00:10:01.196 --> 00:10:09.360
user id z.string.optional.

107
00:10:11.920 --> 00:10:15.765
If you've taken any of my courses, you're
probably aware I like making users or

108
00:10:15.765 --> 00:10:19.680
students feel pain first before they start
using the tools to alleviate the pain.

109
00:10:24.250 --> 00:10:28.600
Like it definitely happened when I was
using Docker where I used to like fear

110
00:10:28.600 --> 00:10:29.222
Docker and

111
00:10:29.222 --> 00:10:33.364
like you find it very frictionful until
I actually dug under the hood and

112
00:10:33.364 --> 00:10:38.090
realized what it does for me and
like I could go do all this stuff myself.

113
00:10:38.090 --> 00:10:41.701
But when you start messing with networking
stacks and things don't work, then you're

114
00:10:41.701 --> 00:10:45.450
like, thank you Docker for just handling
all of the networking stack for me.

115
00:10:45.450 --> 00:10:46.410
Same kind of thing here.

116
00:10:50.020 --> 00:10:52.147
Like once you realize what
the LLM is doing for you,

117
00:10:52.147 --> 00:10:54.770
you like won't be afraid to get
in there and start digging in and

118
00:10:54.770 --> 00:10:57.220
figuring out like why is the LLM
doing these silly things.

119
00:11:00.580 --> 00:11:04.725
Tag ids z.array of

120
00:11:04.725 --> 00:11:12.246
z.number.optional describe-

121
00:11:21.828 --> 00:11:27.008
Describe here as tags id optional

122
00:11:27.008 --> 00:11:32.190
describe array array of tag ids.

123
00:11:36.430 --> 00:11:42.394
Okay, and
then you need an API key here at the end,

124
00:11:42.394 --> 00:11:50.070
which is a string Z string describe
API key for authenticating.

125
00:11:58.550 --> 00:12:00.710
That's probably redundant,
I just need that.

126
00:12:05.430 --> 00:12:07.350
Okay, so that's everything it expects.

127
00:12:08.360 --> 00:12:11.640
And now we've made up all the machinery.

128
00:12:11.640 --> 00:12:12.760
This makes it really easy.

129
00:12:12.760 --> 00:12:16.355
Async params and

130
00:12:16.355 --> 00:12:21.240
this is just going to.

131
00:12:24.200 --> 00:12:26.040
This probably needs to be outside that,
doesn't it?

132
00:12:27.880 --> 00:12:36.290
Yeah, there we go.

133
00:12:38.210 --> 00:12:42.530
The async function lives as sibling
to this object, not inside of it.

134
00:12:42.530 --> 00:12:44.940
That's what I was doing wrong.

135
00:12:44.940 --> 00:12:50.504
Okay, const api

136
00:12:50.504 --> 00:12:59.250
key issue data = params.

137
00:13:00.830 --> 00:13:04.506
This is destructuring, I assume by this
point most of you have probably seen this

138
00:13:04.506 --> 00:13:06.560
before, but
I'm just pulling out API key and

139
00:13:06.560 --> 00:13:09.390
then everything else into another
object called issue data.

140
00:13:11.070 --> 00:13:15.390
Then const result is going
to be await make request.

141
00:13:17.310 --> 00:13:18.350
It's going to be a post.

142
00:13:21.630 --> 00:13:26.055
We're going to go

143
00:13:26.055 --> 00:13:32.545
to apibaseurl/issues,

144
00:13:32.545 --> 00:13:38.740
issue data and headers.

145
00:13:40.020 --> 00:13:48.140
We're going to add x API key.

146
00:13:48.140 --> 00:13:48.860
I think this is all.

147
00:13:48.860 --> 00:13:49.900
Did I do this with better auth?

148
00:13:49.900 --> 00:13:51.700
I think I did this all with better auth.

149
00:13:51.700 --> 00:13:57.720
So this is all better auth stuff,
which is great, by the way.

150
00:13:59.400 --> 00:14:02.360
They just raised a bunch of money
from Y Combinator, I think.

151
00:14:09.000 --> 00:14:10.920
Okay, so now we have the results here.

152
00:14:10.920 --> 00:14:17.851
After we're doing that,

153
00:14:17.851 --> 00:14:24.153
we're gonna say return

154
00:14:24.153 --> 00:14:30.454
content type is text and

155
00:14:30.454 --> 00:14:34.549
text is going to

156
00:14:34.549 --> 00:14:39.906
be JSON.stringify

157
00:14:39.906 --> 00:14:44.490
result null 2.

158
00:14:44.490 --> 00:14:48.395
Notice I'm doing like a little bit
of spacing, which is not super,

159
00:14:48.395 --> 00:14:53.020
it's more tokens because you're
putting more whitespace into it.

160
00:14:53.020 --> 00:14:56.761
But I have found that adding
additional space does help agents and

161
00:14:56.761 --> 00:15:00.436
LLMs interpret the data more
correctly because it doesn't have

162
00:15:00.436 --> 00:15:03.580
to disambiguate like where
do I hack the string apart?

163
00:15:05.260 --> 00:15:09.460
You could probably get away with one,
but that sounds strange.

164
00:15:09.460 --> 00:15:12.220
So I'm gonna do two, just for
my own comfort's sake.

165
00:15:15.370 --> 00:15:18.767
Okay.
I mean, this was a lot to write, but

166
00:15:18.767 --> 00:15:22.730
a lot of like,
not new concepts here, right?

167
00:15:24.250 --> 00:15:27.210
But this is more descriptive,
more real life of what.

168
00:15:27.210 --> 00:15:29.930
What this would actually look like
building one of these MCP tools.

