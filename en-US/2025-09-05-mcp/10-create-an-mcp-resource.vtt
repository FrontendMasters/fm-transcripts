WEBVTT

1
00:00:00.240 --> 00:00:02.605
&gt;&gt; Brian Holt: Before we spin wheels
any further, let's just go build it and

2
00:00:02.605 --> 00:00:04.800
then you can kind of see
what I'm talking about.

3
00:00:04.800 --> 00:00:10.320
If you have not cloned the MCP
issue tracker, please do so

4
00:00:10.320 --> 00:00:17.680
I had you do it at the beginning of the
course and then let's go into MCP here.

5
00:00:17.680 --> 00:00:19.080
So I have it on my desktop.

6
00:00:19.080 --> 00:00:22.797
So I'm going to open that
MCP issue tracker here and

7
00:00:22.797 --> 00:00:25.309
I'm going to open that in VS code.

8
00:00:32.650 --> 00:00:35.210
&gt;&gt; Brian Holt: So, close that.

9
00:00:38.730 --> 00:00:40.450
Just a quick lay of the land here.

10
00:00:40.450 --> 00:00:45.567
This is kind of laid out like
a model repo where I have

11
00:00:45.567 --> 00:00:52.250
a bunch of commands that run things
in various different folders.

12
00:00:52.250 --> 00:00:55.660
There's a backend directory
that runs Fastify.

13
00:00:55.660 --> 00:01:01.860
Okay, so it is Fastify,
which is just an express style API server.

14
00:01:01.860 --> 00:01:04.900
There's a front end and
I think this is just straight up react.

15
00:01:04.900 --> 00:01:08.980
I don't think I have anything like next or
anything fancy in here.

16
00:01:08.980 --> 00:01:12.020
React, react-dom,
some other stuff, tailwind.

17
00:01:14.980 --> 00:01:17.642
This is definitely vibe coded
cuz it felt like it was fitting

18
00:01:17.642 --> 00:01:18.820
with the course, right?

19
00:01:20.900 --> 00:01:23.876
So as a good vibe coder,
I'm taking no responsibility for

20
00:01:23.876 --> 00:01:25.100
any of the code in here.

21
00:01:25.100 --> 00:01:26.660
If it's broken,
it's the agent's fault, [LAUGH].

22
00:01:29.920 --> 00:01:32.320
Then we have an MCP directory.

23
00:01:32.320 --> 00:01:35.679
I have left the solutions in here,
so if you get lost or

24
00:01:35.679 --> 00:01:40.320
anything like that, by all means feel
free to just go ahead and use those.

25
00:01:41.760 --> 00:01:43.680
But I'm going to create
a new directory in here and

26
00:01:43.680 --> 00:01:45.520
we're going to code it
from scratch together.

27
00:01:47.200 --> 00:01:51.600
New folder and we'll call it my MCP or
something like that.

28
00:01:54.010 --> 00:01:58.890
Okay, and
then we're going to go into my MCP.

29
00:01:58.890 --> 00:02:02.250
We're gonna say npin init -y and

30
00:02:02.250 --> 00:02:06.570
we're gonna install a few things in here.

31
00:02:08.330 --> 00:02:12.295
We're gonna npm install

32
00:02:12.295 --> 00:02:19.849
@modelcontextprotocol/sdk@1.16 and

33
00:02:19.849 --> 00:02:23.818
zod@3.25.76.

34
00:02:26.654 --> 00:02:32.050
&gt;&gt; Brian Holt: Okay, you should get some

35
00:02:32.050 --> 00:02:36.470
packages with that.

36
00:02:38.070 --> 00:02:43.390
And then here in my MCP I'm just
going to create a new file here.

37
00:02:43.390 --> 00:02:46.560
We're gonna call it like main or
something like that.

38
00:02:46.560 --> 00:02:50.865
Yeah, I called it main.js.

39
00:02:53.018 --> 00:02:53.680
&gt;&gt; Brian Holt: Okay?

40
00:02:53.680 --> 00:02:56.000
And a lot of this is gonna
feel pretty similar.

41
00:02:58.240 --> 00:03:00.040
I'll go ahead and
code this along with you.

42
00:03:00.040 --> 00:03:03.404
But like really wouldn't be too
ill served by just copying and

43
00:03:03.404 --> 00:03:06.000
pasting this as well if
you don't want to do it.

44
00:03:06.000 --> 00:03:12.744
Modelcontext/sdk/server/mcp.js and

45
00:03:12.744 --> 00:03:19.487
we're gonna import stdioServerTransport

46
00:03:19.487 --> 00:03:28.970
from
@modelcontextprotocol/sdk/server/stdio.js.

47
00:03:31.808 --> 00:03:34.250
We need to get an import SQLite 3 as well.

48
00:03:34.250 --> 00:03:38.213
So you have to go install that.

49
00:03:39.875 --> 00:03:43.125
&gt;&gt; Brian Holt: Import path from path and

50
00:03:43.125 --> 00:03:48.399
import file to URLPath from URL, okay?

51
00:03:48.399 --> 00:03:54.260
I'm just going to check
what version of MCP.

52
00:03:55.700 --> 00:03:57.540
This one, 517.

53
00:03:59.780 --> 00:04:06.138
Okay, so in here we're going to say npm
install SQLite 3@blah5.1.7 as well.

54
00:04:15.800 --> 00:04:17.120
&gt;&gt; Brian Holt: So I chose SQLite here.

55
00:04:17.120 --> 00:04:19.160
It's funny because I work at
a postgres company, right?

56
00:04:19.160 --> 00:04:21.880
But it's really easy to just
do all this stuff locally.

57
00:04:26.040 --> 00:04:28.920
Okay, so we're here in main.

58
00:04:28.920 --> 00:04:29.640
Keep going.

59
00:04:29.640 --> 00:04:34.970
From here we're going to say const
server equals new MCP server.

60
00:04:36.650 --> 00:04:41.876
We'll call this one like
the issue server name

61
00:04:41.876 --> 00:04:46.970
issue server and the version will be 1.0.

62
00:04:49.690 --> 00:04:55.130
And then here last time we were
saying register tool, right?

63
00:04:55.130 --> 00:04:59.796
Server.register, but
we're going to do register resource.

64
00:05:06.140 --> 00:05:13.180
&gt;&gt; Brian Holt: Okay, and then we're gonna
give it a title of Database Schema.

65
00:05:15.660 --> 00:05:19.555
One thing, if you ask like Claude
code to generate this for you,

66
00:05:19.555 --> 00:05:24.246
which certainly was how I started,
it's almost always going to generate for

67
00:05:24.246 --> 00:05:30.050
you a resource template, because that is
generally the better way of doing this.

68
00:05:30.050 --> 00:05:32.530
However, Claude desktop
doesn't support it, right?

69
00:05:32.530 --> 00:05:34.189
Neither does Tome, right?

70
00:05:34.189 --> 00:05:38.295
And so it's like Whack a mole game
of what are my tools support?

71
00:05:38.295 --> 00:05:39.748
What does my client support?

72
00:05:39.748 --> 00:05:41.570
What am I trying to support?

73
00:05:41.570 --> 00:05:44.610
So in this particular case, we have to
do it with just a normal resource, okay?

74
00:05:47.650 --> 00:05:49.730
Then you have to give it this schema.

75
00:05:51.010 --> 00:05:52.610
This is a protocol.

76
00:05:52.610 --> 00:05:56.315
I'm calling the schema cuz
it's the database schema, but

77
00:05:56.315 --> 00:05:58.850
you could call this whatever, right?

78
00:05:58.850 --> 00:06:01.410
It's just whatever you choose
to call it the protocol.

79
00:06:04.210 --> 00:06:08.858
Because this is how internally it's going
to refer to as this like unique identifier

80
00:06:08.858 --> 00:06:13.250
of like, on this protocol, I can access
these particular resources, right?

81
00:06:13.250 --> 00:06:15.970
It's treating it like a URL essentially.

82
00:06:17.010 --> 00:06:20.332
So there's nothing magical
about the word schema here,

83
00:06:20.332 --> 00:06:22.902
I just wanted it to be
very clear about that.

84
00:06:22.902 --> 00:06:25.880
And then I'm just gonna give it
this schema for the database.

85
00:06:27.080 --> 00:06:29.042
We're not going to give
it any additional URL, so

86
00:06:29.042 --> 00:06:31.676
it's actually really nonsensical
what we choose to call it here.

87
00:06:35.240 --> 00:06:43.640
&gt;&gt; Brian Holt: Okay, and then we're
gonna say the title is Database Schema.

88
00:06:46.450 --> 00:06:52.898
The description is SQLite schema for

89
00:06:52.898 --> 00:06:56.850
the issues database.

90
00:06:58.530 --> 00:07:01.244
And the MIME type is text/plain,

91
00:07:01.244 --> 00:07:06.120
which is just like you're telling
the LM how to interpret it.

92
00:07:10.530 --> 00:07:14.938
&gt;&gt; Brian Holt: Okay, and
then we're going to say async, and

93
00:07:14.938 --> 00:07:20.830
here we're just going to do
the actual whatever we want to do.

94
00:07:20.830 --> 00:07:23.950
In our case, we're just going to request
from the database what we actually want.

95
00:07:23.950 --> 00:07:29.516
So, here we're gonna say const

96
00:07:29.516 --> 00:07:35.288
db = new sqlite3.Database and

97
00:07:35.288 --> 00:07:41.270
we're gonna give it the dbPath.

98
00:07:41.270 --> 00:07:42.390
Did I do all that magic?

99
00:07:42.390 --> 00:07:47.465
No, we'll do that up
here in just a second and

100
00:07:47.465 --> 00:07:51.750
we'll do sqlite3.open readonly.

101
00:07:53.670 --> 00:07:57.861
So we were talking about this earlier,
not that this really matters here,

102
00:07:57.861 --> 00:08:00.730
because the LLM won't
really have access to this.

103
00:08:00.730 --> 00:08:04.612
But generally speaking,
when you're working with agents and LLMs,

104
00:08:04.612 --> 00:08:09.110
if it should only be read only, please
mark your connections as being read only.

105
00:08:10.880 --> 00:08:14.555
So now if for whatever reason this
gets like repurposed to be a tool or

106
00:08:14.555 --> 00:08:19.131
something like that, where, the LLM could
have more influence of how this is used,

107
00:08:19.131 --> 00:08:23.578
or you're passing an SQL or something like
that, you're still stuck in read only

108
00:08:23.578 --> 00:08:27.520
mode, which is just good for
not dropping databases.

109
00:08:27.520 --> 00:08:32.210
Let's go define DBPath up here,

110
00:08:32.210 --> 00:08:36.406
because I did not do that yet.

111
00:08:38.269 --> 00:08:42.441
&gt;&gt; Brian Holt: I've written so much note
over the years that I'm just used to

112
00:08:42.441 --> 00:08:47.095
dirname being available, but
it's not available in ES modules, so

113
00:08:47.095 --> 00:08:52.009
you have to write this special
ritual incantation to make it work.

114
00:08:52.009 --> 00:08:59.129
Or normally I just ask, why is this
on son of four, okay, there we go.

115
00:08:59.129 --> 00:09:01.329
Normally I just ask my agent to do it for
me.

116
00:09:01.329 --> 00:09:05.716
So define_dir name for

117
00:09:05.716 --> 00:09:09.230
an es module file.

118
00:09:10.510 --> 00:09:11.869
Because I can never
remember how to do this,

119
00:09:11.869 --> 00:09:13.390
but it's like the same
thing every single time.

120
00:09:13.390 --> 00:09:14.350
It's exactly this.

121
00:09:16.670 --> 00:09:20.230
Const file name = file to path,
which is why we imported that up there.

122
00:09:20.230 --> 00:09:24.190
And then const_dirname =
path.dirname(-- file name).

123
00:09:24.190 --> 00:09:28.150
And now this is dirname as it would
be defined in a common JS module.

124
00:09:28.150 --> 00:09:30.820
If none of that makes any sense to you,
just don't worry about it.

125
00:09:30.820 --> 00:09:33.100
Bless you, sweet child,
that you never have to know this, [LAUGH].

126
00:09:36.300 --> 00:09:38.060
Okay, so now dbpath is.

127
00:09:39.144 --> 00:09:41.340
And we still have to define
what dbpath is, right?

128
00:09:43.180 --> 00:09:45.020
Where do I define what DBPATH is?

129
00:09:46.700 --> 00:09:47.460
Yeah, right there.

130
00:09:47.460 --> 00:09:51.804
Okay, const dbPath is

131
00:09:51.804 --> 00:09:59.353
assigned path.join(--dirname,

132
00:09:59.353 --> 00:10:06.450
..backend, database.sqlite.

133
00:10:07.970 --> 00:10:10.450
We're in this MyMCP directory we want.

134
00:10:10.450 --> 00:10:14.290
In the backend, there's this database
file that we want to reference.

135
00:10:15.410 --> 00:10:19.550
So it is the dirname, which is where
this is being run up one directory in

136
00:10:19.550 --> 00:10:22.970
the backend directory, database.sqlite.

137
00:10:22.970 --> 00:10:26.124
Okay, and
then we're going to use this DB but

138
00:10:26.124 --> 00:10:31.530
we want to wrap this all in a promise
just so that this all resolves correctly.

139
00:10:33.450 --> 00:10:35.170
So we're just going to do that.

140
00:10:35.170 --> 00:10:36.890
I think that's going to be
much easier if we do this.

141
00:10:36.890 --> 00:10:41.199
Const schema equals await,

142
00:10:41.199 --> 00:10:46.410
new promise, resolve, reject.

143
00:10:50.620 --> 00:10:53.820
Okay, and then I'm just going
to move this DB column to here,

144
00:10:53.820 --> 00:10:56.540
inside of this schema
promise that we just created.

145
00:10:59.100 --> 00:11:03.466
And because we're awaiting this promise
here, and this is an async file,

146
00:11:03.466 --> 00:11:05.980
everything should just work out, right?

147
00:11:05.980 --> 00:11:08.700
Whatever this ends up
returning should work.

148
00:11:08.700 --> 00:11:10.660
And this probably should be an async.

149
00:11:10.660 --> 00:11:11.180
Is it?

150
00:11:11.180 --> 00:11:12.980
No, no, stop.

151
00:11:12.980 --> 00:11:17.896
Okay, we're going to say db.all, and

152
00:11:17.896 --> 00:11:26.580
we're just going to write a query to
say select SQL from SQLite master.

153
00:11:27.860 --> 00:11:34.056
This is a little SQLite Blackmagic

154
00:11:34.056 --> 00:11:38.970
where type equals table and

155
00:11:38.970 --> 00:11:44.750
SQL is not null, order by name.

156
00:11:46.430 --> 00:11:52.430
Oops, other way around,
order by name, there we go.

157
00:11:54.830 --> 00:11:58.239
This is the way that you just dump all
the schema out of a SQLite database.

158
00:12:03.960 --> 00:12:06.120
&gt;&gt; Brian Holt: Okay, it's gonna do that.

159
00:12:06.120 --> 00:12:10.090
It'll give you a callback error rows and

160
00:12:10.090 --> 00:12:15.240
then you say db.close
because we're done with it.

161
00:12:17.400 --> 00:12:20.462
If error, reject, error.

162
00:12:29.730 --> 00:12:35.361
&gt;&gt; Brian Holt: I guess
let's be less clever about

163
00:12:35.361 --> 00:12:40.805
this else, resolve rows.map.

164
00:12:48.690 --> 00:12:52.003
&gt;&gt; Brian Holt: Again,
we're kinda just formatting this to

165
00:12:52.003 --> 00:12:56.283
make it a little bit easier for
the agent to read or the LLM.

166
00:13:01.686 --> 00:13:02.998
&gt;&gt; Brian Holt: And row.sql.

167
00:13:10.340 --> 00:13:15.780
&gt;&gt; Brian Holt: And then here we will
join with a new line character.

168
00:13:19.060 --> 00:13:20.820
Where am I messed up here?

169
00:13:20.820 --> 00:13:23.900
&gt;&gt; Speaker 2: It's up on line 17 or
something, 16.

170
00:13:23.900 --> 00:13:24.961
&gt;&gt; Brian Holt: All right, there.

171
00:13:30.282 --> 00:13:33.220
&gt;&gt; Brian Holt: That's-
&gt;&gt; Speaker 2: Should just be a string.

172
00:13:33.220 --> 00:13:35.020
&gt;&gt; Brian Holt: Yeah,
it should just be a string, right?

173
00:13:35.020 --> 00:13:36.020
Database schema.

174
00:13:36.020 --> 00:13:37.500
That's really what I wanted to hear.

175
00:13:37.500 --> 00:13:40.012
Just something like this, yep.

176
00:13:45.020 --> 00:13:49.720
&gt;&gt; Brian Holt: So, this is a little
opaque here, but essentially this

177
00:13:49.720 --> 00:13:54.620
line is going to dump the entire
schema from the database.

178
00:13:55.900 --> 00:14:00.093
If there's an error, it'll call reject,
which will fail the entire promise here,

179
00:14:00.093 --> 00:14:01.740
this promise.

180
00:14:01.740 --> 00:14:05.077
Otherwise it's just going
to format this nicely so

181
00:14:05.077 --> 00:14:07.660
it can be given back to the agent.

182
00:14:07.660 --> 00:14:09.971
That's the entire thing.

183
00:14:11.223 --> 00:14:16.410
&gt;&gt; Brian Holt: Not a database class, so
I'm not gonna dwell too much on this.

184
00:14:16.410 --> 00:14:20.810
And again, feel free to just copy and
paste that if that's too opaque for you.

185
00:14:22.090 --> 00:14:24.532
All right, so at the end of this,

186
00:14:24.532 --> 00:14:28.970
this is being called resolve
with that string, right?

187
00:14:28.970 --> 00:14:33.570
So then schema here will be the results of
whatever resolved is called with, right?

188
00:14:33.570 --> 00:14:38.410
So now schema is that string, make sense?

189
00:14:39.530 --> 00:14:42.454
Or if it's not, then there was an error
and it rejects and everything blows up and

190
00:14:42.454 --> 00:14:43.573
everybody dies, it's fine.

191
00:14:43.573 --> 00:14:48.398
Okay, so now at the end here,

192
00:14:48.398 --> 00:14:53.416
we're gonna call return, and

193
00:14:53.416 --> 00:14:58.050
it's gonna have contents.

194
00:14:58.050 --> 00:15:00.770
This should look very familiar
from what we did last time.

195
00:15:00.770 --> 00:15:07.602
And it's gonna have essentially a URI: so
again, the URI is this up here,

196
00:15:07.602 --> 00:15:12.390
and it's letting Claude
know how it can cache this.

197
00:15:15.350 --> 00:15:18.230
So it'll just be this, right?

198
00:15:18.230 --> 00:15:19.757
It'll cache it with that as the cache key.

199
00:15:23.750 --> 00:15:30.472
&gt;&gt; Brian Holt: MimeType
as being text/plain,

200
00:15:30.472 --> 00:15:38.240
and then text will be schema, okay?

201
00:15:38.240 --> 00:15:43.711
Const transport = new
standard IO transport and

202
00:15:43.711 --> 00:15:50.517
await server connect transport,
which we did that before,

203
00:15:50.517 --> 00:15:54.800
so this should feel pretty familiar.

204
00:15:57.600 --> 00:15:59.637
Okay, good so far?

205
00:15:59.637 --> 00:16:04.730
So this takes this entire
database right here.

206
00:16:08.250 --> 00:16:11.530
Obviously, I can't open it
cuz it's a SQLite file.

207
00:16:12.890 --> 00:16:15.130
I probably can open it,
I think I have an extension.

208
00:16:15.130 --> 00:16:16.411
Anyway, it doesn't matter,

209
00:16:16.411 --> 00:16:19.530
it's just a big SQLite database with
a bunch of issues being tracked in it.

210
00:16:22.010 --> 00:16:24.960
And then it's dumping that out and
returning as a resource.

