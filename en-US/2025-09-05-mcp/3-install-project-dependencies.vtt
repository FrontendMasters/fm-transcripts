WEBVTT

1
00:00:00.320 --> 00:00:04.281
&gt;&gt; Brian Holt: We are gonna build our
first MCP server and you're gonna find out

2
00:00:04.281 --> 00:00:09.520
very quickly that this is actually much
more simple than I anticipated, right?

3
00:00:09.520 --> 00:00:10.320
I don't know about you.

4
00:00:10.320 --> 00:00:14.319
It's like one of those things I came into
it thinking I'm about to summit this

5
00:00:14.319 --> 00:00:15.684
mountain of complexity.

6
00:00:15.684 --> 00:00:17.240
And then you get into it like,
what the hell was this?

7
00:00:17.240 --> 00:00:19.200
Why was I so afraid of this?

8
00:00:19.200 --> 00:00:23.139
Containers was definitely one of those
as well, where I came in thinking I

9
00:00:23.139 --> 00:00:26.390
have to put on my Linux hacker hat and
had to enter the matrix.

10
00:00:26.390 --> 00:00:28.095
In reality, it was just like a couple
of commands that you run and

11
00:00:28.095 --> 00:00:28.830
you're like, okay.

12
00:00:28.830 --> 00:00:30.710
I guess that's what a container is, right?

13
00:00:30.710 --> 00:00:32.910
It's a zip and a couple of Linux commands.

14
00:00:33.950 --> 00:00:35.070
Same thing here.

15
00:00:35.070 --> 00:00:37.150
It's kind of just a dumb server.

16
00:00:37.150 --> 00:00:39.310
That's really what an MCP server is.

17
00:00:39.310 --> 00:00:43.230
It seems more complicated
than it should be.

18
00:00:43.230 --> 00:00:46.590
So there are three ways
currently to make an MCP server.

19
00:00:47.950 --> 00:00:51.560
There is the old way, which is not.

20
00:00:51.560 --> 00:00:53.000
That one is still useful.

21
00:00:53.000 --> 00:00:57.080
You still use the old way,
which is the standard IO way of doing it.

22
00:00:57.080 --> 00:01:02.635
There is the SSE way,
which was introduced in November

23
00:01:02.635 --> 00:01:08.280
of 2024 and deprecated in March of 2025.

24
00:01:08.280 --> 00:01:11.040
So had a very short life,
but they're still around.

25
00:01:11.040 --> 00:01:12.600
There's a bunch of them that still exist.

26
00:01:12.600 --> 00:01:16.720
We still support ours at Neon, so
I will tell you what they are.

27
00:01:16.720 --> 00:01:19.470
But we're not going to build one today
because I don't really see the point.

28
00:01:19.470 --> 00:01:23.310
Because then we came out with
streamable HTTP which is like the.

29
00:01:23.310 --> 00:01:26.845
I have a remote MCP server, so
I want to call Neon remotely,

30
00:01:26.845 --> 00:01:30.190
as opposed to running like
Neon's MCP server locally.

31
00:01:31.630 --> 00:01:32.910
We'll build one of those as well.

32
00:01:34.909 --> 00:01:38.872
So we keep the standard IOA one around
because sometimes you still want something

33
00:01:38.872 --> 00:01:40.030
to happen locally.

34
00:01:40.030 --> 00:01:44.406
If you had a MCP server that you
wanted to create and delete files, for

35
00:01:44.406 --> 00:01:47.230
example, you can't do that remotely.

36
00:01:47.230 --> 00:01:49.259
Something has to be running
on your computer to do that,

37
00:01:49.259 --> 00:01:52.030
has privileges to be able to do that,
which is why this will never go away.

38
00:01:52.030 --> 00:01:56.030
Or at least some version of a local
MCP server will never go away.

39
00:01:57.150 --> 00:01:58.030
Does that make sense?

40
00:01:59.470 --> 00:02:02.893
If you're not familiar with standard IO,

41
00:02:02.893 --> 00:02:08.990
that's like a Linux term of it's how
things get input into a Linux process.

42
00:02:08.990 --> 00:02:10.150
It's how things come out of it.

43
00:02:10.150 --> 00:02:12.750
It's how errors are shown.

44
00:02:14.090 --> 00:02:17.572
There is a Linux course by a dashing
gentleman on frontend Masters that you

45
00:02:17.572 --> 00:02:20.730
can also catch if you're interested
in learning more about that.

46
00:02:22.490 --> 00:02:25.690
It's from me, if that was not so obvious.

47
00:02:27.850 --> 00:02:30.232
Complete intro to Linux and
the command line.

48
00:02:30.232 --> 00:02:32.291
And we talk a lot about standard IO,

49
00:02:32.291 --> 00:02:36.730
so that actually would be very
helpful in this particular case.

50
00:02:36.730 --> 00:02:40.470
But in theory, it's really just like you
are passing messages into a process and

51
00:02:40.470 --> 00:02:42.640
you're getting information back out of it.

52
00:02:42.640 --> 00:02:45.760
That's the whole gist of
what standard IO means here.

53
00:02:47.840 --> 00:02:51.080
So you can kind of treat
it like a web server.

54
00:02:51.080 --> 00:02:54.476
I think most of us,
if you're joining us on frontend Masters,

55
00:02:54.476 --> 00:02:59.040
learning about MCP servers, you probably
have used some sort of web server before.

56
00:02:59.040 --> 00:03:06.810
Whether that's Next JS or Express JS or
Fast API or something like that.

57
00:03:06.810 --> 00:03:07.850
Same idea.

58
00:03:07.850 --> 00:03:11.992
But instead of having an HTTP
client connect, send a message and

59
00:03:11.992 --> 00:03:17.132
then disconnect, this is just going to be
like passing things into a process and

60
00:03:17.132 --> 00:03:21.450
getting them back out of it via
Linux piping instead of using HTTP.

61
00:03:22.650 --> 00:03:24.380
Does that make sense?

62
00:03:24.380 --> 00:03:26.570
You'll see here in just a second.

63
00:03:26.570 --> 00:03:31.012
We're gonna be using this SDK here
called @modelcontextprotocol.

64
00:03:31.012 --> 00:03:34.423
Obviously that's the official one /SDK.

65
00:03:34.423 --> 00:03:39.851
I will just warn you in advance, this was
not packaged by a Node person, so you kind

66
00:03:39.851 --> 00:03:45.297
of have to reach directly into it and find
the correct JavaScript files to import.

67
00:03:45.297 --> 00:03:48.850
So I'm sure they'll fix this someday.

68
00:03:48.850 --> 00:03:50.810
Again, it's all open source,
so go fix it yourselves.

69
00:03:52.330 --> 00:03:54.810
You can see I'm complaining about it and
I haven't fixed it myself.

70
00:03:54.810 --> 00:04:00.869
So yeah, I'm in a glass house and
I'm definitely casting stones.

71
00:04:00.869 --> 00:04:05.150
So all this to say,
let's go make some MCP server stuff.

72
00:04:05.150 --> 00:04:06.390
So open your terminal here.

73
00:04:07.590 --> 00:04:09.030
I'm just gonna go to my desktop.

74
00:04:10.550 --> 00:04:11.870
You don't have to do this
in the terminal as well.

75
00:04:11.870 --> 00:04:13.510
You can just create
a folder on your desktop.

76
00:04:14.950 --> 00:04:16.390
We'll call it MyMCP.

77
00:04:18.630 --> 00:04:21.670
And open this in your
favorite coding apparatus.

78
00:04:21.670 --> 00:04:23.910
Mine's gonna be VS code
because I'm broken.

79
00:04:29.360 --> 00:04:30.240
Minimize that one.

80
00:04:31.600 --> 00:04:33.240
I don't want agent mode at the moment.

81
00:04:33.240 --> 00:04:36.280
You could totally build this with
a cursor or something like that.

82
00:04:36.280 --> 00:04:37.360
I have no problem with that.

83
00:04:37.360 --> 00:04:39.760
Again, the code here is
not terribly interesting.

84
00:04:43.040 --> 00:04:45.690
So let's go ahead.

85
00:04:45.690 --> 00:04:50.890
And we're gonna npm init.

86
00:04:50.890 --> 00:04:54.970
I'm just gonna put -Y, which just means
don't ask me any questions, just do it.

87
00:04:56.970 --> 00:04:57.690
Actually, you know what?

88
00:04:57.690 --> 00:04:58.970
This would be a good way.

89
00:04:58.970 --> 00:05:01.005
The way this is receiving
all this information,

90
00:05:01.005 --> 00:05:02.650
this would be considered standard IO.

91
00:05:05.690 --> 00:05:07.050
The fact that I'm hitting enter here.

92
00:05:07.050 --> 00:05:09.290
That's all going in through
standard IO at the moment.

93
00:05:10.810 --> 00:05:14.890
Too many temp questions, okay,
now I'm going to put -Y.

94
00:05:14.890 --> 00:05:15.530
There we go.

95
00:05:18.260 --> 00:05:21.780
So now I have a package
JSON I'm going to npm install.

96
00:05:24.020 --> 00:05:31.885
We're going to do
odelcontext protocol SDK and

97
00:05:31.885 --> 00:05:38.740
I'm going to pin this version to one.

98
00:05:38.740 --> 00:05:41.220
I think I have 16 in my course.

99
00:05:42.760 --> 00:05:44.920
I think 18 is the most recent version.

100
00:05:44.920 --> 00:05:46.600
Let's YOLO and try 18.

101
00:05:48.280 --> 00:05:50.600
Nope, 16.

102
00:05:51.880 --> 00:05:52.840
Okay, 16.

103
00:05:56.120 --> 00:05:57.227
By the time that you watch this,

104
00:05:57.227 --> 00:05:59.480
I guarantee you they will have
a new version of this out.

105
00:05:59.480 --> 00:06:01.720
But it'll break all my code, right?

106
00:06:01.720 --> 00:06:05.327
So if you're watching this,
just follow along with 1.16 and

107
00:06:05.327 --> 00:06:08.750
then ask your agent to update it
to to the most recent version.

108
00:06:08.750 --> 00:06:09.950
That's probably what I would do.

109
00:06:13.470 --> 00:06:17.150
Okay, so now if we look at our.

110
00:06:17.150 --> 00:06:21.470
We have a package package lock and
some node modules.

111
00:06:21.470 --> 00:06:24.990
And now we can open this in VS code and
get started with it.

112
00:06:26.110 --> 00:06:29.094
I'm going to create a new file here and

113
00:06:29.094 --> 00:06:34.230
I'm just going to call it something
like MCP js not a typescript.

114
00:06:34.230 --> 00:06:37.995
Course we're not going to write this
in typescript, but by all means,

115
00:06:37.995 --> 00:06:40.470
agents do really well with TypeScript.

116
00:06:40.470 --> 00:06:42.574
So if you are working with an agent,
by all means,

117
00:06:42.574 --> 00:06:44.390
you probably should be using TypeScript.

118
00:06:44.390 --> 00:06:48.550
But I find I just confused too many
people in these courses otherwise.

119
00:06:48.550 --> 00:06:51.030
All right, we're going to import
a couple of things up here at the top.

120
00:06:51.030 --> 00:06:54.230
We're going to McpServer, From.

121
00:06:58.230 --> 00:06:59.470
This is going to be annoying.

122
00:06:59.470 --> 00:07:04.767
Model Context Protocol SDK server MCP JS I

123
00:07:04.767 --> 00:07:10.830
told you this was not
packaged by a node person.

124
00:07:13.310 --> 00:07:18.557
import (StdIoServerTransport) from

125
00:07:18.557 --> 00:07:24.350
@modelcontextprotocol/sdk/server.

126
00:07:24.350 --> 00:07:26.110
Yeah, that one actually is correct.

127
00:07:29.270 --> 00:07:34.990
sdk/server/stdio.js, we have
to npm install ZOD as well.

128
00:07:34.990 --> 00:07:40.912
So you're going to import ( z ) from Zod.

129
00:07:40.912 --> 00:07:47.131
If you're not familiar with Zod,
Zod is a very common package for

130
00:07:47.131 --> 00:07:51.670
basically defining what
type of something is.

131
00:07:51.670 --> 00:07:53.150
And it's like a test to make sure.

132
00:07:53.150 --> 00:07:56.036
It's like this has to be an integer,
and if it's not an integer,

133
00:07:56.036 --> 00:07:58.094
then you're going to throw an error,
right?

134
00:07:58.094 --> 00:08:02.710
If you ever used Joy,
that was like a previous version of this.

135
00:08:02.710 --> 00:08:04.988
Zod is just like the more common one, and

136
00:08:04.988 --> 00:08:08.950
it's one that the MCP server community
has kind of adopted full sail.

137
00:08:12.550 --> 00:08:13.670
Yeah, who else?

138
00:08:13.670 --> 00:08:17.030
OpenAI was like one of the first
ones to like really adopt Zod.

139
00:08:17.030 --> 00:08:18.870
So we have to go install Zod as well.

140
00:08:18.870 --> 00:08:20.110
We'll just come back to here.

141
00:08:20.110 --> 00:08:25.158
And we're also going to
npm install ZOD @ that

142
00:08:25.158 --> 00:08:31.740
version that I grabbed, which is 3.25.76.

143
00:08:31.740 --> 00:08:37.540
And probably most importantly here, the
MCP server package depends on Zod, right?

144
00:08:37.540 --> 00:08:38.940
Like, you have to have it.

