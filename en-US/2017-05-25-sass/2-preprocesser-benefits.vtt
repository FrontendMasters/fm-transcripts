WEBVTT

1
00:00:00.480 --> 00:00:04.110
&gt;&gt; Mike: With that let's go into
talking about preprocessors.

2
00:00:04.110 --> 00:00:05.350
What is a preprocessor?

3
00:00:05.350 --> 00:00:07.100
Well, Sass is one of them.

4
00:00:07.100 --> 00:00:12.640
These are things that, are tools that
allow us to define something that

5
00:00:12.640 --> 00:00:15.190
defines similar concepts to CSS.

6
00:00:15.190 --> 00:00:17.500
But what we're writing is not CSS.

7
00:00:17.500 --> 00:00:20.530
It's often sort of an abstraction of it.

8
00:00:20.530 --> 00:00:23.870
Something that gives us some
things that CSS is missing.

9
00:00:25.280 --> 00:00:30.060
And three popular examples here are Less,
Sass and stylist.

10
00:00:31.090 --> 00:00:35.810
All of these compile to CSS meaning you
put them through a tool of some sort and

11
00:00:35.810 --> 00:00:39.410
they will return something
a brother can understand.

12
00:00:39.410 --> 00:00:43.520
Often times these things are like,
you'll run a command and you'll say,

13
00:00:43.520 --> 00:00:47.280
here's my input file, here's where I
would like you to put my output file, and

14
00:00:47.280 --> 00:00:49.070
you will get CSS coming out.

15
00:00:50.300 --> 00:00:53.590
So, these all involve variables,

16
00:00:53.590 --> 00:00:57.510
these all involve the ability
to compose rules together.

17
00:00:57.510 --> 00:01:00.880
Meaning you can define
something in one place and

18
00:01:00.880 --> 00:01:06.240
then bring that style into two different
other styles or multiple other styles.

19
00:01:06.240 --> 00:01:09.400
You can define things like mix ins,
which we'll get into later,

20
00:01:10.640 --> 00:01:14.610
they're almost like functions that
return CSS if that makes sense.

21
00:01:15.970 --> 00:01:21.430
And because these are relatively
simple in terms of

22
00:01:21.430 --> 00:01:25.510
developer tooling, it's just sort
of one file in one file out.

23
00:01:25.510 --> 00:01:28.550
Often times they're pretty
easy to setup in that,

24
00:01:28.550 --> 00:01:31.900
in comparison to other things, right?

25
00:01:31.900 --> 00:01:36.030
It's often like a ten minute job or
less to get Sass or Less or

26
00:01:36.030 --> 00:01:42.331
Stylus working with your project.

27
00:01:42.331 --> 00:01:45.050
So why would we want to use one?

28
00:01:45.050 --> 00:01:49.900
And I'd like to sort of reword
this a little on the fly and

29
00:01:49.900 --> 00:01:53.280
say, why would we wanna use this always?

30
00:01:53.280 --> 00:01:56.800
Why would you wanna reach for
using a preprocessor, even for

31
00:01:56.800 --> 00:01:59.540
the smallest project
that you have to tackle?

32
00:02:00.540 --> 00:02:06.650
Well first, it gives us stuff that should
have been in CSS in the first place.

33
00:02:06.650 --> 00:02:11.472
The idea of having a variable is pretty
important right, because we often

34
00:02:11.472 --> 00:02:16.392
times we are repeating things like
colors and paddings all over the place.

35
00:02:16.392 --> 00:02:20.344
You end up having to almost get like
a pocket calculator out in order to define

36
00:02:20.344 --> 00:02:21.840
what should this margin be?

37
00:02:21.840 --> 00:02:23.910
Because I've got a side
bar that's this width, and

38
00:02:23.910 --> 00:02:28.790
then some padding on the side of it,
and all of that,

39
00:02:28.790 --> 00:02:33.750
all of those expressions, those should be
built into the way we define our styles.

40
00:02:33.750 --> 00:02:37.741
They should not be things that we have
to do as developers in our brains.

41
00:02:39.560 --> 00:02:42.860
&gt;&gt; Mike: You will find that it's
easier to maintain your styles.

42
00:02:42.860 --> 00:02:46.180
It is harder to make subtle mistakes,
right?

43
00:02:46.180 --> 00:02:50.150
Like misspellings and highly
repetitive CSS are very, very common.

44
00:02:51.800 --> 00:02:53.470
It's easier to keep your styles organized.

45
00:02:53.470 --> 00:02:56.940
So I heard some people in the room,
they use Angular 2 or

46
00:02:56.940 --> 00:03:00.770
other component based libraries,
like Ember.

47
00:03:00.770 --> 00:03:05.110
You want to kind of say,
these are the styles that are defined for

48
00:03:05.110 --> 00:03:07.810
this component, and
they exist in one file and

49
00:03:07.810 --> 00:03:12.520
they don't overlap or
interact with styles for other components.

50
00:03:12.520 --> 00:03:15.300
So we get the ability to
kind of break our code up,

51
00:03:15.300 --> 00:03:20.140
in a way that makes sense to us as
developers, without imposing a cost

52
00:03:20.140 --> 00:03:23.970
on our users enforcing them to
download a whole bunch of files.

53
00:03:25.310 --> 00:03:28.688
And as I said,
it's really easy to set this up and

54
00:03:28.688 --> 00:03:34.600
oftentimes we even get libraries
like sets of mixens and

55
00:03:34.600 --> 00:03:39.260
variables that already come,
set up for Sass or for Less.

56
00:03:39.260 --> 00:03:40.790
So Bootstrap's a great example.

57
00:03:40.790 --> 00:03:44.600
Bootstrap 3, it used Less.

58
00:03:44.600 --> 00:03:46.880
Bootstrap 4 uses Sass.

59
00:03:46.880 --> 00:03:51.700
And the idea here is you could
bring this in as a dependency and

60
00:03:51.700 --> 00:03:55.510
customize some of the variables that
define what Bootstrap looks like.

61
00:03:59.250 --> 00:04:03.380
Rather than superseding
the Bootstrap CSS that you bring in,

62
00:04:03.380 --> 00:04:06.840
and overriding it you
can sort of tune it so

63
00:04:06.840 --> 00:04:10.060
that it's the way you want it to look in
the first place, which is a lot cleaner,

64
00:04:10.060 --> 00:04:14.140
it results in a lot less code
being sent over to your users.

65
00:04:14.140 --> 00:04:16.520
Just better and
easier to maintain overall.

66
00:04:17.810 --> 00:04:21.290
So, lots of good options for
using pre-processors.

67
00:04:21.290 --> 00:04:25.020
Today we're going to be
focusing entirely on Sass.

