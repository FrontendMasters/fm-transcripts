WEBVTT

1
00:00:00.130 --> 00:00:03.110
&gt;&gt; Mike North: Next we're
gonna zoom way back up.

2
00:00:03.110 --> 00:00:05.674
So we've learned a lot about SASS so
far, and

3
00:00:05.674 --> 00:00:08.721
now comes the section we're
all looking forward to.

4
00:00:08.721 --> 00:00:12.400
[LAUGH] We're going to talk
a little bit about BEM.

5
00:00:12.400 --> 00:00:15.640
So here at a high level
is what BEM is all about.

6
00:00:17.850 --> 00:00:22.740
It involves defining three
types of CSS classes.

7
00:00:22.740 --> 00:00:25.100
The first is a block.

8
00:00:25.100 --> 00:00:29.590
And how you know something is
a block is that it is a standalone

9
00:00:29.590 --> 00:00:33.195
entity in and of itself.

10
00:00:33.195 --> 00:00:37.370
In frontend development,
this would probably be a component, right?

11
00:00:37.370 --> 00:00:38.930
This would be a component.

12
00:00:38.930 --> 00:00:43.415
Here are examples like a header, the
container that we've been dealing with,

13
00:00:43.415 --> 00:00:46.550
wherewe have sort of layout
expressed within that container.

14
00:00:46.550 --> 00:00:51.220
A menu which would have menu items within
it, a checkbox, input, button and so on.

15
00:00:52.520 --> 00:00:56.990
So elements are things that exist within

16
00:00:56.990 --> 00:01:00.320
the block that don't really
have much meaning on their own.

17
00:01:00.320 --> 00:01:04.650
So if we have a right-click menu, one of
those menu items that doesn't really make

18
00:01:04.650 --> 00:01:08.340
sense to use like in
the context of other things.

19
00:01:08.340 --> 00:01:11.410
You wouldn't wanna use that
with a button or to put it,

20
00:01:11.410 --> 00:01:15.619
you might have something that looks
similar and like a drop-down,

21
00:01:15.619 --> 00:01:19.580
but that is sort of an internal
concept of the right-click menu.

22
00:01:20.670 --> 00:01:24.160
So here we've got a menu-item,
a list-item,

23
00:01:24.160 --> 00:01:29.380
a caption underneath a checkbox,
the title piece of the header component.

24
00:01:29.380 --> 00:01:32.640
These are sort of component internals.

25
00:01:32.640 --> 00:01:34.000
Those are what elements end up being.

26
00:01:35.460 --> 00:01:37.220
And then finally we've got modifiers.

27
00:01:37.220 --> 00:01:38.740
We've been using these today.

28
00:01:38.740 --> 00:01:42.760
Any of those little classes that you
add to buttons to change their colors,

29
00:01:42.760 --> 00:01:44.808
those are great examples of a modifier.

30
00:01:44.808 --> 00:01:47.600
And that right-nav class that
we added to the container,

31
00:01:47.600 --> 00:01:49.780
that's another great
example of a modifier.

32
00:01:49.780 --> 00:01:53.220
Where you kind of decorate
a component with this thing, and

33
00:01:53.220 --> 00:01:59.700
it's almost a flag that alters the
behavior or the look and feel in some way.

34
00:01:59.700 --> 00:02:02.790
And so here, examples are whether
something's highlighted or

35
00:02:02.790 --> 00:02:06.040
checked, sizes and colors.

36
00:02:06.040 --> 00:02:07.480
These are all fair game.

37
00:02:07.480 --> 00:02:10.100
Oftentimes, when we're dealing
with pseudo selectors,

38
00:02:10.100 --> 00:02:14.570
like colon disabled or
colon hover or colon visited for

39
00:02:14.570 --> 00:02:19.800
links, they fit into
the category of modifiers.

40
00:02:19.800 --> 00:02:24.430
And that's why they're broken out as
sort of a separate thing from a link

41
00:02:24.430 --> 00:02:25.360
or a button.

42
00:02:25.360 --> 00:02:29.600
So this is sort of building on that
same precedent that has been set

43
00:02:30.670 --> 00:02:31.880
in buttons and links.

44
00:02:33.490 --> 00:02:39.060
So here's an example of how we can
look at different UI elements and

45
00:02:39.060 --> 00:02:43.330
identify whether things are blocks or
elements or modifiers.

46
00:02:43.330 --> 00:02:47.370
So you see here we've got a menu,
with menu elements in it.

47
00:02:47.370 --> 00:02:50.070
The menu would be the whole
collection of four things.

48
00:02:50.070 --> 00:02:54.934
And those menu elements don't really
have much meaning outside the context of

49
00:02:54.934 --> 00:02:56.410
the containing menu.

50
00:02:56.410 --> 00:02:59.020
Likewise, we've got a button
down here with a theme of green.

51
00:02:59.020 --> 00:03:00.280
That should make total sense to you.

52
00:03:00.280 --> 00:03:02.660
We've been coloring buttons all day.

53
00:03:02.660 --> 00:03:07.365
We've got a big imput that is just
a decorated version of the same component

54
00:03:07.365 --> 00:03:13.040
that is shown right underneath the tab
of the browser there in the nav bar.

55
00:03:13.040 --> 00:03:19.350
So like deciding when something
should be internals of a component or

56
00:03:19.350 --> 00:03:24.635
broken out into its own freestanding
component, some experience and

57
00:03:24.635 --> 00:03:29.210
judgment and foresight as to what future
use cases might involve is required.

58
00:03:30.400 --> 00:03:36.180
So to some degree there's
judgment as to whether

59
00:03:36.180 --> 00:03:41.670
like its composability would be something
you really need within the component or

60
00:03:41.670 --> 00:03:45.880
whether it should be just sort of
a something you drop in place and

61
00:03:45.880 --> 00:03:47.550
it is opaque from the outside world.

62
00:03:47.550 --> 00:03:52.460
And you just have nothing, no control
over exactly what goes on in the inside.

63
00:03:54.290 --> 00:03:58.470
So here's an example of how
we might take something and

64
00:03:58.470 --> 00:04:06.230
make it into a how we might decide
how to start style this using BEM.

65
00:04:06.230 --> 00:04:09.447
So we've got what I am
calling a text field.

66
00:04:09.447 --> 00:04:15.840
And you'll notice that we've got a label
thing to the left with his first name.

67
00:04:15.840 --> 00:04:20.156
We've got some error text underneath
the input, and then of course,

68
00:04:20.156 --> 00:04:22.050
there's the input itself.

69
00:04:22.050 --> 00:04:25.930
So here is how we might end
up defining this thing.

70
00:04:25.930 --> 00:04:29.340
You'll notice that when we define
elements inside the block, so

71
00:04:29.340 --> 00:04:33.370
the block just has
a traditional CSS class.

72
00:04:33.370 --> 00:04:37.080
You could have a dash
in there if you wanted.

73
00:04:37.080 --> 00:04:38.630
That would be the convention.

74
00:04:38.630 --> 00:04:40.120
When you have double underscores,

75
00:04:40.120 --> 00:04:43.530
that indicates that you're defining
an element inside a block.

76
00:04:44.930 --> 00:04:49.990
And double dashes will typically indicate
that you're defining a modifier.

77
00:04:49.990 --> 00:04:54.480
And you'll notice that we're reusing
this text field name over and over.

78
00:04:54.480 --> 00:04:59.270
And this is to ensure that the elements
inside this block do not collide with

79
00:04:59.270 --> 00:05:01.340
elements inside other blocks.

80
00:05:01.340 --> 00:05:06.090
If I had other labels for other things,
this is gonna have a totally different

81
00:05:06.090 --> 00:05:09.310
class name than those other things
because this is for the text field.

82
00:05:10.750 --> 00:05:15.554
So SASS and the parent selector
make this really easy because

83
00:05:15.554 --> 00:05:19.142
we can just use the parent selector for
this.

84
00:05:19.142 --> 00:05:24.750
Followed by __ and then the name
of the element inside the block.

85
00:05:24.750 --> 00:05:29.129
We can just nest it like you see
down here, which is really nice.

86
00:05:31.510 --> 00:05:37.615
For modifiers, so we can do something
similar, there's a little caveat here,

87
00:05:37.615 --> 00:05:43.050
in that as we saw before,
these classes will end up being broken

88
00:05:43.050 --> 00:05:49.570
out of the context of, actually,
this is not correct, sorry.

89
00:05:49.570 --> 00:05:51.530
I'm gonna have to alter this real quickly.

90
00:05:52.660 --> 00:05:55.110
All right, here we go.

91
00:05:55.110 --> 00:05:56.350
This is correct.

92
00:05:57.790 --> 00:06:02.760
The Keynote's doing me all
kinds of favors here by turning

93
00:06:02.760 --> 00:06:04.830
my double dashes between text field and

94
00:06:04.830 --> 00:06:09.510
state into a single long dash, but
this is the way you should structure this.

95
00:06:09.510 --> 00:06:11.860
Here's what was wrong
with what I had before.

96
00:06:11.860 --> 00:06:12.752
First off,

97
00:06:12.752 --> 00:06:18.833
it would have been regarded as a class
that exists inside the textfield, right?

98
00:06:18.833 --> 00:06:23.056
And you might think, well,
wouldn't it be nice if we could just put

99
00:06:23.056 --> 00:06:25.963
an ampersand in place
of that word textfield.

100
00:06:25.963 --> 00:06:31.190
You cannot use the parent selector
more than once to define the selector,

101
00:06:31.190 --> 00:06:35.170
right, so
we could not do end.end-- state-error.

102
00:06:36.810 --> 00:06:41.700
If you are okay with these being
kind of classes that break

103
00:06:41.700 --> 00:06:45.340
out of the context of textfield,
there are other ways of doing this.

104
00:06:45.340 --> 00:06:48.310
This is how I've seen it before and
this is how I advise doing it.

