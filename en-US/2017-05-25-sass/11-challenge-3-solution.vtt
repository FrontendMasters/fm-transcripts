WEBVTT

1
00:00:00.180 --> 00:00:02.320
&gt;&gt; Mike North: Let's address the questions
before we go over the solution

2
00:00:02.320 --> 00:00:03.361
to the variables exercise.

3
00:00:03.361 --> 00:00:04.676
Yes?

4
00:00:04.676 --> 00:00:05.408
&gt;&gt; Speaker 2: Yeah, I had one.

5
00:00:05.408 --> 00:00:12.897
So does it matter where in your Sass
value call in the partial filename?

6
00:00:12.897 --> 00:00:14.068
&gt;&gt; Mike North: Great question.

7
00:00:14.068 --> 00:00:15.294
&gt;&gt; Speaker 2: Should it
be at the very top or

8
00:00:15.294 --> 00:00:18.030
should it just be outside
those declarations?

9
00:00:18.030 --> 00:00:19.040
&gt;&gt; Mike North: Great question.

10
00:00:19.040 --> 00:00:21.988
So if you do it at the very top,

11
00:00:21.988 --> 00:00:27.590
then all Scss you define
below that point will

12
00:00:27.590 --> 00:00:33.780
behave as if all of the stuff that is
defined in that import is in scope.

13
00:00:33.780 --> 00:00:37.680
You can actually do an import
from inside a declaration block

14
00:00:37.680 --> 00:00:41.640
if you wanted to make certain rules
available, certain variables and

15
00:00:41.640 --> 00:00:44.648
things available only within
a particular scope, right?

16
00:00:44.648 --> 00:00:46.603
So there are two things
you need to consider.

17
00:00:46.603 --> 00:00:51.756
One is whether you want stuff to
be available in the global scope.

18
00:00:51.756 --> 00:00:57.005
And typically, that would be like imported
at the very first line of the file.

19
00:00:57.005 --> 00:01:02.678
And the second is if you don't want it
to be in that scope, is there a place

20
00:01:02.678 --> 00:01:08.827
you could put it where things wouldn't
collide with other important things?

21
00:01:08.827 --> 00:01:11.030
It would be contained.

22
00:01:11.030 --> 00:01:15.260
So if you, for example, had this variables
file and you put that import inside

23
00:01:15.260 --> 00:01:20.130
container, you would only have access to
those variables within that scope there.

24
00:01:20.130 --> 00:01:22.980
Similar to the local variables
example that we looked at earlier.

25
00:01:25.140 --> 00:01:30.190
And this, by the way,
this is another underutilized aspect of

26
00:01:30.190 --> 00:01:36.100
the import selector, where you could
define some classes in an import and

27
00:01:36.100 --> 00:01:39.742
you could almost bring
them into a selector.

28
00:01:39.742 --> 00:01:44.370
There are better ways to do this with
Sass, but this is one way to do it.

29
00:01:44.370 --> 00:01:50.450
Where if we moved our button
primary into another file,

30
00:01:50.450 --> 00:01:53.910
we could actually just bring those
rules into button with an import.

31
00:01:53.910 --> 00:01:56.700
It's almost like a copy and paste.

32
00:01:56.700 --> 00:01:59.340
Copy file contents, and
replace the import with that.

33
00:02:00.900 --> 00:02:02.096
Were there any other questions?

34
00:02:02.096 --> 00:02:04.340
&gt;&gt; Speaker 3: Is
the namespacing on import,

35
00:02:04.340 --> 00:02:06.934
is that just the relative
path on the hard disk?

36
00:02:06.934 --> 00:02:07.592
&gt;&gt; Mike North: Yes.
&gt;&gt; Speaker 3: Okay.

37
00:02:07.592 --> 00:02:10.980
&gt;&gt; Mike North: Namespacing on import
is a relative path on the hard disk.

38
00:02:12.220 --> 00:02:15.130
That is one thing that will resolve.

39
00:02:15.130 --> 00:02:19.430
But also keep in mind that you
can set up the Sass compiler

40
00:02:19.430 --> 00:02:21.562
to have access to other paths.

41
00:02:21.562 --> 00:02:26.710
So actually, look,
you have ordering of the paths,

42
00:02:26.710 --> 00:02:30.140
right, and it will go and try to resolve
the first thing that it can encounter.

43
00:02:30.140 --> 00:02:35.766
So an example would be if you had
a file in your path called Bootstrap,

44
00:02:35.766 --> 00:02:42.360
that would overshadow the Bootstrap
library you might have brought in.

45
00:02:42.360 --> 00:02:45.803
So this is why sometimes,
it is nice to bring things in.

46
00:02:45.803 --> 00:02:50.599
This is why Bootstrap doesn't have its
underscore variables file at the top level

47
00:02:50.599 --> 00:02:52.220
of the of its import.

48
00:02:52.220 --> 00:02:55.300
You bring that in with
bootstrap/ _variables, so

49
00:02:55.300 --> 00:02:59.857
that they're trying to make it so
that you don't have any collisions there.

50
00:02:59.857 --> 00:03:05.209
&gt;&gt; Speaker 3: So I had a question about
the bloat in your CSS where you import.

51
00:03:05.209 --> 00:03:10.211
So if you were doing the local version
of that, of scoping at the import,

52
00:03:10.211 --> 00:03:13.423
you get everything in that every eye,
right?

53
00:03:13.423 --> 00:03:19.160
&gt;&gt; Mike North: So,
[LAUGH] that's a good question there.

54
00:03:19.160 --> 00:03:21.640
The way I typically use imports,

55
00:03:21.640 --> 00:03:26.920
I don't rely on them to do too much of the
crazy stuff that I just said was possible.

56
00:03:26.920 --> 00:03:29.740
To be clear, I didn't say,
it was advisable that you do that.

57
00:03:29.740 --> 00:03:33.860
My Sass, in terms of my imports,
looks as follows.

58
00:03:33.860 --> 00:03:38.312
I'll have one file that is
entirely comprised of imports, and

59
00:03:38.312 --> 00:03:42.936
that will usually be the only
non-partial Sass file that I have.

60
00:03:42.936 --> 00:03:46.341
That'll be the only thing that
doesn't start with an underscore.

61
00:03:46.341 --> 00:03:52.010
And I'll usually call that app.scss,
and that will turn into my CSS.

62
00:03:53.300 --> 00:03:58.120
And we'll begin by importing the variables
and making sure that you get that right

63
00:03:58.120 --> 00:04:01.070
in terms of what needs to
get defined before what.

64
00:04:01.070 --> 00:04:04.660
And then I'll import other
things from other places.

65
00:04:04.660 --> 00:04:09.070
Now, I told you that importing was
sort of a find and replace thing.

66
00:04:09.070 --> 00:04:13.113
What this means is that because wherever
I'm consuming my other partials for

67
00:04:13.113 --> 00:04:14.542
my components and things,

68
00:04:14.542 --> 00:04:18.350
those will be already brought into
a scope where variables are defined.

69
00:04:18.350 --> 00:04:26.450
They're already defined in my
app.scss on a higher line, right?

70
00:04:26.450 --> 00:04:30.440
That means that I don't have to import
my variables into every single file.

71
00:04:30.440 --> 00:04:33.700
Now, what that does mean is that
each of my individual files,

72
00:04:33.700 --> 00:04:37.240
they are not freestanding.

73
00:04:37.240 --> 00:04:40.100
But partials are not really
meant to be freestanding.

74
00:04:40.100 --> 00:04:43.230
So this is an appropriate
way to do it in my mind.

75
00:04:43.230 --> 00:04:49.450
But yes, to your point, importing is
a copy-and-paste style operation.

76
00:04:49.450 --> 00:04:54.168
And importing many times will result in
many copies of that being proliferated

77
00:04:54.168 --> 00:04:55.920
through your app.

78
00:04:55.920 --> 00:05:01.330
So that being said, with the approach
that I just advocated for here,

79
00:05:03.030 --> 00:05:06.950
typically you don't need to worry about
that, because anything you are importing

80
00:05:06.950 --> 00:05:11.950
into a file that has classes,
is something that will evaluate to no CSS.

81
00:05:11.950 --> 00:05:18.420
So that would be mix ins and variables and

82
00:05:18.420 --> 00:05:21.930
one other thing called placeholders
that we'll talk about later today.

83
00:05:21.930 --> 00:05:25.910
And everything else sort of just all being
brought together into one big piece.

84
00:05:25.910 --> 00:05:29.190
And this pattern scales
up really nicely because.

85
00:05:29.190 --> 00:05:33.010
Now it's, you know we're used to
boiling everything down until like

86
00:05:33.010 --> 00:05:37.250
as few files as possible, I mean until
the whole world is on HTTP/2 and

87
00:05:37.250 --> 00:05:41.640
like breaking things up into multiple
files comes to no cost to our users.

88
00:05:41.640 --> 00:05:46.270
Like we need to move in
the direction of consolidating and

89
00:05:46.270 --> 00:05:50.227
concatenating everything together and
this gives me a nice way to sort of,

90
00:05:50.227 --> 00:05:56.600
Do that right from the start
with imports and not

91
00:05:56.600 --> 00:05:59.910
have build tools define how things are-
&gt;&gt; Speaker 3: It sounds a little bit like

92
00:05:59.910 --> 00:06:02.230
the structure that Max advocates.

93
00:06:03.360 --> 00:06:06.480
&gt;&gt; Mike North: Yep, in addition to that,

94
00:06:06.480 --> 00:06:10.250
it's a lot like the way Rails
would structure styles.

95
00:06:10.250 --> 00:06:13.180
It is a lot like the way
Ember structures styles.

96
00:06:13.180 --> 00:06:15.930
&gt;&gt; Speaker 2: Smex is awesome.

97
00:06:16.980 --> 00:06:18.680
&gt;&gt; Mike North: What is Smex?

98
00:06:18.680 --> 00:06:23.250
It is that CSS architecture
it is like suits and

99
00:06:23.250 --> 00:06:25.700
smex those different methodologies.

100
00:06:25.700 --> 00:06:29.220
&gt;&gt; Speaker 2: Just how to organize your
folders if you could just use bin and

101
00:06:29.220 --> 00:06:34.115
then smex it would be perfect Interesting.

102
00:06:34.115 --> 00:06:36.043
[CROSSTALK]
&gt;&gt; Speaker 3: A little modular

103
00:06:36.043 --> 00:06:38.219
architection, see what it says, and

104
00:06:38.219 --> 00:06:39.940
Jonathon Snook-
&gt;&gt; Speaker 2: Snook.

105
00:06:39.940 --> 00:06:41.540
You guys had Snook here.

106
00:06:41.540 --> 00:06:43.909
Like a couple years ago [CROSSTALK]
&gt;&gt; Speaker 3: Yeah,

107
00:06:43.909 --> 00:06:47.250
we actually have a smash course on with-
&gt;&gt; Mike North: Cool.

108
00:06:47.250 --> 00:06:49.310
&gt;&gt; Speaker 2: Yeah, he's the best.

109
00:06:51.460 --> 00:06:52.330
&gt;&gt; Mike North: Awesome.

110
00:06:52.330 --> 00:06:56.480
Sounds like there's a lot of convergence
around a similar set of patterns.

111
00:06:57.770 --> 00:07:01.120
So with that, I'm going to go through
the solution to this exercise here.

112
00:07:01.120 --> 00:07:03.500
If there are no other questions and
none online.

113
00:07:06.630 --> 00:07:11.244
So let's look at our code here
&gt;&gt; Mike North: We

114
00:07:11.244 --> 00:07:15.940
are currently not running and
let me go back to my slides here.

115
00:07:15.940 --> 00:07:17.840
Variables is the name of the exercise.

116
00:07:20.170 --> 00:07:23.597
So run I don't know if that is.

117
00:07:23.597 --> 00:07:27.021
run -e variables.

118
00:07:28.770 --> 00:07:33.285
And we're up and running on localhost:3000
we can get rid of our terminal here.

119
00:07:37.792 --> 00:07:38.449
&gt;&gt; Mike North: Do a refresh.

120
00:07:41.048 --> 00:07:42.983
&gt;&gt; Mike North: And
collapse all our folders.

121
00:07:42.983 --> 00:07:45.735
All right, variables.

122
00:07:49.863 --> 00:07:53.370
&gt;&gt; Mike North: So here's our SCSS file.

123
00:07:53.370 --> 00:07:58.400
I didn't make everyone do the similar work
that would be required to get here from

124
00:07:59.920 --> 00:08:00.680
excercise one.

125
00:08:00.680 --> 00:08:03.540
This should like a little bit
like your excercise one solution.

126
00:08:03.540 --> 00:08:07.700
So I'm gonna go ahead and right at
the I'm gonna import the variables file.

127
00:08:09.070 --> 00:08:11.080
You don't need to add the extension,

128
00:08:11.080 --> 00:08:14.860
you do need a semicolon at the end of
the variable statement here, right?

129
00:08:16.450 --> 00:08:20.820
And then from within here, if I recall,

130
00:08:20.820 --> 00:08:22.900
let me just double check
the instructions here.

131
00:08:22.900 --> 00:08:27.200
So hot bush for the primary background.

132
00:08:27.200 --> 00:08:30.960
A $venus border so lets do that.

133
00:08:30.960 --> 00:08:38.280
Border should be $venus and
this should be $hopbush.

134
00:08:38.280 --> 00:08:43.601
And for the second background $nebula
background and a $patina border.

135
00:08:51.127 --> 00:08:52.730
&gt;&gt; Mike North: And it's that easy.

136
00:08:52.730 --> 00:08:55.810
Now we could start just to give
you a preview of like the lighten,

137
00:08:55.810 --> 00:08:57.810
darken the color functions here.

138
00:08:57.810 --> 00:09:02.841
We could even do this like saturate
&gt;&gt; Mike North: By 20% and

139
00:09:02.841 --> 00:09:08.676
make it a more vivid Pink there,
or darken by 20%.

140
00:09:08.676 --> 00:09:12.390
And you see I've got
code completion in here

141
00:09:13.440 --> 00:09:18.530
from a Visual Studio plugin that tells me,
I'm using SASS,

142
00:09:18.530 --> 00:09:23.810
and this is the result of this function,
and these are the arguments it takes.

143
00:09:23.810 --> 00:09:28.480
So really easy to use, really easy
to import and consume variables.

