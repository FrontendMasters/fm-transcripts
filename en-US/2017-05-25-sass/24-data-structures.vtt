WEBVTT

1
00:00:00.110 --> 00:00:05.024
&gt;&gt; Mike North: So, if is a pretty useful
concept in building out some very basic

2
00:00:05.024 --> 00:00:06.213
control flow.

3
00:00:06.213 --> 00:00:11.093
But sometimes,
we come across things where we have

4
00:00:11.093 --> 00:00:16.000
very repetitive classes that are defined.

5
00:00:16.000 --> 00:00:20.740
A grid would be a great example where I'm
sure everyone has used a grid before where

6
00:00:20.740 --> 00:00:25.990
you have, like a column that is two
wide or three wide or four wide.

7
00:00:25.990 --> 00:00:29.660
And you could kind of express,
if you compared all these together,

8
00:00:29.660 --> 00:00:31.870
you would definitely notice a pattern.

9
00:00:31.870 --> 00:00:35.210
And we could just define
these all line by line, but

10
00:00:35.210 --> 00:00:40.990
we could also define this in terms
of like iterating through something.

11
00:00:40.990 --> 00:00:46.650
And SaaS gives us the ability
to iterate using for

12
00:00:46.650 --> 00:00:50.240
and also each,
which we'll look at later on.

13
00:00:50.240 --> 00:00:53.870
For is used to iterate
through a range of numbers.

14
00:00:53.870 --> 00:00:58.690
And you see here, we're using string
interpolation as well, or interpolation,

15
00:00:58.690 --> 00:01:03.470
in this case it's in the selector itself,
to generate

16
00:01:03.470 --> 00:01:08.210
a well orchestrated set of sizes for
h1 through h5, right?

17
00:01:08.210 --> 00:01:15.570
And you see here, we're doing some simple
math in order to determine the value here.

18
00:01:15.570 --> 00:01:21.626
But this is a for loop.
&gt;&gt; Mike North: So

19
00:01:21.626 --> 00:01:25.650
with for loops, we get this
data structure called an array.

20
00:01:25.650 --> 00:01:32.500
An array is just a set of values that
are separated by either spaces or commas.

21
00:01:32.500 --> 00:01:33.401
If you make.

22
00:01:33.401 --> 00:01:35.876
Sorry.
If you mix spaces and commas,

23
00:01:35.876 --> 00:01:41.020
you will almost certainly end
up with lists within lists.

24
00:01:41.020 --> 00:01:45.780
So if I had like what you see here
from my list and then comma and

25
00:01:45.780 --> 00:01:50.680
then another space separated set of
values, what you'd end up with is a list

26
00:01:50.680 --> 00:01:56.350
of two things, each of which was
a list containing those four things.

27
00:01:56.350 --> 00:01:57.650
Does that make sense?

28
00:01:57.650 --> 00:02:00.770
So first, we split on one and
then we split on the other and

29
00:02:00.770 --> 00:02:03.830
you can end up with something
that's a little bit interesting.

30
00:02:03.830 --> 00:02:06.080
Where might you see something like this?

31
00:02:06.080 --> 00:02:10.900
Has anyone seen like space separated stuff
and then comma, space separated stuff?

32
00:02:11.990 --> 00:02:14.670
Anyone ever dealt with multiple shadows?

33
00:02:14.670 --> 00:02:16.966
Like an inset shadow and
then another shadow.

34
00:02:16.966 --> 00:02:23.465
This is a concept that tries to
mirror what already existed in CSS.

35
00:02:23.465 --> 00:02:28.207
Right, the way this works, it works in the
same way that you have seen that concept

36
00:02:28.207 --> 00:02:33.035
with multiple shadows.
&gt;&gt; Mike North: We

37
00:02:33.035 --> 00:02:36.467
can iterate over a list using each.

38
00:02:36.467 --> 00:02:39.455
And it basically looks
the same way as for,

39
00:02:39.455 --> 00:02:43.859
except you don't pass in one
through five you pass it the list.

40
00:02:43.859 --> 00:02:46.879
And in this case, $i.

41
00:02:46.879 --> 00:02:48.712
That's gonna be the current
item in the list.

42
00:02:48.712 --> 00:02:53.553
And here, we're doing something silly and
pointless just to show that we can go

43
00:02:53.553 --> 00:02:59.017
through each of those values in order.
&gt;&gt; Mike North: So

44
00:02:59.017 --> 00:03:04.685
with lists,
we also get a function called nth.

45
00:03:04.685 --> 00:03:07.341
NTH, right?

46
00:03:07.341 --> 00:03:11.710
That's like fifth, sixth,
seventh, but generalized.

47
00:03:12.750 --> 00:03:19.200
And so, an example here where we have like
two lists where we have gradients defined.

48
00:03:19.200 --> 00:03:24.150
What we're doing here is we're creating
a linear-gradient using the second

49
00:03:24.150 --> 00:03:27.580
item in the gradients list, right?

50
00:03:27.580 --> 00:03:29.470
Parenthesis, by the way, here are ignored.

51
00:03:29.470 --> 00:03:31.890
They're just here to provide clarity.

52
00:03:31.890 --> 00:03:35.397
It is completely valid to
use parenthesis in this way,

53
00:03:35.397 --> 00:03:38.305
but you are not totally
required to use them.

54
00:03:38.305 --> 00:03:40.572
Well actually, I take it back.

55
00:03:40.572 --> 00:03:43.740
You are required,
because I'm using comma separated lists.

56
00:03:43.740 --> 00:03:46.121
Otherwise, it would be taken
as a continuation of a single

57
00:03:46.121 --> 00:03:48.649
list.
&gt;&gt; Mike North: So

58
00:03:48.649 --> 00:03:54.434
nth is a way to pluck an item out of,
essentially, an array.

59
00:03:54.434 --> 00:03:56.340
So this, if you're used to JavaScript,

60
00:03:56.340 --> 00:04:00.140
this is like square brackets
with a number in there.

61
00:04:00.140 --> 00:04:02.640
Keep in mind, it is one indexed.

62
00:04:02.640 --> 00:04:04.210
It is not zero indexed.

63
00:04:04.210 --> 00:04:07.080
The first item in the array
is the first thing,

64
00:04:07.080 --> 00:04:09.980
number one.
&gt;&gt; Speaker 2: It had to be different.

65
00:04:09.980 --> 00:04:10.950
&gt;&gt; Mike North: Right, yeah.

66
00:04:10.950 --> 00:04:13.320
Just to be totally,
to throw everyone for a loop.

67
00:04:14.410 --> 00:04:19.690
Literally, that was a loop joke.
&gt;&gt; Speaker 2: [LAUGH]

68
00:04:19.690 --> 00:04:24.410
&gt;&gt; Mike North: So maps are the second and

69
00:04:24.410 --> 00:04:27.420
last type of data structure
we're talking about today.

70
00:04:27.420 --> 00:04:33.670
Remember, we did numbers, strings,
booleans, colors, lists, and now six.

71
00:04:33.670 --> 00:04:35.970
This is maps.

72
00:04:35.970 --> 00:04:38.170
And they are key value pairs.

73
00:04:38.170 --> 00:04:40.932
They almost look like style declarations,
right?

74
00:04:40.932 --> 00:04:44.270
Because those are typically
key value pairs.

75
00:04:44.270 --> 00:04:48.206
And these are fantastic for
storing things like themes,

76
00:04:48.206 --> 00:04:52.552
where you could have a theme
that's defined as one variable and

77
00:04:52.552 --> 00:04:56.980
within that map, you could have
multiple little sub-parts and

78
00:04:56.980 --> 00:05:01.428
use map-get to pluck off a particular
value of interest there.

79
00:05:01.428 --> 00:05:04.780
And you don't have to worry about
collisions with other variables,

80
00:05:04.780 --> 00:05:08.608
because once you're in this map,
it's sort of one cohesive object, right?

81
00:05:08.608 --> 00:05:13.544
And here, you can see I'm using map.get,
which takes,

82
00:05:13.544 --> 00:05:16.384
as its first argument, the map.

83
00:05:16.384 --> 00:05:22.180
And the second argument is the name of the
thing you want to pluck out of the map.

84
00:05:22.180 --> 00:05:25.580
So here, I can create a dark button and
a light button,

85
00:05:25.580 --> 00:05:29.980
referring by name,
to those things that are in my map above.

86
00:05:29.980 --> 00:05:32.500
And this is the resulting CSS
that we get on the right.

87
00:05:32.500 --> 00:05:35.500
And including the little interpolation

88
00:05:35.500 --> 00:05:37.950
I have there to like make a comment
as to this is that theme.

