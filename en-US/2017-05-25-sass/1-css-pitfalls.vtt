WEBVTT

1
00:00:00.370 --> 00:00:05.760
&gt;&gt; Mike: It makes sense to start this
story with the pitfalls of CSS, right?

2
00:00:05.760 --> 00:00:11.070
So why do we not just use the thing
the browser already understands, CSS?

3
00:00:12.300 --> 00:00:19.770
Well, first off, CSS programming, you're
working in a world of globals, right?

4
00:00:19.770 --> 00:00:25.700
You have no ability to protect
yourself from believing rules and

5
00:00:25.700 --> 00:00:28.070
to styling unintended things.

6
00:00:28.070 --> 00:00:34.040
And this is something that like the whole
problem is on us as developers.

7
00:00:34.040 --> 00:00:34.570
Right?

8
00:00:34.570 --> 00:00:37.320
To stay as organized as we possibly can,

9
00:00:37.320 --> 00:00:41.470
to sort of keep things
scoped just the right way so

10
00:00:41.470 --> 00:00:45.640
that we don't have unintended
consequences as we build our styles out.

11
00:00:46.680 --> 00:00:51.782
At least, in the traditional context,
CSS does not have variables.

12
00:00:51.782 --> 00:00:54.842
Future generations of CSS
may have variables, and

13
00:00:54.842 --> 00:00:59.694
there may be experimental things that you
can turn on in certain browsers today.

14
00:00:59.694 --> 00:01:04.068
But you need to support
browsers today that don't have

15
00:01:04.068 --> 00:01:06.940
the capability of doing this.

16
00:01:06.940 --> 00:01:13.340
And this is a big part of any kind of
theming or any kind of customization.

17
00:01:13.340 --> 00:01:16.710
The ability to toggle
between like a light style or

18
00:01:16.710 --> 00:01:19.110
a dark style of a particular site.

19
00:01:19.110 --> 00:01:24.380
That whole could benefit from being
able to perimeterize some of our styles,

20
00:01:24.380 --> 00:01:29.040
to express it in terms of a couple
colors and a couple widths, and so on.

21
00:01:30.830 --> 00:01:34.310
CSS is not composable in of itself.

22
00:01:34.310 --> 00:01:39.660
Meaning that we have to go into
the HTML and apply a variety

23
00:01:39.660 --> 00:01:44.780
of classes in order to get a composition.

24
00:01:44.780 --> 00:01:48.430
Right?
In order to say this text field is both

25
00:01:48.430 --> 00:01:51.330
Left aligned and it's caps.

26
00:01:51.330 --> 00:01:52.180
It's all caps.

27
00:01:52.180 --> 00:01:54.980
That might be two classes
that we have to apply.

28
00:01:54.980 --> 00:02:00.730
But the CSS rules to themselves, we have
to be fairly explicit and oftentimes,

29
00:02:00.730 --> 00:02:07.460
redundant as we define those over and
over.

30
00:02:07.460 --> 00:02:12.590
And in terms of modularity primitives,
when we get into talking about

31
00:02:12.590 --> 00:02:17.730
how import works because
CSS was not designed for

32
00:02:17.730 --> 00:02:20.570
the kinds of rich applications
we've built today.

33
00:02:20.570 --> 00:02:23.220
Two concepts are connected
that really shouldn't be.

34
00:02:23.220 --> 00:02:28.920
And this concepts are how do you
break your files up as a developer

35
00:02:28.920 --> 00:02:33.810
Into something manageable versus
what is the browser consume.

36
00:02:33.810 --> 00:02:35.100
So we have this concept of

37
00:02:36.220 --> 00:02:39.470
importing another style sheet
from within the style sheet.

38
00:02:39.470 --> 00:02:41.870
But that involves going in
fact in search a new file for

39
00:02:41.870 --> 00:02:46.870
the browser and ion CSS this is really
the only construct that we have

40
00:02:46.870 --> 00:02:52.090
that gives us the ability to break
our styles up into multiple files.

41
00:02:52.090 --> 00:02:56.970
Finally, over time, because we're so
limited in what we can do,

42
00:02:58.620 --> 00:03:03.410
your styles are the part of your app
that starts to get really unmanageable,

43
00:03:03.410 --> 00:03:08.660
irreversibly so,
where you find you're in a bad spot and

44
00:03:08.660 --> 00:03:13.400
you've made some short sighted decisions
to get that product launch out,

45
00:03:13.400 --> 00:03:18.570
but now, it's sort of a very brittle area
of where as soon as you touch something,

46
00:03:18.570 --> 00:03:21.330
you can have unintended
ramifications elsewhere.

47
00:03:21.330 --> 00:03:25.355
So that's what I call beating
into submission development.

48
00:03:25.355 --> 00:03:29.485
And this is where you get a bunch
of exclamation mark importance and

49
00:03:29.485 --> 00:03:30.565
negative margins.

50
00:03:30.565 --> 00:03:33.835
And people are just
wrestling against this thing

51
00:03:33.835 --> 00:03:38.565
to try to get the stuff to look
the way they want it to look, but

52
00:03:38.565 --> 00:03:42.515
not doing so
with intent to design it that way.

53
00:03:42.515 --> 00:03:47.730
They're just sort of like hitting it
until it's sort of in the right spot.

54
00:03:47.730 --> 00:03:52.350
And that, over time, can end up with the
situation where you change one rule, and

55
00:03:52.350 --> 00:03:56.050
then all of a sudden your
whole site shuffles around.

56
00:03:56.050 --> 00:03:58.610
And that's not a fun place to be in.

57
00:03:58.610 --> 00:04:02.790
So I hope to help provide
some guidance today,

58
00:04:02.790 --> 00:04:08.740
as to how to at least put that off further
into the future, if not avoid it entirely.

59
00:04:09.930 --> 00:04:13.960
So let's begin with my favorite
collection of CSS memes,

60
00:04:13.960 --> 00:04:19.060
I figured I'd get these out of the way at
the beginning, otherwise, I'll be tempted

61
00:04:19.060 --> 00:04:24.250
to litter them through out the talk,
and we'll end up going back and forth.

62
00:04:24.250 --> 00:04:29.140
My favorite here is this Reddit thread
of me trying to learn CSS where

63
00:04:29.140 --> 00:04:34.070
we end up with text that is formatted and
going off the screen.

64
00:04:35.290 --> 00:04:35.790
So.

