WEBVTT

1
00:00:00.070 --> 00:00:05.070
&gt;&gt; Mike North: We're going to build on
what we've learned so far about Mixins.

2
00:00:05.070 --> 00:00:09.972
And start to layer on some
more advanced Mixin topics.

3
00:00:09.972 --> 00:00:15.112
The first thing we're going to look at
is the idea of default argument values.

4
00:00:15.112 --> 00:00:19.916
These would be the values that
variables that are arguments to your

5
00:00:19.916 --> 00:00:24.805
Mixin would get the values the variables
would have in the event that

6
00:00:24.805 --> 00:00:28.770
you didn't pass anything to the Mixin for
that value.

7
00:00:29.800 --> 00:00:34.500
And in this case, I'm also introducing
this concept of passing arguments to

8
00:00:34.500 --> 00:00:39.320
Mixins in order, or passing them using

9
00:00:39.320 --> 00:00:43.100
the keyword style of argument passing,
which is at the bottom here.

10
00:00:43.100 --> 00:00:47.338
Where you can see that I'm using
the variable name color and

11
00:00:47.338 --> 00:00:52.607
assigning it equal to green, and so
this is sort of using key value pairs.

12
00:00:52.607 --> 00:00:56.354
On the bottom, right, using color green.

13
00:00:56.354 --> 00:01:03.025
If you pass arguments this way, there is
no dependence on order, on argument order.

14
00:01:03.025 --> 00:01:07.423
And so, this is useful if you've got
like three or four different things and

15
00:01:07.423 --> 00:01:10.530
for two of them you wanna
fall back to a default value.

16
00:01:10.530 --> 00:01:13.170
You can provide default values for
everything, and

17
00:01:13.170 --> 00:01:17.257
then customize the first argument or
the second argument or the third argument.

18
00:01:17.257 --> 00:01:20.474
It's pretty flexible, in fact there are
things you can do here that are a little

19
00:01:20.474 --> 00:01:23.190
bit more flexible than what you
can do with JavaScript functions.

20
00:01:23.190 --> 00:01:29.530
Where default values typically need to be
the last arguments in a function, right?

21
00:01:29.530 --> 00:01:32.250
You can't like pick the third
one to customize that also

22
00:01:32.250 --> 00:01:33.680
explicitly passing the first two.

23
00:01:35.790 --> 00:01:39.140
So cool thing to know,
especially if you're reading CSS you

24
00:01:39.140 --> 00:01:41.590
will encounter this and
wonder what the heck is going on.

25
00:01:42.830 --> 00:01:44.900
This is what's going on.

26
00:01:44.900 --> 00:01:47.610
I'm just gonna switch by
mirroring here real quick.

27
00:01:49.960 --> 00:01:54.703
Right, building on this
topic of default values,

28
00:01:54.703 --> 00:02:00.896
something interesting happens if
we pass null as a default value.

29
00:02:00.896 --> 00:02:05.447
What ends up happening
in the CSS output is,

30
00:02:05.447 --> 00:02:11.850
we will skip over the declaration
with a null value entirely.

31
00:02:11.850 --> 00:02:15.190
It will not get built
into the output at all.

32
00:02:15.190 --> 00:02:20.390
So in this case you can see
opacity's default value is null for

33
00:02:20.390 --> 00:02:22.890
the btn style role here.

34
00:02:22.890 --> 00:02:27.990
You can see that opacity never makes
its way into the CSS in any form.

35
00:02:27.990 --> 00:02:30.800
So you don't have to
worry about inherit or

36
00:02:30.800 --> 00:02:36.090
falling back to some reasonable default
of 1, 1.0 being the default opacity.

37
00:02:36.090 --> 00:02:38.010
You can just skip over it entirely, and

38
00:02:38.010 --> 00:02:39.890
it will be like this
role was never expressed.

39
00:02:41.530 --> 00:02:46.100
So really useful aspect
of default values to use.

40
00:02:47.520 --> 00:02:48.910
Now up until now,

41
00:02:48.910 --> 00:02:52.602
Mixins have acted just sort of like
functions that evaluate to something.

42
00:02:52.602 --> 00:02:58.430
And you get a style rules and

43
00:02:58.430 --> 00:03:02.719
they're sort of merged into the selector,
inside which the Mixin is used.

44
00:03:04.230 --> 00:03:07.040
Of building even one step on top of this,

45
00:03:07.040 --> 00:03:11.600
we have the equivalent of a callback,
right, of the idea of passing something to

46
00:03:11.600 --> 00:03:17.370
a Mixin that it could then place where
it wants to in the Mixins definition.

47
00:03:17.370 --> 00:03:21.540
We can pass a declaration
block when we include a Mixin.

48
00:03:21.540 --> 00:03:25.650
So here we've got a Mixin called
foo that takes in a color value.

49
00:03:25.650 --> 00:03:28.900
And you can see that it uses the variable.

50
00:03:30.990 --> 00:03:34.740
And then it has this
@content declaration there.

51
00:03:34.740 --> 00:03:38.160
Essentially, what's gonna happen is
the block that's passed to this Mixin

52
00:03:38.160 --> 00:03:42.150
will be put in place of that content,
right?

53
00:03:42.150 --> 00:03:47.010
So over here on the right, you can see,
we passed color red to the Mixin and

54
00:03:47.010 --> 00:03:51.180
that is applied to the inner
selector as a rule here.

55
00:03:52.640 --> 00:03:55.940
And you can actually have
the content rendered more than once,

56
00:03:55.940 --> 00:04:01.390
which is a really nice feature if you
have to target vendor specific tags.

57
00:04:01.390 --> 00:04:06.060
So if you've ever done something
like styling pseudo elements

58
00:04:06.060 --> 00:04:09.610
of a number spinner,

59
00:04:09.610 --> 00:04:13.850
like an input number helper thing
with the up arrow and the down arrow.

60
00:04:13.850 --> 00:04:15.600
And like you can style these things.

61
00:04:15.600 --> 00:04:18.750
But there's a WebKit specific thing to do,
and

62
00:04:18.750 --> 00:04:21.523
there's a Mozilla specific thing to do.

63
00:04:21.523 --> 00:04:24.838
And largely that's the same
rule applied in two places, but

64
00:04:24.838 --> 00:04:27.318
It's a different pseudo selector for each.

65
00:04:27.318 --> 00:04:31.414
And you could just have the content
in two places inside your Mixin, and

66
00:04:31.414 --> 00:04:34.485
it would end up being rendered twice,
potentially,

67
00:04:34.485 --> 00:04:39.530
with the couple extra Mozilla or
Safari customization in place, right?

68
00:04:39.530 --> 00:04:41.030
So pretty nice.

69
00:04:41.030 --> 00:04:45.516
And I also like to use this
passing a declaration block for

70
00:04:45.516 --> 00:04:47.487
media queries, right?

71
00:04:47.487 --> 00:04:50.711
I hate having to remember the syntax for
a media query and

72
00:04:50.711 --> 00:04:52.985
exactly what those screen widths are.

73
00:04:52.985 --> 00:04:56.652
So I can create a Mixin that
just called like phone, and

74
00:04:56.652 --> 00:05:01.942
its job is gonna be to have a media query
and then content immediately in there.

75
00:05:01.942 --> 00:05:04.518
And so it's a much more manageable and

76
00:05:04.518 --> 00:05:08.879
readable way of kind of wrapping
some CSS in something, right?

77
00:05:08.879 --> 00:05:10.920
Something that's long and
difficult to remember.

78
00:05:13.180 --> 00:05:16.693
Keeping my styles easy to manage and
easy to read.

79
00:05:16.693 --> 00:05:20.666
And avoiding that tendency to like
miss a media query by 1 pixel,

80
00:05:20.666 --> 00:05:23.989
cuz you can't remember like
do I lead up to this width or

81
00:05:23.989 --> 00:05:28.203
do I fall just short of it before I
toggle over to the next break point.

82
00:05:28.203 --> 00:05:31.674
This would kind of let
you skirt over that, and

83
00:05:31.674 --> 00:05:37.650
have a dry approach to writing really
long selectors in general, right?

84
00:05:37.650 --> 00:05:39.181
Dry meaning, don't repeat yourself.

85
00:05:41.047 --> 00:05:43.209
&gt;&gt; Mike North: So
here we can pass in a block,

86
00:05:43.209 --> 00:05:48.830
and here we use content to place
whatever was passed to the Mixin.

87
00:05:48.830 --> 00:05:53.910
In the correct spot, and it's the Mixins
job to define exactly where that goes.

88
00:05:53.910 --> 00:05:54.609
Yes?

89
00:05:54.609 --> 00:05:57.274
&gt;&gt; Speaker 2: So
if we didn't pass in content,

90
00:05:57.274 --> 00:06:00.238
would that inner just not be output?

91
00:06:00.238 --> 00:06:05.296
&gt;&gt; Mike North: Good question, so if no
content block had been passed to foo,

92
00:06:05.296 --> 00:06:11.057
what you would end up with is your
SASS would have an empty inner block.

93
00:06:11.057 --> 00:06:16.010
And then there is an optimization in the
SASS compiler that would skip over that

94
00:06:16.010 --> 00:06:20.680
entirely, cuz there's no point in
serializing the CSS equivalent out.

95
00:06:20.680 --> 00:06:25.437
Now if we had another rule in the inner,
like you would get that inner block, but

96
00:06:25.437 --> 00:06:28.000
it essentially turns into a no up, right?

97
00:06:28.000 --> 00:06:30.740
You didn't end up with like
It turning into nothing.

98
00:06:32.070 --> 00:06:32.670
Good question.

99
00:06:34.050 --> 00:06:37.230
So we're going to put
this to use right away,

100
00:06:37.230 --> 00:06:39.746
including all the stuff we've learned so
far.

101
00:06:39.746 --> 00:06:43.930
These exercise is a little bit more
sizable than what we've been working on

102
00:06:43.930 --> 00:06:48.910
before, and
it's a little bit more free form as well.

