WEBVTT

1
00:00:00.480 --> 00:00:04.170
&gt;&gt; Mike North: So
we were talking earlier about

2
00:00:04.170 --> 00:00:06.750
how in CSS we've got this import concept.

3
00:00:08.040 --> 00:00:13.100
So CSS allows us to define multiple style
sheets, and from within a style sheet we

4
00:00:13.100 --> 00:00:18.620
can refer to another external CSS file and
kind of bring it in,

5
00:00:18.620 --> 00:00:24.232
almost like dependency
injection a little bit but

6
00:00:24.232 --> 00:00:28.270
it's a ultra primitive means of doing so.

7
00:00:28.270 --> 00:00:33.060
The down side here is that this is a brand
new request that we are sending out.

8
00:00:33.060 --> 00:00:35.560
So the user has to bear a cost

9
00:00:35.560 --> 00:00:39.210
of us separating our CSS
out into separate files.

10
00:00:39.210 --> 00:00:43.200
Now, we could build, we could create like
an elaborate build system that would

11
00:00:43.200 --> 00:00:49.070
resolve all of these Imports
into a single CSS file,

12
00:00:49.070 --> 00:00:53.290
and in doing so, we would basically
build a piece of what SASS is.

13
00:00:55.030 --> 00:00:58.890
So we want to decouple these concepts, and

14
00:01:00.300 --> 00:01:05.360
this is sort of taking something that
we've learned from the JavaScript world.

15
00:01:05.360 --> 00:01:09.380
That there's great value when we're
dealing with a lot of complexity and

16
00:01:09.380 --> 00:01:10.910
a lot of different components.

17
00:01:10.910 --> 00:01:15.020
There's value in being able to break
things out into individual little files,

18
00:01:15.020 --> 00:01:17.330
where each has a dedicated concern.

19
00:01:17.330 --> 00:01:19.790
And particularly, when we're
looking through our source code and

20
00:01:19.790 --> 00:01:22.920
we wanna see,
what's the history of this file?

21
00:01:22.920 --> 00:01:27.130
It's really nice to be able to see that
we've just been dealing with container and

22
00:01:27.130 --> 00:01:31.850
right nav, and this is sort of the file
dedicated to the high level layout

23
00:01:31.850 --> 00:01:36.780
of this application we're building,
not the components contained therein.

24
00:01:36.780 --> 00:01:40.010
And to have that be sort of
its own entity managing its

25
00:01:40.010 --> 00:01:41.760
own dedicated concern as a file.

26
00:01:43.330 --> 00:01:46.370
As a result,
you can also use import in SASS, but

27
00:01:46.370 --> 00:01:48.690
it does something completely different.

28
00:01:48.690 --> 00:01:52.090
It does something more along
the lines of what we would want.

29
00:01:52.090 --> 00:01:56.370
So let's imagine that we have a folder
structure that looks like this.

30
00:01:56.370 --> 00:01:58.060
So we've got four files in it.

31
00:01:58.060 --> 00:02:02.830
You'll see two of them have underscores
at the beginning of their names.

32
00:02:02.830 --> 00:02:04.850
And two of them don't.

33
00:02:04.850 --> 00:02:07.540
So the things with underscores at
the beginnings of their names,

34
00:02:07.540 --> 00:02:11.210
those are known in the SAS
world as partials.

35
00:02:11.210 --> 00:02:18.440
Partials are designed to be imported
into other SAS files, other scss files.

36
00:02:20.260 --> 00:02:25.130
And they will not become their own
CSS files ended up themselves.

37
00:02:25.130 --> 00:02:29.270
If we would appoint the sass
compiler at this folder,

38
00:02:29.270 --> 00:02:32.830
we would end up with these
two turning into files.

39
00:02:32.830 --> 00:02:37.190
Right, we have app.scss and other.scss but

40
00:02:37.190 --> 00:02:41.780
layout and variables will sort of They
would not come along for the ride.

41
00:02:41.780 --> 00:02:46.760
So this is what we get in terms
of being able to break things up

42
00:02:46.760 --> 00:02:51.820
on our end as builders of style sheets and
not have to pass that

43
00:02:51.820 --> 00:02:57.260
cost of that modularity onto our users and
forcing them to go through

44
00:02:58.310 --> 00:03:02.630
seven different HTTP requests in
order to resolve all of our styles.

45
00:03:02.630 --> 00:03:07.590
And by the way, the result they will
see on the screen is that you know

46
00:03:07.590 --> 00:03:11.520
potentially, they'll have one style
sheet land and some rules be applied and

47
00:03:11.520 --> 00:03:15.550
another stuff sheet will land and
end up with pretty drawing effect.

48
00:03:15.550 --> 00:03:21.280
And the eventual setting of your site,
like the settling of all of your styles

49
00:03:21.280 --> 00:03:26.310
that may happen three seconds
after the page load completes.

50
00:03:26.310 --> 00:03:30.000
So any time you see some weird flashing
going on where things load, and

51
00:03:30.000 --> 00:03:32.130
then shuffle around much later,

52
00:03:33.250 --> 00:03:36.580
this would amplify that effect
in a very negative way.

53
00:03:38.370 --> 00:03:44.750
So in addition to being
able to have partials and

54
00:03:44.750 --> 00:03:48.840
being able to just through file names
control what will turn into an independent

55
00:03:48.840 --> 00:03:54.670
file versus what will remain
kind of an internal concept,

56
00:03:54.670 --> 00:03:57.090
a module that we bring in.

57
00:03:57.090 --> 00:04:00.240
We can point the sass
compiler to other folders.

58
00:04:00.240 --> 00:04:04.410
So an example is if we brought
in bootstrap for and we said,

59
00:04:04.410 --> 00:04:09.330
by the way you should also look in these
places for other SASS files that you're

60
00:04:09.330 --> 00:04:14.900
gonna look into node modules,
bootstraps slash SASS, or whatever it is.

61
00:04:14.900 --> 00:04:17.670
You'd be able to import it just like this,
and

62
00:04:17.670 --> 00:04:22.920
then import other partials and
even other CSS files as well.

63
00:04:22.920 --> 00:04:26.130
You could bring in other
from app if you wanted to.

64
00:04:27.280 --> 00:04:30.260
And then you would like
discard the result of other.

65
00:04:30.260 --> 00:04:31.770
I wouldn't advise doing that but

66
00:04:31.770 --> 00:04:36.060
I am just saying import has,
it's not limited to partials.

67
00:04:36.060 --> 00:04:39.698
You can import any sass file,
any scss file for that matter.

68
00:04:41.140 --> 00:04:46.340
&gt;&gt; Mike North: So
this is importing and it's done v f.

69
00:04:46.340 --> 00:04:50.230
It's called the import Declaration,

70
00:04:50.230 --> 00:04:52.570
anytime we have the at sign,
we call that declaration.

71
00:04:55.270 --> 00:04:58.910
On top of this,
let's layer another concept of variables.

72
00:05:00.270 --> 00:05:04.640
So, here's ab example
of using sas variables.

73
00:05:04.640 --> 00:05:07.500
And we can use them in a couple ways.

74
00:05:07.500 --> 00:05:10.870
Pu here, we have, let's call it
a global variable declaration.

75
00:05:10.870 --> 00:05:18.000
And that means that any SAS file
that has included this, right?

76
00:05:18.000 --> 00:05:20.400
It could be that that's
a SAS file that's imported.

77
00:05:20.400 --> 00:05:23.500
The file inside which that lives.

78
00:05:23.500 --> 00:05:25.490
That would have access to that variable.

79
00:05:25.490 --> 00:05:31.210
And oftentimes, what people do is they
will create a file dedicated towards

80
00:05:31.210 --> 00:05:36.400
global variables and they will be free to
kinda input that wherever its necessary.

81
00:05:36.400 --> 00:05:37.200
Yes?

82
00:05:37.200 --> 00:05:42.880
&gt;&gt; Audience 1: Where do you personally,
normally put your variables file?

83
00:05:42.880 --> 00:05:49.000
&gt;&gt; Mike North: I would put that
as a sibling to my app.css file.

84
00:05:49.000 --> 00:05:52.410
As it's own partial,
that is totally dedicated to variables.

85
00:05:52.410 --> 00:05:53.110
&gt;&gt; Audience 1: Yeah, okay.

86
00:05:53.110 --> 00:05:55.120
&gt;&gt; Mike North: Where it gets
a little more complicated,

87
00:05:55.120 --> 00:05:57.510
is if you're building
on top of a framework.

88
00:05:57.510 --> 00:05:59.080
Because in that case,

89
00:05:59.080 --> 00:06:02.880
there would be certain things that they're
trying to customize, say in Bootstrap.

90
00:06:02.880 --> 00:06:04.500
&gt;&gt; Audience 1: I don't use
&gt;&gt; Mike North: Right.

91
00:06:04.500 --> 00:06:06.510
What, maybe-
&gt;&gt; Audience 1: I see, yeah.

92
00:06:06.510 --> 00:06:07.240
&gt;&gt; Mike North: People do.

93
00:06:07.240 --> 00:06:07.900
&gt;&gt; Audience 1: Yeah.

94
00:06:07.900 --> 00:06:12.150
&gt;&gt; Mike North: And then I would
wanna break out things that are like

95
00:06:12.150 --> 00:06:15.500
bootstrap customizations
from my own variables.

96
00:06:15.500 --> 00:06:16.800
&gt;&gt; Audience 1: Right.
&gt;&gt; Mike North: And the reason there is

97
00:06:16.800 --> 00:06:21.100
that if I need to do
an update in a library and

98
00:06:21.100 --> 00:06:27.800
there may be new variables that are
introduced, I want to really keep track of

99
00:06:27.800 --> 00:06:33.190
what I'm bringing in versus what
I'm defining out my own and

100
00:06:33.190 --> 00:06:37.140
also the ordering sometimes matters
which we're gonna get into in a moment.

101
00:06:38.640 --> 00:06:42.370
So variables always begin
with a dollar sign.

102
00:06:42.370 --> 00:06:47.970
Right, and it looks just like our
style declarations here, right?

103
00:06:47.970 --> 00:06:50.180
It's like a colon between a name and

104
00:06:50.180 --> 00:06:53.610
a value,
variables always begin with a dollar sign.

105
00:06:53.610 --> 00:06:58.600
And then any valid CSS value
can be used as a variable value

106
00:06:58.600 --> 00:07:02.760
including weird stuff like
the value of box shadow,

107
00:07:02.760 --> 00:07:08.860
which is like Pixel values and colors and

108
00:07:08.860 --> 00:07:12.870
radiuses, and you can even have
multiple shadows separated by commas.

109
00:07:12.870 --> 00:07:14.745
You could use that as
the variable value as well.

110
00:07:17.130 --> 00:07:21.536
&gt;&gt; Mike North: This bang default,
right, this is not

111
00:07:21.536 --> 00:07:26.608
the exclamation mark
here does not mean not,

112
00:07:26.608 --> 00:07:30.320
how many negatives sees that.

113
00:07:30.320 --> 00:07:35.040
So, I assume that anyone who's
looked with CSS has seen

114
00:07:35.040 --> 00:07:37.310
exclamation mark important before.

115
00:07:37.310 --> 00:07:41.910
This just fits in the same of
like key words that we can use.

116
00:07:43.230 --> 00:07:46.670
What we've done here is we've set
error_color up as what's called

117
00:07:46.670 --> 00:07:48.480
a default variable.

118
00:07:48.480 --> 00:07:51.700
And that means that this
value will only be used

119
00:07:51.700 --> 00:07:54.940
if error_color has not
been defined elsewhere.

120
00:07:54.940 --> 00:07:59.970
So if we've already defined
error_color earlier up in this file,

121
00:07:59.970 --> 00:08:02.050
this will not override that.

122
00:08:02.050 --> 00:08:03.584
This will not override that.

123
00:08:03.584 --> 00:08:04.660
And oftentimes,

124
00:08:04.660 --> 00:08:08.840
you will see that bootstrap and
material design frameworks and

125
00:08:08.840 --> 00:08:13.360
the like, they will define their variables
in terms of these kinds of things.

126
00:08:13.360 --> 00:08:18.350
So that what you can do is like in
our example on the previous screen

127
00:08:18.350 --> 00:08:21.090
where we can bring in bootstrap.

128
00:08:21.090 --> 00:08:25.940
So above the bootstrap import,
you could set some variable values here.

129
00:08:25.940 --> 00:08:30.770
And then when bootstrap kind of goes to
reading it's sass and it's variables file,

130
00:08:30.770 --> 00:08:34.680
it will encounter things that will
express these default variables.

131
00:08:34.680 --> 00:08:39.790
And by kind of defining something first
before you bring bootstrap in it all,

132
00:08:39.790 --> 00:08:44.740
your custom value will be used in
assembling bootstrap together,

133
00:08:44.740 --> 00:08:47.510
and this could be like Paddings or
colors or

134
00:08:47.510 --> 00:08:51.530
fonts, anything that is
parametrize in those frameworks.

135
00:08:51.530 --> 00:08:55.143
So that's the purpose of
using these default values.

136
00:08:58.092 --> 00:09:02.860
&gt;&gt; Mike North: In here, we have what's
called a local variable declaration.

137
00:09:02.860 --> 00:09:06.890
And if you are a JavaScript developer,

138
00:09:06.890 --> 00:09:11.910
this may be useful to think of this
as something defined inside a closure

139
00:09:13.370 --> 00:09:18.540
in that if we had other things
nested inside alert error,

140
00:09:18.540 --> 00:09:21.070
they would also have access to text color.

141
00:09:22.360 --> 00:09:26.670
This is, in my opinion,
an underutilized feature of SAS

142
00:09:26.670 --> 00:09:31.190
because what it lets us do is
have easy to manage names.

143
00:09:31.190 --> 00:09:33.850
We don't have to name space
everything globally and

144
00:09:33.850 --> 00:09:39.600
make it alert_error_default_text_color.

145
00:09:39.600 --> 00:09:44.030
We can just use short names that are
meaningful because they're only pertinent

146
00:09:44.030 --> 00:09:50.730
in the context of the declaration
block inside which they're defined.

147
00:09:50.730 --> 00:09:54.010
And so you don't have to
worry about like all of that

148
00:09:54.010 --> 00:09:57.570
stuff we go through to avoid
collisions with other variables.

149
00:09:57.570 --> 00:10:00.570
So I really love using this kind of thing.

150
00:10:02.230 --> 00:10:06.230
And a sneak preview here,
there's something else I'm using here.

151
00:10:06.230 --> 00:10:11.890
I'm using a SASS function at the bottom
to darken a text color by 40%.

152
00:10:11.890 --> 00:10:17.410
So SASS comes with a bunch on functions
that let us manipulate strings and

153
00:10:17.410 --> 00:10:21.590
adjust colors to other colors and
work with numbers and so on.

154
00:10:21.590 --> 00:10:25.470
We'll get into that later, but
just want to let you know what's ahead.

155
00:10:27.390 --> 00:10:34.040
So in terms of variables, using simple
arithmetic, it is totally fine.

156
00:10:34.040 --> 00:10:36.920
So for example,
if you have a variable that is like

157
00:10:38.370 --> 00:10:43.250
border width and then you want
a double thickness border somewhere.

158
00:10:43.250 --> 00:10:48.290
Then you can express it as
border dash width colon

159
00:10:48.290 --> 00:10:52.660
that variable *2 like for times two.

160
00:10:52.660 --> 00:10:54.590
You can do simple arithmetic just fine.

161
00:10:55.600 --> 00:11:00.890
And sass handles a lot of
typical unit conversion,

162
00:11:00.890 --> 00:11:03.540
so if you need to convert from like

163
00:11:06.550 --> 00:11:10.110
not possible to convert
like rams to pixels,

164
00:11:10.110 --> 00:11:15.560
you can't really do that just because you
have to take font metrics into account.

165
00:11:15.560 --> 00:11:20.620
But degrees to radians,
you could do that pretty easily.

166
00:11:20.620 --> 00:11:26.560
You could convert percent to
a decimal value, like 50% or .5.

167
00:11:26.560 --> 00:11:28.980
It's all regarded as the same thing.

168
00:11:28.980 --> 00:11:32.480
These are all what Sass
would treat as numbers.

169
00:11:32.480 --> 00:11:35.500
It almost like boils
everything bound to some

170
00:11:35.500 --> 00:11:38.090
base level where it
normalizes all numbers.

171
00:11:38.090 --> 00:11:41.560
And so you can inter-operate
between them degrees like.

172
00:11:42.590 --> 00:11:46.680
And again, any CSS value is
fine according a variable.

173
00:11:47.900 --> 00:11:51.160
So we have several different types
of variables that we can use.

174
00:11:52.550 --> 00:11:54.280
Four that we're gonna go over now, and

175
00:11:54.280 --> 00:11:57.850
two I will leave until later because
they're almost like data structures.

176
00:11:57.850 --> 00:12:00.620
They're not just primitive types.

177
00:12:00.620 --> 00:12:06.200
So the first is different types of
numbers, and so we've got points, percent,

178
00:12:06.200 --> 00:12:10.921
pixels, just numbers, right?

179
00:12:12.420 --> 00:12:15.130
We've got colors, which we can
express in a couple of different ways.

180
00:12:15.130 --> 00:12:20.370
We can use hex values, RGB components,
RGBA, or the reserved color names,

181
00:12:20.370 --> 00:12:25.622
the ridiculously long and sometimes
esoteric list of built-in CSS colors.

182
00:12:27.945 --> 00:12:31.310
&gt;&gt; Mike North: Strings are strings
nothing too interesting there.

183
00:12:31.310 --> 00:12:33.000
Booleans are booleans.

184
00:12:33.000 --> 00:12:40.860
So the two we're gonna put off until
later are the concept of lists and maps.

185
00:12:40.860 --> 00:12:45.690
And I will give you an example
of what a list and map would be.

186
00:12:45.690 --> 00:12:48.400
A list would be like port radius.

187
00:12:48.400 --> 00:12:53.850
We have several space delimited values
that all together they sort of,

188
00:12:53.850 --> 00:12:55.650
that can be a property value, right?

189
00:12:55.650 --> 00:13:00.150
Border radius has one property value and
its value is a list.

190
00:13:01.230 --> 00:13:04.890
Maps, we don't often
see in regular CSS but

191
00:13:04.890 --> 00:13:10.310
if you have ever used the Sass
feature where you can say heading: and

192
00:13:10.310 --> 00:13:14.982
open a new declaration block and
say top:5px

193
00:13:14.982 --> 00:13:22.590
bottom:2px that key value
relationship there is a map.

194
00:13:22.590 --> 00:13:27.800
You have an ordered collection and
a key value pair data structure.

195
00:13:27.800 --> 00:13:30.103
Almost like an array and
an object in JavaScript.

196
00:13:34.020 --> 00:13:38.027
&gt;&gt; Mike North: So one thing you'll
need to know for the next exercise or

197
00:13:38.027 --> 00:13:43.420
it will be useful to know is a little
bit about Sass comments work.

198
00:13:43.420 --> 00:13:48.930
So block style comments end up
being preserved in the output CSS

199
00:13:48.930 --> 00:13:51.450
in line comments always get rid of.

200
00:13:51.450 --> 00:13:58.600
The reason here is that in line comments
are not part of the strict CSS spec.

201
00:13:58.600 --> 00:14:01.140
So the effect cannot be preserve.

202
00:14:01.140 --> 00:14:05.840
So it's not so much that it was designed
this way, but if you haven't desire to

203
00:14:05.840 --> 00:14:10.590
make in line comments, know that there's
just no way, other than like turning it

204
00:14:10.590 --> 00:14:16.060
into a block for example for it to be
passed on to what the browser consumes.

205
00:14:19.110 --> 00:14:21.260
So one of the things I
love using comments for,

206
00:14:21.260 --> 00:14:26.150
especially as I build my CSS,
is something called string interpolation.

207
00:14:26.150 --> 00:14:32.560
This is where we can take like a variable,
or the output of a SASS function.

208
00:14:32.560 --> 00:14:37.460
And we can render it,
we can place it into our CSS

209
00:14:37.460 --> 00:14:42.720
somewhere into our using
this pound sign and braces.

210
00:14:42.720 --> 00:14:46.260
So essentially, what we're saying
is we're taking the color green.

211
00:14:46.260 --> 00:14:50.040
We're passing it into one of these
built in color functions called hue.

212
00:14:50.040 --> 00:14:57.360
Which hue was the rotation around the
color wheel that a particular color is so

213
00:14:57.360 --> 00:15:02.500
it has a value from zero through 360 for
degree value.

214
00:15:02.500 --> 00:15:07.630
So we are basically saying Hue is and
then we want the angle for

215
00:15:07.630 --> 00:15:12.640
green and what we get in
the outputs CSS is 120 degrees.

216
00:15:13.930 --> 00:15:18.060
If you're curious about like what is
this thing returning, you can always

217
00:15:18.060 --> 00:15:21.300
use a comment and just interpolate
the value right in the comment.

218
00:15:21.300 --> 00:15:24.510
You can interpolate values
in selector names or

219
00:15:24.510 --> 00:15:29.890
in property values or there are,

220
00:15:29.890 --> 00:15:33.530
I'm actually not aware of any limitations
of where you can interpolate values.

221
00:15:33.530 --> 00:15:36.380
In some places,
it would result in invalid CSS, and

222
00:15:36.380 --> 00:15:41.280
so that will throw things for a loop and
you won't get anything out, but

223
00:15:41.280 --> 00:15:45.900
I would just say if it makes sense
to you somewhere it probably does.

