WEBVTT

1
00:00:00.500 --> 00:00:05.140
&gt;&gt; Mike North: Variables are great, they
give us some ability to compose things.

2
00:00:05.140 --> 00:00:08.310
Right?
They give us the ability to define a color

3
00:00:08.310 --> 00:00:12.030
in one place and to bring it in to
several different style roles and

4
00:00:12.030 --> 00:00:13.830
several different partials.

5
00:00:13.830 --> 00:00:16.580
But we need a little
bit more if we want to

6
00:00:16.580 --> 00:00:19.210
compose things that are at a higher level.

7
00:00:19.210 --> 00:00:24.850
Like entire sets of declarations,
entire style rules themselves.

8
00:00:24.850 --> 00:00:29.734
And in SASS this is done by way
of something called mixins.

9
00:00:29.734 --> 00:00:35.200
So mixins are the primary way
of reusing style in SASS.

10
00:00:36.500 --> 00:00:41.260
The mental model here is that

11
00:00:41.260 --> 00:00:46.550
when you invoke a mixin, it's almost
like a function that returns some style.

12
00:00:46.550 --> 00:00:51.720
And that is merged right in to
wherever you define your include.

13
00:00:51.720 --> 00:00:53.810
Include is the way you consume a mixin.

14
00:00:53.810 --> 00:00:58.307
And when we look at the basic example use
case you'll see that sort of defining

15
00:00:58.307 --> 00:01:01.570
a mixin with @mixin and
bringing it in with @include.

16
00:01:03.773 --> 00:01:08.440
&gt;&gt; Mike North: So these things evaluate
to no style in and of themselves.

17
00:01:08.440 --> 00:01:14.030
So if you just had a CSS file and
there was entirely comprised

18
00:01:14.030 --> 00:01:19.060
of mixins and you turned it into a CSS
file, the file would be empty, right?

19
00:01:19.060 --> 00:01:22.250
These are designed to be consumed,
they don't really do anything in and

20
00:01:22.250 --> 00:01:23.039
of themselves.

21
00:01:24.510 --> 00:01:29.480
So, I advise having an underscore
mixins partial that you can bring in.

22
00:01:29.480 --> 00:01:33.960
Usually you'll want to bring in variables
first and then mixins after that because

23
00:01:33.960 --> 00:01:38.120
often times, you'll have a mixin that
might depend on a global variable.

24
00:01:38.120 --> 00:01:38.740
Right?

25
00:01:38.740 --> 00:01:42.960
If you have, apply a particular theme to

26
00:01:42.960 --> 00:01:47.320
something that might grab some
colors that are available globally.

27
00:01:47.320 --> 00:01:52.300
Alright so these aren't all necessarily
pure functions in that they define

28
00:01:52.300 --> 00:01:57.190
output simply because of inputs they might
borrow variables from the global scope,

29
00:01:57.190 --> 00:02:01.410
they certainly can.

30
00:02:01.410 --> 00:02:07.800
Here's an example of how we can define
a mixin so we're calling this Alert text.

31
00:02:07.800 --> 00:02:10.980
And it's just white text
on a red background.

32
00:02:10.980 --> 00:02:14.370
And we're making the text capitalized,
or small caps.

33
00:02:14.370 --> 00:02:19.830
And you can see here that we could
bring this mixin into two places.

34
00:02:21.900 --> 00:02:27.370
One for error texts, which might be
part of an alert, and the other here I'm

35
00:02:27.370 --> 00:02:33.230
doing something that resembles a form
validation error where I'm using the CSS

36
00:02:33.230 --> 00:02:38.850
adder function to basically
grab an HTML attribute and

37
00:02:38.850 --> 00:02:42.790
to use that as the content of
this little pseudo selector here.

38
00:02:42.790 --> 00:02:46.500
So two different use cases, one might be
a notification that something has gone

39
00:02:46.500 --> 00:02:51.940
wrong, the other would be this
is not a valid email address but

40
00:02:51.940 --> 00:02:56.440
they both are bringing in the same
red background white text.

41
00:02:59.710 --> 00:03:05.540
So mixins also allow you to define
variables that they take in and

42
00:03:05.540 --> 00:03:08.280
in fact this is the more common use.

43
00:03:08.280 --> 00:03:13.072
If you have a mixin that takes no
arguments, takes no variables,

44
00:03:13.072 --> 00:03:15.930
there is a better way to do that
that we will get into later.

45
00:03:18.260 --> 00:03:22.790
So here you can see that we're able to
pass in blue for the error text, and

46
00:03:22.790 --> 00:03:25.550
we're able to pass in red for has-error.

47
00:03:25.550 --> 00:03:29.851
And we're gonna get the equivalent
output that you would expect there,

48
00:03:29.851 --> 00:03:34.720
where it would be just as if we'd defined
those three style declarations in each of

49
00:03:34.720 --> 00:03:38.543
these two classes, but
the color would change in between them.

50
00:03:40.427 --> 00:03:43.131
&gt;&gt; Mike North: So
this is the basic concept,

51
00:03:43.131 --> 00:03:48.580
@mixin to define a mixin,
@ nclude to bring it in.

52
00:03:48.580 --> 00:03:51.330
Mixins do not need to
be preceded with a dot.

53
00:03:51.330 --> 00:03:53.214
You just start writing
the name of the thing,

