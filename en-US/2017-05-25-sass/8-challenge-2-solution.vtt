WEBVTT

1
00:00:00.340 --> 00:00:04.950
&gt;&gt; Mike North: So we're gonna go
though the solution to this exercise.

2
00:00:04.950 --> 00:00:11.650
But first, we had a question online
about what I'm using to test my CSS.

3
00:00:11.650 --> 00:00:16.710
So I'm gonna show you what exactly
how I'm testing the CSS and

4
00:00:16.710 --> 00:00:21.310
then show you a real way
of testing CSS that is not

5
00:00:23.250 --> 00:00:25.790
specifically oriented towards a workshop.

6
00:00:25.790 --> 00:00:31.850
So what I'm doing is, if I get rid
of this, give myself some room,

7
00:00:31.850 --> 00:00:37.830
I'm doing two things and
really only one of them is interesting.

8
00:00:37.830 --> 00:00:41.200
But the first thing I do here in my test,

9
00:00:41.200 --> 00:00:46.103
if you look at the tests.js
file In your public folder and

10
00:00:46.103 --> 00:00:51.927
you're familiar with JavaScript,
you'll see that oftentimes,

11
00:00:51.927 --> 00:00:57.300
I'll just end up calling
this hasStyle function.

12
00:00:57.300 --> 00:01:00.060
So I'll take you where
that hasStyle function is

13
00:01:00.060 --> 00:01:05.590
defined.
&gt;&gt; Mike North: It's here, I believe.

14
00:01:05.590 --> 00:01:10.030
Nope.
&gt;&gt; Mike North: There we go.

15
00:01:10.030 --> 00:01:10.660
This looks right.

16
00:01:11.910 --> 00:01:18.704
Here's my assert.
&gt;&gt; Mike North: I'm sorry.

17
00:01:18.704 --> 00:01:20.300
I'm jumping around here.

18
00:01:20.300 --> 00:01:24.868
It's in the root folder of
the project in Public, js.

19
00:01:24.868 --> 00:01:28.340
And then tester and utils.

20
00:01:28.340 --> 00:01:31.690
So in tester, you see here is
this assert that I'm using.

21
00:01:31.690 --> 00:01:36.535
And when I check.
&gt;&gt; Mike North: When I look at hasStyle,

22
00:01:36.535 --> 00:01:41.290
this basically goes amd fetches and
element in the HTML.

23
00:01:42.380 --> 00:01:46.190
And then if nothing is found,
I throw, right?

24
00:01:46.190 --> 00:01:50.190
Throwing is gonna be what indicates that
there's a failure of some sort, right?

25
00:01:50.190 --> 00:01:52.725
So there's that throw.
&gt;&gt; Mike North: And

26
00:01:52.725 --> 00:01:57.840
then I use this function that's available
on window called getComputedStyle.

27
00:01:57.840 --> 00:02:01.740
What this is gonna return is
an object that looks like

28
00:02:01.740 --> 00:02:05.970
a completely exhaustive style declaration,

29
00:02:05.970 --> 00:02:10.260
with like every property possible
to specify on an element.

30
00:02:10.260 --> 00:02:13.320
So you're gonna have everything
from text decoration,

31
00:02:13.320 --> 00:02:17.740
to opacity, to font size, and
I can iterate over those.

32
00:02:17.740 --> 00:02:21.500
And basically,
on a property by property basis, assert

33
00:02:21.500 --> 00:02:25.830
that the important things I wanna check
for have the values that I want to check.

34
00:02:25.830 --> 00:02:31.560
Now one down side of this is that
things kind of get boiled down to,

35
00:02:31.560 --> 00:02:34.760
sometimes they get boiled down to values
that look a different from what we

36
00:02:34.760 --> 00:02:36.490
specify in our style sheets.

37
00:02:36.490 --> 00:02:38.540
Which is why occasionally
in these test failures,

38
00:02:38.540 --> 00:02:43.610
you're seeing RGB colors like
I expected this RGB color.

39
00:02:43.610 --> 00:02:46.890
Like ultimately, that's the value
that these things end up getting,

40
00:02:46.890 --> 00:02:51.310
even though we might have defined
it using a hex color value.

41
00:02:51.310 --> 00:02:55.450
But I have no control over how
it eventually gets resolved.

42
00:02:55.450 --> 00:03:00.100
But getComputedStyle is a great
way of figuring out ultimately,

43
00:03:00.100 --> 00:03:03.576
on the screen,
what's the style of this thing?

44
00:03:03.576 --> 00:03:07.237
After all the classes
have been defined and

45
00:03:07.237 --> 00:03:11.516
everything comes out,
what does it end up being?

46
00:03:11.516 --> 00:03:16.258
So then when I run through and
I test everything,

47
00:03:16.258 --> 00:03:21.263
which I think is
&gt;&gt; Mike North: Down here.

48
00:03:21.263 --> 00:03:25.913
So I basically run those
assertions one by one.

49
00:03:25.913 --> 00:03:32.150
And if they throw, I call unfail, which is
gonna add an error message to the screen.

50
00:03:32.150 --> 00:03:37.140
So I kind of built this just for
the workshop, you wouldn't wanna do this

51
00:03:37.140 --> 00:03:42.630
as a way of testing that your
CSS is what you want it to be.

52
00:03:42.630 --> 00:03:47.467
Because it's a little bit too
much like asserting that things

53
00:03:47.467 --> 00:03:49.708
are as you set them, right?

54
00:03:49.708 --> 00:03:54.232
Imagine if you had to say I set
this variable equal to 15 and

55
00:03:54.232 --> 00:03:58.910
now I'm gonna assert that it
equals 15 in a test like.

56
00:03:58.910 --> 00:04:00.700
There is really now a lot of value there.

57
00:04:00.700 --> 00:04:04.045
I'm gonna saw you something
that is a step up.

58
00:04:04.045 --> 00:04:07.181
And this is company called Percy.

59
00:04:07.181 --> 00:04:14.080
They integrate with GitHub and
provide you with image based diff testing.

60
00:04:14.080 --> 00:04:18.880
So what we're seeing here is
like screenshots of a page.

61
00:04:18.880 --> 00:04:24.240
And when you run through your integration
tests and your unit tests, like Travis CI

62
00:04:24.240 --> 00:04:29.240
or CircleCI, something like this, what it
will do is it'll keep track of screenshots

63
00:04:29.240 --> 00:04:33.440
of the most recently applied,
like most recently approved build.

64
00:04:33.440 --> 00:04:39.360
And if there is a per pixel difference as
you take screen shots for the next build,

65
00:04:39.360 --> 00:04:45.040
which it does using an automated tool,
that's like a headless version of Firefox.

66
00:04:45.040 --> 00:04:49.300
It actually like sends HTML over wire,
like over the network,

67
00:04:49.300 --> 00:04:53.120
which is then rendered in Firefox,
in their cloud.

68
00:04:53.120 --> 00:04:58.018
You can see here, we've got like red
highlights where things have changed.

69
00:04:58.018 --> 00:05:01.768
You could even specify
like certain selectors.

70
00:05:01.768 --> 00:05:06.221
Like take a screenshot of this box here,
so you can like cut out the navbar so

71
00:05:06.221 --> 00:05:09.983
that's not gonna trigger changes
on all of your screenshots.

72
00:05:09.983 --> 00:05:13.665
And ultimately, you can have maybe
a product donor come in here and

73
00:05:13.665 --> 00:05:16.820
they just have to give a manual
thumbs up saying like, yes

74
00:05:16.820 --> 00:05:21.596
these differences in the way the screens
look, that is intended, that is approved.

75
00:05:21.596 --> 00:05:25.902
And then that actually integrates
with the approval system in GitHub.

76
00:05:25.902 --> 00:05:28.430
Just like your test passes and fails.

77
00:05:28.430 --> 00:05:32.650
So if you hook this up with like a CD
pipeline, continuous deployment pipeline,

78
00:05:33.870 --> 00:05:37.820
It can end up being a sign off,
just clicking a button saying yes,

79
00:05:37.820 --> 00:05:42.590
this looks good, that results in your
new app being sent to production, right?

80
00:05:42.590 --> 00:05:45.270
So I like this way of
testing your styles better.

81
00:05:45.270 --> 00:05:52.350
It's sort of a bottom line thing, where if
you change some colors, it would pop up.

82
00:05:52.350 --> 00:05:56.095
But you don't have to get into
the granular nuts and bolts of each and

83
00:05:56.095 --> 00:05:59.853
every rule of your styles and
each and every possible combination.

84
00:05:59.853 --> 00:06:02.060
Like asserting that
those are what they are.

85
00:06:02.060 --> 00:06:05.690
Now this is something that you
can't run locally very easily.

86
00:06:05.690 --> 00:06:09.281
It's also not free.
&gt;&gt; Mike North: So

87
00:06:09.281 --> 00:06:13.600
it's not really appropriate for the kind
of exercises that we're going through.

88
00:06:13.600 --> 00:06:17.740
But the rumor that we
can't test CSS is false.

89
00:06:17.740 --> 00:06:23.322
And image based testing is sort of the way
to go about it as far as I know, right?

90
00:06:23.322 --> 00:06:26.418
This is what, in particular.

91
00:06:26.418 --> 00:06:28.310
My computer went to sleep, sorry.

92
00:06:28.310 --> 00:06:32.270
In particular,
this is what like newspaper sites do.

93
00:06:32.270 --> 00:06:35.720
I know BBC has an open
source library called Wraith

94
00:06:35.720 --> 00:06:37.465
that does something very similar to this.

95
00:06:37.465 --> 00:06:42.682
Where they're very sensitive to making
sure that layouts of particular articles,

96
00:06:42.682 --> 00:06:46.506
because essentially,
they have very dynamic content with.

97
00:06:46.506 --> 00:06:48.220
Their layouts are not fixed.

98
00:06:48.220 --> 00:06:52.120
And so they have a couple representative
articles of several types and

99
00:06:52.120 --> 00:06:55.030
they just make sure that
all their CSS works there.

100
00:06:55.030 --> 00:06:57.814
So that's the low down on testing CSS.

101
00:06:57.814 --> 00:07:00.252
It's sort of a new idea.

102
00:07:00.252 --> 00:07:04.390
Like we obviously know we would love
to have test coverage around this area.

103
00:07:04.390 --> 00:07:09.170
But it is not well understood
what the best practices are.

104
00:07:09.170 --> 00:07:12.640
This has worked well for
me in enterprise apps and

105
00:07:12.640 --> 00:07:17.460
in tiny little startup apps and
in my own little training web sites.

106
00:07:17.460 --> 00:07:18.614
I tend to use Parsey,

107
00:07:18.614 --> 00:07:23.518
just because it plugs in really easily.
&gt;&gt; Mike North: So with that,

108
00:07:23.518 --> 00:07:28.025
let's go through the solution to this.

109
00:07:28.025 --> 00:07:31.365
So what we were looking for,
just as a reminder,

110
00:07:31.365 --> 00:07:33.733
is If we open up the exercise here.

111
00:07:33.733 --> 00:07:35.000
Let me make sure I'm still running it.

112
00:07:35.000 --> 00:07:36.310
And I am.

113
00:07:36.310 --> 00:07:42.565
So if we look in the parent folder, in our
exercises folder, and look at the HTML,

114
00:07:42.565 --> 00:07:48.661
we'll see that what we have is a container
with right nav applied to it, right?

115
00:07:48.661 --> 00:07:51.924
And we know that what we want is,
for the sidebar,

116
00:07:51.924 --> 00:07:55.602
when we have right nav applied,
to go to the right side.

117
00:07:55.602 --> 00:07:58.230
And the main content should
come over to the left.

118
00:07:58.230 --> 00:08:02.510
So we're going to open up
this source folder, app.scss.

119
00:08:02.510 --> 00:08:06.500
What we have here is the styles
that are required for

120
00:08:06.500 --> 00:08:09.400
what we're looking at on
our screen right now.

121
00:08:09.400 --> 00:08:14.197
And we are going to extend them so
that the right nav does what we want it

122
00:08:14.197 --> 00:08:17.251
to do.
&gt;&gt; Mike North: So the first thing I'm

123
00:08:17.251 --> 00:08:21.220
going to do is I want to put right nav
kind of at the bottom of my styles.

124
00:08:21.220 --> 00:08:23.640
This is a decorator class, right?

125
00:08:23.640 --> 00:08:26.380
This is, when we talk about bem,
this would be a modifier.

126
00:08:26.380 --> 00:08:32.470
It's a flag that changes
the way this block behaves.

127
00:08:32.470 --> 00:08:37.201
And we want it at the bottom,
because we want to make sure

128
00:08:37.201 --> 00:08:41.830
that It is overwriting some
of the default styles.

129
00:08:41.830 --> 00:08:46.588
Now it's overwriting the default styles
anyway because we have another class added

130
00:08:46.588 --> 00:08:50.555
to it, which is gonna be right-nav
&gt;&gt; Mike North: But to me,

131
00:08:50.555 --> 00:08:55.734
it makes a little bit more sense to also
have it below so that it's very clear.

132
00:08:55.734 --> 00:08:58.278
Even if you're reading
it from top to bottom,

133
00:08:58.278 --> 00:09:01.489
you can get an idea of what this
thing should do in general.

134
00:09:01.489 --> 00:09:05.050
And then you go down and you see,
here are the different modes.

135
00:09:05.050 --> 00:09:07.568
Here's the mobile specific stuff and
the right align stuff.

136
00:09:07.568 --> 00:09:12.910
And you're sort of easier on your
colleague developers by doing this.

137
00:09:14.100 --> 00:09:18.770
So inside the right-nav, what we're going
to end up doing is defining some of these

138
00:09:18.770 --> 00:09:25.220
same classes here, but in the context of
right-nav being applied to the container.

139
00:09:25.220 --> 00:09:29.102
So we're gonna probably
end up with a sidebar and

140
00:09:29.102 --> 00:09:34.012
a main in here somewhere.
&gt;&gt; Mike North: So currently,

141
00:09:34.012 --> 00:09:38.517
the side bar is 200 pixels while
we're gonna keep that, right?

142
00:09:38.517 --> 00:09:40.387
And when right-nav is applied,

143
00:09:40.387 --> 00:09:45.692
we want it to float right.
&gt;&gt; Mike North: And

144
00:09:45.692 --> 00:09:49.810
now we'll see that it is
overlapping on top of main content.

145
00:09:49.810 --> 00:09:51.606
If we were to inspect element,

146
00:09:51.606 --> 00:09:55.468
we can see that.
&gt;&gt; Mike North: It's over here,

147
00:09:55.468 --> 00:10:01.020
it's shrunken way down, It's all up
in main element's business there.

148
00:10:01.020 --> 00:10:05.630
So we're gonna wanna undo some of
the stuff up here that was done to

149
00:10:05.630 --> 00:10:08.080
make room for the side bar.

150
00:10:08.080 --> 00:10:11.470
For one, this margin left is not
what we're looking for here.

151
00:10:11.470 --> 00:10:16.495
In fact, we're probably gonna want
the exact same thing on the right side and

152
00:10:16.495 --> 00:10:18.212
from margin left to be 0.

153
00:10:18.212 --> 00:10:22.736
So did anyone notice that I've
got these little stacks of things

154
00:10:22.736 --> 00:10:27.080
popping up to the left of
my CSS style declarations?

155
00:10:27.080 --> 00:10:29.440
These are CSS triggers.

156
00:10:29.440 --> 00:10:33.928
This is a nice little
visual studio code plugin.

157
00:10:33.928 --> 00:10:38.933
Let me make a little room for myself here
so that we can show it on the screen more

158
00:10:38.933 --> 00:10:44.601
easily.
&gt;&gt; Mike North: So there are three

159
00:10:44.601 --> 00:10:50.320
things you need to worry about in terms
of like the cost of a style declaration.

160
00:10:50.320 --> 00:10:55.954
And that is whether one or two or
three of three things potentially

161
00:10:55.954 --> 00:11:00.673
needs to be updated as a result
of applying this style.

162
00:11:00.673 --> 00:11:05.650
One of them is composite, one of them
is paint, and one of them is layout.

163
00:11:05.650 --> 00:11:08.923
So an example of something that
would affect layout is changing

164
00:11:08.923 --> 00:11:12.208
things that have to do with the box
model of an element, right?

165
00:11:12.208 --> 00:11:16.476
It's width, height, padding,
margin, something like that.

166
00:11:16.476 --> 00:11:18.950
Box shadow, right?

167
00:11:18.950 --> 00:11:23.230
And so in this case, margin right is
definitely going to require layout.

168
00:11:23.230 --> 00:11:25.880
And so when we think about like reflowing,
right?

169
00:11:25.880 --> 00:11:30.710
These are CSS things that when you apply
them, things are gonna sort of potentially

170
00:11:30.710 --> 00:11:33.474
end up juggling around
the screen a little bit.

171
00:11:33.474 --> 00:11:34.660
That is costly.

172
00:11:34.660 --> 00:11:39.020
That is asking the browser's
layout engine to do some work.

173
00:11:39.020 --> 00:11:40.860
And it's not cheap work.

174
00:11:40.860 --> 00:11:43.479
Painting is relatively cheap.

175
00:11:43.479 --> 00:11:45.830
And that would be like changing
the color of something.

176
00:11:45.830 --> 00:11:50.270
So if we go up here and
we look at background here,

177
00:11:50.270 --> 00:11:54.850
this one is saying that it only
require composite and paint, right?

178
00:11:54.850 --> 00:11:58.640
Background color could not change
the organization of our elements

179
00:11:58.640 --> 00:11:59.220
on the screen.

180
00:11:59.220 --> 00:12:04.065
So you can see that the purple item here,
which represents the layout,

181
00:12:04.065 --> 00:12:06.406
we don't have to pay that price for

182
00:12:06.406 --> 00:12:11.524
background.
&gt;&gt; Mike North: Compositing has to do with

183
00:12:11.524 --> 00:12:18.590
taking multiple layers of CSS and kind of
figuring out what goes on top of what.

184
00:12:18.590 --> 00:12:21.260
So oftentimes,
you can't get away from compositing.

185
00:12:21.260 --> 00:12:26.600
That's sort of the lowest level price that
you have to pay, if that makes sense.

186
00:12:26.600 --> 00:12:30.120
And let me see if I can get one
that just does compositing.

187
00:12:30.120 --> 00:12:35.050
I'm just taking a guess here.
&gt;&gt; Mike North: Yep, there you go.

188
00:12:35.050 --> 00:12:36.220
Opacity.

189
00:12:36.220 --> 00:12:39.040
Opacity is not changing any colors, right?

190
00:12:39.040 --> 00:12:45.002
So we don't have to like figure out
that ff6631 is equal to what color and

191
00:12:45.002 --> 00:12:47.713
let's redraw that on the screen.

192
00:12:47.713 --> 00:12:51.150
But we have some intermediate layers
in memory and the browser and

193
00:12:51.150 --> 00:12:55.190
we're gonna need to figure out
how those things blend together.

194
00:12:55.190 --> 00:12:56.740
So those are those three layers.

195
00:12:56.740 --> 00:12:59.580
Compositing is sort of
blending of things together.

196
00:12:59.580 --> 00:13:04.200
Painting is redrawing
certain areas because you've

197
00:13:04.200 --> 00:13:07.970
changed those intermediate
layers that get composited.

198
00:13:07.970 --> 00:13:11.800
One or more of them has, It needs
an update because you've changed something

199
00:13:11.800 --> 00:13:14.370
about it that's going to mean we
need to do something new there.

200
00:13:14.370 --> 00:13:17.340
And then finally,
the most expensive is layout.

201
00:13:17.340 --> 00:13:18.439
And that really,

202
00:13:18.439 --> 00:13:23.129
the expensive work there is we have to
recalculate the size of many things and

203
00:13:23.129 --> 00:13:28.206
figure out how they should all fit onto
a screen of that particular width, right?

204
00:13:28.206 --> 00:13:30.290
This is very expensive.

205
00:13:30.290 --> 00:13:32.880
This is like much more expensive
than either of the other two.

206
00:13:34.150 --> 00:13:38.958
So although oftentimes,
you can't really get away with,

207
00:13:38.958 --> 00:13:43.487
there's not too much you can
do with this information.

208
00:13:43.487 --> 00:13:46.671
One thing that we could see here, though,

209
00:13:46.671 --> 00:13:51.624
is if we had to choose between opacity and
then changing the color to

210
00:13:51.624 --> 00:13:56.615
something like this.
&gt;&gt; Mike North: Right,

211
00:13:56.615 --> 00:14:00.820
like if we added an alpha channel to
a color versus change the opacity,

212
00:14:00.820 --> 00:14:04.610
we can see that one's a little
bit cheaper than the other.

213
00:14:04.610 --> 00:14:08.354
So this is getting into some really
granular optimization stuff here.

214
00:14:09.822 --> 00:14:10.910
&gt;&gt; Mike North: All right.

215
00:14:10.910 --> 00:14:15.022
Now, I promise I'm actually
going through the solution here.

216
00:14:15.022 --> 00:14:16.325
It was a useful tangent.

217
00:14:16.325 --> 00:14:22.594
[LAUGH] So we're floating.
&gt;&gt; Mike North: So we've

218
00:14:22.594 --> 00:14:28.200
got margin auto here, we've got margin
right of 220 pixels on main content.

219
00:14:28.200 --> 00:14:31.608
Margin left should be 0 for main.

220
00:14:31.608 --> 00:14:34.480
And now, we can see we're
already looking pretty good.

221
00:14:34.480 --> 00:14:37.760
We've got our side bar on our right,
we've got main content on the left.

222
00:14:37.760 --> 00:14:40.970
Those look like they're about level
in terms of where those headings are.

223
00:14:40.970 --> 00:14:45.350
So it looks like the padding is not
something I'm going to have to deal with.

224
00:14:46.460 --> 00:14:53.430
I will have to mess with the border
a little bit here on the main element and

225
00:14:53.430 --> 00:14:59.733
move that border to the right and
set border-left equal to none.

226
00:14:59.733 --> 00:15:01.900
And we should be good to go.

227
00:15:01.900 --> 00:15:07.852
And so now, if I go back to my HTML,
remove right-nav and reapply it.

228
00:15:07.852 --> 00:15:09.143
So we've built a nice,

229
00:15:09.143 --> 00:15:13.733
lightweight little decorator class there
that lets us toggle between two different

230
00:15:13.733 --> 00:15:18.340
layouts just by applying this secondary
class that's acting like a flag.

231
00:15:18.340 --> 00:15:21.255
If we go and
look at the CCS that was generated her.

232
00:15:21.255 --> 00:15:24.261
Let me get rid of my sidebar so
we can see better.

233
00:15:24.261 --> 00:15:29.319
You can see that a lot of
this is broadly used and

234
00:15:29.319 --> 00:15:35.559
these are just the two extra
rules that were built for me.

235
00:15:35.559 --> 00:15:40.662
And now, we kind of get this two different
states of the container represented

236
00:15:40.662 --> 00:15:45.782
in as concise a way as you could possibly
get where you are writing from old CSS.

237
00:15:45.782 --> 00:15:51.487
But in our SaaS file, It's very clear
that this concept of right-nav,

238
00:15:51.487 --> 00:15:57.768
it's sort of a property, it's a mode
that this container can go into, right?

239
00:15:57.768 --> 00:16:00.000
It belongs in the context
of that container.

