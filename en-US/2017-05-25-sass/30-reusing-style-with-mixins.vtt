WEBVTT

1
00:00:00.240 --> 00:00:04.439
&gt;&gt; Mike: So, some people have been
waiting for this section all day and

2
00:00:04.439 --> 00:00:09.044
I want to just revisit something we
spoke about earlier called style

3
00:00:09.044 --> 00:00:11.897
reuse that we use mixins to reuse styles.

4
00:00:11.897 --> 00:00:13.761
We defined them once, and

5
00:00:13.761 --> 00:00:18.177
then we were able to include
that mixin into multiple places.

6
00:00:18.177 --> 00:00:21.340
And here's the result in
CSS on the right side.

7
00:00:21.340 --> 00:00:24.951
You see that if we bring danger
in both for a button and alerts,

8
00:00:24.951 --> 00:00:28.424
because we want both to have
a red background, white text,

9
00:00:28.424 --> 00:00:31.629
these are obviously two
unrelated concerns, right.

10
00:00:31.629 --> 00:00:34.948
For us to share a class between these,

11
00:00:34.948 --> 00:00:40.152
that would sort of that doesn't
really feel right in this.

12
00:00:40.152 --> 00:00:42.880
What we end up with this
style on the right.

13
00:00:42.880 --> 00:00:47.781
And what I want you to consider
is how much your styles end

14
00:00:47.781 --> 00:00:51.963
up growing as the mixin
danger ends up growing.

15
00:00:51.963 --> 00:00:54.363
Right, so that was ten lines.

16
00:00:54.363 --> 00:01:00.163
We have 20 lines of that mixin code on
the right side, that's because what ends

17
00:01:00.163 --> 00:01:05.986
up happening when you use a mixin is that
it's almost evaluated like a function.

18
00:01:05.986 --> 00:01:10.779
And the return value of that function
is just drop into that style

19
00:01:10.779 --> 00:01:15.502
declaration block wherever that
mixin was included, right.

20
00:01:15.502 --> 00:01:19.124
And sometimes we wanna be
a little bit more efficient and

21
00:01:19.124 --> 00:01:20.595
there is a way to do it.

22
00:01:20.595 --> 00:01:24.410
And it is using extend.

23
00:01:24.410 --> 00:01:26.195
Extend is a little bit
different than Mixin.

24
00:01:26.195 --> 00:01:30.048
It's another tool we can
use to reuse styles.

25
00:01:30.048 --> 00:01:37.013
But, you can think of this almost as
opting in to all behavior defined,

26
00:01:37.013 --> 00:01:40.974
or all styles defined on another class.

27
00:01:40.974 --> 00:01:44.162
So in this case,
we define a class called danger.

28
00:01:44.162 --> 00:01:48.706
And then .btn-danger is basically
defined as, I wanna do everything that

29
00:01:48.706 --> 00:01:53.116
.danger was doing, but in addition
to that, also to pixels of padding.

30
00:01:53.116 --> 00:01:55.518
And then alert danger says, same here.

31
00:01:55.518 --> 00:02:00.661
Everything that danger was doing,
but in addition to that 100% width.

32
00:02:00.661 --> 00:02:05.436
And what we end up with is style
that doesn't repeat itself at all on

33
00:02:05.436 --> 00:02:10.218
the right hand side, yes.
&gt;&gt; Speaker 2: Unless you're using LESS.

34
00:02:10.218 --> 00:02:11.309
&gt;&gt; Mike: Unless you're using-

35
00:02:11.309 --> 00:02:12.056
&gt;&gt; Speaker 2: LESS.

36
00:02:12.056 --> 00:02:12.683
&gt;&gt; Mike: LESS.

37
00:02:12.683 --> 00:02:15.328
&gt;&gt; Speaker 2: LESS doesn't handle it that

38
00:02:15.328 --> 00:02:19.253
way and it's stupid.
&gt;&gt; Mike: LESS does-

39
00:02:19.253 --> 00:02:19.869
&gt;&gt; Speaker 3: LESS as opposed to

40
00:02:19.869 --> 00:02:20.578
SASS.
&gt;&gt; Speaker 2: Yeah.

41
00:02:20.578 --> 00:02:23.188
&gt;&gt; [CROSSTALK]

42
00:02:23.188 --> 00:02:23.688
&gt;&gt; Mike: Yes.

43
00:02:23.688 --> 00:02:24.188
&gt;&gt; Speaker 2: Yeah.

44
00:02:24.188 --> 00:02:25.509
&gt;&gt; Mike: So extend works differently in

45
00:02:25.509 --> 00:02:28.863
LESS than it does in SASS.
&gt;&gt; Speaker 2: Yeah, in a bad way,

46
00:02:28.863 --> 00:02:34.234
that's good, just as an FYI.
&gt;&gt; Mike: Good point, yeah, so you'll

47
00:02:34.234 --> 00:02:39.340
see a similar concept in less, but it
doesn't try to consolidate there concerns

48
00:02:39.340 --> 00:02:44.155
into a single declaration block here.
Where you're basically adding

49
00:02:44.155 --> 00:02:48.959
selectors to the same declaration block.
Now this can get you

50
00:02:48.959 --> 00:02:53.740
into trouble because if I
were looking at this code and

51
00:02:53.740 --> 00:02:59.479
it started to get big,
you sometimes lose track of which classes

52
00:02:59.479 --> 00:03:02.917
are around just to be extended from.
So

53
00:03:02.917 --> 00:03:07.169
maybe some of them are extended from, and
they're also used in and of themselves.

54
00:03:07.169 --> 00:03:09.856
And if you imagine that these three things

55
00:03:09.856 --> 00:03:14.158
were broken out across different
files different partials in your

56
00:03:14.158 --> 00:03:19.052
collection of SASS files.
It would be really easy to change danger

57
00:03:19.052 --> 00:03:25.178
without having any awareness that is
going to effect these two other things.

58
00:03:25.178 --> 00:03:28.095
SASS also has an answer for this and

59
00:03:28.095 --> 00:03:30.981
it is the idea of placeholders.
So

60
00:03:30.981 --> 00:03:35.875
placeholders are just like classes,
they begin with a percent sign and

61
00:03:35.875 --> 00:03:41.272
the key difference here is that the output
here does not contain danger at all.

62
00:03:41.272 --> 00:03:45.699
It exists solely to to be extended from.

63
00:03:45.699 --> 00:03:47.812
It is there only as a construct that can

64
00:03:47.812 --> 00:03:49.973
be extended from.
And therefore,

65
00:03:49.973 --> 00:03:53.974
when you come across one of these,
you know that obviously,

66
00:03:53.974 --> 00:03:57.533
same as when I change a variable.
This is going to have a ripple

67
00:03:57.533 --> 00:04:01.287
effect throughout my code.
And I probably should do a search to

68
00:04:01.287 --> 00:04:06.249
see who is consuming this and talk to
them and make sure this is okay that I

69
00:04:06.249 --> 00:04:10.549
modify this thing.
So a practice that sounds pretty good to

70
00:04:10.549 --> 00:04:15.437
me and I haven't really clipped
over my shoes laces yet with it, so

71
00:04:15.437 --> 00:04:19.830
I have advocated it as much as
I am comfortable advocating.

72
00:04:19.830 --> 00:04:22.844
It is the idea that this is an approach

73
00:04:22.844 --> 00:04:28.209
you can take Instead of mixins,
when no variables are involved.

74
00:04:28.209 --> 00:04:31.098
When we simply want to share a style

75
00:04:31.098 --> 00:04:36.878
block, across multiple concerns and
there are no colors to pass, or

76
00:04:36.878 --> 00:04:41.788
no hue rotation involved in the picture.
This is totally fine to use.

77
00:04:41.788 --> 00:04:44.689
And I would say using placeholders

78
00:04:44.689 --> 00:04:49.100
is really the one of the only
safe ways to use extend.

79
00:04:49.100 --> 00:04:52.169
Extend can get out of control really

80
00:04:52.169 --> 00:04:53.316
quickly.
So

81
00:04:53.316 --> 00:04:58.806
if we have a situation like this
even with a placeholder and

82
00:04:58.806 --> 00:05:05.416
a seemingly innocent selector here
can end up generating a whole bunch

83
00:05:05.416 --> 00:05:10.464
of garbage in your in your output CSS.
So especially remember,

84
00:05:10.464 --> 00:05:14.424
when you have like, in the source of
the problem here of course is that,

85
00:05:14.424 --> 00:05:18.714
we've got a lot of nesting and we've
also got multiple selectors pend to each

86
00:05:18.714 --> 00:05:22.915
declaration block.
So we almost get the all possible per

87
00:05:22.915 --> 00:05:28.027
mutations of these thing is now
added to the same style role.

88
00:05:28.027 --> 00:05:31.196
And this can cause your CSS to blow up in

89
00:05:31.196 --> 00:05:36.788
size faster than just about anything.
So some people have linting rules

90
00:05:36.788 --> 00:05:41.366
in place that prevent the use of extend.
And it is for this reason, and

91
00:05:41.366 --> 00:05:46.617
the reason I just mentioned.
Inadvertent modifications to your code,

92
00:05:46.617 --> 00:05:51.924
they seem fine, but then you realize
that six people were hopping

93
00:05:51.924 --> 00:05:56.504
on top of this rule and you had no idea.
You didn't know that you

94
00:05:56.504 --> 00:06:01.004
were gonna affect that and they just
started inheriting from this rule, and

95
00:06:01.004 --> 00:06:03.733
now you've broken their stuff, right?
And

96
00:06:03.733 --> 00:06:08.562
this is the other reason because
pretty soon your CSS is just really,

97
00:06:08.562 --> 00:06:14.034
really selector heavy.
No amount of minification is gonna solve

98
00:06:14.034 --> 00:06:19.781
this problem, it's bad.
Gzipping does help,

99
00:06:19.781 --> 00:06:25.288
but this is not good, so avoid it.
And

100
00:06:25.288 --> 00:06:31.167
the way to avoid it is to keep your
extends at a relatively high level.

101
00:06:31.167 --> 00:06:33.339
Don't go incredibly deep.

102
00:06:33.339 --> 00:06:34.081
Deep selectors

103
00:06:34.081 --> 00:06:38.999
in general are not a great idea.
So, I forget the name of who the author of

104
00:06:38.999 --> 00:06:43.569
this blog post but
there's a great concept put forward

105
00:06:43.569 --> 00:06:48.090
called the inception rule.
If anything you'll see inception,

106
00:06:48.090 --> 00:06:51.924
if you don't go more than four
layers deep into the dream world, or

107
00:06:51.924 --> 00:06:55.963
it just starts to get the hell at
the bottom where there's the building

108
00:06:55.963 --> 00:07:00.919
scrambling all over the place.
So that's number one, and then number two

109
00:07:00.919 --> 00:07:05.680
like always his place holder.
It should extend, even if it involves,

110
00:07:05.680 --> 00:07:10.790
like creating another adapt danger class
that also comes from that place holder.

111
00:07:10.790 --> 00:07:11.332
At least,

112
00:07:11.332 --> 00:07:15.564
then if someone goes to modify that danger
'cause it's directly used somewhere.

113
00:07:15.564 --> 00:07:16.837
So, they are only like

114
00:07:16.837 --> 00:07:18.804
messing with that one thing.
Right,

115
00:07:18.804 --> 00:07:21.340
they are not sending those ripples
unintentionally through your code.

