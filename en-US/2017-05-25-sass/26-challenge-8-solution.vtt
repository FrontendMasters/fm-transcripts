WEBVTT

1
00:00:00.250 --> 00:00:02.600
&gt;&gt; Mike North: So
let's go through the solution for

2
00:00:02.600 --> 00:00:05.710
these little nudging classes
that I asked you to create.

3
00:00:05.710 --> 00:00:10.195
So just to review, we're looking for
a bunch of these little classes,

4
00:00:10.195 --> 00:00:14.256
each of which has a declaration
block containing only one rule.

5
00:00:14.256 --> 00:00:19.362
And the point of this is that we can,
in our HTML once we have these classes,

6
00:00:19.362 --> 00:00:24.143
add them to various elements that we
kind of need to just like bump off of

7
00:00:24.143 --> 00:00:27.336
the left side of the page or
off of the top edge.

8
00:00:27.336 --> 00:00:33.063
To create a little bit of extra
space without having to go in and

9
00:00:33.063 --> 00:00:37.924
add that CSS to the components themselves,
right.

10
00:00:37.924 --> 00:00:47.037
So let's begin,
&gt;&gt; Mike North: Okay,

11
00:00:47.037 --> 00:00:50.700
so looks like my old exercise
is not running anymore.

12
00:00:50.700 --> 00:00:59.480
I'm gonna start up the new one
with run -e tiny, and here we go.

13
00:00:59.480 --> 00:01:04.010
So these classes here on
the right they're around for

14
00:01:04.010 --> 00:01:07.000
two purposes,
one is my tests are running against them.

15
00:01:07.000 --> 00:01:11.216
And the other is that you could inspect
element on them to kinda see what's

16
00:01:11.216 --> 00:01:11.835
going on.

17
00:01:11.835 --> 00:01:16.822
But the visual feedback you're gonna
get is not gonna be quite as useful as

18
00:01:16.822 --> 00:01:21.179
when we are working on buttons and
we get to see colors changing.

19
00:01:21.179 --> 00:01:25.920
So for that reason I'm just gonna
kinda shove that off to the side.

20
00:01:25.920 --> 00:01:30.494
And let's open the exercise.

21
00:01:30.494 --> 00:01:35.158
tiny, all right, and so
we just have one SaaS file to

22
00:01:35.158 --> 00:01:40.142
work with now cuz we're just
focused on this one thing.

23
00:01:40.142 --> 00:01:46.331
So, the first thing I wanna do is to,
let's get a basic solution and

24
00:01:46.331 --> 00:01:50.689
let's see if we can iterate
on that from there.

25
00:01:50.689 --> 00:01:52.011
And that's another loop joke.

26
00:01:52.011 --> 00:01:57.943
[LAUGH] So I'm gonna do for
$i from 1 through 5,

27
00:01:57.943 --> 00:02:05.626
the reason is I'm gonna step five steps,
right, five steps.

28
00:02:05.626 --> 00:02:12.160
They are steps of 5 pixels but
I've got 5, 10, 15,20, 25 that I want.

29
00:02:12.160 --> 00:02:13.860
And so these each represent a step.

30
00:02:13.860 --> 00:02:19.020
And then within this loop I
can define a local variable,

31
00:02:19.020 --> 00:02:23.700
and I'm just gonna call it size,
sz for size, and

32
00:02:23.700 --> 00:02:27.590
we're gonna do i * 5.

33
00:02:27.590 --> 00:02:35.797
And then we can create a rule here,
&gt;&gt; Mike North: Called m-t-,

34
00:02:35.797 --> 00:02:40.805
and then this way we can interpolate which

35
00:02:40.805 --> 00:02:45.970
just means mixing literal texts, right.

36
00:02:45.970 --> 00:02:50.962
This part of the selector is literal
text that'll end up in our style sheet,

37
00:02:50.962 --> 00:02:52.536
in here we want values.

38
00:02:52.536 --> 00:02:57.040
If we were to just do this, or
a size, something like this,

39
00:02:57.040 --> 00:03:02.270
like what you'll end up with is literally
a class named this, in your CSS.

40
00:03:02.270 --> 00:03:05.020
That's not what we want,
we want the value of that thing.

41
00:03:05.020 --> 00:03:05.940
This is how we get the value.

42
00:03:07.870 --> 00:03:12.700
And then inside here, we're gonna do
margin top, and we have to interpolate

43
00:03:12.700 --> 00:03:17.980
again, only because we need to add a unit,
to the end of this value.

44
00:03:17.980 --> 00:03:21.983
So if we just did this,
&gt;&gt; Mike North: And

45
00:03:21.983 --> 00:03:26.577
then what will we do like px,
like that's a different variable name.

46
00:03:26.577 --> 00:03:28.652
Or here,
&gt;&gt; Mike North: That's not gonna work,

47
00:03:28.652 --> 00:03:30.450
it's not gonna like that.

48
00:03:30.450 --> 00:03:35.228
So, again, this thing, and

49
00:03:35.228 --> 00:03:38.125
we'll refresh.

50
00:03:38.125 --> 00:03:39.217
Or see what the output looks like here.

51
00:03:42.490 --> 00:03:45.780
&gt;&gt; Mike North: All right, so
we've got the beginnings of what we want.

52
00:03:45.780 --> 00:03:50.620
We've got five classes here in
steps of five pixels each of which

53
00:03:50.620 --> 00:03:54.040
bump the margin top out again and again.

54
00:03:54.040 --> 00:03:58.650
And we could totally copy and
paste this and do like margin bottom and

55
00:03:58.650 --> 00:04:01.380
then something like this.

56
00:04:01.380 --> 00:04:06.330
But let's see if we can do something
that is slightly more interesting,

57
00:04:06.330 --> 00:04:09.500
that kind of condenses a little bit more.

58
00:04:09.500 --> 00:04:12.760
In terms of the approach
that I would advise for

59
00:04:12.760 --> 00:04:17.630
using in your apps, this is probably the
actual approach that you would wanna do.

60
00:04:17.630 --> 00:04:20.350
Because it's easy to read,
it's understandable.

61
00:04:20.350 --> 00:04:23.400
You're reusing, you're being efficient and

62
00:04:23.400 --> 00:04:29.510
reusing the multiple of five across
many different things, right.

63
00:04:29.510 --> 00:04:34.140
But I want to take this opportunity
to show you how you could do like

64
00:04:34.140 --> 00:04:38.130
an over abstracted version of this,
and make use of data structures.

65
00:04:38.130 --> 00:04:43.380
So again, I do not advocate that
this is a sustainable solution.

66
00:04:43.380 --> 00:04:45.990
It is a solution that makes
use of some SaaS features.

67
00:04:47.620 --> 00:04:54.733
So I want to basically,
&gt;&gt; Mike North: Wrap this in another loop.

68
00:04:58.516 --> 00:05:01.358
&gt;&gt; Mike North: So
let's start with another loop like this.

69
00:05:01.358 --> 00:05:06.478
Each, we're gonna call
this a dimension in,

70
00:05:06.478 --> 00:05:09.639
and then we'll have a list.

71
00:05:13.420 --> 00:05:16.445
&gt;&gt; Mike North: Actually,
we need this list to live outside.

72
00:05:16.445 --> 00:05:23.963
Dimensions we're gonna have,
&gt;&gt; Mike North: m for

73
00:05:23.963 --> 00:05:29.150
margin and p for padding.

74
00:05:30.880 --> 00:05:33.410
So what we've created here is a map.

75
00:05:33.410 --> 00:05:34.468
How do we know this is a map?

76
00:05:34.468 --> 00:05:37.060
&gt;&gt; Students: Key value pairs.

77
00:05:37.060 --> 00:05:39.380
&gt;&gt; Mike North: Cuz I have key value pairs,
right?

78
00:05:39.380 --> 00:05:41.430
&gt;&gt; Mark: Does padding need a quote or not?

79
00:05:41.430 --> 00:05:43.612
&gt;&gt; Mike North: Padding does need a quote,
thank you Mr. Mark.

80
00:05:46.810 --> 00:05:48.850
&gt;&gt; Mike North: So here we can use each.

81
00:05:48.850 --> 00:05:51.990
Remember each is what we use to
iterate over a data structure for

82
00:05:51.990 --> 00:05:54.240
just kind of iterate
through a range of values.

83
00:05:54.240 --> 00:05:59.940
each and
we're gonna call it a dim in dimensions,

84
00:05:59.940 --> 00:06:04.159
and wrap our existing for loop here.

85
00:06:07.020 --> 00:06:07.968
&gt;&gt; Mike North: And so here,

86
00:06:07.968 --> 00:06:13.879
I'm gonna use more interpolation,
&gt;&gt; Mike North: And

87
00:06:13.879 --> 00:06:16.652
let's see what we end up with.

88
00:06:16.652 --> 00:06:21.495
Hold on, see this is
the difference between a literal

89
00:06:21.495 --> 00:06:25.056
value unlike a evaluating a variable.

90
00:06:25.056 --> 00:06:28.474
Okay, so this is interesting here.

91
00:06:31.520 --> 00:06:32.814
&gt;&gt; Mike North: I am getting, this is now
what I thought I would get, to be honest.

92
00:06:32.814 --> 00:06:41.235
So I've got an m which is coming from,
&gt;&gt; Mike North: This dim,

93
00:06:41.235 --> 00:06:44.410
it's actually the space
separated thing here.

94
00:06:44.410 --> 00:06:46.086
I think this is what I'm
getting the whole thing.

95
00:06:46.086 --> 00:06:51.872
Interesting, maybe I'm-
&gt;&gt; Speaker 4: Are you

96
00:06:51.872 --> 00:06:56.012
doing the nth on the-
&gt;&gt; Mike North: Yeah let's try nth,

97
00:06:56.012 --> 00:06:57.348
let's do that.

98
00:07:01.590 --> 00:07:05.890
&gt;&gt; Mike North: There we go,
thank you, you saved me.

99
00:07:05.890 --> 00:07:11.630
All right, margin top 10 and you can
see down here we got padding top 10.

100
00:07:12.650 --> 00:07:14.840
It's the wrong value down here but
we can fix that.

101
00:07:16.870 --> 00:07:23.110
So we can use the same trick here nth,
and use the second thing.

102
00:07:25.000 --> 00:07:30.720
And now padding top 10, padding top 25,
there's the value for padding.

103
00:07:30.720 --> 00:07:33.120
Now this is only dealing with top, right?

104
00:07:33.120 --> 00:07:36.380
So we could add another level
of iteration here like this.

105
00:07:40.600 --> 00:07:45.789
&gt;&gt; Mike North: Directions and
we could have t for top,

106
00:07:45.789 --> 00:07:50.986
b for bottom, l for left, r for right.

107
00:07:55.972 --> 00:08:01.630
&gt;&gt; Mike North: And just one more, again,
this is like, stupid complicated here.

108
00:08:01.630 --> 00:08:06.480
But, I hope it hammers the point home that
it is possible to do this kind of stuff.

109
00:08:07.960 --> 00:08:10.180
For, we'll call this dir for directions.

110
00:08:10.180 --> 00:08:17.044
In directions,
&gt;&gt; Mike North: And

111
00:08:17.044 --> 00:08:20.840
now, why is this complaining,

112
00:08:20.840 --> 00:08:24.498
dir I didn't do dir-
&gt;&gt; Speaker 5: Did you do each?

113
00:08:24.498 --> 00:08:29.302
&gt;&gt; Mike North: Each, thank you,
each, and now we can go down here and

114
00:08:29.302 --> 00:08:35.472
[LAUGH] we can use, we're really in
the weeds now, nth of directions.

115
00:08:39.187 --> 00:08:40.840
&gt;&gt; Mike North: And
we want the first thing in there.

116
00:08:42.690 --> 00:08:46.220
Sorry, I'm doing,
mixing my JavaScript and my SaaS here.

117
00:08:46.220 --> 00:08:50.996
All right, so if we look,
now we've got bottom, and left, and

118
00:08:50.996 --> 00:08:55.165
there's right, and
we just need the equivalent here.

119
00:08:59.349 --> 00:09:00.219
&gt;&gt; Mike North: All right,

120
00:09:00.219 --> 00:09:04.919
now our code has like lost all
semblance of meaning in Sass land.

121
00:09:04.919 --> 00:09:11.212
But it turns out to generate like these
tiny little classes that we need,

122
00:09:11.212 --> 00:09:17.570
it generates all of them, and
in a very small amount of code here.

123
00:09:17.570 --> 00:09:21.696
So, I said less than 15 lines,
let's see, well, there we go,

124
00:09:21.696 --> 00:09:25.999
we're at 15 lines as I kind of
collapse up this big map I've built.

125
00:09:31.103 --> 00:09:32.320
&gt;&gt; Mike North: And there we go.

126
00:09:32.320 --> 00:09:39.160
That is my over-engineered triple each
version of tiny little Sass classes.

127
00:09:40.550 --> 00:09:42.770
So where might you actually use this?

128
00:09:42.770 --> 00:09:47.950
You would use one for
loop to define a grid.

129
00:09:47.950 --> 00:09:51.767
Or you could say like I want a grid and
I'm gonna give it,

130
00:09:51.767 --> 00:09:54.590
like I want 12 columns for this grid.

131
00:09:54.590 --> 00:09:59.790
And for this column inside to be
like 3 of those 12 columns wide.

132
00:09:59.790 --> 00:10:03.770
And you could define it in a way where
you don't have to go and calculate

133
00:10:03.770 --> 00:10:07.900
a bunch of percentages on your own,
it can actually end up being time saving.

134
00:10:07.900 --> 00:10:15.010
However, like keep in mind, like use
common sense, this is not readable.

135
00:10:15.010 --> 00:10:20.525
If you came across this,
you would wonder what monstrosity,

136
00:10:20.525 --> 00:10:24.991
what Sass monstrosity has
someone created here.

137
00:10:24.991 --> 00:10:29.838
Again, the approach I would love to see,
like if I were reviewing code, would be

138
00:10:29.838 --> 00:10:34.710
a single for loop, taking an advantage of
the fact that we want five pixel steps.

139
00:10:34.710 --> 00:10:38.793
And then just explicitly write out each of
those properties, cuz then you can look at

140
00:10:38.793 --> 00:10:42.330
it, and you're like yes,
we're going up by five pixels at a time.

141
00:10:42.330 --> 00:10:46.559
You could leave a little comment in,
saying like we're stepping up by five and

142
00:10:46.559 --> 00:10:49.590
then your A class is there and
you're done, right.

143
00:10:49.590 --> 00:10:51.300
That is sustainable code to write.

144
00:10:51.300 --> 00:10:52.072
&gt;&gt; Speaker 6: Personally,

145
00:10:52.072 --> 00:10:56.585
I would just still even question why you
would need all those margins and paddings.

146
00:10:56.585 --> 00:11:01.564
&gt;&gt; Mike North: Yes, so it is a sign that
you may be doing things wrong if you

147
00:11:01.564 --> 00:11:04.890
need lots of classes like these.

148
00:11:04.890 --> 00:11:09.960
However, there is a school of thought
that I don't particularly agree with,

149
00:11:09.960 --> 00:11:11.630
around using what's called Atomic CSS.

150
00:11:11.630 --> 00:11:14.010
Where basically all of these,

151
00:11:14.010 --> 00:11:19.300
there's like a special set of classes
that's generated for you in advance.

152
00:11:19.300 --> 00:11:24.220
And then you compose those classes
together on your HTML to add a bunch of

153
00:11:24.220 --> 00:11:25.060
style.

154
00:11:25.060 --> 00:11:30.160
However, reading through that stuff you
need to be able to speak the language of

155
00:11:30.160 --> 00:11:33.050
Atomic CSS or
you don't know what the heck is going on.

156
00:11:33.050 --> 00:11:38.170
Just to show you what that looks like,
it's like,

157
00:11:38.170 --> 00:11:40.730
I am not fluent in it, I can't read it.

158
00:11:40.730 --> 00:11:43.873
But here is an example like
what a class might look like.

159
00:11:46.602 --> 00:11:49.698
&gt;&gt; Mike North: Right, clear as mud.

160
00:11:49.698 --> 00:11:52.640
&gt;&gt; Students: [LAUGH] Yeah.

161
00:11:52.640 --> 00:11:56.164
&gt;&gt; Mike North: But, so, people who are
proponents of this, they would argue that,

162
00:11:56.164 --> 00:11:57.914
like yes, your styles are small.

163
00:11:57.914 --> 00:11:59.235
And now you can kind of,

164
00:11:59.235 --> 00:12:03.150
you don't have to really worry about
adding more to your style sheet.

165
00:12:03.150 --> 00:12:08.920
And you can compose things together by
adding multiple classes to your HTML.

166
00:12:08.920 --> 00:12:13.400
Again, I don't get it, but
you will see it out there.

167
00:12:13.400 --> 00:12:17.455
And personally, I do use a couple of them,
like I like to use text align,

168
00:12:17.455 --> 00:12:20.260
I have like a text align left and
text align right.

169
00:12:20.260 --> 00:12:24.471
Because oftentimes I don't wanna
entangle that concept with like

170
00:12:24.471 --> 00:12:26.680
a particular component.

171
00:12:26.680 --> 00:12:30.112
Sometimes you might want things
pulled over in one direction or

172
00:12:30.112 --> 00:12:34.660
the other and it's nice to have a little
class that's just a little utility thing.

173
00:12:34.660 --> 00:12:37.652
Bootstrap has a couple of
these that involve hiding or

174
00:12:37.652 --> 00:12:40.120
showing things on different form factors.

175
00:12:40.120 --> 00:12:44.648
Where you would say like this is for
phone only, and

176
00:12:44.648 --> 00:12:49.492
that would mean that in media queries for
other devices

177
00:12:49.492 --> 00:12:54.771
you're like either visibility is none or
display is none.

178
00:12:54.771 --> 00:12:56.550
&gt;&gt; Speaker 7: And Mike, I got a question.

179
00:12:56.550 --> 00:12:57.120
&gt;&gt; Mike North: Yes.

180
00:12:57.120 --> 00:13:00.940
&gt;&gt; Speaker 7: So, I'm not getting
something about how nth works, so

181
00:13:00.940 --> 00:13:02.340
if you could just kinda go through it.

182
00:13:02.340 --> 00:13:06.650
And so the example I'm looking at is,
so I see for

183
00:13:06.650 --> 00:13:10.810
example on dimensions,
and when we're creating,

184
00:13:10.810 --> 00:13:14.110
we're pulling the letter m out, and
we're pulling the word margin out?

185
00:13:14.110 --> 00:13:15.895
&gt;&gt; Mike North: Yep.
&gt;&gt; Speaker 7: Can you explain to me how

186
00:13:15.895 --> 00:13:19.408
each of those is happening,
the letter m and the word margin?

187
00:13:19.408 --> 00:13:20.881
I'm not getting it.
&gt;&gt; Mike North: Good question, so

188
00:13:20.881 --> 00:13:24.484
if I was iterating over a list,
which would just look like list

189
00:13:29.973 --> 00:13:31.441
&gt;&gt; Mike North: Something like this,

190
00:13:31.441 --> 00:13:33.750
with no key value pairs.

191
00:13:33.750 --> 00:13:39.750
In that case, the current thing,
right, that each gives us.

192
00:13:39.750 --> 00:13:43.610
This local variable representing
the current item in the collection we're

193
00:13:43.610 --> 00:13:44.820
iterating over.

194
00:13:44.820 --> 00:13:50.040
That would be just that one item, it would
be a, and then it would be b, and then c.

195
00:13:50.040 --> 00:13:55.480
In the case of iterating over a map,
what we get is a key value pair.

196
00:13:56.770 --> 00:14:00.160
The first element of which,
is t, the second is top.

197
00:14:00.160 --> 00:14:04.940
And that's why we're using the first
element here, actually across the board,

198
00:14:04.940 --> 00:14:06.890
we're using the first element.

199
00:14:06.890 --> 00:14:12.060
Because those are the single letters, both
in the case of dimensions and directions.

200
00:14:12.060 --> 00:14:15.700
Those are what we use to build
the string for our selector, right.

201
00:14:15.700 --> 00:14:18.850
So first, it's the dimension,
and then it's the direction.

202
00:14:18.850 --> 00:14:24.260
And so, this is gonna be m-t- and
then size,

203
00:14:24.260 --> 00:14:28.880
which is calculated by
our step times five.

204
00:14:28.880 --> 00:14:36.050
And then down here, the second
item is going to be the full word.

205
00:14:36.050 --> 00:14:39.380
Top, and margin, bottom, and
padding, if that makes sense.

206
00:14:39.380 --> 00:14:43.982
So almost think of it as that in here,
like direction equals,

207
00:14:43.982 --> 00:14:45.936
it's gonna be like this.

208
00:14:56.274 --> 00:14:59.040
&gt;&gt; Mike North: Some people
might call this a tuple, right.

209
00:15:00.440 --> 00:15:03.290
&gt;&gt; Speaker 7: So
nth can be used in that way and

210
00:15:03.290 --> 00:15:07.920
it can also be used to pull say
the third element of a list of three.

211
00:15:07.920 --> 00:15:10.530
&gt;&gt; Mike North: This is a list
that we have like, locally.

212
00:15:10.530 --> 00:15:12.780
&gt;&gt; Speaker 7: I understand
it's a list now but, so

213
00:15:12.780 --> 00:15:17.020
in this case we're using nth
to pull out a key or a value.

214
00:15:17.020 --> 00:15:17.950
&gt;&gt; Mike North: Yes.

215
00:15:17.950 --> 00:15:19.550
&gt;&gt; Speaker 7: Is a list
in this case right now.

216
00:15:19.550 --> 00:15:20.240
&gt;&gt; Mike North: Yes.
&gt;&gt; Speaker 7: But nth

217
00:15:20.240 --> 00:15:24.580
is a general thing that can be used
to pull out any value of a list,

218
00:15:24.580 --> 00:15:26.890
like if you had a list of ten,
it can pull out the ten.

219
00:15:26.890 --> 00:15:32.360
&gt;&gt; Mike North: Yep, by index,
the map equivalent would be this.

220
00:15:32.360 --> 00:15:38.306
Oops,
&gt;&gt; Mike North: Right,

221
00:15:38.306 --> 00:15:42.890
where instead of the index of the thing
you want, you specify the key.

222
00:15:42.890 --> 00:15:43.730
Sorry, did you have a question?

223
00:15:43.730 --> 00:15:47.110
&gt;&gt; Speaker 8: No, that's what I was
just gonna clarify that in this example,

224
00:15:47.110 --> 00:15:52.080
the key is one and
the pair, the value is two.

225
00:15:52.080 --> 00:15:53.660
So it's-
&gt;&gt; Mike North: Position

226
00:15:53.660 --> 00:15:54.170
one and position two.

227
00:15:54.170 --> 00:15:56.070
&gt;&gt; Speaker 8: Right, position one and
position two for each item in there.

228
00:15:56.070 --> 00:15:56.840
&gt;&gt; Mike North: Precisely.

229
00:15:56.840 --> 00:15:58.270
&gt;&gt; Speaker 8: Okay.
&gt;&gt; Mike North: You got it.

230
00:15:58.270 --> 00:16:02.543
&gt;&gt; Speaker 9: Cuz when you're doing the
each loop over the map, like the dim or

231
00:16:02.543 --> 00:16:07.527
the dir, that's really returning a list,
that's where we can do nth, or

232
00:16:07.527 --> 00:16:10.240
should we have done map.get or map get.

233
00:16:10.240 --> 00:16:14.012
&gt;&gt; Mike North: So we could do map get,
but we still need to get the key there.

234
00:16:14.012 --> 00:16:21.265
And so we could have done,
down here, something like this,

235
00:16:21.265 --> 00:16:25.971
map.get, this would be dimensions.

236
00:16:27.330 --> 00:16:33.480
And then here, we'd have to pass in like
the thing we used basically up here.

237
00:16:33.480 --> 00:16:36.800
So this is gonna work,
which is like horrific now.

238
00:16:36.800 --> 00:16:39.160
We've gone from like terrible.

239
00:16:39.160 --> 00:16:40.350
&gt;&gt; Students: [LAUGH] Terrible to worse.

240
00:16:40.350 --> 00:16:43.840
&gt;&gt; Mike North: Terrible to what
in God's name is Mike doing?

241
00:16:43.840 --> 00:16:47.452
And like we'll actually
got the same result here.

242
00:16:47.452 --> 00:16:52.820
Hard refresh, yep and there it is.

243
00:16:52.820 --> 00:16:55.080
So there it is,

244
00:16:55.080 --> 00:16:59.440
I wanna back my way out of that cuz I
don't even wanna check that thing in.

245
00:17:00.490 --> 00:17:06.440
But this one is inappropriate,
complicated use of iteration.

246
00:17:06.440 --> 00:17:10.904
So just to recap here,
we're iterating over dimensions.

247
00:17:13.800 --> 00:17:18.860
&gt;&gt; Mike North: And then in here like dim

248
00:17:18.860 --> 00:17:24.150
is like m and margin.

249
00:17:24.150 --> 00:17:25.660
So it's the equivalent of a list there.

250
00:17:25.660 --> 00:17:31.600
And then here,
we're like iterating over directions.

251
00:17:31.600 --> 00:17:37.510
And then here, dir is d, down.

252
00:17:37.510 --> 00:17:40.530
And that's why we end up using nth.

253
00:17:40.530 --> 00:17:44.460
Does this make sense to everyone?

254
00:17:44.460 --> 00:17:50.080
We went too complicated deliberately just
to show you how powerful this can be,

255
00:17:50.080 --> 00:17:54.800
but like use it like salt, just a little
bit, a little bit goes a long way.

