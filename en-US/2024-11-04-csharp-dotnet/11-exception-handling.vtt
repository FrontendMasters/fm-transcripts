WEBVTT

1
00:00:00.000 --> 00:00:03.366
&gt;&gt; Spencer Schneidenbach: Let's get to
one of my favorite topics, exceptions.

2
00:00:03.366 --> 00:00:05.476
So this is a quote that
I use all the time.

3
00:00:05.476 --> 00:00:08.978
A large fraction of the flaws in software
development are due to programmers not

4
00:00:08.978 --> 00:00:12.703
fully understanding their states, all
possible states their code may execute in.

5
00:00:12.703 --> 00:00:16.037
So exceptions are errors that are thrown
by the runtime and they can be thrown for

6
00:00:16.037 --> 00:00:17.052
any number of reasons.

7
00:00:17.052 --> 00:00:19.713
They can be thrown by your own code,

8
00:00:19.713 --> 00:00:23.352
they can be thrown by code
written by Microsoft,

9
00:00:23.352 --> 00:00:28.972
they could be they could be thrown as
part of the code inside of a framework.

10
00:00:28.972 --> 00:00:33.165
So exceptions are really an important part
of development, especially in C Sharp,

11
00:00:33.165 --> 00:00:36.057
and understanding what they are and
how to predict them and

12
00:00:36.057 --> 00:00:38.078
how to handle them is really important.

13
00:00:38.078 --> 00:00:42.866
So the thing that we do to control them,
we're gonna introduce a different

14
00:00:42.866 --> 00:00:47.502
control flow type, which is,
I'm gonna delete this, close that, and

15
00:00:47.502 --> 00:00:50.851
I am going to write out
what's called a try-catch.

16
00:00:56.539 --> 00:00:58.528
&gt;&gt; Spencer Schneidenbach: So, let's
break down what this statement is doing.

17
00:00:58.528 --> 00:01:01.531
So, the try-catch, the try is basically,

18
00:01:01.531 --> 00:01:05.252
I am executing code that I
think may throw an exception.

19
00:01:05.252 --> 00:01:10.195
The catch is where the code
that will actually

20
00:01:10.195 --> 00:01:14.106
execute if an exception is caught.

21
00:01:14.106 --> 00:01:15.207
So let me demonstrate that.

22
00:01:15.207 --> 00:01:18.898
So I mentioned the DateTime.Parse
method earlier.

23
00:01:18.898 --> 00:01:22.721
So if we give it just a random string.

24
00:01:22.721 --> 00:01:23.914
What's gonna happen?

25
00:01:23.914 --> 00:01:26.686
It's probably gonna throw an exception,
right?

26
00:01:26.686 --> 00:01:30.340
And I can see that actually,
if you go here, you can hover over it,

27
00:01:30.340 --> 00:01:33.622
it will tell you the kinds of
exceptions that it will throw.

28
00:01:33.622 --> 00:01:37.224
It will tell you if the argument is null,
it will throw the argument null exception.

29
00:01:37.224 --> 00:01:40.345
So if you give it a null string.

30
00:01:40.345 --> 00:01:43.948
Or if you've given an invalid string,
a format exception will be thrown.

31
00:01:43.948 --> 00:01:45.537
So we can see that here.

32
00:01:45.537 --> 00:01:51.794
I will console.writeline
something went wrong.

33
00:01:51.794 --> 00:01:59.293
Boom, and then we will Ctrl
+ Shift + Tilde dotnet run.

34
00:01:59.293 --> 00:02:00.851
And then we see that something went wrong.

35
00:02:00.851 --> 00:02:03.250
It's because at this point,
we got an exception.

36
00:02:03.250 --> 00:02:05.286
And let me show you kinda
what that looks like.

37
00:02:05.286 --> 00:02:07.156
I'm gonna run this with the debugger,
which I haven't done yet.

38
00:02:07.156 --> 00:02:09.960
So I've put what's down,
what's called a break point.

39
00:02:09.960 --> 00:02:15.941
And essentially, I wanna say that if
this line is going to be executed,

40
00:02:15.941 --> 00:02:18.444
then I want you to stop there.

41
00:02:18.444 --> 00:02:20.076
But it has to be run in debug mode, and

42
00:02:20.076 --> 00:02:22.680
debug mode has a performance
penalty associated with it.

43
00:02:22.680 --> 00:02:27.278
It takes a lot of resources to run debug,
comparatively speaking.

44
00:02:27.278 --> 00:02:30.444
So you can see that we've
actually stopped at this point.

45
00:02:30.444 --> 00:02:31.240
We've hit the break point.

46
00:02:31.240 --> 00:02:35.253
We caught the exception and you can see
that, if we hover over the exception,

47
00:02:35.253 --> 00:02:37.415
which is something that I do frequently,

48
00:02:37.415 --> 00:02:40.539
this is something that I love
using my tooling for, right?

49
00:02:40.539 --> 00:02:43.002
You can see that the type
of exception that's thrown.

50
00:02:43.002 --> 00:02:45.067
You can get some more
information about it.

51
00:02:45.067 --> 00:02:50.864
I really wanted to just do this to
demonstrate that once an error hits here,

52
00:02:50.864 --> 00:02:56.400
it will fall down to here and and
do what's called catch the exception.

53
00:02:56.400 --> 00:02:57.582
So now we could do something with it.

54
00:02:57.582 --> 00:02:59.329
We can recover gracefully.

55
00:02:59.329 --> 00:03:03.824
We could ask the user to
input something else, right?

56
00:03:03.824 --> 00:03:04.720
There's a lot of things we can do.

57
00:03:04.720 --> 00:03:07.489
It really depends on
what we're looking for.

58
00:03:07.489 --> 00:03:11.475
Now, the base class,
all exceptions are of this base class,

59
00:03:11.475 --> 00:03:16.164
which is system.exception, and
there are no exceptions to that rule.

60
00:03:16.164 --> 00:03:20.368
All things, all errors that are thrown
are exception are of the exception class.

61
00:03:20.368 --> 00:03:22.789
They're of the exception type.

62
00:03:22.789 --> 00:03:26.712
But you can, if you want to,
catch multiple types of exceptions, and

63
00:03:26.712 --> 00:03:29.851
you can also catch more derived types,
as we call them.

64
00:03:29.851 --> 00:03:35.360
So let's say we wanted to catch
the ArgumentNullException, right?

65
00:03:35.360 --> 00:03:39.203
Because that's one of the two
exceptions that gets handled here.

66
00:03:39.203 --> 00:03:42.881
So let's watch what
happens when we do that.

67
00:03:42.881 --> 00:03:43.662
We have a breakpoint.

68
00:03:43.662 --> 00:03:44.994
We're running it in debug mode.

69
00:03:44.994 --> 00:03:49.724
And instead of going down here,
we didn't have the exception be caught.

70
00:03:49.724 --> 00:03:53.949
So the CLR in our debugger rightfully
told us, hey, at this line of code,

71
00:03:53.949 --> 00:03:55.599
this exception was thrown.

72
00:03:55.599 --> 00:03:56.540
So what do you wanna do?

73
00:03:56.540 --> 00:04:00.083
So I'm just gonna keep going and
it's just gonna crash the program.

74
00:04:00.083 --> 00:04:03.330
And that's because I've I've
chosen to only catch

75
00:04:03.330 --> 00:04:06.221
an ArgumentNullException
here at this line.

76
00:04:06.221 --> 00:04:10.775
But if I copy paste this, I can actually
catch multiple kinds of exceptions.

77
00:04:10.775 --> 00:04:14.637
As you can see, the compiler tells me
that I'm already catching this, so

78
00:04:14.637 --> 00:04:18.268
I don't need to do anything with it,
or I can't do anything with it.

79
00:04:18.268 --> 00:04:19.321
This code won't compile.

80
00:04:21.811 --> 00:04:24.189
&gt;&gt; Spencer Schneidenbach: But
I can catch this exception here now.

81
00:04:24.189 --> 00:04:28.689
And if I put my break point here and
I put my break point here,

82
00:04:28.689 --> 00:04:30.674
I'll debug the project.

83
00:04:30.674 --> 00:04:36.958
And you can see that it skips over because
the exception that's thrown is very

84
00:04:36.958 --> 00:04:42.093
clearly a FormatException,
not an ArgumentNullException.

85
00:04:42.093 --> 00:04:46.586
So, that is exception handling.

86
00:04:46.586 --> 00:04:51.891
So we'll see some more of that
as we get into the course, yes?

87
00:04:51.891 --> 00:04:56.069
&gt;&gt; Speaker 1: Do you typically log
these exceptions in a file, or

88
00:04:56.069 --> 00:04:57.828
do you use a service?

89
00:04:57.828 --> 00:04:59.006
&gt;&gt; Spencer Schneidenbach: That's
a good question.

90
00:04:59.006 --> 00:05:03.429
It depends on the medium in
which the program is executing.

91
00:05:03.429 --> 00:05:07.721
So for example, in a cloud system, I'm
almost certainly gonna be using logging

92
00:05:07.721 --> 00:05:10.698
into something like
Application Insights or Datadog.

93
00:05:10.698 --> 00:05:12.974
Or some other program that
allows me to see it like and

94
00:05:12.974 --> 00:05:16.181
I can log into a web interface and then
get a readout of what happened to that

95
00:05:16.181 --> 00:05:18.023
exception with a lot of other telemetry.

96
00:05:18.023 --> 00:05:21.815
If it's a console app that
I wrote because once a day,

97
00:05:21.815 --> 00:05:25.367
we need to process a CSV
file that came in from FTP.

98
00:05:25.367 --> 00:05:30.033
I'm probably just gonna log it to
a file and then maybe send an email or

99
00:05:30.033 --> 00:05:34.055
something along those lines to
say that there's an error or

100
00:05:34.055 --> 00:05:37.447
there was a problem
processing this this record.

101
00:05:37.447 --> 00:05:38.357
Good question.

102
00:05:42.171 --> 00:05:42.929
&gt;&gt; Spencer Schneidenbach: One other, so

103
00:05:42.929 --> 00:05:45.973
we talked about catching
multiple types of exceptions.

104
00:05:45.973 --> 00:05:49.941
There's one other part of the try-catch
block that you should know,

105
00:05:49.941 --> 00:05:51.562
which is the finally block.

106
00:05:51.562 --> 00:05:56.296
So the finally block always
executes no matter what.

107
00:05:56.296 --> 00:05:59.843
So as long as you've caught the error and
you haven't rethread it, or sorry,

108
00:05:59.843 --> 00:06:01.307
even if you have to rethrown it.

109
00:06:01.307 --> 00:06:05.627
Finally will always execute.

110
00:06:05.627 --> 00:06:08.660
So let's take a look at that.

111
00:06:08.660 --> 00:06:12.220
So we know that this method is gonna
throw, so I'm gonna hit Play and

112
00:06:12.220 --> 00:06:14.405
we're gonna see something went wrong and

113
00:06:14.405 --> 00:06:17.286
then it printed finally
because this will always run.

114
00:06:17.286 --> 00:06:20.723
The only time that doesn't run is if
in the middle of handling an exception,

115
00:06:20.723 --> 00:06:22.133
the computer gets unplugged.

116
00:06:22.133 --> 00:06:26.625
That's the only time.

117
00:06:26.625 --> 00:06:30.192
Let's see maybe a solar flare,
too, I don't know.

118
00:06:30.192 --> 00:06:33.880
So a couple more notes.

119
00:06:33.880 --> 00:06:38.628
You can filter down even further,
not just by type, but you can also say

120
00:06:38.628 --> 00:06:43.221
when an error message contains
a specific line of or string, or maybe

121
00:06:43.221 --> 00:06:48.314
the exception has an additional property
on it, maybe it has an error code.

122
00:06:48.314 --> 00:06:52.351
An error code equals 1, 2, 3, 4, and
you wanna handle that specific condition.

123
00:06:52.351 --> 00:06:53.307
You can do that.

124
00:06:53.307 --> 00:06:57.855
I do not write these a ton, but I do write
them, especially when we're talking about,

125
00:06:57.855 --> 00:07:01.471
I'm catching an exception from
a database operation that failed and

126
00:07:01.471 --> 00:07:04.298
it has this very specific
message that it sends back.

127
00:07:04.298 --> 00:07:09.639
So, useful to know, not necessarily,
but for most cases,

128
00:07:09.639 --> 00:07:14.566
you're probably just gonna
catch an exception without

129
00:07:14.566 --> 00:07:18.153
doing any other kind of wind condition.

130
00:07:18.153 --> 00:07:22.253
And then lastly, you are able to create
your own exceptions this syntax will make

131
00:07:22.253 --> 00:07:24.606
a lot more sense after we
talk about classes and

132
00:07:24.606 --> 00:07:26.802
you're able to throw your own exception.

133
00:07:26.802 --> 00:07:33.522
So let's say for instance that I have
a variable string name = Alice and

134
00:07:33.522 --> 00:07:39.682
I don't like Alice and
actually if name doesn't equal Spencer,

135
00:07:39.682 --> 00:07:44.395
maybe there's some narcissism,
I don't know.

136
00:07:44.395 --> 00:07:49.166
We'll throw an a new
InvalidOperationException.

137
00:07:49.166 --> 00:07:52.392
So new is how you create a new
instance of an exception.

138
00:07:52.392 --> 00:07:54.974
We'll get into the new syntax
when we get into classes.

139
00:07:54.974 --> 00:07:59.797
But the important thing that you
need to know is that you are able

140
00:07:59.797 --> 00:08:02.167
to throw your own exceptions.

141
00:08:02.167 --> 00:08:04.975
And I don't think programmers
do enough of this.

142
00:08:04.975 --> 00:08:11.843
The main reason that you would do that is
if you had a method that you declared,

143
00:08:11.843 --> 00:08:16.811
something like public static
void DoSomeProcessing,

144
00:08:16.811 --> 00:08:20.206
and you had some critical value here.

145
00:08:20.206 --> 00:08:24.203
And that critical value needs
to be a non-nullable string.

146
00:08:24.203 --> 00:08:29.187
So if you say, if string is null or

147
00:08:29.187 --> 00:08:33.637
whitespace critical value,

148
00:08:33.637 --> 00:08:40.049
you would throw a new ArgumentException.

149
00:08:40.049 --> 00:08:43.780
And give it a message that's helpful.

150
00:08:43.780 --> 00:08:45.739
That's typically when you would
throw your own exceptions.

151
00:08:45.739 --> 00:08:50.496
Very useful, very, very important,
very important part of the framework.

152
00:08:50.496 --> 00:08:55.417
So I think that the bottom line for
exceptions is that you should expect them.

153
00:08:55.417 --> 00:09:01.282
If I could credit a couple of things in my
career, it's knowing SQL really well and

154
00:09:01.282 --> 00:09:06.900
knowing when exceptions are thrown and
what states those things will happen.

155
00:09:06.900 --> 00:09:11.696
That has been a huge part
of just making sure that if

156
00:09:11.696 --> 00:09:15.919
an exception is thrown, expecting it, and

157
00:09:15.919 --> 00:09:21.069
then being able to handle and
self-recover from it.

158
00:09:21.069 --> 00:09:24.635
When we get into null references,
you saw that null reference

159
00:09:24.635 --> 00:09:29.096
exception earlier is probably the most
common and frustrating exception for

160
00:09:29.096 --> 00:09:33.017
new dotnet developers and
even dotnet developers in their career.

161
00:09:33.017 --> 00:09:37.101
Debugging them can be a pain,
but they're important.

162
00:09:37.101 --> 00:09:40.768
So we'll get to that in a little bit,
any questions?

163
00:09:40.768 --> 00:09:43.710
&gt;&gt; Speaker 1: Why use finally if you
could just write a statement after

164
00:09:43.710 --> 00:09:44.655
the try-catch?

165
00:09:44.655 --> 00:09:48.098
&gt;&gt; Spencer Schneidenbach: So you might
wanna use finally if you absolutely want

166
00:09:48.098 --> 00:09:49.590
this code to execute.

167
00:09:49.590 --> 00:09:54.920
And the reason you might do that is you
may choose to rethrow the exception here.

168
00:09:54.920 --> 00:09:56.281
So there are reasons to do that.

169
00:09:56.281 --> 00:09:59.525
You might catch this here and
then log it to somewhere and

170
00:09:59.525 --> 00:10:03.955
then rethrow the exception so that way
the processing for the client stops.

171
00:10:03.955 --> 00:10:06.755
Maybe there's some kind of
business critical process we

172
00:10:06.755 --> 00:10:09.903
don't want to run because the system
is in an invalid state, but

173
00:10:09.903 --> 00:10:12.495
we still have some code down
here that we need to run.

174
00:10:12.495 --> 00:10:15.192
That's when you would use the finally
block as opposed to just writing

175
00:10:15.192 --> 00:10:15.976
it straight after.

176
00:10:15.976 --> 00:10:16.954
Really good question.

177
00:10:16.954 --> 00:10:21.693
By the way, the key word to
rethrow an exception is throw.

178
00:10:21.693 --> 00:10:26.946
If you do this outside of the context of a
catch statement, it's gonna error out and

179
00:10:26.946 --> 00:10:32.069
say you're not allowed to do this,
because you're not throwing an exception.

180
00:10:32.069 --> 00:10:35.071
By the way,
this is a thing that you can do.

181
00:10:35.071 --> 00:10:38.649
You can rethrow the exception like this.

182
00:10:38.649 --> 00:10:41.237
Do not do that.

183
00:10:41.237 --> 00:10:43.147
Well, .NET will complain,
it's a rethrow and

184
00:10:43.147 --> 00:10:45.021
caught exception changes
stack information.

185
00:10:45.021 --> 00:10:48.065
So you really don't wanna
throw ex like this.

186
00:10:48.065 --> 00:10:50.961
You'll lose precious
debugging information.

187
00:10:50.961 --> 00:10:52.651
So always write your keyword as throw.

188
00:10:52.651 --> 00:10:56.368
That is something that sometimes new
developers get caught up on, but

189
00:10:56.368 --> 00:10:58.070
I don't see it most of the time.

190
00:10:58.070 --> 00:11:00.957
Just throw keyword by itself
will rethrow the exception.

191
00:11:00.957 --> 00:11:03.983
So that way it does what we call,
bubbling up to the caller.

192
00:11:03.983 --> 00:11:07.575
And we can see that here,
if we we've run the project,

193
00:11:07.575 --> 00:11:11.733
you can see that we'll print
the unhandled exception to here.

194
00:11:11.733 --> 00:11:13.718
Yeah, perfect.

195
00:11:13.718 --> 00:11:16.053
&gt;&gt; Speaker 2: Can you print x?

196
00:11:16.053 --> 00:11:17.172
&gt;&gt; Spencer Schneidenbach: Yeah,
absolutely.

197
00:11:28.735 --> 00:11:32.263
&gt;&gt; Spencer Schneidenbach: Absolutely,
so if you wanted to just print it or

198
00:11:32.263 --> 00:11:35.626
log it to someplace,
you could do that here.

199
00:11:38.630 --> 00:11:39.530
&gt;&gt; Spencer Schneidenbach: Awesome.

200
00:11:41.415 --> 00:11:43.329
&gt;&gt; Spencer Schneidenbach: Cool,
actually I'm sorry, yeah,

201
00:11:43.329 --> 00:11:46.788
that actually didn't rethrow there,
let me try that again.

202
00:11:46.788 --> 00:11:52.359
We need to throw a ArgumentNullException,

203
00:11:52.359 --> 00:11:55.075
my bad, there we go.

204
00:11:55.075 --> 00:11:59.216
Okay, yes you can absolutely
write it to the console for sure.

