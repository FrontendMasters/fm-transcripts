WEBVTT

1
00:00:00.540 --> 00:00:03.845
All right, I wanna touch on conversion,
which is another operator.

2
00:00:03.845 --> 00:00:05.150
Sometimes C# will do it for

3
00:00:05.150 --> 00:00:07.657
you automatically in very
limited circumstances.

4
00:00:07.657 --> 00:00:11.662
I wanna emphasize that,
again, there's no magic,

5
00:00:11.662 --> 00:00:17.188
there's no surprises, inasmuch as
one would expect from the language.

6
00:00:17.188 --> 00:00:20.077
I will start by saying int a = 5.

7
00:00:20.077 --> 00:00:24.249
And what will happen is a,
it's an integer, right,

8
00:00:24.249 --> 00:00:26.955
it doesn't have a decimal place.

9
00:00:26.955 --> 00:00:33.103
So, if you assign double b to a,
under the hood it will automatically say,

10
00:00:33.103 --> 00:00:37.689
okay, well, a can be a double,
it's now 5.000,

11
00:00:37.689 --> 00:00:42.709
whatever,it would be in
a floating point variable.

12
00:00:42.709 --> 00:00:44.592
The opposite is not true.

13
00:00:44.592 --> 00:00:49.182
Int c, if we tried to assign it to b,
we will get a compiler error that says

14
00:00:49.182 --> 00:00:53.259
that we cannot implicitly
convert double to int.

15
00:00:53.259 --> 00:00:57.290
So implicit conversions
are fairly limited in C#,

16
00:00:57.290 --> 00:01:01.691
you can actually create your
own limited conversions.

17
00:01:01.691 --> 00:01:05.690
I can't tell you the last time I did,
because, again, I don't like magic.

18
00:01:05.690 --> 00:01:08.067
Typically I write a function or

19
00:01:08.067 --> 00:01:13.104
something else to convert that value for
me if I wanted to do that.

20
00:01:13.104 --> 00:01:16.870
Explicit conversions,
also known as a cast,

21
00:01:16.870 --> 00:01:21.513
you could say, hey,
I wanna cast this thing to a double.

22
00:01:21.513 --> 00:01:25.927
This becomes more important when
you're talking about types where

23
00:01:25.927 --> 00:01:28.947
at runtime you may get an object variable,
but

24
00:01:28.947 --> 00:01:33.661
you don't necessarily know
the type ahead of time at runtime.

25
00:01:33.661 --> 00:01:36.078
So that does happen, that is a thing.

26
00:01:36.078 --> 00:01:38.671
Very useful,
mostly useful to just know for now,

27
00:01:38.671 --> 00:01:42.823
not necessarily useful to apply, we'll
see examples of that as we go through.

28
00:01:42.823 --> 00:01:47.499
And then, let's see.

29
00:01:51.770 --> 00:01:55.000
&gt;&gt; Spencer Schneidenbach: I mentioned
earlier that there is parse methods.

30
00:01:55.000 --> 00:01:58.082
And a lot of the core types like int,
double,

31
00:01:58.082 --> 00:02:02.706
they all have a method that you can
use to parse to a string to a value,

32
00:02:02.706 --> 00:02:06.630
which is something that you
will do quite a bit actually.

33
00:02:06.630 --> 00:02:09.900
As you're taking input from
text boxes from users,

34
00:02:09.900 --> 00:02:12.960
you'll wanna be able to
convert those strings.

35
00:02:12.960 --> 00:02:15.350
Sometimes the framework does it for you,

36
00:02:15.350 --> 00:02:19.251
sometimes it won't if you're
writing it a certain different way.

37
00:02:19.251 --> 00:02:24.889
So you wanna be able to convert
those things into their target type.

38
00:02:24.889 --> 00:02:28.708
So if we wanted to say what is my age,
we might say int.Parse.

39
00:02:28.708 --> 00:02:35.625
And let's pretend it came from a text box,

40
00:02:35.625 --> 00:02:41.390
42 ,and then we say textboxAge,

41
00:02:41.390 --> 00:02:48.895
and then we're able to
get this age variable.

42
00:02:48.895 --> 00:02:51.516
And you can see,
as long as it doesn't crash,

43
00:02:51.516 --> 00:02:54.830
we know that that parse
operation handled successfully.

44
00:02:54.830 --> 00:03:01.903
So there's bool.Parse, so you can parse
true or false, there's double.Parse.

45
00:03:01.903 --> 00:03:05.509
Let's see, I declared it here as an int.

46
00:03:05.509 --> 00:03:10.927
So there's pretty much any of
the core types, DateTime.Parse, they

47
00:03:10.927 --> 00:03:17.077
all have parse methods, static methods
that you can use to perform that parse.

48
00:03:17.077 --> 00:03:19.107
But there's also one other method for

49
00:03:19.107 --> 00:03:23.938
performing the parse that I think is
really important, which is the TryParse.

50
00:03:23.938 --> 00:03:27.858
So we mentioned earlier about exceptions
and knowing when they can happen.

51
00:03:28.958 --> 00:03:34.395
You could very easily wrap
a try catch around this,

52
00:03:34.395 --> 00:03:38.314
and then catch a format exception and

53
00:03:38.314 --> 00:03:46.800
then return invalid Console.WriteLine
"invalid input", you can do that.

54
00:03:46.800 --> 00:03:49.176
It's a lot of code, right?

55
00:03:49.176 --> 00:03:52.981
That's a lot of stuff to write
to just try one operation,

56
00:03:52.981 --> 00:03:57.536
so what you can do instead of this
is do what's called a TryParse.

57
00:03:57.536 --> 00:04:02.362
Let me show you what that looks like.

58
00:04:02.362 --> 00:04:07.090
So, let's declare it as
a bool tryParseResult =

59
00:04:07.090 --> 00:04:11.376
let's say int.TryParse(textBoxAge).

60
00:04:11.376 --> 00:04:15.738
You see, why is it giving me a compiler error?

61
00:04:15.738 --> 00:04:19.190
It actually has a second argument,
this is a little bit of a new syntax.

62
00:04:19.190 --> 00:04:25.079
But what it is essentially saying, there's
what's called an "out" that you can return.

63
00:04:25.079 --> 00:04:29.286
So this is kind of like a return
value from a method, but

64
00:04:29.286 --> 00:04:33.369
one that's defined inside of a parameter.

65
00:04:33.369 --> 00:04:38.202
This was really important back in
the olden days of .NET when out parameters

66
00:04:38.202 --> 00:04:42.827
were the best way at the time of
returning multiple values from a method.

67
00:04:42.827 --> 00:04:45.668
And here's how you would
use them back then.

68
00:04:45.668 --> 00:04:49.738
You would declare your age here,
you would say bool TryParse, and

69
00:04:49.738 --> 00:04:51.419
then you would say out age.

70
00:04:51.419 --> 00:04:57.079
And the out is necessary,
otherwise it will complain at you.

71
00:04:57.079 --> 00:05:01.993
Say out age, and then,
what you have is a boolean to say, well,

72
00:05:01.993 --> 00:05:05.021
is this result successful or not?

73
00:05:05.021 --> 00:05:08.625
So if you say, if (!tryParseResult),

74
00:05:08.625 --> 00:05:15.243
which is just basically this operator
right here, is the negation operator.

75
00:05:15.243 --> 00:05:20.048
It says whatever the opposite of this is.

76
00:05:20.048 --> 00:05:25.721
So if this is not successful,
is what this is saying,

77
00:05:25.721 --> 00:05:33.807
then we would print
Console.WriteLine("invalid input");, boom.

78
00:05:36.960 --> 00:05:39.861
&gt;&gt; Spencer Schneidenbach: dotnet run,
and you can see that because this parsed

79
00:05:39.861 --> 00:05:43.599
it successfully, Console.WriteLine("invalid input")
didn't run.

80
00:05:43.599 --> 00:05:48.338
But as soon as we put anything else in
there in a format that it can't interpret,

81
00:05:48.338 --> 00:05:51.629
you'll see that it gives invalid input.

82
00:05:51.629 --> 00:05:56.542
This is a useful way of testing a result
without actually trying to go through

83
00:05:56.542 --> 00:05:59.636
the motion of trying and
catching exceptions.

84
00:05:59.636 --> 00:06:04.051
It's very useful for avoiding that,
it helps keep the code concise.

85
00:06:04.051 --> 00:06:05.757
I also wanna point out,

86
00:06:05.757 --> 00:06:11.088
you don't have to declare your
integer down here like this anymore.

87
00:06:11.088 --> 00:06:16.028
You can say out var,
you can actually declare it up there, and

88
00:06:16.028 --> 00:06:20.588
that was introduced I'd say about ten or
so years ago, so

89
00:06:20.588 --> 00:06:23.444
you can do this all in a single line.

90
00:06:23.444 --> 00:06:26.804
So if I have try parse result,
and then age, dot, and

91
00:06:26.804 --> 00:06:32.889
it will complain to you that, let's see,
identifier, explain, Console.WriteLine.

92
00:06:35.520 --> 00:06:38.117
&gt;&gt; Spencer Schneidenbach: You'll see
that it actually does have a value.

93
00:06:38.117 --> 00:06:41.037
And in this case the default
value of this is 0,

94
00:06:41.037 --> 00:06:44.544
the default value of integer is 0,
so it just prints 0.

95
00:06:44.544 --> 00:06:48.917
But if try parse result is successful,

96
00:06:48.917 --> 00:06:52.767
then the value will be populated.

97
00:06:52.767 --> 00:06:57.666
So if we go back to 42 and
run it again, you can see that 42 is

98
00:06:57.666 --> 00:07:03.057
the value of age variable and
it does, indeed, print valid input.

99
00:07:03.057 --> 00:07:05.620
So TryParse is on DateTime, int, decimal,

100
00:07:05.620 --> 00:07:09.986
lots of different base classes,
the base types defined in .NET.

101
00:07:09.986 --> 00:07:14.460
So I highly recommend using those,
I use those a ton.

102
00:07:14.460 --> 00:07:19.477
The last thing that I will
mention is the convert class,

103
00:07:19.477 --> 00:07:23.639
I would highly advise that
you take a look at all

104
00:07:23.639 --> 00:07:28.032
of the different things,
it's a static class.

105
00:07:28.032 --> 00:07:31.581
So that means you just use
the methods that are on this class,

106
00:07:31.581 --> 00:07:35.902
you can convert things like
the string true to the Boolean type.

107
00:07:35.902 --> 00:07:40.686
Some of these are very odd in that they
will straight up tell you that they

108
00:07:40.686 --> 00:07:42.939
will always throw an exception.

109
00:07:42.939 --> 00:07:47.133
So if you try to convert a DateTime
to a Boolean, it will just always fail.

110
00:07:47.133 --> 00:07:52.535
Little vestigial things like that
in C# never fail to amuse me.

111
00:07:52.535 --> 00:07:58.697
But the convert class is another way as if
you know that you wanna be able to convert

112
00:07:58.697 --> 00:08:05.203
between types, the convert class is
the most best way to do that explicitly.

113
00:08:05.203 --> 00:08:08.977
That's how you, for instance, would say,

114
00:08:08.977 --> 00:08:12.926
you can't double a,
&gt;&gt; Spencer Schneidenbach: You can't

115
00:08:12.926 --> 00:08:17.751
declare an int to a, but
you can Convert.ToInt32(a).

116
00:08:17.751 --> 00:08:24.317
And what that will do is,you
will obviously lose precision,

117
00:08:24.317 --> 00:08:29.116
because the 4.2 will get chopped off, but

118
00:08:29.116 --> 00:08:32.922
it will explicitly convert it to a.

119
00:08:32.922 --> 00:08:36.531
So, again, kind of emphasizing
the lack of, quote unquote,

120
00:08:36.531 --> 00:08:38.924
magic thing that happens under the hood.

121
00:08:38.924 --> 00:08:43.274
I think C# does a great job of
protecting you from these things.

