WEBVTT

1
00:00:00.000 --> 00:00:02.697
&gt;&gt; Spencer Schneidenbach: Okay,
I wanna talk about arrays again.

2
00:00:02.697 --> 00:00:06.697
Because they are important,
at least in the context of this.

3
00:00:06.697 --> 00:00:09.934
We're talking about collections now.

4
00:00:09.934 --> 00:00:14.074
So when you declare a set of arrays, you
can declare an array of integers in this

5
00:00:14.074 --> 00:00:16.711
case, we're declaring it
with five elements and

6
00:00:16.711 --> 00:00:19.746
we've just set all of those
elements to the empty value.

7
00:00:19.746 --> 00:00:22.332
We could set those values individually.

8
00:00:22.332 --> 00:00:25.808
We can get the value for
a value that we haven't set,

9
00:00:25.808 --> 00:00:30.471
which just results in a zero because
that's the default value of int.

10
00:00:30.471 --> 00:00:34.733
And then we can try to get something
outside the bounds of that array,

11
00:00:34.733 --> 00:00:37.906
which would throw an index
out of range exception.

12
00:00:37.906 --> 00:00:41.040
So arrays,
as I mentioned earlier are fixed.

13
00:00:41.040 --> 00:00:42.634
They're fixed length, you don't add and

14
00:00:42.634 --> 00:00:44.278
remove from them like
you do in JavaScript.

15
00:00:44.278 --> 00:00:46.292
That just isn't a thing.

16
00:00:46.292 --> 00:00:51.652
So once you declare them, they cannot
be changed, they cannot be resized,

17
00:00:51.652 --> 00:00:55.586
you have to create a new array
if you need more space, and

18
00:00:55.586 --> 00:00:58.130
you can't remove or add elements.

19
00:00:58.130 --> 00:00:59.565
So early on in .NET Days,

20
00:00:59.565 --> 00:01:03.103
there were collection types that
kind of dealt with that thing.

21
00:01:03.103 --> 00:01:05.115
I'm not gonna go over these,
because, in practice,

22
00:01:05.115 --> 00:01:07.847
these aren't used anymore unless
you're dealing with really old code.

23
00:01:07.847 --> 00:01:13.686
But you could essentially have a list
where it essentially you can add or

24
00:01:13.686 --> 00:01:16.227
remove things from this list.

25
00:01:16.227 --> 00:01:19.814
Problem is that these weren't
constrained for any particular type.

26
00:01:19.814 --> 00:01:25.428
So an array list could exist where you
added a one, excuse me, an integer.

27
00:01:25.428 --> 00:01:28.347
An array list could exist where you could
add an integer and then the next line,

28
00:01:28.347 --> 00:01:29.907
add a string and there was no type safety.

29
00:01:29.907 --> 00:01:34.927
There's nothing behind that to prevent
that from being from occurring.

30
00:01:34.927 --> 00:01:39.842
So I want to talk about the generic
collection type called IEnumerable &lt;T&gt;.

31
00:01:39.842 --> 00:01:44.085
IEnumerable&lt;T&gt; is one of the most
important constructs inside

32
00:01:44.085 --> 00:01:46.792
of the language, and it's very simple.

33
00:01:46.792 --> 00:01:49.560
It essentially says that it
is a collection of things.

34
00:01:49.560 --> 00:01:54.030
An array of objects
implements IEnumerable &lt;T&gt;.

35
00:01:54.030 --> 00:01:58.499
An array of ints is an IEnumerable&lt;int&gt;,
okay?

36
00:01:58.499 --> 00:02:01.007
And it basically says, hey,
we can do things with this collection.

37
00:02:01.007 --> 00:02:05.414
We can iterate over them, and
that includes doing things like foreach.

38
00:02:05.414 --> 00:02:07.580
Remember, I mentioned the foreach loop,

39
00:02:07.580 --> 00:02:11.620
and I mentioned that we use it a ton in
the real world, at least, I certainly do.

40
00:02:11.620 --> 00:02:16.193
So we can spin through each of these
items and then write them to the console.

41
00:02:16.193 --> 00:02:21.090
It's also known IEnumerables in especially
functional Programming languages are also

42
00:02:21.090 --> 00:02:25.740
referred to as sequences, but I just refer
to them in this context as IEnumerables.

43
00:02:25.740 --> 00:02:29.333
Something that you should know
about IEnumerables is that as they

44
00:02:29.333 --> 00:02:32.744
are being created,
they are not always accessed right away.

45
00:02:32.744 --> 00:02:36.858
So they may not actually run until you
actually start spinning through and

46
00:02:36.858 --> 00:02:38.524
requesting items from them.

47
00:02:38.524 --> 00:02:39.965
This will become really important.

48
00:02:39.965 --> 00:02:41.604
It's called lazy evaluation.

49
00:02:41.604 --> 00:02:44.536
And I just want you to put
a pin in that term and

50
00:02:44.536 --> 00:02:48.190
think about it as we talk
about link a little bit later.

51
00:02:48.190 --> 00:02:50.673
You can define what's
called an iterator method.

52
00:02:50.673 --> 00:02:55.088
This is a rather advanced thing to
do because there are programming,

53
00:02:55.088 --> 00:03:00.509
there are performance, and there are kind
of semantic implications to doing this.

54
00:03:00.509 --> 00:03:05.529
But what you can do is you can define
a method as returning IEnumerable and

55
00:03:05.529 --> 00:03:09.725
then use the yield keyword to
actually start yielding back or

56
00:03:09.725 --> 00:03:13.113
returning back items
inside that IEnumerable.

57
00:03:13.113 --> 00:03:15.583
This is really powerful and really cool.

58
00:03:15.583 --> 00:03:18.084
A little bit outside
the scope of this course,

59
00:03:18.084 --> 00:03:22.459
I would recommend that as you learn more
about link, it'll start to click more.

60
00:03:22.459 --> 00:03:27.250
And there's documentation here that
really talks about what's going on with

61
00:03:27.250 --> 00:03:31.182
yield under the hood,
because it's actually fairly complex.

62
00:03:31.182 --> 00:03:34.902
So it's a good thing to know, but
not really important for right now.

63
00:03:34.902 --> 00:03:36.288
Put a pin in it just a little bit later.

