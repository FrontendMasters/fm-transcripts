WEBVTT

1
00:00:00.450 --> 00:00:05.373
So let's talk about what I think that
is the favorite collection type of

2
00:00:05.373 --> 00:00:07.519
a .NET developer, the list.

3
00:00:07.519 --> 00:00:09.993
The list is ubiquitous in .NET collections.

4
00:00:09.993 --> 00:00:11.775
Let me show you what it looks like.

5
00:00:11.775 --> 00:00:15.059
So we talked about boxes of strings and
boxes of int, but in reality,

6
00:00:15.059 --> 00:00:17.335
you probably wouldn't
define code like this.

7
00:00:17.335 --> 00:00:20.253
This is no better than setting a variable.

8
00:00:20.253 --> 00:00:27.779
But you would, and you often do, define
a list of strings or a list of integers.

9
00:00:27.779 --> 00:00:29.957
And you could say,
I wanna add things to this list.

10
00:00:29.957 --> 00:00:32.791
I wanna add Spencer to this list,
bring him on the bus.

11
00:00:32.791 --> 00:00:35.063
In fact, let's name this bus.

12
00:00:35.063 --> 00:00:36.447
I wanna bring him on the bus.

13
00:00:36.447 --> 00:00:37.995
Let's bring him on the bus.

14
00:00:37.995 --> 00:00:39.515
George wants to go on the bus.

15
00:00:39.515 --> 00:00:42.672
Let's bring George.

16
00:00:42.672 --> 00:00:44.357
Can int go on the bus?

17
00:00:44.357 --> 00:00:46.907
Int can't go on the bus.

18
00:00:46.907 --> 00:00:48.711
Compiler won't let int go on the bus.

19
00:00:48.711 --> 00:00:50.004
Which is right, right?

20
00:00:50.004 --> 00:00:54.681
This is the most common class for
collections in .NET in

21
00:00:54.681 --> 00:00:59.059
terms of the use by developers,
this and array, but

22
00:00:59.059 --> 00:01:05.144
mainly list people love to materialize
things as lists for some reason.

23
00:01:05.144 --> 00:01:08.588
This is good, because you get
the flexibility of a generic type,

24
00:01:08.588 --> 00:01:11.970
so you can create lists of strings or
lists of other objects, and

25
00:01:11.970 --> 00:01:14.993
then prevent other objects
from joining in on the party.

26
00:01:14.993 --> 00:01:16.309
We want Spencer and George on the bus.

27
00:01:16.309 --> 00:01:18.950
We don't want integers on the bus.

28
00:01:18.950 --> 00:01:24.325
You can also define lists ahead of time,
same as you can arrays using

29
00:01:24.325 --> 00:01:30.457
what's called collection initializer
syntax in newer versions of C sharp,

30
00:01:30.457 --> 00:01:35.549
but this is the way that they've
kind of been defined in previous

31
00:01:35.549 --> 00:01:40.202
years with curly braces and
using the lists constructor.

32
00:01:40.202 --> 00:01:42.571
So there's a few methods on list.

33
00:01:42.571 --> 00:01:47.226
There's actually a bunch, but the ones
that you need to know about are Add,

34
00:01:47.226 --> 00:01:49.480
Remove, RemoveAt, AddRange,

35
00:01:49.480 --> 00:01:53.435
which will allow you to add
a collection of strings, add range.

36
00:01:53.435 --> 00:01:59.607
So we would add Mary and Ann, right?

37
00:01:59.607 --> 00:02:02.437
So that would give you
an IEnumerable of string

38
00:02:02.437 --> 00:02:06.689
that would add two more elements to
that array or sorry to that list.

39
00:02:06.689 --> 00:02:09.079
And under the hood,
a list just takes an array and

40
00:02:09.079 --> 00:02:12.940
just has a fixed amount of elements in it,
and then resizes it when it needs to.

41
00:02:12.940 --> 00:02:13.689
So pretty cool.

42
00:02:13.689 --> 00:02:15.071
You can browse the source code yourself.

43
00:02:15.071 --> 00:02:16.791
There's not a lot of magic behind it.

44
00:02:16.791 --> 00:02:23.931
It's just .NET making things
as convenient as it can for you.

45
00:02:23.931 --> 00:02:25.962
Couple of things you
should know about lists.

46
00:02:25.962 --> 00:02:28.207
There's a for each method on the list.

47
00:02:28.207 --> 00:02:28.942
Do not use it, and

48
00:02:28.942 --> 00:02:31.936
the reason that you shouldn't use it
is because it shouldn't be there.

49
00:02:31.936 --> 00:02:34.967
[LAUGH] In my strong opinion, this, to me,

50
00:02:34.967 --> 00:02:38.929
is just not a way there's
a construct in the language for

51
00:02:38.929 --> 00:02:44.093
doing ForEach and it is called
the ForEach loop, it is more ubiquitous.

52
00:02:44.093 --> 00:02:46.833
Are you gonna break
the universe if you do this?

53
00:02:46.833 --> 00:02:48.884
No, it's just not a good habit to do so.

54
00:02:48.884 --> 00:02:52.930
And Microsoft has said just
you shouldn't use this.

55
00:02:52.930 --> 00:02:57.747
And list is very powerful and it is
versatile, but .NET devs love to use list

56
00:02:57.747 --> 00:03:02.718
sometimes to the point of absurdity
especially when you're defining a method

57
00:03:02.718 --> 00:03:07.787
that has a specific behavior and you need
to operate on a collection of objects.

58
00:03:07.787 --> 00:03:11.138
And that developer decides that that
collection of objects must be a list.

59
00:03:11.138 --> 00:03:13.200
So, it must be a list ahead of time.

60
00:03:13.200 --> 00:03:16.634
It might have probably been more
suitable to define that method

61
00:03:16.634 --> 00:03:18.590
to take in IEnumerable instead.

62
00:03:18.590 --> 00:03:21.889
That would have probably
been more practical.

63
00:03:21.889 --> 00:03:27.105
There's a couple of other collection
types, the most important one, we already

64
00:03:27.105 --> 00:03:32.559
talked about array, the hash set is like a
list, but you can't add duplicates to it.

65
00:03:32.559 --> 00:03:38.071
So if you go here,
you can't add two spencers to the bus.

66
00:03:38.071 --> 00:03:41.377
You also notice that it
does not have AddRange.

67
00:03:41.377 --> 00:03:44.884
You can only add one thing at a time,
little bit of a quirk, but

68
00:03:44.884 --> 00:03:48.597
what this will inevitably do is
we'll just skip adding this, and

69
00:03:48.597 --> 00:03:52.539
it will just end up with a collection
of one it will silently not work.

70
00:03:52.539 --> 00:03:56.384
So it will continue executing.

71
00:03:56.384 --> 00:04:00.327
Dictionary is probably
the one that I use the most,

72
00:04:00.327 --> 00:04:05.280
next to array list and IEnumerable,
dictionary is my heart and

73
00:04:05.280 --> 00:04:10.322
soul and that basically allows you to say,
I declare it as dict and

74
00:04:10.322 --> 00:04:14.997
then I say new dictionary and
then I say I just want a string and

75
00:04:14.997 --> 00:04:18.787
I wanna be able to look
up integers with strings.

76
00:04:18.787 --> 00:04:22.920
So what I can do is,
I can set the value of this dictionary.

77
00:04:22.920 --> 00:04:27.298
So I can say that if I'm looking
up the element at section asdf,

78
00:04:27.298 --> 00:04:33.013
I want to get the value of three, but I'm
using them with, just very basic types.

79
00:04:33.013 --> 00:04:35.183
You can use these with classes as well,
right?

80
00:04:35.183 --> 00:04:37.674
So you get a lot of flexibility.

81
00:04:37.674 --> 00:04:43.056
Dictionary is one of the collections that
I use to usually sometimes track state or

82
00:04:43.056 --> 00:04:47.970
or make sure that if I have a value and
I need to cache it, I might cache it very

83
00:04:47.970 --> 00:04:53.048
quickly inside of a dictionary and then
look it up later to see if it's there.

84
00:04:53.048 --> 00:04:56.070
And if it's not, I'll add it so
I can refer back to it, right?

85
00:04:56.070 --> 00:04:58.992
You don't want to look up
the same record 1000 times

86
00:04:58.992 --> 00:05:01.177
when you can just look
it up once in a loop.

87
00:05:01.177 --> 00:05:06.285
So a dictionary is a good
construct to do that in.

88
00:05:06.285 --> 00:05:07.506
There are a few others.

89
00:05:07.506 --> 00:05:09.850
Immutable array is one
that I use a ton as well.

90
00:05:09.850 --> 00:05:12.763
I will often on most collection methods,

91
00:05:12.763 --> 00:05:18.270
actually all of them that implement
IEnumerable, there is a ToList method.

92
00:05:18.270 --> 00:05:21.854
So you can materialize that to a list,
it's called materializing.

93
00:05:21.854 --> 00:05:28.897
It will create a new other list or
in this case another bus.

94
00:05:28.897 --> 00:05:30.417
I should call this var.

95
00:05:30.417 --> 00:05:32.000
Other bus that will also create a list.

96
00:05:32.000 --> 00:05:37.781
You could also do ToArray and
that will create an array.

97
00:05:37.781 --> 00:05:41.366
You can also do ToImmutableArray
which is something that I

98
00:05:41.366 --> 00:05:45.920
do a lot because oftentimes you can
mutate arrays, you can mutate lists.

99
00:05:45.920 --> 00:05:49.410
I believe in immutable objects because
it keeps my programming consistent.

100
00:05:49.410 --> 00:05:52.741
I want to make sure that people can't edit
the things that I'm creating a lot of

101
00:05:52.741 --> 00:05:53.249
the times.

102
00:05:53.249 --> 00:05:55.207
So I'll create an immutable array so

103
00:05:55.207 --> 00:05:58.498
that way they can't actually
modify contents of that array.

104
00:05:58.498 --> 00:06:03.831
So, a couple of others, Queue and
stack, which are last in first out and

105
00:06:03.831 --> 00:06:07.416
first in first out collections I,
in practice,

106
00:06:07.416 --> 00:06:12.313
almost never use them, but
I know that they exist in case I ever do,

107
00:06:12.313 --> 00:06:15.481
in case I ever need
that kind of construct.

108
00:06:15.481 --> 00:06:17.453
So yeah, here's my spicy opinion.

109
00:06:17.453 --> 00:06:21.923
I use immutable array a ton,
I use dictionary a lot, and

110
00:06:21.923 --> 00:06:27.452
if I need to add or remove elements,
I'll use a list most of the time.

