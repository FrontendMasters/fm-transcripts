WEBVTT

1
00:00:00.200 --> 00:00:03.229
&gt;&gt; Spencer Schneidenbach: Okay, so
we've talked about some built-in types,

2
00:00:03.229 --> 00:00:07.470
I did wanna move back to strings a little
bit and kinda just talk through a few

3
00:00:07.470 --> 00:00:11.600
of the methods that I think are really
important for declaring strings.

4
00:00:11.600 --> 00:00:15.062
As I mentioned, they are immutable by
nature, which means you can't change them,

5
00:00:15.062 --> 00:00:16.525
you can reassign the variable, but

6
00:00:16.525 --> 00:00:19.010
you can't change them once
they're instantiated.

7
00:00:19.010 --> 00:00:22.522
There's a few different ways to declare
strings which I think all of them

8
00:00:22.522 --> 00:00:23.992
bear mentioning.

9
00:00:23.992 --> 00:00:28.720
So if I have a string name Spencer like
this, this is just a string declared

10
00:00:28.720 --> 00:00:33.492
with a double quote on one side and
a double quote on another.

11
00:00:33.492 --> 00:00:38.468
So this has a few properties that you
should be aware of, if you try to put in

12
00:00:38.468 --> 00:00:44.211
a forward slash, it's gonna tell you,
wait a second, what the heck is that?

13
00:00:44.211 --> 00:00:46.953
It's gonna say, hey,
it's just gonna throw a syntax error,

14
00:00:46.953 --> 00:00:48.501
this is an escape character.

15
00:00:48.501 --> 00:00:52.640
So you would do this to, for instance,
write a another single quote, or, sorry,

16
00:00:52.640 --> 00:00:55.121
another double quote inside of the string.

17
00:00:55.121 --> 00:00:59.184
This character would escape that character
so that you could put it in that string

18
00:00:59.184 --> 00:01:02.124
without it, it thinks that
that's the end of the string.

19
00:01:03.484 --> 00:01:08.389
There's a couple of examples of
this such as escape character n or

20
00:01:08.389 --> 00:01:13.382
escape character t being a new line,
t being tab respectively, so

21
00:01:13.382 --> 00:01:18.494
that's how you declare kind of
a quote on quote normal string.

22
00:01:18.494 --> 00:01:23.618
There's also a verbatim string which does
not have a concept of escape character,

23
00:01:23.618 --> 00:01:27.421
so you can write as many slashes
as you want, or even slash n and

24
00:01:27.421 --> 00:01:31.251
and it won't interpret that as
a new line within that string.

25
00:01:31.251 --> 00:01:36.269
Another kind of property of this is that,
because you can't escape double quotes,

26
00:01:36.269 --> 00:01:40.909
a double quote does a single double
quote tell me if that's confusing.

27
00:01:40.909 --> 00:01:43.366
A single double quote
throws a syntax error and

28
00:01:43.366 --> 00:01:47.272
the way that you write a double quote,
an actual double quote is to just put

29
00:01:47.272 --> 00:01:50.049
it twice inside of the context
of a verbatim string.

30
00:01:52.309 --> 00:01:57.458
Next, I wanna briefly mention a relatively
new string type of way of declaring

31
00:01:57.458 --> 00:02:03.373
a string, which is a string literal, I was
very excited when [INAUDIBLE] got this.

32
00:02:03.373 --> 00:02:07.494
And it will basically be
pretty much anything you want,

33
00:02:07.494 --> 00:02:12.315
including double quotes,
including lots of double quotes, and

34
00:02:12.315 --> 00:02:17.153
it will interpret all of these things,
as a just a normal string.

35
00:02:17.153 --> 00:02:21.315
Really good for if you're testing a blob
of JSON or something and you just wanna

36
00:02:21.315 --> 00:02:25.414
drop in and don't wanna worry about
the double quotes kind of messing you up,

37
00:02:25.414 --> 00:02:29.152
they are multi-line by nature,
which is really cool.

38
00:02:29.152 --> 00:02:34.216
So another kind of string
thing to have in your toolbox,

39
00:02:34.216 --> 00:02:40.052
and then lastly there is what's
called string interpolation.

40
00:02:41.998 --> 00:02:44.789
So if you wanted to say name Spencer, and

41
00:02:44.789 --> 00:02:49.635
then you wanted to greet Spencer,
you could say string greeting, and

42
00:02:49.635 --> 00:02:54.198
then a you can put in that name
variable inside of your string.

43
00:02:54.198 --> 00:02:58.033
You would start do that by doing dollar
sign, and then you would have quotes,

44
00:02:58.033 --> 00:03:01.067
hello, which would be
the normal part of the string.

45
00:03:01.067 --> 00:03:05.243
And then you would use a curly
brace to say name, and

46
00:03:05.243 --> 00:03:10.897
that would give you a string with hello,
Spencer written in that.

47
00:03:10.897 --> 00:03:15.728
So, few important ways to declare strings,
couple of things that I want to mention,

48
00:03:15.728 --> 00:03:19.747
you can declare an empty string
with a double quote, like this.

49
00:03:19.747 --> 00:03:24.378
String, empty string, double quote,
semicolon, I don't choose to do this most

50
00:03:24.378 --> 00:03:27.686
of the time, I know this is
very common in other platforms,

51
00:03:27.686 --> 00:03:32.536
especially JavaScript where you just
have empty strings everywhere like that.

52
00:03:32.536 --> 00:03:37.340
I prefer to use string.empty just for
consistency, and as you can see,

53
00:03:37.340 --> 00:03:42.219
if we dig into the source code for
this, let's see, it's a static,

54
00:03:42.219 --> 00:03:46.316
okay, I'm not sure where it's
actually instantiated, but

55
00:03:46.316 --> 00:03:49.387
it is essentially the value
of a blank string,

56
00:03:49.387 --> 00:03:52.900
it is the exact same as
saying this just that string.

57
00:03:54.450 --> 00:03:58.064
Another thing that I use a lot,
a couple of more methods that are on

58
00:03:58.064 --> 00:04:01.811
the string class, that I think
are really important to talk about,

59
00:04:01.811 --> 00:04:06.082
is this is an example of a static method
on the string class, which is is null or

60
00:04:06.082 --> 00:04:08.177
empty and is null or whitespace.

61
00:04:08.177 --> 00:04:10.897
So this is a method
that returns a bool and

62
00:04:10.897 --> 00:04:16.287
it basically says that is this an empty
string or is this a null string?

63
00:04:16.287 --> 00:04:21.785
An example of something that would be
is null or empty, string is null or

64
00:04:21.785 --> 00:04:26.915
empty, if you passed it in an empty
string, it would return true,

65
00:04:26.915 --> 00:04:32.254
if you passed it in a string with
whitespace, it would return false.

66
00:04:33.634 --> 00:04:36.989
There's another method which is the one
that I use a ton of which is null or

67
00:04:36.989 --> 00:04:40.125
whitespace, I do this because in
the context of web applications.

68
00:04:40.125 --> 00:04:43.905
Sometimes people like to put trailing and
leading spaces inside of text fields, so

69
00:04:43.905 --> 00:04:45.901
I wanna be able to check for those.

70
00:04:45.901 --> 00:04:49.835
And so the way that I would do that is
by using is null or whitespace, and

71
00:04:49.835 --> 00:04:53.721
we'll check to see if the string is null,
is empty or is whitespace.

72
00:04:53.721 --> 00:04:55.910
And it's basically just looking for

73
00:04:55.910 --> 00:05:00.791
the absence of a meaningful value to the
application, something that I use a lot.

74
00:05:02.211 --> 00:05:06.970
Last thing that I will mention
is a string equality, so

75
00:05:06.970 --> 00:05:11.936
there's a couple of different
ways to determine whether

76
00:05:11.936 --> 00:05:16.797
a string is equal,
you can use the equal operator, or so

77
00:05:16.797 --> 00:05:22.547
if you wanted to do an if statement
to say, is name double equals.

78
00:05:22.547 --> 00:05:25.681
And again, it doesn't have the same
coercion semantics that it does in

79
00:05:25.681 --> 00:05:28.570
JavaScript, it's a triple equals
in JavaScript essentially.

80
00:05:28.570 --> 00:05:33.025
If name equals greeting like this,
you can do that and

81
00:05:33.025 --> 00:05:37.092
that will perform a case
sensitive comparison.

82
00:05:37.092 --> 00:05:42.238
I actually prefer not to compare
strings like this, I like to do it more

83
00:05:42.238 --> 00:05:48.412
explicitly using the static method
string., sorry string.equals.

84
00:05:48.412 --> 00:05:52.232
And what that will give you is it
gives you a few overloaded methods to

85
00:05:52.232 --> 00:05:56.802
tell whether two strings are equal and I
wanna point out one of the two overloads.

86
00:05:56.802 --> 00:05:59.337
So this is if you wanted to
check the strings for equality,

87
00:05:59.337 --> 00:06:01.369
you could also use double
equals in this case.

88
00:06:01.369 --> 00:06:06.085
But in almost all cases where I'm
doing any kind of string comparison,

89
00:06:06.085 --> 00:06:09.475
I will specify the string
comparison explicitly.

90
00:06:09.475 --> 00:06:14.103
And the ones that I use the most are
ordinal or ordinal ignore case, the other

91
00:06:14.103 --> 00:06:19.090
one has to do with culture, which is not
something that, frankly, I use a lot of in

92
00:06:19.090 --> 00:06:24.242
terms of I don't deal a lot with
cultural differences in applications.

93
00:06:24.242 --> 00:06:27.582
So most of the time for most developers,

94
00:06:27.582 --> 00:06:32.495
they are writing ordinal ignore case,
if we had Spencer and

95
00:06:32.495 --> 00:06:38.252
Spencer, that would put those
two strings as being equal.

96
00:06:38.252 --> 00:06:43.966
I prefer this vastly over what developers
like to do, which is name.ToLower,

97
00:06:43.966 --> 00:06:50.154
which would of course return a lower
string and then greeting.ToLower.

98
00:06:50.154 --> 00:06:53.504
We're getting a little bit ahead,
but if this name or

99
00:06:53.504 --> 00:06:57.824
this greeting are instances that are null,
if they're set to null,

100
00:06:57.824 --> 00:07:02.365
it will throw an exception and we can
see that if we run run this program and

101
00:07:02.365 --> 00:07:07.274
accept, I set string name = null,
and then we run this program.

102
00:07:07.274 --> 00:07:11.298
You'll see that in the console we
will get a null reference exception,

103
00:07:11.298 --> 00:07:15.734
which we will talk about when we get into
talking about types a little bit more.

104
00:07:17.224 --> 00:07:21.403
So I do like to use the static
string.equals method because it will

105
00:07:21.403 --> 00:07:25.412
handle milk gracefully and
it won't throw an exception.

106
00:07:25.412 --> 00:07:31.271
So word to the wise out there, there's
a bunch of things about strings that

107
00:07:31.271 --> 00:07:37.432
a lot of different methods that you
can use to operate and modify strings.

108
00:07:37.432 --> 00:07:41.141
You can check the length of a string
by doing the greeting.length,

109
00:07:41.141 --> 00:07:45.499
and you can know how long that string is,
which is useful in case you were working

110
00:07:45.499 --> 00:07:49.662
with a database where it's like this
thing can only be 100 characters and

111
00:07:49.662 --> 00:07:52.488
you wanna limit that
string to 100 characters.

112
00:07:53.608 --> 00:07:56.293
You can also use methods
like starts with or

113
00:07:56.293 --> 00:08:01.135
ends with to see if a string starts
with a specific string of characters.

114
00:08:01.135 --> 00:08:07.228
So we could see that greeting
starts with sp en you know that,

115
00:08:07.228 --> 00:08:14.545
greeting.starts with which returns
Boolean, we can see that here.

116
00:08:14.545 --> 00:08:17.617
Bool, you can use that to check
to see if a string starts or

117
00:08:17.617 --> 00:08:19.685
ends with a specific thing.

118
00:08:19.685 --> 00:08:20.933
You can trim the string,

119
00:08:20.933 --> 00:08:24.386
which means removing the whitespace
from the beginning and the end.

120
00:08:24.386 --> 00:08:29.062
You can take a portion of that string
using the substring method, and

121
00:08:29.062 --> 00:08:31.976
you can also replace parts of that string.

122
00:08:31.976 --> 00:08:36.884
So if you wanted to replace, let's say,

123
00:08:36.884 --> 00:08:43.475
one of my clients lovingly
refers to me as Spencer Rita,

124
00:08:43.475 --> 00:08:48.301
but sometimes he calls me margarita.

125
00:08:48.301 --> 00:08:54.258
So if I wanted to play replace
my greeting.Replace and

126
00:08:54.258 --> 00:08:58.143
we wanted to replace the greeting or

127
00:08:58.143 --> 00:09:05.957
yes with Spencer Rita with meow,
that's how you would do that.

128
00:09:05.957 --> 00:09:09.726
So I'd highly encourage you to look
through this documentation and

129
00:09:09.726 --> 00:09:14.237
kinda get familiar with the string methods
as you're kind of working with them.

130
00:09:14.237 --> 00:09:19.305
And I highly encourage anybody
to check the documentation

131
00:09:19.305 --> 00:09:22.933
that is built right into the IDE, right?

132
00:09:22.933 --> 00:09:27.355
You can hit greeting.and then
see all of the methods that

133
00:09:27.355 --> 00:09:33.203
are available on the string class,
so that string's in a nutshell.

134
00:09:33.203 --> 00:09:36.058
Last thing I will mention is that
every time you create a new string,

135
00:09:36.058 --> 00:09:39.417
you allocate a new string which there
could be performance implications of that

136
00:09:39.417 --> 00:09:41.507
if you find that you're doing that.

137
00:09:41.507 --> 00:09:46.552
StringBuilder is a class if you're having
to append or assign a string and build

138
00:09:46.552 --> 00:09:51.520
upon a string, maybe you're in a loop and
a hundred times it runs and every time

139
00:09:51.520 --> 00:09:56.517
it adds to a specific StringBuilder is
a way that you can gain some efficiency.

140
00:09:56.517 --> 00:09:59.941
It's a common pattern, I also like
it cause it's super explicit and

141
00:09:59.941 --> 00:10:04.132
it doesn't do the string allocation, most
of the time you don't have to worry about

142
00:10:04.132 --> 00:10:07.875
that performance, but I do use string
builder a lot, just in my day to day.

