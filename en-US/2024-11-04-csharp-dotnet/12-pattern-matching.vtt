WEBVTT

1
00:00:00.095 --> 00:00:01.513
Let's touch on pattern matching.

2
00:00:01.513 --> 00:00:10.090
So pattern matching is a relatively new
feature in C#, so definitely useful.

3
00:00:10.090 --> 00:00:15.791
So let's talk about what it means and
what it is and why it's important.

4
00:00:15.791 --> 00:00:20.800
So there are certain times when you
may not know a type at runtime,

5
00:00:20.800 --> 00:00:23.362
it may be of one of several types.

6
00:00:23.362 --> 00:00:27.425
And this is typically true when you're
dealing with objects that may come from

7
00:00:27.425 --> 00:00:30.644
different sources,
we'll see examples of that further in.

8
00:00:30.644 --> 00:00:33.048
But you can do what's
called a type pattern, so

9
00:00:33.048 --> 00:00:34.622
let me show an example of this.

10
00:00:34.622 --> 00:00:40.963
Let me declare, delete all this
good stuff, boom, boom, okay?

11
00:00:40.963 --> 00:00:46.826
So we can say that if we, for some reason,
don't know that this value is string,

12
00:00:46.826 --> 00:00:50.897
we may want to check to see if
it is an instance of string.

13
00:00:50.897 --> 00:00:53.878
So this is the statement that
you would use to do that.

14
00:00:53.878 --> 00:00:59.987
So "is" is the operator in which tells
you is this thing a string or not.

15
00:00:59.987 --> 00:01:05.227
And if it is, we can actually declare
it and capture this in a variable here.

16
00:01:05.227 --> 00:01:09.214
Used to, you had to do this,
evaluate string,

17
00:01:09.214 --> 00:01:15.199
you have to re-declare the string and
re-do what's called casting,

18
00:01:15.199 --> 00:01:18.506
which has changed the type as a string.

19
00:01:18.506 --> 00:01:21.332
But even then,
if you do that It will suggest, hey,

20
00:01:21.332 --> 00:01:24.051
you should really use pattern matching for
this.

21
00:01:24.051 --> 00:01:27.537
So this is just a little bit of what
we like to call syntactic sugar,

22
00:01:27.537 --> 00:01:31.588
something that developers like to read and
like to write that makes their jobs

23
00:01:31.588 --> 00:01:34.423
a little easier,
makes their eyes a little happier.

24
00:01:34.423 --> 00:01:35.585
It's like eye bleach.

25
00:01:35.585 --> 00:01:39.687
So I prefer the syntax,
re-declaring the variable,

26
00:01:39.687 --> 00:01:44.413
right here is just useful,
it just captures that type for you so

27
00:01:44.413 --> 00:01:49.609
you don't have to worry about
re-declaring it and then casting it.

28
00:01:49.609 --> 00:01:53.711
So, kinda helpful, super helpful, in fact.

29
00:01:53.711 --> 00:01:57.024
There are other types of pattern matching,
I'm gonna touch on them.

30
00:01:57.024 --> 00:01:59.592
I'm just gonna show you that they exist.

31
00:01:59.592 --> 00:02:04.850
They're not stuff that I use a ton of,
but they do exist.

32
00:02:04.850 --> 00:02:09.158
You can check to see if
a value is equal to a specific

33
00:02:09.158 --> 00:02:12.039
constant with the "is" statement.

34
00:02:12.039 --> 00:02:15.143
And you might be thinking to yourself,
well, that's cool,

35
00:02:15.143 --> 00:02:18.263
why wouldn't you just use a double equals,
which you could.

36
00:02:18.263 --> 00:02:22.304
But it really becomes important when
you look at something like this,

37
00:02:22.304 --> 00:02:27.108
where you might be determining whether or
not a number fits within a certain range.

38
00:02:27.108 --> 00:02:31.930
Is it greater than or equal to 0,
and is it or, and is it less than or

39
00:02:31.930 --> 00:02:33.237
equal to 100?

40
00:02:33.237 --> 00:02:38.017
So you can compose these
statements multiple ways inside of

41
00:02:38.017 --> 00:02:42.900
your pattern matching statement,
which is really useful.

42
00:02:42.900 --> 00:02:48.315
Another thing to point out is that
once you have this variable declared,

43
00:02:48.315 --> 00:02:54.196
you can this, string variable declared
here, you can say and str.Length.

44
00:02:54.196 --> 00:02:58.786
You can access the string the same
way that you could inside of

45
00:02:58.786 --> 00:03:03.212
the statement here, so
you can continue to operate on it.

46
00:03:03.212 --> 00:03:08.766
I do wanna point out, and this is skipping
ahead to the operator's part a little bit,

47
00:03:08.766 --> 00:03:13.566
that only really applies when you're
using what's called a double and.

48
00:03:13.566 --> 00:03:17.379
Or basically, a short circuiting and,
which we'll talk about.

49
00:03:17.379 --> 00:03:22.464
Essentially, that means that if this is
false, this statement will not execute.

50
00:03:22.464 --> 00:03:25.378
But even if this is false, even if
the left side of the statement is false,

51
00:03:25.378 --> 00:03:28.721
this statement will still try to execute
and C# will complain that this is invalid.

52
00:03:28.721 --> 00:03:32.715
Because you basically have said, I want
you to execute this even if this is not

53
00:03:32.715 --> 00:03:36.893
a string, but I can't have declared this
as a string because it's not a string,

54
00:03:36.893 --> 00:03:39.794
we've determined that, so
little bit of importance.

55
00:03:39.794 --> 00:03:44.988
So pattern matching just gives
you a little bit better syntax,

56
00:03:44.988 --> 00:03:48.418
or a little bit easier syntax to use for
for

57
00:03:48.418 --> 00:03:54.603
operating on the variables that you
have declared inside of your program.

58
00:03:54.603 --> 00:03:59.227
This is a really interesting one,
property patterns, we'll talk about that.

59
00:03:59.227 --> 00:04:03.551
This is skipping ahead just
a little bit on classes, but

60
00:04:03.551 --> 00:04:06.955
you can say that if you
have a person object,

61
00:04:06.955 --> 00:04:12.291
a person with the name of John and
the age of 30, and is match to see,

62
00:04:12.291 --> 00:04:17.366
does this property name equal John and
does their age equal 30?

63
00:04:17.366 --> 00:04:22.528
In practice, I don't do this a ton, I do
this sometimes where I say, if I'm looking

64
00:04:22.528 --> 00:04:27.282
at a collection and I wanna say, does
this length greater than or equal to 0?

65
00:04:27.282 --> 00:04:32.276
But in that case, I usually just write
it out, and I simply do that because

66
00:04:32.276 --> 00:04:37.048
I think that syntax is more common and
I think developers know it more.

67
00:04:37.048 --> 00:04:38.992
Lastly, I'll just touch on it, but

68
00:04:38.992 --> 00:04:42.332
this is something I don't even
think I've written this once.

69
00:04:42.332 --> 00:04:45.105
But it's important to know that
if you're working on tuples,

70
00:04:45.105 --> 00:04:48.629
you can use that "is" statement and check to
see if this tuple is of a certain value.

71
00:04:48.629 --> 00:04:52.833
So you could say, is it one,
and is this value a string, and

72
00:04:52.833 --> 00:04:54.868
is this value equal to true?

73
00:04:54.868 --> 00:04:57.822
And if so, the tuple matches the pattern.

74
00:04:57.822 --> 00:05:03.562
So a lot of flexibility, I think
pattern matching is pretty useful and

75
00:05:03.562 --> 00:05:07.940
I think that for the most part,
I think that the IDE and

76
00:05:07.940 --> 00:05:13.020
the tooling gives you a really
good idea of when you can use it.

77
00:05:13.020 --> 00:05:18.427
So again, as opposed to re-declaring the,
&gt;&gt; Spencer Schneidenbach: Thing here,

78
00:05:18.427 --> 00:05:23.720
the IDE will give you little squiggles and
say, hey, you can use pattern matching.

79
00:05:23.720 --> 00:05:28.050
It's a good way to discover language
features kinda naturally as you're kind of

80
00:05:28.050 --> 00:05:32.266
cutting your teeth in C#, it's one of
the things I love about the ecosystem.

