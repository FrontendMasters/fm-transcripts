WEBVTT

1
00:00:00.002 --> 00:00:03.003
Okay, moving on to dispose.

2
00:00:03.003 --> 00:00:07.404
So the dispose pattern is something that
you need to know as you're dealing with

3
00:00:07.404 --> 00:00:09.513
resources that need to be cleaned up.

4
00:00:09.513 --> 00:00:14.803
So as I mentioned earlier, when a value
type variable goes out of scope,

5
00:00:14.803 --> 00:00:19.505
goes outside of its curly braces,
it's removed immediately.

6
00:00:19.505 --> 00:00:24.315
The reference types that are declared
are eventually removed by the garbage

7
00:00:24.315 --> 00:00:25.151
collector.

8
00:00:25.151 --> 00:00:29.788
But there are some things that some
reference types that represent

9
00:00:29.788 --> 00:00:32.603
other things where disposing of them and

10
00:00:32.603 --> 00:00:35.763
destroying them have
to be done explicitly.

11
00:00:35.763 --> 00:00:38.186
So think about a connection
to like a database.

12
00:00:38.186 --> 00:00:40.692
A database connection
will be kept alive for

13
00:00:40.692 --> 00:00:44.960
as long as the the construct itself
doesn't know when it's appropriate to

14
00:00:44.960 --> 00:00:49.587
close that connection unless the developer
specifically instructs it to do so.

15
00:00:49.587 --> 00:00:55.005
And if it doesn't instruct it to do so,
it will keep that connection open,

16
00:00:55.005 --> 00:00:58.617
even if the even if
the variable the SQL connection

17
00:00:58.617 --> 00:01:03.099
that exists is supposed to be
taken by the garbage collector.

18
00:01:03.099 --> 00:01:06.094
It may be a while before the garbage
collector gets to it and

19
00:01:06.094 --> 00:01:07.450
actually disposes of it.

20
00:01:07.450 --> 00:01:10.241
So this is where the dispose
pattern comes in.

21
00:01:10.241 --> 00:01:13.375
So this gives us more
control as developers,

22
00:01:13.375 --> 00:01:16.103
over when we want to remove resources.

23
00:01:16.103 --> 00:01:19.293
So this is important for
things like you know, you can only have so

24
00:01:19.293 --> 00:01:22.019
many connections to a database
within an application.

25
00:01:22.019 --> 00:01:24.511
Or you don't wanna have
a bunch of files open and

26
00:01:24.511 --> 00:01:28.123
reading from them all at one time and
then just keep those files open so

27
00:01:28.123 --> 00:01:31.817
that nobody else can access them,
no other programs can access them.

28
00:01:33.100 --> 00:01:36.017
&gt;&gt; Spencer Schneidenbach: So this
kinda goes into this idea of unmanaged

29
00:01:36.017 --> 00:01:37.407
resources, right?

30
00:01:37.407 --> 00:01:41.239
The.NET Core library manages,
a lot of this stuff for you.

31
00:01:41.239 --> 00:01:43.552
But there's certain things
that it simply does not.

32
00:01:43.552 --> 00:01:47.824
So database connections are among
the most common of those.

33
00:01:47.824 --> 00:01:50.895
So let's talk about this thing,
the IDisposable interface.

34
00:01:50.895 --> 00:01:55.743
So IDisposable is designed for types
that need to release unmanaged resources

35
00:01:55.743 --> 00:02:00.675
where the developer needs to be the one
to explicitly release those resources.

36
00:02:00.675 --> 00:02:04.404
So let's take, for instance,
something that owns a SQL connection.

37
00:02:04.404 --> 00:02:08.207
As I mentioned, if this thing isn't
properly disposed of by the developer,

38
00:02:08.207 --> 00:02:11.543
it's just gonna hang out in memory and
keep that connection alive,

39
00:02:11.543 --> 00:02:13.666
such that it might prevent somebody else.

40
00:02:13.666 --> 00:02:19.105
If you get 100 connections,
the 101st connection may fail, right?

41
00:02:19.105 --> 00:02:21.299
So what you wanna do is Is
implement this interface.

42
00:02:21.299 --> 00:02:26.975
iDisposable is the interface that
kind of makes dispose work, okay?

43
00:02:26.975 --> 00:02:34.356
And what that is, is it's simply
a method called public void dispose, and

44
00:02:34.356 --> 00:02:40.347
what you do is simply go through and
if you have a, you might.

45
00:02:40.347 --> 00:02:44.661
It's common to have kind of a marker to
say, has this object been disposed or not?

46
00:02:44.661 --> 00:02:48.691
And if it has, then if it has,
then just exit this method.

47
00:02:48.691 --> 00:02:52.794
We don't wanna do anything, but
if it hasn't go through, if it hasn't been

48
00:02:52.794 --> 00:02:57.343
disposed yet, dispose of that connection,
free up that connection so that somebody

49
00:02:57.343 --> 00:03:01.788
else can use it so that we're not keeping
an open connection that we're not using.

50
00:03:01.788 --> 00:03:04.983
And then set the disposed variable
to true, so that way down the line,

51
00:03:04.983 --> 00:03:08.828
if multiple calls to dispose happen, you
don't try to redispose something that's

52
00:03:08.828 --> 00:03:10.745
already been disposed like connection.

53
00:03:10.745 --> 00:03:14.326
Which would probably cause an exception.

54
00:03:14.326 --> 00:03:20.209
So Idisposable is an interface
provided by the runtime,

55
00:03:20.209 --> 00:03:22.911
it's provided by .net.

56
00:03:22.911 --> 00:03:28.918
But it's so integrated into
the runtime there's a language

57
00:03:28.918 --> 00:03:34.100
keyword that is used for
managing those resources,

58
00:03:34.100 --> 00:03:38.926
disposed, even in the case
of an exception, and

59
00:03:38.926 --> 00:03:42.243
it's called the using keyword.

60
00:03:42.243 --> 00:03:45.803
So anything that implements IDisposable,

61
00:03:45.803 --> 00:03:51.285
as long as it implements I disposable,
and technically speaking,

62
00:03:51.285 --> 00:03:56.399
it really just needs to have
a public void Dispose method on it.

63
00:03:56.399 --> 00:04:00.627
You can wrap it in a using statement,
and then you can use your resource.

64
00:04:00.627 --> 00:04:03.958
And at the end of this code block,
at the end of this using block,

65
00:04:03.958 --> 00:04:06.073
that resource will be released, okay?

66
00:04:06.073 --> 00:04:08.258
Again, in the context
of a web application,

67
00:04:08.258 --> 00:04:10.213
you only wanna keep a connection open for

68
00:04:10.213 --> 00:04:13.448
as long as you need to connect to
that database, do the operation.

69
00:04:13.448 --> 00:04:18.248
Cause the database can't accept infinite
number of connection, nothing can.

70
00:04:18.248 --> 00:04:20.376
That's what the using keyword is for.

71
00:04:20.376 --> 00:04:26.011
Recently, in the last few versions
of they've actually made it so

72
00:04:26.011 --> 00:04:30.693
that you can put your using next
to your variable declaration and

73
00:04:30.693 --> 00:04:33.999
skip using inside of
this block altogether.

74
00:04:33.999 --> 00:04:38.039
I tend to think that I don't like this
because I really wanna dispose of my

75
00:04:38.039 --> 00:04:42.411
resource as quickly as I possibly can
not necessarily when this variable drops

76
00:04:42.411 --> 00:04:46.937
out of scope, cuz oftentimes I will want
to do something in that variable scope.

77
00:04:46.937 --> 00:04:50.099
I wanna keep doing a few more things, but

78
00:04:50.099 --> 00:04:53.548
I want this to be completed and
disposed of.

79
00:04:53.548 --> 00:04:58.440
So I like to keep my usings inside of
this block, because it tells me exactly,

80
00:04:58.440 --> 00:05:02.230
it's very explicit about when
this resource will go away.

81
00:05:02.230 --> 00:05:07.594
It's really important to note, if an
exception happens inside of a using block,

82
00:05:07.594 --> 00:05:09.940
the object will still be disposed.

83
00:05:09.940 --> 00:05:12.421
It essentially is syntactic sugar, or

84
00:05:12.421 --> 00:05:16.330
just a convenience way of doing
a giant try catch finally, and

85
00:05:16.330 --> 00:05:21.538
inside that finally, it basically that's
what a using a statement converts to.

86
00:05:21.538 --> 00:05:22.931
And inside that finally,

87
00:05:22.931 --> 00:05:26.727
it will always call dispose to make
sure that that resource is freed up,

88
00:05:26.727 --> 00:05:30.992
even if there's an error, so really
important part of of understanding that.

89
00:05:30.992 --> 00:05:34.135
Cuz if you have an object and
you don't have a using statement,

90
00:05:34.135 --> 00:05:37.991
you have three statements below that,
one of those throws an exception, and

91
00:05:37.991 --> 00:05:42.144
your disposes at the bottom of the method
at Dispose isn't gonna get called because

92
00:05:42.144 --> 00:05:43.478
an exception got thrown.

93
00:05:43.478 --> 00:05:48.636
So it's a really important,
really critical part of the whole system.

94
00:05:48.636 --> 00:05:53.324
Async dispose is a relatively
recent addition, essentially,

95
00:05:53.324 --> 00:05:55.328
you don't have to you can.

96
00:05:55.328 --> 00:06:00.069
There's a an interface called
IAsyncDisposable, which essentially is

97
00:06:00.069 --> 00:06:04.661
a dispose suppose method that returns
a task so that you can await on it.

98
00:06:04.661 --> 00:06:07.664
It's not super critically
important to necessarily use it.

99
00:06:07.664 --> 00:06:10.607
If it's available, you should use it.

100
00:06:10.607 --> 00:06:18.140
Because if you can be async all
the way down, then you should.

101
00:06:18.140 --> 00:06:20.815
But as long as you're using
a using statement to wrap it,

102
00:06:20.815 --> 00:06:23.713
I think that's tends to be more important,
but use a weight,

103
00:06:23.713 --> 00:06:26.360
using as much as you can in
the places that you need to do.

