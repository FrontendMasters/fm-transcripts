WEBVTT

1
00:00:00.210 --> 00:00:04.131
&gt;&gt; Spencer Schneidenbach: Okay, making
HTTP requests another common thing that we

2
00:00:04.131 --> 00:00:09.112
will do, we already kind of did,
actually, we not already kind of did,

3
00:00:09.112 --> 00:00:12.069
we actually did, inside of our code here.

4
00:00:12.069 --> 00:00:16.498
We nude up an HTTP client, and
then we called GetStringAsync.

5
00:00:16.498 --> 00:00:20.698
There's a few other methods that
you'll need to know to use HTTP client

6
00:00:20.698 --> 00:00:24.478
effectively because it's not
just made up of GetStringAsync,

7
00:00:24.478 --> 00:00:26.861
there's actually a ton on HTTP client.

8
00:00:26.861 --> 00:00:31.421
First, it's important to mention that
HTTP client is async all the way down.

9
00:00:31.421 --> 00:00:33.574
I know I mentioned that already,
but it's a good reminder.

10
00:00:33.574 --> 00:00:38.189
So the methods that call them
should be declared async as well,

11
00:00:38.189 --> 00:00:40.376
all the way down as if you can.

12
00:00:40.376 --> 00:00:44.164
And so it's really just exists to
be a high-level abstraction for

13
00:00:44.164 --> 00:00:48.370
making HTTP requests and processing
HTTP responses for those requests.

14
00:00:48.370 --> 00:00:52.996
So one construct, one such construct
that we will see a lot of in

15
00:00:52.996 --> 00:00:56.681
the ASP.NET course is
the HTTP request message.

16
00:00:56.681 --> 00:00:59.793
So this is the thing that
contains all your HTTP headers.

17
00:00:59.793 --> 00:01:00.927
Who made the request?

18
00:01:00.927 --> 00:01:02.750
Or where did the request come from, right?

19
00:01:02.750 --> 00:01:04.198
What resource are you trying to access?

20
00:01:04.198 --> 00:01:05.466
What host are you trying to get to?

21
00:01:05.466 --> 00:01:07.310
What headers are on this request?

22
00:01:07.310 --> 00:01:08.771
What is the body of the request?

23
00:01:08.771 --> 00:01:11.909
That all comes from
the HTTP request message.

24
00:01:11.909 --> 00:01:14.769
So when we're using HTTP
client to make those requests,

25
00:01:14.769 --> 00:01:16.684
this is typically what it looks like.

26
00:01:16.684 --> 00:01:19.989
We would typically go HTTP
request message, it say,

27
00:01:19.989 --> 00:01:24.992
here's the HTTP verb I'd like to use and
the website that I'd like to download.

28
00:01:24.992 --> 00:01:29.914
I'll new up my HTTP client, and
then I'll call send async to

29
00:01:29.914 --> 00:01:33.784
allow me to send this raw
HTTP request message.

30
00:01:33.784 --> 00:01:35.729
There are some other things.

31
00:01:35.729 --> 00:01:40.292
There are other some other methods that
kind of make that a little easier.

32
00:01:40.292 --> 00:01:45.237
You don't have to use send async,
you can use for

33
00:01:45.237 --> 00:01:48.618
ret = await client.GetAsync.

34
00:01:48.618 --> 00:01:51.976
You can use GetAsync here to
actually go and get it, and

35
00:01:51.976 --> 00:01:56.947
that will automatically create an HTTP
request message with the right URL in it.

36
00:01:56.947 --> 00:02:01.519
And you can see that all the way down to
as you navigate through the source code,

37
00:02:01.519 --> 00:02:03.258
you can see that's the case.

38
00:02:03.258 --> 00:02:07.899
Again, it won't let me navigate any
further than that wooden rider, though.

39
00:02:07.899 --> 00:02:12.669
Okay, if you have a let's say
that your connect your comment,

40
00:02:12.669 --> 00:02:17.355
you're interacting with a common API or
some other service.

41
00:02:17.355 --> 00:02:20.803
Maybe it's Azure, or
maybe it's something like SendGrid.

42
00:02:20.803 --> 00:02:24.823
You may have a situation where you
need to add a request header to every

43
00:02:24.823 --> 00:02:27.260
request typically for authentication.

44
00:02:27.260 --> 00:02:31.331
So you might have something like this
where you need to pass in order to make

45
00:02:31.331 --> 00:02:33.902
this service call,
you may need to say, hey.

46
00:02:33.902 --> 00:02:35.877
I need you to send this API key, or

47
00:02:35.877 --> 00:02:39.061
this header with every single
one of these requests.

48
00:02:39.061 --> 00:02:44.396
So you can do that by an HTTP client just
calling default request headers.add so

49
00:02:44.396 --> 00:02:47.672
you can see that here,
default request header.

50
00:02:47.672 --> 00:02:52.902
So this would be basically that any
call GetAsync, PutAsync, PostAsync,

51
00:02:52.902 --> 00:02:57.723
any of those verbs that are made,
any of those requests that are made,

52
00:02:57.723 --> 00:03:01.753
will automatically throw that
header onto that request.

53
00:03:01.753 --> 00:03:05.671
Correspondingly, if you need to authorize
using the authorization header,

54
00:03:05.671 --> 00:03:06.691
that's easy to do.

55
00:03:06.691 --> 00:03:11.577
The authorization of the default request
headers has an authorization header

56
00:03:11.577 --> 00:03:15.138
object available to it, and
this is how you would set it.

57
00:03:15.138 --> 00:03:19.791
You'll see lots of times when you're
talking to other APIs that you're using

58
00:03:19.791 --> 00:03:20.785
bearer tokens.

59
00:03:20.785 --> 00:03:25.787
So you might say new authentication
header value, and then you would give

60
00:03:25.787 --> 00:03:30.867
it the bearer, which is known as
the scheme, and then the actual token that

61
00:03:30.867 --> 00:03:35.731
will be sent to the client, that will
be sent to the server, excuse me.

62
00:03:35.731 --> 00:03:38.407
So we've already kind of
talked about GetAsync, but

63
00:03:38.407 --> 00:03:40.911
there's a couple of things
once you do GetAsync.

64
00:03:40.911 --> 00:03:47.852
So, when we got GetStringAsync,
obviously that just downloaded a string,

65
00:03:47.852 --> 00:03:51.820
but the type for
GetAsync is all different.

66
00:03:51.820 --> 00:03:52.997
It's actually quite a bit different.

67
00:03:57.919 --> 00:04:01.293
So, the type for GetAsync, you'll see.

68
00:04:01.293 --> 00:04:04.083
We hover over it is
an HTTP response message.

69
00:04:04.083 --> 00:04:07.527
So HTTP response message is
the abstraction that represents all

70
00:04:07.527 --> 00:04:10.280
of the things that came
back in that HTTP response.

71
00:04:10.280 --> 00:04:12.056
What are the headers that
came back in that response?

72
00:04:12.056 --> 00:04:14.499
What's the body of that request?

73
00:04:14.499 --> 00:04:18.973
And oftentimes when you're
interacting with these APIs,

74
00:04:18.973 --> 00:04:23.712
you'll say something like I want
the content of the request and

75
00:04:23.712 --> 00:04:28.648
you'll say await client or
sorry response.client or content.

76
00:04:28.648 --> 00:04:29.780
And then you'll see a couple of things.

77
00:04:29.780 --> 00:04:35.198
You'll see the content is HTTP
content is of type HTTP content.

78
00:04:35.198 --> 00:04:37.335
And you can read it as a stream.

79
00:04:37.335 --> 00:04:40.088
So you can read it as
a stream of bytes back.

80
00:04:40.088 --> 00:04:41.138
You can read it as JSON.

81
00:04:41.138 --> 00:04:46.700
So if you're getting a JSON blob from
that API, you can read it back and

82
00:04:46.700 --> 00:04:53.517
put it into a .NET object, which I'll show
examples of that in the ASP.NET course.

83
00:04:53.517 --> 00:04:56.931
You can also just read it as a string,
which is functionally equivalent to what

84
00:04:56.931 --> 00:04:58.964
we did before when we
called GetStringAsync.

85
00:04:58.964 --> 00:05:00.227
So that's taking the body of the request.

86
00:05:00.227 --> 00:05:04.001
Quest, and just just taking that,
reading that content and

87
00:05:04.001 --> 00:05:06.378
putting it into a string into memory.

88
00:05:06.378 --> 00:05:09.877
So functionally,
the same as GetStringAsync.

89
00:05:09.877 --> 00:05:15.250
And then, of course, when you need
to make mutations to target systems,

90
00:05:15.250 --> 00:05:20.028
you make good you can use HTTP
client to make put or POST requests.

91
00:05:20.028 --> 00:05:25.610
Which would be to say that if you wanted
to add in a blog post via an API or

92
00:05:25.610 --> 00:05:30.906
something, you might create a JSON
blob with that content in it,

93
00:05:30.906 --> 00:05:34.497
and then post that off
to the target server.

94
00:05:34.497 --> 00:05:39.350
We already mentioned,
read from JSON very useful, like I said,

95
00:05:39.350 --> 00:05:44.391
for receiving JSON blobs back read
as string or ReadAsSreamAsync.

96
00:05:44.391 --> 00:05:49.887
I have used this recently a lot for
getting files back from an API.

97
00:05:49.887 --> 00:05:53.237
It'll probably be something it would
be something like blob storage, and

98
00:05:53.237 --> 00:05:54.733
these are audio and video files.

99
00:05:54.733 --> 00:05:55.614
These are media files.

100
00:05:55.614 --> 00:05:58.431
So I want to make sure that I'm being
respectful of the resources the server

101
00:05:58.431 --> 00:05:58.974
that I'm at.

102
00:05:58.974 --> 00:06:00.440
So I'll take that stream.

103
00:06:00.440 --> 00:06:04.289
I'll take that stream, I'll open it up,
and then I'll literally

104
00:06:04.289 --> 00:06:08.285
send it off to another caller to send
them that file inside of a stream.

105
00:06:08.285 --> 00:06:10.479
So I'm not taking up 200, 500MB of memory.

106
00:06:10.479 --> 00:06:14.416
That would just be terrible practice.

107
00:06:14.416 --> 00:06:21.316
A couple of other things on
response IsSuccess status code,

108
00:06:21.316 --> 00:06:25.509
so all HTTP requests respond with a or

109
00:06:25.509 --> 00:06:31.750
a the response contains
what's called a StatusCode.

110
00:06:31.750 --> 00:06:34.762
200 level status codes
are considered good,

111
00:06:34.762 --> 00:06:37.189
considered our mission was a success.

112
00:06:37.189 --> 00:06:39.678
300 is typically some kind of redirect.

113
00:06:39.678 --> 00:06:41.847
400 as you get into error territory.

114
00:06:41.847 --> 00:06:45.066
500 is bad error territory.

115
00:06:45.066 --> 00:06:46.295
Well not typically,

116
00:06:46.295 --> 00:06:51.429
anything that's in the 200 to 299 response
code range is considered a good thing.

117
00:06:51.429 --> 00:06:55.406
And this would be considered
IsSuccess status code two true.

118
00:06:55.406 --> 00:07:00.328
There's a lot of times that I use this
if I know that an API may be flaky or

119
00:07:00.328 --> 00:07:05.431
I need to make sure to log to make sure
that this API call succeeded or not.

120
00:07:05.431 --> 00:07:08.270
I'll use IsSuccess status
code to log that or

121
00:07:08.270 --> 00:07:11.706
make sure that I checked status
code to make sure that it

122
00:07:11.706 --> 00:07:16.056
was successful before I do some kind
of processing on that response.

123
00:07:16.056 --> 00:07:19.848
EnsureSuccessStatusCode is a method
that will throw an exception if the re

124
00:07:19.848 --> 00:07:22.266
ResponseStatusCode is
not indicate success.

125
00:07:22.266 --> 00:07:26.838
I almost never use this, simply because
I think that in many cases, in this

126
00:07:26.838 --> 00:07:31.796
one included, there's just cleaner ways
to handle the error state from an API.

127
00:07:31.796 --> 00:07:37.595
And throwing exceptions,
I can usually handle it more gracefully.

128
00:07:37.595 --> 00:07:42.322
Somebody earlier masked about resource
exhaustion if you create one HTTP client

129
00:07:42.322 --> 00:07:43.163
per request.

130
00:07:43.163 --> 00:07:45.931
Yeah, you can absolutely
exhaust system resources.

131
00:07:45.931 --> 00:07:47.189
So you don't do that.

132
00:07:47.189 --> 00:07:50.405
So typically,
in most in an ASP.NET Core context,

133
00:07:50.405 --> 00:07:55.684
you're gonna use an abstraction called
IHttpClientFactory to create them for you.

134
00:07:55.684 --> 00:07:59.960
And it manages all the goodness under the
hood to make sure you don't exhaust system

135
00:07:59.960 --> 00:08:00.643
resources.

136
00:08:00.643 --> 00:08:04.902
Other than that, you will typically
take one shared HTTP static or

137
00:08:04.902 --> 00:08:09.315
HTTP client that's static, and
you will share it across your entire

138
00:08:09.315 --> 00:08:12.604
application and
you just will never dispose of it.

139
00:08:12.604 --> 00:08:16.215
Which is important to say, because while
I said that disposing is important,

140
00:08:16.215 --> 00:08:19.661
there are some things you do not want to
dispose HTTPClient tends to be one of

141
00:08:19.661 --> 00:08:20.389
those things.

142
00:08:20.389 --> 00:08:24.407
Now, if you do dispose of an HTTPClient
created from HTTPClient factory,

143
00:08:24.407 --> 00:08:26.397
I don't think it matters that much.

144
00:08:26.397 --> 00:08:30.529
But other than that, you don't want to
HTTPClient is one of those resources that

145
00:08:30.529 --> 00:08:31.928
implements I disposable,

146
00:08:31.928 --> 00:08:35.970
that you'd actually most of the time
do not want to dispose 99% of the time.

