WEBVTT

1
00:00:00.125 --> 00:00:03.113
&gt;&gt; Spencer Schneidenbach: So classes
represent reference types, as I mentioned,

2
00:00:03.113 --> 00:00:07.608
but you can declare your own specialized
value types, and those are called structs.

3
00:00:07.608 --> 00:00:11.242
And structs in the business world,
in the in the programming world,

4
00:00:11.242 --> 00:00:14.879
unless you're working on high
performance code, you're probably

5
00:00:14.879 --> 00:00:18.970
not gonna declare a lot of them, but
it's important to know that they exist.

6
00:00:18.970 --> 00:00:24.140
So, this is a struct of a point,
which is probably the most ubiquitous

7
00:00:24.140 --> 00:00:29.312
struct example that I could provide,
which is essentially to say that

8
00:00:29.312 --> 00:00:34.503
this is a thing that will be instantiated
and live in the stack, okay?

9
00:00:34.503 --> 00:00:38.243
So it will be cleaned up
immediately as it leaves scope.

10
00:00:38.243 --> 00:00:40.803
It has structural equality built Into it.

11
00:00:40.803 --> 00:00:43.644
So as long as X and Y are equal values,

12
00:00:43.644 --> 00:00:47.509
two instances of point
will be considered equal.

13
00:00:47.509 --> 00:00:51.707
So the handling of this, the main reason I
bring up Structs is to just let you know

14
00:00:51.707 --> 00:00:56.347
that they exist and understand that there
are different semantics, memory handling,

15
00:00:56.347 --> 00:00:57.623
semantics here.

16
00:00:57.623 --> 00:01:01.213
Structs, if you're doing a lot
of mathematical operations or,

17
00:01:01.213 --> 00:01:05.456
If you're collecting a lot of data,
maybe you're doing some complex math or

18
00:01:05.456 --> 00:01:09.395
tracking a lot of points on a graph,
and you need to do some real strong.

19
00:01:09.395 --> 00:01:14.439
If you declare them as a class, you're
probably going to get a performance hit,

20
00:01:14.439 --> 00:01:16.886
versus if you declare them as a struct,

21
00:01:16.886 --> 00:01:20.269
the memory in the stack is
a lot faster to access.

22
00:01:20.269 --> 00:01:25.097
So, point I wanna make is that structs
exist most of the time I don't use them,

23
00:01:25.097 --> 00:01:28.766
I use the ones that are declared for
me by other frameworks.

24
00:01:28.766 --> 00:01:30.771
But this is a structure or

25
00:01:30.771 --> 00:01:36.405
a thing that I tend to respect as just
an option in case the time arises,

26
00:01:36.405 --> 00:01:41.754
where I really need to perform a lot
of mathematical operations and

27
00:01:41.754 --> 00:01:47.893
I wanna do it on a series of objects,
usually like a bunch of points, right?

28
00:01:47.893 --> 00:01:51.249
A collection of points, and
I need to do some kind of operation or

29
00:01:51.249 --> 00:01:53.122
some kind of math on those objects.

30
00:01:53.122 --> 00:01:54.547
Structs can be anything,

31
00:01:54.547 --> 00:01:58.323
they can even have reference
types inside of their properties.

32
00:01:58.323 --> 00:02:01.302
I would say that there
are things that you can do, and

33
00:02:01.302 --> 00:02:03.418
there are things that you should do.

34
00:02:03.418 --> 00:02:07.902
And I never, if I declare structs,
I never declare them in a way where there

35
00:02:07.902 --> 00:02:13.268
are reference types inside, and I always
declare them as immutable structures.

36
00:02:13.268 --> 00:02:15.388
So they would look something like this.

37
00:02:15.388 --> 00:02:19.008
I would construct them such
that I close those setters.

38
00:02:19.008 --> 00:02:20.384
Look ma, no setter.

39
00:02:20.384 --> 00:02:22.226
I close those setters and

40
00:02:22.226 --> 00:02:28.654
I just instantiate those values via
the constructor, that's structs.

41
00:02:28.654 --> 00:02:31.732
Again, high performance most of
the time isn't gonna matter, but

42
00:02:31.732 --> 00:02:34.649
you need to know that it exists
because you will encounter them.

43
00:02:34.649 --> 00:02:38.243
Lots of structs inside of .NET.

44
00:02:38.243 --> 00:02:43.032
However, record Types are really cool.

45
00:02:43.032 --> 00:02:46.987
Record types are awesome, they
are reference types, but they have struct

46
00:02:46.987 --> 00:02:51.437
like properties, and they're meant to be
kind of just dumb containers of data.

47
00:02:51.437 --> 00:02:53.712
So let me show you what they look like.

48
00:02:53.712 --> 00:02:58.702
You can see that a public record,
this is a public record person,

49
00:02:58.702 --> 00:03:02.979
so I'm gonna go ahead and
copy and paste this over here.

50
00:03:02.979 --> 00:03:09.106
A record is a special type of class
that has some implications, right?

51
00:03:09.106 --> 00:03:11.200
Again, they're meant to be
dumb containers of data.

52
00:03:11.200 --> 00:03:15.746
So you can see that this has a name and
it has an age.

53
00:03:15.746 --> 00:03:20.623
So one of the big features about records
is that they are structurally equal by

54
00:03:20.623 --> 00:03:21.306
default.

55
00:03:21.306 --> 00:03:23.300
Let me show you what that looks like.

56
00:03:23.300 --> 00:03:28.213
So I am gonna create a new person and
because this is effectively the definition

57
00:03:28.213 --> 00:03:31.571
for its constructor,
I'm going to give it the name.

58
00:03:31.571 --> 00:03:34.845
So I'm gonna say Spencer and
I'm gonna say 37 and

59
00:03:34.845 --> 00:03:38.815
I'm gonna do the same thing down here,
Spencer 37, okay?

60
00:03:38.815 --> 00:03:44.633
I'm gonna compare these I'm actually
gonna use the double equals this time.

61
00:03:44.633 --> 00:03:47.598
Double equals compare and
see what happens.

62
00:03:49.058 --> 00:03:54.106
Open up my terminal, Control+Shift+

63
00:03:54.106 --> 00:03:57.269
tilde and dotnet run.

64
00:03:57.269 --> 00:03:59.530
Let's see what is it complaining about?

65
00:03:59.530 --> 00:04:01.192
I think I typed a character
somewhere in here.

66
00:04:01.192 --> 00:04:02.640
I did type D tilde.

67
00:04:02.640 --> 00:04:05.541
All right, there we go.

68
00:04:05.541 --> 00:04:08.450
And you're gonna see that these
are now considered equal.

69
00:04:08.450 --> 00:04:12.904
So they're kind of like really specialized
class types but because of their

70
00:04:12.904 --> 00:04:17.496
structural equality, they have a lot
of implications in terms of when you're

71
00:04:17.496 --> 00:04:22.244
trying to process lots of data and you
need to remove duplicates, for instance.

72
00:04:22.244 --> 00:04:26.465
Or you just need to define something,
a quick object to hold some data.

73
00:04:26.465 --> 00:04:30.713
But you don't wanna go through the get
public string, name, get set, and

74
00:04:30.713 --> 00:04:34.086
write that out for
ten different properties.

75
00:04:34.086 --> 00:04:36.824
You can use person records instead.

76
00:04:36.824 --> 00:04:41.644
They also have this really neat
syntax where you can actually

77
00:04:41.644 --> 00:04:45.533
create a new person from
another person record.

78
00:04:45.533 --> 00:04:50.771
So we would say, person one with, and

79
00:04:50.771 --> 00:04:57.169
then we'll just change
their name to George.

80
00:04:57.169 --> 00:04:59.996
And that will effectively
give you a person one record,

81
00:04:59.996 --> 00:05:02.101
a person two record with the name George,

82
00:05:02.101 --> 00:05:05.907
but it will copy over all the other
properties that you don't specify.

83
00:05:05.907 --> 00:05:09.105
So in this case, person 1, or

84
00:05:09.105 --> 00:05:13.784
sorry, person 2 would have the age of 37.

85
00:05:13.784 --> 00:05:17.940
Because I'm doing a lot of processing
usually to and from databases,

86
00:05:17.940 --> 00:05:21.542
this with syntax is not
something I do a ton of.

87
00:05:21.542 --> 00:05:23.178
I'm going to be real with you, but I do use records.

88
00:05:23.178 --> 00:05:26.002
Records are a relatively new feature,
right?

89
00:05:28.072 --> 00:05:32.808
So I do use them, but I don't use
the "with" syntax. That said, it's there and

90
00:05:32.808 --> 00:05:34.589
it's useful if you need it.

91
00:05:34.589 --> 00:05:38.552
It's actually kind of a language
feature of F sharp once upon a time.

92
00:05:38.552 --> 00:05:41.094
It's a very functional language,
and part of that is.

93
00:05:41.094 --> 00:05:45.112
it's like, want to create new objects,
knit objects from other objects.

94
00:05:45.112 --> 00:05:47.872
So it's kind of, you could say that
it was kind of born from that.

95
00:05:47.872 --> 00:05:51.143
Yes, Marc,
&gt;&gt; Marc: Should you use records or

96
00:05:51.143 --> 00:05:53.419
structs or classes for DTOs?

97
00:05:53.419 --> 00:05:56.243
&gt;&gt; Spencer Schneidenbach: That
is a great question, actually,

98
00:05:56.243 --> 00:05:59.164
I think let's actually address that.

99
00:05:59.164 --> 00:06:02.882
Good lead in to records versus
classes versus structs.

100
00:06:02.882 --> 00:06:06.960
So structs for DTOs, the answer is no.

101
00:06:06.960 --> 00:06:11.514
I would use structs when I need them for
high performance, because I need to access

102
00:06:11.514 --> 00:06:15.210
a large amount of objects do some
kind of mathematical operation,

103
00:06:15.210 --> 00:06:16.998
and I need to do it very quickly.

104
00:06:16.998 --> 00:06:19.520
I'm probably gonna reach for structs.

105
00:06:19.520 --> 00:06:22.767
I'm going to use records or
classes for DTOs, and

106
00:06:22.767 --> 00:06:26.478
I will spoiler alert,
the ASP.NET course will almost,

107
00:06:26.478 --> 00:06:31.680
will exclusively use classes simply
because that is what I'm used to writing.

108
00:06:31.680 --> 00:06:35.349
But for DTOs, and I'll explain what that
is in a second, I would use records or

109
00:06:35.349 --> 00:06:36.519
classes.

110
00:06:36.519 --> 00:06:40.385
So I mentioned that
records are kind of just,

111
00:06:40.385 --> 00:06:43.859
they're dummy kind of holding things.

112
00:06:43.859 --> 00:06:46.717
They don't have any behaviors,
there's no methods on them, right?

113
00:06:48.077 --> 00:06:51.619
So they're just made,
their real use is to hold data.

114
00:06:51.619 --> 00:06:55.917
Now you can, if you want to add behaviors
to records but I choose not to do that.

115
00:06:55.917 --> 00:06:59.066
I'm deliberately not kind of showing that
because I want records to be used what

116
00:06:59.066 --> 00:07:01.895
they're meant to be used for
which is just containers for data, okay?

117
00:07:01.895 --> 00:07:07.252
Okay, I lost my point there.

118
00:07:07.252 --> 00:07:12.905
Yes, so in terms of the question,
what is a data transfer object, a DTO?

119
00:07:12.905 --> 00:07:18.132
An object, a DTO is simply an object that
moves data from one thing to another.

120
00:07:18.132 --> 00:07:20.992
When we're talking about
the context of an API,

121
00:07:20.992 --> 00:07:24.131
this will be important when
we're sending JSON to and

122
00:07:24.131 --> 00:07:29.030
from a system, because we may send a JSON
object, something that looks like this.

123
00:07:37.034 --> 00:07:40.738
&gt;&gt; Spencer Schneidenbach: Something that
looks like this, where we have a name,

124
00:07:40.738 --> 00:07:44.213
Spencer and
we wanna marshal that into our system.

125
00:07:44.213 --> 00:07:46.936
Let's make the squiggles go away
because they're distracting.

126
00:07:46.936 --> 00:07:50.127
Boom, okay.

127
00:07:50.127 --> 00:07:54.761
When we're sending data to and from
a target system in a format like JSON or

128
00:07:54.761 --> 00:07:57.080
some other structured data format,

129
00:07:57.080 --> 00:08:01.520
typically once that reaches
the C-Sharp system, our .NET system,

130
00:08:01.520 --> 00:08:06.239
it'll be represented by something,
and in that case, it'll be represented by

131
00:08:06.239 --> 00:08:10.507
a, probably a person type, right, where
we can take this name and then set it to

132
00:08:10.507 --> 00:08:14.495
this, which we'll see plenty of examples
of when we get to that section.

133
00:08:14.495 --> 00:08:18.746
A DTO is just basically a representation
of data that could be incoming or

134
00:08:18.746 --> 00:08:19.830
outgoing.

135
00:08:19.830 --> 00:08:23.430
So the answer to the question is, I'm
gonna use either classes or records, but

136
00:08:23.430 --> 00:08:26.671
because I'm used to using classes,
I'm probably gonna use classes.

