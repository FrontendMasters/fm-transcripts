WEBVTT

1
00:00:00.000 --> 00:00:04.395
All right, I'm gonna go ahead and
demonstrate some of the LINQ features.

2
00:00:04.395 --> 00:00:09.235
So I'm gonna say prop string Name, and

3
00:00:09.235 --> 00:00:14.229
I am going to say prop int Salary, okay?

4
00:00:14.229 --> 00:00:19.768
And we'll do FirstName and LastName, okay?

5
00:00:19.768 --> 00:00:24.604
And then I'm gonna create a collection
of employees, var employees, so

6
00:00:24.604 --> 00:00:26.403
I'm gonna say, new list.

7
00:00:26.403 --> 00:00:29.155
We'll just go with the list of employee.

8
00:00:29.155 --> 00:00:32.926
And I'm gonna go ahead and
fill this list with some new employees.

9
00:00:32.926 --> 00:00:38.625
So I'm gonna say, FirstName = ''Spencer'',

10
00:00:38.625 --> 00:00:44.591
LastName = "George", Salary = 100,000.

11
00:00:44.591 --> 00:00:46.812
Kinda go with the example
that we had before.

12
00:00:46.812 --> 00:00:48.019
We'll copy through these.

13
00:00:48.019 --> 00:00:51.687
We'll make some more salaries,

14
00:00:51.687 --> 00:00:56.927
some more different salaries, and 144444,

15
00:00:56.927 --> 00:01:02.441
and we'll go, Albert,
&gt;&gt; Spencer Schneidenbach: And

16
00:01:02.441 --> 00:01:07.452
Amy, and Grant, and Snape.

17
00:01:07.452 --> 00:01:14.115
[LAUGH] All right, and Micah, all right.

18
00:01:14.115 --> 00:01:16.358
So now we wanna operate
on this collection.

19
00:01:16.358 --> 00:01:20.401
So, first things first, we're gonna look
at select, select is our way of kinda

20
00:01:20.401 --> 00:01:24.104
taking a collection and transforming
it down into its component pieces.

21
00:01:24.104 --> 00:01:26.757
So I'm gonna just start by collecting,

22
00:01:26.757 --> 00:01:30.672
maybe I just want a distinct
list of last names in this list.

23
00:01:30.672 --> 00:01:32.374
So these are the things you can do.

24
00:01:32.374 --> 00:01:37.008
So you can go var distinctLastNames.

25
00:01:37.008 --> 00:01:40.266
You can say, employees.Select.

26
00:01:40.266 --> 00:01:43.607
You give it the e, this is where
that lambda function comes in.

27
00:01:43.607 --> 00:01:48.477
E is the argument to that function,
and it will be of our employee object.

28
00:01:48.477 --> 00:01:51.451
We do our equals sign, it's the equals and

29
00:01:51.451 --> 00:01:54.847
greater than sign that
the pronounce goes into.

30
00:01:54.847 --> 00:02:01.939
So we do Select(e) goes into e.LastName,
okay?

31
00:02:01.939 --> 00:02:06.914
So now we've transformed this list
of employees, if we look here,

32
00:02:06.914 --> 00:02:10.336
we now have a list of IEnumerable,
of string.

33
00:02:10.336 --> 00:02:12.970
It says, T is string.

34
00:02:12.970 --> 00:02:18.438
So I can see that by saying IEnumerable
&lt;string&gt; distinctLastNames, e of string.

35
00:02:18.438 --> 00:02:21.752
So, we wanna say, well, what do we want?

36
00:02:21.752 --> 00:02:23.627
We want the distinct
elements of this collection.

37
00:02:23.627 --> 00:02:24.441
At this point,

38
00:02:24.441 --> 00:02:31.310
if we spin through this,
&gt;&gt; Spencer Schneidenbach: We're

39
00:02:31.310 --> 00:02:36.458
just gonna get, Console.WriteLine,
we're gonna get each of those names,

40
00:02:36.458 --> 00:02:40.439
we haven't really done anything
to make them distinct yet.

41
00:02:40.439 --> 00:02:44.049
We are gonna get, George,
George, George, Albert, George.

42
00:02:44.049 --> 00:02:47.715
There's other methods on top of LINQ,
you can chain lots of LINQ calls together.

43
00:02:47.715 --> 00:02:51.618
So what we would do is we can say Select,
and then we can call the extension method

44
00:02:51.618 --> 00:02:54.259
called Distinct,
which does not take any argument.

45
00:02:54.259 --> 00:02:58.738
It basically says, I'm just gonna return
to you the distinct elements of this thing

46
00:02:58.738 --> 00:03:03.297
that you selected, such that at the end of
that, you will just get George and Albert.

47
00:03:03.297 --> 00:03:06.483
And we can continue to chain
these things together.

48
00:03:06.483 --> 00:03:11.914
We can say, Where(e =&gt;), now,
where is a special case where, if you

49
00:03:11.914 --> 00:03:17.978
look at the function signature, it takes
in a Func of employee and returns a bool.

50
00:03:17.978 --> 00:03:23.573
So we'll say e, which is an employee
parameter, this is a little function,

51
00:03:23.573 --> 00:03:27.889
goes into e.Salary, and
we wanna return a bool from this.

52
00:03:27.889 --> 00:03:30.534
So we need to return
some kind of condition.

53
00:03:30.534 --> 00:03:33.625
We could return true,
it doesn't really do us much good.

54
00:03:33.625 --> 00:03:37.985
Or we could say,
e.Salary is greater than 50,000, right?

55
00:03:37.985 --> 00:03:42.170
So what we're doing is using LINQ to very,

56
00:03:42.170 --> 00:03:47.770
very easily express how we
want this collection to look.

57
00:03:47.770 --> 00:03:52.675
Contrast that with the syntax
that we had shown previously

58
00:03:52.675 --> 00:03:54.986
at the top of this example.

59
00:03:54.986 --> 00:03:57.002
That's a crazy amount of work and

60
00:03:57.002 --> 00:04:00.390
a crazy amount of code to get
exactly the same thing out.

61
00:04:00.390 --> 00:04:06.129
So we can do that by using this,
by chaining together our LINQ methods.

62
00:04:06.129 --> 00:04:09.760
So we've looked at Select, we've looked
at Where, we've looked at Distinct,

63
00:04:09.760 --> 00:04:11.666
I wanna show you a little
bit of a property.

64
00:04:11.666 --> 00:04:16.660
Think of it as a kinda
the origin of a record class.

65
00:04:16.660 --> 00:04:20.834
Let's say that you just needed last
name and first name from this, and

66
00:04:20.834 --> 00:04:23.542
you wanted to get
the distinct list of names.

67
00:04:23.542 --> 00:04:26.022
Let's say there were two Snape Georges,
and

68
00:04:26.022 --> 00:04:28.442
you just wanted to get
their distinct list.

69
00:04:28.442 --> 00:04:30.788
So, there's a couple of
different ways you can do that.

70
00:04:30.788 --> 00:04:34.045
The main way that you do that is declare
what's called an anonymous type.

71
00:04:34.045 --> 00:04:37.785
So you can see that I am gonna go
ahead and change this back to var,

72
00:04:37.785 --> 00:04:41.471
because it's going to be
interpreted as a string.LastName.

73
00:04:41.471 --> 00:04:46.432
So what I've done is I've created
an entirely new type without actually

74
00:04:46.432 --> 00:04:49.293
declaring a class or a record or a struct.

75
00:04:49.293 --> 00:04:53.934
I've declared something completely new,
and I can use link to operate on that.

76
00:04:53.934 --> 00:04:58.176
So we would say, e.FirstName, and
then we could still call distinct on this.

77
00:04:58.176 --> 00:05:02.475
One of the cool properties of
anonymous types is like records,

78
00:05:02.475 --> 00:05:04.674
they're structurally equal.

79
00:05:04.674 --> 00:05:07.467
So anything where it's Snape George,
Snape George,

80
00:05:07.467 --> 00:05:11.970
as long as those are the only properties I
selected, it's considered a unique record.

81
00:05:11.970 --> 00:05:17.118
And we can see that,
if we run this, we can see that

82
00:05:17.118 --> 00:05:22.029
we should print, we print three records.

83
00:05:22.029 --> 00:05:23.940
So you could see that, yes, and

84
00:05:23.940 --> 00:05:27.656
we've filtered out people that
have a salary less than 50,000.

85
00:05:27.656 --> 00:05:28.891
So we've only gotten these.

86
00:05:28.891 --> 00:05:32.213
And if we take this out and run it again,

87
00:05:32.213 --> 00:05:36.862
you can see now that we get
four names instead of three.

88
00:05:36.862 --> 00:05:40.990
So, those are some of
the features of LINQ.

89
00:05:40.990 --> 00:05:44.741
So we've got Select, where we can
select an individual property.

90
00:05:44.741 --> 00:05:50.775
We can select a bag of properties
using using anonymous type.

91
00:05:50.775 --> 00:05:52.304
You can even select a whole new class.

92
00:05:52.304 --> 00:05:56.166
You can instantiate a whole class in here,
if you wanted to.

93
00:05:56.166 --> 00:06:00.270
You could create a person class and
instantiate that instead,

94
00:06:00.270 --> 00:06:02.289
we can do that, class Person.

95
00:06:02.289 --> 00:06:05.497
We'll go ahead and use the primary
constructor to save keystrokes.

96
00:06:12.037 --> 00:06:16.330
&gt;&gt; Spencer Schneidenbach: And we can
call that right here, new Person, and

97
00:06:16.330 --> 00:06:23.060
then we would give it the string
FirstName, e.FirstName, e.Last name.

98
00:06:23.060 --> 00:06:27.669
So that's an example of
some of the functions.

99
00:06:27.669 --> 00:06:30.745
Let me talk to you about the ones
that I think are most important.

100
00:06:30.745 --> 00:06:33.164
So, select, we've talked about that.

101
00:06:33.164 --> 00:06:36.962
We've talked about Where,

102
00:06:36.962 --> 00:06:42.825
e e.Salary is greater than 50,000.

103
00:06:42.825 --> 00:06:44.663
So we've talked about Where,
used a filter.

104
00:06:44.663 --> 00:06:47.698
You can also chain Wheres,
so you can say another wear.

105
00:06:47.698 --> 00:06:54.227
You can say e is e.LastName.StartsWith

106
00:06:54.227 --> 00:06:59.084
("S"), in this case, G.

107
00:06:59.084 --> 00:07:04.556
So you chain this pretty well infinitely
down, as far down as you can go,

108
00:07:04.556 --> 00:07:08.338
like I said, in a really nice and
expressive way.

109
00:07:08.338 --> 00:07:11.287
You can also order by,
you can say, OrderBy.

110
00:07:11.287 --> 00:07:15.573
And you can just say,
I just wanna order by the object itself,

111
00:07:15.573 --> 00:07:19.628
which will work because of
the nature of anonymous types.

112
00:07:19.628 --> 00:07:21.593
You could also say,
just order by last name.

113
00:07:24.270 --> 00:07:25.461
&gt;&gt; Spencer Schneidenbach: Let me see,
yeah,

114
00:07:25.461 --> 00:07:29.577
because I haven't defined property here,
create and assign property.

115
00:07:29.577 --> 00:07:31.289
Create and assign property.

116
00:07:31.289 --> 00:07:35.229
Just let my IDE do all the hard work.

117
00:07:35.229 --> 00:07:39.168
So, that in a nutshell is LINQ.

118
00:07:39.168 --> 00:07:42.425
Those are probably the most
important methods, but

119
00:07:42.425 --> 00:07:44.875
there's a few more I do wanna touch on.

120
00:07:44.875 --> 00:07:49.474
So up to this point we've
kind of operated on just

121
00:07:49.474 --> 00:07:53.513
operating on just other collections, but

122
00:07:53.513 --> 00:07:59.134
what if you wanna select
individual values from this list?

123
00:07:59.134 --> 00:08:04.200
There's a couple of different
methods that you can use to do that.

124
00:08:04.200 --> 00:08:07.697
So if I wanted to select Micah,
assuming he was there,

125
00:08:07.697 --> 00:08:12.106
if I knew the position that his record
was gonna be inside of this, and

126
00:08:12.106 --> 00:08:16.231
I often don't, I would use ElementAt or
ElementAtOrDefault.

127
00:08:16.231 --> 00:08:22.381
And you can think of this like index or
syntax inside of an array or a list.

128
00:08:22.381 --> 00:08:23.587
But you can basically say,

129
00:08:23.587 --> 00:08:26.324
I just want to get the element
that exists in this collection.

130
00:08:26.324 --> 00:08:31.286
A collection is gonna be up to,
in this case, probably 3, 4, 5 records.

131
00:08:31.286 --> 00:08:34.871
Most of the time, you're probably
not gonna know ahead of time,

132
00:08:34.871 --> 00:08:38.262
because you're just operating
on a collection with which you

133
00:08:38.262 --> 00:08:41.407
don't necessarily know where
that thing is going to be.

134
00:08:41.407 --> 00:08:45.127
But what you can do is there's four
methods that you need to know.

135
00:08:45.127 --> 00:08:52.290
We've kinda gone through the projection.

136
00:08:52.290 --> 00:08:56.165
We've talked about Select,
we've talked about Where, OrderBy, but

137
00:08:56.165 --> 00:09:00.357
the four methods that you really need to
know are First or FirstOrDefault, and

138
00:09:00.357 --> 00:09:01.964
Single or SingleOrDefault.

139
00:09:01.964 --> 00:09:07.386
So First, essentially, we'll say,
give me the first number in this list.

140
00:09:07.386 --> 00:09:11.718
So given this list of values,
I want you to give me the first one, and

141
00:09:11.718 --> 00:09:15.454
it's going to return the top
element of that collection.

142
00:09:15.454 --> 00:09:18.044
An empty array, which we've declared, or

143
00:09:18.044 --> 00:09:22.178
an empty list here that we call first
on is going to throw an exception.

144
00:09:22.178 --> 00:09:28.571
Because it says, hey,
I expect you to return something to me.

145
00:09:28.571 --> 00:09:31.010
I don't care how many
elements are in the list, but

146
00:09:31.010 --> 00:09:34.723
if you don't return anything to me,
a call to First will throw an exception.

147
00:09:34.723 --> 00:09:37.467
FirstOrDefault, correspondingly,

148
00:09:37.467 --> 00:09:41.788
will return the first element of an array,
or it It will return

149
00:09:41.788 --> 00:09:46.289
the default value if there is no
elements in the array to return.

150
00:09:46.289 --> 00:09:51.410
So in this case, it will return the
default value of an integer, which is 0.

151
00:09:51.410 --> 00:09:56.755
If you had a list of reference types,
it would return a null.

152
00:09:56.755 --> 00:10:00.155
Say that to Single,
which is not going to return the first,

153
00:10:00.155 --> 00:10:04.048
it's going to expect there to be
exactly one element in this array.

154
00:10:04.048 --> 00:10:06.668
That's what it expects in this collection.

155
00:10:06.668 --> 00:10:12.525
So, given a single number list,
if we call .Single, it's gonna return 42

156
00:10:12.525 --> 00:10:17.880
very happily, whereas in an empty list,
it will return an exception.

157
00:10:17.880 --> 00:10:22.371
Or in a list, in a collection
with more than one element,

158
00:10:22.371 --> 00:10:25.567
it's also going to throw an exception.

159
00:10:25.567 --> 00:10:31.686
A method called a Single says I
want exactly one record, period.

160
00:10:31.686 --> 00:10:37.318
And SingleOrDefault is either looking for
a collection that has one element or zero.

161
00:10:37.318 --> 00:10:39.566
Anything else, it will throw an exception.

162
00:10:39.566 --> 00:10:43.611
So, more than one element will
throw an exception every time.

163
00:10:43.611 --> 00:10:46.285
They can also take an optional predicate.

164
00:10:46.285 --> 00:10:51.429
So, let's say for instance,
that we just wanted

165
00:10:51.429 --> 00:10:56.830
the single value of e.LastName ==,
let's see.

166
00:10:56.830 --> 00:11:00.301
Or we'll say FirstName,
cuz we're looking at Micah.

167
00:11:03.335 --> 00:11:08.398
&gt;&gt; Spencer Schneidenbach:
Console.WriteLine(micah), boom.

168
00:11:11.193 --> 00:11:16.160
&gt;&gt; Spencer Schneidenbach: And,
open up our terminal, and dotnet run.

169
00:11:16.160 --> 00:11:16.982
And we'll see what happens.

170
00:11:16.982 --> 00:11:22.775
Okay, so because inside of this collection
we filtered out Micah, who has a salary of

171
00:11:22.775 --> 00:11:28.098
less than 50,000, we filtered them out,
so Single returned nothing.

172
00:11:28.098 --> 00:11:29.666
Sorry, it didn't return nothing,
it threw an exception.

173
00:11:29.666 --> 00:11:31.785
It said, I didn't find any element.

174
00:11:31.785 --> 00:11:36.245
Correspondingly, as I mentioned before,

175
00:11:36.245 --> 00:11:40.714
SingleOrDefault will return a null value.

176
00:11:40.714 --> 00:11:46.212
Which is, yep, it printed it right here,
prints as an empty string.

177
00:11:46.212 --> 00:11:47.311
So you can do that one of two ways.

178
00:11:47.311 --> 00:11:50.842
So, this is an optional argument,
you can call SingleOrDefault.

179
00:11:50.842 --> 00:11:55.031
And then, if you're calling
SingleOrDefault without a predicate,

180
00:11:55.031 --> 00:11:58.155
you better be sure that this
thing has exactly zero or

181
00:11:58.155 --> 00:12:01.572
one elements in this collection,
or it's gonna throw.

182
00:12:01.572 --> 00:12:05.475
The most of the time when I'm
calling single or SingleOrDefault,

183
00:12:05.475 --> 00:12:07.225
I'm passing in a predicate.

184
00:12:07.225 --> 00:12:13.714
And as I mentioned, if I'm sure that that
collection has no other elements in it,

185
00:12:13.714 --> 00:12:18.811
I'm gonna be calling SingleOrDefault
without the predicate.

186
00:12:18.811 --> 00:12:23.808
This comes down to a word of warning, bugs
often hide in First or FirstOrDefault.

187
00:12:23.808 --> 00:12:24.905
I see this countless times,

188
00:12:24.905 --> 00:12:27.796
where a developer says, hey, I just
want the first element in this array.

189
00:12:27.796 --> 00:12:30.189
This literally happened to
me a couple of weeks ago.

190
00:12:30.189 --> 00:12:37.243
I had a developer under me who,
he fixed a bug by calling First.

191
00:12:37.243 --> 00:12:40.559
He said, well, we just need
the first element in this array.

192
00:12:40.559 --> 00:12:43.167
Not realizing that there were duplicates,
and

193
00:12:43.167 --> 00:12:45.589
what he was doing was technically invalid.

194
00:12:45.589 --> 00:12:48.804
It did get the program to run,
but then correspondingly,

195
00:12:48.804 --> 00:12:50.778
set the system in an invalid state.

196
00:12:50.778 --> 00:12:54.623
Because it said, well, you just wanted the
first record, but if you were expecting

197
00:12:54.623 --> 00:12:57.944
a single record and there were multiple
ones, that can cause problems.

198
00:12:57.944 --> 00:13:01.509
So I'm here to come to you with a word
of warning, that I do not use First or

199
00:13:01.509 --> 00:13:05.024
FirstOrDefault almost ever,
if I can use Single or SingleOrDefault.

200
00:13:05.024 --> 00:13:08.616
And because they're methods
on the same collection,

201
00:13:08.616 --> 00:13:12.921
you can see that Single or
SingleOrDefault are perfectly valid.

202
00:13:12.921 --> 00:13:16.054
And most of the time, when you're looking
at a collection and you're trying to get

203
00:13:16.054 --> 00:13:18.938
a single value out, those are gonna be
the methods that you wanna reach for.

204
00:13:22.724 --> 00:13:23.563
&gt;&gt; Spencer Schneidenbach: Questions.

205
00:13:25.454 --> 00:13:29.515
&gt;&gt; Student 1: So, are these kind
of meant to be used once you've

206
00:13:29.515 --> 00:13:33.974
already filtered through
a list to find what you want?

207
00:13:33.974 --> 00:13:38.772
Because others, I guess I don't
really understand the point

208
00:13:38.772 --> 00:13:42.470
of saying Single,
you have one element, yes.

209
00:13:42.470 --> 00:13:44.397
&gt;&gt; Spencer Schneidenbach: Yeah,
that's a good question.

210
00:13:44.397 --> 00:13:47.403
So let's take this example, real quick.

211
00:13:47.403 --> 00:13:52.509
Kinda just look at this, let's say
that we didn't use this filtered list.

212
00:13:52.509 --> 00:13:55.681
Let's say we were actually doing
an operation that was just on the list of

213
00:13:55.681 --> 00:13:56.255
employees.

214
00:13:56.255 --> 00:14:00.026
We can go back and
have our call to Single be on this.

215
00:14:00.026 --> 00:14:02.826
So it could be,
it just depends on the use case, right?

216
00:14:02.826 --> 00:14:07.551
It could be that you're filtering
down a list and then calling Single.

217
00:14:07.551 --> 00:14:12.396
Most of the time you're probably
going to know ahead of time if there

218
00:14:12.396 --> 00:14:14.952
is a single element in a list or not.

219
00:14:14.952 --> 00:14:18.857
But in this case, you can absolutely
just call it pre-filtered.

220
00:14:18.857 --> 00:14:20.889
And this would be your kind of,
filtering predicate.

221
00:14:20.889 --> 00:14:24.873
And that's very common to do, especially
when you go into a database and you say,

222
00:14:24.873 --> 00:14:26.913
I want employee record 1234.

223
00:14:26.913 --> 00:14:29.193
There's probably,
in a well-designed system,

224
00:14:29.193 --> 00:14:32.491
there's only gonna be one employee
record with an ID of 1234.

225
00:14:32.491 --> 00:14:36.548
So most of the time you're usually
calling SingleOrDefault or

226
00:14:36.548 --> 00:14:39.160
Single on non-filtered collections.

227
00:14:39.160 --> 00:14:40.526
Good question.

228
00:14:40.526 --> 00:14:43.696
&gt;&gt; Student 2: Is there a method
similar to Reduce, from JavaScript?

229
00:14:43.696 --> 00:14:47.319
&gt;&gt; Spencer Schneidenbach: Yes,
that is called Aggregate, and yes,

230
00:14:47.319 --> 00:14:48.936
you can reduce it.

231
00:14:48.936 --> 00:14:55.329
And essentially, it takes a collection and
reduces it down to a single value.

232
00:14:55.329 --> 00:14:58.271
So if you could have a list of strings,
you could call Aggregate, and

233
00:14:58.271 --> 00:15:01.642
then get it down to concatenating all
those strings together, for instance.

234
00:15:01.642 --> 00:15:03.722
Let's see a quick example of that.

235
00:15:03.722 --> 00:15:05.493
I'm gonna keep that up there.

236
00:15:05.493 --> 00:15:10.563
But if you had a, we have
a collection here, we'll just use it.

237
00:15:10.563 --> 00:15:14.554
We'll just say, var names, and we say,

238
00:15:14.554 --> 00:15:19.356
employees.Select, e goes into e.FirstName.

239
00:15:19.356 --> 00:15:23.530
We'll just get the first
name here to array.

240
00:15:23.530 --> 00:15:26.920
And then you can aggregate,
names.Aggregate.

241
00:15:26.920 --> 00:15:32.179
And so, you can see that if you hover
over it, it does return a string.

242
00:15:32.179 --> 00:15:38.475
It takes in a func that takes in two
strings and then returns a string.

243
00:15:38.475 --> 00:15:44.495
And what you can do is use that as a way
to combine all those strings together,

244
00:15:44.495 --> 00:15:45.731
for instance.

245
00:15:45.731 --> 00:15:47.443
And it's a good way to
sum a bunch of numbers.

246
00:15:47.443 --> 00:15:52.284
Although there's a sum method that
you can just call to sum numbers.

247
00:15:52.284 --> 00:15:55.598
So, you don't have to do that, per se.

248
00:15:55.598 --> 00:16:00.590
But let's say x, y, because we
know we're taking a func of func

249
00:16:00.590 --> 00:16:04.821
goes into x + y, and
then we'll see what it writes.

250
00:16:04.821 --> 00:16:06.281
Console.WriteLine.

251
00:16:09.029 --> 00:16:12.691
&gt;&gt; Spencer Schneidenbach: You can think of
Aggregate as a way to just take a set of

252
00:16:12.691 --> 00:16:15.532
values and convert it down to one value.

253
00:16:15.532 --> 00:16:18.439
Often used for, as you can imagine,
aggregate functions.

254
00:16:18.439 --> 00:16:21.754
So you can see that,
because all we've done is concatenate,

255
00:16:21.754 --> 00:16:25.008
taken all their names and
then concatenated them together,

256
00:16:25.008 --> 00:16:28.484
that we've aggregated them down
to a single string value here.

257
00:16:28.484 --> 00:16:33.288
And that value is all of the names put
together, Spencer, Snape, Micah, Grant,

258
00:16:33.288 --> 00:16:33.984
and Snape.

259
00:16:33.984 --> 00:16:39.427
There's a couple of other LINQ methods
that you'll definitely wanna know about.

260
00:16:39.427 --> 00:16:42.704
So if we go down to here,
Aggregate Methods.

261
00:16:42.704 --> 00:16:47.349
If you have a collection of numbers and
you wanna sum them together,

262
00:16:47.349 --> 00:16:51.518
you can take for instance,
this list, and then call .sum.

263
00:16:51.518 --> 00:16:58.013
And then say, it will sum all of those
integer or doubles or decimals for you.

264
00:16:58.013 --> 00:16:59.785
There is a max and a min,

265
00:16:59.785 --> 00:17:05.274
that we can use to return the maximum
value within an array, or a collection,

266
00:17:05.274 --> 00:17:10.017
I mean, or the minimum value,
which, in this case, would be 1.

267
00:17:10.017 --> 00:17:13.321
And of course, there's an average,
which would return the mean.

268
00:17:13.321 --> 00:17:16.773
And there is something that you
should know about that sum and

269
00:17:16.773 --> 00:17:20.562
those aggregate methods,
is that if you call them on empty lists,

270
00:17:20.562 --> 00:17:23.219
you will get an invalid
operation exception.

271
00:17:23.219 --> 00:17:27.555
Because you can't sum a collection
of numbers that does not exist.

272
00:17:27.555 --> 00:17:32.319
So if this is an empty array and you call
sum on it, it will throw an exception.

273
00:17:32.319 --> 00:17:36.619
You can use the DefaultIfEmpty to
actually populate it to say, hey,

274
00:17:36.619 --> 00:17:41.085
if this array is empty, then just
give me value 0, just default to 0.

275
00:17:41.085 --> 00:17:43.729
And that will protect you
from getting an exception,

276
00:17:43.729 --> 00:17:46.430
throw it if you just wanted to
sum the values in array and

277
00:17:46.430 --> 00:17:50.210
you don't know ahead of time if there
will actually be values in that array.

278
00:17:50.210 --> 00:17:52.586
Maybe you're getting
salaries from a database and

279
00:17:52.586 --> 00:17:54.520
you just wanna sum them all together, but

280
00:17:54.520 --> 00:17:58.790
you've added filtering criteria, you
only want salaries greater than 300,000.

281
00:17:58.790 --> 00:18:00.545
Well, nobody in the company makes that.

282
00:18:00.545 --> 00:18:02.977
So that would be a use case for
why we would use that.

