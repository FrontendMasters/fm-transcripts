WEBVTT

1
00:00:00.106 --> 00:00:02.077
Talk about this virtual keyword.

2
00:00:02.077 --> 00:00:03.805
What the heck is that?

3
00:00:03.805 --> 00:00:06.069
So virtual is a keyword
that essentially says,

4
00:00:06.069 --> 00:00:08.059
I want to have a default implementation.

5
00:00:08.059 --> 00:00:13.724
I want to have a default way
that this behavior works, but

6
00:00:13.724 --> 00:00:20.463
I also want derived classes to be
able to modify it if they so choose.

7
00:00:20.463 --> 00:00:23.591
So this is where the tooling comes in
because it makes it super easy to do.

8
00:00:23.591 --> 00:00:25.656
I can start typing an override and

9
00:00:25.656 --> 00:00:28.621
it gives me a list of
things that I can override.

10
00:00:28.621 --> 00:00:32.733
Now, I mentioned that all objects
have equal and equals method,

11
00:00:32.733 --> 00:00:34.764
a get hash code and a two string.

12
00:00:34.764 --> 00:00:37.757
Those are all things that you can
override based out of the class.

13
00:00:37.757 --> 00:00:43.018
Because get employee details is marched
ritual as well, we can override that.

14
00:00:43.018 --> 00:00:46.110
So if we hit Tab, which I just did, and

15
00:00:46.110 --> 00:00:50.462
that basically just kind of
put in all of the classes,

16
00:00:50.462 --> 00:00:55.708
all of the behavior here that we
wanted to find the method for us.

17
00:00:55.708 --> 00:00:56.891
Talk about a couple of things.

18
00:00:56.891 --> 00:01:00.174
First things first, we got this base call.

19
00:01:00.174 --> 00:01:03.655
Base Is what's known as the base class.

20
00:01:03.655 --> 00:01:07.097
You can see if we hover over it,
it actually tells us base employee.

21
00:01:07.097 --> 00:01:11.251
Now, it has nothing to do with
the base being in the name, and

22
00:01:11.251 --> 00:01:14.929
I'll illustrate that by
just doing that real quick.

23
00:01:14.929 --> 00:01:18.513
You can see that base refers
back to the employee class,

24
00:01:18.513 --> 00:01:21.190
because that's what we inherited from.

25
00:01:21.190 --> 00:01:23.362
But we can also call the get
employee details method.

26
00:01:23.362 --> 00:01:26.209
Maybe we don't have our
own implementation or

27
00:01:26.209 --> 00:01:29.860
maybe we just wanna add something
to this implementation.

28
00:01:29.860 --> 00:01:33.504
So let's say that we wanted to add in
to this get employee details class,

29
00:01:33.504 --> 00:01:36.218
we don't just want it to show
the first and last name.

30
00:01:36.218 --> 00:01:39.917
If we're an hourly employee,
we also wanna show the rate.

31
00:01:39.917 --> 00:01:44.169
So we'll do that with a nice
little template string.

32
00:01:44.169 --> 00:01:51.542
So we'll say rate, and
then we will say hourly rate, boom.

33
00:01:51.542 --> 00:01:58.112
And now when we call, our good employee
details from our derived class,

34
00:01:58.112 --> 00:02:03.725
our hourly employee class,
what are you complaining about?

35
00:02:03.725 --> 00:02:06.221
Done that run.

36
00:02:06.221 --> 00:02:10.448
You'll see that George Harold's rate
additionally prints 1, 2, 3, 4, 5.

37
00:02:10.448 --> 00:02:13.813
So we're able to not only override
the default behavior of this

38
00:02:13.813 --> 00:02:18.141
thing because of the virtual keyword,
we're also able to change the behavior.

39
00:02:18.141 --> 00:02:20.161
We can change the behavior
completely if we wanted to.

40
00:02:20.161 --> 00:02:22.012
We could return something nonsensical.

41
00:02:22.012 --> 00:02:25.375
In this case, we're just kind of
buttoning on top of the functionality.

42
00:02:25.375 --> 00:02:27.795
If we did not have this
virtual keyword here,

43
00:02:27.795 --> 00:02:31.689
we would not be able to override it
the compiler, we'll throw an error.

44
00:02:31.689 --> 00:02:36.416
So super important,
inheritance is a really important kind of

45
00:02:36.416 --> 00:02:40.518
critical part of understanding
how C sharp class is and

46
00:02:40.518 --> 00:02:45.799
objects kind of work together within
the runtime and in the language.

47
00:02:45.799 --> 00:02:52.282
You can also, if you want to, if your
inheritance hierarchy gets complex enough,

48
00:02:52.282 --> 00:02:57.113
you can declare a method as virtual
here and then seal it here.

49
00:02:57.113 --> 00:03:01.084
And sealed essentially means
that no derived class from

50
00:03:01.084 --> 00:03:04.641
hourly employee can now
override this behavior.

51
00:03:04.641 --> 00:03:07.866
That gets into a whole different
discussion about inheritance hierarchies

52
00:03:07.866 --> 00:03:09.536
and how deep should the rabbit hole go?

53
00:03:09.536 --> 00:03:11.957
We'll get to that here in a minute.

54
00:03:11.957 --> 00:03:16.481
&gt;&gt; Student: Because the implication is
that if you created a different class,

55
00:03:16.481 --> 00:03:21.411
like salaried employee that inherited
from employee or base employee,

56
00:03:21.411 --> 00:03:26.206
you would be able to override get
employee details in a different way.

57
00:03:26.206 --> 00:03:29.744
&gt;&gt; Spencer Schneidenbach: Yes, but
if you inherited from hourly employees, so

58
00:03:29.744 --> 00:03:34.696
like public class, really sad hourly
employee, You would not be able to,

59
00:03:34.696 --> 00:03:40.052
Yeah, you're not able to override that
behavior because it's no longer here.

60
00:03:40.052 --> 00:03:43.472
You can try copying and pasting it in.

61
00:03:43.472 --> 00:03:47.164
All the compiler is going to do is just
say it's sealed you can't override it.

62
00:03:47.164 --> 00:03:50.055
Fun fact, string is a class and
it is sealed.

63
00:03:50.055 --> 00:03:53.329
I can only imagine the kind of behaviors
that developers could get into if

64
00:03:53.329 --> 00:03:54.841
they could inherit from string.

65
00:03:54.841 --> 00:03:56.261
Thank goodness they're
not able to do that.

