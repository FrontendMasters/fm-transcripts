WEBVTT

1
00:00:00.000 --> 00:00:03.444
&gt;&gt; Spencer Schneidenbach: I kinda wanna
to talk about just a few things around

2
00:00:03.444 --> 00:00:07.877
.NET specifically,
including the CLR and, of course, C#.

3
00:00:07.877 --> 00:00:10.546
So you can think of .NET just as a brand.

4
00:00:10.546 --> 00:00:15.385
It's kind of the big umbrella that kind of
encompasses all of the things inside of

5
00:00:15.385 --> 00:00:15.894
.NET.

6
00:00:15.894 --> 00:00:21.744
So that includes things like the CLR, or
things like the C# Dev Kit extension for

7
00:00:21.744 --> 00:00:25.283
Visual Studio Code, or
Visual Studio, right?

8
00:00:25.283 --> 00:00:29.556
So .NET is just the name for
all of those things.

9
00:00:29.556 --> 00:00:34.368
And as I mentioned, it's mostly
referred to the development platform,

10
00:00:34.368 --> 00:00:37.938
and it does support multiple
programming languages,

11
00:00:37.938 --> 00:00:42.300
which I'll mention here briefly,
and the vast standard library.

12
00:00:42.300 --> 00:00:47.291
So .NET, mostly just a name at this point.

13
00:00:47.291 --> 00:00:53.046
The CLR, the Common Language Runtime, is a
very crucial component of the .NET system.

14
00:00:53.046 --> 00:00:58.210
If you're familiar with the Java Virtual
Machine, the JVM, it's very akin to that.

15
00:00:58.210 --> 00:01:01.838
So it's the execution environment for
all .NET programs.

16
00:01:01.838 --> 00:01:05.916
So it manages memory allocation and
deallocation,

17
00:01:05.916 --> 00:01:11.013
which is reference types usually
done with garbage collection,

18
00:01:11.013 --> 00:01:14.639
which we'll touch on
when we get to that part.

19
00:01:14.639 --> 00:01:18.192
It ensures execution security,
type safety.

20
00:01:18.192 --> 00:01:23.798
So all of the types that we talk about
inside of C#, they're all referred to

21
00:01:23.798 --> 00:01:29.625
as CLR types, because they all kinda
boil down to that common language.

22
00:01:29.625 --> 00:01:31.845
And then, of course,
it handles exception management.

23
00:01:31.845 --> 00:01:35.865
Exception management is a .NET feature,
it's not a C# feature.

24
00:01:35.865 --> 00:01:37.380
So it's a feature of all languages.

25
00:01:37.380 --> 00:01:42.185
All languages have to handle
exceptions and deal with exceptions.

26
00:01:42.185 --> 00:01:42.995
So fun fact,

27
00:01:42.995 --> 00:01:47.785
all .NET languages compile down to
what's called intermediary language,

28
00:01:47.785 --> 00:01:52.733
which is kind of like, you can think of it
a little bit like assembly for the CLR.

29
00:01:52.733 --> 00:01:55.422
Occasionally, it's fun to go in and

30
00:01:55.422 --> 00:02:01.083
see source that's decompiled into IL
just to see what it does under the hood.

31
00:02:01.083 --> 00:02:05.771
But it's not something that I read,
and it's not necessary to know at all,

32
00:02:05.771 --> 00:02:08.932
it's just a fun fact for
all intents and purposes.

33
00:02:08.932 --> 00:02:13.123
So C# is the primary
language used with .NET.

34
00:02:13.123 --> 00:02:14.830
It's object-oriented,

35
00:02:14.830 --> 00:02:19.810
which we will talk about as we get along
into the course, and it's type-safe.

36
00:02:19.810 --> 00:02:24.433
It's a C syntax language, so it's very
much like Java, C++, C, JavaScript,

37
00:02:24.433 --> 00:02:26.098
in that it's very familiar.

38
00:02:26.098 --> 00:02:29.257
If you've ever used
those languages before,

39
00:02:29.257 --> 00:02:33.313
it's gonna feel very familiar,
it's gonna feel at home.

40
00:02:33.313 --> 00:02:39.646
And every release, it's continuously
evolving with new features.

41
00:02:39.646 --> 00:02:41.728
I will touch on quite a few
of them in this course.

42
00:02:41.728 --> 00:02:44.578
I'll talk about the ones that I use,
the ones that I don't use, and

43
00:02:44.578 --> 00:02:45.738
everything in-between.

44
00:02:47.118 --> 00:02:49.318
There are a couple of
other .NET languages.

45
00:02:50.328 --> 00:02:55.025
There is Visual Basic.NET which is an
object-oriented version of Visual Basic,

46
00:02:55.025 --> 00:02:57.249
and Spencer's first .NET language.

47
00:02:57.249 --> 00:03:02.557
So Visual Basic before .NET was developed,
and it got all the way up to VB6

48
00:03:02.557 --> 00:03:07.541
before they transitioned to .NET,
and they've never looked back.

49
00:03:07.541 --> 00:03:10.206
I've used both, I've used VB6.

50
00:03:10.206 --> 00:03:14.464
I still use Visual Basic .NET
occasionally, because some of the code

51
00:03:14.464 --> 00:03:18.300
bases that my company manages
are all Visual Basic languages.

52
00:03:18.300 --> 00:03:20.616
That's mostly .NET frameworks stuff.

53
00:03:20.616 --> 00:03:26.539
I have yet to see Visual Basic used in
.NET Core in the wild as a consultant,

54
00:03:26.539 --> 00:03:32.572
but it is possible, you can actually
write .NET Core code in Visual Basic.

55
00:03:32.572 --> 00:03:33.850
So it's possible.

56
00:03:33.850 --> 00:03:38.408
And then F#,
which is a really cool little language.

57
00:03:38.408 --> 00:03:41.836
The syntax is based on OCaml.

58
00:03:41.836 --> 00:03:45.920
And it's a functional first language, so

59
00:03:45.920 --> 00:03:51.486
it was really designed to be
a functional first language.

60
00:03:51.486 --> 00:03:53.271
So it's really cool.

61
00:03:53.271 --> 00:03:58.409
I would say that I see way more of C# and
VB .NET in the wild.

62
00:03:58.409 --> 00:04:01.266
F# is not really much widely adopted or
used,

63
00:04:01.266 --> 00:04:05.669
although I have seen some outfits use it,
I've seen some shops use it.

64
00:04:05.669 --> 00:04:07.646
I don't work on any
production code that's F#.

65
00:04:07.646 --> 00:04:12.804
But it is a cool language if only
because it's helped me learn and

66
00:04:12.804 --> 00:04:15.394
become a better C# developer.

67
00:04:15.394 --> 00:04:17.513
And then lastly, NuGet.

68
00:04:17.513 --> 00:04:20.613
Back in the day of early .NET,
there was no package manager.

69
00:04:20.613 --> 00:04:23.477
You copied around DLLs or
you installed them into Windows,

70
00:04:23.477 --> 00:04:27.097
into what was called the GAC,
or Global Assembly Cache.

71
00:04:27.097 --> 00:04:29.789
Those days, thankfully, are long over.

72
00:04:29.789 --> 00:04:32.574
NuGet is the package manager for .NET.

73
00:04:32.574 --> 00:04:35.288
It actually started as
a community project, and

74
00:04:35.288 --> 00:04:38.609
now it's just fully integrated
into the .NET ecosystem.

75
00:04:38.609 --> 00:04:43.939
It is the way to install and
use different packages inside of .NET,

76
00:04:43.939 --> 00:04:50.101
so very typical, very akin to a PIP or
an NPM for other ecosystems.

77
00:04:50.101 --> 00:04:54.141
I like the house analogy where .NET is
the frame, the CLR is the foundation,

78
00:04:54.141 --> 00:04:57.808
plumbing, and electricity, and
C#, we're all the bricklayers,

79
00:04:57.808 --> 00:04:59.386
we're all the woodworkers.

80
00:04:59.386 --> 00:05:03.872
And the C# is the brick, and the wood,
and the insulation, and the flooring, and

81
00:05:03.872 --> 00:05:05.490
NuGet is the hardware store.

82
00:05:05.490 --> 00:05:07.443
&gt;&gt; Speaker 2: What about [INAUDIBLE].

83
00:05:07.443 --> 00:05:09.892
&gt;&gt; Spencer Schneidenbach: Most of what
we're gonna be doing in this particular

84
00:05:09.892 --> 00:05:13.375
course, look,
is just kinda staying in the command line.

85
00:05:13.375 --> 00:05:20.862
We will talk about web apps and we'll
talk about building a web app with .NET.

86
00:05:20.862 --> 00:05:23.627
But a lot of what we're gonna be doing
is looking at language features.

87
00:05:23.627 --> 00:05:26.129
And so console is more than sufficient for

88
00:05:26.129 --> 00:05:30.785
doing stuff like that, for looking at
the language features in particular.

89
00:05:30.785 --> 00:05:34.894
I think web development is
probably .NET best use.

90
00:05:34.894 --> 00:05:39.762
I think that ASP NET Core is my
favorite web framework of all time.

91
00:05:39.762 --> 00:05:43.813
And you can do stuff,
like web applications.

92
00:05:43.813 --> 00:05:47.933
You can use a JSX similar,
it's akin to it.

93
00:05:47.933 --> 00:05:54.318
It's called Razor syntax, JSX being for
React and Razor being for ASP.NET.

94
00:05:54.318 --> 00:05:57.309
You can use that to
build web applications.

95
00:05:57.309 --> 00:06:01.724
You can use it to build APIs, which
will be the focus of the next course,

96
00:06:01.724 --> 00:06:06.433
is really digging into APIs, which is
where I spend the majority of my time,

97
00:06:06.433 --> 00:06:11.760
as well as microservices, because you can
squeeze so much performance out of .NET.

98
00:06:11.760 --> 00:06:17.205
And because they're so small and
the code bases are so manageable,

99
00:06:17.205 --> 00:06:23.812
you can absolutely, and I do, use ASP.NET
core for microservices frequently.

100
00:06:23.812 --> 00:06:27.675
Blazor is another technology,
got mentioned by the chat,

101
00:06:27.675 --> 00:06:31.236
which is kind of their single
page application story.

102
00:06:31.236 --> 00:06:33.099
Blazor is really neat.

103
00:06:33.099 --> 00:06:35.067
It's not something I've
seen a lot in the wild, and

104
00:06:35.067 --> 00:06:36.379
I haven't used a ton of it myself.

105
00:06:36.379 --> 00:06:40.186
I have used it, and
of what I've seen, I really like.

106
00:06:40.186 --> 00:06:45.114
It really has that kind of SPA,
single-page application, interactivity

107
00:06:45.114 --> 00:06:50.044
like a React page does, which I think
is really valuable and really useful.

108
00:06:50.044 --> 00:06:54.400
But most of what I've
worked on are APIs or

109
00:06:54.400 --> 00:07:00.632
even ASP.NET Core web applications,
or microservices.

110
00:07:00.632 --> 00:07:05.106
So cross-platform development,
so back when iOS and Android,

111
00:07:05.106 --> 00:07:09.498
they released the SDKs and
they really started to proliferate,

112
00:07:09.498 --> 00:07:14.972
Mono came behind and created something
called MonoTouch, which was binders.

113
00:07:14.972 --> 00:07:21.141
They had C# wrappers over all of
those APIs inside of those SDKs.

114
00:07:21.141 --> 00:07:23.911
And that, eventually, became Xamarin.

115
00:07:23.911 --> 00:07:28.717
Xamarin then begat some cross-platform.

116
00:07:28.717 --> 00:07:32.939
In many ways,
it actually kind of led the way.

117
00:07:32.939 --> 00:07:37.495
It just didn't get widely adopted
in terms of write it once and

118
00:07:37.495 --> 00:07:39.781
then run it on both platforms.

119
00:07:39.781 --> 00:07:43.055
So it really did that early on, and
it found a lot of success there.

120
00:07:43.055 --> 00:07:45.600
Well, Xamarin,
which was a separate company,

121
00:07:45.600 --> 00:07:48.270
was bought eventually by Microsoft,
released for

122
00:07:48.270 --> 00:07:52.633
free, and then transitioned to what's
called MAUI, or multi-platform app UI.

123
00:07:52.633 --> 00:07:55.936
It allows you to do
cross-platform development.

124
00:07:55.936 --> 00:07:57.453
So you can run it on iOS.

125
00:07:57.453 --> 00:08:04.561
You can run, theoretically, these programs
on IOS, Android, Mac, Windows, Linux.

126
00:08:04.561 --> 00:08:11.454
And its real strong use case is a single
code base across multiple platforms.

127
00:08:11.454 --> 00:08:16.439
I'd say that in the current state,
October 9th, 2024,

128
00:08:16.439 --> 00:08:22.566
I would say that MAUI has some work to do
in order to really be a viable product.

129
00:08:22.566 --> 00:08:23.922
A lot of people use it for business.

130
00:08:23.922 --> 00:08:26.816
I have friends that are .NET consultants,
but they're purely .NET.

131
00:08:26.816 --> 00:08:30.484
I will say that I chose React Native for
my company and I haven't looked back.

132
00:08:30.484 --> 00:08:33.496
I think it has a stronger cross-platform
story if I'm being honest.

133
00:08:33.496 --> 00:08:37.096
But .NET MAUI does exist, and
they are improving it all the time.

134
00:08:37.096 --> 00:08:42.611
They are making improvements to it,
so actively developed for sure.

135
00:08:42.611 --> 00:08:44.784
And then, of course,
we got good old Windows.

136
00:08:44.784 --> 00:08:47.640
So they have Windows Forms and
Windows Presentation Foundation,

137
00:08:47.640 --> 00:08:49.770
which have been around for
years and years.

138
00:08:49.770 --> 00:08:54.250
Both of them are, if you're working on,
and I know that there are lots of use

139
00:08:54.250 --> 00:08:57.470
cases where people are still
building WinForms apps.

140
00:08:57.470 --> 00:09:01.302
I have not worked on them in a full-time
capacity in a long time, but

141
00:09:01.302 --> 00:09:04.730
there's still a lot of code out
there that runs on web forms,

142
00:09:04.730 --> 00:09:07.372
that runs Windows Presentation Foundation.

143
00:09:07.372 --> 00:09:09.923
So it's out there.

144
00:09:09.923 --> 00:09:13.042
These are Windows-only frameworks,
which is fine.

145
00:09:13.042 --> 00:09:16.451
They're very mature, they're very useful
if you're working in those environments.

146
00:09:16.451 --> 00:09:19.534
So just know that they exist.

147
00:09:19.534 --> 00:09:24.134
And then as I mentioned, the cloud and
microservices, so Azure Functions,

148
00:09:24.134 --> 00:09:26.912
obviously, Azure and .NET love each other.

149
00:09:26.912 --> 00:09:31.302
There's a lot of Azure support for
.NET and vice versa.

150
00:09:31.302 --> 00:09:35.341
So all of the kind of the things that you
wanna do in the cloud, either serverless

151
00:09:35.341 --> 00:09:39.703
computing or containerized applications,
you can do those very easily with .NET.

152
00:09:39.703 --> 00:09:42.353
And there's a ton of literature, and a ton
of resources out there for doing that.

153
00:09:42.353 --> 00:09:44.498
It's outside the scope of this course,
but it's out there.

154
00:09:44.498 --> 00:09:48.055
&gt;&gt; Speaker 3: What are your thoughts
on JavaScript frameworks like React and

155
00:09:48.055 --> 00:09:50.819
Vue versus Microsoft's
approach with Blazor?

156
00:09:50.819 --> 00:09:52.116
&gt;&gt; Spencer Schneidenbach: That's
a really good question.

157
00:09:52.116 --> 00:09:53.713
They can solve very similar problems.

158
00:09:53.713 --> 00:09:54.822
They could solve the same problems.

159
00:09:54.822 --> 00:09:59.864
You could absolutely write
applications in React with

160
00:09:59.864 --> 00:10:04.904
an ASP.NET Core backend, and
write a very similar and

161
00:10:04.904 --> 00:10:11.492
just as good application with Blazor and
ASP.Net core in the backend.

162
00:10:11.492 --> 00:10:18.000
The reason I give React the nod is
because, again, of that network effect.

163
00:10:18.000 --> 00:10:20.255
Blazor hasn't seen a huge
amount of adoption.

164
00:10:20.255 --> 00:10:24.703
It has seen plenty, but not enough for
me to kind of consider it.

165
00:10:24.703 --> 00:10:28.373
I don't wanna use it for high-leverage
applications, because, frankly,

166
00:10:28.373 --> 00:10:32.096
I'm a consultant and I know that I'm not
the only developer that's gonna go and

167
00:10:32.096 --> 00:10:33.503
work on this code base.

168
00:10:33.503 --> 00:10:37.178
So I wanna give the companies that I
work with the best shot to find React

169
00:10:37.178 --> 00:10:40.313
developers, and
there are React developers everywhere.

