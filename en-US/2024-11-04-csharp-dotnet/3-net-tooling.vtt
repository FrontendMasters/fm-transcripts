WEBVTT

1
00:00:00.000 --> 00:00:02.952
&gt;&gt; Spencer Schneidenbach: All right, let's
actually get into looking at some tools.

2
00:00:02.952 --> 00:00:05.490
So we're gonna actually stop talking and
start doing,

3
00:00:05.490 --> 00:00:07.002
which is my favorite thing to do.

4
00:00:07.002 --> 00:00:11.582
So the I wanna give a brief
overview of kind of all the tools

5
00:00:11.582 --> 00:00:13.784
that you will see in .NET.

6
00:00:13.784 --> 00:00:16.414
So first of all,
if you haven't already and

7
00:00:16.414 --> 00:00:20.692
want to follow along with the examples,
the .NET CLI is the Core tool.

8
00:00:20.692 --> 00:00:25.308
It's kind of the beginning point for
all .NET development, as it were.

9
00:00:25.308 --> 00:00:29.728
The way you do that is you go to
dotnet you go to download, and

10
00:00:29.728 --> 00:00:34.496
then I just download the whatever,
the L the current LTS version.

11
00:00:34.496 --> 00:00:40.438
So one of the things you'll note
about .NET is that there are.

12
00:00:40.438 --> 00:00:41.926
Lots of different ways to install it.

13
00:00:41.926 --> 00:00:45.142
I usually just pick this nice,
big purple button.

14
00:00:45.142 --> 00:00:47.954
I do wanna touch on versions
a little bit though,

15
00:00:47.954 --> 00:00:52.344
any odd numbered version is considered
what we call not it's kind of follows

16
00:00:52.344 --> 00:00:55.861
the same pattern as node even
numbers are long term support.

17
00:00:55.861 --> 00:00:59.075
Which is the only ones that I'll
use in a production environment.

18
00:00:59.075 --> 00:01:00.782
With some exceptions.

19
00:01:00.782 --> 00:01:05.111
And then these ones, the ones that are in
between, the .NET 9, the odd numbered

20
00:01:05.111 --> 00:01:08.965
versions are really for, well,
you see it says standard term support.

21
00:01:08.965 --> 00:01:13.783
So let's see a shorter support period
of 18 months versus three years for

22
00:01:13.783 --> 00:01:15.398
something that's LTS.

23
00:01:15.398 --> 00:01:19.248
So in a production environment, I'm always
gonna advise that you use and even in

24
00:01:19.248 --> 00:01:22.832
a learning environment I would advise
that you use the latest LTS version.

25
00:01:22.832 --> 00:01:26.160
But this one is for the people who wanna
be on the cutting edge and really wanna

26
00:01:26.160 --> 00:01:29.765
know about the language features and the
framework features that are coming out.

27
00:01:29.765 --> 00:01:32.132
And as you can see,
it's not even fully released yet.

28
00:01:32.132 --> 00:01:34.735
They've got a release candidate out.

29
00:01:34.735 --> 00:01:39.378
So it means imminent release but
not quite there yet.

30
00:01:39.378 --> 00:01:41.196
That's how you download and install .NET.

31
00:01:41.196 --> 00:01:46.133
Once you do so, you should be able to
go to a terminal and say 'dotnet', and

32
00:01:46.133 --> 00:01:49.173
you'll see that you get some usage dotnet.

33
00:01:49.173 --> 00:01:52.345
I'm gonna see dotnet version,
--version, and

34
00:01:52.345 --> 00:01:55.085
I'm gonna see that I have eight installed.

35
00:01:55.085 --> 00:01:59.604
Visual Studio Code is the, so
I'm unapologetically an IDE person, for

36
00:01:59.604 --> 00:02:02.576
example, I rarely use
Git on the command line.

37
00:02:02.576 --> 00:02:04.142
I usually use an IDE for it so

38
00:02:04.142 --> 00:02:07.289
Visual Studio code is my for
this particular purpose.

39
00:02:07.289 --> 00:02:12.818
Is actually not my preferred IDE for .NET
that would I'll touch on that in a second.

40
00:02:12.818 --> 00:02:17.008
But Visual Studio code is a very good
IDE with a couple of extensions.

41
00:02:17.008 --> 00:02:19.619
You're usually you're pretty good to go.

42
00:02:19.619 --> 00:02:22.661
So you can download that
by Googling VS Code or

43
00:02:22.661 --> 00:02:27.235
going to code.visualstudio.com,
and it really is just a brand.

44
00:02:27.235 --> 00:02:30.908
The Visual Studio part of
that is just a brand, but

45
00:02:30.908 --> 00:02:36.255
VS Code is as open a product as .NET Code,
probably more so in some ways.

46
00:02:36.255 --> 00:02:41.610
And then the other thing is
the C sharp dev kit extension.

47
00:02:41.610 --> 00:02:46.298
So once you have Visual Studio installed,
go to the extensions part, and

48
00:02:46.298 --> 00:02:49.180
you can see that I already
have it installed.

49
00:02:49.180 --> 00:02:52.672
I have C sharp dev kit installed.

50
00:02:52.672 --> 00:02:57.619
So full disclosure, C sharp the base
language support extension,

51
00:02:57.619 --> 00:02:59.451
is open and unlicensed.

52
00:02:59.451 --> 00:03:01.619
You're free to use it for
pretty much whatever.

53
00:03:01.619 --> 00:03:04.178
C-Sharp Dev Kit is free for personal use.

54
00:03:04.178 --> 00:03:08.364
It does have licensing requirements
once you hit certain seat or

55
00:03:08.364 --> 00:03:09.844
revenue thresholds.

56
00:03:09.844 --> 00:03:11.953
So full disclosure there.

57
00:03:11.953 --> 00:03:15.178
But for the purposes of personal use,
you don't have to worry about it.

58
00:03:15.178 --> 00:03:18.155
And Microsoft doesn't even require
you to log in to use the extension or

59
00:03:18.155 --> 00:03:19.054
anything like that.

60
00:03:19.054 --> 00:03:22.860
It's pretty much just install it and go.

61
00:03:22.860 --> 00:03:27.363
So I'd say that this extension is very
important because the IntelliSense,

62
00:03:27.363 --> 00:03:31.537
which has been a feature of Visual Studio
products for a very long time.

63
00:03:31.537 --> 00:03:33.476
And it's one of my favorite parts of,

64
00:03:33.476 --> 00:03:37.365
one of my favorite early parts of using
.NET is the discoverability of API.

65
00:03:37.365 --> 00:03:40.188
So IntelliSense, debugging,
which is really important and

66
00:03:40.188 --> 00:03:43.640
we'll demonstrate some of that, and
we'll do that all that in VS code.

67
00:03:43.640 --> 00:03:46.958
So that's what this extension is used for.

68
00:03:46.958 --> 00:03:51.804
So using the .NET CLI, let's actually
switch back to our terminal, and

69
00:03:51.804 --> 00:03:56.571
you're gonnaa see on this page that we
have a lot of things that you can use

70
00:03:56.571 --> 00:03:57.922
with the .NET CLI.

71
00:03:57.922 --> 00:04:01.118
So these kind of go through all
of the different templates.

72
00:04:01.118 --> 00:04:04.373
So somebody asked about using,
like having good templates or

73
00:04:04.373 --> 00:04:06.637
a good kind of blueprint
to start off from.

74
00:04:06.637 --> 00:04:09.837
So dotnet new is the command
to start a new project.

75
00:04:09.837 --> 00:04:13.188
And then it will, the next argument
after that is what do you want to build?

76
00:04:13.188 --> 00:04:14.544
Do you wanna build a console application?

77
00:04:14.544 --> 00:04:16.637
You'll see me do dotnet new console a lot.

78
00:04:16.637 --> 00:04:18.867
Do you wanna build a class library
which doesn't run on its own?

79
00:04:18.867 --> 00:04:23.497
Code that can be referred to by
other .NET projects or web API for

80
00:04:23.497 --> 00:04:25.998
building an example API project.

81
00:04:25.998 --> 00:04:30.711
So let's see if you wanna see a list of
the templates that are on your screen,

82
00:04:30.711 --> 00:04:32.121
you do 'dotnet new list'.

83
00:04:32.121 --> 00:04:33.757
So let's try that new list.

84
00:04:33.757 --> 00:04:38.806
I should have a bunch, and I do so
you can see that we have all sorts.

85
00:04:38.806 --> 00:04:40.852
So lots of decisions to be made, but

86
00:04:40.852 --> 00:04:43.658
I will point out as we go
the ones that we'll use.

87
00:04:43.658 --> 00:04:46.858
Actually, a lot of the code I'll
have will be pre-published and

88
00:04:46.858 --> 00:04:48.849
you can just open up the solution and go.

89
00:04:48.849 --> 00:04:51.705
But you can see that there's ones for
React.

90
00:04:51.705 --> 00:04:54.570
So this would be React with ASP.NET Core
in the backend, which is really useful.

91
00:04:54.570 --> 00:04:59.038
But like I said,
we'll mostly be doing .NET Console.

92
00:04:59.038 --> 00:05:03.872
Dotnet new install so this would
be to install additional templates

93
00:05:03.872 --> 00:05:07.953
that are community contributed and
published to NuGet.

94
00:05:07.953 --> 00:05:10.989
Dotnet build and
dotnet run you'll see me use those a lot.

95
00:05:10.989 --> 00:05:15.215
If I'm not doing them in the IDE I will
be doing them in the command line so

96
00:05:15.215 --> 00:05:16.350
you'll see that.

97
00:05:16.350 --> 00:05:19.558
And then dotnet restore, which, strictly
speaking, I don't really use much,

98
00:05:19.558 --> 00:05:21.105
dotnet restore is automatically run.

99
00:05:21.105 --> 00:05:24.796
It basically just pulls all the packages
that your solution needs before

100
00:05:24.796 --> 00:05:25.409
it can run.

101
00:05:25.409 --> 00:05:28.580
It does that as part of dotnet build and
dotnet run, so

102
00:05:28.580 --> 00:05:30.204
I rarely run that on my own.

103
00:05:30.204 --> 00:05:33.206
And then we have dotnet test,
which runs all your unit tests,

104
00:05:33.206 --> 00:05:37.326
which we will definitely be getting into
that into the next course on ASP.NET Core.

105
00:05:37.326 --> 00:05:40.052
We'll be doing a lot of testing there.

106
00:05:40.052 --> 00:05:44.867
One other call out for
Visual Studio code is that I am,

107
00:05:44.867 --> 00:05:49.266
again, unapologetically an IDE,
a UI person.

108
00:05:49.266 --> 00:05:52.326
So this NuGet gallery extension
is something that I found.

109
00:05:52.326 --> 00:05:55.356
You can install NuGet packages
via the command line.

110
00:05:55.356 --> 00:05:58.862
I like the ability to kind of
see them inside of my IDE.

111
00:05:58.862 --> 00:06:03.704
Can see that if I hit Command P on my Mac
and I go focus on NuGet view, you can see

112
00:06:03.704 --> 00:06:08.552
that this is where it will show you all
of the like the community supported and

113
00:06:08.552 --> 00:06:12.685
the Microsoft supported packages
that are published by NuGet.

114
00:06:12.685 --> 00:06:14.898
And so we'll touch on some of these.

115
00:06:14.898 --> 00:06:18.507
But I just wanted to point out
that I use an extension for this.

116
00:06:18.507 --> 00:06:22.377
I don't usually I try to avoid using the
command line because I actually do wanna

117
00:06:22.377 --> 00:06:25.554
see things like the version numbers and
things like the info, and

118
00:06:25.554 --> 00:06:27.710
I find the UI to be more convenient for
that.

119
00:06:29.651 --> 00:06:32.886
&gt;&gt; Spencer Schneidenbach: Lastly,
of course, do we need Visual Studio?

120
00:06:32.886 --> 00:06:34.954
I'll say it again we do
not need Visual Studio.

121
00:06:34.954 --> 00:06:37.926
If you're doing any legacy dotnet
development on dotnet framework

122
00:06:37.926 --> 00:06:39.235
you could use Visual Studio.

123
00:06:39.235 --> 00:06:40.499
It is absolutely a great tool.

124
00:06:40.499 --> 00:06:45.215
I still use it I use it with ReSharper
which is a JetBrains tool it is a paid

125
00:06:45.215 --> 00:06:50.011
product and so is Visual Studio,
it's a, it Visual Studio Community,

126
00:06:50.011 --> 00:06:53.471
like C Sharp Dev kit is a free to use for
personal use,

127
00:06:53.471 --> 00:06:56.328
up to five seats and 1 million in revenue.

128
00:06:56.328 --> 00:06:57.674
You don't have to pay for

129
00:06:57.674 --> 00:07:01.408
it after that they want you to buy
their visual studio Subscription.

130
00:07:01.408 --> 00:07:02.772
ReSharper is a paid product.

131
00:07:02.772 --> 00:07:06.345
You buy it, you license it for,
I think for

132
00:07:06.345 --> 00:07:10.811
a year, and
it adds a whole ton of things to .NET, and

133
00:07:10.811 --> 00:07:16.988
into Visual Studio to make refactoring
easier and navigability easier.

134
00:07:16.988 --> 00:07:21.700
I can't recommend ReSharper enough, but if
you're on, if you're cross- Platform and

135
00:07:21.700 --> 00:07:24.563
doing .NET Core development
seriously as a company.

136
00:07:24.563 --> 00:07:29.275
JetBrains Rider is the best .NET IDE in
the world, sorry, Microsoft, it just is.

137
00:07:29.275 --> 00:07:32.443
JetBrains Riders actually used
internally by lots of Microsoft people.

138
00:07:32.443 --> 00:07:35.622
What is the difference between
dotnet SDKs and the runtime?

139
00:07:35.622 --> 00:07:37.740
So I believe, okay, so the SDKs,

140
00:07:37.740 --> 00:07:42.796
you would install the SDK on your local
machine to actually write .NET software.

141
00:07:42.796 --> 00:07:46.246
The run times are just what's required to
be installed on the target server where

142
00:07:46.246 --> 00:07:47.880
you're deploying the application.

143
00:07:47.880 --> 00:07:51.604
So if you wanted to run .NET apps,
you would install the runtime on Linux, or

144
00:07:51.604 --> 00:07:55.580
Windows, or something the target server
that you wanna run your application on.

