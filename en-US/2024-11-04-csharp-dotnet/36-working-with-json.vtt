WEBVTT

1
00:00:00.530 --> 00:00:03.901
&gt;&gt; Spencer Schneidenbach: Talking
a little bit about Json and .NET,

2
00:00:03.901 --> 00:00:09.210
Json is a very important data
transform language for the web.

3
00:00:09.210 --> 00:00:15.540
It is basically the way that most data
is transferred to and from servers.

4
00:00:17.190 --> 00:00:19.132
So coming from XML, which was a mess,

5
00:00:19.132 --> 00:00:21.454
I don't need to talk
about too much about it.

6
00:00:21.454 --> 00:00:25.119
But in addition to having properties
inside of the brackets or

7
00:00:25.119 --> 00:00:30.052
inside of attributes, there's all sorts
of reasons that Json proliferated, and

8
00:00:30.052 --> 00:00:31.894
it was all the mistakes of XML.

9
00:00:31.894 --> 00:00:34.936
So if you're not familiar with Json,
you've probably seen it sometime before,

10
00:00:34.936 --> 00:00:37.134
especially if you've done JavaScript.

11
00:00:37.134 --> 00:00:42.777
This is just a structure, a very neat,
tidy and very restricted structure

12
00:00:42.777 --> 00:00:47.631
grammar for describing data,
structured data specifically.

13
00:00:47.631 --> 00:00:53.333
And I just wanna touch on the two
major libraries that are used for

14
00:00:53.333 --> 00:00:55.028
for Json in .NET.

15
00:00:55.028 --> 00:00:59.773
So there's Newtonsoft.Json, which has
been around for a very long time and

16
00:00:59.773 --> 00:01:04.815
has been around since the .NET framework
days and is around in .NET core as well.

17
00:01:04.815 --> 00:01:08.901
Typically, for new projects,
you wanna avoid using it and

18
00:01:08.901 --> 00:01:12.586
then System.Text.Json,
which is the replacement.

19
00:01:12.586 --> 00:01:15.394
This is the Microsoft backed
one where they said, okay,

20
00:01:15.394 --> 00:01:18.438
we need to really extract as much
performance and security and

21
00:01:18.438 --> 00:01:20.622
strictness as we can
out of this framework.

22
00:01:20.622 --> 00:01:25.593
We can't do it outta Newtonsoft.Json
without introducing breaking changes, so

23
00:01:25.593 --> 00:01:27.658
we'll bring in System.Text.Json.

24
00:01:27.658 --> 00:01:33.164
So typically speaking, there's gonna be
two things that you're gonna do with Json.

25
00:01:33.164 --> 00:01:35.916
In ASP.NET Core,
it will do this mostly for you, but

26
00:01:35.916 --> 00:01:40.141
sometimes you're explicitly taking
an object and serializing into Json, so

27
00:01:40.141 --> 00:01:44.894
converting something like this to its Json
equivalent, or you're deserializing it.

28
00:01:44.894 --> 00:01:49.244
You're taking an employee object
that is in Json form, and

29
00:01:49.244 --> 00:01:52.724
you're typically reading
it from from Json and

30
00:01:52.724 --> 00:01:56.562
then materializing or
creating that .NET object.

31
00:01:56.562 --> 00:02:00.522
I'm not gonna spend too much time talking
about the differences between the two

32
00:02:00.522 --> 00:02:02.721
other than I I will say
two pieces of advice.

33
00:02:02.721 --> 00:02:07.660
If you're on a new system,
Use System.Text.Json, I it's the Json.

34
00:02:07.660 --> 00:02:10.774
It's the standard way of reading and
writing Json these days,

35
00:02:10.774 --> 00:02:13.132
it's the one that ASP.NET Core uses.

36
00:02:13.132 --> 00:02:15.540
But if you're on an older system and
you're using Newtonsoft,

37
00:02:15.540 --> 00:02:18.588
I would just ask that you don't mix the
two, I don't advise that you mix the two.

38
00:02:18.588 --> 00:02:23.461
Lastly, I guess this is going to be a bonus,
a lot of these Json serializers,

39
00:02:23.461 --> 00:02:28.109
they tend to, by default,
serialize as the ENUMS default value.

40
00:02:28.109 --> 00:02:30.209
So ENUMS are used everywhere.

41
00:02:30.209 --> 00:02:34.499
And for some reason, they made
the choice to serialize ENUMS as if

42
00:02:34.499 --> 00:02:38.089
the underlying value is a 1,
sorry, an integer.

43
00:02:38.089 --> 00:02:41.033
They're gonna serialize it as 0 and 1.

44
00:02:41.033 --> 00:02:45.970
I tend to and our front end people thank
me when I say that all ENUMS will be

45
00:02:45.970 --> 00:02:49.278
sent as strings and
not their underlying type.

46
00:02:49.278 --> 00:02:51.411
It seems like a minor point, but

47
00:02:51.411 --> 00:02:55.525
it is something that I have seen
people do over and over again.

48
00:02:55.525 --> 00:02:59.938
So you're just a couple of lines of
code from configuring that in most

49
00:02:59.938 --> 00:03:02.993
ASP.NET Core solutions, which we'll go over.

