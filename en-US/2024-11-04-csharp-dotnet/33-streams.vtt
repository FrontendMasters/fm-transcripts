WEBVTT

1
00:00:00.420 --> 00:00:03.193
&gt;&gt; vSpencer Schneidenbach: Streams, and
I just love this phrase from the Microsoft

2
00:00:03.193 --> 00:00:06.320
docs, an abstraction of
a sequence of bytes.

3
00:00:06.320 --> 00:00:08.953
So, streams are everywhere in our world,
and

4
00:00:08.953 --> 00:00:13.612
lots of times those streams are abstracted
away from us in the form of a byte array,

5
00:00:13.612 --> 00:00:17.560
or in the form of an object
that we can just read from.

6
00:00:17.560 --> 00:00:19.532
So, sometimes a stream gets open,

7
00:00:19.532 --> 00:00:23.076
we don't know how many bytes
are coming through, right?

8
00:00:23.076 --> 00:00:27.186
We just don't know, necessarily,
how many bites are coming from Google.

9
00:00:27.186 --> 00:00:32.401
Their content length header inside their
HTTP response could be lying to us,

10
00:00:32.401 --> 00:00:36.589
so, we treat that as a stream of
bytes coming all the way down.

11
00:00:36.589 --> 00:00:41.900
And they are fundamental concepts for
handling input and output inside of .NET.

12
00:00:41.900 --> 00:00:44.908
You don't have to understand them super,
super deeply for

13
00:00:44.908 --> 00:00:47.675
the purposes of this course,
or the ASP.NET course,

14
00:00:47.675 --> 00:00:50.740
but it's important to
understand that streams exist.

15
00:00:50.740 --> 00:00:54.245
It's just, basically, an array of
bytes that's moving along a pipe, so

16
00:00:54.245 --> 00:00:56.360
it's water moving along a pipeline.

17
00:00:56.360 --> 00:00:58.623
You don't wait till the water
gets to the end sometimes,

18
00:00:58.623 --> 00:01:01.170
sometimes you wanna process that water,
drain that water off,

19
00:01:01.170 --> 00:01:04.243
or do something with that water as
the water is flowing through the pipe.

20
00:01:04.243 --> 00:01:09.133
And that's what essentially a stream is,
so there's a few streams that are common.

21
00:01:09.133 --> 00:01:12.624
We're gonna be focusing mainly on
FileStreams, and an object called

22
00:01:12.624 --> 00:01:17.273
MemoryStream, those are probably the more
important streams to talk about.

23
00:01:17.273 --> 00:01:21.071
So, when you use a FileStream, you're
essentially telling the file system,

24
00:01:21.071 --> 00:01:24.867
cuz you're on a Windows machine, you're
on a Mac, and you wanna open a file and

25
00:01:24.867 --> 00:01:26.361
do something with it, right?

26
00:01:26.361 --> 00:01:29.587
You wanna do something, you wanna write
to it, maybe you're flushing to a log.

27
00:01:29.587 --> 00:01:33.233
Maybe you're processing an incoming
document and you need to write a report,

28
00:01:33.233 --> 00:01:35.651
and you need to drop
that report into a PDF.

29
00:01:35.651 --> 00:01:40.411
So, a FileStream is a way for
you to open up a connection to that file,

30
00:01:40.411 --> 00:01:44.616
take an arbitrary number of bytes,
and that's important.

31
00:01:44.616 --> 00:01:48.549
Streams, essentially an arbitrary
number of bytes, and

32
00:01:48.549 --> 00:01:52.128
then write it to that file,
and then be done.

33
00:01:52.128 --> 00:01:57.677
So imagine, instead,
if you took a 50 megabyte file and

34
00:01:57.677 --> 00:02:01.162
you read it all into memory first.

35
00:02:01.162 --> 00:02:03.985
You just downloaded it,
very much like we did here,

36
00:02:03.985 --> 00:02:06.702
just downloaded the whole
thing in the memory.

37
00:02:06.702 --> 00:02:10.232
For downloading, google.com probably
doesn't matter that much, right?

38
00:02:10.232 --> 00:02:13.322
It's probably not gonna be
more than a few megabytes,

39
00:02:13.322 --> 00:02:17.932
I don't know how much it's gonna be,
the page itself, probably not even that.

40
00:02:17.932 --> 00:02:20.810
But when we're talking about large files,
maybe it's a movie,

41
00:02:20.810 --> 00:02:22.125
maybe it's several photos.

42
00:02:22.125 --> 00:02:23.664
Maybe it's a ZIP file of several photos,
and

43
00:02:23.664 --> 00:02:25.955
you have an application
that's processing those.

44
00:02:25.955 --> 00:02:29.507
Do you really want to take all
of those bytes, like this,

45
00:02:29.507 --> 00:02:31.803
and put them into memory right away?

46
00:02:31.803 --> 00:02:34.137
And then just have 50 megabytes,
or 500 megabytes, or

47
00:02:34.137 --> 00:02:36.675
an arbitrary number of megabytes
hanging out of memory?

48
00:02:36.675 --> 00:02:41.285
Probably not, so it's best to stream
those things to their final destination.

49
00:02:41.285 --> 00:02:45.713
So, what you can do, for instance,
is open up an HTTP request,

50
00:02:45.713 --> 00:02:49.904
take that stream, and
then open up a file on the file system.

51
00:02:49.904 --> 00:02:52.291
And take those bytes as
they're being downloaded,

52
00:02:52.291 --> 00:02:56.475
and put them into the file system, so that
way you skip putting that into memory.

53
00:02:56.475 --> 00:02:59.450
I see this mistake, I bring this
up because it sounds obvious, but

54
00:02:59.450 --> 00:03:01.802
I see this mistake all
the time in .NET developers.

55
00:03:01.802 --> 00:03:04.503
.NET has lots of constructs for
dealing with streams, and

56
00:03:04.503 --> 00:03:07.538
most of the time they convert and
use those streams as byte arrays.

57
00:03:09.478 --> 00:03:16.551
So, FileStreams, either reading from or
writing to files, are very easy.

58
00:03:16.551 --> 00:03:20.594
Notice that our streams are all
using using statements, and

59
00:03:20.594 --> 00:03:24.001
that is because a stream
is an unmanaged resource,

60
00:03:24.001 --> 00:03:28.138
at least it can be a representation
of an unmanaged resource.

61
00:03:28.138 --> 00:03:31.340
So, we need to make sure that we dispose

62
00:03:31.340 --> 00:03:36.348
of said resource at the end of
the time that we're using it.

63
00:03:36.348 --> 00:03:39.901
Because otherwise, if we didn't,
we'll keep this file open,

64
00:03:39.901 --> 00:03:44.355
we'll keep our hand at what I`d call a
handle on a file, we'll keep that locked,

65
00:03:44.355 --> 00:03:47.739
and maybe other people can't access it,
or other programs.

66
00:03:47.739 --> 00:03:52.854
This is probably the most common
stream that I see, is MemoryStream.

67
00:03:52.854 --> 00:03:56.715
Which is to say that it is,
literally as it sounds, a stream of data,

68
00:03:56.715 --> 00:04:00.646
but it's fully in-memory, so
you get an arbitrary number of bytes,

69
00:04:00.646 --> 00:04:02.528
it's essentially a byte array.

70
00:04:02.528 --> 00:04:07.088
And MemoryStreams, like I mentioned,
are super useful, but

71
00:04:07.088 --> 00:04:08.989
if not a little overused.

72
00:04:08.989 --> 00:04:10.039
It's oftentimes,

73
00:04:10.039 --> 00:04:13.937
I see a lot of developers put things
into memory when they don't need to be.

74
00:04:13.937 --> 00:04:18.665
Though it's useful for in-memory storage,
for small amounts of data,

75
00:04:18.665 --> 00:04:22.326
or if you don't wanna use a file for
whatever reason, but

76
00:04:22.326 --> 00:04:25.532
I tend to find that
MemoryStream gets overused.

77
00:04:25.532 --> 00:04:30.667
However, you need to know that it exists
as a way to represent a stream of bytes,

78
00:04:30.667 --> 00:04:33.902
you can represent it in
memory as a MemoryStream.

79
00:04:37.092 --> 00:04:41.068
I wanna call out one last thing,
kinda going back to that example,

80
00:04:41.068 --> 00:04:43.115
of what I'll see people do.

81
00:04:43.115 --> 00:04:46.786
They'll take a file, they'll download it,
they might do something with it, some

82
00:04:46.786 --> 00:04:51.325
processing, they might do that in-memory,
but that's usually not the best way.

83
00:04:51.325 --> 00:04:55.538
Oftentimes, when I am doing applications,
where I'm writing a program that needs to

84
00:04:55.538 --> 00:04:58.033
read some data on some
remote company's machine.

85
00:04:58.033 --> 00:05:02.693
It's a company we've contracted with, and
we wanna be good stewards of their data,

86
00:05:02.693 --> 00:05:05.158
right, and their resources.

87
00:05:05.158 --> 00:05:09.392
So, we'll open up a file handle and write
to a temporary file to write some data,

88
00:05:09.392 --> 00:05:11.968
and then delete it without
using MemoryStream.

89
00:05:13.478 --> 00:05:17.386
So, as I mentioned, there's things
you need to know about streams,

90
00:05:17.386 --> 00:05:19.288
mainly that they exist.

91
00:05:19.288 --> 00:05:22.454
We'll talk about them a little more
in the ASP.NET Core course, but

92
00:05:22.454 --> 00:05:26.274
they're just something that you kinda need
to be aware of as you're going down your

93
00:05:26.274 --> 00:05:27.381
programming journey.

