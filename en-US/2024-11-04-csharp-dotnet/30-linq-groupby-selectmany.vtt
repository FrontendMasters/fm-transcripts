WEBVTT

1
00:00:00.300 --> 00:00:04.174
&gt;&gt; Spencer Schneidenbach: Lastly,
I want to talk about,

2
00:00:04.174 --> 00:00:10.970
I showed distinct in
the context of anonymous types.

3
00:00:10.970 --> 00:00:15.390
You can also do them on
values like string or int.

4
00:00:15.390 --> 00:00:18.920
You can do those on those kinds of
values to get a distinct list of items.

5
00:00:18.920 --> 00:00:21.382
There is a group by method
which is really neat.

6
00:00:21.382 --> 00:00:24.872
So given that you have a bunch of
employees, you can group them together.

7
00:00:24.872 --> 00:00:29.242
Let's group them real
quick by var grouped.

8
00:00:29.242 --> 00:00:34.580
It would be employees.GroupBy,
and we'll just say by e.FirstName

9
00:00:34.580 --> 00:00:40.278
because we know that there are multiple
employees with those first names,

10
00:00:40.278 --> 00:00:44.907
put that return statement down so
it only prints what I want.

11
00:00:44.907 --> 00:00:50.227
And then we can spin through this
group var employees in group.

12
00:00:50.227 --> 00:00:56.333
And what grouped,
is actually an IEnumerable

13
00:00:56.333 --> 00:01:03.692
of another IEnumerable,
a special type called IGrouping,

14
00:01:03.692 --> 00:01:10.636
so we can print to the Console
&gt;&gt; Spencer Schneidenbach: WriteLine.

15
00:01:10.636 --> 00:01:17.478
We can say emps.Key that key is
the value that we've grouped on.

16
00:01:17.478 --> 00:01:20.688
So what we can say is we're.

17
00:01:25.007 --> 00:01:26.915
&gt;&gt; Spencer Schneidenbach: We
can print that key right here,

18
00:01:26.915 --> 00:01:31.356
which it would take the people that had
the same name and group them together.

19
00:01:31.356 --> 00:01:34.700
So what you'd end up with is
a collection of two Snapes,

20
00:01:34.700 --> 00:01:38.387
another collection of Spencer,
Micah, and Grant.

21
00:01:38.387 --> 00:01:43.162
And if you look through you, as I
mentioned this is also an IEnumerable so

22
00:01:43.162 --> 00:01:48.207
you can perform it for each on that,
&gt;&gt; Spencer Schneidenbach: And

23
00:01:48.207 --> 00:01:49.984
then Console.WriteLine.

24
00:01:51.994 --> 00:01:59.769
&gt;&gt; Spencer Schneidenbach: Last name,
&gt;&gt; Spencer Schneidenbach: Is emp.LastName.

25
00:01:59.769 --> 00:02:03.163
So that's a way you can actually do
some kind of grouping operations,

26
00:02:03.163 --> 00:02:04.529
which are really useful.

27
00:02:04.529 --> 00:02:05.621
And as you can see,

28
00:02:05.621 --> 00:02:10.332
these Spencer employees, the last name
George, there's one there are two Snape

29
00:02:10.332 --> 00:02:14.849
employees with the first name Snape
that have the last name George.

30
00:02:14.849 --> 00:02:19.657
And we can change this to Larry and

31
00:02:19.657 --> 00:02:25.857
show that even more explicitly dotnet run.

32
00:02:25.857 --> 00:02:28.836
You can see that there are two
employees named Snape and

33
00:02:28.836 --> 00:02:32.992
they each have a last name of George and
Larry respectively.

34
00:02:32.992 --> 00:02:35.472
And then we have Micah employees and
then Grant.

35
00:02:35.472 --> 00:02:39.116
And so that's a way that you can use to
group together values in a collection,

36
00:02:39.116 --> 00:02:41.314
which is incredibly useful, occasionally.

37
00:02:42.584 --> 00:02:47.412
Last LINQ method that I will mention is if
you have, for say, a list of managers, and

38
00:02:47.412 --> 00:02:50.336
each of those managers has
an employee under them,

39
00:02:50.336 --> 00:02:54.552
you may want to select all of the values
of each of these employee arrays and

40
00:02:54.552 --> 00:02:57.344
then flatten them out
into one single array.

41
00:02:57.344 --> 00:03:02.915
So you might wanna combine this array and
this array, but you only want one array.

42
00:03:02.915 --> 00:03:09.806
So you can use what's called SelectMany,
and that will take those collections and

43
00:03:09.806 --> 00:03:14.728
flatten them out into one such
that the the names that will be

44
00:03:14.728 --> 00:03:20.695
printed to the console here are Mike,
Jane, Peter, and Chris.

45
00:03:20.695 --> 00:03:24.115
So we've selected that collection here,
and then with SelectMany and

46
00:03:24.115 --> 00:03:27.991
then basically it just takes those two
collections and combines them together.

47
00:03:30.191 --> 00:03:31.355
Honorable mention,

48
00:03:31.355 --> 00:03:35.301
to join something that very rarely gets
used because of the nature of some

49
00:03:35.301 --> 00:03:39.801
of the libraries that we use, which we'll
touch on in the ASP.NET Core course.

50
00:03:39.801 --> 00:03:44.252
But join is a way to take two collections
and join them together on an equal value.

