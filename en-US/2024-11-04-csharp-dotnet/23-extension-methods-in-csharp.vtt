WEBVTT

1
00:00:00.000 --> 00:00:02.789
&gt;&gt; Spencer Schneidenbach: Let's move on
to talking about extension methods, we're

2
00:00:02.789 --> 00:00:06.368
just gonna touch on this real briefly,
because they are important to know.

3
00:00:06.368 --> 00:00:11.159
Especially as we come up on talking
about LINQ (Language Integrated Query), which is the next section,

4
00:00:11.159 --> 00:00:13.832
which I'm really excited to talk about.

5
00:00:13.832 --> 00:00:18.388
But sometimes there are situations where
you have classes that maybe they're in

6
00:00:18.388 --> 00:00:19.602
a separate library.

7
00:00:19.602 --> 00:00:21.853
Maybe they're in a NuGet package and

8
00:00:21.853 --> 00:00:25.856
you don't wanna decompile the source
code or build it yourself.

9
00:00:25.856 --> 00:00:29.153
You just wanna use the package
as it was intended, and

10
00:00:29.153 --> 00:00:33.414
maybe add a few extra behaviors or
things to it that you just wanna do.

11
00:00:33.414 --> 00:00:39.247
Maybe it's a method that doesn't quite
fit inside of another class, right?

12
00:00:39.247 --> 00:00:41.330
So, you wanna add that method, but

13
00:00:41.330 --> 00:00:44.814
it really kind of doesn't fit
in with the rest of the class.

14
00:00:44.814 --> 00:00:48.492
It's kind of just stands alone, especially
in the context of maybe it's useful in

15
00:00:48.492 --> 00:00:50.181
this library, but it's not useful.

16
00:00:50.181 --> 00:00:53.296
It's useful in this ASP Net
core application, but

17
00:00:53.296 --> 00:00:55.691
it's not useful in this Winforms app.

18
00:00:55.691 --> 00:00:58.288
So, string is a good example of that,

19
00:00:58.288 --> 00:01:03.495
string is a sealed class means you
cannot inherit from it, thank goodness.

20
00:01:03.495 --> 00:01:07.768
And it's fundamental to the language,
but you can't extend it very much,

21
00:01:07.768 --> 00:01:10.927
which is fine, but
maybe not ideal for a given use case.

22
00:01:10.927 --> 00:01:14.901
You may find that you wanna do things with
the string that are maybe specific to your

23
00:01:14.901 --> 00:01:17.906
use case but do it in a way
that's convenient for developers.

24
00:01:17.906 --> 00:01:22.526
So, extension methods are kind of the
magic that kind of makes that possible.

25
00:01:22.526 --> 00:01:27.510
So, an extension method allows
you to essentially add behavior

26
00:01:27.510 --> 00:01:32.311
to an existing thing without
actually extending that thing,

27
00:01:32.311 --> 00:01:35.190
let me show you what that looks like.

28
00:01:35.190 --> 00:01:39.377
Let's take, for example,
the string class that we already have and

29
00:01:39.377 --> 00:01:43.650
maybe we want to define a method
that basically says is palindrome.

30
00:01:43.650 --> 00:01:47.311
Maybe we're doing some kind of riddle
application or some kind of puzzle

31
00:01:47.311 --> 00:01:51.633
application, and knowing if a string is a
palindrome is very useful in that context,

32
00:01:51.633 --> 00:01:54.052
but not really in the context
of the real world.

33
00:01:54.052 --> 00:01:58.843
You can have this string extensions class
that essentially defines a static, so

34
00:01:58.843 --> 00:02:00.259
this is a static class.

35
00:02:00.259 --> 00:02:02.825
It has only behaviors,
it does not have properties, and

36
00:02:02.825 --> 00:02:05.559
it only has behaviors that can
affect other things, right?

37
00:02:05.559 --> 00:02:11.041
There's no instances of this class, you
just use it to hold methods essentially or

38
00:02:11.041 --> 00:02:13.641
properties that other things can use.

39
00:02:13.641 --> 00:02:17.772
And then you have this static
method called is palindrome and

40
00:02:17.772 --> 00:02:20.126
you want it to operate on strings.

41
00:02:20.126 --> 00:02:26.396
Copy this over to our code,
remove this and

42
00:02:26.396 --> 00:02:31.980
then paste this in, perfect, okay.

43
00:02:31.980 --> 00:02:38.044
We could very easily go up to this and

44
00:02:38.044 --> 00:02:40.881
say var maam.

45
00:02:40.881 --> 00:02:45.553
And then we could easily say String
Extensions, because that's the name of

46
00:02:45.553 --> 00:02:50.739
the class that we've defined our method
in, is Palindrome, and say maam, right?

47
00:02:56.062 --> 00:03:01.278
&gt;&gt; Spencer Schneidenbach: And
then we can put it out to console and

48
00:03:01.278 --> 00:03:08.451
see the value, boom,
open our terminal. dotnet run.

49
00:03:08.451 --> 00:03:11.135
And see that it is indeed a palindrome,
in other words,

50
00:03:11.135 --> 00:03:13.944
a word that is spelled the same
way forwards as backwards.

51
00:03:13.944 --> 00:03:18.673
But we do this a lot, we don't wanna
call string extensions everywhere, and

52
00:03:18.673 --> 00:03:21.093
we want developers to be happy with us.

53
00:03:21.093 --> 00:03:25.154
We're gonna extend this thing, we just
want this to kind of behave as it's,

54
00:03:25.154 --> 00:03:29.356
if an extension of the string class,
even though it's there, check this out.

55
00:03:29.356 --> 00:03:33.058
If I go maam.IsPalindrome,

56
00:03:33.058 --> 00:03:39.281
I now have access to that method
as if it was on the class.

57
00:03:39.281 --> 00:03:42.375
So, you notice, if I hover over it,
it says extension, and

58
00:03:42.375 --> 00:03:44.699
that's because it is
still a static method.

59
00:03:44.699 --> 00:03:48.371
It is not it does not belong to
the string class in any way, but

60
00:03:48.371 --> 00:03:51.467
it behaves as though it is
inside of the editor, and

61
00:03:51.467 --> 00:03:55.071
that's because we've defined
it as an extension method.

62
00:03:55.071 --> 00:03:57.378
What's the magic that makes that happen?

63
00:03:57.378 --> 00:04:01.908
It's "this" keyword right here,
"this" keyword, literally "this" keyword,

64
00:04:01.908 --> 00:04:04.976
that "this" keyword is
the thing that defines this,

65
00:04:04.976 --> 00:04:07.986
the things that makes
this an extension method.

66
00:04:07.986 --> 00:04:13.399
So, "this" is just basically
a marker to say hey, language

67
00:04:13.399 --> 00:04:18.489
I want you to, or really the compiler, I want you to
interpret uses of this IsPalindrome method,

68
00:04:18.489 --> 00:04:22.849
as if it were on the actual
instance of a string.

69
00:04:22.849 --> 00:04:25.501
The moment we delete this,
we come down here, and

70
00:04:25.501 --> 00:04:29.431
we can see that there's no, it doesn't
have a definition for IsPalindrome.

71
00:04:29.431 --> 00:04:33.804
And no extension method accepts a first
argument of type string could be found,

72
00:04:33.804 --> 00:04:37.291
are you missing a using or
a directive or an assembly reference?

73
00:04:37.291 --> 00:04:42.211
So as soon as we took that out, we no
longer have this as an extension method, now,

74
00:04:42.211 --> 00:04:46.255
again, when we put it back,
we don't get the compiler error.

75
00:04:46.255 --> 00:04:49.512
Again, we're not actually
extending the string class,

76
00:04:49.512 --> 00:04:53.712
it's kind of a pattern called a mixing,
and this is common in JavaScript.

77
00:04:53.712 --> 00:04:58.044
Where you just add kind of behaviors, but
it's a lot easier to add behaviors in

78
00:04:58.044 --> 00:05:01.011
JavaScript to existing things
that it is and c sharp.

79
00:05:01.011 --> 00:05:04.119
So, in that we can define
additional behaviors,

80
00:05:04.119 --> 00:05:08.263
we can even treat them like a little
property, it's a method, but

81
00:05:08.263 --> 00:05:12.489
it's open parens, close parens,
it kind of behaves the same way.

82
00:05:12.489 --> 00:05:15.255
So, it's our way of extending
the string class and

83
00:05:15.255 --> 00:05:17.581
not actually extending the string class.

84
00:05:17.581 --> 00:05:22.343
So, this is really useful,
especially as we get to to talking

85
00:05:22.343 --> 00:05:26.107
about some of the features
that are really cool.

86
00:05:26.107 --> 00:05:30.771
But here's a real example from
the .NET Core runtime code.

87
00:05:30.771 --> 00:05:33.742
So, they have an interface
called ILogger, and

88
00:05:33.742 --> 00:05:38.017
that logger essentially has a one
method that looks kind of like this,

89
00:05:38.017 --> 00:05:41.356
where you give it a log level,
and a string of message.

90
00:05:41.356 --> 00:05:44.285
It also takes in additional stuff,
like exceptions and

91
00:05:44.285 --> 00:05:47.713
other things that you may want to
log additional properties, but

92
00:05:47.713 --> 00:05:51.592
it's got one defined interface, and
it's got one method on that right?

93
00:05:51.592 --> 00:05:55.699
And we want to be able to,
very simply, make it so

94
00:05:55.699 --> 00:06:01.742
that when our developer goes to
an instance of ILogger and says dot log.

95
00:06:01.742 --> 00:06:05.597
Maybe they don't wanna type out log level
dot information as the first argument

96
00:06:05.597 --> 00:06:06.239
every time.

97
00:06:06.239 --> 00:06:10.247
Maybe they just wanna type
out log information, right?

98
00:06:10.247 --> 00:06:15.060
So we can provide extension
methods that allow the developer

99
00:06:15.060 --> 00:06:19.774
to kind of extend that class in
a way that feels natural, but

100
00:06:19.774 --> 00:06:24.603
also keeps the surface of
the Ilogger interface very small.

101
00:06:24.603 --> 00:06:26.300
Imagine the converse to this,

102
00:06:26.300 --> 00:06:29.957
which is that you have a interface
where you have log information,

103
00:06:29.957 --> 00:06:34.220
log warning, log error, and all of those
things exist on this logger class.

104
00:06:34.220 --> 00:06:38.080
Not only are you adding a bunch of
behavior where now you have to implement

105
00:06:38.080 --> 00:06:40.748
that behavior and
maybe you make a mistake, but.

106
00:06:40.748 --> 00:06:43.476
A lot of extra typing that
simply isn't necessary,

107
00:06:43.476 --> 00:06:47.754
because we know our log levels ahead of
time, we know that they're information,

108
00:06:47.754 --> 00:06:50.860
warning, error, debug, trace,
those kinds of things.

109
00:06:50.860 --> 00:06:55.119
We can just define extension methods
to just make it so that we add,

110
00:06:55.119 --> 00:06:59.929
we can just go logger.LogInformation
and then just type in the message.

111
00:06:59.929 --> 00:07:05.517
It's important to note,
that your extension methods are methods so

112
00:07:05.517 --> 00:07:09.093
they can have as many
arguments as you want.

113
00:07:09.093 --> 00:07:14.134
So, another example might be

114
00:07:14.134 --> 00:07:19.377
public static bool AreWords,

115
00:07:19.377 --> 00:07:24.015
let's see, public static

116
00:07:24.015 --> 00:07:29.471
string To, ConcatAndToUpper.

117
00:07:29.471 --> 00:07:33.675
So, we can call our string, our
original string, and then call concat,

118
00:07:33.675 --> 00:07:37.238
then have another string that
we wanna concatenate with this.

119
00:07:37.238 --> 00:07:39.859
So, there's no this keyword
after any other argument,

120
00:07:39.859 --> 00:07:41.453
it only operates on the first one.

121
00:07:41.453 --> 00:07:45.468
One, but we can have second string, and

122
00:07:45.468 --> 00:07:50.325
then we could say return,
string.Concat.

123
00:07:50.325 --> 00:07:55.197
So, string, dot, second string,
and then to upper, okay?

124
00:07:55.197 --> 00:07:59.273
And the way that looks then is that
down here, concat and to upper.

125
00:08:03.661 --> 00:08:06.723
&gt;&gt; Spencer Schneidenbach: So,
we'll concatenate those things and

126
00:08:06.723 --> 00:08:12.060
then call to upper on them, so,
you can provide additional arguments,

127
00:08:12.060 --> 00:08:17.675
but this essentially becomes the first
argument in your extension method.

128
00:08:17.675 --> 00:08:23.462
The class that you're operating on, is the
or the instance of the class that you're

129
00:08:23.462 --> 00:08:29.183
operating on is the thing that the becomes
the first argument to ConcatAndToUpper.

130
00:08:29.183 --> 00:08:32.979
So that's extension methods,
you'll see them a lot,

131
00:08:32.979 --> 00:08:35.581
you'll see them a lot in the runtime.

132
00:08:35.581 --> 00:08:39.411
It will tell you if something
is an extension method,

133
00:08:39.411 --> 00:08:44.105
usually denoted by just another symbol,
so concat and to upper.

134
00:08:44.105 --> 00:08:46.505
Let's see, does it do that?

135
00:08:46.505 --> 00:08:51.063
It does tell at least it tells us it's
an extension, in some IDEs, like Rider,

136
00:08:51.063 --> 00:08:54.568
it will actually have a slightly
different symbol for these.

137
00:08:54.568 --> 00:08:59.573
This is an actual method on the string
class, this is a our extension method, so.

