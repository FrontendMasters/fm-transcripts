WEBVTT

1
00:00:00.220 --> 00:00:04.150
&gt;&gt; Spencer Schneidenbach: Let's talk
about some of the built-in types for C-#.

2
00:00:04.150 --> 00:00:07.552
So, we've already kind of touched on int,
and we've touched on string,

3
00:00:07.552 --> 00:00:08.850
we've touched on Boolean.

4
00:00:08.850 --> 00:00:13.693
But there are quite a few others, and
I kind of wanted to just mention them and

5
00:00:13.693 --> 00:00:18.100
run through them fairly quickly just so
that we know that they exist.

6
00:00:19.770 --> 00:00:23.736
So first of all, all objects,
all types inherent from object,

7
00:00:23.736 --> 00:00:27.564
even value types, again,
we'll get into that a little bit.

8
00:00:27.564 --> 00:00:33.134
But basically anything in .net is an
object in some ways, including functions,

9
00:00:33.134 --> 00:00:38.301
although it's not nearly as function
first as a language like JavaScript,

10
00:00:38.301 --> 00:00:40.823
but all types inherent from object.

11
00:00:40.823 --> 00:00:46.064
So that's the core type in in C-sharp.

12
00:00:46.064 --> 00:00:48.396
But we have other we
have of course string.

13
00:00:48.396 --> 00:00:51.320
We also have single characters or char or

14
00:00:51.320 --> 00:00:55.362
char I don't know how you pronounce it,
I call it char,

15
00:00:55.362 --> 00:01:00.189
and that is denoted with instead of
on a double quotes for a string.

16
00:01:00.189 --> 00:01:02.553
It's just a single quote.

17
00:01:02.553 --> 00:01:06.118
So, if you have a char, and

18
00:01:06.118 --> 00:01:10.768
you declare it as just the letter G,

19
00:01:10.768 --> 00:01:16.199
you can have the char
be set to that value.

20
00:01:16.199 --> 00:01:18.109
You cannot have an empty char.

21
00:01:18.109 --> 00:01:22.270
You cannot have a char with
more than one char character.

22
00:01:22.270 --> 00:01:23.649
So that's how you declare them.

23
00:01:23.649 --> 00:01:27.083
Not something I declare a super lot of,
but important to know for

24
00:01:27.083 --> 00:01:31.227
single characters, because there is
some important implications to that.

25
00:01:31.227 --> 00:01:34.633
I mean, a string is essentially
just an array of chars,

26
00:01:34.633 --> 00:01:36.864
after all, array of characters.

27
00:01:36.864 --> 00:01:41.618
So that's one of the types,
one of the core types inside.

28
00:01:41.618 --> 00:01:46.815
Boolean represents true or false, a very
important part of any language, very

29
00:01:46.815 --> 00:01:52.029
important part of any ecosystem to be able
to tell if something is true or false.

30
00:01:52.029 --> 00:01:55.756
Because we need to be able to operate
on certain things based on whether or

31
00:01:55.756 --> 00:01:57.049
not it's true or false.

32
00:01:57.049 --> 00:02:00.857
I'm sure that the question will come up,
is there truthy or falsy in C-sharp?

33
00:02:00.857 --> 00:02:03.972
There is not, that is a JavaScript thing,

34
00:02:03.972 --> 00:02:08.565
only you're doing if statements and
similar things on bools.

35
00:02:08.565 --> 00:02:13.527
You're using bools or booleans for
that, strictly speaking.

36
00:02:13.527 --> 00:02:19.255
So, there are other data types,
so like the smallest

37
00:02:19.255 --> 00:02:24.996
kind of a number value, or
the common value is a byte.

38
00:02:24.996 --> 00:02:29.973
A byte is just 8 bit unsigned integer,
and an sbyte is 8 bit

39
00:02:29.973 --> 00:02:34.899
signed integer, so,
pretty typical in most languages.

40
00:02:34.899 --> 00:02:38.616
So represent single bytes
rarely do I declare them if

41
00:02:38.616 --> 00:02:43.609
you're doing any kind of file
processing for a specific file format.

42
00:02:43.609 --> 00:02:47.666
You're probably declaring bytes to read
that file specifically in different

43
00:02:47.666 --> 00:02:50.498
places, but
most of the time I'm not declaring them.

44
00:02:50.498 --> 00:02:56.924
My favorite data type for
declaring integers is indeed int,

45
00:02:56.924 --> 00:03:01.464
int or long depending on the application.

46
00:03:01.464 --> 00:03:04.508
Long just has way more capacity.

47
00:03:04.508 --> 00:03:08.505
So in a database system where
you're getting a bunch of records,

48
00:03:08.505 --> 00:03:13.449
that may be a difference maker in terms of
your ability to not hit some kind of upper

49
00:03:13.449 --> 00:03:18.635
bound in an auto incrementing integer,
which we'll talk about in the next course.

50
00:03:18.635 --> 00:03:21.017
But, for the most part,
if I'm declaring an integer,

51
00:03:21.017 --> 00:03:22.497
I'm just gonna declare it as int.

52
00:03:22.497 --> 00:03:24.304
I do that out of force of habit.

53
00:03:24.304 --> 00:03:28.465
I do that because most other
developers do that as well.

54
00:03:28.465 --> 00:03:32.965
Rarely do I see things declared as short
unless it's unless it actually is going

55
00:03:32.965 --> 00:03:33.780
to be a short.

56
00:03:33.780 --> 00:03:35.536
And even then,
most people just defer to int.

57
00:03:38.350 --> 00:03:40.436
&gt;&gt; Spencer Schneidenbach: Unsigned
integers, shorts,

58
00:03:40.436 --> 00:03:45.573
longs are basically it's exactly how
they say they don't have a positive or

59
00:03:45.573 --> 00:03:48.153
a negative sign in front of the value.

60
00:03:48.153 --> 00:03:50.511
It just is a value.

61
00:03:50.511 --> 00:03:55.326
So the value for unsigned int
would be min value would be 0,

62
00:03:55.326 --> 00:04:00.238
and the max value would be double
the max value of an integer,

63
00:04:00.238 --> 00:04:04.283
because an integer could
can be negative as well,

64
00:04:04.283 --> 00:04:08.262
negative 2 billion, 147 million, right?

65
00:04:08.262 --> 00:04:09.340
That's its range.

66
00:04:09.340 --> 00:04:12.075
That's its potential range of values.

67
00:04:12.075 --> 00:04:14.144
Most of the time I'm just using int,
even for

68
00:04:14.144 --> 00:04:16.435
things that I know are never
gonna to be negative.

69
00:04:16.435 --> 00:04:17.665
Again, it's a force of habit.

70
00:04:17.665 --> 00:04:18.836
It's a consistency thing.

71
00:04:22.210 --> 00:04:24.344
Float, double, and decimal.

72
00:04:24.344 --> 00:04:29.718
So a I'm not gonna get into
whole floating point math.

73
00:04:29.718 --> 00:04:33.414
I don't think I'd be able to explain
it super well, even if I did,

74
00:04:33.414 --> 00:04:37.110
but there are those very important
data types here which represent

75
00:04:37.110 --> 00:04:40.494
numbers that have a well,
as they say, a floating decimal.

76
00:04:40.494 --> 00:04:43.830
So it could be 31.415, and so

77
00:04:43.830 --> 00:04:49.403
we have ways of representing
those inside of the language.

78
00:04:49.403 --> 00:04:55.230
If I'm representing a floating point
value, it's probably going to be a double.

79
00:04:55.230 --> 00:04:58.925
But most of the time, just for
consistency and for precision,

80
00:04:58.925 --> 00:05:00.400
I prefer to use decimal.

81
00:05:00.400 --> 00:05:03.009
Decimal does have,
it does take aditional memory, but

82
00:05:03.009 --> 00:05:05.905
in most cases where I'm using it,
I prefer the consistency.

83
00:05:05.905 --> 00:05:08.182
I don't really see the memory use.

84
00:05:08.182 --> 00:05:10.120
I'm personally a fan of decimals.

85
00:05:10.120 --> 00:05:14.844
It just is for consistency reasons,
that's mainly what I use.

86
00:05:16.364 --> 00:05:20.441
So DateTime,
DateTime is a really important value,

87
00:05:20.441 --> 00:05:23.759
because dates matter Times matter.

88
00:05:23.759 --> 00:05:25.069
So let's talk about that.

89
00:05:25.069 --> 00:05:28.695
Let's talk about a few different things
that dates have, I'm gonna go ahead and

90
00:05:28.695 --> 00:05:30.147
clear out a lot of these things.

91
00:05:30.147 --> 00:05:32.776
So first things first,

92
00:05:32.776 --> 00:05:37.772
there's a couple of
static dates properties

93
00:05:37.772 --> 00:05:42.908
that date times have,
which in this case are.

94
00:05:42.908 --> 00:05:47.850
UTC now, today, and now 99% of
the time in a production system,

95
00:05:47.850 --> 00:05:49.683
I'm going to be UTC now.

96
00:05:49.683 --> 00:05:53.523
So that's going to take the it's
going to give me a representation of

97
00:05:53.523 --> 00:05:56.915
the current time on the system
that the code is executing it.

98
00:05:56.915 --> 00:06:02.414
So if I do Console.WriteLine,
and I do this,

99
00:06:02.414 --> 00:06:09.536
I do open up my terminal,
control shift tilde, I do dotnet run.

100
00:06:09.536 --> 00:06:13.349
You're gonna see that it does indeed
print the current time, which in UTC.

101
00:06:13.349 --> 00:06:18.997
So, I said, there's datetime.today and
datetime.now,

102
00:06:18.997 --> 00:06:26.610
two of which I avoid pretty much at all
costs when I'm writing production systems.

103
00:06:26.610 --> 00:06:31.534
Something I'd like to note is I
mentioned that daytime is immutable.

104
00:06:31.534 --> 00:06:36.763
When you're first programming,
I remember spending 30 minutes banging

105
00:06:36.763 --> 00:06:42.080
my head against a wall, figuring out
strings also that they're immutable.

106
00:06:42.080 --> 00:06:46.422
And trying to figure out why
name two lower did not convert

107
00:06:46.422 --> 00:06:48.422
my name to a lower string.

108
00:06:52.288 --> 00:06:56.198
&gt;&gt; Spencer Schneidenbach: So if I run
this, you'll see that the Spencer variable

109
00:06:56.198 --> 00:06:59.603
that I declared here,
it didn't get lowered.

110
00:06:59.603 --> 00:07:02.565
And that's because these
are immutable by default.

111
00:07:02.565 --> 00:07:05.296
So you can't change them
once they're instantiated,

112
00:07:05.296 --> 00:07:09.417
you can reassign the variable that they're
part of, which is what I'm doing here,

113
00:07:09.417 --> 00:07:11.583
and then we'll get the expected behavior.

114
00:07:11.583 --> 00:07:13.948
DateTime has a lot of the same semantics.

115
00:07:13.948 --> 00:07:18.276
So if you did DateTime.UtcNow.AddDays,

116
00:07:18.276 --> 00:07:23.764
you're not gonna magically
add one day to UTC now.

117
00:07:23.764 --> 00:07:28.748
You're gonna get a new instance of
the of the DateTime object, and

118
00:07:28.748 --> 00:07:32.759
you can see that when you dig
into the the source code.

119
00:07:32.759 --> 00:07:34.857
So you can see that.

120
00:07:34.857 --> 00:07:37.506
And I should tell you, I went in
order to get into the source code.

121
00:07:37.506 --> 00:07:41.505
I think for you it would be I'm not
exactly sure what the button would be, but

122
00:07:41.505 --> 00:07:42.706
for me it's command.

123
00:07:42.706 --> 00:07:43.872
So I command and click.

124
00:07:43.872 --> 00:07:47.669
You can see that it gives me
underlines and then I can go through.

125
00:07:47.669 --> 00:07:49.444
And then I can look at the source code for
this.

126
00:07:49.444 --> 00:07:54.433
And you can see as we get
further in that instance

127
00:07:54.433 --> 00:07:58.562
of the date time itself is not altered.

128
00:07:58.562 --> 00:08:02.381
The only thing that's altered., That
nothing is altered the only thing that's

129
00:08:02.381 --> 00:08:04.441
done is a new copy of
DateTime is being made.

130
00:08:04.441 --> 00:08:07.304
So there are a lot of DateTime methods,
so you can get the current year,

131
00:08:07.304 --> 00:08:09.138
the current day for
that DateTime instance.

132
00:08:09.138 --> 00:08:13.220
You can add days, milliseconds, and
then get new copies of DateTime.

133
00:08:13.220 --> 00:08:16.314
So, very important that you know it,

134
00:08:16.314 --> 00:08:21.436
we're not gonna go through every
single one of these methods,

135
00:08:21.436 --> 00:08:26.963
but it's important that you know
that these things are available.

136
00:08:26.963 --> 00:08:31.797
DateTime.Parse is a way of taking a string

137
00:08:31.797 --> 00:08:36.222
and
&gt;&gt; Spencer Schneidenbach: Declaring a, so

138
00:08:36.222 --> 00:08:40.196
if we do DateTime d = DateTime.Parse
it's a static method, so

139
00:08:40.196 --> 00:08:43.448
that means you don't need
an instance to access it.

140
00:08:43.448 --> 00:08:48.232
And what it'll do is it'll take in a date,
it's fairly forgiving in

141
00:08:48.232 --> 00:08:53.358
terms of the format of the date you
can specify specific date formatters.

142
00:08:53.358 --> 00:08:56.358
Most of the time I let my
frameworks serialize and

143
00:08:56.358 --> 00:08:59.149
deserialize like a JSON
value in a date time.

144
00:08:59.149 --> 00:09:01.133
I let Frameworks do that lifting for me.

145
00:09:01.133 --> 00:09:04.802
But occasionally it's useful to
be able to parse this on its own.

146
00:09:04.802 --> 00:09:09.988
If this thing cannot be parsed, it will
throw an error, which we will talk about,

147
00:09:09.988 --> 00:09:13.539
a little later when we get
to talking about exceptions.

148
00:09:13.539 --> 00:09:15.829
Let's see, this is my spicy take.

149
00:09:15.829 --> 00:09:18.125
This isn't really spicy in
terms of most .NET developers.

150
00:09:18.125 --> 00:09:23.115
I think most production .NET developers
would agree that DateTime.Now is something

151
00:09:23.115 --> 00:09:28.033
that we should avoid, and DateTime.UtcNow
is the thing that you should be using when

152
00:09:28.033 --> 00:09:30.301
you're in a production environment.

153
00:09:30.301 --> 00:09:34.819
So with that, moving on to the next
one of the collection types, and

154
00:09:34.819 --> 00:09:37.607
one of the most important ones is arrays.

155
00:09:37.607 --> 00:09:41.675
As I mentioned, that's a collection
of data when we looked at the params,

156
00:09:41.675 --> 00:09:46.147
kind of method, we saw that there was
that open bracket, close bracket, right?

157
00:09:46.147 --> 00:09:48.223
And that's just array syntax.

158
00:09:48.223 --> 00:09:53.853
So an array is just a an array
of a list of values.

159
00:09:53.853 --> 00:09:54.897
Arrays cannot be changed.

160
00:09:54.897 --> 00:09:56.555
They cannot be resized.

161
00:09:56.555 --> 00:10:00.022
They you in order to resize them,
you have to redeclare them.

162
00:10:00.022 --> 00:10:04.051
That's not like in JavaScript,
where an array you can add or

163
00:10:04.051 --> 00:10:09.984
remove elements from it, arrays are fixed
in size period after they're instantiated.

164
00:10:09.984 --> 00:10:15.941
So, if we declare an array of ints, so
array of integers, we can use, we can do,

165
00:10:15.941 --> 00:10:22.006
this is a fairly new C# feature, but what
you can do is have the array syntax here.

166
00:10:22.006 --> 00:10:25.495
Note that you cannot
declare this as a var.

167
00:10:25.495 --> 00:10:28.174
It kind of goes to the vestigial
nature of some of C#.

168
00:10:28.174 --> 00:10:29.118
It's been around for a long time.

169
00:10:29.118 --> 00:10:30.577
It doesn't know the type.

170
00:10:30.577 --> 00:10:32.515
It doesn't have a type for
this collection and

171
00:10:32.515 --> 00:10:34.557
it doesn't want to make
an assumption about it.

172
00:10:34.557 --> 00:10:37.561
So we have to declare that ahead of time,
which is fine.

173
00:10:37.561 --> 00:10:39.840
So an array of integers,
we have that array.

174
00:10:39.840 --> 00:10:42.548
And that is our list of integers.

175
00:10:42.548 --> 00:10:46.445
You can also declare
an array of integers or

176
00:10:46.445 --> 00:10:51.545
an array of anything without
any specific values in it.

177
00:10:51.545 --> 00:10:53.909
You can give it a number here, and

178
00:10:53.909 --> 00:10:59.418
that just basically says that I wanna
array of size with three elements in it.

179
00:10:59.418 --> 00:11:00.631
Yes Mark.

180
00:11:00.631 --> 00:11:05.363
&gt;&gt; Mark: Can you treat in a string like
an array, like you can in Javascript and

181
00:11:05.363 --> 00:11:07.737
iterate through the characters?

182
00:11:07.737 --> 00:11:09.185
&gt;&gt; Spencer Schneidenbach: Yes, you can.

183
00:11:09.185 --> 00:11:15.075
Yeah, because a string
is an array of chars,

184
00:11:15.075 --> 00:11:23.355
characters so skipping ahead
a little bit in terms of syntax,

185
00:11:23.355 --> 00:11:28.146
but char character in hello world.

186
00:11:28.146 --> 00:11:33.235
You can absolutely iterate through them
and get the I misspelled character,

187
00:11:33.235 --> 00:11:36.768
and get each of the characters
inside of that string.

188
00:11:36.768 --> 00:11:37.483
Good question.

189
00:11:41.999 --> 00:11:43.150
&gt;&gt; Spencer Schneidenbach: Let's see.

190
00:11:43.150 --> 00:11:46.649
Most of the time, the one,
if you have a multidimensional array,

191
00:11:46.649 --> 00:11:48.847
AKA an array that's declared with this.

192
00:11:48.847 --> 00:11:52.838
In practice,
I have not written code that uses this,

193
00:11:52.838 --> 00:11:58.166
that requires multiple or an array
with multiple what they call ranks.

194
00:11:58.166 --> 00:12:02.829
But you can declare them so that you can
have, if you have a coordinate of x's and

195
00:12:02.829 --> 00:12:07.073
y's an array that's declared like that,
might be a good useful time for

196
00:12:07.073 --> 00:12:08.419
that to declare that.

197
00:12:08.419 --> 00:12:12.877
But in this case, the one thing that I
wanna point out is the length property on

198
00:12:12.877 --> 00:12:16.251
the array will tell you how
many elements are in the array.

199
00:12:16.251 --> 00:12:17.662
It's something that I check a lot,

200
00:12:17.662 --> 00:12:19.835
especially if I'm looking to
see if an array is empty.

201
00:12:19.835 --> 00:12:22.804
I will check it and
see if this array is zero,

202
00:12:22.804 --> 00:12:28.043
because I wanna be able to operate or
do something on that based on that value.

203
00:12:30.661 --> 00:12:36.730
&gt;&gt; Spencer Schneidenbach: Enums,
Enums are a set of named constants

204
00:12:36.730 --> 00:12:41.199
is the best way to to put them.

205
00:12:41.199 --> 00:12:44.711
And so the way that you declare
them is with the enum keyword.

206
00:12:44.711 --> 00:12:47.413
So these can be declared
as a separate type.

207
00:12:47.413 --> 00:12:53.745
They're considered a type just like the
rest of like classes and things like that.

208
00:12:53.745 --> 00:12:59.160
So you can declare a type for or
you can declare an enum as a type.

209
00:12:59.160 --> 00:13:02.883
You can also an enum has what's
called an underlying type and

210
00:13:02.883 --> 00:13:06.099
by default the underlying type for
all enums is int.

211
00:13:06.099 --> 00:13:08.834
And the first value here is equal to zero,

212
00:13:08.834 --> 00:13:13.225
the next value here is equal to one,
the value here is equal to two.

213
00:13:13.225 --> 00:13:18.786
You can also explicitly set them most of
the time I am explicitly setting them and

214
00:13:18.786 --> 00:13:22.023
I usually start at one and
then I go one equals or

215
00:13:22.023 --> 00:13:25.106
manager equals one supervisor equals two.

216
00:13:25.106 --> 00:13:28.807
But you can set them to different
values in case you have maybe there's

217
00:13:28.807 --> 00:13:32.866
a mathematical reason you wanna declare
an enum where the integers have specific

218
00:13:32.866 --> 00:13:33.716
meaning to you.

219
00:13:33.716 --> 00:13:37.783
So, you might do that that way.

220
00:13:37.783 --> 00:13:39.781
Let's see.

221
00:13:39.781 --> 00:13:44.016
I mostly don't assign to enums.

222
00:13:44.016 --> 00:13:46.216
I usually just let
the compiler do its thing and

223
00:13:46.216 --> 00:13:50.066
just use them as kind of just dumb markers
unless I'm storing them in a database.

224
00:13:50.066 --> 00:13:53.705
And I typically then will definitely
start with one and assign them.

225
00:13:53.705 --> 00:13:57.881
And the way that you would use them
is pretty much like anything else,

226
00:13:57.881 --> 00:13:58.892
employee type.

227
00:13:58.892 --> 00:14:02.179
We can declare it and
then EmployeeType.Manager,

228
00:14:02.179 --> 00:14:07.192
you can see that we basically are able to
get that type and this will be an enum.

229
00:14:07.192 --> 00:14:12.484
So Console.WriteLine there it's when

230
00:14:12.484 --> 00:14:17.931
it's written to as a string employeeType

231
00:14:17.931 --> 00:14:23.078
will be written as exactly as it looks.

232
00:14:23.078 --> 00:14:26.673
So very cool,
I use enums a lot as discriminators for

233
00:14:26.673 --> 00:14:30.270
different things,
we'll have a type of employee or

234
00:14:30.270 --> 00:14:33.886
a type of payroll or
salary type or things like that.

235
00:14:33.886 --> 00:14:38.829
That's relevant for
the ASP.NET Core Course.

236
00:14:38.829 --> 00:14:41.770
You can also cast them
back to their core type.

237
00:14:41.770 --> 00:14:44.183
So you can see that if
we declare this as int,

238
00:14:44.183 --> 00:14:46.282
this will just go back to being an int.

239
00:14:46.282 --> 00:14:48.992
So like I said,
all enums have an underlying type.

240
00:14:48.992 --> 00:14:51.376
In practice, I only use the int type.

241
00:14:51.376 --> 00:14:55.604
You can declare them as byte, you can
declare them as long, but I only declare

242
00:14:55.604 --> 00:14:59.982
them as int, mostly because I'm just
using enums as, like I said, dumb markers.

243
00:15:02.501 --> 00:15:05.700
&gt;&gt; Spencer Schneidenbach: So, I believe
TypeScript does support string enums.

244
00:15:05.700 --> 00:15:10.778
I don't believe, unless they've added it,
but C# does not support that.

245
00:15:10.778 --> 00:15:14.681
The last thing that we'll
talk about is tuples.

246
00:15:14.681 --> 00:15:21.310
So, I go into this in way more detail
when inside of this documentation,

247
00:15:21.310 --> 00:15:25.669
but essentially a tuple
is just a set of values.

248
00:15:25.669 --> 00:15:30.108
It's a value type, which means that
it's stored in fast access memory.

249
00:15:30.108 --> 00:15:34.251
And it can be made up of just value
types like integer and Boolean, or

250
00:15:34.251 --> 00:15:37.026
reference types like instances of classes.

251
00:15:37.026 --> 00:15:42.753
And pretty much the way that you,
it's basically just a set of values.

252
00:15:42.753 --> 00:15:46.951
You can think of it like an array,
but it doesn't have to share a value.

253
00:15:46.951 --> 00:15:50.812
Tuples are a fairly recent
addition to the language.

254
00:15:50.812 --> 00:15:54.617
They actually had support for them a while
ago, but they weren't very pretty.

255
00:15:54.617 --> 00:15:57.097
This one is a lot easier and nicer to use.

256
00:15:57.097 --> 00:16:02.146
So if you just declare a tuple
without any named Properties,

257
00:16:02.146 --> 00:16:08.486
you can access them via Item1,
Item2, Item3, kinda not super useful.

258
00:16:08.486 --> 00:16:14.549
But not kinda not super useful when
you're trying to name things explicitly.

259
00:16:14.549 --> 00:16:20.274
And you can give them names, so you could
say something like this, for instance.

260
00:16:20.274 --> 00:16:26.095
Where you give the tuple
meaningful names like this.

261
00:16:26.095 --> 00:16:30.020
And then you're able to access them by,
very similar to how

262
00:16:30.020 --> 00:16:34.747
you would a class variable where you
can say, I want personInfo.Age.

263
00:16:34.747 --> 00:16:39.419
Or name as and I want to get their name,
and so on and so forth.

264
00:16:39.419 --> 00:16:44.624
Named tuples are something
that I use a ton of,

265
00:16:44.624 --> 00:16:53.899
especially if I have something like
a method that has a tuple return type.

266
00:16:53.899 --> 00:16:59.365
So I will have Int Age and
then string Name.

267
00:16:59.365 --> 00:17:03.535
If I wanna be able to return multiple
values from a method like this

268
00:17:05.811 --> 00:17:07.766
&gt;&gt; Spencer Schneidenbach: Return 30 Alice,

269
00:17:07.766 --> 00:17:12.941
I wanna be able to access this
such that if I do call this

270
00:17:12.941 --> 00:17:18.016
method GetEmployee, boom,
I can get age and name.

271
00:17:18.016 --> 00:17:21.108
I didn't do it isEmployee, but
I can get those things by name.

272
00:17:21.108 --> 00:17:21.935
So I use tuples,

273
00:17:21.935 --> 00:17:25.608
with tuples I think there's actually
a lot of pronunciations for tuple.

274
00:17:25.608 --> 00:17:27.098
I don't think anybody
[LAUGH] agrees on one.

275
00:17:27.098 --> 00:17:30.793
I always say tuple, but sometimes I
slip and say tuple, whatever the case,

276
00:17:30.793 --> 00:17:33.258
whatever the pronunciation of tuple is.

277
00:17:33.258 --> 00:17:37.518
I use them a lot when I want to have
multiple return types, return things,

278
00:17:37.518 --> 00:17:39.608
values, return from a method.

279
00:17:39.608 --> 00:17:43.558
But I don't wanna declare something
else like a class to hold those values.

280
00:17:45.028 --> 00:17:48.208
We'll talk about that more when
we get to classes and types.

281
00:17:50.908 --> 00:17:53.768
Let's see, we talked about the use cases,
we talked about that.

282
00:17:53.768 --> 00:17:55.378
Okay, this is the last thing.

283
00:17:55.378 --> 00:17:59.528
So, null is a big thing.

284
00:17:59.528 --> 00:18:01.742
There is no, so first of all for
those JavaScripters,

285
00:18:01.742 --> 00:18:04.888
there's no such thing as undefined in
C-sharp, we have null and null is it.

286
00:18:06.488 --> 00:18:12.818
And null is basically saying that
there is no value for this thing.

287
00:18:12.818 --> 00:18:18.248
You cannot do things like set an integer,
this integer to null.

288
00:18:18.248 --> 00:18:22.960
You can't do that because null is a,
the default value for an integer is zero.

289
00:18:22.960 --> 00:18:25.520
You cannot declare
an integer as a null value.

290
00:18:25.520 --> 00:18:28.630
It's somewhere in memory.

291
00:18:28.630 --> 00:18:32.560
It's considered what's stored on
the stack, which we'll touch on briefly.

292
00:18:32.560 --> 00:18:33.388
Null is for

293
00:18:33.388 --> 00:18:39.280
things like classes where there's going
to be multiple there may be there.

294
00:18:39.280 --> 00:18:41.365
It's basically what's it's
called a reference type,

295
00:18:41.365 --> 00:18:42.856
and we'll talk about that more.

296
00:18:42.856 --> 00:18:45.249
We'll talk about the implications of more,
you can consider it,

297
00:18:45.249 --> 00:18:47.614
it's not really a type,
it's more of to say an absence of a type.

298
00:18:47.614 --> 00:18:50.557
But it kind of is an important thing to
touch on in terms of, hey we need it,

299
00:18:50.557 --> 00:18:52.265
this is a thing inside of the language,
but

300
00:18:52.265 --> 00:18:54.226
we'll touch on it a lot
more as we get further in.

301
00:18:56.814 --> 00:18:59.015
&gt;&gt; Spencer Schneidenbach: And
then of course void is actually,

302
00:18:59.015 --> 00:19:03.135
I know it's a key word to say this
method doesn't have a return type.

303
00:19:03.135 --> 00:19:06.993
The fun fact is that void actually
is a type inside of the CLR, but

304
00:19:06.993 --> 00:19:10.386
it's not treated as one
inside of the language.

305
00:19:10.386 --> 00:19:13.436
And yes, I have tried to instantiate
them and no, you cannot do that.

306
00:19:13.436 --> 00:19:16.056
I've tried it many different
ways [LAUGH] just for fun.

307
00:19:17.386 --> 00:19:21.635
But, that is it for types.

308
00:19:21.635 --> 00:19:22.965
Can I answer any questions?

309
00:19:24.455 --> 00:19:26.283
&gt;&gt; Mark: Yes.
&gt;&gt; Student 1: Going back to enums,

310
00:19:26.283 --> 00:19:30.065
when we did that Console.WriteLine for
the employee,

311
00:19:30.065 --> 00:19:30.869
type,
&gt;&gt; Spencer Schneidenbach: Yes.

312
00:19:30.869 --> 00:19:33.985
&gt;&gt; Student 1: Is that
return value than a string?

313
00:19:33.985 --> 00:19:35.125
&gt;&gt; Spencer Schneidenbach: Yes,
that's a good question.

314
00:19:35.125 --> 00:19:39.985
So what Console.WriteLine, it's more
of a behavior of Console.WriteLine.

315
00:19:39.985 --> 00:19:41.812
So you'll see that as you dig in,

316
00:19:41.812 --> 00:19:46.381
as you dig into the source code,
it's not letting me navigate any further.

317
00:19:46.381 --> 00:19:50.167
But essentially,
whatever value is passed into this,

318
00:19:50.167 --> 00:19:53.271
they call its ToString method.

319
00:19:53.271 --> 00:19:58.226
So all, something that's a good thing
to note as we get into objects is that

320
00:19:58.226 --> 00:20:01.305
objects, there's a a few different things.

321
00:20:01.305 --> 00:20:07.189
A few different methods that they all
commonly share, one of them is ToString.

322
00:20:07.189 --> 00:20:11.209
So you can call ToString on any object and
get its string representation.

323
00:20:11.209 --> 00:20:13.562
And under the hood,
that's what WriteLine or

324
00:20:13.562 --> 00:20:17.979
Console.WriteLine is doing is it's
calling its ToString method on that enum.

325
00:20:17.979 --> 00:20:20.279
And when you call to string on enum,
you get.

326
00:20:20.279 --> 00:20:22.581
When you get on the enum not convert,

327
00:20:22.581 --> 00:20:25.631
if you don't convert it
to its underlying type.

328
00:20:25.631 --> 00:20:29.305
You will get if you do
 employeeType.Manager.ToString(),

329
00:20:29.305 --> 00:20:32.169
you will get this word back as a string.

330
00:20:32.169 --> 00:20:32.819
Great question.

331
00:20:34.609 --> 00:20:35.459
Yes.

332
00:20:35.459 --> 00:20:38.259
&gt;&gt; Student 2: Is there a way to
get all the values of the enum?

333
00:20:38.259 --> 00:20:39.109
&gt;&gt; Spencer Schneidenbach: Yes, there is.

334
00:20:40.249 --> 00:20:42.269
So that would be done via like.

335
00:20:43.449 --> 00:20:48.269
So if you wanted to do that,
it would be for each var enum in.

336
00:20:48.269 --> 00:20:53.209
We'll just call it E in,
and then... There is

337
00:20:53.209 --> 00:20:58.619
a System.Enum class,
and it has GetValues.

338
00:20:58.619 --> 00:21:02.961
And so what you can do is, Getvalues
you can pass in the type of that enum.

339
00:21:02.961 --> 00:21:05.908
And then be able to iterate through and
get all of the values from that and

340
00:21:05.908 --> 00:21:07.544
print them or whatever the case may be.

341
00:21:08.704 --> 00:21:09.214
Good question.

342
00:21:10.364 --> 00:21:15.048
It would look a little bit like this,
EmployeeType.

343
00:21:17.845 --> 00:21:20.527
&gt;&gt; Spencer Schneidenbach: And then you
could go through and spin through and

344
00:21:20.527 --> 00:21:21.844
Console.WriteLine.

345
00:21:24.209 --> 00:21:27.337
&gt;&gt; Spencer Schneidenbach: E, boom.

346
00:21:27.337 --> 00:21:32.215
&gt;&gt; Student 3: And then you run it, and you
can see that it will happily chew through

347
00:21:32.215 --> 00:21:36.506
and print all of the different enum
values to the to the console.

348
00:21:36.506 --> 00:21:37.108
&gt;&gt; Spencer Schneidenbach: Good question.

