WEBVTT

1
00:00:00.232 --> 00:00:02.776
&gt;&gt; Spencer Schneidenbach: I do
wanna mention control flow, and

2
00:00:02.776 --> 00:00:07.370
you've seen a little bit of this,
we need to be able to alter how our

3
00:00:07.370 --> 00:00:11.491
program executes based on
the current state that it's in.

4
00:00:11.491 --> 00:00:14.827
So, we've already kind of
looked at if statements,

5
00:00:14.827 --> 00:00:19.585
whereas if we have this (age &gt;= 18),
I'll paste that in here, boom.

6
00:00:23.538 --> 00:00:24.229
&gt;&gt; Spencer Schneidenbach: Move that over.

7
00:00:24.229 --> 00:00:29.015
One thing writer does for me is it
automatically adjusts my white space.

8
00:00:29.015 --> 00:00:33.271
So, if we have our age, and we say
that we're greater than equal to 18,

9
00:00:33.271 --> 00:00:35.344
it's gonna print you are an adult.

10
00:00:35.344 --> 00:00:39.048
There's a couple of
different iterations or

11
00:00:39.048 --> 00:00:43.438
kind of things of this that
are important to call out.

12
00:00:43.438 --> 00:00:47.240
So, like in most other languages,
you're gonna be able to do an if else.

13
00:00:47.240 --> 00:00:51.374
Same thing here with C#,
if this condition doesn't get met,

14
00:00:51.374 --> 00:00:54.499
it will execute what goes
on in the else blocks.

15
00:00:54.499 --> 00:00:58.567
So we check there, and we say that
if the age is 16 you are a minor.

16
00:00:58.567 --> 00:01:02.926
You can also have multiple cascading if
statements where you can also check other

17
00:01:02.926 --> 00:01:03.704
conditions.

18
00:01:03.704 --> 00:01:08.480
You can say, if age is greater than 18,
Console.WriteLine("You are an adult."); {

19
00:01:08.480 --> 00:01:12.612
else if (age &gt;= 13) ("You are a
teenager.");, and so on and so forth.

20
00:01:12.612 --> 00:01:17.417
One thing that's syntactically important
is that some languages do not require that

21
00:01:17.417 --> 00:01:19.362
you have these parenthesis here.

22
00:01:19.362 --> 00:01:24.622
C#, they are required, so
I wanted to make sure to call that out.

23
00:01:24.622 --> 00:01:29.090
Switch statements are another one if
you have a long list of values and

24
00:01:29.090 --> 00:01:33.405
you're really only checking one
of those particular values, and

25
00:01:33.405 --> 00:01:38.663
you're checking it multiple different
ways to see if it equals certain things.

26
00:01:38.663 --> 00:01:41.679
A switch statement is
a great way to do that.

27
00:01:41.679 --> 00:01:44.925
So let's just copy this code into here,
and

28
00:01:44.925 --> 00:01:50.199
you can see that based on our day of
the week, boom, boom, there we go.

29
00:01:52.552 --> 00:01:54.280
&gt;&gt; Spencer Schneidenbach: Format
that nicely, there we go,

30
00:01:54.280 --> 00:01:57.687
based on the day of the week it's
going to print a different string.

31
00:01:57.687 --> 00:02:00.859
Some things to note about the switch
statement, the switch always begins

32
00:02:00.859 --> 00:02:03.789
with switch at the top and
then the variable that you're checking.

33
00:02:03.789 --> 00:02:06.852
And then you will go down inside
of this curly brace that indicates

34
00:02:06.852 --> 00:02:10.427
a block of code, and it indicates
the block inside of the switch statement.

35
00:02:10.427 --> 00:02:13.149
And you'll see, for case 1,
it will write Monday,

36
00:02:13.149 --> 00:02:16.248
first day of the week is Monday
in certain cultures, right?

37
00:02:18.168 --> 00:02:22.526
Case 2 is Tuesday, and so on, and
you see that because of our day is 3,

38
00:02:22.526 --> 00:02:25.447
it gets evaluated to Wednesday.

39
00:02:25.447 --> 00:02:33.957
One of those vestigial parts of C# is
you'll notice this break statement.

40
00:02:33.957 --> 00:02:39.219
We don't have the break statement there,
the C# compiler can complain at you and

41
00:02:39.219 --> 00:02:44.496
say, no, you have to break this switch
statement before you're able to exit it.

42
00:02:44.496 --> 00:02:46.058
So it's something that is required.

43
00:02:46.058 --> 00:02:49.393
There's also a default case,
you can also have a default case.

44
00:02:49.393 --> 00:02:54.345
So if you're checking this for a value
that doesn't fall within the 1 to 7 range,

45
00:02:54.345 --> 00:02:56.137
it will just say invalid day.

46
00:02:56.137 --> 00:02:58.754
So if it's a value that it can't be

47
00:02:58.754 --> 00:03:03.308
checked,
&gt;&gt; Spencer Schneidenbach: It'll write

48
00:03:03.308 --> 00:03:07.517
Invalid day, so it'll go down to this
default case, which is pretty useful.

49
00:03:07.517 --> 00:03:12.119
It's important to note that switch
statements in this particular way only

50
00:03:12.119 --> 00:03:13.661
operate on value types.

51
00:03:13.661 --> 00:03:17.321
So you can have switch statements that
operate on reference types in different

52
00:03:17.321 --> 00:03:21.036
ways, that is pattern matching, which
is a relatively new feature in C#, and

53
00:03:21.036 --> 00:03:23.275
we'll cover that just a little bit later.

54
00:03:23.275 --> 00:03:27.975
You can see, by the way, so,
it's recently that switch expressions

55
00:03:27.975 --> 00:03:31.959
have been introduced to
the language in the last few years,

56
00:03:31.959 --> 00:03:37.135
and that is a way that you can more
concisely write a switch statement.

57
00:03:37.135 --> 00:03:41.897
I personally think that the syntax is a
little bit cleaner, but I don't really see

58
00:03:41.897 --> 00:03:46.328
that it has this super big advantage,
other than it does save lines of code.

59
00:03:46.328 --> 00:03:48.328
It doesn't have that break statement, but

60
00:03:48.328 --> 00:03:52.268
this is functionally equivalent to
the switch statement that you have above.

61
00:03:52.268 --> 00:03:55.891
You have the variable that
operates on the switch, and

62
00:03:55.891 --> 00:04:01.029
then the same kind of logic executes
based on the value of the day.

63
00:04:01.029 --> 00:04:04.235
So there's no real difference or
real surprise here,

64
00:04:04.235 --> 00:04:07.796
this that you're seeing here
is functionally equivalent.

65
00:04:07.796 --> 00:04:11.885
I do wanna talk about loops, of course,

66
00:04:11.885 --> 00:04:16.712
one of the most important
control structures.

67
00:04:16.712 --> 00:04:21.735
This is a classic for loop that you
see in lots of different languages.

68
00:04:21.735 --> 00:04:24.935
It's made up of three statements
inside the parenthesis,

69
00:04:24.935 --> 00:04:29.287
the declaration statement where you
declare variable, the statement where you

70
00:04:29.287 --> 00:04:33.397
check to see if the loop should continue
to execute, this returns boolean.

71
00:04:33.397 --> 00:04:37.882
And then a statement usually
made to increment the number or

72
00:04:37.882 --> 00:04:43.187
change the condition of this to see
if the loop should keep executing.

73
00:04:43.187 --> 00:04:48.026
So, as you might expect,
&gt;&gt; Spencer Schneidenbach: If I copy and

74
00:04:48.026 --> 00:04:52.829
paste this code in here,
this loop will execute 5 times,

75
00:04:52.829 --> 00:04:59.611
it will basically say start at 0, and
while i &lt; 5, write Console.WriteLine.

76
00:04:59.611 --> 00:05:04.426
And after every time the loop runs
just increment that variable, so

77
00:05:04.426 --> 00:05:07.644
you can see that it
writes out number 0 to 4.

78
00:05:07.644 --> 00:05:11.169
Pretty standard,
like I said this is the classic loop,

79
00:05:11.169 --> 00:05:14.550
it is not a loop that I write
a ton of very much anymore.

80
00:05:14.550 --> 00:05:18.187
Most of the time, if I wanna iterate, I'm
usually iterating over a collection, and

81
00:05:18.187 --> 00:05:19.712
in that case, I'm using foreach.

82
00:05:19.712 --> 00:05:24.475
So, while loop is a basically a way
to continue to run a loop while

83
00:05:24.475 --> 00:05:26.426
a condition is being met.

84
00:05:26.426 --> 00:05:29.524
I write a surprising amount of these.

85
00:05:29.524 --> 00:05:34.124
Oftentimes I will write them like this,
while (true), and

86
00:05:34.124 --> 00:05:38.738
I'll do some kind of logic and
then eventually exit the loop.

87
00:05:38.738 --> 00:05:42.174
One of the ways you can exit any loop
at any time is you can write a break

88
00:05:42.174 --> 00:05:45.314
statement, and
that will exit the loop immediately.

89
00:05:45.314 --> 00:05:49.279
So what I'll do is I'll just say basically
do this process as many times as you

90
00:05:49.279 --> 00:05:51.834
need to until I get
a result that I expect.

91
00:05:51.834 --> 00:05:56.322
As you can imagine, this is also a fairly
dangerous way to work on a loop, so

92
00:05:56.322 --> 00:06:00.978
a lot of testing needs to go into any
time that you write a while (true) loop.

93
00:06:00.978 --> 00:06:04.551
But you don't have to just have while
(true), you can also have some condition.

94
00:06:04.551 --> 00:06:08.212
So if you have int i = 0 and

95
00:06:08.212 --> 00:06:12.873
then you say while (i != 5),

96
00:06:12.873 --> 00:06:19.384
Console.WriteLine(i), and we do i++.

97
00:06:23.794 --> 00:06:26.300
&gt;&gt; Spencer Schneidenbach: You will see
that it will print numbers 1 through 5.

98
00:06:26.300 --> 00:06:28.979
And then as soon as this condition
is false, it will exit the loop and

99
00:06:28.979 --> 00:06:29.546
it will stop.

100
00:06:29.546 --> 00:06:34.332
Now, of course, we could do while (true)
and then really spin this thing out

101
00:06:34.332 --> 00:06:39.207
of control without a break statement
that would inevitably crash the program.

102
00:06:39.207 --> 00:06:43.960
[LAUGH] So, as I mentioned,
most of the time when I'm using

103
00:06:43.960 --> 00:06:48.820
while loops it's in some kind of form or
fashion like this.

104
00:06:48.820 --> 00:06:53.125
It's a little bit advanced, because
you do have to be careful with that.

105
00:06:53.125 --> 00:06:57.991
The do-while loop is a condition
where everything that's going on

106
00:06:57.991 --> 00:07:00.646
in the do will execute at least once.

107
00:07:00.646 --> 00:07:04.864
I do not see these often, I do not ever
use them, not because they're not useful.

108
00:07:04.864 --> 00:07:08.527
Occasionally, once maybe a year,
I will do a do-while.

109
00:07:08.527 --> 00:07:13.298
But this is basically where you wanna say,
I want the do statement to execute at

110
00:07:13.298 --> 00:07:18.017
least one time and then continue to
execute based on the value of a condition.

111
00:07:18.017 --> 00:07:25.407
So, fairly useful to know about,
not super important to write about.

112
00:07:25.407 --> 00:07:30.817
Foreach is a loop that is pretty much
the loop that I use for anything.

113
00:07:30.817 --> 00:07:33.131
Anytime I'm using operating
on some type of collection,

114
00:07:33.131 --> 00:07:34.602
I'm probably doing a foreach loop.

115
00:07:34.602 --> 00:07:40.188
So let me declare real
quick an array of values.

116
00:07:40.188 --> 00:07:44.334
And you saw me give an example
of this earlier, but

117
00:07:44.334 --> 00:07:47.394
I basically can say value in arr, and

118
00:07:47.394 --> 00:07:52.331
then it will go through each of
the elements of this array and

119
00:07:52.331 --> 00:07:58.288
I can do some operation on them,
so Console.Writeline(value);.

120
00:07:58.288 --> 00:08:02.264
I don't need to know anything
about this array, like its length,

121
00:08:02.264 --> 00:08:06.382
I don't need to track some kind of i
in order to track what my place is,

122
00:08:06.382 --> 00:08:09.012
the language and
the runtime do that for me.

123
00:08:09.012 --> 00:08:13.552
So this is probably the most common loop
that in professional development you will

124
00:08:13.552 --> 00:08:16.972
use, because you will iterate
over a collection of things and

125
00:08:16.972 --> 00:08:18.926
do something with them.

126
00:08:18.926 --> 00:08:22.880
Pretty cool, I mentioned break.

127
00:08:22.880 --> 00:08:26.915
Break is a statement that you can use to
exit a loop at any time that goes for

128
00:08:26.915 --> 00:08:27.916
for each as well.

129
00:08:27.916 --> 00:08:33.076
So if I do foreach break;, boom, and I hit
play and run this, it's not gonna return

130
00:08:33.076 --> 00:08:38.188
anything, because I just broke this loop
and just exited before it could even run.

131
00:08:38.188 --> 00:08:43.312
The continue statement is used
to cut your way out of a loop,

132
00:08:43.312 --> 00:08:47.513
in case, for some reason,
you need to exit the or

133
00:08:47.513 --> 00:08:53.587
wanna continue the loop, but
you don't want some other logic to run.

134
00:08:53.587 --> 00:08:58.050
So let's print Console.WriteLine(i); and

135
00:08:58.050 --> 00:09:02.739
you'll see that the loop
does not stop executing.

136
00:09:02.739 --> 00:09:06.178
It continues, just as the statement says,
but it does skip 5,

137
00:09:06.178 --> 00:09:08.801
which is exactly what we expect,
it stops here.

138
00:09:08.801 --> 00:09:11.252
You can think of it as kind of
like a return statement for

139
00:09:11.252 --> 00:09:14.739
a loop in that it just shortcuts and then
it exits out of the loop very quickly.

