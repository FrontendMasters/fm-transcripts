WEBVTT

1
00:00:00.240 --> 00:00:03.792
&gt;&gt; Spencer Schneidenbach: So let's
talk a little bit more about methods.

2
00:00:03.792 --> 00:00:08.053
Methods are basically ways of
doing reusable things, right?

3
00:00:08.053 --> 00:00:15.162
There are ways of encapsulating logic such
that you can say that this thing does x,

4
00:00:15.162 --> 00:00:20.440
it computes this value,
it modifies this point in memory.

5
00:00:20.440 --> 00:00:21.760
So a method is really about doing.

6
00:00:21.760 --> 00:00:25.205
And the first method that we looked at,
of course,

7
00:00:25.205 --> 00:00:30.106
is our main method here, which is
the entry point into the application.

8
00:00:30.106 --> 00:00:36.250
It's kind of the standard way that you
get into.net is using the main method,

9
00:00:36.250 --> 00:00:41.295
but a class we can declare other
methods besides main Of course.

10
00:00:41.295 --> 00:00:45.721
There are many different there's
many different places and

11
00:00:45.721 --> 00:00:50.058
ways that you can declare a method and
they're all kind of,

12
00:00:50.058 --> 00:00:55.282
they all follow this very kind of same
pattern or structure as you will.

13
00:00:55.282 --> 00:00:58.847
They're typically gonna
have an access modifier.

14
00:00:58.847 --> 00:01:02.693
They may have a, another modifier
depending on what kind of method it is.

15
00:01:02.693 --> 00:01:04.833
We'll just,
we'll get to that as we dive further in.

16
00:01:04.833 --> 00:01:08.482
It will have a return type and
it will have the name

17
00:01:08.482 --> 00:01:14.073
of the method followed by any
parameters that the method has.

18
00:01:14.073 --> 00:01:18.675
So one of the things we talked to that I
mentioned that C-sharp has a particular

19
00:01:18.675 --> 00:01:20.418
way of styling things.

20
00:01:20.418 --> 00:01:24.594
A C# style for
methods is to declare them as pascal case.

21
00:01:24.594 --> 00:01:28.424
Which is means that a capital letter which
is different from a lot of other languages

22
00:01:28.424 --> 00:01:31.556
which usually do camel case,
where the first letter is lowercase.

23
00:01:31.556 --> 00:01:37.300
And C# will tell you, hey, this is the
preferred style if you did type it as and

24
00:01:37.300 --> 00:01:43.416
declare it as a method as something named
in a way that Microsoft doesn't tell you.

25
00:01:43.416 --> 00:01:48.634
And I tend to actually exclusively
stick to Microsoft styling roles,

26
00:01:48.634 --> 00:01:52.621
because that's what most
other developers expect.

27
00:01:52.621 --> 00:01:56.734
I mentioned there are access modifiers, so

28
00:01:56.734 --> 00:02:02.180
you'd be able to say, for
instance, that a public method

29
00:02:02.180 --> 00:02:07.537
on this program class would
be exposed to other members.

30
00:02:07.537 --> 00:02:12.871
And other classes and other pieces
of code, even outside this library.

31
00:02:12.871 --> 00:02:16.338
For the purposes we're gonna
keep most things public,

32
00:02:16.338 --> 00:02:19.148
just to kind of we'll just for
clarity sake.

33
00:02:19.148 --> 00:02:22.040
But as we get into inheritance and
we talk really about like class and

34
00:02:22.040 --> 00:02:24.072
object-oriented programming a little more,

35
00:02:24.072 --> 00:02:27.443
we will definitely talk about these
because these are definitely important.

36
00:02:29.529 --> 00:02:32.049
&gt;&gt; Spencer Schneidenbach: So,
let's copy paste this very simple,

37
00:02:32.049 --> 00:02:33.569
very contrived method.

38
00:02:33.569 --> 00:02:36.137
Of course,
we have this built into the language, but

39
00:02:36.137 --> 00:02:38.651
as far as demonstrating all
of the different parts of

40
00:02:38.651 --> 00:02:42.670
the language you're concerned, I think
an example like this kind of does it well.

41
00:02:42.670 --> 00:02:44.263
You have your access modifier here.

42
00:02:44.263 --> 00:02:45.167
It is optional.

43
00:02:45.167 --> 00:02:48.493
If you don't, if you exclude it,
it's private and

44
00:02:48.493 --> 00:02:50.996
only accessible by the program class.

45
00:02:50.996 --> 00:02:55.165
You have the return type, which in this
case is int because all we're doing is

46
00:02:55.165 --> 00:02:58.067
taking these and
adding these two numbers together.

47
00:02:58.067 --> 00:03:03.149
We have the name of the method,
which again is pascal case,

48
00:03:03.149 --> 00:03:07.901
and then we have
the variable declarations.

49
00:03:07.901 --> 00:03:10.983
So some things to note about
kind of how a method name and

50
00:03:10.983 --> 00:03:13.471
a method is unique is made unique.

51
00:03:13.471 --> 00:03:17.153
If you try to copy paste this method, it's
gonna throw a compiler error at you and

52
00:03:17.153 --> 00:03:19.989
say, this is already defined
with the same parameter types.

53
00:03:19.989 --> 00:03:24.366
A method is defined by what's called its
signature, and its signature is its name,

54
00:03:24.366 --> 00:03:26.536
followed by what parameters it takes in.

55
00:03:26.536 --> 00:03:29.425
So if we were to add, for
instance, int c here, and

56
00:03:29.425 --> 00:03:34.268
modify even without modifying this method,
the compiler stops complaining at us and

57
00:03:34.268 --> 00:03:36.771
says, okay, that's a valid method.

58
00:03:36.771 --> 00:03:38.527
This is what's called method overloading.

59
00:03:38.527 --> 00:03:42.095
So you can have a method with multiple
ways of calling it, multiple signatures,

60
00:03:42.095 --> 00:03:44.980
and they could do different things,
have different behaviors,

61
00:03:44.980 --> 00:03:47.938
depending on what's
passed into the method.

62
00:03:47.938 --> 00:03:51.899
So say for instance,

63
00:03:51.899 --> 00:03:58.069
we wanted to add a 1, int b =2.

64
00:03:58.069 --> 00:04:02.000
When we call add numbers, and

65
00:04:02.000 --> 00:04:08.454
actually we're gonna
declare these as static.

66
00:04:08.454 --> 00:04:12.017
This main method can't use AddNumbers
unless they're all declared a static in

67
00:04:12.017 --> 00:04:15.008
this case, which we'll get into
a little bit more a little later.

68
00:04:15.008 --> 00:04:17.925
And then we will say AddNumbers.

69
00:04:17.925 --> 00:04:22.479
And you can say that as we have the IDE
will happily tell us that there's two

70
00:04:22.479 --> 00:04:24.624
different ways you can call this.

71
00:04:24.624 --> 00:04:26.327
So you can call it here or
you can call it here.

72
00:04:26.327 --> 00:04:28.159
So we'll show you the method signatures.

73
00:04:28.159 --> 00:04:31.264
And this is one of the things I
love about.net is their investment

74
00:04:31.264 --> 00:04:35.460
in the tooling and it really makes APIs
discoverable, makes it very easy to use.

75
00:04:35.460 --> 00:04:40.411
It's also helpful that Microsoft really,
really is stringent and about documenting

76
00:04:40.411 --> 00:04:45.242
the behaviors of these methods, which is
really cool at all, which is really cool.

77
00:04:45.242 --> 00:04:47.069
So like declaring a variable,

78
00:04:47.069 --> 00:04:50.735
we can set the value of this return
type because this is an int.

79
00:04:50.735 --> 00:04:56.504
We can set this to a int,
call it C equals.

80
00:04:56.504 --> 00:05:01.774
And then we can say that
Console.WriteLine, we can say write C.

81
00:05:01.774 --> 00:05:06.423
And we're good to go dent that and
if we run it,

82
00:05:06.423 --> 00:05:09.771
you'll see that it will not run.

83
00:05:09.771 --> 00:05:17.007
You will see that it indeed done that run.

84
00:05:17.007 --> 00:05:19.994
You'll see that it does print
the three as we expect.

85
00:05:19.994 --> 00:05:26.636
So let's see,
what else have we got for methods?

86
00:05:26.636 --> 00:05:32.859
A couple of different ways
of declaring parameters,

87
00:05:32.859 --> 00:05:36.740
which are useful to know for now.

88
00:05:36.740 --> 00:05:40.793
You can assign default values
to parameters, so for instance,

89
00:05:40.793 --> 00:05:45.072
if you wanted to have a parameter
automatically be assigned to 5 why

90
00:05:45.072 --> 00:05:47.788
you would do that in this particular case.

91
00:05:47.788 --> 00:05:50.128
I'm probably not gonna
write code like this but

92
00:05:50.128 --> 00:05:54.002
if you wanted to default value on this
parameter, you can absolutely do that.

93
00:05:54.002 --> 00:05:57.824
It's typically gonna be a value parameter.

94
00:05:57.824 --> 00:06:00.355
A value parameter is gonna
be allow you to do this,

95
00:06:00.355 --> 00:06:02.115
strings will allow you to do this.

96
00:06:02.115 --> 00:06:06.513
But if you have something that's like
a instance of a class, a reference type,

97
00:06:06.513 --> 00:06:11.245
it's typically not gonna allow you to
just assign it to a random instance.

98
00:06:11.245 --> 00:06:14.188
It's not gonna allow that, but
you can assign default values, and

99
00:06:14.188 --> 00:06:16.315
I do wanna kind of point
out what that looks like.

100
00:06:18.125 --> 00:06:21.919
If you call it, you can actually call
add numbers then with just one argument.

101
00:06:21.919 --> 00:06:26.180
And if you hover over, you can see that
it knows that it's calling int a b5, but

102
00:06:26.180 --> 00:06:30.012
it'll show you, hey, we didn't have
to pass in the second argument.

103
00:06:30.012 --> 00:06:33.502
If you try to move this over here,
compiler will give you an error saying

104
00:06:33.502 --> 00:06:37.823
default values, the optional parameters
must appear after the required parameters.

105
00:06:37.823 --> 00:06:41.499
So a little bit of a restriction there.

106
00:06:41.499 --> 00:06:47.085
As well as you can choose if you

107
00:06:47.085 --> 00:06:54.462
want to take in a series of parameters.

108
00:06:54.462 --> 00:06:58.605
So in this case, you can tell it,
you can take in any number of integers.

109
00:06:58.605 --> 00:07:02.420
So we could say add numbers one, and
you can see, when we hover over it,

110
00:07:02.420 --> 00:07:04.146
it's calling the correct one.

111
00:07:04.146 --> 00:07:08.722
But we can add 2,3, 4, we can have all.

112
00:07:08.722 --> 00:07:13.881
We can pretty much with this params and
followed by an array.

113
00:07:13.881 --> 00:07:16.944
This is how you declare an array,
which we'll talk about in a little bit.

114
00:07:16.944 --> 00:07:19.897
This allows you to have
a variable number of parameters.

115
00:07:19.897 --> 00:07:24.813
Params, you can have other
parameters in front, for

116
00:07:24.813 --> 00:07:30.066
instance, but
the params declared must come at the end.

117
00:07:30.066 --> 00:07:31.433
Yes, Mark?

118
00:07:31.433 --> 00:07:35.220
&gt;&gt; Mark: Does every method have
to be inside of a class or

119
00:07:35.220 --> 00:07:39.502
can you have a generic method
that is kind of global?

120
00:07:39.502 --> 00:07:42.247
&gt;&gt; Spencer Schneidenbach: Not quite most
the time you're gonna declare methods

121
00:07:42.247 --> 00:07:46.041
inside of classes, but you can declare
what's called a local function.

122
00:07:46.041 --> 00:07:49.309
This is a relatively new feature,
and I do use it quite a bit,

123
00:07:49.309 --> 00:07:53.039
which is that you can declare a function
now inside of a block of code.

124
00:07:53.039 --> 00:07:57.860
So you could have your add numbers here,
and

125
00:07:57.860 --> 00:08:02.956
then have int a, int b- and
then return zero.

126
00:08:02.956 --> 00:08:06.990
You can declare them in line
inside of the block of code.

127
00:08:06.990 --> 00:08:08.328
So that's the thing that you can do.

128
00:08:08.328 --> 00:08:12.707
Most of the time, I'm declaring
them in the context of a class.

129
00:08:12.707 --> 00:08:13.638
Really good question.

130
00:08:18.677 --> 00:08:22.961
&gt;&gt; Student 1: I feel like I'm not quite
understanding the purpose of params so

131
00:08:22.961 --> 00:08:25.034
that's for like an optional.

132
00:08:25.034 --> 00:08:29.244
&gt;&gt; Spencer Schneidenbach: Purpose of
params is really to give youu a 0 to n or

133
00:08:29.244 --> 00:08:34.383
any really any upper bound number
of parameters that you can

134
00:08:34.383 --> 00:08:41.199
call add numbers and then not call it with
any entity with any arguments at all.

135
00:08:41.199 --> 00:08:44.222
It's just basically asking for
a list of integers.

136
00:08:44.222 --> 00:08:47.492
You can give it 1, and
here it's still just gonna give you.

137
00:08:47.492 --> 00:08:50.883
It's gonna be an array this,
when it's called,

138
00:08:50.883 --> 00:08:53.640
this is gonna be an array of one integer.

139
00:08:53.640 --> 00:08:59.887
And then when you do 2 and 3, it will be
an array, which is a set of data, right?

140
00:08:59.887 --> 00:09:01.965
Of three integers in that case.

141
00:09:01.965 --> 00:09:06.427
So params just allows you to kind
of have an infinite number of

142
00:09:06.427 --> 00:09:08.184
parameters as it were.

143
00:09:08.184 --> 00:09:10.235
So good question.

144
00:09:10.235 --> 00:09:13.050
&gt;&gt; Student 1: But it needs to come at
the end because then they're optional.

145
00:09:13.050 --> 00:09:17.236
&gt;&gt; Spencer Schneidenbach: Yeah, well, it
needs to come at the end very similar to

146
00:09:17.236 --> 00:09:22.696
optional parameters because you could
call any number of params here,

147
00:09:22.696 --> 00:09:27.348
but if you try to declare it with
like a string name at the end.

148
00:09:27.348 --> 00:09:30.769
It's gonna complain and say a params
parameter must be the last parameter.

149
00:09:30.769 --> 00:09:32.177
So it's a compiler rule, right?

150
00:09:32.177 --> 00:09:35.652
It's to kind of protect you from shooting
yourself in the foot as they say.

151
00:09:35.652 --> 00:09:38.962
Good question.

152
00:09:38.962 --> 00:09:41.273
So we've talked about
value returning methods,

153
00:09:41.273 --> 00:09:45.245
which are things that return a value, but
sometimes methods just do things, right?

154
00:09:45.245 --> 00:09:50.025
Sometimes they just process or
maybe they'll print some data.

155
00:09:50.025 --> 00:09:51.725
So there are what I like to call, and

156
00:09:51.725 --> 00:09:55.999
I don't know that there's common parlance
around this, but a avoid returning method.

157
00:09:55.999 --> 00:10:00.010
I'll talk about why I call
it that here shortly but

158
00:10:00.010 --> 00:10:04.785
essentially, a method with
a void type as its return type,

159
00:10:04.785 --> 00:10:09.963
which basically essentially says,
I don't return anything.

160
00:10:09.963 --> 00:10:11.683
I just do something, right?

161
00:10:11.683 --> 00:10:15.588
So this isn't something that you
can get a value out of, right?

162
00:10:15.588 --> 00:10:22.059
So if you go up here and you say and you
declare var message, equals print message.

163
00:10:22.059 --> 00:10:23.353
It's gonna complain at you and

164
00:10:23.353 --> 00:10:26.103
say that you can't assign void
to an implicitly typed variable.

165
00:10:26.103 --> 00:10:28.233
You can't assign void at all.

166
00:10:28.233 --> 00:10:32.793
So this essentially just is a method that
does not have a return value, right?

167
00:10:32.793 --> 00:10:37.783
It just does stuff which are extremely
useful for lots of reasons.

168
00:10:37.783 --> 00:10:42.205
Most of the time, I'm declaring some
kind of value, returning function and

169
00:10:42.205 --> 00:10:46.831
then my void returning function is gonna
be doing some kind of processing of all of

170
00:10:46.831 --> 00:10:48.886
those different other functions.

171
00:10:52.709 --> 00:10:56.330
&gt;&gt; Spencer Schneidenbach: They otherwise
share the same properties as functions

172
00:10:56.330 --> 00:10:57.751
that return a value.

173
00:10:57.751 --> 00:11:02.197
They have modifiers, the only differences
is instead of a return type, you put void.

174
00:11:03.337 --> 00:11:06.017
Return keyword is not required here.

175
00:11:06.017 --> 00:11:10.014
You need to be able to exit out of this so
you can see that it's still,

176
00:11:10.014 --> 00:11:12.120
it's complaining about this, but

177
00:11:12.120 --> 00:11:16.845
now it's gonna be complaining that there's
no return value in all code paths.

178
00:11:16.845 --> 00:11:21.157
So that is that.

179
00:11:21.157 --> 00:11:26.289
So in methods that return values,
the return statement is required.

180
00:11:26.289 --> 00:11:27.186
You can return a statement.

181
00:11:27.186 --> 00:11:30.429
You could actually also throw an
exception, but we'll get to that when we

182
00:11:30.429 --> 00:11:33.010
talk about exception handling and
throwing exceptions.

183
00:11:33.010 --> 00:11:35.654
Last thing I will mention about values or

184
00:11:35.654 --> 00:11:39.245
functions that return or
methods that return values.

185
00:11:39.245 --> 00:11:44.677
So we can declare multiple return
statements with branching logic depending,

186
00:11:44.677 --> 00:11:50.283
and we'll talk about the different kinds
of branching logic as we get further in.

187
00:11:50.283 --> 00:11:56.003
But if you declare a method called, say,
static so that anything can use it.

188
00:11:56.003 --> 00:12:01.637
bool IsEven, an int number
you can have branching logic.

189
00:12:01.637 --> 00:12:07.187
So I'm gonna show you a little
bit of arithmetic operators.

190
00:12:07.187 --> 00:12:10.698
So this one's called modulus and
if you're a developer,

191
00:12:10.698 --> 00:12:16.187
this will look very familiar, but it's
basically the remainder after you divide.

192
00:12:16.187 --> 00:12:21.397
So if number modulus 2=0.

193
00:12:21.397 --> 00:12:24.027
So if the remainder is 0,
it's an even number.

194
00:12:24.027 --> 00:12:25.683
So you would return true, and

195
00:12:25.683 --> 00:12:30.200
you notice that the method is complaining
that not all code paths return a value.

196
00:12:30.200 --> 00:12:34.610
So because of that, because the it could
exit this method and still not have

197
00:12:34.610 --> 00:12:39.301
a return value, we do need to return
false here, which is a good thing that's.

198
00:12:39.301 --> 00:12:42.121
It's one of the things that I love
about somebody asked if C sharp

199
00:12:42.121 --> 00:12:43.018
is strictly typed.

200
00:12:43.018 --> 00:12:48.455
I love the fact that it has you
follow a very strict set of rules.

201
00:12:48.455 --> 00:12:52.061
And this is one of those set of rules that
just prevent, as I like to say, foot guns.

202
00:12:52.061 --> 00:12:57.342
It's not like that in the most
basic form of JavaScript,

203
00:12:57.342 --> 00:13:01.090
but it is certainly like that in C Sharp.

204
00:13:01.090 --> 00:13:03.095
Any questions about
methods before we move on?

205
00:13:06.310 --> 00:13:10.591
&gt;&gt; Student 1: Just real quick, is
the standard within C-Sharp to use double

206
00:13:10.591 --> 00:13:13.274
equal signs instead of triple equals?

207
00:13:13.274 --> 00:13:15.068
&gt;&gt; Spencer Schneidenbach: Good question.

208
00:13:15.068 --> 00:13:19.032
There is no triple equals
inside of C-Sharp.

209
00:13:19.032 --> 00:13:22.961
So double equals is one of those,
let's say what I say in

210
00:13:22.961 --> 00:13:27.232
the JavaScript ecosystem is kind
of one of those dirty word.

211
00:13:27.232 --> 00:13:31.794
[LAUGH] One of those things that you tend
not to use, but there's no triple equals.

212
00:13:31.794 --> 00:13:36.472
There's no type coercion,
as it were that it doesn't have

213
00:13:36.472 --> 00:13:41.627
the same semantics as it doesn't
JavaScript, great question.

214
00:13:41.627 --> 00:13:43.746
So if you tried triple equals here, so

215
00:13:43.746 --> 00:13:48.516
it doesn't do any sneaky type conversion
under the hood, there are some languages,

216
00:13:48.516 --> 00:13:52.044
VB.NET, comes to mind that you
can turn off all of its safety.

217
00:13:52.044 --> 00:13:54.921
You can turn off all of
its language safety and

218
00:13:54.921 --> 00:13:58.414
have it coerce types when
you're doing comparisons.

219
00:13:58.414 --> 00:13:59.463
That's not a thing in C sharp, though.

220
00:13:59.463 --> 00:14:05.074
&gt;&gt; Mark: The static mean that you can use
the method without initializing the class.

221
00:14:05.074 --> 00:14:05.921
&gt;&gt; Spencer Schneidenbach: That is correct.

222
00:14:05.921 --> 00:14:06.949
That's what static is for.

223
00:14:06.949 --> 00:14:11.748
So static is really just a is basically
a helper method that doesn't rely on

224
00:14:11.748 --> 00:14:16.635
any other things, any other variables
inside of your class if you've got.

225
00:14:16.635 --> 00:14:19.323
And we'll talk about this
when we talk about classes.

226
00:14:19.323 --> 00:14:22.886
We'll talk about instances of types and
objects.

227
00:14:22.886 --> 00:14:27.795
When we get into that, it will kind of
come together more but essentially static

228
00:14:27.795 --> 00:14:32.280
just means that you can access it
without having an instance of the type.

229
00:14:32.280 --> 00:14:36.751
So you if you declared this math
class as something that you

230
00:14:36.751 --> 00:14:41.326
can just instantiate, so
you could do var math = new Math.

231
00:14:41.326 --> 00:14:46.783
And this is getting way ahead, so
we will cover this in more detail.

232
00:14:46.783 --> 00:14:51.014
But you don't have to have an instance
of this class available in order to call

233
00:14:51.014 --> 00:14:52.773
the AddNumbers function.

234
00:14:52.773 --> 00:14:55.869
That's what it's intended to be,
kind of utility functions.

235
00:14:58.537 --> 00:15:00.650
&gt;&gt; Spencer Schneidenbach: Yes.
&gt;&gt; Student 1: You mentioned earlier

236
00:15:00.650 --> 00:15:04.498
that void only doesn't
necessarily need a return.

237
00:15:04.498 --> 00:15:09.342
So I was just trying to think through
a case where those type of functions would

238
00:15:09.342 --> 00:15:09.948
be used.

239
00:15:09.948 --> 00:15:15.420
Would that also be used in creating like
utility and helper functions as well?

240
00:15:15.420 --> 00:15:17.168
&gt;&gt; Spencer Schneidenbach: Yeah, it could.

241
00:15:17.168 --> 00:15:18.729
So if you wanted to, for

242
00:15:18.729 --> 00:15:24.041
instance if you wanted to print a certain
message to a console in a certain shape or

243
00:15:24.041 --> 00:15:27.416
log something there,
you had a utility function.

244
00:15:27.416 --> 00:15:30.862
Let's say that you had a message that
you wanted to write to a database,

245
00:15:30.862 --> 00:15:33.862
print a console, and
also log to some kind of logging system.

246
00:15:33.862 --> 00:15:36.541
You might have a void returning method or
a void method or

247
00:15:36.541 --> 00:15:39.562
just a straight method that does
all three of those things, but

248
00:15:39.562 --> 00:15:43.277
doesn't necessarily return a value
because you don't need to in that case.

249
00:15:43.277 --> 00:15:45.560
Does that make sense?

250
00:15:45.560 --> 00:15:46.402
Good question.

