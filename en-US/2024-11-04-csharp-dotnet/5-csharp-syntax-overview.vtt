WEBVTT

1
00:00:00.000 --> 00:00:03.438
&gt;&gt; Spencer Schneidenbach: So let's talk
about CSharp Syntax just a little bit.

2
00:00:03.438 --> 00:00:05.171
We're gonna touch on the very basics,

3
00:00:05.171 --> 00:00:07.594
just a couple of things that
we need to know as we get in.

4
00:00:07.594 --> 00:00:12.585
First of all, because it's a C-derived
language, it loves its curly braces and

5
00:00:12.585 --> 00:00:14.185
it loves its semicolons.

6
00:00:14.185 --> 00:00:17.524
I know in JavaScript,
semicolons are technically optional,

7
00:00:17.524 --> 00:00:20.746
I like semicolons and
I like that C-sharp makes me use them.

8
00:00:20.746 --> 00:00:25.525
So all of these, well, let's take
a look at this particular program here.

9
00:00:25.525 --> 00:00:28.539
Starting at the top this
is a class declaration.

10
00:00:28.539 --> 00:00:31.779
Again, as we get into the
further into the course,

11
00:00:31.779 --> 00:00:33.867
we will talk a lot about classes and

12
00:00:33.867 --> 00:00:38.559
we'll talk about their place in the .net
kinda world, in the Csharp world.

13
00:00:38.559 --> 00:00:42.896
And you notice that this class
is denoted by curly braces here.

14
00:00:42.896 --> 00:00:47.168
So these curly braces denote
that this is a block of code.

15
00:00:47.168 --> 00:00:51.961
So this is all of the stuff
that's in internal class program.

16
00:00:51.961 --> 00:00:55.953
If we were to say, for example, copy and
paste this method, it's gonna complain and

17
00:00:55.953 --> 00:00:59.509
hey, there's already a method named
main that has the, these arguments.

18
00:00:59.509 --> 00:01:02.357
Again, we'll get into method
arguments a little bit later.

19
00:01:02.357 --> 00:01:06.205
But just know the main thing is, is that
curly braces are everywhere in Csharp.

20
00:01:06.205 --> 00:01:09.394
And I like curly braces I
like the explicit kind of,

21
00:01:09.394 --> 00:01:13.927
this is the block of code that we
should execute based on this statement.

22
00:01:13.927 --> 00:01:15.937
Of course,
we have to talk about semicolons.

23
00:01:15.937 --> 00:01:19.230
Semicolons are denote
the end of all of the lines

24
00:01:19.230 --> 00:01:23.518
that have statements on them that,
frankly, require them.

25
00:01:23.518 --> 00:01:28.103
So if you do exclude a semi colon, for
instance, your IDE will happily tell you

26
00:01:28.103 --> 00:01:31.313
with a little squiggly that,
hey, this is expected.

27
00:01:31.313 --> 00:01:33.161
So we're actually gonna look here and

28
00:01:33.161 --> 00:01:37.261
we'll see that if you if there's more to
this syntax error, that Visual Studio code

29
00:01:37.261 --> 00:01:40.397
will happily report that to you,
and so will the .net tooling.

30
00:01:40.397 --> 00:01:45.418
If I go ahead and command shift tilde and
try dotnet run, you'll

31
00:01:45.418 --> 00:01:51.697
see that the same errors are outputted
here right here semi-colon expected.

32
00:01:51.697 --> 00:01:54.490
So a lot of statements
have to end in semicolon.

33
00:01:54.490 --> 00:01:57.562
Things like method declarations
they don't, program they don't.

34
00:01:57.562 --> 00:01:58.430
That's just going to confuse it.

35
00:01:58.430 --> 00:02:02.781
But the stuff inside the Blocks
that's actually doing the work,

36
00:02:02.781 --> 00:02:04.532
we need some semicolons.

37
00:02:04.532 --> 00:02:09.327
Worth noting, you can also view
problems here inside of the IDE.

38
00:02:09.327 --> 00:02:12.567
I will say that there have been
a couple of times as I've gone in my

39
00:02:12.567 --> 00:02:16.110
Visual Studio Code journey that if
the problem doesn't show up here,

40
00:02:16.110 --> 00:02:19.134
a restart of Visual Studio Code
usually kicks it into gear.

41
00:02:19.134 --> 00:02:20.424
Worth noting.

42
00:02:20.424 --> 00:02:25.121
&gt;&gt; Student 1: Why does internal
not have to be public or private?

43
00:02:25.121 --> 00:02:26.264
&gt;&gt; Spencer Schneidenbach: That
is a great question.

44
00:02:26.264 --> 00:02:29.676
And we will talk about accessibility
modifiers as we get into the course,

45
00:02:29.676 --> 00:02:31.446
especially as we talk about classes.

46
00:02:31.446 --> 00:02:34.382
It's just the I'm not sure
why it has to be internal.

47
00:02:34.382 --> 00:02:37.873
I assume that private is too private,
as it were,

48
00:02:37.873 --> 00:02:43.707
elements defined in a name space cannot be
explicitly declared as private or okay.

49
00:02:43.707 --> 00:02:46.431
I'll take its word for
it I've honestly never tried that.

50
00:02:46.431 --> 00:02:51.065
I think that this is the minimum amount of
visibility required for .net to actually

51
00:02:51.065 --> 00:02:54.986
run the program, but we will talk
about private internal protected.

52
00:02:54.986 --> 00:02:58.874
We'll talk about all those accessibility
keywords as we talk about specifically

53
00:02:58.874 --> 00:03:02.491
classes more, because those become
really important to talk about there.

54
00:03:02.491 --> 00:03:06.416
We're gonna talk about
kind of the styling.

55
00:03:06.416 --> 00:03:08.816
Let's say,
I guess values that C sharp holds,

56
00:03:08.816 --> 00:03:12.237
you can absolutely declare your
methods like this, if you prefer,

57
00:03:12.237 --> 00:03:14.937
you could even I don't think
you can lowercase main,

58
00:03:14.937 --> 00:03:18.858
because I think it will complain that
it says it doesn't have an entry point.

59
00:03:18.858 --> 00:03:21.955
I've never tried so, let's see.

60
00:03:21.955 --> 00:03:26.482
Dotnet run yeah, it doesn't contain a
static main method, but you'll see things.

61
00:03:26.482 --> 00:03:31.140
We will talk about kind of the,
way things are named and typed.

62
00:03:31.140 --> 00:03:32.943
Microsoft has a specific style guide.

63
00:03:32.943 --> 00:03:37.165
If you don't like this on a separate line,
you absolutely don't have to do that.

64
00:03:37.165 --> 00:03:42.185
And in fact, you can configure most of
your IDEs to avoid that if you prefer,

65
00:03:42.185 --> 00:03:47.288
it's one of those stylistic decisions
that's just personal and private,

66
00:03:47.288 --> 00:03:51.931
I prefer the C sharp way, but or
whatever ecosystem I'm working in.

67
00:03:51.931 --> 00:03:56.269
But you do, you
&gt;&gt; Spencer Schneidenbach: I do wanna

68
00:03:56.269 --> 00:03:59.806
mention that while the language
is not white space sensitive.

69
00:03:59.806 --> 00:04:04.131
This is a perfectly valid
program that will run, nope,

70
00:04:04.131 --> 00:04:06.439
keeps doing that dotnet run.

71
00:04:06.439 --> 00:04:11.794
Perfectly valid program white
space is encouraged, useful.

72
00:04:11.794 --> 00:04:14.564
White space is encouraged,
just for readability purposes,

73
00:04:14.564 --> 00:04:18.361
like any other language, but it is not
strictly speaking, white space sensitive.

74
00:04:22.501 --> 00:04:25.936
&gt;&gt; Spencer Schneidenbach: Some other
things that I wanted to mention.

75
00:04:25.936 --> 00:04:27.652
This is a single line comment.

76
00:04:27.652 --> 00:04:32.892
So this is basically a way of commenting
out, what we call commenting out code.

77
00:04:32.892 --> 00:04:35.830
So this code will not be run or
interpreted by the compiler.

78
00:04:35.830 --> 00:04:40.042
It's useful for leaving notes, especially
in particularly tricky pieces of code.

79
00:04:40.042 --> 00:04:45.671
There are multi-line comments as well,
like any good C derived language.

80
00:04:45.671 --> 00:04:50.829
It is /asterisk, asterisk/.

81
00:04:50.829 --> 00:04:53.503
You can see, so you can have
comments on multiple lines as well.

82
00:04:56.562 --> 00:05:01.118
&gt;&gt; Spencer Schneidenbach: So we went
over a few of the common syntax errors.

83
00:05:01.118 --> 00:05:03.822
It will complain, of course,
if you don't have semi colons,

84
00:05:03.822 --> 00:05:05.976
you see that I don't have
this unclosed comment.

85
00:05:05.976 --> 00:05:09.107
So now the IDE is hey,
where are my other curly braces?

86
00:05:09.107 --> 00:05:12.226
It will tell you if you have
a an unmatched curly brace when you're

87
00:05:12.226 --> 00:05:15.688
especially when you're refactoring
those big nested statements, and

88
00:05:15.688 --> 00:05:18.407
you have a lot of curly braces there,
and all of a sudden,

89
00:05:18.407 --> 00:05:20.357
you're missing one very frustrating.

90
00:05:20.357 --> 00:05:24.047
But that's a particular
thing that's a common one,

91
00:05:24.047 --> 00:05:26.510
especially among new developers.

92
00:05:26.510 --> 00:05:29.740
It's worth mentioning as
well that case does matter.

93
00:05:29.740 --> 00:05:32.904
It is a case sensitive, and
I think most languages are case sensitive.

94
00:05:32.904 --> 00:05:34.853
And fun fact, vb.net, is not,

95
00:05:34.853 --> 00:05:38.970
and it is a point of frustration in
many ways as a as a C sharp developer.

96
00:05:38.970 --> 00:05:42.905
I really don't know how that,
I don't know why that is, but vb.net,

97
00:05:42.905 --> 00:05:44.098
not case sensitive.

98
00:05:44.098 --> 00:05:46.994
Very strange, but you can't write Console in

99
00:05:46.994 --> 00:05:51.622
lowercase can't write Console in
lowercase because it will complain.

100
00:05:51.622 --> 00:05:57.882
Boom but you can,
it also knows the c sharp dev kit is intelligent

101
00:05:57.882 --> 00:06:04.775
enough to be able to kind of suggest
sometimes some fixes for that.

102
00:06:04.775 --> 00:06:07.877
Some common ones, next, we will
talk about variable declaration and

103
00:06:07.877 --> 00:06:11.361
kinda talk about all the little pieces,
one little piece at a time as they say.

104
00:06:11.361 --> 00:06:17.564
&gt;&gt; Student 1: There was somebody asking,
is there a MDN like reference for C sharp?

105
00:06:17.564 --> 00:06:20.063
Something that's easy to like look up?

106
00:06:20.063 --> 00:06:23.247
&gt;&gt; Spencer Schneidenbach: Yes,
I would say that the Microsoft Docs,

107
00:06:23.247 --> 00:06:26.874
I'm just gonna
Google Microsoft Docs C Sharp and

108
00:06:26.874 --> 00:06:32.712
I'm gonna just open these up and just say
that I think that their documentation

109
00:06:32.712 --> 00:06:37.597
is probably among the best among
their peers, Google, Amazon.

110
00:06:37.597 --> 00:06:39.513
I think their
documentation is super solid.

111
00:06:39.513 --> 00:06:41.736
A lot of it contributed by the community.

112
00:06:41.736 --> 00:06:43.514
A lot of this documentation
was written by the community.

113
00:06:43.514 --> 00:06:47.563
They also employ people to just sit and
write docs all day that's all they do.

114
00:06:47.563 --> 00:06:50.687
And so
absolutely this is learn.microsoft.com.

115
00:06:50.687 --> 00:06:53.824
I'm used to docs.microsoft.com as well.

116
00:06:53.824 --> 00:06:58.114
But yeah,
there's a huge swath of documentation and

117
00:06:58.114 --> 00:07:03.278
will go into way more detail than
I could in a course like this.

118
00:07:03.278 --> 00:07:06.867
That said there are some things
where I'm I'll mention it and

119
00:07:06.867 --> 00:07:11.232
then I'll mention the feature and
then I'll link back to a Microsoft doc.

120
00:07:11.232 --> 00:07:14.734
Like, you really should read these because
their docs are supremely good again

121
00:07:14.734 --> 00:07:16.889
some of the best in the industry,
in my opinion.

