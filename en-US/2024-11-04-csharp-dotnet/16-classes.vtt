WEBVTT

1
00:00:00.072 --> 00:00:02.657
&gt;&gt; Spencer Schneidenbach: All right,
now let's move on to classes.

2
00:00:02.657 --> 00:00:06.562
This is the most exciting part, I think.

3
00:00:06.562 --> 00:00:08.665
And there's a lot to cover.

4
00:00:08.665 --> 00:00:11.738
So let's just get right into it.

5
00:00:11.738 --> 00:00:13.855
We've already kind of
alluded to what a class is.

6
00:00:13.855 --> 00:00:17.949
A class is,
just like this is defined here.

7
00:00:17.949 --> 00:00:23.969
It's a basically a thing, and a definition
for something that can exist, right?

8
00:00:23.969 --> 00:00:27.389
This thing is a person class and
it can, and

9
00:00:27.389 --> 00:00:31.674
a person can have a name and
it can have an age, right?

10
00:00:31.674 --> 00:00:36.539
So they're a fundamental building block
of object-oriented programming and

11
00:00:36.539 --> 00:00:40.177
what you can do is you can
describe things in the real world.

12
00:00:40.177 --> 00:00:44.288
You can describe their structure, and
you can describe their behaviors.

13
00:00:44.288 --> 00:00:47.762
This is a object-oriented
pillar of abstraction, right?

14
00:00:47.762 --> 00:00:51.983
These things have meaning in our systems,
even though a Spencer record may

15
00:00:51.983 --> 00:00:56.084
exist in a database and probably
exists in lots of different databases.

16
00:00:56.084 --> 00:00:59.167
That thing has meaning,
even though it's not me.

17
00:00:59.167 --> 00:01:02.053
That's what classes
are meant to represent,

18
00:01:02.053 --> 00:01:04.941
as things in the real
world that have meaning.

19
00:01:04.941 --> 00:01:10.651
So a class is pretty much defined same
way as in a very similar way as a method,

20
00:01:10.651 --> 00:01:16.186
but they're obviously very different
in that there's an accessibility

21
00:01:16.186 --> 00:01:21.290
modifier followed by the class
keywords called the class keyword.

22
00:01:21.290 --> 00:01:23.511
And then the name of the class,

23
00:01:23.511 --> 00:01:27.703
I should mention that classes
are Pascal cased in C Sharp.

24
00:01:27.703 --> 00:01:32.751
And I think that's pretty well true
in JavaScript, as well as that,

25
00:01:32.751 --> 00:01:37.727
there tend to be Pascal case,
especially in the TypeScript world.

26
00:01:37.727 --> 00:01:40.802
So classes can contain
all kinds of things.

27
00:01:40.802 --> 00:01:43.127
I wanna look at fields real quick.

28
00:01:43.127 --> 00:01:46.207
So this is what's referred
to as a property.

29
00:01:46.207 --> 00:01:47.455
And we'll get to this syntax.

30
00:01:47.455 --> 00:01:52.776
It looks a little silly but
we'll get to it here in a second.

31
00:01:52.776 --> 00:02:00.964
Let's instead declare this person
as using a what's called a field,

32
00:02:00.964 --> 00:02:05.975
and a field is just
an object on this class.

33
00:02:05.975 --> 00:02:08.463
It belongs to this class.

34
00:02:08.463 --> 00:02:12.922
So fields are very common to use,
but not necessarily common to use

35
00:02:12.922 --> 00:02:17.071
directly on classes that kind
of represent a data structure.

36
00:02:17.071 --> 00:02:21.312
And you'll see that when
we talk about properties.

37
00:02:21.312 --> 00:02:27.991
But you can see that using this,
which is called dot notation,

38
00:02:27.991 --> 00:02:33.284
I can take in a person that
has a specific name, and

39
00:02:33.284 --> 00:02:39.335
I can access that name property,
Console.writeLine,

40
00:02:39.335 --> 00:02:46.036
and I can use dot notation to get
into that and access that name.

41
00:02:46.036 --> 00:02:49.929
And you can see, if we hover over it, it
says it's a field on the person class, and

42
00:02:49.929 --> 00:02:52.143
it's called name, and it's type of string.

43
00:02:54.796 --> 00:02:55.845
&gt;&gt; Spencer Schneidenbach: And
if we run that,

44
00:02:55.845 --> 00:02:58.344
you can see that we can
access that just fine.

45
00:02:58.344 --> 00:03:00.824
Wait a second, what did I do here?

46
00:03:00.824 --> 00:03:02.241
Person console.WriteLine.

47
00:03:05.221 --> 00:03:09.509
&gt;&gt; Spencer Schneidenbach: Let's
try dotnet run.

48
00:03:09.509 --> 00:03:11.926
Okay, here we go, old name.

49
00:03:11.926 --> 00:03:16.803
Which is what I have the value
of my person class set to,

50
00:03:16.803 --> 00:03:21.588
or the name on my person class is set to,
is old value.

51
00:03:21.588 --> 00:03:26.660
So properties are what I would consider to
be a more important and the main focus of

52
00:03:26.660 --> 00:03:31.603
when you're talking about classes,
we should be talking about properties.

53
00:03:31.603 --> 00:03:34.931
Properties are an abstraction over fields,
and

54
00:03:34.931 --> 00:03:40.371
what that means is that that they property
is meant to control access to a field,

55
00:03:40.371 --> 00:03:44.448
because you may not want to
reveal a field to other classes.

56
00:03:44.448 --> 00:03:48.568
And here's basically back in
the olden days of C sharp,

57
00:03:48.568 --> 00:03:52.338
when you declared a class and
declared a property,

58
00:03:52.338 --> 00:03:56.195
you would have to declare a field with,
typically,

59
00:03:56.195 --> 00:04:01.302
fields that are private,
AKA accessible only by this person class.

60
00:04:01.302 --> 00:04:03.768
You can't do person_name,

61
00:04:03.768 --> 00:04:09.398
it will complain that is inaccessible
due to its protection level.

62
00:04:09.398 --> 00:04:14.009
So you can't access it because
it's private to this person class.

63
00:04:14.009 --> 00:04:18.805
But we can expose it out using
the name property, and we would say,

64
00:04:18.805 --> 00:04:22.745
get return_name,
which would return this value, or

65
00:04:22.745 --> 00:04:27.305
we would set the value of name of
the _name field to this value.

66
00:04:27.305 --> 00:04:29.457
This is the syntax that used to be,

67
00:04:29.457 --> 00:04:33.185
this is what you would use to
declare properties in C sharp.

68
00:04:33.185 --> 00:04:37.214
Luckily the syntax is a lot friendlier and

69
00:04:37.214 --> 00:04:41.355
my main way of declaring
them is like this,

70
00:04:41.355 --> 00:04:49.313
this syntax automatically creates a field
under the hood as well as the property.

71
00:04:49.313 --> 00:04:53.884
And I'd say it's a lot nicer than having
to declare the field separately and

72
00:04:53.884 --> 00:04:56.885
then explicitly set up your getters and
setters,

73
00:04:56.885 --> 00:05:01.601
there's what these referred to as,
&gt;&gt; Spencer Schneidenbach: This

74
00:05:01.601 --> 00:05:04.804
is the more concise way,
and by far the superior,

75
00:05:04.804 --> 00:05:09.469
99% of the time when I'm declaring
properties this is how they look.

76
00:05:09.469 --> 00:05:10.615
They're public.

77
00:05:10.615 --> 00:05:14.798
They're always have a type declared,
and then they always have a name and

78
00:05:14.798 --> 00:05:18.581
then a getter and setter,
which we can modify accessibility for.

79
00:05:18.581 --> 00:05:20.301
And I'll show you what that
looks like here in a second.

80
00:05:20.301 --> 00:05:26.191
So one of the main use cases for
properties is being able to set and

81
00:05:26.191 --> 00:05:29.259
get fields, but only by choice.

82
00:05:29.259 --> 00:05:31.158
Let me demonstrate.

83
00:05:31.158 --> 00:05:36.347
So let's take this example of a person
class that has a name property

84
00:05:36.347 --> 00:05:40.988
that does not have a setter,
as you can see if we try to set it,

85
00:05:40.988 --> 00:05:45.287
the compiler will complain and
say this is read-only.

86
00:05:45.287 --> 00:05:49.074
We can't actually set this property, but
we can only do that in the context of

87
00:05:49.074 --> 00:05:52.703
what's referred to as a constructor,
which we will get to very shortly.

88
00:05:52.703 --> 00:05:59.871
The important thing to know is that
a property can appropriately hide or

89
00:05:59.871 --> 00:06:05.136
specifically disallow getting or
even setting it.

90
00:06:05.136 --> 00:06:09.012
The getters and setters can also
have accessibility modifiers, so

91
00:06:09.012 --> 00:06:10.372
we can say private set.

92
00:06:10.372 --> 00:06:12.533
And you can see that if
you hover over this,

93
00:06:12.533 --> 00:06:16.694
that the compiler still throws an error,
but it throws a slightly different one.

94
00:06:16.694 --> 00:06:20.015
Says, hey, I can't get to this
property because it can only be

95
00:06:20.015 --> 00:06:22.897
set inside of the context of this class,
in this case,

96
00:06:22.897 --> 00:06:26.992
you could set it if you declared a A
method, I would never do this in practice.

97
00:06:26.992 --> 00:06:30.464
I would just open
the setter up as necessary.

98
00:06:30.464 --> 00:06:37.475
This is look looking like very Java like
now, but you could do name = name and

99
00:06:37.475 --> 00:06:43.407
then you'd be able to set the value
of this person objects name.

100
00:06:43.407 --> 00:06:45.656
Because we still have the center open,

101
00:06:45.656 --> 00:06:49.482
it's just not exposed outside of
the context of the person class.

102
00:06:49.482 --> 00:06:54.561
Hopefully, you're getting a sense of kind
of how accessibility modifiers operate.

103
00:06:54.561 --> 00:06:58.481
Public and private are the two ones that
we've kind of mostly gone through now.

104
00:06:58.481 --> 00:07:03.283
Deleting this will instantly convert
it to a public setter by default

105
00:07:03.283 --> 00:07:07.442
because it will follow this
accessibility modifier here.

106
00:07:07.442 --> 00:07:12.701
Consequently, if you take that off,
it's considered a private property and

107
00:07:12.701 --> 00:07:15.737
you will not be able to
access it here as well.

108
00:07:15.737 --> 00:07:21.007
Again, most of the time, I'm using classes
to define real objects in the real world

109
00:07:21.007 --> 00:07:25.909
and I'm usually keeping the getters and
them setters open on certain things,

110
00:07:25.909 --> 00:07:28.831
for objects that represent
real life things.

111
00:07:28.831 --> 00:07:31.445
Lastly, properties can also be get only,
but

112
00:07:31.445 --> 00:07:33.931
also just have some
kind of computed value.

113
00:07:33.931 --> 00:07:36.536
They're called computed properties,
and they're super useful.

114
00:07:36.536 --> 00:07:43.653
So assuming that we have a class
that has a FirstName and a LastName.

115
00:07:43.653 --> 00:07:48.523
We can also have a FullName property
on that class that essentially combines

116
00:07:48.523 --> 00:07:50.664
the FirstName and the LastName.

117
00:07:50.664 --> 00:07:53.866
Or you could even do it like this.

118
00:07:53.866 --> 00:07:56.738
You could say even just LastName +, so

119
00:07:56.738 --> 00:08:02.319
you can concatenate strings with the plus
operator and then say FirstName.

120
00:08:02.319 --> 00:08:03.796
So you can do that as well.

121
00:08:03.796 --> 00:08:04.921
It's called a computed property.

122
00:08:04.921 --> 00:08:08.974
This syntax, this equals and
greater than looks a little funky.

123
00:08:08.974 --> 00:08:12.110
As we get into Lambda functions,

124
00:08:12.110 --> 00:08:17.154
you'll see why that syntax
is existed the way it has.

125
00:08:17.154 --> 00:08:21.237
It's pronounced goes into,
a little spoiler alert.

126
00:08:21.237 --> 00:08:25.076
But that's essentially how you can create
a read only property that allows you to

127
00:08:25.076 --> 00:08:26.261
get data off of that, but

128
00:08:26.261 --> 00:08:29.722
you can combine it in useful ways
that your developers will appreciate.

