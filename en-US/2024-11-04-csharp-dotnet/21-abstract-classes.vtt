WEBVTT

1
00:00:00.044 --> 00:00:02.006
So we talked about virtual.

2
00:00:02.006 --> 00:00:04.145
I wanna talk about abstract classes.

3
00:00:04.145 --> 00:00:09.189
Abstract classes are classes that
are meant to be inherited from and

4
00:00:09.189 --> 00:00:11.851
cannot be instantiated directly.

5
00:00:11.851 --> 00:00:13.550
If I'm modeling this in a very object,

6
00:00:13.550 --> 00:00:16.232
if I'm modeling this particular
business problem, right?

7
00:00:16.232 --> 00:00:19.897
I have employees, some of them are hourly,
some of them are salary.

8
00:00:19.897 --> 00:00:22.657
If I'm modeling that in a specific way and
they're an employee,

9
00:00:22.657 --> 00:00:24.018
they're always gonna be paid.

10
00:00:24.018 --> 00:00:28.479
So I may not want to instantiate
this employee class directly.

11
00:00:28.479 --> 00:00:31.231
So I might declare it as
what's called abstract.

12
00:00:31.231 --> 00:00:34.801
An abstract essentially says,
I cannot inherit, or, sorry,

13
00:00:34.801 --> 00:00:37.654
I cannot instantiate
the employee type directly.

14
00:00:37.654 --> 00:00:42.569
So if I say, var newwww = new Employee,
it's gonna say you can't do that

15
00:00:42.569 --> 00:00:46.232
because you can't create
a type of an abstract class.

16
00:00:46.232 --> 00:00:50.266
An abstract class is meant to define
properties and behaviors but in a way that

17
00:00:50.266 --> 00:00:54.439
says, you need another object to actually
use this in order for it to be useful.

18
00:00:57.434 --> 00:01:00.462
&gt;&gt; Spencer Schneidenbach: So
the implications of abstract classes,

19
00:01:00.462 --> 00:01:04.507
you can also declare what's
called an abstract method.

20
00:01:04.507 --> 00:01:08.949
And an abstract method forces derived
types to implement the behavior on this

21
00:01:08.949 --> 00:01:09.507
method.

22
00:01:09.507 --> 00:01:13.345
So you see that we have
an abstract string class.

23
00:01:13.345 --> 00:01:15.209
You can see at the end,
we put a semicolon.

24
00:01:15.209 --> 00:01:17.544
There is no body on this method.

25
00:01:17.544 --> 00:01:23.361
We are saying that we want inherited
classes to define this behavior

26
00:01:23.361 --> 00:01:30.210
such that we may then choose to override
it in such a way, oops, let's do this.

27
00:01:30.210 --> 00:01:35.073
Override it in such a way as to
make the base class force it to

28
00:01:35.073 --> 00:01:37.368
provide its own behavior.

29
00:01:37.368 --> 00:01:42.122
And if you don't do that, if you choose
not to, declare this as abstract,

30
00:01:42.122 --> 00:01:43.632
don't override this,

31
00:01:43.632 --> 00:01:48.474
the compiler will throw an error, say,
you have to implement this member.

32
00:01:48.474 --> 00:01:53.052
So really important and really useful,
especially as we talk about interfaces.

33
00:01:53.052 --> 00:01:58.153
I'm gonna end this section by saying that
I have spicy takes about inheritance.

34
00:01:58.153 --> 00:02:00.689
I think that lots of developers,
new and old,

35
00:02:00.689 --> 00:02:03.886
tend to overuse inheritance
once they realize what it is.

36
00:02:03.886 --> 00:02:09.165
Most business problems don't
model well in inherited classes.

37
00:02:09.165 --> 00:02:12.415
Specifically, I wanted to point out,
I promised that if I said that I

38
00:02:12.415 --> 00:02:16.014
wrote something that I wouldn't write
in real life, that I would tell you.

39
00:02:16.014 --> 00:02:20.266
I would almost certainly, probably not
write an employee class where it's

40
00:02:20.266 --> 00:02:24.652
an abstract class, and then have the
hourly and the commissioned employees be

41
00:02:24.652 --> 00:02:28.254
inherited from that and
provide different behaviors that way.

42
00:02:28.254 --> 00:02:30.934
This is a design thing,
not a language thing,

43
00:02:30.934 --> 00:02:35.497
just letting you know kind of that I
prefer a very flat inheritance hierarchy.

44
00:02:35.497 --> 00:02:41.392
In fact, organizational hierarchies,
I prefer those to be flat as well.

45
00:02:41.392 --> 00:02:43.122
In real life, if I were doing this,

46
00:02:43.122 --> 00:02:46.195
I wanna tell you about how I would
actually model this problem.

47
00:02:46.195 --> 00:02:49.541
I would probably just have an employee
class and have an enum to say,

48
00:02:49.541 --> 00:02:52.125
some of these are hourly,
some of these are salary,

49
00:02:52.125 --> 00:02:55.374
some of these are salary plus commission,
and so on and so forth.

50
00:02:55.374 --> 00:02:59.080
And then have a class that actually
defines the way that I would calculate

51
00:02:59.080 --> 00:03:00.671
the payment for those things.

52
00:03:00.671 --> 00:03:06.123
This documentation is example of calculate
pay, is obviously gonna be different for

53
00:03:06.123 --> 00:03:09.240
an hourly employee versus
a salaried employee.

54
00:03:09.240 --> 00:03:13.074
Salary is fixed,
an hourly is paid by the hour, right?

55
00:03:13.074 --> 00:03:17.245
So I just wanted to warn you, put out
there my opinion that I think inheritance

56
00:03:17.245 --> 00:03:19.376
can be overused and abused sometimes.

57
00:03:19.376 --> 00:03:20.661
Most of the time,

58
00:03:20.661 --> 00:03:25.635
I find that developers are trying
to inherit from lots of objects, or

59
00:03:25.635 --> 00:03:31.243
really go for inheritance because they
don't like the duplication of code.

60
00:03:31.243 --> 00:03:35.942
So I wanted to point out that there is
the principle of don't repeat yourself.

61
00:03:35.942 --> 00:03:39.627
And developers tend to try
to use inheritance to go so

62
00:03:39.627 --> 00:03:45.264
far as to not repeat a property even once,
whereas I go for the moist principle.

63
00:03:45.264 --> 00:03:47.091
Moderate overlap is sometimes tolerable,

64
00:03:47.091 --> 00:03:50.509
especially if I'm talking about code
that I've copy-pasted a couple of times.

65
00:03:50.509 --> 00:03:52.310
Listen, I'm in it to ship products.

66
00:03:52.310 --> 00:03:54.786
So if I copy-paste my toe code once or
twice,

67
00:03:54.786 --> 00:03:56.948
I'm probably gonna be okay with that.

68
00:03:56.948 --> 00:03:59.020
Any more than that,
I'm probably gonna look, okay,

69
00:03:59.020 --> 00:04:01.697
is there an abstraction that would
prevent me from copy-pasting it?

70
00:04:01.697 --> 00:04:05.811
So inheritance is important, and
I did wanna provide a warning.

71
00:04:05.811 --> 00:04:06.894
Soapbox over.

