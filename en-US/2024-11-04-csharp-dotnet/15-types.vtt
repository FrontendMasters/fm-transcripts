WEBVTT

1
00:00:00.210 --> 00:00:02.170
&gt;&gt; Spencer Schneidenbach: So
let's talk about types.

2
00:00:02.170 --> 00:00:05.362
So I want to talk about
a couple of different,

3
00:00:05.362 --> 00:00:10.160
the types of types that are available
that has value and reference.

4
00:00:11.360 --> 00:00:16.578
The core thing that I kind
of want to emphasize is

5
00:00:16.578 --> 00:00:22.064
the how these things get
passed between methods.

6
00:00:22.064 --> 00:00:25.114
So I'm going to go ahead and
format this nicely.

7
00:00:25.114 --> 00:00:28.134
I'm going to declare this person type.

8
00:00:28.134 --> 00:00:31.044
Don't worry too much about
the syntax right now.

9
00:00:31.044 --> 00:00:35.396
It's just a way of defining a person,
a with a name and an age, and

10
00:00:35.396 --> 00:00:40.333
you can see that we instantiate it
here and that we change the age.

11
00:00:40.333 --> 00:00:44.693
So a value type property that is really
important to understand is that when you

12
00:00:44.693 --> 00:00:48.043
pass in that age,
it's passing in a copy of that value.

13
00:00:48.043 --> 00:00:50.803
It is not passing in
the actual value itself.

14
00:00:50.803 --> 00:00:56.053
So if we check this and we go down, you
can see that 20 is the value of the age.

15
00:00:56.053 --> 00:00:59.770
So if we do console dot write line,
person dot age.

16
00:00:59.770 --> 00:01:02.400
Age has not changed.

17
00:01:02.400 --> 00:01:06.430
Play, we'll run it, and you can see
that person.age has not changed.

18
00:01:06.430 --> 00:01:09.917
And that's because value types,
they're on a, first of all,

19
00:01:09.917 --> 00:01:12.920
they're on a much faster space of memory.

20
00:01:12.920 --> 00:01:16.222
They're collected, they are,
they are deallocated or

21
00:01:16.222 --> 00:01:19.746
removed from memory as soon as
they're removed from scope.

22
00:01:19.746 --> 00:01:22.846
And they're considered to be
on what's on the stack, so

23
00:01:22.846 --> 00:01:24.662
they're a lot faster to access.

24
00:01:24.662 --> 00:01:29.596
Those are the properties of value types.

25
00:01:29.596 --> 00:01:33.285
The most important part to note in this
is that copies of value types are passed

26
00:01:33.285 --> 00:01:34.774
around typically to methods.

27
00:01:34.774 --> 00:01:38.160
You can refer to them by reference.

28
00:01:38.160 --> 00:01:42.269
In most business programming, in most
programming I've done, I've not done that,

29
00:01:42.269 --> 00:01:45.437
but in certain high performance
situations, that can be useful.

30
00:01:45.437 --> 00:01:48.539
The important thing to note is
that value types simply just

31
00:01:48.539 --> 00:01:50.004
are passed around by copy.

32
00:01:50.004 --> 00:01:54.574
So, you see that even though we've
changed this value of age to 10,

33
00:01:54.574 --> 00:01:56.975
it does not affect our person class,

34
00:01:56.975 --> 00:02:01.479
whereas a reference type does not
have that same kind of protection.

35
00:02:01.479 --> 00:02:06.379
So let's take this,
this example, into it, and

36
00:02:06.379 --> 00:02:10.238
use this as our example, boom, boom.

37
00:02:10.238 --> 00:02:13.665
So you can see that we still have
a person, we have old name, and

38
00:02:13.665 --> 00:02:15.746
then we're gonna change their name.

39
00:02:15.746 --> 00:02:18.240
So I'm gonna write that out this,

40
00:02:18.240 --> 00:02:22.283
because it's what we refer to
as an instance of a class.

41
00:02:22.283 --> 00:02:25.847
So this is a person,
this is a real walking person, or

42
00:02:25.847 --> 00:02:28.156
at least a representation of one.

43
00:02:28.156 --> 00:02:29.694
We're gonna change their name, and

44
00:02:29.694 --> 00:02:32.530
what we're gonna do is we're gonna
pass in this person reference.

45
00:02:32.530 --> 00:02:39.450
So a reference type is a variable that
points to a certain location in memory.

46
00:02:39.450 --> 00:02:42.207
It doesn't actually have
an actual copy of the value.

47
00:02:42.207 --> 00:02:46.658
That's mostly important for the purposes
of understanding kind of how reference

48
00:02:46.658 --> 00:02:50.798
types are treated, mainly in terms of
the ability to change values on them.

49
00:02:50.798 --> 00:02:54.578
But you can see that because it's
a reference type and not a value type,

50
00:02:54.578 --> 00:02:57.350
as soon as we change
Person.Names name to New Name,

51
00:02:57.350 --> 00:02:59.559
that's what's printed to the console.

52
00:02:59.559 --> 00:03:02.049
This person is now their
name is now changed, and

53
00:03:02.049 --> 00:03:05.573
that's really the most important piece,
semantic difference, or

54
00:03:05.573 --> 00:03:08.140
day to day difference,
that I want you to absorb.

55
00:03:08.140 --> 00:03:11.718
When we're talking about value
types versus reference types,

56
00:03:11.718 --> 00:03:15.372
it's mainly as they're passed around,
how they're treated.

57
00:03:15.372 --> 00:03:19.038
And reference types are essentially
mutable, they're not passed by value,

58
00:03:19.038 --> 00:03:21.715
they're not made,
we don't make a copy of this person.

59
00:03:21.715 --> 00:03:25.151
The actual person is given
to the change name method.

60
00:03:29.431 --> 00:03:31.238
&gt;&gt; Spencer Schneidenbach: I did
touch on stack versus heap.

61
00:03:31.238 --> 00:03:35.664
Not super necessary to know this in depth
for the purposes of this course, but

62
00:03:35.664 --> 00:03:38.334
it is certainly there if
you wanna refer to it.

63
00:03:38.334 --> 00:03:41.533
The important thing to note is that
reference- Types because they're stored on

64
00:03:41.533 --> 00:03:43.519
the heap and
they are not deallocated right away.

65
00:03:43.519 --> 00:03:48.118
As soon as they leave scope, they
are actually deallocated by the garbage

66
00:03:48.118 --> 00:03:52.507
collector, which is the process that
the CLR uses to clear up memory.

67
00:03:52.507 --> 00:03:57.462
The difference between those things for
the purposes of this course isn't super,

68
00:03:57.462 --> 00:03:58.604
super important.

69
00:03:58.604 --> 00:04:02.137
Just know that value types
are deallocated very quickly,

70
00:04:02.137 --> 00:04:05.826
whereas reference types may
not be deallocated right away.

71
00:04:05.826 --> 00:04:09.683
And that really makes a difference when
you're talking about a large amount of

72
00:04:09.683 --> 00:04:10.686
objects in memory.

73
00:04:10.686 --> 00:04:13.365
Okay, so as long as we're
talking about value types and

74
00:04:13.365 --> 00:04:17.371
reference types, we talked about kind of
default values for value types, right?

75
00:04:17.371 --> 00:04:20.884
So we can actually set using this keyword,

76
00:04:20.884 --> 00:04:25.470
we'll call it a, and
we can say the default type for a and

77
00:04:25.470 --> 00:04:31.147
the default type is basically given
a value type or a reference type.

78
00:04:31.147 --> 00:04:33.661
What is the quote unquote default value.

79
00:04:33.661 --> 00:04:36.480
For a value like int, it's gonna be 0.

80
00:04:36.480 --> 00:04:40.779
For float, it's gonna be 0 Boolean,
it's gonna be false and so on.

81
00:04:40.779 --> 00:04:43.723
But reference types are different
because they have to deal with null.

82
00:04:43.723 --> 00:04:47.548
So this is a really fun part
of the .NET runtime and

83
00:04:47.548 --> 00:04:51.114
a source of frustration for
many developers.

84
00:04:51.114 --> 00:04:56.980
So if you're of if you're a developer and
you've experienced an error like this and

85
00:04:56.980 --> 00:05:01.939
you're in good company because value
reference types can have what's

86
00:05:01.939 --> 00:05:07.163
called be what's called null, and
null is is complete absence of a value.

87
00:05:07.163 --> 00:05:09.839
To the point of if you try to access or

88
00:05:09.839 --> 00:05:15.461
use a reference type that does not have
a value, if we change this to null and

89
00:05:15.461 --> 00:05:19.410
we run this,
we are going to get a runtime error and.

90
00:05:19.410 --> 00:05:23.930
You'll see that the runtime error
is indeed null reference exception,

91
00:05:23.930 --> 00:05:27.043
which I've touched on as
being the most common and

92
00:05:27.043 --> 00:05:31.953
probably the most frustrating for new and
senior developers and .NET alike.

93
00:05:31.953 --> 00:05:34.830
This is not specifically
just a .NET thing.

94
00:05:34.830 --> 00:05:37.933
There's the same thing
happens in JavaScript, right?

95
00:05:37.933 --> 00:05:42.867
When you get the error it's
something that's like you can't make

96
00:05:42.867 --> 00:05:48.167
a function call on an empty object,
it's essentially the same thing.

97
00:05:48.167 --> 00:05:51.710
So nullability is kind of
an important thing to understand and

98
00:05:51.710 --> 00:05:56.410
embrace when you're talking about because
most of the types that you're gonna be

99
00:05:56.410 --> 00:06:00.652
working with in programming are going
to be a reference type of some kind.

100
00:06:00.652 --> 00:06:03.547
So it's important to understand
the implications of null.

101
00:06:03.547 --> 00:06:09.039
Now, recently, Microsoft has added
features to the language and

102
00:06:09.039 --> 00:06:15.426
and to later versions of NET to handle
this more gracefully for new projects.

103
00:06:15.426 --> 00:06:21.019
You can actually turn on what's
called Explicit like nullability and

104
00:06:21.019 --> 00:06:25.388
turn it on,
turn on explicit like nullable handling.

105
00:06:25.388 --> 00:06:30.627
Reference types in most code bases,
especially older ones are gonna

106
00:06:30.627 --> 00:06:35.859
be treated as a person like this is
going to be treated as I can be null or

107
00:06:35.859 --> 00:06:38.861
I cannot be null, it's one of the two.

108
00:06:38.861 --> 00:06:44.470
If you have nullability turned on, you
can, if you have nullability turned on,

109
00:06:44.470 --> 00:06:47.771
you can treat those as
explicitly saying like,

110
00:06:47.771 --> 00:06:52.245
okay, I explicitly want the,
to mark this class as being null.

111
00:06:52.245 --> 00:06:54.986
So let me show you kind
of what that looks like.

112
00:06:54.986 --> 00:07:02.263
So we haven't talked about null, nullable
types, but there are ways to set an int,

113
00:07:02.263 --> 00:07:07.506
for instance, to a null, and
that is a nullableInt = null.

114
00:07:07.506 --> 00:07:11.855
So this question mark basically
says that is a variable that can or

115
00:07:11.855 --> 00:07:13.290
cannot have a value.

116
00:07:13.290 --> 00:07:14.846
What are the implications of that?

117
00:07:14.846 --> 00:07:18.988
Well, nullable is a special class
that has two properties on it.

118
00:07:18.988 --> 00:07:25.242
It has value and it has value and
it has value is a Boolean to say,

119
00:07:25.242 --> 00:07:29.610
does this nullable structure have a value?

120
00:07:29.610 --> 00:07:32.692
And if it does,
then you can access it with value.

121
00:07:32.692 --> 00:07:36.978
And if it doesn't, if you try to access
the value, it will throw a runtime error.

122
00:07:36.978 --> 00:07:42.104
And we can see that here,
nullableInt.value.

123
00:07:42.104 --> 00:07:47.879
You can see that if we run this.

124
00:07:47.879 --> 00:07:51.200
That you see that we get an invalid
operation exception because nullable

125
00:07:51.200 --> 00:07:54.583
object must have a value and you can
see that we've set it to not nullable.

126
00:07:54.583 --> 00:07:57.783
So this has been a feature for
a long time in .NET and

127
00:07:57.783 --> 00:07:59.948
only recently the last few years.

128
00:07:59.948 --> 00:08:01.973
Do they add this feature for

129
00:08:01.973 --> 00:08:05.944
of this nullable feature
to reference types as well.

130
00:08:05.944 --> 00:08:09.704
Such that you can say,
in a method, for instance,

131
00:08:09.704 --> 00:08:14.863
you can say this person might be null,
to which it would turn around and

132
00:08:14.863 --> 00:08:19.860
warn you, hey, you might be dealing
with the null reference here.

133
00:08:19.860 --> 00:08:24.935
So you can ask the little you can
ask the little thing to say, well,

134
00:08:24.935 --> 00:08:30.186
what should i What should I do to
which case, if you're using a brow,

135
00:08:30.186 --> 00:08:34.825
right, an ID, like writer,
it will suggest fixes for you.

136
00:08:34.825 --> 00:08:39.291
Sometimes this there are,
there are fixes to which .NET just does,

137
00:08:39.291 --> 00:08:43.530
wants to warn you, but the IDE
doesn't have a fix for you in line.

138
00:08:43.530 --> 00:08:47.690
So the way to do that is to
check to see if it's null first,

139
00:08:47.690 --> 00:08:49.785
person does not equal null.

140
00:08:49.785 --> 00:08:54.889
And you can see that, put that in some
curly braces and you can see that now we

141
00:08:54.889 --> 00:08:59.837
have person.name, we've safely checked it,
and c sharp's compiler

142
00:08:59.837 --> 00:09:04.805
stops complaining at us What is a use
case for having a nullable integer?

143
00:09:04.805 --> 00:09:08.667
A nullable integer.

144
00:09:08.667 --> 00:09:13.252
Let's say that you're working in
a database, and you're holding

145
00:09:13.252 --> 00:09:17.998
a database of people, and two of
the required fields are first name and

146
00:09:17.998 --> 00:09:22.917
last name, but you don't require age
as a field for creating that user.

147
00:09:22.917 --> 00:09:29.661
You would put the value in that
database as just being null.

148
00:09:29.661 --> 00:09:34.126
But then later down the line, now you
could say, well, I wanna set this age or

149
00:09:34.126 --> 00:09:38.474
date of birth is another field that
can be nullable, so, great question.

150
00:09:41.228 --> 00:09:43.564
&gt;&gt; Spencer Schneidenbach: I
do want to mention boxing and

151
00:09:43.564 --> 00:09:48.518
unboxing only because it's
slightly important just in kind of

152
00:09:48.518 --> 00:09:53.389
understanding how reference types and
value types operate.

153
00:09:53.389 --> 00:09:56.792
And I touched on this earlier, but
if you assign the value of an int,

154
00:09:56.792 --> 00:10:00.735
like this number here to a value that is
typed object, this will be converted to

155
00:10:00.735 --> 00:10:03.814
a value, to a reference type,
it's referred to as boxing.

156
00:10:03.814 --> 00:10:06.537
And boxing has some
unique characteristics,

157
00:10:06.537 --> 00:10:10.043
this thing will now get stored
on the heap and not the stack.

158
00:10:10.043 --> 00:10:15.278
And it's really only important to know
as a thing that happens at the runtime,

159
00:10:15.278 --> 00:10:16.797
at the runtime level.

160
00:10:16.797 --> 00:10:20.960
Most of the time in programming, you're
able to kind of just ignore this and

161
00:10:20.960 --> 00:10:24.669
most of the time, you're not declaring
ints inside of an object and

162
00:10:24.669 --> 00:10:28.637
then unboxing them later, but
essentially, it's converting back and

163
00:10:28.637 --> 00:10:30.809
forth from a value to a reference type.

164
00:10:30.809 --> 00:10:35.507
Again, this is not super important for
most day to day programming, but

165
00:10:35.507 --> 00:10:39.857
it is a thing to know, yes, Mark,
&gt;&gt; Student: Could you get buffer overflow

166
00:10:39.857 --> 00:10:41.803
when using a null Integer?

167
00:10:41.803 --> 00:10:43.651
&gt;&gt; Spencer Schneidenbach: Can you
use a buffer overflow getting if

168
00:10:43.651 --> 00:10:44.773
you use a null integer?

169
00:10:44.773 --> 00:10:49.982
I don't know.

170
00:10:49.982 --> 00:10:51.242
I don't know about a buffer overflow.

171
00:10:51.242 --> 00:10:55.322
But if you're typically, if you're trying
to access the value of a nullable integer

172
00:10:55.322 --> 00:10:58.853
and it is null, then what you'll get
is invalid operation, exception.

173
00:10:58.853 --> 00:11:03.693
And you can see that if you navigate
into the nullable code, you can see

174
00:11:03.693 --> 00:11:08.782
that the value here is if it does not
have a value, then it's going to throw

175
00:11:08.782 --> 00:11:15.443
the invalid operation exception that says
that nullable object must have a value.

176
00:11:15.443 --> 00:11:19.882
&gt;&gt; Spencer Schneidenbach: It's pretty much
the only exception that I know that you're

177
00:11:19.882 --> 00:11:24.942
going to encounter when you're
dealing with a nullable value type.

