WEBVTT

1
00:00:00.140 --> 00:00:02.270
&gt;&gt; Spencer Schneidenbach: Nice little
introduction to records and classes.

2
00:00:02.270 --> 00:00:05.210
Boom, let's move on to inheritance.

3
00:00:05.210 --> 00:00:09.998
This is probably, I'd say, one of the,
besides classes, another really important

4
00:00:09.998 --> 00:00:14.920
kinda thing to understand about
object-oriented languages in C Sharp.

5
00:00:14.920 --> 00:00:20.101
First of all, I've mentioned that
all objects inherit from object.

6
00:00:20.101 --> 00:00:25.747
So if I declare my person class again,
boom, put my name property back,

7
00:00:25.747 --> 00:00:31.117
I can basically inherit from another
object, and that means collect

8
00:00:31.117 --> 00:00:36.987
the properties and behaviors of that
object and put it into my class.

9
00:00:36.987 --> 00:00:40.353
So the syntax to do so
would be colon after this.

10
00:00:40.353 --> 00:00:45.823
Kinda like when you call a constructor and
then you declare the name of the object.

11
00:00:45.823 --> 00:00:48.223
The type of the object,
I should say, the type of the class.

12
00:00:49.353 --> 00:00:50.734
This is a superfluous thing to say,

13
00:00:50.734 --> 00:00:52.673
because person will always
inherit from object.

14
00:00:52.673 --> 00:00:55.763
Object is always in
the inheritance hierarchy.

15
00:00:55.763 --> 00:00:59.073
So inheritance means that objects
can be infinitely inherited.

16
00:00:59.073 --> 00:01:03.184
You could have a monkey that inherits
from animal, that inherits from organism,

17
00:01:03.184 --> 00:01:06.002
that ultimately inherits from object,
for instance.

18
00:01:07.172 --> 00:01:08.602
This is superfluous to say.

19
00:01:08.602 --> 00:01:12.522
But this gets really important
when you're starting to talk about

20
00:01:12.522 --> 00:01:16.652
kind of advanced ways to model real
world things in your application.

21
00:01:17.752 --> 00:01:20.879
Let's take this example for instance.

22
00:01:20.879 --> 00:01:22.249
We're gonna move on to the employees.

23
00:01:22.249 --> 00:01:24.713
And spoiler alert, we're gonna
do a lot of employees in the AS.

24
00:01:24.713 --> 00:01:28.864
There's gonna be a lot
of employees classes and

25
00:01:28.864 --> 00:01:31.783
use of them in the ASP net course.

26
00:01:31.783 --> 00:01:35.894
So I can have what I've defined as my
base employee and what I've wanted to do

27
00:01:35.894 --> 00:01:40.136
is just say, I want an employee and let's
just say that for the sake of argument

28
00:01:40.136 --> 00:01:44.746
that I wanted an employee where I just
wanted that person to be represented.

29
00:01:44.746 --> 00:01:47.954
I don't necessarily intend for
this type to be used directly, but

30
00:01:47.954 --> 00:01:49.498
I just want to have a base thing,

31
00:01:49.498 --> 00:01:53.086
because all employees, they always
have a first name and a last name.

32
00:01:53.086 --> 00:01:54.616
All payroll systems contain that data.

33
00:01:54.616 --> 00:01:57.240
They'll probably contain your social,
your date of birth and

34
00:01:57.240 --> 00:01:58.486
other properties like that.

35
00:01:59.596 --> 00:02:02.123
But you might have additional
behaviors that you

36
00:02:02.123 --> 00:02:04.841
want to apply to something
like an hourly employee.

37
00:02:04.841 --> 00:02:07.668
And so hourly employees are treated
differently from salary.

38
00:02:07.668 --> 00:02:11.278
So you may choose in your
system to model it as such.

39
00:02:11.278 --> 00:02:12.281
So in this case,

40
00:02:12.281 --> 00:02:17.018
I've modeled it such that my hourly
employee inherits from my base employee.

41
00:02:18.398 --> 00:02:23.055
And the implication of that is that
if I create that employee object,

42
00:02:23.055 --> 00:02:27.952
let's say, and you notice that I don't
have any name or any first name or

43
00:02:27.952 --> 00:02:32.319
last name declared anywhere on here,
nor do I have this method.

44
00:02:32.319 --> 00:02:34.193
And we'll talk about these methods and

45
00:02:34.193 --> 00:02:37.677
we haven't gotten to
the behaviors of classes really.

46
00:02:37.677 --> 00:02:39.536
We'll mention that in a second.

47
00:02:39.536 --> 00:02:43.987
So if I want to declare
an hourly employee, and

48
00:02:43.987 --> 00:02:51.192
his name is hourly employee, and
we're gonna name him first name George.

49
00:02:54.391 --> 00:02:59.438
&gt;&gt; Spencer Schneidenbach: Last name,
Harold, all right.

50
00:03:01.337 --> 00:03:03.927
If I go and
I look at this hourly employee,

51
00:03:03.927 --> 00:03:07.997
even though this is the type that
I've instantiated right here,

52
00:03:07.997 --> 00:03:13.473
because I've inherited from base employee,
I've inherited all of the properties and

53
00:03:13.473 --> 00:03:16.737
all of the behaviors of
the base employee class.

54
00:03:16.737 --> 00:03:19.915
So I'm able to say, yes,
I want my first name.

55
00:03:21.155 --> 00:03:22.315
Yes, I want my last name.

56
00:03:22.315 --> 00:03:26.064
But in addition, I also want my hourly
rate because an hourly employee has

57
00:03:26.064 --> 00:03:28.385
an hourly rate associated with them.

58
00:03:28.385 --> 00:03:34.449
So I can also choose to add that to here,
right?

59
00:03:34.449 --> 00:03:37.665
And by the way, the M key is just
to denote that this is a decimal.

60
00:03:38.825 --> 00:03:42.992
There's special keywords for
declaring certain types of numbers, and

61
00:03:42.992 --> 00:03:44.913
M is the one for the decimal type.

62
00:03:46.183 --> 00:03:51.633
So that's in a nutshell,
the first part of inheritance.

63
00:03:51.633 --> 00:03:55.263
But the rabbit hole gets deeper and
it's very important.

64
00:03:55.263 --> 00:03:57.603
So I mentioned that classes
cannot only have properties, but

65
00:03:57.603 --> 00:03:58.773
they can have behaviors.

66
00:03:58.773 --> 00:04:02.369
Up to this point, we've really only
looked at classes that had properties.

67
00:04:02.369 --> 00:04:06.278
That's what I wanted you to focus on,
because that's a lot of times what I'm

68
00:04:06.278 --> 00:04:10.429
creating classes that just are a bag of
properties and don't have behaviors, but

69
00:04:10.429 --> 00:04:11.829
sometimes they have both.

70
00:04:11.829 --> 00:04:16.999
So you notice that I have a method
here called get employee details.

71
00:04:16.999 --> 00:04:20.124
And this get employee details has
an implementation that basically says,

72
00:04:20.124 --> 00:04:22.119
return first name and last name.

73
00:04:22.119 --> 00:04:27.192
So if I call get employee
details on this person,

74
00:04:27.192 --> 00:04:32.029
so Console.WriteLine, employee details.

75
00:04:33.049 --> 00:04:34.459
I use method syntax to call it.

76
00:04:34.459 --> 00:04:38.189
It does not take parameters, so it's just
an open and close parentheses at the end.

77
00:04:38.189 --> 00:04:44.839
Otherwise, the compiler will complain,
you don't wanna do that.

78
00:04:44.839 --> 00:04:48.642
And then I am going to dotnet run, and

79
00:04:48.642 --> 00:04:54.732
you can see that
George Herold's name is called.

80
00:04:54.732 --> 00:04:56.296
Now because of inheritance,

81
00:04:56.296 --> 00:05:00.415
my hourly employee has access
to this GetEmployeeDetails.

82
00:05:00.415 --> 00:05:02.805
Let's talk about
accessibility a little bit.

83
00:05:02.805 --> 00:05:06.095
This might be a method that I
don't want other things to call,

84
00:05:06.095 --> 00:05:07.675
not even derived classes.

85
00:05:07.675 --> 00:05:11.895
Hourly employees considered what's called
a derived class for base employee.

86
00:05:13.345 --> 00:05:18.333
So accessibility can be used to close this
method off even from derived instances of

87
00:05:18.333 --> 00:05:19.195
this method.

88
00:05:19.195 --> 00:05:22.387
So let's say, protected,
first and foremost,

89
00:05:22.387 --> 00:05:27.403
protected is a keyword that will basically
say the only people that have access

90
00:05:27.403 --> 00:05:32.506
to this thing are the class itself and
the derived class within the class scope.

91
00:05:32.506 --> 00:05:36.651
But anything outside of that scope is
not something that it has access to.

92
00:05:36.651 --> 00:05:39.601
So you can see that now all of a sudden
we're getting a compiler error.

93
00:05:39.601 --> 00:05:43.819
However, if we wanted to call
GetEmployeeDetails from within our hourly

94
00:05:43.819 --> 00:05:47.211
employee class,
we absolutely could do that.

95
00:05:47.211 --> 00:05:52.381
That's something that we can do because
it is derived from base employee.

96
00:05:52.381 --> 00:05:56.983
So protected basically says anything
in the object hierarchy can have

97
00:05:56.983 --> 00:05:58.551
access to this method.

98
00:06:00.662 --> 00:06:05.302
However, if I mark it private,
the only thing that can access

99
00:06:05.302 --> 00:06:09.702
GetEmployeeDetails is
the base employee class.

100
00:06:09.702 --> 00:06:13.342
First things first, we'll talk about
this virtual keyword here in a second.

101
00:06:13.342 --> 00:06:15.742
Virtual or
abstract methods cannot be private.

102
00:06:15.742 --> 00:06:18.692
So that makes sense,
which we'll explain in a second.

103
00:06:18.692 --> 00:06:19.702
So we would say this.

104
00:06:19.702 --> 00:06:23.047
And then you would see that now all of
a sudden even our derived class can access

105
00:06:23.047 --> 00:06:24.762
this what's called a private member.

106
00:06:24.762 --> 00:06:28.512
And that applies to properties
as well as methods.

107
00:06:28.512 --> 00:06:36.092
So this is the idea of behaviors in
a class in addition to just properties.

108
00:06:36.092 --> 00:06:38.908
And it also illustrates
kind of the importance and

109
00:06:38.908 --> 00:06:42.184
significance of accessibility modifiers.

110
00:06:42.184 --> 00:06:47.290
Protected, private and public
are the ones that I use 99% of the time.

111
00:06:47.290 --> 00:06:49.107
I will use one called internal,

112
00:06:49.107 --> 00:06:53.674
which means that it's only accessible
within the assembly that you have.

113
00:06:53.674 --> 00:06:58.224
So the compiled thing that you have and
isn't accessible to other assemblies.

114
00:06:58.224 --> 00:07:03.104
A little bit outside the scope, just know
that it exists if you ever encounter it

