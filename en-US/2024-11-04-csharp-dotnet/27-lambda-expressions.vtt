WEBVTT

1
00:00:00.150 --> 00:00:04.412
So, I want to talk a little bit about
something called a lambda expression or

2
00:00:04.412 --> 00:00:09.560
lambda function, they're basically little
short-form functions that you can define.

3
00:00:09.560 --> 00:00:13.636
And the implications of this are really
apparent when you get to when we get to

4
00:00:13.636 --> 00:00:14.790
talking about LIQN (Language Integrated Query).

5
00:00:14.790 --> 00:00:18.546
So, this is an example
of a lambda function.

6
00:00:18.546 --> 00:00:22.783
So essentially what you've this is, it's
basically a shorthand for defining a very,

7
00:00:22.783 --> 00:00:23.824
very tiny function.

8
00:00:23.824 --> 00:00:29.039
So, I basically say that I am defining a
function that takes in two parameters and

9
00:00:29.039 --> 00:00:31.895
returns those parameters added together.

10
00:00:31.895 --> 00:00:36.037
And assuming that you declare
it as a Func<int, int, int>,

11
00:00:36.037 --> 00:00:39.048
which I'll talk about that in a second.

12
00:00:39.048 --> 00:00:44.633
It is functionally equivalent to this
right here, but it saves a lot of words.

13
00:00:44.633 --> 00:00:46.173
It saves a lot of keystrokes.

14
00:00:47.203 --> 00:00:51.727
So, this is referred to
as a I mentioned that,

15
00:00:51.727 --> 00:00:56.135
this is a function that is a Func of,
of, of.

16
00:00:56.135 --> 00:01:01.262
And so this is a specialized type
that's used in a lot of the parts of

17
00:01:01.262 --> 00:01:06.863
the .NET core libraries to define
a function that has a specific shape.

18
00:01:06.863 --> 00:01:12.366
So for instance, I can take this and
I can say Func<int, int, int>

19
00:01:12.366 --> 00:01:18.147
&gt;&gt; Spencer Schneidenbach: And

20
00:01:18.147 --> 00:01:21.036
then set it to add.

21
00:01:21.036 --> 00:01:22.585
Oops, I did not copy paste it.

22
00:01:26.616 --> 00:01:30.360
&gt;&gt; Spencer Schneidenbach: Boom,
boom, perfect.

23
00:01:30.360 --> 00:01:34.788
And what I've done is I've defined
a function in line inside of a variable,

24
00:01:34.788 --> 00:01:36.459
which looks a little weird.

25
00:01:36.459 --> 00:01:41.090
I've defined a function add that
takes in one two arguments,

26
00:01:41.090 --> 00:01:47.516
the first one being an int, the second one
being an int, and it returns an int, okay?

27
00:01:47.516 --> 00:01:52.312
So it's a little bit of a funky syntax,
just wait, gets better.

28
00:01:52.312 --> 00:01:56.711
This is functionally equivalent
to this function right here, but

29
00:01:56.711 --> 00:01:59.696
everything besides this weird syntax here,

30
00:01:59.696 --> 00:02:03.952
everything to the right looks
like it's saving a little space.

31
00:02:03.952 --> 00:02:08.482
So this somebody talked about,
asked about, earlier, about callbacks.

32
00:02:08.482 --> 00:02:11.827
And basically, and
my interpretation of that was,

33
00:02:11.827 --> 00:02:16.167
what about taking in functions as
arguments inside of our methods.

34
00:02:16.167 --> 00:02:18.896
So that's something that
is a core part of .NET.

35
00:02:18.896 --> 00:02:20.977
It's something that you do a lot of,

36
00:02:20.977 --> 00:02:24.647
especially when you're
operating on collections.

37
00:02:24.647 --> 00:02:26.554
The important thing to note is that,

38
00:02:26.554 --> 00:02:29.876
we don't have to be verbose when
we define the shape of a function

39
00:02:29.876 --> 00:02:33.399
if we know what that function is
supposed to look like ahead of time.

40
00:02:33.399 --> 00:02:37.262
And that'll be apparent
in the next section.

41
00:02:37.262 --> 00:02:40.924
So two different types of functions.

42
00:02:40.924 --> 00:02:46.182
There's func, AKA a function that returns
a value, and then there's action.

43
00:02:46.182 --> 00:02:50.014
An action is something that
doesn't return a value.

44
00:02:50.014 --> 00:02:54.650
So you can have, for
instance, let me delete this.

45
00:02:54.650 --> 00:02:58.541
Let me do elete this,
you can have an action.

46
00:03:00.377 --> 00:03:03.171
&gt;&gt; Spencer Schneidenbach: That
doesn't return anything.

47
00:03:03.171 --> 00:03:05.326
That is what an action is.

48
00:03:05.326 --> 00:03:08.575
It's a function that returns void,
it doesn't do anything.

49
00:03:10.130 --> 00:03:12.886
&gt;&gt; Spencer Schneidenbach: doesSomething =,
and

50
00:03:12.886 --> 00:03:17.992
then you can say an empty
set of parameters.

51
00:03:17.992 --> 00:03:22.565
Because we don't have any goes into and
then we could just Console.WriteLine and

52
00:03:22.565 --> 00:03:26.286
just say hi or something,
call a function or do some kind of thing.

53
00:03:26.286 --> 00:03:30.458
But this isn't returning a value because
Console.WriteLine doesn't return a value.

54
00:03:30.458 --> 00:03:35.064
However, this because we know
that this is a func of that

55
00:03:35.064 --> 00:03:39.086
returns an int the return
statement is implied.

56
00:03:39.086 --> 00:03:43.904
So kind of interesting,
little bit different syntax.

57
00:03:43.904 --> 00:03:47.951
You could also define actions
that take parameters, so

58
00:03:47.951 --> 00:03:53.043
you could say write, and then you
could say, Console.WriteLine.

59
00:03:53.043 --> 00:03:58.280
This is a this is a Console.WriteLine
that takes in a string and doesn't return.

60
00:03:58.280 --> 00:04:01.039
Return anything is an action of string,
aka,

61
00:04:01.039 --> 00:04:03.810
string is the only
argument to this function.

62
00:04:03.810 --> 00:04:09.360
So, this does have the shape of
the action of string function, and you

63
00:04:09.360 --> 00:04:16.323
can call it just like any other function,
&gt;&gt; Spencer Schneidenbach: Which

64
00:04:16.323 --> 00:04:17.241
is pretty cool.

65
00:04:17.241 --> 00:04:18.383
We're gonna run it.

66
00:04:18.383 --> 00:04:24.470
And we're gonna see that our
test string does get returned.

67
00:04:24.470 --> 00:04:27.421
My main point in showing you all of
this is to show you that there is

68
00:04:27.421 --> 00:04:29.618
alternate syntaxes for
declaring functions.

69
00:04:29.618 --> 00:04:32.344
Sometimes you don't want to
declare a whole function for

70
00:04:32.344 --> 00:04:34.001
a particular behavior property.

71
00:04:34.001 --> 00:04:38.122
It'll make a lot more sense when we get
to when we get to the next section.

72
00:04:38.122 --> 00:04:42.335
So one one thing about lambda
functions that they have one

73
00:04:42.335 --> 00:04:45.859
property is that they close,
their closures.

74
00:04:45.859 --> 00:04:48.997
They close over values
outside of their scope.

75
00:04:48.997 --> 00:04:53.983
So in this case,
we have a counter that we've

76
00:04:53.983 --> 00:04:58.979
declared outside the scope
of our function.

77
00:04:58.979 --> 00:05:03.642
And this counter is still
holding this function is still

78
00:05:03.642 --> 00:05:08.403
holding this counter in memory,
even though the scope of

79
00:05:08.403 --> 00:05:12.686
this function does not
declare counter directly.

80
00:05:12.686 --> 00:05:17.853
So this is a really important property
because it means that this can keep

81
00:05:17.853 --> 00:05:23.288
track of values that exist outside of it
as long as you refer to those values.

82
00:05:23.288 --> 00:05:27.615
It's more of a kind of a warning or
a behavior.

83
00:05:27.615 --> 00:05:31.067
In practice, you don't have to
close over functions too often,

84
00:05:31.067 --> 00:05:34.271
unless you're declaring
something like a local function,

85
00:05:34.271 --> 00:05:37.869
which is a function that's declared
inside of a function, right?

86
00:05:37.869 --> 00:05:42.894
Like this void, IncrementCounter,

87
00:05:42.894 --> 00:05:46.037
counter++, right?

88
00:05:46.037 --> 00:05:49.710
You can do that,
it's called a local function.

89
00:05:49.710 --> 00:05:54.250
This also closes over the counter
variable, and that just means to say that

90
00:05:54.250 --> 00:05:57.943
this function has access to it and
it doesn't get a new copy.

91
00:05:57.943 --> 00:06:00.932
It gets the copy of counter
as it exists today,

92
00:06:00.932 --> 00:06:04.238
even if you call function
far outside of the scope.

93
00:06:04.238 --> 00:06:11.040
If you passed this function to another
method to be called, it will get called.

