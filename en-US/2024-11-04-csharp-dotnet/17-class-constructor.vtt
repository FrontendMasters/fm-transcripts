WEBVTT

1
00:00:00.053 --> 00:00:03.614
&gt;&gt; Spencer Schneidenbach: So constructors
are really important part of classes, so

2
00:00:03.614 --> 00:00:07.757
lots of classes use constructors
to kind of gatekeep and say, hey,

3
00:00:07.757 --> 00:00:09.221
I cannot instantiate.

4
00:00:09.221 --> 00:00:13.997
I cannot become a physical
object in the .NET world,

5
00:00:13.997 --> 00:00:19.523
unless you provide me specific
things that I can use to exist.

6
00:00:19.523 --> 00:00:22.434
So let me show you what that looks like,
so,

7
00:00:22.434 --> 00:00:25.672
if I redeclare my person
class here like that.

8
00:00:27.987 --> 00:00:30.913
&gt;&gt; Spencer Schneidenbach: And I have
a name and an age, I'm gonna go ahead and

9
00:00:30.913 --> 00:00:33.215
close these setters, in other words,

10
00:00:33.215 --> 00:00:36.312
I'm just gonna delete them
to kind of to prove a point.

11
00:00:36.312 --> 00:00:39.616
I've made this object,
essentially what's called immutable,

12
00:00:39.616 --> 00:00:43.038
you can't change anything about
this object, at least not direct,

13
00:00:43.038 --> 00:00:45.223
not directly without
a little bit of magic.

14
00:00:45.223 --> 00:00:50.103
But you can see that I have indeed
actually set these values to something

15
00:00:50.103 --> 00:00:54.916
else up here, but only in the context
of what is called a constructor.

16
00:00:54.916 --> 00:00:59.663
Now, a constructor looks a lot like
a method, except it doesn't have

17
00:00:59.663 --> 00:01:04.584
a return type, and the name of the method
is always the name of the class.

18
00:01:04.584 --> 00:01:09.117
So it's a little bit of a funky syntax,
if you're looking at methods and

19
00:01:09.117 --> 00:01:13.203
you're trying to make them into a method,
it's a very special,

20
00:01:13.203 --> 00:01:16.942
very purpose built type of method and
this is how you use it.

21
00:01:16.942 --> 00:01:22.377
So if I wanted to create a new person var
spencer equals new, so new is a keyword

22
00:01:22.377 --> 00:01:27.658
you use to what's called instantiate or
create an instance of this class.

23
00:01:27.658 --> 00:01:31.763
We were materializing spencer
into our digital world, so

24
00:01:31.763 --> 00:01:34.442
we do new person and then the syntax for

25
00:01:34.442 --> 00:01:39.490
calling this constructor is the same
as you would for calling a method.

26
00:01:39.490 --> 00:01:43.962
These are still called parameters up here,
they can have params arguments, for

27
00:01:43.962 --> 00:01:46.607
instance, they can even
have default values.

28
00:01:46.607 --> 00:01:51.661
You can set age to 37, which happens
to be my age, and you can say,

29
00:01:51.661 --> 00:01:56.301
I wanna call this constructor,
and you can see that age 37.

30
00:01:56.301 --> 00:01:59.665
I can call it with just my name, or

31
00:01:59.665 --> 00:02:04.599
if I wanna pretend I'm 29
I can do that as well.

32
00:02:04.599 --> 00:02:08.958
So that's what's called instantiation, now
we've brought this object into existence.

33
00:02:08.958 --> 00:02:14.483
It's a reference type, so that means it
is materialized in a point in memory,

34
00:02:14.483 --> 00:02:18.772
and this variable is referencing
that value in that memory.

35
00:02:18.772 --> 00:02:21.600
So, classes are really important,
because they are,

36
00:02:21.600 --> 00:02:25.212
pretty much the fundamental building
block for any real programming or

37
00:02:25.212 --> 00:02:27.759
business programming
inside of the .NET world.

38
00:02:27.759 --> 00:02:30.732
They're kind of a container for
properties, but

39
00:02:30.732 --> 00:02:35.547
they don't always just contain properties,
they can also contain behaviors,

40
00:02:35.547 --> 00:02:40.035
which is really an important part, and
we'll get to that here in a second.

41
00:02:40.035 --> 00:02:42.674
&gt;&gt; Student 1: So
maybe I'm not understanding, or

42
00:02:42.674 --> 00:02:47.355
maybe this is the point when you're
creating the constructor and

43
00:02:47.355 --> 00:02:52.310
setting age to 37 and then you can
only get there's no way to set it.

44
00:02:52.310 --> 00:02:58.311
How is it that when you are then
creating or instantiating spencer and

45
00:02:58.311 --> 00:03:02.874
20 and setting the age to
29 that you can do that?

46
00:03:02.874 --> 00:03:05.030
&gt;&gt; Spencer Schneidenbach: Absolutely,
so that's a good question and

47
00:03:05.030 --> 00:03:07.019
it really has to do with default values.

48
00:03:07.019 --> 00:03:11.322
Default values are about ultimately like
providing flexibility to the programmer,

49
00:03:11.322 --> 00:03:13.064
especially the lazy programmer.

50
00:03:13.064 --> 00:03:17.770
You may decide that, what, I just want to
instantiate this person object with an age

51
00:03:17.770 --> 00:03:20.242
of 37 or I don't want that default value.

52
00:03:20.242 --> 00:03:24.935
I wanna, override it, so what would happen
is, is once this is instantiated and

53
00:03:24.935 --> 00:03:28.603
we do this, I'm gonna debug this and
I'll show you the value.

54
00:03:31.267 --> 00:03:35.054
&gt;&gt; Spencer Schneidenbach: You can see
that the value is now overridden to 29,

55
00:03:35.054 --> 00:03:36.958
because I have made it so.

56
00:03:36.958 --> 00:03:39.984
&gt;&gt; Student 1: Okay, so
it's just setting it to 37,

57
00:03:39.984 --> 00:03:42.841
initially as just the default value?

58
00:03:42.841 --> 00:03:45.530
&gt;&gt; Spencer Schneidenbach: Correct,
and that makes it optional, right?

59
00:03:45.530 --> 00:03:51.120
So you can, if you want, remove this
argument, and then once we hit a debug and

60
00:03:51.120 --> 00:03:55.126
we go back here,
you'll see that it is now indeed 37.

61
00:03:55.126 --> 00:04:00.454
So it's, there's default values are used
quite a bit in programming and,

62
00:04:00.454 --> 00:04:06.214
in the real world for lots of different
things, for methods, for constructors.

63
00:04:06.214 --> 00:04:11.002
So they do have their they
have a lot of purpose,

64
00:04:11.002 --> 00:04:13.893
so good question, you bet.

65
00:04:13.893 --> 00:04:18.250
Okay it's important to note that
a class can actually contain

66
00:04:18.250 --> 00:04:20.105
multiple constructors.

67
00:04:20.105 --> 00:04:24.632
Now you can see here that, in a sense,
we have one constructor, but

68
00:04:24.632 --> 00:04:26.626
it's got some flexibility.

69
00:04:26.626 --> 00:04:30.281
We can call it multiple different ways,
right?

70
00:04:30.281 --> 00:04:36.200
We can call Amy, Amy is 24,
we can call this constructor two different

71
00:04:36.200 --> 00:04:42.716
ways with two different sets of arguments,
because it's got a default value.

72
00:04:42.716 --> 00:04:46.042
But this isn't just the only way
you can instantiate a classic,

73
00:04:46.042 --> 00:04:48.946
class can have what's called
multiple constructors.

74
00:04:48.946 --> 00:04:51.752
You can have multiple.

75
00:04:54.127 --> 00:04:56.541
Ways of instantiating a class, and

76
00:04:56.541 --> 00:05:01.217
this is really important to note
because it's frankly very common.

77
00:05:01.217 --> 00:05:05.721
It's very common when you're talking
about objects that serve the purpose

78
00:05:05.721 --> 00:05:10.515
simply of processing data, that there may
be some different ways to process it.

79
00:05:10.515 --> 00:05:15.276
And sometimes it needs things and
sometimes it doesn't need things, right?

80
00:05:15.276 --> 00:05:20.712
So multiple constructors is really
about giving the developer flexibility,

81
00:05:20.712 --> 00:05:25.320
you may be able to create an object,
multiple different ways, and

82
00:05:25.320 --> 00:05:28.471
just give that developer some flexibility.

83
00:05:28.471 --> 00:05:32.212
So you can see I've removed
the constructor with the default value, so

84
00:05:32.212 --> 00:05:36.444
if I go back here and I type in my parens,
you can see now that it's saying, well,

85
00:05:36.444 --> 00:05:39.220
there's two different ways
I can be instantiated.

86
00:05:39.220 --> 00:05:42.937
So there's string, dot name, and
then there's string dot name and int age.

87
00:05:45.178 --> 00:05:48.051
&gt;&gt; Spencer Schneidenbach: This gets really
important when you're talking about

88
00:05:48.051 --> 00:05:51.431
service-based classes, and
I said, we will talk about this.

89
00:05:51.431 --> 00:05:54.126
We'll probably touch on
this in the next course,

90
00:05:54.126 --> 00:05:56.693
in the ASP.NET Core course,
but just know that

91
00:05:56.693 --> 00:06:01.075
multiple constructors can exist on a class
to construct them in different ways.

92
00:06:02.966 --> 00:06:07.035
&gt;&gt; Spencer Schneidenbach: You can also
save yourself some keystrokes by simply

93
00:06:07.035 --> 00:06:13.144
instantiating or simply calling
a constructor within another constructor.

94
00:06:13.144 --> 00:06:16.588
And the way that you would
do that is afterwards,

95
00:06:16.588 --> 00:06:21.376
you see that you can use right
after your constructor declaration,

96
00:06:21.376 --> 00:06:26.428
you can do this, and then you can do
a colon, and then you can type this.

97
00:06:26.428 --> 00:06:31.622
And this allows you to then
call other constructors, so

98
00:06:31.622 --> 00:06:37.477
you can say, here I want to pass
in this name parameter to this,

99
00:06:37.477 --> 00:06:41.030
and then I just wanna set the age to 0.

100
00:06:41.030 --> 00:06:44.904
So that's a way of calling a constructor,
you can also do the converse, right?

101
00:06:44.904 --> 00:06:49.908
You could have this always set the name
like so, and then call this and

102
00:06:49.908 --> 00:06:54.911
just pass this name so that it always
calls this constructor as well,

103
00:06:54.911 --> 00:06:57.090
so both are valid, yes Marc.

104
00:06:57.090 --> 00:06:59.577
&gt;&gt; Marc: Is it bad practice to do

105
00:06:59.577 --> 00:07:02.720
this.Name=name
inside of the constructor?

106
00:07:02.720 --> 00:07:03.797
&gt;&gt; Spencer Schneidenbach: Is
it bad practice?

107
00:07:03.797 --> 00:07:07.615
It is not, and, in fact, a lot of people
would consider it to be good practice.

108
00:07:07.615 --> 00:07:10.436
So the question really
is about accessing name.

109
00:07:10.436 --> 00:07:15.095
So let's say, for the sake of argument,
and most of the time if you follow the c

110
00:07:15.095 --> 00:07:18.357
sharp styling rules,
this isn't gonna be a problem.

111
00:07:18.357 --> 00:07:23.233
But let's say you have a,
string name as a parameter,

112
00:07:23.233 --> 00:07:27.474
and parameters are typically,
camel case, so

113
00:07:27.474 --> 00:07:31.302
the first character is always lowercase.

114
00:07:31.302 --> 00:07:34.329
You can have,
this is perfectly valid, c sharp, but

115
00:07:34.329 --> 00:07:39.190
what it the compiler's doing is, telling
you assignment made to the same variable.

116
00:07:39.190 --> 00:07:40.856
Did you mean to assign something else?

117
00:07:40.856 --> 00:07:45.132
That's because inside of the scope of this
constructor, you've actually changed what

118
00:07:45.132 --> 00:07:49.081
name looks like, sometimes collision is
not allowed in c sharp other times it is.

119
00:07:49.081 --> 00:07:54.315
And this is one of the cases where it is,
you can absolutely have a parameter

120
00:07:54.315 --> 00:07:59.398
declared on a method that is also
declared somewhere else in that scope.

121
00:07:59.398 --> 00:08:03.771
So the way that you would mitigate
that based on Marc's question is

122
00:08:03.771 --> 00:08:05.735
to type "this" in front of that.

123
00:08:05.735 --> 00:08:10.472
So that actually refers to
the person.Name property.

124
00:08:10.472 --> 00:08:16.003
So "this" refers to the the object itself.

125
00:08:16.003 --> 00:08:20.744
That's a good question,
good way to kinda segue into "this" keyword.

126
00:08:20.744 --> 00:08:26.065
But in practice, you're almost never
going to declare a property and

127
00:08:26.065 --> 00:08:30.680
then have a name and
a parameter that has the exact same name.

128
00:08:30.680 --> 00:08:32.555
They're gonna be cased differently.

129
00:08:32.555 --> 00:08:35.315
And most of the time,
Spencer, because of that,

130
00:08:35.315 --> 00:08:37.698
is cuz he's following those style rules.

131
00:08:37.698 --> 00:08:41.989
He's gonna bypass using the "this" keyword.

132
00:08:41.989 --> 00:08:44.649
But some people really
like the "this" keyword.

133
00:08:44.649 --> 00:08:48.418
Again, it's just referring to itself.

134
00:08:48.418 --> 00:08:51.342
Some people really like it
because it's really explicit.

135
00:08:51.342 --> 00:08:55.032
And even the .NET tooling
will try to tell you, hey,

136
00:08:55.032 --> 00:09:00.044
you can actually make this simpler,
you don't need the "this" keyword here.

137
00:09:00.044 --> 00:09:01.157
Great question.

138
00:09:05.230 --> 00:09:08.566
&gt;&gt; Spencer Schneidenbach: All right,
I wanna go over the syntax, but I don't

139
00:09:08.566 --> 00:09:13.851
wanna dwell on it, because, frankly,
I don't use it a lot and I don't like it.

140
00:09:13.851 --> 00:09:18.967
[LAUGH] This is one of those features of
C# that's relatively new that I think it

141
00:09:18.967 --> 00:09:24.406
fits fine into the language, but it's not
something that I am personally a fan of.

142
00:09:24.406 --> 00:09:26.560
You can do what's called
a primary constructor.

143
00:09:26.560 --> 00:09:31.840
And a primary constructor allows you
to set, basically in the same line

144
00:09:31.840 --> 00:09:36.944
with this parentheses up here,
right after the class declaration.

145
00:09:36.944 --> 00:09:40.304
In the same line,
you can set string Name and int Age, and

146
00:09:40.304 --> 00:09:44.442
that will actually automatically
create properties for you as well.

147
00:09:44.442 --> 00:09:51.427
So if we go down to Amy.,
no it does not create properties for you.

148
00:09:51.427 --> 00:09:54.781
Let me see, am I missing some syntax here?

149
00:09:54.781 --> 00:09:56.254
Let's see.

150
00:09:56.254 --> 00:09:58.082
Create and assign property name.

151
00:09:58.082 --> 00:10:01.760
Okay, that's not true for record types.

152
00:10:01.760 --> 00:10:03.719
Okay, I misspoke there.

153
00:10:03.719 --> 00:10:05.811
I'm actually gonna rewind and
start that over.

154
00:10:05.811 --> 00:10:09.467
So you can use what's called
a primary constructor, which

155
00:10:09.467 --> 00:10:14.380
you can declare basically a parentheses,
and then give it some values up here.

156
00:10:14.380 --> 00:10:18.221
And this is a constructor definition.

157
00:10:18.221 --> 00:10:20.520
I'm a fan of using multiple construction.

158
00:10:20.520 --> 00:10:25.907
And oftentimes if I'm declaring an object
with a constructor, there's a good chance

159
00:10:25.907 --> 00:10:31.395
that it'll have multiple constructors that
might have multiple different purposes.

160
00:10:31.395 --> 00:10:34.218
So I'm not a fan of this syntax, but

161
00:10:34.218 --> 00:10:38.559
it will play well with
multiple constructors as well.

162
00:10:38.559 --> 00:10:40.774
It's just that I personally don't like it.

163
00:10:40.774 --> 00:10:42.610
Now, I am gonna show you
a little bit of the tooling.

164
00:10:42.610 --> 00:10:45.969
You're gonna see that
Parameter 'Name' is unread.

165
00:10:45.969 --> 00:10:49.198
You see that it's asking
me to do a quick fix.

166
00:10:49.198 --> 00:10:50.916
So I'm going to hit Cmd + Period, and

167
00:10:50.916 --> 00:10:53.551
you're gonna see that it will
give you some suggestions,

168
00:10:53.551 --> 00:10:56.860
it will give you some code hints, or
some hints of things that you can do.

169
00:10:56.860 --> 00:11:00.733
So in this case, I am going to
declare a property called Name and

170
00:11:00.733 --> 00:11:03.156
then set it to the Name parameter here.

171
00:11:03.156 --> 00:11:05.938
Again, I am not a fan of
primary constructors, but

172
00:11:05.938 --> 00:11:09.906
I have seen them in the wild because
.NET developers like new features.

173
00:11:09.906 --> 00:11:10.963
So there you go.

174
00:11:10.963 --> 00:11:13.151
There's the syntax for it.

175
00:11:14.240 --> 00:11:17.657
I don't just particularly care for
the syntax, so a lot of times,

176
00:11:17.657 --> 00:11:18.766
I just don't use it.

177
00:11:23.925 --> 00:11:27.845
&gt;&gt; Spencer Schneidenbach: So we talked
about the new keyword to create instances

178
00:11:27.845 --> 00:11:28.722
of a class.

179
00:11:28.722 --> 00:11:33.517
We should talk about as well validating
data that comes into a class.

180
00:11:33.517 --> 00:11:39.117
So I'm gonna unwind all of this, and
I am gonna go back to the this.Name.

181
00:11:39.117 --> 00:11:41.742
That's a fine syntax to go from.

182
00:11:41.742 --> 00:11:46.327
And I am going to show you a very common
pattern when you're constructing objects,

183
00:11:46.327 --> 00:11:50.138
which is to check to see that
the parameters of your object are valid.

184
00:11:50.138 --> 00:11:55.537
So I'm gonna go here, and I'm going to
say, if the string is null or whitespace,

185
00:11:55.537 --> 00:12:00.967
I'm going to throw an ArgumentException
to say that Name cannot be null or empty.

186
00:12:00.967 --> 00:12:03.346
You can also give it in
the ArgumentException,

187
00:12:03.346 --> 00:12:05.968
you can give it the name of
the parameter if you want.

188
00:12:05.968 --> 00:12:12.683
That's useful for somebody who's
handling that exception downstream.

189
00:12:12.683 --> 00:12:17.544
But this basically will prevent our object
from being created in an invalid state.

190
00:12:18.955 --> 00:12:23.054
So I'm gonna run this, and I'm gonna show
you that it's gonna crash at runtime.

191
00:12:23.054 --> 00:12:24.860
Boom, let's see.

192
00:12:24.860 --> 00:12:28.164
Unhandled exception, Name cannot be
null or empty, (Parameter 'name').

193
00:12:28.164 --> 00:12:30.264
So it threw our system to
ArgumentException, and

194
00:12:30.264 --> 00:12:33.265
we did that at the constructor, and
we did that deliberately, right?

195
00:12:33.265 --> 00:12:38.243
We don't want an invalid representation
of an object to exist in memory if

196
00:12:38.243 --> 00:12:39.952
we can help it.

197
00:12:39.952 --> 00:12:42.906
This renders this object
completely unusable.

198
00:12:42.906 --> 00:12:46.805
So you can't use it and
it is not instantiated.

199
00:12:46.805 --> 00:12:50.129
And you cannot recover from this
except to catch the exception and

200
00:12:50.129 --> 00:12:52.010
try to re-instantiate the object.

201
00:12:55.223 --> 00:12:58.279
&gt;&gt; Spencer Schneidenbach: Okay, this
is one of my favorite pieces of syntax,

202
00:12:58.279 --> 00:13:00.424
and I think it's a really cool one.

203
00:13:00.424 --> 00:13:02.478
You've probably seen it already.

204
00:13:02.478 --> 00:13:06.778
You've probably seen me use it already,
which is that, I'm gonna go ahead and

205
00:13:06.778 --> 00:13:07.945
put this as a setter.

206
00:13:07.945 --> 00:13:09.952
I'm gonna open up the setter here.

207
00:13:09.952 --> 00:13:15.028
Oftentimes when I'm dealing with objects
that are, quote, unquote, representations

208
00:13:15.028 --> 00:13:19.248
of real world things like a person,
I'm not usually using constructors.

209
00:13:19.248 --> 00:13:21.312
I use constructors for other things,

210
00:13:21.312 --> 00:13:24.158
which I'll touch on more
in the ASP NET Core course.

211
00:13:24.158 --> 00:13:29.923
But for representing objects like people,
I'm not using a constructor directly.

212
00:13:29.923 --> 00:13:33.370
But there may be a situation where I
want to instantiate this object with

213
00:13:33.370 --> 00:13:34.479
certain values.

214
00:13:34.479 --> 00:13:38.624
So you can use what's called
object initializer syntax.

215
00:13:38.624 --> 00:13:40.052
So let me show you what that looks like.

216
00:13:40.052 --> 00:13:42.110
So I'm gonna say new Person.

217
00:13:42.110 --> 00:13:45.776
I can leave off the open and
close parentheses if I want, but

218
00:13:45.776 --> 00:13:48.796
I'm gonna put them on
there just to be explicit.

219
00:13:48.796 --> 00:13:50.963
And then I'm gonna use this syntax after.

220
00:13:50.963 --> 00:13:53.540
I'm gonna have this little tiny block.

221
00:13:53.540 --> 00:13:57.216
And this block,
if I hit Ctrl + Space to kinda see what

222
00:13:57.216 --> 00:14:01.726
I've got of available to me,
I can see that I can set age and name.

223
00:14:01.726 --> 00:14:06.500
And what I can do is I can
set these properties as

224
00:14:06.500 --> 00:14:10.830
I'm instantiating this object.

225
00:14:10.830 --> 00:14:13.469
The syntax was introduced a long time ago.

226
00:14:13.469 --> 00:14:18.333
It is a syntax that I use a lot to declare
objects, because the alternative is

227
00:14:18.333 --> 00:14:22.752
to just do new Person and
then person.Name, and then person.Age.

228
00:14:22.752 --> 00:14:27.785
And oftentimes the tooling will tell you,
hey, there's an easier way to do this.

229
00:14:31.800 --> 00:14:35.059
&gt;&gt; Spencer Schneidenbach: So it'll say
object initialization can be simplified.

230
00:14:35.059 --> 00:14:38.880
Ctrl + Dot, and you'll see,
it'll suggest to do that.

231
00:14:38.880 --> 00:14:43.338
Super common syntax, super nice,
saves you key strokes, and

232
00:14:43.338 --> 00:14:45.450
I think it looks nicer, too.

233
00:14:45.450 --> 00:14:47.331
This is a relatively new thing.

234
00:14:47.331 --> 00:14:50.745
You can also declare
a property as immutable, but

235
00:14:50.745 --> 00:14:54.658
set it inside of the object
initialization syntax only.

236
00:14:54.658 --> 00:14:59.505
Such that you can replace the setter
with an init, and that basically says

237
00:14:59.505 --> 00:15:03.959
the way that you set this is within
the object initializer only, and

238
00:15:03.959 --> 00:15:07.031
then you're not able to
set it after the fact.

239
00:15:07.031 --> 00:15:10.852
So it effectively converts
it to be immutable.

240
00:15:10.852 --> 00:15:14.647
This becomes important when you talk about
nullability, because as you can see,

241
00:15:14.647 --> 00:15:18.502
we've got this little squiggly line,
it's probably been bothering some of you.

242
00:15:18.502 --> 00:15:22.852
And it says non-nullable property 'Name'
must contain a non-null value when exiting

243
00:15:22.852 --> 00:15:23.606
constructor.

244
00:15:23.606 --> 00:15:26.546
And this is just a compiler warning
saying, hey you have nullability

245
00:15:26.546 --> 00:15:29.331
turned on, so we're gonna give
you these extra compiler hints,

246
00:15:29.331 --> 00:15:32.037
because you haven't declared
this name with a question mark.

247
00:15:32.037 --> 00:15:34.074
You haven't said that this
is a nullable object.

248
00:15:34.074 --> 00:15:38.216
So it should have null or
it should not be null.

249
00:15:38.216 --> 00:15:40.610
So you can do what's called required.

250
00:15:40.610 --> 00:15:44.738
This is really relatively
new in the last version or

251
00:15:44.738 --> 00:15:47.908
two of C# as of the date of this course.

252
00:15:47.908 --> 00:15:51.624
And you can basically say,
you need to instantiate this in the object

253
00:15:51.624 --> 00:15:54.777
initializer or
else we're gonna throw a compiler error.

254
00:15:54.777 --> 00:16:00.820
It'll say required member 'Person.Name;
must be set in the object initializer.

255
00:16:00.820 --> 00:16:04.920
So the point of me showing you all this
is to really just show you that there's

256
00:16:04.920 --> 00:16:08.204
a lot of different ways that you
can kind of declare classes.

257
00:16:08.204 --> 00:16:13.510
I think the most important ones you
need to know are the get set right here,

258
00:16:13.510 --> 00:16:16.521
which just creates a plain old property.

259
00:16:16.521 --> 00:16:23.371
I don't use get init a lot, I have not
used get init required a lot either.

260
00:16:23.371 --> 00:16:27.614
And the main reason is that I'm working on
older code bases a lot of the times, even

261
00:16:27.614 --> 00:16:31.386
just a few years old before nullability
really started to pick up steam.

262
00:16:31.386 --> 00:16:34.947
These are really important when
you're talking about newer projects,

263
00:16:34.947 --> 00:16:38.038
but for older projects,
it's almost impossible to go back and

264
00:16:38.038 --> 00:16:40.913
add nullability in a meaningful
way to the whole project.

265
00:16:40.913 --> 00:16:45.198
If it's of any complex size,
is simply because, hey, we're programmers.

266
00:16:45.198 --> 00:16:49.406
They're paying us to ship features,
not to turn things from nullable to not so

267
00:16:49.406 --> 00:16:51.783
most of the time, that just gets bypassed.

268
00:16:51.783 --> 00:16:56.913
For newer projects,
I would probably tend to use get init and

269
00:16:56.913 --> 00:17:01.554
get required init,
I'd probably use them a lot more.

270
00:17:01.554 --> 00:17:06.591
I want to touch on one last thing,
which is that reference type,

271
00:17:06.591 --> 00:17:12.301
reference types have what's called
reference referential equality.

272
00:17:12.301 --> 00:17:16.043
That means that even
though these references,

273
00:17:16.043 --> 00:17:20.347
these persons,
these person classes instantiated,

274
00:17:20.347 --> 00:17:25.129
have the exact same name and
the exact same age as each other.

275
00:17:25.129 --> 00:17:29.348
If we try to print
Console.WriteLine,

276
00:17:29.348 --> 00:17:36.091
if we print person one equals person two,
it's going to print false.

277
00:17:36.091 --> 00:17:39.571
And the reason is, is that they
are different references in memory,

278
00:17:39.571 --> 00:17:41.192
so they're different things.

279
00:17:41.192 --> 00:17:46.383
You can compare them, you can write
your own custom method to do so,

280
00:17:46.383 --> 00:17:49.218
you can override the object equals.

281
00:17:49.218 --> 00:17:53.468
So we'll talk about overriding when we
talk about abstract classes essentially

282
00:17:53.468 --> 00:17:56.226
allows you to change behavior
of existing methods.

283
00:17:56.226 --> 00:18:01.682
You can add in an equalizers or and
you can override the equals method

284
00:18:01.682 --> 00:18:06.555
such that you're able to tell
the person class that, yes,

285
00:18:06.555 --> 00:18:13.365
these things are equal, but that's
because we've explicitly set it to do so.

286
00:18:13.365 --> 00:18:18.212
That one didn't work, and I think maybe
because hash code isn't set, but anyways,

287
00:18:18.212 --> 00:18:22.657
we'll talk about, I think it's
actually person1.equalsperson2,

288
00:18:22.657 --> 00:18:24.096
that's the one, okay.

289
00:18:24.096 --> 00:18:28.949
I used the wrong comparison,
I was using a double equals

290
00:18:28.949 --> 00:18:33.396
to compare as opposed to
the actual equals method.

291
00:18:33.396 --> 00:18:38.545
Which is to say that equality
in C-Sharp has some nuance to

292
00:18:38.545 --> 00:18:43.905
it such that a person1 double
equals person2 doesn't have

293
00:18:43.905 --> 00:18:49.182
the same behavior as
person1.equals using this method.

294
00:18:49.182 --> 00:18:54.343
You can actually if you want to override
the equals operator, you can actually say,

295
00:18:54.343 --> 00:18:58.714
I want the doubles equal operator to
have this very specific behavior.

296
00:18:58.714 --> 00:19:03.388
In practice I almost never do that, simply
because if I'm checking the equality of

297
00:19:03.388 --> 00:19:07.926
an object like this, I'm probably doing it
in a very explicit way and not hide and

298
00:19:07.926 --> 00:19:11.300
I'm not usually hiding that
behind the language feature.

299
00:19:11.300 --> 00:19:15.278
Because then the expectation is, is that,
well, if I can do double equals on person,

300
00:19:15.278 --> 00:19:16.981
why can't I do it on animals as well?

301
00:19:16.981 --> 00:19:20.457
And if you don't have it
implemented on animals,

302
00:19:20.457 --> 00:19:23.615
now you're inconsistent in your code base.

303
00:19:23.615 --> 00:19:26.001
Lastly, you can implement an interface,

304
00:19:26.001 --> 00:19:28.862
which we will talk about
interfaces very shortly.

305
00:19:28.862 --> 00:19:34.827
You can implement an interface that gives
you a way to define an equals method for

306
00:19:34.827 --> 00:19:40.346
other classes, so you can check it to
see you can define an equals method for

307
00:19:40.346 --> 00:19:44.106
checking to see if it's
equal to another person.

308
00:19:44.106 --> 00:19:48.556
You could also do it if the person class
is different from an employee class,

309
00:19:48.556 --> 00:19:50.653
you can implement this interface.

310
00:19:50.653 --> 00:19:53.256
I just want you to know that
this exists for now, obviously,

311
00:19:53.256 --> 00:19:54.904
we haven't covered interfaces yet.

312
00:19:54.904 --> 00:19:57.873
Just know that this is
a thing that exists,

313
00:19:57.873 --> 00:20:02.243
when looking at interfaces and
you look back and refer to this,

314
00:20:02.243 --> 00:20:06.292
you'll see and
you'll be able to see what it's used for.

315
00:20:06.292 --> 00:20:09.785
But for most of the purposes of things
right now, I will tell you that I almost

316
00:20:09.785 --> 00:20:13.071
never implement this interface,
I almost never write code like this.

317
00:20:13.071 --> 00:20:18.079
Again, I'm usually checking a quality in a
very like explicit way, usually just I'll

318
00:20:18.079 --> 00:20:22.697
define a custom, are these people equal
method or something along those lines?

