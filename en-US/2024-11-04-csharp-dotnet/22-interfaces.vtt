WEBVTT

1
00:00:00.323 --> 00:00:03.274
So up to this point,
we've talked about classes,

2
00:00:03.274 --> 00:00:08.028
we've talked about inheritance of classes,
a really important topic to cover.

3
00:00:08.028 --> 00:00:12.978
So we're gonna talk about probably
the most important implementation

4
00:00:12.978 --> 00:00:17.361
of inheritance in C#,
which is what's called an interface.

5
00:00:17.361 --> 00:00:21.500
So an interface is essentially, think of
it like a micro abstract class with no

6
00:00:21.500 --> 00:00:25.643
inheritance hierarchy, you can actually
inherit from other interfaces, which

7
00:00:25.643 --> 00:00:29.935
we'll talk about, but it's essentially
not a class at all, it's a contract.

8
00:00:29.935 --> 00:00:33.840
And what I mean by that is that it's
something that says we're gonna

9
00:00:33.840 --> 00:00:37.812
define a specific aspect of behavior
that you have to implement, but

10
00:00:37.812 --> 00:00:41.323
we're not gonna be opinionated
about how you implement it.

11
00:00:41.323 --> 00:00:43.634
Let's take this IDatabase.

12
00:00:43.634 --> 00:00:48.738
So first of all naming convention,
interfaces are named

13
00:00:48.738 --> 00:00:53.213
always in Pascal case and
always prefixed by an I.

14
00:00:53.213 --> 00:00:57.649
That's an important part of interfaces
to know, when you see I something,

15
00:00:57.649 --> 00:01:02.732
unless it's a full word that starts with
I, you should think immediately interface.

16
00:01:02.732 --> 00:01:06.219
So let's take this example for instance.

17
00:01:06.219 --> 00:01:08.910
So in the real world,
in the programming world,

18
00:01:08.910 --> 00:01:12.983
there's dozens of different ways and
different means of connecting, or

19
00:01:12.983 --> 00:01:17.139
there's dozens of different database
products that exist in the market.

20
00:01:17.139 --> 00:01:22.036
SQL Server is one that's Microsoft's,
Postgres is another,

21
00:01:22.036 --> 00:01:25.675
there's Oracle,
there's a huge ton of them.

22
00:01:25.675 --> 00:01:28.308
I mainly use SQL Server and Postgres.

23
00:01:28.308 --> 00:01:32.880
And between those two systems,
they are different database systems,

24
00:01:32.880 --> 00:01:37.073
they have similar but
different authentication requirements,

25
00:01:37.073 --> 00:01:42.119
they have similar but different ways
of communicating with those databases.

26
00:01:42.119 --> 00:01:47.531
So what this interface is meant
to define is that we know that

27
00:01:47.531 --> 00:01:52.836
we wanna connect to a database,
and we know we wanna be able

28
00:01:52.836 --> 00:01:58.492
to disconnect to the database,
but how we do that is up to you.

29
00:01:58.492 --> 00:02:01.727
Inheritance, first of all,
why use interfaces at all?

30
00:02:01.727 --> 00:02:08.071
First of all, multiple inheritance is not
a thing, if I flip it back to my code, and

31
00:02:08.071 --> 00:02:13.164
for instance, I define a,
skip this back to a state, there we go.

32
00:02:13.164 --> 00:02:18.558
And I define a separate robot class.

33
00:02:18.558 --> 00:02:23.476
I can't have an hourly employee
that inherits from a robot and

34
00:02:23.476 --> 00:02:28.316
an employee, so
multiple inheritance just does not exist.

35
00:02:28.316 --> 00:02:32.880
C#, however, has interfaces to allow you
to kind of get multiple inheritance,

36
00:02:32.880 --> 00:02:36.335
it's essentially,
it's what's called implementation.

37
00:02:36.335 --> 00:02:39.415
Instead of inheriting from an object,
you implement an interface.

38
00:02:39.415 --> 00:02:44.664
So it allows us to have a lot of
the similar functionality as multiple

39
00:02:44.664 --> 00:02:50.844
interfaces without all of the problems
that comes with multiple inheritance.

40
00:02:50.844 --> 00:02:53.320
They also emphasize composability, so

41
00:02:53.320 --> 00:02:57.540
it essentially allows you to take
an object and give it a few different

42
00:02:57.540 --> 00:03:02.739
behaviors that may be important to other
objects in the world that you've created.

43
00:03:02.739 --> 00:03:07.187
And this promotes a flexible
kind of modular code design,

44
00:03:07.187 --> 00:03:10.737
and it makes it easy to extend and
change code.

45
00:03:10.737 --> 00:03:15.604
And understanding interfaces is
really crucial to understanding how,

46
00:03:15.604 --> 00:03:19.113
especially when we get to
the ASP.NET Core course,

47
00:03:19.113 --> 00:03:25.036
interfaces become especially important to
understand because they're everywhere.

48
00:03:25.036 --> 00:03:29.374
So, I think that the main thing is that
they provide no behaviors by default,

49
00:03:29.374 --> 00:03:33.606
they're basically saying, I need you
to implement this behavior for me.

50
00:03:33.606 --> 00:03:37.682
It's wanting to tell you about how
a contract should be filled, but

51
00:03:37.682 --> 00:03:42.400
not how a contract should be fulfilled,
it does not wanna tell you how to do it,

52
00:03:42.400 --> 00:03:44.999
doesn't wanna tell you how to do your job.

53
00:03:44.999 --> 00:03:47.855
So you can think of classes
as defining the behaviors and

54
00:03:47.855 --> 00:03:51.624
the properties of the thing, and
interfaces define the thing's shape,

55
00:03:51.624 --> 00:03:54.504
general shape,
without opinions about the behavior.

56
00:03:54.504 --> 00:03:59.726
It may define properties, it may define
methods, it just depends on the interface.

57
00:03:59.726 --> 00:04:05.767
So an interface is declared
very simply by instead of

58
00:04:05.767 --> 00:04:10.859
public class, you have public interface.

59
00:04:10.859 --> 00:04:15.724
And then you have the name of the
interface, again, usually prefixed with I.

60
00:04:15.724 --> 00:04:19.118
You can declare them without the I,
but C# is going to tell you now

61
00:04:19.118 --> 00:04:23.224
you really should do that and provide
a link to documentation explaining why.

62
00:04:23.224 --> 00:04:26.087
For consistency, prefix it with an I.

63
00:04:26.087 --> 00:04:30.064
And you're gonna see that there's no
behaviors, there's no compiler, errors,

64
00:04:30.064 --> 00:04:31.194
there's no warnings.

65
00:04:31.194 --> 00:04:35.736
It's because we've simply defined
this interface by itself, and

66
00:04:35.736 --> 00:04:39.252
we've done it in a way that
C# is totally okay with.

67
00:04:39.252 --> 00:04:43.059
You can define an interface and then not
use it and give it no behaviors, but

68
00:04:43.059 --> 00:04:47.178
the moment you implement that interface
on a class is when it becomes important.

69
00:04:47.178 --> 00:04:50.478
So let me show you kind of what
that would look like in a very,

70
00:04:50.478 --> 00:04:53.187
it's a little bit contrived,
but it will work.

71
00:04:53.187 --> 00:04:57.328
So if we have a SqlDatabase.

72
00:04:57.328 --> 00:05:00.282
So let's call this a SqlServerDatabase,
and we'll even

73
00:05:00.282 --> 00:05:04.430
call it MicrosoftSqlServer, just to say
that this is a separate product, right?

74
00:05:04.430 --> 00:05:06.464
I'm gonna go ahead and
delete the implementation.

75
00:05:06.464 --> 00:05:09.734
First thing you're gonna see is that
we get a little squiggles, it says,

76
00:05:09.734 --> 00:05:13.432
this doesn't implement this interface
member, it doesn't implement connect,

77
00:05:13.432 --> 00:05:14.886
disconnect, or is connected.

78
00:05:14.886 --> 00:05:21.488
You're forced to declare all three or
else you will get a compiler error.

79
00:05:21.488 --> 00:05:25.646
So this is where the different
behavior comes in, right?

80
00:05:25.646 --> 00:05:31.927
So you have a class that is the way
that we connect to MicrosoftSqlServer,

81
00:05:31.927 --> 00:05:37.093
but again, it's different than
the way that we would do if we

82
00:05:37.093 --> 00:05:42.892
were declaring a PostgresDatabase,
that implements IDatabase.

83
00:05:42.892 --> 00:05:45.845
It's gonna have a totally
different set of, like I said,

84
00:05:45.845 --> 00:05:50.202
authentication or negotiation about how to
connect and how to send and receive data.

85
00:05:50.202 --> 00:05:54.539
They're gonna be different because
they're different database systems.

86
00:05:54.539 --> 00:05:59.281
So it's gonna want you to fulfill
this contract as well same as that.

87
00:05:59.281 --> 00:06:02.819
I'm gonna use my tooling to do it, so
command., and I'm gonna say implement

88
00:06:02.819 --> 00:06:06.266
interface, and you're gonna see that
it's going to kind of implement it.

89
00:06:06.266 --> 00:06:09.343
It's gonna just define the structure,
but it's also gonna say, hey,

90
00:06:09.343 --> 00:06:12.017
we're gonna throw a bunch of not
implemented exceptions to say

91
00:06:12.017 --> 00:06:13.602
you need to fill in these parts of it.

92
00:06:13.602 --> 00:06:17.885
So we'll go ahead and
do that real quick, same as below.

93
00:06:17.885 --> 00:06:26.955
And so this might be
Console.WriteLine Connected to Postgres.

94
00:06:26.955 --> 00:06:31.014
Let's pretend this is
a Postgres connection.

95
00:06:31.014 --> 00:06:35.312
Do the same thing down here, boom.

96
00:06:35.312 --> 00:06:40.834
Disconnected from Postgres, okay?

97
00:06:40.834 --> 00:06:44.425
So again, abstract class.

98
00:06:44.425 --> 00:06:48.414
When you inherit from a class,
it's called inheriting from it,

99
00:06:48.414 --> 00:06:52.200
when you implement an interface,
you're implementing it.

100
00:06:52.200 --> 00:06:54.554
A couple of things to note, C#,

101
00:06:54.554 --> 00:07:00.033
they introduced something called
default implementations in interfaces.

102
00:07:00.033 --> 00:07:04.543
Which is a behavior that's kind of one of
those mind pretzel things that I saw and

103
00:07:04.543 --> 00:07:05.566
my eyes crossed.

104
00:07:05.566 --> 00:07:07.806
It's not something that I do ever and

105
00:07:07.806 --> 00:07:11.644
that's because that's really
not the point of an interface.

106
00:07:11.644 --> 00:07:16.360
These have a very,
very narrow use case, but in theory,

107
00:07:16.360 --> 00:07:20.490
you can give a interface
now a default behavior and

108
00:07:20.490 --> 00:07:26.803
then not force the implementing class
to actually override that behavior.

109
00:07:26.803 --> 00:07:31.146
So you could say Console.WriteLine,
why does this exist?

110
00:07:31.146 --> 00:07:35.307
This is one of those features of C#
that I simply just don't agree with, and

111
00:07:35.307 --> 00:07:39.810
I don't agree with it because interfaces
are meant to be kind of a clean contract.

112
00:07:39.810 --> 00:07:43.948
Just implement this behavior and
we're good.

113
00:07:43.948 --> 00:07:48.639
So Spencer doesn't use them,
there's my little spicy take, and I don't,

114
00:07:48.639 --> 00:07:53.549
I just haven't seen them in the wild,
I think most people respect interfaces for

115
00:07:53.549 --> 00:07:55.230
what they're meant to be.

116
00:07:55.230 --> 00:07:59.887
A couple of other kinda notes,
kind of curiosities if you will, so

117
00:07:59.887 --> 00:08:03.563
there's what's called
a static abstract method.

118
00:08:03.563 --> 00:08:08.579
And so what this is, essentially,
is you can define a static method

119
00:08:08.579 --> 00:08:14.308
in a implementing class, you can force
that class to define a static method.

120
00:08:14.308 --> 00:08:17.754
Again, something that is
a very narrow use case, and

121
00:08:17.754 --> 00:08:23.050
actually is slightly more useful in my
opinion, than default implementations.

122
00:08:23.050 --> 00:08:28.175
I have not written one of these in real
life, I will say that I'm showing it

123
00:08:28.175 --> 00:08:33.217
to you so that you can kinda understand
that this is a syntax that exists,

124
00:08:33.217 --> 00:08:37.289
but in the real world,
I say it's used pretty sparingly.

125
00:08:37.289 --> 00:08:40.692
I'm sure it's used some places,
I haven't used one yet.

126
00:08:40.692 --> 00:08:43.973
So it exists, this essentially says,
hey, derived class,

127
00:08:43.973 --> 00:08:47.456
create a method that does this thing,
but it's a static method.

128
00:08:47.456 --> 00:08:53.163
So it's not actually part of that,
the behavior of an instance of that class,

129
00:08:53.163 --> 00:08:56.197
so it's a little odd, but it does exist.

130
00:08:56.197 --> 00:09:00.227
There's a couple of big use cases for
interfaces.

131
00:09:00.227 --> 00:09:05.427
So for a service-based architecture,
and in the ASP.NET Core course, when

132
00:09:05.427 --> 00:09:10.574
we get to talk about dependency injection,
this is gonna become a big topic.

133
00:09:10.574 --> 00:09:15.880
It will start to kind of put
together why this is important.

134
00:09:15.880 --> 00:09:19.931
But service-based architectures
that include dependency injection,

135
00:09:19.931 --> 00:09:22.290
make interfaces really important to use.

136
00:09:22.290 --> 00:09:26.945
They can also be used to mark classes,
you can have an empty

137
00:09:26.945 --> 00:09:32.361
interface that just simply marks
a class as having that interface.

138
00:09:32.361 --> 00:09:36.641
Which doesn't sound useful because you're
not providing any specific behaviors,

139
00:09:36.641 --> 00:09:38.968
you're not providing specific properties.

140
00:09:38.968 --> 00:09:43.164
But some frameworks can see that marker
and then perform different behaviors on

141
00:09:43.164 --> 00:09:46.681
that object downstream based on
just the presence of that marker.

142
00:09:46.681 --> 00:09:49.351
That's a more of an advanced case,

143
00:09:49.351 --> 00:09:53.535
most of the time interfaces
are gonna have behaviors and

144
00:09:53.535 --> 00:09:58.710
properties that the implementing
class is gonna want to implement.

145
00:09:58.710 --> 00:10:04.082
But this is a thing that I do and
in the ASP.NET Core course,

146
00:10:04.082 --> 00:10:07.422
we'll see a sort of example of this.

147
00:10:07.422 --> 00:10:08.835
I use interfaces,

148
00:10:08.835 --> 00:10:13.699
I don't necessarily think of them
as a way to avoid inheritance.

149
00:10:13.699 --> 00:10:17.529
But it is a way of kind of providing
multiple behaviors to a class

150
00:10:17.529 --> 00:10:22.300
without trying to inherit from a class
that might have a couple of behaviors and

151
00:10:22.300 --> 00:10:26.736
then implement it and then inherit
from a class that does the same thing.

152
00:10:26.736 --> 00:10:31.269
That also doesn't mean that you want
a class that implements ten interfaces.

153
00:10:31.269 --> 00:10:35.452
There may be a use for that, but
most of my classes are gonna implement no

154
00:10:35.452 --> 00:10:38.967
more than one, maybe two,
in most of the code that I write.

155
00:10:38.967 --> 00:10:41.826
There are some times where
there are exceptions.

156
00:10:41.826 --> 00:10:46.130
If I want that IEquatable interface
where I wanna be able to say,

157
00:10:46.130 --> 00:10:50.610
hey, I need to be able to compare
this monkey to this human, okay?

158
00:10:50.610 --> 00:10:54.591
So I need to implement that interface in
order to provide a strongly typed way of

159
00:10:54.591 --> 00:10:56.655
doing that, there's reasons to do it.

160
00:10:56.655 --> 00:11:02.235
But for the most part, I typically just do
an interface to define the contract and

161
00:11:02.235 --> 00:11:05.779
then the implementation
to actually do the thing.

162
00:11:05.779 --> 00:11:09.352
This really also gets into testing,
which again,

163
00:11:09.352 --> 00:11:14.851
we'll talk about in the ASP.NET Core
course cuz testing is a big part of that.

164
00:11:14.851 --> 00:11:17.328
&gt;&gt; Student 1: Are there use
cases where you'd reach for

165
00:11:17.328 --> 00:11:19.607
an abstract class over an interface?

166
00:11:19.607 --> 00:11:21.330
&gt;&gt; Spencer Schneidenbach: Yes, absolutely.

167
00:11:21.330 --> 00:11:23.496
Typically, I'm gonna reach for

168
00:11:23.496 --> 00:11:27.526
an abstract class when I want
to define behaviors for a class.

169
00:11:27.526 --> 00:11:32.970
Specifically, when I'm writing
ASP.NET Core code, I will have an abstract

170
00:11:32.970 --> 00:11:38.174
class that will provide some behavior,
some component of ASP.NET Core.

171
00:11:38.174 --> 00:11:42.558
And I wanna copy that to all
of the derived classes, but

172
00:11:42.558 --> 00:11:46.766
do it in a way that kind of
reduces code duplication.

173
00:11:46.766 --> 00:11:50.565
So absolutely, I use abstract classes
frequently, but I use interfaces more.

174
00:11:50.565 --> 00:11:51.658
Good question.

