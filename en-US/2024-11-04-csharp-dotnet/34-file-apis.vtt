WEBVTT

1
00:00:00.490 --> 00:00:01.637
&gt;&gt; Spencer Schneidenbach: Almost
to the end,

2
00:00:01.637 --> 00:00:04.880
just a few other kinds of
APIs that I wanna talk about.

3
00:00:06.180 --> 00:00:09.896
So file APIs, so I mentioned streams,
I was hard on streams,

4
00:00:09.896 --> 00:00:14.752
I was big on streams and I said, yes, you
need to use streams when you don't wanna

5
00:00:14.752 --> 00:00:19.660
necessarily put something into memory,
but you sometimes kinda do, right?

6
00:00:19.660 --> 00:00:21.890
Out of convenience you're
loading up a spreadsheet,

7
00:00:21.890 --> 00:00:24.175
it's only got a few hundred
kilobytes of data, right?

8
00:00:24.175 --> 00:00:27.768
You don't need to worry too much about
resources, it's not a 50 megabyte or

9
00:00:27.768 --> 00:00:28.866
500 megabyte file.

10
00:00:28.866 --> 00:00:32.774
So there's a file class that
you can use to read and

11
00:00:32.774 --> 00:00:35.392
write files directly from disk.

12
00:00:37.302 --> 00:00:41.981
Take for example, there's three main
methods that I like to use that I use

13
00:00:41.981 --> 00:00:47.268
frequently, File.ReadA\\Text,
File.ReadA\\Lines, which will return

14
00:00:47.268 --> 00:00:52.948
a array of strings and File.ReadA\\Bytes,
which will read that file as a byte array.

15
00:00:54.508 --> 00:00:59.128
And so this is how you call them, it's
very simple, you call File.ReadA\\Text,

16
00:00:59.128 --> 00:01:01.063
I can show you an example of it here.

17
00:01:02.273 --> 00:01:06.117
Let's go ahead and o this new file
doesn't never works for me up here so

18
00:01:06.117 --> 00:01:07.563
I better do it right here.

19
00:01:07.563 --> 00:01:12.623
I'm gonna do new file file.txt and
some stuff.

20
00:01:12.623 --> 00:01:17.693
Some more stuff and
very important I need to set

21
00:01:17.693 --> 00:01:24.193
the properties of this thing to
make sure that it copies to,

22
00:01:24.193 --> 00:01:30.830
actually, what I think we can
just copy it to the route here.

23
00:01:30.830 --> 00:01:36.044
File.text, well regardless not letting

24
00:01:36.044 --> 00:01:40.964
me copy paste it and that's okay.

25
00:01:40.964 --> 00:01:47.166
Okay, I do wanna point out that if we
wanted to read this file as a this text

26
00:01:47.166 --> 00:01:52.857
file as a text, as a string,
as just a string of the file contents,

27
00:01:52.857 --> 00:01:57.464
we could do file and
you'll note that read all lines.

28
00:01:57.464 --> 00:02:01.741
You'll note that it is just accessible
sometimes you have to import

29
00:02:01.741 --> 00:02:04.304
system.io.file, which is fine.

30
00:02:04.304 --> 00:02:07.573
So I wanna say,
read all read all text, actually,

31
00:02:07.573 --> 00:02:11.114
you'll notice that there's
an async method of this.

32
00:02:11.114 --> 00:02:16.421
So, again, async all the way down when you
can, so if you've got your file.text, and

33
00:02:16.421 --> 00:02:21.402
you'll notice that this reads it in as a
string, and then the file read all lines.

34
00:02:24.642 --> 00:02:31.082
Reads it in as a string array, and
then byte of course is a byte array.

35
00:02:31.082 --> 00:02:35.467
Okay, so useful for some file
operations not strictly speaking,

36
00:02:35.467 --> 00:02:38.992
something that you'll do a lot of or
every day.

37
00:02:38.992 --> 00:02:42.819
Most of the times when you're talking,
especially in the context of a web app,

38
00:02:42.819 --> 00:02:46.763
you're probably storing your files off on
some remote Azure storage or Amazon S3

39
00:02:46.763 --> 00:02:51.016
bucket or something like that where you're
not even interacting with the file system.

40
00:02:51.016 --> 00:02:54.249
But it's important to know
that these things exist.

41
00:02:54.249 --> 00:02:58.239
The file API also has file.copy,
file.move,

42
00:02:58.239 --> 00:03:03.309
file.delete, it also allows you
to get info about the file.

43
00:03:03.309 --> 00:03:06.790
So it's sometimes important to be able to
say, hey, this file exists on disk, but

44
00:03:06.790 --> 00:03:08.199
I need to know metadata about it.

45
00:03:08.199 --> 00:03:11.882
I need to know its size I need to know
the permissions that exist on it,

46
00:03:11.882 --> 00:03:14.104
what users can access it and in that case,

47
00:03:14.104 --> 00:03:17.799
the file Info class is what
would be useful for that.

48
00:03:17.799 --> 00:03:19.781
So it has a few properties
most of the time,

49
00:03:19.781 --> 00:03:23.708
I'm usually just worried about the path,
sometimes the file length if I need to be.

50
00:03:24.738 --> 00:03:28.735
But essentially what you do is you
create a new copy of file info,

51
00:03:28.735 --> 00:03:31.218
you bring in the path of the file.

52
00:03:31.218 --> 00:03:34.436
If it doesn't exist, you'll get
an exception otherwise, if it does exist,

53
00:03:34.436 --> 00:03:37.558
you'll get a fully usable object that
will give you all the information that

54
00:03:37.558 --> 00:03:41.093
you could ever want about that object
including the full path back to it.

55
00:03:41.093 --> 00:03:44.790
You could even use file
info.delete to delete the file and

56
00:03:44.790 --> 00:03:50.153
correspondingly there is a directory class
that you can use to create directories.

57
00:03:50.153 --> 00:03:52.492
This is very useful when you're
doing file processing and

58
00:03:52.492 --> 00:03:54.503
you need to create directories and
create files.

59
00:03:54.503 --> 00:03:56.772
And maybe you're creating
these very temporarily, or

60
00:03:56.772 --> 00:03:59.883
you just wanna make sure that the final
resting place with this file exists.

61
00:03:59.883 --> 00:04:04.162
So directory.createdirectory is
something that I'll use frequently.

62
00:04:04.162 --> 00:04:08.456
If it exists, no action is taken so
you can call this method multiple times at

63
00:04:08.456 --> 00:04:11.222
the same argument,
which is important to know.

64
00:04:12.552 --> 00:04:16.494
Lastly, if you're concerned
about getting paths or

65
00:04:16.494 --> 00:04:21.321
need to get paths to files or
you need to construct paths to a file.

66
00:04:21.321 --> 00:04:24.595
Maybe you have multiple directories you
need to chain together to get the final

67
00:04:24.595 --> 00:04:27.051
resting place for
the file that you need to create.

68
00:04:27.051 --> 00:04:31.419
You can use the path class to use
these APIs, such as path combine,

69
00:04:31.419 --> 00:04:35.397
which will essentially create
directory\file.text, so

70
00:04:35.397 --> 00:04:41.325
it automatically adds the operating
systems way of separating those files.

71
00:04:41.325 --> 00:04:44.929
You can get the files extension,
or you can even get a random or

72
00:04:44.929 --> 00:04:49.714
temporary file name and that could be for
something that you just store locally for

73
00:04:49.714 --> 00:04:51.465
a very small amount of time.

74
00:04:51.465 --> 00:04:54.458
And I do this frequently,
especially with deployed applications for

75
00:04:54.458 --> 00:04:57.093
my clients, where I say,
I need to do some quick processing,

76
00:04:57.093 --> 00:04:59.142
I need to download this file real quick.

77
00:04:59.142 --> 00:05:01.882
I'm just gonna borrow a little disk space,
I'm not gonna borrow memory.

78
00:05:01.882 --> 00:05:04.811
I'm just gonna borrow some
disk space from you, but

79
00:05:04.811 --> 00:05:09.472
I'll release the file after I'm done and
after much testing and sometimes back and

80
00:05:09.472 --> 00:05:13.542
forth with the code,
you'll actually get it to do that.

81
00:05:13.542 --> 00:05:16.058
So file APIs, sometimes useful,

82
00:05:16.058 --> 00:05:21.060
not necessarily super important but
it's there if you need it.

83
00:05:21.060 --> 00:05:24.245
&gt;&gt; Student: Are there any techniques
to make sure you're able to unlock or

84
00:05:24.245 --> 00:05:27.210
release a file even if
your program crashes?

85
00:05:27.210 --> 00:05:28.520
&gt;&gt; Spencer Schneidenbach: If
your program crashes,

86
00:05:28.520 --> 00:05:31.150
it's gonna release the handle
on that file, yeah.

87
00:05:32.740 --> 00:05:35.121
&gt;&gt; Student: And do you have any
recommendations for any LDAP or

88
00:05:35.121 --> 00:05:38.270
Active Directory libraries
that are commonly used?

89
00:05:38.270 --> 00:05:40.796
&gt;&gt; Spencer Schneidenbach: I do not, that
is not something I've had to touch for

90
00:05:40.796 --> 00:05:41.434
a long time.

91
00:05:42.654 --> 00:05:43.230
&gt;&gt; Student: Thankfully.

92
00:05:43.230 --> 00:05:45.255
&gt;&gt; Spencer Schneidenbach: Thankfully,
I didn't want to say, but

93
00:05:45.255 --> 00:05:46.214
you said it for me.

94
00:05:46.214 --> 00:05:49.958
Yeah, I haven't had to touch LDAP or
Active Directory in a long time,

95
00:05:49.958 --> 00:05:53.891
I do believe, .NET Framework,
when I've had to do that back in the day,

96
00:05:53.891 --> 00:05:55.554
had a pretty rich experience.

97
00:05:55.554 --> 00:05:59.010
So I would assume those APIs made
their way to the core library.

98
00:06:00.791 --> 00:06:05.304
&gt;&gt; Student: If a user does not have
elevated permissions to create

99
00:06:05.304 --> 00:06:10.031
a directory to the C or C temp,
how do we get around that.

100
00:06:11.141 --> 00:06:13.951
&gt;&gt; Spencer Schneidenbach: If they don't
have permissions to do so, typically,

101
00:06:13.951 --> 00:06:17.966
you have permissions to write to some
directory, some temporary director.

102
00:06:17.966 --> 00:06:21.111
Not usually, not typically the root
of C unless you're elevated,

103
00:06:21.111 --> 00:06:23.116
is there a way to get around that?

104
00:06:23.116 --> 00:06:28.366
No, make sure that your program is
executing under the correct user context.

105
00:06:28.366 --> 00:06:30.755
But typically I've not found that
creating temporary files has been

106
00:06:30.755 --> 00:06:31.507
problematic for me.

