WEBVTT

1
00:00:00.000 --> 00:00:01.887
&gt;&gt; Spencer Schneidenbach: Let's
talk about generics,

2
00:00:01.887 --> 00:00:04.905
which is a advanced language feature for
sure,

3
00:00:04.905 --> 00:00:09.885
which is one of the things that I really
wish was in the original.net runtime,

4
00:00:09.885 --> 00:00:14.206
but it didn't make its way in,
because you have to ship obviously.

5
00:00:14.206 --> 00:00:20.595
And they basically allow you to provide to
define different things in different ways,

6
00:00:20.595 --> 00:00:26.020
and it's a good way of implement,
it's C sharps main way of implementing

7
00:00:26.020 --> 00:00:31.120
polymorphism or different forms for
things inside of the language.

8
00:00:32.340 --> 00:00:35.806
So this is the syntax for
what's called a generic type.

9
00:00:35.806 --> 00:00:39.298
And you can see that it looks kind of
funky, it's like, where did the angular

10
00:00:39.298 --> 00:00:43.457
come in, why are we writing react in our,
in a C sharp code, but it is a open.

11
00:00:43.457 --> 00:00:46.999
It is a alligator mouth open
a greater than sign, or,

12
00:00:46.999 --> 00:00:50.777
I guess that's the less and
sign, the name of the type and

13
00:00:50.777 --> 00:00:54.437
the the closing bracket,
the closing angle bracket.

14
00:00:55.937 --> 00:00:59.550
And what this can do is it allows
us to define to find types that do,

15
00:00:59.550 --> 00:01:02.789
kind of different things based
on the type that we give it.

16
00:01:02.789 --> 00:01:05.043
Let me show you what that looks like.

17
00:01:05.043 --> 00:01:08.153
Let's clear out all this other stuff boom,
let's put that in.

18
00:01:08.153 --> 00:01:11.973
So what we've defined is a very simple,
very contrived example.

19
00:01:11.973 --> 00:01:14.062
Again, not real code that I would write,
but good for

20
00:01:14.062 --> 00:01:15.883
illustrating this language feature.

21
00:01:15.883 --> 00:01:18.534
Let me break this down for
you a little bit.

22
00:01:18.534 --> 00:01:22.313
This is said to be
a class called box of T.

23
00:01:23.643 --> 00:01:26.219
Now, T can be named anything.

24
00:01:26.219 --> 00:01:31.623
Are all types that are,
what are called generic arguments.

25
00:01:31.623 --> 00:01:35.623
This is a generic argument,
aways are denoted with a T first.

26
00:01:35.623 --> 00:01:39.691
Let's call it T item,
kind of just to set it home.

27
00:01:39.691 --> 00:01:43.353
And you notice that,
when we hover over T item,

28
00:01:43.353 --> 00:01:46.291
it doesn't really tell us what it is.

29
00:01:46.291 --> 00:01:47.991
It just says T item and box, T item.

30
00:01:47.991 --> 00:01:50.643
Well, that seems kind of circular,
what does that mean?

31
00:01:50.643 --> 00:01:52.101
Let me show you.

32
00:01:52.101 --> 00:01:54.355
So let's say that I wanted to,

33
00:01:54.355 --> 00:01:59.683
something that I wanted to box
up a string, box of a string.

34
00:01:59.683 --> 00:02:03.143
I can instantiate this object, right?

35
00:02:03.143 --> 00:02:05.863
And I can give it a type called string.

36
00:02:05.863 --> 00:02:08.537
So give it the type argument, open and

37
00:02:08.537 --> 00:02:12.475
close parentheses to finish
calling the constructor.

38
00:02:12.475 --> 00:02:15.060
What are the implications of this,
why is this useful?

39
00:02:15.060 --> 00:02:20.281
Well, the implications of it are that
we now have methods on this instance,

40
00:02:20.281 --> 00:02:24.522
where the only thing that we can
do is get an item of that type and

41
00:02:24.522 --> 00:02:27.995
set an item of that type,
so let me show you.

42
00:02:27.995 --> 00:02:33.214
So box of a string called setitem,
and we open a parentheses and

43
00:02:33.214 --> 00:02:37.955
we look, we see that string
item is the type of the thing.

44
00:02:37.955 --> 00:02:42.121
Now that's weird because it's T item,
what's T item?

45
00:02:42.121 --> 00:02:46.911
Well, we've defined the type by
providing it in this type argument here.

46
00:02:46.911 --> 00:02:50.195
So we can set this item to
an instance of a string.

47
00:02:50.195 --> 00:02:55.765
And then of course we can,
&gt;&gt; Spencer Schneidenbach: Print

48
00:02:55.765 --> 00:03:00.137
a line, box of string, and

49
00:03:00.137 --> 00:03:05.853
get item to get the copy of the item.

50
00:03:05.853 --> 00:03:08.706
And you can see that our ASDF
string is printed right here.

51
00:03:10.246 --> 00:03:12.178
Seems weird on its face, but

52
00:03:12.178 --> 00:03:17.664
it's very useful because now we can do
certain things like restrict behaviors.

53
00:03:17.664 --> 00:03:20.716
Now I'm all about safety, I'm all about
restricting behavior where it makes sense.

54
00:03:20.716 --> 00:03:24.333
So, box of a string.setitem,
the moment I try to put anything in there

55
00:03:24.333 --> 00:03:26.696
that's not a string,
it gives me a compiler.

56
00:03:26.696 --> 00:03:30.794
It says cannot convert from int to string
because it's expecting a string to this

57
00:03:30.794 --> 00:03:34.846
box object because that's what we've
specified that this is a box of a string.

58
00:03:36.206 --> 00:03:40.515
Correspondingly, we can
also declare box of an int.

59
00:03:40.515 --> 00:03:43.554
New box of that's how
you say that an int and

60
00:03:43.554 --> 00:03:48.790
box of an int has the same properties as
box of a string in that you cannot set

61
00:03:48.790 --> 00:03:53.802
it to something that is not the target
type, which in this case is int.

62
00:03:53.802 --> 00:03:59.166
So extremely handy, especially as you
get down into, like I said, length.

63
00:03:59.166 --> 00:04:02.687
This is one of the foundational things
that makes link work which we'll talk

64
00:04:02.687 --> 00:04:03.683
about here shortly.

65
00:04:03.683 --> 00:04:06.543
I'm gonna show you a couple of
other properties of generics.

66
00:04:07.643 --> 00:04:12.013
This is how you create a generic class, we
kinda already did that in our box example.

67
00:04:12.013 --> 00:04:16.419
You can also create
a generically typed method so

68
00:04:16.419 --> 00:04:21.682
you can have a method on a class
that is not a generic class,

69
00:04:21.682 --> 00:04:24.383
but that is a generic method.

70
00:04:24.383 --> 00:04:31.774
And what you can do is use that,
let me copy paste this code in.

71
00:04:33.525 --> 00:04:36.395
&gt;&gt; Spencer Schneidenbach: Delete that,
put this in here.

72
00:04:36.395 --> 00:04:40.428
And this one's a really silly, let's call
this a static class, because it's kind of

73
00:04:40.428 --> 00:04:43.852
doesn't do anything static here,
because it doesn't do anything, and

74
00:04:43.852 --> 00:04:47.856
we can define a method on it called Get
default value, where we pass in a type.

75
00:04:47.856 --> 00:04:53.069
So we know that, based on the fact
that it's returning the default value,

76
00:04:53.069 --> 00:04:57.123
that the default value could be for
into, could be zero for

77
00:04:57.123 --> 00:05:01.143
a reference type,
like person it would be null.

78
00:05:01.143 --> 00:05:06.251
So what we can do is we can say
var default value of int and

79
00:05:06.251 --> 00:05:12.933
then we can say utilities do get default
value pass in the int that it is.

80
00:05:12.933 --> 00:05:19.382
And because we've defined the generic type
here as our return type for our method.

81
00:05:19.382 --> 00:05:21.740
We're gonna go down here and we're going
to see that we get an int out of that.

82
00:05:23.250 --> 00:05:27.266
Really cool, really neat,
really a ton of flexibility.

83
00:05:27.266 --> 00:05:31.760
It looks strange, just wait,
best is yet to come.

84
00:05:31.760 --> 00:05:33.783
I'm gonna show you a few more things,
just about generics.

85
00:05:33.783 --> 00:05:35.731
We're not gonna go over them in the code,
but

86
00:05:35.731 --> 00:05:38.571
I do want you to make you aware
because they are important to know.

87
00:05:38.571 --> 00:05:43.191
So you can basically constrain
a type of a generic to be

88
00:05:43.191 --> 00:05:48.548
a specific thing where you can
say that I want this type of tea.

89
00:05:48.548 --> 00:05:52.558
The only types that can go in there
can be class and eye disposable.

90
00:05:52.558 --> 00:05:57.221
So int, for instance, would not fulfill
the requirements of this generic type.

91
00:05:57.221 --> 00:06:02.119
It's called a type restriction or
type constraint.

92
00:06:02.119 --> 00:06:07.040
And it's supremely useful because what you
can do then is you can now know that when

93
00:06:07.040 --> 00:06:09.819
this T item is passed
into this manage method,

94
00:06:09.819 --> 00:06:12.164
we know that it's a reference type.

95
00:06:12.164 --> 00:06:14.070
And we also know the behaviors and

96
00:06:14.070 --> 00:06:17.554
properties that it gets from
the interface that we've set.

97
00:06:17.554 --> 00:06:20.982
It has to be an I disposable interface,
it has to implement that interface.

98
00:06:25.244 --> 00:06:29.212
&gt;&gt; Spencer Schneidenbach: Same thing here
you can see that in this Data Manager

99
00:06:29.212 --> 00:06:33.643
class, this contrived example
that we've constrained

100
00:06:33.643 --> 00:06:38.551
the type that T has to be a class and
it has to be an I track entity.

101
00:06:38.551 --> 00:06:44.064
And And you can see that i tracked
entity has an id guid property, and

102
00:06:44.064 --> 00:06:50.951
thus we can access that item's id property
because we know of its type ahead of time.

103
00:06:50.951 --> 00:06:53.571
So, pretty useful,
multiple type generics so

104
00:06:53.571 --> 00:06:58.156
generics can have multiple type parameters
I think the language limit is 16, but

105
00:06:58.156 --> 00:07:01.365
I've never gone higher than two or
three, I think.

106
00:07:01.365 --> 00:07:04.817
I don't even know if I've
gone as high as three, but

107
00:07:04.817 --> 00:07:07.961
one and two are pretty common for
me to declare.

108
00:07:07.961 --> 00:07:10.647
You'll see that when we look at
the dictionary data structure,

109
00:07:10.647 --> 00:07:13.795
this will become super, this will
become important as we talk about that.

110
00:07:15.645 --> 00:07:20.348
So the thing that we're gonna talk about,
especially in the ASP.NET Core class,

111
00:07:20.348 --> 00:07:23.696
the thing that I see a lot is
this idea of a repository.

112
00:07:23.696 --> 00:07:27.233
So I don't talk in software patterns
a lot, because I feel like, especially for

113
00:07:27.233 --> 00:07:30.614
newer programmers, that we could talk
about software patterns all day, but

114
00:07:30.614 --> 00:07:34.456
they're little too abstract sometimes
to really know what they mean.

115
00:07:34.456 --> 00:07:37.205
But there are some software patterns
that are really important to know and

116
00:07:37.205 --> 00:07:37.747
understand.

117
00:07:37.747 --> 00:07:42.552
One of them is the repository, pattern,
okay, basically a way of a common

118
00:07:42.552 --> 00:07:47.512
way of defining how you would get a thing
in and out of a database, and how would

119
00:07:47.512 --> 00:07:52.499
you get all of them, and how would you
get some of them, and so on and so forth.

120
00:07:52.499 --> 00:07:56.758
It's a repository,
it's literally an abstraction for

121
00:07:56.758 --> 00:08:00.847
most commonly used when
talking to a database system.

122
00:08:01.857 --> 00:08:07.077
And so if you have this repository here,
where you have this interface defined,

123
00:08:07.077 --> 00:08:11.450
and you basically say, wait,
I wanna define a repository, the T,

124
00:08:11.450 --> 00:08:14.487
the type argument here
will always be class.

125
00:08:14.487 --> 00:08:18.692
I wanna be able to define a repository
where I get all of the things that are T,

126
00:08:18.692 --> 00:08:21.972
or I get them all by id, or
I get them, or I wanna add them, or

127
00:08:21.972 --> 00:08:24.717
I wanna delete that particular thing.

128
00:08:24.717 --> 00:08:27.938
This gets really powerful when you start
talking about different repositories for

129
00:08:27.938 --> 00:08:29.437
different types of objects.

130
00:08:29.437 --> 00:08:31.411
In the real world, in the database,

131
00:08:31.411 --> 00:08:34.697
you don't store customers
next to products in a table.

132
00:08:34.697 --> 00:08:38.591
You might, for some weird reason, but
in most database and software design,

133
00:08:38.591 --> 00:08:42.190
you probably are going to put those
things in separate database tables or

134
00:08:42.190 --> 00:08:44.787
even separate spreadsheets,
wherever they're,

135
00:08:44.787 --> 00:08:48.760
wherever their final resting place may be,
wherever their source of truth is.

136
00:08:48.760 --> 00:08:50.597
They're probably going to
be in different places.

137
00:08:50.597 --> 00:08:55.081
So it's useful to be able to go in and
say, I want to get a repository for

138
00:08:55.081 --> 00:08:58.961
my customers, and
I wanna get a repository for my products.

139
00:08:58.961 --> 00:09:01.796
But I wanna keep those I want to
treat those as separate things, and

140
00:09:01.796 --> 00:09:05.313
then I want to operate on those
objects as if they're separate things.

141
00:09:05.313 --> 00:09:10.007
That's the power of generics,
that's why generics are important.

142
00:09:10.007 --> 00:09:13.097
And as we get down further into this,

143
00:09:13.097 --> 00:09:19.531
you'll see like how important they become,
they are very useful.

144
00:09:19.531 --> 00:09:20.710
Any questions?

145
00:09:20.710 --> 00:09:25.664
&gt;&gt; Speaker 1: Is there a generic concept
where we can say something like T

146
00:09:25.664 --> 00:09:30.730
should have a foo method or
a bar method, both will be fine?

147
00:09:30.730 --> 00:09:33.718
&gt;&gt; Spencer Schneidenbach: No, the type
system in C-sharp simply isn't that

148
00:09:33.718 --> 00:09:34.414
flexible.

149
00:09:34.414 --> 00:09:38.003
And usually you constrain it down to
an interface at the lowest level.

150
00:09:38.003 --> 00:09:41.891
TypeScript does have that,
but as far as its generics,

151
00:09:41.891 --> 00:09:45.712
type system goes, but
C sharp does not good question.

