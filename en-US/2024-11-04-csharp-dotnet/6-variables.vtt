WEBVTT

1
00:00:00.330 --> 00:00:01.375
&gt;&gt; Spencer Schneidenbach: All right, so

2
00:00:01.375 --> 00:00:06.180
let's talk quite a bit
about declaring variables.

3
00:00:06.180 --> 00:00:12.130
So this is gonna look familiar
if you're a programmer already.

4
00:00:12.130 --> 00:00:16.772
But if you're new to programming this is
a variable is just basically a way of kind

5
00:00:16.772 --> 00:00:19.378
of containing some data
in a specific scope.

6
00:00:19.378 --> 00:00:23.985
In this case a scope is just what's
denoted by these curly braces.

7
00:00:23.985 --> 00:00:27.928
So there's one main way of
declaring variables, but

8
00:00:27.928 --> 00:00:32.746
a few different ways that you can
kind of declare them differently

9
00:00:32.746 --> 00:00:36.091
depending on what it is
you're trying to do.

10
00:00:36.091 --> 00:00:41.407
At a minimum, the declaration for
a variable looks like this, which is,

11
00:00:41.407 --> 00:00:46.467
we're just gonna use int as our example,
which is a representative of

12
00:00:46.467 --> 00:00:52.400
a 32 bit integer, and we're gonna
call it number of times or something.

13
00:00:52.400 --> 00:00:55.330
And you can see that we've
just declared a variable.

14
00:00:55.330 --> 00:00:57.430
It doesn't have a value in it.

15
00:00:57.430 --> 00:01:03.032
Implicitly, an integer
has a value of zero.

16
00:01:03.032 --> 00:01:06.228
So we'll talk about that more when we get
into value types and reference types and

17
00:01:06.228 --> 00:01:07.762
default values.

18
00:01:07.762 --> 00:01:11.962
But this, in and of itself,
is a way to declare a variable.

19
00:01:11.962 --> 00:01:17.101
You can set the variable to a particular
value by going number of times

20
00:01:17.101 --> 00:01:23.052
equals five, so equals is the,
what's called the assignment operator.

21
00:01:23.052 --> 00:01:24.862
So that's how you assign
a value to a variable.

22
00:01:24.862 --> 00:01:26.672
But you don't need two lines to do this.

23
00:01:27.672 --> 00:01:31.212
You can also just do it all in the same
line, which is typically what I do.

24
00:01:31.212 --> 00:01:34.197
I almost always declare my variables and
just put them in the same line,

25
00:01:34.197 --> 00:01:36.038
unless there's some kind of piece of code,

26
00:01:36.038 --> 00:01:38.523
I don't know what this value is
going to be ahead of time, so

27
00:01:38.523 --> 00:01:41.495
I'm just gonna declare because I
know I'm going to need it very soon.

28
00:01:44.025 --> 00:01:48.092
One thing to mention that for
variable declaration, strictly speaking,

29
00:01:48.092 --> 00:01:52.345
you don't need to declare the type so
you can write what's called var.

30
00:01:52.345 --> 00:01:55.597
So var, if you're coming from
a language like JavaScript,

31
00:01:55.597 --> 00:01:57.485
var kind of has a bad reputation.

32
00:01:57.485 --> 00:01:58.915
It is not at all the same.

33
00:01:58.915 --> 00:02:02.221
I mean, it is then that you
declare a variable with it, but

34
00:02:02.221 --> 00:02:03.984
it's very different in that.

35
00:02:03.984 --> 00:02:08.074
It's just basically saying, hey,
just interpret the type for me, right?

36
00:02:08.074 --> 00:02:10.824
And type is interpreted at compile time,
not run time.

37
00:02:10.824 --> 00:02:15.025
So you can see that when we hover over it,
because we know that we've assigned it

38
00:02:15.025 --> 00:02:19.914
to five, the compiler and .NET has already
figured out this is an integer, okay?

39
00:02:19.914 --> 00:02:25.604
And it won't let you do a var declaration
without something assigned to it.

40
00:02:25.604 --> 00:02:29.322
So it says, implicitly typed
variables must be initialized.

41
00:02:29.322 --> 00:02:32.914
&gt;&gt; Student 1: Can the type of var of
implicitly typed variables change?

42
00:02:32.914 --> 00:02:37.241
Yeah, if you start out with
number of times equals five,

43
00:02:37.241 --> 00:02:39.684
can you reassign it as a string?

44
00:02:41.995 --> 00:02:46.764
&gt;&gt; Spencer Schneidenbach: No.
So no, the type will not change.

45
00:02:46.764 --> 00:02:49.492
So if you try to type
it as equals five and

46
00:02:49.492 --> 00:02:55.059
then you say number of times equal to some
string value, it won't let you do it.

47
00:02:55.059 --> 00:02:57.373
It will say you can't implicitly
convert a string to int.

48
00:02:57.373 --> 00:03:01.520
You can do that sometimes not
on vastly different types.

49
00:03:01.520 --> 00:03:03.862
If they're in the inheritance hierarchy,

50
00:03:03.862 --> 00:03:08.330
if the type that you're assigning it to
was that type, then yes, you could do it.

51
00:03:08.330 --> 00:03:11.839
For example,
you could declare this as object,

52
00:03:11.839 --> 00:03:17.500
all types inherit from object, which
we'll get into types here more in a bit.

53
00:03:17.500 --> 00:03:21.350
But because everything Including int and

54
00:03:21.350 --> 00:03:26.190
string have a common shared
inheritance of object,

55
00:03:26.190 --> 00:03:32.359
you can assign this number of times
variable to any value you want.

56
00:03:32.359 --> 00:03:35.820
Good question.

57
00:03:35.820 --> 00:03:38.340
&gt;&gt; Student 2: Is C-Sharp strictly typed?

58
00:03:38.340 --> 00:03:41.771
&gt;&gt; Spencer Schneidenbach: C-Sharp
strictly typed ,yes, it is, yeah.

59
00:03:41.771 --> 00:03:45.341
There is a dynamic keyword for
dynamic typing.

60
00:03:45.341 --> 00:03:47.751
I don't cover it in this course,
because I don't use it.

61
00:03:47.751 --> 00:03:48.251
I use it.

62
00:03:49.911 --> 00:03:54.741
I don't use it [LAUGH] very, very, very,
very sparingly, but it is strictly typed.

63
00:03:54.741 --> 00:03:57.281
Yes, good question.

64
00:03:58.955 --> 00:04:02.232
&gt;&gt; Spencer Schneidenbach: Something you
can do and something that I don't do is

65
00:04:02.232 --> 00:04:06.787
you can, if you want, declare multiple
variables in comma separated.

66
00:04:06.787 --> 00:04:11.764
I choose not to do this, mostly because
most of the time I'm assigning to values

67
00:04:11.764 --> 00:04:14.513
anyways, and I like the multiple lines to,

68
00:04:14.513 --> 00:04:18.762
I don't think less lines of code
is necessarily a better thing.

69
00:04:18.762 --> 00:04:21.959
I think in general, that's a good rule but
not necessarily for variables.

70
00:04:21.959 --> 00:04:24.439
I like to just put all my variables
at the top of a statement and

71
00:04:24.439 --> 00:04:27.819
just assign them all separately to kind
of just show exactly what they are.

72
00:04:27.819 --> 00:04:29.049
So you can do this.

73
00:04:29.049 --> 00:04:30.109
In practice, I don't.

74
00:04:31.349 --> 00:04:35.349
I don't really think it adds much
to the clarity of the language.

75
00:04:38.039 --> 00:04:38.729
So let's see.

76
00:04:40.126 --> 00:04:46.748
I'm kind of going off the back of, well,
talking about how I declare variables.

77
00:04:46.748 --> 00:04:51.556
Almost all of the time you could
call it laziness, or force a habit.

78
00:04:51.556 --> 00:04:53.256
I'm always using var.

79
00:04:53.256 --> 00:04:56.806
Var is probably my favorite
way of declaring variables.

80
00:04:56.806 --> 00:04:59.256
I don't think not using var adds.

81
00:04:59.256 --> 00:05:02.620
I know some developers
are strictly speaking,

82
00:05:02.620 --> 00:05:07.598
they really want to declare the type
of the thing ahead of time.

83
00:05:07.598 --> 00:05:09.218
And that's fine if you want to do that.

84
00:05:09.218 --> 00:05:11.008
Me, personally, I'm fine with var.

85
00:05:11.008 --> 00:05:15.228
It also has the benefit of putting
the variable names, kind of starting on

86
00:05:15.228 --> 00:05:20.159
the same fifth, fourth character, fifth
character, which is a small thing, but.

87
00:05:20.159 --> 00:05:22.949
But maybe it enhances readability,
kind of reaching on that one.

88
00:05:22.949 --> 00:05:25.569
But I almost always exclusively use var.

89
00:05:25.569 --> 00:05:29.680
I do for certain instances,
which we'll get into, I will use,

90
00:05:29.680 --> 00:05:33.655
especially in the next course,
I will use type declaration.

91
00:05:33.655 --> 00:05:38.585
Especially, of course it's
required if I can't initialize

92
00:05:38.585 --> 00:05:43.417
that variable at the same time,
I will use a type declaration

93
00:05:43.417 --> 00:05:47.425
to make it super clear what
it is I'm trying to do.

94
00:05:48.762 --> 00:05:52.058
&gt;&gt; Spencer Schneidenbach: Let's talk
about the const keyword for a second.

95
00:05:52.058 --> 00:05:57.581
Const, again, is similar, but different
than if you're coming from JavaScript,

96
00:05:57.581 --> 00:06:00.573
const is my var when
I'm writing JavaScript,

97
00:06:00.573 --> 00:06:05.176
I use constant let because JavaScript
has problems and C-Sharp it does

98
00:06:05.176 --> 00:06:10.156
not have any of the problems that it has,
but there is a const keyword.

99
00:06:10.156 --> 00:06:14.418
And this is a little bit confusing
because const is really a compiler time,

100
00:06:14.418 --> 00:06:18.966
kind of like static variable, and it
really is only good for using value types.

101
00:06:18.966 --> 00:06:22.800
You cannot set a rough if it's typed to
a const, you would use a static instead,

102
00:06:22.800 --> 00:06:24.749
which we'll get into.

103
00:06:24.749 --> 00:06:25.700
But this is what it looks like.

104
00:06:28.791 --> 00:06:31.976
&gt;&gt; Spencer Schneidenbach: So
this is something that you can declare in

105
00:06:31.976 --> 00:06:33.396
a specific scope.

106
00:06:33.396 --> 00:06:36.109
So in this case, I've declared
it in the mains method scope.

107
00:06:36.109 --> 00:06:37.639
You don't have to put it there.

108
00:06:37.639 --> 00:06:42.997
You can also put it at class scope for
something Thing that would

109
00:06:42.997 --> 00:06:49.387
be used among multiple different things
that might access this variable.

110
00:06:49.387 --> 00:06:54.645
So const is different in JavaScript,
in that, like I said,

111
00:06:54.645 --> 00:07:01.157
you don't assign anything but
integers and strings or floats, Boolean.

112
00:07:01.157 --> 00:07:03.627
Those are the kinds of things
that you would assign to a const.

113
00:07:03.627 --> 00:07:07.677
It wouldn't be used in
most of your programming.

114
00:07:07.677 --> 00:07:11.602
Most of the time you're gonna be using var
or declaring the variable with the with

115
00:07:11.602 --> 00:07:18.001
the type, like that,
&gt;&gt; Spencer Schneidenbach: Variables

116
00:07:18.001 --> 00:07:19.804
fall out of scope.

117
00:07:19.804 --> 00:07:21.650
So that's a really important thing to say.

118
00:07:21.650 --> 00:07:27.530
So let's show a quick
example of an if statement.

119
00:07:27.530 --> 00:07:35.270
So if this value is true then we wanna
execute this particular piece of code.

120
00:07:35.270 --> 00:07:39.972
So I'm gonna move my number of times
variable declaration there to show that if

121
00:07:39.972 --> 00:07:42.124
I try to access it outside of scope.

122
00:07:44.689 --> 00:07:49.377
&gt;&gt; Spencer Schneidenbach: I can't do it,
because variables are invariably scoped

123
00:07:49.377 --> 00:07:53.197
inside of the curly braces
in which they live.

124
00:07:53.197 --> 00:07:56.930
There's also, when we talk about
visibility more, we'll talk about

125
00:07:56.930 --> 00:08:01.408
variables at the class level declared with
different types of visibility in order for

126
00:08:01.408 --> 00:08:05.017
this to be accessible outside of
program for instance this would need

127
00:08:05.017 --> 00:08:09.466
to be public but we'll get into that more
as we talk about accessibility modifiers.

128
00:08:09.466 --> 00:08:13.966
&gt;&gt; Student 1: Is var
inherently a broader scope or

129
00:08:13.966 --> 00:08:17.566
I forget what it's called,

130
00:08:17.566 --> 00:08:22.068
in the way that it is in JavaScript?

131
00:08:23.168 --> 00:08:27.348
&gt;&gt; Spencer Schneidenbach: No,
that is a great question.

132
00:08:27.348 --> 00:08:31.995
So believe what you're kind of asking
about is the thing called hoisting or

133
00:08:31.995 --> 00:08:35.768
right where the the var statement
in JavaScript gets moved.

134
00:08:35.768 --> 00:08:37.769
Essentially, if you declare this as a var,

135
00:08:37.769 --> 00:08:41.259
you'd be able to access this in
JavaScript outside of its scope.

136
00:08:41.259 --> 00:08:42.459
C-Sharp has none of that.

137
00:08:42.459 --> 00:08:45.749
All variables fall out of
scope when you go out a block.

138
00:08:45.749 --> 00:08:50.110
And it could be a block like this,
it could be a block inside of a method,

139
00:08:50.110 --> 00:08:54.545
it could be a block inside of a class,
but it doesn't have the same kind of

140
00:08:54.545 --> 00:08:59.449
assignments, semantics and
memory implications that JavaScript does.

141
00:08:59.449 --> 00:09:00.759
Really great question.

142
00:09:00.759 --> 00:09:04.836
That's a really great question, a really
important point because, like I said,

143
00:09:04.836 --> 00:09:06.184
var is totally different.

144
00:09:06.184 --> 00:09:09.485
It's obviously very similar because
you're declaring variables with it, but

145
00:09:09.485 --> 00:09:11.244
it's totally different in practice.

146
00:09:11.244 --> 00:09:12.854
Great question.

147
00:09:12.854 --> 00:09:18.074
&gt;&gt; Student 1: Is then an analogous way
of hoisting it to use the public word?

148
00:09:18.074 --> 00:09:19.414
&gt;&gt; Spencer Schneidenbach: Yeah, kind of.

149
00:09:19.414 --> 00:09:24.478
Yeah, so if you wanted to
expose it to a broader scope.

150
00:09:24.478 --> 00:09:27.650
This would be kind of the way to do that,
but

151
00:09:27.650 --> 00:09:32.322
it wouldn't put it in if you had
a separate class declaration,

152
00:09:32.322 --> 00:09:37.789
you couldn't just implicitly access
this max score unless you used its,

153
00:09:37.789 --> 00:09:40.728
what we call the fully qualified name.

154
00:09:40.728 --> 00:09:46.002
So you'd be able to void TestMethod.

155
00:09:46.002 --> 00:09:51.381
You can't just go up here and because
this is declared as const in a high level

156
00:09:51.381 --> 00:09:56.662
scope, you can't just say MaxScore and
expect to be able to access it.

157
00:09:56.662 --> 00:10:00.852
It doesn't have any of that, but you can
access it because it's declared as public.

158
00:10:00.852 --> 00:10:05.107
You could go public, sorry,
Program.MaxScore and

159
00:10:05.107 --> 00:10:08.019
access the variable that way.

160
00:10:08.019 --> 00:10:12.739
So it doesn't have nearly the same poor
implications as it does in JavaScript.

161
00:10:12.739 --> 00:10:15.948
Last thing we'll talk about is
value types versus reference types,

162
00:10:15.948 --> 00:10:19.059
which we will talk about more as
we get into the type conversation.

163
00:10:19.059 --> 00:10:24.064
But C-Sharp variables can Invariably
be categorized into one of two types,

164
00:10:24.064 --> 00:10:28.145
which is that there are value types,
things like int and bool,

165
00:10:28.145 --> 00:10:32.919
that are built into the language and
have default values, for instance,

166
00:10:32.919 --> 00:10:38.245
that are essentially a value, like an int
is always its default value is zero.

167
00:10:38.245 --> 00:10:39.582
Bools is false.

168
00:10:39.582 --> 00:10:44.550
Floats is zero, when you initialize them,

169
00:10:44.550 --> 00:10:48.459
they are initialized in memory.

170
00:10:48.459 --> 00:10:51.709
&gt;&gt; Student 2: Are there class
wrappers of int float, etc?

171
00:10:51.709 --> 00:10:53.529
&gt;&gt; Spencer Schneidenbach: That's
a great question.

172
00:10:53.529 --> 00:10:57.885
The answer is kind of, and we'll talk
about that when we get into talking about

173
00:10:57.885 --> 00:11:01.054
value types and
reference types a little further in, but

174
00:11:01.054 --> 00:11:04.686
essentially you can declare a value
type as a reference type, and

175
00:11:04.686 --> 00:11:07.148
you would do that by calling this object.

176
00:11:07.148 --> 00:11:09.858
This converts this five
into a reference type.

177
00:11:09.858 --> 00:11:12.288
And I'll go through
the implications of that.

178
00:11:12.288 --> 00:11:14.709
It's not something I do
super on a very common.

179
00:11:14.709 --> 00:11:16.180
It's not common at all, but

180
00:11:16.180 --> 00:11:20.178
it is something that is important to
know as you get into the language.

181
00:11:20.178 --> 00:11:20.878
Good question.

182
00:11:20.878 --> 00:11:23.484
So I do want to touch on
variables when you declare them,

183
00:11:23.484 --> 00:11:28.013
they're either going to be, like I said,
a value type or a reference type.

184
00:11:28.013 --> 00:11:29.933
So this is a value type
because it's declared,

185
00:11:29.933 --> 00:11:32.383
even if you declare it as an int or
a var, it doesn't matter.

186
00:11:32.383 --> 00:11:35.613
It's exactly the same thing to C-Sharp.

187
00:11:35.613 --> 00:11:38.483
This is what's called a value type.

188
00:11:38.483 --> 00:11:42.054
Reference types, value types, as they're
passed to things are passed by copy, so

189
00:11:42.054 --> 00:11:45.438
they're copied over,
as opposed to referred to directly.

190
00:11:45.438 --> 00:11:48.799
Reference types for things like object,

191
00:11:48.799 --> 00:11:53.898
let me just put this here,
delete that object referenceType.

192
00:11:55.518 --> 00:11:58.261
Reference types
are typically complex types.

193
00:11:58.261 --> 00:12:02.313
Things that are declared as class
are going to be reference type.

194
00:12:02.313 --> 00:12:04.803
String is a reference type that's
kind of treated like a value type.

195
00:12:04.803 --> 00:12:07.313
Again, we'll get to that in a little bit.

196
00:12:07.313 --> 00:12:11.409
We'll talk a little bit more about
the implications of this as we get further

197
00:12:11.409 --> 00:12:12.883
into the course.

198
00:12:12.883 --> 00:12:16.254
But it's important to know for now that
there are value types and reference

199
00:12:16.254 --> 00:12:19.643
types when you do declare variables,
and there are implications to both.

