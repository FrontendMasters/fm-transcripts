WEBVTT

1
00:00:00.008 --> 00:00:05.300
Okay, using the .NET CLI, so let's create
our new first console application.

2
00:00:05.300 --> 00:00:09.009
So I am in my repos directory,
cuz I always have a repos directory.

3
00:00:09.009 --> 00:00:14.171
And I'm gonna say dotnet new console,
and I am going to call it,

4
00:00:14.171 --> 00:00:18.200
I'm gonna say -n to give it a name,
MyFirstApp.

5
00:00:19.510 --> 00:00:22.713
Then you can see that it
does a couple of things.

6
00:00:22.713 --> 00:00:25.448
You see that it happens all very quickly,
it all happens so fast.

7
00:00:26.458 --> 00:00:27.388
So we're gonna go look at that.

8
00:00:27.388 --> 00:00:30.101
First, we're gonna see,
cd into MyFirstApp.

9
00:00:30.101 --> 00:00:32.403
And then we're gonna hit ls.

10
00:00:32.403 --> 00:00:35.728
And you're gonna see that we have
a thing called a csproj file,

11
00:00:35.728 --> 00:00:36.995
which we'll get into.

12
00:00:36.995 --> 00:00:40.733
Program.cs, which is our entry
point inside of the application.

13
00:00:40.733 --> 00:00:44.943
And an obj directory, which typically
contains restored packages and whatnot.

14
00:00:47.901 --> 00:00:48.617
&gt;&gt; Spencer Schneidenbach: All right, but

15
00:00:48.617 --> 00:00:52.474
let's take a look at it in Visual Studio
Code, kinda take a fully integrated tour,

16
00:00:52.474 --> 00:00:53.037
as it were.

17
00:00:53.037 --> 00:00:54.220
So I'm gonna go into Repos.

18
00:00:54.220 --> 00:00:57.180
I'm gonna go into MyFirstApp,
and I am going to go here.

19
00:00:58.880 --> 00:01:03.502
And a couple of things that I wanted to
point out, I'm gonna go and close this.

20
00:01:03.502 --> 00:01:09.908
If you're used to Visual Studio Code, some
of this is gonna look pretty familiar.

21
00:01:09.908 --> 00:01:13.223
So you'll see that a solution
file got generated,

22
00:01:13.223 --> 00:01:15.315
which is done by the C# Dev Kit.

23
00:01:15.315 --> 00:01:18.377
So if you have multiple projects
as part of your solution,

24
00:01:18.377 --> 00:01:22.453
you can see that the solution file
will be the container for all of them.

25
00:01:22.453 --> 00:01:25.193
You can see that it's kind
of a bunch of gobbledygook.

26
00:01:25.193 --> 00:01:29.385
[LAUGH] You could tell that it's just some
of the vestigial stuff from .NET of old,

27
00:01:29.385 --> 00:01:32.446
but most of the time,
you're not looking at that anyways.

28
00:01:32.446 --> 00:01:35.373
You can just ignore it.

29
00:01:35.373 --> 00:01:37.853
We have our MyFirstApp.csproj file.

30
00:01:37.853 --> 00:01:42.542
So this defines the packages that
are installed as part of your application.

31
00:01:42.542 --> 00:01:43.702
What version of .NET are you on?

32
00:01:43.702 --> 00:01:45.412
What version of C# are you using?

33
00:01:45.412 --> 00:01:46.992
In this case,
we're just using the latest one.

34
00:01:48.312 --> 00:01:51.263
Do we wanna have nullability enabled?

35
00:01:51.263 --> 00:01:53.712
Which we'll get into
nullability here in a bit.

36
00:01:53.712 --> 00:01:59.831
And the output type of this application,
it could be a library, typically, or EXE.

37
00:01:59.831 --> 00:02:00.395
In this case,

38
00:02:00.395 --> 00:02:03.466
we're just outputting an executable
because that's what we're running.

39
00:02:03.466 --> 00:02:04.826
This is a console app.

40
00:02:04.826 --> 00:02:09.451
And then we're gonna look at Program.cs,
which frankly looks a little lonely,

41
00:02:09.451 --> 00:02:10.266
I have to say.

42
00:02:10.266 --> 00:02:13.160
So all we have is
a Console.WriteLine("Hello, World!"),

43
00:02:13.160 --> 00:02:17.066
which is a very typical way to enter in
an application, if I do say so myself.

44
00:02:17.066 --> 00:02:20.626
So I am going to hit Ctrl+Shift+tilde
to open up the terminal.

45
00:02:21.637 --> 00:02:23.877
So I have that there, and
I'm gonna hit dotnet build.

46
00:02:25.597 --> 00:02:29.199
And you're gonna see that the thing
builds, which if it didn't,

47
00:02:29.199 --> 00:02:31.206
I would very much hope that it would.

48
00:02:31.206 --> 00:02:36.831
And then we will go ahead and
do dotnet run to run our application.

49
00:02:36.831 --> 00:02:41.774
And you can see it printed Hello,
World here, and we change this.

50
00:02:41.774 --> 00:02:43.645
And you see, we run it again.

51
00:02:43.645 --> 00:02:45.327
Nope, I didn't save it.

52
00:02:45.327 --> 00:02:48.012
I don't need to turn on autosave,
perfect, okay.

53
00:02:48.012 --> 00:02:52.587
Hello, World, there we go, boom.

54
00:02:52.587 --> 00:02:54.854
You see that it's pretty simple.

55
00:02:54.854 --> 00:03:00.055
The project structure, if you've done
any legacy .NET development, looks

56
00:03:00.055 --> 00:03:05.675
a lot simpler, a lot different than it did
ten years ago when it was .NET Framework.

57
00:03:05.675 --> 00:03:08.423
They've spent a lot of time
kind of simplifying things,

58
00:03:08.423 --> 00:03:11.187
which I think is a really good thing.

59
00:03:11.187 --> 00:03:13.917
I do wanna point out a couple of
things about the extension as well.

60
00:03:13.917 --> 00:03:16.317
You see that we have this
little play button right here.

61
00:03:16.317 --> 00:03:20.778
We can run this and it will run our
application, as you can imagine.

62
00:03:20.778 --> 00:03:22.660
You can also use it to debug it.

63
00:03:22.660 --> 00:03:28.407
So this is a little bit ahead, but
if you're a person who likes to be able to

64
00:03:28.407 --> 00:03:34.743
run your application line by line, we
have a fully integrated debugger in that.

65
00:03:34.743 --> 00:03:36.260
That's part of C# Dev Kit.

66
00:03:36.260 --> 00:03:40.176
That's part of the licensed product.

67
00:03:40.176 --> 00:03:46.692
And then we have this down here,
let's go back here.

68
00:03:46.692 --> 00:03:48.652
And I wanna just point
out Solution Explorer.

69
00:03:48.652 --> 00:03:53.097
So if you're used to Visual Studio at all,
or JetBrains,

70
00:03:53.097 --> 00:03:57.906
right, or anything,
usually there's kind of a hierarchical

71
00:03:57.906 --> 00:04:02.010
Solution Explorer view,
which is what we have here.

72
00:04:02.010 --> 00:04:04.662
So this is basically the C# Dev Kit
extension saying, hey,

73
00:04:04.662 --> 00:04:06.890
I see a project file,
I see a solution file.

74
00:04:06.890 --> 00:04:08.200
Let's look at all those things.

75
00:04:08.200 --> 00:04:12.547
So you can see that we have the same
stuff, but it hides the SLN file, and

76
00:04:12.547 --> 00:04:15.390
it really just kinda
shows you what's there.

77
00:04:15.390 --> 00:04:18.940
So if you have something in that
directory, a file in that directory,

78
00:04:18.940 --> 00:04:22.319
say, and you've excluded that file,
it wouldn't show up here.

79
00:04:22.319 --> 00:04:27.149
But it would show up up here
in the usual Visual Studio or

80
00:04:27.149 --> 00:04:30.159
the Visual Studio Code view.

81
00:04:30.159 --> 00:04:34.064
&gt;&gt; Student: What is the benefit of
creating SLN before creating a .NET

82
00:04:34.064 --> 00:04:35.369
project?

83
00:04:35.369 --> 00:04:37.675
&gt;&gt; Spencer Schneidenbach: What is the
benefit of creating an SLN before creating

84
00:04:37.675 --> 00:04:38.449
a .NET project?

85
00:04:38.449 --> 00:04:43.733
If you know that the project that
you're doing file new project on or

86
00:04:43.733 --> 00:04:46.606
dotnet new on is going to be multiple,

87
00:04:46.606 --> 00:04:50.851
is gonna encompass multiple
different projects.

88
00:04:50.851 --> 00:04:52.700
Then it's a good idea to
start with a solution file.

89
00:04:52.700 --> 00:04:57.062
But, like I said, in Visual Studio and
in JetBrains Rider and Visual Studio Code

90
00:04:57.062 --> 00:05:00.930
with the C# Dev Kit extension,
one will usually be generated for you.

91
00:05:03.337 --> 00:05:06.640
&gt;&gt; Spencer Schneidenbach: And
you can use the .NET tooling to create,

92
00:05:06.640 --> 00:05:12.811
if you go to the previous page, you can
see that there is a, well, it's not here.

93
00:05:12.811 --> 00:05:15.260
But if you go to the dotnet new list,

94
00:05:15.260 --> 00:05:18.866
you'll see that solution
file is one of the things.

95
00:05:18.866 --> 00:05:22.000
So you can just create
a solution file on its own.

96
00:05:22.000 --> 00:05:24.400
I usually just let the IDE do the work for
me.

97
00:05:24.400 --> 00:05:25.870
I'm lazy like that.

98
00:05:25.870 --> 00:05:31.380
&gt;&gt; Student: How does the console app
know to execute the code in Program.cs?

99
00:05:31.380 --> 00:05:32.906
&gt;&gt; Spencer Schneidenbach: That's
a great question.

100
00:05:32.906 --> 00:05:36.197
I'll go ahead and spoil it for
you a little bit.

101
00:05:36.197 --> 00:05:40.379
One of the things that Microsoft has done
is kind of tried to eliminate boilerplate

102
00:05:40.379 --> 00:05:41.416
as much as they can.

103
00:05:41.416 --> 00:05:42.876
So how does it know to do that?

104
00:05:42.876 --> 00:05:47.305
Implicitly under the hood,
it actually creates a program class, and

105
00:05:47.305 --> 00:05:50.726
then it creates a main method for
it to execute on.

106
00:05:50.726 --> 00:05:52.606
So these are all just
high level statements.

107
00:05:52.606 --> 00:05:56.334
And when I say spoiler alert, one of the
things I could bridge into an IDE feature

108
00:05:56.334 --> 00:06:00.513
that I particularly like, you see
this little yellow light bulb here?

109
00:06:00.513 --> 00:06:03.257
A little yellow light bulb is
Visual Studio Code's way of saying,

110
00:06:03.257 --> 00:06:06.373
the C# Dev Kit's way of saying,
hey, got something you can do here.

111
00:06:06.373 --> 00:06:11.803
And in this case, we can actually convert
this to a Program.Main style program.

112
00:06:11.803 --> 00:06:17.428
So what it'll do is it will actually
generate for you the under the hood stuff.

113
00:06:17.428 --> 00:06:19.229
It will generate the stuff for

114
00:06:19.229 --> 00:06:23.120
you that if you're just sticking
with the high level language,

115
00:06:23.120 --> 00:06:28.113
if you're just sticking with the top level
statements, you can totally do that.

116
00:06:28.113 --> 00:06:30.693
But you can also run
your programs like this.

117
00:06:30.693 --> 00:06:31.856
And Microsoft knows.

118
00:06:31.856 --> 00:06:36.824
Basically what it does is the .NET tooling
looks for a method called main that has

119
00:06:36.824 --> 00:06:41.223
a few different what we call method
signatures, we'll get into that.

120
00:06:41.223 --> 00:06:45.654
But it looks for a method called
main to actually run the program.

121
00:06:45.654 --> 00:06:47.744
When you're using just top
level statements like this,

122
00:06:47.744 --> 00:06:48.884
it's just generated for you.

123
00:06:50.404 --> 00:06:52.122
Great, great question.

