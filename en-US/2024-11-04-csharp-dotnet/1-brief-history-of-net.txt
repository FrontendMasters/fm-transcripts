[00:00:00]
>> Spencer Schneidenbach: Let's talk about a brief history of .NET I do wanna keep it brief, but I do feel like it's important to know. So, .NET was in was roughly released, I think 2000-2001, so about a quarter century ago, 25 years, decent bit of time. So let's talk about its evolution.

[00:00:14]
So, at the time, Microsoft was investing in Java, and I don't know the whole story, I don't know the nuance of this story, but Sun Microsystems took umbrage with that and sued Microsoft and said, no, we don't like your implementation of Java. So part of that settlement included removing Java from all of their Windows installations.

[00:00:33]
It used to be bundled with Windows, a Java runtime, and now it's not as part of that settlement. So Microsoft needed, because Java was gaining traction in the market. Microsoft wanted and needed its own high level language to compete with Java. So in the early days, 2000-2001 with the first release of Visual Studio.NET, is what it was called back then.

[00:00:56]
We got C# and VB.NET and what's called the .NET Framework. So I try to avoid using the term .NET Framework simply because I think it's a loaded term because it usually means .NET in Windows. And .NET Framework is still kept up to date by Microsoft. But it's very akin to what I would call the core libraries of .NET Core now branded typically is just .NET.

[00:01:21]
But I hear them used interchangeably because the branding has been has shifted quite strangely over the last five years, as Microsoft has tried to, like clarify what .NET means. But .NET Framework, the really important thing to know is that it's akin to the core libraries today. All the core functionality, make an HTTP request, reading files, that kind of thing.

[00:01:42]
So the first besides console apps, which we will be mostly hanging out in console apps for the purposes of this workshop, what they introduced was WinForms for .NET and WebForms. WebForms was a old is definitely shown its age. It is an abstraction over, it was meant to bridge the gap from Win forms developers to the web.

[00:02:04]
I think it accomplished that goal. I couldn't tell you at what cost. I can tell you, though, that I still work on WebForms app. I don't, but by my company does occasionally. So WebForms is still relevant in that there's still a ton of code. Same thing with financial institutions and COBOL, like it's not gonna go anyway.

[00:02:19]
They're not gonna go away anytime soon. But there were some challenges, right? Back in the day of .NET, it was Windows only. That was like probably its biggest thing is that you couldn't run it on Linux, you couldn't run it on Mac. It was purely Windows only. It was also closed source.

[00:02:36]
It was actually source available. You could browse the source code, but the development of the product was all done behind closed doors. So as part of being a Microsoft MVP, you get to go once a year to this thing called the MVP Summit. And back 20 years ago, you were getting peeks at products and product changes that were happening that wouldn't happen for several months.

[00:02:59]
Nowadays, you're getting told mostly about stuff that's gonna be happening in the next little bit while might be the next quarter, but most of the development is done out in the open. That wasn't the case for Microsoft 25 years ago, and it's still paying the price for this, the perception price, I should say, because as I mentioned, I get asked all the time, it .NET closed, is it open?

[00:03:17]
It's definitely open source, definitely cross platform, definitely developed out in the open, and as I mentioned, lack of transparency in development processes. There was a project called mono, pronounced mono because it's Spanish for monkey. A lot of people just call it mono. And it was aimed to be there was a movement back in the early days of .NET called alt.NET.

[00:03:38]
And they were like we want .NET not on Windows. We want .NET to be cross-platform. So this was meant to be an implementation that allowed .NET to run on embedded system. So it was a reimplementation of a lot of the core libraries and the features of .NET. And I think that the Mono project probably heavily influenced Microsoft long term into investing in what we now know is the .NET platform today, which is out in the open.

[00:04:06]
So this was not a Microsoft sponsored project. Microsoft, I don't know if the word tolerate is a good word for it, but they let it go. But it's actually still used today for some things. It's used in the Unity game engine, for example, as their scripting language. It's all powered by Mono so .NET Core was introduced about ten years ago.

[00:04:28]
There was a technology called Silverlight that was retired, much to the chagrin of many .NET developers out there, but the machinations of that, the implementation of .NET for that platform eventually evolved into .NET Core. It's one of the worst kept secrets. And sometimes you see .NET developers, they're hanging around the bar and it's like, you know that .NET Core came from Silverlight, right?

[00:04:50]
It's like, yeah, everybody knows that now. But once they announced this, it was groundbreaking. Cross-platform by design, fully open source. So everything is developed in the open, everything is developed transparently, you will see references to GitHub issues about why Microsoft makes certain decisions which I think are really relevant.

[00:05:08]
There are some things that they won't do and I'll show you and they'll show you why it is, and they'll tell you why it is and they'll they'll tell you in GitHub. So you can see the issue you can log it, and you'll see a couple of links here and there in my course about that.

[00:05:20]
And then, like I said, community involvement through Github. There's people suggesting language features. They're writing specs for features to be added to the language or improving the existing code base, right? So it's pretty amazing to see kind of all of the things that have been done in .NET.

[00:05:37]
And it really kind of set the stage for its current success and popularity in the development world .NET is growing. I think people are adopting it. And I have to say that it's on the strength of making all of the right decisions about developing the product in the open.

