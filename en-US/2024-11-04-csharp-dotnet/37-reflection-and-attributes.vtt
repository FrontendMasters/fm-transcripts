WEBVTT

1
00:00:00.190 --> 00:00:03.308
&gt;&gt; Spencer Schneidenbach: I have
one last section to talk about,

2
00:00:03.308 --> 00:00:07.889
which is reflection,
reflection is a way of inspecting

3
00:00:07.889 --> 00:00:13.210
type data at runtime, well,
its just exactly that.

4
00:00:13.210 --> 00:00:16.050
You're able to do things
like take an object and

5
00:00:16.050 --> 00:00:20.168
get the type of that object,
get the properties off of that object and

6
00:00:20.168 --> 00:00:24.438
read those properties so you could
read the names of those properties.

7
00:00:24.438 --> 00:00:26.588
You could read the values
of those properties and

8
00:00:26.588 --> 00:00:29.078
you can do things with them,
you can print them.

9
00:00:29.078 --> 00:00:31.887
This will become more apparent
in the ASP.Net core course,

10
00:00:31.887 --> 00:00:35.628
we'll introduce little bits of
reflection to just save us keystrokes.

11
00:00:35.628 --> 00:00:39.892
The important thing to know is
that dotnet types are strong and

12
00:00:39.892 --> 00:00:44.566
they are inside of the framework in
a really integrated way such that

13
00:00:44.566 --> 00:00:49.322
the ability to actually go through and
understand what's in a type,

14
00:00:49.322 --> 00:00:54.412
what properties it has,
what methods it has, has a lot of power.

15
00:00:54.412 --> 00:00:58.414
So the first time I saw reflection,
well, let me show an example of it,

16
00:00:58.414 --> 00:01:01.152
let's take this person object,
for instance,

17
00:01:01.152 --> 00:01:05.865
you can get the type of that person object
and then get a reference to that property.

18
00:01:05.865 --> 00:01:10.194
So, this would actually be something
where it could actually is an object that

19
00:01:10.194 --> 00:01:12.950
represents the property
inside of the runtime and

20
00:01:12.950 --> 00:01:16.835
then you could use that to actually
change the value of that property.

21
00:01:16.835 --> 00:01:19.364
And this doesn't seem
like it's super useful,

22
00:01:19.364 --> 00:01:22.175
why wouldn't you simply
just assign the property?

23
00:01:22.175 --> 00:01:25.385
Until you get to the point of realizing
that reflection gives you a lot

24
00:01:25.385 --> 00:01:29.203
of power when you don't always know the
type of the thing that you're interacting

25
00:01:29.203 --> 00:01:30.905
with ahead of time.

26
00:01:30.905 --> 00:01:34.911
When you get into writing framework code,
this becomes incredibly useful

27
00:01:34.911 --> 00:01:38.661
because you're able to create constructs
that will be able to read and

28
00:01:38.661 --> 00:01:40.011
write from and to types.

29
00:01:40.011 --> 00:01:45.561
Without knowing that type ahead of time,
and that has a lot of cool implications.

30
00:01:45.561 --> 00:01:49.339
You can even create types at runtime and

31
00:01:49.339 --> 00:01:54.952
then instantiate them yourself
using methods like the one

32
00:01:54.952 --> 00:02:01.382
activator.createinstance which again,
does have have value.

33
00:02:01.382 --> 00:02:04.938
This will become relevant when we
talk about dependency injection

34
00:02:04.938 --> 00:02:06.812
in the ASP.NET Core course.

35
00:02:06.812 --> 00:02:10.525
It becomes really important then because
oftentimes when we're interacting with

36
00:02:10.525 --> 00:02:14.237
a dependency injection system, the only
thing we know about an object is its type,

37
00:02:14.237 --> 00:02:16.872
we don't necessarily
know its implementation.

38
00:02:16.872 --> 00:02:21.027
So, we can use that to our advantage and
we can use reflection to do that,

39
00:02:21.027 --> 00:02:25.256
the important thing to note is that
when you're beginning programming,

40
00:02:25.256 --> 00:02:28.073
this does not seem super
useful at its face.

41
00:02:28.073 --> 00:02:31.471
It's one of those things that I encourage
you to just put in the back of your head

42
00:02:31.471 --> 00:02:35.179
because you will find as you get into your
career times where you're just like, man,

43
00:02:35.179 --> 00:02:38.003
if I only knew at runtime what
this object was gonna be.

44
00:02:38.003 --> 00:02:42.203
C sharp is a flexible and it's a great
language but it doesn't have everything in

45
00:02:42.203 --> 00:02:45.847
it that you would need to know everything
about your type at runtime and

46
00:02:45.847 --> 00:02:48.230
reflection can kind of
help bridge that gap.

47
00:02:49.680 --> 00:02:52.590
One last note about reflection,
which is attributes.

48
00:02:52.590 --> 00:02:56.815
Attributes are metadata that you can add
to the code that you write in order to

49
00:02:56.815 --> 00:03:01.897
give it some data or metadata about how
that thing should behave downstream.

50
00:03:01.897 --> 00:03:05.369
So let's take an app and
a HTTP server that we've created and

51
00:03:05.369 --> 00:03:09.320
we've modeled our incoming request
as a create employee request for

52
00:03:09.320 --> 00:03:11.853
the first name, last name and department.

53
00:03:11.853 --> 00:03:15.305
And perhaps in the system that
those things are required,

54
00:03:15.305 --> 00:03:20.237
we can mark those things with attributes
to say that those things are required, and

55
00:03:20.237 --> 00:03:23.133
then downstream when
we're doing validation.

56
00:03:23.133 --> 00:03:28.040
When we're using a validation framework,
ASP Netcore and other frameworks can

57
00:03:28.040 --> 00:03:32.947
automatically say this thing is required,
if you give me an empty string or a null

58
00:03:32.947 --> 00:03:38.093
string, I will send a message back to the
client saying that that thing is required.

59
00:03:39.303 --> 00:03:44.034
You can do all sorts of things with With
this, including instructing those that

60
00:03:44.034 --> 00:03:48.570
those attributes to say, do we want to
allow empty strings in this request?

61
00:03:48.570 --> 00:03:52.486
If so, okay, no, if so, then yes,
an empty string is valid, otherwise,

62
00:03:52.486 --> 00:03:56.500
this thing is required and
it should not be an empty string.

63
00:03:56.500 --> 00:03:59.316
Attributes can be used on all
sorts of parts of the language,

64
00:03:59.316 --> 00:04:01.705
including parameters,
methods and properties.

65
00:04:01.705 --> 00:04:06.309
I use the most commonly on methods and
properties and you'll see a ton of

66
00:04:06.309 --> 00:04:10.838
examples of that in the ASP NET core
course where attributes are pretty

67
00:04:10.838 --> 00:04:15.544
much used everywhere to add metadata for
ASP NET Core to use to do its job.

68
00:04:15.544 --> 00:04:17.784
Finally, you can create
your own attributes,

69
00:04:17.784 --> 00:04:20.920
I don't often have to do it unless
I'm writing framework code, or

70
00:04:20.920 --> 00:04:23.731
specific code where I want that
know that metadata at time.

71
00:04:23.731 --> 00:04:27.763
I need to know that that member or that
property or that method has a specific

72
00:04:27.763 --> 00:04:31.930
attribute on it, and then perform some
kind of action downstream in my code.

73
00:04:31.930 --> 00:04:35.984
This is where reflection really becomes
powerful, is when you're able to take

74
00:04:35.984 --> 00:04:39.312
metadata that you're able to read
from objects from your types,

75
00:04:39.312 --> 00:04:42.263
and then perform actions
downstream on them.

76
00:04:42.263 --> 00:04:44.548
This is everywhere in ASP.NET Core, and

77
00:04:44.548 --> 00:04:47.303
we'll talk about that in
that course quite a bit.

78
00:04:50.043 --> 00:04:53.856
The main thing about attributes that you
need to know is that they exist, and

79
00:04:53.856 --> 00:04:57.254
that they're used to add metadata
to your runtime properties, and

80
00:04:57.254 --> 00:05:00.251
that their implications of that are vast,
very many.

81
00:05:00.251 --> 00:05:04.991
Last thing that I had on the that is
absolutely we don't need to cover it,

82
00:05:04.991 --> 00:05:09.656
was just talking about the hosting
model in.net you can, if you want to

83
00:05:09.656 --> 00:05:14.481
explore that and kind of learn about
it ahead of the ASP NET core class.

84
00:05:14.481 --> 00:05:20.467
But a lot of that stuff is just content
to kind of tee up the ASP NET Core class.

