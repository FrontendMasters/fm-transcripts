WEBVTT

1
00:00:00.020 --> 00:00:02.317
&gt;&gt; Spencer Schneidenbach: All right so
we've covered a lot of ground today.

2
00:00:02.317 --> 00:00:06.339
We've covered classes,
see a lot of the C sharp basic features.

3
00:00:06.339 --> 00:00:09.004
We talked about LINQ and collections.

4
00:00:09.004 --> 00:00:13.284
I wanna talk about some of the advanced
kind of the more kind of rubber meets

5
00:00:13.284 --> 00:00:16.129
the road stuff that you'll
see up to this point.

6
00:00:16.129 --> 00:00:19.095
We've really focused on
the language itself and

7
00:00:19.095 --> 00:00:21.275
the capabilities of the language.

8
00:00:21.275 --> 00:00:25.366
I wanna talk about some of the deeper
capabilities as it relates

9
00:00:25.366 --> 00:00:28.156
to actually doing stuff in the real world.

10
00:00:28.156 --> 00:00:31.892
So first, I do wanna mention that
I provide a lot of examples for

11
00:00:31.892 --> 00:00:34.370
all of the LINQ stuff that I just covered.

12
00:00:34.370 --> 00:00:37.665
Each of these even selects and
where's they all take.

13
00:00:37.665 --> 00:00:40.769
They all have an individual
page where they kinda go over.

14
00:00:40.769 --> 00:00:44.604
Some of the more nuanced things we
covered, a lot of the good stuff,

15
00:00:44.604 --> 00:00:47.969
which was good, but
now let's go into what I would consider

16
00:00:47.969 --> 00:00:51.426
to be kinda as I mentioned,
the rubber meets the road stuff.

17
00:00:51.426 --> 00:00:55.163
So I said in my opening
monologue that programming is so

18
00:00:55.163 --> 00:00:59.807
much more than just the ecosystem is so
much more than the language.

19
00:00:59.807 --> 00:01:01.836
It's the ecosystem that you operate in.

20
00:01:01.836 --> 00:01:07.346
And luckily for us .NET and Microsoft
have been very intentional about giving

21
00:01:07.346 --> 00:01:12.954
us a really batteries included framework
from which we can build applications.

22
00:01:12.954 --> 00:01:17.132
So I wanna talk about some
of the more advanced

23
00:01:17.132 --> 00:01:20.481
programming topics as it relates to.

24
00:01:20.481 --> 00:01:25.004
Some asynchronous programming or
reading files from streams.

25
00:01:25.004 --> 00:01:29.562
So we're gonna talk about some
of these libraries today.

26
00:01:29.562 --> 00:01:31.751
Collections is one that
we've just gone through.

27
00:01:31.751 --> 00:01:36.276
We went through LINQ, and I've showed you
90% of what you need to know in the for

28
00:01:36.276 --> 00:01:38.781
operating on collections
in the real world.

29
00:01:38.781 --> 00:01:42.883
We're gonna also talk about reading
from and writing to files and

30
00:01:42.883 --> 00:01:45.653
things that are streams, called streams.

31
00:01:45.653 --> 00:01:50.968
We'll talk about writing to and from JSON,
which is the kind of communication

32
00:01:50.968 --> 00:01:55.249
format of the web, the de facto
one that's kind of taken over.

33
00:01:55.249 --> 00:01:59.030
We'll talk about making HTTP requests and
how .NET does that.

34
00:01:59.030 --> 00:02:01.800
We've talked about LINQ already.

35
00:02:01.800 --> 00:02:04.910
We'll talk about the asynchronous
programming model,

36
00:02:04.910 --> 00:02:06.469
which is highly important.

37
00:02:06.469 --> 00:02:10.460
And finally, we will talk
a little bit about reflection,

38
00:02:10.460 --> 00:02:16.174
which is a fairly advanced topic, but one
that I think is important to know exists.

39
00:02:16.174 --> 00:02:23.042
So without any further ado, let's talk
first about asynchronous programming.

40
00:02:23.042 --> 00:02:28.457
So asynchronous programming is really this
idea that this idea that there are some

41
00:02:28.457 --> 00:02:33.636
operations that you will do that will
naturally just be bound by other things,

42
00:02:33.636 --> 00:02:34.194
right?

43
00:02:34.194 --> 00:02:37.429
So think of a when you
open your web browser and

44
00:02:37.429 --> 00:02:40.931
you go to Facebook or
you go to Twitter or Google.

45
00:02:40.931 --> 00:02:43.338
And you go to that website, and
you sit and wait for it to load.

46
00:02:43.338 --> 00:02:46.003
A lot of things are happening
in the background,

47
00:02:46.003 --> 00:02:50.497
that there was that information, that
web page is being loaded asynchronously.

48
00:02:50.497 --> 00:02:54.657
We have to reach out to the server, we
have to connect to the server, we have to

49
00:02:54.657 --> 00:02:59.022
download that stream of bytes, and then
we have to render it inside the browser.

50
00:02:59.022 --> 00:03:02.771
Asynchronous Programming
enables responsive and

51
00:03:02.771 --> 00:03:07.836
scalable applications,
specifically in really all walks of life.

52
00:03:07.836 --> 00:03:11.155
When we do our ASP.NET Core course,

53
00:03:11.155 --> 00:03:16.951
we will focus specifically on how
it helps in a web environment.

54
00:03:16.951 --> 00:03:21.059
But just imagine if you had a browser and
you opened it up and when you went to

55
00:03:21.059 --> 00:03:25.519
a website, your whole browser froze
until that website was finished loading.

56
00:03:25.519 --> 00:03:28.372
I think most people would
stop using that browser.

57
00:03:28.372 --> 00:03:32.966
And asynchronous programming kind of
allows you to have a lot of those things

58
00:03:32.966 --> 00:03:36.792
that will allow you to keep that
screen from freezing, right?

59
00:03:36.792 --> 00:03:41.404
It will help you from
prevent resource exhaustion.

60
00:03:41.404 --> 00:03:46.893
I hope you do all of those things while
providing a really nice experience for

61
00:03:46.893 --> 00:03:50.601
your user or like I said,
not exhausting your servers.

62
00:03:50.601 --> 00:03:53.106
So this is the general syntax.

63
00:03:53.106 --> 00:03:55.680
So there's a couple of things
that we need to talk about.

64
00:03:55.680 --> 00:04:00.733
So the keywords that you need to know are
called async, and they're called await.

65
00:04:00.733 --> 00:04:03.361
Okay so what does that mean?

66
00:04:03.361 --> 00:04:05.861
What are those things and
what the heck is task?

67
00:04:05.861 --> 00:04:09.548
Well, I think the best thing is to

68
00:04:09.548 --> 00:04:14.440
actually show it in
a real kind of scenario.

69
00:04:14.440 --> 00:04:18.473
A task is kind of like,
if you're familiar with JavaScript,

70
00:04:18.473 --> 00:04:20.657
a task is essentially a promise.

71
00:04:20.657 --> 00:04:24.637
It's basically saying that this is
something that's happening that

72
00:04:24.637 --> 00:04:26.598
will eventually be done, right?

73
00:04:26.598 --> 00:04:32.352
A task is a, an object that has
properties to say, is it started,

74
00:04:32.352 --> 00:04:38.750
Is it finished, is it exceptioned AKA,
did it encounter an exception?

75
00:04:38.750 --> 00:04:44.422
And so it in and of itself can
be it can do one of two things.

76
00:04:44.422 --> 00:04:46.502
A task can return a value, or

77
00:04:46.502 --> 00:04:52.420
it can just do something kind of like
an action method, a void returning method.

78
00:04:52.420 --> 00:04:56.663
There are 2 types of tasks.

79
00:04:56.663 --> 00:04:59.940
When we're talking about making
HTTP requests specifically.

80
00:04:59.940 --> 00:05:02.697
All of the libraries that we use,

81
00:05:02.697 --> 00:05:07.930
that are common to use all
download requests asynchronously.

82
00:05:07.930 --> 00:05:11.241
There is no way to just download
a request synchronously.

83
00:05:11.241 --> 00:05:14.590
So imagine if you were
doing this in win forms.

84
00:05:14.590 --> 00:05:17.671
In win forms, if you click
the button to download something and

85
00:05:17.671 --> 00:05:19.126
you weren't asynchronous,

86
00:05:19.126 --> 00:05:22.981
your whole application would freeze up
while it was completing that request.

87
00:05:22.981 --> 00:05:27.858
Whereas asynchronous programming
gives a language integrated way to

88
00:05:27.858 --> 00:05:32.484
kind of give you that give you a way
to program asynchronously, but

89
00:05:32.484 --> 00:05:37.543
not really no need to know in a deep way,
what's going on under the hood.

90
00:05:37.543 --> 00:05:40.518
It is useful to know, but
you don't have to create and

91
00:05:40.518 --> 00:05:42.716
write all those constructs yourself.

92
00:05:42.716 --> 00:05:44.203
You don't have to do it all yourself,

93
00:05:44.203 --> 00:05:46.902
you don't have to do all the wiring
yourself it just sort of happens.

94
00:05:46.902 --> 00:05:50.032
So I wanna kind of point out two things.

95
00:05:50.032 --> 00:05:52.244
I wanna point out this async keyword.

96
00:05:52.244 --> 00:05:57.300
The async keyword declares a function
as being asynchronous, and

97
00:05:57.300 --> 00:06:02.278
that means that it can call and
wait on other asynchronous methods.

98
00:06:02.278 --> 00:06:07.263
And an asynchronous method in the context
of the .NET core libraries is going to be

99
00:06:07.263 --> 00:06:09.877
a method that returns some aspect of task.

100
00:06:09.877 --> 00:06:12.703
Now task you see,
has this little thing next to it, and

101
00:06:12.703 --> 00:06:14.492
you hover over it says awaitable.

102
00:06:14.492 --> 00:06:21.293
That means you can wait on
the response of that request.

103
00:06:21.293 --> 00:06:25.234
And what's happening under the hood
is essentially Microsoft is in or

104
00:06:25.234 --> 00:06:27.922
.NET is saying, hey,
this thing is waiting.

105
00:06:27.922 --> 00:06:30.788
I'm gonna free up
the resources on this thread.

106
00:06:30.788 --> 00:06:35.412
And once that promise returns, once that
thread or once that task finishes, I can

107
00:06:35.412 --> 00:06:39.850
resume that thread where I left off and
then complete the rest of the function.

108
00:06:39.850 --> 00:06:44.062
So let's see what that looks like.

109
00:06:44.062 --> 00:06:48.893
The point of this, the real point of this
is that it's meant to be kinda natural and

110
00:06:48.893 --> 00:06:52.342
language integrated in a way
that makes it very easy to do.

111
00:06:52.342 --> 00:06:56.933
So I'm gonna make one change to our void
method, I'm gonna say, or our main method.

112
00:06:56.933 --> 00:07:02.126
I'm gonna say, instead of void,
I'm gonna say async task.

113
00:07:02.126 --> 00:07:06.232
That's essentially our
way of declaring this

114
00:07:06.232 --> 00:07:10.237
main method as being
able to await on things.

115
00:07:10.237 --> 00:07:15.060
So that's a feature that's been around for

116
00:07:15.060 --> 00:07:19.230
the last few versions of .NET is where

117
00:07:19.230 --> 00:07:24.182
you're able to declare
this as async task and

118
00:07:24.182 --> 00:07:32.027
it allows you to do things like data
= await getdata from server async.

119
00:07:32.027 --> 00:07:33.432
I will declare this method as static.

120
00:07:33.432 --> 00:07:37.983
So what are we doing here?

121
00:07:37.983 --> 00:07:42.305
We're calling this method which we could
call without the async without the await

122
00:07:42.305 --> 00:07:45.008
keyword, and
I'll show you what that looks like.

123
00:07:45.008 --> 00:07:47.851
And what we're doing is
we're essentially saying,

124
00:07:47.851 --> 00:07:51.462
I want the string from this task
of string that you've promised me.

125
00:07:51.462 --> 00:07:54.893
This method says that it will
return a task of a string, so

126
00:07:54.893 --> 00:07:56.902
I'm gonna await on that method.

127
00:07:56.902 --> 00:08:00.163
I'm just gonna let you do your thing,
and then once you're done,

128
00:08:00.163 --> 00:08:02.917
you're gonna return to me
the result that is of string.

129
00:08:02.917 --> 00:08:06.190
If I delete this await keyword,
it's gonna complain to

130
00:08:06.190 --> 00:08:09.811
say that you cannot convert from
a task of a string to a string,

131
00:08:09.811 --> 00:08:13.313
because at this point,
we're no longer awaiting on this.

132
00:08:13.313 --> 00:08:18.193
We're just actually trying to get it
like this, where we do task of string,

133
00:08:18.193 --> 00:08:23.104
as opposed to just give me the string
there are some valid reasons to do this.

134
00:08:23.104 --> 00:08:26.582
I think for most programmers and
most .NET developers,

135
00:08:26.582 --> 00:08:30.288
they're probably going to do
something along these lines.

136
00:08:30.288 --> 00:08:35.023
They're probably gonna program
asynchronously like this,

137
00:08:35.023 --> 00:08:39.665
where we actually say,
I want the string and I want to await or

138
00:08:39.665 --> 00:08:42.500
wait for that string to be returned.

139
00:08:42.500 --> 00:08:49.818
So I'm gonna say google.com, and
I'm gonna say Console.WriteLine(data) and

140
00:08:49.818 --> 00:08:53.228
we're gonna see what happens, boom.

141
00:08:56.852 --> 00:08:59.127
&gt;&gt; Spencer Schneidenbach: Okay,
you see that our console has a bunch

142
00:08:59.127 --> 00:09:00.169
of gobbledygook.

143
00:09:00.169 --> 00:09:03.844
And I'm I assume that, well,
let's see, I see a lot of JavaScript.

144
00:09:03.844 --> 00:09:05.071
I see some embedded images.

145
00:09:05.071 --> 00:09:10.592
I see HTML I think what we've done
is we've gone out to google.com and

146
00:09:10.592 --> 00:09:15.281
returned the entire page and
just spit it out into a string.

147
00:09:15.281 --> 00:09:18.736
And as opposed to rendering it in a
browser, we're just putting it in console.

148
00:09:18.736 --> 00:09:23.413
And I bet you there's that text box
somewhere, the search box as it were,

149
00:09:23.413 --> 00:09:25.986
I don't exactly know what it's named.

150
00:09:25.986 --> 00:09:30.577
Point being is that, we've gone to
google.com using our HttpClient.

151
00:09:30.577 --> 00:09:37.517
We've gotten the contents of that string,
we've returned it to our caller,

152
00:09:37.517 --> 00:09:41.736
and then we've just
printed it to the console.

153
00:09:41.736 --> 00:09:46.102
So this is really powerful
because it's really simple.

154
00:09:46.102 --> 00:09:50.263
Again, I can't emphasize enough
the term language integrated, right?

155
00:09:50.263 --> 00:09:53.517
The async await programming,
this was the kind of a revelation for

156
00:09:53.517 --> 00:09:54.804
programming languages.

157
00:09:54.804 --> 00:09:59.181
The reason that async await exists
in JavaScript, the way that it does,

158
00:09:59.181 --> 00:10:02.505
is largely due to async/await
as it was created in C sharp.

159
00:10:02.505 --> 00:10:03.978
Couple of things to note.

160
00:10:03.978 --> 00:10:07.439
A method that does not return a task or

161
00:10:07.439 --> 00:10:12.253
does not return a value from
a task is simply a task.

162
00:10:12.253 --> 00:10:16.017
And you will not just return anything.

163
00:10:16.017 --> 00:10:20.863
And that's pretty much the same
as a void returning method.

164
00:10:20.863 --> 00:10:24.336
But it's the asynchronous version
of a void returning method,

165
00:10:24.336 --> 00:10:28.399
whereas this is the asynchronous version
of a method that returns a value.

166
00:10:28.399 --> 00:10:32.281
In this case,
it's just returning a string.

167
00:10:32.281 --> 00:10:36.174
If you don't declare this as async,
you can't use this await.

168
00:10:36.174 --> 00:10:41.509
You can't use the await keyword
because a method you can return,

169
00:10:41.509 --> 00:10:45.971
you could just say return
the task directly like that,

170
00:10:45.971 --> 00:10:48.504
which is totally fine as well.

171
00:10:48.504 --> 00:10:52.111
But most of the time, in order to
preserve a nice stack trace, so if you're

172
00:10:52.111 --> 00:10:56.198
getting an exception and you wanna see all
the things that happened in the meantime.

173
00:10:56.198 --> 00:11:01.045
It's best to typically await on
these calls and just return it and

174
00:11:01.045 --> 00:11:03.963
then Just declare it as asynchronous.

175
00:11:03.963 --> 00:11:07.345
And when you get into error handling and
you're looking at exceptions,

176
00:11:07.345 --> 00:11:08.906
that becomes really important.

177
00:11:08.906 --> 00:11:12.257
So some do's and
don'ts of asynchronous programming,

178
00:11:12.257 --> 00:11:14.991
async all the way down
is highly recommended.

179
00:11:14.991 --> 00:11:20.535
If a method calls asynchronous APIs,
it should itself be declared as async.

180
00:11:20.535 --> 00:11:25.755
And if we have an async version of
an API with extremely few exceptions,

181
00:11:25.755 --> 00:11:31.845
and I will tell you the one exception that
I can think of at the ASP.NET Core course,

182
00:11:31.845 --> 00:11:35.505
but you should always use
the asynchronous APIs.

183
00:11:35.505 --> 00:11:39.948
If you're in an asynchronous context,
if you're in an asynchronous method, you

184
00:11:39.948 --> 00:11:44.019
should call the method that Is prefixed or
that is the asynchronous method.

185
00:11:44.019 --> 00:11:50.651
And typically, in .NET it's a standard
that all methods that are async await,

186
00:11:50.651 --> 00:11:55.639
or that are awaitable as we say,
are ended in the word async.

187
00:11:55.639 --> 00:11:57.661
It drives some developers crazy.

188
00:11:57.661 --> 00:11:59.593
For me,
I'd like it because it's very explicit.

189
00:11:59.593 --> 00:12:05.183
So if you see a GetSring method, and
then this GetStringAsync method,

190
00:12:05.183 --> 00:12:11.632
if you're in an asynchronous method,
you should prefer to use GetStringAsync.

191
00:12:11.632 --> 00:12:16.068
I should note that some constructs
in .NET like like HttpClient,

192
00:12:16.068 --> 00:12:19.958
don't even have a GetString
method that is synchronous.

193
00:12:19.958 --> 00:12:22.684
It's async all the way down,
and that's very much by design.

194
00:12:26.622 --> 00:12:29.734
&gt;&gt; Spencer Schneidenbach: So, there's
a couple of other things that you should

195
00:12:29.734 --> 00:12:32.510
know about async await or
asynchronous calls.

196
00:12:32.510 --> 00:12:36.278
There is a property on the task itself.

197
00:12:36.278 --> 00:12:40.136
So at this point I've taken out the await
and I'm looking at the task itself.

198
00:12:40.136 --> 00:12:41.485
I'm looking at the properties on the task.

199
00:12:41.485 --> 00:12:44.530
You can see that there's an exception
which can be null if there's not

200
00:12:44.530 --> 00:12:46.086
an exception hasn't been thrown.

201
00:12:46.086 --> 00:12:50.707
There's an ID because all tasks
are assigned an ID by the runtime.

202
00:12:50.707 --> 00:12:52.277
And then there's a couple of weird ones.

203
00:12:52.277 --> 00:12:54.569
There's wait and then there's dot result.

204
00:12:54.569 --> 00:12:56.667
What the heck is this dot result?

205
00:12:56.667 --> 00:12:59.757
That's the result of my asynchronous call.

206
00:12:59.757 --> 00:13:04.318
Well, that should work just fine right?

207
00:13:04.318 --> 00:13:07.227
Should never use .result or .wait, and

208
00:13:07.227 --> 00:13:12.722
the reason why is in that in certain
.net contexts, you can cause deadlocks.

209
00:13:12.722 --> 00:13:17.765
Not to mention that you've kind of
discarded all of the you've essentially

210
00:13:17.765 --> 00:13:22.731
discarded and have converted a
asynchronous method to a synchronous one by

211
00:13:22.731 --> 00:13:27.485
using these, by not using the await
keyword to just get that value out.

212
00:13:27.485 --> 00:13:30.168
So it's really important
that you avoid those.

213
00:13:30.168 --> 00:13:34.439
You don't need to declare every method
as async in your whole application.

214
00:13:34.439 --> 00:13:38.297
And in fact, the compiler will
complain to you that you're doing so

215
00:13:38.297 --> 00:13:40.401
if you're doing so unnecessarily.

216
00:13:40.401 --> 00:13:43.975
You should only declare function is
async if you need it to be asynchronous.

217
00:13:43.975 --> 00:13:48.820
So you should go async all the way down
and favor async APIs where you can.

218
00:13:48.820 --> 00:13:53.246
But if none of the things that, none of
the functions that you're doing require

219
00:13:53.246 --> 00:13:56.496
async, then you shouldn't
declare the method as async.

220
00:13:56.496 --> 00:14:01.363
So a good example of that
would be an add numbers class.

221
00:14:01.363 --> 00:14:06.416
You would not declare or
an AddNumbers method, you wouldn't

222
00:14:06.416 --> 00:14:11.970
declare this as an asynchronous
method because there's no point.

223
00:14:11.970 --> 00:14:16.491
There's no asynchronous operation and
as I mentioned,

224
00:14:16.491 --> 00:14:20.269
if you did,
the compiler will complain at you.

225
00:14:20.269 --> 00:14:22.513
Couple of notes about
declaring async methods.

226
00:14:22.513 --> 00:14:26.735
If you declare this async, it will
complain because it must be of a task that

227
00:14:26.735 --> 00:14:29.764
can be awaitable, or
of a type that can be awaitable.

228
00:14:29.764 --> 00:14:31.480
Int is not awaitable, but

229
00:14:31.480 --> 00:14:37.025
task of int is awaitable because it's a
task that's something that can be awaited.

230
00:14:37.025 --> 00:14:41.161
This would be a huge waste of time and
resources, but

231
00:14:41.161 --> 00:14:47.553
it is technically feasible, but as I
mentioned, the compiler will complain and

232
00:14:47.553 --> 00:14:53.297
tell you that this does not have any
benefit and will run synchronously.

233
00:14:53.297 --> 00:14:58.001
There's one last thing is that you can,
in fact,

234
00:14:58.001 --> 00:15:01.031
declare methods as async void.

235
00:15:01.031 --> 00:15:05.971
This is a compromise done
a long time ago due to

236
00:15:05.971 --> 00:15:11.561
event handlers in .net
all returning being void,

237
00:15:11.561 --> 00:15:16.892
returning methods or
functions that have void.

238
00:15:16.892 --> 00:15:20.507
Do not ever declare a method as async void
unless it's an event handler and really,

239
00:15:20.507 --> 00:15:22.430
and that's if you know what you're doing.

240
00:15:22.430 --> 00:15:25.736
And what I mean by an event handler is
something inside of like a win forms

241
00:15:25.736 --> 00:15:26.462
application.

242
00:15:26.462 --> 00:15:30.269
An event handler would be you click
a button that handles an event handler is

243
00:15:30.269 --> 00:15:33.728
triggered, and that might include
some asynchronous operation.

244
00:15:33.728 --> 00:15:35.664
That is the only use case for async void.

245
00:15:35.664 --> 00:15:38.452
I have seen so
many developers get hung up on async void.

246
00:15:38.452 --> 00:15:40.324
They've declared a method as async void.

247
00:15:40.324 --> 00:15:43.976
They didn't call it async task because
they just wanted to do something.

248
00:15:43.976 --> 00:15:46.035
They just wanted to perform some
kind of asynchronous operation.

249
00:15:46.035 --> 00:15:47.797
Call an API, right?

250
00:15:47.797 --> 00:15:51.401
Just call an API and mutate a target
system, add this person to the payroll

251
00:15:51.401 --> 00:15:54.891
system, and they declared it as async
void, and then wondered why they

252
00:15:54.891 --> 00:15:58.286
were getting these mysterious
runtime errors or runtime problems.

253
00:15:58.286 --> 00:16:03.985
It's because async void is not something
that should be used in most contexts.

254
00:16:03.985 --> 00:16:07.291
And I bring it up because
I've seen it all too often.

255
00:16:07.291 --> 00:16:11.688
Every time somebody writes async void
outside the context of an event handler,

256
00:16:11.688 --> 00:16:15.575
Jon Skeet himself summons tainted
souls into the realm of the living.

257
00:16:15.575 --> 00:16:17.864
That's what happens don't do it.

258
00:16:17.864 --> 00:16:24.014
Lastly, there is a task .run I think
it's actually task .run right here

259
00:16:24.014 --> 00:16:29.675
where you can take a synchronous
method and run it asynchronously.

260
00:16:29.675 --> 00:16:33.866
That's about as useful as doing .result or
.wait and again,

261
00:16:33.866 --> 00:16:38.925
discards some of the usefulness that you
get out of, that kind of throws away

262
00:16:38.925 --> 00:16:43.929
some of the usefulness that you get
out of using, the async await keyword.

263
00:16:43.929 --> 00:16:48.579
This will become very much more relevant
in the ASP.NET Core, course, when we're

264
00:16:48.579 --> 00:16:52.720
looking at real code, because I intend
to show you code that I would write.

265
00:16:52.720 --> 00:16:57.210
And we'll be doing async programming
almost all the way down there.

266
00:16:57.210 --> 00:17:00.337
&gt;&gt; Student 1: Is there anything that's
the equivalent of promise dot all,

267
00:17:00.337 --> 00:17:01.308
from JavaScript?

268
00:17:01.308 --> 00:17:04.903
&gt;&gt; Spencer Schneidenbach: Yes so if you
have a series of tasks that you need to

269
00:17:04.903 --> 00:17:10.366
complete and you need to wait till
they're all done, you would do await.

270
00:17:10.366 --> 00:17:16.806
So let's say that this would
be a good use case task1,

271
00:17:16.806 --> 00:17:20.446
this would be a good use case for

272
00:17:20.446 --> 00:17:26.049
bringing your tasks into
a variable like this.

273
00:17:26.049 --> 00:17:30.498
You might download Google twice,
or you might download Twitter.

274
00:17:30.498 --> 00:17:32.806
I guess you'd be downloading Elearn.

275
00:17:32.806 --> 00:17:37.542
Say await Task.WhenAll and that would wait

276
00:17:37.542 --> 00:17:42.790
until where we take wait
until all of these things

277
00:17:42.790 --> 00:17:47.526
are done before it would resume operation.

278
00:17:47.526 --> 00:17:49.983
&gt;&gt; Student 1: And
this is kind of a follow up to that but

279
00:17:49.983 --> 00:17:54.605
are do you have any tips for preventing
race conditions when using async.

280
00:17:54.605 --> 00:17:55.197
&gt;&gt; Spencer Schneidenbach: Await,

281
00:17:55.197 --> 00:17:59.600
just as long as you're awaiting
if you awaited each of these,

282
00:17:59.600 --> 00:18:04.097
they would run asynchronously per
se in the in a literal sense.

283
00:18:04.097 --> 00:18:09.340
But in a procedural writing code
sense these would then be this one

284
00:18:09.340 --> 00:18:15.345
would run wait till this this would
wait and then task two wouldn't kick off

285
00:18:15.345 --> 00:18:20.253
until task one was complete good question
&gt;&gt; Student 1: And are there any concerns

286
00:18:20.253 --> 00:18:24.352
about exhausting the sockets with async or
HTTP clients in general.

287
00:18:24.352 --> 00:18:25.707
&gt;&gt; Spencer Schneidenbach: HTTP client yes,
and

288
00:18:25.707 --> 00:18:29.334
we'll get to that when we get
to the HTTP client section.

289
00:18:29.334 --> 00:18:32.627
That is something that that can happen,
but

290
00:18:32.627 --> 00:18:36.281
only if you use mainly if
you misuse HTTP client.

291
00:18:36.281 --> 00:18:39.638
Otherwise I would not have a problem
from a single HTTP client.

292
00:18:39.638 --> 00:18:44.939
I wouldn't have a problem with running
multiple simultaneous requests.

293
00:18:44.939 --> 00:18:48.453
If I was doing hundreds of them, then
I'd be worried about something else like

294
00:18:48.453 --> 00:18:52.021
bandwidth, but I'd be worried about
some other kind of resource exhaustion,

295
00:18:52.021 --> 00:18:53.910
not necessarily one within the runtime.

296
00:18:53.910 --> 00:18:57.560
Also a really good question.

297
00:18:57.560 --> 00:19:00.250
Of course, we awaited these,
so this Task.WhenAll breaks.

