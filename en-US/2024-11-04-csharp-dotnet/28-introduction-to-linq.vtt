WEBVTT

1
00:00:00.140 --> 00:00:00.769
&gt;&gt; Spencer Schneidenbach: Let's go next.

2
00:00:00.769 --> 00:00:05.905
So LINQ, Language Integrated Query
is probably one of the defining

3
00:00:05.905 --> 00:00:11.958
features of .NET, this is one of the
features that makes .NET so easy to love.

4
00:00:11.958 --> 00:00:15.169
Somebody asked about JavaScript and
Map, Reduce, Filter.

5
00:00:15.169 --> 00:00:19.952
This is C#'s implementation of that,
so let's talk about it.

6
00:00:19.952 --> 00:00:24.152
Imagine that you have an employee object,
as we have had many times, or

7
00:00:24.152 --> 00:00:25.204
a person object.

8
00:00:25.204 --> 00:00:28.994
And you need to get the names of all the
employees who are earning over $100,000,

9
00:00:28.994 --> 00:00:31.794
and you need to display these
names on the page, sort in order.

10
00:00:31.794 --> 00:00:35.206
So you could do something like this,
where you define a list of employees,

11
00:00:35.206 --> 00:00:38.305
where you get your employees from
your repository, for instance.

12
00:00:38.305 --> 00:00:41.746
And then you start tracking your
highEarners in a separate list, and

13
00:00:41.746 --> 00:00:44.964
you spin through and
you foreach through each of the employees.

14
00:00:44.964 --> 00:00:47.799
And you say if the employee salary
is greater than 100,000, well,

15
00:00:47.799 --> 00:00:49.604
then add them to the highEarners list,
right?

16
00:00:49.604 --> 00:00:51.572
We wanna keep track of them separately.

17
00:00:51.572 --> 00:00:54.935
We're trying to get those,
boss has asked for a report.

18
00:00:54.935 --> 00:00:56.761
And then we wanna sort that list.

19
00:00:56.761 --> 00:01:01.015
So there is a sort function inside
of the list of t construct.

20
00:01:01.015 --> 00:01:04.278
It allows you to sort those two objects,
so that way you're able to say,

21
00:01:04.278 --> 00:01:06.339
how do you want this list to be ordered?

22
00:01:06.339 --> 00:01:11.132
And then you can spin through and
go highEarner in highEarners, and then in

23
00:01:11.132 --> 00:01:16.248
console write name, and then show those
names or print on a report or whatever.

24
00:01:16.248 --> 00:01:21.065
With LINQ, you're able to do
that very naturally using

25
00:01:21.065 --> 00:01:23.632
a very kinda natural syntax.

26
00:01:23.632 --> 00:01:26.599
So this is what LINQ looks like.

27
00:01:26.599 --> 00:01:29.910
You can do the exact same
thing in way less code, but

28
00:01:29.910 --> 00:01:34.684
way clearer in a way that like this,
this is difficult, it's possible,

29
00:01:34.684 --> 00:01:37.920
but it's a little more
difficult to understand.

30
00:01:37.920 --> 00:01:44.661
Whereas this, it's kind of just I can see
where salary is greater than a 100,000.

31
00:01:44.661 --> 00:01:46.637
I want you to order by name, and

32
00:01:46.637 --> 00:01:50.371
I want you to select all of
these elements from this array.

33
00:01:50.371 --> 00:01:54.405
This is really where the rubber meets the
road when it comes to Lambda functions.

34
00:01:54.405 --> 00:01:56.436
The thing that we just talked about.

35
00:01:56.436 --> 00:02:00.532
Lambda functions are used by LINQ as
a way of saying, hey, I need you to give

36
00:02:00.532 --> 00:02:04.847
me a function that tells me whether or
not this salary is over 100,000.

37
00:02:04.847 --> 00:02:06.984
I need you to tell me what
you want me to order by.

38
00:02:06.984 --> 00:02:08.954
So you want me to order by name?

39
00:02:08.954 --> 00:02:10.517
I want you to get it here.

40
00:02:10.517 --> 00:02:12.590
And then I just need the names
of all those employees.

41
00:02:12.590 --> 00:02:14.273
I don't need to know
anything else about them.

42
00:02:14.273 --> 00:02:16.948
I wanna save memory,
I wanna save space on my piece of paper.

43
00:02:16.948 --> 00:02:20.420
So just print the names to console or
print the names to the piece of paper.

44
00:02:20.420 --> 00:02:22.669
That's the only thing that I need.

45
00:02:22.669 --> 00:02:26.850
That's LINQ, it allows you to really
powerfully operate on collections in

46
00:02:26.850 --> 00:02:30.702
a really kind of intuitive way, and
it gets easy as you start typing and

47
00:02:30.702 --> 00:02:31.310
doing it.

48
00:02:31.310 --> 00:02:34.488
I'm gonna talk about one major syntax for
LINQ,

49
00:02:34.488 --> 00:02:38.688
the one that I see in the real world,
which is the Lambda syntax.

50
00:02:38.688 --> 00:02:42.759
There is a different syntax
that looks very similar to SQL.

51
00:02:42.759 --> 00:02:45.093
I will tell you that in practice,
this is never used.

52
00:02:45.093 --> 00:02:50.840
I never see anybody write this like this,
but when LINQ was originally created,

53
00:02:50.840 --> 00:02:56.096
they had a query syntax, God bless
Microsoft's heart, nobody uses it.

54
00:02:58.026 --> 00:03:01.169
&gt;&gt; Spencer Schneidenbach: So why did we
talk about all those things ahead of all

55
00:03:01.169 --> 00:03:01.760
of this?

56
00:03:01.760 --> 00:03:05.497
Well, the technologies that make
LINQ possible are generics,

57
00:03:05.497 --> 00:03:07.861
IEnumerable of T, extension methods.

58
00:03:07.861 --> 00:03:12.632
All of these things that you see, those
don't exist on those collections, they're

59
00:03:12.632 --> 00:03:17.220
extension methods on those collection
types, right, and Lambda expressions.

60
00:03:17.220 --> 00:03:22.292
So we've kind of combined all of that
in order to access our collections and

61
00:03:22.292 --> 00:03:27.138
transform them and do things with them,
in a really powerful way.

62
00:03:27.138 --> 00:03:31.889
So one kind of interesting property of
LINQ is we talked about, remember how I

63
00:03:31.889 --> 00:03:36.729
said you need to put a pin in IEnumerable,
and how they're lazily evaluated.

64
00:03:36.729 --> 00:03:41.263
One of the cool things about LINQ and
one of the slightly confusing things

65
00:03:41.263 --> 00:03:44.697
about LINQ is that when you
declare this highEarners.

66
00:03:44.697 --> 00:03:48.788
At no point until you start assessing
members of this collection do

67
00:03:48.788 --> 00:03:53.539
these methods actually go through and
actually start comparing salaries and

68
00:03:53.539 --> 00:03:54.719
ordering by name.

69
00:03:54.719 --> 00:03:56.091
Which is a little different.

70
00:03:56.091 --> 00:03:59.450
When you do map, or reduce,
or filter in JavaScript,

71
00:03:59.450 --> 00:04:02.453
those operations happen immediately,
right?

72
00:04:02.453 --> 00:04:07.424
In C#, that's not the case, it returns,
it's what's called lazily evaluated.

73
00:04:07.424 --> 00:04:14.828
So when you declare it at that point,
you're not enumerating through it.

74
00:04:14.828 --> 00:04:20.141
Only when you actually start spinning
through it, do you actually start

75
00:04:20.141 --> 00:04:26.257
accessing and do all of these things start
running, which is really interesting.

76
00:04:26.257 --> 00:04:28.513
It's a small kind of
important property to know,

77
00:04:28.513 --> 00:04:30.671
it's something to put in
the back of your head.

78
00:04:30.671 --> 00:04:35.983
As you're going through your C# journey,
you'll experience situations

79
00:04:35.983 --> 00:04:41.383
where you become very aware of this,
but going on it's important to know it.

80
00:04:41.383 --> 00:04:43.498
I mentioned to ToList and ToArray,

81
00:04:43.498 --> 00:04:48.019
that's the easiest way to take a lazy
evaluation and kick it into high gear.

82
00:04:48.019 --> 00:04:51.233
It's called eagerly
evaluated at that point.

83
00:04:51.233 --> 00:04:56.912
And that's typically what developers use
to quote unquote, materialize a list.

84
00:04:56.912 --> 00:05:01.560
It will actually go through and
run those where and select methods.

85
00:05:01.560 --> 00:05:05.028
I already talked about query
syntax versus Lambda syntax and

86
00:05:05.028 --> 00:05:08.569
that we're gonna focus on using
Lambda syntax exclusively.

87
00:05:08.569 --> 00:05:11.248
I am going to combine as many
of these sections as I can and

88
00:05:11.248 --> 00:05:13.756
just kind of show some code
examples of using LINQ and

89
00:05:13.756 --> 00:05:16.906
things that I think you need to
look out for when you're using it.

