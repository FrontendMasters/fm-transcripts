WEBVTT

1
00:00:00.000 --> 00:00:03.983
&gt;&gt; Brian Holt: Okay, so
let's make this wrong first.

2
00:00:03.983 --> 00:00:09.355
So basically, we're gonna do exactly
the problem that I just described to you,

3
00:00:09.355 --> 00:00:14.654
and I'll say that this is the way that
most React apps just get coded up, right?

4
00:00:14.654 --> 00:00:18.011
The user makes a decision to do something,
and you just do everything, and

5
00:00:18.011 --> 00:00:20.624
you make the user wait until
you've loaded everything and

6
00:00:20.624 --> 00:00:22.079
then you show them everything.

7
00:00:22.079 --> 00:00:25.319
That's just what we've done for
a very long time, okay?

8
00:00:25.319 --> 00:00:27.008
So let's go ahead and code this together.

9
00:00:27.008 --> 00:00:30.572
Let's make a Score.jsx file first.

10
00:00:34.470 --> 00:00:37.760
&gt;&gt; Brian Holt: So
we're gonna have a const loadingUrl, and

11
00:00:37.760 --> 00:00:40.278
this is just an image that we like.

12
00:00:40.278 --> 00:00:47.662
It's a loading image that we can
show people, images/loading.webp.

13
00:00:47.662 --> 00:00:50.690
If you're not familiar with dot webp,

14
00:00:50.690 --> 00:00:55.941
it's an image format that's a bit
more efficient than JPEG or PNG.

15
00:00:55.941 --> 00:00:59.827
It's fairly widely compatible with
basically every browser now, but

16
00:00:59.827 --> 00:01:03.593
for a long time it wasn't,
which is why it's probably less common.

17
00:01:03.593 --> 00:01:04.760
I think it's from Google.

18
00:01:04.760 --> 00:01:06.427
Is anyone gonna correct me on that?

19
00:01:06.427 --> 00:01:10.336
I'm sure someone in chat is
furiously typing at the moment.

20
00:01:10.336 --> 00:01:11.568
But I think it's from Google.

21
00:01:11.568 --> 00:01:18.184
Export default,

22
00:01:21.036 --> 00:01:23.156
&gt;&gt; Brian Holt: Function Score, and

23
00:01:23.156 --> 00:01:27.170
this is gonna accept quite a few things.

24
00:01:27.170 --> 00:01:31.651
So isPending, home, away,

25
00:01:31.651 --> 00:01:37.210
awayName, homeName, awayImage,

26
00:01:37.210 --> 00:01:43.144
and homeImage, something like that.

27
00:01:48.158 --> 00:01:49.399
&gt;&gt; Brian Holt: I'll just hide this for
the moment.

28
00:01:49.399 --> 00:01:50.235
We don't need that.

29
00:01:50.235 --> 00:01:55.212
So, I'm gonna answer this question cuz
I imagine someone's thinking about it.

30
00:01:55.212 --> 00:01:59.087
You could have just done like an options
object as opposed to naming these

31
00:01:59.087 --> 00:01:59.923
all one by one.

32
00:01:59.923 --> 00:02:03.384
I like this, I prefer this,
it's a bit more explicit.

33
00:02:03.384 --> 00:02:07.080
In theory, it makes it fit
better as well with memoization.

34
00:02:07.080 --> 00:02:08.820
I actually don't really care about that.

35
00:02:08.820 --> 00:02:13.507
I just like that this component is
very explicit about it requires

36
00:02:13.507 --> 00:02:15.134
these things to work.

37
00:02:15.134 --> 00:02:18.897
It's kind of self-documenting
code in that way.

38
00:02:18.897 --> 00:02:24.154
But it's an opinion, you could also just
totally have said something like options

39
00:02:24.154 --> 00:02:28.827
and just this would all be put inside
that options or something like that.

40
00:02:28.827 --> 00:02:30.709
We're just gonna return markup here.

41
00:02:30.709 --> 00:02:36.314
So div className = "score",

42
00:02:36.314 --> 00:02:42.542
and just div here, h2 we'll put,

43
00:02:42.542 --> 00:02:48.156
and then we'll say isPending.

44
00:02:48.156 --> 00:02:51.456
And if it's pending,
we're gonna say it's HOME, otherwise,

45
00:02:51.456 --> 00:02:53.078
we'll say it's the homeName.

46
00:02:56.333 --> 00:02:59.623
&gt;&gt; Brian Holt: Okay, and then we're gonna
do something pretty similar with an h3,

47
00:02:59.623 --> 00:03:00.252
isPending.

48
00:03:03.057 --> 00:03:04.678
&gt;&gt; Brian Holt: And this will be the score.

49
00:03:04.678 --> 00:03:07.547
So just like a dash or
something like that,

50
00:03:07.547 --> 00:03:10.347
otherwise it's gonna be the home score.

51
00:03:10.347 --> 00:03:14.607
The away one's gonna look
pretty much the same, so

52
00:03:14.607 --> 00:03:20.763
you can just kinda copy and paste here and
say AWAY, awayName, and Away.

53
00:03:24.020 --> 00:03:27.638
&gt;&gt; Brian Holt: And underneath that, in
each one of these, we also need an image.

54
00:03:27.638 --> 00:03:31.058
So image source equals isPending, and

55
00:03:31.058 --> 00:03:36.037
if it's pending,
then we're gonna do the loadingurl.

56
00:03:36.037 --> 00:03:39.587
We'll show the placeholder image,
otherwise,

57
00:03:39.587 --> 00:03:44.246
we'll show the actual homeImage,
and the alt is home team logo.

58
00:03:44.246 --> 00:03:48.809
I'm sure you could get more descriptive
than that, we're not going to right now.

59
00:03:48.809 --> 00:03:50.364
Okay, same thing down here.

60
00:03:50.364 --> 00:03:55.888
It's just awayImage and away team logo.

61
00:03:55.888 --> 00:03:59.517
Really, the thing to take away from
here is writing some of this is kind

62
00:03:59.517 --> 00:04:01.561
of burdensome of like, is it loading?

63
00:04:01.561 --> 00:04:02.306
Is it not loading?

64
00:04:02.306 --> 00:04:03.911
It's kind of a pain in the butt.

65
00:04:03.911 --> 00:04:08.882
Not that this is necessarily
gonna solve that, but, yeah,

66
00:04:08.882 --> 00:04:13.863
we'll start taking advantage
of this here in just a second.

67
00:04:13.863 --> 00:04:17.124
Okay, let's make a quick
function in here as well.

68
00:04:17.124 --> 00:04:21.212
We'll call it just, sorry,
not a function, but rather a file, and

69
00:04:21.212 --> 00:04:23.270
we'll just call it getScore.js.

70
00:04:23.270 --> 00:04:28.454
And we'll just make an export default

71
00:04:28.454 --> 00:04:33.805
async function, getScore(game).

72
00:04:33.805 --> 00:04:39.236
And let's say const response = await

73
00:04:39.236 --> 00:04:47.050
fetch( "/score?game=" +game), whatever.

74
00:04:47.050 --> 00:04:51.185
Yeah, this is just gonna be a number,
right?

75
00:04:51.185 --> 00:04:57.514
And then const score equals,

76
00:04:57.514 --> 00:05:02.831
await response.json,

77
00:05:02.831 --> 00:05:06.887
and return score.

78
00:05:06.887 --> 00:05:08.697
Okay, cool?

79
00:05:08.697 --> 00:05:12.649
Let's go modify App.jsx.

80
00:05:12.649 --> 00:05:20.245
And at the top here,
we're going to import useState and

81
00:05:20.245 --> 00:05:24.129
useEffect from "react".

82
00:05:24.129 --> 00:05:29.381
Import Score from ./Score,

83
00:05:29.381 --> 00:05:35.644
and import getScore from getScore.

84
00:05:35.644 --> 00:05:43.040
I mean, frankly,
it would be making a hook out of getScore.

85
00:05:43.040 --> 00:05:47.790
If I had thought about this more in
advance, I probably would have done this,

86
00:05:47.790 --> 00:05:51.372
but instead of having an effect
directly in our App.jsx,

87
00:05:51.372 --> 00:05:54.901
we could have it kind of
encapsulated nicely into a hook.

88
00:05:54.901 --> 00:05:59.252
So feel free to refactor that,
could be a fun exercise.

89
00:06:01.244 --> 00:06:05.179
&gt;&gt; Brian Holt: Okay, and
then const isPending and

90
00:06:05.179 --> 00:06:12.000
setIsPending = useState, and
it's gonna be true at first,

91
00:06:12.000 --> 00:06:17.003
right, cuz we won't have loaded the score.

92
00:06:17.003 --> 00:06:21.558
Const game and setGame

93
00:06:21.558 --> 00:06:26.836
equals useState(1).

94
00:06:26.836 --> 00:06:32.213
I index these one to 7, by the way,
it's not indexed up by 0.

95
00:06:32.213 --> 00:06:41.206
And then const score setScore,
&gt;&gt; Brian Holt: Equals useState,

96
00:06:41.206 --> 00:06:44.079
and I made this one an object.

97
00:06:44.079 --> 00:06:50.967
So home will be blah and
away will be blah.

98
00:06:50.967 --> 00:06:54.943
In theory, this won't matter because you
saw in our score component that you won't

99
00:06:54.943 --> 00:06:56.348
display it if it's pending.

100
00:07:00.310 --> 00:07:07.963
&gt;&gt; Brian Holt: Okay,
async function getNewScore(game).

101
00:07:07.963 --> 00:07:13.179
Okay, the user requests a new score,
what are we gonna do first?

102
00:07:13.179 --> 00:07:15.919
Well, we have this isPending flag, so

103
00:07:15.919 --> 00:07:19.995
we probably wanna mark the UI
as unresponsive right away.

104
00:07:19.995 --> 00:07:20.844
So let's do that.

105
00:07:20.844 --> 00:07:27.729
We're gonna say setIsPending(true), okay?

106
00:07:27.729 --> 00:07:31.066
Then you wanna set
the game to be the game.

107
00:07:31.066 --> 00:07:38.326
Const newScore is assigned
await getScore(game),

108
00:07:38.326 --> 00:07:42.272
and setScore(newScore),

109
00:07:42.272 --> 00:07:46.383
and setIsPending(false).

110
00:07:46.383 --> 00:07:49.011
So very procedural here.

111
00:07:49.011 --> 00:07:52.696
Mark yourself as loading, change the game.

112
00:07:52.696 --> 00:07:56.627
[LAUGH] Change the game
that you are loading.

113
00:07:56.627 --> 00:07:58.654
Go load what actually you want.

114
00:07:58.654 --> 00:08:00.942
Load that into memory here, and

115
00:08:00.942 --> 00:08:05.869
then finally you're gonna tell it
to re-render and show the score.

116
00:08:05.869 --> 00:08:08.874
Key here is that you're gonna await
this call, cuz if you recall,

117
00:08:08.874 --> 00:08:11.191
this is going to take at
least five seconds to load.

118
00:08:11.191 --> 00:08:16.859
UseEffect,
&gt;&gt; Brian Holt: And

119
00:08:16.859 --> 00:08:21.599
here you're just gonna
say getNewScore(game).

120
00:08:21.599 --> 00:08:25.481
So I had this coded this way,
where this effect never runs again.

121
00:08:25.481 --> 00:08:28.886
Again, reading my code again,
you could actually just say that this is

122
00:08:28.886 --> 00:08:32.603
dependent on game, and then you could
have this run every time game changes.

123
00:08:32.603 --> 00:08:34.905
Either one of these are fine.

124
00:08:34.905 --> 00:08:38.473
We're just gonna follow my notes, but just
know that there's many ways to do this.

125
00:08:42.357 --> 00:08:47.727
&gt;&gt; Brian Holt: ClassName= "app", okay?

126
00:08:47.727 --> 00:08:51.981
And then we're gonna do an h1 here,

127
00:08:51.981 --> 00:08:57.334
Game{game}, and we're gonna do a select,

128
00:08:57.334 --> 00:09:03.801
and then we're gonna disable
it if it isPending, why?

129
00:09:03.801 --> 00:09:06.835
Well, imagine that you have a user that
does exactly what we're talking about.

130
00:09:06.835 --> 00:09:10.161
They choose one, and
then they choose another.

131
00:09:10.161 --> 00:09:15.115
And let's say the first request is
slower than the second request.

132
00:09:15.115 --> 00:09:17.612
For many network conditions,
that could be true.

133
00:09:17.612 --> 00:09:20.855
You would actually end up with the first
request because it's gonna be the last one

134
00:09:20.855 --> 00:09:22.182
returned that matters, right?

135
00:09:22.182 --> 00:09:24.946
Because this doesn't account for
any sort of order.

136
00:09:24.946 --> 00:09:27.808
It's just gonna say, cool,
this is what it is now, right?

137
00:09:27.808 --> 00:09:31.937
So in order to avoid that
potential kind of race condition,

138
00:09:31.937 --> 00:09:36.575
we're just gonna disable it so
that the user can't choose again.

139
00:09:36.575 --> 00:09:42.160
OnChange= {e=&gt;, and then we're

140
00:09:42.160 --> 00:09:49.672
gonna say getNewScore(e.target.value)}.

141
00:09:49.672 --> 00:09:55.623
Now, again, if you did this with game up
here, instead of calling this directly,

142
00:09:55.623 --> 00:09:59.193
what you would do is you
would just call setGame and

143
00:09:59.193 --> 00:10:02.869
then just let everything
kind of cascade that way.

144
00:10:02.869 --> 00:10:06.958
Honestly, no real preference either way,
both of these are explicit enough for me.

145
00:10:06.958 --> 00:10:09.558
Okay, so getNewScore, we did that.

146
00:10:09.558 --> 00:10:16.754
And then we're just gonna
have some options here.

147
00:10:16.754 --> 00:10:22.303
Value = {1}, and
then we're gonna say Game 1.

148
00:10:22.303 --> 00:10:27.634
And you could get fancy and have this
do a range or something like that.

149
00:10:27.634 --> 00:10:29.226
I am just gonna do 2.

150
00:10:29.226 --> 00:10:33.336
I'm gonna make this really dumb and
just explicitly write them out.

151
00:10:33.336 --> 00:10:38.759
So now we have our options
&gt;&gt; Brian Holt: Okay,

152
00:10:38.759 --> 00:10:44.224
and then we're gonna do &lt;div className=

153
00:10:44.224 --> 00:10:48.184
"loading-container"&gt;.

154
00:10:48.184 --> 00:10:50.197
So we're gonna show a nice
little loading spinner here.

155
00:10:50.197 --> 00:10:57.786
So loading-container, and then I'll
make sure this is a template string.

156
00:10:57.786 --> 00:11:02.983
So not double quotes here,
but template string,

157
00:11:02.983 --> 00:11:08.314
so that we can do something like this,
isPending.

158
00:11:11.559 --> 00:11:14.907
&gt;&gt; Brian Holt: Loading class, and if
it's not there, then don't put anything.

159
00:11:14.907 --> 00:11:16.332
So why this?

160
00:11:16.332 --> 00:11:21.444
This will add the loading class
specifically to this div,

161
00:11:21.444 --> 00:11:25.525
which using the CSS,
it'll make it visible.

162
00:11:25.525 --> 00:11:32.314
And then we're just gonna put a span here,
className="spinner".

163
00:11:32.314 --> 00:11:39.062
Feel free to put any emoji you want here,
I'll just put a soccer ball.

164
00:11:39.062 --> 00:11:43.217
But anything you wanna make spin,
just put it right there.

165
00:11:43.217 --> 00:11:47.001
Another div, and
then we're gonna put a score, and

166
00:11:47.001 --> 00:11:51.393
then we're gonna make sure we
add all of our state into this.

167
00:11:51.393 --> 00:11:55.493
IsPending={isPending}.

168
00:11:55.493 --> 00:12:00.045
HomeImage equals, isn't it score?

169
00:12:00.045 --> 00:12:00.806
Where do I keep that?

170
00:12:00.806 --> 00:12:02.892
Isn't it score?

171
00:12:02.892 --> 00:12:03.938
It's up in here.

172
00:12:03.938 --> 00:12:08.989
So score.homeImage,

173
00:12:08.989 --> 00:12:13.281
and homeName equals

174
00:12:13.281 --> 00:12:20.608
score.homeName and awayImage.

175
00:12:20.608 --> 00:12:23.465
The other advantage of
doing it this way is,

176
00:12:23.465 --> 00:12:27.789
I guess you can get a TypeScript to
check it in an object as well, but

177
00:12:27.789 --> 00:12:32.137
the autocompletion is really nice
when it has a very explicit API.

178
00:12:32.137 --> 00:12:36.834
You could get real lazy if you wanted
to and you could just ...score and

179
00:12:36.834 --> 00:12:38.298
that would just work.

180
00:12:38.298 --> 00:12:42.736
And I am tempted to right now,
but I am not going to.

181
00:12:42.736 --> 00:12:44.359
Score.awayImage.

182
00:12:44.359 --> 00:12:49.739
Those kind of implicit, yeah,
it's really easy to write and

183
00:12:49.739 --> 00:12:52.539
it's really hard to maintain.

184
00:12:55.588 --> 00:13:01.289
&gt;&gt; Brian Holt: Okay,
home=awayScore.home) and

185
00:13:01.289 --> 00:13:05.390
away=(score.away).

186
00:13:05.390 --> 00:13:10.042
The links that developers
will go to to just avoid

187
00:13:10.042 --> 00:13:13.794
a couple of keystrokes is phenomenal.

188
00:13:13.794 --> 00:13:18.787
Okay, so
I believe we should be able to come

189
00:13:18.787 --> 00:13:23.238
over here to React Transitions here.

190
00:13:23.238 --> 00:13:25.469
What did we break first?

191
00:13:25.469 --> 00:13:29.458
Dot slash getScore, this is not a module.

192
00:13:29.458 --> 00:13:34.228
So Line 3 here, getScore.

193
00:13:34.228 --> 00:13:36.624
And why did I call this getNewScore?

194
00:13:36.624 --> 00:13:39.850
It's just getScore, like that.

195
00:13:39.850 --> 00:13:45.047
So getScore from ./score, and
then Line 13 should have been getScore.

196
00:13:45.047 --> 00:13:50.181
If I come in here to completed,
and we look at transitions,

197
00:13:50.181 --> 00:13:55.640
and we look at source, and
we look at style, and we look at raw.

198
00:13:58.361 --> 00:14:01.375
&gt;&gt; Brian Holt: And
I say blah, that might be it.

199
00:14:04.833 --> 00:14:09.585
&gt;&gt; Brian Holt: So, yeah, we were in app,
we finished all of that,

200
00:14:09.585 --> 00:14:13.266
and we are going to go
look at the app now.

201
00:14:13.266 --> 00:14:19.335
And so, I'll just refresh here, you can
see this takes a long time for it to load.

202
00:14:19.335 --> 00:14:21.127
We see our placeholder images and

203
00:14:21.127 --> 00:14:25.481
then we can see that we have the 404
not found versus the 500 server errors.

204
00:14:25.481 --> 00:14:30.201
And then if I wanna look at whatever Game
5 is, it loads in a nice loading state,

205
00:14:30.201 --> 00:14:32.251
but I can't change this, right?

206
00:14:32.251 --> 00:14:36.994
So if I clicked Game 5 and
I really wanted Game 6, you're stuck.

207
00:14:36.994 --> 00:14:39.244
You are like,
you gotta wait that five seconds, and

208
00:14:39.244 --> 00:14:41.096
users are gonna get frustrated with that.

209
00:14:41.096 --> 00:14:44.855
I coded this and
I'm already frustrated by this.

210
00:14:44.855 --> 00:14:47.366
So this is the way that
we typically had done it.

211
00:14:47.366 --> 00:14:50.307
Normally, a five second
API call is ridiculous.

212
00:14:50.307 --> 00:14:55.654
If you have a five second API call,
that's your problem, not your transitions,

213
00:14:55.654 --> 00:14:59.855
probably, but transitions can
help with this kind of problem.

214
00:14:59.855 --> 00:15:02.483
Maybe you are doing something
like calling an LLM,

215
00:15:02.483 --> 00:15:04.571
which just necessitates time, right?

216
00:15:04.571 --> 00:15:11.317
If you're calling Claude with thinking,
it takes 12 seconds for that to come back.

217
00:15:11.317 --> 00:15:12.728
So some of this things you can't avoid.

218
00:15:12.728 --> 00:15:15.536
And that's where this
can be really helpful,

219
00:15:15.536 --> 00:15:20.144
is this transition API helps your UI
stay interactable, and you kind of take

220
00:15:20.144 --> 00:15:24.693
advantage of the React schedule to kind
of handle all these sort of things.

221
00:15:24.693 --> 00:15:27.795
Cuz it'll guarantee you whatever the one
you call last is actually the state that

222
00:15:27.795 --> 00:15:28.759
it's going to observe.

223
00:15:28.759 --> 00:15:32.515
So that problem of like, I called this but
the other one came back first,

224
00:15:32.515 --> 00:15:35.611
doesn't become important,
which is really cool as well.

