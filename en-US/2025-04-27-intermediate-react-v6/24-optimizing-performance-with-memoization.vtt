WEBVTT

1
00:00:00.000 --> 00:00:06.947
&gt;&gt; Brian Holt: So, let's turn it back up
to a hundred here so we can see some jenk.

2
00:00:06.947 --> 00:00:08.036
And let's go fix this.

3
00:00:08.036 --> 00:00:09.875
Let's make this like, not do that.

4
00:00:09.875 --> 00:00:13.960
There's a couple of levels to this.

5
00:00:13.960 --> 00:00:20.671
First thing is we're gonna import
memo at the top from react.

6
00:00:20.671 --> 00:00:26.081
And then when you have this function here,

7
00:00:26.081 --> 00:00:32.706
we're just gonna wrap
the whole thing here in memo.

8
00:00:32.706 --> 00:00:40.913
So I map this function is now
passed into memo as a parameter.

9
00:00:40.913 --> 00:00:47.468
This tells React is like, if my props
didn't change, do not re-render me.

10
00:00:49.225 --> 00:00:51.231
&gt;&gt; Brian Holt: Right,
does that make sense?

11
00:00:51.231 --> 00:00:54.869
As soon as my props change,
by all means, re-render me,

12
00:00:54.869 --> 00:00:57.562
but leave me alone unless my props change.

13
00:00:57.562 --> 00:01:00.367
Just cache this between
various different results.

14
00:01:00.367 --> 00:01:01.108
We have render.

15
00:01:01.108 --> 00:01:06.065
That's a function in theory not changing,
right, and

16
00:01:06.065 --> 00:01:11.454
you have options,
which is an object full of theme and text.

17
00:01:11.454 --> 00:01:13.003
So theoretically,

18
00:01:13.003 --> 00:01:18.751
none of these are changing between
each re-renders of the clock, right?

19
00:01:18.751 --> 00:01:23.585
So if we go look at this,
why is this still changing?

20
00:01:23.585 --> 00:01:27.426
Look at this code right here.

21
00:01:27.426 --> 00:01:30.957
I have object A, and I have object B.

22
00:01:30.957 --> 00:01:35.959
Is object A AA equal to object B?

23
00:01:35.959 --> 00:01:37.734
This is like dumb interview questions,
I hate them.

24
00:01:37.734 --> 00:01:40.545
But actually, in this case,
it's important.

25
00:01:40.545 --> 00:01:42.237
No, right?

26
00:01:42.237 --> 00:01:43.464
Let me just open this.

27
00:01:43.464 --> 00:01:45.900
If you want me to prove my point.

28
00:01:45.900 --> 00:01:48.719
x equals blah, y equals blah.

29
00:01:48.719 --> 00:01:53.574
Both empty objects, is this true?

30
00:01:53.574 --> 00:01:56.184
No, cuz they're actually
different objects, right?

31
00:01:56.184 --> 00:01:58.296
They point to two
different things in memory.

32
00:01:58.296 --> 00:02:01.348
Despite the fact that they're
functionally equivalent,

33
00:02:01.348 --> 00:02:05.752
they're not literally the same object,
and that's what this question is, right?

34
00:02:05.752 --> 00:02:09.605
So if we look at our code here,
obviously I did this intentionally.

35
00:02:09.605 --> 00:02:12.924
In between renders this object is
getting created a new every single time.

36
00:02:12.924 --> 00:02:17.556
So is the old version of this object
equal to the new version of this object?

37
00:02:17.556 --> 00:02:18.866
No, right?

38
00:02:18.866 --> 00:02:22.120
So that's what's happening
here with options.

39
00:02:22.120 --> 00:02:24.751
So let's go ahead and fix that one first.

40
00:02:24.751 --> 00:02:27.625
We're gonna use something called useMemo.

41
00:02:27.625 --> 00:02:32.790
And then all we're gonna do here
is just say useMemo, right?

42
00:02:32.790 --> 00:02:36.736
useMemo, and then just like the effects
here, we have to give it like, hey,

43
00:02:36.736 --> 00:02:38.888
this has changed when this has happened.

44
00:02:38.888 --> 00:02:43.281
You just give it an array of, hey, this
actually does change when either text or

45
00:02:43.281 --> 00:02:48.149
theme is different, that's when it'll know
to invalidate its cache of this, right?

46
00:02:48.149 --> 00:02:50.915
&gt;&gt; Speaker 2: Which cache is that
the cache in the browser is it?

47
00:02:50.915 --> 00:02:52.528
&gt;&gt; Brian Holt: The memo cache, right?

48
00:02:52.528 --> 00:02:54.278
It's like a React memo cache.

49
00:02:54.278 --> 00:02:56.499
It caches the same object between renders,
right?

50
00:02:56.499 --> 00:02:59.280
So that options will be
triple equal to itself,

51
00:02:59.280 --> 00:03:03.459
because it's gonna give it back,
literally the same options object.

52
00:03:03.459 --> 00:03:07.566
So, yeah this will cache the same
options object between renders, and

53
00:03:07.566 --> 00:03:11.411
it'll only invalidate that when
one of these two things changes.

54
00:03:11.411 --> 00:03:14.425
That the previous version of this is
not equal to the next version of it.

55
00:03:14.425 --> 00:03:17.789
&gt;&gt; Speaker 2: I didn't know
there was a React cache, though.

56
00:03:17.789 --> 00:03:19.727
&gt;&gt; Brian Holt: I don't even know if it's
called that, that's just what it is.

57
00:03:19.727 --> 00:03:22.576
It's effectively doing.

58
00:03:22.576 --> 00:03:28.848
Now, probably to no one's surprise,
that's broken.

59
00:03:28.848 --> 00:03:32.503
Yeah.
This is a function, sorry,

60
00:03:32.503 --> 00:03:35.059
not a direct object.

61
00:03:35.059 --> 00:03:39.717
So you need to make this a function
that returns an object, text and

62
00:03:39.717 --> 00:03:42.056
theme cuz that's how it worked.

63
00:03:42.056 --> 00:03:44.400
That fix it?

64
00:03:44.400 --> 00:03:47.295
Yeah, that fixed it.

65
00:03:47.295 --> 00:03:48.493
Sorry, had the API there.

66
00:03:48.493 --> 00:03:52.527
This is a function, it returns
an object with text and theme in it.

67
00:03:52.527 --> 00:03:57.433
So, still rerendering, why?

68
00:03:57.433 --> 00:04:01.377
FunctionA equals function blah,
functionB equals function blah,

69
00:04:01.377 --> 00:04:03.353
are these two things equivalent?

70
00:04:03.353 --> 00:04:06.517
No, for
the exact same reasons they're not.

71
00:04:06.517 --> 00:04:10.830
So, there's also something
called usecallback that deals

72
00:04:10.830 --> 00:04:13.119
specifically with functions.

73
00:04:13.119 --> 00:04:16.010
Usecallback and

74
00:04:16.010 --> 00:04:20.763
kinda the same thing here.

75
00:04:20.763 --> 00:04:22.043
Usecallback.

76
00:04:24.459 --> 00:04:28.719
&gt;&gt; Brian Holt: And
when will this not be valid?

77
00:04:28.719 --> 00:04:33.123
Never, it's actually always the same
function, so you just give it an empty

78
00:04:33.123 --> 00:04:36.715
array saying this is always gonna
be the same render function,

79
00:04:36.715 --> 00:04:38.160
this will never change.

80
00:04:38.160 --> 00:04:42.636
And now, if I go over here,

81
00:04:42.636 --> 00:04:47.116
this has stopped rendering

82
00:04:47.116 --> 00:04:51.411
because of memo, right?

83
00:04:51.411 --> 00:04:58.759
Now, you can see this is now updated only
when this these things have changed.

84
00:04:58.759 --> 00:05:01.755
This is still janky this.

85
00:05:01.755 --> 00:05:04.959
I mean, it is right cuz it still has
that expensive render in it, but

86
00:05:04.959 --> 00:05:07.956
this is not gonna cause other parts
of our code base to be janky.

87
00:05:07.956 --> 00:05:11.578
Yeah, you're kind of like
containing the the blast zone for

88
00:05:11.578 --> 00:05:14.712
janky pieces of your code,
because we all got them.

89
00:05:14.712 --> 00:05:17.114
We all got janky pieces of code,
this was always kinda funny.

90
00:05:17.114 --> 00:05:21.496
I had a claw generate me this
random piece of markdown and

91
00:05:21.496 --> 00:05:23.743
some of it was pretty funny.

92
00:05:23.743 --> 00:05:28.562
My mental health plus
Javascript equals undefined.

93
00:05:28.562 --> 00:05:30.358
Why should JavaScript
developers wear glasses?

94
00:05:30.358 --> 00:05:33.316
Because they don't see sharp.

95
00:05:33.316 --> 00:05:34.304
[LAUGH] Thanks, dad.

96
00:05:34.304 --> 00:05:39.254
Try to watch friend masters, feel
confident, attempt to use new knowledge,

97
00:05:39.254 --> 00:05:39.786
panic.

98
00:05:39.786 --> 00:05:42.981
[LAUGH] Is that the life
cycle of your customer?

99
00:05:42.981 --> 00:05:45.451
That sounds about right.

100
00:05:45.451 --> 00:05:49.493
Maybe I should become a farmer instead,
I do feel that.

