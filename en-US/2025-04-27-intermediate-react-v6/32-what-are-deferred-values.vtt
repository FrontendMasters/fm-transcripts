WEBVTT

1
00:00:00.277 --> 00:00:06.070
&gt;&gt; Brian Holt: Let's move
on to deferred values.

2
00:00:09.242 --> 00:00:14.603
&gt;&gt; Brian Holt: So I'm going to get out
of here, I'm gonna get into deferred,

3
00:00:14.603 --> 00:00:19.659
and I'm gonna run npm install,
and I'm going to code, and

4
00:00:19.659 --> 00:00:26.257
then I think that'll just reuse the one,
yeah, instead of making a new one.

5
00:00:26.257 --> 00:00:28.575
You would think I used to work there.

6
00:00:28.575 --> 00:00:34.072
Okay, so what if you have
computationally expensive things

7
00:00:34.072 --> 00:00:39.043
that need to re-render really,
really frequently?

8
00:00:39.043 --> 00:00:41.930
If you don't do something about it,
you're gonna get something called jank.

9
00:00:41.930 --> 00:00:46.262
We've talked quite a bit about
jank in the course of this course.

10
00:00:46.262 --> 00:00:52.590
I'm gonna give you another tool called
UseDeferredValue that allows you to say,

11
00:00:52.590 --> 00:00:58.381
this is going to re-render a lot, and
then it'll settle for a little bit.

12
00:00:58.381 --> 00:01:02.349
Don't try and re-render every single
intermediary, wait until this,

13
00:01:02.349 --> 00:01:04.848
basically settles, and then re-render it.

14
00:01:04.848 --> 00:01:08.431
This is called UseDeferredValue.

15
00:01:08.431 --> 00:01:14.543
So, I find that this one is really useful
for when you give users sliders, right?

16
00:01:14.543 --> 00:01:18.440
So you give them a slider to move up and
down and it changes something.

17
00:01:18.440 --> 00:01:23.086
If you're trying to re-render every single
time that the value changes on a slider,

18
00:01:23.086 --> 00:01:27.344
those change several times a millisecond
if a user is just sliding it all the way

19
00:01:27.344 --> 00:01:27.877
across.

20
00:01:27.877 --> 00:01:32.428
And if it's expensive to react
to those sliders changing,

21
00:01:32.428 --> 00:01:34.802
then you don't wanna do that.

22
00:01:34.802 --> 00:01:39.011
So the idea that came to me was
like an image editor, right?

23
00:01:39.011 --> 00:01:43.084
So if I'm sliding like this, something
across, and then I'm changing the blur,

24
00:01:43.084 --> 00:01:47.156
or the brightness of it, I don't wanna be
trying to re-render every single time,

25
00:01:47.156 --> 00:01:50.878
because on an old browser, that would
be really bad, even on new browsers,

26
00:01:50.878 --> 00:01:52.192
that could be pretty bad.

27
00:01:52.192 --> 00:01:56.085
Despite that fact, I actually still had
to introduce artificial jank because my

28
00:01:56.085 --> 00:01:58.444
browser was still fast
enough to keep up with it.

29
00:01:58.444 --> 00:02:01.214
It's frustrating how good
these things are, right?

30
00:02:01.214 --> 00:02:03.851
It makes my job hard, so thanks Mozilla.

31
00:02:03.851 --> 00:02:06.184
Still if you're on an older computer,

32
00:02:06.184 --> 00:02:09.235
this actually still might
be janky enough for you.

33
00:02:09.235 --> 00:02:14.346
But if you were doing something like real
image interpolation with like image magic

34
00:02:14.346 --> 00:02:19.175
through WebAssembly, I imagine that
probably would be janky enough for you.

35
00:02:19.175 --> 00:02:22.264
So let's go and get this done.

36
00:02:22.264 --> 00:02:26.874
The other thing that's really cool about
UseDeferredValue, you could do something

37
00:02:26.874 --> 00:02:31.112
like debouncing or throttling, it can
never keep straight, which is which.

38
00:02:31.112 --> 00:02:36.283
The problem with trying to do with that
approach is you are now throttling

39
00:02:36.283 --> 00:02:41.474
the entire experience for everybody,
be it slow device or fast device.

40
00:02:41.474 --> 00:02:43.243
What's really cool about UseDeferredValue,

41
00:02:43.243 --> 00:02:45.062
it's using the React
scheduler underneath it.

42
00:02:45.062 --> 00:02:50.297
And so it's just basically saying, if
the React scheduler hasn't finished yet,

43
00:02:50.297 --> 00:02:54.953
then just like, cancel this re-render
cycle and then go to the next one.

44
00:02:54.953 --> 00:02:58.306
But if it does finish,
then it does do the re-render.

45
00:02:58.306 --> 00:03:01.756
And so what's cool about that is
slow devices will be very throttled,

46
00:03:01.756 --> 00:03:02.522
which is good.

47
00:03:02.522 --> 00:03:05.778
And fast devices will still see
a lot of intermediary frames,

48
00:03:05.778 --> 00:03:08.229
which is good cuz it
makes it feel responsive.

49
00:03:10.676 --> 00:03:13.728
&gt;&gt; Brian Holt: Or like another example,
this is like, if you put your phone on low

50
00:03:13.728 --> 00:03:17.233
battery mode, it throttles the CPU,
I don't know if everyone knows that.

51
00:03:17.233 --> 00:03:19.409
But like, if you're on low battery mode,

52
00:03:19.409 --> 00:03:22.440
your browser will render
significantly less frequently.

53
00:03:22.440 --> 00:03:26.356
And so, by using UseDeferredValue,
instead of trying to build this yourself,

54
00:03:26.356 --> 00:03:30.158
you get to take advantage of all these
different things that would be super hard

55
00:03:30.158 --> 00:03:31.840
to contextually take advantage.

56
00:03:31.840 --> 00:03:36.803
But because of how React has structured
this, I find it actually quite ingenious.

