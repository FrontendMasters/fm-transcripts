WEBVTT

1
00:00:00.000 --> 00:00:03.206
&gt;&gt; Speaker 1: Do you run into issues
withauto formatters, prettier or

2
00:00:03.206 --> 00:00:07.166
anything like that, where it'll
just create white space on its own?

3
00:00:07.166 --> 00:00:12.024
&gt;&gt; Brian Holt: It certainly would be
possible you just make sure that your

4
00:00:12.024 --> 00:00:12.550
&gt;&gt; Speaker 1: Okay.

5
00:00:12.550 --> 00:00:15.817
&gt;&gt; Brian Holt: Yeah.I
suppose in this one if, like,

6
00:00:15.817 --> 00:00:21.070
we had a really long line here,
that it would make difference.

7
00:00:21.070 --> 00:00:26.659
Yeah, right imagine this was long enough
that it would we would just ha That's,

8
00:00:26.659 --> 00:00:29.055
I mean, valid, though, right.

9
00:00:34.351 --> 00:00:36.970
&gt;&gt; Brian Holt: Cool, yeah,
great questions, yeah other questions?

10
00:00:36.970 --> 00:00:40.798
&gt;&gt; Speaker 3: How would you inject a
different number for starting the counter,

11
00:00:40.798 --> 00:00:42.437
the counter starts at five or

12
00:00:42.437 --> 00:00:45.837
something like that
&gt;&gt; Brian Holt: Yeah, you would just come

13
00:00:45.837 --> 00:00:50.910
in here to client, sorry, app,
rather you put five here.

14
00:00:50.910 --> 00:00:54.772
Now, keep in mind, we're not keeping our
build process running the background, so

15
00:00:54.772 --> 00:00:56.551
we still have to rebuild it every time.

16
00:00:56.551 --> 00:00:59.038
So NPM run build.

17
00:00:59.038 --> 00:01:03.580
NPM runs start my service
probably still running over here,

18
00:01:03.580 --> 00:01:07.676
yeah, so then you have to
restart your server as well,

19
00:01:07.676 --> 00:01:11.700
because, again,
nothing is in death mode, right?

20
00:01:11.700 --> 00:01:17.042
But you can see here count 5, so if we
look over here now it's starting at 5.

21
00:01:22.573 --> 00:01:25.348
&gt;&gt; Brian Holt: Yeah, I imagine, people are
probably trying to play with things like,

22
00:01:25.348 --> 00:01:26.585
why isn't anything changing?

23
00:01:26.585 --> 00:01:32.655
It's because you have to rebuild it first,
and then you have to run your server.

24
00:01:32.655 --> 00:01:35.823
Normally, we would have dev modes and
when we get to like next and

25
00:01:35.823 --> 00:01:38.286
some of those things,
we will have dev modes, but

26
00:01:38.286 --> 00:01:44.650
not yet
&gt;&gt; Brian Holt: Other questions?

27
00:01:44.650 --> 00:01:46.921
Make sense?

28
00:01:46.921 --> 00:01:49.891
&gt;&gt; Speaker 4: I just want to make sure I
understand, is it across all files you

29
00:01:49.891 --> 00:01:53.102
don't wanna have white space changes or
like where specifically?

30
00:01:53.102 --> 00:01:55.318
&gt;&gt; Brian Holt: It's specifically
your index.html file.

31
00:01:55.318 --> 00:01:57.533
&gt;&gt; Speaker 4: The index, okay, got you.

32
00:01:57.533 --> 00:01:59.337
&gt;&gt; Brian Holt: No, this won't matter,

33
00:01:59.337 --> 00:02:03.859
like what the only thing that it
cares about is the actual output.

34
00:02:03.859 --> 00:02:11.141
The difference between what it gets back
from react on its initial render and

35
00:02:11.141 --> 00:02:15.709
what it sees what the server
gave it to hydrate.

36
00:02:15.709 --> 00:02:17.626
And it's just a hash, right?

37
00:02:17.626 --> 00:02:23.030
So if you add more white space to a hash,
it changes the hash, right?

38
00:02:23.030 --> 00:02:27.641
But,I mean, you could save this,
it doesn't care about the actual code or

39
00:02:27.641 --> 00:02:29.670
anything like that, my gosh.

40
00:02:29.670 --> 00:02:34.060
&gt;&gt; Speaker 4: And can you talk a little
bit more about the splitting side of with

41
00:02:34.060 --> 00:02:36.346
the root div that you're using?

42
00:02:36.346 --> 00:02:37.638
&gt;&gt; Brian Holt: Sure.

43
00:02:37.638 --> 00:02:40.513
&gt;&gt; Speaker 4: Are there cases where
you'd want to split it differently.

44
00:02:40.513 --> 00:02:45.670
&gt;&gt; Brian Holt: Let's look at server.js so
that the question is about this piece,

45
00:02:45.670 --> 00:02:48.660
particularly right here of the split.

46
00:02:48.660 --> 00:02:52.147
And then we write this part,
we do the app, and then we do this part.

47
00:02:52.147 --> 00:02:54.956
So let's look at the actual index.html.

48
00:02:54.956 --> 00:03:00.501
This is part one that we send
to the user immediately.

49
00:03:00.501 --> 00:03:02.905
Critically, the script tag is in here so

50
00:03:02.905 --> 00:03:06.668
that the browser can say,
I have stuff to download right?

51
00:03:06.668 --> 00:03:10.346
And so it will go and
download all that stuff.

52
00:03:10.346 --> 00:03:13.329
The async and defer is important here
because it'll stop here, which means

53
00:03:13.329 --> 00:03:16.281
that the user will not see anything
even though the use server side render.

54
00:03:16.281 --> 00:03:23.431
So the async defer is critical for
any sort of meaningful games here.

55
00:03:23.431 --> 00:03:24.579
But essentially,

56
00:03:24.579 --> 00:03:29.168
you wanna get everything down to where
the app is about to be rendered to, and

57
00:03:29.168 --> 00:03:33.271
then you wanna fill whatever you're
rendering out here to be here.

58
00:03:33.271 --> 00:03:36.820
And then you just need to
close out the document, right?

59
00:03:36.820 --> 00:03:38.223
Is there other places to split it?

60
00:03:38.223 --> 00:03:43.200
I mean, it's always up until where
the app is to be rendered, right?

61
00:03:43.200 --> 00:03:46.533
I suppose if you're doing
multiple islands, right?

62
00:03:46.533 --> 00:03:48.603
You have some sort of like,
what's it called?

63
00:03:48.603 --> 00:03:51.155
Micro front ends kind of thing.

64
00:03:51.155 --> 00:03:52.634
One, good luck, right?

65
00:03:52.634 --> 00:03:58.069
But two, I suppose you would render up
to the first one, you would output that,

66
00:03:58.069 --> 00:04:02.554
then you would end up to the second one,
output that one, right?

67
00:04:02.554 --> 00:04:04.736
He would do something of that nature.

68
00:04:04.736 --> 00:04:05.722
Does that make sense?

69
00:04:05.722 --> 00:04:06.879
&gt;&gt; Speaker 4: Yeah.

70
00:04:06.879 --> 00:04:09.772
That's exactly what I was wondering is
just like as you sometimes you'll see

71
00:04:09.772 --> 00:04:11.032
a bunch of pieces start loading.

72
00:04:11.032 --> 00:04:14.155
And I was trying to understand what you

73
00:04:14.155 --> 00:04:18.553
should be pulling down
before you're splitting up.

74
00:04:18.553 --> 00:04:20.449
&gt;&gt; Brian Holt: This is broken again.

75
00:04:20.449 --> 00:04:27.888
No, that's correct, yeah,
just what I said there.

76
00:04:27.888 --> 00:04:34.353
Yeah, just more or less you want
to get them up to this point.

77
00:04:34.353 --> 00:04:35.679
Other questions?

78
00:04:41.288 --> 00:04:49.147
&gt;&gt; Brian Holt: Yeah, as a note
here's just going back to my notes.

79
00:04:49.147 --> 00:04:54.310
Here, we did render To String,

80
00:04:54.310 --> 00:04:58.333
which is just a one shot.

81
00:04:58.333 --> 00:05:02.716
Hey, React give me your entire
rendering and then when you're done,

82
00:05:02.716 --> 00:05:03.767
return it to me.

83
00:05:03.767 --> 00:05:05.024
That's what render to string does.

84
00:05:05.024 --> 00:05:07.477
So it says, like,
wait until you're totally done.

85
00:05:07.477 --> 00:05:13.477
You can do render to pipe able stream
which react with its new reconciler.

86
00:05:13.477 --> 00:05:14.778
I call it new, how old is it?

87
00:05:14.778 --> 00:05:18.562
It's seven years old,

88
00:05:18.562 --> 00:05:23.298
it's new to me, never mind.

89
00:05:23.298 --> 00:05:28.097
But yeah, so with the Reconciler,
it can output like, chunks of like, hey,

90
00:05:28.097 --> 00:05:30.887
I did the first part first,
I did the second.

91
00:05:30.887 --> 00:05:33.829
I'll finish the nav first, and
then I'll finish the block first, and

92
00:05:33.829 --> 00:05:34.870
it'll give you pieces.

93
00:05:34.870 --> 00:05:37.974
And you can output those
to the user directly, so

94
00:05:37.974 --> 00:05:40.862
that they're getting markup as it renders.

95
00:05:40.862 --> 00:05:44.900
So Generally speaking, you would
wanna do render to pipeable stream.

96
00:05:44.900 --> 00:05:48.713
In our app, render to string and
render pipeable stream, sorry,

97
00:05:48.713 --> 00:05:52.867
render to string and render pipeable
stream are going to be equivalent,

98
00:05:52.867 --> 00:05:55.810
this is only going to come
out in one chunk, right?

99
00:05:55.810 --> 00:06:01.218
So doing it with rendered
pipeline stream is a no gain and

100
00:06:01.218 --> 00:06:05.254
all it does is make the code more complex.

101
00:06:05.254 --> 00:06:08.412
But I'm gonna argue probably
that if that's the case,

102
00:06:08.412 --> 00:06:12.320
then you shouldn't be doing service
side rendering at all, right?

103
00:06:12.320 --> 00:06:16.452
Because you need some level of complexity
for this to maybe any sort of meaningful.

