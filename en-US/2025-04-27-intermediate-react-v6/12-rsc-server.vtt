WEBVTT

1
00:00:00.000 --> 00:00:03.300
&gt;&gt; Brian Holt: So,
let's make our server directory.

2
00:00:03.300 --> 00:00:06.865
So, new folder,
we're gonna call it server.

3
00:00:06.865 --> 00:00:09.859
We gotta do two things here
that's kind of interesting.

4
00:00:09.859 --> 00:00:14.158
So first of all, we're gonna create this
new file called, what did I call it,

5
00:00:14.158 --> 00:00:14.822
main.js.

6
00:00:19.023 --> 00:00:23.604
&gt;&gt; Brian Holt: We have to kinda like
patch over the node module system so

7
00:00:23.604 --> 00:00:26.527
that it knows how to handle JSX and so

8
00:00:26.527 --> 00:00:30.921
that it knows how to handle
React server components.

9
00:00:30.921 --> 00:00:37.032
So the first one is
actually pretty easy to do,

10
00:00:37.032 --> 00:00:42.207
const reactServerRegister = require

11
00:00:42.207 --> 00:00:50.686
react-server-dom-webpack-that one
/node-register.

12
00:00:50.686 --> 00:00:56.982
That's exactly what this does,
it's patching the require essentially.

13
00:00:56.982 --> 00:01:00.258
And then all you have to
do is you just invoke it.

14
00:01:02.299 --> 00:01:06.549
&gt;&gt; Brian Holt: And this will now take care
of all the patching that we need to do,

15
00:01:06.549 --> 00:01:09.802
and we need to do the same
thing again with babel.

16
00:01:09.802 --> 00:01:16.047
So const babelRegister = require

17
00:01:16.047 --> 00:01:22.076
@babel/register, this one,

18
00:01:22.076 --> 00:01:28.114
and then you say babelRegister.

19
00:01:28.114 --> 00:01:32.089
And you gotta give it an ignore,
I'm gonna copy and

20
00:01:32.089 --> 00:01:35.699
paste that because I do
not wanna mess that up.

21
00:01:35.699 --> 00:01:40.759
It is a gnarly regex, so
give me a second, we'll go grab that,

22
00:01:40.759 --> 00:01:47.165
and just a second we're gonna do plugins,
and this needs to be an array as well.

23
00:01:47.165 --> 00:01:56.960
This is gonna be
@babel/transform-modules-commonjs.

24
00:02:01.046 --> 00:02:02.446
&gt;&gt; Brian Holt: I think I got that,
okay, yep.

25
00:02:05.393 --> 00:02:08.990
&gt;&gt; Brian Holt: Okay, and then after
we do all of this, we're going to

26
00:02:08.990 --> 00:02:14.722
require./server, which we're gonna write
in just a second, and then just run it.

27
00:02:14.722 --> 00:02:19.310
That's what the second parentheses is,
it's just run that function.

28
00:02:19.310 --> 00:02:23.333
Okay, let's go grab that
gnarly string just because or

29
00:02:23.333 --> 00:02:27.712
the regex because nobody wants
to type that and get it wrong.

30
00:02:27.712 --> 00:02:34.797
This is gonna be in the RSC server,
section three, yeah.

31
00:02:34.797 --> 00:02:38.269
This one, nobody wants to type that.

32
00:02:44.100 --> 00:02:49.810
&gt;&gt; Brian Holt: But don't transpile
anything in dist server or node modules.

33
00:02:49.810 --> 00:02:50.896
That's what it's saying.

34
00:02:50.896 --> 00:02:54.491
So one of the interesting things about
this, this will yell at you if you don't

35
00:02:54.491 --> 00:02:57.116
have that conditions,
React server that we saw before.

36
00:02:57.116 --> 00:03:01.766
This will yell at you, it's like, this
only works when this is on the server.

37
00:03:01.766 --> 00:03:04.922
So that's one thing to keep in mind.

38
00:03:04.922 --> 00:03:06.241
Why is this in a separate file?

39
00:03:06.241 --> 00:03:10.736
Someone might ask why can't I just put
this at the top of my server.js is because

40
00:03:10.736 --> 00:03:13.956
all subsequent requires have
to be hooked into this, and

41
00:03:13.956 --> 00:03:16.995
the only way to do that is to
have it in a separate file.

42
00:03:19.496 --> 00:03:23.318
&gt;&gt; Brian Holt: Seems a little weird, but
that's just like you can't patch it and

43
00:03:23.318 --> 00:03:24.827
then immediately use it.

44
00:03:24.827 --> 00:03:28.290
You have to patch it and then all
subsequent requires will be patched.

45
00:03:28.290 --> 00:03:32.235
Okay, this is how that works.

46
00:03:32.235 --> 00:03:37.894
Okay, so now we can have server.js here.

47
00:03:37.894 --> 00:03:41.235
Everything in here will be used using
the patched requirements system,

48
00:03:41.235 --> 00:03:42.010
which is great.

49
00:03:42.010 --> 00:03:44.763
It's what we want.

50
00:03:44.763 --> 00:03:50.475
Now, we actually get to do our app,
which will be fun.

51
00:03:50.475 --> 00:03:55.575
So const path = require

52
00:03:55.575 --> 00:04:02.460
node:path const readFileSync

53
00:04:02.460 --> 00:04:08.070
= require node:fs const

54
00:04:08.070 --> 00:04:13.941
Fastify = require Fastify

55
00:04:21.310 --> 00:04:26.097
&gt;&gt; Brian Holt: Const fastifyStaticPlugin =

56
00:04:26.097 --> 00:04:30.516
require @fastify/static

57
00:04:30.516 --> 00:04:35.306
const React = require react.

58
00:04:38.434 --> 00:04:41.028
&gt;&gt; Brian Holt: Const
renderToPipeableStream, if you remember

59
00:04:41.028 --> 00:04:44.866
that one we talked a little bit about
earlier, we're gonna use that now.

60
00:04:48.818 --> 00:04:54.061
&gt;&gt; Brian Holt: = require,
and this is react

61
00:04:54.061 --> 00:04:58.892
server webpack/server.

62
00:05:03.923 --> 00:05:05.818
&gt;&gt; Brian Holt: Now interesting again,

63
00:05:05.818 --> 00:05:10.519
this is not coming from Reactdom
like we're used to, right?

64
00:05:10.519 --> 00:05:13.938
It's coming from the webpack one.

65
00:05:13.938 --> 00:05:15.812
Same API works exactly the same way, but

66
00:05:15.812 --> 00:05:18.360
now it's gonna be ran through
Webpack as it comes out.

67
00:05:21.683 --> 00:05:27.390
&gt;&gt; Brian Holt: And then const AppImport

68
00:05:27.390 --> 00:05:34.186
= require sourceApp.jsx.

69
00:05:34.186 --> 00:05:38.378
Now, why do I call this App Import is
because this is CommonJS, it's we're

70
00:05:38.378 --> 00:05:42.523
importing an ES module, which means
that we have to pull default off of it.

71
00:05:42.523 --> 00:05:47.263
So const App = AppImport.default.

72
00:05:47.263 --> 00:05:50.069
That's just how the two
things can interope together.

73
00:05:53.607 --> 00:05:58.373
&gt;&gt; Brian Holt: Okay, I wonder if
I can even show you this before I

74
00:05:58.373 --> 00:06:00.594
get too much further.

75
00:06:00.594 --> 00:06:05.310
If we do npm run dev client,
this should work

76
00:06:05.310 --> 00:06:10.668
because this should be
able to build our project.

77
00:06:10.668 --> 00:06:16.078
And if we look here in dist, so
this is our built project now.

78
00:06:16.078 --> 00:06:22.157
The part that I care about
is this client manifest.

79
00:06:22.157 --> 00:06:23.441
This is kind of the interesting part.

80
00:06:23.441 --> 00:06:25.608
This was generated for us.

81
00:06:25.608 --> 00:06:28.959
And this tells you like,
hey, if you hit client.jsx,

82
00:06:28.959 --> 00:06:33.969
this is the chunks that it relies on, this
is the names that are associated with it.

83
00:06:33.969 --> 00:06:35.942
This is not meant to be human-readable,
right?

84
00:06:35.942 --> 00:06:38.846
But this is like the file
that we're gonna read, and

85
00:06:38.846 --> 00:06:42.214
we have to provide it to this
mapping of where everything is.

86
00:06:42.214 --> 00:06:45.658
So this is like the mapping, go ahead.

87
00:06:45.658 --> 00:06:50.898
&gt;&gt; Speaker 2: Where does
client.jsx come into play?

88
00:06:50.898 --> 00:06:54.489
I get what it does, but
how does it get delivered to the client?

89
00:06:54.489 --> 00:06:58.637
I don't see import anywhere.

90
00:06:58.637 --> 00:07:02.116
&gt;&gt; Brian Holt: It's a good question, I
think that comes from our webpack config.

91
00:07:04.810 --> 00:07:05.437
&gt;&gt; Brian Holt: Right there.

92
00:07:09.016 --> 00:07:11.166
&gt;&gt; Brian Holt: So
we built our webpack config,

93
00:07:11.166 --> 00:07:14.350
this is going to point
at the client.jsx file,

94
00:07:14.350 --> 00:07:19.540
which is then going to get built out and
included in our client-side bundle.

95
00:07:19.540 --> 00:07:24.285
But you'll notice that our server never
refers to client.jsx, cuz it can't, right,

96
00:07:24.285 --> 00:07:25.689
it's all browser stuff.

97
00:07:25.689 --> 00:07:28.676
Yeah, good question, so
the build system knows about it,

98
00:07:28.676 --> 00:07:30.600
is the simple answer to the question.

99
00:07:33.992 --> 00:07:40.437
&gt;&gt; Brian Holt: Okay, so manifest.json,
we're going to import this file,

100
00:07:40.437 --> 00:07:47.124
and then we're going to, or
we're gonna read that file rather,

101
00:07:47.124 --> 00:07:51.643
and then we're going
to pass it to Webpack.

102
00:07:51.643 --> 00:07:56.694
Okay, so const MANIFEST

103
00:07:56.694 --> 00:08:00.546
= readFileSync.

104
00:08:00.546 --> 00:08:06.297
And we're just gonna say
path.resolve to that pathway, right?

105
00:08:06.297 --> 00:08:09.110
So it's gonna

106
00:08:09.110 --> 00:08:18.669
be
dirname,../dist/react-client-mannifest.j-

107
00:08:18.669 --> 00:08:25.293
son, that's utf8.

108
00:08:25.293 --> 00:08:28.048
And then we're gonna
turn it into an object.

109
00:08:28.048 --> 00:08:33.242
So we're gonna say const

110
00:08:33.242 --> 00:08:41.161
MODULE MAP = JSON.parse MANIFEST.

111
00:08:41.161 --> 00:08:46.236
So this is now ready to be passed
into that Webpack config or

112
00:08:46.236 --> 00:08:48.211
that Webpack plugin.

113
00:08:48.211 --> 00:08:53.295
PORT, you can say whatever port

114
00:08:53.295 --> 00:08:58.377
you want this to run on = process

115
00:08:58.377 --> 00:09:05.168
.env.PORT.env.PORT or 3,000.

116
00:09:05.168 --> 00:09:06.614
So you make this configurable.

117
00:09:09.682 --> 00:09:11.872
&gt;&gt; Brian Holt: That's what I need,
it's done.

118
00:09:11.872 --> 00:09:14.305
This is just a fart to have it for
me cuz I've worked with so

119
00:09:14.305 --> 00:09:17.275
many cloud providers that yet,
that relies on the port being there.

120
00:09:17.275 --> 00:09:23.214
So feel free to also just say 3000,
that's totally fine with me as well.

121
00:09:27.126 --> 00:09:32.836
&gt;&gt; Brian Holt: Okay, we're gonna start
our fastify server const fastify

122
00:09:32.836 --> 00:09:38.202
= equals Fastify,
I gave it a better logger this time,

123
00:09:38.202 --> 00:09:42.330
just so
we can see more of what's going on.

124
00:09:42.330 --> 00:09:49.078
Logger transport target, and
then we're gonna give it pino-pretty.

125
00:09:49.078 --> 00:09:54.467
This is just helpful so that you can see
a bit more what the server is doing.

126
00:09:54.467 --> 00:09:58.565
And pino-pretty it's a more
human-readable format for logs.

127
00:10:01.119 --> 00:10:06.059
&gt;&gt; Brian Holt: Okay, fastify.register,

128
00:10:06.059 --> 00:10:13.371
we're gonna do our fastifyStaticPlugin,

129
00:10:13.371 --> 00:10:18.114
fastifyStaticPlugin, and

130
00:10:18.114 --> 00:10:23.447
root path, that join dirname,

131
00:10:23.447 --> 00:10:29.583
dist, and prefix assets like that.

132
00:10:35.076 --> 00:10:39.116
&gt;&gt; Brian Holt: So serve everything in
the dist directory under assets in

133
00:10:39.116 --> 00:10:40.974
terms of just the prefix.

134
00:10:40.974 --> 00:10:44.243
And then we have to do it again for
our CSS, right?

135
00:10:44.243 --> 00:10:48.404
So it's more or less the same thing,
you might even just copy and

136
00:10:48.404 --> 00:10:50.268
paste it if you feel like it.

137
00:10:50.268 --> 00:10:53.449
But this is gonna be for public,
and it's gonna go out, and

138
00:10:53.449 --> 00:10:55.624
then we don't have a prefix on this one.

139
00:10:55.624 --> 00:11:01.672
This is just gonna say
decorateReply false.

140
00:11:01.672 --> 00:11:05.711
I'm trying to remember exactly what
decorateReply does, and I don't remember,

141
00:11:05.711 --> 00:11:06.699
I'll stop my head.

142
00:11:06.699 --> 00:11:11.936
Fastify.get, so if they ask for

143
00:11:11.936 --> 00:11:16.237
a /, we're just gonna say

144
00:11:16.237 --> 00:11:21.101
async function rootHandler,

145
00:11:21.101 --> 00:11:24.655
request, reply, and

146
00:11:24.655 --> 00:11:31.404
return reply.sendFile, index.html.

147
00:11:31.404 --> 00:11:34.764
You might be wondering where the path is,
and it's defined by this, so

148
00:11:34.764 --> 00:11:37.732
it's gonna find the index.html,
and it's gonna send that.

149
00:11:40.009 --> 00:11:44.936
&gt;&gt; Brian Holt: And then we have to
do our fastify.get/react-flight, and

150
00:11:44.936 --> 00:11:48.074
this is gonna be the interesting part.

151
00:11:50.636 --> 00:11:53.852
&gt;&gt; Brian Holt: Function
ReactFlightHandler, just FY,

152
00:11:53.852 --> 00:11:57.605
the reason why I actually
named these functions,

153
00:11:57.605 --> 00:12:03.163
despite the fact you don't have to,
you can just literally call it that.

154
00:12:03.163 --> 00:12:05.905
It makes the stack traces
way easier to read, right?

155
00:12:05.905 --> 00:12:08.590
Because it's going to say
the problem was in rootHandler,

156
00:12:08.590 --> 00:12:11.393
as opposed to the problem was
an anonymous function, right?

157
00:12:11.393 --> 00:12:16.561
This is all for stack traces, request,

158
00:12:16.561 --> 00:12:22.034
reply, okay, we'll do this in a second.

159
00:12:22.034 --> 00:12:25.117
Let's just finish out everything
else that we can just

160
00:12:25.117 --> 00:12:27.000
focus on the flightHandler one.

161
00:12:27.000 --> 00:12:31.845
Module.exports, cuz remember,

162
00:12:31.845 --> 00:12:37.336
we're invoking this in main.js we have

163
00:12:37.336 --> 00:12:42.826
to export the server = async function,

164
00:12:42.826 --> 00:12:47.508
start, and wrap in a try-catch,

165
00:12:47.508 --> 00:12:52.691
await fastify.listen port:PORT.

166
00:12:52.691 --> 00:12:57.914
You need a catch or else that's not valid,

167
00:12:57.914 --> 00:13:03.864
catch err, and fastify.log.error, error,

168
00:13:03.864 --> 00:13:09.390
and then you'll just say process.exit 1.

169
00:13:09.390 --> 00:13:12.834
Okay, so
log out the error if you hit an error, and

170
00:13:12.834 --> 00:13:15.957
then exit 1 is basically
exit with an error.

171
00:13:15.957 --> 00:13:20.554
Anything that's non-zero with Linux
is an error when it exits, right?

172
00:13:20.554 --> 00:13:24.838
This is the status code, so it could be 1,
it could be 150 it doesn't matter,

173
00:13:24.838 --> 00:13:27.213
1 is just generally
the one that people use.

174
00:13:30.129 --> 00:13:35.004
&gt;&gt; Brian Holt: Okay, pretty bog standard,
fastify app, nothing here is really

175
00:13:35.004 --> 00:13:40.239
gonna be that terribly exciting,
I mean, this is different, right?

176
00:13:40.239 --> 00:13:43.986
Resolving this, getting some of this
stuff up here from renderPipeableStream.

177
00:13:43.986 --> 00:13:48.567
But again, standard deviation from writing
a normal server side rendered kind of app.

