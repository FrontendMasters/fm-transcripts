WEBVTT

1
00:00:00.000 --> 00:00:01.829
&gt;&gt; Brian Holt: We're gonna show you
a couple of tools of how to do this.

2
00:00:01.829 --> 00:00:04.074
This is memo, useMemo and useCallback.

3
00:00:04.074 --> 00:00:09.509
For all of these, we're gonna have
like little starter templates.

4
00:00:09.509 --> 00:00:14.755
Cause again, I'm not gonna have you recode
your vite config every single time.

5
00:00:14.755 --> 00:00:18.944
We have done this ad nauseum both
between the last course and this course.

6
00:00:18.944 --> 00:00:22.439
So I have a little starter template for
each one of these.

7
00:00:22.439 --> 00:00:25.244
So if you're not familiar with GitHub,

8
00:00:25.244 --> 00:00:30.110
it's really easy to just come in here and
say, code, download a zip,

9
00:00:30.110 --> 00:00:35.576
which is exactly what I'm gonna do, and
then I'm going to open this NVS Code.

10
00:00:35.576 --> 00:00:40.054
Project Starter is the one that
we're carrying about now, and

11
00:00:40.054 --> 00:00:42.091
we're gonna do perf first.

12
00:00:42.091 --> 00:00:45.456
So we're gonna be in VS Code,
and here we go.

13
00:00:45.456 --> 00:00:47.509
We have my project nice and ready to go.

14
00:00:47.509 --> 00:00:52.041
First thing, MPMI, and there we go.

15
00:00:52.041 --> 00:00:54.770
Nothing super special here, vite.

16
00:00:54.770 --> 00:01:00.094
Marked, we're gonna be rendering
Markdown like a Markdown preview.

17
00:01:00.094 --> 00:01:05.320
React, react- dom and
vite, and that's about it.

18
00:01:05.320 --> 00:01:07.025
So you have your Client.jsx,

19
00:01:07.025 --> 00:01:10.314
this is all this is doing is
just rendering it to the client.

20
00:01:10.314 --> 00:01:14.001
I have a very long markdown file for
us to render.

21
00:01:14.001 --> 00:01:17.908
And App.jsx,
which has nothing in it at the moment.

22
00:01:17.908 --> 00:01:21.509
Again, if we go back and
look at my code here, or my page,

23
00:01:21.509 --> 00:01:23.777
I have the completed project here.

24
00:01:23.777 --> 00:01:28.985
So if you wanna go and compare what
I've written, or anything like that,

25
00:01:28.985 --> 00:01:33.606
this is all written here that you
can see the final results there.

26
00:01:33.606 --> 00:01:35.896
Was anyone really hoping
to write that V config?

27
00:01:35.896 --> 00:01:39.770
They were just, really pumped about it and
I just ruined this for you.

28
00:01:39.770 --> 00:01:41.627
If it is, I just say,
what's wrong with you?

29
00:01:41.627 --> 00:01:44.572
[LAUGH] You're broken the same way I am,
probably.

30
00:01:44.572 --> 00:01:47.632
I actually really like build tools.

31
00:01:47.632 --> 00:01:49.076
Okay, here we go.

32
00:01:49.076 --> 00:01:54.162
So let's go hop into our editor,

33
00:01:54.162 --> 00:02:00.167
and we're gonna make a new file first.

34
00:02:00.167 --> 00:02:08.189
We're gonna call this MarkdownPreview.jsx,
okay?

35
00:02:08.189 --> 00:02:10.878
And we're gonna make this thing
at the top called JANK-DELAY.

36
00:02:10.878 --> 00:02:14.181
So, JANK is actually a technical term now,

37
00:02:14.181 --> 00:02:19.201
before it was just something that
was like that looks janky right?

38
00:02:19.201 --> 00:02:23.338
But they call it JANK,
I don't think there's another term for it.

39
00:02:23.338 --> 00:02:27.561
When you scroll down and like pauses and
jumps, they call that JANK, right?

40
00:02:27.561 --> 00:02:32.141
So we're actually gonna introduce
intentionally JANK into our code.

41
00:02:32.141 --> 00:02:37.168
So export, default,
function, markdownPreview.

42
00:02:37.168 --> 00:02:42.346
Render and options.

43
00:02:45.272 --> 00:02:51.902
&gt;&gt; Brian Holt: So const, and we're gonna
make this thing called expensiveRender.

44
00:02:51.902 --> 00:02:58.773
And this is gonna be a function
that all it's gonna do is it's

45
00:02:58.773 --> 00:03:03.906
gonna say const start = performance.now.

46
00:03:03.906 --> 00:03:08.395
If you're not familiar,
there's a performance API in your

47
00:03:08.395 --> 00:03:12.363
browser that lets you fine-tune,
measure things.

48
00:03:12.363 --> 00:03:17.007
And we're just gonna make
it an empty while loop,

49
00:03:17.007 --> 00:03:20.888
while the JANK isn't there yet, right?

50
00:03:20.888 --> 00:03:30.470
So while performance.now-
start JANK DELAY.

51
00:03:30.470 --> 00:03:32.916
So what's this gonna do?

52
00:03:32.916 --> 00:03:37.168
This is just gonna keep running,
it's gonna tie up the thread,

53
00:03:37.168 --> 00:03:39.550
right, for 100 milliseconds.

54
00:03:39.550 --> 00:03:42.374
This is to simulate something like
that's really expensive and really busy.

55
00:03:42.374 --> 00:03:46.061
Cuz, again, I tried really hard to get
make my markdown complex enough, and

56
00:03:46.061 --> 00:03:47.947
I couldn't get it to JANK on my laptop.

57
00:03:47.947 --> 00:03:50.196
So maybe someone has an older laptop for
me.

58
00:03:50.196 --> 00:03:54.817
This is like an m3 MacBook,
and then you have to return

59
00:03:54.817 --> 00:03:59.246
null because it needs to
be a valid React component.

60
00:03:59.246 --> 00:04:02.872
You can play with this as well, turn up to
like 150, 500, and something like that,

61
00:04:02.872 --> 00:04:04.034
you can turn it down as well.

62
00:04:04.034 --> 00:04:10.063
Return div, I even tried doing a Three.js,
I built an entire Three.js.

63
00:04:10.063 --> 00:04:14.216
It's like this is definitely in a JANK if
I try and re-render this a bunch of time?

64
00:04:14.216 --> 00:04:17.674
No, I don't know what they did,
but three works great now.

65
00:04:17.674 --> 00:04:19.364
It's just the number of GPU cores.

66
00:04:19.364 --> 00:04:21.628
It must be, it was wild.

67
00:04:21.628 --> 00:04:23.213
I was really impressed with that.

68
00:04:23.213 --> 00:04:28.048
I was wondering like a car, it was like
re-rendering it continually really well.

69
00:04:28.048 --> 00:04:33.345
So last render, we're gonna just put this
in here so you can see how frequently.

70
00:04:33.345 --> 00:04:34.695
This is technically like bad code,

71
00:04:34.695 --> 00:04:37.440
because this is going to be different
every time that you re-render it.

72
00:04:37.440 --> 00:04:41.927
But I want you to see how
frequently it's re-rendering, okay?

73
00:04:41.927 --> 00:04:48.568
And then we're gonna say div,
class name = markdown-preview.

74
00:04:51.764 --> 00:04:53.197
&gt;&gt; Brian Holt: And
we were talking about this before.

75
00:04:53.197 --> 00:04:58.602
This is actually how you, intentionally,
do dangerously set inner HTML.

76
00:04:58.602 --> 00:05:00.721
We're gonna do that,
cuz this is markdown, right?

77
00:05:00.721 --> 00:05:02.191
In theory you can trust markdown.

78
00:05:02.191 --> 00:05:05.628
In theory, this is how they get you.

79
00:05:05.628 --> 00:05:09.885
This API is intentionally opaque.

80
00:05:09.885 --> 00:05:12.592
They do this so that they really
don't want you to do this.

81
00:05:12.592 --> 00:05:19.758
Render options.text, we're also gonna
change the style to be equal to.

82
00:05:19.758 --> 00:05:26.034
So, color : options.theme,
and then underneath it,

83
00:05:26.034 --> 00:05:30.362
we're going to put expensiveRender.

84
00:05:33.143 --> 00:05:35.368
&gt;&gt; Brian Holt: So
every time this re-renders, right,

85
00:05:35.368 --> 00:05:38.938
you're gonna run this like
intentionally janking sort of thing.

86
00:05:38.938 --> 00:05:40.166
This still makes me laugh.

87
00:05:40.166 --> 00:05:42.139
Dangerously set in our HTML.

88
00:05:42.139 --> 00:05:44.806
They were very explicit about that.

89
00:05:44.806 --> 00:05:49.142
They have an API in there
called React Internals,

90
00:05:49.142 --> 00:05:52.455
do not use this, or you'll be fired.

91
00:05:52.455 --> 00:05:56.096
I think that they have changed now.

92
00:05:56.096 --> 00:06:00.797
Do not use this, or they call something
else because someone complained

93
00:06:00.797 --> 00:06:02.965
that firing was not a good thing.

94
00:06:02.965 --> 00:06:05.913
I just thought it was funny,
but it's probably a good point.

95
00:06:05.913 --> 00:06:10.762
You have to be very aware that
you're doing this because

96
00:06:10.762 --> 00:06:14.279
cross-site scripting is a real thing.

97
00:06:14.279 --> 00:06:17.007
So if you're not careful with this,

98
00:06:17.007 --> 00:06:20.973
you will open yourself up
to cross-site scripting.

99
00:06:20.973 --> 00:06:24.326
Okay, app.jsx,
let's go build that very quickly.

100
00:06:24.326 --> 00:06:29.660
And we're going to import

101
00:06:29.660 --> 00:06:34.515
use effect from react.

102
00:06:34.515 --> 00:06:36.679
We're going to import marked,

103
00:06:36.679 --> 00:06:41.975
which is the name of the markdown library
we're going to be using from marked.

104
00:06:41.975 --> 00:06:47.014
We're going to import,
I've reacted on there twice,

105
00:06:47.014 --> 00:06:50.777
so you can just put it in here, useState.

106
00:06:53.736 --> 00:06:58.740
&gt;&gt; Brian Holt: Import MarkdownPreview
from MarkdownPreview, cool.

107
00:06:58.740 --> 00:07:05.325
And Import MarkdownContent
from./markdownContent,

108
00:07:05.325 --> 00:07:12.725
which is just that long markdown
file that I made for you.

109
00:07:12.725 --> 00:07:16.122
&gt;&gt; Brian Holt: Export
default function App.

110
00:07:16.122 --> 00:07:21.616
Okay, and let's just run,
a little bit of React here.

111
00:07:24.612 --> 00:07:28.644
&gt;&gt; Brian Holt: Const, text,

112
00:07:28.644 --> 00:07:35.158
setText from = useState

113
00:07:35.158 --> 00:07:40.436
markdownContent.

114
00:07:40.436 --> 00:07:43.475
So this is the initial state, right, then
we're gonna allow our users to edit it.

115
00:07:43.475 --> 00:07:49.410
Const, time, setTime = useState,

116
00:07:49.410 --> 00:07:54.047
Date.now Line and five, and

117
00:07:54.047 --> 00:07:58.135
nine need a K in Markdown.

118
00:07:58.135 --> 00:07:59.855
What?

119
00:07:59.855 --> 00:08:01.645
&gt;&gt; Student 1: Missed the K in Markdown?

120
00:08:01.645 --> 00:08:03.544
&gt;&gt; Student 2: Both line five and
line nine, need a K.

121
00:08:03.544 --> 00:08:07.912
&gt;&gt; Student 1: I mean, sorry,
neither one needs it.

122
00:08:07.912 --> 00:08:08.788
&gt;&gt; Student 2: [LAUGH].

123
00:08:08.788 --> 00:08:10.102
&gt;&gt; Student 1: But as well.

124
00:08:10.102 --> 00:08:13.276
&gt;&gt; Brian Holt: I appreciate that,
thank you.

125
00:08:13.276 --> 00:08:16.915
Except Dustin, I don't appreciate that.

126
00:08:16.915 --> 00:08:23.368
Theme, setTheme
&gt;&gt; Brian Holt: = useState, and

127
00:08:23.368 --> 00:08:29.664
we'll just green, red, yellow, something
there, I don't really care, some theme.

128
00:08:29.664 --> 00:08:35.095
UseEffect, so what we're gonna do here,
just to kind of, again, demonstrate,

129
00:08:35.095 --> 00:08:40.469
like a constantly changing UI, we're just
gonna put a clock on the page, right?

130
00:08:40.469 --> 00:08:47.955
We're gonna say const interval =

131
00:08:47.955 --> 00:08:57.312
setInterval,
&gt;&gt; Brian Holt: And

132
00:08:57.312 --> 00:09:02.244
we're just gonna say setTime Date.now.

133
00:09:05.853 --> 00:09:07.885
&gt;&gt; Brian Holt: And you can decide
how often you want this to run.

134
00:09:07.885 --> 00:09:11.660
Start with every second,
sound good, something like that.

135
00:09:11.660 --> 00:09:16.156
If you wanna make it update a lot,
you can do it every millisecond.

136
00:09:16.156 --> 00:09:19.252
Depending on your laptop,
it probably can go okay.

137
00:09:19.252 --> 00:09:23.932
Const options = text,

138
00:09:23.932 --> 00:09:28.846
theme, and const render

139
00:09:28.846 --> 00:09:34.696
you're gonna be as a function

140
00:09:34.696 --> 00:09:38.908
text which returns,

141
00:09:38.908 --> 00:09:42.896
marked parse text.

142
00:09:42.896 --> 00:09:45.875
What, hooks?

143
00:09:45.875 --> 00:09:47.315
No, I don't want hooks.

144
00:09:47.315 --> 00:09:48.292
Where did that come from?

145
00:09:48.292 --> 00:09:51.523
You might be wondering
why we are doing this.

146
00:09:51.523 --> 00:09:54.305
Technically, you could actually just
make it like a direct pass through.

147
00:09:54.305 --> 00:09:58.493
One, I wanted to be more explicit, as you
can see that this is taking in text and

148
00:09:58.493 --> 00:10:01.292
it's giving it directly
to marked.parse.text.

149
00:10:01.292 --> 00:10:06.200
You can imagine that MarkdownPreview could
be like a general-purpose component that

150
00:10:06.200 --> 00:10:10.178
just takes in any render function and
then displays it nicely for you.

151
00:10:10.178 --> 00:10:12.734
So I wanted to show you kind
of like that pattern as well.

152
00:10:12.734 --> 00:10:18.407
Okay, so now we have all the machinery

153
00:10:18.407 --> 00:10:23.547
up here, let's make our markup,

154
00:10:23.547 --> 00:10:27.980
return div className = app,

155
00:10:27.980 --> 00:10:32.608
h1, this is perf with React.

156
00:10:32.608 --> 00:10:36.964
H2, we're gonna say

157
00:10:36.964 --> 00:10:42.007
Current Time is time, and

158
00:10:42.007 --> 00:10:47.051
we're gonna say label for

159
00:10:47.051 --> 00:10:54.628
theme, and then say, choose a theme.

160
00:10:57.404 --> 00:11:04.414
&gt;&gt; Brian Holt: Okay, and
I'll put a select onChange e,

161
00:11:04.414 --> 00:11:09.420
and then you just want to do set

162
00:11:09.420 --> 00:11:14.044
theme e.target.value.

163
00:11:18.968 --> 00:11:22.120
&gt;&gt; Brian Holt: And then you just need
a couple of options here, I don't really

164
00:11:22.120 --> 00:11:26.184
care as long as it's a valid CSS color any
one of these will work, value = green.

165
00:11:29.969 --> 00:11:33.465
&gt;&gt; Brian Holt: Green,
let's just make like four of these.

166
00:11:35.970 --> 00:11:42.330
&gt;&gt; Brian Holt: Blue, blue, yellow, yellow.

167
00:11:43.896 --> 00:11:47.496
&gt;&gt; Brian Holt: I mean,
you can get creative CSS colors like Peru,

168
00:11:47.496 --> 00:11:50.861
it's one of my favorites,
whatever you want.

169
00:11:50.861 --> 00:11:53.178
I just have red here, so we'll put red.

170
00:11:57.316 --> 00:11:59.510
&gt;&gt; Brian Holt: Okay, so
that'll allow us to do that.

171
00:11:59.510 --> 00:12:05.224
And then we wanna do our text area so

172
00:12:05.224 --> 00:12:10.940
div, className = markdown, and

173
00:12:10.940 --> 00:12:17.261
then we're gonna have our textarea.

174
00:12:17.261 --> 00:12:22.922
And in there we're gonna have

175
00:12:22.922 --> 00:12:29.716
className = markdown-editor and

176
00:12:29.716 --> 00:12:35.830
value = text and onChange = e,

177
00:12:35.830 --> 00:12:41.500
setText e.target.value,

178
00:12:45.759 --> 00:12:46.771
&gt;&gt; Brian Holt: Okay, and

179
00:12:46.771 --> 00:12:52.510
then we'll have our MarkdownPreview
just right next to it,

180
00:12:52.510 --> 00:12:57.814
with options =(options) and
render =(render).

181
00:13:03.505 --> 00:13:08.107
&gt;&gt; Brian Holt: Okay, that should be
enough for us to capture the JANK here.

182
00:13:08.107 --> 00:13:15.607
So, let's run it.

183
00:13:15.607 --> 00:13:20.106
So I think you just did npm run
dev is that what I put in here?

184
00:13:20.106 --> 00:13:24.594
I did okay npm run dev that'll
run it on 5173, right,

185
00:13:24.594 --> 00:13:27.354
that's the default port for vite.

186
00:13:27.354 --> 00:13:33.122
I think I said this in my intro course but
that's 5 is V in Roman numerals and

187
00:13:33.122 --> 00:13:37.715
that's V173, so,
vite that's what they did, yeah?

188
00:13:37.715 --> 00:13:40.724
You're gonna have a memory
leak in your use effect again.

189
00:13:40.724 --> 00:13:43.195
This one luckily never changes pages.

190
00:13:43.195 --> 00:13:48.212
But you are correct that
my use effect here as

191
00:13:48.212 --> 00:13:55.134
well you should do return,
clearInterval, but thank you.

192
00:13:55.134 --> 00:13:55.958
Yeah, I appreciate that.

193
00:13:55.958 --> 00:14:00.587
I always forget that,
in case this is not obvious,

194
00:14:00.587 --> 00:14:05.770
I always forget this and
then figure out why is this slow?

195
00:14:05.770 --> 00:14:06.862
That's me.

196
00:14:09.187 --> 00:14:14.970
&gt;&gt; Brian Holt: Okay, so 5173, this one.

197
00:14:16.804 --> 00:14:23.136
&gt;&gt; Brian Holt: So we have our
entire thing here, that looks good.

198
00:14:23.136 --> 00:14:28.456
And you notice that this render and
this render move kinda in lockstep.

199
00:14:31.531 --> 00:14:35.796
&gt;&gt; Brian Holt: Notice it's
a little delayed, right?

200
00:14:35.796 --> 00:14:40.710
My scrolls aren't too bad here,
cuz again modern

201
00:14:40.710 --> 00:14:45.633
browsers and
modern computers are just marvels.

202
00:14:45.633 --> 00:14:49.245
But if I start trying to make
this re-render a lot and

203
00:14:49.245 --> 00:14:51.637
just be like typing, it gets bad.

204
00:14:51.637 --> 00:14:57.756
I'm typing quite a bit here,
and it's struggling.

205
00:15:02.184 --> 00:15:05.169
&gt;&gt; Brian Holt: All right, I'm sure
you're seeing something kind of similar.

206
00:15:05.169 --> 00:15:10.069
And it's just not good that
this clock is changing, and

207
00:15:10.069 --> 00:15:13.938
this is changing every
single time as well.

208
00:15:13.938 --> 00:15:16.455
So, rendering this with that
expensive render every single time.

209
00:15:16.455 --> 00:15:17.865
We could make this, real bad.

210
00:15:17.865 --> 00:15:23.494
If we come in here and say, it'll start

211
00:15:23.494 --> 00:15:28.792
overlapping if you make it too long.

212
00:15:30.968 --> 00:15:33.106
&gt;&gt; Brian Holt: Trying to refresh this,
let's see.

213
00:15:37.987 --> 00:15:40.905
&gt;&gt; Brian Holt: Yeah I mean look at this,
it's bad.

214
00:15:40.905 --> 00:15:46.038
[LAUGH] that's nauseating.

215
00:15:46.038 --> 00:15:48.521
Okay, let's stop,
we'll keep it 100 milliseconds.

216
00:15:48.521 --> 00:15:49.696
It's about all I can take.

217
00:15:49.696 --> 00:15:55.222
Okay, hopefully you see the problem here,
right?

218
00:15:55.222 --> 00:15:58.288
I mean, even if we weren't
doing this expensive render,

219
00:15:58.288 --> 00:16:00.791
let's just turn that off for
a second to see, or

220
00:16:00.791 --> 00:16:04.499
we can put the JANK DELAY like one
millisecond or something like that.

221
00:16:04.499 --> 00:16:06.678
Yeah, right there.

222
00:16:11.577 --> 00:16:12.442
&gt;&gt; Brian Holt: So let's try this now,

223
00:16:12.442 --> 00:16:14.490
I'm sure this will actually
work pretty well, right?

224
00:16:19.144 --> 00:16:23.021
&gt;&gt; Brian Holt: It's impressive that like
this is re-rendering that entire markdown

225
00:16:23.021 --> 00:16:25.942
file every single time,
which is wild to me, right?

226
00:16:25.942 --> 00:16:28.784
Obviously, that's not what you'd wanna do,

227
00:16:28.784 --> 00:16:33.412
but you can see reacts, performance
profile is still actually really good.

228
00:16:33.412 --> 00:16:34.485
This is still working really well.

229
00:16:34.485 --> 00:16:38.626
I'm also wildly impressed by
this markdown parser as well.

