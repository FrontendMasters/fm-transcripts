WEBVTT

1
00:00:00.000 --> 00:00:05.811
&gt;&gt; Brian Holt: We're gonna create
an App.js file, and again, just really,

2
00:00:05.811 --> 00:00:11.849
really simple here I'm gonna say,
import, Create Element as H.

3
00:00:11.849 --> 00:00:13.263
You can leave this as Create Element.

4
00:00:13.263 --> 00:00:17.962
I just 1h was like a really standard
thing to do back in the day when

5
00:00:17.962 --> 00:00:19.939
people used to not use JSX.

6
00:00:19.939 --> 00:00:22.072
So I just kinda stuck with it, but

7
00:00:22.072 --> 00:00:26.046
it's just to make it really easy
to create React components.

8
00:00:26.046 --> 00:00:31.032
It's an alias we'll call function app,

9
00:00:31.032 --> 00:00:34.600
and we're going to return H.

10
00:00:34.600 --> 00:00:36.141
So this is normally we'd write JSX.

11
00:00:36.141 --> 00:00:39.218
We're just gonna do it with
vanilla JavaScript for a minute.

12
00:00:39.218 --> 00:00:45.479
Div Null and
then we'll put another component in here.

13
00:00:45.479 --> 00:00:49.540
It's gonna be an H1 has nothing there.

14
00:00:49.540 --> 00:00:56.346
And we're gonna say
Hello frontend masters.

15
00:00:56.346 --> 00:01:02.052
And another H "p",

16
00:01:02.052 --> 00:01:08.394
null, and this is SSG.

17
00:01:11.348 --> 00:01:17.123
&gt;&gt; Brian Holt: And
then export default App.

18
00:01:20.112 --> 00:01:22.854
&gt;&gt; Brian Holt: So again,
if you took complete intro to react,

19
00:01:22.854 --> 00:01:26.290
the first part of this course
is writing react without JSX.

20
00:01:26.290 --> 00:01:28.556
This is essentially what we did here.

21
00:01:28.556 --> 00:01:32.827
Later if you wanna come back and
reimplement this using Babel and vite and

22
00:01:32.827 --> 00:01:35.709
all that kind of stuff,
by all means, go ahead.

23
00:01:35.709 --> 00:01:39.708
But now we don't have to set up
a whole build process, which I think

24
00:01:39.708 --> 00:01:43.936
everyone here is like one less webpack
step in their life is a good day.

25
00:01:43.936 --> 00:01:46.494
Again, this isn't particularly
interesting code, so

26
00:01:46.494 --> 00:01:48.636
feel free to just copy it
out of the docs as well.

27
00:01:48.636 --> 00:01:50.830
I'm super okay with that.

28
00:01:50.830 --> 00:01:56.513
But I wanna make a file called build.js
now, and this is gonna be a little noddy,

29
00:01:56.513 --> 00:02:00.693
but you'll kinda get the gist
of like what Next and Astro and

30
00:02:00.693 --> 00:02:03.556
all these frameworks really do for you.

31
00:02:03.556 --> 00:02:07.376
And you're gonna be,
it's actually really not that much.

32
00:02:07.376 --> 00:02:11.296
Or sometimes if you don't need
the full power of Astro behind you,

33
00:02:11.296 --> 00:02:13.116
sometimes this can be useful.

34
00:02:13.116 --> 00:02:16.910
I just need to get some content
templated and generated and

35
00:02:16.910 --> 00:02:18.774
I wanna use React to do that.

36
00:02:18.774 --> 00:02:20.160
This will work just fine.

37
00:02:20.160 --> 00:02:25.647
So we're gonna do import render.

38
00:02:25.647 --> 00:02:31.969
I can spell, render to static
markup from reactdom/server.

39
00:02:33.911 --> 00:02:40.488
&gt;&gt; Brian Holt: Okay,
we're gonna import again our H,

40
00:02:40.488 --> 00:02:45.719
create element as h from react.

41
00:02:45.719 --> 00:02:50.080
And then we need a bunch of just
dumb file stuff from, no Js so

42
00:02:50.080 --> 00:02:52.713
bear with me for here just a second.

43
00:02:52.713 --> 00:02:58.594
Realfilesync, writefilesync,

44
00:02:58.594 --> 00:03:03.663
existssync, makedirsync,

45
00:03:03.663 --> 00:03:09.349
readdirsync, and unlinksync.

46
00:03:09.349 --> 00:03:11.375
Now, why all the syncs?

47
00:03:11.375 --> 00:03:15.887
Again, I was just trying to keep
this code simple, not asynchronous.

48
00:03:15.887 --> 00:03:19.487
These are async by default and I'm just
gonna make the build process wait for

49
00:03:19.487 --> 00:03:20.566
every step to happen.

50
00:03:20.566 --> 00:03:24.876
If you had a massive app, you'd wanna
make this more in parallel, right?

51
00:03:24.876 --> 00:03:27.732
And this is just gonna come from,
you can put from FS,

52
00:03:27.732 --> 00:03:32.131
I imagine most of you are probably used to
just writing FS like that, file system.

53
00:03:32.131 --> 00:03:35.537
The new way of doing that is
actually node colon FS, so

54
00:03:35.537 --> 00:03:39.409
you're explicitly coming from
the node standard library.

55
00:03:39.409 --> 00:03:41.433
That's totally up to you, they both work.

56
00:03:41.433 --> 00:03:45.397
I'm just trying to make myself get in the
habit of writing node colon coz I don't

57
00:03:45.397 --> 00:03:49.005
know someone the one of the node card
members told me to do it that way, and

58
00:03:49.005 --> 00:03:52.378
I just didn't ask many questions,
if we're being really honest,

59
00:03:52.378 --> 00:03:53.707
of what happened, okay.

60
00:03:58.168 --> 00:04:04.616
&gt;&gt; Brian Holt: We're gonna import
file URL to path from node colon,

61
00:04:04.616 --> 00:04:09.213
URL like that we're going to import.

62
00:04:09.213 --> 00:04:11.156
Why do I have path in there twice?

63
00:04:11.156 --> 00:04:16.788
I don't know, but
we're gonna follow the notes and

64
00:04:16.788 --> 00:04:20.500
dirname from node colon path, and

65
00:04:20.500 --> 00:04:24.852
then we're finally gonna import our app

66
00:04:24.852 --> 00:04:29.844
from App./app.js or something like that.

67
00:04:29.844 --> 00:04:34.072
Sometimes it gets finicky
about the extensions.

68
00:04:34.072 --> 00:04:39.383
One of the things, if you've worked much
in no JS, you frequently refer to dirname.

69
00:04:39.383 --> 00:04:43.802
Like this with this like double underscore
coz it allows you to refer to where

70
00:04:43.802 --> 00:04:45.609
the app is currently running.

71
00:04:45.609 --> 00:04:50.621
It's basically like the president
working directly of where you are,

72
00:04:50.621 --> 00:04:54.560
if you're familiar with
the Linux kinda terminology.

73
00:04:54.560 --> 00:04:59.086
I'm just gonna say that I find this
incredibly annoying that they didn't

74
00:04:59.086 --> 00:05:03.322
anticipate that this was going to
be also a practice with es modules.

75
00:05:03.322 --> 00:05:06.575
So you have to redefine what
dirname is in es modules and

76
00:05:06.575 --> 00:05:08.566
I can never remember how to do it.

77
00:05:08.566 --> 00:05:14.412
So if you wanna know about,
one of the things I use AI for

78
00:05:14.412 --> 00:05:21.802
all the time is define dirname for
es modules or something like that.

79
00:05:21.802 --> 00:05:24.654
And I'll just have it generate
this little snippet of code.

80
00:05:24.654 --> 00:05:28.733
For me, it generates the same thing for
me every single time.

81
00:05:28.733 --> 00:05:30.841
Yeah, it looks exactly like this.

82
00:05:30.841 --> 00:05:33.865
So it generates file name and which is,
you can also use as well and dirname,

83
00:05:33.865 --> 00:05:37.052
I think that's literally in my notes there
as well, is it looks just like this.

84
00:05:37.052 --> 00:05:40.623
But this is like one of the things I
use AI for all the time it's like,

85
00:05:40.623 --> 00:05:42.449
I know this code out there exists.

86
00:05:42.449 --> 00:05:44.730
I don't remember exactly how
to do it off top my head.

87
00:05:44.730 --> 00:05:47.655
I know you have to use file
you are at a path, and

88
00:05:47.655 --> 00:05:52.324
then this will actually give you what
in common JS will always be defined.

89
00:05:52.324 --> 00:05:57.419
But for es modules, you have to
redefine it every single time, okay?

90
00:05:57.419 --> 00:06:01.333
And then we need to make a distpath,

91
00:06:01.333 --> 00:06:07.337
const distpath = path.join_dirname,
"dist".

92
00:06:07.337 --> 00:06:12.730
So this is actually where we wanted to
export the finished files to, right?

93
00:06:12.730 --> 00:06:15.804
Okay, const shell =,

94
00:06:15.804 --> 00:06:20.878
we're gonna read our index.html, so

95
00:06:20.878 --> 00:06:26.260
read filesync, and then we're gonna say

96
00:06:26.260 --> 00:06:31.503
path.join_dirname, index.html.

97
00:06:34.417 --> 00:06:37.556
&gt;&gt; Brian Holt: And it's a UTF-8 file,
which is the encoding,

98
00:06:37.556 --> 00:06:40.482
not that you really need
to need to care at all.

99
00:06:43.465 --> 00:06:48.647
&gt;&gt; Brian Holt: Okay, so now this is
going to be just a string of what's

100
00:06:48.647 --> 00:06:55.086
in this index.html file,
which is the shell of our app so to speak.

101
00:06:55.086 --> 00:06:58.846
Const app is going to be
renderToStaticMarkup.

102
00:06:58.846 --> 00:07:03.313
And then we have to give it h,
coz we have to

103
00:07:03.313 --> 00:07:08.172
instantiate the R app,
and so App like that.

104
00:07:08.172 --> 00:07:12.639
So now this is a string, right?

105
00:07:12.639 --> 00:07:16.156
Coz renderToStaticMarkup will give
you back a string of whatever this

106
00:07:16.156 --> 00:07:17.000
rendered with.

107
00:07:17.000 --> 00:07:20.985
So now I have my shell, right?

108
00:07:20.985 --> 00:07:23.107
Which is the index.html file and

109
00:07:23.107 --> 00:07:26.985
I have whatever is an app rendered
out to like a final string.

110
00:07:26.985 --> 00:07:28.985
At this point, you can probably
guess what's gonna happen, right?

111
00:07:28.985 --> 00:07:36.997
So we're gonna say const
html equals shell.replace.

112
00:07:36.997 --> 00:07:42.753
And we're gonna do that same string.

113
00:07:42.753 --> 00:07:50.301
I can type, there we go, root, and
we're gonna replace it with app.

114
00:07:50.301 --> 00:07:55.471
And now this will be a string
of our completed app.

115
00:07:57.503 --> 00:08:00.211
&gt;&gt; Brian Holt: And then the bottom
part here is just making sure if

116
00:08:00.211 --> 00:08:02.149
the directory exists, create it.

117
00:08:02.149 --> 00:08:05.712
If it's full of stuff,
delete the stuff in there.

118
00:08:05.712 --> 00:08:10.159
And then at the end you just write all of
your files out and then you were done.

119
00:08:10.159 --> 00:08:17.233
So we're gonna say if existsSync distpath.

120
00:08:21.962 --> 00:08:28.015
&gt;&gt; Brian Holt: Mkdirsync distpath.

121
00:08:30.954 --> 00:08:37.194
&gt;&gt; Brian Holt: Okay,
else const files equals

122
00:08:37.194 --> 00:08:42.363
readersync
&gt;&gt; Brian Holt: Dist path,

123
00:08:42.363 --> 00:08:46.593
and then we're just gonna go and delete
everything, which is called unlinking.

124
00:08:46.593 --> 00:08:51.867
So you're gonna say for
const file of files.

125
00:08:55.480 --> 00:09:00.637
&gt;&gt; Brian Holt: And
then you're gonna go through here and

126
00:09:00.637 --> 00:09:06.835
say, unlink sync path.join distpath and
file.

127
00:09:06.835 --> 00:09:07.929
Okay, does that make sense?

128
00:09:07.929 --> 00:09:10.469
What this does directory exists.

129
00:09:10.469 --> 00:09:15.845
If it doesn't exist,
create it if it does exist,

130
00:09:15.845 --> 00:09:19.941
delete everything in it and then write

131
00:09:19.941 --> 00:09:25.061
filesync path.join distpath index.html and

132
00:09:25.061 --> 00:09:28.905
you're gonna write out your HTML.

133
00:09:33.185 --> 00:09:35.757
&gt;&gt; Brian Holt: No, this is it, right?

134
00:09:35.757 --> 00:09:36.951
We should run this, right?

135
00:09:36.951 --> 00:09:38.878
Coz it's gonna be amazing and
it's gonna blow your mind.

136
00:09:38.878 --> 00:09:41.694
You're gonna be like, My God,
I have created fire, right?

137
00:09:41.694 --> 00:09:43.812
Like you just banged two rocks together.

138
00:09:43.812 --> 00:09:48.143
This obviously only works on one file
right now with one app with no props and

139
00:09:48.143 --> 00:09:51.921
put it, but I'm hoping that you
can look at this and like, yeah,

140
00:09:51.921 --> 00:09:56.007
I can very much understand here how
to create multiple pages, right?

141
00:09:56.007 --> 00:10:00.209
With multiple different props and
multiple different permutations, right?

142
00:10:00.209 --> 00:10:04.827
This here is the beginnings of
a framework that you're building for

143
00:10:04.827 --> 00:10:06.616
static site generation.

144
00:10:06.616 --> 00:10:11.302
This is essentially what Astro does for
you underneath the hood, right?

145
00:10:11.302 --> 00:10:16.136
It renders your app, it just outputs it
to raw files and that's what you get.

146
00:10:16.136 --> 00:10:19.912
So we should be able to
just run node build.

147
00:10:19.912 --> 00:10:21.591
Okay, so now we have this disk directory.

148
00:10:21.591 --> 00:10:25.712
You can look in your index at HTML,
and you can see, hello,

149
00:10:25.712 --> 00:10:28.610
frontend masters, this is SSG, right?

150
00:10:28.610 --> 00:10:29.854
No mention of React.

151
00:10:29.854 --> 00:10:33.986
You never would even have to know that
this was generated by react, right?

152
00:10:33.986 --> 00:10:38.957
And like I said, this is really what
Astro does for you underneath the hood.

153
00:10:38.957 --> 00:10:42.107
It's a more sophisticated build.js file,
but yeah,

154
00:10:42.107 --> 00:10:46.203
I'm sure you can imagine here we
could define, like a routes.js file.

155
00:10:46.203 --> 00:10:50.245
You would define this file
corresponds to this component, and

156
00:10:50.245 --> 00:10:55.137
generate them in this order,
with these props, have these permutations.

157
00:10:55.137 --> 00:10:59.016
You could actually have little
mini React js Apps that would

158
00:10:59.016 --> 00:11:00.889
instantiate on every page.

159
00:11:00.889 --> 00:11:04.014
You actually could add some interactivity.

160
00:11:04.014 --> 00:11:05.804
This is what I'm talking
about where we can kinda

161
00:11:05.804 --> 00:11:07.210
shove some of these things together.

162
00:11:07.210 --> 00:11:10.806
Just because you're doing static site
generation doesn't mean that you

163
00:11:10.806 --> 00:11:12.318
can't have React on top of it.

164
00:11:12.318 --> 00:11:16.234
This is just another way of
accomplishing some of these things.

165
00:11:16.234 --> 00:11:20.833
You could definitely bring in something
like React router or ten stack router and

166
00:11:20.833 --> 00:11:23.821
put that on top of that and
now you have a spa, right?

167
00:11:23.821 --> 00:11:28.013
So, the world is your oyster is
really what I'm trying to say.

168
00:11:31.160 --> 00:11:35.296
&gt;&gt; Brian Holt: Okay, any questions about
the code that we went through here?

169
00:11:38.229 --> 00:11:39.781
&gt;&gt; Brian Holt: Make sense?

170
00:11:41.341 --> 00:11:44.386
&gt;&gt; Brian Holt: Yeah, I mean, it's one
of those things that you probably went

171
00:11:44.386 --> 00:11:46.637
through this as wow,
I assumed this did more.

172
00:11:46.637 --> 00:11:51.887
And that's why I love doing these kind
of first principles apps together,

173
00:11:51.887 --> 00:11:55.737
is you realize it doesn't
really do that much for you.

174
00:11:55.737 --> 00:11:59.085
The complexity that's underneath
the hood really isn't that complex.

175
00:12:02.662 --> 00:12:05.845
&gt;&gt; Brian Holt: So going back here
to static site generation is like,

176
00:12:05.845 --> 00:12:07.481
okay, but just use Astro.

177
00:12:07.481 --> 00:12:11.547
[LAUGH] right, I've now shown you
everything of how you could do this

178
00:12:11.547 --> 00:12:16.040
yourself, but now that you understand
the tool and what next and Gatsby and

179
00:12:16.040 --> 00:12:17.843
Astro were all doing for you.

180
00:12:17.843 --> 00:12:19.097
Just use them, right?

181
00:12:19.097 --> 00:12:20.744
And now you understand when stuff breaks,

182
00:12:20.744 --> 00:12:23.272
you can understand where some of
these things are falling apart.

183
00:12:23.272 --> 00:12:25.710
And you can also probably
understand how you can improve and

184
00:12:25.710 --> 00:12:28.795
make them more performant and better and
all these kind of things, right?

185
00:12:28.795 --> 00:12:34.233
But Astro is an amazing piece of software,
I like it quite a bit.

186
00:12:34.233 --> 00:12:38.780
If I was gonna recreate something today,
I probably would just use Astro,

187
00:12:38.780 --> 00:12:39.797
I quite like it.

188
00:12:40.869 --> 00:12:44.172
&gt;&gt; Brian Holt: So yeah, like I said,
this app is built on top of Next.js.

189
00:12:44.172 --> 00:12:50.799
It's just obviously what I know the best,
but Astro is awesome as well.

190
00:12:50.799 --> 00:12:53.618
The previous versions of this,
course, were built on Gatsby.

191
00:12:53.618 --> 00:12:57.282
That's a fun fact, but
now that they got acquired by Netlify,

192
00:12:57.282 --> 00:13:00.198
they don't seem to be as
maintained as they were.

193
00:13:00.198 --> 00:13:06.442
So I would say these two Astro, Next are
really the state of the art at the moment.

194
00:13:06.442 --> 00:13:10.109
Again, this site you're looking
at yourself is a more complicated

195
00:13:10.109 --> 00:13:10.891
static site.

196
00:13:10.891 --> 00:13:14.324
So just to kinda walk you through that,

197
00:13:14.324 --> 00:13:20.577
this is the markdown that generated
this page that you're looking at.

198
00:13:20.577 --> 00:13:23.685
I mean, that's the really
nice part about all this,

199
00:13:23.685 --> 00:13:27.016
is I get to author everything in Markdown,
which I love.

200
00:13:27.016 --> 00:13:29.822
You can see here,
has all the keywords and description.

201
00:13:29.822 --> 00:13:34.334
This is the stuff I was telling you
that was generated by chat GPT.

202
00:13:34.334 --> 00:13:39.694
So, it makes experience.

203
00:13:39.694 --> 00:13:43.047
And then you can see down here to
the next config I have the export part.

204
00:13:43.047 --> 00:13:46.938
That's the part that makes it so
it's static site.

205
00:13:46.938 --> 00:13:52.117
You can see that actually ends up being
this HTML doc, right, which is great.

206
00:13:52.117 --> 00:13:54.122
It's exactly what I want.

207
00:13:54.122 --> 00:13:58.547
So you can see this
entire site is just one.

208
00:13:58.547 --> 00:14:01.094
Just straight up HTML, right?

209
00:14:02.893 --> 00:14:07.824
&gt;&gt; Brian Holt: It makes it super easy to
do things to help the front of masters

210
00:14:07.824 --> 00:14:12.658
team with the editing of this,
it generates a CSV file of all

211
00:14:12.658 --> 00:14:18.385
the various different lessons,
it makes all the SEO stuff very easy.

212
00:14:18.385 --> 00:14:23.159
But that's all thanks to static
site generation, it's perfect for

213
00:14:23.159 --> 00:14:24.895
that use kinda use case.

214
00:14:24.895 --> 00:14:27.283
So any questions about SSG?

215
00:14:27.283 --> 00:14:31.996
&gt;&gt; Speaker 2: Do you ever use markdown
instead of React components or

216
00:14:31.996 --> 00:14:34.048
somehow mix and match?

217
00:14:34.048 --> 00:14:39.386
&gt;&gt; Brian Holt: I see them as
different tools for different jobs.

218
00:14:39.386 --> 00:14:43.241
If I was gonna write this course in React,

219
00:14:43.241 --> 00:14:47.659
it would be very painful for
no reason, right?

220
00:14:47.659 --> 00:14:52.079
I don't understand why you would just
directly author JSX for static sites,

221
00:14:52.079 --> 00:14:56.229
unless you were building some large
layer of interactivity on top of it.

222
00:14:56.229 --> 00:14:59.061
But even then,
would use I forgot what it's called, but

223
00:14:59.061 --> 00:15:03.015
there's some markdown flavor that allows
you to embed React components in it.

224
00:15:03.015 --> 00:15:04.865
I'm sure someone here knows what it is.

225
00:15:04.865 --> 00:15:06.117
I would use something like that, right?

226
00:15:06.117 --> 00:15:08.923
I wouldn't actually still
author it directly in markdown.

227
00:15:08.923 --> 00:15:13.499
So markdown is great for
just like I got h1s, h2s, paragraphs,

228
00:15:13.499 --> 00:15:16.211
block quotes, all that kind of stuff.

229
00:15:16.211 --> 00:15:23.292
And then I will render that to HTML, and
then I will put that into a page, right?

230
00:15:23.292 --> 00:15:27.099
So it's one layer of abstraction
higher than a React component.

231
00:15:27.099 --> 00:15:30.349
&gt;&gt; Speaker 2: Chad is shouting, MDX
&gt;&gt; Brian Holt: Yeah, you got it, MDX,

232
00:15:30.349 --> 00:15:31.436
thank you, Chad.

