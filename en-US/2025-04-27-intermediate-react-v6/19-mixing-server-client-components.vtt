WEBVTT

1
00:00:00.121 --> 00:00:03.261
&gt;&gt; Brian Holt: I wanna address the
question around how do I mix server and

2
00:00:03.261 --> 00:00:05.168
compliant and client component.

3
00:00:05.168 --> 00:00:07.345
I'm teaching you these
like siloed examples.

4
00:00:07.345 --> 00:00:11.270
So it's designed to be simple, right?

5
00:00:11.270 --> 00:00:14.887
Nothing in development ever ends up being
that way we always have to mix concerns.

6
00:00:14.887 --> 00:00:19.364
So I mentioned that at the beginning,
but I'm going to say it again.

7
00:00:19.364 --> 00:00:23.632
Can't have a server component be
a child of a client component.

8
00:00:23.632 --> 00:00:25.849
Once you opt into client land,

9
00:00:25.849 --> 00:00:29.953
everything in the tree beneath
it is also in client land.

10
00:00:29.953 --> 00:00:31.885
So you can't go back.

11
00:00:31.885 --> 00:00:37.976
With kind of a little hack,
do I show you that next time?

12
00:00:39.835 --> 00:00:43.041
&gt;&gt; Brian Holt: Yeah no, so I'll show
you the hack to get around it, but

13
00:00:43.041 --> 00:00:44.550
that's the next lesson.

14
00:00:48.067 --> 00:00:56.511
&gt;&gt; Brian Holt: But what happens I need to
load server data into a client component.

15
00:00:56.511 --> 00:01:00.100
Now, we could just do it like we always
used to do, an effect, use effect.

16
00:01:00.100 --> 00:01:01.641
Right, and then loaded in.

17
00:01:01.641 --> 00:01:03.004
Nothing about that changed.

18
00:01:03.004 --> 00:01:07.084
You can still write API routes and
next js, follow Scott's class for that,

19
00:01:07.084 --> 00:01:09.266
because I know he talks a lot about that.

20
00:01:09.266 --> 00:01:09.932
We're not going to do that.

21
00:01:09.932 --> 00:01:11.904
I'm going to show you,
kind of the cheater way.

22
00:01:11.904 --> 00:01:14.916
And I'm gonna say that you,
you kind of already know how to do this.

23
00:01:14.916 --> 00:01:16.131
You just maybe haven't put,

24
00:01:16.131 --> 00:01:18.571
there's the two dots here you
haven't drawn the line yet.

25
00:01:18.571 --> 00:01:21.541
So I'm gonna draw the line.

26
00:01:21.541 --> 00:01:26.077
So I have this secret teacher feed
that monitors every single note

27
00:01:26.077 --> 00:01:30.536
that's being passed in the class,
and I want it to be up to date.

28
00:01:30.536 --> 00:01:31.729
So, I'm gonna pull.

29
00:01:31.729 --> 00:01:34.384
So I'm gonna have it
pull every five seconds,

30
00:01:34.384 --> 00:01:37.461
15 seconds to see if any
new notes have been passed.

31
00:01:37.461 --> 00:01:40.103
Now, what do I do on initial page load.

32
00:01:40.103 --> 00:01:43.484
That I could just wait for it to pull
the first time, that would work just fine.

33
00:01:43.484 --> 00:01:47.795
But it'd be cool if it loaded the first
time with the complete feed, right?

34
00:01:47.795 --> 00:01:52.575
So let's, let's do that,
let's see how you would do that.

35
00:01:52.575 --> 00:01:58.497
So make a new directory here,
call it teacher.

36
00:01:58.497 --> 00:02:04.447
Make a page.js.then we're

37
00:02:04.447 --> 00:02:10.635
going to import teacherclient

38
00:02:10.635 --> 00:02:15.399
from./clientpage.

39
00:02:15.399 --> 00:02:18.990
All right, I call this teacher client
page, whatever you want to call it,

40
00:02:18.990 --> 00:02:19.902
doesn't matter.

41
00:02:19.902 --> 00:02:27.960
Import fetch notes from ./fetch notes.

42
00:02:27.960 --> 00:02:36.430
And then we're going to export
default async function, teacher view.

43
00:02:39.088 --> 00:02:46.348
&gt;&gt; Brian Holt: And we're gonna say const
initialnotes equals await fetchNotes,

44
00:02:46.348 --> 00:02:53.860
and then we're just gonna pass that
into return TeacherClientpage,

45
00:02:53.860 --> 00:02:58.318
initialNotes equals initialNotes, and

46
00:02:58.318 --> 00:03:01.904
fetchNotes equals fetchNotes.

47
00:03:06.515 --> 00:03:09.721
&gt;&gt; Brian Holt: This is it, you just
have a server component on top and

48
00:03:09.721 --> 00:03:14.084
then you just do everything you need
to in the parents server component.

49
00:03:14.084 --> 00:03:17.075
And then you just pass it all into
the client component because props

50
00:03:17.075 --> 00:03:17.764
work, right?

51
00:03:17.764 --> 00:03:20.843
We can pass all the props down,
that all works totally fine.

52
00:03:24.578 --> 00:03:31.619
&gt;&gt; Brian Holt: And now we just need
to make this client page.js and

53
00:03:31.619 --> 00:03:38.023
we'll also need to do
a fetch notes.js page.

54
00:03:38.023 --> 00:03:42.319
So let's go do fetch notes first,
that's quick to do.

55
00:03:42.319 --> 00:03:45.868
So this happens all in the server,
fetch notes.

56
00:03:45.868 --> 00:03:49.993
So we're going to use server, and

57
00:03:49.993 --> 00:03:55.541
we're going to say import
async database from

58
00:03:55.541 --> 00:04:00.662
promise sqlite3, and we're going to say

59
00:04:00.662 --> 00:04:06.083
export default async function fetch notes.

60
00:04:06.083 --> 00:04:08.332
And I'm going to give do it since,

61
00:04:08.332 --> 00:04:13.312
because basically you only want to grab
things from a certain ID backwards.

62
00:04:13.312 --> 00:04:15.745
And again, this is all database stuff, so

63
00:04:15.745 --> 00:04:18.799
you don't really have to
be super concerned with it.

64
00:04:18.799 --> 00:04:28.126
Const db = await
AsyncDatabase(".open./notes.db"),

65
00:04:29.589 --> 00:04:35.337
&gt;&gt; Brian Holt: Let rows if (since) rows is

66
00:04:35.337 --> 00:04:42.287
going to be equal to await d.all.

67
00:04:42.287 --> 00:04:46.909
Select, how long is this?

68
00:04:49.411 --> 00:04:54.427
&gt;&gt; Brian Holt: Yeah,
again this is gonna be a quote.

69
00:04:54.427 --> 00:04:59.280
n.id as Id n.note, feel free to copy this.

70
00:04:59.280 --> 00:05:01.854
Definitely don't need to go through
this as well if you don't want to.

71
00:05:01.854 --> 00:05:08.075
f.name as from user and

72
00:05:08.075 --> 00:05:12.741
t.name as to user

73
00:05:12.741 --> 00:05:18.345
from notes and join.

74
00:05:20.582 --> 00:05:26.679
&gt;&gt; Brian Holt: F on
&gt;&gt; Brian Holt: f.id

75
00:05:26.679 --> 00:05:32.597
equals n.from user,

76
00:05:37.200 --> 00:05:40.660
&gt;&gt; Brian Holt: And then you have to have

77
00:05:40.660 --> 00:05:46.542
another JOIN yeah, yeah, JOIN users.

78
00:05:46.542 --> 00:05:52.090
See JOIN users, and
then I called this one t,

79
00:05:52.090 --> 00:05:57.494
yeah, t, on t.id, equals n.to, user.

80
00:05:59.654 --> 00:06:05.511
&gt;&gt; Brian Holt: Where n.id,
is greater than I needed,

81
00:06:05.511 --> 00:06:10.162
then question mark, and then,

82
00:06:10.162 --> 00:06:14.826
I put limit 50 in here as well.

83
00:06:14.826 --> 00:06:16.560
You can put whatever you want,

84
00:06:16.560 --> 00:06:20.437
though you don't have to have of
limit on there if you don't need to.

85
00:06:20.437 --> 00:06:24.356
And yeah, then since, right?

86
00:06:24.356 --> 00:06:31.417
So this will be an ID and it'll just
give me everything newer than that ID.

87
00:06:31.417 --> 00:06:34.614
Otherwise we're gonna say else.

88
00:06:34.614 --> 00:06:39.544
Rows is assigned essentially the same
thing you can even go as far to copy

89
00:06:39.544 --> 00:06:40.540
most of this.

90
00:06:40.540 --> 00:06:46.251
We're just gonna drop
the where essentially,

91
00:06:46.251 --> 00:06:51.400
and this isn't gonna have anything in it.

92
00:06:51.400 --> 00:06:53.056
Okay, and return rows.

93
00:06:57.901 --> 00:07:00.705
&gt;&gt; Brian Holt: Okay,
questions about fetchNotes.

94
00:07:00.705 --> 00:07:02.828
&gt;&gt; Learners: How would you
paginate this if you wanted to?

95
00:07:02.828 --> 00:07:03.917
Just high level?

96
00:07:03.917 --> 00:07:07.465
&gt;&gt; Brian Holt: Yeah, you just have
page right and then offset and

97
00:07:07.465 --> 00:07:09.587
all those kind of SQL tricks.

98
00:07:09.587 --> 00:07:15.784
Maybe in other ways nothing
interesting to to show you.

99
00:07:15.784 --> 00:07:22.883
Limit 50 offset, question mark, right,
and then you would do the math.

100
00:07:26.073 --> 00:07:29.129
&gt;&gt; Brian Holt: Or actually, much better
answer use something like Drizzle.

101
00:07:29.129 --> 00:07:30.896
Yeah, let Prisma do it for you.

102
00:07:35.916 --> 00:07:38.494
&gt;&gt; Brian Holt: Okay,
let's go make client page then.

103
00:07:38.494 --> 00:07:44.966
And so client page, first thing,
this is a client component, right?

104
00:07:44.966 --> 00:07:49.807
So first thing we're gonna to
put in here is use client.

105
00:07:49.807 --> 00:07:56.088
And then we're gonna import use state,
use effect.

106
00:07:56.088 --> 00:08:00.466
I mean 99.99% of the time
you want you to be

107
00:08:00.466 --> 00:08:04.848
a client component if you
need to use useState.

108
00:08:04.848 --> 00:08:08.320
You also might find yourself pushing
client state down further and

109
00:08:08.320 --> 00:08:11.796
further in the tree so you can use
more and more server components.

110
00:08:11.796 --> 00:08:17.852
And so just the leaf notes of your
app end up being client components.

111
00:08:17.852 --> 00:08:21.690
That's something that's just I
have found as a habit that I

112
00:08:21.690 --> 00:08:25.397
didn't necessarily mean to develop,
but I kind of did.

113
00:08:25.397 --> 00:08:30.790
Default function,
teacher, client page, and

114
00:08:30.790 --> 00:08:36.849
this is going to take in fetchNotes and
initialNotes.

115
00:08:41.074 --> 00:08:46.691
&gt;&gt; Brian Holt: Okay, const notes,
set notes equals use state.

116
00:08:52.727 --> 00:08:57.459
&gt;&gt; Brian Holt: And if you have initial
notes, then use that, you might not,

117
00:08:57.459 --> 00:08:59.197
for whatever reason.

118
00:08:59.197 --> 00:09:02.712
And if you don't,
then just use empty array, right?

119
00:09:07.020 --> 00:09:11.738
&gt;&gt; Brian Holt: Okay, and then from
there we're gonna do a use effect and

120
00:09:11.738 --> 00:09:16.670
we're gonna,
because we want this to be polling, right.

121
00:09:16.670 --> 00:09:19.752
Then we're gonna use an effect
to pull that end point.

122
00:09:22.304 --> 00:09:26.498
&gt;&gt; Brian Holt: So
const interval = set interval.

123
00:09:33.402 --> 00:09:38.105
&gt;&gt; Brian Holt: Async function here, and

124
00:09:38.105 --> 00:09:41.952
then say that since if

125
00:09:41.952 --> 00:09:48.366
notes.length is greater than 0,

126
00:09:48.366 --> 00:09:53.924
then since is assigned notes,

127
00:09:53.924 --> 00:10:00.792
notes.length minus 1.id or null.

128
00:10:00.792 --> 00:10:05.613
This is called nullish coalescing,
if that's not something that's

129
00:10:05.613 --> 00:10:10.609
familiar to you, that basically says
if this exists, then it's an id.

130
00:10:10.609 --> 00:10:15.471
If nothing exists there, then it is null.

131
00:10:15.471 --> 00:10:17.979
That's a relatively recent, I don't know.

132
00:10:17.979 --> 00:10:19.793
I can't keep track of time anymore.

133
00:10:19.793 --> 00:10:25.628
When you have a three-year-old,
time just kind of all meshes together.

134
00:10:26.654 --> 00:10:28.591
&gt;&gt; Brian Holt: It feels recent to me,
I'm gonna put it that way.

135
00:10:28.591 --> 00:10:35.590
Const newNotes = await
fetchNotes with since.

136
00:10:35.590 --> 00:10:40.444
So this will either be the id
of the last thing that it saw or

137
00:10:40.444 --> 00:10:44.895
it's going to be null,
and then you'll set notes,

138
00:10:44.895 --> 00:10:49.547
and then it'll be a concatenation of dot,
dot, dot,

139
00:10:49.547 --> 00:10:53.323
dash notes and dot, dot, dot, new notes.

140
00:10:53.323 --> 00:11:00.584
This is the same thing as saying like
notes, dot, concat, new notes, same diff.

141
00:11:00.584 --> 00:11:03.829
And then we want this to go
however much you want to,

142
00:11:03.829 --> 00:11:06.701
I'm just gonna say 5000 milliseconds.

143
00:11:06.701 --> 00:11:11.697
So every five seconds, this will pull and
I don't want this to run again, so

144
00:11:11.697 --> 00:11:14.600
I'm just going to give
this an empty array.

145
00:11:14.600 --> 00:11:16.118
So it's gonna set up the interval, and

146
00:11:16.118 --> 00:11:17.867
then this effect will
keep going after that.

147
00:11:21.188 --> 00:11:25.766
&gt;&gt; Brian Holt: Okay, and
now we're just gonna say return, and

148
00:11:25.766 --> 00:11:32.019
just do a little bit of markup here,
div,h1, Teacher's view,

149
00:11:32.019 --> 00:11:36.501
h1, teachers view, and
we're gonna do a ul.

150
00:11:36.501 --> 00:11:44.216
And we're gonna do note.map.note,

151
00:11:44.216 --> 00:11:49.827
and we're gonna return here

152
00:11:49.827 --> 00:11:57.087
an li with the key equal to note.id.

153
00:11:57.087 --> 00:11:59.430
And it's going to be a field set.

154
00:12:03.016 --> 00:12:06.764
&gt;&gt; Brian Holt: h2, from

155
00:12:10.149 --> 00:12:17.088
&gt;&gt; Brian Holt: note.from_user, and to.

156
00:12:19.747 --> 00:12:25.270
&gt;&gt; Brian Holt: note,to_user,
&gt;&gt; Brian Holt: Okay,

157
00:12:25.270 --> 00:12:29.286
that's the h2 and then we're

158
00:12:29.286 --> 00:12:34.236
gonna do a P here with the note.note.

159
00:12:36.920 --> 00:12:39.934
&gt;&gt; Brian Holt: I think that's it.

160
00:12:39.934 --> 00:12:43.913
So should we check so note passer,

161
00:12:43.913 --> 00:12:50.648
I'm going to go to secret teacher feed and
no such table F.

162
00:12:50.648 --> 00:12:54.225
So that's definitely me and
fetchNote, that's just me,

163
00:12:54.225 --> 00:12:56.736
probably not capturing this correctly.

164
00:12:56.736 --> 00:13:00.490
This right here,
F right there, from user F.

165
00:13:00.490 --> 00:13:02.905
Do have to give it an alias?

166
00:13:02.905 --> 00:13:07.664
Nope, that's not right.

167
00:13:07.664 --> 00:13:12.019
It's the first JOIN, JOIN users F.

168
00:13:12.019 --> 00:13:15.084
Yeah, I mean,
you'd be better off just copying and

169
00:13:15.084 --> 00:13:17.813
pasting this because
it's just a long query.

170
00:13:17.813 --> 00:13:21.032
Okay, so now we have our secret feed here.

171
00:13:24.154 --> 00:13:27.676
&gt;&gt; Brian Holt: We can see down here
at the bottom that's the last one I

172
00:13:27.676 --> 00:13:28.858
sent down there.

173
00:13:28.858 --> 00:13:32.011
So let's just create a second one here so

174
00:13:32.011 --> 00:13:35.831
we can see it working from
the pull perspective.

175
00:13:37.403 --> 00:13:39.364
&gt;&gt; Brian Holt: So
I'm gonna say, local host.

176
00:13:39.364 --> 00:13:42.918
What is this?
3000, write a note,

177
00:13:42.918 --> 00:13:47.907
and we'll write one from Sarah to Brian.

178
00:13:47.907 --> 00:13:53.397
Say, I think you smell.

179
00:13:53.397 --> 00:13:58.072
So if I click save, you can see

180
00:13:58.072 --> 00:14:02.561
there shows up pretty fast.

181
00:14:02.561 --> 00:14:07.122
It's pretty cool right?

182
00:14:07.122 --> 00:14:10.914
And you can see here

183
00:14:10.914 --> 00:14:16.135
you'll see the X as well.

184
00:14:19.712 --> 00:14:23.192
&gt;&gt; Brian Holt: Yep, and again,
you'll see those as well on your server,

185
00:14:23.192 --> 00:14:27.034
that it's just gonna keep polling
that endpoint continuously.

186
00:14:32.511 --> 00:14:33.657
&gt;&gt; Brian Holt: Pretty cool, right?

187
00:14:33.657 --> 00:14:36.596
&gt;&gt; Learners: Is the polling
showing up as a post?

188
00:14:36.596 --> 00:14:39.437
&gt;&gt; Brian Holt: Probably,
yeah, it is, isn't it?

189
00:14:39.437 --> 00:14:46.749
Because, it's all happening through
the machinery of React flight and stuff.

190
00:14:46.749 --> 00:14:52.588
It's not restful, so it's just
using it because it has a body and

191
00:14:52.588 --> 00:14:55.041
a bunch of stuff like that.

192
00:14:55.041 --> 00:14:58.159
&gt;&gt; Learners: I'm getting a 500 on mine
which is interesting, so it's working but

193
00:14:58.159 --> 00:15:00.574
it's failing, so
I'm just looking at that right now.

194
00:15:00.574 --> 00:15:02.513
&gt;&gt; Brian Holt: The polling's not working.

195
00:15:02.513 --> 00:15:05.610
&gt;&gt; Learners: I like, it's working fine,
it's just posting as a 500.

196
00:15:05.610 --> 00:15:08.176
So I'm thinking it's reaching out for
an end point that

197
00:15:08.176 --> 00:15:08.892
&gt;&gt; Brian Holt: Doesn't exist.

198
00:15:08.892 --> 00:15:11.514
&gt;&gt; Learners: Yeah, I'm sure it's
something I added on accident.

199
00:15:11.514 --> 00:15:12.568
&gt;&gt; Brian Holt: Fascinating.

200
00:15:12.568 --> 00:15:15.820
It's interesting that it's 500 and
it's still working.

201
00:15:15.820 --> 00:15:17.681
&gt;&gt; Learners: I've never seen
it happen like that, but-

202
00:15:17.681 --> 00:15:18.204
&gt;&gt; Brian Holt: Yeah.

203
00:15:18.204 --> 00:15:19.562
&gt;&gt; Learners: I'll take it.

204
00:15:19.562 --> 00:15:23.604
I think you need to clear your
interval in your use effect,

205
00:15:23.604 --> 00:15:25.326
&gt;&gt; Brian Holt: Yeah and I mean,

206
00:15:25.326 --> 00:15:32.477
if I was a better developer,
which I am not, I would be here in page.

207
00:15:32.477 --> 00:15:34.367
Yeah, because it's going to keep
going once you switch pages,

208
00:15:34.367 --> 00:15:35.459
that's actually a very good point.

209
00:15:35.459 --> 00:15:40.968
So you have to say const interval and
then let's just get rid of this.

210
00:15:40.968 --> 00:15:45.572
You should, again,
if you're a good developer,

211
00:15:45.572 --> 00:15:51.783
return clear interval on teardown,
because if you navigate back and

212
00:15:51.783 --> 00:15:56.509
forth from page to page,
it's going to keep going.

213
00:15:56.509 --> 00:15:58.600
But memory leaks are fine.

214
00:15:58.600 --> 00:15:59.677
Not a big deal.

215
00:15:59.677 --> 00:16:04.917
[LAUGH] I think I even noticed that and
I was like,

216
00:16:04.917 --> 00:16:11.871
I should like fix that, I was like,
nah, can't be bothered.

217
00:16:11.871 --> 00:16:16.899
Okay, any questions on any of this?

218
00:16:16.899 --> 00:16:19.572
Make sense?

219
00:16:19.572 --> 00:16:22.062
&gt;&gt; Learners: My hair, by the way,
it was the wrong column name.

220
00:16:22.062 --> 00:16:24.180
So I was getting all the data so
expecting, and

221
00:16:24.180 --> 00:16:26.309
I was also trying to go
on that doesn't exist.

222
00:16:26.309 --> 00:16:26.855
&gt;&gt; Brian Holt: Got it?

223
00:16:26.855 --> 00:16:31.083
Okay, so you were getting
something on the SQL side, right.

224
00:16:31.083 --> 00:16:31.868
Cool.

225
00:16:31.868 --> 00:16:36.350
&gt;&gt; Learners: Could you actually explain
one more time why we need to use the use

226
00:16:36.350 --> 00:16:37.765
server directive?

227
00:16:37.765 --> 00:16:39.043
&gt;&gt; Brian Holt: Yeah, this one here.

228
00:16:39.043 --> 00:16:41.199
&gt;&gt; Learners: Yeah.

229
00:16:41.199 --> 00:16:44.438
&gt;&gt; Brian Holt: Save it,
see what happens, so

230
00:16:44.438 --> 00:16:49.546
what succinctly is going
to happen here is that it

231
00:16:49.546 --> 00:16:55.045
just assumes that this should
be part of the bundle.

232
00:16:55.045 --> 00:16:58.675
You import this particularly
from a component and so

233
00:16:58.675 --> 00:17:03.970
it's gonna include everything that
you import into your bundles, right?

234
00:17:03.970 --> 00:17:08.843
And so it's going to try and
run this function on Bootstrap.

235
00:17:08.843 --> 00:17:12.768
And it's gonna be like, you imported
promise Sqlite3 here I'm going to include

236
00:17:12.768 --> 00:17:16.333
all of that in the bundle as well so
that it's accessible from the client side.

237
00:17:16.333 --> 00:17:19.778
And in reality, we want to use
stuff in here that we can't.

238
00:17:19.778 --> 00:17:23.571
So that's why we have to use server and
it's saying the stuff in here,

239
00:17:23.571 --> 00:17:25.129
leave them out of my bundle.

240
00:17:25.129 --> 00:17:31.014
It's only needed for
things that are not components, right.

241
00:17:31.014 --> 00:17:34.234
For components, it's just implied to be
there, but for server actions and server

242
00:17:34.234 --> 00:17:37.362
functions and all that kind of stuff, you
have to put it there to explicitly say,

243
00:17:37.362 --> 00:17:38.943
please do not include this in my bundle.

