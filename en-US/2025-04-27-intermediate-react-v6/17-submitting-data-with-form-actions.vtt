WEBVTT

1
00:00:00.118 --> 00:00:02.256
&gt;&gt; Brian Holt: So let's go make it so
that we can write a note.

2
00:00:02.256 --> 00:00:04.781
It's interesting that we
can look at notes, but

3
00:00:04.781 --> 00:00:07.563
how do we take data back from
the client to the server?

4
00:00:07.563 --> 00:00:11.156
We could have totally done this
with our no framework version, but

5
00:00:11.156 --> 00:00:14.172
we would have ended up just
wiring up a bunch more stuff,

6
00:00:14.172 --> 00:00:17.139
when in reality Next can just
do all this stuff for you.

7
00:00:17.139 --> 00:00:24.507
So I kind of spared you another type fest.

8
00:00:24.507 --> 00:00:29.570
So let's go into our app folder,
we're gonna make

9
00:00:29.570 --> 00:00:35.232
another directory and
we're gonna call this one write.

10
00:00:35.232 --> 00:00:38.670
You can delete the blah one,
we don't need that.

11
00:00:38.670 --> 00:00:42.483
And we're going to make a page.js.

12
00:00:46.578 --> 00:00:49.409
&gt;&gt; Brian Holt: And a lot of this
will look really familiar as well.

13
00:00:49.409 --> 00:00:51.755
This is gonna have some
measure of interactivity, but

14
00:00:51.755 --> 00:00:53.846
we're just going to rely
on the browser to do it,

15
00:00:53.846 --> 00:00:56.405
cuz we're gonna do this through
untracked forms, right?

16
00:00:56.405 --> 00:00:58.958
So we're just gonna allow the browser
to manage all the states.

17
00:00:58.958 --> 00:01:03.916
So we don't need to use useState, and
then we're going to accept that back onto

18
00:01:03.916 --> 00:01:07.764
our server component through
what's called a form action and

19
00:01:07.764 --> 00:01:09.555
then saved to the database.

20
00:01:09.555 --> 00:01:13.179
So let's go ahead and do that.

21
00:01:13.179 --> 00:01:19.467
We're in page.js on the right,
we're gonna import AsyncDatabase,

22
00:01:19.467 --> 00:01:24.393
and we're going to import
something called postNote,

23
00:01:24.393 --> 00:01:29.662
which we'll do here in just a second,
from ./postnote.

24
00:01:29.662 --> 00:01:33.713
And yeah, we'll write that momentarily,

25
00:01:33.713 --> 00:01:38.531
export default async function Write or
WritePage or

26
00:01:38.531 --> 00:01:44.785
whatever you wanna call it, again,
just for debugging purposes.

27
00:01:44.785 --> 00:01:52.251
And we're gonna say
async function getUsers.

28
00:01:52.251 --> 00:01:57.292
And we're just gonna say const db = await

29
00:01:57.292 --> 00:02:02.777
AsyncDatabase.open (./notes.db).

30
00:02:02.777 --> 00:02:07.084
And then we're just gonna say

31
00:02:07.084 --> 00:02:12.258
db.all(SELECT * FROM users).

32
00:02:16.261 --> 00:02:24.613
&gt;&gt; Brian Holt: And
then const users = await getUsers.

33
00:02:27.195 --> 00:02:29.313
&gt;&gt; Brian Holt: Again, this is so nice.

34
00:02:29.313 --> 00:02:34.690
For everything that I say, all the caveats
I throw at Next.js and server components,

35
00:02:34.690 --> 00:02:39.861
you can't deny, this is just really nice
to be able to do this in React components.

36
00:02:41.497 --> 00:02:44.716
&gt;&gt; Brian Holt: Even if you feel a little
dirty inside, that makes it better, right?

37
00:02:47.687 --> 00:02:51.327
&gt;&gt; Brian Holt: [LAUGH] You're the bad
guy or the bad girl of coding,

38
00:02:51.327 --> 00:02:53.621
that's how I feel all the time.

39
00:02:53.621 --> 00:02:59.464
fieldset className = note-fieldset.

40
00:03:03.129 --> 00:03:11.185
&gt;&gt; Brian Holt: legend&gt;Write a new note.

41
00:03:11.185 --> 00:03:16.838
form, and here's the magic,

42
00:03:16.838 --> 00:03:26.196
action=(postNote) className= note-form.

43
00:03:26.196 --> 00:03:29.210
Now, postNote is really
just gonna be a function.

44
00:03:29.210 --> 00:03:34.286
But what's cool about this is that,
essentially, you're explicitly,

45
00:03:34.286 --> 00:03:39.281
well, kind of explicitly, wiring up
this form call an API endpoint, and

46
00:03:39.281 --> 00:03:43.328
it's just going to pass that
data directly along, right?

47
00:03:43.328 --> 00:03:47.549
So you don't actually have to write
the API endpoint, you're just gonna say,

48
00:03:47.549 --> 00:03:49.313
whenever this form gets called,

49
00:03:49.313 --> 00:03:52.342
just invoke this function with
whatever was in the form.

50
00:03:52.342 --> 00:03:54.568
Normally, we would have to pull it out,

51
00:03:54.568 --> 00:03:57.915
we would have to make sure all
the data gets into the API call.

52
00:03:57.915 --> 00:04:00.228
We'd have to send that API we call fetch,
right?

53
00:04:00.228 --> 00:04:04.656
That would end up on a API endpoint,
and this just mushes it all together.

54
00:04:04.656 --> 00:04:05.581
It's like, no,

55
00:04:05.581 --> 00:04:09.923
when the form gets called, invoke this on
the server with whatever was in the form.

56
00:04:09.923 --> 00:04:10.833
I think that's really cool.

57
00:04:14.119 --> 00:04:17.159
&gt;&gt; Brian Holt: Okay,
we're gonna do just a couple,

58
00:04:17.159 --> 00:04:20.393
we're gonna write a form really quick.

59
00:04:20.393 --> 00:04:26.123
So label,
&gt;&gt; Brian Holt: And

60
00:04:26.123 --> 00:04:31.215
label's gonna be From, and

61
00:04:31.215 --> 00:04:39.076
it's gonna be a select name= from_user.

62
00:04:39.076 --> 00:04:45.893
And then we're gonna say users.map (user).

63
00:04:50.442 --> 00:04:54.693
&gt;&gt; Brian Holt: And we're gonna give
back an option for each one of them.

64
00:04:54.693 --> 00:04:59.395
So you need a key, and
that's gonna be user.id, and

65
00:04:59.395 --> 00:05:06.099
the value will also be user.id, and
then this will just be the user.name.

66
00:05:09.903 --> 00:05:13.458
&gt;&gt; Brian Holt: Okay, that's a good select,
the select, label, and

67
00:05:13.458 --> 00:05:17.936
then we need another label underneath
that one, which is gonna be To,

68
00:05:21.628 --> 00:05:26.666
&gt;&gt; Brian Holt: And same sort of thing.

69
00:05:26.666 --> 00:05:30.599
In fact, you probably could just copy and
paste this and just modify it manually,

70
00:05:30.599 --> 00:05:33.406
don't tell anyone that's
exactly what I'm going to do.

71
00:05:36.439 --> 00:05:39.076
&gt;&gt; Brian Holt: Actually,
it's the same, cuz in theory,

72
00:05:39.076 --> 00:05:43.994
you should be able to validate this, but
validation is for people with less time,

73
00:05:43.994 --> 00:05:45.298
or more time rather.

74
00:05:45.298 --> 00:05:49.758
&gt;&gt; Student 1: So to change the name, that
write to to user, or is it [INAUDIBLE]?

75
00:05:49.758 --> 00:05:51.681
&gt;&gt; Brian Holt: Yeah, good point, exactly.

76
00:05:51.681 --> 00:05:58.438
So yeah, so this can actually end up being
the correct thing on the server side.

77
00:05:58.438 --> 00:06:02.758
And then we're just gonna put
a default value here as well, default.

78
00:06:02.758 --> 00:06:06.697
The default value, at least,
is not to and from the same person, so

79
00:06:06.697 --> 00:06:08.855
I'm just gonna make it to number 2.

80
00:06:13.513 --> 00:06:15.562
&gt;&gt; Brian Holt: Okay, that's good for that.

81
00:06:15.562 --> 00:06:22.842
Under that, we'll have another label,

82
00:06:22.842 --> 00:06:28.250
and we'll just put the Note and

83
00:06:28.250 --> 00:06:32.415
textarea name = note.

84
00:06:32.415 --> 00:06:36.889
And cuz this is React, we'll make it
self-closing cuz that makes sense.

85
00:06:36.889 --> 00:06:42.115
And then under that, we'll have
a button to submit the whole thing,

86
00:06:42.115 --> 00:06:43.927
button type= submit.

87
00:06:43.927 --> 00:06:49.842
Actually, don't need that, that's implied,
but let's be explicit and safe.

88
00:06:49.842 --> 00:06:53.745
Okay, just a form, right?

