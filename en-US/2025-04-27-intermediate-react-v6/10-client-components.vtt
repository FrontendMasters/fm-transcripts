WEBVTT

1
00:00:00.000 --> 00:00:03.158
&gt;&gt; Brian Holt: So
we're going to create a source directory.

2
00:00:03.158 --> 00:00:05.372
This is gonna be like a more serious app.

3
00:00:05.372 --> 00:00:10.687
There's gonna be more to it, which is fun,
cuz we've now bothered to set

4
00:00:10.687 --> 00:00:16.177
up the entire server, make an app.jsxfile
here in your source directory,

5
00:00:16.177 --> 00:00:19.551
and we're gonna import
suspense from react.

6
00:00:19.551 --> 00:00:22.212
We talk about suspense and
the complete intro to react, but

7
00:00:22.212 --> 00:00:24.822
it basically allows you to
have boundaries around, hey,

8
00:00:24.822 --> 00:00:28.462
if stuff inside of here isn't finished
loading yet, show this loading screen.

9
00:00:28.462 --> 00:00:31.984
And then allows you to write all of your
React components as if everything was

10
00:00:31.984 --> 00:00:32.982
loaded all the time.

11
00:00:32.982 --> 00:00:38.446
Which makes the authoring of React
components much more simple,

12
00:00:38.446 --> 00:00:40.244
which I appreciate.

13
00:00:40.244 --> 00:00:42.918
Okay, and
we're gonna write two components here,

14
00:00:42.918 --> 00:00:46.888
a server component so that you can see
what it looks like from the server side.

15
00:00:46.888 --> 00:00:49.888
And then we're gonna write
a client component so

16
00:00:49.888 --> 00:00:52.751
you can see how to opt
into client components.

17
00:00:52.751 --> 00:00:58.015
So we're gonna import server
component from ./ server

18
00:00:58.015 --> 00:01:02.849
component, which we'll
write here momentarily.

19
00:01:02.849 --> 00:01:07.245
And we're going to import client

20
00:01:07.245 --> 00:01:12.589
component from ./client component.

21
00:01:12.589 --> 00:01:17.946
Okay, and
then export default function app.

22
00:01:17.946 --> 00:01:20.796
Okay, export default.

23
00:01:20.796 --> 00:01:23.426
Okay, what did I do?

24
00:01:23.426 --> 00:01:24.543
Form that's what it was.

25
00:01:24.543 --> 00:01:27.307
I was like,
why is this not syntaxing correctly?

26
00:01:29.275 --> 00:01:32.391
&gt;&gt; Brian Holt: Okay, I'm gonna put a bunch
of console logs in here, because I think

27
00:01:32.391 --> 00:01:35.615
this actually is, it kind of shows
you where everything is rendering,

28
00:01:35.615 --> 00:01:37.466
which I think ends up being kind of cool.

29
00:01:37.466 --> 00:01:42.961
So console.log rendering
app server component.

30
00:01:47.160 --> 00:01:50.812
&gt;&gt; Brian Holt: Okay, and
then we're just gonna say return.

31
00:01:50.812 --> 00:01:58.712
Suspense, fallback equals
whatever you wanna put here.

32
00:01:58.712 --> 00:02:01.489
Normally you'd have something a bit nicer,
we're just gonna say loading.

33
00:02:05.151 --> 00:02:11.420
&gt;&gt; Brian Holt: Okay, and we're gonna put
h1, we're gonna make this a notes app.

34
00:02:11.420 --> 00:02:16.100
Then we'll have our server component.

35
00:02:16.100 --> 00:02:19.514
We'll have our client component.

36
00:02:19.514 --> 00:02:21.680
And that will be our app.

37
00:02:24.572 --> 00:02:28.543
&gt;&gt; Brian Holt: So I kind of
spoiled you a little bit on this.

38
00:02:28.543 --> 00:02:32.905
But is this a server component,
or is this a client component?

39
00:02:32.905 --> 00:02:35.413
It's a server component.

40
00:02:37.782 --> 00:02:41.619
&gt;&gt; Brian Holt: Again, by default, they
wanna make everything in here a server

41
00:02:41.619 --> 00:02:45.042
component, so
you only opt into client when you need to.

42
00:02:45.042 --> 00:02:46.498
And so, especially,

43
00:02:46.498 --> 00:02:51.413
typically the top level of your app is
always going to be a server component.

44
00:02:51.413 --> 00:02:55.835
I'll show you how to hack
around this a little bit, but

45
00:02:55.835 --> 00:03:02.680
you can't make server components children
of client components, only the other.

46
00:03:02.680 --> 00:03:05.308
So if you wanna have a server component,

47
00:03:05.308 --> 00:03:08.646
it has to be the child of
another server component.

48
00:03:08.646 --> 00:03:12.713
So by virtue of that, if your top
level component is a client component,

49
00:03:12.713 --> 00:03:15.995
that means all of its children
will be client components.

50
00:03:15.995 --> 00:03:19.543
&gt;&gt; Speaker 2: That's just because of
the dependency inheritance of you would be

51
00:03:19.543 --> 00:03:21.898
waiting for the client component anyways?

52
00:03:21.898 --> 00:03:24.556
&gt;&gt; Brian Holt: Yeah, well, server
components are always gonna run first,

53
00:03:24.556 --> 00:03:27.022
yeah, so it's gonna run
the entire tree first, right?

54
00:03:27.022 --> 00:03:29.722
And that you can't opt out of that cycle.

55
00:03:29.722 --> 00:03:34.390
So let's do our client component,
I think that makes sense.

56
00:03:34.390 --> 00:03:35.650
Let's do that one first.

57
00:03:35.650 --> 00:03:38.487
So just the big thing to
file in your brain here is,

58
00:03:38.487 --> 00:03:40.389
hooks don't work on the server.

59
00:03:40.389 --> 00:03:43.568
If you want any sort of hook,

60
00:03:43.568 --> 00:03:48.077
you need to opt into a client component.

61
00:03:48.077 --> 00:03:53.023
And that's the part where I was saying
it's a departure from writing normal

62
00:03:53.023 --> 00:03:58.289
JavaScript because or normal react
because normally you're just like, cool.

63
00:03:58.289 --> 00:04:02.473
I need to use state right now, use state,
and you have to have a frame of mind

64
00:04:02.473 --> 00:04:06.080
of like, wait, do I have children
that are server components?

65
00:04:06.080 --> 00:04:11.747
Do I need, you have to start having these
concerns around, where am I in my app?

66
00:04:13.125 --> 00:04:14.272
&gt;&gt; Brian Holt: And
you didn't have to before.

67
00:04:17.015 --> 00:04:24.200
&gt;&gt; Brian Holt: Clientcomponent.jsx, so,
how do we make it a client component?

68
00:04:24.200 --> 00:04:26.282
What do you do?

69
00:04:26.282 --> 00:04:30.464
This is rhetorical,
cuz I have not told you [LAUGH].

70
00:04:30.464 --> 00:04:32.760
You put this, what do they call them?

71
00:04:32.760 --> 00:04:33.947
Directives?

72
00:04:33.947 --> 00:04:37.267
Forgot, pragmas?

73
00:04:39.790 --> 00:04:42.919
&gt;&gt; Brian Holt: But this is what you do,
you put at the very top,

74
00:04:42.919 --> 00:04:46.532
the first thing must be a string and
it says use client.

75
00:04:48.415 --> 00:04:50.609
&gt;&gt; Brian Holt: Right there playing
off of like use strict here.

76
00:04:50.609 --> 00:04:53.043
Do you remember writing
use strict everywhere?

77
00:04:53.043 --> 00:04:54.548
If you don't again,

78
00:04:54.548 --> 00:04:59.486
bless you, we used to have to do that
back in my day, back in ES5 days.

79
00:04:59.486 --> 00:05:02.649
We had to tell we're in strict mode,
or we're not in strict mode,

80
00:05:02.649 --> 00:05:05.259
they kind of use that same
pattern here for use client.

81
00:05:05.259 --> 00:05:09.469
Now, you might ask yourself,
why didn't we put use server here?

82
00:05:09.469 --> 00:05:14.020
Use, it's just assumed to be server,
so you don't have to put that.

83
00:05:14.020 --> 00:05:15.126
You can put it there, but

84
00:05:15.126 --> 00:05:18.143
it's the same as putting any string
at the beginning of your thing.

85
00:05:18.143 --> 00:05:22.608
It just doesn't make any sense to so
UseClient, that's what this is for.

86
00:05:22.608 --> 00:05:28.537
We will use useServer later, but
it's not for the same thing.

87
00:05:28.537 --> 00:05:35.195
Okay, so now that we've done this, this
is just a normal React component here.

88
00:05:35.195 --> 00:05:40.211
So import useState from React,

89
00:05:40.211 --> 00:05:47.446
export, default,
&gt;&gt; Brian Holt: Function,

90
00:05:47.446 --> 00:05:54.444
ClientComponent,
&gt;&gt; Brian Holt: Console.log.

91
00:05:57.534 --> 00:06:03.533
&gt;&gt; Brian Holt: Rendering, client
component, God, I was redundant, wasn't I?

92
00:06:03.533 --> 00:06:08.033
Rendering, client component,
client component.

93
00:06:08.033 --> 00:06:14.491
It sounds more dumb when you have to say
it out loud, but that's what my notes say.

94
00:06:14.491 --> 00:06:20.278
And yeah, again,
we're just gonna say const,

95
00:06:20.278 --> 00:06:25.076
counter, set counter, enter equals,

96
00:06:25.076 --> 00:06:28.619
use state zero, and return.

97
00:06:28.619 --> 00:06:32.687
I have this using this again,
this doodle.css, and so,

98
00:06:32.687 --> 00:06:35.268
they use this field set everywhere.

99
00:06:35.268 --> 00:06:41.069
So that's why we're gonna use that,
legend.

100
00:06:41.069 --> 00:06:45.726
Client component, P, and

101
00:06:45.726 --> 00:06:50.383
then we'll have counter,

102
00:06:50.383 --> 00:06:55.849
counter, okay and button, and

103
00:06:55.849 --> 00:07:00.921
we'll have an on click here.

104
00:07:00.921 --> 00:07:07.181
This is going to set
counter of counter +1.

105
00:07:09.719 --> 00:07:11.579
&gt;&gt; Brian Holt: And
then we'll have increment, or

106
00:07:11.579 --> 00:07:13.380
whatever you wanna call it there.

107
00:07:13.380 --> 00:07:16.807
So again,
very the normal React component here,

108
00:07:16.807 --> 00:07:21.875
just to demonstrate that, like all
the interactivity of it still works.

109
00:07:21.875 --> 00:07:25.260
Yeah, directives,
that's what they call these.

110
00:07:25.260 --> 00:07:27.967
And yeah, useServer is assumed,
so you don't need to put it.

