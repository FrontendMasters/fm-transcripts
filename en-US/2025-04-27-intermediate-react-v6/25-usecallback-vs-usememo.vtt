WEBVTT

1
00:00:00.097 --> 00:00:03.944
&gt;&gt; Brian Holt: One thing you might
wonder is how are these different?

2
00:00:03.944 --> 00:00:07.360
They look really similar, don't they?

3
00:00:07.360 --> 00:00:11.708
They are intact, I have heard one of the
React Core developers say that they regret

4
00:00:11.708 --> 00:00:12.906
making useCallback,

5
00:00:12.906 --> 00:00:16.384
and they wish they would have just
done everything with useMemo.

6
00:00:16.384 --> 00:00:23.481
The reason why they, so
let's make two versions of this.

7
00:00:25.824 --> 00:00:29.908
&gt;&gt; Brian Holt: If I made this useMemo,
it would just look like this.

8
00:00:33.308 --> 00:00:38.954
&gt;&gt; Brian Holt: These two lines,
line 20 and line 21, are the same thing.

9
00:00:40.586 --> 00:00:42.763
&gt;&gt; Brian Holt: Thought that this looked
weird cuz objectively it does It's

10
00:00:42.763 --> 00:00:44.094
a function that returns a function.

11
00:00:44.094 --> 00:00:49.617
Literally, if you look in the code base,
use callback is implemented as this.

12
00:00:50.715 --> 00:00:53.496
&gt;&gt; Brian Holt: And I think this
just makes this easier to read, so

13
00:00:53.496 --> 00:00:55.234
that's why it is there.

14
00:00:55.234 --> 00:01:00.003
I guess I do have a little section
here that just, let's me rant for

15
00:01:00.003 --> 00:01:03.932
a little bit, so
we should do that cuz I like that part.

16
00:01:03.932 --> 00:01:09.082
So we fixed it, we did it useMemo
versus you called back this

17
00:01:09.082 --> 00:01:14.335
is exactly what I just showed you there,
so useMemo is just or

18
00:01:14.335 --> 00:01:18.251
use callback is implemented using useMemo.

19
00:01:18.251 --> 00:01:20.097
What about strings and numbers?

20
00:01:20.097 --> 00:01:23.737
So dont need to use memo on those because,

21
00:01:23.737 --> 00:01:29.463
I'll just bring this up again,
x is triple equaled to x, right?

22
00:01:29.463 --> 00:01:34.890
Those are measured by value, not by
pointer, for anyone that, I don't know,

23
00:01:34.890 --> 00:01:39.349
spent too much time in a CS class,
so you don't useMemo on those.

24
00:01:39.349 --> 00:01:43.239
Those you can just pass in for
numbers, and for maybe not floats,

25
00:01:43.239 --> 00:01:46.369
you might have some issues with floats,
who knows?

26
00:01:46.369 --> 00:01:49.054
I guess that's kinda the point,
but strings,

27
00:01:49.054 --> 00:01:52.955
you'll have no problem with that
It's just objects and functions.

28
00:01:52.955 --> 00:01:57.334
Use these tools sparingly
don't go hog wild with them,

29
00:01:57.334 --> 00:02:02.927
because what's problematic with this
is now that we have memo on here,

30
00:02:02.927 --> 00:02:07.697
sometimes we might expect it to re render,
and it doesn't.

31
00:02:07.697 --> 00:02:10.946
And you're like,
why is this not re rendering right?

32
00:02:10.946 --> 00:02:14.481
And you get these weird bugs where you
start putting state and moving it around,

33
00:02:14.481 --> 00:02:17.804
and you don't realize that one of
the components that at the upper level was

34
00:02:17.804 --> 00:02:20.464
memo, and therefore it's not
rendering anything on bug.

35
00:02:20.464 --> 00:02:23.213
Beneath it again, stuff like that, right?

36
00:02:23.213 --> 00:02:27.515
You end up with this weird class of bugs
that you wouldn't otherwise have that's

37
00:02:27.515 --> 00:02:32.080
why I'm saying use these really sparingly
because generally reactors fast enough.

38
00:02:32.080 --> 00:02:37.863
&gt;&gt; Learners: What if you had complex JSON
structure that your system was polling for

39
00:02:37.863 --> 00:02:42.764
and you're passing it down to
render a tree of components,

40
00:02:42.764 --> 00:02:45.918
and most of the time nothing changes.

41
00:02:45.918 --> 00:02:49.051
Sometimes something does, and
you want things to react.

42
00:02:49.051 --> 00:02:54.293
Could you use memo and use,
a key of the stringified JSON?

43
00:02:54.293 --> 00:02:58.122
When the string KSON changes,

44
00:02:58.122 --> 00:03:03.136
then the block of JSON just passed down?

45
00:03:03.136 --> 00:03:06.920
&gt;&gt; Brian Holt: The only concern I
would have about that is, in theory,

46
00:03:06.920 --> 00:03:12.089
something that you JSON.stringify
should always render out the same way.

47
00:03:12.089 --> 00:03:16.556
I don't think it's actually
required behavior of the spec.

48
00:03:16.556 --> 00:03:21.121
But I think functionally most browsers
observe it would be a concern, right?

49
00:03:21.121 --> 00:03:26.260
That something might not happen that way,
that it's not deterministic.

50
00:03:26.260 --> 00:03:30.221
Functionally, that idea kinda works for
me, but

51
00:03:30.221 --> 00:03:35.142
I would just try and be precise
with where I would use the memo.

52
00:03:35.142 --> 00:03:39.314
Rather than just saying, I'm just
gonna memorize this whole damn tree,

53
00:03:39.314 --> 00:03:43.893
I would say, I'm worried about these
components therefore I will memorize just

54
00:03:43.893 --> 00:03:46.270
these ones that would be my disposition.

55
00:03:46.270 --> 00:03:50.506
And actually, React Compiler is
really gonna save you here so

56
00:03:50.506 --> 00:03:53.449
this is what I was just
about to talk about.

57
00:03:53.449 --> 00:03:57.401
I have an intro lesson on React Compiler,
so if you haven't taken intro,

58
00:03:57.401 --> 00:03:59.716
just go check out even
just this part of it.

59
00:03:59.716 --> 00:04:04.313
React Compiler actually does is it goes
and find it, runs your code, and so,

60
00:04:04.313 --> 00:04:08.793
I don't think this can ever change,
therefore I will memorize it for you.

61
00:04:08.793 --> 00:04:10.397
I guess yours will would change, right?

62
00:04:10.397 --> 00:04:14.767
So maybe this compiler won't save you
here, but it'll save a bunch of us here

63
00:04:14.767 --> 00:04:19.001
that like what all React compiler does
is it goes through as it sees a bunch of

64
00:04:19.001 --> 00:04:23.058
functions that can't or a bunch of
components that will never change.

65
00:04:23.058 --> 00:04:27.694
And then it'll memoize them It'll
basically memoize them for you.

66
00:04:27.694 --> 00:04:32.211
I love that when tools can do this for you
because then if I update my code where it

67
00:04:32.211 --> 00:04:36.607
could change, React Compiler will no
longer do that for me, which is cool.

68
00:04:36.607 --> 00:04:38.733
&gt;&gt; Learners: Do you put that in
a Git hook or a pipeline, or

69
00:04:38.733 --> 00:04:40.701
where would you run the React Compiler?

70
00:04:40.701 --> 00:04:43.984
&gt;&gt; Brian Holt: It's a Babel plugin.

71
00:04:43.984 --> 00:04:44.934
&gt;&gt; Learners: Okay, I got you [INAUDIBLE].

72
00:04:44.934 --> 00:04:50.181
&gt;&gt; Brian Holt: Yeah,
so it's at build time.

73
00:04:50.181 --> 00:04:54.383
But yeah, for yours, I would just
be precise about which things.

74
00:04:54.383 --> 00:04:59.671
Again, rerendering for the sake of
rerendering is generally not a problem,

75
00:04:59.671 --> 00:05:03.671
so i will just attack that will
actually become a problem.

76
00:05:03.671 --> 00:05:06.825
[INAUDIBLE] actually dodge that
question that you're asking.

77
00:05:06.825 --> 00:05:10.945
&gt;&gt; Learners: It's a good point, they are
branches in that that could be memorized

78
00:05:10.945 --> 00:05:13.375
separately from the entire structure.

79
00:05:13.375 --> 00:05:16.719
&gt;&gt; Brian Holt: Yeah,
I mean the whole thing never changes, yet

80
00:05:16.719 --> 00:05:19.257
the parent component changes a lot.

81
00:05:19.257 --> 00:05:21.838
Cuz that would be the only time that
you'd run into an issue here, right?

82
00:05:21.838 --> 00:05:24.313
That you have a clock
component at the parent level,

83
00:05:24.313 --> 00:05:27.758
cuz if the parent never re-renders,
then it doesn't matter, right?

84
00:05:27.758 --> 00:05:30.014
Cuz it's never gonna re-render anyway,
right?

85
00:05:30.014 --> 00:05:35.372
So it only matters when the parent
re-renders a lot too, yeah.

86
00:05:35.372 --> 00:05:40.123
Cool, don't just use memo all
the time have I said this enough?

87
00:05:40.123 --> 00:05:41.448
Should I say it again?

88
00:05:41.448 --> 00:05:44.862
Don't just use memo all the time,
please okay,

89
00:05:44.862 --> 00:05:48.460
that's I have written it
in there like four times.

90
00:05:48.460 --> 00:05:51.858
Can you tell that this has
been a problem for me?

91
00:05:51.858 --> 00:05:55.007
And then give React Compiler
a shot It is unstable, and

92
00:05:55.007 --> 00:05:59.334
I've actually heard of some people
actually now having problems with it.

93
00:05:59.334 --> 00:06:04.272
Since last time I taught this course,
so be judicious with it,

94
00:06:04.272 --> 00:06:08.650
but that's what it will run memo for
you on places that it

95
00:06:08.650 --> 00:06:13.328
observes that it can't rerender,
okay yeah, question.

96
00:06:13.328 --> 00:06:16.031
&gt;&gt; Learners: Have you used React Scan?

97
00:06:16.031 --> 00:06:20.375
&gt;&gt; Brian Holt: React Scan that's
not even a familiar term to me so,

98
00:06:20.375 --> 00:06:22.364
no, I have not used it.

99
00:06:22.364 --> 00:06:28.880
&gt;&gt; Learners: It's a plug in or whatever
to debug React performance issues.

100
00:06:28.880 --> 00:06:34.041
&gt;&gt; Brian Holt: Okay, yeah, I mean, do I
have it on here installed at the moment?

101
00:06:36.586 --> 00:06:37.386
&gt;&gt; Brian Holt: Yeah, so

102
00:06:37.386 --> 00:06:43.343
the profiler will do some of this thing
as well can I just use it on here?

103
00:06:43.343 --> 00:06:49.438
&gt;&gt; Brian Holt: Profiler, and then I
click record, and I refresh the page.

104
00:06:52.948 --> 00:06:58.191
&gt;&gt; Brian Holt: Maybe,
&gt;&gt; Brian Holt: And stop,

105
00:06:58.191 --> 00:07:02.883
okay so this has a flame route and a bunch
of other stuff, and I can't remember off

106
00:07:02.883 --> 00:07:07.445
the top my head, there's a way to do this
and so you it does it on boot up as well.

107
00:07:10.518 --> 00:07:13.586
&gt;&gt; Brian Holt: Theme,
Auto, Compact, anyway yeah,

108
00:07:13.586 --> 00:07:16.757
you can highlight stuff that rerenders.

109
00:07:16.757 --> 00:07:21.368
Pretty cool stuff, so
definitely worth checking out

110
00:07:21.368 --> 00:07:26.286
this is There's some built in
stuff to the official React

111
00:07:26.286 --> 00:07:30.954
tools that'll help you
with those kind of things.

112
00:07:30.954 --> 00:07:35.275
And you can see here it does tell you that
it's memoized as well, which I thought was

113
00:07:35.275 --> 00:07:39.319
pretty cool so you can identify hopefully
at a glance things that are broken.

114
00:07:39.319 --> 00:07:43.315
It'll also have little magic sparks
if it was done by React Compilers,

115
00:07:43.315 --> 00:07:45.588
that it was done automatically for you.

116
00:07:45.588 --> 00:07:50.303
This will solve almost all of
your React performance problems,

117
00:07:50.303 --> 00:07:56.152
if React has gotten slow for you in some
place, and then these don't solve it for

118
00:07:56.152 --> 00:08:00.359
you, probably just have to
get out of using a framework.

119
00:08:00.359 --> 00:08:05.576
Cuz you're in something too so sensitive
that any sort of overhead will cause

120
00:08:05.576 --> 00:08:11.446
problems good example that would be like
3D graphics or something like that, right?

121
00:08:11.446 --> 00:08:15.400
Or WebAssembly,
you'll start leaning on things like that.

122
00:08:17.268 --> 00:08:19.715
&gt;&gt; Brian Holt: Which is to say
that never problems that I faced

