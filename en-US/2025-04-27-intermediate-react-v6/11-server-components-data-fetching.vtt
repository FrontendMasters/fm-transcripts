WEBVTT

1
00:00:00.000 --> 00:00:02.767
&gt;&gt; Brian Holt: Okay, so server component.

2
00:00:02.767 --> 00:00:07.899
This is the more interesting
part of this course,

3
00:00:07.899 --> 00:00:10.594
ServerComponent.jsx.

4
00:00:10.594 --> 00:00:14.950
Again, assumed to be a server component,
so no use server is necessary.

5
00:00:14.950 --> 00:00:20.414
And now we can do something like
import(AsyncDatabase) from sqlite3.

6
00:00:20.414 --> 00:00:23.513
Cuz this is all running on the server,
right, and so

7
00:00:23.513 --> 00:00:27.540
we can read files from local disk,
which is what we're about to do.

8
00:00:27.540 --> 00:00:31.388
We can import path from node:path.

9
00:00:31.388 --> 00:00:38.089
Again, can't really do this, path
doesn't work in client-side components,

10
00:00:38.089 --> 00:00:42.277
but because we're on serverland,
we can do that.

11
00:00:42.277 --> 00:00:47.575
Again, this assumes
you're logged in as id 1,

12
00:00:47.575 --> 00:00:51.207
cuz we're not doing auth today.

13
00:00:53.618 --> 00:01:01.230
&gt;&gt; Brian Holt: Export default
async function MyNotes.

14
00:01:01.230 --> 00:01:05.529
Another very nice part about server
components is they get to be async.

15
00:01:05.529 --> 00:01:09.444
So we can async await directly
in our function bodies,

16
00:01:09.444 --> 00:01:11.496
which is very nice, right?

17
00:01:11.496 --> 00:01:16.045
You can't do that with
client-side components.

18
00:01:16.045 --> 00:01:21.417
So on one hand, very nice that we can do
a way to directly in our function body.

19
00:01:21.417 --> 00:01:26.189
On the other hand, it's cognitive burden
to know that this is a server component,

20
00:01:26.189 --> 00:01:28.177
therefore I can async await here.

21
00:01:28.177 --> 00:01:32.417
But on this one, I can't for
other reasons, right?

22
00:01:32.417 --> 00:01:37.669
It's just another level of
complexity onto your app here.

23
00:01:37.669 --> 00:01:41.872
Some people are very okay with that, and
some people are like, this feels harder,

24
00:01:41.872 --> 00:01:43.448
cuz objectively, it just is.

25
00:01:43.448 --> 00:01:47.074
We'll have our console log here,

26
00:01:47.074 --> 00:01:53.711
console.log("rendering MyNotes
server component").

27
00:01:57.270 --> 00:02:01.629
&gt;&gt; Brian Holt: And then I'm just gonna
write an async function right her,

28
00:02:01.629 --> 00:02:02.683
fetchNotes.

29
00:02:07.221 --> 00:02:10.120
&gt;&gt; Brian Holt: Some of the rules
kinda go out the window here.

30
00:02:10.120 --> 00:02:13.458
This is just gonna run once,
and it runs on your server.

31
00:02:13.458 --> 00:02:17.054
So worrying about churning too much
stuff and introducing stuff into

32
00:02:17.054 --> 00:02:21.217
the hot path doesn't make as much sense
cuz it doesn't matter as much anymore.

33
00:02:21.217 --> 00:02:23.317
This isn't gonna run a bunch
of times on the client,

34
00:02:23.317 --> 00:02:24.814
it's gonna run once on your server.

35
00:02:24.814 --> 00:02:27.875
So you can be a little
bit more inefficient,

36
00:02:27.875 --> 00:02:31.198
I suppose,
is guess what I'm trying to get at.

37
00:02:31.198 --> 00:02:35.645
Still that's running your server, that
still incurs server costs, but this won't.

38
00:02:35.645 --> 00:02:38.146
The amount of memory
this is gonna burn and

39
00:02:38.146 --> 00:02:42.577
churn just by instantiating the function
directly in the function body,

40
00:02:42.577 --> 00:02:46.944
as opposed to being outside of it,
nobody cares, right, negligible.

41
00:02:46.944 --> 00:02:54.738
Console.log("running server
function fetchNotes").

42
00:02:59.746 --> 00:03:06.377
&gt;&gt; Brian Holt: Okay,
const_dbPath = path.resolve.

43
00:03:06.377 --> 00:03:08.971
We're gonna put dirname.

44
00:03:08.971 --> 00:03:11.251
Do I have to define dirname?

45
00:03:11.251 --> 00:03:14.501
I probably do.

46
00:03:14.501 --> 00:03:18.537
I don't have it in my notes, so YOLO,

47
00:03:18.537 --> 00:03:23.973
we'll see if it works, ../../notes.db.

48
00:03:23.973 --> 00:03:27.013
Is that correct or is it just ../?

49
00:03:27.013 --> 00:03:27.845
&gt;&gt; Speaker 2: You got it right.

50
00:03:27.845 --> 00:03:30.052
&gt;&gt; Speaker 3: It matches what you have.

51
00:03:31.199 --> 00:03:36.100
&gt;&gt; Brian Holt: I don't know if I
trust previous Brian, dot shifty.

52
00:03:36.100 --> 00:03:38.582
= await

53
00:03:38.582 --> 00:03:49.576
AsyncDatabase.open(dbPath).

54
00:03:49.576 --> 00:03:54.693
So if you're not super familiar
with SQLite, one, there's a course

55
00:03:54.693 --> 00:04:00.868
on Frontend Masters from a very handsome
gentleman that teaches you SQLite as well.

56
00:04:00.868 --> 00:04:03.615
So that's available too, but
it's just a file, right?

57
00:04:03.615 --> 00:04:08.031
So it's not actually connecting out
to a real database, it's just a file,

58
00:04:08.031 --> 00:04:11.491
which is this notes.db file,
which is why it's opening.

59
00:04:11.491 --> 00:04:12.808
And then we're just gonna run a query.

60
00:04:12.808 --> 00:04:19.378
So const from = await db.all.

61
00:04:19.378 --> 00:04:24.821
And we're just gonna write

62
00:04:24.821 --> 00:04:30.263
a really quick query here,

63
00:04:30.263 --> 00:04:34.285
SELECT n.id as id,

64
00:04:34.285 --> 00:04:39.492
n.note as note, f.name

65
00:04:39.492 --> 00:04:44.462
as from user, t.name,

66
00:04:44.462 --> 00:04:49.431
let's see where we are,

67
00:04:49.431 --> 00:04:52.290
as to_user.

68
00:04:52.290 --> 00:04:59.684
FROM notes n, you can copy this query
as well, this is not a SQL course.

69
00:04:59.684 --> 00:05:05.110
JOIN users f on f.id

70
00:05:05.110 --> 00:05:10.855
= n.frrom_user,

71
00:05:10.855 --> 00:05:17.238
and JOIN users t on t.id

72
00:05:17.238 --> 00:05:22.033
= n.to_user.

73
00:05:25.620 --> 00:05:33.114
&gt;&gt; Brian Holt: Where from_user =?

74
00:05:33.114 --> 00:05:38.134
I mean, you can just put 1 there if
you want to, but in the name of some

75
00:05:38.134 --> 00:05:43.085
discipline, we'll just put 1 there,
parameterize it, right?

76
00:05:43.085 --> 00:05:47.577
And then sometime later, if you feel like
changing this to be a bit more robust,

77
00:05:47.577 --> 00:05:51.953
you can just replace this with whatever
user id you wanna select for, right?

78
00:05:51.953 --> 00:05:54.519
So we have a notes database.

79
00:05:54.519 --> 00:05:59.134
This is just gonna go grab all of the
notes, and it's going to then join that to

80
00:05:59.134 --> 00:06:04.035
the from_users, or to the users table
twice, once for the from_user, once for

81
00:06:04.035 --> 00:06:07.392
the to_user, so
that we see usernames instead of IDs.

82
00:06:07.392 --> 00:06:08.534
That's all this is doing.

83
00:06:11.335 --> 00:06:15.565
&gt;&gt; Brian Holt: Okay, and
then this is from, so

84
00:06:15.565 --> 00:06:20.126
we're going to return just from.

85
00:06:23.028 --> 00:06:26.019
&gt;&gt; Brian Holt: So this is just gonna
be everything from user 1, right?

86
00:06:31.658 --> 00:06:35.678
&gt;&gt; Brian Holt: Okay, so there is that.

87
00:06:35.678 --> 00:06:41.245
And then we're gonna say here,
const notes =

88
00:06:41.245 --> 00:06:47.117
await fetchNotes, and
we're going to return.

89
00:06:52.511 --> 00:06:53.628
&gt;&gt; Brian Holt: Something very similar.

90
00:06:53.628 --> 00:06:56.444
Again, feel free to copy and paste this,

91
00:06:56.444 --> 00:07:01.914
it's kind of a long component to nothing
in here is gonna be super interesting for

92
00:07:01.914 --> 00:07:05.142
you from a perspective
of learning more React.

93
00:07:05.142 --> 00:07:10.542
Other than just like sometimes,
the practice is good.

94
00:07:10.542 --> 00:07:14.229
But we're just gonna turn
everything into a table here.

95
00:07:14.229 --> 00:07:21.539
Legend div table, and then we have to
have a tea head, a thead, if you will.

96
00:07:21.539 --> 00:07:24.815
Tr, table row, th,

97
00:07:24.815 --> 00:07:29.367
from whatever you wanna say.

98
00:07:33.192 --> 00:07:39.627
&gt;&gt; Brian Holt: To and a th for Note,

99
00:07:39.627 --> 00:07:44.933
don't do that.

100
00:07:44.933 --> 00:07:49.146
Okay, under the thead,
we need the tobody, as they say.

101
00:07:51.682 --> 00:07:55.747
&gt;&gt; Brian Holt: And
we're gonna say, notes.from.map.

102
00:08:00.201 --> 00:08:05.342
&gt;&gt; Brian Holt: I'm gonna say id, note,

103
00:08:05.342 --> 00:08:10.494
from_user, to_user.

104
00:08:10.494 --> 00:08:13.452
Okay, and
then this needs to be outside of that one.

105
00:08:17.236 --> 00:08:20.286
&gt;&gt; Brian Holt: And we're just gonna
make a row for each one of them, right?

106
00:08:20.286 --> 00:08:25.703
So tr key=id.

107
00:08:25.703 --> 00:08:33.309
And we'll have some definitions here,

108
00:08:33.309 --> 00:08:39.131
td from_user, td to_user.

109
00:08:39.131 --> 00:08:42.697
This is a place where I definitely would
have used AI, just say, generate a table

110
00:08:42.697 --> 00:08:45.851
for me that has these things for
me cuz this is tedious to write, right?

111
00:08:45.851 --> 00:08:48.675
But very understandable for
an LLM to be able to generate.

112
00:08:50.763 --> 00:08:51.704
&gt;&gt; Brian Holt: Note.

113
00:08:55.461 --> 00:08:59.557
&gt;&gt; Brian Holt: Okay, so
it's just a table showing all of

114
00:08:59.557 --> 00:09:03.546
the notes that exist in the table there.

115
00:09:03.546 --> 00:09:06.660
But let's talk, what's cool here.

116
00:09:06.660 --> 00:09:12.831
This is a React component, and
we're writing raw SQL directly in it.

117
00:09:12.831 --> 00:09:16.527
There's a part of me from that's been
writing React salon that's uncomfortable

118
00:09:16.527 --> 00:09:17.444
with this, right?

119
00:09:17.444 --> 00:09:20.999
I remember when they showed the demo
on stage of, hey, you can do this,

120
00:09:20.999 --> 00:09:24.499
you can write SQL directly on your
components, and there was revolt,

121
00:09:24.499 --> 00:09:26.308
people were upset by this, right?

122
00:09:26.308 --> 00:09:28.933
Like, no, that doesn't go there, right?

123
00:09:28.933 --> 00:09:31.173
But it kinda does, right?

124
00:09:31.173 --> 00:09:33.200
It's nice that everything all lives here.

125
00:09:33.200 --> 00:09:35.367
This is selecting the data that it needs,
and

126
00:09:35.367 --> 00:09:37.431
this is displaying the data that it needs.

127
00:09:37.431 --> 00:09:41.556
And I don't need two routes,
it's all just kinda shoved together.

128
00:09:41.556 --> 00:09:43.046
It's kinda nice, right?

129
00:09:43.046 --> 00:09:45.177
It kinda makes sense.

130
00:09:45.177 --> 00:09:48.718
The original premise of React is
that we took all of the concerns for

131
00:09:48.718 --> 00:09:52.829
single components, we just shoved them
all together into one small, nice,

132
00:09:52.829 --> 00:09:53.793
little package.

133
00:09:53.793 --> 00:09:55.538
And this is just one step further in that,
right?

134
00:09:55.538 --> 00:09:59.473
We're taking now server concerns and
also shoving that into that so

135
00:09:59.473 --> 00:10:02.731
you have these components
that do everything, right?

136
00:10:02.731 --> 00:10:07.584
They do everything for these very small
little components, which is nice.

137
00:10:07.584 --> 00:10:15.116
&gt;&gt; Speaker 3: Basically like an exploit.\,
somebody put HTML into this database,

138
00:10:15.116 --> 00:10:19.066
you pull it out, you try to render it,

139
00:10:19.066 --> 00:10:23.887
would it actually render the HTML or
a script?

140
00:10:23.887 --> 00:10:25.368
&gt;&gt; Brian Holt: I see the question,

141
00:10:25.368 --> 00:10:29.301
is there a cross-site
scripting in here somewhere?

142
00:10:29.301 --> 00:10:31.058
Inevitably, the answer to
that question has to be yes.

143
00:10:31.058 --> 00:10:35.594
Right, there is some way
that that could be done.

144
00:10:35.594 --> 00:10:39.082
I'm gonna say that you have several
layers of failure to get there.

145
00:10:39.082 --> 00:10:45.587
How did someone get raw HTML into your
database from user-generated content?

146
00:10:45.587 --> 00:10:49.648
If you are saving user-generated
content into your database,

147
00:10:49.648 --> 00:10:53.343
it needs to be escaped before
it goes in there, hard stop.

148
00:10:53.343 --> 00:10:57.145
And so if they're getting
real HTML into your database,

149
00:10:57.145 --> 00:10:59.290
you already failed number one.

150
00:10:59.290 --> 00:11:00.186
And then two,

151
00:11:00.186 --> 00:11:04.907
I guess you could escape it again coming
out or do something of that nature.

152
00:11:04.907 --> 00:11:08.503
But again, it feels like it should have
been escaped when it got in there,

153
00:11:08.503 --> 00:11:09.900
not the other place around.

154
00:11:09.900 --> 00:11:12.862
I guess you can say this note is UGC,
right, and

155
00:11:12.862 --> 00:11:15.021
I'm not doing anything about it.

156
00:11:15.021 --> 00:11:17.123
React does some of this for
you actually automatically.

157
00:11:17.123 --> 00:11:21.427
If you actually wanna set it as
real HTML markup, you have to do,

158
00:11:21.427 --> 00:11:22.956
do you remember this?

159
00:11:22.956 --> 00:11:31.525
__dangerouslySetInnerHTML, I
think is what it is, right?

160
00:11:31.525 --> 00:11:37.065
And then you give it the td or
something like that.

161
00:11:37.065 --> 00:11:41.945
That's the only way that React will
voluntarily actually turn your

162
00:11:41.945 --> 00:11:43.496
string into market.

163
00:11:43.496 --> 00:11:50.178
Don't, [LAUGH] I think it's my plea for
you, please don't do that.

164
00:11:50.178 --> 00:11:55.698
So not a big concern on my part.

165
00:11:55.698 --> 00:11:59.189
Then again, let's test it,

166
00:11:59.189 --> 00:12:04.644
I don't do anything in
here to deal with that.

167
00:12:04.644 --> 00:12:06.596
But good question.

168
00:12:06.596 --> 00:12:08.068
&gt;&gt; Speaker 3: Are there
any gotchas with Orms or

169
00:12:08.068 --> 00:12:10.072
using other database technologies in here?

170
00:12:10.072 --> 00:12:11.939
Is it just the same sort
of patterns that usual?

171
00:12:11.939 --> 00:12:16.049
&gt;&gt; Brian Holt: No gotchas here,
Drizzle will work great here, Prisma.

172
00:12:16.049 --> 00:12:18.843
Neon's kinda neat sometimes, right?

173
00:12:18.843 --> 00:12:22.762
All that stuff would work just great here.

174
00:12:22.762 --> 00:12:26.433
You can essentially treat
this like an API route.

175
00:12:26.433 --> 00:12:29.304
Whatever you would do with an API route,
you can go ahead and

176
00:12:29.304 --> 00:12:33.334
just kinda treat this as an API route,
because functionally, that's what it is.

177
00:12:33.334 --> 00:12:37.097
We now need our client.jsx,
which we did before.

178
00:12:37.097 --> 00:12:41.256
This is like the part that
only renders in the browser.

179
00:12:41.256 --> 00:12:43.081
Let's go ahead and do that very quick.

180
00:12:43.081 --> 00:12:45.676
We're gonna do an import createRoot.

181
00:12:45.676 --> 00:12:50.572
We're not doing RSC's and
server side rendering together.

182
00:12:50.572 --> 00:12:54.605
Like I said, it is possible, but

183
00:12:54.605 --> 00:12:58.493
we're not gonna do that today,

184
00:12:58.493 --> 00:13:03.256
/client, import createFromFetch.

185
00:13:03.256 --> 00:13:07.607
This is kind of an interesting one,

186
00:13:07.607 --> 00:13:14.864
this comes from
react-server-dom-webpack/client.

187
00:13:14.864 --> 00:13:19.794
So this is the part where basically it's
going to receive markup from the server,

188
00:13:19.794 --> 00:13:23.662
and then it's going to turn that
markup into React components.

189
00:13:23.662 --> 00:13:28.654
That's what this createFromFetch
is going to do for us.

190
00:13:28.654 --> 00:13:31.207
And then we need our CSS as well, import.

191
00:13:31.207 --> 00:13:37.348
Just do it like this,
doodle.css/doodle.css,

192
00:13:37.348 --> 00:13:41.122
this is the name of the package.

193
00:13:41.122 --> 00:13:43.968
This is the name of the file,
they end up being the same thing.

194
00:13:47.008 --> 00:13:55.491
&gt;&gt; Brian Holt: Okay,
console.log("fetching flight response"),

195
00:13:55.491 --> 00:13:59.906
const fetchPromise = fetch.

196
00:13:59.906 --> 00:14:04.255
And then we're gonna fetch from
this endpoint called react-flight.

197
00:14:07.407 --> 00:14:16.684
&gt;&gt; Brian Holt: Const root =
createRoot document.getElementById,

198
00:14:16.684 --> 00:14:21.625
and we're going to get root.

199
00:14:21.625 --> 00:14:28.123
Const p, you can call whatever you want,
but this is just a promise,

200
00:14:28.123 --> 00:14:34.301
createFromFetch(fetchPromise);
fetchPromise like that.

201
00:14:39.045 --> 00:14:42.666
&gt;&gt; Brian Holt: And then if you wanna
see this, I thought that was kind of

202
00:14:42.666 --> 00:14:47.773
interesting, you can see the rendering
root and you can see the promise here.

203
00:14:47.773 --> 00:14:49.790
And then root.render, and

204
00:14:49.790 --> 00:14:54.085
this is the part that kinda blew
me away when I saw it, (p).

205
00:14:54.085 --> 00:14:57.843
So this root.render now knows
what to do with the promise.

206
00:14:57.843 --> 00:15:01.222
So it's gonna go out, it's gonna get
the markup that it needs from the server.

207
00:15:01.222 --> 00:15:04.523
And the render's gonna wait on
that promise to be done, and

208
00:15:04.523 --> 00:15:06.976
then it will render everything out for
you.

209
00:15:06.976 --> 00:15:11.277
Wild, right, to me,
I found that was very interesting.

210
00:15:11.277 --> 00:15:14.862
But yeah, the novelty here is this
function here, createFromFetch.

211
00:15:18.062 --> 00:15:20.399
&gt;&gt; Brian Holt: So this is what you'll end
up doing if you ever decide to implement

212
00:15:20.399 --> 00:15:21.085
this by yourself.

213
00:15:21.085 --> 00:15:24.018
Again, you probably won't,
trying to do this in the future.

214
00:15:24.018 --> 00:15:26.206
I don't know, I'm not your mom,
feel free to do whatever you want.

215
00:15:26.206 --> 00:15:30.364
But you'll end up having one endpoint
that'll handle all of these React

216
00:15:30.364 --> 00:15:32.489
fetchings and all that kinda stuff.

217
00:15:32.489 --> 00:15:35.048
If you look at your Next.js logs,

218
00:15:35.048 --> 00:15:40.004
you'll see that they all come and
go from one endpoint typically.

219
00:15:43.172 --> 00:15:46.532
&gt;&gt; Brian Holt: Okay, we're so
close to getting done with this,

220
00:15:46.532 --> 00:15:49.015
our client-side react app is done.

221
00:15:49.015 --> 00:15:50.721
So this is all ready to go.

222
00:15:50.721 --> 00:15:54.531
But now we lack the next part
of heavy lifting here, which is,

223
00:15:54.531 --> 00:15:59.151
we need the server that's aware of our
components that's able to actually

224
00:15:59.151 --> 00:16:01.378
do the server side rendering here.

