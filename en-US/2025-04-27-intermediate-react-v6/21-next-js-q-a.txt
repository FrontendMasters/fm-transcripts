[00:00:00]
>> Brian Holt: What do you think? Do we like RSCs? Are we fans? Are we not fans? Is it big stupid face or is it like really cool? I don't know.
>> Student 1: Do you have any like general rules of thumb for when you recommend next js?
>> Brian Holt: I think as you see here, when you have a lot of like client actions which then do things on the server.

[00:00:23]
So like a lot of when a client would be calling an API fairly frequently, this is nice, right? This makes the client-server interaction pattern very great, it makes it very nice to do. When you don't have that, there's enough downside where you might question maybe I don't need this.

[00:00:42]
Or maybe when you have something that's extremely client-side heavy, this also could get very annoying pretty quickly because everything would be used client, right? So a great example of this is if I was making Excalibur draw or something like that, first of all, if you don't use Excalibur draw.

[00:01:00]
Great piece of software, I really quite like it, but you can see this is all client side drawing and all that kind of stuff. Doing this on next JS just doesn't make a lot of sense to me. I would just use like vite or something like that, or or tan stack router or something like that.

[00:01:14]
So, yeah, extremely client side heavy applications, maybe not. Yeah, hopefully the thing that is like in your brain is like, these are useful Sometimes. If I communicated that, then I successfully conveyed my bias towards you, and you adopted it, and now it's your problem. [LAUGH].
>> Student 1: [INAUDIBLE] React do we have similar frameworks that embrace a paradigm RSCs, or is it kind of a new paradigm that's unique to react.

[00:01:41]

>> Brian Holt: Man, I feel like Meteor did this some time ago, there were certain aspects of Meteor that made these kind of interactions kind of seamless. I feel like rails and like Phoenix have elements of this as well, obviously not with React. But Phoenix live view all kind of stuff if you're into elixir, which I am not, [LAUGH].

[00:02:04]
But if you are, has some really cool like elements and aspects to that, yeah, Since you're admittedly so into PHP, Laravel has live wire now, which is very much this, Yep, Just from the PHP side, Absolutely, yeah, Laravel is actually great example that as well. So, yeah, I don't none of this was invented by react.

[00:02:23]
I think it's really fair to say that this is a lot of adopting fairly old paradigms and just bringing them into React developers and calling them shiny again. But yeah, pick your flavor of back end I'm sure there's some Python version of this, it doesn't come to mind, but I'm sure someone has or will do it, right?

[00:02:43]
I don't know, there's Python East does, I don't trust them, I say that my last PM job was open source manager at Snowflake on Python projects. So that's true I don't trust myself either, so that's fair. Okay, I'm pretty happy with that. So that concludes the server portion of React.

[00:03:04]
That's about everything you can do with a server with React. Is that fair to say? Yeah, there's not a lot more you can do with the server plus React. And it just speaks to the flexibility and the power of React, you can bend it to many shapes that you want to.

[00:03:21]
And you can use it itself like its own framework or you can like use it to construct larger frameworks, it's a pretty versatile tool which I think is is pretty great.

