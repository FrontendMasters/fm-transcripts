WEBVTT

1
00:00:00.043 --> 00:00:04.204
&gt;&gt; Brian Holt: We are gonna write
some RSCs we can make building up to

2
00:00:04.204 --> 00:00:08.852
this moment and
this is definitely not gonna let you down.

3
00:00:08.852 --> 00:00:13.255
It's never gonna give you up,
it's never gonna let you down.

4
00:00:13.255 --> 00:00:14.779
&gt;&gt; [LAUGH].

5
00:00:14.779 --> 00:00:17.513
&gt;&gt; Brian Holt: You weren't expecting
to get rickrolled by React today,

6
00:00:17.513 --> 00:00:18.302
but here we are.

7
00:00:18.302 --> 00:00:23.096
Okay, so, this is a lot to code by hand,
but it's kind of like

8
00:00:23.096 --> 00:00:27.897
it's a lot of machinery to get
everything working together so

9
00:00:27.897 --> 00:00:31.521
bear with me, but
we'll get there together.

10
00:00:31.521 --> 00:00:34.812
Some of the stuff I'm gonna
hand wave over a little bit,

11
00:00:34.812 --> 00:00:39.100
because it's just not super important
to getting everything correct.

12
00:00:39.100 --> 00:00:40.355
But we'll try and

13
00:00:40.355 --> 00:00:45.384
focus on the actual parts that's
gonna make you better at doing React.

14
00:00:45.384 --> 00:00:49.149
So we are going to code a bare bones,

15
00:00:49.149 --> 00:00:54.179
just RSE,with like,
nothing else around it.

16
00:00:54.179 --> 00:00:58.355
So there's gonna be no next, there's
gonna be no framework on top of it.

17
00:00:58.355 --> 00:01:03.273
We are essentially, the framework look
at me, or you are the framework, right?

18
00:01:03.273 --> 00:01:07.620
So the first thing is I'm gonna have
you do is you can see this has a lot of

19
00:01:07.620 --> 00:01:12.556
requirements, and so I did write out the
entire npm install here if you want to,

20
00:01:12.556 --> 00:01:15.525
I'm going to invite you
to not load all of this.

21
00:01:15.525 --> 00:01:18.058
So why don't you just come in here and

22
00:01:18.058 --> 00:01:22.975
copy our package.json, or
you can copy this, both of those are fine.

23
00:01:22.975 --> 00:01:27.628
And then we're gonna create a new project,
and we're gonna put this in here, and

24
00:01:27.628 --> 00:01:29.516
then we'll run npm install, and

25
00:01:29.516 --> 00:01:33.370
then I'll go over the actual
components we have here momentarily.

26
00:01:33.370 --> 00:01:38.895
So come in here, cancel the other server
I'm gonna make another directory,

27
00:01:38.895 --> 00:01:42.645
and this is just going to
call this one no framework.

28
00:01:42.645 --> 00:01:49.475
Okay, and then I'm just gonna open this
in code and we'll close this one and

29
00:01:49.475 --> 00:01:55.357
we're gonna close this one as well and
we'll maximize that one.

30
00:01:55.357 --> 00:02:02.575
Okay, new file package.json,
I paste that in there.

31
00:02:02.575 --> 00:02:07.852
So let's talk for just a hot moment
about what's actually in here.

32
00:02:07.852 --> 00:02:12.242
One, we are gonna be doing CommonJS for
this, not ES modules.

33
00:02:12.242 --> 00:02:16.349
Again, it was just way simpler, this is
one of those things, I went all the way

34
00:02:16.349 --> 00:02:19.973
and made everything in ES modules and
really pretty and really nice.

35
00:02:19.973 --> 00:02:23.792
And I realized we're gonna spend an extra
25 minutes just getting all this stuff

36
00:02:23.792 --> 00:02:25.573
working, and nobody cares, right?

37
00:02:25.573 --> 00:02:30.489
So we're cutting all that stuff out so
that's why there's a shortcut here.

38
00:02:30.489 --> 00:02:34.501
And the other thing you'll notice that
we're gonna be using webpack this time,

39
00:02:34.501 --> 00:02:36.991
whereas I normally recommend
people to use Vite.

40
00:02:36.991 --> 00:02:40.514
Again, I went through the whole
process of making it work with Vite,

41
00:02:40.514 --> 00:02:43.150
cuz you can port webpack
plugins to work with Vite.

42
00:02:43.150 --> 00:02:47.604
It's fairly straightforward process, but
again, I was asking myself, nobody cares.

43
00:02:47.604 --> 00:02:48.504
Why are we doing this?

44
00:02:48.504 --> 00:02:51.843
So we're gonna be just
using Webpack directly.

45
00:02:51.843 --> 00:02:52.909
And the reason for

46
00:02:52.909 --> 00:02:57.685
that is this little magic package
here called react-server-dom-webpack.

47
00:02:57.685 --> 00:03:02.415
This is the actual magic package that's
going to do all of the server components.

48
00:03:02.415 --> 00:03:08.929
It basically enables a Node
server to be RSC enabled.

49
00:03:08.929 --> 00:03:11.657
Then we have some Babel here, again,

50
00:03:11.657 --> 00:03:15.582
this is something normally
Vite wraps around for you so

51
00:03:15.582 --> 00:03:20.467
you don't have to peer into the unending
abyss of what Babel can do.

52
00:03:20.467 --> 00:03:23.196
And then we're on fastify again,
just cuz I like fastify, but

53
00:03:23.196 --> 00:03:26.509
you could have definitely done this
with Express, or something like that.

54
00:03:26.509 --> 00:03:27.258
Where else is in here?

55
00:03:27.258 --> 00:03:31.457
Pino, this is just a logging library,
we're gonna be doing some sqlite3.

56
00:03:31.457 --> 00:03:36.019
So that's what's in here, just that's our
example of what you can do on a server.

57
00:03:36.019 --> 00:03:40.873
Css-loader, I have this doodle.css,
it's just a kind of fun,

58
00:03:40.873 --> 00:03:45.382
hand drawn this is like we're
doing note passing, right, so

59
00:03:45.382 --> 00:03:48.607
it was kind of on brand,
I think that's it.

60
00:03:48.607 --> 00:03:52.230
So as you can see, nobody wanted
to write all the npm installs for

61
00:03:52.230 --> 00:03:54.728
this that's why we didn't do it together.

62
00:03:54.728 --> 00:03:59.062
That being said, please come in here and
just say npm install and wait for

63
00:03:59.062 --> 00:03:59.928
everything.

64
00:03:59.928 --> 00:04:05.599
I guarantee you this gonna have
some of those security problems,

65
00:04:05.599 --> 00:04:09.529
cuz it always does,
it's a lot of packages.

66
00:04:09.529 --> 00:04:11.525
Yeah, deprecated, all kind of stuff,

67
00:04:11.525 --> 00:04:15.636
zero vulnerabilities probably by the time
that you watch this as a recorded video,

68
00:04:15.636 --> 00:04:18.297
there's gonna be 30,
it's fine, nobody cares.

69
00:04:18.297 --> 00:04:24.571
Actually, somebody cares, specifically,
I don't care, [LAUGH] not today.

70
00:04:24.571 --> 00:04:29.688
Okay, so that is all of the packages next,

71
00:04:29.688 --> 00:04:34.957
we are going to write our webpack.config.

72
00:04:34.957 --> 00:04:38.427
We're gonna code it together feel
free to copy and paste it for

73
00:04:38.427 --> 00:04:42.579
my notes, this is not the part that
I'm most interested in you learning.

74
00:04:42.579 --> 00:04:45.058
But I still wanted to make
you understand what's in it,

75
00:04:45.058 --> 00:04:46.500
cuz I think that's important.

76
00:04:49.350 --> 00:04:54.779
&gt;&gt; Brian Holt: So, const path=require,
again, this is the,

77
00:04:54.779 --> 00:05:00.352
CommonJS instead of the imports node path,
okay?

78
00:05:00.352 --> 00:05:06.947
And we're gonna say
const HtmlWebpackPlugin.

79
00:05:10.137 --> 00:05:13.494
&gt;&gt; Brian Holt: This is the one that's
going to make our HTML shell, right?

80
00:05:13.494 --> 00:05:17.927
That we were doing like our
index.html before we're

81
00:05:17.927 --> 00:05:20.989
gonna rely on Webpack to do that now.

82
00:05:20.989 --> 00:05:26.016
Require, html-webpack-plugin
there we go and

83
00:05:26.016 --> 00:05:29.727
const ReactServerWebpackPlugin,

84
00:05:29.727 --> 00:05:34.524
this is the one that we
were just talking about.

85
00:05:34.524 --> 00:05:40.020
Require, so you need both sides of this,
the react-server-dom,

86
00:05:40.020 --> 00:05:44.398
you need your bundle to be
bundled correctly for RSCs.

87
00:05:44.398 --> 00:05:48.101
And then you need your
server to run this as well.

88
00:05:48.101 --> 00:05:54.001
So it has two components so
you have to say /plugin.

89
00:05:54.001 --> 00:05:58.648
Cuz essentially it has to go make stubs
whereas this is a server component.

90
00:05:58.648 --> 00:06:03.471
Reach out to the server for this, that's
what this this is gonna do for our bundle.

91
00:06:03.471 --> 00:06:08.382
Okay, const mode, this is all kind of
webpack stuff this was kind of a jog down

92
00:06:08.382 --> 00:06:12.786
memory lane for me, cuz I haven't
actually used webpack directly.

93
00:06:12.786 --> 00:06:17.826
And it's been a while, right,
I've been using Vite for the past

94
00:06:17.826 --> 00:06:24.076
probably two years, and then before
probably three years, I was using Parcel.

95
00:06:24.076 --> 00:06:27.509
Nothing wrong with it webpack's great, and

96
00:06:27.509 --> 00:06:32.854
it was hugely instrumental in
the development of the community here.

97
00:06:32.854 --> 00:06:37.663
The other tools are just a bit
more ergonomic, I think.

98
00:06:37.663 --> 00:06:40.199
So I'm just getting here,
are we in development mode?

99
00:06:40.199 --> 00:06:44.011
That's really what this is all for,
cuz you'll bundle it slightly differently.

100
00:06:44.011 --> 00:06:46.987
&gt;&gt; Speaker 2: Hey Brian, just to head
up you have a typo on line three.

101
00:06:46.987 --> 00:06:47.514
&gt;&gt; Brian Holt: Three.

102
00:06:47.514 --> 00:06:49.617
&gt;&gt; Speaker 2: Plug in the very last word.

103
00:06:49.617 --> 00:06:54.088
&gt;&gt; Brian Holt: Plugin, now it's
finish actually, yeah, just kidding,

104
00:06:54.088 --> 00:06:55.411
[LAUGH] thank you.

105
00:06:55.411 --> 00:06:59.702
So yeah, make sure you spell
not the Finnish spelling,

106
00:06:59.702 --> 00:07:05.749
the American spelling or English or
Australian or Canadian wherever you are.

107
00:07:05.749 --> 00:07:11.813
Just don't add extra o's as English and
Canadians are want to do.

108
00:07:11.813 --> 00:07:16.764
Config = we're gonna put in mode,
which would be mode,

109
00:07:16.764 --> 00:07:20.388
mode, but you can just do mode like that.

110
00:07:20.388 --> 00:07:24.484
Entry, we are gonna do JSX because we're
gonna have Babel installed here as we can.

111
00:07:24.484 --> 00:07:31.387
So entry is going to be ./src/Client.jsx,

112
00:07:31.387 --> 00:07:35.872
module is going to be this, and

113
00:07:35.872 --> 00:07:41.746
then we're gonna give it rules, okay?

114
00:07:41.746 --> 00:07:45.782
And then basically, just gonna say,
if it matches this pattern,

115
00:07:45.782 --> 00:07:49.327
run it through this loader,
that's what rules are here.

116
00:07:49.327 --> 00:07:51.694
A bunch of stuff I had to look
up again cuz it's been so long.

117
00:07:51.694 --> 00:07:56.421
Test you give it a good old friend or

118
00:07:56.421 --> 00:07:59.681
regex.jsx ?$/, so

119
00:07:59.681 --> 00:08:05.712
this is essentially
saying this is a rejsx,

120
00:08:05.712 --> 00:08:12.729
I assume most of you know
enough to fear them, I do.

121
00:08:12.729 --> 00:08:15.679
This is just saying, look for
anything that ends with jsx,

122
00:08:15.679 --> 00:08:18.393
that's what the dollar sign means,
is ends with, and

123
00:08:18.393 --> 00:08:21.289
then the question mark is like
the x may or may not be there.

124
00:08:21.289 --> 00:08:24.069
So anything ends with js or
jsx will match this pattern.

125
00:08:26.980 --> 00:08:30.280
&gt;&gt; Brian Holt: use,
we'll do babel-loader, so

126
00:08:30.280 --> 00:08:35.891
anything that ends with this
run through babel and exclude.

127
00:08:35.891 --> 00:08:41.752
Don't run anything from node_modules,
modules.

128
00:08:41.752 --> 00:08:46.189
Let's do the same thing for CSS,
we're gonna say test if it ends with,

129
00:08:48.363 --> 00:08:53.553
&gt;&gt; Brian Holt: /\.css$/, and

130
00:08:53.553 --> 00:09:01.630
then you could put i here as well.

131
00:09:01.630 --> 00:09:04.425
This is just case-insensitive.

132
00:09:04.425 --> 00:09:06.714
My notes don't have it, so
I'll leave that one off.

133
00:09:06.714 --> 00:09:10.003
This one does,
that's probably because I copied and

134
00:09:10.003 --> 00:09:13.375
pasted this from somewhere,
but don't tell anyone.

135
00:09:13.375 --> 00:09:17.400
Run this from through style-loader
as well as css-loader.

136
00:09:17.400 --> 00:09:22.200
This is just basically anytime
that I refer to a css module,

137
00:09:22.200 --> 00:09:26.330
please load that into my
final destination there.

138
00:09:26.330 --> 00:09:32.324
Okay, that's all for that one,
we have to do the resolve here.

139
00:09:32.324 --> 00:09:34.313
Is that down here?

140
00:09:34.313 --> 00:09:41.176
Yep, resolve, nope,
not that, and that's fine.

141
00:09:41.176 --> 00:09:47.899
Okay, so anytime that I don't
specify the extensions,

142
00:09:47.899 --> 00:09:52.799
then assume it's either .js first, and

143
00:09:52.799 --> 00:09:57.420
if there's no .js file, assume it's

144
00:09:57.420 --> 00:10:02.200
a .jsx file, that's what that means.

145
00:10:02.200 --> 00:10:08.962
And then plugins,
&gt;&gt; Brian Holt: Yep,

146
00:10:08.962 --> 00:10:14.033
so here, we're just gonna say we want
you to generate our HTML file first.

147
00:10:14.033 --> 00:10:19.016
So a new htmlWebpackPlugin with this

148
00:10:19.016 --> 00:10:23.685
configuration of inject: true.

149
00:10:23.685 --> 00:10:25.964
Frankly, I don't remember
what that one does.

150
00:10:25.964 --> 00:10:30.380
I think that's injecting the paths,
but someone double checked me on that.

151
00:10:30.380 --> 00:10:32.543
The publicPath will be /assets,

152
00:10:32.543 --> 00:10:36.280
cuz I think that that's where
all the final things will be.

153
00:10:36.280 --> 00:10:41.100
This is basically telling it how to
formulate that final HTML doc, and

154
00:10:41.100 --> 00:10:47.239
the template will be one that we're about
to create, which is ./index.html, okay?

155
00:10:50.274 --> 00:10:55.320
&gt;&gt; Brian Holt: And then output,
the RSCs are a little specific

156
00:10:55.320 --> 00:11:00.493
of how they want to interact
with their bundles,

157
00:11:00.493 --> 00:11:04.163
so that's what this is all about.

158
00:11:04.163 --> 00:11:08.806
We're telling it basically we're
gonna make it one chunk as

159
00:11:08.806 --> 00:11:12.812
opposed to trying to make
it into multiple chunks and

160
00:11:12.812 --> 00:11:18.292
how we want them to be constructed,
so chunkFilename: development.

161
00:11:18.292 --> 00:11:23.055
So if it's in Dev, do (id).chunk.js.

162
00:11:23.055 --> 00:11:27.879
This is helpful for just identifying where

163
00:11:27.879 --> 00:11:33.105
something is, and
if it's going out to prod,

164
00:11:33.105 --> 00:11:37.125
we want it to have the hash in there.

165
00:11:43.512 --> 00:11:49.154
&gt;&gt; Brian Holt: Some of this may not be
totally necessary to get this all working

166
00:11:49.154 --> 00:11:54.690
locally, but I'm reticent to
improvise webpack on the fly,

167
00:11:54.690 --> 00:12:01.415
as some of you might understand cuz
it's a scary thing, webpack is scary.

168
00:12:01.415 --> 00:12:08.635
Path is path.resolve_dirname.

169
00:12:08.635 --> 00:12:11.179
Because we're on CommonJS,
we don't have to define dirname,

170
00:12:11.179 --> 00:12:12.316
that's an advantage here.

171
00:12:12.316 --> 00:12:17.837
dist, that's where we're
gonna put everything.

172
00:12:17.837 --> 00:12:21.813
filename is going to be

173
00:12:21.813 --> 00:12:27.680
(name).js and clean is true.

174
00:12:27.680 --> 00:12:31.610
I believe this is clean up after yourself,
is what that does.

175
00:12:31.610 --> 00:12:36.861
And then optimization,
&gt;&gt; Brian Holt: Optimization

176
00:12:36.861 --> 00:12:40.906
is going to be a runtime chunk.

177
00:12:40.906 --> 00:12:47.884
We just want that all to be in one chunk,
so runtimeChunk is single.

178
00:12:50.553 --> 00:12:54.874
&gt;&gt; Brian Holt: Okay, and
then module.exports = config.

179
00:12:54.874 --> 00:13:01.597
&gt;&gt; Speaker 2: Looks like you might have
missed again the React server impact.

180
00:13:01.597 --> 00:13:02.777
&gt;&gt; Brian Holt: The most important one,
right?

181
00:13:02.777 --> 00:13:04.223
&gt;&gt; Speaker 3: Right after 32.

182
00:13:04.223 --> 00:13:06.279
&gt;&gt; Brian Holt: That's hilarious,
okay, thank you.

183
00:13:06.279 --> 00:13:10.214
In plugins here we have new HtmlWebpack,
I was just saving the best for last.

184
00:13:10.214 --> 00:13:17.281
So [LAUGH] we need one more thing, which
is this new ReactServerWebpackPlugin,

185
00:13:17.281 --> 00:13:21.405
and we have to say that
this is server: false.

186
00:13:24.967 --> 00:13:28.031
&gt;&gt; Brian Holt: So this is, again, we're
saying, when you run into one of these

187
00:13:28.031 --> 00:13:32.067
React server components, treat them as
they're supposed to be treated, as a stub.

188
00:13:32.067 --> 00:13:35.615
This also handles things
like server actions,

189
00:13:35.615 --> 00:13:38.369
all those various features of RSCs.

190
00:13:38.369 --> 00:13:43.458
That's all wrapped up into
this ReactServerWebpackPlugin.

191
00:13:43.458 --> 00:13:46.006
Again, this does work with Vite.

192
00:13:46.006 --> 00:13:49.953
You can make it work with Vite, you have
to write a little wraparound of this is

193
00:13:49.953 --> 00:13:52.504
how you get this webpack
plugin to work with Vite,

194
00:13:52.504 --> 00:13:55.636
cuz they're all just transformations
at the end of the day.

195
00:13:59.044 --> 00:14:03.526
&gt;&gt; Brian Holt: Okay, again, not a webpack
class, we're not gonna dive too deep here,

196
00:14:03.526 --> 00:14:08.323
that's why I wouldn't fault you again
if you just copied and pasted this one.

197
00:14:08.323 --> 00:14:12.062
We're gonna make our Babel config,

198
00:14:12.062 --> 00:14:16.291
not a Babel class, babel.config.js.

199
00:14:16.291 --> 00:14:22.298
And we're gonna put
the same const development

200
00:14:22.298 --> 00:14:29.527
= (process.env.NODE_ENV)
&gt;&gt; Brian Holt: Or

201
00:14:29.527 --> 00:14:34.450
this is going to be
equal to development and

202
00:14:34.450 --> 00:14:37.884
triple equals development.

203
00:14:37.884 --> 00:14:40.639
So if you don't have a NODE_ENV,
just assume it's node of development,

204
00:14:40.639 --> 00:14:41.350
is what that does.

205
00:14:43.631 --> 00:14:50.831
&gt;&gt; Brian Holt: And
then module.exports= blah,

206
00:14:50.831 --> 00:14:56.591
preset, presets with an S,

207
00:14:56.591 --> 00:15:00.671
and nested arrays,

208
00:15:00.671 --> 00:15:08.597
obviously @babel/preset-react.

209
00:15:08.597 --> 00:15:11.140
I used to have to teach
this every single time, and

210
00:15:11.140 --> 00:15:14.303
people would just glaze over we
went over the babble section.

211
00:15:14.303 --> 00:15:19.686
It's nice, cuz Vite just
handles all this stuff for you.

212
00:15:19.686 --> 00:15:24.439
Okay, so there's that, and
then we have to give it

213
00:15:24.439 --> 00:15:29.758
an object of configuration
which is going to be runtime.

214
00:15:29.758 --> 00:15:33.686
Not that runtime, thank you,
runtime: "automatic".

215
00:15:33.686 --> 00:15:38.986
Used to have to tell Babel what
version of React you were using,

216
00:15:38.986 --> 00:15:44.788
and I still find it annoying that
they don't do this automatically.

217
00:15:44.788 --> 00:15:48.085
Automatic just says,
look at the package.json.

218
00:15:48.085 --> 00:15:51.943
If you wanna know what version of
React I'm using, use the package.json, but

219
00:15:51.943 --> 00:15:52.642
they don't.

220
00:15:52.642 --> 00:15:55.504
useSpread: true and development,

221
00:15:55.504 --> 00:15:59.754
I think you can put either
just development like this.

222
00:15:59.754 --> 00:16:06.198
Or we can say, true, just cuz we're gonna
be in dev either time so, either way.

223
00:16:09.974 --> 00:16:10.803
&gt;&gt; Brian Holt: Up to you.

224
00:16:10.803 --> 00:16:15.955
Okay, so, that's our babel config,

225
00:16:15.955 --> 00:16:24.286
let's make our index.html
&gt;&gt; Brian Holt: Again,

226
00:16:24.286 --> 00:16:26.073
this is gonna feel real
familiar to most of you.

227
00:16:29.626 --> 00:16:30.672
&gt;&gt; Brian Holt: Drop that.

228
00:16:30.672 --> 00:16:37.514
This is gonna be, No Framework RSCs.

229
00:16:37.514 --> 00:16:45.473
We're gonna put a link in here as well,
to index.css.

230
00:16:45.473 --> 00:16:50.973
Okay, and then we have to give it as well.

231
00:16:50.973 --> 00:16:55.039
Yeah, that should be good cuz it'll
inject everything else for us.

232
00:16:55.039 --> 00:16:59.097
Okay, so we have to do body,
I give it a class here of doodle.

233
00:16:59.097 --> 00:17:05.920
This is for our CSS,
this will make it all kind of cartoony,

234
00:17:05.920 --> 00:17:10.424
or I feel it more like hand-drawn, and

235
00:17:10.424 --> 00:17:16.714
then we're gonna do a root here with ROOT,
like that.

236
00:17:16.714 --> 00:17:18.692
Okay, I should be it.

237
00:17:18.692 --> 00:17:21.676
Yep, so, nothing too groundbreaking there,

238
00:17:21.676 --> 00:17:26.462
this is the same one that we refer to
in our Webpack config, if you remember.

239
00:17:26.462 --> 00:17:29.549
Cool, we need to go get a SQLite file,

240
00:17:29.549 --> 00:17:34.381
cuz we're gonna be using
a little database, which is fun.

241
00:17:34.381 --> 00:17:40.544
So go ahead and grab that, you can
grab it from a number of places, but.

242
00:17:40.544 --> 00:17:45.422
The file that I want you to have
here is this notes.db I have it in

243
00:17:45.422 --> 00:17:50.946
a different place, but feel free to
just copy it out of your clone repo,

244
00:17:50.946 --> 00:17:52.905
however you wanna do it.

245
00:17:52.905 --> 00:17:58.796
I know I have it laying around on,
it's gonna be personal, note-passer.

246
00:17:58.796 --> 00:18:04.899
And I have notes.db and
I'm just gonna copy it right there,

247
00:18:04.899 --> 00:18:12.958
so you can see there I have notes.db
that's the one that came from the repo.

248
00:18:12.958 --> 00:18:17.022
Yeah, and
then you also need the CSS file as well.

249
00:18:17.022 --> 00:18:21.696
So, that one you can just copy
the whole thing if you want to,

250
00:18:21.696 --> 00:18:25.098
which is gonna be,
which one do I have here?

251
00:18:25.098 --> 00:18:27.824
This is index.css.

252
00:18:33.475 --> 00:18:38.916
&gt;&gt; Brian Holt: So, let's go ahead and grab
that one from completed, no framework.

253
00:18:38.916 --> 00:18:42.632
Did I put it in source,
is that where I put it?

254
00:18:42.632 --> 00:18:43.471
&gt;&gt; Speaker 3: Public.

255
00:18:43.471 --> 00:18:45.781
&gt;&gt; Brian Holt: Public, thank you.

256
00:18:45.781 --> 00:18:50.669
Yep, let's just grab this one,
I'm not exactly sure which one I use,

257
00:18:50.669 --> 00:18:54.845
so we'll just grab this one,
make sure we get the right one.

258
00:18:54.845 --> 00:18:58.673
And yeah,
let's make a public directory here.

259
00:18:58.673 --> 00:19:03.004
We're gonna make a new file,

260
00:19:03.004 --> 00:19:09.076
index.css, we'll paste that in here.

261
00:19:09.076 --> 00:19:11.438
Okay, great.

262
00:19:14.991 --> 00:19:17.248
&gt;&gt; Brian Holt: Okay,
now in your package.json,

263
00:19:17.248 --> 00:19:20.191
we're gonna add two
different scripts here.

264
00:19:20.191 --> 00:19:24.276
We're gonna add one for dev:client,

265
00:19:24.276 --> 00:19:29.985
this is gonna run Webpack for
us, webpack -- watch.

266
00:19:29.985 --> 00:19:34.458
And then we're gonna also do one for
dev:server,

267
00:19:34.458 --> 00:19:39.145
and this is gonna be node
-- watch -- conditions.

268
00:19:39.145 --> 00:19:42.913
This is a new one for some people,

269
00:19:42.913 --> 00:19:47.496
react -server and server/main.js.

270
00:19:47.496 --> 00:19:51.089
Conditions, this is a node thing,
and I'll be honest you,

271
00:19:51.089 --> 00:19:55.891
I didn't even know what this was until I
started doing react server components.

272
00:19:55.891 --> 00:19:58.002
It's this thing that
you can pass into node,

273
00:19:58.002 --> 00:20:00.180
that just lets you know
where is this running?

274
00:20:00.180 --> 00:20:06.433
Run this version of my dependencies,
essentially, this lets specifically,

275
00:20:06.433 --> 00:20:12.703
that react Webpack plugin that we're
gonna incorporate into our node server.

276
00:20:12.703 --> 00:20:15.096
It lets it know that this is
the server side rendering,

277
00:20:15.096 --> 00:20:16.508
not the client side rendering.

278
00:20:16.508 --> 00:20:21.452
So make sure you're doing everything
from the server perspective.

279
00:20:21.452 --> 00:20:26.284
So it's essentially like a massive if
statement to the entire app running,

280
00:20:26.284 --> 00:20:28.935
and you could have multiple conditions.

281
00:20:28.935 --> 00:20:32.811
This is a thing built into node,
I just have never used it before, so

282
00:20:32.811 --> 00:20:36.349
I don't know where else this
is practically applicable, but

283
00:20:36.349 --> 00:20:39.905
it does exist, in case you were wondering,
which no one was.

284
00:20:39.905 --> 00:20:42.888
Yeah, it's letting react know
how to resolve its modules.

285
00:20:42.888 --> 00:20:48.530
So it's actually hooked in directly
to the modules system itself.

286
00:20:48.530 --> 00:20:51.507
So, if you require a client component,
it's not going to try and load it.

287
00:20:51.507 --> 00:20:55.666
That's actually the important part here,
otherwise it would crash the server.

288
00:20:55.666 --> 00:21:00.542
This gets us started in terms of just
getting all the machinery around,

289
00:21:00.542 --> 00:21:02.180
getting this working.

290
00:21:02.180 --> 00:21:04.651
Now we can actually start
writing the server and

291
00:21:04.651 --> 00:21:06.451
writing the components for this.

