WEBVTT

1
00:00:00.000 --> 00:00:05.207
&gt;&gt; Speaker 1: With Next's new emphasis on
React server components, is there a new

2
00:00:05.207 --> 00:00:11.339
suggestion for full stack JS frameworks
that can work with an already built API?

3
00:00:11.339 --> 00:00:15.868
Or would the suggestion be
using lots of use client and

4
00:00:15.868 --> 00:00:20.712
not really taking advantage
of RSCs throughout the app?

5
00:00:20.712 --> 00:00:23.426
&gt;&gt; Brian Holt: Yep, it's a good question.

6
00:00:23.426 --> 00:00:27.040
So if you have a very client-heavy app and

7
00:00:27.040 --> 00:00:32.831
RSCs are not really solving a problem for
you, then what do you do?

8
00:00:32.831 --> 00:00:34.968
Well, a couple suggestions.

9
00:00:34.968 --> 00:00:39.998
You can use Next in a way that
doesn't have RSCs as much,

10
00:00:39.998 --> 00:00:45.155
but you're gonna run into
exactly what you're saying.

11
00:00:45.155 --> 00:00:51.053
My suggestion is look either at
Remix/React Router 7 or TanStack Start.

12
00:00:51.053 --> 00:00:55.431
Remix already being stable and
TanStack Start.

13
00:00:55.431 --> 00:00:58.788
I mean, I don't know when he's gonna GA,
but it's soon, I think.

14
00:00:58.788 --> 00:01:00.568
I know 1.0 is coming very, very soon.

15
00:01:00.568 --> 00:01:04.379
Maybe by the time that this
is viewable on the stream,

16
00:01:04.379 --> 00:01:07.013
that TanStack Start will be stable.

17
00:01:07.013 --> 00:01:11.532
My very biased, very personal opinion
here is, I like TanStack Start.

18
00:01:11.532 --> 00:01:14.769
I like Tanner's approach to
building all these things.

19
00:01:14.769 --> 00:01:18.431
SolidStart is already out there for
SolidJS, and

20
00:01:18.431 --> 00:01:23.500
those are kind of converging technologies,
and I like SolidStart.

21
00:01:23.500 --> 00:01:25.265
I like the choices they made there.

22
00:01:25.265 --> 00:01:28.243
I like the client-first approach
with a light sprinkling of server,

23
00:01:28.243 --> 00:01:31.128
as opposed to server-first and
then a light sprinkling of client.

24
00:01:31.128 --> 00:01:38.218
So all that to say, your two best bets are
gonna be either Remix or TanStack Start.

25
00:01:38.218 --> 00:01:41.416
And that's really just gonna be your
opinion of which one you like better.

26
00:01:41.416 --> 00:01:44.395
They're both extremely
valid opinions to hold.

27
00:01:44.395 --> 00:01:49.322
&gt;&gt; Speaker 1: Any tips for
self-hosting Next.js?

28
00:01:49.322 --> 00:01:53.148
Is it available or
is it just better to stay with Vercel?

29
00:01:53.148 --> 00:01:53.997
&gt;&gt; Brian Holt: It's totally available.

30
00:01:53.997 --> 00:02:00.081
Any tips, you just run it like a Node
service, to be really honest with you.

31
00:02:00.081 --> 00:02:01.103
You lose some of that.

32
00:02:01.103 --> 00:02:05.388
They build Next intentionally so that it
works better on their infrastructure.

33
00:02:05.388 --> 00:02:11.894
Again, it's part them just saying,
what can we do even better?

34
00:02:11.894 --> 00:02:17.578
And it's part just product thinking of,
how do we keep a captive audience?

35
00:02:17.578 --> 00:02:24.076
All that to say, it's not any harder
to host than any other Node service.

36
00:02:24.076 --> 00:02:28.707
Do I have any special, no, just whatever
you would do with the normal Node service,

37
00:02:28.707 --> 00:02:30.221
you'll do with Next.js.

38
00:02:30.221 --> 00:02:33.310
Plenty of people do it, by the way.

39
00:02:33.310 --> 00:02:39.567
&gt;&gt; Speaker 1: Any suggestions on how to
write tests for use deferred value and

40
00:02:39.567 --> 00:02:45.602
use transition with something
like React Testing Library?

41
00:02:45.602 --> 00:02:48.376
&gt;&gt; Brian Holt: That's a good question,

42
00:02:48.376 --> 00:02:54.438
I haven't tested the core
function at those functions.

43
00:02:54.438 --> 00:02:56.049
This would be one of the things,

44
00:02:56.049 --> 00:02:58.925
you'd be really tempted to
test the framework, right?

45
00:02:58.925 --> 00:03:02.388
Where you're saying,
if I do this it, is it deferred?

46
00:03:02.388 --> 00:03:04.624
And don't do that.

47
00:03:04.624 --> 00:03:06.848
React has its own suite of tests.

48
00:03:06.848 --> 00:03:11.016
The test does use deferred
value do what it does.

49
00:03:11.016 --> 00:03:15.120
The way I would approach this would be
much more from a user-centric perspective

50
00:03:15.120 --> 00:03:18.032
of, what am I expecting
the user to experience, right?

51
00:03:18.032 --> 00:03:22.514
So if a user does this action,
is the immediate action correct,

52
00:03:22.514 --> 00:03:26.421
and does it reconcile eventually
to the correct state?

53
00:03:26.421 --> 00:03:32.061
If you approach it that way, then you're
actually going to be serving your users,

54
00:03:32.061 --> 00:03:36.508
as opposed to just testing what
React already tests itself to do.

55
00:03:36.508 --> 00:03:38.436
I don't know if I have more
specific advice to that.

56
00:03:38.436 --> 00:03:41.964
&gt;&gt; Speaker 1: Do you have any suggestions
on building a career in React?

57
00:03:41.964 --> 00:03:46.138
Should we focus on Next.js, or
Remix, or any other framework?

58
00:03:46.138 --> 00:03:49.717
&gt;&gt; Brian Holt: That's a good question.

59
00:03:54.660 --> 00:03:58.589
&gt;&gt; Brian Holt: So having done a decent
amount of hiring over the years,

60
00:03:58.589 --> 00:04:03.857
particularly of junior developers,
the thing that impressed me most were

61
00:04:03.857 --> 00:04:08.808
people that had some project that
they were really passionate about.

62
00:04:08.808 --> 00:04:12.697
They went super deep on it, and
they learned a bunch of stuff, and

63
00:04:12.697 --> 00:04:14.344
I'll give you an example.

64
00:04:14.344 --> 00:04:17.318
When I hired someone at Reddit,

65
00:04:17.318 --> 00:04:22.725
I probably had 600 resumes
that came in for one person.

66
00:04:22.725 --> 00:04:26.552
We probably narrowed it down
to 30 interview people, and

67
00:04:26.552 --> 00:04:30.301
the person that I hired didn't
have the most experience,

68
00:04:30.301 --> 00:04:33.611
didn't have the widest
breadth of technologies.

69
00:04:33.611 --> 00:04:38.176
And actually, probably most interesting
to you all is that his experience

70
00:04:38.176 --> 00:04:41.006
didn't match the stack
that I was hiring for.

71
00:04:41.006 --> 00:04:45.067
But he was, first of all,
smart, and then his experiences,

72
00:04:45.067 --> 00:04:49.615
GitHub showed that he had built this
an entire, I think it was Rails.

73
00:04:49.615 --> 00:04:53.367
I really don't remember, but mismatched to

74
00:04:53.367 --> 00:04:58.414
the Python Django at the time,
so React stack at that point.

75
00:04:58.414 --> 00:05:00.699
And I was really impressed
by the depth and

76
00:05:00.699 --> 00:05:03.445
the passion that he had
come at with those things.

77
00:05:03.445 --> 00:05:05.887
And he had gone really deep
on these technologies.

78
00:05:05.887 --> 00:05:09.899
And so throwing him at Python and
Django and

79
00:05:09.899 --> 00:05:15.137
React was easy because he
applied that same tenacity and

80
00:05:15.137 --> 00:05:21.172
that interest to learning the stack
that we needed him to learn.

81
00:05:21.172 --> 00:05:26.229
And ended up being a phenomenal hire, one
of the best hires I've probably ever made.

82
00:05:26.229 --> 00:05:32.306
So really, my answer is, I don't think
I really care as a hiring manager,

83
00:05:32.306 --> 00:05:35.496
did you pick Next or did you pick Remix?

84
00:05:35.496 --> 00:05:39.745
If you're picking for just the most
generally applicable, it's gonna be Next,

85
00:05:39.745 --> 00:05:43.020
cuz Next is just getting shipped
a lot more than the other ones.

86
00:05:43.020 --> 00:05:46.463
But if I'm your hiring manager,
I don't care, right?

87
00:05:46.463 --> 00:05:52.327
I would much rather see a phenomenal
Remix app than a crappy Next one.

88
00:05:52.327 --> 00:05:57.130
So my general advice to just junior
developers in general is follow

89
00:05:57.130 --> 00:06:01.431
what just gets you excited about code and
just go real deep.

90
00:06:01.431 --> 00:06:04.553
Just do as much as you can and
ship something.

91
00:06:04.553 --> 00:06:09.628
Don't take me to 75% the fun part and
then don't ship the last 25%.

92
00:06:09.628 --> 00:06:10.343
Actually ship things.

93
00:06:10.343 --> 00:06:15.031
You learn so
much in the hard parts of shipping things.

94
00:06:15.031 --> 00:06:16.786
And that's where I get really impressed.

95
00:06:16.786 --> 00:06:20.242
If I can go onto your GitHub,
see that you have this one Repo, and

96
00:06:20.242 --> 00:06:24.022
I don't care how many stars it has,
it just means that's marketing.

97
00:06:24.022 --> 00:06:28.744
But if I can download it, if I can npm
install, and if I can see this app

98
00:06:28.744 --> 00:06:34.224
running, and I'm impressed by it,
that's gonna count for a ton more points.

99
00:06:34.224 --> 00:06:38.419
So I know that's kind of a sidestepping
answer as well, but just go deep,

100
00:06:38.419 --> 00:06:43.107
be interested, be passionate, follow
what makes you interested in something.

101
00:06:43.107 --> 00:06:47.903
And I think you'll end up with something
more important than you did Remix

102
00:06:47.903 --> 00:06:49.305
versus you did Next.

103
00:06:50.921 --> 00:06:54.886
&gt;&gt; Speaker 1: Any suggestions how to
approach full text search on statically

104
00:06:54.886 --> 00:06:56.090
generated sites?

105
00:06:58.775 --> 00:07:05.826
&gt;&gt; Brian Holt: Full text search,
that's gonna depend on your application.

106
00:07:05.826 --> 00:07:09.720
If you really need to do it in a browser,

107
00:07:09.720 --> 00:07:15.503
that's gonna carry its own
set of interesting problems.

108
00:07:15.503 --> 00:07:20.124
There's plenty of libraries out there of
people that have thought through this that

109
00:07:20.124 --> 00:07:21.368
you could use as well.

110
00:07:21.368 --> 00:07:24.420
But I mean,
you're asking the Postgres guy,

111
00:07:24.420 --> 00:07:27.166
do you have a Postgres-shaped problem?

112
00:07:27.166 --> 00:07:30.528
And my answer is always going to be yes
because Postgres does everything, right?

113
00:07:30.528 --> 00:07:35.186
So yes, by all means,
Elasticsearch or any one of those

114
00:07:35.186 --> 00:07:40.057
will work just fine, or
Pinecone or something like that.

115
00:07:40.057 --> 00:07:44.126
But my opinion, I just use Postgres for
everything these days.

116
00:07:44.126 --> 00:07:50.497
So I would probably just rely on Postgres,
and then if you're doing vector search or

117
00:07:50.497 --> 00:07:55.809
something like that, then PGVector or
PG RAG or something like that.

118
00:07:55.809 --> 00:08:01.713
Otherwise, you can get some other
off-the-shelf service that sits on top,

119
00:08:01.713 --> 00:08:05.659
like Solr or Elasticsearch or
something like that.

120
00:08:09.292 --> 00:08:12.633
&gt;&gt; Speaker 1: When managing server-side
versus client-side components,

121
00:08:12.633 --> 00:08:15.305
any recommend patterns for
large scale projects?

122
00:08:15.305 --> 00:08:20.697
Like how to build things so
that changing a component from the server

123
00:08:20.697 --> 00:08:25.916
side to client side and
vice versa doesn't have a domino effect?

124
00:08:27.402 --> 00:08:27.991
&gt;&gt; Brian Holt: In reality,

125
00:08:27.991 --> 00:08:31.159
I don't find myself really changing
my components that frequently.

126
00:08:31.159 --> 00:08:36.348
Generally, if I write an RSC, it doesn't

127
00:08:36.348 --> 00:08:41.406
later become a client-side component.

128
00:08:41.406 --> 00:08:44.409
And I kind of alluded this early
to when we were speaking about it

129
00:08:44.409 --> 00:08:45.551
earlier in the course.

130
00:08:45.551 --> 00:08:49.905
But you find yourself pushing client

131
00:08:49.905 --> 00:08:54.820
state further and further down the tree so

132
00:08:54.820 --> 00:09:01.009
that you don't have to make
the client components.

133
00:09:01.009 --> 00:09:07.853
So I guess my advice there is, one,
it doesn't seem to happen to me very much,

134
00:09:07.853 --> 00:09:12.340
just by virtue of the way
I structure my next steps.

135
00:09:12.340 --> 00:09:15.807
Secondly, the thing that you do is you
just push your client code as far down

136
00:09:15.807 --> 00:09:16.369
as you can.

137
00:09:16.369 --> 00:09:19.691
And then thirdly,
don't fear client-side code.

138
00:09:19.691 --> 00:09:23.912
It's not like it's a big,
huge, ugly beast.

139
00:09:23.912 --> 00:09:27.092
When it does happen,
I guess when it does happen,

140
00:09:27.092 --> 00:09:31.055
you're just gonna have to refactor
your code to handle that.

141
00:09:31.055 --> 00:09:35.951
But I don't know, it's not something
that I find myself running into, so

142
00:09:35.951 --> 00:09:38.283
it's not something I really fear,

143
00:09:38.283 --> 00:09:42.808
or it's not something I really
prepare my code for very frequently.

144
00:09:45.471 --> 00:09:47.107
&gt;&gt; Brian Holt: Usually,
there's a clear divide,

145
00:09:47.107 --> 00:09:50.816
this definitely should be a React server
component cuz it reads from the database.

146
00:09:50.816 --> 00:09:54.636
And this is accepting user input, so
it definitely should be a client one.

147
00:09:54.636 --> 00:09:59.598
And the amount of middle ground of this
could be either is usually quite small.

