WEBVTT

1
00:00:00.000 --> 00:00:06.491
&gt;&gt; Brian Holt: The next thing we need
to do is we need to write post note.

2
00:00:08.777 --> 00:00:11.145
&gt;&gt; Brian Holt: So
we're gonna create this post note.js,

3
00:00:11.145 --> 00:00:14.733
the name here is not significant,
you can call whatever you want.

4
00:00:14.733 --> 00:00:19.056
However, this one's important
because now we have to say,

5
00:00:19.056 --> 00:00:23.995
use server, we have to be explicit
that this only runs on the server.

6
00:00:27.012 --> 00:00:30.642
&gt;&gt; Brian Holt: So this is the only time
that you need to use servers when you're

7
00:00:30.642 --> 00:00:34.972
identifying this function that we're
doing here only runs on the server.

8
00:00:34.972 --> 00:00:40.412
Async database from promise polite,

9
00:00:40.412 --> 00:00:46.872
export default async function, postnote,

10
00:00:46.872 --> 00:00:53.002
and this is gonna take in form data, okay?

11
00:00:53.002 --> 00:00:58.566
We'll just console log here,
because I think it's interesting,

12
00:00:58.566 --> 00:01:01.601
postnote called and with form data.

13
00:01:05.453 --> 00:01:10.256
&gt;&gt; Brian Holt: And
then here we're just gonna say const

14
00:01:10.256 --> 00:01:14.358
from = form data.get from user.

15
00:01:16.821 --> 00:01:21.832
&gt;&gt; Brian Holt: If this looks familiar,
it's because it's the same API for

16
00:01:21.832 --> 00:01:25.271
getting stuff out of
a form client side and

17
00:01:25.271 --> 00:01:29.022
we'll just do the same thing, two, right?

18
00:01:29.022 --> 00:01:33.293
And we'll do the same thing here, note.

19
00:01:36.817 --> 00:01:38.805
&gt;&gt; Brian Holt: All right,
so from to a note,

20
00:01:38.805 --> 00:01:41.442
those are what we call them on our form.

21
00:01:44.133 --> 00:01:48.753
&gt;&gt; Brian Holt: And you can do some
validation here if you want to, so

22
00:01:48.753 --> 00:01:49.804
if no from.

23
00:01:52.230 --> 00:01:56.198
&gt;&gt; Brian Holt: Or no to or no note,

24
00:01:56.198 --> 00:02:01.662
you just throw new error.

25
00:02:06.009 --> 00:02:07.945
&gt;&gt; Brian Holt: With very
helpful instructions.

26
00:02:10.380 --> 00:02:12.667
&gt;&gt; Brian Holt: And
then we just saved to the database, right?

27
00:02:12.667 --> 00:02:13.557
That's it.

28
00:02:24.578 --> 00:02:29.692
&gt;&gt; Brian Holt: Okay and then await db.run.

29
00:02:33.203 --> 00:02:38.581
&gt;&gt; Brian Holt: Insert into
notes from user to user,

30
00:02:38.581 --> 00:02:44.653
note values and then just question mark,

31
00:02:44.653 --> 00:02:51.949
comma, question mark,
comma, question mark.

32
00:02:51.949 --> 00:02:55.451
If you're not familiar with
parameterized queries,

33
00:02:55.451 --> 00:03:00.564
this is gonna do all the SQL scrubbing for
you, what escape sequences, right?

34
00:03:00.564 --> 00:03:04.429
So that you don't have to worry about
SQL injection, all that kind of stuff.

35
00:03:06.600 --> 00:03:10.299
&gt;&gt; Brian Holt: Because all this
stuff Is coming from a user, right?

36
00:03:10.299 --> 00:03:14.211
From to note, right?

37
00:03:14.211 --> 00:03:22.291
And it's the order's important
from to a note, okay?

38
00:03:22.291 --> 00:03:24.679
And you could send something back here,
but we don't need to.

39
00:03:24.679 --> 00:03:30.772
&gt;&gt; Learners: Could you put this post
note function inside the right page?

40
00:03:30.772 --> 00:03:33.978
&gt;&gt; Brian Holt: Yeah, so you could
totally put this directly in here,

41
00:03:33.978 --> 00:03:36.010
just like we did here, get users.

42
00:03:36.010 --> 00:03:40.072
It would get in the same function,
get the form data out and send it,

43
00:03:40.072 --> 00:03:42.081
it would work the exact same way.

44
00:03:42.081 --> 00:03:45.539
I mostly put these out here because
I wanted to write use server.

45
00:03:48.825 --> 00:03:52.975
&gt;&gt; Brian Holt: Right, because this is
now being run in a different context.

46
00:03:52.975 --> 00:03:56.306
If it's directly in here, it already
knows that this is a server component, so

47
00:03:56.306 --> 00:03:57.712
you don't have to have it there.

48
00:03:57.712 --> 00:04:01.298
But I wanted to show you the occasion
where you would write use server.

49
00:04:04.760 --> 00:04:08.615
&gt;&gt; Learners: Is that [COUGH] just for
functions, or if you had a component,

50
00:04:08.615 --> 00:04:09.759
you have to also.

51
00:04:09.759 --> 00:04:12.934
&gt;&gt; Brian Holt: Components
are implicitly using server, yeah, so

52
00:04:12.934 --> 00:04:17.130
it's only use client that you have
to write, yeah, good question.

53
00:04:22.875 --> 00:04:25.074
&gt;&gt; Brian Holt: All right,
are we still running?

54
00:04:25.074 --> 00:04:30.450
We sure are, so let's go back to our home
page and we're gonna write a note and

55
00:04:30.450 --> 00:04:35.773
we can't find undefined properties,
so let's go figure out what that is.

56
00:04:39.289 --> 00:04:40.541
&gt;&gt; Brian Holt: Page here.

57
00:04:45.754 --> 00:04:48.698
&gt;&gt; Brian Holt: Get users
await slash notes,

58
00:04:48.698 --> 00:04:52.592
I probably messed that up, didn't I?

59
00:04:52.592 --> 00:04:55.147
Yep, you got a return.

60
00:04:59.801 --> 00:05:03.353
&gt;&gt; Brian Holt: There we go, so
I did not have return there on line seven,

61
00:05:03.353 --> 00:05:07.793
It was querying the data base,
It just wasn't doing anything with it.

62
00:05:07.793 --> 00:05:11.937
So make sure, yeah, line seven,
return db.all, select star from users.

63
00:05:16.364 --> 00:05:19.661
&gt;&gt; Brian Holt: Okay, so now you can see I
have all the people here in the database.

64
00:05:19.661 --> 00:05:25.124
I can write a note from Brian, let's
write one to Mark since he's not here.

65
00:05:25.124 --> 00:05:28.721
What should we write to
mark in the database?

66
00:05:28.721 --> 00:05:30.078
Because it's like-
&gt;&gt; Learners: Where are you?

67
00:05:30.078 --> 00:05:31.343
Where are you?

68
00:05:31.343 --> 00:05:34.550
&gt;&gt; Brian Holt: Where the are you?

69
00:05:36.866 --> 00:05:40.144
&gt;&gt; Brian Holt: All right, so
now if we go look at my notes,

70
00:05:40.144 --> 00:05:42.523
you can see where the F are you.

71
00:05:42.523 --> 00:05:47.180
[LAUGH] If I bleep it out,
it can go in the course, right, Dustin?

72
00:05:47.180 --> 00:05:48.766
That's the rule.

73
00:05:48.766 --> 00:05:54.585
[LAUGH]
&gt;&gt; Brian Holt: Okay,

74
00:05:54.585 --> 00:05:57.692
questions about that make sense?

75
00:05:57.692 --> 00:05:59.961
Form actions,
that's what those are called, go ahead.

76
00:05:59.961 --> 00:06:03.488
&gt;&gt; Learners: What's the best way to
debug server components in different

77
00:06:03.488 --> 00:06:04.464
environments?

78
00:06:04.464 --> 00:06:08.523
Do you read the logs or
some other method, since debugging in

79
00:06:08.523 --> 00:06:13.153
the Chrome Dev Tools is not always
an option with server components.

80
00:06:13.153 --> 00:06:14.948
&gt;&gt; Brian Holt: So
if you're in the dev environment,

81
00:06:14.948 --> 00:06:17.767
it's usually pretty good that
it forwards server errors.

82
00:06:17.767 --> 00:06:23.868
I mean, let's F around and find out,
as they say, as the kids say.

83
00:06:23.868 --> 00:06:28.731
&gt;&gt; Learners: Is there any way
to set break points for it?

84
00:06:28.731 --> 00:06:33.676
&gt;&gt; Brian Holt: Everything will work just
the way that nothing would apply new here,

85
00:06:33.676 --> 00:06:34.278
right?

86
00:06:34.278 --> 00:06:39.179
So if you were using the debugger
tools here, would work just as well.

87
00:06:44.685 --> 00:06:45.531
&gt;&gt; Brian Holt: Oops.

88
00:06:50.503 --> 00:06:54.535
&gt;&gt; Brian Holt: And I put this on
the other one, so write a note, so

89
00:06:54.535 --> 00:06:57.712
this is on a server component, right?

90
00:06:57.712 --> 00:07:05.227
But I got the error here, so they have
this actually really well handled.

91
00:07:05.227 --> 00:07:08.916
I'm gonna argue it's actually easier to
do it this way with next Js cause they

92
00:07:08.916 --> 00:07:11.952
forward all of your server errors
directly into your browser.

93
00:07:11.952 --> 00:07:14.957
And if we look at our,
it's the same thing here, right?

94
00:07:14.957 --> 00:07:17.000
They actually give you
the snippet of what's wrong here.

95
00:07:17.000 --> 00:07:19.644
&gt;&gt; Learners: I'm assuming that's
specifically because it's being run in dev

96
00:07:19.644 --> 00:07:21.634
mode and
it wouldn't do that in production mode.

97
00:07:21.634 --> 00:07:25.589
&gt;&gt; Brian Holt: Correct, yeah, it wouldn't
include all of the machinery, I mean,

98
00:07:25.589 --> 00:07:27.205
what will actually happen?

99
00:07:27.205 --> 00:07:28.932
I suppose it's just gonna crush, right?

100
00:07:28.932 --> 00:07:30.496
They're gonna get a 500.

101
00:07:34.584 --> 00:07:37.529
&gt;&gt; Brian Holt: I've never shipped
an error, so, I wouldn't know.

102
00:07:37.529 --> 00:07:42.523
[LAUGH] Yeah, I'm sure you'd
hopefully have some error boundary

103
00:07:42.523 --> 00:07:45.438
that would handle it for production.

104
00:07:49.823 --> 00:07:50.963
&gt;&gt; Brian Holt: Other questions?

105
00:07:53.988 --> 00:07:57.459
&gt;&gt; Learners: So, when I click my notes,
I'm not seeing the updates I'm sending.

106
00:07:57.459 --> 00:08:00.055
Is that because I'm reading
a static database or

107
00:08:00.055 --> 00:08:01.965
what do you think went wrong there?

108
00:08:01.965 --> 00:08:04.257
&gt;&gt; Brian Holt: So
you're inserting to the database, and

109
00:08:04.257 --> 00:08:06.812
then you go look at my notes and
it's not there?

110
00:08:06.812 --> 00:08:10.625
&gt;&gt; Learners: Yeah, it's coming in
just fine on the feed and the server,

111
00:08:10.625 --> 00:08:14.152
like the dev server, but
I'm just not seeing it in my.

112
00:08:14.152 --> 00:08:15.906
&gt;&gt; Brian Holt: Are you sending from Brian?

113
00:08:15.906 --> 00:08:20.056
&gt;&gt; Learners: I'm not, is that would be
okay, you can't see everyone's messages.

114
00:08:20.056 --> 00:08:21.841
&gt;&gt; Brian Holt: Yeah,
well eventually this secret teacher feed,

115
00:08:21.841 --> 00:08:23.629
we'll implement that so you can see it.

116
00:08:23.629 --> 00:08:24.747
&gt;&gt; Learners: Gotcha okay.

117
00:08:24.747 --> 00:08:26.627
&gt;&gt; Brian Holt: If you look at our my page,

118
00:08:26.627 --> 00:08:29.963
you can see we're only
looking from user one.

119
00:08:33.653 --> 00:08:35.411
&gt;&gt; Brian Holt: So
it probably is getting written, right?

120
00:08:35.411 --> 00:08:38.183
So if you change this to be
whatever the correct id was,

121
00:08:38.183 --> 00:08:40.004
you probably would find your note.

122
00:08:40.004 --> 00:08:45.355
We just did server actions,
which are super cool, yeah, actions,

123
00:08:45.355 --> 00:08:50.984
server actions is what you would call
that little thing that we did here,

124
00:08:50.984 --> 00:08:56.281
server actions, that's the term
&gt;&gt; Brian Holt: Yeah,

125
00:08:56.281 --> 00:08:59.237
I mean,
it's worthwhile seeing that this out,

126
00:08:59.237 --> 00:09:04.302
this all works in the context of flight as
well, but let's just take a look at that.

127
00:09:04.302 --> 00:09:08.992
So I'm gonna write one from Briana Tanner,

128
00:09:08.992 --> 00:09:13.562
and I'll just say LOL because I'm basic.

129
00:09:13.562 --> 00:09:20.175
And then if we look at the request here,
this is actually what it's sending.

130
00:09:20.175 --> 00:09:23.719
So this is the server protocol for
sending stuff over the wire.

131
00:09:25.744 --> 00:09:28.151
&gt;&gt; Brian Holt: But
name from user to user, one note,

132
00:09:28.151 --> 00:09:32.442
content disposition at some of
these things I don't even know, but

133
00:09:32.442 --> 00:09:35.848
that's what actually is
getting sent over the wire.

134
00:09:35.848 --> 00:09:41.032
That's their API builder that they've kind
of built in here, again, you never have

135
00:09:41.032 --> 00:09:46.300
to care one iota about this, but that's
how it's being implemented, cool, right?

136
00:09:46.300 --> 00:09:47.344
It's kind of interesting.

137
00:09:50.556 --> 00:09:53.712
&gt;&gt; Brian Holt: Because, yeah,
we called an API right under the hood,

138
00:09:53.712 --> 00:09:56.127
it had to get from
the client to the server,

139
00:09:56.127 --> 00:09:59.107
we just didn't have to write
any of that transport.

140
00:10:03.227 --> 00:10:07.527
&gt;&gt; Brian Holt: That's kind of the power
here, I think that's why they went full in

141
00:10:07.527 --> 00:10:12.294
on server like RSCs and next is this
is a really good developer experience.

142
00:10:12.294 --> 00:10:16.592
&gt;&gt; Learners: Since that's being
somewhat abstracted away,

143
00:10:16.592 --> 00:10:20.470
are there any concerns
about performance or

144
00:10:20.470 --> 00:10:26.779
any time where that being abstracted
away becomes kind of a pain point?

145
00:10:26.779 --> 00:10:30.382
&gt;&gt; Brian Holt: As long as you're
within the bounds of next in React,

146
00:10:30.382 --> 00:10:34.463
I can't see why you would do it
any other way that being said,

147
00:10:34.463 --> 00:10:37.281
it is all still just JavaScript, right?

148
00:10:37.281 --> 00:10:42.192
You can still call fetch, you can still
have API endpoints, but I'm interpreting

149
00:10:42.192 --> 00:10:46.835
your question is like, is there a time
where I Could do it and I wouldn't do it.

150
00:10:46.835 --> 00:10:52.343
And I haven't encountered that, I haven't
encountered where time was like I could

151
00:10:52.343 --> 00:10:57.386
write this with React server components,
like the implicit wiring up of it,

152
00:10:57.386 --> 00:11:01.596
and I have opted to not do it,
no performance concerns, right?

153
00:11:01.596 --> 00:11:05.115
Because at the end of the day,
it's just gathering stuff and

154
00:11:05.115 --> 00:11:06.636
sending it over the wire.

155
00:11:06.636 --> 00:11:09.419
&gt;&gt; Learners: Actually had a similar
question around offline, so

156
00:11:09.419 --> 00:11:13.213
would you batch failed calls and
then try to retry them in the app logic or

157
00:11:13.213 --> 00:11:14.996
how do you handle intermittent?

158
00:11:14.996 --> 00:11:20.213
&gt;&gt; Brian Holt: That's good question,
yeah, I mean offline first and

159
00:11:20.213 --> 00:11:25.995
RSCs don't go together,
I can't really see how they would.

160
00:11:25.995 --> 00:11:30.641
You'd have to get real fancy with service
workers in a way that I'm uncomfortable

161
00:11:30.641 --> 00:11:33.012
with, wouldn't recommend it, right?

162
00:11:33.012 --> 00:11:35.718
If offline is important to RSCs in it,
right?

163
00:11:35.718 --> 00:11:38.656
Because it implies the need for a server.

