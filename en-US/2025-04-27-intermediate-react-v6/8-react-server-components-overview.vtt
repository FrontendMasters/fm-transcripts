WEBVTT

1
00:00:00.586 --> 00:00:05.510
&gt;&gt; Brian Holt: Okay, so we have gotten
through static site generation,

2
00:00:05.510 --> 00:00:10.231
server-side rendering, and
now we are fully into this

3
00:00:10.231 --> 00:00:15.360
unknown new territory,
which is React server components.

4
00:00:15.360 --> 00:00:20.897
I reflexively call them RSCs, I'm trying
to at least sprinkle in continually that

5
00:00:20.897 --> 00:00:25.897
they are React server components, but
if I say RSCs, that's what I mean.

6
00:00:25.897 --> 00:00:29.158
So we've talked about
client-side components,

7
00:00:29.158 --> 00:00:31.899
we talked about SSG, we talked about SSR.

8
00:00:31.899 --> 00:00:34.871
But now we're gonna talk about
React server components,

9
00:00:34.871 --> 00:00:36.761
which are relatively new concepts.

10
00:00:36.761 --> 00:00:40.897
It's probably why most of you
are interested in taking this course,

11
00:00:40.897 --> 00:00:44.331
it's the most interesting
new thing about this course.

12
00:00:44.331 --> 00:00:46.959
Let's just dwell a second on
this statement right here,

13
00:00:46.959 --> 00:00:50.418
because I think it's surprising to
some people, it was surprising to me.

14
00:00:50.418 --> 00:00:55.556
I heard about RSCs the first time,
I was at Next Conf, forever ago, and

15
00:00:55.556 --> 00:01:01.570
I was like, they're redoing server
side rendering, interesting, right?

16
00:01:01.570 --> 00:01:04.194
And once I got more and more into that,

17
00:01:04.194 --> 00:01:08.797
I realized that they're actually
entirely different concepts.

18
00:01:08.797 --> 00:01:13.563
You can do RSCs with SSR, you can do one,
you can not do the other,

19
00:01:13.563 --> 00:01:16.532
you can do both, and you can do neither.

20
00:01:16.532 --> 00:01:19.819
So we'd just say they don't really
have too much to do with each other.

21
00:01:19.819 --> 00:01:24.149
The key is with server-side rendering,
you do the initial page load,

22
00:01:24.149 --> 00:01:26.241
you send that down to the user, and

23
00:01:26.241 --> 00:01:31.388
then everything gets taken over by
client-side rendering, that's SSR, right?

24
00:01:31.388 --> 00:01:34.908
React server components are just
components that only ever render on

25
00:01:34.908 --> 00:01:35.580
the server.

26
00:01:35.580 --> 00:01:40.311
So it's actually an ongoing relationship
between the server and the app.

27
00:01:40.311 --> 00:01:45.106
Whereas SSR, once it does its initial
render, it's just done, it's no longer

28
00:01:45.106 --> 00:01:49.495
involved in the equation, client-side
react takes over at that point.

29
00:01:49.495 --> 00:01:53.059
So SSR only speeds up that first page,
that's full stop,

30
00:01:53.059 --> 00:01:55.844
that's all it does ever, or it'll ever do.

31
00:01:55.844 --> 00:02:01.613
RSCs are much more opinionated, much more
integrated with your server, it's why you

32
00:02:01.613 --> 00:02:06.844
need something like Next.js because it
just won't work on a Fastify server.

33
00:02:06.844 --> 00:02:10.820
Despite the fact that we're actually going
to make it work with the Fastify server,

34
00:02:10.820 --> 00:02:12.168
but we're not supposed to.

35
00:02:12.168 --> 00:02:15.954
[LAUGH] So does that make sense?

36
00:02:15.954 --> 00:02:18.954
They're different, so you can have
server-side rendering where you output

37
00:02:18.954 --> 00:02:20.505
everything for that first page render.

38
00:02:20.505 --> 00:02:25.047
And then you can have RSCs after
that where you have an ongoing

39
00:02:25.047 --> 00:02:30.140
relationship between your app both
on the server and on the client.

40
00:02:30.140 --> 00:02:32.184
Or you cannot, you can just say,

41
00:02:32.184 --> 00:02:36.127
here's the first page load
client-side react to take over, or

42
00:02:36.127 --> 00:02:41.110
you can not do server-side rendering and
then you can have RSCs after that fact.

43
00:02:41.110 --> 00:02:44.339
All this to say is they don't have
anything to do with each other,

44
00:02:44.339 --> 00:02:45.582
from that perspective.

45
00:02:45.582 --> 00:02:50.297
So an RSC it's just really this,
it's just a server component that only

46
00:02:50.297 --> 00:02:55.169
renders on the server and then you're
also gonna have client components by

47
00:02:55.169 --> 00:02:58.980
virtue of that only ever do
anything on the client as well.

48
00:02:58.980 --> 00:03:02.851
That's really it, but the cool thing
about a React server component is,

49
00:03:02.851 --> 00:03:07.098
the client actually never receives any of
the code of what happens on the server,

50
00:03:07.098 --> 00:03:08.046
why is that cool?

51
00:03:08.046 --> 00:03:11.982
Now you can start making SQL
queries in your React components,

52
00:03:11.982 --> 00:03:14.590
because it's all on the server, right?

53
00:03:14.590 --> 00:03:16.707
And I know that's a little weird,

54
00:03:16.707 --> 00:03:21.087
if it doesn't feel weird you haven't
been writing React long enough.

55
00:03:21.087 --> 00:03:26.335
But to do an effect essentially that
directly just queries your database should

56
00:03:26.335 --> 00:03:31.602
feel a little strange but it's fine
because it's all happening on the server.

57
00:03:31.602 --> 00:03:34.291
And then all that gets sent
down at the end of it,

58
00:03:34.291 --> 00:03:37.608
it's not a React component at all,
it's just mark-up.

59
00:03:37.608 --> 00:03:42.508
Or it's React flight protocol
we're gonna get there, but

60
00:03:42.508 --> 00:03:47.506
for all intents and purposes,
it's just a condensed HTML,

61
00:03:47.506 --> 00:03:51.625
is really what ends up
getting sent over the wire.

62
00:03:51.625 --> 00:03:57.828
So, why did we do this, why are we here,
why are you listening to me?

63
00:03:57.828 --> 00:04:00.322
These are all questions
I have no answers for.

64
00:04:00.322 --> 00:04:03.134
But no matter what you do with React,

65
00:04:03.134 --> 00:04:08.957
large swaths of your app are going to
be just mark-up, just stuff, right?

66
00:04:08.957 --> 00:04:13.369
Stuff that doesn't have
any sort of interactivity.

67
00:04:13.369 --> 00:04:17.371
Let's talk about just this body,
right, this is a React app,

68
00:04:17.371 --> 00:04:22.145
there's nothing interactive about
this body component in here, right?

69
00:04:22.145 --> 00:04:26.746
It's just reading from a markdown file and
displaying you a bunch of mark-up,

70
00:04:26.746 --> 00:04:31.364
it's inert, right, it doesn't do anything,
it just displays, it just is.

71
00:04:31.364 --> 00:04:37.087
Now, if this was a client-side React app,
which it very well could have been, right?

72
00:04:37.087 --> 00:04:39.410
This would still exist in React code,
right?

73
00:04:39.410 --> 00:04:44.100
It would still be wired up to
be interactive even if it could

74
00:04:44.100 --> 00:04:46.025
never be interactive.

75
00:04:46.025 --> 00:04:48.606
And that's what React server components
kind of like lean into that idea.

76
00:04:48.606 --> 00:04:51.966
It's like, look,
most of this is never interactive,

77
00:04:51.966 --> 00:04:54.468
let's just simplify that aspect of it and

78
00:04:54.468 --> 00:04:59.041
just say this is just gonna be rendered
on the server and then it's just never

79
00:04:59.041 --> 00:05:03.202
going to change after that, so
it has no interactivity afterwards.

80
00:05:03.202 --> 00:05:04.145
Yeah, Mark.

81
00:05:04.145 --> 00:05:10.243
&gt;&gt; Mark: A clarification from chat, so
essentially it reduces the hydration step.

82
00:05:10.243 --> 00:05:16.288
&gt;&gt; Brian Holt: So, at best I can say
the answer is it changes the relationship

83
00:05:16.288 --> 00:05:20.713
to hydration, [LAUGH] it's just different.

84
00:05:20.713 --> 00:05:22.723
Or maybe stated differently,

85
00:05:22.723 --> 00:05:27.513
your framework will take care of this
always, right, you will never be in

86
00:05:27.513 --> 00:05:32.407
charge of this unless you're wild enough
like us to just do it yourselves.

87
00:05:32.407 --> 00:05:36.995
More what is interesting is that when
you go to render a component and

88
00:05:36.995 --> 00:05:39.664
it sees that it's a server component.

89
00:05:39.664 --> 00:05:43.585
Normally it would just look into
the bundle, find the code for it,

90
00:05:43.585 --> 00:05:47.170
run the React code and
then render out the component for you.

91
00:05:47.170 --> 00:05:50.988
In our case, it's just gonna call
the server and the server's gonna say,

92
00:05:50.988 --> 00:05:52.270
here's your mark-up.

93
00:05:52.270 --> 00:05:56.676
So that's the relationship that's
strongly changing here is,

94
00:05:56.676 --> 00:06:01.256
what happens when I render a component
after the initial page load.

95
00:06:01.256 --> 00:06:05.777
And I want you to focus on
that cuz the initial page

96
00:06:05.777 --> 00:06:08.966
load is less interesting here.

97
00:06:08.966 --> 00:06:13.131
&gt;&gt; Brian Holt: Yeah, I feel comfortable
with that answer, go ahead.

98
00:06:13.131 --> 00:06:18.001
&gt;&gt; Mark: Will it reduce the amount
of JavaScript that is rand?

99
00:06:18.001 --> 00:06:23.062
&gt;&gt; Brian Holt: Yes, so that is one of
the benefits of RSCs, is that all of these

100
00:06:23.062 --> 00:06:28.221
server components don't exist
in your client bundle anymore,

101
00:06:28.221 --> 00:06:32.154
all of those components
only live on the server.

102
00:06:32.154 --> 00:06:37.647
It's basically just like a stub to say,
if this component gets rendered,

103
00:06:37.647 --> 00:06:40.884
call the server for
what this is going to be.

104
00:06:40.884 --> 00:06:43.939
As opposed to right now,
when you have a client side component,

105
00:06:43.939 --> 00:06:46.610
all of the code that renders
that comes with the bundle.

106
00:06:46.610 --> 00:06:49.188
So your bundle, in theory,
can shrink a lot,

107
00:06:49.188 --> 00:06:52.709
cuz most of these components will
actually live on the server.

108
00:06:54.944 --> 00:06:57.784
&gt;&gt; Brian Holt: That is actually probably
the biggest difference here that we're

109
00:06:57.784 --> 00:06:58.550
concerned with.

110
00:07:02.875 --> 00:07:05.568
&gt;&gt; Brian Holt: Good questions,
other questions?

111
00:07:09.426 --> 00:07:13.944
&gt;&gt; Brian Holt: It's confusing, to be super
honest with you, this is confusing stuff.

112
00:07:13.944 --> 00:07:20.212
And it took me a while reading blog posts,
going through it, writing examples apps,

113
00:07:20.212 --> 00:07:25.888
reading their sample apps for me to
finally just have that light bulb moment.

114
00:07:25.888 --> 00:07:30.471
It's like, none of this has
to do with anything, right,

115
00:07:30.471 --> 00:07:33.208
it's an entirely new concept here.

116
00:07:33.208 --> 00:07:35.161
&gt;&gt; Brian Holt: Okay.

117
00:07:35.161 --> 00:07:38.706
&gt;&gt; Brian Holt: It definitely blends or
it blurs the line a little bit of

118
00:07:38.706 --> 00:07:43.032
what happens on the server and
what happens on the client, right?

119
00:07:43.032 --> 00:07:48.623
Because you're gonna be weaving in and out
of, this happens on the client, this one

120
00:07:48.623 --> 00:07:54.596
happens on the server and it's gonna be
fairly seamless for you for the most part.

121
00:07:54.596 --> 00:07:58.140
&gt;&gt; Brian Holt: What you're gonna find here
is Next.js one in with the controversial

122
00:07:58.140 --> 00:07:58.687
opinion.

123
00:07:58.687 --> 00:08:02.733
I think I'm okay to say that it's
a controversial opinion, that everything

124
00:08:02.733 --> 00:08:06.796
is a RSC by default, and that you have
to opt into the client side components.

125
00:08:06.796 --> 00:08:11.177
So it just assumes every components you're
going to write from here on Next.js is

126
00:08:11.177 --> 00:08:12.329
a server component.

127
00:08:12.329 --> 00:08:16.503
And that when you need
client side interactivity,

128
00:08:16.503 --> 00:08:20.688
that you're gonna say this
is a client component.

129
00:08:20.688 --> 00:08:24.417
Some people like that opinion, I can
certainly see the valid take of why they

130
00:08:24.417 --> 00:08:27.285
would do it that way because
many components are this way.

131
00:08:27.285 --> 00:08:30.336
It might even be most
components are this way,

132
00:08:30.336 --> 00:08:34.729
they probably have data to tell
you one way or the other, I don't.

133
00:08:34.729 --> 00:08:38.918
The reason why people find it
controversial, myself included,

134
00:08:38.918 --> 00:08:43.194
is that it's just a paradigm
departure of how we write React code.

135
00:08:43.194 --> 00:08:47.550
For example, you cannot use
useState in a server component,

136
00:08:47.550 --> 00:08:49.814
that's client-side state and

137
00:08:49.814 --> 00:08:55.372
a server component can't track
client-side state, so it's hard, right?

138
00:08:55.372 --> 00:08:57.618
What you're gonna find about this,

139
00:08:57.618 --> 00:09:01.966
is like this does just change that you
have to write React and it adds this

140
00:09:01.966 --> 00:09:06.546
additional thread in your brain of am I
on the client, or am I on the server.

141
00:09:06.546 --> 00:09:10.073
When you didn't have to have that
before and that sucks a bit, right?

142
00:09:10.073 --> 00:09:12.872
It's additional cognitive
load that you have

143
00:09:12.872 --> 00:09:16.610
to carry when you're writing a React app,
and that's hard.

144
00:09:16.610 --> 00:09:18.070
Yeah, question.

145
00:09:18.070 --> 00:09:20.866
&gt;&gt; Mark: Would RSCs be better or

146
00:09:20.866 --> 00:09:26.022
worse when it comes to slow connections?

147
00:09:26.022 --> 00:09:30.323
&gt;&gt; Brian Holt: Everyone's favorite answer,
it depends, [LAUGH].

148
00:09:30.323 --> 00:09:36.620
It depends, there's no slam dunk here,
because on a slow connection,

149
00:09:36.620 --> 00:09:43.763
if you download the entire React app, the
entire app is now on your phone, right?

150
00:09:43.763 --> 00:09:46.427
And then you can just go through
everything feels nice and

151
00:09:46.427 --> 00:09:49.492
zippy because everything is just
running locally on your phone.

152
00:09:49.492 --> 00:09:53.093
When you have a React server component,
every time you change the components,

153
00:09:53.093 --> 00:09:55.091
it's gonna make a server request, right?

154
00:09:55.091 --> 00:09:58.941
So latency,
not only becomes an initial problem,

155
00:09:58.941 --> 00:10:01.995
it becomes an ongoing problem, right?

156
00:10:01.995 --> 00:10:08.351
But if you have these monster RSCs
that have lots of data in them and

157
00:10:08.351 --> 00:10:14.262
those renders are really hard
on the device for some reason.

158
00:10:14.262 --> 00:10:19.785
Let's say rendering a million line table,
right, one, why?

159
00:10:19.785 --> 00:10:24.963
But two,
that happening on the server is gonna be

160
00:10:24.963 --> 00:10:31.658
much better than probably happening
on an old Android device,

161
00:10:31.658 --> 00:10:37.241
where the CPU just can't handle it,
so it depends.

162
00:10:37.241 --> 00:10:41.190
Your time to first meaningful paint
is also gonna be quite improved, and

163
00:10:41.190 --> 00:10:45.280
as you can see we're spidering out into
these all these kind of edge cases.

164
00:10:45.280 --> 00:10:50.409
But let's say you have
an app that has 40 pages,

165
00:10:50.409 --> 00:10:54.577
and every user, on average, uses two.

166
00:10:54.577 --> 00:10:59.364
In theory, they're only get the two
components that they need to render

167
00:10:59.364 --> 00:11:02.986
those things and
they're leaving out the other 38.

168
00:11:02.986 --> 00:11:06.768
Likely that's a better experience for them
depending on how heavy those pages are.

169
00:11:12.087 --> 00:11:15.200
&gt;&gt; Brian Holt: On average they use
37 of those page on every visit,

170
00:11:15.200 --> 00:11:16.592
it could suck, right?

171
00:11:16.592 --> 00:11:19.865
So it could go either way as well.

172
00:11:19.865 --> 00:11:26.115
So, I'm sorry for not clean answer,
but it's not a clean answer, right?

173
00:11:26.115 --> 00:11:30.338
Honestly, what we've gotten into is like,
is it better to have a PHP server side pre

174
00:11:30.338 --> 00:11:34.462
rendered app, or is it better to have
a React app, that single page application?

175
00:11:34.462 --> 00:11:38.196
That is the exact same discussion
that we're having right now.

176
00:11:38.196 --> 00:11:41.958
In fact, many people have pointed out that
RSCs feel a lot like PHP, and I would

177
00:11:41.958 --> 00:11:46.181
wholeheartedly endorse that notion from
actually a generally positive perspective.

178
00:11:46.181 --> 00:11:52.567
It's like I have a pretty favorable
perspective of PHP from that perspective.

179
00:11:52.567 --> 00:11:56.059
This leans much more into that
kind of same paradigm, and

180
00:11:56.059 --> 00:11:58.844
it's the same argument that we're having.

181
00:11:58.844 --> 00:12:05.539
Okay, was that a sufficiently complicated
answer to that somewhat simple question?

182
00:12:05.539 --> 00:12:11.955
[LAUGH] Okay, hopefully at the end of
this, what I really want you to have is,

183
00:12:11.955 --> 00:12:16.973
its complicated relationship with RSCs,
cuz that's kind

184
00:12:16.973 --> 00:12:22.218
of the relationship that I have,
and I'm projecting as I do.

185
00:12:22.218 --> 00:12:27.342
Okay,

186
00:12:33.922 --> 00:12:36.157
&gt;&gt; Brian Holt: The coolest part about this

187
00:12:36.157 --> 00:12:41.401
is it makes a lot of this things were
you had to make an API route and

188
00:12:41.401 --> 00:12:46.274
a client-side app route together
to accomplish one task.

189
00:12:46.274 --> 00:12:50.655
A good example of I have a form that
takes in 15 things from the user and

190
00:12:50.655 --> 00:12:52.749
then it saves it to the database.

191
00:12:52.749 --> 00:12:56.201
How would you do that right now
with a client-side React app?

192
00:12:56.201 --> 00:12:59.035
Well, okay, I get my form component,
and then on submit,

193
00:12:59.035 --> 00:13:00.407
I submit to an API endpoint.

194
00:13:00.407 --> 00:13:03.881
The endpoint validates everything,
saves to the database,

195
00:13:03.881 --> 00:13:06.431
responds back, hey, everything's okay.

196
00:13:06.431 --> 00:13:10.941
With RSCs, this becomes just
incredibly simple we'll do server

197
00:13:10.941 --> 00:13:15.290
actions here in just a second,
and it's all one step, right?

198
00:13:15.290 --> 00:13:20.564
I have to write an API endpoint,
your React app basically takes

199
00:13:20.564 --> 00:13:27.542
care of generating micro API endpoints for
you because it's all one context to it.

200
00:13:27.542 --> 00:13:32.666
So that kind of code gets just
wildly simplified by RSCs,

201
00:13:32.666 --> 00:13:38.773
it's actually very, very cool,
I really do enjoy that part of it.

202
00:13:38.773 --> 00:13:42.081
You'll see a strong upside and a strong
downside here, if I'm doing a good job,

203
00:13:42.081 --> 00:13:43.311
hopefully you will see both.

204
00:13:43.311 --> 00:13:49.562
And that allows you to use things like
secrets, right, so if you have OpenAI,

205
00:13:49.562 --> 00:13:55.547
if I have secrets to make requests to
their service or something like that.

206
00:13:55.547 --> 00:13:59.523
I can do that directly from my
components now as opposed to on my

207
00:13:59.523 --> 00:14:01.059
Fastify API endpoint.

208
00:14:01.059 --> 00:14:07.665
So that kind of melding of concerns
is nice, it works out really well.

209
00:14:07.665 --> 00:14:12.797
Yeah, it makes it very fluent to write
these kind of client to server workflows,

210
00:14:12.797 --> 00:14:15.367
yeah, that's a good way of putting it.

211
00:14:15.367 --> 00:14:20.104
Don't write RSCs by hand, it's all over
their docs, please don't do this yourself,

212
00:14:20.104 --> 00:14:22.793
please rely on a framework
that does this for you,

213
00:14:22.793 --> 00:14:24.858
because it's a really unstable API.

214
00:14:24.858 --> 00:14:29.081
But I don't like that, I like figuring out
what everything is happening underneath

215
00:14:29.081 --> 00:14:31.577
the hood, and
I think it makes me more grateful for

216
00:14:31.577 --> 00:14:34.749
the abstraction, and
it makes me use the abstraction better.

217
00:14:34.749 --> 00:14:42.656
So we're going to write everything down to
we're gonna write flight protocol by hand.

218
00:14:42.656 --> 00:14:45.919
RSCs are meant to be
implemented by frameworks.

219
00:14:45.919 --> 00:14:51.067
React like to maintain that it itself is
a library, it is not a framework, I think

220
00:14:51.067 --> 00:14:56.238
that is a meaningless distinction that
it is both neither and who cares, right?

221
00:14:56.238 --> 00:15:01.434
But RSCs really are meant to be
implemented by Next.js, by TanStack,

222
00:15:01.434 --> 00:15:06.731
by Remix/React Router v7/ whatever
they decide to call it next week.

223
00:15:06.731 --> 00:15:10.625
It's a really deep integration
into whatever you're shipping.

224
00:15:10.625 --> 00:15:14.126
So right now it's node only, I think that
tracks because it has to render your React

225
00:15:14.126 --> 00:15:16.091
app, but
there's some talk that they could.

226
00:15:16.091 --> 00:15:20.992
It's technically possible to integrate
this into, like a Rust app or

227
00:15:20.992 --> 00:15:26.073
something like that, no one is doing
it right now, but it could be done.

228
00:15:26.073 --> 00:15:28.950
So right now,
your options are basically just Next.js,

229
00:15:28.950 --> 00:15:31.661
it's the only one that fully
implements everything.

230
00:15:31.661 --> 00:15:34.703
They make sense because about half the
React core team works at Vercel at this

231
00:15:34.703 --> 00:15:35.903
point, they ship Next.js.

232
00:15:35.903 --> 00:15:40.134
So, the React Router team
has expressed that they

233
00:15:40.134 --> 00:15:44.073
are going to ship part of it,
but not all of it.

234
00:15:44.073 --> 00:15:47.781
And then I actually spoke to last week,
and

235
00:15:47.781 --> 00:15:53.893
he said at some point they'll start
doing some of it in TanStack Start.

236
00:15:53.893 --> 00:15:57.525
&gt;&gt; Brian Holt: I don't know enough to
say what the Remix plan is for it, but

237
00:15:57.525 --> 00:16:02.119
the Next plan is just what I told you,
that everything is an RSC by default.

238
00:16:02.119 --> 00:16:07.222
And TanStack Start is the opposite
everything is a client side by default,

239
00:16:07.222 --> 00:16:09.737
and you opt into server components.

240
00:16:09.737 --> 00:16:11.773
So both valid for different reasons,

241
00:16:11.773 --> 00:16:14.453
you'll have to decide
which one you like better.

242
00:16:14.453 --> 00:16:16.536
&gt;&gt; Speaker 3: What's
the point of React Router,

243
00:16:16.536 --> 00:16:21.189
v7 doing it if they already have server
client split for some actions, what's

244
00:16:21.189 --> 00:16:26.063
the advantage of having RSCs versus what
they do today or they're splitting code?

245
00:16:26.063 --> 00:16:29.107
&gt;&gt; Brian Holt: I won't speculate
too much cuz I don't really know,

246
00:16:29.107 --> 00:16:33.979
the only thing I'll say about specifically
the advantage of opting into the whole RSC

247
00:16:33.979 --> 00:16:36.160
thing is that it allows you to access.

248
00:16:36.160 --> 00:16:41.312
Be internals of React and
ship this really compact,

249
00:16:41.312 --> 00:16:48.585
almost binary like format that then
gets interpreted directly by React.

250
00:16:48.585 --> 00:16:53.056
But you'd have to look further
cuz I don't know after that,

251
00:16:53.056 --> 00:16:57.277
I haven't written Remix in a long time,
so that's why.

252
00:16:57.277 --> 00:16:58.717
So, RSCs work today and

253
00:16:58.717 --> 00:17:02.759
Next.js don't work at all in either
one of these to my knowledge.

254
00:17:02.759 --> 00:17:09.386
I think there's an unstable branch of both
of these that have some RSC work in them,

255
00:17:09.386 --> 00:17:14.511
but you'd have to go look, so
today, your option is Next.js.

256
00:17:14.511 --> 00:17:19.864
And both of these frameworks have said
that they're not gonna support all of it,

257
00:17:19.864 --> 00:17:22.155
that they only support part of it.

258
00:17:22.155 --> 00:17:29.689
So we're gonna write first our NotePasser
app, which is going to be just pure Node,

259
00:17:29.689 --> 00:17:35.537
it's gonna have Node Next.js, so
that you can see what it does.

260
00:17:35.537 --> 00:17:40.076
And then we're gonna start writing some
Next.js, and you're gonna be very grateful

261
00:17:40.076 --> 00:17:43.471
once we're into [INAUDIBLE]
everything that it does for you.

262
00:17:43.471 --> 00:17:46.170
&gt;&gt; Brian Holt: So
the app we're gonna build is NotePasser,

263
00:17:46.170 --> 00:17:50.289
remember in school when you used to
have to like rely on penmanship and

264
00:17:50.289 --> 00:17:53.426
stealthiness to get your
notes to your classmates.

265
00:17:53.426 --> 00:17:59.140
If you don't, you're probably Gen Alpha or
something like that, and bless you.

266
00:17:59.140 --> 00:18:04.446
Back in my day, we couldn't text because
there was no such thing as texting, right?

267
00:18:04.446 --> 00:18:07.666
That's not totally true, there was
texting my time was in high school, but

268
00:18:07.666 --> 00:18:11.258
we're gonna build an app that kind of
approximate that experience, it'll be fun.

269
00:18:11.258 --> 00:18:13.198
Yeah, one note I just
wanna throw out here,

270
00:18:13.198 --> 00:18:16.975
I had originally built this with a full on
auth provider, and I realized afterwards,

271
00:18:16.975 --> 00:18:18.296
I was like why am I doing this?

272
00:18:18.296 --> 00:18:20.601
This teaches you nothing about React.

273
00:18:20.601 --> 00:18:24.607
So I'm gonna leave it as an exercise to
you afterwards is like, go build auth on

274
00:18:24.607 --> 00:18:28.750
top of this, it could be a fun kind of way
to learn more about some of these things.

275
00:18:28.750 --> 00:18:31.416
But we are just going to assume that
the user is always user ID 1 and

276
00:18:31.416 --> 00:18:33.225
that they're always correctly logged in.

277
00:18:33.225 --> 00:18:38.197
That's why I didn't add it here,
is because it was a huge distraction to

278
00:18:38.197 --> 00:18:41.634
get pretty protected routes and
stuff like that.

279
00:18:41.634 --> 00:18:44.716
Yeah, and then I get left to
some ideas here Neon Auth,

280
00:18:44.716 --> 00:18:49.406
this is the one that I worked on at Neon,
but like Clerk, Descope, there's a bunch

281
00:18:49.406 --> 00:18:53.638
of other cool auth providers out there
that you can definitely try as well.

