WEBVTT

1
00:00:00.192 --> 00:00:03.455
&gt;&gt; Brian Holt: Normal client side thing,
we need to take this a step further,

2
00:00:03.455 --> 00:00:05.563
cuz now we're gonna have this balance.

3
00:00:05.563 --> 00:00:08.174
Some of this is gonna
happen on the servers, and

4
00:00:08.174 --> 00:00:12.483
then something needs to happen on
the client to actually render this, right,

5
00:00:12.483 --> 00:00:14.201
or take over the rendered app.

6
00:00:14.201 --> 00:00:18.704
So in other words, we have to have this
app, and everything that's a child of

7
00:00:18.704 --> 00:00:22.325
the app needs to be able to happen
both in client and on server.

8
00:00:22.325 --> 00:00:25.857
But we need something that's actually
going to instantiate it on the client

9
00:00:25.857 --> 00:00:28.022
side, that's not going
to run on the server.

10
00:00:28.022 --> 00:00:31.831
So we're gonna create this client.js file,

11
00:00:31.831 --> 00:00:36.138
it's gonna be really short,
import hydrateRoot.

12
00:00:36.138 --> 00:00:41.222
This is really similar to the create root,
but hydrate basically assumes

13
00:00:41.222 --> 00:00:46.229
that whatever's coming in is going
to be server side rendered, right?

14
00:00:46.229 --> 00:00:49.796
So it's like, here is existing markup,
make sure it's a good markup, and

15
00:00:49.796 --> 00:00:50.925
then take over the app.

16
00:00:50.925 --> 00:00:55.339
That's what hydrateRoot does,
versus create root basically says,

17
00:00:55.339 --> 00:00:56.773
here's a component.

18
00:00:56.773 --> 00:01:00.917
Blow away anything that's on the interior
of here, and then render my stuff into it.

19
00:01:03.194 --> 00:01:08.855
&gt;&gt; Brian Holt: Import
createElement as h and

20
00:01:08.855 --> 00:01:15.200
import App from ./App, okay?

21
00:01:15.200 --> 00:01:20.336
HydrateRoot (document.getElementById

22
00:01:20.336 --> 00:01:25.965
"root"),
&gt;&gt; Brian Holt: And

23
00:01:25.965 --> 00:01:31.560
right there,
&gt;&gt; Brian Holt: h(App).

24
00:01:34.953 --> 00:01:37.723
&gt;&gt; Brian Holt: Okay, that's it.

25
00:01:37.723 --> 00:01:40.009
If you remember,
from complete intro to React,

26
00:01:40.009 --> 00:01:43.424
this looks really similar to what we
would normally write there as well.

27
00:01:43.424 --> 00:01:46.502
The other nice thing to do here is let's
say you do have Google Analytics or

28
00:01:46.502 --> 00:01:49.347
you have other stuff that needs to
run in the browser, this is safe.

29
00:01:49.347 --> 00:01:52.164
This is a safe area that you can
do anything that needs to happen

30
00:01:52.164 --> 00:01:55.087
on the browser, because this will
only execute on the browser,

31
00:01:55.087 --> 00:01:57.106
none of this will happen
on the server side.

32
00:01:57.106 --> 00:01:59.346
&gt;&gt; Speaker 2: Actually,
one other question on that.

33
00:01:59.346 --> 00:02:04.702
Is this considered a security
boundary where you can trust that

34
00:02:04.702 --> 00:02:09.856
nothing's going to execute or
could this be circumvented if

35
00:02:09.856 --> 00:02:15.934
someone is trying to get data to execute
in the server side of the build?

36
00:02:15.934 --> 00:02:20.037
&gt;&gt; Brian Holt: I guess say more,
who are we worried about here?

37
00:02:20.037 --> 00:02:23.397
&gt;&gt; Speaker 2: I was just saying,
if you have code upstream,

38
00:02:23.397 --> 00:02:28.136
can you reasonably assume that
there are no areas where this would

39
00:02:28.136 --> 00:02:31.081
execute on the server side of the build?

40
00:02:31.081 --> 00:02:32.656
&gt;&gt; Brian Holt: This could never
execute on the server side,

41
00:02:32.656 --> 00:02:33.780
is that what you're asking me?

42
00:02:33.780 --> 00:02:34.453
&gt;&gt; Speaker 2: Yeah, exactly.

43
00:02:34.453 --> 00:02:37.162
&gt;&gt; Brian Holt: Yeah, exactly,
because we won't import this.

44
00:02:37.162 --> 00:02:42.482
On the server, we're going to import app,
and we're not going to import client,

45
00:02:42.482 --> 00:02:45.751
so both client and
app will import app separately.

46
00:02:45.751 --> 00:02:46.552
&gt;&gt; Speaker 2: Okay, I got you.

47
00:02:46.552 --> 00:02:52.401
&gt;&gt; Brian Holt: Yeah, so this client will
never get imported into your server, yeah.

48
00:02:52.401 --> 00:02:54.179
But you still wrote clients.

49
00:02:54.179 --> 00:02:57.639
So if there's a security problem
with client, it's cuz you wrote it.

50
00:02:57.639 --> 00:03:02.521
[LAUGH] Okay, so do you trust yourself?

51
00:03:02.521 --> 00:03:04.603
I don't trust myself.

52
00:03:04.603 --> 00:03:11.361
Okay, so we're going to create a new
file here that's gonna be server.js.

53
00:03:11.361 --> 00:03:14.452
And this is gonna look pretty similar
to before, except it's gonna be a bit

54
00:03:14.452 --> 00:03:17.117
simpler, because we're gonna
have Fastify to help us out now.

55
00:03:17.117 --> 00:03:21.828
So import fastify from fastify,

56
00:03:21.828 --> 00:03:28.560
import fastifyStatic from fastify/static,

57
00:03:28.560 --> 00:03:34.625
import (readFileSync) from node:fs.

58
00:03:34.625 --> 00:03:37.430
If you wanna copy and
paste all of these imports,

59
00:03:37.430 --> 00:03:39.835
I don't really have a problem with that.

60
00:03:39.835 --> 00:03:46.371
I'm just gonna keep writing them,
because I'm a glutton for punishment.

61
00:03:46.371 --> 00:03:49.275
Import (fileURLToPath).

62
00:03:52.936 --> 00:03:57.241
&gt;&gt; Brian Holt: Import path,
{dirname} from no path,

63
00:03:57.241 --> 00:04:00.689
we're gonna have to do Notepad.

64
00:04:00.689 --> 00:04:04.540
We're gonna have to do the same song and
dance with the dirname that we did before.

65
00:04:04.540 --> 00:04:07.469
You are free to again copy and
paste that from your previous one.

66
00:04:07.469 --> 00:04:10.289
That's literally what I do when
I go from project to project.

67
00:04:10.289 --> 00:04:14.191
It's like I look at my previous projects,
like, all right, how did I do this again?

68
00:04:14.191 --> 00:04:15.709
And then I just copy and paste it.

69
00:04:15.709 --> 00:04:17.715
RenderToString, this is kind of a fun one.

70
00:04:17.715 --> 00:04:21.874
RenderToString, notice that there's,
we did static before, right?

71
00:04:21.874 --> 00:04:25.275
And now, we're gonna do renderToString.

72
00:04:25.275 --> 00:04:26.876
That seems like they should
be the same thing, right?

73
00:04:26.876 --> 00:04:28.650
Why are they different?

74
00:04:28.650 --> 00:04:32.265
StaticMarkup, like you
saw in the previous one,

75
00:04:32.265 --> 00:04:36.840
there is no additional React
information added to the string.

76
00:04:36.840 --> 00:04:41.683
Whereas renderToString is actually gonna
still have all the React metadata that

77
00:04:41.683 --> 00:04:44.457
it needs to hydrate and
all the proper hooks and

78
00:04:44.457 --> 00:04:48.035
all that stuff that it needs to
take over on the client side.

79
00:04:48.035 --> 00:04:51.253
So you use renderToString
when you intend on hydrating,

80
00:04:51.253 --> 00:04:54.950
use renderToStaticMarkup when
you don't intend on hydrating.

81
00:04:54.950 --> 00:04:57.343
Now, you might ask,
what happens if I use renderToString and

82
00:04:57.343 --> 00:04:58.501
then just don't hydrate it?

83
00:04:58.501 --> 00:05:04.380
It still works, it's just bigger than it
needs to be, so that's the difference.

84
00:05:04.380 --> 00:05:09.315
We could also do renderToPipeableStream.

85
00:05:09.315 --> 00:05:11.426
This would work and
then you stream the markup.

86
00:05:11.426 --> 00:05:17.524
So React will give partial chunks
to the client to be able to render.

87
00:05:17.524 --> 00:05:21.168
We're about to do that with React server
components, so I wanted to show you both,

88
00:05:21.168 --> 00:05:22.639
but that would work here as well.

89
00:05:26.812 --> 00:05:34.649
&gt;&gt; Brian Holt: Okay,
import {createElement} from React as h,

90
00:05:34.649 --> 00:05:40.674
and then import App from ./App.js.

91
00:05:45.856 --> 00:05:49.516
&gt;&gt; Brian Holt: Okay, again, you can copy
and paste this from our previous project,

92
00:05:49.516 --> 00:05:50.954
you can ask ChatGPT for it.

93
00:05:50.954 --> 00:05:55.739
You can type it out with me as well,

94
00:05:55.739 --> 00:06:00.854
but it's just const _ _filename =

95
00:06:00.854 --> 00:06:06.797
fileURLToPath (import.meta.url),

96
00:06:06.797 --> 00:06:12.077
and then const _ _dirname = dirname

97
00:06:12.077 --> 00:06:16.544
_ _filename, and now const.

98
00:06:16.544 --> 00:06:21.325
Now, this __dirname will be correctly of
where we are executing our project from.

99
00:06:21.325 --> 00:06:24.315
I believe that they're gonna fix this for
future versions of Node,

100
00:06:24.315 --> 00:06:28.258
because maybe I've complained enough, but
certainly people have complained enough.

101
00:06:28.258 --> 00:06:31.805
We just expect this to be defined,
and it's useful everywhere, right?

102
00:06:34.740 --> 00:06:38.766
&gt;&gt; Brian Holt: They're trying to
get away from like globals, right?

103
00:06:38.766 --> 00:06:43.063
I respect the concept, but
in practice, it's just annoying.

104
00:06:45.316 --> 00:06:49.479
&gt;&gt; Brian Holt: Okay, const shell,
this should look familiar to you,

105
00:06:49.479 --> 00:06:57.696
readFileSync (path.join _ _,
&gt;&gt; Brian Holt: (__dirname, "dist").

106
00:06:57.696 --> 00:07:02.643
So we're actually gonna grab
the built version instead

107
00:07:02.643 --> 00:07:05.913
of this generic version here, why?

108
00:07:05.913 --> 00:07:12.569
Well, because the built version will have
the correct script tag URLs in them.

109
00:07:12.569 --> 00:07:17.058
I'll show you here in a little bit,
but that's why.

110
00:07:17.058 --> 00:07:22.100
And this is utf8,
&gt;&gt; Brian Holt: const

111
00:07:22.100 --> 00:07:26.662
app = fastify or you can put express,
anything here, and

112
00:07:26.662 --> 00:07:31.334
then we're gonna say
app.register(fastifyStatic).

113
00:07:31.334 --> 00:07:36.327
We need to serve our index.html,
we need also to serve

114
00:07:36.327 --> 00:07:40.677
our script file that
we're about to generate.

115
00:07:43.143 --> 00:07:47.872
&gt;&gt; Brian Holt: Okay, give it the root,
this is all Fastify stuff.

116
00:07:47.872 --> 00:07:51.457
If you don't really understand Fastify,
it's not the point of this course.

117
00:07:51.457 --> 00:07:53.501
We're just setting up Fastify to work.

118
00:07:57.677 --> 00:08:02.313
&gt;&gt; Brian Holt: And prefix:, this is
where it's gonna get the files from.

119
00:08:02.313 --> 00:08:05.157
Now, we get to write some of the fun part.

120
00:08:05.157 --> 00:08:10.084
First thing we're gonna do is
we're gonna say const parts =

121
00:08:10.084 --> 00:08:14.058
shell.split on ROOT,
just like we did before.

122
00:08:14.058 --> 00:08:17.769
We did replace, and
now we're gonna do split, why?

123
00:08:17.769 --> 00:08:20.549
When someone connects and
says, hey, I want this,

124
00:08:20.549 --> 00:08:23.531
we wanna immediately give
them the first part, right?

125
00:08:23.531 --> 00:08:25.016
We wanna give them the head tag,

126
00:08:25.016 --> 00:08:27.548
that's the really the part
that I care the most about.

127
00:08:27.548 --> 00:08:29.618
Because while we're rendering the app,

128
00:08:29.618 --> 00:08:33.770
like, running all of the React component
stuff, they can be downloading the CSS.

129
00:08:33.770 --> 00:08:35.698
They can be downloading the script tags.

130
00:08:35.698 --> 00:08:38.503
They can be downloading all
that stuff that that, you know,

131
00:08:38.503 --> 00:08:40.375
that stuff that we put into the head tag.

132
00:08:40.375 --> 00:08:45.176
So we can basically make it as
concurrent as possible rather than as

133
00:08:45.176 --> 00:08:47.074
sequential as possible.

134
00:08:47.074 --> 00:08:48.613
And then once the app finishes,

135
00:08:48.613 --> 00:08:51.009
then we can just flush out
the second part of this.

136
00:08:53.094 --> 00:08:57.285
&gt;&gt; Brian Holt: So on a get "/",
right, on the homepage.

137
00:08:57.285 --> 00:09:02.061
We wanna run this function req, res,

138
00:09:02.061 --> 00:09:05.950
request and response, okay?

139
00:09:05.950 --> 00:09:11.925
Reply.write, and you just write parts [0].

140
00:09:11.925 --> 00:09:14.032
So this is like flushing out
the first part of the head tag,

141
00:09:14.032 --> 00:09:15.199
just like what you were saying.

142
00:09:15.199 --> 00:09:19.694
Now that that's been sent to the user,
then we'll do all the React stuff.

143
00:09:19.694 --> 00:09:22.326
So order here actually
is somewhat important,

144
00:09:22.326 --> 00:09:24.438
that's really what I'm getting at.

145
00:09:24.438 --> 00:09:33.169
RenderToString, h App,
&gt;&gt; Brian Holt: And

146
00:09:33.169 --> 00:09:39.434
reply.raw.write (reactApp).

147
00:09:41.698 --> 00:09:46.953
&gt;&gt; Brian Holt: Okay,
then reply raw, right parts

148
00:09:46.953 --> 00:09:51.915
one,
&gt;&gt; Brian Holt: And then reply.

149
00:09:56.494 --> 00:09:58.340
&gt;&gt; Brian Holt: And I did rec res here,
actually really meant to do reply.

150
00:09:58.340 --> 00:10:00.516
Sorry about that.

151
00:10:00.516 --> 00:10:05.765
So not res but reply, that's just too

152
00:10:05.765 --> 00:10:10.531
many years of writing an express.

153
00:10:10.531 --> 00:10:19.015
Raw.end, so actually the reply.raw
really is res, right?

154
00:10:19.015 --> 00:10:21.943
It's the res object coming
directly from Node.js.

155
00:10:24.826 --> 00:10:29.401
&gt;&gt; Brian Holt: Okay, and then here you're
just gonna say an app.listen on whatever

156
00:10:29.401 --> 00:10:34.221
report you wanna put it on,
I put it on 3,000, I don't really care.

157
00:10:34.221 --> 00:10:37.002
Put it on 80 if you want to.

158
00:10:37.002 --> 00:10:39.731
I'm joking, don't put it on 80,
cuz then you have to run it a pseudo, and

159
00:10:39.731 --> 00:10:41.537
then that's how I mine
Bitcoin on your computer.

160
00:10:43.843 --> 00:10:48.838
&gt;&gt; Brian Holt: Okay, this is cool though,
because this is succinct.

161
00:10:48.838 --> 00:10:52.798
This is exactly what you wanna do with
server side rendering, flush the head,

162
00:10:52.798 --> 00:10:54.541
send the app, send the last part.

163
00:10:54.541 --> 00:10:58.860
And the order here ends up being really
important, just that the user can get

164
00:10:58.860 --> 00:11:02.641
everything, cuz there's a real
temptation to do this first, but

165
00:11:02.641 --> 00:11:05.090
then the user's unnecessarily waiting.

166
00:11:05.090 --> 00:11:10.967
In our case, our app is microscopic,
so who cares, right?

167
00:11:10.967 --> 00:11:15.888
But if you have a big app, which is the
only time you really wanna do server side

168
00:11:15.888 --> 00:11:20.001
rendering, then you wanna flush
that head as fast as possible.

169
00:11:20.001 --> 00:11:25.869
Remember, in our package.json, we have
this vite build that we put in there,

170
00:11:25.869 --> 00:11:29.034
this is cuz we do need
to build our app here.

171
00:11:29.034 --> 00:11:32.174
In our case, it doesn't really matter,

172
00:11:32.174 --> 00:11:38.003
because there's not a lot to be built
here, but still we need it to be built and

173
00:11:38.003 --> 00:11:42.421
to have the index.html have
the correct script tag here.

174
00:11:42.421 --> 00:11:44.843
Did I need to put a script tag in here and
I missed it?

175
00:11:44.843 --> 00:11:48.287
I did, okay,
that's good that we checked that.

176
00:11:48.287 --> 00:11:52.865
So in your index.html,
we also need to refer to clients.js.

177
00:11:55.484 --> 00:11:58.450
&gt;&gt; Brian Holt: So we're gonna put
a script tag here in the head, right?

178
00:11:58.450 --> 00:12:00.240
Because on that first load,

179
00:12:00.240 --> 00:12:04.579
we want to start loading that JS
file while we're rendering the app.

180
00:12:04.579 --> 00:12:10.307
So I know most of us are used to
probably putting this here at the end,

181
00:12:10.307 --> 00:12:15.751
but our hack here is we're gonna
say async defer type = module.

182
00:12:15.751 --> 00:12:18.241
And this is gonna say,
start downloading this, but

183
00:12:18.241 --> 00:12:20.740
it's okay if you keep
rendering the rest of the app.

184
00:12:20.740 --> 00:12:24.492
If you don't put that there, it's just
gonna stop, which is not what we want,

185
00:12:24.492 --> 00:12:26.567
we want to continue doing everything else.

186
00:12:32.444 --> 00:12:35.666
&gt;&gt; Brian Holt: ./ and then we want
it to load client, right, not app.

187
00:12:37.784 --> 00:12:40.602
&gt;&gt; Brian Holt: So yeah, we do need this
build process more, because we have

188
00:12:40.602 --> 00:12:44.386
multiple files, multiple modules that
we needed to glue everything together.

189
00:12:49.443 --> 00:12:54.193
&gt;&gt; Brian Holt: Okay, now,
I believe let's just do it from here,

190
00:12:54.193 --> 00:12:56.407
cuz this looks better.

191
00:12:59.183 --> 00:13:00.974
&gt;&gt; Brian Holt: First things first,
we gotta build, right?

192
00:13:00.974 --> 00:13:04.801
Because then we load the built
files into our node server, so

193
00:13:04.801 --> 00:13:06.688
I'm gonna say npm run build.

194
00:13:10.253 --> 00:13:13.811
&gt;&gt; Brian Holt: And
you can see here now we have a dist, and

195
00:13:13.811 --> 00:13:18.714
we have an index.html,
looks pretty similar, right?

196
00:13:18.714 --> 00:13:22.193
This is just raw built feed files, and

197
00:13:22.193 --> 00:13:26.877
you can notice we got this
weird assets index hash.

198
00:13:26.877 --> 00:13:30.769
And then here's our JavaScript file,
this really blew up, didn't it?

199
00:13:30.769 --> 00:13:34.496
But it's React, right,
this is all the React stuff.

200
00:13:34.496 --> 00:13:37.588
In fact, it says it right there,
license, React.

201
00:13:37.588 --> 00:13:41.490
And now,
we should be able to go over here and

202
00:13:41.490 --> 00:13:45.298
say npm run, what do they call it, start?

203
00:13:45.298 --> 00:13:48.720
Okay, running, no one's yelling thus far,

204
00:13:48.720 --> 00:13:53.565
localhost 3000, and you can say,
Hello Frontend Masters.

205
00:13:53.565 --> 00:13:56.831
This is beautiful design,

206
00:13:56.831 --> 00:14:01.946
chic design by Brian,
as I like to call it.

207
00:14:01.946 --> 00:14:05.026
I mean, let's make this
a million times bigger, but

208
00:14:05.026 --> 00:14:07.153
it's still interactable, right?

209
00:14:07.153 --> 00:14:13.171
This React is still running on this page,
but this is always the fun test.

210
00:14:13.171 --> 00:14:20.157
If you view page source, notice that
it's coming with complete markup, right?

211
00:14:23.763 --> 00:14:24.975
&gt;&gt; Brian Holt: Which is pretty cool.

212
00:14:27.269 --> 00:14:29.968
&gt;&gt; Brian Holt: Now, we're running on local
hosts, everything is infinitely fast here,

213
00:14:29.968 --> 00:14:32.090
so it's really hard to be able
to tell the difference here.

214
00:14:32.090 --> 00:14:36.226
But imagine this coming with
a whole slew of markup,

215
00:14:36.226 --> 00:14:41.678
it will allow our browser to render
all that stuff first before trying

216
00:14:41.678 --> 00:14:46.856
to instantiate all the interactivity
pieces of it, make sense?

217
00:14:46.856 --> 00:14:49.697
If you are seeing hydration errors,

218
00:14:49.697 --> 00:14:54.748
it's like 99% probability that
you white spaced somewhere.

219
00:14:54.748 --> 00:14:57.964
In fact, we'll see if we can actually
just intentionally cause it, so

220
00:14:57.964 --> 00:14:59.636
you can see what I'm talking about.

221
00:15:01.673 --> 00:15:05.365
&gt;&gt; Brian Holt: The reason I'm harping on
this is cuz I spent myself a good hour

222
00:15:05.365 --> 00:15:06.790
being what is going on?

223
00:15:06.790 --> 00:15:09.134
It's the same markup, right?

224
00:15:09.134 --> 00:15:11.867
It's very frustrating.

225
00:15:11.867 --> 00:15:18.512
So I think if I do this, and
I save that and I got to rebuild.

226
00:15:23.364 --> 00:15:28.597
&gt;&gt; Brian Holt: Deep run build, npm run
start, and then I refresh my page here.

227
00:15:28.597 --> 00:15:31.376
Everything's still gonna work,
right, React is still working.

228
00:15:31.376 --> 00:15:36.173
But I think it's gonna say,
&gt;&gt; Brian Holt: Yeah, and

229
00:15:36.173 --> 00:15:41.633
then this is the hard part as well,
we're in the Minified React error,

230
00:15:41.633 --> 00:15:45.559
418, cuz it's the production build, right?

231
00:15:45.559 --> 00:15:50.079
It's not the dev build,
yeah, hydration failed.

232
00:15:53.763 --> 00:15:57.614
&gt;&gt; Brian Holt: And does it say?

233
00:15:57.614 --> 00:16:01.582
No, it's funny that they don't even
mention that it could be white space,

234
00:16:01.582 --> 00:16:04.625
cuz that's actually what it is for
our particular thing.

235
00:16:04.625 --> 00:16:11.503
So that's what this is, I wonder if
I can even show you, will it work?

236
00:16:11.503 --> 00:16:17.881
Maybe, view page source again,
don't do that.

237
00:16:21.247 --> 00:16:23.889
&gt;&gt; Brian Holt: Yeah, so
this is why it's doing it right there,

238
00:16:23.889 --> 00:16:28.336
it's cuz doesn't expect this white space,
it expects everything to be all in one

239
00:16:28.336 --> 00:16:33.714
line,
&gt;&gt; Brian Holt: Subtle bug, right?

240
00:16:33.714 --> 00:16:36.372
Most time you're not writing this
directly, most time your frameworks doing

241
00:16:36.372 --> 00:16:38.963
this for you, so that's why they don't
really take too much care about it.

