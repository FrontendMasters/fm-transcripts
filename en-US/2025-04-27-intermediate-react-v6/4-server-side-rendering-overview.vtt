WEBVTT

1
00:00:00.000 --> 00:00:03.202
&gt;&gt; Brian Holt: Let's talk about
server-side rendering, this is like,

2
00:00:03.202 --> 00:00:06.288
you wouldn't probably do both
of these at the same time.

3
00:00:06.288 --> 00:00:10.477
I don't know, honestly, I could fathom
ways that you could do these together, but

4
00:00:10.477 --> 00:00:13.488
it's way outside the scope of this class,
maybe it's not.

5
00:00:13.488 --> 00:00:18.018
So, I could see you statically generating
like the shell of your app, like a larger

6
00:00:18.018 --> 00:00:22.290
React app like generating the HTML tag,
the body tag, the head tag with static

7
00:00:22.290 --> 00:00:26.849
site generation, and then only server-side
rendering the actual interior app.

8
00:00:26.849 --> 00:00:30.475
Actually, I could see that
being a really valid use case,

9
00:00:30.475 --> 00:00:33.953
I think that's actually
technically what Next does for

10
00:00:33.953 --> 00:00:38.326
you because Next controls the entire app,
not just the interior app.

11
00:00:38.326 --> 00:00:43.112
So it is like a combination of
techniques being put together here,

12
00:00:43.112 --> 00:00:46.623
but let's talk about
server-side rendering.

13
00:00:46.623 --> 00:00:51.673
So first thing I'm gonna say is V5 of
this course goes pretty in depth on,

14
00:00:51.673 --> 00:00:56.480
look at that handsome gentleman down
there, in terms of just covering

15
00:00:56.480 --> 00:01:01.298
how to take an entire React app and
move it to server-side rendering.

16
00:01:01.298 --> 00:01:05.134
So if that brownfield migration
is interesting to you,

17
00:01:05.134 --> 00:01:10.032
I got questions of, why you find
brownfield migrations interesting,

18
00:01:10.032 --> 00:01:14.452
but this, this would be helpful for
those activities, right?

19
00:01:14.452 --> 00:01:17.889
But this one's gonna focus on
a much more shallow focus of,

20
00:01:17.889 --> 00:01:21.398
here's how you would set up
server-side rendering just for

21
00:01:21.398 --> 00:01:24.456
a new app that you were doing,
generally speaking.

22
00:01:24.456 --> 00:01:27.247
And again, we're gonna try and
keep this as just minimal as possible, so

23
00:01:27.247 --> 00:01:29.737
we can focus on just the server-side
rendering portion of that.

24
00:01:29.737 --> 00:01:33.094
And if you wanna get again,
more into the weeds of that,

25
00:01:33.094 --> 00:01:37.179
check out V5 nothing has changed,
it's totally 100% valid.

26
00:01:37.179 --> 00:01:42.340
Yeah, we spent a bunch of time on
it last time, because that used to

27
00:01:42.340 --> 00:01:47.976
be like the state of the art when it
came to the server component of React.

28
00:01:47.976 --> 00:01:52.197
So I have this open image,
a new tab, lovely,

29
00:01:52.197 --> 00:01:56.976
beautiful diagram,
it's perfect, [LAUGH] right?

30
00:01:56.976 --> 00:01:59.471
No, I made this with excalidraw,

31
00:01:59.471 --> 00:02:04.462
just trying to help you visualize,
like the React request cycle, so

32
00:02:04.462 --> 00:02:09.559
the user requests the app here on
the left, they get the index.html.

33
00:02:09.559 --> 00:02:14.092
The server receives a request, it doesn't
just sends back the entire React bundle

34
00:02:14.092 --> 00:02:17.018
and the entire HTML shell,
it does nothing, right?

35
00:02:17.018 --> 00:02:20.242
The browser then receives
it parses the JavaScript,

36
00:02:20.242 --> 00:02:24.968
it then executes the JavaScript, and
at the end, when all of that entire React

37
00:02:24.968 --> 00:02:29.353
cycle has happened, the user finally
sees an interactive app, right?

38
00:02:29.353 --> 00:02:34.756
It's all like it goes from zero to done,
and there's no intermediary

39
00:02:34.756 --> 00:02:40.537
steps at the end, time to interactive and
time to first meaningful paint.

40
00:02:40.537 --> 00:02:45.263
If you're into those performance metrics,
end up being within a millisecond of

41
00:02:45.263 --> 00:02:48.332
each other,
if not being literally the same thing.

42
00:02:48.332 --> 00:02:53.543
It's like the normal browser request
cycle, you could say the same thing about

43
00:02:53.543 --> 00:02:59.085
Angular or Vue or any of those if they're
in the same client-side rendering thing.

44
00:02:59.085 --> 00:03:03.273
What if we could make it a little
bit better in terms of perceived

45
00:03:03.273 --> 00:03:07.951
performance that the user sees
something before it's interactive?

46
00:03:07.951 --> 00:03:10.423
Well, just think about it for a second,

47
00:03:10.423 --> 00:03:14.958
let's actually just pull up the diagram,
so that's probably helpful.

48
00:03:14.958 --> 00:03:15.936
Open image, a new tab, so what if we
could separate these two motions here,

49
00:03:15.936 --> 00:03:16.856
where, when the user sees the app and
when the app is actually useful.

50
00:03:16.856 --> 00:03:23.044
That tends to be better perceived
performance of actually,

51
00:03:23.044 --> 00:03:28.867
technically, time to interactive
will be a bit slower,

52
00:03:28.867 --> 00:03:34.204
almost without exception,
that that will be true,

53
00:03:34.204 --> 00:03:39.695
but that's good,
because the user will see the app.

54
00:03:39.695 --> 00:03:42.933
It takes, like, 100, 200 milliseconds for
the human brain to just process that,

55
00:03:42.933 --> 00:03:45.549
I'm quoting someone that I read
online said, I'm not a psychologist.

56
00:03:45.549 --> 00:03:48.874
Don't trust my metrics, but
that's what I remember reading,

57
00:03:48.874 --> 00:03:52.444
that it takes a human about that long
to decide what they wanna do, and

58
00:03:52.444 --> 00:03:55.338
by the time that they actually
go to click on something,

59
00:03:55.338 --> 00:03:59.489
the app will probably have bootstrapped
and then be interactive by that point.

60
00:03:59.489 --> 00:04:03.717
So the user is gonna perceive that the app
has gone faster, does that make sense?

61
00:04:03.717 --> 00:04:06.741
So it's faster perceived performance,
even if,

62
00:04:06.741 --> 00:04:11.117
though the actual performance is
unchanged, even if a little bit worse.

63
00:04:11.117 --> 00:04:16.086
So the key here is this little step
here where you pre render the page

64
00:04:16.086 --> 00:04:17.790
before you send that.

65
00:04:17.790 --> 00:04:21.363
So you're actually sending them complete
markup of the first render of the page,

66
00:04:21.363 --> 00:04:23.925
and then you're sending the React
bundle with it as well.

67
00:04:23.925 --> 00:04:27.567
So that the user sees inert,
normal HTML that the browser is parsed and

68
00:04:27.567 --> 00:04:31.656
then displays, and then later, the React
app panics and takes over, right?

69
00:04:31.656 --> 00:04:36.444
And then makes everything interactive,
that is the entire premise of what

70
00:04:36.444 --> 00:04:41.688
server-side rendering is for reactors,
how can we show them something sooner,

71
00:04:41.688 --> 00:04:45.108
so they start thinking about
their decision sooner.

72
00:04:45.108 --> 00:04:51.196
This has a variety of impacts,
imagine that I'm on a iPhone,

73
00:04:51.196 --> 00:04:55.543
what is it, 16 Pro is that the latest one?

74
00:04:55.543 --> 00:04:58.168
iPhone 19 Pro, right?

75
00:04:58.168 --> 00:05:01.317
And I'm just standing next
to the Wi-Fi access point,

76
00:05:01.317 --> 00:05:05.145
to the point that I'm getting sick
from all the radiation, right?

77
00:05:05.145 --> 00:05:09.235
This probably doesn't really help me
that much, because my device is so

78
00:05:09.235 --> 00:05:12.195
fast and my internet connection is so
fast, right?

79
00:05:12.195 --> 00:05:14.562
If anything,
it's actually probably slowing me down,

80
00:05:14.562 --> 00:05:16.683
because now my server
requests are taking longer,

81
00:05:16.683 --> 00:05:19.071
my device could have received it and
rendered it faster.

82
00:05:19.071 --> 00:05:23.842
Now perceive that you're camping outside
of Yellowstone, where notoriously has

83
00:05:23.842 --> 00:05:28.354
crappy reception, and you're on some
old Android, crappy device, right?

84
00:05:28.354 --> 00:05:31.063
This could actually be
a massive difference, right?

85
00:05:31.063 --> 00:05:33.450
In terms of just perceived performance,

86
00:05:33.450 --> 00:05:37.266
that you can actually start
seeing things and be like, okay,

87
00:05:37.266 --> 00:05:41.443
what do I want to do about this, or
I can see all the information, right?

88
00:05:41.443 --> 00:05:45.254
And it's gonna take my device
forever to render, and

89
00:05:45.254 --> 00:05:50.857
the internet connection can be quite
flaky or finicky or something like that.

90
00:05:50.857 --> 00:05:55.298
So I hope you're seeing that the persona
and what your app does is extremely

91
00:05:55.298 --> 00:05:59.400
important contextually about
why this could not be useful.

92
00:05:59.400 --> 00:06:03.325
If you're making Uber for helicopters in
San Francisco, this is probably not that

93
00:06:03.325 --> 00:06:06.422
helpful, because they probably
all have nice devices, right?

94
00:06:06.422 --> 00:06:08.062
And they're probably all in San Francisco,

95
00:06:08.062 --> 00:06:10.654
where there's pretty decent Wi-Fi
throughout the city, actually,

96
00:06:10.654 --> 00:06:12.875
surprisingly, in parts of the city,
terrible reception.

97
00:06:12.875 --> 00:06:18.284
But that's not anything to do with this
course, that's just me complaining.

98
00:06:18.284 --> 00:06:22.691
But if you're building like,
I don't know, a cropped tracker for

99
00:06:22.691 --> 00:06:25.785
rural Montana or
rural Wyoming or rural India or

100
00:06:25.785 --> 00:06:30.132
something like that, yeah,
this make a big difference, right?

101
00:06:30.132 --> 00:06:34.207
But know your user, that's a big
thing here and measure, right?

102
00:06:34.207 --> 00:06:38.800
Make sure that you're actually making a
difference because this tool can actually

103
00:06:38.800 --> 00:06:39.925
make things worse.

104
00:06:39.925 --> 00:06:42.144
Again, a lot of these
things are not slam dunks,

105
00:06:42.144 --> 00:06:45.627
they're just different techniques
that can apply in certain situations.

106
00:06:45.627 --> 00:06:49.728
So yeah, SSR, server-side rendering
carries complexity, so a good example is,

107
00:06:49.728 --> 00:06:53.909
if everything's browser based, you can
just assume the browser APIs always exist.

108
00:06:53.909 --> 00:06:58.135
So for example, if you want to fire off
like a Google Analytic event on when

109
00:06:58.135 --> 00:06:59.853
a component does something.

110
00:06:59.853 --> 00:07:02.989
If you're not server-side rendering,
you can go willy-nilly and

111
00:07:02.989 --> 00:07:04.457
do it anywhere that you want to.

112
00:07:04.457 --> 00:07:09.198
It doesn't really matter if you're doing
server-side rendering that can't be in

113
00:07:09.198 --> 00:07:11.399
the hot path of what runs on the server,

114
00:07:11.399 --> 00:07:15.891
because the browser APIs don't exist on
the server, and you will crash right?

115
00:07:15.891 --> 00:07:20.721
So that complexity ends up being
important, we talked about that,

116
00:07:20.721 --> 00:07:22.256
and please measure.

117
00:07:22.256 --> 00:07:25.819
I harp on this quite a bit specifically
because at Netflix, we did this, and

118
00:07:25.819 --> 00:07:28.047
we found in places this
didn't actually help,

119
00:07:28.047 --> 00:07:31.857
it actually made things worse in places,
and that's at Netflix scale, right?

120
00:07:31.857 --> 00:07:38.227
So that's like the entire gamut,
we took it out in places.

121
00:07:38.227 --> 00:07:40.535
&gt;&gt; Speaker 2: Do you recommend measuring?

122
00:07:40.535 --> 00:07:45.361
&gt;&gt; Brian Holt: Just eyeball it, no, I'm
kidding [LAUGH] Google Analytics will give

123
00:07:45.361 --> 00:07:50.114
you a really good, portrait of,
this is when your first paint was.

124
00:07:50.114 --> 00:07:53.441
Actually the Chrome DevTools
are really good for this,

125
00:07:53.441 --> 00:07:55.847
the Firefox ones are improving as well,

126
00:07:55.847 --> 00:08:00.195
where you can see time to first
meaningful paint, time to interactive.

127
00:08:00.195 --> 00:08:04.849
Those are the three metrics that you want
to really first meaningful paint and

128
00:08:04.849 --> 00:08:06.215
time to interactive.

129
00:08:06.215 --> 00:08:08.944
Lighthouse will give you
these metrics as well, and

130
00:08:08.944 --> 00:08:11.183
I'm sure there's other tools that will.

131
00:08:11.183 --> 00:08:15.669
But any front end focused performance
analytics give you pretty good

132
00:08:15.669 --> 00:08:16.836
metrics on that.

133
00:08:16.836 --> 00:08:19.199
&gt;&gt; Speaker 2: You need to instrument
the server as well to catch both

134
00:08:19.199 --> 00:08:19.943
sides of Otter.

135
00:08:19.943 --> 00:08:24.482
&gt;&gt; Brian Holt: Probably, yeah, the time
to response, depending on how heavy your

136
00:08:24.482 --> 00:08:29.193
component is and what kinda server
you're running and all that stuff.

137
00:08:29.193 --> 00:08:33.456
If you're running your home server on
Raspberry Pi, one good for you, but

138
00:08:33.456 --> 00:08:36.918
it's gonna meaningfully suffer
even on small components.

139
00:08:36.918 --> 00:08:39.518
But if you're running
an extra large on AWS,

140
00:08:39.518 --> 00:08:42.812
you're probably not gonna see
too much of a difference.

141
00:08:42.812 --> 00:08:48.174
But yeah, to get the full picture,
you would have to do that,

142
00:08:48.174 --> 00:08:51.692
for example, we're gonna do Fastify.

143
00:08:51.692 --> 00:08:55.919
I think there's a Fastify library to
actually include your server-side metrics

144
00:08:55.919 --> 00:08:59.669
in your Chrome Dev Tools, so you can
actually see the entire life cycle.

145
00:08:59.669 --> 00:09:03.210
Including all your database query and
all that stuff, so

146
00:09:03.210 --> 00:09:06.468
instrumenting your node
server would help as well.

