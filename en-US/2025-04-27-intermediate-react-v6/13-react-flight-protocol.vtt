WEBVTT

1
00:00:00.000 --> 00:00:02.493
&gt;&gt; Brian Holt: We're gonna code the flight
protocol by hand, which is gonna be fun.

2
00:00:02.493 --> 00:00:07.287
So we're gonna try and
do a try catch here as well because this

3
00:00:07.287 --> 00:00:11.248
is gonna be prone to,
it could be prone to errors.

4
00:00:11.248 --> 00:00:15.452
Anything that's gonna be an error in
the React app would be an error here.

5
00:00:15.452 --> 00:00:16.897
So we just wanna be aware of that.

6
00:00:16.897 --> 00:00:21.539
So, I mean, we're just gonna do
the exact same thing here, essentially.

7
00:00:21.539 --> 00:00:27.663
The request.log.error("react-flight err",

8
00:00:27.663 --> 00:00:34.049
and then we're gonna put err here,
and we'll just say,

9
00:00:34.049 --> 00:00:39.636
throw err, and
then this will get caught up here,

10
00:00:39.636 --> 00:00:44.446
so it'll crash the thing intentionally.

11
00:00:44.446 --> 00:00:49.930
All right, so
in here we're gonna say reply.header.

12
00:00:49.930 --> 00:00:56.942
It's not actually string text or
anything like that, it's a octet stream.

13
00:00:56.942 --> 00:01:02.506
So we have to say the Content-Type is

14
00:01:02.506 --> 00:01:07.712
application/octet stream, and

15
00:01:07.712 --> 00:01:13.825
then just be careful about white space.

16
00:01:13.825 --> 00:01:18.144
It's significant here, so
be careful about white space.

17
00:01:18.144 --> 00:01:22.976
So let's go ahead and we're gonna
do this with the a template string.

18
00:01:22.976 --> 00:01:29.731
So return reply.send, and
you'll be surprised at this.

19
00:01:29.731 --> 00:01:36.504
We're gonna put this
all the way down here.

20
00:01:36.504 --> 00:01:39.220
It's really just like JSON and references.

21
00:01:39.220 --> 00:01:42.061
That's really all
the React Flight protocol is,

22
00:01:42.061 --> 00:01:44.978
it's like a series of JSON
that describes markup.

23
00:01:44.978 --> 00:01:50.060
And then essentially you can say, here's
my one, and so put my one over here.

24
00:01:50.060 --> 00:01:54.458
So it looks kind of react, so
that you can repeat components.

25
00:01:54.458 --> 00:02:00.579
So you're gonna say my
first thing my first

26
00:02:00.579 --> 00:02:06.020
reference, so the one colon is name,

27
00:02:06.020 --> 00:02:11.121
"App", "env", "Server",

28
00:02:11.121 --> 00:02:15.542
"key" :null, "owner",

29
00:02:15.542 --> 00:02:19.986
:null, and then null props.

30
00:02:19.986 --> 00:02:23.960
So empty object.

31
00:02:23.960 --> 00:02:25.660
So that's the first entry here.

32
00:02:25.660 --> 00:02:31.116
Anything that refers to one refers to

33
00:02:31.116 --> 00:02:37.415
this 0:D
&gt;&gt; Brian Holt: $1,

34
00:02:37.415 --> 00:02:41.962
so this one I am less certain
about what the D means.

35
00:02:41.962 --> 00:02:43.920
They don't document anywhere.

36
00:02:43.920 --> 00:02:45.635
So all this was just me messing around and

37
00:02:45.635 --> 00:02:47.860
breaking the app until I
figured out what stuff did.

38
00:02:47.860 --> 00:02:51.600
I think it's basically just
like dereferencing, right?

39
00:02:51.600 --> 00:02:59.085
So it's saying on 0, dereference number 1,
which is going to be this.

40
00:02:59.085 --> 00:03:02.889
If dereference is a weird term for you,
just basically means I have a pointer,

41
00:03:02.889 --> 00:03:04.977
go look at what the pointer
is pointing at.

42
00:03:04.977 --> 00:03:09.227
The other reason why they don't want me to
teach this stuff to you is it's very prone

43
00:03:09.227 --> 00:03:09.841
to change.

44
00:03:09.841 --> 00:03:13.321
Even by the time that this gets released,
this actually might not be what it is.

45
00:03:13.321 --> 00:03:16.163
But I was telling you that you
would never write RSCs by hand,

46
00:03:16.163 --> 00:03:18.907
you will definitely never
write flight protocol by hand.

47
00:03:18.907 --> 00:03:21.864
But I wanted you to see under the hood,

48
00:03:21.864 --> 00:03:26.032
it's really not that interesting or
that hard to do.

49
00:03:26.032 --> 00:03:33.343
Okay, so we're gonna say 0: here,

50
00:03:33.343 --> 00:03:40.660
and we're gonna say $, div, null.

51
00:03:40.660 --> 00:03:47.785
Again, this also looks like create element
calls a little bit as well, doesn't it?

52
00:03:47.785 --> 00:03:52.327
Children, [ ].

53
00:03:52.327 --> 00:03:56.005
&gt;&gt; Speaker 2: Watch out, comma instead
of a colon between env and server.

54
00:03:56.005 --> 00:04:00.805
&gt;&gt; Brian Holt: Is that what I have here?

55
00:04:00.805 --> 00:04:03.145
Env right there, yep, you're right.

56
00:04:03.145 --> 00:04:08.885
I put a comma here,
it's supposed to be a colon.

57
00:04:13.284 --> 00:04:18.346
&gt;&gt; Brian Holt: "$" here, h1, null.

58
00:04:21.430 --> 00:04:30.516
&gt;&gt; Brian Holt: And object here, children,
&gt;&gt; Brian Holt: Notes App.

59
00:04:30.516 --> 00:04:36.114
Okay, after the bracer there, no space.

60
00:04:39.314 --> 00:04:45.395
&gt;&gt; Brian Holt: $1, close, close, comma $1,

61
00:04:45.395 --> 00:04:49.323
and there's no space.

62
00:04:49.323 --> 00:04:51.803
I keep wanting to put spaces in there,
but there's none.

63
00:04:51.803 --> 00:04:54.243
Again, make sure there's
no indentation here.

64
00:04:54.243 --> 00:04:57.623
In fact, yeah, this is the same one,
cuz it's all the same line.

65
00:04:57.623 --> 00:05:01.558
And this ends like this, or
else it's gonna yell at you, and

66
00:05:01.558 --> 00:05:03.963
it might yell at you anyway, right?

67
00:05:03.963 --> 00:05:07.323
Again, this is very prone to breaking.

68
00:05:07.323 --> 00:05:10.003
It's not a publicly posted protocol.

69
00:05:10.003 --> 00:05:12.639
They don't post anything in line
of what flight protocol is.

70
00:05:12.639 --> 00:05:14.734
I tried to find it, and
this just doesn't exist.

71
00:05:14.734 --> 00:05:17.094
So this, I think we should work now.

72
00:05:17.094 --> 00:05:21.754
So, this is my webpack server running.

73
00:05:21.754 --> 00:05:26.438
So I did npm run dev client,
and I'm just gonna start

74
00:05:26.438 --> 00:05:31.244
another one here that's
gonna be npm run dev server.

75
00:05:31.244 --> 00:05:33.244
Let's see what I got wrong here first.

76
00:05:33.244 --> 00:05:38.878
So it doesn't find
noframeworkdistreactclientmanif,

77
00:05:38.878 --> 00:05:40.586
I put two ns there.

78
00:05:40.586 --> 00:05:41.826
I can spell.

79
00:05:41.826 --> 00:05:45.821
Manifest, here we go.

80
00:05:45.821 --> 00:05:47.733
So if you can spell better than I can,

81
00:05:47.733 --> 00:05:50.034
then you're having
a better time than I am.

82
00:05:50.034 --> 00:05:54.143
So, moment of truth, and
then we'll debug some problems here.

83
00:05:54.143 --> 00:05:58.656
I'm sure many, if not all,
of you are having some issue.

84
00:05:58.656 --> 00:06:00.896
Let's see.

85
00:06:00.896 --> 00:06:04.738
And I didn't write Notes app anywhere.

86
00:06:04.738 --> 00:06:12.041
This h1 does not exist in my app, but
it's showing up here, which is wild.

87
00:06:12.041 --> 00:06:18.046
So if we look at my network call here,
and I look at the response,

88
00:06:18.046 --> 00:06:22.511
it's just giving back this nonsense,
right?

89
00:06:22.511 --> 00:06:28.193
But it's translating that into this
flight protocol that I have here,

90
00:06:28.193 --> 00:06:33.507
the Create root knows how to
interpret into this, crazy, right?

91
00:06:33.507 --> 00:06:38.047
It's just wild to me that this all
works and doesn't fall apart instantly.

92
00:06:38.047 --> 00:06:42.579
If it's not working for you, again, nobody
should be writing this by hand ever.

93
00:06:42.579 --> 00:06:45.279
So please just go into the notes here.

94
00:06:45.279 --> 00:06:49.919
Pretty sure that what I've done
is a crime in some jurisdictions.

95
00:06:49.919 --> 00:06:51.799
Copy and paste all of this.

96
00:06:51.799 --> 00:06:56.468
And then just making sure that
you're running main.js not,

97
00:06:56.468 --> 00:06:58.632
I guess you would have to be.

98
00:06:58.632 --> 00:07:01.404
Anyway, make sure you're
running main js and

99
00:07:01.404 --> 00:07:04.543
not server js, or
maybe your Babel config might be.

100
00:07:04.543 --> 00:07:05.760
&gt;&gt; Speaker 2: Yeah, I'll take a look.

101
00:07:05.760 --> 00:07:07.188
&gt;&gt; Brian Holt: A miss that would
be the thing I would look at here.

102
00:07:07.188 --> 00:07:09.609
Generally, do the client one first.

103
00:07:09.609 --> 00:07:14.560
Npm run dev:client, and
just to bring this up here,

104
00:07:14.560 --> 00:07:18.090
it's just running these right here.

105
00:07:20.523 --> 00:07:26.335
&gt;&gt; Brian Holt: Okay, and
then npm run dev:server.

106
00:07:26.335 --> 00:07:31.210
If you run server first, it'll grab
an outdated version of your manifest,

107
00:07:31.210 --> 00:07:32.594
which is important.

108
00:07:32.594 --> 00:07:35.734
&gt;&gt; Speaker 2: Was that a webpack issue
which I just copied your new one in?

109
00:07:35.734 --> 00:07:36.546
It's fine.
&gt;&gt; Brian Holt: Okay,

110
00:07:36.546 --> 00:07:38.334
just like the webpack config.

111
00:07:38.334 --> 00:07:40.274
&gt;&gt; Speaker 2: I think I
stitched it together wrong.

112
00:07:40.274 --> 00:07:46.014
&gt;&gt; Brian Holt: Yeah, I mean,
some insane person wrote this, who is me.

113
00:07:46.014 --> 00:07:49.292
So it's easy to get some
of this stuff wrong.

114
00:07:49.292 --> 00:07:52.772
And what's frustrating is it's
actually the interesting part of this.

115
00:07:52.772 --> 00:07:56.823
The interesting part of this is the flight
protocol person of this or part of this.

116
00:07:56.823 --> 00:08:01.023
So let's go ahead and
take this a half step further.

117
00:08:01.023 --> 00:08:05.083
I'm not going to code this one by hand,
cuz it's just so much longer.

118
00:08:05.083 --> 00:08:06.564
This one, though.

119
00:08:06.564 --> 00:08:11.019
I'm gonna copy and paste this one, and

120
00:08:11.019 --> 00:08:15.749
I'm gonna put that into the server.js.

121
00:08:15.749 --> 00:08:20.589
I'm going to replace this one
with something just longer.

122
00:08:24.047 --> 00:08:25.311
&gt;&gt; Brian Holt: Yeah, and again,

123
00:08:25.311 --> 00:08:29.584
it tried to format it when I pasted it,
and don't let it do that.

124
00:08:29.584 --> 00:08:31.604
You have to make sure that
these have no indentation.

125
00:08:37.055 --> 00:08:43.757
&gt;&gt; Brian Holt: So now if I refresh the
page here, I actually get my full app now.

126
00:08:43.757 --> 00:08:46.738
That's wild, right?

127
00:08:46.738 --> 00:08:48.498
How did that happen?

128
00:08:48.498 --> 00:08:54.546
So again, notice this has the three,
that's the three pointer,

129
00:08:54.546 --> 00:09:00.716
the one pointer, I don't know what
happened to be honest with you.

130
00:09:00.716 --> 00:09:05.390
And then this is saying that this is
a client component that refers to

131
00:09:05.390 --> 00:09:07.530
the name of this in the bundle.

132
00:09:07.530 --> 00:09:09.380
And this says this is which
bundle it's in, right?

133
00:09:09.380 --> 00:09:12.720
So it's in this like runtime chunk.

134
00:09:12.720 --> 00:09:16.081
And then notice down here this $L3,

135
00:09:16.081 --> 00:09:21.545
that's the invocation of this
is a client side component that

136
00:09:21.545 --> 00:09:26.921
you're going to pull from
somewhere else in my bundle here.

137
00:09:26.921 --> 00:09:31.797
So again, the details really aren't
super interesting or important here,

138
00:09:31.797 --> 00:09:36.308
but I just wanted you to see the machinery
here is not that complicated.

139
00:09:36.308 --> 00:09:38.009
It's just a bit opaque.

140
00:09:38.009 --> 00:09:42.211
If I charged you at your job is go
figure out what this actually does in

141
00:09:42.211 --> 00:09:46.952
diagram all that stuff, massive waste
of time, but you definitely could.

142
00:09:46.952 --> 00:09:49.500
I'm sure you could probably even put
this into ChatGPT and say, like,

143
00:09:49.500 --> 00:09:51.595
tell me individually what every
one of these things does.

144
00:09:51.595 --> 00:09:53.193
And it would probably do it just fine.

145
00:09:53.193 --> 00:09:56.684
It's very, very simple logic to follow.

146
00:09:56.684 --> 00:09:58.954
Okay, let's actually make this work now,
right?

147
00:09:58.954 --> 00:10:02.405
Cuz we've hacked around by just
literally giving the strings back,

148
00:10:02.405 --> 00:10:06.350
let's actually coat up the thing that
actually gives back the correct thing.

149
00:10:06.350 --> 00:10:11.637
So get rid of all this just pure nonsense,
absolute nonsense.

150
00:10:11.637 --> 00:10:14.317
No one should be careful about any
white space ever, delete that.

151
00:10:14.317 --> 00:10:19.638
And we're still gonna
say the octet heather.

152
00:10:19.638 --> 00:10:20.478
That's correct.

153
00:10:20.478 --> 00:10:25.917
We're gonna say const{pipe}

154
00:10:25.917 --> 00:10:31.158
=renderToPipeableStream.

155
00:10:31.158 --> 00:10:40.118
We're gonna say
react.createElement(App) or h.

156
00:10:40.118 --> 00:10:42.732
We called it h before we
could have done that again.

157
00:10:42.732 --> 00:10:45.972
And we're just gonna give
it this module map for

158
00:10:45.972 --> 00:10:48.565
it to refer to of what is where, okay?

159
00:10:48.565 --> 00:10:50.821
And then we're just gonna
do the fun thing here.

160
00:10:50.821 --> 00:10:54.601
As you just say, pipe(reply.raw).

161
00:10:54.601 --> 00:10:57.523
So it's essentially saying, whenever you
have chunks that are available to go out

162
00:10:57.523 --> 00:11:00.194
to the users, we could have done this
with server-side rendering as well,

163
00:11:00.194 --> 00:11:01.510
just send them as they come, right?

164
00:11:01.510 --> 00:11:04.241
Don't hold them all back at once,
send them as they come.

165
00:11:07.681 --> 00:11:09.121
&gt;&gt; Brian Holt: And
that's all you need to do.

166
00:11:09.121 --> 00:11:13.772
In theory now,
we should be able to refresh this page.

167
00:11:13.772 --> 00:11:18.053
And we got an error.

168
00:11:18.053 --> 00:11:19.373
No such table notes.

169
00:11:23.243 --> 00:11:26.663
&gt;&gt; Brian Holt: So I think that
might be my path was wrong here.

170
00:11:26.663 --> 00:11:32.929
But we'll try it once and
see if it's easy to fix.

171
00:11:32.929 --> 00:11:34.380
&gt;&gt; Speaker 2: Just dot, dot slash,
&gt;&gt; Brian Holt: Yeah,

172
00:11:34.380 --> 00:11:35.892
that's kind of what my thought was.

173
00:11:35.892 --> 00:11:38.574
So here in server component, I think.

174
00:11:38.574 --> 00:11:42.954
You just need to say
this is ../ cuz I think I

175
00:11:42.954 --> 00:11:47.467
changed my paths right
before I shipped this.

176
00:11:47.467 --> 00:11:48.367
And there you go.

177
00:11:48.367 --> 00:11:53.927
Okay, and now we have a server
component with full of notes,

178
00:11:53.927 --> 00:12:01.138
and then we have a client component
that actually works client-side as well.

179
00:12:01.138 --> 00:12:03.013
And this is all using server components.

180
00:12:03.013 --> 00:12:07.721
First of all, this is kind of interesting
that it shows you the server, what's

181
00:12:07.721 --> 00:12:12.658
happening on the server, what's happening
on the client, which is pretty neat.

182
00:12:12.658 --> 00:12:17.156
And then if you look at these Xhrs, you
can see the React Flight protocol going in

183
00:12:17.156 --> 00:12:19.383
and out, which is pretty cool as well.

184
00:12:19.383 --> 00:12:22.539
And you can see,
does this look familiar to you?

185
00:12:22.539 --> 00:12:26.292
It's just generating the flight protocol.

186
00:12:26.292 --> 00:12:27.412
That's all it's doing.

187
00:12:27.412 --> 00:12:28.272
And that's it.

188
00:12:28.272 --> 00:12:33.550
That is how you code React
server components by hand.

189
00:12:33.550 --> 00:12:35.889
Everything else is kinda
derivative from this, right?

190
00:12:35.889 --> 00:12:39.806
Everything I'm gonna show you is layers
that Next.js gives you on top of this that

191
00:12:39.806 --> 00:12:43.736
makes it easier, but generally all
of the principles remain the same.

192
00:12:43.736 --> 00:12:45.835
&gt;&gt; Brian Holt: We did it.

193
00:12:45.835 --> 00:12:49.315
Nobody died, except that person [LAUGH].

