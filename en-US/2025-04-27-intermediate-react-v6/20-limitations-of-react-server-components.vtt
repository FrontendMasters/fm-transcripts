WEBVTT

1
00:00:00.000 --> 00:00:04.191
&gt;&gt; Brian Holt: We are going to
talk about some limitations of

2
00:00:04.191 --> 00:00:09.484
React Server Components, so
I alluded to this earlier,

3
00:00:09.484 --> 00:00:14.117
but actually several times,
that you cannot have

4
00:00:14.117 --> 00:00:19.210
server components be children
of client components.

5
00:00:19.210 --> 00:00:21.916
And I guarantee you that's
going to frustrate you,

6
00:00:21.916 --> 00:00:25.977
because you're going to have times as
like, I have this client component that

7
00:00:25.977 --> 00:00:29.913
has to keep a bunch of state, and somehow
I need to give that state to my server

8
00:00:29.913 --> 00:00:33.909
component that I want to be a server
component so that I can, like, make an SQL

9
00:00:33.909 --> 00:00:38.567
request based on client state or something
like that, and it's just annoying, right?

10
00:00:38.567 --> 00:00:40.968
Like, it's just something
that you want to do and

11
00:00:40.968 --> 00:00:43.437
you cannot do given
the limitations of the system.

12
00:00:43.437 --> 00:00:48.430
And I guess the good news slash
maybe slightly patronizing news is

13
00:00:48.430 --> 00:00:52.080
that you just write it like you used to,
right?

14
00:00:52.080 --> 00:00:55.245
Like if you write it as if you
didn't have React Server Components,

15
00:00:55.245 --> 00:00:58.517
you create an API, you call the API
with the parameters that you want,

16
00:00:58.517 --> 00:01:00.459
they need to call you to do this stuff,
and

17
00:01:00.459 --> 00:01:03.316
return it; that's exactly what
we would have done before.

18
00:01:03.316 --> 00:01:07.719
It's just what you do now, I'm gonna give
you one kind of half workaround that works

19
00:01:07.719 --> 00:01:11.400
sometimes for you, but it's not
gonna work in that particular case.

20
00:01:11.400 --> 00:01:16.777
I just told you where you have some client
states that you need to call te database

21
00:01:16.777 --> 00:01:21.671
with, now you're just gonna have to
do the way that i just described.,

22
00:01:21.671 --> 00:01:26.987
Let's go ahead and hop into it,
let's make another folder called "WhoAmI?

23
00:01:26.987 --> 00:01:32.091
And we're going to create,
inside of there a new file,

24
00:01:32.091 --> 00:01:35.348
and I'm going to call it page.js,

25
00:01:35.348 --> 00:01:39.815
because you have to,
then I'm going to import.

26
00:01:39.815 --> 00:01:46.298
ClientPage from, ./clientpage,

27
00:01:46.298 --> 00:01:52.778
and I'm going to import WhoAmI from,

28
00:01:52.778 --> 00:01:59.743
WhoAmI
&gt;&gt; Brian Holt: Okay,

29
00:01:59.743 --> 00:02:02.588
so WhoAmI is going to be a
&gt;&gt; Speaker 2: server component,

30
00:02:02.588 --> 00:02:03.774
&gt;&gt; Brian Holt: and client page,

31
00:02:03.774 --> 00:02:07.813
as you probably guessed,
is going to be a client component.

32
00:02:07.813 --> 00:02:12.339
And I need to get WhoAmI, this one here,

33
00:02:12.339 --> 00:02:17.812
to be a child of client page,
and how do I do that?

34
00:02:17.812 --> 00:02:19.760
Well, we can kinda cheat a little bit,

35
00:02:19.760 --> 00:02:23.363
keep in mind that all of your server
components run essentially before,

36
00:02:23.363 --> 00:02:27.380
and then all the client-side stuff is
always gonna happen after, cause that's

37
00:02:27.380 --> 00:02:31.422
all gonna happen on the client, which
is inherently before the server, right?

38
00:02:31.422 --> 00:02:33.962
So how do we kind of
exploit that a little bit?

39
00:02:33.962 --> 00:02:35.841
The props have to be known, right?

40
00:02:35.841 --> 00:02:39.435
The interface between the client and
the server components,

41
00:02:39.435 --> 00:02:43.789
to be known because the server component
is going to run at essentially like

42
00:02:43.789 --> 00:02:47.675
build time or like at the beginning
of the invocation of the route.

43
00:02:47.675 --> 00:02:51.490
So we can build children beforehand,
right?

44
00:02:51.490 --> 00:02:54.626
So we can pass it in as children,
that'll get pre-rendered, and

45
00:02:54.626 --> 00:02:57.766
then you send that through to be
rendered by the client component.

46
00:02:57.766 --> 00:03:02.233
So let me just demonstrate
what I mean here,

47
00:03:02.233 --> 00:03:06.838
export default async function WhoAmI page.

48
00:03:06.838 --> 00:03:13.768
Okay, and we're going to return
client page with ID equals one,

49
00:03:13.768 --> 00:03:20.950
and then we're going to make a child
of this WhoAmI this is the hack.

50
00:03:20.950 --> 00:03:25.840
This can still be a server component
because this is going to happen at

51
00:03:25.840 --> 00:03:30.411
the same time, this is gonna
happen essentially at build time.

52
00:03:30.411 --> 00:03:34.573
When I say build time, I mean like the
moment that the function is invoked, and

53
00:03:34.573 --> 00:03:37.789
then we can have the client page
just accept that as a child and

54
00:03:37.789 --> 00:03:38.886
then render it out.

55
00:03:38.886 --> 00:03:42.750
So this is still going to
happen before this does, right?

56
00:03:42.750 --> 00:03:45.118
This is just going to be complete, and

57
00:03:45.118 --> 00:03:47.931
this is going to render
out complete markup.

58
00:03:47.931 --> 00:03:51.218
Let's get a little bit further, and
if it still doesn't make sense,

59
00:03:51.218 --> 00:03:52.958
I'm seeing a lot of furrowed brows.

60
00:03:52.958 --> 00:03:58.743
Let's start with,
WhoAmI JS first.WhoAmI.js,

61
00:03:58.743 --> 00:04:04.265
Import async database from promiseqlite3,
and

62
00:04:04.265 --> 00:04:12.422
I want to be able to call the database
here to figure out who this person is.

63
00:04:12.422 --> 00:04:18.999
So it's just going to say async
function get WhoAmI again,

64
00:04:18.999 --> 00:04:24.129
normally take in some ID and
you would actually

65
00:04:24.129 --> 00:04:29.008
detect based on their
session who they are.

66
00:04:29.008 --> 00:04:34.710
We're just going to assume
that they're user one,

67
00:04:34.710 --> 00:04:39.505
I'm going to say const
db equals await async

68
00:04:39.505 --> 00:04:44.573
database Syncdatabase.open./notes Db.

69
00:04:44.573 --> 00:04:49.130
And then you're going to return Db, get,

70
00:04:49.130 --> 00:04:54.953
select star from users where
ID equals question mark,

71
00:04:54.953 --> 00:05:01.156
and then you would normally
put in whatever we need there,

72
00:05:01.156 --> 00:05:06.112
but we're just gonna put one in there for
now.

73
00:05:06.112 --> 00:05:10.733
And then we're gonna say export

74
00:05:10.733 --> 00:05:15.526
default async function WhoAmI,

75
00:05:15.526 --> 00:05:20.318
and we're just going to return,

76
00:05:20.318 --> 00:05:24.082
or we need to the first, so

77
00:05:24.082 --> 00:05:28.719
const user = await getWhoAmI.

78
00:05:28.719 --> 00:05:30.850
And then we'll say return,

79
00:05:34.479 --> 00:05:39.184
&gt;&gt; Brian Holt: diviv, h1 WhoAmI and

80
00:05:39.184 --> 00:05:45.376
you're going to say,p&gt; You

81
00:05:45.376 --> 00:05:50.825
are (user.name), and

82
00:05:50.825 --> 00:05:56.281
your id is (user.id).

83
00:06:00.019 --> 00:06:03.806
&gt;&gt; Brian Holt: Okay,
total server&lt;/p&gt; Component,

84
00:06:03.806 --> 00:06:08.142
I want to render this as
a part of my client page.

85
00:06:08.142 --> 00:06:10.906
And let's say I want to be able to do
things like change the username or

86
00:06:10.906 --> 00:06:14.053
something like that from the client page,
so I actually take real user input in

87
00:06:14.053 --> 00:06:16.931
there so you can kind of mix and
match them together using this pattern.

88
00:06:16.931 --> 00:06:20.884
In fact, let's do even just that,
let's go make a client page.js.

89
00:06:23.347 --> 00:06:29.528
&gt;&gt; Brian Holt: We're going to import
an update username that we'll write

90
00:06:29.528 --> 00:06:35.089
here in just a second from
dot slash update username,

91
00:06:35.089 --> 00:06:42.403
and we're going to export default
function, client, WhoAmI page.

92
00:06:42.403 --> 00:06:49.225
And we're going to take in children and

93
00:06:49.225 --> 00:06:55.426
ID, okay, and then we're going to

94
00:06:55.426 --> 00:07:00.812
return div children, right?

95
00:07:00.812 --> 00:07:04.771
So it's just going to blindly
render out whatever's in children,

96
00:07:04.771 --> 00:07:09.702
which is going to be our server component,
and then we'll put in a form here as well,

97
00:07:09.702 --> 00:07:11.310
and we'll have an action.

98
00:07:11.310 --> 00:07:17.123
The action will be from update username,

99
00:07:17.123 --> 00:07:24.098
and In here we'll have H2,
enter new username,

100
00:07:24.098 --> 00:07:29.414
and we'll have an input type=text,

101
00:07:29.414 --> 00:07:35.063
name=username Name equals username,

102
00:07:35.063 --> 00:07:39.569
placeholder equals username.

103
00:07:39.569 --> 00:07:42.975
So something like that,
then we'll have another input,

104
00:07:42.975 --> 00:07:47.630
let's see, I mean, you've probably seen
these before, but hidden become or

105
00:07:47.630 --> 00:07:51.469
type equals hidden becomes very
useful with these kind of forms.

106
00:07:51.469 --> 00:07:56.055
If you need to pass more
back to the server, so

107
00:07:56.055 --> 00:07:59.694
I'm just gonna say name equals ID.

108
00:07:59.694 --> 00:08:02.736
And value ecosystem ID, obviously, like,

109
00:08:02.736 --> 00:08:08.274
don't put sensitive information this is
actually going to make it to the client.

110
00:08:08.274 --> 00:08:12.221
In fact, we should have a discussion
about that momentarily,

111
00:08:12.221 --> 00:08:15.877
about why that's very easy to
do with server components.

112
00:08:15.877 --> 00:08:21.520
Well, let's finish this first button type,
people's submit,

113
00:08:21.520 --> 00:08:27.174
yeah, I mean, let's talk about
that momentarily, right here.

114
00:08:27.174 --> 00:08:33.426
Let's say I had like in my WhoAmI,
let's say I had const,

115
00:08:33.426 --> 00:08:39.309
you know, open, AI, secret,
or whatever, right?

116
00:08:39.309 --> 00:08:44.958
Equals process, dot, m dot, open, AI,
secret, or something like that, right?

117
00:08:44.958 --> 00:08:48.383
Let's say this is my key
to call it my ChatGPT

118
00:08:48.383 --> 00:08:53.209
interface with this is a server
component that's very okay.

119
00:08:53.209 --> 00:08:59.032
This is here right now,
but it's really easy,

120
00:08:59.032 --> 00:09:04.128
let's say somewhere someone just says,

121
00:09:04.128 --> 00:09:06.758
Use client, right?

122
00:09:06.758 --> 00:09:09.394
Now this is very much in
danger of being exposive.

123
00:09:09.394 --> 00:09:12.295
This entire thing is going to
make it into my bundle, right?

124
00:09:12.295 --> 00:09:17.042
All of a sudden my OpenAI secret is
now suddenly available in my bundle,

125
00:09:17.042 --> 00:09:19.030
seems problematic, right?

126
00:09:19.030 --> 00:09:24.110
Could be a problem, so
you're essentially one used client away

127
00:09:24.110 --> 00:09:28.824
from database leaks [LAUGH],
which is really problematic.

128
00:09:28.824 --> 00:09:34.742
We're not gonna talk about it today,
and I think it's still in beta,

129
00:09:34.742 --> 00:09:40.782
but there's a react.js tainted,
I think is what they call it, yeah.

130
00:09:40.782 --> 00:09:43.956
So you can essentially say taint this
value, make sure that this never makes it

131
00:09:43.956 --> 00:09:46.567
to the client, so that's what
you would do with these secrets.

132
00:09:46.567 --> 00:09:51.013
You'd say taint this it'll actually, like,
fail your build, or it'll, like, fail or

133
00:09:51.013 --> 00:09:55.057
something like that, like, we detected
that you use this object where you're not

134
00:09:55.057 --> 00:09:58.175
supposed to, or that we detect
the string somewhere, so that,

135
00:09:58.175 --> 00:10:01.355
there it is, experimental taint,
object reference, right?

136
00:10:01.355 --> 00:10:04.879
There's a couple of these APIs for
specifically this reason,

137
00:10:04.879 --> 00:10:08.401
neither here nor there, but
I just wanted to point out, like,

138
00:10:08.401 --> 00:10:13.142
that is something that should be on your
mind when you're doing these is like?

139
00:10:13.142 --> 00:10:15.366
I am like, one secret or

140
00:10:15.366 --> 00:10:19.067
one line away from leaking secrets
&gt;&gt; Speaker 3: it's.

141
00:10:19.067 --> 00:10:20.678
Line you use frequently, right?

142
00:10:20.678 --> 00:10:23.659
&gt;&gt; Brian Holt: Yeah, and, like,
it's very reasonable that you're, like,

143
00:10:23.659 --> 00:10:27.558
looking at a server component later,
gonna go back and say, I probably need to,

144
00:10:27.558 --> 00:10:29.639
like, use state here, use client, right?

145
00:10:29.639 --> 00:10:31.255
&gt;&gt; Speaker 3: If we want
to inspect the build for

146
00:10:31.255 --> 00:10:34.157
these sorts of things that may
be unintentionally passed.

147
00:10:34.157 --> 00:10:36.939
Like, what's the best way for me to, like,

148
00:10:36.939 --> 00:10:41.572
look at my current blob of client code,
or is there not a good way to do that?

149
00:10:41.572 --> 00:10:45.149
&gt;&gt; Brian Holt: I don't know, yeah,
if you figure it out, let me know.

150
00:10:45.149 --> 00:10:45.976
[LAUGH].

151
00:10:45.976 --> 00:10:51.313
&gt;&gt; Speaker 4: So your server component A
is async, you're exporting async function,

152
00:10:51.313 --> 00:10:54.423
and you're calling the database import.

153
00:10:54.423 --> 00:11:00.642
Isn't your bill going to complain about
the fact that your component is async.

154
00:11:00.642 --> 00:11:03.340
&gt;&gt; Brian Holt: Which one
&gt;&gt; Speaker 4: Your WhoAmI for example,

155
00:11:03.340 --> 00:11:07.066
if you change that to be used client,
&gt;&gt; Brian Holt: Yeah,

156
00:11:07.066 --> 00:11:08.391
&gt;&gt; Speaker 4: It would be silly, hey,

157
00:11:08.391 --> 00:11:12.938
you can't use an async function here, and
you can't use this asynchronous SQL thing

158
00:11:12.938 --> 00:11:14.444
like
&gt;&gt; Brian Holt: Correct

159
00:11:14.444 --> 00:11:16.330
&gt;&gt; Speaker 4: A little bit of protection.

160
00:11:16.330 --> 00:11:21.613
&gt;&gt; Brian Holt: You're right,
you do because this would fail, right?

161
00:11:21.613 --> 00:11:25.701
Because this doesn't work in the browser,
you're correct that async won't work here,

162
00:11:25.701 --> 00:11:28.871
but like, not all of your server
components are going to be async, and

163
00:11:28.871 --> 00:11:30.681
not all of them are going to use things.

164
00:11:30.681 --> 00:11:34.400
Some of them are just gonna be like,
displaying information, right?

165
00:11:34.400 --> 00:11:38.915
So it's it's a thin layer of armor, right?

166
00:11:38.915 --> 00:11:43.885
Or maybe wouldn't rely on it,
I'll put it that way, okay,

167
00:11:43.885 --> 00:11:46.914
we're going to do update username.

168
00:11:46.914 --> 00:11:52.933
Just really quick,
update username.js,and use server,

169
00:11:52.933 --> 00:11:56.598
this has got to happen on the server.

170
00:11:56.598 --> 00:12:02.041
This is another server action import async

171
00:12:02.041 --> 00:12:07.181
database from SQLite and we're going to

172
00:12:07.181 --> 00:12:12.334
import redirect from next navigation.

173
00:12:12.334 --> 00:12:17.318
Because once someone submits this form we
want to navigate them back to the home

174
00:12:17.318 --> 00:12:18.306
page, right?

175
00:12:18.306 --> 00:12:20.390
Export, default.

176
00:12:22.575 --> 00:12:27.985
&gt;&gt; Brian Holt: Async
function update username and

177
00:12:27.985 --> 00:12:31.233
takes in form data and

178
00:12:33.092 --> 00:12:36.909
&gt;&gt; Brian Holt: Console.log Update

179
00:12:38.760 --> 00:12:43.365
&gt;&gt; Brian Holt: Username called with form

180
00:12:43.365 --> 00:12:51.739
data, Username = formdata.get username and

181
00:12:51.739 --> 00:12:57.613
const id = formdata.get.ID.

182
00:12:57.613 --> 00:13:04.541
And then you say,
if I don't have either of those,

183
00:13:04.541 --> 00:13:11.326
if no username or no ID,
you just throw new error.

184
00:13:15.377 --> 00:13:22.085
&gt;&gt; Brian Holt: And, okay, and
then we're just going to read from

185
00:13:22.085 --> 00:13:28.951
the database Const DB equals
await async database,

186
00:13:28.951 --> 00:13:34.099
dot, open, dot, slash notes dB, and

187
00:13:34.099 --> 00:13:39.403
then await dB, dot, run Update users,

188
00:13:39.403 --> 00:13:43.772
set name equal to question mark,

189
00:13:43.772 --> 00:13:48.453
where id equals question mark, and

190
00:13:48.453 --> 00:13:51.730
you do username and id and

191
00:13:51.730 --> 00:13:57.226
then redirect and then redirect to home.

192
00:13:57.226 --> 00:14:02.400
Pretty straightforward,
kind of the same thing, yeah,

193
00:14:02.400 --> 00:14:08.961
I'm really good at writing error messages,
I just want you to know that.

194
00:14:08.961 --> 00:14:14.378
WhoAmI, my name is Brian,
and your ID is one.

195
00:14:14.378 --> 00:14:18.553
What's my new name going to be not Brian,

196
00:14:18.553 --> 00:14:23.813
throw people off, and
you can see you are not Brian.

197
00:14:23.813 --> 00:14:29.210
And if I look at my notes now, you can
see that all this is going to not Brian,

198
00:14:29.210 --> 00:14:33.926
but critical part being here is
that this part, if you remember,

199
00:14:33.926 --> 00:14:37.126
that's still a server component, right?

200
00:14:37.126 --> 00:14:41.585
This part, it's client component,
this is how you can kind of mildly mix and

201
00:14:41.585 --> 00:14:42.349
match them.

202
00:14:42.349 --> 00:14:44.886
You kind of have to reframe
of how these things would

203
00:14:44.886 --> 00:14:48.249
work because it's really tempting to say,
like, I want this child

204
00:14:48.249 --> 00:14:51.852
to be a server component of this client
thing and I want to just pass it in.

205
00:14:51.852 --> 00:14:54.112
If you can figure out how
to reframe the problem so

206
00:14:54.112 --> 00:14:57.426
that you're just passing in server
components to client components,

207
00:14:57.426 --> 00:15:00.404
then you can take advantage of
this pattern, and if you can't,

208
00:15:00.404 --> 00:15:03.908
then you just got to do use useEffect or
React Query or something like that.

209
00:15:03.908 --> 00:15:07.772
Yeah, I'm going to say this is the thing
that annoys me the most about writing lots

210
00:15:07.772 --> 00:15:11.977
of React Server Components, this pattern,
it's a constant source of minor friction.

211
00:15:11.977 --> 00:15:16.905
Yeah, if you want to do something where
it is governed, like you do want to pass

212
00:15:16.905 --> 00:15:21.834
client state back into a server component
somehow you got to refresh the page or

213
00:15:21.834 --> 00:15:26.561
like, like re navigate yourself to
the page so that the server runs again.

214
00:15:26.561 --> 00:15:29.491
Not a great pattern most of the time,
right?

215
00:15:29.491 --> 00:15:34.146
Most times you're just going to say,
make a request from the client.

216
00:15:34.146 --> 00:15:36.538
&gt;&gt; Speaker 5: So in the client page.js,

217
00:15:36.538 --> 00:15:41.324
we just made,
that's the client component, right?

218
00:15:41.324 --> 00:15:47.140
You don't need to use
the useClient on that one?

219
00:15:47.140 --> 00:15:52.561
&gt;&gt; Brian Holt: That's funny,
I didn't, but I was supposed to,

220
00:15:52.561 --> 00:15:56.854
I mean, exactly to this point, right?

221
00:15:56.854 --> 00:16:01.744
You come to these places where it
actually doesn't matter, yeah,

222
00:16:01.744 --> 00:16:07.196
cause I originally, had this form is like
you state and stuff like that I realized

223
00:16:07.196 --> 00:16:12.567
later afterwards I didn't need to, but
yeah, to your point, this actually,

224
00:16:12.567 --> 00:16:17.616
this all could be just server components,
but I wanted to show you, like,

225
00:16:17.616 --> 00:16:22.775
when you have this problem of them living
side by side, this is how you do it.

226
00:16:22.775 --> 00:16:27.110
That's funny, unintentional bugs there,
which actually, maybe I'm so

227
00:16:27.110 --> 00:16:30.360
good at programming that my
brain just wouldn't let me do

228
00:16:30.360 --> 00:16:34.439
the inefficient way of doing it,
that's what I'm gonna tell myself.

