WEBVTT

1
00:00:00.000 --> 00:00:04.782
&gt;&gt; Brian Holt: So
we are gonna use transition.

2
00:00:04.782 --> 00:00:10.194
Luckily, the code is actually only mildly
more complex, but actually not really.

3
00:00:10.194 --> 00:00:16.543
It's a pretty chill API to use, and
I judge all of my APIs on chillness.

4
00:00:16.543 --> 00:00:20.699
Okay, so we are gonna go to apps.JSX.

5
00:00:20.699 --> 00:00:27.211
We're gonna bring in one more hook up
here called this lovely useTransition.

6
00:00:27.211 --> 00:00:32.657
And rather than have this state
that's tracking is pending,

7
00:00:32.657 --> 00:00:36.122
we're gonna say use transition here.

8
00:00:36.122 --> 00:00:39.340
This doesn't need anything.

9
00:00:39.340 --> 00:00:44.795
And then rather being set is pending,
it's called start transition.

10
00:00:48.905 --> 00:00:52.655
&gt;&gt; Brian Holt: So essentially what start
transition does is it's like, okay,

11
00:00:52.655 --> 00:00:54.639
you're gonna give me a function.

12
00:00:54.639 --> 00:00:58.550
Whenever this function completes,
my transition is finished.

13
00:00:58.550 --> 00:01:00.152
So it'll start when you call it.

14
00:01:00.152 --> 00:01:03.172
And it'll end whenever it ends.

15
00:01:03.172 --> 00:01:08.482
Okay, so in our get new score here,
rather than say set is pending here,

16
00:01:08.482 --> 00:01:14.339
we're just gonna delete that, and we set
the set is pending down there as well.

17
00:01:14.339 --> 00:01:17.579
And then we're just gonna wrap
all of this in a transition.

18
00:01:17.579 --> 00:01:23.820
So we're gonna say, startTransition,

19
00:01:23.820 --> 00:01:32.388
we're gonna give that
a function which is async,okay?

20
00:01:32.388 --> 00:01:39.086
And then inside of there, we're gonna say
const newScore = Await getScore like that.

21
00:01:39.086 --> 00:01:44.596
And then We could, in theory,
just do this, call it good,

22
00:01:44.596 --> 00:01:50.000
and I would say in this UI,
because newScore is actually so

23
00:01:50.000 --> 00:01:53.663
small, this would never be a problem.

24
00:01:53.663 --> 00:01:58.602
There technically is the smallest of
race conditions here, what happens if

25
00:01:58.602 --> 00:02:03.618
this setting score causes React to have
a huge re-render underneath it, and

26
00:02:03.618 --> 00:02:08.651
then you have, like, another API call
return during this huge re-render.

27
00:02:08.651 --> 00:02:13.411
In theory, that window exists now this is
so small, and this, this UI is so small,

28
00:02:13.411 --> 00:02:17.763
this would never happen, but you can
actually get away from that totally and

29
00:02:17.763 --> 00:02:19.888
just say, startTransition again.

30
00:02:24.889 --> 00:02:29.470
&gt;&gt; Brian Holt: And
now there's no race condition.

31
00:02:29.470 --> 00:02:32.431
So you can nest transitions
all the way down.

32
00:02:32.431 --> 00:02:37.080
You're basically saying this is about
to happen, this could take time.

33
00:02:37.080 --> 00:02:39.759
Please wait until this completes.

34
00:02:39.759 --> 00:02:42.794
So this is actually what
exists in the React docks.

35
00:02:42.794 --> 00:02:45.521
Again, this is kinda up to you.

36
00:02:45.521 --> 00:02:48.592
If this was really the app
that I was shipping, and

37
00:02:48.592 --> 00:02:52.920
it was this small, I probably
wouldn't 'cause it's unnecessary.

38
00:02:52.920 --> 00:02:53.783
I don't know, force a habit.

39
00:02:53.783 --> 00:02:57.266
I might do it anyway, but
that's kinda up to you.

40
00:02:57.266 --> 00:02:59.400
But that's why you see
that in the React docs.

41
00:02:59.400 --> 00:03:00.261
Yeah, this one took me a while.

42
00:03:00.261 --> 00:03:02.869
When I read that for
the first time in the React docs,

43
00:03:02.869 --> 00:03:06.865
when I was reading about transition,
I was like, Why did they nest this twice?

44
00:03:06.865 --> 00:03:08.645
This makes no sense to me.

45
00:03:08.645 --> 00:03:13.314
And then once you realize, actually
especially with like, high priority and

46
00:03:13.314 --> 00:03:18.395
low priority re-renders, it can actually
take, I don't know, tens of milliseconds.

47
00:03:18.395 --> 00:03:21.442
And in theory,
you can run into a problem there, but

48
00:03:21.442 --> 00:03:26.300
here we're probably two milliseconds right
where it's the chances are just nil.

49
00:03:26.300 --> 00:03:29.639
Let's go look, first of all.

50
00:03:29.639 --> 00:03:33.441
I didn't put this in my notes, but
you do need to drop the disabled,

51
00:03:33.441 --> 00:03:35.391
cuz now we can be able to change it.

52
00:03:35.391 --> 00:03:38.593
So on line 29 here, delete that.

53
00:03:42.756 --> 00:03:46.479
&gt;&gt; Brian Holt: Okay, so
now this is responsive, right?

54
00:03:46.479 --> 00:03:50.650
And I can change it a bunch of times and
no matter what,

55
00:03:50.650 --> 00:03:55.122
it's still gonna end up on the right game,
eventually.

56
00:03:55.122 --> 00:03:59.304
So we know game one is the 404s
versus the 500s, right?

57
00:03:59.304 --> 00:04:04.072
So I can change this a bunch of times and

58
00:04:04.072 --> 00:04:07.801
then I wanna end up on Game 1.

59
00:04:07.801 --> 00:04:12.533
These API requests are all
completing in the background, right?

60
00:04:12.533 --> 00:04:13.726
It's not dropping them.

61
00:04:13.726 --> 00:04:15.485
That's just how these things work, right?

62
00:04:15.485 --> 00:04:19.494
But it's ignoring all of these state
changes until it gets the final

63
00:04:19.494 --> 00:04:22.527
one that the user changes
because of transitions.

64
00:04:22.527 --> 00:04:24.810
Pretty cool, right?

65
00:04:24.810 --> 00:04:27.679
So we kinda sidestep this entire problem.

66
00:04:27.679 --> 00:04:31.218
And our code really didn't
get a lot more complicated.

67
00:04:31.218 --> 00:04:36.958
In some ways, the transition syntax here
is actually kinda nice cuz you identify,

68
00:04:36.958 --> 00:04:41.632
here's a busy part of my code, and
I know that this takes a while, so

69
00:04:41.632 --> 00:04:45.897
I'm deferring some of this stuff
to lower priority renders.

70
00:04:45.897 --> 00:04:47.317
Does it make sense?

71
00:04:47.317 --> 00:04:52.569
&gt;&gt; Speaker 2: Yeah, would best practice
be to add some sort of cancellation

72
00:04:52.569 --> 00:04:56.716
to the requests that we
don't need to complete.

73
00:04:56.716 --> 00:05:00.929
Theoretically, a user
could just arrow up and

74
00:05:00.929 --> 00:05:06.552
down a bunch of times and
quickly fire off a bunch of requests.

75
00:05:06.552 --> 00:05:10.525
&gt;&gt; Brian Holt: I'm trying to envision
how I would try and do that.

76
00:05:10.525 --> 00:05:12.493
&gt;&gt; Speaker 3: Isn't there an abort
controller that you can use?

77
00:05:12.493 --> 00:05:13.768
&gt;&gt; Brian Holt: There is.

78
00:05:13.768 --> 00:05:16.095
To what end, right?

79
00:05:16.095 --> 00:05:17.511
You're already ignoring the request.

80
00:05:17.511 --> 00:05:21.231
The point of the abort control is that
you don't call the the follow up like

81
00:05:21.231 --> 00:05:22.311
callbacks, right?

82
00:05:22.311 --> 00:05:26.247
And in this case, you're kinda just
ignoring them implicitly, right?

83
00:05:26.247 --> 00:05:29.757
I suppose if you were doing
a ton of processes afterwards-

84
00:05:29.757 --> 00:05:31.012
&gt;&gt; Speaker 2: Long-running task or

85
00:05:31.012 --> 00:05:33.737
hitting a database,
&gt;&gt; Speaker 3: kinda debalance the calls

86
00:05:33.737 --> 00:05:35.626
then and cancel the debalance.

87
00:05:35.626 --> 00:05:41.023
Because in this scenario, once you
hit the button, you sent the request.

88
00:05:41.023 --> 00:05:45.098
If you waited for
100 milliseconds to send the request,

89
00:05:45.098 --> 00:05:48.855
you would stop the quick
arrow button from sending it.

90
00:05:48.855 --> 00:05:51.557
&gt;&gt; Brian Holt: I could
see this being helpful.

91
00:05:51.557 --> 00:05:52.330
What you're talking about.

92
00:05:52.330 --> 00:05:53.454
I could see that being helpful.

93
00:05:53.454 --> 00:05:58.434
It's like, if I had, right here,

94
00:05:58.434 --> 00:06:01.098
a ton of code here.

95
00:06:01.098 --> 00:06:03.063
That was busy, right?

96
00:06:03.063 --> 00:06:05.933
And I'm trying to prevent
[INAUDIBLE] that kinda stuff.

97
00:06:05.933 --> 00:06:10.730
Or maybe, honestly,
I don't even know that these

98
00:06:10.730 --> 00:06:14.758
functions get run, to be honest with you.

99
00:06:14.758 --> 00:06:16.536
Honestly, let's try.

100
00:06:20.747 --> 00:06:23.651
&gt;&gt; Brian Holt: To succinctly answer
your question, I've never had to.

101
00:06:28.076 --> 00:06:32.544
&gt;&gt; Brian Holt: So
if I let's just open our console here, and

102
00:06:32.544 --> 00:06:36.907
whenever it loads, it says hello, right?

103
00:06:36.907 --> 00:06:40.912
Let's just make it so it adds like
date.now or something like that.

104
00:06:44.090 --> 00:06:48.749
&gt;&gt; Brian Holt: Okay, so it should say
hello and it should say date.now.

105
00:06:48.749 --> 00:06:50.966
And I'm just gonna change
this a bunch of times.

106
00:06:57.087 --> 00:07:00.784
&gt;&gt; Brian Holt: So it is getting run, you
can see there, these are all being run,

107
00:07:00.784 --> 00:07:02.883
but it's just ignoring all of them.

108
00:07:02.883 --> 00:07:05.501
So I could see doing something
like there as like, hey,

109
00:07:05.501 --> 00:07:07.689
are you still in flight
doing something else?

110
00:07:07.689 --> 00:07:12.895
Don't do this like post-processing
of the data, today I learned.

111
00:07:18.339 --> 00:07:21.368
&gt;&gt; Brian Holt: What's
the best way to do that?

112
00:07:21.368 --> 00:07:25.432
I could you just like, look,
let's look at the is pending.

113
00:07:29.992 --> 00:07:34.024
&gt;&gt; Brian Holt: So, it's pending here.

114
00:07:34.024 --> 00:07:35.111
Probably still true.

115
00:07:35.111 --> 00:07:36.410
No, it's false, okay.

116
00:07:46.945 --> 00:07:50.110
&gt;&gt; Brian Holt: So these are still true,
and then this comes out.

117
00:07:50.110 --> 00:07:51.132
The other end is true.

118
00:07:51.132 --> 00:07:53.249
Okay, so
that's actually not a reliable way either.

119
00:07:53.249 --> 00:07:54.447
I don't know,
I'd have to think about this.

120
00:07:54.447 --> 00:07:55.664
I haven't really thought.

121
00:07:55.664 --> 00:08:00.123
Maybe just use state right to keep
track of, like is something in flight?

122
00:08:00.123 --> 00:08:06.941
Yeah, it's good question.

123
00:08:06.941 --> 00:08:08.350
Normally, this is enough, though.

124
00:08:08.350 --> 00:08:12.750
You probably just try and keep this stuff
out of the out of the transition path

125
00:08:12.750 --> 00:08:17.796
right, and then just kinda have that all
happen, maybe during your renders, right?

