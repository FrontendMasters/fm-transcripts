WEBVTT

1
00:00:00.000 --> 00:00:04.292
So with that, that is kind of all
of the parts of Tailwind that

2
00:00:04.292 --> 00:00:08.247
I have in the two or
three years that I've been using it,

3
00:00:08.247 --> 00:00:13.734
are the ones that stuck with me of,
those are the kind of most important ones.

4
00:00:13.734 --> 00:00:18.202
Now, you should definitely go take a look
in the docs because there's a lot more

5
00:00:18.202 --> 00:00:21.937
things that some of them may be very
unique to what you're doing and

6
00:00:21.937 --> 00:00:25.491
stuff along those lines, and
you can try all those things out.

7
00:00:25.491 --> 00:00:30.035
But I think that for the most part,
having a lot of those variants and

8
00:00:30.035 --> 00:00:34.656
a lot of being able to kind of just
know the state of a lot of the forms and

9
00:00:34.656 --> 00:00:39.201
being able to have styles that rely
on the state of other DOM nodes and

10
00:00:39.201 --> 00:00:42.427
the container queries and
all of those pieces.

11
00:00:42.427 --> 00:00:47.557
And especially, I think the responsive
variants are also, again,

12
00:00:47.557 --> 00:00:52.510
worth the cost of entry, because it
has made doing all that stuff so

13
00:00:52.510 --> 00:00:57.553
incredibly fast that the productivity
gains, I think, on my end,

14
00:00:57.553 --> 00:01:03.069
at least, in my experience,
have been absolutely and totally worth it.

15
00:01:03.069 --> 00:01:06.562
And I hope that you feel the same way as
you kinda get comfortable with it as well,

16
00:01:06.562 --> 00:01:09.759
and maybe you'll find different parts
that are the most useful for you.

17
00:01:09.759 --> 00:01:13.253
But these have been the parts that over
and over and over and over and over and

18
00:01:13.253 --> 00:01:16.862
over again, I find myself on a daily
basis to the point where they, at first,

19
00:01:16.862 --> 00:01:19.861
even if some of those utility
classes look a little squirrelly,

20
00:01:19.861 --> 00:01:21.995
you get the muscle memory
at a certain point.

21
00:01:21.995 --> 00:01:24.628
And then all of a sudden you're
whipping out a design in a day,

22
00:01:24.628 --> 00:01:26.264
and it's like this isn't even real.

23
00:01:26.264 --> 00:01:28.560
And now everyone thinks I'm
really good at what I do.

24
00:01:28.560 --> 00:01:31.496
It's just I have good tools and
it makes it easy.

25
00:01:31.496 --> 00:01:33.035
&gt;&gt; Let's start with,

26
00:01:33.035 --> 00:01:38.292
is there any special considerations
when building for production?

27
00:01:38.292 --> 00:01:40.890
&gt;&gt; So at the end of the day, it spits out.

28
00:01:40.890 --> 00:01:46.175
The nice part about that PurgeCSS
piece is it's scanning those files

29
00:01:46.175 --> 00:01:52.017
based on this content and putting
together only the styles that I'm using.

30
00:01:52.017 --> 00:01:54.011
Which is why they don't
want you to use apply,

31
00:01:54.011 --> 00:01:57.300
cuz then those words are in your codebase,
whether or not you use the style.

32
00:01:57.300 --> 00:02:00.556
If you wanna use an applier,
too, and make some components,

33
00:02:00.556 --> 00:02:04.388
know that you're opting out of some
of the performance optimizations.

34
00:02:04.388 --> 00:02:08.358
But if it makes it more practical,
go for it, you have my permission.

35
00:02:08.358 --> 00:02:10.937
You don't have the official Tailwind
permission, you have my permission.

36
00:02:10.937 --> 00:02:15.443
But for production,
it'll spit out the JavaScript files, and

37
00:02:15.443 --> 00:02:20.199
then if it is useful, you could see
in the playgrounds where it shows

38
00:02:20.199 --> 00:02:23.379
you the JavaScript that
would have spit out.

39
00:02:23.379 --> 00:02:28.914
At that point also,
it's going to run through PostCSS,

40
00:02:28.914 --> 00:02:32.268
which I use Svelte and SvelteKit.

41
00:02:32.268 --> 00:02:37.768
And even our React apps, we use Vite,
which also has built-in PostCSS support,

42
00:02:37.768 --> 00:02:42.403
which is then also gonna minify,
we use cssnano as a PostCSS plugin.

43
00:02:42.403 --> 00:02:45.654
So Tailwind goes through,
scans my entire codebase,

44
00:02:45.654 --> 00:02:49.270
sees what class I'm actually using,
only includes those.

45
00:02:49.270 --> 00:02:53.920
Those then get sent into PostCSS with
no work on my part, it just happens,

46
00:02:53.920 --> 00:02:56.631
and get minified down to the bare minimum.

47
00:02:56.631 --> 00:03:01.634
Or if I want to add vendor prefixes,
which I don't need to,

48
00:03:01.634 --> 00:03:05.536
cuz I have the metrics
of what browsers we use,

49
00:03:05.536 --> 00:03:12.661
which as somebody who works on a
developer-facing product, it's 99% Chrome.

50
00:03:12.661 --> 00:03:16.065
And I can also skip a lot of
the vendor prefixes because I'm

51
00:03:16.065 --> 00:03:18.372
dealing with people who have Monarch.

52
00:03:18.372 --> 00:03:21.624
If I worked in a different industry,
I would not maybe be able to do that.

53
00:03:21.624 --> 00:03:25.052
But the fact that it is running
through PostCSS means you're getting

54
00:03:25.052 --> 00:03:27.189
the production build basically for free.

55
00:03:27.189 --> 00:03:33.099
&gt;&gt; Are there any tools in the Tailwind
ecosystem that you use in your workflow

56
00:03:33.099 --> 00:03:39.786
around larger projects, for example,
shadcn/ui, daisyUI, Flowbite, etc?

57
00:03:39.786 --> 00:03:41.042
&gt;&gt; So I don't.

58
00:03:41.042 --> 00:03:46.036
However, I will say,
Flowbite's documentation is just good for

59
00:03:46.036 --> 00:03:49.524
learning how to do stuff in Tailwind,
right?

60
00:03:49.524 --> 00:03:52.242
There's one or two things where
there's a special little bit of

61
00:03:52.242 --> 00:03:54.771
JavaScript part on their end,
but Flowbite's like docs.

62
00:03:54.771 --> 00:03:58.284
If you wanna do that thing where
the Submit button looks like it's part of

63
00:03:58.284 --> 00:04:01.798
the input field and the borders are all
there, you just type that in, and

64
00:04:01.798 --> 00:04:04.467
they've got a documentation and
an example, right?

65
00:04:04.467 --> 00:04:06.590
The stuff like a date picker or
some of the other stuff,

66
00:04:06.590 --> 00:04:08.029
you do need their full-on library.

67
00:04:08.029 --> 00:04:14.311
But a lot of this I don't personally cuz
our designers have their own very specific

68
00:04:14.311 --> 00:04:20.154
design language, and we have a full-on
team, so we actually have our own.

69
00:04:20.154 --> 00:04:23.624
But I've looked at all those,
and they look great.

70
00:04:23.624 --> 00:04:28.292
And do I regularly, let's just say,
get inspiration from them?

71
00:04:28.292 --> 00:04:29.133
Absolutely.

72
00:04:31.416 --> 00:04:35.565
&gt;&gt; We have a user who just finished
watching Figma for Developers.

73
00:04:35.565 --> 00:04:39.219
And is wondering if you have
any tips on building a custom

74
00:04:39.219 --> 00:04:44.218
designed system with Tailwind CSS or
kind of with the Figma workflow there.

75
00:04:44.218 --> 00:04:45.991
&gt;&gt; Give me six months.

76
00:04:45.991 --> 00:04:48.154
So right now we are, like I said before,

77
00:04:48.154 --> 00:04:52.164
one of the nice parts about having all
the utility classes is that we could do

78
00:04:52.164 --> 00:04:54.667
the audit to figure out
what colors are where.

79
00:04:54.667 --> 00:04:57.381
So we have a designer,
Ash, who is using Figma.

80
00:04:57.381 --> 00:05:01.134
So Figma has this new idea
of variables in Figma, so

81
00:05:01.134 --> 00:05:04.467
like the colors are weirdly called bg-red.

82
00:05:04.467 --> 00:05:08.122
We are only gonna do light, medium, and
dark, we're not gonna do the full 900.

83
00:05:08.122 --> 00:05:11.651
But we are literally in the process of,
in Figma,

84
00:05:11.651 --> 00:05:16.357
mapping all the design tokens and
variables to Tailwind classes,

85
00:05:16.357 --> 00:05:20.573
that literally what I was doing,
what day of the week is it?

86
00:05:20.573 --> 00:05:23.829
Whatever day of work
before I flew out here,

87
00:05:23.829 --> 00:05:29.813
I was literally working from Figma's API
trying to generate the Tailwind styles

88
00:05:29.813 --> 00:05:34.918
directly from a designer's designs
to generate the design system.

89
00:05:34.918 --> 00:05:36.931
So at this moment, I do not.

90
00:05:36.931 --> 00:05:40.159
Give me a month or two and I will.

91
00:05:40.159 --> 00:05:44.313
&gt;&gt; What's the Tailwind
alternative to using calc?

92
00:05:44.313 --> 00:05:50.880
For example, height: calc(100vh- 70px).

93
00:05:50.880 --> 00:05:52.417
&gt;&gt; That's a good question.

94
00:05:52.417 --> 00:05:59.728
I have a suspicion that it's
easier than we all think it is.

95
00:05:59.728 --> 00:06:03.591
This could go poorly, but why not?

96
00:06:03.591 --> 00:06:08.391
So my suspicion it's probably as easy as,

97
00:06:14.307 --> 00:06:18.774
So if I did something like class, and
let's say we wanted height, for instance,

98
00:06:18.774 --> 00:06:23.587
and we wanted it to be, Calc,

99
00:06:23.587 --> 00:06:26.632
and let's say, what,

100
00:06:26.632 --> 00:06:31.712
100 view height, minus-
&gt;&gt; Like 70 pixels.

101
00:06:31.712 --> 00:06:33.673
&gt;&gt; 70 pixels.

102
00:06:37.865 --> 00:06:38.799
That's it.

103
00:06:38.799 --> 00:06:42.849
[LAUGH] You can see, as I hover over,

104
00:06:42.849 --> 00:06:47.439
height: calc(100vh- 70px).

105
00:06:47.439 --> 00:06:51.400
You can just do the arbitrary
values in there, and it just works.

106
00:06:51.400 --> 00:06:57.028
&gt;&gt; Do you have any tips for handling
scrolling panels within a grid container?

107
00:06:57.028 --> 00:06:57.848
&gt;&gt; Yes.
&gt;&gt; For example,

108
00:06:57.848 --> 00:07:00.390
if you're looking to build a full
screen app similar to Slack.

109
00:07:00.390 --> 00:07:03.686
&gt;&gt; So there is a bunch of scroll snap
stuff kinda built-in, and check this out.

110
00:07:03.686 --> 00:07:08.489
You can actually have the snap point,
and then there's one where

111
00:07:08.489 --> 00:07:12.960
you can actually set it to mandatory,
and it goes back.

112
00:07:12.960 --> 00:07:15.433
And then if you go enough,
it'll actually kinda scroll.

113
00:07:15.433 --> 00:07:18.956
And this is a Flexbox,
I have to believe, not a grid per se,

114
00:07:18.956 --> 00:07:22.408
although that might just be wrong,
but you can actually,

115
00:07:22.408 --> 00:07:25.456
there's a bunch of utilities in here for
exactly.

116
00:07:25.456 --> 00:07:28.883
I almost like wanted to do the slideshow
piece before I decided that I was gonna do

117
00:07:28.883 --> 00:07:30.430
everything in the browser anyway.

118
00:07:30.430 --> 00:07:35.639
Like this as well and kinda build a little
slide out because you can do that in here,

119
00:07:35.639 --> 00:07:38.293
and there's a bunch of utility classes.

120
00:07:38.293 --> 00:07:43.186
And scroll behavior, you get overflow, all
those things you can kind of do all those,

121
00:07:43.186 --> 00:07:46.284
but the scroll snap,
I think it's super cool as well.

122
00:07:48.465 --> 00:07:50.613
&gt;&gt; How do you incorporate CSS variables?

123
00:07:50.613 --> 00:07:55.082
&gt;&gt; I can define them or
whatever, but you saw a lot of

124
00:07:55.082 --> 00:08:00.098
the classes that were getting
used had CSS variables.

125
00:08:00.098 --> 00:08:04.916
But you can literally do the dash
dash syntax in one of those arbitrary

126
00:08:04.916 --> 00:08:06.255
square brackets.

127
00:08:06.255 --> 00:08:07.656
Is there a easy?

128
00:08:09.842 --> 00:08:13.291
Yeah, so let's say you had
them in one of the layers.

129
00:08:13.291 --> 00:08:18.061
So there's the classic root thing as well.

130
00:08:18.061 --> 00:08:21.827
You can literally either put them in
the theme as something you pull in, so

131
00:08:21.827 --> 00:08:26.021
that they're just utility classes you can
use that are based on the variables that

132
00:08:26.021 --> 00:08:27.019
already existed.

133
00:08:27.019 --> 00:08:31.948
Or I believe you can do the arbitrary
value thing and just inline them as well.

134
00:08:31.948 --> 00:08:36.307
Also in my case, Svelte lets me literally
put dash dash whatever in there, and

135
00:08:36.307 --> 00:08:37.970
put them in directly as well.

136
00:08:37.970 --> 00:08:40.026
So I have that at my disposal.

137
00:08:40.026 --> 00:08:42.831
Yeah, there's some bonus content
of the stuff where I'm like,

138
00:08:42.831 --> 00:08:44.370
I don't wanna go until 7 tonight.

139
00:08:44.370 --> 00:08:49.955
[LAUGH] That is there as well that
you can kinda take a look at,

140
00:08:49.955 --> 00:08:52.534
but again, there is a lot.

141
00:08:52.534 --> 00:08:55.406
Cmd+K on the Tailwind Docs is your friend.

142
00:08:55.406 --> 00:08:57.754
You can kinda search and find stuff.

143
00:08:57.754 --> 00:08:59.389
And yes, you should.

144
00:08:59.389 --> 00:09:02.386
The only person I think to ever
read it from start to finish is me,

145
00:09:02.386 --> 00:09:05.006
mostly cuz I was gonna teach
a six-hour workshop on it.

146
00:09:05.006 --> 00:09:06.919
I felt like that was
the responsible thing to do.

147
00:09:06.919 --> 00:09:10.326
But it's kinda useful if you're
just kinda popping in and

148
00:09:10.326 --> 00:09:12.348
finding the pieces that you need.

149
00:09:12.348 --> 00:09:16.341
But again, that container query
plugin is my heart and soul, and

150
00:09:16.341 --> 00:09:18.018
one of my favorite things.

151
00:09:18.018 --> 00:09:22.053
I would definitely highly
recommend that as well.

152
00:09:22.053 --> 00:09:26.620
And I'm trying to think if there's
anything in here that's just fun.

153
00:09:26.620 --> 00:09:30.648
The transitions and the animations and
transforms are always fun,

154
00:09:30.648 --> 00:09:33.409
even though everyone
hates me when I use them.

155
00:09:33.409 --> 00:09:35.324
That's their problem, not my problem.

156
00:09:38.017 --> 00:09:39.002
&gt;&gt; All right, thanks to you.

157
00:09:39.002 --> 00:09:39.793
&gt;&gt; Thank you.

158
00:09:39.793 --> 00:09:43.760
&gt;&gt; [APPLAUSE]

