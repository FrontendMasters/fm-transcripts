WEBVTT

1
00:00:00.120 --> 00:00:05.293
So I want to then show you, I think,
where this also gets very, very powerful,

2
00:00:05.293 --> 00:00:10.722
which are some of these modifiers here,
right, which look like variants as well.

3
00:00:10.722 --> 00:00:13.180
But they kind of like work in tandem.

4
00:00:13.180 --> 00:00:16.052
So you've got these two utility classes,

5
00:00:16.052 --> 00:00:19.170
one called peer and
one called group, right?

6
00:00:19.170 --> 00:00:20.860
And they behave roughly the same way.

7
00:00:20.860 --> 00:00:23.440
I have two sections cuz that's
just how writing works.

8
00:00:23.440 --> 00:00:25.350
But I'm gonna kinda like talk
about them a little bit.

9
00:00:25.350 --> 00:00:27.040
We'll look at them each individually.

10
00:00:27.040 --> 00:00:31.774
But you can give a given element peer or
group, and

11
00:00:31.774 --> 00:00:37.990
then you get a set of variants for
other elements nearby, right?

12
00:00:37.990 --> 00:00:41.646
So to kind of show you a little
bit how this works is like

13
00:00:41.646 --> 00:00:46.620
I'm gonna open this up so you can kind
of see what's going on in the HTML.

14
00:00:50.370 --> 00:00:52.880
Which let's give ourselves
a little bit of space in here.

15
00:00:54.050 --> 00:00:55.440
There we go.

16
00:00:55.440 --> 00:01:02.324
Sub read the label from everything else,
which is I've got this p class here,

17
00:01:02.324 --> 00:01:07.770
which is technically out of the box,
invisible, right?

18
00:01:07.770 --> 00:01:10.560
Invisible is different than hidden.

19
00:01:10.560 --> 00:01:14.452
The difference is that invisible still
takes up the same amount of space,

20
00:01:14.452 --> 00:01:15.840
hidden collapses.

21
00:01:15.840 --> 00:01:20.280
So if you don't want your form
jumping up and down constantly, right?

22
00:01:20.280 --> 00:01:23.070
It's still taking up the same height
it would take if it was visible.

23
00:01:23.070 --> 00:01:27.062
Hidden will literally won't remove it from
the DOM, but as far as you're concerned,

24
00:01:27.062 --> 00:01:29.810
it will remove it from the DOM
in terms of your layout.

25
00:01:29.810 --> 00:01:32.510
So invisible just has to
take up the same space.

26
00:01:32.510 --> 00:01:35.786
And you can say that
with this input field,

27
00:01:35.786 --> 00:01:38.882
I have like mentioned that it has a peer.

28
00:01:38.882 --> 00:01:41.880
Right, like, I'm looking for it in here.

29
00:01:41.880 --> 00:01:45.110
There it is.
It's the very first one, peer, right?

30
00:01:45.110 --> 00:01:48.810
And that's just saying that
this one can now use a variant,

31
00:01:48.810 --> 00:01:51.260
which is saying peer invalid, right?

32
00:01:51.260 --> 00:01:55.934
So now whether or
not this paragraph is invalid,

33
00:01:55.934 --> 00:02:00.838
whether or
not the input field is invalid, right?

34
00:02:00.838 --> 00:02:04.414
And if so, since this is for
an email address,

35
00:02:04.414 --> 00:02:07.899
then I can show the error
message in pure CSS,

36
00:02:07.899 --> 00:02:12.944
no JavaScript needed,
just technically the DOM, not just CSS,

37
00:02:12.944 --> 00:02:18.160
like a little, that meme of
the two arms doing the handshake.

38
00:02:18.160 --> 00:02:21.199
But yeah, so if you're working on it,
so on and so forth, but

39
00:02:21.199 --> 00:02:24.420
you can have these custom
error messages in there.

40
00:02:24.420 --> 00:02:25.479
And I have it like,

41
00:02:25.479 --> 00:02:29.660
we call it invalid when we're no
longer focused on it in this case.

42
00:02:29.660 --> 00:02:31.610
But that's up here.

43
00:02:31.610 --> 00:02:38.782
Now one important note is that kind
of sort of asterisks like disclaimer,

44
00:02:38.782 --> 00:02:43.100
you can only do future siblings, right?

45
00:02:43.100 --> 00:02:47.148
And so you'll notice if I do, for

46
00:02:47.148 --> 00:02:51.774
instance, peer invalid, bg-red,

47
00:02:51.774 --> 00:02:56.410
not 300 this time, doing 500.

48
00:02:56.410 --> 00:02:58.400
It doesn't matter.
We'll never see it.

49
00:02:58.400 --> 00:03:02.310
You'll notice that this
class does not work.

50
00:03:02.310 --> 00:03:05.150
That's not a Tailwind thing.

51
00:03:05.150 --> 00:03:07.680
That is a CSS thing, right?

52
00:03:07.680 --> 00:03:13.190
You can only theoretically go forward and

53
00:03:13.190 --> 00:03:18.280
like I said, it is slightly true.

54
00:03:18.280 --> 00:03:20.970
There is a way to do it.

55
00:03:20.970 --> 00:03:24.308
It is kind of the preamble I gave right
before we kind of get grabbed into

56
00:03:24.308 --> 00:03:24.999
the section.

57
00:03:24.999 --> 00:03:26.976
Is there a way to do it, yes.

58
00:03:26.976 --> 00:03:31.390
Is there a fully supported way to
do it across all the browsers?

59
00:03:31.390 --> 00:03:32.630
Presently, no.

60
00:03:32.630 --> 00:03:36.870
It's one of those things which is like,
wait a while, and you will be able to.

61
00:03:36.870 --> 00:03:38.760
At this moment, you can't.

62
00:03:40.570 --> 00:03:43.758
So generally speaking, and
it's kind of annoying, because like, for

63
00:03:43.758 --> 00:03:45.390
the invalid, I don't really care.

64
00:03:45.390 --> 00:03:49.600
I would love a world where for a required
field I could show a little dot or

65
00:03:49.600 --> 00:03:52.730
something when we get to before and
afters.

66
00:03:52.730 --> 00:03:53.720
Pseudo selectors.

67
00:03:53.720 --> 00:03:55.220
I can do all of that.

68
00:03:55.220 --> 00:03:58.900
And so theoretically out of
the box right now I can't.

69
00:03:58.900 --> 00:04:03.700
A lot of the times the way that I
do this is like JavaScript, right?

70
00:04:03.700 --> 00:04:09.217
But let's talk about the future
syntax that we could theoretically

71
00:04:09.217 --> 00:04:14.150
use in the future and
just to kind of like wet our appetites for

72
00:04:14.150 --> 00:04:17.075
when it's more widely supported.

73
00:04:17.075 --> 00:04:21.481
And to show, right, it is presently it

74
00:04:21.481 --> 00:04:26.030
looks like Firefox is the holdout here.

75
00:04:27.190 --> 00:04:35.458
We were all expecting a certain browser
made by Apple to be the one in this case.

76
00:04:35.458 --> 00:04:40.875
But it looks like at this point
even those green flags are like,

77
00:04:40.875 --> 00:04:44.571
it is in a future build of Firefox, right?

78
00:04:44.571 --> 00:04:47.040
Do you all know what Opera Mini is?

79
00:04:47.040 --> 00:04:50.140
That's the one that takes a picture of
the webpage and sends it to your phone.

80
00:04:50.140 --> 00:04:52.930
So that will never have anything ever.

81
00:04:52.930 --> 00:04:56.311
And like this, as we get down this list,
I care less and less and less, but

82
00:04:56.311 --> 00:04:58.350
it looks like this is
some syntax in IE 11.

83
00:04:58.350 --> 00:04:59.930
I don't.

84
00:04:59.930 --> 00:05:04.949
But it looks like this will
be some syntax that we get

85
00:05:04.949 --> 00:05:10.100
at some point,
right in the future but not just yet.

86
00:05:10.100 --> 00:05:16.950
And could you through some concoction
of post-CSS to transpile it.

87
00:05:16.950 --> 00:05:20.450
And I don't know that you can,
because something's you can't transpile.

88
00:05:20.450 --> 00:05:23.440
And a tailwind plugin,
could you support it?

89
00:05:23.440 --> 00:05:28.170
Maybe, not gonna talk about what
I plan on doing this weekend.

90
00:05:28.170 --> 00:05:32.695
But let's just talk about how
the CSS would work in this case as

91
00:05:32.695 --> 00:05:34.796
a little like exploration.

92
00:05:34.796 --> 00:05:41.714
And then we will kind of like understand
that right now we can't, okay?

93
00:05:41.714 --> 00:05:46.742
So and this is where stuff like plugins or
stuff like utility methods,

94
00:05:46.742 --> 00:05:49.910
you might cuz like the CSS or
work in Chrome.

95
00:05:49.910 --> 00:05:53.448
If you can figure out a progressive
enhancement strategy that works for you.

96
00:05:53.448 --> 00:05:58.048
And for instance,
if it's just turning the label dark

97
00:05:58.048 --> 00:06:02.655
red when it's invalid,
that might be an okay reason.

98
00:06:02.655 --> 00:06:05.995
Your users aren't losing
anything if that doesn't work.

99
00:06:05.995 --> 00:06:09.155
They're just things you need to like, I
can't tell you, you should totally do it.

100
00:06:09.155 --> 00:06:13.245
It is more of a like you can consider
whether or not you want to do it.

101
00:06:13.245 --> 00:06:17.765
And so we have the has operator, right?

102
00:06:17.765 --> 00:06:20.535
And so you could theoretically
end up with CSS like.

103
00:06:21.975 --> 00:06:26.080
I was just writing the raw CSS.

104
00:06:26.080 --> 00:06:29.164
But you do something
like take the label and

105
00:06:29.164 --> 00:06:34.313
then Has has this like a query selector
where you can kind of like use it.

106
00:06:34.313 --> 00:06:35.382
So Has and then.

107
00:06:39.393 --> 00:06:43.290
What we can say is and
then it has an input that is required.

108
00:06:43.290 --> 00:06:49.520
I don't know what we would make that look
in the tailwind syntax, but it's saying,

109
00:06:49.520 --> 00:06:55.630
is after this there is immediately
an input that is technically required.

110
00:06:55.630 --> 00:06:59.070
Or let's do invalid in this case.

111
00:06:59.070 --> 00:07:01.433
We can do that and we'll say

112
00:07:06.642 --> 00:07:09.910
Give me like a, yeah, that kind of read.

113
00:07:09.910 --> 00:07:14.450
And so theoretically,
you can see that it does work in Chrome.

114
00:07:14.450 --> 00:07:16.850
If you're trying this in Firefox,
you're like, it doesn't work for me.

115
00:07:16.850 --> 00:07:22.313
We saw that it doesn't work and depending
on what version you have of something

116
00:07:22.313 --> 00:07:27.380
right now, if it doesn't work for
you that's possibly like very okay.

117
00:07:27.380 --> 00:07:30.000
And that is part of
the story in this case.

118
00:07:30.000 --> 00:07:33.987
But those are some of the things like some
of the limitations are not necessarily

119
00:07:33.987 --> 00:07:35.666
tailwind limitations, right?

120
00:07:35.666 --> 00:07:40.159
And this kind of goes to our previous
point of how much CSS do I need to know to

121
00:07:40.159 --> 00:07:41.112
use Tailwind.

122
00:07:41.112 --> 00:07:43.255
It is just CSS at the end of the day.

123
00:07:43.255 --> 00:07:45.645
It's not doing any kind
of magic beyond that.

124
00:07:45.645 --> 00:07:49.955
It's simply a set of helpers and
utilities for CSS.

125
00:07:49.955 --> 00:07:54.416
But the ability to set up
those peers like that super

126
00:07:54.416 --> 00:07:58.125
easily is really powerful as well.

127
00:07:58.125 --> 00:08:02.875
And another really nice use case for

128
00:08:02.875 --> 00:08:08.584
that is, actually I think this is for you.

129
00:08:08.584 --> 00:08:12.112
This is another example where,
yes, I picked the most ridiculous

130
00:08:12.112 --> 00:08:16.610
strikethrough on purpose because
sometimes I'm allowed to have fun too.

131
00:08:16.610 --> 00:08:19.786
And so we'll kind of look at this
one real quick, but it's again,

132
00:08:19.786 --> 00:08:22.550
like the various places
where you can use this.

133
00:08:22.550 --> 00:08:26.240
Because who doesn't like to
make a to do list app, right?

134
00:08:26.240 --> 00:08:30.780
I say as somebody who does it several
times a year standing at this podium.

135
00:08:30.780 --> 00:08:34.800
So here it's like, again, this also
shows another selector in this case.

136
00:08:34.800 --> 00:08:37.406
So we say the checkbox is the peer.

137
00:08:37.406 --> 00:08:40.160
And then this label comes afterwards.

138
00:08:40.160 --> 00:08:42.600
I'm like, this label.

139
00:08:42.600 --> 00:08:46.790
So theoretically, this one can use peer
checked and gets the line through.

140
00:08:46.790 --> 00:08:50.712
And this is again, really an excuse for
me to show you a few more of the little

141
00:08:50.712 --> 00:08:55.200
friendly utility classes that you get
with this, decoration, purple, decoration

142
00:08:55.200 --> 00:08:59.163
force, how thick you want it to be like
the width of it and decoration wavy.

143
00:08:59.163 --> 00:09:03.491
Honestly, autocomplete showed me wavy when
I was preparing this I'm like I can't not

144
00:09:03.491 --> 00:09:04.510
pick wavy, right?

145
00:09:04.510 --> 00:09:07.834
I have to work on a real thing like
customers used or my day to day lives like

146
00:09:07.834 --> 00:09:12.075
if I get to do one of these workshops and
I see wavy is an option, I'm picking it.

147
00:09:12.075 --> 00:09:12.975
Do you have a question?

148
00:09:12.975 --> 00:09:17.855
&gt;&gt; Is there like a scope to peer and is
it like, can you have multiple on a page?

149
00:09:17.855 --> 00:09:21.585
&gt;&gt; You can have multiple, so
that's a really great question.

150
00:09:21.585 --> 00:09:23.495
You can have multiple on a page.

151
00:09:23.495 --> 00:09:28.605
This peer, for instance, it's just
gonna be our default peer, right?

152
00:09:28.605 --> 00:09:30.070
But let's say.

153
00:09:30.070 --> 00:09:37.240
This will be a little bit contrived
because we'll make these all peers, right?

154
00:09:37.240 --> 00:09:41.881
And so theoretically, this should break
in the way that I expect as I live code,

155
00:09:41.881 --> 00:09:45.150
which is they should both get the wavy,
right?

156
00:09:45.150 --> 00:09:46.530
That's not what I want.

157
00:09:46.530 --> 00:09:52.391
And so could I go out of my way and
wrap them both in divs?

158
00:09:52.391 --> 00:09:54.454
I absolutely could.

159
00:09:54.454 --> 00:09:59.054
But Tailwind doesn't want me
have to do like squirrely stuff

160
00:09:59.054 --> 00:10:00.776
just to make CSS work.

161
00:10:00.776 --> 00:10:04.918
That's the whole value prop is I shouldn't
have to wrap stuff in divs just to

162
00:10:04.918 --> 00:10:05.769
make CSS work.

163
00:10:05.769 --> 00:10:10.180
I should get to just define some
amount of scoping so check it out.

164
00:10:10.180 --> 00:10:17.069
We can do peer and we can go,
name it anything, second, right?

165
00:10:17.069 --> 00:10:19.083
And I think at this point,
I think it goes here.

166
00:10:19.083 --> 00:10:21.108
I'm doing this from memory.

167
00:10:21.108 --> 00:10:29.680
You can basically namespace it.

168
00:10:29.680 --> 00:10:32.468
Nope, I might have to
look up the exact syntax,

169
00:10:32.468 --> 00:10:34.573
but the idea remains the same here.

170
00:10:34.573 --> 00:10:37.390
I'm like, we can look it up.

171
00:10:37.390 --> 00:10:41.985
The other fun thing,
if you only learn one thing about

172
00:10:41.985 --> 00:10:46.592
the tailwinddocs,
it is Cmd+K and then you search.

173
00:10:46.592 --> 00:10:47.470
So let's check it out.

174
00:10:47.470 --> 00:10:50.713
So we've got the peers there and

175
00:10:50.713 --> 00:10:56.280
I think peer invalid is peer-checked/name.

176
00:10:56.280 --> 00:10:58.926
Okay, so yeah, that should in this case,

177
00:10:58.926 --> 00:11:03.940
you can kind of see it, I think I got to
name both of them in that case, right?

178
00:11:03.940 --> 00:11:06.390
But if you can give it that slash,
you can namespace them.

179
00:11:06.390 --> 00:11:10.598
And there's a bunch of places where I
actually do this in the app with container

180
00:11:10.598 --> 00:11:15.125
queries, which we'll talk about at some
point, where I actually use this trick for

181
00:11:15.125 --> 00:11:16.815
various other things as well.

182
00:11:16.815 --> 00:11:18.735
And this is also really powerful for

183
00:11:18.735 --> 00:11:22.280
the group one which we will
talk about in about 30 seconds.

184
00:11:22.280 --> 00:11:24.500
But yeah, so you can namespace them.

