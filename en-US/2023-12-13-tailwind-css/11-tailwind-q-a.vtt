WEBVTT

1
00:00:00.240 --> 00:00:07.238
You seem to not need SAS with tailwind but
I like that SAS as features like each for

2
00:00:07.238 --> 00:00:12.567
make sense maps if else in color
functions does tailwind have

3
00:00:12.567 --> 00:00:18.510
similar features they accomplish
this in a different way.

4
00:00:18.510 --> 00:00:22.373
Or do I still need to use SAS
with Tailwind to get them?

5
00:00:22.373 --> 00:00:23.890
&gt;&gt; It all depends, right?

6
00:00:23.890 --> 00:00:28.229
And so Tailwind effectively
has roughly what CSS has,

7
00:00:28.229 --> 00:00:31.540
which is a closing gap at a certain point.

8
00:00:31.540 --> 00:00:35.870
So in terms of a certain amount of color
filters, yeah, you have those, right?

9
00:00:35.870 --> 00:00:42.540
Each, no, because to my knowledge,
not in the CSX spec these days.

10
00:00:42.540 --> 00:00:47.304
So, you don't have each, but
then it all depends, too,

11
00:00:47.304 --> 00:00:50.680
if you've got components as well.

12
00:00:50.680 --> 00:00:56.490
But the thing is, so
yes-ish, no-ish, right?

13
00:00:56.490 --> 00:00:59.050
And then the nuance there is.

14
00:00:59.050 --> 00:01:02.442
Post CSS does have all those things,
right, and

15
00:01:02.442 --> 00:01:05.503
since you are using post
CSS under the hood,

16
00:01:05.503 --> 00:01:11.314
if there are particular things that you
want, I'll show you the posts yes plug in.

17
00:01:11.314 --> 00:01:15.110
The like range of like both.

18
00:01:15.110 --> 00:01:20.966
You can do the nested syntax,
both the SAS version, as well as the like,

19
00:01:20.966 --> 00:01:25.382
spec of nested CSS selectors
that is currently being,

20
00:01:25.382 --> 00:01:29.414
going through the process,
you can pull in a whole

21
00:01:29.414 --> 00:01:34.414
bunch of either future syntax,
and even fictitious syntax.

22
00:01:34.414 --> 00:01:40.590
I think a certain amount of like,
each is and stuff along those lines.

23
00:01:40.590 --> 00:01:43.990
And so
these are the set of post CSS plugins.

24
00:01:43.990 --> 00:01:49.680
So because you are using post CSS under
the hood in most cases and using tailwind.

25
00:01:49.680 --> 00:01:55.217
If there is a particular feature that
you're like, I need that feature,

26
00:01:55.217 --> 00:01:59.771
the chances of that existing
somewhere in this long, long,

27
00:01:59.771 --> 00:02:04.890
long list of post CSS plugins is
probably fairly high at this point.

28
00:02:04.890 --> 00:02:06.910
So like I think it depends.

29
00:02:06.910 --> 00:02:11.145
Out of the box, it's not gonna do
everything that a custom language that's

30
00:02:11.145 --> 00:02:14.780
not CSS is gonna do, but
then you can also extend CSS.

31
00:02:14.780 --> 00:02:18.586
And if you are using any
kind of JavaScript setup,

32
00:02:18.586 --> 00:02:22.380
then you might also be able
to do it there as well.

33
00:02:22.380 --> 00:02:24.810
Yes-ish is the answer to that question.

34
00:02:24.810 --> 00:02:26.109
Maybe it depends.

35
00:02:27.560 --> 00:02:29.413
In that case as well.

36
00:02:29.413 --> 00:02:34.000
&gt;&gt; In tailwind,
we don't use features like the cascade.

37
00:02:34.000 --> 00:02:36.704
Do you think that's a good trade off?

38
00:02:36.704 --> 00:02:39.515
&gt;&gt; Can you repeat the question?

39
00:02:39.515 --> 00:02:44.716
&gt;&gt; Like CSS features like the cascade?

40
00:02:44.716 --> 00:02:47.530
&gt;&gt; Directly you can use the cascade,
right?

41
00:02:47.530 --> 00:02:53.380
If I put a text color, like up on this
top one, it will cascade down, right?

42
00:02:53.380 --> 00:02:54.590
It's like under the hood.

43
00:02:54.590 --> 00:02:57.860
I tell when it's just
applying CSS classes, right.

44
00:02:57.860 --> 00:03:03.977
So you will get if I said text read.

45
00:03:05.723 --> 00:03:07.890
300 here, why do I keep picking 300?

46
00:03:07.890 --> 00:03:10.368
That's a ridiculous color to pick.

47
00:03:10.368 --> 00:03:12.860
Let's go with 500, right?

48
00:03:12.860 --> 00:03:14.950
You will see I put that
on this top level div.

49
00:03:14.950 --> 00:03:19.125
Now the h1 has a purple, so set overrides
it, but the paragraph did turn red.

50
00:03:19.125 --> 00:03:20.595
Like CSS still applies.

51
00:03:20.595 --> 00:03:24.762
This is basically a utility knife for
making C, writing that CSS easier with

52
00:03:24.762 --> 00:03:29.141
a bunch of classes that kind of like are,
you can snap together to what you need.

53
00:03:29.141 --> 00:03:33.389
But it is effectively CSS at
the end of the day that's where we

54
00:03:33.389 --> 00:03:36.818
can like hover over and
see the actual selector.

55
00:03:36.818 --> 00:03:42.387
Yes, there are some like CSS variables
in there so on and so forth but

56
00:03:42.387 --> 00:03:47.578
like at the end of the day it is,
it's all CSS so it all applies.

57
00:03:47.578 --> 00:03:51.745
&gt;&gt; Could you review when to use the
utility layer versus the component layer?

58
00:03:51.745 --> 00:03:54.480
&gt;&gt; Yeah, so component layers are for
those reusable pieces.

59
00:03:54.480 --> 00:03:57.649
Like if I wanted a button class and
I had maybe the button primary,

60
00:03:57.649 --> 00:04:00.200
button dangerous,
utilities are like, I want to.

61
00:04:00.200 --> 00:04:02.916
Add a little bit more margin to this one,
or

62
00:04:02.916 --> 00:04:07.987
I want to be able to do something a kind
of a one-off that you maybe don't wanna.

63
00:04:07.987 --> 00:04:12.911
You think about the idea of a card or a
button, things components that the useful

64
00:04:12.911 --> 00:04:17.395
tool is things that you would put in
your component library, the nouns,

65
00:04:17.395 --> 00:04:18.890
if you will, right?

66
00:04:18.890 --> 00:04:23.163
But then if you had one of those buttons,
I need to make this one a little

67
00:04:23.163 --> 00:04:27.872
bit bigger, some set of things where I
need to make it both, a little wider and

68
00:04:27.872 --> 00:04:32.380
a little larger or something like that,
those would go in the utilities.

69
00:04:32.380 --> 00:04:35.984
Those are the things you would use
one-off that are not what it means to be

70
00:04:35.984 --> 00:04:37.090
a button, right?

71
00:04:37.090 --> 00:04:40.430
And again,
it's mostly around those layers in CSS.

72
00:04:40.430 --> 00:04:43.686
So like the one-offs come
later in the layer stack,

73
00:04:43.686 --> 00:04:47.980
which means they have higher
priority over the components, right?

74
00:04:47.980 --> 00:04:50.124
And they can have the same specificity.

75
00:04:50.124 --> 00:04:52.860
All right, but yeah,
I'll just be reading random classes.

76
00:04:52.860 --> 00:04:56.400
If you ever find yourself like trying to
come up with a more specific selector just

77
00:04:56.400 --> 00:04:57.760
to get what you want done.

78
00:04:57.760 --> 00:05:01.030
You don't have to do that because
you've got the layers, anything and

79
00:05:01.030 --> 00:05:04.249
utilities comes after the components
layer, which means it will have

80
00:05:04.249 --> 00:05:07.550
precedence over anything,
even if it has the same specificity.

81
00:05:07.550 --> 00:05:09.260
So it's mostly like base styles.

82
00:05:09.260 --> 00:05:13.492
that's the lowest layer, right, your
components might be stuff that builds on

83
00:05:13.492 --> 00:05:16.180
top of a div, on top of a button,
so on and so forth.

84
00:05:16.180 --> 00:05:20.156
Those should have preference over those
base styles, and they would have anyway

85
00:05:20.156 --> 00:05:24.080
because classes have a higher specificity
than just a button or whatever.

86
00:05:24.080 --> 00:05:27.250
And then those one off things like,
I need to make this wider, or

87
00:05:27.250 --> 00:05:28.892
I need to make this, in some way,

88
00:05:28.892 --> 00:05:32.470
should have higher specificity
over what it means to be a button.

89
00:05:32.470 --> 00:05:35.226
So base will always be at
the bottom of the of the list, or

90
00:05:35.226 --> 00:05:38.570
your utility will be at the top of
the list, I'll always override,

91
00:05:38.570 --> 00:05:41.224
they're the one-offs,
you're pulling them out.

92
00:05:41.224 --> 00:05:45.058
And that way you're not using stuff
like important and you're not

93
00:05:45.058 --> 00:05:49.522
trying to come up with ridiculous
selectors that happen to be more specific.

94
00:05:49.522 --> 00:05:53.431
And adding like two classes that you
chain together and stuff like that,

95
00:05:53.431 --> 00:05:57.147
you will be more intention about what
the of your selection are rather

96
00:05:57.147 --> 00:05:59.860
than trying to trick CSS
into doing what you want.

