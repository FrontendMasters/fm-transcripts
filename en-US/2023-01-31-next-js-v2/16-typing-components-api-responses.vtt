WEBVTT

1
00:00:00.360 --> 00:00:04.255
I know you've been avoiding typing
your function parameters for

2
00:00:04.255 --> 00:00:08.991
most of the examples so far, but how hard
would it be, or how hard is it in general

3
00:00:08.991 --> 00:00:12.769
to define types for
everything in a next TypeScript code base?

4
00:00:12.769 --> 00:00:15.872
&gt;&gt; It's not hard at all,
I can walk through some examples of that,

5
00:00:15.872 --> 00:00:17.663
there's really only two examples.

6
00:00:17.663 --> 00:00:20.438
There's one for components and
one for the APIs, so

7
00:00:20.438 --> 00:00:24.304
API is easy cuz you don't have to make
them they're the same every time.

8
00:00:24.304 --> 00:00:28.290
For a component it will look something
like we find it a good component.

9
00:00:28.290 --> 00:00:33.775
So I'll give you a good example
would be a good example here.

10
00:00:33.775 --> 00:00:38.015
I don't know let's say you
made a button I guess.

11
00:00:38.015 --> 00:00:43.976
All right, so,
If you had a Button component here,

12
00:00:43.976 --> 00:00:46.762
which probably would be,
I don't know why I did that,

13
00:00:46.762 --> 00:00:50.277
which probably would be a client
component because it's a button and

14
00:00:50.277 --> 00:00:53.807
it's like clicking and stuff like that or
maybe not, I don't know.

15
00:00:53.807 --> 00:00:56.546
You'll have to be the judge of that.

16
00:00:56.546 --> 00:00:59.797
So if you had a button here, you wanted
to like make some props typically the way

17
00:00:59.797 --> 00:01:01.435
that I do it is I'll make an interface.

18
00:01:01.435 --> 00:01:06.023
So, interface button, and then you can put

19
00:01:06.023 --> 00:01:11.479
whatever props you want,
whether it's one click,

20
00:01:11.479 --> 00:01:15.943
or not, on click something variance and,

21
00:01:15.943 --> 00:01:20.299
it's a string, or something like that.

22
00:01:20.299 --> 00:01:24.375
Whatever you want to put here and then
I'll use in this case something called FC

23
00:01:24.375 --> 00:01:26.552
which stands for functional component.

24
00:01:26.552 --> 00:01:31.434
I'll bring that in that takes
a generic which will be my interface

25
00:01:31.434 --> 00:01:35.840
called Button like that and
now it's type checks.

26
00:01:35.840 --> 00:01:41.470
Now if I try to do structure here, you can
see I have variants and it's ready to go.

27
00:01:41.470 --> 00:01:45.852
This is just freaking out because
I'm not returning anything.

28
00:01:45.852 --> 00:01:47.640
Yeah, that's pretty much how I do it for

29
00:01:47.640 --> 00:01:49.585
the most cases is just
make your interface,

30
00:01:49.585 --> 00:01:53.022
if there is a functional component,
use functional component pass that in.

31
00:01:53.022 --> 00:01:55.427
And there you go, and then when you
bring this into another component,

32
00:01:55.427 --> 00:01:59.000
if you hover over it in JSX, it'll tell
you the props that you're missing.

33
00:01:59.000 --> 00:02:02.249
So that's one way to do it other people,
what they'll do is,

34
00:02:02.249 --> 00:02:05.960
they won't do that instead
they'll just do it here.

35
00:02:05.960 --> 00:02:10.440
They'll be like, Button, they'll do it
that way, I think that gives you the same

36
00:02:10.440 --> 00:02:15.280
results but you're not telling React about
it, I don't know what trade offs are.

37
00:02:15.280 --> 00:02:16.704
But I always do the other way.

38
00:02:16.704 --> 00:02:21.529
Because I think the functional component
gives you access to all the other stuff

39
00:02:21.529 --> 00:02:25.934
that React gives you like children
props and things like that, I think.

40
00:02:25.934 --> 00:02:29.761
So that's how I do it and then for
the API stuff it's basically free.

41
00:02:29.761 --> 00:02:33.942
I mean you look at the example that's
generated here it's always going to

42
00:02:33.942 --> 00:02:38.597
be next API requests and this one's always
gonna be next response and then you're

43
00:02:38.597 --> 00:02:42.654
able to put a type here for the type
of response you're gonna send back.

44
00:02:42.654 --> 00:02:47.749
But it's really not that necessary
because there's nothing consuming

45
00:02:47.749 --> 00:02:53.274
this function that is going to have access
to the return value of the response.

46
00:02:53.274 --> 00:02:55.235
Because like you're crossing
the network barrier so

47
00:02:55.235 --> 00:02:58.122
it's not like there's a component over
here that knows what this looks like.

48
00:02:58.122 --> 00:03:02.845
So there are libraries out there that
are surfacing that allow you to have

49
00:03:02.845 --> 00:03:05.246
type safety between your back end and

50
00:03:05.246 --> 00:03:09.522
your front end without a build
step in between but this ain't it.

51
00:03:09.522 --> 00:03:12.539
So it kind of doesn't really matter here,
this is only for

52
00:03:12.539 --> 00:03:16.434
like composition I'm wrapping this
function in a higher order function.

53
00:03:16.434 --> 00:03:19.470
So I need to know the return value is and
things like that,

54
00:03:19.470 --> 00:03:21.957
unless about some
component consuming this.

55
00:03:21.957 --> 00:03:24.676
&gt;&gt; Signaling back to that
one button component so

56
00:03:24.676 --> 00:03:29.485
that's not inside of the app directory,
would you still need to put the use client

57
00:03:29.485 --> 00:03:33.336
at the very top to make this one
specifically a client component?

58
00:03:33.336 --> 00:03:34.975
&gt;&gt; Yeah, it doesn't matter where it is.

59
00:03:34.975 --> 00:03:36.050
&gt;&gt; Okay.

60
00:03:36.050 --> 00:03:38.541
&gt;&gt; It's eventually going to get
important that app directory and

61
00:03:38.541 --> 00:03:41.039
you want it to be a client component,
you got to put use client.

62
00:03:41.039 --> 00:03:43.829
Yeah, but right now,
it's not ever gonna be used

63
00:03:43.829 --> 00:03:47.092
by the app anywhere because I
never imported it anywhere.

64
00:03:47.092 --> 00:03:51.582
At the end of the day, if you think about
it, everything has to be imported into

65
00:03:51.582 --> 00:03:54.934
a page at some point in order for
it to show up on the screen.

66
00:03:54.934 --> 00:03:59.143
Because we can't just render a Button
we can't render a component by itself.

67
00:03:59.143 --> 00:04:02.982
Doesn't matter how far that leaf is,
it eventually has to attach to a branch.

68
00:04:02.982 --> 00:04:04.855
And that branch always leads to a page.

69
00:04:04.855 --> 00:04:07.952
So if you wanna put it on the screen,
just like a regular React,

70
00:04:07.952 --> 00:04:11.692
if you have a component and it's not
imported somewhere that's eventually

71
00:04:11.692 --> 00:04:15.683
part of the router, it's never gonna
show up, it's never gonna get imported.

72
00:04:15.683 --> 00:04:19.241
So you can import it into lib and
that lib can import in another lib but

73
00:04:19.241 --> 00:04:22.738
if that final lib isn't imported
in a component somewhere that's

74
00:04:22.738 --> 00:04:26.505
impoted from a page it's never going
to show up so that's how it works.

