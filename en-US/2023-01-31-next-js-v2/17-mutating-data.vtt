WEBVTT

1
00:00:00.000 --> 00:00:04.558
Mutating data, I think I slightly talked
about this when we did the API stuff.

2
00:00:04.558 --> 00:00:08.653
But I just left a little note on this
because I didn't want people going to look

3
00:00:08.653 --> 00:00:10.606
for different ways on how to do this.

4
00:00:10.606 --> 00:00:15.930
Basically, mutating data right now which,
let's just describe mutating data,

5
00:00:15.930 --> 00:00:20.646
this just means I'm changing something
on the database, I'm posting,

6
00:00:20.646 --> 00:00:25.226
I'm deleting, I'm updating,
I'm making a change to the database.

7
00:00:25.226 --> 00:00:28.957
I'm leaving it in a different state
than before my request was made, so

8
00:00:28.957 --> 00:00:30.524
that's a mutation, right?

9
00:00:30.524 --> 00:00:32.892
You're probably only gonna
do that on a client.

10
00:00:32.892 --> 00:00:36.131
And the way you would have to do that is
basically the exact same way you do it

11
00:00:36.131 --> 00:00:37.869
now, there's really no difference.

12
00:00:37.869 --> 00:00:41.272
They're working on a RFC for
mutating data.

13
00:00:41.272 --> 00:00:45.352
If you look at it here,
they have this really crazy example of

14
00:00:45.352 --> 00:00:48.955
how to refresh your data,
and I'll talk about that.

15
00:00:48.955 --> 00:00:52.708
But we're probably not gonna dive into
it cause I think it's so complicated and

16
00:00:52.708 --> 00:00:55.857
they're just gonna have a better
solution anyway, really soon.

17
00:00:55.857 --> 00:01:00.968
But at the end of the day,
when you make a mutation to a database,

18
00:01:00.968 --> 00:01:04.576
either you're gonna need the refresh data.

19
00:01:04.576 --> 00:01:08.756
Let's say you have a list of to dos and
you update one of the to dos,

20
00:01:08.756 --> 00:01:13.171
you're gonna want that list of to
dos in your pace to update, right?

21
00:01:13.171 --> 00:01:17.109
What Next.js is recommending is
that you just refresh the router,

22
00:01:17.109 --> 00:01:20.786
which will trigger the whole
server component relationship.

23
00:01:20.786 --> 00:01:23.809
And depending on your validation strategy,
we either go get the new one or

24
00:01:23.809 --> 00:01:25.586
not, that's what they're suggesting.

25
00:01:25.586 --> 00:01:26.474
So that's one approach.

26
00:01:26.474 --> 00:01:30.840
The other approach is, you're mutating it,
but the current view you're looking at or

27
00:01:30.840 --> 00:01:32.852
any view doesn't really need the data.

28
00:01:32.852 --> 00:01:40.380
For instance, you might be having a form
where someone can sign up or sign in.

29
00:01:40.380 --> 00:01:43.018
There's nothing waiting, there's no UI
there on that page that's waiting for

30
00:01:43.018 --> 00:01:43.690
the result of that.

31
00:01:43.690 --> 00:01:46.732
So you don't have to really do a refresh
because there's nothing waiting,

32
00:01:46.732 --> 00:01:48.644
cuz you're gonna probably
go to the next page.

33
00:01:48.644 --> 00:01:52.235
Was it gonna go get the user anyway, so
you don't have to do a refresh there.

34
00:01:52.235 --> 00:01:55.196
So only if you're on the same page
where there's some UI that's depending

35
00:01:55.196 --> 00:01:56.560
on the changes that you just made.

36
00:01:56.560 --> 00:01:59.723
What your mutation, do you need
to do a refresh using the router,

37
00:01:59.723 --> 00:02:01.459
which is what they recommend here.

38
00:02:01.459 --> 00:02:04.830
I'm only showing you for a quick
second because it is very complicated.

39
00:02:04.830 --> 00:02:08.839
I did not want to explain all this crazy
nonsense and I also, again, think,

40
00:02:08.839 --> 00:02:13.227
based off the information that I've heard
from them and what they see on this page,

41
00:02:13.227 --> 00:02:14.808
this won't be here too long.

42
00:02:14.808 --> 00:02:18.921
They're already working on a better
process, but it's worth mentioning.

43
00:02:18.921 --> 00:02:23.320
I don't want you to not know what that is,
but, yeah, that's happening.

44
00:02:23.320 --> 00:02:26.000
So mostly, for the most part,
use whatever you are using.

45
00:02:26.000 --> 00:02:29.650
If you need to refresh the page, to get
the new data, just do router dot refresh,

46
00:02:29.650 --> 00:02:32.570
which will trigger your server
components to go do what they do.

47
00:02:32.570 --> 00:02:36.988
They go get data, and they will get
the latest data, so, that's it.

48
00:02:36.988 --> 00:02:38.363
&gt;&gt; I'm just curious.

49
00:02:38.363 --> 00:02:42.878
Would it be possible to do
pagination with a server component?

50
00:02:42.878 --> 00:02:47.210
It seems like that might be something else
that we need to handle the client side to

51
00:02:47.210 --> 00:02:49.580
keep track of the various pages you're on.

52
00:02:49.580 --> 00:02:53.973
&gt;&gt; Yeah, so the question was, can you
do pagination with server components?

53
00:02:53.973 --> 00:02:54.855
Yes, you can.

54
00:02:54.855 --> 00:02:58.436
&gt;&gt; So I think the way you
would have to do that is,

55
00:02:58.436 --> 00:03:02.868
cuz you can refresh what page you're on,
server side,

56
00:03:02.868 --> 00:03:07.607
I guess it really depends on
how you do pagination, right?

57
00:03:07.607 --> 00:03:09.352
There's cursor-based.

58
00:03:09.352 --> 00:03:11.485
So cursor-based is like,

59
00:03:11.485 --> 00:03:15.853
I left off here cuz I sorted
in our filter I left off here.

60
00:03:15.853 --> 00:03:19.132
But there's the other one where it's
just like, how's the other one work?

61
00:03:19.132 --> 00:03:20.908
It's like you put a placeholder.

62
00:03:20.908 --> 00:03:24.048
You have, here's where I left off,
I'm making my own index, and

63
00:03:24.048 --> 00:03:25.800
I'm gonna tart off from here.

64
00:03:25.800 --> 00:03:30.867
Because it depends on what you need to
pass on the URL, are you passing some

65
00:03:30.867 --> 00:03:35.870
cursor on your URL, is your pagination
state living up here somewhere?

66
00:03:35.870 --> 00:03:37.847
Because then that would
make it a dynamic URL.

67
00:03:37.847 --> 00:03:42.825
And then a dynamic URL depending on that,
you will probably have to go to the server

68
00:03:42.825 --> 00:03:45.940
to get that data ahead of time and
things like that.

69
00:03:45.940 --> 00:03:49.360
So I think you can still get
away with doing it server side.

70
00:03:49.360 --> 00:03:52.827
Because you can get the pagination
data using a database query like,

71
00:03:52.827 --> 00:03:54.279
how many things I have left?

72
00:03:54.279 --> 00:03:58.239
And then you can leverage
client side specifically for

73
00:03:58.239 --> 00:04:01.692
just the interaction of
going to the next page.

74
00:04:01.692 --> 00:04:07.443
So I still think you can totally do it,
but it will be challenging, but possible.

75
00:04:07.443 --> 00:04:10.331
I'm trying to think of this website.

76
00:04:10.331 --> 00:04:13.664
I was working with his website
where I take scenarios where

77
00:04:13.664 --> 00:04:17.962
it looks like you can't do it with just
server, and do it with just server.

78
00:04:17.962 --> 00:04:21.266
Cuz I do think for the most part,
you can get away with a lot of stuff with

79
00:04:21.266 --> 00:04:24.245
just server as long as it's not
specific DOM animation stuff.

80
00:04:24.245 --> 00:04:28.119
But when it comes to data fetching, I'm
gonna say most of the time, 90% of time,

81
00:04:28.119 --> 00:04:29.170
that's all you need.

82
00:04:29.170 --> 00:04:31.410
Yeah, I think you could do
that on the server side.

83
00:04:31.410 --> 00:04:32.917
You just gotta go a little creative.

84
00:04:32.917 --> 00:04:36.652
You might actually at the store you're
like, what page you're on in a cookie or

85
00:04:36.652 --> 00:04:37.728
something like that.

86
00:04:37.728 --> 00:04:40.613
So then you can see it every
single service I call like,

87
00:04:40.613 --> 00:04:42.191
what page am I on in this cookie?

88
00:04:42.191 --> 00:04:43.725
And that way you're just
keeping track of that page.

89
00:04:43.725 --> 00:04:47.439
So there's definitely ways around it,
but it's not easy.

