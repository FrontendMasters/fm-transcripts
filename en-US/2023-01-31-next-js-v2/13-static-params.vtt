WEBVTT

1
00:00:00.000 --> 00:00:03.372
So let's talk about static params.

2
00:00:03.372 --> 00:00:08.690
So, earlier in the course we talked about,
if we go back to our app

3
00:00:08.690 --> 00:00:14.807
folder in this repo, we have this
dynamic segment here where it's a slug.

4
00:00:14.807 --> 00:00:17.494
And I said, we could figure out
how to get access to that so

5
00:00:17.494 --> 00:00:18.757
we can do some stuff with it.

6
00:00:18.757 --> 00:00:19.907
Well, that's what we're gonna learn about.

7
00:00:19.907 --> 00:00:22.423
We're gonna learn about how
to get access to the slug so

8
00:00:22.423 --> 00:00:25.486
we can actually do something
meaningful with it, like hit a CMS and

9
00:00:25.486 --> 00:00:27.307
get a blog post or something like that.

10
00:00:27.307 --> 00:00:31.821
And the way we wanna do that is
something called generate static params.

11
00:00:31.821 --> 00:00:36.745
So all we have to do in this case for
getting like a blog post is

12
00:00:36.745 --> 00:00:41.679
we just have to export another
function inside of our page.

13
00:00:41.679 --> 00:00:47.650
Called generate static params that
basically just returns an array of

14
00:00:47.650 --> 00:00:54.026
parameters of all the possible parameters
that this page is going to have so

15
00:00:54.026 --> 00:00:58.394
it's you couldn't do this for
like a static page.

16
00:00:58.394 --> 00:01:01.916
Or, I'm sorry, you couldn't do this for
a dynamic route page for like users,

17
00:01:01.916 --> 00:01:05.493
because then you would would query your
database and get all millions of users and

18
00:01:05.493 --> 00:01:07.086
iterate over them and return this.

19
00:01:07.086 --> 00:01:08.300
So it's not for that.

20
00:01:08.300 --> 00:01:11.880
It's meant for like, static dynamic pages.

21
00:01:11.880 --> 00:01:15.679
Like there's probably a finite set
of blog entries that you have.

22
00:01:15.679 --> 00:01:17.805
So you can do that.

23
00:01:17.805 --> 00:01:18.644
And that makes sense.

24
00:01:18.644 --> 00:01:21.552
But this this wouldn't make sense for
like, you know, slash user ID Or

25
00:01:21.552 --> 00:01:23.937
something like that, that would,
that would be insane.

26
00:01:23.937 --> 00:01:27.689
So this is like, you know this,
these are for blog posts for static pages.

27
00:01:27.689 --> 00:01:30.777
And that's why it's called
generate static params,

28
00:01:30.777 --> 00:01:34.342
not dynamic params because these
params are actually static.

29
00:01:34.342 --> 00:01:36.961
So in this example,
we're just getting a question.

30
00:01:36.961 --> 00:01:38.742
&gt;&gt; Just a quick question like,

31
00:01:38.742 --> 00:01:43.500
would you have like a rule of thumb number
tough on like is a hundred too many?

32
00:01:43.500 --> 00:01:46.663
Is a thousand too many?

33
00:01:46.663 --> 00:01:47.568
&gt;&gt; That's a good question.

34
00:01:47.568 --> 00:01:48.975
I wouldn't say,
I wouldn't have like a rule of thumb.

35
00:01:48.975 --> 00:01:52.949
It would be more about where
it's coming from, right?

36
00:01:52.949 --> 00:01:54.313
Are you getting this from your database?

37
00:01:54.313 --> 00:01:56.496
Is it index that query indexed?

38
00:01:56.496 --> 00:01:59.304
Is this some third party
API that's charging you?

39
00:01:59.304 --> 00:02:03.119
Where is it located compared to where
this is located and how slow is it?

40
00:02:03.119 --> 00:02:07.173
So I would probably optimize for speed,
cuz like maybe it's a CNS, that's all the,

41
00:02:07.173 --> 00:02:10.792
I don't know, halfway around the world and
just getting one thing is slow.

42
00:02:10.792 --> 00:02:12.998
So I was like, all right,
I'm not even gonna do that.

43
00:02:12.998 --> 00:02:17.544
We're just gonna get that some other time,
cuz that's just too slow.

44
00:02:17.544 --> 00:02:19.814
So yeah, it's mostly that,
because like, I don't know,

45
00:02:19.814 --> 00:02:22.010
you might be getting this all
from memory or a file system.

46
00:02:22.010 --> 00:02:24.086
And Maybe it's fast reading a JSON file so

47
00:02:24.086 --> 00:02:28.134
it's like who cares if it's 20,000
things it's a JSON file it's quick.

48
00:02:28.134 --> 00:02:30.738
So that's what I will optimize for.

49
00:02:30.738 --> 00:02:34.905
&gt;&gt; Thank you.
&gt;&gt; Yep, okay, so let's let's do just that

50
00:02:34.905 --> 00:02:41.748
I'm just going to copy this function and
we're going to go to our slug page.

51
00:02:41.748 --> 00:02:45.497
So if we want to use the dynamic
slug from, you know,

52
00:02:45.497 --> 00:02:50.275
getting those those slugs ahead
of time and the server component,

53
00:02:50.275 --> 00:02:55.157
we have to add it to basically
the index page of the dynamic segment.

54
00:02:55.157 --> 00:02:56.925
In this case it's slug.

55
00:02:56.925 --> 00:02:58.409
It'll be the slug on this page.

56
00:02:58.409 --> 00:02:59.850
So I'll go here.

57
00:02:59.850 --> 00:03:03.418
And I can say exports.

58
00:03:03.418 --> 00:03:06.044
What does it get?

59
00:03:06.044 --> 00:03:06.944
Get static params.

60
00:03:06.944 --> 00:03:13.803
So I can say exports default function.

61
00:03:13.803 --> 00:03:17.798
I can type get static params like that.

62
00:03:17.798 --> 00:03:23.804
Return an array of slugs code and

63
00:03:23.804 --> 00:03:32.485
then Angular versus
React Angular like that.

64
00:03:35.905 --> 00:03:37.947
So we got to get static params.

65
00:03:37.947 --> 00:03:43.268
And then now and here, I should be able
to, see the params and things like that.

66
00:03:43.268 --> 00:03:48.219
So I'll say params console

67
00:03:48.219 --> 00:03:52.354
log params like that.

68
00:03:52.354 --> 00:03:55.431
I also think I will have
access to params in here too.

69
00:03:55.431 --> 00:03:57.326
So let's just see.

70
00:03:57.326 --> 00:03:58.404
So we'll do that.

71
00:03:58.404 --> 00:03:59.781
We'll go look at the output here.

72
00:03:59.781 --> 00:04:02.707
And you can see params
gets logged right here.

73
00:04:02.707 --> 00:04:04.826
So the slug is the one that I went to,
right?

74
00:04:04.826 --> 00:04:09.793
So it's only going to log the actual slug
that matches the params that I typed in,

75
00:04:09.793 --> 00:04:10.315
right.

76
00:04:10.315 --> 00:04:11.922
So learn to code here.

77
00:04:11.922 --> 00:04:17.590
If I typed in Angular
versus React we'll see that

78
00:04:17.590 --> 00:04:24.234
it logs out one Angular versus React so
that one matches.

79
00:04:24.234 --> 00:04:28.758
So what you can do with that is
inside of this page where you

80
00:04:28.758 --> 00:04:31.982
have params you can say give me the slug.

81
00:04:31.982 --> 00:04:33.029
Right.

82
00:04:33.029 --> 00:04:34.940
And slug is params.

83
00:04:34.940 --> 00:04:41.090
And then up here, you can say,

84
00:04:41.090 --> 00:04:48.678
const getData equals some async function.

85
00:04:48.678 --> 00:04:54.302
And you might say,
post equals await getData,

86
00:04:54.302 --> 00:04:58.940
data from CMS and it takes in a slug, and

87
00:04:58.940 --> 00:05:03.016
this takes in a slug for your CMS and

88
00:05:03.016 --> 00:05:09.357
then you can return to post and
you would just do this.

89
00:05:13.198 --> 00:05:17.123
All right, so now this page,
well wait I gotta make this async.

90
00:05:17.123 --> 00:05:20.975
And obviously, this isn't going to run,
I don't have that function.

91
00:05:20.975 --> 00:05:27.323
So now, this JSX will have to wait until I
get the post that I can render down here.

92
00:05:27.323 --> 00:05:30.298
But first I had to get the slug
first through the dynamic path.

93
00:05:30.298 --> 00:05:35.263
So this is how you can dynamically render

94
00:05:35.263 --> 00:05:40.673
content based off the params that it's in.

95
00:05:40.673 --> 00:05:45.051
Which is very equivalent,
if you've looked at Next.js v12,

96
00:05:45.051 --> 00:05:50.144
where you're doing in order to do this and
Next.js v12, you would have to

97
00:05:50.144 --> 00:05:55.100
use get static param and get server
side props inside the same component.

98
00:05:55.100 --> 00:05:58.567
It's actually kind of similar,
yet you have to return,

99
00:05:58.567 --> 00:06:02.261
you have to return something like this,
it is very similar.

100
00:06:02.261 --> 00:06:04.683
But you can't do what I just did here,

101
00:06:04.683 --> 00:06:08.106
where we just do an async
await inside the component.

102
00:06:11.700 --> 00:06:17.311
That's really the big change
between v12 and v13 is that v12,

103
00:06:17.311 --> 00:06:22.147
I can do this stuff inside
the component on server side, and

104
00:06:22.147 --> 00:06:27.081
it's only gonna be server
side with this v13, but v12,

105
00:06:27.081 --> 00:06:32.979
I have to do something like export font,
you know, exports a function,

106
00:06:32.979 --> 00:06:38.236
get server side props, and
this is where I can do my async stuff.

107
00:06:38.236 --> 00:06:40.770
And now it's like well,
this also runs on the client, but

108
00:06:40.770 --> 00:06:44.257
this only runs on the server and this file
runs both on the server and the client.

109
00:06:44.257 --> 00:06:45.327
And how is that working?

110
00:06:45.327 --> 00:06:46.902
Well, you don't think about that anymore.

111
00:06:46.902 --> 00:06:48.042
This is always going to be server.

112
00:06:58.604 --> 00:06:59.454
Yes.

113
00:06:59.454 --> 00:07:03.627
&gt;&gt; Can you talk about the relationship
between the two pages again?

114
00:07:03.627 --> 00:07:04.549
&gt;&gt; Absolutely.

115
00:07:04.549 --> 00:07:08.966
So, this is the index page for
the dynamic slug.

116
00:07:08.966 --> 00:07:14.818
So, we have to tell Next.js.

117
00:07:14.818 --> 00:07:18.187
Next.js is basically saying,
we're basically saying, "Hey,

118
00:07:18.187 --> 00:07:20.135
we have a dynamic page here at slug, but

119
00:07:20.135 --> 00:07:24.288
we don't know the parameters ahead of
time." So Next.js is like, okay, cool.

120
00:07:24.288 --> 00:07:26.760
If you want me to pre-runner them,
tell me what the routes are.

121
00:07:26.760 --> 00:07:31.527
That way I can use this page as somewhat
of a template for each one of them,

122
00:07:31.527 --> 00:07:34.664
and I'll render them out for
you ahead of time.

123
00:07:34.664 --> 00:07:38.332
But you're going to give me the routes so
I can pass them to each time,

124
00:07:38.332 --> 00:07:42.781
every time I loop through one of those,
I can pass them the, the slug that you're.

125
00:07:42.781 --> 00:07:44.701
Ahead of timer and pre-printed them.

126
00:07:44.701 --> 00:07:47.273
So we're like, okay, cool,
we'll give you the routes ahead of time.

127
00:07:47.273 --> 00:07:48.590
And that's what we're doing here.

128
00:07:48.590 --> 00:07:51.498
We're saying here are all
the routes ahead of time for

129
00:07:51.498 --> 00:07:53.962
all the dynamic slugs
that we expect to have.

130
00:07:53.962 --> 00:07:57.226
So you might make an API call
in here to your CMS that says,

131
00:07:57.226 --> 00:08:01.929
give me all the slugs of all the blog
posts, and that's what you'll return here.

132
00:08:01.929 --> 00:08:03.304
It was like,
give me all the slugs to the blog post.

133
00:08:03.304 --> 00:08:06.528
So now you know what pages
need to be generated.

134
00:08:06.528 --> 00:08:11.136
When NJS sees this, it's gonna generate
all those pages ahead of time, and

135
00:08:11.136 --> 00:08:14.952
then when it gets here,
it knows which one of those slugs to pass

136
00:08:14.952 --> 00:08:19.353
in because that's the one that the router,
the URL matched to, right?

137
00:08:19.353 --> 00:08:20.143
So, that's why you have to do that.

138
00:08:20.143 --> 00:08:21.025
You can't do that.

139
00:08:21.025 --> 00:08:22.033
I tried to do that here earlier.

140
00:08:22.033 --> 00:08:26.049
If you can't do that here because it's
already too late because it didn't know to

141
00:08:26.049 --> 00:08:29.483
even render that because we didn't
tell it here, it didn't know it,

142
00:08:29.483 --> 00:08:31.073
we couldn't even get here yet.

143
00:08:31.073 --> 00:08:34.360
It didn't know this,
this never even got triggered,

144
00:08:34.360 --> 00:08:37.584
because it didn't know that
that was a possibility.

145
00:08:37.584 --> 00:08:40.221
We have to we're telling it
what's possible basically here.

146
00:08:40.221 --> 00:08:42.036
&gt;&gt; You could do other things
in this page as well.

147
00:08:42.036 --> 00:08:43.295
&gt;&gt; You could.
Yeah, I can.

148
00:08:43.295 --> 00:08:47.687
Yeah, I could totally put a component
here and do whatever I want.

149
00:08:47.687 --> 00:08:50.612
I just, I just don't mean that this
would be like the all blog page.

150
00:08:50.612 --> 00:08:53.026
This will be where all the blogs are,
right?

151
00:08:53.026 --> 00:08:54.057
That's what this page will be.

152
00:08:54.057 --> 00:08:58.867
So yeah, I would have another component
in here and probably another get data

153
00:08:58.867 --> 00:09:03.903
function that gets all the blog posts and
it renders them inside that component.

154
00:09:03.903 --> 00:09:05.375
So yeah.

155
00:09:05.375 --> 00:09:06.197
&gt;&gt; Does this get static
prams limit in any way?

156
00:09:06.197 --> 00:09:10.791
I'm playing around locally and seeing
that I can type in just foo bar into

157
00:09:10.791 --> 00:09:14.781
my slug list even without,
like here's a list of blog posts and

158
00:09:14.781 --> 00:09:17.514
I seem to end up with
the route all the same.

159
00:09:17.514 --> 00:09:21.760
So you're typing in foo bar here or?

160
00:09:21.760 --> 00:09:23.320
&gt;&gt; No like in my browser.

161
00:09:23.320 --> 00:09:27.874
So like, I don't have it defined there,
but I go and try it there.

162
00:09:27.874 --> 00:09:28.678
&gt;&gt; Like that.

163
00:09:28.678 --> 00:09:29.557
&gt;&gt; Yeah, yeah.

164
00:09:29.557 --> 00:09:34.448
&gt;&gt; So I think what's happening here is
what's basically happening is we're

165
00:09:34.448 --> 00:09:39.415
telling first of all right we're telling,
this is giving a hint to Next.js

166
00:09:39.415 --> 00:09:43.237
that like these are the ones we
want to build ahead of time.

167
00:09:43.237 --> 00:09:44.609
&gt;&gt; Yeah, this is like what to cache.

168
00:09:44.609 --> 00:09:46.833
&gt;&gt; Right this is what to cache and
to expect and and

169
00:09:46.833 --> 00:09:50.783
then we're saying the ones that's not
there are just always going to be dynamic.

170
00:09:50.783 --> 00:09:53.632
Just render those we don't care right.

171
00:09:53.632 --> 00:09:57.280
But it needed a hint at first like, even
like are you are you expecting a slug?

172
00:09:57.280 --> 00:09:58.327
Like what are you doing here because.

173
00:09:58.327 --> 00:10:01.898
If you look at it, it put that underneath
slug, even though we didn't but

174
00:10:01.898 --> 00:10:04.966
that's because we told it this
thing is called a slug, right?

175
00:10:04.966 --> 00:10:07.833
And we told it's called a slug here so
it knows.

176
00:10:07.833 --> 00:10:11.709
So that's basically all it's saying
is it's like hey, we need to know,

177
00:10:11.709 --> 00:10:14.596
you can even get rid of all these and
it will still work.

178
00:10:14.596 --> 00:10:18.399
Right like this should
still work just fine.

179
00:10:18.399 --> 00:10:19.236
Right.

180
00:10:19.236 --> 00:10:21.158
It just needs to know that like,

181
00:10:21.158 --> 00:10:24.585
which one of these do you want
to pre render ahead of time?

182
00:10:24.585 --> 00:10:27.734
If not, you need to return an empty array
because if you don't return an array at

183
00:10:27.734 --> 00:10:29.765
all, I think that's where
it starts to freak out.

184
00:10:29.765 --> 00:10:31.235
Right?
If you don't return anything here,

185
00:10:31.235 --> 00:10:32.157
I think, I don't know.

186
00:10:32.157 --> 00:10:34.258
I think it's fine here to exist.

187
00:10:34.258 --> 00:10:38.062
I guess it just knows that if you don't
want to return an array that's also fine.

188
00:10:38.062 --> 00:10:39.206
So yeah.

189
00:10:39.206 --> 00:10:41.670
&gt;&gt; Regarding the server components,

190
00:10:41.670 --> 00:10:47.428
are the async React components a React 18
feature or are they a Next 13 feature?

191
00:10:47.428 --> 00:10:52.624
&gt;&gt; The async components are server
components and it's a React 18 feature

192
00:10:52.624 --> 00:10:57.332
that isn't fully released yet
but Next.js has already adopted.

193
00:10:57.332 --> 00:11:00.339
React going forward?

194
00:11:00.339 --> 00:11:01.874
Will use server components.

195
00:11:01.874 --> 00:11:03.449
They will use client components.

196
00:11:03.449 --> 00:11:04.984
That has nothing to do with Next.js.

197
00:11:04.984 --> 00:11:06.559
That's just a future React.

198
00:11:06.559 --> 00:11:10.559
Next.js is just like,
let's get ahead of it and make it easy.

199
00:11:10.559 --> 00:11:12.646
&gt;&gt; And that's what they're doing?

200
00:11:12.646 --> 00:11:13.717
&gt;&gt; Yes.

201
00:11:13.717 --> 00:11:16.781
&gt;&gt; And
regarding the get static params method.

202
00:11:16.781 --> 00:11:22.196
Is that the equivalent of using get static
paths and get static props in Next 12?

203
00:11:22.196 --> 00:11:26.551
&gt;&gt; That is the equivalent of get static
paths and get static props in 12, yes.

