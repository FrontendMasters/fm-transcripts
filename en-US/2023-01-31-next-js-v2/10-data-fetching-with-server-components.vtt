WEBVTT

1
00:00:00.000 --> 00:00:01.687
Now we're gonna talk about data fetching.

2
00:00:01.687 --> 00:00:06.455
So this is probably I think where
Next.js 13 shines other than server

3
00:00:06.455 --> 00:00:09.168
client components is definitely this.

4
00:00:09.168 --> 00:00:13.893
This sweet sauce is where I'm like, okay,
I don't know if I was filling in at first,

5
00:00:13.893 --> 00:00:16.798
but after using this,
I was like, I can't go back.

6
00:00:16.798 --> 00:00:20.808
This is actually the best way to
develop application in my opinion.

7
00:00:20.808 --> 00:00:23.086
It was just when it comes to this.

8
00:00:23.086 --> 00:00:27.911
So let's talk about these pages,
layouts they might need data before

9
00:00:27.911 --> 00:00:32.999
they render like, for instance,
look at this example, home page here.

10
00:00:32.999 --> 00:00:35.720
All this is static content right now, but

11
00:00:35.720 --> 00:00:38.922
what if all this content came from a CMS,
right?

12
00:00:38.922 --> 00:00:41.842
Everybody uses headless CMSs now,
that's an API call.

13
00:00:41.842 --> 00:00:43.903
How does that work?

14
00:00:43.903 --> 00:00:50.286
How would you get this content here on
this page and have it be SEO friendly?

15
00:00:50.286 --> 00:00:52.964
Don't give me, well, Google crawls
JavaScript, don't give me that.

16
00:00:52.964 --> 00:00:57.083
How would you make it SEO friendly if
I was to post this on Twitter, right?

17
00:00:57.083 --> 00:00:58.959
Twitter doesn't crawl JavaScript, so

18
00:00:58.959 --> 00:01:01.395
you would have to render
this on the server, right?

19
00:01:01.395 --> 00:01:04.966
So you have to do server side rendering
next year support server side rendering,

20
00:01:04.966 --> 00:01:06.395
so cool you solve that problem.

21
00:01:06.395 --> 00:01:11.461
But then the serialized data
got shipped to the client.

22
00:01:11.461 --> 00:01:15.654
And that's just bloating your
client-sized JavaScript bundle,

23
00:01:15.654 --> 00:01:18.384
which slows you down, it's just not good.

24
00:01:18.384 --> 00:01:21.065
And then you need Astro, and
then you need all this other stuff.

25
00:01:21.065 --> 00:01:26.046
So one way is like, well,
what if we only fetched it on the server?

26
00:01:26.046 --> 00:01:30.580
Because this stuff is just like read only,
and maybe something else is dynamic over

27
00:01:30.580 --> 00:01:33.579
here and
it's like how do you isolate that, right?

28
00:01:33.579 --> 00:01:38.581
This is where server components come
in as like I can isolate different

29
00:01:38.581 --> 00:01:43.941
parts of the app that have special
needs depending on their data fetching.

30
00:01:43.941 --> 00:01:47.904
So basically,
inside of a server component,

31
00:01:47.904 --> 00:01:51.976
you can fetch data with so
many different ways.

32
00:01:51.976 --> 00:01:55.765
You can use something that looks like
window.fetch, and we'll talk about it.

33
00:01:55.765 --> 00:02:00.145
So if you ever use window.fetch next,
well, I think Reactor actually did this,

34
00:02:00.145 --> 00:02:02.938
reacts did something with fetch,
made it global and

35
00:02:02.938 --> 00:02:05.050
allow you to customize it in such a way.

36
00:02:05.050 --> 00:02:08.767
And it has like superpowers and
I'll talk about the superpowers, but

37
00:02:08.767 --> 00:02:12.737
you can also interact with the databases
direct you gotta ORM that you use.

38
00:02:12.737 --> 00:02:14.430
You like using Prisma,
something like that.

39
00:02:14.430 --> 00:02:16.541
You can just use that
directly in your component.

40
00:02:16.541 --> 00:02:20.205
You don't have to make an API call
that they didn't talk to Prisma.

41
00:02:20.205 --> 00:02:24.330
Invalidates the user with authentication
nope, you can just talk to the database

42
00:02:24.330 --> 00:02:27.456
right in the component right next
to the JSX like right there.

43
00:02:27.456 --> 00:02:30.042
Which I think is insane
if you think about it and

44
00:02:30.042 --> 00:02:34.099
the same thing with like third party SDKs,
maybe you're using Stripe.

45
00:02:34.099 --> 00:02:37.272
Maybe you're using some other SDK,
you wanna interact with it.

46
00:02:37.272 --> 00:02:38.832
You can do that right in the component.

47
00:02:38.832 --> 00:02:43.350
You don't have to go through an API and
do that stuff.

48
00:02:43.350 --> 00:02:44.867
You can do it right in the component.

49
00:02:44.867 --> 00:02:48.475
So you could do that with server
components, which I think is, like,

50
00:02:48.475 --> 00:02:49.525
super really cool.

51
00:02:49.525 --> 00:02:54.031
And obviously the benefits of that is that
you don't have that network layer which

52
00:02:54.031 --> 00:02:56.458
has latency and
overhead and all the stuff.

53
00:02:56.458 --> 00:03:00.159
You keep your app more secure by not
exposing potential API keys to the client,

54
00:03:00.159 --> 00:03:01.462
which is always a problem.

55
00:03:01.462 --> 00:03:04.970
And you have to rely on the API provider
to come up with a private key, or

56
00:03:04.970 --> 00:03:08.255
a public key, type of situation,
which is always kind of weird.

57
00:03:08.255 --> 00:03:11.129
Especially if, you're being
charged per request for CMS and

58
00:03:11.129 --> 00:03:14.388
someone gets hold of your API key
on the front end, and they're just,

59
00:03:14.388 --> 00:03:17.557
spamming your site and now,
you're paying your CMS a lot of money.

60
00:03:17.557 --> 00:03:20.805
If for some reason because you
didn't build your site, right,

61
00:03:20.805 --> 00:03:22.076
it's happened before.

62
00:03:22.076 --> 00:03:26.498
Reducing the load on the main thread in
a browser because there's less JavaScript.

63
00:03:26.498 --> 00:03:30.618
There's no communication
between a client and a network.

64
00:03:30.618 --> 00:03:34.776
And that network, like getting data, so
that T stat connections not even open.

65
00:03:34.776 --> 00:03:37.544
It's just it's not even there,
he's never crossed a network threshold.

66
00:03:37.544 --> 00:03:41.044
By time the browser saw the constant,
it already happened on the server.

67
00:03:41.044 --> 00:03:42.856
So it's reduced overhead.

68
00:03:42.856 --> 00:03:45.544
So now the main thread can focus
on things like animation and

69
00:03:45.544 --> 00:03:47.868
putting things on the page and
just a lot smoother.

70
00:03:47.868 --> 00:03:50.348
So yeah, and then many more reasons.

71
00:03:50.348 --> 00:03:53.678
There's tons of reasons, but
those are like some of the big ones, but

72
00:03:53.678 --> 00:03:54.929
let's talk about fetch.

73
00:03:54.929 --> 00:03:59.672
So fetch, React extends the fetch
function to provide automatic

74
00:03:59.672 --> 00:04:01.836
requests de-duplication.

75
00:04:01.836 --> 00:04:05.663
This is on a per request basis, so
let's talk about this for a second.

76
00:04:05.663 --> 00:04:08.614
So I'm gonna go into this page here and

77
00:04:08.614 --> 00:04:13.134
we can take some of this data out and
like put it somewhere or

78
00:04:13.134 --> 00:04:18.412
we'll just hit an API,
we'll make it easier and we'll hit an API.

79
00:04:18.412 --> 00:04:20.962
So API that I always
like to hit is Reddit.

80
00:04:20.962 --> 00:04:25.037
So if we go to reddit.com/.JSON, right?

81
00:04:25.037 --> 00:04:28.605
If you go there, you get Reddit as JSON.

82
00:04:28.605 --> 00:04:29.996
I don't know if anybody knew that, but

83
00:04:29.996 --> 00:04:31.817
you can just do that without API keys,
petty cool.

84
00:04:31.817 --> 00:04:37.184
So I'm gonna grab the zero, and
I want to access that data in this home

85
00:04:37.184 --> 00:04:42.757
component because maybe I wanna put
this stuff on my home page, right?

86
00:04:42.757 --> 00:04:47.694
So before server components,
I would have to make a route in our APIs,

87
00:04:47.694 --> 00:04:50.552
which we'll talk about, eventually.

88
00:04:50.552 --> 00:04:55.328
And then that route will make a call to
Reddit, and then it'll return the data.

89
00:04:55.328 --> 00:04:58.694
And then I'll get the data back from
API and I can put it on the page,

90
00:04:58.694 --> 00:04:59.909
that's one approach.

91
00:04:59.909 --> 00:05:03.387
The second approach is I would just call
Reddit from the client after it boots up

92
00:05:03.387 --> 00:05:04.504
and use, like, a hook.

93
00:05:04.504 --> 00:05:07.230
And then, when it in the user effects,
I'll put it in there and

94
00:05:07.230 --> 00:05:10.830
then it'll get Reddit, and then I'll load
it in and I'll set the loading state and

95
00:05:10.830 --> 00:05:11.927
do all this weird stuff.

96
00:05:11.927 --> 00:05:16.690
Those are the two ways you can do it, both
of which are costly as far as the runtime.

97
00:05:16.690 --> 00:05:19.261
But the server component,
I can just do it directly in here.

98
00:05:19.261 --> 00:05:21.916
So what I'll do is I'll go
to the server component.

99
00:05:21.916 --> 00:05:26.466
And the convention that I see people
starting to do is they'll make a function

100
00:05:26.466 --> 00:05:29.406
called like get data in
their server component and

101
00:05:29.406 --> 00:05:32.498
then get data is just gonna
be like some async thing.

102
00:05:32.498 --> 00:05:36.695
And then in our case,
I'm just gonna say data equals await and

103
00:05:36.695 --> 00:05:40.419
I can just call fetch like this,
I can pass it this URL.

104
00:05:40.419 --> 00:05:44.052
And it works very much like window.fetch.

105
00:05:44.052 --> 00:05:48.304
In fact, it is exactly like widow.fetch,
just enhanced, so we can fetch.

106
00:05:48.304 --> 00:05:50.774
And we can do things like
configuring the cache, but

107
00:05:50.774 --> 00:05:52.922
we'll talk about that
stuff in a little bit.

108
00:05:52.922 --> 00:05:58.089
So we got the data, and
I'm just gonna return data.JSON, right?

109
00:05:58.089 --> 00:06:02.545
So now we got the data and then check it,

110
00:06:02.545 --> 00:06:06.880
I can do this or if I can spell it right.

111
00:06:06.880 --> 00:06:11.028
I can make this component async
this is something you cannot do

112
00:06:11.028 --> 00:06:13.038
on a React client component.

113
00:06:13.038 --> 00:06:16.618
In fact, you've never been able
to do this in React ever, right?

114
00:06:16.618 --> 00:06:20.656
This won't work, if I change this to a
client components will break because React

115
00:06:20.656 --> 00:06:24.052
components aren't functions there
are components with life cycles

116
00:06:24.052 --> 00:06:25.940
that run over and over and over again.

117
00:06:25.940 --> 00:06:30.239
This is why you have to have a hook
because if you don't when the component

118
00:06:30.239 --> 00:06:34.552
re-renders any variable that you
are trying to keep track of, resets.

119
00:06:34.552 --> 00:06:38.210
Because the function runs again, so
you need a hook to tell React hey,

120
00:06:38.210 --> 00:06:41.499
don't lose track of this variable for
me across re-renders.

121
00:06:41.499 --> 00:06:44.085
Well, this thing doesn't have re-renders.

122
00:06:44.085 --> 00:06:46.774
It just happens once on the server,
and then it gets cached,

123
00:06:46.774 --> 00:06:48.846
depending on your re-validation strategy.

124
00:06:48.846 --> 00:06:52.402
So I can async this, and
then now I can say, hey, you know what?

125
00:06:52.402 --> 00:06:57.731
Block, don't render any of this JSX yet

126
00:06:57.731 --> 00:07:01.502
until I get the Reddit data.

127
00:07:01.502 --> 00:07:03.282
So I can do that now.

128
00:07:03.282 --> 00:07:06.814
So this will block the rendering
of the page until this comes back.

129
00:07:06.814 --> 00:07:09.109
And then I can get the date and
I can do whatever I want here.

130
00:07:09.109 --> 00:07:09.809
Let's look at the data though.

131
00:07:09.809 --> 00:07:11.297
So I can actually do something with it.

132
00:07:11.297 --> 00:07:15.208
So we got data.data.children.data.

133
00:07:15.208 --> 00:07:16.548
So let's get like one of the first ones.

134
00:07:16.548 --> 00:07:20.184
So we'll say a post is

135
00:07:20.184 --> 00:07:27.052
data.data.children[0].data.

136
00:07:27.052 --> 00:07:29.682
And then there is a title on here.

137
00:07:32.344 --> 00:07:33.988
There's gotta be a title
on here somewhere.

138
00:07:36.208 --> 00:07:38.713
Name, nope, there it is.

139
00:07:38.713 --> 00:07:41.314
Title, I knew it, okay, cool.

140
00:07:41.314 --> 00:07:45.027
So we got the post and then I can just go
ahead and just say, let's put that here.

141
00:07:48.582 --> 00:07:50.157
Post, here we go.

142
00:07:50.157 --> 00:07:53.494
If it all works, we should see
a title here, if it all works.

143
00:07:53.494 --> 00:07:56.406
So let's see what happens.

144
00:07:56.406 --> 00:07:57.433
Let's go back here.

145
00:07:57.433 --> 00:07:59.679
It's already there,
I didn't even refresh, sorry there.

146
00:07:59.679 --> 00:08:02.304
So because it happened on the server,
right?

147
00:08:02.304 --> 00:08:05.654
This didn't happen on the client's side.

148
00:08:05.654 --> 00:08:09.844
This page doesn't even
show up until it renders.

149
00:08:09.844 --> 00:08:14.001
In fact, if you look just
a little zoom in if I do this?

150
00:08:14.001 --> 00:08:15.768
Let me see, yeah.

151
00:08:15.768 --> 00:08:18.269
If you just look right here,
when I refresh it,

152
00:08:18.269 --> 00:08:20.907
it actually does take a little longer,
see that?

153
00:08:20.907 --> 00:08:23.301
That was it fetching the Reddit data,
right?

154
00:08:23.301 --> 00:08:25.125
If I didn't have that,
it wouldn't take that long,

155
00:08:25.125 --> 00:08:26.720
it would have happened immediately, right?

156
00:08:26.720 --> 00:08:30.476
And I can really exaggerate this by
like putting a set timeout here for

157
00:08:30.476 --> 00:08:34.518
ten seconds just so like we can actually
see it, but the guy get the point.

158
00:08:34.518 --> 00:08:39.519
It's not going to render anything here
until it gets the data, which to me makes

159
00:08:39.519 --> 00:08:44.236
way more sense than the way we do it now,
a client opponents was like hooks.

160
00:08:44.236 --> 00:08:47.332
And trying to figure out the order of
which things are rendering is like,

161
00:08:47.332 --> 00:08:50.498
why can't I just wait till I get some
data back before I render this stuff?

162
00:08:50.498 --> 00:08:53.881
Versus doing, like, a if statement and,
like, if the data is not there,

163
00:08:53.881 --> 00:08:55.788
then do this and this use effect, right?

164
00:08:55.788 --> 00:08:57.678
To me, mentally, it makes more sense.

165
00:08:57.678 --> 00:09:00.774
It works the way you think
any function would ever work.

166
00:09:00.774 --> 00:09:05.804
It won't move forward unless this is done,
just like any function ever works.

167
00:09:05.804 --> 00:09:09.705
So that's because it's server side and
it's opting out of the React

168
00:09:09.705 --> 00:09:12.339
reconciliation phases and
things like that.

169
00:09:12.339 --> 00:09:14.640
Whereas client side is business as usual.

170
00:09:14.640 --> 00:09:16.982
It's not gonna work this
way on the client side.

171
00:09:16.982 --> 00:09:20.427
And this is why it's very important to
know if you're in a client component or

172
00:09:20.427 --> 00:09:21.920
not, right as soon as I add this.

173
00:09:26.636 --> 00:09:30.316
You can forget about it right or
done, it's not gonna work.

174
00:09:30.316 --> 00:09:35.052
I mean, I don't even know what error
is gonna throw at this point, yeah,

175
00:09:35.052 --> 00:09:35.866
right here.

176
00:09:35.866 --> 00:09:40.235
Promise you can't put a promise right
there, render a collection of children,

177
00:09:40.235 --> 00:09:44.412
you can't do that because we're in
the client side and you can't do that, so

178
00:09:44.412 --> 00:09:45.711
big difference there.

179
00:09:45.711 --> 00:09:48.806
And you're not limited in
scope of what you do here.

180
00:09:48.806 --> 00:09:52.356
So we talked about fetch and
how it works and

181
00:09:52.356 --> 00:09:55.616
I talked about being able to extend it.

182
00:09:55.616 --> 00:09:59.858
The caching, we'll talk about that
a little deeper because that.

183
00:09:59.858 --> 00:10:03.410
That's just course by itself is
like caching with fetch, but

184
00:10:03.410 --> 00:10:06.085
you're not limited to
just only doing fetch.

185
00:10:06.085 --> 00:10:10.739
You can do whatever you want inside of a
sync opponents, so for instance if you're

186
00:10:10.739 --> 00:10:14.390
getting something without fetch
like a database call or an SDK.

187
00:10:14.390 --> 00:10:19.231
You could put that in there was nothing
stopping you if you had stripe,

188
00:10:19.231 --> 00:10:22.280
you can use stripe in
here if you had Prisma.

189
00:10:22.280 --> 00:10:24.988
And you were doing some Prisma stuff in
here you could do that in here, there's

190
00:10:24.988 --> 00:10:27.797
literally nothing stopping anything you
do on the server side you can do in here.

191
00:10:27.797 --> 00:10:32.241
Because it has access to the server,
so it's very powerful.

192
00:10:32.241 --> 00:10:36.097
It's just that React index has
hijacked the fetch method and

193
00:10:36.097 --> 00:10:41.085
expanded it to have like control around
caching, because they use the caching

194
00:10:41.085 --> 00:10:45.262
to determine whether or
not they should re-render a component.

195
00:10:45.262 --> 00:10:48.964
If something is being revalidated,
that's going to trigger a render.

196
00:10:48.964 --> 00:10:52.227
And it gives you the tools to be able
to play around with that caching, but

197
00:10:52.227 --> 00:10:54.973
it's really advanced,
it's really only for production.

198
00:10:54.973 --> 00:10:56.008
For the most part,

199
00:10:56.008 --> 00:10:59.960
you should just opt into the default
caching mechanism that React does,

200
00:10:59.960 --> 00:11:04.780
which is pretty good in most cases, which
means don't do anything, it'll just work.

