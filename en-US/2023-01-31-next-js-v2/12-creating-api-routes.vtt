WEBVTT

1
00:00:00.000 --> 00:00:02.974
Let's walk through how a Next.js
can make APIs and how simple it is.

2
00:00:02.974 --> 00:00:05.028
So if you're following along with me,

3
00:00:05.028 --> 00:00:09.341
you know that we have this hello.ts
that was generated from create-next-app.

4
00:00:09.341 --> 00:00:11.851
Let's look at this,
let's see what's going on here and

5
00:00:11.851 --> 00:00:13.642
we can see how we can create our own APIs.

6
00:00:13.642 --> 00:00:16.821
So if we look at this,
it's actually quite simple.

7
00:00:16.821 --> 00:00:21.330
All you have to do is export a function,
that function takes in a request and

8
00:00:21.330 --> 00:00:23.425
it has a response.

9
00:00:23.425 --> 00:00:25.702
And then because it's server side,
you can do whatever you want.

10
00:00:25.702 --> 00:00:26.856
You can access the file system.

11
00:00:26.856 --> 00:00:30.269
You can do literally whatever you want on
the server and just send a response back.

12
00:00:30.269 --> 00:00:32.666
Just like if you wrote an Express app,
just like any app, I mean, Python,

13
00:00:32.666 --> 00:00:34.052
it doesn't matter, they all do the same.

14
00:00:34.052 --> 00:00:37.072
They take a request, they use a response,
and they send it back.

15
00:00:37.072 --> 00:00:39.744
This is the same thing,
it's just broken down so

16
00:00:39.744 --> 00:00:42.592
simple that it's just a function, right?

17
00:00:42.592 --> 00:00:47.604
So if you want to make some API routes,
it actually follows the same

18
00:00:47.604 --> 00:00:52.185
convention as the naming conventions for
the app side here.

19
00:00:52.185 --> 00:00:57.786
So for instance, if I wanna make
an API route for, let's say,

20
00:00:57.786 --> 00:01:02.543
/api/user/me, so
I would go into the API folder,

21
00:01:02.543 --> 00:01:09.098
I'll make a new folder called user,
and then I'll make a file called me,

22
00:01:09.098 --> 00:01:14.834
and that's gonna create a route for
/api/user/me, right?

23
00:01:14.834 --> 00:01:21.316
And then inside of here, I can do whatever
I want as long as I export this function.

24
00:01:24.753 --> 00:01:27.200
And it has a request and
it takes a response and

25
00:01:27.200 --> 00:01:29.079
I just gotta send something back.

26
00:01:29.079 --> 00:01:30.691
There's nothing to stop me from
doing whatever I want here.

27
00:01:30.691 --> 00:01:35.195
So I'm just gonna say, res.json {data},

28
00:01:35.195 --> 00:01:38.549
this is me, hello, I could that.

29
00:01:40.865 --> 00:01:46.139
This thing's freaking out cuz it doesn't
know the types, but we're good, right?

30
00:01:46.139 --> 00:01:49.846
So now I can go to the browser,
I go to /api,

31
00:01:49.846 --> 00:01:53.771
/user, /me, and let's see what happens.

32
00:01:53.771 --> 00:02:00.478
So let me grab that /api/user/me,

33
00:02:00.478 --> 00:02:06.615
and there it is, It's me,

34
00:02:06.615 --> 00:02:10.299
and that's how quick it was to
make an API route, fairly simple.

35
00:02:12.300 --> 00:02:16.588
That's it, you don't have to worry about
setting up all the ceremony you do with

36
00:02:16.588 --> 00:02:19.881
any other server, you just make
a function and you export it.

37
00:02:19.881 --> 00:02:21.940
And when you deploy this,
this is gonna be a Serverless function.

38
00:02:23.140 --> 00:02:26.110
So some things you might be thinking
of is, but what about my middleware?

39
00:02:26.110 --> 00:02:27.550
Where do I do that?

40
00:02:27.550 --> 00:02:30.920
Well, there's so
many ways to get around that.

41
00:02:30.920 --> 00:02:34.224
In fact, there's Express plugins that
will make this look like Express, and

42
00:02:34.224 --> 00:02:38.200
you can still use the Express middleware
if you want, if you wanna go all the way.

43
00:02:38.200 --> 00:02:42.377
But most of the time that I've seen is
like you just make a file somewhere that

44
00:02:42.377 --> 00:02:45.860
takes a request or response and
it manipulates it that way.

45
00:02:45.860 --> 00:02:49.700
Or they'll make a higher order function
that wraps this and it'll do it that way.

46
00:02:49.700 --> 00:02:50.953
There's a lot of ways around it.

47
00:02:50.953 --> 00:02:54.636
For instance, you might make
something with authentication,

48
00:02:54.636 --> 00:02:56.555
you might say withAuth, right?

49
00:02:56.555 --> 00:03:03.499
And withAuth is a function that returns
a function that takes a request and

50
00:03:03.499 --> 00:03:10.113
a response and then it just checks
the Auth somewhere in here, right?

51
00:03:10.113 --> 00:03:12.488
So you might do something like,
actually it'll be like this.

52
00:03:16.620 --> 00:03:19.629
It'll be like this.

53
00:03:19.629 --> 00:03:22.510
So you have this, but then inside here
is where you'll check your Auth, right?

54
00:03:22.510 --> 00:03:25.684
So you'll check your Auth in here.

55
00:03:25.684 --> 00:03:30.792
And then if the Auth is bad or whatever,
then you'll come in here and like,

56
00:03:30.792 --> 00:03:36.315
the Auth is bad, so we're gonna do a 401
or something like that and just reject it.

57
00:03:36.315 --> 00:03:37.868
And then all you have to do is just,

58
00:03:37.868 --> 00:03:40.828
when you export this,
you can wrap this with a withAuth, right?

59
00:03:40.828 --> 00:03:44.135
You can say withAuth, and
then you would just wrap it like that,

60
00:03:44.135 --> 00:03:45.307
something like that.

61
00:03:45.307 --> 00:03:47.490
And that's a higher order
function that I see people make.

62
00:03:47.490 --> 00:03:49.255
So that's one way.

63
00:03:49.255 --> 00:03:52.238
I don't like higher order functions,
because I think they're sloppy.

64
00:03:52.238 --> 00:03:55.460
I would just rather just make a function
that just looks at the request of

65
00:03:55.460 --> 00:03:57.530
the response and do it that way.

66
00:03:57.530 --> 00:03:58.987
You can also use middleware,

67
00:03:58.987 --> 00:04:02.774
which we probably won't cover too much
in here cuz it's kinda advanced, but

68
00:04:02.774 --> 00:04:06.055
middleware can intercept any route
in Next.js, not just a page.

69
00:04:06.055 --> 00:04:09.867
It can intercept API route,
it can intercept a public file, static, or

70
00:04:09.867 --> 00:04:13.495
anything, anything that's ever
requested for your Next.js app,

71
00:04:13.495 --> 00:04:16.201
it can intercept, and
you can check things there.

72
00:04:16.201 --> 00:04:20.823
The thing about middleware, though,
is that it runs on the Edge Runtime.

73
00:04:20.823 --> 00:04:26.808
So if you visualize the runtimes, you have
the client, right, that's the browser.

74
00:04:26.808 --> 00:04:28.703
And then over here,
you have the server, right?

75
00:04:28.703 --> 00:04:31.038
And then over here, there's a database.

76
00:04:31.038 --> 00:04:35.168
The Edge Runtime is right in front
of the server in between the client,

77
00:04:35.168 --> 00:04:37.411
it's the CDN that's closest to you.

78
00:04:37.411 --> 00:04:39.568
That's the Edge Runtime,
that's why it's called the edge.

79
00:04:39.568 --> 00:04:44.457
It's literally on the edge of the network,
which is the closest CDN to you, so

80
00:04:44.457 --> 00:04:48.161
you only have access to certain
things on that runtime, and

81
00:04:48.161 --> 00:04:51.663
there's limitations of the type
of code you can write.

82
00:04:51.663 --> 00:04:53.605
So in order to do that
with authentication,

83
00:04:53.605 --> 00:04:56.439
you would need something like
cookie-based authentication,

84
00:04:56.439 --> 00:04:58.968
cuz you can actually check
a cookie in that edge runtime.

85
00:04:58.968 --> 00:05:02.433
But you won't be able to check local
storage cuz you're not on the browser, or

86
00:05:02.433 --> 00:05:05.967
else you got to think about how your
authentication works and things like that.

87
00:05:05.967 --> 00:05:10.529
And you also can't use most node
modules on that at runtime,

88
00:05:10.529 --> 00:05:14.922
because there's limitations
on how Edge Runtime works.

89
00:05:14.922 --> 00:05:19.887
Because they can only be so big in a file
size that they can't use the standard

90
00:05:19.887 --> 00:05:22.773
Node.js runtime that we've come to love.

91
00:05:22.773 --> 00:05:26.173
They use a modified version that
can only use static code and

92
00:05:26.173 --> 00:05:30.465
that dynamic code is kinda weird, but
there's tons of articles about it.

93
00:05:30.465 --> 00:05:31.338
So it's a little weird,

94
00:05:31.338 --> 00:05:33.758
that's why I didn't wanna talk
about middleware cuz it gets crazy.

95
00:05:33.758 --> 00:05:35.736
But that's what people will use it for.

96
00:05:35.736 --> 00:05:39.838
&gt;&gt; What would be the best
way to version your API?

97
00:05:39.838 --> 00:05:43.330
&gt;&gt; Best way to version your API,
I don't know if there is a best way.

98
00:05:43.330 --> 00:05:47.249
I mean,
the way you make your API doesn't really

99
00:05:47.249 --> 00:05:51.940
change how people have come
to do things like versioning.

100
00:05:51.940 --> 00:05:56.290
So I mean, you could just do the same
thing you've probably always done,

101
00:05:56.290 --> 00:06:01.147
make a new folder here, v2, bam,
now you got it, so /api/v2/your routes.

102
00:06:01.147 --> 00:06:04.540
You could totally do that,
there's nothing stopping you.

103
00:06:04.540 --> 00:06:07.878
I don't think there's a perfect way or
a wrong way to do it.

104
00:06:07.878 --> 00:06:12.994
Just note that we didn't specify a method,
right?

105
00:06:12.994 --> 00:06:16.127
Cuz if you think about an API route,
it's a route and it's a method,

106
00:06:16.127 --> 00:06:17.382
it's a verb combination.

107
00:06:17.382 --> 00:06:20.578
We didn't specify any verbs here,
so is this a GET request or

108
00:06:20.578 --> 00:06:22.347
is it a POST request, what is it?

109
00:06:22.347 --> 00:06:23.811
You have to do that yourself, right?

110
00:06:23.811 --> 00:06:26.474
So you have to come in like,

111
00:06:26.474 --> 00:06:32.011
if req.method, equals POST,
then it's a POST request and

112
00:06:32.011 --> 00:06:35.282
you can do your stuff, otherwise,
do whatever you want here.

113
00:06:35.282 --> 00:06:38.889
You have to do that part yourself,
because by default,

114
00:06:38.889 --> 00:06:41.978
it's gonna respond to
any request to this URL.

115
00:06:41.978 --> 00:06:45.722
It doesn't matter if it's a post, put,
delete, option, get, doesn't matter,

116
00:06:45.722 --> 00:06:46.927
it's gonna respond to it.

117
00:06:46.927 --> 00:06:53.688
So do those checks if you don't want those
potential verbs messing your stuff up.

118
00:06:58.546 --> 00:07:04.167
Yeah, APIs are easy, it's a quick
section cuz it just makes sense.

119
00:07:04.167 --> 00:07:04.783
Yes.

120
00:07:04.783 --> 00:07:08.201
&gt;&gt; This might be a bit out of the scope
for this, but I'm just kinda curious.

121
00:07:08.201 --> 00:07:12.676
You mentioned that the API runs
like on a Serverless kinda backend,

122
00:07:12.676 --> 00:07:17.712
how would it handle kind of maybe
WebSockets, like real time connections?

123
00:07:17.712 --> 00:07:21.530
&gt;&gt; Yeah, so let's talk about this.

124
00:07:21.530 --> 00:07:28.449
This personally hurts [LAUGH] because
I adopted Serverless functions when

125
00:07:28.449 --> 00:07:32.971
first announced them,
when I was running a startup.

126
00:07:32.971 --> 00:07:37.439
And we were just way too early and we
needed what's now a service database, so

127
00:07:37.439 --> 00:07:40.004
we needed WebSockets and nothing existed.

128
00:07:40.004 --> 00:07:43.679
So we had to build a lot of it
from scratch, so I learned a lot.

129
00:07:43.679 --> 00:07:46.266
So traditionally, up until just recently,

130
00:07:46.266 --> 00:07:49.193
you couldn't attach something
like a WebSocket or

131
00:07:49.193 --> 00:07:53.820
anything like that to a service
function because it's not long lived.

132
00:07:53.820 --> 00:07:57.322
You would typically have
to do a proxy almost.

133
00:07:57.322 --> 00:08:02.035
You would have to use some third party
provider, like a very popular one that I

134
00:08:02.035 --> 00:08:06.662
think is called Fanout WebSocket,
something like that.

135
00:08:06.662 --> 00:08:07.770
Yeah, something like Fanout.

136
00:08:07.770 --> 00:08:13.426
So something like Fanout or PubNub or
even Firebase, or Pusher, one of those.

137
00:08:13.426 --> 00:08:16.294
You have to use a third
party cuz that's Serverless,

138
00:08:16.294 --> 00:08:20.134
because it's hosted somewhere else and
you only talk to it over an API.

139
00:08:20.134 --> 00:08:23.600
So anything that's basically API driven,
that's what you'd have to use.

140
00:08:23.600 --> 00:08:27.783
That way your client's not connecting
directly to your backend, is connecting to

141
00:08:27.783 --> 00:08:31.625
this thing, and then this thing is
notifying and triggering your backend.

142
00:08:31.625 --> 00:08:33.918
So there's an extra step involved.

143
00:08:33.918 --> 00:08:37.170
And for the most part,
that's still the case.

144
00:08:37.170 --> 00:08:42.035
I have seen recently people trying to get
Socket.IO to work with service functions

145
00:08:42.035 --> 00:08:46.060
and stuff like that, but
I wouldn't wanna scale that.

146
00:08:46.060 --> 00:08:51.031
So yeah, I think traditional things
like that just don't work very well

147
00:08:51.031 --> 00:08:56.163
without compromise or without a dedicated
team who is really serious about

148
00:08:56.163 --> 00:09:01.870
figuring out all the constraints of
a familial environment such as Serverless.

149
00:09:01.870 --> 00:09:04.460
It's very complicated, but
definitely doable, but for the most part,

150
00:09:04.460 --> 00:09:07.040
you're gonna need a proxy,
whether you build it yourself.

151
00:09:07.040 --> 00:09:10.138
So you might have to make an express
server over here that hosts your own

152
00:09:10.138 --> 00:09:13.603
WebSocket instance, and your frontend
connects to that, and then that thing

153
00:09:13.603 --> 00:09:17.034
talks to your Serverless thing, right,
or you just get one of these things.

