WEBVTT

1
00:00:00.043 --> 00:00:04.115
So the next thing we wanna do is go to our
blog, and we wanna get all of our blogs.

2
00:00:04.115 --> 00:00:08.303
So I wanna simulate us getting all of our
blogs from some external data source, so

3
00:00:08.303 --> 00:00:09.299
let's fake that.

4
00:00:09.299 --> 00:00:14.343
So I'm gonna go to the root here,
I'm gonna get a new folder,

5
00:00:14.343 --> 00:00:19.387
and we'll call it,
my favorite folder lib and inside of lib,

6
00:00:19.387 --> 00:00:25.791
I'm gonna make a file called cms.ts, and
this is just gonna get our cms data.

7
00:00:25.791 --> 00:00:28.096
But I gotta make my fake
delete function right click so

8
00:00:28.096 --> 00:00:30.965
we can simulate that network,
otherwise it's gonna be too fast,

9
00:00:30.965 --> 00:00:34.315
you're never going to appreciate all
the loading stuff that we get for free.

10
00:00:34.315 --> 00:00:38.278
I want you to actually appreciate that,
and we don't get that on localhost, so

11
00:00:38.278 --> 00:00:39.353
I want you to feel it.

12
00:00:39.353 --> 00:00:44.123
So we're gonna return a promise.

13
00:00:44.123 --> 00:00:49.666
Promise here and
you know do a set timeout nothing crazy

14
00:00:49.666 --> 00:00:54.862
Why did you import that
where you come from Do that,

15
00:01:01.179 --> 00:01:03.072
I don't know why all this
stuff is coming up like that.

16
00:01:03.072 --> 00:01:08.351
My autocomplete is way too strong,
way too aggressive.

17
00:01:08.351 --> 00:01:10.453
Okay, so we got that.

18
00:01:10.453 --> 00:01:11.866
That works.

19
00:01:11.866 --> 00:01:13.409
It's just freaking out
cuz I'm not using it.

20
00:01:13.409 --> 00:01:19.279
And then now we'll say, gets all posts.

21
00:01:19.279 --> 00:01:21.352
So we write all posts here.

22
00:01:21.352 --> 00:01:25.824
This is gonna be async, and
we're gonna await a delay,

23
00:01:25.824 --> 00:01:30.407
I see our messages is really slow,
takes three seconds.

24
00:01:30.407 --> 00:01:32.172
We are gonna wait three seconds.

25
00:01:32.172 --> 00:01:36.762
And then why are you freaking out?

26
00:01:36.762 --> 00:01:37.462
Okay.

27
00:01:37.462 --> 00:01:39.921
And then we're just gonna
return some fake data here.

28
00:01:39.921 --> 00:01:43.857
So I'm just gonna say new array.

29
00:01:43.857 --> 00:01:46.846
Let's just have like 10 blog posts.

30
00:01:46.846 --> 00:01:48.844
It's gotta fill it with some nothing.

31
00:01:48.844 --> 00:01:51.872
And I can say map, don't want that.

32
00:01:51.872 --> 00:01:52.507
I can use that.

33
00:01:55.738 --> 00:02:01.221
And then I'll just return an object
here that just has like a title.

34
00:02:01.221 --> 00:02:04.876
And a title will be,

35
00:02:04.876 --> 00:02:09.606
this is post that's, and

36
00:02:09.606 --> 00:02:18.207
then like a slug which
will be this is post that.

37
00:02:18.207 --> 00:02:22.087
Let me interprete that, there we go.

38
00:02:22.087 --> 00:02:28.249
And yeah, it'll have a body somewhere,
but we didn't get there yet.

39
00:02:28.249 --> 00:02:30.780
So here we go and just export this.

40
00:02:34.732 --> 00:02:38.044
Now we have our getAllPosts from our CMS,
ready to go.

41
00:02:38.044 --> 00:02:42.465
Okay, now what we gotta
do is bring this in here.

42
00:02:42.465 --> 00:02:46.941
So we'll say, getAllPosts, bam, and

43
00:02:46.941 --> 00:02:50.101
then it exports, default,

44
00:02:50.101 --> 00:02:55.248
function, excuse me, a sync function.

45
00:02:55.248 --> 00:03:00.018
Got to get used to that now, blog and

46
00:03:00.018 --> 00:03:05.109
then we'll say post equals a weight.

47
00:03:05.109 --> 00:03:11.268
Get that is not what I imported,
getAllPosts, there we go.

48
00:03:13.640 --> 00:03:17.025
GetAllPosts, there we go,
we've got got our posts here.

49
00:03:17.025 --> 00:03:18.733
Now we can return some jsx.

50
00:03:20.267 --> 00:03:23.143
And we'll just loop over posts.map.

51
00:03:26.325 --> 00:03:29.743
Got our posts.

52
00:03:29.743 --> 00:03:34.481
Look at each one of these,
we got a little post so

53
00:03:34.481 --> 00:03:37.451
we'll say h1 post.title.

54
00:03:37.451 --> 00:03:40.187
And actually, we probably just wrap
this whole thing in a link tag so

55
00:03:40.187 --> 00:03:41.395
we can click the whole thing.

56
00:03:41.395 --> 00:03:43.648
I hate when you're looking click
on the word of an element,

57
00:03:43.648 --> 00:03:44.601
not the element itself.

58
00:03:44.601 --> 00:03:46.098
It's really annoying.

59
00:03:46.098 --> 00:03:48.325
So do that.

60
00:03:48.325 --> 00:03:52.359
An href post.slug, so

61
00:03:52.359 --> 00:03:57.812
it'd be /blog/post.slug,

62
00:04:00.907 --> 00:04:02.184
Just like that.

63
00:04:02.184 --> 00:04:11.896
And then once I return, I'll just do
an implicit return here There we go.

64
00:04:11.896 --> 00:04:13.946
What do you want?

65
00:04:13.946 --> 00:04:15.238
I don't feel like doing that.

66
00:04:15.238 --> 00:04:18.568
Okay, so we got our blogs.

67
00:04:18.568 --> 00:04:20.453
Those things are ready to go.

68
00:04:20.453 --> 00:04:21.920
And let's try to render this.

69
00:04:21.920 --> 00:04:22.621
Let's see what happens.

70
00:04:22.621 --> 00:04:29.301
So if we save this, and
you go to our blog no, it's waiting.

71
00:04:29.301 --> 00:04:30.397
And then it went.

72
00:04:30.397 --> 00:04:32.943
So you see it waited three seconds, right?

73
00:04:32.943 --> 00:04:35.066
It's so annoying.

74
00:04:35.066 --> 00:04:36.163
I didn't know that was waiting.

75
00:04:36.163 --> 00:04:37.376
There was no indicator, right?

76
00:04:37.376 --> 00:04:41.035
So, how do we fix that?

77
00:04:41.035 --> 00:04:42.342
&gt;&gt; Loading?

78
00:04:42.342 --> 00:04:43.343
&gt;&gt; Exactly.

79
00:04:43.343 --> 00:04:44.407
We add a loading.

80
00:04:44.407 --> 00:04:49.421
So where though?

81
00:04:49.421 --> 00:04:53.864
&gt;&gt; You could probably do
it the blog directory.

82
00:04:53.864 --> 00:04:56.907
&gt;&gt; Yes, that's exactly where I would do
it because that's where this page lives.

83
00:04:56.907 --> 00:05:00.813
It has to be a sibling to the page because
you can only have one page in a directory.

84
00:05:00.813 --> 00:05:02.523
So if you want the loading state,

85
00:05:02.523 --> 00:05:06.566
the loading page it has to be a sibling
to the page that you're waiting to load.

86
00:05:06.566 --> 00:05:10.001
Because we're waiting for the blog
page load the loading has to go here.

87
00:05:10.001 --> 00:05:16.228
So we'll say loading.tsx and

88
00:05:16.228 --> 00:05:22.934
it will say, export, default,

89
00:05:22.934 --> 00:05:28.214
function, BlogLoader.

90
00:05:28.214 --> 00:05:31.518
And it's gonna say loading.

91
00:05:31.518 --> 00:05:33.438
Okay, we're going for that HN vibe.

92
00:05:33.438 --> 00:05:34.807
There we go, it's loading.

93
00:05:34.807 --> 00:05:35.983
Beautiful.

94
00:05:35.983 --> 00:05:37.495
God, I love it.

95
00:05:37.495 --> 00:05:40.498
Let's just yeah, actually,
we'll just keep it like that.

96
00:05:40.498 --> 00:05:44.580
We really want it to look like
we know what we're doing here.

97
00:05:44.580 --> 00:05:45.572
There we go.
Okay, cool.

98
00:05:45.572 --> 00:05:47.126
We got our blog post.

99
00:05:47.126 --> 00:05:49.873
Everything looks good, it's in order.

100
00:05:49.873 --> 00:05:51.401
Now we just need to be able
to click on these posts.

101
00:05:51.401 --> 00:05:54.137
So let's see what happens
if I click on this.

102
00:05:54.137 --> 00:05:55.438
What is that?

103
00:05:55.438 --> 00:05:58.100
The default export is
not a React Component.

104
00:05:58.100 --> 00:05:59.903
That's because we haven't
made a component yet.

105
00:05:59.903 --> 00:06:02.235
So we need to go in here and
give it a component.

106
00:06:02.235 --> 00:06:03.388
So let's do that.

107
00:06:03.388 --> 00:06:08.970
exports default function,

108
00:06:08.970 --> 00:06:14.789
BlogPost, turn a div posts.

109
00:06:14.789 --> 00:06:15.360
There we go.

110
00:06:15.360 --> 00:06:18.341
So we have our BlogPosts,
this is close to zero.

111
00:06:18.341 --> 00:06:21.545
It works but we don't want that,
we wanna leverage that and

112
00:06:21.545 --> 00:06:23.413
make sure we're on the same page.

113
00:06:23.413 --> 00:06:27.605
So we can do a git static pass if we
wanted to get those ahead of time.

114
00:06:27.605 --> 00:06:32.120
Honestly, it's probably fine
because we are returning

115
00:06:32.120 --> 00:06:35.795
back like a finite set
were we doing on our lib.

116
00:06:35.795 --> 00:06:36.788
There we go.

117
00:06:36.788 --> 00:06:38.601
We're returning a finite set here,
so it's fine.

118
00:06:38.601 --> 00:06:43.293
So we don't need to do a get static params
because I already know what I'm getting

119
00:06:43.293 --> 00:06:46.685
here and I'm totally fine with
it be in service rendered.

120
00:06:46.685 --> 00:06:49.980
But in production, you probably would
because you want those to be static.

121
00:06:49.980 --> 00:06:53.715
And then you would just re-validate them,
which I didn't show you how to do because

122
00:06:53.715 --> 00:06:56.730
it's not a production thing, but
you would just revalidate them.

123
00:06:56.730 --> 00:06:59.541
But for now,
we're gonna keep it like that.

124
00:06:59.541 --> 00:07:05.419
Okay, so we got our post, and then we
can just yeah, we'll just say post.

