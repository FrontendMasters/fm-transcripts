WEBVTT

1
00:00:00.334 --> 00:00:01.462
The origins of Next.js.

2
00:00:01.462 --> 00:00:05.268
Next.js is a framework
built on top of Reacts.

3
00:00:05.268 --> 00:00:09.810
You might be asking yourself, why do we
need a framework on top of a framework?

4
00:00:09.810 --> 00:00:11.720
React is already a framework,
what are we doing?

5
00:00:11.720 --> 00:00:15.139
Well, if you've ever used React, you know
that it's not really a complete framework.

6
00:00:15.139 --> 00:00:18.235
I kind of think of it
as like a view library,

7
00:00:18.235 --> 00:00:22.191
where it just gives you some
really cool functions that

8
00:00:22.191 --> 00:00:26.928
are disguised as HTML looking things
called JSX to build out a UI.

9
00:00:26.928 --> 00:00:28.839
But you still have to
install your own router,

10
00:00:28.839 --> 00:00:32.073
you still have to install your own state
management if you don't like hooks and

11
00:00:32.073 --> 00:00:35.176
things like that, there's like Redux and
other state management lives.

12
00:00:35.176 --> 00:00:38.684
So it's not like the full thing, right,
even though react supports server side

13
00:00:38.684 --> 00:00:42.466
rendering, It doesn't give it to you, you
still got to set that up yourself, right?

14
00:00:42.466 --> 00:00:45.132
So it's like,
eventually the community was like,

15
00:00:45.132 --> 00:00:47.504
why do we have to set this
stuff up all the time?

16
00:00:47.504 --> 00:00:51.022
So Next.js K, Next.js is like I was
gonna take all the conventions, and

17
00:00:51.022 --> 00:00:55.082
our own opinions, and we're gonna put them
together in a framework on top of React.

18
00:00:55.082 --> 00:00:58.052
So you don't have to figure out
what router you're gonna use and

19
00:00:58.052 --> 00:01:00.695
keeping up with API and
then like what state management.

20
00:01:00.695 --> 00:01:03.698
And then how to render statically,
or dynamically,

21
00:01:03.698 --> 00:01:06.778
or the server on the client
will just give it all to you.

22
00:01:06.778 --> 00:01:08.878
And then they're like,
well, why stop here?

23
00:01:08.878 --> 00:01:13.308
How about we figure out how to let people
create API routes and things like that?

24
00:01:13.308 --> 00:01:14.458
Let's just go full stack.

25
00:01:14.458 --> 00:01:17.086
So it's a full stack
framework built on top

26
00:01:17.086 --> 00:01:21.397
of React that basically bakes in
a bunch of opinions and conventions.

27
00:01:21.397 --> 00:01:25.212
That the community is formed and their own
opinions that they work with the people at

28
00:01:25.212 --> 00:01:27.718
the Google team,
the React team to kind of figure out,

29
00:01:27.718 --> 00:01:30.793
let's just create a standard way
of making a full stack React app.

30
00:01:30.793 --> 00:01:32.566
That way people don't have
to do it from scratch.

31
00:01:32.566 --> 00:01:36.658
Because I mean, as you know, if you try
to sit down and make a full stack app

32
00:01:36.658 --> 00:01:41.148
right now from scratch, I mean, you won't
even get to the actual product code.

33
00:01:41.148 --> 00:01:45.021
Because you'll be so busy doing
the architecture code for forever,

34
00:01:45.021 --> 00:01:48.910
like setting up a build system,
doing optimizations, doing this.

35
00:01:48.910 --> 00:01:50.731
And then finally, you can like all right,

36
00:01:50.731 --> 00:01:53.167
now I can get to the product
code after you set all this up.

37
00:01:53.167 --> 00:01:56.717
So Next.js is kind of solve that so
you don't have to do it.

38
00:01:56.717 --> 00:01:59.719
So when should you use Next.js?

39
00:01:59.719 --> 00:02:02.720
Pretty much anytime you need
to make an app with React,

40
00:02:02.720 --> 00:02:05.590
I would say it's because
jit ust how flexible it is,

41
00:02:05.590 --> 00:02:08.999
it has different modes you can
render in as we'll talk about.

42
00:02:08.999 --> 00:02:14.418
So it can handle small loads, big loads,
it's a very flexible application.

43
00:02:14.418 --> 00:02:18.554
So I would say for the most part,
I exclusively use Next.js for

44
00:02:18.554 --> 00:02:20.591
almost all my React projects.

45
00:02:20.591 --> 00:02:24.099
I would say the only ones I don't are
obviously if I'm making a library that's

46
00:02:24.099 --> 00:02:26.772
being published on NPM,
you don't use Next.js for that.

47
00:02:26.772 --> 00:02:29.209
It's only meant for apps,
it's not meant for libraries,

48
00:02:29.209 --> 00:02:31.067
you wanna make a component
live in Next.js.

49
00:02:31.067 --> 00:02:34.603
And then maybe just like some one-off
small one-pager thing that I'm doing in

50
00:02:34.603 --> 00:02:37.520
React that I probably could have
did in just Vanilla JavaScript.

51
00:02:37.520 --> 00:02:39.491
So why am I using React
in the first place?

52
00:02:39.491 --> 00:02:41.491
Other than that,
it's probably just Next.js.

53
00:02:41.491 --> 00:02:48.287
I don't know if I'll ever just use
Vanilla React anymore in my opinion.

54
00:02:48.287 --> 00:02:49.057
Any questions on that?

55
00:02:49.057 --> 00:02:52.591
Yes,
&gt;&gt; Possibly off-topic, go as deep as you

56
00:02:52.591 --> 00:02:57.841
want or whatever, but I'm typically, when
I think about React apps, I think of me

57
00:02:57.841 --> 00:03:03.103
there as kind of the hybrid approach where
you have Django or rails or what have you.

58
00:03:03.103 --> 00:03:07.726
Same host shoots over the JavaScript and
then just using you know surf tokens and

59
00:03:07.726 --> 00:03:12.556
then the kind of second version where it's
just static JavaScript on like a CDN that

60
00:03:12.556 --> 00:03:13.663
speaks over JSON.

61
00:03:13.663 --> 00:03:18.000
In both cases, you'd say it's
Next.js still offers a bunch of,

62
00:03:18.000 --> 00:03:21.021
it still offers substantial benefits,
so for

63
00:03:21.021 --> 00:03:25.731
just key old React from the bottom up
&gt;&gt; Yeah, I think so, because Next.js uses,

64
00:03:25.731 --> 00:03:28.566
it leverages a CDN depending
on where you deploy it.

65
00:03:28.566 --> 00:03:31.424
If you deploy it on Versace, or
Net Laly,.or something like that,

66
00:03:31.424 --> 00:03:34.053
it leverages the CDN just the same
way a static React app would.

67
00:03:34.053 --> 00:03:36.316
And those pages can be cash and
things like that, and

68
00:03:36.316 --> 00:03:37.762
you have more control over them.

69
00:03:37.762 --> 00:03:41.460
So, and then you have the edge run time,
which is really cool, so

70
00:03:41.460 --> 00:03:42.751
you get that benefit.

71
00:03:42.751 --> 00:03:46.736
And then obviously, you get the full
stack, so you can have the APIs, but

72
00:03:46.736 --> 00:03:48.549
maybe it adds a little overhead.

73
00:03:48.549 --> 00:03:53.130
For instance, if you already have an API
built out in Python, or Rails, or

74
00:03:53.130 --> 00:03:56.571
something, and
now you gotta make another full stack.

75
00:03:56.571 --> 00:04:00.095
And Next.js and that API is talking to
your already API and Rails or Python,

76
00:04:00.095 --> 00:04:03.123
maybe that extra network layer is
maybe just a little overhead and

77
00:04:03.123 --> 00:04:04.626
people don't wanna manage it.

78
00:04:04.626 --> 00:04:08.808
So I can see that being an issue where
it's like I don't really want to

79
00:04:08.808 --> 00:04:12.281
maintain another server even
though it's serverless.

80
00:04:12.281 --> 00:04:15.312
Well, in that case you just don't even
use the API routes in Next.js and

81
00:04:15.312 --> 00:04:18.211
you can just use the pages and
the components and talk to your own API.

82
00:04:18.211 --> 00:04:23.060
It still works out, so
I would say for the most cases, yes.

83
00:04:23.060 --> 00:04:26.376
Yeah, because what's gonna happen if
you don't, especially on the team,

84
00:04:26.376 --> 00:04:28.273
there's one of two things is gonna happen.

85
00:04:28.273 --> 00:04:31.567
You're gonna have a meeting where some
architectures or some senior folks on

86
00:04:31.567 --> 00:04:34.670
the team like, right, we gotta build
some stuff around React, right?

87
00:04:34.670 --> 00:04:36.971
That's one thing if you're a good company.

88
00:04:36.971 --> 00:04:40.212
If you're not a good company, what's gonna
happen is people are just gonna do it as

89
00:04:40.212 --> 00:04:43.056
they go, and then no one's gonna know
what the hell's going on the app.

90
00:04:43.056 --> 00:04:44.821
They're like, what's going on here?

91
00:04:44.821 --> 00:04:46.755
And they're like, well,
talk to that person.

92
00:04:46.755 --> 00:04:49.666
They don't work anymore,
and it's like, okay.

93
00:04:49.666 --> 00:04:51.956
Don't touch that code is gonna be
like a comment on top of the file.

94
00:04:51.956 --> 00:04:54.691
Don't touch this, because no one
knows what it does, but it works.

95
00:04:54.691 --> 00:04:57.697
So this kind of avoids all that
because you're gonna build your own

96
00:04:57.697 --> 00:04:58.723
framework, anyway.

97
00:04:58.723 --> 00:05:00.516
Yeah, Mark.

98
00:05:00.516 --> 00:05:06.471
&gt;&gt; Could you give your thoughts on remix
and potentially new stuff like Astro?

99
00:05:06.471 --> 00:05:09.645
&gt;&gt; Yeah, so I actually don't have too
much experience with remix other than

100
00:05:09.645 --> 00:05:12.009
just reading their documentation,
unfortunately.

101
00:05:12.009 --> 00:05:14.586
So I don't have any opinions about it,

102
00:05:14.586 --> 00:05:19.425
I just know that they aim to deliver
on some of the same things that Next.js

103
00:05:19.425 --> 00:05:23.270
does as far as like building
out full stack applications.

104
00:05:23.270 --> 00:05:27.461
From what I understand, I think they're
focused more on creating static

105
00:05:27.461 --> 00:05:29.976
applications from the folks that own that.

106
00:05:29.976 --> 00:05:33.492
But then again, I haven't really used it,
so I can't really comment on that, but

107
00:05:33.492 --> 00:05:35.617
it seems promising,
maybe I should check it out.

108
00:05:35.617 --> 00:05:39.302
But I tried to use it when it first came
out, I think it was like invite paid only,

109
00:05:39.302 --> 00:05:40.467
or something like that.

110
00:05:40.467 --> 00:05:44.443
And I was like, I don't wanna do this, but
I think it's open now, so I don't know,

111
00:05:44.443 --> 00:05:45.679
maybe I'll check it out.

112
00:05:45.679 --> 00:05:49.980
Astro is cool, I know a lot about Astro.

113
00:05:49.980 --> 00:05:53.560
So Astro is,
I don't know what you would call it,

114
00:05:53.560 --> 00:05:56.563
I don't even really call it a framework.

115
00:05:56.563 --> 00:06:00.855
It's almost like a second architecture,
it's like free architecture basically.

116
00:06:00.855 --> 00:06:05.411
It's like it's something that sits on
top of your framework to allow you to

117
00:06:05.411 --> 00:06:10.132
create what's called like these dynamic
islands or is that Apple's thing?

118
00:06:10.132 --> 00:06:12.856
I don't know, they call them
islands to an Astro, I believe.

119
00:06:12.856 --> 00:06:13.936
That's also apples.

120
00:06:13.936 --> 00:06:15.131
&gt;&gt; Do you call it Island.

121
00:06:15.131 --> 00:06:18.503
&gt;&gt; Okay, I was like, wait,
did I just get confused with Apples thing?

122
00:06:18.503 --> 00:06:19.921
Yeah, they call them Islands,

123
00:06:19.921 --> 00:06:22.967
which basically it's just an optimization
on how you can render your

124
00:06:22.967 --> 00:06:26.824
components sending less JavaScript to the
frontend, only streaming it when needed.

125
00:06:26.824 --> 00:06:29.454
And it can just wrap all your framework.

126
00:06:29.454 --> 00:06:33.494
So it's not so much that you would
only use Astro over React or

127
00:06:33.494 --> 00:06:36.838
something like that as you
would use it together.

128
00:06:36.838 --> 00:06:41.056
So it's just another
tool to optimize things.

129
00:06:41.056 --> 00:06:42.556
There's always gonna be overlap,

130
00:06:42.556 --> 00:06:45.608
the frameworks themselves have their
own optimization tools built in.

131
00:06:45.608 --> 00:06:48.772
The platforms you deploy to have their
own optimization tools built in, and

132
00:06:48.772 --> 00:06:51.848
you have something Astro that has
their own optimization tools built in.

133
00:06:51.848 --> 00:06:55.282
So you kind of got to figure out
what's going to give you the best,

134
00:06:55.282 --> 00:06:58.976
it really isn't like one solution
that's gonna work for everybody.

135
00:06:58.976 --> 00:07:02.247
It all really depends on where
you deployed, who's on your team?

136
00:07:02.247 --> 00:07:03.079
What framework you're using?

137
00:07:03.079 --> 00:07:03.951
What version is it?

138
00:07:03.951 --> 00:07:04.866
Who has access to it?

139
00:07:04.866 --> 00:07:09.631
So they're all kind of shooting for
the same thing, so

140
00:07:09.631 --> 00:07:12.330
that's my pain on that, yes.

141
00:07:12.330 --> 00:07:16.914
&gt;&gt; Out of curiosity,
would it be possible to kind of isolate or

142
00:07:16.914 --> 00:07:20.135
separate the frontend with the API side?

143
00:07:20.135 --> 00:07:24.899
For example, say you want like the API is
used by many different services outside of

144
00:07:24.899 --> 00:07:26.065
just the frontend.

145
00:07:26.065 --> 00:07:29.221
And you wanna able to scale that,
is that possible with Next.js?

146
00:07:29.221 --> 00:07:32.909
Or would you recommend using
a different API entirely for that case?

147
00:07:32.909 --> 00:07:35.714
&gt;&gt; Right, so the question was can you
just forget about the frontend thing,

148
00:07:35.714 --> 00:07:38.671
just make a backend and scale that out,
so you can use it with something else?

149
00:07:38.671 --> 00:07:42.458
&gt;&gt; Yeah, so you have the frontend
that exists with the Next app and

150
00:07:42.458 --> 00:07:47.102
the backend that you create with the
Next.js application like API routes and

151
00:07:47.102 --> 00:07:48.182
stuff like that.

152
00:07:48.182 --> 00:07:52.253
Say that those get used much more by other
services and the frontend still uses it,

153
00:07:52.253 --> 00:07:55.800
but say you wanna scale that up
independently, is that a possibility?

154
00:07:55.800 --> 00:08:01.802
&gt;&gt; Yeah, so in Next.js, those API handlers
were meant to be serverless handlers.

155
00:08:01.802 --> 00:08:06.126
So technically, serverless scales as
long as you throw money at it, so

156
00:08:06.126 --> 00:08:07.361
it'll go forever.

157
00:08:07.361 --> 00:08:09.050
So I guess,
it really depends on where you deploy it.

158
00:08:09.050 --> 00:08:12.726
If you deploy to Versailles, what
supports still service functions deployed

159
00:08:12.726 --> 00:08:15.243
to nullify which supports
those service functions.

160
00:08:15.243 --> 00:08:18.597
Then yeah, it should theoretically
just go as much as you need.

161
00:08:18.597 --> 00:08:20.157
I haven't seen problems with it.

162
00:08:20.157 --> 00:08:23.087
And it doesn't know or
care that the frontend that

163
00:08:23.087 --> 00:08:27.639
it's bundled with is actually the client
that's asking for the resources.

164
00:08:27.639 --> 00:08:31.267
So anything can hit it, whatever security
policies you have as far as like IP

165
00:08:31.267 --> 00:08:34.790
addresses or whatever, it's totally fine,
it shouldn't be an issue.

166
00:08:34.790 --> 00:08:37.495
So yeah, I don't think you're
gonna have a problem with that.

167
00:08:37.495 --> 00:08:38.118
That's totally fine.

168
00:08:38.118 --> 00:08:42.450
Although, if you want it more granular,
I don't know,

169
00:08:42.450 --> 00:08:47.979
API configuration is probably better
to use like an API framework to do.

170
00:08:47.979 --> 00:08:51.682
Because building a serverless,
It's definitely a lot different than not

171
00:08:51.682 --> 00:08:55.400
building a service, especially with
the database you would have to pick.

172
00:08:55.400 --> 00:08:59.028
You can't pick a database that
expects to be connected forever and

173
00:08:59.028 --> 00:09:02.739
pulling the connections,
eventually you run out of connections.

174
00:09:02.739 --> 00:09:05.735
So you've got to either solve that or
use a service database,

175
00:09:05.735 --> 00:09:07.818
which might change how you build your app.

176
00:09:07.818 --> 00:09:11.708
So there is a lot of decisions that
go into working on a service app.

177
00:09:11.708 --> 00:09:15.949
Although there are a lot more options
today than there were when I was making

178
00:09:15.949 --> 00:09:20.325
your service app like five years ago where
there was not a service database and

179
00:09:20.325 --> 00:09:21.753
you had to figure it out.

180
00:09:21.753 --> 00:09:24.222
So yeah, that's the way I think about it.

