WEBVTT

1
00:00:00.130 --> 00:00:03.790
Okay, speaking of scope CSS,
let's talk about CSS modules.

2
00:00:03.790 --> 00:00:07.103
So if we wanted to create CSS modules,
it's the same thing as next JS 12,

3
00:00:07.103 --> 00:00:08.690
nothing has really changed.

4
00:00:08.690 --> 00:00:11.770
So for instance, I have this component,

5
00:00:11.770 --> 00:00:16.540
I have a button anywhere,
I'm just gonna do it here.

6
00:00:16.540 --> 00:00:19.662
I can say button.module.CSS.

7
00:00:19.662 --> 00:00:24.154
If I use a .module.CSS.,
this creates what's called a CSS module.

8
00:00:24.154 --> 00:00:27.370
CSS module is not
something next Jas created.

9
00:00:27.370 --> 00:00:29.538
I wouldn't say it's a standard well,

10
00:00:29.538 --> 00:00:33.873
I guess now it is a like standard in the
community about how to make CSS modules,

11
00:00:33.873 --> 00:00:38.740
but it's basically exactly what it
sounds like, it's like CSS as a module.

12
00:00:38.740 --> 00:00:41.240
So what is the module nozzles like?

13
00:00:41.240 --> 00:00:46.210
A scoped, independent piece of code that
can't be compromised by some other piece

14
00:00:46.210 --> 00:00:51.250
of code because it's scoped, it's not
global, and that's what a CSS module is.

15
00:00:51.250 --> 00:00:55.532
It basically, when imported will
randomize and generate class names,

16
00:00:55.532 --> 00:01:00.302
that you can use inside of your components
so they're guaranteed to be unique and

17
00:01:00.302 --> 00:01:02.210
never collide with each other.

18
00:01:03.360 --> 00:01:07.852
There are other ways to make scoped CSS
using browser API's like Shadow DOM and

19
00:01:07.852 --> 00:01:12.138
things like that but this is just
randomizing class names for you which does

20
00:01:12.138 --> 00:01:16.790
the same thing, well, it doesn't do the
same thing but you get the same effect.

21
00:01:17.930 --> 00:01:20.490
So the way you would write that is,
I can make any class I want.

22
00:01:20.490 --> 00:01:25.280
Let's see I'm have a button class,
and I can write some CSS for it.

23
00:01:28.797 --> 00:01:30.063
Whatever I want here.

24
00:01:32.553 --> 00:01:39.570
I'll be like that, and then with the same
name with the class that I have,

25
00:01:39.570 --> 00:01:44.435
first I'll import,
I have to import the styles and

26
00:01:44.435 --> 00:01:51.581
typically you see something like
this styles from button.module.css.

27
00:01:51.581 --> 00:01:53.514
And then this is gonna be an object, and

28
00:01:53.514 --> 00:01:57.100
the properties on these objects are gonna
be the class names in the file.

29
00:01:58.140 --> 00:01:59.800
So it'll be styles.button.

30
00:01:59.800 --> 00:02:03.010
If I had another class in here it
will be styles dot that class.

31
00:02:03.010 --> 00:02:06.823
So each property, each declaration has
a property on the styles objects, and

32
00:02:06.823 --> 00:02:09.300
then I can just apply
it to wherever I want.

33
00:02:09.300 --> 00:02:17.250
So in this case, I can say class name is
gonna be whatever styles.button classes.

34
00:02:17.250 --> 00:02:22.244
And that's gonna be the generated class
name that the build system will generate

35
00:02:22.244 --> 00:02:23.080
for this.

36
00:02:23.080 --> 00:02:26.008
So it's scoped, so
what the browser sees and

37
00:02:26.008 --> 00:02:29.938
what the component sees is not button,
it sees 01567,

38
00:02:29.938 --> 00:02:35.190
whatever the class name that got created,
and we're just putting it here.

39
00:02:35.190 --> 00:02:37.500
So that's that's how the modules work.

40
00:02:37.500 --> 00:02:38.330
Yes.

41
00:02:38.330 --> 00:02:42.728
&gt;&gt; Could you style divs for instance,

42
00:02:42.728 --> 00:02:48.305
all divs and
then would it be styles that div?

43
00:02:48.305 --> 00:02:53.600
&gt;&gt; So
you mean just like a tag name like this?

44
00:02:53.600 --> 00:02:54.123
&gt;&gt; Yeah.

45
00:02:57.227 --> 00:03:01.490
&gt;&gt; Would it be styles actually,
I've never tried to do a tag name before.

46
00:03:01.490 --> 00:03:04.745
I would argue you don't
start all this [LAUGH].

47
00:03:04.745 --> 00:03:09.370
&gt;&gt; [LAUGH]
&gt;&gt; I would say don't do that.

48
00:03:11.020 --> 00:03:14.724
Instead, what you
probably wanna do is use,

49
00:03:14.724 --> 00:03:19.597
so what you can do is you can do
something common like that and

50
00:03:19.597 --> 00:03:25.690
then you might have something like div
one and then you can say can you go?

51
00:03:25.690 --> 00:03:26.200
Thank you.

52
00:03:26.200 --> 00:03:34.110
You can say my God, go away,
composes, common, you do that.

53
00:03:34.110 --> 00:03:38.180
And CSS module, that's not regular CSS,
but the CSS modules, you can do that.

54
00:03:38.180 --> 00:03:40.584
So this will, like,
inherit the stuff here, and

55
00:03:40.584 --> 00:03:42.830
then you can make all
these divs that you want.

56
00:03:45.540 --> 00:03:47.960
Yeah, but yeah,
probably don't style all your divs.

57
00:03:50.390 --> 00:03:51.020
Just dial IDs.

58
00:03:53.240 --> 00:03:54.610
Yeah, you just dial IDs.

59
00:03:54.610 --> 00:03:56.060
Pretty sure it's the same thing.

60
00:03:56.060 --> 00:04:00.192
So if I said item.

61
00:04:03.972 --> 00:04:05.490
My god, thank you, okay.

62
00:04:05.490 --> 00:04:09.675
And then you can go and
I'm pretty sure it's just the same thing.

63
00:04:11.939 --> 00:04:15.215
&gt;&gt; I can't remember,
does Next.js support SAS out of the box or

64
00:04:15.215 --> 00:04:18.130
is there some other libraries
you need to import?

65
00:04:18.130 --> 00:04:20.160
Or like maybe Tailwind or some like that?

66
00:04:20.160 --> 00:04:24.890
&gt;&gt; So there's support for Tailwind,
it's actually quite simple to set up.

67
00:04:24.890 --> 00:04:29.603
If you go to the Tailwind docs, they'll
walk you, I mean, there really is no

68
00:04:29.603 --> 00:04:34.605
setup, for Tailwind, you only really have
to add the directives at the top of your

69
00:04:34.605 --> 00:04:39.490
global file like @tellwinbase,
@tellwinutils, and there's a third one.

70
00:04:39.490 --> 00:04:42.100
And then you set up your
tellwin config and you're done.

71
00:04:42.100 --> 00:04:43.170
There's really nothing
else you have to do.

72
00:04:43.170 --> 00:04:45.750
There's nothing special about it.

73
00:04:45.750 --> 00:04:49.260
As far as SaaS, it does support SaaS.

74
00:04:49.260 --> 00:04:53.349
You just have to install SaaS yourself,
cuz it doesn't install it,

75
00:04:53.349 --> 00:04:57.224
I think you have to tell next JS is
config that you want to use Sass,

76
00:04:57.224 --> 00:05:01.877
which basically is like extending the
bundler that is using which depending on

77
00:05:01.877 --> 00:05:04.297
what version of next Jas you're using.

78
00:05:04.297 --> 00:05:09.428
And what flags you passed next as JS using
Webpack or you're using, they're rusty

79
00:05:09.428 --> 00:05:14.280
one and now they have this even newer
one that's like super, like on the edge.

80
00:05:14.280 --> 00:05:16.370
We're not even using that one but
that was really cool.

81
00:05:16.370 --> 00:05:18.350
And yeah, I just need to tell that thing.

82
00:05:18.350 --> 00:05:19.320
Hey, I wanna use Sass now.

83
00:05:19.320 --> 00:05:23.190
So it does support those things but
I used to use a lot of.

84
00:05:24.590 --> 00:05:25.720
Whats the one that I use?

85
00:05:25.720 --> 00:05:26.670
I use stylus.

86
00:05:26.670 --> 00:05:30.320
I really liked stylus and then at some
point, I just stopped using them.

87
00:05:30.320 --> 00:05:32.060
And I'm trying to remember what happened.

88
00:05:32.060 --> 00:05:34.874
I think I moved into CSS and JS.

89
00:05:34.874 --> 00:05:36.540
I just stopped using them.

90
00:05:36.540 --> 00:05:40.798
But now I'm kind of moving back to
writing CSS in the files with modules and

91
00:05:40.798 --> 00:05:44.790
things like that because it's just
easier with server components.

92
00:05:44.790 --> 00:05:50.275
Doing CSS and JS with server components,
it is a huge undertaking and it's a lot of

93
00:05:50.275 --> 00:05:56.430
work to do that and that's why I'm not
talking about it here but yeah of course.

94
00:05:56.430 --> 00:06:01.198
&gt;&gt; Regarding Tailwind CSS shout out
to Brian Holt Intermediate React v5

95
00:06:01.198 --> 00:06:05.250
which just launched,
it's got a section on tailwind CSS.

96
00:06:05.250 --> 00:06:06.470
And that course is modular.

97
00:06:06.470 --> 00:06:09.110
So you can just do that
lesson if you want.

98
00:06:09.110 --> 00:06:10.870
&gt;&gt; Yeah.
And it will work.

99
00:06:10.870 --> 00:06:12.780
Whatever he says in that course
will work for next year.

100
00:06:12.780 --> 00:06:17.351
So there's nothing specific to next
JS that you have to do for tailwind.

101
00:06:17.351 --> 00:06:20.165
&gt;&gt; I believe you can pass
the create next tab, a flag,

102
00:06:20.165 --> 00:06:24.310
like example with tailwind and
they'll just do that simple setup for you.

103
00:06:26.170 --> 00:06:31.036
&gt;&gt; Yeah, I used to really not tailwind
because I don't know I always just

104
00:06:31.036 --> 00:06:35.570
like look at it and if I got to sit
down and learn all these classes,

105
00:06:35.570 --> 00:06:40.355
I might as well just use a component
library that's already styled,

106
00:06:40.355 --> 00:06:43.593
cuz it's the same amount
of time as learning.

107
00:06:43.593 --> 00:06:45.591
But then I started using
component libraries and

108
00:06:45.591 --> 00:06:48.087
all the work I needed to get them
to look the way that I wanted.

109
00:06:48.087 --> 00:06:49.950
And I was like,
I need something a little more raw.

110
00:06:49.950 --> 00:06:52.786
So then I actually landed on
something called Headless UIs,

111
00:06:52.786 --> 00:06:55.730
which Tailwind actually made
a library called Headless UI.

112
00:06:55.730 --> 00:06:59.314
It's like a component library that has
no style and it's meant to be styled but

113
00:06:59.314 --> 00:07:03.007
it has pure functionality and then you can
add whatever styles you want to that and

114
00:07:03.007 --> 00:07:06.645
I was like, okay now tailwind makes sense
because I really just want a component

115
00:07:06.645 --> 00:07:08.787
library that had no style but
was functional.

116
00:07:08.787 --> 00:07:12.107
And then I can add
Tailwind classes to that.

117
00:07:12.107 --> 00:07:16.387
But the missing piece for me was how
to create variants based off props.

118
00:07:16.387 --> 00:07:19.037
And then I found this library that allows
you to create variants really easily.

119
00:07:19.037 --> 00:07:22.352
So combining all three of those, I was
like, all right, Tailwind's amazing, but

120
00:07:22.352 --> 00:07:23.717
only if I use it in that way.

121
00:07:23.717 --> 00:07:27.970
So I still don't like the fact that
I gotta look up all these classes.

122
00:07:27.970 --> 00:07:31.700
I also don't like looking in JSX and
seeing super long class names everywhere.

123
00:07:31.700 --> 00:07:34.540
It's really annoying cuz I
think it's just distracting.

124
00:07:34.540 --> 00:07:37.783
But I have to admit,
tailwind is a really cool library and

125
00:07:37.783 --> 00:07:40.428
it does have really good styles,
so I like it.

126
00:07:42.288 --> 00:07:45.931
So just a little rant about
me hating on tailwind,

127
00:07:45.931 --> 00:07:49.763
but I think they're dope,
sorry tailwind, cool.

128
00:07:49.763 --> 00:07:53.695
Any other questions on styling?

129
00:07:53.695 --> 00:07:57.017
The only other one that I want to
cover with styling was basically,

130
00:07:57.017 --> 00:07:58.820
how to use third-party styles.

131
00:07:58.820 --> 00:08:03.519
So if you installed some styling off
of NPM like bootstrap or reset CSS,

132
00:08:03.519 --> 00:08:08.471
how do you import that other than
Tailwind because Tailwind is different?

133
00:08:08.471 --> 00:08:10.250
Because by the way,
Tailwind is not a CSS lib.

134
00:08:10.250 --> 00:08:11.470
Did you know that?

135
00:08:11.470 --> 00:08:12.680
Like I thought it was just a CSS lib.

136
00:08:12.680 --> 00:08:14.190
It's not a CSS lib.

137
00:08:14.190 --> 00:08:17.820
So a JavaScript library and
the CSS is generated and

138
00:08:17.820 --> 00:08:21.280
it looks at your class name statically.

139
00:08:21.280 --> 00:08:26.400
At, runtime to determine
what CSS to generate.

140
00:08:26.400 --> 00:08:27.420
It's really advanced.

141
00:08:27.420 --> 00:08:29.982
I did not know that I thought I went to
go look at the source code, I was like,

142
00:08:29.982 --> 00:08:31.560
where's the CSS file?

143
00:08:31.560 --> 00:08:32.180
And it was it.

144
00:08:32.180 --> 00:08:35.920
I was like, wait,
it's not a CSS libraries it's JavaScript.

145
00:08:35.920 --> 00:08:38.480
And then I was like, okay, this is
a really cool, I kind of like this.

146
00:08:38.480 --> 00:08:43.908
So, yeah, and that's why you can't use
interpolation in your class names for

147
00:08:43.908 --> 00:08:47.634
tailwind values,
because the just in time compiler,

148
00:08:47.634 --> 00:08:53.050
can't interpolate those values,
they have to statically see them.

149
00:08:53.050 --> 00:08:54.640
I'm like, this is actually really cool.

150
00:08:54.640 --> 00:08:56.350
So, I was really impressed.

151
00:08:56.350 --> 00:08:57.930
I think that was the selling point for me.

152
00:08:57.930 --> 00:09:04.180
But yeah, so I mean importing other stuff
is very similar to importing global CSS.

153
00:09:04.180 --> 00:09:07.690
Honestly, you just import it like this.

154
00:09:07.690 --> 00:09:11.080
If it's from NPM,
you just import it like this, that's it.

155
00:09:11.080 --> 00:09:12.950
Just put it in the layout though.

156
00:09:12.950 --> 00:09:18.030
Import it in your layouts,
hopefully your layouts cuz it's global.

157
00:09:18.030 --> 00:09:23.258
If it's not global, it should be a module,
and imported in that file, that's it.

158
00:09:28.189 --> 00:09:31.228
Now if you wanna use something like
styled components or something like that,

159
00:09:31.228 --> 00:09:35.460
that's a little more advanced with server
components, it's actually quite involved.

160
00:09:35.460 --> 00:09:39.300
So stay tuned to my full stack course that
we'll be working on that when we walk

161
00:09:39.300 --> 00:09:41.900
through that,
cuz it is actually quite involved and

162
00:09:41.900 --> 00:09:45.410
there's a lot going on there to get
it to work with server components.

163
00:09:46.600 --> 00:09:51.880
You basically have to combine all the CSS
that's generated from stock components

164
00:09:51.880 --> 00:09:57.910
yourself and create your own style sheet
on demand on the server and render that.

165
00:09:57.910 --> 00:10:01.547
It's a lot of work,
I didn't wanna do that, [LAUGH] today.

