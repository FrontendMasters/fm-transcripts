WEBVTT

1
00:00:00.000 --> 00:00:04.186
When we use libraries to handle
requests like React Query,

2
00:00:04.186 --> 00:00:07.293
Is that where you'd
have to use use client?

3
00:00:07.293 --> 00:00:09.276
&gt;&gt; Yes, you have to use client for

4
00:00:09.276 --> 00:00:14.016
React query because React queries
hooks only work on client components.

5
00:00:14.016 --> 00:00:18.698
So yeah, React query is not
something you would ever use for

6
00:00:18.698 --> 00:00:23.767
a server component because you're
not keeping track of state.

7
00:00:23.767 --> 00:00:26.355
React query seems like it's
a fetching library but

8
00:00:26.355 --> 00:00:30.805
in reality it's a caching library, it's a
caching library, it's just because if you

9
00:00:30.805 --> 00:00:34.556
think about it it doesn't do any fetching
you have to give it the fetcher.

10
00:00:34.556 --> 00:00:36.597
You have to give React Query
the ability to fetch.

11
00:00:36.597 --> 00:00:37.607
It just caches.

12
00:00:37.607 --> 00:00:42.055
But you're not gonna do that on
the backend cuz it doesn't keep track of

13
00:00:42.055 --> 00:00:42.584
state.

14
00:00:42.584 --> 00:00:43.481
This is stateless.

15
00:00:43.481 --> 00:00:48.510
Even the cache that is happening from
the fetch is being cached client side.

16
00:00:48.510 --> 00:00:49.863
It's not being cached server side.

17
00:00:49.863 --> 00:00:51.987
All the cache happens on the client.

18
00:00:51.987 --> 00:00:55.088
So yeah, you couldn't use React Query
on the server because, one,

19
00:00:55.088 --> 00:00:57.561
it's not needed cuz you're
not tracking rerenders.

20
00:00:57.561 --> 00:01:02.082
And to it's using hooks and state,
which doesn't make sense on the server.

21
00:01:02.082 --> 00:01:03.959
Mike you have a question?

22
00:01:03.959 --> 00:01:05.343
&gt;&gt; Yes.

23
00:01:05.343 --> 00:01:12.389
So with this API call is this
caching on the client side?

24
00:01:12.389 --> 00:01:19.082
And every time still making the call,
however, deciding whether to rerender.

25
00:01:19.082 --> 00:01:21.531
&gt;&gt; So great question
&gt;&gt; The data has changed or not?

26
00:01:21.531 --> 00:01:22.282
&gt;&gt; Yeah, that's a great question.

27
00:01:22.282 --> 00:01:26.285
So, the question was, is this being
cached on the client side, and

28
00:01:26.285 --> 00:01:30.511
how does it know when to rerender,
and what's causing it to rerender?

29
00:01:30.511 --> 00:01:32.466
So, yes,
it is being cached on the client side.

30
00:01:32.466 --> 00:01:37.437
And the way the caching works by default,
is per segment, as in the route.

31
00:01:37.437 --> 00:01:41.370
So, React is like for this route, for this
path, which in this case is just home,

32
00:01:41.370 --> 00:01:43.658
slash Here's the stuff that's cached for
it.

33
00:01:43.658 --> 00:01:45.838
Here's like the results.

34
00:01:45.838 --> 00:01:47.187
And here's the data.

35
00:01:47.187 --> 00:01:53.014
And because we didn't specify any
type of like caching mechanism here,

36
00:01:53.014 --> 00:01:55.411
it's going to default to it.

37
00:01:55.411 --> 00:02:00.200
Treating this data as what's called static
data as in this data is never going to

38
00:02:00.200 --> 00:02:00.778
change.

39
00:02:00.778 --> 00:02:05.093
So you are manually going to
have to tell me to update this.

40
00:02:05.093 --> 00:02:09.748
I'm just going to keep sending back the
cache until you manually tell me because

41
00:02:09.748 --> 00:02:14.555
you haven't given me any hints on whether
or not that this is a dynamic data fetch.

42
00:02:14.555 --> 00:02:18.036
So you have to manually opt into that and
there's a lot of ways to do that.

43
00:02:18.036 --> 00:02:22.481
You can create your own revalidation
strategy by doing something like

44
00:02:24.524 --> 00:02:26.129
Let's see.

45
00:02:26.129 --> 00:02:31.965
So you can say cache, like this,
and then, Is it revalidate?

46
00:02:31.965 --> 00:02:33.269
No, not that.

47
00:02:33.269 --> 00:02:33.829
Let me see.

48
00:02:33.829 --> 00:02:36.581
I think I have it in here.

49
00:02:36.581 --> 00:02:37.681
This is advanced one.

50
00:02:37.681 --> 00:02:38.806
Yeah, we go.
I was right and wrong.

51
00:02:38.806 --> 00:02:40.340
So you can say cache.

52
00:02:40.340 --> 00:02:45.648
For instance, if you say cache no-store,
this means this is always

53
00:02:45.648 --> 00:02:51.798
gonna be dynamic data, and I always want
it to be up to date, so never cash this.

54
00:02:51.798 --> 00:02:54.647
So, anytime someone goes to this route,
always hit Reddit and

55
00:02:54.647 --> 00:02:56.272
always give me the latest, right?

56
00:02:56.272 --> 00:02:58.528
Do not store this anywhere,
that's what that means, right?

57
00:02:58.528 --> 00:03:02.582
So, it gives you the ability
to control that cache.

58
00:03:02.582 --> 00:03:06.492
But this is why I said it gets really
advanced and probably by default,

59
00:03:06.492 --> 00:03:10.599
it's best to always use a default
until that one time where you're like,

60
00:03:10.599 --> 00:03:12.785
why is this giving us back stale data and

61
00:03:12.785 --> 00:03:16.788
then go fix that one thing versus
trying to think about it ahead of time.

62
00:03:16.788 --> 00:03:21.160
I think you'll just over optimise
everything will just be like well.

63
00:03:21.160 --> 00:03:23.800
Let's just give ourselves control
of everything and see what happens.

64
00:03:23.800 --> 00:03:27.815
Yeah, by default, fetch will cache all the
results, which is great for static data,

65
00:03:27.815 --> 00:03:31.580
but say for dynamic data,
you wanna do something like that, right?

66
00:03:31.580 --> 00:03:33.930
And there's more options,
way more options.

67
00:03:33.930 --> 00:03:38.136
I highly recommend checking out
the next stuff in the course.

68
00:03:38.136 --> 00:03:41.310
For the updates of the full stack app
course that we're going to be working on,

69
00:03:41.310 --> 00:03:43.138
we will be covering more
cache strategies and

70
00:03:43.138 --> 00:03:45.614
how to actually do that in production and
why you might do it.

71
00:03:45.614 --> 00:03:49.656
So, but there's a lot going on there.

72
00:03:49.656 --> 00:03:52.312
Okay.

73
00:03:52.312 --> 00:03:55.236
Any other questions on
fetching data on server?

74
00:03:55.236 --> 00:03:56.096
Yes.

75
00:03:56.096 --> 00:04:00.492
&gt;&gt; So I guess my question is, where does
the API now fit given the fact that we can

76
00:04:00.492 --> 00:04:05.324
do pretty much all the stuff you'd wanna
do with API within our server components?

77
00:04:05.324 --> 00:04:11.948
&gt;&gt; Exactly, yeah, so
API comes in here, client, right?

78
00:04:11.948 --> 00:04:13.008
This is where the API comes in.

79
00:04:13.008 --> 00:04:14.339
This is what we're gonna talk about.

80
00:04:14.339 --> 00:04:17.675
So let me ask you a question.

81
00:04:17.675 --> 00:04:20.774
If I went to a page,
I went to this page and

82
00:04:20.774 --> 00:04:23.976
I loaded it up for the first time, right?

83
00:04:23.976 --> 00:04:25.271
This is doing a get request.

84
00:04:25.271 --> 00:04:28.242
It's getting data is putting on a screen,

85
00:04:28.242 --> 00:04:31.716
would you expect to go to a page and
have that page?

86
00:04:31.716 --> 00:04:34.516
Post something to a server?

87
00:04:34.516 --> 00:04:35.550
Like that seems common?

88
00:04:35.550 --> 00:04:38.173
Yeah, analytics aside and
all that weird stuff, but like,

89
00:04:38.173 --> 00:04:41.679
you didn't perform an action, so
you're probably not mutating the database.

90
00:04:41.679 --> 00:04:44.682
When you go to a website and
you're like, you didn't do anything.

91
00:04:44.682 --> 00:04:46.027
You just went to the website.

92
00:04:46.027 --> 00:04:47.762
Okay, so there.

93
00:04:47.762 --> 00:04:52.022
And because when you do this, is when the
server components come, that kind of tells

94
00:04:52.022 --> 00:04:55.992
you that there really isn't a good use
case for doing mutations on the server.

95
00:04:55.992 --> 00:04:57.479
Like you almost don't need to,

96
00:04:57.479 --> 00:05:00.351
you're almost only exclusively
getting data from a server.

97
00:05:00.351 --> 00:05:04.355
I mean, if you are doing some mutations
on the server, it's probably not for the.

98
00:05:04.355 --> 00:05:08.433
Effect of showing something on a page,
but maybe like a side effect of like,

99
00:05:08.433 --> 00:05:11.637
I don't know, analytics or
you're tracking something.

100
00:05:11.637 --> 00:05:13.179
But it's not because you
need to show on the page,

101
00:05:13.179 --> 00:05:15.065
usually that's because you
need to get something, right?

102
00:05:15.065 --> 00:05:17.077
It's not a good use case to do it there.

103
00:05:17.077 --> 00:05:20.096
So really mutating is only for
the client, right?

104
00:05:20.096 --> 00:05:27.075
So if you're on the client you don't have
access to async components on the client.

105
00:05:27.075 --> 00:05:32.017
So now you have to rely on doing
mutations the old hard way, React query,

106
00:05:32.017 --> 00:05:35.517
SWR, use effect,
the stuff that we already know.

107
00:05:35.517 --> 00:05:37.284
And in that case, you do need an API,

108
00:05:37.284 --> 00:05:41.005
cuz you have to go across the network
layer because you're on the client now.

109
00:05:41.005 --> 00:05:45.100
So you have to go through the network,
talk to an API, get some information, and

110
00:05:45.100 --> 00:05:45.954
then come back.

111
00:05:45.954 --> 00:05:47.200
So that doesn't change.

112
00:05:47.200 --> 00:05:50.344
So you still need an API if
you need to do a mutation,

113
00:05:50.344 --> 00:05:54.825
which is only on the client, or
if your client needs to get information.

114
00:05:54.825 --> 00:05:56.742
As in, someone clicked this button.

115
00:05:56.742 --> 00:05:58.904
Therefore now I have to get this thing.

116
00:05:58.904 --> 00:06:03.508
So I couldn't have made that a server
component, or maybe you could have.

117
00:06:03.508 --> 00:06:05.259
There's probably a way you could have
do it, now that I'm thinking about it.

118
00:06:05.259 --> 00:06:08.162
But like you can still use an API for
that.

119
00:06:08.162 --> 00:06:13.382
React just thought of this, and
they have, where are my notes?

120
00:06:13.382 --> 00:06:14.615
Here we go.

121
00:06:14.615 --> 00:06:17.063
They have this thing called use.

122
00:06:17.063 --> 00:06:19.767
They have a new hook,
it's literally just called use.

123
00:06:19.767 --> 00:06:21.152
That's [LAUGH].

124
00:06:21.152 --> 00:06:24.121
They got rid of the stuff after it,
and it's just called use now.

125
00:06:24.121 --> 00:06:29.516
And the use hook allows you to basically,
it kind of works like React query or

126
00:06:29.516 --> 00:06:32.972
SWR, whereas you can just
pass it to a fetcher and

127
00:06:32.972 --> 00:06:37.638
it will do all the caching for
you and kind of figure it out, okay?

128
00:06:37.638 --> 00:06:40.526
The problem with the used
hook is that it's not ready.

129
00:06:40.526 --> 00:06:41.577
I've actually tried it.

130
00:06:41.577 --> 00:06:42.241
It is not ready.

131
00:06:42.241 --> 00:06:44.512
They say it's not ready and
they recommend you don't use it.

132
00:06:44.512 --> 00:06:47.809
But I'm bringing it up because I think
it will be ready like by February.

133
00:06:47.809 --> 00:06:50.488
I think it's going to be pretty
close when this thing is ready or

134
00:06:50.488 --> 00:06:51.402
whenever they do it.

135
00:06:51.402 --> 00:06:54.321
I think it's going to
be ready really soon.

136
00:06:54.321 --> 00:06:55.582
So I'm bringing that up.

137
00:06:55.582 --> 00:06:59.767
But the recommended approach right now is
just to use whatever you've been using,

138
00:06:59.767 --> 00:07:03.319
SWR, React query, whatever your
favorite thing is to talk to an API.

139
00:07:03.319 --> 00:07:05.342
Right, so that's how you would
do that on the client side.

