WEBVTT

1
00:00:00.490 --> 00:00:04.390
Cuz I just pushed the changes to the code
that I was working on up to GitHub, but

2
00:00:04.390 --> 00:00:05.600
I'll read it out here.

3
00:00:05.600 --> 00:00:08.569
It's just my GitHub,
which is Hendricks sir,

4
00:00:08.569 --> 00:00:11.870
which is Hendricks with
the ER/intro-njs-app.

5
00:00:11.870 --> 00:00:16.680
And then I'll just keep pushing my code
up to that main branch there as we

6
00:00:16.680 --> 00:00:18.260
move along.

7
00:00:18.260 --> 00:00:19.830
I kinda talked about it before,

8
00:00:19.830 --> 00:00:22.860
which was like server components
versus server side render.

9
00:00:24.560 --> 00:00:28.310
Let's do like a little deeper dive on
like, server components themselves.

10
00:00:28.310 --> 00:00:32.775
So server components is basically
if I have a link here for the RFC,

11
00:00:32.775 --> 00:00:35.727
which RFC stands for Request for Comments,

12
00:00:35.727 --> 00:00:40.669
they have like a whole video on it and
stuff but the actual RFC is like here,

13
00:00:40.669 --> 00:00:45.330
which I highly recommend,
really because it's It's really good.

14
00:00:45.330 --> 00:00:47.467
Like if you just go through and
scroll through here,

15
00:00:47.467 --> 00:00:51.080
what the React team is talking about, for
server components, it's quite amazing.

16
00:00:51.080 --> 00:00:54.154
I've learned a lot, just from going
through there, and experimenting, and

17
00:00:54.154 --> 00:00:56.220
seeing what people are talking about.

18
00:00:56.220 --> 00:00:57.050
So check that out.

19
00:00:57.050 --> 00:01:01.080
But basically server components are
components that never leave the server.

20
00:01:01.080 --> 00:01:02.520
They just don't.

21
00:01:02.520 --> 00:01:05.439
So that means there is no JavaScript
that gets shipped to the client.

22
00:01:06.480 --> 00:01:10.933
This also means I talked about server
components not be able to use things like

23
00:01:10.933 --> 00:01:15.250
browser API's, but that also means
they can't use anything what state so

24
00:01:15.250 --> 00:01:18.150
hooks like use state and
effects can't use them.

25
00:01:18.150 --> 00:01:22.694
The server component just won't work
because I don't know if anyone has

26
00:01:22.694 --> 00:01:27.685
experienced with a What's a synonymous
architecture I think Phoenix live view

27
00:01:27.685 --> 00:01:31.336
does something like this that's
such a nice framework but

28
00:01:31.336 --> 00:01:36.251
they do something like this where they
stream stuff from the server to the front

29
00:01:36.251 --> 00:01:40.005
end To like not having to have so
much JavaScript.

30
00:01:40.005 --> 00:01:43.295
But what they do is they actually
keep all the state on the server.

31
00:01:43.295 --> 00:01:46.283
So they have like the ability to
do like checking and state and

32
00:01:46.283 --> 00:01:49.795
stuff on the server and
they send it over through a web socket.

33
00:01:49.795 --> 00:01:54.205
It's kinda like that here, except for
they don't keep state on the server.

34
00:01:54.205 --> 00:01:55.287
So there is no hooks,

35
00:01:55.287 --> 00:01:59.800
there is no ability to do a use effect
because those components are re-rendering.

36
00:01:59.800 --> 00:02:01.968
All right, if you think about how
a hook works, a hook is kind of,

37
00:02:01.968 --> 00:02:03.160
it's exactly what it sounds like.

38
00:02:03.160 --> 00:02:06.600
It's a hook into the lifecycle
of a React component.

39
00:02:06.600 --> 00:02:09.630
But our server React component
doesn't have a lifecycle.

40
00:02:09.630 --> 00:02:13.700
It just renders the data and
sends the HTML back to streaming.

41
00:02:13.700 --> 00:02:17.970
So it doesn't really have an ability
to like, this data changed.

42
00:02:17.970 --> 00:02:20.050
I need to refresh myself or re-render.

43
00:02:20.050 --> 00:02:22.250
There is no re-rendering on the server.

44
00:02:22.250 --> 00:02:27.143
That's a client side Approach for react
on the server it just happens once and

45
00:02:27.143 --> 00:02:30.455
then based on your caching and
your revalidating and

46
00:02:30.455 --> 00:02:33.691
the segments that you go to
it might happen again but

47
00:02:33.691 --> 00:02:38.970
it's definitely not keeping track of
state and things like that because.

48
00:02:38.970 --> 00:02:40.930
Yeah, that's just not what it does.

49
00:02:40.930 --> 00:02:43.470
So you can't use hooks and
things like that.

50
00:02:44.720 --> 00:02:48.810
So you basically have to kinda just think
about those components a little different.

51
00:02:48.810 --> 00:02:51.700
But they do bring benefits,
as you'll see in a minute.

52
00:02:51.700 --> 00:02:53.330
Some benefits are really cool.

53
00:02:53.330 --> 00:02:56.881
They make the component stuff just so
much easy to think about,

54
00:02:56.881 --> 00:02:59.430
in my opinion cuz it's explicit.

55
00:02:59.430 --> 00:03:02.790
But yeah, server components
versus server side rendering,

56
00:03:02.790 --> 00:03:06.860
I talked about a little bit, but
Traditional server side rendering is when

57
00:03:06.860 --> 00:03:11.510
a component is rendered on the server,
and the HTML is basically serial like.

58
00:03:11.510 --> 00:03:14.140
So you get the HTML that's
rendered from the component.

59
00:03:14.140 --> 00:03:17.634
And then all the data that's associated
with that component is serialized

60
00:03:17.634 --> 00:03:21.294
basically, it's turned into JSON,
it's sent along with the components And

61
00:03:21.294 --> 00:03:23.080
then it's hydrated on the front end.

62
00:03:23.080 --> 00:03:24.750
You might have heard that before.

63
00:03:24.750 --> 00:03:26.200
These components need to be hydrated.

64
00:03:26.200 --> 00:03:31.250
That just means the HTML got put on the
screen, and here's all the data for it.

65
00:03:31.250 --> 00:03:35.493
So take this data, feed it to the
client-side versions of those components

66
00:03:35.493 --> 00:03:39.620
so it can be rehydrated back
with all that serialized data.

67
00:03:39.620 --> 00:03:43.443
So if you've ever tried to send
something that's not sterilizable,

68
00:03:43.443 --> 00:03:47.134
like a date object or a function,
you can't serialize a function,

69
00:03:47.134 --> 00:03:49.420
you can't serialize a date object.

70
00:03:49.420 --> 00:03:50.940
You might get an error in next.js.

71
00:03:50.940 --> 00:03:54.980
If you ever tried to pass back a date
function inside of a get static props or

72
00:03:54.980 --> 00:03:57.391
a get server site props and next.js v12,

73
00:03:57.391 --> 00:04:01.106
you would've got an error Because
to cross the network threshold,

74
00:04:01.106 --> 00:04:05.900
the barrier, it has to be serialized,
and date objects can't be serialized.

75
00:04:05.900 --> 00:04:09.004
So that's how server side rendering works
is we're gonna render this thing on

76
00:04:09.004 --> 00:04:09.960
the server.

77
00:04:09.960 --> 00:04:12.000
We're gonna get back some HTML.

78
00:04:12.000 --> 00:04:13.710
The whole request has to finish.

79
00:04:13.710 --> 00:04:15.650
Once we're done with all that,
we're gonna send it back.

80
00:04:15.650 --> 00:04:19.031
And then the frontend is gonna just
take over and rerender itself, and

81
00:04:19.031 --> 00:04:20.850
now we're in client mode.

82
00:04:20.850 --> 00:04:22.780
Okay, server components is not that.

83
00:04:22.780 --> 00:04:25.770
Server components is We're
going to go to the server.

84
00:04:25.770 --> 00:04:28.889
We're going to fetch any data
that this component needs,

85
00:04:28.889 --> 00:04:32.400
whether it's in parallel,
whether it's one after each other.

86
00:04:32.400 --> 00:04:36.854
And then as the results start to come in,
we're going to stream it to the client,

87
00:04:36.854 --> 00:04:41.329
that way, the client isn't waiting for
the result of this request to come back.

88
00:04:41.329 --> 00:04:44.578
So therefore the client can proceed
to do whatever it wants to do,

89
00:04:44.578 --> 00:04:48.610
show other components that have already
popped in in different parts like that.

90
00:04:48.610 --> 00:04:52.932
So you're gonna start seeing more
apps Have this effect where you

91
00:04:52.932 --> 00:04:57.705
can think of a dashboard that's
got panels and stuff everywhere.

92
00:04:57.705 --> 00:05:00.765
Some panels still loading in,
others are already here, right?

93
00:05:00.765 --> 00:05:03.579
Each individual thing has
its own loading animation,

94
00:05:03.579 --> 00:05:06.333
its own error state that's
completely isolated from

95
00:05:06.333 --> 00:05:10.695
the rest of that page because they're
server components and they're individual.

96
00:05:10.695 --> 00:05:12.790
So I think you're gonna start
seeing stuff like that, and

97
00:05:12.790 --> 00:05:15.670
that's the difference between A server
component and server side rendering.

98
00:05:16.690 --> 00:05:18.800
So when do you use server components?

99
00:05:18.800 --> 00:05:23.450
You should just always use them until
you need to do some client side stuff.

100
00:05:23.450 --> 00:05:28.179
So if you're like making an interactive
chart using D three, server component or

101
00:05:28.179 --> 00:05:29.610
client component?

102
00:05:29.610 --> 00:05:32.962
Probably client component because there's
no interactions on the server that Allow

103
00:05:32.962 --> 00:05:34.090
you to manipulate the Dom.

104
00:05:34.090 --> 00:05:37.950
So you still have to use that a form
where you have to submit things.

105
00:05:37.950 --> 00:05:41.545
Probably a client component because you
have to respond to a submit event on

106
00:05:41.545 --> 00:05:43.490
a form and do something.

107
00:05:43.490 --> 00:05:47.230
A navigation bar probably
a server component.

108
00:05:47.230 --> 00:05:49.390
It's just a read only navigation
bar with links on it.

109
00:05:49.390 --> 00:05:51.090
Why do you need to render
that on the client?

110
00:05:51.090 --> 00:05:55.107
That should just load in immediately and
everything else should fall in place

111
00:05:55.107 --> 00:05:59.247
I think that's why next.js was just like,
let's just make everything server

112
00:05:59.247 --> 00:06:02.490
appointed by default,
to force you to think about it.

113
00:06:02.490 --> 00:06:05.979
Like basically, what I found out is I
really liked this as a forcing function

114
00:06:05.979 --> 00:06:09.270
because you will write the code
as a server component.

115
00:06:09.270 --> 00:06:13.046
And then maybe you're not thinking about
or maybe you don't know how it works, or

116
00:06:13.046 --> 00:06:14.840
maybe you just don't care.

117
00:06:14.840 --> 00:06:18.545
You'll try to do something like a hook or
something and you're like it broke and

118
00:06:18.545 --> 00:06:20.209
because it broke you can't move on so

119
00:06:20.209 --> 00:06:23.700
then that forces you to make it a client
component but only that thing right and

120
00:06:23.700 --> 00:06:26.922
then you go to the next component and
then that's a server component and

121
00:06:26.922 --> 00:06:31.050
you just repeat the cycle so you're
only forced to fix the thing that broke.

122
00:06:31.050 --> 00:06:34.345
Because it needed to be a client component
only put use client on the things that you

123
00:06:34.345 --> 00:06:36.610
need to do, and
everything else is a server component.

124
00:06:36.610 --> 00:06:41.111
So I kinda like it as a forcing function
because it kinda teaches you eventually

125
00:06:41.111 --> 00:06:45.065
you'll build this list of like if
it's got this, if it's got this,

126
00:06:45.065 --> 00:06:47.313
if it's got this This but use client and

127
00:06:47.313 --> 00:06:50.995
then that would be your thing but
by default it's always a server

128
00:06:50.995 --> 00:06:53.868
component any questions on that yes
&gt;&gt; it's kind of like what

129
00:06:53.868 --> 00:06:56.015
you're mentioning one
thing I was I noticed was.

130
00:06:56.015 --> 00:06:58.399
Yet when we first were using
the link component itself,

131
00:06:58.399 --> 00:07:00.125
we didn't have the use client.

132
00:07:00.125 --> 00:07:02.624
&gt;&gt; Right.
&gt;&gt; So there's a link component then that's

133
00:07:02.624 --> 00:07:07.595
a client component that has that like the
use client, presumably at the top of that.

134
00:07:07.595 --> 00:07:08.198
&gt;&gt; Yes, exactly.
And

135
00:07:08.198 --> 00:07:11.895
that brings me to another point that
I think I haven't heard somewhere.

136
00:07:11.895 --> 00:07:12.475
I have here.

137
00:07:12.475 --> 00:07:16.878
Yeah, so like, using third party
libraries, like a lot of every third party

138
00:07:16.878 --> 00:07:20.610
library ever and
react does not adopt this strategy yet.

139
00:07:20.610 --> 00:07:24.080
So unless they just made it in the last,
I don't know.

140
00:07:24.080 --> 00:07:25.835
These are just very
proactive mo maintainers and

141
00:07:25.835 --> 00:07:27.300
they're looking at all the React RFCs.

142
00:07:27.300 --> 00:07:32.010
They probably haven't added used client
to the top of their, component lip.

143
00:07:32.010 --> 00:07:35.520
Like for instance, one component lip
that I love to use is chaker ui, right?

144
00:07:35.520 --> 00:07:38.840
I love this one and I was gonna use it for
one of the courses.

145
00:07:38.840 --> 00:07:42.480
Then I went on here and I was like,
I want to use this for next year.

146
00:07:42.480 --> 00:07:45.060
Yes.
And it immediately says, you can't,

147
00:07:45.060 --> 00:07:49.620
you can't use it for next year I start
saying unless you put us client because it

148
00:07:49.620 --> 00:07:51.850
doesn't work outside of the client.

149
00:07:51.850 --> 00:07:55.794
So you're gonna see a lot of this,
you're gonna see a lot of lives and

150
00:07:55.794 --> 00:07:59.738
libraries not working out of the box
because they haven't gone in and

151
00:07:59.738 --> 00:08:04.022
made them Work for React 18 and beyond,
so you have to wrap them in your own

152
00:08:04.022 --> 00:08:09.400
useClientComponent first as a proxy so you
can import them in your server components.

153
00:08:09.400 --> 00:08:12.876
Yeah.
I'm trying to formulate this question,

154
00:08:12.876 --> 00:08:13.480
right?

155
00:08:13.480 --> 00:08:18.633
Like, having been through the various
state management stages of React,

156
00:08:18.633 --> 00:08:23.702
from props drilling to Redux,
to Redux with hooks, to abusing context,

157
00:08:23.702 --> 00:08:27.330
Still using use context and
on, like anecdotally.

158
00:08:28.410 --> 00:08:33.383
How many of you seen, I guess first
kind of islands architecture that

159
00:08:33.383 --> 00:08:36.740
they're discussing as implemented in Next?

160
00:08:36.740 --> 00:08:40.490
And then maybe they use client directed,
how have you seen those changing?

161
00:08:40.490 --> 00:08:47.580
Kind of the unidirectional tree model
Ways of hosting and sharing state.

162
00:08:47.580 --> 00:08:50.987
&gt;&gt; Yeah, I think that's still
gonna remain but only for

163
00:08:50.987 --> 00:08:55.527
the client side land I think they've
zoomed out a little more and I, And

164
00:08:55.527 --> 00:09:00.447
they were before we even get there,
we need to figure out so there's the React

165
00:09:00.447 --> 00:09:05.367
team, the next JS team and the the Google
Chrome team are working very closely

166
00:09:05.367 --> 00:09:10.940
together to figure out how to create
an optimum framework for the browser.

167
00:09:10.940 --> 00:09:13.297
&gt;&gt; And I think they've landed
on the fact that, like,

168
00:09:13.297 --> 00:09:15.770
how do we send less JavaScript
to the browser, right?

169
00:09:15.770 --> 00:09:19.445
And I think React's like, well,
we'll make it a framework-level support.

170
00:09:19.445 --> 00:09:21.590
Next.js is like,
we'll make it easier for people to do.

171
00:09:21.590 --> 00:09:24.035
And Chrome's like, we'll probably
make it easier for them to debug or

172
00:09:24.035 --> 00:09:25.170
something, right?

173
00:09:25.170 --> 00:09:29.210
So, I think them zooming out is like,
okay, on the client level,

174
00:09:29.210 --> 00:09:33.758
we still have this whole state thing and
figuring out when state changes and

175
00:09:33.758 --> 00:09:36.300
how to keep track of that state.

176
00:09:36.300 --> 00:09:38.950
But now it's more of on a network layer,
a data layer.

177
00:09:38.950 --> 00:09:41.784
It's like, well, how do we even know what
components to even send to the browser in

178
00:09:41.784 --> 00:09:42.800
the first place?

179
00:09:42.800 --> 00:09:44.960
And that comes down to.

180
00:09:44.960 --> 00:09:49.067
Keep in track of the things that you're
trying to get whether it's from an APR,

181
00:09:49.067 --> 00:09:52.950
whether it's from a database,
whether it's from a file system.

182
00:09:52.950 --> 00:09:54.820
And what is your intention on that data?

183
00:09:54.820 --> 00:09:58.340
Should it be re validated,
should it be dynamic?

184
00:09:58.340 --> 00:10:01.280
Always and never cashed,
what is the cashing strategy and

185
00:10:01.280 --> 00:10:04.600
I think that's gonna determine,
&gt;&gt; How things get rendered.

186
00:10:04.600 --> 00:10:09.033
They're basically making it a data first
rendering approach before it even gets to

187
00:10:09.033 --> 00:10:09.740
the client.

188
00:10:09.740 --> 00:10:13.050
And then when it gets to the client,
you're back to wherever you were before.

189
00:10:13.050 --> 00:10:14.850
So I think that's just them
zooming out on that layer.

190
00:10:14.850 --> 00:10:15.450
How things get rendered.

191
00:10:15.450 --> 00:10:19.895
They're basically making it a data first
rendering approach before it even gets to

192
00:10:19.895 --> 00:10:20.600
the client.

193
00:10:20.600 --> 00:10:23.880
And then when it gets to the client,
you're back to wherever you were before.

194
00:10:23.880 --> 00:10:25.400
So I think that's just them
zooming out on that layer.

195
00:10:25.400 --> 00:10:28.310
So This is their approach, so yeah.

196
00:10:28.310 --> 00:10:31.751
It's just a refocus, I think,
on the data in the network and not so

197
00:10:31.751 --> 00:10:33.114
much on the state itself.

