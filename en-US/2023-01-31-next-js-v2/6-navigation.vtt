WEBVTT

1
00:00:00.000 --> 00:00:04.278
So now that we have our routes and
stuff, let's talk about navigation.

2
00:00:04.278 --> 00:00:07.248
How do we actually move
between the routes,

3
00:00:07.248 --> 00:00:09.746
how do we actually make that happen?

4
00:00:09.746 --> 00:00:12.294
Is it just an anchor tag or
how does that work?

5
00:00:12.294 --> 00:00:14.595
Well, in order to talk about that,

6
00:00:14.595 --> 00:00:18.370
we should talk about how
Next.j.s handles navigation.

7
00:00:18.370 --> 00:00:20.971
It's doing some pretty crazy
stuff in the background.

8
00:00:20.971 --> 00:00:24.030
And this is why it's nice to have
a framework on top of a framework because

9
00:00:24.030 --> 00:00:25.647
it's doing some pretty crazy stuff.

10
00:00:25.647 --> 00:00:27.858
So let's talk about how
the navigation works in Next.js.

11
00:00:27.858 --> 00:00:30.680
There's a lot of stuff
happening behind the scenes.

12
00:00:30.680 --> 00:00:32.462
It's like a deep delve into this.

13
00:00:32.462 --> 00:00:35.232
I was looking at the source code,
I was talking to people about it.

14
00:00:35.232 --> 00:00:36.770
They're doing some crazy stuff.

15
00:00:36.770 --> 00:00:40.670
It's kind of they use the routes for
everything, it's really insane.

16
00:00:40.670 --> 00:00:42.489
But I kind of like it, it makes sense.

17
00:00:42.489 --> 00:00:47.222
So a route transition is initiated using a
link component or calling router dot push.

18
00:00:47.222 --> 00:00:48.888
We'll talk about some of those things.

19
00:00:48.888 --> 00:00:53.044
The router updates the URL in
the browser's address bar, right, so

20
00:00:53.044 --> 00:00:54.913
the address bar gets updated.

21
00:00:54.913 --> 00:00:59.787
And then the router avoids unnecessary
work by reusing segments that

22
00:00:59.787 --> 00:01:01.730
haven't been changed.

23
00:01:01.730 --> 00:01:03.288
For instance, layouts.

24
00:01:03.288 --> 00:01:05.535
Like I said, layouts don't get changed.

25
00:01:05.535 --> 00:01:10.771
So just use that in a cache from a client
side cache and then basically, it only

26
00:01:10.771 --> 00:01:16.190
renders the things like the pages or
something else that needs data partially.

27
00:01:16.190 --> 00:01:20.226
So only some parts of the page actually
gets rendered when you go to a new route

28
00:01:20.226 --> 00:01:21.565
and not the entire page.

29
00:01:21.565 --> 00:01:24.190
That's happening for you for
free, you're not to do anything.

30
00:01:24.190 --> 00:01:28.688
You just pick your routes, you add your
layouts, and it does that for you for

31
00:01:28.688 --> 00:01:31.094
free, which I think is super powerful.

32
00:01:31.094 --> 00:01:36.546
If the conditions of a soft navigation
are met, which is basically like,

33
00:01:36.546 --> 00:01:40.261
we only kind of gotta change
this one thing over here,

34
00:01:40.261 --> 00:01:45.815
the router fetches the brand new segment
from the cache rather than the server.

35
00:01:45.815 --> 00:01:51.070
So pages themselves actually
get cached on the client side.

36
00:01:51.070 --> 00:01:54.471
And then instead of going back to
get the new page and re-render it,

37
00:01:54.471 --> 00:01:58.648
if it determines that there really wasn't
any changes due to data that you pulled,

38
00:01:58.648 --> 00:02:00.994
it'll be like,
I was gonna get it from cache.

39
00:02:00.994 --> 00:02:02.296
It'll load it instantly.

40
00:02:02.296 --> 00:02:05.380
So all that's happening for you for free
too whatever you try to route somewhere.

41
00:02:06.820 --> 00:02:08.162
If not, if you can't do that,

42
00:02:08.162 --> 00:02:11.677
then it'll just try to actually re-render
the whole component from scratch and

43
00:02:11.677 --> 00:02:14.120
do whatever data pulling that
it needs to do and do that.

44
00:02:16.067 --> 00:02:21.375
If it does have to go to the server, it'll
do this loading UI thing, we'll talk about

45
00:02:21.375 --> 00:02:26.192
that in a minute, and then it'll cache
that for route changes in the future.

46
00:02:26.192 --> 00:02:31.172
So that's a lot of stuff that's happening
whenever you just try to change a route,

47
00:02:31.172 --> 00:02:35.600
which is way different than what
React Router might do or any other thing.

48
00:02:35.600 --> 00:02:38.273
So I wanted that to be exhaustive and
detailed just so

49
00:02:38.273 --> 00:02:43.130
you understand how much work is happening
when you try to navigate with Next.js.

50
00:02:43.130 --> 00:02:44.621
You do not need to know all of this.

51
00:02:44.621 --> 00:02:46.540
It took me a week to figure
out how all that works.

52
00:02:46.540 --> 00:02:48.840
So it's nice,
you don't need to know all that.

53
00:02:48.840 --> 00:02:50.790
But the first thing is
using the link component.

54
00:02:50.790 --> 00:02:54.930
This is the one that's
synonymous to an anchor tag.

55
00:02:54.930 --> 00:02:55.810
So let's talk about that.

56
00:02:55.810 --> 00:02:56.720
So let's make a link component.

57
00:02:57.850 --> 00:03:01.737
So what we can do is, first,
how about we go into,

58
00:03:01.737 --> 00:03:04.800
let's do it here on the homepage here.

59
00:03:06.380 --> 00:03:08.410
Actually, I kind of like the way the
homepage looks, I don't wanna mess it up.

60
00:03:08.410 --> 00:03:09.490
It looks really good.

61
00:03:09.490 --> 00:03:13.416
[LAUGH] Let's go to the contact page here.

62
00:03:13.416 --> 00:03:16.522
I'm gonna delete this layout here and
start it here.

63
00:03:16.522 --> 00:03:18.610
So let's say I want to
link somewhere else.

64
00:03:18.610 --> 00:03:23.389
So the first thing I'm gonna do is,
I'm gonna import a link tag.

65
00:03:23.389 --> 00:03:26.655
Actually I got auto-import here,
so we'll say link.

66
00:03:26.655 --> 00:03:31.766
And you're going to import
link from next slash link.

67
00:03:31.766 --> 00:03:36.300
You already have installed, you don't
have to install, it's already there.

68
00:03:36.300 --> 00:03:37.599
So that's the first thing.

69
00:03:39.672 --> 00:03:41.519
I'm just gonna return a div here.

70
00:03:46.794 --> 00:03:50.118
And just put some stuff here so
we can actually see it, contact.

71
00:03:50.118 --> 00:03:53.303
And then I'm just gonna
make a link tag here.

72
00:03:53.303 --> 00:03:55.122
So I'm gonna say, link,

73
00:03:55.122 --> 00:03:59.767
and I'm gonna make this go to home or
something like that, right?

74
00:03:59.767 --> 00:04:03.613
So I can say link, then, yes Mark?

75
00:04:03.613 --> 00:04:06.761
&gt;&gt; Can you explain what
soft navigation is?

76
00:04:06.761 --> 00:04:10.703
&gt;&gt; I'll try, there's so
much you have to understand.

77
00:04:10.703 --> 00:04:15.396
So soft navigation is, so
there's a concept that

78
00:04:15.396 --> 00:04:20.090
we're gonna talk about
when it comes to caching,

79
00:04:20.090 --> 00:04:25.247
revalidating, and
fetching data on the server side.

80
00:04:25.247 --> 00:04:30.169
Soft navigation is when React determines
that based off of those three things that

81
00:04:30.169 --> 00:04:34.398
not too much has changed, so
therefore it doesn't have to redo work.

82
00:04:34.398 --> 00:04:39.164
So it's only just going to update
the UI without having to refresh

83
00:04:39.164 --> 00:04:43.423
the data because it determined
that not much has changed.

84
00:04:43.423 --> 00:04:47.706
So you might be used to React doing
a reconciliation phase on the front end

85
00:04:47.706 --> 00:04:49.672
where it's using a virtual dom,

86
00:04:49.672 --> 00:04:54.186
it's dirty checking to determine what
components to render on the client.

87
00:04:54.186 --> 00:04:58.670
Okay, it's taking that a step further,
and now it's doing that with,

88
00:04:58.670 --> 00:05:02.780
what data did the component fetch,
and what route did you go to?

89
00:05:02.780 --> 00:05:05.720
What is your revalidation strategy for
that cache?

90
00:05:05.720 --> 00:05:09.989
And that's going to determine that this
one little component gets rendered.

91
00:05:09.989 --> 00:05:12.490
So it's really event.

92
00:05:12.490 --> 00:05:15.348
So soft navigation is like,
yeah, we determined that,

93
00:05:15.348 --> 00:05:18.030
nothing really here has changed.

94
00:05:18.030 --> 00:05:19.620
So we need to put the new
UI on the screen.

95
00:05:19.620 --> 00:05:21.540
So that's a soft navigation.

96
00:05:23.912 --> 00:05:27.349
Okay, so for href,
it's kind of just like an anchor tag.

97
00:05:27.349 --> 00:05:30.372
So I can say go home just like that,
and it'll go home.

98
00:05:32.914 --> 00:05:38.209
All right, so if I do that, go here,
I click on home, it goes home.

99
00:05:39.340 --> 00:05:43.839
And everything on that list
that I just described happened.

100
00:05:48.646 --> 00:05:50.930
But you have to use these
built-in mechanisms.

101
00:05:50.930 --> 00:05:52.560
You have to use the link component.

102
00:05:52.560 --> 00:05:57.462
If you just use an anchor tag and go,
you're still gonna get to the page.

103
00:05:57.462 --> 00:06:00.902
But it's gonna cause a complete
re-render of everything,

104
00:06:00.902 --> 00:06:03.950
a re-fetch of everything,
a reload of everything.

105
00:06:03.950 --> 00:06:08.633
You'll still get there, but it's
the equivalent of just going in here and

106
00:06:08.633 --> 00:06:09.682
hitting enter.

107
00:06:09.682 --> 00:06:13.510
Or if I was at contact and then I just
got rid of this and said, go here,

108
00:06:13.510 --> 00:06:15.366
it's equivalent of doing that.

109
00:06:15.366 --> 00:06:18.230
That's just a refresh of everything,
that's gonna be much slower.

110
00:06:18.230 --> 00:06:21.593
Obviously in this use cache,
it's just as fast cuz I'm a local host,

111
00:06:21.593 --> 00:06:23.876
I'm not fetching any
data to render this page.

112
00:06:23.876 --> 00:06:26.136
But if I was,
it would still be much slower.

113
00:06:33.350 --> 00:06:40.326
Cool, and then if you want to do dynamic
stuff, maybe you wanna link to a blog,

114
00:06:40.326 --> 00:06:45.007
then you just need to interpolate,
nothing crazy.

115
00:06:45.007 --> 00:06:49.310
To do that, you do that,
you can say slash blog and then slash.

116
00:06:49.310 --> 00:06:52.742
If you had a variable here for
a slug, you put that variable there,

117
00:06:52.742 --> 00:06:54.101
it will go there, right?

118
00:06:54.101 --> 00:06:58.551
So you just interpolate, just regular
JavaScript stuff, nothing unique to next,

119
00:06:58.551 --> 00:06:59.310
very simple.

120
00:07:00.850 --> 00:07:04.980
So that's how you would use an anchor tag,
which is called link.

121
00:07:06.120 --> 00:07:09.907
But what if you wanted to
navigate programmatically,

122
00:07:09.907 --> 00:07:15.109
like after some action, somebody did
something so I need to go somewhere?

123
00:07:16.200 --> 00:07:18.353
Well, in order to do that,

124
00:07:18.353 --> 00:07:24.076
you have to use this provided hook
that they give us from the navigation.

125
00:07:24.076 --> 00:07:28.855
But before we do that, we're gonna talk
about something that you thought you were

126
00:07:28.855 --> 00:07:32.468
doing, but you were not doing,
and then we'll dive into it.

