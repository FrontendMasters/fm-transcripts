WEBVTT

1
00:00:00.035 --> 00:00:05.691
We left off last discussing rendering
with server components where

2
00:00:05.691 --> 00:00:11.060
we talked about difference between
server components and SSR.

3
00:00:11.060 --> 00:00:15.548
When to use server components, where you
might confine the RFC or the request for

4
00:00:15.548 --> 00:00:19.772
comments on the original proposal for
server components on the React team,

5
00:00:19.772 --> 00:00:22.693
which I do recommend reading
a lot of context there.

6
00:00:22.693 --> 00:00:24.396
They have some videos and conferences,

7
00:00:24.396 --> 00:00:26.612
conference talks that you
should check out as well.

8
00:00:26.612 --> 00:00:30.253
So, highly recommend it only because
I've looked at them myself and

9
00:00:30.253 --> 00:00:31.393
I've learned a lot.

10
00:00:31.393 --> 00:00:33.801
It's very enlightening.

11
00:00:33.801 --> 00:00:37.396
So, but what about client components?

12
00:00:37.396 --> 00:00:42.040
Well, we talked a lot about client
components, and just to rephrase again.

13
00:00:42.040 --> 00:00:45.161
Client components are just the regular
components that you've been using

14
00:00:45.161 --> 00:00:46.309
this whole time and React.

15
00:00:46.309 --> 00:00:47.759
And that's basically it.

16
00:00:47.759 --> 00:00:50.358
They are now officially
called client components.

17
00:00:50.358 --> 00:00:51.834
That's the official name.

18
00:00:51.834 --> 00:00:55.107
And I think having that distinction
actually makes it easier,

19
00:00:55.107 --> 00:00:59.057
because I remember when I was learning
Next.js, or even before Next.js,

20
00:00:59.057 --> 00:01:03.009
I remember figuring out how to make
service site rendering with React before

21
00:01:03.009 --> 00:01:04.453
there was even a Next.js.

22
00:01:04.453 --> 00:01:08.169
It was very confusing to think about
where a component was gonna be rendered,

23
00:01:08.169 --> 00:01:11.332
and when it was gonna be rendered and
how it was gonna be rendered?

24
00:01:11.332 --> 00:01:14.845
And there was this whole concept of
universal JavaScript and it was like,

25
00:01:14.845 --> 00:01:17.350
I don't know when this
component's gonna happen.

26
00:01:17.350 --> 00:01:20.429
Well, now there's a client component,
and there's a server component.

27
00:01:20.429 --> 00:01:24.713
So it's a lot easier to think about as far
as like the context in which these things

28
00:01:24.713 --> 00:01:25.534
are gonna run.

29
00:01:25.534 --> 00:01:28.087
There's still definitely some
complications around it and

30
00:01:28.087 --> 00:01:31.741
frameworks like Next.js aim to solve those
complications or make it less difficult,

31
00:01:31.741 --> 00:01:33.658
but at least there's a distinction around.

32
00:01:33.658 --> 00:01:35.946
This is a client component,
this is a server component.

33
00:01:35.946 --> 00:01:40.441
So, I'm also very curious to see what
other frameworks do now that React has

34
00:01:40.441 --> 00:01:43.193
done client component, server components.

35
00:01:43.193 --> 00:01:46.627
I think other frameworks might follow
as well just like they did with hooks.

36
00:01:46.627 --> 00:01:47.783
So, we'll see,

37
00:01:47.783 --> 00:01:52.571
I think there's gonna be a big change
in JavaScript ecosystem entirely.

38
00:01:52.571 --> 00:01:54.436
But yeah, client components.

39
00:01:54.436 --> 00:01:55.936
I have an example of how to use them.

40
00:01:55.936 --> 00:01:56.978
But in reality, like I said,

41
00:01:56.978 --> 00:01:58.999
they're literally the same
thing you've always used.

42
00:01:58.999 --> 00:02:01.602
You just have to add
use clients at the top.

43
00:02:01.602 --> 00:02:04.130
That's it,
there's nothing else different about them.

44
00:02:04.130 --> 00:02:06.131
That's literally all you have to do.

45
00:02:06.131 --> 00:02:08.396
And it's the exact same
stuff you've been doing.

46
00:02:08.396 --> 00:02:13.305
So in the case of Next.js, those client
components can still be rendered on

47
00:02:13.305 --> 00:02:18.384
the server statically, dynamically,
but they're not server components.

48
00:02:18.384 --> 00:02:21.313
They're just client components
rendered on the server.

49
00:02:21.313 --> 00:02:25.715
They don't support a sync data fetching,
they still can use client side API's

50
00:02:25.715 --> 00:02:29.197
inside of them like hooks and
use effects and things like that,

51
00:02:29.197 --> 00:02:32.829
because they're eventually going
to be hydrated on the client.

52
00:02:32.829 --> 00:02:37.621
And taken over so, they are still actually
client components here's getting that

53
00:02:37.621 --> 00:02:42.139
initial HTML on the server which is not
the same as server components that never

54
00:02:42.139 --> 00:02:46.110
leave the server, they always stay there,
they can't have state,

55
00:02:46.110 --> 00:02:49.556
they can do async data fetching,
they have access to code.

56
00:02:49.556 --> 00:02:52.833
They're actually being
executed on the server, right?

57
00:02:52.833 --> 00:02:55.039
Versus just the HTML being rendered.

58
00:02:57.414 --> 00:02:59.338
So, when would you use client components?

59
00:02:59.338 --> 00:03:02.359
Basically, if your components need hooks,
like useState and

60
00:03:02.359 --> 00:03:04.641
useEffect, then you need
a client component.

61
00:03:04.641 --> 00:03:08.709
You literally cannot use a server
component with those things.

62
00:03:08.709 --> 00:03:16.053
So, if I try to go into the server
component here, let's go back here.

63
00:03:16.053 --> 00:03:19.764
So, notice in his homepage,
we don't have use client anywhere,

64
00:03:19.764 --> 00:03:22.495
so by default this should
be a server component.

65
00:03:22.495 --> 00:03:27.381
So, if I tried to say, useState,

66
00:03:27.381 --> 00:03:34.120
let's import useState here,
and I say state,

67
00:03:34.120 --> 00:03:39.526
setState equals useState like this.

68
00:03:39.526 --> 00:03:41.092
I just saved that.

69
00:03:41.092 --> 00:03:46.521
Then I go back and right here,
medially because I didn't even refresh,

70
00:03:46.521 --> 00:03:48.843
we already got there, right?

71
00:03:48.843 --> 00:03:52.691
And you can see right here, you're
importing a component that needs useState.

72
00:03:52.691 --> 00:03:55.244
It only works in a client component.

73
00:03:55.244 --> 00:03:57.964
But none of its parents
are marked with use client.

74
00:03:57.964 --> 00:03:59.552
So their server components by default.

75
00:04:00.753 --> 00:04:04.463
So you kind of get an error right here,
from the React compiler,

76
00:04:04.463 --> 00:04:06.398
the tool that's running React.

77
00:04:06.398 --> 00:04:09.757
Yeah, you can't use this,
because how would it work?

78
00:04:09.757 --> 00:04:12.080
There's no state on the server.

79
00:04:12.080 --> 00:04:13.231
It's not rendering.

80
00:04:13.231 --> 00:04:15.494
There's no reconciliation phase.

81
00:04:15.494 --> 00:04:19.833
There's no dirty checking, there's none of
that client side optimization happening on

82
00:04:19.833 --> 00:04:22.354
the server so
which is what the hook was created for.

83
00:04:22.354 --> 00:04:23.618
So, yeah.

84
00:04:23.618 --> 00:04:26.124
You also can't use class components for
server components.

85
00:04:26.124 --> 00:04:28.758
So, if you are still
using class components,

86
00:04:28.758 --> 00:04:33.159
those have to be client components,
because they don't work on the server.

87
00:04:33.159 --> 00:04:35.198
I don't know if that's in the doc
somewhere, but I just ran into that.

88
00:04:35.198 --> 00:04:38.799
I just happened to try it and
I was like, yeah, these don't work.

89
00:04:38.799 --> 00:04:41.827
So yeah, you will get this error a lot.

90
00:04:41.827 --> 00:04:44.827
So, don't rely on the error though.

91
00:04:44.827 --> 00:04:47.466
Remember, if you need a hook,
it's probably a client.

92
00:04:47.466 --> 00:04:49.486
If you need a DOM event,
it's probably a client.

93
00:04:49.486 --> 00:04:51.614
Other than that, it's a server.

94
00:04:51.614 --> 00:04:56.083
&gt;&gt; Based on this, I might be
misreading the error message, but

95
00:04:56.083 --> 00:04:59.591
does this imply then
that any child component,

96
00:04:59.591 --> 00:05:05.642
all of the component that has use client
as that directive will kind of by default,

97
00:05:05.642 --> 00:05:08.907
the opposite into rendering on the client?

98
00:05:08.907 --> 00:05:13.010
&gt;&gt; It's going to look for the nearest
parent with the use client, right?

99
00:05:13.010 --> 00:05:18.804
So, if you can add a server
component to a client component,

100
00:05:18.804 --> 00:05:25.291
as long as server component is
wrapped in a client component [LAUGH].

101
00:05:25.291 --> 00:05:29.049
Right, so, I can't bring a server
component directly into a client component

102
00:05:29.049 --> 00:05:31.301
without it first being wrapped in one,
right?

103
00:05:31.301 --> 00:05:33.662
So, we can run through some
of these examples here, but

104
00:05:33.662 --> 00:05:35.321
let me get through this last bit I got and

105
00:05:35.321 --> 00:05:38.305
then we can run through how to
interchange some of those differently.

106
00:05:38.305 --> 00:05:40.059
So you can see the different
error message,

107
00:05:40.059 --> 00:05:42.488
because sometimes error messages are like,
I don't know.

108
00:05:42.488 --> 00:05:45.712
But yeah, we'll see, okay.

109
00:05:45.712 --> 00:05:47.629
Good question, though, okay?

110
00:05:47.629 --> 00:05:49.640
So, when to use client versus server.

111
00:05:49.640 --> 00:05:52.373
So I already talked about when to
use clients, when to use servers.

112
00:05:52.373 --> 00:05:55.608
Now, I'm going to compare the two, but
it's mostly the same, but always use

113
00:05:55.608 --> 00:05:59.108
server components for all your components
unless it falls into one or more of these.

114
00:05:59.108 --> 00:06:03.847
It needs interactivity or
event listeners, like onClick, onChange.

115
00:06:03.847 --> 00:06:08.806
It uses state and lifecycle effects,
useState( ), useReducer( ), useEffect( ).

116
00:06:08.806 --> 00:06:11.004
It uses browser-only APIs.

117
00:06:11.004 --> 00:06:14.928
It needs custom hooks that
depend on state, effects, or

118
00:06:14.928 --> 00:06:18.866
browser-only APIs, and
then React class components.

119
00:06:18.866 --> 00:06:22.919
Again, that's the only reason why you
would ever use client components.

120
00:06:22.919 --> 00:06:27.080
I think the only other ones I could
think of that's i guess if you were

121
00:06:27.080 --> 00:06:30.876
using something like Chakra,
some third party library, and

122
00:06:30.876 --> 00:06:35.329
you really wanted to use it, and
they just haven't updated it to work for

123
00:06:35.329 --> 00:06:39.793
server and client, then you have to
use client components for that too.

124
00:06:39.793 --> 00:06:41.036
But that's just a lot more tedious.

125
00:06:41.036 --> 00:06:44.592
You actually have to, every one of those
components you have to use, you have to

126
00:06:44.592 --> 00:06:47.690
wrap in your own client component
that just returns that component.

127
00:06:47.690 --> 00:06:49.196
Just to put the use client at the top.

128
00:06:49.196 --> 00:06:52.805
So, I'm pretty sure someone's gonna
make a tool that does that for people

129
00:06:52.805 --> 00:06:56.838
automatically, so they don't have to do
it, because that just sounds annoying.

130
00:06:56.838 --> 00:06:58.883
So, they actually wanted to do that.

131
00:06:58.883 --> 00:07:02.619
So, if anybody wants to make something
make that, it'll be very helpful.

132
00:07:02.619 --> 00:07:06.085
So, it's like use this babel plugin to
wrap third party libraries with the use

133
00:07:06.085 --> 00:07:09.306
client, and it just works by default
that actually really cool, okay.

134
00:07:09.306 --> 00:07:11.205
Let's run through some examples, okay.

135
00:07:13.889 --> 00:07:19.121
One thing you might not know is that we
could just make a new folder on the and

136
00:07:19.121 --> 00:07:21.270
let's say we call it components.

137
00:07:21.270 --> 00:07:24.127
You can use server and
client components in this folder too,

138
00:07:24.127 --> 00:07:28.049
not because it's called components, but
because they're eventually going to be

139
00:07:28.049 --> 00:07:31.818
imported in the app directory, which
supports server and client components.

140
00:07:31.818 --> 00:07:34.376
So your components don't have
to live in the app directory.

141
00:07:34.376 --> 00:07:38.494
They just eventually have to be pulled in
here eventually through another component

142
00:07:38.494 --> 00:07:39.191
or directly.

143
00:07:39.191 --> 00:07:43.746
And that's how they are able to have
access to server and client components.

144
00:07:43.746 --> 00:07:48.578
Whereas, if they were imported
in the pages directory,

145
00:07:48.578 --> 00:07:53.510
they would not be able to do server and
client components,

146
00:07:53.510 --> 00:07:56.833
they would instead use Next.js 12,

147
00:07:56.833 --> 00:08:01.681
which does get service props and
get static props, yes.

148
00:08:01.681 --> 00:08:03.200
So, that's the difference.

149
00:08:03.200 --> 00:08:07.547
So, highly recommend only using
the pages directory for the API,

150
00:08:07.547 --> 00:08:11.435
not the pages, and
use the app directory for all the pages.

151
00:08:11.435 --> 00:08:15.547
If you're using Next.js 13, reason 12,
you will never even use the app directory.

152
00:08:15.547 --> 00:08:17.053
You will only use the pages directory.

153
00:08:23.576 --> 00:08:24.829
Okay, so let's see some examples.

154
00:08:24.829 --> 00:08:27.954
So for components,
let's make a server component here.

155
00:08:27.954 --> 00:08:32.256
So, we'll make a component,
that's like a header.

156
00:08:32.256 --> 00:08:33.918
All right, so we have a header here.

157
00:08:38.638 --> 00:08:43.053
Something like this, Whoops.

158
00:08:45.036 --> 00:08:47.028
I got a header here.

159
00:08:47.028 --> 00:08:50.145
And it's nothing special,
it's just a header.

160
00:08:50.145 --> 00:08:52.948
Like that and some logo or
something like that, right?

161
00:08:52.948 --> 00:08:56.811
So, I didn't put use client, so
by default this is gonna be a server.

162
00:08:56.811 --> 00:08:58.619
I didn't put use client, right?

163
00:08:58.619 --> 00:09:03.669
So now, if I want to bring this into any
other component in the app directory,

164
00:09:03.669 --> 00:09:11.903
let's say page,
I can just import it, Like that.

165
00:09:11.903 --> 00:09:18.105
And then I can just add it here, wherever
I want, just like any other component.

166
00:09:18.105 --> 00:09:21.614
It's no different, there we go.

167
00:09:25.729 --> 00:09:27.184
And I can go check it out.

168
00:09:30.955 --> 00:09:32.477
I still have you stayed in there.

169
00:09:32.477 --> 00:09:35.387
Yeah, I do, sorry.

170
00:09:35.387 --> 00:09:36.432
There we go.

171
00:09:36.432 --> 00:09:37.257
So there you go.

172
00:09:37.257 --> 00:09:40.356
There is our logo with our header,
it's there.

173
00:09:40.356 --> 00:09:45.559
So, importing a server component into
another server component, it just works.

174
00:09:45.559 --> 00:09:48.020
You don't have to do anything about it.

175
00:09:48.020 --> 00:09:50.865
Now, let's say I make
the header a client component.

176
00:09:50.865 --> 00:09:54.090
So, i'm going to go to the header and
I'm going to say, use client.

177
00:09:54.090 --> 00:09:55.579
All right, let's try that.

178
00:09:55.579 --> 00:09:58.101
Now, what happens if I refresh this?

179
00:09:58.101 --> 00:09:59.840
Nothing, it still works.

180
00:09:59.840 --> 00:10:04.139
What's actually happening in
the background is that this component's

181
00:10:04.139 --> 00:10:07.459
actually being hydrated and
filled in on the front end.

182
00:10:07.459 --> 00:10:10.145
You just can't see it because it's
a small component that's not doing any

183
00:10:10.145 --> 00:10:10.749
data fetching.

184
00:10:10.749 --> 00:10:11.775
So it just happens instantly.

185
00:10:11.775 --> 00:10:15.932
And I'm a local host, but
if this component was fetching data and

186
00:10:15.932 --> 00:10:21.013
I wasn't on local host, it would pop in
much later than the rest of the page did.

187
00:10:21.013 --> 00:10:25.275
So, because it's a client component, okay?

188
00:10:25.275 --> 00:10:28.142
So, another example is what if
we use a client component, or

189
00:10:28.142 --> 00:10:31.190
what if we use a server component
in a client component, right?

190
00:10:31.190 --> 00:10:32.039
So, let's try that.

191
00:10:32.039 --> 00:10:35.409
So let's make another server component
inside our components folder.

192
00:10:35.409 --> 00:10:41.513
And we'll call this HeaderLink,
something like that.

193
00:10:41.513 --> 00:10:46.411
All right, so we say HeaderLink,
It's gonna copy this.

194
00:10:46.411 --> 00:10:51.559
That HeaderLink, and
it's just gonna be a div.

195
00:10:54.589 --> 00:10:58.401
Just header link.

196
00:10:58.401 --> 00:10:59.625
And then we'll make it a server component.

197
00:10:59.625 --> 00:11:01.476
So, I'll get rid of
these clients like that.

198
00:11:04.000 --> 00:11:08.125
And then I'm going to import it into our
client component which is the header,

199
00:11:08.125 --> 00:11:09.511
let's see what happens.

200
00:11:13.263 --> 00:11:16.756
So, your HeaderLink here.

201
00:11:21.100 --> 00:11:21.938
And I'm going to save it.

202
00:11:21.938 --> 00:11:22.999
So before I go, refresh,

203
00:11:22.999 --> 00:11:25.959
anyone want to guess what they think
is going to happen if I try to do this?

204
00:11:30.213 --> 00:11:34.887
&gt;&gt; It'll get rendered on the client
because it's immediate parent is

205
00:11:34.887 --> 00:11:35.878
a client app.

206
00:11:35.878 --> 00:11:38.059
Unless I'm totally wrong.

207
00:11:38.059 --> 00:11:39.919
&gt;&gt; That's logical.

208
00:11:39.919 --> 00:11:41.325
Yeah, that makes sense.

209
00:11:41.325 --> 00:11:43.241
Anyone else wanna try?

210
00:11:43.241 --> 00:11:45.430
I'm not saying you're wrong.

211
00:11:45.430 --> 00:11:47.722
Just wanna know if anyone
had any other thoughts.

212
00:11:47.722 --> 00:11:49.384
&gt;&gt; That's what I would've guessed as well.

213
00:11:49.384 --> 00:11:52.690
&gt;&gt; Yeah, okay, let's see what happens.

214
00:11:52.690 --> 00:11:53.960
Yeah, it's exactly what happens.

215
00:11:53.960 --> 00:11:58.212
Yeah, it handles that for you,
because it's immediate parent is a client.

216
00:11:58.212 --> 00:12:00.249
So it kinda just works out.

217
00:12:00.249 --> 00:12:01.749
And these examples are trivial.

218
00:12:01.749 --> 00:12:06.065
But once we get into like fetching data,
and you see how we can load them in and

219
00:12:06.065 --> 00:12:08.966
parallel or after each other and
things like that,

220
00:12:08.966 --> 00:12:13.765
it's gonna start making more sense because
we're not fetching any data right now.

221
00:12:13.765 --> 00:12:17.862
This is all just like why we just make all
this stuff servers just like read only

222
00:12:17.862 --> 00:12:20.006
data, but once we start fetching data,

223
00:12:20.006 --> 00:12:24.388
you'll see the intention behind this whole
new concept of server versus client.

224
00:12:24.388 --> 00:12:26.529
Because that's what it comes
down to is fetching data and

225
00:12:26.529 --> 00:12:28.593
how much JavaScript you're
sitting to the front end.

226
00:12:28.593 --> 00:12:30.812
That's really what all this is about and

227
00:12:30.812 --> 00:12:34.662
then also just like taking advantage
of Async React using suspense and

228
00:12:34.662 --> 00:12:38.967
stuff like that, which I think a lot of
people just haven't taken advantage of

229
00:12:38.967 --> 00:12:42.838
because it's quite honestly,
really hard to wrap your head around.

230
00:12:42.838 --> 00:12:47.646
So, Next.js also has a really good
guide in their documentation on common

231
00:12:47.646 --> 00:12:51.080
pitfalls to look out for
when you're trying to import

232
00:12:51.080 --> 00:12:54.845
a client component in the server
component or vice versa.

233
00:12:54.845 --> 00:12:58.627
They're really weird use
case ones to check out.

234
00:12:58.627 --> 00:13:00.307
So, check them out if you want to.

