WEBVTT

1
00:00:00.000 --> 00:00:07.542
So how about we go into, let's go into
the page here, the homepage here.

2
00:00:07.542 --> 00:00:13.838
And I'm just gonna add,
I wanna add one of these.

3
00:00:13.838 --> 00:00:14.708
It looks really cool.

4
00:00:14.708 --> 00:00:17.869
So I'm gonna add one of
those in the homepage.

5
00:00:17.869 --> 00:00:21.310
I think it's one of these divs here.

6
00:00:21.310 --> 00:00:23.233
Let me just collapse these.

7
00:00:23.233 --> 00:00:24.252
Yeah, it's just one of these divs.

8
00:00:24.252 --> 00:00:27.167
I'm just gonna copy this div,
just add it underneath it.

9
00:00:27.167 --> 00:00:32.012
And I'm just gonna get rid of
this anchor tag, and instead,

10
00:00:32.012 --> 00:00:37.342
I'm gonna add, actually, yeah,
let's make it a div, I guess.

11
00:00:37.342 --> 00:00:38.237
So let's make it a div.

12
00:00:43.766 --> 00:00:45.525
And get rid of that, rid of that.

13
00:00:45.525 --> 00:00:50.022
So now if I wanted to navigate
this programmatically,

14
00:00:50.022 --> 00:00:53.453
I must have copied way more than just one.

15
00:00:53.453 --> 00:00:55.885
[LAUGH] Yeah, I added a bunch of them.

16
00:00:55.885 --> 00:00:56.700
&gt;&gt; You got the row, it's all good.

17
00:00:56.700 --> 00:00:58.099
&gt;&gt; I copied the whole row.

18
00:00:58.099 --> 00:00:59.412
That's funny.

19
00:00:59.412 --> 00:01:00.950
Let me just delete that, that's confusing.

20
00:01:03.564 --> 00:01:06.184
There we go,
I'll just talk about it this way.

21
00:01:06.184 --> 00:01:08.680
All right, so
if I wanted to route programmatically,

22
00:01:11.139 --> 00:01:15.299
You have to understand what
a client component is, all right?

23
00:01:15.299 --> 00:01:17.634
So remember I told you last time,
I was like,

24
00:01:17.634 --> 00:01:21.337
you think this component is doing
something, but it's actually not.

25
00:01:21.337 --> 00:01:24.236
So if anyone has used Node before,
I'm gonna do something and

26
00:01:24.236 --> 00:01:26.312
you're gonna be like, what are you doing?

27
00:01:26.312 --> 00:01:29.849
That looks crazy, okay, so,

28
00:01:32.939 --> 00:01:37.921
What do you think would happen
if I try to import some Node

29
00:01:37.921 --> 00:01:41.217
specific library into a React file?

30
00:01:41.217 --> 00:01:44.388
What would you expect to happen?

31
00:01:44.388 --> 00:01:46.224
Like file system.

32
00:01:46.224 --> 00:01:47.916
&gt;&gt; Typescript will complain.

33
00:01:47.916 --> 00:01:53.421
&gt;&gt; Typescript might complain,
let's see, import, fs from fs,

34
00:01:53.421 --> 00:01:57.682
typescript says, that's cool, it's cool.

35
00:02:01.227 --> 00:02:02.947
What do you think might
happen if I run this?

36
00:02:06.044 --> 00:02:11.034
Lets see, so
if I go to contact, Come here.

37
00:02:12.725 --> 00:02:15.254
I rendered, that's crazy.

38
00:02:15.254 --> 00:02:17.449
How did I do that?

39
00:02:17.449 --> 00:02:19.476
There's no fs on the browser.

40
00:02:19.476 --> 00:02:21.360
Did it just get rid of it?

41
00:02:21.360 --> 00:02:22.653
Did it bundle it out?

42
00:02:22.653 --> 00:02:24.745
What's actually going on here, right?

43
00:02:24.745 --> 00:02:29.173
So in Next.js 12,
what would happen is you had

44
00:02:29.173 --> 00:02:32.849
the ability to do get server side props.

45
00:02:32.849 --> 00:02:33.710
You can do stuff like this.

46
00:02:33.710 --> 00:02:39.334
You can say export something like const

47
00:02:39.334 --> 00:02:44.794
getServerSideProps here like this.

48
00:02:44.794 --> 00:02:48.199
And then you can do all types
of Node.js stuff in here.

49
00:02:48.199 --> 00:02:53.026
And you can import stuff at the top,
Node.js stuff, and you can use it in here.

50
00:02:53.026 --> 00:02:56.441
And Next did a really good job
of splitting out your browser

51
00:02:56.441 --> 00:02:59.099
code from the Node code up here and
down here.

52
00:02:59.099 --> 00:03:00.939
It split it out and
made different bundles.

53
00:03:00.939 --> 00:03:02.677
Okay, that's not what's happening here.

54
00:03:02.677 --> 00:03:05.252
Because we don't have this code anymore,
you can't do this in the app directory.

55
00:03:05.252 --> 00:03:07.335
It only works in the pages directory.

56
00:03:07.335 --> 00:03:10.637
So what's actually happening here is that
these components are actually server

57
00:03:10.637 --> 00:03:11.227
components.

58
00:03:11.227 --> 00:03:13.016
They're not client components.

59
00:03:13.016 --> 00:03:15.878
These components aren't
rendering on the browser at all.

60
00:03:15.878 --> 00:03:17.195
They have no interactivity.

61
00:03:17.195 --> 00:03:20.233
In fact, the JavaScript from these
components aren't even being shipped to

62
00:03:20.233 --> 00:03:20.802
the browser.

63
00:03:20.802 --> 00:03:22.501
It's just pure HTML.

64
00:03:22.501 --> 00:03:25.361
So all the jobs here that we've written so

65
00:03:25.361 --> 00:03:29.621
far in the app directory is not
being sent to the client at all.

66
00:03:29.621 --> 00:03:34.628
But we still get to use React by default,
which is way different than if you did

67
00:03:34.628 --> 00:03:39.501
create React app, whereas all that
JavaScript is gonna be in the browser.

68
00:03:39.501 --> 00:03:44.377
It's also different than SSR, whereas you
would render it on the server, but then

69
00:03:44.377 --> 00:03:49.268
the client will still pick up and match it
and take over, so the code is still there.

70
00:03:49.268 --> 00:03:51.607
So this whole time,
we've been doing server components,

71
00:03:51.607 --> 00:03:53.211
which you'll find out is really crazy.

72
00:03:53.211 --> 00:03:55.559
So that's why we're able to do
something like the file system.

73
00:03:55.559 --> 00:03:59.617
So there's nothing stopping me from
using a file system in here and

74
00:03:59.617 --> 00:04:02.742
getting files in and
rendering them, yes, Mark.

75
00:04:02.742 --> 00:04:06.669
&gt;&gt; These link components,

76
00:04:06.669 --> 00:04:12.279
can we use nested relative routes?

77
00:04:12.279 --> 00:04:18.232
So if you go to contact and you have
components underneath or whatever.

78
00:04:18.232 --> 00:04:20.624
&gt;&gt; I see, they're relative to the root.

79
00:04:20.624 --> 00:04:24.839
So the link components href is not
relative to where the link component is

80
00:04:24.839 --> 00:04:27.962
written, they're relative
to the root of your app.

81
00:04:27.962 --> 00:04:31.784
So it's always gonna be the root
of your app slash whatever.

82
00:04:31.784 --> 00:04:33.959
So yeah, it's not relative
to where they're written.

83
00:04:36.385 --> 00:04:39.003
Okay, yeah, so server components.

84
00:04:39.003 --> 00:04:41.038
[LAUGH] We're gonna dive
into that a little more.

85
00:04:41.038 --> 00:04:45.144
So I need to tell you that because
now if we want to use that router,

86
00:04:45.144 --> 00:04:52.451
we have to say, you know what,
this is now, A client component.

87
00:04:52.451 --> 00:04:54.966
We have to add this directive to the top.

88
00:04:54.966 --> 00:04:58.797
I think this directive to the top of any
component makes it a client component,

89
00:04:58.797 --> 00:05:03.044
which is a standard component that you've
been using with React pretty much forever.

90
00:05:03.044 --> 00:05:09.149
But Next.js, by default, makes all the
components server components, all right?

91
00:05:09.149 --> 00:05:11.417
So we got a client component here.

92
00:05:11.417 --> 00:05:15.391
And then now we have a client component.

93
00:05:15.391 --> 00:05:16.863
We can use, where is it?

94
00:05:16.863 --> 00:05:18.430
This thing, the useRouter thing.

95
00:05:18.430 --> 00:05:19.637
So we can do that.

96
00:05:19.637 --> 00:05:20.925
We can come in here.

97
00:05:20.925 --> 00:05:22.708
We can say useRouter.

98
00:05:22.708 --> 00:05:29.701
We can get the router from useRouter,
like this.

99
00:05:29.701 --> 00:05:35.307
And then now there's methods on here
like router.push, router.replace.

100
00:05:35.307 --> 00:05:37.760
Those are the methods you
wanna use to navigate, right?

101
00:05:37.760 --> 00:05:42.154
So if I had a button here,
I said button and

102
00:05:42.154 --> 00:05:46.171
then onClick, like this, onClick,

103
00:05:46.171 --> 00:05:52.682
I want to, Run this function like this.

104
00:05:52.682 --> 00:06:00.043
It says router.push,
not prefetch, push, and go home.

105
00:06:00.043 --> 00:06:01.670
And then I can say home.

106
00:06:04.022 --> 00:06:05.048
Like that.

107
00:06:09.246 --> 00:06:11.038
And if I go home, it goes home.

108
00:06:11.038 --> 00:06:13.493
So that's the programmatic routing, but

109
00:06:13.493 --> 00:06:16.297
you can only do that if
it's a client component.

110
00:06:16.297 --> 00:06:20.919
Why do you think you can only
use a router that manipulates

111
00:06:20.919 --> 00:06:25.548
a URL on the client component and
not a server component?

112
00:06:25.548 --> 00:06:27.190
You might not know a lot about the two,

113
00:06:27.190 --> 00:06:29.818
but think about the two different
environments they run in.

114
00:06:31.545 --> 00:06:33.172
Yes.
&gt;&gt; My one guess is that when you

115
00:06:33.172 --> 00:06:36.814
have the client component,
you can have access to the window.

116
00:06:36.814 --> 00:06:37.811
&gt;&gt; Exactly.
&gt;&gt; Or object.

117
00:06:37.811 --> 00:06:39.108
&gt;&gt; Yeah, you have access to the window.

118
00:06:39.108 --> 00:06:46.413
This router thing, it's literally
using window.location, right?

119
00:06:46.413 --> 00:06:50.976
It's window.location and
all this stuff on here to create a router.

120
00:06:50.976 --> 00:06:53.505
That doesn't exist on the server,
so you can't.

121
00:06:53.505 --> 00:06:56.328
It's like,
I don't know what to do with that.

122
00:06:56.328 --> 00:06:58.183
So you have this client side router.

123
00:06:58.183 --> 00:07:01.708
So yeah, there are times where
you have to do client side stuff,

124
00:07:01.708 --> 00:07:03.808
and we'll get to that in more detail.

125
00:07:03.808 --> 00:07:08.362
But yeah, the big reveal is you've been
writing server components the whole time,

126
00:07:08.362 --> 00:07:12.675
and there's no JavaScript front end for
any of that for free, you did nothing.

127
00:07:12.675 --> 00:07:15.653
It just happened, which I think is insane.

128
00:07:15.653 --> 00:07:20.736
Because most of you can tell when
that happens, was like, this is just

129
00:07:20.736 --> 00:07:26.401
some static thing, but no, you can't
really tell, so that was pretty powerful.

130
00:07:26.401 --> 00:07:30.961
And the only thing Next.js did
there was enable that by default.

131
00:07:30.961 --> 00:07:32.927
React is responsible for
server components.

132
00:07:32.927 --> 00:07:34.635
That's something that they created.

133
00:07:34.635 --> 00:07:36.994
They created this directive called
use client and all this stuff.

134
00:07:36.994 --> 00:07:39.817
It's React that's making this stuff.

135
00:07:39.817 --> 00:07:43.889
Next.js has adopted it really quickly and
it was like, let's turn it on

136
00:07:43.889 --> 00:07:48.650
by default because you should have it by
default, default for free optimizations.

137
00:07:48.650 --> 00:07:51.667
Opt out when you don't need it and
not the other way around.

138
00:07:51.667 --> 00:07:54.222
So that's what they're doing.

139
00:07:54.222 --> 00:07:58.707
&gt;&gt; You said the use client is new to
version 13 or that's been present.

140
00:07:58.707 --> 00:08:00.507
&gt;&gt; It's new to React 18.

141
00:08:00.507 --> 00:08:02.379
Yep, it's new to React 18, yeah.

142
00:08:06.796 --> 00:08:08.260
Yeah, React documentation.

143
00:08:08.260 --> 00:08:11.588
Next.js has really good documentation
on all of this, but React also has,

144
00:08:11.588 --> 00:08:13.618
I think I have a link to it in here,
let's see.

145
00:08:13.618 --> 00:08:14.976
Well, I think it's on the next slide.

146
00:08:14.976 --> 00:08:19.858
I have a link to like the RFC where
all this was introduced, yeah, yes.

147
00:08:19.858 --> 00:08:23.412
&gt;&gt; Scott, for client components,
are those never rendered on the server or

148
00:08:23.412 --> 00:08:25.659
are those just also
rerendered on the client?

149
00:08:25.659 --> 00:08:26.798
&gt;&gt; Good question, so

150
00:08:26.798 --> 00:08:30.579
question was are client components
never rendered on server?

151
00:08:30.579 --> 00:08:31.747
Here's where it gets confusing.

152
00:08:31.747 --> 00:08:36.361
[LAUGH] So because Next.js also has
different rendering modes outside of

153
00:08:36.361 --> 00:08:39.839
different types of components
as in they have static,

154
00:08:39.839 --> 00:08:44.165
they have server side rendering,
and they have client rendering.

155
00:08:44.165 --> 00:08:49.286
A client component can still be
rendered on the server through SSR.

156
00:08:49.286 --> 00:08:51.898
But that is not the same
thing as a server component.

157
00:08:51.898 --> 00:08:53.592
And we're gonna talk about
difference between the two.

158
00:08:53.592 --> 00:08:58.297
So yes, our client component will still
need to make sure that it might pass

159
00:08:58.297 --> 00:09:01.071
through a server environment at one point.

160
00:09:01.071 --> 00:09:04.986
So hard coding window at the top of
your client file might actually break

161
00:09:04.986 --> 00:09:09.500
versus putting it in a hook where it only
gets ran when it's actually in a browser.

162
00:09:09.500 --> 00:09:11.547
So you still have to do stuff like that.

163
00:09:11.547 --> 00:09:12.934
Is type of window undefined or

164
00:09:12.934 --> 00:09:16.766
something like that, depending on the mode
that you're telling Next.js to do.

165
00:09:16.766 --> 00:09:23.497
But that is not the same as a server
component that never touches the client.

166
00:09:23.497 --> 00:09:25.888
And yeah,
it does something called streaming,

167
00:09:25.888 --> 00:09:28.936
which is way different than what
server side rendering does.

168
00:09:28.936 --> 00:09:33.875
Yeah, so the question was, I don't have
to make an entire page a client component

169
00:09:33.875 --> 00:09:38.117
just because one thing in there needs
access to something on a client.

170
00:09:38.117 --> 00:09:40.769
Instead, I can just make it the one thing,
in this case,

171
00:09:40.769 --> 00:09:43.777
the button the client component,
and that's actually a fact.

172
00:09:43.777 --> 00:09:46.010
Not only is it a fact that
is the recommended way.

173
00:09:46.010 --> 00:09:49.516
That's called pushing the client
components far down the tree as you

174
00:09:49.516 --> 00:09:53.397
possibly can to a leaf, make them leaf
components so that you can maintain.

175
00:09:53.397 --> 00:09:58.175
If you think about anything that's
a server component never gets shipped to

176
00:09:58.175 --> 00:09:59.080
the browser.

177
00:09:59.080 --> 00:10:02.543
So it's in your best interest to make the
biggest components server components and

178
00:10:02.543 --> 00:10:06.054
the smallest components client components
cuz those are the ones that get shipped to

179
00:10:06.054 --> 00:10:06.658
the browser.

180
00:10:06.658 --> 00:10:11.587
So it's really a different way of
thinking about how you build React apps.

181
00:10:11.587 --> 00:10:14.838
Cuz I think in the past,
you have these pace components or

182
00:10:14.838 --> 00:10:18.994
these layout components that fetch data,
and they pass the props down.

183
00:10:18.994 --> 00:10:23.077
And you have these UI components, they
just receive props and they're stateless.

184
00:10:23.077 --> 00:10:24.951
It's gonna be different now.

185
00:10:24.951 --> 00:10:28.045
[LAUGH] You're gonna have small
components that do one thing.

186
00:10:28.045 --> 00:10:31.944
They fetch the data, they use this
thing and their client components.

187
00:10:31.944 --> 00:10:35.318
And you don't want to I think
what Next.js calls it poison,

188
00:10:35.318 --> 00:10:39.552
you don't wanna poison your server
components by having it just like,

189
00:10:39.552 --> 00:10:42.014
I gotta make this a whole
client component.

190
00:10:42.014 --> 00:10:45.993
Cuz this one button down here my JSX
needs accesses something on a client.

191
00:10:45.993 --> 00:10:48.244
It's like, well, why don't you make
that a component and abstract it away?

192
00:10:48.244 --> 00:10:50.062
And then we don't have
to worry about that.

193
00:10:50.062 --> 00:10:51.387
Because as you'll find out,

194
00:10:51.387 --> 00:10:54.251
you can actually use client
components in server components and

195
00:10:54.251 --> 00:10:57.871
the other way around without them messing
each other up if you do it the right way.

196
00:10:57.871 --> 00:11:01.664
Yeah, so very good question,
very good observation.

197
00:11:01.664 --> 00:11:03.031
And yes, that is the recommended approach.

