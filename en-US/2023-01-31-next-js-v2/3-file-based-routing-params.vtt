WEBVTT

1
00:00:00.000 --> 00:00:02.816
Okay, let's talk about file based routing,

2
00:00:02.816 --> 00:00:06.508
which I think is probably the best
feature of next year FM IP.

3
00:00:06.508 --> 00:00:08.344
And it is absolutely insane.

4
00:00:08.344 --> 00:00:10.302
I really do love this feature.

5
00:00:10.302 --> 00:00:12.259
Even though we're using the app directory,

6
00:00:12.259 --> 00:00:15.621
if you're coming from a previous version
of Next, it works kind of the same.

7
00:00:15.621 --> 00:00:20.343
There's just one or
two changes that really upgraded I think,

8
00:00:20.343 --> 00:00:24.098
without really affecting
how you think about it.

9
00:00:24.098 --> 00:00:25.848
But for
the most part is basically the same.

10
00:00:25.848 --> 00:00:29.118
So I have a bunch of notes and
stuff here that talks about it.

11
00:00:29.118 --> 00:00:31.854
I'm just gonna go through it in the code
because it's just so much easier for

12
00:00:31.854 --> 00:00:33.237
me to do that, so let's just do that.

13
00:00:33.237 --> 00:00:37.667
Cool so, in this app directory
let's just see what we got here so

14
00:00:37.667 --> 00:00:40.308
if you notice we have this page.tsx.

15
00:00:40.308 --> 00:00:44.982
And this points to the route here,
the root.

16
00:00:44.982 --> 00:00:46.992
It points to the root.

17
00:00:46.992 --> 00:00:51.806
And that's just how Next.js
treats its router configuration.

18
00:00:51.806 --> 00:00:55.204
So if you were making a React app,
you would probably have to download

19
00:00:55.204 --> 00:00:58.795
React Router somewhere in your app file or
you import your react router.

20
00:00:58.795 --> 00:01:01.772
You'll make all these routes and then,
say, render this component for this route.

21
00:01:01.772 --> 00:01:03.868
Okay, we don't do any of that here.

22
00:01:03.868 --> 00:01:07.017
It's all based off of your file names,
your folder names and

23
00:01:07.017 --> 00:01:08.571
different things like that.

24
00:01:08.571 --> 00:01:12.056
And then at when you run the build
command, when you run the dev command,

25
00:01:12.056 --> 00:01:14.130
Next.js will create that router for you.

26
00:01:14.130 --> 00:01:18.497
Which I think is a lot more intuitive and
easier to understand.

27
00:01:18.497 --> 00:01:25.333
And from what I've seen people having 5 to
30 different route files split up across.

28
00:01:25.333 --> 00:01:27.113
I'm like, I can't follow this route.

29
00:01:27.113 --> 00:01:28.343
So I don't know what's going on.

30
00:01:28.343 --> 00:01:30.915
So I kind of prefered here
it was just really cool.

31
00:01:30.915 --> 00:01:32.052
So let's dive into it.

32
00:01:32.052 --> 00:01:36.810
So right now, with page.tsx and
app directory, if you want a page,

33
00:01:36.810 --> 00:01:39.202
it actually has to be called page.

34
00:01:39.202 --> 00:01:40.908
The file name has to be called page.

35
00:01:40.908 --> 00:01:44.162
So my example I'm using TypeScript,
so it's page.tsx.

36
00:01:44.162 --> 00:01:45.760
We're using JavaScript.

37
00:01:45.760 --> 00:01:50.588
It might be page.jsx, or page.js,
but it has to be called page.

38
00:01:50.588 --> 00:01:56.241
And because this is the only page
in the root of the app folder,

39
00:01:56.241 --> 00:01:58.322
it's the index page.

40
00:01:58.322 --> 00:02:01.458
So for instance,
if I wanna make another page here,

41
00:02:01.458 --> 00:02:04.882
I couldn't because if I made
another page on the route and

42
00:02:04.882 --> 00:02:09.189
there's already a page on the route,
which page would it render here?

43
00:02:09.189 --> 00:02:09.889
I don't know.

44
00:02:09.889 --> 00:02:11.137
You can't, right?

45
00:02:11.137 --> 00:02:15.116
So what I would want
is another route here.

46
00:02:15.116 --> 00:02:17.862
So maybe I wanted to go to like about or
something, right?

47
00:02:17.862 --> 00:02:21.011
So if I wanna go to about,
without a 404 like that.

48
00:02:21.011 --> 00:02:23.877
What I can do is I can go
into the app directory, and

49
00:02:23.877 --> 00:02:26.349
I can make a new folder
with that path name.

50
00:02:26.349 --> 00:02:31.315
So in this case about so
I'll make a new folder, call it about.

51
00:02:31.315 --> 00:02:36.841
And then inside of about,
I can make a page like that.

52
00:02:38.341 --> 00:02:40.997
And that's what's gonna
render when I go to about, so

53
00:02:40.997 --> 00:02:42.572
if I just put some stuff in here.

54
00:02:48.034 --> 00:02:55.669
Like this,
I just render some basic stuff like that.

55
00:02:55.669 --> 00:02:56.915
Save it.

56
00:02:56.915 --> 00:03:02.776
And now if I go back to about,
there we go, about, we get our about page.

57
00:03:02.776 --> 00:03:07.288
And that's one of the biggest
difference between 13 and

58
00:03:07.288 --> 00:03:11.810
12 is that on 13,
you didn't have to make a page file.

59
00:03:11.810 --> 00:03:16.232
You had to make an index file for
the index of that folder, and

60
00:03:16.232 --> 00:03:19.627
then every filename after
that was a segment.

61
00:03:19.627 --> 00:03:22.703
So it got it got really sloppy and
you can get conflicts a lot.

62
00:03:22.703 --> 00:03:27.324
I think this is just way more explicit
like every page has to be called page.

63
00:03:27.324 --> 00:03:30.791
And if you want a different segment as
you want another slash and your route,

64
00:03:30.791 --> 00:03:31.668
you need a folder.

65
00:03:33.271 --> 00:03:36.666
It keeps it simple.

66
00:03:36.666 --> 00:03:38.164
And you can nasties, right?

67
00:03:38.164 --> 00:03:42.871
So if I had something
else in here about me for

68
00:03:42.871 --> 00:03:46.315
some reason, I can do that too.

69
00:03:46.315 --> 00:03:51.512
And I can say,
put a page in there and copy that.

70
00:03:51.512 --> 00:03:57.088
Go here, say me, and now I can Next.

71
00:03:57.088 --> 00:04:00.989
So now if I go to about,
it'll still render that one,

72
00:04:00.989 --> 00:04:03.601
why does it keep trying to add a dot?

73
00:04:03.601 --> 00:04:04.549
I don't know.

74
00:04:04.549 --> 00:04:05.396
There we go.

75
00:04:05.396 --> 00:04:08.744
That still goes to the about there,
but then if I go to about me,

76
00:04:08.744 --> 00:04:10.022
then it'll render me.

77
00:04:15.297 --> 00:04:18.166
So any questions up to this point so far?

78
00:04:18.166 --> 00:04:19.272
It gets deeper,

79
00:04:19.272 --> 00:04:23.730
this is just scratching the surface
&gt;&gt; Query params is the next question.

80
00:04:23.730 --> 00:04:25.343
&gt;&gt; Yes.
&gt;&gt; I'm guessing that's yeah.

81
00:04:25.343 --> 00:04:29.272
&gt;&gt; Yes, query params is coming soon, yes.

82
00:04:29.272 --> 00:04:32.017
Any other questions about how this works.

83
00:04:33.854 --> 00:04:34.505
No?

84
00:04:34.505 --> 00:04:36.081
Okay, awesome.

85
00:04:36.081 --> 00:04:39.403
So create params why do we need
to like create params for?

86
00:04:39.403 --> 00:04:44.984
Obviously some routes are dynamic, user
IDs, BlogPost titles and things like that.

87
00:04:44.984 --> 00:04:47.478
Not all path names
are known ahead of time and

88
00:04:47.478 --> 00:04:51.392
they have to be dynamic because
they're coming from somewhere, and

89
00:04:51.392 --> 00:04:55.591
that is where Next.js shines not even
just the routing of how that works.

90
00:04:55.591 --> 00:04:58.776
But how you fetch that data which I cannot
wait to talk about later in the course

91
00:04:58.776 --> 00:05:01.276
because that's some of the biggest
changes in this update.

92
00:05:01.276 --> 00:05:02.923
It's like a huge mental model shift.

93
00:05:02.923 --> 00:05:07.388
But for now, we'll focus on the routes and
dynamic paths and query string and

94
00:05:07.388 --> 00:05:08.429
stuff like that.

95
00:05:08.429 --> 00:05:11.005
So if you wanted to do
that let's say we had to,

96
00:05:11.005 --> 00:05:13.789
get rid of this meeting
because this bothered me.

97
00:05:13.789 --> 00:05:15.862
Let's say we had a blog.

98
00:05:15.862 --> 00:05:20.083
So we'll make a new folder here because
this app is gonna be like my home site

99
00:05:20.083 --> 00:05:22.836
where I show off all my stuff and
also have a blog.

100
00:05:22.836 --> 00:05:27.366
So I have a blog here and then the blog is
gonna have a blog entry page where if you

101
00:05:27.366 --> 00:05:32.269
click on that, if you go to just slash
blog, it'll show all my blog posts, right?

102
00:05:32.269 --> 00:05:34.429
But then if you click on
one of those blog posts,

103
00:05:34.429 --> 00:05:37.399
I need to go to just that one blog
post right so I need like the slug or

104
00:05:37.399 --> 00:05:40.710
the title or whatever you're gonna put for
the blog post to identify it.

105
00:05:40.710 --> 00:05:44.557
So inside this folder,
I'll make a new folder.

106
00:05:44.557 --> 00:05:48.728
But because I want it to be my
site/blog/ whatever the slug is,

107
00:05:48.728 --> 00:05:53.748
I don't know what the slug is, so I don't
know what I would call this folder,

108
00:05:53.748 --> 00:05:58.486
because whatever I put here that's
literally going to be the path name.

109
00:05:58.486 --> 00:06:02.985
So I can't put the word slug here because
it would be slash blog slash slug and

110
00:06:02.985 --> 00:06:04.473
that's not what I want.

111
00:06:04.473 --> 00:06:06.879
So I had to tell it Next.js
like this is dynamic,

112
00:06:06.879 --> 00:06:09.182
you could do that with
these square brackets.

113
00:06:09.182 --> 00:06:11.227
So I can say slug like that.

114
00:06:11.227 --> 00:06:15.744
And that's gonna tell it Next.js like,
this is a dynamic piece and

115
00:06:15.744 --> 00:06:17.680
the parameter is called slug.

116
00:06:17.680 --> 00:06:22.304
So when I reference this in JavaScript
using some router thing that they give us,

117
00:06:22.304 --> 00:06:25.982
I can reference it as the slug and
the accurate the value from it.

118
00:06:25.982 --> 00:06:30.191
So I'm gonna say slug and then like
everything else, I gotta put a page in

119
00:06:30.191 --> 00:06:38.742
here, like that Right and
then I can split a component, so.

120
00:06:46.820 --> 00:06:50.016
All right, so now if I save that, I go to-

121
00:06:51.963 --> 00:06:56.662
Blog, did I have page for blog?

122
00:06:56.662 --> 00:06:59.118
Yeah, I didn't put anything in it.

123
00:06:59.118 --> 00:07:04.981
Yeah, okay, so if I go to blog/ literally
anything, it'll go to the post.

124
00:07:10.710 --> 00:07:15.295
And we'll talk about how you can get that
slug and do stuff later when we get data.

125
00:07:15.295 --> 00:07:18.189
But for now, this is how the router works.

126
00:07:18.189 --> 00:07:19.089
It's pretty cool.

127
00:07:19.089 --> 00:07:21.705
When I first found this out in Next.js,
I was like, yeah.

128
00:07:21.705 --> 00:07:25.210
This is different,
I like this, it's really cool.

129
00:07:25.210 --> 00:07:27.875
So, really a big fan of it.

130
00:07:27.875 --> 00:07:31.780
And then it goes a little further, we
could talk about some of those things, but

131
00:07:31.780 --> 00:07:35.919
they're mostly just for advanced use cases
or if you're just like, I don't know,

132
00:07:35.919 --> 00:07:36.932
really efficient.

133
00:07:36.932 --> 00:07:42.256
But you can do what's called catch
all routes where not only do I match,

134
00:07:42.256 --> 00:07:44.031
like blog slash slug but

135
00:07:44.031 --> 00:07:49.832
match everything after it as well without
having to write more definitions.

136
00:07:49.832 --> 00:07:54.128
So if you wanna match routes after
the slug without having to define it with

137
00:07:54.128 --> 00:07:58.355
multiple folders, maybe you don't
know how many paths are after it, so

138
00:07:58.355 --> 00:08:03.092
you won't even know how many folders
to define anyway, because it's dynamic.

139
00:08:03.092 --> 00:08:07.277
If you can do what's called a catch all
route which basically just means you can

140
00:08:07.277 --> 00:08:11.792
wrap this in a square brackets like it was
before, and then just do the dot, dot dot.

141
00:08:11.792 --> 00:08:16.115
And that is basically going to match
everything after slug forever.

142
00:08:16.115 --> 00:08:18.045
So you don't get a four four like this.

143
00:08:18.045 --> 00:08:19.242
So I can just keep going.

144
00:08:22.679 --> 00:08:25.989
So this is great for
documentation website actually.

145
00:08:25.989 --> 00:08:29.103
I would use something like that for
documentation website where it's like, I

146
00:08:29.103 --> 00:08:32.511
don't know, this documentation thing might
nest forever, it could go on forever.

147
00:08:32.511 --> 00:08:35.431
I know Next.js uses that for
their documentation website.

148
00:08:35.431 --> 00:08:39.744
You can look at their URL hierarchy
to see how they manage that, but

149
00:08:39.744 --> 00:08:43.299
I know they use the catch-all for that.

150
00:08:43.299 --> 00:08:44.937
Any other questions on routing?

151
00:08:44.937 --> 00:08:47.498
For the most part, that's all routing.

152
00:08:47.498 --> 00:08:50.668
If you don't really need
anything outside of that,

153
00:08:50.668 --> 00:08:54.136
then I can think of any other
use cases you might wanna do.

154
00:08:54.136 --> 00:08:57.522
And you might be like, well,
what about like I wanna load

155
00:08:57.522 --> 00:09:01.910
something up before it routes or
I wanna intercept the route and do stuff.

156
00:09:01.910 --> 00:09:06.748
They are working on an RFC for
intercepting things.

157
00:09:06.748 --> 00:09:09.307
But as the question that someone
asked in the chat earlier,

158
00:09:09.307 --> 00:09:12.238
there's something called middleware
that allows you to do stuff.

159
00:09:12.238 --> 00:09:16.648
I think it's maybe a little advanced for
this one, because it's kind of crazy, but

160
00:09:16.648 --> 00:09:18.399
if we get to it, we'll get to it.

161
00:09:18.399 --> 00:09:22.195
But they are working on a more
streamlined way of intercepting routes,

162
00:09:22.195 --> 00:09:26.115
but you can also kind of do it on the page
level as you'll find out when we get

163
00:09:26.115 --> 00:09:27.142
to fetching data.

164
00:09:27.142 --> 00:09:29.724
And just how like react suspense works and
things like that.

165
00:09:29.724 --> 00:09:31.370
So we'll get there.

166
00:09:31.370 --> 00:09:33.816
&gt;&gt; What about private routes.

167
00:09:33.816 --> 00:09:38.577
&gt;&gt; Private routes are as unlike
routes that are authenticated.

168
00:09:38.577 --> 00:09:39.418
Okay.

169
00:09:39.418 --> 00:09:43.842
There's really no built in mechanism
in Next.js where you can just

170
00:09:43.842 --> 00:09:48.669
like flip a switch and like this is
a private route, that is left up to you.

171
00:09:48.669 --> 00:09:53.495
So you could use middleware, it depends
on how you wanted to protect it.

172
00:09:53.495 --> 00:09:56.542
So like let's say you were using
cookies to protect a route,

173
00:09:56.542 --> 00:10:00.190
you could use Middleware, because
Middleware has access to cookies and

174
00:10:00.190 --> 00:10:04.522
you can just check a cookie if it's there
and if it's not, redirect somewhere else.

175
00:10:04.522 --> 00:10:08.062
You could do that on the route itself,
where you go to the route, but

176
00:10:08.062 --> 00:10:11.729
before you render it, you check something,
whether it's a cookie,

177
00:10:11.729 --> 00:10:15.367
whether it's local storage,
however you're checking your auth.

178
00:10:15.367 --> 00:10:18.160
And then if that's not the case,
you can redirect yourself and

179
00:10:18.160 --> 00:10:21.640
you can just abstract that away into its
own function somewhere that you import

180
00:10:21.640 --> 00:10:22.552
whatever you want.

181
00:10:22.552 --> 00:10:24.698
So that's typically how
you would probably do it.

182
00:10:24.698 --> 00:10:28.061
I would think most people who have done
in the next 12 would have done like get

183
00:10:28.061 --> 00:10:29.949
server side props or something like that.

184
00:10:29.949 --> 00:10:30.968
And inside of there,

185
00:10:30.968 --> 00:10:34.143
they would have checked a cookie
to see if you're authenticated.

186
00:10:34.143 --> 00:10:35.913
If not, they were redirected somewhere.

187
00:10:35.913 --> 00:10:37.610
There's no more get server side props.

188
00:10:37.610 --> 00:10:39.930
So you have to do something
different here and

189
00:10:39.930 --> 00:10:42.628
we'll talk about that when
we get to data fetching.

190
00:10:42.628 --> 00:10:45.800
But no, there is no built in
mechanism that Next.js gives you

191
00:10:45.800 --> 00:10:48.850
right out of the box based off
file based routing or anything

192
00:10:48.850 --> 00:10:52.939
that says this is protected because it
doesn't know how you are protecting it.

193
00:10:52.939 --> 00:10:58.047
&gt;&gt; Just curious,
where's Next serving that 404 page from?

194
00:10:58.047 --> 00:10:59.395
&gt;&gt; Yeah, that's a good question.

195
00:10:59.395 --> 00:11:06.328
So Next.js has a internal built in 404
page that you can override if you want.

196
00:11:06.328 --> 00:11:11.967
And I believe in the app one,
it is called not found.

197
00:11:11.967 --> 00:11:16.045
You just make a not found file which I
think we could test that later when we get

198
00:11:16.045 --> 00:11:19.001
to all the special pages
part that I'm talking about.

199
00:11:19.001 --> 00:11:21.433
But yeah,
by default it will serve that 404 page.

200
00:11:21.433 --> 00:11:22.658
You can overwrite it if you want though.

