WEBVTT

1
00:00:00.000 --> 00:00:03.847
[MUSIC]

2
00:00:03.847 --> 00:00:07.604
&gt;&gt; Kyle Simpson: Let's talk about
the values that we put into that default

3
00:00:07.604 --> 00:00:09.430
expression.

4
00:00:09.430 --> 00:00:12.850
Most of you probably assume it's
just simple stuff like constants.

5
00:00:12.850 --> 00:00:15.900
But there's no requirement
that it has to be a constant.

6
00:00:15.900 --> 00:00:20.000
It can be any valid JavaScript expression,
not statement, but expression.

7
00:00:20.000 --> 00:00:22.900
Same kind of rules as an arrow,
concise body of that.

8
00:00:22.900 --> 00:00:25.210
Any expression that's
valid could be there.

9
00:00:26.270 --> 00:00:28.390
So what if we made it a function call?

10
00:00:28.390 --> 00:00:32.550
Like for example bar,
that's totally valid.

11
00:00:32.550 --> 00:00:36.570
And if there was a function bar here,
that said console dot

12
00:00:36.570 --> 00:00:42.120
log And put a little exclamation mark.

13
00:00:43.150 --> 00:00:47.040
So the question is, in this particular
program with no executions.

14
00:00:48.210 --> 00:00:50.684
How many times do you
think bar has been called?

15
00:00:58.057 --> 00:01:00.250
&gt;&gt; Speaker 2: None, until you call foo.

16
00:01:00.250 --> 00:01:03.897
&gt;&gt; Kyle Simpson: There's only two
rational answers here, either 0 or 1.

17
00:01:03.897 --> 00:01:06.569
So how many of you would vote for a 0?

18
00:01:06.569 --> 00:01:08.280
It's not being called at all.

19
00:01:08.280 --> 00:01:12.074
How many of you vote for
1, it's called once, okay.

20
00:01:12.074 --> 00:01:12.970
How about online?

21
00:01:12.970 --> 00:01:15.340
Let's take that poll,
I know we have to wait 15 seconds.

22
00:01:15.340 --> 00:01:16.360
Let's take the poll online.

23
00:01:17.800 --> 00:01:22.470
Raise your hand if you vote, for
online, raise your hand if you vote for

24
00:01:22.470 --> 00:01:25.060
it's been called once versus
its been called zero times.

25
00:01:25.060 --> 00:01:27.798
&gt;&gt; Speaker 2: Or
just type it in zero or one.

26
00:01:27.798 --> 00:01:31.718
&gt;&gt; Kyle Simpson: [LAUGH] Okay,
so that's the question.

27
00:01:31.718 --> 00:01:33.405
How many times is bar called?

28
00:01:38.335 --> 00:01:41.140
&gt;&gt; Kyle Simpson: Okay, seems like
we're getting a bit of a mix, but

29
00:01:41.140 --> 00:01:44.480
maybe a little bit more weighted
towards It's called once.

30
00:01:45.720 --> 00:01:46.220
Okay.

31
00:01:47.891 --> 00:01:49.571
&gt;&gt; Kyle Simpson: So
that's why we talk about this.

32
00:01:49.571 --> 00:01:52.550
That's why we asked these questions,
cuz I want you to understand this stuff.

33
00:01:52.550 --> 00:01:55.164
I don't want you to just make
assumptions or guesses or whatever,

34
00:01:55.164 --> 00:01:57.319
it's important to understand
how JavaScript works.

35
00:01:58.390 --> 00:02:02.670
So ES6 introduces a notion of
what's called, a lazy expression.

36
00:02:02.670 --> 00:02:07.750
This expression is not evaluated
unless and until it is needed.

37
00:02:07.750 --> 00:02:10.419
So the correct answer here is,
not been called at all yet.

38
00:02:10.419 --> 00:02:12.030
Cuz it hasn't been needed yet.

39
00:02:12.030 --> 00:02:15.850
If I say foo(1) how many
times has bar been called?

40
00:02:18.920 --> 00:02:22.030
Still zero,
cuz it still hasn't been needed yet.

41
00:02:22.030 --> 00:02:22.650
Okay?

42
00:02:22.650 --> 00:02:26.510
But, as soon as I call foo where
it is needed, then it gets called.

43
00:02:26.510 --> 00:02:27.880
And every time I call foo,

44
00:02:27.880 --> 00:02:32.980
I'm gonna get it printing out
that exclamation mark every time.

45
00:02:33.980 --> 00:02:34.480
Okay?

46
00:02:36.743 --> 00:02:37.430
&gt;&gt; Kyle Simpson: You with me?

47
00:02:37.430 --> 00:02:38.060
Yes?

48
00:02:38.060 --> 00:02:41.120
&gt;&gt; Speaker 3: And it's a new
invocation each time you call foo.

49
00:02:41.120 --> 00:02:42.470
&gt;&gt; Kyle Simpson: It is an absolute,

50
00:02:42.470 --> 00:02:46.144
the entire expression is
re-evaluated every single time.

51
00:02:46.144 --> 00:02:50.660
It's kinda like you wrap the expression
in a function that's not there and

52
00:02:50.660 --> 00:02:52.420
then you call that function.

53
00:02:52.420 --> 00:02:54.390
Whatever it gives back is what you put in,
okay?

54
00:02:55.390 --> 00:02:58.150
So it's, in essence, a lazy expression.

55
00:02:58.150 --> 00:03:00.300
We don't really have lazy
expressions in JavaScript.

56
00:03:00.300 --> 00:03:02.610
But it's sort of syntactically like that,
okay?

57
00:03:02.610 --> 00:03:05.118
Now you might be wondering
why on Earth would I want

58
00:03:05.118 --> 00:03:07.460
a function that would be called over and
over?

59
00:03:07.460 --> 00:03:08.400
Or why would I use this?

60
00:03:08.400 --> 00:03:09.970
Well, one example for

61
00:03:09.970 --> 00:03:13.970
where you might use it is if this
one was like a unique ID generator.

62
00:03:16.490 --> 00:03:20.070
And you wanted to be
able to pass in an ID, or

63
00:03:20.070 --> 00:03:24.440
have it automatically generate
one if I don't pass one, okay.

64
00:03:24.440 --> 00:03:27.930
That's one usage of making
a function call there.

65
00:03:27.930 --> 00:03:31.130
Another usage, this is kind of
an interesting little trick,

66
00:03:31.130 --> 00:03:34.260
you could make one called required,
that said for

67
00:03:34.260 --> 00:03:37.960
example- I'm gonna go ahead and
script the server.

68
00:03:37.960 --> 00:03:42.736
This one could say,
&gt;&gt; Kyle Simpson: Could

69
00:03:42.736 --> 00:03:44.609
throw a Java Script error.

70
00:03:47.153 --> 00:03:49.140
&gt;&gt; Kyle Simpson: And you could say that.

71
00:03:49.140 --> 00:03:53.888
So if they don't pass in the ID,
a JavaScript there is thrown saying,

72
00:03:53.888 --> 00:03:56.655
hey the parameter was required, okay?

73
00:03:56.655 --> 00:03:58.046
Yes.

74
00:03:58.046 --> 00:03:59.499
&gt;&gt; Speaker 4: [INAUDIBLE]
be a way to refer to foo,

75
00:03:59.499 --> 00:04:01.769
within the required function,
so you could name it?

76
00:04:02.790 --> 00:04:05.530
&gt;&gt; Kyle Simpson: No, there's no way to do,
like a self reference, or something.

77
00:04:05.530 --> 00:04:10.649
You could manually say,
like this, double that up and

78
00:04:10.649 --> 00:04:19.233
then say,
&gt;&gt; Kyle Simpson: You

79
00:04:19.233 --> 00:04:20.470
could do that if you wanted to.

80
00:04:21.750 --> 00:04:24.780
But there's no like,
self reference thing going on.

81
00:04:26.450 --> 00:04:29.370
Okay, so any expression that we
wanna put there we can put there,

82
00:04:29.370 --> 00:04:32.980
and there's a variety of
little usages that we can do.

83
00:04:32.980 --> 00:04:37.570
The point is that we don't have
to do the imperative form of

84
00:04:37.570 --> 00:04:40.830
testing against undefined,
that's automatically built in for us.

85
00:04:40.830 --> 00:04:42.780
We just do the declarative form.

86
00:04:42.780 --> 00:04:44.130
And once you become familiar with that,

87
00:04:44.130 --> 00:04:47.560
now that will jump out at you as
being a lot more self-explanatory.

88
00:04:47.560 --> 00:04:52.116
That's the purpose of
the declarative form, okay?

89
00:04:54.892 --> 00:04:58.620
&gt;&gt; Kyle Simpson: Any questions about
using default parameter values?

90
00:05:02.970 --> 00:05:07.130
Let me push your understanding
just a little bit beyond what you

91
00:05:07.130 --> 00:05:09.330
normally comfortable with, okay.

92
00:05:09.330 --> 00:05:11.850
We talked about scoping
a little bit before.

93
00:05:11.850 --> 00:05:15.763
It turns out that technically
the spec requires that each variable,

94
00:05:15.763 --> 00:05:20.282
that the parameter list as a scope, and
each variable kind of gets its own list or

95
00:05:20.282 --> 00:05:20.967
whatever.

96
00:05:20.967 --> 00:05:24.364
So you can do self references
to other parameters,

97
00:05:24.364 --> 00:05:27.720
as long as they've
already been in the list.

98
00:05:27.720 --> 00:05:30.210
So I could say x is equal to ID.

99
00:05:30.210 --> 00:05:35.320
So now x is going to default to
the value that ID got set to,

100
00:05:35.320 --> 00:05:37.460
whether affirmatively or defaulted to.

101
00:05:37.460 --> 00:05:40.110
So it's going to go in a left
to right fashion right.

102
00:05:40.110 --> 00:05:41.720
So we can do a self reference.

103
00:05:41.720 --> 00:05:43.219
You can't go in the other order though.

104
00:05:44.980 --> 00:05:49.510
You can't do that before,
because the ID doesn't exist yet.

105
00:05:49.510 --> 00:05:51.500
It's kind of like a let declaration,
in that sense.

106
00:05:51.500 --> 00:05:53.448
It doesn't exist yet, so

107
00:05:53.448 --> 00:05:59.212
now you'd be accessing the ID inside
of its temporal dead zone, if you will.

108
00:05:59.212 --> 00:06:00.612
But what about this?

109
00:06:02.234 --> 00:06:05.843
&gt;&gt; Kyle Simpson: I'm gonna see jow
close you're paying attention, and

110
00:06:05.843 --> 00:06:07.620
how good you are guessing.

111
00:06:08.740 --> 00:06:10.941
What do you think would happen if I said,

112
00:06:38.431 --> 00:06:43.220
&gt;&gt; Kyle Simpson: So I've got an f that
defaults to this function which returns x.

113
00:06:44.330 --> 00:06:49.724
So is it returning the x from here,

114
00:06:49.724 --> 00:06:54.565
or is it going to return that x?

115
00:06:54.565 --> 00:06:57.430
All right, so let's talk about these
particular cases for just a moment.

116
00:06:59.320 --> 00:07:02.950
What's happening with the scope of the
function when the function shows up in one

117
00:07:02.950 --> 00:07:05.250
of these lazy expression positions?

118
00:07:05.250 --> 00:07:08.310
That's essentially the question
that we're are trying to tackle.

119
00:07:08.310 --> 00:07:11.890
So if I pass in no foo at all,
x is going to default to 2.

120
00:07:11.890 --> 00:07:15.920
And f is going to default to this
function, which is closing over some x.

121
00:07:15.920 --> 00:07:18.650
The question is which
x is it closing over.

122
00:07:18.650 --> 00:07:20.580
Is it closing over the x
from the parameter list, or

123
00:07:20.580 --> 00:07:21.720
the x from the outer scope?

124
00:07:31.045 --> 00:07:32.040
&gt;&gt; Kyle Simpson: Okay.

125
00:07:32.040 --> 00:07:35.630
So most people are gonna say, yep, it's
going to close over the parameter list.

126
00:07:36.750 --> 00:07:46.031
So if we try this,
&gt;&gt; Kyle Simpson: We

127
00:07:46.031 --> 00:07:49.895
in fact get the value to close
over the parameter list.

128
00:07:49.895 --> 00:07:58.809
Well,
&gt;&gt; Kyle Simpson: What do you think now?

129
00:08:05.561 --> 00:08:06.557
&gt;&gt; Speaker 5: It's going to be fine.

130
00:08:06.557 --> 00:08:07.571
&gt;&gt; Speaker 6: Hope that doesn't change it.

131
00:08:07.571 --> 00:08:10.375
&gt;&gt; Kyle Simpson: So
we think it should still return 2, right?

132
00:08:10.375 --> 00:08:11.530
&gt;&gt; Speaker 6: We hope so.

133
00:08:11.530 --> 00:08:13.042
&gt;&gt; Kyle Simpson: We hope so.

134
00:08:13.042 --> 00:08:13.821
Well?
&gt;&gt; Speaker 6: No,

135
00:08:13.821 --> 00:08:16.067
cuz it hasn't been called on yet.

136
00:08:16.067 --> 00:08:17.910
&gt;&gt; Kyle Simpson: Let me give
you just a moment to think.

137
00:08:17.910 --> 00:08:22.027
[INAUDIBLE] Is it gonna return 2,
or is it gonna return 5?

138
00:08:22.027 --> 00:08:24.781
Which x is it?

139
00:08:24.781 --> 00:08:26.008
&gt;&gt; Speaker 6: 5.

140
00:08:30.200 --> 00:08:31.184
&gt;&gt; Speaker 5: It's gonna be 5.

141
00:08:31.184 --> 00:08:31.834
&gt;&gt; Speaker 6: It should be 5.

142
00:08:31.834 --> 00:08:34.881
&gt;&gt; Kyle Simpson: Isn't it a pain when
somebody asks these annoying little

143
00:08:34.881 --> 00:08:35.521
esoteric.

144
00:08:35.521 --> 00:08:38.988
This is the stuff that
they put on [CROSSTALK]

145
00:08:38.988 --> 00:08:39.907
&gt;&gt; Speaker 6: It should be 5,

146
00:08:39.907 --> 00:08:43.800
because it doesn't actually get
called until the consult function.

147
00:08:43.800 --> 00:08:46.270
And by then x is-
&gt;&gt; Speaker 5: No,

148
00:08:46.270 --> 00:08:48.919
the function already closed over X.

149
00:08:48.919 --> 00:08:50.580
It should return 2.

150
00:08:50.580 --> 00:08:54.430
&gt;&gt; Kyle Simpson: All right,
so if we run this in Chrome,

151
00:08:58.691 --> 00:09:00.944
&gt;&gt; Kyle Simpson: We think, good, it's 2.

152
00:09:00.944 --> 00:09:05.125
That makes sense,
except Chrome has a spec bug.

153
00:09:05.125 --> 00:09:06.316
It's supposed to be 5.

154
00:09:06.316 --> 00:09:09.923
&gt;&gt; [LAUGH]
&gt;&gt; Speaker 6: No.

155
00:09:09.923 --> 00:09:10.432
[LAUGH]
&gt;&gt; Speaker 5: No, no.

156
00:09:10.432 --> 00:09:11.172
&gt;&gt; Kyle Simpson: Babel has this

157
00:09:11.172 --> 00:09:11.690
bug as well.

158
00:09:12.850 --> 00:09:16.350
What's happening here is
that a var at the top level

159
00:09:16.350 --> 00:09:20.240
is taken as a duplicate declaration,
when there was already an x.

160
00:09:20.240 --> 00:09:24.100
So the x equals 5 is
assigning to the x parameter

161
00:09:24.100 --> 00:09:26.340
that the function was closed around.

162
00:09:26.340 --> 00:09:29.610
So that's why it's still closing
over the one that you thought, but

163
00:09:29.610 --> 00:09:30.860
we already changed its value.

164
00:09:33.220 --> 00:09:34.358
It sucks, doesn't it.

165
00:09:34.358 --> 00:09:38.790
[LAUGH] Okay, a little take away here,
don't try to write confusing code.

166
00:09:38.790 --> 00:09:42.590
But I push on you with confusing
code to help you understand

167
00:09:42.590 --> 00:09:46.470
where the edges of reasonability are,
okay?

168
00:09:46.470 --> 00:09:49.960
I have virtually never in my
experience found a case where I

169
00:09:49.960 --> 00:09:55.050
put an inline function
expression up in my thing.

170
00:09:55.050 --> 00:09:58.139
Especially not with arrow functions or
whatever, I don't recommend doing that.

171
00:09:58.139 --> 00:10:02.411
Because then you're pushing on those
edges of weird stuff that people have to

172
00:10:02.411 --> 00:10:03.206
think about.

173
00:10:03.206 --> 00:10:09.094
&gt;&gt; Speaker 7: Personal question, is this
stuff talked about in your ES 6 chapter?

174
00:10:09.094 --> 00:10:11.254
&gt;&gt; Kyle Simpson: Yes, I cover this stuff.

175
00:10:13.673 --> 00:10:16.580
&gt;&gt; Speaker 6: Question from the chat
room was could you go over that again?

176
00:10:16.580 --> 00:10:20.090
&gt;&gt; Kyle Simpson: Yes, in this particular
case, the spec says the var- and

177
00:10:20.090 --> 00:10:20.860
I missed this.

178
00:10:20.860 --> 00:10:22.730
I was confused by this,

179
00:10:22.730 --> 00:10:27.240
and somebody had to walk me through
this part of the spec to get it.

180
00:10:27.240 --> 00:10:30.490
The spec basically says
that the var x here

181
00:10:30.490 --> 00:10:33.960
is not creating a new
x in a new interscope.

182
00:10:33.960 --> 00:10:38.244
But actually, the x that already
exists as part of the parameter,

183
00:10:38.244 --> 00:10:42.543
it's basically kind of a replacement,
or just a no op of that one.

184
00:10:42.543 --> 00:10:45.481
Because there's already an x
in the scope of the function,

185
00:10:45.481 --> 00:10:47.960
cuz that's the way it
always worked from before.

186
00:10:47.960 --> 00:10:52.650
So they had to preserve that capability,
once all this newfound fangled stuff that

187
00:10:52.650 --> 00:10:55.197
we did with parameters
came along with ES6.

188
00:10:55.197 --> 00:10:58.951
So this var x is basically
the var is a no op.

189
00:10:58.951 --> 00:11:01.204
So the line 4 is just x equals 5,

190
00:11:01.204 --> 00:11:05.830
which is changing the param it
defaulted it to, now to the value 5.

191
00:11:05.830 --> 00:11:10.641
And this closure is a closure,
a live link, not a snapshot.

192
00:11:10.641 --> 00:11:14.290
So now the function returns the current
value of x, which is the value of 5.

193
00:11:14.290 --> 00:11:15.760
That's what it's supposed to be.

194
00:11:15.760 --> 00:11:20.522
&gt;&gt; Speaker 3: It's the same principle
as putting the unused variables in your

195
00:11:20.522 --> 00:11:22.561
parameter list, really.

196
00:11:22.561 --> 00:11:23.348
&gt;&gt; Kyle Simpson: Say, that again.

197
00:11:23.348 --> 00:11:23.883
Tell me why you said that.

198
00:11:23.883 --> 00:11:27.451
&gt;&gt; Speaker 3: In the previous example,
we used unused variables in your parameter

199
00:11:27.451 --> 00:11:30.080
list, so
you could assign them in the function.

200
00:11:30.080 --> 00:11:31.240
&gt;&gt; Kyle Simpson: Yeah.
&gt;&gt; Speaker 3: Same principles

201
00:11:31.240 --> 00:11:31.819
apply in here.

202
00:11:33.620 --> 00:11:34.640
&gt;&gt; Kyle Simpson: Okay, sort of, yeah.

203
00:11:34.640 --> 00:11:37.930
The fact that parameters
are variables that we can assign to,

204
00:11:37.930 --> 00:11:39.980
is absolutely true, yeah.

205
00:11:39.980 --> 00:11:43.160
A lot of people think that the parameter
list should be treated strictly as

206
00:11:43.160 --> 00:11:44.360
its own scope.

207
00:11:44.360 --> 00:11:46.840
For the purposes of TDZ,
it is its own scope.

208
00:11:46.840 --> 00:11:51.625
But for the purposes of preserving the
fact that they were always kinda one in

209
00:11:51.625 --> 00:11:56.807
the same, before this special case of var,
it ends up just being a redecoration.

210
00:11:56.807 --> 00:11:57.850
Yeah?

211
00:11:57.850 --> 00:12:00.080
&gt;&gt; Speaker 8: So
what if I you change your var to let?

212
00:12:00.080 --> 00:12:00.935
&gt;&gt; Kyle Simpson: I don't know.

213
00:12:00.935 --> 00:12:07.330
There's that would probably be in error.

214
00:12:07.330 --> 00:12:09.170
I think that's a static error.

215
00:12:09.170 --> 00:12:12.680
Because you're not allowed to
do let x in the same scopes.

216
00:12:12.680 --> 00:12:17.844
So I think the spec would probably
throw an error there, but I don't know.

217
00:12:17.844 --> 00:12:21.904
The problem is we can't trust either
Chrome or Babel at this point,

218
00:12:21.904 --> 00:12:24.290
because they still have this problem.

219
00:12:24.290 --> 00:12:28.270
&gt;&gt; Speaker 8: So is the parameter
list x essentially a let in ES 6?

220
00:12:28.270 --> 00:12:29.040
&gt;&gt; Kyle Simpson: Yes.

221
00:12:29.040 --> 00:12:30.063
&gt;&gt; Speaker 8: Okay.

222
00:12:30.063 --> 00:12:32.375
&gt;&gt; Kyle Simpson: For most purposes, yes.

223
00:12:35.087 --> 00:12:36.340
&gt;&gt; Kyle Simpson: All right.

224
00:12:36.340 --> 00:12:42.060
So stick to the stuff that makes sense,
like making a simple function call or

225
00:12:42.060 --> 00:12:47.050
using as a simple direct primitive
literal or something like that.

226
00:12:47.050 --> 00:12:48.510
Default values will be helpful.

