WEBVTT

1
00:00:00.000 --> 00:00:03.939
[MUSIC]

2
00:00:03.939 --> 00:00:08.751
&gt;&gt; Kyle Simpson: So let's talk now about
an extra feature that's included with

3
00:00:08.751 --> 00:00:10.755
interpolated literals.

4
00:00:10.755 --> 00:00:18.152
That is probably not terribly self-obvious
what this is or what it's for.

5
00:00:18.152 --> 00:00:19.498
It is possible for

6
00:00:19.498 --> 00:00:24.900
me to put an expression directly in
front of the interpolated literal.

7
00:00:26.320 --> 00:00:31.800
And that expression will act as,
essentially, a function call.

8
00:00:33.560 --> 00:00:35.530
So you're thinking about
what is the foo function?

9
00:00:35.530 --> 00:00:37.480
It would be a function that
we would have to define.

10
00:00:39.050 --> 00:00:43.500
And you might assume that
that function would receive

11
00:00:43.500 --> 00:00:46.570
the interpolated string
literal as its argument.

12
00:00:47.600 --> 00:00:52.367
It's not really quite that, it's sort
of like that but not quite, okay?

13
00:00:52.367 --> 00:00:54.580
So let me talk to you about what
this foo function would do.

14
00:00:55.600 --> 00:00:59.084
This foo function is going to
receive as its first parameter,

15
00:00:59.084 --> 00:01:00.428
as its first argument.

16
00:01:00.428 --> 00:01:03.900
By convention, we like to call it strings.

17
00:01:03.900 --> 00:01:05.130
I mean,
you can call these whatever you want.

18
00:01:05.130 --> 00:01:07.370
But by convention,
most people call it strings.

19
00:01:07.370 --> 00:01:13.870
Cuz what it is, is an array of all
of the string literals from here.

20
00:01:13.870 --> 00:01:19.591
So it is gonna be an array
that includes that string, and

21
00:01:19.591 --> 00:01:24.992
that string.
&gt;&gt; Kyle Simpson: And

22
00:01:24.992 --> 00:01:31.430
that string, and that string, so it's
gonna have four string values in it, okay?

23
00:01:31.430 --> 00:01:36.465
It's an array of four string values.
&gt;&gt; Kyle Simpson: The next

24
00:01:36.465 --> 00:01:41.467
thing that we would get, obviously,
we're gonna get these values in,

25
00:01:41.467 --> 00:01:44.502
you might think we would
get a values array.

26
00:01:46.000 --> 00:01:50.430
For some crazy reason, they decided not to
collect all the values up into an array.

27
00:01:50.430 --> 00:01:53.568
So what you actually get is value1,
value2,

28
00:01:53.568 --> 00:01:58.196
value3 all the way out to however
many values that are actually were,

29
00:01:58.196 --> 00:02:02.598
which is stupid and nobody wants
to deal with those individually.

30
00:02:02.598 --> 00:02:08.890
So we all just collect them up into a
values array using the ...gather operator.

31
00:02:08.890 --> 00:02:11.735
So virtually,
all of these are called tag functions.

32
00:02:11.735 --> 00:02:14.003
Virtually, every tag function you find,

33
00:02:14.003 --> 00:02:18.750
the signature will look almost identical
to that call strings, and then ...values.

34
00:02:18.750 --> 00:02:23.054
Obviously, you can name them
whatever you want, okay?

35
00:02:23.054 --> 00:02:25.230
But what's the purpose of this function?

36
00:02:25.230 --> 00:02:30.553
Well, I can do really evil
stuff like I am evil.

37
00:02:30.553 --> 00:02:34.414
If I return a different value for
example that string and

38
00:02:34.414 --> 00:02:39.110
we ask what's in message,
what do you think is gonna be in message?

39
00:02:39.110 --> 00:02:42.287
The string, I am evil, has absolutely
nothing to do with what we passed in.

40
00:02:42.287 --> 00:02:44.810
I don't think it's a good idea,
but you can.

41
00:02:44.810 --> 00:02:48.010
The point I'm making is that
the tag function serves

42
00:02:48.010 --> 00:02:49.500
kind of like a preprocessor.

43
00:02:51.480 --> 00:02:55.076
It's almost like a macro,
it preprocesses the string before it's

44
00:02:55.076 --> 00:02:58.873
finalized.
&gt;&gt; Kyle Simpson: Which is gonna allow

45
00:02:58.873 --> 00:03:02.020
you to do some, actually,
very interesting things, okay?

46
00:03:02.020 --> 00:03:05.420
Before we talk about the interesting
kind of stuff that we can do with them,

47
00:03:05.420 --> 00:03:08.450
let's just think about what's
the very simplest approach for

48
00:03:08.450 --> 00:03:10.242
me to construct these things together.

49
00:03:10.242 --> 00:03:15.346
For example, let's observe that
the strings array is gonna

50
00:03:15.346 --> 00:03:20.749
have four values in it,
how many values are gonna be in the values

51
00:03:20.749 --> 00:03:26.870
array?
&gt;&gt; Kyle Simpson: Three, right?

52
00:03:26.870 --> 00:03:28.480
Four strings, three values.

53
00:03:28.480 --> 00:03:33.125
Even if we had an expression at
the very beginning of our literal,

54
00:03:33.125 --> 00:03:37.693
there would still be an empty
string in the strings array there.

55
00:03:37.693 --> 00:03:40.255
And even if we had
an expression at the very end,

56
00:03:40.255 --> 00:03:43.000
there would still be
an empty string there.

57
00:03:43.000 --> 00:03:46.820
So it will always be the case
that the strings array

58
00:03:46.820 --> 00:03:49.400
has one more value than the values array.

59
00:03:49.400 --> 00:03:53.590
That is an invariant,
it will always be true or

60
00:03:53.590 --> 00:03:56.560
always be one more string
than there is a value.

61
00:03:56.560 --> 00:04:00.097
So you can probably realize if I
had four strings and three values,

62
00:04:00.097 --> 00:04:01.561
what do I need to do to them?

63
00:04:01.561 --> 00:04:05.840
Loop over them and
interpolate them, right?

64
00:04:05.840 --> 00:04:10.559
Concatenate them together.
&gt;&gt; Kyle Simpson: So the pass through

65
00:04:10.559 --> 00:04:16.367
version of foo that is the version of
foo that acts as if it's not even there.

66
00:04:16.367 --> 00:04:20.733
It's to simply loop over the strings
array and interpolate in the values,

67
00:04:20.733 --> 00:04:22.460
totally untouched.

68
00:04:22.460 --> 00:04:30.000
So let's write that logic, we'll have
a string that we start out as empty.

69
00:04:30.000 --> 00:04:34.727
We do a for loop, for (var i=0;

70
00:04:34.727 --> 00:04:39.461
i&lt;strings.length; i++).

71
00:04:39.461 --> 00:04:44.142
Now, what we're gonna do is
you're gonna say if (i &gt; 0) that

72
00:04:44.142 --> 00:04:47.014
is I'm already done the first string.

73
00:04:47.014 --> 00:04:54.639
Then I wanna include str += values[i- 1].

74
00:04:56.030 --> 00:05:03.133
So I'll include values of 0 after I've
done strings of 0 let alone strings of 1.

75
00:05:03.133 --> 00:05:10.818
And then I'm going to include,
&gt;&gt; Kyle Simpson: Strings of i.

76
00:05:10.818 --> 00:05:16.943
Finally, return the string.
&gt;&gt; Kyle Simpson: So

77
00:05:16.943 --> 00:05:21.976
this is the most basic, simplified
kind of pass through template tag

78
00:05:21.976 --> 00:05:26.803
function that you could define.
&gt;&gt; Kyle Simpson: You following

79
00:05:26.803 --> 00:05:31.514
me?
&gt;&gt; Kyle Simpson: Just to test it,

80
00:05:31.514 --> 00:05:38.183
we'll grab that, come over here
to the browser and run it, msg.

81
00:05:38.183 --> 00:05:42.545
There, we got the same message, okay?
&gt;&gt; Kyle Simpson: But

82
00:05:42.545 --> 00:05:45.470
let's do something
slightly more interesting.

83
00:05:46.530 --> 00:05:48.470
How about in a case when
we're gonna include a value,

84
00:05:48.470 --> 00:05:49.770
what if we did something like this?

85
00:05:51.100 --> 00:05:57.272
What if we said if (typeof values[i-1]

86
00:05:57.272 --> 00:06:05.034
== "number")?
&gt;&gt; Kyle Simpson: What

87
00:06:05.034 --> 00:06:08.852
if we,
&gt;&gt; Kyle Simpson: Did some formating of it?

88
00:06:11.260 --> 00:06:12.388
&gt;&gt; Kyle Simpson: For example,

89
00:06:12.388 --> 00:06:14.552
gave it 2 decimal places.

90
00:06:22.363 --> 00:06:24.030
&gt;&gt; Kyle Simpson: Do you
see what I did there?

91
00:06:24.030 --> 00:06:25.405
So I'm checking one of those values.

92
00:06:25.405 --> 00:06:27.709
If one of those values
comes in as a number,

93
00:06:27.709 --> 00:06:31.677
I wanna format that using the toFixed
method, which gives me rounded to 2

94
00:06:31.677 --> 00:06:34.950
decimal places with zero-padding
on the right if I need it.

95
00:06:36.260 --> 00:06:43.500
Let's try it now.
&gt;&gt; Kyle Simpson: You spot the difference?

96
00:06:44.620 --> 00:06:48.571
Now, we formatted our currency correctly.

97
00:06:48.571 --> 00:06:56.579
So I could call this tag function
currency for example, okay?

98
00:06:56.579 --> 00:07:00.856
And there's lots of more sophistication
that you could probably start to envision

99
00:07:00.856 --> 00:07:03.190
for what you might do
in terms of formatting.

100
00:07:03.190 --> 00:07:07.465
Either strings or the values that
are being interpolated in, or

101
00:07:07.465 --> 00:07:10.091
in both in all kinds of different ways.

102
00:07:10.091 --> 00:07:11.026
As a matter of fact,

103
00:07:11.026 --> 00:07:14.170
people have already written hundreds
of different tag functions.

104
00:07:14.170 --> 00:07:19.070
There are libraries that include all
different manners of tag functions that do

105
00:07:19.070 --> 00:07:24.960
all different kinds of things that you can
think of [COUGH] to do various formatting.

106
00:07:24.960 --> 00:07:31.495
For example, internationalization or
localization of times and numbers.

107
00:07:31.495 --> 00:07:35.844
Or swapping in terminology like we
said with internationalization,

108
00:07:35.844 --> 00:07:39.580
it's all different kinds of
things that you could do.

109
00:07:39.580 --> 00:07:43.547
So basically,
what you end up writing is this code,

110
00:07:43.547 --> 00:07:46.534
that library utility is written once.

111
00:07:46.534 --> 00:07:49.640
But anywhere in your code,
you just say currency.

112
00:07:51.070 --> 00:07:54.210
Instead of telling it how to do all
the formatting of the currency,

113
00:07:54.210 --> 00:07:57.890
you've abstracted that away,
what you have is a declarative string.

114
00:07:59.160 --> 00:08:01.811
You say I want my string to be
formatted with currency, or

115
00:08:01.811 --> 00:08:05.292
I want my string to be formatted with
internationalization, or I want this

116
00:08:05.292 --> 00:08:10.299
string to be formatted with localization.
&gt;&gt; Kyle Simpson: So

117
00:08:10.299 --> 00:08:17.099
it's a declarative form to hide or to
separate out the imperative logic of how

118
00:08:17.099 --> 00:08:21.414
to do the processing from the usage of it.
&gt;&gt; Speaker 2: Is there

119
00:08:21.414 --> 00:08:24.447
an easy way to chain them?
&gt;&gt; Kyle Simpson: The chaining doesn't

120
00:08:24.447 --> 00:08:25.570
happen at the call sign,

121
00:08:25.570 --> 00:08:29.300
the chaining happens through regular
function composition techniques.

122
00:08:29.300 --> 00:08:33.393
So you could take two tag functions and
chain the two together.

123
00:08:33.393 --> 00:08:36.678
But that would be through function
composition, not at the call sign.

124
00:08:44.907 --> 00:08:45.903
&gt;&gt; Speaker 3: [COUGH] If orderNumber

125
00:08:45.903 --> 00:08:48.510
wasn't a string,
how would it know of the difference?

126
00:08:48.510 --> 00:08:49.479
&gt;&gt; Kyle Simpson: It wouldn't,

127
00:08:49.479 --> 00:08:57.042
like I said it's just a simple example,
&gt;&gt; Kyle Simpson: To point out the types

128
00:08:57.042 --> 00:09:03.339
of things that we could do, okay?
&gt;&gt; Kyle Simpson: As a matter of fact,

129
00:09:03.339 --> 00:09:05.780
people have gone really far with this.

130
00:09:07.450 --> 00:09:11.755
Turns out this is
a Turing complete system.

131
00:09:11.755 --> 00:09:15.060
So you could actually invent an entire
programming language as a tag function.

132
00:09:16.170 --> 00:09:17.880
And it's been done on
more than one occasion.

133
00:09:19.060 --> 00:09:21.828
How many of you know what JSX is?

134
00:09:21.828 --> 00:09:26.342
It's the nonstandard standard extension
to JavaScript that allows you to

135
00:09:26.342 --> 00:09:29.680
do HTML tags directly in your JavaScript.

136
00:09:29.680 --> 00:09:31.340
Somebody got the bright idea,

137
00:09:31.340 --> 00:09:36.170
what if I make a tag function that allows
me inside of an actual standard template

138
00:09:36.170 --> 00:09:41.050
literal to interpolate all of that
HTML syntax and do the same thing?

139
00:09:41.050 --> 00:09:44.010
So they made a tag function for JSX.

140
00:09:44.010 --> 00:09:45.352
So now, you can use JSX and

141
00:09:45.352 --> 00:09:49.390
all you gotta do is wrap backticks in
the JSX tag function in front of it.

142
00:09:49.390 --> 00:09:52.699
And now, it's standard and
doesn't need any transpolation for

143
00:09:52.699 --> 00:09:57.779
example.
&gt;&gt; Kyle Simpson: So

144
00:09:57.779 --> 00:10:01.095
there's all kinds of sophisticated
things that you can envision doing with

145
00:10:01.095 --> 00:10:07.219
the preprocessing on your strings.
&gt;&gt; Kyle Simpson: One of the guys that's

146
00:10:07.219 --> 00:10:11.730
on the committee, Alan, he was the former
editor of the editor of the ES6 spec.

147
00:10:11.730 --> 00:10:17.250
His favorite usage of this is to use
these to create regular expressions

148
00:10:17.250 --> 00:10:20.910
that you can do like whitespace, and
other fancy stuff like comments.

149
00:10:20.910 --> 00:10:24.300
So you can make your regular
expressions as a template literal

150
00:10:24.300 --> 00:10:27.645
instead of in the regular expressions
syntax, which is a lot more limited.

151
00:10:27.645 --> 00:10:34.003
[COUGH]
&gt;&gt; Kyle Simpson: Okay,

152
00:10:34.003 --> 00:10:38.257
any questions about that
general process of looping and

153
00:10:38.257 --> 00:10:42.970
interpolating with the string function or
the tag function?

