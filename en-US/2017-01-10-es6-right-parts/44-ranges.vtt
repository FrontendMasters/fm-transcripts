WEBVTT

1
00:00:00.000 --> 00:00:03.911
[MUSIC]

2
00:00:03.911 --> 00:00:06.274
&gt;&gt; Kyle Simpson: So
that constitutes the majority,

3
00:00:06.274 --> 00:00:10.990
the completion of the stuff I
wanted to talk to you about today.

4
00:00:10.990 --> 00:00:15.840
Again, reminding you that this is not a
complete guide through every part of ES6.

5
00:00:15.840 --> 00:00:18.280
You're gonna find some
stuff that's really,

6
00:00:18.280 --> 00:00:21.050
really great like some of the stuff
we've talked about today.

7
00:00:21.050 --> 00:00:24.720
You can find some really really
terrible stuff like ES6 class and

8
00:00:24.720 --> 00:00:26.200
everywhere in between.

9
00:00:26.200 --> 00:00:29.150
And your journey will look different
than my journey to learn ES6 but

10
00:00:29.150 --> 00:00:31.870
hopefully today is the jumping off point.

11
00:00:31.870 --> 00:00:35.730
This is the stuff I think you
should spend the first focus on.

12
00:00:35.730 --> 00:00:40.050
This is the path I think you get into to
learning ES6 is looking at this stuff and

13
00:00:40.050 --> 00:00:43.690
looking at how we can weave these
different features together to

14
00:00:44.840 --> 00:00:45.549
achieve our goals.

15
00:00:46.920 --> 00:00:52.100
But I want to give you one last little
piece of extra credit, just for fun.

16
00:00:52.100 --> 00:00:54.880
Kind of building off of what we just did.

17
00:00:54.880 --> 00:00:56.730
And then I promise,
we're done for the day.

18
00:00:56.730 --> 00:00:57.540
I know it's been a long day.

19
00:00:59.130 --> 00:01:00.650
What I want to do is,

20
00:01:00.650 --> 00:01:06.350
I want to talk about a feature that
is available in some other languages.

21
00:01:06.350 --> 00:01:11.040
And a trick of how we can sort
of mimic it in JavaScript.

22
00:01:11.040 --> 00:01:14.410
I don't know how this feature really works
that well because I don't know any other

23
00:01:14.410 --> 00:01:17.510
languages that well I don't
really know JavaScript either.

24
00:01:17.510 --> 00:01:20.810
But I definitely don't know Ruby for
example or Python but

25
00:01:20.810 --> 00:01:25.450
I know they have this notion
of ranges in those languages.

26
00:01:25.450 --> 00:01:30.900
The ability to just have a number and
then have give us some number.

27
00:01:30.900 --> 00:01:34.830
So I thought what to be interesting.

28
00:01:34.830 --> 00:01:40.530
If I could give myself an array of numbers
by saying something like [...8] and

29
00:01:40.530 --> 00:01:44.926
that would automatically give me all
the numbers in that array from zero

30
00:01:44.926 --> 00:01:45.488
up to eight.

31
00:01:46.550 --> 00:01:50.530
Kind of like the range in some of those
other languages where they can just

32
00:01:50.530 --> 00:01:51.390
automatically do that.

33
00:01:51.390 --> 00:01:54.580
Wouldn't it be cool if I could just
say [...8] and that would just work.

34
00:01:55.720 --> 00:01:59.760
So I got to thinking is this
possible in JavaScript it turns out

35
00:01:59.760 --> 00:02:01.700
it's pretty straight forward.

36
00:02:01.700 --> 00:02:05.440
Because if you remember earlier somebody
asked a question about doing something

37
00:02:05.440 --> 00:02:10.020
against one of the primitives and
I said, whenever you

38
00:02:10.020 --> 00:02:12.980
do something against a primitive
that needs to treated as an object.

39
00:02:12.980 --> 00:02:18.530
What happens is that automatically
boxes it into its object counterpart.

40
00:02:18.530 --> 00:02:21.750
Numbers have a number
object counterpart to them.

41
00:02:21.750 --> 00:02:24.840
The number object has a prototype.

42
00:02:26.090 --> 00:02:29.790
It doesn't by default ship with
an iterator, but we could make one.

43
00:02:31.140 --> 00:02:32.500
So what if we did something like this?

44
00:02:33.680 --> 00:02:39.334
What if we said number.prototype
[Symbol.iterator]

45
00:02:45.621 --> 00:02:46.703
&gt;&gt; Kyle Simpson: As a generator,

46
00:02:46.703 --> 00:02:49.960
I'll it anonymous just to
save space in the line.

47
00:02:52.380 --> 00:02:56.227
And we're not even to worry about being
able to pass in arguments, so I'm just

48
00:02:56.227 --> 00:03:00.018
gonna make the plain old default value
just to show you exactly the same kind of

49
00:03:00.018 --> 00:03:05.711
things we did before, what if I said
&gt;&gt; Kyle Simpson: Now

50
00:03:05.711 --> 00:03:06.650
where do I want to start?

51
00:03:06.650 --> 00:03:08.840
I want to start at zero.

52
00:03:08.840 --> 00:03:11.310
Maybe I don't want to start at zero,
maybe you want to start somewhere else.

53
00:03:11.310 --> 00:03:12.250
I'm going to start at zero.

54
00:03:12.250 --> 00:03:16.850
I'm going to say I is less then and
here's the trick,

55
00:03:16.850 --> 00:03:22.450
this keyword inside of that is
going to refer to the number object

56
00:03:22.450 --> 00:03:27.800
itself when coerced to the value it's
gonna be the value that that number is.

57
00:03:27.800 --> 00:03:35.600
So I can just say i less
than this i++ yield i.

58
00:03:35.600 --> 00:03:38.340
Now I have native ranges
built into JavaScript.

59
00:03:39.500 --> 00:03:42.490
So we take that we put it over here.

60
00:03:44.890 --> 00:03:47.264
And if I say [...8].

61
00:03:47.264 --> 00:03:50.440
You get the array,
I didn't do less than or equal to.

62
00:03:50.440 --> 00:03:52.004
I should've done less than or equal to.

63
00:04:02.854 --> 00:04:04.605
&gt;&gt; Kyle Simpson: Now I have ranges.

64
00:04:04.605 --> 00:04:09.095
Now I actually my blog at the moment
is not I had a blog post.

65
00:04:09.095 --> 00:04:11.735
And I will be back at some point soon but
you could extend this.

66
00:04:11.735 --> 00:04:15.715
And maybe has some homework for you see if
you could think about how would you extend

67
00:04:15.715 --> 00:04:18.605
this to be able to do negative ranges,
what if I said negative three.

68
00:04:19.770 --> 00:04:21.770
Could you detect that it
was a negative number and

69
00:04:21.770 --> 00:04:25.260
instead of doing plus plus
you could do minus minus and

70
00:04:25.260 --> 00:04:28.870
go from zero down to negative one down
to negative two down to negative three.

71
00:04:28.870 --> 00:04:32.870
Could you support being able to pass
in customization of your range through

72
00:04:32.870 --> 00:04:34.720
arguments just like we
did in exercise five?

73
00:04:34.720 --> 00:04:39.630
With just a fun little trick to look at
the things that we now have available

74
00:04:39.630 --> 00:04:44.060
to us and push the language to support the
kinds of things that we'd like to write.

