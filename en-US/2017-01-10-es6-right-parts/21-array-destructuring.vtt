WEBVTT

1
00:00:00.000 --> 00:00:03.888
[MUSIC]

2
00:00:03.888 --> 00:00:05.312
&gt;&gt; Kyle Simpson: Let's
set this up real simply,

3
00:00:05.312 --> 00:00:08.479
lets imagine we have a function called
foo that returns us something and

4
00:00:08.479 --> 00:00:11.060
I'm gonna start easy,
I'm gonna start with an array.

5
00:00:11.060 --> 00:00:14.214
Let's say it returns us an array like [1,
2, 3].

6
00:00:14.214 --> 00:00:19.730
And then we wanna consume that value,
in some other part of our program.

7
00:00:19.730 --> 00:00:24.350
So we're gonna to call foo and what we're
gonna get back is an array which is great,

8
00:00:24.350 --> 00:00:27.580
we can say var array and
get back that array.

9
00:00:27.580 --> 00:00:28.275
But what if,

10
00:00:28.275 --> 00:00:32.399
in that part of our code we need to
individually reference different values?

11
00:00:32.399 --> 00:00:35.609
We don't wanna say, arr of 0, arr of 1,

12
00:00:35.609 --> 00:00:41.066
what if we want lexical names to
reference in like for example a, b and c.

13
00:00:41.066 --> 00:00:44.936
So, what you might be
in the habit of doing,

14
00:00:44.936 --> 00:00:49.647
is something like assigning
this the tmp variable and

15
00:00:49.647 --> 00:00:53.324
then creating individual assignments.

16
00:00:58.542 --> 00:01:02.361
&gt;&gt; Kyle Simpson: Whether you knew it or
not, this practice has a sort of general

17
00:01:02.361 --> 00:01:05.531
category name in that
practice is destructuring.

18
00:01:05.531 --> 00:01:09.468
And that term,
that idea of manually destructuring,

19
00:01:09.468 --> 00:01:14.945
the way to think about what that means is
to take a structure llike an object or

20
00:01:14.945 --> 00:01:21.223
an array, and to deconstruct it down into
its constituent parts through assignment.

21
00:01:21.223 --> 00:01:27.300
So really,
destructuring is an assignment operation.

22
00:01:27.300 --> 00:01:29.230
It's taking some bigger thing and

23
00:01:29.230 --> 00:01:32.720
assigning off its individual parts,
into different variables.

24
00:01:34.320 --> 00:01:35.610
We can do so manually.

25
00:01:35.610 --> 00:01:38.881
But this of course,
is the imperative version.

26
00:01:38.881 --> 00:01:42.221
And it's not too complicated right now,
because there's only three of them.

27
00:01:42.221 --> 00:01:47.400
But we can start to throw more and more
bits into the process and very quickly,

28
00:01:47.400 --> 00:01:52.181
that imperative code is gonna get
super complicated to read through and

29
00:01:52.181 --> 00:01:53.150
understand.

30
00:01:54.630 --> 00:01:58.480
So now, we wanna look to does JavaScript
give us an option and the answer is yes,

31
00:01:58.480 --> 00:01:59.990
it does give us an option.

32
00:01:59.990 --> 00:02:05.591
A declarative form of this
destructuring assignment.

33
00:02:05.591 --> 00:02:07.843
So same code.

34
00:02:07.843 --> 00:02:09.270
We'll start with the foo.

35
00:02:11.530 --> 00:02:15.330
But now what we're gonna talk about,
is what's called array destructuring.

36
00:02:15.330 --> 00:02:16.704
This is gonna look strange.

37
00:02:16.704 --> 00:02:19.190
It's gonna look strange if you're

38
00:02:19.190 --> 00:02:22.790
in the habit of trying to think
syntactically about what you're writing,

39
00:02:22.790 --> 00:02:26.460
this is going to be something new that
you haven't seen in JavaScript before.

40
00:02:27.600 --> 00:02:30.990
What we're gonna do is, and
I won't even put this part yet.

41
00:02:30.990 --> 00:02:33.580
I'll put on the other side
we're gonna take the foo value,

42
00:02:34.890 --> 00:02:39.080
the return value from the foo call,
and we're gonna destructure it.

43
00:02:39.080 --> 00:02:42.540
The way we're gonna destructure it is,
we're gonna declare over here

44
00:02:42.540 --> 00:02:45.860
something that looks like an array but
it's not an array.

45
00:02:47.440 --> 00:02:52.310
And that array looking thing
that's not actually an array,

46
00:02:52.310 --> 00:02:55.160
is going to say where we'd
like stuff to be assigned.

47
00:02:55.160 --> 00:02:58.800
It's basically gonna list out a set
of targets for those assignments.

48
00:02:58.800 --> 00:03:02.910
So we could say something like a,
b, and c.

49
00:03:02.910 --> 00:03:08.020
So, it looks like an array on
the left hand side of an assignment.

50
00:03:08.020 --> 00:03:11.540
If it were an array, this would be
a nonsense statement because there's

51
00:03:11.540 --> 00:03:14.470
no such thing as having an array
being the source of an assignment.

52
00:03:15.740 --> 00:03:17.380
And array is a value.

53
00:03:17.380 --> 00:03:19.550
It is the I'm sorry,

54
00:03:19.550 --> 00:03:22.890
there's no such thing as making
array the target of an assignment.

55
00:03:22.890 --> 00:03:26.180
It is always the source of an assignment,
because it's a value.

56
00:03:26.180 --> 00:03:28.740
Butt this isn't an array what this is,
is a pattern.

57
00:03:31.200 --> 00:03:36.310
There is an analog that's similar
not the same but similar in other

58
00:03:36.310 --> 00:03:39.720
programming languages that you may have
heard of before, called pattern matching.

59
00:03:40.770 --> 00:03:45.690
This is not real pattern matching,
but it's kind of in the same vicinity.

60
00:03:45.690 --> 00:03:50.360
Because what we're saying to JavaScript
is I'm going to declare a pattern,

61
00:03:50.360 --> 00:03:54.510
that describes what sort of
value I'm expecting here.

62
00:03:54.510 --> 00:03:56.930
And I want you to take that pattern and
do the work for me.

63
00:03:59.720 --> 00:04:00.880
So what we're doing is saying,

64
00:04:00.880 --> 00:04:05.170
we are expecting an array that
has at least three values here.

65
00:04:05.170 --> 00:04:08.620
And we would like for
you JavaScript engine to take that value,

66
00:04:08.620 --> 00:04:11.030
deconstruct it down to
its individual parts and

67
00:04:11.030 --> 00:04:15.470
take the item in the first position,
assign it to a variable called a.

68
00:04:15.470 --> 00:04:18.010
The item in the second position
to a variable called b.

69
00:04:18.010 --> 00:04:22.030
And the item in the third
position to a variable called c.

70
00:04:22.030 --> 00:04:26.822
It's a declaration of a pattern for
assignment, rather than telling JavaScript

71
00:04:26.822 --> 00:04:31.279
how to do the assignment, we're saying
this is the end result that we want.

72
00:04:34.030 --> 00:04:34.658
&gt;&gt; Kyle Simpson: Are you following me?

73
00:04:40.118 --> 00:04:42.789
&gt;&gt; Kyle Simpson: Now,
it won't be obvious yet why.

74
00:04:42.789 --> 00:04:44.920
But it will as we go along.

75
00:04:44.920 --> 00:04:46.640
That I'm gonna say.

76
00:04:46.640 --> 00:04:49.070
As soon as you have more than like two or

77
00:04:49.070 --> 00:04:54.170
three of these, you're not gonna
wanna put these all on one line.

78
00:04:54.170 --> 00:04:57.960
Just like it's not a good idea to try to
put your arrow functions all on one line

79
00:04:57.960 --> 00:05:00.240
just cuz, so you look elite.

80
00:05:00.240 --> 00:05:03.100
I think you're gonna
wanna spread these out.

81
00:05:03.100 --> 00:05:06.180
Now, something about JavaScript
developers that I know is that,

82
00:05:06.180 --> 00:05:09.800
we are absolutely allergic to
white space and new lines.

83
00:05:09.800 --> 00:05:14.356
We do everything that we possibly can to
get rid of this unnecessary white space in

84
00:05:14.356 --> 00:05:15.026
new lines.

85
00:05:15.026 --> 00:05:19.715
It's absolutely ridiculous to me, because
white space and new lines are free.

86
00:05:19.715 --> 00:05:22.340
And they're one of the best tools
that we can use for readability.

87
00:05:23.596 --> 00:05:27.532
So I'm gonna say, stop that habit
of yours of trying to look for

88
00:05:27.532 --> 00:05:30.891
every possible way to get
stuff up onto another line.

89
00:05:30.891 --> 00:05:36.133
Use new lines, and white space,
and indentation liberally.

90
00:05:36.133 --> 00:05:39.565
Because it's one of the best ways that
you can make your code more effective

91
00:05:39.565 --> 00:05:40.500
at communication.

92
00:05:41.870 --> 00:05:44.470
Look for the opportunities that you have,

93
00:05:44.470 --> 00:05:47.830
to format your code in such a way
that it will be more readable.

94
00:05:49.090 --> 00:05:50.370
So what I've just done is break,

95
00:05:50.370 --> 00:05:54.070
broken those out onto another line as
opposed to putting them all in one line.

96
00:05:54.070 --> 00:05:56.300
Won't be terribly obvious yet
why I did that but

97
00:05:56.300 --> 00:05:59.670
you'll see in just a moment, why I really
think you're going to want to get in

98
00:05:59.670 --> 00:06:04.080
the habit of putting your destructuring
patterns broken out across multiple lines.

99
00:06:04.080 --> 00:06:04.650
Yes?

100
00:06:04.650 --> 00:06:08.040
&gt;&gt; Speaker 2: Breaking it out across
multiple lines also has that side effect

101
00:06:08.040 --> 00:06:10.020
if you use something like git.

102
00:06:10.020 --> 00:06:12.500
Of making your difs more clear-
&gt;&gt; Kyle Simpson: True.

103
00:06:12.500 --> 00:06:14.660
&gt;&gt; Speaker 2: When I've added one value,
so.

104
00:06:14.660 --> 00:06:16.194
&gt;&gt; Kyle Simpson: Very true.

105
00:06:16.194 --> 00:06:19.497
That's not really anything about
destructuring, but you're absolutely true.

106
00:06:19.497 --> 00:06:22.100
If you break things on to multiple lines,
and

107
00:06:22.100 --> 00:06:26.260
git obviously makes its differences
in a line based sort of way.

108
00:06:26.260 --> 00:06:28.800
So, it's a lot easier when
you have multiple lines,

109
00:06:28.800 --> 00:06:30.220
to know where the differences are.

110
00:06:30.220 --> 00:06:34.290
Of course, now we have the problem of
coma first or coma last with gits or

111
00:06:34.290 --> 00:06:35.960
whatever, but that's a separate issue.

112
00:06:38.400 --> 00:06:42.020
And by the way, you can do trailing comas.

113
00:06:42.020 --> 00:06:49.240
So, you can get a little away from
the get problems if you want to.

114
00:06:49.240 --> 00:06:53.510
So what we said here is go break this
thing down and assign these things.

115
00:06:53.510 --> 00:06:55.690
Now what would happen if

116
00:06:56.980 --> 00:06:59.330
the array that we a that we got
back actually had fewer values.

117
00:07:01.180 --> 00:07:04.766
But just think about it from a processing
perspective what would happen

118
00:07:04.766 --> 00:07:08.787
is exactly what you would expect, which
is it would try to go to the array value.

119
00:07:08.787 --> 00:07:14.427
And it would look for an item in position
two, because we said we're expecting

120
00:07:14.427 --> 00:07:19.478
an item in position two, what would
it get back if it said array of two?

121
00:07:19.478 --> 00:07:20.690
It would get back undefined.

122
00:07:21.820 --> 00:07:24.670
Because that's not a present
value in our array.

123
00:07:24.670 --> 00:07:26.620
So c is still gonna work,

124
00:07:26.620 --> 00:07:29.860
the assignment is just going to be
that c's starts out as undefined.

125
00:07:31.770 --> 00:07:35.180
So, it's totally okay for
our pattern to account for

126
00:07:35.180 --> 00:07:36.770
more values than we actually get.

127
00:07:38.230 --> 00:07:42.060
It's also okay to get back more
values than we account for.

128
00:07:44.120 --> 00:07:48.490
If we only account for these three,
the value 4 that comes back.

129
00:07:48.490 --> 00:07:50.800
That gets silently thrown away.

130
00:07:50.800 --> 00:07:51.300
No big deal.

131
00:07:53.368 --> 00:07:57.479
&gt;&gt; Kyle Simpson: So this pattern does not
have to be a fully inclusive pattern,

132
00:07:57.479 --> 00:08:01.441
it can be a partial pattern for
the stuff that we care about.

133
00:08:01.441 --> 00:08:03.915
That's the point I'm trying to make.

134
00:08:03.915 --> 00:08:04.589
Yes.

135
00:08:04.589 --> 00:08:07.270
&gt;&gt; Speaker 2: Can you have
default values in that?

136
00:08:07.270 --> 00:08:08.390
&gt;&gt; Kyle Simpson: We're getting there.

137
00:08:08.390 --> 00:08:09.031
We're getting there, okay?

138
00:08:14.617 --> 00:08:17.990
&gt;&gt; Kyle Simpson: This pattern says I'm
expecting something kind of in this shape.

139
00:08:17.990 --> 00:08:21.870
Let me give you a scenario, and
it's not gonna look obvious yet.

140
00:08:21.870 --> 00:08:26.037
But let me give you a scenario,
where I really think this starts to shine.

141
00:08:26.037 --> 00:08:32.245
You call a function or get some value back
from say an API call to some JSON API.

142
00:08:32.245 --> 00:08:36.156
And you get back some big complex
object of arrays, of objects and

143
00:08:36.156 --> 00:08:38.410
all that other stuff.

144
00:08:38.410 --> 00:08:42.400
And you wanna reference things, three or
four levels deep down inside of this

145
00:08:42.400 --> 00:08:45.160
one part of this big object that
you know you're getting back.

146
00:08:45.160 --> 00:08:46.877
You wanna reference those
with lexical variables.

147
00:08:46.877 --> 00:08:52.232
What do you do, you end up doing some
really complicated version of what

148
00:08:52.232 --> 00:08:57.942
we have on the left where it says,
tmp of 0.a of 3.foo.bar.baz of 1 and

149
00:08:57.942 --> 00:09:02.699
going really, really deep and
all this crazy nesting into it.

150
00:09:02.699 --> 00:09:05.780
And now your code is super imperative and
super confusing.

151
00:09:07.490 --> 00:09:11.490
Or, you can declare a nice
clean pattern that says,

152
00:09:11.490 --> 00:09:14.560
this is the shape of stuff
I'm expecting to get back and

153
00:09:14.560 --> 00:09:17.550
if I get something that matches the shape
I want you to make these assignments.

154
00:09:19.730 --> 00:09:23.040
That's the difference between
declarative an imperative here.

