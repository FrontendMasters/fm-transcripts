WEBVTT

1
00:00:00.000 --> 00:00:03.889
[MUSIC]

2
00:00:03.889 --> 00:00:06.775
&gt;&gt; Kyle Simpson: If we can
destructure a single level of arrays,

3
00:00:06.775 --> 00:00:09.600
we can obviously
destructure nested arrays.

4
00:00:10.600 --> 00:00:14.955
So I could, it might be the case, that I
would have in this position an array that

5
00:00:14.955 --> 00:00:17.109
had [4, 5, 6] in a nested array.

6
00:00:17.109 --> 00:00:20.210
Okay, I'll spread that out so
it's a little easier to read.

7
00:00:23.910 --> 00:00:27.550
Okay, so now at the fourth position,
we actually have an array with four,

8
00:00:27.550 --> 00:00:28.220
five, six, and.

9
00:00:30.090 --> 00:00:32.000
What is args gonna have
in this particular case?

10
00:00:34.640 --> 00:00:39.690
Tell me what the structure
of args would be.

11
00:00:39.690 --> 00:00:41.516
&gt;&gt; Speaker 2: The array four, five, six
&gt;&gt; Kyle Simpson: No.

12
00:00:50.920 --> 00:00:55.593
&gt;&gt; Speaker 2: An array
where the first item is

13
00:00:55.593 --> 00:00:59.664
array 4,5,6-
&gt;&gt; Kyle Simpson: Exactly.

14
00:00:59.664 --> 00:01:03.450
args would be an array
with one item in it.

15
00:01:03.450 --> 00:01:09.099
The item in that one position in args
would be the array 4, 5, 6, okay?

16
00:01:09.099 --> 00:01:11.600
Do you follow that?

17
00:01:13.500 --> 00:01:15.590
All right, but what if I didn't want that?

18
00:01:15.590 --> 00:01:18.323
What if I didn't want that
thing as one big array?

19
00:01:18.323 --> 00:01:21.800
What if I wanted 4, 5, and
6 individually addressable?

20
00:01:21.800 --> 00:01:25.701
Well, I can do array destructuring,
right inside of my pattern.

21
00:01:25.701 --> 00:01:28.937
A nested array destructuring that says,
make d the first one,

22
00:01:28.937 --> 00:01:32.800
I don't care about the second one,
and make e the third one, for example.

23
00:01:34.370 --> 00:01:38.090
As long as I had those as
locations that I could assign to.

24
00:01:38.090 --> 00:01:41.210
So now d is going to be the value 4 and
e's going to be the value 6.

25
00:01:46.800 --> 00:01:51.180
Array destructuring uses position,
just like regular arrays use position.

26
00:01:51.180 --> 00:01:52.720
When we talk about object destructuring,

27
00:01:52.720 --> 00:01:54.800
you'll see those use property
names to be the mapping.

28
00:01:54.800 --> 00:02:01.740
But here there's an implicit mapping
from zero to a, and from 1 to b.

29
00:02:01.740 --> 00:02:04.218
Because we're using the position,
instead of the property name.

30
00:02:12.319 --> 00:02:15.314
&gt;&gt; Kyle Simpson: So now you can start to
see, you can start to visualize that if I

31
00:02:15.314 --> 00:02:18.400
had a really complex structure
coming back from an API.

32
00:02:18.400 --> 00:02:23.107
I could have a nice little nested list of
all the stuff that I cared about nesting

33
00:02:23.107 --> 00:02:27.834
down in array, inside of an object,
inside of an array, inside or whatever.

34
00:02:27.834 --> 00:02:29.257
And then I'd have my two or

35
00:02:29.257 --> 00:02:33.655
three little variables that I cared about
like first name and e-mail address and

36
00:02:33.655 --> 00:02:38.760
those the only ones I care about and
the pattern becomes a self documentation.

37
00:02:38.760 --> 00:02:40.770
How many of you have ever done before,

38
00:02:40.770 --> 00:02:42.570
have some kind of API
that you're consuming?

39
00:02:42.570 --> 00:02:45.706
And what you do is take a capture
of that API structure and

40
00:02:45.706 --> 00:02:47.455
put it into your JS.comment.

41
00:02:47.455 --> 00:02:51.434
Because you need to document what the hell
you're expecting to come back from

42
00:02:51.434 --> 00:02:55.120
this function call right now your
pattern becomes your self document.

43
00:02:56.240 --> 00:03:00.230
You document what you're expecting by
doing the destructuring pattern according

44
00:03:00.230 --> 00:03:01.430
to what you're expecting to get back.

45
00:03:03.020 --> 00:03:05.680
No need to duplicate it in js.comment,

46
00:03:05.680 --> 00:03:08.400
it's just right there in the structure,
okay?

47
00:03:09.980 --> 00:03:13.265
That's what I meant when I said earlier
that the destructuring becomes a thing

48
00:03:13.265 --> 00:03:14.918
that pays off bigger than just itself.

49
00:03:14.918 --> 00:03:19.903
Because now it starts to teach you
something about the bigger aspect

50
00:03:19.903 --> 00:03:22.040
of what's going in coding.

51
00:03:22.040 --> 00:03:24.346
The time spent for
you to learn how this works,

52
00:03:24.346 --> 00:03:26.666
pays off far beyond just
that one line of code.

53
00:03:31.042 --> 00:03:32.530
&gt;&gt; Kyle Simpson: Question about array and
object?

54
00:03:32.530 --> 00:03:38.930
Yep, we're going to get to mixing
them in just a little bit.

55
00:03:38.930 --> 00:03:42.180
&gt;&gt; Speaker 3: A moment ago on
line eleven you had ...args.

56
00:03:42.180 --> 00:03:43.050
&gt;&gt; Kyle Simpson: Yep.

57
00:03:43.050 --> 00:03:47.464
&gt;&gt; Speaker 3: And I don't think I
ever got how that would come back

58
00:03:47.464 --> 00:03:50.657
as a single element within an array.

59
00:03:50.657 --> 00:03:52.350
Can you turn through that one again?

60
00:03:52.350 --> 00:03:54.000
&gt;&gt; Kyle Simpson: Yep,
let's go through this one more time.

61
00:03:54.000 --> 00:03:59.220
...args is at the top level of
our array destructuring pattern.

62
00:03:59.220 --> 00:04:02.790
Which is saying,
any items that are left in my array

63
00:04:02.790 --> 00:04:05.389
should all be collected up
into an array called arg.

64
00:04:06.570 --> 00:04:08.740
What is the only item
that's left in our array?

65
00:04:09.900 --> 00:04:11.650
It's an array value.

66
00:04:11.650 --> 00:04:17.225
So there's going to be a single array
holding that one value at position zero.

67
00:04:17.225 --> 00:04:18.340
Does that help?

68
00:04:19.790 --> 00:04:22.670
&gt;&gt; Speaker 4: Oscar has
a question about why do you need

69
00:04:22.670 --> 00:04:24.410
all those vars at line five?

70
00:04:24.410 --> 00:04:27.476
&gt;&gt; Kyle Simpson: Only because I'm
not putting the var right here.

71
00:04:27.476 --> 00:04:30.315
Remember I switched from
doing declaration syntax

72
00:04:30.315 --> 00:04:32.930
to doing general assignments syntax.

73
00:04:32.930 --> 00:04:35.980
So if I go back to the declaration syntax,
it's a little easier for us, okay.

74
00:04:41.227 --> 00:04:43.096
&gt;&gt; Speaker 5: Not that I
would encourage doing it but

75
00:04:43.096 --> 00:04:46.438
does it work if you don't have a var and
you treat that as global's?

76
00:04:46.438 --> 00:04:50.720
Or will it not allow global assignments?

77
00:04:50.720 --> 00:04:52.450
&gt;&gt; Kyle Simpson: Now it will
allow global assignments,

78
00:04:52.450 --> 00:04:55.320
if you don't have a var there it
will allow a global assignment.

79
00:04:55.320 --> 00:04:57.260
But then you have the question of,
if you're in strict mode,

80
00:04:57.260 --> 00:05:00.195
which you should be in strict mode,
then you're going to get an error.

81
00:05:00.195 --> 00:05:01.463
Cuz that's not allowed in strict mode.

82
00:05:10.146 --> 00:05:15.619
&gt;&gt; Kyle Simpson: Okay so,

83
00:05:18.450 --> 00:05:20.823
&gt;&gt; Kyle Simpson: We can either account for

84
00:05:20.823 --> 00:05:25.573
one of the values here,
or we can destructure it.

85
00:05:25.573 --> 00:05:31.000
Or we can collect it with a ...args,
but we can't do both.

86
00:05:31.000 --> 00:05:32.890
That will be different
when we get to objects,

87
00:05:32.890 --> 00:05:35.870
it will be possible to double account for
something with objects.

88
00:05:35.870 --> 00:05:36.568
And we'll get to that in a moment.

89
00:05:36.568 --> 00:05:42.175
But with the rains this
position is either ...args.

90
00:05:42.175 --> 00:05:44.092
Or it's a variable called d, or

91
00:05:44.092 --> 00:05:47.789
it's a destructuring pattern
that's broken down further.

92
00:05:48.810 --> 00:05:50.980
You gotta pick one of those three, okay?

93
00:05:59.689 --> 00:06:00.530
&gt;&gt; Kyle Simpson: All right.

94
00:06:00.530 --> 00:06:06.660
Another thing before we move on to
talking about objects is this idea that,

95
00:06:08.220 --> 00:06:17.581
I'm not sure I have the best
way to illustrate this.

96
00:06:23.469 --> 00:06:26.628
&gt;&gt; Kyle Simpson: What's happening here
if we went back to that simple case,

97
00:06:26.628 --> 00:06:29.163
is we do have a declaration
that's occurring.

98
00:06:29.163 --> 00:06:31.152
But we also have- and actually,

99
00:06:31.152 --> 00:06:34.150
this is going to be a lot
simpler if I do it this way.

100
00:06:34.150 --> 00:06:37.082
So I'm going to go back to that case
where I'm just doing destructuring and

101
00:06:37.082 --> 00:06:38.303
sign it without declaration.

102
00:06:38.303 --> 00:06:40.330
Just keep it simpler.

103
00:06:40.330 --> 00:06:44.560
What happening here is that there's
an assignment expression happening and

104
00:06:44.560 --> 00:06:48.380
the end result of the assignment
expression is itself of value.

105
00:06:48.380 --> 00:06:52.030
We already saw that earlier in one of
our exercises where I assigned an arrow

106
00:06:52.030 --> 00:06:55.406
function to a very variable in the arrow
function came back from the assignment.

107
00:06:55.406 --> 00:07:03.390
So here we have, what do you think,
Would be the value of x?

108
00:07:07.339 --> 00:07:10.370
&gt;&gt; Kyle Simpson: First off, do you
think this is valid syntax, yes or no?

109
00:07:14.361 --> 00:07:17.341
&gt;&gt; Kyle Simpson: And by that, I mean,
convince yourself that it is valid syntax.

110
00:07:17.341 --> 00:07:18.545
Why is it valid syntax?

111
00:07:34.160 --> 00:07:37.939
&gt;&gt; Kyle Simpson: Why is this,
for example, not an array?

112
00:07:41.451 --> 00:07:43.160
&gt;&gt; Speaker 6: Cuz it's
still an assignment target.

113
00:07:43.160 --> 00:07:45.730
&gt;&gt; Kyle Simpson: Cuz it's still on
the left hand side of that assignment.

114
00:07:45.730 --> 00:07:47.890
So it's still in an assignment context.

115
00:07:47.890 --> 00:07:52.940
Now this assignment happens and
some value comes back.

116
00:07:54.060 --> 00:08:00.380
Many people think that x will
be the array of 1 and 2.

117
00:08:00.380 --> 00:08:02.974
Cuz they're thinking to themselves,

118
00:08:02.974 --> 00:08:08.405
what comes back from that assignment is
only what I captured in my destructuring.

119
00:08:08.405 --> 00:08:10.746
But that is the wrong thinking,

120
00:08:10.746 --> 00:08:14.829
because that is thinking that bracket a,
b is an array.

121
00:08:16.060 --> 00:08:18.910
Bracket a, b isn't an array, is it?

122
00:08:18.910 --> 00:08:21.110
It's a pattern for
how to break down an array.

123
00:08:22.310 --> 00:08:25.640
So what do you think actually comes
back from a destructuring assignment?

124
00:08:27.330 --> 00:08:29.390
The whole array, right?

125
00:08:29.390 --> 00:08:35.580
So x is actually gonna be the whole
thing 1, 2, 3 with an array in 4,5,6.

126
00:08:35.580 --> 00:08:37.870
That's what comes back
from the assignment, okay?

127
00:08:40.050 --> 00:08:43.250
The destructuring assignment
is not creating a new sub

128
00:08:43.250 --> 00:08:47.770
array of just two items, it's breaking
down the array according to a pattern.

129
00:08:48.830 --> 00:08:52.550
That's a subtle but
really important processing signal.

130
00:08:52.550 --> 00:08:56.920
&gt;&gt; Speaker 6: So in the same thing, you
could switch s with ab destructuring and

131
00:08:56.920 --> 00:08:59.247
then you'd still get the same results,
right?

132
00:08:59.247 --> 00:09:02.640
Cuz x would be the entirety of foo?

133
00:09:02.640 --> 00:09:07.029
&gt;&gt; Kyle Simpson: If you did that,
&gt;&gt; Kyle Simpson: Now you're

134
00:09:07.029 --> 00:09:09.620
declarator with applied var a and b.

135
00:09:09.620 --> 00:09:11.500
And this line would be redundant.

136
00:09:12.670 --> 00:09:15.750
But x wouldn't exist, so
you would need to declare x.

137
00:09:15.750 --> 00:09:18.690
&gt;&gt; Speaker 6: [INAUDIBLE] But
otherwise, same result, correct?

138
00:09:18.690 --> 00:09:19.500
&gt;&gt; Kyle Simpson: Same result, okay?

139
00:09:20.680 --> 00:09:25.385
But I want to go back to the case where
we don't have the declarator involved.

140
00:09:25.385 --> 00:09:26.980
I want to go back to this particular case.

141
00:09:30.940 --> 00:09:32.100
Because I just said,

142
00:09:32.100 --> 00:09:35.940
and that's what prompted me to go
off on this little rabbit trail.

143
00:09:35.940 --> 00:09:41.825
I just said, well, you can either account
for a position using a lexical name or

144
00:09:41.825 --> 00:09:45.684
using a ...gather or
using a nested destructure.

145
00:09:45.684 --> 00:09:48.070
But you can do multiples.

146
00:09:49.200 --> 00:09:51.140
Actually you kind of can,

147
00:09:51.140 --> 00:09:54.290
because you can chain multiple
destructuring patterns together,

148
00:09:54.290 --> 00:09:58.470
since every destructuring assignment
returns the original full array.

149
00:09:58.470 --> 00:10:02.796
So I could say something like a,
b, ...args,

150
00:10:02.796 --> 00:10:08.055
which is going to collect three and
the array 4, 5, 6 in.

151
00:10:08.055 --> 00:10:11.731
And I could also have
another destructuring.

152
00:10:13.357 --> 00:10:15.243
&gt;&gt; Kyle Simpson: I'm going to start
breaking these on multiple lines for

153
00:10:15.243 --> 00:10:16.220
readability.

154
00:10:16.220 --> 00:10:20.927
Okay, I could also another destructuring,
which doesn't care about

155
00:10:20.927 --> 00:10:25.170
any of those first ones, but
starts breaking down 4, 5, 6.

156
00:10:32.471 --> 00:10:34.700
&gt;&gt; Kyle Simpson: Okay, let me try to use
some whitespace here to help make this

157
00:10:34.700 --> 00:10:35.760
a little bit more readable.

158
00:10:50.177 --> 00:10:51.815
&gt;&gt; Kyle Simpson: So
let's go from the bottom to the top.

159
00:10:51.815 --> 00:10:54.675
First the foo function
returns us an array.

160
00:10:54.675 --> 00:10:59.620
We destructure, assign a to the value 1,
b to the value 2.

161
00:10:59.620 --> 00:11:04.900
And collect in the args the value 3 and
the value 4, 5, 6.

162
00:11:04.900 --> 00:11:06.160
You with me?

163
00:11:07.410 --> 00:11:10.498
Then we say the whole array
again is returned, and

164
00:11:10.498 --> 00:11:14.922
then we do another destructuring,
which throws away the first three.

165
00:11:14.922 --> 00:11:19.228
And then it goes into that 4, 5, 6 and

166
00:11:19.228 --> 00:11:25.470
it says c should be the value 4 and
d should be the value 5.

167
00:11:25.470 --> 00:11:28.990
So it is possible to chain multiple
destructuring patterns together to

168
00:11:28.990 --> 00:11:33.640
accomplish that trick of doing accounting
for the array in multiple ways.

169
00:11:40.211 --> 00:11:42.600
&gt;&gt; Kyle Simpson: Any questions
about array destructuring?

170
00:11:45.680 --> 00:11:49.173
&gt;&gt; Speaker 7: When you do multiple levels
like this do you have to have the,

171
00:11:49.173 --> 00:11:51.159
I'm assuming you need like var a,

172
00:11:51.159 --> 00:11:52.683
b outside of the-
&gt;&gt; Kyle Simpson: Yeah,

173
00:11:52.683 --> 00:11:55.010
we would have had to do all of that.

174
00:11:56.360 --> 00:11:59.476
The var is only gonna apply
to the left most pattern.

175
00:11:59.476 --> 00:12:05.231
So, we could of done var here,
and then had a var av.

176
00:12:08.148 --> 00:12:11.470
&gt;&gt; Kyle Simpson: And args, or
we could have done all of them.

177
00:12:12.650 --> 00:12:15.931
It's probably what I would have done,
and had no declaratory attached.

178
00:12:15.931 --> 00:12:21.447
&gt;&gt; Speaker 7: So requests for
more concrete function in var names.

179
00:12:21.447 --> 00:12:22.519
I know why you do this,

180
00:12:22.519 --> 00:12:25.259
but I thought maybe you'd want to-
&gt;&gt; Kyle Simpson: I understand

181
00:12:25.259 --> 00:12:28.300
the request for more concrete names.

182
00:12:28.300 --> 00:12:30.440
I don't really want to get
into the full reason why, but

183
00:12:30.440 --> 00:12:33.550
I just want to tell you it's not
because I'm uncreative or lazy.

184
00:12:33.550 --> 00:12:35.975
There's a reason why I teach
with the foo and the var.

185
00:12:35.975 --> 00:12:40.731
And there's a reason why I try to make
your exercises not necessarily use too

186
00:12:40.731 --> 00:12:42.400
much of the foo in the var.

187
00:12:42.400 --> 00:12:43.058
So, we're doing both.

188
00:12:43.058 --> 00:12:46.770
I'm teaching the concepts
with the simple stuff,

189
00:12:46.770 --> 00:12:50.330
and then we try to apply
it with less weird stuff.

190
00:12:50.330 --> 00:12:55.560
That's not always the case, a few of
the exercises have to use those but.

191
00:12:55.560 --> 00:12:56.565
What about args?

192
00:12:56.565 --> 00:13:01.100
&gt;&gt; Speaker 7: Do you still
think of using that here?

193
00:13:01.100 --> 00:13:03.745
Because to me it's like args
might be used in a function.

194
00:13:03.745 --> 00:13:05.601
&gt;&gt; Kyle Simpson: Yeah,
maybe there's better name for that.

195
00:13:05.601 --> 00:13:07.872
&gt;&gt; Speaker 7: And just,
could you call it some letter?

196
00:13:10.485 --> 00:13:11.190
&gt;&gt; Speaker 7: Whatever.

197
00:13:11.190 --> 00:13:12.512
&gt;&gt; Kyle Simpson: Or vowels.

198
00:13:12.512 --> 00:13:15.462
&gt;&gt; [INAUDIBLE]
&gt;&gt; Kyle Simpson: Yeah,

199
00:13:15.462 --> 00:13:17.757
I was just stuck in the mindset for the-
&gt;&gt; Speaker 7: Now I'm happier.

200
00:13:17.757 --> 00:13:19.257
[LAUGH]
&gt;&gt; Kyle Simpson: You're right.

201
00:13:23.708 --> 00:13:28.806
&gt;&gt; Kyle Simpson: In particular, when
we get to the end of this discussion of

202
00:13:28.806 --> 00:13:34.022
the destructuring,
which we still got a little ways to go.

203
00:13:34.022 --> 00:13:36.665
But when we get to the end
of the destructuring,

204
00:13:36.665 --> 00:13:40.584
the exercise that you do on destructuring
is a more concrete example.

205
00:13:40.584 --> 00:13:42.749
It's not foo var example, okay?

