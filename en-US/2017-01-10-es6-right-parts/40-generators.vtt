WEBVTT

1
00:00:00.000 --> 00:00:04.026
[MUSIC]

2
00:00:04.026 --> 00:00:06.549
&gt;&gt; Kyle Simpson: We're going to come back
to this example in just a moment and

3
00:00:06.549 --> 00:00:07.670
rewrite it.

4
00:00:07.670 --> 00:00:10.760
But I want to take a quick little
detour and talk to you about the last

5
00:00:10.760 --> 00:00:14.370
feature that I'm going to introduce to
you today, which is called a generator.

6
00:00:15.420 --> 00:00:19.230
Now, I do not have time to fully explain
all that happens with generator, so

7
00:00:19.230 --> 00:00:21.690
I'm going to give you kind of
a short cut explanation and

8
00:00:21.690 --> 00:00:24.550
strongly encourage you go do
some more reading about them.

9
00:00:24.550 --> 00:00:26.290
I've got several blog posts out there.

10
00:00:26.290 --> 00:00:28.540
They're covered in two of my books.

11
00:00:28.540 --> 00:00:31.300
Strongly recommend you read
a lot more about generators.

12
00:00:31.300 --> 00:00:35.220
So, I'm not gonna fully explain
all the whys and hows of it,

13
00:00:35.220 --> 00:00:37.090
cuz that would take another several hours.

14
00:00:37.090 --> 00:00:40.590
I'm just gonna quickly introduce them to
you, so we can see how they can be useful.

15
00:00:41.680 --> 00:00:42.930
Generators look like this.

16
00:00:42.930 --> 00:00:46.150
We put the star there and
then we give it some kind of name.

17
00:00:46.150 --> 00:00:47.550
Doesn't have to be a name
could be anonymous,

18
00:00:47.550 --> 00:00:50.700
but generators need that star there.

19
00:00:50.700 --> 00:00:55.600
Now, what's interesting about a generator,
if I just have something silly like this.

20
00:00:57.680 --> 00:01:00.690
What's interesting about
a generator is that when I call it,

21
00:01:01.940 --> 00:01:06.640
that code doesn't actually run,
the way we're used to functions running.

22
00:01:06.640 --> 00:01:10.450
What happens is that calling
the generator doesn't execute its code.

23
00:01:10.450 --> 00:01:16.519
What it does,
is it constructs an iterator.

24
00:01:16.519 --> 00:01:19.870
And it stays in a pause state and

25
00:01:19.870 --> 00:01:24.059
then it says, you can use the iterator
to control the generator.

26
00:01:26.080 --> 00:01:29.740
The generator is a function
that can be started and

27
00:01:29.740 --> 00:01:32.010
stopped as many times as you'd like.

28
00:01:33.050 --> 00:01:36.132
You can start it and it pauses,
and start it again, and it pauses,

29
00:01:36.132 --> 00:01:38.500
and start it again and pause it.

30
00:01:38.500 --> 00:01:42.937
So, in this particular
case nothing is run, but

31
00:01:42.937 --> 00:01:48.239
if I call it.next,
It's going to print out, Hello, and

32
00:01:48.239 --> 00:01:53.977
the it.next call here is going
to return us a iterator result,

33
00:01:53.977 --> 00:01:58.523
that's going to have value
undefined done true,

34
00:01:58.523 --> 00:02:02.239
because the generator is all complete.

35
00:02:04.601 --> 00:02:08.420
&gt;&gt; Kyle Simpson: But what if I wanted
to pause the generator somewhere.

36
00:02:09.700 --> 00:02:14.120
Well now, I can use a special new
keyword that's only valid inside of

37
00:02:14.120 --> 00:02:15.980
generators called yield.

38
00:02:17.770 --> 00:02:19.320
The yield keyword says to pause.

39
00:02:20.450 --> 00:02:23.820
Literally only locally inside of
the generator, not the whole program,

40
00:02:23.820 --> 00:02:26.990
just inside of the generator,
it just pauses at that point.

41
00:02:26.990 --> 00:02:30.054
So, I could have this.

42
00:02:33.595 --> 00:02:39.260
&gt;&gt; Kyle Simpson: And the result object
here would have been { value: undefined,

43
00:02:39.260 --> 00:02:40.810
done: false }.

44
00:02:41.990 --> 00:02:46.940
Because at this moment we are paused
right here, and we're not yet done.

45
00:02:48.630 --> 00:02:52.839
And then later any time,
I feel like I could call it.next again.

46
00:02:58.907 --> 00:02:59.407
&gt;&gt; Kyle Simpson: What's going on?

47
00:03:01.270 --> 00:03:05.724
I could call it.next and I'd get,
again, { value: undefined,

48
00:03:09.357 --> 00:03:12.342
&gt;&gt; Kyle Simpson: done: true }.

49
00:03:12.342 --> 00:03:16.541
If I did something like return 10; here,

50
00:03:16.541 --> 00:03:20.070
that value 10 would be right here.

51
00:03:21.270 --> 00:03:26.410
And if I did something like yield nine,
that value would show up right here.

52
00:03:28.460 --> 00:03:31.816
So, the yield keyword is not
just a way to pause, but

53
00:03:31.816 --> 00:03:36.410
it's also a way to send a value out
while the function is still running.

54
00:03:36.410 --> 00:03:37.400
You following me?

55
00:03:39.934 --> 00:03:47.778
&gt;&gt; Kyle Simpson: [COUGH] What do
you think would happen if I said?

56
00:04:00.023 --> 00:04:01.028
&gt;&gt; Kyle Simpson: What's gonna happen?

57
00:04:07.540 --> 00:04:11.590
&gt;&gt; Speaker 3: Zero, nine, zero ten.

58
00:04:11.590 --> 00:04:17.030
&gt;&gt; Kyle Simpson: So, remember how the ten
value comes back with done true, and

59
00:04:17.030 --> 00:04:21.030
remember how the iterator consumers,
think whenever they see done true,

60
00:04:21.030 --> 00:04:23.410
they just stop and don't do anything else.

61
00:04:23.410 --> 00:04:25.466
So, if we run this code.

62
00:04:25.466 --> 00:04:29.260
What we're going to see, is just nine.

63
00:04:30.410 --> 00:04:32.380
We printed out the hello world,
but the just nine.

64
00:04:32.380 --> 00:04:33.690
We don't see the ten, right?

65
00:04:34.850 --> 00:04:37.816
For that reason we don't see the 10,
because the for loop said, done true and

66
00:04:37.816 --> 00:04:39.910
it threw away any value that
might have gotten back out.

67
00:04:41.280 --> 00:04:43.440
So, if you wanted that
10 value to be there.

68
00:04:43.440 --> 00:04:44.468
What would you change this to?

69
00:04:44.468 --> 00:04:48.210
&gt;&gt; Speaker 3: Yield, the yield.

70
00:04:48.210 --> 00:04:50.393
&gt;&gt; Kyle Simpson: Now, all of a sudden
we'll get both of those values out.

71
00:04:56.484 --> 00:04:56.984
&gt;&gt; Kyle Simpson: Okay?

72
00:04:59.090 --> 00:05:00.640
The point that I'm making is,

73
00:05:00.640 --> 00:05:04.910
a generator can yield out as
many values as you want it to.

74
00:05:04.910 --> 00:05:08.669
Here, I'm doing it manually, but
what if I did something like this.

75
00:05:23.627 --> 00:05:24.500
&gt;&gt; Kyle Simpson: Now,
what's going to happen?

76
00:05:27.690 --> 00:05:31.780
I'm gonna yield out the values zero,
one, two, three and four.

77
00:05:43.334 --> 00:05:45.070
&gt;&gt; Kyle Simpson: Okay.

78
00:05:45.070 --> 00:05:48.583
So, let me take a step back for

79
00:05:48.583 --> 00:05:53.935
just a moment and
let you kind of digest that.

80
00:05:53.935 --> 00:05:57.778
What I'm going to say here is not going
to make a lot of sense completely,

81
00:05:57.778 --> 00:06:02.280
because we really don't have time to
get into all of these generators.

82
00:06:02.280 --> 00:06:05.860
But if you want to understand
what a generator really is.

83
00:06:05.860 --> 00:06:06.980
It's a state machine.

84
00:06:09.022 --> 00:06:11.422
&gt;&gt; Kyle Simpson: Every time we pause and
then unpause,

85
00:06:11.422 --> 00:06:15.960
we're just moving from one state to
the next state, to the next state.

86
00:06:15.960 --> 00:06:17.880
So, it's a function that keeps going menu.

87
00:06:17.880 --> 00:06:21.470
It keeps remembering its current state,
because it's pausing and

88
00:06:21.470 --> 00:06:25.060
then when you unpause it moves to the next
state, and then it pauses again, and

89
00:06:25.060 --> 00:06:27.500
then it keeps going and keeps going.

90
00:06:27.500 --> 00:06:28.920
So, because it's a state machine,

91
00:06:28.920 --> 00:06:34.530
it also has a really easy way
to model producing values.

92
00:06:34.530 --> 00:06:39.033
That's kind of the reason it has that name
generator, because it generates values.

93
00:06:41.603 --> 00:06:42.200
&gt;&gt; Kyle Simpson: You with me?

94
00:06:43.890 --> 00:06:47.860
And the cool part about a generator is,
that it automatically does all the work of

95
00:06:47.860 --> 00:06:51.560
producing that iterator interface for us,
we don't have to do any of that manual

96
00:06:51.560 --> 00:06:54.490
crap next methods, or
iterator results or anything.

97
00:06:54.490 --> 00:06:58.187
We just simply yield out values and
it all works.

98
00:07:02.339 --> 00:07:03.280
&gt;&gt; Kyle Simpson: Yes.

99
00:07:03.280 --> 00:07:08.470
&gt;&gt; Speaker 4: In a nutshell,
I know you said in more details,

100
00:07:08.470 --> 00:07:12.270
that in terms of the stock
where that generates, or

101
00:07:12.270 --> 00:07:17.810
place where he waits for
one deal to the other deal.

102
00:07:18.890 --> 00:07:19.800
&gt;&gt; Kyle Simpson: Under the covers,

103
00:07:19.800 --> 00:07:22.970
this four of loop is calling
dot next to each time.

104
00:07:22.970 --> 00:07:24.430
So, the generator pauses,

105
00:07:24.430 --> 00:07:29.330
when it gets to a yield keyword, sending
out a value if you yield something.

106
00:07:29.330 --> 00:07:32.210
And it just waits forever until
somebody calls dot next again.

107
00:07:33.300 --> 00:07:34.790
The four of loop the dot, dot,

108
00:07:34.790 --> 00:07:39.270
dot operator they automatically
consume an iterator to completion.

109
00:07:39.270 --> 00:07:42.340
Meaning they will just keep calling
a dot next on that iterator,

110
00:07:42.340 --> 00:07:43.720
until they get out done true.

111
00:07:46.090 --> 00:07:51.463
The generator will return done true, once
it gets to the end, and does a return.

112
00:07:51.463 --> 00:07:56.155
&gt;&gt; Speaker 4: Can I say this is kinda
expensive operation to process, or

113
00:07:56.155 --> 00:07:57.986
something like that.

114
00:07:57.986 --> 00:08:01.270
I just keep reminding
a while true forever.

115
00:08:02.310 --> 00:08:04.060
&gt;&gt; Kyle Simpson: Absolutely,
that's entirely legal.

116
00:08:05.070 --> 00:08:10.048
You could have something like this,

117
00:08:10.048 --> 00:08:16.157
unique ID, while true yield math.random.

118
00:08:23.490 --> 00:08:27.835
&gt;&gt; Kyle Simpson: Every time in your
code that you want to new unique ID,

119
00:08:27.835 --> 00:08:31.515
you just say, numbers.next().value.

120
00:08:31.515 --> 00:08:35.073
And every time you call it, it will just
give you a new one, give you a new one.

121
00:08:38.364 --> 00:08:41.485
&gt;&gt; Kyle Simpson: Generators never have
to finish if you don't want them to.

122
00:08:41.485 --> 00:08:45.622
They're what we call lazy sequences, which
is a whole other separate thing, but.

123
00:08:51.480 --> 00:08:54.501
&gt;&gt; Kyle Simpson: [COUGH] The key idea
that we want to get here is that you

124
00:08:54.501 --> 00:08:56.390
can yield out a number.

125
00:08:56.390 --> 00:08:57.960
You can yield out any value that you want.

126
00:08:57.960 --> 00:09:03.130
So, this could be looping over the results
that you have from a database query, and

127
00:09:03.130 --> 00:09:05.290
just yielding out a new row every time.

128
00:09:05.290 --> 00:09:09.790
That's one way of consuming database
results and adapting them to an iterator.

