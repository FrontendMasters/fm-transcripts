WEBVTT

1
00:00:00.043 --> 00:00:04.208
[MUSIC]

2
00:00:04.208 --> 00:00:07.760
&gt;&gt; Kyle Simpson: Let's take
a look at this exercise five.

3
00:00:07.760 --> 00:00:12.913
It might be useful for me to start from
the bottom which is to think about, what

4
00:00:12.913 --> 00:00:18.479
would it look like for me to call a custom
iterator to create a customized iterator.

5
00:00:18.479 --> 00:00:25.023
It might be the case that I would have
the numbers object, at symbol.iterator,

6
00:00:25.023 --> 00:00:30.331
we know that's a function, so
I can pass in some arguments to it.

7
00:00:30.331 --> 00:00:32.010
And what arguments are in a pass in?

8
00:00:32.010 --> 00:00:37.760
I wanna pass in the value of where
it should start, the increment,

9
00:00:37.760 --> 00:00:39.520
and where it should end.

10
00:00:39.520 --> 00:00:42.720
I could do that as three separate
arguments, but we learned earlier

11
00:00:42.720 --> 00:00:46.600
about object and structuring and
named arguments and things like that.

12
00:00:46.600 --> 00:00:53.714
So, I'm gonna use an object and
I'm gonna pass in a start value of six,

13
00:00:53.714 --> 00:00:59.380
and increment,
I'll call it step value of 4.

14
00:00:59.380 --> 00:01:01.930
And an end value of 30.

15
00:01:01.930 --> 00:01:05.880
So I used an object to
do the named arguments.

16
00:01:05.880 --> 00:01:06.979
Everybody with me so far?

17
00:01:09.589 --> 00:01:13.019
&gt;&gt; Kyle Simpson: So now, we know that if
it's called by default we're gonna need

18
00:01:13.019 --> 00:01:14.670
defaults for all of these, but

19
00:01:14.670 --> 00:01:18.310
if it's not called by default it's
going to allow us to customize.

20
00:01:19.820 --> 00:01:23.260
By specifying one or
more of these arguments.

21
00:01:24.620 --> 00:01:26.750
So now we wanna put an iterator on it.

22
00:01:26.750 --> 00:01:33.646
We're gonna need to make
a generator that is a computed.

23
00:01:37.058 --> 00:01:38.940
&gt;&gt; Kyle Simpson: Concise method.

24
00:01:40.864 --> 00:01:42.890
We're gonna talk about the parameter
list in just a moment.

25
00:01:42.890 --> 00:01:47.190
But there's our syntax for
making a concise computed generator.

26
00:01:49.370 --> 00:01:51.670
Now what about the parameter list?

27
00:01:51.670 --> 00:01:54.630
Well, we probably wanna
do object destructuring,

28
00:01:54.630 --> 00:01:57.450
since we're passing in an object.

29
00:01:57.450 --> 00:01:59.110
Before I even do the destructuring,

30
00:01:59.110 --> 00:02:04.250
don't forget to put the default equals
because this one will fail if we don't.

31
00:02:06.170 --> 00:02:10.270
Now let's account for those three
parameters that we want including

32
00:02:10.270 --> 00:02:14.860
the defaults,
we want a start that defaults at 0.

33
00:02:17.330 --> 00:02:21.095
We want a step that defaults to 1.

34
00:02:21.095 --> 00:02:26.125
We want an end that defaults to 100.

35
00:02:26.125 --> 00:02:29.234
I'm gonna go ahead and pull those
out into separate lines, just so

36
00:02:29.234 --> 00:02:30.740
we keep a little more readable.

37
00:02:35.330 --> 00:02:39.500
So that's the signature for
our iterator generator.

38
00:02:39.500 --> 00:02:40.470
Have I lost anybody yet?

39
00:02:42.810 --> 00:02:45.270
If you got to this point the rest is easy,
okay?

40
00:02:45.270 --> 00:02:48.360
Cuz all we have to do now, is do a for

41
00:02:48.360 --> 00:02:53.050
loop starting at start,

42
00:02:53.050 --> 00:02:58.870
going until we get to end
incrementing by step.

43
00:03:00.820 --> 00:03:04.458
Whatever that value is
simply yield it out.

44
00:03:09.207 --> 00:03:11.540
&gt;&gt; Kyle Simpson: That's it.

45
00:03:11.540 --> 00:03:13.160
We could make that a let.

46
00:03:13.160 --> 00:03:15.540
Doesn't really need to be a let here but.

47
00:03:15.540 --> 00:03:19.623
It is a way to stylistically signal
to a future reader, we intend for

48
00:03:19.623 --> 00:03:24.445
I to only be used in the context of the
loop, don't try to use it before or after.

49
00:03:27.228 --> 00:03:29.093
&gt;&gt; Kyle Simpson: I'd probably
leave this one as a var,

50
00:03:29.093 --> 00:03:31.615
we are already using
the let's on these for loops.

51
00:03:35.020 --> 00:03:37.461
&gt;&gt; Kyle Simpson: Let's double check it,
make sure that it works correctly.

52
00:03:41.117 --> 00:03:45.510
&gt;&gt; Kyle Simpson: So it went from 0 up
to 100 and then it went from 6 to 30,

53
00:03:45.510 --> 00:03:47.241
incrementing by four.

54
00:03:53.553 --> 00:03:56.006
&gt;&gt; Kyle Simpson: All right,
there's a question about the syntax.

55
00:03:56.006 --> 00:04:00.879
Remember in de-structuring
the default is we use an equal

56
00:04:00.879 --> 00:04:05.440
to declare the default,
so this is not an object.

57
00:04:05.440 --> 00:04:09.600
This is an object de-structuring pattern,
that's why we're not using the colon.

