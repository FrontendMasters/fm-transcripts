WEBVTT

1
00:00:00.000 --> 00:00:03.920
[MUSIC]

2
00:00:03.920 --> 00:00:07.433
&gt;&gt; Kyle Simpson: The next thing that
we want to talk about is this notion.

3
00:00:07.433 --> 00:00:10.630
We might have had a function
that looked like this before.

4
00:00:12.780 --> 00:00:14.451
We wanted to get a list, an array,

5
00:00:14.451 --> 00:00:18.548
of all the arguments that have been passed
into foo, because we're going to treat,

6
00:00:18.548 --> 00:00:22.540
here's a fancier, we're gonna
treat foo as a variatic function.

7
00:00:22.540 --> 00:00:28.420
Simply means that we can pass zero,
one, 500 and maybe our function

8
00:00:28.420 --> 00:00:32.130
actually has different behavior depending
on how many arguments we pass in, right?

9
00:00:32.130 --> 00:00:37.000
So, in the past the way that we wanted to
get that is we knew there was an arguments

10
00:00:37.000 --> 00:00:41.530
object, but it was kind of annoying that
that was an object that was an array-like,

11
00:00:41.530 --> 00:00:46.320
but not a real array because it didn't
have stuff like slice and pop on it and

12
00:00:46.320 --> 00:00:47.340
things like that.

13
00:00:47.340 --> 00:00:50.770
So let's say that there was a case where
we wanted to get the arguments array and

14
00:00:50.770 --> 00:00:52.250
add something on to the beginning of it,

15
00:00:52.250 --> 00:00:55.260
we would have to turn
it into a real array.

16
00:00:55.260 --> 00:00:58.110
So we would say something
like var args is equal to.

17
00:00:58.110 --> 00:01:00.610
And then we did this

18
00:01:00.610 --> 00:01:05.510
crazy nightmare of stuff where we borrowed
the slice call from a real array, or

19
00:01:05.510 --> 00:01:09.700
from the array prototype, but called it
in the context of the arguments object.

20
00:01:11.820 --> 00:01:16.145
That made us a real array, okay?

21
00:01:16.145 --> 00:01:17.840
You've probably seen
that kind of code before.

22
00:01:19.200 --> 00:01:25.270
Now once we have a real array we could
do something like unshift to push on

23
00:01:25.270 --> 00:01:29.840
the value 42 as the first
argument in the list, alright?

24
00:01:29.840 --> 00:01:33.698
And then, let's say we wanted
to do something like pass

25
00:01:33.698 --> 00:01:37.311
all of those values along
to another function call,

26
00:01:37.311 --> 00:01:41.410
as individual arguments
to another function call.

27
00:01:41.410 --> 00:01:44.190
So, we would like to be able
to just do this args thing.

28
00:01:44.190 --> 00:01:46.660
But unfortunately,
we don't wanna pass the whole array,

29
00:01:46.660 --> 00:01:50.960
we want to pass them each as individual
arguments, so we had to do apply.

30
00:01:50.960 --> 00:01:53.509
And we don't care about
that this bindings, so

31
00:01:53.509 --> 00:01:57.969
we have to do something stupid like null,
or undefined, or something like that for

32
00:01:57.969 --> 00:02:01.562
the this and then we give it the args
array that we wanna pass along.

33
00:02:03.369 --> 00:02:04.910
&gt;&gt; Kyle Simpson: Does this
code look roughly familiar?

34
00:02:04.910 --> 00:02:06.220
Have you seen code like this before?

35
00:02:07.980 --> 00:02:08.480
Okay.

36
00:02:11.314 --> 00:02:14.669
&gt;&gt; Kyle Simpson: So that's the imperative
form of doing something where we pull in

37
00:02:14.669 --> 00:02:18.380
some arguments, add something on,
pass them along.

38
00:02:18.380 --> 00:02:21.265
Now we want to talk about
an imperative form.

39
00:02:21.265 --> 00:02:25.196
I mean a declarative form, okay?

40
00:02:25.196 --> 00:02:27.850
There is a new operator
added to JavaScript, and

41
00:02:27.850 --> 00:02:30.701
its name is a little confusing
because this operator

42
00:02:30.701 --> 00:02:34.346
does two different things depending
on the context it's used in.

43
00:02:34.346 --> 00:02:36.910
So it has a different name
in different locations.

44
00:02:36.910 --> 00:02:40.100
So, same operator we're gonna
give it a different name.

45
00:02:40.100 --> 00:02:46.578
So, it is also, it is now possible for
us, in the parameter list,

46
00:02:46.578 --> 00:02:51.670
to gather up all of
the parameters that are not,

47
00:02:51.670 --> 00:02:56.130
I mean all of the arguments that are not
already accounted for by named parameters,

48
00:02:56.130 --> 00:02:59.680
to gather all of the unaccounted for
arguments together into a real array.

49
00:02:59.680 --> 00:03:02.510
And the way we do that
is with the ...operator,

50
00:03:02.510 --> 00:03:06.420
and then we give it a name like,
for example, args.

51
00:03:06.420 --> 00:03:08.520
I'm putting spaces there just for
readability, but

52
00:03:08.520 --> 00:03:11.300
the spaces aren't required.

53
00:03:11.300 --> 00:03:15.350
That does the exact same work as that
whole crappy other line over there in line

54
00:03:15.350 --> 00:03:19.500
two does,
it gathers all those arguments together.

55
00:03:19.500 --> 00:03:20.520
Okay.

56
00:03:20.520 --> 00:03:25.870
This is often referred to as the rest
parameter, or the rest operator rather.

57
00:03:25.870 --> 00:03:31.910
I don't like to call it the rest operator
because rest is, in this sense, a noun and

58
00:03:31.910 --> 00:03:36.010
not a verb, and when we look at the other
usage of this operator it will be a verb.

59
00:03:36.010 --> 00:03:40.210
So I like to use the verb form, so
I like to call this the gather operator.

60
00:03:40.210 --> 00:03:43.707
Cuz it gathers arguments together.

61
00:03:43.707 --> 00:03:50.276
Okay?

62
00:03:50.276 --> 00:03:57.134
So, now that we have an array we
can do an unshift withthe value 42.

63
00:03:57.134 --> 00:03:59.110
It turns out we're not actually
going to even need that, but

64
00:03:59.110 --> 00:04:00.480
we will come back to
that in just a moment.

65
00:04:02.130 --> 00:04:07.940
And now that we have a function call,
we don't need to use apply anymore

66
00:04:07.940 --> 00:04:13.250
because now we can use the ...operator
to spread an array out.

67
00:04:15.290 --> 00:04:19.849
So, I can say .arg ...args,
it will spread the array out into its

68
00:04:19.849 --> 00:04:25.129
individual constituent parts as individual
arguments to this function call.

69
00:04:26.947 --> 00:04:29.705
&gt;&gt; Kyle Simpson: So you can see two
different usages of the same operator but

70
00:04:29.705 --> 00:04:30.980
they're symmetric.

71
00:04:30.980 --> 00:04:34.140
One is gathering them together
into an array, and another one is

72
00:04:34.140 --> 00:04:38.790
splitting the array apart, spreading the
array apart out into individual values.

73
00:04:41.160 --> 00:04:42.860
How do we know which one is being used?

74
00:04:42.860 --> 00:04:47.170
Well you have to understand something
about the context that it's being used in.

75
00:04:47.170 --> 00:04:50.960
The parameter list, though you may not
have been used to thinking about this,

76
00:04:50.960 --> 00:04:54.290
a parameter list is what we would
call an assignment context.

77
00:04:54.290 --> 00:04:55.880
The reason for

78
00:04:55.880 --> 00:05:00.150
that is that parameters are the named
things in the function declaration.

79
00:05:00.150 --> 00:05:02.920
Arguments are the thing at
the call site that we pass in.

80
00:05:02.920 --> 00:05:04.750
Under the covers,

81
00:05:04.750 --> 00:05:11.560
JavaScript does an assignment from
the argument value to the parameter name.

82
00:05:11.560 --> 00:05:14.530
So the parameter list is
called an assignment context.

83
00:05:14.530 --> 00:05:19.509
Exactly the same as bar X equals two
as an assignment context, got it?

84
00:05:19.509 --> 00:05:24.893
When a ...operator is used in
an assignment context, it gathers.

85
00:05:27.348 --> 00:05:31.098
&gt;&gt; Kyle Simpson: When it's not
used in an assignment context, but

86
00:05:31.098 --> 00:05:36.773
rather in a list context, a value list
context like this one, it spreads.

87
00:05:36.773 --> 00:05:37.900
Okay?

88
00:05:37.900 --> 00:05:41.120
So you just have to understand what
context it's being used in as to whether

89
00:05:41.120 --> 00:05:44.930
or not to call it the gather operator or
to call it the spread operator.

90
00:05:44.930 --> 00:05:46.790
But you see why I call, I use gather and

91
00:05:46.790 --> 00:05:51.600
spread because those are nice opposites
of each other, in terms of verb usage.

