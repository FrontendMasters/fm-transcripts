WEBVTT

1
00:00:00.000 --> 00:00:03.934
[MUSIC]

2
00:00:03.934 --> 00:00:09.025
&gt;&gt; Kyle Simpson: I get people all the time
saying, but I write promises and man I

3
00:00:09.025 --> 00:00:15.260
hate doing stuff like this, I hate doing
you know, I hate having to write out.

4
00:00:22.621 --> 00:00:23.980
&gt;&gt; Kyle Simpson: I don't
want to have to write that.

5
00:00:23.980 --> 00:00:24.870
That's way too long.

6
00:00:24.870 --> 00:00:27.887
I want to just write p.then.

7
00:00:30.814 --> 00:00:32.340
&gt;&gt; Kyle Simpson: That's so
much nicer right?

8
00:00:33.910 --> 00:00:38.430
In the case where,
we make a simple return value.

9
00:00:38.430 --> 00:00:40.960
You probably think to yourself.

10
00:00:40.960 --> 00:00:42.730
No big deal right?

11
00:00:42.730 --> 00:00:45.870
It's much shorter just
though in an arrow function.

12
00:00:45.870 --> 00:00:52.991
What do you think happens if v
comes through is null or undefined?

13
00:00:52.991 --> 00:00:57.745
Here's a hint, JavaScript exception is
their own because you don't try to do

14
00:00:57.745 --> 00:01:01.310
a property access against the null or
an undefined value.

15
00:01:01.310 --> 00:01:04.020
Okay, so this arrow function

16
00:01:04.020 --> 00:01:07.730
is going to show up as an anonymous
function right there in your stack trace.

17
00:01:07.730 --> 00:01:10.580
So even in these cases these real
simple cases these little one

18
00:01:10.580 --> 00:01:13.540
liner things where you think
it's a clear win in readability.

19
00:01:14.890 --> 00:01:18.230
The cost comes on the back end
whenever something breaks and

20
00:01:18.230 --> 00:01:20.240
now you have a worse
stack trace to deal with.

21
00:01:20.240 --> 00:01:23.690
A stack trace that doesn't give you any
help to understand what's going on.

22
00:01:23.690 --> 00:01:26.069
You have to click through
the code to go figure it out.

23
00:01:29.540 --> 00:01:32.210
I think you ought to use name functions.

24
00:01:32.210 --> 00:01:35.720
And I think you ought to give this
some kind of name like extract ID.

25
00:01:37.030 --> 00:01:40.150
The reason I think you ought to do that
is the extract ID name is going to be

26
00:01:40.150 --> 00:01:42.920
used in the stack trace, that will
make your code more debuggable, but

27
00:01:42.920 --> 00:01:45.100
it also makes this code more sensible.

28
00:01:45.100 --> 00:01:49.700
I don't have to read the code on line
three to figure out what it's returning.

29
00:01:49.700 --> 00:01:53.170
Because the name right there at
the top tells me what it's doing.

30
00:01:53.170 --> 00:01:55.111
It tells me that it's extracting the ID.

31
00:01:58.159 --> 00:02:01.537
&gt;&gt; Kyle Simpson: So the next time somebody
makes an unambiguous absolute statement

32
00:02:01.537 --> 00:02:05.900
that arrow functions are more readable
than name function expressions.

33
00:02:05.900 --> 00:02:07.910
Just ask yourself how true really is that.

34
00:02:10.320 --> 00:02:14.700
This goes for promise.thens,
this goes for .mapcalls.

35
00:02:14.700 --> 00:02:19.120
I use named function expressions
not arrow functions form

36
00:02:19.120 --> 00:02:21.870
because I prefer to have
the syntax consistency.

37
00:02:21.870 --> 00:02:23.850
I prefer to have self
reference if I need it.

38
00:02:23.850 --> 00:02:26.610
I prefer to have self explaining
code with name expressions.

39
00:02:28.410 --> 00:02:29.400
That's just me.

40
00:02:29.400 --> 00:02:33.515
I'm crazy that I like to make my
code a little bit more readable.

41
00:02:33.515 --> 00:02:36.156
&gt;&gt; [INAUDIBLE]
&gt;&gt; Kyle Simpson: Okay a few other

42
00:02:36.156 --> 00:02:36.920
people maybe.

43
00:02:36.920 --> 00:02:39.210
&gt;&gt; Speaker 2: I always start
with the code on the bottom and

44
00:02:39.210 --> 00:02:42.000
then eventually like I need to
put some logic in there and so

45
00:02:42.000 --> 00:02:46.650
I wrap it with parentheses and I'm like
yeah well I want to return an object.

46
00:02:46.650 --> 00:02:48.800
So you know I am renting.

47
00:02:48.800 --> 00:02:53.980
I'm just throwing in difference
syntax rules as I go develops.

48
00:02:53.980 --> 00:02:56.580
&gt;&gt; Kyle Simpson: My little joke
that I tell people about arrow

49
00:02:56.580 --> 00:03:01.450
functions if you write an arrow
function and it doesn't parse.

50
00:03:01.450 --> 00:03:04.625
Just start wrapping parentheses in curly
braces around stuff and still it does.

51
00:03:05.700 --> 00:03:08.130
That's all you know how to do it.

52
00:03:08.130 --> 00:03:09.620
I want to pull up.

53
00:03:09.620 --> 00:03:12.540
You see here in the shot you see
I've got a book series called you

54
00:03:12.540 --> 00:03:16.790
don't know JS people who know a lot about
those books that I've written the ES6 and

55
00:03:16.790 --> 00:03:20.090
beyond was the last book in the series.

56
00:03:20.090 --> 00:03:23.500
In chapter two of this book
I cover arrow functions.

57
00:03:23.500 --> 00:03:25.280
And I talk about a lot of these things.

58
00:03:26.550 --> 00:03:33.100
Half as a joke and half seriously I've
included a flow chart on how to decide

59
00:03:33.100 --> 00:03:38.010
whether or not and in what way you're
going to want to use arrow functions.

60
00:03:39.230 --> 00:03:43.690
So let me and why this isn't zoom in
question something about the video

61
00:03:43.690 --> 00:03:45.870
me a little bit hard to read if
you're looking on the projector but

62
00:03:45.870 --> 00:03:49.550
you can go find this in the chapter starts
off with are you really sure you want to

63
00:03:49.550 --> 00:03:52.060
narrow function but
then it just keeps going it's like

64
00:03:52.060 --> 00:03:56.140
you have exactly one is it a simple
parameter without anything.

65
00:03:56.140 --> 00:04:00.300
Are you returning a value do you not need
to return a value as an object value.

66
00:04:00.300 --> 00:04:03.930
By the end you get down to this and
you have made your decision.

67
00:04:03.930 --> 00:04:06.830
Congratulations go forth
an arrow function.

68
00:04:06.830 --> 00:04:08.420
But take a step back holistically and

69
00:04:08.420 --> 00:04:12.130
ask yourself Is this the decision
chart you really wanna run through,

70
00:04:12.130 --> 00:04:15.510
every time you have to write a function,
or how to just write the function keyword?

71
00:04:15.510 --> 00:04:18.600
Cuz I bet you can run that faster
type that faster than you can run

72
00:04:18.600 --> 00:04:19.470
through all of these steps.

73
00:04:21.650 --> 00:04:24.880
And I bet the readers of your code are
going to be able to read it more quickly.

74
00:04:26.560 --> 00:04:30.860
So does that mean I'm saying the arrow
function is entirely bad and

75
00:04:30.860 --> 00:04:32.600
should be just thrown out of the language?

76
00:04:32.600 --> 00:04:34.200
That's not at all what I mean.

77
00:04:34.200 --> 00:04:37.440
There is one specific example where
the arrow function actually shines.

78
00:04:37.440 --> 00:04:41.190
It's specifically I think the reason why

79
00:04:41.190 --> 00:04:44.620
It's the thing that gave it enough
weight to make it into the language.

80
00:04:44.620 --> 00:04:47.180
I wasn't on the committee so I'm not
speaking officially there but I'm just

81
00:04:47.180 --> 00:04:51.020
saying personally, this is the reason why
I think it deserved to be included in

82
00:04:51.020 --> 00:04:55.570
the language even if it's not my general,
arrow is the new function replacement.

83
00:04:56.840 --> 00:04:58.740
And it's for cases like this,

84
00:04:58.740 --> 00:05:05.430
let's say that I have
&gt;&gt; Kyle Simpson: A function

85
00:05:05.430 --> 00:05:10.544
foo that at some points set time out and
it does another function

86
00:05:10.544 --> 00:05:15.779
here
&gt;&gt; Kyle Simpson: And

87
00:05:15.779 --> 00:05:21.210
let's say that this is
the property of some object.

88
00:05:27.387 --> 00:05:33.730
&gt;&gt; Kyle Simpson: And what I want to do is
have some property on here like ID 42 and

89
00:05:33.730 --> 00:05:39.354
then I want to be able to
say after 100 milliseconds,

90
00:05:39.354 --> 00:05:42.740
I want you to print out this.id.

91
00:05:42.740 --> 00:05:43.738
Okay.
Okay so

92
00:05:43.738 --> 00:05:46.880
I wanna be able to say
something like the obj.foo and

93
00:05:47.930 --> 00:05:51.720
after a 100 milliseconds I want it to
be able to print out the value 42.

94
00:05:51.720 --> 00:05:55.250
If you've ever dealt with this keyword
before, you know exactly what's going to

95
00:05:55.250 --> 00:06:00.530
happen here, the function that's invoked
by the set timeout is going to be invoked.

96
00:06:00.530 --> 00:06:03.450
Using the default binding
rule check out my this and

97
00:06:03.450 --> 00:06:07.520
object prototypes book if you want to know
more about this keyword but it's invoked

98
00:06:07.520 --> 00:06:12.280
with the default binding rule as a matter
of fact actually by spec the set timeout

99
00:06:12.280 --> 00:06:16.500
invokes it explicitly in the window
context but the same result is that this

100
00:06:16.500 --> 00:06:20.760
keyword is not pointing at OBJ this
keywords pointing at our global object.

101
00:06:20.760 --> 00:06:21.480
Not what we want.

102
00:06:21.480 --> 00:06:24.610
So we're going to end up getting
undefined instead of 42.

103
00:06:24.610 --> 00:06:26.710
That sucks.

104
00:06:26.710 --> 00:06:29.520
So the way people mostly solve
this is to say something like

105
00:06:29.520 --> 00:06:32.940
var self equals this and
then they use self here.

106
00:06:34.470 --> 00:06:39.080
First off that's a terrible fun variable
name cuz now this keyword does not

107
00:06:39.080 --> 00:06:42.750
ever in any circumstances that you ever
run into refer to the function itself.

108
00:06:43.850 --> 00:06:45.080
Just doesn't.

109
00:06:45.080 --> 00:06:46.760
That's a bad variable name.

110
00:06:46.760 --> 00:06:48.290
Because we couldn't come
up with anything else.

111
00:06:48.290 --> 00:06:49.410
We were uncreative like we are.

112
00:06:49.410 --> 00:06:52.650
You should have been calling it context,
cuz that's what it really is.

113
00:06:52.650 --> 00:06:53.720
It's a dynamic context.

114
00:06:53.720 --> 00:06:55.720
It's an object context.

115
00:06:55.720 --> 00:06:58.300
So if you called it context at least
it would be able to complain about

116
00:06:58.300 --> 00:06:58.940
the variable name.

117
00:06:58.940 --> 00:07:02.400
But the other problem here is you've gone
to the trouble to have all this this based

118
00:07:02.400 --> 00:07:06.200
coding and now you've fallen back to
non the space coding lexical variables.

119
00:07:07.670 --> 00:07:12.140
The real solution to this
problem although solution that

120
00:07:12.140 --> 00:07:17.710
embraces the language the way it is
is to use, the dot bind utility.

121
00:07:17.710 --> 00:07:20.140
Nobody likes to write dot
bind this all over the place.

122
00:07:20.140 --> 00:07:21.620
I fully understand why that sucks.

123
00:07:21.620 --> 00:07:25.680
As matter of fact somebody had proposed
the double colon operator to try to get

124
00:07:25.680 --> 00:07:28.060
away from having to type dot bind.

125
00:07:28.060 --> 00:07:29.910
But this is that place.

126
00:07:29.910 --> 00:07:32.990
If you've been writing var self equals
this in some part of your code, or

127
00:07:32.990 --> 00:07:36.590
dot bind this in some part of your code,
this is that place where the arrow

128
00:07:36.590 --> 00:07:41.360
function shines cuz the arrow function
doesn't have of this keyword in it.

129
00:07:41.360 --> 00:07:42.980
It can't be bound to a this keyword.

130
00:07:42.980 --> 00:07:46.110
So if you reference that this
keyword inside of an arrow function,

131
00:07:46.110 --> 00:07:49.750
it will automatically lexically
go up one level two of scope and

132
00:07:49.750 --> 00:07:52.460
use that this keyword in
the surrounding scope.

133
00:07:52.460 --> 00:07:54.080
Doesn't have its own this keyword.

134
00:07:54.080 --> 00:07:55.928
So if all we did was just change this into

135
00:07:55.928 --> 00:07:59.557
an arrow function
&gt;&gt; Kyle Simpson: With or

136
00:07:59.557 --> 00:08:02.760
with those curly braces,
I'm gonna put them there just for clarity.

137
00:08:02.760 --> 00:08:07.706
But if we took that out,
&gt;&gt; Kyle Simpson: Sorry

138
00:08:07.706 --> 00:08:09.580
my indentation is all messed up here.

139
00:08:11.980 --> 00:08:13.540
All we did was make it an arrow function.

140
00:08:13.540 --> 00:08:16.380
Now all of a sudden the this
keyword starts working correctly or

141
00:08:16.380 --> 00:08:18.910
working the way we would
assume it to work.

142
00:08:18.910 --> 00:08:20.640
The arrow function doesn't
have its own list, so

143
00:08:20.640 --> 00:08:21.980
we automatically get a lexical list.

144
00:08:23.500 --> 00:08:25.050
That's where arrow function shines.

145
00:08:26.090 --> 00:08:27.520
If you're using this space coding and

146
00:08:27.520 --> 00:08:32.270
your running under those of var self
equals this or dot binds, you have my full

147
00:08:32.270 --> 00:08:35.540
faith and support to go start using
arrow function in those places.

148
00:08:35.540 --> 00:08:38.455
You're gonna to have to be careful
when you're mixing arrow functions and

149
00:08:38.455 --> 00:08:40.350
non-functions okay?

150
00:08:40.350 --> 00:08:43.060
And the exercise I'm about to have you go
through is gonna teach you that lesson.

151
00:08:43.060 --> 00:08:45.930
You're gonna have to be real careful about

152
00:08:45.930 --> 00:08:48.530
exactly what scope is the arrow
function going to adopt from.

153
00:08:50.040 --> 00:08:54.090
But arrow functions by themselves really
do shine in this particular case.

154
00:08:54.090 --> 00:08:56.160
They solve this particular problem.

155
00:08:56.160 --> 00:08:57.720
Actually we don't even
need the curly brace here.

156
00:08:57.720 --> 00:09:02.230
The curly braces in this particular case
are optional because the console log

157
00:09:02.230 --> 00:09:03.850
method call is also an expression.

158
00:09:03.850 --> 00:09:05.000
So there we wouldn't even need it,

159
00:09:05.000 --> 00:09:07.270
we would have to take out the semi colon,
okay.

160
00:09:09.180 --> 00:09:10.590
With or without the curly braces,

161
00:09:10.590 --> 00:09:13.450
it's going to adopt to this
keyword from the outer scope.

162
00:09:13.450 --> 00:09:17.620
So that's why you ought to be using arrow
functions, but I don't necessarily think

163
00:09:17.620 --> 00:09:22.150
that they shine in terms of general
replacement for all function usages.

