WEBVTT

1
00:00:00.000 --> 00:00:03.735
[MUSIC]

2
00:00:03.735 --> 00:00:06.890
&gt;&gt; Kyle Simpson: So
let's go back to our discussion.

3
00:00:06.890 --> 00:00:10.640
Again, we're going to keep
in this pattern of looking

4
00:00:10.640 --> 00:00:13.530
at the declarative form
versus the imperative form.

5
00:00:13.530 --> 00:00:16.510
First, we'll look at an imperative
form and then a declarative form.

6
00:00:18.460 --> 00:00:23.510
The next feature we want to turn our
attention to is, I think without question

7
00:00:23.510 --> 00:00:30.020
the most complex and
by complex I mean lots of steps to learn.

8
00:00:30.020 --> 00:00:33.170
Of all the of all the JavaScript
features out there and

9
00:00:33.170 --> 00:00:36.220
certainly of all the ES6 features, okay.

10
00:00:36.220 --> 00:00:43.440
And, I'm fully aware that when I present
something to you that has a high,

11
00:00:43.440 --> 00:00:48.530
Level of learning, that the first 30
minutes that I'm talking about this topic.

12
00:00:48.530 --> 00:00:51.700
It's gonna be a little bit confusing and
that is totally okay so

13
00:00:51.700 --> 00:00:56.650
don't feel like you're somehow behind or
whatever if this is weird or confusing.

14
00:00:56.650 --> 00:01:02.350
It took me months to get comfortable
with this stuff, okay And I'm also

15
00:01:02.350 --> 00:01:05.750
fully aware that if I tell you something
that takes an awful lot of learning.

16
00:01:05.750 --> 00:01:09.230
That might seem to kind of betray the
whole purpose of what we were trying to

17
00:01:09.230 --> 00:01:09.740
get here.

18
00:01:09.740 --> 00:01:11.780
Which was to try to make it easy for

19
00:01:11.780 --> 00:01:14.910
people to not have to learn a whole
bunch of stuff to understand our code.

20
00:01:15.960 --> 00:01:20.150
So, that's another nuance, if you will,
that I want to make sure we're clear on.

21
00:01:21.350 --> 00:01:26.020
Don't ever hear me to say I don't want
somebody to learn something right.

22
00:01:26.020 --> 00:01:29.650
That is the antithesis of my
message you're here today and

23
00:01:29.650 --> 00:01:32.680
you're in this workshop you're
watching this workshop because

24
00:01:32.680 --> 00:01:35.940
I hope that you have the same spirit as
I do which is my challenge is for you

25
00:01:35.940 --> 00:01:40.710
to learn deeper to go deeper uncommonly so
more than most of your peers do.

26
00:01:41.720 --> 00:01:43.270
So, I want that and
I wanna promote that, so

27
00:01:43.270 --> 00:01:46.060
don't ever hear me to say, I don't
want you to have to learn something,

28
00:01:46.060 --> 00:01:50.390
that's not the point of creating readable,
understandable familiar code.

29
00:01:51.430 --> 00:01:54.887
But, there is a difference
between learning something,

30
00:01:54.887 --> 00:02:00.330
that pays off only for that line of code
and learning something that pays off.

31
00:02:00.330 --> 00:02:02.430
For every line of code like
it throughout your code base.

32
00:02:03.740 --> 00:02:06.190
And that's the difference
I wanna draw here.

33
00:02:06.190 --> 00:02:07.750
There are all kinds of tricks.

34
00:02:07.750 --> 00:02:11.570
As a matter of fact, I've thought in
the past about maybe writing a book.

35
00:02:11.570 --> 00:02:14.140
And maybe someday I will just for
the fun of it.

36
00:02:14.140 --> 00:02:18.000
Maybe writing a book about
all the crazy esoteric tricks

37
00:02:18.000 --> 00:02:20.240
that JavaScript programmers can pull.

38
00:02:20.240 --> 00:02:24.170
Because, there's all kinds of tricks
that we can play in our code.

39
00:02:24.170 --> 00:02:28.920
It's a very sophisticated language when
you start really poking at all the edge

40
00:02:28.920 --> 00:02:30.980
cases and there's a lot of
cool stuff that we can do.

41
00:02:30.980 --> 00:02:33.770
And that's fun, right?

42
00:02:33.770 --> 00:02:37.370
I'll be the first to admit, it's fun when
you can pull some kind of trick out of

43
00:02:37.370 --> 00:02:39.960
a hat and look how this thing
just fits together with that and

44
00:02:39.960 --> 00:02:41.530
they just work right, or whatever.

45
00:02:41.530 --> 00:02:44.240
One example just to give you an example.

46
00:02:44.240 --> 00:02:50.910
I love the fact that function.prototype
is itself an empty no up function.

47
00:02:52.120 --> 00:02:56.280
So, instead of somewhere in my code
writing over and over and over again that

48
00:02:56.280 --> 00:03:01.140
or the arrow equivalent of it I like that
little trick that I can just use function

49
00:03:01.140 --> 00:03:06.210
prototype in those places Because I
know it's just a plain old simple empty

50
00:03:06.210 --> 00:03:09.940
no up function and in places where I
want that that's a nice useful thing.

51
00:03:09.940 --> 00:03:14.700
So there's, that's just one example of 100
right just little tricks that we should,

52
00:03:14.700 --> 00:03:17.050
that we can know about
the JavaScript language.

53
00:03:17.050 --> 00:03:22.160
But the fact of the matter is that these
tricks can be divided into This spectrum

54
00:03:22.160 --> 00:03:27.400
where there are some tricks on this side
of the spectrum that if you learn them,

55
00:03:27.400 --> 00:03:29.750
they're really only going to
pay off in that one spot.

56
00:03:31.510 --> 00:03:35.910
Put a lot of effort into understanding
how this one statement work.

57
00:03:35.910 --> 00:03:38.849
But, you're never going to see that ever
again throughout the entire code base.

58
00:03:40.010 --> 00:03:43.550
Okay, so I put a lot of learning in and
I got one line of code red.

59
00:03:44.670 --> 00:03:46.780
But, there are other tricks,
there are other techniques,

60
00:03:46.780 --> 00:03:52.390
there are other patterns that we can use
as developers that pay off in folds, they

61
00:03:52.390 --> 00:03:57.180
pay all bigger than themselves and in more
places in your code than in just one spot.

62
00:03:58.280 --> 00:04:04.820
So, wherever possible, What I want you to
do is focus your attention on using and

63
00:04:04.820 --> 00:04:09.640
learning the things that pay off in a
bigger sense as opposed to look how clever

64
00:04:09.640 --> 00:04:13.780
I can be on just this one little line
of code look I can use the double tilde

65
00:04:13.780 --> 00:04:19.260
operator in this really weird way and I've
saved myself a couple of characters But

66
00:04:19.260 --> 00:04:22.530
there'll never be another case in my
entire career where I see double till day

67
00:04:22.530 --> 00:04:25.860
so my time spent to learn that,
doesn't pay off very much.

68
00:04:25.860 --> 00:04:28.470
Does that makes sense,
are you following me?

69
00:04:28.470 --> 00:04:32.180
This is the balance,
there's a balancing act to play, yes.

70
00:04:32.180 --> 00:04:34.360
&gt;&gt; Speaker 2: Question from the chat room.

71
00:04:34.360 --> 00:04:35.936
What are your thoughts on typescript?

72
00:04:35.936 --> 00:04:39.880
Similar to babble, different?

73
00:04:39.880 --> 00:04:43.890
&gt;&gt; Kyle Simpson: Well, similar to babble
in the sense that they both end up

74
00:04:43.890 --> 00:04:48.840
processing your code and producing a
different version of your code that runs.

75
00:04:48.840 --> 00:04:55.730
Different that type scripts job is to take
features that aren't part of the spec.

76
00:04:55.730 --> 00:04:59.570
And make them work in
a spec compliant browser.

77
00:04:59.570 --> 00:05:04.670
Where as bubbles job is to take stuff
that's either part of the spec or

78
00:05:04.670 --> 00:05:09.180
hopefully maybe gonna be part of the spec
and make it work in the browser.

79
00:05:09.180 --> 00:05:10.180
So, there's a difference there.

80
00:05:11.770 --> 00:05:14.030
In general,
I mean I often gets asked this.

81
00:05:14.030 --> 00:05:16.250
I often get asked what you
think about TypeScript?

82
00:05:16.250 --> 00:05:18.409
I also used to get asked what
you think about CoffeeScript?

83
00:05:19.550 --> 00:05:21.530
And my answer is kind of the same for

84
00:05:21.530 --> 00:05:26.560
both of them which is I don't use them but
I don't have any problem with them

85
00:05:26.560 --> 00:05:30.490
as a matter of fact I think it's a good
thing that Coffee Script existed.

86
00:05:30.490 --> 00:05:36.270
Many of the great things that we're seeing
in year six are here in large part,

87
00:05:36.270 --> 00:05:39.660
large part because CoffeeScript
first pioneered whether or

88
00:05:39.660 --> 00:05:42.520
not it could even work in
the JavaScript ecosystem.

89
00:05:42.520 --> 00:05:46.910
I think that the good parts of
CoffeeScript made it into ES6 for

90
00:05:46.910 --> 00:05:49.650
the most part, right.

91
00:05:49.650 --> 00:05:52.480
So, I think it's a great thing
that CoffeeScript existed.

92
00:05:52.480 --> 00:05:55.310
I wouldn't ever write a line
of CoffeeScript again

93
00:05:55.310 --> 00:05:59.000
I'm pretty sure coffee script is
like DOA at this point, right.

94
00:05:59.000 --> 00:06:02.140
Like it's a dead horse.

95
00:06:02.140 --> 00:06:05.250
So, I wouldn't ever recommend somebody
write coffee script today but

96
00:06:05.250 --> 00:06:09.880
I'm glad it existed and I think we need
more of those, I think we need 1,000 more

97
00:06:09.880 --> 00:06:13.930
experiments into language designs that we
can practice with this stuff before we get

98
00:06:13.930 --> 00:06:17.960
it stuck in, set in stone in our
language and we can never change it.

99
00:06:17.960 --> 00:06:19.790
Because that's one thing as
soon as we make a mistake.

100
00:06:19.790 --> 00:06:21.510
We're stuck with it forever.

101
00:06:21.510 --> 00:06:24.740
So, I think it's a great thing that
we have explorations of that and

102
00:06:24.740 --> 00:06:28.010
I think typescript is in that
same vein it's an exploration

103
00:06:28.010 --> 00:06:33.360
into a what could classes look like
before classes were standardized.

104
00:06:33.360 --> 00:06:35.500
That's one reason people use typescript.

105
00:06:35.500 --> 00:06:39.740
Because they were the first ones to kind
of pioneer what we now know as the ES6

106
00:06:39.740 --> 00:06:41.010
class syntax.

107
00:06:41.010 --> 00:06:44.700
I'm not a fan of that syntax, but if you
are a fan of that syntax typescript is

108
00:06:44.700 --> 00:06:49.070
a great place to have been working
with that for quite a long time.

109
00:06:49.070 --> 00:06:52.820
And the other thing of course
is the typescript is designed to

110
00:06:52.820 --> 00:06:58.200
add the type annotations thing in so
you have a compiler enforced set of

111
00:06:58.200 --> 00:07:00.680
Behavior around what
your types ought to be.

112
00:07:00.680 --> 00:07:04.660
Types have never been the source
of bugs in my program so

113
00:07:04.660 --> 00:07:08.820
typescript isn't the tool that I reach for
because I don't have that problem.

114
00:07:08.820 --> 00:07:11.650
But there are certain places where
that problem is absolutely valid and

115
00:07:11.650 --> 00:07:15.210
if you're writing for example all day
long if you're switching back and

116
00:07:15.210 --> 00:07:17.240
forth between JavaScript and .NET.

117
00:07:17.240 --> 00:07:21.400
You probably ought to be using typescript
because it just makes a lot more sense

118
00:07:21.400 --> 00:07:23.570
To keep in the same mental context.

119
00:07:23.570 --> 00:07:28.090
It's not my world but I think it's
a good thing that that exists for

120
00:07:28.090 --> 00:07:34.288
those sorts of use cases so
hopefully that answers, the opinion.

121
00:07:34.288 --> 00:07:35.610
Okay.

122
00:07:35.610 --> 00:07:39.490
So, let's now turn our attention
to this destructuring thing and

123
00:07:39.490 --> 00:07:43.770
stick with me cuz it will be
a little bit confusing but I believe

124
00:07:43.770 --> 00:07:48.750
That if you give this the weeks of time
and practice if you look for opportunities

125
00:07:48.750 --> 00:07:52.170
to use these techniques I think it will
pay off beyond just those lines of code.

