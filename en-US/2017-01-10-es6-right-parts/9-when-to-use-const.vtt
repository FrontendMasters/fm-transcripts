WEBVTT

1
00:00:00.000 --> 00:00:03.954
[MUSIC]

2
00:00:03.954 --> 00:00:06.450
&gt;&gt; Speaker 1: The question
was about using const for

3
00:00:06.450 --> 00:00:09.421
immutable values like strings and numbers.

4
00:00:09.421 --> 00:00:12.590
I'm not 100% sure what
the questions actually asking.

5
00:00:14.150 --> 00:00:15.920
It's Mark A.

6
00:00:15.920 --> 00:00:19.790
About three minutes ago.
&gt;&gt; Kyle Simpson: Okay I think

7
00:00:19.790 --> 00:00:21.920
the question is where am
I going to use const?

8
00:00:22.960 --> 00:00:25.480
Place where I think you should use const

9
00:00:25.480 --> 00:00:27.750
is where you were already
doing stuff like this.

10
00:00:29.750 --> 00:00:33.050
If you did something silly
like var pi equals 3.14.

11
00:00:33.050 --> 00:00:38.260
You have my blessing to go change those
all to consts because those really are.

12
00:00:38.260 --> 00:00:40.770
Mutable values that you
don't intend to reassign and

13
00:00:40.770 --> 00:00:43.380
if you want to put const
on it that's no big deal.

14
00:00:44.460 --> 00:00:48.490
But I don't think you ought to go do
like const f equals arrow function or

15
00:00:48.490 --> 00:00:49.130
anything like that.

16
00:00:49.130 --> 00:00:52.400
Because I think you're just
inviting additional visual clutter

17
00:00:52.400 --> 00:00:55.050
that's not actually communicating
what you think it's communicating.

18
00:00:56.430 --> 00:00:59.463
Okay yes?
&gt;&gt; Speaker 3: What's your take on using

19
00:00:59.463 --> 00:01:01.586
const for function name?

20
00:01:01.586 --> 00:01:04.775
Like let's say you create a utility
function then you're calling it add some

21
00:01:04.775 --> 00:01:07.280
or something.
&gt;&gt; Kyle Simpson: Like I just said,

22
00:01:07.280 --> 00:01:11.260
I would not do const add some equals and
then some function.

23
00:01:11.260 --> 00:01:16.510
I just make a function declaration.
&gt;&gt; Kyle Simpson: So

24
00:01:16.510 --> 00:01:21.690
there are relatively few places in my code
where I have actual constants like this.

25
00:01:23.820 --> 00:01:28.072
But in those places I'd
endorse using the const.

26
00:01:28.072 --> 00:01:31.400
And I don't think you should lead off
every one of your declarations in your

27
00:01:31.400 --> 00:01:32.650
code with a const.

28
00:01:32.650 --> 00:01:37.253
Because I think you're inviting unfamiliar
readers with your code to potentially have

29
00:01:37.253 --> 00:01:44.153
some visual stumbling block.
&gt;&gt; Speaker 1: Is

30
00:01:44.153 --> 00:01:47.464
there any benefit of using
const on a raise then, or

31
00:01:47.464 --> 00:01:50.190
objects?
&gt;&gt; Kyle Simpson: I don't think so at all.

32
00:01:50.190 --> 00:01:51.070
Matter of fact, this

33
00:01:52.440 --> 00:01:55.920
is a little controversial because I've had
debates with people about this before.

34
00:01:55.920 --> 00:01:59.242
But saying something like const
x equals array one, two, three.

35
00:01:59.242 --> 00:02:03.859
Let's say that this was a really huge
array like it was 100 megabytes of memory.

36
00:02:03.859 --> 00:02:08.050
And let's say that it was inside
of some kind of function foo.

37
00:02:08.050 --> 00:02:14.064
And I declared this thing here and
then let's say I set something up like

38
00:02:25.933 --> 00:02:26.637
&gt;&gt; Kyle Simpson: So I make some

39
00:02:26.637 --> 00:02:29.720
reference to x inside of my
function I've closed over x.

40
00:02:30.930 --> 00:02:34.410
X is gonna stay around for
as long as that click handlers there and

41
00:02:34.410 --> 00:02:36.890
in our program we're never
unassigning that thing.

42
00:02:36.890 --> 00:02:40.140
But let's say there's some other
condition within our program.

43
00:02:40.140 --> 00:02:42.740
Which is that we would like to be able to

44
00:02:44.270 --> 00:02:48.170
garbage collect that array
because we're done with it.

45
00:02:48.170 --> 00:02:50.220
We'd like that ten megabytes or
one hundred megabytes or

46
00:02:50.220 --> 00:02:52.910
whatever of memory to be recollected.

47
00:02:52.910 --> 00:02:55.820
Normally you would do
something like x equals null.

48
00:02:55.820 --> 00:02:57.590
That's no longer allowed
when you use it const.

49
00:03:00.910 --> 00:03:03.740
So as a matter of fact there are places
where the const can actually make it

50
00:03:03.740 --> 00:03:04.690
worse.

51
00:03:04.690 --> 00:03:08.190
You have to fiddle around with your
garbage collection sorts of things

52
00:03:08.190 --> 00:03:11.145
in this particular case since it's an
array you could have done something like

53
00:03:11.145 --> 00:03:12.630
x.that length equals zero.

54
00:03:12.630 --> 00:03:16.610
But if it were an object, you wouldn't
have that you would have to four loop over

55
00:03:16.610 --> 00:03:19.070
them and delete all the properties or
something like that.

56
00:03:19.070 --> 00:03:19.680
Super awkward.

57
00:03:20.800 --> 00:03:23.410
So there are places where const
can actually trip you up,

58
00:03:23.410 --> 00:03:26.270
just like there are places
where LET can to trip you up.

59
00:03:26.270 --> 00:03:30.180
So I'd recommend using the const in
the places where it's actually justified.

60
00:03:30.180 --> 00:03:33.360
Rather than just preemptively using it
everywhere and then getting tripped up.

61
00:03:33.360 --> 00:03:34.550
&gt;&gt; Speaker 1: There's sort of a follow

62
00:03:34.550 --> 00:03:38.070
when using const with object trees.
&gt;&gt; Kyle Simpson: So

63
00:03:38.070 --> 00:03:43.620
I don't think it helps at all to
add const and object dot frees.

64
00:03:43.620 --> 00:03:46.080
Okay, I don't think that
does anything extra.

65
00:03:46.080 --> 00:03:49.340
If you want to, great, but
I don't think it helps anything at all.

66
00:03:49.340 --> 00:03:51.819
I think because that comes at
the beginning of the line,

67
00:03:51.819 --> 00:03:55.056
it's already signaled somebody to
get confused as to what's going on.

