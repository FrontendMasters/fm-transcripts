WEBVTT

1
00:00:00.000 --> 00:00:04.110
[MUSIC]

2
00:00:04.110 --> 00:00:06.011
&gt;&gt; Kyle Simpson: So let's try to
make this a little more concrete,

3
00:00:06.011 --> 00:00:08.230
let's come back to our example here.

4
00:00:08.230 --> 00:00:11.770
And let's think about how would
we make this OBJ object iterable.

5
00:00:13.170 --> 00:00:16.470
Well I do need a symbol iterator here,
right.

6
00:00:17.590 --> 00:00:21.346
But pretty much almost all
of this stuff goes away.

7
00:00:24.547 --> 00:00:25.425
&gt;&gt; Kyle Simpson: That's a good start.

8
00:00:25.425 --> 00:00:26.180
[LAUGH] Right.

9
00:00:27.420 --> 00:00:31.110
Now we want our symbol iterator
to produce an iterator.

10
00:00:31.110 --> 00:00:34.690
What data type did we just find out
automatically produces iterators?

11
00:00:36.720 --> 00:00:37.320
Generator.
So

12
00:00:37.320 --> 00:00:42.500
let's do a concise computed
generator method, okay.

13
00:00:42.500 --> 00:00:46.420
Now, this thing needs to
simply spit out values.

14
00:00:47.700 --> 00:00:52.224
Here's what it's gonna do for

15
00:00:52.224 --> 00:00:57.793
var (i = this.start; i less than or

16
00:00:57.793 --> 00:01:03.870
equal to this.end,
&gt;&gt; Kyle Simpson: i++)

17
00:01:03.870 --> 00:01:09.274
Yield this stock values of [i].

18
00:01:13.221 --> 00:01:14.520
&gt;&gt; Kyle Simpson: Gone.

19
00:01:19.990 --> 00:01:21.150
&gt;&gt; Kyle Simpson: Think about
what that's doing now.

20
00:01:23.910 --> 00:01:30.180
It's producing an iterator that is
going to start at this .start location.

21
00:01:30.180 --> 00:01:31.700
Loop over its values array.

22
00:01:32.720 --> 00:01:35.457
And just yield out whatever it
finds in that values array.

23
00:01:49.716 --> 00:01:53.574
&gt;&gt; Kyle Simpson: I'm pretty sure if I was
hard pressed I would have to tell you

24
00:01:53.574 --> 00:01:58.230
generator is either my favorite or
my second favorite feature.

25
00:01:58.230 --> 00:02:00.010
It's a tie between generators and

26
00:02:00.010 --> 00:02:05.090
destructuring terms of my favorite,
most powerful features.

27
00:02:06.310 --> 00:02:09.263
They have high learning curves,
they have huge payoffs.

28
00:02:22.783 --> 00:02:26.920
&gt;&gt; Kyle Simpson: More questions about
a question, why is it called a generator?

29
00:02:26.920 --> 00:02:29.945
I don't know, that's actually
not an invention of JavaScripts.

30
00:02:29.945 --> 00:02:33.312
We took inspiration from C#, and Python,

31
00:02:33.312 --> 00:02:37.890
and other languages which
are called the generators.

32
00:02:37.890 --> 00:02:41.090
My on in my actual

33
00:02:41.090 --> 00:02:43.875
unofficial answer to that question
is because they generate value.

34
00:02:43.875 --> 00:02:48.530
[INAUDIBLE] But I don't know if that's
the real reason they're called generators.

