WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:39.880 --> 00:00:43.039
&gt;&gt; Kyle Simpson: This is my preferred
place to teach JavaScript, so

3
00:00:43.039 --> 00:00:46.170
it's such an honor to
keep being part of it.

4
00:00:46.170 --> 00:00:47.300
We just did a quick count.

5
00:00:47.300 --> 00:00:50.777
This will be my ninth course taught for

6
00:00:50.777 --> 00:00:55.349
front end masters, so
that's pretty exciting.

7
00:00:55.349 --> 00:00:58.240
And I always tell this.

8
00:00:58.240 --> 00:01:00.430
It's actually,
the first place I ever taught.

9
00:01:00.430 --> 00:01:03.545
Mark gave me my start as a teacher,
called me up out of the blue and

10
00:01:03.545 --> 00:01:05.296
said I think you should come teach.

11
00:01:05.296 --> 00:01:08.274
And I've made a career
out of it since then.

12
00:01:08.274 --> 00:01:11.943
So it's an honor to come back to
that place and to talk to you about,

13
00:01:11.943 --> 00:01:16.180
I think maybe one of the most
important topics that I've taught on.

14
00:01:16.180 --> 00:01:19.010
Which is really kind of beckoning towards

15
00:01:19.010 --> 00:01:23.640
the future of where
the JavaScript language is headed.

16
00:01:23.640 --> 00:01:27.630
And that future,
I believe, is very bright.

17
00:01:27.630 --> 00:01:29.740
It's a really good future.

18
00:01:29.740 --> 00:01:34.390
There was a long period of what we would
call the dark ages for this language.

19
00:01:34.390 --> 00:01:38.350
And some of you like me,
were around to experience that.

20
00:01:38.350 --> 00:01:41.529
To experience all the problems of
feeling like the language was just dead,

21
00:01:41.529 --> 00:01:44.350
it was dead in the water,
it wasn't going anywhere.

22
00:01:44.350 --> 00:01:49.160
And now we are in this period of rapid
growth expansion of the language.

23
00:01:50.180 --> 00:01:54.230
And there are a ton of things that have
been added over the last year or two.

24
00:01:54.230 --> 00:01:57.109
If you kind of been taking a nap for
the last year or two and

25
00:01:57.109 --> 00:02:00.330
you wake up,
it's not the same JavaScript anymore.

26
00:02:00.330 --> 00:02:03.260
You can't read a blog post these
days without seeing an arrow

27
00:02:03.260 --> 00:02:04.720
function somewhere.

28
00:02:04.720 --> 00:02:09.054
Or some new feature that somebody wants,
like the double colon bind operator,

29
00:02:09.054 --> 00:02:10.994
which isn't even in the spec yet but

30
00:02:10.994 --> 00:02:14.630
we already write code assuming
that that thing is coming, right?

31
00:02:14.630 --> 00:02:17.390
So the language is rapidly evolving.

32
00:02:17.390 --> 00:02:21.729
And those of us who spend time writing and
teaching about JavaScript

33
00:02:21.729 --> 00:02:25.912
have to grapple with what does that
mean if I write something, and

34
00:02:25.912 --> 00:02:29.430
then six months later that
thing is already obsolete?

35
00:02:30.980 --> 00:02:35.580
So it's a fun and
exciting time for the language.

36
00:02:35.580 --> 00:02:37.850
There are a lot of amazing things added,
and

37
00:02:37.850 --> 00:02:40.720
then there are some things
that maybe aren't so great.

38
00:02:40.720 --> 00:02:43.820
And there's a lot of subjectivity of
course, everybody has their own opinions.

39
00:02:45.010 --> 00:02:48.240
Today's class, ES6, The Right Parts,

40
00:02:48.240 --> 00:02:52.450
is designed to give you an opinionated
guide through the things.

41
00:02:52.450 --> 00:02:57.000
Not just,
am I saying these are the correct parts.

42
00:02:57.000 --> 00:03:01.870
But I really mean these are the right
parts for you to focus on first.

43
00:03:01.870 --> 00:03:03.310
That's what I really mean by the title.

44
00:03:03.310 --> 00:03:04.453
What I really mean,

45
00:03:04.453 --> 00:03:08.500
is this is the right stuff that you
should be paying attention to first.

46
00:03:08.500 --> 00:03:11.161
And I'm gonna give you
my own personal take,

47
00:03:11.161 --> 00:03:14.840
my own narrative on why I
think ES 6 is important.

48
00:03:14.840 --> 00:03:21.230
It's really all about using the tools
that are now in the language,

49
00:03:21.230 --> 00:03:24.490
to affect a goal that I
think we should have had for

50
00:03:24.490 --> 00:03:28.030
a long time that most of
us really didn't adopt for.

51
00:03:28.030 --> 00:03:30.190
And maybe haven't even fully yet adopted.

52
00:03:30.190 --> 00:03:34.845
But it's become such a deeply held belief
of mine as an educator in JavaScript,

53
00:03:34.845 --> 00:03:37.770
that you could almost call
it a religious belief.

54
00:03:37.770 --> 00:03:40.400
That code is not about
instructing the computer.

55
00:03:40.400 --> 00:03:43.110
Code is about communicating
with other human beings.

56
00:03:43.110 --> 00:03:48.510
[COUGH] We are really good at
instructing the computer on what to do.

57
00:03:48.510 --> 00:03:50.860
Many of you are expert developers.

58
00:03:50.860 --> 00:03:54.200
But how good are you at
communicating to other human beings?

59
00:03:54.200 --> 00:03:56.950
Did you know that researchers say

60
00:03:56.950 --> 00:04:00.260
that within the span of time that
you spend maintaining your code.

61
00:04:00.260 --> 00:04:01.730
And let's be honest.

62
00:04:01.730 --> 00:04:06.610
Most of us, our jobs are more
primarily maintaining existing code.

63
00:04:06.610 --> 00:04:10.580
Not opening up a brand new blank file,
and writing brand new code for

64
00:04:10.580 --> 00:04:13.170
the first time, all day every single day.

65
00:04:13.170 --> 00:04:14.720
Maybe you're lucky
enough to have that job.

66
00:04:14.720 --> 00:04:18.670
But most of us spend our time
developing on code that already exists,

67
00:04:18.670 --> 00:04:21.410
either code that we wrote yesterday or
last week or last month or

68
00:04:21.410 --> 00:04:24.100
something that somebody
else wrote on our team.

69
00:04:24.100 --> 00:04:26.460
Maybe even somebody that
wrote it years ago and

70
00:04:26.460 --> 00:04:29.430
we're maintaining legacy code,
as they say.

71
00:04:29.430 --> 00:04:30.051
Right.
Right, so

72
00:04:30.051 --> 00:04:31.916
we spend most of our
time maintaining code.

73
00:04:31.916 --> 00:04:35.954
And researcher say, in the time that
you spend maintaining your code,

74
00:04:35.954 --> 00:04:37.905
which is the majority of your day,

75
00:04:37.905 --> 00:04:42.640
did you know that you spend 70% of your
time just reading to understand the code?

76
00:04:44.130 --> 00:04:46.410
No wonder the global average for

77
00:04:46.410 --> 00:04:51.820
lines of code written by a deprogrammer
is under five lines of code per day.

78
00:04:51.820 --> 00:04:56.210
Because we spend 7 hours and
49 minutes a day reading the damn

79
00:04:56.210 --> 00:04:59.390
thing before we can figure out what five
lines to write and where to put them.

80
00:05:00.850 --> 00:05:04.300
Because we really,
if we're honest about it,

81
00:05:04.300 --> 00:05:08.330
we kind of prioritize authorship of code.

82
00:05:08.330 --> 00:05:13.190
Don't we prioritize how quick and easy and
fast it is for us to write our code, and

83
00:05:13.190 --> 00:05:17.170
maybe not so much pay attention
to what it is to read the code?

84
00:05:18.500 --> 00:05:21.220
And I think many times,
people conflate these two.

85
00:05:21.220 --> 00:05:24.280
If I can write the code easily,
that means the code is easily read.

86
00:05:25.770 --> 00:05:29.730
The fewer characters I have to write,
the fewer characters somebody has to read.

87
00:05:29.730 --> 00:05:31.520
These seem to go logically together, and

88
00:05:31.520 --> 00:05:35.330
yet actually, they fly directly
in competition with each other.

89
00:05:36.830 --> 00:05:41.700
That same set of study and
research that I'm talking about suggests

90
00:05:41.700 --> 00:05:45.750
that the notion of readability is not
quite so subjective as we might assume.

91
00:05:45.750 --> 00:05:48.780
Most people probably assume
that readability is all about

92
00:05:48.780 --> 00:05:52.700
your own personal preference, and there's
no way to possibly make a statement about

93
00:05:52.700 --> 00:05:54.058
whether something is readable or not.

94
00:05:54.058 --> 00:05:57.694
And these researchers set about to
figure out if there was a way to have

95
00:05:57.694 --> 00:06:00.591
an automated metric for
this code readability thing.

96
00:06:00.591 --> 00:06:05.165
And they discovered that the most
important factor that leads to somebody

97
00:06:05.165 --> 00:06:08.570
judging a piece of code as readable,
is familiarity.

98
00:06:09.785 --> 00:06:14.735
Have you seen that code before, or
have you seen that pattern of code before?

99
00:06:14.735 --> 00:06:17.885
If you have, regardless of how
many characters it includes,

100
00:06:17.885 --> 00:06:19.075
you call it readable.

101
00:06:19.075 --> 00:06:23.015
And if you haven't, regardless of how many
characters, you call it not readable.

102
00:06:23.015 --> 00:06:25.500
It's just simply, are we familiar with it?

103
00:06:25.500 --> 00:06:29.737
Now we oftentimes just assume everybody
on the team's gonna know everything, and

104
00:06:29.737 --> 00:06:31.928
we're gonna be super hyper-optimized.

105
00:06:31.928 --> 00:06:35.070
We're race car that's going around
the track at a hundred miles an hour.

106
00:06:35.070 --> 00:06:37.142
I worked at this startup one time,

107
00:06:37.142 --> 00:06:41.428
the CEO of the startup used the stupid
metaphor like we're a race car and

108
00:06:41.428 --> 00:06:44.732
we have to change the tires
without a pit stop, right?

109
00:06:44.732 --> 00:06:48.503
It's the dumbest,
stupid startup metaphor ever, right?

110
00:06:48.503 --> 00:06:51.560
But that's kind of how we
think about writing our code.

111
00:06:51.560 --> 00:06:53.530
We're all like this finely tuned machine,
and

112
00:06:53.530 --> 00:06:58.150
we don't have to worry about
bringing people up to speed.

113
00:06:58.150 --> 00:06:59.530
Except don't we?

114
00:07:00.570 --> 00:07:03.230
Isn't there always gonna be
a new person joining the team?

115
00:07:03.230 --> 00:07:07.230
And isn't it always the case
when a new person joins a team,

116
00:07:07.230 --> 00:07:10.990
you just sort of say hey,
first two weeks, week or two,

117
00:07:10.990 --> 00:07:15.090
just go read the code to figure
out what it's doing, right?

118
00:07:15.090 --> 00:07:17.995
Anybody in here like me,
I had a lot of jobs and

119
00:07:17.995 --> 00:07:21.609
I was always told just go read
the code to understand it.

120
00:07:21.609 --> 00:07:25.030
Do you know how much I actually
understood from reading the code?

121
00:07:25.030 --> 00:07:25.780
Very, very little.

122
00:07:27.130 --> 00:07:31.130
Because I think that
team probably prioritized

123
00:07:31.130 --> 00:07:35.390
writing the code efficiently as a team,
as a well tuned machine.

124
00:07:35.390 --> 00:07:40.065
And didn't always necessarily think about
what's it gonna be like if somebody

125
00:07:40.065 --> 00:07:42.516
reads this and isn't already familiar?

126
00:07:42.516 --> 00:07:45.020
Is there are moderator question?

127
00:07:45.020 --> 00:07:46.300
Yeah.
&gt;&gt; Speaker 2: From the channel,

128
00:07:46.300 --> 00:07:50.250
are there any links to this research?
&gt;&gt; Kyle Simpson: Yeah I will throw out

129
00:07:50.250 --> 00:07:51.310
some links to the research.

130
00:07:51.310 --> 00:07:51.940
There's specifically,

131
00:07:51.940 --> 00:07:55.020
there's a white paper that I've read
about automated code readability.

132
00:07:55.020 --> 00:07:58.790
If you Google search automated code
readability, you'll probably find it.

133
00:07:58.790 --> 00:08:01.427
But that white paper cites
some other papers on this

134
00:08:01.427 --> 00:08:05.042
research.
&gt;&gt; Kyle Simpson: So,

135
00:08:05.042 --> 00:08:09.497
I think it's really important that
we maybe put reader of the code,

136
00:08:09.497 --> 00:08:13.920
as a more important priority
than writer of the code.

137
00:08:13.920 --> 00:08:16.880
So with that as our backdrop,
we turn our attention to ES6.

138
00:08:18.040 --> 00:08:21.620
And most people think that ES6 is all
about a whole bunch of brand new shiny

139
00:08:21.620 --> 00:08:23.866
toys that make us have
more fun writing our code.

140
00:08:23.866 --> 00:08:27.890
And I'm gonna tell you that it's not so
much about writing your code.

141
00:08:27.890 --> 00:08:30.320
But it's really more about
making that code more readable.

142
00:08:31.720 --> 00:08:34.640
Specifically, there's
a notion in programming, and

143
00:08:34.640 --> 00:08:35.680
maybe you've heard this before.

144
00:08:35.680 --> 00:08:38.855
But there's a distinction that
we make between styles of code.

145
00:08:38.855 --> 00:08:42.429
And typically we can put code
into somewhere in a spectrum, but

146
00:08:42.429 --> 00:08:45.339
into two camps,
imperative versus declarative.

147
00:08:46.570 --> 00:08:49.110
Some of you may have seen
frameworks out there that kind of

148
00:08:49.110 --> 00:08:50.980
sway heavily one way or the other.

149
00:08:50.980 --> 00:08:54.040
For example Angular, and
it's very declarative,

150
00:08:54.040 --> 00:08:55.560
we put all of the stuff in the markup.

151
00:08:55.560 --> 00:08:58.100
And there are other frameworks
which I think would be more in

152
00:08:58.100 --> 00:09:01.460
the imperative scale, like for
example an ember or something like that.

153
00:09:01.460 --> 00:09:05.420
So we have this spectrum of
imperative versus declarative.

154
00:09:05.420 --> 00:09:06.710
Here's how to put it simply.

155
00:09:06.710 --> 00:09:09.610
Imperative means telling
the computer how to do something.

156
00:09:09.610 --> 00:09:12.940
Declarative means telling the computer
what the end result should be.

157
00:09:14.290 --> 00:09:15.800
Let the computer figure
out how to do it best.

158
00:09:17.180 --> 00:09:19.010
Okay.
Now it is not the case that

159
00:09:19.010 --> 00:09:23.050
all declarative code or
all imperative code is correct.

160
00:09:23.050 --> 00:09:25.790
That is not the case that
that will be the best code is

161
00:09:25.790 --> 00:09:29.270
if you swing that pendulum
one way either way.

162
00:09:29.270 --> 00:09:34.150
It is however, the case that many times
declarative code used appropriately,

163
00:09:34.150 --> 00:09:38.690
used measured, used with caution,
declarative coding style does

164
00:09:38.690 --> 00:09:42.010
tend to be more readable to those who
are not already familiar with the program.

165
00:09:43.220 --> 00:09:46.310
If I threw up an algorithm here and
I had a bunch of for loop and

166
00:09:46.310 --> 00:09:47.980
if statements and stuff.

167
00:09:47.980 --> 00:09:50.830
You would have to read every single
line of that and trace through,

168
00:09:50.830 --> 00:09:53.820
essentially run the program in your
head to understand what it was doing.

169
00:09:53.820 --> 00:09:57.941
But if I used a declarative form that
just simply said here's the end result, I

170
00:09:57.941 --> 00:10:02.138
want all these numbers squared minus one.
&gt;&gt; Kyle Simpson: Right,

171
00:10:02.138 --> 00:10:04.779
I don't want you to have to go through and
figure out what that is.

172
00:10:04.779 --> 00:10:08.120
I wanna just tell you
that's what this code does.

173
00:10:08.120 --> 00:10:12.658
And a declarative form,
a syntax that is a declarative form,

174
00:10:12.658 --> 00:10:17.721
says the end result should be number
squared minus one, and allows as

175
00:10:17.721 --> 00:10:23.594
much of possible, allows that to be taken
care of as an implementation detail.

176
00:10:23.594 --> 00:10:24.824
So, ES6.

177
00:10:24.824 --> 00:10:29.150
The narrative that I wanna leave you or I
wanna start today, not leave you, I wanna

178
00:10:29.150 --> 00:10:35.870
start today with, is that ES6 is really
about adding more declarative forms.

179
00:10:35.870 --> 00:10:37.910
So that we can take the idioms,

180
00:10:37.910 --> 00:10:40.800
all the stuff that we've been
doing in our existing code, and

181
00:10:40.800 --> 00:10:46.480
express them in a way that will be, once
somebody learns ES6, much more familiar.

182
00:10:46.480 --> 00:10:49.670
Because a person will not have to spend so
much time reading through each of

183
00:10:49.670 --> 00:10:55.860
the details of the logic,
they'll be able to recognize at a glance,

184
00:10:55.860 --> 00:10:58.830
the declarative form and
know what that declarative form is doing.

185
00:11:00.560 --> 00:11:03.640
The goal being that we make
that's more readable, for

186
00:11:03.640 --> 00:11:05.410
those who aren't already
familiar with our code.

187
00:11:07.290 --> 00:11:09.080
So wherever possible today,

188
00:11:09.080 --> 00:11:12.730
I'm actually gonna give you the before and
the after comparison.

189
00:11:12.730 --> 00:11:15.400
I'm gonna try to start with
what we've been doing, and

190
00:11:15.400 --> 00:11:17.630
then talk about what we can now do.

191
00:11:17.630 --> 00:11:19.495
Not new functionality per se,

192
00:11:19.495 --> 00:11:24.490
virtually nothing in ES6 is something
you couldn't do at all before.

193
00:11:24.490 --> 00:11:26.381
It's a few little things, but

194
00:11:26.381 --> 00:11:31.052
most of it is just a better way to
communicate what we've always been doing.

195
00:11:31.052 --> 00:11:33.360
Okay, and I also want to point out this.

196
00:11:34.750 --> 00:11:35.620
Don't miss this point.

197
00:11:36.730 --> 00:11:41.440
There's an awful lot of narrative around
ES6 that says blank is the new blank.

198
00:11:43.070 --> 00:11:44.810
Arrow is the new function.

199
00:11:44.810 --> 00:11:46.240
LET is the new var.

200
00:11:46.240 --> 00:11:53.240
We've rushed to this idea that all the new
stuff means all the old stuff sucks.

201
00:11:53.240 --> 00:11:56.140
And it's legacy and it's bloat if
you're using all the old stuff.

202
00:11:56.140 --> 00:11:58.660
And you'll actually find very
little of that from me today.

203
00:12:00.450 --> 00:12:04.810
I don't think that there are very many
examples in the history of programming,

204
00:12:04.810 --> 00:12:08.259
where that has held globally true,
blank is the new blank.

205
00:12:09.950 --> 00:12:14.566
This is an additive set of tools that
gives us more ability to communicate what

206
00:12:14.566 --> 00:12:15.140
we want.

207
00:12:15.140 --> 00:12:18.380
But all the existing stuff stays valid.

208
00:12:18.380 --> 00:12:20.110
We preserve backwards compatibility.

209
00:12:20.110 --> 00:12:22.308
As a matter of fact,
there are gonna be things, and

210
00:12:22.308 --> 00:12:24.370
I'm gonna disagree with
a lot of my peers here.

211
00:12:24.370 --> 00:12:26.737
But there are gonna be things
that we've been doing,

212
00:12:26.737 --> 00:12:29.490
that we're gonna continue to keep doing.

213
00:12:29.490 --> 00:12:32.840
We should keep using certain features.

214
00:12:32.840 --> 00:12:35.930
Like for example, shockingly, I'm gonna
tell you, you should keep using functions.

215
00:12:36.970 --> 00:12:39.920
And I'm gonna tell you,
you should keep using the var keyword.

216
00:12:39.920 --> 00:12:41.420
We'll go through all of this stuff.

217
00:12:41.420 --> 00:12:42.960
Just because we have the new stuff and

218
00:12:42.960 --> 00:12:44.870
there are places where that
will be more communicated,

219
00:12:44.870 --> 00:12:49.370
doesn't mean that the old stuff needs to
necessarily be thrown out the window.

220
00:12:49.370 --> 00:12:53.250
Okay, so look at the ES6 as a way to
improve the readability of your code,

221
00:12:53.250 --> 00:12:55.430
not throw away all the old
stuff that we've already known.

