WEBVTT

1
00:00:00.000 --> 00:00:03.759
[MUSIC]

2
00:00:03.759 --> 00:00:06.377
&gt;&gt; Kyle Simpson: So the next thing that we
wanna turn our attention to I've all ready

3
00:00:06.377 --> 00:00:07.840
kind of alluded to this a little bit.

4
00:00:07.840 --> 00:00:11.661
But I wanna talk to you about a few
extensions that have been added to

5
00:00:11.661 --> 00:00:16.029
the object literal syntax to give us
the ability to do more declarative stuff

6
00:00:16.029 --> 00:00:20.900
instead of the more manual imperative
stuff that we've been doing all along.

7
00:00:20.900 --> 00:00:25.330
So we're just gonna talked about a variety
of quick little fixes or extensions,

8
00:00:25.330 --> 00:00:28.350
if you will to the object
literal sometimes.

9
00:00:28.350 --> 00:00:33.330
So it used to be the case that if I was
making an object and there was some, oops.

10
00:00:35.300 --> 00:00:39.785
There was some variable of a name for
example, a and

11
00:00:39.785 --> 00:00:43.240
I wanted to put that thing into object.

12
00:00:43.240 --> 00:00:47.450
If I wanted to say a property of
the same name with the value of a,

13
00:00:47.450 --> 00:00:50.879
I'd have to say it twice and
have say a: a, right?

14
00:00:50.879 --> 00:00:54.888
We now what are called concise properties
which we've already seen which is in

15
00:00:54.888 --> 00:00:58.850
the case where the property name and
the value it's coming from are the same.

16
00:01:00.260 --> 00:01:01.120
We can just list it once.

17
00:01:02.240 --> 00:01:04.810
So that's a concise property, okay?

18
00:01:04.810 --> 00:01:05.960
Nice simple, clear win.

19
00:01:08.990 --> 00:01:13.040
In addition to concise properties, we also
have what are called concise methods.

20
00:01:13.040 --> 00:01:16.945
It use to be the case that if you
want to put a function inside of your

21
00:01:16.945 --> 00:01:21.209
object literal, you have to say b; and
then put some function, okay?

22
00:01:21.209 --> 00:01:24.569
Now, we have the ability to do
what's called a concise method.

23
00:01:24.569 --> 00:01:29.150
Which is to take out the word function and

24
00:01:29.150 --> 00:01:36.580
just put the name in the parentheses and
the curly braces, okay?

25
00:01:36.580 --> 00:01:37.140
I use these a lot,

26
00:01:37.140 --> 00:01:43.030
but there's something that you should
be aware of with concise methods.

27
00:01:43.030 --> 00:01:47.429
You might be of the impression,
since there's a name there,

28
00:01:47.429 --> 00:01:50.570
that the extension of
that would look like.

29
00:01:55.670 --> 00:01:58.137
&gt;&gt; Kyle Simpson: Where there is
not only the property name, but

30
00:01:58.137 --> 00:01:59.790
also the name of the function.

31
00:02:00.840 --> 00:02:02.890
You might be of that assumption, and

32
00:02:02.890 --> 00:02:04.670
unfortunately that
assumption is incorrect.

33
00:02:06.180 --> 00:02:10.941
Because what actually by spec
happens is that b property points to

34
00:02:10.941 --> 00:02:12.770
an anonymous function.

35
00:02:12.770 --> 00:02:16.060
Now, it is an anonymous function
that is name inferencing.

36
00:02:17.370 --> 00:02:22.670
So that is an anonymous function that will
show up in your stack trace called b, but

37
00:02:22.670 --> 00:02:25.040
here is where this falls apart.

38
00:02:25.040 --> 00:02:26.390
Let's say you have code like this.

39
00:02:30.700 --> 00:02:35.140
Cuz I do that regularly, where I have
the property name and the variable name.

40
00:02:35.140 --> 00:02:36.450
And why do I have that variable name?

41
00:02:36.450 --> 00:02:40.360
Because there's some crazy condition
where I wanna do a recursive call on it.

42
00:02:40.360 --> 00:02:43.220
Or it's an event handler and
I wanna unbind it, for whatever reason.

43
00:02:43.220 --> 00:02:49.060
I need a self reference to the function
from inside of itself, okay?

44
00:02:49.060 --> 00:02:54.140
So if I want a self reference to
the function from inside of itself.

45
00:02:54.140 --> 00:02:57.070
This is nice and helpful as soon
as I come along and do this.

46
00:03:00.270 --> 00:03:07.120
B is no longer a lexical identifier, so
now my code is gonna stop working, okay?

47
00:03:07.120 --> 00:03:08.240
So the caveat,

48
00:03:08.240 --> 00:03:12.711
it's a big caveat to concise methods is
they don't have a lexical self reference.

49
00:03:14.340 --> 00:03:16.480
I think this is dumb.

50
00:03:16.480 --> 00:03:19.587
I petition very hard for
them to not do that, but

51
00:03:19.587 --> 00:03:22.240
there is a reason why they didn't do it.

52
00:03:22.240 --> 00:03:26.835
And the reason is that it is possible for
you to make functions, for

53
00:03:26.835 --> 00:03:31.284
you to make property names that
can't be lexical identifiers.

54
00:03:31.284 --> 00:03:36.256
For example,
&gt;&gt; Kyle Simpson: That can't be

55
00:03:36.256 --> 00:03:39.496
an identifier cuz it has a space in it,

56
00:03:39.496 --> 00:03:43.160
and it is entirely legal for
you to do that.

57
00:03:44.220 --> 00:03:48.420
So they ask rightly the question, what
should the lexical name be in that case?

58
00:03:48.420 --> 00:03:50.130
And there is no good
answer to that question.

59
00:03:51.300 --> 00:03:56.040
So because there are some cases where they
can't come up with a good lexical name,

60
00:03:56.040 --> 00:03:57.919
they didn't ever put in a lexical name.

61
00:03:59.010 --> 00:04:04.880
It's kind of a baby thrown out with
the bath water sort of scenario, okay?

62
00:04:04.880 --> 00:04:11.580
So I find that kind of annoying that
these are lexically anonymous functions.

63
00:04:11.580 --> 00:04:16.390
By the way, I gave you this admin
issue earlier, let me just remind you.

64
00:04:16.390 --> 00:04:21.463
This is one of those cases where
you're gonna go over to Babel, and

65
00:04:21.463 --> 00:04:27.733
you're gonna be like but see it makes
a function be there, you must be wrong.

66
00:04:27.733 --> 00:04:32.327
No, this is a case where Babel
is deliberately skirting

67
00:04:32.327 --> 00:04:34.782
around that part of the spec.

68
00:04:34.782 --> 00:04:39.570
Because that is the quickest and easiest
way for them to do named functions.

69
00:04:40.690 --> 00:04:45.320
Named functions are kinda hard to do if
you don't actually put a name on them, so

70
00:04:45.320 --> 00:04:47.780
they take the easy short path.

71
00:04:47.780 --> 00:04:53.150
If you try to do something like this,
look at what they do.

72
00:04:53.150 --> 00:04:55.120
A much longer more complex path for

73
00:04:55.120 --> 00:04:57.500
getting a named function that
preserves the correct behavior.

74
00:04:58.810 --> 00:05:02.730
So don't come to me and complain that I
don't know what I'm talking about, I do.

75
00:05:02.730 --> 00:05:06.640
I've studied it, trust me,
concise methods are lexically anonymous.

76
00:05:07.670 --> 00:05:11.007
&gt;&gt; Speaker 2: Now if you make that
property name hello world like you had,

77
00:05:11.007 --> 00:05:13.228
do they not bother to try with the name?

78
00:05:15.946 --> 00:05:18.200
&gt;&gt; Kyle Simpson: They
came up with their own.

79
00:05:18.200 --> 00:05:19.741
That's not what the specs says.

80
00:05:25.110 --> 00:05:28.080
&gt;&gt; Kyle Simpson: Okay, so concise
methods are cool, I use them a lot.

81
00:05:28.080 --> 00:05:31.174
But in any case, where I need a lexical
self reference I don't use them

82
00:05:31.174 --> 00:05:33.430
cuz they're lexically anonymous.

83
00:05:33.430 --> 00:05:36.780
All right, concise methods,
concise properties nice easy wins.

84
00:05:36.780 --> 00:05:42.132
Another case that is fairly
common actually probably more

85
00:05:42.132 --> 00:05:47.383
common than those,
is where I have something like this.

86
00:05:47.383 --> 00:05:52.378
And what I want, is I want the property
name hello to hold some value but

87
00:05:52.378 --> 00:05:55.690
the property name is
currently in a variable.

88
00:05:56.980 --> 00:06:02.671
So what I end up doing is saying,
obj[c] = to some value.

89
00:06:02.671 --> 00:06:05.681
I have to do it outside of
an after the object literal.

90
00:06:05.681 --> 00:06:09.773
I don't know if anybody else has been in
that case by probably five times a day,

91
00:06:09.773 --> 00:06:13.315
I run into this case from trying to
put something an object literal.

92
00:06:13.315 --> 00:06:18.310
And I can't [COUGH] cuz the property
name needs to be computed.

93
00:06:18.310 --> 00:06:22.630
Well now we have computed property names.

94
00:06:24.580 --> 00:06:27.652
&gt;&gt; Kyle Simpson: So you can put the
brackets syntax there inside of the object

95
00:06:27.652 --> 00:06:29.030
literal.

96
00:06:29.030 --> 00:06:35.480
Inside of the brackets, you can put
any valid JavaScript expression.

97
00:06:35.480 --> 00:06:36.850
Here, I'm putting a variable.

98
00:06:36.850 --> 00:06:40.124
We could do something
crazy like .toString.

99
00:06:40.124 --> 00:06:44.315
I mean .toUpperCase for example,

100
00:06:44.315 --> 00:06:50.510
any JavaScript expression
that you can think of.

101
00:06:50.510 --> 00:06:54.738
Computer properties might be in
my top five favorite features.

102
00:06:54.738 --> 00:06:59.726
[LAUGH] This cuz I don't want it to always
be on those under the I use it pretty

103
00:06:59.726 --> 00:07:00.608
frequently.

104
00:07:06.310 --> 00:07:08.880
&gt;&gt; Kyle Simpson: All right, so we have
concise properties, concise methods.

105
00:07:08.880 --> 00:07:12.131
We have computed properties,

106
00:07:12.131 --> 00:07:18.024
computed properties can also be used for
method names.

107
00:07:18.024 --> 00:07:25.966
So we could say c+ fn, so now we have
hello fn is a concise method, for example.

108
00:07:29.248 --> 00:07:34.054
&gt;&gt; Kyle Simpson: So now there's
a function called hello fn on our object.

109
00:07:34.054 --> 00:07:35.793
&gt;&gt; Speaker 3: If you use
the concise methods,

110
00:07:35.793 --> 00:07:39.863
is that equivalent to the full function
body versus like the arrow syntax?

111
00:07:39.863 --> 00:07:43.398
&gt;&gt; Kyle Simpson: Yes, concise methods
are equivalent to function bodies.

112
00:07:43.398 --> 00:07:47.294
There's a couple of differences nuance
stuff that we're not gonna talk about

113
00:07:47.294 --> 00:07:50.496
today like the way the super keyword and
stuff like that behave.

114
00:07:50.496 --> 00:07:54.976
But for virtually all cases,
the full function

115
00:07:54.976 --> 00:07:58.191
is how concise method may be-
&gt;&gt; Speaker 3: Right, so

116
00:07:58.191 --> 00:07:59.800
you still have to use the return keyword?

117
00:07:59.800 --> 00:08:01.966
&gt;&gt; Kyle Simpson: Yep, exactly, yes.

118
00:08:01.966 --> 00:08:04.825
&gt;&gt; Speaker 4: Drew is asking,
why do they even bother naming it?

119
00:08:07.445 --> 00:08:08.455
&gt;&gt; Kyle Simpson: Who's they?

120
00:08:08.455 --> 00:08:10.055
Are you talking about Babel maybe?

121
00:08:10.055 --> 00:08:11.681
&gt;&gt; Speaker 2: That was me, yeah.

122
00:08:11.681 --> 00:08:13.085
&gt;&gt; Kyle Simpson: Why is Babel naming it?

123
00:08:13.085 --> 00:08:14.095
&gt;&gt; Speaker 2: Yeah,
in that example you had up.

124
00:08:14.095 --> 00:08:16.134
&gt;&gt; Kyle Simpson: I have no idea,
but [CROSSTALK]

125
00:08:16.134 --> 00:08:20.094
&gt;&gt; Speaker 2: Use it for anything.

126
00:08:20.094 --> 00:08:22.649
&gt;&gt; Kyle Simpson: Are you saying
why they're naming it here?

127
00:08:22.649 --> 00:08:24.560
&gt;&gt; Speaker 2: Why they add the second.

128
00:08:24.560 --> 00:08:26.800
&gt;&gt; Kyle Simpson: The reason they add it,
I know the answer to that question.

129
00:08:26.800 --> 00:08:33.715
The reason they add that is,
&gt;&gt; Kyle Simpson: In this case, when

130
00:08:33.715 --> 00:08:39.015
a call stack happens, we want for that b
function to be reported as the name b.

131
00:08:39.015 --> 00:08:39.860
So that's why they add it.

132
00:08:41.130 --> 00:08:44.904
What they're doing is they
are transpiling ES6 name inferencing.

133
00:08:53.414 --> 00:08:55.829
&gt;&gt; Kyle Simpson: [COUGH] Yes?

134
00:08:55.829 --> 00:08:57.430
&gt;&gt; Speaker 5: Question from me.

135
00:08:57.430 --> 00:09:01.350
The last one on line nine,
if you wanted to make that,

136
00:09:02.350 --> 00:09:04.740
say it was a recursive function.

137
00:09:04.740 --> 00:09:10.070
How would you call that,
or could you call?

138
00:09:10.070 --> 00:09:14.940
&gt;&gt; Kyle Simpson: For a computed property,
you'd have to recompute it on the inside.

139
00:09:17.320 --> 00:09:24.057
So you could say something like
object of c+ fn like that.

140
00:09:28.436 --> 00:09:31.517
&gt;&gt; Kyle Simpson: This is deprecated but
you could do arguments.callee.

141
00:09:34.839 --> 00:09:35.940
&gt;&gt; Kyle Simpson: It's not a good idea.

142
00:09:35.940 --> 00:09:38.051
There's a proposal I think for

143
00:09:38.051 --> 00:09:43.980
a future version of JavaScript where we're
gonna get these special meta properties,

144
00:09:43.980 --> 00:09:48.080
and I think it's gonna be
something like function callee.

145
00:09:48.080 --> 00:09:51.776
That will be able to use maybe in the
future that will be a self reference that

146
00:09:51.776 --> 00:09:53.309
doesn't need a lexical name.

147
00:09:53.309 --> 00:09:53.906
&gt;&gt; Speaker 5: Okay.
For

148
00:09:53.906 --> 00:09:55.809
the whether this is you have to recreate.

149
00:09:55.809 --> 00:09:56.492
&gt;&gt; Kyle Simpson: What's that?
&gt;&gt; Speaker 5: You have to

150
00:09:56.492 --> 00:09:57.239
recreate it, right?

151
00:09:57.239 --> 00:10:00.768
&gt;&gt; Kyle Simpson: You have to recreate it,
or use arguments.

152
00:10:00.768 --> 00:10:02.253
&gt;&gt; Speaker 5: It's not
a lexical reference,

153
00:10:02.253 --> 00:10:03.852
it could be a different function.

154
00:10:03.852 --> 00:10:08.014
&gt;&gt; Kyle Simpson: Yeah, yeah,
exactly, so like I said earlier,

155
00:10:08.014 --> 00:10:14.690
if I have any inkling that I'm going to
need a self reference for any purpose.

156
00:10:14.690 --> 00:10:21.450
I don't use concise methods.

157
00:10:21.450 --> 00:10:23.880
We haven't talked about these today,
we will later today.

158
00:10:25.280 --> 00:10:29.080
But there are what are called generators.

159
00:10:30.330 --> 00:10:36.615
That's a special kind of function, and
you can specify a generator for example,

160
00:10:36.615 --> 00:10:42.240
foo generators use the star symbol

161
00:10:44.060 --> 00:10:48.870
to a function plus star
to signify themselves.

162
00:10:48.870 --> 00:10:52.570
There is a concise form
of this which is weird,

163
00:10:52.570 --> 00:10:57.670
if you use the concise method you
take that star and you move it here.

164
00:10:58.940 --> 00:11:04.030
So this is a concise generator,
&gt;&gt; Kyle Simpson: And

165
00:11:04.030 --> 00:11:06.749
we'll talk more about generators later.

166
00:11:06.749 --> 00:11:13.461
And finally,
there is concise computed generators.

167
00:11:13.461 --> 00:11:19.344
So we can,
&gt;&gt; Kyle Simpson: For example do this.

168
00:11:22.864 --> 00:11:26.526
&gt;&gt; Kyle Simpson: So that is a computed
concise method that's also a generator,

169
00:11:26.526 --> 00:11:28.330
computed concise generator.

170
00:11:32.180 --> 00:11:34.540
There a few other object literal
extensions that I wanna get into.

171
00:11:34.540 --> 00:11:37.180
Stuff like proto and
super and stuff like that.

172
00:11:37.180 --> 00:11:39.490
Those are covered in my book,
if you wanna read more about those.

173
00:11:39.490 --> 00:11:44.050
But these are the kind of the right
parts of places that you'll often find

174
00:11:44.050 --> 00:11:47.731
yourself using to improve your
usage of object literals.

175
00:11:47.731 --> 00:11:52.711
A little bit goes a long way in terms
of just constantly having to do the old

176
00:11:52.711 --> 00:11:54.438
way versus this new way.

177
00:11:54.438 --> 00:11:59.222
It saves a lot of saves a lot of work.

178
00:11:59.222 --> 00:12:03.376
Anymore questions about
our object literals?

179
00:12:03.376 --> 00:12:08.082
&gt;&gt; Speaker 6: If they're planning
on working in a syntax for

180
00:12:08.082 --> 00:12:11.709
async functions into this kind of?

181
00:12:11.709 --> 00:12:18.366
&gt;&gt; Kyle Simpson: There is,
&gt;&gt; Kyle Simpson: I think async functions

182
00:12:18.366 --> 00:12:24.176
are just this, but
I have to check the spec on that.

183
00:12:24.176 --> 00:12:26.140
I don't actually know.

184
00:12:26.140 --> 00:12:27.880
That's not yet in the spec,
but it's almost there.

