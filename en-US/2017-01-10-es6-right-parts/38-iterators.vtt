WEBVTT

1
00:00:00.000 --> 00:00:03.965
[MUSIC]

2
00:00:03.965 --> 00:00:05.690
&gt;&gt; Kyle Simpson: So
what exactly is an iterator?

3
00:00:05.690 --> 00:00:09.070
First of all, how many of you know what
an iterator is, either from JavaScript or

4
00:00:09.070 --> 00:00:11.010
maybe from some other language,
you know what iterators are?

5
00:00:11.010 --> 00:00:14.730
Okay, for the benefit of
those that are listening in,

6
00:00:14.730 --> 00:00:16.680
if you don't know what an iterator is,

7
00:00:16.680 --> 00:00:21.599
it's a patterned way of stepping through
a set of data on some data source.

8
00:00:22.970 --> 00:00:28.000
So easiest way to illustrate that
might be if you had a database query

9
00:00:28.000 --> 00:00:31.680
that you made and it might have a whole
bunch of different rows from the database

10
00:00:31.680 --> 00:00:35.100
query that are coming back but you only
want to consume those rows one at a time.

11
00:00:35.100 --> 00:00:40.680
So you'd have an iterator attached to
the result object and you would say .next.

12
00:00:42.120 --> 00:00:45.534
That's a method call on your iterator and
it would give you one more row and

13
00:00:45.534 --> 00:00:48.456
then later whenever you're ready
you'd call .next again and

14
00:00:48.456 --> 00:00:51.160
you get another row and
another row and another row.

15
00:00:51.160 --> 00:00:53.760
You keep calling the .next until
you'd consumed all the data.

16
00:00:55.120 --> 00:00:58.100
So it's just a simple interface for
stepping through data.

17
00:00:58.100 --> 00:00:59.930
That's what an iterator is.

18
00:00:59.930 --> 00:01:03.448
We talked about this earlier but
just to reinforce to remind you.

19
00:01:03.448 --> 00:01:07.765
Certain values in JavaScript are now
automatically come shipped with

20
00:01:07.765 --> 00:01:09.600
an iterator.

21
00:01:09.600 --> 00:01:16.200
The array, 1, 2, 3 come shipped with it,

22
00:01:16.200 --> 00:01:20.970
an iterator at the location symbol
dot iterator which automatically will

23
00:01:20.970 --> 00:01:24.780
give you one value at a time in the order
that the values appear in the array.

24
00:01:26.800 --> 00:01:30.606
So we could make an iterator and
consume it manually.

25
00:01:30.606 --> 00:01:37.533
We could say iterator =
arr[Symbol.iterator].

26
00:01:37.533 --> 00:01:40.517
This thing is a function and
when we call it,

27
00:01:40.517 --> 00:01:43.430
it produces an iterator instance, okay?

28
00:01:45.150 --> 00:01:47.349
Now we can call .next on it.

29
00:01:47.349 --> 00:01:48.999
We could say it.next.

30
00:01:50.260 --> 00:01:53.260
In which case we're gonna get back
what's called an iterator result.

31
00:01:54.830 --> 00:01:57.293
An iterator result is an object
with two properties on it.

32
00:01:57.293 --> 00:01:59.280
One of them is the value property.

33
00:01:59.280 --> 00:02:02.940
One of them is the done property.

34
00:02:02.940 --> 00:02:04.970
Value has the value.

35
00:02:04.970 --> 00:02:09.180
Done is a boolean that tells us if
there's any more values to consume.

36
00:02:09.180 --> 00:02:12.416
So here we get back an object
that said value what?

37
00:02:12.416 --> 00:02:18.710
Value 1, done: false.

38
00:02:18.710 --> 00:02:22.590
If I said it.next again,
I'd get back what?

39
00:02:27.280 --> 00:02:29.120
&gt;&gt; Kyle Simpson: Come on y'all
need to drink some more coffee.

40
00:02:31.040 --> 00:02:35.260
If I said it.next a third time I get what?

41
00:02:39.070 --> 00:02:40.590
I'd get value 3.

42
00:02:40.590 --> 00:02:41.920
Now here's something interesting.

43
00:02:41.920 --> 00:02:43.540
It's still gonna say done: false.

44
00:02:44.570 --> 00:02:46.990
And you're gonna wonder
why does it say that.

45
00:02:46.990 --> 00:02:48.210
I'll show you why in just a moment.

46
00:02:50.150 --> 00:02:52.830
Hang, stupid autocomplete
is going crazy over here.

47
00:02:55.990 --> 00:03:02.114
When I call it a fourth time, I'm gonna
get back value undefined, done: true.

48
00:03:07.346 --> 00:03:07.846
&gt;&gt; Kyle Simpson: Okay?

49
00:03:09.410 --> 00:03:10.710
So what's going on here?

50
00:03:10.710 --> 00:03:18.010
Well, if we had returned done: true on
this one, certain forms of iteration over

51
00:03:18.010 --> 00:03:22.330
this dataset would have thrown away the
value 3, which would be super annoying.

52
00:03:22.330 --> 00:03:26.120
So the way you know that there's no
more values to get is you keep calling

53
00:03:26.120 --> 00:03:30.610
the .next until you get a done: true and
then you know I got nothing else to do.

54
00:03:30.610 --> 00:03:34.410
So I don't have to worry about anything,
I can just quit, okay?

55
00:03:34.410 --> 00:03:37.615
So you can imagine, you could set yourself
up with a pretty simple while loop or

56
00:03:37.615 --> 00:03:41.090
four loop to iterate
over a values iterator.

57
00:03:41.090 --> 00:03:41.670
Everybody with me?

58
00:03:43.590 --> 00:03:45.450
But who wants to do iterators manually?

59
00:03:45.450 --> 00:03:50.380
This sucks, so
JavaScript added a new loop type for us.

60
00:03:51.920 --> 00:03:52.785
The for of loop.

61
00:03:52.785 --> 00:03:54.907
You know about for loops.

62
00:03:54.907 --> 00:03:57.350
You know about for in loops.

63
00:03:57.350 --> 00:03:58.730
Now we have a for of loop.

64
00:04:00.100 --> 00:04:04.800
I can say for v of arr.

65
00:04:04.800 --> 00:04:07.660
I just have to give it an iterable.

66
00:04:07.660 --> 00:04:09.269
That is something that
can make an iterator.

67
00:04:11.080 --> 00:04:16.410
And now they will automatically
call the .next under the covers,

68
00:04:16.410 --> 00:04:19.610
pull out the value and it will keep
looping until it gets a done false.

69
00:04:20.708 --> 00:04:23.760
&gt;&gt; Kyle Simpson: So if I grab that code
and we try to over here in the browser.

70
00:04:25.500 --> 00:04:27.419
Now we print out 1, 2, 3 separately.

71
00:04:30.842 --> 00:04:33.647
&gt;&gt; Kyle Simpson: So
that's super useful that the for

72
00:04:33.647 --> 00:04:38.246
of loop can loop over any iterator,
any iterable, okay?

73
00:04:38.246 --> 00:04:42.483
What about this?

74
00:04:47.665 --> 00:04:49.820
&gt;&gt; Kyle Simpson: Remember
strings are interables?

75
00:04:49.820 --> 00:04:51.650
We can loop over them
character by character.

76
00:04:56.646 --> 00:04:58.346
&gt;&gt; Kyle Simpson: H-E-L-L-O, okay?

77
00:05:03.653 --> 00:05:06.654
&gt;&gt; Kyle Simpson: So several of
the built in JavaScript values that

78
00:05:06.654 --> 00:05:10.902
you're used to dealing with are already
iterables meaning they ship

79
00:05:10.902 --> 00:05:14.210
with a default iterator
that does something useful.

80
00:05:16.150 --> 00:05:21.080
Notably, objects do not ship
with a default iterator meaning

81
00:05:21.080 --> 00:05:24.549
objects by default, plain old simple
objects by default, are not iterables.

82
00:05:26.080 --> 00:05:29.466
You could make your own which is what
we're gonna do here in just a minute.

83
00:05:29.466 --> 00:05:34.190
But by default I can't just say for
var v of obj and have it work cuz you're

84
00:05:34.190 --> 00:05:38.955
gonna come back and tell me I don't
have an iterator to work with, okay?

85
00:05:38.955 --> 00:05:43.043
There's a bunch of historical reasons why
they didn't ship those with iterators.

86
00:05:43.043 --> 00:05:50.720
May work about the same as
we'd expect at a later time.

87
00:05:50.720 --> 00:05:51.920
Yes?
&gt;&gt; Speaker 2: Question,

88
00:05:51.920 --> 00:05:55.960
Alice is asking, wouldn't a for
in loop work the same?

89
00:05:55.960 --> 00:05:57.180
&gt;&gt; Kyle Simpson: It does not.

90
00:05:57.180 --> 00:05:58.250
So for in loops.

91
00:06:03.181 --> 00:06:05.800
&gt;&gt; Kyle Simpson: Have
a different signature.

92
00:06:05.800 --> 00:06:10.648
They don't look at the value,
they look at the key.

93
00:06:17.133 --> 00:06:20.206
&gt;&gt; Kyle Simpson: So if I run,
if I comment that out for a minute.

94
00:06:22.858 --> 00:06:24.180
&gt;&gt; Kyle Simpson: If I ran the for in loop.

95
00:06:26.640 --> 00:06:29.234
We get 0, 1, 2, 3, 4, okay?

96
00:06:29.234 --> 00:06:32.030
Now you're thinking yourself.

97
00:06:32.030 --> 00:06:34.280
Well that's super simple
you just do str[k].

98
00:06:34.280 --> 00:06:39.580
They're still not going to be
equivalent because the for

99
00:06:39.580 --> 00:06:44.020
in loop does not use the internal
iterator which means you could customize

100
00:06:44.020 --> 00:06:47.570
the iterator and the for in loop is still
gonna loop only over own properties.

101
00:06:50.440 --> 00:06:54.290
It's not actually asking the data
structure for its own iterator.

102
00:06:54.290 --> 00:06:57.460
You can make an iterator that decided
to give you values in different orders.

103
00:06:58.800 --> 00:07:02.590
The foreign loop is gonna use
its built innumerable ordering

104
00:07:02.590 --> 00:07:03.759
across the own properties.

105
00:07:07.989 --> 00:07:11.769
&gt;&gt; Kyle Simpson: Besides, who wants to
say string of k, when I can just say for

106
00:07:11.769 --> 00:07:13.280
var of?

107
00:07:13.280 --> 00:07:15.980
That's so much nicer, right?

108
00:07:15.980 --> 00:07:18.120
Because most of the time,
it's the value we care about.

109
00:07:18.120 --> 00:07:19.130
Not the key that we care about.

110
00:07:22.897 --> 00:07:26.200
&gt;&gt; Kyle Simpson: All right, it's not just
the for of loop that this is cool with.

111
00:07:26.200 --> 00:07:28.940
You also might remember earlier
that I told you the dot dot dot

112
00:07:28.940 --> 00:07:32.140
operator works on iterables.

113
00:07:32.140 --> 00:07:36.303
What it does is the dot dot dot
operator under the covers does the for

114
00:07:36.303 --> 00:07:38.887
of the essentially.

115
00:07:38.887 --> 00:07:43.851
So the string if I say,
array ...str, what I'm doing is

116
00:07:43.851 --> 00:07:49.380
getting an iterable that's attached
to the data source string.

117
00:07:49.380 --> 00:07:54.340
And I'm looping over each one of those
values pulling each one of them out and

118
00:07:54.340 --> 00:07:58.660
adding them into this array, okay?

119
00:07:58.660 --> 00:08:00.790
...string by itself is not an array.

120
00:08:00.790 --> 00:08:02.380
It's really easy to get confused.

121
00:08:02.380 --> 00:08:04.170
It is not an array.

122
00:08:04.170 --> 00:08:07.120
It is a consumption of an iterator.

123
00:08:07.120 --> 00:08:09.720
And a consumption of an iterator
has to have someplace to go.

124
00:08:10.920 --> 00:08:15.726
There's only two places that consumptions
of iterators can go inside array

125
00:08:15.726 --> 00:08:19.115
literals or
inside of function argument call lists.

126
00:08:19.115 --> 00:08:23.797
So that's why those
are the only two places that we

127
00:08:23.797 --> 00:08:27.827
can say something like ...arr, okay?

128
00:08:27.827 --> 00:08:31.633
[COUGH] We can do some really

129
00:08:31.633 --> 00:08:37.910
interesting things with this trick.

130
00:08:37.910 --> 00:08:42.180
And also combining in some of
our destructuring from earlier.

131
00:08:42.180 --> 00:08:49.990
What if you wanted to know just
the first two characters in some string?

132
00:08:51.300 --> 00:08:52.010
You can say.

133
00:08:57.047 --> 00:09:01.478
&gt;&gt; Kyle Simpson: So now string is
gonna be treated as an array and

134
00:09:01.478 --> 00:09:03.860
pull off the x and the y.

135
00:09:03.860 --> 00:09:07.534
You could make it super obvious
if you wanted to do that.

136
00:09:11.744 --> 00:09:12.800
&gt;&gt; Kyle Simpson: Okay?

137
00:09:12.800 --> 00:09:13.680
We could do.

138
00:09:19.587 --> 00:09:21.840
&gt;&gt; Kyle Simpson: Gather the rest
of them up into an array.

139
00:09:21.840 --> 00:09:26.010
So now rest is gonna be an array
that has the characters LLO

140
00:09:26.010 --> 00:09:27.120
as individual values in it.

