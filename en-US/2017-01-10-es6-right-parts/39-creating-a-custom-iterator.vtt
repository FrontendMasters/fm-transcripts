WEBVTT

1
00:00:00.000 --> 00:00:03.895
[MUSIC]

2
00:00:03.895 --> 00:00:07.607
&gt;&gt; Kyle Simpson: All right our final
topic for us to pay attention to is,

3
00:00:07.607 --> 00:00:09.880
how do we make our own iterators?

4
00:00:09.880 --> 00:00:14.770
What if I have a value, an object or
something that I've created, and

5
00:00:14.770 --> 00:00:19.700
I'd like for it to be consumable through
any of those various Iterable Consumptions

6
00:00:19.700 --> 00:00:23.660
that we just talked about like dot, dot,
dots or four eye loops or whatever,

7
00:00:23.660 --> 00:00:28.650
it's a standard interface but
how do I make myself an iterator.

8
00:00:28.650 --> 00:00:32.490
I mean there's the manual crappy way
which I'm going to show you first and

9
00:00:32.490 --> 00:00:35.980
then there's a much nicer way using
what we call generators, okay.

10
00:00:35.980 --> 00:00:38.500
So, let's look at the old
crappy way first.

11
00:00:38.500 --> 00:00:40.140
Let's say I wanted to
make an object like this.

12
00:00:41.310 --> 00:00:47.722
And, I don't know, let's say that
it had like a limit on it of 13.

13
00:00:47.722 --> 00:00:54.120
And what I wanted to do is make,
let's do this.

14
00:01:01.949 --> 00:01:03.760
&gt;&gt; Kyle Simpson: Right, let's just
say it had those properties on it.

15
00:01:03.760 --> 00:01:07.726
And what I wanted to do
is I wanted to make it so

16
00:01:07.726 --> 00:01:15.038
that object was iterable in that, what it
would do is go through a list of values.

17
00:01:15.038 --> 00:01:16.275
Like this.

18
00:01:21.192 --> 00:01:23.528
&gt;&gt; Kyle Simpson: Going to do this 2, 4, 6

19
00:01:32.904 --> 00:01:34.530
&gt;&gt; Kyle Simpson: Yeah,
I think I have enough now.

20
00:01:34.530 --> 00:01:35.290
Okay.

21
00:01:35.290 --> 00:01:38.820
So, let's say that we have,
it has a values array but

22
00:01:38.820 --> 00:01:40.700
also these properties on it starting in.

23
00:01:40.700 --> 00:01:44.476
And what I'd like to do is I'd
like to make object iterable,

24
00:01:44.476 --> 00:01:49.219
meaning that it would automatically
Loop through the values in the values or

25
00:01:49.219 --> 00:01:54.370
in its own values starting at start
position and ending at end village.

26
00:01:54.370 --> 00:01:58.090
That's my custom iteration that I want
to be able to make available to people.

27
00:01:59.390 --> 00:02:01.490
So, how do I make my
object into an interval?

28
00:02:01.490 --> 00:02:04.740
What I want to do is I
wanna add a function at

29
00:02:04.740 --> 00:02:10.230
that special symbol dot iterator location
Using the computed property syntax,

30
00:02:10.230 --> 00:02:14.890
I'm gonna say symbol.iterator and
I need to make a function here.

31
00:02:14.890 --> 00:02:17.660
So, I could do the old function syntax but

32
00:02:17.660 --> 00:02:21.290
now remember that we
can do concise methods.

33
00:02:22.450 --> 00:02:23.879
So, I'm gonna make it a concise method.

34
00:02:26.010 --> 00:02:28.170
Let's think about what
this thing needs to do.

35
00:02:28.170 --> 00:02:30.740
This thing needs to construct an iterator.

36
00:02:30.740 --> 00:02:32.060
What is an iterator?

37
00:02:36.690 --> 00:02:40.110
It is an object that has a dot
next method on it right.

38
00:02:41.370 --> 00:02:44.890
We're going to make an iterator so
I'm gonna do that super manually.

39
00:02:44.890 --> 00:02:48.433
We're gonna make an iterator,
and we're gonna return it.

40
00:02:48.433 --> 00:02:49.457
Are you with me?

41
00:02:51.153 --> 00:02:55.313
&gt;&gt; Kyle Simpson: That iterator needs
to have a method on it called next.

42
00:02:56.678 --> 00:02:57.734
&gt;&gt; Kyle Simpson: With me so far?

43
00:03:00.283 --> 00:03:05.724
&gt;&gt; Kyle Simpson: Now,
when we construct this iterator instance,

44
00:03:05.724 --> 00:03:12.474
what we wanna do Is capture
the current state of this .start.

45
00:03:12.474 --> 00:03:19.200
And this .end.

46
00:03:19.200 --> 00:03:22.050
Because we don't want those to
change out from underneath us.

47
00:03:22.050 --> 00:03:22.550
Okay.

48
00:03:23.620 --> 00:03:25.890
I'm also going to keep track
of where I currently am.

49
00:03:25.890 --> 00:03:28.060
So, I'm going to start my index at start.

50
00:03:29.690 --> 00:03:30.214
You're with me?

51
00:03:32.699 --> 00:03:33.906
&gt;&gt; Kyle Simpson: As a matter of fact,

52
00:03:33.906 --> 00:03:38.598
we don't even need to really keep track
of start, we can just say index there.

53
00:03:40.806 --> 00:03:43.130
&gt;&gt; Kyle Simpson: So,
we're gonna index starting at start.

54
00:03:43.130 --> 00:03:45.483
We need to keep track of index and
where we're ending.

55
00:03:48.587 --> 00:03:51.199
&gt;&gt; Kyle Simpson: And probably already
guess where I'm going with this, but

56
00:03:51.199 --> 00:03:54.310
what we're gonna do every time
the dock next method is called.

57
00:03:54.310 --> 00:04:00.340
We want to get out the current value
in the values array at the position,

58
00:04:00.340 --> 00:04:01.990
that index represents.

59
00:04:01.990 --> 00:04:02.490
Okay.

60
00:04:04.210 --> 00:04:05.147
So, we wanna say.

61
00:04:07.814 --> 00:04:09.725
&gt;&gt; Kyle Simpson: V is equal to, now here,

62
00:04:09.725 --> 00:04:13.650
we have a question of what
object are we looking at.

63
00:04:13.650 --> 00:04:17.070
We could say object of index but

64
00:04:17.070 --> 00:04:21.782
this is not a variable name that
we wanna use is it, that's bad.

65
00:04:21.782 --> 00:04:26.170
So, the thing that we really
wanna use is of this But

66
00:04:26.170 --> 00:04:29.060
now we're inside of a function which
isn't gonna be pointing at that this.

67
00:04:30.890 --> 00:04:33.940
So, this is maybe one of those cases
where an arrow function might be

68
00:04:33.940 --> 00:04:34.610
a little bit helpful.

69
00:04:35.800 --> 00:04:39.960
So, how about if we go and
make the next into an arrow function,

70
00:04:42.980 --> 00:04:46.650
okay only so that, we don't want
to mess around with this bindings.

71
00:04:46.650 --> 00:04:49.190
Where is it gonna get
it's this binding from?

72
00:04:49.190 --> 00:04:52.020
From the outer function
whose this keyword is obj.

73
00:04:52.020 --> 00:04:53.730
You with me?

74
00:04:53.730 --> 00:04:59.220
All right, so
now I"ve got a next arrow function here.

75
00:04:59.220 --> 00:05:02.100
It grabs the current value of this[idx],
it

76
00:05:05.560 --> 00:05:09.820
increments index because we're gonna
Probably call it the next time.

77
00:05:10.840 --> 00:05:12.210
So, it's going to increment index.

78
00:05:13.220 --> 00:05:16.244
And then it's going to need to say return.

79
00:05:16.244 --> 00:05:19.610
An object that has a value

80
00:05:20.890 --> 00:05:26.020
of v and a done we have to figure out
if we want to return true or false.

81
00:05:26.020 --> 00:05:28.998
So, we could say that
done needs to be true,

82
00:05:28.998 --> 00:05:35.809
If index

83
00:05:35.809 --> 00:05:41.350
is greater than the end value
that we wanted to be at it.

84
00:05:41.350 --> 00:05:44.950
You with me?

85
00:05:47.320 --> 00:05:51.870
Now, furthermore we might wanna say
we wanna guard this value we don't

86
00:05:51.870 --> 00:05:54.860
wanna send out a value if
done is going to be true.

87
00:05:54.860 --> 00:06:00.270
So, we could kinda work this logic
slightly differently we could say if index

88
00:06:00.270 --> 00:06:04.950
is less than or equal to en,
let's do this stuff

89
00:06:06.300 --> 00:06:10.942
And then we just know done falls.

90
00:06:10.942 --> 00:06:18.430
Otherwise, indexes already above en,
which means we don't want

91
00:06:18.430 --> 00:06:22.850
to do anything else we want to signal that
the iteration is done so we're gonna just

92
00:06:22.850 --> 00:06:28.250
return done true, we don't even need to
include value because it's going to imply.

93
00:06:28.250 --> 00:06:29.150
Value undefined.

94
00:06:29.150 --> 00:06:33.310
Did you follow that kind of
crazy logic that I went through?

95
00:06:34.660 --> 00:06:36.360
Now, I fully recognize this sucks.

96
00:06:36.360 --> 00:06:39.390
Nobody wants to write this code but
I'm just setting you up for

97
00:06:39.390 --> 00:06:41.260
how much easier this going
to be in just a moment okay?

98
00:06:41.260 --> 00:06:44.270
When we use generators.

99
00:06:44.270 --> 00:06:49.710
The ugly crappy way of doing this we got
to make our own custom iterator using

100
00:06:49.710 --> 00:06:51.040
These techniques.

101
00:06:51.040 --> 00:06:55.300
Let's test ourselves,
let's see we should be able to say.

102
00:06:56.950 --> 00:07:02.700
Give me the vals and
we should be able to say dot dot dot OBJ.

103
00:07:02.700 --> 00:07:05.380
Even though it's an object
it now has an interator, so

104
00:07:05.380 --> 00:07:08.420
it ought to be able to be
iterated with dot dot dot.

105
00:07:08.420 --> 00:07:13.805
And vals ought to give us
let's just check the 0, 1,

106
00:07:13.805 --> 00:07:18.837
2, 3, 4 it ought to give us 10, 1, 2, 3,

107
00:07:18.837 --> 00:07:24.177
4, 5, 6, 7, 8,
&gt;&gt; Kyle Simpson: Oops 0,

108
00:07:24.177 --> 00:07:32.163
1
&gt;&gt; Kyle Simpson: Let

109
00:07:32.163 --> 00:07:34.440
me add some more on just to make sure.

110
00:07:34.440 --> 00:07:41.050
We ought to get, 10 through 28,
if I'm not doing my math wrong okay?

111
00:07:41.050 --> 00:07:43.195
So let's just see,
see if I didn't make a mistake.

112
00:07:48.860 --> 00:07:51.079
&gt;&gt; Kyle Simpson: Oops I messed up,
let's see here.

113
00:08:01.458 --> 00:08:04.519
&gt;&gt; Kyle Simpson: Did I do that yet?

114
00:08:04.519 --> 00:08:05.788
Get of the.

115
00:08:16.114 --> 00:08:19.923
&gt;&gt; Speaker 2: Shouldn't be this at line 8?

116
00:08:19.923 --> 00:08:23.641
Shouldn't that be this that values to idx?

117
00:08:23.641 --> 00:08:25.207
&gt;&gt; Kyle Simpson: You're absolutely right,
thank you.

118
00:08:29.527 --> 00:08:31.905
&gt;&gt; Kyle Simpson: Good catch.

119
00:08:31.905 --> 00:08:33.185
Hey, our programming works.

120
00:08:35.820 --> 00:08:37.230
&gt;&gt; Kyle Simpson: There we go,
10 through 28, okay.

121
00:08:38.360 --> 00:08:42.970
So, we made our object a custom iterator
and it did the logic we were hoping for.

122
00:08:44.510 --> 00:08:48.440
You notice that it automatically knew when
to stop because we returned a done true.

123
00:08:50.100 --> 00:08:52.320
And knew where to start and
knew where to stop.

