WEBVTT

1
00:00:00.000 --> 00:00:02.541
[MUSIC]

2
00:00:02.541 --> 00:00:07.456
&gt;&gt; Kyle Simpson: Now,
it might be the case, where, for example,

3
00:00:07.456 --> 00:00:14.490
I don't get anything back for b,
I might like to apply a default value.

4
00:00:15.630 --> 00:00:17.860
If I were doing that over here,
what would I end up doing?

5
00:00:17.860 --> 00:00:25.035
I would end up saying something
like tmp[1] not equal to undefined,

6
00:00:25.035 --> 00:00:30.860
tmp[1] or and then give it
a default value like 42, right?

7
00:00:30.860 --> 00:00:35.460
So, now imagine all of that craziness
added in with all that undefined

8
00:00:35.460 --> 00:00:39.010
checking stuff that we'd be doing, and
you can probably quickly imagine how

9
00:00:39.010 --> 00:00:42.320
Crazy Harry that does, cuz you also
probably written code like that before.

10
00:00:42.320 --> 00:00:43.700
I certainly have.

11
00:00:43.700 --> 00:00:46.630
Cuz I've needed to do this kind of
stuff on more than one occasion,

12
00:00:46.630 --> 00:00:48.040
many occasions, okay?

13
00:00:49.770 --> 00:00:51.350
Here's how simple it is
with de-structuring,

14
00:00:51.350 --> 00:00:54.939
we simply say, the default value for
b should be 42.

15
00:00:56.570 --> 00:01:00.940
And that default assignment is
going to behave exactly the same

16
00:01:00.940 --> 00:01:03.360
as the parameter defaults
that we already went over.

17
00:01:03.360 --> 00:01:05.600
Have all the same that
it's a lazy expression,

18
00:01:05.600 --> 00:01:09.090
you can do stuff in that just like you can
elsewhere including the required call,

19
00:01:09.090 --> 00:01:11.324
all the same things we already learned and
now applies here.

20
00:01:13.800 --> 00:01:18.410
Okay, so now we're declaring that
b aught to be defaulted to 42.

21
00:01:18.410 --> 00:01:22.540
In the case, where b comes
back as undefined, we get 42.

22
00:01:22.540 --> 00:01:28.282
If it comes back as an empty slot,
we also get 42, okay?

23
00:01:33.212 --> 00:01:36.824
&gt;&gt; Kyle Simpson: So,
we can declare our default values.

24
00:01:36.824 --> 00:01:42.627
Now, [COUGH]
&gt;&gt; Kyle Simpson: The question

25
00:01:42.627 --> 00:01:46.223
that we wanna pose now is,

26
00:01:46.223 --> 00:01:51.500
what would happen if I did that?

27
00:01:51.500 --> 00:01:55.232
Or if I did return undefined or
I had no return at all?

28
00:01:55.232 --> 00:01:56.165
What do you think would happen?

29
00:02:03.779 --> 00:02:10.609
&gt;&gt; Speaker 2: Null be undefined.

30
00:02:10.609 --> 00:02:17.438
&gt;&gt; Kyle Simpson: So, if a null value or
an undefined value came back over here.

31
00:02:17.438 --> 00:02:20.190
Always think about it in
terms of the processing null.

32
00:02:20.190 --> 00:02:23.082
If temp was null or
undefined over here, and

33
00:02:23.082 --> 00:02:26.530
then we tried to say tmp[0],
what would happen?

34
00:02:26.530 --> 00:02:27.590
&gt;&gt; Speaker 3: An script error.

35
00:02:27.590 --> 00:02:28.640
&gt;&gt; Kyle Simpson: We get
a JavaScript error.

36
00:02:28.640 --> 00:02:30.480
It's not a reference error,
it's called a type error,

37
00:02:30.480 --> 00:02:33.170
because we'd be trying
to access a property and

38
00:02:33.170 --> 00:02:37.580
zero property in position on the null, or
undefined value and that's not allowed.

39
00:02:37.580 --> 00:02:40.050
So we'd get an illegal operation, right?

40
00:02:41.070 --> 00:02:42.880
So the same is going to be true here.

41
00:02:42.880 --> 00:02:47.010
If you have a pattern that's expecting
an array and you don't get back an array,

42
00:02:47.010 --> 00:02:51.600
or at least something that can be accessed
like an array, you're gonna get an error.

43
00:02:53.340 --> 00:02:58.157
So, one way to guard against that,
&gt;&gt; Kyle Simpson: Is

44
00:02:58.157 --> 00:03:02.430
to say foo or an empty array.

45
00:03:02.430 --> 00:03:06.284
Because if I got myself an empty array
back, then it would be totally okay for

46
00:03:06.284 --> 00:03:09.836
me to do a pattern, an array
de-structuring against an empty array,

47
00:03:09.836 --> 00:03:12.628
I just end up with a undefined,
b 42 and c undefined.

48
00:03:12.628 --> 00:03:15.410
You follow me?

49
00:03:17.580 --> 00:03:23.100
Now, all the same caveats apply with
this or here that if we are expecting to

50
00:03:23.100 --> 00:03:27.940
be able to get back, return back something
like a false, or a null, or an undefined,

51
00:03:27.940 --> 00:03:31.640
this isn't the appropriate one, but
in this particular case in de-structuring

52
00:03:31.640 --> 00:03:36.650
we've already said, we are expecting
an array, which is always truthy.

53
00:03:36.650 --> 00:03:38.470
So, this pattern is pretty safe.

54
00:03:41.030 --> 00:03:43.440
We're not likely to run into any scenario,
where the or

55
00:03:43.440 --> 00:03:45.600
is going to bite us and
create a problem for us.

56
00:03:45.600 --> 00:03:49.280
It's pretty safe, because we're
already saying, we expect an array.

57
00:03:49.280 --> 00:03:52.220
If you create a function that
suppose to return false,

58
00:03:52.220 --> 00:03:56.590
you should expect for the pattern to fail.

59
00:03:56.590 --> 00:03:59.070
Cuz that's not a valid case.

60
00:03:59.070 --> 00:04:03.080
So, the or empty array here is
a way of saying, hey, go ahead and

61
00:04:03.080 --> 00:04:05.850
just default to the empty
array if that occurs, right?

62
00:04:05.850 --> 00:04:08.370
All right, now what about this?

63
00:04:08.370 --> 00:04:14.180
What happens if I have an array,
the whole bunch of values in it?

64
00:04:14.180 --> 00:04:17.145
Maybe I want to account for
the first three,

65
00:04:17.145 --> 00:04:20.843
I don't wanna gather the rest
of them up into an array.

66
00:04:23.442 --> 00:04:25.275
&gt;&gt; Kyle Simpson: ...args.

67
00:04:25.275 --> 00:04:27.965
Just exactly like we did
in the parameter list,

68
00:04:27.965 --> 00:04:30.058
why is this a gather versus a spread?

69
00:04:35.972 --> 00:04:38.130
&gt;&gt; Speaker 4: Because you're spreading it,
groups.

70
00:04:38.130 --> 00:04:40.580
&gt;&gt; Kyle Simpson: Because we're in
an assignment context, aren't we?

71
00:04:40.580 --> 00:04:42.970
We're on the left hand side of an equals.

72
00:04:42.970 --> 00:04:44.480
So, I mean by assignment context,

73
00:04:44.480 --> 00:04:47.070
as opposed to a value context
on the right hand side.

74
00:04:47.070 --> 00:04:48.300
We're in an assignment context,

75
00:04:48.300 --> 00:04:53.020
exactly like we are in a parameter list
on the left hand side of an equals.

76
00:04:53.020 --> 00:04:55.380
So, a dot, dot, dot,
used on the left hand side of an equals,

77
00:04:55.380 --> 00:04:58.070
anywhere on the left hand side of
the equals, is going to be treated as

78
00:04:59.370 --> 00:05:04.210
a gather, as a rest,
as opposed to a spread, okay?

79
00:05:04.210 --> 00:05:07.440
So here we're saying gather up all
the rest of those values into an array

80
00:05:07.440 --> 00:05:08.340
called args.

81
00:05:08.340 --> 00:05:12.664
If we don't have any,
args is simply an empty array, okay?

82
00:05:15.210 --> 00:05:18.052
Exactly the same as it would
be in a parameter scenario.

83
00:05:27.131 --> 00:05:30.619
&gt;&gt; Kyle Simpson: Now, I've used this with
a var keyword, just because it's kind of

84
00:05:30.619 --> 00:05:35.160
easy and convenient, but it turns out the
de-structuring is really just assignment.

85
00:05:35.160 --> 00:05:38.080
It's got actually almost
nothing to do with declaration.

86
00:05:38.080 --> 00:05:42.974
It's kind of a shorthand that we kind
of streamlined in the declaration, but

87
00:05:42.974 --> 00:05:47.790
if I already had an a, a b, a c and args,
declared somewhere, I could do this

88
00:05:47.790 --> 00:05:53.095
assignment all by itself, it doesn't have
to be paired with declaration, okay?

89
00:05:53.095 --> 00:05:56.741
So really the only constraint is
that these things need to be things

90
00:05:56.741 --> 00:06:00.191
that would be a valid left hand
side of an assignment, a valid,

91
00:06:00.191 --> 00:06:02.160
what we call, assignment target.

92
00:06:03.990 --> 00:06:04.910
So what about this?

93
00:06:04.910 --> 00:06:08.858
What if I had an o object.

94
00:06:10.527 --> 00:06:14.868
&gt;&gt; Kyle Simpson: And I said, I wanna put
all of these as properties in an object.

95
00:06:21.400 --> 00:06:24.700
&gt;&gt; Kyle Simpson: Every one of
those is valid assignment targets.

96
00:06:24.700 --> 00:06:29.380
So it's totally okay to array de-structure

97
00:06:29.380 --> 00:06:31.824
into a set of object
properties if we want it.

98
00:06:33.610 --> 00:06:38.307
They just need to be valid things that
could show up on the left hand side of

99
00:06:38.307 --> 00:06:39.389
an assignment.

100
00:06:44.053 --> 00:06:50.332
&gt;&gt; Kyle Simpson: Questions so far?

101
00:07:05.267 --> 00:07:09.180
&gt;&gt; Speaker 5: Are arrays the only things
that did this pattern matching works?

102
00:07:09.180 --> 00:07:10.560
&gt;&gt; Kyle Simpson: No,
we also have object de-structuring,

103
00:07:10.560 --> 00:07:11.870
which we'll get to in just a moment.

