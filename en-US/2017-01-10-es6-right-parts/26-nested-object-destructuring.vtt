WEBVTT

1
00:00:00.000 --> 00:00:04.034
[MUSIC]

2
00:00:04.034 --> 00:00:08.150
&gt;&gt; Kyle Simpson: Of course, if we have an
object at one of those positions, like for

3
00:00:08.150 --> 00:00:09.990
example, up here.

4
00:00:09.990 --> 00:00:12.960
If in the d position,
it is its own object and

5
00:00:12.960 --> 00:00:17.030
that has an e property on it
of the value 4, for example.

6
00:00:18.140 --> 00:00:20.258
We can do nested object restructuring,

7
00:00:20.258 --> 00:00:22.820
just like we can do nested
array destructuring.

8
00:00:22.820 --> 00:00:26.387
So here instead of putting just d,
by itself,

9
00:00:26.387 --> 00:00:29.870
I'm going to need to do
the d property colon.

10
00:00:32.060 --> 00:00:35.610
But instead of having a lexical
variable for it to be targeted,

11
00:00:35.610 --> 00:00:38.120
I think about this processing wise.

12
00:00:38.120 --> 00:00:42.750
What I now need is a destructuring
pattern for it to be targeted at.

13
00:00:42.750 --> 00:00:45.494
So I'm gonna put my
destructuring pattern there.

14
00:00:45.494 --> 00:00:48.703
So now here is my destructuring pattern,

15
00:00:48.703 --> 00:00:52.379
now I have an e variable,
that is the value for.

16
00:00:52.379 --> 00:01:02.379
&gt;&gt; Speaker 2: [INAUDIBLE]

17
00:01:06.310 --> 00:01:07.230
&gt;&gt; Kyle Simpson: Yep, absolutely.

18
00:01:08.340 --> 00:01:10.750
We hadn't gotten to that,
but since you asked.

19
00:01:10.750 --> 00:01:13.675
Can't really straightforwardly
do that with arrays, but

20
00:01:13.675 --> 00:01:17.662
with objects we can account for d a whole
bunch of different times if we wanted to.

21
00:01:19.879 --> 00:01:23.627
&gt;&gt; Kyle Simpson: There we've assigned off
whatever was in d, which is an object,

22
00:01:23.627 --> 00:01:25.580
into variables, x and z.

23
00:01:25.580 --> 00:01:29.100
And yes, that overwrote the b,
cuz it's going in the top down.

24
00:01:29.100 --> 00:01:33.720
And we've also destructured the contents
of d's e property, into any variable.

25
00:01:33.720 --> 00:01:37.018
So we can multiply the account for
a property.

26
00:01:41.640 --> 00:01:42.310
&gt;&gt; Kyle Simpson: Yes.

27
00:01:42.310 --> 00:01:43.670
&gt;&gt; Speaker 3: From Anthony.

28
00:01:43.670 --> 00:01:48.230
If you set in the pattern a default
value for a property of an object, but

29
00:01:48.230 --> 00:01:52.740
that property does not exist for
the object, do you still get undefined or

30
00:01:52.740 --> 00:01:54.740
will you get the default value side?

31
00:01:56.290 --> 00:01:57.840
&gt;&gt; Kyle Simpson: So
it's exactly like with parameters.

32
00:01:57.840 --> 00:02:00.890
The question is does
the absence of an object

33
00:02:00.890 --> 00:02:03.270
property represent
the undefined condition?

34
00:02:03.270 --> 00:02:05.390
And the answer is absolutely, yes.

35
00:02:05.390 --> 00:02:08.360
As long as that property doesn't
have a prototype or some proxy or

36
00:02:08.360 --> 00:02:09.050
something like that.

37
00:02:09.050 --> 00:02:13.920
Yes, the absence of a property ends up
behaving like It got back undefined.

38
00:02:13.920 --> 00:02:20.130
Just like if you said o.abc of some
random object, you get back undefined.

39
00:02:20.130 --> 00:02:20.860
Same thing here.

40
00:02:20.860 --> 00:02:23.350
If undefined comes back,
the default condition kicks in and

41
00:02:23.350 --> 00:02:25.220
gives you that value instead, okay.

42
00:02:27.580 --> 00:02:30.416
All right, now what if this d object,

43
00:02:30.416 --> 00:02:35.392
which we're doing of the structuring,
what if it didn't exist?

44
00:02:35.392 --> 00:02:36.546
What would happen?

45
00:02:44.020 --> 00:02:48.333
&gt;&gt; Kyle Simpson: We would be trying to
destructure an undefined value which is

46
00:02:48.333 --> 00:02:50.200
an exception case right?

47
00:02:51.430 --> 00:02:52.640
So guess what we need to do here?

48
00:02:54.030 --> 00:02:55.171
Provide a default.

49
00:02:58.282 --> 00:02:59.195
&gt;&gt; Kyle Simpson: Okay?

50
00:03:01.076 --> 00:03:03.517
&gt;&gt; Kyle Simpson: Similar to how we
provided a default here using the OR

51
00:03:03.517 --> 00:03:06.800
operator, because that's JavaScript
in de-structuring syntax.

52
00:03:06.800 --> 00:03:10.217
We need to provide a default
empty object to be destructured,

53
00:03:10.217 --> 00:03:12.397
in the case where d doesn't come back.

54
00:03:17.982 --> 00:03:22.842
&gt;&gt; Speaker 4: So that default is used as
the source of the destructuring, right?

55
00:03:22.842 --> 00:03:24.653
Not the-
&gt;&gt; Kyle Simpson: The value.

56
00:03:24.653 --> 00:03:25.920
Yes.
&gt;&gt; Speaker 4: Okay.

57
00:03:25.920 --> 00:03:27.990
&gt;&gt; Kyle Simpson: The value
to be to destructured.

58
00:03:30.680 --> 00:03:35.165
Going back for
just a moment in this particular case

59
00:03:35.165 --> 00:03:39.137
where we have a pattern
that looks like this.

60
00:03:42.660 --> 00:03:43.980
&gt;&gt; Kyle Simpson: Comes
from some value somewhere.

61
00:03:45.310 --> 00:03:48.480
The processing order is
a little strange here, okay.

62
00:03:48.480 --> 00:03:51.410
And this is part of what takes
a little bit of getting used to.

63
00:03:51.410 --> 00:03:54.730
Because what's gonna happen first,
is it's going to go and look and

64
00:03:54.730 --> 00:03:56.080
see if there isn't a property.

65
00:03:56.080 --> 00:03:59.410
So we're starting here in the left
it's gonna say is there an a property,

66
00:03:59.410 --> 00:04:01.910
in the object that we're expecting?

67
00:04:01.910 --> 00:04:05.550
The answer is no, it's then gonna go
all the way over here to the right and

68
00:04:05.550 --> 00:04:10.040
say, okay, let me go ahead and
get the default value to use for

69
00:04:10.040 --> 00:04:12.420
that in place of that property.

70
00:04:12.420 --> 00:04:15.900
Then it's going to come back and
say, what is my target?

71
00:04:15.900 --> 00:04:19.200
In this case, my target is a regular,
lexical variable, but

72
00:04:19.200 --> 00:04:21.630
my target could have been another pattern.

73
00:04:21.630 --> 00:04:25.390
But so, it's going to go from the left to
the right, and then back into the middle.

74
00:04:25.390 --> 00:04:29.090
So that is a processing order that
seems a little awkward in those cases.

75
00:04:29.090 --> 00:04:32.070
But if you think about it in terms of
the imperative code that you would have

76
00:04:32.070 --> 00:04:34.365
written it makes more sense.

77
00:04:34.365 --> 00:04:35.901
Cuz you would have
written it in that order.

78
00:04:35.901 --> 00:04:38.140
You would have said,
go look and see if it's there.

79
00:04:38.140 --> 00:04:43.927
If not, apply the value, and then assign
it somewhere or destructure it somewhere.

80
00:04:43.927 --> 00:04:45.595
Okay?

81
00:04:45.595 --> 00:04:50.260
So you have to get used to doing
that left right middle sort of jump.

82
00:04:50.260 --> 00:04:51.936
It's not strictly left to right here.

83
00:04:57.960 --> 00:05:00.749
&gt;&gt; Kyle Simpson: If we can do objects
inside of objects, and arrays inside

84
00:05:00.749 --> 00:05:05.070
of arrays, of course, we can do objects
inside of arrays and inside of objects.

85
00:05:05.070 --> 00:05:07.737
So this could have been
an array destructuring,

86
00:05:07.737 --> 00:05:11.390
a nested array destructuring,
where we're expecting an array.

87
00:05:11.390 --> 00:05:13.450
But what our default value should be here?

88
00:05:14.460 --> 00:05:16.740
Should be an empty array,
instead of an empty object.

89
00:05:16.740 --> 00:05:17.790
Okay?

90
00:05:17.790 --> 00:05:24.229
Now, I don't know for sure,
why they didn't make this required.

91
00:05:25.570 --> 00:05:31.110
Because, I'll tell you that
99.99% of the time I want it.

92
00:05:31.110 --> 00:05:35.733
And 98.99% of the time I forget it.

93
00:05:35.733 --> 00:05:38.836
I've been doing this a while now and
every single time I write it I forget it.

94
00:05:38.836 --> 00:05:41.887
I've already forgotten it twice today
when I intended to put it in our

95
00:05:41.887 --> 00:05:43.930
earlier discussion of arrays.

96
00:05:43.930 --> 00:05:45.600
Okay, I forget it all the time, and

97
00:05:45.600 --> 00:05:47.640
I wish it was like
a grammatically required thing.

98
00:05:48.930 --> 00:05:51.870
I can make a guess as to why
it's not grammatically required.

99
00:05:51.870 --> 00:05:56.174
And the guess is it might be the case
that you want a hard failure if

100
00:05:56.174 --> 00:05:58.730
something's missing.

101
00:05:58.730 --> 00:06:01.790
If you want a hard failure you
leave off the default value and

102
00:06:01.790 --> 00:06:02.730
you'll get a hard failure.

103
00:06:04.630 --> 00:06:07.100
Most of the time I don't
want hard failures.

104
00:06:07.100 --> 00:06:09.740
Most of the time I wanted
to gracefully recover or

105
00:06:09.740 --> 00:06:12.260
figure out, okay,
just destructure an empty array and

106
00:06:12.260 --> 00:06:15.390
leave me with my default values,
don't bother me with that, okay.

107
00:06:15.390 --> 00:06:19.720
So most of the time I prefer that
soft fallback, sort of behavior.

108
00:06:19.720 --> 00:06:22.447
But it might be the case that you
run into an occasion where you want

109
00:06:22.447 --> 00:06:23.740
the hard failure.

110
00:06:23.740 --> 00:06:26.590
You want to catch it with a try catch or
whatever, okay.

111
00:06:26.590 --> 00:06:29.050
So that's why you
are allowed to leave it off.

112
00:06:30.310 --> 00:06:31.960
Here's my opinion,

113
00:06:31.960 --> 00:06:34.760
you ought to get a limb to rule that
forces you to put it in every time.

114
00:06:35.870 --> 00:06:40.124
And there are Lint rules written that
force you to put in the default assignment

115
00:06:40.124 --> 00:06:41.554
for your destructuring.

116
00:06:42.881 --> 00:06:45.193
&gt;&gt; Kyle Simpson: For
your nested destructuring, specifically.

117
00:06:52.515 --> 00:06:56.643
&gt;&gt; Kyle Simpson: One last little
detail about the object destructuring,

118
00:06:56.643 --> 00:07:01.723
before we start talking about maybe
some more practical usages of it.

119
00:07:01.723 --> 00:07:06.595
One last little detail is that your
object can also be just a general

120
00:07:06.595 --> 00:07:08.780
assignment destructuring.

121
00:07:08.780 --> 00:07:16.043
So if I all ready had all those all
ready created in like var a, x, c, e.

122
00:07:16.043 --> 00:07:18.361
So if all ready have
those all ready created,

123
00:07:18.361 --> 00:07:22.000
then I could just do a general
object destructuring.

124
00:07:22.000 --> 00:07:26.680
However, unfortunately,
this is not legal syntax to

125
00:07:26.680 --> 00:07:30.230
start a statement with a curly brace,
cuz that's assumed to be a block.

126
00:07:30.230 --> 00:07:34.030
So in this specific case,
where you don't have a declarer there,

127
00:07:34.030 --> 00:07:39.000
you have to wrap the whole
statement in a parentheses, just

128
00:07:39.000 --> 00:07:43.230
to let it know this is an object
destructuring not a block label.

129
00:07:43.230 --> 00:07:46.490
This is part of our problem with
overloading the curly brace to mean 15

130
00:07:46.490 --> 00:07:48.470
different things in 15 different places.

131
00:07:50.040 --> 00:07:50.540
Okay.

132
00:07:53.920 --> 00:07:56.170
&gt;&gt; Kyle Simpson: I don't
regularly do this.

133
00:07:56.170 --> 00:07:59.830
Most of the time when I'm doing
destructurings, I have a declarator there.

134
00:07:59.830 --> 00:08:04.130
But if you're not doing a declarator, just
remember the object needs the parentheses,

135
00:08:04.130 --> 00:08:05.230
the brackets don't.

136
00:08:16.549 --> 00:08:18.557
&gt;&gt; Kyle Simpson: If all this
still feels too abstract,

137
00:08:18.557 --> 00:08:21.839
you're going to get an exercise
on this in just a few minutes.

138
00:08:21.839 --> 00:08:24.354
So you're going to get a chance
to practice it a little bit more.

139
00:08:24.354 --> 00:08:26.710
But it's going to take a lot
of practice to get there.

140
00:08:26.710 --> 00:08:27.480
Trust me.

141
00:08:27.480 --> 00:08:30.310
It took me weeks of banging
my head against it,

142
00:08:30.310 --> 00:08:33.240
and I don't understand,
it seems the wrong order, whatever.

143
00:08:33.240 --> 00:08:34.390
I get it.

144
00:08:34.390 --> 00:08:36.260
There is a learning curve,
and it's a steep cliff.

145
00:08:37.470 --> 00:08:40.320
But what I'm really trying to
get across is that the payoff is

146
00:08:40.320 --> 00:08:41.110
huge once you get there.

147
00:08:42.340 --> 00:08:46.513
That it really starts to simplify an awful
lot of things that we've been doing very

148
00:08:46.513 --> 00:08:47.670
manually in our code.

149
00:08:47.670 --> 00:08:51.699
It starts to create more self documenting
code, more declarative style code and

150
00:08:51.699 --> 00:08:53.190
that's much more readable.

