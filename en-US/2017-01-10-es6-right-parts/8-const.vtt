WEBVTT

1
00:00:00.000 --> 00:00:03.816
[MUSIC]

2
00:00:03.816 --> 00:00:05.586
&gt;&gt; Kyle Simpson: So
I think you ought to make explicit blocks,

3
00:00:05.586 --> 00:00:06.616
not use implicit blocks.

4
00:00:06.616 --> 00:00:08.558
That's my own personal take on that.

5
00:00:08.558 --> 00:00:13.802
By the way let declarations can
obviously declare more than one so

6
00:00:13.802 --> 00:00:17.817
you could say y = x * 3 or
whatever you want to do.

7
00:00:17.817 --> 00:00:20.973
Okay so that's the let keyword.

8
00:00:20.973 --> 00:00:22.364
In addition to the var keyword.

9
00:00:22.364 --> 00:00:28.296
Any more questions on let
before we move on to const?

10
00:00:28.296 --> 00:00:35.442
Const is a another block scoping
operator that was added to the language.

11
00:00:35.442 --> 00:00:39.862
So in this particular case you could use
it in the place where you had a let.

12
00:00:39.862 --> 00:00:42.040
It's a block scoping declarator.

13
00:00:42.040 --> 00:00:45.020
So it's kinda like a cousin
to let in that sense.

14
00:00:45.020 --> 00:00:49.220
But what const does is something
a little bit different.

15
00:00:49.220 --> 00:00:51.770
And it's probably something a little
bit different than what you might

16
00:00:51.770 --> 00:00:55.120
normally assume so
let me just ask for a moment.

17
00:00:55.120 --> 00:01:00.170
What do you all think const
x = 2 is actually creating?

18
00:01:00.170 --> 00:01:01.613
Anyone?

19
00:01:04.419 --> 00:01:08.380
&gt;&gt; Speaker 2: Keeps you from
reassigning x to something new.

20
00:01:08.380 --> 00:01:10.311
&gt;&gt; Kyle Simpson: Okay, good answer.

21
00:01:10.311 --> 00:01:12.284
Anybody else have a different answer?

22
00:01:12.284 --> 00:01:15.040
&gt;&gt; Speaker 3: I think just conceptually or
under the covers, what is it?

23
00:01:15.040 --> 00:01:16.270
&gt;&gt; Kyle Simpson: You tell me.

24
00:01:16.270 --> 00:01:19.115
&gt;&gt; Speaker 3: I would assume it's
making a getter that has no say.

25
00:01:19.115 --> 00:01:20.367
&gt;&gt; Kyle Simpson: I'm not necessarily
talking about implementations.

26
00:01:20.367 --> 00:01:26.093
I guess what I'm really asking is
what's the behavior in our code,

27
00:01:26.093 --> 00:01:28.280
what are we creating?

28
00:01:28.280 --> 00:01:29.550
&gt;&gt; Speaker 3: Mutable value
that if you signed again-

29
00:01:29.550 --> 00:01:30.386
&gt;&gt; Kyle Simpson: So some people say

30
00:01:30.386 --> 00:01:32.080
mutable values, okay.

31
00:01:32.080 --> 00:01:34.030
So we've heard can't be reassigned.

32
00:01:34.030 --> 00:01:35.140
We've heard immutable values.

33
00:01:35.140 --> 00:01:37.040
Anybody else have
a different explanation for

34
00:01:37.040 --> 00:01:40.040
when you tell somebody about the const
keyword, what are you usually saying?

35
00:01:41.190 --> 00:01:44.398
You're usually telling
somebody I'm creating a what?

36
00:01:44.398 --> 00:01:44.954
&gt;&gt; Speaker 4: A constant.

37
00:01:44.954 --> 00:01:45.990
&gt;&gt; Kyle Simpson: A constant,
so what is a constant?

38
00:01:47.330 --> 00:01:48.420
&gt;&gt; Speaker 5: Value doesn't change.

39
00:01:48.420 --> 00:01:49.400
&gt;&gt; Kyle Simpson: A value
that doesn't change.

40
00:01:49.400 --> 00:01:51.750
That's how a lot of
people describe it okay?

41
00:01:51.750 --> 00:01:54.900
Only one of the answers that
I've heard is actually accurate.

42
00:01:56.460 --> 00:01:59.865
All the other ones are well
meaning in spirit but

43
00:01:59.865 --> 00:02:01.890
off banks in terms of
what's really going on.

44
00:02:03.070 --> 00:02:08.091
So specifically, a constant is
a variable that cannot be reassigned and

45
00:02:08.091 --> 00:02:10.411
has nothing to do with the value.

46
00:02:12.238 --> 00:02:15.526
&gt;&gt; Kyle Simpson: But the problem is that
word constant is always associated in

47
00:02:15.526 --> 00:02:17.530
our developer minds with the value.

48
00:02:18.550 --> 00:02:21.390
So when people hear the word constant,
what they think is it's a value

49
00:02:21.390 --> 00:02:23.740
that doesn't change,
it's a value that's immutable.

50
00:02:23.740 --> 00:02:27.450
That's what almost everybody says
when you ask them that question,

51
00:02:27.450 --> 00:02:28.170
what is a constant?

52
00:02:29.190 --> 00:02:30.960
We almost always get that.

53
00:02:30.960 --> 00:02:34.490
But really what it is,
as this gentleman said really what it is,

54
00:02:34.490 --> 00:02:36.660
is that a constant is a variable
that can't be reassigned.

55
00:02:38.340 --> 00:02:41.936
So this confusion that I'm talking
about is not new to JavaScript.

56
00:02:41.936 --> 00:02:46.910
The const keyword has been introduced
in a whole bunch other languages before

57
00:02:46.910 --> 00:02:50.040
JavaScript and
as Stack Overflow can prove to us,

58
00:02:50.040 --> 00:02:52.970
it's confused developers in every
one of those communities as well.

59
00:02:52.970 --> 00:02:56.340
So much so that some languages
actually had to add another keyword.

60
00:02:56.340 --> 00:03:00.310
Like Java added the final keyword to
try to talk about value semantics.

61
00:03:00.310 --> 00:03:03.400
Because everybody kept thinking that const
had to do with the value and it didn't.

62
00:03:03.400 --> 00:03:08.160
So they added final to say this
value doesn't change anymore.

63
00:03:08.160 --> 00:03:09.590
Const is about assignment.

64
00:03:10.930 --> 00:03:14.930
So put it all simply,
if I say something like const x = 3,

65
00:03:14.930 --> 00:03:20.300
it is true that 3 is an immutable value
but has nothing to do with const.

66
00:03:20.300 --> 00:03:24.810
Because 3 is also an immutable value here,
okay?

67
00:03:24.810 --> 00:03:31.410
What's different about this program
is that x can't be reassigned, okay?

68
00:03:31.410 --> 00:03:35.334
To point that out even more specifically,

69
00:03:35.334 --> 00:03:40.895
if y is some array with values in it,
y cannot be reassigned.

70
00:03:40.895 --> 00:03:45.581
If I say y = 2, that fails.

71
00:03:45.581 --> 00:03:49.321
If I say y equals some other array,
that fails.

72
00:03:49.321 --> 00:03:54.237
Great but y is most definitely not
pointing at an immutable value

73
00:03:54.237 --> 00:03:59.151
because I can say y[0] = 42 and
it's gonna work all day long

74
00:03:59.151 --> 00:04:04.264
because the value itself has nothing
to do with the const keyword.

75
00:04:04.264 --> 00:04:06.119
It's just the assignment of it, okay?

76
00:04:06.119 --> 00:04:08.930
So there are some people.

77
00:04:08.930 --> 00:04:13.490
As a matter of fact, many people out
there that are telling developers,

78
00:04:13.490 --> 00:04:17.550
what you should do is always
declare your variables with const.

79
00:04:17.550 --> 00:04:22.405
And in certain cases, when it needs to
be reassignable, change those to lets,

80
00:04:22.405 --> 00:04:23.570
and never use var.

81
00:04:23.570 --> 00:04:25.380
So they const, let, never use var.

82
00:04:26.600 --> 00:04:29.651
My advice is literally
the inverse of that.

83
00:04:29.651 --> 00:04:32.340
var, use let where that's helpful.

84
00:04:32.340 --> 00:04:34.080
Every once in a while, maybe use const.

85
00:04:35.330 --> 00:04:37.100
Literally the inverse, okay?

86
00:04:37.100 --> 00:04:40.564
Because there's a whole bunch of places
where the const keyword is going

87
00:04:40.564 --> 00:04:44.610
to confuse readers of your code that are
not already familiar with the differences.

88
00:04:44.610 --> 00:04:47.933
They're gonna be confused into thinking
this is a value that doesn't change.

89
00:04:47.933 --> 00:04:50.401
For example,
some developer is gonna come along and

90
00:04:50.401 --> 00:04:54.170
they're gonna see this piece of code and
then they're gonna see it pass in x.

91
00:04:54.170 --> 00:04:57.110
And they're gonna think to themselves,
x doesn't change.

92
00:04:57.110 --> 00:04:59.140
I know x is still on array one two three.

93
00:05:00.960 --> 00:05:03.492
But is that the case?

94
00:05:03.492 --> 00:05:07.829
It's not the case because we passed
in a reference to a mutable value and

95
00:05:07.829 --> 00:05:13.036
through absolutely can do something stupid
like change the contents of that array and

96
00:05:13.036 --> 00:05:17.735
a reader of your code might be confused
when they see the const keyword into not

97
00:05:17.735 --> 00:05:18.870
realizing that.

98
00:05:18.870 --> 00:05:21.910
So the const keyword has
the potential to lead people

99
00:05:21.910 --> 00:05:25.440
down this path of being confused
about the value semantic.

100
00:05:25.440 --> 00:05:29.140
And I'm not just saying that on my own,
I'm saying we've got three decades of

101
00:05:29.140 --> 00:05:33.200
experience with other languages that
say sometimes developers get confused.

102
00:05:33.200 --> 00:05:33.870
Is it learnable?

103
00:05:33.870 --> 00:05:34.820
Yes.

104
00:05:34.820 --> 00:05:37.190
Is it natural and
instinctive and intuitive?

105
00:05:37.190 --> 00:05:38.517
Maybe not so much, okay?

106
00:05:38.517 --> 00:05:44.100
So the const keyword has this potential
problem but what's its value benefit.

107
00:05:44.100 --> 00:05:48.929
The value benefit supposedly is that
we're communicating which sounds exactly

108
00:05:48.929 --> 00:05:51.422
like something that be right up my alley.

109
00:05:51.422 --> 00:05:56.206
We are communicating when we write this
line of code on the first line of our

110
00:05:56.206 --> 00:06:00.776
block, we are communicating that
x will never be reassigned, okay?

111
00:06:00.776 --> 00:06:02.280
We'll get to that question
in just one moment,

112
00:06:02.280 --> 00:06:03.680
just let me finish this
thought real quick.

113
00:06:04.690 --> 00:06:07.020
We are communicating x
will never be reassigned.

114
00:06:08.170 --> 00:06:09.390
But let me ask you a question.

115
00:06:09.390 --> 00:06:13.560
Let's imagine that this is inside
of some blocks somewhere, okay?

116
00:06:13.560 --> 00:06:17.030
And there's some other code in this block.

117
00:06:17.030 --> 00:06:20.510
You've probably heard before,
people tell you, stylistically,

118
00:06:20.510 --> 00:06:24.150
you should keep your functions in
your blocks really small, okay?

119
00:06:24.150 --> 00:06:27.610
Most people tell you, if they're of that
opinion, they'll tell you your block

120
00:06:27.610 --> 00:06:31.460
should never be more than maybe five
lines, six, seven lines of code, right?

121
00:06:31.460 --> 00:06:32.670
They want you to keep things small.

122
00:06:32.670 --> 00:06:33.600
There are people that say,

123
00:06:33.600 --> 00:06:36.290
a whole function shouldn't
be more than five lines.

124
00:06:36.290 --> 00:06:38.140
If it's more than five lines
you split it out, right?

125
00:06:38.140 --> 00:06:38.960
We hear this all the time.

126
00:06:38.960 --> 00:06:41.810
It's nonsense but
we hear it all the time, right?

127
00:06:41.810 --> 00:06:44.340
So let's go really crazy.

128
00:06:44.340 --> 00:06:46.890
And let's say that we wrote
a ten line block of code.

129
00:06:46.890 --> 00:06:50.460
I mean I know that's just way
out there in an outer space.

130
00:06:50.460 --> 00:06:54.060
But let's say we wrote a ten line block,
and on the first line we said const

131
00:06:54.060 --> 00:06:58.170
x = and we're supposedly
communicating to other developers.

132
00:06:58.170 --> 00:07:00.230
x is not gonna be reassigned.

133
00:07:00.230 --> 00:07:01.310
But let me ask you a question.

134
00:07:01.310 --> 00:07:03.910
Let's say that that block
is within the program.

135
00:07:03.910 --> 00:07:05.720
We've got a million lines of code.

136
00:07:06.950 --> 00:07:10.712
How many lines of that code can
affect the assignment of x?

137
00:07:16.974 --> 00:07:20.218
&gt;&gt; Kyle Simpson: Is it a million?

138
00:07:20.218 --> 00:07:24.798
There's only nine other lines in that
entire million line program that

139
00:07:24.798 --> 00:07:29.237
can actually change the assignment
of x because it's block scoped.

140
00:07:29.237 --> 00:07:35.370
Even if we pass x somewhere.

141
00:07:35.370 --> 00:07:39.480
The code inside of foo cannot
affect the assignment of x.

142
00:07:39.480 --> 00:07:41.810
Can affect the value,
can't affect the assignment.

143
00:07:43.160 --> 00:07:46.980
So let me just summarize it this way,
and then I'll get to the question.

144
00:07:48.710 --> 00:07:50.240
The const keyword is saying,

145
00:07:50.240 --> 00:07:55.320
I'm not going to reassign this variable
in the next few lines of code.

146
00:07:56.690 --> 00:08:00.070
I prefer to communicate that by just
simply not reassigning it in the next

147
00:08:00.070 --> 00:08:00.670
few lines of code.

148
00:08:01.730 --> 00:08:05.160
Because the const keyword, because of
all the confusion potential doesn't

149
00:08:05.160 --> 00:08:07.080
actually help me with that communication.

150
00:08:07.080 --> 00:08:10.078
I just don't reassign it and then I've
communicated I'm not gonna reassign it.

151
00:08:11.540 --> 00:08:15.410
But there's another problem here, which
is that whole thing that values can go

152
00:08:15.410 --> 00:08:17.522
other places and get mutated,
that's a big deal.

153
00:08:17.522 --> 00:08:19.750
Const doesn't help us with that.

154
00:08:19.750 --> 00:08:22.440
If you wanted to make sure that
somebody couldn't change it,

155
00:08:22.440 --> 00:08:23.550
you don't need the const keyword,

156
00:08:23.550 --> 00:08:28.810
what you need is object.freeze
That's been built in since ES5.

157
00:08:28.810 --> 00:08:31.750
That's not even an ES6 thing.

158
00:08:31.750 --> 00:08:36.420
Breaking news, seven years ago we got
this utility called object.freeze.

159
00:08:36.420 --> 00:08:41.540
It makes that object at the shallow top
level, it's a shallow freeze it makes it

160
00:08:41.540 --> 00:08:45.330
read only properties so
in effect it is an immutable value, okay?

161
00:08:45.330 --> 00:08:48.260
Not a real immutable value
in terms of performance but

162
00:08:48.260 --> 00:08:50.480
poor man's immutable value.

163
00:08:50.480 --> 00:08:54.720
So if I wanted to communicate to some
developer that x is not gonna be changed

164
00:08:54.720 --> 00:08:58.510
by foo, I could just as
easily do that with var x and

165
00:08:58.510 --> 00:09:02.588
I would say have less confusion potential
with them if I use the const keyword.

166
00:09:02.588 --> 00:09:05.820
By saying object.phrase.

