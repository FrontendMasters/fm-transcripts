WEBVTT

1
00:00:00.000 --> 00:00:04.282
[MUSIC]

2
00:00:04.282 --> 00:00:05.120
&gt;&gt; Kyle Simpson: Here's our exercise.

3
00:00:05.120 --> 00:00:08.240
You're gonna get to do almost
exactly what we just did but

4
00:00:08.240 --> 00:00:13.520
in a slightly more sophisticated way,
okay?

5
00:00:13.520 --> 00:00:15.860
Question, where is the next call?

6
00:00:15.860 --> 00:00:24.010
It is inside of the dot dot dot
iterator or inside of the for of loop.

7
00:00:24.010 --> 00:00:26.040
The dot dot dot iterator and the for

8
00:00:26.040 --> 00:00:30.210
of loop automatically consume
an iterator until its completion.

9
00:00:30.210 --> 00:00:33.520
So they automatically loop over it and
call the dot next call and pull

10
00:00:33.520 --> 00:00:36.700
out its value and all that stuff for you.
&gt;&gt; Speaker 2: So

11
00:00:36.700 --> 00:00:41.100
if you accidentally did the on something
that never stopped generating,

12
00:00:41.100 --> 00:00:44.910
you'd have a stack overflow real fast.
&gt;&gt; Kyle Simpson: That's exactly right.

13
00:00:44.910 --> 00:00:47.269
If you called a dot dot dot
on a while true generator,

14
00:00:47.269 --> 00:00:49.100
you're going to lock up your program.

15
00:00:49.100 --> 00:00:57.189
It's going to go forever, okay.
&gt;&gt; Kyle Simpson: Exercise five,

16
00:00:57.189 --> 00:01:02.210
I want you to define a numbers
object that is iterable.

17
00:01:03.360 --> 00:01:07.650
And by default it should start

18
00:01:07.650 --> 00:01:12.780
at position or
at the value at the number zero.

19
00:01:12.780 --> 00:01:17.030
Going by 1s up to and including 100.

20
00:01:17.030 --> 00:01:22.539
But I also want it to be able
to make my own custom iterator

21
00:01:22.539 --> 00:01:28.636
which can customize where to start,
what increment to use and

22
00:01:28.636 --> 00:01:32.964
where to end.
&gt;&gt; Kyle Simpson: So,

23
00:01:32.964 --> 00:01:37.867
you're gonna wanna to make yourself
an iterator generator here that

24
00:01:37.867 --> 00:01:42.950
does this looping and yielding out
of numbers and all that other stuff.

25
00:01:44.190 --> 00:01:48.170
But you're also going to want to make
that thing be able to take arguments.

26
00:01:48.170 --> 00:01:51.520
So that you can make a custom iterator
if you want to call it manually.

27
00:01:53.040 --> 00:01:57.750
So this example, example five is
designed to actually weave together

28
00:01:57.750 --> 00:02:00.380
almost everything that
we've talked about today.

29
00:02:00.380 --> 00:02:01.820
It's on purpose.

30
00:02:01.820 --> 00:02:07.190
Because the correct solution to this
will include, obviously, generators.

31
00:02:07.190 --> 00:02:08.539
It's gonna include iterators.

32
00:02:08.539 --> 00:02:09.920
It's gonna include symbols.

33
00:02:09.920 --> 00:02:13.560
It's gonna include concise properties or
methods.

34
00:02:13.560 --> 00:02:18.514
It's gonna include,
&gt;&gt; Kyle Simpson: Object

35
00:02:18.514 --> 00:02:20.350
destructuring in the parameter list.

36
00:02:20.350 --> 00:02:22.410
It's gonna include defaults.

37
00:02:22.410 --> 00:02:24.550
It's gonna include blocks scoping.

38
00:02:24.550 --> 00:02:27.160
So all of the things that we've
talked about in little bits and

39
00:02:27.160 --> 00:02:30.980
pieces fit together in
this one little example.

40
00:02:30.980 --> 00:02:33.250
Now that might sound like
a really daunting exercise.

41
00:02:34.390 --> 00:02:38.500
Until I tell you the sum total of
lines of code that you need to write

42
00:02:38.500 --> 00:02:43.360
to solve this exercise is
under ten lines of code, okay?

43
00:02:43.360 --> 00:02:45.620
So there's not a lot of code to write.

44
00:02:45.620 --> 00:02:48.980
You just have to figure out of all
the stuff that we've talked about today,

45
00:02:48.980 --> 00:02:53.550
how do I bring all those different
pieces together to make this,

46
00:02:53.550 --> 00:02:58.830
these two for loops work correctly, okay?

47
00:02:58.830 --> 00:03:01.440
Yes.
&gt;&gt; Speaker 3: Will you cover what

48
00:03:01.440 --> 00:03:05.790
happens when you cull a next with a value?
&gt;&gt; Kyle Simpson: I'm not going to cover

49
00:03:05.790 --> 00:03:10.010
that today because that's getting
into more advanced generator usage.

50
00:03:10.010 --> 00:03:13.010
It sends the value in and replaces
the yield expression and stuff but

51
00:03:13.010 --> 00:03:15.587
that's beyond the scope of
what we're going to talk about

52
00:03:15.587 --> 00:03:21.418
today.
&gt;&gt; Kyle Simpson: This is our last and

53
00:03:21.418 --> 00:03:22.280
final exercise.

54
00:03:22.280 --> 00:03:23.470
That's why it's pulling in everything.

55
00:03:23.470 --> 00:03:27.090
About the only thing we don't
really pull in is template strings.

56
00:03:27.090 --> 00:03:29.580
I couldn't figure out a way
to use template strings here.

57
00:03:29.580 --> 00:03:32.780
Other than that, try to figure out all
the stuff that we've talked about,

58
00:03:32.780 --> 00:03:34.379
how to weave all that stuff in.

