WEBVTT

1
00:00:00.025 --> 00:00:04.189
[MUSIC]

2
00:00:04.189 --> 00:00:08.161
&gt;&gt; Kyle Simpson: This next one there
isn't really a before and after,

3
00:00:08.161 --> 00:00:12.483
cuz this is gonna be one of
those rare few features in ES6,

4
00:00:12.483 --> 00:00:17.530
that doesn't have an equivalent
pre-ES6 at least not directly.

5
00:00:19.600 --> 00:00:22.060
Next thing I'm gonna talk to you
about is a thing called a Symbol.

6
00:00:23.610 --> 00:00:27.570
Now, this is actually a new data
type added in JavaScript as of ES6.

7
00:00:27.570 --> 00:00:29.500
So we went from having
six primitive types,

8
00:00:29.500 --> 00:00:33.978
to now having a seventh, being Symbol.

9
00:00:33.978 --> 00:00:36.740
And I'll be honest with
you right off the bat,

10
00:00:36.740 --> 00:00:40.990
these are not all that
useful in the general case,

11
00:00:40.990 --> 00:00:44.550
meaning they're not all that useful for
you to make your own symbols.

12
00:00:44.550 --> 00:00:48.700
I'll tell you why people think that they
want to create their own symbols and

13
00:00:48.700 --> 00:00:51.100
I'll show you a use case for that, but

14
00:00:51.100 --> 00:00:55.410
honestly the only reason I'm introducing
you to symbols is that we can talk about.

15
00:00:55.410 --> 00:00:58.070
Existing what are called
well known symbols.

16
00:00:58.070 --> 00:01:00.280
Those are actually really useful.

17
00:01:00.280 --> 00:01:03.680
But creating your own symbols
that's kind of I'm not sure that.

18
00:01:03.680 --> 00:01:04.640
I've never done it.

19
00:01:04.640 --> 00:01:08.660
Not once in all of my programming, but
we'll explain what this is all about okay?

20
00:01:08.660 --> 00:01:11.052
So the way to make a new
value of this type,

21
00:01:11.052 --> 00:01:14.309
[INAUDIBLE] column symbol
function which is capital S.

22
00:01:15.900 --> 00:01:18.060
And notice I did not put
the new keyword there,

23
00:01:18.060 --> 00:01:20.430
because you can't actually
call it as a constructor.

24
00:01:20.430 --> 00:01:22.180
You have to use it as a regular function.

25
00:01:23.700 --> 00:01:28.170
What I've now constructed is
this special new value type, and

26
00:01:28.170 --> 00:01:32.090
your brain is immediately gonna think,
well, under the covers, what is it?

27
00:01:32.090 --> 00:01:32.870
Is it a number?

28
00:01:32.870 --> 00:01:34.410
Is it a string?

29
00:01:34.410 --> 00:01:37.760
It's most closely associated
with the string value but,

30
00:01:37.760 --> 00:01:38.990
it is not a string value.

31
00:01:40.330 --> 00:01:41.870
Here's what symbol is.

32
00:01:41.870 --> 00:01:47.750
Symbol is a unique, globally unguessable
value within the context of your program.

33
00:01:50.490 --> 00:01:52.210
What kind of value it is?

34
00:01:52.210 --> 00:01:52.910
It's a symbol value.

35
00:01:54.450 --> 00:01:55.350
What is a symbol?

36
00:01:55.350 --> 00:01:57.440
A symbol is the symbol.

37
00:01:57.440 --> 00:01:59.020
It's very circular and recursive,

38
00:01:59.020 --> 00:02:02.950
because you're not supposed to think
about what it is under the covers.

39
00:02:02.950 --> 00:02:04.785
Technically the engines use numbers.

40
00:02:04.785 --> 00:02:07.070
Okay, I think.

41
00:02:07.070 --> 00:02:09.140
I think they use unique numbers.

42
00:02:09.140 --> 00:02:12.840
But from your perspective that is,
the developer in your program,

43
00:02:12.840 --> 00:02:18.330
you make this symbol and you just use it
opaquely, you don't know what value it is.

44
00:02:18.330 --> 00:02:20.370
You can't find out what value it is, and

45
00:02:20.370 --> 00:02:21.960
you're not supposed to care
what value it is okay.

46
00:02:23.680 --> 00:02:28.700
You're supposed to use it
as a symbolic placeholder,

47
00:02:28.700 --> 00:02:33.760
for this unique globally
unguessable value.

48
00:02:35.520 --> 00:02:39.500
That's the invariant
the JavaScript promises for you.

49
00:02:39.500 --> 00:02:40.830
Okay.

50
00:02:40.830 --> 00:02:47.430
So, the symbol function
optionally takes a string value

51
00:02:47.430 --> 00:02:53.810
which is whatever description you want,
it doesn't matter what

52
00:02:53.810 --> 00:02:59.110
you put there because the value that you
put there is not useful programatically.

53
00:02:59.110 --> 00:03:02.910
The value that you put there is only
useful from the debugging perspective.

54
00:03:04.550 --> 00:03:06.650
It's a label for the object.

55
00:03:06.650 --> 00:03:09.410
It's technically called the name for
the symbol.

56
00:03:09.410 --> 00:03:11.500
Okay, so let me give you an example,

57
00:03:11.500 --> 00:03:16.850
if we come over here to my console
if I just make a plain old symbol.

58
00:03:16.850 --> 00:03:21.670
And then I ask what is the value
of Symbol you'll notice the way

59
00:03:21.670 --> 00:03:27.230
the developer tool prints it out it just
says Symbol() because it has no label.

60
00:03:27.230 --> 00:03:30.050
But if I make one to have a label.

61
00:03:30.050 --> 00:03:31.230
Like this is cool.

62
00:03:31.230 --> 00:03:36.580
And then I ask for its value, the
developer tools will tell me this is cool.

63
00:03:38.180 --> 00:03:40.170
Still doesn't tell me what
the underlying value is

64
00:03:40.170 --> 00:03:41.290
because we're not supposed to know.

65
00:03:42.420 --> 00:03:44.540
And programatically,
that label doesn't matter to us.

66
00:03:44.540 --> 00:03:47.790
It's not like you can access it
with that label or anything.

67
00:03:47.790 --> 00:03:52.150
So as a matter of fact I can make two,
with exactly the same description.

68
00:03:53.230 --> 00:03:56.740
Maybe not a great idea in terms of
confusing yourself in the console.

69
00:03:58.650 --> 00:04:01.940
But now,
y prints out exactly the same way.

70
00:04:01.940 --> 00:04:04.200
And yet, these are not the same.

71
00:04:04.200 --> 00:04:06.670
Because no two symbols will
ever be equal to each other.

72
00:04:06.670 --> 00:04:09.670
They are globally unique within
the context of our program.

73
00:04:11.520 --> 00:04:16.470
Okay, so that description is only there
to help you and your developer tools.

74
00:04:17.670 --> 00:04:19.890
Now what are we supposed
to be able to use these for

75
00:04:19.890 --> 00:04:23.070
why on earth would we want the x symbol.

76
00:04:23.070 --> 00:04:28.370
Well it's supposed to be used most
directly as the property name for

77
00:04:28.370 --> 00:04:31.490
an object, in side of an object so

78
00:04:31.490 --> 00:04:36.580
say I have an object here, that
normally has property names like ID 42,

79
00:04:36.580 --> 00:04:41.250
and so forth but let's say I wanna put
a special property on this object.

80
00:04:41.250 --> 00:04:46.230
I wanna say object of x is equal to "shhhh

81
00:04:46.230 --> 00:04:52.160
this is secret" It's not really secret,
okay.

82
00:04:52.160 --> 00:04:57.690
But what I've done is I've created
a property name, on obj that is,

83
00:04:57.690 --> 00:05:01.840
the property name itself is this special
globally unique unguessable value.

84
00:05:03.580 --> 00:05:05.890
So what happens if I do that if I then,

85
00:05:05.890 --> 00:05:10.560
take this and I come over here,
to the browser.

86
00:05:10.560 --> 00:05:13.160
And then I ask what is
the contents of a obj?

87
00:05:13.160 --> 00:05:17.990
You'll notice that I have the ID 42 and
I have the symbol whatever description.

88
00:05:19.830 --> 00:05:24.080
Okay, so that I have two properties
on obj, one is at position ID's and

89
00:05:24.080 --> 00:05:25.650
one is at this symbol.

90
00:05:26.960 --> 00:05:29.059
What happens if I ask for the keys?

91
00:05:30.550 --> 00:05:34.620
Of obj, and just get id.

92
00:05:36.580 --> 00:05:42.371
What happens if I ask for
Object.getOnPropertyNames of obj,

93
00:05:42.371 --> 00:05:50.123
I just get "id" so you might start to
think it's kinda like a hidden property,

94
00:05:50.123 --> 00:05:54.383
cuz it doesn't show up in
the object dot keys or

95
00:05:54.383 --> 00:05:58.320
the object dot get on property names.

96
00:05:58.320 --> 00:06:02.030
Shows up in my developer console but
it doesn't show up programmatically, so

97
00:06:02.030 --> 00:06:05.110
I start to think it's sorta like
this special hidden property.

98
00:06:05.110 --> 00:06:07.080
It is not a hidden property.

99
00:06:07.080 --> 00:06:09.620
But it's kind of like a special property

100
00:06:09.620 --> 00:06:13.310
in that it's collected into a different
bucket than other properties.

101
00:06:13.310 --> 00:06:15.070
That's the only difference.

102
00:06:15.070 --> 00:06:16.840
So now we have two buckets in an object.

103
00:06:16.840 --> 00:06:20.870
We have regular properties, and
then we have symbol properties.

104
00:06:20.870 --> 00:06:23.886
Okay?
And it is possible programatically to ask,

105
00:06:23.886 --> 00:06:33.180
for the getOwnPropertySymbols(obj) and

106
00:06:33.180 --> 00:06:37.760
you notice that gives us an array
of that symbol, so it's not hidden.

107
00:06:37.760 --> 00:06:40.770
Somebody takes your value,
they can get the symbol out.

108
00:06:40.770 --> 00:06:43.410
They can never know what the symbol
value underlying is, but

109
00:06:43.410 --> 00:06:47.520
they can get that symbol and then they
can access your object at that location.

110
00:06:47.520 --> 00:06:49.980
So it's not really a hidden property.

111
00:06:49.980 --> 00:06:55.991
But it's kind of like when we used
to do this kind of silliness.

112
00:07:02.171 --> 00:07:03.621
&gt;&gt; Kyle Simpson: Remember how we pretty

113
00:07:03.621 --> 00:07:05.911
commonly will append or prepend and

114
00:07:05.911 --> 00:07:09.649
an underscore a couple of
underscores to a property name,

115
00:07:09.649 --> 00:07:15.010
cuz we're kind of trying to signal
to people leave this alone, right.

116
00:07:15.010 --> 00:07:19.390
My favorite one is like in I think
it's see their angular reactor.

117
00:07:19.390 --> 00:07:21.060
I think it might be reactor, whatever.

118
00:07:21.060 --> 00:07:23.860
They have a property name
that's underscore, underscore.

119
00:07:23.860 --> 00:07:25.900
This is the super secret
dome don't touch it or

120
00:07:25.900 --> 00:07:27.200
something crazy.
&gt;&gt; Speaker 2: [INAUDIBLE]

121
00:07:27.200 --> 00:07:27.920
&gt;&gt; Kyle Simpson: Yeah, something like

122
00:07:27.920 --> 00:07:30.250
that, that's their name for it, right?

123
00:07:30.250 --> 00:07:33.250
Cuz we use that underscore convention
to tell people, leave it alone.

124
00:07:34.780 --> 00:07:38.970
Symbols are like a way of doing
that with a direct data type,

125
00:07:38.970 --> 00:07:44.350
as opposed to doing it through
the convention of naming okay.

126
00:07:44.350 --> 00:07:48.020
So it's like if you wanted to put a
special like meta property onto an object.

127
00:07:48.020 --> 00:07:50.680
It's not hidden, but
at least it makes it clear to somebody.

128
00:07:50.680 --> 00:07:52.680
Hey you probably shouldn't
be messing with this thing.

129
00:07:54.820 --> 00:07:59.010
On the scale of one to ten,
one being that stupid and

130
00:07:59.010 --> 00:08:01.900
ten being that's oh-my-god awesome.

131
00:08:01.900 --> 00:08:02.680
This is like a 1.1.

132
00:08:02.680 --> 00:08:07.770
Okay, I don't really think that
I'm gonna ever hardly use that,

133
00:08:07.770 --> 00:08:10.050
but you might want to use those for

134
00:08:10.050 --> 00:08:13.990
your special matter properties, as opposed
to doing the underscore convention, okay?

135
00:08:13.990 --> 00:08:15.330
And that's how you use them.

136
00:08:15.330 --> 00:08:20.730
You create a symbol use it, okay?

137
00:08:20.730 --> 00:08:25.840
By the way, we can now do that with object
literals because of computed symbols.

138
00:08:25.840 --> 00:08:27.710
I mean computed property names.

139
00:08:27.710 --> 00:08:30.580
So now we can say,
compute the property value.

140
00:08:30.580 --> 00:08:33.380
I mean the value of x, and
use that as the property name.

141
00:08:33.380 --> 00:08:38.327
So by convention that's how we include,
&gt;&gt; Kyle Simpson: Symbols in our object

142
00:08:38.327 --> 00:08:42.043
literals, any questions
about user symbols like

143
00:08:42.043 --> 00:08:47.335
that?
&gt;&gt; Kyle Simpson: Like I said,

144
00:08:47.335 --> 00:08:51.984
I don't use user symbols but, I introduce
you to this data type cuz, the other thing

145
00:08:51.984 --> 00:08:56.000
I'm about to teach you is well known
symbols and those are super useful.

