WEBVTT

1
00:00:00.000 --> 00:00:03.952
[MUSIC]

2
00:00:03.952 --> 00:00:06.820
&gt;&gt; Kyle Simpson: So
let's talk about Exercise 4.

3
00:00:06.820 --> 00:00:07.920
Let's start from the bottom.

4
00:00:07.920 --> 00:00:12.630
Let's say that we wanna tag our strings so
we want to put upper in front of it.

5
00:00:12.630 --> 00:00:15.490
Our expressions need to look like this.

6
00:00:15.490 --> 00:00:19.192
So we're going to say ${name}.

7
00:00:19.192 --> 00:00:26.705
And then ${twitter}.

8
00:00:26.705 --> 00:00:31.699
And then $, is it {classname}?

9
00:00:31.699 --> 00:00:36.480
Yeah.

10
00:00:36.480 --> 00:00:38.660
So there's our string literal.

11
00:00:38.660 --> 00:00:40.980
It needs to match this particular string,
so

12
00:00:40.980 --> 00:00:44.940
you can see it needs to be able to pull
in those and uppercase the values.

13
00:00:44.940 --> 00:00:47.970
So let's do that,
let's write a tag function to do that.

14
00:00:47.970 --> 00:00:49.460
We start out with an empty string.

15
00:00:51.590 --> 00:00:53.075
We do a for loop.

16
00:01:01.335 --> 00:01:06.677
&gt;&gt; Kyle Simpson: We say if (i &gt; 0)
meaning I'm dealing with the the values,

17
00:01:06.677 --> 00:01:12.328
I wanna add, concatenate onto
the string values of [i- 1] but

18
00:01:12.328 --> 00:01:15.230
I want to call toUpperCase on it.

19
00:01:18.450 --> 00:01:26.450
And then I want to add it strings of i and
return my string.

20
00:01:28.540 --> 00:01:30.670
Let's test it and see if that worked.

21
00:01:35.950 --> 00:01:36.970
&gt;&gt; Kyle Simpson: And we got true.

22
00:01:44.830 --> 00:01:46.175
&gt;&gt; Kyle Simpson: So
there's our tag function.

23
00:01:49.230 --> 00:01:51.125
&gt;&gt; Kyle Simpson: Questions
about exercise four?

24
00:01:53.412 --> 00:01:54.660
&gt;&gt; Kyle Simpson: Yes.
&gt;&gt; Audience member: I was trying to use

25
00:01:54.660 --> 00:01:57.626
map and sort of a for loop but
I couldn't get it to work.

26
00:01:57.626 --> 00:02:03.240
&gt;&gt; Kyle Simpson: Okay so map, this isn't
the functional class but since you

27
00:02:03.240 --> 00:02:07.400
brought it up, map is for taking a list of
things going to another list of things.

28
00:02:08.400 --> 00:02:09.944
That's not quite what we wanna do here.

29
00:02:09.944 --> 00:02:13.050
We wanna go from a list of things
down to one concrete value

30
00:02:13.050 --> 00:02:14.190
which is the reduce operator.

31
00:02:14.190 --> 00:02:16.450
And you could have done this
with reduce if you wanted to.

32
00:02:18.950 --> 00:02:23.710
The only trick with doing this with reduce
that's one of those cases because reduce

33
00:02:23.710 --> 00:02:27.790
isn't built to go over two lists and we're
technically traversing two lists here.

34
00:02:27.790 --> 00:02:32.840
If you did it that way you'd
technically be doing an impure reducer.

35
00:02:32.840 --> 00:02:38.400
So you probably wanna wrap that
up in some special pure utility.

36
00:02:38.400 --> 00:02:43.465
If you really wanna be like, if you don't
want the FP police to come after you.

37
00:02:46.790 --> 00:02:48.021
&gt;&gt; Kyle Simpson: But
you can do it with Redux.

38
00:02:53.810 --> 00:02:59.756
&gt;&gt; Kyle Simpson: [COUGH]
&gt;&gt; Kyle Simpson: Other questions?

39
00:03:02.330 --> 00:03:04.242
&gt;&gt; Kyle Simpson: You may not
author a lot of these yourself.

40
00:03:04.242 --> 00:03:06.900
You might wanna just tweak them
maybe every once in a while.

41
00:03:06.900 --> 00:03:09.880
But I would definitely
recommend go search on GitHub,

42
00:03:09.880 --> 00:03:14.224
you'll find several different repos of
libraries where people have collected

43
00:03:14.224 --> 00:03:16.256
together useful preexisting ones.

44
00:03:16.256 --> 00:03:17.500
You don't need to reinvent your own logic.

45
00:03:18.550 --> 00:03:19.500
Several good ones out there.

