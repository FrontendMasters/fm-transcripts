WEBVTT

1
00:00:00.000 --> 00:00:03.901
[MUSIC]

2
00:00:03.901 --> 00:00:07.610
&gt;&gt; Kyle Simpson: So,
let's talk about exercise one.

3
00:00:07.610 --> 00:00:10.590
Here we started off with a var x = 2.

4
00:00:10.590 --> 00:00:13.980
We can kinda see in the scope
of this program that's sorta

5
00:00:13.980 --> 00:00:15.320
being used like a constant.

6
00:00:15.320 --> 00:00:18.140
So, that's a place where you could make
the argument that it should be a const.

7
00:00:19.200 --> 00:00:24.140
FN is definitely not gonna be
treated as a const in the sense

8
00:00:24.140 --> 00:00:27.810
it's not gonna be treated as a constant
even though it might be reassigned.

9
00:00:27.810 --> 00:00:31.620
We're gonna be adding to it, so I think it
would be super confusing to declare FN's

10
00:00:31.620 --> 00:00:37.060
as a constant, and then later in the code
start adding to the contents of it, Okay.

11
00:00:37.060 --> 00:00:38.960
You can, but I don't think you should.

12
00:00:38.960 --> 00:00:41.980
So, that's why we're gonna go ahead and
declare fn is a var because we're telling

13
00:00:41.980 --> 00:00:45.920
someone, hey this thing is gonna be
reused and I use a var instead of a let

14
00:00:45.920 --> 00:00:50.724
again because FN's is gonna be used
across multiple scopes, all right.

15
00:00:50.724 --> 00:00:55.610
Now in the previous example I had an iffy
in the only purpose of this iffy was so

16
00:00:55.610 --> 00:00:59.680
that I could make another var x which
was sort of my constant in terms of

17
00:00:59.680 --> 00:01:00.580
How high up to go.

18
00:01:02.020 --> 00:01:04.260
And there would be a collision
there if there wasn't a scope.

19
00:01:04.260 --> 00:01:07.900
Well, I can do that with
a block which I'm doing here.

20
00:01:07.900 --> 00:01:09.070
Lines four through ten.

21
00:01:09.070 --> 00:01:14.120
And again, I can use const here because
x is actually sort of being used as

22
00:01:14.120 --> 00:01:19.370
a constant in that sense to tell
us what does Run the loop up to.

23
00:01:19.370 --> 00:01:23.130
I'm going to do a for with a let keyword
because I know I've got closure involved

24
00:01:23.130 --> 00:01:25.910
and I'm going to want to close
over an individual I for each oop.

25
00:01:25.910 --> 00:01:30.110
I'm going to add these functions
if into the FNs array and

26
00:01:30.110 --> 00:01:33.095
just simply close over that I variable.

27
00:01:36.431 --> 00:01:39.190
&gt;&gt; Kyle Simpson: And
that preserves my test case.

28
00:01:39.190 --> 00:01:39.970
I end up getting true.

29
00:01:43.070 --> 00:01:44.060
Questions about exercise one?

30
00:01:44.060 --> 00:01:44.560
Yes.

31
00:01:45.820 --> 00:01:49.140
&gt;&gt; Speaker 2: A question from before but,
in a more broad sense.

32
00:01:49.140 --> 00:01:55.507
Just another question about why ES linked
is starting to throw errors for var?

33
00:01:57.227 --> 00:02:00.818
&gt;&gt; Kyle Simpson: [CROSSTALK] There's
a crowd of people that are under

34
00:02:00.818 --> 00:02:05.587
the impression that light is the new
var and that var is a code smell.

35
00:02:05.587 --> 00:02:09.645
So, now they have default lending rules
that tell you don't use a var under any

36
00:02:09.645 --> 00:02:11.200
circumstances.

37
00:02:11.200 --> 00:02:12.750
I just think that's
a bunch of nonsense but

38
00:02:12.750 --> 00:02:14.000
there are some people that believe that.

