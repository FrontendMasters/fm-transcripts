WEBVTT

1
00:00:00.000 --> 00:00:03.822
[MUSIC]

2
00:00:03.822 --> 00:00:08.773
&gt;&gt; Kyle Simpson: I just want to take
a brief moment to mention the landscape of

3
00:00:08.773 --> 00:00:14.715
ES6 is complicated in a sense by
the fact that syntax is not necessarily

4
00:00:14.715 --> 00:00:21.020
directly supported in every single
browser that you may have to support.

5
00:00:21.020 --> 00:00:23.160
Now the good news is
ES6 has been around for

6
00:00:23.160 --> 00:00:28.520
a while it was being prototyped in
browsers all along during the spec process

7
00:00:28.520 --> 00:00:32.560
so many of the browsers that
you support all ready support

8
00:00:32.560 --> 00:00:36.670
most if not all ES 6 certainly
most of what we're covering today.

9
00:00:36.670 --> 00:00:40.181
There are a few obviously,
a few corner in each cases and things.

10
00:00:40.181 --> 00:00:45.277
But [COUGH] if you have to support
mobile or if you have to support

11
00:00:45.277 --> 00:00:50.570
older browsers, an IE11 or
Safari 5 or something like that.

12
00:00:50.570 --> 00:00:53.804
If you have to support those sorts
of browsers, the new syntax we're

13
00:00:53.804 --> 00:00:57.054
talking about like a dot,
dot operator arrow function, whatever.

14
00:00:57.054 --> 00:00:58.211
It's not going to work and

15
00:00:58.211 --> 00:01:01.560
there's no real way to like
gracefully handle that per say.

16
00:01:01.560 --> 00:01:06.187
So the typical strategy which most
of you've probably heard of, but

17
00:01:06.187 --> 00:01:11.690
the typical strategy is what we call trans
piling which is to take the ES6 code that

18
00:01:11.690 --> 00:01:17.229
you would write and to convert it into the
equivalent that would have been in ES5.

19
00:01:17.229 --> 00:01:21.427
So it's kind of like the side by side that
have already been doing, but doing that

20
00:01:21.427 --> 00:01:25.872
automatically for your code and this is a
tool that you would run, this transpilers,

21
00:01:25.872 --> 00:01:29.701
a tool that you'd run in your build
process right alongside your minifier

22
00:01:29.701 --> 00:01:34.120
right alongside the bundler tool that you
use, your Linter any of those other ones.

23
00:01:34.120 --> 00:01:38.481
Any time you do a build process, you would
package up the code in this transpiled

24
00:01:38.481 --> 00:01:42.582
form which means what's getting shipped
out to your users not the code that

25
00:01:42.582 --> 00:01:45.859
you wrote, but
rather the code that's been transpiring.

26
00:01:45.859 --> 00:01:50.269
Now the good news is that bundle of code
will work in all the browsers that you

27
00:01:50.269 --> 00:01:55.029
need to support, cuz they're gonna target
a version of JavaScript that's been

28
00:01:55.029 --> 00:01:59.390
around and standardized and
well-known for five to seven years.

29
00:01:59.390 --> 00:02:02.600
The bad news is that there's a disconnect
now between the code that's running in

30
00:02:02.600 --> 00:02:03.289
the code that you wrote.

31
00:02:04.490 --> 00:02:09.240
And whenever an error happens,
an error actually happens in the code

32
00:02:09.240 --> 00:02:14.290
that you delivered to the browser
not the code that you authored.

33
00:02:14.290 --> 00:02:19.160
So for a while now, we've had a solution
for that, it's called source maps.

34
00:02:19.160 --> 00:02:23.970
Source maps are a special kind of file
that basically is loaded by the developer

35
00:02:23.970 --> 00:02:29.980
tools of your browser on-demand or sent
along with your file if you so choose, but

36
00:02:29.980 --> 00:02:36.530
it tells the browser, okay, whenever you
see an error on line 12 in character 36,

37
00:02:36.530 --> 00:02:42.190
that's actually line 57 character
5 in the original source code.

38
00:02:42.190 --> 00:02:44.800
So, what the developer tool does
is fetch your original code.

39
00:02:45.880 --> 00:02:49.607
The original author in six code and
shows it to you in the browser instead of

40
00:02:49.607 --> 00:02:52.451
showing you the code that
actually created the errors.

41
00:02:52.451 --> 00:02:55.553
So, source maps or
a way to kind of virtually map layer on

42
00:02:55.553 --> 00:02:58.592
top of what's really happening
in a developer tools.

43
00:02:58.592 --> 00:03:02.530
I'd say that's probably
like a 90 to 95% solution.

44
00:03:03.560 --> 00:03:07.160
It's not 100% bulletproof perfect.

45
00:03:07.160 --> 00:03:10.735
It doesn't always catch all the different
nuances and things like that, and

46
00:03:10.735 --> 00:03:14.703
sometimes your transpiler does stuff that
you don't even realize that it's doing.

47
00:03:14.703 --> 00:03:19.293
Sometimes there are tricks that happen and
tricks that they play that you might be

48
00:03:19.293 --> 00:03:22.990
debugging it thinking a certain
set of code ran, and didn't.

49
00:03:22.990 --> 00:03:26.689
So, I just wanted to quickly show you
one of the tools that's most common.

50
00:03:26.689 --> 00:03:31.340
I'd I'd say, probably 98% of people
that do trans piling use a tool called

51
00:03:31.340 --> 00:03:36.063
battle and this is an online form of their
tool that they have obviously a command

52
00:03:36.063 --> 00:03:37.970
line version of the tool.

53
00:03:37.970 --> 00:03:41.944
So I just wanna quickly illustrate with
some of the code that we've already been

54
00:03:41.944 --> 00:03:45.501
talking about and you can see as I type
the ES6 version of it on the left,

55
00:03:45.501 --> 00:03:49.087
you'll see on the right what the ES5
equivalent that we're getting.

56
00:03:49.087 --> 00:03:54.102
So image if we wrote something like
function through that takes an x

57
00:03:54.102 --> 00:03:59.382
with a default value and it also
takes a ...args and all of a sudden,

58
00:03:59.382 --> 00:04:04.842
you see it start to write some other
code that we haven't I had to write and

59
00:04:04.842 --> 00:04:09.138
you see that that code is roughly
equivalent to the kind of

60
00:04:09.138 --> 00:04:12.310
code that we were already talking about.

61
00:04:12.310 --> 00:04:14.649
So you kind of see that,
it's already happening.

62
00:04:14.649 --> 00:04:19.119
So now let's say, we pop,
we call a bar function and

63
00:04:19.119 --> 00:04:25.724
we're gonna pop in another value and
then we're gonna spread out the args and

64
00:04:25.724 --> 00:04:31.530
then we're gonna pop in another value and
pass those along to a bar.

65
00:04:31.530 --> 00:04:36.119
Now bar doesn't exist yet, but
all we have to do is to find one.

66
00:04:36.119 --> 00:04:40.582
And now you see again, all of that extra
logic that really needs to happen and

67
00:04:40.582 --> 00:04:44.978
make sure that stuff's getting copied
over and sort of bullet proof spec,

68
00:04:44.978 --> 00:04:49.780
fully spec compliance stuff that you
would have to be writing yourself.

69
00:04:49.780 --> 00:04:53.323
The reason I show you this is again
to make the illustrative point.

70
00:04:53.323 --> 00:04:55.995
Both of these pieces of code
accomplish the same goal.

71
00:04:55.995 --> 00:04:59.387
In a browser that can read ES6 like my
Chrome can, I could deliver this code or

72
00:04:59.387 --> 00:05:00.600
I could deliver this code.

73
00:05:02.680 --> 00:05:05.847
But it's not so much about
the delivery that we wanna care about,

74
00:05:05.847 --> 00:05:09.723
although the delivery is the practical
thing, like how do I support browsers.

75
00:05:09.723 --> 00:05:13.868
The real question is how have we
been writing code like this for

76
00:05:13.868 --> 00:05:17.870
the last 21 years of JavaScript's history?

77
00:05:17.870 --> 00:05:21.776
And hasn't that code been failing to
properly communicate, because it's so

78
00:05:21.776 --> 00:05:23.561
cluttered up with so many details.

79
00:05:23.561 --> 00:05:24.596
It's so intertwined.

80
00:05:24.596 --> 00:05:29.019
It's so complexed with implementation
details that the actual code underneath

81
00:05:29.019 --> 00:05:32.009
the covers the stuff that we
really want to care about,

82
00:05:32.009 --> 00:05:34.233
the stuff that's over here on the left.

83
00:05:34.233 --> 00:05:35.656
We can't even see that stuff,

84
00:05:35.656 --> 00:05:38.790
cuz it's all mixed up jumbled up
together with these other things.

85
00:05:39.840 --> 00:05:41.555
That's the value of writing ES6.

86
00:05:41.555 --> 00:05:43.497
It's not about shiny new toys.

87
00:05:43.497 --> 00:05:44.861
It's not about saving characters.

88
00:05:44.861 --> 00:05:47.946
It's about making code
that gets out of the way,

89
00:05:47.946 --> 00:05:53.540
all the stuff that doesn't matter, so
we can focus on the stuff that does.

90
00:05:53.540 --> 00:05:58.810
One little note of caution here
when you look at a tool like Babel.

91
00:05:58.810 --> 00:06:02.977
There will be times where you type
in a piece of code into Babel and

92
00:06:02.977 --> 00:06:05.609
then you look at the transpiled output.

93
00:06:05.609 --> 00:06:10.181
Now I fully recommend that you ought
to do that, you ought to go and

94
00:06:10.181 --> 00:06:13.341
look and understand things or
whatever, but

95
00:06:13.341 --> 00:06:18.010
take it as a guide not as a spec
compliant one to one mapping.

96
00:06:18.010 --> 00:06:22.590
Because what Babel is doing is a very
sophisticated set of analysis on top of

97
00:06:22.590 --> 00:06:26.510
your code and they're taking
the shortest path to getting

98
00:06:26.510 --> 00:06:31.360
just your code to operate
correctly in an older environment.

99
00:06:31.360 --> 00:06:36.370
They're not necessarily adding in
all of the spec compliant details.

100
00:06:36.370 --> 00:06:40.070
Because if they can figure out that you
don't need a spec compliant detail,

101
00:06:40.070 --> 00:06:41.570
they leave it out.

102
00:06:41.570 --> 00:06:45.971
So they do all kinds of analysis to take
the shortest path and do optimizations,

103
00:06:45.971 --> 00:06:48.279
and tree shaking to eliminate dead code.

104
00:06:48.279 --> 00:06:51.854
All kinds of crazy things that they
do in their outputted code that

105
00:06:51.854 --> 00:06:55.950
is not necessarily the same equivalent
as what you might write, if you were

106
00:06:55.950 --> 00:07:00.640
trying to write spec compliment
equivalents of your own ES6 code.

107
00:07:00.640 --> 00:07:02.070
Now, I regularly get people.

108
00:07:03.150 --> 00:07:06.282
Once a month or twice a month,
I'll get somebody that will email me or

109
00:07:06.282 --> 00:07:09.684
tweet me in the be like hey, you said
this thing on one of your workshop where

110
00:07:09.684 --> 00:07:11.421
does this and Babel says different.

111
00:07:11.421 --> 00:07:14.148
[LAUGH] You must be wrong.

112
00:07:14.148 --> 00:07:16.783
The fact of the matter is that Babel's

113
00:07:16.783 --> 00:07:22.005
not tasked with producing compliant
code from a spec perspective.

114
00:07:22.005 --> 00:07:25.771
Babel's tasked with producing
code that behaves correctly and

115
00:07:25.771 --> 00:07:29.713
as performantly as possible,
that's what we want out of a tool.

116
00:07:29.713 --> 00:07:31.950
We wouldn't want a tool
that produced crappy code.

117
00:07:31.950 --> 00:07:34.569
We want it to produce the best
possible code that it could.

118
00:07:34.569 --> 00:07:39.291
So while it's informative to look at those
differences, don't necessarily take that

119
00:07:39.291 --> 00:07:42.417
as your official education
on how ES6 equivalents work,

120
00:07:42.417 --> 00:07:46.436
because they're doing a lot of analysis
that you normally wouldn't do and

121
00:07:46.436 --> 00:07:49.800
a lot of new ones that we don't
even cover in our discussions.

122
00:07:49.800 --> 00:07:52.506
Does that make sense?

123
00:07:52.506 --> 00:07:57.150
So, that's Babel I fully recommend
that you look into that tool.

124
00:07:57.150 --> 00:08:00.078
Start using that,
because what I'm teaching you about ES6,

125
00:08:00.078 --> 00:08:01.580
I want you to start using today.

126
00:08:01.580 --> 00:08:05.439
I want you to go back in and there's low
hanging fruit simple stuff like dropping

127
00:08:05.439 --> 00:08:09.260
in the dot, dot, dot operator and dropping
in a default value here and there.

128
00:08:09.260 --> 00:08:13.618
You don't have to completely remake
your entire code base from scratch with

129
00:08:13.618 --> 00:08:15.594
arrow functions and proxies, and

130
00:08:15.594 --> 00:08:19.110
all of that other crazy stuff
to get value out of the ES6.

131
00:08:19.110 --> 00:08:20.920
You can take small little parts and

132
00:08:20.920 --> 00:08:25.260
convert one idiom at a time,
one declarative form at a time.

