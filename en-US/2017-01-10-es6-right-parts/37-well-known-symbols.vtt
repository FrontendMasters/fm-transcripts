WEBVTT

1
00:00:00.000 --> 00:00:03.996
[MUSIC]

2
00:00:03.996 --> 00:00:07.633
&gt;&gt; Kevin Whinnery: The JavaScript engine
ships with a set of what are called well

3
00:00:07.633 --> 00:00:08.640
known symbols.

4
00:00:09.890 --> 00:00:13.070
They are properties on
the symbol function object.

5
00:00:13.070 --> 00:00:14.870
So you can access them there.

6
00:00:14.870 --> 00:00:19.940
So, for example, there is a special
symbol shipped at Symbol.iterator.

7
00:00:19.940 --> 00:00:25.412
There's another one called
Symbol.toStringTag.

8
00:00:25.412 --> 00:00:29.652
There's another one called
Symbol.toPrimitive.

9
00:00:29.652 --> 00:00:37.800
There's another one called
Symbol.isConcatSpreadable.

10
00:00:37.800 --> 00:00:39.610
So there's all these,
there's about a dozen or

11
00:00:39.610 --> 00:00:43.010
more of these predefined
well known symbols.

12
00:00:43.010 --> 00:00:46.760
And the purpose of them
being defined by JavaScript,

13
00:00:46.760 --> 00:00:52.380
is they are the way that JavaScript
tells you, the programmer, the meta

14
00:00:52.380 --> 00:00:56.909
hooks for
extending built in JavaScript behavior.

15
00:00:58.090 --> 00:01:02.140
So if I have any object that, for
example, is gonna be an iterable,

16
00:01:02.140 --> 00:01:04.750
it's gonna be an iterator which we're
getting ready to talk about, and

17
00:01:04.750 --> 00:01:09.310
I wanna customize the iterator,
the location on the object to

18
00:01:09.310 --> 00:01:13.670
do that at is at symbol.iterator.

19
00:01:13.670 --> 00:01:19.260
If I wanna hook to customize how a thing
is stringified whenever you call toString

20
00:01:19.260 --> 00:01:24.850
on it, I customize that at
the hook location toStringTag.

21
00:01:24.850 --> 00:01:28.920
If I want to control whether or not an
object should be spread if it's passed to

22
00:01:28.920 --> 00:01:33.690
the Concat method, I control that
with isConcatSpreadable, okay?

23
00:01:33.690 --> 00:01:34.980
Are you following me?

24
00:01:34.980 --> 00:01:37.220
These are meta extension hooks.

25
00:01:37.220 --> 00:01:37.990
That's what they really are.

26
00:01:39.420 --> 00:01:40.170
Okay.

27
00:01:40.170 --> 00:01:41.730
So these are just built in ones.

28
00:01:41.730 --> 00:01:45.530
So if we come over here to the browser,
and we ask what is

29
00:01:45.530 --> 00:01:50.130
in Symbol.iterator,
see they predefined one for us.

30
00:01:51.230 --> 00:01:52.310
We don't know what its value is,

31
00:01:52.310 --> 00:01:56.660
but it doesn't matter because that's the
special value, it's a special constant,

32
00:01:56.660 --> 00:01:59.925
if you will,
that we can use to do a meta extension.

33
00:01:59.925 --> 00:02:04.510
Symbol.isConcatSpreadable.

34
00:02:04.510 --> 00:02:05.010
Oops.

35
00:02:07.440 --> 00:02:11.359
Symbol.

36
00:02:11.359 --> 00:02:15.400
What are the other ones?

37
00:02:15.400 --> 00:02:16.870
isPrototype.

38
00:02:16.870 --> 00:02:18.130
No that's not one.

39
00:02:20.620 --> 00:02:24.630
toPrimitive is one, unscopeable is one.

40
00:02:24.630 --> 00:02:26.210
There's a bunch of them, okay.

41
00:02:26.210 --> 00:02:29.230
Like I said there's about a dozen of them.

42
00:02:29.230 --> 00:02:33.110
I'm not going to cover any of these well
known symbols in any kind of detail.

43
00:02:33.110 --> 00:02:36.700
They're covered in exquisite
detail in my ES6 book.

44
00:02:36.700 --> 00:02:40.773
But we want to zero in our attention for
the rest of today on iterators.

45
00:02:40.773 --> 00:02:43.731
That's the whole reason I talked
to you about symbols, is so

46
00:02:43.731 --> 00:02:45.547
you know what symbol.iterator is.

47
00:02:45.547 --> 00:02:46.047
Okay?

