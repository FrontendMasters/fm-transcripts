WEBVTT

1
00:00:00.000 --> 00:00:04.107
[MUSIC]

2
00:00:04.107 --> 00:00:07.511
&gt;&gt; Kyle Simpson: From here on,
we're gonna try to do sort of before and

3
00:00:07.511 --> 00:00:08.990
after comparisons.

4
00:00:08.990 --> 00:00:13.100
So what I'm really do is just
actually split my screen here.

5
00:00:14.900 --> 00:00:17.120
And we'll try to have kind of a before and

6
00:00:17.120 --> 00:00:21.640
after of each of these
features that we discuss.

7
00:00:21.640 --> 00:00:27.710
So we'll start by talking
about this kind of scenario

8
00:00:27.710 --> 00:00:33.390
which is a function that receives
a parameter that we wanna give essentially

9
00:00:33.390 --> 00:00:38.529
some kind of default value too and you've
probably seen something kind of like this.

10
00:00:39.580 --> 00:00:44.455
And we've seen that before using the OR
operator this is kind of referred to as

11
00:00:44.455 --> 00:00:48.056
the default value idiom or
the default parameter idiom.

12
00:00:48.056 --> 00:00:53.474
Usually, you see that at the top of the
function so you see one of those lines for

13
00:00:53.474 --> 00:00:58.338
each one of the parameters that you
wanna give some default value too.

14
00:00:58.338 --> 00:00:59.185
For example,

15
00:00:59.185 --> 00:01:03.709
pass in something like foo without
anything we know X is gonna end up as 42.

16
00:01:03.709 --> 00:01:07.168
But what happens if we pass in foo of 0?

17
00:01:07.168 --> 00:01:10.519
Does x end up a 0 or does it end up as 42?

18
00:01:10.519 --> 00:01:12.958
&gt;&gt; Speaker 3: [INAUDIBLE]
&gt;&gt; Kyle Simpson: If you aren't really

19
00:01:12.958 --> 00:01:15.209
aware yet of what's going on with or

20
00:01:15.209 --> 00:01:20.028
operator it does a truthy test on
the first argument, on the first operand.

21
00:01:20.028 --> 00:01:23.348
And if it's true or truthy,
it returns that operand,

22
00:01:23.348 --> 00:01:26.029
otherwise, it returns the other operand.

23
00:01:26.029 --> 00:01:30.175
So 0 is a falsey value,
meaning that it will fail and

24
00:01:30.175 --> 00:01:33.110
end up returning 42 value, okay?

25
00:01:34.630 --> 00:01:37.910
So we can't affirmatively pass in
something that's falsey like 0,

26
00:01:37.910 --> 00:01:38.990
null, undefined, etc.

27
00:01:40.130 --> 00:01:44.731
So really technically,
the long form the not cheating

28
00:01:44.731 --> 00:01:49.039
form of this is to say if X
is not equal to undefined.

29
00:01:49.039 --> 00:01:55.102
Then use X otherwise,
you use the default value, okay?

30
00:01:55.102 --> 00:02:02.713
That's really how you write the full
version of that default value ADM.

31
00:02:02.713 --> 00:02:06.298
So, if we pass in 0 now of course
we're gonna get 0, if we pass a null.

32
00:02:06.298 --> 00:02:10.080
If we passing through
without anything we get 42.

33
00:02:10.080 --> 00:02:14.370
If we also pass in undefined,
we're still gonna get 42.

34
00:02:14.370 --> 00:02:19.070
So undefined in this case becomes
the empty value and everything

35
00:02:19.070 --> 00:02:24.070
else including all becomes an actual
affirmative value that we care about.

36
00:02:24.070 --> 00:02:27.920
Undefined means I'm not passing anything
here it's like a placeholder, okay?

37
00:02:27.920 --> 00:02:31.210
My recommendation is to try to treat

38
00:02:31.210 --> 00:02:35.360
undefined in all is indistinguishable
except in this particular case we.

39
00:02:35.360 --> 00:02:42.140
We need to distinguish between undefined
in also that's what this idiom does, okay?

40
00:02:43.290 --> 00:02:47.640
The long form of that is what we would
refer to as the imperative form.

41
00:02:47.640 --> 00:02:50.449
We're telling JavaScript how
to compute the default value.

42
00:02:51.640 --> 00:02:54.874
Rather than leading with the default
values matter fact the default values all

43
00:02:54.874 --> 00:02:56.053
the way down here at the end.

44
00:02:56.053 --> 00:02:58.051
So somebody reading through this code for

45
00:02:58.051 --> 00:03:00.288
the first time unless
they recognize the ADM.

46
00:03:00.288 --> 00:03:02.544
They're gonna have to read
through all of that and

47
00:03:02.544 --> 00:03:05.995
get to the end visually before they
understand what the default value this.

48
00:03:05.995 --> 00:03:09.659
So when we set up earlier at the beginning
of the workshop this notion of imperative

49
00:03:09.659 --> 00:03:12.223
versus declarative that's
what we're gonna see here.

50
00:03:12.223 --> 00:03:14.913
And a lot of these side
by side comparisons,

51
00:03:14.913 --> 00:03:18.272
the imperative form versus
the new declarative form.

52
00:03:18.272 --> 00:03:23.696
In the S6, we now have a declarative
form which allows us to specify

53
00:03:23.696 --> 00:03:28.945
that default value right inside
the function signature, okay?

54
00:03:28.945 --> 00:03:32.254
So we don't need to do any of
that imperative processing or

55
00:03:32.254 --> 00:03:36.000
telling JavaScript if it comes
in as undefined or missing.

56
00:03:36.000 --> 00:03:38.540
Go ahead and
apply the default value to it.

57
00:03:38.540 --> 00:03:41.710
So in this case,
if we pass in foo of 0 we get 0,

58
00:03:41.710 --> 00:03:46.680
if we pass in null we get null, if we
don't pass in anything we get the 42.

59
00:03:46.680 --> 00:03:51.080
If we pass in undefined
we also get the 42, okay?

60
00:03:51.080 --> 00:03:52.592
What do think happens if I do this?

61
00:03:52.592 --> 00:03:55.631
Foo.apply.

62
00:03:55.631 --> 00:03:57.902
Don't care about my this,

63
00:03:57.902 --> 00:04:03.446
what happens if I apply an empty
array to the arguments list of foo?

64
00:04:03.446 --> 00:04:04.958
What's x gonna be?

65
00:04:04.958 --> 00:04:06.114
&gt;&gt; Speaker 3: 42.

66
00:04:06.114 --> 00:04:10.650
&gt;&gt; Kyle Simpson: 42, what happens if
I apply one with an empty slot in it?

67
00:04:10.650 --> 00:04:11.562
&gt;&gt; Speaker 3: 42.

68
00:04:11.562 --> 00:04:12.727
&gt;&gt; Kyle Simpson: Still gonna be 42.

69
00:04:12.727 --> 00:04:17.579
In all those cases, we end up
effectively passing in undefined,

70
00:04:17.579 --> 00:04:21.472
which then triggers the default algorithm,
okay?

71
00:04:21.472 --> 00:04:26.990
So pretty straightforward, we now have
the ability to declare our default values.

