WEBVTT

1
00:00:00.000 --> 00:00:04.030
[MUSIC]

2
00:00:04.030 --> 00:00:05.273
&gt;&gt; Kyle Simpson: I'm gonna
take you through a tour of

3
00:00:05.273 --> 00:00:07.450
the stuff that I think you
should pay attention to.

4
00:00:07.450 --> 00:00:10.870
But, [COUGH] by popular
demand I have to start

5
00:00:12.670 --> 00:00:17.030
by going into a feature that I really
don't think you should pay attention to.

6
00:00:18.050 --> 00:00:21.190
I wouldn't really call this a right part,

7
00:00:21.190 --> 00:00:23.050
in the sense of this
is the place to start.

8
00:00:24.360 --> 00:00:29.517
It's not objectively all bad,
there's not the zero value to it.

9
00:00:29.517 --> 00:00:33.453
But it's the place where everybody's
journey with the ES6 seems to start, so

10
00:00:33.453 --> 00:00:36.990
I'd be remiss if I didn't start your
journey with the arrow function.

11
00:00:38.270 --> 00:00:40.420
Now I want to talk about
the arrow function and

12
00:00:40.420 --> 00:00:43.330
I'm going to give you my opinions because
this is all about an opinionated guy.

13
00:00:45.140 --> 00:00:47.980
I want you to make your own decisions, but

14
00:00:47.980 --> 00:00:50.530
I want you to make those
decisions in an informed way.

15
00:00:50.530 --> 00:00:53.620
That really undergirds everything
that I do as a teacher.

16
00:00:53.620 --> 00:00:56.120
I want you to make those
decisions in an informed way.

17
00:00:56.120 --> 00:00:58.010
And, I think, a lot of times,

18
00:00:58.010 --> 00:01:01.180
people sort of just follow
whatever the hype bandwagon is.

19
00:01:01.180 --> 00:01:03.540
If every blog post out there
is using an arrow function,

20
00:01:03.540 --> 00:01:05.459
we assume we're all supposed
to use arrow function.

21
00:01:07.580 --> 00:01:10.640
So I wanna talk to you about what the
arrow function is, some of the problems

22
00:01:10.640 --> 00:01:13.480
with it, some of the reasons why it
might actually be a valid thing,

23
00:01:13.480 --> 00:01:15.330
why it exists and
where it might be useful.

24
00:01:16.550 --> 00:01:20.323
And we're actually gonna get
an exercise to practice with it.

25
00:01:20.323 --> 00:01:24.493
And I'm gonna go ahead and
predict that most, if not all of you,

26
00:01:24.493 --> 00:01:27.710
are probably not going to
be able to complete it.

27
00:01:27.710 --> 00:01:31.040
Because it turns out arrow functions
are actually a bit more complex than we've

28
00:01:31.040 --> 00:01:33.250
been admitting to ourselves.

29
00:01:33.250 --> 00:01:35.790
I accidentally created a scenario where,
myself,

30
00:01:35.790 --> 00:01:38.300
I failed it the first
two times I wrote it.

31
00:01:38.300 --> 00:01:42.420
So we'll go into that,
and we'll see the pros and

32
00:01:42.420 --> 00:01:45.380
cons in the places where an arrow
function ought to be useful.

33
00:01:45.380 --> 00:01:46.670
So what are we talking about?

34
00:01:46.670 --> 00:01:49.840
We're talking about this symbol
specifically, the fat arrow.

35
00:01:51.080 --> 00:01:55.980
It's supposed to replace that old and
busted function keyword, right?

36
00:01:55.980 --> 00:01:58.580
Because function,
what is that, eight characters?

37
00:01:58.580 --> 00:02:00.920
That's just so many characters to type.

38
00:02:00.920 --> 00:02:05.660
Let's type two characters that in the US
English keyboard require also the shift

39
00:02:05.660 --> 00:02:08.150
key to express so actually.

40
00:02:09.450 --> 00:02:11.800
How many characters,
how many keystrokes are we really saving?

41
00:02:11.800 --> 00:02:13.630
But we don't want to write
the word function, and

42
00:02:13.630 --> 00:02:17.860
we also don't want to write the word foo,
because who wants to name their functions?

43
00:02:17.860 --> 00:02:22.700
Naming sucks and we also don't want to
write the word return, cuz that sucks.

44
00:02:22.700 --> 00:02:26.853
We just want to write a nice simple arrow.

45
00:02:26.853 --> 00:02:30.594
So the equivalent is to have
this arrow function and

46
00:02:30.594 --> 00:02:35.118
it's an expression, so
it can't stand alone like a function

47
00:02:35.118 --> 00:02:39.034
declaration it's gotta get
assigned to something.

48
00:02:39.034 --> 00:02:41.860
So if we had a variable called
foo we could assign it.

49
00:02:41.860 --> 00:02:45.690
Now this open close parenthesis here,
that's the parameter list.

50
00:02:45.690 --> 00:02:49.120
And when there is one and only one
parameter like, for example, if it was x,

51
00:02:49.120 --> 00:02:51.240
then you get to just put that there.

52
00:02:51.240 --> 00:02:54.690
Without parentheses, great,
we get to get rid of our parentheses.

53
00:02:54.690 --> 00:02:57.320
You'll notice I didn't have to put
any curly braces I didn't have to put

54
00:02:57.320 --> 00:02:58.570
a return keyword.

55
00:02:58.570 --> 00:03:01.160
And if you're really super hipster,

56
00:03:01.160 --> 00:03:04.310
you could have even left off
the semicolon gone semicolonless.

57
00:03:04.310 --> 00:03:06.250
Man, you're just saving
characters all over the place.

58
00:03:08.370 --> 00:03:12.963
So this is what everybody gets
excited about with ES6 is,

59
00:03:12.963 --> 00:03:16.613
we get these nice short
concise syntactic forms.

60
00:03:16.613 --> 00:03:20.776
So is the hype well deserved?

61
00:03:20.776 --> 00:03:25.788
Now I want to talk to you about some
variations on the arrow function syntax.

62
00:03:25.788 --> 00:03:29.107
But before I even go into the details
about the variations on it,

63
00:03:29.107 --> 00:03:32.130
the fact that there are variations
is kind of the problem.

64
00:03:33.430 --> 00:03:37.880
Because there is virtually no variation
in syntax for the standard function.

65
00:03:39.680 --> 00:03:44.380
The standard function shows up
with the function keyword, a name,

66
00:03:44.380 --> 00:03:49.280
some parentheses set, a curly brace,
generally a return keyword.

67
00:03:49.280 --> 00:03:52.250
Almost no variation, whatsoever,
syntactically speaking.

68
00:03:54.350 --> 00:03:59.850
Meaning everywhere that you use that form,
there is already a built in familiarity.

69
00:04:00.960 --> 00:04:03.090
Everybody that reads your code,
looks at a function and

70
00:04:03.090 --> 00:04:04.880
knows exactly what a function does.

71
00:04:04.880 --> 00:04:08.700
Knows where the curly brace
scoping block starts and ends.

72
00:04:10.260 --> 00:04:13.640
You start introducing a new form, and you
do need to ask yourself when you're trying

73
00:04:13.640 --> 00:04:15.610
to make an apples to apples comparison.

74
00:04:15.610 --> 00:04:20.530
You need to include that question of,
is somebody going to be able to read and,

75
00:04:20.530 --> 00:04:22.970
at first glance,
still be able to understand this?

76
00:04:22.970 --> 00:04:24.190
And, also, by the way,

77
00:04:24.190 --> 00:04:30.040
ask your developers, ask your developer
self, am I gonna be able to write that?

78
00:04:30.040 --> 00:04:32.810
I saw a tweet recently
from one of the most vocal

79
00:04:32.810 --> 00:04:35.120
proponents of the arrow function.

80
00:04:35.120 --> 00:04:36.460
He was an early adopter and

81
00:04:36.460 --> 00:04:39.080
he's been writing all of his blog
posts using the arrow function.

82
00:04:39.080 --> 00:04:41.230
And he tweeted out,
this was a few months ago,

83
00:04:41.230 --> 00:04:43.794
he tweeted out he said you
know I love arrow functions.

84
00:04:43.794 --> 00:04:48.820
But my instinct,

85
00:04:48.820 --> 00:04:52.350
I can still write the word function
faster than I can write the arrow symbol.

86
00:04:52.350 --> 00:04:56.430
After years of writing the arrow function,
he still sort of sways back to,

87
00:04:56.430 --> 00:04:59.660
it's a little bit easier to just
quickly write the function key word.

88
00:04:59.660 --> 00:05:01.270
And so
he writes that then he goes back and

89
00:05:01.270 --> 00:05:04.420
he factors into the arrows or
something like that.

90
00:05:04.420 --> 00:05:08.219
So maybe it's not quite so
objectively, amazingly more readable.

91
00:05:08.219 --> 00:05:13.420
Maybe there are some caveats to
the readability of the function.

92
00:05:13.420 --> 00:05:17.690
The fact that there's a lot of variance in
syntax means that the reader of your code,

93
00:05:17.690 --> 00:05:19.980
having not already been
super familiar with this.

94
00:05:21.000 --> 00:05:24.240
And, by the way, there just aren't that
many JavaScript developers that are super

95
00:05:24.240 --> 00:05:25.650
familiar with the arrow function.

96
00:05:27.180 --> 00:05:30.494
Having not already been familiar with it,
it could create a visual stumbling block.

97
00:05:30.494 --> 00:05:33.935
Where the person starts to parse and
they realize, crap, this is a function.

98
00:05:33.935 --> 00:05:36.881
They have to go back and
sort of visually reparse it and

99
00:05:36.881 --> 00:05:39.110
think why did it need parentheses here?

100
00:05:39.110 --> 00:05:42.851
And is this returning, is it a curly
brace, do I need a parenthesis set here.

