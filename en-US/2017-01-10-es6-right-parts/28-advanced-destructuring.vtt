WEBVTT

1
00:00:00.000 --> 00:00:04.146
[MUSIC]

2
00:00:04.146 --> 00:00:06.340
&gt;&gt; Kyle Simpson: This thing I'm about to
show you is basically telling you how

3
00:00:06.340 --> 00:00:09.210
to do the exercise,
you're gonna wanna pay close attention.

4
00:00:09.210 --> 00:00:11.400
This is a huge hint, okay?

5
00:00:13.050 --> 00:00:16.920
There's one usage for destructuring
that I have found to kinda be useful.

6
00:00:16.920 --> 00:00:22.060
And it's in the case wherever I
have an object like for example

7
00:00:22.060 --> 00:00:26.860
it's maybe you've had this before, I have
an object that has some properties in it

8
00:00:26.860 --> 00:00:31.530
that represent defaults for some settings,
like maybe for an AJAX call or something.

9
00:00:32.660 --> 00:00:37.045
And then I have a config object where I'm
gonna populate only certain things that I

10
00:00:37.045 --> 00:00:38.060
wanna set.

11
00:00:38.060 --> 00:00:39.350
And what I want is for

12
00:00:39.350 --> 00:00:43.840
all the defaults to kind of get mixed in
together with the ones that I've set.

13
00:00:43.840 --> 00:00:45.550
Anybody in that scenario before?

14
00:00:45.550 --> 00:00:49.185
And you probably use some library or
frameworks like Nixon or

15
00:00:49.185 --> 00:00:53.590
jQuery extend or
I think Underscore calls that extend or

16
00:00:53.590 --> 00:00:56.670
some utility that mixes objects
together in that way, right?

17
00:00:56.670 --> 00:00:57.980
Probably done that before.

18
00:00:57.980 --> 00:01:02.310
The rub is that every framework and
utility does it slightly differently.

19
00:01:02.310 --> 00:01:03.710
Some of them go from left to right.

20
00:01:03.710 --> 00:01:05.500
Some of them for right to left.

21
00:01:05.500 --> 00:01:08.290
Some of them have different rules for
if the thing is present but

22
00:01:08.290 --> 00:01:10.240
if it's an undefined value
does it override it?

23
00:01:10.240 --> 00:01:12.370
If it's not present does it set it?

24
00:01:12.370 --> 00:01:13.980
There all these weird things
that you have to handle.

25
00:01:13.980 --> 00:01:17.290
So if you've got multiples of those
utilities hanging around it can be

26
00:01:17.290 --> 00:01:21.640
hard to remember exactly what
the behavior is of this particular

27
00:01:21.640 --> 00:01:25.230
utility in some corner case.

28
00:01:25.230 --> 00:01:29.370
The point that I'm making is, that
destructuring actually lets us do what I

29
00:01:29.370 --> 00:01:33.940
think might be a declarative form of mix
in without using any utility at all.

30
00:01:35.230 --> 00:01:38.550
So I wanna show you that pattern,
I call this pattern destructuring and

31
00:01:38.550 --> 00:01:40.219
restructuring, okay?

32
00:01:40.219 --> 00:01:45.060
So let's imagine, I'm gonna do
the left and right thing here.

33
00:01:45.060 --> 00:01:49.920
Let's imagine that I
have a couple of objects,

34
00:01:49.920 --> 00:01:58.198
I have like a defaults object that says
I'm gonna pretend in that AJAX scenario.

35
00:01:58.198 --> 00:02:03.265
Let's say I've got a default object
that's got like a method that

36
00:02:03.265 --> 00:02:09.330
defaults to post and it's a callback
that defaults to some empty function.

37
00:02:09.330 --> 00:02:15.699
And let's say it's also got a headers,

38
00:02:15.699 --> 00:02:20.944
sub object that has a content type

39
00:02:20.944 --> 00:02:27.516
that defaults to text slash play, okay?

40
00:02:27.516 --> 00:02:30.500
Just making some stuff up on the fly.

41
00:02:31.810 --> 00:02:34.394
This is my default object, okay?

42
00:02:34.394 --> 00:02:38.425
And then I'm going to somewhere else in
my code, create my config object which is

43
00:02:38.425 --> 00:02:42.060
gonna add some properties in that
don't exist in the defaults.

44
00:02:42.060 --> 00:02:45.930
But any place where defaults is there,
and it's not in the configs.

45
00:02:45.930 --> 00:02:47.880
I want that mixed in there, right?

46
00:02:47.880 --> 00:02:51.830
So that my compound or my mixed in
object has all of that stuff present.

47
00:02:51.830 --> 00:02:54.340
So I might make my config object.

48
00:02:54.340 --> 00:02:58.071
And that one's going to have a URL.

49
00:03:02.099 --> 00:03:07.390
&gt;&gt; Kyle Simpson: And I will go ahead and
set my own callback is equal to foo.

50
00:03:08.600 --> 00:03:13.500
And I'll say that I wanna add in

51
00:03:13.500 --> 00:03:18.033
headers for x-requested.

52
00:03:18.033 --> 00:03:19.826
I'm just making stuff up on, I don't know.

53
00:03:22.198 --> 00:03:24.480
&gt;&gt; Kyle Simpson: Okay, so
there's my config object.

54
00:03:24.480 --> 00:03:27.050
Now I need to mix these two together,
be with me.

55
00:03:27.050 --> 00:03:28.500
I need to mix these two together.

56
00:03:28.500 --> 00:03:31.510
I could use some kind of extend library or
utility or something.

57
00:03:31.510 --> 00:03:34.110
But I'm gonna show you how we
might do this with destructuring.

58
00:03:36.500 --> 00:03:40.535
So what we could do is,
I'm gonna create myself a block,

59
00:03:40.535 --> 00:03:42.928
an explicit blocks that I
use some block scoping.

60
00:03:42.928 --> 00:03:47.330
And I'm gonna use my let declarer,
because I'm going to create some temporary

61
00:03:47.330 --> 00:03:51.610
variables that I don't want to
pollute the outer scope, okay?

62
00:03:51.610 --> 00:03:56.490
So my temporary variable is
going to come from an object

63
00:03:56.490 --> 00:04:00.790
destructuring and what I'm going to be
destructuring is the config object.

64
00:04:02.000 --> 00:04:02.500
Are you with me?

65
00:04:04.800 --> 00:04:07.951
So what I'm gonna be doing is I have
to know in my head the union of

66
00:04:07.951 --> 00:04:10.983
all the properties that I need
to account for cuz I don't have

67
00:04:10.983 --> 00:04:14.869
a dot dot dot props thing that can collect
other ones that I don't know about.

68
00:04:14.869 --> 00:04:18.663
So in this particular case if I'm doing
this with objects I'm going to need

69
00:04:18.663 --> 00:04:22.218
to know but I know that the ones that
I've written here are the only ones

70
00:04:22.218 --> 00:04:24.450
that we care about for this example.

71
00:04:24.450 --> 00:04:25.680
So I know I need a URL.

72
00:04:26.940 --> 00:04:32.690
Either the URL will be the URL that
I've provided from the config URL or

73
00:04:32.690 --> 00:04:35.160
it might be a default
URL if there was one.

74
00:04:35.160 --> 00:04:37.060
But you'll notice I didn't specify one.

75
00:04:37.060 --> 00:04:38.400
So I'm just gonna list URL.

76
00:04:39.440 --> 00:04:41.450
I need to pull that one out.

77
00:04:41.450 --> 00:04:44.365
Meaning this is kind of required
like you have to give it, okay?

78
00:04:44.365 --> 00:04:51.625
I could also pull out the callback but
in this case, I do have a default,

79
00:04:51.625 --> 00:04:57.580
so I can set the default equal
to the defaults.callback.

80
00:04:57.580 --> 00:05:02.020
And then I'm gonna pull out headers and
this one I'm going to go ahead and

81
00:05:02.020 --> 00:05:03.390
destructure.

82
00:05:03.390 --> 00:05:12.690
So I'm going to say that
the content type is going to,

83
00:05:12.690 --> 00:05:18.740
that property name isn't a valid variable.

84
00:05:18.740 --> 00:05:21.590
So in this case I'm going to
need to give it a target.

85
00:05:21.590 --> 00:05:26.880
So I'll call it content type and
it also has a default

86
00:05:26.880 --> 00:05:32.423
which is defaults.header of content-type,
okay?

87
00:05:32.423 --> 00:05:35.172
Now I know because of my
screen resolution here

88
00:05:35.172 --> 00:05:39.200
things are getting harder to read
because I'm in these long lines.

89
00:05:39.200 --> 00:05:41.340
So I'm just gonna start
breaking some stuff out

90
00:05:42.550 --> 00:05:44.850
to help the readability a little bit.

91
00:05:44.850 --> 00:05:48.650
Okay, but now I've accounted for
that particular header is one.

92
00:05:48.650 --> 00:05:54.710
And I also know that it is possible
to pass in the x requested with.

93
00:05:54.710 --> 00:05:59.600
Even though that doesn't have a default
I need to map that to something so

94
00:05:59.600 --> 00:06:04.406
I'm gonna call that xRequestedWith, okay?

95
00:06:07.332 --> 00:06:10.020
&gt;&gt; Kyle Simpson: And
finally I need to account for method.

96
00:06:11.570 --> 00:06:16.678
Method is either going to be what I passed

97
00:06:16.678 --> 00:06:21.045
in as method or default.method.

98
00:06:21.045 --> 00:06:24.874
So I have manually accounted for
all the combinations and

99
00:06:24.874 --> 00:06:29.263
what I've done is I've taken
advantage of the built-in default

100
00:06:29.263 --> 00:06:33.270
behavior checking that already
exists in destructuring.

101
00:06:33.270 --> 00:06:35.460
I don't need to reinvent all that logic.

102
00:06:35.460 --> 00:06:39.300
It's in JavaScript and
I'm taking advantage of it.

103
00:06:39.300 --> 00:06:43.274
And I am getting a whole bunch
of individual variables.

104
00:06:43.274 --> 00:06:45.560
I'm gonna have a method variable,
a URL variable,

105
00:06:45.560 --> 00:06:49.490
a callback variable,
content type xRequestedWith.

106
00:06:49.490 --> 00:06:53.980
Those are all gonna be let declare
variables that are hidden inside of this

107
00:06:53.980 --> 00:06:55.820
outer curly brace go.

108
00:06:55.820 --> 00:06:58.130
Did I lose you entirely?

109
00:06:58.130 --> 00:07:00.050
You tracking with me, okay?

110
00:07:00.050 --> 00:07:03.440
So we've broken down our thing and
in the process of broken down.

111
00:07:03.440 --> 00:07:06.900
We've done the mixing by taking
advantage of the default idiom

112
00:07:06.900 --> 00:07:08.190
that's built into the structure.

113
00:07:09.590 --> 00:07:14.090
The last step is then to restructure, to
put all that stuff back into our object.

114
00:07:14.090 --> 00:07:17.760
So now all I have to do is
say config is equal to,

115
00:07:17.760 --> 00:07:20.920
and I need to put this
stuff back together.

116
00:07:20.920 --> 00:07:26.870
Now I need a method property so
I can say method: method.

117
00:07:26.870 --> 00:07:31.240
We haven't talked about this yet but
ES6 also gives us concise properties which

118
00:07:31.240 --> 00:07:34.690
means if they're the same we don't need to
list them twice so I can just say method.

119
00:07:36.240 --> 00:07:43.773
And then I need URL and
I need callback and

120
00:07:43.773 --> 00:07:49.978
I need a headers that's an object

121
00:07:49.978 --> 00:07:56.184
that includes content-type and

122
00:07:56.184 --> 00:08:00.640
x-requested-with.

123
00:08:00.640 --> 00:08:03.890
So now I have restructured
that object back.

124
00:08:03.890 --> 00:08:05.780
And now the two have been mixed together.

125
00:08:10.086 --> 00:08:12.279
&gt;&gt; Kyle Simpson: So
I didn't need a library method and

126
00:08:12.279 --> 00:08:16.966
I'm entirely in control at each one of
these steps of how that mixing happens.

127
00:08:16.966 --> 00:08:21.510
I don't have to rely entirely upon
the algorithm built in the library.

128
00:08:21.510 --> 00:08:26.130
I get to decide for each one of them
how that mixing logic to curse but

129
00:08:26.130 --> 00:08:29.830
also this what this really
starts to point out is

130
00:08:29.830 --> 00:08:32.630
that I don't even really need
the defaults object anymore.

131
00:08:34.050 --> 00:08:36.160
Because wouldn't make
a whole lot more sense for

132
00:08:36.160 --> 00:08:38.620
me to just go ahead an inline
those defaults right here.

133
00:08:40.742 --> 00:08:48.808
&gt;&gt; Kyle Simpson: Doesn't that make the
code a whole lot more self-explanatory?

134
00:08:55.747 --> 00:08:56.987
&gt;&gt; Kyle Simpson: And
this one doesn't have a default.

135
00:08:59.265 --> 00:09:02.101
&gt;&gt; Kyle Simpson: So now we don't even
really need to do that whole defaults

136
00:09:02.101 --> 00:09:03.710
object mixed together.

137
00:09:03.710 --> 00:09:08.080
We're just mixing the default values into
our config object using destructuring and

138
00:09:08.080 --> 00:09:08.680
restructuring.

139
00:09:12.626 --> 00:09:15.504
&gt;&gt; Kyle Simpson: That's debatable whether
or not you think this is a win, but

140
00:09:15.504 --> 00:09:19.285
I think not having to worry about some
library and some internal quirks and being

141
00:09:19.285 --> 00:09:22.920
able to do so with declarative syntax
makes the code more self documenting.

