WEBVTT

1
00:00:00.000 --> 00:00:03.901
[MUSIC]

2
00:00:03.901 --> 00:00:07.545
&gt;&gt; Kyle Simpson: So,
if we know that we can receive

3
00:00:07.545 --> 00:00:11.589
assignments without declaration.

4
00:00:11.589 --> 00:00:15.694
We can also do an interesting little
trick, it's just a little side note,

5
00:00:15.694 --> 00:00:18.180
it's not something I'm doing an awful lot.

6
00:00:18.180 --> 00:00:19.840
But you remember earlier,

7
00:00:19.840 --> 00:00:24.070
when we we're talking about using block
scoping to do that whole swapping thing.

8
00:00:24.070 --> 00:00:30.550
Remember we did let tmp
= x; x =y; y = tmp.

9
00:00:30.550 --> 00:00:31.050
Remember that?

10
00:00:32.440 --> 00:00:36.010
We can use array de-structuring
to do the swapping.

11
00:00:36.010 --> 00:00:39.550
Let's say I had an x = 10.

12
00:00:39.550 --> 00:00:42.730
And a y that was 20 and
I wanted to swap the two.

13
00:00:42.730 --> 00:00:44.760
Could do that whole block
thing that I just showed.

14
00:00:44.760 --> 00:00:51.240
Or what I could do is say,
an array de-structuring with x and y as my

15
00:00:51.240 --> 00:00:57.330
pattern should be de-structured from an
array that has them in the opposite order.

16
00:01:05.182 --> 00:01:07.510
&gt;&gt; Kyle Simpson: And
of course that's not limited to two.

17
00:01:07.510 --> 00:01:09.520
You could do as many of those
as you wanted to, right?

18
00:01:17.563 --> 00:01:23.171
&gt;&gt; Kyle Simpson: While we're on the topic
of using this array de-structuring stuff,

19
00:01:23.171 --> 00:01:26.414
If we had an a that was
an array like that.

20
00:01:28.660 --> 00:01:30.100
&gt;&gt; Kyle Simpson: We could say,
for example.

21
00:01:38.764 --> 00:01:40.924
&gt;&gt; Kyle Simpson: So, now we're
making an array, a composite array,

22
00:01:40.924 --> 00:01:43.280
I'll use spaces just to make
this a little more readable.

23
00:01:44.300 --> 00:01:46.070
We now have an array on
the right hand side,

24
00:01:46.070 --> 00:01:48.780
that has zero through four in it, right?

25
00:01:48.780 --> 00:01:54.648
And over here we could say, I want to
throw away the first two of these.

26
00:01:54.648 --> 00:01:57.889
We're going to have to make
variables to catch those,

27
00:01:57.889 --> 00:02:01.320
collect the rest of
them right back into a.

28
00:02:01.320 --> 00:02:04.190
So, that is the effect of
throwing away zero and

29
00:02:04.190 --> 00:02:08.040
one, and now a is going to have
two three four in it, okay?

30
00:02:08.040 --> 00:02:10.670
Remember our whole usage of dot,
dot, dot operator?

31
00:02:10.670 --> 00:02:12.370
It also works with our de-structuring.

32
00:02:12.370 --> 00:02:15.540
So, now we see the dot,
dot, dot on both sides.

33
00:02:15.540 --> 00:02:17.610
One on the right hand side
it's doing spreading.

34
00:02:17.610 --> 00:02:18.940
On the left hand side
it's doing gathering.

35
00:02:23.659 --> 00:02:26.929
&gt;&gt; Kyle Simpson: And we could just have
a single variable here, like that or

36
00:02:26.929 --> 00:02:30.333
underscore, or whatever other
one you wanted to use to say,

37
00:02:30.333 --> 00:02:34.110
this is just, I'm just dumping
these I don't care about, okay?

38
00:02:36.169 --> 00:02:41.032
&gt;&gt; Kyle Simpson: But you don't
even need that, because the array

39
00:02:41.032 --> 00:02:45.786
de-structuring allows
you to do empty slots.

40
00:02:52.028 --> 00:02:53.783
&gt;&gt; Kyle Simpson: So,
now if we ran this example,

41
00:02:53.783 --> 00:02:57.320
our a would be an array that had
values two three and four in it.

42
00:02:57.320 --> 00:03:00.520
Zero and one would have been done, okay?

43
00:03:00.520 --> 00:03:05.420
So, we can use our pattern de-structuring
and even more, I don't necessarily want to

44
00:03:05.420 --> 00:03:09.060
call it a tricky way, but
we can use the capabilities of it to

45
00:03:10.170 --> 00:03:14.390
take on tasks that would have been a lot
more ugly to express in imperative form.

46
00:03:16.760 --> 00:03:19.260
&gt;&gt; Speaker 2: So, I take it if you
transpired that it would just give it some

47
00:03:19.260 --> 00:03:21.879
random variable names that
never get used again?

48
00:03:24.030 --> 00:03:25.927
On those two that get tossed up.

49
00:03:29.615 --> 00:03:31.170
&gt;&gt; Speaker 2: It just slices instead.

50
00:03:31.170 --> 00:03:36.020
&gt;&gt; Kyle Simpson: See they're doing all
this analysis to figure out what's

51
00:03:36.020 --> 00:03:41.680
the simplest path, used characters,
most performant to get it.

52
00:03:41.680 --> 00:03:45.510
So, you might say, this is how I would do
it I'd make these temporary variables or

53
00:03:45.510 --> 00:03:47.740
whatever, and they're saying
we've all ready analyzed and

54
00:03:47.740 --> 00:03:51.300
figured out this is the best way to do it.

55
00:03:51.300 --> 00:03:54.324
&gt;&gt; Speaker 2: So, with the empty
slots just the white space matter, or

56
00:03:54.324 --> 00:03:55.970
is it just [CROSSTALK]
&gt;&gt; Kyle Simpson: I do that for

57
00:03:55.970 --> 00:03:58.039
readability, it doesn't matter at all.

58
00:04:12.054 --> 00:04:14.809
&gt;&gt; Kyle Simpson: There's the array
with two, three, four in it.

