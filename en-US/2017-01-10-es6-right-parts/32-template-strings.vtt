WEBVTT

1
00:00:00.000 --> 00:00:04.144
[MUSIC]

2
00:00:04.144 --> 00:00:09.188
&gt;&gt; Kyle Simpson: We're going to go back to
our little side by side adventure here and

3
00:00:09.188 --> 00:00:12.140
do some more comparison.

4
00:00:12.140 --> 00:00:17.768
We're gonna talk about a simple really,
little feature added in ES6,

5
00:00:17.768 --> 00:00:21.436
but it's one of those delightful features.

6
00:00:21.436 --> 00:00:26.360
It's not necessarily
hugely groundbreaking or

7
00:00:26.360 --> 00:00:30.380
gonna radically change the way you
approach your code or even express things.

8
00:00:30.380 --> 00:00:35.500
But it's more delightful in this sense and
that does create

9
00:00:35.500 --> 00:00:38.210
less of the visual clutter that
our readers need to deal with.

10
00:00:39.270 --> 00:00:46.146
So let's talk about a scenario like this,

11
00:00:46.146 --> 00:00:53.213
let's say that I have name= "Kyle"; and

12
00:00:53.213 --> 00:00:57.415
let's say orderNumber =

13
00:00:57.415 --> 00:01:02.005
"123"; and total =,

14
00:01:04.327 --> 00:01:09.289
&gt;&gt; Kyle Simpson: 319.72, okay,

15
00:01:09.289 --> 00:01:15.247
let's make it 319.7.

16
00:01:15.247 --> 00:01:22.290
All right, so if I were going to make
a string to print out some message.

17
00:01:22.290 --> 00:01:25.120
Say I was printing out a receipt,
if you will, it's going to

18
00:01:25.120 --> 00:01:29.730
print out some message that included
these values along with some text.

19
00:01:29.730 --> 00:01:33.220
That message might, for example,
look like this message.

20
00:01:34.720 --> 00:01:40.870
Hello name, your order,

21
00:01:40.870 --> 00:01:43.830
and, at this point,
I'm running out of line room.

22
00:01:43.830 --> 00:01:47.730
So I want to break onto the next line, so
I'm gonna do, you might have seen before,

23
00:01:47.730 --> 00:01:52.340
the trick of breaking onto multiple
lines by putting a backslash

24
00:01:52.340 --> 00:01:53.560
at the end of the line.

25
00:01:53.560 --> 00:01:56.690
Officially, that's called
a line continuation.

26
00:01:56.690 --> 00:02:01.121
So I'm gonna break onto the next line and
say your order and

27
00:02:01.121 --> 00:02:07.648
I'm going to say + orderNumber,
&gt;&gt; Kyle Simpson: was,

28
00:02:07.648 --> 00:02:10.588
and now I'm at the end of this line so

29
00:02:10.588 --> 00:02:15.810
instead of doing a line continuation
I'm just gonna do a plus.

30
00:02:15.810 --> 00:02:19.085
Go to the next one and let's go ahead and

31
00:02:19.085 --> 00:02:23.364
put the dollar sign symbol in here for
this matter.

32
00:02:23.364 --> 00:02:28.410
So your total, so I made this string,

33
00:02:28.410 --> 00:02:35.054
put some values in,
making this stuff on the fly.

34
00:02:35.054 --> 00:02:39.380
Okay, so
let's evaluate what's happening here.

35
00:02:39.380 --> 00:02:44.120
What's happening is that I am,
what is called interpolating,

36
00:02:44.120 --> 00:02:47.240
these values into the bigger string.

37
00:02:49.470 --> 00:02:51.340
That word interpolating is
not something I made up.

38
00:02:51.340 --> 00:02:53.500
That's a thing that other
people have made up,

39
00:02:53.500 --> 00:02:57.530
it's an actual feature
in certain languages.

40
00:02:57.530 --> 00:03:04.030
And we're doing so manually with strings
and string concatenation because

41
00:03:04.030 --> 00:03:08.980
up to this point, JavaScript hasn't
supported any way to do interpolation.

42
00:03:08.980 --> 00:03:12.780
So along comes ES6 and
they decide to invent this feature

43
00:03:12.780 --> 00:03:16.370
that's going to allow
us to do interpolation.

44
00:03:16.370 --> 00:03:18.320
But instead of calling it interpolation,

45
00:03:18.320 --> 00:03:22.050
they give it this other name which
is really terrible and confusing.

46
00:03:22.050 --> 00:03:25.240
They call them template strings or
template literals.

47
00:03:25.240 --> 00:03:31.400
Now the word template has a fairly
strong meaning to most people.

48
00:03:31.400 --> 00:03:33.500
And I'm willing to bet that
you listening to this.

49
00:03:33.500 --> 00:03:37.120
You're probably, when I say the word
template, what comes to your mind

50
00:03:37.120 --> 00:03:42.130
is the idea that I have
some sort of basic set of

51
00:03:42.130 --> 00:03:47.290
value that I can recreate every time and
give it new values to be inputted into it.

52
00:03:48.310 --> 00:03:50.210
So I have this thing that
I can remake over and

53
00:03:50.210 --> 00:03:52.370
over again with new data, every time.

54
00:03:52.370 --> 00:03:55.260
That's what most people think of
when they think of a template.

55
00:03:55.260 --> 00:03:58.380
So when I show you this feature and
I tell you that they called it

56
00:03:58.380 --> 00:04:00.878
template strings or
template literals you're going to think,

57
00:04:00.878 --> 00:04:04.450
I'm creating this template that I can
rerun during this and every time.

58
00:04:04.450 --> 00:04:06.850
And that's not what they
mean by the word template.

59
00:04:08.050 --> 00:04:14.400
Okay, so before and after here,
let's start out with the same vars.

60
00:04:14.400 --> 00:04:18.420
But now to create my message.

61
00:04:18.420 --> 00:04:21.850
What I'm gonna be able to do
is interpolate these variable

62
00:04:21.850 --> 00:04:24.810
expressions directly into the string.

63
00:04:24.810 --> 00:04:28.700
In PHP, you might be familiar,
if I'm recalling correctly, it's

64
00:04:28.700 --> 00:04:32.370
in double quotes if you do a dollar sign
variable name instead of a double quote,

65
00:04:32.370 --> 00:04:36.200
it automatically replaces that
with the value of that variable.

66
00:04:36.200 --> 00:04:40.950
That's automatic interpolation, so
we're gonna do something of the sort here.

67
00:04:40.950 --> 00:04:43.720
But we can't just do that inside
of double quote strings or

68
00:04:43.720 --> 00:04:48.160
even single quote strings in JavaScript
because that would break existing code.

69
00:04:48.160 --> 00:04:50.610
So we had to come up with a new syntax for

70
00:04:50.610 --> 00:04:55.560
delimiting these special kind of,
what are called template strings.

71
00:04:55.560 --> 00:04:58.810
And that new syntax is to use
a back tick instead of a single

72
00:04:58.810 --> 00:04:59.740
quote or a double quote.

73
00:05:01.630 --> 00:05:04.490
And now we don't need to do
any of that breaking out of

74
00:05:04.490 --> 00:05:05.941
the string to add it thing.

75
00:05:05.941 --> 00:05:07.440
So I'm gonna get rid of the adding.

76
00:05:11.060 --> 00:05:16.923
And what's interesting now is I don't
need to escape the end of a line

77
00:05:16.923 --> 00:05:22.801
because these are automatically
capable of bridging across lines.

78
00:05:22.801 --> 00:05:25.689
And I don't need this stuff.

79
00:05:32.401 --> 00:05:35.601
&gt;&gt; Kyle Simpson: And
I don't need that, and

80
00:05:35.601 --> 00:05:40.759
then I simply end it
with another back tick.

81
00:05:41.780 --> 00:05:45.410
So there's my new message, now,
if that was the way that it worked,

82
00:05:45.410 --> 00:05:48.450
that could also create some havoc
because how would it know if you

83
00:05:48.450 --> 00:05:52.380
really wanted the variable name replaced
or you wanted to say the word name.

84
00:05:52.380 --> 00:05:54.940
So we need to delimit these in some way.

85
00:05:54.940 --> 00:06:00.010
And the way JavaScript chose to delimit
them is to wrap dollar sign curly brace

86
00:06:00.010 --> 00:06:06.810
around the expression that we want
to be interpreted and interpolated.

87
00:06:06.810 --> 00:06:12.325
So we would say ${orderNumber} and

88
00:06:12.325 --> 00:06:17.210
${total} notice those two dollar
signs there the first dollar sign

89
00:06:17.210 --> 00:06:18.905
is left entirely alone.

90
00:06:18.905 --> 00:06:22.220
It's only going to pay attention
to a dollar sign curly brace.

91
00:06:22.220 --> 00:06:27.380
So if you wanted to do a dollar sign curly
brace that wasn't part of the delimiter,

92
00:06:27.380 --> 00:06:29.170
you just have to backslash
the dollar sign.

93
00:06:31.520 --> 00:06:37.644
So now we have this string which I
can break across multiple lines and

94
00:06:37.644 --> 00:06:42.371
I can automatically
interpolate those expressions

95
00:06:42.371 --> 00:06:45.497
directly into my string literal.

96
00:06:45.497 --> 00:06:50.589
Now, the difference here
is going to be subtle, but

97
00:06:50.589 --> 00:06:57.320
while we're talking about it,
we should go ahead and talk about it.

98
00:06:58.710 --> 00:07:03.058
Have any of you ever heard before
the notion of the phrase of

99
00:07:03.058 --> 00:07:04.849
a multi-line string?

100
00:07:04.849 --> 00:07:10.660
Okay this phrase is often used in
programming, but it's used imprecisely.

101
00:07:10.660 --> 00:07:13.000
We're actually pretty famous
about this as developers.

102
00:07:13.000 --> 00:07:14.290
We use these different words and

103
00:07:14.290 --> 00:07:17.200
people mean slightly
different things by the term.

104
00:07:17.200 --> 00:07:21.720
And it propagates so much that
actually it turns out that the word

105
00:07:21.720 --> 00:07:25.490
hardly means anything because it means so
many different things to different people.

106
00:07:25.490 --> 00:07:27.860
So I just want to provide
some clarity on this.

107
00:07:27.860 --> 00:07:33.213
There is such a thing as a string that
is continued on to multiple lines.

108
00:07:33.213 --> 00:07:35.970
And there is such a thing
as a multi-line string.

109
00:07:35.970 --> 00:07:38.990
And I'm going to assert that those
two things are distinct concepts.

110
00:07:41.200 --> 00:07:45.330
So a string that continues across multiple
lines would be like what we see here,

111
00:07:45.330 --> 00:07:49.450
which is that I do a string continuation
or a line continuation at the end.

112
00:07:49.450 --> 00:07:53.290
And I come out over here, and if I were
to run this code in the browser and

113
00:07:53.290 --> 00:07:55.360
print it out, let's look at what happens.

114
00:07:57.510 --> 00:08:03.520
If I run this over here in my console,
and print out message.

115
00:08:03.520 --> 00:08:06.570
I get one string all in one line,
everybody with me?

116
00:08:08.220 --> 00:08:13.680
But, people will call
this a multi-line string.

117
00:08:14.880 --> 00:08:18.890
Well, there's not actually multiple
lines in the string value.

118
00:08:18.890 --> 00:08:20.240
So it's not really a multi-line,

119
00:08:20.240 --> 00:08:23.710
string it's a string that
continued to cross multiple lines.

120
00:08:23.710 --> 00:08:26.420
The nuance that I'm trying to get
here will make more sense in just

121
00:08:26.420 --> 00:08:31.260
a moment when I talk to you about the
template strings, the template literals.

122
00:08:31.260 --> 00:08:35.020
But it's important to know that this one
does not include the new line because we

123
00:08:35.020 --> 00:08:37.850
are escaping the new
line that we put there.

124
00:08:37.850 --> 00:08:40.820
So it's leaving it out of
the string value, you with me.

125
00:08:43.870 --> 00:08:46.760
Now let's talk about template literals.

126
00:08:52.690 --> 00:08:57.625
If I were to take this code and
come over here to my console and run it.

127
00:08:57.625 --> 00:09:00.207
And then ask for what's in msg.

128
00:09:00.207 --> 00:09:01.620
Did you notice anything different?

129
00:09:03.870 --> 00:09:06.130
Now I actually have a new
line in that location,

130
00:09:06.130 --> 00:09:08.320
which is why it prints
across two separate lines.

131
00:09:09.770 --> 00:09:16.550
So what I would argue is that a template
literal or a template string is in fact,

132
00:09:16.550 --> 00:09:21.210
if you put it there, a multi-line string,
a string that preserves those new lines.

133
00:09:21.210 --> 00:09:25.671
Whereas the old school JavaScript strings
with line continuations are just simply

134
00:09:25.671 --> 00:09:27.592
strings that span multiple lines.

135
00:09:29.302 --> 00:09:32.945
&gt;&gt; Kyle Simpson: We get a difference here,
if you didn't want that string there,

136
00:09:32.945 --> 00:09:36.800
I mean, if you didn't want that new line,
you'd have to escape it.

137
00:09:37.910 --> 00:09:40.049
In which case it's not gonna be present.

138
00:09:41.960 --> 00:09:46.190
But by themselves,
without any doing of that escaping,

139
00:09:46.190 --> 00:09:49.340
you're gonna get a real multi-line
string with a template literal, whereas,

140
00:09:49.340 --> 00:09:51.680
with regular strings you don't, yes?

141
00:09:51.680 --> 00:09:55.993
&gt;&gt; Speaker 2: Do you know [COUGH] for
the spec, does that insert a slash n or

142
00:09:55.993 --> 00:09:57.501
is it OS dependent?

143
00:09:57.501 --> 00:09:59.770
&gt;&gt; Kyle Simpson: It's
actually the back slash n.

144
00:09:59.770 --> 00:10:01.487
&gt;&gt; Speaker 2: Okay, always?

145
00:10:01.487 --> 00:10:06.472
&gt;&gt; Kyle Simpson: Yeah, the standardized
one, all right so just a little nuance for

146
00:10:06.472 --> 00:10:08.350
you to pay attention to.

147
00:10:08.350 --> 00:10:11.810
If you're going to break your strings
across multiple lines and not escape them

148
00:10:11.810 --> 00:10:15.770
you're gonna get actual multi-line strings
which may or may not be what you want.

149
00:10:15.770 --> 00:10:19.210
You should be careful about that, okay?

150
00:10:19.210 --> 00:10:24.060
All right, so now let's talk
about why this is bad to call

151
00:10:24.060 --> 00:10:29.040
this a template literal or a template
string, why is this a bad name for it?

152
00:10:29.040 --> 00:10:32.590
Well, it implies that msg is a template,

153
00:10:33.640 --> 00:10:37.610
that can sort of be re-rendered
with different data.

154
00:10:37.610 --> 00:10:41.256
But msg here is an actual
legitimate real string value.

155
00:10:41.256 --> 00:10:45.420
The back tics here are a way
to do a string literal

156
00:10:45.420 --> 00:10:47.120
that is evaluated immediately.

157
00:10:47.120 --> 00:10:49.900
And then it's done and
it's never reevaluated ever again.

158
00:10:49.900 --> 00:10:53.360
It's kind of like an iffy, it just
runs right away and then it's done.

159
00:10:54.940 --> 00:10:57.980
So the way most people think
about templates with reuse

160
00:10:57.980 --> 00:10:59.350
as part of the definition.

161
00:10:59.350 --> 00:11:00.959
These are not reusable in that sense.

162
00:11:02.270 --> 00:11:05.940
You could wrap them in a function and
call a function.

163
00:11:05.940 --> 00:11:10.090
And every time get back a new
string from a new template literal.

164
00:11:10.090 --> 00:11:13.930
But now the function becomes the template
not the string value, you with me?

165
00:11:15.330 --> 00:11:18.100
So I and several others have.

166
00:11:18.100 --> 00:11:20.610
Regularly called out,
this is a bad name for these.

167
00:11:20.610 --> 00:11:21.800
Template literals,

168
00:11:21.800 --> 00:11:25.580
any usage of the word template here is
going to be confusing and misleading.

169
00:11:25.580 --> 00:11:30.660
We brought these objections up a while
back, but the spec was too far along and

170
00:11:30.660 --> 00:11:33.050
nobody seemed to care about
actually changing anything.

171
00:11:33.050 --> 00:11:36.849
So it landed in the strut spec as
template literals and template strings or

172
00:11:36.849 --> 00:11:38.030
something like that.

173
00:11:38.030 --> 00:11:39.610
So it's kind of annoying, but

174
00:11:39.610 --> 00:11:44.210
I prefer to call these what they really
are, just interpolated string literals.

175
00:11:46.290 --> 00:11:49.230
Call me crazy,
I like to call an apple an apple, right?

176
00:11:49.230 --> 00:11:51.630
That's what it is,
it's an interpolated string literal.

177
00:11:53.320 --> 00:11:56.340
Interpolated string literal
is a big ole mouthful.

178
00:11:56.340 --> 00:12:00.340
So one day about a year and a half
ago I was tweeting with Brendan Eich,

179
00:12:00.340 --> 00:12:03.190
as I do, because he and
I are best buddies.

180
00:12:04.570 --> 00:12:07.810
He's a cool guy, anyway I was tweeting
with Brendan Eich about this and

181
00:12:07.810 --> 00:12:12.023
I was kind of, because I've been kind of
tweet complaining about template literals

182
00:12:12.023 --> 00:12:14.590
and what a bad name that was.

183
00:12:14.590 --> 00:12:17.100
And surprisingly he kind
of agreed with me that

184
00:12:17.100 --> 00:12:19.580
yeah there can be some confusion
around that word template.

185
00:12:20.650 --> 00:12:25.620
So we kind of decided in
that Twitter conversation,

186
00:12:25.620 --> 00:12:26.820
that if you wanna be a cool kid and

187
00:12:26.820 --> 00:12:31.790
you wanna use the right name but you want
like a cool like hip sounding name for it.

188
00:12:31.790 --> 00:12:34.695
You don't wanna say interpolated
string literal you can just call them

189
00:12:34.695 --> 00:12:35.682
interpoliterals.

190
00:12:35.682 --> 00:12:39.250
So I kinda like that, interpoliterals,
it's kind of a cool word.

191
00:12:39.250 --> 00:12:41.440
Anyway maybe you don't think that's funny,

192
00:12:41.440 --> 00:12:43.400
maybe you haven't had enough coffee
this afternoon, I don't know.

193
00:12:44.654 --> 00:12:49.540
Interpoliterals, interpolated string
literals, whatever you want to call them.

194
00:12:49.540 --> 00:12:55.020
Okay, so these are nice like I said just
in sort of a basic feature, it's kind

195
00:12:55.020 --> 00:12:59.400
of delightful to have a little bit easier
syntax for dealing with our strings.

196
00:12:59.400 --> 00:13:01.660
Your error messages, your whatever.

197
00:13:01.660 --> 00:13:04.370
I'm not at all suggesting as some do,

198
00:13:04.370 --> 00:13:08.420
that you ought to do all your HTML
structuring inside of your JavaScript.

199
00:13:08.420 --> 00:13:10.207
I am actually very anti that.

200
00:13:10.207 --> 00:13:13.168
There are a lot of times that we do string
constructions of error messages and

201
00:13:13.168 --> 00:13:14.150
other things like that.

202
00:13:14.150 --> 00:13:17.857
Any time you're doing any kind of
string construction a template literal.

203
00:13:17.857 --> 00:13:22.848
An interpoliteral is going

204
00:13:22.848 --> 00:13:27.839
to be more helpful for you,

205
00:13:27.839 --> 00:13:32.400
questions about those?

206
00:13:32.400 --> 00:13:35.330
A question in the chat was,
can this be anything?

207
00:13:35.330 --> 00:13:38.915
Yeah, and actually I meant to say this,
right now I'm using a variable name,

208
00:13:38.915 --> 00:13:41.680
it's any valid JavaScript expression.

209
00:13:41.680 --> 00:13:44.800
So you could put an entire
JavaScript program inside of

210
00:13:44.800 --> 00:13:47.136
the expression if that's what you wanted.

211
00:13:47.136 --> 00:13:49.814
As a matter of fact,
as crazy as this sounds,

212
00:13:49.814 --> 00:13:53.266
I have had a couple of occasions
where I did an interpolated

213
00:13:53.266 --> 00:13:57.790
literal inside of the expression inside
of another interpolated literal.

214
00:13:57.790 --> 00:14:04.230
So you can go, it's turtles all the way
down you go down as far as you need to go.

215
00:14:04.230 --> 00:14:05.710
Okay but most of the time,

216
00:14:05.710 --> 00:14:09.890
probably 99% of the time, you're gonna see
them just as regular JavaScript variables.

