WEBVTT

1
00:00:00.000 --> 00:00:04.047
[MUSIC]

2
00:00:04.047 --> 00:00:08.210
&gt;&gt; Kyle Simpson: So
let's reset back to the case with objects.

3
00:00:09.510 --> 00:00:15.050
And a lot of this is gonna start to
be more self-explanatory now cuz you

4
00:00:15.050 --> 00:00:18.240
already know what to expect because
we've seen it with the arrays,

5
00:00:18.240 --> 00:00:21.240
a lot of the same things
are gonna be true.

6
00:00:21.240 --> 00:00:26.161
We could have done this

7
00:00:26.161 --> 00:00:31.082
as tmp.a and tmp.b,

8
00:00:31.082 --> 00:00:36.070
and tmp.c, okay?

9
00:00:36.070 --> 00:00:41.320
That would have been
the pre ESX equivalent.

10
00:00:41.320 --> 00:00:48.492
Now what we can do is take this function.
&gt;&gt; Kyle Simpson: And

11
00:00:48.492 --> 00:00:50.701
we can do an object destructuring, so

12
00:00:50.701 --> 00:00:54.850
I'm gonna do an object pattern with
curly braces instead of brackets.

13
00:00:56.640 --> 00:00:58.860
And in my object pattern.

14
00:00:58.860 --> 00:01:05.116
I'm going to say,
I want the a property to be targeted to

15
00:01:05.116 --> 00:01:11.299
an a assignment location.

16
00:01:11.299 --> 00:01:15.763
Okay, and I want b to go to b and
I want c to go to c.

17
00:01:23.389 --> 00:01:24.673
&gt;&gt; Kyle Simpson: In the case where

18
00:01:24.673 --> 00:01:28.510
our target and our source are the same.

19
00:01:28.510 --> 00:01:30.990
Meaning, we don't need to do any alias or
renaming.

20
00:01:32.030 --> 00:01:34.040
We do not have to specify them twice.

21
00:01:35.300 --> 00:01:38.580
They can just simply say, ABC.

22
00:01:38.580 --> 00:01:43.960
It will assume that means go
get the property of name a and

23
00:01:43.960 --> 00:01:46.744
assign it to a lock symbol
variable called a, okay.

24
00:01:49.170 --> 00:01:54.790
But if we wanted to for example,
reassigned the b property.

25
00:01:54.790 --> 00:01:57.220
Instead to a variable called capital X.

26
00:01:57.220 --> 00:02:02.060
We now have declared an a variable,
an x variable, and a c variable but

27
00:02:02.060 --> 00:02:02.760
not a b variable.

28
00:02:03.900 --> 00:02:06.330
You with me?
&gt;&gt; Speaker 2: So

29
00:02:06.330 --> 00:02:09.090
the x is actually the target.
&gt;&gt; Kyle Simpson: Correct.

30
00:02:09.090 --> 00:02:09.930
&gt;&gt; Speaker 2: Not the soldiers?

31
00:02:09.930 --> 00:02:10.455
&gt;&gt; Kyle Simpson: Correct.

32
00:02:10.455 --> 00:02:12.690
&gt;&gt; Speaker 2: Interesting.

33
00:02:12.690 --> 00:02:14.090
&gt;&gt; Kyle Simpson: The way to remember this,

34
00:02:14.090 --> 00:02:18.290
is that with object literals,
the property name is always on the left.

35
00:02:18.290 --> 00:02:21.408
With object destructuring,
property name's always on the left.

36
00:02:33.003 --> 00:02:34.423
&gt;&gt; Kyle Simpson: These can of course also

37
00:02:34.423 --> 00:02:37.330
have default value assignments.

38
00:02:37.330 --> 00:02:41.725
So the equivalent from over there,
we just add on the equals.

39
00:02:41.725 --> 00:02:46.354
All right, with or without the colon,
we can add on the equals.

40
00:02:58.830 --> 00:03:00.154
&gt;&gt; Kyle Simpson: Same thing applies here

41
00:03:00.154 --> 00:03:04.265
If we return something that was not
an object, could have a failure here.

42
00:03:06.515 --> 00:03:11.430
So our little guard is to put
an empty object to be destructured in

43
00:03:11.430 --> 00:03:14.806
the case where something falsey came back.

44
00:03:22.737 --> 00:03:23.663
&gt;&gt; Kyle Simpson: Of course,

45
00:03:23.663 --> 00:03:28.090
if our pattern doesn't account for
a property.

46
00:03:28.090 --> 00:03:28.950
No big deal.

47
00:03:28.950 --> 00:03:31.240
That property just doesn't
get worried about.

48
00:03:31.240 --> 00:03:34.660
If our pattern accounts for
a property that doesn't exist.

49
00:03:34.660 --> 00:03:37.671
We end up getting a variable
that's just undefined because

50
00:03:37.671 --> 00:03:39.776
we accessed the d
property on an object and

51
00:03:39.776 --> 00:03:45.076
it didn't have one.
&gt;&gt; Kyle Simpson: Question

52
00:03:45.076 --> 00:03:49.410
in the chat is shouldn't X and
b be switched in order?

53
00:03:49.410 --> 00:03:50.740
No.

54
00:03:50.740 --> 00:03:52.210
This is how it works.

55
00:03:52.210 --> 00:03:53.870
Property name is always on the left.

56
00:03:53.870 --> 00:03:55.490
That's the easiest way.

57
00:03:55.490 --> 00:03:57.030
We can get it in nuances of grammar.

58
00:03:57.030 --> 00:03:59.990
And there's ways to twist your
brain into thinking it's backwards.

59
00:03:59.990 --> 00:04:03.590
I have found from my teaching experience
and from my personal dev experience.

60
00:04:03.590 --> 00:04:06.080
The way to keep this
straight in your mind.

61
00:04:06.080 --> 00:04:08.450
Is to think,
whenever I make an object literal,

62
00:04:08.450 --> 00:04:11.500
the object property is always on
the left and then there's a colon.

63
00:04:11.500 --> 00:04:16.320
When I make an object destructuring,
the property names always on the left.

64
00:04:16.320 --> 00:04:19.660
Now property name and
value have or target and source

65
00:04:19.660 --> 00:04:24.490
have different meanings those get flip
semantically between the two contexts.

66
00:04:24.490 --> 00:04:27.550
But the thing that stays the same in the
easiest way to keep this straight in your

67
00:04:27.550 --> 00:04:32.020
brain, proper names always on the left.
&gt;&gt; Speaker 2: That makes sense when you

68
00:04:32.020 --> 00:04:33.160
think about the fact that,

69
00:04:33.160 --> 00:04:37.190
that's you know at least in this case you
have the var there and that's your target.

70
00:04:37.190 --> 00:04:38.570
Because that's why I asked it first,

71
00:04:38.570 --> 00:04:42.410
because I was like well how can you
have ABC on the right hand side

72
00:04:42.410 --> 00:04:46.650
when those aren't like existing
properties and the answer is you don't.

73
00:04:46.650 --> 00:04:48.175
You're creating those.
&gt;&gt; Kyle Simpson: Yup.

74
00:04:48.175 --> 00:04:49.439
&gt;&gt; Speaker 2: Otherwise I would have

75
00:04:49.439 --> 00:04:51.301
expected to be like the string A or

76
00:04:51.301 --> 00:04:53.240
something to grab that property.

77
00:04:53.240 --> 00:04:57.534
&gt;&gt; Kyle Simpson: Yeah.
&gt;&gt; Speaker 2: So

78
00:04:57.534 --> 00:05:01.880
if I wanted to use that structured object,
I would just give it a name.

79
00:05:01.880 --> 00:05:04.360
Then I could use it for

80
00:05:04.360 --> 00:05:07.640
whatever I needed it for.
&gt;&gt; Kyle Simpson: You mean you wanted to

81
00:05:07.640 --> 00:05:10.850
capture the object and also the structure.
&gt;&gt; Speaker 2: Let's say,

82
00:05:10.850 --> 00:05:15.690
I want to do structure the return
value from foo and then

83
00:05:15.690 --> 00:05:19.190
store that in a variable to use later.
&gt;&gt; Kyle Simpson: Okay,

84
00:05:19.190 --> 00:05:21.310
that sentence doesn't make sense.

85
00:05:21.310 --> 00:05:23.570
Once it's destructured
it's no longer an object.

86
00:05:23.570 --> 00:05:25.570
It's a bunch of individual assignments.

87
00:05:25.570 --> 00:05:29.550
You could capture the actual object
that came back from foo [COUGH] and

88
00:05:29.550 --> 00:05:31.699
then also destructure it, but
you can't do it the other way around.

89
00:05:32.820 --> 00:05:37.356
So if you wanted to do the form
of those which is to capture

90
00:05:37.356 --> 00:05:41.505
a reference to it you could
have an obj somewhere and

91
00:05:41.505 --> 00:05:45.041
you could say,
&gt;&gt; Kyle Simpson: So

92
00:05:45.041 --> 00:05:47.751
now obj is gonna be made
a reference to the object and

93
00:05:47.751 --> 00:05:51.040
then the object reference comes back and
gets destructured.

94
00:05:51.040 --> 00:05:53.890
So now we have both the object and

95
00:05:55.600 --> 00:05:59.590
the destructuring assignments from it.
&gt;&gt; Speaker 2: Is this similar

96
00:05:59.590 --> 00:06:03.110
to the array destructuring where
you could technically switch those?

97
00:06:03.110 --> 00:06:06.530
Like does the object destructuring
also return the whole object?

98
00:06:06.530 --> 00:06:07.254
&gt;&gt; Kyle Simpson: Yes, they

99
00:06:07.254 --> 00:06:08.340
do.
&gt;&gt; Speaker 2: Okay.

100
00:06:08.340 --> 00:06:09.458
&gt;&gt; Kyle Simpson: What's also true

101
00:06:09.458 --> 00:06:13.933
is that if you switched them, your var
is gonna apply to the first one and

102
00:06:13.933 --> 00:06:15.882
not the second one but, yeah.

103
00:06:15.882 --> 00:06:20.802
Destructuring both arrays and
objects always returns the full thing

104
00:06:20.802 --> 00:06:23.710
that's being destructured.
&gt;&gt; Speaker 2: I don't suppose there's

105
00:06:23.710 --> 00:06:28.370
anything built in right now similar to
a rest for the arrays where you could get

106
00:06:28.370 --> 00:06:31.390
all the other properties of the object?
&gt;&gt; Kyle Simpson: That's what we're talking

107
00:06:31.390 --> 00:06:35.650
about When we say there's a stage
two proposal for object spread and

108
00:06:35.650 --> 00:06:36.960
object gather.

109
00:06:36.960 --> 00:06:39.530
This would be where you'd
want an object gather.

110
00:06:39.530 --> 00:06:41.900
But then what does exactly that mean?

111
00:06:41.900 --> 00:06:43.090
There's a lot of weirdness and

112
00:06:43.090 --> 00:06:46.060
specially when we start thinking about
prototype chains and stuff like that.

113
00:06:47.130 --> 00:06:50.070
What if I gather it into
an object that already has a read

114
00:06:50.070 --> 00:06:51.420
only property higher up in.

115
00:06:51.420 --> 00:06:52.880
It's all kinds of craziness about it.

116
00:06:52.880 --> 00:06:56.340
But they're working through that spec
process to figure out whether or

117
00:06:56.340 --> 00:06:57.410
not it's something that can happen.

118
00:06:57.410 --> 00:06:59.642
And I think there's a good
chance it lands at some point.

119
00:07:03.724 --> 00:07:04.975
&gt;&gt; Kyle Simpson: [COUGH] All right,

120
00:07:04.975 --> 00:07:10.406
I'm gonna take up the object one just so
or have a little less noise here but a.

