WEBVTT

1
00:00:00.000 --> 00:00:03.903
[MUSIC]

2
00:00:03.903 --> 00:00:07.546
&gt;&gt; Kyle Simpson: One last
little note on the for keyword,

3
00:00:07.546 --> 00:00:13.237
specifically this particular
usage as it applies to closure.

4
00:00:13.237 --> 00:00:15.316
If you're not terribly
familiar with closure,

5
00:00:15.316 --> 00:00:19.440
I cover that in my advanced JavaScript
class, also the Scope and Closure book.

6
00:00:19.440 --> 00:00:23.000
Closures allowing a function to
remember variables from outside it,

7
00:00:23.000 --> 00:00:24.280
even when it runs elsewhere.

8
00:00:24.280 --> 00:00:26.419
So let's say you have some example,

9
00:00:26.419 --> 00:00:30.017
like you're setting up some
click handlers on some buttons.

10
00:00:30.017 --> 00:00:35.641
It's like button+i .click, and
then you're setting up these click

11
00:00:35.641 --> 00:00:38.743
handlers that are supposed to print out

12
00:00:45.666 --> 00:00:47.330
&gt;&gt; Kyle Simpson: What's been clicked,
okay?

13
00:00:48.330 --> 00:00:49.290
Sounds all well and good,

14
00:00:49.290 --> 00:00:52.745
until you realize there's
only one i when we use a var.

15
00:00:52.745 --> 00:00:55.140
If we have a var here,
there's only one i, so

16
00:00:55.140 --> 00:00:58.555
every one of those click handlers
is gonna close over the same i.

17
00:00:58.555 --> 00:01:02.276
They're all gonna print out i 10 cuz
that's the value of i at the end of this

18
00:01:02.276 --> 00:01:05.320
for loop, unless it gets changed
to something else, right?

19
00:01:07.050 --> 00:01:11.190
But if we make a let keyword,
is that making only one i?

20
00:01:11.190 --> 00:01:15.520
Turns out there's another little
subtlety of JavaScript ES6.

21
00:01:15.520 --> 00:01:18.865
That it actually creates a whole new i for
each iteration.

22
00:01:18.865 --> 00:01:22.602
So there's gonna be ten separate i's
created, each one with the correct value,

23
00:01:22.602 --> 00:01:26.410
and our inner functions here are going
to be closing over that i value.

24
00:01:26.410 --> 00:01:28.120
Functions or arrow functions, either way,

25
00:01:28.120 --> 00:01:30.754
they all behave lexically
with closure the same way.

26
00:01:30.754 --> 00:01:33.320
They're gonna close over that
i value the way that we expect

27
00:01:33.320 --> 00:01:34.740
them to close over the i value.

28
00:01:35.930 --> 00:01:37.904
So if we click button three,

29
00:01:37.904 --> 00:01:42.680
it's gonna say i three.
&gt;&gt; Speaker 2: Is that only if you

30
00:01:42.680 --> 00:01:46.770
have the let keyword within the for loop?
&gt;&gt; Kyle Simpson: It's only in the for

31
00:01:46.770 --> 00:01:48.860
header that it will
automatically create it.

32
00:01:48.860 --> 00:01:52.518
Another way of getting around that,
if you wanted to use a var here for

33
00:01:52.518 --> 00:01:53.599
some other reason.

34
00:01:53.599 --> 00:01:58.409
Another way of getting around that is to
make your own inside of the for loop,

35
00:01:58.409 --> 00:02:03.399
so let j = i, and then close over j.
&gt;&gt; Kyle Simpson: Either

36
00:02:03.399 --> 00:02:06.410
way you'll accomplish the same thing,
okay?

37
00:02:06.410 --> 00:02:09.380
So block scoping can actually be
useful for dealing with closures, and

38
00:02:09.380 --> 00:02:15.419
in the cases specifically of for loops.
&gt;&gt; Kyle Simpson: One

39
00:02:15.419 --> 00:02:19.050
last thing before we move on to const.

40
00:02:19.050 --> 00:02:20.910
Again, stylistic suggestion here.

41
00:02:21.990 --> 00:02:27.450
There was a form of the let keyword
in Firefox more than a decade ago and

42
00:02:27.450 --> 00:02:28.870
it looked like this.

43
00:02:28.870 --> 00:02:34.380
Instead of having a let
keyword like let x = 2,

44
00:02:34.380 --> 00:02:38.940
you did let x = 2 with parentheses and
you made a block.

45
00:02:38.940 --> 00:02:41.050
And now this block had x inside of it.

46
00:02:41.050 --> 00:02:45.420
It's called the let block form
instead of the let declaration form.

47
00:02:45.420 --> 00:02:49.140
I actually think this one is more
preferable, syntactically speaking,

48
00:02:49.140 --> 00:02:53.160
because what we've done now is
create an explicit block for

49
00:02:53.160 --> 00:02:55.490
no other purpose than being a scope.

50
00:02:55.490 --> 00:02:58.650
The let declaration is actually
an implicit form because it

51
00:02:58.650 --> 00:03:04.250
hijacks an existing if or for loop and
turns it into a block of scope.

52
00:03:04.250 --> 00:03:06.777
Meaning if you have a big
old thousand lines of code,

53
00:03:06.777 --> 00:03:09.890
and you're trying to figure out is this
thing a scope, you're gonna have to scan

54
00:03:09.890 --> 00:03:12.160
through every line of the code and
see if you find a let somewhere.

55
00:03:13.240 --> 00:03:17.590
It's implicit, right, it's more mental tax
for you to juggle to try to figure out.

56
00:03:17.590 --> 00:03:18.565
It's not impossible.

57
00:03:18.565 --> 00:03:22.360
It's just more work for you to do and
I'd like you to do less work if possible.

58
00:03:22.360 --> 00:03:24.380
And I'd like your readers
to do less work as well.

59
00:03:25.510 --> 00:03:28.630
So I think the explicit form here is
a little bit more preferable because it

60
00:03:28.630 --> 00:03:32.260
makes very clear this isn't doing
anything other than being a scope.

61
00:03:32.260 --> 00:03:37.054
Even if I was doing that
inside of an if statement,

62
00:03:37.054 --> 00:03:41.507
I would still think having
an explicit block is

63
00:03:41.507 --> 00:03:45.285
better than an implicit block, okay?

64
00:03:45.285 --> 00:03:47.760
It's my own personal taste.

65
00:03:47.760 --> 00:03:51.530
Unfortunately, this particular
form was rejected by TC39,

66
00:03:51.530 --> 00:03:54.880
not just rejected like nah but
rejected with prejudice,

67
00:03:54.880 --> 00:03:58.744
like you are a bad person Kyle for
asking us to put this in the spec.

68
00:03:58.744 --> 00:03:59.590
And I'm not making that up.

69
00:03:59.590 --> 00:04:03.340
There was a little discussion
thread where they yelled at me for

70
00:04:03.340 --> 00:04:05.340
asking to put this in the spec.

71
00:04:05.340 --> 00:04:09.310
So this doesn't exist in the spec, but
the next best thing is to do what we've

72
00:04:09.310 --> 00:04:13.990
done forever in every other language which
is to just open up a curly brace pair and

73
00:04:13.990 --> 00:04:16.060
make an explicit block for that scope.

74
00:04:17.380 --> 00:04:19.090
Every other languages use curly braces.

75
00:04:19.090 --> 00:04:20.338
We've never seen that in JavaScript.

76
00:04:20.338 --> 00:04:22.857
I think you should,
I think you should put curly braces and

77
00:04:22.857 --> 00:04:24.099
make your explicit blocks.

78
00:04:25.860 --> 00:04:29.681
The only exception I'd make to that is
that for loop with the for let i thing,

79
00:04:29.681 --> 00:04:32.447
because that's so helpful for
helping with closure.

80
00:04:32.447 --> 00:04:35.830
But in all other cases I think being
more explicit is more helpful.

81
00:04:37.830 --> 00:04:41.400
So this is a syntactic form that
allows us to do an explicit block, and

82
00:04:41.400 --> 00:04:44.830
yes by the way, I intentionally
put it all in the same line.

83
00:04:44.830 --> 00:04:48.630
Stylistically cuz I want all of
my declarations to be at the top.

84
00:04:48.630 --> 00:04:53.748
Because there's this thing in ES6
called the TDZ, the temporal dead zone,

85
00:04:53.748 --> 00:04:58.625
I'm not making that up, where if I had
let x = 2 and before it I tried to say

86
00:04:58.625 --> 00:05:03.299
console.log(x), which sounds silly but
it happens all the time.

87
00:05:03.299 --> 00:05:05.391
We accidentally try to
reference something,

88
00:05:05.391 --> 00:05:08.310
some other programmer comes in and
puts it in a piece of code.

89
00:05:08.310 --> 00:05:09.494
This is actually gonna be an error.

90
00:05:09.494 --> 00:05:12.450
You're gonna get an error
because x doesn't actually

91
00:05:12.450 --> 00:05:16.330
exist in an initialized form
that we can use yet, okay?

92
00:05:16.330 --> 00:05:19.550
So because I don't want you
to run across TDZ errors,

93
00:05:19.550 --> 00:05:22.120
I think you ought to put your declarations
all at the top of your blocks.

94
00:05:23.220 --> 00:05:25.014
Yes?
&gt;&gt; Speaker 2: Two questions now.

95
00:05:25.014 --> 00:05:28.930
So with the temporal dead zone,
it actually throws, right?

96
00:05:28.930 --> 00:05:30.353
It's not like x is undefined,

97
00:05:30.353 --> 00:05:32.246
it actually throws an exception.
&gt;&gt; Kyle Simpson: No,

98
00:05:32.246 --> 00:05:34.690
it literally throws an exception.

99
00:05:34.690 --> 00:05:37.160
It's a reference error but

100
00:05:37.160 --> 00:05:41.040
it's called a TDZ error by the spec.
&gt;&gt; Speaker 2: Right, and then my previous

101
00:05:41.040 --> 00:05:45.905
question would have been, did Firefox
remove their old form of let then?

102
00:05:45.905 --> 00:05:48.785
Or is it still in Firefox today?
&gt;&gt; Kyle Simpson: I actually don't

103
00:05:48.785 --> 00:05:50.805
know whether Firefox removed it.

104
00:05:50.805 --> 00:05:56.745
Normally, Firefox reserves
the right to leave stuff in,

105
00:05:56.745 --> 00:06:00.229
but let's just ask whether or
not they did or not.

106
00:06:07.274 --> 00:06:10.282
&gt;&gt; Kyle Simpson: Looks like they probably

107
00:06:10.282 --> 00:06:17.291
removed it.
&gt;&gt; Kyle Simpson: I

108
00:06:17.291 --> 00:06:19.730
guess that discussion
thread was pretty clear.

109
00:06:19.730 --> 00:06:22.190
It's never gonna happen so
they thought, why not go and remove it?

