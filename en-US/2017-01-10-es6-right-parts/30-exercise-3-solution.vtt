WEBVTT

1
00:00:00.000 --> 00:00:03.981
[MUSIC]

2
00:00:03.981 --> 00:00:08.690
&gt;&gt; Speaker 1: Let's talk about ex3-fixed.

3
00:00:08.690 --> 00:00:14.890
Just to keep things short and sweet,
I will just show the fixed version.

4
00:00:14.890 --> 00:00:16.510
But I'll talk you through it.

5
00:00:16.510 --> 00:00:20.390
So what I decided was to do object
destructuring on the parameter that comes

6
00:00:20.390 --> 00:00:24.158
into the response because remember,
response is receiving an object.

7
00:00:24.158 --> 00:00:27.480
So let's go ahead and
just destructure it while it's coming in.

8
00:00:27.480 --> 00:00:29.430
This lets me not have to do any let or

9
00:00:29.430 --> 00:00:32.600
block scoping to contain those temporary
variables cuz they're just gonna

10
00:00:32.600 --> 00:00:35.858
be contained within the response
function itself anyway.

11
00:00:35.858 --> 00:00:40.511
So I'm gonna have a foo variable that
defaults to whatever default stop foo is

12
00:00:40.511 --> 00:00:43.175
and a bar that defaults
to default stop bar.

13
00:00:43.175 --> 00:00:45.988
I'm gonna grab baz as is,
which is just an array, and

14
00:00:45.988 --> 00:00:49.250
then I'm gonna do these two
structurings down inside of bam.

15
00:00:50.470 --> 00:00:53.996
Don't forget to put on
your default objects, so

16
00:00:53.996 --> 00:00:57.782
that your destructuring gracefully fails,
okay.

17
00:00:59.707 --> 00:01:03.801
&gt;&gt; Speaker 1: Now to do the restructuring,
I can use those concise properties because

18
00:01:03.801 --> 00:01:06.630
I named them all exactly
the same as the property.

19
00:01:06.630 --> 00:01:13.404
So it's just foo, bar, barz, and then the
qux and qan are inside of the bam object.

20
00:01:18.461 --> 00:01:22.366
&gt;&gt; Speaker 1: Again, this is one of those
places where I probably wouldn't keep

21
00:01:22.366 --> 00:01:25.934
all those defaults in a separate
object if I didn't need to.

22
00:01:25.934 --> 00:01:29.210
I'd probably just go ahead and put
those defaults right here, for example.

23
00:01:31.930 --> 00:01:33.874
Yes?
&gt;&gt; Speaker 2: A question from the room,

24
00:01:33.874 --> 00:01:38.669
Mike is asking, I don't know if I missed
this, but in object destructuring,

25
00:01:38.669 --> 00:01:43.318
if there is a listed property not on
the object, but up its prototype chain,

26
00:01:43.318 --> 00:01:47.344
will the value from the prototype
be used or will it be undefined?

27
00:01:47.344 --> 00:01:48.691
&gt;&gt; Speaker 1: Good question.

28
00:01:48.691 --> 00:01:54.769
So let's assume I did something like this.

29
00:01:59.595 --> 00:02:02.940
&gt;&gt; Speaker 1: So I'm asking for
the a property on obj.

30
00:02:03.940 --> 00:02:09.200
If we defined obj like this,
we know it doesn't have any properties,

31
00:02:09.200 --> 00:02:10.700
so it's gonna ask for that a property.

32
00:02:10.700 --> 00:02:13.440
If it doesn't find it,
just gonna get undefined.

33
00:02:13.440 --> 00:02:20.290
But if we made object, if we made
that property by doing a linkage

34
00:02:20.290 --> 00:02:25.365
to another object which did,
&gt;&gt; Speaker 1: And

35
00:02:25.365 --> 00:02:28.300
then we ask for the a property on it.

36
00:02:28.300 --> 00:02:32.050
If we did that manually,
if we said obj.a, what would we get?

37
00:02:33.210 --> 00:02:38.890
Obj doesn't have an a, but it's
prototype linked to an object that does,

38
00:02:38.890 --> 00:02:41.280
so it would find that a property, right?

39
00:02:41.280 --> 00:02:43.790
Same is gonna be true in destructuring.

40
00:02:43.790 --> 00:02:47.020
If we ask for an a property on an object,
but it doesn't have it, and yet,

41
00:02:47.020 --> 00:02:49.240
it finds it on the prototype chain,
it will pull that one out.

42
00:02:50.860 --> 00:02:55.410
So again, just think of destructuring
as a declarative syntax for

43
00:02:55.410 --> 00:02:57.000
doing all those assignments.

44
00:02:57.000 --> 00:03:00.715
And then the behavior of those assignments
is exactly the same as if you did it

45
00:03:00.715 --> 00:03:01.303
manually.

46
00:03:11.409 --> 00:03:13.800
&gt;&gt; Speaker 1: Any questions
about destructuring?

47
00:03:16.070 --> 00:03:21.126
If it's still like 80 to 90% fuzzy,
don't worry, that's completely natural.

48
00:03:21.126 --> 00:03:23.210
It's gonna take a little
bit more practice.

49
00:03:23.210 --> 00:03:25.071
But of all the things I'm teaching you,

50
00:03:25.071 --> 00:03:27.112
this may not be the low
hanging fruit stuff.

51
00:03:27.112 --> 00:03:30.448
Like dot dot dot dot or
the dot dot dot operator and default,

52
00:03:30.448 --> 00:03:33.380
those are low hanging fruit,
those are easy.

53
00:03:33.380 --> 00:03:35.110
This is not low hanging fruit, but

54
00:03:35.110 --> 00:03:38.960
it also has the biggest payoff in my
opinion in terms of code readability.

55
00:03:41.890 --> 00:03:42.720
So it's worth the effort.

