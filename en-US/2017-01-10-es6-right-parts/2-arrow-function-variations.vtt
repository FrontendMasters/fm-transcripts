WEBVTT

1
00:00:00.000 --> 00:00:04.251
[MUSIC]

2
00:00:04.251 --> 00:00:07.740
&gt;&gt; Kyle Simpson: I wanna talk
about various variations.

3
00:00:07.740 --> 00:00:12.040
We've already seen that if you wanna
make yourself an empty function or

4
00:00:12.040 --> 00:00:15.170
an empty parameter list, you're gonna
have to use some sort of placeholder.

5
00:00:15.170 --> 00:00:17.640
Typically somebody will use something
like the parenthesis, the open and

6
00:00:17.640 --> 00:00:19.850
close parenthesis like we see here.

7
00:00:19.850 --> 00:00:22.600
You also might see people just
put in a placeholder variable.

8
00:00:24.180 --> 00:00:27.630
Now I really hate that people use the
underscore as that placeholder variable.

9
00:00:27.630 --> 00:00:30.410
They also like to do it without any spaces

10
00:00:30.410 --> 00:00:34.370
to suggest the idea that this is
a variable that I don't care about.

11
00:00:34.370 --> 00:00:37.360
So I'll just use this
placeholder underscore variable.

12
00:00:37.360 --> 00:00:39.939
Some people like to use X as
their placeholder variable.

13
00:00:41.290 --> 00:00:43.530
X is definitely better
than the underscore,

14
00:00:43.530 --> 00:00:45.940
that's especially true if you're
working with the underscore library.

15
00:00:47.420 --> 00:00:50.332
And if you're working with underscore or
low dash, please,

16
00:00:50.332 --> 00:00:53.473
please don't use underscore as
your placeholder variable name.

17
00:00:53.473 --> 00:00:56.131
Unless you're trying to confuse people.

18
00:00:56.131 --> 00:00:58.230
Unless you're trying to
create visual hiccups.

19
00:01:00.010 --> 00:01:02.450
If your goal like mine is to
create more readable code,

20
00:01:02.450 --> 00:01:08.450
please avoid those sorts of tricks that
cause more problems for the reader.

21
00:01:08.450 --> 00:01:12.800
So when the case is that we have
one variable that we either need or

22
00:01:12.800 --> 00:01:13.420
we don't need.

23
00:01:13.420 --> 00:01:17.080
And it's a simple lexical identifier,

24
00:01:17.080 --> 00:01:19.909
we can just simply list it there
without any parentheses out.

25
00:01:21.530 --> 00:01:24.690
There will be several additional
features that we're going to talk about

26
00:01:24.690 --> 00:01:26.230
throughout this workshop.

27
00:01:26.230 --> 00:01:29.620
That ES6 affords us the capability
to do more with our parameters.

28
00:01:31.110 --> 00:01:32.590
There is, as a matter of fact, three.

29
00:01:32.590 --> 00:01:35.400
There are default values,
spread, and destructuring.

30
00:01:35.400 --> 00:01:38.070
These are three different sorts of things
that we can do with our parameters.

31
00:01:38.070 --> 00:01:39.380
We're going to talk
about each one of those.

32
00:01:39.380 --> 00:01:42.700
So don't worry if I just started
speaking Greek to you but

33
00:01:42.700 --> 00:01:47.390
in all three of those cases if you use any
one of them or combination of those three.

34
00:01:48.530 --> 00:01:50.260
Even with a single variable
you're going to have to put

35
00:01:50.260 --> 00:01:51.810
a parentheses set around it.

36
00:01:51.810 --> 00:01:56.270
So if I use the dot dot dot for example
the gather operator on my parameter.

37
00:01:57.320 --> 00:01:59.537
I got to have parentheses set around it.

38
00:02:01.285 --> 00:02:04.307
&gt;&gt; Kyle Simpson: So there's our first
set of variation is that we can either

39
00:02:04.307 --> 00:02:07.380
see open close parentheses hanging around.

40
00:02:07.380 --> 00:02:10.980
And by the way open close parentheses the
problem with that as your placeholder of

41
00:02:10.980 --> 00:02:14.560
your parameter list, looks an awful
lot like a function invocation.

42
00:02:14.560 --> 00:02:18.020
So people see that and they normally
think something just got executed but

43
00:02:18.020 --> 00:02:20.140
wait no this is the parameter list.

44
00:02:21.950 --> 00:02:25.230
So see there's already more visual hiccups

45
00:02:25.230 --> 00:02:28.200
than what we had before with
writing out the word function.

46
00:02:29.410 --> 00:02:34.352
So any one of our nonstandard things
also if you're going to have multiple

47
00:02:34.352 --> 00:02:35.237
variables.

48
00:02:35.237 --> 00:02:37.519
Like for example X and Y.

49
00:02:37.519 --> 00:02:42.460
And your arrow function is going to do
something perhaps with the X and the Y.

50
00:02:42.460 --> 00:02:46.170
If you have multiple parameters they
have to be surrounded by parentheses.

51
00:02:47.190 --> 00:02:49.910
Little side note, this is not standard yet

52
00:02:49.910 --> 00:02:54.810
there is a proposal, to have what's
called headless arrow functions.

53
00:02:54.810 --> 00:02:58.050
Meaning if we don't need a parameter list
we can just completely leave it off.

54
00:02:59.230 --> 00:03:02.860
That sounds awesome, until you then
realize that's yet another variation

55
00:03:02.860 --> 00:03:06.330
syntax, or somebody's have to backtrack
visually to say wait a minute.

56
00:03:06.330 --> 00:03:08.400
Was there a parameter list,
or was there not?

57
00:03:08.400 --> 00:03:11.559
Because they're gonna
see something like this.

58
00:03:16.546 --> 00:03:18.690
&gt;&gt; Kyle Simpson: That's not
confusing at all to anybody, is it?

59
00:03:21.174 --> 00:03:25.750
So we're already starting to
collect quite a few of these

60
00:03:27.450 --> 00:03:30.110
syntactic variations were not done.

61
00:03:30.110 --> 00:03:33.170
All right so multiples, zero or

62
00:03:33.170 --> 00:03:35.710
nonstandard parameters are gonna
have to have the parenthesis set.

63
00:03:35.710 --> 00:03:38.010
Now let's go to the function body.

64
00:03:38.010 --> 00:03:41.756
The function body in this sense is
called a concise function body.

65
00:03:41.756 --> 00:03:44.956
You notice I'm just doing the constant
three here just to make it easy for

66
00:03:44.956 --> 00:03:47.593
me to type over and over again,
so I don't screw my self up.

67
00:03:47.593 --> 00:03:50.158
But it's an expression not
a statement in the concise

68
00:03:50.158 --> 00:03:52.218
form it's an expression not a statement.

69
00:03:52.218 --> 00:03:59.310
Meaning all legal expressions are legal as
function as arrow function concise bodies.

70
00:04:00.900 --> 00:04:02.380
All legal expressions.

71
00:04:02.380 --> 00:04:05.230
Now, in some languages,
statements are expressions.

72
00:04:05.230 --> 00:04:09.120
But for historical reasons, and
JavaScript statements are not expressions.

73
00:04:09.120 --> 00:04:11.700
So there are certain kinds of
statements that you might want to just

74
00:04:11.700 --> 00:04:14.950
put in a concise body that
you're not allowed to.

75
00:04:14.950 --> 00:04:19.700
And I have run into the most common of
those places where I get annoyed by

76
00:04:19.700 --> 00:04:23.480
this statement versus expression problem
with arrow functions as the try catch.

77
00:04:24.800 --> 00:04:28.000
Because I would really like for try
catch to be something that I could wrap

78
00:04:28.000 --> 00:04:32.470
around the body of a concise method,
of a concise error function but I can't.

79
00:04:32.470 --> 00:04:34.370
Cuz try catches is a statement.

80
00:04:34.370 --> 00:04:36.654
And if you have a statement
you're gonna to state,

81
00:04:36.654 --> 00:04:39.535
you're gonna have to wrap your
statement in a curly brace pair.

82
00:04:39.535 --> 00:04:43.231
So if I needed to do something like for
example try catch.

83
00:04:43.231 --> 00:04:49.670
Now I know this is silly with my 3
example but just to keep things.

84
00:04:49.670 --> 00:04:52.210
That's not valid, so

85
00:04:52.210 --> 00:04:54.670
unfortunately I'm gonna have to
put a curly brace pair around it.

86
00:04:54.670 --> 00:04:58.120
But I'm gonna have to remember that that
thing's a statement and it's not valid.

87
00:04:58.120 --> 00:05:02.110
Other examples of places where I've wanted
to do this, if statements, for loops.

88
00:05:02.110 --> 00:05:06.100
Those are all statements that it might
be nice to have in the concise form.

89
00:05:06.100 --> 00:05:09.500
And by the way,
we do concise if's blocks all the time.

90
00:05:09.500 --> 00:05:12.770
Where we put if, if, if and
that's totally valid and

91
00:05:12.770 --> 00:05:17.520
totally legal but it's not valid is
the concise body of an arrow function.

92
00:05:17.520 --> 00:05:19.860
Because these are expressions
not statements.

93
00:05:19.860 --> 00:05:21.680
So we have to wrap that
curly brace pair on it.

94
00:05:21.680 --> 00:05:26.840
Now let's talk about what that non
curly brace pair is doing for us.

95
00:05:26.840 --> 00:05:28.890
It's implying a return keyword,

96
00:05:28.890 --> 00:05:32.530
this is implying that the value three
is the return value of this function.

97
00:05:33.800 --> 00:05:37.420
Guess what happens as soon as you
put a curly brace pair on something.

98
00:05:37.420 --> 00:05:39.220
No more implied return.

99
00:05:39.220 --> 00:05:41.840
So you're gonna have to remember if you
run into one of those cases where you get

100
00:05:41.840 --> 00:05:44.470
a wrap a curly brace pair on it
your'e gonna have to remember, oops!

101
00:05:44.470 --> 00:05:46.760
Got to go back and
put my return key words in.

102
00:05:46.760 --> 00:05:48.140
Yet another set of variations.

103
00:05:48.140 --> 00:05:49.370
So now if for

104
00:05:49.370 --> 00:05:53.250
whatever crazy reason you need to have
some curly braces around a thing you're

105
00:05:53.250 --> 00:05:56.906
going to have to remember to go put
in that return inside of your block.

106
00:05:56.906 --> 00:05:59.700
Or it's not gonna get return
there's no implicit return.

107
00:06:01.650 --> 00:06:05.200
Yet another set of syntactic variations
that somebody running through your code,

108
00:06:05.200 --> 00:06:07.670
they're gonna have these
visual hiccups like, wait,

109
00:06:07.670 --> 00:06:10.880
why does it need a return here and
not a return here.

110
00:06:11.960 --> 00:06:12.680
Yes?
&gt;&gt; Speaker 2: If you have

111
00:06:12.680 --> 00:06:17.130
a single parameter, can you still
put the parentheses around it?

112
00:06:17.130 --> 00:06:19.980
&gt;&gt; Kyle Simpson: It is legal to still
put the parentheses around it but

113
00:06:19.980 --> 00:06:24.160
the ES6 aficionados will jump out
of the shadows and sneer at you.

114
00:06:24.160 --> 00:06:25.400
Why do you put those parenthesis?

115
00:06:25.400 --> 00:06:27.840
You don't need parenthesis, don't you
know you can leave off parenthesis?

116
00:06:30.070 --> 00:06:33.340
They have jumped out at me before,
so I'm just warning you.

117
00:06:33.340 --> 00:06:35.570
They're there, they're in the shadows.

118
00:06:35.570 --> 00:06:38.450
&gt;&gt; Speaker 2: But if you want
to return an object then you're

119
00:06:38.450 --> 00:06:39.300
&gt;&gt; Kyle Simpson: We're not done yet,

120
00:06:39.300 --> 00:06:40.299
you're absolutely right.

121
00:06:41.740 --> 00:06:46.270
I love that my students always like
to be a half step ahead of me that

122
00:06:46.270 --> 00:06:48.380
means I'm done exactly what I
ought to be doing as a teacher.

123
00:06:48.380 --> 00:06:53.660
So what happens if the return
value that you want to return.

124
00:06:54.770 --> 00:06:56.788
Saying needs to be an object.

125
00:06:59.580 --> 00:07:01.450
&gt;&gt; Kyle Simpson: You can
probably spot the problem here.

126
00:07:01.450 --> 00:07:04.760
The curly braces there are not going
to be treated as an object value.

127
00:07:04.760 --> 00:07:08.940
They're going to be treated as
the curly brace pair around

128
00:07:08.940 --> 00:07:11.250
making it not a concise body.

129
00:07:11.250 --> 00:07:13.830
So if you want to make it a concise body

130
00:07:13.830 --> 00:07:17.930
you might think I can just do another
curly brace pair but no no no.

131
00:07:17.930 --> 00:07:22.928
You have to put parentheses just
around the body to be able to return

132
00:07:22.928 --> 00:07:24.274
an object value.

133
00:07:29.515 --> 00:07:32.853
&gt;&gt; Kyle Simpson: A lot of
different variations here.

134
00:07:32.853 --> 00:07:38.544
In my opinion the variation in
syntax is a detractor from that

135
00:07:38.544 --> 00:07:43.575
overall value proposition
that we seem to be making.

136
00:07:43.575 --> 00:07:46.752
That, my God, I'm gonna write
code that's so much cleaner and

137
00:07:46.752 --> 00:07:50.101
readable cuz I don't have to write
the word function, word return and

138
00:07:50.101 --> 00:07:53.090
all those crappy curly braces and
all that other stuff.

139
00:07:53.090 --> 00:07:57.330
If that's a value proposition we also
to make an apples to apples comparison,

140
00:07:57.330 --> 00:07:59.960
have to also add in the negatives.

141
00:07:59.960 --> 00:08:03.630
And the problem is a lot of people
only talk about the positives.

142
00:08:03.630 --> 00:08:07.390
So I want you to make an informed opinion,
holistically, on the whole issue.

143
00:08:10.100 --> 00:08:13.820
The choice that we make to write these
arrow functions does kind of take us down

144
00:08:13.820 --> 00:08:17.400
this path of, but what about readability.

145
00:08:17.400 --> 00:08:20.220
Now there are a few other
things that I want to point out

146
00:08:20.220 --> 00:08:21.350
about the arrow function.

147
00:08:21.350 --> 00:08:23.640
I don't want to draw too
much on this because

148
00:08:23.640 --> 00:08:28.150
it's one of our not right parts but I do
want you to understand arrow functions.

149
00:08:29.340 --> 00:08:31.188
A few other things to point
out about the arrow function.

150
00:08:31.188 --> 00:08:35.410
They are anonymous.

151
00:08:35.410 --> 00:08:40.880
They are syntactically anonymous there's
no way to give a name to an arrow function

152
00:08:40.880 --> 00:08:41.510
syntactically.

153
00:08:43.100 --> 00:08:47.300
You can't put some extra
name there before or

154
00:08:47.300 --> 00:08:50.180
after the arrow symbol or
something like that.

155
00:08:50.180 --> 00:08:54.000
Now most people have probably not thought
too much about well what difference does

156
00:08:54.000 --> 00:08:56.320
it make if it's a name function or not?

157
00:08:56.320 --> 00:08:58.750
Let me give you some
examples of places where

158
00:08:58.750 --> 00:09:03.200
named function expressions are actually
a lot better than anonymous functions.

159
00:09:03.200 --> 00:09:06.530
Any time your function needs to
make a self reference to itself,

160
00:09:06.530 --> 00:09:08.340
typically that's for recursion.

161
00:09:08.340 --> 00:09:10.858
But there are other cases where
your function might wanna make

162
00:09:10.858 --> 00:09:11.839
a reference to itself.

163
00:09:11.839 --> 00:09:16.630
For example an event handler that
needs to unbind itself after

164
00:09:16.630 --> 00:09:20.414
it's run once needs a self
reference to itself.

165
00:09:20.414 --> 00:09:23.513
If it's an anonymous function you
don't have a convenient syntactic self

166
00:09:23.513 --> 00:09:24.059
reference.

167
00:09:24.059 --> 00:09:28.411
So you're relying upon some crappy outer
variable that might be pointing to

168
00:09:28.411 --> 00:09:29.100
the thing.

169
00:09:30.180 --> 00:09:34.320
Another example where anonymous functions
fail is the fact that anonymous functions

170
00:09:34.320 --> 00:09:36.960
show up as anonymous
function in stack traces.

171
00:09:36.960 --> 00:09:40.160
So we see stack trace with 12
lines of anonymous function.

172
00:09:40.160 --> 00:09:45.180
And we're in minified code so
they all say line 132, character 32,712.

173
00:09:45.180 --> 00:09:46.882
And we have no idea what that is.

174
00:09:49.160 --> 00:09:52.007
&gt;&gt; Kyle Simpson: So if you've ever had
a debug stack trace with anonymous

175
00:09:52.007 --> 00:09:55.643
functions, you know that anonymous
functions are less helpful than if

176
00:09:55.643 --> 00:09:57.000
the function has a name.

177
00:09:57.000 --> 00:10:01.690
And if it's not just a name like foo but
a good useful name like, Handle clicks.

178
00:10:01.690 --> 00:10:05.760
Now you start to get in your stack trace
a more reasonable idea of what it's doing.

179
00:10:07.250 --> 00:10:09.870
So there are downsides to
using anonymous functions.

180
00:10:09.870 --> 00:10:14.370
Now the astute in the audience is going
to think, I've heard of this thing.

181
00:10:14.370 --> 00:10:17.800
Anonymous functions get what's
called name inferencing.

182
00:10:17.800 --> 00:10:20.640
Say I have this,
I have a var foo equals and

183
00:10:20.640 --> 00:10:23.230
I do one of these arrow functions,
like that.

184
00:10:24.450 --> 00:10:28.670
It's an anonymous function expression
assigned to the variable foo.

185
00:10:28.670 --> 00:10:32.450
If you run that code, and
ask what is the name property of it?

186
00:10:32.450 --> 00:10:35.420
You are in fact going
to get the string foo.

187
00:10:35.420 --> 00:10:39.570
So all of a sudden it start to look
like this isn't an anonymous function,

188
00:10:39.570 --> 00:10:40.950
it's a function with the name foo.

189
00:10:41.960 --> 00:10:44.260
That's called name inferencing.

190
00:10:44.260 --> 00:10:50.640
There's a about a half dozen rules in the
spec for how the spec can make a guess.

191
00:10:50.640 --> 00:10:55.060
And inference as to what name you probably
want to refer to that function by

192
00:10:55.060 --> 00:10:57.310
based upon where that function
expression gets saved.

193
00:10:58.540 --> 00:11:01.220
Okay sounds like our safety net right?

194
00:11:01.220 --> 00:11:03.890
Sounds like okay great I'm going
to have all my arrow functions but

195
00:11:03.890 --> 00:11:07.440
they're going to be non anonymous because
they're going to get name inference.

196
00:11:08.840 --> 00:11:13.290
Except the problem is 99.999999999%
of all arrow functions

197
00:11:13.290 --> 00:11:18.250
you're ever gonna write are gonna
be arguments to some function call.

198
00:11:18.250 --> 00:11:24.330
Like for example,
&gt;&gt; Kyle Simpson: Like that.

199
00:11:24.330 --> 00:11:29.120
This is the one case in syntax where it
doesn't have any name inferencing cuz

200
00:11:29.120 --> 00:11:31.330
how could it possibly guess
what you want to call it.

201
00:11:31.330 --> 00:11:35.710
It doesn't know what the parameter name
of the foo function is necessarily so

202
00:11:35.710 --> 00:11:36.460
guess what happens?

203
00:11:36.460 --> 00:11:38.020
It doesn't name inference in this case.

204
00:11:38.020 --> 00:11:41.260
So in all the places where you're
probably going to use error functions.

205
00:11:41.260 --> 00:11:44.720
You're probably not going to get
name inferencing like you think.

206
00:11:44.720 --> 00:11:49.585
So they're gonna stay perpetually,
syntactically anonymous.

