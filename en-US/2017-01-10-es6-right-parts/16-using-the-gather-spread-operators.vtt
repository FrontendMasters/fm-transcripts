WEBVTT

1
00:00:00.000 --> 00:00:03.356
[MUSIC]

2
00:00:03.356 --> 00:00:07.106
&gt;&gt; Kyle Simpson: There are other
places where the size parameter

3
00:00:07.106 --> 00:00:10.860
lists where this gather and
spread can be used.

4
00:00:11.860 --> 00:00:16.820
So, another place is within
the context of a reals.

5
00:00:16.820 --> 00:00:22.636
So, let's say I have x = (1,2,3) and

6
00:00:22.636 --> 00:00:28.350
y =( 4,5) and what I'd like is to

7
00:00:28.350 --> 00:00:34.200
define a z which includes
the content Includes a value,

8
00:00:34.200 --> 00:00:39.030
plus the contents of x, plus
the contents of y, plus another value.

9
00:00:39.030 --> 00:00:44.530
So I would do that by saying array
of 0.concat, and I'd say xy.

10
00:00:44.530 --> 00:00:50.699
And then, another array with some other
value like the value 6, for example.

11
00:00:50.699 --> 00:00:52.800
Anybody ever used to array concat before?

12
00:00:52.800 --> 00:00:56.550
So, now z would have 0,
1, 2, 3, 4, 5, 6 on it.

13
00:00:56.550 --> 00:01:02.870
So, any place where I find myself using
the .apply and the .slice those are places

14
00:01:02.870 --> 00:01:07.400
where the dot, dot, dot helps but also
places where I see myself doing .concat.

15
00:01:07.400 --> 00:01:11.010
That's another one of those smells like,
maybe this is a place where dot, dot,

16
00:01:11.010 --> 00:01:11.540
dot can help me.

17
00:01:13.300 --> 00:01:18.380
So, this is the imperative form of doing
that, the declarative form we start

18
00:01:18.380 --> 00:01:24.250
out again with the same array
of var y = (4,5), and we have

19
00:01:25.370 --> 00:01:30.760
var z is equal to, and now we just
make an array with the value in it.

20
00:01:33.110 --> 00:01:35.960
We spread out x, we spread out y and
we add another value into it.

21
00:01:38.240 --> 00:01:41.770
So, arrays can be spread out in

22
00:01:43.080 --> 00:01:48.540
function calls like we did before where
we were passing a value along to bar.

23
00:01:48.540 --> 00:01:52.559
They can also be spread out
inside of array literal.

24
00:01:52.559 --> 00:01:56.070
So, we can use them inside of array
literals as well, which is nice.

25
00:01:56.070 --> 00:02:01.387
So, putting those things
together I can have a foo

26
00:02:01.387 --> 00:02:05.330
that, included this if I wanted
to pass those all along.

27
00:02:06.520 --> 00:02:09.620
I could put those all together and
then dot, dot, dot.

28
00:02:11.150 --> 00:02:15.718
So, I could make an array that are then
spread back out or I don't even need to do

29
00:02:15.718 --> 00:02:20.101
that because those can all just be
passed individual, all the same thing.

30
00:02:25.684 --> 00:02:28.540
&gt;&gt; Kyle Simpson: So,
re gathering and array.

31
00:02:28.540 --> 00:02:32.740
Spreading can be really useful for us, and

32
00:02:32.740 --> 00:02:36.980
depending on how you do this you
can place interesting tricks which

33
00:02:36.980 --> 00:02:40.490
I'm setting you up now for
the exercise that we're about to do.

34
00:02:40.490 --> 00:02:45.360
You can play some interesting tricks

35
00:02:45.360 --> 00:02:49.767
where for example, let's say.

36
00:03:05.189 --> 00:03:09.150
&gt;&gt; Kyle Simpson: What I've done there is
effectively throw away the first two from

37
00:03:09.150 --> 00:03:13.615
a, so it's kind of declaratively slicing
off the first two from a leaving

38
00:03:13.615 --> 00:03:18.679
the remainder of a, and the remainder of b
but all gathered together into a single.

39
00:03:20.590 --> 00:03:25.592
So, we can use different kind of tricks to
do the declarative form of doing all that

40
00:03:25.592 --> 00:03:30.465
imperative slicing and concatenating and
all the other stuff that we might do.

41
00:03:30.465 --> 00:03:34.414
&gt;&gt; Speaker 2: There's a couple questions
you should probably read them yourself.

42
00:03:34.414 --> 00:03:38.764
VJR is asking about the gather

43
00:03:38.764 --> 00:03:43.465
spread operator performance.

44
00:03:43.465 --> 00:03:46.255
&gt;&gt; Kyle Simpson: To answer
a question about performance.

45
00:03:46.255 --> 00:03:50.801
This is gonna be super annoying to
some of you probably but I'm gonna

46
00:03:50.801 --> 00:03:55.747
tell you that most of your intuition
about how you ask about performance,

47
00:03:55.747 --> 00:03:58.301
you're asking an invalid question,

48
00:03:58.301 --> 00:04:02.849
because the premise of most of
those questions including this one,

49
00:04:02.849 --> 00:04:07.950
the underlying premise is Is it faster or
slower than not doing it at all.

50
00:04:07.950 --> 00:04:10.740
And that's not an apples
to apples comparison.

51
00:04:10.740 --> 00:04:13.530
What we really need to do
is an apples to oranges.

52
00:04:13.530 --> 00:04:17.568
That's an apples to oranges, what we
really need to do is an apples to apples

53
00:04:17.568 --> 00:04:21.290
comparison, which is to ask is it
faster or slower for this dot, dot,

54
00:04:21.290 --> 00:04:26.060
dot thing to be used compared to all the
slicing and can catthing that I might do.

55
00:04:26.060 --> 00:04:28.500
That's the real question
that we might ask.

56
00:04:28.500 --> 00:04:34.440
Now, the answer to that question is it
doesn't matter whether it's faster or not.

57
00:04:34.440 --> 00:04:40.780
What matters is that this is a form that
that the compiler can recognize because

58
00:04:40.780 --> 00:04:45.490
it's a declarative form, which means
that the engines have the opportunity

59
00:04:45.490 --> 00:04:50.730
to optimize it, or they don't have the
opportunity to optimize the other form.

60
00:04:50.730 --> 00:04:51.790
That's the thing that matters.

61
00:04:53.520 --> 00:04:56.280
That's yet another benefit
of using a declarative form,

62
00:04:56.280 --> 00:04:59.150
the compiler has the ability
to see in the future.

63
00:04:59.150 --> 00:05:00.880
I don't know whether they do, but

64
00:05:00.880 --> 00:05:05.220
I don't care, because I'm not
an engine internals person.

65
00:05:05.220 --> 00:05:08.930
But what I do know is that the engine
has the ability to recognize that

66
00:05:08.930 --> 00:05:12.730
syntactically and say, I know what they're
doing they're putting some stuff together

67
00:05:12.730 --> 00:05:17.830
and put in a super hyper optimized
instruction to make that happen.

68
00:05:17.830 --> 00:05:19.410
They cannot do the same over here.

69
00:05:20.420 --> 00:05:26.888
The engine can't see what you're
trying to do there upfront and

70
00:05:26.888 --> 00:05:30.973
make a super hyper optimized form of it.

71
00:05:30.973 --> 00:05:35.024
It might sound like I'm dodging
the question, but what I'm really trying

72
00:05:35.024 --> 00:05:39.263
to get people to realize is that the value
of the VA 6 is not about whether it is or

73
00:05:39.263 --> 00:05:40.659
is not more performing.

74
00:05:40.659 --> 00:05:45.557
In general in the long term, every
declarative form will be at least as fast

75
00:05:45.557 --> 00:05:49.989
as the old version and probably much
faster but whether it is today or

76
00:05:49.989 --> 00:05:54.891
not slightly slower or slightly faster
is an unquestioned benefit in terms

77
00:05:54.891 --> 00:05:59.443
of code readability and that's where
I think our focus should stay.

78
00:05:59.443 --> 00:06:02.122
Does that make sense?

79
00:06:02.122 --> 00:06:04.860
&gt;&gt; Speaker 3: Question
about how this works.

80
00:06:06.580 --> 00:06:11.746
What you have on the right side up there,
so I think what's

81
00:06:11.746 --> 00:06:16.911
gonna happen is x and
y are gonna be the first two elements of

82
00:06:16.911 --> 00:06:22.091
whichever of those arrays a and
b got passed in, correct?

83
00:06:22.091 --> 00:06:26.086
&gt;&gt; Kyle Simpson: If we made an a and
a b, for example,

84
00:06:26.086 --> 00:06:31.285
a =(1,2,3) and b =( 4,5,6),

85
00:06:31.285 --> 00:06:35.831
x is gonna be 1, and y it's gonna be 2.

86
00:06:35.831 --> 00:06:40.448
&gt;&gt; Speaker 3: And if x If array a only
had one element then x would be the one

87
00:06:40.448 --> 00:06:44.987
element and then y would be
the first element to b, okay.

88
00:06:44.987 --> 00:06:45.896
&gt;&gt; Kyle Simpson: Yep, exactly.

89
00:06:48.283 --> 00:06:52.805
&gt;&gt; Speaker 2: So, there was
a response in terms of readability.

90
00:06:52.805 --> 00:06:54.544
&gt;&gt; Kyle Simpson: Somebody trying
to debate me on readability?

91
00:06:54.544 --> 00:06:55.665
&gt;&gt; Speaker 2: Yeah, I think so.

92
00:06:55.665 --> 00:06:57.994
[LAUGH]
&gt;&gt; Kyle Simpson: I don't wanna get into

93
00:06:57.994 --> 00:06:58.728
debates on it.

94
00:06:58.728 --> 00:07:01.098
I'm presenting you all sides and

95
00:07:01.098 --> 00:07:05.507
it's up to you to decide what
do you think about readability.

96
00:07:05.507 --> 00:07:06.390
Yes.

97
00:07:06.390 --> 00:07:09.440
&gt;&gt; Speaker 2: Personal question,
on the notion of the gatherer operator,

98
00:07:09.440 --> 00:07:10.950
what if a was a scalar.

99
00:07:10.950 --> 00:07:12.860
&gt;&gt; Kyle Simpson: Say that again.

100
00:07:12.860 --> 00:07:14.230
&gt;&gt; Speaker 2: What if a was a scalar?

101
00:07:14.230 --> 00:07:19.520
&gt;&gt; Kyle Simpson: You can't use an dot,
dot, dot operator against a value unless,

102
00:07:19.520 --> 00:07:21.900
and here's I'm gonna
tell you something but

103
00:07:21.900 --> 00:07:23.970
I'm not gonna explain it until
the end of the workshop.

104
00:07:23.970 --> 00:07:26.290
The end of the workshop or
in a talk about iterators.

105
00:07:26.290 --> 00:07:31.090
The dot, dot, dot operator spreads
out anything that has an iterator

106
00:07:31.090 --> 00:07:33.260
which is called an iterable.

107
00:07:33.260 --> 00:07:36.770
If a value is iterable it can be dot,
dot, dot spread out.

108
00:07:38.080 --> 00:07:43.300
So, arrays by default are iterables
because they have an iterator

109
00:07:43.300 --> 00:07:49.390
built into them as of ES 6, another thing
that's a default iterable is a string.

110
00:07:52.590 --> 00:07:55.960
If I ask for the individual characters,

111
00:07:55.960 --> 00:07:59.890
if I wanted to get like a real array
of the individual characters of that,

112
00:07:59.890 --> 00:08:03.530
the old school way would have been
to say something like str.split.

113
00:08:03.530 --> 00:08:08.060
And now I get an array out of it but
now we can just treat that string

114
00:08:08.060 --> 00:08:12.280
as an interval because it is and dot,
dot, dot will actually spread it out.

115
00:08:12.280 --> 00:08:15.530
So, if I said something like dot,
dot, dot string now that

116
00:08:15.530 --> 00:08:19.600
value is an array were each element is
one of the characters from the string.

117
00:08:20.620 --> 00:08:23.270
So, any value that has an iterator,

118
00:08:23.270 --> 00:08:28.170
a primitive like the number value
would not have an iterator by default.

119
00:08:29.440 --> 00:08:32.620
But, at the end of today we're
gonna do an exercise where we can

120
00:08:32.620 --> 00:08:34.570
add iterators to our own custom values.

