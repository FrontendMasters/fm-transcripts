WEBVTT

1
00:00:00.000 --> 00:00:04.108
[MUSIC]

2
00:00:04.108 --> 00:00:07.274
&gt;&gt; Kyle Simpson: Everything I just talked
to you about with the array destructuring

3
00:00:07.274 --> 00:00:08.641
and object destructuring.

4
00:00:08.641 --> 00:00:13.531
In the declarative sense, and
in the straight up assignment sense, every

5
00:00:13.531 --> 00:00:18.510
bit of that is exactly and identically
applicable to function parameters.

6
00:00:20.980 --> 00:00:26.970
We can do array and object destructuring
inside of our function parameter list.

7
00:00:26.970 --> 00:00:31.254
So, for example, I could say that I'm
expecting to receive an array in the first

8
00:00:31.254 --> 00:00:34.405
argument position,
the first parameter position of foo.

9
00:00:34.405 --> 00:00:36.880
But I want to go ahead and
break that thing down.

10
00:00:36.880 --> 00:00:40.210
So, I'm going to do in array destructuring
to say that the first item should be

11
00:00:40.210 --> 00:00:43.820
a the second one should be b and
the third one should be C.

12
00:00:45.630 --> 00:00:51.300
So if I print it out console.log(a,b,c).

13
00:00:51.300 --> 00:00:57.407
If I pass in foo( 1,2,3),
what's going to happen?

14
00:01:07.701 --> 00:01:08.538
&gt;&gt; Kyle Simpson: Think about your

15
00:01:08.538 --> 00:01:14.923
processing.
&gt;&gt; Speaker 2: It's not an array,

16
00:01:14.923 --> 00:01:18.437
so it won't destructure?
&gt;&gt; Kyle Simpson: You have a number value,

17
00:01:18.437 --> 00:01:23.071
the number one, that you then
try to access a property on it.

18
00:01:23.071 --> 00:01:26.160
So you try to say 1 bracket 0,
essentially.

19
00:01:26.160 --> 00:01:27.290
Have you ever tried that before?

20
00:01:27.290 --> 00:01:29.710
Do you know if that works or

21
00:01:29.710 --> 00:01:32.178
if that's an error?
&gt;&gt; Speaker 2: Tried it, but

22
00:01:32.178 --> 00:01:37.840
I'm guessing you'd get undefined.
&gt;&gt; Kyle Simpson: Yeah,

23
00:01:37.840 --> 00:01:39.370
it works, but we get undefined.

24
00:01:40.370 --> 00:01:42.255
We're not going to get the 1,
2, 3 that we're expecting.

25
00:01:42.255 --> 00:01:45.468
And we're not even gonna
get an error here, because

26
00:01:45.468 --> 00:01:50.022
we happen to give it a value that it is
legal to do a bracket syntax against.

27
00:01:50.022 --> 00:01:53.850
Null and undefined, it's not legal to
do that, but the number value it is.

28
00:01:53.850 --> 00:01:58.560
Because there's a thing in JavaScript
called boxing which is taking objects and

29
00:01:58.560 --> 00:02:01.640
boxing them into their
object counterparts.

30
00:02:01.640 --> 00:02:03.867
So there's a number
object that's boxed here,

31
00:02:03.867 --> 00:02:08.120
and then we try to access the 0 property
on a number object that's not present.

32
00:02:08.120 --> 00:02:09.845
Okay, so that's why it's legal and

33
00:02:09.845 --> 00:02:13.529
that's why I'm pointing it out is because
you're gonna run into this error.

34
00:02:13.529 --> 00:02:16.730
And you're like where's my one two and
three?

35
00:02:16.730 --> 00:02:19.105
It's because you're
destructuring the single value.

36
00:02:19.105 --> 00:02:23.905
In this case you want to pass in an array.

37
00:02:23.905 --> 00:02:29.900
Now if we pass in the array, the array
gets destructured into a, b, and c.

38
00:02:29.900 --> 00:02:34.572
And of course this one should
have a default value on it.

39
00:02:34.572 --> 00:02:38.705
Cuz if you don't pass in the array, you
want it to first pick up the empty array

40
00:02:38.705 --> 00:02:41.324
before trying to do
the destructuring pattern.

41
00:02:41.324 --> 00:02:45.729
Same reasoning as before.
&gt;&gt; Kyle Simpson: And

42
00:02:45.729 --> 00:02:48.033
that only accounts for
one argument, we can do multiples.

43
00:02:48.033 --> 00:02:51.227
We could have an array destructuring
in the first parameter position,

44
00:02:51.227 --> 00:02:54.487
an object destructuring in the second and
a dot dot dot args in the third.

45
00:02:54.487 --> 00:02:58.092
We can do whatever we want, go crazy.
&gt;&gt; Speaker 3: This applies the same for

46
00:02:58.092 --> 00:03:00.250
objects?
&gt;&gt; Kyle Simpson: Yeah,

47
00:03:00.250 --> 00:03:01.740
we can do object destructuring as well.

48
00:03:01.740 --> 00:03:04.640
So I could say {a, b, c,}, and

49
00:03:04.640 --> 00:03:09.740
what that would be expecting is
to be receiving an object like

50
00:03:09.740 --> 00:03:15.872
this.
&gt;&gt; Kyle Simpson: Now

51
00:03:15.872 --> 00:03:20.641
here's why this is cool, because this
kind of usage starts to approximate

52
00:03:20.641 --> 00:03:25.575
a feature that does not exist in
JavaScript, does exist in other languages.

53
00:03:25.575 --> 00:03:29.729
Would be really cool if we had it, but
now we have a way to sort of mimic it,

54
00:03:29.729 --> 00:03:31.719
which is called named arguments.

55
00:03:31.719 --> 00:03:33.920
It's different from named parameters.

56
00:03:33.920 --> 00:03:37.420
Named arguments are where at
the call site of a function,

57
00:03:37.420 --> 00:03:41.770
you get to say this value goes to
this specifically named parameter.

58
00:03:43.380 --> 00:03:45.650
So isn't that kind of like
what we're doing here?

59
00:03:45.650 --> 00:03:48.420
We're kinda saying the value 2
needs to go to the b parameter,

60
00:03:48.420 --> 00:03:51.720
and the value 3 needs to
go to the c parameter.

61
00:03:51.720 --> 00:03:52.860
They're not really parameters,

62
00:03:52.860 --> 00:03:56.120
they're properties on an object that gets
destructured to look like a parameter.

63
00:03:58.740 --> 00:04:03.420
But in using object destructuring
in our signature, and

64
00:04:03.420 --> 00:04:07.290
by allowing the call site to use
an object to do that mapping,

65
00:04:07.290 --> 00:04:11.780
we now are mimicking or approximating
this idea of named arguments.

66
00:04:13.500 --> 00:04:16.742
How many of you have ever had to work
with a function that had like 3, 4, 5,

67
00:04:16.742 --> 00:04:18.049
10 arguments in it?

68
00:04:19.340 --> 00:04:22.340
And how many of you had to keep
going up to the documentation or

69
00:04:22.340 --> 00:04:24.450
reading to remember,
because you could never remember.

70
00:04:24.450 --> 00:04:28.895
This basically accounts for 100% of
the time that I ever wrote PHP code.

71
00:04:28.895 --> 00:04:31.210
I could never remember
the signature of the function.

72
00:04:31.210 --> 00:04:34.015
I always had to go to PHP.net and
look it up.

73
00:04:34.015 --> 00:04:35.455
No matter how many times I wrote it,

74
00:04:35.455 --> 00:04:37.770
1000 times I'm still looking
at the same function.

75
00:04:37.770 --> 00:04:41.368
Because I can't remember, is string first,
or is index first or whatever.

76
00:04:41.368 --> 00:04:45.163
Didn't make matters any better that
they had multiple functions that did

77
00:04:45.163 --> 00:04:46.029
the same thing.

78
00:04:46.029 --> 00:04:50.300
And arguments are in different orders,
parameters in different orders.

79
00:04:50.300 --> 00:04:54.860
But point is, it's kind of a code
smell when you start to have

80
00:04:54.860 --> 00:04:59.690
any more than maybe 2 or 3,
at the most, arguments for a function.

81
00:04:59.690 --> 00:05:02.542
If you have 4, 5, 10,
20 arguments to a function,

82
00:05:02.542 --> 00:05:05.170
nobody is ever going to remember them.

83
00:05:05.170 --> 00:05:08.497
And even if they could remember them,
nobody is gonna wanna write null, null,

84
00:05:08.497 --> 00:05:11.810
null, null, null to skip all
the ones that they don't care about.

85
00:05:11.810 --> 00:05:14.870
Or in our case we'd have to write
undefined, undefined, undefined,

86
00:05:14.870 --> 00:05:17.900
undefined to skip over the ones
that we don't care about.

87
00:05:17.900 --> 00:05:21.118
That's terrible, so my suggestion to you,

88
00:05:21.118 --> 00:05:25.526
is one practical usage for
this object destructuring is start

89
00:05:25.526 --> 00:05:30.543
switching any function that you have
that takes 3 or more arguments.

90
00:05:30.543 --> 00:05:32.861
Switch it to an object destructuring so

91
00:05:32.861 --> 00:05:36.070
that people can name
their arguments instead.

92
00:05:36.070 --> 00:05:40.720
Which means, that I can skip the b1
entirely if I don't wanna pass it in,

93
00:05:40.720 --> 00:05:43.503
meaning that it could
have a default value.

94
00:05:43.503 --> 00:05:45.410
And it will pick that default value up.

95
00:05:45.410 --> 00:05:48.313
So I can skip over b entirely, and
I can list these in different orders.

96
00:05:48.313 --> 00:05:51.699
I don't have to remember what
order they need to be listed in.

97
00:05:51.699 --> 00:05:53.506
I can list them in whatever order I want

98
00:05:53.506 --> 00:05:56.366
to.
&gt;&gt; Kyle Simpson: So

99
00:05:56.366 --> 00:05:58.249
you give much more
freedom to the call site.

100
00:06:02.180 --> 00:06:07.660
That's one real practical usage for
object destructuring is to embody this,

101
00:06:07.660 --> 00:06:10.620
what we call named arguments, pattern.

102
00:06:14.520 --> 00:06:17.090
See I already forgot it,
I told you I always forget this.

103
00:06:17.090 --> 00:06:20.090
We need the empty object there.

104
00:06:21.180 --> 00:06:23.210
In case somebody doesn't
pass in the object,

105
00:06:23.210 --> 00:06:25.900
we want it to gracefully fall back.

