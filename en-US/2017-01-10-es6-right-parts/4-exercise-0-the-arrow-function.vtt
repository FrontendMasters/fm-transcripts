WEBVTT

1
00:00:00.000 --> 00:00:03.491
[MUSIC]

2
00:00:03.491 --> 00:00:07.210
&gt;&gt; Kyle Simpson: So that's my case for
and against the arrow function.

3
00:00:07.210 --> 00:00:08.980
I now want you to practice.

4
00:00:08.980 --> 00:00:11.920
So I want you to pop open the ex zero.

5
00:00:11.920 --> 00:00:15.570
It's zero because I was too lazy
to go back and renumber stuff.

6
00:00:15.570 --> 00:00:20.030
I inserted this just before the workshop.

7
00:00:20.030 --> 00:00:21.400
This EX zero,

8
00:00:21.400 --> 00:00:25.820
big old hairy mess of FUBAR stuff here,
this is the file that you have.

9
00:00:25.820 --> 00:00:28.990
So you can know that there's
a whole bunch of functions in here.

10
00:00:28.990 --> 00:00:30.710
Functions used in various different ways.

11
00:00:30.710 --> 00:00:32.360
Functions used as IIFEs.

12
00:00:32.360 --> 00:00:34.290
Functions used as function declarations.

13
00:00:34.290 --> 00:00:36.900
Functions used as function
expressions that are return.

14
00:00:36.900 --> 00:00:40.350
Functions used as callbacks passed
to a map or a set time out.

15
00:00:40.350 --> 00:00:43.290
Some of them have a dot
this reference in them.

16
00:00:43.290 --> 00:00:45.310
Whole bunch of functions across this.

17
00:00:45.310 --> 00:00:46.880
You are tasked with exercise zero.

18
00:00:48.100 --> 00:00:51.200
Go crazy with the arrow function, right?

19
00:00:51.200 --> 00:00:53.980
Start rewriting all of your stuff
using the arrow function and

20
00:00:53.980 --> 00:00:55.100
by the way I don't go over this.

21
00:00:55.100 --> 00:00:58.150
But the thing that people that
love the arrow function love to

22
00:00:58.150 --> 00:01:01.560
do is they also love to avoid
the curly braces at all cost.

23
00:01:01.560 --> 00:01:03.170
So let's say we had a function like this.

24
00:01:03.170 --> 00:01:07.770
Let's say we had a function called
foo that did an if statement.

25
00:01:07.770 --> 00:01:11.939
if (x &gt; 5) return x,

26
00:01:11.939 --> 00:01:18.196
else return 1 for example, okay?

27
00:01:18.196 --> 00:01:20.560
Very simple example.

28
00:01:20.560 --> 00:01:24.020
When somebody goes to convert that to
an arrow function now, we have an if

29
00:01:24.020 --> 00:01:28.590
statement, you're gonna be able to use
an if statement in the concise body.

30
00:01:30.140 --> 00:01:32.430
But we don't want to use curly braces,
right?

31
00:01:32.430 --> 00:01:35.740
So the way we do this is we replace
the if statement with a ternary

32
00:01:35.740 --> 00:01:37.960
because that's an expression and
we can use that.

33
00:01:37.960 --> 00:01:41.709
So when you see people write that
they'll say, var food = x and

34
00:01:41.709 --> 00:01:46.100
then they'll start use an ternary and by
the way, we also need to write all of our

35
00:01:46.100 --> 00:01:49.280
arrow functions all on one line for
maximum readability sake.

36
00:01:49.280 --> 00:01:52.691
Write them all in one line with
no indentation or new lines.

37
00:01:52.691 --> 00:01:57.876
So x = x &gt; 5?

38
00:01:57.876 --> 00:02:00.350
x : 1.

39
00:02:00.350 --> 00:02:01.360
Totally readable right?

40
00:02:02.690 --> 00:02:05.770
Nobody has any trouble
parsing that whatsoever.

41
00:02:05.770 --> 00:02:07.050
It's like the good old days of Pearl.

42
00:02:08.730 --> 00:02:13.055
So the point I'm trying to make is that
whenever you start using arrow functions,

43
00:02:13.055 --> 00:02:15.890
you're gonna wanna pull out
every kind of grammatical

44
00:02:15.890 --> 00:02:19.280
trick that you can to avoid
having to write curly braces.

45
00:02:19.280 --> 00:02:23.583
I mean I'm talking about putting like
variable declarations as unused parameters

46
00:02:23.583 --> 00:02:25.160
in your parameter list.

47
00:02:25.160 --> 00:02:29.082
Using the comma operator as
part of a way to put multiple

48
00:02:29.082 --> 00:02:32.230
expressions in one concise expression.

49
00:02:32.230 --> 00:02:37.090
I mean every trick that you can think
of so go crazy with exercise zero.

50
00:02:37.090 --> 00:02:39.060
Try to make as much of that.

51
00:02:39.060 --> 00:02:41.820
By the way, if you run this code,
if I run this,

52
00:02:41.820 --> 00:02:47.380
what you'll notice is that
it returns true at the end.

53
00:02:47.380 --> 00:02:51.020
So your code needs to preserve
the test case that's built into it.

54
00:02:51.020 --> 00:02:52.540
It needs to continue to return true.

55
00:02:52.540 --> 00:02:54.040
If it doesn't, you failed, okay?

