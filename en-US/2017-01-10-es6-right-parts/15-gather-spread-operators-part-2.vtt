WEBVTT

1
00:00:00.000 --> 00:00:04.018
[MUSIC]

2
00:00:04.018 --> 00:00:06.832
&gt;&gt; Kyle Simpson: But here's something cool
because this is just a regular arguments

3
00:00:06.832 --> 00:00:09.245
list, we don't actually need
to add that on to the array,

4
00:00:09.245 --> 00:00:12.120
we can just literally put
the value 42 right there.

5
00:00:12.120 --> 00:00:17.316
We don't even need to modify the array,
just say 42, dot dot dot args.

6
00:00:21.479 --> 00:00:24.792
&gt;&gt; Kyle Simpson: I think that's a whole
lot more declarative form as opposed to

7
00:00:24.792 --> 00:00:26.840
the imperative form over on the left.

8
00:00:28.900 --> 00:00:31.040
What we mean by the difference
between declarative and

9
00:00:31.040 --> 00:00:33.260
imperative is this specifically,
don't miss this.

10
00:00:34.580 --> 00:00:35.840
The difference between declarative and

11
00:00:35.840 --> 00:00:41.060
imperative is that imperative includes
all of the implementation details of how.

12
00:00:41.060 --> 00:00:43.820
But most of those
implementation details of how

13
00:00:43.820 --> 00:00:46.990
are not the things that the programmer
should have to think about at that moment.

14
00:00:47.990 --> 00:00:50.780
So what we're doing is
taking those details,

15
00:00:50.780 --> 00:00:54.760
abstracting them away into
the engine inside of a feature so

16
00:00:54.760 --> 00:00:57.880
that what's left is the stuff
that we should focus on.

17
00:01:00.070 --> 00:01:04.526
How many of you have heard before that the
purpose of abstraction is to hide details,

18
00:01:04.526 --> 00:01:05.675
anybody heard that?

19
00:01:05.675 --> 00:01:08.090
That's probably how you would describe and
I don't agree.

20
00:01:09.250 --> 00:01:11.370
Abstraction is not about hiding things.

21
00:01:11.370 --> 00:01:14.901
If you go back to the original definition
of when the idea of abstraction was

22
00:01:14.901 --> 00:01:17.592
created, what were they trying
to do with abstraction,

23
00:01:17.592 --> 00:01:21.368
they're not trying to hide stuff,
they're not trying to create black boxes.

24
00:01:21.368 --> 00:01:23.880
You know what the purpose
of abstraction is?

25
00:01:23.880 --> 00:01:24.440
Focus.

26
00:01:25.710 --> 00:01:31.210
The purpose of abstraction is to take
two things that are interwoven together,

27
00:01:31.210 --> 00:01:35.510
and by interwoven together, it makes it
hard to reason about either one of them.

28
00:01:35.510 --> 00:01:41.460
To separate the two, so that each
one can be individually focused on,

29
00:01:41.460 --> 00:01:42.810
depending on what you need to focus on.

30
00:01:44.020 --> 00:01:47.360
So what we're doing is we're taking
the thing that's gonna happen and

31
00:01:47.360 --> 00:01:51.180
the how to do it and teasing those
two apart with a declarative form.

32
00:01:51.180 --> 00:01:55.160
Meaning that we can focus on
the stuff that actually matters.

33
00:01:55.160 --> 00:01:59.900
In this case, what matters is that we want
to add 42 on as the first argument and

34
00:01:59.900 --> 00:02:01.940
pass everything else along.

35
00:02:01.940 --> 00:02:03.140
That's the thing that matters.

36
00:02:03.140 --> 00:02:06.690
All the other code over there was just
a distraction to get us to that point.

37
00:02:08.320 --> 00:02:12.210
So the declarative form here
helps us to make more reasonable,

38
00:02:12.210 --> 00:02:13.769
understandable and readable code.

39
00:02:15.100 --> 00:02:17.542
It removes the details
that distract the reader.

40
00:02:17.542 --> 00:02:18.610
Are you following me?

41
00:02:20.420 --> 00:02:22.310
And that's the narrative
we wanna be looking for,

42
00:02:22.310 --> 00:02:24.360
every feature you look at an ES6.

43
00:02:24.360 --> 00:02:27.930
There's a thousand other features in the
language that I'm not talking about today.

44
00:02:27.930 --> 00:02:30.630
Whatever choice you use of features or
whatever,

45
00:02:30.630 --> 00:02:32.770
I want you to evaluate it based upon that.

46
00:02:32.770 --> 00:02:35.550
Is it helping me to
communicate more clearly?

47
00:02:37.570 --> 00:02:40.710
Sometimes that will be that we create
shorter code like we're doing here.

48
00:02:40.710 --> 00:02:44.490
But there will be times
when the most communicative

49
00:02:44.490 --> 00:02:46.780
ES6 code is actually
longer than the other one.

50
00:02:47.840 --> 00:02:50.710
So it's not about saving characters,
it's about communicating more clearly.

51
00:02:53.320 --> 00:02:56.340
&gt;&gt; Speaker 2: So you said args is
a keyword here, it's a new keyword?

52
00:02:56.340 --> 00:02:57.080
&gt;&gt; Kyle Simpson: No, no, no.

53
00:02:57.080 --> 00:02:58.909
The dot dot dot is an operator.

54
00:02:58.909 --> 00:03:00.257
Here, I can call this whatever I want.

55
00:03:00.257 --> 00:03:03.178
I can call it foo, I mean,
bar if I want to, for example.

56
00:03:03.178 --> 00:03:04.831
Doesn't matter what.

57
00:03:04.831 --> 00:03:05.910
&gt;&gt; Speaker 2: Okay, yeah, thanks.

58
00:03:05.910 --> 00:03:07.998
&gt;&gt; Kyle Simpson: I have to
call it [INAUDIBLE] I guess.

59
00:03:07.998 --> 00:03:12.160
All right.

60
00:03:12.160 --> 00:03:16.210
Yeah, I just by my convention,
I use args, some people used to use rest

61
00:03:16.210 --> 00:03:20.520
cuz they like the rest operator usage.

62
00:03:20.520 --> 00:03:24.280
The dot dot dot gathers up everything
that's not already accounted for, so

63
00:03:24.280 --> 00:03:29.730
if we had already accounted for
say one of the arguments

64
00:03:29.730 --> 00:03:33.560
with the named parameter, dot dot dot
args is gonna be everything else.

65
00:03:33.560 --> 00:03:35.800
Not including the thing
that's accounted for by x.

66
00:03:37.540 --> 00:03:38.040
Okay?

67
00:03:39.110 --> 00:03:41.920
So this would have
the effect of essentially

68
00:03:41.920 --> 00:03:46.060
throwing away whatever the first
thing was that we passed in.

69
00:03:46.060 --> 00:03:47.290
And replacing it with 42.

70
00:03:48.590 --> 00:03:49.580
You see how I did that?

71
00:03:49.580 --> 00:03:51.550
If I did the equivalent,
I'm not gonna waste your time on it but

72
00:03:51.550 --> 00:03:55.670
if I did the equivalent, I need to do
a slice and slice off the first one and

73
00:03:55.670 --> 00:03:57.520
then pass in a new one or whatever.

74
00:03:57.520 --> 00:04:00.240
It's just it's syntactically done for us.

75
00:04:00.240 --> 00:04:02.790
Throwing away the parameter
x that we don't care about.

76
00:04:05.420 --> 00:04:08.940
Question was can we have
default params with gather?

77
00:04:08.940 --> 00:04:16.540
So you can do defaults here, of course,
you can do defaults there all you want.

78
00:04:16.540 --> 00:04:20.215
I think it makes complete sense that we
ought to be able to default that args

79
00:04:20.215 --> 00:04:22.533
array to something like for
example, 1, 2, 3.

80
00:04:23.640 --> 00:04:27.000
It's not included in the language, and
when I asked them, can we add that,

81
00:04:27.000 --> 00:04:30.210
they're like you're a bad person for
asking that so stop asking.

82
00:04:31.510 --> 00:04:34.480
Which is why I don't participate
in the spec close anymore cuz

83
00:04:34.480 --> 00:04:36.840
every time I come to them with an idea,
they shoot me down.

84
00:04:36.840 --> 00:04:40.290
So I don't know why we can't
have default values on the.

85
00:04:40.290 --> 00:04:41.680
&gt;&gt; Speaker 3: The question
was a little bit different.

86
00:04:41.680 --> 00:04:42.310
&gt;&gt; Kyle Simpson: Was it?

87
00:04:42.310 --> 00:04:43.830
Sorry.
&gt;&gt; Speaker 3: They're asking if the dot

88
00:04:43.830 --> 00:04:47.818
dot args can be used as a default value.

89
00:04:47.818 --> 00:04:49.305
&gt;&gt; Kyle Simpson: No, sorry no, so

90
00:04:49.305 --> 00:04:55.160
the question was can I say something
like y = dot dot dot args?

91
00:04:55.160 --> 00:04:57.410
So you have to think about
it in that particular case.

92
00:04:59.150 --> 00:05:03.470
We are back to a value semantic,
not an assignment semantic, so

93
00:05:03.470 --> 00:05:06.170
we're back on the value
side of the equation.

94
00:05:06.170 --> 00:05:08.440
So dot dot dot would actually
be spreading out the array.

95
00:05:09.970 --> 00:05:14.102
So technically,
you could do something like dot dot dot x.

96
00:05:14.102 --> 00:05:17.785
No, that won't work, never mind,
you can't spread out in a non-comma list,

97
00:05:17.785 --> 00:05:18.720
forget I said that.

98
00:05:20.230 --> 00:05:21.520
So no, you can't use it like that.

99
00:05:21.520 --> 00:05:22.276
Sorry.

100
00:05:30.411 --> 00:05:32.157
&gt;&gt; Kyle Simpson: Okay.

101
00:05:32.157 --> 00:05:32.894
&gt;&gt; Speaker 4: I have a question.

102
00:05:32.894 --> 00:05:33.712
&gt;&gt; Kyle Simpson: Yes, sorry?

103
00:05:33.712 --> 00:05:36.220
&gt;&gt; Speaker 4: Can you spread
the keyword arguments or

104
00:05:36.220 --> 00:05:38.430
does it have to be an actual array?

105
00:05:40.300 --> 00:05:41.580
&gt;&gt; Kyle Simpson: There
is a proposed feature.

106
00:05:41.580 --> 00:05:43.299
So arguments is an object, and

107
00:05:43.299 --> 00:05:48.600
we can't use the dot dot dot operator by
default against regular objects right now.

108
00:05:48.600 --> 00:05:51.430
There is a proposal that is now,
I think, stage two.

109
00:05:52.990 --> 00:05:56.080
To add the dot dot dot operator,
both gathering and

110
00:05:56.080 --> 00:05:58.580
spreading to objects, as well.

111
00:05:58.580 --> 00:06:01.110
It's not in the spec yet, but
it's working its way through the process.

112
00:06:01.110 --> 00:06:02.880
So sometime over the next year or
whatever.

113
00:06:02.880 --> 00:06:03.830
We'll probably see that land.

114
00:06:06.470 --> 00:06:09.032
&gt;&gt; Speaker 5: So
they would be array-like objects?

115
00:06:09.032 --> 00:06:11.180
Or objects in general.

116
00:06:11.180 --> 00:06:14.400
I guess I don't know how that would
work with a plain object structure?

117
00:06:14.400 --> 00:06:15.874
&gt;&gt; Kyle Simpson: Well, depends on which
line of code you're talking about.

118
00:06:15.874 --> 00:06:18.145
If you're talking about line one or
talking about line two.

119
00:06:18.145 --> 00:06:20.140
&gt;&gt; Speaker 5: I'm talking about spreads,
the line two.

120
00:06:21.160 --> 00:06:23.960
&gt;&gt; Kyle Simpson: So,
if I had the ability to spread and

121
00:06:23.960 --> 00:06:27.150
I did this, there's no more object at all.

122
00:06:27.150 --> 00:06:32.840
What's getting passed along is the
individual values in the arguments object.

123
00:06:32.840 --> 00:06:36.870
&gt;&gt; Speaker 5: My question was, can you
apply the spread operator to arguments?

124
00:06:36.870 --> 00:06:40.180
Because arguments isn't an array,
it's a array-like object.

125
00:06:40.180 --> 00:06:44.300
&gt;&gt; Kyle Simpson: Well not yet, but when
this lands in a year, or whatever however

126
00:06:44.300 --> 00:06:47.950
long it takes to finish, you will
be able to do dot dot dot argument.

127
00:06:47.950 --> 00:06:51.422
&gt;&gt; Speaker 5: So I must have missed it,
is it already approved or is it still-

128
00:06:51.422 --> 00:06:52.181
&gt;&gt; Kyle Simpson: It's a stage two.

129
00:06:52.181 --> 00:06:53.290
&gt;&gt; Speaker 5: Okay.

130
00:06:53.290 --> 00:06:56.407
&gt;&gt; Kyle Simpson: First four stages,
actually five stages and

131
00:06:56.407 --> 00:07:01.040
it's at stage two, so
it's working its way through.

132
00:07:01.040 --> 00:07:05.551
There's I'd say, a better than 50% chance
that will land but we don't know when.

133
00:07:11.126 --> 00:07:14.432
&gt;&gt; Kyle Simpson: One of the complications
there just because you're asking.

134
00:07:14.432 --> 00:07:18.311
One of the complications there, spreading
out an object is not such a big deal

135
00:07:18.311 --> 00:07:21.892
cuz you can think conceptually or
just loop over all of its properties,

136
00:07:21.892 --> 00:07:25.850
but then there's questions like,
does that include only owned properties?

137
00:07:25.850 --> 00:07:29.542
Or what about properties that
are delegated in the prototype, should it,

138
00:07:29.542 --> 00:07:31.072
by default, give all of them?

139
00:07:31.072 --> 00:07:33.452
But really the gather is
the question with objects,

140
00:07:33.452 --> 00:07:36.695
what does it mean to gather a bunch of
values in, how do we figure out what

141
00:07:36.695 --> 00:07:40.260
the property names ought to be
when we gather into an object?

142
00:07:40.260 --> 00:07:43.440
So there's some weirdness that
they're trying to work out but

143
00:07:43.440 --> 00:07:45.790
I think it's got a pretty decent
chance of eventually landing.

