WEBVTT

1
00:00:03.797 --> 00:00:07.599
&gt;&gt; Kyle Simpson: What we wanna do now is
turn our attention to things that I really

2
00:00:07.599 --> 00:00:09.628
do think we should be using more.

3
00:00:09.628 --> 00:00:12.257
These are more of the right
parts of the Essex and

4
00:00:12.257 --> 00:00:15.160
the first thing I wanna talk
about is block scoping.

5
00:00:16.290 --> 00:00:20.320
So, quickly all motivate block scoping
I've covered these sorts of things,

6
00:00:21.660 --> 00:00:23.230
many of my other classes as well.

7
00:00:23.230 --> 00:00:27.580
So, I don't wanna keep repeating,
but just wanna quickly motivate.

8
00:00:27.580 --> 00:00:33.300
Let's say I have a function called foo and
there's some condition by which I want

9
00:00:33.300 --> 00:00:38.210
to swap those two, like for example
the case where x is greater than y.

10
00:00:38.210 --> 00:00:41.750
Normally, you do something like this and

11
00:00:41.750 --> 00:00:47.900
then you'd say y = tmp; and we've used of
our keyword inside of an if statement.

12
00:00:47.900 --> 00:00:51.850
Now, functionally meaning operationally

13
00:00:51.850 --> 00:00:55.890
the var keyword here is attaching
a temp variable to the scope of foo.

14
00:00:55.890 --> 00:00:58.240
That's what people like to call hoisting.

15
00:00:58.240 --> 00:01:01.269
Hoisting's made up,
that's I not a real thing, but

16
00:01:01.269 --> 00:01:05.041
that's the metaphor that we use
to describe how lexical variables

17
00:01:05.041 --> 00:01:08.561
are attached to their lexical
environments at compile time.

18
00:01:08.561 --> 00:01:11.545
So, it's hoisted to the scope of foo.

19
00:01:11.545 --> 00:01:13.652
But, why do we put it
inside of the if statement?

20
00:01:13.652 --> 00:01:16.000
What is going on stylistically?

21
00:01:16.000 --> 00:01:17.450
Cuz this is the thing that people do,

22
00:01:17.450 --> 00:01:21.710
they'll put their var keywords in specific
locations even though they know they

23
00:01:21.710 --> 00:01:23.830
actually behave as if they
belong to the whole function.

24
00:01:23.830 --> 00:01:27.540
Well, what we're doing here is we're
stylistically saying I want the tenth

25
00:01:27.540 --> 00:01:30.360
variable to belong only
to that if statement.

26
00:01:30.360 --> 00:01:31.490
That's what it's for.

27
00:01:31.490 --> 00:01:35.030
Another example is when you have a piece
of code like this and you do a for

28
00:01:35.030 --> 00:01:40.470
(var i) equals
&gt;&gt; Kyle Simpson: And

29
00:01:40.470 --> 00:01:43.170
then you have some code inside of the for
loop.

30
00:01:43.170 --> 00:01:46.142
The var i here is going to be
hoisted to the scope of foo,

31
00:01:46.142 --> 00:01:49.812
the i is available everywhere, but
why do we put it on the for loop?

32
00:01:49.812 --> 00:01:53.680
The reason why, at least for most of us,
the reason why we put it on the for

33
00:01:53.680 --> 00:01:57.590
loop is because we are stylistically
signaling to the reader of this code

34
00:01:57.590 --> 00:01:59.390
i belong to the for loop.

35
00:01:59.390 --> 00:02:02.478
Don't use it before or after,
even though you can, don't.

36
00:02:02.478 --> 00:02:06.823
Even though you can use temp elsewhere,
don't, it's supposed to be used only for

37
00:02:06.823 --> 00:02:07.890
this if statement.

38
00:02:08.960 --> 00:02:14.160
These are the kinds of scenarios under
which block scoping makes entirely sense.

39
00:02:14.160 --> 00:02:17.890
It makes complete sense in all of
the languages that have ever had it and

40
00:02:17.890 --> 00:02:19.660
now JavaScript has it.

41
00:02:19.660 --> 00:02:21.600
Unfortunately, we can't
just make the var key or

42
00:02:21.600 --> 00:02:24.970
blocks go because that would
break a lot of old code.

43
00:02:24.970 --> 00:02:27.630
So, we had to add a new declared type.

44
00:02:27.630 --> 00:02:29.830
That declared type as the let keyword.

45
00:02:29.830 --> 00:02:33.380
In both of these cases,
the let keyword will enforce

46
00:02:33.380 --> 00:02:35.909
the thing that we were already
stylistically signaling.

47
00:02:37.100 --> 00:02:39.750
That's a really important point,
don't miss what I just said.

48
00:02:39.750 --> 00:02:43.087
The let keyword in forces,
at the compiler level,

49
00:02:43.087 --> 00:02:47.896
it enforces what we already stylistically
signaled meaning I want temp to

50
00:02:47.896 --> 00:02:52.956
belong to the if statement now temp
actually does belong to the if statement.

51
00:02:52.956 --> 00:02:56.318
If we try to use temp before or
after, we're gonna get an error,

52
00:02:56.318 --> 00:03:00.370
if we try to use I outside of the for
loop we're going to get an error.

53
00:03:00.370 --> 00:03:03.190
Because the let keyword is going
to enforce that which we were

54
00:03:03.190 --> 00:03:05.150
already stylistically signaling.

55
00:03:05.150 --> 00:03:08.680
That is how I think you ought
to approach this let keyword

56
00:03:08.680 --> 00:03:11.760
to enforce the things that you
already stylistically signal.

57
00:03:12.830 --> 00:03:15.530
Does that mean that you ought to?

58
00:03:15.530 --> 00:03:20.630
Make all your voters in the less as
some people are liking to say alright

59
00:03:20.630 --> 00:03:23.760
let is the new var there's
a bunch of people on T-C 39 and

60
00:03:23.760 --> 00:03:29.750
this is a strong cult bandwagon
that tells us lets the new var var

61
00:03:29.750 --> 00:03:33.010
is a code smell these are all blog post
titles that have actually been written.

62
00:03:34.640 --> 00:03:39.740
So, should we be using the let keyword
in places where it doesn't actually

63
00:03:39.740 --> 00:03:44.550
enforce some sort of block scoping, for
example, at the top level of our function.

64
00:03:44.550 --> 00:03:47.958
You can, I don't think you should.

65
00:03:47.958 --> 00:03:52.420
This the place where I start to diverge
from many of my peers who teach JavaScript

66
00:03:52.420 --> 00:03:56.590
and I respect their opinions but
I think they're wrong on this part.

67
00:03:56.590 --> 00:03:59.460
They're missing the fact that
the var keyword actually tells us

68
00:03:59.460 --> 00:04:00.190
importance stuff.

69
00:04:01.330 --> 00:04:04.650
The var keyword tells us when
used in those positions,

70
00:04:04.650 --> 00:04:08.480
this is a variable that I intend
to use across the whole function.

71
00:04:08.480 --> 00:04:11.960
The let keyword doesn't tell us that,
its position tells us that but

72
00:04:11.960 --> 00:04:16.080
the let keyword itself does not
visually signal what our intent is.

73
00:04:16.080 --> 00:04:20.400
If you use the var key word here it is
now telling the reader of this code

74
00:04:20.400 --> 00:04:23.479
I know what I'm doing and
I'm intending to use z everywhere.

75
00:04:25.350 --> 00:04:28.010
So, my personal take is you
ought to use both let and var.

76
00:04:29.400 --> 00:04:33.180
Use vars in the places where you intend
to use them across lots of scopes.

77
00:04:33.180 --> 00:04:36.780
Use lets in the places where you
were already stylistically saying,

78
00:04:36.780 --> 00:04:38.130
I wanna contain it to this block.

79
00:04:40.020 --> 00:04:44.803
I think that's what it's good for,
I don't believe in the let is the new var,

80
00:04:44.803 --> 00:04:46.195
I believe let and var.

81
00:04:46.195 --> 00:04:47.794
Let is the new helper to var,

82
00:04:47.794 --> 00:04:52.330
it helps you enforce the places where you
wanted var to be block scoped all along.

83
00:04:53.460 --> 00:04:56.790
Yes.
&gt;&gt; Speaker 2: Question from the room.

84
00:04:56.790 --> 00:05:01.190
I've heard quote, only used let in
places where you want the value to be

85
00:05:01.190 --> 00:05:04.340
mutable const everywhere else.
&gt;&gt; Kyle Simpson: We're gonna talk about

86
00:05:04.340 --> 00:05:05.930
constant a little bit.

87
00:05:05.930 --> 00:05:07.740
I'm not there yet, so
we'll come back to that question.

88
00:05:11.430 --> 00:05:15.755
I'm just talking about how you decide and
again, just like with the error function,

89
00:05:15.755 --> 00:05:19.450
I'm trying to present you the different
cases here, cuz I want you to critically

90
00:05:19.450 --> 00:05:24.410
think as engineers I want you to analyze
don't just follow some lint rule.

91
00:05:24.410 --> 00:05:26.770
Think about,
which one is more appropriate?

92
00:05:26.770 --> 00:05:27.940
Which one communicates better?

93
00:05:29.840 --> 00:05:33.160
So, [COUGH] some other places where

94
00:05:33.160 --> 00:05:36.600
I think the var keyword is actually
superior to the let keyword.

95
00:05:37.900 --> 00:05:40.220
Because there are places
where I think that is true.

96
00:05:40.220 --> 00:05:41.720
Let's say that I had a line like this.

97
00:05:41.720 --> 00:05:44.400
Let's say that my line
of my vars seen here.

98
00:05:44.400 --> 00:05:49.090
Was actually calling some other function

99
00:05:49.090 --> 00:05:54.052
like bar to get its value back,
no big deal.

100
00:05:54.052 --> 00:05:56.060
I'm following the ES6 bandwagon.

101
00:05:56.060 --> 00:05:57.620
I put a let keyboard on it.

102
00:05:57.620 --> 00:06:00.461
Seems great, cuz that z is
available to the whole thing.

103
00:06:00.461 --> 00:06:03.918
Now, maybe I'm the only one that's
ever had a JavaScript error in

104
00:06:03.918 --> 00:06:07.960
their program but I get JavaScript
errors in my programs, true confession.

105
00:06:07.960 --> 00:06:11.610
And when I get JavaScript
there's one of the ways that I

106
00:06:11.610 --> 00:06:14.370
narrowed down those things of course,
I try to use debugging tools but

107
00:06:14.370 --> 00:06:18.440
one of the ways that I narrow those things
down is to try catches around stuff.

108
00:06:18.440 --> 00:06:21.020
So ,let's just say I've narrowed down
that there is something happening with

109
00:06:21.020 --> 00:06:24.020
the statement I want to figure out if this
is the place where the error is coming.

110
00:06:24.020 --> 00:06:28.638
So, I just casually come in and
throw in my little try catch around this.

111
00:06:28.638 --> 00:06:29.680
Do you spot the problem?

112
00:06:32.520 --> 00:06:36.250
You see,
what I did is I tried caught one error but

113
00:06:37.610 --> 00:06:40.970
then I created another error that's
one of the big sins in all of

114
00:06:40.970 --> 00:06:45.430
programming whenever one fix,
causes another problem.

115
00:06:45.430 --> 00:06:46.380
What's my another problem?

116
00:06:46.380 --> 00:06:49.520
My another problem is now z
doesn't belong anywhere else.

117
00:06:49.520 --> 00:06:51.310
So, even if I figure
out what's wrong here,

118
00:06:51.310 --> 00:06:53.630
I'm gonna get another error
that says z is not divine.

119
00:06:53.630 --> 00:06:55.090
I'm like, what the hell?

120
00:06:55.090 --> 00:06:56.940
Z is clearly there.

121
00:06:56.940 --> 00:06:58.500
Crap, I forgot I had a lit keyword.

122
00:06:59.530 --> 00:07:02.610
So, whatever I'm doing that quick little
like debugging I'm gonna have to remember

123
00:07:02.610 --> 00:07:05.142
in those places this thing
can't just be trying.

124
00:07:05.142 --> 00:07:09.035
I need a var there,
&gt;&gt; Kyle Simpson: Or

125
00:07:09.035 --> 00:07:11.937
you're gonna do what some people say,
which is, no,

126
00:07:11.937 --> 00:07:16.120
what you should have done is you never
should have had those two together.

127
00:07:16.120 --> 00:07:20.834
You should have had the let z separate and
then the z equals var and

128
00:07:20.834 --> 00:07:22.670
its own separate thing.

129
00:07:24.400 --> 00:07:27.370
So, you should add those separate
there's your problem solved.

130
00:07:27.370 --> 00:07:30.490
This is the argument that's often
made there's your problem solved.

131
00:07:30.490 --> 00:07:34.630
Now, what I'm gonna say is this, I think,

132
00:07:34.630 --> 00:07:39.490
this is personal taste,
I think that one of the things that aids

133
00:07:39.490 --> 00:07:44.370
readability in my code Is when
the declaration, the first usage

134
00:07:44.370 --> 00:07:48.990
of a variable is as close as possible
to the declaration of that variable.

135
00:07:48.990 --> 00:07:52.030
By as close as possible,
I prefer them to be on the same line.

136
00:07:53.060 --> 00:07:54.430
But if they can't be on the same line,

137
00:07:54.430 --> 00:07:57.590
I really want them to be
as close as possible, okay.

138
00:07:58.680 --> 00:08:01.060
In this particular example,
they're only separated by two or

139
00:08:01.060 --> 00:08:02.730
three lines no big deal.

140
00:08:02.730 --> 00:08:05.140
But as things go as our code evolves,

141
00:08:05.140 --> 00:08:08.040
you might start to see more
separation between those.

142
00:08:08.040 --> 00:08:11.520
Could be five lines could be one hundred
lines could be a thousand lines between

143
00:08:11.520 --> 00:08:14.600
the place where it was declared
in the place where it was used.

144
00:08:14.600 --> 00:08:18.225
And as soon as you start to create more
and more visual separation especially more

145
00:08:18.225 --> 00:08:21.905
than about three to five lines, now you
have a visual readability problem because

146
00:08:21.905 --> 00:08:24.380
somebody's going to look
at that line's equals bar.

147
00:08:24.380 --> 00:08:26.999
So, wait a minute, where does z come from?

148
00:08:26.999 --> 00:08:29.366
They have to go hunting for that let z.

149
00:08:29.366 --> 00:08:33.786
And then have to make sure that they don't
cross any curly brace boundaries that they

150
00:08:33.786 --> 00:08:37.084
really found it exactly the same
scope as the place that it was so

151
00:08:37.084 --> 00:08:38.880
I think you ought to use.

152
00:08:38.880 --> 00:08:42.290
Your variable declarations
as close as possible

153
00:08:42.290 --> 00:08:45.950
to where you're gona use
them the first time.

154
00:08:45.950 --> 00:08:50.639
That also means that if a variable is used
in two very different places in the code.

155
00:08:50.639 --> 00:08:53.580
I'm gonna shock you and say,
I think you ought to declare it twice.

156
00:08:55.040 --> 00:08:56.842
You ought to declared
up here we use it and

157
00:08:56.842 --> 00:09:00.393
then you had to redeclare it a thousand
lines later when you use it way down here.

158
00:09:00.393 --> 00:09:02.102
You can't do that with the let key word,

159
00:09:02.102 --> 00:09:06.290
you can't read declare with the let key
word cuz you're gonna get an error.

160
00:09:06.290 --> 00:09:10.330
This is one of those places where in my
opinion the var keyword shines because it

161
00:09:10.330 --> 00:09:13.830
allows me readability wise to put that
little notation down there at the bottom.

162
00:09:13.830 --> 00:09:16.936
I am just reminding you the z
is coming from this outer scope.

163
00:09:16.936 --> 00:09:19.780
So, I put the var z down
there at the bottom.

164
00:09:19.780 --> 00:09:22.519
Another place where the shows
up is in if statements.

165
00:09:22.519 --> 00:09:24.890
I regularly do this in my code.

166
00:09:24.890 --> 00:09:27.900
I'll have some kind of condition doesn't
matter what the condition is and I have

167
00:09:27.900 --> 00:09:32.050
a whole bunch of variables that I create
and initialize based upon this condition.

168
00:09:32.050 --> 00:09:37.176
So, I'll say var w = and
var r = over and over and

169
00:09:37.176 --> 00:09:41.553
over again, and then I'll have an else,

170
00:09:41.553 --> 00:09:46.064
some other condition.
&gt;&gt; Kyle Simpson: And

171
00:09:46.064 --> 00:09:48.936
I'll have a different set of
initializations for those.

172
00:09:48.936 --> 00:09:52.052
And maybe a whole different set of logic
that's happening in that particular case.

173
00:09:52.052 --> 00:09:56.136
And then I'll do another else and I'll
re-declare them again and again and again.

174
00:09:56.136 --> 00:10:00.897
Do you spot the problem values let's here?
&gt;&gt; Kyle Simpson: I'd be block

175
00:10:00.897 --> 00:10:02.610
scoping those if statements.

176
00:10:02.610 --> 00:10:07.110
These are not really if blocks in that
sense and they're not really blocked.

177
00:10:07.110 --> 00:10:09.980
They're not really scopes in that sense.

178
00:10:09.980 --> 00:10:13.860
They're just collections of assignments
that I want to conditionally happen.

179
00:10:13.860 --> 00:10:17.430
Don't go using some crazy set
of turnaries stuff to do this,

180
00:10:17.430 --> 00:10:18.450
just use the var keyword.

181
00:10:20.490 --> 00:10:21.830
And if you want, go ahead and

182
00:10:21.830 --> 00:10:25.370
be super redundant put the barkeeper
declaration also outside of the of

183
00:10:25.370 --> 00:10:30.950
statement because what you're trying to do
really is not to write as few characters

184
00:10:30.950 --> 00:10:34.906
as possible to write as many characters
as it takes to get your message across.

185
00:10:34.906 --> 00:10:38.550
Because you wanna communicate better,
at least I hope that's what you want.

186
00:10:38.550 --> 00:10:40.660
That's what I'm trying to get out here.

187
00:10:40.660 --> 00:10:43.106
So, I think there are places
operationally and

188
00:10:43.106 --> 00:10:47.033
stylistically that the var keyword in
the let keyword can be used together.

189
00:10:47.033 --> 00:10:48.867
They have different purposes and

190
00:10:48.867 --> 00:10:52.150
one does not replace the other
we have to use them together.

