WEBVTT

1
00:00:00.370 --> 00:00:04.492
Alright, so let's kind of combine some
of this stuff because I really wanted to

2
00:00:04.492 --> 00:00:08.062
highlight elements that maybe we
know have some functionality, but

3
00:00:08.062 --> 00:00:11.771
maybe we haven't thought about all
the functionality that they have.

4
00:00:11.771 --> 00:00:15.421
So, I made this little button here, and
it literally this is the code here and

5
00:00:15.421 --> 00:00:16.721
this is the button itself.

6
00:00:16.721 --> 00:00:20.427
So, it's button unclick,
alert, hello, as is click me.

7
00:00:20.427 --> 00:00:26.100
So if I click here and I tab over,
let me tab down to the button.

8
00:00:27.730 --> 00:00:32.825
Button, click me and I go ahead and
I hit Enter on it, it says hello.

9
00:00:32.825 --> 00:00:35.500
And if I click it, it says hello so
no surprise there.

10
00:00:36.720 --> 00:00:41.631
So, sometimes, we'll do things like we'll
need or we'll want our design system

11
00:00:41.631 --> 00:00:46.191
will use like a non button for some type
of button context like a div with a click

12
00:00:46.191 --> 00:00:49.721
event and when you click that div,
it does something cool.

13
00:00:49.721 --> 00:00:54.189
So we could do something like this like
div, unclick, alert, hello, click me.

14
00:00:54.189 --> 00:00:56.170
And then we would need to do
a few other things, right?

15
00:00:56.170 --> 00:00:59.720
Like we would need to go into CSS and
add a cursor pointer so we

16
00:00:59.720 --> 00:01:04.693
get the little mouse clickable hand, but
for the most part, this would work fine.

17
00:01:04.693 --> 00:01:08.668
It's an element, it says Click me,
you click it does something.

18
00:01:08.668 --> 00:01:11.935
So, the problem here is that,
when a screen reader hits it,

19
00:01:11.935 --> 00:01:16.368
a screen reader will have absolutely no
idea what its purpose is, or what it does.

20
00:01:16.368 --> 00:01:20.229
Screen readers can't listen to unclick
events and know that they do something.

21
00:01:20.229 --> 00:01:23.835
So, we have this really nice thing part
of ARIA, which we'll learn about next,

22
00:01:23.835 --> 00:01:24.930
there's role.

23
00:01:24.930 --> 00:01:28.100
So, you can give it a role equals button
and now when a screen reader hits,

24
00:01:28.100 --> 00:01:30.210
it'll be like, hey, there's a div here.

25
00:01:30.210 --> 00:01:32.969
But it won't read it as a div,
it'll read it as a button, so,

26
00:01:32.969 --> 00:01:36.099
tell the user, hey, there's a button
here that says, click me, and

27
00:01:36.099 --> 00:01:39.422
so then the user can click it and
they'll get the hell up, which is great.

28
00:01:39.422 --> 00:01:43.841
An issue though, which we've seen
with like form fields and buttons is,

29
00:01:43.841 --> 00:01:47.762
you can tab to them on their tablet
will their focus double, and so

30
00:01:47.762 --> 00:01:52.135
if you're not using a mouse, you can
get to them and interact with them.

31
00:01:52.135 --> 00:01:55.737
So, if we have this div with role
equals button that will work great for

32
00:01:55.737 --> 00:02:00.420
a mouse click but it will not be able to
be focused with using the keyboard only.

33
00:02:00.420 --> 00:02:04.161
So again, we have a nice thing,
we have this thing called tabindex.

34
00:02:04.161 --> 00:02:08.683
So we can add tabindex 0, and I'll go over
what the value means but adding tabindex

35
00:02:08.683 --> 00:02:13.080
means it's focusable with the keyboard
you can tab to it essentially.

36
00:02:13.080 --> 00:02:16.895
So we've got tabindex, we've got role
= button, we've got our onclick event,

37
00:02:16.895 --> 00:02:17.398
so great.

38
00:02:17.398 --> 00:02:20.180
So now, we're here, we can tab to it,
we click on and it does the thing, and

39
00:02:20.180 --> 00:02:22.660
the screen reader knows
that it's a button.

40
00:02:22.660 --> 00:02:24.815
But if you're a keyboard only user,

41
00:02:24.815 --> 00:02:28.093
you're not gonna be able to
click on the thing, right?

42
00:02:28.093 --> 00:02:29.766
That's not everything a button does,

43
00:02:29.766 --> 00:02:31.600
buttons also work if
you hit enter on them.

44
00:02:32.750 --> 00:02:35.536
So ,we're still trying to make
this div into a button so

45
00:02:35.536 --> 00:02:38.143
we can do a little bit more
here we have the tab index,

46
00:02:38.143 --> 00:02:41.542
we have the roll equals button,
we should also add like an onkeyup.

47
00:02:41.542 --> 00:02:44.934
And if you wanted to get precise
with it in your onkeyup function,

48
00:02:44.934 --> 00:02:48.385
you would listen for the event and
see which key was hit and a space or

49
00:02:48.385 --> 00:02:52.790
enter was hit, you trigger it,
and if not, you won't trigger it.

50
00:02:52.790 --> 00:02:56.338
So now we're getting a little bit more
into like this is starting to behave like

51
00:02:56.338 --> 00:02:57.214
an actual button.

52
00:02:57.214 --> 00:03:01.342
So the last thing is that buttons that
just say click me, are not very helpful

53
00:03:01.342 --> 00:03:06.000
to screenreader users because they don't
know why they're supposed to be clicked.

54
00:03:06.000 --> 00:03:09.934
Often the clues for like why you
want to do something are visual.

55
00:03:09.934 --> 00:03:13.769
So in this case, we would want to add
a label to it and since it's a div,

56
00:03:13.769 --> 00:03:16.959
we can't use a label tag,
we'd have to use aria-label.

57
00:03:16.959 --> 00:03:20.681
So aria-label alert the word hello,
Tab index zero roll button,

58
00:03:20.681 --> 00:03:23.520
unclick alert onkey-up alert, click me.

59
00:03:23.520 --> 00:03:24.700
And now finally,

60
00:03:24.700 --> 00:03:29.424
we have everything that we just had
included by just using a button tag.

61
00:03:29.424 --> 00:03:33.190
And so I kind of wanted to highlight this
because it's cool for a few reasons.

62
00:03:33.190 --> 00:03:37.529
One, I think it highlights how much
some of these semantic HTML elements do.

63
00:03:37.529 --> 00:03:39.189
They do a lot for us, right?

64
00:03:39.189 --> 00:03:43.061
They have an onclick event and onkeyup
event that's actually complicated listens

65
00:03:43.061 --> 00:03:46.875
for certain keys only, they have a role
for screen readers, they're tappable,

66
00:03:46.875 --> 00:03:48.278
and they have a label to them.

67
00:03:48.278 --> 00:03:49.668
The other thing, though,

68
00:03:49.668 --> 00:03:53.053
that I wanted to point out is that
with ARIA we can do all this stuff,

69
00:03:53.053 --> 00:03:57.300
if we're in a pinch, we can just add
the functionality if we need to, right?

70
00:03:57.300 --> 00:04:01.172
So we have a big code base and we don't
wanna move all the elements around,

71
00:04:01.172 --> 00:04:05.481
we have tools at our disposal to get like
this full fledged functionality out of any

72
00:04:05.481 --> 00:04:06.802
element that we need to.

73
00:04:06.802 --> 00:04:11.378
There's kind of a weird example where
Twitter uses this library that allows it

74
00:04:11.378 --> 00:04:15.952
to compile both for web and for native
apps, which means that the markup kind of

75
00:04:15.952 --> 00:04:20.044
gets all jumbled, so folks like
accessibility developers will often

76
00:04:20.044 --> 00:04:24.169
see twitter.com source code that
it's just dibs thousands of dibs.

77
00:04:24.169 --> 00:04:27.278
They'll be like, That's terrible,
this is totally inaccessible,

78
00:04:27.278 --> 00:04:29.980
then I'll try using it,
it actually works really well.

79
00:04:29.980 --> 00:04:34.451
And so the reason is that, even though it
has to generate dibs because it compiles

80
00:04:34.451 --> 00:04:39.285
to react, native and web, it provides all
the ARIA functionality that you'll need.

81
00:04:39.285 --> 00:04:41.541
So, it's got all the tab
indexes all the labels,

82
00:04:41.541 --> 00:04:44.550
all of the unclick on the key up events,
everything that you need,

83
00:04:44.550 --> 00:04:47.825
so It's kind of a weird one where
on first glance, it would be like,

84
00:04:47.825 --> 00:04:51.040
this is the worst, it's like the most
div filled app I've ever seen.

85
00:04:51.040 --> 00:04:53.776
Then you start really getting into it and
it's like okay, actually they do all

86
00:04:53.776 --> 00:04:56.400
the things that you would need to do
to make a fully fledged accessible app.

