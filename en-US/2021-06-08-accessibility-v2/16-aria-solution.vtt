WEBVTT

1
00:00:00.080 --> 00:00:02.600
Okay, cool so yeah,
let's go through this exercise together.

2
00:00:03.600 --> 00:00:08.011
So we've got this number that just
kind of keeps counting up higher and

3
00:00:08.011 --> 00:00:11.790
higher and higher,
I'm gonna go ahead and open 3.html.

4
00:00:11.790 --> 00:00:16.239
And so I just kind of made some, for
those that are JavaScript developers.

5
00:00:16.239 --> 00:00:20.300
I just did like a kind of random number
here and then made a set timeout.

6
00:00:20.300 --> 00:00:23.838
So that random number of intervals,
we just like grab the counter value and

7
00:00:23.838 --> 00:00:26.770
increase it by one, so
it just has a little bit of dynamicism.

8
00:00:28.150 --> 00:00:32.247
So I think at its simplest case we If we
could find the container of the number

9
00:00:32.247 --> 00:00:36.155
itself, and then we could just
add an aria live region to it.

10
00:00:36.155 --> 00:00:40.351
And so again, we can do assertive or
polite, so for an example,

11
00:00:40.351 --> 00:00:45.666
if we go ahead and do assertive and then I
come back over to this page and reload it.

12
00:00:45.666 --> 00:00:49.028
And then I go ahead and
I turn the screen reader on,

13
00:00:49.028 --> 00:00:54.004
we'll kind of be able to see that as
the numbers are coming in in real time.

14
00:00:54.004 --> 00:00:57.270
We can see the screen reader like
kind of keeps interrupting and

15
00:00:57.270 --> 00:00:59.190
updating those numbers basically.

16
00:01:00.510 --> 00:01:05.879
So that if we go ahead and we change this
to polite and refresh the page again.

17
00:01:05.879 --> 00:01:08.747
We can see that even when
I'm on the page here,

18
00:01:08.747 --> 00:01:13.350
it's gonna wait until that whole
thing reads out in the bottom left.

19
00:01:13.350 --> 00:01:16.573
And only when that's done,
we'll update from old numbers, so

20
00:01:16.573 --> 00:01:19.810
you can actually see that for
a while while had other stuff to do.

21
00:01:19.810 --> 00:01:23.170
Then the count was kinda behind like right
now it's time you're currently on a link.

22
00:01:23.170 --> 00:01:24.731
So the constant be behind and

23
00:01:24.731 --> 00:01:29.230
then eventually as the screen reader idles
for a long time, it'll catch back up.

24
00:01:29.230 --> 00:01:31.666
And so again,
you can kinda like play with those,

25
00:01:31.666 --> 00:01:35.262
I often just am like if it's the most
important thing that the application

26
00:01:35.262 --> 00:01:37.230
is gonna do, I go with assertive.

27
00:01:37.230 --> 00:01:41.180
Otherwise I just go with polite and let
users kind of get an update as they go.

28
00:01:41.180 --> 00:01:45.380
But, it can be really nice because I think
often we use visual only clues that things

29
00:01:45.380 --> 00:01:49.030
have changed like a red notification or
something like that.

30
00:01:49.030 --> 00:01:51.679
So it's really nice to have
an easy ability to just

31
00:01:51.679 --> 00:01:55.060
let user know that something
dynamic is updated.

32
00:01:55.060 --> 00:01:57.352
Any questions on the exercise?

33
00:01:57.352 --> 00:02:00.346
&gt;&gt; Like I was trying to
apply this label and

34
00:02:00.346 --> 00:02:04.534
I found that it's updating
like every single number.

35
00:02:04.534 --> 00:02:07.023
&gt;&gt; Aha,
&gt;&gt; Even using polite, so

36
00:02:07.023 --> 00:02:11.258
if you wanted some code that
said only read out an update.

37
00:02:11.258 --> 00:02:14.212
After every 10 likes or every 10 seconds,

38
00:02:14.212 --> 00:02:17.323
whatever comes first
that's just JavaScript.

39
00:02:17.323 --> 00:02:21.800
&gt;&gt; Exactly, yeah so with aria live
there's no more fine-grain control.

40
00:02:21.800 --> 00:02:26.113
I think that actually be really nice
APIs like some way of being like

41
00:02:26.113 --> 00:02:30.211
no more than X, but yeah for
sure if you wanted to do something.

42
00:02:30.211 --> 00:02:32.288
So again for the audience the question is,

43
00:02:32.288 --> 00:02:36.230
it's reading out every single number
even on polite cuz it's idling.

44
00:02:36.230 --> 00:02:39.422
Is there any way to get it to like
read out only when you get like 10 or

45
00:02:39.422 --> 00:02:42.728
only when it's been like 10 seconds
since the last one or whatever.

46
00:02:42.728 --> 00:02:45.806
Yes, but
it would just be like pure JavaScript, so

47
00:02:45.806 --> 00:02:49.760
maybe in that timeout it would
just be like, yeah exactly.

48
00:02:49.760 --> 00:02:53.077
I'm trying to think of a way to do it like
one way you could have like a hidden div

49
00:02:53.077 --> 00:02:54.270
with aria live on it.

50
00:02:54.270 --> 00:02:58.010
And you can only update that content on
a certain time or something like that.

51
00:02:58.010 --> 00:03:02.070
Or when a number was hit, but yeah for
sure you just have to code that yourself.

52
00:03:02.070 --> 00:03:05.088
Great question, so
what element gets the aria live region,

53
00:03:05.088 --> 00:03:07.640
like would you put it at the top bottom,
wherever?

54
00:03:07.640 --> 00:03:12.239
So the thing is, is that the aria
live will announce whenever any

55
00:03:12.239 --> 00:03:14.631
content in the element changes.

56
00:03:14.631 --> 00:03:19.192
So you kind of wanna scope it down to just
the element that you want read aloud so

57
00:03:19.192 --> 00:03:22.154
like notification count or
something like that.

58
00:03:22.154 --> 00:03:25.830
Otherwise, like if you were trying
to update notifications on Facebook

59
00:03:25.830 --> 00:03:28.552
dot com and you had it on the body tag or
a top level tag.

60
00:03:28.552 --> 00:03:30.807
Anytime you like open a modal or
typed anything,

61
00:03:30.807 --> 00:03:33.560
anytime the DOM changes it
wouldn't announce that stuff.

62
00:03:33.560 --> 00:03:36.150
So, you kind of wanna scope
it as small as possible.

63
00:03:36.150 --> 00:03:39.659
Even sometimes just wrapping
a certain value in a span, just so

64
00:03:39.659 --> 00:03:42.650
you can aria live just that span,
that kind of thing.

