WEBVTT

1
00:00:00.060 --> 00:00:05.260
Yeah, so we learned about keyboard
shortcuts, we learned about skip links.

2
00:00:05.260 --> 00:00:08.070
In a little bit, we're gonna get
to make a skip link together.

3
00:00:08.070 --> 00:00:12.071
But I just kinda wanna keep talking about
some of these, I guess more advanced

4
00:00:12.071 --> 00:00:15.288
techniques that require a little
bit more JavaScript or CSS.

5
00:00:15.288 --> 00:00:18.722
But can be really helpful for folks.

6
00:00:18.722 --> 00:00:22.995
So before we get into that, I just wanted
to cover sort of the basics of tab

7
00:00:22.995 --> 00:00:26.610
navigation, which we already
used in a few examples.

8
00:00:26.610 --> 00:00:31.509
But the basic idea is for keyboard
only users that they will tab through

9
00:00:31.509 --> 00:00:36.173
the website and use Shift Tab to
go backwards through the website.

10
00:00:36.173 --> 00:00:41.159
And so this is what means when it says
all page functionality is available

11
00:00:41.159 --> 00:00:42.640
using the keyboard.

12
00:00:42.640 --> 00:00:47.951
It's that you should be able to Tab and
Shift Tab through an entire website.

13
00:00:47.951 --> 00:00:49.887
Again, back to these compliance levels,

14
00:00:49.887 --> 00:00:52.530
I kinda mentioned this
at the very beginning.

15
00:00:52.530 --> 00:00:56.598
So if you're going for the level
A compliance, then with the WCAG and

16
00:00:56.598 --> 00:01:00.809
what WebAIM is saying is that everything
should be keyboard accessible

17
00:01:00.809 --> 00:01:05.490
unless it's something that just can't
be accomplished with a keyboard.

18
00:01:05.490 --> 00:01:08.930
And their example, like mine earlier,
was a freehand drawing tool.

19
00:01:08.930 --> 00:01:12.990
So that's enough just with a label to
get you to the level A compliance.

20
00:01:12.990 --> 00:01:17.608
If you need to be triple A compliance,
that means that literally 100% of the page

21
00:01:17.608 --> 00:01:20.740
functionality needs to be
available to a keyboard only.

22
00:01:20.740 --> 00:01:24.329
So, if you're going for triple A
compliance and you have a freehand drawing

23
00:01:24.329 --> 00:01:28.420
tool, you've kind of got your work cut out
for you hitting that compliance level, but

24
00:01:28.420 --> 00:01:31.940
again, it kinda shows
the flexibility here, I think.

25
00:01:31.940 --> 00:01:36.170
Hitting level A is plenty enough just to
say, hey, you've hit a component that is

26
00:01:36.170 --> 00:01:40.420
not accessible, and show people how to
move on basically with the keyboard only.

27
00:01:42.450 --> 00:01:46.541
So one thing that's important to know when
you're making your HTML is what kind of

28
00:01:46.541 --> 00:01:50.260
things will be tabable and
what kind of things won't be tabable.

29
00:01:50.260 --> 00:01:55.110
So we've seen links and form fields
already, but there's quite a few things.

30
00:01:55.110 --> 00:01:59.760
So the list of tabbable elements
in a shortlist are anchors,

31
00:01:59.760 --> 00:02:04.060
buttons, inputs, selects,
textareas and iframes.

32
00:02:05.580 --> 00:02:10.534
We'll get into those in a little bit,
but I have a GitHub repo here which

33
00:02:10.534 --> 00:02:14.350
is a living list of literally
every tabbable element.

34
00:02:14.350 --> 00:02:19.245
I can make this a little bit bigger but
it basically just exports this giant list

35
00:02:19.245 --> 00:02:24.380
of every single thing in HTML that you
might have that could be tabbable.

36
00:02:24.380 --> 00:02:28.479
So, if you ever need to
write some code where it's,

37
00:02:28.479 --> 00:02:33.990
grab all focusable elements in DOM or
whatever, you can use Library.

38
00:02:35.020 --> 00:02:38.682
Alternatively, you could just pass in
the main ones like you can say, grab all

39
00:02:38.682 --> 00:02:42.140
the inputs and buttons and anchors but
this is a more comprehensive list.

40
00:02:42.140 --> 00:02:46.060
And that's at github.com/jcoop/vocable.

41
00:02:47.680 --> 00:02:48.971
So yeah, so there's a lot of them for

42
00:02:48.971 --> 00:02:51.730
the most part it's just the interactive
elements right anchors and buttons.

43
00:02:52.760 --> 00:02:56.835
Another thing that we've seen is that
there will be times where you need to make

44
00:02:56.835 --> 00:03:02.060
a non tabbable element tabbable and so you
can use the tab index attribute to do so.

45
00:03:02.060 --> 00:03:06.494
So here's an example of taking a div,
which would normally not be tabbable,

46
00:03:06.494 --> 00:03:09.235
adding tab index to it and
then it is focusable.

47
00:03:09.235 --> 00:03:12.630
So tabindex takes three
different types of values.

48
00:03:13.630 --> 00:03:16.450
It takes a negative value,
any negative values.

49
00:03:16.450 --> 00:03:20.200
It means that it should still be
able to be called focus on but

50
00:03:20.200 --> 00:03:22.900
it plucks it out of the keyboard tabindex.

51
00:03:22.900 --> 00:03:25.825
So you can think about
the browser loads up your site,

52
00:03:25.825 --> 00:03:30.505
it does a query similar to my focusable 1,
and grabs everything that's tabbable and

53
00:03:30.505 --> 00:03:32.130
it puts them in an array.

54
00:03:32.130 --> 00:03:36.230
And so when you hit Tab, it just pops
your focus to the next item in the array.

55
00:03:36.230 --> 00:03:40.302
Sometimes, you'll wanna be able to call
.focus on an item with JavaScript, but

56
00:03:40.302 --> 00:03:42.490
you don't want the user to tab to it.

57
00:03:42.490 --> 00:03:45.853
In which case you can take an anchor,
an input or

58
00:03:45.853 --> 00:03:51.250
something that's already tabbable,
you can give it a negative tabindex.

59
00:03:51.250 --> 00:03:53.474
0 means that it will be focusable and

60
00:03:53.474 --> 00:03:56.860
it will be tabbable in the order
that it sort of comes in.

61
00:03:56.860 --> 00:04:00.922
So, wherever it is, like if this div
is here, then after I Tab to this link,

62
00:04:00.922 --> 00:04:05.590
it'll Tab to this div, so wherever it
would fall in the natural DOM order.

63
00:04:05.590 --> 00:04:11.573
And then a positive value very much
those familiar with Z index in HTML or

64
00:04:11.573 --> 00:04:16.170
CSS, a positive value then
can bump it to the top.

65
00:04:16.170 --> 00:04:19.690
So the higher the positive number,
the earlier it shows.

66
00:04:19.690 --> 00:04:24.639
So for an example earlier, we talked about
making a div and it said something like,

67
00:04:24.639 --> 00:04:28.900
hey, we have cool keyboard shortcuts,
hit question mark to see them.

68
00:04:30.250 --> 00:04:34.171
Earlier we talked about, well, then just
stick that div at the very top of the DOM,

69
00:04:34.171 --> 00:04:36.170
right, on your opening body tag.

70
00:04:36.170 --> 00:04:39.098
Another option is you can put it
anywhere in the DOM that you want and

71
00:04:39.098 --> 00:04:41.725
give it a positive tabindex
number as long as it's higher.

72
00:04:41.725 --> 00:04:48.469
Then on the other tabindex numbers, it'll
be the first thing that gets tabbed too.

73
00:04:48.469 --> 00:04:52.011
It was just kind of funny,
I was on MDN's page for it and

74
00:04:52.011 --> 00:04:56.948
there's a warning that says the maximum
value for tabindex is 32767.

75
00:04:56.948 --> 00:05:00.009
Which gave me nightmares to think
about a code base where you

76
00:05:00.009 --> 00:05:01.990
would need to get that high.

77
00:05:01.990 --> 00:05:04.370
It's kind of funny I did
a little bit looking in and

78
00:05:04.370 --> 00:05:07.261
it's like they use a 16 bit integer or
whatever for it, and

79
00:05:07.261 --> 00:05:10.113
that's like the largest number
that can be assigned to it.

80
00:05:10.113 --> 00:05:13.622
So don't go too high,
don't go over 32,000.

81
00:05:13.622 --> 00:05:20.800
As a little example here, I just have
these buttons, get through this tweet.

82
00:05:20.800 --> 00:05:24.438
And so if you see, like the blue
glow around the left, so I can,

83
00:05:24.438 --> 00:05:28.760
tab to go to the right and then I can
shift tab to go back to the left.

84
00:05:28.760 --> 00:05:33.480
So that's just kind of the behavior
that folks will expect.

85
00:05:33.480 --> 00:05:36.861
Things get a little bit complicated,
were for example,

86
00:05:36.861 --> 00:05:39.080
let's say you have a navigation.

87
00:05:39.080 --> 00:05:42.549
So a user would expect to be able
to tab through each nav item but

88
00:05:42.549 --> 00:05:46.840
let's say one of those navigation
items was like a dot, dot, dot.

89
00:05:46.840 --> 00:05:49.200
And when you click on it,
it brings up a drop down, right?

90
00:05:49.200 --> 00:05:53.830
Of account setting, sign out,
stuff like that, we see that pretty often.

91
00:05:53.830 --> 00:05:59.464
So in that sense, because the drop
down is a list of children belonging

92
00:05:59.464 --> 00:06:05.574
to the ...menu item, the expected
behavior is going to be tab over to it,

93
00:06:05.574 --> 00:06:11.910
Enter to bring up the drop down, and
then the arrow keys to move around.

94
00:06:11.910 --> 00:06:14.517
This is a little bit subjective,
but for the most part,

95
00:06:14.517 --> 00:06:17.460
it's like top level elements,
should be tabbable.

96
00:06:17.460 --> 00:06:21.348
And then lists of children should be
arrow keyable, because that's kind

97
00:06:21.348 --> 00:06:25.060
of the default of how it would work
with just HTML if you did a list.

98
00:06:25.060 --> 00:06:26.740
It's just something to keep in mind.

99
00:06:26.740 --> 00:06:30.375
So as a user, if you're trying to
tab something, you can't tab to it,

100
00:06:30.375 --> 00:06:33.050
try the arrow keys if
it's in a child element.

101
00:06:33.050 --> 00:06:37.177
And as a developer, there's often
circumstances like a drop down from

102
00:06:37.177 --> 00:06:41.302
a button where the button should be
tabbable, but the drop down items,

103
00:06:41.302 --> 00:06:43.950
the expectation is to be arrow keys.

104
00:06:43.950 --> 00:06:47.192
Another thing to keep in mind is,
for a lot of this stuff,

105
00:06:47.192 --> 00:06:49.288
if you use any sort of design system,

106
00:06:49.288 --> 00:06:54.033
like Google Material or React Spectrum or
any of those open source design systems.

107
00:06:54.033 --> 00:06:56.723
They'll come with a ton of
accessibility work out of the box,

108
00:06:56.723 --> 00:06:58.946
including if you had a button
with a drop down in it,

109
00:06:58.946 --> 00:07:01.872
they would already take care of
all that keyboard control for you.

110
00:07:01.872 --> 00:07:04.320
Or Twitter Bootstrap is another example.

111
00:07:04.320 --> 00:07:06.436
So if you use one of those,
they'll come with a lot of this stuff.

