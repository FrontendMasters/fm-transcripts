WEBVTT

1
00:00:00.510 --> 00:00:03.100
Here's another thing that you can do,
some really cool stuff with.

2
00:00:04.500 --> 00:00:07.821
There's a DOM API called Active Element,
and

3
00:00:07.821 --> 00:00:12.177
Active Element will return
the currently focused element.

4
00:00:12.177 --> 00:00:16.882
So in our example up here, where we
have this let's button focused, right?

5
00:00:16.882 --> 00:00:18.970
It's got the blue focus ring around it.

6
00:00:18.970 --> 00:00:24.076
If I were to open my Chrome DevTools and
do document.activeelement,

7
00:00:24.076 --> 00:00:29.800
we would see that this button with the
let's it is the currently focused item.

8
00:00:29.800 --> 00:00:31.650
So what is that used for?

9
00:00:31.650 --> 00:00:36.508
One example where I've used it in the past
is when you have a page transition,

10
00:00:36.508 --> 00:00:41.219
and it's important that when you go
back from that page transition that you

11
00:00:41.219 --> 00:00:43.709
return the user to wherever they were.

12
00:00:43.709 --> 00:00:46.448
So thinking about a social
network like Twitter,

13
00:00:46.448 --> 00:00:49.770
which has a big list of tweets
that you can cycle through, and

14
00:00:49.770 --> 00:00:54.530
then when you click on a tweet, it brings
you into a modal of the tweet itself.

15
00:00:54.530 --> 00:00:59.251
When you close that modal, users are going
to expect to be returned to the tweet that

16
00:00:59.251 --> 00:01:01.018
they were focused on, right?

17
00:01:01.018 --> 00:01:03.762
They're not gonna expect to be sent
back to the homepage at the top,

18
00:01:03.762 --> 00:01:06.870
which would be the default behavior
if you just close the modal.

19
00:01:06.870 --> 00:01:08.790
So for example, on social networks,

20
00:01:08.790 --> 00:01:12.930
what they'll do is when the modal button
gets clicked, it's about to be opened,

21
00:01:12.930 --> 00:01:17.140
they'll cache the active element and a
variable, and then let you open the modal.

22
00:01:17.140 --> 00:01:21.820
And then in the modal close event, they'll
call.focus on that cached variable, so

23
00:01:21.820 --> 00:01:24.551
that when the close happens,
they call.focus.

24
00:01:24.551 --> 00:01:28.395
Which will not only give the focus ring,
it'll put you in the tab index of where

25
00:01:28.395 --> 00:01:31.323
you belong, and
it will also move the screen if necessary.

26
00:01:31.323 --> 00:01:36.760
So if I call focus on this when I'm
scrolled up, it'll refocus on that.

27
00:01:36.760 --> 00:01:38.601
So that one's pretty helpful.

28
00:01:38.601 --> 00:01:41.597
Again, single page apps where you
expect the back button to work, right?

29
00:01:41.597 --> 00:01:43.842
Especially anything with an infinite feed,

30
00:01:43.842 --> 00:01:47.328
you can imagine if you're scrolling
Instagram for 20 minutes, and

31
00:01:47.328 --> 00:01:50.412
then it just shoots you to the top and
you've lost your place.

32
00:01:50.412 --> 00:01:52.118
And you have to look at
puppies all over again.

33
00:01:52.118 --> 00:01:54.089
It could be terrible.

34
00:01:54.089 --> 00:01:56.600
So, this is one that's pretty useful.

35
00:01:56.600 --> 00:01:59.178
Again, it's simple as just
storing the element and

36
00:01:59.178 --> 00:02:00.886
then calling .focus on it later.

37
00:02:00.886 --> 00:02:04.873
This is the last kind of advanced
technique that we're gonna talk about.

38
00:02:04.873 --> 00:02:08.943
And we'll just build through it together
instead of doing it as an exercise cuz

39
00:02:08.943 --> 00:02:10.741
it's a little JavaScript heavy.

40
00:02:10.741 --> 00:02:12.237
But tab trapping, so

41
00:02:12.237 --> 00:02:17.653
the concept here being like imagine that
you have a button that makes a modal.

42
00:02:17.653 --> 00:02:20.799
And let's just say as an example,
it's like a login screen or

43
00:02:20.799 --> 00:02:21.960
something like that.

44
00:02:21.960 --> 00:02:25.256
So you click on the button and
a modal opens up, and

45
00:02:25.256 --> 00:02:29.550
the modal has a form to fill in or
something like that.

46
00:02:29.550 --> 00:02:33.625
So as a keyboard only user, if I keep
tabbing through to kind of see what's

47
00:02:33.625 --> 00:02:37.633
going on it'll tab me to the index or
to the input, and the other input and

48
00:02:37.633 --> 00:02:38.787
the Submit button.

49
00:02:38.787 --> 00:02:42.657
They keep tabbing what's happening to
this button, again to this button, but

50
00:02:42.657 --> 00:02:46.021
if I hit Tab again, you can see it
focuses me all the way back out here.

51
00:02:46.021 --> 00:02:49.658
And if I keep tabbing it's actually
gonna start focusing on the web page in

52
00:02:49.658 --> 00:02:50.546
the background.

53
00:02:50.546 --> 00:02:54.014
Again, keeping in mind that while for
all intents and purposes,

54
00:02:54.014 --> 00:02:56.170
it looks like the screen is blacked out.

55
00:02:56.170 --> 00:02:59.470
That's just CSS doing that,
like the page is still open.

56
00:02:59.470 --> 00:03:02.643
And so what can happen here is that
keyboard only users can very easily get

57
00:03:02.643 --> 00:03:04.610
themselves totally out of the modal.

58
00:03:04.610 --> 00:03:06.196
And if they don't have vision,

59
00:03:06.196 --> 00:03:09.800
then they don't even have any
indication that they've left the modal.

60
00:03:09.800 --> 00:03:12.724
So they're like kind of browsing the
website when the modal is the only thing

61
00:03:12.724 --> 00:03:14.140
interactable.

62
00:03:14.140 --> 00:03:18.838
So the idea with tab trapping is
a JavaScript technique where you grab

63
00:03:18.838 --> 00:03:21.595
the first tab-able element in a modal.

64
00:03:21.595 --> 00:03:24.692
And you grab the last tab-able
element in a modal, and

65
00:03:24.692 --> 00:03:27.520
then you listen for like a key down event.

66
00:03:27.520 --> 00:03:34.072
And if they're on the last element hitting
tab, you focus them on the first element.

67
00:03:34.072 --> 00:03:37.486
And if they're on the first
element hitting Shift+Tab,

68
00:03:37.486 --> 00:03:39.864
then you focus them on the last element.

69
00:03:39.864 --> 00:03:43.611
And so basically you're kind of using
a lot of those techniques that we learned

70
00:03:43.611 --> 00:03:46.394
like storing active elements,
calling .focus on them,

71
00:03:46.394 --> 00:03:48.640
listening to keydown events.

72
00:03:48.640 --> 00:03:53.215
We're sort of using all of those
together to create this experience of

73
00:03:53.215 --> 00:03:54.851
really being on a modal.

74
00:03:54.851 --> 00:03:59.895
So the keyboard only users feel the same
way that non-keyboard only users feel.

75
00:03:59.895 --> 00:04:02.151
Does that make sense at a high level,
like tab trapping,

76
00:04:02.151 --> 00:04:05.024
keeping users kind of locked into this
modal or trapped into this modal?

77
00:04:05.024 --> 00:04:05.544
Great.

78
00:04:07.963 --> 00:04:12.502
So yeah, so for an example here,
the modal that I'm using,

79
00:04:12.502 --> 00:04:14.910
let me see, focus management.

80
00:04:14.910 --> 00:04:19.056
So, I just went online,
I found some modal library.

81
00:04:19.056 --> 00:04:22.939
It's not my recommendation,
it's just a library I found called Tingle.

82
00:04:22.939 --> 00:04:27.850
It creates this modal, so it sets
the content to a big string here of HTML,

83
00:04:27.850 --> 00:04:30.479
and then it adds these footer buttons.

84
00:04:30.479 --> 00:04:33.336
This is just their demo,
right off their website, basically.

85
00:04:33.336 --> 00:04:37.357
So then I have a button here for
those that do a lot of JS development,

86
00:04:37.357 --> 00:04:40.220
is just get element by ID, the button.

87
00:04:40.220 --> 00:04:45.022
So when the button is clicked,
we call modal.open.

88
00:04:45.022 --> 00:04:49.505
And so what we'll want to do here
is we'll want to basically grab

89
00:04:49.505 --> 00:04:52.835
the first element which
I can see is this input.

90
00:04:52.835 --> 00:04:57.506
And we'll wanna grab the last element
which is this footer button here

91
00:04:57.506 --> 00:05:00.683
which again,
if we go back over to the website.

92
00:05:00.683 --> 00:05:03.704
The first element should be first name,
and

93
00:05:03.704 --> 00:05:06.897
the last element should
be dangerous action.

94
00:05:06.897 --> 00:05:09.715
And then we'll wanna put our
listener in basically, right?

95
00:05:09.715 --> 00:05:11.778
So, I went ahead and did it, and

96
00:05:11.778 --> 00:05:16.987
I just kinda wanna work through the code
together on it, just so we can see again.

97
00:05:16.987 --> 00:05:22.223
Learning like the JavaScript technique
is not really the important thing,

98
00:05:22.223 --> 00:05:25.998
I just want people to be
comfortable with the concept.

99
00:05:25.998 --> 00:05:30.140
So, what I did here is I
hard-coded two things.

100
00:05:30.140 --> 00:05:36.137
So I hard-coded the class of first on this
one, and the class of last on this one.

101
00:05:36.137 --> 00:05:40.607
A better way to do it would be to use that
focusable library that I showed that has

102
00:05:40.607 --> 00:05:41.439
a big string.

103
00:05:41.439 --> 00:05:45.904
And then you could do document query
selector all, that focusable string,

104
00:05:45.904 --> 00:05:48.776
which will give you an array
of focusable items.

105
00:05:48.776 --> 00:05:53.621
And then you could access the zeros and
the length to get the first and

106
00:05:53.621 --> 00:05:55.067
last on that array.

107
00:05:55.067 --> 00:05:57.873
That would be very dynamic, so if people
added more things to the modal or

108
00:05:57.873 --> 00:05:59.990
took away things, they would always work.

109
00:05:59.990 --> 00:06:02.827
But for this kind of short example
I just manually added a class, hey,

110
00:06:02.827 --> 00:06:03.943
this is the first element.

111
00:06:03.943 --> 00:06:05.348
Hey, this is the last element.

112
00:06:05.348 --> 00:06:07.939
And then I grabbed both of
those into variables here.

113
00:06:07.939 --> 00:06:12.087
So we've got the first element is the one
with the class of first, last element,

114
00:06:12.087 --> 00:06:12.881
class of last.

115
00:06:12.881 --> 00:06:17.068
And then really all I did here is
that a single event listener for

116
00:06:17.068 --> 00:06:18.415
the key down event.

117
00:06:18.415 --> 00:06:23.791
And we just look and say, hey, if the key
hit was tab, or the key code of tab,

118
00:06:23.791 --> 00:06:29.698
then we go into this if, we say if word
shifting, meaning we're moving backward.

119
00:06:29.698 --> 00:06:33.115
And the currently active element
is the first element, so for

120
00:06:33.115 --> 00:06:35.558
on the first element
trying to go backward.

121
00:06:35.558 --> 00:06:38.632
Then we take the last element,
we call focus on it.

122
00:06:38.632 --> 00:06:41.330
Otherwise, so we're not shifting,
we're going forward.

123
00:06:41.330 --> 00:06:45.510
If the current active element is the last
element, meaning we're at the end trying

124
00:06:45.510 --> 00:06:49.350
to go further, then we call focus on
the first element and prevent default.

125
00:06:49.350 --> 00:06:52.784
So again, it gets a little bit messy,
a lot of modals will do this for

126
00:06:52.784 --> 00:06:56.181
you if you're using bootstrap or
some other JavaScript library.

127
00:06:56.181 --> 00:06:59.276
But I did kind of wanna give folks
a chance to understand the concept, and

128
00:06:59.276 --> 00:07:02.600
then just see some of the code for
a simple implementation of it.

129
00:07:02.600 --> 00:07:06.313
So yeah, so we can kind of see this,
I have one thing I like about tab trapping

130
00:07:06.313 --> 00:07:10.273
is that it basically combines everything
that we've been talking about so far.

131
00:07:10.273 --> 00:07:13.618
So, it's like listening
to certain key codes.

132
00:07:13.618 --> 00:07:15.110
It involves active element.

133
00:07:15.110 --> 00:07:20.459
It involves calling .focus,
all sorts of things like that.

134
00:07:20.459 --> 00:07:24.109
Again, I would recommend if you're doing
this in production to not hard-code

135
00:07:24.109 --> 00:07:28.080
the first and last classes, but just
grab a list of all queryable elements.

136
00:07:28.080 --> 00:07:31.072
But yeah, other than that,
that's pretty straightforward.

137
00:07:31.072 --> 00:07:35.091
&gt;&gt; I was just gonna ask about
the conditional with key code nine.

138
00:07:35.091 --> 00:07:35.960
&gt;&gt; Yeah, that's a good call.

139
00:07:35.960 --> 00:07:38.554
That's just a browser discrepancy.

140
00:07:38.554 --> 00:07:42.680
So some browsers will send the key and
some will only send the key code.

141
00:07:42.680 --> 00:07:47.404
So I think I have a feeling that
I think key code might be safe

142
00:07:47.404 --> 00:07:49.243
across all browsers.

143
00:07:49.243 --> 00:07:51.886
But for this example I just wanted to,
and no matter what we have,

144
00:07:51.886 --> 00:07:53.990
it's either key code or a key.

145
00:07:53.990 --> 00:07:57.009
Those are both equivalent to tab
nine is the key code for tab.

146
00:07:57.009 --> 00:07:59.680
So yeah, I think this works pretty well.

147
00:07:59.680 --> 00:08:03.955
So if we go ahead and we save it, and
we go back to my example here, and

148
00:08:03.955 --> 00:08:05.158
refresh the page.

149
00:08:05.158 --> 00:08:10.138
Now when I click on the tab trapping,
and I start shifting or tabbing through,

150
00:08:10.138 --> 00:08:13.170
when I get to,
I know it's a little hard to see.

151
00:08:13.170 --> 00:08:15.615
So, the focus ring is on dangerous action.

152
00:08:15.615 --> 00:08:19.263
I hit tab again, and it brings me to first
name instead of going up to the browser.

153
00:08:19.263 --> 00:08:21.713
And if I Shift+Tab,
it takes me back to dangerous action.

154
00:08:21.713 --> 00:08:25.722
So, like if I was holding tab on it, I
just stay on the modal for all intents and

155
00:08:25.722 --> 00:08:28.860
purposes, I'm completely
constrained to it.

156
00:08:28.860 --> 00:08:31.424
I thought I'm just having now is that,

157
00:08:31.424 --> 00:08:35.399
it might be nice to also add this
X here as a tab-able button.

158
00:08:35.399 --> 00:08:39.261
If I had been thinking a little bit more,
so folks can know to close the modal.

159
00:08:39.261 --> 00:08:44.001
Although another thing to keep in mind,
and we talked earlier that a lot of

160
00:08:44.001 --> 00:08:49.340
users expect J and K to do next item,
previous item is just sort of standard.

161
00:08:49.340 --> 00:08:54.262
Similarly, a lot of users expect
the Escape key to close any modal.

162
00:08:54.262 --> 00:08:56.794
And so that's like another
thing that I do a lot at work.

163
00:08:56.794 --> 00:08:59.612
I see modals that the Escape
key doesn't close.

164
00:08:59.612 --> 00:09:02.766
Those are really hard to close,
I mean, the only two ways that

165
00:09:02.766 --> 00:09:06.481
keyboard only user has to close a modal
is if they're able to tab to the X.

166
00:09:06.481 --> 00:09:09.157
And if not,
being able to hit escape to close it, so

167
00:09:09.157 --> 00:09:11.161
escape to close is really important.

168
00:09:11.161 --> 00:09:14.740
Again, most design systems will take
care of all that stuff for you.

