WEBVTT

1
00:00:00.180 --> 00:00:03.343
So I think the last things that I just
wanted to talk about are like kind of

2
00:00:03.343 --> 00:00:04.630
where do we go from here?

3
00:00:04.630 --> 00:00:08.428
And we already kind of brought this up
a lot, like how do you get started with

4
00:00:08.428 --> 00:00:11.100
doing accessibility work
in an existing code base?

5
00:00:11.100 --> 00:00:14.553
Or how do you set a good foundation
like folks are asking about,

6
00:00:14.553 --> 00:00:16.260
are there good boiler plates?

7
00:00:16.260 --> 00:00:20.720
Or are there good rule sets or, yeah,
how do you just start going on this stuff?

8
00:00:20.720 --> 00:00:24.260
So I think about it in
three different approaches.

9
00:00:24.260 --> 00:00:27.407
And for each one,
I've put a couple of links in there,

10
00:00:27.407 --> 00:00:31.529
not necessarily the packages that
I'm advocating for or involved in.

11
00:00:31.529 --> 00:00:36.686
But just trying to cover a spectrum of
plugin for each main JavaScript framework,

12
00:00:36.686 --> 00:00:40.660
some design systems buy some
big companies, stuff like that.

13
00:00:40.660 --> 00:00:42.710
So I kinda think about it in three phases.

14
00:00:42.710 --> 00:00:48.010
One phase, I think that linters
are great for this type of stuff.

15
00:00:48.010 --> 00:00:51.685
I think adding an accessibility linter,
the first one for React,

16
00:00:51.685 --> 00:00:56.620
the second one for Angular, the third one
for Vue could be really, really powerful.

17
00:00:56.620 --> 00:01:00.589
You can configure them to only run
on new or edited or saved files, and

18
00:01:00.589 --> 00:01:04.088
it'll really give you that
experience right in the editor.

19
00:01:04.088 --> 00:01:08.096
When you make an image without an alt tag,
it'll warn, you run your CI,

20
00:01:08.096 --> 00:01:09.430
it'll go really fast.

21
00:01:09.430 --> 00:01:13.483
So I'm really a big fan of linters for
this stuff, especially because so

22
00:01:13.483 --> 00:01:14.884
much of it can be linted.

23
00:01:14.884 --> 00:01:19.807
Checking for alt texts, checking for the
right, you use a div with an onclick event

24
00:01:19.807 --> 00:01:24.535
that's not focusable, these things can
be very easily statically analyzed.

25
00:01:24.535 --> 00:01:29.107
So, I think step one would always be
adding a linter to whatever project you're

26
00:01:29.107 --> 00:01:32.738
working on using whatever
linting technology you're using.

27
00:01:32.738 --> 00:01:35.405
Step two would be, and this is optional,

28
00:01:35.405 --> 00:01:39.369
if you're able to making use of
these existing code systems,

29
00:01:39.369 --> 00:01:44.260
design systems, that are very
good about accessibility already.

30
00:01:44.260 --> 00:01:48.600
So I linked to Adobe's React Spectrum,
and also Google's Material Design.

31
00:01:48.600 --> 00:01:51.902
Twitter Bootstrap is another
great example, Foundation.

32
00:01:51.902 --> 00:01:55.167
All of these big projects, for
the most part, spend a lot of time and

33
00:01:55.167 --> 00:01:56.494
energy on accessibility.

34
00:01:56.494 --> 00:02:00.692
And so if your project allows it by
using their modal, their drop-down,

35
00:02:00.692 --> 00:02:05.025
their navigation, these things like that,
you'll get a lot of freebies,

36
00:02:05.025 --> 00:02:06.600
which will be really nice.

37
00:02:06.600 --> 00:02:08.860
So you won't have to build
tab trapping yourself.

38
00:02:08.860 --> 00:02:10.790
You won't necessarily have to
build skip links yourself.

39
00:02:10.790 --> 00:02:13.870
They have a class,
Bootstrap comes with a skip link class.

40
00:02:13.870 --> 00:02:15.260
Things like that can be really helpful.

41
00:02:15.260 --> 00:02:18.220
I understand that's not for everybody,
that you can use another design system.

42
00:02:18.220 --> 00:02:24.540
So step three is starting to find some
ways to run audits and to automate those.

43
00:02:24.540 --> 00:02:26.935
And so my two favorite things right now,

44
00:02:26.935 --> 00:02:30.680
we kinda went through this area
where there were a lot of tools.

45
00:02:30.680 --> 00:02:33.802
There was a big diversity of tools for
accessibility testing, and

46
00:02:33.802 --> 00:02:37.860
then over the last few years, they've
all sort of merged or sunset themselves.

47
00:02:37.860 --> 00:02:41.350
And so
they're kinda two big players right now.

48
00:02:41.350 --> 00:02:42.709
There's Deque,

49
00:02:42.709 --> 00:02:49.130
which is this really great company that
does exclusively accessibility work.

50
00:02:49.130 --> 00:02:53.930
So they do consultations,
they do a full audit, they work with you.

51
00:02:53.930 --> 00:02:55.040
They do all this cool stuff.

52
00:02:55.040 --> 00:03:01.050
But for today, they have a free Chrome
DevTool, which does accessibility testing.

53
00:03:01.050 --> 00:03:04.785
So this is really great,
it gives you a number score, 1 to 100, but

54
00:03:04.785 --> 00:03:08.602
it gives you a ton of suggestions, and
they spend a lot of energy on this.

55
00:03:08.602 --> 00:03:14.100
So it's very, very good just to add it
to Chrome and then to be able to run it.

56
00:03:14.100 --> 00:03:18.172
So we'll go ahead and
just add the extension.

57
00:03:18.172 --> 00:03:22.559
And then we can go back to
our site like here, and

58
00:03:22.559 --> 00:03:27.510
let me pin it and
then just run the Axe extension here.

59
00:03:28.960 --> 00:03:32.960
So open up DevTools, and then you'll
have a new tab in the DevTools.

60
00:03:32.960 --> 00:03:36.746
You click this, you can kinda select,
so I'm a developer,

61
00:03:36.746 --> 00:03:39.730
I accept the terms of service,
start using it.

62
00:03:42.100 --> 00:03:44.650
Not sign up for a free trial right now.

63
00:03:44.650 --> 00:03:47.000
So I'm gonna scan the whole page.

64
00:03:47.000 --> 00:03:49.200
And so it'll go ahead, I see, sorry.

65
00:03:49.200 --> 00:03:51.950
Yeah, this is one other
thing that's worth noting.

66
00:03:51.950 --> 00:03:56.630
The DevTools will often struggle
when you're using the file protocol.

67
00:03:56.630 --> 00:04:01.082
So if you just find an index.html file
on your page and you open it in Chrome,

68
00:04:01.082 --> 00:04:05.690
a lot of DevTools stuff,
Lighthouse included, won't work on those.

69
00:04:05.690 --> 00:04:08.313
So if you wanna do it locally,
you'll need an actual server running,

70
00:04:08.313 --> 00:04:11.010
like a Python server, a Node server,
or something like that.

71
00:04:11.010 --> 00:04:14.937
But for today, we can just use
the Netlify app that I had deployed,

72
00:04:14.937 --> 00:04:19.190
which is the exact same site,
but it's learn-ally@netlify.com.

73
00:04:19.190 --> 00:04:21.726
So I'll go ahead and
I'll scan the page here.

74
00:04:21.726 --> 00:04:26.546
And then it says okay,
it detected these two automatic issues.

75
00:04:26.546 --> 00:04:29.873
So it's got a coupe of things.

76
00:04:29.873 --> 00:04:35.950
The element location of HTML
does not have a main landmark.

77
00:04:35.950 --> 00:04:40.628
So it's looking for
this landmark of main, the HTML, so

78
00:04:40.628 --> 00:04:43.970
we could add landmark main to that.

79
00:04:43.970 --> 00:04:48.428
And then I think that's everything.

80
00:04:48.428 --> 00:04:51.300
Ensure all page content is
contained by landmarks.

81
00:04:51.300 --> 00:04:55.110
I think it's the same thing,
the container also needs to be one.

82
00:04:55.110 --> 00:04:56.620
So these are kind of cool.

83
00:04:57.760 --> 00:05:01.808
The thing that I don't like about these
which I like about the next one that I'll

84
00:05:01.808 --> 00:05:05.910
show better, is the solution to solve
this is a little bit confusing here.

85
00:05:05.910 --> 00:05:08.359
Whereas the Lighthouse ones,
which we'll see in a minute,

86
00:05:08.359 --> 00:05:10.865
take you to some really good
documentation about how to do it.

87
00:05:10.865 --> 00:05:13.860
But Axe is really cool,
it catches things that Lighthouse doesn't.

88
00:05:13.860 --> 00:05:16.460
And I do use it quite often.

89
00:05:16.460 --> 00:05:20.030
So the other option is actually
built into Chrome DevTools.

90
00:05:20.030 --> 00:05:23.054
So if you just open Chrome DevTools
on a modern version of Chrome and

91
00:05:23.054 --> 00:05:25.630
you go to Lighthouse,
this does a ton of things.

92
00:05:25.630 --> 00:05:29.831
I covered a lot in my Chrome DevTools
class, so it does performance auditing,

93
00:05:29.831 --> 00:05:31.590
SEO auditing, all that stuff.

94
00:05:31.590 --> 00:05:34.990
But for today, we're just gonna get it
down to just the accessibility test.

95
00:05:34.990 --> 00:05:38.040
So just select accessibility and
generate a report here.

96
00:05:39.080 --> 00:05:43.420
This takes a second, it runs, and
then it comes back with this report here.

97
00:05:43.420 --> 00:05:45.613
So you can see as far
as the Lighthouse goes,

98
00:05:45.613 --> 00:05:48.120
it passed all of the audits
that were applicable.

99
00:05:48.120 --> 00:05:51.761
But we could do things like if we had
color contrast, it would catch that,

100
00:05:51.761 --> 00:05:52.890
images without alts.

101
00:05:52.890 --> 00:05:57.801
Like for an example if I go to,
let me close DevTools for a second and

102
00:05:57.801 --> 00:06:03.623
go to the screen readers one and let's
go to this, oop, not that one, sorry.

103
00:06:03.623 --> 00:06:06.405
Where's the second exercise,
accessible HTML.

104
00:06:06.405 --> 00:06:09.945
And I go to this exercise,
which we knew had some broken stuff on it.

105
00:06:09.945 --> 00:06:13.465
And I opened DevTools again, and
I do an accessibility audit right here.

106
00:06:13.465 --> 00:06:16.205
This can be a great way of
kind of figuring things out.

107
00:06:16.205 --> 00:06:19.161
So these are the things that we did
manually together cuz we kinda knew what

108
00:06:19.161 --> 00:06:19.980
we were looking at.

109
00:06:19.980 --> 00:06:23.090
But it found hey,
there's an image without an alt attribute.

110
00:06:23.090 --> 00:06:26.951
And hey, all these form elements
don't have associated labels.

111
00:06:26.951 --> 00:06:31.592
What I really like about this, if you ever
run into one that's confusing to you like

112
00:06:31.592 --> 00:06:34.111
that landmark one was
confusing to me in Axe,

113
00:06:34.111 --> 00:06:37.520
they always link to this really
good Chrome documentation.

114
00:06:37.520 --> 00:06:40.480
So if you say, well, what does it
mean to have an associated label?

115
00:06:40.480 --> 00:06:44.808
I can click here on the Learn More,
and it'll take me to a special page on

116
00:06:44.808 --> 00:06:49.440
web.dev that's just like forms like
this are failing, how to add a label.

117
00:06:49.440 --> 00:06:52.482
All the stuff that we covered in this
class, but they'll have a page for

118
00:06:52.482 --> 00:06:56.030
each specific rule that might fail,
which is really, really helpful.

119
00:06:56.030 --> 00:06:59.360
So yeah, so that's the multiple step
approach that I always suggest,

120
00:06:59.360 --> 00:07:03.020
is getting some linters in place
right away, that'll help a lot.

121
00:07:03.020 --> 00:07:07.460
If applicable, if doable,
using a design system can be really cool.

122
00:07:07.460 --> 00:07:11.289
Some of the modern design systems
like Adobe's React Spectrum system,

123
00:07:11.289 --> 00:07:14.140
you can actually take
components without their UI.

124
00:07:14.140 --> 00:07:16.520
So you can build your own
actual UI on top of them, but

125
00:07:16.520 --> 00:07:19.340
you get all that functionality and
accessibility with it.

126
00:07:19.340 --> 00:07:20.580
So that might be a thought.

127
00:07:20.580 --> 00:07:24.621
If you already have a very strict design
principle that you're sticking to,

128
00:07:24.621 --> 00:07:28.870
sometimes you can use these without
the UI level, but it's not always doable.

129
00:07:28.870 --> 00:07:32.140
And then also doing these developer tools.

130
00:07:32.140 --> 00:07:34.854
One thing that's also
cool about Lighthouse is,

131
00:07:34.854 --> 00:07:39.310
depending on your build flow, you could
add a Lighthouse check into your CICD, so

132
00:07:39.310 --> 00:07:40.748
through a GitHub action.

133
00:07:40.748 --> 00:07:43.690
So that can be really cool,
I've had that at work before,

134
00:07:43.690 --> 00:07:47.834
where let's say we have a Lighthouse run
and then we'll say fail an EPR that lowers

135
00:07:47.834 --> 00:07:51.860
the performance score or the accessibility
score, something like that.

136
00:07:51.860 --> 00:07:54.758
And then those will automatically get run
and flagged, which can be pretty cool if

137
00:07:54.758 --> 00:07:58.010
you wanna set up something like that,
Lighthouse is very good for that.

138
00:07:58.010 --> 00:08:02.960
So the question was, can you show
how some of these design systems

139
00:08:02.960 --> 00:08:08.520
like React Spectrum allow you to
grab functionality without the UI?

140
00:08:08.520 --> 00:08:14.670
So for example, I know that the team
at Vercel that build Next.js and

141
00:08:14.670 --> 00:08:19.454
things that,
are using React Spectrum minus the UI.

142
00:08:19.454 --> 00:08:22.743
Okay, so here, so they have, okay.

143
00:08:22.743 --> 00:08:26.967
So it looks like the React Spectrum
itself is with UI, but

144
00:08:26.967 --> 00:08:30.143
it also looks like they have sub packages.

145
00:08:30.143 --> 00:08:34.405
They have a React Aria
package which looks,

146
00:08:34.405 --> 00:08:37.980
let's see if I can see what's in it.

147
00:08:37.980 --> 00:08:42.050
So here, so for example,
if you install React Spectrum button,

148
00:08:42.050 --> 00:08:44.840
you'll get the UI and the accessibility.

149
00:08:44.840 --> 00:08:48.193
If you install React Aria button, you'll
get just the accessibility stuff, and

150
00:08:48.193 --> 00:08:49.950
you can style the button however you want.

151
00:08:49.950 --> 00:08:51.460
It won't come with CSS.

152
00:08:51.460 --> 00:08:55.460
Yeah, it's really cool, yeah,
it's like a kind of new thing.

153
00:08:55.460 --> 00:08:58.452
I was really impressed when
I first heard that, so

154
00:08:58.452 --> 00:09:01.880
I worked really closely with
the Spectrum team at Adobe.

155
00:09:01.880 --> 00:09:04.457
And then when I heard that other teams
were using it with their own UI,

156
00:09:04.457 --> 00:09:05.848
I was like that's really cool.

157
00:09:05.848 --> 00:09:07.662
But I didn't know how they did it,
so yeah,

158
00:09:07.662 --> 00:09:10.130
this is really neat idea of kind
of breaking it out that way.

