WEBVTT

1
00:00:00.000 --> 00:00:03.110
&gt;&gt; Steve Kinney: We're gonna talk
about this thing called Test Doubles,

2
00:00:03.110 --> 00:00:06.948
which is the overarching umbrella for
mocks, and spies, and stubs.

3
00:00:06.948 --> 00:00:10.937
And a bunch of other things where
honestly, if I wasn't preparing for

4
00:00:10.937 --> 00:00:14.129
a course, I would forget
the difference between them.

5
00:00:14.129 --> 00:00:18.469
Generally speaking, it's a larger
concept where there will be no quiz on

6
00:00:18.469 --> 00:00:20.717
the vocabulary afterwards, right?

7
00:00:20.717 --> 00:00:25.572
Because generally speaking, other than
their appearance and the method names,

8
00:00:25.572 --> 00:00:28.327
they're all variations
in the same concept.

9
00:00:28.327 --> 00:00:33.394
If you tell any of the people who center
their whole personality around testing

10
00:00:33.394 --> 00:00:38.396
that I send any of this, I'll deny it
despite the fact that the video exists.

11
00:00:38.396 --> 00:00:43.110
But generally speaking,
the terminology is not that important,

12
00:00:43.110 --> 00:00:46.487
all right,
as long as you conceptually get it.

13
00:00:46.487 --> 00:00:52.960
So the general idea is like, you're just
supposed to test stuff in isolation.

14
00:00:52.960 --> 00:00:56.761
Yeah, you know what,
turns out our apps tend to call APIs.

15
00:00:56.761 --> 00:00:59.870
All right,
they tend to sometimes involve time.

16
00:00:59.870 --> 00:01:07.214
Right, sometimes they involve console log,
or fetch, or something along those lines.

17
00:01:07.214 --> 00:01:10.689
Or sometimes they involve
a third party library.

18
00:01:10.689 --> 00:01:14.382
Honestly, I don't need to
test other people's code.

19
00:01:14.382 --> 00:01:19.063
What I need to do is make sure, again,
the whole thing is if I change my code,

20
00:01:19.063 --> 00:01:20.835
does it still work, right?

21
00:01:20.835 --> 00:01:25.560
So sometimes we can't control everything,
and sometimes you wanna see,

22
00:01:25.560 --> 00:01:29.917
okay, this was supposed to call alert,
fetch, whatever, right?

23
00:01:29.917 --> 00:01:34.313
All right, did the thing get called
with the thing it was supposed to get

24
00:01:34.313 --> 00:01:38.797
called with is maybe the end result
of what you're looking for, right?

25
00:01:38.797 --> 00:01:43.717
Yes, it would be great if all code was
what they say, idempotent, which is,

26
00:01:43.717 --> 00:01:48.277
thing comes in, return value comes out,
no side effects whatsoever.

27
00:01:48.277 --> 00:01:52.545
But modifying the DOM is a side effect,
constant log into the side effect,

28
00:01:52.545 --> 00:01:55.341
everything important is a side effect,
right?

29
00:01:55.341 --> 00:01:58.410
So that's not really
the reality we live in, so

30
00:01:58.410 --> 00:02:02.269
sometimes we have to kind of
worry about the outside world.

31
00:02:02.269 --> 00:02:07.336
As somebody said earlier in this course,
if you get carried away with all

32
00:02:07.336 --> 00:02:12.923
this stuff, you will just make a bunch
of worthless tests, congratulations.

33
00:02:12.923 --> 00:02:16.883
Or we saw before, we can have random
values from an ID generator or

34
00:02:16.883 --> 00:02:19.693
rolling the dice, so
on and so forth, right?

35
00:02:19.693 --> 00:02:22.843
Sometimes we just wanna hold
a few things steady, right?

36
00:02:22.843 --> 00:02:26.016
Again, all of these superpowers
I'm about to show you should,

37
00:02:26.016 --> 00:02:28.388
with great power comes
great responsibility.

38
00:02:28.388 --> 00:02:29.821
Do not get carried away, and

39
00:02:29.821 --> 00:02:33.239
I'm happy to answer a thousand
questions on where those lines are.

40
00:02:33.239 --> 00:02:36.436
I will warn you,
most of the answers will be unsatisfying.

41
00:02:36.436 --> 00:02:40.314
Because it's like, if you would like
to hear me say, it depends a lot,

42
00:02:40.314 --> 00:02:41.618
I will happily do that.

43
00:02:41.618 --> 00:02:46.834
Or if you think about,
it's a game of trade-offs, If you could

44
00:02:46.834 --> 00:02:52.438
get a perfectly pristine version of
your back end quickly in place for

45
00:02:52.438 --> 00:02:58.159
one test and then reset it back to
its pristine state for the next test.

46
00:02:58.159 --> 00:03:02.915
And that that wasn't a pain in the butt,
to wire into your test week,

47
00:03:02.915 --> 00:03:06.534
yeah, do that, go it,
right, that sounds great.

48
00:03:06.534 --> 00:03:08.580
Tell me how you did it, right?

49
00:03:08.580 --> 00:03:13.140
Or maybe you do need to simulate
the network requests, right?

50
00:03:13.140 --> 00:03:18.633
Cuz also, that also involves you
controlling the entire server too.

51
00:03:18.633 --> 00:03:22.468
Because let me tell you how many
times both, from incidents or

52
00:03:22.468 --> 00:03:27.482
also my test break in staging, because
the back end team broke an API in staging,

53
00:03:27.482 --> 00:03:29.649
right, now my tests are failing.

54
00:03:29.649 --> 00:03:33.690
And so, yes,
obviously there's a value in that realism.

55
00:03:33.690 --> 00:03:38.345
But also, if my tests are now failing cuz
I made a CSS change because something

56
00:03:38.345 --> 00:03:41.651
else happened in staging,
that's not great either.

57
00:03:41.651 --> 00:03:44.774
So there's a time and
a place for all these things.

58
00:03:44.774 --> 00:03:49.052
Or you wanna run the test without
having to spin up the server,

59
00:03:49.052 --> 00:03:52.755
cuz again, spinning up a server and
taking it down for

60
00:03:52.755 --> 00:03:56.066
the test is also extra
things that can go wrong.

61
00:03:56.066 --> 00:03:58.108
Or time, and
there I make the same joke again.

62
00:03:58.108 --> 00:04:02.552
So basically,
a test double is the broad umbrella for

63
00:04:02.552 --> 00:04:08.793
any kinda simulated, fake thing that
you are using in your tests, right?

64
00:04:08.793 --> 00:04:14.419
And like I said, the differences
are not particularly important,

65
00:04:14.419 --> 00:04:18.279
but these are the names
that they tend to go by.

66
00:04:18.279 --> 00:04:21.017
A mock is, again,
faking an external thing.

67
00:04:21.017 --> 00:04:24.199
A spy is the ability to,
kind of watch over a function and

68
00:04:24.199 --> 00:04:27.603
see what it got called with,
and all those things, right?

69
00:04:27.603 --> 00:04:31.237
In case, maybe your function
isn't returning something, but

70
00:04:31.237 --> 00:04:34.009
it's calling a built-in or
library function.

71
00:04:34.009 --> 00:04:38.949
And you just wanna make sure that, did it
do the thing it was supposed to do cuz I

72
00:04:38.949 --> 00:04:41.463
don't have a return value to see here?

73
00:04:41.463 --> 00:04:45.941
And again, if you're thinking,
couldn't I just pass in values like that

74
00:04:45.941 --> 00:04:49.225
dependency injection thing
Steve was talking about?

75
00:04:49.225 --> 00:04:52.759
That is the right answer,
put it in your head right now.

76
00:04:52.759 --> 00:04:56.435
This is like, use it when you need it,
but be very careful whether or

77
00:04:56.435 --> 00:04:57.345
not you need it.

78
00:04:57.345 --> 00:05:00.231
Then the other important part is,

79
00:05:00.231 --> 00:05:05.404
there are a bunch of ways to put
things back after the test, and

80
00:05:05.404 --> 00:05:11.492
I'm gonna tell you right now,
just to worry about the last one, right?

81
00:05:11.492 --> 00:05:17.079
So let's say you decide you
are going to mock out fetch, right?

82
00:05:17.079 --> 00:05:21.825
Restore would put the original
fetch back in place, right?

83
00:05:21.825 --> 00:05:24.314
You can always mock it out again.

84
00:05:24.314 --> 00:05:29.921
Reset will just keep that existing mock,
but then put it back to its place or

85
00:05:29.921 --> 00:05:33.666
clear, keep track of
everything was recording.

86
00:05:33.666 --> 00:05:38.307
But you know what restore will do,
the other two as well, right?

87
00:05:38.307 --> 00:05:41.965
And so, if you don't know which one
to use, yeah, could I lecture you for

88
00:05:41.965 --> 00:05:44.691
another 30 minutes on
the difference between them?

89
00:05:44.691 --> 00:05:45.617
I absolutely could.

90
00:05:45.617 --> 00:05:48.245
If you don't know which one to use,
just use restore,

91
00:05:48.245 --> 00:05:50.830
wait till you have a reason for
the other two, right?

92
00:05:50.830 --> 00:05:54.853
And I will answer a million questions
about them if we have them, but

93
00:05:54.853 --> 00:05:57.607
before I lecture you on things,
let's just,

94
00:05:57.607 --> 00:06:01.297
most of the time restore will get
done what you wanted it to do.

95
00:06:01.297 --> 00:06:05.602
And you can call that on a given function,
or more importantly, again,

96
00:06:05.602 --> 00:06:09.778
I'm giving the answers right now,
you can just call it on all of them.

97
00:06:09.778 --> 00:06:15.327
So what I will tend to do a lot of times
is, if I do need to fake some stuff,

98
00:06:15.327 --> 00:06:19.505
that's where you can do it
before each test, right?

99
00:06:19.505 --> 00:06:26.023
Do yourself, put everything
back the way it was afterwards.

100
00:06:26.023 --> 00:06:29.009
Why do all these exist then?

101
00:06:29.009 --> 00:06:33.027
Well, friends,
before we had modern test runners,

102
00:06:33.027 --> 00:06:35.989
all your tests ran in the same process.

103
00:06:35.989 --> 00:06:42.373
And one test could mock out a bunch of
stuff, forget to clean up after itself,

104
00:06:42.373 --> 00:06:48.680
and then later tests would then use
those polluted versions of everything.

105
00:06:48.680 --> 00:06:53.329
These days, most modern tests are now,
if you know that you were running old,

106
00:06:53.329 --> 00:06:57.565
old stuff at work or whatever,
then the stuff is more important to you.

107
00:06:57.565 --> 00:07:02.803
But V test and JS predominantly
have test isolation, which is,

108
00:07:02.803 --> 00:07:07.464
each one of those tests runs
in an isolated environment.

109
00:07:07.464 --> 00:07:10.989
The risk of spillover is a lot less,
right?

110
00:07:10.989 --> 00:07:14.211
But like, again, under the hood, so

111
00:07:14.211 --> 00:07:19.271
there was this years and
years ago, I'm talking a decade.

112
00:07:19.271 --> 00:07:24.582
Yeah, there was this mocking and
stubbing library called Sinon, S-I-N-O-N.

113
00:07:24.582 --> 00:07:27.346
You know what V test uses under the hood?

114
00:07:27.346 --> 00:07:28.503
Sinon, same stuff.

115
00:07:28.503 --> 00:07:32.342
It's like none of this stuff
has actually changed, right?

116
00:07:32.342 --> 00:07:35.690
And so if you see Sinon on your code base,
guess what?

117
00:07:35.690 --> 00:07:37.340
All of this stuff applies,

118
00:07:37.340 --> 00:07:41.659
because this is just a wrapper around
literally that library, right?

119
00:07:41.659 --> 00:07:46.440
I think there will be occasional times
where if we hover over stuff in TeleSense,

120
00:07:46.440 --> 00:07:47.928
you'll see it peek out.

121
00:07:47.928 --> 00:07:52.420
So the good news is, yeah, a lot of the
stuff doesn't matter because that expect

122
00:07:52.420 --> 00:07:55.194
stuff we've seen that's Chai,
which is again,

123
00:07:55.194 --> 00:07:59.712
a over a decade-old assertion library,
Sinon as a decade old mocking library.

124
00:07:59.712 --> 00:08:02.510
Say, JS and V test,
just wrap over them, right?

125
00:08:02.510 --> 00:08:07.096
I think JS wraps over Jasmine,
which is a 15-year-old test runner.

126
00:08:07.096 --> 00:08:11.996
So that's why when I say this stuff,
the differences don't really matter

127
00:08:11.996 --> 00:08:16.995
cuz a lot of times they are very similar
in the way that they approach things.

