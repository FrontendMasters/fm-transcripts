WEBVTT

1
00:00:00.100 --> 00:00:04.807
&gt;&gt; Steve Kinney: We need to talk about
equality in terms of JavaScript, which is,

2
00:00:04.807 --> 00:00:10.112
I think a lot of the things that we we
know from, React and it's siblings,

3
00:00:10.112 --> 00:00:14.992
all the front end frameworks,
honestly, is this idea of replacing

4
00:00:14.992 --> 00:00:19.945
objects in immutable state and
all those kinds of things, right?

5
00:00:19.945 --> 00:00:22.418
And so
a lot of times in something like React,

6
00:00:22.418 --> 00:00:25.996
we want the next version of the object
to be different than the last

7
00:00:25.996 --> 00:00:29.035
version 'cause that's how
we trigger a re-render.

8
00:00:29.035 --> 00:00:35.545
But that can become slightly problematic
when we are trying to test stuff, right?

9
00:00:35.545 --> 00:00:41.124
Which is, we've stayed with
mostly simple values so far.

10
00:00:41.124 --> 00:00:43.089
Two plus two should be four, right?

11
00:00:43.089 --> 00:00:48.138
And in memory,
there is one number four, right?

12
00:00:48.138 --> 00:00:51.114
If you make a string of the word four,
there's one of those in memory.

13
00:00:51.114 --> 00:00:54.034
So if you take any given
string of F-O-U-R and

14
00:00:54.034 --> 00:00:58.126
any other one of the same letters,
that's the same one in memory.

15
00:00:58.126 --> 00:00:58.996
So they are equal.

16
00:00:58.996 --> 00:01:03.238
You can put three triple equals
signs in there, life is good, right?

17
00:01:03.238 --> 00:01:07.327
Well, one triple equals sign, or three
single equal signs, your choice, three,

18
00:01:07.327 --> 00:01:10.839
triple, if you put nine equals in a row,
I don't know what happens, and

19
00:01:10.839 --> 00:01:11.758
like that works.

20
00:01:11.758 --> 00:01:17.128
Where it falls apart is that that
doesn't work for objects, right?

21
00:01:17.128 --> 00:01:18.768
Including arrays, so on and so forth.

22
00:01:18.768 --> 00:01:23.651
Which is two arrays with the exact
same contents are not triple equal

23
00:01:23.651 --> 00:01:25.371
to each other, right?

24
00:01:25.371 --> 00:01:31.310
Two objects with exact same keys and
values are not equal to each other, right?

25
00:01:31.310 --> 00:01:34.519
Which is, again, I understand those
methods at the bottom of the screen where

26
00:01:34.519 --> 00:01:36.723
I'm like, they're not equal to each other.

27
00:01:36.723 --> 00:01:40.550
So we have to use something called two
equal I don't make the rules here,

28
00:01:40.550 --> 00:01:42.074
I just explain them, okay?

29
00:01:42.074 --> 00:01:43.947
Naming things is hard.

30
00:01:43.947 --> 00:01:47.901
So, when we look at something
like 2b that is literally,

31
00:01:47.901 --> 00:01:50.012
is this the exact same object?

32
00:01:50.012 --> 00:01:55.725
Which means that if you took an object and
had a function that mutated it and

33
00:01:55.725 --> 00:02:00.065
then did a 2b it would be
the test would pass, right?

34
00:02:00.065 --> 00:02:04.115
But if you returned a brand new
object with the same properties,

35
00:02:04.115 --> 00:02:05.895
it would not, right?

36
00:02:05.895 --> 00:02:09.537
And so in those cases,
we have to swap out for

37
00:02:09.537 --> 00:02:15.035
one of these two other methods on
expect that handle those cases.

38
00:02:15.035 --> 00:02:19.415
One I use all the time,
the other I don't really use.

39
00:02:19.415 --> 00:02:21.200
But, I'm here to show them to you.

40
00:02:21.200 --> 00:02:25.862
So we're gonna take a look
real quick at this set of

41
00:02:25.862 --> 00:02:30.532
tests right here that kind
of these will all pass.

42
00:02:30.532 --> 00:02:32.446
And so we can go over here and

43
00:02:32.446 --> 00:02:36.367
just run them to validate that
that are not lying to you.

44
00:02:36.367 --> 00:02:39.645
They all pass, which will kind of
show us some of the differences, and

45
00:02:39.645 --> 00:02:42.050
we'll make them not pass and
pass a few more times.

46
00:02:42.050 --> 00:02:47.316
So you can see instead of tobe,
I'm using toequal, right?

47
00:02:47.316 --> 00:02:52.375
And in this case, if we did to be,
it will fail, right?

48
00:02:52.375 --> 00:02:57.396
Cuz this object and this object
are different objects in memory,

49
00:02:57.396 --> 00:03:01.972
even though they look and
feel the exact same to us, right?

50
00:03:01.972 --> 00:03:07.902
And the nice part is Vita is
not gonna make your test pass,

51
00:03:07.902 --> 00:03:11.003
or V test or Jest or whatever.

52
00:03:11.003 --> 00:03:14.071
They're not gonna make your test pass,
per se, but

53
00:03:14.071 --> 00:03:16.530
they kind of know what happened, right?

54
00:03:16.530 --> 00:03:21.156
And so at the very least,
you will get at a failing error message,

55
00:03:21.156 --> 00:03:26.304
which is like, it seems like you might
have just used the wrong one here.

56
00:03:26.304 --> 00:03:31.599
Which is nice because I don't wanna talk
about the times that I lost an hour or

57
00:03:31.599 --> 00:03:33.515
two of my life cuz I forgot.

58
00:03:33.515 --> 00:03:38.085
And cuz it's like they JSON serialize the
same string, they were probably the same,

59
00:03:38.085 --> 00:03:39.807
but they're not effectively.

60
00:03:39.807 --> 00:03:45.434
And you don't necessarily want your
test suite guessing for you, right?

61
00:03:45.434 --> 00:03:49.183
It can suggest things to you, but
you probably don't want it guessing.

62
00:03:49.183 --> 00:03:52.906
So, if we use to equal,
you'll see that it will pass, right?

63
00:03:52.906 --> 00:03:56.200
And as a fun bonus, you'll notice that,

64
00:03:56.200 --> 00:04:00.716
there's another little
helper that you can use.

65
00:04:00.716 --> 00:04:03.790
In this case, the .not, right,

66
00:04:03.790 --> 00:04:09.366
which is you're kinda expecting
it to be the opposite of it.

67
00:04:09.366 --> 00:04:14.468
Honestly, the time that I use
that the most is I might choose

68
00:04:14.468 --> 00:04:19.686
to have a test where it expect
whatever not to throw, right?

69
00:04:19.686 --> 00:04:23.397
Now, if it's throws,
it will also like failure test, but

70
00:04:23.397 --> 00:04:28.262
you can kind of like if you do need
the opposite, that can happen as well.

71
00:04:28.262 --> 00:04:32.181
The other one that again I
can't wholeheartedly recommend,

72
00:04:32.181 --> 00:04:35.570
but my job sometimes is to
just show you everything and

73
00:04:35.570 --> 00:04:40.635
you decide what you wanna do with your
life, is you can also write test.fails.

74
00:04:40.635 --> 00:04:43.666
And that will kinda flip the entire
thing inside out, right?

75
00:04:43.666 --> 00:04:46.685
So, now we expect this test to fail.

76
00:04:46.685 --> 00:04:49.235
Nobody needs that in their life.

77
00:04:49.235 --> 00:04:52.677
That is useful for when you think
you might have a false positive or

78
00:04:52.677 --> 00:04:53.873
something like that.

79
00:04:53.873 --> 00:04:57.177
I would not leave that, I would not
commit that, you know what I mean?

80
00:04:57.177 --> 00:05:01.271
That is when you need a sanity check
to like, is this passing because it's

81
00:05:01.271 --> 00:05:05.763
supposed to pass or I wanna see a failure
message so I can verify that everything is

82
00:05:05.763 --> 00:05:09.680
working the way I think it does,
then I think it makes a lot more sense.

83
00:05:09.680 --> 00:05:14.134
But I can't necessarily recommend it
as something you commit in there.

84
00:05:14.134 --> 00:05:20.120
You could argue the same thing for .todo
unless like you do intend on doing it.

85
00:05:20.120 --> 00:05:24.745
Because what nobody needs is a code
base full of tests that say all that

86
00:05:24.745 --> 00:05:25.716
.todo on it.

87
00:05:25.716 --> 00:05:30.781
Could you set up ESLint rules that don't
allow you to at least commit a .skip,

88
00:05:30.781 --> 00:05:31.636
or a .todo?

89
00:05:31.636 --> 00:05:34.839
Cuz you could also accidentally skip tests
that you meant to have in there because

90
00:05:34.839 --> 00:05:36.219
you were triaging and debugging.

91
00:05:36.219 --> 00:05:37.556
Ask me how I know that.

92
00:05:37.556 --> 00:05:40.158
&gt;&gt; Student: [LAUGH]
&gt;&gt; Steve Kinney: Anyway, these tests all

93
00:05:40.158 --> 00:05:46.101
passed because they're just here to
demonstrate how these things work.

94
00:05:46.101 --> 00:05:50.181
And you'll notice on the Vest Jest thing,
you'll even notice that like,

95
00:05:50.181 --> 00:05:54.089
VS Code is even actually filling in
thinking this is Jest expectation.

96
00:05:54.089 --> 00:05:59.527
So, if you needed proof that most of this
stuff will work in Jest just as well,

97
00:05:59.527 --> 00:06:02.467
VS Code thinks I'm using Jest right now.

98
00:06:02.467 --> 00:06:06.038
So we've got that in place, so we can see
that to be they would not be equal, but

99
00:06:06.038 --> 00:06:09.421
to equal, what it does is basically,
if it's an object or in this array.

100
00:06:09.421 --> 00:06:13.907
It goes through all of the values,
and it's basically saying, hey, okay,

101
00:06:13.907 --> 00:06:17.024
go through all the keys for
each key that's the same.

102
00:06:17.024 --> 00:06:18.598
Make sure the value is the same.

103
00:06:18.598 --> 00:06:22.870
It's basically iterating down until
it gets those primitive values, and

104
00:06:22.870 --> 00:06:26.756
if one of them doesn't match,
then they're not to equal, right?

105
00:06:26.756 --> 00:06:31.632
And the difference between two equal and
two strict equal is like, for instance,

106
00:06:31.632 --> 00:06:34.114
someone mentioned TypeScript earlier.

107
00:06:34.114 --> 00:06:38.016
TypeScript is super cool as a type system,
because,

108
00:06:38.016 --> 00:06:43.625
let's say you have an object that
has A is 1, B is 2, C is 3, right?

109
00:06:43.625 --> 00:06:47.615
And your type necessitates A as a number,
as B as a number.

110
00:06:47.615 --> 00:06:49.846
You could have extra properties,
typescripts, like,

111
00:06:49.846 --> 00:06:52.335
since we're not touching them,
it's fine, right?

112
00:06:52.335 --> 00:06:56.452
That is true for to equal, but
if you really want to say, like,

113
00:06:56.452 --> 00:06:59.196
strictly no, are they exactly the same?

114
00:06:59.196 --> 00:07:02.741
Right, then you could use toStrictEqual.

115
00:07:02.741 --> 00:07:09.822
99.999% of the time,
I will likely just go with this one.

116
00:07:09.822 --> 00:07:13.853
In the use case, you truly want to make
sure that there is not something undefined

117
00:07:13.853 --> 00:07:16.238
or something like that
that you're not using.

118
00:07:16.238 --> 00:07:19.462
Because this one is
basically saying A is 1.

119
00:07:19.462 --> 00:07:22.841
This one has A, and
it also has this extra B on it.

120
00:07:22.841 --> 00:07:23.855
That's fine with toEqual,

121
00:07:23.855 --> 00:07:26.228
we don't really care as long as we
have all the properties we want.

122
00:07:26.228 --> 00:07:30.583
But if you truly want to make sure
that there is no extra properties, and

123
00:07:30.583 --> 00:07:33.778
it doesn't necessarily have
to even be undefined or

124
00:07:33.778 --> 00:07:38.520
anything along those lines, but
toStrictEqual will absolutely verify it.

125
00:07:38.520 --> 00:07:42.872
Same thing here, which is, it also needs
to be an instance of the same object.

126
00:07:42.872 --> 00:07:47.073
So this person that we have
up here has a name property.

127
00:07:47.073 --> 00:07:48.548
It's effectively the same.

128
00:07:48.548 --> 00:07:50.735
It's got a different prototype, however.

129
00:07:50.735 --> 00:07:54.578
They are equal but
they're not toStrictEqual.

130
00:07:54.578 --> 00:07:57.912
And a lot of times like if I'm testing
a constructor or something like that,

131
00:07:57.912 --> 00:08:00.011
I just wanna make sure
the property is the same.

132
00:08:00.011 --> 00:08:03.010
I don't don't necessarily care.

133
00:08:03.010 --> 00:08:06.119
I don't wanna make a second person object,
so on and so forth.

134
00:08:06.119 --> 00:08:08.636
This most part does what I want.

135
00:08:08.636 --> 00:08:13.248
The important part here is that to be and
to equal serve very different purposes.

136
00:08:13.248 --> 00:08:17.313
To be for primitive values, to equal for
any kind of array or object.

137
00:08:17.313 --> 00:08:18.999
Strict equals there for the,

138
00:08:18.999 --> 00:08:22.719
if you feel like you need For
some particular use case, I don't.

