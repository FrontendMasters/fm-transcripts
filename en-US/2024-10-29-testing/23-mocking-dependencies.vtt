WEBVTT

1
00:00:00.000 --> 00:00:06.083
&gt;&gt; Steve Kinney: So let's look at one more
example here that I think will hopefully,

2
00:00:06.083 --> 00:00:09.295
again, this is like tricky stuff.

3
00:00:11.780 --> 00:00:18.547
&gt;&gt; Steve Kinney: There's a few kind of
interesting pieces in this logjam 1.

4
00:00:18.547 --> 00:00:21.624
So let's pull it open.

5
00:00:21.624 --> 00:00:28.274
So we have this interesting log function.

6
00:00:28.274 --> 00:00:33.459
It's supposed to be one that doesn't
get you in trouble in production,

7
00:00:33.459 --> 00:00:37.115
which means in development,
it's a console log,

8
00:00:37.115 --> 00:00:41.634
and in production,
it will send it to your log server, right?

9
00:00:41.634 --> 00:00:46.992
That way you don't, who has left
a console log in their code base and

10
00:00:46.992 --> 00:00:48.689
merged it into main?

11
00:00:48.689 --> 00:00:53.144
Everyone has, we've all done it.

12
00:00:53.144 --> 00:00:57.784
And so this one at least will send
it to your, it's a fake function.

13
00:00:57.784 --> 00:01:00.333
But the thing is problematic.

14
00:01:00.333 --> 00:01:01.772
This is what I was talking about before.

15
00:01:01.772 --> 00:01:06.481
This function is problematic for
a number of reasons.

16
00:01:06.481 --> 00:01:11.715
And we're gonna show how to solve
the problem with a mock, and

17
00:01:11.715 --> 00:01:17.870
then we're gonna show how maybe you
just don't need to do that, right?

18
00:01:17.870 --> 00:01:22.204
Okay, so problems here is,
guess what mode?

19
00:01:22.204 --> 00:01:30.087
This is like the same thing as,
&gt;&gt; Steve Kinney: Same

20
00:01:30.087 --> 00:01:33.294
basic idea this is either development,
test, or production.

21
00:01:33.294 --> 00:01:35.044
But guess what this is, guess what?

22
00:01:35.044 --> 00:01:38.134
This is in your test.

23
00:01:38.134 --> 00:01:42.724
It's test, all right, so
how do you test code that only behaves

24
00:01:42.724 --> 00:01:47.234
a certain way in production or
development if you're in test.

25
00:01:47.234 --> 00:01:53.112
[LAUGH] and then also this again,
we didn't pass this function in.

26
00:01:53.112 --> 00:01:58.335
When you require this file,
it's also gonna import this function.

27
00:01:58.335 --> 00:02:02.553
Good luck, right?

28
00:02:02.553 --> 00:02:08.256
And so if you wanted to test
how it behaves in production.

29
00:02:08.256 --> 00:02:11.890
Well, you're gonna send
stuff to the server, right?

30
00:02:11.890 --> 00:02:15.660
Because by calling this,
you require this log.js.

31
00:02:15.660 --> 00:02:20.120
It requires send to server tough, right?

32
00:02:20.120 --> 00:02:23.950
And so you're like,
I just won't test that code, okay?.

33
00:02:23.950 --> 00:02:29.127
That's a life choice, I guess or
we can figure out how to get around it.

34
00:02:29.127 --> 00:02:35.923
Okay, so we've got a few options here.

35
00:02:35.923 --> 00:02:41.049
And let's take a look
at both of those cases.

36
00:02:41.049 --> 00:02:44.402
All right, so let's talk about
the environment variable thing first.

37
00:02:44.402 --> 00:02:48.719
Cuz this one is pretty easy.

38
00:02:48.719 --> 00:02:53.112
You got two choices one a little bit
more glamorous than the other one.

39
00:02:53.112 --> 00:02:56.172
So what we can do is we can say like,
describe,

40
00:02:56.172 --> 00:02:58.458
and you can nest these if you want.

41
00:02:58.458 --> 00:02:59.537
You can say something like.

42
00:02:59.537 --> 00:03:03.289
You describe development,
and what that does?

43
00:03:03.289 --> 00:03:06.479
It just makes a little outline
of your tests prettier.

44
00:03:06.479 --> 00:03:08.092
That's all, it just indents it.

45
00:03:08.092 --> 00:03:13.521
That's it, I wouldn't get too carried
away, but you can do it occasionally.

46
00:03:13.521 --> 00:03:18.956
And so in development,
we'd like to see if,

47
00:03:18.956 --> 00:03:22.826
Console log is called, right?

48
00:03:22.826 --> 00:03:28.271
We did earlier, but
we need to say let's say before each.

49
00:03:32.593 --> 00:03:36.207
&gt;&gt; Steve Kinney: You could literally
just take the process and or

50
00:03:36.207 --> 00:03:41.733
whatever object and replace the value and
put it back when you're done.

51
00:03:41.733 --> 00:03:46.313
Or you can do this,
&gt;&gt; Steve Kinney: Stub

52
00:03:46.313 --> 00:03:50.976
the environment in this case mode.

53
00:03:50.976 --> 00:03:53.412
That means just for these tests,

54
00:03:53.412 --> 00:03:58.720
the MODE that we're in is gonna be
development instead of test, right?

55
00:03:58.720 --> 00:04:01.631
And after each put everything back,
everything you

56
00:04:01.631 --> 00:04:05.547
mess with in the world after each test,
put everything back, right?

57
00:04:05.547 --> 00:04:10.638
We were being a little lazy before
we didn't do that, but we should.

58
00:04:10.638 --> 00:04:12.460
So now, we'll stub the environment.

59
00:04:12.460 --> 00:04:17.873
And now we wanna say,
&gt;&gt; Steve Kinney: It

60
00:04:17.873 --> 00:04:21.323
logs to the console In development mode.

61
00:04:27.338 --> 00:04:28.115
&gt;&gt; Steve Kinney: Right and so

62
00:04:28.115 --> 00:04:32.170
in this case we'll say like that
logs by the way made earlier.

63
00:04:32.170 --> 00:04:32.892
Let's give it another shot.

64
00:04:39.552 --> 00:04:42.087
&gt;&gt; Steve Kinney: The property
name there and,

65
00:04:52.129 --> 00:04:53.995
&gt;&gt; Steve Kinney: So in development,

66
00:04:53.995 --> 00:04:59.020
we can expect that our spy
&gt;&gt; Steve Kinney: On

67
00:04:59.020 --> 00:05:00.632
console log was called.

68
00:05:14.540 --> 00:05:16.853
&gt;&gt; Steve Kinney: Except if you name
the variable two different things,

69
00:05:16.853 --> 00:05:17.662
it doesn't work.

70
00:05:17.662 --> 00:05:22.609
Okay, and
we can do something similar, right?

71
00:05:22.609 --> 00:05:27.586
We could do something for

72
00:05:27.586 --> 00:05:31.615
production where we

73
00:05:31.615 --> 00:05:39.992
say,
&gt;&gt; Steve Kinney: Go ahead and

74
00:05:39.992 --> 00:05:41.434
I'm going to steal this real quick.

75
00:05:44.554 --> 00:05:49.712
&gt;&gt; Steve Kinney: Where now we're gonna
say that the mode is production.

76
00:05:49.712 --> 00:05:53.991
Yeah, I'm gonna write a test relax.

77
00:05:53.991 --> 00:06:00.867
It should not call console log,
and if Production.

78
00:06:06.983 --> 00:06:09.134
&gt;&gt; Steve Kinney: And
all we'll do here is grab this code,

79
00:06:13.381 --> 00:06:15.914
&gt;&gt; Steve Kinney: And we'll say honestly

80
00:06:15.914 --> 00:06:20.851
just not open even called
it all I don't recall

81
00:06:20.851 --> 00:06:25.036
what you were called with, all right?

82
00:06:25.036 --> 00:06:28.473
And what are you angry about?

83
00:06:28.473 --> 00:06:29.978
Got a little carried with my copy and
pasting there.

84
00:06:34.123 --> 00:06:37.210
&gt;&gt; Steve Kinney: Right, so, now we have
the same thing because we're spying on it.

85
00:06:37.210 --> 00:06:41.728
We have two different environments, right?

86
00:06:41.728 --> 00:06:46.218
Where we say in development, we should
have called Cons log in production it

87
00:06:46.218 --> 00:06:50.725
should have never called Cons log, and
we now know that both are true right?

88
00:06:50.725 --> 00:06:53.490
That's not the hard part.

89
00:06:53.490 --> 00:06:55.815
What are we gonna do, yeah.

90
00:06:55.815 --> 00:06:56.624
&gt;&gt; Speaker 2: Sorry.

91
00:06:56.624 --> 00:06:58.313
&gt;&gt; Steve Kinney: Yeah.
&gt;&gt; Speaker 2: Can you define Stub real

92
00:06:58.313 --> 00:06:58.828
quick?

93
00:06:58.828 --> 00:07:03.875
&gt;&gt; Steve Kinney: No [LAUGH] replace it
with another value that's not real and

94
00:07:03.875 --> 00:07:05.525
put it back later.

95
00:07:05.525 --> 00:07:10.495
Yeah, thank you, if there's somebody who's
really into testing they're not gonna

96
00:07:10.495 --> 00:07:11.731
accept that answer.

97
00:07:11.731 --> 00:07:14.173
But that's the right answer.

98
00:07:14.173 --> 00:07:20.448
But I will get added on Twitter later for
that or I'm sorry X formerly Twitter.

99
00:07:20.448 --> 00:07:22.233
For that definition, but

100
00:07:22.233 --> 00:07:27.590
that is the more reasonable answer than
anyone else will give you, which is for

101
00:07:27.590 --> 00:07:32.399
a hot minute, regardless of what
reality is, can this be the answer?

102
00:07:32.399 --> 00:07:38.122
Yeah, and
then we put back the real answer later.

103
00:07:38.122 --> 00:07:42.754
Yeah the fact that and
how is that different from a mock,

104
00:07:42.754 --> 00:07:48.391
I don't know, like a mock is a function,
stub is a value who cares?

105
00:07:48.391 --> 00:07:51.389
It's a fake value that we put in there for
a second and

106
00:07:51.389 --> 00:07:54.057
then we put the real stuff back later,
right?

107
00:07:54.057 --> 00:07:59.164
Is the overall version here?

108
00:07:59.164 --> 00:08:03.013
So we, So for a minute,
the environment was always test, or

109
00:08:03.013 --> 00:08:04.680
the mode was always test.

110
00:08:04.680 --> 00:08:08.053
We lied for a hot minute,
said it was development,

111
00:08:08.053 --> 00:08:11.101
put it back afterwards, all right?

112
00:08:11.101 --> 00:08:13.387
Then in another set of tests, we lied for

113
00:08:13.387 --> 00:08:17.775
a minute, said it was production, and
then put it back afterwards, right?

114
00:08:17.775 --> 00:08:21.902
And this case we're spying on console log.

115
00:08:21.902 --> 00:08:24.550
And this is for everything people
complain about mocking and spying.

116
00:08:24.550 --> 00:08:27.930
This is fine cause we
didn't change any behavior.

117
00:08:27.930 --> 00:08:31.435
We just set the modes of development
of production for a minute and

118
00:08:31.435 --> 00:08:35.082
saw if a function got called,
nobody got hurt in the making of this.

119
00:08:35.082 --> 00:08:36.654
Now, let's hurt some people.

120
00:08:36.654 --> 00:08:38.600
What are we gonna do about this?

121
00:08:38.600 --> 00:08:41.040
This thing just pulls in, send a server.

122
00:08:41.040 --> 00:08:44.042
No matter what, right?

123
00:08:44.042 --> 00:08:46.365
And tough.

124
00:08:46.365 --> 00:08:48.737
Now, the answer is dependency injection.

125
00:08:48.737 --> 00:08:53.319
Well, let's make believe you can't
do that for a minute, right?

126
00:08:53.319 --> 00:08:56.408
Right, so
actually this test in production,

127
00:08:56.408 --> 00:08:58.872
send a server doesn't do anything.

128
00:08:58.872 --> 00:09:01.750
It just returns a string,
but it would theoretically,

129
00:09:01.750 --> 00:09:04.885
be calling some fictitious
server that would fail, right?

130
00:09:04.885 --> 00:09:07.560
And that's not great.

131
00:09:07.560 --> 00:09:12.643
But because of the way that we wrote
our code, not because testing is hard,

132
00:09:12.643 --> 00:09:17.663
because this code is hard to test,
we have to do terrible things, right?

133
00:09:17.663 --> 00:09:22.457
This thing, log,
just pulls in this dependency.

134
00:09:22.457 --> 00:09:23.368
Nothing we can do about it.

135
00:09:25.828 --> 00:09:31.883
&gt;&gt; Steve Kinney: We're gonna do something
about it, but if it makes you feel bad and

136
00:09:31.883 --> 00:09:36.656
it hurts your feelings,
that is the right feeling.

137
00:09:36.656 --> 00:09:40.042
So there is two more we'll get
to the other one in a second

138
00:09:40.042 --> 00:09:41.925
cuz it's just a brief moment.

139
00:09:41.925 --> 00:09:46.027
One more kind of way that mocking
manifests itself in here as well,

140
00:09:46.027 --> 00:09:48.529
which is you can do this terrible thing.

141
00:10:01.895 --> 00:10:06.701
&gt;&gt; Steve Kinney: This,
&gt;&gt; Steve Kinney: Now, when any of this,

142
00:10:06.701 --> 00:10:10.639
like the test file gets loaded first,
this will actually,

143
00:10:10.639 --> 00:10:14.681
even if you write it here,
effectively, it'll be up here.

144
00:10:14.681 --> 00:10:17.647
What this will do is, Vitest or Jest,

145
00:10:17.647 --> 00:10:23.040
whichever one makes you happier,
it's gonna get to this test file.

146
00:10:23.040 --> 00:10:26.850
It's going to take all these it's
gonna move them all to the top.

147
00:10:26.850 --> 00:10:32.578
And then it's going to say,
if anyone tries to import that file,

148
00:10:32.578 --> 00:10:39.832
let's replace it with a fake one,
&gt;&gt; Steve Kinney: Right, and now,

149
00:10:39.832 --> 00:10:46.402
instead of requesting that file, if you
give it nothing, it's just gonna automock,

150
00:10:46.402 --> 00:10:50.813
which is just put in dummy
values that don't do anything.

151
00:10:50.813 --> 00:10:56.802
So this alone will stop this thing
from calling out to the server, right?

152
00:10:56.802 --> 00:10:59.497
Let's verify that, which is.

153
00:10:59.497 --> 00:11:02.450
Let's say that no matter what,
this should throw.

154
00:11:11.109 --> 00:11:13.334
&gt;&gt; Steve Kinney: Right, weird.

155
00:11:13.334 --> 00:11:16.901
This thing should blow up no matter what.

156
00:11:16.901 --> 00:11:18.612
And it doesn't.

157
00:11:18.612 --> 00:11:19.870
You know why?

158
00:11:19.870 --> 00:11:22.404
Cuz it never gets imported.

159
00:11:22.404 --> 00:11:27.745
All this does, if you have something
that's pulling in some other like Axios or

160
00:11:27.745 --> 00:11:29.109
whatever, right?

161
00:11:29.109 --> 00:11:34.900
This will basically say, no, no, no, no,
no, you're not gonna require this one.

162
00:11:34.900 --> 00:11:37.384
I'm gonna give you a bunch of fake stuff.

163
00:11:37.384 --> 00:11:39.298
It's fine.

164
00:11:39.298 --> 00:11:42.709
And basically this is where
we get into trouble, right?

165
00:11:42.709 --> 00:11:44.737
Cuz I'm gonna do this all the time now.

166
00:11:44.737 --> 00:11:47.932
I'm gonna knock out everything.

167
00:11:47.932 --> 00:11:49.742
All right,
you've now made a mostly worthless.

168
00:11:49.742 --> 00:11:51.653
This works in a pinch, right?

169
00:11:51.653 --> 00:11:55.351
And you can even give
it a second argument,

170
00:11:55.351 --> 00:12:02.374
which is,
&gt;&gt; Steve Kinney: So,

171
00:12:02.374 --> 00:12:09.753
if I look at send a server, it exports
one property it's not a default export.

172
00:12:09.753 --> 00:12:15.162
So it's the send to server.

173
00:12:15.162 --> 00:12:17.923
So now what we can do here is,

174
00:12:37.265 --> 00:12:41.440
&gt;&gt; Steve Kinney: So
now we have not only mocked it out,

175
00:12:41.440 --> 00:12:46.166
we have replaced it with this BS version.

176
00:12:46.166 --> 00:12:52.512
The only nice thing we can do now is we
can expect that logs I was not called.

177
00:13:08.984 --> 00:13:10.921
&gt;&gt; Steve Kinney: Op,
what's she angry about?

178
00:13:14.707 --> 00:13:16.440
&gt;&gt; Steve Kinney: This is
gotta be a function, sorry.

179
00:13:22.388 --> 00:13:24.730
&gt;&gt; Steve Kinney: Nope.

180
00:13:38.342 --> 00:13:43.483
[INAUDIBLE]
&gt;&gt; Steve Kinney: We

181
00:13:43.483 --> 00:13:45.212
gotta pull in from that file.

182
00:13:52.986 --> 00:13:56.010
&gt;&gt; Steve Kinney: So, here we are saying,
anytime anyone asks you for

183
00:13:56.010 --> 00:14:01.321
send-to-server, don't give them the real
file, give them this fake version, right?

184
00:14:01.321 --> 00:14:04.322
And then we too ask for
the fake version, right?

185
00:14:04.322 --> 00:14:10.186
And our other code that we don't control
called it, and we hope for the best.

186
00:14:10.186 --> 00:14:14.201
That face is the right reaction because
you know what you could just do?

187
00:14:14.201 --> 00:14:18.496
You could just have this log function
takes some additional parameters,

188
00:14:18.496 --> 00:14:22.598
including a function you would like
it to call in production, right?

189
00:14:22.598 --> 00:14:26.135
You could have a default to all those
values, and you can just pass in stuff and

190
00:14:26.135 --> 00:14:28.927
be like, hey, yeah, by default,
call the sender server.

191
00:14:28.927 --> 00:14:33.507
But call whatever I passed in,
you could do something like this.

192
00:14:33.507 --> 00:14:37.344
Log, message, and let's say mode.

193
00:14:43.953 --> 00:14:44.708
&gt;&gt; Steve Kinney: And,

194
00:15:08.558 --> 00:15:13.029
&gt;&gt; Steve Kinney: And now you can just say

195
00:15:13.029 --> 00:15:20.555
hey, if mode is equal to production,

196
00:15:20.555 --> 00:15:28.327
not equal to production, otherwise.

197
00:15:32.176 --> 00:15:34.532
&gt;&gt; Steve Kinney: And now this
function is not only easier to test,

198
00:15:34.532 --> 00:15:38.160
because you can pass in the mode,
you can pass in the production callback.

199
00:15:38.160 --> 00:15:43.040
It also means that, let's say you want
it for to go to your error reporting

200
00:15:43.040 --> 00:15:47.684
in production, but you actually also
want this to do something else,

201
00:15:47.684 --> 00:15:50.463
maybe, in test, or in staging, right?

202
00:15:50.463 --> 00:15:55.149
Now, you can, even as you use this
function, you can pass in all of this

203
00:15:55.149 --> 00:15:59.783
stuff too, and you have a more
flexible function in general, right?

204
00:15:59.783 --> 00:16:03.807
And so now, guess what you get to delete?

205
00:16:03.807 --> 00:16:08.734
I don't know, all of this, right?

206
00:16:08.734 --> 00:16:13.148
Honestly, you get to delete all of this.

207
00:16:13.148 --> 00:16:18.531
You get to this can just
become a function that you

208
00:16:18.531 --> 00:16:25.619
pass in to make sure it got called
with the things you wanted to and

209
00:16:25.619 --> 00:16:32.079
you're not simulating reality or
mocking out the world.

210
00:16:32.079 --> 00:16:36.655
Cuz if you are,
let's say you wanna mock out axios,

211
00:16:36.655 --> 00:16:40.301
you gotta mock out all the axios, right?

212
00:16:40.301 --> 00:16:44.984
There's a way to import the actual one and
then only mock out wanted,

213
00:16:44.984 --> 00:16:47.501
you're going to mess it up, right?

214
00:16:47.501 --> 00:16:50.703
Versus, if you get to the point where
you can pass in the code you want,

215
00:16:50.703 --> 00:16:54.289
right, you get something that's more
flexible into day to day use because you

216
00:16:54.289 --> 00:16:56.391
can pass in different use cases, right?

217
00:16:56.391 --> 00:16:59.944
And also, you get something easier to
test, because now it's just JavaScript and

218
00:16:59.944 --> 00:17:01.061
not this crazy mocking and

219
00:17:01.061 --> 00:17:04.029
spying stuff that you're doing
all over the place, right?

220
00:17:04.029 --> 00:17:05.219
Again, these tools are available.

221
00:17:05.219 --> 00:17:08.989
If you need them,
they are there, use them, right?

222
00:17:08.989 --> 00:17:13.004
But outside of random numbers and
a few other things and dates,

223
00:17:13.004 --> 00:17:17.246
which we'll talk about in a second,
just make your life easier and

224
00:17:17.246 --> 00:17:21.336
pass in what a thing needs instead
of if it's pulling the stuff in

225
00:17:21.336 --> 00:17:24.790
internal to that file,
you have no control, right?

226
00:17:24.790 --> 00:17:27.020
And that's when testing gets hard, right?

227
00:17:27.020 --> 00:17:31.760
Testing should be as easy with add,
we passed in two and two, right?

228
00:17:31.760 --> 00:17:35.510
We passed in everything that function
needed to get his job done, right?

229
00:17:35.510 --> 00:17:39.233
And that should be true for everything we
write because then we can just pass in,

230
00:17:39.233 --> 00:17:41.290
the cool thing about those mock functions,

231
00:17:41.290 --> 00:17:44.365
which are just this version is
that's just a harmless function.

232
00:17:44.365 --> 00:17:48.409
I mean, this could have an implementation
here that does whatever you want.

233
00:17:48.409 --> 00:17:51.109
But you pass it in as a little
scientific probe, right, and

234
00:17:51.109 --> 00:17:54.189
then ask about what it saw when
it was inside the function.

235
00:17:54.189 --> 00:17:56.809
That's totally easy to reason about.

236
00:17:56.809 --> 00:18:01.996
Things get crazy cuz we're all kind of a
little stressed out about one dependency.

237
00:18:01.996 --> 00:18:06.824
[LAUGH] How many files have
one dependency, right?

238
00:18:06.824 --> 00:18:08.944
Doesn't happen all that often, right?

239
00:18:08.944 --> 00:18:12.813
And so with these patterns we can just
kind of passed off and this will work for

240
00:18:12.813 --> 00:18:14.869
a React component as well it'll work for

241
00:18:14.869 --> 00:18:18.514
a regular Javascript class as well
it'll work for a function, right?

242
00:18:18.514 --> 00:18:23.045
The one pattern that you might see
a little bit more often is you can imagine

243
00:18:23.045 --> 00:18:27.665
that this thing could eventually
take 13 different arguments, right?

244
00:18:30.425 --> 00:18:34.176
So what you'll eventually see is
something like this, where it's like,

245
00:18:34.176 --> 00:18:39.581
you'll have the core thing and then,
&gt;&gt; Steve Kinney: Yeah,

246
00:18:39.581 --> 00:18:41.945
and you'll have one object.

247
00:18:41.945 --> 00:18:44.684
This is a little bit easier to get away
with in TypeScript too, because you can

248
00:18:44.684 --> 00:18:47.995
say exactly what they are, and you get the
autocomplete and all that kind of stuff.

249
00:18:47.995 --> 00:18:52.194
But here we could do

250
00:18:52.194 --> 00:18:57.447
production callback.

251
00:18:57.447 --> 00:19:03.977
I hate the name of that function, but I'll
just put a fake function in here for now.

252
00:19:23.999 --> 00:19:28.285
&gt;&gt; Steve Kinney: So now the second
argument is by default an empty object,

253
00:19:28.285 --> 00:19:29.089
right?

254
00:19:29.089 --> 00:19:31.750
If any of those values are missing,
here are the defaults.

255
00:19:31.750 --> 00:19:34.515
So now you can basically passing
just the things you need and

256
00:19:34.515 --> 00:19:35.740
stuff along those lines.

257
00:19:35.740 --> 00:19:36.855
So that would end up being,

258
00:19:58.342 --> 00:19:59.207
&gt;&gt; Steve Kinney: Right, and so

259
00:19:59.207 --> 00:20:04.114
I probably got some other tests in here to
work through in a second, but generally

260
00:20:04.114 --> 00:20:09.180
speaking you have these options, you can
pass in what you need, so on and so forth.

261
00:20:09.180 --> 00:20:12.965
Again, works for React components,
works for functions, works for classes.

262
00:20:12.965 --> 00:20:17.504
Also it's just nice cuz it makes
your things totally reusable, right?

