WEBVTT

1
00:00:00.000 --> 00:00:03.684
&gt;&gt; Steve Kinney: We talked a lot about
mocking and stubbing and spying,

2
00:00:03.684 --> 00:00:08.099
and even in this case there is
the what about the backend, right?

3
00:00:08.099 --> 00:00:13.559
And there is a bunch of really great
tooling to help you solve for this issue.

4
00:00:13.559 --> 00:00:17.679
One of them, and
I'll kinda bring up the website and

5
00:00:17.679 --> 00:00:23.406
I'll show you some example code is
this App called Mock Service Worker.

6
00:00:23.406 --> 00:00:29.434
And all this really does is you can
use it in development in the browser.

7
00:00:29.434 --> 00:00:30.702
You can also use it in your tests.

8
00:00:30.702 --> 00:00:34.964
I'll show you an example in a second
of the app that I have it working with

9
00:00:34.964 --> 00:00:39.383
where basically a service worker is
something for progressive web apps.

10
00:00:39.383 --> 00:00:43.411
But like It allows offline use of
a web app and so on and so forth.

11
00:00:43.411 --> 00:00:47.814
What a service worker does in real
production practice is the stands between

12
00:00:47.814 --> 00:00:49.064
you and the network.

13
00:00:49.064 --> 00:00:54.164
So if you're offline, it can intercept
a network request and fill it in and then

14
00:00:54.164 --> 00:00:59.515
when you're online sync back up, a service
worker intercepts a network request.

15
00:00:59.515 --> 00:01:01.799
That's interesting, right?

16
00:01:01.799 --> 00:01:04.859
So what you can do with a service worker,
and

17
00:01:04.859 --> 00:01:09.988
what mock service worker will do for
you, is you can basically say, hey,

18
00:01:09.988 --> 00:01:15.488
here's a bunch of endpoints where I
don't want you to hit the server, right?

19
00:01:15.488 --> 00:01:19.535
What I want you to do is just return
this object back to me, right?

20
00:01:19.535 --> 00:01:23.082
So you can basically mock the backend,
right, and

21
00:01:23.082 --> 00:01:26.301
have it just respond with
known good objects so

22
00:01:26.301 --> 00:01:31.845
you can continue your testing and totally
separate yourself from the backend.

23
00:01:31.845 --> 00:01:33.345
This is useful for a few ways.

24
00:01:33.345 --> 00:01:36.131
One, you test one super fast because
it's not hitting the real network.

25
00:01:36.131 --> 00:01:40.138
Two, they pass because it's not
hitting the real network, right.

26
00:01:40.138 --> 00:01:44.857
Three is that you can start working
on APIs before they're done, right?

27
00:01:44.857 --> 00:01:48.063
Cuz you can mock out just one or
two given APIs, right?

28
00:01:48.063 --> 00:01:52.886
So if we look at that task list that
we had before, so check it out.

29
00:01:52.886 --> 00:01:57.161
This is like, here we can just

30
00:01:57.161 --> 00:02:02.643
basically put in a bunch of handlers.

31
00:02:02.643 --> 00:02:05.360
In this case, we can do something like,

32
00:02:14.121 --> 00:02:15.445
&gt;&gt; Steve Kinney: Or something like this,

33
00:02:15.445 --> 00:02:17.282
and then we can have it basically,

34
00:02:23.147 --> 00:02:26.114
&gt;&gt; Steve Kinney: You can say HTTP response

35
00:02:26.114 --> 00:02:32.759
and then that takes an async request,
like a callback.

36
00:02:32.759 --> 00:02:37.608
It can say like, hey,
&gt;&gt; Steve Kinney: I have two

37
00:02:37.608 --> 00:02:39.921
fake tasks in this JSON file.

38
00:02:39.921 --> 00:02:45.112
So okay,
whenever somebody goes to hit / does a get

39
00:02:45.112 --> 00:02:50.805
request /api/tasks,
block it hitting the network.

40
00:02:50.805 --> 00:02:52.616
Ignore that, right?

41
00:02:52.616 --> 00:02:56.799
And instead,
what I want you to do is like,

42
00:03:06.481 --> 00:03:07.244
&gt;&gt; Steve Kinney: Right?

43
00:03:07.244 --> 00:03:11.694
I guess I don't need the request
on that one, per se.

44
00:03:11.694 --> 00:03:14.361
And what this will do, and
this will work in your unit tests.

45
00:03:14.361 --> 00:03:16.303
You can actually spin
it up in the browser.

46
00:03:16.303 --> 00:03:17.981
As well so
it'll work in Playwright too, but

47
00:03:17.981 --> 00:03:20.202
there's actually something even better for
Playwright.

48
00:03:20.202 --> 00:03:22.256
We'll talk about it in a second.

49
00:03:22.256 --> 00:03:27.352
But now in your unit test,
you can basically pull in this server and

50
00:03:27.352 --> 00:03:31.180
have it basically mock
out all network requests.

51
00:03:31.180 --> 00:03:33.622
So now instead of hitting the real API,

52
00:03:33.622 --> 00:03:37.252
you can have it hit just some
standard responses, right?

53
00:03:37.252 --> 00:03:40.523
And you can do a whole bunch of stuff
with like put and patch and get and

54
00:03:40.523 --> 00:03:41.395
stuff like that.

55
00:03:41.395 --> 00:03:46.143
But what's really cool is you
can use different responses for

56
00:03:46.143 --> 00:03:48.249
different tests, right?

57
00:03:48.249 --> 00:03:54.124
And so like cool, have like an admin
account set of responses, right.

58
00:03:54.124 --> 00:03:58.760
And so instead of hitting the real
network you can, kind of like,

59
00:03:58.760 --> 00:04:02.652
fill in again the tasks is
just two fake tasks, right?

60
00:04:02.652 --> 00:04:05.290
And so
now it's never gonna hit the real network.

61
00:04:05.290 --> 00:04:07.913
But you're not, like,
stubbing weird stuff in your code.

62
00:04:07.913 --> 00:04:12.427
You're only the boundaries of your app
is it was leaving your app to go hit

63
00:04:12.427 --> 00:04:13.760
the server, right?

64
00:04:13.760 --> 00:04:17.166
This is stopping it at the very like,
borders of your app and saying, like,

65
00:04:17.166 --> 00:04:20.804
yeah, here's what you could have expected
to get back from the server, right?

66
00:04:20.804 --> 00:04:23.041
Wicked fast, right?

67
00:04:23.041 --> 00:04:26.035
Able to change based on, like, what
you want to test at that given moment.

68
00:04:26.035 --> 00:04:27.798
Maybe I want bad data.

69
00:04:27.798 --> 00:04:30.648
Maybe I want a 404, right?

70
00:04:30.648 --> 00:04:32.687
You can kinda do all of those things and

71
00:04:32.687 --> 00:04:35.619
just like,
if you've ever written an Express App, or

72
00:04:35.619 --> 00:04:39.397
even if you haven't, like,
going back into this handlers, right?

73
00:04:39.397 --> 00:04:42.584
Like, it's a get request to this route.

74
00:04:42.584 --> 00:04:45.912
Other than this, like, thing that was
just gonna do the rest of the, like,

75
00:04:45.912 --> 00:04:46.900
HTTP response stuff,

76
00:04:46.900 --> 00:04:50.490
we're just responding back with JSON of
what we wish that API would have given us.

77
00:04:50.490 --> 00:04:52.862
Great for
endpoints you don't have yet, too.

78
00:04:52.862 --> 00:04:55.837
The nice part is you're not doing
weird stuff to your code, either.

79
00:04:55.837 --> 00:04:59.994
You're just saying cuz you never
controlled what the server did in your

80
00:04:59.994 --> 00:05:02.765
code, unless you are also
testing the server,

81
00:05:02.765 --> 00:05:04.990
at which point you do own that as well.

82
00:05:04.990 --> 00:05:09.907
But also great for
developing things that maybe you don't

83
00:05:09.907 --> 00:05:13.124
like the APIs that aren't ready yet.

84
00:05:13.124 --> 00:05:18.224
My least favorite thing as a front end
engineer Is every other team takes

85
00:05:18.224 --> 00:05:23.413
a little longer than expected, but
the deadline didn't change [LAUGH].

86
00:05:23.413 --> 00:05:28.537
So if I wait for the API to be done, I
ain't got enough time to build the thing.

87
00:05:28.537 --> 00:05:31.800
So for instance,
we could do like a post as well.

88
00:05:31.800 --> 00:05:38.672
Like in this one we want
the request object.

89
00:05:38.672 --> 00:05:43.214
So that will have been the request
from the quote unquote client.

90
00:05:43.214 --> 00:05:47.893
At this point, yeah, we're just doing
like, that one, I just want the title,

91
00:05:53.725 --> 00:05:54.468
&gt;&gt; Steve Kinney: Here as well and

92
00:05:54.468 --> 00:05:58.071
then we'll just say, I've got this
fake create task function that does,

93
00:05:58.071 --> 00:06:01.169
I wrote the server, so
I happen to know what the server does too.

94
00:06:01.169 --> 00:06:04.349
Granted, I don't use a real database or
anything.

95
00:06:04.349 --> 00:06:05.935
So then we'll say,

96
00:06:15.076 --> 00:06:15.876
&gt;&gt; Steve Kinney: Title and

97
00:06:15.876 --> 00:06:20.479
I could push that onto the array,
too, if I wanted to.

98
00:06:20.479 --> 00:06:23.002
I can make it work as close
to a real server as possible.

99
00:06:23.002 --> 00:06:27.915
Now, the problem is, generally speaking,
you do need to like, at what point are you

100
00:06:27.915 --> 00:06:33.125
simulating the server so much that you've
just rewritten the server, unclear, right?

101
00:06:33.125 --> 00:06:34.782
And so that's why I'm not pushing it out.

102
00:06:34.782 --> 00:06:37.961
I'm not pretending like it's
a real server, too much.

103
00:06:37.961 --> 00:06:42.779
But now you can theoretically post a new
task to it, and this will then send

104
00:06:42.779 --> 00:06:47.227
back the response that I would have
gotten from the server, right?

105
00:06:47.227 --> 00:06:48.879
And you just kinda get that.

106
00:06:48.879 --> 00:06:51.671
So now you can use that in
your unit tests, right?

107
00:06:51.671 --> 00:06:55.359
Cuz now it'll intercept
those requests too.

108
00:06:55.359 --> 00:06:58.557
From fetch and we'll just respond
back with it immediately.

109
00:06:58.557 --> 00:07:00.897
You can use it in development.

110
00:07:00.897 --> 00:07:08.969
The one thing that we're using
a little bit in Playwright,

111
00:07:08.969 --> 00:07:13.741
which is,
&gt;&gt; Steve Kinney: If you've ever

112
00:07:13.741 --> 00:07:17.792
gone to the network tab in Chrome,
a lot of times for an API request,

113
00:07:17.792 --> 00:07:19.371
it would be like copy HAR.

114
00:07:19.371 --> 00:07:22.872
You can copy like the full request and
response.

115
00:07:22.872 --> 00:07:27.331
And basically,
you can tell Playwright like, hey,

116
00:07:27.331 --> 00:07:32.896
just like when you hit this endpoint,
respond with this HAR file.

117
00:07:32.896 --> 00:07:38.503
But what's even cooler Is
right here where you can say,

118
00:07:38.503 --> 00:07:45.435
hey, give me the request that I
would've gotten for this endpoint.

119
00:07:45.435 --> 00:07:49.273
But if you are able to hit the network,
record it.

120
00:07:49.273 --> 00:07:53.855
So now what you can do is you can fire
up Playwright, you can start writing

121
00:07:53.855 --> 00:07:57.991
the test against real production server or
staging or whatever,

122
00:07:57.991 --> 00:08:03.354
record all the network requests, have it
store them and then play everything back.

123
00:08:03.354 --> 00:08:07.394
And so if, even if you did like a,
Hey, get me all the tasks,

124
00:08:07.394 --> 00:08:11.696
post a task, get all the tasks again,
it keeps the order right?

125
00:08:11.696 --> 00:08:14.259
And so you will get like a recording
of all the network requests.

126
00:08:14.259 --> 00:08:16.566
So now,
when we think about what we saw before,

127
00:08:16.566 --> 00:08:18.883
you can basically turn
on this recording mode.

128
00:08:18.883 --> 00:08:23.038
And so what we're doing with it is we,
there's a few bad things that I,

129
00:08:23.038 --> 00:08:24.996
mistakes that I made early days.

130
00:08:24.996 --> 00:08:26.913
I forgot to think about dark mode ever.

131
00:08:26.913 --> 00:08:30.467
That was a three months of
my life I'll never get back.

132
00:08:30.467 --> 00:08:34.741
I wasn't as great as I should
have been on responsive design.

133
00:08:34.741 --> 00:08:40.047
Do you know how much it stresses me
out to retrofit in a mobile view?

134
00:08:40.047 --> 00:08:44.256
And so what we're basically doing is
we have it set up in our cloud thing,

135
00:08:44.256 --> 00:08:48.741
we're setting up the open source side,
which is fire up a Playwright browser

136
00:08:48.741 --> 00:08:52.812
at all the different viewpoints,
record all the network requests for

137
00:08:52.812 --> 00:08:56.627
a bunch of different cases, and
then take screenshots, right?

138
00:08:56.627 --> 00:09:01.540
And that way if we accidentally
regress the tablet view while working

139
00:09:01.540 --> 00:09:05.616
on the mobile view,
I've got visual evidence, right?

140
00:09:05.616 --> 00:09:06.668
And we can kind of see.

141
00:09:06.668 --> 00:09:12.087
And this is like, again, right,
it's about how do we do this big refactor

142
00:09:12.087 --> 00:09:17.163
without like breaking stuff,
which is to first surround it in tests,

143
00:09:17.163 --> 00:09:21.137
right, to the point where
we feel confident, right?

144
00:09:21.137 --> 00:09:24.577
Yeah, we might break something, but the
ideas that we see before our customers do.

