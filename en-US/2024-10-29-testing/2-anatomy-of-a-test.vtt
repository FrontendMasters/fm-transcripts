WEBVTT

1
00:00:00.000 --> 00:00:02.826
&gt;&gt; Steve Kinney: In our example app,
we have this little scratch pad here.

2
00:00:02.826 --> 00:00:06.828
Also on the website, there's a way to just
open it in your browser to play around

3
00:00:06.828 --> 00:00:08.877
with it as well for this particular one.

4
00:00:08.877 --> 00:00:12.581
But this is that test that we saw
in the very beginning, right?

5
00:00:12.581 --> 00:00:15.385
And I need to just go into that directory.

6
00:00:15.385 --> 00:00:19.115
So I'll go into examples,
scratchpad in this case.

7
00:00:19.115 --> 00:00:23.467
We've got this test, but having a test
in an editor is great and wonderful,

8
00:00:23.467 --> 00:00:25.244
but we probably need to run it.

9
00:00:25.244 --> 00:00:28.034
And so we're gonna do npm test.

10
00:00:28.034 --> 00:00:30.713
And yay, it passes,
which is what we expect.

11
00:00:30.713 --> 00:00:33.495
So what does npm test come from,
all right?

12
00:00:33.495 --> 00:00:37.700
In our package.json,
there is the set called scripts,

13
00:00:37.700 --> 00:00:42.692
where our npm test runs vitest,
which I will try my hardest all day to

14
00:00:42.692 --> 00:00:48.225
pronounce as V test, cuz I didn't
realize it's vi, cool, cool, cool.

15
00:00:48.225 --> 00:00:50.555
Because this doesn't
really have a real app.

16
00:00:50.555 --> 00:00:53.555
The start script is to
open up the vitest UI,

17
00:00:53.555 --> 00:00:58.097
which every time I set up a new
repository I think I'm going to use,

18
00:00:58.097 --> 00:01:01.517
most often I don't,
I just use the command line.

19
00:01:01.517 --> 00:01:04.604
But so
that's where the npm test comes from.

20
00:01:04.604 --> 00:01:08.650
So if you make a brand new package.json,
a lot of times you do like npm init,

21
00:01:08.650 --> 00:01:09.674
test will be echo.

22
00:01:09.674 --> 00:01:11.491
You have no test set up, right?

23
00:01:11.491 --> 00:01:15.295
So usually you need to install some
kind of test runner, just vitest,

24
00:01:15.295 --> 00:01:16.135
what have you.

25
00:01:16.135 --> 00:01:19.839
Whichever one's your favorite or
came with your framework is good.

26
00:01:19.839 --> 00:01:24.993
And then you just make the test script
that command that you would like to run.

27
00:01:24.993 --> 00:01:30.193
You can see, once we start it,
it just kind of sits there and waits.

28
00:01:30.193 --> 00:01:35.307
And what it's gonna do is rerun
the tests whenever the code changes.

29
00:01:35.307 --> 00:01:39.607
And most of the modern test
runners are also pretty great,

30
00:01:39.607 --> 00:01:45.953
cuz they will usually only rerun the tests
of the files that you have changed, right?

31
00:01:45.953 --> 00:01:49.760
Cuz if you have not changed the code,
and it's not related to code that you've

32
00:01:49.760 --> 00:01:53.923
changed, there's no point rerunning those
tests, because all of that takes time.

33
00:01:53.923 --> 00:01:56.433
The quicker you can get that feedback,
the better.

34
00:01:56.433 --> 00:01:59.518
So we've got a skipped test
here that we'll look at later.

35
00:01:59.518 --> 00:02:02.041
But for the most part,
we've got one passed.

36
00:02:02.041 --> 00:02:03.472
Everything's good.

37
00:02:03.472 --> 00:02:05.701
So here we've got that simple test.

38
00:02:05.701 --> 00:02:07.989
Now, what does it mean to fail?

39
00:02:07.989 --> 00:02:11.131
I mean,
[LAUGH] something I know super well, but

40
00:02:11.131 --> 00:02:16.409
more practically in this moment, which
is if those expectations are not true.

41
00:02:16.409 --> 00:02:18.439
So here we'll go ahead and we'll save it.

42
00:02:18.439 --> 00:02:23.297
As you see now, my test fails, and
everything is red and sad, right?

43
00:02:23.297 --> 00:02:28.089
So you get that visual feedback of when
the world is not behaving the way that

44
00:02:28.089 --> 00:02:29.395
you expect, true?

45
00:02:29.395 --> 00:02:31.115
It passes, yay.

46
00:02:31.115 --> 00:02:35.199
But the tricky part that I
wanna call out early is,

47
00:02:35.199 --> 00:02:39.381
various points,
I've numbered these rules, but

48
00:02:39.381 --> 00:02:43.677
as I add more rules inside
the ordering has changed.

49
00:02:43.677 --> 00:02:47.352
One of my rules of programming or
testing is,

50
00:02:47.352 --> 00:02:51.913
if your test passes,
it doesn't mean your code works.

51
00:02:51.913 --> 00:02:56.576
It just means that your test didn't fail,
right?

52
00:02:56.576 --> 00:02:59.186
So a passing test does not
mean your code works, and

53
00:02:59.186 --> 00:03:03.326
this is where you can have 100% code
coverage and bad tests simultaneously.

54
00:03:03.326 --> 00:03:06.677
Just because your test passed
does not mean your code works,

55
00:03:06.677 --> 00:03:09.049
it just means your code doesn't not work.

56
00:03:09.049 --> 00:03:11.880
And so let's talk about what
I mean by that, which is,

57
00:03:11.880 --> 00:03:14.106
let's say I just commented out this line.

58
00:03:14.106 --> 00:03:15.298
My test passes.

59
00:03:15.298 --> 00:03:18.297
Do you know why it passed?

60
00:03:18.297 --> 00:03:20.612
Cuz it didn't fail, right?

61
00:03:20.612 --> 00:03:25.891
The act of not failing causes it to pass.

62
00:03:25.891 --> 00:03:28.897
For example, really,
all a failing test is,

63
00:03:28.897 --> 00:03:33.693
we've got this expect and to be true and
that seems like some wild syntax.

64
00:03:33.693 --> 00:03:38.873
All it really does is it takes this, and
then when it gets the other part of it,

65
00:03:38.873 --> 00:03:43.292
compares them, and if it's wrong,
it throws an error, right?

66
00:03:43.292 --> 00:03:46.344
And the act of throwing the exception
causes the test to fail.

67
00:03:46.344 --> 00:03:51.373
So for instance, if I did this and
I said, throw new error.

68
00:03:57.098 --> 00:03:58.706
&gt;&gt; Steve Kinney: All right,
my tests fail and

69
00:03:58.706 --> 00:04:03.004
you can kind of see that this is where
it failed, because there's an error.

70
00:04:03.004 --> 00:04:07.466
Now it's not particularly good reason,
because I just threw an error randomly,

71
00:04:07.466 --> 00:04:09.547
but that is what causes a test to fail.

72
00:04:09.547 --> 00:04:11.786
It is simply going to run your function,
right?

73
00:04:11.786 --> 00:04:15.597
You can make some assertions or
expectations about what you expect to come

74
00:04:15.597 --> 00:04:19.221
out the other end, and if that is not
true, it will throw an error, and

75
00:04:19.221 --> 00:04:21.013
that will cause your test to fail.

76
00:04:21.013 --> 00:04:25.286
But like I said before, not having
expectation or subtle things like

77
00:04:25.286 --> 00:04:30.607
everyone's favorite part about writing
Javascript is asynchronous code, right?

78
00:04:30.607 --> 00:04:33.804
We love how easy asynchrony makes it,
right?

79
00:04:33.804 --> 00:04:38.652
And so for instance, if we did something
like this, we said setTimeout, and

80
00:04:38.652 --> 00:04:43.650
we'll put a little function in here,
and we'll say, expect true to be false,

81
00:04:43.650 --> 00:04:47.472
or false to be true,
depending on your feelings about life.

82
00:04:47.472 --> 00:04:53.172
And we'll say, do that in a second,
my test passes, right?

83
00:04:53.172 --> 00:04:57.502
Because the test completed before I
made any assumptions about the world.

84
00:04:57.502 --> 00:05:01.005
And so you can see a world where you can
still get yourself into a little bit of

85
00:05:01.005 --> 00:05:01.514
trouble.

86
00:05:01.514 --> 00:05:06.209
Towards the end, we will literally come
back and revisit this and see, like,

87
00:05:06.209 --> 00:05:11.047
if you did need to wait a second to make
an expectation, how you might solve that,

88
00:05:11.047 --> 00:05:14.131
we're not gonna go down
that rabbit hole just yet.

89
00:05:14.131 --> 00:05:18.105
That is a rabbit hole that we will walk
by for now and then circle back to and

90
00:05:18.105 --> 00:05:19.355
then go down it later.

91
00:05:19.355 --> 00:05:22.026
But the important part here is,
effectively,

92
00:05:22.026 --> 00:05:25.115
all your tests do is call a function,
take the result.

93
00:05:25.115 --> 00:05:30.359
A unit test, on a very basic level,
calls a function, looks at result, throws

94
00:05:30.359 --> 00:05:35.708
an error if it's not what it's supposed
to be, moves on with its life if it does.

95
00:05:35.708 --> 00:05:39.839
If any errors are thrown,
test suite turns red and sad, right?

96
00:05:39.839 --> 00:05:43.634
That is, at the end of the day,
all there is to testing.

