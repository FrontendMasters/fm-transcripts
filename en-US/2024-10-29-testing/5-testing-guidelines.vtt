WEBVTT

1
00:00:00.250 --> 00:00:03.163
&gt;&gt; Steve Kinney: One thing I kinda
wanna talk about real quick, is just

2
00:00:03.163 --> 00:00:07.899
those general principles of testing, and
then we'll kinda jump back into this code.

3
00:00:07.899 --> 00:00:09.891
Coz now we've got some
tests under our belt,

4
00:00:09.891 --> 00:00:11.890
and we've got some sense around it, right?

5
00:00:13.240 --> 00:00:17.821
As we saw,
I think I've at least proven a little bit.

6
00:00:17.821 --> 00:00:18.993
I got more work to do on this.

7
00:00:18.993 --> 00:00:21.775
I'm proven a little bit of the first
one here is that the writing test isn't

8
00:00:21.775 --> 00:00:22.359
all that hard.

9
00:00:22.359 --> 00:00:25.391
You just wrote four tests,
that wasn't that hard.

10
00:00:25.391 --> 00:00:29.485
I'm hiding some complexity from you,
of course, but

11
00:00:29.485 --> 00:00:32.962
the actual writing of the test,
not that bad.

12
00:00:32.962 --> 00:00:37.114
You took two and two, you expected
it to be four., it passed, great.

13
00:00:37.114 --> 00:00:39.327
So clearly,
writing tests can't be all that hard.

14
00:00:42.211 --> 00:00:43.852
&gt;&gt; Steve Kinney: Those test paths,
we talked about that.

15
00:00:43.852 --> 00:00:46.445
If I was using this code, it would pass.

16
00:00:46.445 --> 00:00:50.131
And then breaking stuff out into those
too many small, no one's ever broken

17
00:00:50.131 --> 00:00:54.217
their code to too many small, well-named,
easy to test functions, right?

18
00:00:54.217 --> 00:00:58.922
A lot of times you have two numbers just
in your code or maybe you're doing a whole

19
00:00:58.922 --> 00:01:02.926
bunch of stuff and it's just one
line in a 700 line conditional,

20
00:01:02.926 --> 00:01:05.298
that's hard to test then, right?

21
00:01:05.298 --> 00:01:08.028
And so what you can start to
do is pull stuff out into

22
00:01:08.028 --> 00:01:11.280
these very simple functions,
like our add or multiply, or

23
00:01:11.280 --> 00:01:15.268
it might be maybe we needed to title
case the heading when we rendered it.

24
00:01:15.268 --> 00:01:19.415
And maybe that's just a line of like
a regex or something in a large reactor.

25
00:01:19.415 --> 00:01:24.091
Component to begin to pull those things
out into very simple functions that have

26
00:01:24.091 --> 00:01:28.850
arguments and give you return values you
begin to pull those pieces out, right?

27
00:01:28.850 --> 00:01:31.968
And maybe you can't write tests for
the whole thing all at once,

28
00:01:31.968 --> 00:01:35.102
we take more of these small pieces and
you use them as we go along.

29
00:01:35.102 --> 00:01:40.835
But there's these tests
leave a lot to be desired.

30
00:01:40.835 --> 00:01:43.931
And because they leave
a lot to be desired,

31
00:01:43.931 --> 00:01:46.518
they do make one of my other points.

32
00:01:46.518 --> 00:01:50.745
Which is, if I was to run a code coverage
analysis tool on this, which is basically

33
00:01:50.745 --> 00:01:54.198
all a code coverage analysis tool
does is it starts with your test.

34
00:01:54.198 --> 00:01:57.495
So code that you don't test isn't
counted in the coverage report.

35
00:01:58.554 --> 00:02:02.201
It's only files that are imported by
your test that's one way to get to 100%.

36
00:02:02.201 --> 00:02:06.326
Two is if we look at these tests, right?

37
00:02:06.326 --> 00:02:11.835
If we just did our own like mental code
coverage report, you look at these tests,

38
00:02:11.835 --> 00:02:16.389
you look at this code,
we would get 100% code coverage right?

39
00:02:16.389 --> 00:02:19.434
We would everything would be great.

40
00:02:19.434 --> 00:02:23.194
And life would go on and
we feel really good about everything.

41
00:02:23.194 --> 00:02:23.919
That said,

42
00:02:23.919 --> 00:02:29.154
there are some problems here that we have
not just not thought about at all, right?

43
00:02:29.154 --> 00:02:30.152
What are you talking about?

44
00:02:30.152 --> 00:02:31.738
I added two and two, everything's great.

45
00:02:31.738 --> 00:02:36.377
We said that if you add two and two,
everything should be really great.

46
00:02:36.377 --> 00:02:40.261
And one of the things,
both the mix of our testing and

47
00:02:40.261 --> 00:02:44.584
the way we write code,
kind of interplay with each other is

48
00:02:44.584 --> 00:02:48.814
thinking about what we call
the unhappy path, right?

49
00:02:48.814 --> 00:02:53.419
Which is the outside world
is real problematic,

50
00:02:53.419 --> 00:02:57.794
all sorts of stuff can happen, right?

51
00:02:57.794 --> 00:03:02.085
And especially in JavaScript
we know there's jokes.

52
00:03:02.085 --> 00:03:05.630
Python engineers make jokes about
how math works in JavaScript, and

53
00:03:05.630 --> 00:03:08.268
I have considered none of
that in my tests, right?

54
00:03:08.268 --> 00:03:14.258
True plus true equals two,
one plus one as a string equals 11, right?

55
00:03:14.258 --> 00:03:17.814
But try to subtract one as a string,
so on and so forth.

56
00:03:17.814 --> 00:03:22.543
What happens if I happen to
give you both arguments, right?

57
00:03:22.543 --> 00:03:26.236
A and B, that everything works, what
happens if I only give you one, right?

58
00:03:26.236 --> 00:03:28.027
There, no TypeScript here, right?

59
00:03:28.027 --> 00:03:30.677
Even then you can get around
anything you use one, any, and

60
00:03:30.677 --> 00:03:32.650
then the world's your oyster again.

61
00:03:32.650 --> 00:03:34.585
And so
when we think about the unhappy path,

62
00:03:34.585 --> 00:03:37.686
this is way to both think about our
code and also think about our tests.

63
00:03:37.686 --> 00:03:41.108
And then using our test and that test
driven development that we saw before to

64
00:03:41.108 --> 00:03:43.552
get us to handling all those things,
right?

65
00:03:43.552 --> 00:03:46.541
And again, it will repeatedly try
all these things over and over and

66
00:03:46.541 --> 00:03:47.490
over again, right?

67
00:03:47.490 --> 00:03:52.362
So I said, there's all sorts
of fun things in JavaScript.

68
00:03:52.362 --> 00:03:56.782
Who doesn't love, not a number, right?

69
00:03:56.782 --> 00:04:01.942
And all sorts of ways that even our humble
addition function can go horribly wrong,

70
00:04:01.942 --> 00:04:02.827
right?

71
00:04:02.827 --> 00:04:05.967
What happens if I only
give it one argument?

72
00:04:05.967 --> 00:04:09.499
What happens if I give it
null as the first argument?

73
00:04:09.499 --> 00:04:12.170
What happens if I give it a string and
a number?

74
00:04:12.170 --> 00:04:15.224
What happens if I give it the word potato,
right?

75
00:04:15.224 --> 00:04:17.023
So on and so forth.

76
00:04:17.023 --> 00:04:18.471
What happens if I try to divide by 0?

77
00:04:18.471 --> 00:04:19.571
&gt;&gt; Speaker 2: How do you pick?

78
00:04:19.571 --> 00:04:23.052
When we're writing tests,
we decided which number should we divide?

79
00:04:23.052 --> 00:04:24.167
I don't know, 10, 6.

80
00:04:24.167 --> 00:04:26.972
Is that related to this?

81
00:04:26.972 --> 00:04:29.344
Picking your test conditions?

82
00:04:29.344 --> 00:04:30.623
&gt;&gt; Steve Kinney: Exactly, right?

83
00:04:30.623 --> 00:04:33.660
And so
step one is we thought about that initial.

84
00:04:33.660 --> 00:04:37.050
Again, for adding two numbers,
fine, right?

85
00:04:37.050 --> 00:04:43.779
This is the thing where there's no
method in your test library, yes and no.

86
00:04:43.779 --> 00:04:46.843
But generally speaking,
there's no method in your code.

87
00:04:46.843 --> 00:04:49.625
This involves that kind of intellectual
exercise when it comes down

88
00:04:49.625 --> 00:04:50.908
to testing your code, right?

89
00:04:50.908 --> 00:04:52.246
That is less about, well,

90
00:04:52.246 --> 00:04:55.533
what method comes from the testing
library to help me do this?

91
00:04:55.533 --> 00:05:02.375
It's more about, have I over the years
cultivated enough paranoia, right?

92
00:05:02.375 --> 00:05:04.278
Of all the things that can go wrong,
right?

93
00:05:04.278 --> 00:05:06.777
When I talk to the junior
engineers on my team and

94
00:05:06.777 --> 00:05:09.727
I solve a problem like this for
them, you're so smart.

95
00:05:09.727 --> 00:05:12.715
And I take that compliment, I marinate
it a little bit, but it's not true.

96
00:05:12.715 --> 00:05:14.975
I've just seen more.

97
00:05:14.975 --> 00:05:19.282
I've burned a week on the bug
four times in the last.

98
00:05:19.282 --> 00:05:20.492
A few years, and so

99
00:05:20.492 --> 00:05:25.946
now I walk in knowing looking like I
know everything that's possible to know.

100
00:05:25.946 --> 00:05:30.040
So we have all these cases and there
is not a necessarily a right answer for

101
00:05:30.040 --> 00:05:31.726
all of these things, right?

102
00:05:33.346 --> 00:05:38.320
So we basically have three choices
about how to handle these cases.

103
00:05:38.320 --> 00:05:42.255
One is we can figure a way
to fail gracefully, right?

104
00:05:42.255 --> 00:05:45.445
And some of it is just a decision, right?

105
00:05:45.445 --> 00:05:50.058
And you will find out in fun ways about
how your decision was wrong later, right?

106
00:05:50.058 --> 00:05:54.896
No matter what decision you make,
you will not to get Kierkegaard on you,

107
00:05:54.896 --> 00:05:59.200
but you will find out ways that
that doesn't work later, right?

108
00:05:59.200 --> 00:06:03.005
And the next part is you will have those
tests in place so that if you make

109
00:06:03.005 --> 00:06:07.153
a change to your code, you will know
that things work as you expect, right?

110
00:06:07.153 --> 00:06:11.267
So you get three options fail gracefully.

111
00:06:11.267 --> 00:06:15.853
And that means maybe if they pass
us the string of one, right?

112
00:06:15.853 --> 00:06:17.003
You're like, who would do that?

113
00:06:17.003 --> 00:06:18.560
You get it from a query pram,
it's a string.

114
00:06:18.560 --> 00:06:21.821
You didn't expect it be a string or
an input field, or whatever.

115
00:06:21.821 --> 00:06:24.890
Lots of ways strings get in your maths,
right?

116
00:06:24.890 --> 00:06:28.228
You could choose to try to
parse it into a number, right?

117
00:06:28.228 --> 00:06:30.624
You could,
if they don't give you a second argument,

118
00:06:30.624 --> 00:06:32.888
you can just assume that it's zero.

119
00:06:32.888 --> 00:06:34.758
It doesn't,
there's no right answer for this.

120
00:06:34.758 --> 00:06:38.042
It all depends on like the situation
you're trying to solve, but

121
00:06:38.042 --> 00:06:41.041
figure out some way that
the function still works, right?

122
00:06:41.041 --> 00:06:47.922
Failing that, right,
you could choose to throw an error, right?

123
00:06:47.922 --> 00:06:50.318
Especially if it's something that's
gonna happen at build time or

124
00:06:50.318 --> 00:06:52.979
something along those are some where
you have the error handling in place.

125
00:06:52.979 --> 00:06:57.723
Sometimes being, I don't know what to
do is better than letting stuff get

126
00:06:57.723 --> 00:06:59.941
into a weird state, right?

127
00:06:59.941 --> 00:07:04.397
The only wrong answer here is, right.

128
00:07:04.397 --> 00:07:10.286
Right now, if someone passed in undefined,
we have 100% test coverage,

129
00:07:10.286 --> 00:07:15.291
and I don't know what happens
on a given argument, right?

130
00:07:15.291 --> 00:07:18.900
So that's where this becomes again,

131
00:07:18.900 --> 00:07:23.072
that practice of going in here and
saying and

132
00:07:23.072 --> 00:07:28.282
you start with what you would
like the world to be like.

133
00:07:28.282 --> 00:07:32.043
We might even start out with other
good test cases just to make sure that

134
00:07:32.043 --> 00:07:32.695
they work.

135
00:07:32.695 --> 00:07:37.184
Coz again, the value of this test suite is
it is going to hammer at my code with all

136
00:07:37.184 --> 00:07:39.747
sorts of different possibilities, right?

137
00:07:39.747 --> 00:07:44.293
So we can even start
with other good cases.

138
00:07:44.293 --> 00:07:46.807
It should add two negative numbers.

139
00:07:49.742 --> 00:07:51.283
&gt;&gt; Steve Kinney: Right.

140
00:07:53.524 --> 00:07:56.427
&gt;&gt; Steve Kinney: That should be fine.

141
00:07:56.427 --> 00:07:59.313
Unless you write the arrow function
outside of the parentheses and

142
00:07:59.313 --> 00:08:00.250
then it's not fine.

143
00:08:01.754 --> 00:08:08.280
&gt;&gt; Steve Kinney: There we go,
and extra parenthesis down there.

144
00:08:08.280 --> 00:08:12.463
So we can expect, add negative two and

145
00:08:12.463 --> 00:08:18.751
negative two to be negative four,
and that should work.

146
00:08:18.751 --> 00:08:23.538
But also, if It didn't work in a larger
case that that's good to know, right?

147
00:08:23.538 --> 00:08:26.754
You start to make all those assumptions
about how your code should work.

