WEBVTT

1
00:00:00.140 --> 00:00:06.488
&gt;&gt; Steve Kinney: I'll show you another
one now, because we have the context.

2
00:00:06.488 --> 00:00:10.433
And I'll show you a few in here, and then
we'll kind of look at the more practical

3
00:00:10.433 --> 00:00:13.056
examples, but
let's play around a little bit more.

4
00:00:13.056 --> 00:00:18.548
So that's a spy, at any given point,
you'll see why I don't

5
00:00:18.548 --> 00:00:23.421
care till I spend too much
time on the different terms.

6
00:00:23.421 --> 00:00:28.428
So we could also say,
let's comment that out for a second.

7
00:00:28.428 --> 00:00:29.412
We can say,

8
00:00:38.418 --> 00:00:39.573
&gt;&gt; Steve Kinney: Cool, so,

9
00:00:39.573 --> 00:00:44.541
this is a mock function,
which is effectively just

10
00:00:44.541 --> 00:00:49.750
a effectively the same thing
we wrapped around this.

11
00:00:49.750 --> 00:00:53.761
But in this case, it's gonna wrap
an anonymous function, all right?

12
00:00:53.761 --> 00:00:56.939
So here, we can almost do the same thing,
where we'd say,

13
00:01:02.566 --> 00:01:04.412
&gt;&gt; Steve Kinney: What you're angry about?

14
00:01:04.412 --> 00:01:06.531
Yeah, you're not called logs by anymore,
are you?

15
00:01:06.531 --> 00:01:08.365
So this does the same thing.

16
00:01:08.365 --> 00:01:13.225
This creates just a bogus little function
that you can call with whatever.

17
00:01:13.225 --> 00:01:17.445
And so remember how we talked
about passing stuff in, right?

18
00:01:17.445 --> 00:01:20.496
Let's say you wanted to be
able to pass a thing in, like,

19
00:01:20.496 --> 00:01:24.233
a function that you want called,
so on and so forth, right?

20
00:01:24.233 --> 00:01:27.913
This gives you a function
that you can pass in, right?

21
00:01:27.913 --> 00:01:32.635
But it also allows you to then go
look to see who called it, and

22
00:01:32.635 --> 00:01:34.957
how many times it got called.

23
00:01:34.957 --> 00:01:37.773
I'm gonna pass this function in, cause,

24
00:01:37.773 --> 00:01:41.149
yeah, this thing takes a call back,
or whatever.

25
00:01:41.149 --> 00:01:42.601
I'm gonna pass this in and

26
00:01:42.601 --> 00:01:47.100
then I wanna see what happened to it when
I sent it into, almost like a scientist.

27
00:01:47.100 --> 00:01:52.090
I'm gonna take this little scientific
like thing, I'm gonna toss it into this

28
00:01:52.090 --> 00:01:56.787
function and then I'm gonna look at it,
who called you with what, right?

29
00:01:56.787 --> 00:01:58.342
And so, for instance, and

30
00:01:58.342 --> 00:02:02.339
we have these in some of the examples
that I'll play with a little bit.

31
00:02:02.339 --> 00:02:03.533
You might have,

32
00:02:03.533 --> 00:02:09.602
let's say you had a reaction component
that took a prop called on_submit, right?

33
00:02:09.602 --> 00:02:11.815
Seems reasonable, or on click.

34
00:02:11.815 --> 00:02:16.887
You could take one of these mock
functions, you toss it in there, and

35
00:02:16.887 --> 00:02:22.589
then you can test like, did you get
called with the right form stuff, right?

36
00:02:22.589 --> 00:02:24.923
Did you get called the right
number of times, right?

37
00:02:24.923 --> 00:02:25.652
You did?
Great,

38
00:02:25.652 --> 00:02:29.968
it's a way to send a little
scientific thing in there as well.

39
00:02:29.968 --> 00:02:32.340
That is probably the best use case for
one of these.

40
00:02:32.340 --> 00:02:33.893
Let's talk about one more.

41
00:02:33.893 --> 00:02:35.907
This is the one that
gets people in trouble.

42
00:02:35.907 --> 00:02:36.551
You ready?

43
00:02:39.185 --> 00:02:42.433
&gt;&gt; Steve Kinney: This is
where we combine the two.

44
00:02:42.433 --> 00:02:45.575
So let's actually say,

45
00:02:45.575 --> 00:02:50.515
we're gonna call this one random spy.

46
00:02:50.515 --> 00:02:55.481
In this case, we're going to spy on math.

47
00:03:00.436 --> 00:03:03.441
&gt;&gt; Steve Kinney: Is it
a math.ran ot math.random?

48
00:03:03.441 --> 00:03:07.239
I was writing Python yesterday.

49
00:03:07.239 --> 00:03:08.346
Okay, math.random.

50
00:03:08.346 --> 00:03:10.618
No one's correcting me, so
we're gonna assume that's true.

51
00:03:10.618 --> 00:03:12.726
Everyone's like, it's the afternoon.

52
00:03:12.726 --> 00:03:14.156
It's post lunch, I don't remember.

53
00:03:14.156 --> 00:03:17.278
I don't remember what the math that I'm
if only one could do this and find out.

54
00:03:17.278 --> 00:03:19.390
There we go.

55
00:03:19.390 --> 00:03:22.497
You know when you write 2 or
3 programming languages sometimes.

56
00:03:22.497 --> 00:03:24.549
All right, math.random.

57
00:03:24.549 --> 00:03:27.218
Fine, whatever, but then we can also do.

58
00:03:36.703 --> 00:03:41.701
&gt;&gt; Steve Kinney: Now, we have gone
into the JavaScript standard library.

59
00:03:41.701 --> 00:03:45.587
We have found the math function, right?

60
00:03:45.587 --> 00:03:50.124
Our math object,
we found its random method.

61
00:03:50.124 --> 00:03:54.634
We have hugged it and we said,
when everyone, anyone calls you,

62
00:03:54.634 --> 00:03:56.444
do this instead, right?

63
00:03:56.444 --> 00:03:58.960
And so, that's a terrible choice,

64
00:03:58.960 --> 00:04:03.110
because math.random gives you
a value of between 0 and 1.

65
00:04:03.110 --> 00:04:04.392
Let's do that instead.

66
00:04:04.392 --> 00:04:08.392
[LAUGH] That's a better option, because
who knows what happens to our code.

67
00:04:08.392 --> 00:04:11.977
Again, this is why mocks can be dangerous,
because all of a sudden you're talking and

68
00:04:11.977 --> 00:04:15.040
you're typing, and you fundamentally
change the way a function works.

69
00:04:15.040 --> 00:04:19.645
And then you're like, my tests are great,
in no way tied to reality, but

70
00:04:19.645 --> 00:04:20.773
they're great.

71
00:04:20.773 --> 00:04:23.008
And so now, no matter what, right?

72
00:04:23.008 --> 00:04:26.292
So in this case,
we'll go take our random spy.

73
00:04:29.684 --> 00:04:31.515
&gt;&gt; Steve Kinney: And
we'll just do this instead.

74
00:04:31.515 --> 00:04:38.498
We'll say,
&gt;&gt; Steve Kinney: Result

75
00:04:38.498 --> 00:04:43.175
is math.random, right?

76
00:04:43.175 --> 00:04:50.405
And now we can expect result to be 5.

77
00:04:50.405 --> 00:04:54.577
Don't yeah,
that's not how this works, 0.5.

78
00:04:57.055 --> 00:05:00.298
&gt;&gt; Steve Kinney: I can run this
test as many times as I want,

79
00:05:00.298 --> 00:05:04.395
because I've rid the world of randomness,
right?

80
00:05:04.395 --> 00:05:12.435
No matter what,
Math.random is gonna return 0.5, right?

81
00:05:12.435 --> 00:05:13.114
Seems great.

82
00:05:13.114 --> 00:05:17.224
And honestly,
Math.random is not the worst thing,

83
00:05:17.224 --> 00:05:22.244
that is on the level of things that
are going to get you in trouble as

84
00:05:22.244 --> 00:05:27.104
long as you don't make it 10 or
something like that, right?

85
00:05:27.104 --> 00:05:33.253
Is going to just hold that in place,
which means we could theoretically go

86
00:05:33.253 --> 00:05:38.522
back over to those tests that we
had earlier in the characters.

87
00:05:38.522 --> 00:05:42.112
And what we could choose to do is,

88
00:05:42.112 --> 00:05:46.474
we can go into this character's test and

89
00:05:46.474 --> 00:05:54.579
remember how we just passed in this
function that made it 15 all the time.

90
00:05:54.579 --> 00:05:56.487
We'll get rid of that for a second.

91
00:05:56.487 --> 00:05:57.971
And we're just gonna say,

92
00:06:04.273 --> 00:06:06.748
&gt;&gt; Steve Kinney: Spy on Math.random,

93
00:06:06.748 --> 00:06:08.796
we gotta pull that in.

94
00:06:13.107 --> 00:06:19.985
&gt;&gt; Steve Kinney: Important note, if you
were using jest, it's now called VI.

95
00:06:19.985 --> 00:06:21.721
It's called Jest.

96
00:06:21.721 --> 00:06:27.321
[LAUGH] That's the difference between
everything I'm doing in Jest and

97
00:06:27.321 --> 00:06:29.941
everything I'm doing in V test.

98
00:06:29.941 --> 00:06:31.701
Math, that's V random.

99
00:06:35.850 --> 00:06:44.617
&gt;&gt; Steve Kinney: So in case somebody,
&gt;&gt; Steve Kinney: Not Implementation,

100
00:06:44.617 --> 00:06:49.180
if somebody gives you a quiz like,
who cares about the rest of it?

101
00:06:49.180 --> 00:06:52.620
Spying is just letting
the initial thing happen.

102
00:06:52.620 --> 00:06:56.163
Mocking is replacing with
your own behavior, okay?

103
00:06:56.163 --> 00:07:01.123
That's not going to get you past anyone
who would like to be condescending

104
00:07:01.123 --> 00:07:04.807
about testing, but
it will be fine for normal people.

105
00:07:04.807 --> 00:07:05.869
Mocking limitation.

106
00:07:09.864 --> 00:07:14.726
&gt;&gt; Steve Kinney: 0.5, and
so now the randomness

107
00:07:14.726 --> 00:07:18.920
here will always be the same.

108
00:07:18.920 --> 00:07:22.880
In fact, I don't know how the dice rolling
works and we're just gonna run it and see.

109
00:07:22.880 --> 00:07:25.226
We'll see there, and
deal with it from there.

110
00:07:30.369 --> 00:07:33.079
&gt;&gt; Steve Kinney: That turns out to
be 12 with the value I handed in.

111
00:07:33.079 --> 00:07:38.098
So, now these could be 12,
and I could roll that

112
00:07:38.098 --> 00:07:43.846
dice 1,000,000 times and
it doesn't matter.

113
00:07:43.846 --> 00:07:49.490
Because instead of calling Math.random,
Math.random will always be 0.5,

114
00:07:49.490 --> 00:07:52.605
will always get consistent values, right?

115
00:07:52.605 --> 00:07:57.280
And that is one use case for doing this.

116
00:07:57.280 --> 00:08:02.614
And an important question to ask yourself,

117
00:08:02.614 --> 00:08:10.557
did we get a lot of value versus
just having the expect any number?

118
00:08:10.557 --> 00:08:13.462
I don't know, right?

119
00:08:13.462 --> 00:08:17.032
But the nice part about having this mock
is you could theoretically be like, okay,

120
00:08:17.032 --> 00:08:18.971
like, how many times
did random get called?

121
00:08:18.971 --> 00:08:20.250
Was it the right number?

122
00:08:20.250 --> 00:08:21.665
with what arguments did it get called?

123
00:08:21.665 --> 00:08:24.954
In this case, none, because Math.random
doesn't take any arguments, right?

124
00:08:24.954 --> 00:08:26.499
But like in other cases,

125
00:08:26.499 --> 00:08:30.326
you do get the nice part of
the introspection there as well, or

126
00:08:30.326 --> 00:08:35.199
we could have passed in a function that
we could have done that same stuff with.

127
00:08:35.199 --> 00:08:39.723
But it does give you the ability for stuff
that you can't control, let's say, for

128
00:08:39.723 --> 00:08:41.479
instance, you had something.

129
00:08:41.479 --> 00:08:45.874
It was another use case where you
might choose to control randomness is,

130
00:08:45.874 --> 00:08:49.690
all right, we're doing things
just to give us a random word and

131
00:08:49.690 --> 00:08:51.797
create a game of hangman, right?

132
00:08:51.797 --> 00:08:55.254
Well, then you could at least,
instead of having a shuffled word,

133
00:08:55.254 --> 00:08:58.724
you can say always return this word or
something along those lines.

134
00:08:58.724 --> 00:09:04.223
Especially when code you don't control, I
will argue is dependency injection better,

135
00:09:04.223 --> 00:09:08.107
we could pass in something that
generates a random number, and

136
00:09:08.107 --> 00:09:11.869
that is math.random by default,
we can pass in a function.

137
00:09:11.869 --> 00:09:13.949
You would get the same effect.

138
00:09:13.949 --> 00:09:18.469
You don't owe one that assumes, you have
refactored the code or wrote it yourself.

139
00:09:18.469 --> 00:09:20.749
And that is a theme of this, course,

140
00:09:20.749 --> 00:09:24.588
is if you can pass in those
external things, do that, right?

141
00:09:24.588 --> 00:09:27.616
Because remember with this one we made,

142
00:09:27.616 --> 00:09:32.722
just on a random thing we made a roll
dice as a random thing as well.

143
00:09:32.722 --> 00:09:40.057
What we could do is we could say,
okay, Math.random still exists, right?

144
00:09:40.057 --> 00:09:45.840
So we talk Took away that
mock ,so randomness is back,

145
00:09:45.840 --> 00:09:53.344
which means we gotta skip that first
test [LAUGH] just for a second.

146
00:09:53.344 --> 00:09:57.255
But what's cool about when
we mock out external things,

147
00:09:57.255 --> 00:10:01.574
the risk that somebody brought
up early in this course of like,

148
00:10:01.574 --> 00:10:05.092
how divorced from reality are you is real,
right?

149
00:10:05.092 --> 00:10:08.922
But we can also pass in a Mock as
that little scientific explorer that

150
00:10:08.922 --> 00:10:12.899
we saw before and see some really
interesting things with it, right?

151
00:10:12.899 --> 00:10:17.028
So for instance, when we use it with
dependency injection, and this is about

152
00:10:17.028 --> 00:10:21.489
how we structure our code, if you pass
these things in, it's super interesting.

153
00:10:21.489 --> 00:10:26.415
So it should roll the dice, or what is it?

154
00:10:26.415 --> 00:10:30.207
Four dice, 4,6-sided die.

155
00:10:30.207 --> 00:10:32.057
4, 6,

156
00:10:44.187 --> 00:10:47.869
&gt;&gt; Steve Kinney: Wow, there we go.

157
00:10:47.869 --> 00:10:50.964
It turns out I don't stand and
type like this all day very often.

158
00:10:50.964 --> 00:10:55.457
So, here we've got that character.

159
00:10:55.457 --> 00:11:00.557
This is where I hate before each,
I wanna do something different

160
00:11:00.557 --> 00:11:05.218
this time
&gt;&gt; Steve Kinney: Another Check.

161
00:11:08.497 --> 00:11:10.564
&gt;&gt; Steve Kinney: Do you
know what that does?

162
00:11:10.564 --> 00:11:13.158
It only runs that test.

163
00:11:13.158 --> 00:11:16.491
Do you know what you don't
want to accidentally commit?

164
00:11:16.491 --> 00:11:20.733
Only, because you're like, ship it, right?

165
00:11:20.733 --> 00:11:22.041
But for our purposes right now.

166
00:11:26.499 --> 00:11:31.024
&gt;&gt; Steve Kinney: So,
&gt;&gt; Steve Kinney: We

167
00:11:31.024 --> 00:11:32.738
have the new character.

168
00:11:35.996 --> 00:11:39.126
&gt;&gt; Steve Kinney: We have the default
level and I think we also then put in

169
00:11:39.126 --> 00:11:43.245
the ability, that last function is
that roll dice function, right?

170
00:11:43.245 --> 00:11:45.591
So what I would do here is,

171
00:11:53.893 --> 00:11:56.880
&gt;&gt; Steve Kinney: And
here I can pass it in this.

172
00:11:58.943 --> 00:11:59.743
&gt;&gt; Steve Kinney: What's she mad about?

173
00:12:08.933 --> 00:12:14.003
&gt;&gt; Steve Kinney: So now,
this is going to be a replacement for

174
00:12:14.003 --> 00:12:19.084
that roll dice function
that we can pass in.

175
00:12:19.084 --> 00:12:21.424
It's always gonna give us 15, right?

176
00:12:27.629 --> 00:12:29.922
&gt;&gt; Steve Kinney: So now,
we could theoretically say that,

177
00:12:29.922 --> 00:12:32.478
the characters got a strength of 15,
right?

178
00:12:32.478 --> 00:12:37.067
We can expect that, but
that's not particularly interesting to us.

179
00:12:37.067 --> 00:12:37.967
Well, let's do that first.

180
00:12:44.718 --> 00:12:50.566
&gt;&gt; Steve Kinney: Cool, but now I passed in
that function, but like, hey, character,

181
00:12:50.566 --> 00:12:55.357
did you call roll dice with
arguments of 4 and 6, right?

182
00:12:55.357 --> 00:12:56.633
How would I tell that otherwise?

183
00:12:56.633 --> 00:12:59.366
I can't really, because it's
happening internal, I can say,

184
00:13:13.519 --> 00:13:15.241
&gt;&gt; Steve Kinney: Verify that this function

185
00:13:15.241 --> 00:13:19.710
that I pass in there was called
the way I think it was called, right?

186
00:13:19.710 --> 00:13:22.382
More practically,
we'll see this in a second.

187
00:13:22.382 --> 00:13:25.745
If you had a reactive one that took
like an on Click, or on Submit, or

188
00:13:25.745 --> 00:13:28.164
on whatever,
you could pass in that function and

189
00:13:28.164 --> 00:13:32.239
make sure it was called with the things
you think it should be called with, right?

190
00:13:32.239 --> 00:13:36.265
And it gives you a way to use the pendency
injection and pass it in, and then look

191
00:13:36.265 --> 00:13:40.598
at this function that I shot in there, was
it called the way I thought it was, right?

192
00:13:40.598 --> 00:13:41.974
And just to make this a little clearer.

193
00:13:46.347 --> 00:13:48.739
&gt;&gt; Steve Kinney: That is my Mock
function being called with 4 and 6.

194
00:13:48.739 --> 00:13:51.363
And I can even see,
were you called six times?

195
00:13:59.372 --> 00:14:02.872
&gt;&gt; Steve Kinney: I think it's 6 times,
right?

196
00:14:02.872 --> 00:14:07.323
Yeah, all right and so like hey,
you were called 6 times once for strength,

197
00:14:07.323 --> 00:14:11.928
intelligence, dexterity, constitution,
wisdom intelligence Charisma.

198
00:14:11.928 --> 00:14:16.041
Charisma, I don't know how I got to
seven on my hands, despite that,

199
00:14:16.041 --> 00:14:17.382
that's impressive.

200
00:14:17.382 --> 00:14:20.350
And that it was called with 4 and
6, so on and so forth.

201
00:14:20.350 --> 00:14:22.035
Because under the hood,

202
00:14:22.035 --> 00:14:26.540
the console logging is going to
suck a little bit, but let's see.

203
00:14:26.540 --> 00:14:32.120
Let's see if we can,
moment of introspection in here.

204
00:14:32.120 --> 00:14:39.391
These are all the things that adds to it,
but you can say, rolldice.mock.

205
00:14:39.391 --> 00:14:45.025
And then you can see every call that was
made to roll dice was recorded, right?

206
00:14:45.025 --> 00:14:49.354
And the arguments it was recorded with.

207
00:14:49.354 --> 00:14:53.672
All the results every time it
was called were recorded, right?

208
00:14:53.672 --> 00:14:58.702
And so just using that like just.fn or
vi.fn, right?

209
00:14:58.702 --> 00:15:02.256
Gives you a function where you can see
how many times was this function called?

210
00:15:02.256 --> 00:15:03.320
What was it called with?

211
00:15:03.320 --> 00:15:04.661
What did it return?

212
00:15:04.661 --> 00:15:09.662
Right, so you can see,
it's called with 4 and

213
00:15:09.662 --> 00:15:14.050
6 a bunch of times right, as we as we saw.

214
00:15:14.050 --> 00:15:17.928
We get to know what the code that
consumed that function did with it,

215
00:15:17.928 --> 00:15:19.577
which is kind of super cool.

