WEBVTT

1
00:00:00.127 --> 00:00:03.641
&gt;&gt; Steve Kinney: So let's go ahead and
we're gonna switch to a different example.

2
00:00:03.641 --> 00:00:09.556
We're gonna go into this one
over here called arithmetic.

3
00:00:09.556 --> 00:00:15.703
And it's got some real, don't worry, my
liberal arts majors, you're gonna be okay.

4
00:00:15.703 --> 00:00:18.671
The folder is called basic math,
the file is called arithmetic.

5
00:00:18.671 --> 00:00:22.048
So I'm just gonna open that up
in this terminal over here.

6
00:00:22.048 --> 00:00:27.760
And right now,
there is not a lot going on in here.

7
00:00:27.760 --> 00:00:30.237
These are my very important functions.

8
00:00:30.237 --> 00:00:35.681
As you can tell right now,
they don't do anything, right?

9
00:00:35.681 --> 00:00:38.463
And here are my wonderful tests.

10
00:00:38.463 --> 00:00:41.250
They don't do anything either, right?

11
00:00:41.250 --> 00:00:47.350
One thing you might notice is if you had
no tests in this file whatsoever, right?

12
00:00:47.350 --> 00:00:52.030
So if I go ahead and I just comment this
all out, depending on the test runner,

13
00:00:52.030 --> 00:00:53.975
it will get somewhat mad at you.

14
00:00:53.975 --> 00:00:56.166
So I did a test right now.

15
00:00:56.166 --> 00:01:01.347
It's mad at me because there are no
tests in there at all, right?

16
00:01:01.347 --> 00:01:05.580
One thing you can do is, for
a given test or a group of tests,

17
00:01:05.580 --> 00:01:10.947
which we'll use to describe,
you can put a .todo or .skip on it, right?

18
00:01:10.947 --> 00:01:15.143
They effectively accomplish the same thing
with two different meetings for you,

19
00:01:15.143 --> 00:01:18.727
the human, reading it later,
which is skipping cuz this one broke and

20
00:01:18.727 --> 00:01:20.578
I don't know how to fix it, right?

21
00:01:20.578 --> 00:01:25.448
To do is, I'm totally gonna write
these later, which is useful for

22
00:01:25.448 --> 00:01:28.182
when you're trying to start out, but

23
00:01:28.182 --> 00:01:32.720
also if you're making a boilerplate
setup for people as well.

24
00:01:32.720 --> 00:01:34.438
So I've got this running now.

25
00:01:34.438 --> 00:01:36.436
I can save this file again.

26
00:01:36.436 --> 00:01:41.375
Everything's great because they
are intentionally skipped.

27
00:01:41.375 --> 00:01:42.982
And now, things are bad, and

28
00:01:42.982 --> 00:01:47.223
so a lot of times when we're doing this
thing called test driven development,

29
00:01:47.223 --> 00:01:52.126
there's this process called red, green,
and then refactor, maybe, depending on it.

30
00:01:52.126 --> 00:01:55.672
It's really hard to refactor
an add function, but

31
00:01:55.672 --> 00:02:00.207
generally speaking,
start out with some kind of failure state,

32
00:02:00.207 --> 00:02:04.172
get it to turn green, and
then do the next thing, right?

33
00:02:04.172 --> 00:02:08.390
Now, these, again, are gonna be relatively
simple functions because I promised you

34
00:02:08.390 --> 00:02:11.855
we'd start out easy before I started
slowly turning the heat up on you,

35
00:02:11.855 --> 00:02:12.973
but we can start here.

36
00:02:12.973 --> 00:02:15.838
And so we'll say,

37
00:02:15.838 --> 00:02:21.034
import add from arithmetic.js,

38
00:02:21.034 --> 00:02:25.342
I gotta do a dot slash there.

39
00:02:25.342 --> 00:02:28.499
So this is, again, one of those key
things is we've got this test file.

40
00:02:28.499 --> 00:02:32.722
Now the way the test runner works
is it's basically looking for

41
00:02:32.722 --> 00:02:37.501
anything with .test.js or .test.ts,
I think you can put stuff in,

42
00:02:37.501 --> 00:02:40.945
like an __test directory,
but I don't do that.

43
00:02:40.945 --> 00:02:45.819
Cuz I don't like my tests and my files
far away from each other, cuz I'm lazy.

44
00:02:45.819 --> 00:02:48.790
If you do, you can do other stuff.

45
00:02:48.790 --> 00:02:53.770
For me, I want them next to each other
because I probably wanna open them

46
00:02:53.770 --> 00:02:55.351
around the same time.

47
00:02:55.351 --> 00:03:01.142
So we have the test file, and that will
then pull in our whatever we want to test.

48
00:03:01.142 --> 00:03:03.073
And this is important,
because if you're like, well,

49
00:03:03.073 --> 00:03:05.018
I can't pull that in because
it makes 17 API requests.

50
00:03:05.018 --> 00:03:08.565
It's wrapped in React's Context API and
seven other things.

51
00:03:08.565 --> 00:03:10.028
We'll talk about it.

52
00:03:10.028 --> 00:03:14.682
But the goal is to try to get yourself to
these points where you can just pull in

53
00:03:14.682 --> 00:03:16.516
one function and test it out.

54
00:03:16.516 --> 00:03:18.408
Because we talked about this before,

55
00:03:18.408 --> 00:03:20.720
there's ways to point
the browser at the app.

56
00:03:20.720 --> 00:03:22.201
And that's good and you should do that.

57
00:03:22.201 --> 00:03:23.892
We'll talk about that towards the end.

58
00:03:23.892 --> 00:03:27.857
But those tests, to spin up a browser,
to navigate to a page, to wait for

59
00:03:27.857 --> 00:03:31.569
it to load, to then go navigate the DOM
to go see if stuff is in there.

60
00:03:31.569 --> 00:03:35.366
Those are amazing tests because you
know that everything works together,

61
00:03:35.366 --> 00:03:36.219
they're slow.

62
00:03:36.219 --> 00:03:39.692
And sometimes when you are writing code,
that feedback loop of the quicker you can

63
00:03:39.692 --> 00:03:43.234
get, I see red, I see green, right, you
can make more decisions a lot faster too.

64
00:03:43.234 --> 00:03:44.738
So they all have a time and a place.

65
00:03:44.738 --> 00:03:48.582
I'm not gonna tell you how much of this
one, how much of that one, because again,

66
00:03:48.582 --> 00:03:50.102
the goal is lowering the dread.

67
00:03:50.102 --> 00:03:53.939
Whatever you need to do to lower the
dread, we'll talk about the use cases for

68
00:03:53.939 --> 00:03:57.143
each later, but these are fast,
these are good if you can do it.

69
00:03:57.143 --> 00:04:01.231
So then we can say, okay,
what is it about adding?

70
00:04:01.231 --> 00:04:06.463
It should add two positive numbers.

71
00:04:09.592 --> 00:04:12.270
&gt;&gt; Steve Kinney: Great, and
we only put these names cuz we'll see

72
00:04:12.270 --> 00:04:16.270
it in this little chart over here while,
and to see which one is failing.

73
00:04:16.270 --> 00:04:21.274
And so now we can say, expect, add,

74
00:04:21.274 --> 00:04:26.936
and we say 2+2 to be 4, and it's red.

75
00:04:26.936 --> 00:04:29.202
Why is it red?

76
00:04:29.202 --> 00:04:32.336
Because 2+2 is not 4, 2+2 is undefined.

77
00:04:32.336 --> 00:04:37.056
And again, this is the rhythm
of this test driven development

78
00:04:37.056 --> 00:04:41.139
thing you've heard so
much about, which is, okay,

79
00:04:41.139 --> 00:04:45.792
it's red because a function
doesn't do anything, right?

80
00:04:45.792 --> 00:04:46.934
So we can go ahead and handle that.

81
00:04:46.934 --> 00:04:52.539
We say a,b, we'll just have a return a+b,
and now it's green, and

82
00:04:52.539 --> 00:04:57.961
that feels good, and I get a little
bit dopamine, and life is good.

83
00:04:57.961 --> 00:05:03.020
And then theoretically, the next stage
would be that refactor, now that you have

84
00:05:03.020 --> 00:05:08.028
something passing, you can go ahead and
begin to refactor and clean up the code.

85
00:05:08.028 --> 00:05:10.989
The goal is to get
an implementation that works.

86
00:05:10.989 --> 00:05:17.401
And now, as you go to refactor it, and
again, there's not a lot to refactor here.

87
00:05:17.401 --> 00:05:20.226
But on a more complicated version, right?

88
00:05:20.226 --> 00:05:23.295
You can begin to refactor it, knowing
that every time you hit the Save button,

89
00:05:23.295 --> 00:05:25.589
you're gonna get feedback of whether or
not you broke it.

