WEBVTT

1
00:00:00.000 --> 00:00:04.076
&gt;&gt; Steve Kinney: First one is we're going
to write some super simple tests, right?

2
00:00:04.076 --> 00:00:05.773
Some of them you'll be like,
why am I testing this?

3
00:00:05.773 --> 00:00:06.681
Because we're writing tests.

4
00:00:06.681 --> 00:00:09.782
We're getting used to,
we're getting the blood flowing, right?

5
00:00:09.782 --> 00:00:13.336
You will not be surprised to learn that
addition works the way that you think it

6
00:00:13.336 --> 00:00:14.056
does, right?

7
00:00:14.056 --> 00:00:17.858
But it is mostly to get us comfortable and
get us the momentum of writing tests and

8
00:00:17.858 --> 00:00:19.864
then I will slowly turn
up the heat on you.

9
00:00:19.864 --> 00:00:20.858
And you won't even notice it.

10
00:00:20.858 --> 00:00:22.162
It'll be great.

11
00:00:22.162 --> 00:00:25.772
Things will escalate, it'll be great.

12
00:00:25.772 --> 00:00:29.279
But then it is one thing to test that
things work the way that we think it's

13
00:00:29.279 --> 00:00:31.996
gonna work in a known situation
where they should work.

14
00:00:31.996 --> 00:00:33.560
Yeah, you don't wanna break that.

15
00:00:33.560 --> 00:00:37.425
But then also understanding of dude,

16
00:00:37.425 --> 00:00:43.114
we handle all of the weird
ways that are code can change.

17
00:00:43.114 --> 00:00:44.867
We know the problem we're trying to solve.

18
00:00:44.867 --> 00:00:46.883
We sit there, we write some code.

19
00:00:46.883 --> 00:00:49.877
Maybe we didn't write any tests, but
maybe we pulled it up in the browser,

20
00:00:49.877 --> 00:00:50.929
clicked all the buttons.

21
00:00:50.929 --> 00:00:54.514
Everything did things the way
that we expected, right?

22
00:00:54.514 --> 00:00:59.027
Until we put it into production and
a user comes along, and

23
00:00:59.027 --> 00:01:03.737
they decide that their first
name has an emoji in it, right?

24
00:01:03.737 --> 00:01:04.595
Or what have you.

25
00:01:04.595 --> 00:01:08.070
Or all of the weird ways that
things can kind of happen where,

26
00:01:08.070 --> 00:01:11.905
that value we thought we would
get is actually undefined, right?

27
00:01:11.905 --> 00:01:15.914
And thinking about okay, so
how do we use our test to help us?

28
00:01:15.914 --> 00:01:18.745
Sometimes it's not necessarily
the test is simply gonna throw those

29
00:01:18.745 --> 00:01:19.632
edge cases in there.

30
00:01:19.632 --> 00:01:21.075
But the thinking about our test and

31
00:01:21.075 --> 00:01:24.275
using the test to make sure that we've
got all those cases covered, right?

32
00:01:24.275 --> 00:01:26.774
That's kind of where we balance
the how do we write code and

33
00:01:26.774 --> 00:01:29.124
how do we write tests and
how to relate with each other.

34
00:01:29.124 --> 00:01:31.808
We'll play around with it there as well.

35
00:01:31.808 --> 00:01:35.308
There are some little tricks
that will make your life easier.

36
00:01:35.308 --> 00:01:39.409
They are the tricks that, are you
going to use them every single day?

37
00:01:39.409 --> 00:01:41.509
You're probably not going to
use them every single day.

38
00:01:41.509 --> 00:01:43.126
Do I expect you to memorize them?

39
00:01:43.126 --> 00:01:43.934
I don't.

40
00:01:43.934 --> 00:01:47.996
Do I want you to just kind of put like
a landmark in your brain, in your neural

41
00:01:47.996 --> 00:01:52.060
pathways, so that like when you find
yourself struggling with a problem,

42
00:01:52.060 --> 00:01:56.403
you at least remember that there can be
a better way and go and look it up, right?

43
00:01:56.403 --> 00:01:59.071
That is the kind of goal there as well.

44
00:01:59.071 --> 00:02:03.081
Because like I said, they are things that
make my life very easy when I use them

45
00:02:03.081 --> 00:02:04.324
once every six months.

46
00:02:04.324 --> 00:02:07.650
But they're probably not everyday things,
Mark.

47
00:02:07.650 --> 00:02:11.196
&gt;&gt; Speaker 1: CJ online just said
something I've noticed with Tess

48
00:02:11.196 --> 00:02:15.606
is when there's too much mocking,
there can be a false positive,

49
00:02:15.606 --> 00:02:18.224
meaning things pass that shouldn't.

50
00:02:18.224 --> 00:02:19.267
&gt;&gt; Steve Kinney: Yes.

51
00:02:19.267 --> 00:02:21.003
&gt;&gt; Speaker 1: And then someone plus one'd.

52
00:02:21.003 --> 00:02:23.801
&gt;&gt; Steve Kinney: Yeah, so
we'll talk about this.

53
00:02:23.801 --> 00:02:29.524
There's this idea of mocking,
let's say you're hitting an API, right?

54
00:02:29.524 --> 00:02:31.515
You probably don't want to hit
that API in every single test,

55
00:02:31.515 --> 00:02:33.441
especially if you're running
a test multiple times a day.

56
00:02:33.441 --> 00:02:38.456
Also, it's really hard to get the external
server to be exactly the way you want it.

57
00:02:38.456 --> 00:02:41.651
So we might use this thing
called a mock which is like,

58
00:02:41.651 --> 00:02:44.071
pretend this is the real world, right?

59
00:02:44.071 --> 00:02:47.788
And it kind of like the intellectual
exercise kind of works here,

60
00:02:47.788 --> 00:02:51.911
which is if you start making more and
more of the real world make believe,

61
00:02:51.911 --> 00:02:55.900
you get to a point where you can make
the entire world make believe, and

62
00:02:55.900 --> 00:03:00.939
your test will totally pass, and they're
totally worthless at the same time, right?

63
00:03:00.939 --> 00:03:04.594
So, we will look at how to do that
when it's appropriate, right?

64
00:03:04.594 --> 00:03:06.605
We'll do it for
a code that maybe needs it.

65
00:03:06.605 --> 00:03:09.805
And we'll talk a little bit of how
to refactor some of that code so

66
00:03:09.805 --> 00:03:11.836
that you don't need it as well, right?

67
00:03:11.836 --> 00:03:15.537
Because if you try to make too
much of the real-world imaginary,

68
00:03:15.537 --> 00:03:17.568
you end up living in a fantasy land.

69
00:03:17.568 --> 00:03:20.749
And yeah, your test pass but
again, if you have not,

70
00:03:20.749 --> 00:03:24.451
lower that existential dread of
making changes to your code.

71
00:03:24.451 --> 00:03:29.028
It does not matter if you have
3,000 tests and 100% test coverage.

72
00:03:29.028 --> 00:03:32.035
It is possible to get to
100% test coverage and

73
00:03:32.035 --> 00:03:35.121
not remove any of that existential dread,
right?

74
00:03:35.121 --> 00:03:38.930
You can game that number real easily and
still have no value.

75
00:03:38.930 --> 00:03:41.977
And that's why we're not aiming for
the sheer number of tests,

76
00:03:41.977 --> 00:03:43.677
the sheer amount of test coverage.

77
00:03:43.677 --> 00:03:46.068
It is, do you feel comfortable
refactoring the code?

78
00:03:46.068 --> 00:03:49.895
And if you've mapped out way too much and
you don't feel comfortable refactoring

79
00:03:49.895 --> 00:03:52.680
your code, then we know that
we haven't been successful.

80
00:03:52.680 --> 00:03:54.864
Yeah, cool.

81
00:03:54.864 --> 00:03:59.122
And most of us are JavaScript engineers.

82
00:03:59.122 --> 00:04:03.072
And this is a website
called frontendmasters.com.

83
00:04:03.072 --> 00:04:06.608
So I can make some assumptions
that maybe not all of you, but

84
00:04:06.608 --> 00:04:09.811
some of you have once in
a time dabbled in the browser.

85
00:04:09.811 --> 00:04:14.282
And so just being able to say two plus two
equals four is probably you hate when you

86
00:04:14.282 --> 00:04:18.352
leave something like this and you go
to a moment like, DOM node shows up,

87
00:04:18.352 --> 00:04:20.928
you're like, I don't know what to do here.

88
00:04:20.928 --> 00:04:26.950
So, we will make sure that we are ready
and able to deal with things in the DOM.

89
00:04:26.950 --> 00:04:30.327
And we'll do it from multiple angles,
from one just grabbing DOM nodes and

90
00:04:30.327 --> 00:04:33.111
playing with them, and
then it also can we spin up a browser and

91
00:04:33.111 --> 00:04:35.435
point it at our app and
poke buttons for us, right?

92
00:04:35.435 --> 00:04:37.642
Cuz it's all about that.

93
00:04:37.642 --> 00:04:41.852
Automating the kicking the tires on
things so that we can make changes and

94
00:04:41.852 --> 00:04:43.035
feel good about it.

95
00:04:43.035 --> 00:04:47.452
And then we'll talk about the stuff
that we don't control, right?

96
00:04:47.452 --> 00:04:52.117
Whether it's external network with hitting
an API, nobody likes the world where all

97
00:04:52.117 --> 00:04:56.551
of a sudden your tests fail because a
backend engineer introduced a bug, right?

98
00:04:56.551 --> 00:04:57.409
Never happens.

99
00:04:57.409 --> 00:05:00.164
Or because you got rate
limited by an external API or

100
00:05:00.164 --> 00:05:01.842
something along those lines.

101
00:05:01.842 --> 00:05:05.685
So we'll learn how to make sure you're
not testing other people's code,

102
00:05:05.685 --> 00:05:09.589
because if other people break other
people's code, now your tests fail and

103
00:05:09.589 --> 00:05:10.749
now you turn them off.

104
00:05:10.749 --> 00:05:13.332
The moment anything is flaky,
you know what you're gonna do,

105
00:05:13.332 --> 00:05:14.902
you're just gonna delete that test.

106
00:05:14.902 --> 00:05:17.875
So we'll deal with that
kind of stuff as well.

107
00:05:17.875 --> 00:05:20.984
And like I said, we will drive
this from the browser as well.

108
00:05:20.984 --> 00:05:23.833
That's probably a larger topic,
its own right, but

109
00:05:23.833 --> 00:05:28.022
let's do the initial versions of getting
our heads wrapped around it as well.

110
00:05:28.022 --> 00:05:32.159
So we have this website,
and it has all of my notes,

111
00:05:32.159 --> 00:05:37.663
which I did a word count was like
tens of thousands of words of notes.

112
00:05:37.663 --> 00:05:40.693
That is mostly if I took the time to write
them, might have them up there for you.

113
00:05:40.693 --> 00:05:44.912
So there are things where it's like, I
wanna see that kind of code step by step.

114
00:05:44.912 --> 00:05:48.827
Or a lot of times there's a lot of stuff
that we're not including that are kind of

115
00:05:48.827 --> 00:05:51.058
further reading or
stuff along those lines.

116
00:05:51.058 --> 00:05:53.675
That is all included there as well.

117
00:05:53.675 --> 00:05:55.820
Even ancillary topics that I might,

118
00:05:55.820 --> 00:05:59.773
in our time together only get a chance
to Kind of briefly touch upon.

119
00:05:59.773 --> 00:06:04.205
Sometimes there is more
depth in there as well.

120
00:06:04.205 --> 00:06:07.750
And linked from that site,
we've got a repository with a bunch of

121
00:06:07.750 --> 00:06:11.690
little examples that I can kind of kick
the tires on and play around with.

122
00:06:11.690 --> 00:06:14.106
And like I said,
if we need to whip up something new for

123
00:06:14.106 --> 00:06:16.275
a particular question you have,
we'll do it.

124
00:06:16.275 --> 00:06:20.714
But just to make sure that we
spend more time testing code than

125
00:06:20.714 --> 00:06:23.426
watching me write very simple code.

126
00:06:23.426 --> 00:06:27.809
So we've got a bunch of examples
to inspire us for tests and

127
00:06:27.809 --> 00:06:30.325
stuff along those lines, cool.

128
00:06:30.325 --> 00:06:36.188
Lastly, just in terms of tooling,
there are a lot of test runners out there.

129
00:06:36.188 --> 00:06:41.601
There's Jest, there's Mocha, and Chai,
which are related, as you can guess.

130
00:06:41.601 --> 00:06:44.420
Jasmine, there are a whole bunch of them.

131
00:06:44.420 --> 00:06:46.894
Most of them are actually
the same under the hood, right?

132
00:06:46.894 --> 00:06:51.654
Or at least we could write the same test
in about three different frameworks, and

133
00:06:51.654 --> 00:06:56.414
the COVID run across the altar with maybe
just where we're importing it from, or

134
00:06:56.414 --> 00:06:57.617
one little change.

135
00:06:57.617 --> 00:07:01.027
So we're gonna use this one called Vitest.

136
00:07:01.027 --> 00:07:05.227
It is a companion to V, which is also
works with react and angular and

137
00:07:05.227 --> 00:07:06.269
spelt and view.

138
00:07:06.269 --> 00:07:09.129
That said, if you use jest at work,
all of this stuff applies.

139
00:07:09.129 --> 00:07:13.539
Occasionally, I'll point out the minor
difference between the two, but

140
00:07:13.539 --> 00:07:16.486
in most cases it doesn't really matter,
right?

141
00:07:16.486 --> 00:07:21.286
There might be a tiny little syntax
change between one or the other, but

142
00:07:21.286 --> 00:07:24.166
most of them are based
on the same tooling.

143
00:07:24.166 --> 00:07:27.340
The wrappers around the same
common libraries anyway.

