WEBVTT

1
00:00:00.056 --> 00:00:02.412
&gt;&gt; Steve Kinney: So what I'd like to
challenge you to do is a little bit of

2
00:00:02.412 --> 00:00:06.015
exploration time, which is, we've got
a bunch of other math functions in there.

3
00:00:06.015 --> 00:00:09.339
Then there's just basic stuff like,
what happens if you divide by 0?

4
00:00:09.339 --> 00:00:10.234
Do you wanna throw an error?

5
00:00:10.234 --> 00:00:11.276
Do you wanna return NaN?

6
00:00:11.276 --> 00:00:13.909
You make your choices, I don't care.

7
00:00:13.909 --> 00:00:15.376
But we've got a bunch of math functions.

8
00:00:15.376 --> 00:00:19.306
We got a whole bunch of garbage
you can pass into those, right,

9
00:00:19.306 --> 00:00:21.245
you get to decide what they do.

10
00:00:21.245 --> 00:00:22.930
You could sum up an array for all I care.

11
00:00:22.930 --> 00:00:24.868
You could call the function,
for all I care.

12
00:00:24.868 --> 00:00:26.529
You choose what you want to happen.

13
00:00:26.529 --> 00:00:30.544
And hopefully, you'll either come up with
stuff where that's pretty clever, or b,

14
00:00:30.544 --> 00:00:34.351
you'll come up with something you don't
actually know how to test or implement.

15
00:00:34.351 --> 00:00:37.374
And then we'll kinda take
a look at that together and

16
00:00:37.374 --> 00:00:40.338
come up with all of the weird
things that stump you.

17
00:00:40.338 --> 00:00:43.328
And then we'll look at them together and
see if we can figure it out.

18
00:00:48.196 --> 00:00:53.208
&gt;&gt; Steve Kinney: All right, so our mission
was to figure out other edge cases

19
00:00:53.208 --> 00:00:57.730
that some of these very
humble functions might have.

20
00:00:57.730 --> 00:01:00.033
Anything from,
what happens when we divide by zero,

21
00:01:00.033 --> 00:01:03.114
to what happens if I throw one of
these garbage values in there, right?

22
00:01:03.114 --> 00:01:06.396
For some of these things, there's not
necessarily a right answer of what should

23
00:01:06.396 --> 00:01:08.677
happen, sometimes it's what
you should decide to do.

24
00:01:08.677 --> 00:01:12.615
You could be like, hey,
if one of those arguments is undefined,

25
00:01:12.615 --> 00:01:13.838
default it to zero.

26
00:01:13.838 --> 00:01:16.238
That's a fine decision, right?

27
00:01:16.238 --> 00:01:20.689
And one of the nice things about
your tests is, cuz the only thing

28
00:01:20.689 --> 00:01:25.819
developers are worse at than testing,
writing documentation, right?

29
00:01:25.819 --> 00:01:27.403
And so a lot of times,

30
00:01:27.403 --> 00:01:33.213
the act of having a test that says what
should happen if undefined is passed in.

31
00:01:33.213 --> 00:01:36.983
If I am then going and refactoring
that code later, or looking at it,

32
00:01:36.983 --> 00:01:41.534
it shows the intention that this is doing
something for a reason because you wrote.

33
00:01:41.534 --> 00:01:44.134
It should default an argument to zero.

34
00:01:44.134 --> 00:01:49.334
Now, I might disagree with that, or
I might agree with it, but at least it has

35
00:01:49.334 --> 00:01:54.458
also gone the extra step of making your
intention explicit as well, right?

36
00:01:54.458 --> 00:01:57.032
Did anyone come up with any?

37
00:01:57.032 --> 00:02:00.199
I'll invite, particularly,
compelling ones, but I'll just go for

38
00:02:00.199 --> 00:02:01.055
regular ones too.

39
00:02:01.055 --> 00:02:05.202
Any edge cases that we
should work through?

40
00:02:05.202 --> 00:02:06.875
&gt;&gt; Student 1: Arrays
were interesting to me.

41
00:02:06.875 --> 00:02:08.469
&gt;&gt; Steve Kinney: Okay, we can do an array,

42
00:02:08.469 --> 00:02:11.809
like we picked the challenge
mode right out of the box.

43
00:02:11.809 --> 00:02:15.346
&gt;&gt; Student 1: [LAUGH] What crazy
things people do with arrays and

44
00:02:15.346 --> 00:02:17.511
expect it to do math for them?

45
00:02:17.511 --> 00:02:20.392
&gt;&gt; Steve Kinney: Yeah, so let's see.

46
00:02:20.392 --> 00:02:23.471
What should happen if I pass in an array?

47
00:02:23.471 --> 00:02:24.624
&gt;&gt; Student 1: Or do that add one?

48
00:02:24.624 --> 00:02:26.358
&gt;&gt; Steve Kinney: Yeah, or
we'll do it any one you want.

49
00:02:26.358 --> 00:02:29.220
&gt;&gt; Student 1: I was looking at subtract
cuz I was looking at the [LAUGH] subtract.

50
00:02:29.220 --> 00:02:30.217
&gt;&gt; Steve Kinney: Cool, all right.

51
00:02:30.217 --> 00:02:31.559
&gt;&gt; Student 1: I know, I made it hard.

52
00:02:31.559 --> 00:02:33.551
&gt;&gt; Steve Kinney: What should
happen if I pass an array?

53
00:02:33.551 --> 00:02:37.298
&gt;&gt; Student 1: And then I thought, did I
just write myself a code war, SCADA, or

54
00:02:37.298 --> 00:02:38.194
whatever the?

55
00:02:38.194 --> 00:02:38.998
&gt;&gt; Steve Kinney: Probably.

56
00:02:38.998 --> 00:02:40.808
&gt;&gt; Student 1: The code problem,
I think I did.

57
00:02:40.808 --> 00:02:41.790
&gt;&gt; Steve Kinney: Let's figure it out.

58
00:02:41.790 --> 00:02:44.126
&gt;&gt; Student 1: So [LAUGH].

59
00:02:44.126 --> 00:02:45.098
&gt;&gt; Steve Kinney: It should.

60
00:02:45.098 --> 00:02:48.170
&gt;&gt; Student 1: So the easiest one would
be to throw in an array [LAUGH].

61
00:02:48.170 --> 00:02:51.382
Give me an array, no, but.

62
00:02:51.382 --> 00:02:53.740
&gt;&gt; Steve Kinney: It should,
let's say, it should.

63
00:02:53.740 --> 00:02:57.646
&gt;&gt; Student 1: If it accepts arrays,
I would say it should subtract.

64
00:02:57.646 --> 00:03:00.619
&gt;&gt; Steve Kinney: The art here is making
sure this statement actually says what

65
00:03:00.619 --> 00:03:01.208
it should.

66
00:03:01.208 --> 00:03:07.990
It should accept an array, like,
uh-huh, and should accept an array and.

67
00:03:07.990 --> 00:03:08.681
&gt;&gt; Student 1: Subtract [LAUGH].

68
00:03:08.681 --> 00:03:09.539
&gt;&gt; Steve Kinney: Subtract all the numbers.

69
00:03:09.539 --> 00:03:12.082
&gt;&gt; Student 1: The numbers down the line
[LAUGH]. &gt;&gt; Steve Kinney: Yeah.

70
00:03:12.082 --> 00:03:14.518
&gt;&gt; Student 1: And then subtract the two
results from each other [LAUGH],

71
00:03:14.518 --> 00:03:15.337
cuz I don't know.

72
00:03:15.337 --> 00:03:20.108
&gt;&gt; Steve Kinney: Well, the interesting
part is, we can break this out into a few

73
00:03:20.108 --> 00:03:22.700
different-
&gt;&gt; Student 1: That's where I was like,

74
00:03:22.700 --> 00:03:25.530
yes, I just write myself
a lead code problem.

75
00:03:25.530 --> 00:03:31.116
&gt;&gt; Steve Kinney: So
we can say, expect, subtract,

76
00:03:31.116 --> 00:03:35.965
and let's just start with 2.

77
00:03:35.965 --> 00:03:41.948
Let's say, 4 and 2,
because I don't have a use case.

78
00:03:41.948 --> 00:03:47.206
It's about isolating that code into the
one thing you wanna test at this point.

79
00:03:47.206 --> 00:03:48.855
So let's make that number
a little bit bigger.

80
00:03:48.855 --> 00:03:53.827
We'll say 10, we'll subtract 5,

81
00:03:53.827 --> 00:03:57.599
and then we will subtract 2.

82
00:03:57.599 --> 00:04:01.772
10 minus 5 is 5, minus 2 is 3, right?

83
00:04:01.772 --> 00:04:07.659
Cool, okay, and the letter b is not gonna
be good enough here, so we'll run that.

84
00:04:07.659 --> 00:04:09.665
And I've got a failing test, right?

85
00:04:09.665 --> 00:04:14.382
Cuz we get not a number because
it is trying to do that thing.

86
00:04:14.382 --> 00:04:17.338
So now the question is,
what do we do here?

87
00:04:17.338 --> 00:04:25.812
All right, we're going to subtract and
we'll say, if.

88
00:04:28.877 --> 00:04:34.300
&gt;&gt; Steve Kinney: Array is array a,

89
00:04:34.300 --> 00:04:39.367
a = a.reduce.

90
00:04:46.180 --> 00:04:49.273
&gt;&gt; Steve Kinney: A is b,
and then we'll return.

91
00:04:49.273 --> 00:04:55.370
And the nice part is, I don't have
any idea if this is what I want.

92
00:04:55.370 --> 00:04:57.045
My test pass.

93
00:04:57.045 --> 00:04:58.920
Yay, I know how to code, right?

94
00:04:58.920 --> 00:05:00.907
And so now I've got that kinda
captured in there as well.

95
00:05:00.907 --> 00:05:05.145
But again,
it's nice till I sometimes see that one.

96
00:05:05.145 --> 00:05:09.448
I now know that if a argument is passed
under the race for the first argument,

97
00:05:09.448 --> 00:05:11.006
exactly what will happen.

98
00:05:11.006 --> 00:05:15.223
And effectively, it's also codified in
my test if someone comes along later and

99
00:05:15.223 --> 00:05:17.591
wonders what this thing could take, right?

100
00:05:17.591 --> 00:05:19.321
And there's other versions of this.

101
00:05:19.321 --> 00:05:20.689
What would happen?

102
00:05:20.689 --> 00:05:24.776
The one I was kinda thinking about is,
sometimes you'll write a test and

103
00:05:24.776 --> 00:05:26.863
you will get stuff for free, right?

104
00:05:26.863 --> 00:05:32.242
So I know if I throw in potato, I'll get
a yelling at that's not a number, right?

105
00:05:34.850 --> 00:05:37.695
&gt;&gt; Steve Kinney: It should throw if the.

106
00:05:41.677 --> 00:05:43.174
&gt;&gt; Steve Kinney: Not a number.

107
00:05:43.174 --> 00:05:48.584
In my assumption, I literally didn't
write this during the breaks,

108
00:05:48.584 --> 00:05:52.540
I don't really know, but
my expect, there we go.

109
00:06:03.883 --> 00:06:05.249
&gt;&gt; Steve Kinney: Right, and
that works as expected.

110
00:06:05.249 --> 00:06:09.643
But now I have validation that both
a string that I can't turn into a number,

111
00:06:09.643 --> 00:06:12.884
and not a number will both
throw the same error, right?

112
00:06:12.884 --> 00:06:18.778
And this is useful in the case
that I decided to refactor and

113
00:06:18.778 --> 00:06:22.523
change this logic somehow, right?

114
00:06:22.523 --> 00:06:26.614
Cuz again, there's so many edge cases,
right, that what I don't wanna do is,

115
00:06:26.614 --> 00:06:30.537
all right, next up, I'm gonna decide
what to do if it's a Boolean, right?

116
00:06:30.537 --> 00:06:32.584
And then I change this logic.

117
00:06:32.584 --> 00:06:35.022
Now it'll probably work cuz it's simple,
but I don't know.

118
00:06:35.022 --> 00:06:39.869
I've moved on from thinking about strings,
right, now I'm thinking about Booleans.

119
00:06:39.869 --> 00:06:40.961
But the nice part is,

120
00:06:40.961 --> 00:06:44.988
if I accidentally break a previous problem
I was trying to solve, guess what?

121
00:06:44.988 --> 00:06:46.612
I will know immediately.

122
00:06:46.612 --> 00:06:49.322
&gt;&gt; Student 1: How about
additional missing parameters?

123
00:06:49.322 --> 00:06:54.704
&gt;&gt; Steve Kinney: Yeah, and so again,
we set up our tasks in this case, right?

124
00:06:54.704 --> 00:06:57.773
When you wanna do an add, you wanna do
it and subtract, where are you feeling?

125
00:06:57.773 --> 00:07:00.924
&gt;&gt; Student 1: I don't care,
it doesn't matter for that.

126
00:07:00.924 --> 00:07:05.817
&gt;&gt; Steve Kinney: Let's go with subtract,
it doesn't have a lot of test.

127
00:07:08.087 --> 00:07:15.719
&gt;&gt; Steve Kinney: It should
default undefined values to 0,

128
00:07:15.719 --> 00:07:20.388
default it to 0, right?

129
00:07:20.388 --> 00:07:26.309
So in that case,
we would expect that subtract 2 or

130
00:07:26.309 --> 00:07:32.381
3, and then no other argument would be 3,
right?

131
00:07:32.381 --> 00:07:37.294
We save that, and my test blow up, right?

132
00:07:37.294 --> 00:07:39.510
Cool, and so we need to fix that.

133
00:07:39.510 --> 00:07:42.934
In this case, what we could do is.

134
00:07:44.846 --> 00:07:49.472
&gt;&gt; Steve Kinney: Just default value of 0,
right, and now it passes.

135
00:07:49.472 --> 00:07:51.120
Now that doesn't solve for the first one.

136
00:07:51.120 --> 00:07:53.648
And then we decide,
should you give me some number whatsoever?

137
00:07:53.648 --> 00:07:55.777
Forgetting a second value, likely.

138
00:07:55.777 --> 00:07:58.723
Forgetting the first one is
a little harder to type, but

139
00:07:58.723 --> 00:08:01.556
we could even put that in
the same test if we wanted to.

140
00:08:11.558 --> 00:08:12.887
&gt;&gt; Steve Kinney: Be -3, right?

141
00:08:12.887 --> 00:08:13.976
Okay, doesn't work.

142
00:08:13.976 --> 00:08:16.186
And again, that's that kinda flow of,

143
00:08:16.186 --> 00:08:18.787
we all deviate from this at some point,
right?

144
00:08:18.787 --> 00:08:23.651
Cuz it took every ounce of my fiber of
willpower not to just make both of them

145
00:08:23.651 --> 00:08:25.776
default out of the box, right?

146
00:08:25.776 --> 00:08:29.597
Which is technically deviating
from test-driven development,

147
00:08:29.597 --> 00:08:33.492
which is why we all do it,
because impulse control is hard, right?

148
00:08:33.492 --> 00:08:35.034
And now it passes, right?

149
00:08:35.034 --> 00:08:36.647
And again, we could do that for
the rest of them.

150
00:08:36.647 --> 00:08:39.069
Now, again, I don't know,
I literally do not know.

151
00:08:45.688 --> 00:08:50.110
&gt;&gt; Steve Kinney: Zero if either
argument is null, right?

152
00:08:50.110 --> 00:08:55.054
Again, you could decide you wanted to
blow up instead, but I don't know.

153
00:08:55.054 --> 00:08:58.034
And so you're just kind of figuring out
all these things and making it happen.

154
00:08:58.034 --> 00:08:59.218
Yeah, Mark?

155
00:08:59.218 --> 00:09:03.671
&gt;&gt; Mark: Andre says the division by
zero is particularly interesting.

156
00:09:03.671 --> 00:09:05.030
&gt;&gt; Steve Kinney: Let's do that one, too.

157
00:09:05.030 --> 00:09:08.308
So let's say, 3 subtracted null.

158
00:09:08.308 --> 00:09:09.533
Expect it to be 3.

159
00:09:09.533 --> 00:09:10.982
Okay, that does work.

160
00:09:10.982 --> 00:09:15.235
Now, if you want it to blow up instead,
you gotta refactor that code because now

161
00:09:15.235 --> 00:09:17.787
you can't use the default arguments,
right?

162
00:09:17.787 --> 00:09:22.685
But the nice part is, you could worry
about null and know that undefined is

163
00:09:22.685 --> 00:09:26.883
still taken care of,
because you have the test for it, right?

164
00:09:26.883 --> 00:09:30.612
And you could refactor to say,
hey, undefined, be zero, null,

165
00:09:30.612 --> 00:09:32.286
I want you to blow up, right?

166
00:09:32.286 --> 00:09:34.420
Again, I don't know why you'd want that,
but you could.

167
00:09:34.420 --> 00:09:37.862
And the nice part is, you're so
hyper-fixated on null,

168
00:09:37.862 --> 00:09:40.686
you might forgotten about undefined,
right?

169
00:09:40.686 --> 00:09:42.912
But your test suite didn't, [LAUGH] right?

170
00:09:42.912 --> 00:09:47.103
And because your test suite
didn't forget about undefined,

171
00:09:47.103 --> 00:09:49.530
you won't forget either, right?

172
00:09:49.530 --> 00:09:54.402
So then we'll say, null and

173
00:09:54.402 --> 00:09:58.062
3 to be -3, cool?

174
00:09:58.062 --> 00:09:59.440
Everything passes, great.

175
00:09:59.440 --> 00:10:01.705
All right, so we had dividing by zero.

176
00:10:01.705 --> 00:10:09.700
What do we want it to do if
we divide by zero, blow up?

177
00:10:09.700 --> 00:10:10.694
&gt;&gt; Student 1: Return null.

178
00:10:10.694 --> 00:10:13.065
&gt;&gt; Steve Kinney: Return null.

179
00:10:13.065 --> 00:10:14.816
&gt;&gt; Student 1: [LAUGH] But you [CROSSTALK].

180
00:10:14.816 --> 00:10:16.617
&gt;&gt; Steve Kinney: Someone
want to see the world burn.

181
00:10:16.617 --> 00:10:17.877
We're doing it.

182
00:10:17.877 --> 00:10:24.673
It should return null, and
then we'll do it through an exception too.

183
00:10:29.517 --> 00:10:31.289
&gt;&gt; Steve Kinney: Right, cool.

184
00:10:34.235 --> 00:10:41.237
&gt;&gt; Steve Kinney: And now we can say,
expect divide 10 by 0.

185
00:10:43.713 --> 00:10:44.987
&gt;&gt; Steve Kinney: You can do this too.

186
00:10:44.987 --> 00:10:47.303
You know what that is the same as?

187
00:10:48.783 --> 00:10:52.670
&gt;&gt; Steve Kinney: Same thing,
whichever one makes you happier.

188
00:10:52.670 --> 00:10:57.746
Okay, that doesn't work because
it is technically infinity.

189
00:10:57.746 --> 00:10:59.624
I knew that cuz I rehearsed this,

190
00:10:59.624 --> 00:11:02.721
there's a bunch of other
weird cases in there as well.

191
00:11:02.721 --> 00:11:06.287
Did you know an empty string
counts as zero as well, right?

192
00:11:06.287 --> 00:11:09.588
So theoretically, an edge case
that we might have to solve for

193
00:11:09.588 --> 00:11:11.309
here is an empty string is zero.

194
00:11:11.309 --> 00:11:12.995
Is that what we want?

195
00:11:12.995 --> 00:11:15.636
I don't know, you gotta decide.

196
00:11:15.636 --> 00:11:19.205
So in this case,
let's go get it working, which is.

197
00:11:23.274 --> 00:11:30.325
&gt;&gt; Steve Kinney: So then we gotta take,
result is a divided by b.

198
00:11:30.325 --> 00:11:38.205
And I thought about
throwing if b was zero.

199
00:11:38.205 --> 00:11:42.316
Now, I guess there's multiple
ways I can do this, right?

200
00:11:42.316 --> 00:11:45.683
And the nice part is, my test will
immediately tell me if I'm right or

201
00:11:45.683 --> 00:11:47.613
not, cuz I know NaN does not equal NaN.

202
00:11:47.613 --> 00:11:50.144
Let's find out if
infinity equals infinity.

203
00:11:52.394 --> 00:11:55.098
&gt;&gt; Steve Kinney: And the nice part about
having tests is, I don't have to go sit

204
00:11:55.098 --> 00:11:58.069
through my terminal, run the thing,
look at the constant output.

205
00:11:58.069 --> 00:12:01.124
I'm gonna hit Save,
I'm gonna find out that I'm still wrong.

206
00:12:01.124 --> 00:12:03.526
Received, undefined.

207
00:12:03.526 --> 00:12:07.113
I broke the previous test, right?

208
00:12:07.113 --> 00:12:12.325
I broke an earlier test, right,
of 10 divided by 2, cuz I was so

209
00:12:12.325 --> 00:12:18.111
focused on this zero issue that I forgot
to return a value in the good case.

210
00:12:18.111 --> 00:12:21.425
And immediately I got feedback, right?

211
00:12:21.425 --> 00:12:26.089
This course sells itself, right?

212
00:12:26.089 --> 00:12:30.909
And now we will return null if it passes.

213
00:12:30.909 --> 00:12:35.057
And the cool part is, now we're getting
complicated enough where we could think

214
00:12:35.057 --> 00:12:36.950
about, how would we refactor this?

215
00:12:36.950 --> 00:12:40.323
Here I'm doing the math, and
if it's infinity, return null.

216
00:12:40.323 --> 00:12:43.215
But I could also say,

217
00:12:43.215 --> 00:12:49.001
if b equals equals zero, return null, and

218
00:12:49.001 --> 00:12:54.486
then forget all that I was doing before.

219
00:12:54.486 --> 00:12:57.705
And does this refactor
still make everything work?

220
00:12:57.705 --> 00:13:00.856
It does, and I have that
confidence that everything works.

