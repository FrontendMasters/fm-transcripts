WEBVTT

1
00:00:00.330 --> 00:00:01.020
This is tricky.

2
00:00:01.020 --> 00:00:03.704
Yeah, this is a dumb version.

3
00:00:03.704 --> 00:00:09.276
This is like, take a call back,
but do it one second later, right?

4
00:00:09.276 --> 00:00:13.613
Where this is more useful
is show an alert and

5
00:00:13.613 --> 00:00:19.480
then hide it after a certain
amount of time, right?

6
00:00:19.480 --> 00:00:24.371
And any of those things where it's like,
show the banner, hide the banner, so

7
00:00:24.371 --> 00:00:25.918
on and so forth, right?

8
00:00:25.918 --> 00:00:28.788
You have a few options,
you could say that, okay, well,

9
00:00:28.788 --> 00:00:31.918
the banner's supposed to be there for
three seconds.

10
00:00:31.918 --> 00:00:34.368
What if it's supposed to be there for
ten seconds, right?

11
00:00:34.368 --> 00:00:36.138
Were you gonna have your test
suite wait for ten seconds?

12
00:00:36.138 --> 00:00:37.588
How many times are you gonna do that?

13
00:00:38.628 --> 00:00:43.227
Not that often before you have
a ten minute, test suite, right?

14
00:00:43.227 --> 00:00:48.296
What we want to do is instead,
and this is also useful if

15
00:00:48.296 --> 00:00:53.258
you have something you're
trying to date format, or

16
00:00:53.258 --> 00:00:58.674
you ever see those posted two hours and
three minutes ago.

17
00:00:58.674 --> 00:01:01.525
How are you gonna write that test?

18
00:01:01.525 --> 00:01:04.269
Time keeps moving, right?

19
00:01:04.269 --> 00:01:09.626
The idea is, one thing you can
also do in your mock environment

20
00:01:09.626 --> 00:01:16.219
is set the current time and
leave the time frozen for a second, right?

21
00:01:16.219 --> 00:01:19.536
And then advance the time,
you can just move the clock.

22
00:01:19.536 --> 00:01:22.294
So if this thing is supposed to be there.

23
00:01:22.294 --> 00:01:28.390
So this one for instance, we're gonna pass
it a function, it gets called in a second.

24
00:01:28.390 --> 00:01:30.885
So we don't wanna have the test
suite wait for a second.

25
00:01:30.885 --> 00:01:35.700
So what we do is, we stop the clock to
whatever time we want, in this case,

26
00:01:35.700 --> 00:01:37.820
it doesn't really matter.

27
00:01:37.820 --> 00:01:42.791
But if you had something where you wanna
do durations or something like that,

28
00:01:42.791 --> 00:01:46.858
it's useful to stop the clock,
and then see with time frozen.

29
00:01:46.858 --> 00:01:51.703
We can stop the clock,
then caller function,

30
00:01:51.703 --> 00:01:58.673
move the clock up one second and
verify that it was called, right?

31
00:01:58.673 --> 00:02:01.467
And that's, again, that kinda
stuff I don't mind mocking, right?

32
00:02:01.467 --> 00:02:05.921
Cuz I'm not taking entire modules and
trying to think I'm better than them and

33
00:02:05.921 --> 00:02:07.013
figure it all out.

34
00:02:07.013 --> 00:02:12.726
What I'm trying to do, basically,
is control reality so I can test my code.

35
00:02:13.896 --> 00:02:15.401
Makes it sound better when
I say it like that, right?

36
00:02:15.401 --> 00:02:22.329
Let's say we've got,
&gt;&gt; Steve Kinney: We'll say,

37
00:02:22.329 --> 00:02:24.206
I have this up here, let's not do that.

38
00:02:26.987 --> 00:02:27.754
&gt;&gt; Steve Kinney: beforeEach,

39
00:03:01.391 --> 00:03:05.428
&gt;&gt; Steve Kinney: And afterEach we'll
go ahead and we'll put back time.

40
00:03:05.428 --> 00:03:09.328
Which, again, with test isolation,

41
00:03:09.328 --> 00:03:13.226
we can argue how important that is, but

42
00:03:13.226 --> 00:03:18.088
it makes me feel like I'm
a responsible person.

43
00:03:24.600 --> 00:03:26.935
&gt;&gt; Steve Kinney: UseRealTimers, cool.

44
00:03:26.935 --> 00:03:32.067
So now what we can do is we
can give it a callback, so

45
00:03:32.067 --> 00:03:37.168
we'll say,
&gt;&gt; Steve Kinney: vi.fn,

46
00:03:37.168 --> 00:03:43.688
and what we'll do is we'll say.

47
00:03:43.688 --> 00:03:47.279
Now if we just run this function,
as it is now, it's gonna fail.

48
00:03:58.677 --> 00:03:59.814
&gt;&gt; Steve Kinney: I'm not
skipping that one anymore, right?

49
00:03:59.814 --> 00:04:00.574
Okay, cool.

50
00:04:07.780 --> 00:04:09.470
&gt;&gt; Steve Kinney: Right, cool,
what'd you angry about?

51
00:04:09.470 --> 00:04:11.959
I didn't pull that in,
that's not why you're supposed to fail.

52
00:04:18.849 --> 00:04:20.253
&gt;&gt; Steve Kinney: All right, okay, cool.

53
00:04:20.253 --> 00:04:24.137
It was never called,
and that's problematic.

54
00:04:24.137 --> 00:04:27.968
So, now what we can do here is we can say,

55
00:04:35.013 --> 00:04:40.174
&gt;&gt; Steve Kinney: Let's just say 200
milliseconds and now it's passing, right?

56
00:04:40.174 --> 00:04:43.392
And now we don't necessarily need to
worry too much about, waiting a second or

57
00:04:43.392 --> 00:04:44.289
anything like that.

58
00:04:44.289 --> 00:04:45.206
We froze time,

59
00:04:45.206 --> 00:04:50.293
we said we have the set interval that's
supposed to be 1000 milliseconds later.

60
00:04:50.293 --> 00:04:53.878
All we did was we called it and
then we forwarded time, and

61
00:04:53.878 --> 00:04:57.825
should be like,
you should have triggered, right?

62
00:04:57.825 --> 00:05:03.825
And the other really interesting
one that you can do is for

63
00:05:03.825 --> 00:05:06.705
even more fun, you can do.

64
00:05:15.406 --> 00:05:18.689
&gt;&gt; Steve Kinney: Which is when
we fired this setTimeout,

65
00:05:18.689 --> 00:05:24.586
it registered a timer with the JavaScript
engine, in this case, node.

66
00:05:24.586 --> 00:05:28.520
So this one is just like,
I don't know when the next timer was, but

67
00:05:28.520 --> 00:05:32.226
just fast forward time until
the next timer goes off, right?

68
00:05:32.226 --> 00:05:33.716
Which is that set timeout.

69
00:05:33.716 --> 00:05:36.942
And so you could do a thousand
milliseconds, you can just be,

70
00:05:36.942 --> 00:05:40.116
forward time until like that
setTimeout is called, right?

71
00:05:40.116 --> 00:05:43.658
And which point you can go ahead and
get a sense, right?

72
00:05:43.658 --> 00:05:45.016
And so we can even say,

73
00:05:55.715 --> 00:05:58.561
&gt;&gt; Steve Kinney: I don't know what

74
00:05:58.561 --> 00:06:02.852
the full date is gonna be.

75
00:06:02.852 --> 00:06:05.301
Yeah, so it's midnight UTC and whatever.

76
00:06:05.301 --> 00:06:09.747
And so time is basically, at this point,
you can see it's 1 second

77
00:06:09.747 --> 00:06:14.201
after midnight because it had to
advance to the NextTimer, right?

78
00:06:14.201 --> 00:06:16.481
But time is effectively frozen still.

79
00:06:16.481 --> 00:06:19.963
And so if I needed to do time
since components, right,

80
00:06:19.963 --> 00:06:25.611
posted two hours three minutes ago, it's
nice if you can hold time in place, right?

81
00:06:25.611 --> 00:06:31.085
And so you can basically say, set the
clock to this pass in a bunch of inputs.

82
00:06:31.085 --> 00:06:34.455
Okay, I'm gonna advance
the time two hours, and

83
00:06:34.455 --> 00:06:37.501
now it should say two hours ago, right?

84
00:06:37.501 --> 00:06:40.901
I can advance the time three hours,
it should now say three hours ago, right?

85
00:06:40.901 --> 00:06:43.385
And you can kind of,
those things I think are fair to fake,

86
00:06:43.385 --> 00:06:45.865
cuz you're just trying
to hold something down.

87
00:06:45.865 --> 00:06:48.235
Still so you can test it, right?

88
00:06:48.235 --> 00:06:51.511
Can you mock out entire modules.

89
00:06:51.511 --> 00:06:52.465
Yes.

90
00:06:52.465 --> 00:06:58.675
Right, but think about the number
of things in a fetch request.

91
00:06:58.675 --> 00:06:59.945
Like a get fine.

92
00:06:59.945 --> 00:07:03.455
But then you got to actually have
the response.json, so on and so forth.

93
00:07:03.455 --> 00:07:05.662
It can get really kinda tricky.

94
00:07:05.662 --> 00:07:09.822
If you pull out the data fetching to their
own functions, they become easier, right?

95
00:07:09.822 --> 00:07:13.415
If you're doing everything in
one giant component, yeah,

96
00:07:13.415 --> 00:07:15.662
it's gonna be hard to test.

97
00:07:15.662 --> 00:07:19.222
That's not a testing problem,
that's a your code problem, right?

98
00:07:19.222 --> 00:07:22.228
And you can solve that problem by
kinda pulling the pieces out and

99
00:07:22.228 --> 00:07:25.917
then passing them back in, and so now that
the thing that goes and hits the API.

100
00:07:25.917 --> 00:07:27.666
You can test that separately, and

101
00:07:27.666 --> 00:07:30.877
the component can know nothing
about hitting the API, right?

102
00:07:30.877 --> 00:07:33.097
It's just gonna get a function
that it knows to call.

103
00:07:33.097 --> 00:07:35.337
And so now the component,
you just say, hey,

104
00:07:35.337 --> 00:07:39.537
if I pass you a data fetching component,
are you gonna call it the way you should?

105
00:07:39.537 --> 00:07:41.787
Great, hey, data fetching component.

106
00:07:41.787 --> 00:07:46.230
In this point, I wanna make sure that you
are maybe that hitting Axios the right

107
00:07:46.230 --> 00:07:48.262
way, right, or so on and so forth.

108
00:07:48.262 --> 00:07:51.737
Maybe I'll pass you in something
that you can default to.

