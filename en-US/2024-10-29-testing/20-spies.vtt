WEBVTT

1
00:00:00.170 --> 00:00:04.150
&gt;&gt; Steve Kinney: So let's just
look at some of these in practice.

2
00:00:04.150 --> 00:00:05.430
So here I've got that little scratchpad.

3
00:00:08.230 --> 00:00:12.628
So we can do something really simple
to demonstrate the point here,

4
00:00:12.628 --> 00:00:17.274
which is there are really two things,
you could break into stubs also.

5
00:00:17.274 --> 00:00:20.963
I'm gonna break this into two things,
mocks and spies.

6
00:00:20.963 --> 00:00:26.816
A mock is a function that you plan
on just being a placeholder for

7
00:00:26.816 --> 00:00:29.251
something else, right?

8
00:00:29.251 --> 00:00:31.971
It replaces whatever you were gonna call.

9
00:00:33.081 --> 00:00:36.214
A spy keeps what you had before, but

10
00:00:36.214 --> 00:00:42.183
then wraps it in some abilities to
have some introspection on that.

11
00:00:42.183 --> 00:00:43.672
Those are words.

12
00:00:43.672 --> 00:00:46.895
Let's actually see it in practice because
otherwise, I could talk about this for

13
00:00:46.895 --> 00:00:49.052
another hour,
you just stare at me blankly.

14
00:00:49.052 --> 00:00:51.412
So let's look at some code.

15
00:00:51.412 --> 00:00:54.062
Cool, so let's start with,

16
00:00:54.062 --> 00:00:59.954
if you don't have the globals,
you can pull in this vi.

17
00:00:59.954 --> 00:01:03.009
A lot of times, so I put the globals
on cuz, one, it was just and

18
00:01:03.009 --> 00:01:06.014
to because that way you didn't
have to worry about it.

19
00:01:06.014 --> 00:01:10.275
I tend to import them in every
test in my code base because

20
00:01:10.275 --> 00:01:14.004
then the IntelliSense is better,
that's all.

21
00:01:14.004 --> 00:01:15.880
You can do it either way.

22
00:01:15.880 --> 00:01:21.856
So here we can do vi.spyOn.

23
00:01:21.856 --> 00:01:26.436
So this is gonna say, hey,
here's an existing function that

24
00:01:26.436 --> 00:01:31.122
exists that don't change it,
don't do anything different.

25
00:01:31.122 --> 00:01:33.655
But I wanna look at it later, right?

26
00:01:33.655 --> 00:01:35.415
I wanna keep an eye on this one.

27
00:01:35.415 --> 00:01:40.401
So we're gonna take the console object and
we're gonna take this log method.

28
00:01:40.401 --> 00:01:42.761
Are you familiar with console log?

29
00:01:42.761 --> 00:01:44.991
It's the greatest debugging
tool ever invented.

30
00:01:47.931 --> 00:01:52.232
So we'll spy on it, and

31
00:01:52.232 --> 00:01:59.733
we'll call this our log spy, right?

32
00:01:59.733 --> 00:02:06.003
And then, again, this is just a little
playground that we can play in.

33
00:02:06.003 --> 00:02:07.885
So what we'll say is,

34
00:02:16.393 --> 00:02:19.488
&gt;&gt; Steve Kinney: And that's the same
console log that we know and love.

35
00:02:19.488 --> 00:02:22.316
Nothing has changed.

36
00:02:22.316 --> 00:02:24.260
But now we can do stuff like,

37
00:02:36.216 --> 00:02:38.186
&gt;&gt; Steve Kinney: Let's open it in here.

38
00:02:42.525 --> 00:02:44.614
&gt;&gt; Steve Kinney: Right,
and so this test passes.

39
00:02:44.614 --> 00:02:50.437
So our console log, let's see, we still
logged, it still did the thing, right?

40
00:02:50.437 --> 00:02:53.155
But before it hit the actual console log,

41
00:02:53.155 --> 00:02:58.746
we hugged it with our own little special
function, right, in logsSpy which is like,

42
00:02:58.746 --> 00:03:03.766
go look at every call to console log and
just keep track of it, right?

43
00:03:03.766 --> 00:03:06.926
And so console log2 have been called.

44
00:03:06.926 --> 00:03:11.996
And so if we didn't call it,
it fails, right?

45
00:03:11.996 --> 00:03:18.050
So if you had something that was
maybe writing to a canvas, right?

46
00:03:18.050 --> 00:03:21.989
Or something along those lines or
maybe it is supposed to console log or

47
00:03:21.989 --> 00:03:26.625
maybe it's supposed to trigger an alert or
something along those lines, right?

48
00:03:26.625 --> 00:03:29.875
And you just wanna make sure
that that side effect happened,

49
00:03:29.875 --> 00:03:31.219
you can do that, right?

50
00:03:31.219 --> 00:03:34.088
So it should have called console log.

51
00:03:34.088 --> 00:03:36.661
Okay, that one's good, what about,

52
00:03:50.932 --> 00:03:52.381
&gt;&gt; Steve Kinney: So then you can also say,

53
00:03:52.381 --> 00:03:53.002
okay, but

54
00:03:53.002 --> 00:03:57.777
did it get called with the thing I think
it was supposed to get called with, right?

55
00:03:57.777 --> 00:04:01.478
In this case, obviously,
in this dumb example, that will pass.

56
00:04:01.478 --> 00:04:04.818
And so all that spy does is
it doesn't replace anything.

57
00:04:04.818 --> 00:04:06.628
It doesn't change anything.

58
00:04:06.628 --> 00:04:11.137
It just goes ahead and makes sure that
if your function had some kind of side

59
00:04:11.137 --> 00:04:15.648
effect, the call to the outside world
that wasn't in the return value and

60
00:04:15.648 --> 00:04:20.387
you need to make sure that it happened,
guess what a spy is good for.

61
00:04:20.387 --> 00:04:22.557
It's good for
making sure that that happened.

62
00:04:22.557 --> 00:04:24.464
And you can even do stuff like,

63
00:04:30.735 --> 00:04:33.698
&gt;&gt; Steve Kinney: Let's say you're worried

64
00:04:33.698 --> 00:04:38.730
about calling the API too many times,
right?

65
00:04:49.437 --> 00:04:52.559
&gt;&gt; Steve Kinney: Right, these are all
effectively ways to make sure

66
00:04:52.559 --> 00:04:57.351
that these side effects that you can't
get your hands on otherwise were called

67
00:04:57.351 --> 00:05:00.856
the way that you think that
they should have been called.

