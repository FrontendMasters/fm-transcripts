WEBVTT

1
00:00:00.041 --> 00:00:04.376
&gt;&gt; Steve Kinney: So our mission is to
start with just getting the blood flow and

2
00:00:04.376 --> 00:00:08.459
getting some of these very
kind of simple tests in place.

3
00:00:08.459 --> 00:00:11.087
I did addition there's not a lot of heady,

4
00:00:11.087 --> 00:00:14.010
how am I gonna implement these things,
right?

5
00:00:14.010 --> 00:00:17.062
It is, you take the math operators,
you make it work, right?

6
00:00:17.062 --> 00:00:21.430
But the, what we're trying to do is get
the rhythm of pulling in something,

7
00:00:21.430 --> 00:00:24.979
watching it fail, running the test,
going and changing it,

8
00:00:24.979 --> 00:00:29.715
getting that rhythm in place and seeing
it, and then we'll pick it up from there.

9
00:00:33.688 --> 00:00:36.153
&gt;&gt; Steve Kinney: Again,
we've got addition, and so

10
00:00:36.153 --> 00:00:40.617
now we'll bring in the rest of
the function options along the way.

11
00:00:40.617 --> 00:00:46.313
I could also import them all and then have
those properties on here, multiply and

12
00:00:46.313 --> 00:00:51.530
divide, and we'll write some basic
assertions of how this should work.

13
00:00:51.530 --> 00:00:57.335
So what I might choose to do here is
again, I turn red cuz there's no test.

14
00:00:57.335 --> 00:01:01.944
Great it should subtract one number

15
00:01:01.944 --> 00:01:06.866
from the other seems like a good name.

16
00:01:10.184 --> 00:01:13.893
&gt;&gt; Steve Kinney: And then we can expect,
and if you see me make a booboo,

17
00:01:13.893 --> 00:01:18.328
you can be he must be working on
some a higher level of thinking no,

18
00:01:18.328 --> 00:01:21.814
I'm probably talking while I'm typing,
right?

19
00:01:21.814 --> 00:01:24.976
And it's probably a boo-boo.

20
00:01:24.976 --> 00:01:29.873
So if you see something like that, feel
free to interrupt me because talking and

21
00:01:29.873 --> 00:01:33.836
typing while standing at a podium
leads to mistakes sometimes.

22
00:01:33.836 --> 00:01:36.637
Great, now,
this one still fails why does it fail?

23
00:01:36.637 --> 00:01:41.576
Because that function doesn't do anything.

24
00:01:41.576 --> 00:01:45.808
So we can A, B, and
then we'll return A minus B.

25
00:01:45.808 --> 00:01:50.577
And there is that rewarding
feeling as the terminal beneath my

26
00:01:50.577 --> 00:01:53.612
editor just turned green for a second.

27
00:01:53.612 --> 00:01:56.657
Feels right and
you might be I should go ahead and

28
00:01:56.657 --> 00:01:59.253
do multiply divided while I'm in here.

29
00:01:59.253 --> 00:02:01.617
I'm like no, cuz we're practicing.

30
00:02:01.617 --> 00:02:05.460
This is about getting good habits in
place, not the fact that you know third

31
00:02:05.460 --> 00:02:08.954
grade math or you know how to make
JavaScript your third grade math.

32
00:02:08.954 --> 00:02:14.508
Okay, so then we do the same thing,
get it nice and red.

33
00:02:14.508 --> 00:02:19.185
And like I did, I'm hitting command S,
so I get that feedback as I go along.

34
00:02:19.185 --> 00:02:23.323
There are people out there who
have stuff auto save all the time.

35
00:02:23.323 --> 00:02:26.357
I can't do that [LAUGH] It's not me,

36
00:02:26.357 --> 00:02:31.221
it's not who I am as a person,
you are welcome to do that.

37
00:02:31.221 --> 00:02:34.892
In fact, I think if I change away from
this window it will try to auto save,

38
00:02:34.892 --> 00:02:37.973
which I did while I was teaching
a workshop and someone said you

39
00:02:37.973 --> 00:02:41.370
should do that I turned that setting on,
I presented it ever since.

40
00:02:41.370 --> 00:02:43.070
It's never been the day
I've turned it off.

41
00:02:43.070 --> 00:02:47.522
So, it should multiply two numbers.

42
00:02:47.522 --> 00:02:51.325
Okay, great and we go ahead,
we put the test in there.

43
00:02:51.325 --> 00:02:52.845
And again, mostly, this is so

44
00:02:52.845 --> 00:02:56.942
that when you write tests later, you're
not going, what is the syntax for a test?

45
00:02:56.942 --> 00:03:00.196
Because you've done it enough times
in a row that all of a sudden you get

46
00:03:00.196 --> 00:03:01.532
the muscle memory in place.

47
00:03:01.532 --> 00:03:08.081
And so again, we can expect that multiply
anyone have a favorite multiplication?

48
00:03:08.081 --> 00:03:10.741
That's a weird ask
&gt;&gt; [LAUGH]

49
00:03:10.741 --> 00:03:13.015
&gt;&gt; Steve Kinney: [LAUGH] Anyone have two

50
00:03:13.015 --> 00:03:17.445
favorite numbers they love to multiply?

51
00:03:17.445 --> 00:03:20.761
3 times 2 is 6 it fails again.

52
00:03:23.619 --> 00:03:29.344
&gt;&gt; Steve Kinney: A and B, and
then we'll return A times B.

53
00:03:29.344 --> 00:03:35.913
Awesome, awesome, awesome we'll go
ahead and it should divide two numbers.

54
00:03:39.911 --> 00:03:44.282
&gt;&gt; Steve Kinney: And we'll divide,
divide can always get weird on you,

55
00:03:44.282 --> 00:03:47.630
cuz you can choose to JavaScript, right?

56
00:03:47.630 --> 00:03:52.054
We can get to some weird places
with floating point numbers,

57
00:03:52.054 --> 00:03:55.883
but we're not gonna do that
to ourselves right now.

58
00:03:55.883 --> 00:04:02.402
We'll say, to 35, fails, and
we get it working, right?

59
00:04:02.402 --> 00:04:04.619
And that is the effective rhythm now,

60
00:04:04.619 --> 00:04:08.021
there's some edge cases here
that we need to think about.

61
00:04:08.021 --> 00:04:12.546
And we will but let's get the test pass.

62
00:04:12.546 --> 00:04:15.951
Before I ruin our day already,
I'm just gonna get the test passing.

63
00:04:15.951 --> 00:04:18.820
Awesome and
that's kind of when you hear about like,

64
00:04:18.820 --> 00:04:22.218
test driven development that is
the very simple version of it.

65
00:04:22.218 --> 00:04:25.291
Obviously, depending on what you're doing,
it grows bigger and bigger.

66
00:04:25.291 --> 00:04:29.855
And it is super useful for things like,
hey, I got this one data structure, and

67
00:04:29.855 --> 00:04:32.257
I need to pull these properties off of it.

68
00:04:32.257 --> 00:04:34.927
Or I have this one data structure,
I need to turn it into the other thing.

69
00:04:34.927 --> 00:04:37.447
And maybe I need to pull three
different properties and

70
00:04:37.447 --> 00:04:40.315
compute them in different ways
very useful for that, right?

71
00:04:40.315 --> 00:04:44.715
But one of the things that I kind
of wanna put in your head is at

72
00:04:44.715 --> 00:04:48.675
least give you a little bit
of permission structure.

73
00:04:48.675 --> 00:04:51.413
When you can do this,
it's a really great flow and rhythm.

74
00:04:51.413 --> 00:04:56.942
And it's very easy to kind of get in the
zone and kind of get that flow stay going.

75
00:04:56.942 --> 00:04:59.905
But like then, if this is so good,

76
00:04:59.905 --> 00:05:04.618
then why doesn't everyone
do it all the time, right?

77
00:05:04.618 --> 00:05:08.154
Because sometimes it's hard sometimes you
are getting existing code that has no

78
00:05:08.154 --> 00:05:09.402
tests whatsoever, right?

79
00:05:09.402 --> 00:05:12.116
It's hard to do test driven development
when the code's already been developed,

80
00:05:12.116 --> 00:05:13.560
and you're just adding
a thing on top of it.

81
00:05:13.560 --> 00:05:17.069
It's very easy to get into the flow, but
like sometimes you inherit code, and

82
00:05:17.069 --> 00:05:18.196
that's tricky as well.

83
00:05:18.196 --> 00:05:21.187
And there are a lot of cases
where it may not work.

84
00:05:21.187 --> 00:05:25.210
Sometimes you don't actually know
what the problem you're solving is.

85
00:05:25.210 --> 00:05:27.528
You get that bug report, all right?

86
00:05:27.528 --> 00:05:31.953
And in a perfect world, a practice that I
would love to instill in you is you get

87
00:05:31.953 --> 00:05:35.307
bug report, you write a test that fails,
you make a pass.

88
00:05:35.307 --> 00:05:36.989
But sometimes you don't
even know what it is and

89
00:05:36.989 --> 00:05:39.482
you're kind of playing around
you're trying out different things.

90
00:05:39.482 --> 00:05:43.741
And you find yourself 60% down the path
of getting it solved and realize that you

91
00:05:43.741 --> 00:05:48.141
have not done test-driven development and
that somebody out there is judging you.

