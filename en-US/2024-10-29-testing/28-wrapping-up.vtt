WEBVTT

1
00:00:00.240 --> 00:00:01.810
&gt;&gt; Steve Kinney: There
are many sets of tools.

2
00:00:01.810 --> 00:00:05.236
Sometimes, if we think about even some
of the things got a little wild in

3
00:00:05.236 --> 00:00:08.204
the mocking and subbing part,
because, like in that point,

4
00:00:08.204 --> 00:00:12.070
that was tools that you can use when
your code is hard to test, right?

5
00:00:12.070 --> 00:00:14.004
But like, if one breaks apart their code,

6
00:00:14.004 --> 00:00:17.210
they break out the data fetching
from the component, right?

7
00:00:17.210 --> 00:00:21.354
And those are separate pieces, and
you kind of start to pull stuff apart into

8
00:00:21.354 --> 00:00:24.854
individual pieces that snap
together into Voltron instead of,

9
00:00:24.854 --> 00:00:26.882
like, are glued together, right?

10
00:00:26.882 --> 00:00:31.551
The act of testing something can become
as easy as it was in the very beginning.

11
00:00:31.551 --> 00:00:33.941
With that, add and subtract and
stuff along those lines.

12
00:00:33.941 --> 00:00:35.561
Now, I'm not gonna lie to you.

13
00:00:35.561 --> 00:00:37.541
Getting there is hard, right.

14
00:00:37.541 --> 00:00:42.551
Especially because, like, sure, like
this thing already lives in production.

15
00:00:42.551 --> 00:00:46.451
And, like, the idea of refactoring
is a risk in and of itself, right?

16
00:00:46.451 --> 00:00:48.634
You're like, Steve told me that I
should break everything apart, so

17
00:00:48.634 --> 00:00:50.921
we're gonna stop everything for
six months and do that.

18
00:00:50.921 --> 00:00:52.001
Yeah, good luck, right?

19
00:00:52.001 --> 00:00:56.178
My code base isn't even like that,
and there are areas where we, and

20
00:00:56.178 --> 00:01:01.004
you know what they are, because everyone
on the team, size when it's like

21
00:01:01.004 --> 00:01:04.919
sprint planning and it's like
touch that part of the code base.

22
00:01:04.919 --> 00:01:07.169
You know what I mean?

23
00:01:07.169 --> 00:01:10.810
And like, you know, but like those
are still the areas where it's like,

24
00:01:10.810 --> 00:01:12.359
that is a practice that works.

25
00:01:12.359 --> 00:01:13.849
You can't always do it immediately.

26
00:01:13.849 --> 00:01:18.385
But a lot of times if something is hard to
test and you feel like I can't test this,

27
00:01:18.385 --> 00:01:20.135
maybe, maybe like.

28
00:01:20.135 --> 00:01:23.235
Getting better at testing
is not the answer, right?

29
00:01:23.235 --> 00:01:26.185
Maybe it is, that's an area
that needs refactoring, right?

30
00:01:26.185 --> 00:01:28.315
And like that's an area of tech debt.

31
00:01:28.315 --> 00:01:30.925
Or maybe like, can you get
the value just by getting a brad.

32
00:01:30.925 --> 00:01:35.577
Would you feel better, if on every poll
request a browser was firing up and

33
00:01:35.577 --> 00:01:39.298
going through that flow at the very least,
right?

34
00:01:39.298 --> 00:01:41.178
Umm, you're not gonna
get that feedback loop.

35
00:01:41.178 --> 00:01:45.082
You're gonna do that thing where you get
very hopeful when you open up a PR and

36
00:01:45.082 --> 00:01:47.528
you watch the build process.

37
00:01:47.528 --> 00:01:50.948
And it takes 7, 9,
11 minutes, and then fails.

38
00:01:50.948 --> 00:01:54.209
That's not the best feedback loop in
the world for getting your job done, but

39
00:01:54.209 --> 00:01:57.548
it will get you that coverage so
you're not causing outages, right?

40
00:01:57.548 --> 00:02:01.309
Versus a unit test that's very fast,
but it might involve some refactoring.

41
00:02:01.309 --> 00:02:01.957
Yeah, right?

42
00:02:01.957 --> 00:02:05.354
You can step out the world, but
the more you step out the world,

43
00:02:05.354 --> 00:02:07.929
are your tests even useful anymore?

44
00:02:07.929 --> 00:02:09.879
You can generate snapshot
tests real quick, but like,

45
00:02:09.879 --> 00:02:11.997
is everyone gonna ignore it
when something's hard to test,

46
00:02:11.997 --> 00:02:14.359
it doesn't mean that you
don't know how to test it.

47
00:02:14.359 --> 00:02:17.219
It just means that it's hard to test,
right?

48
00:02:17.219 --> 00:02:18.319
It's not that testing is hard.

49
00:02:18.319 --> 00:02:21.300
It's like that piece of code is
problematic, and I've got them,

50
00:02:21.300 --> 00:02:22.535
you've got them, right?

51
00:02:22.535 --> 00:02:24.315
You'll make more next over the next year.

52
00:02:24.315 --> 00:02:25.245
I will too, right?

53
00:02:25.245 --> 00:02:27.577
Umm, because sometimes you're just,
like, writing code,

54
00:02:27.577 --> 00:02:30.235
you're figuring something out,
you get it working.

55
00:02:30.235 --> 00:02:33.743
That is the next piece of tech debt,
because you know, you you know,

56
00:02:33.743 --> 00:02:38.099
in the thought process weren't pulling it
apart, like and those are all pieces, and

57
00:02:38.099 --> 00:02:42.032
these are just tools for managing this
complexity, but if you just leave this

58
00:02:42.032 --> 00:02:46.554
course with a belief system that testing
could be simple if I make my code simple.

59
00:02:46.554 --> 00:02:49.600
And then thinking about like there
are a whole bunch of other advantages,

60
00:02:49.600 --> 00:02:51.734
making your code simple and
reusable, right?

61
00:02:51.734 --> 00:02:56.261
And that these are like, like, mutually,
like, intertwined problems as well, and

62
00:02:56.261 --> 00:02:59.176
that there are strategies and
tools, because, like,

63
00:02:59.176 --> 00:03:01.733
there are trade offs to
some of the easy ways out.

64
00:03:01.733 --> 00:03:05.938
But sometimes the easy way out gets you
time to do the refactor, you know, and

65
00:03:05.938 --> 00:03:08.343
do it if it gets you the confidence,
right?

66
00:03:08.343 --> 00:03:11.953
Like, know that there are trade offs,
and that's an okay thing.

67
00:03:11.953 --> 00:03:13.723
If you go in eyes wide open, it's okay.

68
00:03:13.723 --> 00:03:15.193
If you do it accidentally.

69
00:03:15.193 --> 00:03:15.723
Well, then yeah [INAUDIBLE].

70
00:03:17.713 --> 00:03:20.614
But like, if you understand that the trade
offs and that mocking out entire

71
00:03:20.614 --> 00:03:23.161
dependencies, it's gonna come
back to hurt you some other way.

72
00:03:23.161 --> 00:03:26.251
But maybe it's good for
right now, okay, you know.

73
00:03:26.251 --> 00:03:27.981
Or maybe some playwright
tests are good for right now.

74
00:03:27.981 --> 00:03:31.044
Or maybe, like, you know,
the next thing that you build,

75
00:03:31.044 --> 00:03:33.821
you break into those small units,
awesome, right?

76
00:03:33.821 --> 00:03:36.093
Those are all good approaches, and

77
00:03:36.093 --> 00:03:39.211
it means we got the most
out of our time together.

78
00:03:39.211 --> 00:03:40.694
Thank you.

79
00:03:40.694 --> 00:03:42.357
[SOUND].

80
00:03:42.357 --> 00:03:44.567
&gt;&gt; Audience: [APPLAUSE].

