WEBVTT

1
00:00:00.370 --> 00:00:03.139
&gt;&gt; Steve Kinney: The other thing that I'll
kinda just, we'll see it later, but this

2
00:00:03.139 --> 00:00:06.680
goes into the not wanting to lecture about
too much, and then kinda get into it.

3
00:00:06.680 --> 00:00:11.333
Is this up here, you see that I'm
doing it in every test, right?

4
00:00:11.333 --> 00:00:18.512
And so there are some helpers kinda built
in where you can do stuff before each.

5
00:00:22.463 --> 00:00:23.288
&gt;&gt; Steve Kinney: And in this case,

6
00:00:23.288 --> 00:00:25.820
what we just gotta make sure
is that we have it in scope.

7
00:00:27.784 --> 00:00:29.496
&gt;&gt; Steve Kinney: There are some
other ways to do that.

8
00:00:29.496 --> 00:00:32.561
But you could have something that
you run before each test, right?

9
00:00:32.561 --> 00:00:36.445
So you find yourself doing
something repeatedly,

10
00:00:36.445 --> 00:00:40.796
you could theoretically
do before every test.

11
00:00:40.796 --> 00:00:46.407
I'm gonna argue to you, and
we'll kinda see this, that for

12
00:00:46.407 --> 00:00:54.111
some cases, if we're gonna set up some
environment where we mock out the network,

13
00:00:54.111 --> 00:00:58.316
short do that, or restubbing stuff, fine.

14
00:00:59.992 --> 00:01:01.751
But here's the issue, I did this, and

15
00:01:01.751 --> 00:01:04.057
now I don't have to make
the character every time.

16
00:01:04.057 --> 00:01:07.137
But also, when I stare at a test,
if this test file got big enough,

17
00:01:07.137 --> 00:01:10.352
it is really unclear where
that character is coming from.

18
00:01:10.352 --> 00:01:13.771
And if I wanted a test where it is
a slightly different character,

19
00:01:13.771 --> 00:01:16.182
well now I have to weirdly override it.

20
00:01:16.182 --> 00:01:19.075
And so this kinda went
before what we said earlier,

21
00:01:19.075 --> 00:01:22.993
which is there's a principle in our code,
not to repeat ourselves.

22
00:01:22.993 --> 00:01:26.241
But in our tests,
the act of trying to abstract stuff and

23
00:01:26.241 --> 00:01:28.395
get clever takes away from clarity.

24
00:01:28.395 --> 00:01:32.380
And a lot of times that reduction,
you don't need your tests to be clever.

25
00:01:32.380 --> 00:01:35.831
You want your tests, even if they're
repetitive, to be dumbly simple,

26
00:01:35.831 --> 00:01:39.126
because if they're failing,
you don't wanna be in there right now.

27
00:01:39.126 --> 00:01:41.963
When you're writing the test,
sure, sure, sure.

28
00:01:41.963 --> 00:01:44.388
But later, you just wanted
to stay green all the time.

29
00:01:44.388 --> 00:01:47.333
If it turns red,
you wanna be able to triage it real fast.

30
00:01:47.333 --> 00:01:48.839
So can you do this?

31
00:01:48.839 --> 00:01:50.803
Yes, should you always do it?

32
00:01:50.803 --> 00:01:52.891
I'm gonna argue, probably not, right?

33
00:01:52.891 --> 00:01:55.614
But there are use cases,
and we will see it, but

34
00:01:55.614 --> 00:01:58.343
I have done my due
diligence at that point.

35
00:01:58.343 --> 00:02:02.041
One more thing that maybe
in a previous life would

36
00:02:02.041 --> 00:02:06.289
have necessitated its own
section because it was hard.

37
00:02:06.289 --> 00:02:08.719
And we kinda saw it earlier, but

38
00:02:08.719 --> 00:02:13.676
it's a lot easier these days is
dealing with asynchronous code.

39
00:02:13.676 --> 00:02:17.174
Coz what's the one thing that makes
everything in JavaScript harder?

40
00:02:17.174 --> 00:02:18.774
Anything being asynchronous.

41
00:02:18.774 --> 00:02:23.669
And it used to be you had to do
a bunch of whole bunch of crazy stuff,

42
00:02:23.669 --> 00:02:27.149
the test function would
take a done callback.

43
00:02:27.149 --> 00:02:28.412
You would call the done callback.

44
00:02:28.412 --> 00:02:31.645
After all, your asynchronous thing
was done coz you used to have past

45
00:02:31.645 --> 00:02:35.614
callbacks and the callbacks and I heard
you callbacks, don't worry about it.

46
00:02:35.614 --> 00:02:37.848
Coz we saw that if we
never get to the expected.

47
00:02:37.848 --> 00:02:40.652
It doesn't fail, our tests are true.

48
00:02:40.652 --> 00:02:42.512
You can do stuff like this.

49
00:02:42.512 --> 00:02:48.037
Honestly, the answer to this now
is simply most the testing suites,

50
00:02:48.037 --> 00:02:52.131
if that test function is
an async await function and

51
00:02:52.131 --> 00:02:58.069
you await everything like you're
supposed to, it just works, right?

52
00:02:58.069 --> 00:03:01.813
And so you might see things in your
code base where there is a done,

53
00:03:01.813 --> 00:03:06.596
passed in here and called these days you
don't necessarily have to worry about it.

54
00:03:06.596 --> 00:03:10.620
You might come across it, but
if it's asynchronous function and

55
00:03:10.620 --> 00:03:14.099
you're using async await,
everything works.

56
00:03:14.099 --> 00:03:16.510
Life is easy.
If you're forgetting await,

57
00:03:16.510 --> 00:03:17.824
things will break.

58
00:03:18.955 --> 00:03:20.364
Coz either this value
will be a promise and

59
00:03:20.364 --> 00:03:22.845
not what you thought it was, or
something along those lines.

60
00:03:22.845 --> 00:03:28.045
But you will see a bunch of different
other theatrics for asynchronous code.

61
00:03:28.045 --> 00:03:31.027
But I would say for most new tests,
as long as they are asynch await, and

62
00:03:31.027 --> 00:03:34.137
if you come across a test, it's not
you should just refactor it, right?

63
00:03:34.137 --> 00:03:40.680
And so previously, if we wanted to take
this example real quick and just show you.

64
00:03:40.680 --> 00:03:44.240
Just put it down here,
we won't even run it.

65
00:03:44.240 --> 00:03:48.170
If this wasn't a sinker weight,
ignore the red squigglies.

66
00:03:48.170 --> 00:03:51.251
And this took a call back,
you would have to do something.

67
00:03:53.690 --> 00:03:55.838
&gt;&gt; Steve Kinney: And
then the callback would go in here.

68
00:04:02.770 --> 00:04:05.973
&gt;&gt; Steve Kinney: The problem is,
again, coz the test would just go on,

69
00:04:05.973 --> 00:04:10.165
it would pass even if this failed,
because there was no expectations.

70
00:04:10.165 --> 00:04:14.597
So you would take this done, and
you would call it at the end.

71
00:04:14.597 --> 00:04:18.228
So if you see code like this and
it makes you sad.

72
00:04:18.228 --> 00:04:23.026
It could just be single weight and
everything can be easy again, right?

73
00:04:23.026 --> 00:04:27.915
That this thing which you'd have
to squint at could just be.

74
00:04:30.952 --> 00:04:34.966
&gt;&gt; Steve Kinney: Well that was a lot
more hitting on undo than I expected.

75
00:04:34.966 --> 00:04:37.539
This and that will work these days.

76
00:04:37.539 --> 00:04:42.999
So you might see the other
thing from older tests,

77
00:04:42.999 --> 00:04:46.249
but, wait, now it's good.

78
00:04:46.249 --> 00:04:47.071
In this case,

79
00:04:47.071 --> 00:04:51.529
that is all you need to do to really
worry about asynchronous code these days.

