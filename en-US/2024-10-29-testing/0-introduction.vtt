WEBVTT

1
00:00:00.000 --> 00:00:01.283
&gt;&gt; Steve Kinney: Hi my name is Steve, and

2
00:00:01.283 --> 00:00:03.992
today we're gonna talk
about testing software.

3
00:00:03.992 --> 00:00:08.556
I've got a few basic tenants around that,
but I kind of wanna start

4
00:00:08.556 --> 00:00:12.958
with of the kind of four major
beliefs that I have about testing,

5
00:00:12.958 --> 00:00:16.730
one that I kind of want to
call it in the very beginning.

6
00:00:16.730 --> 00:00:18.741
Don't worry we'll talk about all four.

7
00:00:18.741 --> 00:00:23.220
One is that writing tests isn't all that
hard despite what you believe, right?

8
00:00:23.220 --> 00:00:29.290
Writing tests is super easy that said,
not all code is easy to test, right?

9
00:00:29.290 --> 00:00:33.081
And so we are gonna talk about
testing software, right?

10
00:00:33.081 --> 00:00:35.643
And one of things I will
kinda mention a few times,

11
00:00:35.643 --> 00:00:39.312
which is you're always testing
software one way or the other, right?

12
00:00:39.312 --> 00:00:44.295
Either you are testing it or
your users are testing it, right?

13
00:00:44.295 --> 00:00:47.773
In production, paging you at night or
whatever, filing bug reports and

14
00:00:47.773 --> 00:00:51.934
making your life hard, or you're testing
it and you're either doing it manually, or

15
00:00:51.934 --> 00:00:55.888
you've got some kind of automated system
to make sure everything works, right?

16
00:00:55.888 --> 00:00:56.392
And so,

17
00:00:56.392 --> 00:01:00.721
our goal is to get to that automated
system that makes stuff work right?

18
00:01:00.721 --> 00:01:04.012
And some of that involves
the actual writing of tests.

19
00:01:04.012 --> 00:01:07.671
Some of that involves how do we
think about our code in a way

20
00:01:07.671 --> 00:01:09.589
that makes it easier to test?

21
00:01:09.589 --> 00:01:12.254
Because sometimes if a piece
of code is hard to test,

22
00:01:12.254 --> 00:01:15.420
it's not necessarily that you
need to get better at testing.

23
00:01:15.420 --> 00:01:17.527
It is maybe that you need to
start pulling apart the code.

24
00:01:17.527 --> 00:01:22.467
So there are two pieces of this and I kind
of want to make sure we think about both

25
00:01:22.467 --> 00:01:26.191
of them equally,
cuz the answer to making easy to test code

26
00:01:26.191 --> 00:01:30.547
is somewhere kind of balancing
those two different pieces as well.

27
00:01:30.547 --> 00:01:35.707
So in this course, we're going to
definitely write tests, of course.

28
00:01:35.707 --> 00:01:39.434
We're going to look at how to make some
code that already exists a little bit

29
00:01:39.434 --> 00:01:40.567
easier to test right?

30
00:01:40.567 --> 00:01:43.278
In some cases, we will write some
tests and then we'll go back,

31
00:01:43.278 --> 00:01:46.796
change the code and see ways that we could
have made our life simpler after the fact,

32
00:01:46.796 --> 00:01:48.269
which is always very validating.

33
00:01:48.269 --> 00:01:51.413
And then sometimes we're gonna look at
how to test code that's hard to test.

34
00:01:51.413 --> 00:01:55.022
Because in a lot of cases, yes, you could
learn how to write the most testable code

35
00:01:55.022 --> 00:01:57.922
in the world, but you're not
always testing your code, right?

36
00:01:57.922 --> 00:02:01.428
There's sometimes where it's just code
you inherited sometimes it's a library.

37
00:02:01.428 --> 00:02:05.075
Sometimes it's the worst developer
that we all despise the most,

38
00:02:05.075 --> 00:02:07.169
which is us three months ago, right?

39
00:02:07.169 --> 00:02:11.999
Not that any of us would ever do that, but
yeah, so as we kind of jump into this,

40
00:02:11.999 --> 00:02:15.460
what are the prerequisites and
what do you need to know?

41
00:02:15.460 --> 00:02:20.024
I am not going to assume that you've ever
written a test before in your life, right?

42
00:02:20.024 --> 00:02:21.961
If you have that's probably helpful.

43
00:02:21.961 --> 00:02:26.876
I'm not going to assume that you are
familiar with any particular framework,

44
00:02:26.876 --> 00:02:30.449
just to make a point,
there are some react components and

45
00:02:30.449 --> 00:02:32.700
there are some Svelte components.

46
00:02:32.700 --> 00:02:36.486
But we are mostly focusing
on the testing piece.

47
00:02:36.486 --> 00:02:40.017
We'll look at how to test those things,
because, generally speaking, it is not.

48
00:02:40.017 --> 00:02:44.839
Uncommon that you might find one of
these frameworks in your day-to-day life

49
00:02:44.839 --> 00:02:45.651
yes, Mark?

50
00:02:45.651 --> 00:02:49.769
&gt;&gt; Mark: At what point in your
journey of learning to program

51
00:02:49.769 --> 00:02:53.709
would you say now is the time
to focus on testing?

52
00:02:53.709 --> 00:02:57.139
&gt;&gt; Steve Kinney: I would say like about
the time that you can kind of get one or

53
00:02:57.139 --> 00:02:59.461
two functions up and running, right?

54
00:02:59.461 --> 00:03:04.396
Like the longer you put it off, the larger
mess you have to go clean up, right?

55
00:03:04.396 --> 00:03:08.987
So I think there is nothing
particularly difficult about testing.

56
00:03:08.987 --> 00:03:12.337
That means if you can JavaScript,
if you can get a script and

57
00:03:12.337 --> 00:03:16.491
you see something in the terminal or
on the page, we're probably at a good

58
00:03:16.491 --> 00:03:20.116
enough place to start talking
about the testing piece, right?

59
00:03:20.116 --> 00:03:24.065
There is always depending on how big
the thing you're working on is, right?

60
00:03:24.065 --> 00:03:26.777
If it's just one little script,
sometimes, you know what?

61
00:03:26.777 --> 00:03:29.501
Staring at those console logs
is probably good enough, right?

62
00:03:29.501 --> 00:03:33.634
But generally speaking, the point where
you know that you need tests, and

63
00:03:33.634 --> 00:03:34.486
by that point,

64
00:03:34.486 --> 00:03:38.837
knowing how to test is probably, you
probably need to learn that beforehand.

65
00:03:38.837 --> 00:03:43.215
The moment you know you need to test is
when you get that piece of existential

66
00:03:43.215 --> 00:03:44.479
dread in your heart.

67
00:03:44.479 --> 00:03:48.444
When you go to change a piece of code and
you do not know what else you are going to

68
00:03:48.444 --> 00:03:51.442
break or what regressions
you're introducing, right?

69
00:03:51.442 --> 00:03:55.003
The sole goal of testing is I'll
make the point on another slide,

70
00:03:55.003 --> 00:03:58.176
and then I'll act like it's
the first time I've ever seen

71
00:03:58.176 --> 00:04:01.107
it is to take that fear when
you change existing code.

72
00:04:01.107 --> 00:04:04.936
And try to minimize it as much as possible
to the point where you feel confident as

73
00:04:04.936 --> 00:04:06.324
much as you can in software.

74
00:04:06.324 --> 00:04:09.278
I'm always surprised by
edge cases sometimes.

75
00:04:09.278 --> 00:04:11.733
But to get to the point where
you can go ahead, change code,

76
00:04:11.733 --> 00:04:15.027
and feel mostly confident that you didn't
mess something else up as you tried to

77
00:04:15.027 --> 00:04:16.027
fix the initial thing.

78
00:04:16.027 --> 00:04:19.900
That is like the bar
that we seek to reach.

79
00:04:19.900 --> 00:04:21.794
And we'll make some jokes
about that in a little bit.

80
00:04:21.794 --> 00:04:26.438
But that is effectively the kind of why
do we test so that we can sleep at night,

81
00:04:26.438 --> 00:04:26.945
right?

82
00:04:26.945 --> 00:04:31.173
Why do we test so that we can open up a PR
and not worry that all of our co-workers

83
00:04:31.173 --> 00:04:34.643
are gonna hate us in a week cuz
we took down production, right?

84
00:04:34.643 --> 00:04:36.664
That is the ultimate goal.

85
00:04:36.664 --> 00:04:41.606
Every other perfectionist tendency in your
body needs to chill out for a second.

86
00:04:41.606 --> 00:04:42.917
That is where we seek to go.

87
00:04:42.917 --> 00:04:47.922
And so to answer Mark's question from
earlier, or I assume the chat's question,

88
00:04:47.922 --> 00:04:52.352
the moment that you feel anxiety that
there are too many things going on for

89
00:04:52.352 --> 00:04:54.157
me to hold them all in my head.

90
00:04:54.157 --> 00:04:58.421
And I'd like something to automatically
kick all of the tires on this application,

91
00:04:58.421 --> 00:05:02.506
make sure I didn't break anything that's
the moment that testing becomes super

92
00:05:02.506 --> 00:05:03.301
useful right?

93
00:05:03.301 --> 00:05:08.790
And we will talk a little bit about
the idea of test-driven development right?

94
00:05:08.790 --> 00:05:11.343
This idea that you write the tests first.

95
00:05:11.343 --> 00:05:14.409
And that kind of goes to the previous
slide we talked about before,

96
00:05:14.409 --> 00:05:16.337
which is that writing tests isn't hard.

97
00:05:16.337 --> 00:05:18.315
Testing hard-to-test code is hard.

98
00:05:18.315 --> 00:05:22.033
The idea when we talk about test
development when we look at it is that,

99
00:05:22.033 --> 00:05:24.364
if you write the test first and
make it pass,

100
00:05:24.364 --> 00:05:27.789
it is very hard to have written
code that is hard to test, right?

101
00:05:27.789 --> 00:05:31.860
And sometimes in that, trying to
figure out a solution, saying, hey,

102
00:05:31.860 --> 00:05:34.484
I would like this very
simple thing to be true.

103
00:05:34.484 --> 00:05:36.173
Cool, move on to the next step.

104
00:05:36.173 --> 00:05:39.211
Like we were talking about
in the introduction,

105
00:05:39.211 --> 00:05:43.670
that little dopamine hit as you go
kinda along of red, now it's green.

106
00:05:43.670 --> 00:05:46.918
Now, I do the next thing and
it's not working, now it's working.

107
00:05:46.918 --> 00:05:51.251
Those things I think help as we even try
to think about and rationalize our code.

108
00:05:51.251 --> 00:05:55.067
So I would say the moment that
you can do some basic JavaScript,

109
00:05:55.067 --> 00:05:59.459
it is probably a good time to learn how
to test because all you're doing is

110
00:05:59.459 --> 00:06:04.003
automatically validating that your
code works the way you think it works.

111
00:06:04.003 --> 00:06:08.624
And the moment that it's taking more time
to constantly check over and over and

112
00:06:08.624 --> 00:06:12.136
over again than it's worth,
it's time to start testing.

113
00:06:12.136 --> 00:06:15.953
Cool and we'll talk about what we're
going to do today, all that other stuff.

114
00:06:15.953 --> 00:06:18.049
But first, I want to take a moment and

115
00:06:18.049 --> 00:06:21.715
just look at the world's simplest
test to kind of make my point.

116
00:06:21.715 --> 00:06:26.438
This is a test this has all
the components of a test in it, right?

117
00:06:26.438 --> 00:06:30.245
Which at the end of the day,
our tests are just JavaScript, right?

118
00:06:30.245 --> 00:06:33.104
To go to that previous point
of if you know JavaScript,

119
00:06:33.104 --> 00:06:37.716
you can probably tackle testing, which is
we've got this function, it's called it.

120
00:06:37.716 --> 00:06:42.392
You can also call it test it takes
a string that describes what it is.

121
00:06:42.392 --> 00:06:48.195
And then there's a function where you just
make some statements about the world,

122
00:06:48.195 --> 00:06:48.792
right?

123
00:06:48.792 --> 00:06:54.202
This one will almost always pass can't
think of a world where it won't.

124
00:06:54.202 --> 00:06:59.148
But that is the core function of a test
now, obviously, this isn't doing much.

125
00:06:59.148 --> 00:07:01.948
And so slowly we begin to build it up,
right?

126
00:07:01.948 --> 00:07:03.818
Which is, we could write a function,

127
00:07:03.818 --> 00:07:07.103
we could hope that the results of
that function are what we expect.

128
00:07:07.103 --> 00:07:08.984
And this is a super simple test, but

129
00:07:08.984 --> 00:07:12.885
those super simple things are sometimes
the things that we miss, right?

130
00:07:12.885 --> 00:07:16.105
And so we can validate that if we're
changing the way that addition works for

131
00:07:16.105 --> 00:07:17.071
some reason, right?

132
00:07:17.071 --> 00:07:19.420
Or, let's say we had
a multiplication function.

133
00:07:19.420 --> 00:07:22.339
At first it's just using the
multiplication symbol, but then we wanna

134
00:07:22.339 --> 00:07:25.272
get really fancy and just recursively
call, add that number of times.

135
00:07:25.272 --> 00:07:27.266
We can verify that all these things work.

136
00:07:27.266 --> 00:07:30.902
And that's all we're really doing as
a test, is we have got a test run that

137
00:07:30.902 --> 00:07:34.025
goes through, takes all these statements,
runs all of them.

138
00:07:34.025 --> 00:07:36.814
And makes sure that everything
the world works the way we

139
00:07:36.814 --> 00:07:39.320
think everything the world should work,
right?

140
00:07:39.320 --> 00:07:42.130
And that is all our tests
are doing at the end of the day.

141
00:07:42.130 --> 00:07:45.600
And so, like I said before, the end goal
of testing is to get rid of that fear.

142
00:07:45.600 --> 00:07:47.058
It's not about a 100
percent test coverage.

143
00:07:47.058 --> 00:07:50.197
It's not about any kind of badge of honor.

144
00:07:50.197 --> 00:07:52.716
It is simply to feel confident
with your own code and

145
00:07:52.716 --> 00:07:56.831
the fact that you can change it and know
that you probably didn't break something.

