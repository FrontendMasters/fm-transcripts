WEBVTT

1
00:00:00.000 --> 00:00:03.226
&gt;&gt; Steve Kinney: Turns out front end
engineers tend to do stuff in the web

2
00:00:03.226 --> 00:00:05.340
browser, I've heard it happens.

3
00:00:05.340 --> 00:00:08.813
There are some things about testing the
DOM that we have to think about in terms

4
00:00:08.813 --> 00:00:10.745
of everything we've talked about so far.

5
00:00:10.745 --> 00:00:14.130
One, your tests don't run in the browser,
yet,

6
00:00:14.130 --> 00:00:18.009
they we'll deal with that,
this moment, they don't.

7
00:00:18.009 --> 00:00:19.960
Your tests run in Node.

8
00:00:19.960 --> 00:00:23.134
Node runs JavaScript that is true, but

9
00:00:23.134 --> 00:00:27.181
it doesn't have any of the browser APIs,
right.

10
00:00:27.181 --> 00:00:30.905
Has some of them, I'm not gonna get into
the difference between the behavior object

11
00:00:30.905 --> 00:00:33.998
model and the document object model and
where actually console log and

12
00:00:33.998 --> 00:00:36.530
settimeout live in the JavaScript spec,
nobody cares.

13
00:00:36.530 --> 00:00:40.397
Important part is you don't have access,
there is no DOM in node.

14
00:00:40.397 --> 00:00:44.933
Right, it's not a browser,
there's no browser APIs, ish.

15
00:00:44.933 --> 00:00:48.786
Turns out the DOM is one of those APIs,
this means the node doesn't have the DOM,

16
00:00:48.786 --> 00:00:51.009
which means you can't
test the DOM from node.

17
00:00:55.187 --> 00:00:57.616
&gt;&gt; Steve Kinney: Do it anyway, by lying.

18
00:01:00.416 --> 00:01:03.810
&gt;&gt; Steve Kinney: So
there are a few different libraries.

19
00:01:03.810 --> 00:01:06.475
If you use Jest, JSDOM is built in.

20
00:01:06.475 --> 00:01:10.268
If you use Vitest, you have the choice
between two, because why not?

21
00:01:10.268 --> 00:01:13.500
JSDOM and HappyDOM.

22
00:01:13.500 --> 00:01:19.814
JSDOM, in the earlier days,
a fellow named Dominic DiCola

23
00:01:19.814 --> 00:01:25.130
re-implemented the DOM in JavaScript,
right?

24
00:01:25.130 --> 00:01:26.571
The entire DOM spec in JavaScript,

25
00:01:26.571 --> 00:01:28.740
I think it's a larger
community thing at this point.

26
00:01:28.740 --> 00:01:33.474
But it's basically adds back
in all of those browser

27
00:01:33.474 --> 00:01:36.493
APIs into the node environment.

28
00:01:36.493 --> 00:01:40.836
So you have stuff like
document.queryselector, document, window,

29
00:01:40.836 --> 00:01:43.337
all of those fun things that are not node.

30
00:01:43.337 --> 00:01:46.650
It puts in spec compliant replacements for
those.

31
00:01:46.650 --> 00:01:48.943
You have a choice between two of them,

32
00:01:48.943 --> 00:01:51.963
I don't really care which
one you pick honestly.

33
00:01:51.963 --> 00:01:56.399
I'm gonna be honest with you,
I pick HappyDOM cuz of the name.

34
00:01:56.399 --> 00:02:01.333
It is the smaller, lightweight one but
what makes JSDOM, the bigger,

35
00:02:01.333 --> 00:02:05.456
heavier one is that it's
probably more accurate, right?

36
00:02:05.456 --> 00:02:09.138
So for most things, if you're just
putting some DOM nodes on a document and

37
00:02:09.138 --> 00:02:11.895
seeing if they're there,
HappyDOM will do the trick.

38
00:02:11.895 --> 00:02:16.923
If you run into weird edge cases,
the bigger heavier JSDOM works.

39
00:02:16.923 --> 00:02:18.242
Honestly, I don't care which one you use.

40
00:02:18.242 --> 00:02:20.561
I pick HappyDOM cuz I like the name,
right?

41
00:02:20.561 --> 00:02:24.567
Things to keep in mind is that
it's not a real browser, so

42
00:02:24.567 --> 00:02:29.490
you're not gonna catch stuff like
the nuances of, let's be honest,

43
00:02:29.490 --> 00:02:34.678
Safari, or Firefox or whatever,
is simply a compliant version of that.

44
00:02:34.678 --> 00:02:38.613
And also, I have a few workshops
on performance, where my rule

45
00:02:38.613 --> 00:02:43.231
about performance is not doing stuff
is faster than doing stuff, right?

46
00:02:43.231 --> 00:02:48.473
So, yes, you can bring in this entire
simulation of the DOM that is doing more

47
00:02:48.473 --> 00:02:53.408
stuff than not doing stuff,
thereby your test will be slightly slower.

48
00:02:53.408 --> 00:02:54.961
Ask me, how much slower?

49
00:02:54.961 --> 00:02:59.707
Honestly, imperceptibly.

50
00:02:59.707 --> 00:03:03.195
Cuz if your test suite does take forever
to run you are gonna run it less.

51
00:03:03.195 --> 00:03:06.854
Also, we all know,
you open up that PR and you sit there and

52
00:03:06.854 --> 00:03:10.976
you stare at it until all those
statuses turn green, don't you?

53
00:03:10.976 --> 00:03:15.047
You do wait for it, you don't do
anything until all those tests pass,

54
00:03:15.047 --> 00:03:16.637
you just watch it, me too.

55
00:03:16.637 --> 00:03:20.707
So yeah, you might still run into browser
specific issues, it's not a browser.

56
00:03:20.707 --> 00:03:26.002
But it is really good for, hey, I've got
this piece of code that modifies the DOM.

57
00:03:26.002 --> 00:03:30.096
Because like I said earlier,
can you fire up an entire browser and

58
00:03:30.096 --> 00:03:31.815
use that to test your code?

59
00:03:31.815 --> 00:03:37.039
You can, but on that same principle,
do you know what takes a really long time?

60
00:03:37.039 --> 00:03:42.020
Firing up an entire browser,
loading up the entire page,

61
00:03:42.020 --> 00:03:47.221
and go ahead and just to see if,
one string changed, right?

62
00:03:47.221 --> 00:03:51.615
And so this is a really great strategy for
that uncanny valley of it's not

63
00:03:51.615 --> 00:03:55.590
just a function that takes two numbers or
string and modifies it.

64
00:03:55.590 --> 00:04:01.998
But I don't necessarily wanna whip up the
entire app in a browser and test it right?

65
00:04:01.998 --> 00:04:07.528
So great for, I wanna grab one component,
or I wanna check for one event listener,

66
00:04:07.528 --> 00:04:11.641
or something along those lines,
works really well for that.

67
00:04:11.641 --> 00:04:13.955
I will show you this in the code, but

68
00:04:13.955 --> 00:04:16.975
there is basically one
small tweak in vitest.

69
00:04:16.975 --> 00:04:21.884
I think it is just built in for free and
just, but I'd have to remember.

70
00:04:21.884 --> 00:04:24.611
This is what it looks like in vitest, and

71
00:04:24.611 --> 00:04:29.103
there's actually a few more things
to talk about here, which is so

72
00:04:29.103 --> 00:04:33.940
that environment happy-dom,
by default, the environment is node.

73
00:04:33.940 --> 00:04:39.587
If you change that string to from
environment node to environment happy-dom,

74
00:04:39.587 --> 00:04:40.522
guess what?

75
00:04:40.522 --> 00:04:43.873
You now have loaded in with
all your tests, happy-dom.

76
00:04:43.873 --> 00:04:47.815
If you change it to JSDOM,
guess what you have now, JSDOM.

77
00:04:47.815 --> 00:04:52.600
There's also test setup files,
we'll talk about that one later.

78
00:04:52.600 --> 00:04:57.937
The other one is globals which is out
of the box in vitest, but not in jest.

79
00:04:57.937 --> 00:05:01.397
You have to import describe expect and
it from vitest and jest,

80
00:05:01.397 --> 00:05:03.170
they're globally available.

81
00:05:03.170 --> 00:05:05.060
This just makes vitest more like jest.

82
00:05:05.060 --> 00:05:07.286
I turned it on from
most of our examples so

83
00:05:07.286 --> 00:05:10.244
that you didn't have to
think about the difference.

84
00:05:10.244 --> 00:05:13.493
So these are just some configurations
that we can do as well, but

85
00:05:13.493 --> 00:05:15.248
let's actually see it in action.

