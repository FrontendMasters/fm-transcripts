WEBVTT

1
00:00:00.320 --> 00:00:05.193
&gt;&gt; Steve Kinney: Your mission is
to kind of see roughly how many

2
00:00:05.193 --> 00:00:08.750
of these you can get through.

3
00:00:08.750 --> 00:00:11.870
I'll remind you that we've got
this user event here as well.

4
00:00:11.870 --> 00:00:16.899
Just remember if you're using user event,
they've got to be async/await, right?

5
00:00:16.899 --> 00:00:23.346
But try your hand and if one feels like
a stopping point, I give up on it and

6
00:00:23.346 --> 00:00:29.512
try a few out and let's see,
where pain was felt, where it was easy.

7
00:00:29.512 --> 00:00:31.573
And we'll kind of talk
about it as a group and

8
00:00:31.573 --> 00:00:35.054
then we'll dig into the parts where
it hurt and clarify those up, right?

9
00:00:35.054 --> 00:00:36.922
Again, this is your first time doing this.

10
00:00:36.922 --> 00:00:40.513
No pressure, but we wanna figure out
where thes sticking points were, and

11
00:00:40.513 --> 00:00:42.565
then we'll kind of hyper-target those,

12
00:00:42.565 --> 00:00:45.363
then me expounding greatly in
all these little examples.

13
00:00:51.063 --> 00:00:54.523
We got a few ones that will
be straightforward, and

14
00:00:54.523 --> 00:00:59.225
some might present some
interesting challenges to us.

15
00:00:59.225 --> 00:01:04.369
Were there any, let's start with an easy
one and then I'll kinda pose the question,

16
00:01:04.369 --> 00:01:08.086
if there's any that were of
particular interest as well, but

17
00:01:08.086 --> 00:01:13.175
let's start with one that is not too
dissimilar from what we had previously.

18
00:01:13.175 --> 00:01:18.595
It displays days plural
when the count is zero.

19
00:01:18.595 --> 00:01:21.612
So one thing I can do,

20
00:01:21.612 --> 00:01:26.811
is I was smart enough to make just that

21
00:01:26.811 --> 00:01:31.862
word wrapped in a test ID go past me.

22
00:01:34.262 --> 00:01:41.052
So give me a suggestion in that case,
it says get by text days, that works.

23
00:01:42.422 --> 00:01:46.050
In this situation, you could see
a world where that becomes problematic,

24
00:01:46.050 --> 00:01:47.502
though, right?

25
00:01:47.502 --> 00:01:51.722
That's a pretty generic one,
I'm gonna go with my Test ID in this case.

26
00:01:51.722 --> 00:01:55.432
It is saying that because this
is the only element on the page.

27
00:01:55.432 --> 00:01:58.813
But you could also see a world where
the word days appears more than once

28
00:01:58.813 --> 00:02:00.097
on a page.

29
00:02:00.097 --> 00:02:05.997
So, I am gonna go with
the counter unit that I created.

30
00:02:05.997 --> 00:02:08.597
Thank you for the suggestion,
testing playground.

31
00:02:08.597 --> 00:02:14.771
I will respectfully ignore you,
&gt;&gt; Steve Kinney: Cool,

32
00:02:14.771 --> 00:02:19.144
so we've mounted on the page, so I can do,

33
00:02:19.144 --> 00:02:23.527
in this case is const unit, I don't know.

34
00:02:32.368 --> 00:02:39.049
&gt;&gt; Steve Kinney: And
we can say that we expect that unit.

35
00:02:42.324 --> 00:02:46.570
&gt;&gt; Steve Kinney: Do I have text content,
days, plural, all right,

36
00:02:46.570 --> 00:02:49.353
three paths in this case.

37
00:02:49.353 --> 00:02:54.321
All right, let's try this one
because this is the first time we're

38
00:02:54.321 --> 00:02:57.473
going to like interact
at all with the DOM.

39
00:03:00.742 --> 00:03:03.102
Any other fun ones before we do that?

40
00:03:03.102 --> 00:03:08.742
No, I mean, we could do these,
but let's do this next one.

41
00:03:08.742 --> 00:03:12.778
Cool, cool, want to increment when
the increment button is clicked, so

42
00:03:12.778 --> 00:03:14.372
what are we gonna need?

43
00:03:14.372 --> 00:03:19.401
We're gonna need the increment button,

44
00:03:19.401 --> 00:03:22.568
and so we can go ahead say.

45
00:03:24.570 --> 00:03:29.284
&gt;&gt; Steve Kinney: And this is where you
could set up some stuff in the before each

46
00:03:29.284 --> 00:03:33.365
to make it easy to grab these things,
I don't know.

47
00:03:33.365 --> 00:03:37.919
Generally speaking, every time I have
gotten particularly clever with my code in

48
00:03:37.919 --> 00:03:39.573
my task, I tend to regret it.

49
00:03:39.573 --> 00:03:40.503
Because, again,

50
00:03:40.503 --> 00:03:44.223
if you think about the use case in which
you are looking at these tests after,

51
00:03:44.223 --> 00:03:49.203
like, when you're writing them, sure,
sure, sure you're looking at them, right?

52
00:03:49.203 --> 00:03:52.230
When the next time you're gonna look
at this test is after you write it,

53
00:03:52.230 --> 00:03:54.063
when it's broken.

54
00:03:54.063 --> 00:03:58.351
And sometimes it's kind of nice just
to have everything in one place, right?

55
00:03:58.351 --> 00:04:02.129
For instance, we might, just choose to
do this in each one of the tests,cuz

56
00:04:02.129 --> 00:04:06.752
then it's very clear what component we're
looking at, everything along those lines.

57
00:04:06.752 --> 00:04:10.356
That is really kind of at your discretion
thing, but what I don't want you to do is

58
00:04:10.356 --> 00:04:14.392
just be like, well, HESCO in the before
each because Steve put it there one time.

59
00:04:14.392 --> 00:04:19.288
Steve's not even totally confident,
everything's got trade offs, life is hard,

60
00:04:19.288 --> 00:04:23.572
everything that was easy and definitely
had a rule was either pushed down to

61
00:04:23.572 --> 00:04:28.209
the compiler or the framework, you're
left with all of the weird trade-offs.

62
00:04:28.209 --> 00:04:29.169
What can it be in an engineer?

63
00:04:30.599 --> 00:04:35.762
Screen, get by role, button,

64
00:04:35.762 --> 00:04:41.701
and there was this one with the name.

65
00:04:46.161 --> 00:04:46.686
&gt;&gt; Steve Kinney: Again,

66
00:04:46.686 --> 00:04:51.117
this will find case insensitive,
you will see that in all of the docs.

67
00:04:51.117 --> 00:04:52.723
I'll be honest with you,

68
00:04:52.723 --> 00:04:56.730
a lot of times I tend to just
put the actual string in there.

69
00:04:56.730 --> 00:05:04.518
But you will know which one you come
to regret more over time, cool.

70
00:05:04.518 --> 00:05:08.888
So we've got that, increments
the count when the button is clicked.

71
00:05:08.888 --> 00:05:15.615
So I'm also gonna need that
count that we had before.

72
00:05:19.689 --> 00:05:23.631
&gt;&gt; Steve Kinney: So we've got that, and so
what we could do now is say, await, and

73
00:05:23.631 --> 00:05:27.232
this might not work, and
we'll talk about why in a second.

74
00:05:34.143 --> 00:05:38.976
&gt;&gt; Steve Kinney: User event,
click the increment button,

75
00:05:38.976 --> 00:05:43.144
and now we can expect that the counter

76
00:05:47.317 --> 00:05:49.950
&gt;&gt; Steve Kinney: To have text content one,

77
00:05:52.124 --> 00:05:53.715
&gt;&gt; Steve Kinney: All right,

78
00:05:53.715 --> 00:05:58.330
this one passes, I am going to talk

79
00:05:58.330 --> 00:06:03.423
about a case where it might not pass and

80
00:06:03.423 --> 00:06:09.344
why, which is, time is hard, right?

81
00:06:09.344 --> 00:06:13.104
There are this one because we're just
like, literally changing some state.

82
00:06:13.104 --> 00:06:18.026
It was fast enough that it works,
but let's say, for instance,

83
00:06:18.026 --> 00:06:21.173
you were implementing a search, right?

84
00:06:21.173 --> 00:06:25.773
Where person types something
in they hit the submit button.

85
00:06:25.773 --> 00:06:28.273
It's almost like we have an example
of this coming up later, don't worry.

86
00:06:28.273 --> 00:06:32.459
They hit the submit button,
and it sends a API request,

87
00:06:32.459 --> 00:06:38.333
getting the search results back, and
it renders it on the page, right?

88
00:06:38.333 --> 00:06:40.833
It's not a search box,
it's a different box, but it's fine.

89
00:06:40.833 --> 00:06:46.080
What could happen in this test is that
it goes to check to see if those,

90
00:06:46.080 --> 00:06:51.967
like search results are on the page
before anything has been rendered right?

91
00:06:51.967 --> 00:06:55.847
Which is usually just a problem when
you're using some kind of framework

92
00:06:55.847 --> 00:06:58.581
that is going to try to,
like, wait for changes and

93
00:06:58.581 --> 00:07:01.610
then figure out and
reconcile how to update the DOM.

94
00:07:01.610 --> 00:07:05.090
If you are directly updating the DOM
real fast, everything's fine.

95
00:07:05.090 --> 00:07:10.556
But if you are theoretically using
some kind of framework, you might end

96
00:07:10.556 --> 00:07:16.880
up in the situation where you've got to
wait for the DOM to re-render, right?

97
00:07:16.880 --> 00:07:21.208
And so this one works, but I'm gonna
show you what to do if it doesn't,

98
00:07:21.208 --> 00:07:24.468
which is for
all of the various framework libraries.

99
00:07:24.468 --> 00:07:29.018
There is this other one called act, which
again, if you remember the three parts of

100
00:07:29.018 --> 00:07:34.125
our test, the arrange, the act, also known
as the word I forgot earlier, and assert.

101
00:07:34.125 --> 00:07:39.347
This is basically do all these things and
then wait for a re-render.

102
00:07:39.347 --> 00:07:41.577
And then you can go look for
things on the page, and

103
00:07:41.577 --> 00:07:44.941
there's some other ways we can handle
this in a moment that I'll show you.

104
00:07:44.941 --> 00:07:51.461
So you could theoretically say, and
that will take an async function too.

105
00:07:59.201 --> 00:08:03.126
So basically we say, do all these things,
wait for the dom to reconcile and

106
00:08:03.126 --> 00:08:06.796
then go see if the DOM changed
the way that we wanted it to.

107
00:08:06.796 --> 00:08:09.413
Again, this is more useful for
things that might take a second and

108
00:08:09.413 --> 00:08:11.076
have more than one cycle to them.

109
00:08:11.076 --> 00:08:13.832
Okay, we had to go hit an API and
render it on the page, so

110
00:08:13.832 --> 00:08:17.298
if you find yourself like, hey,
I stopped watching the course now and

111
00:08:17.298 --> 00:08:20.455
immediately jumped into my app
to start writing some of these.

112
00:08:20.455 --> 00:08:21.912
And then you hit brick wall,

113
00:08:21.912 --> 00:08:24.906
this is more than likely
the first brick wall that you hit.

114
00:08:24.906 --> 00:08:29.818
And so if you get those problems where
timing is hard, this will go ahead,

115
00:08:29.818 --> 00:08:34.494
wait for everything to re-render at
a steady state after the number of

116
00:08:34.494 --> 00:08:38.878
things you do in here, and
then you will continue along your way.

117
00:08:38.878 --> 00:08:42.814
In this case, it works either way, which
is a good opportunity shows you rather

118
00:08:42.814 --> 00:08:44.775
than letting you find out the hard way.

