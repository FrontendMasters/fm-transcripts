WEBVTT

1
00:00:00.200 --> 00:00:07.678
But we can start out with, it should,
&gt;&gt; Steve Kinney: Treat,

2
00:00:07.678 --> 00:00:11.280
do we wanna blow up?

3
00:00:11.280 --> 00:00:11.984
Yeah.
&gt;&gt; Female Student 1: If it

4
00:00:11.984 --> 00:00:13.110
concatenates things.

5
00:00:13.110 --> 00:00:15.200
But I mean, that's not how it's
supposed to work logically.

6
00:00:15.200 --> 00:00:16.660
&gt;&gt; Steve Kinney: You get
to decide how it works.

7
00:00:16.660 --> 00:00:18.060
How do you want it to work?

8
00:00:18.060 --> 00:00:20.051
&gt;&gt; Female Student 1: Key
concatenate two strings.

9
00:00:20.051 --> 00:00:21.836
&gt;&gt; Steve Kinney: Do we want it to?

10
00:00:21.836 --> 00:00:22.699
&gt;&gt; Female Student 1: Why not?
[LAUGH]

11
00:00:22.699 --> 00:00:23.293
&gt;&gt; Steve Kinney: Okay,

12
00:00:23.293 --> 00:00:25.276
is that mathematical?

13
00:00:25.276 --> 00:00:27.726
&gt;&gt; Female Student 1: No.
[LAUGH]

14
00:00:27.726 --> 00:00:28.817
&gt;&gt; Steve Kinney: Let's assume that it

15
00:00:28.817 --> 00:00:29.426
doesn't.

16
00:00:29.426 --> 00:00:33.006
Let's assume that we want ours to be
better than the built-in function, right?

17
00:00:33.006 --> 00:00:39.446
So let's say that it should parse
strings into numbers, right?

18
00:00:39.446 --> 00:00:39.946
Okay.

19
00:00:44.525 --> 00:00:47.382
&gt;&gt; Steve Kinney: Again, these are things
and if more of these ideas come up,

20
00:00:47.382 --> 00:00:50.275
let's just interject, and
we'll do them, right?

21
00:00:50.275 --> 00:00:54.312
Again, there's a lot of times where you
have a bug when you've got good test of

22
00:00:54.312 --> 00:00:57.695
code, is where you just didn't
think about something, right?

23
00:00:57.695 --> 00:01:00.563
And so that's flow of bug comes in,
you would write an additional test,

24
00:01:00.563 --> 00:01:01.737
you'd make it pass.

25
00:01:01.737 --> 00:01:03.737
So it should parse strings into numbers.

26
00:01:03.737 --> 00:01:06.487
And again, this code doesn't exist.

27
00:01:06.487 --> 00:01:09.909
So I start out with a statement of how
I would like the world to work, and

28
00:01:09.909 --> 00:01:12.857
then I will go ahead and
make the world like that.

29
00:01:12.857 --> 00:01:18.515
So we'll say 1 and 1 and I think if I
just did this in regular old JavaScript,

30
00:01:18.515 --> 00:01:21.300
I'd end up with 11, right?

31
00:01:21.300 --> 00:01:24.754
But I want this to be two, cuz maybe
these came from a query param where

32
00:01:24.754 --> 00:01:27.333
they're strings but
they are spiritual numbers.

33
00:01:27.333 --> 00:01:31.062
Or it came from an input field where it
was a string but I really wanted to be

34
00:01:31.062 --> 00:01:35.160
a number or somewhere, my API gives
it to me as a string and whatever.

35
00:01:35.160 --> 00:01:38.325
So we probably wanna have
that add function in there.

36
00:01:38.325 --> 00:01:44.272
That's what happens when you talk and
type at the same time.

37
00:01:44.272 --> 00:01:49.062
To be 2 and this is the nature of
that kind of red-green factor, right?

38
00:01:49.062 --> 00:01:49.972
Which it will fail.

39
00:01:49.972 --> 00:01:55.792
And if I scroll up now, we get our first
kind of useful error message, right?

40
00:01:55.792 --> 00:02:00.340
Which is, you expected 2, you received 11.

41
00:02:00.340 --> 00:02:02.240
That's not what you expected.

42
00:02:02.240 --> 00:02:04.930
Red sadness everywhere, right?

43
00:02:04.930 --> 00:02:10.338
So then what we can do now is
we could say something like,

44
00:02:10.338 --> 00:02:14.610
and you can be like,
I would refactor this.

45
00:02:14.610 --> 00:02:15.230
Good, you have tests.

46
00:02:15.230 --> 00:02:17.430
You can refactor it.

47
00:02:17.430 --> 00:02:22.647
If typeof a, can you tell I've
written TypeScript before?

48
00:02:22.647 --> 00:02:28.064
Then a is, no, cool, or what I should do,

49
00:02:28.064 --> 00:02:31.233
if I was a better person.

50
00:02:31.233 --> 00:02:35.807
So I'd save see my test still fails,

51
00:02:35.807 --> 00:02:39.947
but I haven't gotten there yet.

52
00:02:39.947 --> 00:02:41.442
We're still 11.

53
00:02:41.442 --> 00:02:45.968
If typeof b = `string`.

54
00:02:49.121 --> 00:02:49.713
&gt;&gt; Steve Kinney: b.

55
00:02:52.866 --> 00:02:55.772
&gt;&gt; Steve Kinney: And
my test passed again, yay.

56
00:02:57.632 --> 00:03:00.172
Where else can my addition
function go wrong?

57
00:03:00.172 --> 00:03:04.030
All right, cuz part of the practice here
is to just be paranoid about all the ways

58
00:03:04.030 --> 00:03:05.189
your code could break.

59
00:03:05.189 --> 00:03:07.639
What are other bad values
that we could get in here?

60
00:03:07.639 --> 00:03:12.481
We now know that if we take a string
of as a number that could possibly

61
00:03:12.481 --> 00:03:15.341
be turned into a number, we're good.

62
00:03:15.341 --> 00:03:17.623
&gt;&gt; Female Student 1: Well that
can't be turned into a number.

63
00:03:17.623 --> 00:03:19.469
&gt;&gt; Steve Kinney: All right,
let's do it, let's find out.

64
00:03:19.469 --> 00:03:23.705
And what do we want to happen if we throw
in the word potato as one of the numbers?

65
00:03:23.705 --> 00:03:25.831
&gt;&gt; Female Student 1: Tell us
I'm gonna give it a number.

66
00:03:25.831 --> 00:03:27.821
&gt;&gt; Steve Kinney: Okay, so
we wanna yell at the person.

67
00:03:27.821 --> 00:03:29.111
Okay, cool.

68
00:03:30.211 --> 00:03:34.512
It should get real angry,
&gt;&gt; Female Student 1: [LAUGH]

69
00:03:34.512 --> 00:03:37.475
&gt;&gt; Steve Kinney: If you give it a string

70
00:03:37.475 --> 00:03:42.585
that cannot be parsed into a number.

71
00:03:44.275 --> 00:03:46.827
These strengths are single quoted, so

72
00:03:46.827 --> 00:03:50.705
I will dance around using
apostrophes as much as possible.

73
00:03:51.995 --> 00:03:57.155
All right, and this is actually
like a segue way as they call it,

74
00:03:57.155 --> 00:04:00.388
so I think this is good, let's do it.

75
00:04:00.388 --> 00:04:05.598
If I add 2 and potato,
what do I want it to be?

76
00:04:05.598 --> 00:04:09.093
Well, I wanted to throw an error, but
I haven't told you how to do that yet.

77
00:04:09.093 --> 00:04:12.917
So, let's just see it fail for a second,
and then we'll talk about how to throw

78
00:04:12.917 --> 00:04:17.428
an error, cuz that's literally the next
thing we're gonna talk about anyway.

79
00:04:17.428 --> 00:04:19.552
We'll start out with that.

80
00:04:19.552 --> 00:04:24.858
And you can see that the test
fails because we got not a number.

81
00:04:24.858 --> 00:04:30.448
And what we really wanted was either 2 or
something else to happen, right?

82
00:04:30.448 --> 00:04:34.200
And so the request is that it blows up,

83
00:04:34.200 --> 00:04:38.668
because why did you pass it a potato,
right?

84
00:04:38.668 --> 00:04:41.213
So we need to know how to do that first.

85
00:04:41.213 --> 00:04:42.638
So what we wanna do is,

86
00:04:42.638 --> 00:04:47.678
we need to navigate the issue that I said
test fail if an error is thrown, right?

87
00:04:47.678 --> 00:04:52.591
So we could implement the ability to
throw an error, that's not gonna make my

88
00:04:52.591 --> 00:04:57.373
test pass, cuz an error would be
thrown and it wouldn't be caught.

89
00:04:57.373 --> 00:04:59.453
And even if I did my code perfectly,
my tests still fail.

90
00:04:59.453 --> 00:05:01.574
And this will be like, see,
testing is not for me.

91
00:05:01.574 --> 00:05:04.594
I'm just gonna check it out myself.

92
00:05:04.594 --> 00:05:06.144
No, we're not doing that.

93
00:05:06.144 --> 00:05:08.504
We're better than that.

94
00:05:08.504 --> 00:05:12.265
So we had this to be, and that was very
easy for our very simple ones, but

95
00:05:12.265 --> 00:05:17.182
what if we said,
&gt;&gt; Steve Kinney: What

96
00:05:17.182 --> 00:05:21.064
if we expected it to throw, right?

97
00:05:21.064 --> 00:05:25.216
There is one nuance that I need
to draw your attention to,

98
00:05:25.216 --> 00:05:29.898
which is just because of the nature
of the way JavaScript works.

99
00:05:31.018 --> 00:05:37.258
If this were to throw,
it would actually blow up the test, right?

100
00:05:37.258 --> 00:05:39.588
Because it's inside this test function,

101
00:05:39.588 --> 00:05:43.488
what we need to do is just wrap
it in an anonymous function.

102
00:05:43.488 --> 00:05:46.416
&gt;&gt; Steve Kinney: And maybe keep
the right number of parentheses.

103
00:05:48.006 --> 00:05:52.687
Right, so now effectively our test
suite is gonna get this function here,

104
00:05:52.687 --> 00:05:55.466
which is gonna call that function.

105
00:05:55.466 --> 00:05:58.967
And it's expecting that,
when it calls this function, right?

106
00:05:58.967 --> 00:06:00.076
That it will throw.

107
00:06:02.676 --> 00:06:06.177
And If we run the code,
we can see that it fails, why?

108
00:06:06.177 --> 00:06:11.174
Cuz it doesn't, right?

109
00:06:11.174 --> 00:06:14.329
Expected function to throw an error.

110
00:06:15.729 --> 00:06:17.919
And it doesn't throw an error,
so we're red.

111
00:06:17.919 --> 00:06:23.421
That's not necessarily a bad red, because
we haven't implemented that code yet.

112
00:06:23.421 --> 00:06:25.456
That is stealing ourselves for

113
00:06:25.456 --> 00:06:30.081
occasional test results because
we're working towards something.

114
00:06:31.141 --> 00:06:36.099
So now, if I go back to this,
here we have attempted to

115
00:06:36.099 --> 00:06:41.411
take strings and
turn them into numbers, right?

116
00:06:41.411 --> 00:06:46.502
And so there's a chance that even
after that attempt to do that,

117
00:06:46.502 --> 00:06:49.914
one of them ends up as not a number,
right?

118
00:06:49.914 --> 00:06:50.884
In the case of potato.

119
00:06:52.424 --> 00:06:56.782
So in that case, we can say.

120
00:06:56.782 --> 00:07:00.176
&gt;&gt; Steve Kinney: If,

121
00:07:14.884 --> 00:07:19.404
&gt;&gt; Steve Kinney: Second argument is
not a number and our tests pass.

122
00:07:19.404 --> 00:07:26.154
But this is where we've got to
train that thought process again,

123
00:07:26.154 --> 00:07:30.337
which is, where's the gap in my logic?

124
00:07:31.847 --> 00:07:34.517
I say, if b is NaN, throw an error.

125
00:07:34.517 --> 00:07:38.031
What could technically
still be garbage input?

126
00:07:40.743 --> 00:07:43.631
&gt;&gt; Steve Kinney: A, [LAUGH] right?

127
00:07:43.631 --> 00:07:46.240
There is a practice in pair programming,

128
00:07:46.240 --> 00:07:50.401
which I refuse to do because
I'm an introvert, right?

129
00:07:50.401 --> 00:07:55.631
Where the game is,
one person writes a test, right?

130
00:07:55.631 --> 00:07:59.473
The other person then goes to
write the most ridiculous,

131
00:07:59.473 --> 00:08:04.131
naive implementation that would
get the test to pass, right?

132
00:08:04.131 --> 00:08:10.631
And so, let's say we only
had this first test, right?

133
00:08:10.631 --> 00:08:14.184
The implementer,
the person playing the game with you,

134
00:08:14.184 --> 00:08:17.969
might just have a function that
returns four no matter what.

135
00:08:17.969 --> 00:08:20.069
And your test would pass.

136
00:08:20.069 --> 00:08:25.189
And so then the game,
the other player then writes another test.

137
00:08:25.189 --> 00:08:28.010
Well then, three plus two is five, right?

138
00:08:28.010 --> 00:08:29.949
To make it fail again.

139
00:08:29.949 --> 00:08:34.863
And the goal is that you should end
up with really well tested code, or

140
00:08:34.863 --> 00:08:38.179
a new enemy,
a new arch nemesis at some point.

141
00:08:39.308 --> 00:08:43.218
So, this is thing, we solved one case.

142
00:08:43.218 --> 00:08:46.289
But then there's a part that's not really
about writing code in any way, shape or

143
00:08:46.289 --> 00:08:46.878
form, right?

144
00:08:46.878 --> 00:08:49.836
Which is to simply stare at the code and

145
00:08:49.836 --> 00:08:55.088
perseverate on all the ways that
it can go poorly for you, right?

146
00:08:55.088 --> 00:08:56.384
So, yeah, like.

147
00:08:57.594 --> 00:08:58.285
&gt;&gt; Steve Kinney: Give it.

148
00:09:00.736 --> 00:09:04.123
&gt;&gt; Steve Kinney: a,
&gt;&gt; Steve Kinney: Second argument.

149
00:09:05.497 --> 00:09:09.816
&gt;&gt; Steve Kinney: And so
then we could theoretically go ahead.

150
00:09:09.816 --> 00:09:14.734
I'm gonna put this one beforehand because
I feel like that's how order works, and

151
00:09:14.734 --> 00:09:16.921
where we just switch the arguments.

152
00:09:19.470 --> 00:09:24.422
&gt;&gt; Steve Kinney: All right,
our tests fail.

153
00:09:24.422 --> 00:09:26.472
We go ahead and
we deal with that use case.

154
00:09:42.727 --> 00:09:47.470
&gt;&gt; Steve Kinney: And
the other thing we can do with that

155
00:09:47.470 --> 00:09:52.677
toThrow is, a test that is flaky is bad.

156
00:09:52.677 --> 00:09:56.307
A flaky test is one that fails randomly
for reasons you don't totally understand.

157
00:09:56.307 --> 00:09:58.267
Those are bad cuz what are you
gonna do when that happens?

158
00:09:59.737 --> 00:10:02.018
You're gonna turn it off, right?

159
00:10:02.018 --> 00:10:03.616
You know what's worse than that?

160
00:10:05.828 --> 00:10:08.908
&gt;&gt; Steve Kinney: A test that
passes when it shouldn't, right?

161
00:10:08.908 --> 00:10:12.228
And so, sure,
we're expecting this to throw, but

162
00:10:12.228 --> 00:10:15.478
this thing could blow up for
any number of reasons.

163
00:10:15.478 --> 00:10:20.433
I could make a typo and
this function would blow up, right?

164
00:10:20.433 --> 00:10:25.062
And so what we might wanna do is
make some expectations on, okay,

165
00:10:25.062 --> 00:10:28.393
what was the error message, right?

166
00:10:28.393 --> 00:10:31.805
So I could say,

167
00:10:34.989 --> 00:10:38.324
&gt;&gt; Steve Kinney: What's it angry about?

168
00:10:40.448 --> 00:10:45.608
&gt;&gt; Steve Kinney: When I decided to use
a period and not use a period, right?

169
00:10:45.608 --> 00:10:48.931
And so you can see, okay,
I expect this function

170
00:10:48.931 --> 00:10:53.248
to throw with the error that I
expect it to throw with, right?

171
00:10:53.248 --> 00:10:56.960
And now it's gonna be,
I expect this code to blow up and

172
00:10:56.960 --> 00:11:00.790
I expect it to blow up
with this error message.

173
00:11:00.790 --> 00:11:07.760
I forget if you have to use regex or
not, let's find out together, right?

174
00:11:07.760 --> 00:11:09.849
You can even just do
part of the string and

175
00:11:09.849 --> 00:11:12.070
it'll be I expected to have this that way.

176
00:11:12.070 --> 00:11:14.814
If it's like, you put the time in there,
or something like that,

177
00:11:14.814 --> 00:11:16.290
you don't really care about that.

178
00:11:16.290 --> 00:11:21.267
Or if there are other parts of that you
don't necessarily care about cuz yes

179
00:11:21.267 --> 00:11:26.007
having it match exactly that error
message is great until you decide you

180
00:11:26.007 --> 00:11:28.936
wanna change the error message, right?

181
00:11:28.936 --> 00:11:31.902
Or until you wanna include extra
information that could theoretically

182
00:11:31.902 --> 00:11:32.996
change so on and so forth.

183
00:11:32.996 --> 00:11:37.596
You wanna be like,
I would like to make sure that at

184
00:11:37.596 --> 00:11:40.893
least this part is in there as well.

185
00:11:42.844 --> 00:11:46.224
And start to build up all of these
places where things can go wrong.

186
00:11:46.224 --> 00:11:50.874
But now the nice part is over time,
again, simple code, very easy to see.

187
00:11:50.874 --> 00:11:54.434
But in a very, like a code base
has got hundreds of files, right?

188
00:11:54.434 --> 00:11:59.091
The idea that you can constantly hammer at
every edge case of any given function and

189
00:11:59.091 --> 00:12:01.078
know within seconds, right?

190
00:12:01.078 --> 00:12:04.088
Under a second, usually,
unless it's a really big test suite,

191
00:12:04.088 --> 00:12:07.878
that everything works the way you think
it does builds that confidence over time.

192
00:12:07.878 --> 00:12:13.148
You're like, I changed something,
4,000 tests ran in five seconds.

193
00:12:13.148 --> 00:12:14.348
Nothing blew up.

194
00:12:14.348 --> 00:12:16.842
That doesn't mean you
didn't make a mistake, but

195
00:12:16.842 --> 00:12:20.851
it just lowers the threshold of believing
that you made a mistake, right?

196
00:12:20.851 --> 00:12:25.555
And so there are a whole bunch of
other ways that these can go wrong,

197
00:12:25.555 --> 00:12:27.411
like I said, undefined.

198
00:12:27.411 --> 00:12:30.161
Let's see if I can find it quickly enough.

199
00:12:30.161 --> 00:12:35.107
Even off the top of my head,
tried to come up with a list of all of

200
00:12:35.107 --> 00:12:39.021
the things that I might
think about testing for.

201
00:12:39.021 --> 00:12:42.162
Cuz again, this is Javascript You
can throw anything in there.

202
00:12:42.162 --> 00:12:45.217
Could have been a string,
could have been a number, and

203
00:12:45.217 --> 00:12:47.432
some of these are you deciding, right?

204
00:12:47.432 --> 00:12:49.062
We know that true plus true equals two.

205
00:12:49.062 --> 00:12:52.762
&gt;&gt; Steve Kinney: Are you okay with that?

206
00:12:52.762 --> 00:12:53.912
If so, great.

207
00:12:53.912 --> 00:12:56.832
You should write a test verifying
that true plus true equals two,

208
00:12:56.832 --> 00:12:59.752
if you wanted to blow up because
you expected those to be numbers,

209
00:12:59.752 --> 00:13:01.701
then you should write a test for for that.

210
00:13:01.701 --> 00:13:03.851
There's not necessarily a right answer and
what it should do.

211
00:13:03.851 --> 00:13:06.121
It's like,
what are you trying to accomplish here?

212
00:13:06.121 --> 00:13:08.312
&gt;&gt; Female Student 2: What's
the the general rule,

213
00:13:08.312 --> 00:13:12.781
if you have a user input that you
definitely have validation for

214
00:13:12.781 --> 00:13:17.291
in your code, do you repeat that
validation in the test case?

215
00:13:17.291 --> 00:13:20.421
Or do you assume, I mean,
where do you draw the line?

216
00:13:20.421 --> 00:13:22.967
&gt;&gt; Steve Kinney: I mean,
I would test the validation logic, right?

217
00:13:22.967 --> 00:13:23.477
&gt;&gt; Female Student 2: That's true.

218
00:13:23.477 --> 00:13:26.110
&gt;&gt; Steve Kinney: Yeah,
I would take that whatever's valid or

219
00:13:26.110 --> 00:13:31.097
invalid, cuz that is, even if that is deep
inside of a angular component somewhere,

220
00:13:31.097 --> 00:13:34.967
something that's looking at
that password field, right?

221
00:13:34.967 --> 00:13:40.167
Maybe it's line 386 of a giant login form.

222
00:13:40.167 --> 00:13:41.795
What I would do.

223
00:13:41.795 --> 00:13:45.135
I work on open source code base,
I'll show you some of this later.

224
00:13:45.135 --> 00:13:49.084
It's interesting because on
my team I have one member who

225
00:13:49.084 --> 00:13:52.565
will shove everything in that component.

226
00:13:52.565 --> 00:13:55.747
And I take it to the other
extreme where I have

227
00:13:55.747 --> 00:13:59.626
a utils folder that is probably
to the other end of it.

228
00:13:59.626 --> 00:14:03.978
Where I will take validate that
there's an uppercase letter and

229
00:14:03.978 --> 00:14:06.796
make that a utility function that I test,

230
00:14:06.796 --> 00:14:12.176
validate that it has a number right,
and then validate password is.

231
00:14:12.176 --> 00:14:17.231
Those four or five functions, all of them,
but I've pulled out each one,

232
00:14:17.231 --> 00:14:21.961
because the smaller you break
stuff up into in that logic.

233
00:14:21.961 --> 00:14:27.641
When your test suite blows up, you know
exactly which tests blew up, right?

234
00:14:27.641 --> 00:14:31.872
If all of a sudden, if it's a well-named
tiny function that just checks to see if

235
00:14:31.872 --> 00:14:35.371
a string has a capital letter in it,
and that test starts failing.

236
00:14:35.371 --> 00:14:38.291
Well, you know what went wrong, right?

237
00:14:38.291 --> 00:14:41.651
Very easily and you get a lot
more granular stuff in there.

