WEBVTT

1
00:00:00.000 --> 00:00:04.131
Displays day when the count is one, right?

2
00:00:04.131 --> 00:00:07.910
This is kind of a variation of
the last two tests that we wrote.

3
00:00:07.910 --> 00:00:11.915
So in this case,
we will need that increment button,

4
00:00:11.915 --> 00:00:16.033
which I'm just gonna steal from up here.

5
00:00:16.033 --> 00:00:19.841
&gt;&gt; Steve Kinney: And we're gonna
want that unit that we saw earlier.

6
00:00:23.289 --> 00:00:25.952
&gt;&gt; Steve Kinney: And we'll do it,
the act, from the very beginning here.

7
00:00:25.952 --> 00:00:30.470
Again, in this case,
it doesn't really matter, but, again,

8
00:00:30.470 --> 00:00:34.756
you want your test to be resilient for
known welcome changes.

9
00:00:34.756 --> 00:00:38.815
So in this case,
we will say await, and we'll say.

10
00:00:45.208 --> 00:00:48.691
&gt;&gt; Steve Kinney: And you can see that
there are also the cool thing about

11
00:00:48.691 --> 00:00:53.503
the user event object is there are a whole
bunch of other things you can do.

12
00:00:53.503 --> 00:00:56.762
Obviously, in cut, copy,
can hit various keyboard things,

13
00:00:56.762 --> 00:00:59.230
if you just wanted to hold
down like left shift.

14
00:00:59.230 --> 00:01:02.001
You can do that with this library, right?

15
00:01:02.001 --> 00:01:05.806
And a whole bunch of other
fun things like that as well.

16
00:01:05.806 --> 00:01:10.603
There's more than just the very basic
events that you could fire, but

17
00:01:10.603 --> 00:01:16.472
that's all we really need in this case,
userEvent.click on the incrementButton.

18
00:01:18.571 --> 00:01:23.694
&gt;&gt; Steve Kinney: You gotta make
this an async function, cool.

19
00:01:23.694 --> 00:01:29.450
Great, and so
now we can expect that that unit,

20
00:01:34.163 --> 00:01:38.069
&gt;&gt; Steve Kinney: To have text content day.

21
00:01:41.506 --> 00:01:47.259
&gt;&gt; Steve Kinney: Awesome, decrements
the count when the button is clicked.

22
00:01:47.259 --> 00:01:53.700
Okay, so this is an interesting
philosophical dilemma here,

23
00:01:53.700 --> 00:01:59.176
which is how can we verify
that the decrement button.

24
00:01:59.176 --> 00:02:06.296
The count if it's not enabled unless
we increment it, we have two choices.

25
00:02:06.296 --> 00:02:09.560
And it's really, this is a philosophical
issue, there's not a right answer.

26
00:02:09.560 --> 00:02:13.160
Either a, you increment it and

27
00:02:13.160 --> 00:02:18.285
then decrement it, that'll do the trick,

28
00:02:18.285 --> 00:02:22.729
or b, you could theoretically have,

29
00:02:28.233 --> 00:02:29.689
&gt;&gt; Steve Kinney: An initial count prop and

30
00:02:29.689 --> 00:02:33.930
start it at one, in which case that
before each is no longer serving you.

31
00:02:33.930 --> 00:02:37.909
Cuz you might wanna put that component in
different states based on the props that

32
00:02:37.909 --> 00:02:38.562
you pass in.

33
00:02:38.562 --> 00:02:40.134
Which one do we wanna do?

34
00:02:40.134 --> 00:02:43.716
Do we wanna have a prop that we set up,
or do we want to increment and

35
00:02:43.716 --> 00:02:44.833
then decrement it?

36
00:02:44.833 --> 00:02:45.977
Choice time.

37
00:02:48.831 --> 00:02:49.782
&gt;&gt; Female Student 1: I say prop.

38
00:02:49.782 --> 00:02:53.879
&gt;&gt; Steve Kinney: All right, let's prop it,
so we've got initial count.

39
00:02:53.879 --> 00:02:57.175
I write TypeScript every day, and the idea
that I don't have to go through all

40
00:02:57.175 --> 00:03:00.692
the hassle of typing this right now is
disorienting to me, but I'm kinda into it.

41
00:03:00.692 --> 00:03:06.239
So we've got this count, and,
really, all we need to do here is.

42
00:03:10.492 --> 00:03:12.726
&gt;&gt; Steve Kinney: And for
the ones that don't have that,

43
00:03:12.726 --> 00:03:15.577
I'm just gonna say that
count is by default zero.

44
00:03:15.577 --> 00:03:17.149
Look, I refactored.

45
00:03:17.149 --> 00:03:18.243
&gt;&gt; Female Student 1: [LAUGH]
&gt;&gt; Steve Kinney: And

46
00:03:18.243 --> 00:03:21.311
I know that I didn't break anything.

47
00:03:21.311 --> 00:03:27.275
Because my test pass, I was not even
confident that was gonna be green.

48
00:03:27.275 --> 00:03:31.651
But I get to move on with my
life because my test pass.

49
00:03:31.651 --> 00:03:36.372
So, but the idea that we might wanna
make this component in different states

50
00:03:36.372 --> 00:03:38.378
leads me to now resent the fact.

51
00:03:38.378 --> 00:03:42.544
And this is why I don't do it
in my own code a lot of times,

52
00:03:42.544 --> 00:03:47.858
to be honest to you,
that I have this before each, right?

53
00:03:47.858 --> 00:03:53.630
&gt;&gt; Steve Kinney: Because, yeah, sure,
I wanted to 0 the rest of the time.

54
00:03:53.630 --> 00:03:58.929
And I kind of seeing it all in one place
personally, you could argue that's

55
00:03:58.929 --> 00:04:03.822
tedious but I'm already doing
tedious stuff, testing is tedious.

56
00:04:03.822 --> 00:04:08.500
Testing is an investment in future you.

57
00:04:10.059 --> 00:04:12.578
&gt;&gt; Steve Kinney: All right, let's see.

58
00:04:12.578 --> 00:04:14.998
All right, decrements.

59
00:04:14.998 --> 00:04:18.243
All right, we'll render the counter,
this time,

60
00:04:18.243 --> 00:04:22.814
we'll do it with an initial count of one,
there are some other tests that I

61
00:04:22.814 --> 00:04:26.085
might choose to write here too beforehand,
right?

62
00:04:26.085 --> 00:04:34.428
Again, I could say that it is not
disabled when the count is one, right?

63
00:04:49.010 --> 00:04:57.372
&gt;&gt; Steve Kinney: Screen.getByRole
&gt;&gt; Steve Kinney: Button.

64
00:05:07.074 --> 00:05:12.608
&gt;&gt; Steve Kinney: Decrement/i,
this isn't the name of the test,

65
00:05:12.608 --> 00:05:18.138
but this is a test I would likely add to,
which is,

66
00:05:18.138 --> 00:05:24.619
decrement button if the count is one,
not toBeDisabled.

67
00:05:27.902 --> 00:05:29.510
&gt;&gt; Steve Kinney: Start with that test,
it failed.

68
00:05:29.510 --> 00:05:30.652
Why you fail?

69
00:05:34.601 --> 00:05:37.581
&gt;&gt; Steve Kinney: Because it's
decrementButton and not decrement.

70
00:05:37.581 --> 00:05:42.886
Cool, so we expect it not toBeDisabled,
now we know that that state is there.

71
00:05:42.886 --> 00:05:47.741
Now you can go refactor knowing that
out of the box it will be disabled if

72
00:05:47.741 --> 00:05:53.196
the count is 0, and the decrement will
be enabled if it's not 0 in this case.

73
00:05:53.196 --> 00:05:55.874
And then cool.

74
00:05:55.874 --> 00:06:00.225
And again, I might choose to make
that its own test as well, but for

75
00:06:00.225 --> 00:06:02.494
our purposes, I'll keep going.

76
00:06:02.494 --> 00:06:05.470
It decrements the count
when things are clicked, so

77
00:06:05.470 --> 00:06:07.505
we're also gonna need that count.

78
00:06:13.741 --> 00:06:18.220
&gt;&gt; Steve Kinney: GetByTestid,
(`counter-count`).

79
00:06:22.895 --> 00:06:27.969
&gt;&gt; Steve Kinney: Great, and
then we'll do the full act thing just so

80
00:06:27.969 --> 00:06:33.290
we get in the habit now, so
it doesn't hurt us later.

81
00:06:36.381 --> 00:06:41.443
&gt;&gt; Steve Kinney: So now,
we act on the fact that we want to go

82
00:06:41.443 --> 00:06:48.243
ahead and,
&gt;&gt; Steve Kinney: userEvent.click,

83
00:06:48.243 --> 00:06:52.862
and we'll say, on our (decrementButton).

84
00:06:56.085 --> 00:06:58.418
&gt;&gt; Steve Kinney: And now we can expect.

85
00:07:06.075 --> 00:07:06.754
&gt;&gt; Steve Kinney: Does it count?

86
00:07:06.754 --> 00:07:07.949
Yeah, it counts.

87
00:07:13.511 --> 00:07:14.719
&gt;&gt; Steve Kinney: Cool, it passes,

88
00:07:14.719 --> 00:07:18.874
there are some other tests that
would shake out of this, though.

89
00:07:18.874 --> 00:07:24.189
We could write, which is we could have a
test with if you pass in an initial count,

90
00:07:24.189 --> 00:07:27.332
that better be what I see on the screen,
right?

91
00:07:27.332 --> 00:07:31.018
That's a test that would
shake out of this.

92
00:07:31.018 --> 00:07:34.593
We can expect that if we have one where
we set the initial count to 1 and

93
00:07:34.593 --> 00:07:38.109
make sure the same way we had a test
making sure that the decrement and

94
00:07:38.109 --> 00:07:40.344
reset button were disabled when it was 0.

95
00:07:40.344 --> 00:07:42.566
Well, if we set it to one,
they shouldn't be disabled, right?

96
00:07:42.566 --> 00:07:44.413
You'd break that out into small tests,

97
00:07:44.413 --> 00:07:47.143
you're getting the same value
out of voting into one test.

98
00:07:47.143 --> 00:07:52.245
But it's always nice when you see the test
fail to know exactly what the issue is,

99
00:07:52.245 --> 00:07:52.781
right?

100
00:07:52.781 --> 00:07:55.464
Which is weird,
cuz when we talk about Playwright later,

101
00:07:55.464 --> 00:07:56.794
the advice is the opposite.

102
00:07:56.794 --> 00:08:01.552
Cuz the cost of spinning up the browser
and tearing it down is so big that,

103
00:08:01.552 --> 00:08:05.849
spin it up, go through an entire flow and
take it back down again.

104
00:08:05.849 --> 00:08:10.144
So all of these things
are less immutable laws and

105
00:08:10.144 --> 00:08:14.878
more a reasoning behind them for
your own happiness.

106
00:08:14.878 --> 00:08:18.049
In this case, I would probably
start to break those out as well.

107
00:08:18.049 --> 00:08:20.497
And arguably, if it was back down to 0,

108
00:08:20.497 --> 00:08:25.037
you could even write a test to say that
it should be disabled again, right?

109
00:08:25.037 --> 00:08:29.950
You could overload a test, but
then you might choose to name it

110
00:08:29.950 --> 00:08:33.742
differently, but
let's just make our point.

111
00:08:33.742 --> 00:08:39.564
If it's back down to zero, then we
assume that it's disabled again, right?

112
00:08:39.564 --> 00:08:42.594
Now, if this test fails, you're gonna have
to squint a little bit harder to figure

113
00:08:42.594 --> 00:08:44.260
out exactly what line
it failed on what step.

114
00:08:44.260 --> 00:08:48.977
But you also know that you have one test
that kind of exercise this component in

115
00:08:48.977 --> 00:08:52.181
set it to one,
make sure the button is not disabled.

116
00:08:52.181 --> 00:08:54.155
Hit the button,
make sure it went down to zero.

117
00:08:54.155 --> 00:08:55.869
Make sure the button now is disabled.

118
00:08:55.869 --> 00:09:00.249
You got a decent amount of
coverage out of one test, too, so

119
00:09:00.249 --> 00:09:02.360
it becomes a balancing act.

120
00:09:02.360 --> 00:09:06.166
Cool, this is a fun one, so
we'll render that counter.

121
00:09:12.082 --> 00:09:16.065
&gt;&gt; Steve Kinney: Okay, so
it should be 0 at that point, and

122
00:09:16.065 --> 00:09:22.611
what we'll do is we'll go ahead and
get that decrementButton again.

123
00:09:22.611 --> 00:09:27.276
Which we know is disabled, but
we wanna make sure that despite the fact

124
00:09:27.276 --> 00:09:31.962
this is disabled, that clicking on it,
is not gonna break anything.

125
00:09:31.962 --> 00:09:34.907
Make sure all right,
didn't have a to do sitting on it still.

126
00:09:34.907 --> 00:09:41.505
Okay, so then we can do,
&gt;&gt; Steve Kinney: I

127
00:09:41.505 --> 00:09:42.925
guess we need that count too.

128
00:09:51.066 --> 00:09:51.843
&gt;&gt; Steve Kinney: So now,

129
00:09:51.843 --> 00:09:58.891
we'll say,
&gt;&gt; Steve Kinney: This

130
00:09:58.891 --> 00:10:01.278
one truly won't matter,

131
00:10:01.278 --> 00:10:07.258
because ideally nothing happens
if you click a disabled button.

132
00:10:07.258 --> 00:10:14.323
So we'll say await userEvent.click
on the decrementButton,

133
00:10:14.323 --> 00:10:19.551
and we expect count to
still be 0 at that point,

134
00:10:19.551 --> 00:10:23.107
not -1 or anything like that.

135
00:10:26.862 --> 00:10:32.212
&gt;&gt; Steve Kinney: Cool, so with this one,
one of the things we can keep in mind

136
00:10:32.212 --> 00:10:39.500
with this one is we're not always stuck
to only using the testing library stuff.

137
00:10:39.500 --> 00:10:43.903
Like I said before, if you need to use
document.queryselector, you can, right?

138
00:10:43.903 --> 00:10:48.565
There's nothing stopping you from
using these things, but in this case,

139
00:10:48.565 --> 00:10:52.267
let's go ahead and
we'll get the incrementButton again.

140
00:10:52.267 --> 00:10:58.434
IncrementButton = screen.getByText,

141
00:10:58.434 --> 00:11:01.865
no, I want getByRole.

142
00:11:01.865 --> 00:11:07.445
Button with the name, I've got to
render that thing again this time,

143
00:11:07.445 --> 00:11:09.254
too, increment/i.

144
00:11:11.611 --> 00:11:18.220
&gt;&gt; Steve Kinney: Right, and then we will,
let's do the act again here.

145
00:11:18.220 --> 00:11:21.745
Yeah, this one will work without this,
but I think it's important and

146
00:11:21.745 --> 00:11:22.585
we should do it.

147
00:11:22.585 --> 00:11:30.496
I'll show you a few other tricks
in a second where we will,

148
00:11:30.496 --> 00:11:39.412
wait
&gt;&gt; Steve Kinney: UserEvent.click on that

149
00:11:39.412 --> 00:11:44.772
(incrementButton), and this might be one
where I do a little test before and after.

150
00:11:44.772 --> 00:11:48.421
I just gotta make that async too,
or await it as well.

151
00:11:48.421 --> 00:11:53.372
And so at this point, I'm gonna just

152
00:11:53.372 --> 00:11:58.010
expect (document.title) to be

153
00:12:02.756 --> 00:12:04.039
&gt;&gt; Steve Kinney: 1 day.

154
00:12:06.815 --> 00:12:10.259
&gt;&gt; Steve Kinney: And we fell because
I never rendered that thing,

155
00:12:10.259 --> 00:12:15.472
even though I was, I gotta remember
to render that component again.

156
00:12:26.386 --> 00:12:33.079
&gt;&gt; Steve Kinney: It's I got a full,
that's fine, that's a good mistake.

157
00:12:36.469 --> 00:12:38.178
&gt;&gt; Steve Kinney: I think
that's a to start with,

158
00:12:38.178 --> 00:12:40.213
we're got to find that in one second.

159
00:12:40.213 --> 00:12:43.676
This is because I decided to
put the title on the end.

160
00:12:48.903 --> 00:12:51.425
&gt;&gt; Steve Kinney: I would probably for
this one do

161
00:13:09.996 --> 00:13:10.854
&gt;&gt; Steve Kinney: Cool, and so

162
00:13:10.854 --> 00:13:15.225
that way if I put the title of
the app after the 1 day, or whatever.

163
00:13:15.225 --> 00:13:19.424
So this one is just basically saying,
as long as it has that 1 day in it, and

164
00:13:19.424 --> 00:13:22.040
I could click it again,
make sure has 2 days.

165
00:13:22.040 --> 00:13:25.012
The other cool thing that this
does as well is, right now,

166
00:13:25.012 --> 00:13:27.086
these are all starting from the screen.

167
00:13:27.086 --> 00:13:31.044
I could do something like this,
which is const.

168
00:13:40.299 --> 00:13:45.004
&gt;&gt; Steve Kinney: GetByRole, and this
is going to then be scoped just to that

169
00:13:45.004 --> 00:13:49.144
component, rather than
the whole screen as well.

170
00:13:49.144 --> 00:13:53.180
Which can also be useful if you just
wanna that way, if you had, remember,

171
00:13:53.180 --> 00:13:57.280
we said, days could be many places you
can kind of get to that lower level

172
00:13:57.280 --> 00:13:58.780
of granularity there too.

173
00:13:58.780 --> 00:14:02.205
So this will be a scoped version for
this instant as well, or

174
00:14:02.205 --> 00:14:05.022
you can use the one from screen,
both will work.

