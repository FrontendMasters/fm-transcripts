WEBVTT

1
00:00:00.000 --> 00:00:04.534
&gt;&gt; Steve Kinney: And so, there is
this thing called testing library,

2
00:00:04.534 --> 00:00:09.380
right, which you kinda saw
hiding in that V test config.

3
00:00:09.380 --> 00:00:14.505
And you can even see, if you need any
more convincing on how close these two

4
00:00:14.505 --> 00:00:20.222
testing libraries are, that should tell
you everything you really need to know.

5
00:00:20.222 --> 00:00:22.429
There is this library
called testing library.

6
00:00:22.429 --> 00:00:26.960
So, testing library is a library that
allows us to kind of have a bunch of

7
00:00:26.960 --> 00:00:29.233
helpers around working in the DOM.

8
00:00:29.233 --> 00:00:31.823
We have turned on the DOM, right?

9
00:00:31.823 --> 00:00:34.186
But things like querying for

10
00:00:34.186 --> 00:00:40.004
various things in the DOM with an expect
helper can be a little tricky.

11
00:00:40.004 --> 00:00:45.463
Some of those user events that we saw
before as well, can become tricky as well,

12
00:00:45.463 --> 00:00:50.439
but this test works, but let's see if
we can make it a little bit better.

13
00:00:50.439 --> 00:00:53.410
So for instance,

14
00:00:53.410 --> 00:00:58.561
one thing we could do is we could

15
00:00:58.561 --> 00:01:04.002
import,
&gt;&gt; Steve Kinney: Actually,

16
00:01:04.002 --> 00:01:06.361
there's no render for this one.

17
00:01:13.734 --> 00:01:20.177
&gt;&gt; Steve Kinney: We can import this
screen from testing library DOM.

18
00:01:20.177 --> 00:01:24.961
To the question I got earlier
which inspired this little

19
00:01:24.961 --> 00:01:30.047
live decision that I made,
which is, if you were just using

20
00:01:30.047 --> 00:01:34.751
regular DOM nodes,
you use testing-library/dom.

21
00:01:34.751 --> 00:01:36.840
If you would like to work
with React components.

22
00:01:39.691 --> 00:01:42.915
&gt;&gt; Steve Kinney: If you would like
to work with Svelte components.

23
00:01:42.915 --> 00:01:46.352
If you would like to work
with Vue components, right?

24
00:01:46.352 --> 00:01:51.567
Beyond that, there is very little
difference between the bunch of them,

25
00:01:51.567 --> 00:01:53.849
which we'll see momentarily.

26
00:01:53.849 --> 00:01:58.410
But we'll start out with
this one right here.

27
00:01:58.410 --> 00:02:01.942
So we can start out with the screen.

28
00:02:01.942 --> 00:02:05.770
And so,
what screen does as effectively as you

29
00:02:05.770 --> 00:02:09.413
can imagine is the browser window, right?

30
00:02:09.413 --> 00:02:14.243
And one of the things that testing library
does is it's got a bunch of selectors for

31
00:02:14.243 --> 00:02:15.925
finding DOM nodes, right?

32
00:02:15.925 --> 00:02:19.620
If you've ever used jQuery before,
you know this like the back of your hand.

33
00:02:19.620 --> 00:02:22.941
If you've used something
like document.querySelector,

34
00:02:22.941 --> 00:02:24.444
you've done this as well.

35
00:02:24.444 --> 00:02:30.419
The interesting part about testing library
that I think is super cool is that it

36
00:02:30.419 --> 00:02:36.768
forces you to use selectors that are based
on how a screen reader would find things.

37
00:02:36.768 --> 00:02:41.146
Which means,
it forces you to both write your test and

38
00:02:41.146 --> 00:02:45.828
thereby your markup in a way
that is accessible, right?

39
00:02:45.828 --> 00:02:49.098
And so, it allows you to kinda like
query stuff along those lines, and

40
00:02:49.098 --> 00:02:52.102
allows you to have a version of
the screen that you can kinda see.

41
00:02:52.102 --> 00:02:56.673
So this is less about a DOM node and
more about what is on the page,

42
00:02:56.673 --> 00:03:02.277
how would a screen reader find it, and
finding the elements like that as well.

43
00:03:02.277 --> 00:03:05.447
And so, what we could do here
is we could have our button and

44
00:03:05.447 --> 00:03:08.376
we could do something like,
we can put it on the page.

45
00:03:15.863 --> 00:03:17.797
&gt;&gt; Steve Kinney: So
in this case, let me just do,

46
00:03:17.797 --> 00:03:21.322
I'm using replaceChild()
instead of a penChild().

47
00:03:21.322 --> 00:03:25.845
So if I use an additional test, it's gonna
swap everything out with a fresh button.

48
00:03:25.845 --> 00:03:33.343
Otherwise, you could end up with three
buttons on the page, because life's hard.

49
00:03:33.343 --> 00:03:37.475
Button, and
now what I could say is something

50
00:03:37.475 --> 00:03:41.949
like,
&gt;&gt; Steve Kinney: Let's actually just only

51
00:03:41.949 --> 00:03:42.999
use that variable name.

52
00:03:47.430 --> 00:03:50.248
&gt;&gt; Steve Kinney: So I could say something
like, we're gonna put that on the body,

53
00:03:50.248 --> 00:03:52.106
and this is something
I might choose to do.

54
00:03:52.106 --> 00:03:55.249
If I was gonna use the same
button in every test,

55
00:03:55.249 --> 00:03:58.641
I could choose to put this
in a before each, right?

56
00:03:58.641 --> 00:04:01.113
But in this case, I'm just gonna
put it in line with this one.

57
00:04:01.113 --> 00:04:06.623
And then I could say something like,

58
00:04:06.623 --> 00:04:12.326
const_button = screen getByRoll.

59
00:04:12.326 --> 00:04:14.662
In this case, we want a button.

60
00:04:14.662 --> 00:04:17.278
And I could say one that has,

61
00:04:25.882 --> 00:04:26.743
&gt;&gt; Steve Kinney: Right,

62
00:04:26.743 --> 00:04:29.449
what are you angry about?

63
00:04:35.326 --> 00:04:37.096
&gt;&gt; Steve Kinney: I'll do that for now.

64
00:04:37.096 --> 00:04:40.924
So we've got the button,
the nice part too is,

65
00:04:40.924 --> 00:04:44.580
theoretically, this is a reasonable test.

66
00:04:44.580 --> 00:04:49.589
Because if it couldn't find
a button with click me on the page,

67
00:04:49.589 --> 00:04:52.432
then this test would fail, right?

68
00:04:52.432 --> 00:04:58.915
So I said one with,
&gt;&gt; Steve Kinney: The act of find,

69
00:04:58.915 --> 00:05:01.694
this is where that like thing we're
talking about before helps us,

70
00:05:01.694 --> 00:05:04.144
if it can't find one on the page,
that'll throw an error.

71
00:05:04.144 --> 00:05:10.232
So by definition,
this is theoretically a reasonable test.

72
00:05:10.232 --> 00:05:12.030
And so at this point, we can do, or

73
00:05:12.030 --> 00:05:15.322
you can even do something like
expect screen or expect button.

74
00:05:30.174 --> 00:05:32.001
&gt;&gt; Steve Kinney: Can't remember
what I started this with.

75
00:05:36.729 --> 00:05:40.860
&gt;&gt; Steve Kinney: Cool, and so, here we've
got one where it's kind of using it

76
00:05:40.860 --> 00:05:43.649
from the screen reader version, right?

77
00:05:43.649 --> 00:05:48.475
Where we say, hey,
put this thing on the body, right?

78
00:05:48.475 --> 00:05:54.147
And then, from the perspective of
the screen, go find that button.

79
00:05:54.147 --> 00:05:59.992
And then in this case,
it's in the document.

80
00:05:59.992 --> 00:06:02.862
And this test is now doing effectively
the same thing, so we can get rid of it.

81
00:06:02.862 --> 00:06:08.593
Where this can become more interesting
is this idea of click, right?

82
00:06:08.593 --> 00:06:12.150
There's a few ways that we can
kind of improve upon this.

83
00:06:12.150 --> 00:06:15.401
And we'll kinda take it slowly and
do it in a few other examples.

84
00:06:15.401 --> 00:06:16.319
As you can see,

85
00:06:16.319 --> 00:06:20.283
there are plenty of examples that
we have to play around with here.

86
00:06:20.283 --> 00:06:23.460
So we'll get our muscle memory behind us.

87
00:06:23.460 --> 00:06:30.781
But what we can do here is the same basic
idea, what I might do after every test.

88
00:06:35.372 --> 00:06:43.646
&gt;&gt; Steve Kinney: Is just say,
&gt;&gt; Steve Kinney: Document.

89
00:06:50.110 --> 00:06:53.658
&gt;&gt; Steve Kinney: I don't know if it works
for the DOM1, but for React and stuff,

90
00:06:53.658 --> 00:06:56.286
it will clear out the DOM
in between every test,

91
00:06:56.286 --> 00:06:59.000
I just don't remember if it does it for
this one.

92
00:06:59.000 --> 00:07:03.466
So what we'll do is, we'll do
the same thing we said before here.

93
00:07:03.466 --> 00:07:09.142
Now, instead of calling .click,
what we can do is pull in this,

94
00:07:09.142 --> 00:07:15.748
fire an event, which will actually,
instead of calling the click method,

95
00:07:15.748 --> 00:07:21.762
basically, take a a little event and
shoot it at the button, right?

96
00:07:21.762 --> 00:07:24.812
And so, what we can do is,

97
00:07:34.806 --> 00:07:35.954
&gt;&gt; Steve Kinney: GetByRoll,

98
00:07:35.954 --> 00:07:40.615
in this case, Button,
&gt;&gt; Steve Kinney: And

99
00:07:40.615 --> 00:07:41.564
we'll go with the name.

100
00:07:47.054 --> 00:07:47.991
&gt;&gt; Steve Kinney: Click here,
where is it lowercase?

101
00:07:47.991 --> 00:07:53.130
Yep, and
what we can do at this point is say,

102
00:07:55.301 --> 00:08:00.398
&gt;&gt; Steve Kinney: FireEvent at the button.

103
00:08:05.792 --> 00:08:06.765
&gt;&gt; Steve Kinney: It's gotta be,

104
00:08:23.422 --> 00:08:25.866
&gt;&gt; Steve Kinney: Did end
up with two on the screen.

105
00:08:30.745 --> 00:08:34.061
&gt;&gt; Steve Kinney: The nice part is you can
see this is the DOM I'm working with,

106
00:08:34.061 --> 00:08:38.432
I gotta deal with this in a second, but
I ended up with two buttons on the screen.

107
00:08:38.432 --> 00:08:41.368
I'll deal with that one moment,
as I get my major point across here.

108
00:08:44.316 --> 00:08:49.652
&gt;&gt; Steve Kinney: So we've made
this a little bit better, right?

109
00:08:49.652 --> 00:08:52.332
We now fire an event at it,
which is, again,

110
00:08:52.332 --> 00:08:54.596
from the perspective of the browser.

111
00:08:54.596 --> 00:08:58.147
There's another library along with
testing library called user-event.

112
00:09:00.926 --> 00:09:04.789
&gt;&gt; Steve Kinney: Which will then
do what we were saying before,

113
00:09:04.789 --> 00:09:11.540
where it will simulate everything that
would go on with a user actually doing it.

114
00:09:11.540 --> 00:09:13.270
And so this is just an abstraction.

115
00:09:13.270 --> 00:09:16.288
It'll do, kinda the mouse enter and
the click,

116
00:09:16.288 --> 00:09:19.823
it'll do all of the things that
a user would normally do to

117
00:09:19.823 --> 00:09:24.631
interact with an element like this, and
simulates that a little bit better.

118
00:09:24.631 --> 00:09:27.738
So in this case,
it does need to be async function because,

119
00:09:39.056 --> 00:09:39.706
&gt;&gt; Steve Kinney: And so now,

120
00:09:39.706 --> 00:09:44.336
this is basically simulating everything
that would happen in an actual user event.

121
00:09:44.336 --> 00:09:45.656
The end result is the same.

122
00:09:45.656 --> 00:09:49.367
Now, cuz this is a very,
very, very simple test, but

123
00:09:49.367 --> 00:09:54.552
the idea here is now we are mounting it
on the page, like a real page, right?

124
00:09:54.552 --> 00:09:58.929
We are querying that it is in the DOM with
the right roles, and we're getting it.

125
00:09:58.929 --> 00:10:03.070
We are doing a real click,
and then we are, in fact,

126
00:10:03.070 --> 00:10:08.060
verifying, we could even,
this is the same button in memory,

127
00:10:08.060 --> 00:10:12.792
we could also grab it again,
and so on and so forth, right?

128
00:10:12.792 --> 00:10:19.326
But again, we thought about the arrange,
act, and assert.

129
00:10:19.326 --> 00:10:24.354
By arranging, we're rendering it
on the page, we will go ahead find

130
00:10:24.354 --> 00:10:29.222
it on the page to make sure it was
mounted correctly as we expected.

131
00:10:29.222 --> 00:10:32.746
Click on it, and then verify that thing
changed the way that we wanted it to.

