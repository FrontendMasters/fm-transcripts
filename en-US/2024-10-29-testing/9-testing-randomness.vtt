WEBVTT

1
00:00:00.000 --> 00:00:04.015
&gt;&gt; Steve Kinney: But it does kind of bring
up a little bit of a different problem

2
00:00:04.015 --> 00:00:06.634
that we could kind of have to deal with.

3
00:00:06.634 --> 00:00:11.822
If I jump over into,
I've got this example called characters.

4
00:00:11.822 --> 00:00:17.264
And let's squint at it for a second and
see if we can find the issue here,

5
00:00:17.264 --> 00:00:21.893
which is all the testing stuff
we've talked about is well and

6
00:00:21.893 --> 00:00:25.546
good until anything non
determinant shows up.

7
00:00:25.546 --> 00:00:31.364
Things that are non determinate,
an incomplete list,

8
00:00:31.364 --> 00:00:36.314
the current date and
time that tends to change,

9
00:00:36.314 --> 00:00:39.927
right, random numbers, right?

10
00:00:39.927 --> 00:00:44.451
In this case, a UUID is a randomly
generated string, right?

11
00:00:44.451 --> 00:00:50.316
The goal of a UUID is that there's no such
thing as true randomness, yada, yada,

12
00:00:50.316 --> 00:00:56.191
yada, whatever is that no two strings
that it generates should be equal, right?

13
00:00:56.191 --> 00:01:00.317
In the fullness of time, theoretically
that is possible but it's like one of

14
00:01:00.317 --> 00:01:04.377
those things if you ran it over and over
again for thousands of years you might

15
00:01:04.377 --> 00:01:08.907
get one but not in any kind of conceivable
time period which is problematic ,right?

16
00:01:08.907 --> 00:01:14.199
Cuz here we are just generating
an ID as part of this code.

17
00:01:14.199 --> 00:01:18.622
Now I'm gonna spoil the end
of this workshop now so

18
00:01:18.622 --> 00:01:25.373
that I can prove it at the end, which is
you have three ways of handling this.

19
00:01:25.373 --> 00:01:29.521
Not caring about the parts
that are random, that'll work.

20
00:01:29.521 --> 00:01:34.694
Making the parts that are not random
not random, or controlling whether or

21
00:01:34.694 --> 00:01:38.729
not they're random, right,
also known as all options.

22
00:01:38.729 --> 00:01:42.103
And we're gonna pretend the first
two are only on the table, and

23
00:01:42.103 --> 00:01:44.176
we'll talk about the third one later.

24
00:01:44.176 --> 00:01:49.647
All right, so the first one is just
not caring about this ID, right?

25
00:01:49.647 --> 00:01:51.877
This can be a little bit tricky,
because it's gonna be there.

26
00:01:51.877 --> 00:01:55.274
And to equal doesn't care if there
are additional undefined properties, but

27
00:01:55.274 --> 00:01:58.533
if there is a new property that shouldn't
be there, it is gonna yell at us.

28
00:01:58.533 --> 00:02:02.236
Let's verify that, let's just look at this
code real quick, put it in our heads, and

29
00:02:02.236 --> 00:02:03.722
then we'll switch over the test.

30
00:02:03.722 --> 00:02:05.494
Not a lot going on in this code.

31
00:02:05.494 --> 00:02:07.656
We've got this idea of a person.

32
00:02:07.656 --> 00:02:10.126
They've got a first name,
and they've got a last name.

33
00:02:10.126 --> 00:02:14.926
If you forget to give one of those,
it will throw, right?

34
00:02:14.926 --> 00:02:18.691
And otherwise, we generate a random ID.

35
00:02:18.691 --> 00:02:22.514
That is prefixed with person,
just cuz I felt like it.

36
00:02:22.514 --> 00:02:26.180
And we add the first name and
last name to the object, and

37
00:02:26.180 --> 00:02:29.068
then we have this full name getter, right?

38
00:02:29.068 --> 00:02:33.100
If you've never seen this syntax before,
you can just type dot full name,

39
00:02:33.100 --> 00:02:35.793
and under the hood,
it will compute it on the fly.

40
00:02:35.793 --> 00:02:41.666
Great, but I've got this test and
it's technically skipped right now,

41
00:02:41.666 --> 00:02:44.515
which is because it's gonna fail.

42
00:02:44.515 --> 00:02:46.281
Let's watch it fail.

43
00:02:46.281 --> 00:02:48.389
I know you're happy with the green,
but we're gonna lose it.

44
00:02:48.389 --> 00:02:50.296
We're gonna lose the green.

45
00:02:50.296 --> 00:02:54.852
So let's go ahead, we're gonna change it.

46
00:02:54.852 --> 00:02:56.467
We're gonna hit Save.

47
00:02:56.467 --> 00:02:58.209
And it fails.

48
00:02:58.209 --> 00:03:01.876
But yeah, I made a person with
the first name Grace, last name Hopper.

49
00:03:01.876 --> 00:03:05.603
That should equal a person,
first name Grace, last name Hopper.

50
00:03:05.603 --> 00:03:06.887
Why?

51
00:03:06.887 --> 00:03:09.430
Okay, doesn't equal, that doesn't help.

52
00:03:09.430 --> 00:03:13.991
Look, we got this extra string, but

53
00:03:13.991 --> 00:03:19.300
it's gonna be random every time, right?

54
00:03:19.300 --> 00:03:22.575
Depending on what's going on,
we could do something like,

55
00:03:22.575 --> 00:03:25.353
we definitely wanna make
sure it has an ID, right?

56
00:03:25.353 --> 00:03:28.325
That's important,
that should be part of the test, right?

57
00:03:28.325 --> 00:03:38.098
But you can also do,
&gt;&gt; Steve Kinney: Nope,

58
00:03:38.098 --> 00:03:42.519
get rid of that 0 and this makes it
a little bit more interesting, which is,

59
00:03:42.519 --> 00:03:43.984
hey, make a new person.

60
00:03:43.984 --> 00:03:48.833
And if I give you the first name Grace and
the last name Hopper,

61
00:03:48.833 --> 00:03:52.949
right, I better see those
coming out the other end.

62
00:03:52.949 --> 00:03:57.150
However, as long as the idea
is some kind of string,

63
00:03:57.150 --> 00:04:02.314
as long as it starts with the person dash,
then you did your job.

64
00:04:02.314 --> 00:04:06.227
My code works as expected, right?

65
00:04:06.227 --> 00:04:09.250
So now you can see it does in fact pass,
right?

66
00:04:09.250 --> 00:04:11.975
Now, if it wasn't prefixed
at the right thing,

67
00:04:11.975 --> 00:04:16.175
it's only the random part where just like,
I don't care about that part.

68
00:04:16.175 --> 00:04:17.565
We'll just validate
the parts that I control.

