WEBVTT

1
00:00:00.000 --> 00:00:03.704
&gt;&gt; Steve Kinney: There are a lot of cases
where if you can pull stuff apart and

2
00:00:03.704 --> 00:00:06.129
unit tests are great, do it, right?

3
00:00:06.129 --> 00:00:09.001
Unit tests are fast.

4
00:00:09.001 --> 00:00:15.399
If you've pulled enough pieces apart and
started to untangle the knot.

5
00:00:15.399 --> 00:00:17.120
And again, there's no judgment.

6
00:00:17.120 --> 00:00:20.582
There are parts of my code base
that are broken out into small

7
00:00:20.582 --> 00:00:25.168
well-named functions, there are parts
of my code base that are not, right?

8
00:00:25.168 --> 00:00:29.514
You are always balancing these,
quote-unquote,

9
00:00:29.514 --> 00:00:32.090
best practices with reality.

10
00:00:32.090 --> 00:00:34.272
Reality is sometimes time crunches,

11
00:00:34.272 --> 00:00:37.484
reality is just sometimes
things get that way, right?

12
00:00:37.484 --> 00:00:41.633
And you're constantly battling back
complexity, and that's your job.

13
00:00:41.633 --> 00:00:43.871
And so there's no judgment for

14
00:00:43.871 --> 00:00:48.442
if things have become a bundled
ball of chewing gum and string.

15
00:00:48.442 --> 00:00:52.531
Because there are parts of my code
base that are really easy to test and

16
00:00:52.531 --> 00:00:56.425
have 100% test coverage, and
there are parts that aren't.

17
00:00:56.425 --> 00:00:58.496
Let's just say that, right?

18
00:00:58.496 --> 00:01:00.268
And that is very true, right?

19
00:01:00.268 --> 00:01:03.566
And the thing is, it's like, well,
we're not gonna do anything.

20
00:01:03.566 --> 00:01:06.712
You're never gonna get six months
to untangle it all, right?

21
00:01:06.712 --> 00:01:08.614
The idea is, you put enough in place.

22
00:01:08.614 --> 00:01:12.100
Again, it's about lowering that stress
threshold more than anything else.

23
00:01:12.100 --> 00:01:15.333
And sometimes, yeah,
I can't get at that function,

24
00:01:15.333 --> 00:01:17.666
I cannot pull out that getter, got it.

25
00:01:17.666 --> 00:01:21.570
Sometimes the best thing to do is,
at the end of the day,

26
00:01:21.570 --> 00:01:26.740
nobody cares about dependency injection or
how you structure your code.

27
00:01:26.740 --> 00:01:31.476
Some of the biggest code
bases that I've ever seen

28
00:01:31.476 --> 00:01:36.908
are some of the worst code
bases I've ever seen, right?

29
00:01:36.908 --> 00:01:38.927
before there was some tool, whatever.

30
00:01:38.927 --> 00:01:44.133
I have heard stories that
I'm not at liberty to

31
00:01:44.133 --> 00:01:52.554
share of 14,000 line user control
files on the server side, right?

32
00:01:52.554 --> 00:01:57.069
And that organizations were a subclass
of users and were another 10,000 lines.

33
00:01:57.069 --> 00:01:59.813
And this is a tool you use every day.

34
00:01:59.813 --> 00:02:04.284
And so, yeah, we can have these
strategies, we can have best practices.

35
00:02:04.284 --> 00:02:07.727
But even my own code base,
cuz it's open-source,

36
00:02:07.727 --> 00:02:13.218
I might as well not lie about it, has some
bodies buried in various places, right?

37
00:02:13.218 --> 00:02:17.655
And so with that, yeah,
cuz sometimes its time crunches,

38
00:02:17.655 --> 00:02:21.665
sometimes over time,
things just degrade, right?

39
00:02:21.665 --> 00:02:25.964
And so then coming up with a strategy
approach of how you do it.

40
00:02:25.964 --> 00:02:29.231
At the end of the day,
unit testing is fast and easy.

41
00:02:29.231 --> 00:02:34.597
But when someone visits the page,
does it work, right?

42
00:02:34.597 --> 00:02:36.269
So we are briefly gonna
talk about Playwright.

43
00:02:36.269 --> 00:02:39.979
Now, to be fair, one could do
an entire day on Playwright, right?

44
00:02:39.979 --> 00:02:42.751
So I'm going to kind of
do the high level thing.

45
00:02:42.751 --> 00:02:46.685
And if it's something we're interested in,
we can dig deeper into it another day.

46
00:02:46.685 --> 00:02:49.779
But let's at least talk about this, and

47
00:02:49.779 --> 00:02:55.785
one other strategy that I'll kinda add
as a further reading exercise as well,

48
00:02:55.785 --> 00:03:00.258
and how these things all kinda
play along with each other.

49
00:03:00.258 --> 00:03:06.219
Okay, so what Playwright does, and
Cyprus is another alternative, right?

50
00:03:06.219 --> 00:03:07.749
Fine, whatever one works for you,

51
00:03:07.749 --> 00:03:10.100
there's a whole course in
Cyprus that we already did.

52
00:03:10.100 --> 00:03:13.813
Playwright is what I use today,
so that's what we're gonna cover.

53
00:03:13.813 --> 00:03:18.282
Basically, what it does is,
is it takes a browser, right?

54
00:03:18.282 --> 00:03:22.183
Could be Chrome, could be Firefox,
might even be Safari,

55
00:03:22.183 --> 00:03:24.143
and it points it at your site.

56
00:03:24.143 --> 00:03:26.978
And literally, if those component
tests we saw were testing,

57
00:03:26.978 --> 00:03:28.644
we're supposed to simulate a user.

58
00:03:28.644 --> 00:03:33.399
This is really just firing up a browser,
pointing it at a website, and

59
00:03:33.399 --> 00:03:35.183
doing the thing, right?

60
00:03:35.183 --> 00:03:40.939
And so I have one that's kinda
filled out a little bit.

61
00:03:40.939 --> 00:03:45.161
And then I have one that is not so
much to kinda show you.

62
00:03:45.161 --> 00:03:49.689
One thing I wanna point out is,
and this is on purpose.

63
00:03:49.689 --> 00:03:54.794
That if I only showed you this part of it,

64
00:03:54.794 --> 00:04:00.499
right, you would be like,
that looks a lot,

65
00:04:00.499 --> 00:04:06.217
other than his little
bonus weight in there.

66
00:04:06.217 --> 00:04:09.686
That looks a lot like testing library,
right?

67
00:04:09.686 --> 00:04:16.392
That is because testing library
did that on purpose, right?

68
00:04:16.392 --> 00:04:21.082
And the difference is, that was loading a
component mounting to a simulated DOM and

69
00:04:21.082 --> 00:04:22.758
letting you do stuff with it.

70
00:04:22.758 --> 00:04:27.177
Great for individual components,
right, super fast, but

71
00:04:27.177 --> 00:04:31.696
a lot of times you are missing
the entirety of the app, right?

72
00:04:31.696 --> 00:04:35.255
And there's a time and
a place for have both.

73
00:04:35.255 --> 00:04:37.038
Unit tests are fast, easy,
you get that feedback.

74
00:04:37.038 --> 00:04:39.795
You can see exactly what line
wasn't doing what you expected.

75
00:04:39.795 --> 00:04:43.042
But overall, sometimes you gotta
look at the big picture too.

76
00:04:43.042 --> 00:04:49.632
And so yes, this is going to
theoretically pull up the app.

77
00:04:49.632 --> 00:04:53.875
It's going to navigate
to a particular page.

78
00:04:53.875 --> 00:04:57.463
I think this one's running
at 3,000 now though,

79
00:04:57.463 --> 00:05:00.427
cuz I have two servers
going at the same time.

80
00:05:00.427 --> 00:05:05.271
And it's going to navigate to it and it's
gonna expect it to have a given title,

81
00:05:05.271 --> 00:05:07.893
just simply by looking at the page itself.

82
00:05:07.893 --> 00:05:11.935
And some of the tooling is
really great about this as well.

83
00:05:11.935 --> 00:05:15.249
So if we go to local host 3,000,
you kinda see the app real quick.

84
00:05:19.830 --> 00:05:23.516
&gt;&gt; Steve Kinney: Is that not
the port that is running on?

85
00:05:23.516 --> 00:05:26.785
Server's on 3,000, sorry.

86
00:05:26.785 --> 00:05:31.497
This is at 51 74.

87
00:05:35.264 --> 00:05:38.468
&gt;&gt; Steve Kinney: Right, it's a to-do list.

88
00:05:38.468 --> 00:05:40.443
Who's never seen a to-do list example app?

89
00:05:46.373 --> 00:05:49.671
&gt;&gt; Steve Kinney: Great, this one's got
a little bit of a server thing going on,

90
00:05:49.671 --> 00:05:51.360
awesome, cool, cool, cool.

91
00:05:51.360 --> 00:05:55.156
You can add stuff, you can move stuff,
you can check it, it's done.

92
00:05:55.156 --> 00:05:58.719
And these tests are great because you
don't necessarily need to have pulled

93
00:05:58.719 --> 00:05:59.954
anything apart, right?

94
00:05:59.954 --> 00:06:04.797
If you're just saying, I would like to
start refactoring stuff, and the act of

95
00:06:04.797 --> 00:06:09.368
pulling stuff apart to get it easier to
unit test causes my anxiety to go up.

96
00:06:09.368 --> 00:06:10.888
These tests are great.

97
00:06:10.888 --> 00:06:14.209
They're heavy and take forever to run, and

98
00:06:14.209 --> 00:06:20.147
they are a little bit flakier than seeing
it four was the output of two plus two.

99
00:06:20.147 --> 00:06:23.076
But if you need a lot of test
coverage real fast and not,

100
00:06:23.076 --> 00:06:26.905
this will never show up on a test
coverage report in any meaningful way.

101
00:06:26.905 --> 00:06:31.433
But spiritually, if you need to know that
you haven't fundamentally broken your app,

102
00:06:31.433 --> 00:06:35.306
this thing is at least gonna go through
the app faster than you are, right?

103
00:06:35.306 --> 00:06:37.771
And so here we have it running.

104
00:06:37.771 --> 00:06:39.123
And then I have some tests in here.

105
00:06:39.123 --> 00:06:41.879
And then we'll show it on that
accident counter, too, so

106
00:06:41.879 --> 00:06:43.182
you can see it in both ways.

107
00:06:43.182 --> 00:06:47.226
I did change that to the wrong port.

108
00:06:47.226 --> 00:06:52.455
Cool, So let's go ahead and
let's spin this one up.

109
00:06:52.455 --> 00:06:57.689
So I just have it set
as npx Playwright test.

110
00:07:01.990 --> 00:07:07.194
&gt;&gt; Steve Kinney: And you can see that
it is going to pull up chromium and

111
00:07:07.194 --> 00:07:13.008
give me a full report, but
should add the test is failing.

112
00:07:13.008 --> 00:07:15.639
We'll take a look at that in a second.

113
00:07:15.639 --> 00:07:20.433
What I wanna do is, get the dash dash UI,

114
00:07:20.433 --> 00:07:23.536
cuz this is really great.

115
00:07:23.536 --> 00:07:30.270
Because you can see, not only,
you can run all your tests from here,

116
00:07:30.270 --> 00:07:34.465
but you can also see the timeline, right?

117
00:07:34.465 --> 00:07:35.500
So there it was loading.

118
00:07:42.024 --> 00:07:43.132
&gt;&gt; Steve Kinney: It goes ahead.

119
00:07:43.132 --> 00:07:45.147
And you can see, with the click events,

120
00:07:45.147 --> 00:07:49.066
you can see that little button of where
it clicked, where to highlight event.

121
00:07:49.066 --> 00:07:52.840
Just like we saw with the plug in before,

122
00:07:52.840 --> 00:07:58.502
you could actually take this and
you can get by placeholder,

123
00:07:58.502 --> 00:08:03.177
or you can get by label text,
or so on and so forth.

124
00:08:03.177 --> 00:08:06.684
Sometimes the automatic selector isn't
the best, but you can kinda go through.

125
00:08:06.684 --> 00:08:11.019
You can even navigate through the page,
see it before and after, and

126
00:08:11.019 --> 00:08:13.581
begin to navigate through everything.

127
00:08:13.581 --> 00:08:18.597
My problem is that right now this one
isn't clearing stuff out in between,

128
00:08:18.597 --> 00:08:22.353
which we will talk about as
a separate thing in a second.

129
00:08:22.353 --> 00:08:25.251
But we'll do this with the async counter,
and

130
00:08:25.251 --> 00:08:28.833
then I'll show you some
techniques around this as well.

131
00:08:28.833 --> 00:08:32.613
But, this is the first one I opened up,
but you can actually kinda go through and

132
00:08:32.613 --> 00:08:34.088
just take it on your app today.

133
00:08:34.088 --> 00:08:37.812
In fact,
this is going to local host 5,174.

134
00:08:37.812 --> 00:08:41.022
You could point this thing at production,
right?

135
00:08:41.022 --> 00:08:42.804
Good luck navigating login and
stuff like that.

136
00:08:42.804 --> 00:08:46.279
But theoretically, it is just a browser

137
00:08:46.279 --> 00:08:50.784
that you are controlling with JavaScript,
right?

138
00:08:50.784 --> 00:08:54.657
And it pulls up your application and
it goes through, and

139
00:08:54.657 --> 00:08:58.460
it can start hitting buttons and
doing things, right?

140
00:08:58.460 --> 00:09:02.038
This is one running locally
in development, but

141
00:09:02.038 --> 00:09:05.624
we can also take a look at
other examples as well.

142
00:09:05.624 --> 00:09:11.517
But you can kinda see an individual test
in a given case, so on and so forth.

143
00:09:11.517 --> 00:09:13.133
Again, the timeline, everything.

144
00:09:13.133 --> 00:09:19.068
The important part is, let's look at,
other than a MPX Playwright in it and

145
00:09:19.068 --> 00:09:25.873
a tiny little bit of test files, there's
not much that I've written in here, right?

146
00:09:25.873 --> 00:09:30.679
But we will talk about one of
the problems in a second, which is,

147
00:09:30.679 --> 00:09:34.862
basically what we're saying is,
fire up the browser,

148
00:09:34.862 --> 00:09:38.601
go to the page, right,
before each one, right?

149
00:09:38.601 --> 00:09:44.015
In this case, it should have the title
that we expect, right, in the browser.

150
00:09:44.015 --> 00:09:48.340
Go ahead and get the input field,
create task,

151
00:09:48.340 --> 00:09:53.544
find the Submit button,
type something in, and click.

152
00:09:53.544 --> 00:09:57.562
This one, it is little angry cuz
I've got seven with the same title.

153
00:09:57.562 --> 00:10:00.936
We will talk about some of
those problems in a second.

154
00:10:00.936 --> 00:10:05.027
Go find a heading, right,
that has the name of the title,

155
00:10:05.027 --> 00:10:07.959
we can expect it to be
visible on the page.

