WEBVTT

1
00:00:00.320 --> 00:00:03.270
&gt;&gt; Bianca Gandolfo: Our task is to
loop through the suspects array.

2
00:00:04.600 --> 00:00:07.173
&gt;&gt; Speaker 2: So I named a function, foo.

3
00:00:07.173 --> 00:00:07.807
&gt;&gt; Bianca Gandolfo: Mm,

4
00:00:07.807 --> 00:00:14.890
okay.
&gt;&gt; Bianca Gandolfo: Like that?

5
00:00:14.890 --> 00:00:16.420
&gt;&gt; Speaker 2: Yep, brackets.

6
00:00:16.420 --> 00:00:18.477
&gt;&gt; Bianca Gandolfo: Okay.

7
00:00:18.477 --> 00:00:21.781
&gt;&gt; Speaker 2: Set up a for loop, so for

8
00:00:21.781 --> 00:00:26.016
(let i = 0;
&gt;&gt; Bianca Gandolfo: Okay.

9
00:00:26.016 --> 00:00:32.190
&gt;&gt; Speaker 2: i &lt; game.length;

10
00:00:32.190 --> 00:00:39.660
i++).
&gt;&gt; Bianca Gandolfo: Great.

11
00:00:39.660 --> 00:00:44.300
What does this kind of loop do?
&gt;&gt; Speaker 2: It's going to

12
00:00:44.300 --> 00:00:48.042
advance through the members of the array.
&gt;&gt; Bianca Gandolfo: What does this mean

13
00:00:48.042 --> 00:00:50.616
right here?
&gt;&gt; Speaker 2: It declares the sort of

14
00:00:50.616 --> 00:00:55.510
iterative variable.
&gt;&gt; Bianca Gandolfo: Mm-hm.

15
00:00:55.510 --> 00:00:56.825
&gt;&gt; Speaker 2: And starts it at 0.

16
00:00:56.825 --> 00:00:57.555
&gt;&gt; Bianca Gandolfo: Mm-hm.

17
00:00:57.555 --> 00:01:00.496
&gt;&gt; Speaker 2: And then will go through

18
00:01:00.496 --> 00:01:04.908
the number of the members of array as

19
00:01:04.908 --> 00:01:10.620
specified by the length of the array.
&gt;&gt; Bianca Gandolfo: Yeah, so while

20
00:01:10.620 --> 00:01:15.455
this is true, it will increment by one.
&gt;&gt; Speaker 2: That's right.

21
00:01:15.455 --> 00:01:16.031
&gt;&gt; Bianca Gandolfo: Cool,

22
00:01:16.031 --> 00:01:25.263
why did you choose this kind of loop?
&gt;&gt; Speaker 2: Because,

23
00:01:25.263 --> 00:01:33.240
don't really necessarily know
the number of the members in advance.

24
00:01:33.240 --> 00:01:39.220
So if you added any, it would be dynamic
based on it's length, basically.

25
00:01:39.220 --> 00:01:44.170
So if you ever add in members to
the array it would still be workable.

26
00:01:47.730 --> 00:01:49.156
So, console.log

27
00:01:54.783 --> 00:02:04.085
&gt;&gt; Speaker 2: (game[i]);

28
00:02:04.085 --> 00:02:06.101
&gt;&gt; Bianca Gandolfo: Cool.

29
00:02:12.211 --> 00:02:13.958
&gt;&gt; Bianca Gandolfo: What do we think?

30
00:02:13.958 --> 00:02:17.061
Is it gonna work?
&gt;&gt; Speaker 2: I think it's gonna log

31
00:02:17.061 --> 00:02:21.129
suspects when we do call function.
&gt;&gt; Bianca Gandolfo: You think it's

32
00:02:21.129 --> 00:02:24.559
gonna log suspects?
&gt;&gt; Speaker 2: We didn't call the function

33
00:02:24.559 --> 00:02:26.540
there.
&gt;&gt; Bianca Gandolfo: Yeah, so

34
00:02:26.540 --> 00:02:27.650
we didn't call the function.

35
00:02:28.820 --> 00:02:35.333
That's a problem.
&gt;&gt; Bianca Gandolfo: And

36
00:02:35.333 --> 00:02:40.250
then when we call it, we're going to
loop through, and you think it's going

37
00:02:40.250 --> 00:02:43.520
to call suspects, why?
&gt;&gt; Speaker 2: I was

38
00:02:43.520 --> 00:02:48.484
just playing around with it and I think
that's what happened to me, but I think,

39
00:02:48.484 --> 00:02:51.331
yeah, at that first level
of the game object,

40
00:02:51.331 --> 00:02:55.355
the only thing it has is this
object suspects, which is in array.

41
00:02:55.355 --> 00:03:00.465
So, at that level of like game.whatever,

42
00:03:00.465 --> 00:03:03.630
there's only suspects.

43
00:03:03.630 --> 00:03:06.710
So, there should be a length of just one,
and

44
00:03:06.710 --> 00:03:10.530
it will return that array of objects.
&gt;&gt; Bianca Gandolfo: Got it.

45
00:03:10.530 --> 00:03:16.090
I see what you're saying, but it's an
object, so object doesn't have a length.

46
00:03:18.580 --> 00:03:21.130
So that's a problem.

47
00:03:21.130 --> 00:03:24.592
For the very first time that
this loops runs, what is i?

48
00:03:24.592 --> 00:03:27.020
How about checkered flag?

49
00:03:37.305 --> 00:03:43.072
&gt;&gt; Speaker 2: i is,
&gt;&gt; Speaker 2: i is,

50
00:03:43.072 --> 00:03:44.120
&gt;&gt; Bianca Gandolfo: [LAUGH] Probably

51
00:03:44.120 --> 00:03:50.336
gonna, I was like.
&gt;&gt; Speaker 2: The object,

52
00:03:50.336 --> 00:03:52.690
the game of object itself.
&gt;&gt; Bianca Gandolfo: Where are we saying

53
00:03:52.690 --> 00:03:53.793
that i is the game object?

54
00:03:53.793 --> 00:03:57.759
What line?
&gt;&gt; Speaker 2: It'd be

55
00:04:00.899 --> 00:04:03.870
&gt;&gt; Speaker 2: 14, because, yeah, 15,

56
00:04:03.870 --> 00:04:09.161
console.log(game[i]), and
at that point, i is,

57
00:04:12.859 --> 00:04:17.193
&gt;&gt; Speaker 2: Actually, i is, game.length

58
00:04:17.193 --> 00:04:23.572
is going to be
&gt;&gt; Bianca Gandolfo: If you said type of i,

59
00:04:23.572 --> 00:04:31.430
what do you think it is supposed to be?
&gt;&gt; Bianca Gandolfo: A number.

60
00:04:31.430 --> 00:04:33.120
Do you see where we're

61
00:04:33.120 --> 00:04:36.091
assigning it to a number?
&gt;&gt; Speaker 3: Yeah,

62
00:04:36.091 --> 00:04:39.676
in line 14 where you're saying let i = 0.
&gt;&gt; Bianca Gandolfo: Mm-hm.

63
00:04:39.676 --> 00:04:41.423
&gt;&gt; Speaker 3: 0 is the starting iteration

64
00:04:41.423 --> 00:04:42.690
number.
&gt;&gt; Bianca Gandolfo: Yeah, so

65
00:04:42.690 --> 00:04:47.360
at this line this is where we are defining
i, and we're starting it out at zero.

66
00:04:49.370 --> 00:04:52.844
So in the very first
loop what do you think i

67
00:04:52.844 --> 00:04:57.707
is?
&gt;&gt; Bianca Gandolfo: Well we're setting it.

68
00:04:57.707 --> 00:04:59.703
I.
&gt;&gt; Speaker 2: Yeah, I'm sorry.

69
00:04:59.703 --> 00:05:00.326
It's 0.

70
00:05:00.326 --> 00:05:01.672
&gt;&gt; Bianca Gandolfo: Zero.
&gt;&gt; Speaker 2: Yeah.

71
00:05:01.672 --> 00:05:02.750
&gt;&gt; Bianca Gandolfo: Yeah.

72
00:05:02.750 --> 00:05:05.380
So i is 0 on the very first loop, so

73
00:05:05.380 --> 00:05:10.308
then is i less than game.length.?
&gt;&gt; Speaker 2: So

74
00:05:10.308 --> 00:05:15.169
is game.length undefined or is it zero?
&gt;&gt; Bianca Gandolfo: I

75
00:05:15.169 --> 00:05:19.859
think it's undefined.
&gt;&gt; Speaker 2: So, [COUGH] we could fix it

76
00:05:19.859 --> 00:05:24.940
by game.suspects.length.

77
00:05:24.940 --> 00:05:27.805
&gt;&gt; Bianca Gandolfo: Okay.
&gt;&gt; Bianca Gandolfo: And that-

78
00:05:27.805 --> 00:05:28.777
&gt;&gt; Speaker 2: And that will have a length

79
00:05:28.777 --> 00:05:32.564
then because it's an array, not an object.
&gt;&gt; Bianca Gandolfo: Yeah, and then game.i,

80
00:05:32.564 --> 00:05:33.237
right?

81
00:05:33.237 --> 00:05:35.230
So i is 0,
we can kind of replace it like that.

82
00:05:35.230 --> 00:05:43.578
What is game at 0?
&gt;&gt; Speaker 2: Game at 0 should-

83
00:05:43.578 --> 00:05:44.448
&gt;&gt; Speaker 3: Shouldn't it be

84
00:05:44.448 --> 00:05:47.216
game.suspects?
&gt;&gt; Bianca Gandolfo: Mm-hm,

85
00:05:47.216 --> 00:05:48.490
because there is no games at 0.

86
00:05:49.760 --> 00:05:50.260
Perfect.

87
00:06:01.480 --> 00:06:02.378
Any questions about that and

88
00:06:02.378 --> 00:06:06.249
how that works?
&gt;&gt; Bianca Gandolfo: So

89
00:06:06.249 --> 00:06:07.754
this is a little tricky.

90
00:06:07.754 --> 00:06:11.070
It's like one of those
easy things that people

91
00:06:12.270 --> 00:06:16.958
give magic to, and really it's telling
you everything that it's doing.

92
00:06:16.958 --> 00:06:23.497
So we're defining where our
start variable is, right?

93
00:06:23.497 --> 00:06:27.981
We're giving it a condition, while this
condition is true, and then every loop,

94
00:06:27.981 --> 00:06:30.620
do a thing, right, and
it's gonna increment.

95
00:06:30.620 --> 00:06:34.180
You can increment it multiple times or
whatever.

96
00:06:35.420 --> 00:06:37.890
So there isn't anything
magic happening here.

97
00:06:39.080 --> 00:06:44.260
We use them a lot with arrays.
&gt;&gt; Speaker 2: Someone in the chat

98
00:06:44.260 --> 00:06:47.085
rooms getting fancy with for each.
&gt;&gt; Bianca Gandolfo: Nice.

99
00:06:47.085 --> 00:06:50.752
We'll get there in the next-
&gt;&gt; Speaker 2: Get there?

100
00:06:50.752 --> 00:06:51.812
&gt;&gt; Bianca Gandolfo: Mm-hm.

101
00:06:53.939 --> 00:06:54.490
&gt;&gt; Speaker 2: Or game?

102
00:06:54.490 --> 00:06:57.163
Is it a fair game to also use map?
&gt;&gt; Bianca Gandolfo: Mm-hm.

103
00:06:57.163 --> 00:07:00.060
You could use map if you
wanna return an array.

104
00:07:00.060 --> 00:07:05.620
Yeah, we're gonna, in the next slides
after this, we do each in map, yeah.

105
00:07:05.620 --> 00:07:06.120
Awesome.

106
00:07:07.360 --> 00:07:09.960
So where was I?

107
00:07:09.960 --> 00:07:11.410
Yeah, so there's no magic here.

108
00:07:13.950 --> 00:07:16.500
Why do we use this kind of
loop with an array, and

109
00:07:18.860 --> 00:07:23.486
would you use this with an object?
&gt;&gt; Speaker 2: Well with an array,

110
00:07:23.486 --> 00:07:26.105
arrays have numerical values
associated with them.

111
00:07:26.105 --> 00:07:30.110
So they map well onto
the way this literates.

112
00:07:30.110 --> 00:07:30.710
&gt;&gt; Bianca Gandolfo: Yep,

113
00:07:30.710 --> 00:07:32.320
exactly, and that's it.

114
00:07:32.320 --> 00:07:37.653
So this loop has really nothing
to do with arrays, we have a for

115
00:07:37.653 --> 00:07:42.077
end loop, right,
which is actually for objects.

116
00:07:50.136 --> 00:07:50.673
&gt;&gt; Bianca Gandolfo: Which has

117
00:07:50.673 --> 00:07:54.240
a special relationship, but
this for loop is just doing math.

118
00:07:54.240 --> 00:07:59.380
It's very straightforward.
&gt;&gt; Bianca Gandolfo: Cool,

119
00:07:59.380 --> 00:08:04.394
any questions?
&gt;&gt; Speaker 2: Could you also use brackets?

120
00:08:04.394 --> 00:08:10.130
So it would be game.["suspects"].length?
&gt;&gt; Bianca Gandolfo: Yeah,

121
00:08:10.130 --> 00:08:11.570
you could also do that.

122
00:08:14.490 --> 00:08:19.330
I don't recommend using brackets
when you don't have to.

123
00:08:19.330 --> 00:08:24.419
I use it in my examples just to remind
you that that's a thing that exists,

124
00:08:24.419 --> 00:08:29.195
but in general if you can do a dot,
it saves you four or so keystrokes.

125
00:08:29.195 --> 00:08:35.005
I think that’s best, and
we have to use brackets here, why?

126
00:08:44.934 --> 00:08:46.242
&gt;&gt; Speaker 2: Me?

127
00:08:46.242 --> 00:08:46.859
&gt;&gt; Bianca Gandolfo: Mm-hm.

128
00:08:46.859 --> 00:08:48.167
&gt;&gt; Speaker 2: Because.

129
00:08:52.027 --> 00:08:53.282
&gt;&gt; Speaker 2: All because,

130
00:08:53.282 --> 00:08:58.825
I guess you can use a dot if key
was like a property on the object,

131
00:08:58.825 --> 00:09:02.798
which in this case it's
not a property of it,

132
00:09:02.798 --> 00:09:05.749
it's just like a variable.
&gt;&gt; Bianca Gandolfo: Yep.

133
00:09:07.310 --> 00:09:12.586
What's the giveaway that it's a variable?

134
00:09:12.586 --> 00:09:13.447
&gt;&gt; Speaker 2: Let?
&gt;&gt; Bianca Gandolfo: Yeah,

135
00:09:13.447 --> 00:09:14.258
let.
&gt;&gt; Speaker 2: Yeah, okay.

136
00:09:14.258 --> 00:09:15.034
&gt;&gt; Bianca Gandolfo: Yeah, and

137
00:09:15.034 --> 00:09:19.864
you can leave this off to be honest,
but that's the giveaway, and

138
00:09:19.864 --> 00:09:27.590
you could change this
&gt;&gt; Bianca Gandolfo: To whatever you want.

139
00:09:27.590 --> 00:09:28.590
It's just a variable name.

140
00:09:29.790 --> 00:09:33.102
I like to show that by
just calling it pickly,

141
00:09:33.102 --> 00:09:38.296
that's what it's gonna be.
&gt;&gt; Bianca Gandolfo: It

142
00:09:38.296 --> 00:09:40.465
just needs to match, awesome.

