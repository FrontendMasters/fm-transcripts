WEBVTT

1
00:00:00.000 --> 00:00:04.457
So our task is to loop
through the suspects array.

2
00:00:04.457 --> 00:00:09.789
&gt;&gt; So I named a function foo.

3
00:00:09.789 --> 00:00:10.785
&gt;&gt; Okay.

4
00:00:13.187 --> 00:00:14.995
&gt;&gt; Like that?

5
00:00:14.995 --> 00:00:16.733
&gt;&gt; Yep, brackets.

6
00:00:16.733 --> 00:00:21.891
Set up a for loop, so for.

7
00:00:21.891 --> 00:00:22.753
Let i = 0.

8
00:00:22.753 --> 00:00:25.094
[COUGH]
&gt;&gt; Okay.

9
00:00:25.094 --> 00:00:30.317
&gt;&gt; i is less than game.length,
&gt;&gt; Okay.

10
00:00:30.317 --> 00:00:31.307
&gt;&gt; i++.

11
00:00:34.582 --> 00:00:43.119
&gt;&gt; Great, what does this kind of loop do?

12
00:00:43.119 --> 00:00:46.927
&gt;&gt; It's going to advance through
the members of the array.

13
00:00:46.927 --> 00:00:49.510
&gt;&gt; What does this mean right here?

14
00:00:49.510 --> 00:00:56.925
&gt;&gt; It declares the sort of iterative
variable and starts it at 0.

15
00:00:56.925 --> 00:01:02.063
And then, well, go through that number of

16
00:01:02.063 --> 00:01:09.215
the members of array a specified
by the length of the array.

17
00:01:09.215 --> 00:01:12.816
&gt;&gt; Yeah, so while this is true,
it will increment by 1.

18
00:01:12.816 --> 00:01:14.197
&gt;&gt; Yep, that's right.

19
00:01:14.197 --> 00:01:21.148
&gt;&gt; Cool,
why did you choose this kind of loop?

20
00:01:23.906 --> 00:01:28.007
&gt;&gt; Because don't really necessarily

21
00:01:28.007 --> 00:01:32.935
know the number of the members in advance.

22
00:01:32.935 --> 00:01:38.675
So if you added any, it would be
dynamic based on its length, basically.

23
00:01:38.675 --> 00:01:40.913
&gt;&gt; Yeah.
&gt;&gt; So if you ever add in members to

24
00:01:40.913 --> 00:01:43.798
the array, it would still be workable.

25
00:01:43.798 --> 00:01:44.774
&gt;&gt; Got it.

26
00:01:46.650 --> 00:01:52.061
&gt;&gt; So, console.log,

27
00:01:56.825 --> 00:02:00.680
game[i], and

28
00:02:00.680 --> 00:02:04.813
then semicolon.

29
00:02:04.813 --> 00:02:10.160
&gt;&gt; Cool, What

30
00:02:10.160 --> 00:02:13.915
do we think?

31
00:02:13.915 --> 00:02:14.535
Is it gonna work?

32
00:02:14.535 --> 00:02:18.934
&gt;&gt; I think it's gonna log suspects,
if you do a call function.

33
00:02:18.934 --> 00:02:21.636
&gt;&gt; Do you think it's gonna log suspects?

34
00:02:21.636 --> 00:02:23.373
&gt;&gt; Yeah, cuz we called it.

35
00:02:23.373 --> 00:02:25.406
&gt;&gt; It didn't call the function there.

36
00:02:25.406 --> 00:02:30.551
&gt;&gt; Yeah, so we didn't call the function,
that's a problem.

37
00:02:31.912 --> 00:02:37.061
And then when we call it,
we're gonna loop through.

38
00:02:37.061 --> 00:02:43.253
And you think it's gonna call suspects,
why?

39
00:02:43.253 --> 00:02:46.684
&gt;&gt; Cuz I was just playing around with it,
and I think that's what happened to me.

40
00:02:46.684 --> 00:02:51.319
But I think, yeah,
at that first level of the game object,

41
00:02:51.319 --> 00:02:56.255
the only thing it has is this
object suspects which is an array.

42
00:02:56.255 --> 00:03:00.036
So, at that level of game dot whatever,

43
00:03:00.036 --> 00:03:06.043
there's only suspects, so
there should be a length of just 1,

44
00:03:06.043 --> 00:03:09.956
and it will return that array of objects.

45
00:03:09.956 --> 00:03:10.551
&gt;&gt; Got it.

46
00:03:10.551 --> 00:03:12.828
I see what you're saying.

47
00:03:12.828 --> 00:03:15.821
But it's an object, so
object doesn't have a length.

48
00:03:18.217 --> 00:03:20.873
So that's a problem.

49
00:03:20.873 --> 00:03:25.718
For the very first time that
this loop runs, what is i?

50
00:03:25.718 --> 00:03:27.404
How about checkered flag?

51
00:03:36.469 --> 00:03:43.085
&gt;&gt; I is me.

52
00:03:43.085 --> 00:03:46.224
&gt;&gt; [LAUGH]
&gt;&gt; I get it, [INAUDIBLE].

53
00:03:49.624 --> 00:03:51.644
&gt;&gt; The game object itself.

54
00:03:51.644 --> 00:03:54.823
&gt;&gt; Where are we saying
that i is the game object?

55
00:03:54.823 --> 00:03:55.652
What line?

56
00:04:00.908 --> 00:04:01.475
&gt;&gt; 14?

57
00:04:01.475 --> 00:04:07.429
&gt;&gt; Because, yeah, 15,
console.log(game[i]),

58
00:04:07.429 --> 00:04:14.931
at that point i is, Actually, i is,

59
00:04:16.753 --> 00:04:22.335
game.length is going to be,
&gt;&gt; If

60
00:04:22.335 --> 00:04:26.297
you said type of i,
what do you think it is supposed to be?

61
00:04:28.708 --> 00:04:29.534
&gt;&gt; Number?

62
00:04:29.534 --> 00:04:31.208
&gt;&gt; A number.

63
00:04:31.208 --> 00:04:35.390
Do you see where we're
assigning it to a number?

64
00:04:35.390 --> 00:04:39.279
&gt;&gt; Yeah, on line 14,
where you're saying let i = 0,

65
00:04:39.279 --> 00:04:41.828
0 is a starting iteration number.

66
00:04:41.828 --> 00:04:45.914
&gt;&gt; Yeah, so at this line,
this is where we are defining i.

67
00:04:45.914 --> 00:04:48.216
And we're starting it out at 0.

68
00:04:48.216 --> 00:04:53.487
So, the very first loop,
what do you think i is?

69
00:04:53.487 --> 00:04:57.851
&gt;&gt; [INAUDIBLE].

70
00:04:57.851 --> 00:05:00.827
&gt;&gt; Where we're setting it, i?

71
00:05:00.827 --> 00:05:02.411
&gt;&gt; Well, yeah, I'm sorry, 0.

72
00:05:02.411 --> 00:05:02.911
&gt;&gt; 0?
&gt;&gt; Yeah.

73
00:05:02.911 --> 00:05:05.114
&gt;&gt; Yeah, so i is 0 on the very first loop.

74
00:05:05.114 --> 00:05:09.226
So then is i less than game.length?

75
00:05:10.615 --> 00:05:14.160
&gt;&gt; So is game.length undefined or is it 0?

76
00:05:14.160 --> 00:05:16.569
&gt;&gt; I think it's undefined.

77
00:05:16.569 --> 00:05:21.941
&gt;&gt; So, [COUGH] we could fix
it by game.suspects.length.

78
00:05:24.211 --> 00:05:25.745
&gt;&gt; Okay.

79
00:05:25.745 --> 00:05:27.395
And now.

80
00:05:27.395 --> 00:05:29.572
&gt;&gt; And now we'll have a length
then because it's an array.

81
00:05:29.572 --> 00:05:30.852
&gt;&gt; Yeah.
&gt;&gt; Not an object.

82
00:05:30.852 --> 00:05:33.052
&gt;&gt; And then game[i], right?

83
00:05:33.052 --> 00:05:35.313
So i is 0,
we can kind of replace it like that.

84
00:05:35.313 --> 00:05:36.522
What is game[0]?

85
00:05:36.522 --> 00:05:41.762
&gt;&gt; Game[0] should

86
00:05:41.762 --> 00:05:46.503
be-
&gt;&gt; Shouldn't it be game.suspects?

87
00:05:46.503 --> 00:05:52.904
&gt;&gt; Because there is no games at 0,
yep, perfect.

88
00:05:54.691 --> 00:05:55.814
Awesome.

89
00:05:57.565 --> 00:06:03.679
Any questions about that and
how that works?

90
00:06:04.825 --> 00:06:07.305
So this is a little tricky.

91
00:06:07.305 --> 00:06:12.158
It's like one of those,
like easy things that people give magic to

92
00:06:12.158 --> 00:06:16.592
when really it's telling you
everything that it's doing.

93
00:06:16.592 --> 00:06:24.415
So we're defining where our
start variable is, right?

94
00:06:24.415 --> 00:06:27.494
We're giving it a condition while
this condition is true, and

95
00:06:27.494 --> 00:06:29.363
then every loop do its thing, right?

96
00:06:29.363 --> 00:06:35.012
And it's gonna increment, you can
increment it multiple times or whatever.

97
00:06:35.012 --> 00:06:38.611
So there isn't anything
magic happening here.

98
00:06:38.611 --> 00:06:41.699
We use them a lot with arrays.

99
00:06:41.699 --> 00:06:44.016
&gt;&gt; Is it a fair game to also use map.

100
00:06:44.016 --> 00:06:47.453
&gt;&gt; You could use map if
you wanna return an array.

101
00:06:47.453 --> 00:06:51.863
Yeah, in the next slides after this,
we do each and map.

102
00:06:51.863 --> 00:06:54.652
Yeah, awesome.

103
00:06:54.652 --> 00:06:57.142
So where was I?

104
00:06:57.142 --> 00:07:01.172
Yeah, so there's no magic here.

105
00:07:01.172 --> 00:07:03.823
Why do we use this kind
of loop with an array?

106
00:07:06.192 --> 00:07:07.456
And would you use this with an object?

107
00:07:09.802 --> 00:07:14.152
&gt;&gt; Well, with an array, arrays have
numerical values associated with them.

108
00:07:14.152 --> 00:07:17.281
So they map well onto
the way this iterates.

109
00:07:17.281 --> 00:07:19.531
&gt;&gt; Yep, exactly, and that's it.

110
00:07:19.531 --> 00:07:21.723
So this loop has really
nothing to do with arrays.

111
00:07:21.723 --> 00:07:27.336
We have a for end loop, Right,

112
00:07:27.336 --> 00:07:30.481
which is actually for objects, right?

113
00:07:37.785 --> 00:07:41.569
Which has a special relationship, but
this for loop is just doing math,

114
00:07:41.569 --> 00:07:43.192
it's very straightforward.

115
00:07:46.434 --> 00:07:49.373
Cool, any questions?

116
00:07:49.373 --> 00:07:54.075
&gt;&gt; Could you also use brackets,
so it would game.bracket strings

117
00:07:54.075 --> 00:07:58.823
suspects.length, would it- [CROSSTALK]
&gt;&gt; Yeah, you could also do that.

118
00:08:01.724 --> 00:08:06.562
I don't recommend using brackets
when you don't have to.

119
00:08:06.562 --> 00:08:12.528
I use it in my examples just to remind
you that that's a thing that exists,

120
00:08:12.528 --> 00:08:16.953
but in general if you can do a dot,
it saves you four or so

121
00:08:16.953 --> 00:08:19.859
keystroke, I think that's best.

122
00:08:19.859 --> 00:08:22.545
And we have to use brackets here, why?

123
00:08:25.678 --> 00:08:26.432
&gt;&gt; Me?

124
00:08:26.432 --> 00:08:29.503
&gt;&gt; Hm-hmm.

125
00:08:29.503 --> 00:08:32.521
&gt;&gt; Because,

126
00:08:39.536 --> 00:08:47.139
Well, because, I guess you could use a dot
if key was a property on the objects,

127
00:08:47.139 --> 00:08:51.467
but in this case,
it's not a property of it.

128
00:08:51.467 --> 00:08:52.766
It's just a variable.

129
00:08:52.766 --> 00:08:58.174
&gt;&gt; Yep,
what's the giveaway that it's a variable?

130
00:08:59.174 --> 00:09:00.687
Yeah, let.

131
00:09:00.687 --> 00:09:01.276
&gt;&gt; Let, yeah, my bad.

132
00:09:01.276 --> 00:09:08.086
&gt;&gt; Yeah, I mean you can leave this off,
to be honest, but that's the giveaway.

133
00:09:08.086 --> 00:09:14.785
And you could change this,
To whatever you want.

134
00:09:14.785 --> 00:09:16.966
It's just a variable name.

135
00:09:16.966 --> 00:09:21.235
I like to show that by
just calling it pickle.

136
00:09:21.235 --> 00:09:22.916
Pickly, that's what it's gonna be.

137
00:09:24.067 --> 00:09:28.719
It just needs to match, awesome.

