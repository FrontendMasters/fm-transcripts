WEBVTT

1
00:00:00.220 --> 00:00:02.620
&gt;&gt; Bianca Gandolfo: All right,
let's talk about arrow functions.

2
00:00:02.620 --> 00:00:06.020
Who uses arrow functions
in the day to day?

3
00:00:06.020 --> 00:00:08.250
Yeah, a couple of people, awesome.

4
00:00:09.370 --> 00:00:13.441
So here is our functions with
arrow function notation.

5
00:00:16.077 --> 00:00:17.644
&gt;&gt; Bianca Gandolfo: Let's see,
what are the differences here?

6
00:00:17.644 --> 00:00:23.844
We have a big fat arrow,
great, you see that around.

7
00:00:26.270 --> 00:00:30.050
&gt;&gt; Bianca Gandolfo: A lack of the function
keyword, is replaced by the arrow.

8
00:00:32.040 --> 00:00:36.766
And we don't have to wrap our parameters

9
00:00:36.766 --> 00:00:41.359
in a parentheses if there's only one.

10
00:00:48.138 --> 00:00:48.939
&gt;&gt; Bianca Gandolfo: And also,

11
00:00:48.939 --> 00:00:53.581
if it's one line you don't have
to wrap it in curly brackets.

12
00:00:53.581 --> 00:00:55.920
Those are the main differences.

13
00:00:55.920 --> 00:00:57.075
&gt;&gt; Speaker 2: So it's only cleaner,

14
00:00:57.075 --> 00:01:00.751
it doesn't necessarily have anything
beyond stylistic differences?

15
00:01:00.751 --> 00:01:02.098
&gt;&gt; Bianca Gandolfo: I'm just
talking about the syntax right now.

16
00:01:02.098 --> 00:01:06.038
It does have a very different behavior
than a regular function would.

17
00:01:06.038 --> 00:01:11.670
But just syntax-wise,
those are the main things to look out for.

18
00:01:13.850 --> 00:01:17.970
And it gets tricky when people
start doing multiple functions.

19
00:01:17.970 --> 00:01:20.769
Say this returned something.

20
00:01:24.331 --> 00:01:28.406
&gt;&gt; Bianca Gandolfo: And then you
wanna do something else with it in

21
00:01:28.406 --> 00:01:30.560
a different function.

22
00:01:31.870 --> 00:01:34.230
It starts to look a little crazy,
in my opinion.

23
00:01:37.430 --> 00:01:44.040
But the main difference is that
it's gonna bind the context.

24
00:01:44.040 --> 00:01:50.539
And the context is the value that
this has to its parent context.

25
00:01:50.539 --> 00:01:55.238
I know that sounds a little
confusing to some people who aren't

26
00:01:55.238 --> 00:01:58.330
familiar with using contexts.

27
00:01:58.330 --> 00:02:02.090
But that's the main difference, really,

28
00:02:02.090 --> 00:02:06.550
is that it doesn't own
its own keyword this.

29
00:02:06.550 --> 00:02:10.290
All functions have a keyword this
that gets bound at call time.

30
00:02:10.290 --> 00:02:12.820
Again, I'm not gonna talk
too much about the details.

31
00:02:12.820 --> 00:02:14.220
I have another course,

32
00:02:14.220 --> 00:02:18.212
and there's a lot of courses on here
that talk about how that works.

33
00:02:18.212 --> 00:02:22.718
But it's important to know that arrow
functions do not have their own value

34
00:02:22.718 --> 00:02:23.369
for this.

35
00:02:23.369 --> 00:02:27.485
And they inherit,
they reach up into the parent scope and

36
00:02:27.485 --> 00:02:30.763
grab that value of this
in that parent scope.

37
00:02:30.763 --> 00:02:34.805
And this replaces any time you see .bind.

38
00:02:34.805 --> 00:02:36.790
Have you guys used bind before?

39
00:02:36.790 --> 00:02:38.590
So this replaces the need for that.

40
00:02:38.590 --> 00:02:42.913
Or it replaces a need if you ever say,
var this equals that, and

41
00:02:42.913 --> 00:02:48.250
then you refer like that .whatever,
you know what I'm talking about?

42
00:02:48.250 --> 00:02:50.310
Have you guys or self?

43
00:02:50.310 --> 00:02:51.240
Var self equals this?

44
00:02:51.240 --> 00:02:52.598
Have you guys seen that?

45
00:02:52.598 --> 00:02:57.344
Cuz sometimes your context or
your keyword this loses its value,

46
00:02:57.344 --> 00:03:01.143
sometimes it's through
asynchronous functions or

47
00:03:01.143 --> 00:03:04.265
nested functions, it can lose its value.

48
00:03:04.265 --> 00:03:09.770
And so there're some tricks that you have

49
00:03:09.770 --> 00:03:17.010
to do to keep this keyword
with a value that you wanted.

50
00:03:17.010 --> 00:03:19.420
And a lot of times, it'll just be
the window and you're like great,

51
00:03:19.420 --> 00:03:20.900
that's not what I wanted.

52
00:03:20.900 --> 00:03:23.664
Or take you a little
while to figure out why,

53
00:03:23.664 --> 00:03:26.523
why is it saying undefined
is not a function?

54
00:03:26.523 --> 00:03:32.270
And stuff like that, so
that takes care of that.

55
00:03:32.270 --> 00:03:37.270
However, it does get tricky because we
expect all functions to have its own

56
00:03:37.270 --> 00:03:40.640
value for this and it doesn't.

57
00:03:40.640 --> 00:03:45.980
Another thing is that it doesn't have
its own value for the arguments keyword.

58
00:03:47.010 --> 00:03:49.930
So the arguments keyword, at call time,

59
00:03:49.930 --> 00:03:54.700
gets bound to all the arguments that
are being passed into the function.

60
00:03:55.830 --> 00:04:01.550
So the arguments of this,
the arguments keyword is the same

61
00:04:01.550 --> 00:04:05.710
as the arguments that are being passed,
except it's this object like array.

62
00:04:05.710 --> 00:04:06.400
And that comes for

63
00:04:06.400 --> 00:04:11.050
free in all of our regular functions
in JavaScript, and that's great.

64
00:04:11.050 --> 00:04:13.660
However, in arrow functions
we don't have that.

65
00:04:13.660 --> 00:04:15.700
So those are just some
things to keep in mind.

66
00:04:15.700 --> 00:04:19.490
Another thing to keep in mind is just
that the variances in syntax can be a bit

67
00:04:19.490 --> 00:04:20.230
confusing.

68
00:04:22.060 --> 00:04:25.580
Particularly when there's
an automatic return.

69
00:04:26.740 --> 00:04:29.929
I recommend if you're trying to return
something from an arrow function,

70
00:04:29.929 --> 00:04:32.480
just write an explicit return function.

71
00:04:32.480 --> 00:04:37.140
Because you have to understand,
sometimes it'll return something and

72
00:04:37.140 --> 00:04:38.520
other times it won't.

73
00:04:38.520 --> 00:04:42.870
And it all has to do with whether or
not something's a statement, and

74
00:04:42.870 --> 00:04:46.700
you have to truly understand deeply what
a statement is and that's complicated.

75
00:04:46.700 --> 00:04:49.920
So the easy fix is just write a return
statement if you're trying to return

76
00:04:49.920 --> 00:04:57.850
something from that function instead
of letting it auto return, cool?

77
00:04:57.850 --> 00:04:59.320
Does that make sense?

78
00:04:59.320 --> 00:05:00.099
Any questions?

79
00:05:01.910 --> 00:05:06.452
&gt;&gt; Speaker 3: Please, just repeat the
relationship with the arguments between

80
00:05:06.452 --> 00:05:09.540
the arrow function and-
&gt;&gt; Bianca Gandolfo: Yeah,

81
00:05:09.540 --> 00:05:13.670
so have you ever referenced the keyword
arguments in the body of a function?

82
00:05:15.450 --> 00:05:22.904
So in an arrow function, it doesn't have
that, so it would just be undefined.

83
00:05:22.904 --> 00:05:28.546
Yeah, yeah, cool.

84
00:05:32.668 --> 00:05:33.469
&gt;&gt; Bianca Gandolfo: Anything else?

85
00:05:35.466 --> 00:05:40.241
&gt;&gt; Speaker 4: Maybe this is a tangent, but
I'm curious about in the return statement

86
00:05:40.241 --> 00:05:44.948
there, you talked really quick
about using back-ticks yesterday.

87
00:05:44.948 --> 00:05:49.766
And so obviously the dollar sign bracket
syntax is different for the thing there.

88
00:05:49.766 --> 00:05:50.973
So what all is happening there?

89
00:05:50.973 --> 00:05:53.016
And is that something that's ES6 specific?

90
00:05:53.016 --> 00:05:53.864
&gt;&gt; Bianca Gandolfo: Mm-hm.

91
00:05:53.864 --> 00:05:54.526
&gt;&gt; Speaker 4: I'm not familiar with that.

92
00:05:54.526 --> 00:05:56.541
&gt;&gt; Bianca Gandolfo: Yeah, so
this is a template string,

93
00:05:56.541 --> 00:05:59.079
which is one of my
favorite things about ES6.

94
00:06:00.760 --> 00:06:05.030
Basically, it allows you to,
I think it's called interpolation or

95
00:06:05.030 --> 00:06:05.770
something like that.

96
00:06:05.770 --> 00:06:11.300
But basically,
you can add variable names in here.

97
00:06:11.300 --> 00:06:13.425
So you wrap it with a dollar sign bracket.

98
00:06:13.425 --> 00:06:19.583
Similar, if you've used a templating
language, it's kind of like that,

99
00:06:19.583 --> 00:06:24.670
like Mustache or JSX and
things like that have this built in.

100
00:06:24.670 --> 00:06:29.510
I guess JSX might be a template string.

101
00:06:29.510 --> 00:06:34.649
Anyway, point is you can
reference a variable

102
00:06:34.649 --> 00:06:41.776
name without having to say
quotation plus name plus quotation.

103
00:06:41.776 --> 00:06:44.635
How we have it up here, see this,

104
00:06:44.635 --> 00:06:49.961
this is before template strings,
so it's just a lot of mess.

105
00:06:49.961 --> 00:06:53.069
And then sometimes,
maybe you forgot to close a string or

106
00:06:53.069 --> 00:06:56.393
you forgot to add a plus on
the other side and you get an error.

107
00:06:56.393 --> 00:06:58.146
And it just wastes a whole second.

108
00:06:58.146 --> 00:06:58.841
&gt;&gt; Speaker 4: Sure, and

109
00:06:58.841 --> 00:07:03.355
the back ticks are just required
to use that template's chain form?

110
00:07:03.355 --> 00:07:07.265
&gt;&gt; Bianca Gandolfo: Mm-hm, so this is
gonna evaluate to a string, it will look

111
00:07:07.265 --> 00:07:12.524
up the name, and then you can also do math
in here too if you want stuff like that.

112
00:07:12.524 --> 00:07:17.295
Or if there's a property,
you can do stuff like that.

113
00:07:17.295 --> 00:07:20.431
Yeah, it's pretty nice.

