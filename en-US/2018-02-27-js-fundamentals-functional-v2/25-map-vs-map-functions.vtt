WEBVTT

1
00:00:00.200 --> 00:00:01.700
&gt;&gt; Bianca Gandolfo: Little
bit of a mind bender.

2
00:00:01.700 --> 00:00:06.270
Map is very similar, but there's a key
difference that I wanna point out.

3
00:00:07.270 --> 00:00:12.640
So, here's underscore map.

4
00:00:12.640 --> 00:00:16.210
Again, there's native array map method,
which we won't implement.

5
00:00:17.780 --> 00:00:22.200
You can write it out just the same
as you would write for each except.

6
00:00:22.200 --> 00:00:25.140
Instead of for each you put map.
&gt;&gt; Bianca Gandolfo: Obviously,

7
00:00:25.140 --> 00:00:26.890
the behavior is different
because its not each.

8
00:00:26.890 --> 00:00:28.540
And we'll go onto that.

9
00:00:28.540 --> 00:00:33.671
So the key difference between each and
map that people really confuse is

10
00:00:33.671 --> 00:00:38.110
that each does not return anything.

11
00:00:39.480 --> 00:00:41.300
The function does not return anything.

12
00:00:42.980 --> 00:00:45.130
Okay, that's really important.

13
00:00:45.130 --> 00:00:50.290
So, even if you wanted to return something
in your callback function, you can't.

14
00:00:50.290 --> 00:00:51.680
It just doesn't work like that.

15
00:00:54.240 --> 00:00:54.814
Cool?

16
00:00:54.814 --> 00:00:57.357
You guys promise you won't forget?

17
00:00:57.357 --> 00:01:01.557
Okay, and then map returns an array every

18
00:01:01.557 --> 00:01:06.201
time.
&gt;&gt; Bianca Gandolfo: So map,

19
00:01:06.201 --> 00:01:11.518
we use it to take lists and transform

20
00:01:11.518 --> 00:01:17.309
them into,
&gt;&gt; Bianca Gandolfo: A new

21
00:01:17.309 --> 00:01:20.357
array.
&gt;&gt; Bianca Gandolfo: So

22
00:01:20.357 --> 00:01:22.680
you can use it really to just
copy an array, if you wanted.

23
00:01:22.680 --> 00:01:26.490
But typically, you're going to use it
to manipulate change, update it and

24
00:01:26.490 --> 00:01:29.498
move it around, however you want.

25
00:01:29.498 --> 00:01:34.568
So.
&gt;&gt; Bianca Gandolfo: It

26
00:01:34.568 --> 00:01:35.770
looks a little similar.

27
00:01:35.770 --> 00:01:40.068
So we take a list and
then we have a callback function.

28
00:01:40.068 --> 00:01:46.325
And we call each one with this function,

29
00:01:46.325 --> 00:01:51.848
except that whatever this function

30
00:01:51.848 --> 00:01:58.120
returns It's going to go on the object.

31
00:01:58.120 --> 00:01:59.400
What does this function return?

32
00:02:04.410 --> 00:02:06.650
What does it return?
&gt;&gt; Speaker 2: Just a value.

33
00:02:06.650 --> 00:02:07.320
&gt;&gt; Bianca Gandolfo: What value is it

34
00:02:07.320 --> 00:02:08.896
returning?
&gt;&gt; Speaker 2: 1, 2, and

35
00:02:08.896 --> 00:02:11.590
3.
&gt;&gt; Bianca Gandolfo: That function?

36
00:02:11.590 --> 00:02:12.420
Where does this?

37
00:02:12.420 --> 00:02:19.420
So the only place it returns is In ES5 at
least it's where you say return and so

38
00:02:19.420 --> 00:02:25.020
we're not saying return here and so what
it's returning is undefined in this case.

39
00:02:25.020 --> 00:02:28.860
And so we're gonna loop through and

40
00:02:28.860 --> 00:02:33.069
we're gonna have an array of
length three of undefined values.

41
00:02:36.360 --> 00:02:36.890
That makes sense?

42
00:02:36.890 --> 00:02:41.600
Why is it length three?
&gt;&gt; Speaker 2: Each iteration of

43
00:02:41.600 --> 00:02:44.450
the original array?
&gt;&gt; Bianca Gandolfo: Because the original

44
00:02:44.450 --> 00:02:46.230
array is length three.

45
00:02:46.230 --> 00:02:50.574
Exactly, so for this utility method,

46
00:02:50.574 --> 00:02:55.513
it's going to return,
&gt;&gt; Bianca Gandolfo: An array of

47
00:02:55.513 --> 00:02:56.770
the same size every time.

48
00:02:58.740 --> 00:02:59.940
That's how it works.

