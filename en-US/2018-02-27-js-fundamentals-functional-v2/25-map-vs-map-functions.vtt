WEBVTT

1
00:00:00.000 --> 00:00:03.445
Little bit of a mind bender
map is very similar, but

2
00:00:03.445 --> 00:00:06.892
there's a key difference
that I want to point out,

3
00:00:06.892 --> 00:00:12.275
so, Here's underscore map,

4
00:00:12.275 --> 00:00:16.550
again, there's a native array map method,
which we won't implement.

5
00:00:16.550 --> 00:00:20.995
It looks you could write it out just
the same as you would write for

6
00:00:20.995 --> 00:00:23.970
each except instead of for each input map.

7
00:00:23.970 --> 00:00:26.995
Obviously the behavior is different
because it's not each and

8
00:00:26.995 --> 00:00:28.030
we'll go on to that.

9
00:00:28.030 --> 00:00:32.955
So the key difference between each and
map that people

10
00:00:32.955 --> 00:00:37.991
really confuse is that each
does not return anything,

11
00:00:37.991 --> 00:00:42.713
the function does not return anything.

12
00:00:42.713 --> 00:00:47.519
Okay, that's really important, so even if
you wanted to return something in your

13
00:00:47.519 --> 00:00:51.170
callback function, you can't,
it doesn't work like that.

14
00:00:53.740 --> 00:00:54.240
Cool.

15
00:00:55.600 --> 00:01:02.110
Guys promise you won't forget, Okay, and
then map, returns an array every time.

16
00:01:04.640 --> 00:01:09.904
So map, we use it to take lists and

17
00:01:09.904 --> 00:01:17.242
transform them into, A new array.

18
00:01:19.950 --> 00:01:24.690
So you can use it really to just copy
an array if you want it but typically,

19
00:01:24.690 --> 00:01:29.744
you're going to use it to manipulate
change, update it and move it around how

20
00:01:29.744 --> 00:01:35.397
whoever you want, so, It looks
a little similar, so we take a list.

21
00:01:38.050 --> 00:01:39.452
And then we have a callback function.

22
00:01:41.720 --> 00:01:44.111
Now, we call.

23
00:01:44.111 --> 00:01:44.611
Each one.

24
00:01:48.030 --> 00:01:53.010
With this function,
except that whatever this

25
00:01:53.010 --> 00:01:57.620
function returns is
gonna go on the object.

26
00:01:57.620 --> 00:01:59.047
What is this function return?

27
00:02:04.173 --> 00:02:04.920
What is the return?

28
00:02:04.920 --> 00:02:06.200
&gt;&gt; Just a value.

29
00:02:06.200 --> 00:02:08.271
&gt;&gt; What value is it returning?

30
00:02:08.271 --> 00:02:10.108
&gt;&gt; One two or three.

31
00:02:10.108 --> 00:02:11.500
&gt;&gt; That function, so

32
00:02:11.500 --> 00:02:16.461
the only place it returns is in ES5
at least is where you say return.

33
00:02:18.959 --> 00:02:23.991
And so we're not saying return here and
so what it's returning is undefined

34
00:02:23.991 --> 00:02:29.130
in this case, and so,
We're gonna loop through and

35
00:02:29.130 --> 00:02:32.912
we're gonna have an array of
length three of undefined values.

36
00:02:36.122 --> 00:02:40.559
That makes sense, why is it length three?

37
00:02:40.559 --> 00:02:43.290
&gt;&gt; Each iteration of the original array.

38
00:02:43.290 --> 00:02:47.908
&gt;&gt; Cuz the original array is length three,
exactly.

39
00:02:47.908 --> 00:02:50.662
So for this utility method,

40
00:02:50.662 --> 00:02:56.296
it's going to return an array
of the same size every time.

41
00:02:58.240 --> 00:02:59.930
That's how it works.

