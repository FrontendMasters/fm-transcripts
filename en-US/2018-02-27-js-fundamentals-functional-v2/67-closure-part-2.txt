[00:00:00]
>> Bianca Gandolfo: Next one, it's a little bit different. Who wants to start this time, Jamie?
>> Jamie: So you set up myAlert and it runs a function.
>> Bianca Gandolfo: It has not yet run anything, but-
>> Jamie: Yeah, but I assume you will next.
>> Bianca Gandolfo: Okay, let's do this.
>> Bianca Gandolfo: All right, let's just do this.

[00:00:29]
Excuse me, thank you for bearing with me. So myAlert, we had to call it every time. And then yeah, so help, I found a clue. And then what happens? Michael?
>> Michael: [COUGH]
Then we define another function called alerter which actually sets an alert with x as the argument, and-

[00:00:56]

>> Bianca Gandolfo: Well, it doesn't do that yet. It sets this, but it doesn't actually run the body of this function.
>> Michael: Yeah, that's right, okay.
>> Bianca Gandolfo: Yeah, okay?
>> Michael: Yeah.
>> Bianca Gandolfo: And then what happens next, Aisha?
>> Aisha: Alert gets X passed into it.
>> Bianca Gandolfo: What happens next? So we define this and then what happens?

[00:01:24]

>> Aisha: We time the alerter.
>> Bianca Gandolfo: Yeah, so we call the set time out. And what happens with a set time out is alerter goes away into somewhere deep in browser land and it's gonna get called in 1,000 seconds. And the question is, what happens first, the log or the alert?

[00:01:46]

>> Jamie: The log.
>> Bianca Gandolfo: Why?
>> Jamie: Because alerter won't be run for another 1,000 seconds.
>> Bianca Gandolfo: Yeah, because it's asynchronous, it'll go away, the alerter will call, but it doesn't block the execution of our function. But alerter will still be called later and some time in the future, right?

[00:02:08]
We're used to that, nothing surprising.
>> Michael: Does setTimeout automatically call a function without the parentheses, without invoking it? Like it's just an automatic [CROSSTALK]
>> Bianca Gandolfo: Well, if you had put parenthesis here, it would try to call whatever this returns. So it would call it first.
>> Michael: Okay.
>> Bianca Gandolfo: And then try to call it again and it would mess up.

[00:02:36]

>> Michael: Okay, so it just takes the function and then-
>> Bianca Gandolfo: Yeah and it calls it later, exactly. Cuz you only wanna put the parenthesis at the moment you want to execute the body of the function. And so, since this would return undefined, we'd really be trying to call undefined somewhere and we've all seen those values undefined is not a function

