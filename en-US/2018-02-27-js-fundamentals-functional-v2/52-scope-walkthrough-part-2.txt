[00:00:00]
>> Bianca Gandolfo: So this one says, a function's local scope variables are not available anywhere outside that function, regardless of the context it's called in, okay? So,
>> Bianca Gandolfo: Where did we leave off? I already forgot.
>> Speaker 2: Somewhere over here.
>> Bianca Gandolfo: Somewhere over here, do you wanna start?
>> Speaker 2: No, cuz that's boring.

[00:00:20]
Yeah, we're declaring firstFn, which is a function, and not running it immediately.
>> Bianca Gandolfo: Okay, so we're defining this function. And we have the function body here. We're not running it yet. Okay, Dan?
>> Dan: We're declaring second.
>> Bianca Gandolfo: Yeah, we're creating the secondFn.
>> Bianca Gandolfo: Skipping over it.
>> Ryan: And we're calling expect, using as a parameter this function.

[00:00:59]
And we don't know that it's necessarily going to be executed.
>> Bianca Gandolfo: Yeah, but I'll tell you that yes, it is actually gonna be executed. But there's nothing here telling us for sure that it's being executed, but I'll let you know that inside that expect function, it will execute this function.

[00:01:21]

>> Bianca Gandolfo: So Jenny, so this function is being called, what happens next?
>> Jenny: I don't know where the to.throw() runs it through.
>> Bianca Gandolfo: Well, we're still actually running this function. So we call this function. But when we call a function, we first need to enter into the body of the function and execute what's inside.

[00:01:46]

>> Jenny: Okay, so then it's calling the second function or secondFn within there.
>> Bianca Gandolfo: Yeah, so it's gonna call that function. And then, Josh.
>> Josh: It goes back up to the secondFn declaration and executes the code, which will be the problem.
>> Bianca Gandolfo: And then, Altimeer, what happens? So we're executing this.

[00:02:09]
What happens?
>> Altimeer: That then follow for the throw error?
>> Bianca Gandolfo: Yeah, so this is probably our error because local to firstFn [COUGH]
is in a different scope. So we don't have access to local to firstFn. So we're trying to assign something that doesn't exist. It's gonna throw an error.

[00:02:40]

>> Bianca Gandolfo: So that's where this to.throw comes from. Okay any questions for that one?
>> Bianca Gandolfo: Okay.
>> Bianca Gandolfo: Aisha, do you wanna do the next expect?
>> Aisha: Function's defined and it declares the firstFn.
>> Bianca Gandolfo: So we define this function, expect somewhere in the internals it's gonna call it, and then Cameron, what happens once it's called?

[00:03:15]

>> Cameron: It calls firstFn.
>> Bianca Gandolfo: Mm-hm, it's gonna call the firstFn, and Eddie, what happens next?
>> Eddie: So inside of firstFn up on line 64, localToFirstFn is set to the string first.
>> Bianca Gandolfo: Yep, okay, Kris, what happens next?
>> Kris: And then it calls the secondFn again.

[00:03:44]

>> Bianca Gandolfo: Yeah, and then Abdi, what happens next?
>> Abdi: It runs secondFn and assigns,
>> Abdi: The local first string to be first, assigns that to actual.
>> Bianca Gandolfo: Well,
>> Bianca Gandolfo: This is in a different scope though, than this one, still. So, as you would read it, it first looks, is this variable in this scope?

[00:04:17]
No, it's not. As you would read it, not necessarily how it's executed, you look then to the parent scope, which is not this one, this one is not in the same scope. You can even see when you collapse them they are siblings.
>> Bianca Gandolfo: So it will look out into this scope here.

[00:04:42]

>> Bianca Gandolfo: And then it will look out into this one. And nowhere have we defined the local to firstFn.
>> Bianca Gandolfo: Does that make sense?
>> Ryan: So the hierarchies are sort of defined statically?
>> Bianca Gandolfo: Yeah.
>> Ryan: Right.
>> Bianca Gandolfo: Mm-hm, yeah, it's called lexical scope, if you want the Wikipedia word for it.

[00:05:05]
But it's as you would read it, so where it's visually on the page. Yeah, okay, so, we don't have access to this. It's gonna throw an error.
>> Kris: And then expect is called with ACTUAL equal to null.
>> Bianca Gandolfo: Awesome, so, actual is null. Again, because before each it, we are resetting our null, our actual value to null.

[00:05:42]

>> Bianca Gandolfo: Great,
>> Bianca Gandolfo: Next one, it's a little bit longer.
>> Speaker 2: Can I ask about the last one too?
>> Bianca Gandolfo: Yeah.
>> Speaker 2: Is it by any chance a matter of order? If secondFn was declared before the firstFn, would you be able to call it there?
>> Bianca Gandolfo: So you're saying, if we, for example, put this function above.

[00:06:06]

>> Speaker 2: Yeah, just above the its.
>> Bianca Gandolfo: No, it still wouldn't work, cuz it's about the block that it's in.
>> Speaker 2: I guess I'm confused because when I write a big page code or something, and I'll have other functions on that same level that I call beside there. And I'm missing why they're outside of scope in that case, but I think you said it pretty clearly there, and it's just not clicking.

[00:06:38]

>> Bianca Gandolfo: Yeah, so when you put a variable inside of a function, it's local to that function. And when you do a look up, for example, this is a creation, right, we're declaring this. And this is a look up, right? We're looking up the value of that function. It's first gonna check in its own block, okay, and we haven't declared anything here, we haven't assigned anything.

[00:07:01]
So it's not there. And then it's gonna look up, okay? And so up,
>> Bianca Gandolfo: Is in this function. And when I say up, I don't mean up the lines, but up the scope tree, so up into the next parent function.
>> Speaker 2: Sure, so if we're at this step here, when we're calling it from the perspective of the firstFn, right?

[00:07:29]
Okay, I want to assign this variable. Okay, I did that, now I'm calling secondFn. Well, what is secondFn? I don't have that, let me go up a level. But then why doesn't it see the function right there, var secondFn?
>> Bianca Gandolfo: It does see this.
>> Speaker 2: It does?

[00:07:48]

>> Bianca Gandolfo: Yes.
>> Bianca Gandolfo: Yeah.
>> Bianca Gandolfo: Because secondFn is being declared in a parent scope.
>> Speaker 2: Wait, yeah, why would it throw an error because you're actually looking for the variable main and not Not the function.
>> Bianca Gandolfo: So localToFirstFn is the thing that's throwing the error, this one.
>> Speaker 2: Wait.

[00:08:12]

>> Bianca Gandolfo: Well, actually, this one, sorry. That one's throwing the error.
>> Bianca Gandolfo: Because it's first looking in here for something called localToFirstFn, and it's not there.
>> Speaker 2: So okay, okay.
>> Bianca Gandolfo: And then it looks here, and it's not there. And then it keeps going up until it says, well, it's not there.

[00:08:35]

>> Speaker 2: Okay, so the reason that the second test that we were looking at fails is because it calls firstFn, which goes into secondFn. And then secondFn still does not have access to localToFirstFn, okay.
>> Bianca Gandolfo: But I see what you mean about the order. And I think that's something important to point out, is the order.

[00:08:53]
Cuz it seems like this wouldn't have access, because this is underneath, right? That's what your assumption was, and you thought maybe the error had something to do with that.
>> Speaker 2: Yeah, there was some weird situation where that comes in.
>> Bianca Gandolfo: Yeah, and so that's another part of scope that comes into play, which is when things are defined in the order in which things are defined.

[00:09:14]

>> Bianca Gandolfo: So because firstFn isn't run until down here, we actually have executed all of this, right, we declared all of this, right, remember that? And then we called firstFn, and we go up here. So, secondFn has already been defined.
>> Speaker 2: Sure.
>> Bianca Gandolfo: Yeah, that's why that works.

[00:09:40]

>> Speaker 2: Okay, all right, thank you.
>> Bianca Gandolfo: Yeah, no, that's a good question, awesome. Okay, so the next one is, if an inner and outer variable share the same name, and that name is referenced in the inner scope, the inner scope variable masks the variable from the outer scope with the same name.

[00:10:02]
This renders the outer scope variables inaccessible from anywhere within the inner function block. [LAUGH] Where did we leave off actually? Okay, Michael.
>> Michael: Yep, we are making anonymous function.
>> Bianca Gandolfo: Well, actually, we start here.
>> Michael: Okay, cool, we are defining a variable sameName and setting it equal to outer.

[00:10:30]

>> Bianca Gandolfo: Yep, so we're defining the variable sameName, setting it to outer. What's the next thing that happens? Who's next? Did you just go?
>> Kris: Yeah, I did, but I can go again.
>> Bianca Gandolfo: No, it's okay. So it's either Ben or Aisha.
>> Aisha: I'll go, a function's defined.
>> Bianca Gandolfo: Yeah, we define a function, okay, alt new.

[00:10:58]

>> Ben: I was just reading the distribution, trying to understand what it is. Okay, so, we defined a function, then we called it.
>> Bianca Gandolfo: Yep, and then we called the function. Josh?
>> Josh: We evaluate the function body.
>> Bianca Gandolfo: Yep.
>> Josh: So we set sameName to inner, which places sameName equals outer.

[00:11:23]

>> Bianca Gandolfo: Yeah, so we declare a variable with the exact name as this variable sameName, we reassign the value here.
>> Bianca Gandolfo: And then-
>> Josh: Does it matter that you're redeclaring it?
>> Bianca Gandolfo: No, not really.
>> Jenny: It's gonna jump down to 91 and-
>> Bianca Gandolfo: Well, we have this one here first.

[00:11:48]

>> Jenny: It's setting actual to sameName.
>> Bianca Gandolfo: Mm-hm, and what is sameName?
>> Jenny: Inner.
>> Bianca Gandolfo: Inner.
>> Jenny: Yep.
>> Bianca Gandolfo: Okay, and then Ryan?
>> Ryan: Expect is called.
>> Bianca Gandolfo: Okay, so we exit this function and go to expect.
>> Bianca Gandolfo: You wanna take a stab?
>> Ryan: Sure, ACTUAL at this point is,

[00:12:14]

>> Ryan: Still inner.
>> Bianca Gandolfo: Mm-hm, so ACTUAL is inner.
>> Bianca Gandolfo: Do you have a question about that?
>> Altimeer: So would that be a case where if we, on the behavior, would use let and create a log scope?
>> Bianca Gandolfo: This is similar to the example with let. So instead of creating the block scope, we are creating a function scope, and we're doing what's called masking, so we're masking the value.

[00:12:45]
Because remember, you first look at your most local scope to get the value. If you don't have it, then you go up. But if you have it, and you also have one in your parent scope, you only find the one on your scope because you don't look up if you find value.

[00:13:00]
Does that make sense? What is this? Head, shoulders, knees, and toes, it's just like that.
>> Bianca Gandolfo: Okay,
>> Bianca Gandolfo: That make sense to everyone?
>> Bianca Gandolfo: What if we did this?
>> Bianca Gandolfo: Wait, I still need to do-
>> Ryan: Then you'd copy the next example.
>> Bianca Gandolfo: All right, [LAUGH] oops. Maybe I've done this too many times.

[00:13:33]
Okay, so, you have a question?
>> Ryan: Yeah, Sean's saying, he's just checking his understanding, if line 87 was declared with a let, would we still get the same result because it's scoped to the block?
>> Bianca Gandolfo: Yeah, it would still be the same. The let in this case doesn't matter.

[00:13:55]
Let in this case doesn't change anything because we have a function scope. So the let keyword creates what's called block scope, which is something that we didn't have before. So for if else statements, we could have a scope for that now with let. Before that if else statements, if you declared a variable in a loop or in brackets or in a switch statement or anything like that, it wasn't local to that block.

[00:14:31]
And so that would cause kind of some weird behaviors, especially if you had a lot of if else statements and reassigning variables and stuff like that. And there's also hoisting that happens, which we'll talk about. And so it can be misleading, and so we introduce let, by we, not me at all, I was not involved in that.

[00:14:51]
Let was introduced into the language, which creates a block scope, which enables us to have variables that are private to something other than a function. Before that, all we had was private function skill. Any more questions about this one?
>> Speaker 2: I'm still not quite getting it. Because it's looking at ACTUAL, right?

[00:15:11]
And ACTUAL is defined as null before this test. Is that fn function returning actual to the outer scope?
>> Bianca Gandolfo: So, this variable lives in the area.
>> Speaker 2: Because it's a global variable, well, in this kind of context. When we change it inside, it's changed outside.
>> Bianca Gandolfo: Yep.
>> Speaker 2: Okay, never mind.

[00:15:35]

>> Bianca Gandolfo: Exactly. So it's reaching up, changing it up there, so it will be accessed anywhere else, it would be the same value, yeah.
>> Bianca Gandolfo: Cool, so line 94, if an inner and an outer variable share the same name, and the name is referenced in the outer scope, the outer value binding will be used.

[00:16:01]
So this is kinda the opposite of what we just did. And what did we mean by, Dan?
>> Dan: Sorry, which line am I on?
>> Speaker 2: 95.
>> Bianca Gandolfo: 95.
>> Dan: That's the one we just did.
>> Bianca Gandolfo: Looks really similar doesn't it?
>> Dan: So declaring a variable, same thing.
>> Bianca Gandolfo: Yeah, so we declare the variable, same name.

[00:16:23]
We assign it to outer, I'll skip ahead. We're defining a function. And then we call the function and then what happens?
>> Speaker 2: Thanks for giving me fun stuff. So inside the function body we declare the same name variable and we give it the value inner.
>> Bianca Gandolfo: Yep, so same name, we assign it to inner.

[00:16:46]
And then it exits. Let's see, Cameron, what happens next? So we were just here, we just ran this.
>> Cameron: Line 100.
>> Bianca Gandolfo: Mm-hm.
>> Cameron: Set ACTUAL equal to the value of same name which is
>> Cameron: Outer?
>> Bianca Gandolfo: Yep, which is outer. And then we should expect ACTUAL to equal?

[00:17:16]

>> Cameron: Outer?
>> Bianca Gandolfo: Outer.
>> Bianca Gandolfo: Cool.
>> Bianca Gandolfo: All right.
>> Bianca Gandolfo: So this one, a new variable scope is created for every call to a function, as exemplified with a counter. So let's check this out.
>> Bianca Gandolfo: Chris, do you wanna start?
>> Kris: Sure, there's a variable created, fn, which is a function.

[00:17:55]

>> Bianca Gandolfo: We create this function, save it in a variable, and then Abdi, what happens?
>> Abdi: Then we run that function?
>> Bianca Gandolfo: We run the function. So we jump into the function body. And Jaime?
>> Jaime: And then we're setting innerCounter to.
>> Jaime: 10 basically.
>> Bianca Gandolfo: Yeah, so we're setting the innerCounter to 10 because at this point innerCounter is undefined.

[00:18:21]

>> Bianca Gandolfo: And then Michael what happens next?
>> Michael: You're taking innerCounter, setting it to innerCounter +1.
>> Bianca Gandolfo: To innerCounter-
>> Michael: Can it, yeah I can read it by itself in the same line, right? So that would make it 11.
>> Bianca Gandolfo: Yep.
>> Michael: ACTUAL to be set to 11.
>> Bianca Gandolfo: Yep, and then so we exit the body of this function.

[00:18:44]
We find ourselves on line 113.
>> Michael: So we expect that to be 11.
>> Bianca Gandolfo: Yeah we'll expect that to be 11. Okay, this is gonna seem repetitive but, it's actually very important. Aisha, do you wanna keep going? You like how I'm like do you want to but really what I'm saying is you have to?

[00:19:06]
Or you don't have to, strongly encouraged. [LAUGH]
>> Aisha: The function declared again?
>> Bianca Gandolfo: Is this declaring or invoked?
>> Aisha: Invoked.
>> Bianca Gandolfo: It's being invoked, yes. So we call the function and then we hop back into the function body. What happens next?
>> Altimeer: And now we're dealing with innerCounter is 11.

[00:19:32]

>> Bianca Gandolfo: So what is this line doing?
>> Altimeer: So we see the innerCounter is actually innerCounter or 10.
>> Bianca Gandolfo: So what is innerCounter?
>> Altimeer: 11.
>> Bianca Gandolfo: Where does it say that we're defining 11?
>> Altimeer: When we defined on 113, line 113.
>> Bianca Gandolfo: Yeah, so that's a common misconception. But what happens is whenever you call a function, you create a brand new function scope, every time.

[00:20:10]

>> Altimeer: So then it's 10?
>> Bianca Gandolfo: Mm-hm, it's 10.
>> Cameron: So then we set innerCounter to be itself plus 1, so then it's set to 11 again.
>> Bianca Gandolfo: It would be 11, ACTUAL would be set to 11. And we expect ACTUAL to equal-
>> Kris: 11.
>> Bianca Gandolfo: 11, awesome. Any questions about that?

[00:20:36]
So this is another kind of gotcha, but very important. Every time we call a function and when we get to the closure, this is gonna be really, really, really, really drilled into your head. Every time we call a function with the parentheses and location operator, a brand new scope is created.

[00:20:56]
Some people call it an execution context. And so you can think all the variables in that scope, when the function is called it's gonna be initialized as whatever they are, in this case 10. And then when you do it again, it'll be initialized again. So they're separate, they don't talk to each other.

[00:21:20]
They're just two different worlds of scope.
>> Bianca Gandolfo: Good? Okay, let's see.
>> Bianca Gandolfo: All right.
>> Bianca Gandolfo: Let's do this. How many more do we have left? One, two, three, four. Okay, let's just do one more and take a break. Has it been 30 minutes? Probably, right.
>> Bianca Gandolfo: I lose track of time.

[00:22:03]
I can talk forever, though. Okay, so next one is, a new variable scope is created for each call to a function, as exemplified with uninitialized string variables, okay? So I think we left off with you, Ryan.
>> Ryan: Mm-hm. Function is named and declared.
>> Bianca Gandolfo: Yeah, function is yeah, name and declared, and then it's called.

[00:22:31]
We execute the function body. Dan, what happens next?
>> Dan: We're executing function body, sorry.
>> Bianca Gandolfo: Yeah, we're executing the function body.
>> Dan: You're declaring local variable not giving it a value?
>> Bianca Gandolfo: Yep, we are declaring this variable. When it's not declared it holds the value undefined. And then we check if it's undefined.

[00:22:58]

>> Speaker 2: Since it is undefined, that'll return true and will execute the if statements. And so we'll set ACTUAL to the string 'alpha'.
>> Bianca Gandolfo: Mm-hm, exactly, and then since we entered into this if block, we will not enter into this else if, so this gets skipped. And we go down to the next line.

[00:23:19]
What happens here, Cameron?
>> Cameron: The variable is set to initialized.
>> Bianca Gandolfo: Yep. And then, Eddie, what happens?
>> Eddie: Then we're going into the expect, and ACTUAL will equal 'alpha'?
>> Bianca Gandolfo: Yep, then we're gonna call the function one more time. We're gonna enter into the function body. We're going to initialize this local variable.

[00:23:57]
What happens next, Chris?
>> Kris: The local variable is initialized. So it will call the else statement, ACTUAL equals omega.
>> Bianca Gandolfo: So, we're actually re. So when we call the new function, it's gonna create a brand new scope.
>> Kris: So it will be undefined again?
>> Bianca Gandolfo: Mm-hm.
>> [SOUND]

[00:24:21]

>> Bianca Gandolfo: Yeah, it's okay. So then what will happen? Abdi?
>> Abdi: Once it's undefined, we'll set ACTUAL to equal 'alpha'. Through the 'alpha'?
>> Bianca Gandolfo: And then, we go down here, we set a local variable to initialized, but this is still alpha.

