WEBVTT

1
00:00:00.370 --> 00:00:01.800
&gt;&gt; Bianca Gandolfo: You
have two options here.

2
00:00:01.800 --> 00:00:07.850
You have the challenging exercise,
or the relaxed exercise.

3
00:00:07.850 --> 00:00:11.970
So, we'll have about fifteen minutes.

4
00:00:11.970 --> 00:00:18.970
So, that will be like a break and
doing the exercise.

5
00:00:18.970 --> 00:00:21.380
The first exercise is reduced.

6
00:00:21.380 --> 00:00:26.426
So reduced is one of those methods
like map and filter, that are core.

7
00:00:26.426 --> 00:00:32.900
Core, core, to the heart of functional

8
00:00:32.900 --> 00:00:37.570
programming and even pseudo functional
programming which is what we're doing.

9
00:00:38.700 --> 00:00:44.100
And so it's important to
understand how to use it.

10
00:00:44.100 --> 00:00:48.550
The implementation is tough,
but very interesting.

11
00:00:48.550 --> 00:00:49.850
Let me tell you how it works.

12
00:00:49.850 --> 00:00:57.470
So reduce takes a collection and
it takes a callback function.

13
00:01:00.700 --> 00:01:08.660
And this function is going to, or reduce
always returns one value at the end.

14
00:01:08.660 --> 00:01:13.330
So math, remember math returns
an array of the same length.

15
00:01:13.330 --> 00:01:14.550
Each doesn't return anything,

16
00:01:14.550 --> 00:01:18.620
filter will return based on that
truthy test that we pass it.

17
00:01:18.620 --> 00:01:21.220
Reduce always returns one function.

18
00:01:21.220 --> 00:01:26.160
So what it does is it will call,
it does loop, though.

19
00:01:26.160 --> 00:01:31.309
It loops through the collection
calling that function and

20
00:01:31.309 --> 00:01:36.813
then based on,
&gt;&gt; Bianca Gandolfo: Whatever

21
00:01:36.813 --> 00:01:41.770
that function returns, it gets passed
on back and it gets accumulated.

22
00:01:41.770 --> 00:01:46.720
So that function it's gonna be called each
time with the past value of the return of

23
00:01:46.720 --> 00:01:51.460
that function, and the current value or
in the next value en loop.

24
00:01:51.460 --> 00:01:53.870
Does that make sense?

25
00:01:53.870 --> 00:01:56.800
So as we're looping and
we're calling this function,

26
00:01:56.800 --> 00:02:02.380
previously we always call the function
with current, item, index, list, right?

27
00:02:02.380 --> 00:02:07.050
In this case, we gonna call with the
previous value and the current value, and

28
00:02:07.050 --> 00:02:11.230
take those two values and
it's gonna return one value together.

29
00:02:11.230 --> 00:02:17.160
And the one in the example
everyone uses is addition.

30
00:02:17.160 --> 00:02:20.330
Some argue it's because reduce is so
confusing that no one can figure out how

31
00:02:20.330 --> 00:02:23.250
to do anything else except for
addition with it.

32
00:02:23.250 --> 00:02:29.570
Here it is, so we have a list
with two items, one and two.

33
00:02:29.570 --> 00:02:33.500
Our callback function is going to be
called with the previous value and

34
00:02:33.500 --> 00:02:38.760
the current value, so the very first go
around, and this is the initial value.

35
00:02:38.760 --> 00:02:41.010
You can also pass the initial value.

36
00:02:41.010 --> 00:02:46.530
So the initial value,
will be passed as an argument.

37
00:02:46.530 --> 00:02:50.310
You add them together zero plus one,
is one.

38
00:02:50.310 --> 00:02:52.950
So, sum is now one.

39
00:02:52.950 --> 00:02:53.880
N is then two.

40
00:02:56.220 --> 00:02:57.460
One plus two is three.

41
00:03:01.360 --> 00:03:04.670
So that's an example
how reduce is used and

42
00:03:04.670 --> 00:03:09.020
here's a more complex example, kind of.

43
00:03:10.960 --> 00:03:16.264
So,
&gt;&gt; Bianca Gandolfo: We have

44
00:03:16.264 --> 00:03:23.510
an initial value,
which is an object, okay?

45
00:03:24.790 --> 00:03:29.330
And our function takes result value key,
so

46
00:03:29.330 --> 00:03:34.539
there results or sorry the initial
value is the result at first right?

47
00:03:35.870 --> 00:03:38.490
So we start with this,
result is an object.

48
00:03:39.620 --> 00:03:44.150
And it says, if result at value,
value is going to be 1.

49
00:03:44.150 --> 00:03:48.610
If the key is A, you guys following?

50
00:03:49.800 --> 00:03:52.310
Tell me to stop if I'm going too fast.

51
00:03:52.310 --> 00:03:53.230
This is a little tricky.

52
00:03:54.240 --> 00:03:58.710
So if this is a common
pattern here to say like,

53
00:03:58.710 --> 00:04:02.760
if this exist then initialize at 0.

54
00:04:02.760 --> 00:04:03.980
Otherwise do something else.

55
00:04:03.980 --> 00:04:08.360
So this is if it exist or

56
00:04:08.360 --> 00:04:11.760
if it doesn't exist, yes.

57
00:04:11.760 --> 00:04:17.510
So if resulted value is false, it's
gonna go to the other side of this or,

58
00:04:17.510 --> 00:04:21.320
and it's gonna initialize result value,.

59
00:04:21.320 --> 00:04:25.810
Add an empty array, return that,
and it's gonna push the key.

60
00:04:28.170 --> 00:04:30.801
If it already exists though,

61
00:04:30.801 --> 00:04:35.965
it's just gonna return this and
then push the key to that.

62
00:04:40.605 --> 00:04:41.685
&gt;&gt; Bianca Gandolfo: That make sense,
what this line is doing?

63
00:04:46.129 --> 00:04:48.593
&gt;&gt; Bianca Gandolfo: No, okay,
we'll do it one more time.

64
00:04:48.593 --> 00:04:53.327
So,
&gt;&gt; Bianca Gandolfo: So

65
00:04:53.327 --> 00:05:00.900
what this is doing is it's collecting all
of the keys that have the same value.

66
00:05:03.965 --> 00:05:07.448
&gt;&gt; Bianca Gandolfo: And,
&gt;&gt; Bianca Gandolfo: So

67
00:05:07.448 --> 00:05:11.610
what it's doing is it's
initializing an empty object, and

68
00:05:11.610 --> 00:05:15.620
it's first checking is this
value in our object already?

69
00:05:15.620 --> 00:05:18.767
So result, empty object.

70
00:05:18.767 --> 00:05:25.050
The value for the first property,
for starting here, is gonna be one.

71
00:05:25.050 --> 00:05:28.345
So we're saying result dot one,
does that exist?

72
00:05:28.345 --> 00:05:31.493
No, it doesnt' exist yet.

73
00:05:31.493 --> 00:05:36.463
Okay, so then we're gonna go to this side
and we're gonna initialize result value

74
00:05:36.463 --> 00:05:39.740
to be an empty array and
then we're gonna push the key.

75
00:05:41.390 --> 00:05:46.680
So, result value is one,
is an empty array.

76
00:05:46.680 --> 00:05:50.870
So we're creating this first array,
and it's empty at first, and

77
00:05:50.870 --> 00:05:53.070
then we're pushing the key and
that key is A.

78
00:05:53.070 --> 00:05:58.560
And then we'll return that result, right?

79
00:05:58.560 --> 00:06:05.194
Which is an object that has a 1 and
an a inside of a array.

80
00:06:08.781 --> 00:06:13.280
&gt;&gt; Bianca Gandolfo: And then,
&gt;&gt; Bianca Gandolfo: We do it again.

81
00:06:13.280 --> 00:06:18.120
The same object,
this time the value is gonna be 2 Again,

82
00:06:18.120 --> 00:06:22.940
it's gonna initialize that, and
it creates this here, returns the result.

83
00:06:24.420 --> 00:06:27.400
Now we have something that matches,
this one, and

84
00:06:27.400 --> 00:06:29.480
result of that value, which is one.

85
00:06:29.480 --> 00:06:33.717
I'm sorry, it matches this one here and
so we'll just,

86
00:06:33.717 --> 00:06:37.351
instead of initializing it,
we'll push a key.

87
00:06:40.996 --> 00:06:44.590
&gt;&gt; Bianca Gandolfo: Okay and
then we return the result.

88
00:06:44.590 --> 00:06:45.130
So that's reduce.

89
00:06:45.130 --> 00:06:46.850
It's a little tricky.

90
00:06:48.310 --> 00:06:53.450
So the challenge,
if you want a challenging task,

91
00:06:53.450 --> 00:06:56.060
is to implement that under the hood.

92
00:06:57.090 --> 00:06:59.760
Has a sort of like accumulation effect.

93
00:06:59.760 --> 00:07:02.444
Where it has a memory and
it passes it along every single time.

94
00:07:05.799 --> 00:07:08.735
&gt;&gt; Bianca Gandolfo: And
then if you're feeling like it's late and

95
00:07:08.735 --> 00:07:10.700
you want to relax a little bit.

96
00:07:12.090 --> 00:07:15.838
We have eachRight,
which is a for-each, except for,

97
00:07:15.838 --> 00:07:20.084
instead of going from left to right,
you go from right to left.

98
00:07:25.041 --> 00:07:26.920
&gt;&gt; Bianca Gandolfo: So
it's very relaxed at this point.

99
00:07:26.920 --> 00:07:28.077
Yesterday that was-
&gt;&gt; Speaker 2: Just,

100
00:07:28.077 --> 00:07:31.275
it was like you had reversed
the array instead of,

101
00:07:31.275 --> 00:07:33.952
have a function that starts on the right.

102
00:07:36.077 --> 00:07:38.830
&gt;&gt; Bianca Gandolfo: You mean like,
that's how you would implement it?

103
00:07:38.830 --> 00:07:40.940
Is you would reverse the arguments?

104
00:07:40.940 --> 00:07:45.480
&gt;&gt; Speaker 2: No, I'm just saying
it just seems weird for each right,

105
00:07:45.480 --> 00:07:50.340
instead of doing four each in this
reversing the order of the array.

106
00:07:50.340 --> 00:07:52.030
&gt;&gt; Bianca Gandolfo: Yeah,
if you reverse the order the array,

107
00:07:52.030 --> 00:07:56.480
you are thinking about time complexity and
stuff, can be expensive.

108
00:07:56.480 --> 00:07:58.786
&gt;&gt; Speaker 2: Yeah,
it can if it's a huge array I guess.

109
00:08:01.445 --> 00:08:06.285
&gt;&gt; Bianca Gandolfo: Yeah,
it's just a thing to do if you don't feel

110
00:08:06.285 --> 00:08:09.190
like implementing reduce.

111
00:08:09.190 --> 00:08:11.360
However, reduce is pretty cool.

112
00:08:12.540 --> 00:08:15.880
So I recommend doing that one
even if it's intimidating, and

113
00:08:15.880 --> 00:08:16.720
I'll walk around and help.

