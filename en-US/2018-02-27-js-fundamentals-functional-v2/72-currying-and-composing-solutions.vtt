WEBVTT

1
00:00:00.850 --> 00:00:03.000
&gt;&gt; Bianca Gandolfo: So here's our
little reference for how this works.

2
00:00:04.600 --> 00:00:09.925
So let's create a function called curry.

3
00:00:09.925 --> 00:00:17.650
Const curry = some function.

4
00:00:17.650 --> 00:00:18.153
It takes a string.

5
00:00:23.619 --> 00:00:26.060
&gt;&gt; Bianca Gandolfo: Well,
let's save it like this for now.

6
00:00:27.930 --> 00:00:31.314
Takes a function, that's what it takes,

7
00:00:31.314 --> 00:00:37.879
snd then,
&gt;&gt; Bianca Gandolfo: We need to get it to

8
00:00:37.879 --> 00:00:44.192
work with this behavior but with just
two of them, we don't need to do this.

9
00:00:49.614 --> 00:00:52.835
&gt;&gt; Bianca Gandolfo: Okay, just because for

10
00:00:52.835 --> 00:00:58.159
this exercise I wanted to simplify it.

11
00:00:58.159 --> 00:01:03.016
For everyone's,
&gt;&gt; Bianca Gandolfo: Benefit really.

12
00:01:03.016 --> 00:01:05.688
Okay, so we have a function.

13
00:01:06.821 --> 00:01:10.116
&gt;&gt; Bianca Gandolfo: And we need to return,
&gt;&gt; Bianca Gandolfo: We need

14
00:01:10.116 --> 00:01:10.827
to return a function.

15
00:01:10.827 --> 00:01:11.560
We know that, right?

16
00:01:16.675 --> 00:01:17.201
&gt;&gt; Bianca Gandolfo: Okay.

17
00:01:19.653 --> 00:01:22.870
&gt;&gt; Bianca Gandolfo: So
when we call it return a function.

18
00:01:22.870 --> 00:01:28.680
When we call it a second time,
we wanna save that value.

19
00:01:28.680 --> 00:01:34.044
So we are going to need to be able to take
an argument there, for the first one.

20
00:01:39.340 --> 00:01:43.368
&gt;&gt; Bianca Gandolfo: And
then we are gonna return another function,

21
00:01:43.368 --> 00:01:50.725
we need to have a second argument,
&gt;&gt; Bianca Gandolfo: There and

22
00:01:50.725 --> 00:01:53.411
then once we get to that second argument,

23
00:01:53.411 --> 00:01:57.271
then we can call our function
with both of those arguments.

24
00:02:01.320 --> 00:02:04.010
&gt;&gt; Bianca Gandolfo: arg2,
we probably want to return it.

25
00:02:08.810 --> 00:02:10.650
Alright, so shall we run this?

26
00:02:12.750 --> 00:02:19.060
So the first thing that we do is we run
curry with our function name, okay.

27
00:02:22.060 --> 00:02:29.330
So function name is ABC and
we return this function.

28
00:02:29.330 --> 00:02:36.240
So curried now holds the value
of this function body here.

29
00:02:37.520 --> 00:02:40.976
When we call it, well when we can, so

30
00:02:40.976 --> 00:02:45.334
function is ABC and
then arg is going to be one.

31
00:02:47.908 --> 00:02:49.104
&gt;&gt; Bianca Gandolfo: And
then we return this function.

32
00:02:52.341 --> 00:02:53.370
&gt;&gt; Bianca Gandolfo: We call it again.

33
00:02:54.700 --> 00:02:56.920
We can do that,
because it returns a function, right?

34
00:02:56.920 --> 00:03:00.460
Remember when we tried it before, and it
didn't work because it returned undefined?

35
00:03:00.460 --> 00:03:04.001
Now it works because we are actually
returning a function and

36
00:03:04.001 --> 00:03:07.063
we can do this little bit
where we do it twice in a row.

37
00:03:09.266 --> 00:03:13.585
&gt;&gt; Bianca Gandolfo: And then we pass 2,
&gt;&gt; Bianca Gandolfo: And

38
00:03:13.585 --> 00:03:18.709
because of scope,
we retain access to fn, arg, and

39
00:03:18.709 --> 00:03:23.727
of course arg2, and so,
we're two levels deep.

40
00:03:23.727 --> 00:03:27.613
We're calling our function with arg and
arg2 and returning that value.

41
00:03:30.854 --> 00:03:35.050
&gt;&gt; Bianca Gandolfo: And that's the basis
of implementing a curry function.

42
00:03:35.050 --> 00:03:39.650
Obviously, it gets a little
bit more complicated when

43
00:03:39.650 --> 00:03:43.659
you have varying numbers of inputs, right?

44
00:03:44.870 --> 00:03:46.728
Longer arguments, right?

45
00:03:46.728 --> 00:03:50.790
For this one,
we're just assuming there's two.

46
00:03:50.790 --> 00:03:53.510
But if you can imagine,
if you don't know how many there are,

47
00:03:53.510 --> 00:03:58.040
there's some looping involved, probably
some recursion, to get that to work.

48
00:03:59.230 --> 00:04:00.430
But that's the basic value.

49
00:04:00.430 --> 00:04:02.505
So we're just returning nested functions.

50
00:04:07.666 --> 00:04:09.805
&gt;&gt; Bianca Gandolfo: Cool,
any questions about this?

51
00:04:12.836 --> 00:04:18.787
&gt;&gt; Bianca Gandolfo: No, okay and
the next one is compose.

52
00:04:22.531 --> 00:04:26.423
&gt;&gt; Bianca Gandolfo: Let's
get out our little example.

53
00:04:26.423 --> 00:04:28.557
Just so we have something to run.

54
00:04:33.003 --> 00:04:39.270
&gt;&gt; Bianca Gandolfo: Okay,
get our word wrap, perfect.

55
00:04:40.470 --> 00:04:46.790
So we have our compose function and for
this case we are going to do two as well.

56
00:04:46.790 --> 00:04:50.690
So we are going to say const compose

57
00:04:52.840 --> 00:04:57.800
equals function and
it is going to take two arguments.

58
00:05:01.310 --> 00:05:06.110
OK, and
the first thing that needs to happen

59
00:05:09.220 --> 00:05:15.810
is that we need to return a function,
so that we can call it later.

60
00:05:15.810 --> 00:05:16.495
So let's set that up.

61
00:05:16.495 --> 00:05:22.170
Let's return a function here and,

62
00:05:22.170 --> 00:05:29.743
it needs to be able to
take some arguments here.

63
00:05:34.753 --> 00:05:36.390
&gt;&gt; Bianca Gandolfo: Let's just
say it'll take one for now.

64
00:05:38.250 --> 00:05:43.590
And then we wanna first call exclaim.

65
00:05:43.590 --> 00:05:47.900
So that's the second one,
so we're going to call,

66
00:05:47.900 --> 00:05:52.150
let's call this function 1 and function 2.

67
00:05:52.150 --> 00:05:56.343
So let's call function 2, with our arg,

68
00:05:56.343 --> 00:06:00.659
and we're going to
return that to a result.

69
00:06:04.410 --> 00:06:07.931
&gt;&gt; Bianca Gandolfo: And then we are going
to be able to pass that result into

70
00:06:07.931 --> 00:06:09.590
the original function.

71
00:06:09.590 --> 00:06:12.847
The first function that we passed in, and

72
00:06:12.847 --> 00:06:16.951
we're just going to return
whatever that returns.

73
00:06:22.679 --> 00:06:24.388
&gt;&gt; Bianca Gandolfo: And
there you have it, so and

74
00:06:24.388 --> 00:06:29.164
this isn't taking into consideration
a variable number of functions passed or

75
00:06:29.164 --> 00:06:31.600
a variable number of arguments passed.

76
00:06:31.600 --> 00:06:35.380
Similarly with curry, you would have to

77
00:06:35.380 --> 00:06:40.688
probably,
&gt;&gt; Bianca Gandolfo: You'd

78
00:06:40.688 --> 00:06:42.650
have to keep track of how
many functions there are.

79
00:06:42.650 --> 00:06:47.090
And then for args, here, this would be
a problem with an arrow function because

80
00:06:47.090 --> 00:06:50.590
we'd probably would want to retain
access to the argument's key word.

81
00:06:50.590 --> 00:06:52.660
So we'd need to use a regular function for
that.

82
00:06:52.660 --> 00:06:58.602
Those are some considerations for
a more robust solution to compose.

83
00:07:01.753 --> 00:07:02.696
&gt;&gt; Bianca Gandolfo: But again so

84
00:07:02.696 --> 00:07:07.610
here we're returning a function
with an argument passed in.

85
00:07:08.860 --> 00:07:09.980
The second one.

86
00:07:09.980 --> 00:07:13.050
In this one,
we're returning nested arrays until we get

87
00:07:13.050 --> 00:07:15.640
everything that we need to
finally call our function.

88
00:07:15.640 --> 00:07:19.800
We retain access because parameters
are just like local scope variables.

89
00:07:21.850 --> 00:07:25.472
And yeah,
any questions about those solutions?

90
00:07:30.390 --> 00:07:34.682
&gt;&gt; Speaker 2: So if we wanted to basically
generalize either of these we can get into

91
00:07:34.682 --> 00:07:37.870
like storing arguments and
functions in an array.

92
00:07:37.870 --> 00:07:40.930
And the arguments object and
then slicing it off one by one and

93
00:07:40.930 --> 00:07:43.010
doing that recursively?

94
00:07:44.630 --> 00:07:46.509
That's basically how you
would kind of go about it?

95
00:07:47.600 --> 00:07:48.777
&gt;&gt; Bianca Gandolfo: Yeah,
well I think for,

96
00:07:52.138 --> 00:07:53.182
&gt;&gt; Bianca Gandolfo: For this one,

97
00:07:53.182 --> 00:07:58.530
if it wasn't an error function then
we had access to arguments array?

98
00:07:58.530 --> 00:07:59.960
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Bianca Gandolfo: You could just,

99
00:07:59.960 --> 00:08:04.512
you could really just
do it function apply.

100
00:08:04.512 --> 00:08:05.230
&gt;&gt; Speaker 2: Okay.

101
00:08:05.230 --> 00:08:07.584
&gt;&gt; Bianca Gandolfo: This, arguments.

102
00:08:07.584 --> 00:08:13.720
That would make it general, but for this,
for calling each of those functions,

103
00:08:13.720 --> 00:08:18.485
with the result of that function
would require some kind of loop.

104
00:08:18.485 --> 00:08:19.049
&gt;&gt; Speaker 2: Yeah.

105
00:08:19.049 --> 00:08:20.539
&gt;&gt; Bianca Gandolfo: Whether
it's a recursive loop or

106
00:08:20.539 --> 00:08:23.778
a while loop [CROSSTALK] or something
like that or just or regular loop?

107
00:08:23.778 --> 00:08:24.278
&gt;&gt; Speaker 2: Yeah.

108
00:08:26.010 --> 00:08:28.597
&gt;&gt; Bianca Gandolfo: That's
what you would have to do.

109
00:08:28.597 --> 00:08:29.303
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Bianca Gandolfo: Yeah.

