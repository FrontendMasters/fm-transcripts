WEBVTT

1
00:00:00.220 --> 00:00:03.700
&gt;&gt; Bianca Gandolfo: So we talked about
passing a function to a function and

2
00:00:03.700 --> 00:00:04.960
then calling it.

3
00:00:04.960 --> 00:00:06.830
What about passing a function
to a function, and

4
00:00:06.830 --> 00:00:09.410
then calling it with arguments?

5
00:00:09.410 --> 00:00:10.066
How might we do that?

6
00:00:10.066 --> 00:00:12.960
Who has

7
00:00:12.960 --> 00:00:22.434
an idea?
&gt;&gt; Bianca Gandolfo: So,

8
00:00:22.434 --> 00:00:27.270
if we were to pass arguments,
where would we do that?

9
00:00:27.270 --> 00:00:27.840
&gt;&gt; Speaker 2: So

10
00:00:27.840 --> 00:00:33.730
you could pass the arguments in along
with the function as parameters,

11
00:00:33.730 --> 00:00:37.010
and then in the body of that function.

12
00:00:37.010 --> 00:00:40.717
You could pass those parameters for that

13
00:00:40.717 --> 00:00:45.196
function into the function and call it.
&gt;&gt; Bianca Gandolfo: Yep, so

14
00:00:45.196 --> 00:00:51.123
something like this, maybe.
&gt;&gt; Bianca Gandolfo: Let's

15
00:00:51.123 --> 00:00:55.724
just do p.
&gt;&gt; Bianca Gandolfo: All right, so

16
00:00:55.724 --> 00:01:01.810
imagining that this function required
something to be passed to it.

17
00:01:01.810 --> 00:01:04.835
You can pass it as an argument, so

18
00:01:04.835 --> 00:01:10.950
we're calling if else.
&gt;&gt; Bianca Gandolfo: Where is it?

19
00:01:12.470 --> 00:01:13.770
Okay, I'll just write it up.

20
00:01:15.040 --> 00:01:23.258
For calling if else,
&gt;&gt; Bianca Gandolfo: With the true and

21
00:01:23.258 --> 00:01:27.327
then this function,

22
00:01:27.327 --> 00:01:32.540
fn 1, fn 2, and then HI.

23
00:01:32.540 --> 00:01:37.532
Just like that, condition will be true,
isTrue is this first

24
00:01:37.532 --> 00:01:43.292
function that we hadn't defined we'll
just imagine that it exists and

25
00:01:43.292 --> 00:01:48.609
then we'll pass it with p, p is HI.
&gt;&gt; Bianca Gandolfo: So

26
00:01:48.609 --> 00:01:49.460
that's how you would do it.

27
00:01:50.964 --> 00:01:53.210
Maybe it seems straightforward
after someone tells you,

28
00:01:53.210 --> 00:01:55.680
but sometimes that's tricky.

29
00:01:55.680 --> 00:01:57.150
Any questions about this?

30
00:01:57.150 --> 00:02:02.500
Do you have a question, Abdi?
&gt;&gt; Abdi: Yeah, so is HI in parenthesis,

31
00:02:02.500 --> 00:02:06.984
a p?
&gt;&gt; Bianca Gandolfo: Yeah, so one, two,

32
00:02:06.984 --> 00:02:09.240
three, four, one, two, three, four.

33
00:02:13.800 --> 00:02:22.150
So they're lined up in order.
&gt;&gt; Bianca Gandolfo: Okay?

34
00:02:22.150 --> 00:02:26.594
Awesome, so
we also have this rest operator.

35
00:02:26.594 --> 00:02:31.483
And,
&gt;&gt; Bianca Gandolfo: We,

36
00:02:33.854 --> 00:02:35.910
&gt;&gt; Bianca Gandolfo: Can do a cool thing.

37
00:02:35.910 --> 00:02:39.913
So if we wanna pass multiple,
we can then, let me copy what we had

38
00:02:39.913 --> 00:02:45.335
before.
&gt;&gt; Bianca Gandolfo: If we had multiple,

39
00:02:53.124 --> 00:02:56.005
&gt;&gt; Bianca Gandolfo: Oops, so now args,

40
00:02:56.005 --> 00:02:59.905
if we just console.logged

41
00:02:59.905 --> 00:03:05.040
it it's gonna look like an array.

42
00:03:05.040 --> 00:03:08.181
It's gonna have these things, and then,

43
00:03:16.680 --> 00:03:19.969
&gt;&gt; Bianca Gandolfo: This is not being kind

44
00:03:19.969 --> 00:03:21.984
to me today.

45
00:03:21.984 --> 00:03:26.203
There we go.
&gt;&gt; Bianca Gandolfo: This is what args

46
00:03:26.203 --> 00:03:26.921
looks like.

47
00:03:35.750 --> 00:03:38.100
&gt;&gt; Bianca Gandolfo: Okay, you guys saw it.

48
00:03:38.100 --> 00:03:39.810
So that's what args looks like.

49
00:03:39.810 --> 00:03:46.120
And then if we do the same thing and
we pass it with the dots.

50
00:03:46.120 --> 00:03:55.329
It's the same as saying,
&gt;&gt; Bianca Gandolfo: Calling

51
00:03:55.329 --> 00:03:56.040
it one at a time.

52
00:03:57.180 --> 00:04:02.720
So it takes out of the array, and

53
00:04:02.720 --> 00:04:05.630
passes it, as you would normally.

54
00:04:07.380 --> 00:04:10.466
So this is really similar to something,

55
00:04:10.466 --> 00:04:15.090
I'm not about to give you
the answer cuz I'm asking you.

56
00:04:15.090 --> 00:04:17.465
How is this done before ES6?

57
00:04:27.482 --> 00:04:28.543
&gt;&gt; Speaker 2: How is passing each

58
00:04:28.543 --> 00:04:30.964
of them one at a time done?
&gt;&gt; Bianca Gandolfo: Yeah, and

59
00:04:30.964 --> 00:04:35.863
just figuring out how to get
the rest of the arguments.

60
00:04:35.863 --> 00:04:36.760
&gt;&gt; Speaker 4: You'd have to call

61
00:04:36.760 --> 00:04:37.938
the arguments object and

62
00:04:37.938 --> 00:04:40.506
then you can [CROSSTALK] to an array.
&gt;&gt; Bianca Gandolfo: Yep,

63
00:04:40.506 --> 00:04:44.289
you have to figure out
the arguments object and

64
00:04:44.289 --> 00:04:48.751
then if you wanted to pass it
one at a time, as an array or

65
00:04:48.751 --> 00:04:53.830
as part of the arguments objects,
you would use apply.

66
00:04:53.830 --> 00:04:59.470
So apply is a function method that is,
I pretty much exclusively used for

67
00:04:59.470 --> 00:05:03.700
this purpose, which is to call
functions with the arguments keyword.

68
00:05:05.160 --> 00:05:09.650
And, if you're not familiar with it,
it's something worth looking into.

69
00:05:09.650 --> 00:05:15.180
Call, apply and bind are some core
methods that I would love to

70
00:05:15.180 --> 00:05:20.050
be able to sneak into this class but
I didn't even begin to think it was

71
00:05:20.050 --> 00:05:22.930
reasonable before I started planning
it but it's something to look into.

72
00:05:24.200 --> 00:05:26.860
No, I don't have, never mind.

73
00:05:26.860 --> 00:05:27.990
Not on Frontend Masters.

74
00:05:31.450 --> 00:05:37.018
Yeah, so before ES6,
we had to do something like this,

75
00:05:37.018 --> 00:05:39.460
where we'd slice it up.

76
00:05:41.130 --> 00:05:46.077
We wanna slice the first three off,
because we already know what those are and

77
00:05:46.077 --> 00:05:53.715
then we wanna just pass the rest.
&gt;&gt; Speaker 2: If you wanted to,

78
00:05:53.715 --> 00:05:58.132
could you slice out, say,
those first three, and

79
00:05:58.132 --> 00:06:02.870
then the first term of that
sort of arguments list?

80
00:06:02.870 --> 00:06:05.910
So if you did arguments for,
would it grab that first term and

81
00:06:05.910 --> 00:06:08.860
return the remaining arguments?

82
00:06:08.860 --> 00:06:10.530
Does that make sense?
&gt;&gt; Bianca Gandolfo: No,

83
00:06:10.530 --> 00:06:12.480
one more time.
&gt;&gt; Speaker 2: So,

84
00:06:12.480 --> 00:06:17.330
right here you're taking a slice,
you're getting rid of the first three

85
00:06:17.330 --> 00:06:22.034
because we know what they are, and then
you have the remaining arguments list.

86
00:06:22.034 --> 00:06:25.510
Could you, say,

87
00:06:25.510 --> 00:06:30.150
take those first three and the first term
of that arguments list and then return

88
00:06:30.150 --> 00:06:35.550
just the remaining arguments off of that?
&gt;&gt; Bianca Gandolfo: Take the first three-

89
00:06:35.550 --> 00:06:36.140
&gt;&gt; Speaker 2: Yeah, so

90
00:06:36.140 --> 00:06:38.980
the first three that we
already know are there.

91
00:06:38.980 --> 00:06:42.164
So you have the first three, and then
you have that remaining arguments list.

92
00:06:42.164 --> 00:06:43.100
&gt;&gt; Bianca Gandolfo: So you want to unshift

93
00:06:43.100 --> 00:06:44.961
the array, or shift the array?
&gt;&gt; Speaker 2: Well,

94
00:06:44.961 --> 00:06:47.250
just cut into that arguments list.

95
00:06:47.250 --> 00:06:50.950
So maybe take the first term
off of that arguments list, and

96
00:06:50.950 --> 00:06:53.860
then just return the remaining
arguments off of that list.

97
00:06:53.860 --> 00:06:57.260
So it would be four in this
case instead of three.

98
00:06:57.260 --> 00:07:00.680
And then,
I don't know if it would work, but

99
00:07:00.680 --> 00:07:05.020
possibly then take off the first term of-.
&gt;&gt; Bianca Gandolfo: The first term.

100
00:07:05.020 --> 00:07:07.440
&gt;&gt; Speaker 2: The first element of that

101
00:07:07.440 --> 00:07:12.770
arguments list.
&gt;&gt; Bianca Gandolfo: I think you lost me

102
00:07:12.770 --> 00:07:21.450
because this is slicing the first
three and it's returning the rest.

103
00:07:21.450 --> 00:07:29.798
So args is anything after this.
&gt;&gt; Speaker 2: Right,

104
00:07:29.798 --> 00:07:34.344
right, yeah, there's no real difference
between those first three and

105
00:07:34.344 --> 00:07:37.710
then the remaining list,
in the arguments list.

106
00:07:37.710 --> 00:07:40.156
I was just confused about something else.
&gt;&gt; Bianca Gandolfo: No

107
00:07:40.156 --> 00:07:43.023
worries.
&gt;&gt; Bianca Gandolfo: So

108
00:07:43.023 --> 00:07:48.050
then you can put whatever you want here.

