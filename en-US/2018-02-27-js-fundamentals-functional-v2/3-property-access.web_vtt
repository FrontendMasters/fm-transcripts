WEBVTT

1
00:00:00.100 --> 00:00:03.283
&gt;&gt; Bianca Gandolfo: So
we're gonna start with our core

2
00:00:03.283 --> 00:00:07.683
data structures which are objects and
arrays.

3
00:00:07.683 --> 00:00:10.120
We're all familiar with objects and
arrays?

4
00:00:10.120 --> 00:00:11.230
We've used them, great.

5
00:00:12.950 --> 00:00:14.180
So one of the things
we're gonna talk about,

6
00:00:14.180 --> 00:00:17.150
we're gonna talk about property access,
the dots and the brackets.

7
00:00:17.150 --> 00:00:19.955
We're gonna talk about
destructuring, nesting, loops, and

8
00:00:19.955 --> 00:00:21.441
nesting with destructuring.

9
00:00:23.270 --> 00:00:23.927
&gt;&gt; Bianca Gandolfo: Great.

10
00:00:26.664 --> 00:00:27.382
&gt;&gt; Bianca Gandolfo: So.

11
00:00:28.983 --> 00:00:33.000
&gt;&gt; Bianca Gandolfo: Here we are with
our object literal, it's a person,

12
00:00:33.000 --> 00:00:36.225
we're gonna introduce Mrs. White here.

13
00:00:36.225 --> 00:00:42.460
Mrs. White is one of the core people,
one of our suspects for the murder.

14
00:00:43.580 --> 00:00:46.693
Yeah, has anyone here played, Clue?

15
00:00:46.693 --> 00:00:49.162
Okay, really, like not a lot of people?

16
00:00:49.162 --> 00:00:53.857
It's like a pretty popular game,
there are eight or

17
00:00:53.857 --> 00:00:57.279
so characters depending on the year.

18
00:00:57.279 --> 00:01:00.789
Mrs. White, she is the maid or

19
00:01:00.789 --> 00:01:05.920
the housekeeper of the mansion of Mr.
Body.

20
00:01:07.540 --> 00:01:11.312
And so here we are, we're just
gonna construct a person object.

21
00:01:11.312 --> 00:01:17.320
We're gonna give it a property name, and
we're gonna assign that value, Mrs. White.

22
00:01:17.320 --> 00:01:18.549
And you can see here.

23
00:01:21.621 --> 00:01:24.210
&gt;&gt; Bianca Gandolfo: This is
an object literal notation, right?

24
00:01:24.210 --> 00:01:27.468
So, you've seen probably both
of them their equivalent.

25
00:01:29.270 --> 00:01:31.859
&gt;&gt; Bianca Gandolfo: Do we
need this quotes here?

26
00:01:36.422 --> 00:01:37.128
&gt;&gt; Unknown Female Student: No.

27
00:01:37.128 --> 00:01:39.372
&gt;&gt; Bianca Gandolfo: No, why not?

28
00:01:39.372 --> 00:01:43.352
&gt;&gt; Unknown Male Student: Just cuz it's,
[COUGH] one word.

29
00:01:43.352 --> 00:01:46.200
&gt;&gt; Bianca Gandolfo: Yeah, cuz it's
a string and it will automatically.

30
00:01:46.200 --> 00:01:51.353
So, we can delete that if we wanted,
whoops, is this editable?

31
00:01:51.353 --> 00:01:56.682
Maybe it's not, no, okay, awesome.

32
00:01:57.780 --> 00:02:01.740
So we've seen the dot with
the access in assignment.

33
00:02:01.740 --> 00:02:06.834
What are some other times you've seen the
dot in JavaScript aside from with objects?

34
00:02:10.770 --> 00:02:14.939
&gt;&gt; Bianca Gandolfo: How about
someone in the second row?

35
00:02:16.970 --> 00:02:17.961
&gt;&gt; Bianca Gandolfo: I guess cuz, one, two,

36
00:02:17.961 --> 00:02:20.238
three nodes goes,
do you guys know how to play that game?

37
00:02:23.360 --> 00:02:24.285
&gt;&gt; Bianca Gandolfo: You get to go.

38
00:02:24.285 --> 00:02:26.298
&gt;&gt; Unknown Male Student: When
you access some method.

39
00:02:26.298 --> 00:02:26.934
&gt;&gt; Bianca Gandolfo: Yeah.

40
00:02:29.124 --> 00:02:31.310
&gt;&gt; Bianca Gandolfo: Yep, anything else?

41
00:02:31.310 --> 00:02:32.930
A method on what, though?

42
00:02:32.930 --> 00:02:37.211
So when you access a method on an object,
sure.

43
00:02:37.211 --> 00:02:38.615
&gt;&gt; Unknown Male Student: Method
on that object.

44
00:02:38.615 --> 00:02:42.895
&gt;&gt; Bianca Gandolfo: Cool, what else,
where else have you seen a dot?

45
00:02:45.843 --> 00:02:47.320
&gt;&gt; Bianca Gandolfo: Any
other dots out there?

46
00:02:48.510 --> 00:02:49.860
So we see them with objects.

47
00:02:51.750 --> 00:02:53.983
Have we seen them with functions?

48
00:02:58.662 --> 00:02:59.351
&gt;&gt; Bianca Gandolfo: Oops.

49
00:03:02.642 --> 00:03:04.070
&gt;&gt; Unknown Male Student: Like for
promise function to this?

50
00:03:06.300 --> 00:03:07.750
&gt;&gt; Bianca Gandolfo: Yeah, like a dot then.

51
00:03:07.750 --> 00:03:08.550
Yeah.

52
00:03:08.550 --> 00:03:09.690
Yeah, with a promise.

53
00:03:09.690 --> 00:03:10.190
Awesome.

54
00:03:12.240 --> 00:03:13.429
What about with arrays?

55
00:03:19.083 --> 00:03:19.870
&gt;&gt; Bianca Gandolfo: You're
nodding your head.

56
00:03:21.130 --> 00:03:25.020
&gt;&gt; Unknown Male Student: If you're like,
trying to get the elements of the array.

57
00:03:25.020 --> 00:03:25.890
&gt;&gt; Bianca Gandolfo: You use a dot for
that?

58
00:03:28.190 --> 00:03:29.570
Or do you use a bracket?

59
00:03:29.570 --> 00:03:31.040
&gt;&gt; Unknown Male Student: You
use a bracket.

60
00:03:31.040 --> 00:03:32.700
&gt;&gt; Bianca Gandolfo: Usually
you would use a bracket, okay?

61
00:03:33.820 --> 00:03:36.960
Has anyone used a dot with an array?

62
00:03:39.170 --> 00:03:40.873
Think hard, in your life.

63
00:03:44.645 --> 00:03:45.610
&gt;&gt; Unknown Male Student: A nested object.

64
00:03:46.830 --> 00:03:47.990
&gt;&gt; Bianca Gandolfo: Yeah,
so if you're asked,

65
00:03:47.990 --> 00:03:50.850
if you're accessing it in a nested object,
that is true.

66
00:03:50.850 --> 00:03:53.493
It's not where I was going, but-
&gt;&gt; Unknown Male Student: Array methods?

67
00:03:53.493 --> 00:03:55.541
Yeah, like prototype methods?

68
00:03:55.541 --> 00:04:00.020
&gt;&gt; Bianca Gandolfo: Yeah,
dot prototype, yeah.

69
00:04:00.020 --> 00:04:02.430
&gt;&gt; Unknown Male Student: Using
native methods?

70
00:04:02.430 --> 00:04:03.450
&gt;&gt; Bianca Gandolfo: Is that online?

71
00:04:03.450 --> 00:04:04.340
&gt;&gt; Unknown Male Student: Yeah.

72
00:04:04.340 --> 00:04:09.220
&gt;&gt; Bianca Gandolfo: Yeah, using like
array dot push, yeah that length.

73
00:04:09.220 --> 00:04:12.150
Are you guy's thinking that and
just not telling me?

74
00:04:12.150 --> 00:04:14.546
Were you guys thinking that and
just not telling me?

75
00:04:14.546 --> 00:04:15.688
&gt;&gt; [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: You promise,

76
00:04:15.688 --> 00:04:17.770
you guys are gonna be honest with me,
right?

77
00:04:17.770 --> 00:04:19.690
Because I'm trusting in you.

78
00:04:19.690 --> 00:04:21.410
Okay, what did you say Mark, I'm sorry.

79
00:04:22.540 --> 00:04:25.300
&gt;&gt; Mark: String methods as well like,
dot split or.

80
00:04:25.300 --> 00:04:26.900
&gt;&gt; Bianca Gandolfo: Yeah, absolutely.

81
00:04:27.980 --> 00:04:29.607
&gt;&gt; Mark: By the way,
I'm just relaying the stuff from online.

82
00:04:29.607 --> 00:04:31.860
&gt;&gt; Bianca Gandolfo: Yeah, cool, thank you.

83
00:04:31.860 --> 00:04:32.360
&gt;&gt; Mark: Yeah.

84
00:04:34.857 --> 00:04:38.937
&gt;&gt; Bianca Gandolfo: Yeah, so, just
gonna put it in your head that anything

85
00:04:38.937 --> 00:04:43.370
that ever uses a dot in
JavaScript is an object.

86
00:04:43.370 --> 00:04:44.640
Just gonna leave that with you.

87
00:04:46.200 --> 00:04:46.730
All right.

88
00:04:46.730 --> 00:04:49.881
&gt;&gt; Mark: This person said,
the spread operator.

89
00:04:49.881 --> 00:04:51.330
&gt;&gt; Mark: Yeah, ES6 fanciness.

90
00:04:51.330 --> 00:04:54.321
&gt;&gt; Bianca Gandolfo: Mm, yep.

91
00:04:54.321 --> 00:04:59.560
Okay, so here where you're signing.

92
00:05:00.590 --> 00:05:03.890
What's gonna happen on
this question mark area?

93
00:05:03.890 --> 00:05:04.640
Can you guys see this?

94
00:05:06.610 --> 00:05:07.780
So what's gonna be returned here?

95
00:05:09.350 --> 00:05:14.300
What is this gonna,
how about in the front row?

96
00:05:14.300 --> 00:05:15.520
Someone who hasn't said anything yet.

97
00:05:17.810 --> 00:05:19.720
How about, grey sweater?

98
00:05:19.720 --> 00:05:21.990
Everyone's wearing a grey sweater.

99
00:05:21.990 --> 00:05:23.523
Third from the end.

100
00:05:26.986 --> 00:05:27.820
&gt;&gt; Unknown Male Student: It's gonna error.

101
00:05:29.160 --> 00:05:29.880
&gt;&gt; Bianca Gandolfo: Why?
&gt;&gt; Unknown Male Student: Unless it's

102
00:05:29.880 --> 00:05:32.020
just going to return the value.

103
00:05:32.020 --> 00:05:32.520
&gt;&gt; Bianca Gandolfo: Yeah?

104
00:05:33.620 --> 00:05:37.262
Now, return the value Mrs.
White which is a string.

105
00:05:37.262 --> 00:05:38.270
Yeah.
&gt;&gt; Unknown Male Student: But

106
00:05:38.270 --> 00:05:40.840
it doesn't like change the state or
anything?

107
00:05:40.840 --> 00:05:43.640
I mean,
does it actually accomplish anything?

108
00:05:43.640 --> 00:05:46.806
Just that expression?

109
00:05:46.806 --> 00:05:48.000
&gt;&gt; Bianca Gandolfo: It's
just gonna return.

110
00:05:48.000 --> 00:05:51.681
This is gonna evaluate to
a string that says Mrs.White.

111
00:05:53.904 --> 00:05:55.180
&gt;&gt; Bianca Gandolfo: Does
that answer your question?

112
00:05:55.180 --> 00:05:57.150
&gt;&gt; Unknown Male Student: Right, but
it doesn't do any assignment or anything.

113
00:05:57.150 --> 00:06:01.160
&gt;&gt; Bianca Gandolfo: Nope, assignment will
only happen if you explicitly do it.

114
00:06:03.510 --> 00:06:04.500
Right?
With the equal sign?

115
00:06:05.500 --> 00:06:08.916
Otherwise, it's a lookup.

116
00:06:08.916 --> 00:06:09.630
Cool.

117
00:06:11.812 --> 00:06:12.312
&gt;&gt; Bianca Gandolfo: All right.

118
00:06:14.110 --> 00:06:17.020
So one thing that

119
00:06:19.050 --> 00:06:24.410
can be a little bit confusing is about
how our data is stored in memory.

120
00:06:24.410 --> 00:06:31.570
So it's pretty simple when we have a
variable and we're storing a value, right?

121
00:06:31.570 --> 00:06:33.530
We mention that this is gonna evaluate to?

122
00:06:33.530 --> 00:06:34.810
&gt;&gt; Unknown Male Student: Mrs. White.

123
00:06:34.810 --> 00:06:36.090
&gt;&gt; Bianca Gandolfo: Mrs. White.

124
00:06:37.170 --> 00:06:40.310
And so who is a variable?

125
00:06:40.310 --> 00:06:44.757
And so it's kind of like, I kind of
think of this as a filing cabinet or

126
00:06:44.757 --> 00:06:50.000
a filing folder, file folder,
a folder, in a physical cabinet.

127
00:06:50.000 --> 00:06:52.910
I don't know if you guys
have seen those lately.

128
00:06:52.910 --> 00:06:54.800
But I think there's still around.

129
00:06:57.020 --> 00:06:58.270
So this is the label, right?

130
00:06:58.270 --> 00:07:01.540
The variable name and
inside holds a value, right?

131
00:07:01.540 --> 00:07:04.146
And this value is a string,
it's a primitive value.

132
00:07:04.146 --> 00:07:08.877
And so that's all fine and good,
that's easy to visualize, but

133
00:07:08.877 --> 00:07:15.080
it gets a little bit more complicated
when we start talking about objects.

134
00:07:15.080 --> 00:07:22.655
So we store primitive values
like the string, Mrs.

135
00:07:22.655 --> 00:07:29.210
White, pretty much with the variable name.

136
00:07:29.210 --> 00:07:34.322
You can think of it that way, it's not the
most accurate statement that I'm saying,

137
00:07:34.322 --> 00:07:37.733
but in a practical sense,
that's what you need to know.

138
00:07:37.733 --> 00:07:43.612
So that's by value, so
when I reference who comes to log it or

139
00:07:43.612 --> 00:07:48.915
something, it will look in memory for
this label, and

140
00:07:48.915 --> 00:07:54.130
it will return this value,
yeah, sounds familiar.

141
00:07:55.220 --> 00:07:55.810
Yeah, okay.

142
00:07:57.180 --> 00:08:00.120
So, what if, so there's that.

143
00:08:02.140 --> 00:08:08.150
And so who's gonna be Mrs. White?

144
00:08:10.420 --> 00:08:13.240
We reassigned it to Mr. White.

145
00:08:14.820 --> 00:08:15.620
What happens?

146
00:08:16.760 --> 00:08:22.370
So let's first take a look at
when we assign Mrs. White.

147
00:08:22.370 --> 00:08:25.574
So we do something where, and again,

148
00:08:25.574 --> 00:08:31.190
this isn't the most accurate
representation of memory, right?

149
00:08:31.190 --> 00:08:32.190
And that's okay.

150
00:08:32.190 --> 00:08:34.600
We don't need to have a super
accurate representation.

151
00:08:34.600 --> 00:08:38.370
But if you understand this, it's good
enough for you to understand how it works.

152
00:08:38.370 --> 00:08:40.540
I just wanna say that for
people who are gonna be like, wait, but

153
00:08:40.540 --> 00:08:45.120
what about, and this, yeah,
yeah, but that's not important.

154
00:08:46.850 --> 00:08:51.290
So we hold a reference to Mrs. White.

155
00:08:51.290 --> 00:08:53.080
So we have our property name.

156
00:08:54.140 --> 00:08:56.530
Person holds the property name, and

157
00:08:56.530 --> 00:08:59.910
the property name holds
reference to the value, right?

158
00:08:59.910 --> 00:09:04.800
And so we point to it, yeah?

159
00:09:04.800 --> 00:09:06.620
Is this, we know, we're good?

160
00:09:06.620 --> 00:09:07.770
Okay.

161
00:09:07.770 --> 00:09:12.720
And then, right, so who,
it's just going to then be

162
00:09:12.720 --> 00:09:16.800
stored separately as Mrs. White, right?

163
00:09:16.800 --> 00:09:19.090
Because we're storing a primitive value.

164
00:09:19.090 --> 00:09:22.294
It's gonna create this but
when we create, Mrs. White.

165
00:09:24.393 --> 00:09:26.463
&gt;&gt; Bianca Gandolfo: It's a data
structure that looks something similar

166
00:09:26.463 --> 00:09:27.220
to this in memory.

167
00:09:28.450 --> 00:09:34.283
What happens when we reassign
person.name to Mr. White.

168
00:09:38.730 --> 00:09:42.764
&gt;&gt; Unknown Male Student: Personal
reference is updated but who isn't?

169
00:09:42.764 --> 00:09:48.240
&gt;&gt; Bianca Gandolfo: Yeah, so
we change our pointer to Mr. White.

170
00:09:48.240 --> 00:09:50.487
Really Mrs. White would just,

171
00:09:50.487 --> 00:09:55.075
this place in memory will get
garbage collected and will go away.

172
00:09:55.075 --> 00:09:59.580
And now, person.name, if we reference
it down here, it would be Mr. White.

173
00:09:59.580 --> 00:10:03.900
But who would be, Cameron?

174
00:10:03.900 --> 00:10:05.550
&gt;&gt; Cameron: Would remain the same.

175
00:10:05.550 --> 00:10:07.360
&gt;&gt; Bianca Gandolfo: Yeah,
it would remain the same.

176
00:10:07.360 --> 00:10:15.820
And so, we call this storing
a value by reference, or by value.

177
00:10:15.820 --> 00:10:20.170
Right, and this becomes more important
when we start passing things to functions,

178
00:10:20.170 --> 00:10:28.170
and we go through sort of a journey
with data in our functions.

179
00:10:28.170 --> 00:10:30.260
&gt;&gt; Unknown Male Student: And
this is by value?

180
00:10:30.260 --> 00:10:34.630
&gt;&gt; Bianca Gandolfo: So
we store permanent values by value.

181
00:10:34.630 --> 00:10:35.750
What's a permanent value?

182
00:10:38.740 --> 00:10:40.410
No, you're just making
a face like you didn't know.

183
00:10:40.410 --> 00:10:41.830
I pointed at you, I apologize.

184
00:10:44.800 --> 00:10:48.455
But I'm still asking the question.

185
00:10:48.455 --> 00:10:50.070
Do you know what a primitive value is?

186
00:10:50.070 --> 00:10:50.880
&gt;&gt; Unknown Male Student: I do not know.

187
00:10:50.880 --> 00:10:53.980
&gt;&gt; Bianca Gandolfo: Just ask
me a question or make a guess.

188
00:10:57.060 --> 00:11:02.945
&gt;&gt; Unknown Male Student: Primitive value,
is it the first thing that assign or.

189
00:11:05.165 --> 00:11:06.590
&gt;&gt; Bianca Gandolfo: It's a good guess.

190
00:11:06.590 --> 00:11:07.580
Cuz it's like primitive.

191
00:11:07.580 --> 00:11:08.480
It's first.

192
00:11:08.480 --> 00:11:10.718
I see where you're going.

193
00:11:10.718 --> 00:11:11.630
I can tell you're a poet.

194
00:11:13.120 --> 00:11:15.880
So a primitive value is basically,

195
00:11:15.880 --> 00:11:20.110
anything that's not an object,
well, okay, I shouldn't say that.

196
00:11:20.110 --> 00:11:24.410
A primitive value is a string,

197
00:11:24.410 --> 00:11:29.550
number, boolean, null,
undefined, these kind of things

198
00:11:29.550 --> 00:11:34.419
were a non-primitive value would
be an object, array, a function.

199
00:11:36.380 --> 00:11:38.600
Promise, things like that.

200
00:11:40.800 --> 00:11:46.690
Yeah, so
primitive values get pass by value.

201
00:11:46.690 --> 00:11:50.810
While non-primitive values
get pass by reference.

202
00:11:52.230 --> 00:11:54.760
So we have these pointers in memory for
objects.

203
00:11:54.760 --> 00:12:00.779
And that means, if you pass something,
or reference a primitive value,

204
00:12:00.779 --> 00:12:04.773
it gets its own spot in
memory every single time.

205
00:12:04.773 --> 00:12:09.850
While with functions and objects, you're
often sharing the same place in memory.

206
00:12:09.850 --> 00:12:15.150
And so if you're changing that,
it can affect

207
00:12:16.660 --> 00:12:20.240
things in unusual ways if you
aren't planning for that.

208
00:12:21.910 --> 00:12:23.455
Yeah, has anyone-
&gt;&gt; Unknown Male Student: Could you

209
00:12:23.455 --> 00:12:24.960
say that one more time?

210
00:12:24.960 --> 00:12:30.639
&gt;&gt; Bianca Gandolfo: Yeah, sure, so when
you store a non-primitive value somewhere

211
00:12:30.639 --> 00:12:36.850
or you pass it to a function, for
example, It's passed by reference.

212
00:12:36.850 --> 00:12:40.460
Which means that you're
passing like a pointer to it.

213
00:12:40.460 --> 00:12:44.128
So you see how this arrow
is pointing to this value?

214
00:12:44.128 --> 00:12:49.130
You're kind of passing
the pointer around to it.

215
00:12:49.130 --> 00:12:53.690
And so, if you have multiple things
pointing, it's not making a copy.

216
00:12:54.700 --> 00:12:59.926
So, if you're sharing one instance of the
object and so if you update that object,

217
00:12:59.926 --> 00:13:04.946
and you're pointing to the same object
over here, that will also be updating.

218
00:13:04.946 --> 00:13:09.157
And so
that can affect your code in unusual ways.

219
00:13:09.157 --> 00:13:11.160
Yeah, cool.

220
00:13:11.160 --> 00:13:12.580
But if you're passing
around primitive values,

221
00:13:12.580 --> 00:13:13.400
you don't have to worry about that.

222
00:13:13.400 --> 00:13:14.760
It makes a copy every time.

223
00:13:14.760 --> 00:13:16.084
And we're all happy.

224
00:13:18.989 --> 00:13:20.210
&gt;&gt; Bianca Gandolfo: How
could this be tricky?

225
00:13:23.152 --> 00:13:29.280
&gt;&gt; Bianca Gandolfo: How about you, yeah.

226
00:13:29.280 --> 00:13:33.590
&gt;&gt; Unknown Male Student: Well, in certain
contexts you might not expect for instance

227
00:13:33.590 --> 00:13:39.640
that, that variable who would be,
you might expect that it would be updated.

228
00:13:39.640 --> 00:13:41.120
&gt;&gt; Bianca Gandolfo: Mm-hm.
&gt;&gt; Unknown Male Student: And it's not.

229
00:13:41.120 --> 00:13:45.412
So you might expect it to
have a certain value and

230
00:13:45.412 --> 00:13:48.050
in fact, it has a totally different value.

231
00:13:48.050 --> 00:13:48.670
&gt;&gt; Bianca Gandolfo: Yeah.

232
00:13:48.670 --> 00:13:50.180
Yeah, absolutely.

233
00:13:50.180 --> 00:13:53.148
So if you expect primitive values and
non-primitive values to have the same

234
00:13:53.148 --> 00:13:58.490
behavior, either way, you're gonna
have something that you don't expect.

235
00:13:58.490 --> 00:14:04.730
And to be a good programmer, you wanna
understand your language enough so

236
00:14:04.730 --> 00:14:08.760
that things don't happen that
you wouldn't expect as much.

237
00:14:08.760 --> 00:14:10.030
I mean, it still is gonna happen.

238
00:14:10.030 --> 00:14:14.460
Maybe, I don't know, I would be surprised.

239
00:14:14.460 --> 00:14:18.290
I was gonna give you a time period about
when, how many years of JavaScript,

240
00:14:18.290 --> 00:14:21.690
what you need before it stops doing
things that you don't expect.

241
00:14:21.690 --> 00:14:24.950
But I'm like, wait a minute that's, I
think that it'll always do things that you

242
00:14:24.950 --> 00:14:27.820
don't expect, and
then it will always evolve.

243
00:14:27.820 --> 00:14:29.467
But you wanna minimize those things.

244
00:14:32.389 --> 00:14:35.414
&gt;&gt; Unknown Male Student: Yeah, if you
pass an array to another method, and

245
00:14:35.414 --> 00:14:37.431
that method updates that array,

246
00:14:37.431 --> 00:14:42.706
you wouldn't expect it to be updated where
you're holding it outside that function.

247
00:14:42.706 --> 00:14:43.549
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; Unknown Male Student: Right,

248
00:14:43.549 --> 00:14:44.541
that's the big-
&gt;&gt; Bianca Gandolfo: Yep.

249
00:14:44.541 --> 00:14:45.636
&gt;&gt; Unknown Male Student: Caveat.

250
00:14:45.636 --> 00:14:49.191
Versus if you pass a string around,
the string isn't

251
00:14:49.191 --> 00:14:54.190
gonna be modified in both places in
that function and in you're copy of it.

252
00:14:54.190 --> 00:14:56.957
Cuz they're copied,
primitive values are copied,

253
00:14:56.957 --> 00:15:00.610
versus an array is just sort
of passed around willy-nilly.

254
00:15:00.610 --> 00:15:02.780
That's why when you do these
array methods and stuff,

255
00:15:02.780 --> 00:15:07.880
you usually wanna return a copy or
a copy calling that array.

256
00:15:07.880 --> 00:15:10.350
That's a new array after that method.

257
00:15:10.350 --> 00:15:13.890
So you're not accidentally
modifying it in both places.

258
00:15:13.890 --> 00:15:14.620
&gt;&gt; Bianca Gandolfo: Yeah, absolutely.

259
00:15:14.620 --> 00:15:19.551
And that's why it's really

260
00:15:19.551 --> 00:15:25.140
popular to, or
it's recommended that you don't

261
00:15:25.140 --> 00:15:29.620
mutate your data structures, that you
just copy them and then return new copy.

262
00:15:29.620 --> 00:15:35.580
So that you don't have the side effect of
your code being updated in various places.

263
00:15:35.580 --> 00:15:39.730
So you pass your array, or you pass Mrs.
White to a function, right?

264
00:15:40.780 --> 00:15:45.107
And this function changes as

265
00:15:45.107 --> 00:15:50.522
a property to this object, right?

266
00:15:50.522 --> 00:15:57.223
And you want them to be separate, you
would copy it and then return the copy,

267
00:15:57.223 --> 00:16:02.054
versus changing the actual
original data structure.

268
00:16:04.651 --> 00:16:05.410
&gt;&gt; Bianca Gandolfo: Does that make sense?

269
00:16:06.750 --> 00:16:07.250
Cool.

270
00:16:08.650 --> 00:16:11.130
And mutating just means updating and
changing.

271
00:16:12.340 --> 00:16:15.170
And then immutable means that
you can't update or change it.

272
00:16:16.480 --> 00:16:21.570
And I'm always entertained by just
how we have to have fancy words for

273
00:16:21.570 --> 00:16:24.660
very simple things, but it's science.

274
00:16:25.845 --> 00:16:28.843
&gt;&gt; Bianca Gandolfo: Great, awesome.

275
00:16:28.843 --> 00:16:34.160
So what if we go through all of this blah,
blah, blah.

276
00:16:34.160 --> 00:16:35.509
Our person is now Mr. White.

277
00:16:36.520 --> 00:16:39.480
And again remember,
we're trying to figure out a mystery here.

278
00:16:39.480 --> 00:16:42.220
So we gotta figure out the story,
we gotta know the facts.

279
00:16:44.260 --> 00:16:45.889
So what is this gonna return?

280
00:16:48.393 --> 00:16:52.520
&gt;&gt; Bianca Gandolfo: Blue
shirt in the middle here.

281
00:16:53.670 --> 00:16:56.480
&gt;&gt; Unknown Female Student: Looks
like it would return undefined

282
00:16:56.480 --> 00:16:58.100
if story hasn't been-.

283
00:16:59.450 --> 00:17:00.530
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; Unknown Female Student: Named anywhere.

284
00:17:00.530 --> 00:17:02.070
&gt;&gt; Bianca Gandolfo: Yeah, absolutely.

285
00:17:02.070 --> 00:17:05.350
So it's undefined and so, my goodness.

286
00:17:05.350 --> 00:17:06.782
What is happening?

287
00:17:06.782 --> 00:17:10.210
Mr. White says, but
my wife is an array of sunshine.

288
00:17:10.210 --> 00:17:11.720
She would never kill anyone.

289
00:17:13.430 --> 00:17:15.530
Hmm, what a development.

