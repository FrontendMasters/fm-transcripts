WEBVTT

1
00:00:00.420 --> 00:00:05.188
You have two options here,
you have the challenging exercise or

2
00:00:05.188 --> 00:00:07.710
the relaxed exercise.

3
00:00:07.710 --> 00:00:10.130
The first exercise is reduce.

4
00:00:10.130 --> 00:00:13.983
So reduce is one of those
methods like map and

5
00:00:13.983 --> 00:00:19.401
filter that are core to the heart
of functional programming,

6
00:00:19.401 --> 00:00:26.300
and even kind of pseudo functional
programming, which is what we're doing.

7
00:00:27.440 --> 00:00:32.840
And so it's important to
understand how to use it.

8
00:00:32.840 --> 00:00:37.280
The implementation is tough,
but very interesting.

9
00:00:37.280 --> 00:00:38.590
Let me tell you how it works.

10
00:00:38.590 --> 00:00:42.272
So reduce takes a collection,

11
00:00:42.272 --> 00:00:46.387
and it takes a callback function.

12
00:00:49.218 --> 00:00:52.390
And this function is going to or

13
00:00:52.390 --> 00:00:57.390
reduce always returns
one value at the end.

14
00:00:57.390 --> 00:01:01.203
So map, remember map returns
the length of an array the same length.

15
00:01:01.203 --> 00:01:03.152
Each doesn't return anything,

16
00:01:03.152 --> 00:01:07.350
filter will return based on that
truthy test that we pass it.

17
00:01:07.350 --> 00:01:09.950
Reduce always returns one function.

18
00:01:09.950 --> 00:01:14.116
So what it does is it will call,
it does loop though,

19
00:01:14.116 --> 00:01:19.680
it loops through the collection,
calling that function.

20
00:01:19.680 --> 00:01:25.284
And then based on whatever
that function returns,

21
00:01:25.284 --> 00:01:30.510
it gets passed on back and
it gets accumulated.

22
00:01:30.510 --> 00:01:35.611
So that function is gonna be
called each time with the past

23
00:01:35.611 --> 00:01:41.576
value of the return of that function and
the next value in the loop.

24
00:01:41.576 --> 00:01:42.493
Does that makes sense?

25
00:01:42.493 --> 00:01:45.540
So as we're looping in,
we're calling this function.

26
00:01:45.540 --> 00:01:51.120
Previously, we always call the function
with the current item index list, right?

27
00:01:51.120 --> 00:01:55.580
In this case, we're gonna call it with
a previous value and the current value.

28
00:01:55.580 --> 00:01:59.960
And take those two values and
it's gonna return one value together.

29
00:01:59.960 --> 00:02:05.692
And the example that
everyone uses is addition.

30
00:02:05.692 --> 00:02:08.856
Some argue it's because reduce is so
confusing that no one can figure out how

31
00:02:08.856 --> 00:02:11.590
to do anything else except for
addition with it.

32
00:02:11.590 --> 00:02:18.310
But here it is, so
we have a list with two items, 1 and 2.

33
00:02:18.310 --> 00:02:21.958
Our callback function is gonna be
called with the previous value and

34
00:02:21.958 --> 00:02:23.640
the current value.

35
00:02:23.640 --> 00:02:26.513
So, the very first go around.

36
00:02:26.513 --> 00:02:28.360
And this is the initial value.

37
00:02:28.360 --> 00:02:31.271
You can also pass an initial value,
so the initial value,

38
00:02:33.988 --> 00:02:38.977
Will be passed as an argument,
you add them together, 0 plus 1 is 1.

39
00:02:38.977 --> 00:02:44.738
So sum is now 1, n is then 2.

40
00:02:44.738 --> 00:02:46.517
1 plus 2 is 3.

41
00:02:49.910 --> 00:02:53.410
So that's an example how reduce is used.

42
00:02:53.410 --> 00:03:02.209
And here's a more complex example kind of.

43
00:03:02.209 --> 00:03:07.875
So we have an initial value,

44
00:03:07.875 --> 00:03:13.311
which is an object, okay?

45
00:03:13.311 --> 00:03:17.561
And our function takes the result value,
key.

46
00:03:17.561 --> 00:03:23.269
So the result, sorry, the initial
value is the result at first, right?

47
00:03:24.600 --> 00:03:27.230
So we start with this,
result is an object.

48
00:03:28.360 --> 00:03:32.110
And it says if result at value,

49
00:03:32.110 --> 00:03:36.595
value is going to be 1 if the key is a.

50
00:03:36.595 --> 00:03:37.350
You guys following?

51
00:03:38.540 --> 00:03:41.040
Tell me to stop if I'm going too fast.

52
00:03:41.040 --> 00:03:44.320
This is a little tricky.

53
00:03:44.320 --> 00:03:48.349
This is a common pattern here
to say like if this exists,

54
00:03:48.349 --> 00:03:52.700
then initialize it as 0,
otherwise, do something else.

55
00:03:52.700 --> 00:03:58.130
So this says if it exists or
if it doesn't exist, yeah,

56
00:03:58.130 --> 00:04:04.946
so if result at value is false,
is gonna go to the other side of this or,

57
00:04:04.946 --> 00:04:11.090
and it's gonna initialize result value,
add an empty array.

58
00:04:12.580 --> 00:04:14.520
Return that and it's gonna push the key.

59
00:04:16.910 --> 00:04:19.760
If it already exists though,

60
00:04:19.760 --> 00:04:25.350
it's just gonna return this and
then push the key to that.

61
00:04:29.229 --> 00:04:34.513
Does that make sense
what this line is doing?

62
00:04:34.513 --> 00:04:37.507
No, okay, we'll do it one more time.

63
00:04:37.507 --> 00:04:43.803
So what this is doing is it's collecting

64
00:04:43.803 --> 00:04:50.107
all of the keys that have the same value.

65
00:04:52.827 --> 00:04:59.421
And, So what it's doing is it's
initializing an empty object.

66
00:04:59.421 --> 00:05:04.294
And it's first checking,
is this value in our object already?

67
00:05:04.294 --> 00:05:08.072
So, result empty object, the value for

68
00:05:08.072 --> 00:05:13.531
the first property for
starting here, it's gonna be 1.

69
00:05:13.531 --> 00:05:17.660
So we're saying result.1, does that exist?

70
00:05:17.660 --> 00:05:19.021
No, it doesn't exist yet.

71
00:05:19.021 --> 00:05:22.391
Okay, so
then we're gonna go to this side and

72
00:05:22.391 --> 00:05:27.013
we're going to initialize result
value to be an empty array.

73
00:05:27.013 --> 00:05:28.500
And then we're gonna push the key.

74
00:05:30.130 --> 00:05:35.420
So result value is 1, is an empty array.

75
00:05:35.420 --> 00:05:40.382
So we're creating this first array and
it's empty at first, and

76
00:05:40.382 --> 00:05:43.821
then we're pushing the key and
that key is A.

77
00:05:43.821 --> 00:05:48.562
And then we'll return that result, right,

78
00:05:48.562 --> 00:05:55.683
which is an object that has a 1,
and an A, inside of a array, okay?

79
00:05:57.597 --> 00:06:03.729
And then, We do it again, same object.

80
00:06:03.729 --> 00:06:08.394
This time the value is gonna be 2,
again it's gonna initialize that,

81
00:06:08.394 --> 00:06:11.680
and it creates this,
here, returns the result.

82
00:06:13.160 --> 00:06:17.968
Now we have something that matches
this one and the result that value,

83
00:06:17.968 --> 00:06:19.444
which is 1 already.

84
00:06:19.444 --> 00:06:22.848
I'm sorry, it matches this one here.

85
00:06:22.848 --> 00:06:26.978
And so we'll just instead of
initializing it, we'll push the key.

86
00:06:29.721 --> 00:06:33.330
Okay, and then we return the result.

87
00:06:33.330 --> 00:06:34.714
So that's reduce.

88
00:06:34.714 --> 00:06:36.832
It's a little tricky.

89
00:06:36.832 --> 00:06:40.810
So the challenge,
if you want a challenging task,

90
00:06:40.810 --> 00:06:46.916
is to implement that under the hood has
this sort of like accumulation effect,

91
00:06:46.916 --> 00:06:51.749
where it has a memory and
it passes it along every single time.

92
00:06:54.448 --> 00:06:58.479
And then,
if you're feeling like it's late, and

93
00:06:58.479 --> 00:07:04.008
you wanna relax a little bit,
we have eachRight, which is a for each,

94
00:07:04.008 --> 00:07:09.861
except for instead of going from left
to right, you go from right to left.

95
00:07:13.751 --> 00:07:15.316
So it's very relaxed.

96
00:07:15.316 --> 00:07:19.939
&gt;&gt; At this point, yesterday, that was-
&gt;&gt; Seems like you would reverse the array

97
00:07:19.939 --> 00:07:24.802
instead of have a function
that starts on the right.

98
00:07:24.802 --> 00:07:28.522
&gt;&gt; Do you mean that's how you would
implement it is you would reverse

99
00:07:28.522 --> 00:07:29.475
the arguments?

100
00:07:29.475 --> 00:07:35.145
&gt;&gt; No, I'm just saying it just seems
weird for each array instead of doing for

101
00:07:35.145 --> 00:07:39.080
each and
just reversing the order of the array.

102
00:07:39.080 --> 00:07:41.379
&gt;&gt; Yeah, well,
if you reverse the order of the array,

103
00:07:41.379 --> 00:07:45.240
if you're thinking about time complexity
and stuff, it can be expensive.

104
00:07:45.240 --> 00:07:47.412
&gt;&gt; Yeah, it can,
if it's a huge array, I guess.

105
00:07:47.412 --> 00:07:48.793
&gt;&gt; Yeah.

106
00:07:50.334 --> 00:07:57.890
Yeah, it's just a thing to do if you
don't feel like implementing reduce.

107
00:07:57.890 --> 00:08:01.094
However, reduce is pretty cool.

108
00:08:01.094 --> 00:08:04.061
So I recommend doing that one,
even if it's intimidating and

109
00:08:04.061 --> 00:08:05.440
I'll walk around and help.

