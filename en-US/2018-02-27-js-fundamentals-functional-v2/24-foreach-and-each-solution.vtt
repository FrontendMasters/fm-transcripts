WEBVTT

1
00:00:00.092 --> 00:00:03.555
Let's start with our underscore, right?

2
00:00:03.555 --> 00:00:08.077
It's an object, and then we're gonna say,

3
00:00:08.077 --> 00:00:15.220
underscore dot each equals a function,
what does that function take?

4
00:00:15.220 --> 00:00:15.780
Do you remember?

5
00:00:15.780 --> 00:00:20.400
What's the first argument?

6
00:00:20.400 --> 00:00:21.400
&gt;&gt; A list.

7
00:00:21.400 --> 00:00:23.789
&gt;&gt; A list, and the second one?

8
00:00:23.789 --> 00:00:24.675
&gt;&gt; Lack function.

9
00:00:24.675 --> 00:00:25.175
&gt;&gt; Yeah.

10
00:00:27.440 --> 00:00:32.424
Awesome, so, I'm just gonna write
some pseudocode out just so

11
00:00:32.424 --> 00:00:36.040
that we can think through
it before diving in.

12
00:00:36.040 --> 00:00:43.760
So first we want to loop through the list.

13
00:00:43.760 --> 00:00:48.493
And then in each loop I
ended there because for

14
00:00:48.493 --> 00:00:54.360
each loop I wanted to call
the callback with a list item.

15
00:00:54.360 --> 00:00:59.196
Alright, and
then we need to make sure that it works

16
00:00:59.196 --> 00:01:04.368
with both objects and arrays,
and so, for objects and

17
00:01:04.368 --> 00:01:09.440
arrays, the loop is you
should use different loops.

18
00:01:09.440 --> 00:01:12.481
Like we mentioned before,
arrays work well with the for

19
00:01:12.481 --> 00:01:14.367
loop with the I in the semicolons.

20
00:01:14.367 --> 00:01:19.002
Because of the numerical indices, objects
work better with the forehand loop.

21
00:01:19.002 --> 00:01:22.940
We say for var ki N, ob that one.

22
00:01:22.940 --> 00:01:26.671
So we're gonna check which was
an array if it's an array,

23
00:01:26.671 --> 00:01:30.935
we'll loop through it with the other
one with the loop with the i and

24
00:01:30.935 --> 00:01:34.150
the semicolons, that one,
the numerical loop.

25
00:01:34.150 --> 00:01:39.100
And then, if it's an object,
we'll do the foreign loop, okay?

26
00:01:43.850 --> 00:01:49.164
How do we check if something is an array?

27
00:01:49.164 --> 00:01:56.400
&gt;&gt; If type of list equals, equals array.

28
00:02:01.193 --> 00:02:03.030
Like this?

29
00:02:03.030 --> 00:02:09.431
&gt;&gt; No, not a string, [INAUDIBLE] is array
there's a function called is array.

30
00:02:09.431 --> 00:02:12.454
&gt;&gt; You're right.

31
00:02:12.454 --> 00:02:16.459
Yeah, so remember this is not gonna work,

32
00:02:16.459 --> 00:02:21.467
this is a sad booth,
sad face this won't work because

33
00:02:21.467 --> 00:02:26.946
arrays are objects that's
always going to return false.

34
00:02:26.946 --> 00:02:31.313
But you're right, we do have this
handy function array.is array, and

35
00:02:31.313 --> 00:02:35.333
we pass the list this is going to
return true if the list is an array.

36
00:02:35.333 --> 00:02:40.941
Great, so we got that, and then otherwise,

37
00:02:40.941 --> 00:02:47.737
else we can do that we can
loop through object, right?

38
00:02:47.737 --> 00:02:51.070
Just knows for ourselves, right?

39
00:02:51.070 --> 00:02:54.494
Loop through array,

40
00:02:54.494 --> 00:02:58.876
okay, so we got that part.

41
00:03:10.893 --> 00:03:12.944
I forgot the most important part,

42
00:03:12.944 --> 00:03:17.340
which you should do at the end of
everything is to celebrate, not to self.

43
00:03:17.340 --> 00:03:25.315
Okay, so what's that loop that we
want to use for the arrays again?

44
00:03:29.555 --> 00:03:30.160
Anyone?

45
00:03:30.160 --> 00:03:32.955
&gt;&gt; For var.

46
00:03:32.955 --> 00:03:33.455
&gt;&gt; Yeah.

47
00:03:43.904 --> 00:03:47.796
Okay, so I'm just saying, start at zero,

48
00:03:47.796 --> 00:03:51.585
keep looping until we
get to that length and

49
00:03:51.585 --> 00:03:57.072
increment by one each time,
that's what that means, cool.

50
00:03:57.072 --> 00:04:00.895
So, now we wanna call a callback, right?

51
00:04:05.050 --> 00:04:06.821
So, how do we call a function?

52
00:04:06.821 --> 00:04:10.280
We haven't really talked about that too
much yet, but we just refer by name.

53
00:04:10.280 --> 00:04:17.768
In this case, it'll be called callback,
and we'll pass it the value from the list,

54
00:04:17.768 --> 00:04:22.760
which we say list that i,
this is gonna return the value.

55
00:04:22.760 --> 00:04:28.218
And then just the API for the each
function and send it, sends the index,

56
00:04:28.218 --> 00:04:33.431
and then it sends the entire list,
that's just how it works, okay?

57
00:04:33.431 --> 00:04:38.859
&gt;&gt; [INAUDIBLE]
&gt;&gt; Yeah, sure.

58
00:04:38.859 --> 00:04:44.181
So, the expectation for each and
just be careful different versions of each

59
00:04:44.181 --> 00:04:49.434
jQuery has an each, there's for
each and then there's underscore each.

60
00:04:49.434 --> 00:04:54.192
Sometimes the these arguments are swapped,
but for

61
00:04:54.192 --> 00:05:01.560
underscore each is first going to be the
value, then the index and then the list.

62
00:05:01.560 --> 00:05:06.395
So inside of the callback function,
you'll have access to value, the index and

63
00:05:06.395 --> 00:05:08.111
the list every single time.

64
00:05:08.111 --> 00:05:11.051
Which is handy because you
want this to be a generic

65
00:05:11.051 --> 00:05:13.851
function that can be
used in various contexts,

66
00:05:13.851 --> 00:05:17.850
we don't really know what our future
users are gonna need this for.

67
00:05:17.850 --> 00:05:21.650
So I'll just work and
to have all of the data available.

68
00:05:21.650 --> 00:05:24.312
&gt;&gt; Do we need to define
callback somewhere else then?

69
00:05:29.986 --> 00:05:33.988
&gt;&gt; It's there, or, you mean, well,
so we we'll get to that actually,

70
00:05:33.988 --> 00:05:35.470
that's a good question.

71
00:05:35.470 --> 00:05:40.202
We'll get to that, but yes, we do,
but we don't need to define it,

72
00:05:40.202 --> 00:05:43.396
we need to pass it,
because it's a function.

73
00:05:43.396 --> 00:05:46.823
&gt;&gt; Okay, right.

74
00:05:46.823 --> 00:05:52.985
&gt;&gt; All right, cool, any questions
about how we handled the array?

75
00:05:57.300 --> 00:05:59.857
Before we move on, maybe actually will.

76
00:06:03.028 --> 00:06:08.722
Call each so that you can,
we can look at it with some data,

77
00:06:08.722 --> 00:06:13.854
so, we'll see each and
then let's think of a name.

78
00:06:24.816 --> 00:06:29.741
Okay, so we have some names and then
we're gonna pass in a callback function.

79
00:06:29.741 --> 00:06:37.140
I'm just gonna put an anonymous function
here, because I'm lazy that's why.

80
00:06:37.140 --> 00:06:42.760
And then let's see, so name, index,
we'll just worry about the name, index.

81
00:06:42.760 --> 00:06:46.724
And maybe this is an array of brothers and
sisters, or

82
00:06:46.724 --> 00:06:52.727
maybe animals because porgy would be
a really bad name, maybe it's a nickname.

83
00:06:52.727 --> 00:06:57.310
Anyway, you It's a series of names and
it's an order of oldest to youngest or

84
00:06:57.310 --> 00:07:00.000
something like that, so there's an order.

85
00:07:00.000 --> 00:07:04.819
So this function is

86
00:07:04.819 --> 00:07:09.637
going to say that,

87
00:07:09.637 --> 00:07:14.155
name is younger,

88
00:07:14.155 --> 00:07:18.974
then name, then,

89
00:07:18.974 --> 00:07:25.008
we do need this, list.

90
00:07:27.580 --> 00:07:30.219
So we can say, I'm just gonna say if.

91
00:07:32.730 --> 00:07:39.461
Name you guys are letting
me do some crazy stuff,

92
00:07:39.461 --> 00:07:44.232
you gotta be my linter name i+1.

93
00:07:44.232 --> 00:07:50.454
So the next one so
if there's an i+1 will say that

94
00:07:50.454 --> 00:07:55.935
the current name is younger the name i+1,

95
00:07:55.935 --> 00:08:00.825
else we gonna console that log that name

96
00:08:00.825 --> 00:08:06.011
that won't work right we don't want to,

97
00:08:06.011 --> 00:08:11.510
we want it to be variable
name is the oldest.

98
00:08:14.913 --> 00:08:18.563
&gt;&gt; Do we want list i+1?

99
00:08:20.105 --> 00:08:21.263
&gt;&gt; Yes

100
00:08:31.316 --> 00:08:32.718
Why is that not matching?

101
00:08:32.718 --> 00:08:33.251
As last base.

102
00:08:36.433 --> 00:08:37.426
Okay.

103
00:08:41.370 --> 00:08:44.667
All right, so
we understand what's happening?

104
00:08:44.667 --> 00:08:48.193
For each one of these, so
Sally is the youngest,

105
00:08:48.193 --> 00:08:51.548
George is in the middle,
Porgy is the oldest.

106
00:08:51.548 --> 00:08:55.531
And we gonna loop through,

107
00:08:55.531 --> 00:09:00.380
we're going to check if there's

108
00:09:00.380 --> 00:09:05.238
an item after the current index.

109
00:09:05.238 --> 00:09:12.470
We gonna console log that Sally
is younger than Georgie, yeah?

110
00:09:12.470 --> 00:09:19.950
And then if there isn't one then
we'll say Porgy is the oldest, okay?

111
00:09:19.950 --> 00:09:24.869
So, now let's take a look,
so this is us using

112
00:09:24.869 --> 00:09:29.930
the function now let's
look at the internals.

113
00:09:29.930 --> 00:09:32.383
This is the part that
usually we don't think about,

114
00:09:32.383 --> 00:09:36.140
we just trust that it's gonna do what
it's gonna do, and then see what it does.

115
00:09:36.140 --> 00:09:40.341
And if it does the right thing, we're
happy, if it doesn't, then we kinda fiddle

116
00:09:40.341 --> 00:09:43.718
and maybe hope for the best,
I don't know, that's my strategy.

117
00:09:46.143 --> 00:09:52.140
It's not very effective, so
let's think critically about this.

118
00:09:52.140 --> 00:09:53.697
Okay, so list is what?

119
00:09:56.157 --> 00:09:56.792
&gt;&gt; The array.

120
00:09:56.792 --> 00:09:59.190
&gt;&gt; Yep, list is the array,
callback is what?

121
00:10:01.960 --> 00:10:04.971
&gt;&gt; Function.
&gt;&gt; Yeah, this entire function, okay?

122
00:10:04.971 --> 00:10:07.160
Keep that in mind, that's important.

123
00:10:07.160 --> 00:10:11.296
So, if a raider is array list,

124
00:10:11.296 --> 00:10:17.510
what does that evaluate
to gray sweater crew?

125
00:10:17.510 --> 00:10:18.495
Anyone over there?

126
00:10:22.872 --> 00:10:27.589
This is gonna be true or false?

127
00:10:27.589 --> 00:10:30.870
You can join them to true, yeah.

128
00:10:30.870 --> 00:10:31.792
So this will be true.

129
00:10:33.090 --> 00:10:35.538
And so we'll hop into this block here.

130
00:10:38.016 --> 00:10:42.932
So, we'll loop through
the length of the list, and

131
00:10:42.932 --> 00:10:47.420
we gonna call this function
with three things.

132
00:10:47.420 --> 00:10:51.917
The first one is the value list that i, so

133
00:10:51.917 --> 00:10:56.030
the very first loop, i equals what?

134
00:10:56.030 --> 00:11:02.074
&gt;&gt; Zero.
&gt;&gt; Zero, and so, list that 0 is what?

135
00:11:02.074 --> 00:11:05.500
&gt;&gt; Sally.
Sally, yep.

136
00:11:05.500 --> 00:11:06.317
What's i again?

137
00:11:08.970 --> 00:11:13.755
0, and what's the list again?

138
00:11:13.755 --> 00:11:15.668
Grey sweater crew?

139
00:11:15.668 --> 00:11:17.090
The array, awesome.

140
00:11:17.090 --> 00:11:22.820
So we have this, and
it's gonna line up with this.

141
00:11:22.820 --> 00:11:27.297
So list that i Sally is
gonna be name i zero and

142
00:11:27.297 --> 00:11:30.455
list is the list, following?

143
00:11:30.455 --> 00:11:35.531
They hang to like snake through it,
so we're gonna hop in,

144
00:11:35.531 --> 00:11:40.099
I'm gonna write us a note
here that we have Sally, and

145
00:11:40.099 --> 00:11:42.750
we're at 0, just so we know.

146
00:11:42.750 --> 00:11:46.391
And so the list at i,

147
00:11:46.391 --> 00:11:51.745
which is 0 plus 1 equals 1,

148
00:11:51.745 --> 00:11:56.257
that is going to be what?

149
00:11:56.257 --> 00:11:59.965
True or false?

150
00:11:59.965 --> 00:12:00.728
&gt;&gt; True isn't [INAUDIBLE].

151
00:12:00.728 --> 00:12:06.442
Gonna be Georgie, which will be true,
it exists, this will be true.

152
00:12:06.442 --> 00:12:11.470
&gt;&gt; And then we'll console log that.

153
00:12:11.470 --> 00:12:12.158
&gt;&gt; Sally.
&gt;&gt; Sally.

154
00:12:16.015 --> 00:12:18.301
&gt;&gt; Is younger than.

155
00:12:18.301 --> 00:12:19.628
&gt;&gt; Anyone?

156
00:12:19.628 --> 00:12:25.300
&gt;&gt; Georgie
&gt;&gt; Georgie, yeah, we got it, cool.

157
00:12:25.300 --> 00:12:28.794
&gt;&gt; And then it will do that for each one,
so then it will do the same thing for

158
00:12:28.794 --> 00:12:31.090
Georgie, I'm not going
to go through it all.

159
00:12:31.090 --> 00:12:33.926
Unless you would you like me to go
through it one more time to review, or

160
00:12:33.926 --> 00:12:35.720
do you think we feel
solid on how this works?

161
00:12:37.870 --> 00:12:41.330
So one more time, solid.

162
00:12:41.330 --> 00:12:47.072
Don't do it, okay, cool, awesome.

163
00:12:47.072 --> 00:12:49.271
Now.

164
00:12:55.492 --> 00:12:57.493
&gt;&gt; [INAUDIBLE] list one t here.

165
00:12:57.493 --> 00:12:57.993
&gt;&gt; Yeah.

166
00:13:01.859 --> 00:13:02.359
All right.

167
00:13:05.080 --> 00:13:08.088
So else, we gonna just loop through,
we gonna assume,

168
00:13:08.088 --> 00:13:11.940
otherwise this is an object and
we want it to work the same for an object.

169
00:13:11.940 --> 00:13:16.360
That's the nice thing about underscore
versus native array for each, is that,

170
00:13:16.360 --> 00:13:19.290
you know,
you don't have to coerce it into an array.

171
00:13:19.290 --> 00:13:24.042
We'll see later on some tricky things that

172
00:13:24.042 --> 00:13:29.196
look like arrays but
are really objects, so.

173
00:13:33.361 --> 00:13:40.760
So we gonna say call back,
how do we get the item?

174
00:13:40.760 --> 00:13:42.271
&gt;&gt; List bracket key.

175
00:13:42.271 --> 00:13:47.681
&gt;&gt; List bracket key, why is it brackets?

176
00:13:47.681 --> 00:13:52.240
Yes, no, because it's not numeric,
because it's a variable.

177
00:13:52.240 --> 00:13:57.118
Yeah, also non numeric, but

178
00:13:57.118 --> 00:14:02.386
we would have to do that or not and

179
00:14:02.386 --> 00:14:07.080
then how do we get the index?

180
00:14:07.080 --> 00:14:10.460
&gt;&gt; I say index because it's
not array isn't just key.

181
00:14:10.460 --> 00:14:12.670
&gt;&gt; Yeah, just key and
that's going to be the property name.

182
00:14:18.380 --> 00:14:20.040
&gt;&gt; There you have it.

