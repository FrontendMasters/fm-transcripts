WEBVTT

1
00:00:00.000 --> 00:00:00.954
Next one.

2
00:00:00.954 --> 00:00:02.070
It's a little bit different.

3
00:00:02.070 --> 00:00:03.470
Who wants to start this time?

4
00:00:03.470 --> 00:00:04.540
Jamie.

5
00:00:04.540 --> 00:00:09.030
&gt;&gt; So, you set up my alerts,
and it's runs a function.

6
00:00:10.190 --> 00:00:15.440
&gt;&gt; Has not yet run anything but-
&gt;&gt; Yeah, but I assume it will next.

7
00:00:15.440 --> 00:00:20.444
&gt;&gt; So myAlert we had to call
every time and then, yeah.

8
00:00:20.444 --> 00:00:22.325
So help, I found a clue.

9
00:00:22.325 --> 00:00:25.823
And then what happens, Michael?

10
00:00:28.078 --> 00:00:33.324
&gt;&gt; Then you define another
function called alerter,

11
00:00:33.324 --> 00:00:39.064
which actually sets an alert
with x as the argument and-

12
00:00:39.064 --> 00:00:40.569
&gt;&gt; Doesn't do that yet.

13
00:00:42.330 --> 00:00:45.720
It sets this but it doesn't actually
run the body of this function.

14
00:00:45.720 --> 00:00:47.940
&gt;&gt; Yeah, that's right, okay.

15
00:00:47.940 --> 00:00:49.330
&gt;&gt; Yeah, okay?

16
00:00:49.330 --> 00:00:52.775
&gt;&gt; Yeah.
&gt;&gt; And then what happens next, Aisha?

17
00:00:55.079 --> 00:00:57.890
&gt;&gt; Alert gets x passed into it.

18
00:00:57.890 --> 00:01:00.752
&gt;&gt; What happens next?

19
00:01:02.474 --> 00:01:07.279
So we define this and then what happens?

20
00:01:07.279 --> 00:01:08.490
Time the alerter?

21
00:01:08.490 --> 00:01:11.020
&gt;&gt; Yeah, so we call the set timeout.

22
00:01:11.020 --> 00:01:15.792
And what happens with a set
timeout is alerter goes away into

23
00:01:15.792 --> 00:01:19.320
somewhere deep in browser land.

24
00:01:19.320 --> 00:01:22.506
And it's gonna get called
in a thousand seconds.

25
00:01:24.238 --> 00:01:27.597
And the question is, what happens first?

26
00:01:27.597 --> 00:01:29.983
The log or the alert?

27
00:01:29.983 --> 00:01:31.819
&gt;&gt; The log.

28
00:01:31.819 --> 00:01:32.541
&gt;&gt; Why?

29
00:01:32.541 --> 00:01:35.940
&gt;&gt; Because alerter won't be run for
another thousand seconds.

30
00:01:35.940 --> 00:01:38.044
&gt;&gt; Yeah, because it's asynchronous.

31
00:01:38.044 --> 00:01:39.910
It will go away.

32
00:01:39.910 --> 00:01:45.800
The alerter will call but it doesn't
block the execution of our function.

33
00:01:46.860 --> 00:01:51.700
But alerter will still be called later and
sometime in the future, right?

34
00:01:51.700 --> 00:01:52.750
We're used to that?

35
00:01:52.750 --> 00:01:54.213
Nothing surprising?

36
00:01:57.508 --> 00:02:01.874
&gt;&gt; To set Timeout, automatically call
a function without the parenthesis.

37
00:02:01.874 --> 00:02:03.542
Without invoking it,

38
00:02:03.542 --> 00:02:08.318
like it was just an automatic-
&gt;&gt; If you had put parentheses

39
00:02:08.318 --> 00:02:10.030
here-
&gt;&gt; Yeah.

40
00:02:10.030 --> 00:02:13.221
&gt;&gt; It would try to call
whatever this returns.

41
00:02:13.221 --> 00:02:18.821
So it would call it first and then try
to call it again and it would mess up.

42
00:02:18.821 --> 00:02:22.101
&gt;&gt; Okay, so
it just takes a function and then-

43
00:02:22.101 --> 00:02:25.530
&gt;&gt; Yeah, and it calls it later, exactly.

44
00:02:25.530 --> 00:02:30.333
Cuz you only wanna put the parentheses at
the moment you wanted to execute the body

45
00:02:30.333 --> 00:02:31.400
of the function.

46
00:02:31.400 --> 00:02:34.303
And so since this would return undefined,

47
00:02:34.303 --> 00:02:37.941
we'd really be trying to
call undefined somewhere.

48
00:02:39.869 --> 00:02:42.010
And we've all seen those values.

49
00:02:42.010 --> 00:02:43.271
Undefined is not a function.

