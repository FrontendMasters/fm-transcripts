[00:00:00]
>> Bianca Gandolfo: So you're just extracting out the values you want and you can imagine, also, that if you're getting some JSON from your backend, a huge, nested data structure that this can get a little tricky. And so that's what we're gonna do next. We're gonna learn how to extract data and work with nested data structures.

[00:00:17]
Before that, I wanted to show you a few examples about de-structuring I'm not going to go super deep into de-structuring. I just wanted to give you a little taste so you have something to start with. But the challenge with de-structuring is that there's so many different ways of going about doing it.

[00:00:36]
And so many combinations of syntax. That it would just take forever for us to go through all of the permutations of it, but I'll show you a little bit, just to give you an idea. Yeah, does that sound good? Cool, and it'll help us later too, because you'll be de-structuring some nested things, and etc.

[00:01:03]
All right, so the de-structuring an array, right, we did that. If you wanna omit a value just skip it. You can also omit beginning values. We have the spread operator, which we haven't talked about yet. Right, and that will gather all of the remaining values, so you'll log something like this.

[00:01:28]
So, A will be the first one, just like you would expect here. By using the spread operator, we're just gonna take the rest of them and sort them into B. So remember when we were saying when else would you use a dot in java script and someone said spread operator?

[00:01:44]
I was like, that's true, but that's not what I was referring to at the time, cool. Let's see, so this is a really useful one, swapping out variables. Typically, how would you swap out a variable if you couldn't do this? How would we do that? How about Cameron.

[00:02:12]
I don't mean to pick on you, but I just remember your name for some reason. That's a good thing, except for maybe I call on you more than other people. So if I wanted b to be 2, and a sorry excuse me. If you wanted b to be 1 and a to be 2, how will you do that?

[00:02:42]
So you can answer, you can ask me a question. Or you can pick someone else to be the lucky next person if you're feeling generous. [LAUGH] Yeah, you want to go?
>> Speaker 2: Yeah, sure. You'd basically create temporary variable to hold one value while you reassign the other.
>> Bianca Gandolfo: Why do we have to do this?

[00:03:21]

>> Speaker 2: Why? Because if you overwrite the current value stays stored at a, then you can't use it to set b.
>> Bianca Gandolfo: Whoa, what is going on? I have some weird snippets enabled that it's going crazy. And then.
>> Bianca Gandolfo: Someone run my code in your head, does that look accurate?

[00:03:46]
'Temp' is A, 'Temp' is one, A is now 2, B is now 1. Okay, I think it's right. You see that? So this is how we would do it before. Now, we save a few lines by simply doing this.
>> Bianca Gandolfo: Pretty cool, right? It's useful.
>> Bianca Gandolfo: All right, and then we have, getting deep into nested data structures.

[00:04:23]

>> Bianca Gandolfo: What is this mess? Wow.
>> Bianca Gandolfo: What do we think? What's the pattern here?
>> Bianca Gandolfo: I would call it confusing.
>> Bianca Gandolfo: [LAUGH] Yeah, so we are looking at a, right? It starts from the outer to the inner a. And then it's gonna go into the next inner function, which is b.

[00:05:01]
And then it's gonna go only to the next inner function, which is a little confusing, cuz we have three inner functions, here. But it's only gonna go to the next one, which is 6.
>> Bianca Gandolfo: Is that right, hold on. So we have 1, 2, and then there, which actually will be 5.

[00:05:30]

>> Bianca Gandolfo: And that's interesting that the D is 6. It doesn't seem right to me, let's run it and find out.
>> Bianca Gandolfo: I need to stop. Maybe like clear my cache or something.
>> Bianca Gandolfo: Okay, so let's see. My question was, is d gonna be six? What do you guys think?

[00:06:04]

>> Bianca Gandolfo: It kind of already tells us
>> Bianca Gandolfo: Very interesting.
>> Bianca Gandolfo: Wait, not a, b, okay.
>> Bianca Gandolfo: c, I see, interesting. Ha.
>> Bianca Gandolfo: And you guys see that? So c is actually holding the entire array.
>> Bianca Gandolfo: You want me to move to the other screen so we can look at it?

[00:06:43]
Or keep it here.
>> Bianca Gandolfo: Someone ask a question.
>> Bianca Gandolfo: How about over here at the end in the gray.
>> Speaker 3: What's the practicality of using nested arrays versus objects?
>> Bianca Gandolfo: I would recommend not doing something like this.
>> Speaker 3: [LAUGH]
>> Bianca Gandolfo: Yeah, because unless you're doing something like, if you're making a tree data structure or something like that you can use nested arrays and it makes sense.

[00:07:32]
However, I still use objects to make my tree data structures when I need to do that. The thing with the array is that it's not giving you much information about what is doing what, and shape is kinda hard to understand when it's super nested like this. And I would be really surprised to find real code that looks like this.

[00:07:58]
And I would hope not. If it does look like this, then they're really, they're doing something wrong. They're not being thoughtful in how they're building their data structure. Yeah, good question. I like that.
>> Bianca Gandolfo: Awesome.
>> Bianca Gandolfo: So let's check out this pattern. We have one, two, three
>> Bianca Gandolfo: nested arrays.

[00:08:24]
And in here we have 1, 2, 3, 4, 5, right? So what's fascinating to me is how this translates, right? Is that not interesting to anyone else? Cuz it seems like it's picking up all the values. All right, let's just check d. Yeah.
>> Bianca Gandolfo: So we have a, a is 1.

[00:08:55]

>> Bianca Gandolfo: We have 2, b is 2. That makes sense to me, does that make sense to you guys? Seems straightforward, right? And then c. That's where it gets interesting. C and d
>> Speaker 4: Can I ask what would happen if you took away the brackets around b, like that opening bracket for b and then one of the trailing ones there.

[00:09:25]
Would that change how the assignments go because they're looking at the nested brackets on the assigning?
>> Bianca Gandolfo: Yeah, let's check it out.
>> Speaker 4: Because we don't have the same amount of layers or what just happened?
>> Bianca Gandolfo: It's not iterable, that's very interesting.
>> Bianca Gandolfo: a,
>> Bianca Gandolfo: Yeah, I'm not sure, this is a tricky one.

[00:09:56]

>> Speaker 4: It might be trying to assign that entire array from 2 to 6, all to b, maybe, then?
>> Bianca Gandolfo: Yeah, anyone? So we have 3 and 4 and "c:" then "d:" is the last one, very fascinating.
>> Bianca Gandolfo: What's the takeaway here?
>> Speaker 5: Don't use nested arrays.
>> Group: [LAUGH]

[00:10:29]

>> Bianca Gandolfo: Yeah, and don't try to destructure crazy nested arrays like this. I think that's the biggest take away. Is this readable? Is this straight forward? No, probably not a good idea. Cool, let's move on. All right, so when you want to get a value from a property, we saw this already.

[00:11:04]
This won't match, create. And etc., and it keeps going.
>> Bianca Gandolfo: Here it just keeps going. Anyway-
>> Speaker 4: Do you have these notes somewhere?
>> Bianca Gandolfo: I'll send them out. So yeah I just wanted to show you that there's a lot deeper that you can go with this. And we're not gonna go deep into that, but it's something interesting to explore when you're ready.

[00:11:37]
Or I'm sure there are some ES6 courses here on the Frontend Masters platform to go even deeper with the structuring.

