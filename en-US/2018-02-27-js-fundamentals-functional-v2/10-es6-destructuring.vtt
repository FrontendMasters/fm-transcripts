WEBVTT

1
00:00:00.390 --> 00:00:03.700
&gt;&gt; Bianca Gandolfo: So we're gonna talk
about destructuring, which is in ES6.

2
00:00:03.700 --> 00:00:07.270
Two things that we need to think about
when we are thinking about destructuring,

3
00:00:07.270 --> 00:00:11.550
and we're only gonna be talking about
destructuring objects in arrays right now.

4
00:00:11.550 --> 00:00:14.486
We'll talk about the other
kinds of destructuring later.

5
00:00:14.486 --> 00:00:21.650
We have the target and
then we have the source, right?

6
00:00:21.650 --> 00:00:26.170
So keep that in mind because I'm
gonna be using those words, but

7
00:00:26.170 --> 00:00:27.520
let me explain what destructuring is.

8
00:00:27.520 --> 00:00:33.733
Destructuring is a simplified
way of defining variables and

9
00:00:33.733 --> 00:00:38.376
taking them outside of an object or
an array.

10
00:00:38.376 --> 00:00:42.718
So in your code,

11
00:00:42.718 --> 00:00:47.989
you may be doing a lot

12
00:00:47.989 --> 00:00:55.121
of cc var obj = this thing,

13
00:00:55.121 --> 00:00:59.786
{first: '}.

14
00:00:59.786 --> 00:01:04.581
Someone tell me their first name.
&gt;&gt; off screen male: Dan.

15
00:01:04.581 --> 00:01:06.563
&gt;&gt; Bianca Gandolfo: All right.

16
00:01:06.563 --> 00:01:10.622
What's a really cool last name?
&gt;&gt; off screen male: Coelho.

17
00:01:10.622 --> 00:01:12.302
&gt;&gt; Bianca Gandolfo: How do you spell that?

18
00:01:12.302 --> 00:01:14.229
&gt;&gt; off screen male: C-O-E-L-H-O.

19
00:01:14.229 --> 00:01:18.148
&gt;&gt; Bianca Gandolfo: C-O-

20
00:01:18.148 --> 00:01:20.655
&gt;&gt; off screen male: L-H-O after the E.

21
00:01:23.243 --> 00:01:24.278
&gt;&gt; Bianca Gandolfo: Is that Brazillian or

22
00:01:24.278 --> 00:01:24.911
something?

23
00:01:24.911 --> 00:01:25.615
Yeah, cool.

24
00:01:25.615 --> 00:01:27.970
That is a cool last name, awesome.

25
00:01:27.970 --> 00:01:33.785
So doing something like this, and
then saying var first = obj.first.

26
00:01:33.785 --> 00:01:37.683
You can already see that I'm
exhausted just typing this out.

27
00:01:37.683 --> 00:01:41.040
And then we say var last = obj.last.

28
00:01:41.040 --> 00:01:45.473
Who does this kinda stuff in their code?
&gt;&gt; Bianca Gandolfo: Probably everyone all

29
00:01:45.473 --> 00:01:49.202
the time, unless you're already
using destructuring cuz that's what

30
00:01:49.202 --> 00:01:53.780
destructuring solves is it saves us
from repeating ourselves in this way.

31
00:01:53.780 --> 00:01:56.316
So we're gonna talk about
variable declarations and

32
00:01:56.316 --> 00:01:58.350
assignment with destructuring.

33
00:01:58.350 --> 00:01:59.670
This is an example for an array.

34
00:02:00.770 --> 00:02:03.531
So we have an array here
with the value true and

35
00:02:03.531 --> 00:02:08.376
false.
&gt;&gt; Bianca Gandolfo: And

36
00:02:08.376 --> 00:02:12.540
we are destructuring it so

37
00:02:12.540 --> 00:02:19.830
that first = true and then second = false.

38
00:02:19.830 --> 00:02:26.943
What's the pattern here?
&gt;&gt; Bianca Gandolfo: So

39
00:02:26.943 --> 00:02:35.133
if I say,
&gt;&gt; Bianca Gandolfo: Whoops.

40
00:02:45.219 --> 00:02:46.122
&gt;&gt; Bianca Gandolfo: What's the pattern?

41
00:02:46.122 --> 00:02:46.843
&gt;&gt; off screen male: So the array-

42
00:02:46.843 --> 00:02:48.538
&gt;&gt; Bianca Gandolfo: Why is first true and

43
00:02:48.538 --> 00:02:50.336
why is second false?

44
00:02:50.336 --> 00:02:52.331
You were gonna say something?
&gt;&gt; off screen male: Yeah,

45
00:02:52.331 --> 00:02:57.653
it's the array of const there,
it's multiple objects and

46
00:02:57.653 --> 00:03:01.805
they're all being
assigned to those values,

47
00:03:01.805 --> 00:03:05.588
the related values on the other side.
&gt;&gt; Bianca Gandolfo: Yeah,

48
00:03:05.588 --> 00:03:07.100
it's just an order, right?

49
00:03:07.100 --> 00:03:10.708
The first,
it has nothing to do with the naming here.

50
00:03:10.708 --> 00:03:13.147
I just named it first because I
thought that would be helpful.

51
00:03:13.147 --> 00:03:16.134
But in retrospect, maybe that
makes it a little more confusing.

52
00:03:16.134 --> 00:03:22.103
We can name it whatever we wanted.
&gt;&gt; Bianca Gandolfo: And

53
00:03:22.103 --> 00:03:24.270
it's just gonna be in order, right?

54
00:03:24.270 --> 00:03:28.340
So imagine if this array was much longer,
you could do a, b, c,

55
00:03:28.340 --> 00:03:32.728
d, all the way to z, and
then it would just be assigned an order.

56
00:03:32.728 --> 00:03:36.708
So that's array destructuring for
a variable declaration.

57
00:03:36.708 --> 00:03:37.870
Why is it variable declaration?

58
00:03:37.870 --> 00:03:39.850
Because we're creating
a variable right there.

59
00:03:41.000 --> 00:03:42.495
So we're creating the variable first.

60
00:03:42.495 --> 00:03:45.564
We're creating the variable second.

61
00:03:45.564 --> 00:03:51.180
And we're also using some other ES6
things that we haven't looked at yet,

62
00:03:51.180 --> 00:03:52.340
const and let.

63
00:03:52.340 --> 00:03:56.850
Are you guys using const and
let in your code, yeah?

64
00:03:56.850 --> 00:03:58.640
Raise your hand if you are.

65
00:03:58.640 --> 00:04:01.979
Raise your hand if you kind of are but
you sometimes forget and

66
00:04:01.979 --> 00:04:05.598
then you have to go back [LAUGH] and
select all [LAUGH] and replace it.

67
00:04:05.598 --> 00:04:08.762
That's me, that's where I'm at.

68
00:04:08.762 --> 00:04:11.484
And it's just much faster
to do it the old way.

69
00:04:11.484 --> 00:04:15.810
And then I'm like, okay, well, I don't
wanna look, I don't care, cuz I do.

70
00:04:15.810 --> 00:04:17.960
So I'm gonna go back and fix it.

71
00:04:19.100 --> 00:04:22.570
Anyway, that's enough about my life.

72
00:04:22.570 --> 00:04:26.030
Let's talk about this.

73
00:04:26.030 --> 00:04:28.232
Is this clear, how this is working?

74
00:04:28.232 --> 00:04:31.970
So we're creating variables on the left,
that's the target.

75
00:04:31.970 --> 00:04:34.370
And the source is an array with values.

76
00:04:35.490 --> 00:04:38.519
It's a little confusing because
there's two brackets on each side.

77
00:04:38.519 --> 00:04:40.493
We're not used to seeing
brackets on each side.

78
00:04:40.493 --> 00:04:45.149
We're used to seeing brackets
on the right of a assignment

79
00:04:45.149 --> 00:04:49.032
versus on both sides.
&gt;&gt; off screen male: What if there's

80
00:04:49.032 --> 00:04:51.550
not = on each side?

81
00:04:51.550 --> 00:04:53.644
So if there's true false true or

82
00:04:53.644 --> 00:04:56.310
something?
&gt;&gt; Bianca Gandolfo: Yeah, let's try it.

83
00:04:56.310 --> 00:04:58.703
I like where we're going with this.

84
00:04:58.703 --> 00:05:06.268
So like this?
&gt;&gt; off screen male: Yeah.

85
00:05:06.268 --> 00:05:06.805
&gt;&gt; Bianca Gandolfo: If you had to guess,

86
00:05:06.805 --> 00:05:13.587
what do you think?
&gt;&gt; off screen male: Syntax error.

87
00:05:13.587 --> 00:05:14.157
&gt;&gt; Bianca Gandolfo: Hm?

88
00:05:14.157 --> 00:05:15.048
&gt;&gt; off screen male: Syntax error.

89
00:05:20.168 --> 00:05:22.063
&gt;&gt; Bianca Gandolfo: It's undefined, so

90
00:05:22.063 --> 00:05:27.012
it's that same as probably
doing something like this,

91
00:05:27.012 --> 00:05:34.361
then saying = array,
&gt;&gt; Bianca Gandolfo: At 3, right?

92
00:05:34.361 --> 00:05:40.944
Cuz it's 0, 1, 2, 3 is undefined.
&gt;&gt; off screen male: Does it successfully

93
00:05:40.944 --> 00:05:47.921
assign c and d, though?
&gt;&gt; Bianca Gandolfo: See

94
00:05:47.921 --> 00:05:49.337
how it still works?

95
00:05:49.337 --> 00:05:52.655
The behavior isn't different,
and so it's c and

96
00:05:52.655 --> 00:05:56.896
d.
&gt;&gt; Bianca Gandolfo: So that's nice.

97
00:05:56.896 --> 00:05:58.247
Java code's flexible like that.

98
00:05:58.247 --> 00:06:06.043
Cool, we're good?
&gt;&gt; Bianca Gandolfo: How

99
00:06:06.043 --> 00:06:11.746
is this different from the kind
of variable declaration

100
00:06:11.746 --> 00:06:15.032
work that we were doing before?

101
00:06:23.912 --> 00:06:26.110
&gt;&gt; Bianca Gandolfo: No,
is that exactly the same?

102
00:06:26.110 --> 00:06:29.135
You can just say something obvious.
&gt;&gt; off screen male: It's less verbose.

103
00:06:29.135 --> 00:06:30.150
&gt;&gt; Bianca Gandolfo: Mm-hm.

104
00:06:30.150 --> 00:06:31.513
&gt;&gt; off screen male: It's more succinct,

105
00:06:31.513 --> 00:06:36.318
but it could make for really long sort of
assignment lines given a large number of

106
00:06:36.318 --> 00:06:40.995
variables and maybe decreased readability.
&gt;&gt; Bianca Gandolfo: Yeah, yeah,

107
00:06:40.995 --> 00:06:45.834
yeah, yeah, that's true, cool.

108
00:06:45.834 --> 00:06:48.548
And then we have, so
we have the variable declarations.

109
00:06:48.548 --> 00:06:49.807
And then we have the assignment.

110
00:06:49.807 --> 00:06:54.480
Assignment is just when the variables
already exist, you can assign them.

111
00:06:54.480 --> 00:06:57.406
So up top, we're creating variables for
the first time.

112
00:06:57.406 --> 00:07:02.970
Second one, we're assigning them
to a variable that already exists.

113
00:07:02.970 --> 00:07:08.511
So looks similar,
except that we don't have the var,

114
00:07:08.511 --> 00:07:15.530
let, const imprint.
&gt;&gt; Bianca Gandolfo: Yeah?

115
00:07:15.530 --> 00:07:19.230
Someone asked me a question about this.
&gt;&gt; off screen male: When do you

116
00:07:19.230 --> 00:07:20.891
use constant versus let?
&gt;&gt; Bianca Gandolfo: Mm,

117
00:07:20.891 --> 00:07:22.587
I like this question.

118
00:07:22.587 --> 00:07:28.241
So you use const when you
don't want the variable,

119
00:07:28.241 --> 00:07:35.090
that variable name,
to be reassigned to something.

120
00:07:35.090 --> 00:07:39.260
So const, if you try to reassign
it to a different value,

121
00:07:39.260 --> 00:07:41.960
there are some caveats here.

122
00:07:41.960 --> 00:07:45.760
Because of what we were talking about
with the objects in reference and

123
00:07:45.760 --> 00:07:47.292
stuff like that.

124
00:07:47.292 --> 00:07:50.135
But essentially,

125
00:07:50.135 --> 00:07:55.410
if you try to reassign const, that's why I
had to make new variable names each time.

126
00:07:55.410 --> 00:07:59.030
So up here, I said const c, for example.

127
00:07:59.030 --> 00:08:04.911
So if I say c = 3.
&gt;&gt; Bianca Gandolfo: It gives you an error,

128
00:08:04.911 --> 00:08:07.050
you can't reassign it, which is nice.

129
00:08:07.050 --> 00:08:12.329
It's nice as long as you know that

130
00:08:12.329 --> 00:08:16.855
if you say, where are we at,

131
00:08:16.855 --> 00:08:24.540
if const e = right?
&gt;&gt; Bianca Gandolfo: Where are we?

132
00:08:24.540 --> 00:08:26.100
Let's just say j.

133
00:08:26.100 --> 00:08:31.273
Okay, so we have j,
we say j.x = 3 that will work.

134
00:08:31.273 --> 00:08:35.744
Curious right?

135
00:08:35.744 --> 00:08:41.115
Why might this way work and
not The other way.

136
00:08:41.115 --> 00:08:47.333
How about Cameron?

137
00:08:47.333 --> 00:08:52.748
You're the only person whose name I

138
00:08:52.748 --> 00:08:57.809
remember for some reason [LAUGH].

139
00:09:06.410 --> 00:09:08.230
&gt;&gt; off screen male: What
was the other way?

140
00:09:08.230 --> 00:09:10.320
I was taking notes when
you did the first part.

141
00:09:10.320 --> 00:09:12.750
&gt;&gt; Bianca Gandolfo: It's okay the question

142
00:09:12.750 --> 00:09:19.210
was how come when we reassign c,
we get an error?

143
00:09:20.720 --> 00:09:25.650
But when we reassign the value of
x which is a property on objects.

144
00:09:25.650 --> 00:09:26.440
It just let's us do it.

145
00:09:26.440 --> 00:09:30.320
Even though we are using
constants in both cases.

146
00:09:30.320 --> 00:09:32.740
So anyone have any idea?
&gt;&gt; off screen male: Imagine constant

147
00:09:32.740 --> 00:09:35.640
doesnt apply to the attributes or

148
00:09:35.640 --> 00:09:38.970
the variable.
&gt;&gt; Bianca Gandolfo: The const,

149
00:09:38.970 --> 00:09:44.190
it's not that const doesn't
apply to the properties.

150
00:09:44.190 --> 00:09:45.255
&gt;&gt; off screen male: We are not changing j,

151
00:09:45.255 --> 00:09:48.970
we're just changing a property on j.
&gt;&gt; Bianca Gandolfo: Exactly,

152
00:09:48.970 --> 00:09:50.140
so.
&gt;&gt; off screen male: So

153
00:09:50.140 --> 00:09:54.250
can you not add a new property on a j?
&gt;&gt; Bianca Gandolfo: No,

154
00:09:54.250 --> 00:09:56.860
you can still add a new property.
&gt;&gt; off screen male: You can still do that.

155
00:09:56.860 --> 00:09:58.274
&gt;&gt; Bianca Gandolfo: And so, if we said.

156
00:09:58.274 --> 00:10:06.040
J.y = 4 but
what we can't do is we can't do, is

157
00:10:06.040 --> 00:10:10.650
we can't say j is now a different object.
&gt;&gt; off screen male: Can you

158
00:10:10.650 --> 00:10:13.710
hold the properties constant?
&gt;&gt; Bianca Gandolfo: What was

159
00:10:13.710 --> 00:10:14.460
that?
&gt;&gt; off screen male: Can you hold

160
00:10:14.460 --> 00:10:15.850
the properties constant?

161
00:10:15.850 --> 00:10:20.575
So for instance, j.y.
&gt;&gt; off screen male: If you

162
00:10:20.575 --> 00:10:24.380
use object.freeze.
&gt;&gt; Bianca Gandolfo: You're asking

163
00:10:24.380 --> 00:10:25.740
if you wanted to, so

164
00:10:25.740 --> 00:10:27.690
that you can't change the properties.
&gt;&gt; off screen male: Right, yeah.

165
00:10:27.690 --> 00:10:28.298
&gt;&gt; Bianca Gandolfo: Yeah, so

166
00:10:28.298 --> 00:10:32.520
object.freeze would do that for you.
&gt;&gt; off screen male: So

167
00:10:32.520 --> 00:10:36.179
you'd have to wrap the object with
all the properties in object.freeze.

168
00:10:37.290 --> 00:10:40.000
That only goes only one layer deep, so

169
00:10:40.000 --> 00:10:43.910
you have objects inside of objects.
&gt;&gt; Bianca Gandolfo: How do you handle

170
00:10:43.910 --> 00:10:46.969
objects inside of objects?
&gt;&gt; off screen male: I use a little module

171
00:10:46.969 --> 00:10:48.927
called Deep Freeze [CROSSTALK].

172
00:10:48.927 --> 00:10:53.810
So I think substatic proto its
like a little recursive object

173
00:10:53.810 --> 00:10:55.668
on a freeze.
&gt;&gt; Bianca Gandolfo: Okay.

174
00:10:55.668 --> 00:10:58.161
&gt;&gt; off screen male: Module.

175
00:10:58.161 --> 00:11:01.120
&gt;&gt; Bianca Gandolfo: Yeah, so useful but

176
00:11:01.120 --> 00:11:05.110
just keep that in mind that it seems
like it is a lot more than it is.

177
00:11:05.110 --> 00:11:10.530
And it can be a little bit tricky
when we're using objects and

178
00:11:10.530 --> 00:11:11.890
raising functions, right?

179
00:11:11.890 --> 00:11:13.010
Our non primitive values.

180
00:11:13.010 --> 00:11:16.089
Primitive values will work as you'd

181
00:11:16.089 --> 00:11:20.365
expect.
&gt;&gt; off screen male: Do you want to demo

182
00:11:20.365 --> 00:11:23.050
object.freeze because
that might be useful.

183
00:11:23.050 --> 00:11:25.840
&gt;&gt; Bianca Gandolfo: Sure I don't actually

184
00:11:25.840 --> 00:11:29.720
know what goes, what are the arguments.
&gt;&gt; off screen male: Just put in an object

185
00:11:29.720 --> 00:11:30.840
like your x.

186
00:11:30.840 --> 00:11:31.520
&gt;&gt; Bianca Gandolfo: J?
&gt;&gt; off screen male: Yeah.

187
00:11:31.520 --> 00:11:32.440
&gt;&gt; Bianca Gandolfo: That's it.

188
00:11:32.440 --> 00:11:33.090
&gt;&gt; off screen male: Yeah, yeah,

189
00:11:33.090 --> 00:11:34.740
exactly yeah.
&gt;&gt; Bianca Gandolfo: All right.

190
00:11:34.740 --> 00:11:36.139
&gt;&gt; off screen male: So now let's just try

191
00:11:36.139 --> 00:11:40.412
to redefine
&gt;&gt; Bianca Gandolfo: What?

192
00:11:42.994 --> 00:11:43.510
&gt;&gt; Bianca Gandolfo: Okay, so

193
00:11:43.510 --> 00:11:45.379
it doesn't give you an error, but

194
00:11:45.379 --> 00:11:49.098
it doesn't let you change it.
&gt;&gt; off screen male: Yeah,

195
00:11:49.098 --> 00:11:52.003
it doesn't throw an actual.
&gt;&gt; Bianca Gandolfo: Yeah, like the

196
00:11:52.003 --> 00:11:56.900
constant is actually throwing an error.
&gt;&gt; off screen male: It doesn't throw

197
00:11:56.900 --> 00:12:00.290
a syntax error.
&gt;&gt; Bianca Gandolfo: Yeah, cool.

198
00:12:00.290 --> 00:12:01.150
So that's const.

199
00:12:02.610 --> 00:12:08.400
Any other questions about this?
&gt;&gt; off screen female: So

200
00:12:08.400 --> 00:12:13.410
when to use let?
&gt;&gt; Bianca Gandolfo: Okay, perfect.

201
00:12:13.410 --> 00:12:16.630
So let allows you to reassign.

202
00:12:17.750 --> 00:12:22.410
And so it's similar to Var right,
so Var you can reassign, great.

203
00:12:22.410 --> 00:12:24.850
But Let has implications for its scope.

204
00:12:24.850 --> 00:12:29.840
So when we talk about scope later on
today, you'll see that before let,

205
00:12:29.840 --> 00:12:32.790
we didn't have a concept of block scope.

206
00:12:32.790 --> 00:12:34.340
Is anyone coming from a language?

207
00:12:34.340 --> 00:12:35.759
Someone said they were doing Ruby right?

208
00:12:38.630 --> 00:12:43.380
So you are probably have run into
blockscope and you used blockscope.

209
00:12:43.380 --> 00:12:47.940
A block is just curly brackets
that isn't an object,

210
00:12:47.940 --> 00:12:50.050
that's the way I think about it.

211
00:12:50.050 --> 00:12:52.050
So you can have curly
brackets as an object or

212
00:12:52.050 --> 00:12:54.130
you can have curly objects that a block.

213
00:12:54.130 --> 00:12:56.210
And they could be by a function, right?

214
00:12:56.210 --> 00:12:57.380
And you can create a function block.

215
00:12:57.380 --> 00:12:58.970
It could be on if.

216
00:12:58.970 --> 00:13:02.340
If block, try catch block,
stuff like that.

217
00:13:02.340 --> 00:13:05.690
So prior to let,

218
00:13:07.440 --> 00:13:12.150
there was no scope to block scope.

219
00:13:12.150 --> 00:13:16.084
Which means that it will
go into more That if a,

220
00:13:20.947 --> 00:13:23.677
&gt;&gt; off screen male: Like an if statement,

221
00:13:23.677 --> 00:13:29.090
there would be no scope
in the f statement.

222
00:13:29.090 --> 00:13:30.110
Prior to using that.
&gt;&gt; Bianca Gandolfo: Yeah,

223
00:13:30.110 --> 00:13:34.580
part of that would just be the function
scope but I haven't explained scope yet.

224
00:13:34.580 --> 00:13:37.950
So, I'm trying to think of-
&gt;&gt; off screen male: Maybe move on and

225
00:13:37.950 --> 00:13:40.580
revisit that?
&gt;&gt; Bianca Gandolfo: Yeah, we can move on.

226
00:13:40.580 --> 00:13:44.610
Just note that it has implication
with scope and behaves differently.

227
00:13:44.610 --> 00:13:50.180
Yeah cool, good question.
&gt;&gt; off screen male: So

228
00:13:50.180 --> 00:13:51.770
it's basically the difference
between global and

229
00:13:51.770 --> 00:13:53.690
local variable.
&gt;&gt; Bianca Gandolfo: It's

230
00:13:55.150 --> 00:13:58.400
a similar idea it's not the same.
&gt;&gt; off screen male: Okay.

231
00:13:58.400 --> 00:13:59.030
&gt;&gt; Bianca Gandolfo: But it's

232
00:13:59.030 --> 00:14:00.440
about different.

233
00:14:00.440 --> 00:14:07.170
Where a variable reference
has access to a value, right.

234
00:14:08.660 --> 00:14:13.090
Sometimes curly brackets will define that,
sometimes they don't.

235
00:14:13.090 --> 00:14:15.770
And let-in bar has
something to do with that.

236
00:14:15.770 --> 00:14:16.905
Has everything to do with that.

237
00:14:16.905 --> 00:14:21.543
So, cool, great, destructuring.

238
00:14:24.721 --> 00:14:26.118
&gt;&gt; Bianca Gandolfo: And here is for

239
00:14:26.118 --> 00:14:32.239
objects,
&gt;&gt; Bianca Gandolfo: What's

240
00:14:32.239 --> 00:14:32.958
the pattern here?

241
00:14:42.271 --> 00:14:43.311
&gt;&gt; Bianca Gandolfo: So.

242
00:14:45.343 --> 00:14:49.370
&gt;&gt; Bianca Gandolfo: Anyone, how about we

243
00:14:49.370 --> 00:14:54.632
start right here?
&gt;&gt; off screen male: The Key and value,

244
00:14:54.632 --> 00:15:00.680
they have the same name.
&gt;&gt; Bianca Gandolfo: Yeah,

245
00:15:00.680 --> 00:15:06.480
so the property name and
the target decorations have the same name.

246
00:15:06.480 --> 00:15:07.170
What did I do wrong?

247
00:15:10.650 --> 00:15:11.980
Do I have a syntax error?

248
00:15:14.530 --> 00:15:15.901
Syntax error, first of the.

249
00:15:22.909 --> 00:15:26.710
&gt;&gt; Bianca Gandolfo: Well, okay.

250
00:15:26.710 --> 00:15:30.250
So let's check out what first one.

251
00:15:31.690 --> 00:15:37.109
Is undefined, that's not at all,
it has to match, giving it all away.

252
00:15:41.610 --> 00:15:42.110
What?

253
00:15:46.000 --> 00:15:51.395
First one has already been declared,
well fine.

254
00:15:51.395 --> 00:15:56.420
Ok, we're good.

255
00:15:56.420 --> 00:15:59.420
So first one zero.

256
00:16:00.470 --> 00:16:03.550
second1 is 1.

257
00:16:03.550 --> 00:16:07.860
So who can tell me how this works?

258
00:16:07.860 --> 00:16:12.940
How about?
&gt;&gt; off screen female: It's

259
00:16:12.940 --> 00:16:15.790
working because of the order
is similar to last time and

260
00:16:15.790 --> 00:16:19.700
then the matching names of the objects.
&gt;&gt; Bianca Gandolfo: Yeah,

261
00:16:19.700 --> 00:16:22.070
so the names have to match in this case.

262
00:16:22.070 --> 00:16:26.190
So objects don't have an order, but

263
00:16:26.190 --> 00:16:28.380
it just happens to be in
order in this example.

264
00:16:29.670 --> 00:16:30.170
But yeah.

265
00:16:31.260 --> 00:16:37.150
So same thing, we are creating a variable,
we are assigning a variable called,

266
00:16:37.150 --> 00:16:42.020
first, to the value of the first property.

267
00:16:42.020 --> 00:16:47.140
And we're assigning the value second
to the value of the second property.

268
00:16:48.760 --> 00:16:51.390
Yeah?
&gt;&gt; off screen male: So the order doesn't

269
00:16:51.390 --> 00:16:53.940
matter in this declaration or assignment?
&gt;&gt; Bianca Gandolfo: No,

270
00:16:53.940 --> 00:16:58.357
the order does not matter, no, no.
&gt;&gt; Bianca Gandolfo: Whenever you start

271
00:16:58.357 --> 00:17:02.395
thinking that objects have an order or
should have an order,

272
00:17:02.395 --> 00:17:06.368
you should be using an array.
&gt;&gt; Bianca Gandolfo: And if

273
00:17:06.368 --> 00:17:10.480
you're expecting an order from an object,
sometimes it'll always come that way.

274
00:17:10.480 --> 00:17:15.340
But that's a bad expectation
cuz it's not guaranteed.

275
00:17:16.450 --> 00:17:19.215
Although sometimes it
seems like it comes in

276
00:17:19.215 --> 00:17:23.304
order.
&gt;&gt; Bianca Gandolfo: Cool, so

277
00:17:23.304 --> 00:17:24.290
that's destructuring.

278
00:17:25.350 --> 00:17:30.110
It just makes getting
values out of objects and

279
00:17:30.110 --> 00:17:34.030
arrays, have less typing.

280
00:17:34.030 --> 00:17:38.670
And we like less typing,
as long as it's still readable.

281
00:17:41.080 --> 00:17:44.640
You know, as long as we can understand
what you're doing, awesome.

282
00:17:44.640 --> 00:17:49.960
Once you start to get out of that range
that's when we start to have problems.

283
00:17:51.220 --> 00:17:54.305
That's where some people
are very dogmatic about it.

284
00:17:54.305 --> 00:17:59.689
Cool, questions?

285
00:18:00.850 --> 00:18:03.150
About this?
&gt;&gt; off screen male: I don't really follow

286
00:18:03.150 --> 00:18:05.120
here where are we creating an object and

287
00:18:05.120 --> 00:18:09.660
where are we creating properties?
&gt;&gt; Bianca Gandolfo: Yeah, so

288
00:18:09.660 --> 00:18:13.760
that's the confusing thing is cuz
the syntax looks really similar.

289
00:18:13.760 --> 00:18:18.030
So the way that I think about it is,
you're always, whenever you create

290
00:18:18.030 --> 00:18:21.120
a variable or you assign a variable,
it's always gonna be on the left.

291
00:18:21.120 --> 00:18:23.170
You say, var x equals y.

292
00:18:23.170 --> 00:18:27.640
You don't say, y equals x bar or
something backwards like that, so

293
00:18:27.640 --> 00:18:28.575
just remember that.

294
00:18:28.575 --> 00:18:33.831
And,
&gt;&gt; Bianca Gandolfo: Yeah, and

295
00:18:33.831 --> 00:18:40.040
then the right-hand side is gonna be
the value, just like in that example.

296
00:18:41.930 --> 00:18:45.950
And it also helps that for the variable
declaration, it says const let var,

297
00:18:45.950 --> 00:18:51.090
whichever one you're using in that case,
and that gives you a hint.

298
00:18:53.360 --> 00:18:57.480
Yeah, a lot of times, it's not even
going to be a literal like this.

299
00:18:57.480 --> 00:19:06.162
It's just going to be like,
&gt;&gt; Bianca Gandolfo: Like

300
00:19:06.162 --> 00:19:08.270
my obj equals this.

301
00:19:08.270 --> 00:19:13.352
And then,
&gt;&gt; Bianca Gandolfo: Come on.

302
00:19:21.670 --> 00:19:22.596
&gt;&gt; Bianca Gandolfo: It's gonna be,

303
00:19:29.810 --> 00:19:30.402
&gt;&gt; Bianca Gandolfo: Maybe not,

304
00:19:30.402 --> 00:19:39.525
can someone spot my syntax error?
&gt;&gt; off screen male: Do you need a bar or

305
00:19:39.525 --> 00:19:43.121
before the object?
&gt;&gt; Bianca Gandolfo: I don't think so,

306
00:19:43.121 --> 00:19:47.337
I can try.
&gt;&gt; Bianca Gandolfo: No.

307
00:19:50.920 --> 00:19:53.420
&gt;&gt; Bianca Gandolfo: Weird, okay.

308
00:19:53.420 --> 00:19:56.796
Well typically, you're not
looking at an object literal, but

309
00:19:56.796 --> 00:20:03.830
you're looking at a reference of a,
&gt;&gt; off screen male: If it's already

310
00:20:03.830 --> 00:20:11.234
been declared is that const freaking out?
&gt;&gt; Bianca Gandolfo: I

311
00:20:11.234 --> 00:20:14.802
don't know.
&gt;&gt; Bianca Gandolfo: Okay,

312
00:20:14.802 --> 00:20:16.660
I'll figure this out and get back to you.

313
00:20:17.860 --> 00:20:20.310
Dun, dun, dun, it's a mystery.

314
00:20:20.310 --> 00:20:22.460
That's why I like mysteries because
when I don't know something then it's

315
00:20:22.460 --> 00:20:24.270
just a mystery,
it's not that I don't know it.

316
00:20:26.010 --> 00:20:26.510
Awesome.

