WEBVTT

1
00:00:00.162 --> 00:00:03.488
So we're gonna talk about destructuring,
which is an ES6.

2
00:00:03.488 --> 00:00:07.435
Two things that we need to think about
when we're thinking about destructuring.

3
00:00:07.435 --> 00:00:11.230
And we're only gonna be talking
about destructuring objects and

4
00:00:11.230 --> 00:00:15.789
arrays right now, we'll talk about
the other kinds of destructuring later.

5
00:00:15.789 --> 00:00:21.426
We have the target and
then we have the source, right?

6
00:00:21.426 --> 00:00:25.899
So, Keep that in mind because I'm
gonna be using those words, but

7
00:00:25.899 --> 00:00:27.417
let me explain what destructuring is.

8
00:00:27.417 --> 00:00:33.676
Destructuring is a simplified
way of defining variables and

9
00:00:33.676 --> 00:00:38.227
taking them outside of a object or
an array.

10
00:00:38.227 --> 00:00:42.637
So in your code you may

11
00:00:42.637 --> 00:00:47.292
be doing a lot of like,

12
00:00:47.292 --> 00:00:55.378
cc var on equals this thing like first,

13
00:00:55.378 --> 00:01:02.500
someone tell me their first name.

14
00:01:02.500 --> 00:01:04.533
&gt;&gt; Dan.

15
00:01:04.533 --> 00:01:09.102
&gt;&gt; All right,
what's a really cool last name?

16
00:01:09.102 --> 00:01:10.468
&gt;&gt; Coelho.

17
00:01:10.468 --> 00:01:11.728
&gt;&gt; How do you spell that?

18
00:01:11.728 --> 00:01:14.283
&gt;&gt; C-O-E-L-H-O.

19
00:01:14.283 --> 00:01:20.897
&gt;&gt; C-O-
&gt;&gt; L-H-O, after the.

20
00:01:23.257 --> 00:01:24.828
&gt;&gt; Is that Brazilian or something?

21
00:01:24.828 --> 00:01:25.622
Yeah, that's cool.

22
00:01:25.622 --> 00:01:27.748
It is a cool last name, awesome.

23
00:01:27.748 --> 00:01:33.669
So doing something like this and
then saying var first = obj.first.

24
00:01:33.669 --> 00:01:37.016
You can already see that I'm
exhausted just typing this out.

25
00:01:37.016 --> 00:01:40.858
And then we'll say var last = obj.last.

26
00:01:40.858 --> 00:01:42.480
Who does this kind stuff in their code?

27
00:01:44.134 --> 00:01:48.510
Probably everyone all the time,
unless you're already using destructuring,

28
00:01:48.510 --> 00:01:50.762
cuz that's what destructuring solves,

29
00:01:50.762 --> 00:01:53.608
is it saves us from repeating
ourselves in this way.

30
00:01:53.608 --> 00:01:56.343
So we're gonna talk about
variable declarations and

31
00:01:56.343 --> 00:01:58.110
assignment with destructuring.

32
00:01:58.110 --> 00:02:00.561
This is an example for an array.

33
00:02:00.561 --> 00:02:06.670
So we have an array here
with a value true and false.

34
00:02:07.804 --> 00:02:14.456
And we are destructuring it so
that first will equal true,

35
00:02:14.456 --> 00:02:18.410
and then second will equal false.

36
00:02:18.410 --> 00:02:20.824
What's the pattern here?

37
00:02:26.678 --> 00:02:35.735
So if I say, Oops,

38
00:02:45.091 --> 00:02:46.271
What's the pattern?

39
00:02:46.271 --> 00:02:48.466
&gt;&gt; So the array-
&gt;&gt; Why is first true and

40
00:02:48.466 --> 00:02:50.288
why is second false?

41
00:02:50.288 --> 00:02:51.558
You're gonna say something?

42
00:02:51.558 --> 00:02:56.263
&gt;&gt; Yeah,
the array of consts is multiple objects,

43
00:02:56.263 --> 00:03:00.855
and they're all being
assigned to those values

44
00:03:00.855 --> 00:03:05.694
other the related values
on the other side [LAUGH].

45
00:03:05.694 --> 00:03:09.228
&gt;&gt; Yeah, it's just an order,
right, the first.

46
00:03:09.228 --> 00:03:10.442
And it has nothing to do
with the naming here.

47
00:03:10.442 --> 00:03:13.196
I just named it first,
because I thought that would be helpful,

48
00:03:13.196 --> 00:03:16.010
but in retrospect, maybe that
makes it a little more confusing.

49
00:03:16.010 --> 00:03:17.413
We can name it whatever we wanted.

50
00:03:21.797 --> 00:03:24.088
And it's just gonna be in order, right?

51
00:03:24.088 --> 00:03:28.662
So imagine if this array was much longer,
you could do a, b,

52
00:03:28.662 --> 00:03:33.618
c, d all the way to z, and
then it would just be assigned in order.

53
00:03:33.618 --> 00:03:36.633
So that's a array destructuring for
variable declaration.

54
00:03:36.633 --> 00:03:37.620
Why is the variable declaration?

55
00:03:37.620 --> 00:03:40.801
Because we're creating
a variable right there.

56
00:03:40.801 --> 00:03:43.341
So we're creating the variable first,
we're creating the variable second.

57
00:03:43.341 --> 00:03:47.744
And we're also using some other ES6 things

58
00:03:47.744 --> 00:03:52.511
that we haven't looked at yet,
const and let.

59
00:03:52.511 --> 00:03:55.853
Are you guys using const and
let in your code?

60
00:03:55.853 --> 00:03:58.369
Yeah, raise your hand if you are.

61
00:03:58.369 --> 00:04:02.167
Raise your hand if you kind of are but
you sometimes forget and

62
00:04:02.167 --> 00:04:05.533
then you have to go back and
select all and replace it.

63
00:04:05.533 --> 00:04:08.538
That's me, that's where I'm at.

64
00:04:08.538 --> 00:04:13.594
And it's just such faster to do it
the old way and then I'm like, okay, well

65
00:04:13.594 --> 00:04:18.904
I don't want to look like I don't care cuz
I do, so I'm gonna go back and fix it.

66
00:04:18.904 --> 00:04:22.306
Anyway, that's enough about my life.

67
00:04:22.306 --> 00:04:25.799
Let's talk about this.

68
00:04:25.799 --> 00:04:28.195
Is this clear how this is working?

69
00:04:28.195 --> 00:04:32.829
So we're creating variables on the left,
that's the target, and

70
00:04:32.829 --> 00:04:35.280
the source is an array with values.

71
00:04:35.280 --> 00:04:38.416
It's a little confusing because
there's two brackets on each side.

72
00:04:38.416 --> 00:04:41.552
We're not used to seeing
brackets on each side,

73
00:04:41.552 --> 00:04:46.837
we're used to seeing brackets on the right
of an assignment versus on both sides,

74
00:04:46.837 --> 00:04:51.461
&gt;&gt; What if there's not equal on each side?

75
00:04:51.461 --> 00:04:54.631
So if there's true false true or
something?

76
00:04:54.631 --> 00:04:56.689
&gt;&gt; Yeah, let's try it.

77
00:04:56.689 --> 00:05:00.949
I like where we're going with this.

78
00:05:00.949 --> 00:05:04.039
So like this?

79
00:05:04.039 --> 00:05:06.099
&gt;&gt; Yeah.

80
00:05:06.099 --> 00:05:10.562
&gt;&gt; If you had to guess ,what do you think?

81
00:05:11.822 --> 00:05:13.489
&gt;&gt; Syntax error.

82
00:05:13.489 --> 00:05:14.253
&gt;&gt; Hm?

83
00:05:14.253 --> 00:05:15.482
&gt;&gt; Syntax error.

84
00:05:19.840 --> 00:05:21.008
Undefined.

85
00:05:21.008 --> 00:05:26.995
So it's the same as probably
doing something like this and

86
00:05:26.995 --> 00:05:29.323
saying equals array,

87
00:05:33.517 --> 00:05:39.454
At 3 array cuz of 0, 1, 2, 3 is undefined.

88
00:05:39.454 --> 00:05:42.489
&gt;&gt; Does it successfully assign c and
d though?

89
00:05:47.522 --> 00:05:49.294
&gt;&gt; See how it still works?

90
00:05:49.294 --> 00:05:52.170
Like the behavior isn't different,
and so c and d.

91
00:05:56.199 --> 00:05:58.783
So that's nice job it goes
flexible like that, cool.

92
00:06:02.317 --> 00:06:03.117
We're good?

93
00:06:05.587 --> 00:06:08.684
How is this?

94
00:06:08.684 --> 00:06:13.643
How does this differ from the kind
of variable declaration work that

95
00:06:13.643 --> 00:06:15.297
we were doing before?

96
00:06:23.796 --> 00:06:25.942
No, so exactly the same?

97
00:06:25.942 --> 00:06:27.218
You could say something obvious.

98
00:06:27.218 --> 00:06:31.586
&gt;&gt; It's less verbose,
it's more succinct, but it can make for

99
00:06:31.586 --> 00:06:36.794
really long sort of assignment lines
given a large number of variables and

100
00:06:36.794 --> 00:06:39.067
maybe decreased readability.

101
00:06:39.067 --> 00:06:41.818
&gt;&gt; Yeah, that's true.

102
00:06:44.186 --> 00:06:49.584
Cool, so we have the variable declarations
and then we have the assignment.

103
00:06:49.584 --> 00:06:54.341
Assignment is just when the variables
already exist, you can assign them.

104
00:06:54.341 --> 00:06:57.312
So up top, we're creating variables for
the first time.

105
00:06:57.312 --> 00:07:05.059
Second one, we're assigning them
to a variable that already exists.

106
00:07:05.059 --> 00:07:11.199
So look similar, except that we don't
have the var, let, const in front.

107
00:07:14.301 --> 00:07:18.548
Yeah, someone ask me
a question about this.

108
00:07:18.548 --> 00:07:21.198
&gt;&gt; When do you use constant versus let?

109
00:07:21.198 --> 00:07:22.991
&gt;&gt; I like this question.

110
00:07:22.991 --> 00:07:29.827
So you use const when you
don't want that variable

111
00:07:29.827 --> 00:07:34.882
name to be reassigned to something.

112
00:07:34.882 --> 00:07:38.639
So const if you try to reassign
it to a different value,

113
00:07:38.639 --> 00:07:42.316
there are some caveats here
because of the what we were

114
00:07:42.316 --> 00:07:47.152
talking about with the objects,
in reference, and stuff like that.

115
00:07:47.152 --> 00:07:50.830
But essentially if you
try to reassign const,

116
00:07:50.830 --> 00:07:55.180
that's why I had to make new
variable names each time.

117
00:07:55.180 --> 00:07:58.795
So up here I said const c, for example.

118
00:07:58.795 --> 00:08:03.618
So if I say c = 3, It

119
00:08:03.618 --> 00:08:08.615
gives you an error,
you can't reassign it, which is nice.

120
00:08:08.615 --> 00:08:12.801
It's nice as long as that if you say,

121
00:08:12.801 --> 00:08:17.403
where are we at, f, if we say const e =.

122
00:08:19.864 --> 00:08:24.596
Right, Where are we?

123
00:08:24.596 --> 00:08:26.009
Say j.

124
00:08:26.009 --> 00:08:31.025
Okay, so we have j,
when we say j.x = 3, that will work.

125
00:08:33.879 --> 00:08:34.684
Curious, right?

126
00:08:36.993 --> 00:08:42.532
Why am I that this way work and
not the other way?

127
00:08:42.532 --> 00:08:48.709
My question was, how come when we
reassigned c, we get an error, but

128
00:08:48.709 --> 00:08:54.568
when we reassign the value of x,
which is a property on an object,

129
00:08:54.568 --> 00:09:00.558
it just lets us do it even though
we're using constant both cases?

130
00:09:00.558 --> 00:09:02.058
So anyone have an idea?

131
00:09:02.058 --> 00:09:07.042
&gt;&gt; I imagine constant doesn't apply
to the attributes, it's a variable.

132
00:09:07.042 --> 00:09:14.443
&gt;&gt; It's not that constant
doesn't apply to the properties.

133
00:09:14.443 --> 00:09:17.925
&gt;&gt; We're not changing j,
we're just changing the property on j

134
00:09:17.925 --> 00:09:19.126
&gt;&gt; Exactly.

135
00:09:19.126 --> 00:09:20.453
So-
&gt;&gt; So

136
00:09:20.453 --> 00:09:24.945
can you not add a new property on a j?

137
00:09:24.945 --> 00:09:27.117
&gt;&gt; No, you can still add a new property-
&gt;&gt; You can still [INAUDIBLE]-

138
00:09:27.117 --> 00:09:31.906
&gt;&gt; Yeah, so if we said j.y = 4, but

139
00:09:31.906 --> 00:09:40.356
what we can't do is we can't say
j is now a different object.

140
00:09:40.356 --> 00:09:43.755
&gt;&gt; Can you hold the properties constant?

141
00:09:43.755 --> 00:09:44.289
&gt;&gt; What was that?

142
00:09:44.289 --> 00:09:46.096
&gt;&gt; Can you hold the properties constant?

143
00:09:46.096 --> 00:09:48.200
So for instance, j.y.

144
00:09:49.980 --> 00:09:51.901
&gt;&gt; If you use Object.freeze.

145
00:09:53.847 --> 00:09:57.621
&gt;&gt; You're asking if you want it to so
that you can't change the properties.

146
00:09:57.621 --> 00:09:58.174
&gt;&gt; Right, yeah.

147
00:09:58.174 --> 00:10:01.170
&gt;&gt; Yeah, so
Object.freeze would do that for you.

148
00:10:02.654 --> 00:10:07.720
&gt;&gt; So you'd have to wrap that object with
all the properties in Object.freeze,

149
00:10:07.720 --> 00:10:09.958
and that only goes one layer deep.

150
00:10:09.958 --> 00:10:14.734
So if you have objects inside of objects-
&gt;&gt; How do you handle objects

151
00:10:14.734 --> 00:10:16.223
inside of objects?

152
00:10:16.223 --> 00:10:19.439
&gt;&gt; I use this little
module called Deep Freeze.

153
00:10:19.439 --> 00:10:20.524
&gt;&gt; Okay.
So it just-

154
00:10:20.524 --> 00:10:22.821
&gt;&gt; So I think Substack Pro quote is just

155
00:10:22.821 --> 00:10:25.664
like a little recursive
object on a freeze-

156
00:10:25.664 --> 00:10:27.122
&gt;&gt; Okay.

157
00:10:27.122 --> 00:10:29.097
&gt;&gt; Module.

158
00:10:29.097 --> 00:10:30.554
&gt;&gt; Yeah, so useful, but

159
00:10:30.554 --> 00:10:35.256
just keep that in mind that it seems
like it's doing a lot more than it is.

160
00:10:35.256 --> 00:10:40.073
And it can be a little bit tricky when
we're using objects, and arrays, and

161
00:10:40.073 --> 00:10:43.248
functions, right, or non-primitive values.

162
00:10:43.248 --> 00:10:47.236
Primitive values will work as you expect.

163
00:10:49.920 --> 00:10:53.244
&gt;&gt; Do you wanna demo Object.freeze
cuz that might be useful?

164
00:10:53.244 --> 00:10:58.815
&gt;&gt; Sure, I don't actually know what goes,
what are the arguments?

165
00:10:58.815 --> 00:11:01.057
&gt;&gt; I just put in an object like your x.

166
00:11:01.057 --> 00:11:01.921
&gt;&gt; j?

167
00:11:01.921 --> 00:11:02.474
&gt;&gt; Yeah.

168
00:11:02.474 --> 00:11:04.011
&gt;&gt; That's it?
Yeah, exactly.

169
00:11:04.011 --> 00:11:07.445
&gt;&gt; All right, so-
&gt;&gt; Then I'll now just try to read, define.

170
00:11:09.484 --> 00:11:13.808
&gt;&gt; What?

171
00:11:13.808 --> 00:11:19.237
Okay, so it doesn't give you an error but
it doesn't let you change it.

172
00:11:19.237 --> 00:11:20.975
&gt;&gt; Yeah, it doesn't throw a actual.

173
00:11:20.975 --> 00:11:24.996
&gt;&gt; Yeah,
the console is actually throwing an error.

174
00:11:24.996 --> 00:11:28.393
&gt;&gt; It doesn't throw a syntax error.

175
00:11:28.393 --> 00:11:30.441
&gt;&gt; Yeah, cool.

176
00:11:30.441 --> 00:11:35.803
So that's const,
any other questions about this?

177
00:11:38.387 --> 00:11:40.611
&gt;&gt; So when to use let?

178
00:11:40.611 --> 00:11:43.037
&gt;&gt; Okay, yeah, perfect.

179
00:11:43.037 --> 00:11:50.320
So let allows you to reassign,
and so it's similar var, right?

180
00:11:50.320 --> 00:11:55.091
So var you can reassign, great, but
let has implications for its scope.

181
00:11:55.091 --> 00:11:58.115
So when we talk about
scope later on today,

182
00:11:58.115 --> 00:12:03.003
you'll see that before let we didn't
have a concept of block scope.

183
00:12:03.003 --> 00:12:04.438
Is anyone coming from a language?

184
00:12:04.438 --> 00:12:06.092
Someone said they were doing Ruby, right?

185
00:12:08.335 --> 00:12:13.610
Yeah, so you probably have run into
block scope and you used block scope.

186
00:12:13.610 --> 00:12:17.862
It means a block is just curly
brackets that is in an object,

187
00:12:17.862 --> 00:12:20.253
that's the way I think about it.

188
00:12:20.253 --> 00:12:22.624
So you can have curly
brackets that's an object or

189
00:12:22.624 --> 00:12:26.470
you can have a curly brackets that's a
block and they can be by function, right?

190
00:12:26.470 --> 00:12:31.352
And you can create a function block,
it can be an if block, try catch block,

191
00:12:31.352 --> 00:12:32.507
stuff like that.

192
00:12:32.507 --> 00:12:37.727
So prior to let there was

193
00:12:37.727 --> 00:12:43.208
no scope to block scope,

194
00:12:43.208 --> 00:12:47.645
which means that and

195
00:12:47.645 --> 00:12:52.343
we'll go into more,

196
00:12:52.343 --> 00:12:57.124
that if a-
&gt;&gt; Like an if statement, there would be no

197
00:12:57.124 --> 00:12:59.815
scope the if statement [INAUDIBLE]-
&gt;&gt; Yeah,

198
00:12:59.815 --> 00:13:05.577
part of that it would just be the function
scope, but I haven't explained scope yet.

199
00:13:05.577 --> 00:13:06.077
So-
&gt;&gt; Gotcha.

200
00:13:06.077 --> 00:13:07.472
&gt;&gt; I'm trying to think of-

201
00:13:07.472 --> 00:13:09.520
&gt;&gt; Maybe move on and revisit that.

202
00:13:09.520 --> 00:13:10.825
&gt;&gt; Yeah, we can move on.

203
00:13:10.825 --> 00:13:11.393
Well,

204
00:13:11.393 --> 00:13:16.131
[CROSSTALK] just note that it
has implications with scope and

205
00:13:16.131 --> 00:13:19.235
behaves differently.
Yeah, cool,

206
00:13:19.235 --> 00:13:22.627
good question.
&gt;&gt; So it's basically a difference between

207
00:13:22.627 --> 00:13:25.885
global and local variable?
Just-

208
00:13:25.885 --> 00:13:29.680
&gt;&gt; It's a similar idea it's not the same.

209
00:13:29.680 --> 00:13:31.032
But it's yeah,

210
00:13:31.032 --> 00:13:36.925
it's about different where a variable
reference has access to a value,

211
00:13:36.925 --> 00:13:41.307
right?
So sometimes curly brackets will

212
00:13:41.307 --> 00:13:44.804
define that.
Sometimes they don't, and let and

213
00:13:44.804 --> 00:13:48.378
var has something to do with that,
has everything to do with that.

214
00:13:48.378 --> 00:13:50.939
So, cool.

215
00:13:50.939 --> 00:13:53.198
Great, destructuring.

216
00:13:55.125 --> 00:14:03.248
And for our objects,
What's the pattern here?

217
00:14:11.456 --> 00:14:12.512
I can't do that.

218
00:14:12.512 --> 00:14:17.194
So anyone, how about,

219
00:14:17.194 --> 00:14:21.882
let's start with you.

220
00:14:23.730 --> 00:14:27.331
&gt;&gt; Does the [INAUDIBLE]
have the same name?

221
00:14:30.556 --> 00:14:32.825
&gt;&gt; Yeah, so the property name and

222
00:14:32.825 --> 00:14:37.643
the target declarations have
the same name, what did I do wrong?

223
00:14:41.410 --> 00:14:42.983
Those syntax error?

224
00:14:44.702 --> 00:14:47.054
Syntax error, first of the!

225
00:14:53.611 --> 00:14:57.179
Okay, So

226
00:14:57.179 --> 00:15:01.968
let's check out what first1 is undefined,

227
00:15:01.968 --> 00:15:07.647
that's not, has to match,
giving it all away.

228
00:15:11.874 --> 00:15:12.928
What?

229
00:15:15.774 --> 00:15:19.268
Hm, first one has already been declared.

230
00:15:19.268 --> 00:15:20.381
Well, fine.

231
00:15:23.912 --> 00:15:26.590
Okay, we good.

232
00:15:26.590 --> 00:15:33.983
So first1, 0, second1, is 1.

233
00:15:33.983 --> 00:15:38.169
So who can tell me how this works?

234
00:15:38.169 --> 00:15:44.467
How about-
&gt;&gt; It's working because

235
00:15:44.467 --> 00:15:49.023
of the order similar to last time and
then the matching names of the objects.

236
00:15:49.023 --> 00:15:52.278
&gt;&gt; Yeah, so
the names have to match in this case.

237
00:15:52.278 --> 00:15:55.630
So objects don't have an order, but

238
00:15:55.630 --> 00:15:59.856
it just happens to be in
order in this example.

239
00:15:59.856 --> 00:16:01.420
But yeah, awesome.

240
00:16:01.420 --> 00:16:06.908
So same thing we're creating a variable,
we're assigning

241
00:16:06.908 --> 00:16:12.288
a variable called first to
the value of the first property,

242
00:16:12.288 --> 00:16:19.732
and we're assigning the value second to
the value of the second property, yeah.

243
00:16:19.732 --> 00:16:24.263
&gt;&gt; So the order it doesn't matter
in it's declaration or assignment?

244
00:16:24.263 --> 00:16:25.210
&gt;&gt; No.

245
00:16:27.317 --> 00:16:32.096
&gt;&gt; Whenever you start thinking
that objects have an order, or

246
00:16:32.096 --> 00:16:36.314
should have an order,
you should be using an array.

247
00:16:36.314 --> 00:16:41.423
And if you're expecting an order from
an object, sometimes it'll always

248
00:16:41.423 --> 00:16:46.206
come that way but that's a bad
expectation cuz it's not guaranteed,

249
00:16:46.206 --> 00:16:49.955
although it sometimes it
seems like it comes in order.

250
00:16:53.124 --> 00:16:58.272
Cool, so that's destructuring,
it just makes

251
00:16:58.272 --> 00:17:04.560
getting values out of objects and
arrays have less typing.

252
00:17:04.560 --> 00:17:09.116
And we like less typing as
long as it's still readable.

253
00:17:11.237 --> 00:17:14.899
As long as we can understand
what you're doing, awesome.

254
00:17:14.899 --> 00:17:18.562
Once you start to get out of that range,

255
00:17:18.562 --> 00:17:23.113
then that's when we start
to have problems, and

256
00:17:23.113 --> 00:17:28.228
that's where some people
are very dogmatic about it.

257
00:17:29.245 --> 00:17:32.462
Cool, questions about this?

258
00:17:32.462 --> 00:17:35.978
&gt;&gt; I don't really follow here where
are we creating an object and

259
00:17:35.978 --> 00:17:38.015
where are we creating properties?

260
00:17:38.015 --> 00:17:40.988
&gt;&gt; Yeah, so
that's the confusing thing, right?

261
00:17:40.988 --> 00:17:43.911
It's cuz syntax looks really similar.

262
00:17:43.911 --> 00:17:47.814
So the way that I think about it is,
whenever you create a variable or

263
00:17:47.814 --> 00:17:51.664
you assign a variable,
it's always gonna be on the left, right?

264
00:17:51.664 --> 00:17:55.301
You say var x equals y,
you don't say y equals x var or

265
00:17:55.301 --> 00:17:57.629
something backwards like that.

266
00:17:57.629 --> 00:17:59.426
So just remember that.

267
00:17:59.426 --> 00:18:04.361
And, Yeah, and

268
00:18:04.361 --> 00:18:12.055
then the right hand side is gonna be
the value just like in that example.

269
00:18:12.055 --> 00:18:16.715
And it also helps that for the variable
declarations it says const, let,

270
00:18:16.715 --> 00:18:21.470
var, whichever one you're using in
that case, and that gives you a hint.

