[00:00:00]
>> Bianca Gandolfo: Pointer is that you get a little clue here. So these represent every rule, we'll test it out. We'll try to predict what ACTUAL is gonna be in each one. So here, this one's done. I'll walk through this one, and then you guys can walk through the next one, okay?

[00:00:22]
So, once this function is executed, we're creating a fn variable, we're saving a function. We're skipping over the body of the function. However, we're invoking it here, so that means we jump into the body of the function. We are creating a variable called name, and we're assigning it to the string inner.

[00:00:41]
We're assigning ACTUAL, which is a variable in our very parent scope, to name. So once this is done executing we jump immediately to this next line. ACTUAL equals inner because ACTUAL is available to both this scope and this outer scope because it's a parent of both. So ACTUALl is equal to inner.

[00:01:10]
And if we really wanna get fancy with this, expect is being evaluated. It's being called, and it's gonna go into innards of our testing library. And it's gonna return something that'll be evaluated against this. Whatever this value is.
>> Bianca Gandolfo: Could you be also you could expect this to be false, or to be a function something like that, okay.

[00:01:37]
Any question about this exercise? Okay, so this rule is called a function has access to its own local variables. So when we say own local, that means it's in the same function block.
>> Bianca Gandolfo: Cool?
>> Bianca Gandolfo: All right.
>> Bianca Gandolfo: The next one is inputs to a function are treated as local scope variables.

[00:02:10]
Who wants to go first?
>> Bianca Gandolfo: Not all at once guys, I know this is exciting stuff.
>> Bianca Gandolfo: Anyone? You can just raise your hand.
>> Bianca Gandolfo: Okay, Michael.
>> Michael: True.
>> Bianca Gandolfo: No, no, you have to run the code.
>> Michael: [LAUGH] I have to what?
>> Bianca Gandolfo: Just like I did.

[00:02:28]

>> Michael: I have to talk about it?
>> Bianca Gandolfo: Mm-hm.
>> Michael: Okay.
>> Bianca Gandolfo: So the very first thing that's gonna happen.
>> Michael: Well, we create the function fn and pass it the argument name, or the variable name.
>> Bianca Gandolfo: Well, we, yeah we're gonna create a variable. And we're gonna assign it to a function, right?

[00:02:47]

>> Michael: Yeah.
>> Bianca Gandolfo: Okay, cool. What's the next thing that happens Jamie?
>> Jamie: And then we're gonna call the function and pass it inner.
>> Bianca Gandolfo: Mm-hm, and then Abi, what happens next?
>> Abi: We immediately run to expect.
>> Bianca Gandolfo: Well, we call the function. What happens then? You go into the body of the function, right?

[00:03:09]

>> Abi: Sorry, yeah, so sorry. So we go inside the body of the function and we design inner to ACTUAL.
>> Bianca Gandolfo: Where does inner come from?
>> Abi: The argument, parameters.
>> Bianca Gandolfo: Mm-hm, yeah.
>> Abi: Yeah, the argument got pass in which didn't get to reassigned to ACTUAL.
>> Bianca Gandolfo: Yep, and then Chris what happens next?

[00:03:31]

>> Chris: And then it falls down to expect ACTUAL equals inner to be true.
>> Bianca Gandolfo: Cool.
>> Bianca Gandolfo: Any questions about this? This is what we would expect, right?
>> [INAUDIBLE]
>> Bianca Gandolfo: [LAUGH] yeah, the question marks mean fill in the blank. Cool. Okay, Eddie do you wanna try the next one?

[00:04:02]
So this rule is block scope. Block scope can be created with let.
>> Eddie: So line 31, function is created with the name fn.
>> Bianca Gandolfo: Mm-hm, and then Cameron?
>> Cameron: The variable where is created and assigned the string-
>> Bianca Gandolfo: Well, actually we don't enter into-.
>> Cameron: Right, call the function.

[00:04:31]

>> Bianca Gandolfo: Yeah, we go down to the next line then we call the function, and then, Ben?
>> Ben: Inside the function, we declare a variable where, when we set it to the value outer.
>> Bianca Gandolfo: Okay, and then Dan.
>> Dan: We create a new scope which is another variable named where called where.

[00:05:00]

>> Bianca Gandolfo: So we create a variable with the key word let, with inner, and we talked about this a little bit before, but let creates blockscope. Ana a block is anything with two brackets. I've been talking about function blocks and that's really what most of JavaScript scopes is about is function scoping.

[00:05:18]
But with the keyword let in ES6, we also have block scope as well, and people coming from other languages should be pretty familiar with block scope. Or other languages with block scope is pretty common, okay.
>> Dan: So, ACTUALl is assigned the value where. Which in this case would be outer.

[00:05:46]

>> Bianca Gandolfo: Okay, and then what happens next?
>> Chris: It goes down to the line 39.
>> Bianca Gandolfo: Mm-hm.
>> Chris: And the questions marks become, I think it's outer because the other one would be out of it, inner would be out of the scope.
>> Bianca Gandolfo: Yep, exactly.
>> Bianca Gandolfo: Cool, and if this was var how would that change?

[00:06:10]

>> Michael: No longer be a block.
>> Bianca Gandolfo: What"s that?
>> Michael: Would no longer be block.
>> Bianca Gandolfo: Yeah.
>> Michael: So you would just rewrite the same variable.
>> Bianca Gandolfo: So it would be, actually be inner.
>> Bianca Gandolfo: Cool, questions there?
>> Michael: Is it just let in the ES6 that creates it's own block.

[00:06:28]
Or there other verbs that do that as well?
>> Bianca Gandolfo: I think it's just let.
>> Michael: Okay.
>> Bianca Gandolfo: Yeah.
>> Dan: And because it's within a block, It's not. Inner is not getting reset? Or inner is just specific to- It's just specific to here, yeah.
>> Bianca Gandolfo: Exactly, so outside of this.

[00:06:50]
It looks in it's own scope. If there is a value that matches that variable, and we have it, here. If for example, where? Well, lets look at ACTUAL. So ACTUAL will first look in this scope, in this function scope and say, is there an ACTUAL around here? No, there isn’t, right.

[00:07:08]
There's no defined actual. And then we look up in the next scope. It's not there either and then we will look up in the next scope where it lives. It will find that and it will realize that it's undefined.
>> Michael: So does connect another ware get created in memory then inside of that scope and then when you exit the scope, does it disappear?

[00:07:29]

>> Bianca Gandolfo: Yep, and also some funny things happen with scoping as well. When Chrome optimizes your code, so if you're going through the debugger and you're trying to access variables that would be accessible in that scope. Does that makes sense? So it should be accessible, but in the Chrome debugger tools they aren't because there's an optimization step where if you not actually referencing that value, it just gets garbage collected, its not actually, it doesn't exist there.

[00:08:04]
So that's just one thing to keep in mind. We'll look at that a little more in depth later. Okay, where we leave off? Okay, so line 42, is a function has access to the variables contained within the same scope that function was created in. All right, so where did we leave off?

[00:08:25]
Is it your turn, Josh?
>> Michael: So, on line-
>> Bianca Gandolfo: Line 43.
>> Michael: On line 43, we need declare a variable and set it to outer?
>> Bianca Gandolfo: Yep?
>> Michael: As the function declaration fn.
>> Bianca Gandolfo: Mm-hm, create a function there. Save it in a fn.
>> Chris: Aye, in the function actual is assigned to name?

[00:08:54]

>> Bianca Gandolfo: Well, first we have to call it.
>> Chris: Yeah, you gotta call it. [LAUGH]
>> Bianca Gandolfo: So then we call the function, and I'm really picky about that. Just so you know. And then, we'll go back to Michael.
>> Eddie: So we just did the-
>> Bianca Gandolfo: We just called the function.

[00:09:11]

>> Eddie: Okay, so we go into the function itself. We create a variable called-
>> Bianca Gandolfo: Where are we creating?
>> Eddie: No, yeah.
>> Bianca Gandolfo: We're just assigning it.
>> Eddie: Yeah, sorry, we're assigning fn to a function.
>> Bianca Gandolfo: We call the function. We go into the function body.
>> Eddie: Mm-hm, and then we're setting ACTUAL to name.

[00:09:32]

>> Bianca Gandolfo: Yeah, and what is name?
>> Eddie: It doesn't see it in its normal scope, so it looks up to outer.
>> Bianca Gandolfo: Nice.
>> Bianca Gandolfo: Okay, great.
>> Bianca Gandolfo: Do you wanna go next Jamie?
>> Jamie: Sure, we're defining first fn as a function.
>> Bianca Gandolfo: Yep.
>> Michael: Then we jump down to first function,

[00:10:05]

>> Bianca Gandolfo: Mm-hm.
>> Michael: Which then jumps back into the function we created up top.
>> Bianca Gandolfo: Mm-hm, and then Chris.
>> Chris: And then we create a variable local to first function set to inner.
>> Bianca Gandolfo: Okay, Eddie.
>> Eddie: So then [SOUND] we're at line 56 and we expect,
>> Bianca Gandolfo: Mm-hm.
>> Eddie: Okay.

[00:10:32]

>> Bianca Gandolfo: Mm-hm.
>> Eddie: And so we go inside of expect and the function is setting the local first function to ACTUAL.
>> Bianca Gandolfo: But it's not being called.
>> Eddie: It's not?
>> Bianca Gandolfo: Do you see it being called?
>> Eddie: Well, so I guess I thought expect was being called, cuz there's the open parentheses after it, is that incorrect?

[00:11:04]

>> Bianca Gandolfo: That's correct, expect is being called.
>> Eddie: But the function inside of expect is not being called, is what you're saying.
>> Bianca Gandolfo: I'm just saying, we should be mindful or whether or not it's been called.
>> Eddie: [LAUGH] Okay.
>> Bianca Gandolfo: We don't visibly see it being called, right?
>> Eddie: Right.

[00:11:21]

>> Bianca Gandolfo: But we can assume that it's being called in the expect, if this test works, right?
>> Eddie: I think I get it.
>> Michael: So it just hasn't been called yet.
>> Bianca Gandolfo: Well, my point is is that this is a function, this is just an anonymous function.
>> Michael: Mm-hm.

[00:11:36]

>> Bianca Gandolfo: That we're looking at. And Eddie was just acting like it was for sure being called, but technically we don't know that. Because we don't really know an expect is gonna do.
>> Eddie: Okay.
>> Bianca Gandolfo: But it seems like the way it's set up, that is probably being called.

[00:11:51]
I'm just being picky.
>> Michael: [LAUGH] Because we don't know anything necessarily about the internals to expect?
>> Bianca Gandolfo: Right, so there was just an assumption there and I wanted to point out that there's an assumption that expect inside of that function is calling this anonymous function. But we can't visibly see that right now.

[00:12:08]
That's all, that's all. It's like the definition versus invocation thing, okay.
>> Eddie: So then I could safely say that function inside of expect is being defined?
>> Bianca Gandolfo: Yes.
>> Chris: Okay.
>> Bianca Gandolfo: And then I'll give it to you that yes, it is actually being called in to expect, but yes.

[00:12:28]
Okay, Cameron. So we're saying here, we're expecting this to throw an error.
>> Bianca Gandolfo: Why?
>> Bianca Gandolfo: Could turn it into a question if you have one.
>> Cameron: I'm not sure where that it is to throw next to was that cover?
>> Bianca Gandolfo: Nope, to.throw has not been covered yet.
>> Cameron: Okay.

[00:13:07]

>> Bianca Gandolfo: But my question really is, sowe're saying this function's being executed, and this expects damon is saying, we're expecting it to throw an error. And, why is that? It's not important for us to go into the internals of how it's running for this particular case, but we should know why it's throwing an error.

[00:13:33]

>> Cameron: It's a local variable and that anonymous function makes it
>> Bianca Gandolfo: Yeah, and it doesn't have access to this one. So it's referencing a variable on different scope.
>> Bianca Gandolfo: And that's really in a different scope, it's way over here.
>> Cameron: So would that just throw ACTUALl as undefined?

[00:14:00]

>> Bianca Gandolfo: No, no, it's not ACTUAL, it's this one, local to first. Is undefined.
>> Cameron: Yeah.
>> Bianca Gandolfo: And then, Aisha, do you wanna go next?
>> Aisha: Sure,
>> Aisha: The next expects is,
>> Bianca Gandolfo: If you want me to scroll or anything let me know.
>> Aisha: Yeah, I want you to scroll [LAUGH], probably back-

[00:14:31]

>> Bianca Gandolfo: Which way?
>> Aisha: Up.
>> Bianca Gandolfo: Up? Tell me, like when
>> Aisha: Probably, right here. Cuz I think this is, it's global. Okay, go back to the global variable. So it's null.
>> Bianca Gandolfo: Did you guys catch that? So it's null because before each statement where you reset the value to null.

[00:15:00]
And in this case we didn't set it to anything cuz we threw an error, because we were trying to access a variable in a scope that we don't have access to.

