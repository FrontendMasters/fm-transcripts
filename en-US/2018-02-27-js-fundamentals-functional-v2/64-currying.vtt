WEBVTT

1
00:00:00.184 --> 00:00:02.110
&gt;&gt; Bianca Gandolfo: We're gonna
talk about Reverend Green.

2
00:00:02.110 --> 00:00:04.999
Anything of note about Reverend Green?
&gt;&gt; Speaker 2: He likes

3
00:00:04.999 --> 00:00:07.527
green.
&gt;&gt; Bianca Gandolfo: He

4
00:00:07.527 --> 00:00:08.180
does like green.

5
00:00:08.180 --> 00:00:11.650
&gt;&gt; Speaker 3: Religious?
&gt;&gt; Bianca Gandolfo: He's delicious?

6
00:00:11.650 --> 00:00:14.458
&gt;&gt; Speaker 3: Religious [LAUGH].

7
00:00:14.458 --> 00:00:15.434
&gt;&gt; Bianca Gandolfo: I was like okay.

8
00:00:15.434 --> 00:00:16.526
&gt;&gt; Speaker 4: [LAUGH].

9
00:00:16.526 --> 00:00:17.606
&gt;&gt; Bianca Gandolfo: [LAUGH] Yeah,

10
00:00:17.606 --> 00:00:19.620
he's religious.

11
00:00:19.620 --> 00:00:24.295
He's a suspect, same as Miss Scarlet,

12
00:00:24.295 --> 00:00:27.324
and also Professor Plum.

13
00:00:27.324 --> 00:00:30.020
So we're gonna be thinking
about Professor Plum, and

14
00:00:30.020 --> 00:00:32.840
we're gonna be working on
functional utility methods.

15
00:00:34.790 --> 00:00:39.223
In particular,
we're gonna be talking about currying and

16
00:00:39.223 --> 00:00:43.480
composition, which are two
fundamental concepts and or

17
00:00:43.480 --> 00:00:49.630
functional techniques.
&gt;&gt; Bianca Gandolfo: Let's check it out.

18
00:00:49.630 --> 00:00:55.045
So currying is when you
create a function that can

19
00:00:55.045 --> 00:01:02.540
later be called multiple times
with different arguments.

20
00:01:02.540 --> 00:01:06.937
And so, if you've notice that we have a,

21
00:01:06.937 --> 00:01:11.920
b, c.
&gt;&gt; Bianca Gandolfo: Right?

22
00:01:11.920 --> 00:01:18.770
So this function expects three arguments
in order for it to return a value.

23
00:01:20.100 --> 00:01:25.919
So what curry does is that it allows you
to call a function up to three times with

24
00:01:25.919 --> 00:01:31.522
these different values.
&gt;&gt; Bianca Gandolfo: Does that

25
00:01:31.522 --> 00:01:36.450
make sense?

26
00:01:37.740 --> 00:01:41.840
So for this a,b,c function.

27
00:01:41.840 --> 00:01:44.008
This curry returns a function.

28
00:01:44.008 --> 00:01:49.973
This function saves in
scope somewhere this value,

29
00:01:49.973 --> 00:01:55.257
and then this value, and
then this value, and

30
00:01:55.257 --> 00:02:01.644
once it hits it's third value,
it returns the result.

31
00:02:01.644 --> 00:02:06.200
So that's what currying is, it just allows
you to break up a larger function into,

32
00:02:06.200 --> 00:02:09.360
&gt;&gt; Bianca Gandolfo: Or it allows you to

33
00:02:09.360 --> 00:02:14.419
break up arguments passed by

34
00:02:14.419 --> 00:02:19.070
the number of arguments.

35
00:02:19.070 --> 00:02:24.734
So that's currying, we're gonna
implement our own version of currying,

36
00:02:24.734 --> 00:02:28.550
but before we do that I
wanna talk about composing.

