WEBVTT

1
00:00:00.640 --> 00:00:03.210
&gt;&gt; Bianca Gandolfo: So
what's with the bracket stuff, right?

2
00:00:03.210 --> 00:00:06.257
Are you guys familiar
with seeing brackets?

3
00:00:10.966 --> 00:00:12.130
&gt;&gt; Bianca Gandolfo: Yeah?

4
00:00:12.130 --> 00:00:16.066
This is more probably what you're thinking
of when you think of an array, right?

5
00:00:16.066 --> 00:00:20.511
You see person [0] with brackets and
some value, right?

6
00:00:20.511 --> 00:00:22.210
In this case, it's a string.

7
00:00:22.210 --> 00:00:26.080
But it could be an object, it could be
a function, it could really be anything.

8
00:00:26.080 --> 00:00:29.960
If you're storing an array of functions,
you're probably doing something wrong.

9
00:00:29.960 --> 00:00:30.819
But it is possible.

10
00:00:39.978 --> 00:00:43.633
&gt;&gt; Bianca Gandolfo: So really what's
happening here is our 0 is just being

11
00:00:43.633 --> 00:00:44.670
stringified.

12
00:00:46.930 --> 00:00:48.456
And there it is, it's just a property.

13
00:00:51.069 --> 00:00:56.053
&gt;&gt; Bianca Gandolfo: But then,
why can't we say, person.0?

14
00:00:59.398 --> 00:01:04.065
&gt;&gt; Bianca Gandolfo: Cuz it's a syntax
error, because it's not a string.

15
00:01:04.065 --> 00:01:07.928
So that's why we have to use the brackets.

16
00:01:07.928 --> 00:01:11.876
So we use the brackets when we
can't use the dot basically.

17
00:01:11.876 --> 00:01:13.333
And when can not use the dot?

18
00:01:13.333 --> 00:01:18.383
Pretty much when the value is not

19
00:01:18.383 --> 00:01:24.946
supposed to be a string literal, right?

20
00:01:24.946 --> 00:01:30.525
So, for example, name, the property

21
00:01:30.525 --> 00:01:35.628
name is name, [LAUGH] sorry, guys.

22
00:01:35.628 --> 00:01:41.720
And so you say .name it,
saves as name, yeah?

23
00:01:41.720 --> 00:01:46.600
When you need to coercive into a string or
it's just invalid, right,

24
00:01:46.600 --> 00:01:50.570
there's some invalid characters,
you can think of it what can I create?

25
00:01:50.570 --> 00:01:52.410
What is a valid variable name?

26
00:01:52.410 --> 00:01:53.410
That's the way to think about it.

27
00:01:53.410 --> 00:01:59.010
If it's a valid variable name, it probably
could be used with a dot notation.

28
00:01:59.010 --> 00:02:03.907
If it's not,
then it gets caught up in your parser.

29
00:02:03.907 --> 00:02:08.135
So that's why we use the brackets,
simply because it's a number.

30
00:02:10.590 --> 00:02:11.413
&gt;&gt; Bianca Gandolfo: And that's it.

31
00:02:14.587 --> 00:02:15.498
&gt;&gt; Bianca Gandolfo: Yeah?

32
00:02:18.058 --> 00:02:18.875
&gt;&gt; Bianca Gandolfo: Are we all here?

33
00:02:21.530 --> 00:02:27.820
&gt;&gt; Bianca Gandolfo: All right,
so what about this?

34
00:02:27.820 --> 00:02:34.294
So we have our person,
we have the name, we have a plea.

35
00:02:34.294 --> 00:02:37.304
I would never, Mrs. White says.

36
00:02:39.286 --> 00:02:41.090
&gt;&gt; Bianca Gandolfo: What's gonna
happen to our data structure?

37
00:02:43.700 --> 00:02:45.738
What arrow needs to go where?

38
00:02:45.738 --> 00:02:48.156
How about grey zipper on the very end?

39
00:02:53.114 --> 00:02:54.456
&gt;&gt; Speaker 2: name to I would never.

40
00:02:54.456 --> 00:03:01.380
&gt;&gt; Bianca Gandolfo: You think
name would go to I would never?

41
00:03:01.380 --> 00:03:02.216
&gt;&gt; Speaker 2: No.
&gt;&gt; Bianca Gandolfo: I'm giving you

42
00:03:02.216 --> 00:03:03.730
a second chance.

43
00:03:03.730 --> 00:03:05.936
&gt;&gt; Speaker 2: Person to I would never.

44
00:03:05.936 --> 00:03:10.285
&gt;&gt; Bianca Gandolfo: [LAUGH] Close
&gt;&gt; Bianca Gandolfo: What's

45
00:03:10.285 --> 00:03:11.177
the problem here?

46
00:03:13.728 --> 00:03:16.542
&gt;&gt; Speaker 3: We don't currently have
something called plea attached to that.

47
00:03:16.542 --> 00:03:18.783
&gt;&gt; Bianca Gandolfo: Yeah, so
when we use the brackets,

48
00:03:18.783 --> 00:03:20.890
we don't assume it's a string.

49
00:03:22.200 --> 00:03:25.820
So it could be a variable name,
it could be an expression.

50
00:03:25.820 --> 00:03:28.600
You could call a function in
a bracket if you wanted to.

51
00:03:28.600 --> 00:03:32.080
Again, probably not a good idea,
but it's valid.

52
00:03:32.080 --> 00:03:38.450
It won't give you an error, so
yeah, we need to change that.

53
00:03:41.020 --> 00:03:44.780
So we're updating plea
through the string wouldShe.

54
00:03:44.780 --> 00:03:50.092
And so notice that the property

55
00:03:50.092 --> 00:03:56.240
name here is wouldShe and not plea.

56
00:03:56.240 --> 00:04:02.036
If we wanted it to be plea,
how might we go about doing that?

57
00:04:02.036 --> 00:04:05.412
How about here in
the middle with the black?

58
00:04:05.412 --> 00:04:06.520
&gt;&gt; Speaker 4: Can you ask that again?

59
00:04:06.520 --> 00:04:07.880
Sorry, I was going through it.

60
00:04:07.880 --> 00:04:08.710
&gt;&gt; Bianca Gandolfo: Sure, no problem.

61
00:04:08.710 --> 00:04:13.640
So I just said,
notice that wouldShe is the property name.

62
00:04:15.680 --> 00:04:20.480
But some might expect it to be plea,
however it's not.

63
00:04:20.480 --> 00:04:24.380
If we did want it to be plea,
what might we need to change?

64
00:04:26.620 --> 00:04:29.701
&gt;&gt; Speaker 4: Look, it would need to be on
the other side of the equals sign somehow.

65
00:04:31.650 --> 00:04:37.362
Person, it's gonna have to assign
that [INAUDIBLE] cuz right now,

66
00:04:37.362 --> 00:04:41.156
it's-
&gt;&gt; Bianca Gandolfo: How do we do it before

67
00:04:41.156 --> 00:04:42.671
for this one?

68
00:04:42.671 --> 00:04:46.532
&gt;&gt; Speaker 4: Well,
we could do the person.plea.

69
00:04:46.532 --> 00:04:50.767
&gt;&gt; Bianca Gandolfo: Mm-hm, yeah, so you
can use the dot notation, absolutely, and

70
00:04:50.767 --> 00:04:51.610
assign it.

71
00:04:51.610 --> 00:04:55.354
So the dot notation coerces
it into a string, right?

72
00:04:58.626 --> 00:05:01.190
&gt;&gt; Bianca Gandolfo: How can we
do it with bracket notation?

73
00:05:01.190 --> 00:05:03.510
&gt;&gt; Speaker 3: Put quotes around it?

74
00:05:03.510 --> 00:05:04.530
&gt;&gt; Bianca Gandolfo: Put quotes around.

75
00:05:04.530 --> 00:05:08.330
That's how you manually make a string,
right, instead of coercing it.

76
00:05:08.330 --> 00:05:08.830
Awesome.

77
00:05:12.880 --> 00:05:17.910
&gt;&gt; Bianca Gandolfo: There we go, so now-
&gt;&gt; Speaker 5: I have a question.

78
00:05:17.910 --> 00:05:19.318
&gt;&gt; Bianca Gandolfo: Yeah.

79
00:05:19.318 --> 00:05:21.135
&gt;&gt; Speaker 5: So
could you go back to the other slide?

80
00:05:21.135 --> 00:05:23.090
I guess it's kind of [INAUDIBLE].

81
00:05:23.090 --> 00:05:29.120
So in this example, first you set
the variable plea to wouldShe.

82
00:05:29.120 --> 00:05:31.630
And then later on,
you used the bracket thing.

83
00:05:31.630 --> 00:05:38.000
If you would skip that first step of
setting the var plea to wouldShe,

84
00:05:38.000 --> 00:05:43.630
then what would've happened on that
last line with person bracket plea?

85
00:05:43.630 --> 00:05:46.415
&gt;&gt; Bianca Gandolfo: Yeah, so the first
thing that would happen is it's gonna

86
00:05:46.415 --> 00:05:48.110
evaluate what's in the bracket.

87
00:05:50.070 --> 00:05:54.620
Well, actually, we'll do that first,
but it'll evaluate to the bracket.

88
00:05:54.620 --> 00:06:01.850
It'll say plea is a variable, so there's
no quotes around it or anything like that.

89
00:06:01.850 --> 00:06:03.330
It's not a number.

90
00:06:03.330 --> 00:06:05.030
It appears to be a variable.

91
00:06:05.030 --> 00:06:09.613
So it'll first look in the scope for
a variable and look into any scopes that

92
00:06:09.613 --> 00:06:14.880
it's connected to, which we'll talk about
later, and find that there's no plea.

93
00:06:16.160 --> 00:06:21.040
And so let's run it and
see what it says to us.

94
00:06:22.906 --> 00:06:24.260
&gt;&gt; Speaker 5: Would that
kick up an error then,

95
00:06:24.260 --> 00:06:25.480
if you're trying to assign like that?

96
00:06:27.710 --> 00:06:30.200
&gt;&gt; Bianca Gandolfo: Yeah,
plea is not defined, it says.

97
00:06:31.560 --> 00:06:33.195
I think it's good to learn the errors.

98
00:06:34.914 --> 00:06:35.530
&gt;&gt; Bianca Gandolfo: Cool.
&gt;&gt; Speaker 6: So

99
00:06:35.530 --> 00:06:38.725
show them how to fix it
with quotes in the bracket.

100
00:06:38.725 --> 00:06:41.461
&gt;&gt; Bianca Gandolfo: Mm-hm,
so if you see that,

101
00:06:41.461 --> 00:06:47.164
we'll just put our quotes around,
and then we're happy.

102
00:06:54.111 --> 00:06:56.080
&gt;&gt; Bianca Gandolfo: Here's our little
special thing about the array.

103
00:06:56.080 --> 00:06:59.423
We have our little length, which is zero,
which is interesting, right?

104
00:06:59.423 --> 00:07:01.224
Because we have some stuff in this array.

105
00:07:05.433 --> 00:07:07.329
&gt;&gt; Bianca Gandolfo: Interesting, okay.

106
00:07:10.281 --> 00:07:15.265
&gt;&gt; Bianca Gandolfo: Great, so
if we create something with the brackets,

107
00:07:15.265 --> 00:07:18.268
can we then look it up with a dot?

108
00:07:21.528 --> 00:07:23.362
&gt;&gt; Bianca Gandolfo: Seems reasonable.

109
00:07:23.362 --> 00:07:29.643
Can you image if you had to
remember how something was defined?

110
00:07:29.643 --> 00:07:32.395
You can imagine,
many files and, etc., etc.,

111
00:07:32.395 --> 00:07:34.966
you don't need to remember
how it's defined.

112
00:07:34.966 --> 00:07:36.450
It can go either way.

113
00:07:36.450 --> 00:07:38.980
You just need to remember the basic rules.

114
00:07:38.980 --> 00:07:43.400
So I'm gonna point to some people, and
we're gonna uncover the rules that we have

115
00:07:43.400 --> 00:07:47.510
discovered so
far about objects and arrays.

116
00:07:47.510 --> 00:07:48.040
Are you ready?

117
00:07:49.490 --> 00:07:53.050
Okay, so let's start in the way, way back.

118
00:07:54.840 --> 00:08:02.005
What's a rule that we learned through
this exercise about objects in arrays?

119
00:08:02.005 --> 00:08:03.718
&gt;&gt; Speaker 6: Array is a type of object.

120
00:08:03.718 --> 00:08:08.460
It has some methods
already attatched to it.

121
00:08:08.460 --> 00:08:11.680
&gt;&gt; Bianca Gandolfo: Awesome,
that's probably the coolest one I think.

122
00:08:11.680 --> 00:08:13.576
Yeah, and then over here.

123
00:08:13.576 --> 00:08:17.519
It's gonna go like this,
just so prepare yourself.

124
00:08:21.050 --> 00:08:24.447
&gt;&gt; Speaker 6: Property string can be
passed with dot notation or brackets and

125
00:08:24.447 --> 00:08:24.967
quotes.

126
00:08:24.967 --> 00:08:26.735
&gt;&gt; Bianca Gandolfo: Mm-hm,
yeah, absolutely.

127
00:08:37.247 --> 00:08:38.820
&gt;&gt; Bianca Gandolfo: [LAUGH].

128
00:08:38.820 --> 00:08:39.695
&gt;&gt; Speaker 6: Can we come back?

129
00:08:39.695 --> 00:08:43.536
[LAUGH]
&gt;&gt; Bianca Gandolfo: Sure, sure, sure.

130
00:08:43.536 --> 00:08:44.761
&gt;&gt; Speaker 2: I may repeat a little bit.

131
00:08:44.761 --> 00:08:52.420
But using the dot notation coerces to
a string where bracket doesn't necesarily.

132
00:08:52.420 --> 00:08:56.122
&gt;&gt; Bianca Gandolfo: And
why can't we use dot number?

133
00:08:56.122 --> 00:08:58.082
Like, dot zero, why does that not work?

134
00:09:00.985 --> 00:09:04.825
&gt;&gt; Bianca Gandolfo: Cuz if we're coercing
into a string with a dot, right,

135
00:09:04.825 --> 00:09:09.730
if we said, person.0, right,
why can't we do that?

136
00:09:09.730 --> 00:09:13.016
The answer's in the next line.

137
00:09:13.016 --> 00:09:15.808
&gt;&gt; Speaker 2: There's no variable named 0.

138
00:09:15.808 --> 00:09:16.964
&gt;&gt; Bianca Gandolfo: Well,
for the dot notation,

139
00:09:16.964 --> 00:09:18.312
it's gonna coerce it to a string.

140
00:09:20.340 --> 00:09:22.075
&gt;&gt; Speaker 3: Is it
because 0 is not a string.

141
00:09:22.075 --> 00:09:24.800
It's seen as a number?

142
00:09:24.800 --> 00:09:27.320
&gt;&gt; Bianca Gandolfo: Well, you can
coerce a number into a string, right?

143
00:09:31.732 --> 00:09:35.437
&gt;&gt; Bianca Gandolfo: The reason is
that it's just invalid syntax.

144
00:09:35.437 --> 00:09:40.660
It starts to evaluate it as a number and
it gets confused.

145
00:09:40.660 --> 00:09:43.805
And so it's gonna give you a syntax error.

146
00:09:43.805 --> 00:09:52.264
So we can only use dot notation with
characters that are not unusual.

147
00:09:52.264 --> 00:09:56.485
And when I mean unusual, I mean, can you
create a variable name starting with that

148
00:09:56.485 --> 00:09:59.248
character, that contains that character,
right?

149
00:09:59.248 --> 00:10:01.572
So you can use an underscore,
but not a dash.

150
00:10:01.572 --> 00:10:05.053
These are things that you just kinda
have to learn by trial and error.

151
00:10:05.053 --> 00:10:07.960
But just understand that if
you're using a dot notation,

152
00:10:07.960 --> 00:10:12.490
you're using a character that's a little
bit unusual, you might get a syntax error.

153
00:10:12.490 --> 00:10:15.550
And if you do, the solution is to?

154
00:10:17.830 --> 00:10:20.651
Sorry, I was typing notes.

155
00:10:20.651 --> 00:10:22.840
What was-
&gt;&gt; Speaker 3: Change it to a string.

156
00:10:22.840 --> 00:10:25.920
&gt;&gt; Bianca Gandolfo: Yeah, put it in a
bracket notation and put quotes around it.

157
00:10:27.120 --> 00:10:32.180
Yeah, awesome, so
I know that I'm drilling this in.

158
00:10:32.180 --> 00:10:35.630
But this is the most common
thing that people get stuck on

159
00:10:35.630 --> 00:10:37.520
that can take a long time.

160
00:10:37.520 --> 00:10:41.630
But if you learn the rules,
it's pretty straightforward.

161
00:10:41.630 --> 00:10:46.620
There are I don't know,
a handful of rules,

162
00:10:46.620 --> 00:10:50.152
maybe five rules to know.

163
00:10:50.152 --> 00:10:51.509
But you guys seem to be picking it up.

