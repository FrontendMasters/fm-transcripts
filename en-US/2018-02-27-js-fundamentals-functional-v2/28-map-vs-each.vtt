WEBVTT

1
00:00:00.620 --> 00:00:03.230
So now we understand how to implement it.

2
00:00:03.230 --> 00:00:07.690
I couldn't find a free version
of a broken pipe, of all things.

3
00:00:07.690 --> 00:00:09.830
So there's my stock photo.

4
00:00:09.830 --> 00:00:13.690
So yeah, here's our broken weapons.

5
00:00:13.690 --> 00:00:17.176
And we have a list of broken stuff.

6
00:00:17.176 --> 00:00:19.266
Cool, till we transform our list.

7
00:00:22.243 --> 00:00:25.017
Awesome, so,

8
00:00:27.581 --> 00:00:32.998
Here's our example from before, where
we have our, and I do have a typo here.

9
00:00:41.742 --> 00:00:46.131
Okay, where were we?

10
00:00:46.131 --> 00:00:51.257
Okay, so
we're mapping through our suspects, right?

11
00:00:51.257 --> 00:00:54.813
And remember before this was a
suspectsList and we just had an array and

12
00:00:54.813 --> 00:00:57.640
then we were looping and pushing in.

13
00:00:57.640 --> 00:00:58.710
So now we don't have to do that.

14
00:00:58.710 --> 00:01:01.120
We'll just map through our suspects.

15
00:01:01.120 --> 00:01:05.400
And for each name,
we'll create an object and

16
00:01:05.400 --> 00:01:10.909
it will return it and
it will create a suspectsList, yeah?

17
00:01:13.826 --> 00:01:18.314
Anyone wanna see this in action,
yeah or no?

18
00:01:18.314 --> 00:01:19.179
Yeah, okay.

19
00:01:26.500 --> 00:01:36.191
All right, Cool?

20
00:01:40.315 --> 00:01:45.040
So this is a more realistic
application of map, right?

21
00:01:45.040 --> 00:01:51.270
Rather than concatenating strings,
we're creating objects and returning them.

22
00:01:53.030 --> 00:01:56.160
And then we can each through them,
and call each one.

23
00:01:57.230 --> 00:02:03.747
So here's another version of that,
just with the each from before to compare.

