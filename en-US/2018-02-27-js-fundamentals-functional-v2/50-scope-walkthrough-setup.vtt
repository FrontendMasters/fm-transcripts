WEBVTT

1
00:00:00.320 --> 00:00:05.080
We're gonna move on to scopes now,
we're gonna do an interactive exercise.

2
00:00:05.080 --> 00:00:08.000
We're gonna do that game that
we really liked to play.

3
00:00:08.000 --> 00:00:10.380
Everyone was like, I really like it.

4
00:00:10.380 --> 00:00:14.572
Bianca when we play that game
where everyone goes in a line and

5
00:00:14.572 --> 00:00:20.173
says what happens next, especially when
it's tricky and I say the wrong thing.

6
00:00:20.173 --> 00:00:22.822
Just give you one of those moments.

7
00:00:22.822 --> 00:00:27.982
So, we're gonna go through this,
is it a testing suite, and

8
00:00:27.982 --> 00:00:33.063
all these tests are testing
various combinations of scope.

9
00:00:33.063 --> 00:00:37.762
And so, scope is just the area where

10
00:00:37.762 --> 00:00:42.625
a variable has access to some value.

11
00:00:42.625 --> 00:00:47.133
So, when we're defining
variables we know that there

12
00:00:47.133 --> 00:00:51.742
are such things global variables and
local variables.

13
00:00:51.742 --> 00:00:57.216
And the like write a global
variable is available throughout

14
00:00:57.216 --> 00:01:01.935
the entire code base, and
usually we declare that by

15
00:01:01.935 --> 00:01:06.781
just not putting a bar in
front of something, right?

16
00:01:06.781 --> 00:01:11.157
Usually not a good idea or we can attach
it directly to the window object.

17
00:01:11.157 --> 00:01:13.818
So, that's a global variable and

18
00:01:13.818 --> 00:01:19.895
then we have local variables that are
inside of functions or inside of blocks.

19
00:01:19.895 --> 00:01:24.579
And there are some trick
rules around when certain

20
00:01:24.579 --> 00:01:29.273
variables have access to
certain values and not.

21
00:01:29.273 --> 00:01:32.741
And so, we're gonna go through some
scenarios, we're gonna run this code and

22
00:01:32.741 --> 00:01:33.583
see what happens.

23
00:01:33.583 --> 00:01:38.625
And then there's the testing suite here,
we wanna get the test to pass.

24
00:01:38.625 --> 00:01:41.795
So, I'm going to describe
what these tests are doing so

25
00:01:41.795 --> 00:01:44.837
that we get a little bit
familiar with this code base.

26
00:01:44.837 --> 00:01:49.213
But really what you are should
be worried about is

27
00:01:49.213 --> 00:01:54.454
the function body of the callback
of the it's statement.

28
00:01:54.454 --> 00:02:00.505
So, when it says it bla bla bla
its the body of the function,

29
00:02:00.505 --> 00:02:03.422
but let's start at the top.

30
00:02:03.422 --> 00:02:08.305
So, this is just a regular testing suite,

31
00:02:08.305 --> 00:02:11.433
I think it's Mocha maybe.

32
00:02:11.433 --> 00:02:16.907
And we're wrapping it in this function,
it goes all the way down here and

33
00:02:16.907 --> 00:02:23.215
then we're immediately invoking it,
that's what those parentheses are doing.

34
00:02:23.215 --> 00:02:26.419
So, it's just wrapping
an anonymous function and

35
00:02:26.419 --> 00:02:30.825
then invoking it immediately, and
then we have this describe block.

36
00:02:30.825 --> 00:02:34.455
What do you think if I
did type of describe?

37
00:02:34.455 --> 00:02:37.237
What do you think that would be?

38
00:02:39.337 --> 00:02:40.152
Cameron

39
00:02:45.768 --> 00:02:49.755
&gt;&gt; Undefined.

40
00:02:49.755 --> 00:02:50.929
&gt;&gt; Undefined?

41
00:02:50.929 --> 00:02:52.190
It's a good guess.

42
00:02:54.188 --> 00:02:55.710
&gt;&gt; Object.

43
00:02:55.710 --> 00:02:56.481
&gt;&gt; Object?

44
00:02:56.481 --> 00:02:57.798
Who thinks it's gonna be an object?

45
00:03:01.173 --> 00:03:04.111
Who thinks that it's
gonna be something else?

46
00:03:04.111 --> 00:03:06.065
What do you think it's gonna be Eddie?

47
00:03:06.065 --> 00:03:07.913
&gt;&gt; A function?

48
00:03:07.913 --> 00:03:09.166
&gt;&gt; Why?

49
00:03:09.166 --> 00:03:14.005
&gt;&gt; Because it has the parentheses
of like scope exercises

50
00:03:14.005 --> 00:03:17.179
etcetera right next to it like
&gt;&gt; Yeah,

51
00:03:17.179 --> 00:03:21.208
it looks like it's a function
being called, right?

52
00:03:21.208 --> 00:03:23.308
Yeah, and that's what it is.

53
00:03:23.308 --> 00:03:28.401
So, describe is a function
it takes two arguments,

54
00:03:28.401 --> 00:03:32.915
one is a string that describes this block,
and

55
00:03:32.915 --> 00:03:38.491
then a callback function that
has a few different tests.

56
00:03:38.491 --> 00:03:45.401
And so if we look at our UI over here we
see that it creates this scope exercises,

57
00:03:45.401 --> 00:03:50.445
title and then it has all of
our tests inside here, okay?

58
00:03:50.445 --> 00:03:56.029
So, we have an actual variable
that we're just initializing here,

59
00:03:56.029 --> 00:03:59.978
then we have a beforeEach
function is beforeEach

60
00:03:59.978 --> 00:04:03.753
function just is called
beforeEach it block.

61
00:04:03.753 --> 00:04:05.931
So, will you see this ending?

62
00:04:05.931 --> 00:04:10.927
This will be called automatically.

63
00:04:10.927 --> 00:04:16.828
Have you guys done touch test driven
development or written tests like this?

64
00:04:16.828 --> 00:04:22.227
Cool [LAUGH] awesome okay.

65
00:04:22.227 --> 00:04:27.431
So, then we have an it block,
and what do you think this is?

66
00:04:27.431 --> 00:04:28.760
If we said type of it?

67
00:04:33.368 --> 00:04:34.377
&gt;&gt; Function.

68
00:04:34.377 --> 00:04:36.441
&gt;&gt; Also function?

69
00:04:36.441 --> 00:04:41.450
So, the first thing it takes is
a string that's a description

70
00:04:41.450 --> 00:04:46.457
of what it is testing,
the second thing is a callback function

71
00:04:46.457 --> 00:04:51.685
that it's expecting it to return
whether it's passing or not.

72
00:04:51.685 --> 00:05:00.267
So, this saying says, expect actual
to equal the string inner to.be.true.

73
00:05:00.267 --> 00:05:03.510
What do you think this evaluates to?

74
00:05:05.889 --> 00:05:06.850
What does that return?

75
00:05:10.549 --> 00:05:12.348
&gt;&gt; A Boolean.

76
00:05:12.348 --> 00:05:17.428
&gt;&gt; That's a good guess, it has to
return some sort of object, right?

77
00:05:17.428 --> 00:05:18.736
Because we have these dots.

78
00:05:18.736 --> 00:05:21.861
&gt;&gt; To.be.true so, Boolean [INAUDIBLE].

79
00:05:21.861 --> 00:05:25.247
&gt;&gt; Some sort of object that
has something like this.

80
00:05:32.299 --> 00:05:34.392
You see that?

81
00:05:34.392 --> 00:05:36.455
&gt;&gt; Like an array of objects?

82
00:05:36.455 --> 00:05:40.918
&gt;&gt; Well, that's the only way you can
these dots to work in JavaScript, right?

83
00:05:40.918 --> 00:05:46.517
To.be.true we should put
something like that.

84
00:05:48.882 --> 00:05:53.522
Anyway, I'm just showing you that there
are some interesting applications to all

85
00:05:53.522 --> 00:05:57.045
of the rules that I was saying before,
but they don't change.

86
00:05:57.045 --> 00:06:00.873
They look a little crazy, but people
are just building on the roles that we

87
00:06:00.873 --> 00:06:03.362
went over and
doing creative things with them.

88
00:06:05.825 --> 00:06:09.762
&gt;&gt; [CROSSTALK]
&gt;&gt; They're asking where does to.be.true

89
00:06:09.762 --> 00:06:10.717
come from?

90
00:06:10.717 --> 00:06:11.799
That from?

91
00:06:11.799 --> 00:06:12.872
&gt;&gt; I believe it's Mocha.

92
00:06:12.872 --> 00:06:14.826
&gt;&gt; Okay
&gt;&gt; Yeah.

93
00:06:17.059 --> 00:06:21.071
I think the describe beforeEach and

94
00:06:21.071 --> 00:06:26.296
it is mocha, and
then the expect, maybe try.

95
00:06:26.296 --> 00:06:30.325
I don't know I'd have to
look I haven't looked at

96
00:06:30.325 --> 00:06:31.326
&gt;&gt; To the libraries, but

97
00:06:31.326 --> 00:06:33.598
the library is basically
all you have to say there.

98
00:06:33.598 --> 00:06:37.270
&gt;&gt; Yeah, it's for the library
we're using a library here, and

99
00:06:37.270 --> 00:06:40.811
I'll share this after you guys
can have it and play with it.

100
00:06:40.811 --> 00:06:44.557
Okay so, I just gave you a little tour.

101
00:06:44.557 --> 00:06:49.189
&gt;&gt; Is there a reason actual is all caps?

102
00:06:49.189 --> 00:06:53.509
&gt;&gt; Just to make it stand out really, yeah,

103
00:06:53.509 --> 00:07:00.755
cuz if you see we're going to be
reassigning actual bunch of times,

104
00:07:00.755 --> 00:07:05.473
just to see what the value will hold,
yeah.

105
00:07:08.375 --> 00:07:14.747
Cool and so, knowing that in
JavaScript we have function scope.

106
00:07:14.747 --> 00:07:15.558
Do we know that?

107
00:07:15.558 --> 00:07:17.934
Have you guys heard about function scope?

108
00:07:17.934 --> 00:07:19.826
Is that something you've heard of?

109
00:07:19.826 --> 00:07:24.569
So, before recently we only
really had function scope, and

110
00:07:24.569 --> 00:07:29.591
that means that variables that
were inside of a function only had

111
00:07:29.591 --> 00:07:34.625
access to the values defined there,
or in the parent function.

112
00:07:34.625 --> 00:07:41.864
So, for example here's a function
here's an inner function, okay?

113
00:07:41.864 --> 00:07:45.110
If we had a variable name for

114
00:07:45.110 --> 00:07:50.202
example we couldn't access it over here.

115
00:07:55.122 --> 00:07:59.972
Because it's outside of
this function's scope.

116
00:07:59.972 --> 00:08:02.904
&gt;&gt; So, in the function or child functions?

117
00:08:02.904 --> 00:08:05.165
&gt;&gt; What do you mean?

118
00:08:05.165 --> 00:08:07.428
&gt;&gt; The use of parent function before?

119
00:08:07.428 --> 00:08:11.222
So, you can access variables
declared in a function or

120
00:08:11.222 --> 00:08:16.183
in functions declared in that function,
but not the other way around.

121
00:08:16.183 --> 00:08:17.951
&gt;&gt; No only in the parent
&gt;&gt; Only in the parents

122
00:08:17.951 --> 00:08:19.630
&gt;&gt; So, you can only look up.

123
00:08:19.630 --> 00:08:20.430
&gt;&gt; You can only look up.

124
00:08:20.430 --> 00:08:23.198
&gt;&gt; So, if you think of scope
as sort of like a hierarchy,

125
00:08:23.198 --> 00:08:27.750
you have a global scope being available to
everyone, and that's your window objects,

126
00:08:27.750 --> 00:08:30.902
things on the window object if
you're working in a browser.

127
00:08:30.902 --> 00:08:35.858
And then you have your first function and
then your nested function and

128
00:08:35.858 --> 00:08:40.898
you can think of it as like your
global scope, our scope, inner scope,

129
00:08:40.898 --> 00:08:44.941
more inner, inner,
inner all the way down as many deep.

130
00:08:44.941 --> 00:08:51.841
Yeah and so,
inside the function you can only reach for

131
00:08:51.841 --> 00:08:58.748
values in the outer scopes
all the way up to chain them.

132
00:08:58.748 --> 00:09:03.074
And then, through that sort of
chaining from inner to outer,

133
00:09:03.074 --> 00:09:04.997
we have masking of values.

134
00:09:04.997 --> 00:09:09.989
So, if I declare a value in here and

135
00:09:09.989 --> 00:09:14.645
I also declare a value out here.

136
00:09:18.022 --> 00:09:21.788
Then this name is going to be inner,

137
00:09:21.788 --> 00:09:26.685
even though the name out
here will be mark and so

138
00:09:26.685 --> 00:09:34.243
once I get out of this function if I
reference name this is gonna be mark.

139
00:09:34.243 --> 00:09:35.680
&gt;&gt; My name's in a video looking famous.

140
00:09:35.680 --> 00:09:37.980
&gt;&gt; Yeah you're famous now.

141
00:09:37.980 --> 00:09:39.623
&gt;&gt; Thank you Bianca,
&gt;&gt; You're welcome.

142
00:09:44.199 --> 00:09:49.476
&gt;&gt; There's a question in chat
about the very first line the,

143
00:09:49.476 --> 00:09:50.617
&gt;&gt; Line one?

144
00:09:50.617 --> 00:09:53.473
&gt;&gt; Immediately invoked
function expression?

145
00:09:55.826 --> 00:09:58.145
&gt;&gt; What about it?

146
00:09:58.145 --> 00:10:01.610
&gt;&gt; Just didn't know I was there, I'm like.

147
00:10:02.767 --> 00:10:08.212
&gt;&gt; I didn't know what if he is and I mean.

148
00:10:08.212 --> 00:10:13.514
&gt;&gt; Yeah, so,
&gt;&gt; Is there something you're getting into?

149
00:10:13.514 --> 00:10:14.517
&gt;&gt; Not really.

150
00:10:14.517 --> 00:10:15.412
&gt;&gt; Okay.

151
00:10:15.412 --> 00:10:19.531
&gt;&gt; All you need to know is what
this does is it lets you call

152
00:10:19.531 --> 00:10:21.741
the function immediately.

153
00:10:21.741 --> 00:10:29.068
So, once this page is loading,
we'll just call this function immediately,

154
00:10:29.068 --> 00:10:33.630
that's all, and
we'll set up all of our tests.

155
00:10:33.630 --> 00:10:35.879
&gt;&gt; Let me show the bottom part of that.

156
00:10:35.879 --> 00:10:38.068
&gt;&gt; Yeah, I showed it earlier,
but I can show again.

157
00:10:38.068 --> 00:10:44.401
So, here we are calling it
there's a clue down there,

158
00:10:44.401 --> 00:10:49.234
I should get away from this, okay great.

159
00:10:49.234 --> 00:10:53.990
So, we're gonna walk through
how the function is running

160
00:10:53.990 --> 00:10:56.035
inside of these it blocks

