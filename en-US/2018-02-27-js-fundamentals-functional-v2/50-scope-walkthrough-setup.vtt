WEBVTT

1
00:00:00.340 --> 00:00:02.020
&gt;&gt; Bianca Gandolfo: We're
gonna move on to scopes now.

2
00:00:02.020 --> 00:00:04.770
We're gonna do an interactive exercise.

3
00:00:04.770 --> 00:00:08.430
We're gonna do that game
that we really like to play.

4
00:00:08.430 --> 00:00:10.670
Everyone was like,
I really like it, Bianca,

5
00:00:10.670 --> 00:00:15.680
when we play that game where everyone goes
in a line and says what happens next.

6
00:00:15.680 --> 00:00:18.510
Especially when it's tricky and
I say the wrong thing.

7
00:00:20.810 --> 00:00:22.990
It's gonna be one of those moments.

8
00:00:22.990 --> 00:00:24.300
So we're gonna go through this.

9
00:00:24.300 --> 00:00:26.880
It's a testing suite and

10
00:00:26.880 --> 00:00:31.940
all of these tests are testing
various combinations of scope.

11
00:00:33.250 --> 00:00:36.280
So scope is just

12
00:00:38.280 --> 00:00:42.710
the area where a variable
has access to some value.

13
00:00:42.710 --> 00:00:48.310
So when we're defining variables,
we know that

14
00:00:48.310 --> 00:00:53.920
there is such thing as global variables,
and local variables and the like, right.

15
00:00:53.920 --> 00:01:00.480
A global variable is available
throughout the entire code base

16
00:01:00.480 --> 00:01:05.480
and usually we declare that by just not
putting a bar in front of something.

17
00:01:06.920 --> 00:01:10.610
Usually not a good idea or we could
attach it directly to the window object.

18
00:01:10.610 --> 00:01:13.840
So that's a global variable and

19
00:01:13.840 --> 00:01:19.980
then we have local variables that are
inside of functions, or inside of blocks.

20
00:01:19.980 --> 00:01:24.080
And there are some tricky rules around

21
00:01:24.080 --> 00:01:28.020
when certain variables have
access to certain values and not.

22
00:01:29.320 --> 00:01:32.490
And so we're gonna through some scenarios,
we're gonna run this code, and

23
00:01:32.490 --> 00:01:33.670
see what happens.

24
00:01:33.670 --> 00:01:38.750
And then there's the testing suite here,
we wanna get the test to pass.

25
00:01:38.750 --> 00:01:41.860
So I'm gonna describe what
these tests are doing, so

26
00:01:41.860 --> 00:01:44.910
that we get a little bit more
familiar with this code base.

27
00:01:44.910 --> 00:01:47.670
But really,
what you should be worried about,

28
00:01:47.670 --> 00:01:53.480
is the function body of
the callback of the it statement.

29
00:01:54.590 --> 00:02:00.630
So one that says it, bla bla bla,
it's the body of the function.

30
00:02:01.870 --> 00:02:03.610
So, let's start at the top.

31
00:02:03.610 --> 00:02:08.950
So, this is just a regular testing suite.

32
00:02:08.950 --> 00:02:15.320
I think it's mocha maybe and
we're wrapping in this function.

33
00:02:18.020 --> 00:02:21.110
It goes all the way down here and
then we're immediately invoking it.

34
00:02:21.110 --> 00:02:25.420
That's what those parentheses are doing,
so it's wrapping an anonymous function and

35
00:02:25.420 --> 00:02:26.990
then invoking it immediately.

36
00:02:26.990 --> 00:02:31.320
And then we have this
describe block which,

37
00:02:31.320 --> 00:02:33.930
what do you think if I
did type of describe?

38
00:02:34.950 --> 00:02:36.240
What do you think that would be?

39
00:02:39.500 --> 00:02:48.810
Cameron?
&gt;&gt; Cameron: Undefined.

40
00:02:48.810 --> 00:02:49.900
&gt;&gt; Bianca Gandolfo: Undefined?

41
00:02:49.900 --> 00:02:53.570
That's a good guess.

42
00:02:53.570 --> 00:02:56.150
&gt;&gt; Cameron: Object.
&gt;&gt; Bianca Gandolfo: Object?

43
00:02:56.150 --> 00:03:01.237
Who thinks it's going to be an object?
&gt;&gt; Bianca Gandolfo: Who

44
00:03:01.237 --> 00:03:02.590
thinks that it's gonna be something else?

45
00:03:02.590 --> 00:03:07.020
What do you think it's gonna be, Eddie?
&gt;&gt; Eddie: A

46
00:03:07.020 --> 00:03:08.290
function?
&gt;&gt; Bianca Gandolfo: Why?

47
00:03:09.310 --> 00:03:14.020
&gt;&gt; Eddie: Because it has the parentheses

48
00:03:14.020 --> 00:03:17.770
of scope exercises etc., right next to it?
&gt;&gt; Bianca Gandolfo: Yeah,

49
00:03:17.770 --> 00:03:20.200
it looks like it's a function
being called, right?

50
00:03:21.610 --> 00:03:24.781
Yeah, and that's what it is.
&gt;&gt; Bianca Gandolfo: So

51
00:03:24.781 --> 00:03:28.650
describe is a function, and
it takes two arguments.

52
00:03:28.650 --> 00:03:34.120
One is a string that describes this block,

53
00:03:34.120 --> 00:03:38.610
and then a callback function
that has a few different tests.

54
00:03:38.610 --> 00:03:42.040
And so if we look at our UI over here,
we see that it creates this

55
00:03:43.140 --> 00:03:47.830
scope exercises title and
then it has all of our tests inside here.

56
00:03:48.860 --> 00:03:51.700
Okay, so we have an actual

57
00:03:53.340 --> 00:03:58.290
variable that we're just initializing here
and then we have a before each function.

58
00:03:58.290 --> 00:04:03.910
It's before each Function just
is called before each it block.

59
00:04:03.910 --> 00:04:09.430
So when you see this ending this
will be called automatically.

60
00:04:11.280 --> 00:04:16.960
Have you guys done test driven
development or a written test like this?

61
00:04:16.960 --> 00:04:20.890
Cool, awesome.

62
00:04:20.890 --> 00:04:26.489
Okay, so then we have it block,
and what do you think this is,

63
00:04:26.489 --> 00:04:34.510
if we said typeof it?
&gt;&gt; Speaker 4: Function.

64
00:04:34.510 --> 00:04:35.470
&gt;&gt; Bianca Gandolfo: Yeah, also a function.

65
00:04:37.000 --> 00:04:40.280
So the first thing it takes is
a string that's a description of what

66
00:04:40.280 --> 00:04:40.980
it is testing.

67
00:04:42.120 --> 00:04:44.880
And the second thing is
a callback function that

68
00:04:46.940 --> 00:04:51.810
is expecting it to return,
whether it's passing or not.

69
00:04:51.810 --> 00:05:00.370
So this says expect actual to
equal the string inner to be true.

70
00:05:00.370 --> 00:05:03.440
What do you think this evaluates to, what

71
00:05:06.020 --> 00:05:11.040
does that return?
&gt;&gt; Speaker 5: A boolean.

72
00:05:12.450 --> 00:05:13.130
&gt;&gt; Bianca Gandolfo: That's a good guess,

73
00:05:15.200 --> 00:05:17.660
it has to return some
sort of object right?

74
00:05:17.660 --> 00:05:21.500
Cuz we have these dots.
&gt;&gt; Speaker 4: To be true so yeah boolean.

75
00:05:21.500 --> 00:05:23.106
Double down on it.
&gt;&gt; Bianca Gandolfo: Some sort of object

76
00:05:23.106 --> 00:05:32.884
that has something like this.
&gt;&gt; Bianca Gandolfo: You

77
00:05:32.884 --> 00:05:36.620
see that?
&gt;&gt; Speaker 6: Like an array of objects?

78
00:05:36.620 --> 00:05:37.240
&gt;&gt; Bianca Gandolfo: Well that's the only

79
00:05:37.240 --> 00:05:39.400
way you could get these dots
to work in JavaScript, right?

80
00:05:41.030 --> 00:05:44.874
To be true, we should put something

81
00:05:44.874 --> 00:05:49.403
like that.
&gt;&gt; Bianca Gandolfo: Anyway,

82
00:05:49.403 --> 00:05:53.649
I'm just showing you that there are some
interesting applications to all of

83
00:05:53.649 --> 00:05:57.050
the rules that I was saying before,
but they don't change.

84
00:05:57.050 --> 00:06:00.842
They look a little crazy, but people are
just building on the rules that we went

85
00:06:00.842 --> 00:06:05.876
over, and doing creative things with them.
&gt;&gt; Bianca Gandolfo: And

86
00:06:05.876 --> 00:06:09.369
they're just doing-
&gt;&gt; Mark: They're asking where does to.be

87
00:06:09.369 --> 00:06:10.760
come from.

88
00:06:10.760 --> 00:06:13.712
That's-
&gt;&gt; Bianca Gandolfo: I think it uses mocha,

89
00:06:13.712 --> 00:06:18.767
yeah.
&gt;&gt; Bianca Gandolfo: I

90
00:06:18.767 --> 00:06:22.476
think the describe
before each is mocha and

91
00:06:22.476 --> 00:06:28.050
then the expect might be try,
I don't know, I'd have to look.

92
00:06:28.050 --> 00:06:32.680
I haven't looked at the-
&gt;&gt; Mark: But the library is basically all

93
00:06:32.680 --> 00:06:33.970
that you'd have to say there.
&gt;&gt; Bianca Gandolfo: Yeah it's

94
00:06:33.970 --> 00:06:34.530
from the library.

95
00:06:35.610 --> 00:06:39.090
We're using a library here and
I'll share this after, and

96
00:06:39.090 --> 00:06:40.990
you guys can have it and play with it.

97
00:06:40.990 --> 00:06:46.060
Okay, so I just gave you
a little tour of what's going on.

98
00:06:46.060 --> 00:06:47.005
Any questions so far,

99
00:06:47.005 --> 00:06:55.265
before we get started?
&gt;&gt; Bianca Gandolfo: Okay,

100
00:06:55.265 --> 00:07:02.029
I want one question before we move on.
&gt;&gt; Bianca Gandolfo: Just make up one,

101
00:07:02.029 --> 00:07:06.170
I like the silly one, the funny one.
&gt;&gt; Speaker 4: Is well, is there a reason

102
00:07:07.290 --> 00:07:11.640
actual is all caps?
&gt;&gt; Bianca Gandolfo: Just

103
00:07:11.640 --> 00:07:13.540
to make it stand out, really.

104
00:07:15.100 --> 00:07:20.580
Because if you see, we're going to be
re-assigning actual a bunch of times,

105
00:07:20.580 --> 00:07:24.330
just to see what the value will hold.

106
00:07:25.340 --> 00:07:30.560
Yeah, cool and

107
00:07:30.560 --> 00:07:35.767
so knowing that, in java

108
00:07:35.767 --> 00:07:41.880
script we have function scope.

109
00:07:41.880 --> 00:07:42.610
Do we know that?

110
00:07:42.610 --> 00:07:44.130
Have you guys heard about function scope?

111
00:07:44.130 --> 00:07:46.970
Is that something you've heard of?

112
00:07:46.970 --> 00:07:50.370
So before recently,
we only really had function scope.

113
00:07:50.370 --> 00:07:55.620
And that means that variables that
were inside of a function only had

114
00:07:55.620 --> 00:08:01.730
access to the values defined there,
or in the parent function.

115
00:08:01.730 --> 00:08:08.980
So for example, here is a function,
here is an inner function, okay?

116
00:08:08.980 --> 00:08:13.468
If we had a variable name, for example,

117
00:08:13.468 --> 00:08:22.693
we couldn't access it over here,
&gt;&gt; Bianca Gandolfo: Because

118
00:08:22.693 --> 00:08:27.380
it's outside of this function's scope.
&gt;&gt; Speaker 6: So

119
00:08:27.380 --> 00:08:32.890
in the function or child functions?
&gt;&gt; Bianca Gandolfo: What do you mean?

120
00:08:32.890 --> 00:08:33.590
&gt;&gt; Speaker 6: You said parent

121
00:08:33.590 --> 00:08:34.500
function before.

122
00:08:34.500 --> 00:08:41.100
So you can access variables declared in a
function or in functions declared in that

123
00:08:41.100 --> 00:08:43.480
function, but not the other way around?
&gt;&gt; Bianca Gandolfo: No,

124
00:08:43.480 --> 00:08:45.130
only in the parent.
&gt;&gt; Speaker 6: Only in the parent.

125
00:08:45.130 --> 00:08:45.990
&gt;&gt; Bianca Gandolfo: So you can only look

126
00:08:45.990 --> 00:08:47.430
up.
&gt;&gt; Speaker 6: You can only look up.

127
00:08:47.430 --> 00:08:48.060
&gt;&gt; Bianca Gandolfo: So if you think of

128
00:08:48.060 --> 00:08:51.020
scope as sort of like a hierarchy,

129
00:08:51.020 --> 00:08:54.250
you have a global scope
being available to everyone.

130
00:08:54.250 --> 00:08:55.500
And that's your window object,

131
00:08:55.500 --> 00:08:58.150
things on the window object if
you're working in a browser.

132
00:08:58.150 --> 00:09:02.600
And then you have your first function,
and then your nested function.

133
00:09:02.600 --> 00:09:06.430
And you can think of it as like
your global scope, outer scope.

134
00:09:06.430 --> 00:09:12.869
Inner scope, more inner, inner, inner
all the way down, as many deep, yeah.

135
00:09:12.869 --> 00:09:17.720
And so inside of the function
you can only reach for

136
00:09:17.720 --> 00:09:21.100
values in the outer scopes.

137
00:09:23.970 --> 00:09:25.910
All the way up the chain though.

138
00:09:25.910 --> 00:09:30.020
And then, through that sort of
chaining from inner to outer,

139
00:09:30.020 --> 00:09:32.100
we have masking of values.

140
00:09:32.100 --> 00:09:36.042
So if I declare a value in here and

141
00:09:36.042 --> 00:09:39.984
I also declare a value out here,

142
00:09:39.984 --> 00:09:44.364
then this name is going to be inner.

143
00:09:44.364 --> 00:09:49.750
Even though the name out
here will be Mark and

144
00:09:49.750 --> 00:09:55.427
so once I get out of this
function if I reference

145
00:09:55.427 --> 00:10:02.750
name this is going to be mark.
&gt;&gt; Mark: My name is in a video.

146
00:10:02.750 --> 00:10:03.915
&gt;&gt; Bianca Gandolfo: Yeah you're famous

147
00:10:03.915 --> 00:10:05.376
now.
&gt;&gt; Mark: Thank you Bianca.

148
00:10:05.376 --> 00:10:06.360
&gt;&gt; Bianca Gandolfo: You're welcome.

149
00:10:11.330 --> 00:10:12.660
&gt;&gt; Mark: There's a question in chat about

150
00:10:12.660 --> 00:10:17.720
the very first line.
&gt;&gt; Bianca Gandolfo: Line one?

151
00:10:17.720 --> 00:10:19.388
&gt;&gt; Mark: Immediately invoked function

152
00:10:19.388 --> 00:10:23.380
expression.
&gt;&gt; Bianca Gandolfo: What about

153
00:10:23.380 --> 00:10:26.280
it?
&gt;&gt; Mark: Just,

154
00:10:26.280 --> 00:10:27.440
didn't know why it was there.

155
00:10:28.880 --> 00:10:31.260
I didn't know what and

156
00:10:31.260 --> 00:10:35.640
if he is, you know what I mean?
&gt;&gt; Bianca Gandolfo: Yeah.

157
00:10:37.740 --> 00:10:39.010
&gt;&gt; Mark: Is that something you're getting

158
00:10:39.010 --> 00:10:42.018
into?
&gt;&gt; Bianca Gandolfo: Not really.

159
00:10:42.018 --> 00:10:43.188
&gt;&gt; Mark: Okay.

160
00:10:43.188 --> 00:10:43.990
&gt;&gt; Bianca Gandolfo: All

161
00:10:43.990 --> 00:10:48.910
you need to know is what this does is it
lets you call the function immediately.

162
00:10:48.910 --> 00:10:52.871
So once this page is loaded,
it will just call this function

163
00:10:52.871 --> 00:10:55.691
immediately.
&gt;&gt; Bianca Gandolfo: That's

164
00:10:55.691 --> 00:10:57.722
all.
&gt;&gt; Bianca Gandolfo: And

165
00:10:57.722 --> 00:11:01.849
we'll set up all of our tests.
&gt;&gt; Mark: Can we show the bottom part

166
00:11:01.849 --> 00:11:03.340
of that?
&gt;&gt; Bianca Gandolfo: Yeah,

167
00:11:03.340 --> 00:11:05.260
I showed it earlier, but
I can show it again.

168
00:11:05.260 --> 00:11:07.490
So here we are I'm calling it.

169
00:11:07.490 --> 00:11:13.730
Uh-oh, there's a clue down there,
I should get away from there.

170
00:11:13.730 --> 00:11:17.851
Okay, great, so
we're gonna walk through how

171
00:11:17.851 --> 00:11:22.292
the function is running
inside of these if blocks.

