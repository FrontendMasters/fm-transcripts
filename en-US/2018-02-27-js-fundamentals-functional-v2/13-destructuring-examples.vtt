WEBVTT

1
00:00:00.340 --> 00:00:02.300
&gt;&gt; Bianca Gandolfo: So you're just
extracting out the values you want and

2
00:00:02.300 --> 00:00:06.710
you can imagine, also, that if you're
getting some JSON from your backend,

3
00:00:06.710 --> 00:00:10.990
a huge, nested data structure that
this can get a little tricky.

4
00:00:10.990 --> 00:00:12.520
And so that's what we're gonna do next.

5
00:00:12.520 --> 00:00:17.650
We're gonna learn how to extract data and
work with nested data structures.

6
00:00:17.650 --> 00:00:21.520
Before that,
I wanted to show you a few examples

7
00:00:21.520 --> 00:00:25.700
about de-structuring I'm not going to
go super deep into de-structuring.

8
00:00:25.700 --> 00:00:29.670
I just wanted to give you a little taste
so you have something to start with.

9
00:00:29.670 --> 00:00:33.824
But the challenge with
de-structuring is that there's so

10
00:00:33.824 --> 00:00:36.989
many different ways of
going about doing it.

11
00:00:36.989 --> 00:00:41.170
And so many combinations of syntax.

12
00:00:41.170 --> 00:00:48.208
That it would just take forever for us to
go through all of the permutations of it,

13
00:00:48.208 --> 00:00:53.187
but I'll show you a little bit,
just to give you an idea.

14
00:00:53.187 --> 00:00:55.230
Yeah, does that sound good?

15
00:00:55.230 --> 00:00:58.007
Cool, and it'll help us later too,

16
00:00:58.007 --> 00:01:03.124
because you'll be de-structuring
some nested things, and etc.

17
00:01:03.124 --> 00:01:08.140
All right, so the de-structuring an array,
right, we did that.

18
00:01:09.380 --> 00:01:12.910
If you wanna omit a value just skip it.

19
00:01:12.910 --> 00:01:15.150
You can also omit beginning values.

20
00:01:17.340 --> 00:01:20.140
We have the spread operator,
which we haven't talked about yet.

21
00:01:20.140 --> 00:01:24.590
Right, and
that will gather all of the remaining

22
00:01:26.010 --> 00:01:28.630
values, so you'll log something like this.

23
00:01:28.630 --> 00:01:32.510
So, A will be the first one,
just like you would expect here.

24
00:01:32.510 --> 00:01:34.866
By using the spread operator,

25
00:01:34.866 --> 00:01:39.401
we're just gonna take the rest of them and
sort them into B.

26
00:01:39.401 --> 00:01:43.050
So remember when we were saying when else
would you use a dot in java script and

27
00:01:43.050 --> 00:01:44.600
someone said spread operator?

28
00:01:44.600 --> 00:01:50.920
I was like, that's true, but that's not
what I was referring to at the time, cool.

29
00:01:52.980 --> 00:01:56.230
Let's see, so this is a really useful one,
swapping out variables.

30
00:01:56.230 --> 00:02:04.042
Typically, how would you swap out
a variable if you couldn't do this?

31
00:02:04.042 --> 00:02:06.265
How would we do that?

32
00:02:06.265 --> 00:02:12.361
How about Cameron.

33
00:02:12.361 --> 00:02:16.472
I don't mean to pick on you, but
I just remember your name for some reason.

34
00:02:16.472 --> 00:02:20.200
That's a good thing, except for maybe
I call on you more than other people.

35
00:02:24.340 --> 00:02:29.035
So if I wanted b to be 2, and

36
00:02:29.035 --> 00:02:32.310
a sorry excuse me.

37
00:02:32.310 --> 00:02:36.733
If you wanted b to be 1 and

38
00:02:36.733 --> 00:02:42.437
a to be 2, how will you do that?

39
00:02:42.437 --> 00:02:44.260
So you can answer,
you can ask me a question.

40
00:02:55.760 --> 00:03:00.486
Or you can pick someone else
to be the lucky next person

41
00:03:00.486 --> 00:03:03.226
if you're feeling generous.

42
00:03:03.226 --> 00:03:09.040
[LAUGH] Yeah, you want to go?
&gt;&gt; Speaker 2: Yeah, sure.

43
00:03:09.040 --> 00:03:13.766
You'd basically create temporary
variable to hold one value while you

44
00:03:13.766 --> 00:03:16.292
reassign the other.
&gt;&gt; Bianca Gandolfo: Why do we have to do

45
00:03:16.292 --> 00:03:22.964
this?
&gt;&gt; Speaker 2: Why?

46
00:03:22.964 --> 00:03:27.974
Because if you overwrite the current
value stays stored at a,

47
00:03:27.974 --> 00:03:34.497
then you can't use it to set b.
&gt;&gt; Bianca Gandolfo: Whoa,

48
00:03:34.497 --> 00:03:35.170
what is going on?

49
00:03:35.170 --> 00:03:38.993
I have some weird snippets
enabled that it's going crazy.

50
00:03:38.993 --> 00:03:43.852
And then.
&gt;&gt; Bianca Gandolfo: Someone run my code in

51
00:03:43.852 --> 00:03:46.044
your head, does that look accurate?

52
00:03:46.044 --> 00:03:52.220
'Temp' is A, 'Temp' is one,
A is now 2, B is now 1.

53
00:03:52.220 --> 00:03:55.480
Okay, I think it's right.

54
00:03:55.480 --> 00:03:56.820
You see that?

55
00:03:56.820 --> 00:04:00.213
So this is how we would do it before.

56
00:04:00.213 --> 00:04:05.446
Now, we save a few lines
by simply doing this.

57
00:04:10.256 --> 00:04:11.568
&gt;&gt; Bianca Gandolfo: Pretty cool, right?

58
00:04:11.568 --> 00:04:16.859
It's useful.
&gt;&gt; Bianca Gandolfo: All right,

59
00:04:16.859 --> 00:04:22.091
and then we have,
getting deep into nested data structures.

60
00:04:23.809 --> 00:04:26.106
&gt;&gt; Bianca Gandolfo: What is this mess?

61
00:04:26.106 --> 00:04:33.140
Wow.
&gt;&gt; Bianca Gandolfo: What do we think?

62
00:04:33.140 --> 00:04:37.130
What's the pattern here?
&gt;&gt; Bianca Gandolfo: I would call it

63
00:04:37.130 --> 00:04:44.413
confusing.
&gt;&gt; Bianca Gandolfo: [LAUGH] Yeah,

64
00:04:44.413 --> 00:04:49.587
so we are looking at a, right?

65
00:04:49.587 --> 00:04:56.796
It starts from the outer to the inner a.

66
00:04:56.796 --> 00:05:01.877
And then it's gonna go into the next
inner function, which is b.

67
00:05:01.877 --> 00:05:04.624
And then it's gonna go only
to the next inner function,

68
00:05:04.624 --> 00:05:08.830
which is a little confusing,
cuz we have three inner functions, here.

69
00:05:08.830 --> 00:05:12.877
But it's only gonna go to the next one,

70
00:05:12.877 --> 00:05:18.168
which is 6.
&gt;&gt; Bianca Gandolfo: Is that right,

71
00:05:18.168 --> 00:05:19.021
hold on.

72
00:05:19.021 --> 00:05:24.383
So we have 1, 2, and
then there, which actually

73
00:05:24.383 --> 00:05:30.991
will be 5.
&gt;&gt; Bianca Gandolfo: And

74
00:05:30.991 --> 00:05:34.297
that's interesting that the D is 6.

75
00:05:34.297 --> 00:05:37.002
It doesn't seem right to me,
let's run it and find out.

76
00:05:44.901 --> 00:05:45.630
&gt;&gt; Bianca Gandolfo: I need to stop.

77
00:05:47.160 --> 00:05:55.850
Maybe like clear my cache or something.
&gt;&gt; Bianca Gandolfo: Okay, so let's see.

78
00:05:56.950 --> 00:05:59.900
My question was, is d gonna be six?

79
00:05:59.900 --> 00:06:04.888
What do you guys think?
&gt;&gt; Bianca Gandolfo: It kind

80
00:06:04.888 --> 00:06:09.901
of already tells us
&gt;&gt; Bianca Gandolfo: Very interesting.

81
00:06:13.934 --> 00:06:18.281
&gt;&gt; Bianca Gandolfo: Wait, not a, b, okay.

82
00:06:20.381 --> 00:06:26.500
&gt;&gt; Bianca Gandolfo: c, I see, interesting.

83
00:06:26.500 --> 00:06:31.860
Ha.
&gt;&gt; Bianca Gandolfo: And you guys see that?

84
00:06:33.610 --> 00:06:40.615
So c is actually holding the entire array.
&gt;&gt; Bianca Gandolfo: You

85
00:06:40.615 --> 00:06:43.490
want me to move to the other screen so
we can look at it?

86
00:06:43.490 --> 00:06:49.536
Or keep it here.
&gt;&gt; Bianca Gandolfo: Someone

87
00:06:49.536 --> 00:06:50.272
ask a question.

88
00:06:59.872 --> 00:07:03.637
&gt;&gt; Bianca Gandolfo: How about over here at

89
00:07:03.637 --> 00:07:10.400
the end in the gray.
&gt;&gt; Speaker 3: What's

90
00:07:10.400 --> 00:07:13.555
the practicality of using nested arrays

91
00:07:13.555 --> 00:07:18.340
versus objects?
&gt;&gt; Bianca Gandolfo: I would recommend not

92
00:07:18.340 --> 00:07:20.078
doing something like this.
&gt;&gt; Speaker 3: [LAUGH]

93
00:07:20.078 --> 00:07:20.591
&gt;&gt; Bianca Gandolfo: Yeah,

94
00:07:20.591 --> 00:07:26.068
because unless you're doing something
like, if you're making a tree data

95
00:07:26.068 --> 00:07:32.090
structure or something like that you can
use nested arrays and it makes sense.

96
00:07:32.090 --> 00:07:37.100
However, I still use objects to
make my tree data structures

97
00:07:37.100 --> 00:07:42.450
when I need to do that.

98
00:07:42.450 --> 00:07:47.060
The thing with the array is that it's
not giving you much information about

99
00:07:47.060 --> 00:07:48.210
what is doing what, and

100
00:07:48.210 --> 00:07:51.830
shape is kinda hard to understand
when it's super nested like this.

101
00:07:51.830 --> 00:07:57.140
And I would be really surprised to
find real code that looks like this.

102
00:07:58.580 --> 00:07:59.290
And I would hope not.

103
00:07:59.290 --> 00:08:04.720
If it does look like this, then they're
really, they're doing something wrong.

104
00:08:04.720 --> 00:08:07.270
They're not being thoughtful in how
they're building their data structure.

105
00:08:08.600 --> 00:08:09.440
Yeah, good question.

106
00:08:09.440 --> 00:08:13.585
I like that.
&gt;&gt; Bianca Gandolfo: Awesome.

107
00:08:15.306 --> 00:08:15.980
&gt;&gt; Bianca Gandolfo: So let's check out

108
00:08:15.980 --> 00:08:16.590
this pattern.

109
00:08:16.590 --> 00:08:24.384
We have one, two, three
&gt;&gt; Bianca Gandolfo: nested arrays.

110
00:08:24.384 --> 00:08:28.696
And in here we have 1, 2,

111
00:08:28.696 --> 00:08:32.270
3, 4, 5, right?

112
00:08:32.270 --> 00:08:38.681
So what's fascinating to me is
how this translates, right?

113
00:08:38.681 --> 00:08:41.325
Is that not interesting to anyone else?

114
00:08:41.325 --> 00:08:45.817
Cuz it seems like it's
picking up all the values.

115
00:08:45.817 --> 00:08:47.760
All right, let's just check d.

116
00:08:47.760 --> 00:08:52.376
Yeah.
&gt;&gt; Bianca Gandolfo: So we have a, a is 1.

117
00:08:55.784 --> 00:08:59.179
&gt;&gt; Bianca Gandolfo: We have 2, b is 2.

118
00:08:59.179 --> 00:09:01.520
That makes sense to me,
does that make sense to you guys?

119
00:09:01.520 --> 00:09:04.520
Seems straightforward, right?

120
00:09:04.520 --> 00:09:05.120
And then c.

121
00:09:07.900 --> 00:09:09.420
That's where it gets interesting.

122
00:09:13.700 --> 00:09:18.170
C and d
&gt;&gt; Speaker 4: Can I ask what would happen

123
00:09:18.170 --> 00:09:23.110
if you took away the brackets around b,
like that opening bracket for

124
00:09:23.110 --> 00:09:25.190
b and then one of the trailing ones there.

125
00:09:25.190 --> 00:09:29.290
Would that change how the assignments
go because they're looking

126
00:09:29.290 --> 00:09:32.850
at the nested brackets on the assigning?
&gt;&gt; Bianca Gandolfo: Yeah,

127
00:09:32.850 --> 00:09:36.590
let's check it out.
&gt;&gt; Speaker 4: Because we don't have

128
00:09:36.590 --> 00:09:38.730
the same amount of layers or

129
00:09:38.730 --> 00:09:43.679
what just happened?
&gt;&gt; Bianca Gandolfo: It's not iterable,

130
00:09:43.679 --> 00:09:49.721
that's very interesting.
&gt;&gt; Bianca Gandolfo: a,

131
00:09:54.619 --> 00:09:55.677
&gt;&gt; Bianca Gandolfo: Yeah, I'm not sure,

132
00:09:55.677 --> 00:09:59.170
this is a tricky one.
&gt;&gt; Speaker 4: It might be trying to assign

133
00:09:59.170 --> 00:10:03.540
that entire array from 2 to 6,
all to b, maybe,

134
00:10:03.540 --> 00:10:07.090
then?
&gt;&gt; Bianca Gandolfo: Yeah, anyone?

135
00:10:08.830 --> 00:10:11.620
So we have 3 and 4 and

136
00:10:11.620 --> 00:10:16.580
"c:" then "d:" is the last one,

137
00:10:16.580 --> 00:10:23.054
very fascinating.
&gt;&gt; Bianca Gandolfo: What's

138
00:10:23.054 --> 00:10:28.895
the takeaway here?
&gt;&gt; Speaker 5: Don't use nested arrays.

139
00:10:28.895 --> 00:10:29.650
&gt;&gt; Group: [LAUGH]

140
00:10:29.650 --> 00:10:31.080
&gt;&gt; Bianca Gandolfo: Yeah, and

141
00:10:31.080 --> 00:10:34.760
don't try to destructure crazy
nested arrays like this.

142
00:10:34.760 --> 00:10:36.470
I think that's the biggest take away.

143
00:10:37.720 --> 00:10:38.550
Is this readable?

144
00:10:40.440 --> 00:10:41.740
Is this straight forward?

145
00:10:43.190 --> 00:10:45.570
No, probably not a good idea.

146
00:10:47.070 --> 00:10:47.840
Cool, let's move on.

147
00:10:50.180 --> 00:10:53.970
All right, so

148
00:10:53.970 --> 00:10:59.950
when you want to get a value from
a property, we saw this already.

149
00:11:04.460 --> 00:11:06.190
This won't match, create.

150
00:11:08.390 --> 00:11:09.134
And etc., and

151
00:11:09.134 --> 00:11:16.015
it keeps going.
&gt;&gt; Bianca Gandolfo: Here

152
00:11:16.015 --> 00:11:16.850
it just keeps going.

153
00:11:19.320 --> 00:11:20.560
Anyway-
&gt;&gt; Speaker 4: Do

154
00:11:20.560 --> 00:11:25.360
you have these notes somewhere?
&gt;&gt; Bianca Gandolfo: I'll send them out.

155
00:11:25.360 --> 00:11:28.934
So yeah I just wanted to show you that
there's a lot deeper that you can go

156
00:11:28.934 --> 00:11:29.538
with this.

157
00:11:29.538 --> 00:11:32.434
And we're not gonna go deep into that, but

158
00:11:32.434 --> 00:11:37.320
it's something interesting to
explore when you're ready.

159
00:11:37.320 --> 00:11:40.720
Or I'm sure there are some EF6 courses

160
00:11:40.720 --> 00:11:44.400
here on the Frontend Masters platform
to go even deeper with the structuring.

