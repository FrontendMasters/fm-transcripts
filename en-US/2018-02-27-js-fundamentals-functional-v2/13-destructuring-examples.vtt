WEBVTT

1
00:00:00.360 --> 00:00:01.735
Till you're just extracting
out the values that you want.

2
00:00:01.735 --> 00:00:06.559
And you can imagine also that if you're
getting some JSON from your back-end,

3
00:00:06.559 --> 00:00:10.530
a huge nested data structure,
that this can get a little tricky.

4
00:00:10.530 --> 00:00:15.240
And so that's what we're gonna do next,
we're gonna learn how to extract data and

5
00:00:15.240 --> 00:00:17.270
work with nested data structures.

6
00:00:17.270 --> 00:00:22.305
Before that, I wanted to show you
a few examples about destruction.

7
00:00:22.305 --> 00:00:25.810
I'm not gonna go super
deep into destruction.

8
00:00:25.810 --> 00:00:29.170
I just wanted to give you a little
taste you have something to start with.

9
00:00:29.170 --> 00:00:33.993
But the challenge with
destructuring is that, there's so

10
00:00:33.993 --> 00:00:40.461
many different ways of going about doing
it and so many combinations of syntax.

11
00:00:40.461 --> 00:00:46.514
That it would take forever for us to go
through all of the permutations of it,

12
00:00:46.514 --> 00:00:49.076
but I'll show you a little bit.

13
00:00:49.076 --> 00:00:54.122
And just to give you an idea,
yeah, that sounds good,

14
00:00:54.122 --> 00:00:59.060
cool, and it will help us
later too because you'll be

15
00:00:59.060 --> 00:01:03.155
destructuring some nested things and etc.

16
00:01:03.155 --> 00:01:07.553
All right, so
destructuring an array right we did that,

17
00:01:07.553 --> 00:01:13.433
if you want to omit a value, just skip
it you can also omit beginning values.

18
00:01:17.153 --> 00:01:19.754
We have the spread operator which
we haven't talked about yet.

19
00:01:19.754 --> 00:01:24.989
All right, and that will gather
all of the remaining values,

20
00:01:24.989 --> 00:01:28.120
so you'll log something like this.

21
00:01:28.120 --> 00:01:32.677
So A will be the first one just
like you would expect here but

22
00:01:32.677 --> 00:01:34.916
using the spread operator.

23
00:01:34.916 --> 00:01:39.240
We're just gonna take the rest of them and
store them in to be.

24
00:01:39.240 --> 00:01:43.118
So remember we were saying,
when else did you use a.in JavaScript and

25
00:01:43.118 --> 00:01:44.903
someone said spread operator.

26
00:01:44.903 --> 00:01:50.566
I was like that's true but that's not
what I was referring to at the time.

27
00:01:50.566 --> 00:01:56.022
Cool, let's see, so this is a really
useful one swapping out variables.

28
00:01:56.022 --> 00:02:01.976
Typically, how would you swap out
a variable if you I couldn't do this.

29
00:02:04.023 --> 00:02:09.479
How would we do that, how about cameras?

30
00:02:09.479 --> 00:02:12.673
[LAUGH] I don't mean to pick on you but

31
00:02:12.673 --> 00:02:17.688
I just remember your name for
some reason to good thing.

32
00:02:17.688 --> 00:02:19.985
Except for maybe I call on
you more than other people.

33
00:02:24.091 --> 00:02:29.568
So if I wanted b to be 2, And

34
00:02:29.568 --> 00:02:36.631
a sorry, excuse me if you wanted
b to be 1 and a, to be 2,

35
00:02:39.662 --> 00:02:45.715
How might you do that, so you can
answer or you can ask me a question.

36
00:02:45.715 --> 00:02:49.341
You wanna go?
&gt;&gt; Yeah, sure, you would basically create

37
00:02:49.341 --> 00:02:54.544
a temporary variable to hold one
value while you reassign the other?

38
00:02:54.544 --> 00:02:57.124
&gt;&gt; Why do we have to do this?

39
00:03:00.735 --> 00:03:05.013
&gt;&gt; Why, because if you
overwrite In the current value,

40
00:03:05.013 --> 00:03:08.520
say stored at A,
then you can't use it to set b.

41
00:03:12.576 --> 00:03:17.419
&gt;&gt; Wow, what is going on, I have some
weird snippets enabled that are just going

42
00:03:17.419 --> 00:03:22.566
crazy and then Someone run

43
00:03:22.566 --> 00:03:28.173
my code in your head, so
I look accurate temp is a,

44
00:03:28.173 --> 00:03:32.463
temp is 1, a is now 2 B is now 1 okay.

45
00:03:32.463 --> 00:03:35.137
I think it's right, see that?

46
00:03:35.137 --> 00:03:39.073
So, this is how we would do it before,

47
00:03:39.073 --> 00:03:43.878
now, we save a few lines
by simply doing this.

48
00:03:49.028 --> 00:03:55.519
Pretty cool, right,
it's useful, All right,

49
00:03:55.519 --> 00:04:00.719
and then we have,
again deep into nested data structures.

50
00:04:02.650 --> 00:04:12.465
What is this mess, well What do we think,
what's the pattern here?

51
00:04:14.872 --> 00:04:16.508
I would call it confusing.

52
00:04:20.850 --> 00:04:21.706
&gt;&gt; Yeah.

53
00:04:21.706 --> 00:04:23.638
&gt;&gt; [LAUGH] Yeah.

54
00:04:23.638 --> 00:04:27.658
So, we are looking at A, right,

55
00:04:27.658 --> 00:04:33.114
it starts with from
the outer to the inner A and

56
00:04:33.114 --> 00:04:40.600
then it's gonna go into the next
inner function, which is B.

57
00:04:40.600 --> 00:04:44.584
And then it's gonna go only to the next
inner function which is a little confusing

58
00:04:44.584 --> 00:04:47.176
because we have like,
three inner functions here.

59
00:04:47.176 --> 00:04:52.362
But it's only gonna go to the next one

60
00:04:52.362 --> 00:04:58.550
which is 6 is that right so
we have one two and

61
00:04:58.550 --> 00:05:03.917
then here which actually would be 5.

62
00:05:09.457 --> 00:05:12.767
That's interesting that the D is six.

63
00:05:12.767 --> 00:05:15.367
Doesn't seem right to me,
let's run it and find out.

64
00:05:23.727 --> 00:05:27.343
Neither stop,
I need to clear my cache or something.

65
00:05:31.877 --> 00:05:38.662
Okay, so let's see,
my question was, is d gonna be 6?

66
00:05:38.662 --> 00:05:39.162
What do you guys think?

67
00:05:43.243 --> 00:05:49.313
It kinda already tells
us Very interesting.

68
00:05:52.430 --> 00:05:53.183
Wait not A B okay.

69
00:05:59.716 --> 00:06:05.825
C I see interesting

70
00:06:09.688 --> 00:06:12.247
You guys see that?

71
00:06:12.247 --> 00:06:20.197
So C is actually holding the entire
array over here at the in the gray.

72
00:06:20.197 --> 00:06:27.746
&gt;&gt; What's the practicality of using
nested arrays versus objects?

73
00:06:27.746 --> 00:06:29.776
&gt;&gt; I would recommend not
doing something like this.

74
00:06:29.776 --> 00:06:33.168
&gt;&gt; [LAUGH]
&gt;&gt; Yeah, because unless you're doing

75
00:06:33.168 --> 00:06:37.495
something like if you're making
like a tree data structure or

76
00:06:37.495 --> 00:06:42.250
something like that, you can use
nested arrays and it makes sense.

77
00:06:42.250 --> 00:06:46.244
However, I still use objects for

78
00:06:46.244 --> 00:06:52.672
to make my tree data structures
when I need to do that.

79
00:06:52.672 --> 00:06:57.257
The thing with the array is that it's not
giving you much information about what is

80
00:06:57.257 --> 00:06:58.054
doing what and

81
00:06:58.054 --> 00:07:02.190
the shape is kind of hard to understand
when it's super nested like this.

82
00:07:02.190 --> 00:07:08.754
And I would be really surprised to
find real code that looks like this.

83
00:07:08.754 --> 00:07:10.116
And I would hope not,

84
00:07:10.116 --> 00:07:14.901
if it does look like this then they're
really like doing something wrong.

85
00:07:14.901 --> 00:07:19.035
They're not being thoughtful and
how they're building their data structure.

86
00:07:19.035 --> 00:07:22.936
Yeah, good question, I like that.

87
00:07:22.936 --> 00:07:27.442
Awesome, so let's check out

88
00:07:27.442 --> 00:07:31.946
this pattern we have 1, 2,

89
00:07:31.946 --> 00:07:38.614
3 nested arrays and
then in here we have 1,

90
00:07:38.614 --> 00:07:42.774
2, 3, 4, 5, right?

91
00:07:42.774 --> 00:07:49.367
And so what's fascinating to me,
is how this translates, right?

92
00:07:49.367 --> 00:07:53.288
Is that not interesting to anyone else
cuz it seems like it's picking up all

93
00:07:53.288 --> 00:07:53.981
the values.

94
00:07:56.356 --> 00:08:00.909
Right let's just check D yeah, so

95
00:08:00.909 --> 00:08:07.030
we have a is 1 We have two.

96
00:08:08.955 --> 00:08:12.139
B is 2, that makes sense to me,
does that make sense to you guys?

97
00:08:12.139 --> 00:08:13.222
Seems straightforward, right?

98
00:08:15.051 --> 00:08:15.551
And then C.

99
00:08:18.388 --> 00:08:19.779
That's where it gets interesting.

100
00:08:24.107 --> 00:08:26.864
C and D.

101
00:08:26.864 --> 00:08:29.693
&gt;&gt; Can I ask,
what would happen if you took away

102
00:08:29.693 --> 00:08:33.287
the brackets around B like
that opening bracket for B and

103
00:08:33.287 --> 00:08:37.895
then one of the trailing ones there
that change how the assignments go?

104
00:08:37.895 --> 00:08:42.911
Because they're looking at the nested
brackets on the assigning.

105
00:08:42.911 --> 00:08:45.760
&gt;&gt; Yeah, let's check it out.

106
00:08:45.760 --> 00:08:52.276
&gt;&gt; Because we don't have the same
amount of layers or what just happened.

107
00:08:52.276 --> 00:08:52.897
&gt;&gt; It's not iterable.

108
00:08:56.021 --> 00:08:56.581
That's very interesting.

109
00:08:59.272 --> 00:09:07.766
A Yeah, I'm not sure,
this is a tricky one.

110
00:09:07.766 --> 00:09:13.556
&gt;&gt; You might be trying
to assign the entire

111
00:09:13.556 --> 00:09:19.350
array from 2 to 6, also b maybe that.

112
00:09:19.350 --> 00:09:21.658
&gt;&gt; Yeah, anyone, so
we have 3, and 4, and c,

113
00:09:24.124 --> 00:09:28.969
Then d is the last one,

114
00:09:28.969 --> 00:09:33.306
very fascinating.

115
00:09:33.306 --> 00:09:34.303
What's the takeaway here?

116
00:09:38.392 --> 00:09:39.704
&gt;&gt; I'll use nested arrays.

117
00:09:39.704 --> 00:09:42.992
[LAUGH]
&gt;&gt; Yeah, and don't try to distract your

118
00:09:42.992 --> 00:09:48.134
crazy nested arrays like this I
think that's the biggest takeaway.

119
00:09:48.134 --> 00:09:53.579
Is this readable, is this straightforward?

120
00:09:53.579 --> 00:10:00.790
No, probably not a good idea,
cool let's move on.

121
00:10:00.790 --> 00:10:05.695
All right, so
when you wanna get a value from

122
00:10:05.695 --> 00:10:10.212
a property, we saw this right already.

123
00:10:14.900 --> 00:10:16.449
This won't match great.

124
00:10:18.874 --> 00:10:20.443
And etc and it keeps going.

125
00:10:26.424 --> 00:10:33.196
How said excuse keeps going Anyway, so,
&gt;&gt; Do you have these notes somewhere.

126
00:10:33.196 --> 00:10:38.056
&gt;&gt; I'll send them out, so yeah I just
wanted to show that there's a lot

127
00:10:38.056 --> 00:10:43.343
deeper that you can go with this, but
we're not gonna go deep into that but

128
00:10:43.343 --> 00:10:47.987
it's something interesting to explore,
when you're ready.

129
00:10:47.987 --> 00:10:51.625
Or I'm sure there's some ESX
courses here on the Frontend

130
00:10:51.625 --> 00:10:55.050
of Masters platform to go
even deeper with destruction

