[00:00:00]
>> Bianca Gandolfo: You have two options here. You have the challenging exercise, or the relaxed exercise. So, we'll have about fifteen minutes. So, that will be like a break and doing the exercise. The first exercise is reduced. So reduced is one of those methods like map and filter, that are core.

[00:00:26]
Core, core, to the heart of functional programming and even pseudo functional programming which is what we're doing. And so it's important to understand how to use it. The implementation is tough, but very interesting. Let me tell you how it works. So reduce takes a collection and it takes a callback function.

[00:01:00]
And this function is going to, or reduce always returns one value at the end. So math, remember math returns an array of the same length. Each doesn't return anything, filter will return based on that truthy test that we pass it. Reduce always returns one function. So what it does is it will call, it does loop, though.

[00:01:26]
It loops through the collection calling that function and then based on,
>> Bianca Gandolfo: Whatever that function returns, it gets passed on back and it gets accumulated. So that function it's gonna be called each time with the past value of the return of that function, and the current value or in the next value en loop.

[00:01:51]
Does that make sense? So as we're looping and we're calling this function, previously we always call the function with current, item, index, list, right? In this case, we gonna call with the previous value and the current value, and take those two values and it's gonna return one value together.

[00:02:11]
And the one in the example everyone uses is addition. Some argue it's because reduce is so confusing that no one can figure out how to do anything else except for addition with it. Here it is, so we have a list with two items, one and two. Our callback function is going to be called with the previous value and the current value, so the very first go around, and this is the initial value.

[00:02:38]
You can also pass the initial value. So the initial value, will be passed as an argument. You add them together zero plus one, is one. So, sum is now one. N is then two. One plus two is three. So that's an example how reduce is used and here's a more complex example, kind of.

[00:03:10]
So,
>> Bianca Gandolfo: We have an initial value, which is an object, okay? And our function takes result value key, so there results or sorry the initial value is the result at first right? So we start with this, result is an object. And it says, if result at value, value is going to be 1.

[00:03:44]
If the key is A, you guys following? Tell me to stop if I'm going too fast. This is a little tricky. So if this is a common pattern here to say like, if this exist then initialize at 0. Otherwise do something else. So this is if it exist or if it doesn't exist, yes.

[00:04:11]
So if resulted value is false, it's gonna go to the other side of this or, and it's gonna initialize result value,. Add an empty array, return that, and it's gonna push the key. If it already exists though, it's just gonna return this and then push the key to that.

[00:04:40]

>> Bianca Gandolfo: That make sense, what this line is doing?
>> Bianca Gandolfo: No, okay, we'll do it one more time. So,
>> Bianca Gandolfo: So what this is doing is it's collecting all of the keys that have the same value.
>> Bianca Gandolfo: And,
>> Bianca Gandolfo: So what it's doing is it's initializing an empty object, and it's first checking is this value in our object already?

[00:05:15]
So result, empty object. The value for the first property, for starting here, is gonna be one. So we're saying result dot one, does that exist? No, it doesnt' exist yet. Okay, so then we're gonna go to this side and we're gonna initialize result value to be an empty array and then we're gonna push the key.

[00:05:41]
So, result value is one, is an empty array. So we're creating this first array, and it's empty at first, and then we're pushing the key and that key is A. And then we'll return that result, right? Which is an object that has a 1 and an a inside of a array.

[00:06:08]

>> Bianca Gandolfo: And then,
>> Bianca Gandolfo: We do it again. The same object, this time the value is gonna be 2 Again, it's gonna initialize that, and it creates this here, returns the result. Now we have something that matches, this one, and result of that value, which is one. I'm sorry, it matches this one here and so we'll just, instead of initializing it, we'll push a key.

[00:06:40]

>> Bianca Gandolfo: Okay and then we return the result. So that's reduce. It's a little tricky. So the challenge, if you want a challenging task, is to implement that under the hood. Has a sort of like accumulation effect. Where it has a memory and it passes it along every single time.

[00:07:05]

>> Bianca Gandolfo: And then if you're feeling like it's late and you want to relax a little bit. We have eachRight, which is a for-each, except for, instead of going from left to right, you go from right to left.
>> Bianca Gandolfo: So it's very relaxed at this point. Yesterday that was-

[00:07:27]

>> Speaker 2: Just, it was like you had reversed the array instead of, have a function that starts on the right.
>> Bianca Gandolfo: You mean like, that's how you would implement it? Is you would reverse the arguments?
>> Speaker 2: No, I'm just saying it just seems weird for each right, instead of doing four each in this reversing the order of the array.

[00:07:50]

>> Bianca Gandolfo: Yeah, if you reverse the order the array, you are thinking about time complexity and stuff, can be expensive.
>> Speaker 2: Yeah, it can if it's a huge array I guess.
>> Bianca Gandolfo: Yeah, it's just a thing to do if you don't feel like implementing reduce. However, reduce is pretty cool.

[00:08:12]
So I recommend doing that one even if it's intimidating, and I'll walk around and help.

