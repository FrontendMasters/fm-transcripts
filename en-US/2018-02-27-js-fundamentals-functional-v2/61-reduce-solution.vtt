WEBVTT

1
00:00:00.125 --> 00:00:03.392
We're doing reduce, can someone tell me,

2
00:00:03.392 --> 00:00:06.935
from the documentation,
what does this take?

3
00:00:06.935 --> 00:00:11.067
It takes a list and it takes a callback
and then an initial value, right?

4
00:00:11.067 --> 00:00:14.024
Okay, so,

5
00:00:26.922 --> 00:00:30.749
All right, we'll skip the underscore part.

6
00:00:30.749 --> 00:00:35.690
Okay, so the first thing we need to do is
we wanna loop through the list, right?

7
00:00:37.580 --> 00:00:39.386
For every loop, what do we need to do?

8
00:00:42.175 --> 00:00:44.296
&gt;&gt; We're gonna hold this value.

9
00:00:44.296 --> 00:00:48.908
&gt;&gt; We need to save
the return value of what?

10
00:00:50.843 --> 00:00:52.192
&gt;&gt; Of the callback.

11
00:00:52.192 --> 00:00:56.049
&gt;&gt; So we call the callback with?

12
00:00:59.668 --> 00:01:02.849
&gt;&gt; The value of the array at the index.

13
00:01:02.849 --> 00:01:09.229
&gt;&gt; Yep, I'll just say arr[i], we know
what that means now, and what else?

14
00:01:12.554 --> 00:01:14.497
&gt;&gt; We combine them.

15
00:01:14.497 --> 00:01:15.897
&gt;&gt; In the previous value, right?

16
00:01:15.897 --> 00:01:19.313
&gt;&gt; Yeah, in the previous value,
with the initial.

17
00:01:19.313 --> 00:01:23.590
&gt;&gt; Yeah, or initial, depending, great.

18
00:01:23.590 --> 00:01:29.310
And then once we do that,
we wanna save that value for

19
00:01:29.310 --> 00:01:32.692
the next loop, and then what?

20
00:01:32.692 --> 00:01:37.359
&gt;&gt; We return the total or
whatever it is that we get at the end.

21
00:01:37.359 --> 00:01:42.290
&gt;&gt; Yeah, return the result,
which will be one value, right?

22
00:01:42.290 --> 00:01:48.728
That's why it's reduced, it takes a list,
and it reduces it down to one thing.

23
00:01:50.629 --> 00:01:55.113
All right, so let's try this.

24
00:01:55.113 --> 00:01:59.170
So let's loop through a list,

25
00:01:59.170 --> 00:02:04.007
let's just pretend that it's gonna

26
00:02:04.007 --> 00:02:08.755
be, An array always.

27
00:02:08.755 --> 00:02:14.332
And then,
while i is less than list.length,

28
00:02:14.332 --> 00:02:20.197
come one, list.length, wow, okay, i++.

29
00:02:20.197 --> 00:02:25.694
All right, so we wanna call the callback,

30
00:02:25.694 --> 00:02:31.190
I wanna say callback, we're calling it,

31
00:02:31.190 --> 00:02:35.173
we wanna pass some arguments.

32
00:02:35.173 --> 00:02:38.218
We have our list at i, and

33
00:02:38.218 --> 00:02:44.165
then some previous value or
something, right?

34
00:02:44.165 --> 00:02:49.049
This is not returning, this isn't,

35
00:02:51.959 --> 00:02:57.157
Referencing anything yet,
it's just a holding variable for now.

36
00:02:59.524 --> 00:03:06.079
Or you can call this memo or
accumulator value, okay.

37
00:03:11.415 --> 00:03:15.713
And then, we need to save that value
somewhere, probably not in the loop cuz

38
00:03:15.713 --> 00:03:19.623
it would be reinitialized and
that would be against our whole thing.

39
00:03:21.254 --> 00:03:28.946
So let's say we want,
&gt;&gt; Let memo equal initial.

40
00:03:33.245 --> 00:03:34.516
&gt;&gt; Okay.

41
00:03:38.454 --> 00:03:45.314
We can also give initial, Can we do this?

42
00:03:48.520 --> 00:03:49.319
Anyone know?

43
00:03:51.414 --> 00:03:53.481
It's like referencing itself.

44
00:03:56.591 --> 00:04:01.302
I know, we'll just leave it there for
now and see what happens.

45
00:04:01.302 --> 00:04:02.788
It's an adventure.

46
00:04:02.788 --> 00:04:07.861
So we say, memo = callback with these,

47
00:04:07.861 --> 00:04:11.741
applied, and then at the end,

48
00:04:11.741 --> 00:04:17.428
we wanna return memo, something like that.

49
00:04:17.428 --> 00:04:19.560
What do we think so far?

50
00:04:25.627 --> 00:04:26.984
What do you think?

51
00:04:26.984 --> 00:04:29.774
Anybody?

52
00:04:29.774 --> 00:04:32.756
Let's run it as a team.

53
00:04:35.624 --> 00:04:40.677
And then we're gonna have our function,
it's gonna take a value, and then sum,

54
00:04:53.339 --> 00:04:58.000
All right.

55
00:05:05.350 --> 00:05:05.850
Okay.

56
00:05:08.496 --> 00:05:12.412
Are you guys ready to run it,
in your minds?

57
00:05:12.412 --> 00:05:13.447
Who wants to go first?

58
00:05:17.184 --> 00:05:25.342
How about, Jenny?

59
00:05:25.342 --> 00:05:27.236
&gt;&gt; I'll start with the first line.

60
00:05:27.236 --> 00:05:29.012
&gt;&gt; Yep, let's start with the fitst line.

61
00:05:29.012 --> 00:05:32.582
&gt;&gt; [COUGH] Setting the variable to reduce.

62
00:05:32.582 --> 00:05:36.860
&gt;&gt; Yep, so we just set up our
function definition to reduce, and

63
00:05:36.860 --> 00:05:38.769
then what happens, Josh?

64
00:05:40.688 --> 00:05:42.429
&gt;&gt; We call reduce with those parameters.

65
00:05:42.429 --> 00:05:48.335
&gt;&gt; Yeah, we call reduce,
we pass it a list, we pass it a function.

66
00:05:48.335 --> 00:05:53.409
So now, list is gonna be 1, 2, 3,

67
00:05:53.409 --> 00:05:58.486
and our callback is gonna be some sum,

68
00:05:58.486 --> 00:06:02.943
just for reference here, okay?

69
00:06:02.943 --> 00:06:06.647
So I don't know if this works,
but either this or,

70
00:06:10.512 --> 00:06:16.085
That's how we can do it,
right, either way.

71
00:06:16.085 --> 00:06:22.270
So memo = initial or the first of our
list, and so we want that to be 1.

72
00:06:25.562 --> 00:06:29.905
So in that case, we wanna start a little
later, right, we wanna skip the first one.

73
00:06:34.315 --> 00:06:36.068
Actually, that's something we need to say.

74
00:06:37.560 --> 00:06:40.822
What should we do there?

75
00:06:40.822 --> 00:06:45.926
Something to consider is,
what happens when,

76
00:06:49.123 --> 00:06:52.451
Let's say, I think what we wanna do,

77
00:06:52.451 --> 00:06:57.862
what happens when the first
value becomes the initial value?

78
00:06:57.862 --> 00:07:01.548
We should account for that,
we're not accounting for

79
00:07:01.548 --> 00:07:06.690
that in this scenario, but we'll get
back to that, what error right here.

80
00:07:06.690 --> 00:07:09.510
So we'll start at 0,
let's pass an initial.

81
00:07:12.511 --> 00:07:19.302
So in the case where we have
an initial value, this is 0.

82
00:07:21.092 --> 00:07:22.042
List[i] is what?

83
00:07:22.042 --> 00:07:25.512
&gt;&gt; [INAUDIBLE]
&gt;&gt; 1, yeah, so

84
00:07:25.512 --> 00:07:29.797
we pass 1 and then memo is what?

85
00:07:29.797 --> 00:07:30.728
You're right.

86
00:07:30.728 --> 00:07:37.567
Wait, no, let's list[i] is 1, and
then memo is gonna be 0, okay?

87
00:07:39.612 --> 00:07:45.280
So we have 1 and then 0,
we're gonna go into our function.

88
00:07:45.280 --> 00:07:52.254
v is 1, sum is 0, that is gonna return 1.

89
00:07:52.254 --> 00:07:54.681
So memo is now 1.

90
00:07:56.897 --> 00:08:01.220
Great, so now let's loop again,
we'll reset this value.

91
00:08:01.220 --> 00:08:06.929
So i is now 1, list at 1 is 2 and

92
00:08:06.929 --> 00:08:10.739
a memo is gonna be 1.

93
00:08:10.739 --> 00:08:14.160
We do the same now memo is going to be 3.

94
00:08:20.624 --> 00:08:24.554
And we wanna loop again,

95
00:08:24.554 --> 00:08:29.614
i is now 2, second index is 3.

96
00:08:29.614 --> 00:08:35.156
That is going to give us 3 and 3.

97
00:08:35.156 --> 00:08:40.584
Those together it's gonna give us 6.

98
00:08:42.337 --> 00:08:48.015
We break out of this and we return 6

99
00:08:54.910 --> 00:09:00.181
Seems good for our first pass Any

100
00:09:00.181 --> 00:09:05.419
bugs
&gt;&gt; This zero thing.

101
00:09:05.419 --> 00:09:07.119
&gt;&gt; Yeah.

102
00:09:07.119 --> 00:09:13.153
So what do we do when we
don't have an initial value?

103
00:09:13.153 --> 00:09:17.257
Because if we just reset it right
then we'd be adding one plus one and

104
00:09:17.257 --> 00:09:19.134
then our value would be seven.

105
00:09:19.134 --> 00:09:20.496
You know what I mean?

106
00:09:20.496 --> 00:09:23.590
So that's probably not what we want to do.

107
00:09:26.113 --> 00:09:31.767
So we can just say
something like if initial,

108
00:09:37.890 --> 00:09:42.862
Then let's just do this,

109
00:09:42.862 --> 00:09:48.060
if initial then memo equals

110
00:09:48.060 --> 00:09:53.936
initial else memo, April's I

111
00:09:53.936 --> 00:09:59.586
think we should do it actually

112
00:09:59.586 --> 00:10:04.656
in I think we should do it in here.

113
00:10:04.656 --> 00:10:11.371
If, I would say if i=0,

114
00:10:11.371 --> 00:10:18.699
and initial is not defined,

115
00:10:18.699 --> 00:10:26.957
then memo equals list at i + at 0

116
00:10:33.710 --> 00:10:41.084
And then we're gonna
increment i Like that.

117
00:10:44.388 --> 00:10:45.546
How's that gonna turn out?

118
00:10:45.546 --> 00:10:49.698
I, 0, and there's no initial value.

119
00:10:56.223 --> 00:11:01.451
Well, Okay, looks a little messy.

120
00:11:01.451 --> 00:11:04.901
There can be a more elegant solution here.

121
00:11:04.901 --> 00:11:09.820
&gt;&gt; Meme of the undefined
if there's no national

122
00:11:09.820 --> 00:11:10.440
&gt;&gt; Yeah.

123
00:11:10.440 --> 00:11:14.208
&gt;&gt; So then and

124
00:11:14.208 --> 00:11:20.074
not undefined.

125
00:11:20.074 --> 00:11:22.390
&gt;&gt; That.
&gt;&gt; No, I mean, it's already

126
00:11:22.390 --> 00:11:24.133
&gt;&gt; So if this is true

127
00:11:24.133 --> 00:11:24.972
&gt;&gt; Yeah.

128
00:11:24.972 --> 00:11:26.564
&gt;&gt; So and not.

129
00:11:26.564 --> 00:11:28.413
Yeah, that's right.

130
00:11:28.413 --> 00:11:31.008
So this would find, yeah.

131
00:11:31.008 --> 00:11:34.896
You're right, and is undefined.

132
00:11:34.896 --> 00:11:38.457
&gt;&gt; Also, you could just,
&gt;&gt; Right?

133
00:11:38.457 --> 00:11:40.137
&gt;&gt; That's double negation, right?

134
00:11:40.137 --> 00:11:40.739
&gt;&gt; Yeah.

135
00:11:40.739 --> 00:11:41.477
&gt;&gt; Okay.

136
00:11:46.330 --> 00:11:47.351
&gt;&gt; Okay.

137
00:11:47.351 --> 00:11:49.600
No, let's see.

138
00:11:49.600 --> 00:11:52.140
Not true is false.

139
00:11:52.140 --> 00:11:57.248
&gt;&gt; You can just remove that two
the double negation entirely for

140
00:11:57.248 --> 00:12:00.160
the same thing couldn't happen.

141
00:12:00.160 --> 00:12:01.190
&gt;&gt; What do you mean?

142
00:12:01.190 --> 00:12:06.626
&gt;&gt; Well,
isn't memo equal to double negated memo?

143
00:12:06.626 --> 00:12:08.912
&gt;&gt; Yeah.

144
00:12:08.912 --> 00:12:10.182
&gt;&gt; It's false.

145
00:12:10.182 --> 00:12:13.629
&gt;&gt; No we want this to be true.

146
00:12:13.629 --> 00:12:14.792
&gt;&gt; Yeah.

147
00:12:14.792 --> 00:12:20.183
&gt;&gt; Because of the and so they both need to
be true for it to enter into this block.

148
00:12:24.726 --> 00:12:29.267
I actually have a better idea,
I like this better.

149
00:12:32.950 --> 00:12:34.864
Okay, I'm happier with that.

150
00:12:37.824 --> 00:12:44.573
Okay, What do we think?

151
00:12:47.820 --> 00:12:50.235
Seem reasonable?

152
00:12:50.235 --> 00:12:52.910
Probably we wanna pass more
things into the callback.

153
00:12:54.925 --> 00:12:56.774
&gt;&gt; The original list?

154
00:12:56.774 --> 00:13:01.864
&gt;&gt; Yeah, and that kinda thing, but
This is the basic functionality.

155
00:13:01.864 --> 00:13:06.337
So I'm going to trace
it like we did before.

156
00:13:06.337 --> 00:13:11.271
Or actually how about you guys
trace it since my uvula is swollen.

157
00:13:11.271 --> 00:13:15.970
[LAUGH] All right.

158
00:13:15.970 --> 00:13:18.366
Did you guys stress it before?

159
00:13:18.366 --> 00:13:19.156
I feel like I'm going crazy.

160
00:13:19.156 --> 00:13:22.385
You guys already traced it right?

161
00:13:22.385 --> 00:13:27.921
Okay.
Well maybe I'll Do it this time, okay.

162
00:13:27.921 --> 00:13:33.570
So we have a reduced function we're
calling it with two arguments or

163
00:13:33.570 --> 00:13:39.630
three arguments really, we have an array,
and then we have a function.

164
00:13:39.630 --> 00:13:43.173
This function just returns
the sum of two numbers.

165
00:13:46.143 --> 00:13:49.948
And then an initial value.

166
00:13:49.948 --> 00:13:54.476
So what we want to do is for
every value in

167
00:13:54.476 --> 00:13:59.431
this list we wanna run
this function on it.

168
00:13:59.431 --> 00:14:02.748
And we expect it to return one value,

169
00:14:02.748 --> 00:14:08.430
that value gets passed into
the function as a second argument.

170
00:14:08.430 --> 00:14:12.606
And then the next value gets passed
as the first so we have the value and

171
00:14:12.606 --> 00:14:16.206
then we have the sum that will
get passed every single time.

172
00:14:16.206 --> 00:14:20.658
In this case it'd be three
times that we'd go through.

173
00:14:20.658 --> 00:14:22.209
And this is our initial value.

174
00:14:22.209 --> 00:14:25.222
This tells us what we start with.

175
00:14:25.222 --> 00:14:31.456
If we don't have an initial value,
we use the very first value in the array.

176
00:14:31.456 --> 00:14:32.725
But we'll have an initial value,

177
00:14:32.725 --> 00:14:34.709
it's a little bit easier
to conceptualize that way.

178
00:14:34.709 --> 00:14:40.139
And then we'll do it without initial
value and see how that works.

179
00:14:40.139 --> 00:14:44.081
Okay, so we called it.

180
00:14:44.081 --> 00:14:48.881
So list is that array 1, 2, 3,
we have this callback function,

181
00:14:48.881 --> 00:14:52.444
a summation function, and
then initial is zero.

182
00:14:52.444 --> 00:14:55.050
So we start off memo, memos initial.

183
00:14:55.050 --> 00:14:57.805
So that is gonna be 0, i0.

184
00:15:00.382 --> 00:15:03.084
And there's a bug.

185
00:15:03.084 --> 00:15:06.083
You guys see that bug?

186
00:15:06.083 --> 00:15:09.198
If memo is 0.

187
00:15:09.198 --> 00:15:10.559
&gt;&gt; Then that would be a negative 0.

188
00:15:10.559 --> 00:15:11.657
&gt;&gt; Yeah.

189
00:15:16.434 --> 00:15:17.223
JavaScript.

190
00:15:17.223 --> 00:15:22.397
Okay, So

191
00:15:22.397 --> 00:15:28.161
i is zero that's true memo is
not undefined because it's zero.

192
00:15:28.161 --> 00:15:31.490
So we skip that we jump
into this else block.

193
00:15:31.490 --> 00:15:35.904
We gonna call this callback
function with memo, which is zero.

194
00:15:35.904 --> 00:15:40.590
Listed I Which is one, so
we're going to call it with one and zero.

195
00:15:40.590 --> 00:15:42.476
Those are arguments.

196
00:15:42.476 --> 00:15:45.765
Just so we have it to look at.

197
00:15:45.765 --> 00:15:49.175
And here's a summation function.

198
00:15:49.175 --> 00:15:52.917
I can also write this longer
hand if it's easier, but

199
00:15:52.917 --> 00:15:56.172
we're just need to add one and
zero together.

200
00:15:56.172 --> 00:15:58.401
And that's going to return one.

201
00:15:58.401 --> 00:16:01.350
So memo is now updated to one.

202
00:16:01.350 --> 00:16:05.660
Okay, And
we're gonna go now to the next loop.

203
00:16:05.660 --> 00:16:12.390
So i is equal to 1 at this point,
i is not 0.

204
00:16:12.390 --> 00:16:14.260
So we never even go into the left side.

205
00:16:14.260 --> 00:16:18.860
Since this is false,
we'll just skip it entirely.

206
00:16:18.860 --> 00:16:22.420
Go back and
then we'll get back in this else block.

207
00:16:22.420 --> 00:16:27.960
List is what, let's say i is 2.

208
00:16:29.280 --> 00:16:33.200
Yeah, are we following,
am I going too fast, okay?

209
00:16:33.200 --> 00:16:36.391
And then memo is 1.

210
00:16:37.548 --> 00:16:44.033
Okay, we add them together, that gives
us 3 and we update memo is now 3.

211
00:16:44.033 --> 00:16:48.701
Now, we're gonna restart the loop,
i is now 2,

212
00:16:49.909 --> 00:16:53.736
And, This is false.

213
00:16:54.808 --> 00:16:57.008
We're gonna run this.

214
00:16:57.008 --> 00:17:02.575
Listed i, Is 3,

215
00:17:02.575 --> 00:17:05.595
memo is 3.

216
00:17:05.595 --> 00:17:11.012
And so now we have 6 and
we update memo with 6.

217
00:17:13.771 --> 00:17:17.161
We're gonna try to do the loop again but

218
00:17:17.161 --> 00:17:22.005
it's gonna fail because 3
is not less than 3, right?

219
00:17:22.005 --> 00:17:24.865
If we did that it would still run but
we don't wanna do that.

220
00:17:27.272 --> 00:17:32.016
And since we went all through that,
it will return memo which

221
00:17:32.016 --> 00:17:36.370
will return 6 down here, Okay?

222
00:17:37.385 --> 00:17:38.611
Any questions about that?

223
00:17:41.269 --> 00:17:42.049
No?

224
00:17:43.954 --> 00:17:48.584
It's kind of a mind, it's surprisingly
simple for something so complicated.

225
00:17:48.584 --> 00:17:49.509
You know what I mean?

226
00:17:50.886 --> 00:17:53.620
All right, so now let's try
it without the initial value.

227
00:18:00.566 --> 00:18:03.365
Okay, just switch it up a little bit.

228
00:18:03.365 --> 00:18:08.651
So here's our lists, 2, 3, 5.

229
00:18:08.651 --> 00:18:12.205
This is gonna be set to undefined
because we haven't passed anything to

230
00:18:12.205 --> 00:18:13.161
initial, right?

231
00:18:13.161 --> 00:18:14.242
We need to put it there.

232
00:18:16.400 --> 00:18:18.073
&gt;&gt; We gonna start i is 0.

233
00:18:19.108 --> 00:18:21.614
So i is 0.

234
00:18:23.307 --> 00:18:26.822
I is 0 and memo is undefined.

235
00:18:28.151 --> 00:18:31.167
So then we assign memo to list at 0.

236
00:18:32.841 --> 00:18:35.078
Which is 2.

237
00:18:37.291 --> 00:18:41.027
Then we loop again, now i is 1.

238
00:18:43.439 --> 00:18:45.593
And then we skip this.

239
00:18:45.593 --> 00:18:50.638
We go here, We're calling our callback

240
00:18:50.638 --> 00:18:55.818
with our listed i which is,
whoosh, what was it again,

241
00:18:55.818 --> 00:19:00.110
3 Plus memo, which is 2.

242
00:19:00.110 --> 00:19:02.899
So then we assign memo
we update that to 5.

243
00:19:06.585 --> 00:19:10.305
Okay, now i is 2.

244
00:19:10.305 --> 00:19:16.264
We skip this one, we go here and

245
00:19:16.264 --> 00:19:21.076
we want to do 5, right,

246
00:19:21.076 --> 00:19:26.368
i list at 2 is 5 + 5 = 11

247
00:19:29.570 --> 00:19:36.466
= 11
&gt;&gt; 5 + 5 = 11.

248
00:19:36.466 --> 00:19:41.951
&gt;&gt; [LAUGH]
&gt;&gt; 5 + 5 = 11.

249
00:19:41.951 --> 00:19:46.789
Not true, 10, I've just seen
you guys paying attention and

250
00:19:46.789 --> 00:19:48.806
you weren't caught you.

251
00:19:48.806 --> 00:19:53.871
So, We're done with this

252
00:19:53.871 --> 00:20:01.392
loop cuz 3 is not less than 3,
And then we return 10.

253
00:20:05.981 --> 00:20:07.473
Any questions?

254
00:20:11.221 --> 00:20:11.808
No?

255
00:20:14.253 --> 00:20:17.124
All right, so that is reduce.

256
00:20:24.071 --> 00:20:26.479
And anyone got it running on their own?

257
00:20:26.479 --> 00:20:29.220
&gt;&gt; Yeah
&gt;&gt; You just got that and go, nice.

258
00:20:29.220 --> 00:20:33.059
&gt;&gt; I didn't put in that initial condition,
I was so like kind of up here.

259
00:20:33.059 --> 00:20:34.056
&gt;&gt; Yeah, that's good.

260
00:20:35.349 --> 00:20:36.139
All right.

