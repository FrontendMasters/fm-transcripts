WEBVTT

1
00:00:00.240 --> 00:00:02.700
&gt;&gt; Bianca Gandolfo: We are doing reduce.

2
00:00:02.700 --> 00:00:07.180
Can someone tell me from
the documentation what does this take?

3
00:00:07.180 --> 00:00:11.176
It take a list, and it takes a callback
and then an initial value, right?

4
00:00:11.176 --> 00:00:12.233
&gt;&gt; Speaker 2: Mm-hm.

5
00:00:12.233 --> 00:00:14.290
&gt;&gt; Bianca Gandolfo: Okay, so,

6
00:00:24.348 --> 00:00:25.595
&gt;&gt; Bianca Gandolfo: All right,

7
00:00:25.595 --> 00:00:29.220
we'll skip the underscore part.

8
00:00:30.950 --> 00:00:35.670
Okay, so the first thing we need to do is,
we wanna loop through the list, right?

9
00:00:37.530 --> 00:00:38.960
For every loop, what do we need to do?

10
00:00:38.960 --> 00:00:42.638
&gt;&gt; Speaker 3: Need to hold its value.

11
00:00:42.638 --> 00:00:48.810
&gt;&gt; Bianca Gandolfo: We need to
save the return value of what?

12
00:00:50.214 --> 00:00:52.270
&gt;&gt; Speaker 3: Of the callback.

13
00:00:52.270 --> 00:00:56.010
&gt;&gt; Bianca Gandolfo: So
we call the callback with?

14
00:00:59.240 --> 00:01:01.629
&gt;&gt; Speaker 4: The value of
the array at the index.

15
00:01:03.100 --> 00:01:05.116
&gt;&gt; Bianca Gandolfo: Yep,
with the, I'll just say arr[i],

16
00:01:05.116 --> 00:01:06.460
we know what that means now.

17
00:01:06.460 --> 00:01:09.014
And what else?

18
00:01:12.210 --> 00:01:14.670
&gt;&gt; Speaker 4: You combine them.

19
00:01:14.670 --> 00:01:16.100
&gt;&gt; Bianca Gandolfo: In the previous value,
right?

20
00:01:16.100 --> 00:01:19.480
&gt;&gt; Speaker 4: Yeah,
in the previous value with the initial.

21
00:01:19.480 --> 00:01:22.221
&gt;&gt; Bianca Gandolfo: Yeah, or
initial, depending, great.

22
00:01:22.221 --> 00:01:29.400
And then once we do that, we wanna
save that value for the next loop.

23
00:01:30.840 --> 00:01:31.340
And then what?

24
00:01:32.710 --> 00:01:37.570
&gt;&gt; Speaker 4: We return the total, or
whatever it is that we get at the end.

25
00:01:37.570 --> 00:01:44.470
&gt;&gt; Bianca Gandolfo: Yeah, return the
results, which will be one value, right?

26
00:01:44.470 --> 00:01:45.310
That's why it's reduced.

27
00:01:45.310 --> 00:01:48.230
It takes a list, and
it reduces it down to one thing.

28
00:01:50.580 --> 00:01:53.970
All right, so let's try this.

29
00:01:53.970 --> 00:01:55.440
So let's loop through a list.

30
00:01:57.370 --> 00:02:01.080
Let's just pretend that it's gonna be a,

31
00:02:04.660 --> 00:02:07.733
&gt;&gt; Bianca Gandolfo: It's gonna be an array

32
00:02:07.733 --> 00:02:11.937
always, and then while list,

33
00:02:11.937 --> 00:02:16.796
while i is less than list.length.

34
00:02:16.796 --> 00:02:20.980
Come on, list.length.

35
00:02:20.980 --> 00:02:27.337
Wow, okay, i++, all right,
so we wanna call a callback.

36
00:02:27.337 --> 00:02:31.957
I'm gonna say callback, we're calling it,

37
00:02:31.957 --> 00:02:35.043
we wanna pass some arguments.

38
00:02:35.043 --> 00:02:38.126
We have our list[i], and

39
00:02:38.126 --> 00:02:43.633
then some previous value or
something, right?

40
00:02:43.633 --> 00:02:46.860
This is not returning.

41
00:02:46.860 --> 00:02:52.756
This isn't,
&gt;&gt; Bianca Gandolfo: Referencing

42
00:02:52.756 --> 00:02:57.260
anything yet,
it's just a holding variable for now.

43
00:02:59.660 --> 00:03:04.744
Or you could call this memo or
accumulator value.

44
00:03:04.744 --> 00:03:09.634
Okay,
&gt;&gt; Bianca Gandolfo: And

45
00:03:09.634 --> 00:03:14.476
then we need to save that value somewhere,
probably not in loop cuz it

46
00:03:14.476 --> 00:03:19.330
would be reinitialized, and
that would be against our whole thing.

47
00:03:21.400 --> 00:03:25.591
So let's say we want-

48
00:03:28.157 --> 00:03:34.323
&gt;&gt; Speaker 4: Let memo = initial.

49
00:03:35.584 --> 00:03:36.761
&gt;&gt; Bianca Gandolfo: Okay.

50
00:03:38.030 --> 00:03:44.689
&gt;&gt; Bianca Gandolfo: We can also
get initial, hm, can we do this?

51
00:03:48.160 --> 00:03:50.124
&gt;&gt; Bianca Gandolfo: Anyone know?

52
00:03:51.210 --> 00:03:55.027
&gt;&gt; Bianca Gandolfo: It's
like referencing itself.

53
00:03:55.027 --> 00:03:56.675
&gt;&gt; Bianca Gandolfo: I don't know.

54
00:03:56.675 --> 00:04:01.460
&gt;&gt; Bianca Gandolfo: We'll just leave
it there for now and see what happens.

55
00:04:01.460 --> 00:04:02.940
It's an adventure.

56
00:04:02.940 --> 00:04:08.350
So we say memo = call back

57
00:04:08.350 --> 00:04:12.420
with these applied, and

58
00:04:12.420 --> 00:04:17.570
then at the end, you wanna return memo,
something like that.

59
00:04:17.570 --> 00:04:19.090
What do we think so far?

60
00:04:22.252 --> 00:04:28.095
&gt;&gt; Bianca Gandolfo: What do you think,
maybe?

61
00:04:28.095 --> 00:04:32.270
Let's run it as a team.

62
00:04:35.150 --> 00:04:37.871
&gt;&gt; Bianca Gandolfo: Then we're
gonna have our functions,

63
00:04:37.871 --> 00:04:40.760
we're gonna take the value and then sum.

64
00:04:54.452 --> 00:04:57.877
&gt;&gt; Bianca Gandolfo: All

65
00:04:57.877 --> 00:05:05.869
right.

66
00:05:07.555 --> 00:05:08.818
&gt;&gt; Bianca Gandolfo: Okay,
&gt;&gt; Bianca Gandolfo: You

67
00:05:08.818 --> 00:05:11.110
guys ready to run it in your minds?

68
00:05:12.520 --> 00:05:13.410
Who wants to go first?

69
00:05:16.834 --> 00:05:25.660
&gt;&gt; Bianca Gandolfo: How about,
&gt;&gt; Bianca Gandolfo: Jenny?

70
00:05:25.660 --> 00:05:27.410
&gt;&gt; Jenny: Start at the first line?

71
00:05:27.410 --> 00:05:29.022
&gt;&gt; Bianca Gandolfo: Yep,
we'll start with the first line.

72
00:05:29.022 --> 00:05:32.610
&gt;&gt; Jenny: [COUGH] Setting
the variable to reduce.

73
00:05:32.610 --> 00:05:36.750
&gt;&gt; Bianca Gandolfo: Yep, so we just set
up our function definition to reduce.

74
00:05:36.750 --> 00:05:40.670
And then what happens, Josh?

75
00:05:40.670 --> 00:05:42.540
&gt;&gt; Josh: We call reduce
with those parameters.

76
00:05:42.540 --> 00:05:45.180
&gt;&gt; Bianca Gandolfo: Yeah,
we call reduce, we pass it a list.

77
00:05:45.180 --> 00:05:46.965
We pass it a function.

78
00:05:46.965 --> 00:05:52.693
So now, list is gonna be 1, 2, 3,
&gt;&gt; Bianca Gandolfo: And

79
00:05:52.693 --> 00:05:57.213
our callback is gonna be sum sum,

80
00:05:57.213 --> 00:06:01.740
just for reference here, okay?

81
00:06:03.120 --> 00:06:05.740
So, I don't know if this works.

82
00:06:05.740 --> 00:06:12.207
But either this or,
&gt;&gt; Bianca Gandolfo: Is how we can do it,

83
00:06:12.207 --> 00:06:16.210
all right, either way.

84
00:06:16.210 --> 00:06:22.615
So memo equals initial or the first of
our list, and so we want that to be 1.

85
00:06:25.040 --> 00:06:27.020
&gt;&gt; Bianca Gandolfo: So in that case,
we wanna start a little later, right?

86
00:06:27.020 --> 00:06:29.730
We wanna skip the first one.

87
00:06:33.960 --> 00:06:35.870
&gt;&gt; Bianca Gandolfo: Hm,
actually that's something we need to say.

88
00:06:38.020 --> 00:06:39.760
What should we do there?

89
00:06:39.760 --> 00:06:45.510
Something to consider
is what happens when.

90
00:06:48.740 --> 00:06:52.682
&gt;&gt; Bianca Gandolfo: Let's say,
I think what we wanna do,

91
00:06:52.682 --> 00:06:59.740
what happens when the first
value becomes the initial value?

92
00:06:59.740 --> 00:07:01.832
We should account for that, we're not
accounting for that in this scenario.

93
00:07:01.832 --> 00:07:05.790
But we'll get back to that,
what right here.

94
00:07:05.790 --> 00:07:10.000
So we'll start at 0,
let's pass an initial.

95
00:07:12.150 --> 00:07:18.550
&gt;&gt; Bianca Gandolfo: So in the case where
we have an initial value, this is 0.

96
00:07:19.663 --> 00:07:21.774
&gt;&gt; Bianca Gandolfo: list[1] is what?

97
00:07:22.922 --> 00:07:23.864
&gt;&gt; Speaker 7: 0.

98
00:07:23.864 --> 00:07:29.601
&gt;&gt; Bianca Gandolfo: 1, yeah, so
we pass 1, and then memo is what?

99
00:07:29.601 --> 00:07:30.930
You're right.

100
00:07:30.930 --> 00:07:33.731
No, wait, no, list[i] is 1.

101
00:07:33.731 --> 00:07:36.630
And then memo is gonna be 0, okay?

102
00:07:39.740 --> 00:07:41.580
So we have 1 and then 0.

103
00:07:41.580 --> 00:07:44.940
We're gonna go into our function.

104
00:07:44.940 --> 00:07:48.760
v is 1, sum is 0.

105
00:07:48.760 --> 00:07:54.520
That is gonna return 1, so memo is now 1.

106
00:07:57.050 --> 00:08:01.370
Great, so now let's loop again,
we'll reset this value.

107
00:08:01.370 --> 00:08:03.546
So i is now 1.

108
00:08:03.546 --> 00:08:07.224
List at 1 is 2.

109
00:08:07.224 --> 00:08:10.680
And then memo is gonna be 1.

110
00:08:10.680 --> 00:08:11.970
And we do the same.

111
00:08:11.970 --> 00:08:14.211
Now memo is gonna be 3.

112
00:08:20.658 --> 00:08:23.730
&gt;&gt; Bianca Gandolfo: And
we wanna loop again.

113
00:08:25.200 --> 00:08:27.199
i is now 2.

114
00:08:27.199 --> 00:08:29.218
Second index is 3.

115
00:08:29.218 --> 00:08:35.070
That is going to give us 3 and 3.

116
00:08:35.070 --> 00:08:37.571
Add those together, it's gonna give us 6.

117
00:08:42.221 --> 00:08:49.085
&gt;&gt; Bianca Gandolfo: We break out of this,
and we return 6.

118
00:08:54.823 --> 00:08:56.191
&gt;&gt; Bianca Gandolfo: Seems good for
a first pass.

119
00:08:59.888 --> 00:09:00.873
&gt;&gt; Bianca Gandolfo: Any bugs?

120
00:09:04.138 --> 00:09:05.782
&gt;&gt; Speaker 4: The theorem thing.

121
00:09:05.782 --> 00:09:11.669
&gt;&gt; Bianca Gandolfo: Yeah, so what do we
do when we don't have an initial value?

122
00:09:13.059 --> 00:09:17.180
&gt;&gt; Bianca Gandolfo: Because if we just
reset it, then we'd be adding 1 +1, and

123
00:09:17.180 --> 00:09:19.020
then our value would be 7.

124
00:09:19.020 --> 00:09:20.700
You know what I mean?

125
00:09:20.700 --> 00:09:23.482
So that's probably not what we wanna do.

126
00:09:26.067 --> 00:09:33.498
&gt;&gt; Bianca Gandolfo: So,
we can just say something

127
00:09:33.498 --> 00:09:39.151
like if initial then.

128
00:09:39.151 --> 00:09:45.620
Let's just do this if (initial),

129
00:09:45.620 --> 00:09:50.838
then memo = initial else memo

130
00:09:50.838 --> 00:09:58.570
= [SOUND] I think we
should do it actually in.

131
00:10:01.851 --> 00:10:04.570
&gt;&gt; Bianca Gandolfo: Think
we should do it in here.

132
00:10:04.570 --> 00:10:09.133
if (i === 0

133
00:10:09.133 --> 00:10:14.398
&amp;&amp; !initial)

134
00:10:14.398 --> 00:10:19.312
is not defined,

135
00:10:19.312 --> 00:10:25.984
then memo = List at i.

136
00:10:28.631 --> 00:10:29.789
&gt;&gt; Bianca Gandolfo: List at 0.

137
00:10:33.441 --> 00:10:36.980
&gt;&gt; Bianca Gandolfo: And
then we're gonna increment i.

138
00:10:40.258 --> 00:10:44.319
&gt;&gt; Bianca Gandolfo: Like that.

139
00:10:44.319 --> 00:10:45.436
How's that gonna turn out?

140
00:10:45.436 --> 00:10:49.248
If i is 0, and it's not,
there's no initial value.

141
00:10:52.241 --> 00:10:53.063
&gt;&gt; Bianca Gandolfo: Whoa.

142
00:10:56.055 --> 00:10:56.902
&gt;&gt; Bianca Gandolfo: Okay.

143
00:10:58.687 --> 00:10:59.850
&gt;&gt; Bianca Gandolfo: Looks a little messy.

144
00:11:01.280 --> 00:11:03.430
I think there can be a more
elegant solution here.

145
00:11:05.090 --> 00:11:07.460
&gt;&gt; Speaker 8: Memo be undefined
if there's a initial.

146
00:11:10.320 --> 00:11:10.950
&gt;&gt; Bianca Gandolfo: Yeah.

147
00:11:10.950 --> 00:11:13.933
&gt;&gt; Speaker 8: So and not undefined.

148
00:11:17.461 --> 00:11:21.084
&gt;&gt; Bianca Gandolfo: And, like that?

149
00:11:21.084 --> 00:11:22.900
&gt;&gt; Speaker 8: No, no I mean it's already.

150
00:11:22.900 --> 00:11:24.290
&gt;&gt; Bianca Gandolfo: So if this is true.

151
00:11:24.290 --> 00:11:25.050
&gt;&gt; Speaker 8: Yeah.

152
00:11:25.050 --> 00:11:28.250
&gt;&gt; Bianca Gandolfo: So n not,
yeah, yeah that's right.

153
00:11:28.250 --> 00:11:29.790
&gt;&gt; Speaker 8: Not undefined.

154
00:11:29.790 --> 00:11:35.330
&gt;&gt; Bianca Gandolfo: Yeah,
you're right and is undefined.

155
00:11:35.330 --> 00:11:39.840
&gt;&gt; Speaker 8: Awesome,
that's double negation, right?

156
00:11:39.840 --> 00:11:40.554
&gt;&gt; Bianca Gandolfo: Yeah.

157
00:11:46.686 --> 00:11:48.630
&gt;&gt; Bianca Gandolfo: [INAUDIBLE] Let's see.

158
00:11:50.040 --> 00:11:51.320
Not true is false.

159
00:11:52.630 --> 00:11:57.553
&gt;&gt; Speaker 3: You can just remove
the two double negation entirely for

160
00:11:57.553 --> 00:12:00.493
the same thing, couldn't you.

161
00:12:00.493 --> 00:12:01.441
&gt;&gt; Bianca Gandolfo: What do you mean?

162
00:12:01.441 --> 00:12:06.809
&gt;&gt; Speaker 3: Well,
isn't memo = double negated memo?

163
00:12:06.809 --> 00:12:08.728
&gt;&gt; Bianca Gandolfo: Yeah.

164
00:12:08.728 --> 00:12:10.430
&gt;&gt; Josh: Do you find this false?

165
00:12:10.430 --> 00:12:16.970
&gt;&gt; Bianca Gandolfo: No, but we want
this to be true, because of the int.

166
00:12:16.970 --> 00:12:20.543
So these both need to be true for
it to enter into this block.

167
00:12:24.637 --> 00:12:28.541
&gt;&gt; Bianca Gandolfo: Actually,
I have a better idea.

168
00:12:28.541 --> 00:12:29.582
I like this better.

169
00:12:32.904 --> 00:12:34.815
&gt;&gt; Bianca Gandolfo: Okay,
I'm happier with that.

170
00:12:37.810 --> 00:12:38.714
&gt;&gt; Bianca Gandolfo: Okay.

171
00:12:43.561 --> 00:12:44.492
&gt;&gt; Bianca Gandolfo: What do we think?

172
00:12:47.697 --> 00:12:48.570
&gt;&gt; Bianca Gandolfo: It seem reasonable?

173
00:12:50.410 --> 00:12:52.830
Probably, we wanna pass more
things into the callback.

174
00:12:55.080 --> 00:12:55.970
&gt;&gt; Josh: The original list?

175
00:12:57.000 --> 00:12:58.789
&gt;&gt; Bianca Gandolfo: Yeah and
that kind of thing, but

176
00:12:58.789 --> 00:13:00.722
this is the basic functionality.

177
00:13:04.548 --> 00:13:05.683
&gt;&gt; Bianca Gandolfo: Any questions?

178
00:13:16.219 --> 00:13:17.160
&gt;&gt; Bianca Gandolfo: Any bugs?

179
00:13:17.160 --> 00:13:20.732
I can't believe I did that
without any bugs, except for

180
00:13:20.732 --> 00:13:22.484
the one that we knew about.

181
00:13:25.267 --> 00:13:27.203
&gt;&gt; Bianca Gandolfo: So
I'm gonna trace it like we did before.

182
00:13:29.617 --> 00:13:30.566
&gt;&gt; Bianca Gandolfo: Or actually,

183
00:13:30.566 --> 00:13:34.138
how about you guys trace it
since my uvula is swollen.

184
00:13:34.138 --> 00:13:40.920
[LAUGH] All right, wait,
did you guys trace it before?

185
00:13:40.920 --> 00:13:42.850
I feel like I'm going crazy.

186
00:13:42.850 --> 00:13:44.090
You guys already traced it, right?

187
00:13:45.810 --> 00:13:50.450
Okay, well maybe I'll do it this time.

188
00:13:50.450 --> 00:13:53.540
Okay, so we have a reduce function.

189
00:13:53.540 --> 00:13:56.590
We're calling it with two arguments,
or three arguments, really.

190
00:13:57.660 --> 00:13:58.900
We have an array.

191
00:14:00.265 --> 00:14:06.939
And we have a function, and this function
just returns the sum of two numbers.

192
00:14:09.672 --> 00:14:13.110
&gt;&gt; Bianca Gandolfo: And
then an initial value.

193
00:14:13.110 --> 00:14:18.986
So what we wanna do, is for
every value in this list,

194
00:14:18.986 --> 00:14:22.738
we wanna run this function on it.

195
00:14:22.738 --> 00:14:26.770
And we expect it to return one value.

196
00:14:26.770 --> 00:14:32.070
That value gets passed into
the function as a second argument, and

197
00:14:32.070 --> 00:14:34.700
then the next value gets
passed as the first.

198
00:14:34.700 --> 00:14:35.460
So we have the value and

199
00:14:35.460 --> 00:14:39.690
then we have the sum,
that will get passed every single time.

200
00:14:39.690 --> 00:14:42.160
In this case,
it'll be three times that we go through.

201
00:14:44.040 --> 00:14:45.670
And this is our initial value.

202
00:14:45.670 --> 00:14:48.583
This tells us what we start with.

203
00:14:48.583 --> 00:14:53.509
If we don't have an initial value,
we use the very first value in the array.

204
00:14:54.747 --> 00:14:55.890
&gt;&gt; Bianca Gandolfo: But
we'll have an initial value.

205
00:14:55.890 --> 00:14:59.020
It's a little bit easier
to conceptualize that way.

206
00:14:59.020 --> 00:15:02.298
And then we will do it without
initial value and see how that works.

207
00:15:02.298 --> 00:15:05.388
So we called it, so

208
00:15:05.388 --> 00:15:11.130
list is that array one two three.

209
00:15:11.130 --> 00:15:13.400
We have this call back function.

210
00:15:13.400 --> 00:15:16.090
A summation function, and
then initial is zero.

211
00:15:16.090 --> 00:15:18.590
So we start of memo, memo is initial.

212
00:15:18.590 --> 00:15:25.260
So that is gonna be 0, i = 0,
and uh-oh, there's a bug.

213
00:15:25.260 --> 00:15:29.431
You guys see that bug?

214
00:15:29.431 --> 00:15:31.287
If memo is 0?

215
00:15:31.287 --> 00:15:34.399
&gt;&gt; [INAUDIBLE]
&gt;&gt; Josh: It's 0.

216
00:15:34.399 --> 00:15:34.899
&gt;&gt; Bianca Gandolfo: Yeah.

217
00:15:39.749 --> 00:15:40.740
&gt;&gt; Bianca Gandolfo: JavaScript.

218
00:15:42.080 --> 00:15:42.580
Okay.

219
00:15:45.740 --> 00:15:47.440
So i zero, that's true.

220
00:15:47.440 --> 00:15:51.740
Memo is not undefined, because it's 0.

221
00:15:51.740 --> 00:15:55.010
So we skip that,
we jump into this else block.

222
00:15:55.010 --> 00:15:59.420
We're gonna call this call back
function with memo, which is 0.

223
00:15:59.420 --> 00:16:00.830
List at i.

224
00:16:00.830 --> 00:16:02.390
Which is one.

225
00:16:02.390 --> 00:16:04.180
So we're gonna call it with one and zero.

226
00:16:04.180 --> 00:16:07.930
Those are arguments, just so
we have it to look at.

227
00:16:09.170 --> 00:16:12.560
And here's a summation function.

228
00:16:12.560 --> 00:16:15.860
I can also write this longer
hand if it's easier but

229
00:16:15.860 --> 00:16:18.400
we just need to add one and zero together.

230
00:16:18.400 --> 00:16:21.990
And that's gonna return one.

231
00:16:21.990 --> 00:16:24.960
So memo is now updated to one, okay?

232
00:16:26.340 --> 00:16:29.126
And we're gonna go now to the next loop.

233
00:16:29.126 --> 00:16:34.640
So i
&gt;&gt; Bianca Gandolfo: i = 1 at this point.

234
00:16:34.640 --> 00:16:37.500
i is not 0, so
we never even go into the left side.

235
00:16:37.500 --> 00:16:41.877
Since this is false,
we'll just skip it entirely,

236
00:16:41.877 --> 00:16:45.863
go back and
then move it back in this else block.

237
00:16:45.863 --> 00:16:47.728
List is what?

238
00:16:47.728 --> 00:16:53.854
list(i) is 2, yeah.

239
00:16:53.854 --> 00:16:54.793
We're following?

240
00:16:54.793 --> 00:16:56.294
We're going too fast?
Okay.

241
00:16:56.294 --> 00:17:00.937
And then memo is 1.

242
00:17:00.937 --> 00:17:03.827
Okay, we add them together,
that gives us 3.

243
00:17:03.827 --> 00:17:07.660
And we update memo is now 3.

244
00:17:07.660 --> 00:17:12.824
Now we're gonna restart the loop,

245
00:17:12.824 --> 00:17:20.407
i is now 2 and this is false,
we're gonna run this.

246
00:17:20.407 --> 00:17:25.455
List at i
&gt;&gt; Bianca Gandolfo: Is 3,

247
00:17:25.455 --> 00:17:30.941
memo is 3, and so now we have 6 and

248
00:17:30.941 --> 00:17:34.737
we update memo with 6.

249
00:17:37.088 --> 00:17:40.340
&gt;&gt; Bianca Gandolfo: And we're gonna try
to do the loop again but it's gonna fail.

250
00:17:40.340 --> 00:17:44.612
Because 3 is not less than 3.

251
00:17:44.612 --> 00:17:45.347
Right?

252
00:17:45.347 --> 00:17:50.771
If we did that, it would still run but
we don't wanna do that.

253
00:17:50.771 --> 00:17:53.549
&gt;&gt; Bianca Gandolfo: And
since we went all through that and

254
00:17:53.549 --> 00:17:57.411
we'll return memo which
will return 6 down here.

255
00:17:59.290 --> 00:17:59.790
Okay?

256
00:18:00.990 --> 00:18:01.861
Any questions about that?

257
00:18:04.595 --> 00:18:05.095
&gt;&gt; Bianca Gandolfo: No?

258
00:18:08.292 --> 00:18:11.910
&gt;&gt; Bianca Gandolfo: It's surprisingly
simple for something so complicated.

259
00:18:11.910 --> 00:18:14.296
You know what I mean?

260
00:18:14.296 --> 00:18:17.103
All right, so now let's try
it without the initial value.

261
00:18:23.841 --> 00:18:26.774
&gt;&gt; Bianca Gandolfo: Okay,
I'll just switch it up a little bit.

262
00:18:26.774 --> 00:18:32.329
So here's our lists, 2, 3, 5.

263
00:18:32.329 --> 00:18:33.940
This is gonna be set to undefined.

264
00:18:33.940 --> 00:18:36.660
Because we haven't passed
anything to initial, right?

265
00:18:36.660 --> 00:18:37.470
So we need to put it there.

266
00:18:37.470 --> 00:18:41.266
We're gonna start i at 0.

267
00:18:41.266 --> 00:18:46.722
So i is 0.

268
00:18:46.722 --> 00:18:50.595
i is 0 and memo is undefined, so

269
00:18:50.595 --> 00:18:55.909
then we assign memo to
list at 0 which is 2.

270
00:19:00.644 --> 00:19:04.396
&gt;&gt; Bianca Gandolfo: Then we loop again,
now i is 1.

271
00:19:06.791 --> 00:19:11.393
&gt;&gt; Bianca Gandolfo: And
then we skip this, we go here.

272
00:19:11.393 --> 00:19:18.956
We're calling our call back with our
list at i which is, what was it again?

273
00:19:18.956 --> 00:19:22.639
3 + memo which is 2.

274
00:19:23.970 --> 00:19:24.470
Okay?

275
00:19:26.520 --> 00:19:30.374
Thumbs on where, you following?

276
00:19:30.374 --> 00:19:34.955
Okay, so then we assign memo,

277
00:19:34.955 --> 00:19:38.134
we update that to 5.

278
00:19:40.587 --> 00:19:42.422
&gt;&gt; Bianca Gandolfo: Okay?
Now i is 2.

279
00:19:43.760 --> 00:19:50.240
We skip this one, we go here and
we want to do 5, right?

280
00:19:50.240 --> 00:19:54.855
i list at 2 is 5

281
00:19:54.855 --> 00:19:59.118
+ 5 = 11.

282
00:20:02.815 --> 00:20:06.669
&gt;&gt; Bianca Gandolfo: = 11.

283
00:20:06.669 --> 00:20:10.599
5 + 5 = 11.

284
00:20:10.599 --> 00:20:11.733
&gt;&gt; Speaker 9: What?

285
00:20:11.733 --> 00:20:15.065
&gt;&gt; Bianca Gandolfo: 5 + 5 = 11.

286
00:20:15.065 --> 00:20:17.456
Not true, 10.

287
00:20:17.456 --> 00:20:19.486
I was just seeing if you
guys are paying attention.

288
00:20:19.486 --> 00:20:24.670
And you weren't, caught you,

289
00:20:24.670 --> 00:20:28.510
so we're done with this

290
00:20:28.510 --> 00:20:33.504
loop cuz 3 is not less than 3.

291
00:20:33.504 --> 00:20:34.960
And then we return 10.

292
00:20:39.182 --> 00:20:40.649
&gt;&gt; Bianca Gandolfo: Any questions?

293
00:20:44.437 --> 00:20:45.331
&gt;&gt; Bianca Gandolfo: No?

294
00:20:47.540 --> 00:20:48.397
&gt;&gt; Bianca Gandolfo: Go away.

295
00:20:48.397 --> 00:20:51.154
So that is reduce.

296
00:20:57.423 --> 00:20:59.940
&gt;&gt; Bianca Gandolfo: Did anyone
get it running on their own?

297
00:20:59.940 --> 00:21:00.620
&gt;&gt; Speaker 8: Yeah.

298
00:21:00.620 --> 00:21:02.050
&gt;&gt; Bianca Gandolfo: You just got it to go?

299
00:21:02.050 --> 00:21:03.310
Nice.
&gt;&gt; Speaker 8: I didn't in

300
00:21:03.310 --> 00:21:06.520
that initial condition though so
it was kind of good.

301
00:21:06.520 --> 00:21:07.770
&gt;&gt; Bianca Gandolfo: Yeah, that's okay.

302
00:21:07.770 --> 00:21:09.120
All right.

