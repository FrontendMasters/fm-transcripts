WEBVTT

1
00:00:00.220 --> 00:00:05.722
So our next one says an inner function can
access both its local scope variables and

2
00:00:05.722 --> 00:00:08.194
variables in its containing scope,

3
00:00:08.194 --> 00:00:11.480
providing the variables
have different names.

4
00:00:11.480 --> 00:00:14.729
Okay, where did we leave off?

5
00:00:14.729 --> 00:00:18.007
Who's the next willing volunteer?

6
00:00:18.007 --> 00:00:19.034
Who signed up?

7
00:00:19.034 --> 00:00:21.797
&gt;&gt; I remember close to [INAUDIBLE].

8
00:00:21.797 --> 00:00:23.653
&gt;&gt; Yeah.

9
00:00:23.653 --> 00:00:25.147
&gt;&gt; I mean, maybe it was me.

10
00:00:25.147 --> 00:00:27.524
&gt;&gt; Okay.

11
00:00:27.524 --> 00:00:31.130
&gt;&gt; So
we're setting our name variable to outer.

12
00:00:31.130 --> 00:00:37.840
&gt;&gt; Yep, and
then what happens next, Michael?

13
00:00:37.840 --> 00:00:41.760
&gt;&gt; We are creating a variable fn,
setting it equal to a function.

14
00:00:41.760 --> 00:00:46.786
&gt;&gt; Yep, and then Aisha.

15
00:00:46.786 --> 00:00:48.419
&gt;&gt; Function is invoked.

16
00:00:48.419 --> 00:00:50.025
&gt;&gt; We invoke the function.

17
00:00:50.025 --> 00:00:54.934
We hop back up into the body of
the function, what happens next?

18
00:00:54.934 --> 00:01:02.030
&gt;&gt; We enter the body array,
saying that innerName is equal to inner.

19
00:01:02.030 --> 00:01:08.700
&gt;&gt; Yep, so
we set innerName to the string inner.

20
00:01:08.700 --> 00:01:11.377
And then Josh what happens next?

21
00:01:11.377 --> 00:01:17.719
&gt;&gt; Set ACTUAL to innerName plus outerName,
inner name is inside this function so

22
00:01:17.719 --> 00:01:23.308
we can set that outer name is parent
scope, so we can set that as well.

23
00:01:23.308 --> 00:01:27.910
&gt;&gt; Yep, we have access to both of those,
so no errors.

24
00:01:27.910 --> 00:01:30.068
Jenny, what do you think it'll say?

25
00:01:30.068 --> 00:01:33.220
&gt;&gt; It should say both of them,
inner and outer.

26
00:01:33.220 --> 00:01:34.227
&gt;&gt; Like that.

27
00:01:34.227 --> 00:01:34.800
&gt;&gt; Yeah.

28
00:01:34.800 --> 00:01:41.204
&gt;&gt; Inner or outer, but
it says, [LAUGH] cool.

29
00:01:41.204 --> 00:01:43.017
All right, any questions about that?

30
00:01:45.209 --> 00:01:47.665
It seems reasonable.

31
00:01:47.665 --> 00:01:48.264
Cool.

32
00:01:48.264 --> 00:01:51.509
So the next one is,
between calls to an inner function,

33
00:01:51.509 --> 00:01:55.460
that inner function retains access
to a variable in an outer scope.

34
00:01:55.460 --> 00:01:59.786
Modifying those variables has a lasting
effect between calls to the inner

35
00:01:59.786 --> 00:02:00.490
function.

36
00:02:00.490 --> 00:02:04.020
So this is similar to what
we were doing before,

37
00:02:04.020 --> 00:02:09.496
except when we were initializing
the function twice, in the function and

38
00:02:09.496 --> 00:02:14.736
the numbers were resetting and
the initial values were being erased.

39
00:02:14.736 --> 00:02:16.219
This is similar to that.

40
00:02:16.219 --> 00:02:19.705
This is the solution to that problem.

41
00:02:21.081 --> 00:02:22.089
Bryan.

42
00:02:22.089 --> 00:02:30.020
&gt;&gt; So [COUGH] outerCounter is declared and
assigned 10.

43
00:02:30.020 --> 00:02:35.290
&gt;&gt; Yeah, so we just initialize
this value at 10, great.

44
00:02:35.290 --> 00:02:37.555
And then Dan?

45
00:02:37.555 --> 00:02:43.120
&gt;&gt; Declaring functional variable,
assigning it function.

46
00:02:43.120 --> 00:02:48.430
&gt;&gt; Yep, and then we call the function,
get to this function body.

47
00:02:48.430 --> 00:02:52.167
&gt;&gt; Sure, within the function body,
we take outerCounter and

48
00:02:52.167 --> 00:02:55.617
increment its value, so
outerCounter becomes 11.

49
00:02:55.617 --> 00:03:01.075
And then we sign ACTUAL,
the value of outerCounter,

50
00:03:01.075 --> 00:03:04.360
so ACTUAL becomes 11 as well.

51
00:03:04.360 --> 00:03:07.430
&gt;&gt; All right, awesome.

52
00:03:07.430 --> 00:03:10.108
So just to recap, call the function,

53
00:03:10.108 --> 00:03:14.473
we have access to outerCounter
cuz it's in our parent scope.

54
00:03:14.473 --> 00:03:16.700
The value is 10, we're adding it to 1, and

55
00:03:16.700 --> 00:03:20.600
then we are reassigning it to outerCounter
again that lives in the parent scope.

56
00:03:20.600 --> 00:03:23.555
We're setting ACTUAL to outerCounter.

57
00:03:23.555 --> 00:03:26.180
And so we think ACTUAL will equal 11.

58
00:03:26.180 --> 00:03:30.430
Next thing that happens is this
function gets invoked again.

59
00:03:30.430 --> 00:03:34.552
So we hop into this body of the function,
just like we mentioned before,

60
00:03:34.552 --> 00:03:38.220
everything in here gets reinitialized for
the very first time.

61
00:03:38.220 --> 00:03:42.366
However, we still retain
access to our outer scope.

62
00:03:42.366 --> 00:03:45.715
This is the same scope, okay?

63
00:03:45.715 --> 00:03:48.030
Cuz this function was called once.

64
00:03:48.030 --> 00:03:51.360
So we have one parent function scope.

65
00:03:51.360 --> 00:03:53.100
We called this function the first time.

66
00:03:53.100 --> 00:03:56.410
So we created that scope, it ran through,
and then it gets thrown away.

67
00:03:56.410 --> 00:03:59.037
Once it's done, it gets thrown away.

68
00:03:59.037 --> 00:04:06.061
And then we call it again, and
we created another scope, okay?

69
00:04:06.061 --> 00:04:09.820
So in this process we've
gone through three scopes,

70
00:04:09.820 --> 00:04:12.749
if we don't count what's going on here.

71
00:04:12.749 --> 00:04:18.230
So we have these parent scope that
was created, we run the test,

72
00:04:18.230 --> 00:04:23.622
and then two scopes from these
two function calls here, okay?

73
00:04:23.622 --> 00:04:25.275
Everyone following that?

74
00:04:25.275 --> 00:04:30.860
Okay, so who was next actually?

75
00:04:30.860 --> 00:04:33.106
Kevin?

76
00:04:33.106 --> 00:04:34.401
You always get to be on the tricky one.

77
00:04:38.039 --> 00:04:42.568
&gt;&gt; Incremented outerCounter was
preserved cuz it was outside?

78
00:04:42.568 --> 00:04:49.155
So, it's 11 +1, so we get to 12,
so actually equals 12.

79
00:04:49.155 --> 00:04:53.878
&gt;&gt; Yep, so
because we incremented outerCounter in

80
00:04:53.878 --> 00:04:58.955
the parent scope and
the previous call, it is 12.

81
00:04:58.955 --> 00:05:02.138
It's 11, we increment by 1,
ACTUAL is now 12.

82
00:05:07.921 --> 00:05:08.878
Cool, any questions?

83
00:05:08.878 --> 00:05:10.073
Yeah.

84
00:05:10.073 --> 00:05:18.124
&gt;&gt; So what if online 153 had
the word var before outerCounter?

85
00:05:21.509 --> 00:05:26.859
Cuz my understanding is if you
like using var then it's kind

86
00:05:26.859 --> 00:05:32.958
of reinitializing it and
that would over write the outer scope one.

87
00:05:32.958 --> 00:05:35.750
But that pi still wouldn't change it here,
right,

88
00:05:35.750 --> 00:05:40.319
because it would still be adding, it would
be setting 12 to that new outerCounter,

89
00:05:40.319 --> 00:05:42.298
and then that would reset to ACTUAL.

90
00:05:42.298 --> 00:05:43.147
Does that make sense?

91
00:05:43.147 --> 00:05:47.960
&gt;&gt; So the question is when we put var
here does that change what happens?

92
00:05:47.960 --> 00:05:49.491
&gt;&gt; Right.

93
00:05:49.491 --> 00:05:50.497
&gt;&gt; Let's try it.

94
00:05:51.982 --> 00:05:53.564
Which one was that one?

95
00:05:53.564 --> 00:05:55.295
Between calls.

96
00:05:55.295 --> 00:05:56.577
This one.

97
00:06:00.211 --> 00:06:02.588
World's tiniest font, okay.

98
00:06:06.213 --> 00:06:08.845
Yeah, that's failing to save.

99
00:06:08.845 --> 00:06:10.220
&gt;&gt; So that did break something?

100
00:06:10.220 --> 00:06:12.743
&gt;&gt; Yeah, so it did change it.

101
00:06:12.743 --> 00:06:15.748
Let's erase it, make sure you-
&gt;&gt; Do you know why it changed it?

102
00:06:15.748 --> 00:06:20.471
&gt;&gt; It's because the variable
it's initializing

103
00:06:20.471 --> 00:06:23.777
another variable in that scope,

104
00:06:23.777 --> 00:06:28.390
instead of referencing
the parent variable.

105
00:06:28.390 --> 00:06:30.033
&gt;&gt; So JavaScript doesn't throw errors or

106
00:06:30.033 --> 00:06:33.628
anything when you try to reinitialize a
variable that's already been initialized?

107
00:06:33.628 --> 00:06:37.933
&gt;&gt; It does with let.

108
00:06:37.933 --> 00:06:40.063
I can use let and const obviously.

109
00:06:40.063 --> 00:06:42.233
&gt;&gt; So let will throw an error there.

110
00:06:42.233 --> 00:06:42.733
&gt;&gt; I think so, let's try.

111
00:06:44.940 --> 00:06:50.208
Yeah.

112
00:06:53.647 --> 00:06:55.089
&gt;&gt; What was the error it threw
when you call var before?

113
00:06:55.089 --> 00:06:58.400
&gt;&gt; It says outerCounter is not defined.

114
00:06:58.400 --> 00:07:01.342
&gt;&gt; When you call them var though?

115
00:07:01.342 --> 00:07:08.093
&gt;&gt; When I called it var it just,
so it will pass.

116
00:07:08.093 --> 00:07:12.050
If you do this, okay?

117
00:07:12.050 --> 00:07:17.517
var, so outerCounter equals outerCounter.

118
00:07:17.517 --> 00:07:18.871
I wonder what it is.

119
00:07:18.871 --> 00:07:21.531
&gt;&gt; Should pass the first but
not the second?

120
00:07:21.531 --> 00:07:23.992
&gt;&gt; So it goes through and
refer to itself or anything?

121
00:07:23.992 --> 00:07:27.251
&gt;&gt; Let's put a little debugger here and
check it out.

122
00:07:34.541 --> 00:07:41.822
Okay, so because this is undefined and
you're adding.

123
00:07:41.822 --> 00:07:49.313
So if you add 1 plus undefined,
Gives us no number, yeah.

124
00:07:54.141 --> 00:07:57.146
Cool, beautiful.

125
00:08:01.634 --> 00:08:02.250
All right.

126
00:08:03.520 --> 00:08:08.221
Next one is the rule about
retaining access to variables from

127
00:08:08.221 --> 00:08:12.645
an outer scope still applies
even after the outer scope,

128
00:08:12.645 --> 00:08:17.916
the outer function call that created
the outer scope has returned.

129
00:08:17.916 --> 00:08:19.500
I'm gonna read that one more time.

130
00:08:19.500 --> 00:08:23.527
The rule about retaining access to
variables from the outer scope still

131
00:08:23.527 --> 00:08:24.138
applies.

132
00:08:24.138 --> 00:08:28.004
Even after the outer function call
that created the outer scope has

133
00:08:28.004 --> 00:08:29.120
returned, okay?

134
00:08:33.915 --> 00:08:35.130
I'm just like what?

135
00:08:35.130 --> 00:08:39.028
[LAUGH] Well, let's see it in action.

136
00:08:39.028 --> 00:08:41.700
Where did we leave off?

137
00:08:41.700 --> 00:08:43.440
&gt;&gt; Was it Chris?

138
00:08:43.440 --> 00:08:47.987
&gt;&gt; Sure, the first thing
that will happen is defining

139
00:08:47.987 --> 00:08:52.120
outer function which
declares the function.

140
00:08:52.120 --> 00:08:57.520
&gt;&gt; Yeah, so the very first thing
is we create this huge function.

141
00:08:57.520 --> 00:09:00.150
And then what's the next
thing that happens?

142
00:09:00.150 --> 00:09:04.505
&gt;&gt; Then we declare
a variable outer function.

143
00:09:04.505 --> 00:09:08.211
&gt;&gt; Where, what line?

144
00:09:08.211 --> 00:09:10.288
&gt;&gt; 164?

145
00:09:10.288 --> 00:09:11.502
&gt;&gt; We just did that.

146
00:09:11.502 --> 00:09:14.430
&gt;&gt; Okay.
&gt;&gt; Yeah.

147
00:09:14.430 --> 00:09:16.569
&gt;&gt; Hold on.

148
00:09:16.569 --> 00:09:22.640
And then we set counter in outer scope to?

149
00:09:22.640 --> 00:09:25.760
&gt;&gt; Well, this function actually
hasn't been called yet.

150
00:09:25.760 --> 00:09:26.451
&gt;&gt; Yeah.

151
00:09:26.451 --> 00:09:27.885
Do you see it being called anywhere?

152
00:09:27.885 --> 00:09:28.484
&gt;&gt; No.

153
00:09:28.484 --> 00:09:30.590
&gt;&gt; Yeah.

154
00:09:30.590 --> 00:09:35.898
But I like your enthusiasm to go above and
beyond the rules and JavaScript.

155
00:09:35.898 --> 00:09:40.249
[LAUGH]
&gt;&gt; Also then, so

156
00:09:40.249 --> 00:09:43.840
then it just runs in are incrementing.

157
00:09:43.840 --> 00:09:49.430
&gt;&gt; No, so
this whole function here it's a big one.

158
00:09:49.430 --> 00:09:50.820
Yeah, you see.

159
00:09:50.820 --> 00:09:55.390
I try to have this like rainbow thing so
you can, it's really colors.

160
00:09:55.390 --> 00:09:59.170
So, you can see if they match.

161
00:09:59.170 --> 00:10:04.425
So this is green, so all of
the yellow ones are inside the green.

162
00:10:04.425 --> 00:10:08.209
&gt;&gt; I think it gets really
washed out on there.

163
00:10:08.209 --> 00:10:10.665
&gt;&gt; Yeah I try
&gt;&gt; You can see it now though yes actually,

164
00:10:10.665 --> 00:10:15.301
&gt;&gt; Yeah,it's a nice plugin for

165
00:10:15.301 --> 00:10:19.569
VS code, rainbow indent.

166
00:10:19.569 --> 00:10:21.724
Okay, so this is a big function.

167
00:10:23.850 --> 00:10:26.100
So obviously what happens next then.

168
00:10:26.100 --> 00:10:30.325
&gt;&gt; We run expect
&gt;&gt; If we run this as expect,

169
00:10:30.325 --> 00:10:36.790
we expect window.retained inner
function to equal undefined.

170
00:10:36.790 --> 00:10:40.360
What do we think?

171
00:10:40.360 --> 00:10:47.868
So this is referencing this I
guess What do we think about that?

172
00:10:47.868 --> 00:10:49.404
Seems reasonable.

173
00:10:49.404 --> 00:10:51.233
&gt;&gt; It should be undefined.

174
00:10:51.233 --> 00:10:51.960
&gt;&gt; It should be undefined, right?

175
00:10:51.960 --> 00:10:53.890
Because we haven't run
the body of this function.

176
00:10:53.890 --> 00:10:57.060
Nothing here has done any work.

177
00:10:57.060 --> 00:11:01.650
And so you can't have a reward such
as a value assigned when there

178
00:11:01.650 --> 00:11:03.690
hasn't been any work done.

179
00:11:03.690 --> 00:11:05.042
Seems fair, okay, so

180
00:11:05.042 --> 00:11:09.758
then we're gonna run the outer function So
where did we leave off?

181
00:11:09.758 --> 00:11:11.940
Jamie was to you.

182
00:11:11.940 --> 00:11:14.230
So we're gonna run the outer function.

183
00:11:14.230 --> 00:11:16.760
So we're gonna come back up here.

184
00:11:16.760 --> 00:11:22.075
&gt;&gt; Yep, so then we're setting variable
counter inner and outer scope to equal 10.

185
00:11:27.724 --> 00:11:28.854
&gt;&gt; Then Mike, what happens next?

186
00:11:28.854 --> 00:11:33.759
&gt;&gt; Then we set a new variable
innerIncrementingFn declaring

187
00:11:33.759 --> 00:11:37.872
that function and
then right after invoking it.

188
00:11:37.872 --> 00:11:41.009
&gt;&gt; Awesome, Aisha?

189
00:11:45.948 --> 00:11:51.839
&gt;&gt; We go to the declaration and
&gt;&gt; Run the function right.

190
00:11:51.839 --> 00:11:52.926
&gt;&gt; Run the function.

191
00:11:52.926 --> 00:11:54.452
&gt;&gt; Yep.

192
00:11:54.452 --> 00:11:59.910
So you run the function out to mirror
what is gonna happen in this function.

193
00:11:59.910 --> 00:12:01.924
This is really similar to the last.

194
00:12:01.924 --> 00:12:04.646
&gt;&gt; Inside of the body.

195
00:12:04.646 --> 00:12:09.500
Then we doing CounterInOuterScope,

196
00:12:09.500 --> 00:12:14.390
InOuterScope plus 1
&gt;&gt; Equals 11 actual it's 11.

197
00:12:14.390 --> 00:12:21.922
&gt;&gt; Yeah, set actual to 11.

198
00:12:21.922 --> 00:12:27.362
Who remembers what happens
next is the same example.

199
00:12:27.362 --> 00:12:31.132
What is this actual gonna equal?

200
00:12:31.132 --> 00:12:32.302
&gt;&gt; 12.
&gt;&gt; 12, okay,

201
00:12:32.302 --> 00:12:38.411
then we do something a little funky Josh,
you know what we're doing here?

202
00:12:41.483 --> 00:12:47.090
&gt;&gt; You're setting property on the window,
you're incrementing function.

203
00:12:47.090 --> 00:12:52.303
&gt;&gt; Yeah, so we're click creating a global
variable, a global property on the window

204
00:12:52.303 --> 00:12:57.669
object and assigning to innerIncrementing
function, which is this function here.

205
00:12:59.920 --> 00:13:03.330
Cool, so then we exit.

206
00:13:03.330 --> 00:13:07.470
We find ourselves here.

207
00:13:07.470 --> 00:13:11.432
Where we say
expect{window.retainedInnerFn} to.be.a

208
00:13:11.432 --> 00:13:12.196
function.

209
00:13:17.160 --> 00:13:21.921
&gt;&gt; Line 178 inner incrementing
function doesn't have to have

210
00:13:21.921 --> 00:13:24.445
the parentheses right after or?

211
00:13:24.445 --> 00:13:27.450
&gt;&gt; If not necessarily, that's if
you're gonna invoke the function.

212
00:13:27.450 --> 00:13:29.574
In this case, we're passing a function.

213
00:13:29.574 --> 00:13:30.987
Well, in this case,

214
00:13:30.987 --> 00:13:35.540
we're assigning the function to
basically it's like saying this.

215
00:13:35.540 --> 00:13:41.560
Oops, and saying like saying,
you're creating a variable,

216
00:13:41.560 --> 00:13:44.637
and then you're assigning it.

217
00:13:44.637 --> 00:13:45.137
Like this.

218
00:13:48.630 --> 00:13:50.250
That's essentially what it's doing.

219
00:13:50.250 --> 00:13:50.996
See that?

220
00:13:58.750 --> 00:13:59.250
Okay.

221
00:14:01.880 --> 00:14:04.722
&gt;&gt; So if we were to put on the
parentheses, that would be running it in

222
00:14:04.722 --> 00:14:08.360
the window.retainedInner function,
it would take the result of that function.

223
00:14:08.360 --> 00:14:11.464
&gt;&gt; Yeah so if we ran it,
it would be whatever this returns,

224
00:14:11.464 --> 00:14:13.390
which doesn't return anything.

225
00:14:13.390 --> 00:14:18.480
It would just be equal to undefined and
that's not helping us.

226
00:14:18.480 --> 00:14:23.212
So we really just wanna return
that function because we wanna

227
00:14:23.212 --> 00:14:25.450
have access to it globally.

228
00:14:25.450 --> 00:14:30.621
Okay so
that we expect it to be a function.

229
00:14:30.621 --> 00:14:32.733
Yes, I believe that.

230
00:14:32.733 --> 00:14:38.205
Now we're calling it like you were
kind of, talking about before,

231
00:14:38.205 --> 00:14:42.333
but we're calling it out
here in the parent scope.

232
00:14:42.333 --> 00:14:47.833
And we have access to it because,
it's on the window object

233
00:14:47.833 --> 00:14:54.769
which is global in the browser land
which is where I reside in browser land.

234
00:14:54.769 --> 00:14:59.220
&gt;&gt; The chat is asking about the indent,
the dots in the indents that a plugin or

235
00:14:59.220 --> 00:15:01.140
something you can do in VS Code?

236
00:15:01.140 --> 00:15:08.995
&gt;&gt; Yeah, I think it's just a setting where
it shows it the dots mean it's a space and

237
00:15:08.995 --> 00:15:14.900
then if it has a like a little arrow,
it shows that it's tab.

238
00:15:14.900 --> 00:15:18.668
But I kind of download just
every plugin for VS Code and

239
00:15:18.668 --> 00:15:22.543
so I have a bunch of them I
don't know which ones which.

240
00:15:22.543 --> 00:15:27.511
And I don't recommend doing that because
my VS Code has been freezing lately, and

241
00:15:27.511 --> 00:15:30.032
I'm not sure which plugin is killing it.

242
00:15:30.032 --> 00:15:32.441
So, but I like the rainbow one,

243
00:15:32.441 --> 00:15:36.200
the rainbow one might even
be including the dots.

244
00:15:36.200 --> 00:15:40.776
So now we're calling return inner
function, what happens next?

245
00:15:45.917 --> 00:15:48.940
So what happens after you
call a function every time?

246
00:15:48.940 --> 00:15:50.770
&gt;&gt; Well, it's gonna have to
go through the body of it.

247
00:15:50.770 --> 00:15:56.880
&gt;&gt; Yeah, so we have to go find the body
of that function, which is here, right.

248
00:15:56.880 --> 00:16:02.660
Because we assigned it, but
really it's here, okay.

249
00:16:02.660 --> 00:16:03.870
So what happens.

250
00:16:14.682 --> 00:16:18.320
I don't know if it returned the 12 or
if it still set it to 10.

251
00:16:18.320 --> 00:16:19.050
&gt;&gt; Yeah.

252
00:16:19.050 --> 00:16:26.910
&gt;&gt; I think it's set at 10 because it went
through a function that called again.

253
00:16:28.200 --> 00:16:29.410
&gt;&gt; I can see where you're going with that.

254
00:16:29.410 --> 00:16:33.285
But actually what happens is,
that would only reset if we called

255
00:16:33.285 --> 00:16:37.830
outer function again, and created
a whole new scope for the parent scope.

256
00:16:37.830 --> 00:16:40.580
But we're actually only calling
this body of the function.

257
00:16:40.580 --> 00:16:44.598
So, it's only recreating this scope or

258
00:16:44.598 --> 00:16:50.153
it's like initializing a new
execution context here,

259
00:16:50.153 --> 00:16:53.590
but it keeps the same one above it.

260
00:16:54.870 --> 00:17:02.140
The only way we can reset is by calling
this and then it would reset this too.

261
00:17:02.140 --> 00:17:04.320
Oops, that makes sense?

262
00:17:05.970 --> 00:17:09.755
So with that, what do you think
counter and outer scope is?

263
00:17:15.174 --> 00:17:17.750
&gt;&gt; My goodness,
it's still either [LAUGH] Is it?

264
00:17:17.750 --> 00:17:21.230
&gt;&gt; Yeah, it's 12 and
then it will be 13 when you add one.

265
00:17:21.230 --> 00:17:21.850
&gt;&gt; Yeah, okay.

266
00:17:22.930 --> 00:17:25.430
&gt;&gt; So actual now equals 13.

267
00:17:25.430 --> 00:17:31.146
And the interesting thing is, well,
the thing to keep in mind is,

268
00:17:31.146 --> 00:17:35.140
okay, we're running this function in here.

269
00:17:35.140 --> 00:17:36.140
Where does it exit to?

270
00:17:39.400 --> 00:17:40.088
Ryan?

271
00:17:43.686 --> 00:17:48.110
&gt;&gt; It should exit into the inner
body of outer function, no?

272
00:17:49.530 --> 00:17:51.000
&gt;&gt; It doesn't do that.

273
00:17:51.000 --> 00:17:53.550
&gt;&gt; Then it would exit back
to where it was called for.

274
00:17:53.550 --> 00:17:57.637
&gt;&gt; Yeah, exactly, so some people
assume since we're executing here,

275
00:17:57.637 --> 00:18:01.420
the next thing is that it
would go run this again.

276
00:18:01.420 --> 00:18:05.448
But that's not the case, actually,
so it's gonna run this and

277
00:18:05.448 --> 00:18:10.010
then it's gonna hop back, here where
we called it and run the next line.

278
00:18:13.620 --> 00:18:15.220
And what do we think actual is?

279
00:18:23.849 --> 00:18:24.949
Any questions about this one?

280
00:18:27.940 --> 00:18:33.029
&gt;&gt; But I thought since we weren't
returning anything inside the retained

281
00:18:33.029 --> 00:18:37.439
inner function, like after
during actual equals counter and

282
00:18:37.439 --> 00:18:40.258
outer scope, we weren't returning.

283
00:18:40.258 --> 00:18:41.179
&gt;&gt; Yeah.

284
00:18:41.179 --> 00:18:42.710
&gt;&gt; But you had mentioned
something about that earlier.

285
00:18:42.710 --> 00:18:44.100
&gt;&gt; Yeah.
&gt;&gt; Returning anything.

286
00:18:44.100 --> 00:18:45.240
&gt;&gt; It's not returning anything.

287
00:18:45.240 --> 00:18:48.070
So when you call it here, this window.

288
00:18:49.200 --> 00:18:52.870
So, when you execute the function,
it would return here.

289
00:18:52.870 --> 00:18:56.625
If we were saying like,
our result equals that,

290
00:18:56.625 --> 00:19:00.480
then that's what we care
about the return value.

291
00:19:00.480 --> 00:19:04.787
But what happen in the body of the
function is that we assigned actual again

292
00:19:04.787 --> 00:19:06.820
to an updated value.

293
00:19:06.820 --> 00:19:09.155
And we're referencing actual, yeah.

294
00:19:09.155 --> 00:19:11.090
Yeah, that's a good question.

295
00:19:13.880 --> 00:19:14.430
Anyone else?

296
00:19:17.260 --> 00:19:19.070
That sounds a little bit of a mind bender.

297
00:19:21.910 --> 00:19:25.771
Do people feel like their minds being
bent a little bit or they're like,

298
00:19:25.771 --> 00:19:28.510
I'm used to JavaScript by now and
this is not news.

299
00:19:29.650 --> 00:19:33.589
So Vent-
&gt;&gt; Interesting that the function still has

300
00:19:33.589 --> 00:19:36.850
context for the outer scope,
what do you call it?

301
00:19:36.850 --> 00:19:37.370
&gt;&gt; Yeah.

302
00:19:37.370 --> 00:19:39.079
&gt;&gt; Outside of the-
&gt;&gt; Yeah,

303
00:19:39.079 --> 00:19:42.760
looks like a little magic
tunnel into another function.

304
00:19:44.470 --> 00:19:46.520
&gt;&gt; So, you have a question?

305
00:19:46.520 --> 00:19:49.110
&gt;&gt; You were gonna cover a let for
the chat?

306
00:19:49.110 --> 00:19:54.611
&gt;&gt; Yes, so the appropriate time
to use let is when you want

307
00:19:54.611 --> 00:20:02.020
to scope your variable inside of a block,
that's not a function.

308
00:20:02.020 --> 00:20:08.490
However, a lot of people just use let and
const all the time, because it's ES6.

309
00:20:08.490 --> 00:20:13.400
And they believe that that's
the right thing to do.

310
00:20:16.650 --> 00:20:23.130
I think as long as you know
how your code runs, it's fine.

311
00:20:23.130 --> 00:20:27.187
Var does do some funny
things with hoisting,

312
00:20:27.187 --> 00:20:32.313
which means that when you
declare a variable somewhere,

313
00:20:32.313 --> 00:20:37.850
it gets hoisted to the top of
its local scope as undefined.

314
00:20:37.850 --> 00:20:41.580
So for example, and
this is why people don't like Var.

315
00:20:41.580 --> 00:20:46.605
So people who are like,
like so if for example,

316
00:20:46.605 --> 00:20:51.520
console that logged this
it would be undefined.

317
00:20:51.520 --> 00:20:54.320
It wouldn't throw an error.

318
00:20:56.100 --> 00:21:00.839
Typically if you're
referencing a variable like if

319
00:21:00.839 --> 00:21:04.830
this wasn't here, it will throw an error.

320
00:21:06.420 --> 00:21:07.980
So we call this hoisting.

321
00:21:09.550 --> 00:21:15.552
And if something like that happens when
your code is being like compiled and

322
00:21:15.552 --> 00:21:21.188
optimized in the back, it will hoist
all of your variables to the top.

323
00:21:21.188 --> 00:21:25.145
It'll all be set to undefined and
that's why it's recommended that if you're

324
00:21:25.145 --> 00:21:27.508
declaring variables in
the body of a function,

325
00:21:27.508 --> 00:21:31.186
just put all of them at the top because
that's what it's gonna do anyway.

326
00:21:31.186 --> 00:21:36.208
And it minimizes any changes
anything happening that you

327
00:21:36.208 --> 00:21:42.180
wouldn't expect with the let keyword
that is supposed to fix them.

328
00:21:44.320 --> 00:21:48.470
But, I pretty much still use Var work.

329
00:21:48.470 --> 00:21:52.510
For the most part,
I'm trying to get past it and

330
00:21:52.510 --> 00:21:58.166
move on to embrace the ES6 stuff more but
like I was saying before,

331
00:21:58.166 --> 00:22:02.928
pretty much at this point,
I write all my stuff in ES5.

332
00:22:02.928 --> 00:22:07.596
And then I rewrite it in ES6, just
because I'm just used to writing ES5, and

333
00:22:07.596 --> 00:22:09.810
I'm just forcing myself to do ES6.

334
00:22:09.810 --> 00:22:13.022
But it is really important to know and

335
00:22:13.022 --> 00:22:18.000
it's the new JavaScript and
I have to just get used to it.

336
00:22:18.000 --> 00:22:19.660
You know what I mean?

337
00:22:20.960 --> 00:22:22.760
That's where I'm at at least.

338
00:22:22.760 --> 00:22:25.965
Take a look at all of the rules that
we just went through for Scope.

339
00:22:27.428 --> 00:22:28.640
Can you guys read all this?

340
00:22:30.190 --> 00:22:30.730
So big enough?

341
00:22:32.470 --> 00:22:35.716
Okay, so
let's take a five minute break and

342
00:22:35.716 --> 00:22:40.910
discuss with your little group,
we're like in groups and 2s, 3s.

343
00:22:42.680 --> 00:22:46.705
What rule was most interesting or

344
00:22:46.705 --> 00:22:51.166
surprising to you in this exercise?

345
00:22:51.166 --> 00:22:54.610
Or what will you take away?

