WEBVTT

1
00:00:00.170 --> 00:00:01.507
&gt;&gt; Bianca Gandolfo: So our next one says,

2
00:00:01.507 --> 00:00:06.130
an inner function can access both its
local scope variables and variables in its

3
00:00:06.130 --> 00:00:09.800
containing scope, providing
the variables have different names.

4
00:00:11.940 --> 00:00:14.789
Okay, where did we leave off?

5
00:00:14.789 --> 00:00:19.103
Who's the next willing
volunteer who signed up?

6
00:00:19.103 --> 00:00:19.884
&gt;&gt; Speaker 2: I don't remember.

7
00:00:19.884 --> 00:00:21.889
We're close to me.

8
00:00:21.889 --> 00:00:23.751
&gt;&gt; Bianca Gandolfo: Yeah.

9
00:00:23.751 --> 00:00:24.926
&gt;&gt; Speaker 2: I think maybe it was me.

10
00:00:24.926 --> 00:00:27.263
&gt;&gt; Bianca Gandolfo: Okay.

11
00:00:27.263 --> 00:00:31.359
&gt;&gt; Speaker 2: Okay, so
we're setting outerName variable to outer.

12
00:00:31.359 --> 00:00:36.673
&gt;&gt; Bianca Gandolfo: Yep, and
then what happens next, Michael?

13
00:00:36.673 --> 00:00:42.004
&gt;&gt; Michael: We create a variable fn and
set it equal to a function.

14
00:00:42.004 --> 00:00:46.050
&gt;&gt; Bianca Gandolfo: Yep, and then Aisha.

15
00:00:46.050 --> 00:00:48.410
&gt;&gt; Aisha: The function is invoked.

16
00:00:48.410 --> 00:00:50.270
&gt;&gt; Bianca Gandolfo: We
invoke the function,

17
00:00:50.270 --> 00:00:52.480
we hop back up into
the body of the function.

18
00:00:52.480 --> 00:00:54.898
What happens next?

19
00:00:54.898 --> 00:01:02.269
&gt;&gt; Speaker 5: We end at the body and
we say that innerName is equal to inner.

20
00:01:02.269 --> 00:01:07.970
&gt;&gt; Bianca Gandolfo: Yep, so
we set innerName to the string inner.

21
00:01:09.160 --> 00:01:11.608
And then Josh, what happens next?

22
00:01:11.608 --> 00:01:16.551
&gt;&gt; Josh: You set ACTUAL
to innerName + outerName.

23
00:01:16.551 --> 00:01:18.925
innerName is inside this function,
so we can set that.

24
00:01:18.925 --> 00:01:24.103
And outerName is in parent scope,
so we can send that as well.

25
00:01:24.103 --> 00:01:28.130
&gt;&gt; Bianca Gandolfo: Yep, we have
access to both of those, so no errors.

26
00:01:28.130 --> 00:01:30.510
Dunie, what do you think it will say?

27
00:01:30.510 --> 00:01:33.680
&gt;&gt; Jenny: It should say both of them,
inner and outer.

28
00:01:33.680 --> 00:01:34.320
&gt;&gt; Bianca Gandolfo: Like that?

29
00:01:34.320 --> 00:01:35.065
&gt;&gt; Jenny: Yeah.

30
00:01:35.065 --> 00:01:39.432
&gt;&gt; Bianca Gandolfo: Inner router,
[INAUDIBLE] [LAUGH] cool.

31
00:01:41.441 --> 00:01:43.454
&gt;&gt; Bianca Gandolfo: All right,
any questions about that?

32
00:01:45.182 --> 00:01:48.660
&gt;&gt; Bianca Gandolfo: Seems reasonable,
cool.

33
00:01:48.660 --> 00:01:51.410
So the next one is between
calls to an inner function,

34
00:01:51.410 --> 00:01:54.880
that inner function retains access
to a variable in outer scope.

35
00:01:55.920 --> 00:01:58.880
Modifying those variables has
a lasting effect between calls to

36
00:01:58.880 --> 00:02:00.930
the inner function.

37
00:02:00.930 --> 00:02:04.887
So this is similar to what
we were doing before,

38
00:02:04.887 --> 00:02:09.610
except when we were initializing
the function twice, and

39
00:02:09.610 --> 00:02:15.220
the numbers were resetting and
the initial values were being erased.

40
00:02:15.220 --> 00:02:18.235
This is similar to that,
this is the solution to that problem.

41
00:02:21.219 --> 00:02:22.108
&gt;&gt; Bianca Gandolfo: Ryan.

42
00:02:22.108 --> 00:02:29.948
&gt;&gt; Ryan: So [COUGH] outerCounter
is declared and assigned 10.

43
00:02:29.948 --> 00:02:34.399
&gt;&gt; Bianca Gandolfo: Yeah, so
we just initialize this value at 10,

44
00:02:34.399 --> 00:02:36.470
great, and then Dan?

45
00:02:37.650 --> 00:02:39.167
&gt;&gt; Dan: Clearing function variable,

46
00:02:39.167 --> 00:02:41.332
assigning it to the value
of that function.

47
00:02:41.332 --> 00:02:43.964
[COUGH]
&gt;&gt; Bianca Gandolfo: Yep, and

48
00:02:43.964 --> 00:02:47.770
then we'd call the function,
get to this function body.

49
00:02:48.900 --> 00:02:54.530
&gt;&gt; Dan: Sure, within the function body, we
take outerCounter and increment its value.

50
00:02:54.530 --> 00:02:59.270
So outerCounter becomes 11,
and then we assign ACTUAL

51
00:02:59.270 --> 00:03:04.316
the value of outerCounter, so
ACTUAL becomes 11 as well.

52
00:03:04.316 --> 00:03:10.886
&gt;&gt; Bianca Gandolfo: All right, awesome,
so just a recap, call the function.

53
00:03:10.886 --> 00:03:14.920
We have access to outerCounter
cuz it's in our parent scope.

54
00:03:14.920 --> 00:03:17.000
The value is 10, we're adding it to 1,

55
00:03:17.000 --> 00:03:19.430
and then we were reassigning
it to outerCounter.

56
00:03:19.430 --> 00:03:21.050
Again, that lives in the parent scope.

57
00:03:21.050 --> 00:03:23.267
We're setting ACTUAL to outerCounter.

58
00:03:23.267 --> 00:03:26.600
And so we think ACTUAL will equal 11.

59
00:03:26.600 --> 00:03:30.105
Next thing that happens is this
function gets invoked again.

60
00:03:30.105 --> 00:03:34.573
So we hop into this body of the function,
just like we mentioned before,

61
00:03:34.573 --> 00:03:38.545
everything in here gets reinitialized for
the very first time.

62
00:03:38.545 --> 00:03:42.650
However, we still retain
access to our outer scope.

63
00:03:42.650 --> 00:03:43.579
This is the same scope.

64
00:03:45.380 --> 00:03:50.560
Okay, cuz this function was called once,
so we have one parent function scope.

65
00:03:51.820 --> 00:03:53.560
We call this function the first time.

66
00:03:53.560 --> 00:03:56.840
So we created that scope, it ran through,
and then it gets thrown away.

67
00:03:56.840 --> 00:03:59.407
Once it's done, it gets thrown away.

68
00:03:59.407 --> 00:04:03.730
And then we call it again,
and we created another scope.

69
00:04:05.410 --> 00:04:08.230
Okay, so in this process,

70
00:04:08.230 --> 00:04:12.300
we've gone though three scopes,
if we don't count what's going on here.

71
00:04:13.350 --> 00:04:17.570
So we have this parent scope that
was created, when we run the test.

72
00:04:17.570 --> 00:04:23.588
And then two scopes from those
two function calls here, okay?

73
00:04:23.588 --> 00:04:26.457
Everyone following that, okay?

74
00:04:26.457 --> 00:04:29.443
So, who was next actually?

75
00:04:31.129 --> 00:04:33.068
&gt;&gt; Bianca Gandolfo: Kevin?

76
00:04:33.068 --> 00:04:34.593
You always get to be on the tricky one.

77
00:04:37.910 --> 00:04:42.974
&gt;&gt; Kevin: The incremented outerCounter
was preserved cuz it was outside,

78
00:04:42.974 --> 00:04:46.112
so it's 11 + 1, setting it to 12.

79
00:04:46.112 --> 00:04:48.420
So ACTUAL equals 12.

80
00:04:48.420 --> 00:04:54.451
&gt;&gt; Bianca Gandolfo: Yep, so because we
incremented outerCounter in the parent

81
00:04:54.451 --> 00:05:00.870
scope in the previous call,
it's 11, we increment by 1.

82
00:05:00.870 --> 00:05:01.911
ACTUAL is now 12.

83
00:05:08.691 --> 00:05:09.193
&gt;&gt; Bianca Gandolfo: Cool, any questions?

84
00:05:09.193 --> 00:05:10.032
Yeah.

85
00:05:10.032 --> 00:05:14.454
&gt;&gt; Speaker 11: So what if on line 153,

86
00:05:14.454 --> 00:05:21.492
it had the word var before outerCounter?

87
00:05:21.492 --> 00:05:28.891
Cuz my understanding is if you like using
var, then it's kind of reinitializing it,

88
00:05:28.891 --> 00:05:32.922
and that would overwrite
the outer scope one.

89
00:05:32.922 --> 00:05:35.510
But that probably still
wouldn't change it here, right?

90
00:05:35.510 --> 00:05:41.450
Because it would still be adding, it would
be setting 12 to that new outerCounter and

91
00:05:41.450 --> 00:05:43.290
then that would be set to ACTUAL,
does that make sense?

92
00:05:43.290 --> 00:05:45.910
&gt;&gt; Bianca Gandolfo: So
the question is, when we put var here,

93
00:05:45.910 --> 00:05:48.090
does that change what happens?

94
00:05:48.090 --> 00:05:49.414
&gt;&gt; Speaker 11: Right.
&gt;&gt; Bianca Gandolfo: Hm, let's try it.

95
00:05:52.007 --> 00:05:53.584
&gt;&gt; Bianca Gandolfo: Which
one was that one?

96
00:05:53.584 --> 00:05:56.022
Between calls, this one.

97
00:06:00.179 --> 00:06:02.793
&gt;&gt; Bianca Gandolfo: World's tiniest font,
okay.

98
00:06:06.173 --> 00:06:08.030
&gt;&gt; Bianca Gandolfo: Yep, it's failing.

99
00:06:08.030 --> 00:06:09.300
Did I save?

100
00:06:09.300 --> 00:06:10.538
&gt;&gt; Speaker 11: So
that did break something.

101
00:06:10.538 --> 00:06:12.770
&gt;&gt; Bianca Gandolfo: Yeah,
so it did change it.

102
00:06:12.770 --> 00:06:14.840
Let's erase it, make sure-
&gt;&gt; Speaker 11: Do you know

103
00:06:14.840 --> 00:06:15.739
why it changed it?

104
00:06:18.200 --> 00:06:22.992
&gt;&gt; Bianca Gandolfo: My guess is
that it's because the variable

105
00:06:22.992 --> 00:06:26.994
is initializing a local variable.

106
00:06:26.994 --> 00:06:29.776
It's initializing another
variable in that scope,

107
00:06:29.776 --> 00:06:32.420
instead of referencing
the parent variable.

108
00:06:32.420 --> 00:06:35.320
Actually, I'm pretty confident about that,
after I said it, yeah.

109
00:06:38.582 --> 00:06:40.632
&gt;&gt; Bianca Gandolfo: Cool, good question.

110
00:06:40.632 --> 00:06:42.309
&gt;&gt; Ryan: So
JavaScript doesn't throw errors or

111
00:06:42.309 --> 00:06:45.980
anything when you try to reinitialize a
variable that's already been initialized?

112
00:06:45.980 --> 00:06:49.756
&gt;&gt; Bianca Gandolfo: It does with let.

113
00:06:49.756 --> 00:06:52.240
You can use let in const obviously.

114
00:06:52.240 --> 00:06:53.800
&gt;&gt; Ryan: So
let would throw an error there.

115
00:06:53.800 --> 00:06:57.377
&gt;&gt; Bianca Gandolfo: I think so,
let's try, yeah.

116
00:07:03.572 --> 00:07:05.449
&gt;&gt; Bianca Gandolfo: Oops.

117
00:07:05.449 --> 00:07:08.452
&gt;&gt; Dan: What was the error it threw
when you called it var, before?

118
00:07:08.452 --> 00:07:10.850
&gt;&gt; Bianca Gandolfo: It says,
outerCounter is not defined.

119
00:07:10.850 --> 00:07:11.780
&gt;&gt; Dan: When you called it var, though?

120
00:07:13.320 --> 00:07:16.440
&gt;&gt; Bianca Gandolfo: When I called it var,
it just, so it will pass,

121
00:07:20.076 --> 00:07:22.503
&gt;&gt; Bianca Gandolfo: If you do this.

122
00:07:22.503 --> 00:07:29.257
Wait, var, so outerCounter = outerCounter.

123
00:07:29.257 --> 00:07:30.771
I wonder what it is.

124
00:07:30.771 --> 00:07:33.374
Should it pass the first but
not the second?

125
00:07:33.374 --> 00:07:35.666
&gt;&gt; Dan: So it goes through and
then referred to itself maybe?

126
00:07:35.666 --> 00:07:38.692
&gt;&gt; Bianca Gandolfo: Let's put a little
debugger here and check it out.

127
00:07:46.495 --> 00:07:53.723
&gt;&gt; Bianca Gandolfo: Okay, so because
this is undefined and you're adding,

128
00:07:53.723 --> 00:07:59.524
so if you add 1 + undefined,
&gt;&gt; Bianca Gandolfo: It

129
00:07:59.524 --> 00:08:00.683
gives us not a number.

130
00:08:00.683 --> 00:08:01.804
&gt;&gt; Dan: Yeah.

131
00:08:06.308 --> 00:08:09.366
&gt;&gt; Bianca Gandolfo: Cool, beautiful.

132
00:08:13.584 --> 00:08:18.496
&gt;&gt; Bianca Gandolfo: All right, the next
one is the rule about retaining access to

133
00:08:18.496 --> 00:08:22.254
variables from an OuterScope
still applies,

134
00:08:22.254 --> 00:08:26.493
even after the OuterScope
the outerFn call,

135
00:08:26.493 --> 00:08:30.081
that created the OuterScope has returned.

136
00:08:30.081 --> 00:08:31.970
I'm gonna read that one more time.

137
00:08:31.970 --> 00:08:36.397
The rule about retaining access
to variables from the OuterScope

138
00:08:36.397 --> 00:08:37.524
still applies,

139
00:08:37.524 --> 00:08:43.333
even after the outerFn call that
created the OuterScope has returned, okay?

140
00:08:45.951 --> 00:08:46.905
&gt;&gt; Bianca Gandolfo: I'm just like, what?

141
00:08:46.905 --> 00:08:49.410
[LAUGH] Well, let's see it in action.

142
00:08:50.690 --> 00:08:52.370
Where did we leave off?

143
00:08:54.210 --> 00:08:55.910
Was it Chris?

144
00:08:55.910 --> 00:08:58.660
&gt;&gt; Chris: Sure.
The first thing that will happen is

145
00:08:58.660 --> 00:09:04.590
defining outerFn
which declares the function.

146
00:09:04.590 --> 00:09:07.800
&gt;&gt; Bianca Gandolfo: Yeah, so the very
first thing is we create this huge

147
00:09:07.800 --> 00:09:08.360
function.

148
00:09:10.000 --> 00:09:12.610
And then what's the next
thing that happens?

149
00:09:12.610 --> 00:09:15.330
&gt;&gt; Speaker 13: That we declare
variable outerFn.

150
00:09:16.590 --> 00:09:20.179
&gt;&gt; Bianca Gandolfo: Where, in what line?

151
00:09:20.179 --> 00:09:22.136
&gt;&gt; Speaker 13: 164?

152
00:09:22.136 --> 00:09:23.540
&gt;&gt; Bianca Gandolfo: We just did that.

153
00:09:23.540 --> 00:09:24.379
&gt;&gt; Speaker 13: Okay.
&gt;&gt; Bianca Gandolfo: Yeah.

154
00:09:25.780 --> 00:09:34.970
&gt;&gt; Speaker 13: Hold on, and
then we set a counter in OuterScope.

155
00:09:34.970 --> 00:09:37.888
&gt;&gt; Bianca Gandolfo: Well, this function
actually hasn't been called yet.

156
00:09:37.888 --> 00:09:38.405
&gt;&gt; Speaker 13: Yeah.

157
00:09:38.405 --> 00:09:40.050
&gt;&gt; Bianca Gandolfo: Do you
see it being called anywhere?

158
00:09:40.050 --> 00:09:40.630
&gt;&gt; Speaker 13: No.

159
00:09:40.630 --> 00:09:46.360
&gt;&gt; Bianca Gandolfo: Yeah, but I like
your enthusiasm to go above and beyond.

160
00:09:46.360 --> 00:09:47.505
The rules of JavaScript.

161
00:09:47.505 --> 00:09:51.270
[LAUGH]
&gt;&gt; Speaker 13: Well,

162
00:09:51.270 --> 00:09:56.180
so then it just runs interincrementing?

163
00:09:56.180 --> 00:09:58.543
&gt;&gt; Bianca Gandolfo: No, so
this whole function here.

164
00:10:00.898 --> 00:10:01.671
&gt;&gt; Bianca Gandolfo: It's a big one.

165
00:10:01.671 --> 00:10:03.300
&gt;&gt; Speaker 13: I didn't see.
&gt;&gt; Bianca Gandolfo: Yeah, you see?

166
00:10:03.300 --> 00:10:07.980
I try to have this rainbow thing,
it's really Mardi Gras colors, so

167
00:10:07.980 --> 00:10:10.510
you can see if they match.

168
00:10:11.620 --> 00:10:16.670
So this is green, so all of
the yellow ones are inside the green.

169
00:10:16.670 --> 00:10:19.330
&gt;&gt; Ryan: I think it's
really washed out on there.

170
00:10:19.330 --> 00:10:20.599
&gt;&gt; Bianca Gandolfo: Yeah.

171
00:10:20.599 --> 00:10:21.454
Well, I tried.

172
00:10:21.454 --> 00:10:22.380
&gt;&gt; Josh: I can see it now, though.

173
00:10:22.380 --> 00:10:23.310
Yes, actually.

174
00:10:23.310 --> 00:10:23.810
&gt;&gt; Bianca Gandolfo: Yeah.

175
00:10:24.990 --> 00:10:31.784
It's a nice like plugin for
the S-code, rainbow indent.

176
00:10:31.784 --> 00:10:38.361
Okay, so this is a big function, so
I'll view what happens next then.

177
00:10:38.361 --> 00:10:40.090
&gt;&gt; Josh: We run expect.

178
00:10:40.090 --> 00:10:43.980
&gt;&gt; Bianca Gandolfo: We run this expect,
we expect window.

179
00:10:43.980 --> 00:10:47.020
That retained inner function
to equal undefined.

180
00:10:49.270 --> 00:10:49.900
What do we think?

181
00:10:52.830 --> 00:10:54.510
So this is referencing this, I guess.

182
00:10:58.220 --> 00:10:58.980
What do we think about that?

183
00:11:00.120 --> 00:11:00.830
It seems reasonable?

184
00:11:02.000 --> 00:11:03.410
&gt;&gt; Josh: it should be undefined?

185
00:11:03.410 --> 00:11:04.430
&gt;&gt; Bianca Gandolfo: It
should be undefined, right?

186
00:11:04.430 --> 00:11:06.118
Because we haven't run
the body of this function.

187
00:11:06.118 --> 00:11:09.323
Nothing here has done any work.

188
00:11:09.323 --> 00:11:13.313
And so, you can't have a reward such as a
value assigned when there hasn't been any

189
00:11:13.313 --> 00:11:13.892
work done.

190
00:11:15.992 --> 00:11:16.590
&gt;&gt; Bianca Gandolfo: It seems fair.

191
00:11:17.610 --> 00:11:19.660
Okay, so
then we're gonna run the outerFn.

192
00:11:21.260 --> 00:11:22.220
Where did we leave off?

193
00:11:22.220 --> 00:11:22.950
Jamie, was it you?

194
00:11:24.420 --> 00:11:26.670
So we're gonna run the outerFn.

195
00:11:26.670 --> 00:11:27.880
So we're gonna come back up here.

196
00:11:29.230 --> 00:11:36.320
Yep, so then we're setting variable,
counterInOuterScope equal to 10.

197
00:11:39.662 --> 00:11:40.900
&gt;&gt; Bianca Gandolfo: And
Mike, what happened next?

198
00:11:40.900 --> 00:11:45.265
&gt;&gt; Mike: Sure, and we set a new variable,
innerIncrementingFn,

199
00:11:45.265 --> 00:11:49.910
declaring that function, and
then right after invoking it.

200
00:11:49.910 --> 00:11:51.607
&gt;&gt; Bianca Gandolfo: Awesome, Aisha?

201
00:11:58.373 --> 00:12:03.364
&gt;&gt; Aisha: We go to the declaration and,
&gt;&gt; Bianca Gandolfo: Run

202
00:12:03.364 --> 00:12:03.989
the function, right?

203
00:12:03.989 --> 00:12:04.965
&gt;&gt; Aisha: Run the function.

204
00:12:04.965 --> 00:12:09.375
&gt;&gt; Bianca Gandolfo: Yep,
say run the function, altemiroet.

205
00:12:09.375 --> 00:12:10.667
It's gonna happen in this function.

206
00:12:10.667 --> 00:12:14.030
This is really similar to the last.

207
00:12:14.030 --> 00:12:16.795
&gt;&gt; Dan: Inside of the body?

208
00:12:16.795 --> 00:12:24.039
So then, we're doing counterInOuterScope
equals counterInOuterScope plus one.

209
00:12:24.039 --> 00:12:24.942
&gt;&gt; Bianca Gandolfo: So
that equals 11, actual is 11.

210
00:12:24.942 --> 00:12:29.370
&gt;&gt; Dan: Then we're setting actual to 11.

211
00:12:29.370 --> 00:12:30.317
&gt;&gt; Bianca Gandolfo: Yeah.

212
00:12:31.645 --> 00:12:33.190
&gt;&gt; Bianca Gandolfo: Set this one to 11.

213
00:12:33.190 --> 00:12:35.740
Who remembers what happens next?

214
00:12:37.170 --> 00:12:38.260
This is the same example.

215
00:12:39.810 --> 00:12:42.030
What is this actual gonna equal?

216
00:12:42.030 --> 00:12:42.540
&gt;&gt; Speaker 2: 12.

217
00:12:42.540 --> 00:12:45.953
&gt;&gt; Bianca Gandolfo: 12, okay.

218
00:12:45.953 --> 00:12:48.510
Then, we do something a little funky.

219
00:12:48.510 --> 00:12:50.684
Josh, do you know what we're doing here?

220
00:12:53.284 --> 00:12:58.104
&gt;&gt; Josh: You're setting
a property on the window.

221
00:12:58.104 --> 00:12:59.813
Your incrementing function.

222
00:12:59.813 --> 00:13:03.034
&gt;&gt; Bianca Gandolfo: Yeah, so
we're creating a global variable,

223
00:13:03.034 --> 00:13:05.853
a global property on the window object.

224
00:13:05.853 --> 00:13:09.928
And assigning to innerIncrementingFn, 
which is this function here.

225
00:13:12.242 --> 00:13:17.221
&gt;&gt; Bianca Gandolfo: Cool, so
then we exit and we find ourselves here,

226
00:13:17.221 --> 00:13:24.347
where we say expect window.retained
inner function to be a function.

227
00:13:29.396 --> 00:13:32.123
&gt;&gt; Michael: Line 178, innerIncrementingFn,

228
00:13:32.123 --> 00:13:37.270
doesn't it have to have the break
parentheses right after that or?

229
00:13:37.270 --> 00:13:37.970
&gt;&gt; Bianca Gandolfo: Not necessarily,

230
00:13:37.970 --> 00:13:39.727
that's if you're gonna
invoke the function.

231
00:13:39.727 --> 00:13:41.832
In this case, we're passing a function.

232
00:13:41.832 --> 00:13:46.245
Well, in this case we're
assigning the function

233
00:13:46.245 --> 00:13:49.616
to basically it's like saying this.

234
00:13:49.616 --> 00:13:54.051
It's like saying,
you're creating a variable and

235
00:13:54.051 --> 00:13:57.285
then you're assigning it like this.

236
00:14:00.948 --> 00:14:02.690
&gt;&gt; Bianca Gandolfo: That's
essentially what it is doing.

237
00:14:02.690 --> 00:14:03.238
See that?

238
00:14:11.091 --> 00:14:12.207
&gt;&gt; Bianca Gandolfo: Okay.

239
00:14:14.143 --> 00:14:17.130
&gt;&gt; Ryan: So if we were to put on
the parenthesis that would be running it.

240
00:14:17.130 --> 00:14:19.887
And the window that retained inner
function would take the results of

241
00:14:19.887 --> 00:14:20.561
that function?

242
00:14:20.561 --> 00:14:21.653
&gt;&gt; Bianca Gandolfo: Yeah, so if we ran it.

243
00:14:21.653 --> 00:14:23.633
It would be whatever this returns.

244
00:14:23.633 --> 00:14:24.552
&gt;&gt; Ryan: Which is nothing.
&gt;&gt; Bianca Gandolfo: And since,

245
00:14:24.552 --> 00:14:28.050
it doesn't return anything it
would just be equal to undefined.

246
00:14:28.050 --> 00:14:29.160
And that's not helping us.

247
00:14:30.960 --> 00:14:34.020
So we really just wanna
return that function,

248
00:14:34.020 --> 00:14:36.390
because we wanna have
access to it globally.

249
00:14:37.940 --> 00:14:41.460
Okay, so saw that.

250
00:14:41.460 --> 00:14:42.830
We expect it to be a function.

251
00:14:42.830 --> 00:14:45.190
Yes, I believe that.

252
00:14:45.190 --> 00:14:52.400
Now we're calling it, like you
were kind of talking about before.

253
00:14:52.400 --> 00:14:56.530
But we're calling it out here in
the parentscope and we have access to it,

254
00:14:56.530 --> 00:15:02.320
because it's on the window object
which is global in the browser land.

255
00:15:04.550 --> 00:15:07.310
Which is where I reside in browser land.

256
00:15:07.310 --> 00:15:11.570
&gt;&gt; Ryan: The chat is asking about the dots
in the indents, is that a plugin or

257
00:15:11.570 --> 00:15:13.650
something you can do in VS code?

258
00:15:13.650 --> 00:15:19.600
&gt;&gt; Bianca Gandolfo: Yeah, I think
it's just a setting where it shows.

259
00:15:19.600 --> 00:15:21.050
The dots mean it's a space, and

260
00:15:21.050 --> 00:15:25.100
then if it has like a little arrow,
it shows that it's a tab.

261
00:15:27.382 --> 00:15:32.280
But I kind of download just
every plugin for VS code, and

262
00:15:32.280 --> 00:15:34.890
so I have a bunch of them,
I don't know which one is which.

263
00:15:34.890 --> 00:15:38.969
And I don't recommend doing that, cuz
my VS code has been freezing lately and

264
00:15:38.969 --> 00:15:41.180
I'm not sure which plugin is killing it.

265
00:15:44.100 --> 00:15:45.290
But I like the rainbow one.

266
00:15:45.290 --> 00:15:47.429
The rainbow one might even
be including the dots.

267
00:15:51.445 --> 00:15:52.007
&gt;&gt; Bianca Gandolfo: Awesome.

268
00:15:52.007 --> 00:15:55.465
Okay, all right.

269
00:15:55.465 --> 00:15:59.000
So where did we leave off?

270
00:15:59.000 --> 00:16:00.810
Was it you Ryan or Jenny?

271
00:16:00.810 --> 00:16:01.719
Jenny, okay.

272
00:16:02.720 --> 00:16:07.296
So now we're calling retain inner
function, what happens next?

273
00:16:11.909 --> 00:16:15.470
&gt;&gt; Bianca Gandolfo: What happens after
you call a function, every time?

274
00:16:15.470 --> 00:16:17.300
&gt;&gt; Jenny: Well, it's going to have
to go through the body of it.

275
00:16:17.300 --> 00:16:20.430
&gt;&gt; Bianca Gandolfo: Yeah so
we have to find the body of that fucntion,

276
00:16:20.430 --> 00:16:23.430
which is here, right?

277
00:16:23.430 --> 00:16:26.451
Because we assigned it,
but really it's here.

278
00:16:28.451 --> 00:16:29.824
&gt;&gt; Bianca Gandolfo: Okay, so what happens?

279
00:16:40.584 --> 00:16:44.140
&gt;&gt; Jenny: I don't know if it retained
the 12, or if it's still set at 10.

280
00:16:44.140 --> 00:16:45.050
&gt;&gt; Bianca Gandolfo: Yeah.

281
00:16:45.050 --> 00:16:49.980
&gt;&gt; Jenny: I think it's set at ten,
because it

282
00:16:49.980 --> 00:16:52.940
went back through our
function [INAUDIBLE] again.

283
00:16:54.210 --> 00:16:55.610
&gt;&gt; Bianca Gandolfo: I could see
where you're going with that, but

284
00:16:55.610 --> 00:17:00.730
actually what happens is that would only
reset if we called outerFn again,

285
00:17:00.730 --> 00:17:03.860
and created a whole new scope for
the parent scope.

286
00:17:03.860 --> 00:17:06.760
But we're actually only calling
this body of the function so

287
00:17:06.760 --> 00:17:10.700
it's only recreating this scope, or

288
00:17:10.700 --> 00:17:16.880
it's like initializing a new
execution context here.

289
00:17:16.880 --> 00:17:19.660
But it keeps the same one above it.

290
00:17:20.900 --> 00:17:27.990
The only way we can reset is by calling
this and then it would reset this too.

291
00:17:29.830 --> 00:17:30.400
That makes sense?

292
00:17:32.000 --> 00:17:35.332
So with that,
what do you think counterInOuterScope is?

293
00:17:41.094 --> 00:17:44.290
&gt;&gt; Jenny: My goodness,
it's still either, [LAUGH] Is it 13?

294
00:17:44.290 --> 00:17:47.300
&gt;&gt; Bianca Gandolfo: Is 12, yeah it's
1,2 then it will be 13 when you add 1.

295
00:17:47.300 --> 00:17:47.880
&gt;&gt; Jenny: Yeah, okay.

296
00:17:48.970 --> 00:17:54.330
So actual now equals 13 and
the interesting this is,

297
00:17:56.120 --> 00:18:01.170
it, well the thing to keep in mind is,
okay we're running this function in here.

298
00:18:01.170 --> 00:18:02.170
&gt;&gt; Bianca Gandolfo: Where does it exit to?

299
00:18:05.430 --> 00:18:05.930
Ryan?

300
00:18:09.523 --> 00:18:14.150
&gt;&gt; Ryan: It should exit into
the inner body of outerFn, no?

301
00:18:15.550 --> 00:18:17.030
&gt;&gt; Bianca Gandolfo: It doesn't do that.

302
00:18:17.030 --> 00:18:19.630
&gt;&gt; Ryan: Then it would exit back
to where it was called from.

303
00:18:19.630 --> 00:18:20.470
&gt;&gt; Bianca Gandolfo: Yeah, exactly.

304
00:18:20.470 --> 00:18:23.480
So some people assume,
since we're executing here,

305
00:18:23.480 --> 00:18:28.600
the next thing is that it would go run
this again but that's not the case.

306
00:18:28.600 --> 00:18:33.687
Actually so it's gonna run this and
then it's gonna hop

307
00:18:33.687 --> 00:18:40.950
back here where we called it an run the
next line, and what do we think actual is?

308
00:18:49.340 --> 00:18:50.892
&gt;&gt; Bianca Gandolfo: Cool,
any questions about this one?

309
00:18:53.765 --> 00:18:58.510
&gt;&gt; Dan: But I thought since we won't
returning anything inside

310
00:18:58.510 --> 00:18:59.775
the retainedInnerFn.

311
00:18:59.775 --> 00:19:01.470
&gt;&gt; Bianca Gandolfo: Mm-hm.

312
00:19:01.470 --> 00:19:04.950
&gt;&gt; Dan: Like after during the actual
equals counterInOuterScope.

313
00:19:04.950 --> 00:19:08.330
We weren't returning, thought you had
mentioned something about that earlier.

314
00:19:08.330 --> 00:19:10.130
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; Dan: We wasn't returning anything.

315
00:19:10.130 --> 00:19:13.440
&gt;&gt; Bianca Gandolfo: It's not returning
anything, so when you call it here,

316
00:19:13.440 --> 00:19:18.900
this window, so when you execute
the function, it would return here.

317
00:19:18.900 --> 00:19:22.340
If we were saying our result equals that,

318
00:19:24.250 --> 00:19:27.930
then that's why we care about the return
value, but what happened in the body of

319
00:19:27.930 --> 00:19:32.850
the function is that we assigned
actual again to an updated value.

320
00:19:32.850 --> 00:19:34.190
And we're referencing actually, yeah.

321
00:19:36.140 --> 00:19:37.120
Yeah, but that's a good question.

322
00:19:39.910 --> 00:19:40.460
Anyone else?

323
00:19:43.290 --> 00:19:45.100
This one's a little bit of a mind bender.

324
00:19:47.940 --> 00:19:50.859
Do people feel like their mind's being
bent a little bit or they're like

325
00:19:51.880 --> 00:19:56.500
I'm used to JavaScript by now and
this is not news.

326
00:19:56.500 --> 00:20:00.670
&gt;&gt; Dan: It's interesting that
the function still has context for

327
00:20:00.670 --> 00:20:04.880
the outer scope when you
call it outside of that.

328
00:20:04.880 --> 00:20:08.050
&gt;&gt; Bianca Gandolfo: Yeah, it's like
this little magic tunnel into like

329
00:20:08.050 --> 00:20:08.809
another function.

330
00:20:10.480 --> 00:20:12.550
So you have a question?

331
00:20:12.550 --> 00:20:15.140
&gt;&gt; Dan: You were gonna cover a let for
the chat.

332
00:20:15.140 --> 00:20:21.400
&gt;&gt; Bianca Gandolfo: Yes so
the appropriate time to use let

333
00:20:21.400 --> 00:20:28.030
is when you want to scope your variable
inside of a block that's not a function.

334
00:20:28.030 --> 00:20:32.136
However, a lot of people just use let and
const all the time,

335
00:20:32.136 --> 00:20:39.430
because it's ES6, and
they believe that's the right thing to do.

336
00:20:42.680 --> 00:20:49.160
I think as long as you know
how your code runs, it's fine.

337
00:20:49.160 --> 00:20:51.820
Var does do some funny
things with hoisting.

338
00:20:51.820 --> 00:20:56.840
Which means that when you
declare a variable somewhere,

339
00:20:57.870 --> 00:21:03.880
it gets hoisted to the top of
its local scope as undefined.

340
00:21:03.880 --> 00:21:07.610
So for example, and
this is why people don't like var.

341
00:21:07.610 --> 00:21:11.065
So people who are like so
if I, for example,

342
00:21:11.065 --> 00:21:17.660
console.logged this,
it would be undefined.

343
00:21:17.660 --> 00:21:19.450
It wouldn't throw an error.

344
00:21:22.130 --> 00:21:27.409
Typically if you're
referencing a variable like

345
00:21:27.409 --> 00:21:32.450
if this wasn't here,
it would throw an error.

346
00:21:32.450 --> 00:21:37.500
So we call this hoisting and
it's something like that happens

347
00:21:37.500 --> 00:21:42.850
when you're code is being like compile and
optimized in the back.

348
00:21:42.850 --> 00:21:47.110
It will hoist all of your
variables to the top,

349
00:21:47.110 --> 00:21:51.960
it'll all be set to undefined and
that's why it's recommended that if you're

350
00:21:51.960 --> 00:21:55.570
declaring variables in the body of a
function, just put all of them at the top.

351
00:21:55.570 --> 00:21:59.518
Because that's what it's gonna do anyway,
and

352
00:21:59.518 --> 00:22:04.334
it minimizes anything happening
that you wouldn't expect

353
00:22:04.334 --> 00:22:08.200
with a let key word that
is supposed to fix that.

354
00:22:10.350 --> 00:22:15.260
But I pretty much still use var at work,
for the most part.

355
00:22:15.260 --> 00:22:19.470
I'm trying to get past it and

356
00:22:19.470 --> 00:22:24.970
move on to being more,
embrace the ES6 stuff more.

357
00:22:24.970 --> 00:22:26.150
But like I was saying before,

358
00:22:26.150 --> 00:22:30.080
pretty much at this point I write all my
stuff in ES5 and then I rewrite it in ES6.

359
00:22:31.110 --> 00:22:35.790
Just because i'm used to writing ES5 and
I'm forcing myself to do ES6 but

360
00:22:35.790 --> 00:22:41.150
it is really important to know and
it's the new JavaScript and

361
00:22:41.150 --> 00:22:44.030
I have to just get used to it.

362
00:22:44.030 --> 00:22:45.690
You know what I mean?

363
00:22:46.990 --> 00:22:49.346
That's where I'm at at least.

364
00:22:49.346 --> 00:22:55.114
Cool, so we are at 244.

365
00:23:00.546 --> 00:23:04.986
&gt;&gt; Bianca Gandolfo: Let's take
a breather and just take a look at all

366
00:23:04.986 --> 00:23:09.320
the rules that we just went through for
scope.

367
00:23:10.830 --> 00:23:11.939
Can you guys read all this?

368
00:23:13.520 --> 00:23:14.080
Is it big enough?

369
00:23:15.730 --> 00:23:20.250
Okay, so
let's take a five minute break and

370
00:23:20.250 --> 00:23:24.250
discuss with your little group,
we're like in groups twos, threes.

371
00:23:26.020 --> 00:23:29.877
What rule was most interesting or

372
00:23:29.877 --> 00:23:34.153
surprising to you in this exercise?

373
00:23:36.771 --> 00:23:37.950
&gt;&gt; Bianca Gandolfo: Or
what will you take away?

