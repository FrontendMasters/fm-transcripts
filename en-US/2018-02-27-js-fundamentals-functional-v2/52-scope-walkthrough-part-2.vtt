WEBVTT

1
00:00:00.300 --> 00:00:02.210
&gt;&gt; Bianca Gandolfo: So this one says,

2
00:00:02.210 --> 00:00:06.740
a function's local scope variables are not
available anywhere outside that function,

3
00:00:06.740 --> 00:00:10.880
regardless of the context it's called in,
okay?

4
00:00:12.040 --> 00:00:15.042
So,
&gt;&gt; Bianca Gandolfo: Where did

5
00:00:15.042 --> 00:00:15.559
we leave off?

6
00:00:15.559 --> 00:00:16.471
I already forgot.
&gt;&gt; Speaker 2: Somewhere over here.

7
00:00:17.680 --> 00:00:18.300
&gt;&gt; Bianca Gandolfo: Somewhere over here,

8
00:00:18.300 --> 00:00:20.980
do you wanna start?
&gt;&gt; Speaker 2: No, cuz that's boring.

9
00:00:20.980 --> 00:00:24.770
Yeah, we're declaring firstFn,
which is a function,

10
00:00:24.770 --> 00:00:27.860
and not running it immediately.
&gt;&gt; Bianca Gandolfo: Okay, so

11
00:00:27.860 --> 00:00:30.000
we're defining this function.

12
00:00:30.000 --> 00:00:33.850
And we have the function body here.

13
00:00:35.110 --> 00:00:36.030
We're not running it yet.

14
00:00:37.250 --> 00:00:39.838
Okay, Dan?
&gt;&gt; Dan: We're declaring

15
00:00:39.838 --> 00:00:41.406
second.
&gt;&gt; Bianca Gandolfo: Yeah,

16
00:00:41.406 --> 00:00:47.475
we're creating the secondFn.
&gt;&gt; Bianca Gandolfo: Skipping over it.

17
00:00:47.475 --> 00:00:52.630
&gt;&gt; Ryan: And we're calling expect,

18
00:00:52.630 --> 00:00:59.299
using as a parameter this function.

19
00:00:59.299 --> 00:01:03.410
And we don't know that it's
necessarily going to be executed.

20
00:01:03.410 --> 00:01:03.981
&gt;&gt; Bianca Gandolfo: Yeah, but

21
00:01:03.981 --> 00:01:07.161
I'll tell you that yes,
it is actually gonna be executed.

22
00:01:07.161 --> 00:01:12.018
But there's nothing here telling us for
sure that it's being executed,

23
00:01:12.018 --> 00:01:15.777
but I'll let you know that
inside that expect function,

24
00:01:15.777 --> 00:01:21.365
it will execute this function.
&gt;&gt; Bianca Gandolfo: So

25
00:01:21.365 --> 00:01:24.520
Jenny, so this function is being called,

26
00:01:24.520 --> 00:01:29.635
what happens next?
&gt;&gt; Jenny: I

27
00:01:29.635 --> 00:01:35.529
don't know where the to.throw() runs it through.
&gt;&gt; Bianca Gandolfo: Well,

28
00:01:35.529 --> 00:01:37.750
we're still actually
running this function.

29
00:01:37.750 --> 00:01:39.720
So we call this function.

30
00:01:39.720 --> 00:01:43.520
But when we call a function, we first need
to enter into the body of the function and

31
00:01:43.520 --> 00:01:46.470
execute what's inside.
&gt;&gt; Jenny: Okay, so

32
00:01:46.470 --> 00:01:48.810
then it's calling the second function or

33
00:01:48.810 --> 00:01:51.070
secondFn within there.
&gt;&gt; Bianca Gandolfo: Yeah, so

34
00:01:51.070 --> 00:01:52.160
it's gonna call that function.

35
00:01:52.160 --> 00:01:57.644
And then, Josh.
&gt;&gt; Josh: It goes back up to the second

36
00:01:57.644 --> 00:02:02.338
function declaration and
executes the code,

37
00:02:02.338 --> 00:02:05.986
which will be the problem.
&gt;&gt; Bianca Gandolfo: And then, Altimeer,

38
00:02:05.986 --> 00:02:06.584
what happens?

39
00:02:06.584 --> 00:02:07.960
So we're executing this.

40
00:02:09.550 --> 00:02:15.353
What happens?
&gt;&gt; Altimeer: That then follow for

41
00:02:15.353 --> 00:02:18.590
the throw error?
&gt;&gt; Bianca Gandolfo: Yeah, so

42
00:02:18.590 --> 00:02:24.788
this is probably our error
because localToFirstFn

43
00:02:24.788 --> 00:02:30.420
[COUGH]
is in a different scope.

44
00:02:31.800 --> 00:02:34.890
So we don't have access to
localToFirstFn.

45
00:02:34.890 --> 00:02:37.470
So we're trying to assign
something that doesn't exist.

46
00:02:37.470 --> 00:02:41.022
It's gonna throw an error.
&gt;&gt; Bianca Gandolfo: So

47
00:02:41.022 --> 00:02:44.303
that's where this to.throw comes from.

48
00:02:44.303 --> 00:02:48.507
Okay any questions for that one?
&gt;&gt; Bianca Gandolfo: Okay.

49
00:02:52.363 --> 00:02:53.391
&gt;&gt; Bianca Gandolfo: Aisha, do you wanna do

50
00:02:53.391 --> 00:02:59.394
the next expect?
&gt;&gt; Aisha: Function's defined and

51
00:02:59.394 --> 00:03:02.686
it declares the firstFn.
&gt;&gt; Bianca Gandolfo: So

52
00:03:02.686 --> 00:03:08.770
we define this function, expect somewhere
in the internals it's gonna call it,

53
00:03:08.770 --> 00:03:12.662
and then Cameron,
what happens once it's called?

54
00:03:15.752 --> 00:03:17.945
&gt;&gt; Cameron: It calls firstFn.

55
00:03:17.945 --> 00:03:18.534
&gt;&gt; Bianca Gandolfo: Mm-hm,

56
00:03:18.534 --> 00:03:21.631
it's gonna call the firstFn,
and Eddie,

57
00:03:21.631 --> 00:03:24.693
what happens next?
&gt;&gt; Eddie: So

58
00:03:24.693 --> 00:03:30.179
inside of firstFn up on line 64,

59
00:03:30.179 --> 00:03:37.287
localToFirstFn is set to the string first.
&gt;&gt; Bianca Gandolfo: Yep,

60
00:03:37.287 --> 00:03:41.432
okay, Kris, what happens next?
&gt;&gt; Kris: And then it calls

61
00:03:41.432 --> 00:03:46.537
the secondFn again.
&gt;&gt; Bianca Gandolfo: Yeah, and then Abdi,

62
00:03:46.537 --> 00:03:51.330
what happens next?
&gt;&gt; Abdi: It runs secondFn and

63
00:03:51.330 --> 00:03:57.455
assigns,
&gt;&gt; Abdi: The local first string

64
00:03:57.455 --> 00:04:01.995
to be first, assigns that to actual.
&gt;&gt; Bianca Gandolfo: Well,

65
00:04:05.118 --> 00:04:05.738
&gt;&gt; Bianca Gandolfo: This is in

66
00:04:05.738 --> 00:04:09.080
a different scope though,
than this one, still.

67
00:04:11.100 --> 00:04:17.527
So, as you would read it, it first looks,
is this variable in this scope?

68
00:04:17.527 --> 00:04:18.829
No, it's not.

69
00:04:18.829 --> 00:04:23.915
As you would read it, not necessarily
how it's executed, you look then to

70
00:04:23.915 --> 00:04:29.110
the parent scope, which is not this one,
this one is not in the same scope.

71
00:04:29.110 --> 00:04:32.217
You can even see when
you collapse them they

72
00:04:32.217 --> 00:04:36.269
are siblings.
&gt;&gt; Bianca Gandolfo: So

73
00:04:36.269 --> 00:04:42.619
it will look out into this scope here.
&gt;&gt; Bianca Gandolfo: And

74
00:04:42.619 --> 00:04:44.090
then it will look out into this one.

75
00:04:45.740 --> 00:04:48.551
And nowhere have we defined the local to

76
00:04:48.551 --> 00:04:52.568
firstFn.
&gt;&gt; Bianca Gandolfo: Does that make

77
00:04:52.568 --> 00:04:55.230
sense?
&gt;&gt; Ryan: So the hierarchies are sort of

78
00:04:55.230 --> 00:04:57.297
defined statically?
&gt;&gt; Bianca Gandolfo: Yeah.

79
00:04:57.297 --> 00:04:57.935
&gt;&gt; Ryan: Right.

80
00:04:57.935 --> 00:04:59.251
&gt;&gt; Bianca Gandolfo: Mm-hm, yeah,

81
00:04:59.251 --> 00:05:04.610
it's called lexical scope,
if you want the Wikipedia word for it.

82
00:05:05.710 --> 00:05:09.760
But it's as you would read it, so
where it's visually on the page.

83
00:05:11.240 --> 00:05:16.880
Yeah, okay, so,
we don't have access to this.

84
00:05:17.930 --> 00:05:22.902
It's gonna throw an error.
&gt;&gt; Kris: And then expect is called with

85
00:05:22.902 --> 00:05:28.682
ACTUAL equal to null.
&gt;&gt; Bianca Gandolfo: Awesome,

86
00:05:28.682 --> 00:05:30.640
so, actual is null.

87
00:05:30.640 --> 00:05:36.426
Again, because before each it,
we are resetting our null,

88
00:05:36.426 --> 00:05:38.928
our actual value to null.

89
00:05:42.635 --> 00:05:47.520
&gt;&gt; Bianca Gandolfo: Great,
&gt;&gt; Bianca Gandolfo: Next one,

90
00:05:47.520 --> 00:05:48.920
it's a little bit longer.
&gt;&gt; Speaker 2: Can I

91
00:05:48.920 --> 00:05:52.542
ask about the last one too?
&gt;&gt; Bianca Gandolfo: Yeah.

92
00:05:52.542 --> 00:05:54.038
&gt;&gt; Speaker 2: Is it by any chance a matter

93
00:05:54.038 --> 00:05:55.230
of order?

94
00:05:55.230 --> 00:05:58.379
If secondFn was declared
before the firstFn,

95
00:05:58.379 --> 00:06:02.491
would you be able to call it there?
&gt;&gt; Bianca Gandolfo: So you're saying, if

96
00:06:02.491 --> 00:06:06.440
we, for example, put this function above.
&gt;&gt; Speaker 2: Yeah,

97
00:06:06.440 --> 00:06:08.540
just above the its.
&gt;&gt; Bianca Gandolfo: No,

98
00:06:08.540 --> 00:06:10.709
it still wouldn't work, cuz it's about

99
00:06:12.010 --> 00:06:16.724
the block that it's in.
&gt;&gt; Speaker 2: I guess I'm confused

100
00:06:16.724 --> 00:06:21.032
because when I write a big page code or
something, and

101
00:06:21.032 --> 00:06:26.806
I'll have other functions on that
same level that I call beside there.

102
00:06:26.806 --> 00:06:31.805
And I'm missing why they're
outside of scope in that case, but

103
00:06:31.805 --> 00:06:35.323
I think you said it pretty clearly there,
and

104
00:06:35.323 --> 00:06:39.100
it's just not clicking.
&gt;&gt; Bianca Gandolfo: Yeah, so

105
00:06:39.100 --> 00:06:42.780
when you put a variable inside of
a function, it's local to that function.

106
00:06:44.130 --> 00:06:48.690
And when you do a look up, for
example, this is a creation, right,

107
00:06:48.690 --> 00:06:50.270
we're declaring this.

108
00:06:50.270 --> 00:06:51.205
And this is a look up, right?

109
00:06:51.205 --> 00:06:53.050
We're looking up the value
of that function.

110
00:06:53.050 --> 00:06:56.218
It's first gonna check in its own block,
okay, and

111
00:06:56.218 --> 00:07:01.290
we haven't declared anything here,
we haven't assigned anything.

112
00:07:01.290 --> 00:07:02.177
So it's not there.

113
00:07:02.177 --> 00:07:05.644
And then it's gonna look up, okay?

114
00:07:05.644 --> 00:07:12.090
And so up,
&gt;&gt; Bianca Gandolfo: Is in this function.

115
00:07:12.090 --> 00:07:18.030
And when I say up, I don't mean up
the lines, but up the scope tree,

116
00:07:18.030 --> 00:07:23.250
so up into the next parent function.
&gt;&gt; Speaker 2: Sure, so if we're at this

117
00:07:23.250 --> 00:07:27.920
step here, when we're calling it from
the perspective of the firstFn, right?

118
00:07:29.840 --> 00:07:31.720
Okay, I want to assign this variable.

119
00:07:31.720 --> 00:07:34.789
Okay, I did that,
now I'm calling secondFn.

120
00:07:34.789 --> 00:07:36.970
Well, what is secondFn?

121
00:07:36.970 --> 00:07:40.068
I don't have that, let me go up a level.

122
00:07:40.068 --> 00:07:43.533
But then why doesn't it see
the function right there,

123
00:07:43.533 --> 00:07:48.070
var secondFn?
&gt;&gt; Bianca Gandolfo: It does see this.

124
00:07:48.070 --> 00:07:48.660
&gt;&gt; Speaker 2: It does?

125
00:07:48.660 --> 00:07:50.270
&gt;&gt; Bianca Gandolfo: Yes.

126
00:07:50.270 --> 00:07:50.940
&gt;&gt; Bianca Gandolfo: Yeah.

127
00:07:53.580 --> 00:07:55.037
&gt;&gt; Bianca Gandolfo: Because secondFn is

128
00:07:55.037 --> 00:07:58.115
being declared in a parent scope.
&gt;&gt; Speaker 2: Wait, yeah,

129
00:07:58.115 --> 00:08:01.651
why would it throw an error because you're
actually looking for the variable main and

130
00:08:01.651 --> 00:08:04.138
not Not the function.
&gt;&gt; Bianca Gandolfo: So

131
00:08:04.138 --> 00:08:08.989
localToFirstFn is the thing
that's throwing the error,

132
00:08:08.989 --> 00:08:12.960
this one.
&gt;&gt; Speaker 2: Wait.

133
00:08:12.960 --> 00:08:13.500
&gt;&gt; Bianca Gandolfo: Well, actually,

134
00:08:13.500 --> 00:08:14.180
this one, sorry.

135
00:08:15.440 --> 00:08:21.122
That one's throwing the error.
&gt;&gt; Bianca Gandolfo: Because

136
00:08:21.122 --> 00:08:25.858
it's first looking in here for
something called localToFirstFn,

137
00:08:25.858 --> 00:08:27.514
and it's not there.
&gt;&gt; Speaker 2: So

138
00:08:27.514 --> 00:08:28.056
okay, okay.
&gt;&gt; Bianca Gandolfo: And

139
00:08:28.056 --> 00:08:31.300
then it looks here, and it's not there.

140
00:08:31.300 --> 00:08:35.185
And then it keeps going up until it says,
well, it's not there.

141
00:08:35.185 --> 00:08:35.782
&gt;&gt; Speaker 2: Okay, so

142
00:08:35.782 --> 00:08:40.716
the reason that the second test that we
were looking at fails is because it calls

143
00:08:40.716 --> 00:08:43.576
firstFn, which goes into secondFn.

144
00:08:43.576 --> 00:08:46.096
And then secondFn
still does not have access to

145
00:08:46.096 --> 00:08:47.460
localToFirstFn, okay.
&gt;&gt; Bianca Gandolfo: But

146
00:08:47.460 --> 00:08:49.260
I see what you mean about the order.

147
00:08:49.260 --> 00:08:53.380
And I think that's something
important to point out, is the order.

148
00:08:53.380 --> 00:08:58.180
Cuz it seems like this wouldn't have
access, because this is underneath, right?

149
00:08:58.180 --> 00:09:00.830
That's what your assumption was, and you
thought maybe the error had something to

150
00:09:00.830 --> 00:09:01.584
do with that.
&gt;&gt; Speaker 2: Yeah,

151
00:09:01.584 --> 00:09:04.192
there was some weird situation
where that comes in.

152
00:09:04.192 --> 00:09:04.925
&gt;&gt; Bianca Gandolfo: Yeah, and so

153
00:09:04.925 --> 00:09:07.863
that's another part of
scope that comes into play,

154
00:09:07.863 --> 00:09:11.201
which is when things are defined
in the order in which things

155
00:09:11.201 --> 00:09:14.977
are defined.
&gt;&gt; Bianca Gandolfo: So

156
00:09:14.977 --> 00:09:19.587
because firstFn
isn't run until down here,

157
00:09:19.587 --> 00:09:23.775
we actually have executed all of this,
right,

158
00:09:23.775 --> 00:09:28.768
we declared all of this,
right, remember that?

159
00:09:28.768 --> 00:09:34.950
And then we called firstFn,
and we go up here.

160
00:09:36.110 --> 00:09:37.440
So, secondFn has already been

161
00:09:37.440 --> 00:09:39.280
defined.
&gt;&gt; Speaker 2: Sure.

162
00:09:39.280 --> 00:09:40.106
&gt;&gt; Bianca Gandolfo: Yeah, that's why that

163
00:09:40.106 --> 00:09:42.080
works.
&gt;&gt; Speaker 2: Okay, all right,

164
00:09:42.080 --> 00:09:43.600
thank you.
&gt;&gt; Bianca Gandolfo: Yeah,

165
00:09:43.600 --> 00:09:47.380
no, that's a good question, awesome.

166
00:09:47.380 --> 00:09:53.150
Okay, so the next one is, if an inner and
outer variable share the same name,

167
00:09:53.150 --> 00:09:57.110
and that name is referenced
in the inner scope, the inner

168
00:09:57.110 --> 00:10:01.030
scope variable masks the variable from
the outer scope with the same name.

169
00:10:02.270 --> 00:10:06.210
This renders the outer scope variables
inaccessible from anywhere within

170
00:10:07.550 --> 00:10:10.405
the inner function block.

171
00:10:10.405 --> 00:10:17.830
[LAUGH] Where did we leave off actually?

172
00:10:17.830 --> 00:10:20.310
Okay, Michael.
&gt;&gt; Michael: Yep,

173
00:10:20.310 --> 00:10:23.700
we are making anonymous function.
&gt;&gt; Bianca Gandolfo: Well, actually,

174
00:10:23.700 --> 00:10:25.702
we start here.
&gt;&gt; Michael: Okay, cool,

175
00:10:25.702 --> 00:10:28.126
we are defining a variable sameName and

176
00:10:28.126 --> 00:10:31.023
setting it equal to outer.
&gt;&gt; Bianca Gandolfo: Yep, so

177
00:10:31.023 --> 00:10:35.690
we're defining the variable sameName,
setting it to outer.

178
00:10:35.690 --> 00:10:36.940
What's the next thing that happens?

179
00:10:37.970 --> 00:10:38.470
Who's next?

180
00:10:40.020 --> 00:10:41.710
Did you just go?
&gt;&gt; Kris: Yeah, I did, but

181
00:10:41.710 --> 00:10:43.760
I can go again.
&gt;&gt; Bianca Gandolfo: No, it's okay.

182
00:10:43.760 --> 00:10:50.866
So it's either Ben or Aisha.
&gt;&gt; Aisha: I'll go,

183
00:10:50.866 --> 00:10:54.822
a function's defined.
&gt;&gt; Bianca Gandolfo: Yeah,

184
00:10:54.822 --> 00:10:59.771
we define a function, okay, alt new.
&gt;&gt; Ben: I was just reading

185
00:10:59.771 --> 00:11:03.440
the distribution,
trying to understand what it is.

186
00:11:03.440 --> 00:11:06.729
Okay, so, we defined a function,

187
00:11:06.729 --> 00:11:08.923
then we called it.
&gt;&gt; Bianca Gandolfo: Yep, and

188
00:11:08.923 --> 00:11:10.090
then we called the function.

189
00:11:11.100 --> 00:11:13.120
Josh?
&gt;&gt; Josh: We

190
00:11:13.120 --> 00:11:15.120
evaluate the function body.
&gt;&gt; Bianca Gandolfo: Yep.

191
00:11:16.200 --> 00:11:18.879
&gt;&gt; Josh: So we set sameName to inner,

192
00:11:18.879 --> 00:11:23.490
which places sameName equals outer.
&gt;&gt; Bianca Gandolfo: Yeah,

193
00:11:24.840 --> 00:11:30.020
so we declare a variable with the exact
name as this variable sameName,

194
00:11:30.020 --> 00:11:34.991
we reassign the value here.
&gt;&gt; Bianca Gandolfo: And then-

195
00:11:34.991 --> 00:11:36.124
&gt;&gt; Josh: Does it matter that you're

196
00:11:36.124 --> 00:11:38.620
redeclaring it?
&gt;&gt; Bianca Gandolfo: No,

197
00:11:38.620 --> 00:11:44.000
not really.
&gt;&gt; Jenny: It's gonna jump down to 91 and-

198
00:11:44.000 --> 00:11:44.735
&gt;&gt; Bianca Gandolfo: Well, we have this one

199
00:11:44.735 --> 00:11:50.250
here first.
&gt;&gt; Jenny: It's setting actual to sameName.

200
00:11:50.250 --> 00:11:50.888
&gt;&gt; Bianca Gandolfo: Mm-hm, and

201
00:11:50.888 --> 00:11:52.290
what is sameName?

202
00:11:52.290 --> 00:11:53.410
&gt;&gt; Jenny: Inner.
&gt;&gt; Bianca Gandolfo: Inner.

203
00:11:53.410 --> 00:11:54.100
&gt;&gt; Jenny: Yep.

204
00:11:54.100 --> 00:11:54.923
&gt;&gt; Bianca Gandolfo: Okay, and

205
00:11:54.923 --> 00:11:58.840
then Ryan?
&gt;&gt; Ryan: Expect is called.

206
00:11:58.840 --> 00:12:00.190
&gt;&gt; Bianca Gandolfo: Okay, so

207
00:12:00.190 --> 00:12:08.920
we exit this function and go to expect.
&gt;&gt; Bianca Gandolfo: You wanna take a stab?

208
00:12:08.920 --> 00:12:12.558
&gt;&gt; Ryan: Sure, ACTUAL at this point is,

209
00:12:14.831 --> 00:12:17.900
&gt;&gt; Ryan: Still inner.

210
00:12:17.900 --> 00:12:18.446
&gt;&gt; Bianca Gandolfo: Mm-hm,

211
00:12:18.446 --> 00:12:22.438
so ACTUAL is inner.
&gt;&gt; Bianca Gandolfo: Do

212
00:12:22.438 --> 00:12:25.560
you have a question about that?
&gt;&gt; Altimeer: So

213
00:12:25.560 --> 00:12:30.046
would that be a case where if we,
on the behavior, would use let and

214
00:12:30.046 --> 00:12:35.610
create a log scope?
&gt;&gt; Bianca Gandolfo: This

215
00:12:35.610 --> 00:12:38.180
is similar to the example with let.

216
00:12:38.180 --> 00:12:41.670
So instead of creating the block scope,
we are creating a function scope, and

217
00:12:41.670 --> 00:12:45.540
we're doing what's called masking,
so we're masking the value.

218
00:12:45.540 --> 00:12:49.590
Because remember, you first look at
your most local scope to get the value.

219
00:12:49.590 --> 00:12:52.930
If you don't have it, then you go up.

220
00:12:52.930 --> 00:12:56.851
But if you have it, and you also have
one in your parent scope, you only find

221
00:12:56.851 --> 00:13:00.290
the one on your scope because you
don't look up if you find value.

222
00:13:00.290 --> 00:13:04.560
Does that make sense?

223
00:13:04.560 --> 00:13:05.680
What is this?

224
00:13:05.680 --> 00:13:07.150
Head, shoulders, knees, and toes,

225
00:13:07.150 --> 00:13:11.315
it's just like that.
&gt;&gt; Bianca Gandolfo: Okay,

226
00:13:12.426 --> 00:13:14.154
&gt;&gt; Bianca Gandolfo: That make sense to

227
00:13:14.154 --> 00:13:19.666
everyone?
&gt;&gt; Bianca Gandolfo: What

228
00:13:19.666 --> 00:13:24.495
if we did this?
&gt;&gt; Bianca Gandolfo: Wait,

229
00:13:24.495 --> 00:13:26.736
I still need to do-
&gt;&gt; Ryan: Then you'd copy the next example.

230
00:13:26.736 --> 00:13:28.647
&gt;&gt; Bianca Gandolfo: All right,

231
00:13:28.647 --> 00:13:30.760
[LAUGH] oops.

232
00:13:30.760 --> 00:13:32.120
Maybe I've done this too many times.

233
00:13:33.320 --> 00:13:37.396
Okay, so, you have a question?
&gt;&gt; Ryan: Yeah, Sean's saying,

234
00:13:37.396 --> 00:13:40.224
he's just checking his understanding,

235
00:13:40.224 --> 00:13:44.987
if line 87 was declared with a let,
would we still get the same result

236
00:13:44.987 --> 00:13:49.660
because it's scoped to the block?
&gt;&gt; Bianca Gandolfo: Yeah,

237
00:13:49.660 --> 00:13:51.240
it would still be the same.

238
00:13:51.240 --> 00:13:54.160
The let in this case doesn't matter.

239
00:13:55.310 --> 00:13:59.590
Let in this case doesn't change anything
because we have a function scope.

240
00:14:05.310 --> 00:14:09.471
So the let keyword creates
what's called block scope,

241
00:14:09.471 --> 00:14:13.110
which is something that
we didn't have before.

242
00:14:13.110 --> 00:14:18.872
So for if else statements, we could
have a scope for that now with let.

243
00:14:18.872 --> 00:14:24.100
Before that if else statements,
if you declared a variable in a loop or

244
00:14:24.100 --> 00:14:26.880
in brackets or in a switch statement or

245
00:14:26.880 --> 00:14:30.470
anything like that,
it wasn't local to that block.

246
00:14:31.510 --> 00:14:35.455
And so that would cause kind of some weird
behaviors, especially if you had a lot of

247
00:14:35.455 --> 00:14:38.750
if else statements and
reassigning variables and stuff like that.

248
00:14:38.750 --> 00:14:41.760
And there's also hoisting that happens,
which we'll talk about.

249
00:14:43.950 --> 00:14:46.480
And so it can be misleading, and so

250
00:14:46.480 --> 00:14:51.620
we introduce let, by we, not me at all,
I was not involved in that.

251
00:14:51.620 --> 00:14:55.090
Let was introduced into the language,
which creates a block scope, which enables

252
00:14:55.090 --> 00:15:01.030
us to have variables that are private
to something other than a function.

253
00:15:01.030 --> 00:15:03.620
Before that,
all we had was private function skill.

254
00:15:05.120 --> 00:15:07.870
Any more questions about this one?
&gt;&gt; Speaker 2: I'm still not

255
00:15:07.870 --> 00:15:08.940
quite getting it.

256
00:15:08.940 --> 00:15:10.770
Because it's looking at ACTUAL, right?

257
00:15:11.860 --> 00:15:15.119
And ACTUAL is defined as
null before this test.

258
00:15:16.880 --> 00:15:21.780
Is that fn function returning

259
00:15:21.780 --> 00:15:25.112
actual to the outer scope?
&gt;&gt; Bianca Gandolfo: So,

260
00:15:25.112 --> 00:15:29.042
this variable lives in the area.
&gt;&gt; Speaker 2: Because it's a global

261
00:15:29.042 --> 00:15:31.890
variable, well, in this kind of context.

262
00:15:31.890 --> 00:15:33.910
When we change it inside,
it's changed outside.

263
00:15:33.910 --> 00:15:34.630
&gt;&gt; Bianca Gandolfo: Yep.

264
00:15:34.630 --> 00:15:35.310
&gt;&gt; Speaker 2: Okay, never mind.

265
00:15:35.310 --> 00:15:36.480
&gt;&gt; Bianca Gandolfo: Exactly.

266
00:15:36.480 --> 00:15:42.620
So it's reaching up, changing it up there,
so it will be accessed anywhere else,

267
00:15:42.620 --> 00:15:48.825
it would be the same value, yeah.
&gt;&gt; Bianca Gandolfo: Cool, so line 94,

268
00:15:48.825 --> 00:15:53.913
if an inner and
an outer variable share the same name, and

269
00:15:53.913 --> 00:16:01.950
the name is referenced in the outer scope,
the outer value binding will be used.

270
00:16:01.950 --> 00:16:03.860
So this is kinda the opposite
of what we just did.

271
00:16:03.860 --> 00:16:12.350
And what did we mean by, Dan?
&gt;&gt; Dan: Sorry,

272
00:16:12.350 --> 00:16:13.764
which line am I on?
&gt;&gt; Speaker 2: 95.

273
00:16:13.764 --> 00:16:14.540
&gt;&gt; Bianca Gandolfo: 95.

274
00:16:14.540 --> 00:16:16.560
&gt;&gt; Dan: That's the one we just did.

275
00:16:16.560 --> 00:16:17.370
&gt;&gt; Bianca Gandolfo: Looks really similar

276
00:16:17.370 --> 00:16:19.350
doesn't it?
&gt;&gt; Dan: So

277
00:16:19.350 --> 00:16:21.746
declaring a variable, same thing.
&gt;&gt; Bianca Gandolfo: Yeah,

278
00:16:21.746 --> 00:16:23.710
so we declare the variable, same name.

279
00:16:23.710 --> 00:16:27.450
We assign it to outer, I'll skip ahead.

280
00:16:27.450 --> 00:16:28.861
We're defining a function.

281
00:16:28.861 --> 00:16:31.384
And then we call the function and

282
00:16:31.384 --> 00:16:34.240
then what happens?
&gt;&gt; Speaker 2: Thanks for

283
00:16:34.240 --> 00:16:35.670
giving me fun stuff.

284
00:16:35.670 --> 00:16:41.280
So inside the function body we
declare the same name variable and

285
00:16:41.280 --> 00:16:43.560
we give it the value inner.
&gt;&gt; Bianca Gandolfo: Yep, so

286
00:16:43.560 --> 00:16:46.320
same name, we assign it to inner.

287
00:16:46.320 --> 00:16:47.360
And then it exits.

288
00:16:49.980 --> 00:16:55.670
Let's see, Cameron, what happens next?

289
00:16:55.670 --> 00:16:59.190
So we were just here, we just ran this.
&gt;&gt; Cameron: Line

290
00:16:59.190 --> 00:16:59.730
100.
&gt;&gt; Bianca Gandolfo: Mm-hm.

291
00:17:01.560 --> 00:17:03.490
&gt;&gt; Cameron: Set ACTUAL equal to the value

292
00:17:03.490 --> 00:17:11.580
of same name which is
&gt;&gt; Cameron: Outer?

293
00:17:11.580 --> 00:17:13.690
&gt;&gt; Bianca Gandolfo: Yep, which is outer.

294
00:17:13.690 --> 00:17:16.778
And then we should expect ACTUAL to equal?

295
00:17:16.778 --> 00:17:18.018
&gt;&gt; Cameron: Outer?

296
00:17:18.018 --> 00:17:23.390
&gt;&gt; Bianca Gandolfo: Outer.
&gt;&gt; Bianca Gandolfo: Cool.

297
00:17:27.676 --> 00:17:28.182
&gt;&gt; Bianca Gandolfo: All right.

298
00:17:34.745 --> 00:17:35.654
&gt;&gt; Bianca Gandolfo: So this one,

299
00:17:35.654 --> 00:17:39.872
a new variable scope is created for
every call to a function,

300
00:17:39.872 --> 00:17:42.120
as exemplified with a counter.

301
00:17:43.390 --> 00:17:47.933
So let's check this out.
&gt;&gt; Bianca Gandolfo: Chris,

302
00:17:47.933 --> 00:17:52.310
do you wanna start?
&gt;&gt; Kris: Sure, there's a variable created,

303
00:17:52.310 --> 00:17:56.619
fn, which is a function.
&gt;&gt; Bianca Gandolfo: We create this

304
00:17:56.619 --> 00:17:59.379
function, save it in a variable,
and then Abdi,

305
00:17:59.379 --> 00:18:02.110
what happens?
&gt;&gt; Abdi: Then we run that function?

306
00:18:02.110 --> 00:18:02.900
&gt;&gt; Bianca Gandolfo: We run the function.

307
00:18:02.900 --> 00:18:04.590
So we jump into the function body.

308
00:18:05.850 --> 00:18:08.509
And Jaime?
&gt;&gt; Jaime: And then we're setting

309
00:18:08.509 --> 00:18:12.968
innerCounter to.
&gt;&gt; Jaime: 10

310
00:18:12.968 --> 00:18:14.642
basically.
&gt;&gt; Bianca Gandolfo: Yeah, so

311
00:18:14.642 --> 00:18:17.778
we're setting the innerCounter to 10
because at this point innerCounter

312
00:18:17.778 --> 00:18:21.822
is undefined.
&gt;&gt; Bianca Gandolfo: And

313
00:18:21.822 --> 00:18:26.300
then Michael what happens next?
&gt;&gt; Michael: You're taking innerCounter,

314
00:18:26.300 --> 00:18:30.466
setting it to innerCounter +1.
&gt;&gt; Bianca Gandolfo: To

315
00:18:30.466 --> 00:18:32.340
innerCounter-
&gt;&gt; Michael: Can it,

316
00:18:32.340 --> 00:18:34.480
yeah I can read it by itself
in the same line, right?

317
00:18:34.480 --> 00:18:36.800
So that would make it 11.
&gt;&gt; Bianca Gandolfo: Yep.

318
00:18:37.800 --> 00:18:39.730
&gt;&gt; Michael: ACTUAL to be set to 11.

319
00:18:39.730 --> 00:18:41.910
&gt;&gt; Bianca Gandolfo: Yep, and then so

320
00:18:41.910 --> 00:18:44.320
we exit the body of this function.

321
00:18:44.320 --> 00:18:46.522
We find ourselves on line 113.
&gt;&gt; Michael: So

322
00:18:46.522 --> 00:18:51.188
we expect that to be 11.
&gt;&gt; Bianca Gandolfo: Yeah we'll

323
00:18:51.188 --> 00:18:53.067
expect that to be 11.

324
00:18:53.067 --> 00:18:59.159
Okay, this is gonna seem repetitive but,
it's actually very important.

325
00:18:59.159 --> 00:19:01.160
Aisha, do you wanna keep going?

326
00:19:01.160 --> 00:19:06.840
You like how I'm like do you want to but
really what I'm saying is you have to?

327
00:19:06.840 --> 00:19:09.868
Or you don't have to, strongly encouraged.

328
00:19:09.868 --> 00:19:13.550
[LAUGH]
&gt;&gt; Aisha: The function declared

329
00:19:16.010 --> 00:19:18.033
again?
&gt;&gt; Bianca Gandolfo: Is this declaring or

330
00:19:18.033 --> 00:19:18.630
invoked?
&gt;&gt; Aisha: Invoked.

331
00:19:18.630 --> 00:19:19.540
&gt;&gt; Bianca Gandolfo: It's being

332
00:19:19.540 --> 00:19:21.000
invoked, yes.

333
00:19:21.000 --> 00:19:24.030
So we call the function and
then we hop back into the function body.

334
00:19:25.120 --> 00:19:28.917
What happens next?
&gt;&gt; Altimeer: And

335
00:19:28.917 --> 00:19:32.904
now we're dealing with innerCounter is 11.
&gt;&gt; Bianca Gandolfo: So

336
00:19:32.904 --> 00:19:39.824
what is this line doing?
&gt;&gt; Altimeer: So

337
00:19:39.824 --> 00:19:44.584
we see the innerCounter is
actually innerCounter or

338
00:19:44.584 --> 00:19:45.764
10.
&gt;&gt; Bianca Gandolfo: So

339
00:19:45.764 --> 00:19:47.630
what is innerCounter?
&gt;&gt; Altimeer: 11.

340
00:19:47.630 --> 00:19:50.529
&gt;&gt; Bianca Gandolfo: Where does it say that

341
00:19:50.529 --> 00:19:56.093
we're defining 11?
&gt;&gt; Altimeer: When we defined

342
00:19:56.093 --> 00:20:01.461
on 113, line 113.
&gt;&gt; Bianca Gandolfo: Yeah,

343
00:20:01.461 --> 00:20:04.110
so that's a common misconception.

344
00:20:04.110 --> 00:20:08.230
But what happens is whenever you call a
function, you create a brand new function

345
00:20:08.230 --> 00:20:10.881
scope, every time.
&gt;&gt; Altimeer: So

346
00:20:10.881 --> 00:20:14.529
then it's 10?
&gt;&gt; Bianca Gandolfo: Mm-hm,

347
00:20:14.529 --> 00:20:20.220
it's 10.
&gt;&gt; Cameron: So

348
00:20:20.220 --> 00:20:25.210
then we set innerCounter to be itself
plus 1, so then it's set to 11 again.

349
00:20:25.210 --> 00:20:26.040
&gt;&gt; Bianca Gandolfo: It would be 11,

350
00:20:26.040 --> 00:20:27.660
ACTUAL would be set to 11.

351
00:20:27.660 --> 00:20:30.730
And we expect ACTUAL to equal-
&gt;&gt; Kris: 11.

352
00:20:30.730 --> 00:20:31.910
&gt;&gt; Bianca Gandolfo: 11, awesome.

353
00:20:34.320 --> 00:20:35.190
Any questions about that?

354
00:20:36.660 --> 00:20:41.200
So this is another kind of gotcha,
but very important.

355
00:20:41.200 --> 00:20:43.830
Every time we call a function and
when we get to the closure,

356
00:20:43.830 --> 00:20:47.500
this is gonna be really, really,
really, really drilled into your head.

357
00:20:47.500 --> 00:20:51.400
Every time we call a function
with the parentheses and

358
00:20:51.400 --> 00:20:56.214
location operator,
a brand new scope is created.

359
00:20:56.214 --> 00:21:00.334
Some people call it an execution context.

360
00:21:00.334 --> 00:21:05.349
And so you can think all the variables
in that scope, when the function

361
00:21:05.349 --> 00:21:10.966
is called it's gonna be initialized as
whatever they are, in this case 10.

362
00:21:10.966 --> 00:21:14.230
And then when you do it again,
it'll be initialized again.

363
00:21:16.100 --> 00:21:20.020
So they're separate,
they don't talk to each other.

364
00:21:20.020 --> 00:21:23.742
They're just two different worlds of

365
00:21:23.742 --> 00:21:30.620
scope.
&gt;&gt; Bianca Gandolfo: Good?

366
00:21:30.620 --> 00:21:34.052
Okay, let's see.

367
00:21:40.148 --> 00:21:40.978
&gt;&gt; Bianca Gandolfo: All right.

368
00:21:45.645 --> 00:21:46.650
&gt;&gt; Bianca Gandolfo: Let's do this.

369
00:21:46.650 --> 00:21:47.880
How many more do we have left?

370
00:21:47.880 --> 00:21:50.330
One, two, three, four.

371
00:21:51.580 --> 00:21:54.020
Okay, let's just do one more and
take a break.

372
00:21:57.420 --> 00:21:58.850
Has it been 30 minutes?

373
00:21:58.850 --> 00:22:03.880
Probably, right.
&gt;&gt; Bianca Gandolfo: I lose track of time.

374
00:22:03.880 --> 00:22:04.850
I can talk forever, though.

375
00:22:06.410 --> 00:22:11.850
Okay, so next one is, a new variable scope
is created for each call to a function,

376
00:22:11.850 --> 00:22:17.210
as exemplified with uninitialized
string variables, okay?

377
00:22:18.400 --> 00:22:23.330
So I think we left off with you, Ryan.
&gt;&gt; Ryan: Mm-hm.

378
00:22:23.330 --> 00:22:26.690
Function is named and declared.
&gt;&gt; Bianca Gandolfo: Yeah,

379
00:22:26.690 --> 00:22:31.280
function is yeah, name and
declared, and then it's called.

380
00:22:31.280 --> 00:22:33.430
We execute the function body.

381
00:22:33.430 --> 00:22:40.282
Dan, what happens next?
&gt;&gt; Dan: We're

382
00:22:40.282 --> 00:22:42.465
executing function body, sorry.
&gt;&gt; Bianca Gandolfo: Yeah,

383
00:22:42.465 --> 00:22:45.790
we're executing the function body.
&gt;&gt; Dan: You're declaring local variable

384
00:22:45.790 --> 00:22:47.570
not giving it a value?
&gt;&gt; Bianca Gandolfo: Yep,

385
00:22:47.570 --> 00:22:49.320
we are declaring this variable.

386
00:22:49.320 --> 00:22:52.649
When it's not declared it
holds the value undefined.

387
00:22:54.860 --> 00:23:00.200
And then we check if it's undefined.
&gt;&gt; Speaker 2: Since it is undefined,

388
00:23:00.200 --> 00:23:02.590
that'll return true and
will execute the if statements.

389
00:23:02.590 --> 00:23:05.792
And so
we'll set ACTUAL to the string 'alpha'.

390
00:23:05.792 --> 00:23:09.075
&gt;&gt; Bianca Gandolfo: Mm-hm, exactly,

391
00:23:09.075 --> 00:23:12.810
and then since we entered
into this if block,

392
00:23:12.810 --> 00:23:15.990
we will not enter into this else if,
so this gets skipped.

393
00:23:16.990 --> 00:23:19.350
And we go down to the next line.

394
00:23:19.350 --> 00:23:23.200
What happens here, Cameron?
&gt;&gt; Cameron: The variable is set to

395
00:23:23.200 --> 00:23:24.380
initialized.
&gt;&gt; Bianca Gandolfo: Yep.

396
00:23:26.080 --> 00:23:31.185
And then, Eddie, what happens?
&gt;&gt; Eddie: Then we're

397
00:23:31.185 --> 00:23:36.495
going into the expect,

398
00:23:36.495 --> 00:23:44.977
and ACTUAL will equal 'alpha'?
&gt;&gt; Bianca Gandolfo: Yep,

399
00:23:44.977 --> 00:23:51.640
then we're gonna call
the function one more time.

400
00:23:51.640 --> 00:23:53.660
We're gonna enter into the function body.

401
00:23:54.970 --> 00:23:57.060
We're going to initialize
this local variable.

402
00:23:57.060 --> 00:24:01.600
What happens next, Chris?
&gt;&gt; Kris: The local variable is

403
00:24:01.600 --> 00:24:02.600
initialized.

404
00:24:02.600 --> 00:24:06.707
So it will call the else statement,
ACTUAL equals omega.

405
00:24:10.349 --> 00:24:13.660
&gt;&gt; Bianca Gandolfo: So, we're actually re.

406
00:24:13.660 --> 00:24:16.000
So when we call the new function,

407
00:24:16.000 --> 00:24:19.200
it's gonna create a brand new scope.
&gt;&gt; Kris: So

408
00:24:19.200 --> 00:24:20.655
it will be undefined again?

409
00:24:20.655 --> 00:24:21.766
&gt;&gt; Bianca Gandolfo: Mm-hm.
&gt;&gt; [SOUND]

410
00:24:21.766 --> 00:24:24.820
&gt;&gt; Bianca Gandolfo: Yeah, it's okay.

411
00:24:24.820 --> 00:24:27.070
So then what will happen?

412
00:24:27.070 --> 00:24:29.529
Abdi?
&gt;&gt; Abdi: Once it's undefined,

413
00:24:29.529 --> 00:24:32.460
we'll set ACTUAL to equal 'alpha'.

414
00:24:32.460 --> 00:24:35.819
Through the 'alpha'?
&gt;&gt; Bianca Gandolfo: And then,

415
00:24:35.819 --> 00:24:42.084
we go down here, we set a local variable
to initialized, but this is still alpha.

