WEBVTT

1
00:00:00.243 --> 00:00:07.741
So, what we have left is
our currying exercise and

2
00:00:07.741 --> 00:00:11.675
our composing exercise.

3
00:00:11.675 --> 00:00:15.675
So here's our little reference for
how this works.

4
00:00:15.675 --> 00:00:20.400
So, Let's create a function called curry.

5
00:00:25.762 --> 00:00:29.086
Const curry equals some function,

6
00:00:29.086 --> 00:00:34.084
takes a function,
that's what it takes, and then,

7
00:00:38.240 --> 00:00:42.759
We need to Get it to work
with this behaviour, but

8
00:00:42.759 --> 00:00:45.239
with just two of them,
we don't need to do this.

9
00:00:50.636 --> 00:00:51.136
Okay?

10
00:00:55.740 --> 00:00:59.442
Just because for
this exercise I want to simplify it for

11
00:00:59.442 --> 00:01:03.928
everyone's Benefit really.

12
00:01:03.928 --> 00:01:07.140
Okay, so we have a function and

13
00:01:07.140 --> 00:01:12.585
we need to return a function,
we know that, right?

14
00:01:17.580 --> 00:01:18.080
Okay.

15
00:01:20.506 --> 00:01:24.448
So when we call it, we return a function,

16
00:01:24.448 --> 00:01:29.303
we call it a second time,
we wanna save that value.

17
00:01:29.303 --> 00:01:35.001
So we are going to need to be able to
take an argument there for the first one.

18
00:01:40.141 --> 00:01:44.188
And then,
we're gonna return another function,

19
00:01:44.188 --> 00:01:47.209
and we need to have a second argument.

20
00:01:51.085 --> 00:01:54.647
There, and
then once we get to that second argument,

21
00:01:54.647 --> 00:01:58.617
then we can call our function
with both of those arguments.

22
00:02:02.668 --> 00:02:06.227
Arg2, we probably wanna return it.

23
00:02:09.510 --> 00:02:11.595
All right, so shall we run this?

24
00:02:13.485 --> 00:02:20.935
So the first thing we do is we run
curry with our function name, okay?

25
00:02:22.801 --> 00:02:29.968
So our function name is abc,
and we return this function.

26
00:02:29.968 --> 00:02:35.295
So curried now holds
the value of this function

27
00:02:35.295 --> 00:02:40.073
body here, when we call it, so we can, so

28
00:02:40.073 --> 00:02:45.690
function is our abc,
then arg is going to be one.

29
00:02:48.644 --> 00:02:54.290
And then we return this
function We call it again,

30
00:02:54.290 --> 00:02:57.578
we can do that because it
returns a function, right?

31
00:02:57.578 --> 00:03:01.071
Remember when we tried it before it didn't
work because it returned undefined?

32
00:03:01.071 --> 00:03:04.822
Now it works because we are actually
returning a function, and

33
00:03:04.822 --> 00:03:07.949
we can do this little bit
where we do it twice in a row.

34
00:03:09.951 --> 00:03:16.217
And then we pass two,
And because of scope,

35
00:03:16.217 --> 00:03:21.435
we retain access to function arg,
and of course arg2.

36
00:03:21.435 --> 00:03:27.091
And so, we're two levels deep
recalling our function with arg and

37
00:03:27.091 --> 00:03:29.922
arg2 and returning that value.

38
00:03:31.599 --> 00:03:35.805
And that's the basis of
implementing a curry function.

39
00:03:35.805 --> 00:03:40.612
Obviously, it gets a little
bit more complicated

40
00:03:40.612 --> 00:03:45.425
when you have varying numbers of inputs,
right?

41
00:03:45.425 --> 00:03:48.403
Longer arguments, right?

42
00:03:48.403 --> 00:03:51.475
For this one,
we're just assuming there's two.

43
00:03:51.475 --> 00:03:55.233
But as you can imagine,
if you don't know how many there are,

44
00:03:55.233 --> 00:04:00.092
there's some looping involved, probably
some recursion to get that to work.

45
00:04:00.092 --> 00:04:03.455
But that's the basic value, so
we're just returning nested functions.

46
00:04:08.501 --> 00:04:09.830
Cool?

47
00:04:09.830 --> 00:04:11.106
Any questions about this?

48
00:04:16.267 --> 00:04:20.498
No?
Okay, and the next one is compose.

49
00:04:23.271 --> 00:04:28.435
Let's get our little example Just so

50
00:04:28.435 --> 00:04:32.518
we have something to run.

51
00:04:33.806 --> 00:04:34.306
Okay.

52
00:04:36.925 --> 00:04:40.996
Get our word wrap, perfect.

53
00:04:40.996 --> 00:04:45.470
Okay, so we have our composed function,
and for this case,

54
00:04:45.470 --> 00:04:47.595
we're gonna do two as well.

55
00:04:49.546 --> 00:04:54.660
So we're gonna say const
compose equals a function,

56
00:04:54.660 --> 00:04:58.194
and it's gonna take two arguments.

57
00:05:03.547 --> 00:05:07.082
Okay?
And the first thing that needs to happen,

58
00:05:09.883 --> 00:05:16.500
Is that we need to return a function so
that we can call it later.

59
00:05:16.500 --> 00:05:21.845
So let's set that up,
let's return a function.

60
00:05:24.815 --> 00:05:30.701
Here, and it needs to be able
to take some arguments here.

61
00:05:35.557 --> 00:05:39.859
Let's just say it'll take one for
now, and then,

62
00:05:41.533 --> 00:05:46.141
We wanna first call exclaim,
so that's the second one so

63
00:05:46.141 --> 00:05:51.721
we're gonna call, let's call this
function one and function two.

64
00:05:54.191 --> 00:06:01.642
So let's call function two with our arg,
and we're gonna return that to a result.

65
00:06:05.164 --> 00:06:10.791
And then, we're going to pass that
result into the original function,

66
00:06:10.791 --> 00:06:14.019
the first function that we passed in, and

67
00:06:14.019 --> 00:06:18.092
we're just going to return
whatever that returns.

68
00:06:23.659 --> 00:06:27.620
And there you have it, so and
this isn't taking a consideration of

69
00:06:27.620 --> 00:06:32.376
variable number of functions passed or
a variable number of arguments passed.

70
00:06:32.376 --> 00:06:38.099
Similarly with curry,
you'd have to probably

71
00:06:38.099 --> 00:06:43.402
keep track of how many
functions there are.

72
00:06:43.402 --> 00:06:47.504
And then for args, here, this would
be a problem with an error function.

73
00:06:47.504 --> 00:06:50.923
Because we probably would wanna retain
access to the argument's keyword, so

74
00:06:50.923 --> 00:06:53.063
we would need to use
a regular function for that.

75
00:06:53.063 --> 00:07:00.169
So those are some considerations for
a more robust solution to compose.

76
00:07:02.493 --> 00:07:05.517
But again, so
here we're returning a function

77
00:07:07.065 --> 00:07:11.868
With an argument passed in the second one,
and this one we're returning nested

78
00:07:11.868 --> 00:07:16.330
arrays until we get everything that
we need to finally call our function.

79
00:07:16.330 --> 00:07:24.729
We retain access because parameters are
just like local scope variables, and yeah.

80
00:07:24.729 --> 00:07:26.577
Any questions about those solutions?

81
00:07:31.161 --> 00:07:35.932
&gt;&gt; So if we wanted to basically generalize
either of these, we can get into

82
00:07:35.932 --> 00:07:40.863
like storing arguments or functions
in an array in the arguments object,

83
00:07:40.863 --> 00:07:45.331
and then slicing it off one by one and
doing that like recursively?

84
00:07:45.331 --> 00:07:48.540
That's basically how you
would kinda go about it?

85
00:07:48.540 --> 00:07:57.627
&gt;&gt; Yeah, well, I think for This one,
if this wasn't an error function and

86
00:07:57.627 --> 00:08:01.204
we had access to the arguments array
&gt;&gt; Yeah.

87
00:08:01.204 --> 00:08:05.014
&gt;&gt; You could really
just do function apply.

88
00:08:05.014 --> 00:08:05.734
&gt;&gt; Okay.

89
00:08:05.734 --> 00:08:11.043
&gt;&gt; These arguments That
would make it general.

90
00:08:11.043 --> 00:08:16.020
But for this, for calling each of
those functions with the result of

91
00:08:16.020 --> 00:08:19.530
that function would
require some kind of loop.

92
00:08:19.530 --> 00:08:20.202
&gt;&gt; Yeah.

93
00:08:20.202 --> 00:08:24.748
&gt;&gt; Whether it's recursive loop, or
a while loop, or something like that, or

94
00:08:24.748 --> 00:08:28.098
just a regular loop,
that's what you would have to do.

95
00:08:28.098 --> 00:08:28.679
&gt;&gt; Okay.

96
00:08:28.679 --> 00:08:29.179
&gt;&gt; Yeah.

