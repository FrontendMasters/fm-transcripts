WEBVTT

1
00:00:00.200 --> 00:00:02.490
&gt;&gt; Bianca Gandolfo: So, I know this course
isn't about functional programming, but

2
00:00:02.490 --> 00:00:07.030
I thought I should say a few words about
it just because of the name of the course.

3
00:00:07.030 --> 00:00:10.900
So, functional programming
is a programming style

4
00:00:10.900 --> 00:00:13.240
that is really hip right now, yeah?

5
00:00:13.240 --> 00:00:13.830
Do you guys know?

6
00:00:13.830 --> 00:00:15.040
It's the cool thing.

7
00:00:15.040 --> 00:00:18.581
It was very hip for a while, but
it's becoming more and more hip, and

8
00:00:18.581 --> 00:00:22.510
I guess maybe before was more hipster and
now it's becoming more hip right?

9
00:00:22.510 --> 00:00:29.313
It's integrated into more front and
frame works and things like that and

10
00:00:29.313 --> 00:00:36.004
it's become an expectation that you
can read functional style code and

11
00:00:36.004 --> 00:00:40.370
use functional utility
methods in your code.

12
00:00:40.370 --> 00:00:44.320
And they come for
free with JavaScript, right?

13
00:00:44.320 --> 00:00:49.520
You have a lot of array methods
that are functional leaning.

14
00:00:51.990 --> 00:00:53.920
So what is functional programming about?

15
00:00:53.920 --> 00:00:59.210
It's about breaking up your
code into verbs, really, right?

16
00:00:59.210 --> 00:01:01.770
They say functional
programming is about verbs,

17
00:01:01.770 --> 00:01:04.910
object oriented programming
is about the nouns, right?

18
00:01:04.910 --> 00:01:11.420
It's a lot easier for you to think about
software in terms of objects just because,

19
00:01:11.420 --> 00:01:16.570
as humans, that's kind of where we
live in the physical world, right?

20
00:01:16.570 --> 00:01:19.180
This is a podium, I have my laptop, right.

21
00:01:19.180 --> 00:01:23.578
We think in terms of nouns
where as functional programming

22
00:01:23.578 --> 00:01:27.030
you're thinking in terms of the actions.

23
00:01:27.030 --> 00:01:31.176
So if we were going to build a house,
in object oriented programming,

24
00:01:31.176 --> 00:01:34.762
we would talk about the walls,
and doors, and the windows,

25
00:01:34.762 --> 00:01:38.208
and in functional programming,
we talk about opening and

26
00:01:38.208 --> 00:01:41.680
closing and we would apply it
to the material of the house.

27
00:01:41.680 --> 00:01:45.592
Or we would talk about, what is another
action that you can do in a house?

28
00:01:45.592 --> 00:01:50.281
Turning something on or turning
something off, so we're thinking and

29
00:01:50.281 --> 00:01:53.496
designing our software
around these concepts.

30
00:01:53.496 --> 00:01:58.546
And so we use a lot of functions,
hence the name functional programming.

31
00:01:58.546 --> 00:02:04.690
And we are passing functions to functions,
returning functions from functions,

32
00:02:04.690 --> 00:02:07.540
doing things with the arguments and
the parameters.

33
00:02:10.730 --> 00:02:12.150
Yeah, so it's a style.

34
00:02:13.350 --> 00:02:15.710
This is not about functional
reactive programming.

35
00:02:17.090 --> 00:02:22.390
Functional reactive programming is
a functional style with streams,

36
00:02:22.390 --> 00:02:23.390
observable streams.

37
00:02:23.390 --> 00:02:25.750
Have you guys seen, or
heard of observable streams?

38
00:02:27.910 --> 00:02:30.680
So that's the other really
cool thing these days.

39
00:02:30.680 --> 00:02:34.350
And I wish I had time to teach it, cuz
it is really cool, but it is what it is.

40
00:02:34.350 --> 00:02:35.658
&gt;&gt; Speaker 2: We had two courses on that.

41
00:02:35.658 --> 00:02:37.054
&gt;&gt; Bianca Gandolfo: What's that?

42
00:02:37.054 --> 00:02:38.700
&gt;&gt; Speaker 2: Observables.

43
00:02:38.700 --> 00:02:39.240
&gt;&gt; Bianca Gandolfo: Good.
&gt;&gt; Speaker 2: So,

44
00:02:39.240 --> 00:02:43.335
we have asynchronous programming
with JavaScript with Jaffer Hussein.

45
00:02:44.370 --> 00:02:46.270
&gt;&gt; Bianca Gandolfo: Cool
&gt;&gt; Speaker 2: And that's a two-day course

46
00:02:46.270 --> 00:02:49.210
and then we also have an advanced one.

47
00:02:49.210 --> 00:02:50.221
&gt;&gt; Bianca Gandolfo: Awesome, perfect, yeah
&gt;&gt; Speaker 2: So

48
00:02:50.221 --> 00:02:53.770
that's all about observables, and rx,
and operators, and all that stuff.

49
00:02:53.770 --> 00:02:56.440
&gt;&gt; Bianca Gandolfo: Yeah, so
that's beyond the scope of this.

50
00:02:58.140 --> 00:03:02.700
Is it a two day course only on observable
streams or just reactive in general?

51
00:03:02.700 --> 00:03:06.598
&gt;&gt; Speaker 2: Well it's kind of
mostly reactive programming,

52
00:03:06.598 --> 00:03:08.057
like taking a-
&gt;&gt; Bianca Gandolfo: Yeah,

53
00:03:08.057 --> 00:03:08.756
I guess it has to be.

54
00:03:08.756 --> 00:03:11.050
&gt;&gt; Speaker 2: A data model,
array, whatever.

55
00:03:11.050 --> 00:03:12.360
&gt;&gt; Bianca Gandolfo: Yeah, okay.

56
00:03:12.360 --> 00:03:17.398
&gt;&gt; Speaker 2: Converting it to
observable and interacting with streams.

57
00:03:17.398 --> 00:03:20.560
&gt;&gt; Bianca Gandolfo: Got it, cool.

58
00:03:20.560 --> 00:03:24.860
So we're not gonna be talking about rs,
JS or anything like that.

59
00:03:24.860 --> 00:03:28.750
The things that we're gonna learn
are gonna be more on the line of Lodash,

60
00:03:28.750 --> 00:03:32.010
Underscore, Ramda, things like that.

61
00:03:32.010 --> 00:03:33.989
Have you guys heard of
any of these libraries?

62
00:03:35.160 --> 00:03:36.980
Who's heard of Underscore?

63
00:03:36.980 --> 00:03:38.040
Raise it high.

64
00:03:38.040 --> 00:03:40.770
Who's heard of Lodash?

65
00:03:40.770 --> 00:03:42.430
Awesome, who's heard of Ramda?

66
00:03:42.430 --> 00:03:48.200
Okay, so Ramda is a little more,
so Lodash and

67
00:03:48.200 --> 00:03:52.290
Underscore are utility libraries that give
you fun little functions that help you

68
00:03:52.290 --> 00:03:56.340
really transform data, and
things like that, loop filter, etc.

69
00:03:57.750 --> 00:04:03.050
And Ramda is kind of a more
hardcore version of that.

70
00:04:04.860 --> 00:04:07.000
So, we'll look more into it in a bit.

71
00:04:07.000 --> 00:04:11.011
We're not really gonna talk any more about
functional programming as a style, so

72
00:04:11.011 --> 00:04:13.753
if you have any burning questions,
now it's the time.

73
00:04:13.753 --> 00:04:16.764
I'm not a hardcore functional programmer,

74
00:04:16.764 --> 00:04:20.724
I only teach this class and
this style because I've seen and

75
00:04:20.724 --> 00:04:25.094
I believe that it really helps
you become a stronger programmer.

76
00:04:25.094 --> 00:04:29.561
So I don't have strong
opinions about architecting in

77
00:04:29.561 --> 00:04:33.890
a functional style or some people-
&gt;&gt; Speaker 3: Could you just

78
00:04:33.890 --> 00:04:38.522
give some benefits that you see of
functional programming as opposed to OOP?

79
00:04:38.522 --> 00:04:40.040
&gt;&gt; Bianca Gandolfo: Yeah, sure.

80
00:04:40.040 --> 00:04:45.147
So, I think that one of of the core
tenets of functional programming

81
00:04:45.147 --> 00:04:49.538
is making pure functions that
don't have side effects and

82
00:04:49.538 --> 00:04:53.470
in doing that your code
is a lot easier to test.

83
00:04:53.470 --> 00:04:55.280
And it's a lot easier to trust.

84
00:04:55.280 --> 00:04:59.580
And so
that's a benefit over object oriented.

85
00:04:59.580 --> 00:05:03.480
However, the thing about functional
programming is that if you're doing web,

86
00:05:03.480 --> 00:05:04.810
you have to have side effects, right?

87
00:05:04.810 --> 00:05:07.950
DOM manipulation, all this stuff,
are side effects.

88
00:05:07.950 --> 00:05:10.210
A pure function as a input and an output.

89
00:05:10.210 --> 00:05:11.090
It can't do anything and

90
00:05:11.090 --> 00:05:15.730
effect any other data outside of
the scope of that function, right?

91
00:05:15.730 --> 00:05:19.380
Which makes it easy to test and
that's great but in the real world,

92
00:05:19.380 --> 00:05:24.480
especially in what we do, it's not always,
you can't do a purely functional.

93
00:05:26.030 --> 00:05:27.570
And also some people get too crazy.

94
00:05:27.570 --> 00:05:31.979
I don't know if anyone has seen a very
very hardcore functional programmer's

95
00:05:31.979 --> 00:05:33.500
code-base.

96
00:05:33.500 --> 00:05:34.830
Has anyone seen that?

97
00:05:34.830 --> 00:05:36.080
It can be really scary.

98
00:05:36.080 --> 00:05:39.515
&gt;&gt; Speaker 2: Especially, yeah,
when they're using bifunctor map.

99
00:05:39.515 --> 00:05:43.335
It's one thing to just use map,
but it's like, okay,

100
00:05:43.335 --> 00:05:46.669
let's swap the arguments, plus-
&gt;&gt; Bianca Gandolfo: Yeah, it gets-

101
00:05:46.669 --> 00:05:47.614
&gt;&gt; Speaker 2: Wrap it in a functor, and

102
00:05:47.614 --> 00:05:49.420
then all that's created, so.

103
00:05:49.420 --> 00:05:50.770
&gt;&gt; Bianca Gandolfo: Yeah,
it gets super crazy.

104
00:05:50.770 --> 00:05:51.640
We're not going there.

105
00:05:51.640 --> 00:05:56.040
And I don't think that that's even-
&gt;&gt; Speaker 2: Does it always sacrifice

106
00:05:56.040 --> 00:05:57.010
readability?

107
00:05:57.010 --> 00:05:59.560
&gt;&gt; Bianca Gandolfo: No,
it doesn't have to, it doesn't have to.

108
00:05:59.560 --> 00:06:03.580
&gt;&gt; Speaker 2: Yeah, that's the whole thing
around Cal Simpson's functional light

109
00:06:03.580 --> 00:06:04.121
course.

110
00:06:04.121 --> 00:06:05.307
&gt;&gt; Bianca Gandolfo: Mm-hm.

111
00:06:05.307 --> 00:06:08.778
&gt;&gt; Speaker 2: He has a course on there,
which he's trying to bridge the gap

112
00:06:08.778 --> 00:06:13.850
between sort of the basic functional
concepts and applicable, readable code.

113
00:06:13.850 --> 00:06:18.210
A functional can actually
make your code more

114
00:06:18.210 --> 00:06:23.142
readable if you use it
without going to the extremes

115
00:06:23.142 --> 00:06:27.747
of crazy monoid structures and
all that stuff.

116
00:06:27.747 --> 00:06:31.674
But the basics of functional can
clean up your code drastically, and

117
00:06:31.674 --> 00:06:33.240
make it way more readable.

118
00:06:35.070 --> 00:06:37.270
&gt;&gt; Bianca Gandolfo: Yeah, and
it can help you prevent errors and

119
00:06:37.270 --> 00:06:41.750
stuff as well,
off by one errors with loops.

120
00:06:41.750 --> 00:06:44.180
And we'll talk a little bit about that,
each, and map, and

121
00:06:44.180 --> 00:06:49.280
things like that will help you
prevent those kinds of errors.

122
00:06:49.280 --> 00:06:53.630
But we're not gonna talk about monads,
or monoids, or functors, or

123
00:06:53.630 --> 00:06:56.100
anything super academic.

124
00:06:56.100 --> 00:06:59.700
My style is we're gonna keep it practical,
things that you actually

125
00:07:01.500 --> 00:07:05.710
need to know to understand
the fundamentals.

126
00:07:05.710 --> 00:07:09.450
And then grow into something like the next

127
00:07:09.450 --> 00:07:11.970
functional programing
course that you take.

128
00:07:11.970 --> 00:07:13.990
Whether it's Cal Simpson's one,

129
00:07:13.990 --> 00:07:18.520
which I think, it's not a big
jump from this course, right?

130
00:07:18.520 --> 00:07:21.270
&gt;&gt; Speaker 2: Yeah, I mean,
he does get pretty deep.

131
00:07:21.270 --> 00:07:24.000
It's a deep course but
it starts very basic.

132
00:07:24.000 --> 00:07:26.480
&gt;&gt; Bianca Gandolfo: It's not as
hard as Dr. Bullion's though.

133
00:07:26.480 --> 00:07:27.383
&gt;&gt; Speaker 2: Yeah, yeah, if you go to

134
00:07:27.383 --> 00:07:29.279
Hardcore Functional Programming,
&gt;&gt; Bianca Gandolfo: Yeah,

135
00:07:29.279 --> 00:07:31.418
it's called
Hardcore Functional Programming, so.

136
00:07:31.418 --> 00:07:37.466
&gt;&gt; Speaker 2: Yeah, it's more like
taking and turning JMA into JavaScript.

137
00:07:37.466 --> 00:07:38.040
&gt;&gt; Bianca Gandolfo: Yeah, so

138
00:07:38.040 --> 00:07:41.450
we won't be getting into that, but
if you're interested in that and

139
00:07:41.450 --> 00:07:44.640
you've tried it, and you're like, I have
no idea, this is a good place to start.

