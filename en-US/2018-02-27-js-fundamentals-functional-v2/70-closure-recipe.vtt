WEBVTT

1
00:00:00.270 --> 00:00:02.511
&gt;&gt; Bianca Gandolfo: So
I've been lying to you.

2
00:00:02.511 --> 00:00:05.190
We've been talking about
closures this whole time.

3
00:00:06.340 --> 00:00:10.993
So that concept we've been
talking about is the elusive

4
00:00:10.993 --> 00:00:13.674
closure that you've heard of.

5
00:00:13.674 --> 00:00:16.040
Have you guys heard of a closure before?

6
00:00:16.040 --> 00:00:23.168
What is a closure?
&gt;&gt; Bianca Gandolfo: Yeah,

7
00:00:23.168 --> 00:00:26.460
it's when a function is inside
of a function that creates.

8
00:00:26.460 --> 00:00:27.340
&gt;&gt; Speaker 2: Scope isolation.

9
00:00:29.230 --> 00:00:30.000
&gt;&gt; Bianca Gandolfo: It's good way to think

10
00:00:30.000 --> 00:00:33.744
of it.
&gt;&gt; Bianca Gandolfo: Yeah, so,

11
00:00:33.744 --> 00:00:38.580
a closure happens when you put two
functions inside of a function.

12
00:00:38.580 --> 00:00:43.990
And you could take advantage of
that by returning a function

13
00:00:43.990 --> 00:00:48.730
that retains access to it's parent
function even after it has been executed,

14
00:00:48.730 --> 00:00:51.610
so that's a closure.

15
00:00:53.390 --> 00:00:58.900
And you've been using
them pretty seamlessly so

16
00:00:58.900 --> 00:01:03.280
far, it's a good job.

17
00:01:03.280 --> 00:01:04.900
So here's a recipe for a closure.

18
00:01:06.370 --> 00:01:13.030
So, closure's come in different forms,
but this is kinda just a guide.

19
00:01:14.060 --> 00:01:17.240
So you have a parent function, right?

20
00:01:17.240 --> 00:01:22.320
And then you have your inner function,
in between your parent function and

21
00:01:22.320 --> 00:01:23.140
your child function,

22
00:01:23.140 --> 00:01:27.170
you need to make sure that there's some
variable there that you can store value.

23
00:01:27.170 --> 00:01:31.690
Could be a variable that you declare or
it could be a parameter value as well.

24
00:01:31.690 --> 00:01:36.523
Then inside the inner function,
you either want to access or

25
00:01:36.523 --> 00:01:40.229
manipulate the function
in the parent scope.

26
00:01:41.390 --> 00:01:46.914
And then you return that function so
that later you can call it and

27
00:01:46.914 --> 00:01:54.204
do whatever fun stuff that you wanna do.
&gt;&gt; Bianca Gandolfo: Cool,

28
00:01:54.204 --> 00:01:55.861
so that's how you create it and

29
00:01:55.861 --> 00:02:00.443
then there's the execution part.
&gt;&gt; Bianca Gandolfo: And so

30
00:02:00.443 --> 00:02:06.130
the execution part is you want to call the
parent function, save it to a variable.

31
00:02:06.130 --> 00:02:06.670
Because remember,

32
00:02:06.670 --> 00:02:11.120
it's returning a function that
we're gonna call later, right?

33
00:02:11.120 --> 00:02:14.870
So we need to save it into our variable.

34
00:02:14.870 --> 00:02:17.490
This variable is a function,
so if I just write out test,

35
00:02:17.490 --> 00:02:18.760
it's gonna return a function.

36
00:02:19.790 --> 00:02:24.099
And then, when you call it, it'll execute
the function just like we have been doing,

37
00:02:24.099 --> 00:02:33.024
and it'll return the scope.
&gt;&gt; Bianca Gandolfo: Any questions?

38
00:02:33.024 --> 00:02:38.346
No, okay, so this is a bit of a gotcha.

39
00:02:38.346 --> 00:02:47.262
So when we call this function.
&gt;&gt; Bianca Gandolfo: So

40
00:02:47.262 --> 00:02:51.646
let's see find someone,

41
00:02:51.646 --> 00:02:57.632
it's gonna return speak, right?

42
00:02:57.632 --> 00:03:02.364
So let's call this

43
00:03:02.364 --> 00:03:06.510
someone speak.

44
00:03:06.510 --> 00:03:09.658
And the first thing we're gonna do
is we're gonna define that function,

45
00:03:09.658 --> 00:03:11.830
nothing is gonna be called yet.

46
00:03:11.830 --> 00:03:17.611
Who is gonna be defined,
and then we return speak.

47
00:03:17.611 --> 00:03:18.514
What do you think is going to

48
00:03:18.514 --> 00:03:23.449
happen when we do this?
&gt;&gt; Speaker 3: We'll

49
00:03:23.449 --> 00:03:25.640
get the function body of speak.

50
00:03:36.350 --> 00:03:39.825
&gt;&gt; Speaker 3: Undefined.
&gt;&gt; Bianca Gandolfo: Well,

51
00:03:39.825 --> 00:03:44.947
we haven't called someone speak yet.
&gt;&gt; Bianca Gandolfo: Okay?

52
00:03:44.947 --> 00:03:47.580
So, someone speak is now this function.

53
00:03:47.580 --> 00:03:51.459
The question is, do we have access to

54
00:03:51.459 --> 00:03:57.071
who?
&gt;&gt; Speaker 3: No because it was

55
00:03:57.071 --> 00:04:01.306
defined after the function was declared.
&gt;&gt; Bianca Gandolfo: Yeah.

56
00:04:01.306 --> 00:04:02.720
&gt;&gt; Speaker 3: A box scope inside

57
00:04:02.720 --> 00:04:03.820
the original function so

58
00:04:03.820 --> 00:04:08.347
it didn't have access across.
&gt;&gt; Bianca Gandolfo: Well, it's so

59
00:04:08.347 --> 00:04:11.770
it's technically in the parent scope.
&gt;&gt; Speaker 3: So

60
00:04:11.770 --> 00:04:16.420
that doesn't automatically create
the block unless you use the braces.

61
00:04:16.420 --> 00:04:18.094
&gt;&gt; Bianca Gandolfo: Yeah exactly,

62
00:04:18.094 --> 00:04:22.986
otherwise, I mean,
maybe it would be scoped

63
00:04:22.986 --> 00:04:27.639
to the block, which is this parent block?

64
00:04:27.639 --> 00:04:36.047
Yeah exactly.
&gt;&gt; Speaker 2: It worked.

65
00:04:36.047 --> 00:04:36.810
&gt;&gt; Bianca Gandolfo: Why did it

66
00:04:36.810 --> 00:04:43.369
work?
&gt;&gt; Bianca Gandolfo: So

67
00:04:43.369 --> 00:04:47.788
it worked because as we
ran through this function,

68
00:04:47.788 --> 00:04:53.060
we defined speak, and
then we defined our variable.

69
00:04:53.060 --> 00:04:57.699
Now this variable exists in this
function execution context.

70
00:04:59.260 --> 00:05:04.530
And then we return speak, and
later we called it down here.

71
00:05:04.530 --> 00:05:10.575
We went back in here and this who is
gonna look first in its own context and

72
00:05:10.575 --> 00:05:13.740
say Mh-mm,
do I have a variable called who?

73
00:05:13.740 --> 00:05:17.780
It's gonna say no, I don't and then it
will look in the parent context and

74
00:05:17.780 --> 00:05:18.359
it does.

75
00:05:19.440 --> 00:05:24.400
So even though it's visibly after

76
00:05:24.400 --> 00:05:29.090
that function definition, it's still valid
because it has already been defined.

77
00:05:31.840 --> 00:05:33.520
And you can tell by
the way that it executes.

78
00:05:33.520 --> 00:05:36.980
That's why it's really
important to understand exactly

79
00:05:36.980 --> 00:05:39.510
how the function executes,
and in what order.

80
00:05:39.510 --> 00:05:42.859
Because these kinds of
tricky things can come up,

81
00:05:42.859 --> 00:05:47.166
especially when you are returning
functions from functions and

82
00:05:47.166 --> 00:05:52.881
all of that.
&gt;&gt; Speaker 2: Yeah,

83
00:05:52.881 --> 00:05:59.100
okay, we can see how many more.
&gt;&gt; Bianca Gandolfo: Okay, just two more.

84
00:06:00.530 --> 00:06:06.296
So here's a timer, this is one of the more
famous examples of using a closure.

85
00:06:06.296 --> 00:06:11.640
Let's run it.
&gt;&gt; Bianca Gandolfo: All right,

86
00:06:11.640 --> 00:06:19.490
so we have our makeTimer.
&gt;&gt; Bianca Gandolfo: And we initialize it.

87
00:06:21.880 --> 00:06:26.290
So we create elapsed, we create stopwatch,

88
00:06:26.290 --> 00:06:29.915
which is a function that
just returns elapsed.

89
00:06:29.915 --> 00:06:33.157
And then we have, excuse me,

90
00:06:33.157 --> 00:06:38.860
we have increase which increments elapsed.

91
00:06:38.860 --> 00:06:40.130
And then we have the setInterval.

92
00:06:40.130 --> 00:06:44.492
And setInterval is just a method
that will call the first,

93
00:06:44.492 --> 00:06:49.580
the function that's passed to
it every 1,000 milliseconds.

94
00:06:49.580 --> 00:06:54.453
And you can change this,
1,000 milliseconds is one second, so

95
00:06:54.453 --> 00:06:56.980
that's why this is a second timer.

96
00:06:56.980 --> 00:07:00.200
And then we're gonna return stopwatch.

97
00:07:01.420 --> 00:07:08.170
So let's check out what timer looks like,
and it's just a little stopwatch function.

98
00:07:08.170 --> 00:07:12.106
Well, we can see how long ago
we called that function here, so

99
00:07:12.106 --> 00:07:18.009
we called it about 54 seconds ago.
&gt;&gt; Bianca Gandolfo: And

100
00:07:18.009 --> 00:07:22.877
so, you can see how you could use a
closure to kind of hide away functionality

101
00:07:22.877 --> 00:07:26.470
that you don't want people to mess with,
right?

102
00:07:26.470 --> 00:07:31.872
So for a timer, the consumer of this data
should only have access to the time.

103
00:07:31.872 --> 00:07:37.558
They shouldn't be able to mess
with the increase method or

104
00:07:37.558 --> 00:07:44.881
anything like that.
&gt;&gt; Bianca Gandolfo: But you may wanna

105
00:07:44.881 --> 00:07:49.893
return the interval in case you wanna
stop it, cuz it will just go on forever.

106
00:07:49.893 --> 00:07:50.765
I'm a bit confused,

107
00:07:50.765 --> 00:07:55.681
why is it not returning,
&gt;&gt; Bianca Gandolfo: Since makeTimer

108
00:07:55.681 --> 00:08:02.416
returns stopwatch,
which is the function body of stopwatch,

109
00:08:02.416 --> 00:08:07.297
then we,
&gt;&gt; Speaker 3: We have

110
00:08:07.297 --> 00:08:10.096
a new timer in parenthesis,

111
00:08:10.096 --> 00:08:14.142
why are we not getting back zero?
&gt;&gt; Bianca Gandolfo: Yeah.

112
00:08:14.142 --> 00:08:14.876
&gt;&gt; Speaker 3: Know what I mean?

113
00:08:14.876 --> 00:08:18.388
&gt;&gt; Bianca Gandolfo: Yeah, it's because all

114
00:08:18.388 --> 00:08:23.660
of these shares the same scope.

115
00:08:23.660 --> 00:08:26.140
So, we only called makeTimer once.

116
00:08:26.140 --> 00:08:30.660
So elapsed has one value and
one execution context

117
00:08:31.990 --> 00:08:35.950
and so we returned that great.

118
00:08:37.220 --> 00:08:42.180
When we return it down here,
we first ran all of this,

119
00:08:42.180 --> 00:08:48.137
which started an interval and
that interval whether we like it or

120
00:08:48.137 --> 00:08:55.006
not and it's just gonna keep running
every second and increase elapsed.

121
00:08:55.006 --> 00:08:59.730
So, it's gonna call this function every
second and it's gonna increase that.

122
00:08:59.730 --> 00:09:04.556
And so,
these methods are mutating the value

123
00:09:04.556 --> 00:09:08.821
here.
&gt;&gt; Bianca Gandolfo: This

124
00:09:08.821 --> 00:09:14.267
function is only reading it.
&gt;&gt; Bianca Gandolfo: So

125
00:09:14.267 --> 00:09:18.298
it's being change by these functions cuz
if you think about it they all live in

126
00:09:18.298 --> 00:09:20.190
the same execution context.

127
00:09:20.190 --> 00:09:26.550
So if one value is changing it it's
gonna have access to the same value.

128
00:09:28.460 --> 00:09:32.900
Because, again,
we make the execution context here for

129
00:09:32.900 --> 00:09:36.710
this one as the parent scope.

130
00:09:36.710 --> 00:09:41.430
And just because before we didn't do that,

131
00:09:42.710 --> 00:09:47.500
doesn't mean that the methods can
share scope and change the data.

132
00:09:47.500 --> 00:09:50.460
And it can affect other things
that are relying on that data.

133
00:09:50.460 --> 00:09:54.721
Which goes back to Michael's point, you
have to be careful when you're changing

134
00:09:54.721 --> 00:09:56.833
your data because it can affect things.

135
00:10:05.260 --> 00:10:06.440
&gt;&gt; Bianca Gandolfo: Just
gonna keep going forever.

136
00:10:08.090 --> 00:10:10.276
So what happens if you
just run timer without

137
00:10:10.276 --> 00:10:16.348
parenthesis?
&gt;&gt; Bianca Gandolfo: It's

138
00:10:16.348 --> 00:10:21.195
just a function definition, but
it retains access to its parent scope,

139
00:10:21.195 --> 00:10:26.250
and that scope is being retained access
by this increase function as well.

140
00:10:26.250 --> 00:10:29.856
The increase function still has access and

141
00:10:29.856 --> 00:10:34.263
is incrementing it even
though we're not doing it,

142
00:10:34.263 --> 00:10:39.853
it's being done in the back.
&gt;&gt; Bianca Gandolfo: All

143
00:10:39.853 --> 00:10:44.358
right.
&gt;&gt; Bianca Gandolfo: Here's

144
00:10:44.358 --> 00:10:47.194
the same thing with a lot of console logs,

145
00:10:47.194 --> 00:10:52.371
to kinda give you a feel.
&gt;&gt; Bianca Gandolfo: Let me open another

146
00:10:52.371 --> 00:11:00.889
tab.
&gt;&gt; Bianca Gandolfo: So,

147
00:11:00.889 --> 00:11:07.960
it'll be initialized and
it's gonna be elapsed and

148
00:11:07.960 --> 00:11:12.138
then we are going to say timer,

149
00:11:12.138 --> 00:11:17.441
we're gonna call it, which is going to

150
00:11:17.441 --> 00:11:22.759
console.log('stopwatch');.

