WEBVTT

1
00:00:00.000 --> 00:00:05.926
So, I've been lying to you, we've been
talking about closures this whole time.

2
00:00:05.926 --> 00:00:11.114
So that concept that we've been
talking about is the elusive closure

3
00:00:11.114 --> 00:00:15.951
that you've heard of,
have you guys heard of a closure before?

4
00:00:15.951 --> 00:00:18.452
What is a closure?.

5
00:00:22.726 --> 00:00:25.412
Yeah, that's what a function is
inside of a function that creates.

6
00:00:25.412 --> 00:00:27.887
&gt;&gt; Scope isolation?

7
00:00:27.887 --> 00:00:29.799
&gt;&gt; It's a good way to think of it.

8
00:00:32.807 --> 00:00:38.487
Yeah, so a closure happens when you put
two functions inside of a function,

9
00:00:38.487 --> 00:00:43.725
and you can take advantage of that
by returning a function that retains

10
00:00:43.725 --> 00:00:48.464
access to its parent function
even after it has been executed.

11
00:00:48.464 --> 00:00:53.954
So that's a closure, and
you've been using them.

12
00:00:56.822 --> 00:01:00.891
Pretty seamlessly so far, good job.

13
00:01:03.010 --> 00:01:05.997
So here's a recipe for closure.

14
00:01:05.997 --> 00:01:10.751
So, closures come in different forms, but

15
00:01:10.751 --> 00:01:13.839
this is kind of just a guide.

16
00:01:13.839 --> 00:01:16.784
So you have a parent function, right?

17
00:01:16.784 --> 00:01:18.948
And then you have your inner function,

18
00:01:18.948 --> 00:01:22.097
in between your parent function
in your child function,

19
00:01:22.097 --> 00:01:26.712
you need to make sure that there's some
variable there, that you can store value.

20
00:01:26.712 --> 00:01:31.641
Could be a variable that you declare or
it could be a parameter value as well.

21
00:01:31.641 --> 00:01:37.034
Then, inside the inner function,
you either want to access or

22
00:01:37.034 --> 00:01:41.018
manipulate the function
in the parent scope.

23
00:01:41.018 --> 00:01:43.770
And then you return that function, so

24
00:01:43.770 --> 00:01:48.765
that later you can call it and
do whatever fun stuff that you wanna do.

25
00:01:53.553 --> 00:01:57.351
Cool, so that's how you create it and
then there's the execution part.

26
00:01:59.839 --> 00:02:03.990
And so the execution part is you
want to call the parent function,

27
00:02:03.990 --> 00:02:06.556
save it to a variable because remember,

28
00:02:06.556 --> 00:02:10.795
it's returning a function that
we're gonna call later, right?

29
00:02:10.795 --> 00:02:15.658
So we need to save it into our variable,
this variable is a function, so

30
00:02:15.658 --> 00:02:19.645
if I just write out a test,
it's gonna return a function.

31
00:02:19.645 --> 00:02:23.826
And then when you call it it'll execute
the function just like we've been doing,

32
00:02:23.826 --> 00:02:25.172
it'll return the scope.

33
00:02:28.733 --> 00:02:31.470
Any questions?

34
00:02:31.470 --> 00:02:32.860
No, okay.

35
00:02:36.404 --> 00:02:40.487
So this is a bit of a gotcha,

36
00:02:40.487 --> 00:02:45.469
so, when we call this function.

37
00:02:47.395 --> 00:02:51.475
So let's see find someone,

38
00:02:51.475 --> 00:02:55.726
that's gonna return speak.

39
00:02:55.726 --> 00:02:57.874
Right, so let's.

40
00:03:01.413 --> 00:03:03.094
Call this someone Speak.

41
00:03:03.094 --> 00:03:07.372
And we're gonna call it, the first
thing that we're gonna do, right?

42
00:03:07.372 --> 00:03:11.604
Is we're gonna define that function,
nothing is gonna be called yet,

43
00:03:11.604 --> 00:03:14.650
who is gonna be defined,
and then we return speak.

44
00:03:16.834 --> 00:03:18.774
What do you think will
happen when we do this?

45
00:03:22.751 --> 00:03:26.793
&gt;&gt; We'll get to function body
of speak with [INAUDIBLE].

46
00:03:33.277 --> 00:03:34.828
Undefined, yeah.

47
00:03:34.828 --> 00:03:41.794
&gt;&gt; Well,
we haven't called someone speak yet, okay?

48
00:03:41.794 --> 00:03:45.905
So, someone speak is now this function,

49
00:03:45.905 --> 00:03:50.139
the question is, do we have access to who?

50
00:03:55.737 --> 00:04:00.124
&gt;&gt; No, because it was defined
after the function was declared.

51
00:04:00.124 --> 00:04:00.820
&gt;&gt; Yeah.

52
00:04:00.820 --> 00:04:06.818
&gt;&gt; A block scope inside the original
functions that didn't have access across.

53
00:04:06.818 --> 00:04:08.331
&gt;&gt; Well.
&gt;&gt; Maybe.

54
00:04:08.331 --> 00:04:10.699
&gt;&gt; It's in, so
it's technically in the parent scope.

55
00:04:10.699 --> 00:04:16.078
&gt;&gt; Oops, so doesn't automatically
create block unless you use the braces.

56
00:04:16.078 --> 00:04:16.731
&gt;&gt; Yeah.
&gt;&gt; Okay.

57
00:04:16.731 --> 00:04:22.116
&gt;&gt; Exactly, otherwise, you know,
I mean, maybe it would be scoped

58
00:04:22.116 --> 00:04:27.516
to the it would be scoped to the block,
which is this parent block.

59
00:04:33.028 --> 00:04:36.698
It worked, why did it work?

60
00:04:42.925 --> 00:04:47.793
So it worked because as we
ran through this function,

61
00:04:47.793 --> 00:04:52.672
we defined speak, and
then we defined our variable.

62
00:04:52.672 --> 00:04:58.321
Now this variable exists in this
function execution contexts,

63
00:04:58.321 --> 00:05:04.191
and then we returned speak, and
then later we called it down here.

64
00:05:04.191 --> 00:05:10.235
We went back in here, and this who is
gonna look first in its own context and

65
00:05:10.235 --> 00:05:13.370
say, do I have a variable called who?

66
00:05:13.370 --> 00:05:15.427
It's gonna say no, I don't,

67
00:05:15.427 --> 00:05:19.080
and then it will look in
the parent context and it does.

68
00:05:19.080 --> 00:05:24.204
So even though it's visibly
after that function definition,

69
00:05:24.204 --> 00:05:28.758
it's still valid because it
has already been defined.

70
00:05:31.517 --> 00:05:35.717
And you can tell by the way that it
executes, that's why it's really important

71
00:05:35.717 --> 00:05:40.346
to understand exactly how the function
executes and in what order Because these

72
00:05:40.346 --> 00:05:45.026
kind of tricky things can come
up especially when you're

73
00:05:45.026 --> 00:05:49.814
like returning functions from
functions and all of that.

74
00:05:49.814 --> 00:05:56.324
So here's a timer, this is one of the more
famous examples of using a closure,

75
00:05:56.324 --> 00:06:02.158
let's run it All right, so
we have our make timer.

76
00:06:06.184 --> 00:06:08.644
And we initialize it.

77
00:06:11.171 --> 00:06:16.855
So we create elapsed,
we create stopwatch was the function,

78
00:06:16.855 --> 00:06:20.149
that just returns elapsed, yeah?

79
00:06:20.149 --> 00:06:24.474
And then we have, excuse me,
we have increase,

80
00:06:24.474 --> 00:06:30.168
which increments elapsed, and
then we have the set interval and

81
00:06:30.168 --> 00:06:37.136
set interval is just a method that will
call the function that's passed to it.

82
00:06:37.136 --> 00:06:41.096
Every 1000 milliseconds,
you can change this as milliseconds,

83
00:06:41.096 --> 00:06:45.405
1000 milliseconds is 1 second, so
that's why this is a second timer.

84
00:06:45.405 --> 00:06:49.402
And then we're going to return stopwatch.

85
00:06:50.630 --> 00:06:54.157
So let's check out what timer looks like,
and

86
00:06:54.157 --> 00:06:57.509
it's just our little stopwatch function.

87
00:06:57.509 --> 00:07:01.118
We can see how long ago we
call that function here, so

88
00:07:01.118 --> 00:07:03.587
we called it about 54 seconds go.

89
00:07:07.296 --> 00:07:12.462
And so, you can see how you can use a
closure to kinda hide away functionality,

90
00:07:12.462 --> 00:07:15.763
that you don't want people to mess with,
right?

91
00:07:15.763 --> 00:07:21.803
So for a timer you're the consumer of this
data should only have access to the time,

92
00:07:21.803 --> 00:07:25.772
they shouldn't be able to
mess with the incremental,

93
00:07:25.772 --> 00:07:28.731
increase method or anything like that.

94
00:07:33.934 --> 00:07:37.490
That you may wanna return the interval,
okay she wants to stop it.

95
00:07:38.670 --> 00:07:39.320
Cuz it will just go on.

96
00:07:39.320 --> 00:07:41.449
&gt;&gt; You just confuse me,
why is it not returning?

97
00:07:43.355 --> 00:07:50.726
Since May timer return stopwatch was
just the function body of stopwatch and

98
00:07:50.726 --> 00:07:56.252
then we act and we, and
when we do timer and parentheses,

99
00:07:56.252 --> 00:08:02.491
why we're not getting back,
why we're not getting back to 0?

100
00:08:02.491 --> 00:08:05.051
&gt;&gt; Yeah, it's because.

101
00:08:07.514 --> 00:08:12.894
It's because these,
all of these shares the same scope.

102
00:08:12.894 --> 00:08:18.278
So we only call make timer once,
so elapsed,

103
00:08:18.278 --> 00:08:23.096
has one value in one execution context,

104
00:08:23.096 --> 00:08:26.511
and so we return that great.

105
00:08:26.511 --> 00:08:34.033
When we returned it down here we first ran
all of this which started an interval,

106
00:08:34.033 --> 00:08:38.186
and that interval whether we like it or
not,

107
00:08:38.186 --> 00:08:44.499
it's just gonna keep running every
second and increase elapsed.

108
00:08:44.499 --> 00:08:48.576
So it's gonna call this
function every second, and

109
00:08:48.576 --> 00:08:54.516
it's gonna increase that, and so
these methods are mutating the value here

110
00:08:57.493 --> 00:09:03.558
This function is only reading it.

111
00:09:03.558 --> 00:09:07.193
So, it's being changed by these functions,
cuz if you think about it,

112
00:09:07.193 --> 00:09:09.466
they all live in the same
execution context.

113
00:09:09.466 --> 00:09:12.936
So if one value is changing it,

114
00:09:12.936 --> 00:09:17.743
it's gonna have access to the same value.

115
00:09:17.743 --> 00:09:22.749
Because we again we make
the execution context here,

116
00:09:22.749 --> 00:09:25.874
for this one as the parent scope.

117
00:09:25.874 --> 00:09:29.472
And just because before we didn't do that,

118
00:09:29.472 --> 00:09:34.724
doesn't mean that methods can
share scope and change the data,

119
00:09:34.724 --> 00:09:39.700
and it can affect other things
that are relying on that data.

120
00:09:39.700 --> 00:09:43.959
Which goes back to Michael's point, you
have to be careful when you're changing

121
00:09:43.959 --> 00:09:46.068
your data because it can affect things.

122
00:09:52.518 --> 00:09:57.265
It's just gonna keep going forever.

123
00:09:57.265 --> 00:10:00.166
&gt;&gt; So what happens if you just
run timer without parentheses?

124
00:10:05.321 --> 00:10:10.481
&gt;&gt; It's just a function definition, but
it retains access to its parent scope,

125
00:10:10.481 --> 00:10:15.502
and that scope is being retained access
by this increased function as well.

126
00:10:15.502 --> 00:10:20.164
The increased function still has
access and is incrementing it,

127
00:10:20.164 --> 00:10:24.669
even though we're not doing it,
it's being done in the back.

128
00:10:28.040 --> 00:10:29.674
All right.

129
00:10:33.177 --> 00:10:37.293
Here's the same thing with
a lot of console logs,

130
00:10:37.293 --> 00:10:41.813
to kinda give you a feel,
let me make open another tab.

131
00:10:49.672 --> 00:10:55.384
So, it will be initialized and
it's gonna be elapsed,

132
00:10:55.384 --> 00:11:01.216
and then, we are going to say timer,
we going to call it,

133
00:11:01.216 --> 00:11:05.239
which is going to console log stopwatch

