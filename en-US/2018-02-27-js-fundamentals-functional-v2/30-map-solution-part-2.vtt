WEBVTT

1
00:00:00.210 --> 00:00:01.400
&gt;&gt; Bianca Gandolfo: So
in implementing _.map(),

2
00:00:01.400 --> 00:00:05.480
we need to make sure that we
return an array somewhere, right?

3
00:00:07.640 --> 00:00:16.013
Okay, what else do we need to do?
&gt;&gt; Speaker 2: Create

4
00:00:16.013 --> 00:00:18.843
an empty array to store.
&gt;&gt; Bianca Gandolfo: Yeah.

5
00:00:23.264 --> 00:00:24.414
&gt;&gt; Bianca Gandolfo: To store e,

6
00:00:24.414 --> 00:00:28.735
right,
&gt;&gt; Bianca Gandolfo: Anything else?

7
00:00:30.692 --> 00:00:32.261
&gt;&gt; Bianca Gandolfo: How about this

8
00:00:32.261 --> 00:00:37.019
corner?
&gt;&gt; Speaker 3: Do we need to

9
00:00:37.019 --> 00:00:39.819
check if the list is an array?
&gt;&gt; Bianca Gandolfo: Mm-hm.

10
00:00:45.135 --> 00:00:46.319
&gt;&gt; Bianca Gandolfo: And, in fact, for

11
00:00:46.319 --> 00:00:50.244
this, since we're getting late on time,
we'll just do it for

12
00:00:50.244 --> 00:00:54.534
array.
&gt;&gt; Bianca Gandolfo: We'll just skip

13
00:00:54.534 --> 00:00:59.092
the doing both.
&gt;&gt; Bianca Gandolfo: Okay,

14
00:00:59.092 --> 00:01:02.025
you're letting me spell badly in public.

15
00:01:02.025 --> 00:01:05.319
It's like me having spinach in
my teeth and you not telling me.

16
00:01:05.319 --> 00:01:11.477
Just so you know, that's really rude,
it violates my trust in you.

17
00:01:11.477 --> 00:01:17.750
Okay so we're gonna create an empty array
and we're going to return an array.

18
00:01:17.750 --> 00:01:19.240
I think there are some
steps in the middle.

19
00:01:20.440 --> 00:01:25.640
We need a loop.
&gt;&gt; Bianca Gandolfo: And

20
00:01:25.640 --> 00:01:31.310
then what do we need to do in that loop?
&gt;&gt; Speaker 4: Call

21
00:01:31.310 --> 00:01:34.924
back on each element and
then push it to the storage array.

22
00:01:43.990 --> 00:01:44.950
&gt;&gt; Bianca Gandolfo: All right,

23
00:01:44.950 --> 00:01:46.970
seems like a solid plan.

24
00:01:46.970 --> 00:01:50.940
What do we think, anyone else have extra
steps you think we should consider?

25
00:01:53.260 --> 00:01:53.790
No, okay.

26
00:01:55.380 --> 00:01:57.760
So let's create our array.

27
00:01:57.760 --> 00:02:02.765
We can say var, call

28
00:02:02.765 --> 00:02:07.778
it storage, okay?

29
00:02:07.778 --> 00:02:14.193
We're gonna loop, so we're just
gonna assume the list is an array.

30
00:02:14.193 --> 00:02:15.164
So = 0.

31
00:02:23.327 --> 00:02:24.720
&gt;&gt; Bianca Gandolfo: list.length

32
00:02:33.546 --> 00:02:34.687
&gt;&gt; Bianca Gandolfo: [LAUGH] Just seeing if

33
00:02:34.687 --> 00:02:38.050
you're on your toes,
I know it's getting late in the day.

34
00:02:38.050 --> 00:02:39.473
Okay, so we're looping.

35
00:02:39.473 --> 00:02:45.816
What's the next thing we wanna do?
&gt;&gt; Speaker 3: Push

36
00:02:45.816 --> 00:02:51.375
every,
&gt;&gt; Speaker 3: And then see every i

37
00:02:51.375 --> 00:02:56.982
to the storage, the empty array.
&gt;&gt; [INAUDIBLE]

38
00:02:56.982 --> 00:03:00.287
&gt;&gt; Bianca Gandolfo: Close.

39
00:03:00.287 --> 00:03:01.735
&gt;&gt; Speaker 5: Run it through the callback?

40
00:03:01.735 --> 00:03:03.583
&gt;&gt; Bianca Gandolfo: Yeah, want to call on

41
00:03:03.583 --> 00:03:09.322
the callback.
&gt;&gt; Bianca Gandolfo: Okay.

42
00:03:10.767 --> 00:03:11.551
&gt;&gt; Bianca Gandolfo: Do we wanna run it

43
00:03:11.551 --> 00:03:12.280
with i though?

44
00:03:13.630 --> 00:03:14.440
What's i again?

45
00:03:15.820 --> 00:03:18.278
It's just gonna be a number.
&gt;&gt; Speaker 6: Is it list i?

46
00:03:18.278 --> 00:03:19.775
&gt;&gt; Bianca Gandolfo: list.i, yep.

47
00:03:19.775 --> 00:03:22.588
And then, i and

48
00:03:22.588 --> 00:03:29.133
the list
&gt;&gt; Bianca Gandolfo: Cool.

49
00:03:39.991 --> 00:03:40.720
&gt;&gt; Bianca Gandolfo: How do we feel?

50
00:03:41.950 --> 00:03:42.459
Feeling good?

51
00:03:45.190 --> 00:03:46.216
You think this will explode or

52
00:03:46.216 --> 00:03:51.638
you think it'll run?
&gt;&gt; Speaker 7: Both.

53
00:03:51.638 --> 00:03:52.749
&gt;&gt; Bianca Gandolfo: That would be

54
00:03:52.749 --> 00:03:54.471
exciting, right?

55
00:03:54.471 --> 00:03:59.324
Okay, so let's do our test case here.

56
00:03:59.324 --> 00:04:04.760
We want to give it a list, and then we
need to give it our callback function.

57
00:04:04.760 --> 00:04:09.368
And then we need to return the val + 1,
and

58
00:04:09.368 --> 00:04:13.080
we'll put the value here, okay?

59
00:04:14.700 --> 00:04:18.246
So, what should this print out, or

60
00:04:18.246 --> 00:04:22.544
what should this return?
&gt;&gt; Speaker 8: An array of two,

61
00:04:22.544 --> 00:04:24.355
three, four.
&gt;&gt; Bianca Gandolfo: Yep,

62
00:04:24.355 --> 00:04:27.351
exactly.
&gt;&gt; Bianca Gandolfo: So

63
00:04:27.351 --> 00:04:29.512
we're expecting that.

64
00:04:29.512 --> 00:04:34.841
Let's take it for a whirl.
&gt;&gt; Bianca Gandolfo: This is where you're

65
00:04:34.841 --> 00:04:40.903
just like, please work, please work.
&gt;&gt; Bianca Gandolfo: All

66
00:04:40.903 --> 00:04:42.875
right,
&gt;&gt; Bianca Gandolfo: So hey,

67
00:04:42.875 --> 00:04:45.862
this is our last chance to make sure
there's nothing that's gonna make

68
00:04:45.862 --> 00:04:46.420
it explode.

69
00:04:48.400 --> 00:04:49.900
Are we confident in this piece of code?

70
00:04:51.910 --> 00:04:56.444
If this was taking us to Mars, [LAUGH]
just kidding you'd never do that in

71
00:04:56.444 --> 00:05:03.825
a JavaScript.
&gt;&gt; Bianca Gandolfo: We knew it guys.

72
00:05:03.825 --> 00:05:08.660
Come on, we have to snap, it's more fun,
this is the celebration phase.

73
00:05:08.660 --> 00:05:12.590
There we go, you guys can do it,
you both have two fingers at least.

74
00:05:13.600 --> 00:05:19.200
Cool, so there we are.
&gt;&gt; Bianca Gandolfo: Come a long way.

75
00:05:19.200 --> 00:05:23.225
Let's see, it is past 4, so

76
00:05:23.225 --> 00:05:27.900
I'm gonna replace this for loop.

77
00:05:27.900 --> 00:05:33.754
I've been trying really hard not
to say puns all day, but I did.

78
00:05:33.754 --> 00:05:35.410
All right, so I want to do each instead

79
00:05:36.580 --> 00:05:40.446
because functional
programmers don't like loops.

80
00:05:40.446 --> 00:05:46.976
We like to use functions that do the loops
for us so we don't have to think about it.

81
00:05:46.976 --> 00:05:53.070
Okay, so,
&gt;&gt; Bianca Gandolfo: How do we translate?

82
00:05:53.070 --> 00:05:55.680
I guess I can leave the loop here so
we can look at it.

83
00:05:55.680 --> 00:06:01.920
How do we translate this looping
situation into our each?

84
00:06:04.360 --> 00:06:06.630
What's our list?
&gt;&gt; Speaker 9: Just

85
00:06:06.630 --> 00:06:09.066
list.
&gt;&gt; Bianca Gandolfo: What's our

86
00:06:09.066 --> 00:06:14.068
callback?
&gt;&gt; Speaker 9: Just call

87
00:06:14.068 --> 00:06:18.954
back.
&gt;&gt; Bianca Gandolfo: Is

88
00:06:18.954 --> 00:06:21.864
there a function callback?
&gt;&gt; Speaker 2: It's cuz you already

89
00:06:21.864 --> 00:06:24.756
are taking in a callback function.
&gt;&gt; Bianca Gandolfo: But

90
00:06:24.756 --> 00:06:29.479
what happens if we do this?
&gt;&gt; Bianca Gandolfo: And

91
00:06:29.479 --> 00:06:33.716
we get rid of this?
&gt;&gt; Speaker 2: You'd still

92
00:06:33.716 --> 00:06:35.470
have to push it to an array.
&gt;&gt; Bianca Gandolfo: Yeah,

93
00:06:35.470 --> 00:06:37.730
it's not pushing it to the array.

94
00:06:37.730 --> 00:06:41.240
So we're skipping some functionality.
&gt;&gt; Speaker 2: I see.

95
00:06:41.240 --> 00:06:41.908
&gt;&gt; Bianca Gandolfo: Yeah, but

96
00:06:41.908 --> 00:06:46.794
that's a common misconception.
&gt;&gt; Bianca Gandolfo: All right, so

97
00:06:46.794 --> 00:06:50.879
we have our value,
&gt;&gt; Bianca Gandolfo: And of

98
00:06:50.879 --> 00:06:58.339
course,
&gt;&gt; Bianca Gandolfo: What

99
00:06:58.339 --> 00:07:00.427
are we doing here?

100
00:07:00.427 --> 00:07:01.200
Where were we?

101
00:07:01.200 --> 00:07:04.108
Okay, we were translating our for

102
00:07:04.108 --> 00:07:08.732
loop into each,
which seemed easier earlier right?

103
00:07:08.732 --> 00:07:12.720
It was not a big deal and
suddenly we're throwing it in here and

104
00:07:12.720 --> 00:07:14.805
it gets a little funky, right?

105
00:07:14.805 --> 00:07:20.382
I think what makes it complicated is that,
&gt;&gt; Bianca Gandolfo: The nested

106
00:07:20.382 --> 00:07:26.083
function thing, right,
adds some borders there,

107
00:07:26.083 --> 00:07:30.885
but it's really these arguments, right?

108
00:07:30.885 --> 00:07:36.760
We need to make sure that
we're keeping in mind this,

109
00:07:36.760 --> 00:07:39.829
and not,
&gt;&gt; Bianca Gandolfo: These

110
00:07:39.829 --> 00:07:44.756
ones.
&gt;&gt; Bianca Gandolfo: All right, so

111
00:07:44.756 --> 00:07:48.590
what was the thing that we wanted to do?

112
00:07:48.590 --> 00:07:50.400
So we looped through it.

113
00:07:50.400 --> 00:07:51.527
So now this is looping, right?

114
00:07:51.527 --> 00:07:54.385
It's looping,
it's calling an empty function, great,

115
00:07:54.385 --> 00:07:57.522
what was the second thing we need to do?
&gt;&gt; Speaker 10: Push it.

116
00:07:57.522 --> 00:07:59.771
&gt;&gt; Bianca Gandolfo: Push it.

117
00:07:59.771 --> 00:08:01.666
&gt;&gt; Bianca Gandolfo: So how do we push it?

118
00:08:01.666 --> 00:08:04.329
&gt;&gt; Speaker 3: Storage.push?

119
00:08:04.329 --> 00:08:06.970
&gt;&gt; Bianca Gandolfo: Mm-hm, all right,

120
00:08:06.970 --> 00:08:12.004
what are we gonna?
&gt;&gt; Speaker 3: Is it just v?

121
00:08:12.004 --> 00:08:13.824
&gt;&gt; Bianca Gandolfo: Mm-hm, and

122
00:08:13.824 --> 00:08:18.284
list.
&gt;&gt; Bianca Gandolfo: Cool, so

123
00:08:18.284 --> 00:08:21.630
we have access to this
in our parent scope.

124
00:08:21.630 --> 00:08:25.560
So we'll just push it,
with the value, the index, and

125
00:08:25.560 --> 00:08:29.180
the list,
because that's the expected behavior.

126
00:08:29.180 --> 00:08:30.651
We have access to all of that data.

127
00:08:31.989 --> 00:08:38.825
Sorry.
&gt;&gt; Bianca Gandolfo: There,

128
00:08:38.825 --> 00:08:44.890
with a callback so
what ever the callback returns should be

129
00:08:44.890 --> 00:08:51.648
pushed to our storage.
&gt;&gt; Bianca Gandolfo: Cool,

130
00:08:54.165 --> 00:08:55.222
&gt;&gt; Bianca Gandolfo: Questions?

131
00:08:58.463 --> 00:08:59.155
&gt;&gt; Bianca Gandolfo: Which one do you like

132
00:08:59.155 --> 00:09:00.346
better, the for loop or the each?

133
00:09:02.047 --> 00:09:05.740
&gt;&gt; Speaker 2: Each.
&gt;&gt; Bianca Gandolfo: Each?

134
00:09:05.740 --> 00:09:12.869
Feels a little fancier, right?
&gt;&gt; Bianca Gandolfo: All

135
00:09:12.869 --> 00:09:19.040
right,
&gt;&gt; Bianca Gandolfo: Any

136
00:09:19.040 --> 00:09:25.030
questions about each or map?
&gt;&gt; Bianca Gandolfo: it's

137
00:09:25.030 --> 00:09:27.523
like one of those things that you take for
granted.

138
00:09:27.523 --> 00:09:28.977
And then you realize,

139
00:09:28.977 --> 00:09:32.866
it's a little challenging when you
haven't thought about it that way.

140
00:09:32.866 --> 00:09:38.000
But then, once you get used to
thinking about it that way,

141
00:09:38.000 --> 00:09:41.580
it starts to feel natural.

142
00:09:41.580 --> 00:09:46.080
So if it's feeling unnatural right now,
and this is the first time you ever

143
00:09:46.080 --> 00:09:48.220
done that, that's totally normal,
that's where you should be.

144
00:09:49.530 --> 00:09:53.360
It took us a whole day to get to this
point and we even skipped ahead.

145
00:09:53.360 --> 00:09:57.047
Usually I wait to do this until
after we talk about functions, but

146
00:09:57.047 --> 00:09:59.059
I thought let's just push ahead and

147
00:09:59.059 --> 00:10:03.410
do the fun stuff earlier than usual
&gt;&gt; Bianca Gandolfo: So,

148
00:10:03.410 --> 00:10:06.778
if it's feeling a little uncomfortable,

149
00:10:06.778 --> 00:10:11.709
totally fine.
&gt;&gt; Bianca Gandolfo: But

150
00:10:11.709 --> 00:10:12.750
it'll become natural.

151
00:10:12.750 --> 00:10:17.090
And I think implementing the internals
forces you to really think about what's

152
00:10:17.090 --> 00:10:22.310
happening rather than kind
of just letting it run and

153
00:10:22.310 --> 00:10:23.010
see what happens, letting it run and
see what happens.

154
00:10:23.010 --> 00:10:29.490
And a tip I like to give
is to never do that.

155
00:10:29.490 --> 00:10:33.550
It is to actually seek to understand
all the code that you write.

156
00:10:33.550 --> 00:10:37.060
So, this means don't
like change something,

157
00:10:37.060 --> 00:10:41.220
save it, refresh see what happens,
change something, fiddling like that.

158
00:10:41.220 --> 00:10:47.600
It might seem faster or maybe it feels
easier cuz it takes less brain power.

159
00:10:47.600 --> 00:10:51.536
But in the long run, you're not gaining

160
00:10:51.536 --> 00:10:56.436
the skill of properly modeling
your program in your mind.

161
00:10:56.436 --> 00:11:02.171
And so,
&gt;&gt; Bianca Gandolfo: Once you're able

162
00:11:02.171 --> 00:11:06.131
to model your program in your mind it's
going to be easier to catch bugs without

163
00:11:06.131 --> 00:11:10.930
having to go back and forth refresh, etc.,
rerun it, whatever it is you're doing.

164
00:11:10.930 --> 00:11:14.900
It also will help you start
to understand when you're

165
00:11:14.900 --> 00:11:17.420
code is too complicated
to hold it in your mind.

166
00:11:17.420 --> 00:11:21.280
If you're code is starting to get too
complicated to hold in your mind,

167
00:11:21.280 --> 00:11:24.150
that is a sign that your
code should be simplified.

168
00:11:24.150 --> 00:11:29.366
It can be rewritten in a way that is
easier to hold in your mind at one time.

