WEBVTT

1
00:00:00.520 --> 00:00:02.510
&gt;&gt; Bianca Gandolfo: So
we are going to filter data.

2
00:00:03.530 --> 00:00:05.390
Here's our data structure.

3
00:00:05.390 --> 00:00:08.100
It's an array of objects.

4
00:00:08.100 --> 00:00:10.140
Each of these objects
have three properties,

5
00:00:10.140 --> 00:00:14.780
a name, a present property and
an array of rooms.

6
00:00:14.780 --> 00:00:18.460
Is this the right one?

7
00:00:18.460 --> 00:00:27.445
Yes, yes it is okay and an array of rooms.
&gt;&gt; Bianca Gandolfo: Okay,

8
00:00:27.445 --> 00:00:31.862
everyone found the data okay it was

9
00:00:31.862 --> 00:00:36.442
able to copy and paste easily cool.

10
00:00:36.442 --> 00:00:39.863
I'll just leave it open
like that all right, so

11
00:00:39.863 --> 00:00:42.780
we are going to use our filter function?

12
00:00:42.780 --> 00:00:44.010
What's our list?

13
00:00:45.870 --> 00:00:50.130
VideoData and
what is our callback gonna be?

14
00:00:58.428 --> 00:01:00.974
&gt;&gt; Bianca Gandolfo: So this is a suspect

15
00:01:00.974 --> 00:01:05.822
Object.
&gt;&gt; Bianca Gandolfo: This is also

16
00:01:05.822 --> 00:01:09.364
the nice thing about using
callbacks instead of loops,

17
00:01:09.364 --> 00:01:15.140
is that we can really name what these
items are, and it makes it super clear.

18
00:01:15.140 --> 00:01:23.348
Okay, so what do we need to do?
&gt;&gt; Speaker 2: Return suspect.

19
00:01:23.348 --> 00:01:25.184
Present.
&gt;&gt; Bianca Gandolfo: Mm-hm.

20
00:01:25.184 --> 00:01:28.695
&gt;&gt; Speaker 2: SuspectObject.present in

21
00:01:28.695 --> 00:01:33.430
this case.
&gt;&gt; Bianca Gandolfo: Present.

22
00:01:35.484 --> 00:01:36.658
&gt;&gt; Bianca Gandolfo: Cool, anyone else do

23
00:01:36.658 --> 00:01:42.550
it differently?
&gt;&gt; Bianca Gandolfo: Awesome

24
00:01:47.161 --> 00:01:51.468
&gt;&gt; Bianca Gandolfo: Any questions?

25
00:01:56.050 --> 00:01:56.757
&gt;&gt; Bianca Gandolfo: All right,

26
00:01:56.757 --> 00:02:01.440
we're gonna walk through how this all
works together with our filter function

27
00:02:03.352 --> 00:02:05.200
&gt;&gt; Bianca Gandolfo: Sound good?

28
00:02:05.200 --> 00:02:09.754
It gets a little funky when we have,
&gt;&gt; Bianca Gandolfo: Functions passing to

29
00:02:09.754 --> 00:02:10.510
functions.

30
00:02:10.510 --> 00:02:13.100
So I like to go over how it's run.

31
00:02:13.100 --> 00:02:15.150
So we can also find bugs this way.

32
00:02:16.940 --> 00:02:20.680
So the first thing's first,
where does this code start?

33
00:02:20.680 --> 00:02:22.850
So we're defining this here.

34
00:02:22.850 --> 00:02:25.050
Nothing is run yet,
we're just defining it.

35
00:02:25.050 --> 00:02:28.270
We're gonna talk about this a lot
more in depth in our next slide, but

36
00:02:28.270 --> 00:02:30.370
I'm getting you primed here.

37
00:02:30.370 --> 00:02:32.700
We have our data,
nothing really happens except for

38
00:02:32.700 --> 00:02:34.750
we're initializing this
big data structure.

39
00:02:35.770 --> 00:02:39.760
And we are calling
the filter function here.

40
00:02:40.980 --> 00:02:47.940
So the first argument is video data,
so our array is the video data array.

41
00:02:47.940 --> 00:02:52.982
And CB is this function here, okay?

42
00:02:52.982 --> 00:02:59.200
So for each item, so
the very first item in our array is what?

43
00:02:59.200 --> 00:03:02.420
Here let me put this Here, so that we can.

44
00:03:02.420 --> 00:03:07.430
This is not how it should run in order,
actually, let me do this,

45
00:03:08.690 --> 00:03:15.185
put our video data here.
&gt;&gt; Bianca Gandolfo: There we go, just so

46
00:03:15.185 --> 00:03:22.309
we can look at it at the same time.
&gt;&gt; Bianca Gandolfo: Do

47
00:03:22.309 --> 00:03:29.275
a little word wrap here, okay?
&gt;&gt; Bianca Gandolfo: Looks

48
00:03:29.275 --> 00:03:33.309
kind of ugly.
&gt;&gt; Bianca Gandolfo: Okay,

49
00:03:33.309 --> 00:03:35.260
this is what we're gonna do.

50
00:03:37.190 --> 00:03:41.350
So our array, so the first item

51
00:03:42.560 --> 00:03:46.850
in our array is this Miss Scarlet object.

52
00:03:48.810 --> 00:03:54.330
So we're gonna call our
callback with this object, so

53
00:03:54.330 --> 00:03:58.700
the item is that object.

54
00:03:58.700 --> 00:04:00.830
Which has a property present.

55
00:04:00.830 --> 00:04:04.510
Which is true, so,
Miss Scarlett was present, at the mansion,

56
00:04:04.510 --> 00:04:07.533
at the time of the murder.
&gt;&gt; Bianca Gandolfo: And then,

57
00:04:07.533 --> 00:04:11.740
we have our storage object,
which we will push that item.

58
00:04:11.740 --> 00:04:16.970
So the storage item,
the storage array, now has the item.

59
00:04:16.970 --> 00:04:23.956
If I said, type of what is this?
&gt;&gt; Bianca Gandolfo: Gonna

60
00:04:23.956 --> 00:04:29.350
print out.
&gt;&gt; Speaker 3: Boolean value true?

61
00:04:30.990 --> 00:04:33.500
&gt;&gt; Bianca Gandolfo: Not quite, but

62
00:04:33.500 --> 00:04:40.767
good guess.
&gt;&gt; Bianca Gandolfo: So let's retrace this,

63
00:04:40.767 --> 00:04:45.840
so this function is getting called
with each item in the array.

64
00:04:47.180 --> 00:04:48.570
This is an array of objects.

65
00:04:49.900 --> 00:04:54.950
So the first item in the array
is of type object, exactly.

66
00:04:56.460 --> 00:04:59.230
So we're gonna have an array
of objects returned

67
00:04:59.230 --> 00:05:02.079
at the end.
&gt;&gt; Bianca Gandolfo: Make

68
00:05:02.079 --> 00:05:05.669
sense?
&gt;&gt; Bianca Gandolfo: Why are we using

69
00:05:05.669 --> 00:05:07.150
map her?

70
00:05:07.150 --> 00:05:11.871
Why don't we just do this?
&gt;&gt; Speaker 4: You know it will

71
00:05:11.871 --> 00:05:15.951
actually distort the data we want,
just the true or false and

72
00:05:15.951 --> 00:05:20.790
whether it passes the test.
&gt;&gt; Bianca Gandolfo: That's true, but

73
00:05:20.790 --> 00:05:24.940
also map always return
a function of same size.

74
00:05:24.940 --> 00:05:32.380
If we wanna like actually
filtering get new data then we

75
00:05:34.130 --> 00:05:39.270
wanna get an array that showed only the
things that passed through, we need to use

76
00:05:40.660 --> 00:05:48.201
each.
&gt;&gt; Speaker 5: So if we did use map,

77
00:05:48.201 --> 00:05:52.685
just based on what you just said, would
that mean it would return an array of

78
00:05:52.685 --> 00:05:57.381
the same length, and all of the non-true
ones would just have the word false or

79
00:05:57.381 --> 00:05:59.446
something most likely, or
&gt;&gt; Bianca Gandolfo: So,

80
00:05:59.446 --> 00:06:03.921
you would need to make sure that,
in this function,

81
00:06:03.921 --> 00:06:07.560
instead of pushing, you would need to.

82
00:06:07.560 --> 00:06:11.020
So, if we rewrote this with MAP,
we would need to.

83
00:06:14.650 --> 00:06:19.930
So, we would say, if that's true,
we're gonna return

84
00:06:21.310 --> 00:06:27.800
the item, but if it falls this
stills gonna return on your finds,

85
00:06:27.800 --> 00:06:33.860
so you're have an array,
of a bunch of undefined values

86
00:06:33.860 --> 00:06:38.140
where it doesn't need that criteria.
&gt;&gt; Speaker 5: Okay.

87
00:06:38.140 --> 00:06:38.740
&gt;&gt; Bianca Gandolfo: If that makes sense,

88
00:06:38.740 --> 00:06:41.820
so the array would be the same link,
they would have some values and

89
00:06:41.820 --> 00:06:43.460
then the rest of them.

90
00:06:43.460 --> 00:06:48.280
Will just be these undefined values and
that's not going to work.

91
00:06:48.280 --> 00:06:51.040
That's not the best solution.

92
00:06:51.040 --> 00:06:52.880
First of all, it's taking up more space.

93
00:06:52.880 --> 00:06:55.530
Second, then we have to deal
with those undefined values.

94
00:07:00.245 --> 00:07:08.770
Okay, great.
&gt;&gt; Speaker 6: I have a question.

95
00:07:08.770 --> 00:07:10.045
&gt;&gt; Bianca Gandolfo: Mm-hm.

96
00:07:10.045 --> 00:07:11.985
&gt;&gt; Speaker 6: When you call the call back,

97
00:07:11.985 --> 00:07:13.745
there are three parameters.

98
00:07:16.400 --> 00:07:19.300
But only one is

99
00:07:19.300 --> 00:07:22.990
used in the actual call back in this case.
&gt;&gt; Bianca Gandolfo: In

100
00:07:22.990 --> 00:07:23.610
this case.

101
00:07:23.610 --> 00:07:24.210
&gt;&gt; Speaker 6: Yes.
&gt;&gt; Bianca Gandolfo: Mm-hm.

102
00:07:24.210 --> 00:07:26.740
&gt;&gt; Speaker 6: So the other ones are just,

103
00:07:26.740 --> 00:07:33.020
it's overloaded in that case, or in what
case would you use those other parameters?

104
00:07:33.020 --> 00:07:34.390
&gt;&gt; Bianca Gandolfo: It depends on

105
00:07:34.390 --> 00:07:36.420
the call back that you are using
&gt;&gt; Speaker 6: So

106
00:07:36.420 --> 00:07:39.023
if you needed to go deeper into a list?
&gt;&gt; Bianca Gandolfo: Or

107
00:07:39.023 --> 00:07:44.333
if you just needed to be aware of at
what index the item was in the list?

108
00:07:44.333 --> 00:07:46.472
So you're passing the index, and

109
00:07:46.472 --> 00:07:51.360
also if you ever need to reference the
original data structure for any reason.

110
00:07:53.710 --> 00:07:55.520
It just keeps it flexible.

111
00:07:55.520 --> 00:07:56.020
And for

112
00:07:56.020 --> 00:08:01.800
the most part it's not a huge cost to do
that especially if you're passing objects.

113
00:08:01.800 --> 00:08:05.420
Again we're just passing references to it
we're not passing the whole object around,

114
00:08:07.430 --> 00:08:10.270
so, great.

115
00:08:11.310 --> 00:08:18.190
So I think we should take a five
minute break and I have a prompt for

116
00:08:18.190 --> 00:08:23.410
you guys to ask each other during your
break since Minnesotans are shy I

117
00:08:23.410 --> 00:08:27.847
feel like I need to give you guys prompts.
&gt;&gt; Bianca Gandolfo: Your

118
00:08:27.847 --> 00:08:30.370
guys' words not mine.

119
00:08:30.370 --> 00:08:36.552
The prompt is,
what's the most important thing to

120
00:08:36.552 --> 00:08:41.740
know about JavaScript, in your opinion.

121
00:08:41.740 --> 00:08:46.320
You don't have to be an expert,
it's not an expert opinion.

122
00:08:46.320 --> 00:08:49.912
Just what seems really
important kind of opinion,

123
00:08:49.912 --> 00:08:54.240
loosely held.

124
00:08:54.240 --> 00:08:56.992
Ready, set, go, I want to take a break.
&gt;&gt; Speaker 6: Wait before we get to that,

125
00:08:56.992 --> 00:09:00.760
just a question in online
chatroom about your code.

126
00:09:00.760 --> 00:09:06.980
The if balk, having it all on
one line without curly braces,

127
00:09:06.980 --> 00:09:09.700
people were just wondering about that.
&gt;&gt; Bianca Gandolfo: Sure,

128
00:09:13.600 --> 00:09:14.490
what is the question?

129
00:09:14.490 --> 00:09:18.670
Can you emit if it's a single expression.
&gt;&gt; Speaker 6: No is she missing a curly

130
00:09:18.670 --> 00:09:24.129
braces in the if statement or is that
&gt;&gt; Speaker 6: Okay,

131
00:09:24.129 --> 00:09:25.390
that meant if it's on the same line.

132
00:09:25.390 --> 00:09:26.710
They're just wondering that.
&gt;&gt; Bianca Gandolfo: Yeah, so

133
00:09:26.710 --> 00:09:29.550
as I mentioned, it's okay.

134
00:09:29.550 --> 00:09:31.990
We don't need to put curly brackets,
because it's on the same line.

135
00:09:33.470 --> 00:09:36.830
But, of course, you can always put them
if it makes you feel comfortable and

136
00:09:37.860 --> 00:09:38.760
that's what I tend to do.

137
00:09:38.760 --> 00:09:43.721
I tend to just put curly brackets
everywhere, cuz it just makes me feel like

138
00:09:43.721 --> 00:09:49.000
a nice secure blanket of curly brackets
and it doesn't do anything confusing or

139
00:09:49.000 --> 00:09:52.861
weird especially when we get
into like arrow functions and

140
00:09:52.861 --> 00:09:56.687
stuff like that I just feel-
&gt;&gt; Speaker 6: Cuz if you it's really not

141
00:09:56.687 --> 00:10:03.120
about one line, if you have two statements
on one line after the if, Statement

142
00:10:03.120 --> 00:10:05.620
it would only run the first one right?
&gt;&gt; Bianca Gandolfo: Yeah.

143
00:10:05.620 --> 00:10:07.408
&gt;&gt; Speaker 6: It's not about lines,

144
00:10:07.408 --> 00:10:09.380
it's about statements.

145
00:10:09.380 --> 00:10:13.082
Then it's fine, but

146
00:10:13.082 --> 00:10:17.401
anyway it can get you into

147
00:10:17.401 --> 00:10:23.190
trouble when it's unclear.
&gt;&gt; Bianca Gandolfo: Yeah.

148
00:10:23.190 --> 00:10:23.933
&gt;&gt; Speaker 6: Where the semi colon would

149
00:10:23.933 --> 00:10:25.878
be inserted?
&gt;&gt; Bianca Gandolfo: Mm-hm, yeah,

150
00:10:25.878 --> 00:10:32.490
I recommend to not do this but
I was just showing it as an example.

151
00:10:32.490 --> 00:10:37.120
You'll notice when I write it the first
time, I write a longer form way and

152
00:10:37.120 --> 00:10:40.790
that tends to be the way I
actually code is more long form.

