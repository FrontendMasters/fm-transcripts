WEBVTT

1
00:00:00.570 --> 00:00:03.413
So, we are going to filter a data.

2
00:00:03.413 --> 00:00:05.386
Here's our data structure.

3
00:00:05.386 --> 00:00:08.150
It's an array of objects.

4
00:00:08.150 --> 00:00:11.902
Each of these objects have
three properties, a name,

5
00:00:11.902 --> 00:00:14.850
a present property, and an array of rope.

6
00:00:14.850 --> 00:00:15.796
Is this the right one?

7
00:00:17.716 --> 00:00:18.905
Yes, it is.

8
00:00:18.905 --> 00:00:20.446
Okay, in an array of rooms.

9
00:00:26.532 --> 00:00:32.035
Okay, Everyone found the data okay?

10
00:00:32.035 --> 00:00:34.209
It was able to copy and paste it easily.

11
00:00:34.209 --> 00:00:37.714
Cool, I'll just leave it open like that.

12
00:00:37.714 --> 00:00:43.122
All right, so
we are going to use our filter function.

13
00:00:43.122 --> 00:00:44.416
What's our list?

14
00:00:44.416 --> 00:00:50.473
Video data, and
what is our callback gonna be?

15
00:00:58.782 --> 00:01:02.701
So this is a suspect object.

16
00:01:05.405 --> 00:01:09.951
This is also the nice thing about
using callbacks instead of loops is

17
00:01:09.951 --> 00:01:12.992
that we can really name
what these items are.

18
00:01:12.992 --> 00:01:14.896
And it makes it super clear.

19
00:01:14.896 --> 00:01:18.001
Okay so what do we need to do?

20
00:01:21.826 --> 00:01:24.458
&gt;&gt; Return suspect present,

21
00:01:28.313 --> 00:01:32.796
SuspectObject present in this case.

22
00:01:32.796 --> 00:01:37.775
&gt;&gt; Present, cool,
anyone else do it differently.

23
00:01:42.019 --> 00:01:43.339
Awesome.

24
00:01:45.387 --> 00:01:47.352
Any questions?

25
00:01:56.171 --> 00:01:56.894
All right,

26
00:01:56.894 --> 00:02:01.824
we're gonna walk through how this all
works together with our filter function.

27
00:02:03.602 --> 00:02:04.786
Sound good?

28
00:02:04.786 --> 00:02:10.450
It gets a little funky when we have,
functions passing to function.

29
00:02:10.450 --> 00:02:12.996
So I like to go over it, how it's run.

30
00:02:12.996 --> 00:02:15.685
So we can also find bugs this way.

31
00:02:15.685 --> 00:02:20.547
So the first things first,
where does this code start?

32
00:02:20.547 --> 00:02:24.980
So, we're defining this here, nothing
is run yet, we're just defining it.

33
00:02:24.980 --> 00:02:28.634
We're gonna talk about this a lot
more in depth in our next slide,

34
00:02:28.634 --> 00:02:30.367
but I'm getting primed here.

35
00:02:30.367 --> 00:02:35.282
We have our data, nothing really happens
except for we're like initializing

36
00:02:35.282 --> 00:02:39.760
this big data structure, and
we are calling the filter function here.

37
00:02:40.980 --> 00:02:44.130
So the first argument is video data.

38
00:02:44.130 --> 00:02:51.259
So our array is the video data array and
CB is this function here.

39
00:02:51.259 --> 00:02:54.244
Okay so for each item, so

40
00:02:54.244 --> 00:02:59.083
the very first item in our array is what?

41
00:02:59.083 --> 00:03:01.638
Here, let me put this here so that we can,

42
00:03:01.638 --> 00:03:04.997
this is not how it should run in order but
I just want to.

43
00:03:04.997 --> 00:03:11.807
Actually, let me do this,
put our video data here,

44
00:03:16.061 --> 00:03:18.176
Just so we can look at at the same time.

45
00:03:22.449 --> 00:03:26.573
Little word wrap here, okay

46
00:03:28.723 --> 00:03:33.281
Looks kind of ugly okay, so

47
00:03:33.281 --> 00:03:37.051
what we're gonna do.

48
00:03:37.051 --> 00:03:42.134
So our arrays, so the first item

49
00:03:42.134 --> 00:03:48.735
in our array is this Miss Scarlet object.

50
00:03:48.735 --> 00:03:54.084
So we're gonna call our
callback with this object.

51
00:03:54.084 --> 00:03:58.584
So the item is that object.

52
00:03:58.584 --> 00:04:01.482
Which has a property present,
which is true so

53
00:04:01.482 --> 00:04:05.582
Miss Scarlet was present at
the mansion at the time of the murder.

54
00:04:07.090 --> 00:04:11.567
And then we have our storage object
which we will push that item.

55
00:04:11.567 --> 00:04:16.841
So the storage item,
the storage array now has the item.

56
00:04:16.841 --> 00:04:20.427
If I said type of what is this?

57
00:04:23.780 --> 00:04:26.535
Gonna print out.

58
00:04:26.535 --> 00:04:29.649
&gt;&gt; A Boolean value of true.

59
00:04:29.649 --> 00:04:34.467
&gt;&gt; Not quite but good guess.

60
00:04:39.117 --> 00:04:40.904
So let's retrace this.

61
00:04:40.904 --> 00:04:47.089
So this function is getting called
with each item in the array.

62
00:04:47.089 --> 00:04:48.746
This is an array of objects.

63
00:04:48.746 --> 00:04:53.524
So the first item in the array is of type-
&gt;&gt; Object.

64
00:04:53.524 --> 00:04:55.129
&gt;&gt; Object, exactly.

65
00:04:55.129 --> 00:05:02.180
So we're gonna have an array of
objects returned at the end.

66
00:05:02.180 --> 00:05:03.252
Makes sense?

67
00:05:03.252 --> 00:05:06.684
Why aren't we using map here?

68
00:05:06.684 --> 00:05:08.233
Why don't we just do this?

69
00:05:12.855 --> 00:05:16.701
&gt;&gt; You don't actually distort the data
we want just a true or false and

70
00:05:16.701 --> 00:05:18.357
whether it passes the test.

71
00:05:18.357 --> 00:05:19.714
&gt;&gt; That's true.

72
00:05:19.714 --> 00:05:24.721
But also map will always return
a function of the same size.

73
00:05:24.721 --> 00:05:28.745
So if we wanna like actually filter and

74
00:05:28.745 --> 00:05:34.151
get new data then we want to
get an array that shorter

75
00:05:34.151 --> 00:05:39.181
with only the things that
pass through we need to

76
00:05:39.181 --> 00:05:47.422
use
&gt;&gt; So

77
00:05:47.422 --> 00:05:50.743
if we did use map just based
on what you just said,

78
00:05:50.743 --> 00:05:55.279
would that mean you would return
like an array of the same length and

79
00:05:55.279 --> 00:06:00.807
all of the non true ones or just have like
the word false or something most likely.

80
00:06:00.807 --> 00:06:05.400
&gt;&gt; So you would need to make sure
that in this function instead of

81
00:06:05.400 --> 00:06:07.483
pushing you would need to.

82
00:06:07.483 --> 00:06:13.169
So if we rewrote this with map,
we would need to,

83
00:06:13.169 --> 00:06:17.191
so we would say, if that's true,

84
00:06:17.191 --> 00:06:22.880
we're gonna return the item but
if it's false,

85
00:06:22.880 --> 00:06:27.767
this still is going to return undefined.

86
00:06:27.767 --> 00:06:32.602
So you'll have an array you'll
have an array of a bunch of

87
00:06:32.602 --> 00:06:37.460
undefined values where it
doesn't meet that criteria.

88
00:06:37.460 --> 00:06:38.791
&gt;&gt; Okay,
&gt;&gt; That makes sense.

89
00:06:38.791 --> 00:06:43.086
So the array will be of the same
length that will have some values and

90
00:06:43.086 --> 00:06:47.229
then the rest of them Will just be
these undefined this values and

91
00:06:47.229 --> 00:06:50.928
that's not gonna work,
that's not the best solution.

92
00:06:50.928 --> 00:06:53.054
First of all it's taking out more space,

93
00:06:53.054 --> 00:06:55.983
second then we have to deal
with those undefined values.

94
00:06:59.201 --> 00:07:05.331
Okay, great.

95
00:07:05.331 --> 00:07:11.653
&gt;&gt; I have a question,
when you call the callback,

96
00:07:11.653 --> 00:07:15.765
there are three parameters but

97
00:07:15.765 --> 00:07:22.733
only one is used in the actual
callback in this case.

98
00:07:22.733 --> 00:07:23.379
&gt;&gt; In this case?

99
00:07:23.379 --> 00:07:24.137
&gt;&gt; Yes.

100
00:07:24.137 --> 00:07:28.781
So the other ones are just like
it's overloaded in that case, or

101
00:07:28.781 --> 00:07:32.912
I'm in what case would you
use those are the parameters.

102
00:07:32.912 --> 00:07:35.888
&gt;&gt; It depends on the callback
that you're using.

103
00:07:35.888 --> 00:07:38.260
&gt;&gt; So
if you need to go deeper into a list?

104
00:07:38.260 --> 00:07:44.279
&gt;&gt; Or if you just needed to be aware of
at what index the item was in the list.

105
00:07:44.279 --> 00:07:48.657
So you're passing the index and
also if you ever need

106
00:07:48.657 --> 00:07:53.544
to reference the original data
structure for any reason.

107
00:07:53.544 --> 00:07:57.090
It just keeps it flexible and
for the most part, I mean,

108
00:07:57.090 --> 00:08:01.783
it's not a huge cost to do that,
especially if you're passing objects.

109
00:08:01.783 --> 00:08:03.735
Again, we're just passing
references to it.

110
00:08:03.735 --> 00:08:05.835
We're not passing the whole object around.

111
00:08:05.835 --> 00:08:11.171
So, Great.

112
00:08:11.171 --> 00:08:15.734
So I think we should take
a 5 minute break, and

113
00:08:15.734 --> 00:08:21.823
I have prompt for you guys to ask
each other during your break.

114
00:08:21.823 --> 00:08:25.429
Since Minnesotans are shy I feel like
I need to give you guys prompts.

115
00:08:25.429 --> 00:08:29.440
Your guys' words not mine.

116
00:08:29.440 --> 00:08:35.690
The prompt is, what's the most important

117
00:08:35.690 --> 00:08:42.813
thing to know about
JavaScript in your opinion.

118
00:08:42.813 --> 00:08:48.189
You have to be an expert in your
expert opinion just in your

119
00:08:48.189 --> 00:08:54.013
what seems really important
kind of opinion, loosely held.

120
00:08:54.013 --> 00:08:55.672
Ready, set, go.

121
00:08:55.672 --> 00:08:57.354
&gt;&gt; Before we get to that.

122
00:08:57.354 --> 00:09:02.202
Just a question online chat room
about your code, the F bock,

123
00:09:02.202 --> 00:09:05.932
having it on one line
without the curly braces,

124
00:09:05.932 --> 00:09:09.115
people were just wondering about that.

125
00:09:09.115 --> 00:09:11.669
&gt;&gt; Sure, it's okay.

126
00:09:11.669 --> 00:09:14.100
We don't need to put curly brackets
because it's on the same line.

127
00:09:15.610 --> 00:09:19.659
But of course, you can always put them
if it makes you feel uncomfortable and

128
00:09:19.659 --> 00:09:21.061
that's what I tend to do.

129
00:09:21.061 --> 00:09:26.002
I tend to just like put curly brackets
everywhere, cuz it just makes me feel like

130
00:09:26.002 --> 00:09:30.946
a nice secure blanket of curly brackets
and it doesn't do anything confusing or

131
00:09:30.946 --> 00:09:36.003
weird, especially when we get into like,
arrow functions and stuff like that.

132
00:09:36.003 --> 00:09:37.115
I just feel just so much.

133
00:09:37.115 --> 00:09:42.426
&gt;&gt; Cuz if you it's not really about one
line, if you have two statements on one

134
00:09:42.426 --> 00:09:47.675
line after the if statement, I would
like only run the first one, right?

135
00:09:47.675 --> 00:09:52.182
It's not really about lines,
it's about statements.

136
00:09:52.182 --> 00:09:55.528
So if there's one statement on one line,

137
00:09:55.528 --> 00:10:00.129
then it's fine but anyways,
I can get you into trouble.

138
00:10:00.129 --> 00:10:02.703
&gt;&gt; Yeah,
&gt;&gt; Like you said with arrow functions and

139
00:10:02.703 --> 00:10:05.150
stuff like that where it's unclear,
&gt;&gt; Yeah

140
00:10:05.150 --> 00:10:09.086
&gt;&gt; Or the semicolon would be inserted.

141
00:10:09.086 --> 00:10:14.590
&gt;&gt; Yeah, I recommend to not do this, but
I was just showing you as an example.

142
00:10:14.590 --> 00:10:18.536
You'll notice that when I read it the
first time I'll write it the longer more

143
00:10:18.536 --> 00:10:19.567
a longer form way and

144
00:10:19.567 --> 00:10:22.920
that's tends to be the way that I
actually code is more long form.

