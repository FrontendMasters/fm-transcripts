WEBVTT

1
00:00:00.280 --> 00:00:04.430
&gt;&gt; Bianca Gandolfo: Here is what I was
saying about non-valid characters.

2
00:00:04.430 --> 00:00:07.190
Well, I think just something to
keep in mind is just try not to use

3
00:00:07.190 --> 00:00:09.980
invalid characters as property names.

4
00:00:09.980 --> 00:00:14.180
If you really have to do it,
fine, but this is not

5
00:00:14.180 --> 00:00:19.101
a very good naming

6
00:00:19.101 --> 00:00:23.950
here on this line, so try to avoid that.

7
00:00:23.950 --> 00:00:27.110
But anything like this, right,
if you put quotes around it, it's fine.

8
00:00:27.110 --> 00:00:30.150
Similarly in the object literal notation,
you need to put around quotes.

9
00:00:30.150 --> 00:00:32.710
Remember we were saying
before we didn't have to?

10
00:00:32.710 --> 00:00:39.830
But if you're using non-valid characters,
then you have to.

11
00:00:42.180 --> 00:00:44.750
And then for the zero here,

12
00:00:44.750 --> 00:00:49.860
that's another thing that makes it seem
an array is special, but it's not.

13
00:00:49.860 --> 00:00:55.368
You can set a zero property on an object,
right.

14
00:00:55.368 --> 00:00:57.184
&gt;&gt; Bianca Gandolfo: Oops!

15
00:01:04.465 --> 00:01:06.290
&gt;&gt; Bianca Gandolfo: That

16
00:01:06.290 --> 00:01:08.270
shouldn't be too surprising.

17
00:01:08.270 --> 00:01:15.880
But it makes it seem unusual because we
don't put the quotes around the brackets.

18
00:01:15.880 --> 00:01:20.900
And in this context, with the bracket

19
00:01:21.910 --> 00:01:27.170
you can put anything that can be evaluated
actually, so you could say like,

20
00:01:27.170 --> 00:01:31.580
two plus two, stuff like that.

21
00:01:33.710 --> 00:01:37.340
So that's why it's seeing this as
something that needs to be evaluated

22
00:01:37.340 --> 00:01:43.040
rather than something that needs to
be coerced directly into a string,

23
00:01:43.040 --> 00:01:45.250
kind of like a variable name.

24
00:01:45.250 --> 00:01:52.846
Not that a variable name is a string.
&gt;&gt; Bianca Gandolfo: Okay, awesome.

25
00:01:52.846 --> 00:01:59.780
Any questions?
&gt;&gt; Bianca Gandolfo: No?

26
00:01:59.780 --> 00:02:01.330
&gt;&gt; Speaker 2: Question in the chat.

27
00:02:01.330 --> 00:02:01.910
&gt;&gt; Bianca Gandolfo: There's a question

28
00:02:01.910 --> 00:02:06.790
in the chat?
&gt;&gt; Speaker 2: Yeah, does person quote or

29
00:02:06.790 --> 00:02:11.410
in brackets quote zero
evaluate to an array method or

30
00:02:11.410 --> 00:02:14.570
an index position of that array?
&gt;&gt; Bianca Gandolfo: So

31
00:02:16.980 --> 00:02:21.780
the question is if.
&gt;&gt; Speaker 2: The answer is the value of

32
00:02:21.780 --> 00:02:25.910
the
&gt;&gt; Speaker 2: zero index of that array.

33
00:02:26.970 --> 00:02:27.800
&gt;&gt; Bianca Gandolfo: Yeah I just wanted to

34
00:02:27.800 --> 00:02:29.650
write it out.
&gt;&gt; Speaker 2: Yeah, go for it.

35
00:02:29.650 --> 00:02:30.860
&gt;&gt; Bianca Gandolfo: So the question was,

36
00:02:33.530 --> 00:02:38.540
what does this evaluate to?
&gt;&gt; Speaker 2: Mm-hm.

37
00:02:38.540 --> 00:02:39.500
&gt;&gt; Bianca Gandolfo: And the answer is

38
00:02:39.500 --> 00:02:43.130
that,
&gt;&gt; Bianca Gandolfo: so

39
00:02:43.130 --> 00:02:48.040
when we say an array method, what I'm
talking about are functions that are on

40
00:02:48.040 --> 00:02:51.628
your array such as,

41
00:02:51.628 --> 00:02:56.942
.push, right?

42
00:02:56.942 --> 00:02:59.850
.pop, things like that.

43
00:03:01.170 --> 00:03:04.590
That's an array method.
&gt;&gt; Bianca Gandolfo: And

44
00:03:04.590 --> 00:03:08.470
we know it's a method because, look we
need to put parentheses next to it.

45
00:03:10.400 --> 00:03:15.420
Versus a property, such as the length
property which we do not need

46
00:03:15.420 --> 00:03:23.200
to call because it is not a function.
&gt;&gt; Bianca Gandolfo: Yeah, cool.

47
00:03:23.200 --> 00:03:26.530
And if you're interested in deep
diving and this kind of thing,

48
00:03:26.530 --> 00:03:30.550
the first version on this course
has a lot of exercises on

49
00:03:31.670 --> 00:03:36.680
implementing this kind of stuff,

50
00:03:36.680 --> 00:03:41.760
like an array with the .length property
without using an array, right?

51
00:03:41.760 --> 00:03:44.020
We use an object and things like that,
so that's kinda fun.

52
00:03:45.020 --> 00:03:49.180
So if this is cool to you,
then I recommend doing that.

53
00:03:50.460 --> 00:03:52.710
Awesome.
&gt;&gt; Speaker 3: In one of the examples you

54
00:03:52.710 --> 00:03:57.995
put up there, you had an array when you

55
00:03:57.995 --> 00:04:04.090
had a type of,
&gt;&gt; Speaker 3: Equals array.

56
00:04:04.090 --> 00:04:09.050
Is there ever an example of that is true?
&gt;&gt; Bianca Gandolfo: No, yeah.

57
00:04:09.050 --> 00:04:14.100
But if you do want to check if something's
an array, which you will later on when we

58
00:04:14.100 --> 00:04:19.610
start implementing each map,
you can use array.isArray.

59
00:04:19.610 --> 00:04:24.240
And then you can pass the array.

60
00:04:24.240 --> 00:04:28.830
That's the traditional one, yep.
&gt;&gt; Speaker 2: Can you pass in a function

61
00:04:28.830 --> 00:04:35.250
as an index of an array?
&gt;&gt; Bianca Gandolfo: So when you say index

62
00:04:35.250 --> 00:04:39.810
that implies that-
&gt;&gt; Speaker 2: As a key.

63
00:04:39.810 --> 00:04:40.710
&gt;&gt; Bianca Gandolfo: As a key?

64
00:04:40.710 --> 00:04:42.030
&gt;&gt; Speaker 2: Well like, eight brackets

65
00:04:42.030 --> 00:04:46.630
function.
&gt;&gt; Bianca Gandolfo: I mean, you could.

66
00:04:46.630 --> 00:04:54.292
So the question is, can you do this?
&gt;&gt; Bianca Gandolfo: Right?

67
00:04:54.292 --> 00:04:55.065
&gt;&gt; Speaker 2: Yeah.

68
00:04:58.170 --> 00:04:58.950
&gt;&gt; Bianca Gandolfo: And,

69
00:04:58.950 --> 00:05:03.710
it's just gonna stringify that function.

70
00:05:03.710 --> 00:05:10.960
So we can look at the key.
&gt;&gt; Bianca Gandolfo: Let's see.

71
00:05:10.960 --> 00:05:17.310
So this is going to return all
of the keys of the object.

72
00:05:17.310 --> 00:05:19.970
I just wanna get the very first one and
hopefully this works.

73
00:05:19.970 --> 00:05:24.590
And I'm gonna do the type of,
and it's a string.

74
00:05:24.590 --> 00:05:27.970
So just to clarify,
that's what it's returning.

75
00:05:29.160 --> 00:05:33.000
So you are putting it in the bracket,
it's just stringifying it.

76
00:05:33.000 --> 00:05:37.830
So you can't call this function later,
right?

77
00:05:37.830 --> 00:05:41.820
And because of this weird
functionality of it stringifying, and

78
00:05:41.820 --> 00:05:46.950
it could stringify in different ways,
I don't recommend doing this.

79
00:05:46.950 --> 00:05:51.340
But for funsies, yeah you can.
&gt;&gt; Speaker 2: As long as it

80
00:05:51.340 --> 00:05:54.120
returns the string,
you could wrap it in a function

81
00:05:54.120 --> 00:05:56.670
expression and then-
&gt;&gt; Bianca Gandolfo: Yeah, if you call

82
00:05:56.670 --> 00:06:00.680
the function, then yeah, that's
&gt;&gt; Bianca Gandolfo: different.

83
00:06:00.680 --> 00:06:06.241
So we can,
&gt;&gt; Bianca Gandolfo: Wrap

84
00:06:06.241 --> 00:06:10.570
it,
&gt;&gt; Bianca Gandolfo: And

85
00:06:10.570 --> 00:06:12.400
then call it, yeah?

86
00:06:12.400 --> 00:06:14.140
Are you guys following?

87
00:06:14.140 --> 00:06:16.840
So I wrote out a function,
I defined it, I wrapped it

88
00:06:18.020 --> 00:06:21.370
in parentheses cuz we're gonna immediately
invoke it and it's an anonymous function.

89
00:06:22.470 --> 00:06:27.340
And this function is gonna return 3,
so these brackets are gonna

90
00:06:27.340 --> 00:06:32.540
evaluate this line.
&gt;&gt; Bianca Gandolfo: And

91
00:06:32.540 --> 00:06:36.309
so you can see.
&gt;&gt; Bianca Gandolfo: Now it's

92
00:06:36.309 --> 00:06:40.800
3.
&gt;&gt; Bianca Gandolfo: Not the most

93
00:06:40.800 --> 00:06:42.420
useful thing in the world but maybe.

94
00:06:42.420 --> 00:06:44.930
I've never had to do that.
&gt;&gt; Speaker 2: Sometimes if you have to

95
00:06:44.930 --> 00:06:47.720
call it to a function to
grab the idea of something,

96
00:06:47.720 --> 00:06:51.270
right?
&gt;&gt; Bianca Gandolfo: Yeah,

97
00:06:51.270 --> 00:06:52.570
I guess if you're like, yeah.

98
00:06:54.210 --> 00:06:56.110
&gt;&gt; Speaker 2: Maybe.
&gt;&gt; Bianca Gandolfo: Maybe.

99
00:06:56.110 --> 00:06:57.890
Yeah, I've never had to do
anything like that, but

100
00:06:57.890 --> 00:07:00.748
I could,
&gt;&gt; Bianca Gandolfo: Maybe.

101
00:07:00.748 --> 00:07:04.228
There are probably better ways to
write that so that's more readable.

102
00:07:04.228 --> 00:07:05.728
&gt;&gt; Speaker 2: Probably.

103
00:07:05.728 --> 00:07:06.482
&gt;&gt; Bianca Gandolfo: Yeah,

104
00:07:06.482 --> 00:07:10.050
cuz a lot of people, just like maybe
you guys didn't know this before I

105
00:07:10.050 --> 00:07:12.740
told you this,
a lot of people don't know this, and

106
00:07:12.740 --> 00:07:15.860
you don't want to just throw craziness at
people when they're reading your code.

107
00:07:15.860 --> 00:07:22.240
Just as a rule of thumb, try to keep it
to the point, and don't get too fancy.

108
00:07:22.240 --> 00:07:25.410
If you're the kinda person who
likes to take it to the edge,

109
00:07:25.410 --> 00:07:28.610
then you'll really like
functional programming.

110
00:07:28.610 --> 00:07:34.640
There's this whole cult of people who are
always pushing it to the edge and seeing

111
00:07:34.640 --> 00:07:40.910
how many less lines of code and less
characters they can do the same thing.

112
00:07:40.910 --> 00:07:44.400
Only like people in the cool kids club
can understand what they're doing and

113
00:07:44.400 --> 00:07:47.330
I'm not part of that club and
I'm not trying to join.

114
00:07:47.330 --> 00:07:48.810
But maybe you are,

115
00:07:48.810 --> 00:07:53.830
maybe you wanna go through like the hazing
of it and have that experience.

116
00:07:55.900 --> 00:07:59.819
Maybe, awesome, these are great questions.

117
00:08:00.860 --> 00:08:01.760
One more question.

118
00:08:02.940 --> 00:08:04.120
What's my next slide?

119
00:08:04.120 --> 00:08:05.600
Okay.
One more question and

120
00:08:05.600 --> 00:08:06.730
we're gonna jump to exercises.

121
00:08:11.000 --> 00:08:15.310
How about,
who has not asked many questions?

122
00:08:15.310 --> 00:08:17.210
I feel like you guys are a quite bunch.

123
00:08:17.210 --> 00:08:23.280
I'm a little bit disappointed,
to be honest.

124
00:08:23.280 --> 00:08:30.100
You guys have to get on this blue stuff.
&gt;&gt; Speaker 4: One question I have.

125
00:08:31.490 --> 00:08:35.110
Earlier you said something about,
well throughout

126
00:08:35.110 --> 00:08:38.700
you have been talking about the
similarities between arrays and objects.

127
00:08:40.230 --> 00:08:43.340
So then what is the difference?
&gt;&gt; Bianca Gandolfo: Yeah,

128
00:08:43.340 --> 00:08:44.610
that's a good question.

129
00:08:44.610 --> 00:08:47.300
So an array is a special kind of object.

130
00:08:48.340 --> 00:08:53.410
And they have really

131
00:08:53.410 --> 00:08:57.250
the most special thing about
an array is the .length property,

132
00:08:57.250 --> 00:09:03.390
which a property that is computed
as you add numerical indices,

133
00:09:03.390 --> 00:09:09.700
and numerical indices are different
than properties on an array.

134
00:09:09.700 --> 00:09:16.130
Because an array captures that and
will increment the length, right?

135
00:09:16.130 --> 00:09:19.580
So if you say,
do we still have our Y in here?

136
00:09:19.580 --> 00:09:23.430
Yeah, so if you say Y, Y.length, it's 1.

137
00:09:23.430 --> 00:09:26.770
But if we say Y.hello = goodbye.

138
00:09:26.770 --> 00:09:35.390
Can you guys see that at the bottom?
&gt;&gt; Bianca Gandolfo: Y.length is still 1.

139
00:09:35.390 --> 00:09:37.890
So there's a special behavior here for

140
00:09:39.620 --> 00:09:45.040
arrays around its numerical indices.

141
00:09:45.040 --> 00:09:48.710
So any number-
&gt;&gt; Speaker 2: Show setting wise numerical

142
00:09:48.710 --> 00:09:51.840
indices and having the length changed?
&gt;&gt; Bianca Gandolfo: What's that?

143
00:09:51.840 --> 00:09:54.970
&gt;&gt; Speaker 2: Could we see a demo of

144
00:09:54.970 --> 00:09:56.630
adding numerical indices and

145
00:09:56.630 --> 00:09:58.990
seeing the length change?
&gt;&gt; Bianca Gandolfo: Yeah so,

146
00:09:58.990 --> 00:10:01.960
well,
&gt;&gt; Bianca Gandolfo: so we can add for

147
00:10:01.960 --> 00:10:06.180
example an interesting thing that happens,
we have Y.

148
00:10:06.180 --> 00:10:07.350
So length one, right?

149
00:10:07.350 --> 00:10:09.190
We have one value in there, true.

150
00:10:09.190 --> 00:10:16.090
Let's set the 10th one to false, and
then we have a bunch of empty ones.

151
00:10:16.090 --> 00:10:17.410
And let's see what the length is.

152
00:10:20.130 --> 00:10:21.050
Yeah.

153
00:10:21.050 --> 00:10:26.460
So there's special behavior
around those numerical indices.

154
00:10:26.460 --> 00:10:33.880
And there are methods that you can
use to take advantage of this.

155
00:10:33.880 --> 00:10:36.590
So some cool ones are like reverse.

156
00:10:36.590 --> 00:10:40.990
So the cool thing about having numerical
indices is that they're ordered.

157
00:10:40.990 --> 00:10:43.510
And when things are ordered
you can reverse them, right?

158
00:10:43.510 --> 00:10:46.550
With an object we don't
really have any such order.

159
00:10:46.550 --> 00:10:54.660
So for things like sorting and
the order, and what else?

160
00:10:56.080 --> 00:10:58.580
What's interesting about an array

161
00:10:58.580 --> 00:11:03.270
that we can't do with an object?
&gt;&gt; Bianca Gandolfo: It's a lot easier to

162
00:11:03.270 --> 00:11:06.320
loop through an array than an object as

163
00:11:06.320 --> 00:11:11.790
well.
&gt;&gt; Speaker 5: Could

164
00:11:11.790 --> 00:11:16.930
you open up that object to see what-
&gt;&gt; Bianca Gandolfo: This

165
00:11:16.930 --> 00:11:17.796
one?
&gt;&gt; Speaker 5: Yeah,

166
00:11:17.796 --> 00:11:19.721
&gt;&gt; Speaker 5: what are the

167
00:11:21.840 --> 00:11:22.620
&gt;&gt; Bianca Gandolfo: Yeah, so

168
00:11:22.620 --> 00:11:28.820
also be careful when you expect
the Chrome Developer Tools

169
00:11:28.820 --> 00:11:34.630
to print out, tThis is just
a representation of the array, right?

170
00:11:34.630 --> 00:11:37.460
It probably looks very
different in memory, or

171
00:11:37.460 --> 00:11:39.460
it definitely looks different in memory.

172
00:11:39.460 --> 00:11:43.730
And some different developer tools and
different versions of

173
00:11:43.730 --> 00:11:48.890
Chrome Developer Tools will actually print
out different things, so just be careful.

174
00:11:48.890 --> 00:11:53.200
If you see variants in what
a console.log() is showing you,

175
00:11:53.200 --> 00:11:58.940
it's not necessarily because
it's a different behavior.

176
00:12:00.088 --> 00:12:05.560
Sometimes some,
&gt;&gt; Bianca Gandolfo: Developer

177
00:12:05.560 --> 00:12:07.650
tools will hide these properties.

178
00:12:07.650 --> 00:12:11.990
And they'll only show
the numerical indices.

179
00:12:11.990 --> 00:12:15.930
So you'd have to check that explicitly,
like y.hello and

180
00:12:15.930 --> 00:12:18.640
it will still return something,
but for whatever reason,

181
00:12:18.640 --> 00:12:23.210
when it's representing it in the console,
it just throws it out.

182
00:12:25.460 --> 00:12:32.300
So I think even when I first
taught this course that I

183
00:12:32.300 --> 00:12:36.970
had to prove that it was there, I couldn't
just print it out and show it was there.

184
00:12:36.970 --> 00:12:41.321
So that was just a few years ago.
&gt;&gt; Bianca Gandolfo: Yeah.

185
00:12:43.820 --> 00:12:47.120
&gt;&gt; Speaker 2: Is, [COUGH], giving an array

186
00:12:47.120 --> 00:12:52.420
object a property, is that uncommon to do?
&gt;&gt; Bianca Gandolfo: To give an array-

187
00:12:52.420 --> 00:12:53.370
&gt;&gt; Speaker 2: Yes, so for instance,

188
00:12:53.370 --> 00:12:59.590
when you gave assigned
the property goodbye.

189
00:12:59.590 --> 00:13:02.981
Is that uncommon to attach that to

190
00:13:02.981 --> 00:13:06.150
an array?
&gt;&gt; Bianca Gandolfo: In

191
00:13:06.150 --> 00:13:10.640
application level code,
you typically don't do stuff like this.

192
00:13:10.640 --> 00:13:13.790
But in libraries and stuff,
it happens a lot, yeah.

193
00:13:15.960 --> 00:13:20.910
But it's important to know this just so
you'll

194
00:13:20.910 --> 00:13:26.690
understand that the rules are consistent,
that arrays are objects, right?

195
00:13:26.690 --> 00:13:28.390
So that's why I use it as an example.

