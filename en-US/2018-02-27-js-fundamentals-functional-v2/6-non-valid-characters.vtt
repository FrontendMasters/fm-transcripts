WEBVTT

1
00:00:00.320 --> 00:00:04.390
Here is what I was saying
about Non-Valid Characters.

2
00:00:04.390 --> 00:00:08.201
Well, I think just something to keep
in mind is just try not to use invalid

3
00:00:08.201 --> 00:00:09.898
characters as property names.

4
00:00:09.898 --> 00:00:14.413
You know if you really have to do it fine,
but

5
00:00:14.413 --> 00:00:21.003
this is not a very good naming here
on this line try to avoid that,

6
00:00:21.003 --> 00:00:27.008
but anything like this right if
you put puts on it its fine.

7
00:00:27.008 --> 00:00:31.930
Similarly in the object
literal notation you need

8
00:00:31.930 --> 00:00:36.966
to put around bolt member or
save before we had to but

9
00:00:36.966 --> 00:00:42.021
if you using non valid
characters then you have to.

10
00:00:42.021 --> 00:00:46.928
And then for
the zero here there's another thing that

11
00:00:46.928 --> 00:00:50.526
makes it seem like an array a special but

12
00:00:50.526 --> 00:00:55.555
it's not you can set zero
property on an object right.

13
00:01:00.960 --> 00:01:02.575
Oops.

14
00:01:06.080 --> 00:01:09.801
That shouldn't be too surprising but

15
00:01:09.801 --> 00:01:14.218
it makes it seem unusual
because we don't put

16
00:01:14.218 --> 00:01:19.334
the quotes around the brackets and
in this context,

17
00:01:19.334 --> 00:01:26.209
with the bracket you can put anything
that can be evaluated actually.

18
00:01:26.209 --> 00:01:30.948
And so you can say like two plus two.

19
00:01:30.948 --> 00:01:31.745
Stuff like that.

20
00:01:31.745 --> 00:01:36.497
So that's why it's seeing this
as something that needs to be

21
00:01:36.497 --> 00:01:40.971
evaluated rather than something
that needs to be coarsed

22
00:01:40.971 --> 00:01:45.091
directly into a string kind
of like a variable name.

23
00:01:45.091 --> 00:01:51.177
Not that a variable name is a string,
Okay, awesome,

24
00:01:51.177 --> 00:01:59.628
any questions, No?

25
00:01:59.628 --> 00:02:00.427
&gt;&gt; Questions in the chat.

26
00:02:00.427 --> 00:02:04.456
&gt;&gt; There's a question in the chat?

27
00:02:04.456 --> 00:02:07.307
&gt;&gt; Yeah this person quote or

28
00:02:07.307 --> 00:02:13.007
in brackets Oct zero evaluate
to an array method or

29
00:02:13.007 --> 00:02:16.820
an index position of that array.

30
00:02:16.820 --> 00:02:20.202
&gt;&gt; So the question is if.

31
00:02:20.202 --> 00:02:26.866
&gt;&gt; The answer is the value of
the Zero index of that array.

32
00:02:26.866 --> 00:02:28.298
&gt;&gt; Yeah, I just wanted to write it out.

33
00:02:28.298 --> 00:02:29.580
&gt;&gt; Yeah, for it.

34
00:02:29.580 --> 00:02:35.022
&gt;&gt; So the question was,
What does this evaluate to?

35
00:02:38.311 --> 00:02:45.008
And the answer is that it doesn't call so
when we say an array method,

36
00:02:45.008 --> 00:02:51.011
what I'm talking about are functions
that are on your array,

37
00:02:51.011 --> 00:02:56.167
such as .push Right?

38
00:02:56.167 --> 00:03:01.099
.pop, things like that.

39
00:03:01.099 --> 00:03:06.119
That's an array method and
we know it's a method because

40
00:03:06.119 --> 00:03:11.243
look we need to put parentheses
next to it versus a property

41
00:03:11.243 --> 00:03:16.890
such as the length property which
we do not need to call because it

42
00:03:16.890 --> 00:03:23.024
is not a function Yeah, cool.

43
00:03:23.024 --> 00:03:27.969
And if you're interested in like
deep diving in this kinda thing,

44
00:03:27.969 --> 00:03:32.648
the first version of this course,
has a lot of exercises on like

45
00:03:32.648 --> 00:03:37.860
implementing this kinda stuff like
an array with a dot length property

46
00:03:37.860 --> 00:03:43.098
without using an array, right we use
an objects and things like that.

47
00:03:43.098 --> 00:03:44.916
So that's kinda fun.

48
00:03:44.916 --> 00:03:50.791
So, if this is cool to you,
then I recommend doing that awesome.

49
00:03:50.791 --> 00:03:56.435
&gt;&gt; In one of the examples
you put up there,

50
00:03:56.435 --> 00:04:03.970
you had a an array then you
had a type of equals array.

51
00:04:03.970 --> 00:04:07.426
Is there ever an example that is true?

52
00:04:07.426 --> 00:04:08.447
&gt;&gt; No.

53
00:04:08.447 --> 00:04:13.566
Yeah, but if you do want to
check if something is an array,

54
00:04:13.566 --> 00:04:18.894
which you will later on when we
start implementing each map,

55
00:04:18.894 --> 00:04:24.032
you can use array.isarray,
then you can pass the array.

56
00:04:24.032 --> 00:04:25.383
That's a traditional one.

57
00:04:25.383 --> 00:04:26.008
Yep.

58
00:04:26.008 --> 00:04:32.484
&gt;&gt; Can you pass in a function
as the index of that array?

59
00:04:32.484 --> 00:04:38.812
&gt;&gt; So when you say index that implies as.

60
00:04:38.812 --> 00:04:40.688
&gt;&gt; A key
&gt;&gt; As a key.

61
00:04:40.688 --> 00:04:43.580
&gt;&gt; Like a brackets function.

62
00:04:43.580 --> 00:04:45.651
&gt;&gt; I mean, you could.

63
00:04:45.651 --> 00:04:49.374
So the question is,

64
00:04:49.374 --> 00:04:53.975
can you do this, right?

65
00:04:53.975 --> 00:04:55.313
&gt;&gt; Yeah.

66
00:04:55.313 --> 00:05:03.411
&gt;&gt; And it's just gonna like
string of phi that function.

67
00:05:03.411 --> 00:05:06.138
So we can look at the key.

68
00:05:10.828 --> 00:05:17.274
So this is going to return all
of the keys of the object.

69
00:05:17.274 --> 00:05:21.521
I just wanna get the very first one and
hopefully this works and

70
00:05:21.521 --> 00:05:24.554
I'm gonna do the type of and
it's a string.

71
00:05:24.554 --> 00:05:29.119
So just to clarify,
that's what it's returning.

72
00:05:29.119 --> 00:05:32.949
So you're putting it in the brackets,
it's just string a fIying it.

73
00:05:32.949 --> 00:05:37.710
So you can't call this function later,
right?

74
00:05:37.710 --> 00:05:41.633
And because of this weird functionality
Have it string of fIying.

75
00:05:41.633 --> 00:05:43.813
And it could string
a file in different ways.

76
00:05:43.813 --> 00:05:48.709
I don't recommend doing this but
for like fancies.

77
00:05:48.709 --> 00:05:52.168
Yeah, you can,
&gt;&gt; As long as it returns the string,

78
00:05:52.168 --> 00:05:55.568
you could wrap it in
a function expression and then

79
00:05:55.568 --> 00:05:57.448
&gt;&gt; Yeah, if you call the function,

80
00:05:57.448 --> 00:05:59.335
then yeah, that's different.

81
00:05:59.335 --> 00:06:08.564
So we can Wrap it.

82
00:06:10.540 --> 00:06:12.469
And then call it.

83
00:06:12.469 --> 00:06:14.448
Yeah, you guys following.

84
00:06:14.448 --> 00:06:15.033
So I wrote out a function.

85
00:06:15.033 --> 00:06:16.342
I defined it.

86
00:06:16.342 --> 00:06:20.536
I wrapped it in parentheses,
cuz we're gonna immediately invoke it and

87
00:06:20.536 --> 00:06:22.337
it's an anonymous function.

88
00:06:22.337 --> 00:06:26.136
And this function is gonna return 3, so

89
00:06:26.136 --> 00:06:30.510
these brackets are gonna
evaluate this line.

90
00:06:32.229 --> 00:06:37.056
And so you can see Now it's 3.

91
00:06:40.217 --> 00:06:42.616
Not the most useful
thing in the world but,

92
00:06:42.616 --> 00:06:46.330
maybe I've never had idea
&gt;&gt; Sometimes you have to call out to

93
00:06:46.330 --> 00:06:49.821
a function to grab the idea of something,
right?

94
00:06:49.821 --> 00:06:54.553
&gt;&gt; Yeah, I guess if you're like yeah
&gt;&gt; Maybe

95
00:06:54.553 --> 00:06:55.902
&gt;&gt; Maybe Yeah,

96
00:06:55.902 --> 00:06:59.718
I've never had to do anything like that,
but I could, maybe,

97
00:06:59.718 --> 00:07:04.190
there are probably better ways to
write that, so that's more readable.

98
00:07:04.190 --> 00:07:05.308
&gt;&gt; Probably.

99
00:07:05.308 --> 00:07:09.570
&gt;&gt; Yeah, cuz a lot of people just like
maybe you guys didn't know this before

100
00:07:09.570 --> 00:07:12.479
I told you this,
a lot of people don't know this.

101
00:07:12.479 --> 00:07:16.151
And you don't wanna just throw craziness
at people when they're reading your code,

102
00:07:16.151 --> 00:07:17.181
just as a rule of thumb.

103
00:07:17.181 --> 00:07:20.843
I try to keep it, to the point and
don't get too fancy,

104
00:07:20.843 --> 00:07:26.021
if you're the kind of person who likes
to take it to the edge and you'll really

105
00:07:26.021 --> 00:07:31.440
like functional programming cuz there's
like a whole cult of people who are just

106
00:07:31.440 --> 00:07:36.324
like always pushing it to the edge and
seeing how many less lines of code.

107
00:07:36.324 --> 00:07:40.586
They can care less characters,
they can do the same thing only people in

108
00:07:40.586 --> 00:07:43.941
the cool kids club can
understand what they're doing.

109
00:07:43.941 --> 00:07:48.776
And I'm not part of that club and
I'm not trying to join but maybe you are.

110
00:07:48.776 --> 00:07:55.760
Maybe you wanna go through like the hazing
of it and have that experience.

111
00:07:55.760 --> 00:07:56.849
Maybe.

112
00:07:56.849 --> 00:07:58.640
Awesome.

113
00:07:58.640 --> 00:08:02.905
These are great questions,
one more question.

114
00:08:02.905 --> 00:08:03.933
What's my next slide?

115
00:08:03.933 --> 00:08:07.908
Okay, one more question and
we're gonna jump to exercise.

116
00:08:07.908 --> 00:08:13.698
&gt;&gt; One question I have, earlier you said
something about, we'll throw out a you've

117
00:08:13.698 --> 00:08:19.010
been talking about just the similarities
between like arrays and objects.

118
00:08:19.010 --> 00:08:21.132
So then what is the difference?

119
00:08:21.132 --> 00:08:22.934
&gt;&gt; Yeah, it's a good question.

120
00:08:22.934 --> 00:08:27.299
So, an array is a special
kind of object and

121
00:08:27.299 --> 00:08:35.670
they have really the most special thing
about an array is the dot length property,

122
00:08:35.670 --> 00:08:42.242
which a property that is computed
as you add numerical indices.

123
00:08:42.242 --> 00:08:48.390
Numerical indices are different
than properties on an array,

124
00:08:48.390 --> 00:08:54.547
because an array captures that and
will increment the length.

125
00:08:54.547 --> 00:08:56.163
Right?
So if you say,

126
00:08:56.163 --> 00:08:58.612
do we still have our y in here?

127
00:08:58.612 --> 00:09:03.511
Yeah so if you say y,
y.length it's one but

128
00:09:03.511 --> 00:09:07.485
if we say Y.Hello equals goodbye,

129
00:09:07.485 --> 00:09:11.465
can you guys see that at the bottom?

130
00:09:11.465 --> 00:09:14.586
Y.length is still one.

131
00:09:14.586 --> 00:09:19.047
So there's a special behavior here for

132
00:09:19.047 --> 00:09:23.784
arrays around it's numerical indices.

133
00:09:23.784 --> 00:09:28.190
So any numbering
&gt;&gt; Y is numerical indices and

134
00:09:28.190 --> 00:09:30.219
having the length change.

135
00:09:30.219 --> 00:09:31.314
&gt;&gt; What's that?

136
00:09:31.314 --> 00:09:36.787
&gt;&gt; Can we see a demo of adding numerical
indices and seeing the length change?

137
00:09:36.787 --> 00:09:41.216
&gt;&gt; Yeah, so we can add, for
example, an interesting

138
00:09:41.216 --> 00:09:46.164
thing that happens as if we have y,
so length 1, right?

139
00:09:46.164 --> 00:09:47.813
We have one value in there, true.

140
00:09:47.813 --> 00:09:50.649
Let's set the tenth one to false.

141
00:09:52.616 --> 00:09:56.401
And then we have a bunch of empty ones and
let's see what the length is.

142
00:09:58.917 --> 00:10:06.155
Yeah, so there's special behavior
around those numerical indices,

143
00:10:06.155 --> 00:10:12.681
and there are methods that you can
use to take advantage of this.

144
00:10:12.681 --> 00:10:15.425
So some cool ones are like reverse.

145
00:10:15.425 --> 00:10:19.912
So the cool thing about having numerical
indices is that they're ordered.

146
00:10:19.912 --> 00:10:23.401
And when things are ordered,
you can reverse them with an object,

147
00:10:23.401 --> 00:10:25.408
we don't really have any such order.

148
00:10:25.408 --> 00:10:30.494
So for things like sorting and
the order and

149
00:10:30.494 --> 00:10:39.119
what else is interesting about an array
that we can't do with an object?

150
00:10:39.119 --> 00:10:45.879
It's a lot easier to loop through
an array isn't an object as well.

151
00:10:49.157 --> 00:10:51.240
Yeah.

152
00:10:51.240 --> 00:10:56.259
&gt;&gt; Can you open up that object to see-
&gt;&gt; This one?

153
00:10:56.259 --> 00:11:01.253
&gt;&gt; Yeah, whether its just
&gt;&gt; Yeah.

154
00:11:01.253 --> 00:11:08.561
So also be careful when you expect
the chrome developer tools to print out,

155
00:11:08.561 --> 00:11:13.673
this is just a representation
of the array, right?

156
00:11:13.673 --> 00:11:18.520
It probably looks very different in memory
or it definitely looks very different in

157
00:11:18.520 --> 00:11:22.677
memory and some different developer tools,
and different versions of

158
00:11:22.677 --> 00:11:26.784
chrome developer, tools will
actually print out different things.

159
00:11:26.784 --> 00:11:31.936
So just be careful if you see variance in
what a console dot log is showing you.

160
00:11:31.936 --> 00:11:39.434
It's not because there's no necessarily
because it's a different behavior.

161
00:11:39.434 --> 00:11:47.636
Sometimes, some developer tools
will hide these properties.

162
00:11:47.636 --> 00:11:50.791
The only sort of show
the numerical indices.

163
00:11:50.791 --> 00:11:53.657
So you'd have to check that explicitly.

164
00:11:53.657 --> 00:11:59.267
Like y.hello and it will still return
something but for whatever reason,

165
00:11:59.267 --> 00:12:04.266
when it's representing it in the console,
it just throws it out.

166
00:12:04.266 --> 00:12:08.408
So I think even when I first taught this

167
00:12:08.408 --> 00:12:13.204
course that I had to
prove that it was there.

168
00:12:13.204 --> 00:12:15.872
I couldn't just print it out and
show it was there.

169
00:12:15.872 --> 00:12:17.278
So that was just a few years ago.

170
00:12:22.601 --> 00:12:30.179
&gt;&gt; Is [COUGH] Giving an array object
to property Is that uncommon to do.

171
00:12:30.179 --> 00:12:31.544
&gt;&gt; To give an array.

172
00:12:31.544 --> 00:12:38.002
&gt;&gt; Yeah so for
instance when you gave assign the property

173
00:12:38.002 --> 00:12:44.327
goodbye is that uncommon
to attach that to an array?

174
00:12:44.327 --> 00:12:48.994
&gt;&gt; In application level code You
typically don't do stuff like this, but

175
00:12:48.994 --> 00:12:51.814
in libraries and stuff, it happens a lot.

176
00:12:54.679 --> 00:12:59.980
But it's important to know this just so
you understand that

177
00:12:59.980 --> 00:13:05.502
the rules are consistent,
that arrays are objects, right?

178
00:13:05.502 --> 00:13:07.280
So that's why I use it as an example.

