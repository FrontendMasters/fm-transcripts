WEBVTT

1
00:00:00.390 --> 00:00:04.440
&gt;&gt; Bianca Gandolfo: So just a quick
review here, what is this gonna return?

2
00:00:04.440 --> 00:00:08.150
Actually, let's play the game
I was telling you guys before,

3
00:00:08.150 --> 00:00:11.890
where we're gonna run
this code as a group.

4
00:00:13.120 --> 00:00:16.492
Who wants to go first?
&gt;&gt; Speaker 2: Create

5
00:00:16.492 --> 00:00:19.767
a constant called createTuple.
&gt;&gt; Bianca Gandolfo: Mm-hm, yeah, so

6
00:00:19.767 --> 00:00:25.440
we will Create constant variable,
we'll name that variable createTuple.

7
00:00:25.440 --> 00:00:30.094
Does anyone know what a tuple is?
&gt;&gt; Bianca Gandolfo: A Tuple is

8
00:00:30.094 --> 00:00:32.681
a data structure that has an array,

9
00:00:32.681 --> 00:00:38.760
that has collection of arrays that
have two values, call them a tuple.

10
00:00:38.760 --> 00:00:46.460
Okay, so we created this,
&gt;&gt; Bianca Gandolfo: Variable called tuple.

11
00:00:46.460 --> 00:00:49.040
What happens next?
&gt;&gt; Speaker 3: So

12
00:00:49.040 --> 00:00:52.040
that variable is set equal to a function.
&gt;&gt; Bianca Gandolfo: Yep,

13
00:00:52.040 --> 00:00:55.400
the variable is set equal to a function.

14
00:00:55.400 --> 00:01:00.360
Chris, what happens next?
&gt;&gt; Chris: The function is skipped until

15
00:01:00.360 --> 00:01:03.880
it is invoked.
&gt;&gt; Bianca Gandolfo: Yeah, extra points, so

16
00:01:03.880 --> 00:01:05.280
we skip down here.

17
00:01:05.280 --> 00:01:06.170
What happens next?

18
00:01:07.570 --> 00:01:11.850
Abdi?
&gt;&gt; Abdi: It takes the arguments from

19
00:01:11.850 --> 00:01:15.307
createTuple, and.
&gt;&gt; Bianca Gandolfo: Yeah, so we call the

20
00:01:15.307 --> 00:01:17.470
createTuple function with these arguments.
&gt;&gt; Abdi: Mm-hm.

21
00:01:19.980 --> 00:01:23.357
&gt;&gt; Speaker 6: And then CreateTuple returns

22
00:01:23.357 --> 00:01:30.794
the first array with it could and
the second array with be anyone.

23
00:01:30.794 --> 00:01:35.172
&gt;&gt; Bianca Gandolfo: It could be anyone.

24
00:01:35.172 --> 00:01:42.080
It makes me so happy yeah, so
it returns it could be anyone, awesome.

25
00:01:44.230 --> 00:01:46.493
So here's the spread operator.

26
00:01:46.493 --> 00:01:47.740
Have you guys seen this yet?

27
00:01:47.740 --> 00:01:52.050
I think this might be the first time that
we really have started to talk about it.

28
00:01:52.050 --> 00:01:54.950
So, or the rest operator.

29
00:01:56.930 --> 00:02:01.803
What this done is, something to note is

30
00:02:01.803 --> 00:02:08.010
that we pass no one into this function and
it wasn't

31
00:02:08.010 --> 00:02:12.200
picked up because we don't have a variable
name that maps to that directly, right?

32
00:02:12.200 --> 00:02:17.286
So a is It, b be, c could,
d anyone, right, you see that?

33
00:02:17.286 --> 00:02:20.240
There's no e to handle this so

34
00:02:22.430 --> 00:02:27.100
we have something handy called the Spread
Operator and it takes care of that for

35
00:02:27.100 --> 00:02:30.300
us by doing something interesting.

36
00:02:30.300 --> 00:02:32.240
So it's gonna return,
can you guys see this gray?

37
00:02:34.390 --> 00:02:40.364
So it's going to say It how interesting

38
00:02:40.364 --> 00:02:44.709
it's formatting my stuff,

39
00:02:44.709 --> 00:02:48.148
It and then could be and

40
00:02:48.148 --> 00:02:53.397
then we get another one in there and

41
00:02:53.397 --> 00:02:57.922
then it says anyone, no one,

42
00:02:57.922 --> 00:03:03.190
started with a weird formatting.

43
00:03:03.190 --> 00:03:07.625
Let me just put this
&gt;&gt; Bianca Gandolfo: There.

44
00:03:09.156 --> 00:03:10.182
&gt;&gt; Bianca Gandolfo: So what it does is it

45
00:03:10.182 --> 00:03:14.493
gathers all the extra arguments at the
end, and puts it in a handy little array.

