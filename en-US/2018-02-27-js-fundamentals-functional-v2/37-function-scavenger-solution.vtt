WEBVTT

1
00:00:00.000 --> 00:00:03.326
&gt;&gt; Bianca Gandolfo: We're gonna start
with definitions, Function Definitions.

2
00:00:03.326 --> 00:00:04.675
You wanna start over here, Ben?

3
00:00:04.675 --> 00:00:06.991
&gt;&gt; Ben: Sure.

4
00:00:06.991 --> 00:00:09.884
&gt;&gt; Bianca Gandolfo: Where
is a function definition?

5
00:00:09.884 --> 00:00:13.505
&gt;&gt; Ben: In the first function,
name improver equals function?

6
00:00:13.505 --> 00:00:14.204
&gt;&gt; Bianca Gandolfo: Yeah, here.

7
00:00:14.204 --> 00:00:14.991
Cool.

8
00:00:17.313 --> 00:00:19.176
&gt;&gt; Bianca Gandolfo: We have
a function definition here.

9
00:00:19.176 --> 00:00:22.293
How about Dan, do you see another one?

10
00:00:22.293 --> 00:00:25.049
&gt;&gt; Dan: The other callback function,
inside forEach?

11
00:00:25.049 --> 00:00:28.633
&gt;&gt; Bianca Gandolfo: Yep, here's one.

12
00:00:28.633 --> 00:00:33.089
And Ryan?

13
00:00:33.089 --> 00:00:36.951
&gt;&gt; Ryan: That looks like
the last one to me.

14
00:00:36.951 --> 00:00:37.648
C, yep.

15
00:00:37.648 --> 00:00:39.406
&gt;&gt; Bianca Gandolfo: Awesome.

16
00:00:39.406 --> 00:00:43.149
How do we know that's
a function definition?

17
00:00:43.149 --> 00:00:47.420
Jenny?

18
00:00:47.420 --> 00:00:50.536
&gt;&gt; Jenny: That says function and
then evokes it after.

19
00:00:50.536 --> 00:00:52.525
&gt;&gt; Bianca Gandolfo: This say function and
isn't necessarily evoke it.

20
00:00:52.525 --> 00:00:53.192
&gt;&gt; Jenny: Okay.

21
00:00:53.192 --> 00:00:53.885
&gt;&gt; Bianca Gandolfo: Yeah.

22
00:00:53.885 --> 00:00:58.402
So it says function, we have some
brackets, and we have some parenthesis and

23
00:00:58.402 --> 00:01:00.076
then we have some brackets.

24
00:01:00.076 --> 00:01:02.272
That's our function definition.

25
00:01:02.272 --> 00:01:05.063
It could be a little bit different,
depends on how you name the function.

26
00:01:05.063 --> 00:01:07.798
This is one that we're
saving it in a variable but

27
00:01:07.798 --> 00:01:11.012
you can also name your function
by putting the name here.

28
00:01:11.012 --> 00:01:14.845
So you could just hit Save function,
name, and then the parentheses.

29
00:01:18.835 --> 00:01:20.846
&gt;&gt; Bianca Gandolfo: Buy yeah,
that's the function definition.

30
00:01:20.846 --> 00:01:22.971
Awesome.

31
00:01:22.971 --> 00:01:25.801
Josh, where's the function name?

32
00:01:25.801 --> 00:01:26.736
&gt;&gt; Josh: Name improver.

33
00:01:26.736 --> 00:01:28.928
&gt;&gt; Bianca Gandolfo: Name improver.

34
00:01:28.928 --> 00:01:30.818
Awesome.

35
00:01:30.818 --> 00:01:32.475
Do you see another name?

36
00:01:36.588 --> 00:01:40.406
&gt;&gt; Anthony: The other ones are anonymous,
right?

37
00:01:40.406 --> 00:01:44.964
&gt;&gt; Bianca Gandolfo: So this is
an anonymous function that's assigned to

38
00:01:44.964 --> 00:01:49.442
a variable,
&gt;&gt; Bianca Gandolfo: But

39
00:01:49.442 --> 00:01:53.120
we have other function names,
I should the easy one.

40
00:02:00.563 --> 00:02:02.165
&gt;&gt; Bianca Gandolfo: So when we-
&gt;&gt; Altemir: Hide?

41
00:02:02.165 --> 00:02:03.695
&gt;&gt; Bianca Gandolfo: Yeah, hide.

42
00:02:03.695 --> 00:02:04.397
That's a function name.

43
00:02:07.259 --> 00:02:07.785
&gt;&gt; Bianca Gandolfo: Cameron?

44
00:02:14.068 --> 00:02:14.647
&gt;&gt; Bianca Gandolfo: Do you see one?

45
00:02:16.169 --> 00:02:17.084
&gt;&gt; Cameron: No.

46
00:02:17.084 --> 00:02:18.710
&gt;&gt; Bianca Gandolfo: How about Eddie,
do you see one?

47
00:02:18.710 --> 00:02:21.738
&gt;&gt; Eddie: [COUGH] Is forEach
considered a function?

48
00:02:21.738 --> 00:02:25.279
&gt;&gt; Bianca Gandolfo: Yep, forEach is one.

49
00:02:25.279 --> 00:02:26.394
Chris?

50
00:02:26.394 --> 00:02:27.743
&gt;&gt; Chris: On.

51
00:02:27.743 --> 00:02:29.291
&gt;&gt; Bianca Gandolfo: Yeah,
that's a good one.

52
00:02:29.291 --> 00:02:30.459
On.

53
00:02:30.459 --> 00:02:31.064
Abdi?

54
00:02:39.892 --> 00:02:43.196
&gt;&gt; Bianca Gandolfo: You're kind of left
with the trickier ones, to be honest.

55
00:02:43.196 --> 00:02:45.052
&gt;&gt; Altemir: Is it console?

56
00:02:45.052 --> 00:02:45.667
&gt;&gt; Bianca Gandolfo: Close.

57
00:02:48.975 --> 00:02:51.417
&gt;&gt; Bianca Gandolfo: So you say console.,
which means it's what?

58
00:02:54.342 --> 00:02:58.144
&gt;&gt; Bianca Gandolfo: If it has a dot,
it means it's an object,

59
00:02:58.144 --> 00:03:00.435
so console is an object.

60
00:03:00.435 --> 00:03:05.058
And it has a method called log on it.

61
00:03:05.058 --> 00:03:09.315
Console has a lot of cool methods,
you can do consol.assert,

62
00:03:09.315 --> 00:03:14.389
you can do consol.error, consol.dur,
there's all kinds of fun ones.

63
00:03:14.389 --> 00:03:19.324
When I do too many consol.logs it'll
do consol.error, and it'll be red and

64
00:03:19.324 --> 00:03:21.588
I'll know that's a specific one.

65
00:03:21.588 --> 00:03:22.722
Cool.

66
00:03:22.722 --> 00:03:26.873
&gt;&gt; Ryan: Jonathan online is asking when
would you use a function expression over

67
00:03:26.873 --> 00:03:27.850
a declaration.

68
00:03:27.850 --> 00:03:31.301
&gt;&gt; Bianca Gandolfo: Yeah.

69
00:03:31.301 --> 00:03:36.967
So a function declaration is here when
we're assigning it to a variable, and

70
00:03:36.967 --> 00:03:42.907
a function expression is a named function
when we say function, like name here.

71
00:03:47.838 --> 00:03:53.400
&gt;&gt; Bianca Gandolfo: It's about,
it's a stylistic choice based on scope,

72
00:03:53.400 --> 00:03:57.909
which we'll talk about
in the next segment.

73
00:03:57.909 --> 00:04:02.651
Yeah, it depends on,
&gt;&gt; Bianca Gandolfo: It's

74
00:04:02.651 --> 00:04:04.276
a stylistic choice, really.

75
00:04:04.276 --> 00:04:06.175
I like to save them into variable names.

76
00:04:06.175 --> 00:04:09.532
I'm a little more old school though, so

77
00:04:09.532 --> 00:04:13.896
the hipsters probably
think something different.

78
00:04:13.896 --> 00:04:15.447
Good question.

79
00:04:15.447 --> 00:04:18.812
Cool, so
we have log as a function name and

80
00:04:18.812 --> 00:04:24.791
there is actually one more function
name here, other than the other log.

81
00:04:24.791 --> 00:04:25.335
Return.

82
00:04:28.659 --> 00:04:30.680
&gt;&gt; Bianca Gandolfo: No,
that return is like is a statement.

83
00:04:30.680 --> 00:04:31.377
&gt;&gt; Ryan: Okay.

84
00:04:31.377 --> 00:04:31.982
&gt;&gt; Bianca Gandolfo: Yeah.

85
00:04:33.733 --> 00:04:35.873
&gt;&gt; Dan: Dollar sign.

86
00:04:35.873 --> 00:04:37.530
&gt;&gt; Bianca Gandolfo: Dollar sign, yeah.

87
00:04:37.530 --> 00:04:41.072
So jQuery dollar sign is function.

88
00:04:41.072 --> 00:04:46.062
And how do we know these are functions or
one clue, this isn't necessarily how

89
00:04:46.062 --> 00:04:51.138
we know, one clue is that it's followed
by two parenthesis like this, right?

90
00:04:51.138 --> 00:04:53.404
So hide, you know.

91
00:04:53.404 --> 00:04:54.732
&gt;&gt; Ryan: They take arguments.

92
00:04:54.732 --> 00:04:57.974
&gt;&gt; Bianca Gandolfo: They can take
arguments, yeah, absolutely.

93
00:04:57.974 --> 00:05:00.007
Great.

94
00:05:00.007 --> 00:05:02.248
All right, so where's the function body,
where did we leave off?

95
00:05:02.248 --> 00:05:03.455
I think Jamie, it was you?

96
00:05:03.455 --> 00:05:06.576
&gt;&gt; Jamie: Mm-hm, the return statement.

97
00:05:06.576 --> 00:05:07.486
&gt;&gt; Bianca Gandolfo: Yeah exactly.

98
00:05:07.486 --> 00:05:11.314
So we have like in between these two
brackets really is the function body.

99
00:05:11.314 --> 00:05:13.264
Michael, do you see any
other function bodies here?

100
00:05:13.264 --> 00:05:14.815
&gt;&gt; Michael: Yeah, the two console logs.

101
00:05:14.815 --> 00:05:19.987
&gt;&gt; Bianca Gandolfo: Yeah,
this one here and then also this one here.

102
00:05:19.987 --> 00:05:21.449
That's our function body.

103
00:05:21.449 --> 00:05:26.215
What's the important thing that we
need to know about function bodies?

104
00:05:26.215 --> 00:05:30.003
That I mentioned earlier,
do remember, Ben?

105
00:05:30.003 --> 00:05:31.850
Do you remember, Dan?

106
00:05:31.850 --> 00:05:33.974
&gt;&gt; Dan: They don't get run
until the function is invoked?

107
00:05:33.974 --> 00:05:35.254
&gt;&gt; Bianca Gandolfo: Yeah absolutely,

108
00:05:35.254 --> 00:05:38.698
they don't get run until
the function is invoked.

109
00:05:38.698 --> 00:05:41.402
Where is some invocations, Ryan?

110
00:05:47.530 --> 00:05:51.342
&gt;&gt; Ryan: Log is an invocation.

111
00:05:51.342 --> 00:05:56.718
Both, well, not in the function bodies,
well it depends on what you mean,

112
00:05:56.718 --> 00:06:02.778
because like was just said, the function
bodies don't get invoked until it's run.

113
00:06:02.778 --> 00:06:07.171
But that would be an invocation.

114
00:06:07.171 --> 00:06:08.293
&gt;&gt; Bianca Gandolfo: I
see what you're saying.

115
00:06:08.293 --> 00:06:11.206
&gt;&gt; Ryan: Yeah, so that would be
an invocation when it gets invoked,

116
00:06:11.206 --> 00:06:12.678
when the function is called.

117
00:06:12.678 --> 00:06:13.296
&gt;&gt; Bianca Gandolfo: Absolutely.

118
00:06:13.296 --> 00:06:13.938
&gt;&gt; Ryan: Yeah.

119
00:06:13.938 --> 00:06:17.089
&gt;&gt; Bianca Gandolfo: Yeah, so we're just
talking about just a static analysis here,

120
00:06:17.089 --> 00:06:19.052
we're not actually running this code.

121
00:06:19.052 --> 00:06:20.956
&gt;&gt; Ryan: Right.

122
00:06:20.956 --> 00:06:24.866
&gt;&gt; Bianca Gandolfo: So yeah, so
right here, log, that's call-time for

123
00:06:24.866 --> 00:06:27.502
our console.log, as well as here.

124
00:06:27.502 --> 00:06:29.305
Jenna, do you see any other ones?

125
00:06:29.305 --> 00:06:31.253
&gt;&gt; Jenna: The hide be?

126
00:06:31.253 --> 00:06:32.412
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; [INAUDIBLE]

127
00:06:32.412 --> 00:06:33.403
&gt;&gt; Bianca Gandolfo: Mm-hm, exactly.

128
00:06:33.403 --> 00:06:36.074
We have our two parenthesis
next to each other.

129
00:06:36.074 --> 00:06:38.185
That means that we're calling a function.

130
00:06:38.185 --> 00:06:42.259
Do you see one, Josh?

131
00:06:42.259 --> 00:06:44.734
&gt;&gt; Josh: forEach.

132
00:06:44.734 --> 00:06:47.503
&gt;&gt; Bianca Gandolfo: Yep.
&gt;&gt; Josh: Query.

133
00:06:47.503 --> 00:06:51.365
&gt;&gt; Bianca Gandolfo: Right there.

134
00:06:51.365 --> 00:06:53.487
Do you see one Altemir.

135
00:06:53.487 --> 00:06:55.856
Am I pronouncing your name correctly,
Altemir?

136
00:06:55.856 --> 00:06:57.806
Okay.

137
00:06:57.806 --> 00:06:58.770
Just making sure.

138
00:06:58.770 --> 00:07:03.000
&gt;&gt; Altemir: Have you considered the .on?

139
00:07:03.000 --> 00:07:05.778
&gt;&gt; Bianca Gandolfo: Yeah, only because
there's these two parantheses after

140
00:07:05.778 --> 00:07:06.351
it though.

141
00:07:06.351 --> 00:07:10.056
&gt;&gt; Altemir: Yeah.

142
00:07:10.056 --> 00:07:11.679
&gt;&gt; Bianca Gandolfo: I show DC1.

143
00:07:11.679 --> 00:07:12.792
&gt;&gt; Jamie: The dollar signs?

144
00:07:12.792 --> 00:07:16.647
&gt;&gt; Bianca Gandolfo: Yup,
dollar signs with the parenthasis.

145
00:07:16.647 --> 00:07:21.169
Implecation, cool.

146
00:07:21.169 --> 00:07:25.453
All right,
&gt;&gt; Bianca Gandolfo: Arguments.

147
00:07:27.142 --> 00:07:30.288
&gt;&gt; Bianca Gandolfo: What's the difference
between arguments and parameters again?

148
00:07:30.288 --> 00:07:32.808
Michael, do you remember?

149
00:07:32.808 --> 00:07:35.260
&gt;&gt; Michael: Arguments
are passed to the function,

150
00:07:35.260 --> 00:07:37.868
parameters are used within the fuction.

151
00:07:37.868 --> 00:07:40.711
&gt;&gt; Bianca Gandolfo: Yes, the parameters
are like the variable names and

152
00:07:40.711 --> 00:07:43.366
the arguments have a value,
contain the value.

153
00:07:43.366 --> 00:07:45.652
Awesome.

154
00:07:45.652 --> 00:07:52.830
Jamie, can you point out some parameters?

155
00:07:52.830 --> 00:07:53.678
&gt;&gt; Jamie: Name and adjective.

156
00:07:53.678 --> 00:07:55.541
&gt;&gt; Bianca Gandolfo: Yes.

157
00:07:55.541 --> 00:07:58.223
Right here, these are our parameters.

158
00:07:58.223 --> 00:08:04.088
We know that because it's in the function
definition part, not the invocation part.

159
00:08:04.088 --> 00:08:08.088
I know this might seem
like I’m going slow, but

160
00:08:08.088 --> 00:08:12.289
just really try to nail
down how I identify where,

161
00:08:12.289 --> 00:08:16.006
which is what and
how it all works together.

162
00:08:16.006 --> 00:08:18.527
Abdi, do you see any parameters?

163
00:08:24.393 --> 00:08:25.601
&gt;&gt; Altemir: After the bling side body.

164
00:08:29.262 --> 00:08:34.761
&gt;&gt; Bianca Gandolfo: That's an argument
cuz that's an actual value.

165
00:08:34.761 --> 00:08:36.724
Chris, do you see one?

166
00:08:36.724 --> 00:08:40.565
&gt;&gt; Chris: The val-in, function val.

167
00:08:40.565 --> 00:08:41.637
&gt;&gt; Bianca Gandolfo: Yeah, exactly.

168
00:08:45.405 --> 00:08:47.612
&gt;&gt; Bianca Gandolfo: Great, all right.
Now let's move on to arguments.

169
00:08:47.612 --> 00:08:48.944
Eddie, do you see any arguments?

170
00:08:48.944 --> 00:08:51.132
So we already said body was an argument.

171
00:08:57.494 --> 00:08:58.836
&gt;&gt; Eddie: So button below that?

172
00:08:58.836 --> 00:09:02.959
&gt;&gt; Bianca Gandolfo: Yep.

173
00:09:02.959 --> 00:09:04.089
Taking the, what is it?

174
00:09:04.089 --> 00:09:05.920
&gt;&gt; Eddie: The easy way?

175
00:09:05.920 --> 00:09:07.809
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; Eddie: [LAUGH]

176
00:09:07.809 --> 00:09:08.673
&gt;&gt; Bianca Gandolfo: The low-hanging fruit?

177
00:09:08.673 --> 00:09:09.401
&gt;&gt; Eddie: Yeah.

178
00:09:09.401 --> 00:09:13.048
&gt;&gt; Bianca Gandolfo: That's
the Silicon Valley term that everyone

179
00:09:13.048 --> 00:09:14.548
says all the time.

180
00:09:14.548 --> 00:09:15.586
Do you see one?

181
00:09:15.586 --> 00:09:17.160
&gt;&gt; Eddie: Unclick and function.

182
00:09:17.160 --> 00:09:18.833
&gt;&gt; Bianca Gandolfo: Yeah.

183
00:09:18.833 --> 00:09:25.018
So this is one, two arguments.

184
00:09:25.018 --> 00:09:31.277
And then, Aisha,
&gt;&gt; Bianca Gandolfo: There's one more.

185
00:09:42.853 --> 00:09:44.842
&gt;&gt; Aisha: Is the return doing something?

186
00:09:44.842 --> 00:09:46.120
&gt;&gt; Bianca Gandolfo: The return
is just a statement.

187
00:09:46.120 --> 00:09:46.632
&gt;&gt; Aisha: Okay.

188
00:09:46.632 --> 00:09:47.989
&gt;&gt; Bianca Gandolfo: Yeah.

189
00:09:47.989 --> 00:09:51.422
Altemir, do you see it?

190
00:09:51.422 --> 00:09:53.632
&gt;&gt; Altemir: Would it be
the function inside forEach?

191
00:09:53.632 --> 00:09:55.668
&gt;&gt; Bianca Gandolfo: Mm-hm, exactly.

192
00:09:59.845 --> 00:10:02.364
&gt;&gt; Bianca Gandolfo: Cool,
any questions about that?

193
00:10:02.364 --> 00:10:05.218
Anything surprising, unexpected?

194
00:10:05.218 --> 00:10:06.041
No, okay.

195
00:10:09.054 --> 00:10:10.533
&gt;&gt; Bianca Gandolfo: Okay, so return and

196
00:10:10.533 --> 00:10:15.899
side effects,
&gt;&gt; Bianca Gandolfo: Where'd we leave off?

197
00:10:15.899 --> 00:10:17.347
Josh.

198
00:10:17.347 --> 00:10:21.966
What do you want to look for,
return or a side effect?

199
00:10:21.966 --> 00:10:23.820
&gt;&gt; Josh: The return, I guess,
since there's one right at the top.

200
00:10:23.820 --> 00:10:26.518
&gt;&gt; Bianca Gandolfo: [LAUGH] Yeah.

201
00:10:26.518 --> 00:10:28.033
All right, point it out.

202
00:10:28.033 --> 00:10:29.119
&gt;&gt; Josh: The second line.

203
00:10:29.119 --> 00:10:30.688
&gt;&gt; Bianca Gandolfo: Yeah,
so we have this return.

204
00:10:30.688 --> 00:10:35.146
This function actually returns something,
which is great, we like that.

205
00:10:35.146 --> 00:10:37.525
Okay, Jeanine, do you see a return,

206
00:10:41.937 --> 00:10:45.199
&gt;&gt; Bianca Gandolfo: Or a side effect?

207
00:10:45.199 --> 00:10:47.260
&gt;&gt; Jenny: I didn't see you there and
I didn't understand how the console.log.

208
00:10:47.260 --> 00:10:50.510
[INAUDIBLE] mention that, but
I don't understand it, so.

209
00:10:50.510 --> 00:10:52.156
[LAUGH]
&gt;&gt; Bianca Gandolfo: Sure, yeah.

210
00:10:52.156 --> 00:10:56.862
So the reason the console.log
is a side effect is because, so

211
00:10:56.862 --> 00:11:00.031
a side effect is anything that doesn't,

212
00:11:00.031 --> 00:11:04.936
anything that reaches beyond
the curly brackets of a function.

213
00:11:04.936 --> 00:11:06.667
So you see this function?

214
00:11:06.667 --> 00:11:13.880
If it's reaching outside of that and
changing something, it's a side effect.

215
00:11:13.880 --> 00:11:19.520
And so, since this is going into
the console and logging something,

216
00:11:19.520 --> 00:11:26.347
that's a pretty blaring side effect or
glaring side effect, glaring or blaring?

217
00:11:26.347 --> 00:11:28.366
English, it's hard.

218
00:11:28.366 --> 00:11:31.566
If only we could just talk JavaScript
all the time, it'd be much easier.

219
00:11:31.566 --> 00:11:33.641
Cool.

220
00:11:33.641 --> 00:11:38.040
So the console.log is
gonna be a side effect.

221
00:11:38.040 --> 00:11:39.536
Brian, do you see anything?

222
00:11:39.536 --> 00:11:41.503
&gt;&gt; Brian: The jQuery.hide.

223
00:11:41.503 --> 00:11:45.105
&gt;&gt; Bianca Gandolfo: Yeah, it doesn't
show it in there, but yeah, .hide.

224
00:11:45.105 --> 00:11:47.624
Anything on the dom is
gonna be a side effect.

225
00:11:49.497 --> 00:11:50.090
&gt;&gt; Bianca Gandolfo: Cool.

226
00:11:51.250 --> 00:11:54.774
&gt;&gt; Bianca Gandolfo: And a big part of
functional programming is to minimize side

227
00:11:54.774 --> 00:11:56.400
effects as much as you can.

228
00:11:56.400 --> 00:12:00.600
Of course, with what we do,
we can't be a purist about it,

229
00:12:00.600 --> 00:12:04.801
because we have to manipulate the DOM and
things like that.

230
00:12:04.801 --> 00:12:10.877
It's probably core to most of
our jobs is playing with DOM.

231
00:12:10.877 --> 00:12:12.176
Okay, anything else?

232
00:12:15.529 --> 00:12:17.879
&gt;&gt; Bianca Gandolfo: I
think we got all that.

233
00:12:17.879 --> 00:12:20.372
Well, no I see one more.

234
00:12:20.372 --> 00:12:21.526
Eh, it's okay, we'll skip it.

235
00:12:21.526 --> 00:12:25.817
I was thinking, in here.

236
00:12:25.817 --> 00:12:30.042
Well, yeah, cuz this is gonna do some,
it's gonna select from the DOM, and

237
00:12:30.042 --> 00:12:31.658
return a node.

238
00:12:31.658 --> 00:12:38.743
&gt;&gt; Bianca Gandolfo: Well, hm,
I'm having debates with myself.

239
00:12:38.743 --> 00:12:39.243
It's fine.

