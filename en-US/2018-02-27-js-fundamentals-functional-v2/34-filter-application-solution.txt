[00:00:00]
>> Bianca Gandolfo: So we are going to filter data. Here's our data structure. It's an array of objects. Each of these objects have three properties, a name, a present property and an array of rooms. Is this the right one? Yes, yes it is okay and an array of rooms.
>> Bianca Gandolfo: Okay, everyone found the data okay it was able to copy and paste easily cool.

[00:00:36]
I'll just leave it open like that all right, so we are going to use our filter function? What's our list? VideoData and what is our callback gonna be?
>> Bianca Gandolfo: So this is a suspect Object.
>> Bianca Gandolfo: This is also the nice thing about using callbacks instead of loops, is that we can really name what these items are, and it makes it super clear.

[00:01:15]
Okay, so what do we need to do?
>> Speaker 2: Return suspect. Present.
>> Bianca Gandolfo: Mm-hm.
>> Speaker 2: SuspectObject.present in this case.
>> Bianca Gandolfo: Present.
>> Bianca Gandolfo: Cool, anyone else do it differently?
>> Bianca Gandolfo: Awesome
>> Bianca Gandolfo: Any questions?
>> Bianca Gandolfo: All right, we're gonna walk through how this all works together with our filter function
>> Bianca Gandolfo: Sound good?

[00:02:05]
It gets a little funky when we have,
>> Bianca Gandolfo: Functions passing to functions. So I like to go over how it's run. So we can also find bugs this way. So the first thing's first, where does this code start? So we're defining this here. Nothing is run yet, we're just defining it.

[00:02:25]
We're gonna talk about this a lot more in depth in our next slide, but I'm getting you primed here. We have our data, nothing really happens except for we're initializing this big data structure. And we are calling the filter function here. So the first argument is video data, so our array is the video data array.

[00:02:47]
And CB is this function here, okay? So for each item, so the very first item in our array is what? Here let me put this Here, so that we can. This is not how it should run in order, actually, let me do this, put our video data here.

[00:03:13]

>> Bianca Gandolfo: There we go, just so we can look at it at the same time.
>> Bianca Gandolfo: Do a little word wrap here, okay?
>> Bianca Gandolfo: Looks kind of ugly.
>> Bianca Gandolfo: Okay, this is what we're gonna do. So our array, so the first item in our array is this Miss Scarlet object.

[00:03:48]
So we're gonna call our callback with this object, so the item is that object. Which has a property present. Which is true, so, Miss Scarlett was present, at the mansion, at the time of the murder.
>> Bianca Gandolfo: And then, we have our storage object, which we will push that item.

[00:04:11]
So the storage item, the storage array, now has the item. If I said, type of what is this?
>> Bianca Gandolfo: Gonna print out.
>> Speaker 3: Boolean value true?
>> Bianca Gandolfo: Not quite, but good guess.
>> Bianca Gandolfo: So let's retrace this, so this function is getting called with each item in the array.

[00:04:47]
This is an array of objects. So the first item in the array is of type object, exactly. So we're gonna have an array of objects returned at the end.
>> Bianca Gandolfo: Make sense?
>> Bianca Gandolfo: Why are we using map her? Why don't we just do this?
>> Speaker 4: You know it will actually distort the data we want, just the true or false and whether it passes the test.

[00:05:18]

>> Bianca Gandolfo: That's true, but also map always return a function of same size. If we wanna like actually filtering get new data then we wanna get an array that showed only the things that passed through, we need to use each.
>> Speaker 5: So if we did use map, just based on what you just said, would that mean it would return an array of the same length, and all of the non-true ones would just have the word false or something most likely, or

[00:05:59]

>> Bianca Gandolfo: So, you would need to make sure that, in this function, instead of pushing, you would need to. So, if we rewrote this with MAP, we would need to. So, we would say, if that's true, we're gonna return the item, but if it falls this stills gonna return on your finds, so you're have an array, of a bunch of undefined values where it doesn't need that criteria.

[00:06:37]

>> Speaker 5: Okay.
>> Bianca Gandolfo: If that makes sense, so the array would be the same link, they would have some values and then the rest of them. Will just be these undefined values and that's not going to work. That's not the best solution. First of all, it's taking up more space.

[00:06:52]
Second, then we have to deal with those undefined values. Okay, great.
>> Speaker 6: I have a question.
>> Bianca Gandolfo: Mm-hm.
>> Speaker 6: When you call the call back, there are three parameters. But only one is used in the actual call back in this case.
>> Bianca Gandolfo: In this case.
>> Speaker 6: Yes.
>> Bianca Gandolfo: Mm-hm.

[00:07:24]

>> Speaker 6: So the other ones are just, it's overloaded in that case, or in what case would you use those other parameters?
>> Bianca Gandolfo: It depends on the call back that you are using
>> Speaker 6: So if you needed to go deeper into a list?
>> Bianca Gandolfo: Or if you just needed to be aware of at what index the item was in the list?

[00:07:44]
So you're passing the index, and also if you ever need to reference the original data structure for any reason. It just keeps it flexible. And for the most part it's not a huge cost to do that especially if you're passing objects. Again we're just passing references to it we're not passing the whole object around, so, great.

[00:08:11]
So I think we should take a five minute break and I have a prompt for you guys to ask each other during your break since Minnesotans are shy I feel like I need to give you guys prompts.
>> Bianca Gandolfo: Your guys' words not mine. The prompt is, what's the most important thing to know about JavaScript, in your opinion.

[00:08:41]
You don't have to be an expert, it's not an expert opinion. Just what seems really important kind of opinion, loosely held. Ready, set, go, I want to take a break.
>> Speaker 6: Wait before we get to that, just a question in online chatroom about your code. The if block, having it all on one line without curly braces, people were just wondering about that.

[00:09:09]

>> Bianca Gandolfo: Sure, what is the question? Can you emit if it's a single expression.
>> Speaker 6: No is she missing a curly braces in the if statement or is that
>> Speaker 6: Okay, that meant if it's on the same line. They're just wondering that.
>> Bianca Gandolfo: Yeah, so as I mentioned, it's okay.

[00:09:29]
We don't need to put curly brackets, because it's on the same line. But, of course, you can always put them if it makes you feel comfortable and that's what I tend to do. I tend to just put curly brackets everywhere, cuz it just makes me feel like a nice secure blanket of curly brackets and it doesn't do anything confusing or weird especially when we get into like arrow functions and stuff like that I just feel-

[00:09:54]

>> Speaker 6: Cuz if you it's really not about one line, if you have two statements on one line after the if, Statement it would only run the first one right?
>> Bianca Gandolfo: Yeah.
>> Speaker 6: It's not about lines, it's about statements. Then it's fine, but anyway it can get you into trouble when it's unclear.

[00:10:22]

>> Bianca Gandolfo: Yeah.
>> Speaker 6: Where the semi colon would be inserted?
>> Bianca Gandolfo: Mm-hm, yeah, I recommend to not do this but I was just showing it as an example. You'll notice when I write it the first time, I write a longer form way and that tends to be the way I actually code is more long form.

