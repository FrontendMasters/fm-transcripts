WEBVTT

1
00:00:00.190 --> 00:00:02.866
So we're gonna start
off with a quick recap,

2
00:00:02.866 --> 00:00:06.080
on where we are in our investigation so
far.

3
00:00:06.080 --> 00:00:09.187
Really, we've just gotten started, but

4
00:00:09.187 --> 00:00:14.230
we've learned that things
aren't always as they seem.

5
00:00:14.230 --> 00:00:18.660
War is an example of things being
a little bit different than we expected.

6
00:00:20.420 --> 00:00:21.690
&gt;&gt; Arrays and objects.

7
00:00:21.690 --> 00:00:23.160
&gt;&gt; Yeah, arrays and objects.

8
00:00:23.160 --> 00:00:23.990
That was a big one.

9
00:00:25.390 --> 00:00:26.700
Anything else that comes to mind?

10
00:00:30.914 --> 00:00:35.420
No, that was the best,
that's the one I was asking for, cool.

11
00:00:35.420 --> 00:00:38.372
So, our detective team,
we're here working together.

12
00:00:38.372 --> 00:00:41.690
We have a lot of skills in working with,
and manipulating data.

13
00:00:41.690 --> 00:00:44.338
And we're just getting better and
better by the minute, really.

14
00:00:44.338 --> 00:00:49.546
And our team of elves who
are secretly helping us out,

15
00:00:49.546 --> 00:00:53.150
were really hard at work last night.

16
00:00:54.490 --> 00:00:59.119
In just in,
we have some data that they scraped

17
00:00:59.119 --> 00:01:03.985
from some video footage
at the mansion where Mr.

18
00:01:03.985 --> 00:01:07.909
Body is thought to have been murdered.

19
00:01:07.909 --> 00:01:12.958
And we have this object of data, luckily
our our data scrapers are also JavaScript

20
00:01:12.958 --> 00:01:17.510
programmers, we only associate with
people who program in JavaScript.

21
00:01:17.510 --> 00:01:19.680
So, we choose our team wisely.

22
00:01:20.750 --> 00:01:22.390
So, we have this data to get us started.

23
00:01:22.390 --> 00:01:27.374
And now let's just kick off with
a quick exercise where we're gonna

24
00:01:27.374 --> 00:01:32.185
filter through this data, and
we wanna figure out who was present

25
00:01:32.185 --> 00:01:36.840
in this video footage at the mansion,
the night of the murder.

26
00:01:38.400 --> 00:01:39.240
So, what is filter?

27
00:01:39.240 --> 00:01:41.630
Has anyone used filter before?

28
00:01:41.630 --> 00:01:43.830
And underscore or low dash?

29
00:01:43.830 --> 00:01:44.993
Couple people.

30
00:01:44.993 --> 00:01:49.328
So, filter is a function that
takes an array and a callback, and

31
00:01:49.328 --> 00:01:52.230
it's going to return a new array, right?

32
00:01:52.230 --> 00:01:57.910
This is similar to map is gonna
return a new array that will contain,

33
00:01:57.910 --> 00:02:02.397
this is the important part
of filters that it will only

34
00:02:02.397 --> 00:02:07.610
contain the values that return
true from the callback.

35
00:02:07.610 --> 00:02:11.380
So, the callback has to return
a Boolean either true or false.

36
00:02:11.380 --> 00:02:14.127
If that callback returns true,

37
00:02:14.127 --> 00:02:19.223
then we're gonna save it to the array,
If not, we won't.

38
00:02:19.223 --> 00:02:23.367
So with map, when we loop through
all of the items in our list,

39
00:02:23.367 --> 00:02:27.220
we returned an array that was
at the same length, right?

40
00:02:27.220 --> 00:02:30.978
Every time, with filter that's
not always true, filter can

41
00:02:30.978 --> 00:02:35.831
be shorter than the original array,
really depends on our callback function.

42
00:02:35.831 --> 00:02:41.014
And if it's returning true or
false, we also call like

43
00:02:41.014 --> 00:02:47.562
this pretty good kind of callback
function like a truth test, yeah.

