[00:00:00]
>> Bianca Gandolfo: So our next one says, an inner function can access both its local scope variables and variables in its containing scope, providing the variables have different names. Okay, where did we leave off? Who's the next willing volunteer who signed up?
>> Speaker 2: I don't remember. We're close to me.

[00:00:21]

>> Bianca Gandolfo: Yeah.
>> Speaker 2: I think maybe it was me.
>> Bianca Gandolfo: Okay.
>> Speaker 2: Okay, so we're setting outerName variable to outer.
>> Bianca Gandolfo: Yep, and then what happens next, Michael?
>> Michael: We create a variable fn and set it equal to a function.
>> Bianca Gandolfo: Yep, and then Aisha.
>> Aisha: The function is invoked.

[00:00:48]

>> Bianca Gandolfo: We invoke the function, we hop back up into the body of the function. What happens next?
>> Speaker 5: We end at the body and we say that innerName is equal to inner.
>> Bianca Gandolfo: Yep, so we set innerName to the string inner. And then Josh, what happens next?
>> Josh: You set ACTUAL to innerName + outerName.

[00:01:16]
innerName is inside this function, so we can set that. And outerName is in parent scope, so we can send that as well.
>> Bianca Gandolfo: Yep, we have access to both of those, so no errors. Dunie, what do you think it will say?
>> Jenny: It should say both of them, inner and outer.

[00:01:33]

>> Bianca Gandolfo: Like that?
>> Jenny: Yeah.
>> Bianca Gandolfo: Inner router, [INAUDIBLE] [LAUGH] cool.
>> Bianca Gandolfo: All right, any questions about that?
>> Bianca Gandolfo: Seems reasonable, cool. So the next one is between calls to an inner function, that inner function retains access to a variable in outer scope. Modifying those variables has a lasting effect between calls to the inner function.

[00:02:00]
So this is similar to what we were doing before, except when we were initializing the function twice, and the numbers were resetting and the initial values were being erased. This is similar to that, this is the solution to that problem.
>> Bianca Gandolfo: Ryan.
>> Ryan: So [COUGH] outerCounter is declared and assigned 10.

[00:02:29]

>> Bianca Gandolfo: Yeah, so we just initialize this value at 10, great, and then Dan?
>> Dan: Clearing function variable, assigning it to the value of that function. [COUGH]
>> Bianca Gandolfo: Yep, and then we'd call the function, get to this function body.
>> Dan: Sure, within the function body, we take outerCounter and increment its value.

[00:02:54]
So outerCounter becomes 11, and then we assign ACTUAL the value of outerCounter, so ACTUAL becomes 11 as well.
>> Bianca Gandolfo: All right, awesome, so just a recap, call the function. We have access to outerCounter cuz it's in our parent scope. The value is 10, we're adding it to 1, and then we were reassigning it to outerCounter.

[00:03:19]
Again, that lives in the parent scope. We're setting ACTUAL to outerCounter. And so we think ACTUAL will equal 11. Next thing that happens is this function gets invoked again. So we hop into this body of the function, just like we mentioned before, everything in here gets reinitialized for the very first time.

[00:03:38]
However, we still retain access to our outer scope. This is the same scope. Okay, cuz this function was called once, so we have one parent function scope. We call this function the first time. So we created that scope, it ran through, and then it gets thrown away. Once it's done, it gets thrown away.

[00:03:59]
And then we call it again, and we created another scope. Okay, so in this process, we've gone though three scopes, if we don't count what's going on here. So we have this parent scope that was created, when we run the test. And then two scopes from those two function calls here, okay?

[00:04:23]
Everyone following that, okay? So, who was next actually?
>> Bianca Gandolfo: Kevin? You always get to be on the tricky one.
>> Kevin: The incremented outerCounter was preserved cuz it was outside, so it's 11 + 1, setting it to 12. So ACTUAL equals 12.
>> Bianca Gandolfo: Yep, so because we incremented outerCounter in the parent scope in the previous call, it's 11, we increment by 1.

[00:05:00]
ACTUAL is now 12.
>> Bianca Gandolfo: Cool, any questions? Yeah.
>> Speaker 11: So what if on line 153, it had the word var before outerCounter? Cuz my understanding is if you like using var, then it's kind of reinitializing it, and that would overwrite the outer scope one. But that probably still wouldn't change it here, right?

[00:05:35]
Because it would still be adding, it would be setting 12 to that new outerCounter and then that would be set to ACTUAL, does that make sense?
>> Bianca Gandolfo: So the question is, when we put var here, does that change what happens?
>> Speaker 11: Right.
>> Bianca Gandolfo: Hm, let's try it.
>> Bianca Gandolfo: Which one was that one?

[00:05:53]
Between calls, this one.
>> Bianca Gandolfo: World's tiniest font, okay.
>> Bianca Gandolfo: Yep, it's failing. Did I save?
>> Speaker 11: So that did break something.
>> Bianca Gandolfo: Yeah, so it did change it. Let's erase it, make sure-
>> Speaker 11: Do you know why it changed it?
>> Bianca Gandolfo: My guess is that it's because the variable is initializing a local variable.

[00:06:26]
It's initializing another variable in that scope, instead of referencing the parent variable. Actually, I'm pretty confident about that, after I said it, yeah.
>> Bianca Gandolfo: Cool, good question.
>> Ryan: So JavaScript doesn't throw errors or anything when you try to reinitialize a variable that's already been initialized?
>> Bianca Gandolfo: It does with let.

[00:06:49]
You can use let in const obviously.
>> Ryan: So let would throw an error there.
>> Bianca Gandolfo: I think so, let's try, yeah.
>> Bianca Gandolfo: Oops.
>> Dan: What was the error it threw when you called it var, before?
>> Bianca Gandolfo: It says, outerCounter is not defined.
>> Dan: When you called it var, though?

[00:07:13]

>> Bianca Gandolfo: When I called it var, it just, so it will pass,
>> Bianca Gandolfo: If you do this. Wait, var, so outerCounter = outerCounter. I wonder what it is. Should it pass the first but not the second?
>> Dan: So it goes through and then referred to itself maybe?
>> Bianca Gandolfo: Let's put a little debugger here and check it out.

[00:07:46]

>> Bianca Gandolfo: Okay, so because this is undefined and you're adding, so if you add 1 + undefined,
>> Bianca Gandolfo: It gives us not a number.
>> Dan: Yeah.
>> Bianca Gandolfo: Cool, beautiful.
>> Bianca Gandolfo: All right, the next one is the rule about retaining access to variables from an OuterScope still applies, even after the OuterScope the outerFn call, that created the OuterScope has returned.

[00:08:30]
I'm gonna read that one more time. The rule about retaining access to variables from the OuterScope still applies, even after the outerFn call that created the OuterScope has returned, okay?
>> Bianca Gandolfo: I'm just like, what? [LAUGH] Well, let's see it in action. Where did we leave off? Was it Chris?

[00:08:55]

>> Chris: Sure. The first thing that will happen is defining outerFn which declares the function.
>> Bianca Gandolfo: Yeah, so the very first thing is we create this huge function. And then what's the next thing that happens?
>> Speaker 13: That we declare variable outerFn.
>> Bianca Gandolfo: Where, in what line?
>> Speaker 13: 164?

[00:09:22]

>> Bianca Gandolfo: We just did that.
>> Speaker 13: Okay.
>> Bianca Gandolfo: Yeah.
>> Speaker 13: Hold on, and then we set a counter in OuterScope.
>> Bianca Gandolfo: Well, this function actually hasn't been called yet.
>> Speaker 13: Yeah.
>> Bianca Gandolfo: Do you see it being called anywhere?
>> Speaker 13: No.
>> Bianca Gandolfo: Yeah, but I like your enthusiasm to go above and beyond.

[00:09:46]
The rules of JavaScript. [LAUGH]
>> Speaker 13: Well, so then it just runs interincrementing?
>> Bianca Gandolfo: No, so this whole function here.
>> Bianca Gandolfo: It's a big one.
>> Speaker 13: I didn't see.
>> Bianca Gandolfo: Yeah, you see? I try to have this rainbow thing, it's really Mardi Gras colors, so you can see if they match.

[00:10:11]
So this is green, so all of the yellow ones are inside the green.
>> Ryan: I think it's really washed out on there.
>> Bianca Gandolfo: Yeah. Well, I tried.
>> Josh: I can see it now, though. Yes, actually.
>> Bianca Gandolfo: Yeah. It's a nice like plugin for the S-code, rainbow indent. Okay, so this is a big function, so I'll view what happens next then.

[00:10:38]

>> Josh: We run expect.
>> Bianca Gandolfo: We run this expect, we expect window. That retained inner function to equal undefined. What do we think? So this is referencing this, I guess. What do we think about that? It seems reasonable?
>> Josh: it should be undefined?
>> Bianca Gandolfo: It should be undefined, right?

[00:11:04]
Because we haven't run the body of this function. Nothing here has done any work. And so, you can't have a reward such as a value assigned when there hasn't been any work done.
>> Bianca Gandolfo: It seems fair. Okay, so then we're gonna run the outerFn. Where did we leave off?

[00:11:22]
Jamie, was it you? So we're gonna run the outerFn. So we're gonna come back up here. Yep, so then we're setting variable, counterInOuterScope equal to 10.
>> Bianca Gandolfo: And Mike, what happened next?
>> Mike: Sure, and we set a new variable, innerIncrementingFn, declaring that function, and then right after invoking it.

[00:11:49]

>> Bianca Gandolfo: Awesome, Aisha?
>> Aisha: We go to the declaration and,
>> Bianca Gandolfo: Run the function, right?
>> Aisha: Run the function.
>> Bianca Gandolfo: Yep, say run the function, altemiroet. It's gonna happen in this function. This is really similar to the last.
>> Dan: Inside of the body? So then, we're doing counterInOuterScope equals counterInOuterScope plus one.

[00:12:24]

>> Bianca Gandolfo: So that equals 11, actual is 11.
>> Dan: Then we're setting actual to 11.
>> Bianca Gandolfo: Yeah.
>> Bianca Gandolfo: Set this one to 11. Who remembers what happens next? This is the same example. What is this actual gonna equal?
>> Speaker 2: 12.
>> Bianca Gandolfo: 12, okay. Then, we do something a little funky.

[00:12:48]
Josh, do you know what we're doing here?
>> Josh: You're setting a property on the window. Your incrementing function.
>> Bianca Gandolfo: Yeah, so we're creating a global variable, a global property on the window object. And assigning to innerIncrementingFn, which is this function here.
>> Bianca Gandolfo: Cool, so then we exit and we find ourselves here, where we say expect window.retained inner function to be a function.

[00:13:29]

>> Michael: Line 178, innerIncrementingFn, doesn't it have to have the break parentheses right after that or?
>> Bianca Gandolfo: Not necessarily, that's if you're gonna invoke the function. In this case, we're passing a function. Well, in this case we're assigning the function to basically it's like saying this. It's like saying, you're creating a variable and then you're assigning it like this.

[00:14:00]

>> Bianca Gandolfo: That's essentially what it is doing. See that?
>> Bianca Gandolfo: Okay.
>> Ryan: So if we were to put on the parenthesis that would be running it. And the window that retained inner function would take the results of that function?
>> Bianca Gandolfo: Yeah, so if we ran it. It would be whatever this returns.

[00:14:23]

>> Ryan: Which is nothing.
>> Bianca Gandolfo: And since, it doesn't return anything it would just be equal to undefined. And that's not helping us. So we really just wanna return that function, because we wanna have access to it globally. Okay, so saw that. We expect it to be a function.

[00:14:42]
Yes, I believe that. Now we're calling it, like you were kind of talking about before. But we're calling it out here in the parentscope and we have access to it, because it's on the window object which is global in the browser land. Which is where I reside in browser land.

[00:15:07]

>> Ryan: The chat is asking about the dots in the indents, is that a plugin or something you can do in VS code?
>> Bianca Gandolfo: Yeah, I think it's just a setting where it shows. The dots mean it's a space, and then if it has like a little arrow, it shows that it's a tab.

[00:15:27]
But I kind of download just every plugin for VS code, and so I have a bunch of them, I don't know which one is which. And I don't recommend doing that, cuz my VS code has been freezing lately and I'm not sure which plugin is killing it. But I like the rainbow one.

[00:15:45]
The rainbow one might even be including the dots.
>> Bianca Gandolfo: Awesome. Okay, all right. So where did we leave off? Was it you Ryan or Jenny? Jenny, okay. So now we're calling retain inner function, what happens next?
>> Bianca Gandolfo: What happens after you call a function, every time?
>> Jenny: Well, it's going to have to go through the body of it.

[00:16:17]

>> Bianca Gandolfo: Yeah so we have to find the body of that fucntion, which is here, right? Because we assigned it, but really it's here.
>> Bianca Gandolfo: Okay, so what happens?
>> Jenny: I don't know if it retained the 12, or if it's still set at 10.
>> Bianca Gandolfo: Yeah.
>> Jenny: I think it's set at ten, because it went back through our function [INAUDIBLE] again.

[00:16:54]

>> Bianca Gandolfo: I could see where you're going with that, but actually what happens is that would only reset if we called outerFn again, and created a whole new scope for the parent scope. But we're actually only calling this body of the function so it's only recreating this scope, or it's like initializing a new execution context here.

[00:17:16]
But it keeps the same one above it. The only way we can reset is by calling this and then it would reset this too. That makes sense? So with that, what do you think counterInOuterScope is?
>> Jenny: My goodness, it's still either, [LAUGH] Is it 13?
>> Bianca Gandolfo: Is 12, yeah it's 1,2 then it will be 13 when you add 1.

[00:17:47]

>> Jenny: Yeah, okay. So actual now equals 13 and the interesting this is, it, well the thing to keep in mind is, okay we're running this function in here.
>> Bianca Gandolfo: Where does it exit to? Ryan?
>> Ryan: It should exit into the inner body of outerFn, no?
>> Bianca Gandolfo: It doesn't do that.

[00:18:17]

>> Ryan: Then it would exit back to where it was called from.
>> Bianca Gandolfo: Yeah, exactly. So some people assume, since we're executing here, the next thing is that it would go run this again but that's not the case. Actually so it's gonna run this and then it's gonna hop back here where we called it an run the next line, and what do we think actual is?

[00:18:49]

>> Bianca Gandolfo: Cool, any questions about this one?
>> Dan: But I thought since we won't returning anything inside the retainedInnerFn.
>> Bianca Gandolfo: Mm-hm.
>> Dan: Like after during the actual equals counterInOuterScope. We weren't returning, thought you had mentioned something about that earlier.
>> Bianca Gandolfo: Yeah.
>> Dan: We wasn't returning anything.

[00:19:10]

>> Bianca Gandolfo: It's not returning anything, so when you call it here, this window, so when you execute the function, it would return here. If we were saying our result equals that, then that's why we care about the return value, but what happened in the body of the function is that we assigned actual again to an updated value.

[00:19:32]
And we're referencing actually, yeah. Yeah, but that's a good question. Anyone else? This one's a little bit of a mind bender. Do people feel like their mind's being bent a little bit or they're like I'm used to JavaScript by now and this is not news.
>> Dan: It's interesting that the function still has context for the outer scope when you call it outside of that.

[00:20:04]

>> Bianca Gandolfo: Yeah, it's like this little magic tunnel into like another function. So you have a question?
>> Dan: You were gonna cover a let for the chat.
>> Bianca Gandolfo: Yes so the appropriate time to use let is when you want to scope your variable inside of a block that's not a function.

[00:20:28]
However, a lot of people just use let and cons all the time, because it's ES6, and they believe that's the right thing to do. I think as long as you know how your code runs, it's fine. Var does do some funny things with hoisting. Which means that when you declare a variable somewhere, it gets hoisted to the top of its local scope as undefined.

[00:21:03]
So for example, and this is why people don't like var. So people who are like so if I, for example, console.logged this, it would be undefined. It wouldn't throw an error. Typically if you're referencing a variable like if this wasn't here, it would throw an error. So we call this hoisting and it's something like that happens when you're code is being like compile and optimized in the back.

[00:21:42]
It will hoist all of your variables to the top, it'll all be set to undefined and that's why it's recommended that if you're declaring variables in the body of a function, just put all of them at the top. Because that's what it's gonna do anyway, and it minimizes anything happening that you wouldn't expect with a let key word that is supposed to fix that.

[00:22:10]
But I pretty much still use var at work, for the most part. I'm trying to get past it and move on to being more, embrace the ES6 stuff more. But like I was saying before, pretty much at this point I write all my stuff in ES5 and then I rewrite it in ES6.

[00:22:31]
Just because i'm used to writing ES5 and I'm forcing myself to do ES6 but it is really important to know and it's the new JavaScript and I have to just get used to it. You know what I mean? That's where I'm at at least. Cool, so we are at 244.

[00:23:00]

>> Bianca Gandolfo: Let's take a breather and just take a look at all the rules that we just went through for scope. Can you guys read all this? Is it big enough? Okay, so let's take a five minute break and discuss with your little group, we're like in groups twos, threes.

[00:23:26]
What rule was most interesting or surprising to you in this exercise?
>> Bianca Gandolfo: Or what will you take away?

