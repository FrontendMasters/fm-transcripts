WEBVTT

1
00:00:00.200 --> 00:00:04.160
&gt;&gt; Bianca Gandolfo: Remember, we had
to do that Array.prototype.slice.call?

2
00:00:04.160 --> 00:00:08.246
Now, in ES6, we have this
handy thing called Array.from,

3
00:00:08.246 --> 00:00:10.929
which does exactly what we need it to do.

4
00:00:10.929 --> 00:00:16.030
It's gonna turn that arguments,
pseudo-array into an actual array.

5
00:00:16.030 --> 00:00:20.184
And the reason, again, that we are doing
that is cuz we wanna have access to this

6
00:00:20.184 --> 00:00:21.988
push method and this join method.

7
00:00:25.739 --> 00:00:29.140
&gt;&gt; Bianca Gandolfo: How do
we feel about Array.from?

8
00:00:29.140 --> 00:00:30.380
Are we happy about it?

9
00:00:30.380 --> 00:00:33.470
It's a lot less words to memorize.

10
00:00:33.470 --> 00:00:36.220
And also, I think whenever
people see the word prototype,

11
00:00:36.220 --> 00:00:38.540
it just freaks everyone out.

12
00:00:38.540 --> 00:00:41.757
So I try to avoid saying prototype
as much as I can in my courses,

13
00:00:41.757 --> 00:00:45.490
even if I'm talking about prototype,
just because it's a scary word.

14
00:00:49.241 --> 00:00:51.076
&gt;&gt; Speaker 2: So
from does the exact same thing?

15
00:00:51.076 --> 00:00:52.295
&gt;&gt; Bianca Gandolfo: Mm-hm.

16
00:00:54.477 --> 00:00:56.470
&gt;&gt; Bianca Gandolfo: And then,
it does more, it has a lot of features.

17
00:00:56.470 --> 00:01:00.810
It takes Iterables, and

18
00:01:00.810 --> 00:01:04.740
it makes it,
it gives them access to array methods.

19
00:01:04.740 --> 00:01:08.160
But we don't need go into all that, we're
just going to worry about the arguments.

20
00:01:10.040 --> 00:01:14.552
And then, from now until lunch,
and over lunch,

21
00:01:14.552 --> 00:01:18.001
we're gonna implement our own from.

22
00:01:18.001 --> 00:01:24.360
So before from existed as part of the ES6
spec, we had to use methods like from(),

23
00:01:24.360 --> 00:01:29.917
that essentially did
the Array.prototype.call, that slice.call,

24
00:01:29.917 --> 00:01:36.260
under the hood for us, without us having
to think about it every time, right?

25
00:01:36.260 --> 00:01:40.930
That's the magic of using these utility
methods is that, the things that we need

26
00:01:40.930 --> 00:01:46.356
to keep in our head, it minimizes them and
also stops you from wasting time saying,

27
00:01:46.356 --> 00:01:51.820
prototype.call.slice, instead of
slice.call or whatever, small mistakes

28
00:01:51.820 --> 00:01:55.700
you may make, when you have to type those
things over and over and over again.

29
00:01:55.700 --> 00:02:00.241
&gt;&gt; Speaker 3: So this is from the,
this is _.is from() ES6 and not, no,

30
00:02:00.241 --> 00:02:02.250
it's from the _library?

31
00:02:02.250 --> 00:02:03.640
&gt;&gt; Bianca Gandolfo: Yeah,
underscore, low dash,

32
00:02:03.640 --> 00:02:05.598
it's part of a lot of
functional libraries.

33
00:02:08.790 --> 00:02:13.429
&gt;&gt; Speaker 3: But this, from this
_.from() from the _library accomplish

34
00:02:13.429 --> 00:02:16.335
the same thing as the prototype method?

35
00:02:16.335 --> 00:02:18.710
&gt;&gt; Bianca Gandolfo: Mm-hm, intense

