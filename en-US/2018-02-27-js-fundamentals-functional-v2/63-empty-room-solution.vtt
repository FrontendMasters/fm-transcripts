WEBVTT

1
00:00:00.000 --> 00:00:04.973
So, our task is to get
through this data structure,

2
00:00:04.973 --> 00:00:08.136
however, creatively we want and

3
00:00:08.136 --> 00:00:12.883
figure out which room,
our suspects were not in.

4
00:00:12.883 --> 00:00:16.204
So for example,
on Miss Scarlett on that night,

5
00:00:16.204 --> 00:00:20.991
she was in the conservatory,
Reverend Green, he was in the kitchen.

6
00:00:20.991 --> 00:00:26.444
Colonel Mustard was in
the billiard's room, etcetera,

7
00:00:26.444 --> 00:00:32.129
so we want to find out whose was not,
which room no one was in.

8
00:00:32.129 --> 00:00:33.661
&gt;&gt; Well we only need the room right?

9
00:00:33.661 --> 00:00:34.921
&gt;&gt; What?
&gt;&gt; Do we need the room?

10
00:00:34.921 --> 00:00:35.980
&gt;&gt; Just the room.

11
00:00:35.980 --> 00:00:36.762
&gt;&gt; Okay.
&gt;&gt; Yeah,

12
00:00:36.762 --> 00:00:41.286
cuz if no one was in there
then you know what I mean?

13
00:00:41.286 --> 00:00:42.899
Yeah, awesome.

14
00:00:46.158 --> 00:00:50.663
Okay, so I have our data structure here,

15
00:00:50.663 --> 00:00:54.266
let's get it in JavaScript, and

16
00:00:54.266 --> 00:00:58.660
also in JavaScript, all right, oops.

17
00:01:01.179 --> 00:01:07.104
So, How'd you guys attempt it?

18
00:01:12.440 --> 00:01:13.217
Anyway attempt it?

19
00:01:13.217 --> 00:01:15.065
&gt;&gt; [INAUDIBLE]
&gt;&gt; What?

20
00:01:15.065 --> 00:01:18.348
&gt;&gt; I started by creating a variable,
not enroll.

21
00:01:18.348 --> 00:01:19.201
&gt;&gt; Okay.

22
00:01:19.201 --> 00:01:21.476
&gt;&gt; And tried using reduce.

23
00:01:29.720 --> 00:01:37.075
&gt;&gt; So we have some not in room function
perhaps, maybe we wanna make this fancy.

24
00:01:40.200 --> 00:01:42.568
Okay, and then maybe reduce.

25
00:01:46.850 --> 00:01:51.535
Okay, so for our list probably for reduce,

26
00:01:51.535 --> 00:01:58.760
we wanna do new development, and
maybe notInRoom is our callback.

27
00:02:01.780 --> 00:02:06.899
And so
what we wanna take from this is what?

28
00:02:13.360 --> 00:02:17.287
What do we want it to return, we want
it to return maybe an array of rooms.

29
00:02:19.760 --> 00:02:26.978
No living room, Bathroom or

30
00:02:26.978 --> 00:02:31.824
something like that, seems reasonable,
so we want it to return an array,

31
00:02:34.731 --> 00:02:40.003
And then, So
if we wanted to return an array

32
00:02:40.003 --> 00:02:45.741
we should start with an initial value
of an empty array, that's a trick.

33
00:02:45.741 --> 00:02:49.860
And we wanna make sure that we

34
00:02:49.860 --> 00:02:54.846
wanna push that value to our memo,

35
00:03:00.331 --> 00:03:04.358
Push whatever it is that we're gonna push,
okay?

36
00:03:14.640 --> 00:03:19.945
So what's this first thing,
maybe like the room.

37
00:03:19.945 --> 00:03:22.398
&gt;&gt; Rooms.

38
00:03:22.398 --> 00:03:25.865
&gt;&gt; Good catch rooms, so,

39
00:03:31.296 --> 00:03:36.453
Really, well, really,
this is going to be the suspect.

40
00:03:39.323 --> 00:03:42.601
And then we have to get into
suspect that rooms, right,

41
00:03:42.601 --> 00:03:46.101
because reduce is just going
to loop through the top level.

42
00:03:47.860 --> 00:03:52.025
So the first object and
our top level is a suspect, so

43
00:03:52.025 --> 00:03:58.291
if we want to get to the rooms we have
to reference it like this suspect.rooms.

44
00:03:58.291 --> 00:04:03.366
And then we eventually want
to push the room where, like,

45
00:04:03.366 --> 00:04:09.389
they're not there, no one was there,
something like that, okay?

46
00:04:16.082 --> 00:04:17.631
All right, so what do we have to do next?

47
00:04:23.572 --> 00:04:28.912
&gt;&gt; The way I did it or tried to do it
was just take all of the rooms arrays,

48
00:04:28.912 --> 00:04:31.456
and then concat them together.

49
00:04:31.456 --> 00:04:32.621
&gt;&gt; And then loop and see.

50
00:04:32.621 --> 00:04:37.035
&gt;&gt; And see you'd have a key and
object, no you'd have like a pair for

51
00:04:37.035 --> 00:04:41.059
each entry, it would be either room and
then true or false.

52
00:04:44.494 --> 00:04:50.479
&gt;&gt; So if the data structure you're
created look like what, it was an object?

53
00:04:50.479 --> 00:04:56.812
&gt;&gt; It was an array of objects
that had room and then boolean.

54
00:04:56.812 --> 00:04:57.943
For each entry.

55
00:04:57.943 --> 00:05:07.089
&gt;&gt; Got it, so it would be like,
Billiard's room like that?

56
00:05:07.089 --> 00:05:07.943
&gt;&gt; Yeah.

57
00:05:07.943 --> 00:05:10.027
&gt;&gt; Okay.

58
00:05:10.027 --> 00:05:14.753
&gt;&gt; [INAUDIBLE]
&gt;&gt; So it would return true if it was not

59
00:05:14.753 --> 00:05:19.913
in the room, so no one was in
the Billiards room that would be true,

60
00:05:19.913 --> 00:05:22.421
is that what you were thinking?

61
00:05:22.421 --> 00:05:27.204
&gt;&gt; Well, I was gonna start with just
the like put all the rays in to

62
00:05:27.204 --> 00:05:31.531
get it out of the actually
there's no point doing that.

63
00:05:31.531 --> 00:05:35.024
&gt;&gt; First [CROSSTALK]
&gt;&gt; You would have an array of like this?

64
00:05:35.024 --> 00:05:36.556
&gt;&gt; Yeah.

65
00:05:36.556 --> 00:05:41.337
&gt;&gt; Yeah, okay, so that's another
thing we could do is we could and

66
00:05:41.337 --> 00:05:43.298
then you can reduce this.

67
00:05:43.298 --> 00:05:46.359
&gt;&gt; [INAUDIBLE] To reduce twice.

68
00:05:46.359 --> 00:05:48.067
&gt;&gt; What's that?
&gt;&gt; Well that might not need to reduce

69
00:05:48.067 --> 00:05:49.561
twice and that's a second level thing.

70
00:05:49.561 --> 00:05:55.669
&gt;&gt; So yeah, well, we're gonna have to loop
I think we will have to reduce twice.

71
00:05:55.669 --> 00:06:01.552
So do some sort of reduced
like functionality,

72
00:06:01.552 --> 00:06:08.611
because we need to figure out
which ones are false here and

73
00:06:08.611 --> 00:06:13.924
come up with a list of
all of the false ones.

74
00:06:13.924 --> 00:06:17.922
And then we need to do it for all of them
and then we need to do it across all of

75
00:06:17.922 --> 00:06:21.219
the suspects, so
it's kind of a two-dimensional thing.

76
00:06:24.356 --> 00:06:31.335
Okay, All right,

77
00:06:31.335 --> 00:06:34.360
so where were we, so
we have two approaches.

78
00:06:38.992 --> 00:06:41.936
We can reduce this array after
we create this data structure.

79
00:06:45.424 --> 00:06:48.617
Or we can try to all do it in one go.

80
00:06:54.714 --> 00:06:55.886
Which would be something like,

81
00:07:05.981 --> 00:07:06.481
This is.

82
00:07:10.254 --> 00:07:14.373
Do you guys see what I'm doing, so

83
00:07:14.373 --> 00:07:18.493
what we wanna do in this reduce is we

84
00:07:18.493 --> 00:07:23.481
want to return an array of all the falses.

85
00:07:23.481 --> 00:07:28.555
So for example for Miss Scarlet we
wanna return the billiard's room,

86
00:07:28.555 --> 00:07:30.791
the ballroom and the kitchen.

87
00:07:43.376 --> 00:07:45.844
And then we want to reduce it again from,

88
00:07:51.746 --> 00:07:56.161
So eventually, let's see,
so we'll have our,

89
00:07:58.377 --> 00:08:01.170
For each suspect we're gonna get an array.

90
00:08:04.400 --> 00:08:10.243
And then we need to flatten that array.

91
00:08:10.243 --> 00:08:17.225
No then,
we need to make a opposite unique.

92
00:08:19.099 --> 00:08:24.788
So if there's a duplicate we need to,
we need to remove it does that make sense?

93
00:08:24.788 --> 00:08:29.726
So, the first time we
reduce it we're gonna get,

94
00:08:36.459 --> 00:08:41.820
Kitchen, Ballroom,

95
00:08:46.592 --> 00:08:53.639
And billiard room okay, for Miss Scarlett.

96
00:08:56.984 --> 00:09:01.185
And then the next person it's
gonna be something like this.

97
00:09:03.981 --> 00:09:07.645
Ballroom conservatory,

98
00:09:07.645 --> 00:09:13.142
dining room there's some more rooms.

99
00:09:13.142 --> 00:09:13.939
Let's just say,

100
00:09:23.774 --> 00:09:26.485
So, when we reduce these two.

101
00:09:28.733 --> 00:09:33.275
Well, what we really wanna do is compare

102
00:09:33.275 --> 00:09:38.228
between these two data structures and see.

103
00:09:38.228 --> 00:09:43.057
So if these two are shared,
we wanna keep it.

104
00:09:43.057 --> 00:09:48.604
If this one's not shared we
don't want to keep it because

105
00:09:48.604 --> 00:09:53.805
that means that this person
reverend Green had been in

106
00:09:53.805 --> 00:09:59.020
the bill your term anthems
I guess following okay so.

107
00:10:02.872 --> 00:10:08.952
Getting from here we need to somehow we

108
00:10:08.952 --> 00:10:16.555
need to fight there's we
can use a difference.

109
00:10:16.555 --> 00:10:18.258
We can do the difference of the arrays.

110
00:10:20.688 --> 00:10:25.844
So I believe, There

111
00:10:25.844 --> 00:10:30.165
is, Something called difference.

112
00:10:30.165 --> 00:10:33.331
Let's check out the documentation.

113
00:10:37.011 --> 00:10:42.424
All right, so creates an array of array
values not included in the other blah,

114
00:10:42.424 --> 00:10:43.663
blah, perfect.

115
00:10:45.551 --> 00:10:46.501
So that's what we'll do.

116
00:10:46.501 --> 00:10:50.579
We'll use difference for those, okay.

117
00:10:53.527 --> 00:10:56.286
So maybe we don't need to reduce so
many times after all.

118
00:10:56.286 --> 00:10:59.538
Yeah, that was gonna get a little crazy.

119
00:11:01.901 --> 00:11:08.092
So let's call this our,

120
00:11:12.731 --> 00:11:15.137
So we're gonna get multiple arrays and
I'm going to store it.

121
00:11:15.137 --> 00:11:18.376
We can store it in an object or
we can store it in an array and

122
00:11:18.376 --> 00:11:22.101
I'm just thinking what is gonna
be the best method of doing that?

123
00:11:25.956 --> 00:11:30.055
I'll just put it in anyway.

124
00:11:30.055 --> 00:11:32.178
Why not, okay.

125
00:11:32.178 --> 00:11:39.055
So, as we reduce Rooms.

126
00:11:41.333 --> 00:11:46.022
Not rooms so these are all the this
let's call these the empty rooms.

127
00:11:47.274 --> 00:11:54.863
Okay, Okay.

128
00:12:00.185 --> 00:12:02.097
So we'll reduce it.

129
00:12:02.097 --> 00:12:03.646
This is going to return an array.

130
00:12:09.972 --> 00:12:10.715
Hold on a second.

131
00:12:17.961 --> 00:12:18.875
There we go.

132
00:12:21.372 --> 00:12:23.021
Room, memo.

133
00:12:26.784 --> 00:12:29.519
Suspect.rooms.

134
00:12:29.519 --> 00:12:33.386
Then we need to loop through this, okay?

135
00:12:33.386 --> 00:12:35.532
All right,
let's just do one thing at a time.

136
00:12:40.261 --> 00:12:45.020
So, we wanna say if

137
00:12:45.020 --> 00:12:49.184
it's false, so

138
00:12:49.184 --> 00:12:56.033
if suspect rooms is false.

139
00:12:59.260 --> 00:13:05.651
Memo.push, Sorry,

140
00:13:05.651 --> 00:13:11.386
we wanna say room here, push the room and

141
00:13:11.386 --> 00:13:15.447
then you wanna return memo.

142
00:13:15.447 --> 00:13:22.129
Okay, so what we're doing here is we're
looping through the suspect.rooms.

143
00:13:22.129 --> 00:13:27.901
For each room we're seeing if the value
is false if it is we're gonna

144
00:13:27.901 --> 00:13:34.303
push it into our memo which is an array
because we initialize it as an array.

145
00:13:34.303 --> 00:13:35.610
So this is for one suspect.

146
00:13:35.610 --> 00:13:40.378
So at the end of this, we're gonna

147
00:13:40.378 --> 00:13:45.318
create this empty rooms variable.

148
00:13:45.318 --> 00:13:52.277
Okay, but we need to do that for
multiple people.

149
00:13:57.681 --> 00:13:58.721
Okay.

150
00:14:04.210 --> 00:14:08.269
It seemed a lot simpler in my
head when I wrote that exercise.

151
00:14:08.269 --> 00:14:14.841
Okay, so let's just map this.

152
00:14:14.841 --> 00:14:15.422
Do we wanna map?

153
00:14:15.422 --> 00:14:18.741
So we want it to return.

154
00:14:18.741 --> 00:14:21.059
Yeah, so we want to map it.

155
00:14:25.763 --> 00:14:26.681
We map.

156
00:14:29.845 --> 00:14:35.565
The new development, Over not in room,

157
00:14:40.280 --> 00:14:46.377
And this is going to be our,
Not in rooms so

158
00:14:46.377 --> 00:14:52.231
that this is going to loop
over a new development.

159
00:14:52.231 --> 00:14:56.614
It's going to pass our suspect

160
00:14:56.614 --> 00:15:01.679
object into this function, okay?

161
00:15:01.679 --> 00:15:05.938
And then we're going to
reduce the suspect.rooms,

162
00:15:05.938 --> 00:15:11.435
which is an array this is gonna return
an array of all the empty rooms.

163
00:15:11.435 --> 00:15:16.682
So map is going to be an array of
arrays of all the empty rooms.

164
00:15:22.650 --> 00:15:24.194
&gt;&gt; You can do it one more time.

165
00:15:24.194 --> 00:15:32.241
&gt;&gt; Yeah let's yeah, okay.

166
00:15:32.241 --> 00:15:33.241
So new development.

167
00:15:33.241 --> 00:15:36.718
Let me just put a word wrap here.

168
00:15:39.880 --> 00:15:41.784
Okay, so new development, right?

169
00:15:41.784 --> 00:15:44.524
Is an array of objects.

170
00:15:44.524 --> 00:15:45.721
We're gonna map over it.

171
00:15:45.721 --> 00:15:47.968
So this we're looping through.

172
00:15:47.968 --> 00:15:52.441
And we wanna map because we want
the array to be the same length

173
00:15:52.441 --> 00:15:55.532
as the array that we're passing, yeah.

174
00:15:58.592 --> 00:16:02.261
So here's our first item that's
gonna get passed into not in room.

175
00:16:03.400 --> 00:16:05.110
That's our suspect.

176
00:16:05.110 --> 00:16:08.370
We're gonna reduce the suspect rooms,
right?

177
00:16:08.370 --> 00:16:12.830
So, we're digging into the suspect rooms.

178
00:16:12.830 --> 00:16:15.150
We're gonna pass it, the room, right?

179
00:16:15.150 --> 00:16:17.880
That's just how reduce works and the memo.

180
00:16:19.600 --> 00:16:22.510
We're gonna initialize
it as an empty array.

181
00:16:22.510 --> 00:16:26.794
So, every time we loop through for
each room if it's false,

182
00:16:26.794 --> 00:16:30.496
we're gonna push a new room into memo and
return it.

183
00:16:30.496 --> 00:16:35.310
So, the first time it finds an empty room,
it's gonna push kitchen.

184
00:16:35.310 --> 00:16:39.807
It's gonna return memo, which is an array.

185
00:16:39.807 --> 00:16:41.834
It's gonna have an array
with kitchen in it.

186
00:16:43.793 --> 00:16:45.740
If it's true, it's just gonna return memo.

187
00:16:45.740 --> 00:16:53.523
Anyway, it's not gonna add anything to
it though So, it's like a fancy filter.

188
00:16:58.991 --> 00:16:59.909
Do you guys see how that works?

189
00:17:01.970 --> 00:17:07.770
Okay, and
then we're gonna return that array.

190
00:17:07.770 --> 00:17:10.464
So, that would look, something like this.

191
00:17:10.464 --> 00:17:16.968
And then map is gonna start
looking something like this.

192
00:17:16.968 --> 00:17:23.989
And then the second time it goes through,

193
00:17:23.989 --> 00:17:28.812
looks something like this.

194
00:17:31.815 --> 00:17:37.800
And then we'll have this data structure,
and then we want to difference it,

195
00:17:37.800 --> 00:17:42.146
and that will give us the rooms
that one has been within.

196
00:17:44.921 --> 00:17:45.486
Does that makes sense?

197
00:17:49.121 --> 00:17:55.083
Then we would say difference not in rooms,

198
00:17:55.083 --> 00:18:00.059
and that will give us our solution.

199
00:18:05.844 --> 00:18:10.850
&gt;&gt; How does it know that
it's kind of return memo?

200
00:18:10.850 --> 00:18:13.530
It's got that empty array.

201
00:18:13.530 --> 00:18:19.153
How does it know to push
memo into that was pushing?

202
00:18:19.153 --> 00:18:20.775
&gt;&gt; Yeah, this push?

203
00:18:20.775 --> 00:18:21.282
&gt;&gt; Yeah.

204
00:18:21.282 --> 00:18:26.520
&gt;&gt; It's gonna be pushed
into this empty array.

205
00:18:32.066 --> 00:18:36.075
Because this is the initial value, so
for reduce, you can pass nothing as

206
00:18:36.075 --> 00:18:39.581
the initial value and it will
choose the first item in the array.

207
00:18:39.581 --> 00:18:42.530
Or you can give it your own initial value.

208
00:18:43.970 --> 00:18:46.024
And you can define
the behavior in the callback

209
00:18:51.854 --> 00:18:54.680
But a simpler version would
really be to use just a filter.

210
00:18:56.050 --> 00:18:58.715
But filter is just a type of reduce.

211
00:19:07.102 --> 00:19:11.156
&gt;&gt; So,
what difference give in this example?

212
00:19:11.156 --> 00:19:14.802
Give billiard room as the difference.

213
00:19:14.802 --> 00:19:21.820
So, then kitchen and ballroom would
still be valid options as the no room.

214
00:19:23.276 --> 00:19:24.040
&gt;&gt; Good point.

215
00:19:25.900 --> 00:19:27.326
Maybe I did it backwards, hold on.

216
00:19:33.054 --> 00:19:33.902
&gt;&gt; Difference.

217
00:19:33.902 --> 00:19:38.495
&gt;&gt; Yeah, we don't want the difference,
we want the not difference.

218
00:19:41.335 --> 00:19:43.615
Create an array of values not included.

219
00:19:43.615 --> 00:19:48.614
&gt;&gt; You'd want the room that
not shows up the most, but

220
00:19:48.614 --> 00:19:55.725
shows up exactly the same number of
times as there are suspects, right?

221
00:19:55.725 --> 00:19:59.159
&gt;&gt; Yeah, exactly.

222
00:19:59.159 --> 00:20:02.985
So, we can negate difference, let's see.

223
00:20:02.985 --> 00:20:09.610
Creates a function that negates
the results of the predicate function.

224
00:20:10.970 --> 00:20:14.130
So, is even filtering the gate,
is even overturn odd.

225
00:20:15.720 --> 00:20:18.146
Yeah, maybe if we do a difference and
we negate it.

226
00:20:20.845 --> 00:20:22.970
To make it more complicated, why not?

227
00:20:24.580 --> 00:20:26.098
Wait, but this is not a function.

228
00:20:26.098 --> 00:20:33.292
So maybe,
&gt;&gt; We've

229
00:20:33.292 --> 00:20:35.470
been negating the difference, right?

230
00:20:35.470 --> 00:20:43.250
&gt;&gt; Well, It has to be a predicate.

231
00:20:43.250 --> 00:20:45.644
I don't know that that will work.

232
00:20:57.694 --> 00:21:01.520
Maybe there's a deep unique.

233
00:21:06.792 --> 00:21:16.618
Let's see, now,
Probably one of these ones.

234
00:21:18.369 --> 00:21:20.646
3, 1 and 3.

235
00:21:29.363 --> 00:21:33.749
I really wanna use,
I can do it logically even code but

236
00:21:33.749 --> 00:21:37.760
I really wanna do,
I wanna use a low dash method.

237
00:21:39.740 --> 00:21:41.799
&gt;&gt; So, like an array intersection or
something?

238
00:21:42.890 --> 00:21:45.133
&gt;&gt; Yeah, sounds looking, what is this?

239
00:21:49.469 --> 00:21:50.004
&gt;&gt; Yep.

240
00:21:53.529 --> 00:21:56.770
There's an underscore,
a low dash intersection.

241
00:21:56.770 --> 00:21:57.510
&gt;&gt; Yes.

242
00:21:58.730 --> 00:22:02.820
&gt;&gt; Let's do that.
I knew there had to be something.

243
00:22:02.820 --> 00:22:06.464
There we go, and now we want,
it would return this.

244
00:22:14.422 --> 00:22:15.959
All right.

245
00:22:15.959 --> 00:22:18.110
What do you think?

246
00:22:20.170 --> 00:22:20.990
Well, Krasny

247
00:22:31.155 --> 00:22:32.242
Any questions?

248
00:22:35.586 --> 00:22:36.580
Yeah, over the head.

249
00:22:37.870 --> 00:22:39.310
I mean, it's pretty much over my head too.

250
00:23:00.030 --> 00:23:04.117
Okay, Thinking about this,

251
00:23:10.912 --> 00:23:15.780
So, we can also easily use a filter
here to do the same thing as

252
00:23:15.780 --> 00:23:17.504
this reduces doing.

253
00:23:23.624 --> 00:23:24.124
Cool.

254
00:23:29.911 --> 00:23:33.450
All right, now, you guys are like
I never wanna use reduce again.

255
00:23:33.450 --> 00:23:41.970
That's what they say, people who criticize
reduce say, it's too complicated.

256
00:23:41.970 --> 00:23:46.270
So, the only thing that people
can do with it is add numbers.

257
00:23:46.270 --> 00:23:53.819
But the people who are really
into it are like really into it.

258
00:23:53.819 --> 00:23:55.853
I like it just for the riddles,

259
00:23:55.853 --> 00:24:00.236
like I said at the beginning of
the class I really like riddles, and

260
00:24:00.236 --> 00:24:05.033
mysteries and kind of like figuring
stuff out that's what I like about.

261
00:24:05.033 --> 00:24:08.590
It's kind of is like a riddle for
me how to use reduce.

