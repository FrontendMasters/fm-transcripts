WEBVTT

1
00:00:00.160 --> 00:00:03.776
&gt;&gt; Bianca Gandolfo: So
our task was to take our filtered data and

2
00:00:03.776 --> 00:00:06.898
then map it into an array of strings.

3
00:00:06.898 --> 00:00:09.951
So right now we have an array of objects,
right?

4
00:00:09.951 --> 00:00:12.215
Each object represents our suspects.

5
00:00:12.215 --> 00:00:16.636
But perhaps we really wanna simplify that.

6
00:00:16.636 --> 00:00:19.626
We don't really care about
this other data now.

7
00:00:19.626 --> 00:00:21.623
We really want their names.

8
00:00:21.623 --> 00:00:28.881
And so we want to transform that
array into an array of strings.

9
00:00:28.881 --> 00:00:33.625
And in these strings it should
contain the names of the suspects

10
00:00:33.625 --> 00:00:36.766
who were present the night of the murder.

11
00:00:38.714 --> 00:00:41.733
&gt;&gt; Bianca Gandolfo: All right, so
what's the first thing we need to do?

12
00:00:47.147 --> 00:00:48.029
&gt;&gt; Bianca Gandolfo: Anyone complete it?

13
00:00:51.394 --> 00:00:52.078
&gt;&gt; Bianca Gandolfo: Yeah?

14
00:00:52.078 --> 00:00:54.029
&gt;&gt; off screen: Do we have
our functions from earlier?

15
00:00:54.029 --> 00:00:58.504
&gt;&gt; Bianca Gandolfo: Yeah, so-
&gt;&gt; off screen: So

16
00:00:58.504 --> 00:01:03.793
we need a,
&gt;&gt; off screen: Function

17
00:01:03.793 --> 00:01:05.604
that will return the names.

18
00:01:05.604 --> 00:01:11.037
&gt;&gt; Bianca Gandolfo: Yeah, so
we're gonna create user map.

19
00:01:11.037 --> 00:01:14.834
And you're saying we need to have
a function that's gonna do something with

20
00:01:14.834 --> 00:01:15.437
the names?

21
00:01:15.437 --> 00:01:17.087
Okay.

22
00:01:21.277 --> 00:01:22.752
&gt;&gt; Bianca Gandolfo: What do we put here?

23
00:01:22.752 --> 00:01:26.839
&gt;&gt; off screen: We need to store the return
value from the filter function.

24
00:01:26.839 --> 00:01:27.640
&gt;&gt; Bianca Gandolfo: Yeah.

25
00:01:31.901 --> 00:01:33.503
&gt;&gt; Bianca Gandolfo: What
should we call this?

26
00:01:33.503 --> 00:01:39.340
suspect, suspects, let's just call it.

27
00:01:39.340 --> 00:01:41.271
Yeah, I guess we'd call it suspects.

28
00:01:41.271 --> 00:01:47.250
And then this one can be suspectsName,
suspects.

29
00:01:47.250 --> 00:01:50.907
After you look at a word for so long,
you know how it starts to look weird?

30
00:01:50.907 --> 00:01:54.286
That's what suspects looks like to me.

31
00:01:54.286 --> 00:01:56.847
Okay, so now we wanna map over our

32
00:01:56.847 --> 00:02:01.893
suspects,
&gt;&gt; Bianca Gandolfo: Inside this function,

33
00:02:01.893 --> 00:02:04.828
and we can use arrow functions now,
cuz why not?

34
00:02:08.427 --> 00:02:15.590
&gt;&gt; Bianca Gandolfo: Actually, we can,
&gt;&gt; Bianca Gandolfo: Okay.

35
00:02:17.959 --> 00:02:18.621
&gt;&gt; Bianca Gandolfo: And then what?

36
00:02:20.582 --> 00:02:24.161
&gt;&gt; off screen: return suspects.name?

37
00:02:24.161 --> 00:02:27.238
&gt;&gt; Bianca Gandolfo: Return suspects.name,
awesome.

38
00:02:27.238 --> 00:02:30.813
Great, there we have it.

39
00:02:30.813 --> 00:02:34.274
Anyone else do it differently?

40
00:02:34.274 --> 00:02:37.153
Oops, I have a typo here.

41
00:02:44.526 --> 00:02:46.010
&gt;&gt; Bianca Gandolfo: Something like that.

42
00:02:46.010 --> 00:02:51.765
Cool, so this is a common pattern for
getting the particular data that you need.

43
00:02:51.765 --> 00:02:56.450
And then transforming it into
some format that's relevant to

44
00:02:56.450 --> 00:02:58.800
whatever you're working on.

