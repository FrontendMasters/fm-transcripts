WEBVTT

1
00:00:00.090 --> 00:00:02.660
&gt;&gt; Bianca Gandolfo: So we just spent
some time implementing our own

2
00:00:02.660 --> 00:00:05.860
version of filter and
let's go through the solution.

3
00:00:05.860 --> 00:00:12.090
All right, so we are going to

4
00:00:12.090 --> 00:00:17.120
write a filter similar to one in Lodash or
Underscore.

5
00:00:17.120 --> 00:00:18.480
So I'm gonna set up my Underscore.

6
00:00:18.480 --> 00:00:24.344
Let me also set up my syntax highlighting.
&gt;&gt; Bianca Gandolfo: All right,

7
00:00:24.344 --> 00:00:30.639
so let me just set this up for
us, _.filter = a function right,

8
00:00:30.639 --> 00:00:36.837
and we have an array, and
then we have a callback function here.

9
00:00:36.837 --> 00:00:44.629
All right, so
what's the first thing we need to do?

10
00:00:44.629 --> 00:00:47.306
We're gonna do some pseudocode,
and then I'll write out the code,

11
00:00:47.306 --> 00:00:51.124
like we did yesterday.
&gt;&gt; Bianca Gandolfo: What's

12
00:00:51.124 --> 00:00:52.483
something that needs to be done?
&gt;&gt; Speaker 2: Loop

13
00:00:52.483 --> 00:00:54.520
through each item in the array.
&gt;&gt; Bianca Gandolfo: Cool,

14
00:00:54.520 --> 00:01:00.009
we need to loop through the array, okay.
&gt;&gt; Speaker 2: Declare the array to return.

15
00:01:01.150 --> 00:01:01.810
&gt;&gt; Bianca Gandolfo: Yeah, so

16
00:01:01.810 --> 00:01:06.580
we need to create a new array.
&gt;&gt; Speaker 3: Check if

17
00:01:06.580 --> 00:01:09.419
the callback returns true.
&gt;&gt; Bianca Gandolfo: Yeah,

18
00:01:09.419 --> 00:01:12.177
where do we do that?
&gt;&gt; Speaker 2: Inside the loop.

19
00:01:17.441 --> 00:01:18.201
&gt;&gt; Bianca Gandolfo: Okay,

20
00:01:18.201 --> 00:01:22.031
anything else?
&gt;&gt; Speaker 2: If it does return true,

21
00:01:22.031 --> 00:01:31.761
you push the item into the array?
&gt;&gt; Bianca Gandolfo: All right,

22
00:01:31.761 --> 00:01:35.370
and if it's false?
&gt;&gt; Speaker 2: Nothing.

23
00:01:35.370 --> 00:01:36.390
&gt;&gt; Bianca Gandolfo: Nothing, we

24
00:01:36.390 --> 00:01:38.030
move on with our lives.

25
00:01:38.030 --> 00:01:42.167
Awesome, so let's call this storage.

26
00:01:42.167 --> 00:01:46.213
We'll initialize that as an empty array.

27
00:01:46.213 --> 00:01:52.038
So we can loop through our array,
so we can do our for.

28
00:01:52.038 --> 00:01:57.138
Let's get fancy.
&gt;&gt; Speaker 2: Why

29
00:01:57.138 --> 00:02:01.984
are you consting the storage there?
&gt;&gt; Bianca Gandolfo: I like to const.

30
00:02:08.091 --> 00:02:10.740
&gt;&gt; Bianca Gandolfo: I constant if it's

31
00:02:10.740 --> 00:02:14.881
a non-primitive value, but

32
00:02:14.881 --> 00:02:20.015
I don't have really strong opinions

33
00:02:20.015 --> 00:02:26.143
about when you should
use const versus let,

34
00:02:26.143 --> 00:02:29.968
in var and stuff like that.

35
00:02:29.968 --> 00:02:31.514
I like to use const, for sure,

36
00:02:31.514 --> 00:02:34.560
on functions because you never
want to re assign a function.

37
00:02:34.560 --> 00:02:35.600
But no one ever does that.

38
00:02:35.600 --> 00:02:38.912
So, it's like, how important is it?

39
00:02:38.912 --> 00:02:46.396
I'm not one of those people who
are arguing for something or the other.

40
00:02:46.396 --> 00:02:51.070
I'm more of a practical,
get it done kind of person.

41
00:02:51.070 --> 00:02:54.810
But we do need to do let here
because it's gonna be reassigned.

42
00:02:54.810 --> 00:02:56.260
And it's a primitive
value cuz it's a number.

43
00:02:56.260 --> 00:02:59.459
So that's the only thing
that really matters in this.

44
00:03:00.770 --> 00:03:02.650
And probably,
if you're gonna write library code,

45
00:03:02.650 --> 00:03:03.950
you don't want it to be reassigned,

46
00:03:03.950 --> 00:03:08.470
so you want want to take a lot of measures
to prevent people from doing that.

47
00:03:08.470 --> 00:03:11.939
More than probably just
assigning it to const.

48
00:03:11.939 --> 00:03:18.644
Okay, so we're looping through, we need
to check if the callback equals true,

49
00:03:18.644 --> 00:03:23.178
like this.
&gt;&gt; Speaker 2: To pass

50
00:03:23.178 --> 00:03:26.000
the current element?
&gt;&gt; Bianca Gandolfo: Let's pass that

51
00:03:26.000 --> 00:03:28.890
current element, so that's array at i.

52
00:03:28.890 --> 00:03:32.650
Why are we using brackets again here?
&gt;&gt; Speaker 2: It's a variable.

53
00:03:32.650 --> 00:03:35.008
&gt;&gt; Bianca Gandolfo: Cuz i is a variable.

54
00:03:35.008 --> 00:03:39.980
All right,
&gt;&gt; Bianca Gandolfo: Now what?

55
00:03:41.480 --> 00:03:44.699
&gt;&gt; Speaker 2: Storage.push.

56
00:03:44.699 --> 00:03:47.890
And then callback array on i.

57
00:03:49.542 --> 00:03:50.688
Sorry, no, you don't want the callback.

58
00:03:50.688 --> 00:03:51.605
You want just the array back.
&gt;&gt; Bianca Gandolfo: Yeah,

59
00:03:51.605 --> 00:03:53.288
you just pass the array at i.

60
00:03:53.288 --> 00:03:56.525
So we want to save
the values that return true,

61
00:03:56.525 --> 00:04:01.837
not the callback with the item, because
then you're just gonna get an array

62
00:04:01.837 --> 00:04:06.695
of true every time that wouldn't be
as helpful for what we want to do.

63
00:04:06.695 --> 00:04:08.259
All right,

64
00:04:15.937 --> 00:04:19.640
&gt;&gt; Bianca Gandolfo: Okay,
&gt;&gt; Bianca Gandolfo: And

65
00:04:19.640 --> 00:04:22.276
we're gonna return our array.

66
00:04:22.276 --> 00:04:27.284
return array, how we doing?
&gt;&gt; Speaker 2: Returning storage.

67
00:04:27.284 --> 00:04:28.149
&gt;&gt; Bianca Gandolfo: Thank you.

68
00:04:31.959 --> 00:04:34.022
&gt;&gt; Bianca Gandolfo: All right.

69
00:04:34.022 --> 00:04:35.654
&gt;&gt; Speaker 2: Do we have to add a case in

70
00:04:35.654 --> 00:04:41.732
for if array's an object?
&gt;&gt; Bianca Gandolfo: No, we don't need to,

71
00:04:41.732 --> 00:04:46.134
but,
&gt;&gt; Bianca Gandolfo: Maybe think about how

72
00:04:46.134 --> 00:04:46.758
you might do that.

73
00:04:46.758 --> 00:04:49.840
But for right now,
this will get us through.

74
00:04:51.520 --> 00:04:55.475
Cool, any questions?
&gt;&gt; Speaker 2: Yeah, on line nine.

75
00:04:55.475 --> 00:04:58.955
I guess this depends on how
you write your callback but

76
00:04:58.955 --> 00:05:03.766
I didn't pass the second and third
arguments, the i and the array again.

77
00:05:03.766 --> 00:05:05.587
So is that necessary in some way or

78
00:05:05.587 --> 00:05:08.270
are we getting something else from that?
&gt;&gt; Bianca Gandolfo: Well,

79
00:05:08.270 --> 00:05:12.032
I do that just to make it as generic
as possible just because we don't

80
00:05:12.032 --> 00:05:13.755
know what the callback needs.

81
00:05:13.755 --> 00:05:16.900
So we don't know,
cuz the callback could be doing anything.

82
00:05:18.070 --> 00:05:22.010
And it might need the entire list,
it might need the index.

83
00:05:22.010 --> 00:05:25.700
And it may need the value.

84
00:05:25.700 --> 00:05:33.080
So, yeah, cool.
&gt;&gt; Bianca Gandolfo: Any questions?

85
00:05:33.080 --> 00:05:34.370
&gt;&gt; Speaker 2: So we've seen that question.

86
00:05:35.400 --> 00:05:37.550
The same line, line nine.

87
00:05:39.070 --> 00:05:44.910
The i would be relating to
what part of the callback?

88
00:05:44.910 --> 00:05:47.440
Just the i by itself.
&gt;&gt; Bianca Gandolfo: This part right

89
00:05:47.440 --> 00:05:48.480
here?
&gt;&gt; Speaker 2: Yeah.

90
00:05:48.480 --> 00:05:50.146
&gt;&gt; Bianca Gandolfo: So the question is,

91
00:05:50.146 --> 00:05:52.404
what does this i relate to?

92
00:05:53.440 --> 00:05:58.260
Where were we defining i?
&gt;&gt; Speaker 2: On line 7.

93
00:05:58.260 --> 00:05:58.890
&gt;&gt; Bianca Gandolfo: Yeah,

94
00:05:58.890 --> 00:06:04.730
so i starts at 0, and
then every loop it's gonna increment by 1.

95
00:06:04.730 --> 00:06:06.235
So that's what it's related to.

96
00:06:06.235 --> 00:06:13.423
And if we change this here, it would go
backwards if we had the right conditions,

97
00:06:13.423 --> 00:06:18.726
so that's how you define how
the value changes every time.

98
00:06:18.726 --> 00:06:21.980
So you can really do
whatever you want there.

99
00:06:21.980 --> 00:06:25.296
You can add two if you want,
you can double it every time,

100
00:06:25.296 --> 00:06:30.015
but typically we're just gonna increment
it by one and we're gonna use arrays.

101
00:06:33.085 --> 00:06:35.252
&gt;&gt; Bianca Gandolfo: Cool, good question.

102
00:06:35.252 --> 00:06:40.386
Did anyone write this with a each?
&gt;&gt; Bianca Gandolfo: Yeah,

103
00:06:40.386 --> 00:06:44.062
all right, let's redo it with each.
&gt;&gt; Speaker 2: Online

104
00:06:44.062 --> 00:06:48.606
there's a question.
&gt;&gt; Bianca Gandolfo: What's-

105
00:06:48.606 --> 00:06:50.690
&gt;&gt; Speaker 2: Just in the if cb-

106
00:06:50.690 --> 00:06:51.840
&gt;&gt; Bianca Gandolfo: No, you don't.

107
00:06:51.840 --> 00:06:53.385
&gt;&gt; Speaker 2: You need the equal equal to

108
00:06:53.385 --> 00:06:54.769
true?
&gt;&gt; Bianca Gandolfo: You don't

109
00:06:54.769 --> 00:06:55.878
necessarily need to do that.

110
00:06:55.878 --> 00:06:58.400
I like to be very explicit.

111
00:06:58.400 --> 00:07:02.290
But if you know for sure that this
callback is gonna return true, or

112
00:07:02.290 --> 00:07:09.350
something truth-y, it will really force
it into some Boolean in this if block.

113
00:07:09.350 --> 00:07:12.770
But I just put it there to be clear for
everyone.

114
00:07:12.770 --> 00:07:13.440
Good question, though.

115
00:07:15.460 --> 00:07:18.220
All right, so let's do it with each.

116
00:07:18.220 --> 00:07:19.230
And we're gonna replace our loop.

117
00:07:19.230 --> 00:07:22.934
Remember, whenever we have a loop
we can probably use each or map.

118
00:07:24.250 --> 00:07:28.404
But definitely each, so, oops,

119
00:07:28.404 --> 00:07:33.340
I'm like doing something crazy.

120
00:07:33.340 --> 00:07:35.115
So what is the thing that we want to pass,

121
00:07:35.115 --> 00:07:40.195
the list?
&gt;&gt; Bianca Gandolfo: Do you guys remember?

122
00:07:40.195 --> 00:07:41.038
&gt;&gt; Speaker 2: The array.

123
00:07:41.038 --> 00:07:42.292
&gt;&gt; Bianca Gandolfo: The array.

124
00:07:42.292 --> 00:07:49.749
And then what is our callback function?
&gt;&gt; Bianca Gandolfo: So

125
00:07:49.749 --> 00:07:57.311
we have our value, index and list.
&gt;&gt; Bianca Gandolfo: So

126
00:07:57.311 --> 00:08:03.651
what do we want to do?
&gt;&gt; Bianca Gandolfo: You want

127
00:08:03.651 --> 00:08:09.335
to check if the callback is true, right?
&gt;&gt; Bianca Gandolfo: So

128
00:08:09.335 --> 00:08:13.560
really we could just pop this in here and
change it a little bit.

129
00:08:13.560 --> 00:08:21.323
So If the callback,
&gt;&gt; Bianca Gandolfo: Is true,

130
00:08:21.323 --> 00:08:27.417
storage.push.
&gt;&gt; Bianca Gandolfo: We can call it val.

131
00:08:27.417 --> 00:08:33.112
Sometimes I like to call this item.
&gt;&gt; Bianca Gandolfo: Cuz

132
00:08:33.112 --> 00:08:37.893
it's like an item in an array.
&gt;&gt; Bianca Gandolfo: And we'll get rid of

133
00:08:37.893 --> 00:08:43.261
this guy.
&gt;&gt; Bianca Gandolfo: Cool, and

134
00:08:43.261 --> 00:08:50.350
then if we wanna keep making it smaller,
we can remove that.

135
00:08:50.350 --> 00:08:55.315
If we wanna keep making it smaller, we
can just put this all on one line with no

136
00:08:55.315 --> 00:09:02.032
brackets.
&gt;&gt; Bianca Gandolfo: There's

137
00:09:02.032 --> 00:09:03.770
probably more ways we can shrink this.

138
00:09:03.770 --> 00:09:04.736
But we'll stop there.

