WEBVTT

1
00:00:00.000 --> 00:00:04.065
So, we just spend some time to
implementing our own version of filter.

2
00:00:04.065 --> 00:00:05.662
And let's go to the solution.

3
00:00:05.662 --> 00:00:11.074
All right, so,
we are going to write a filter

4
00:00:11.074 --> 00:00:17.067
that's similar to one in low dash or
underscore.

5
00:00:17.067 --> 00:00:20.676
So, I'm gonna set up my underscorely,
also set up my syntax highlighting.

6
00:00:23.150 --> 00:00:28.298
All right, so,
let me just set this up for us.

7
00:00:28.298 --> 00:00:31.773
Filter = function, right?

8
00:00:31.773 --> 00:00:36.956
And we have an array, and
then we have the callback function here.

9
00:00:36.956 --> 00:00:44.654
All right, so,
what's the first thing we need to do?

10
00:00:44.654 --> 00:00:45.943
We're gonna do some pseudo code, and

11
00:00:45.943 --> 00:00:47.730
then I'll write out the code
like we did yesterday.

12
00:00:50.921 --> 00:00:52.010
What's something that needs to be done?

13
00:00:52.010 --> 00:00:53.813
&gt;&gt; Loop through each item and the array.

14
00:00:53.813 --> 00:00:58.165
&gt;&gt; Cool,
we need to loop through the array, okay.

15
00:00:58.165 --> 00:01:00.678
&gt;&gt; Declare the array to return maybe.

16
00:01:00.678 --> 00:01:03.880
&gt;&gt; Yeah, so,
we need to create a new array.

17
00:01:06.033 --> 00:01:08.573
&gt;&gt; Check if the callback returns true.

18
00:01:08.573 --> 00:01:11.090
&gt;&gt; Yeah, where do we do that?

19
00:01:11.090 --> 00:01:12.550
&gt;&gt; Inside the loop.

20
00:01:12.550 --> 00:01:13.927
&gt;&gt; Exactly.

21
00:01:17.422 --> 00:01:20.158
&gt;&gt; Okay, anything else?

22
00:01:20.158 --> 00:01:23.982
&gt;&gt; If it does return true,
you push the item into the array.

23
00:01:31.196 --> 00:01:34.764
&gt;&gt; All right, and if it's false?

24
00:01:34.764 --> 00:01:37.183
&gt;&gt; Nothing.
&gt;&gt; Nothing, we move on with our lives,

25
00:01:37.183 --> 00:01:37.790
awesome.

26
00:01:37.790 --> 00:01:42.382
So, let's call this storage.

27
00:01:42.382 --> 00:01:43.388
And we'll initialize
that as an empty array.

28
00:01:45.960 --> 00:01:50.520
So, we can loop through our array.

29
00:01:50.520 --> 00:01:54.259
So, we can do our for, let's get fancy.

30
00:01:56.617 --> 00:02:01.763
&gt;&gt; Why are you const-ing
the storage there?

31
00:02:01.763 --> 00:02:02.946
&gt;&gt; I like to const.

32
00:02:07.600 --> 00:02:13.566
I constant if it's a non-primitive value,

33
00:02:13.566 --> 00:02:18.904
but I don't have really strong opinions

34
00:02:18.904 --> 00:02:23.928
about when you should use const versus

35
00:02:23.928 --> 00:02:28.010
let in var and stuff like that.

36
00:02:30.210 --> 00:02:33.776
I like to use const for sure on functions
because you never wanna reassign

37
00:02:33.776 --> 00:02:35.600
a function but no one ever does that.

38
00:02:35.600 --> 00:02:41.869
So, it's how important is it?

39
00:02:41.869 --> 00:02:46.084
I'm not one of those people who
are arguing for something or

40
00:02:46.084 --> 00:02:50.732
the other, I'm more of a practical,
get it done kind of person.

41
00:02:50.732 --> 00:02:55.681
But we do need to do let here because it's
gonna be reassigned and it's a primitive

42
00:02:55.681 --> 00:03:00.435
value cuz it's a number so that's the only
thing that really matters in this.

43
00:03:00.435 --> 00:03:03.920
And probably if you're gonna write library
code, you don't want it to be reassigned.

44
00:03:03.920 --> 00:03:08.340
So, you wanna take a lot of measures
to prevent people from doing that.

45
00:03:08.340 --> 00:03:10.650
Like more than probably
just assigning it to const.

46
00:03:12.240 --> 00:03:15.071
Okay, so, we're looping through,

47
00:03:15.071 --> 00:03:19.148
we need to check if the callback
equals true like this.

48
00:03:23.108 --> 00:03:25.390
&gt;&gt; To pass the current element?

49
00:03:25.390 --> 00:03:26.505
&gt;&gt; And pass that current element.

50
00:03:26.505 --> 00:03:31.609
So, that's array at i,
why are we using brackets again here?

51
00:03:31.609 --> 00:03:32.459
&gt;&gt; It's a variable.

52
00:03:32.459 --> 00:03:34.763
&gt;&gt; Cuz i is a variable.

53
00:03:34.763 --> 00:03:35.263
All right.

54
00:03:39.409 --> 00:03:40.855
Now what?

55
00:03:40.855 --> 00:03:41.355
&gt;&gt; Storage.push.

56
00:03:44.941 --> 00:03:49.048
And then callback array li.

57
00:03:49.048 --> 00:03:50.592
Sorry, no, you don't want to call back,
you want just-

58
00:03:50.592 --> 00:03:51.178
&gt;&gt; Yeah,

59
00:03:51.178 --> 00:03:54.500
you wanna just pass the array at i.

60
00:03:54.500 --> 00:04:00.150
We wanna save the values that return true,
not the call back.

61
00:04:00.150 --> 00:04:04.676
With the item because you then you're just
gonna get an array of true every time, and

62
00:04:04.676 --> 00:04:07.377
that wouldn't be as helpful for
what we wanna do.

63
00:04:07.377 --> 00:04:15.406
All right, Okay.

64
00:04:19.449 --> 00:04:20.998
And we're gonna return our array.

65
00:04:20.998 --> 00:04:24.209
Return array.

66
00:04:24.209 --> 00:04:25.519
How are we doing?

67
00:04:25.519 --> 00:04:27.191
&gt;&gt; Return storage.

68
00:04:27.191 --> 00:04:27.691
&gt;&gt; Thank you.

69
00:04:31.994 --> 00:04:33.790
All right.

70
00:04:33.790 --> 00:04:37.530
&gt;&gt; Do we have to add a case
in if the array is an object?

71
00:04:38.750 --> 00:04:41.029
&gt;&gt; No, we don't need to.

72
00:04:41.029 --> 00:04:46.602
But, maybe think about
how you might do that but

73
00:04:46.602 --> 00:04:52.700
for right now this all gets through, cool.

74
00:04:52.700 --> 00:04:53.580
Any questions?

75
00:04:53.580 --> 00:04:58.245
&gt;&gt; Yeah, on line nine, I guess this
depends on how you write your callback.

76
00:04:58.245 --> 00:05:03.985
But I didn't pass the second and
third arguments, the i in the array again.

77
00:05:03.985 --> 00:05:08.075
So, is that necessary in some way or
are we getting something else from that?

78
00:05:08.075 --> 00:05:11.666
&gt;&gt; Well, I do that just to make it as
generic as possible because we don't know

79
00:05:11.666 --> 00:05:12.929
what the callback needs.

80
00:05:13.970 --> 00:05:18.055
So, we don't know cuz a callback
could be doing anything.

81
00:05:18.055 --> 00:05:24.058
And it might need the entire list,
it might need the index and

82
00:05:24.058 --> 00:05:26.824
it may need the value, so-
&gt;&gt; Cool.

83
00:05:26.824 --> 00:05:27.324
&gt;&gt; Yeah, cool.

84
00:05:31.747 --> 00:05:32.653
Any questions?

85
00:05:33.818 --> 00:05:37.500
&gt;&gt; In the equation,
the same line, line nine.

86
00:05:39.080 --> 00:05:44.190
The i would be relating to
what part of the callback?

87
00:05:44.190 --> 00:05:46.396
Just the i by itself.

88
00:05:46.396 --> 00:05:47.677
&gt;&gt; This part right here?

89
00:05:47.677 --> 00:05:50.144
&gt;&gt; Yeah.
&gt;&gt; So, the question is,

90
00:05:50.144 --> 00:05:52.607
what does this i relate to?

91
00:05:52.607 --> 00:05:54.481
&gt;&gt; Yeah.
&gt;&gt; Where are we defining i?

92
00:05:57.122 --> 00:05:57.933
&gt;&gt; On line seven?

93
00:05:57.933 --> 00:06:04.526
&gt;&gt; Yeah, so, i starts at zero and then
every loop, it's gonna increment by one.

94
00:06:04.526 --> 00:06:06.240
So, that's what it's related to.

95
00:06:07.490 --> 00:06:14.220
And if we change this here, it would go
backwards if we had the right conditions.

96
00:06:15.590 --> 00:06:18.930
So, that's how you define how
the value changes every time.

97
00:06:18.930 --> 00:06:21.970
So, you can really do
whatever you want there.

98
00:06:21.970 --> 00:06:23.700
You can add two if you want.

99
00:06:23.700 --> 00:06:26.140
You can double it every time.

100
00:06:26.140 --> 00:06:30.105
But typically, we're just gonna increment
by one or we're gonna use arrays.

101
00:06:33.147 --> 00:06:35.766
Cool, good question,
anyone write this with a each?

102
00:06:39.615 --> 00:06:43.382
Yeah, all right, let's redo it with each.

103
00:06:43.382 --> 00:06:45.068
&gt;&gt; Online there's a question.

104
00:06:48.285 --> 00:06:51.286
Just in the if cb.

105
00:06:51.286 --> 00:06:52.019
&gt;&gt; No you don't.

106
00:06:52.019 --> 00:06:54.370
&gt;&gt; The e equal true.

107
00:06:54.370 --> 00:06:56.100
&gt;&gt; You don't necessarily need to do that.

108
00:06:56.100 --> 00:06:58.400
I like to be very explicit.

109
00:06:58.400 --> 00:07:03.219
But if you know for sure that this
callback is gonna return true, or

110
00:07:03.219 --> 00:07:08.385
something truthy, it will really
force it into some Boolean if block,

111
00:07:08.385 --> 00:07:12.770
but I just put it there to be clear for
everyone.

112
00:07:12.770 --> 00:07:13.420
Good question though.

113
00:07:15.460 --> 00:07:19.240
All right, so, let's do it with each and
we're gonna replace our loop.

114
00:07:19.240 --> 00:07:24.123
Remember, whenever we have a loop,
we can probably use each or map, but

115
00:07:24.123 --> 00:07:25.416
definitely each.

116
00:07:25.416 --> 00:07:32.840
So, Oops, I'm doing something crazy.

117
00:07:32.840 --> 00:07:35.415
So, what is the thing that
we wanna pass the list?

118
00:07:39.593 --> 00:07:40.761
You guys remember?
&gt;&gt; The array.

119
00:07:40.761 --> 00:07:43.986
&gt;&gt; The array, and
then what is our callback function?

120
00:07:49.479 --> 00:07:53.279
So, we have our value, index and list.

121
00:07:57.268 --> 00:07:57.768
So, what do we wanna do?

122
00:08:03.338 --> 00:08:05.421
You wanna check if the callback is true,
right?

123
00:08:09.247 --> 00:08:13.433
So, really we can just pop this in
here and change it a little bit.

124
00:08:13.433 --> 00:08:22.590
So if the callback, Is true storage.push.

125
00:08:26.567 --> 00:08:29.431
You can call it val,
sometimes I like to call this item.

126
00:08:33.098 --> 00:08:38.034
Cuz it's like an item in an array and
we'll get rid of this guy.

127
00:08:42.039 --> 00:08:42.539
Cool.

128
00:08:44.612 --> 00:08:50.580
And then if you wanna keep,
Making it smaller, we can remove that.

129
00:08:50.580 --> 00:08:52.598
We wanna keep making it smaller,

130
00:08:52.598 --> 00:08:55.778
we can just put this all on
one line with no brackets.

131
00:09:01.384 --> 00:09:04.281
There's probably more ways we can
shrink this, but we'll stop there.

