WEBVTT

1
00:00:00.149 --> 00:00:01.553
How'd it go guys?

2
00:00:01.553 --> 00:00:05.806
&gt;&gt; I think I just don't understand
exactly what you're looking for.

3
00:00:08.445 --> 00:00:09.341
&gt;&gt; I hear you.

4
00:00:09.341 --> 00:00:16.472
&gt;&gt; Were you trying to get the actual
color strings not the suspect objects?

5
00:00:16.472 --> 00:00:20.312
&gt;&gt; Right, yeah, no,

6
00:00:20.312 --> 00:00:24.469
so, Let me rewrite this exercise.

7
00:00:24.469 --> 00:00:29.224
So destructure, this nested data
structure into two variables.

8
00:00:29.224 --> 00:00:31.652
One variable should
have the string red and

9
00:00:31.652 --> 00:00:34.496
the next variable should
have the string orange.

10
00:00:34.496 --> 00:00:36.367
Did anyone do that?

11
00:00:36.367 --> 00:00:37.687
Okay,
&gt;&gt; I think so.

12
00:00:37.687 --> 00:00:38.654
&gt;&gt; You think so.

13
00:00:38.654 --> 00:00:39.815
[LAUGH]
&gt;&gt; Yeah.

14
00:00:39.815 --> 00:00:40.950
&gt;&gt; No worries.

15
00:00:40.950 --> 00:00:41.632
All right.

16
00:00:45.167 --> 00:00:46.519
Should we try it out.

17
00:00:48.397 --> 00:00:49.251
All right.

18
00:00:57.299 --> 00:00:58.913
So take this tab.

19
00:00:58.913 --> 00:01:01.757
&gt;&gt; Yes, so what I did is I did const.

20
00:01:01.757 --> 00:01:02.764
&gt;&gt; Okay.

21
00:01:02.764 --> 00:01:07.405
&gt;&gt; FirstColor, =

22
00:01:07.405 --> 00:01:17.405
game.suspects[0].color.

23
00:01:22.418 --> 00:01:28.210
And then the same thing for a second
color but just change the 0 to a 1.

24
00:01:28.210 --> 00:01:33.251
&gt;&gt; Got it, okay, so
you're just using the bracket notation.

25
00:01:33.251 --> 00:01:36.657
Okay, so this is the task, but

26
00:01:36.657 --> 00:01:41.244
let's do this task with destructuring,

27
00:01:41.244 --> 00:01:45.318
which is saves us from writing this.

28
00:01:45.318 --> 00:01:47.263
Did anyone get there?

29
00:01:47.263 --> 00:01:48.353
You did?

30
00:01:48.353 --> 00:01:49.242
&gt;&gt; I think so.

31
00:01:49.242 --> 00:01:51.208
[COUGH]
&gt;&gt; Let's see what you got.

32
00:01:51.208 --> 00:01:56.972
&gt;&gt; So var [color1, color2].

33
00:01:59.217 --> 00:02:02.212
Bracket not, I'm sorry.

34
00:02:05.340 --> 00:02:06.962
&gt;&gt; The-
&gt;&gt; Curly bracket?

35
00:02:06.962 --> 00:02:09.157
Not curly bracket just straight bracket.

36
00:02:09.157 --> 00:02:11.470
&gt;&gt; Okay.

37
00:02:14.996 --> 00:02:22.619
&gt;&gt; = [suspects[0].color,

38
00:02:22.619 --> 00:02:29.396
suspects[1].color end

39
00:02:29.396 --> 00:02:33.917
with a semicolon.

40
00:02:37.155 --> 00:02:37.731
&gt;&gt; Cool.

41
00:02:39.133 --> 00:02:41.424
What do you guys think,
is that gonna do it?

42
00:02:41.424 --> 00:02:43.154
&gt;&gt; Yes.

43
00:02:43.154 --> 00:02:49.388
&gt;&gt; But what just normal not the curly
brackets though around the outer, yeah.

44
00:02:49.388 --> 00:02:51.715
&gt;&gt; Okay, like this.

45
00:02:51.715 --> 00:02:53.177
Cool, cuz it's an array.

46
00:02:55.842 --> 00:02:59.966
All right,
did anyone do it a different way?

47
00:02:59.966 --> 00:03:04.566
So there is also this way where

48
00:03:04.566 --> 00:03:09.513
you, Do,

49
00:03:27.656 --> 00:03:36.063
Color, so that's another way of doing it.

50
00:03:36.063 --> 00:03:41.178
So then it's assigning orange

51
00:03:41.178 --> 00:03:47.675
to firstColor and red to secondColor.

52
00:03:47.675 --> 00:03:51.479
So as you can see,
there are a few ways of doing it.

53
00:03:51.479 --> 00:03:56.695
&gt;&gt; Basically so the I see what you
just did in line 16 there is you made

54
00:03:56.695 --> 00:04:01.831
a variable firstColor and
that lined up with the color property.

55
00:04:01.831 --> 00:04:06.866
And so I'm curious then why it
feels like basically if you're

56
00:04:06.866 --> 00:04:12.288
assigning this value to the property or
to the variable firstColor.

57
00:04:12.288 --> 00:04:16.311
Usually that's on the left, how did
that kinda work their in Noodl look,

58
00:04:16.311 --> 00:04:17.250
&gt;&gt; Yeah.

59
00:04:17.250 --> 00:04:22.462
&gt;&gt; For the named property color and
then gave a valid firstColor?

60
00:04:22.462 --> 00:04:24.993
&gt;&gt; Yeah, so how it works under the hood?

61
00:04:24.993 --> 00:04:32.811
I'm not quite sure, but, It's just
backwards then when you would expect.

62
00:04:35.630 --> 00:04:36.407
Yeah.

63
00:04:36.407 --> 00:04:41.725
&gt;&gt; Is it kinda like if you were to try and
read that in English you'd say,

64
00:04:41.725 --> 00:04:47.153
for the first color property we find,
call that firstColor and make-

65
00:04:47.153 --> 00:04:52.764
&gt;&gt; Which is the first index of the array.

66
00:04:52.764 --> 00:04:55.624
&gt;&gt; And so each index of the array
is with the new kinda object like

67
00:04:55.624 --> 00:04:57.769
they were doing there
with the secondColor.

68
00:04:57.769 --> 00:04:58.926
&gt;&gt; Yeah, and so

69
00:04:58.926 --> 00:05:04.620
if we wanted to do something
a little simpler to draw a parallel.

70
00:05:06.969 --> 00:05:08.219
We could do this.

71
00:05:13.323 --> 00:05:18.400
So this is similar to sorry I
should actually not do that.

72
00:05:21.987 --> 00:05:23.335
&gt;&gt; In the bracket.

73
00:05:27.486 --> 00:05:31.016
So that's what I did and
that gives you not just the color but

74
00:05:31.016 --> 00:05:33.710
the whole object with the name and
the color.

75
00:05:33.710 --> 00:05:38.306
&gt;&gt; Yeah, but as you can see
that this is just specifying

76
00:05:38.306 --> 00:05:43.123
a little deeper in that
nested data structure, yeah.

77
00:05:45.140 --> 00:05:46.952
It's a little bit of a mind bender.

78
00:05:48.856 --> 00:05:51.222
&gt;&gt; So
you might be about to go into this then.

79
00:05:51.222 --> 00:05:55.918
But is there a way where we
can do that without knowing

80
00:05:55.918 --> 00:05:58.812
how many objects we have total?

81
00:05:58.812 --> 00:06:00.497
&gt;&gt; How nested it is?

82
00:06:00.497 --> 00:06:06.233
&gt;&gt; Well, if we were to add on
several suspects to that list.

83
00:06:06.233 --> 00:06:12.378
&gt;&gt; Directly in the destructuring notation,
I don't think you can do that.

84
00:06:12.378 --> 00:06:16.567
You can use a spread operator and turn
it into an array or something like that,

85
00:06:16.567 --> 00:06:18.831
like the remainder turn it into an array.

86
00:06:18.831 --> 00:06:21.800
But that's not exactly
answering your question.

