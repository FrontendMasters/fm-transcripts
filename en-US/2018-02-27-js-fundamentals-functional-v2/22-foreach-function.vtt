WEBVTT

1
00:00:00.280 --> 00:00:05.040
&gt;&gt; Bianca Gandolfo: Now I've add each so
each, I'm using underscore each here for

2
00:00:05.040 --> 00:00:10.810
this example because we're going to
implement underscore style each later, and

3
00:00:10.810 --> 00:00:16.610
we're going to get to that next, here.

4
00:00:16.610 --> 00:00:18.815
Let me just show you an example of what
happened and talk a little bit about each.

5
00:00:18.815 --> 00:00:23.350
So each takes two arguments.

6
00:00:23.350 --> 00:00:27.170
First thing is a list, and
the second thing is the callback function.

7
00:00:27.170 --> 00:00:29.230
Also we call this the iterator function.

8
00:00:29.230 --> 00:00:33.568
And we call it the iterator function
because iterator is related

9
00:00:33.568 --> 00:00:36.150
to things that can be looped through.

10
00:00:36.150 --> 00:00:43.553
And so arrays, we loop through arrays,
we call, this would be the interatee,

11
00:00:43.553 --> 00:00:49.762
the thing that is being iterated,
and this is the iterator.

12
00:00:49.762 --> 00:00:53.682
But anyway, I think it's simpler
to think of, this is the list,

13
00:00:53.682 --> 00:00:58.911
this is the callback function, it's gonna
be called on each item on this list, yeah?

14
00:00:58.911 --> 00:01:05.523
And so, suspects, the very first
loop that it calls is gonna be Ms.

15
00:01:05.523 --> 00:01:11.210
Scarlett, and
it's gonna be passed into this function.

16
00:01:11.210 --> 00:01:14.870
So name would then be Ms. Scarlet, right?

17
00:01:14.870 --> 00:01:19.000
And then it's gonna keep doing this,
same thing as before,

18
00:01:19.000 --> 00:01:20.740
I kind of changed the naming there,
but same idea.

19
00:01:21.974 --> 00:01:24.420
And the second, it will do the same
thing with Colonel Mustard.

20
00:01:24.420 --> 00:01:25.640
Name will be Colonel Mustard.

21
00:01:25.640 --> 00:01:28.670
And we do some stuff there.

22
00:01:28.670 --> 00:01:33.561
And it will do that all
the way through until it

23
00:01:33.561 --> 00:01:38.330
reaches the end of our array, cool?

24
00:01:38.330 --> 00:01:39.759
Any questions about how this works?

25
00:01:43.740 --> 00:01:45.930
&gt;&gt; Bianca Gandolfo: No, okay.

26
00:01:45.930 --> 00:01:48.770
And there it is again when we
consolidate it onto one line.

27
00:01:52.637 --> 00:01:54.837
&gt;&gt; Bianca Gandolfo: Questions?

28
00:01:54.837 --> 00:01:57.440
Comments?

29
00:01:57.440 --> 00:01:59.140
Opinions about this version of _.each?

30
00:01:59.140 --> 00:02:00.860
Have you guys used the _.each before?

31
00:02:02.000 --> 00:02:03.780
Now have you guys used Native forEach?

32
00:02:05.810 --> 00:02:08.110
&gt;&gt; Bianca Gandolfo: No, okay.

33
00:02:08.110 --> 00:02:09.450
So we have a mixed bag awesome.

34
00:02:10.620 --> 00:02:18.230
So this is our very first kinda of
functional utility, I say kinda of because

35
00:02:18.230 --> 00:02:21.620
people who are really into functional
programing would say that it's not.

36
00:02:21.620 --> 00:02:26.380
Especially underscore's version of it but
who's counting?

37
00:02:26.380 --> 00:02:31.929
But more or
less it's the same idea, right?

38
00:02:31.929 --> 00:02:37.940
We're kind of abstracting
a loop into a function.

39
00:02:37.940 --> 00:02:41.730
Right, so instead of doing our four loop
which we've been talking about for like,

40
00:02:41.730 --> 00:02:43.340
I don't know, an hour now.

41
00:02:44.460 --> 00:02:46.470
We're using each, and each is a function.

42
00:02:46.470 --> 00:02:52.620
And the reason we want to do that is
because it prevents errors really.

43
00:02:52.620 --> 00:02:54.121
And it's more readable, right?

44
00:02:54.121 --> 00:02:55.290
Because it's really clear.

45
00:02:55.290 --> 00:03:01.032
We can say forEach of this data structure,

46
00:03:01.032 --> 00:03:03.750
do a thing, right?

47
00:03:03.750 --> 00:03:10.190
It's much more readable than, for
example, all of these var i equals etc.

48
00:03:10.190 --> 00:03:11.620
If you say that that's less than and

49
00:03:11.620 --> 00:03:15.070
equal to here,
that can give you an off by one error.

50
00:03:15.070 --> 00:03:19.188
There's a lot of things that can go wrong,
so each is really awesome.

51
00:03:19.188 --> 00:03:24.280
We have forEach that comes for free.

52
00:03:24.280 --> 00:03:29.224
The reason that we're implementing
_.each is because if you notice,

53
00:03:29.224 --> 00:03:32.708
forEach, the way it works
is you have an array, and

54
00:03:32.708 --> 00:03:36.130
then you say .foreach and
you pass it a function.

55
00:03:38.250 --> 00:03:43.088
&gt;&gt; Bianca Gandolfo: It's a lot harder
to write than just passing that as

56
00:03:43.088 --> 00:03:44.670
two arguments.

57
00:03:45.810 --> 00:03:48.060
Cuz once we have to put this dot for

58
00:03:48.060 --> 00:03:51.690
each situation,
means that it's a method on the array.

59
00:03:52.690 --> 00:03:56.110
And for it to be a method on array,
we have to get into prototypes and object

60
00:03:56.110 --> 00:04:01.120
oriented stuff, which I all ready said
this is beyond the scope of this course.

61
00:04:01.120 --> 00:04:08.400
That's why we're not doing this version,
we're passing the arguments.

62
00:04:08.400 --> 00:04:14.556
You're welcome to do it if you're
familiar with how methods work,

63
00:04:14.556 --> 00:04:18.552
and inheritance works and stuff like that,

64
00:04:18.552 --> 00:04:24.060
it could be fun to implement
your own array method like this.

65
00:04:24.060 --> 00:04:25.690
But we won't be doing that.

66
00:04:25.690 --> 00:04:28.820
But we could talk about it after,
I'm happy to chit chat.

67
00:04:28.820 --> 00:04:32.280
Okay, cool, so

68
00:04:32.280 --> 00:04:37.340
let's see, where did we leave off last?

69
00:04:37.340 --> 00:04:43.840
&gt;&gt; Bianca Gandolfo: You guys
don't remember who talked last?

70
00:04:44.900 --> 00:04:46.120
Was it you?

71
00:04:46.120 --> 00:04:46.950
Was it you?

72
00:04:46.950 --> 00:04:48.450
It was you guys, okay.

73
00:04:48.450 --> 00:04:50.090
This section over here.

74
00:04:52.290 --> 00:04:55.540
What does each do?

75
00:04:55.540 --> 00:04:56.580
What is each useful for?

76
00:04:59.090 --> 00:05:00.410
&gt;&gt; Speaker 2: Looping through lists?

77
00:05:01.520 --> 00:05:03.220
&gt;&gt; Bianca Gandolfo: Yeah, absolutely.

78
00:05:04.490 --> 00:05:08.000
And over here, whats the difference
between forEach and _.each?

79
00:05:09.747 --> 00:05:11.798
&gt;&gt; Speaker 2: Readability.

80
00:05:11.798 --> 00:05:16.990
&gt;&gt; Bianca Gandolfo: It
does read different.

81
00:05:16.990 --> 00:05:18.310
It does read different.

82
00:05:18.310 --> 00:05:25.110
People would say, though, that well
&gt;&gt; Bianca Gandolfo: I'm

83
00:05:25.110 --> 00:05:28.369
gonna take that back.

84
00:05:29.390 --> 00:05:34.010
I think its controversial which one
is more readable, I'll say that.

85
00:05:34.010 --> 00:05:37.716
&gt;&gt; Bianca Gandolfo: Yes, but
they do read differently.

86
00:05:37.716 --> 00:05:42.520
&gt;&gt; Speaker 2: You said forEach is called
on the array itself as opposed to

87
00:05:42.520 --> 00:05:47.148
taking the array as an argument
&gt;&gt; Bianca Gandolfo: Yeah exactly, exactly,

88
00:05:47.148 --> 00:05:49.600
so what is this thing?

89
00:05:51.388 --> 00:05:54.968
&gt;&gt; Bianca Gandolfo: Here, these lovely
friends, this is like the gray area,

90
00:05:54.968 --> 00:05:58.718
you guys are all wearing gray sweaters,
gray sweater club.

91
00:05:58.718 --> 00:06:04.320
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Speaker 4: The underscore.

92
00:06:04.320 --> 00:06:05.760
&gt;&gt; Bianca Gandolfo: What
is the underscore?

93
00:06:05.760 --> 00:06:08.570
&gt;&gt; Speaker 4: Is that one of
the libraries you asked in the beginning?

94
00:06:08.570 --> 00:06:09.729
&gt;&gt; Bianca Gandolfo: Yeah, it's the library

95
00:06:11.170 --> 00:06:14.160
Have any of you all used
the underscore library?

96
00:06:15.430 --> 00:06:15.960
You have?

97
00:06:15.960 --> 00:06:17.102
&gt;&gt; Speaker 4: I've used Lodash.

98
00:06:17.102 --> 00:06:18.240
&gt;&gt; Bianca Gandolfo: Yeah, you used Lodash?

99
00:06:18.240 --> 00:06:19.040
Okay, yeah.

100
00:06:19.040 --> 00:06:20.080
Similar thing, same.

101
00:06:20.080 --> 00:06:25.470
Almost exactly the same
actually if you ask me, really.

102
00:06:25.470 --> 00:06:29.420
So if I said type of underscore.

103
00:06:32.558 --> 00:06:34.150
&gt;&gt; Speaker 4: Objects?

104
00:06:34.150 --> 00:06:35.540
&gt;&gt; Bianca Gandolfo: Is an object.

105
00:06:35.540 --> 00:06:36.160
How do we know it's an object?

106
00:06:36.160 --> 00:06:39.790
&gt;&gt; Speaker 4: Cuz there's a dot.

107
00:06:39.790 --> 00:06:41.650
&gt;&gt; Bianca Gandolfo: It has a dot, yes.

108
00:06:41.650 --> 00:06:43.910
Yes, he remembers.

109
00:06:43.910 --> 00:06:44.820
Makes me so happy.

110
00:06:46.522 --> 00:06:53.540
&gt;&gt; Bianca Gandolfo: Yeah, so somewhere and
underscore's documentation it just says,

111
00:06:53.540 --> 00:07:01.080
var underscore equals an object and
it has each, in it or something.

112
00:07:01.080 --> 00:07:02.360
Just a function that takes stuff.

113
00:07:02.360 --> 00:07:05.638
So that's an underscore that's kinda
confusing for people sometimes.

114
00:07:07.950 --> 00:07:12.306
&gt;&gt; Bianca Gandolfo: The point I like
to make in this workshop is that,

115
00:07:12.306 --> 00:07:15.283
it's all the same repeated, but

116
00:07:15.283 --> 00:07:20.067
like oddly a little bit different here and
there, and

117
00:07:20.067 --> 00:07:25.400
we take things for granted and
think it's a special thing.

118
00:07:25.400 --> 00:07:28.176
Like J query.
People think the $ sign is a special J

119
00:07:28.176 --> 00:07:32.995
query thing, but really J query is just
var $ sign equals some function that

120
00:07:32.995 --> 00:07:35.050
takes a selector or something.

121
00:07:37.180 --> 00:07:42.530
&gt;&gt; Bianca Gandolfo: And it returns
an object that has J query magic.

122
00:07:44.930 --> 00:07:47.809
Something like that.

123
00:07:49.340 --> 00:07:56.538
&gt;&gt; Bianca Gandolfo: So it's not
anything that you don't already know.

124
00:07:56.538 --> 00:07:58.764
Okay, great, each.

125
00:07:59.872 --> 00:08:05.910
&gt;&gt; Bianca Gandolfo: I
think we exhausted that.

126
00:08:07.230 --> 00:08:09.934
So let's use each.

127
00:08:09.934 --> 00:08:13.840
What is this gonna log?

128
00:08:17.060 --> 00:08:20.510
We made it to the back of the room again.

129
00:08:20.510 --> 00:08:24.620
You're in a group of one, so you get to
answer every single time, unless Marc.

130
00:08:24.620 --> 00:08:26.180
&gt;&gt; Speaker 5: No, I'm good.

131
00:08:26.180 --> 00:08:29.680
What was the question?

132
00:08:29.680 --> 00:08:30.690
&gt;&gt; Bianca Gandolfo: What's
it going to log?

133
00:08:30.690 --> 00:08:31.534
&gt;&gt; Speaker 5: What's it going to log?
&gt;&gt; Bianca Gandolfo: Mm-hm.

134
00:08:35.108 --> 00:08:39.720
&gt;&gt; Speaker 5: It will log in order,
observatory, ballroom, and library.

135
00:08:39.720 --> 00:08:40.220
&gt;&gt; Bianca Gandolfo: Yeah.

136
00:08:41.820 --> 00:08:42.770
&gt;&gt; Bianca Gandolfo: Exactly.

