WEBVTT

1
00:00:00.330 --> 00:00:01.630
Now let's add each.

2
00:00:01.630 --> 00:00:06.618
So each, I'm using _each here for
this example,

3
00:00:06.618 --> 00:00:11.490
because we're gonna
implement underscore style

4
00:00:11.490 --> 00:00:16.363
each later and
we're gonna get to that next here.

5
00:00:16.363 --> 00:00:18.322
Well, let me just show you
an example of what happened,

6
00:00:18.322 --> 00:00:19.370
talk a little bit about each.

7
00:00:20.780 --> 00:00:23.340
So each takes two arguments.

8
00:00:23.340 --> 00:00:24.801
First thing is list.

9
00:00:24.801 --> 00:00:27.170
The second thing is a callback function.

10
00:00:27.170 --> 00:00:29.230
Also we call this the iterator function.

11
00:00:29.230 --> 00:00:34.055
And we call it an iterator function
because iterator is related to things

12
00:00:34.055 --> 00:00:36.640
that can be looped through.

13
00:00:36.640 --> 00:00:43.224
And so arrays, right,
we loop through arrays.

14
00:00:43.224 --> 00:00:47.832
This would be the iteratee,
the thing that is being iterated.

15
00:00:47.832 --> 00:00:49.580
And this is the iterator.

16
00:00:49.580 --> 00:00:51.480
But anyway,
I think it's simpler just to think of it.

17
00:00:51.480 --> 00:00:52.590
This is a list.

18
00:00:52.590 --> 00:00:53.670
This is the callback function.

19
00:00:53.670 --> 00:01:00.879
It's gonna be called on each
item in this list, yeah?

20
00:01:00.879 --> 00:01:06.038
And so suspects, the very first
loop that it calls is gonna be

21
00:01:06.038 --> 00:01:11.210
Miss Scarlet, and
it's gonna be passing to this function.

22
00:01:11.210 --> 00:01:14.689
So name would then be Miss Scarlet, right?

23
00:01:14.689 --> 00:01:18.802
And then it's gonna keep doing this,
same thing as before.

24
00:01:18.802 --> 00:01:21.685
I kinda changed the naming there,
but same idea.

25
00:01:21.685 --> 00:01:24.389
And then second, we'll do the same
thing with Colonel Mustard.

26
00:01:24.389 --> 00:01:30.341
Name would be Colonel Mustard,
and we do some stuff there.

27
00:01:30.341 --> 00:01:38.071
And we'll do that all the way through till
it reaches the end of our array, cool.

28
00:01:38.071 --> 00:01:39.888
Any questions about how this works?

29
00:01:42.962 --> 00:01:48.991
No, okay, and there it is again when
we consolidated it onto one line.

30
00:01:54.366 --> 00:01:58.957
Questions, comments,
opinions about this version of each?

31
00:01:58.957 --> 00:02:01.764
Have you guys used the _each before?

32
00:02:01.764 --> 00:02:03.833
No, have you guys used native foreach?

33
00:02:06.031 --> 00:02:10.361
No, okay, so we have a mixed bag, awesome.

34
00:02:10.361 --> 00:02:16.458
So this is our very first
kind of functional utility.

35
00:02:16.458 --> 00:02:21.058
I say kind of because people who are
really into functional programming would

36
00:02:21.058 --> 00:02:26.027
say that it's not, especially underscores
version of it, but who's counting?

37
00:02:26.027 --> 00:02:27.818
But more or less,
it's the same idea, right?

38
00:02:27.818 --> 00:02:33.011
We have, Instead,

39
00:02:33.011 --> 00:02:38.020
we're kind of abstracting
a loop into a function, right?

40
00:02:38.020 --> 00:02:42.079
So instead of doing our for loop,
which we've been talking about for,

41
00:02:42.079 --> 00:02:46.222
I don't know, an hour now,
we're using each, and each is a function.

42
00:02:46.222 --> 00:02:50.448
And the reason we want to do that
is because it prevents errors,

43
00:02:50.448 --> 00:02:55.097
really, and it's more readable,
right, cuz it's really clear.

44
00:02:55.097 --> 00:03:00.837
We can say for
each of this data structure,

45
00:03:00.837 --> 00:03:03.553
do a thing, right?

46
00:03:03.553 --> 00:03:09.961
It's much more readable than, for
example, all of these, var i equals, etc.

47
00:03:09.961 --> 00:03:12.657
If you say that that's less than and
equal to here,

48
00:03:12.657 --> 00:03:14.861
that can give you an off-by-one error.

49
00:03:14.861 --> 00:03:16.784
There's a lot of things that can go wrong.

50
00:03:16.784 --> 00:03:21.022
So each is really awesome.

51
00:03:21.022 --> 00:03:24.549
We have forEach that comes for free.

52
00:03:24.549 --> 00:03:29.335
The reason that we're implementing
_each is because if you notice,

53
00:03:29.335 --> 00:03:32.821
forEach, the way it works
is you have an array, and

54
00:03:32.821 --> 00:03:36.247
then you say .forEach and
you pass it a function.

55
00:03:38.474 --> 00:03:44.670
It's a lot harder to write than
just passing that as two arguments.

56
00:03:45.810 --> 00:03:50.717
Cuz once we have to put this .forEach
situation means that it's a method

57
00:03:50.717 --> 00:03:51.690
on the array.

58
00:03:52.690 --> 00:03:55.787
And for a method on the array,
we have to get into prototypes and

59
00:03:55.787 --> 00:03:57.015
object oriented stuff,

60
00:03:57.015 --> 00:04:01.110
which I already said when I mentioned
this is beyond the scope of this course.

61
00:04:01.110 --> 00:04:05.767
But just know that that's why we're
not doing this version, and instead,

62
00:04:05.767 --> 00:04:09.495
we're doing a version where
we're passing the arguments.

63
00:04:09.495 --> 00:04:15.785
You're welcome to do it if you're
familiar with how methods work and

64
00:04:15.785 --> 00:04:19.481
inheritance works and stuff like that.

65
00:04:19.481 --> 00:04:24.057
It can be fun to implement your
own array method like this, but

66
00:04:24.057 --> 00:04:25.970
we won't be doing that.

67
00:04:25.970 --> 00:04:29.220
What does each do?

68
00:04:29.220 --> 00:04:30.222
What is each useful for?

69
00:04:32.579 --> 00:04:33.897
&gt;&gt; Looping through lists.

70
00:04:33.897 --> 00:04:37.873
&gt;&gt; Mm-hm, yeah, absolutely.

71
00:04:37.873 --> 00:04:41.781
And over here, what's the difference
between forEach and _each?

72
00:04:46.342 --> 00:04:48.426
&gt;&gt; Readability.

73
00:04:48.426 --> 00:04:52.000
&gt;&gt; It does read different,
it does read different.

74
00:04:52.000 --> 00:04:57.152
People would say, though, that,

75
00:04:57.152 --> 00:05:03.070
well, I'm gonna take that back.

76
00:05:03.070 --> 00:05:05.995
I think it's controversial which one
is more readable, I'll say that.

77
00:05:09.052 --> 00:05:11.420
Yes, but they do read differently.

78
00:05:11.420 --> 00:05:15.782
&gt;&gt; You said forEach is called on
the array itself as opposed to taking

79
00:05:15.782 --> 00:05:17.990
the array as an argument.

80
00:05:17.990 --> 00:05:21.986
&gt;&gt; Yep, exactly, exactly.

81
00:05:21.986 --> 00:05:25.457
So what is this thing here?

82
00:05:25.457 --> 00:05:29.903
This, lovely friends,
this is the gray area.

83
00:05:29.903 --> 00:05:32.605
I guess we're all wearing gray sweaters,
gray sweater club.

84
00:05:32.605 --> 00:05:38.000
&gt;&gt; [LAUGH]
&gt;&gt; The underscore?

85
00:05:38.000 --> 00:05:39.470
&gt;&gt; What is the underscore?

86
00:05:39.470 --> 00:05:42.250
&gt;&gt; Yeah, one of the libraries
you asked at the beginning.

87
00:05:42.250 --> 00:05:44.583
&gt;&gt; Yeah, it's a library.

88
00:05:44.583 --> 00:05:48.808
Have any of you all used
the underscore library?

89
00:05:48.808 --> 00:05:49.426
You have?

90
00:05:49.426 --> 00:05:50.940
&gt;&gt; I used low dash.

91
00:05:50.940 --> 00:05:51.920
&gt;&gt; Yeah, you used low dash?

92
00:05:51.920 --> 00:05:54.655
Okay, yeah, similar thing, same,

93
00:05:54.655 --> 00:05:58.934
almost exactly the same actually,
if you asked me really.

94
00:05:58.934 --> 00:06:07.830
So if I said, type of underscore,
&gt;&gt; Objects?

95
00:06:07.830 --> 00:06:09.220
&gt;&gt; It's an object.

96
00:06:09.220 --> 00:06:10.499
How do we know it's an object?

97
00:06:12.501 --> 00:06:13.301
&gt;&gt; It has a dot.

98
00:06:13.301 --> 00:06:20.427
&gt;&gt; It has a dot, yes,
yes he remembers, makes me so happy.

99
00:06:20.427 --> 00:06:27.004
Yeah, so
somewhere in underscores documentation,

100
00:06:27.004 --> 00:06:30.956
it just says var _ = an object.

101
00:06:30.956 --> 00:06:34.340
And then it has each in there or
something,

102
00:06:34.340 --> 00:06:37.349
which is a function that takes stuff.

103
00:06:37.349 --> 00:06:39.639
So that's underscore, that's kinda
confusing for people sometimes.

104
00:06:41.882 --> 00:06:45.873
The point I like to make in this workshop,

105
00:06:45.873 --> 00:06:49.750
is that it's all the same repeated, and

106
00:06:49.750 --> 00:06:55.012
just like oddly a little bit
different here and there.

107
00:06:55.012 --> 00:07:00.474
And we kinda take things for granted and
think it's a special thing like jQuery.

108
00:07:00.474 --> 00:07:03.106
People think the dollar sign
is a special jQuery thing.

109
00:07:03.106 --> 00:07:07.549
But really,
jQuery is just like var $ = some function

110
00:07:07.549 --> 00:07:10.551
that takes a selector or something.

111
00:07:10.551 --> 00:07:16.421
And it returns an object
that has jQuery magic,

112
00:07:16.421 --> 00:07:19.223
something like that.

113
00:07:22.889 --> 00:07:30.322
Yeah, so it's not anything
that you don't already know.

114
00:07:32.021 --> 00:07:34.982
Okay, great, each.

115
00:07:38.016 --> 00:07:40.662
I think we exhausted that.

116
00:07:40.662 --> 00:07:43.364
So let's use each.

117
00:07:43.364 --> 00:07:47.565
What is this gonna log?

118
00:07:50.515 --> 00:07:53.866
We made it to the back of the room again.

119
00:07:53.866 --> 00:07:58.103
You're in a group of one, so you get to
answer every single time, unless Mark.

120
00:07:58.103 --> 00:07:59.292
&gt;&gt; No, what was the question?

121
00:07:59.292 --> 00:08:02.142
&gt;&gt; What's this gonna log?

122
00:08:02.142 --> 00:08:03.195
What's it gonna log?

123
00:08:03.195 --> 00:08:04.084
&gt;&gt; What's it going to log?

124
00:08:04.084 --> 00:08:05.204
&gt;&gt; Mm-hm.

125
00:08:08.672 --> 00:08:13.174
&gt;&gt; It will log in order observatory,
ballroom, and library.

126
00:08:13.174 --> 00:08:14.049
&gt;&gt; Yep.

127
00:08:15.947 --> 00:08:16.450
Exactly.

