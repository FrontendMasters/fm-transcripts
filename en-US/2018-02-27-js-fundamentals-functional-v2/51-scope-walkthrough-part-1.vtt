WEBVTT

1
00:00:00.270 --> 00:00:06.483
Pointer is that you get
a little clue here.

2
00:00:06.483 --> 00:00:10.802
So these represent every rule,
and we'll test it out.

3
00:00:10.802 --> 00:00:17.000
We'll try to predict what ACTUAL is gonna
be, in each one, so here this one's done.

4
00:00:17.000 --> 00:00:19.943
I'll walk through this one, and then you
guys can walk through the next one, okay?

5
00:00:21.903 --> 00:00:24.865
So, once this function is executed,

6
00:00:24.865 --> 00:00:30.490
we're creating an fn variable and
we're saving a function.

7
00:00:30.490 --> 00:00:33.919
We're skipping over the body of the
function, however we're invoking it here

8
00:00:33.919 --> 00:00:36.990
so that means we jump into
the body of the function.

9
00:00:36.990 --> 00:00:41.671
We are creating a variable called name and
we're assigning it to the string inner.

10
00:00:41.671 --> 00:00:44.409
We're assigning ACTUAL,

11
00:00:44.409 --> 00:00:49.416
which is a variable in our parent scope,
to name.

12
00:00:49.416 --> 00:00:54.545
So once this is done executing we
jump immediately to this next line.

13
00:00:54.545 --> 00:01:01.684
ACTUAL equals inner because ACTUAL
is available to both this scope and,

14
00:01:01.684 --> 00:01:06.730
this outer scope,
because it's a parent of both.

15
00:01:06.730 --> 00:01:08.578
So ACTUAL is equal to inner,

16
00:01:08.578 --> 00:01:13.210
and if we really wanna get fancy with
this expect, is being evaluated.

17
00:01:13.210 --> 00:01:17.922
It's being called and it's gonna go
into the innards of our testing library.

18
00:01:17.922 --> 00:01:19.581
And it's gonna return,

19
00:01:19.581 --> 00:01:24.011
something that will be evaluated
against whatever this value is.

20
00:01:27.493 --> 00:01:33.933
Cuz you can also expect this to be false,
or to be a function, stuff like that.

21
00:01:36.658 --> 00:01:40.901
This rule is called a function has
access to its own local variables, so

22
00:01:40.901 --> 00:01:49.704
when we say own local, that means it's
in the same function block, Cool?

23
00:01:52.329 --> 00:01:53.373
All right,

24
00:01:55.375 --> 00:02:00.121
The next one is inputs to a function
are treated as local scoped variables.

25
00:02:00.121 --> 00:02:01.141
Who wants to go first?

26
00:02:03.439 --> 00:02:09.793
Not all at once guys I know
this is exciting stuff, Anyone?

27
00:02:09.793 --> 00:02:13.691
You could just raise your hand,
okay Michael.

28
00:02:13.691 --> 00:02:14.829
&gt;&gt; True.

29
00:02:14.829 --> 00:02:19.024
&gt;&gt; No no,
you have to run the code just like I did.

30
00:02:19.024 --> 00:02:19.990
&gt;&gt; I have to talk about it?

31
00:02:19.990 --> 00:02:22.543
Okay,-
&gt;&gt; So

32
00:02:22.543 --> 00:02:24.672
the very first thing that's gonna happen.

33
00:02:24.672 --> 00:02:28.279
&gt;&gt; Okay, we create the function fn, and

34
00:02:28.279 --> 00:02:33.031
pass it the argument name,
or the variable name.

35
00:02:33.031 --> 00:02:35.035
&gt;&gt; Yeah we're gonna create a variable, and

36
00:02:35.035 --> 00:02:37.275
we're gonna assign it to a function,
right?

37
00:02:37.275 --> 00:02:38.338
&gt;&gt; Yeah.

38
00:02:38.338 --> 00:02:42.524
&gt;&gt; Okay, cool what's the next
thing that happens Ammie?

39
00:02:42.524 --> 00:02:45.484
&gt;&gt; And then we're gonna call
the function and pass it inner.

40
00:02:48.529 --> 00:02:51.409
&gt;&gt; And then Abdi, what happens next?

41
00:02:51.409 --> 00:02:55.791
&gt;&gt; [COUGH] We immediately run to, expect.

42
00:02:55.791 --> 00:02:58.106
&gt;&gt; Well we call the function,
what happens then?

43
00:02:58.106 --> 00:02:59.698
You go into the body of the function,
right?

44
00:02:59.698 --> 00:03:02.623
&gt;&gt; Sorry yeah yeah yeah sorry yeah so

45
00:03:02.623 --> 00:03:08.688
we go inside the body of the function and
we assign inner to, ACTUAL.

46
00:03:08.688 --> 00:03:10.579
&gt;&gt; And where does inner come from?

47
00:03:10.579 --> 00:03:13.460
&gt;&gt; The argument, parameters.

48
00:03:13.460 --> 00:03:14.247
&gt;&gt; Yeah.

49
00:03:14.247 --> 00:03:17.748
&gt;&gt; Yeah the argument got passed in
which didn't get reassigned to ACTUAL.

50
00:03:17.748 --> 00:03:21.079
&gt;&gt; Yep, and then Chris what happens next?

51
00:03:21.079 --> 00:03:26.383
&gt;&gt; And
then it falls down to expect ACTUAL,

52
00:03:26.383 --> 00:03:29.667
equals inner to be true.

53
00:03:32.395 --> 00:03:37.090
&gt;&gt; Cool, Any questions about this?

54
00:03:37.090 --> 00:03:40.036
This is what we would expect, right?

55
00:03:40.036 --> 00:03:42.312
&gt;&gt; I was thinking that.

56
00:03:42.312 --> 00:03:47.815
&gt;&gt; [LAUGH] Yeah the question
marks mean fill in blank.

57
00:03:49.897 --> 00:03:52.577
Cool okay Eddie do you
wanna try the next one?

58
00:03:52.577 --> 00:03:56.268
So this rule is blocks scope,

59
00:03:56.268 --> 00:04:01.149
block scope, can be created with let.

60
00:04:02.815 --> 00:04:08.143
&gt;&gt; So line 31 function is created,

61
00:04:08.143 --> 00:04:10.905
with the name fn.

62
00:04:10.905 --> 00:04:13.509
&gt;&gt; And then Cameron.

63
00:04:13.509 --> 00:04:17.086
&gt;&gt; The variable where is created and
assigned-

64
00:04:17.086 --> 00:04:18.616
&gt;&gt; Actually we don't enter into-

65
00:04:18.616 --> 00:04:21.224
&gt;&gt; Right, call the function.

66
00:04:21.224 --> 00:04:25.799
&gt;&gt; Yeah we go down the next line and
then we call the function and then, Ben.

67
00:04:25.799 --> 00:04:30.533
&gt;&gt; Inside the function,
we declare a variable where,

68
00:04:30.533 --> 00:04:33.123
we set it to the value outer.

69
00:04:33.123 --> 00:04:35.573
&gt;&gt; Okay, and then Dan.

70
00:04:40.208 --> 00:04:43.775
&gt;&gt; [COUGH]
&gt;&gt; We create a new scope and,

71
00:04:43.775 --> 00:04:48.047
another variable named where called inner.

72
00:04:50.215 --> 00:04:53.098
&gt;&gt; So we create a variable with
the keyword let with inner, and

73
00:04:53.098 --> 00:04:55.124
we talked about this a little bit before.

74
00:04:55.124 --> 00:05:00.199
But let creates block scope, and
our block is anything with two brackets.

75
00:05:00.199 --> 00:05:03.349
So I've been talking about
function blocks and,

76
00:05:03.349 --> 00:05:08.385
that's really what most of JavaScript
scopes is about, is function scoping.

77
00:05:08.385 --> 00:05:14.399
But, with the keyword let in ES6
we also have, block scope as well.

78
00:05:14.399 --> 00:05:18.900
And people coming from other languages
should be pretty familiar with block

79
00:05:18.900 --> 00:05:19.541
scope,.

80
00:05:19.541 --> 00:05:24.062
Or other languages with block scope,
it's pretty common, okay.

81
00:05:24.062 --> 00:05:30.087
&gt;&gt; So, ACTUAL is assigned the value where,

82
00:05:30.087 --> 00:05:35.089
which in this case would be outer.

83
00:05:35.089 --> 00:05:39.348
&gt;&gt; Okay, and then I have an outer.

84
00:05:39.348 --> 00:05:44.956
&gt;&gt; It goes down to the line 39,
and the question marks become

85
00:05:44.956 --> 00:05:50.576
I think it's outer because inner
would be out of the scope.

86
00:05:50.576 --> 00:05:53.786
&gt;&gt; Yep, exactly, Cool,

87
00:05:53.786 --> 00:05:58.773
and if this was var,
How would that change?

88
00:06:00.353 --> 00:06:02.717
&gt;&gt; No longer be a block.

89
00:06:02.717 --> 00:06:03.343
&gt;&gt; What's that?

90
00:06:03.343 --> 00:06:04.618
&gt;&gt; It would no longer be a block.

91
00:06:04.618 --> 00:06:05.176
&gt;&gt; Yeah.
&gt;&gt; So

92
00:06:05.176 --> 00:06:08.478
you would just rewrite the same variable.

93
00:06:08.478 --> 00:06:14.856
&gt;&gt; So it would be actually be inner,
Cool, questions there?

94
00:06:14.856 --> 00:06:18.228
&gt;&gt; Is it just let in the S6
that creates its own block or

95
00:06:18.228 --> 00:06:21.058
are there other verbs
that do that as well?

96
00:06:21.058 --> 00:06:22.441
&gt;&gt; I think it's just let.

97
00:06:22.441 --> 00:06:24.673
&gt;&gt; Okay.
&gt;&gt; Yeah.

98
00:06:26.551 --> 00:06:32.731
&gt;&gt; [COUGH] And because it's withing
a block, inner's not getting reset,

99
00:06:32.731 --> 00:06:38.835
or inner's just specific to-
&gt;&gt; It's just specific to here yeah,

100
00:06:38.835 --> 00:06:44.267
exactly so outside of this,
it looks in its own scope.

101
00:06:44.267 --> 00:06:50.024
If there's a value that matches
that variable, and we have it here.

102
00:06:50.024 --> 00:06:54.099
Well let's look at ACTUAL so
ACTUAL we'll first look in this scope and

103
00:06:54.099 --> 00:06:57.705
this function scope and say,
is there an actual around here?

104
00:06:57.705 --> 00:06:58.625
And no there isn't, right?

105
00:06:58.625 --> 00:07:02.560
There's no defined actual, and
then we'll look up in the next scope,

106
00:07:02.560 --> 00:07:03.944
it's not there either.

107
00:07:03.944 --> 00:07:07.815
And then we'll look up in the next scope,
where it lives, and

108
00:07:07.815 --> 00:07:11.693
it will find that and
it will realize that, it's undefined.

109
00:07:11.693 --> 00:07:16.135
&gt;&gt; So does inner, another way or
get created in memory of that scope, and

110
00:07:16.135 --> 00:07:19.161
then when you exit the scope
does it disappear?

111
00:07:19.161 --> 00:07:21.446
&gt;&gt; Yep, And

112
00:07:21.446 --> 00:07:27.030
also some funny things happen with scoping
as well, when Chrome optimizes your code.

113
00:07:27.030 --> 00:07:32.346
So if you're going through the debugger,
and you're trying to access

114
00:07:32.346 --> 00:07:37.851
variables that would be accessible
in that scope, does that make sense?

115
00:07:37.851 --> 00:07:41.922
So it should be accessible, but
in the Chrome debugger tools they aren't.

116
00:07:41.922 --> 00:07:45.608
Because there's an optimization step where

117
00:07:45.608 --> 00:07:49.686
if you're not actually
referencing that value.

118
00:07:49.686 --> 00:07:54.513
It just gets garbage collected,
it doesn't exist there.

119
00:07:54.513 --> 00:07:59.361
So that's just one thing to keep in mind,
we'll look at that in depth later, okay?

120
00:07:59.361 --> 00:08:05.680
Where did we leave off, okay, so line 42.

121
00:08:05.680 --> 00:08:10.478
Is a function has access to the variables
contained within the same scope,

122
00:08:10.478 --> 00:08:12.471
that function was created in.

123
00:08:12.471 --> 00:08:15.287
All right, so what did we leave off?

124
00:08:15.287 --> 00:08:16.107
Is it your turn Josh?

125
00:08:19.691 --> 00:08:21.187
&gt;&gt; So on,-
&gt;&gt; Line 43.

126
00:08:21.187 --> 00:08:26.377
&gt;&gt; On line 43 we declare a variable,

127
00:08:26.377 --> 00:08:29.320
and set it to outer.

128
00:08:29.320 --> 00:08:34.903
&gt;&gt; Yep, Ausmere.
&gt;&gt; So we have the function declaration fn.

129
00:08:34.903 --> 00:08:38.739
&gt;&gt; Create a function there,
save it in, fn.

130
00:08:40.078 --> 00:08:44.066
&gt;&gt; All right, in the function
ACTUAL is assigned to name.

131
00:08:44.066 --> 00:08:45.529
&gt;&gt; Well first we have to call it.

132
00:08:45.529 --> 00:08:46.677
&gt;&gt; Yeah you gotta call it.

133
00:08:46.677 --> 00:08:49.771
&gt;&gt; Yeah, so then we call the function, and

134
00:08:49.771 --> 00:08:55.515
I'm really picky about that to say no and
then, we'll go back to Michael.

135
00:08:58.673 --> 00:09:01.569
&gt;&gt; So we just did the-
&gt;&gt; We just called the function.

136
00:09:01.569 --> 00:09:05.552
&gt;&gt; Okay so we go into the function itself,

137
00:09:05.552 --> 00:09:09.883
we create a variable called,
&gt;&gt; Where are we creating the variable?

138
00:09:09.883 --> 00:09:11.260
&gt;&gt; Yeah.

139
00:09:11.260 --> 00:09:11.996
&gt;&gt; We're just assigning it.

140
00:09:11.996 --> 00:09:16.401
&gt;&gt; Yeah, we're saying fn to a function.

141
00:09:16.401 --> 00:09:20.051
&gt;&gt; We call the function we
go into the function body.

142
00:09:20.051 --> 00:09:22.307
&gt;&gt; And then we set in ACTUAL to name.

143
00:09:22.307 --> 00:09:25.725
&gt;&gt; Yeah, and what is name?

144
00:09:25.725 --> 00:09:29.099
&gt;&gt; It doesn't sit in its normal scope,
so it looks up to outer.

145
00:09:34.202 --> 00:09:42.873
&gt;&gt; Okay, okay You wanna go next Jimmy?

146
00:09:42.873 --> 00:09:48.464
&gt;&gt; Sure,
we are defining first fn as a function.

147
00:09:50.545 --> 00:09:51.712
&gt;&gt; Yep.

148
00:09:52.994 --> 00:09:56.549
&gt;&gt; Then we jump down to first function,

149
00:09:56.549 --> 00:10:02.176
which then jumps back into
the function we created up top.

150
00:10:02.176 --> 00:10:03.263
&gt;&gt; And then Chris.

151
00:10:03.263 --> 00:10:04.007
&gt;&gt; Yeah.

152
00:10:04.007 --> 00:10:10.263
&gt;&gt; And then we create a variable
local to first function set to inner.

153
00:10:10.263 --> 00:10:12.687
&gt;&gt; Okay, Eddie.

154
00:10:12.687 --> 00:10:20.664
&gt;&gt; [COUGH] So then,
We're at line 56 in the expect.

155
00:10:22.193 --> 00:10:29.303
Okay, and so,
we've gone inside of the expect and,

156
00:10:29.303 --> 00:10:37.371
the function is setting the local
first function to ACTUAL.

157
00:10:41.682 --> 00:10:43.885
&gt;&gt; But it's not being called.

158
00:10:43.885 --> 00:10:45.118
&gt;&gt; It's not?

159
00:10:45.118 --> 00:10:47.059
&gt;&gt; You see it being called?

160
00:10:47.059 --> 00:10:51.815
&gt;&gt; Well so I guess I thought expect
was being called cuz there's the open

161
00:10:51.815 --> 00:10:54.858
parentheses after it, is that incorrect?

162
00:10:54.858 --> 00:10:57.168
&gt;&gt; That's correct expect is being called.

163
00:10:57.168 --> 00:11:00.004
&gt;&gt; But
the function inside of expect is not being

164
00:11:00.004 --> 00:11:02.822
called-
&gt;&gt; Well I'm just saying we should be

165
00:11:02.822 --> 00:11:05.919
mindful of whether or
not it's being called.

166
00:11:05.919 --> 00:11:07.669
&gt;&gt; [LAUGH]
&gt;&gt; We don't visibly

167
00:11:07.669 --> 00:11:09.276
see it being called,
&gt;&gt; Okay.

168
00:11:09.276 --> 00:11:10.172
&gt;&gt; Right?

169
00:11:10.172 --> 00:11:13.032
&gt;&gt; Right.
&gt;&gt; But we can assume that it's

170
00:11:13.032 --> 00:11:17.985
been called in the expect
if this test works, right?

171
00:11:17.985 --> 00:11:18.934
&gt;&gt; I think I get it.

172
00:11:18.934 --> 00:11:20.941
&gt;&gt; So it's not beeing called yet?

173
00:11:20.941 --> 00:11:23.809
&gt;&gt; Well,
my point is is that this is a function,

174
00:11:23.809 --> 00:11:27.738
this is just an anonymous function,
that we're looking at.

175
00:11:27.738 --> 00:11:30.879
And Eddie was just acting like it's for
sure being called but,

176
00:11:30.879 --> 00:11:32.604
technically we don't know that.

177
00:11:32.604 --> 00:11:36.252
Because we don't really know
what to expect, is gonna do.

178
00:11:36.252 --> 00:11:36.828
&gt;&gt; Okay.

179
00:11:36.828 --> 00:11:40.829
&gt;&gt; But, it seems like the way it's set up,
that it's probably being called,

180
00:11:40.829 --> 00:11:42.091
I'm just being picky.

181
00:11:42.091 --> 00:11:45.632
&gt;&gt; [LAUGH]
&gt;&gt; Because we don't know anything

182
00:11:45.632 --> 00:11:47.749
necessarily about the internals to expect.

183
00:11:47.749 --> 00:11:51.252
&gt;&gt; Right, so there was just an assumption
there and I wanted to point out that,

184
00:11:51.252 --> 00:11:52.472
there's an assumption.

185
00:11:52.472 --> 00:11:57.681
That I expect inside of that function
is calling this anonymous function,

186
00:11:57.681 --> 00:12:01.577
but we can't visibly see that right now,
that's all.

187
00:12:01.577 --> 00:12:06.824
That's all it's like the definition
versus invocation thing, okay.

188
00:12:06.824 --> 00:12:10.258
&gt;&gt; So then I could safely
say that function inside of

189
00:12:10.258 --> 00:12:12.111
expect is being defined.

190
00:12:12.111 --> 00:12:13.601
&gt;&gt; Yes.
&gt;&gt; Okay.

191
00:12:13.601 --> 00:12:18.066
&gt;&gt; And then I'll give it to you that yes
it is actually being called into expect,

192
00:12:18.066 --> 00:12:18.624
but yes.

193
00:12:19.946 --> 00:12:24.836
Okay Cameron, So

194
00:12:24.836 --> 00:12:27.623
we're saying here we're
expecting this to throw,

195
00:12:28.763 --> 00:12:34.942
An error, Why?

196
00:12:34.942 --> 00:12:39.525
&gt;&gt; I'm not sure where we're at it's,
to throw next to cover.

197
00:12:39.525 --> 00:12:43.775
&gt;&gt; Nope,
to throw has not been covered yet.

198
00:12:43.775 --> 00:12:46.727
&gt;&gt; Okay.

199
00:12:46.727 --> 00:12:49.781
&gt;&gt; But my question really is so we're
saying this function is being executed.

200
00:12:49.781 --> 00:12:53.741
And this expect statement is saying is
we're expecting it to throw an error,

201
00:12:55.654 --> 00:12:58.440
And, why is that?

202
00:12:58.440 --> 00:13:01.169
It's not important for us to go into
the internals of how is running for

203
00:13:01.169 --> 00:13:02.103
this particular case.

204
00:13:02.103 --> 00:13:07.734
But we should,
Know why it's throwing an error.

205
00:13:10.145 --> 00:13:14.034
&gt;&gt; It's a local variable in that
anonymous function being set.

206
00:13:14.034 --> 00:13:18.150
&gt;&gt; Yeah, and
it doesn't have access to this one, so

207
00:13:18.150 --> 00:13:22.462
it's referencing a variable
on a different scope.

208
00:13:25.255 --> 00:13:28.149
And it's like really in a different
scope but it's way over here.

209
00:13:32.982 --> 00:13:35.486
&gt;&gt; So
would that just throw ACTUAL is undefined?

210
00:13:37.006 --> 00:13:40.581
&gt;&gt; No no no it's not at all it's not
ACTUAL it's this one local to first,

211
00:13:40.581 --> 00:13:41.379
is undefined.

212
00:13:41.379 --> 00:13:43.237
&gt;&gt; Yeah okay.

213
00:13:43.237 --> 00:13:47.012
&gt;&gt; And then, Aisha do you wanna go next?

214
00:13:48.533 --> 00:13:55.796
&gt;&gt; Sure, The next expect, Is,

215
00:14:03.780 --> 00:14:05.258
&gt;&gt; If you want me to scroll or anything,

216
00:14:05.258 --> 00:14:05.789
let me know.

217
00:14:05.789 --> 00:14:08.069
&gt;&gt; Yeah I want you to scroll probably.

218
00:14:08.069 --> 00:14:10.028
&gt;&gt; Which way?

219
00:14:10.028 --> 00:14:10.916
&gt;&gt; Up.

220
00:14:10.916 --> 00:14:12.564
[LAUGH]
&gt;&gt; Tell me when.

221
00:14:12.564 --> 00:14:18.544
&gt;&gt; Probably right here cuz I
think it might it's global okay,

222
00:14:18.544 --> 00:14:26.040
go back to the global variable,
[LAUGH] so, For each so it's null.

223
00:14:29.567 --> 00:14:30.967
&gt;&gt; Did you guys catch that?

224
00:14:30.967 --> 00:14:37.898
So it's null because before each, each
statement would reset the value to null.

225
00:14:37.898 --> 00:14:41.448
And in this case we didn't set it
to anything cuz we threw an error.

226
00:14:41.448 --> 00:14:44.071
Because we were trying
to access a variable in,

227
00:14:44.071 --> 00:14:46.310
in a scope that we don't have access to.

