WEBVTT

1
00:00:00.230 --> 00:00:06.560
&gt;&gt; Bianca Gandolfo: Pointer is
that you get a little clue here.

2
00:00:06.560 --> 00:00:10.890
So these represent every rule,
we'll test it out.

3
00:00:10.890 --> 00:00:15.610
We'll try to predict what
ACTUAL is gonna be in each one.

4
00:00:15.610 --> 00:00:17.080
So here, this one's done.

5
00:00:17.080 --> 00:00:19.940
I'll walk through this one, and then you
guys can walk through the next one, okay?

6
00:00:22.140 --> 00:00:26.610
So, once this function is executed,

7
00:00:26.610 --> 00:00:30.490
we're creating a fn variable,
we're saving a function.

8
00:00:30.490 --> 00:00:32.570
We're skipping over
the body of the function.

9
00:00:32.570 --> 00:00:33.910
However, we're invoking it here,

10
00:00:33.910 --> 00:00:36.990
so that means we jump into
the body of the function.

11
00:00:36.990 --> 00:00:38.775
We are creating a variable called name,
and

12
00:00:38.775 --> 00:00:40.470
we're assigning it to the string inner.

13
00:00:41.840 --> 00:00:43.756
We're assigning ACTUAL,

14
00:00:43.756 --> 00:00:47.590
which is a variable in our
very parent scope, to name.

15
00:00:49.610 --> 00:00:54.820
So once this is done executing we
jump immediately to this next line.

16
00:00:54.820 --> 00:00:58.760
ACTUAL equals inner because
ACTUAL is available to

17
00:01:00.210 --> 00:01:06.990
both this scope and this outer scope
because it's a parent of both.

18
00:01:06.990 --> 00:01:10.160
So ACTUALl is equal to inner.

19
00:01:10.160 --> 00:01:14.450
And if we really wanna get fancy with
this, expect is being evaluated.

20
00:01:14.450 --> 00:01:18.100
It's being called, and it's gonna go
into innards of our testing library.

21
00:01:18.100 --> 00:01:21.889
And it's gonna return something
that'll be evaluated against this.

22
00:01:22.940 --> 00:01:25.002
Whatever this value is.

23
00:01:26.999 --> 00:01:32.533
&gt;&gt; Bianca Gandolfo: Could you be also
you could expect this to be false,

24
00:01:32.533 --> 00:01:37.700
or to be a function something like that,
okay.

25
00:01:37.700 --> 00:01:40.719
Any question about this exercise?

26
00:01:43.750 --> 00:01:51.130
Okay, so this rule is called a function
has access to its own local variables.

27
00:01:51.130 --> 00:01:54.610
So when we say own local, that means
it's in the same function block.

28
00:01:58.188 --> 00:01:59.578
&gt;&gt; Bianca Gandolfo: Cool?

29
00:02:02.583 --> 00:02:03.445
&gt;&gt; Bianca Gandolfo: All right.

30
00:02:05.282 --> 00:02:08.525
&gt;&gt; Bianca Gandolfo: The next one is inputs
to a function are treated as local scope

31
00:02:08.525 --> 00:02:10.000
variables.

32
00:02:10.000 --> 00:02:10.771
Who wants to go first?

33
00:02:13.256 --> 00:02:15.808
&gt;&gt; Bianca Gandolfo: Not all at once guys,
I know this is exciting stuff.

34
00:02:18.324 --> 00:02:19.281
&gt;&gt; Bianca Gandolfo: Anyone?

35
00:02:19.281 --> 00:02:20.527
You can just raise your hand.

36
00:02:22.427 --> 00:02:23.720
&gt;&gt; Bianca Gandolfo: Okay, Michael.

37
00:02:23.720 --> 00:02:24.910
&gt;&gt; Michael: True.
&gt;&gt; Bianca Gandolfo: No,

38
00:02:24.910 --> 00:02:26.430
no, you have to run the code.

39
00:02:26.430 --> 00:02:27.370
&gt;&gt; Michael: [LAUGH] I have to what?

40
00:02:27.370 --> 00:02:28.709
&gt;&gt; Bianca Gandolfo: Just like I did.

41
00:02:28.709 --> 00:02:29.747
&gt;&gt; Michael: I have to talk about it?

42
00:02:29.747 --> 00:02:30.419
&gt;&gt; Bianca Gandolfo: Mm-hm.

43
00:02:30.419 --> 00:02:31.904
&gt;&gt; Michael: Okay.

44
00:02:31.904 --> 00:02:35.160
&gt;&gt; Bianca Gandolfo: So
the very first thing that's gonna happen.

45
00:02:35.160 --> 00:02:38.960
&gt;&gt; Michael: Well,
we create the function fn and

46
00:02:38.960 --> 00:02:42.940
pass it the argument name,
or the variable name.

47
00:02:42.940 --> 00:02:45.690
&gt;&gt; Bianca Gandolfo: Well, we,
yeah we're gonna create a variable.

48
00:02:45.690 --> 00:02:47.132
And we're gonna assign it to a function,
right?

49
00:02:47.132 --> 00:02:48.071
&gt;&gt; Michael: Yeah.

50
00:02:48.071 --> 00:02:50.311
&gt;&gt; Bianca Gandolfo: Okay, cool.

51
00:02:50.311 --> 00:02:51.970
What's the next thing that happens Jamie?

52
00:02:51.970 --> 00:02:55.710
&gt;&gt; Jamie: And then we're gonna call
the function and pass it inner.

53
00:02:55.710 --> 00:03:00.100
&gt;&gt; Bianca Gandolfo: Mm-hm, and
then Abi, what happens next?

54
00:03:01.390 --> 00:03:04.390
&gt;&gt; Abi: We immediately run to expect.

55
00:03:05.750 --> 00:03:06.930
&gt;&gt; Bianca Gandolfo: Well,
we call the function.

56
00:03:06.930 --> 00:03:08.160
What happens then?

57
00:03:08.160 --> 00:03:09.742
You go into the body of the function,
right?

58
00:03:09.742 --> 00:03:11.420
&gt;&gt; Abi: Sorry, yeah, so sorry.

59
00:03:11.420 --> 00:03:18.630
So we go inside the body of the function
and we design inner to ACTUAL.

60
00:03:18.630 --> 00:03:20.550
&gt;&gt; Bianca Gandolfo: Where
does inner come from?

61
00:03:20.550 --> 00:03:22.470
&gt;&gt; Abi: The argument, parameters.

62
00:03:22.470 --> 00:03:24.230
&gt;&gt; Bianca Gandolfo: Mm-hm, yeah.

63
00:03:24.230 --> 00:03:27.900
&gt;&gt; Abi: Yeah, the argument got pass in
which didn't get to reassigned to ACTUAL.

64
00:03:27.900 --> 00:03:31.110
&gt;&gt; Bianca Gandolfo: Yep, and
then Chris what happens next?

65
00:03:31.110 --> 00:03:39.325
&gt;&gt; Chris: And then it falls down to
expect ACTUAL equals inner to be true.

66
00:03:42.445 --> 00:03:42.945
&gt;&gt; Bianca Gandolfo: Cool.

67
00:03:45.608 --> 00:03:47.085
&gt;&gt; Bianca Gandolfo: Any
questions about this?

68
00:03:47.085 --> 00:03:48.711
This is what we would expect, right?

69
00:03:48.711 --> 00:03:53.506
&gt;&gt; [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: [LAUGH] yeah,

70
00:03:53.506 --> 00:03:57.289
the question marks mean fill in the blank.

71
00:03:59.110 --> 00:04:00.010
Cool.

72
00:04:00.010 --> 00:04:01.490
Okay, Eddie do you wanna try the next one?

73
00:04:02.600 --> 00:04:05.142
So this rule is block scope.

74
00:04:05.142 --> 00:04:09.988
Block scope can be created with let.

75
00:04:12.611 --> 00:04:19.558
&gt;&gt; Eddie: So line 31,
function is created with the name fn.

76
00:04:19.558 --> 00:04:21.590
&gt;&gt; Bianca Gandolfo: Mm-hm,
and then Cameron?

77
00:04:23.400 --> 00:04:25.242
&gt;&gt; Cameron: The variable
where is created and

78
00:04:25.242 --> 00:04:26.801
assigned the string-
&gt;&gt; Bianca Gandolfo: Well,

79
00:04:26.801 --> 00:04:28.393
actually we don't enter into-.

80
00:04:28.393 --> 00:04:31.260
&gt;&gt; Cameron: Right, call the function.

81
00:04:31.260 --> 00:04:34.010
&gt;&gt; Bianca Gandolfo: Yeah, we go down to
the next line then we call the function,

82
00:04:34.010 --> 00:04:34.700
and then, Ben?

83
00:04:35.820 --> 00:04:41.040
&gt;&gt; Ben: Inside the function,
we declare a variable where,

84
00:04:41.040 --> 00:04:43.110
when we set it to the value outer.

85
00:04:43.110 --> 00:04:45.662
&gt;&gt; Bianca Gandolfo: Okay, and then Dan.

86
00:04:51.110 --> 00:04:57.539
&gt;&gt; Dan: We create a new scope which is
another variable named where called where.

87
00:05:00.160 --> 00:05:02.875
&gt;&gt; Bianca Gandolfo: So we create
a variable with the key word let, with

88
00:05:02.875 --> 00:05:07.620
inner, and we talked about this a little
bit before, but let creates blockscope.

89
00:05:07.620 --> 00:05:10.230
Ana a block is anything with two brackets.

90
00:05:10.230 --> 00:05:13.187
I've been talking about
function blocks and

91
00:05:13.187 --> 00:05:18.259
that's really what most of JavaScript
scopes is about is function scoping.

92
00:05:18.259 --> 00:05:22.841
But with the keyword let in esc,
we also have block scope as well, and

93
00:05:22.841 --> 00:05:28.220
people coming from other languages should
be pretty familiar with block scope.

94
00:05:29.570 --> 00:05:34.130
Or other languages with block
scope is pretty common, okay.

95
00:05:34.130 --> 00:05:40.384
&gt;&gt; Dan: So,
ACTUALl is assigned the value where.

96
00:05:40.384 --> 00:05:46.799
Which in this case would be outer.

97
00:05:46.799 --> 00:05:49.286
&gt;&gt; Bianca Gandolfo: Okay,
and then what happens next?

98
00:05:49.286 --> 00:05:50.771
&gt;&gt; Chris: It goes down to the line 39.

99
00:05:50.771 --> 00:05:51.849
&gt;&gt; Bianca Gandolfo: Mm-hm.

100
00:05:51.849 --> 00:05:55.966
&gt;&gt; Chris: And the questions marks become,
I think it's outer because the other one

101
00:05:55.966 --> 00:05:58.837
would be out of it,
inner would be out of the scope.

102
00:05:58.837 --> 00:06:01.891
&gt;&gt; Bianca Gandolfo: Yep, exactly.

103
00:06:01.891 --> 00:06:07.920
&gt;&gt; Bianca Gandolfo: Cool, and
if this was var how would that change?

104
00:06:10.420 --> 00:06:12.414
&gt;&gt; Michael: No longer be a block.

105
00:06:12.414 --> 00:06:13.085
&gt;&gt; Bianca Gandolfo: What"s that?

106
00:06:13.085 --> 00:06:14.459
&gt;&gt; Michael: Would no longer be block.

107
00:06:14.459 --> 00:06:15.291
&gt;&gt; Bianca Gandolfo: Yeah.

108
00:06:15.291 --> 00:06:16.549
&gt;&gt; Michael: So
you would just rewrite the same variable.

109
00:06:18.570 --> 00:06:19.915
&gt;&gt; Bianca Gandolfo: So
it would be, actually be inner.

110
00:06:22.055 --> 00:06:24.840
&gt;&gt; Bianca Gandolfo: Cool, questions there?

111
00:06:24.840 --> 00:06:28.040
&gt;&gt; Michael: Is it just let in
the essex that creates it's own block.

112
00:06:28.040 --> 00:06:30.960
Or there other verbs that do that as well?

113
00:06:30.960 --> 00:06:32.167
&gt;&gt; Bianca Gandolfo: I think it's just let.

114
00:06:32.167 --> 00:06:32.895
&gt;&gt; Michael: Okay.

115
00:06:32.895 --> 00:06:33.953
&gt;&gt; Bianca Gandolfo: Yeah.

116
00:06:35.525 --> 00:06:38.950
&gt;&gt; Dan: And
because it's within a block, It's not.

117
00:06:38.950 --> 00:06:41.750
Inner is not getting reset?

118
00:06:43.240 --> 00:06:47.480
Or inner is just specific to-
It's just specific to here, yeah.

119
00:06:47.480 --> 00:06:50.220
&gt;&gt; Bianca Gandolfo: Exactly,
so outside of this.

120
00:06:50.220 --> 00:06:52.580
It looks in it's own scope.

121
00:06:54.280 --> 00:06:58.600
If there is a value that matches
that variable, and we have it, here.

122
00:06:58.600 --> 00:07:00.590
If for example, where?

123
00:07:00.590 --> 00:07:01.560
Well, lets look at ACTUAL.

124
00:07:01.560 --> 00:07:05.140
So ACTUAL will first look in this scope,
in this function scope and

125
00:07:05.140 --> 00:07:07.780
say, is there an ACTUAL around here?

126
00:07:07.780 --> 00:07:08.660
No, there isn’t, right.

127
00:07:08.660 --> 00:07:10.820
There's no defined actual.

128
00:07:10.820 --> 00:07:12.865
And then we look up in the next scope.

129
00:07:12.865 --> 00:07:17.485
It's not there either and then we will
look up in the next scope where it lives.

130
00:07:17.485 --> 00:07:22.845
It will find that and
it will realize that it's undefined.

131
00:07:22.845 --> 00:07:25.396
&gt;&gt; Michael: So does connect another
ware get created in memory then

132
00:07:25.396 --> 00:07:29.285
inside of that scope and then when you
exit the scope, does it disappear?

133
00:07:29.285 --> 00:07:34.490
&gt;&gt; Bianca Gandolfo: Yep, and also some
funny things happen with scoping as well.

134
00:07:34.490 --> 00:07:38.790
When Chrome optimizes your code, so
if you're going through the debugger and

135
00:07:38.790 --> 00:07:46.830
you're trying to access variables that
would be accessible in that scope.

136
00:07:46.830 --> 00:07:47.890
Does that makes sense?

137
00:07:47.890 --> 00:07:52.315
So it should be accessible, but in the
Chrome debugger tools they aren't because

138
00:07:52.315 --> 00:07:58.740
there's an optimization step where
if you not actually referencing that

139
00:07:58.740 --> 00:08:03.312
value, it just gets garbage collected,
its not actually, it doesn't exist there.

140
00:08:04.470 --> 00:08:06.436
So that's just one thing to keep in mind.

141
00:08:06.436 --> 00:08:09.412
We'll look at that a little
more in depth later.

142
00:08:09.412 --> 00:08:13.116
Okay, where we leave off?

143
00:08:13.116 --> 00:08:16.118
Okay, so line 42,
is a function has access to

144
00:08:16.118 --> 00:08:21.090
the variables contained within the same
scope that function was created in.

145
00:08:21.090 --> 00:08:24.190
All right, so where did we leave off?

146
00:08:25.270 --> 00:08:25.861
Is it your turn, Josh?

147
00:08:29.656 --> 00:08:31.170
&gt;&gt; Michael: So, on line-
&gt;&gt; Bianca Gandolfo: Line 43.

148
00:08:31.170 --> 00:08:35.449
&gt;&gt; Michael: On line 43, we need declare
a variable and set it to outer?

149
00:08:35.449 --> 00:08:38.874
&gt;&gt; Bianca Gandolfo: Yep?

150
00:08:38.874 --> 00:08:42.900
&gt;&gt; Michael: As the function
declaration fn.

151
00:08:42.900 --> 00:08:45.670
&gt;&gt; Bianca Gandolfo: Mm-hm,
create a function there.

152
00:08:45.670 --> 00:08:48.324
Save it in a fn.

153
00:08:48.324 --> 00:08:54.030
&gt;&gt; Chris: Aye, in the function
actual is assigned to name?

154
00:08:54.030 --> 00:08:55.510
&gt;&gt; Bianca Gandolfo: Well,
first we have to call it.

155
00:08:55.510 --> 00:08:56.885
&gt;&gt; Chris: Yeah, you gotta call it.

156
00:08:56.885 --> 00:08:57.458
[LAUGH]
&gt;&gt; Bianca Gandolfo: So

157
00:08:57.458 --> 00:09:01.586
then we call the function, and
I'm really picky about that.

158
00:09:01.586 --> 00:09:02.860
Just so you know.

159
00:09:02.860 --> 00:09:05.294
And then, we'll go back to Michael.

160
00:09:08.548 --> 00:09:10.660
&gt;&gt; Eddie: So we just did the-
&gt;&gt; Bianca Gandolfo: We just

161
00:09:10.660 --> 00:09:11.640
called the function.

162
00:09:11.640 --> 00:09:14.820
&gt;&gt; Eddie: Okay, so
we go into the function itself.

163
00:09:14.820 --> 00:09:19.600
We create a variable called-
&gt;&gt; Bianca Gandolfo: Where are we creating?

164
00:09:19.600 --> 00:09:20.371
&gt;&gt; Eddie: No, yeah.

165
00:09:20.371 --> 00:09:22.070
&gt;&gt; Bianca Gandolfo: We're
just assigning it.

166
00:09:22.070 --> 00:09:25.120
&gt;&gt; Eddie: Yeah, sorry,
we're assigning fn to a function.

167
00:09:26.360 --> 00:09:27.290
&gt;&gt; Bianca Gandolfo: We call the function.

168
00:09:27.290 --> 00:09:28.645
We go into the function body.

169
00:09:28.645 --> 00:09:32.250
&gt;&gt; Eddie: Mm-hm, and
then we're setting ACTUAL to name.

170
00:09:32.250 --> 00:09:35.680
&gt;&gt; Bianca Gandolfo: Yeah,
and what is name?

171
00:09:35.680 --> 00:09:40.602
&gt;&gt; Eddie: It doesn't see it in its
normal scope, so it looks up to outer.

172
00:09:40.602 --> 00:09:41.654
&gt;&gt; Bianca Gandolfo: Nice.

173
00:09:44.033 --> 00:09:46.232
&gt;&gt; Bianca Gandolfo: Okay, great.

174
00:09:50.644 --> 00:09:53.960
&gt;&gt; Bianca Gandolfo: Do
you wanna go next Jamie?

175
00:09:53.960 --> 00:09:58.043
&gt;&gt; Jamie: Sure,
we're defining first fn as a function.

176
00:10:02.725 --> 00:10:03.670
&gt;&gt; Bianca Gandolfo: Yep.

177
00:10:03.670 --> 00:10:04.825
&gt;&gt; Michael: Then we jump down to first

178
00:10:04.825 --> 00:10:05.710
function,
&gt;&gt; Bianca Gandolfo: Mm-hm.

179
00:10:05.710 --> 00:10:11.575
&gt;&gt; Michael: Which then jumps back
into the function we created up top.

180
00:10:11.575 --> 00:10:13.959
&gt;&gt; Bianca Gandolfo: Mm-hm, and then Chris.

181
00:10:13.959 --> 00:10:22.680
&gt;&gt; Chris: And then we create a variable
local to first function set to inner.

182
00:10:22.680 --> 00:10:25.582
&gt;&gt; Bianca Gandolfo: Okay, Eddie.

183
00:10:25.582 --> 00:10:29.487
&gt;&gt; Eddie: So
then [SOUND] we're at line 56 and

184
00:10:29.487 --> 00:10:31.707
we expect,
&gt;&gt; Bianca Gandolfo: Mm-hm.

185
00:10:31.707 --> 00:10:32.536
&gt;&gt; Eddie: Okay.

186
00:10:32.536 --> 00:10:33.821
&gt;&gt; Bianca Gandolfo: Mm-hm.

187
00:10:33.821 --> 00:10:38.279
&gt;&gt; Eddie: And so
we go inside of expect and

188
00:10:38.279 --> 00:10:43.079
the function is setting the local

189
00:10:43.079 --> 00:10:47.031
first function to ACTUAL.

190
00:10:51.548 --> 00:10:52.640
&gt;&gt; Bianca Gandolfo: But
it's not being called.

191
00:10:53.930 --> 00:10:55.050
&gt;&gt; Eddie: It's not?

192
00:10:55.050 --> 00:10:56.840
&gt;&gt; Bianca Gandolfo: Do
you see it being called?

193
00:10:56.840 --> 00:11:00.820
&gt;&gt; Eddie: Well, so
I guess I thought expect was being called,

194
00:11:00.820 --> 00:11:04.860
cuz there's the open parentheses after it,
is that incorrect?

195
00:11:04.860 --> 00:11:07.310
&gt;&gt; Bianca Gandolfo: That's correct,
expect is being called.

196
00:11:07.310 --> 00:11:10.580
&gt;&gt; Eddie: But the function inside
of expect is not being called,

197
00:11:10.580 --> 00:11:11.330
is what you're saying.

198
00:11:11.330 --> 00:11:12.690
&gt;&gt; Bianca Gandolfo: I'm just saying,
we should be mindful or

199
00:11:12.690 --> 00:11:15.368
whether or not it's been called.

200
00:11:15.368 --> 00:11:16.630
&gt;&gt; Eddie: [LAUGH] Okay.

201
00:11:16.630 --> 00:11:20.129
&gt;&gt; Bianca Gandolfo: We don't
visibly see it being called, right?

202
00:11:20.129 --> 00:11:21.100
&gt;&gt; Eddie: Right.

203
00:11:21.100 --> 00:11:25.506
&gt;&gt; Bianca Gandolfo: But we can assume
that it's being called in the expect,

204
00:11:25.506 --> 00:11:27.765
if this test works, right?

205
00:11:27.765 --> 00:11:28.739
&gt;&gt; Eddie: I think I get it.

206
00:11:28.739 --> 00:11:29.920
&gt;&gt; Michael: So
it just hasn't been called yet.

207
00:11:30.950 --> 00:11:33.850
&gt;&gt; Bianca Gandolfo: Well,
my point is is that this is a function,

208
00:11:33.850 --> 00:11:35.215
this is just an anonymous function.

209
00:11:35.215 --> 00:11:36.030
&gt;&gt; Michael: Mm-hm.

210
00:11:36.030 --> 00:11:37.520
&gt;&gt; Bianca Gandolfo: That we're looking at.

211
00:11:37.520 --> 00:11:40.360
And Eddie was just acting like it was for
sure being called,

212
00:11:40.360 --> 00:11:42.390
but technically we don't know that.

213
00:11:42.390 --> 00:11:45.210
Because we don't really
know an expect is gonna do.

214
00:11:46.240 --> 00:11:46.840
&gt;&gt; Eddie: Okay.

215
00:11:46.840 --> 00:11:48.442
&gt;&gt; Bianca Gandolfo: But
it seems like the way it's set up,

216
00:11:48.442 --> 00:11:51.280
that is probably being called.

217
00:11:51.280 --> 00:11:52.701
I'm just being picky.

218
00:11:52.701 --> 00:11:55.480
&gt;&gt; Michael: [LAUGH] Because
we don't know anything

219
00:11:55.480 --> 00:11:57.830
necessarily about the internals to expect?

220
00:11:57.830 --> 00:11:59.990
&gt;&gt; Bianca Gandolfo: Right, so
there was just an assumption there and

221
00:11:59.990 --> 00:12:03.040
I wanted to point out that
there's an assumption that expect

222
00:12:03.040 --> 00:12:06.120
inside of that function is
calling this anonymous function.

223
00:12:06.120 --> 00:12:08.710
But we can't visibly see that right now.

224
00:12:08.710 --> 00:12:09.210
That's all, that's all.

225
00:12:11.490 --> 00:12:16.850
It's like the definition
versus invocation thing, okay.

226
00:12:16.850 --> 00:12:20.250
&gt;&gt; Eddie: So then I could safely
say that function inside of

227
00:12:20.250 --> 00:12:22.100
expect is being defined?

228
00:12:22.100 --> 00:12:23.690
&gt;&gt; Bianca Gandolfo: Yes.
&gt;&gt; Chris: Okay.

229
00:12:23.690 --> 00:12:25.060
&gt;&gt; Bianca Gandolfo: And
then I'll give it to you that yes,

230
00:12:25.060 --> 00:12:28.764
it is actually being called in to expect,
but yes.

231
00:12:28.764 --> 00:12:34.790
Okay, Cameron.

232
00:12:34.790 --> 00:12:41.295
So we're saying here,
we're expecting this to throw an error.

233
00:12:42.684 --> 00:12:43.786
&gt;&gt; Bianca Gandolfo: Why?

234
00:12:52.374 --> 00:12:54.070
&gt;&gt; Bianca Gandolfo: Could turn it
into a question if you have one.

235
00:12:54.070 --> 00:13:02.280
&gt;&gt; Cameron: I'm not sure where that it
is to throw next to was that cover?

236
00:13:02.280 --> 00:13:06.538
&gt;&gt; Bianca Gandolfo: Nope,
to.throw has not been covered yet.

237
00:13:06.538 --> 00:13:07.797
&gt;&gt; Cameron: Okay.

238
00:13:07.797 --> 00:13:09.260
&gt;&gt; Bianca Gandolfo: But
my question really is,

239
00:13:09.260 --> 00:13:12.250
sowe're saying this function's
being executed, and

240
00:13:12.250 --> 00:13:16.010
this expects damon is saying,
we're expecting it to throw an error.

241
00:13:18.530 --> 00:13:21.400
And, why is that?

242
00:13:21.400 --> 00:13:23.840
It's not important for us to go into
the internals of how it's running for

243
00:13:23.840 --> 00:13:29.900
this particular case, but
we should know why it's throwing an error.

244
00:13:33.080 --> 00:13:37.050
&gt;&gt; Cameron: It's a local variable and
that anonymous function makes it

245
00:13:37.050 --> 00:13:38.910
&gt;&gt; Bianca Gandolfo: Yeah, and

246
00:13:38.910 --> 00:13:40.340
it doesn't have access to this one.

247
00:13:42.180 --> 00:13:44.889
So it's referencing a variable
on different scope.

248
00:13:48.126 --> 00:13:50.473
&gt;&gt; Bianca Gandolfo: And that's really in
a different scope, it's way over here.

249
00:13:55.802 --> 00:13:58.060
&gt;&gt; Cameron: So would that just
throw ACTUALl as undefined?

250
00:14:00.050 --> 00:14:03.350
&gt;&gt; Bianca Gandolfo: No, no, it's not
ACTUAL, it's this one, local to first.

251
00:14:03.350 --> 00:14:04.360
Is undefined.

252
00:14:04.360 --> 00:14:04.860
&gt;&gt; Cameron: Yeah.

253
00:14:06.160 --> 00:14:09.504
&gt;&gt; Bianca Gandolfo: And then,
Aisha, do you wanna go next?

254
00:14:09.504 --> 00:14:16.150
&gt;&gt; Aisha: Sure,
&gt;&gt; Aisha: The next

255
00:14:16.150 --> 00:14:21.052
expects is,
&gt;&gt; Bianca Gandolfo: If you want

256
00:14:21.052 --> 00:14:25.582
me to scroll or anything let me know.

257
00:14:25.582 --> 00:14:29.559
&gt;&gt; Aisha: Yeah,
I want you to scroll [LAUGH],

258
00:14:29.559 --> 00:14:32.852
probably back-
&gt;&gt; Bianca Gandolfo: Which way?

259
00:14:32.852 --> 00:14:33.456
&gt;&gt; Aisha: Up.

260
00:14:33.456 --> 00:14:34.175
&gt;&gt; Bianca Gandolfo: Up?

261
00:14:34.175 --> 00:14:36.550
Tell me, like when
&gt;&gt; Aisha: Probably, right here.

262
00:14:38.660 --> 00:14:42.400
Cuz I think this is, it's global.

263
00:14:42.400 --> 00:14:44.016
Okay, go back to the global variable.

264
00:14:44.016 --> 00:14:50.815
So it's null.

265
00:14:50.815 --> 00:14:54.010
&gt;&gt; Bianca Gandolfo: Did
you guys catch that?

266
00:14:54.010 --> 00:15:00.320
So it's null because before each statement
where you reset the value to null.

267
00:15:00.320 --> 00:15:04.410
And in this case we didn't set it to
anything cuz we threw an error, because we

268
00:15:04.410 --> 00:15:09.140
were trying to access a variable in
a scope that we don't have access to.

