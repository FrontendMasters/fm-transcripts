WEBVTT

1
00:00:00.270 --> 00:00:01.821
&gt;&gt; Bianca Gandolfo: Let's
talk about Reverend Green.

2
00:00:01.821 --> 00:00:03.734
And also higher order functions and
callbacks,

3
00:00:03.734 --> 00:00:05.655
which we've been doing
some work with already.

4
00:00:05.655 --> 00:00:10.116
So you are already pretty experienced
with what it's like to use higher order

5
00:00:10.116 --> 00:00:11.704
functions and callbacks.

6
00:00:11.704 --> 00:00:14.174
Maybe we weren't really calling
them higher order functions.

7
00:00:14.174 --> 00:00:18.027
But higher order functions in JavaScript,

8
00:00:18.027 --> 00:00:24.690
is what enables us to do these
functional programming techniques.

9
00:00:24.690 --> 00:00:26.428
Because a function in JavaScript is data.

10
00:00:26.428 --> 00:00:31.061
And that's not true in other languages,
or it's not true in all languages,

11
00:00:31.061 --> 00:00:32.784
that functions can be data.

12
00:00:32.784 --> 00:00:35.370
And when I mean a function is data,

13
00:00:35.370 --> 00:00:39.483
what I mean to say is that we
can pass functions around.

14
00:00:39.483 --> 00:00:42.971
We can return them without invoking
them and things like that.

15
00:00:42.971 --> 00:00:50.546
Just like you would an object, or say,
some primitive value, like a 0 or a true.

16
00:00:50.546 --> 00:00:55.456
So really, higher-order functions and

17
00:00:55.456 --> 00:00:59.384
callbacks are the core concept of

18
00:00:59.384 --> 00:01:04.437
functional programming.
&gt;&gt; Bianca Gandolfo: It's

19
00:01:04.437 --> 00:01:08.713
very powerful too, so
let's get going with it.

20
00:01:08.713 --> 00:01:14.014
A higher order function can
take a function as an input.

21
00:01:14.014 --> 00:01:18.335
For example, this addEventListener,

22
00:01:18.335 --> 00:01:23.425
have you guys used addEventListener,
right?

23
00:01:23.425 --> 00:01:32.133
We're taking this function as an input.
&gt;&gt; Bianca Gandolfo: Cool,

24
00:01:32.133 --> 00:01:37.073
and we can return a function,
as we saw before, as an output,

25
00:01:37.073 --> 00:01:40.124
and here we are returning a function.

26
00:01:47.030 --> 00:01:48.398
&gt;&gt; Bianca Gandolfo: All right, so

27
00:01:48.398 --> 00:01:53.870
callbacks are just functions
that we pass to functions,

28
00:01:53.870 --> 00:01:59.120
and we're going to just kind
of experiment with this.

29
00:01:59.120 --> 00:02:03.933
We're going to run this, like we've
been running our code so far as a group,

30
00:02:03.933 --> 00:02:11.298
who wants to go first?
&gt;&gt; Ben: Got

31
00:02:11.298 --> 00:02:12.073
it.
&gt;&gt; Bianca Gandolfo: All right, thanks,

32
00:02:12.073 --> 00:02:14.578
Ben.
&gt;&gt; Ben: Okay, we're declaring a const,

33
00:02:14.578 --> 00:02:18.489
if else, and
that's going to be using arrow notation.

34
00:02:18.489 --> 00:02:20.920
It's going to be a function.
&gt;&gt; Bianca Gandolfo: Mm-hm.

35
00:02:20.920 --> 00:02:22.663
&gt;&gt; Ben: Which is going to take in three

36
00:02:22.663 --> 00:02:25.554
arguments, condition is true, is false.
&gt;&gt; Bianca Gandolfo: Yep.

37
00:02:25.554 --> 00:02:26.851
&gt;&gt; Ben: Or parameters,

38
00:02:26.851 --> 00:02:29.584
excuse me.
&gt;&gt; Bianca Gandolfo: Absolutely, so

39
00:02:29.584 --> 00:02:35.401
we're declaring our function here,
we're saving it to our const,

40
00:02:35.401 --> 00:02:39.325
we're creating a constant variable, okay?

41
00:02:39.325 --> 00:02:41.996
And then, who's next?

42
00:02:41.996 --> 00:02:44.830
Dan, you want to go next?
&gt;&gt; Dan: Booking that

43
00:02:44.830 --> 00:02:45.632
function.
&gt;&gt; Bianca Gandolfo: Yeah,

44
00:02:45.632 --> 00:02:50.402
we call it.
&gt;&gt; Bianca Gandolfo: And we pass true.

45
00:02:50.402 --> 00:02:56.389
A couple anonymous functions.
&gt;&gt; Bianca Gandolfo: And

46
00:02:56.389 --> 00:03:00.453
then, Ryan, what does it do when we
enter into the body of the function?

47
00:03:00.453 --> 00:03:05.848
&gt;&gt; Ryan: So, it looks like a ternary.

48
00:03:05.848 --> 00:03:06.772
&gt;&gt; Bianca Gandolfo: Mm-hm.

49
00:03:06.772 --> 00:03:10.882
&gt;&gt; Ryan: So it's asking if that condition,

50
00:03:10.882 --> 00:03:13.761
which is true, is true.

51
00:03:13.761 --> 00:03:18.523
And if it is true, which it is,
it returns as false, so

52
00:03:18.523 --> 00:03:23.779
it returns as false.
&gt;&gt; Bianca Gandolfo: If it's true,

53
00:03:23.779 --> 00:03:25.834
then you do this, otherwise, you do that.
&gt;&gt; Ryan: Yes.

54
00:03:25.834 --> 00:03:26.334
&gt;&gt; Bianca Gandolfo: But yeah.

55
00:03:26.334 --> 00:03:27.202
&gt;&gt; Unidentifed Male Student: Is that

56
00:03:27.202 --> 00:03:30.863
a question mark?
&gt;&gt; Bianca Gandolfo: So the question mark,

57
00:03:30.863 --> 00:03:35.247
this is a ternary operator,
which is kind of a Java adopted thing,

58
00:03:35.247 --> 00:03:40.246
it's shorthand for if else.
So it says, if condition is true, so

59
00:03:40.246 --> 00:03:44.444
if this is true, then do that,
otherwise do this.

60
00:03:44.444 --> 00:03:46.315
That's what that means,

61
00:03:46.315 --> 00:03:50.367
it's just a short hand.
&gt;&gt; Bianca Gandolfo: What's

62
00:03:50.367 --> 00:03:51.262
that?
&gt;&gt; Unidentifed Male Student: I just

63
00:03:51.262 --> 00:03:53.336
haven't seen it before.
&gt;&gt; Bianca Gandolfo: Yeah,

64
00:03:53.336 --> 00:03:54.791
no worries.
&gt;&gt; Unidentifed Male Student: So it does,

65
00:03:54.791 --> 00:03:57.510
it's true?
&gt;&gt; Bianca Gandolfo: Yep, so

66
00:03:57.510 --> 00:03:59.793
in this case we're passing true.

67
00:03:59.793 --> 00:04:02.384
True is true, is true, and

68
00:04:02.384 --> 00:04:05.148
then we log true.
&gt;&gt; Unidentifed Male Student: You returned

69
00:04:05.148 --> 00:04:06.900
the console.log.

70
00:04:06.900 --> 00:04:08.915
Did something wonky happen there or

71
00:04:08.915 --> 00:04:11.140
would it just execute the log?
&gt;&gt; Bianca Gandolfo: Yeah,

72
00:04:11.140 --> 00:04:12.641
it'll just execute.

73
00:04:12.641 --> 00:04:14.461
It'll return whatever the log returns,

74
00:04:14.461 --> 00:04:15.777
which is undefined.
&gt;&gt; Unidentifed Male Student: Okay,

75
00:04:15.777 --> 00:04:17.194
there you go.
&gt;&gt; Bianca Gandolfo: Yeah.

76
00:04:18.278 --> 00:04:18.908
&gt;&gt; Bianca Gandolfo: Cool.

77
00:04:20.350 --> 00:04:22.209
&gt;&gt; Bianca Gandolfo: Any questions?

78
00:04:24.946 --> 00:04:26.054
&gt;&gt; Bianca Gandolfo: So this would be

79
00:04:26.054 --> 00:04:32.797
a kind of functional style if else.
&gt;&gt; Bianca Gandolfo: All right,

80
00:04:32.797 --> 00:04:35.611
so, I forgot.
&gt;&gt; Unidentifed Male Student: Does it

81
00:04:35.611 --> 00:04:37.573
return the whole function there?
&gt;&gt; Bianca Gandolfo: Yeah, so

82
00:04:37.573 --> 00:04:40.425
in this case it's going to
return the whole function,

83
00:04:40.425 --> 00:04:43.883
why?
&gt;&gt; Unidentifed Male Student: Because

84
00:04:43.883 --> 00:04:46.363
the entire function is being
passed as the second argument.

85
00:04:46.363 --> 00:04:48.384
&gt;&gt; Bianca Gandolfo: Yeah.

86
00:04:48.384 --> 00:04:52.669
And is console.log actually happening?

87
00:04:52.669 --> 00:04:55.291
No, why not?
&gt;&gt; Unidentified Female Student: It wasn't

88
00:04:55.291 --> 00:04:56.997
invoked.
&gt;&gt; Bianca Gandolfo: It was not invoked.

89
00:04:56.997 --> 00:04:59.616
So we'd need to do a little
something like this.

90
00:05:02.450 --> 00:05:03.912
&gt;&gt; Bianca Gandolfo: To invoke it, and

91
00:05:03.912 --> 00:05:05.866
now it's going to log.

92
00:05:05.866 --> 00:05:09.220
Sometimes I trick even myself,
I forget what my tricks are.

93
00:05:10.330 --> 00:05:15.255
So here we are,
I just put them in a variable now so

94
00:05:15.255 --> 00:05:20.794
that we can pass them that way,
and we're calling it.

95
00:05:20.794 --> 00:05:26.376
Okay, so we are passing a function and
we are calling that function

96
00:05:26.376 --> 00:05:32.475
just the same as you would call log true,
here, right, it's the same.

97
00:05:32.475 --> 00:05:36.986
Except that,
it's just the parameter name gives it

98
00:05:36.986 --> 00:05:41.095
another name to reference it by,
that's all.

99
00:05:41.095 --> 00:05:43.063
This can be confusing for
people sometimes.

