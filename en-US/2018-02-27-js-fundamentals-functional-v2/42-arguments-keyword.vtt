WEBVTT

1
00:00:00.290 --> 00:00:02.560
&gt;&gt; Bianca Gandolfo: So
before the spread operator,

2
00:00:02.560 --> 00:00:07.650
we had to rely on this arguments
keyword to do stuff like that.

3
00:00:07.650 --> 00:00:12.183
And so here we are referencing
the arguments keyword.

4
00:00:14.327 --> 00:00:15.504
&gt;&gt; Bianca Gandolfo: How many people,

5
00:00:15.504 --> 00:00:20.050
you have used the arguments
keyword in their code, okay.

6
00:00:20.050 --> 00:00:26.146
So arguments keyword references all
the arguments as a pseudo array,

7
00:00:26.146 --> 00:00:30.676
yeah, a pseudo array, which is annoying.

8
00:00:30.676 --> 00:00:34.680
But a pseudo array is an object
that looks like an array, but

9
00:00:34.680 --> 00:00:36.020
it's actually an object.

10
00:00:36.020 --> 00:00:36.720
What does that mean?

11
00:00:36.720 --> 00:00:40.703
That means that we don't have access to
our handy array methods like push, pop,

12
00:00:40.703 --> 00:00:42.647
forEach, splice and stuff like that.

13
00:00:42.647 --> 00:00:48.710
And so that can be,
&gt;&gt; Bianca Gandolfo: It's

14
00:00:48.710 --> 00:00:52.260
great that we have it available but
sometimes that can trip us up.

15
00:00:52.260 --> 00:00:57.500
And before when we would have to
do some crazy array dot prototype

16
00:00:57.500 --> 00:01:02.870
to slice that call and you pass
the array to turn it into a real array.

17
00:01:02.870 --> 00:01:06.286
Can you see how that's kind of annoying,
and a lot of extra typing?

18
00:01:06.286 --> 00:01:12.960
We'll see the new ESX feature that
will save us all of that time.

19
00:01:12.960 --> 00:01:17.101
So with all of that said,
what is this console.log gonna say?

20
00:01:19.860 --> 00:01:20.930
&gt;&gt; Bianca Gandolfo: What
is it gonna print out?

21
00:01:22.230 --> 00:01:24.620
So it looks like an array,
but it's not really an array.

22
00:01:24.620 --> 00:01:25.120
We know that.

23
00:01:26.560 --> 00:01:27.265
But what's gonna be in here?

24
00:01:34.614 --> 00:01:40.045
&gt;&gt; Speaker 2: So,
&gt;&gt; Speaker 2: At those five terms.

25
00:01:40.045 --> 00:01:44.910
&gt;&gt; Bianca Gandolfo: Mm-hm
&gt;&gt; Speaker 2: It could be anyone but

26
00:01:46.250 --> 00:01:49.130
I'm wondering if no one
is somehow set aside.

27
00:01:49.130 --> 00:01:52.580
Somehow because it wasn't,
because it was passed in but

28
00:01:52.580 --> 00:01:54.160
it wasn't specified as a parameter.

29
00:01:54.160 --> 00:01:56.785
&gt;&gt; Bianca Gandolfo: Well, actually you
bring up a good point is that the reason

30
00:01:56.785 --> 00:02:00.430
that we use the arguments keyword is when
we don't know how many arguments we're

31
00:02:00.430 --> 00:02:00.981
gonna get.

32
00:02:00.981 --> 00:02:06.758
That's when it's most useful because even
if you pass in an extra argument and

33
00:02:06.758 --> 00:02:10.608
you don't reference it or
give it a parameter name,

34
00:02:10.608 --> 00:02:15.069
you can use the arguments keyword
to figure out how many extra

35
00:02:15.069 --> 00:02:19.565
arguments were passed,
what they were, things like that.

36
00:02:22.710 --> 00:02:23.625
&gt;&gt; Bianca Gandolfo: So
what is this going to print out?

37
00:02:26.456 --> 00:02:29.260
&gt;&gt; Speaker 3: It, be,
could, anyone, no one?

38
00:02:29.260 --> 00:02:29.970
All of those arguments?

39
00:02:29.970 --> 00:02:31.010
&gt;&gt; Bianca Gandolfo: That's a good guess.

40
00:02:31.010 --> 00:02:34.930
But remember we said that these
error functions are kind of weird?

41
00:02:34.930 --> 00:02:36.810
&gt;&gt; Speaker 3: Because they
have no arguments, so

42
00:02:36.810 --> 00:02:38.980
would it return null or something?

43
00:02:38.980 --> 00:02:41.050
Or just print out nothing?

44
00:02:41.050 --> 00:02:42.940
&gt;&gt; Bianca Gandolfo: Yeah,
or it might throw an error,

45
00:02:42.940 --> 00:02:46.750
I don't know exactly what happens,
but it's not gonna work as intended.

46
00:02:48.020 --> 00:02:52.370
So let's take a step back to
our good old function keyword.

47
00:02:52.370 --> 00:02:57.674
And then we get what you thought was,
it, be,

48
00:02:57.674 --> 00:03:03.122
could, anyone, no one,
is what it would log.

49
00:03:03.122 --> 00:03:04.450
Cool, any questions about that?

50
00:03:05.580 --> 00:03:08.810
I see a couple faces that look confused.

51
00:03:10.360 --> 00:03:13.584
&gt;&gt; Speaker 3: Maybe cuz
the font [INAUDIBLE]

52
00:03:13.584 --> 00:03:14.451
&gt;&gt; Bianca Gandolfo: Can you not read it,

53
00:03:14.451 --> 00:03:15.832
can you read it better in there?

54
00:03:15.832 --> 00:03:16.885
&gt;&gt; Speaker 2: Not really.

55
00:03:16.885 --> 00:03:22.220
[INAUDIBLE]
&gt;&gt; Speaker 3: All right it's not default.

56
00:03:22.220 --> 00:03:24.350
&gt;&gt; Bianca Gandolfo: Is that
the error it gives you?

57
00:03:24.350 --> 00:03:25.045
&gt;&gt; Speaker 3: Yeah.

58
00:03:28.726 --> 00:03:30.230
&gt;&gt; Bianca Gandolfo: Yeah,
okay, are we good?

59
00:03:31.710 --> 00:03:32.923
I saw some confused faces.

60
00:03:32.923 --> 00:03:37.519
I'm trusting you that you're gonna be
honest and you're not gonna lie to me and

61
00:03:37.519 --> 00:03:39.490
that you understand.

62
00:03:39.490 --> 00:03:43.260
Unless you have a question,
that's why I'm stalling, no?

63
00:03:43.260 --> 00:03:43.920
Okay.

64
00:03:43.920 --> 00:03:48.095
&gt;&gt; Speaker 4: So hold on,
what does spread operator, it now logs it?

65
00:03:48.095 --> 00:03:52.920
The arguments gets logged, or?

66
00:03:52.920 --> 00:03:54.840
&gt;&gt; Bianca Gandolfo: The spread
operator has nothing to do with

67
00:03:56.370 --> 00:03:57.530
what arguments prints out.

68
00:03:59.170 --> 00:03:59.670
Yeah.

69
00:04:00.880 --> 00:04:05.090
So the arguments keyword has everything
to do with what is passed only.

70
00:04:07.160 --> 00:04:09.579
It only picks up what
is being passed here.

71
00:04:09.579 --> 00:04:18.100
And the spread is doing something
after the fact, if that makes sense.

72
00:04:18.100 --> 00:04:20.960
It's just taking it and
putting it into a array.

73
00:04:20.960 --> 00:04:24.155
But the arguments keyword is only paying
attention to what are the values that

74
00:04:24.155 --> 00:04:25.590
are being passed into this array.

75
00:04:26.970 --> 00:04:28.070
I'm sorry, into this function.

