WEBVTT

1
00:00:00.170 --> 00:00:04.490
&gt;&gt; Bianca Gandolfo: So, composing
is when you take two functions and

2
00:00:04.490 --> 00:00:05.840
combine them essentially.

3
00:00:05.840 --> 00:00:12.289
So, in this example,
we have a function called consider and

4
00:00:12.289 --> 00:00:17.150
it's returning and
I think it could be ...name.

5
00:00:17.150 --> 00:00:23.540
And then we have this other method called
exclaim and it just takes a statement and

6
00:00:23.540 --> 00:00:29.160
it turns it into upper case and
adds an exclamation point at the end.

7
00:00:29.160 --> 00:00:33.890
And then we have this function
blame where we compose,

8
00:00:33.890 --> 00:00:36.890
consider and exclaim, so

9
00:00:36.890 --> 00:00:42.380
that it,

10
00:00:42.380 --> 00:00:46.410
when you pass you into this function,

11
00:00:47.640 --> 00:00:50.700
what it does is it first
passes it into exclaim.

12
00:00:52.530 --> 00:00:55.540
We'll turn it into uppercase and
put an exclamation point.

13
00:00:55.540 --> 00:01:01.410
And then it will pass that, whatever's
returned from this into consider and

14
00:01:01.410 --> 00:01:04.690
then it will return at the end,
I think it could be YOU!

15
00:01:05.820 --> 00:01:06.740
&gt;&gt; Speaker 2: And why does it do that?

16
00:01:06.740 --> 00:01:08.770
Why does it start?

17
00:01:08.770 --> 00:01:10.660
Does order not matter?

18
00:01:10.660 --> 00:01:12.100
&gt;&gt; Bianca Gandolfo: On the order,
it does matter.

19
00:01:13.490 --> 00:01:15.020
The order does matter.

20
00:01:15.020 --> 00:01:18.720
&gt;&gt; Speaker 2: Then why is it not starting
with consider and then going to.

21
00:01:19.750 --> 00:01:22.610
&gt;&gt; Bianca Gandolfo: It really depends
on how you write the internals of this.

22
00:01:22.610 --> 00:01:26.240
But for underscore,
this is the direction it goes.

23
00:01:27.450 --> 00:01:28.090
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Bianca Gandolfo: Yeah.

24
00:01:29.610 --> 00:01:32.098
So, it does this and then it does that.

25
00:01:34.980 --> 00:01:39.201
&gt;&gt; Bianca Gandolfo: But it really just
depends on how you write the internals,

26
00:01:39.201 --> 00:01:44.390
it's not, there's no like real
purpose behind it that I'm aware of.

27
00:01:45.470 --> 00:01:48.600
&gt;&gt; Speaker 2: So is kind of like
the opposite of that where you have,

28
00:01:48.600 --> 00:01:50.650
say a function with multiple parts.

29
00:01:50.650 --> 00:01:54.030
It would run only part of it and
then return the parts that hasn't run yet.

30
00:01:55.560 --> 00:01:59.680
&gt;&gt; Bianca Gandolfo: So, for currying,
it doesn't return anything.

31
00:01:59.680 --> 00:02:00.380
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Bianca Gandolfo: It kind of just

32
00:02:00.380 --> 00:02:03.610
waits until it gets all of the arguments
and then it runs the function.

33
00:02:03.610 --> 00:02:07.293
So you can imagine that
that curried function,

34
00:02:07.293 --> 00:02:11.897
has in its internal saved a copy
of the original function and

35
00:02:11.897 --> 00:02:15.693
it's just kind of waiting
as you add arguments.

36
00:02:15.693 --> 00:02:18.880
It's accumulating that but keep in mind,

37
00:02:18.880 --> 00:02:23.835
that every time you call a curried
function and it hasn't met all of

38
00:02:23.835 --> 00:02:28.702
the required arguments,
it has to return a function every time,

39
00:02:28.702 --> 00:02:33.658
that's the confusing and
interesting part is how do you every time

40
00:02:33.658 --> 00:02:38.642
make sure that you're returning
a function and also saving that.

41
00:02:42.919 --> 00:02:47.505
&gt;&gt; Bianca Gandolfo: So but we'll come
back to all of this and you'll be doing

42
00:02:47.505 --> 00:02:52.311
your excercise with currying and
compose at the very end.

43
00:02:52.311 --> 00:02:58.300
And Professor Plum, like I said,

44
00:02:58.300 --> 00:03:02.000
he is also someone to consider reading
towards the end of the presentation.

45
00:03:02.000 --> 00:03:05.670
So we have one more suspect,
one more topic.

46
00:03:05.670 --> 00:03:08.910
And at the end, we're gonna
figure out who the murderer is.

47
00:03:08.910 --> 00:03:10.220
So there's been clues throughout.

48
00:03:11.240 --> 00:03:13.300
It's okay if you didn't pick up on them.

49
00:03:13.300 --> 00:03:15.830
Either way, I'll tell you the answer.

50
00:03:15.830 --> 00:03:17.280
So.

51
00:03:17.280 --> 00:03:18.420
&gt;&gt; Speaker 2: Or maybe never?

52
00:03:18.420 --> 00:03:19.275
&gt;&gt; Bianca Gandolfo: Or maybe never.

53
00:03:19.275 --> 00:03:20.478
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Bianca Gandolfo: Like at

54
00:03:20.478 --> 00:03:22.885
the end it's like, tune in for

55
00:03:22.885 --> 00:03:28.734
the next version of the workshop [LAUGH]
where you'll really know who it is.

56
00:03:28.734 --> 00:03:29.349
&gt;&gt; Speaker 2: [LAUGH] Yeah.
&gt;&gt; Bianca Gandolfo: And

57
00:03:29.349 --> 00:03:31.025
then the next time,
don't reveal it either.

58
00:03:31.025 --> 00:03:33.810
[LAUGH]
&gt;&gt; Speaker 2: This one ends with another

59
00:03:33.810 --> 00:03:35.970
converter instead.

60
00:03:35.970 --> 00:03:36.470
&gt;&gt; Bianca Gandolfo: I like that

