WEBVTT

1
00:00:00.025 --> 00:00:01.173
&gt;&gt; Bianca Gandolfo: I
left you with a prompt,

2
00:00:01.173 --> 00:00:04.368
what you think is the most important
thing to know about JavaScript?

3
00:00:04.368 --> 00:00:09.860
Loosely held opinions,
what did your friends say?

4
00:00:09.860 --> 00:00:12.629
How about Jamie?
&gt;&gt; Jamie: I totally forgot,

5
00:00:12.629 --> 00:00:14.736
I was hoping you wouldn't call my name.
&gt;&gt; Bianca Gandolfo: [LAUGH]

6
00:00:14.736 --> 00:00:15.415
&gt;&gt; Group: [LAUGH]

7
00:00:15.415 --> 00:00:17.134
&gt;&gt; Jamie: Something about not mutating

8
00:00:17.134 --> 00:00:19.802
scope, right?
&gt;&gt; Speaker 4: Yeah,

9
00:00:19.802 --> 00:00:24.736
not mutating shared data.
&gt;&gt; Bianca Gandolfo: That

10
00:00:24.736 --> 00:00:25.766
you shouldn't do that?
&gt;&gt; Speaker 4: Yeah.

11
00:00:25.766 --> 00:00:26.316
&gt;&gt; Bianca Gandolfo: Yeah.

12
00:00:26.316 --> 00:00:27.894
&gt;&gt; Speaker 4: You can either change data,

13
00:00:27.894 --> 00:00:31.604
or you can share it, but don't do both.
&gt;&gt; Bianca Gandolfo: Yeah, cool,

14
00:00:31.604 --> 00:00:36.137
I like that, that's an important
thing to know in general.

15
00:00:36.137 --> 00:00:39.215
Cool, how about Eddie?
&gt;&gt; Eddie: [COUGH] So

16
00:00:39.215 --> 00:00:43.205
Cameron talked about how
JavaScript is everywhere,

17
00:00:43.205 --> 00:00:46.061
in absolutely every browser.
&gt;&gt; Bianca Gandolfo: Mm-hm.

18
00:00:46.061 --> 00:00:48.065
&gt;&gt; Eddie: And then Chris talked about

19
00:00:48.065 --> 00:00:52.987
knowing how to read with documentation.
&gt;&gt; Bianca Gandolfo: Yeah, that's a skill.

20
00:00:52.987 --> 00:00:56.253
Some people think, they glance at the
documentation, they don't understand it,

21
00:00:56.253 --> 00:00:57.760
that they'll never understand it.

22
00:00:57.760 --> 00:01:01.772
And that they need to watch
YouTube videos, or something.

23
00:01:01.772 --> 00:01:05.430
Most documentation is structured,
it's very similar.

24
00:01:05.430 --> 00:01:09.744
And once you kinda get the idea of how to
read the documentation, your life gets so

25
00:01:09.744 --> 00:01:10.513
much better.

26
00:01:10.513 --> 00:01:15.384
And then you start reading the source
code of your favorite libraries,

27
00:01:15.384 --> 00:01:22.080
then you start reading the language spec,
it just gets deeper and deeper, maybe not.

28
00:01:22.080 --> 00:01:23.904
But that's what I like.

29
00:01:23.904 --> 00:01:27.972
Cool, what about here in the front row,
the gray, and

30
00:01:27.972 --> 00:01:33.249
black sweater crew?
&gt;&gt; Speaker 6: I

31
00:01:33.249 --> 00:01:38.410
think we both are just
brainstorming an idea of how,

32
00:01:38.410 --> 00:01:42.555
first of all, how deep that question is.

33
00:01:42.555 --> 00:01:48.079
And what applies to any language
would be just trying to understand,

34
00:01:48.079 --> 00:01:52.363
how is that language intended
to be written as, as for

35
00:01:52.363 --> 00:01:54.669
as the best practice?
&gt;&gt; Bianca Gandolfo: Mm-hm.

36
00:01:54.669 --> 00:01:56.660
&gt;&gt; Speaker 6: Which I think you and

37
00:01:56.660 --> 00:02:00.730
I agree with the idea of trial and error.

38
00:02:00.730 --> 00:02:05.598
And also trying to develop our knowledge
as we are getting more experienced

39
00:02:05.598 --> 00:02:09.801
with whatever language we're writing.
&gt;&gt; Bianca Gandolfo: Mm-hm, cool.

40
00:02:09.801 --> 00:02:10.472
&gt;&gt; Speaker 6: That makes sense?

41
00:02:10.472 --> 00:02:11.183
&gt;&gt; Bianca Gandolfo: I like that.

42
00:02:11.183 --> 00:02:15.325
She's like, I didn't say that.

43
00:02:15.325 --> 00:02:19.255
[LAUGH] I was eating a donut in my break,
I wasn't talking about JavaScript.

44
00:02:19.255 --> 00:02:19.794
&gt;&gt; Group: [LAUGH]

45
00:02:19.794 --> 00:02:20.473
&gt;&gt; Bianca Gandolfo: What about you guys?

46
00:02:20.473 --> 00:02:21.678
&gt;&gt; Speaker 7: He said,

47
00:02:21.678 --> 00:02:25.917
what was your name again?
&gt;&gt; Dan: Dan.

48
00:02:25.917 --> 00:02:27.502
&gt;&gt; Speaker 7: Dan said that it does

49
00:02:27.502 --> 00:02:30.680
crazy things.
&gt;&gt; Bianca Gandolfo: Yeah, yeah,

50
00:02:30.680 --> 00:02:35.551
I like to think of it as,
know what can go wrong.

51
00:02:35.551 --> 00:02:38.631
It's one of the most important
things to know about JavaScript,

52
00:02:38.631 --> 00:02:40.780
is know what can go wrong.

53
00:02:40.780 --> 00:02:45.031
Because things are definitely
gonna go wrong, and being able to

54
00:02:45.031 --> 00:02:49.992
anticipate those things ahead of time
will help you write bug-free code,

55
00:02:49.992 --> 00:02:53.467
especially with something
as crazy as JavaScript.

56
00:02:53.467 --> 00:02:56.380
Awesome, so
we're gonna start talking about functions.

57
00:02:56.380 --> 00:02:57.606
I threw you guys in the deep end,

58
00:02:57.606 --> 00:02:59.387
we already have been
using a lot of functions.

59
00:02:59.387 --> 00:03:02.838
We already implemented map, and
Each, and filter, and used them.

60
00:03:02.838 --> 00:03:07.956
But we're gonna go into
the specifics on how things work,

61
00:03:07.956 --> 00:03:13.397
so we have a super clear idea on
how exactly our code executes.

62
00:03:13.397 --> 00:03:14.270
I think that's really important.

63
00:03:14.270 --> 00:03:19.093
The order in which things execute,
and trace things through,

64
00:03:19.093 --> 00:03:23.100
functions and values,
as they go through our code.

65
00:03:25.452 --> 00:03:30.580
All right, so I'm gonna give you guys
a little bit of an anatomy lesson.

66
00:03:30.580 --> 00:03:35.423
And then I'm going to let
you guys do a scavenger hunt

67
00:03:35.423 --> 00:03:39.950
on the next slide, just for
a couple of minutes.

68
00:03:39.950 --> 00:03:43.219
And we're gonna come back, and
we're gonna talk about what we found.

69
00:03:43.219 --> 00:03:48.320
So the anatomy here,
I wish I could stand up and point,

70
00:03:48.320 --> 00:03:53.740
but I'll use my mouse,
is there are many pieces of a function.

71
00:03:55.020 --> 00:03:59.332
And a couple of pieces that
are confusing to people, especially,

72
00:03:59.332 --> 00:04:04.260
are the difference between defining
a function, and invoking a function,

73
00:04:04.260 --> 00:04:06.500
or calling the function, right?

74
00:04:06.500 --> 00:04:10.760
So when we define a function,
it's static, it's not been run.

75
00:04:10.760 --> 00:04:15.637
Anything in the body of the function,
which is in between these two

76
00:04:15.637 --> 00:04:20.793
curly brackets, does not run until
call time, or when you invoke it.

77
00:04:20.793 --> 00:04:24.481
And you only invoke it using curly
brackets, or using a method like,

78
00:04:24.481 --> 00:04:26.530
call or apply, something like that.

79
00:04:27.640 --> 00:04:31.509
So if you don't see these brackets,
this function never runs.

80
00:04:31.509 --> 00:04:34.100
Seems obvious, but
something that we often forget.

81
00:04:34.100 --> 00:04:36.683
And we're like,
why isn't this doing anything?

82
00:04:36.683 --> 00:04:39.260
And you're like,
well I didn't call the function.

83
00:04:39.260 --> 00:04:43.332
Or this function,
the name I"m referring to is misspelled.

84
00:04:43.332 --> 00:04:47.418
Sometimes I write the word function wrong,
I like to switch the C and

85
00:04:47.418 --> 00:04:50.018
the N, is there anyone else that do that?

86
00:04:50.018 --> 00:04:54.756
Fucntion, yeah, that's how I roll.

87
00:04:54.756 --> 00:04:58.690
So we have a function name,
we have the parameters.

88
00:04:58.690 --> 00:05:00.722
The parameters are variables, right?

89
00:05:00.722 --> 00:05:02.960
They don't hold a value until it's called.

90
00:05:02.960 --> 00:05:08.283
And the arguments are what you pass
to the function, they have values.

91
00:05:08.283 --> 00:05:10.973
So we often use these
terms interchangeably, but

92
00:05:10.973 --> 00:05:12.710
they do mean different things.

93
00:05:14.650 --> 00:05:15.260
So just keep that in mind.

94
00:05:15.260 --> 00:05:19.199
Parameters are variables,
they have no value until called,

95
00:05:19.199 --> 00:05:21.400
arguments are the actual value.

96
00:05:21.400 --> 00:05:26.747
It gets a little bit tricky when we're
kind of walking through the function,

97
00:05:26.747 --> 00:05:29.057
and the parameters have a value.

98
00:05:29.057 --> 00:05:32.231
But just keep that in mind
that they're different.

99
00:05:32.231 --> 00:05:39.880
Okay, any questions about this
little chart, anatomy of a function?

