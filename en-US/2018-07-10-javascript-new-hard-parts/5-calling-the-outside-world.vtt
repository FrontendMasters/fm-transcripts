WEBVTT

1
00:00:00.400 --> 00:00:01.130
&gt;&gt; Will Sentance: Line one,

2
00:00:01.130 --> 00:00:04.140
James, what are we doing?
&gt;&gt; James: You are declaring

3
00:00:04.140 --> 00:00:06.110
a function called PrintHello
&gt;&gt; Will Sentance: Excellent,

4
00:00:06.110 --> 00:00:08.060
good job from James.

5
00:00:08.060 --> 00:00:10.040
Line two, who have I not called?

6
00:00:10.040 --> 00:00:13.126
I called on almost every person now.
&gt;&gt; Will Sentance: I've called on every

7
00:00:13.126 --> 00:00:16.080
single person, Mike,
line two, what are we doing?

8
00:00:16.080 --> 00:00:17.070
&gt;&gt; Mike: The function block for

9
00:00:17.070 --> 00:00:22.254
one sec is declared.
&gt;&gt; Will Sentance: Block for one sec.

10
00:00:22.254 --> 00:00:27.300
And for we're not specifying how it
works necessarily, but this function,

11
00:00:27.300 --> 00:00:33.460
when it's called, is gonna sit on
the call stack for 1,000 milliseconds.

12
00:00:33.460 --> 00:00:36.110
This is not a function that's
sending work off the background.

13
00:00:36.110 --> 00:00:38.020
It's gonna sit there for
1,000 milliseconds.

14
00:00:38.020 --> 00:00:41.050
Sonia can you think of a way in which
I could write that functions such

15
00:00:41.050 --> 00:00:41.670
that I did that?

16
00:00:44.560 --> 00:00:46.770
What could I do that would
take a 1,000 milliseconds?

17
00:00:46.770 --> 00:00:48.436
It's gotta be in the que of jobs threads,

18
00:00:48.436 --> 00:00:50.375
it's gonna be doing
something very very fast.

19
00:00:50.375 --> 00:00:52.270
Mini-tasks, very very fast.

20
00:00:52.270 --> 00:00:53.970
Ben, what can you think of?
&gt;&gt; Ben: Looping.

21
00:00:53.970 --> 00:00:55.320
&gt;&gt; Will Sentance: Looping, exactly

22
00:00:55.320 --> 00:00:56.290
looping will do that.

23
00:00:56.290 --> 00:00:59.190
Lots of little processing steps very,
very fast.

24
00:00:59.190 --> 00:01:00.420
It's gonna be a big loop to

25
00:01:00.420 --> 00:01:02.320
last 1000 milliseconds in
a modern JavaScript engine.

26
00:01:02.320 --> 00:01:03.070
Big old loop.

27
00:01:03.070 --> 00:01:06.090
But there is a loop long enough
that would last 1000 milliseconds.

28
00:01:06.090 --> 00:01:07.660
You're not doing it outside of JavaScript.

29
00:01:07.660 --> 00:01:09.280
It's very much pure JavaScript.

30
00:01:09.280 --> 00:01:13.560
And therefore is blocking us continuing in
our code when that function is called for

31
00:01:13.560 --> 00:01:14.920
1000 milliseconds.

32
00:01:14.920 --> 00:01:15.890
Excellent.

33
00:01:15.890 --> 00:01:20.685
Now, now Mike, we are gonna call

34
00:01:20.685 --> 00:01:27.860
setTimeout with the argument,
the print hello

35
00:01:27.860 --> 00:01:32.310
function definition we're definitely
not calling it and the argument 0.

36
00:01:32.310 --> 00:01:38.150
So Mike try to talk me through
what's going to happen here,

37
00:01:38.150 --> 00:01:40.970
and it's going to be in terms of
our web browser features isn't it.

38
00:01:40.970 --> 00:01:45.050
So what's going to happen here Mike?
&gt;&gt; Mike: I'm not sure.

39
00:01:45.050 --> 00:01:46.097
I just know it's not.
&gt;&gt; Will Sentance: So

40
00:01:46.097 --> 00:01:49.410
what is setTimeout been set up.
&gt;&gt; Ben: It's going to

41
00:01:49.410 --> 00:01:51.820
set up a local execution context.
&gt;&gt; Will Sentance: Is it?

42
00:01:51.820 --> 00:01:53.650
&gt;&gt; Ben: No, it's going to call a facade

43
00:01:53.650 --> 00:01:54.763
function.
&gt;&gt; Will Sentance: Ha.

44
00:01:54.763 --> 00:01:56.024
SetTimeout does,

45
00:01:56.024 --> 00:01:59.420
what does it do anything in JavaScript?
&gt;&gt; Ben: No.

46
00:01:59.420 --> 00:02:00.300
&gt;&gt; Will Sentance: It does nothing in

47
00:02:00.300 --> 00:02:01.210
JavaScript.

48
00:02:01.210 --> 00:02:04.640
Instead, it is going to, it's a label,

49
00:02:04.640 --> 00:02:07.900
it's a facade function for
a web browser feature.

50
00:02:07.900 --> 00:02:09.400
Which feature, Ben?
&gt;&gt; Ben: Timer.

51
00:02:09.400 --> 00:02:10.420
&gt;&gt; Will Sentance: Timer, so

52
00:02:10.420 --> 00:02:15.208
it's going to spin up
a web browser feature,

53
00:02:15.208 --> 00:02:19.310
the feature timer.

54
00:02:19.310 --> 00:02:23.340
And it's going to take in the two
important things it needs to know.

55
00:02:23.340 --> 00:02:31.020
And in the web browser,
how many milliseconds, Mike,

56
00:02:31.020 --> 00:02:34.725
is this timer going to be running for?
&gt;&gt; Mike: Zero.

57
00:02:34.725 --> 00:02:37.902
&gt;&gt; Will Sentance: Zero milliseconds and so

58
00:02:37.902 --> 00:02:43.651
at say one millisecond,
which is when we're

59
00:02:43.651 --> 00:02:49.390
kicking this off, is this timer complete?

60
00:02:49.390 --> 00:02:50.280
Mike?

61
00:02:50.280 --> 00:02:51.940
It's instantly complete.

62
00:02:51.940 --> 00:02:53.330
Exactly.

63
00:02:53.330 --> 00:02:55.280
And on completion, what do we want to do?

64
00:02:55.280 --> 00:02:58.770
We want to call print hello.

65
00:02:58.770 --> 00:03:05.152
We want to pass it back into JavaScript or
refer to it in JavaScript and

66
00:03:05.152 --> 00:03:09.921
kick it off running in JavaScript.
&gt;&gt; Will Sentance: So

67
00:03:09.921 --> 00:03:11.613
print hello is immediately ready to run,
so

68
00:03:11.613 --> 00:03:14.354
do we add it straight to the call stack?
&gt;&gt; off screen: No.

69
00:03:14.354 --> 00:03:15.574
&gt;&gt; Will Sentance: Why not?

70
00:03:15.574 --> 00:03:16.450
&gt;&gt; off screen: It's

71
00:03:16.450 --> 00:03:18.710
blocking.
&gt;&gt; Will Sentance: No.

72
00:03:18.710 --> 00:03:19.760
But it's here ready.

73
00:03:19.760 --> 00:03:21.470
It's ready to go back on.
&gt;&gt; off screen: Because you're not in the

74
00:03:21.470 --> 00:03:25.600
JavaScript context or in browser's world.
&gt;&gt; Will Sentance: But we are.

75
00:03:25.600 --> 00:03:26.760
We're back in JavaScript context.

76
00:03:26.760 --> 00:03:29.720
Look.
Next line is two milliseconds.

77
00:03:29.720 --> 00:03:30.940
Why can't this guy look come back.

78
00:03:30.940 --> 00:03:32.689
We said whenever it's ready
come back on the call stack.

79
00:03:35.900 --> 00:03:37.339
Yeah, you're right though.

80
00:03:37.339 --> 00:03:44.858
The next line of code we're going to
hit at 2 milliseconds is block 41 sec.

81
00:03:44.858 --> 00:03:48.085
We're not sure how it's going to work but
we do know when we go into it,

82
00:03:48.085 --> 00:03:50.769
we're going to spend how many
milliseconds inside of it,

83
00:03:50.769 --> 00:03:53.660
Josh?
&gt;&gt; Josh: Milliseconds?

84
00:03:53.660 --> 00:03:55.510
1000.
&gt;&gt; Will Sentance: 1000, good.

85
00:03:55.510 --> 00:03:59.370
Well done to Josh, by the way, for his
good second to millisecond adjustments.

86
00:03:59.370 --> 00:04:02.830
Exactly, plus 1000 milliseconds.

87
00:04:02.830 --> 00:04:07.904
That's going to sit on our call stack,
so we had global on the bottom,

88
00:04:07.904 --> 00:04:12.856
block for one sec
&gt;&gt; Will Sentance: Is gonna sit on our

89
00:04:12.856 --> 00:04:16.190
call stack for 1000 milliseconds.

90
00:04:18.150 --> 00:04:20.950
Maybe during it,
print hello is ready to go.

91
00:04:20.950 --> 00:04:23.260
Maybe during it,
it jumps on top and starts running.

92
00:04:24.330 --> 00:04:24.850
Does it do that?

93
00:04:24.850 --> 00:04:27.720
That would be a terrible language.
&gt;&gt; [LAUGH]

94
00:04:27.720 --> 00:04:28.370
&gt;&gt; Will Sentance: Maybe possible.

95
00:04:28.370 --> 00:04:29.910
I mean it's certainly possible.

96
00:04:29.910 --> 00:04:36.770
But that would be very arbitrary, very
arbitrary for when our code would execute.

97
00:04:36.770 --> 00:04:42.030
So it definitely can't do,
as Michelle said, it definitely can't

98
00:04:42.030 --> 00:04:46.680
pass print hello back onto the call
stack during another function execution.

99
00:04:46.680 --> 00:04:47.540
That looks pretty clear.

100
00:04:47.540 --> 00:04:49.370
It kind of sort of random arbitrary.

101
00:04:49.370 --> 00:04:52.570
But maybe once that function's
finished executing, yeah,

102
00:04:52.570 --> 00:04:55.740
once that function's finished
executing and we get block for

103
00:04:55.740 --> 00:05:02.180
one sec off the call stack and
we return our thread back out

104
00:05:02.180 --> 00:05:07.660
at an 1002 milliseconds, maybe now print
hello is allowed back on the call stack.

105
00:05:07.660 --> 00:05:09.400
Who thinks it's allowed
back on the call stack?

106
00:05:09.400 --> 00:05:10.770
I'm doing my the answer's no voice.

107
00:05:10.770 --> 00:05:11.630
Who thinks it's allowed

108
00:05:11.630 --> 00:05:14.730
back on the call stack?
&gt;&gt; Alec: Maybe.

109
00:05:14.730 --> 00:05:16.150
&gt;&gt; Will Sentance: Yeah, Alec, maybe,

110
00:05:16.150 --> 00:05:17.829
&gt;&gt; [LAUGH]

111
00:05:17.829 --> 00:05:20.654
&gt;&gt; Will Sentance: Unfortunately, no.

112
00:05:20.654 --> 00:05:23.880
Even though poor little print hello,
it's been sitting there.

113
00:05:23.880 --> 00:05:28.385
I'm ready to run, run me,
been ready to run for, at this point,

114
00:05:28.385 --> 00:05:31.560
1,001 milliseconds from when
it was first kicked off.

115
00:05:31.560 --> 00:05:33.550
The timer was kicked off,
it was instantly complete,

116
00:05:33.550 --> 00:05:38.230
print hello was instantly ready to come
back on, but it wasn't allowed back on.

117
00:05:39.270 --> 00:05:44.510
We'll see the exact rule why,
actually we're gonna hit next console log.

118
00:05:46.230 --> 00:05:47.240
Me, good old me first.

119
00:05:47.240 --> 00:05:51.990
If it ever says me first you know
it's gonna console log it first.

120
00:05:51.990 --> 00:05:55.440
There it is, me first.

121
00:05:55.440 --> 00:06:02.079
At 1002 milliseconds.
&gt;&gt; Will Sentance: Okay.

122
00:06:02.079 --> 00:06:07.869
Now do we think at this point as we've
finished all of our global code,

123
00:06:07.869 --> 00:06:11.710
do we think now print
hello is allowed back on?

124
00:06:12.820 --> 00:06:15.160
Print Hello is now allowed back on.

125
00:06:15.160 --> 00:06:16.870
But how does it get back on?

126
00:06:18.590 --> 00:06:22.820
It turns out that we need two
more pieces to our puzzle.

127
00:06:22.820 --> 00:06:24.750
We need a fundamental rule.

128
00:06:24.750 --> 00:06:28.850
Our fundamental rule for
when deferred functionality.

129
00:06:28.850 --> 00:06:31.090
Now yes,
it was only deferred by zero milliseconds.

130
00:06:31.090 --> 00:06:35.360
But it was still thrown out of JavaScript
and associated with a web browser.

131
00:06:35.360 --> 00:06:36.489
It was thrown out of JavaScript.

132
00:06:37.620 --> 00:06:40.380
We need a rule for when that thing that's
been thrown out of JavaScript is allowed

133
00:06:40.380 --> 00:06:41.430
back into JavaScript.

134
00:06:43.250 --> 00:06:44.460
And we have one simple rule,

135
00:06:46.300 --> 00:06:50.950
I must have finished emptying my call
stack of any functionality to be run,

136
00:06:50.950 --> 00:06:55.900
and finish running all my global
synchronous code, all my codes.

137
00:06:55.900 --> 00:06:57.879
I could have 1000 console logs.

138
00:06:58.950 --> 00:06:59.570
Kind of crazy.

139
00:06:59.570 --> 00:07:04.270
I could have spun up this differed
functionality inside a function call,

140
00:07:04.270 --> 00:07:05.444
come out of it.

141
00:07:05.444 --> 00:07:09.860
Have 1000 calls, I could have a while loop
that's infinite with console logs in.

142
00:07:09.860 --> 00:07:12.650
And I'll never allow print
hello back on the call stack.

143
00:07:12.650 --> 00:07:14.650
It's never allowed back in.

144
00:07:14.650 --> 00:07:15.790
Why?

145
00:07:15.790 --> 00:07:20.340
Because when I finish my
background features work,

146
00:07:20.340 --> 00:07:23.270
print hello does not go
straight to the call stack.

147
00:07:23.270 --> 00:07:30.040
As Brian was hinting,
it goes to something called a queue.

148
00:07:30.040 --> 00:07:34.490
It gets queued up as a callback I guess.

149
00:07:34.490 --> 00:07:38.900
This has a few names, the task queue.

150
00:07:38.900 --> 00:07:41.500
Can we even call it the macro
task queue at the moment?

151
00:07:41.500 --> 00:07:45.200
But the call back queue
is a queue of functions

152
00:07:45.200 --> 00:07:46.830
that are ready to come on the call stack.

153
00:07:47.860 --> 00:07:53.550
There it is print hello, Blessing,
approximately what millisecond was

154
00:07:53.550 --> 00:07:56.280
print hello added to the call back queue?
&gt;&gt; Blessing: One millisecond.

155
00:07:56.280 --> 00:07:58.104
&gt;&gt; Will Sentance: At approximately one

156
00:07:58.104 --> 00:08:05.280
millisecond exactly, there it is one
millisecond and then we have our rule.

157
00:08:05.280 --> 00:08:07.410
When is this function
allowed back into JavaScript?

158
00:08:08.480 --> 00:08:12.920
It's allowed back into JavaScript
only when the call stack is empty and

159
00:08:12.920 --> 00:08:15.350
all our global code is finished running.

160
00:08:15.350 --> 00:08:19.180
And that rule, or the checking
of that rule, has a posh name.

161
00:08:19.180 --> 00:08:23.730
It's a little sort of process,
it's a metaphorical process.

162
00:08:23.730 --> 00:08:26.260
The whole process is looping,
and checking really fast.

163
00:08:26.260 --> 00:08:26.910
Is the course AMD?

164
00:08:26.910 --> 00:08:28.850
Is all the global code finished running?

165
00:08:28.850 --> 00:08:29.750
Has the queue got anything in it?

166
00:08:29.750 --> 00:08:30.580
Is the course AMD?

167
00:08:30.580 --> 00:08:31.490
Queue has anything?

168
00:08:31.490 --> 00:08:35.750
And that is known as the event loop.

169
00:08:37.070 --> 00:08:40.640
It's job is to say is the course AMD
finished running all it's stuff?

170
00:08:40.640 --> 00:08:42.680
Is the global code finished executing?

171
00:08:42.680 --> 00:08:43.350
Is something in the core?

172
00:08:43.350 --> 00:08:44.320
Yes there is!

173
00:08:44.320 --> 00:08:47.790
This was not empty for a long time, at
this point event loop's going no, no, no,

174
00:08:47.790 --> 00:08:51.310
we can't add anything on to the call stack
because it's got blocked for one second.

175
00:08:51.310 --> 00:08:54.180
But even then, console log's
sitting there that needs to be run.

176
00:08:54.180 --> 00:08:55.880
It's ready to be run in
the global execution context.

177
00:08:57.380 --> 00:09:01.280
Ha, at this moment the event
goes is the courser empty?

178
00:09:01.280 --> 00:09:02.120
Yes it is.

179
00:09:02.120 --> 00:09:05.969
The callback here has something in it so
print hello,

180
00:09:05.969 --> 00:09:11.290
you arefinally 1001 milliseconds after
you were deferred for 0 milliseconds,

181
00:09:11.290 --> 00:09:16.120
you are finally allowed back onto

182
00:09:16.120 --> 00:09:21.550
the call stack at 1003 milliseconds.

183
00:09:21.550 --> 00:09:23.830
And note these timings are ordinal.

184
00:09:23.830 --> 00:09:27.934
They're not, they're ordinal,
besides the cardinal ones,

185
00:09:27.934 --> 00:09:30.912
okay.
&gt;&gt; Will Sentance: Ordinal meaning it's

186
00:09:30.912 --> 00:09:33.530
about the ordering of them,
at 1003 milliseconds.

187
00:09:33.530 --> 00:09:39.350
Finally, print hello is allowed
back on our call stack,

188
00:09:39.350 --> 00:09:45.470
at 1003 milliseconds,
we print hello there it is people.

189
00:09:47.030 --> 00:09:52.510
A beautiful process of deferring our
functionality, to then only be allowed

190
00:09:52.510 --> 00:09:57.550
back into JavaScript under a certain
condition, that condition is checked for

191
00:09:57.550 --> 00:10:01.230
by this event loop that's checking it
looping very fast that is metaphorical but

192
00:10:01.230 --> 00:10:03.560
it is looping very fast
to check this condition.

193
00:10:03.560 --> 00:10:06.190
Is the callback que,
does it have something in it?

194
00:10:06.190 --> 00:10:11.810
It does allow it back on when our
call stack is entirely empty and

195
00:10:11.810 --> 00:10:16.510
our global execution context has
finished running all of it's code.

196
00:10:16.510 --> 00:10:17.910
And that's it.

197
00:10:17.910 --> 00:10:23.980
These six parts are the core of our
asynchronous model of JavaScript.

198
00:10:23.980 --> 00:10:28.370
Solution three is gonna show us that
JavaScript recently introduced two new

199
00:10:28.370 --> 00:10:30.010
additional parts to this model.

200
00:10:30.010 --> 00:10:31.850
We're gonna see them in solution three.

201
00:10:31.850 --> 00:10:37.100
But for now,
thumbs on this core six parts, memory,

202
00:10:37.100 --> 00:10:40.945
thread of execution, call stack
representing our execution context,

203
00:10:40.945 --> 00:10:45.825
our web browser features, our callback
queue where when our web browser feature

204
00:10:45.825 --> 00:10:49.570
finishes its work is where our
function is going to be sent.

205
00:10:49.570 --> 00:10:52.830
That was deferred by our facade function

206
00:10:52.830 --> 00:10:55.500
that spun up that web
browser feature timer.

207
00:10:55.500 --> 00:10:58.490
And finally, our event loop that
checks that callback queue.

208
00:10:58.490 --> 00:10:59.870
It says is something in there?

209
00:10:59.870 --> 00:11:03.460
Is our call stack good and
empty with no global code to run?

210
00:11:03.460 --> 00:11:05.790
And says okay, you're allowed back on.

