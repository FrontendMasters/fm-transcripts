WEBVTT

1
00:00:00.900 --> 00:00:01.919
&gt;&gt; Speaker 1: Let's have thumbs on it.

2
00:00:01.919 --> 00:00:04.654
You lost me long ago.
&gt;&gt; Speaker 2: [LAUGH]

3
00:00:04.654 --> 00:00:05.669
&gt;&gt; Speaker 1: It was a mistake coming

4
00:00:05.669 --> 00:00:06.510
here today.

5
00:00:06.510 --> 00:00:08.452
I'm clear.
&gt;&gt; Speaker 2: [LAUGH]

6
00:00:08.452 --> 00:00:10.040
&gt;&gt; Speaker 1: I have clarifications.

7
00:00:10.040 --> 00:00:12.550
Everybody, it's okay to
have clarifications.

8
00:00:12.550 --> 00:00:13.660
Michelle has one.

9
00:00:13.660 --> 00:00:15.030
Alec has one.

10
00:00:15.030 --> 00:00:15.570
Paul has one.

11
00:00:15.570 --> 00:00:17.890
And Paul, you kick us off.
&gt;&gt; Speaker 3: I'm just curious if there

12
00:00:17.890 --> 00:00:23.025
are any common browser methods or
others that drop to the microtask

13
00:00:23.025 --> 00:00:27.800
queues instead of the call back queue?
&gt;&gt; Speaker 1: So there are, so

14
00:00:27.800 --> 00:00:28.620
you can go and look up.

15
00:00:28.620 --> 00:00:34.030
The way you find out, you have the jobs
at spec cuz actually MDM doesn't say,

16
00:00:34.030 --> 00:00:35.190
I don't think.

17
00:00:35.190 --> 00:00:38.040
You got the jobs at spec and
you see where does it go?

18
00:00:38.040 --> 00:00:38.950
Which queue does it go to?

19
00:00:38.950 --> 00:00:44.494
Or say it'll say certain task like

20
00:00:44.494 --> 00:00:49.480
I believe event dorm changes.

21
00:00:49.480 --> 00:00:53.130
Dorm manipulation changes I believe,
you have to check this yourself,

22
00:00:53.130 --> 00:00:54.360
go to the job queues.

23
00:00:54.360 --> 00:00:56.190
I will say in the spec.

24
00:00:56.190 --> 00:00:59.181
The task triggered by the dominant
page is in the job queue.

25
00:00:59.181 --> 00:01:01.960
Whenever you see job queue
it means micro task queue,

26
00:01:01.960 --> 00:01:06.061
versus task queue which is typically
the term they use for the call back queue.

27
00:01:06.061 --> 00:01:09.231
So you can see on a feature by
feature basis in the spec which one it

28
00:01:09.231 --> 00:01:10.070
get's sent to.

29
00:01:10.070 --> 00:01:12.350
And by the way it's a spec.

30
00:01:12.350 --> 00:01:15.990
Specs are, we may or
may not implement this way.

31
00:01:15.990 --> 00:01:20.660
So for a long time,
browsers other than Chrome

32
00:01:20.660 --> 00:01:25.020
through promise deferred functionality
not on the micro task queue.

33
00:01:25.020 --> 00:01:26.460
They put it on the back
of the call back queue.

34
00:01:28.350 --> 00:01:29.210
This is a spec.

35
00:01:29.210 --> 00:01:31.240
A spec is like this is how
it should be implemented.

36
00:01:31.240 --> 00:01:32.390
It's up to you.

37
00:01:32.390 --> 00:01:35.970
Now, I'm pretty sure they all implement it
the same way with the micro task queue.

38
00:01:35.970 --> 00:01:37.260
But it's not by default.

39
00:01:37.260 --> 00:01:39.340
I mean it's not like that
is how the world must,

40
00:01:39.340 --> 00:01:41.840
now it's just guidance by
the designs of your JavaScript.

41
00:01:43.020 --> 00:01:46.710
Kind of crazy, but now you know why

42
00:01:46.710 --> 00:01:50.210
behind the scenes is these two
things that might be in conflict.

43
00:01:50.210 --> 00:01:53.320
One comes first, or the other,
in different browsers.

44
00:01:53.320 --> 00:01:55.000
All right, great question, Paul.

45
00:01:55.000 --> 00:01:56.500
Very nice.

46
00:01:56.500 --> 00:01:57.763
Was it, who else had a clarification?

47
00:01:57.763 --> 00:01:58.967
Michelle?
&gt;&gt; Speaker 4: So

48
00:01:58.967 --> 00:02:01.471
when future data.value gets set,

49
00:02:01.471 --> 00:02:07.229
it kind of seems like that escaped all of
the handling in the stack and everything,

50
00:02:07.229 --> 00:02:12.779
and it's just kind of magically done
almost instantaneously, on complete.

51
00:02:12.779 --> 00:02:14.270
Are we missing a step there or

52
00:02:14.270 --> 00:02:17.540
is it magic?
&gt;&gt; Speaker 1: Everything that you do is

53
00:02:17.540 --> 00:02:21.470
being handled in an event loop.

54
00:02:21.470 --> 00:02:25.840
But we can assume in that case that
it's giving absolute priority,

55
00:02:25.840 --> 00:02:29.550
because it is done before any
of this function execution work.

56
00:02:29.550 --> 00:02:33.770
So the thing that would block
our functionality being updated.

57
00:02:33.770 --> 00:02:39.290
So this value here has no interest except
in the functionality, it's kicking off.

58
00:02:39.290 --> 00:02:44.770
So for our purposes, all that matters is
the functionality that's been kicked off.

59
00:02:44.770 --> 00:02:49.120
So this always takes precedence,
as far as I can tell,

60
00:02:49.120 --> 00:02:54.200
over anything that would
lead us to be surprised

61
00:02:54.200 --> 00:02:56.740
the display is being delayed running.
&gt;&gt; Speaker 4: So just to-

62
00:02:56.740 --> 00:02:57.750
&gt;&gt; Speaker 1: It'll just be one

63
00:02:57.750 --> 00:02:58.460
final thing, Michelle.

64
00:02:58.460 --> 00:03:01.510
The only bottleneck on display running is

65
00:03:01.510 --> 00:03:05.820
our event loop prioritizing
synchronous code, not something else.

66
00:03:05.820 --> 00:03:10.070
So that the value being
the block on running,

67
00:03:10.070 --> 00:03:11.820
I can't see any evidence that
would have been blocked.

68
00:03:11.820 --> 00:03:14.110
So we don't need to worry
about when it gets updated.

69
00:03:14.110 --> 00:03:15.502
It's always gonna take precedence.

70
00:03:15.502 --> 00:03:19.060
Okay, as far as I can tell.
&gt;&gt; Speaker 4: So it's not so

71
00:03:19.060 --> 00:03:24.140
much that if you were able to somehow
magically preempt in your global contacts,

72
00:03:24.140 --> 00:03:28.360
and call value that you would have it,
but that value is made

73
00:03:28.360 --> 00:03:32.750
available to on fulfill at that point.
&gt;&gt; Speaker 1: Correct, and

74
00:03:32.750 --> 00:03:38.250
actually just this morning I was testing
whether you can view value earlier.

75
00:03:38.250 --> 00:03:41.120
And so I think value's assignment

76
00:03:41.120 --> 00:03:46.180
still happens after all of
the call stack work is done.

77
00:03:46.180 --> 00:03:48.290
So it's at the end of
the event loop cycle.

78
00:03:48.290 --> 00:03:51.160
In other words, the event loop is gonna
always grab all of the call stack,

79
00:03:51.160 --> 00:03:53.911
always gonna do all the synchronous
code first before add this value.

80
00:03:53.911 --> 00:03:58.589
But that has no implications because it's
never gonna trigger a function anyway

81
00:03:58.589 --> 00:04:00.306
until all that work is done.

82
00:04:00.306 --> 00:04:03.600
So if that happens at the very end,
and then it triggers the function,

83
00:04:03.600 --> 00:04:06.140
we know that functions are not going to
be triggered until that point anyway, so

84
00:04:06.140 --> 00:04:07.330
who cares when that gets updated.

85
00:04:08.800 --> 00:04:11.050
Okay, there was one other one.

86
00:04:11.050 --> 00:04:13.510
Rick, or it was Alex, sorry, Alec.
&gt;&gt; Speaker 5: Yeah,

87
00:04:13.510 --> 00:04:16.950
I think it's kind of similar
to that last question.

88
00:04:16.950 --> 00:04:22.640
I was wondering if the onFulfilled
functions get added to

89
00:04:22.640 --> 00:04:29.840
the microtask queue and
then value is updated in the meantime.

90
00:04:29.840 --> 00:04:32.645
Like I'm not sure if
that would ever happen.

91
00:04:32.645 --> 00:04:33.836
&gt;&gt; Speaker 1: What a good question.

92
00:04:33.836 --> 00:04:35.132
The microtask queue,
that's such an interesting question.

93
00:04:35.132 --> 00:04:38.420
The microtask queue is designed that
the event group doesn't leave it

94
00:04:39.980 --> 00:04:43.170
until it's finished all tasks in it.

95
00:04:43.170 --> 00:04:47.438
Meaning, by the way, if you had inside
display and auto resolve promise,

96
00:04:47.438 --> 00:04:51.843
it would instantly trigger a function to
be passed to the microtask queue to be

97
00:04:51.843 --> 00:04:52.750
clear on that.

98
00:04:52.750 --> 00:04:57.513
The promise object auto complete,
auto had it's value and therefore

99
00:04:57.513 --> 00:05:02.990
triggered the unfulfillment function or
the functions in unfulfillment.

100
00:05:02.990 --> 00:05:05.330
They would be added straight
to the microtask queue.

101
00:05:05.330 --> 00:05:08.500
The event would never
leave the microtask queue.

102
00:05:08.500 --> 00:05:11.270
It would never actually reach
the callback queue again.

103
00:05:11.270 --> 00:05:14.400
You can starve the callback queue,
that means prevent the callback queues

104
00:05:14.400 --> 00:05:17.408
functions from running by
the microtask queue by it's design.

105
00:05:17.408 --> 00:05:21.770
The micro microtask is designed that when
the event loop is grabbing things from it,

106
00:05:21.770 --> 00:05:22.890
as long as there's something in there,

107
00:05:22.890 --> 00:05:26.360
it ain't leaving even if
you're adding more as you go.

108
00:05:26.360 --> 00:05:28.973
So you can always sort of think
of it as an infinite while

109
00:05:28.973 --> 00:05:31.543
loop on picking out tasks
from the microtask queue.

110
00:05:31.543 --> 00:05:33.230
It's very, very interesting.

111
00:05:33.230 --> 00:05:35.330
I wanna add a few extra
conditions to this.

112
00:05:35.330 --> 00:05:39.800
Everybody who knows promises knows there's
another property on here called status.

113
00:05:39.800 --> 00:05:41.601
It has 3 values.

114
00:05:41.601 --> 00:05:46.222
It can be pending, resolved,

115
00:05:46.222 --> 00:05:49.252
projected, okay?

116
00:05:49.252 --> 00:05:53.980
It defaults to pending when we
first return out the object.

117
00:05:53.980 --> 00:05:56.580
That just means I don't yet
have a value in value.

118
00:05:56.580 --> 00:05:57.950
I don't yet have a thing for the value.

119
00:05:57.950 --> 00:06:00.380
My background work is
no where near done yet.

120
00:06:00.380 --> 00:06:05.186
When this background work
successfully responds, that status,

121
00:06:05.186 --> 00:06:08.786
property, we can even write it in,
that status,

122
00:06:08.786 --> 00:06:12.379
property.
&gt;&gt; Speaker 1: And

123
00:06:12.379 --> 00:06:13.970
this is a visible property.

124
00:06:13.970 --> 00:06:17.090
That status, property, becomes resolved.

125
00:06:17.090 --> 00:06:22.170
And actually it's that that triggers
theonFulfillment array of functions to run

126
00:06:22.170 --> 00:06:22.888
with this value.

127
00:06:22.888 --> 00:06:25.024
But [SOUND], whatever.

128
00:06:25.024 --> 00:06:28.430
There's another output the status
can get which is rejected.

129
00:06:29.640 --> 00:06:33.140
Rejected is when there's some
error in the background work.

130
00:06:33.140 --> 00:06:36.830
Something errored, maybe the server
status came back with an error.

131
00:06:36.830 --> 00:06:40.100
You didn't get a successful response.

132
00:06:40.100 --> 00:06:44.160
And that's not gonna trigger
a OnFulfillment array of functions.

133
00:06:44.160 --> 00:06:47.790
It's gonna trigger a different
array of functions on rejection.

134
00:06:49.160 --> 00:06:52.840
And those functions,
how do we get functions in there?

135
00:06:52.840 --> 00:06:56.306
And that array,
how do we get functions in there?

136
00:06:56.306 --> 00:06:57.084
&gt;&gt; Speaker 6: [INAUDIBLE]

137
00:06:57.084 --> 00:06:57.824
&gt;&gt; Speaker 1: Correct,

138
00:06:57.824 --> 00:07:02.100
we parse them to future data,
not .then but .catch.

139
00:07:02.100 --> 00:07:04.750
And the function we pass
the .catch will be stored in

140
00:07:04.750 --> 00:07:08.170
the rejection array of functions and
be triggered there.

141
00:07:08.170 --> 00:07:12.970
We can also parse it as
the second function to then,

142
00:07:12.970 --> 00:07:16.820
parsing here, like I don't know,
error function.

143
00:07:16.820 --> 00:07:20.420
And that will be parsed,
not to OnFulfillment, but

144
00:07:20.420 --> 00:07:24.810
to a different array of functions
in here called, onRejection.

145
00:07:24.810 --> 00:07:29.230
So if we get an error in any of this
process, it will not trigger display.

146
00:07:29.230 --> 00:07:33.590
Instead, it will trigger the array of
functions known as the onRejection array.

