WEBVTT

1
00:00:01.960 --> 00:00:05.220
&gt;&gt; Will Sentance: So
we saw there that we've now augmented

2
00:00:06.840 --> 00:00:13.570
our world view of what our
JavaScript engine looks like

3
00:00:13.570 --> 00:00:19.330
by adding facade functions,
known as web browser APIs.

4
00:00:19.330 --> 00:00:23.410
That means features of the web
browser that we can interface with,

5
00:00:23.410 --> 00:00:26.530
interact with, from within JavaScript
using these functions that don't really do

6
00:00:26.530 --> 00:00:27.950
anything in JavaScript.

7
00:00:27.950 --> 00:00:32.000
Instead they're facades for
web browser features.

8
00:00:32.000 --> 00:00:37.440
When we did so we parsed the design
to accept certain inputs.

9
00:00:37.440 --> 00:00:40.010
And the first one here in
set timer is the function

10
00:00:40.010 --> 00:00:42.570
that we want to then parse to the queue.

11
00:00:42.570 --> 00:00:47.840
And then back in the JavaScript once the
event loop goes, yeah, you are good to go,

12
00:00:47.840 --> 00:00:51.020
you've finished running all your
synchronous JavaScript code, nothing on

13
00:00:51.020 --> 00:00:54.810
the course stack and you finished running
your console log there at the bottom.

14
00:00:54.810 --> 00:00:58.720
So now that your third functionality
that was parsed out of JavaScript to

15
00:00:58.720 --> 00:01:03.960
the web browser is allowed back in
the Y to call back Q to be executed

16
00:01:03.960 --> 00:01:06.470
on the call stack, all right.

17
00:01:06.470 --> 00:01:11.760
That was solution two,
let's see what our dear friends

18
00:01:11.760 --> 00:01:15.970
in the script design
team added to this model.

19
00:01:15.970 --> 00:01:18.203
They added a readability enhancer,

20
00:01:18.203 --> 00:01:22.474
called Promises.
&gt;&gt; Will Sentance: We said that our set

21
00:01:22.474 --> 00:01:26.999
time out,
I set time out is only doing stuff

22
00:01:26.999 --> 00:01:31.870
outside of JavaScript in the web browser.

23
00:01:31.870 --> 00:01:33.920
It ain't doing anything of
interest in the web browser.

24
00:01:35.290 --> 00:01:40.510
Well, promises are two pronged,
they do two things.

25
00:01:40.510 --> 00:01:44.070
One is outside of JavaScript,
in the web browser.

26
00:01:44.070 --> 00:01:45.150
They spin up.

27
00:01:45.150 --> 00:01:48.190
They get started,
some background web browser feature.

28
00:01:48.190 --> 00:01:49.000
They get it going.

29
00:01:49.000 --> 00:01:51.320
Just like that time I got the timer going.

30
00:01:51.320 --> 00:01:56.110
So there's a new type of facade
function that yes, does that.

31
00:01:56.110 --> 00:02:00.650
But simultaneously it does
something in JavaScript.

32
00:02:01.650 --> 00:02:07.070
It's going to produce a special
object known as a promise object,

33
00:02:07.070 --> 00:02:09.330
that's going to be returned immediately.

34
00:02:09.330 --> 00:02:11.150
Set time out returns in JavaScript.

35
00:02:11.150 --> 00:02:12.910
The blue stuff here is
all web browser stuff.

36
00:02:12.910 --> 00:02:14.700
It doesn't do anything in JavaScript.

37
00:02:14.700 --> 00:02:21.918
These new facade functions, ones like
fetch, these new web browser facades for

38
00:02:21.918 --> 00:02:27.344
web browser features,
they're uploading to Java Script.

39
00:02:27.344 --> 00:02:31.311
Like this one Fetch, is going to
immediately return something into

40
00:02:31.311 --> 00:02:34.581
Java Script,
a placeholder object known as a promise,

41
00:02:34.581 --> 00:02:39.970
that's gonna have a property on it
called value, there's initially nothing.

42
00:02:39.970 --> 00:02:46.320
That value is going to automatically be
filled in later on when the background web

43
00:02:46.320 --> 00:02:51.590
browser task for example going to get
data from Twitter, bringing it back.

44
00:02:51.590 --> 00:02:54.630
When that background web
browser task finishes,

45
00:02:54.630 --> 00:02:59.580
it's going to store in
that immediately returned

46
00:02:59.580 --> 00:03:05.320
object on its value property the data
that came back from the server.

47
00:03:05.320 --> 00:03:09.940
We're now gonna do two things
with these facade functions.

48
00:03:09.940 --> 00:03:13.070
One hand we're going to have it set
something up in the web browser.

49
00:03:13.070 --> 00:03:15.220
JavaScript does not have the ability
to speak to the Internet.

50
00:03:15.220 --> 00:03:18.260
So it's gonna be a command
to the web browser that does

51
00:03:18.260 --> 00:03:20.860
to speak from the internet and
go get some data.

52
00:03:20.860 --> 00:03:24.760
Simultaneously though, unlike set time
out that did nothing in JavaScript,

53
00:03:24.760 --> 00:03:28.890
instead, we pause at a function
to be triggered later on.

54
00:03:28.890 --> 00:03:34.310
Instead, we're going to return
out an object with a placeholder

55
00:03:34.310 --> 00:03:39.270
called value that's gonna be filled in
with our data from the background work.

56
00:03:39.270 --> 00:03:43.640
And by the way, it's gonna have a property
that's hidden, called on fulfillment,

57
00:03:43.640 --> 00:03:46.320
that is gonna have functionality
that will be triggered

58
00:03:46.320 --> 00:03:50.340
automatically in JavaScript
when that value gets updated.

59
00:03:52.648 --> 00:03:53.999
Promise as a placeholder for

60
00:03:53.999 --> 00:03:57.540
data we would get back from the web
browser features background work.

61
00:03:57.540 --> 00:03:59.550
We also attach functionality,

62
00:03:59.550 --> 00:04:01.770
that we want to defer running
until the background work is done.

63
00:04:01.770 --> 00:04:02.980
We're gonna see the reason for

64
00:04:02.980 --> 00:04:08.930
that is if I try to run functionality
on the value of that placeholder

65
00:04:08.930 --> 00:04:12.500
object the problem is immediately
there ain't gonna be any data there.

66
00:04:12.500 --> 00:04:17.020
So we need to attach functionality on
a trigger when the data comes back to

67
00:04:17.020 --> 00:04:18.550
that data on the same object.

68
00:04:18.550 --> 00:04:19.620
We're going to see that in a moment.

69
00:04:20.630 --> 00:04:23.240
Promise object water is going to trigger
that functionality and by the way,

70
00:04:23.240 --> 00:04:26.740
the value return for the web browser
features work, for example, getting data

71
00:04:26.740 --> 00:04:32.900
from the server, will be that attached
functionality's input, its argument.

72
00:04:32.900 --> 00:04:37.139
We're gonna walk through all of this
super precisely but that is the overview.

