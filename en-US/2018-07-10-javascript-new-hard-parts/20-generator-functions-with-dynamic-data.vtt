WEBVTT

1
00:00:00.090 --> 00:00:00.845
&gt;&gt; Will Sentance: Josh, line one.

2
00:00:00.845 --> 00:00:04.420
What' are we doing?
&gt;&gt; Josh: Declaring

3
00:00:04.420 --> 00:00:07.100
a generator function to create flow
&gt;&gt; Will Sentance: Yup.

4
00:00:07.100 --> 00:00:09.780
Good.
Declaring a special type of function

5
00:00:09.780 --> 00:00:10.580
is magic.

6
00:00:10.580 --> 00:00:17.310
New type of function Josh gives us called
a generator function creates flow.

7
00:00:18.750 --> 00:00:19.440
There it is.

8
00:00:19.440 --> 00:00:20.200
Special type of function.

9
00:00:21.300 --> 00:00:22.560
I've updated my diagramming for it.

10
00:00:22.560 --> 00:00:27.444
[INAUDIBLE] Okay, next line,
not gonna ask Bryan cuz I've

11
00:00:27.444 --> 00:00:32.230
asked him the same question
as well multiple times.

12
00:00:32.230 --> 00:00:32.860
Gonna flip it up.

13
00:00:35.480 --> 00:00:38.310
I have an idea in my head about
what question to ask each person.

14
00:00:38.310 --> 00:00:40.720
It's very interesting, very interesting.

15
00:00:40.720 --> 00:00:43.770
Rick, what's the next lines of codes here

16
00:00:43.770 --> 00:00:46.310
to do?
&gt;&gt; Rick: You define a constant

17
00:00:46.310 --> 00:00:47.520
return next element.

18
00:00:47.520 --> 00:00:52.796
Which is undefined right now.
&gt;&gt; Will Sentance: Yeah, good, excellent!

19
00:00:52.796 --> 00:00:56.178
Return next element,

20
00:00:56.178 --> 00:01:02.230
which is gonna be the output of running,

21
00:01:02.230 --> 00:01:09.730
it's gonna be output of
this call to create flow.

22
00:01:09.730 --> 00:01:11.850
What could the output of this be?

23
00:01:11.850 --> 00:01:12.600
Well, presumably,

24
00:01:12.600 --> 00:01:17.646
we're gonna create an excision context.
&gt;&gt; Will Sentance: Probably,

25
00:01:17.646 --> 00:01:21.990
but no, for now,
not in any meaningful sense to us.

26
00:01:21.990 --> 00:01:26.100
So, we're in global, I'm not sure if
I need to keep track of this one,

27
00:01:26.100 --> 00:01:29.150
we don't need to keep track
of the cost that desperately.

28
00:01:29.150 --> 00:01:35.372
We need as much space as possible,

29
00:01:35.372 --> 00:01:39.234
so okay, so return,

30
00:01:39.234 --> 00:01:43.750
return, next element.

31
00:01:43.750 --> 00:01:51.749
It's gonna be the output
of calling create flow.

32
00:01:51.749 --> 00:01:56.640
Now, Ben,

33
00:01:56.640 --> 00:02:01.670
so we're hoping the output return element
is an object with a method called next.

34
00:02:01.670 --> 00:02:06.330
That when I call that it's gonna give
me my first element in my flow of data.

35
00:02:06.330 --> 00:02:09.170
What do you think that's gonna be then?
&gt;&gt; Ben: Four.

36
00:02:09.170 --> 00:02:10.070
&gt;&gt; Will Sentance: We hope it's

37
00:02:10.070 --> 00:02:10.900
gonna be four.

38
00:02:10.900 --> 00:02:13.240
Okay, next time it's gonna be five,
then it's gonna be six.

39
00:02:13.240 --> 00:02:14.690
But how are we gonna get that?

40
00:02:14.690 --> 00:02:16.220
That's the interesting question.

41
00:02:16.220 --> 00:02:21.260
So, create flow does not go inside
create flow's execution context.

42
00:02:21.260 --> 00:02:27.698
Instead, it returns out
a special generator

43
00:02:27.698 --> 00:02:33.260
object with a next function on it.

44
00:02:33.260 --> 00:02:36.900
That when called,
is gonna do something fascinating.

45
00:02:38.290 --> 00:02:39.470
There it is, with next.

46
00:02:40.560 --> 00:02:41.060
As the function.

47
00:02:43.230 --> 00:02:45.690
Okay, that's been stored and
return next element.

48
00:02:45.690 --> 00:02:48.030
So now, return next element
has a next method on it.

49
00:02:48.030 --> 00:02:50.730
Because it was the output
of running create flow.

50
00:02:50.730 --> 00:02:54.400
We've now finished this first,
this call to create flow.

51
00:02:57.180 --> 00:02:59.570
So now our next line of
code says to do what?

52
00:03:00.630 --> 00:03:02.135
It's gotta be only one person.

53
00:03:02.135 --> 00:03:03.588
&gt;&gt; [LAUGH]
&gt;&gt; Will Sentance: [INAUDIBLE]

54
00:03:03.588 --> 00:03:05.830
&gt;&gt; Abde: Inside.

55
00:03:05.830 --> 00:03:08.130
&gt;&gt; [LAUGH]

56
00:03:08.130 --> 00:03:08.661
&gt;&gt; Abde: Yeah,

57
00:03:08.661 --> 00:03:13.350
we're just declaring it in memory again.
&gt;&gt; Will Sentance: Yeah, yeah.

58
00:03:13.350 --> 00:03:16.770
You're getting too complacent
about your full responsibility.

59
00:03:16.770 --> 00:03:19.250
We're declaring what?
&gt;&gt; Ben: Because element one.

60
00:03:19.250 --> 00:03:19.920
&gt;&gt; Will Sentance: Degrade of course at

61
00:03:19.920 --> 00:03:20.490
element one.

62
00:03:20.490 --> 00:03:22.740
Excellent, thank you.

63
00:03:22.740 --> 00:03:30.260
And we're now gonna call the method
on this return next element

64
00:03:30.260 --> 00:03:34.821
object, the next method.
&gt;&gt; Will Sentance: And

65
00:03:34.821 --> 00:03:39.623
what's it gonna do?
&gt;&gt; Will Sentance: Here's what it's

66
00:03:39.623 --> 00:03:40.680
gonna do, people.

67
00:03:40.680 --> 00:03:42.950
You never thought it would happen.

68
00:03:42.950 --> 00:03:47.412
It is gonna,
&gt;&gt; Will Sentance: Execute or

69
00:03:47.412 --> 00:03:50.470
begin execution.

70
00:03:50.470 --> 00:03:55.299
It's gonna open the execution
context of create

71
00:03:55.299 --> 00:03:58.728
flow.
&gt;&gt; Will Sentance: This function on

72
00:03:58.728 --> 00:04:03.736
the object that got returned out
of create flow has an intimate

73
00:04:03.736 --> 00:04:09.221
bond to where it was born at create flow,
that when we call the next,

74
00:04:09.221 --> 00:04:16.280
it's gonna start initiate calling create
flow, the function from which it was born.

75
00:04:18.250 --> 00:04:19.310
It's gonna start calling it.

76
00:04:20.370 --> 00:04:23.300
Now we'll talk in a moment
what that literally means.

77
00:04:23.300 --> 00:04:24.540
What is calling a function?

78
00:04:24.540 --> 00:04:28.430
What is executing code and
how do you keep track of that?

79
00:04:28.430 --> 00:04:30.570
It's not as profound and bizarre and

80
00:04:30.570 --> 00:04:32.590
kind of against the rules
of Java as you might think.

81
00:04:34.880 --> 00:04:38.970
Okay, so when it does that, it's going
into the [INAUDIBLE] To create flow.

82
00:04:38.970 --> 00:04:40.130
That is what it is.

83
00:04:41.510 --> 00:04:43.730
So what's the first thing it does?

84
00:04:43.730 --> 00:04:45.100
Actually, it's a pretty boring function.

85
00:04:45.100 --> 00:04:47.100
There's no memory allocation happening.

86
00:04:47.100 --> 00:04:49.969
What's the first one it hits, Michelle?
&gt;&gt; Michelle: Yield four?

87
00:04:49.969 --> 00:04:51.630
&gt;&gt; Will Sentance: Yield four,

88
00:04:51.630 --> 00:04:55.680
okay, yield is a super powerful
keyword just like a light return

89
00:04:55.680 --> 00:04:57.330
that exits out of the function.

90
00:04:57.330 --> 00:04:59.850
But it's suspending the execution context.

91
00:04:59.850 --> 00:05:01.860
It's not ending it.

92
00:05:01.860 --> 00:05:04.540
What that means and
we'll talk about that in a second.

93
00:05:04.540 --> 00:05:07.110
Again, it's not like it's
sitting there on the core stack.

94
00:05:08.620 --> 00:05:10.330
Kind of it's sort of there.

95
00:05:10.330 --> 00:05:11.944
It does something else.

96
00:05:11.944 --> 00:05:13.410
I wanna make sure we get that clear,

97
00:05:13.410 --> 00:05:15.900
what it actually means to
spend an exclusion context.

98
00:05:17.050 --> 00:05:19.570
But this is a return statement,
essentially.

99
00:05:19.570 --> 00:05:24.983
We are gonna grab that four and
we're gonna yield

100
00:05:24.983 --> 00:05:31.588
it out as the output of our
returnNextElement.next call,

101
00:05:31.588 --> 00:05:36.590
which stimulated create flow to call.

102
00:05:36.590 --> 00:05:40.030
It hit the yield statement inside that
four is gonna be not our output or

103
00:05:40.030 --> 00:05:46.100
create flow, that was create flow's
never gonna give output again directly.

104
00:05:46.100 --> 00:05:49.720
It's only that returnNextElement
took.next, took us in here.

105
00:05:49.720 --> 00:05:52.460
And the yielded result is in the output

106
00:05:52.460 --> 00:05:55.290
of that statement we just
called returnNextElement.next.

107
00:05:55.290 --> 00:05:59.994
Actually, I might do a dotted kind
of line here to show that create

108
00:05:59.994 --> 00:06:01.060
flow's kicked off.

109
00:06:01.060 --> 00:06:03.240
So, this is an output of
returnNextElement.next which is four.

110
00:06:03.240 --> 00:06:06.530
And that's gonna be assigned where,
Blessing?

111
00:06:06.530 --> 00:06:07.050
&gt;&gt; Blessing: To element one?

112
00:06:07.050 --> 00:06:08.745
&gt;&gt; Will Sentance: To element one,

113
00:06:08.745 --> 00:06:10.080
excellent.

114
00:06:10.080 --> 00:06:11.340
There it is in element one.

115
00:06:12.650 --> 00:06:13.150
Beautiful.

116
00:06:15.520 --> 00:06:16.910
Crazy.

117
00:06:16.910 --> 00:06:21.180
I'll tell you this,
we've ended up here with our flow of data,

118
00:06:21.180 --> 00:06:22.560
the first element for it, very nice.

119
00:06:23.960 --> 00:06:26.120
Right now we're gonna see that it
doesn't feel that much different.

120
00:06:26.120 --> 00:06:27.650
We've got four, five, six.

121
00:06:27.650 --> 00:06:29.130
But in a moment we're gonna see,

122
00:06:29.130 --> 00:06:34.080
we can dynamically control what
our flow of data comprises.

123
00:06:34.080 --> 00:06:38.640
Cuz it's just code now, that we can
set what our data flow comprises.

124
00:06:38.640 --> 00:06:43.770
All right, so, next line of code, Alec.

125
00:06:45.360 --> 00:06:46.598
We're back out to, I should say, sorry.

126
00:06:46.598 --> 00:06:52.004
We've paused.

127
00:06:52.004 --> 00:06:53.440
I don't even like the term pause.

128
00:06:53.440 --> 00:06:56.950
But we've suspended, we've put on
hold the execution context here.

129
00:06:56.950 --> 00:07:01.870
Well, that actually means, I might as well
say now, what that actually means is,

130
00:07:01.870 --> 00:07:04.910
no, I'm gonna show you on the next slide.

131
00:07:04.910 --> 00:07:09.540
So, for now, okay, Alec, we come back out
to our global execution context where

132
00:07:09.540 --> 00:07:12.285
we hit the declaration of what?
&gt;&gt; Alec: Element

133
00:07:12.285 --> 00:07:13.880
two.
&gt;&gt; Will Sentance: Yep.

134
00:07:13.880 --> 00:07:16.320
Which is gonna be?
&gt;&gt; Alec: The output of

135
00:07:16.320 --> 00:07:19.000
returnNextElement.next?
&gt;&gt; Will Sentance: Correct, but

136
00:07:19.000 --> 00:07:20.240
we have total output, right?

137
00:07:20.240 --> 00:07:23.770
The output of returnNextElement.next
is not gonna be the conventional sense.

138
00:07:23.770 --> 00:07:25.430
It's gonna take us back and
create the floor,

139
00:07:25.430 --> 00:07:29.290
whatever yield's next is gonna be output
of returnNextElement.next, exactly.

140
00:07:29.290 --> 00:07:36.720
So let's do it, returnNextElement.next,
which will take

141
00:07:36.720 --> 00:07:41.540
us in here where we hit what line, Alec?
&gt;&gt; Alec: Yield five.

142
00:07:41.540 --> 00:07:42.800
&gt;&gt; Will Sentance: Yield five, and

143
00:07:42.800 --> 00:07:50.525
that five is then gonna be our output of
this statement, actually this expression,

144
00:07:50.525 --> 00:07:55.310
returnNextElement.next which has being
called, which is therefore five.

145
00:07:55.310 --> 00:07:57.490
And we saw that where, Alec?
&gt;&gt; Alec: Element two?

146
00:07:57.490 --> 00:07:58.540
&gt;&gt; Will Sentance: Element two, look

147
00:07:58.540 --> 00:08:03.300
at this, our flow is coming It's
really nice, our flow is forming.

148
00:08:03.300 --> 00:08:05.430
We call return at element
on next one more time.

149
00:08:05.430 --> 00:08:07.190
It's gonna give us out six.

150
00:08:07.190 --> 00:08:10.150
We return it one more time,
it's gonna give us out undefined.

151
00:08:11.730 --> 00:08:17.830
So, first thing to say, we now get to
produce our flows using a function.

152
00:08:17.830 --> 00:08:23.280
What that allows us to do,
is dynamically set

153
00:08:23.280 --> 00:08:29.530
what data flows out to us when we turn on
the tap and give ourselves a next element.

154
00:08:29.530 --> 00:08:32.380
When we turn on the tap and
give ourselves a next element.

155
00:08:32.380 --> 00:08:36.630
We can dynamically set that with code.

156
00:08:36.630 --> 00:08:41.980
We can even, we'll be able to see
down here, set it from outside.

157
00:08:41.980 --> 00:08:45.600
We can sort of return back and
get the execution context with new data

158
00:08:45.600 --> 00:08:49.990
to determine what the next result
of our flow of data's gonna be.

159
00:08:49.990 --> 00:08:51.500
The next element from our flows.

160
00:08:51.500 --> 00:08:54.170
We get complete control over what
the next element in our flow is gonna be.

161
00:08:55.510 --> 00:09:00.908
Unlike when we built them
using a baseline array,

162
00:09:00.908 --> 00:09:05.070
four-five-six, that was set, we couldn't
control that, we couldn't have logic

163
00:09:05.070 --> 00:09:09.760
determining what the later elements would
be, that was just, it was what it was.

164
00:09:09.760 --> 00:09:12.710
Now we're gonna get to control what
the later elements are gonna be.

165
00:09:12.710 --> 00:09:17.570
It's going to require some really
precise thinking to follow though,

166
00:09:17.570 --> 00:09:19.740
because it has a behavior.

167
00:09:19.740 --> 00:09:21.080
That does feel weird.

168
00:09:21.080 --> 00:09:24.070
It's actually not crazy but
it does feel weird.

169
00:09:24.070 --> 00:09:24.760
Okay.

170
00:09:24.760 --> 00:09:26.470
So we're going to clear this code and

171
00:09:26.470 --> 00:09:29.570
go through this line by
line what we have up here.

172
00:09:29.570 --> 00:09:32.130
And then we'll do thumbs.

173
00:09:32.130 --> 00:09:36.070
I don't think there's much point in doing
thumbs before we get this dynamic piece

174
00:09:37.330 --> 00:09:38.420
out on the table.

175
00:09:40.610 --> 00:09:46.840
All right, so.
&gt;&gt; Will Sentance: Okay,

176
00:09:46.840 --> 00:09:54.040
line one, Josh, what are we doing?
&gt;&gt; Josh: This one, declaring

177
00:09:54.040 --> 00:09:57.592
a generator function of createFlow.
&gt;&gt; Will Sentance: Yep, well done.

178
00:09:57.592 --> 00:10:03.700
Line two, what are we doing, Paul?
&gt;&gt; Paul: We are creating

179
00:10:03.700 --> 00:10:09.010
a new constant called returnNextElement
and setting it to the invocation

180
00:10:09.010 --> 00:10:11.850
of the createFlow generator.
&gt;&gt; Will Sentance: That's not a crazy thing

181
00:10:11.850 --> 00:10:12.720
to say.

182
00:10:12.720 --> 00:10:15.240
I still don't even love
saying the invocation.

183
00:10:15.240 --> 00:10:20.310
It still suggest that returnNextElement's
value is an invocation.

184
00:10:20.310 --> 00:10:21.090
It's not.

185
00:10:21.090 --> 00:10:24.470
It's the return value of an invocation.

186
00:10:24.470 --> 00:10:26.830
That still makes people think when
they go to return its element,

187
00:10:26.830 --> 00:10:29.980
I better go back and look and
see createFlow's what's stored there.

188
00:10:29.980 --> 00:10:31.600
createFlow is never stored anywhere.

189
00:10:31.600 --> 00:10:35.672
createFlow's invocation, createFlow
parens, is never stored anywhere.

190
00:10:35.672 --> 00:10:40.460
If createFlow is invoked,
we do the work of it,

191
00:10:40.460 --> 00:10:43.150
whatever comes out,
that's what's stored in returnNextElement.

192
00:10:43.150 --> 00:10:44.200
Just to be really, really clear on it.

193
00:10:44.200 --> 00:10:46.470
So it's undefined for now,
let's go do some work.

194
00:10:46.470 --> 00:10:50.470
Let's do that,
&gt;&gt; Will Sentance: Work.

195
00:10:50.470 --> 00:10:56.716
ReturnNextElement is the output
of the call to createFlow,

196
00:10:56.716 --> 00:11:02.716
which Ben, do you remember
what we said this returns out,

197
00:11:02.716 --> 00:11:07.470
kinda surprisingly?
&gt;&gt; Ben: An object

198
00:11:07.470 --> 00:11:09.688
with the property of next.
&gt;&gt; Will Sentance: Yes,

199
00:11:09.688 --> 00:11:13.220
notice the generator,
notice a generator object, exactly.

200
00:11:13.220 --> 00:11:16.643
A generator object with a next property,
which is a method of function on it.

201
00:11:16.643 --> 00:11:18.131
Good.

202
00:11:18.131 --> 00:11:22.160
All right next line, Ben.
&gt;&gt; Ben: We're

203
00:11:22.160 --> 00:11:27.130
going to declare constant element1.
&gt;&gt; Will Sentance: Let me just get my

204
00:11:27.130 --> 00:11:30.150
function, my object with a function
wrapped on it, there it is.

205
00:11:30.150 --> 00:11:35.630
Yep, declare element one,
&gt;&gt; Will Sentance: Okay.

206
00:11:35.630 --> 00:11:36.930
&gt;&gt; Ben: Undefined returned value,

207
00:11:36.930 --> 00:11:38.241
return next element.
&gt;&gt; Will Sentance: Yeah,

208
00:11:38.241 --> 00:11:43.004
which is a weird old return value,
it's gonna be very surprising.

209
00:11:43.004 --> 00:11:50.942
So element1 is the output
of returnNextElement.next,

210
00:11:50.942 --> 00:11:58.560
the call which is just this
function here being called.

211
00:11:58.560 --> 00:12:02.270
The one which we returned out
on this object, and store it and

212
00:12:02.270 --> 00:12:03.660
return next element.

213
00:12:03.660 --> 00:12:09.330
This, though, is a command,
to begin the execution context of what,

214
00:12:09.330 --> 00:12:10.500
Ben?
&gt;&gt; Ben: createFlow.

215
00:12:10.500 --> 00:12:11.769
&gt;&gt; Will Sentance: The createFlow execution

216
00:12:11.769 --> 00:12:18.090
context.
&gt;&gt; Will Sentance: Okay, so we open it,

217
00:12:23.971 --> 00:12:27.680
&gt;&gt; Will Sentance: And it has a memory.

218
00:12:29.830 --> 00:12:31.646
There it is.

219
00:12:31.646 --> 00:12:36.914
And inside of it we go,
and what's the first thing

220
00:12:36.914 --> 00:12:43.002
that it says to do inside, Brian?
&gt;&gt; Brian: You'd clear a constant

221
00:12:43.002 --> 00:12:47.660
named num and assign it a value of 10.
&gt;&gt; Will Sentance: Great, there it is.

222
00:12:47.660 --> 00:12:52.680
Okay, next line says to do what, Brian?

223
00:12:52.680 --> 00:12:55.560
Left hand side first.
&gt;&gt; Brian: Create a new constant called

224
00:12:55.560 --> 00:12:57.560
newNum.
&gt;&gt; Will Sentance: Install that in memory

225
00:12:57.560 --> 00:12:58.800
initially.

226
00:12:58.800 --> 00:12:59.550
Well we're gonna see.

227
00:12:59.550 --> 00:13:05.110
So, newNum is going to be the evaluated
result of the right hand side.

228
00:13:05.110 --> 00:13:06.090
That's always the case.

229
00:13:06.090 --> 00:13:09.010
If the right hand side is a number,
a value, we just saw the number there.

230
00:13:09.010 --> 00:13:11.941
That right hand side ain't a number,
it ain't a value, it's actually a command.

231
00:13:11.941 --> 00:13:17.610
It's actually a super powerful command so
yield num which is 10.

232
00:13:17.610 --> 00:13:19.479
It's actually a super powerful command.

233
00:13:21.020 --> 00:13:26.470
It's a command that's going
to throw us straight out,

234
00:13:26.470 --> 00:13:31.460
it's gonna throw us straight out,

235
00:13:31.460 --> 00:13:36.400
this value,
a straight out of this execution context.

236
00:13:36.400 --> 00:13:40.509
And Ben is going to have that 10,
that output,

237
00:13:40.509 --> 00:13:43.834
be result of what?
&gt;&gt; Ben: NewNum which

238
00:13:43.834 --> 00:13:45.317
will be-

239
00:13:45.317 --> 00:13:45.867
&gt;&gt; Will Sentance: No.
&gt;&gt; Ben: No?

240
00:13:45.867 --> 00:13:47.251
&gt;&gt; Will Sentance: Yeah, exactly we

241
00:13:47.251 --> 00:13:52.202
declared newNum but yield is so powerful.
The right hand side is so

242
00:13:52.202 --> 00:13:56.000
powerful cuz it's a statement to
just throw you out of the function.

243
00:13:56.000 --> 00:13:58.560
We're never gonna get a chance
to store something in newNum.

244
00:13:58.560 --> 00:14:01.220
It's undefined for now,
the right hand side

245
00:14:01.220 --> 00:14:05.480
we was with you declared the left hand
side newNum, and the right hand side,

246
00:14:05.480 --> 00:14:08.900
you then want to get to a value that
you can install on the left hand side.

247
00:14:08.900 --> 00:14:11.260
For the right hand side,
we don't have a choice to give it a value,

248
00:14:11.260 --> 00:14:14.440
to evaluate to do a value,
because it's like seeing return 10.

249
00:14:14.440 --> 00:14:20.040
It's like a super powerful keyword that
just kicks out this ten as our output

250
00:14:20.040 --> 00:14:24.430
into the returnNextElement.next.

251
00:14:24.430 --> 00:14:27.464
So what does
returnNextElement.next evaluate

252
00:14:27.464 --> 00:14:28.400
to, Ben?
&gt;&gt; Ben: 10.

253
00:14:28.400 --> 00:14:30.030
&gt;&gt; Will Sentance: To 10, exactly.

254
00:14:30.030 --> 00:14:32.146
Which gets stored in where then?
&gt;&gt; Ben: element1.

255
00:14:32.146 --> 00:14:34.120
&gt;&gt; Will Sentance: element1, and

256
00:14:34.120 --> 00:14:38.930
solution context newNum
never got assigned anything.

257
00:14:38.930 --> 00:14:43.970
This has been paused just before this
right hand side could evaluate to a value

258
00:14:43.970 --> 00:14:44.998
and be stored in newNum.

259
00:14:44.998 --> 00:14:47.521
So in our execution context
newNum is still undefined.

260
00:14:49.480 --> 00:14:50.991
&gt;&gt; Will Sentance: Let's hope we get

261
00:14:50.991 --> 00:14:54.438
a chance to assign it newNum something.

262
00:14:54.438 --> 00:14:58.530
Let's hope.
&gt;&gt; Will Sentance: Okay we're back out to

263
00:14:58.530 --> 00:15:00.430
global execution context.

264
00:15:00.430 --> 00:15:01.810
This execution context is paused.

265
00:15:01.810 --> 00:15:05.030
We'll talk about what
pause means in a moment.

266
00:15:05.030 --> 00:15:08.190
I don't like the term pause, that's
definitely a feat for what actually is.

267
00:15:08.190 --> 00:15:09.110
Well it's not.

268
00:15:09.110 --> 00:15:11.240
But what does it mean to pause a function?

269
00:15:11.240 --> 00:15:13.280
What is an execution context.

270
00:15:13.280 --> 00:15:17.680
To just give you a preview, execution
context is just state, memory, and

271
00:15:17.680 --> 00:15:19.950
what line am I currently on,
in what position?

272
00:15:19.950 --> 00:15:20.679
That's all it is.

273
00:15:22.030 --> 00:15:27.029
And the thread is actually in it,
as opposed to not in it.

274
00:15:27.029 --> 00:15:30.210
The function line has
control over the thread.

275
00:15:30.210 --> 00:15:34.130
Other than that, that's all it is,
position in the code, and a memory.

276
00:15:34.130 --> 00:15:36.820
That ain't that hard to save in
the next function, or sorry,

277
00:15:36.820 --> 00:15:38.491
it's attached to the next function.

278
00:15:38.491 --> 00:15:42.949
That's all a paused execution context is.

279
00:15:42.949 --> 00:15:46.165
It's the closure, the backpack, but

280
00:15:46.165 --> 00:15:50.940
now also the position in
the function's execution.

281
00:15:50.940 --> 00:15:52.670
So we can come back and continue running.

282
00:15:52.670 --> 00:15:54.960
That's all we're gonna say, we'll talk
about them in more detail in a moment.

283
00:15:54.960 --> 00:16:00.860
But for now, we're back out to global
where Alec, what's our next line?

284
00:16:00.860 --> 00:16:03.920
This is our previous global line,

285
00:16:03.920 --> 00:16:06.880
what's our next line of global code?
&gt;&gt; Alec: Define

286
00:16:06.880 --> 00:16:08.540
element two.
&gt;&gt; Will Sentance: Excellent,

287
00:16:08.540 --> 00:16:17.300
give me a second, element two is going
to be a returned value of calling return

288
00:16:17.300 --> 00:16:22.440
next element.next I'm parsing in two.

289
00:16:24.980 --> 00:16:29.430
Okay, what's this gonna do which execution
context it's gonna take us back in to,

290
00:16:29.430 --> 00:16:31.950
Alex?
&gt;&gt; Alec: Into the create flow [INAUDIBLE].

291
00:16:31.950 --> 00:16:32.909
&gt;&gt; Will Sentance: Yeah exactly and

292
00:16:32.909 --> 00:16:33.870
it goes back in.

293
00:16:37.080 --> 00:16:39.850
Okay, where do we leave?

294
00:16:40.870 --> 00:16:46.723
We leave, we left with [LAUGH],

295
00:16:46.723 --> 00:16:50.070
we left messing with, we left with,

296
00:16:51.140 --> 00:16:57.535
we left with our, we left being
rapidly kicked out of our function.

297
00:16:57.535 --> 00:17:01.875
[SOUND] Being kicked out and never
getting a chance to try anything new now.

298
00:17:01.875 --> 00:17:07.210
When we come back in,
whatever we parse in as our input

299
00:17:07.210 --> 00:17:12.426
to next that takes us back
into create flow is going to

300
00:17:12.426 --> 00:17:18.500
be the evaluated result of this
last right-hand side work.

301
00:17:18.500 --> 00:17:22.590
It is gonna be our evaluated
result of this statement here.

302
00:17:22.590 --> 00:17:27.550
This is gonna allow us to pass data
back into our execution context,

303
00:17:27.550 --> 00:17:29.550
almost like an argument back into it.

304
00:17:29.550 --> 00:17:32.257
And it's gonna be the evaluation
result of this yield

305
00:17:32.257 --> 00:17:35.384
expression.
&gt;&gt; Will Sentance: So

306
00:17:35.384 --> 00:17:41.372
the yield 10 It's it did what it's job
before it was to return out the ten.

307
00:17:41.372 --> 00:17:45.932
And then when we come back into the
function, it didn't get a chance because

308
00:17:45.932 --> 00:17:50.349
this yield was so powerful it threw
the ten out into the last call to next and

309
00:17:50.349 --> 00:17:51.870
[INAUDIBLE] element one.

310
00:17:51.870 --> 00:17:56.950
When we come back in, that expression
evaluates through it becomes

311
00:17:56.950 --> 00:18:00.250
two JavaScripts inside of here,
whatever we pass in as the input.

312
00:18:00.250 --> 00:18:05.230
And that's the very nature of the design
of these generator functions.

313
00:18:05.230 --> 00:18:06.750
That when you go back into them,

314
00:18:06.750 --> 00:18:11.230
you get to insert data back into their
local execution context as the evaluated

315
00:18:11.230 --> 00:18:16.570
result of the previous yield expression,
the previous yield statement.

316
00:18:16.570 --> 00:18:19.154
That's not a thing which
you can store in new num.

317
00:18:20.930 --> 00:18:22.820
But what we pass back into number two,

318
00:18:22.820 --> 00:18:26.280
which replaces that piece,
is a thing we just throw a new num.

319
00:18:26.280 --> 00:18:28.649
So Abde, what gets sorted new num?
&gt;&gt; Abde: Two.

320
00:18:28.649 --> 00:18:30.160
&gt;&gt; Will Sentance: Two, exactly.

321
00:18:31.710 --> 00:18:37.822
All right, and what's our next
line of code say to do then,

322
00:18:37.822 --> 00:18:41.378
yield five plus what, Abde?
&gt;&gt; Abde: Newnum

323
00:18:41.378 --> 00:18:42.450
which is two.
&gt;&gt; Will Sentance: 2,

324
00:18:42.450 --> 00:18:44.880
which is to say yield 7 and

325
00:18:44.880 --> 00:18:48.170
where is that 7 gonna be thrown out to?
&gt;&gt; Abde: Element

326
00:18:48.170 --> 00:18:48.750
2.
&gt;&gt; Will Sentance: Exactly,

327
00:18:48.750 --> 00:18:56.390
is the output of the next call is the 7
and that's gonna be stored in element 2.

328
00:18:56.390 --> 00:18:57.630
Well done, Abdi, excellent.

329
00:18:59.410 --> 00:19:03.570
Look how much dynamic control we have
over our function that gives us our

330
00:19:03.570 --> 00:19:05.110
element of our flow of data.

331
00:19:05.110 --> 00:19:08.380
And we say there's nothing
like thinking about our data

332
00:19:08.380 --> 00:19:11.880
as flows because look how
much control it now gives us.

333
00:19:11.880 --> 00:19:15.470
Now do you see how beautiful
it is to have control over

334
00:19:15.470 --> 00:19:19.570
to think about data as flows of values,
flows of elements?

335
00:19:19.570 --> 00:19:22.480
Because we can literally control
dynamically what the next element

336
00:19:22.480 --> 00:19:23.550
of that flow will be.

337
00:19:23.550 --> 00:19:26.500
It's a paradigm shift in how we
think about designing our code.

338
00:19:28.130 --> 00:19:30.030
Okay we would run it again.

339
00:19:30.030 --> 00:19:34.071
What would we, Abde, if we were
run return nextelement.next again,

340
00:19:34.071 --> 00:19:37.544
would we have in our element three?
&gt;&gt; Abde: We would have,-

341
00:19:37.544 --> 00:19:38.168
&gt;&gt; Will Sentance: We did 5 + 2 for

342
00:19:38.168 --> 00:19:39.734
the previous one, what's the next one,

343
00:19:39.734 --> 00:19:40.655
Brian?
&gt;&gt; Brian: 6.

344
00:19:40.655 --> 00:19:42.517
&gt;&gt; Will Sentance: 6, excellent, exactly,

345
00:19:42.517 --> 00:19:45.005
that very one on the bottom there you.

346
00:19:45.005 --> 00:19:48.915
We now have flows of data that we can
switch on, when we call the next function,

347
00:19:48.915 --> 00:19:50.290
get the next element.

348
00:19:50.290 --> 00:19:53.930
Switch on, call the next function,
get the next element with flows of data

349
00:19:53.930 --> 00:19:58.610
that we get to control every
element of them with actual code.

350
00:19:58.610 --> 00:20:00.438
It's very beautiful, all right.

351
00:20:00.438 --> 00:20:05.515
We got our thumbs on this, and
the moment we are gonna discover that

352
00:20:05.515 --> 00:20:10.698
this pseudo pausing,
let's just say how it's therefore stored.

353
00:20:10.698 --> 00:20:15.945
We are therefore storing on the next call,
our next function,

354
00:20:15.945 --> 00:20:23.400
we're storing our execution context before
we return back into it, to resume it.

355
00:20:23.400 --> 00:20:26.990
It's not being,
this is not staying on the I think.

356
00:20:26.990 --> 00:20:31.690
It doesn't make sense to, but we hold
onto it with two pieces of information.

357
00:20:31.690 --> 00:20:33.625
One, our backpack of data.

358
00:20:33.625 --> 00:20:38.994
Our backpack of data with num is 10,
new num is 2,

359
00:20:38.994 --> 00:20:45.586
plus our position in the function,
in the generator function,

360
00:20:45.586 --> 00:20:49.995
the line number and the positioning code.

361
00:20:49.995 --> 00:20:55.310
Which is, I think is stored squared
bracket, square bracket, generator.

362
00:20:57.480 --> 00:21:03.252
It's called square root disorders.
&gt;&gt; Will Sentance: Square bracket,

363
00:21:03.252 --> 00:21:08.838
square bracket, generator location,
square bracket,

364
00:21:08.838 --> 00:21:13.400
square bracket, and then whatever line is.

365
00:21:13.400 --> 00:21:18.599
Wait, suppose we were here,
&gt;&gt; Will Sentance: Line four,

366
00:21:18.599 --> 00:21:23.970
and that's all execution context
is when it's not running.

367
00:21:23.970 --> 00:21:26.700
When you start running it, you take
the thread to let that line fall and

368
00:21:26.700 --> 00:21:27.800
you make sure that's your local data.

369
00:21:27.800 --> 00:21:28.850
So we start it.

370
00:21:28.850 --> 00:21:32.570
Put it on the column for
that information, but that's all it is.

371
00:21:32.570 --> 00:21:34.380
So, what we're really doing when we pause,

372
00:21:34.380 --> 00:21:37.050
is we're saying hold
on to the information.

373
00:21:37.050 --> 00:21:41.049
In the next, attached to the next that
we then gonna go back to that we need to

374
00:21:41.049 --> 00:21:44.360
then be able to go back to and
continue running that function.

375
00:21:44.360 --> 00:21:47.577
And continue referencing that
state locally that data locally.

376
00:21:47.577 --> 00:21:49.890
That's all it is, all right people?

377
00:21:51.010 --> 00:21:54.600
And then the next time we come
out it was at line five and

378
00:21:54.600 --> 00:21:56.620
local data's changed slightly.

379
00:21:56.620 --> 00:21:57.680
Okay beautiful.

