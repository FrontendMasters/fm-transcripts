WEBVTT

1
00:00:03.833 --> 00:00:06.486
&gt;&gt; Will Sentance: Now,
we move on to iterators.

2
00:00:06.486 --> 00:00:09.136
Okay, iterators.

3
00:00:09.136 --> 00:00:13.918
Iterators,
&gt;&gt; Will Sentance: I said

4
00:00:13.918 --> 00:00:18.151
in the very start, that when we run or
we write and run code,

5
00:00:18.151 --> 00:00:22.553
what we're typically doing is taking data,
storing it, and

6
00:00:22.553 --> 00:00:26.468
then functionality,
that we then apply to that data.

7
00:00:26.468 --> 00:00:31.340
Even as simple as I have a score for
a player and I increase that score.

8
00:00:31.340 --> 00:00:32.700
Functionality onto data.

9
00:00:32.700 --> 00:00:36.565
We call our live data that's stored
in our application our state.

10
00:00:36.565 --> 00:00:38.179
That just means the labels and

11
00:00:38.179 --> 00:00:41.869
the data, the values currently in
our application at that moment.

12
00:00:43.500 --> 00:00:48.610
But that kinda masks the small part that's
actually pretty significant a lot of time.

13
00:00:48.610 --> 00:00:51.720
Which is I have my data,
I have my functionality, but

14
00:00:51.720 --> 00:00:54.800
often my data is a collection of data.

15
00:00:54.800 --> 00:00:58.370
Maybe an array, a list of data or
a set of data, or a map of data.

16
00:00:58.370 --> 00:01:01.873
Or a object containing a bunch
of properties with data.

17
00:01:01.873 --> 00:01:03.852
It's really a single element.

18
00:01:03.852 --> 00:01:08.049
So actually the process of
accessing each of our elements from

19
00:01:08.049 --> 00:01:10.801
a collection of data is in itself a task.

20
00:01:10.801 --> 00:01:15.929
The data is just not there which
we can apply functionality to,

21
00:01:15.929 --> 00:01:18.463
we have to go access that data.

22
00:01:18.463 --> 00:01:21.729
And in arrays, we do it using indexes
to grab the individual element.

23
00:01:21.729 --> 00:01:25.730
You sort of have a static collection of
data, and go and grab an element, grab it.

24
00:01:25.730 --> 00:01:32.553
And actually, that's not a small
process in its own right.

25
00:01:32.553 --> 00:01:35.654
And we'll see,
we'll play that out here with a for loop.

26
00:01:35.654 --> 00:01:39.925
And we'll discover that actually,
it's not the most, I think,

27
00:01:39.925 --> 00:01:42.146
a beautifully designed process.

28
00:01:42.146 --> 00:01:44.879
It's not clear that that's
the best unless it's,

29
00:01:44.879 --> 00:01:48.787
most of the time when I'm accessing my
data, I know I just want my element,

30
00:01:48.787 --> 00:01:52.140
and I want the next element,
and I want the next element.

31
00:01:52.140 --> 00:01:56.680
I don't really care about how I
go about getting those elements.

32
00:01:56.680 --> 00:02:01.335
So wouldn't it be amazing if we
could rethink collections of data as

33
00:02:01.335 --> 00:02:05.173
instead a sort of stream of
elements coming towards me,

34
00:02:05.173 --> 00:02:10.153
that I could call a function,
I could run a function, that's just gonna

35
00:02:10.153 --> 00:02:15.840
instantly return me the next element
from my stream, my flow of data?

36
00:02:15.840 --> 00:02:19.050
So I would run a function, it would
return out the next element for my flow.

37
00:02:19.050 --> 00:02:21.270
I'd run it, it would return out
the next element of my flow.

38
00:02:21.270 --> 00:02:25.560
Rethink my data, not as a static
collection, I've gotta go and

39
00:02:25.560 --> 00:02:29.460
manually get each element in
order to run functionality on it.

40
00:02:29.460 --> 00:02:30.650
But instead flip it and

41
00:02:30.650 --> 00:02:33.610
say, my data's there and
I'm actually gonna have access to it by

42
00:02:33.610 --> 00:02:37.830
running a function which kinda turns on
the flow of the next element of my data.

43
00:02:39.050 --> 00:02:42.730
And that is a paradigm
shift in how we think about

44
00:02:42.730 --> 00:02:44.730
applying functionality to our data.

45
00:02:44.730 --> 00:02:48.340
No longer is there the intermediate
step of getting the elements,

46
00:02:48.340 --> 00:02:51.720
manually going into the data collection
and grabbing the next element.

47
00:02:51.720 --> 00:02:52.910
That's not a small thing.

48
00:02:52.910 --> 00:02:57.581
And it's an unnecessary step when most of
the time all I want is my next element in

49
00:02:57.581 --> 00:02:58.083
order.

50
00:02:58.083 --> 00:03:04.655
So why not instead rethink my processes
being applying functionality to data

51
00:03:04.655 --> 00:03:11.342
as the data being given to me element by
element from a sort of flow of that data?

52
00:03:11.342 --> 00:03:15.841
Before we see that beautiful new way of
thinking about our collections of data and

53
00:03:15.841 --> 00:03:18.886
getting them so
we can apply functionality to them, or

54
00:03:18.886 --> 00:03:21.356
getting them element
by element one by one.

55
00:03:21.356 --> 00:03:25.969
Before we do that, we're gonna see the old
version, where we have a list of data, and

56
00:03:25.969 --> 00:03:28.613
we're gonna manually go and
grab each element.

57
00:03:28.613 --> 00:03:32.727
We're gonna discover, I said, a beautiful
new way of thinking about this,

58
00:03:32.727 --> 00:03:34.386
using each element one by one.

59
00:03:34.386 --> 00:03:35.820
But let's first see.
And by the way,

60
00:03:35.820 --> 00:03:40.781
it's gonna show us just how kind of
imperative, procedural, bit by bit,

61
00:03:40.781 --> 00:03:45.930
kind of exactly how we're gonna do this,
this old fashion method is.

62
00:03:45.930 --> 00:03:49.494
Gives us really manual,
fine-grain control, but

63
00:03:49.494 --> 00:03:52.417
at the expense of a clean, readable code.

64
00:03:52.417 --> 00:03:54.554
And also, I think a cleaner way for

65
00:03:54.554 --> 00:03:58.094
ourselves of thinking of our
data as these flows of data,

66
00:03:58.094 --> 00:04:02.550
rather than static collections that
we go and grab element by element.

67
00:04:02.550 --> 00:04:05.830
So let's first just at least
see this traditional way.

68
00:04:05.830 --> 00:04:09.318
And I think it's gonna show
us we want a better way.

69
00:04:09.318 --> 00:04:12.109
But here's our traditional way.

70
00:04:12.109 --> 00:04:15.050
And I'm gonna try and diagram this.

71
00:04:15.050 --> 00:04:19.480
But part of the point to say is that for
loops,

72
00:04:19.480 --> 00:04:24.968
diagramming for
loops is an odd thing to do, honestly.

73
00:04:24.968 --> 00:04:26.487
When we think about most of our code,

74
00:04:26.487 --> 00:04:28.509
we run execution context
to run functionality.

75
00:04:28.509 --> 00:04:32.821
But our for loops are these
funny little things that happen

76
00:04:32.821 --> 00:04:37.494
kind of in isolation of our regular
way of thinking about code.

77
00:04:37.494 --> 00:04:39.996
But there we go, all right.

78
00:04:39.996 --> 00:04:41.151
Line one.

79
00:04:43.664 --> 00:04:44.777
&gt;&gt; Will Sentance: James,
what are we doing?

80
00:04:44.777 --> 00:04:48.740
&gt;&gt; James: [COUGH] You're
declaring a constant of numbers.

81
00:04:48.740 --> 00:04:50.745
&gt;&gt; Will Sentance: Numbers.

82
00:04:50.745 --> 00:04:55.027
&gt;&gt; James: And assigning it a new
array containing the values 4, 5, 6.

83
00:04:55.027 --> 00:04:56.176
&gt;&gt; Will Sentance: Excellent,
James, spot on.

84
00:04:57.806 --> 00:05:01.130
&gt;&gt; Will Sentance: Now, here comes my
favorite bit, diagramming for loops.

85
00:05:01.130 --> 00:05:04.646
All right, here we go.

86
00:05:04.646 --> 00:05:10.125
Check this,

87
00:05:10.125 --> 00:05:14.120
do this.

88
00:05:14.120 --> 00:05:17.710
Okay, you can already see why these
are problematic, but check this.

89
00:05:17.710 --> 00:05:21.950
So what's the check we're gonna do,
is i less than numbers.length, okay.

90
00:05:21.950 --> 00:05:26.244
Is i, which is initiated to 0,

91
00:05:26.244 --> 00:05:31.974
less than numbers.length, which is 3.

92
00:05:31.974 --> 00:05:35.334
Okay, which is 3 as is less, it is.

93
00:05:35.334 --> 00:05:40.438
And therefore, do this,

94
00:05:40.438 --> 00:05:49.024
which is console.log(numbers[i]).

95
00:05:49.024 --> 00:05:51.978
And then i++.

96
00:05:51.978 --> 00:05:56.690
That's our for loop try to be written
up in a slightly more logical

97
00:05:56.690 --> 00:06:01.575
sense than the kind of weird,
check this, do the code, come back,

98
00:06:01.575 --> 00:06:06.398
do this, check this, a weird
circular flow of an actual for loop.

99
00:06:06.398 --> 00:06:10.083
Okay, so i is less than 3,
so we are now gonna do this.

100
00:06:10.083 --> 00:06:13.316
What is numbers at this point, Michelle?

101
00:06:13.316 --> 00:06:15.730
&gt;&gt; Michelle: So
numbers is the array 4, 5, 6.

102
00:06:15.730 --> 00:06:18.140
&gt;&gt; Will Sentance: Yeah, and
what is i at this point?

103
00:06:18.140 --> 00:06:19.439
&gt;&gt; Michelle: i is 0.

104
00:06:19.439 --> 00:06:22.672
&gt;&gt; Will Sentance: 0, already,
I'm liking to hear the hesitation.

105
00:06:22.672 --> 00:06:25.263
That's enough to tell us
there might be a nicer way.

106
00:06:25.263 --> 00:06:29.319
So position 0 of numbers is, Michelle?

107
00:06:29.319 --> 00:06:30.551
&gt;&gt; Michelle: [LAUGH] 4.

108
00:06:30.551 --> 00:06:31.380
&gt;&gt; Will Sentance: 4, excellent.

109
00:06:31.380 --> 00:06:32.571
&gt;&gt; Michelle: I can tell there's 4.

110
00:06:32.571 --> 00:06:37.065
&gt;&gt; Will Sentance: Next thing to do
is i++ with an increment i to 1,

111
00:06:37.065 --> 00:06:39.954
is 1 less than 3, yes, it is.

112
00:06:39.954 --> 00:06:41.459
So we come back down here.

113
00:06:41.459 --> 00:06:45.342
Now, we get to position
1 of numbers which is?

114
00:06:45.342 --> 00:06:46.172
&gt;&gt; Michelle: 5.

115
00:06:46.172 --> 00:06:48.653
&gt;&gt; Will Sentance: 5, good.

116
00:06:48.653 --> 00:06:50.010
5 plus what?

117
00:06:50.010 --> 00:06:55.305
Increment it to 2, 2 less than 3,
yes, we come back down here.

118
00:06:55.305 --> 00:06:58.222
Now, i is what, Victor?

119
00:06:58.222 --> 00:06:59.075
&gt;&gt; Victor: It will be 6.

120
00:06:59.075 --> 00:07:00.454
&gt;&gt; Will Sentance: So-
&gt;&gt; Victor: I'm sorry.

121
00:07:00.454 --> 00:07:01.145
&gt;&gt; Will Sentance: Perfect, thank you.

122
00:07:01.145 --> 00:07:03.122
&gt;&gt; multiple: [LAUGH]
&gt;&gt; Will Sentance: You see, thank you,

123
00:07:03.122 --> 00:07:03.659
Victor.

124
00:07:03.659 --> 00:07:05.883
i is-
&gt;&gt; Victor: 2.

125
00:07:05.883 --> 00:07:08.274
&gt;&gt; Will Sentance: 2, so
number in position 2 is-

126
00:07:08.274 --> 00:07:09.207
&gt;&gt; Victor: 6.

127
00:07:09.207 --> 00:07:11.195
&gt;&gt; Will Sentance: 6.

128
00:07:11.195 --> 00:07:16.749
So we console.log 6,
i++ 3, is 3 less than 3?

129
00:07:16.749 --> 00:07:17.613
No, it's not.

130
00:07:17.613 --> 00:07:19.472
So we come out of our for loop.

131
00:07:19.472 --> 00:07:23.201
Okay, this is the best you can
diagram a for loop, I think, honestly,

132
00:07:23.201 --> 00:07:27.296
in the conditions, and still,
&gt;&gt; Will Sentance: Thank goodness,

133
00:07:27.296 --> 00:07:28.930
we didn't make that mistake,
thank you, ma'am.

134
00:07:28.930 --> 00:07:32.659
Cuz we're so
busy figuring out how to access,

135
00:07:32.659 --> 00:07:35.916
that we can't focus on what we wanna do.

136
00:07:35.916 --> 00:07:40.813
And by the way, we're gonna discover,
if we rethink our collections of data,

137
00:07:40.813 --> 00:07:44.102
our flows of data,
where we grab element by element,

138
00:07:44.102 --> 00:07:47.120
we can dynamically control
those flows of data.

139
00:07:47.120 --> 00:07:52.268
We can set what our next element in our
flow of data's gonna look like based on

140
00:07:52.268 --> 00:07:57.908
things that have happened in previous
elements after they've been returned out.

141
00:07:57.908 --> 00:08:02.332
Rethinking our collections of data as
instead flows of elements we wanna grab

142
00:08:02.332 --> 00:08:06.459
one by one, It's gonna give us control
over what those next elements will be.

143
00:08:06.459 --> 00:08:09.231
We'll see that a little bit later on,
really, really cool.

144
00:08:09.231 --> 00:08:13.547
But for now, programs store data and
apply functionality to it.

145
00:08:13.547 --> 00:08:17.864
There are two parts to applying
functionality to collections of data, 1,

146
00:08:17.864 --> 00:08:20.358
the process of accessing each element, and

147
00:08:20.358 --> 00:08:23.000
then, 2,
what we want to do to each element.

148
00:08:23.000 --> 00:08:28.823
Iterators, this new way of thinking about
accessing data from collections of data.

149
00:08:28.823 --> 00:08:30.998
I mean, it's like lists, or arrays, or

150
00:08:30.998 --> 00:08:33.750
whatever, automate
the accessing of the element.

151
00:08:33.750 --> 00:08:36.171
So we can focus on what we
do to each element, and

152
00:08:36.171 --> 00:08:38.241
make it available in a super smooth way.

153
00:08:38.241 --> 00:08:42.430
They make it available so they say we've
got a function that when called with

154
00:08:42.430 --> 00:08:44.599
parens, returns out my next element.

155
00:08:44.599 --> 00:08:46.871
Run it again, gives me the next element.

156
00:08:46.871 --> 00:08:48.352
Run it again, gives me the next.

157
00:08:48.352 --> 00:08:50.815
In other words, the function attached and

158
00:08:50.815 --> 00:08:55.759
bundled on it somehow, in the background
must be our underlying collection of data.

159
00:08:55.759 --> 00:09:00.727
Plus also, we must somehow hold on to
the information of which element am

160
00:09:00.727 --> 00:09:05.697
I currently at, so that we don't give
me out the same element each time,

161
00:09:05.697 --> 00:09:08.561
but give me out instead the next element.

162
00:09:08.561 --> 00:09:13.180
But we know that when a function runs it
never remembers its previous running.

163
00:09:13.180 --> 00:09:15.530
Its local memory gets reset every time,
right?

164
00:09:15.530 --> 00:09:20.467
It's empty, it's fill it, so how the hell
am I going to have my function both be

165
00:09:20.467 --> 00:09:23.267
able to be run,
give me the next element, but

166
00:09:23.267 --> 00:09:27.769
also therefore have underlying in it
somehow bundled on it my underlying

167
00:09:27.769 --> 00:09:31.938
array of data that it's grabbing
the next element from one by one?

168
00:09:31.938 --> 00:09:36.669
And bundled on it the sort of tracking
variable that's tracking which element

169
00:09:36.669 --> 00:09:38.245
have I already given out so

170
00:09:38.245 --> 00:09:42.270
I know which one to give out next,
how am I gonna bundle that all up?

171
00:09:43.970 --> 00:09:46.700
Imagine, though, if we could create
a function that stored the numbers, and

172
00:09:46.700 --> 00:09:52.180
each time we ran the function it would
return out our next element from numbers.

173
00:09:52.180 --> 00:09:55.404
Note you'd have to remember which
element was next up somehow.

174
00:09:55.404 --> 00:10:00.142
That means between the function's
invocations, runnings, it would somehow

175
00:10:00.142 --> 00:10:04.538
have to remember that what was the last
element that was passed out, hmm.

176
00:10:04.538 --> 00:10:09.193
But if we could do it, this would let us
think of our array, our list, 4, 5, 6,

177
00:10:09.193 --> 00:10:13.647
as a stream, a flow of data, with our
function returning out the next element,

178
00:10:13.647 --> 00:10:17.130
and then the next element,
did everyone get this bit yet?

179
00:10:17.130 --> 00:10:19.250
And the next element,
did I say this enough times?

180
00:10:19.250 --> 00:10:23.110
This makes our code more readable, and
we'll see in a minute, more functional.

181
00:10:23.110 --> 00:10:27.980
But it all starts with us returning
a function from another function.

182
00:10:28.990 --> 00:10:31.179
Because all the most beautiful,

183
00:10:31.179 --> 00:10:36.976
elegant things in JavaScript begin with us
returning a function for another function.

184
00:10:36.976 --> 00:10:41.687
Cuz that's gonna give our function
that's returned out superpowers.

185
00:10:41.687 --> 00:10:47.233
My favorite feature inJavaScript
is going to be revealed right now.

186
00:10:47.233 --> 00:10:49.183
But folk, also I'm gonna stress to you,

187
00:10:49.183 --> 00:10:51.651
do not get complacent about
what this code is doing.

188
00:10:51.651 --> 00:10:57.934
This code throws the most seasoned
engineers unless we're super precise line

189
00:10:57.934 --> 00:11:04.200
by line, and remember that we never
return to previous lines of code.

190
00:11:04.200 --> 00:11:07.020
We always finish a line of code,
we're done with it.

191
00:11:07.020 --> 00:11:11.070
We store whatever was the result of the
right-hand side in memory, and we move on.

192
00:11:11.070 --> 00:11:12.350
So I want to start off by saying.

193
00:11:12.350 --> 00:11:16.859
Okay, so line one, Blessing,

194
00:11:16.859 --> 00:11:21.040
what are we doing in line one?

195
00:11:21.040 --> 00:11:24.410
&gt;&gt; Blessing: We're defining a function,
createNewFunction.

196
00:11:24.410 --> 00:11:25.035
&gt;&gt; Will Sentance: Excellent.

197
00:11:25.035 --> 00:11:26.140
&gt;&gt; Blessing: [INAUDIBLE]
equivalent memory.

198
00:11:26.140 --> 00:11:33.271
&gt;&gt; Will Sentance: Excellent, excellent,
very clear, createNewFunction.

199
00:11:33.271 --> 00:11:37.598
Mm-hm, not quite the right casing.

200
00:11:37.598 --> 00:11:39.558
There you go,
createNewFunction stored in global memory.

201
00:11:39.558 --> 00:11:41.864
Next line up, Josh?

202
00:11:46.167 --> 00:11:49.600
So we grab the whole createNewFunction,
store it in memory, what's that next line?

203
00:11:49.600 --> 00:11:53.400
&gt;&gt; Josh: Is it the declare
the constant of a new function?

204
00:11:53.400 --> 00:11:54.066
&gt;&gt; Will Sentance: You're spot on.
&gt;&gt; Josh: As

205
00:11:54.066 --> 00:11:57.157
the function createNewFunction.

206
00:11:57.157 --> 00:11:59.712
&gt;&gt; Will Sentance: Yeah, exactly, we are
not immediately gonna go and create a new

207
00:11:59.712 --> 00:12:02.947
function, even though it's got another
function inside, we do not go inside.

208
00:12:02.947 --> 00:12:07.850
That's only gonna be reached
if we call createNewFunction.

209
00:12:07.850 --> 00:12:09.660
How do I call createNewFunction, Shaun?

210
00:12:09.660 --> 00:12:11.413
&gt;&gt; Shaun: Parenthesis.
&gt;&gt; Will Sentance: Parenthesis, excellent.

211
00:12:11.413 --> 00:12:13.905
I will never go inside otherwise.

212
00:12:13.905 --> 00:12:16.237
If I never call createNewFunction,

213
00:12:16.237 --> 00:12:21.063
that code inside of there will never
be defined, stuff will never be saved.

214
00:12:21.063 --> 00:12:24.387
The overall description of the function
body is save, you can think

215
00:12:24.387 --> 00:12:27.841
of it almost kind of like a string of
things that would be done later on.

216
00:12:27.841 --> 00:12:30.284
A string of instructions
to be done later on.

217
00:12:30.284 --> 00:12:35.249
All right, good,
we declare a new function.

218
00:12:35.249 --> 00:12:38.311
You've got to get this piece down,
this is almost an interlude.

219
00:12:38.311 --> 00:12:41.769
This is us understanding what happens when
I return a function for another function.

220
00:12:41.769 --> 00:12:45.670
In order, the hard piece to follow
follows naturally, all right?

221
00:12:45.670 --> 00:12:47.322
New function's declared.

222
00:12:47.322 --> 00:12:51.494
It's gonna be the return value
of calling createNewFunction.

223
00:12:51.494 --> 00:12:56.129
Suli, if I took the parens off the
createNewFunction, and had just const new

224
00:12:56.129 --> 00:13:00.922
function equals create new function,
what would I be storing in new function?

225
00:13:00.922 --> 00:13:03.541
&gt;&gt; Suli: CreateNewFunction.

226
00:13:03.541 --> 00:13:06.514
&gt;&gt; Will Sentance: Spot on,
the entire createNewFunction definition.

227
00:13:06.514 --> 00:13:10.794
I would have just new function as
another label for createNewFunction.

228
00:13:10.794 --> 00:13:12.820
Wouldn't be a copy,
it would just be another label for

229
00:13:12.820 --> 00:13:14.502
that underlying function stored in memory.

230
00:13:14.502 --> 00:13:16.243
Very good, Suli,but we're not doing that.

231
00:13:16.243 --> 00:13:19.746
Instead, we're saying go run
createNewFunction, see what comes back,

232
00:13:19.746 --> 00:13:22.258
and that's what's gonna be
stored in new function.

233
00:13:23.402 --> 00:13:29.759
&gt;&gt; Will Sentance: Let's do it, ah-ha,
new function is the return value,

234
00:13:29.759 --> 00:13:34.710
the output of calling createfunction().

235
00:13:34.710 --> 00:13:35.722
And remember it could be anything.

236
00:13:35.722 --> 00:13:40.377
Whatever comes out,
it could be a number, an object,

237
00:13:40.377 --> 00:13:43.627
it could be a function in JavaScript.

238
00:13:43.627 --> 00:13:49.112
So everybody together, when we start
executing a function we create a new.

239
00:13:49.112 --> 00:13:50.552
&gt;&gt; multiple: Execution context.

240
00:13:50.552 --> 00:13:53.609
&gt;&gt; Will Sentance: Rick,
I'm watching, we create a new?

241
00:13:53.609 --> 00:13:56.058
&gt;&gt; multiple: Execution context.

242
00:13:56.058 --> 00:13:57.417
&gt;&gt; Will Sentance: That's too fast.

243
00:13:57.417 --> 00:13:58.144
If you're more measured.

244
00:13:58.144 --> 00:13:58.964
A new?

245
00:13:58.964 --> 00:13:59.997
&gt;&gt; multiple: Execution context.

246
00:13:59.997 --> 00:14:01.818
&gt;&gt; Will Sentance: Execution context.

247
00:14:01.818 --> 00:14:06.999
Yes, it doesn't sound like a cult
unless you do it in a sing songy voice.

248
00:14:06.999 --> 00:14:13.602
That is a sign and actually,
I shouldn't make these sort of jokes.

249
00:14:13.602 --> 00:14:17.982
Good, I hope you all feel,
&gt;&gt; Will Sentance: That you can leave at

250
00:14:17.982 --> 00:14:19.286
any time, no this is, okay.

251
00:14:19.286 --> 00:14:20.905
This is not funny, this is not funny.

252
00:14:20.905 --> 00:14:24.687
All right good, okay so
createNewFunction is called,

253
00:14:24.687 --> 00:14:28.635
what's the first thing we do
inside its memory Michelle.

254
00:14:28.635 --> 00:14:32.180
&gt;&gt; Michelle: We create a new
function called addto.

255
00:14:32.180 --> 00:14:33.927
&gt;&gt; Will Sentance: Excellent, there it is.

256
00:14:33.927 --> 00:14:36.343
I'm gonna do this function in
a slightly different color.

257
00:14:36.343 --> 00:14:43.370
Add2,
&gt;&gt; Will Sentance: There it is.

258
00:14:43.370 --> 00:14:46.110
Well, where's my nice new green pen?

259
00:14:48.540 --> 00:14:50.828
Okay, add2 as its function.

260
00:14:50.828 --> 00:14:54.793
Okay, JavaScript is literally storing
the whole functionality associated with

261
00:14:54.793 --> 00:14:58.566
the label, add2
&gt;&gt; Will Sentance: Do we call that label,

262
00:14:58.566 --> 00:15:01.265
or do we call that function,
we're gonna evoke that function, RD?

263
00:15:01.265 --> 00:15:02.597
&gt;&gt; RD: Give me the question one more time.

264
00:15:02.597 --> 00:15:05.007
&gt;&gt; Will Sentance: Are we gonna evoke, are
we gonna execute that to at this point?

265
00:15:05.007 --> 00:15:05.799
&gt;&gt; RD: No.

266
00:15:05.799 --> 00:15:07.008
&gt;&gt; Will Sentance: What
are we doing instead, RD?

267
00:15:07.008 --> 00:15:12.829
&gt;&gt; RD: We are going down to return, add2.

268
00:15:12.829 --> 00:15:13.813
&gt;&gt; Will Sentance: Excellent,

269
00:15:13.813 --> 00:15:19.097
return the entire function definition
whose current label is add2.

270
00:15:19.097 --> 00:15:20.945
But we're not returning add2,

271
00:15:20.945 --> 00:15:24.850
we're returning the function
that has the label add2.

272
00:15:24.850 --> 00:15:28.020
When JavaScript sees the word
return add2 it goes, add2,

273
00:15:28.020 --> 00:15:31.300
let me go look in memory
what I stored in that label.

274
00:15:31.300 --> 00:15:32.992
It's this function, perfect.

275
00:15:32.992 --> 00:15:38.011
So return out that entire function
definition, the whole thing,

276
00:15:38.011 --> 00:15:43.489
that is literally the words function,
friends, numb, curly braces.

277
00:15:43.489 --> 00:15:45.908
Return numb plus 2.

278
00:15:45.908 --> 00:15:48.241
And it's returning all
of that function out.

279
00:15:48.241 --> 00:15:50.410
And it's gonna store it where, Victor?

280
00:15:50.410 --> 00:15:54.423
And what global variable or
global label is it gonna store it?

281
00:15:54.423 --> 00:15:55.964
&gt;&gt; Victor: Under new function.

282
00:15:55.964 --> 00:15:58.431
&gt;&gt; Will Sentance: Exactly.

283
00:15:58.431 --> 00:16:01.262
There it is under new function.

284
00:16:01.262 --> 00:16:06.360
It used to be called Named add 2,
not anymore, but it is

285
00:16:06.360 --> 00:16:10.670
still that functionality in memory, we've
just passed it out, not copied it out.

286
00:16:10.670 --> 00:16:12.650
It's the underlying function,
we just passed it out and

287
00:16:12.650 --> 00:16:14.720
given it a new global label,
a new function.

288
00:16:15.900 --> 00:16:18.754
Perfect, by hitting the return statement,

289
00:16:18.754 --> 00:16:21.992
what happens in this execution context,
Victor?

290
00:16:21.992 --> 00:16:25.210
When we hit the return statement of
an execution context with a function.

291
00:16:25.210 --> 00:16:25.711
&gt;&gt; Victor: It goes away, right?

292
00:16:25.711 --> 00:16:26.807
&gt;&gt; Will Sentance: It goes away.

293
00:16:26.807 --> 00:16:29.325
In terms of our call stack,
it gets popped off the call stack.

294
00:16:29.325 --> 00:16:33.350
But it's deleted, and all the stuff in
it that's not returned out, is deleted.

295
00:16:33.350 --> 00:16:35.787
But the function got returned out,
so it ain't deleted.

296
00:16:35.787 --> 00:16:38.370
Cuz we gave it a new label out here,
so it's not deleted.

297
00:16:38.370 --> 00:16:41.090
Remember, posh word for
deleting stuff from memory is, or

298
00:16:41.090 --> 00:16:45.780
is it deleting stuff when we close out an
execution context, is automatic garbage.

299
00:16:45.780 --> 00:16:50.606
Anything that wasn't going to be used out
here is garbage, wasted memory collection.

300
00:16:50.606 --> 00:16:56.204
All right, good so we're back out
now in the global execution context.

301
00:16:56.204 --> 00:17:00.017
The last line was newFunction, is going
to be the output of createFunction,

302
00:17:00.017 --> 00:17:01.370
which it is.

303
00:17:01.370 --> 00:17:04.133
There it is,
the output was a new function called add2.

304
00:17:04.133 --> 00:17:05.705
Well it was called add2 in here,

305
00:17:05.705 --> 00:17:08.357
now it's just the definition
of add2 in the new label.

306
00:17:08.357 --> 00:17:11.082
So if I wanna now run, call, invoke, Ben,

307
00:17:11.082 --> 00:17:15.530
that inner add2 function out here,
what label do I use for it out here?

308
00:17:15.530 --> 00:17:16.074
&gt;&gt; Ben: newFunction.

309
00:17:16.074 --> 00:17:18.516
&gt;&gt; Will Sentance: newFunction,
excellent, and

310
00:17:18.516 --> 00:17:21.778
how do I run, call, invoke newFunction?

311
00:17:21.778 --> 00:17:22.389
&gt;&gt; Ben: Parentheses.

312
00:17:22.389 --> 00:17:27.964
&gt;&gt; Will Sentance: Parens, and because if
I look at the definition, now we visibly.

313
00:17:27.964 --> 00:17:32.772
Visibly, we as developers, we're gonna
look back at the definition of add2.

314
00:17:32.772 --> 00:17:34.930
JavaScript is not doing that.

315
00:17:34.930 --> 00:17:38.927
It literally passed the definition out and
stored it in newFunction.

316
00:17:38.927 --> 00:17:42.967
So it's gonna look in newFunction for
the definition of add2.

317
00:17:42.967 --> 00:17:45.577
And what does it see it needs to receive,
Ben?

318
00:17:45.577 --> 00:17:46.586
&gt;&gt; Ben: A num.

319
00:17:46.586 --> 00:17:47.568
&gt;&gt; Will Sentance: Exactly, an argument.

320
00:17:47.568 --> 00:17:49.498
So let's put, I don't know, 3.

321
00:17:49.498 --> 00:17:53.458
And we're going to store the result
of calling NewFunction in?

322
00:17:53.458 --> 00:17:53.974
&gt;&gt; Ben: A result.

323
00:17:53.974 --> 00:17:55.795
&gt;&gt; Will Sentance: In result, excellent.

324
00:17:55.795 --> 00:17:58.101
So Paul,
we're going to create at this point a new?

325
00:17:59.695 --> 00:18:01.761
&gt;&gt; Will Sentance: Box, what are we going
to create when we execute newFunction?

326
00:18:01.761 --> 00:18:03.860
&gt;&gt; Paul: We're going to do
local execution context.

327
00:18:03.860 --> 00:18:06.874
&gt;&gt; Will Sentance: Excellent, there it is.

328
00:18:06.874 --> 00:18:09.333
Into it we go.

329
00:18:09.333 --> 00:18:14.441
And, Paul, what's the first thing in
our memory, for the first pairing?

330
00:18:14.441 --> 00:18:15.305
&gt;&gt; Paul: The parameter?

331
00:18:15.305 --> 00:18:16.331
&gt;&gt; Will Sentance: Which is?

332
00:18:16.331 --> 00:18:17.895
&gt;&gt; Paul: It's called NUM.

333
00:18:17.895 --> 00:18:18.550
&gt;&gt; Will Sentance: Excellent.
&gt;&gt; Paul: And

334
00:18:18.550 --> 00:18:20.363
it's assigned to the integer 3.

335
00:18:20.363 --> 00:18:22.522
&gt;&gt; Will Sentance: Yeah and
be really clear.

336
00:18:22.522 --> 00:18:26.166
I know I said this already, but
do not think that JavaScript,

337
00:18:26.166 --> 00:18:29.823
when it sees newFunction,
is going, what's newFunction?

338
00:18:29.823 --> 00:18:31.570
I'd better go and check the line before.

339
00:18:31.570 --> 00:18:33.480
It's create newFunction.

340
00:18:33.480 --> 00:18:36.159
The line before will never be returned to.

341
00:18:36.159 --> 00:18:41.759
The line before, create an execution
context, inside of which it created add2,

342
00:18:41.759 --> 00:18:46.479
was returned out, stored in newFunction,
and at no point do we ever,

343
00:18:46.479 --> 00:18:51.371
ever, ever, does newFunction ever
care about createFunction again.

344
00:18:51.371 --> 00:18:54.448
It only cared about createFunction
in the sense of I don't yet

345
00:18:54.448 --> 00:18:58.353
know what to store in me, so I'm undefined
while I go and run createFunction,

346
00:18:58.353 --> 00:19:01.813
get an actual value, this function,
and store that function here.

347
00:19:01.813 --> 00:19:08.080
Never think that it's newFunction is
a command to go and run createFunction.

348
00:19:08.080 --> 00:19:12.713
It isn't, it's whatever at that moment you
got out a createFunction and that's over.

349
00:19:12.713 --> 00:19:14.399
So it's the add2 functionality.

350
00:19:14.399 --> 00:19:16.378
So when we call a newFunction like below,

351
00:19:16.378 --> 00:19:18.822
it is just interested in
the add2 functionality.

352
00:19:18.822 --> 00:19:20.914
It never goes back into createFunction.

353
00:19:20.914 --> 00:19:24.880
Seasoned engineers get muddled about that.

354
00:19:24.880 --> 00:19:26.183
Do not let yourself get muddled.

355
00:19:26.183 --> 00:19:31.100
If we don't get that clear, all
the iterated stuff doesn't follow, okay?

356
00:19:31.100 --> 00:19:33.375
So yet we can now run newFunction.

357
00:19:33.375 --> 00:19:35.372
Visually, we visually
is what I want to say.

358
00:19:35.372 --> 00:19:37.812
We have to look back in to see
what add2's definition is.

359
00:19:37.812 --> 00:19:41.981
I wish we didn't, I wish we could put it
out and inspect what newFunction is and

360
00:19:41.981 --> 00:19:43.384
see that functionality.

361
00:19:43.384 --> 00:19:47.455
That's what we're looking at and you're
right, it says num is a parameter and

362
00:19:47.455 --> 00:19:48.012
set to 3.

363
00:19:48.012 --> 00:19:51.861
Where we are then going to return out 3+2,

364
00:19:51.861 --> 00:19:56.332
return out the 5 into what
global variable, Paul?

365
00:19:56.332 --> 00:19:58.766
&gt;&gt; Paul: Result.
&gt;&gt; Will Sentance: Into result, excellent.

366
00:19:58.766 --> 00:19:59.491
There it is.

367
00:20:02.476 --> 00:20:03.966
&gt;&gt; Will Sentance: So
thumbs in a second, on.

368
00:20:03.966 --> 00:20:05.949
I create a function
called createNewFunction.

369
00:20:05.949 --> 00:20:09.757
I then create a placeholder newFunction
that was gonna be whatever came out

370
00:20:09.757 --> 00:20:12.001
the bottom of running createNewFunction.

371
00:20:12.001 --> 00:20:16.160
Well, what came out the bottom was
an entire function definition add2

372
00:20:16.160 --> 00:20:17.074
returned out.

373
00:20:17.074 --> 00:20:20.328
I now use the new global
label newFunction for

374
00:20:20.328 --> 00:20:25.462
that functionality add2,
forming those add2 to run it, pass in 3,

375
00:20:25.462 --> 00:20:30.267
add2 to it, get out 5 and
throw it in the global constant result.

376
00:20:30.267 --> 00:20:33.563
Everyone's thumbs,
you lost me, I'm totally clear.

377
00:20:33.563 --> 00:20:34.550
I have a clarification.

378
00:20:34.550 --> 00:20:38.452
Your clarification might just be,
why the hell do we do this?

379
00:20:38.452 --> 00:20:40.205
&gt;&gt; multiple: [LAUGH]
&gt;&gt; Will Sentance: Everybody's thumbs out.

380
00:20:42.204 --> 00:20:42.885
&gt;&gt; Will Sentance: Okay.

