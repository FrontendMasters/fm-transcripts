WEBVTT

1
00:00:00.000 --> 00:00:04.804
&gt;&gt; Will Sentance: Here we are,
Hard Parts of JavaScript.

2
00:00:04.804 --> 00:00:09.546
The foundations we have to understand
in order to get to the Hard Parts

3
00:00:09.546 --> 00:00:14.064
are gonna feel at times a little
bit trite, a little bit trivial.

4
00:00:14.064 --> 00:00:18.419
I've hoped you've been to Hard Parts
before, you'll even gonna feel, hold on,

5
00:00:18.419 --> 00:00:20.049
I've seen this stuff before.

6
00:00:20.049 --> 00:00:23.865
Our first about 30 minutes or so
is going to be material that,

7
00:00:23.865 --> 00:00:27.477
if you've been to Hard Parts before,
you'll recognize.

8
00:00:27.477 --> 00:00:31.644
Because that is the JavaScript engine and
how it works,

9
00:00:31.644 --> 00:00:36.441
it's universal, but
we've got to lay these foundations out.

10
00:00:36.441 --> 00:00:38.629
And by the way you're going to see
code where you're going to go yeah,

11
00:00:38.629 --> 00:00:39.200
yeah, thanks.

12
00:00:39.200 --> 00:00:41.570
I get how this code is running,
I get what it's doing.

13
00:00:41.570 --> 00:00:43.030
But we're gonna see it,

14
00:00:43.030 --> 00:00:47.985
and it's gonna empower us to then
solve all the hard parts to come.

15
00:00:47.985 --> 00:00:49.389
All right.

16
00:00:52.050 --> 00:00:53.820
&gt;&gt; Will Sentance: Let's go, here it is.

17
00:00:54.860 --> 00:00:59.402
We're gonna whiteboard through all
of our code's execution just as

18
00:00:59.402 --> 00:01:01.524
the JavaScript engine runs it.

19
00:01:01.524 --> 00:01:05.716
We do that,
there can be no gaps in our understanding.

20
00:01:05.716 --> 00:01:08.204
We're gonna step through line by line, and

21
00:01:08.204 --> 00:01:11.376
we're gonna map it up on
the whiteboard the whole time.

22
00:01:11.376 --> 00:01:15.973
So with that in mind, what happens when
JavaScript executes, runs my code?

23
00:01:15.973 --> 00:01:18.164
There's two halves, and
I'll tell you straight away.

24
00:01:18.164 --> 00:01:22.590
There's two halves to
the process of executing code.

25
00:01:22.590 --> 00:01:29.330
One is literally the ability to walk
through the code line by line by line.

26
00:01:29.330 --> 00:01:32.490
That is known as the thread of execution.

27
00:01:32.490 --> 00:01:37.500
And all that is the processing
ability to take line one, do it,

28
00:01:37.500 --> 00:01:38.550
whatever it says to do.

29
00:01:38.550 --> 00:01:40.980
Take line two, do it,
whatever it says to do.

30
00:01:40.980 --> 00:01:42.536
Take line three, do it, whatever it says.

31
00:01:42.536 --> 00:01:45.507
It's executing, doing the code,
blah, blah, and

32
00:01:45.507 --> 00:01:47.693
it's threading its way down our code.

33
00:01:47.693 --> 00:01:51.232
By the way, in order, top to bottom.

34
00:01:51.232 --> 00:01:56.671
Simultaneously, the other part that's
required to run our code is a place

35
00:01:56.671 --> 00:02:02.557
to store the bits of data that we announce
as we go through our code's execution.

36
00:02:02.557 --> 00:02:05.222
So you can see in line one,
we're announcing,

37
00:02:05.222 --> 00:02:08.630
then we're gonna store num as
the label for some data three.

38
00:02:08.630 --> 00:02:11.030
And so
we're gonna map these on the whiteboard,

39
00:02:11.030 --> 00:02:14.500
which will be a fascinating experience.

40
00:02:14.500 --> 00:02:19.330
Let's see how it goes line by line,
starting with line one.

41
00:02:19.330 --> 00:02:21.960
I'm gonna call on Paul.

42
00:02:21.960 --> 00:02:24.030
What are we doing here in line one?

43
00:02:24.030 --> 00:02:25.900
What are we actually doing?

44
00:02:25.900 --> 00:02:30.330
&gt;&gt; Paul: We're saying
allocate some data to global

45
00:02:31.510 --> 00:02:36.590
to a constant called num, and
then toss an integer 3 onto that?

46
00:02:36.590 --> 00:02:39.418
&gt;&gt; Will Sentance: Well, that seems
like a very intuitive description.

47
00:02:39.418 --> 00:02:42.672
So we are in our memory.

48
00:02:42.672 --> 00:02:48.687
In our memory,
we are declaring a constant.

49
00:02:48.687 --> 00:02:49.531
Just remember,

50
00:02:49.531 --> 00:02:53.822
that means a piece of data where we're not
allowed to change its position in memory.

51
00:02:53.822 --> 00:02:58.262
So we can't suddenly
replace num's value with 4.

52
00:02:58.262 --> 00:03:02.042
It's now set for
the running of our application,

53
00:03:02.042 --> 00:03:05.017
num is set to the value 3, excellent.

54
00:03:05.017 --> 00:03:08.040
Michelle what does our next line
of code here is saying to do?

55
00:03:08.040 --> 00:03:12.151
&gt;&gt; Paul: The next line of code is also
creating something in memory that

56
00:03:12.151 --> 00:03:14.655
we're calling-
&gt;&gt; Will Sentance: All right everybody

57
00:03:14.655 --> 00:03:19.520
we're being very precise, this is
precise [LAUGH] go on what's it called?

58
00:03:19.520 --> 00:03:21.491
Called variety, excellent.
Named multiplyBy2,

59
00:03:21.491 --> 00:03:25.367
we're declaring
the function multipliedBy2.

60
00:03:25.367 --> 00:03:29.682
In JavaScript functions
that means the entire

61
00:03:29.682 --> 00:03:33.451
functionality is our signed as values.

62
00:03:33.451 --> 00:03:37.802
Just like the number 3 we're storing
in memory, the functionality,

63
00:03:37.802 --> 00:03:40.496
the function definition of multiplyBy2.

64
00:03:40.496 --> 00:03:42.404
I'm not gonna write the whole
function definition out on

65
00:03:42.404 --> 00:03:43.362
the right-hand side here.

66
00:03:43.362 --> 00:03:46.818
Instead, I'm gonna represent it
with this little box with an f in.

67
00:03:46.818 --> 00:03:49.595
That represents my entire
function definition.

68
00:03:49.595 --> 00:03:55.411
If I do in my console,
now log multiplyBy2,

69
00:03:55.411 --> 00:03:58.784
what would I see, James?

70
00:03:58.784 --> 00:04:02.510
&gt;&gt; Paul: You would see the actual
source code for the function.

71
00:04:02.510 --> 00:04:05.370
&gt;&gt; Will Sentance: Yeah, exactly.
I'd see the block of code itself

72
00:04:05.370 --> 00:04:07.480
function multiplyBy2.

73
00:04:07.480 --> 00:04:12.170
You know I would see the whole
thing with the code in my console.

74
00:04:12.170 --> 00:04:16.195
That is what we mean when
we say declare a function.

75
00:04:16.195 --> 00:04:20.149
Sometimes we think or we just sort of go
there's a functioning code, none of that.

76
00:04:20.149 --> 00:04:24.445
The key word function literally
means go save in memory,

77
00:04:24.445 --> 00:04:28.303
go save in memory this
particular functionality.

78
00:04:28.303 --> 00:04:34.114
All right, excellent, what our third
line of code that executes, Sean?

79
00:04:34.114 --> 00:04:39.096
&gt;&gt; Sean: It's doing the same thing
as our first constant declaration,

80
00:04:39.096 --> 00:04:44.000
just creating a piece of memory
called name, sending it to a-

81
00:04:44.000 --> 00:04:44.550
&gt;&gt; Will Sentance: Excellent,

82
00:04:44.550 --> 00:04:48.350
Sean, what was not our third line of code?

83
00:04:48.350 --> 00:04:48.990
&gt;&gt; Sean: const result.

84
00:04:48.990 --> 00:04:50.340
&gt;&gt; Will Sentance: Right, why not?

85
00:04:50.340 --> 00:04:53.560
&gt;&gt; Sean: Because that is
not being called yet.

86
00:04:53.560 --> 00:04:57.778
&gt;&gt; Will Sentance: Exactly, we do not go
into the body of a function until what,

87
00:04:57.778 --> 00:04:58.284
Sean?

88
00:04:58.284 --> 00:04:59.211
&gt;&gt; Sean: Until it's called.

89
00:04:59.211 --> 00:05:00.259
&gt;&gt; Will Sentance: Until it's called,
excellent.

90
00:05:00.259 --> 00:05:02.003
All right, Sean is spot on there.

91
00:05:02.003 --> 00:05:06.549
And folk,
this may seem profoundly trivial.

92
00:05:06.549 --> 00:05:09.017
Okay, I get how to store stuff in memory.

93
00:05:09.017 --> 00:05:11.356
But this foundation is what we need.

94
00:05:11.356 --> 00:05:17.093
This level of precision is absolutely
vital for everything that follows,

95
00:05:17.093 --> 00:05:21.565
all the way up to rebuilding
async await with generators.

96
00:05:21.565 --> 00:05:24.779
It all in the end depends
on these foundations.

97
00:05:24.779 --> 00:05:26.582
All right, excellent.

98
00:05:26.582 --> 00:05:31.158
So, as soon as we start running our code,
we spin up two things.

99
00:05:31.158 --> 00:05:33.860
One, the ability to go through
our code line by line.

100
00:05:33.860 --> 00:05:35.439
That's our thread of execution.

101
00:05:35.439 --> 00:05:39.540
Remember, threading its way through and
executing the code line by line.

102
00:05:39.540 --> 00:05:44.287
And simultaneously we spin up, it's right
there, the executing policy is you encode

103
00:05:44.287 --> 00:05:47.160
line by line,
a live memory of variables with data.

104
00:05:47.160 --> 00:05:50.410
A live store of labels with data.

105
00:05:50.410 --> 00:05:53.461
Posh name for
that is a variable environment,

106
00:05:53.461 --> 00:05:56.208
we can call it as a variable environment.

107
00:05:56.208 --> 00:06:00.661
Think of it as being,
environment is the things around me.

108
00:06:00.661 --> 00:06:04.021
These are the variables around me,
the variable environment.

109
00:06:04.021 --> 00:06:09.015
Now, these two halves together are known.

110
00:06:09.015 --> 00:06:12.613
These two halves together, the thread
of it, we're gonna walk through.

111
00:06:12.613 --> 00:06:15.435
We didn't copy out the lines in
the thread, there's no point.

112
00:06:15.435 --> 00:06:20.513
But these two halves together
are known as an execution context.

113
00:06:20.513 --> 00:06:26.785
A context is a space to do something, a
space of context in which we do something

114
00:06:26.785 --> 00:06:32.975
or it's the space in which we execute
our code, it's an execution context.

115
00:06:32.975 --> 00:06:37.378
And it's the global one cuz we're gonna
discover whenever you wanna run code,

116
00:06:37.378 --> 00:06:41.911
including for example, when we wanna
execute the code inside a function, we're

117
00:06:41.911 --> 00:06:46.511
gonna create a little baby local execution
context just for running the code inside

118
00:06:46.511 --> 00:06:51.380
a function, we call that the local one,
just for the stuff inside the function.

119
00:06:51.380 --> 00:06:57.420
So this though is for our overall code,
it's called the global execution context.

120
00:06:57.420 --> 00:07:00.752
All right people, let's see.

121
00:07:00.752 --> 00:07:01.854
What's next?

122
00:07:01.854 --> 00:07:07.414
All right, as Sean rightly said,
we did not execute, we did not call,

123
00:07:07.414 --> 00:07:13.828
we did not invoke multiplyBy2, so we
stayed in which execution context, Sean?

124
00:07:13.828 --> 00:07:14.399
&gt;&gt; Sean: Global.

125
00:07:14.399 --> 00:07:16.577
&gt;&gt; Will Sentance: Global, excellent, but

126
00:07:16.577 --> 00:07:21.533
now we are going to execute a function and
see what happens.

127
00:07:21.533 --> 00:07:25.790
So we've declared number three,
declared multiplyBy2 the function.

128
00:07:25.790 --> 00:07:28.821
What is our next line of code?

129
00:07:28.821 --> 00:07:30.079
Mr. Henderson.

130
00:07:30.079 --> 00:07:30.940
&gt;&gt; Brian Henderson: Yes.

131
00:07:30.940 --> 00:07:32.225
&gt;&gt; Will Sentance: What is our
next line of code, Brian?

132
00:07:32.225 --> 00:07:36.270
&gt;&gt; Brian Henderson: We are creating
a new label in memory called output.

133
00:07:36.270 --> 00:07:39.940
&gt;&gt; Will Sentance: Excellent,
do we know what to assign to it yet?

134
00:07:39.940 --> 00:07:41.292
&gt;&gt; Brian Henderson: It's
undefined at this point.

135
00:07:41.292 --> 00:07:43.107
&gt;&gt; Will Sentance: Very good.

136
00:07:43.107 --> 00:07:45.590
Because what's the right hand side?

137
00:07:45.590 --> 00:07:47.989
Is the right hand side
a value that we can store?

138
00:07:47.989 --> 00:07:50.858
&gt;&gt; Brian Henderson: No,
it's calling the execution of-

139
00:07:50.858 --> 00:07:51.402
&gt;&gt; Will Sentance: Exactly,

140
00:07:51.402 --> 00:07:53.399
it's a command to go and do something.

141
00:07:53.399 --> 00:07:56.430
It's actually not a value we can
store on the right hand side.

142
00:07:56.430 --> 00:07:58.870
Output has zero interest in multiplyBy2.

143
00:07:58.870 --> 00:08:00.550
That is a command to go and

144
00:08:00.550 --> 00:08:05.490
run some code whatever gets returned
out known as the, what Brian?

145
00:08:05.490 --> 00:08:09.730
What's the generic name for
what gets returned out of function?

146
00:08:09.730 --> 00:08:11.370
&gt;&gt; Brian Henderson: The return value.

147
00:08:11.370 --> 00:08:12.990
&gt;&gt; Will Sentance: Return value, exactly.

148
00:08:12.990 --> 00:08:15.797
Quite literal, the returned value.

149
00:08:15.797 --> 00:08:18.245
That's what's going to
be assigned to output.

150
00:08:18.245 --> 00:08:21.252
All right, let's do it.

151
00:08:21.252 --> 00:08:25.272
So output is going to be the result,

152
00:08:25.272 --> 00:08:32.376
the return value of calling
multiplyBy2 with the input of 4.

153
00:08:32.376 --> 00:08:38.720
There we go, so what did I say we create
whenever we have code to execute?

154
00:08:38.720 --> 00:08:39.930
Blessing?

155
00:08:39.930 --> 00:08:42.580
&gt;&gt; Blessing: Look at the execution context
&gt;&gt; Will Sentance: An execution context,

156
00:08:42.580 --> 00:08:44.040
I'm gonna represent that.

157
00:08:44.040 --> 00:08:48.425
This is the bigger box with two parts I'm
gonna represent that with a little box

158
00:08:48.425 --> 00:08:50.026
with two parts, here it is.

159
00:08:50.026 --> 00:08:54.539
I'm taking this slowly cuz these are
genuinely, over the next 10, 15 minutes,

160
00:08:54.539 --> 00:08:58.311
we're gonna see the three pieces
of synchnous JavaScript execution.

161
00:08:58.311 --> 00:09:01.617
If we don't get these pieces down,
nothing else follows.

162
00:09:01.617 --> 00:09:05.466
So into this execution context we go.

163
00:09:05.466 --> 00:09:09.840
And just like our global one for
running the main code, now we're gonna run

164
00:09:09.840 --> 00:09:14.633
the code for just inside multiplyBy2,
we're gonna have a little memory just for

165
00:09:14.633 --> 00:09:18.543
the code, just for the things
that get announced, get declared.

166
00:09:18.543 --> 00:09:22.247
The variables, and
functions, and parameters,

167
00:09:22.247 --> 00:09:27.082
and arguments that get declared
inside of multiplyBy2's body.

168
00:09:27.082 --> 00:09:28.460
They're just gonna be sorting here.

169
00:09:28.460 --> 00:09:32.942
By the way,
when this function finishes executing,

170
00:09:32.942 --> 00:09:37.226
all those pieces,
unless they're returned out,

171
00:09:37.226 --> 00:09:41.823
will be deleted automatically,
garbage collected.

172
00:09:41.823 --> 00:09:46.044
It's stuff that we can't access again,
we can't reference those names again, so

173
00:09:46.044 --> 00:09:46.881
it's garbage.

174
00:09:46.881 --> 00:09:49.133
It's memory that's being wasted.

175
00:09:49.133 --> 00:09:52.606
We're gonna automatically clean
it out in JavaScript, okay,

176
00:09:52.606 --> 00:09:56.670
except in one special condition which
we'll see a little bit later on.

177
00:09:56.670 --> 00:09:58.890
Cuz it's my favorite thing in JavaScript,

178
00:09:58.890 --> 00:10:01.860
those times when all our
data is not necessarily

179
00:10:01.860 --> 00:10:05.780
deleted when we exit a function,
the most beautiful concept in JavaScript.

180
00:10:05.780 --> 00:10:10.190
And even though we're not gonna
go through it as the focal point,

181
00:10:10.190 --> 00:10:14.490
inevitably we have to come to it,
in its radius.

182
00:10:14.490 --> 00:10:16.310
Okay, good, so in we go.

183
00:10:16.310 --> 00:10:18.080
And what is the first thing,

184
00:10:18.080 --> 00:10:23.270
Rick, inside our local execution
context that we're gonna do?

185
00:10:23.270 --> 00:10:27.350
&gt;&gt; Rick: Defining a constant
variable called result.

186
00:10:27.350 --> 00:10:30.060
&gt;&gt; Will Sentance: So
that's our second thing, Rick.

187
00:10:30.060 --> 00:10:32.819
What's the very first thing
we put in our local memory?

188
00:10:32.819 --> 00:10:34.089
&gt;&gt; Rick: The function.

189
00:10:34.089 --> 00:10:36.016
&gt;&gt; Will Sentance: Not the function,
Michelle?

190
00:10:36.016 --> 00:10:37.118
&gt;&gt; Michelle: The input number.

191
00:10:37.118 --> 00:10:41.320
&gt;&gt; Will Sentance: Exactly, input number
which is known as our parameter,

192
00:10:41.320 --> 00:10:43.426
remember the placeholder.

193
00:10:43.426 --> 00:10:47.303
We defined a function which is to say,
we will run this thing later on.

194
00:10:47.303 --> 00:10:50.397
When you run me,
better make sure you fill in that blank,

195
00:10:50.397 --> 00:10:53.181
that placeholder and
put number with an argument.

196
00:10:53.181 --> 00:10:55.165
Parameter is the placeholder.

197
00:10:55.165 --> 00:10:57.694
Argument is the actual
value that gets passed in.

198
00:10:57.694 --> 00:10:59.517
Michelle, what's our argument?

199
00:10:59.517 --> 00:11:00.667
&gt;&gt; Michelle: Our argument is 4.

200
00:11:00.667 --> 00:11:03.048
&gt;&gt; Will Sentance: Excellent,
and so result is 8.

201
00:11:03.048 --> 00:11:08.073
And the final line of the body of
the function says do what, Josh?

202
00:11:08.073 --> 00:11:09.699
&gt;&gt; Josh: To return 8?

203
00:11:09.699 --> 00:11:10.997
&gt;&gt; Will Sentance: To return 8,
I like that.

204
00:11:10.997 --> 00:11:13.291
Return the value of result, 8.

205
00:11:13.291 --> 00:11:14.684
It's not returning result.

206
00:11:14.684 --> 00:11:17.828
It returns the value of result,
which is a number 8.

207
00:11:17.828 --> 00:11:20.797
I don't like saying return result,
it kind of implies the whole thing.

208
00:11:20.797 --> 00:11:24.355
It's JavaScript sees return result and
goes, what's result?

209
00:11:24.355 --> 00:11:25.769
8, okay, perfect.

210
00:11:25.769 --> 00:11:28.762
Return it out to where?

211
00:11:28.762 --> 00:11:30.052
What was your name, dude?

212
00:11:30.052 --> 00:11:30.684
&gt;&gt; Brady: Brady.

213
00:11:30.684 --> 00:11:31.826
&gt;&gt; Will Sentance: Brady, sorry Brady.

214
00:11:31.826 --> 00:11:34.251
Brady, to return out to where?

215
00:11:34.251 --> 00:11:38.411
&gt;&gt; Brady: To the label output.

216
00:11:38.411 --> 00:11:40.646
&gt;&gt; Will Sentance: But
to which execution context?

217
00:11:40.646 --> 00:11:41.554
&gt;&gt; Brady: To the global.

218
00:11:41.554 --> 00:11:44.247
&gt;&gt; Will Sentance: To the global, exactly.

219
00:11:44.247 --> 00:11:48.939
Return out 8 into the global
execution context.

220
00:11:50.190 --> 00:11:52.685
Where it's stored in output, perfect.

221
00:11:52.685 --> 00:11:57.482
Folk, I know this may seem procedural,
but I know you can see this and

222
00:11:57.482 --> 00:12:02.060
go yeah, yeah, well I get that
output is gonna be 8, I got that.

223
00:12:03.180 --> 00:12:05.200
But we need to have the precision.

224
00:12:05.200 --> 00:12:08.380
So now notice, by the way,

225
00:12:08.380 --> 00:12:13.890
that we weren't allowed to move on to the
next line in global declaring the output

226
00:12:13.890 --> 00:12:19.270
until we'd finished running
multiplyBy2 with the input of four.

227
00:12:19.270 --> 00:12:25.920
Our thread of execution, the ability
to go through the code line by line.

228
00:12:25.920 --> 00:12:31.281
When did its way in to the column
multiplyBy2, where it spent time

229
00:12:31.281 --> 00:12:37.050
going through the code line by line,
and then hit what keyword to exit?

230
00:12:37.050 --> 00:12:39.700
What keyword, Mike, said to exit?

231
00:12:39.700 --> 00:12:40.757
&gt;&gt; Mike: Return.
&gt;&gt; Will Sentance: Return, and

232
00:12:40.757 --> 00:12:45.122
if there's no return statement there,
the closing curly brace which implies

233
00:12:45.122 --> 00:12:47.910
an implicit return is gonna
insert return for us.

234
00:12:47.910 --> 00:12:50.239
And out, the return.

235
00:12:50.239 --> 00:12:55.144
In other words, JavaScript,
how many things can it do at a time?

236
00:12:55.144 --> 00:12:57.581
One, its thread is singular.

237
00:12:57.581 --> 00:13:01.713
It's not going to continue down in
global code while simultaneously running

238
00:13:01.713 --> 00:13:02.609
multiplyBy2.

239
00:13:02.609 --> 00:13:04.949
It's almost to say, okay,
let's keep going down here, and

240
00:13:04.949 --> 00:13:06.310
continue in here simultaneously.

241
00:13:06.310 --> 00:13:09.969
Uh-uh, one of the beautiful things
about JavaScript is it's so

242
00:13:09.969 --> 00:13:14.702
predictable because it's always one thing
after another in order, top to bottom.

243
00:13:14.702 --> 00:13:17.606
At least in its core synchronous nature.

244
00:13:17.606 --> 00:13:20.923
We'll see when that
doesn't apply of course.

245
00:13:20.923 --> 00:13:22.133
So JavaScript is synchronous.

246
00:13:22.133 --> 00:13:24.844
In order, top to bottom and
single threaded.

247
00:13:24.844 --> 00:13:27.340
We can't suddenly do two
things at the same time.

248
00:13:27.340 --> 00:13:31.020
Excellent, so now we do return out
to the global execution context.

249
00:13:31.020 --> 00:13:36.400
Where we encounter declaring new output,
which is gonna be the return value

250
00:13:36.400 --> 00:13:39.980
of another function call to multiplyBy2.

251
00:13:39.980 --> 00:13:42.460
We're gonna create
an execution context for it.

252
00:13:43.610 --> 00:13:48.380
Into it we go, what is the first thing,
Rick, in our local memory?

253
00:13:51.190 --> 00:13:52.270
&gt;&gt; Rick: The input number.

254
00:13:52.270 --> 00:13:53.090
&gt;&gt; Will Sentance: Which is known as our?

255
00:13:53.090 --> 00:13:56.620
Remember the posh name for a placeholder?

256
00:13:56.620 --> 00:13:57.620
&gt;&gt; Rick: Argument?

257
00:13:57.620 --> 00:13:59.490
&gt;&gt; Will Sentance: So
that's the argument, that's the?

258
00:14:00.680 --> 00:14:02.170
&gt;&gt; Rick: Parameter.
&gt;&gt; Will Sentance: Parameter.

259
00:14:02.170 --> 00:14:04.360
Okay so, Rick, what is our argument?

260
00:14:04.360 --> 00:14:06.272
You're right to say our
parameter is input number.

261
00:14:06.272 --> 00:14:07.459
What's our argument here?

262
00:14:07.459 --> 00:14:08.200
&gt;&gt; Rick: 10.

263
00:14:08.200 --> 00:14:09.655
&gt;&gt; Will Sentance: 10, excellent.

264
00:14:09.655 --> 00:14:15.111
All right, and then result will be 20.

265
00:14:15.111 --> 00:14:20.539
And we return that back out to global.

266
00:14:20.539 --> 00:14:27.520
The 20 is returned out to the global
constant, newOutput is 20.

267
00:14:27.520 --> 00:14:33.255
So our thread winded its way in,
and winded its way back out again.

268
00:14:35.551 --> 00:14:36.352
&gt;&gt; Will Sentance: Okay, but

269
00:14:36.352 --> 00:14:41.460
there's a final piece to this
synchronous JavaScript model.

270
00:14:41.460 --> 00:14:45.340
We have our memory posh name,
variable environment.

271
00:14:45.340 --> 00:14:47.397
We have our thread of execution,

272
00:14:47.397 --> 00:14:50.341
the ability to go through
the code line by line.

273
00:14:50.341 --> 00:14:54.245
These together are known
as an execution context.

274
00:14:54.245 --> 00:14:56.696
The two things we need to execute code.

275
00:14:56.696 --> 00:15:01.626
The context in which we need, the context
of things we need to execute code.

276
00:15:01.626 --> 00:15:06.055
But we've got a whole bunch of these
execution contexts being created,

277
00:15:06.055 --> 00:15:07.370
deleted, created.

278
00:15:07.370 --> 00:15:09.260
And then, we run another
function inside of that one,

279
00:15:09.260 --> 00:15:11.220
it's another little mini one
being created inside of there.

280
00:15:12.370 --> 00:15:17.420
Keeping track of those
to us is visually easy.

281
00:15:17.420 --> 00:15:19.290
I finished coding multiplyBy2.

282
00:15:19.290 --> 00:15:23.690
I come out of it, and I'm back where I was
before when I started coding multiplyBy2.

283
00:15:23.690 --> 00:15:25.099
We can visually see that very easily.

284
00:15:26.850 --> 00:15:33.460
JavaScript doesn't have that same ability
to visually see I was previously, I called

285
00:15:33.460 --> 00:15:38.380
this function in global and I was in the
big box when I moved it to the little box.

286
00:15:38.380 --> 00:15:41.170
When I finished from the little box,
I go back out to the big box.

287
00:15:41.170 --> 00:15:43.093
JavaScript doesn't have that ability.

288
00:15:43.093 --> 00:15:46.336
It needs to keep track of where
it is in the code right now,

289
00:15:46.336 --> 00:15:49.717
where it was before it started
being inside this function,

290
00:15:49.717 --> 00:15:53.591
where it's gonna go back to when
it finishes inside this function.

291
00:15:53.591 --> 00:15:57.566
What, this is a knowledge thing,
does anyone know what data,

292
00:15:57.566 --> 00:16:00.874
we can store that sort of
information in any format.

293
00:16:00.874 --> 00:16:03.924
But there's a particularly nice structure,

294
00:16:03.924 --> 00:16:08.700
way of structuring data that will
store that information very cleanly.

295
00:16:08.700 --> 00:16:11.172
Anyone know what that structure might be?

296
00:16:11.172 --> 00:16:12.359
&gt;&gt; Michelle: Stack.

297
00:16:12.359 --> 00:16:13.640
&gt;&gt; Will Sentance: It is a stack.

298
00:16:13.640 --> 00:16:15.930
Exactly, in fact,
it's gonna be a stack of calls.

299
00:16:15.930 --> 00:16:18.020
A stack is a, we have arrays.

300
00:16:18.020 --> 00:16:18.694
Arrays say,

301
00:16:18.694 --> 00:16:22.622
a list of data where I gonna be able to
grab an element at any random position.

302
00:16:22.622 --> 00:16:24.913
That's not reflecting
what we want to do here.

303
00:16:24.913 --> 00:16:28.143
Here, we want to say,
just like a stack of plates.

304
00:16:28.143 --> 00:16:33.141
I put the first one in, I start off
in the global execution context,

305
00:16:33.141 --> 00:16:35.961
that's my first element in my stack.

306
00:16:35.961 --> 00:16:39.519
And then when I start running multiplyBy2,
I add it on top.

307
00:16:41.130 --> 00:16:42.910
And that's like adding my next plate.

308
00:16:42.910 --> 00:16:45.614
If I had to run another function inside
of that, I'd add that one on top.

309
00:16:45.614 --> 00:16:48.920
When I finish in that one, all I care
is that when I take that one away,

310
00:16:48.920 --> 00:16:50.790
the previous one that was
there before is still there,

311
00:16:50.790 --> 00:16:53.250
and that is the essence of a stack.

312
00:16:53.250 --> 00:16:55.910
It's that when I take the last
thing that was there off,

313
00:16:55.910 --> 00:16:57.630
I'm back to where I was before.

314
00:16:57.630 --> 00:17:02.010
And so a stack is gonna be
a stack of calls to functions.

315
00:17:02.010 --> 00:17:09.010
Starting of, here is the call stack,
the stack of call to functions.

316
00:17:09.010 --> 00:17:12.351
Starting of with the kind of
representation of our overall,

317
00:17:12.351 --> 00:17:15.689
think about whole code base as
a function called global, but

318
00:17:15.689 --> 00:17:19.710
as soon as we start running
our code we're running global.

319
00:17:19.710 --> 00:17:24.526
So starting off with global as
soon as we start running our code.

320
00:17:24.526 --> 00:17:26.408
When we start running multiplyBy2.

321
00:17:28.329 --> 00:17:30.683
&gt;&gt; Will Sentance: Paul, what would it
make sense to do to our call stack?

322
00:17:30.683 --> 00:17:32.451
&gt;&gt; Paul: Add on the new execution context.

323
00:17:32.451 --> 00:17:35.660
&gt;&gt; Will Sentance: Add on the new
execution context, exactly.

324
00:17:35.660 --> 00:17:39.990
Add on the call to multiplyBy2
with the input of 4.

325
00:17:39.990 --> 00:17:47.090
Meaning while I am in my
multiplyBy2 function, my thread

326
00:17:47.090 --> 00:17:52.520
is in my multiplyBy2 function, multiplyBy2
is gonna be top of my stack of calls.

327
00:17:52.520 --> 00:17:55.667
My one simple rule is,
whatever's the top of my call stack,

328
00:17:55.667 --> 00:17:57.223
that's where I am right now.

329
00:17:57.223 --> 00:18:02.721
And then, as soon as I return out, what's
gonna happen, Paul, to my call stack?

330
00:18:02.721 --> 00:18:05.428
&gt;&gt; Paul: multiplyBy2,
that execution context disappears.

331
00:18:05.428 --> 00:18:07.836
You go back into the global, and then you-
&gt;&gt; Will Sentance: Excellent,

332
00:18:07.836 --> 00:18:11.166
I'm gonna get rid of
multiplyBy2 off my call stack.

333
00:18:11.166 --> 00:18:15.516
And we may know, therefore return out to
global execution context as an output, but

334
00:18:15.516 --> 00:18:17.140
JavaScript doesn't.

335
00:18:17.140 --> 00:18:20.440
JavaScript knows that because
look what's on my call stack now?

336
00:18:20.440 --> 00:18:21.280
Don't panic.

337
00:18:21.280 --> 00:18:24.640
It's global and back out to global.

338
00:18:24.640 --> 00:18:28.940
This allows JavaScript to keep
track of where is it in its code,

339
00:18:28.940 --> 00:18:32.940
what line is running, and then when I
finish in the current execution context,

340
00:18:32.940 --> 00:18:34.170
where am I going to return back to?

341
00:18:35.360 --> 00:18:36.970
Well it's get rid of where I was, and

342
00:18:36.970 --> 00:18:38.658
the next layer down is where
I'm returning back to.

343
00:18:38.658 --> 00:18:42.230
All right.

344
00:18:42.230 --> 00:18:43.940
By the way, posh name for

345
00:18:43.940 --> 00:18:48.730
adding to a stack is not to add,
is not to throw on, is to what Sean?

346
00:18:50.180 --> 00:18:52.519
Victor?
What's a posh name to add to a stack,

347
00:18:52.519 --> 00:18:53.331
anyone know?

348
00:18:53.331 --> 00:18:54.082
&gt;&gt; Victor: Push.
&gt;&gt; Will Sentance: Push,

349
00:18:54.082 --> 00:18:58.180
that's the computer science technical
term for adding to a stack.

350
00:18:58.180 --> 00:19:01.680
And what's the posh name, Josh, you know,
of getting something off of stack?

351
00:19:01.680 --> 00:19:02.680
&gt;&gt; Josh: Pop.
&gt;&gt; Will Sentance: Pop, exactly,

352
00:19:02.680 --> 00:19:04.050
push and pop.

353
00:19:04.050 --> 00:19:05.210
Excellent, all right, good.

354
00:19:05.210 --> 00:19:07.480
Yep, we talked about this.

355
00:19:07.480 --> 00:19:10.370
So let's have thumbs on
these core foundations.

356
00:19:10.370 --> 00:19:17.234
Thumbs is a widely used pedagogical
technique to indicate one's understanding.

357
00:19:17.234 --> 00:19:21.601
You lost me, I'm very clear,
I have a clarification question.

358
00:19:21.601 --> 00:19:24.267
Everybody's thumbs out, right now.

359
00:19:24.267 --> 00:19:26.744
It's okay to have clarifications.

360
00:19:26.744 --> 00:19:28.825
Nobody?

361
00:19:28.825 --> 00:19:30.741
Very, very frustrating.

362
00:19:30.741 --> 00:19:32.460
All right, good, good.

