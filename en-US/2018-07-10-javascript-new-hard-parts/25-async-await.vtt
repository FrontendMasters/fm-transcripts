WEBVTT

1
00:00:03.090 --> 00:00:07.368
&gt;&gt; Will Sentance: Async/await
simplifies this entire process.

2
00:00:07.368 --> 00:00:11.660
Async/await,
&gt;&gt; Will Sentance: I would say

3
00:00:11.660 --> 00:00:15.210
finally fixes the inversion
control problem of call backs.

4
00:00:15.210 --> 00:00:16.156
Actually, this does as well.

5
00:00:19.154 --> 00:00:24.356
&gt;&gt; Will Sentance: Async/await, we're not
gonna need to have a function here that

6
00:00:24.356 --> 00:00:30.618
triggers the return back into the
generator function's execution context.

7
00:00:30.618 --> 00:00:33.785
The createFlow,
we don't really need that anymore.

8
00:00:33.785 --> 00:00:38.362
Instead, what's gonna be
triggered from here is just come

9
00:00:38.362 --> 00:00:41.665
straight back in here with a return value.

10
00:00:41.665 --> 00:00:44.638
No more triggering of that
happening via another function.

11
00:00:44.638 --> 00:00:48.056
We're gonna walk through it line by line,
and this is our final code.

12
00:00:48.056 --> 00:00:49.362
We're running slightly long.

13
00:00:49.362 --> 00:00:55.123
This is our very,
very final code of all of hard parts,

14
00:00:55.123 --> 00:00:59.147
all of the beauty of asynchronicity.

15
00:00:59.147 --> 00:01:00.791
By the way though,
can we just appreciate for

16
00:01:00.791 --> 00:01:03.120
a second, or
appreciate yourselves for a second?

17
00:01:03.120 --> 00:01:06.890
You have incorporated
into your mental model

18
00:01:09.320 --> 00:01:12.010
every hard part of
the JavaScript engine here.

19
00:01:13.090 --> 00:01:16.250
The entire web browser features part,
the micro-task queue.

20
00:01:16.250 --> 00:01:19.430
The only person looking for
a micro-task queue, really,

21
00:01:19.430 --> 00:01:20.920
is the guy called Jake Archibald.

22
00:01:20.920 --> 00:01:23.452
Truly gifted, I highly recommend him.

23
00:01:23.452 --> 00:01:29.395
Brilliant British speaker who's
a developer of Androids at Google,

24
00:01:29.395 --> 00:01:35.339
truly gifted, explainer of concepts,
and sharer of entertaining,

25
00:01:35.339 --> 00:01:39.468
humble anecdotes as is
the want of my people, and

26
00:01:39.468 --> 00:01:42.412
he talks about the micro task hue.

27
00:01:42.412 --> 00:01:44.747
The only person who does.

28
00:01:44.747 --> 00:01:49.957
That's how advanced this stuff is, and
you've combined all that with a feature

29
00:01:49.957 --> 00:01:55.261
of JavaScript in ES7 that only just got
released, generated and async/await.

30
00:01:55.261 --> 00:01:59.185
And you built async/await from scratch,
this is async/await.

31
00:01:59.185 --> 00:02:02.845
If you get a senior dev interview
question which is gonna come up more and

32
00:02:02.845 --> 00:02:06.089
more I think, can you build for
me async/await from scratch?

33
00:02:07.470 --> 00:02:10.930
We just did it,
we just built async/await from scratch.

34
00:02:10.930 --> 00:02:12.480
&gt;&gt; Speaker 2: Just built Redux Saga,
basically.

35
00:02:13.620 --> 00:02:16.690
&gt;&gt; Will Sentance: Even better,
we just built Redux Saga from scratch.

36
00:02:16.690 --> 00:02:19.575
Let's try and
inflate our achievements even more.

37
00:02:19.575 --> 00:02:21.480
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Will Sentance: We've just built

38
00:02:21.480 --> 00:02:23.078
the JavaScript engine from scratch.

39
00:02:23.078 --> 00:02:24.177
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Will Sentance: There we go,

40
00:02:24.177 --> 00:02:26.772
I feel particularly proud of all of you.

41
00:02:26.772 --> 00:02:29.119
All right, so we're gonna do this though.

42
00:02:29.119 --> 00:02:35.343
Final code is going to be,
&gt;&gt; Will Sentance: Doing the nicely,

43
00:02:35.343 --> 00:02:40.328
prettily wrapped version of
this using the async/await or

44
00:02:40.328 --> 00:02:43.717
the async function declaration style,

45
00:02:43.717 --> 00:02:48.120
which is going to just
prettify this slightly more.

46
00:02:50.096 --> 00:02:51.506
&gt;&gt; Will Sentance: For us.

47
00:02:51.506 --> 00:02:57.044
All right, okay, for the first time,
my beautiful people,

48
00:02:57.044 --> 00:03:01.516
for the first time,
we are able to return back into

49
00:03:01.516 --> 00:03:07.370
a function's execution
context after we've left it.

50
00:03:07.370 --> 00:03:13.250
We're able to do so
using our returnNextElement.nextMethod.

51
00:03:13.250 --> 00:03:17.983
That guides us back into
the createFlow execution context.

52
00:03:17.983 --> 00:03:22.910
We manually do so
using our nextMethod call,

53
00:03:22.910 --> 00:03:31.470
which was triggered by the triggering of
our due when data received call back,

54
00:03:31.470 --> 00:03:37.323
that was attached to our
future data promise object.

55
00:03:37.323 --> 00:03:42.861
But this flow inwards and
outwards gets complex, and

56
00:03:42.861 --> 00:03:49.880
so JavaScript gives us a async
function that's gonna automate that

57
00:03:49.880 --> 00:03:55.437
process of going back into
the create flow function.

58
00:03:55.437 --> 00:04:00.993
It's gonna say don't worry, we don't
have to trigger going back into it.

59
00:04:00.993 --> 00:04:06.020
Instead we're gonna go
automatically back into it,

60
00:04:06.020 --> 00:04:11.047
we're gonna pass the response
object value back in,

61
00:04:11.047 --> 00:04:15.851
as the evaluated result of
the yield expression and

62
00:04:15.851 --> 00:04:18.658
store that straight in data.

63
00:04:18.658 --> 00:04:22.048
It's going to simplify
all of this code for

64
00:04:22.048 --> 00:04:25.780
us, with the help of
the new async functions.

65
00:04:25.780 --> 00:04:28.640
Async/await simplifies this and

66
00:04:28.640 --> 00:04:34.410
finally cleans up our inversion
of control problem of callbacks.

67
00:04:34.410 --> 00:04:36.910
We're gonna see that now,
for the first time,

68
00:04:36.910 --> 00:04:43.060
we don't define a task to be done
beyond our control much later on.

69
00:04:43.060 --> 00:04:46.440
Instead, we're going to go into
createFlow, set up some work,

70
00:04:46.440 --> 00:04:51.960
set up a task that takes a long time
that is speaking to the web browser

71
00:04:51.960 --> 00:04:56.490
that speaks to the internet, gets that
tweet, 200 milliseconds, brings it back.

72
00:04:56.490 --> 00:05:00.630
And then we're gonna somehow
get back into create flow

73
00:05:00.630 --> 00:05:04.056
to continue running our code sequentially.

74
00:05:04.056 --> 00:05:06.006
No need for trigger function
on the triggered function on

75
00:05:06.006 --> 00:05:06.908
the promise resolution.

76
00:05:06.908 --> 00:05:10.214
Instead, we also trigger the resumption
of the create flow execution.

77
00:05:10.214 --> 00:05:14.696
That functionality is still added
to the micro-task queue though.

78
00:05:14.696 --> 00:05:15.937
All right, so here we go.

79
00:05:17.728 --> 00:05:19.624
Line one, what are we doing?

80
00:05:19.624 --> 00:05:24.313
&gt;&gt; Blessing: We're going to declare
an async function code with flow.

81
00:05:24.313 --> 00:05:25.004
&gt;&gt; Will Sentance: Excellent.

82
00:05:25.004 --> 00:05:30.638
Create flow is defined, it is a function,

83
00:05:30.638 --> 00:05:35.645
it is an a brand new type of function and

84
00:05:35.645 --> 00:05:39.105
a synchronous function.

85
00:05:39.105 --> 00:05:40.204
Good.

86
00:05:40.204 --> 00:05:43.585
Line two Blessing.

87
00:05:43.585 --> 00:05:48.772
&gt;&gt; Blessing: Are we going to invoke
the function just create averages.

88
00:05:48.772 --> 00:05:53.706
&gt;&gt; Will Sentance: Excellent we
are going to invoke CreateFlow and

89
00:05:53.706 --> 00:05:59.751
we are going to immediately
enter its execution context,

90
00:05:59.751 --> 00:06:05.688
immediately enter its execution context,
there it is.

91
00:06:05.688 --> 00:06:10.622
And what is the first thing
Blessing that it tells us to do in

92
00:06:10.622 --> 00:06:12.846
this execution context?

93
00:06:12.846 --> 00:06:15.600
Let's say at about one millisecond.

94
00:06:15.600 --> 00:06:18.383
&gt;&gt; Blessing: To console that log,
me first.

95
00:06:18.383 --> 00:06:19.723
&gt;&gt; Will Sentance: Excellent, so

96
00:06:19.723 --> 00:06:24.879
at about one millisecond we
hit our console log, me first.

97
00:06:24.879 --> 00:06:27.042
So we do go into the crit.

98
00:06:27.042 --> 00:06:31.822
This isn't like our generator
function we have to trigger going

99
00:06:31.822 --> 00:06:36.866
into using the next method that
the call to the generator function,

100
00:06:36.866 --> 00:06:40.247
returned out the next
method on that object.

101
00:06:40.247 --> 00:06:43.739
Instead we're gonna go into it
directly ourselves just by calling it.

102
00:06:43.739 --> 00:06:47.801
So the first thing we do is indeed

103
00:06:47.801 --> 00:06:52.772
a console.log of the string me first.

104
00:06:52.772 --> 00:06:54.640
Perfect?

105
00:06:54.640 --> 00:06:58.970
And in our memory what is the next sign
of code blessing that we're going to

106
00:06:58.970 --> 00:07:00.250
encounter.

107
00:07:00.250 --> 00:07:02.630
&gt;&gt; Blessing: We declare constant data.

108
00:07:02.630 --> 00:07:06.510
&gt;&gt; Will Sentance: Perfect there it is and
for now,

109
00:07:06.510 --> 00:07:12.820
undefined exactly so
we set data is going to be

110
00:07:12.820 --> 00:07:18.010
the evaluated result of that
expression on the right hand side.

111
00:07:18.010 --> 00:07:20.137
So there it is on the right hand side.

112
00:07:20.137 --> 00:07:25.161
We say await and then fetch the return of

113
00:07:25.161 --> 00:07:32.318
our wonderful final call to
our fetch facade function,

114
00:07:32.318 --> 00:07:38.561
a two-pronged function that,
in JavaScript,

115
00:07:38.561 --> 00:07:42.691
returns out a what, Blessing?

116
00:07:42.691 --> 00:07:45.001
&gt;&gt; Blessing: A promise object.

117
00:07:45.001 --> 00:07:47.207
&gt;&gt; Will Sentance: A promise object, but

118
00:07:47.207 --> 00:07:52.788
it also spins up a bunch of
work in the web browser itself.

119
00:07:52.788 --> 00:07:54.317
So let's do the JavaScript piece.

120
00:07:54.317 --> 00:07:58.761
First, we are going to
return out a promise object,

121
00:07:58.761 --> 00:08:04.518
just as Blessing said, with two,
I mean, it has a few properties,

122
00:08:04.518 --> 00:08:09.770
but two important properties,
value, and on fulfillment,

123
00:08:09.770 --> 00:08:16.250
which is an empty array, both right now,
nothing interesting in them yet.

124
00:08:16.250 --> 00:08:19.734
The value is gonna be auto-filled
in with whatever comes back

125
00:08:19.734 --> 00:08:22.488
from the web browser
features background work.

126
00:08:22.488 --> 00:08:27.386
And the auto-fillment array, well,
we'll see what that's gonna do here.

127
00:08:27.386 --> 00:08:31.405
Good, but, and that object here,

128
00:08:31.405 --> 00:08:36.030
we're going to hold it here for now.

129
00:08:36.030 --> 00:08:40.340
But in the web browser,
what are we spinning up?

130
00:08:41.470 --> 00:08:47.700
We are spinning up the background feature,
xhr.

131
00:08:49.940 --> 00:08:53.970
There it is, xhr is spun up.

132
00:08:53.970 --> 00:08:58.465
And it has some important properties,
the URL,

133
00:08:58.465 --> 00:09:03.836
Twitter.com, the path,
/will/1, whatever it is,

134
00:09:03.836 --> 00:09:10.280
and the type of request we're making,
and it's a get request.

135
00:09:10.280 --> 00:09:13.885
And we are sending off an HTTP.

136
00:09:13.885 --> 00:09:20.045
That's the H In the xhr, HDCP message off

137
00:09:20.045 --> 00:09:25.328
to Twitter itself, their server.

138
00:09:25.328 --> 00:09:30.245
There it is, the beautiful Twitter server.

139
00:09:30.245 --> 00:09:36.355
And is it, at this moment, at about one
millisecond passing, is it complete yet?

140
00:09:36.355 --> 00:09:36.971
&gt;&gt; Blessing: No.

141
00:09:36.971 --> 00:09:37.965
&gt;&gt; Will Sentance: It is not.

142
00:09:37.965 --> 00:09:40.295
But when everything comes back,
it'll be complete.

143
00:09:40.295 --> 00:09:45.073
What do we want to update
on the completion?

144
00:09:45.073 --> 00:09:50.040
We wanna update this value property.

145
00:09:50.040 --> 00:09:54.020
Now we have not assigned this
object to any particular place.

146
00:09:54.020 --> 00:09:55.860
It's just a position in memory.

147
00:09:55.860 --> 00:10:03.580
So, we know that we're referring to this
object we defined its value property.

148
00:10:03.580 --> 00:10:05.750
That's what we're going to update.

149
00:10:05.750 --> 00:10:11.100
We didn't give it a label in
JavaScript but the web browser knows

150
00:10:11.100 --> 00:10:15.820
where that object is stored and that's
the value property it is gonna update.

151
00:10:15.820 --> 00:10:17.070
Okay, perfect, good.

152
00:10:18.140 --> 00:10:22.864
And now the all powerful
await is going to throw us

153
00:10:22.864 --> 00:10:27.021
out of the create flow execution context.

154
00:10:29.563 --> 00:10:33.473
&gt;&gt; Will Sentance: I have a very clean
eye and throw us out about create flow

155
00:10:33.473 --> 00:10:38.258
execution context where we are going
to encounter what line next?

156
00:10:38.258 --> 00:10:39.504
Blessing.

157
00:10:39.504 --> 00:10:42.110
&gt;&gt; Blessing: Console.log me second.

158
00:10:42.110 --> 00:10:45.280
&gt;&gt; Will Sentance: Me second, exactly.

159
00:10:45.280 --> 00:10:48.760
At about,
let's say maybe two milliseconds,

160
00:10:48.760 --> 00:10:52.250
something like that, about two milli.

161
00:10:52.250 --> 00:10:53.146
In other words,

162
00:10:53.146 --> 00:10:57.980
the most important thing we wanted to do
&gt;&gt; Will Sentance: With any

163
00:10:57.980 --> 00:11:02.845
asynchronous work, is set up a task that
takes a bunch of time, that's the web

164
00:11:02.845 --> 00:11:08.240
browser feature task, to speak to
the Internet and take 200 milliseconds.

165
00:11:08.240 --> 00:11:13.750
Set it up but be able to continue
running our synchronous code afterwards.

166
00:11:13.750 --> 00:11:17.375
But now do we see to do it,
we're stepping out of our function?

167
00:11:17.375 --> 00:11:22.461
And wouldn't it be wonderful if we
could step back in to our function

168
00:11:22.461 --> 00:11:26.937
to when we get the value from
the request back as a response.

169
00:11:26.937 --> 00:11:30.703
Hopefully, it's gonna be stored in data,
and

170
00:11:30.703 --> 00:11:35.141
we can then continue running our code and
log that data.

171
00:11:35.141 --> 00:11:37.146
Wouldn't that be wonderful?

172
00:11:37.146 --> 00:11:38.700
Let's hope it is possible.

173
00:11:38.700 --> 00:11:45.091
So in JavaScript now, we don't really
have much interesting stuff to do.

174
00:11:45.091 --> 00:11:46.120
We're done.

175
00:11:46.120 --> 00:11:48.061
We're done.

176
00:11:48.061 --> 00:11:51.684
But as our call stack, but

177
00:11:51.684 --> 00:11:56.793
in the background after about 200

178
00:11:56.793 --> 00:12:03.570
milliseconds interesting
stuff is happening.

179
00:12:03.570 --> 00:12:10.275
About 200 milliseconds later,
let's say 201 milliseconds,

180
00:12:10.275 --> 00:12:16.900
our background work is complete and
we get a glorious response.

181
00:12:16.900 --> 00:12:18.980
That pen is now thoroughly dead.

182
00:12:18.980 --> 00:12:20.570
We get a glorious response.

183
00:12:22.210 --> 00:12:24.350
Let's use red.

184
00:12:24.350 --> 00:12:28.240
A glorious, mm-hm.

185
00:12:28.240 --> 00:12:33.080
A glorious response, the string

186
00:12:33.080 --> 00:12:38.620
pi, and what Is that going to update?

187
00:12:38.620 --> 00:12:44.209
That is going to update our value
property of the promise object

188
00:12:44.209 --> 00:12:49.693
that's being stored in memory and
referred to its position in

189
00:12:49.693 --> 00:12:55.612
memory from the web browser feature,
ready to update that value.

190
00:12:55.612 --> 00:12:58.940
At which point, what are we gonna do?

191
00:12:58.940 --> 00:13:04.960
We are going to trigger and we can
think of in our on fulfillment array as

192
00:13:04.960 --> 00:13:10.993
effectively the continuation of
our createFlow execution context.

193
00:13:10.993 --> 00:13:16.356
We're gonna trigger at that
moment the continuation

194
00:13:16.356 --> 00:13:20.407
of our createFlow execution context and

195
00:13:20.407 --> 00:13:25.294
at about 201 milliseconds
re-enter where we

196
00:13:25.294 --> 00:13:30.894
effectively paused,
we're gonna get to re-enter and

197
00:13:30.894 --> 00:13:36.760
create flow back on our call stack and
come back in.

198
00:13:36.760 --> 00:13:40.810
And the await fetch, await was super
powerful, it threw us straight out.

199
00:13:40.810 --> 00:13:43.290
We never even got to assign
anything to the data.

200
00:13:43.290 --> 00:13:44.710
That's not a bad thing.

201
00:13:44.710 --> 00:13:48.180
We are hoping that data
is going to be filled in

202
00:13:48.180 --> 00:13:51.080
with whatever this right
hand side evaluates to.

203
00:13:51.080 --> 00:13:54.360
And what does it evaluate to Blessing?

204
00:13:54.360 --> 00:13:54.970
&gt;&gt; Blessing: Pi.

205
00:13:54.970 --> 00:13:58.144
&gt;&gt; Will Sentance: To
the value from the request

206
00:13:58.144 --> 00:14:02.516
to the internet that came back with pi.

207
00:14:02.516 --> 00:14:08.064
That's is what our weight
expression evaluates to pi.

208
00:14:08.064 --> 00:14:10.992
And we assign it to what label?

209
00:14:10.992 --> 00:14:12.658
To data, exactly.

210
00:14:12.658 --> 00:14:16.569
And so, we hit our next line in the body

211
00:14:16.569 --> 00:14:21.099
of our create of function
console log data.

212
00:14:22.260 --> 00:14:28.135
Data is going to be evaluated to high,
and look at that.

213
00:14:28.135 --> 00:14:31.895
At about 202 milliseconds,

214
00:14:31.895 --> 00:14:37.465
we get to continue running
the rest of our code,

215
00:14:37.465 --> 00:14:42.200
we get to continue running the rest of our

216
00:14:42.200 --> 00:14:46.812
code inside our create flow function.

217
00:14:46.812 --> 00:14:51.958
All that work of returning a value or
the response object

218
00:14:51.958 --> 00:14:59.080
that we saw before into the promise
object that we stored in future data.

219
00:14:59.080 --> 00:15:04.359
That we then triggered a do when
data received function that then

220
00:15:04.359 --> 00:15:10.420
triggered .next on the return next
element, cool, or return it element

221
00:15:10.420 --> 00:15:16.013
object next function that triggered
us to go back into create flow.

222
00:15:16.013 --> 00:15:20.557
All of that automated
the async function definition

223
00:15:20.557 --> 00:15:23.559
is gonna handle all of that for us.

224
00:15:23.559 --> 00:15:25.680
The await still behaves
similar to a yield.

225
00:15:25.680 --> 00:15:30.387
So similar to a yield, that we are going
to hold on storing from the left hand

226
00:15:30.387 --> 00:15:34.217
side until we get something
back from this background work.

227
00:15:34.217 --> 00:15:38.375
But now when the value comes back we're
just gonna go straight back into create

228
00:15:38.375 --> 00:15:40.140
flow and store it in data.

229
00:15:40.140 --> 00:15:46.413
This is a beautifully cleaned up version
of that highly complex set up we had,

230
00:15:46.413 --> 00:15:53.566
that was nevertheless, a very powerful set
up, but now, we have a cleaned up version.

231
00:15:53.566 --> 00:16:01.049
And by the way this cleaned up version
behind the scenes, is doing all of this.

232
00:16:01.049 --> 00:16:06.100
So if you want to emulate
the async/await function

233
00:16:06.100 --> 00:16:11.978
definition in call we can do
it ourselves with generators.

234
00:16:11.978 --> 00:16:19.416
And this is the senior dev interview
question over the next few years.

