WEBVTT

1
00:00:00.400 --> 00:00:03.880
&gt;&gt; Will Sentance: This sort of under
the hood, understanding of JavaScript

2
00:00:03.880 --> 00:00:08.270
is the foundation of getting
a senior developer position, or

3
00:00:08.270 --> 00:00:10.390
a midlevel developer position.

4
00:00:10.390 --> 00:00:12.090
It's also deeply satisfying.

5
00:00:13.470 --> 00:00:20.248
So I run Codesmith, a community of people
building compelling open source projects.

6
00:00:20.248 --> 00:00:23.750
Whether it's Reactide, an ID for react.

7
00:00:23.750 --> 00:00:28.490
Whether it's a remarkable Kubernetes,
tool that was

8
00:00:28.490 --> 00:00:33.780
developed by a great group in New York
at CodeSmith in the last month or so.

9
00:00:33.780 --> 00:00:37.620
All of these are built as part
of the CodeSmith residency,

10
00:00:37.620 --> 00:00:41.560
a collection of people who are saying,
I wanna go deep on JavaScript.

11
00:00:42.750 --> 00:00:43.760
And that's my goal.

12
00:00:43.760 --> 00:00:45.770
I want to part of the community to do it.

13
00:00:45.770 --> 00:00:50.600
And as a side effect at the end of this 12
week, 100 hours per week residency, yeah,

14
00:00:50.600 --> 00:00:52.650
they go and get very nice roles.

15
00:00:53.680 --> 00:00:59.610
Avocations for CodeSmith open every
7 weeks for the next 12-week cohort.

16
00:01:00.620 --> 00:01:05.090
While if you attend online,
the hard parts workshop that

17
00:01:05.090 --> 00:01:08.080
moves through some of this material
in live online every week.

18
00:01:08.080 --> 00:01:11.860
You get access to a special challenge
code that guarantees you interview

19
00:01:11.860 --> 00:01:13.570
if you complete the coding challenge.

20
00:01:13.570 --> 00:01:19.720
There is also a regular online
application, I encourage you to try it.

21
00:01:19.720 --> 00:01:24.080
It gives you access to
the CodeSmith interview

22
00:01:24.080 --> 00:01:28.760
if you put together a very nice collection
of words about your background and

23
00:01:28.760 --> 00:01:31.490
what inspired you down the path
of software engineering.

24
00:01:31.490 --> 00:01:33.650
So I encourage you to
complete that challenge.

25
00:01:33.650 --> 00:01:39.690
But also I encourage you to look
into a new online part time program,

26
00:01:40.980 --> 00:01:44.850
CodeSmith CSDL.

27
00:01:44.850 --> 00:01:48.570
CSDL, CodeSmith, Deep Learning.

28
00:01:48.570 --> 00:01:51.350
Four weeks, live online,

29
00:01:51.350 --> 00:01:57.370
evening weekend where you get the chance
to build neural networks from scratch.

30
00:01:57.370 --> 00:01:58.230
It's very nice.

31
00:01:59.720 --> 00:02:02.940
Every two months, I think it kicks off.

32
00:02:02.940 --> 00:02:05.830
If you go to CodeSmith, you can have
a look at that program as well.

33
00:02:05.830 --> 00:02:08.360
All right, we have done it.

34
00:02:08.360 --> 00:02:09.880
We have made it through the day.

35
00:02:11.090 --> 00:02:12.893
Pure perf, no.

36
00:02:12.893 --> 00:02:18.010
Pure, no cuts,
&gt;&gt; Will Sentance: One cut.

37
00:02:18.010 --> 00:02:20.480
We've made it through
the day with clarity and

38
00:02:20.480 --> 00:02:25.600
all of you should feel genuine pride,
every last one of you.

39
00:02:25.600 --> 00:02:33.880
It's very, very special to have seen
how far every single person here

40
00:02:33.880 --> 00:02:39.470
came in the quality of
technical communication.

41
00:02:39.470 --> 00:02:41.670
That's what's most special for me.

42
00:02:41.670 --> 00:02:47.240
In the end, what makes a great senior
developer, which many of you are and

43
00:02:47.240 --> 00:02:52.300
some of you are aspiring to,
is the ability to take any feature and

44
00:02:52.300 --> 00:02:56.560
empower one's team to
build it out with you.

45
00:02:56.560 --> 00:02:59.680
And that is based on the quality
of technical communication.

46
00:02:59.680 --> 00:03:03.960
And there are multiple people in the room
today who talked through their code with

47
00:03:03.960 --> 00:03:08.240
a level of clarity that was genuinely
impressive and it's a mindset.

48
00:03:08.240 --> 00:03:12.440
This is not something which we are born
with, it's not something inherent and

49
00:03:12.440 --> 00:03:17.650
demanded of day to day and yet it is a
thing that accelerates engineering teams.

50
00:03:17.650 --> 00:03:22.902
We often say when I add a team member
to my engineering team, I go from

51
00:03:22.902 --> 00:03:29.710
having 1 engineer to 1.3 engineers,
not from 1 engineer to 2 engineers.

52
00:03:29.710 --> 00:03:31.570
If you improve your
technical communication,

53
00:03:31.570 --> 00:03:34.270
which is really the essence with what
we're doing when we're diagramming

54
00:03:34.270 --> 00:03:39.200
through, you take yourself from one
engineer to genuinely two engineers.

55
00:03:39.200 --> 00:03:41.300
Maybe more, maybe a multiple.

56
00:03:41.300 --> 00:03:45.000
Because you're now shared
you've now shared your

57
00:03:45.000 --> 00:03:46.890
internal mental model of a code.

58
00:03:46.890 --> 00:03:51.720
It is now a shared resource between
you and your team members and

59
00:03:51.720 --> 00:03:53.426
that's very empowering and very special.

60
00:03:53.426 --> 00:03:59.319
So today we saw all of the hardest

61
00:03:59.319 --> 00:04:03.466
parts of the new spec of

62
00:04:03.466 --> 00:04:08.954
JavaScript, ES6 and ES7.

63
00:04:08.954 --> 00:04:14.558
We saw the foundations of JavaScript
that led us on this journey.

64
00:04:14.558 --> 00:04:18.811
Memory thread,
execution context, call stack.

65
00:04:18.811 --> 00:04:25.080
We saw that get augmented by a whole
new set of pieces of that architecture.

66
00:04:25.080 --> 00:04:26.890
The web browser features.

67
00:04:26.890 --> 00:04:29.450
The callback queue.

68
00:04:29.450 --> 00:04:31.080
The event loop.

69
00:04:31.080 --> 00:04:36.770
We then discovered there's a new built-in
asynchronicity feature of JavaScript.

70
00:04:36.770 --> 00:04:41.670
Our promise objects whose
deferred functionality is

71
00:04:41.670 --> 00:04:46.180
not assigned to the callback queue,
but to the microtask queue.

72
00:04:46.180 --> 00:04:49.000
Two additional pieces of our model.

73
00:04:49.000 --> 00:04:54.460
We then added this whole new way of
thinking about how collections of data can

74
00:04:54.460 --> 00:05:00.022
be accessed and then have functionality
applied to them known as iterators.

75
00:05:00.022 --> 00:05:04.181
That rethink collections of data as
instead of being static things we go and

76
00:05:04.181 --> 00:05:08.936
get elements from, instead these beautiful
flows of data that when I run a function,

77
00:05:08.936 --> 00:05:11.600
switch the tap on, I get the next element.

78
00:05:11.600 --> 00:05:12.890
Switch it again, get the next element,

79
00:05:12.890 --> 00:05:16.670
like a stream of data that I can
access and bring, access and bring.

80
00:05:16.670 --> 00:05:18.040
I think it's very beautiful.

81
00:05:19.500 --> 00:05:22.870
And then we discovered we could
control the nature of those flows,

82
00:05:22.870 --> 00:05:26.530
what element we got each time,
ourselves manually.

83
00:05:26.530 --> 00:05:33.030
Not rely on a sort of prestructured
set of data but instead, dynamically

84
00:05:33.030 --> 00:05:38.010
create those sets of data, dynamically,
determine what the next element would be.

85
00:05:39.330 --> 00:05:41.560
By defining it in a function and

86
00:05:41.560 --> 00:05:47.030
setting ideal keywords to return
out those elements as we went.

87
00:05:47.030 --> 00:05:51.691
And then we realized what that was
doing was allowing us to exit and

88
00:05:51.691 --> 00:05:54.163
re-enter an execution context.

89
00:05:54.163 --> 00:05:58.830
In other words begin the correlative
function, leave it and come back.

90
00:05:58.830 --> 00:06:04.532
And that is what lets us
rethink our asynchronous code.

91
00:06:04.532 --> 00:06:09.467
It gave us, in the end, a single weight,
where we enter a function to

92
00:06:09.467 --> 00:06:13.653
initiate a background slow task,
an asynchronous task.

93
00:06:13.653 --> 00:06:18.759
And then only return to that function,
leave it and then return to that function,

94
00:06:18.759 --> 00:06:22.770
when we get our response back
from the slow, long-term tasks.

95
00:06:23.860 --> 00:06:29.520
These are all the core features
of the new JavaScript spec.

96
00:06:29.520 --> 00:06:32.890
The new features of JavaScript in ES6 and
ES7.

97
00:06:32.890 --> 00:06:34.940
So very well done everybody.

98
00:06:34.940 --> 00:06:39.690
I was absolutely delighted by how
well you talked though the code and

99
00:06:39.690 --> 00:06:43.788
I am very, very happy to have had
you all here along with me today.

100
00:06:43.788 --> 00:06:46.868
Thank you.

101
00:06:46.868 --> 00:06:51.704
&gt;&gt; [APPLAUSE]

