WEBVTT

1
00:00:00.050 --> 00:00:00.865
&gt;&gt; Will Sentance: Good.

2
00:00:00.865 --> 00:00:05.040
So we have this new model for thinking
about how our JavaScript executes.

3
00:00:05.040 --> 00:00:08.377
We are not alone anymore
a synchronous language.

4
00:00:08.377 --> 00:00:12.841
We're a language that actually has
a synchronicity built into it through

5
00:00:12.841 --> 00:00:14.215
the microtask queue.

6
00:00:14.215 --> 00:00:19.537
And in terms of how it interfaces
with things outside of it as well,

7
00:00:19.537 --> 00:00:25.347
it has a ton of asynchronous features
available to it in the Web browser.

8
00:00:25.347 --> 00:00:29.119
Excellent, so
what is our problems with our final, or

9
00:00:29.119 --> 00:00:32.732
our solution three here,
the promise based model?

10
00:00:32.732 --> 00:00:37.051
99% of developers have no idea how
these promise objects are working under

11
00:00:37.051 --> 00:00:37.653
the hood.

12
00:00:37.653 --> 00:00:42.525
They see .then, and they go my
thread will return back up to there

13
00:00:42.525 --> 00:00:46.878
when future days get filled back in and
then call display.

14
00:00:46.878 --> 00:00:49.111
So far from the truth.

15
00:00:49.111 --> 00:00:53.856
Instead, the then's only job of interest
is to grab our display function and

16
00:00:53.856 --> 00:00:58.239
put it in future data's hidden
unfulfillment properties, an array.

17
00:00:58.239 --> 00:01:01.628
Debugging becomes super-hard if you do
not understand how this is happening

18
00:01:01.628 --> 00:01:02.365
under the hood.

19
00:01:02.365 --> 00:01:07.048
And unlike traditional asynchronous work,
at least there you knew it was weird.

20
00:01:07.048 --> 00:01:09.785
Here it looks a little
bit more meaningful.

21
00:01:09.785 --> 00:01:14.923
It masks the complexity, but
benefits you understand it.

22
00:01:14.923 --> 00:01:18.729
You get a cleaner readable style
with pseudo-synchronous code.

23
00:01:18.729 --> 00:01:22.659
These then methods being called give
you a pseudo-synchronous style and

24
00:01:22.659 --> 00:01:25.077
it has a really nice
error handling process.

25
00:01:25.077 --> 00:01:26.971
It's a really nice error handling process.

26
00:01:26.971 --> 00:01:30.385
If you go to parse, the second function,
there's your error handler function.

27
00:01:30.385 --> 00:01:33.743
To be able to call .catch to add
more error handling functions or

28
00:01:33.743 --> 00:01:36.365
it's an alternative way
about handling errors.

29
00:01:36.365 --> 00:01:39.012
That's a really,
really nice benefit of this model.

30
00:01:39.012 --> 00:01:43.840
And we're gonna see how final version at
the very end of today, a single weight,

31
00:01:43.840 --> 00:01:47.544
doesn't give you as pretty way
of handling errors actually.

32
00:01:47.544 --> 00:01:51.599
It's in theory step back,
I guess, maybe not.

33
00:01:51.599 --> 00:01:54.739
I would say a step back from this
very clean error handling way.

34
00:01:54.739 --> 00:01:58.311
Not a step back, but there's a way of
handling errors which is perfectly fine.

35
00:01:58.311 --> 00:02:01.140
But this kinda I have my
air handling function and

36
00:02:01.140 --> 00:02:03.282
I have my regular success function.

37
00:02:03.282 --> 00:02:05.531
That's pretty nice,
that's a pretty nice model.

38
00:02:05.531 --> 00:02:07.897
All right, good.

39
00:02:07.897 --> 00:02:12.109
So promises, Web APIs, the Callback,
Microtask Queue, Event loop [LAUGH] allow

40
00:02:12.109 --> 00:02:16.016
us to defer our actions until the work,
the background heavy lifting work,

41
00:02:16.016 --> 00:02:18.543
the long time work,
the slow work is completed.

42
00:02:18.543 --> 00:02:21.813
And continue running our code
line by line in the meantime.

43
00:02:21.813 --> 00:02:24.965
Asynchronous JavaScript is
the backbone of the modern web,

44
00:02:24.965 --> 00:02:27.016
letting us build fast non-blocking.

45
00:02:27.016 --> 00:02:31.432
We flow on while we let
our background Web browser

46
00:02:31.432 --> 00:02:36.612
features do the slow work
non-blocking applications.

47
00:02:36.612 --> 00:02:37.650
All right, beautiful.

