WEBVTT

1
00:00:00.090 --> 00:00:01.432
&gt;&gt; Will Sentance: Now we move onto,

2
00:00:01.432 --> 00:00:06.003
I said once we rethink about data
as a flow of data, a stream.

3
00:00:06.003 --> 00:00:11.107
Once we think about data as flows where
we can pick off an element one-by-one,

4
00:00:11.107 --> 00:00:13.861
we can rethink how we produce those flows.

5
00:00:13.861 --> 00:00:17.629
JavaScript, now lets us produce
those flows using a function to

6
00:00:17.629 --> 00:00:20.930
set what individual element
will be returned next.

7
00:00:20.930 --> 00:00:23.601
Unfortunately, before we get to that
we gotta go back to something that,

8
00:00:23.601 --> 00:00:24.905
honestly is a little bit annoying.

9
00:00:24.905 --> 00:00:28.419
But we do need to understand it for

10
00:00:28.419 --> 00:00:34.204
us to use the built-in
functions that produce flows.

11
00:00:34.204 --> 00:00:38.104
Cuz they don't call a function
directly return next element,

12
00:00:38.104 --> 00:00:42.380
they instead have an object with
a function on it, a method.

13
00:00:42.380 --> 00:00:45.423
Next, that when called will
kinda give us a next element.

14
00:00:45.423 --> 00:00:47.594
I wanted to build that
from scratch ourselves,

15
00:00:47.594 --> 00:00:49.920
a final reinforcement of this model.

16
00:00:49.920 --> 00:00:54.081
But also to ensure we understand that
this is just a function that's in

17
00:00:54.081 --> 00:00:55.006
an object now.

18
00:00:55.006 --> 00:00:57.134
But it's no different
to what we did before,

19
00:00:57.134 --> 00:00:59.880
this should feel hopefully
very clean review.

20
00:00:59.880 --> 00:01:04.774
But it will get us back up to speed before
we move on to creating these flows using

21
00:01:04.774 --> 00:01:07.976
functions rather than
underlying arrays of data.

22
00:01:07.976 --> 00:01:11.380
We're gonna create a flow where we call a
function each time, get the next element.

23
00:01:11.380 --> 00:01:15.083
Here we're doing it with a static,
pre-built collection of data.

24
00:01:15.083 --> 00:01:19.700
In a moment, we're gonna do it by
yielding intermediate returns,

25
00:01:19.700 --> 00:01:23.770
you could think of those out
each of our next elements.

26
00:01:23.770 --> 00:01:27.704
Here it's gonna be directly analogous.

27
00:01:27.704 --> 00:01:31.501
We're gonna discover it gives us
a lot of control over what those next

28
00:01:31.501 --> 00:01:32.780
values can be.

29
00:01:32.780 --> 00:01:35.630
Cuz now we're just running code
to generate those next values,

30
00:01:35.630 --> 00:01:36.644
it's very very cool.

31
00:01:36.644 --> 00:01:40.850
But first let's just be clear,
JavaScript's build in return next

32
00:01:40.850 --> 00:01:45.426
elements, iterators they're called,
are actually objects with a next

33
00:01:45.426 --> 00:01:50.170
method that when called return our
next element from the stream or flow.

34
00:01:50.170 --> 00:01:53.256
So we don't call return its element,
instead we call the method on it.

35
00:01:53.256 --> 00:01:57.270
So returnNextElement's now an object,
not a function, but it wraps a function.

36
00:01:57.270 --> 00:02:00.456
So we just call the function inside,
but let's build it ourselves.

37
00:02:00.456 --> 00:02:04.350
Let's restructure it slightly to make sure
we're truly clear on what this is doing.

38
00:02:04.350 --> 00:02:09.162
All right, well this should be fairly,
&gt;&gt; Will Sentance: Solid for us,

39
00:02:09.162 --> 00:02:10.365
cuz we just did this already.

40
00:02:10.365 --> 00:02:15.232
Sony, line one, what are we doing?
&gt;&gt; Speaker 2: Creating a function

41
00:02:15.232 --> 00:02:18.937
named createFlow.
&gt;&gt; Will Sentance: Excellent, there it is,

42
00:02:18.937 --> 00:02:19.869
createFlow.

43
00:02:19.869 --> 00:02:23.810
Next line, Brian?
&gt;&gt; Brian: We are declaring

44
00:02:23.810 --> 00:02:28.540
a constant called returnNextElement,
which is undefined right now but

45
00:02:28.540 --> 00:02:33.098
it will be the return value of createFlow.
&gt;&gt; Will Sentance: Excellent type

46
00:02:33.098 --> 00:02:34.034
of communication from Brian.

47
00:02:34.034 --> 00:02:37.542
I think we can all appreciate I knew
everything explicitly that this is

48
00:02:37.542 --> 00:02:38.360
gonna do.

49
00:02:38.360 --> 00:02:41.877
It gave me a strategy, that was very
good technical communication people.

50
00:02:41.877 --> 00:02:47.640
Okay so return.
&gt;&gt; Will Sentance: Next element

51
00:02:47.640 --> 00:02:53.179
will be the output
the return value of calling

52
00:02:53.179 --> 00:02:59.898
createFlow with the input of the array,
4, 5, 6.

53
00:02:59.898 --> 00:03:02.118
So we hope that this function
that's gonna come out.

54
00:03:02.118 --> 00:03:05.840
We hope that it's gonna return
as a function into, no we don't.

55
00:03:05.840 --> 00:03:10.250
We hope it's gonna return as an object
with a function on it, with the label

56
00:03:10.250 --> 00:03:15.922
next, into returnNextElement that's gonna
allow us to call returnNextElement.next(),

57
00:03:15.922 --> 00:03:21.264
and return out first, what element?
&gt;&gt; Will Sentance: Ben,

58
00:03:21.264 --> 00:03:24.012
what element?
&gt;&gt; Ben: 4.

59
00:03:24.012 --> 00:03:25.080
&gt;&gt; Will Sentance: 4, we're gonna call

60
00:03:25.080 --> 00:03:26.374
that next function again,

61
00:03:26.374 --> 00:03:28.847
the next method again we're gonna get out?
&gt;&gt; Ben: 5.

62
00:03:28.847 --> 00:03:29.386
&gt;&gt; Will Sentance: 5, and

63
00:03:29.386 --> 00:03:32.640
then 6 exactly, that's what we hope.

64
00:03:32.640 --> 00:03:37.378
Well, that means that our return
next element object with a function

65
00:03:37.378 --> 00:03:41.951
better have a bundle of persistent data,
the underlying array and

66
00:03:41.951 --> 00:03:45.645
the positioning element,
the I, attached onto it.

67
00:03:45.645 --> 00:03:47.462
It's going to but let's just make sure.

68
00:03:47.462 --> 00:03:50.580
Okay, all right,
into the execution as we go.

69
00:03:52.360 --> 00:03:57.835
It has a memory,
what's the first thing in the memory,

70
00:03:57.835 --> 00:04:00.028
Victor?
&gt;&gt; Victor: I.

71
00:04:00.028 --> 00:04:01.152
&gt;&gt; Will Sentance: That's the second thing

72
00:04:01.152 --> 00:04:02.722
in our memory.
&gt;&gt; Victor: I'm sorry, array.

73
00:04:02.722 --> 00:04:03.769
&gt;&gt; Will Sentance: Array, yep, great,

74
00:04:03.769 --> 00:04:07.721
which is?
&gt;&gt; Victor: Arguments stuff, I'm sorry.

75
00:04:07.721 --> 00:04:09.228
[LAUGH]
&gt;&gt; Will Sentance: Yeah, it's our argument,

76
00:04:09.228 --> 00:04:11.462
you're spot on which is the value,
the array 4, 5, 6.

77
00:04:11.462 --> 00:04:14.180
4, 5,6, Victor, please don't apologize,
you were spot on, it's very nice.

78
00:04:15.820 --> 00:04:20.559
Okay, excellent, so,
now we put this stuff here,

79
00:04:20.559 --> 00:04:25.208
well of course,
I hate to use the phrase of course.

80
00:04:25.208 --> 00:04:30.139
You put this stuff here because we're
going to hopefully define a function here

81
00:04:30.139 --> 00:04:34.921
that when we turn out will pull out on
the back of the function in his backpack,

82
00:04:34.921 --> 00:04:39.900
that live data, and attach it in the
backpack to the function we return out.

83
00:04:39.900 --> 00:04:42.797
We're not gonna define the function
independently and return it out.

84
00:04:42.797 --> 00:04:47.259
We're going to instead define
the function as, what Ben?

85
00:04:47.259 --> 00:04:48.302
&gt;&gt; Ben: As an object?

86
00:04:48.302 --> 00:04:49.007
&gt;&gt; Will Sentance: As a method or

87
00:04:49.007 --> 00:04:50.750
an object, exactly.

88
00:04:50.750 --> 00:04:54.388
So that object Ben is gonna be
called what inside to createFlow?

89
00:04:54.388 --> 00:04:56.823
&gt;&gt; Ben: Enter.

90
00:04:56.823 --> 00:04:58.153
&gt;&gt; Will Sentance: There it is, and

91
00:04:58.153 --> 00:05:03.300
it's just a wrapper,
it's just wrapping our function.

92
00:05:03.300 --> 00:05:08.816
But even though our function's
being defined not independently but

93
00:05:08.816 --> 00:05:13.473
as a method or an object it still
gets all of that same bond,

94
00:05:13.473 --> 00:05:15.960
thing we talked about before.

95
00:05:15.960 --> 00:05:20.418
It still gets the same bond to all the
surrounding data as soon as it's defined

96
00:05:20.418 --> 00:05:21.960
through what property?

97
00:05:21.960 --> 00:05:24.983
Paul, can you remember the property?
&gt;&gt; Paul: Closure.

98
00:05:24.983 --> 00:05:25.690
&gt;&gt; Will Sentance: Well, okay, so

99
00:05:25.690 --> 00:05:29.026
we mean through the JavaScript property
what's the actual hidden property,

100
00:05:29.026 --> 00:05:30.004
James?
&gt;&gt; James: Scope?

101
00:05:30.004 --> 00:05:31.240
&gt;&gt; Will Sentance: Scope, exactly.

102
00:05:31.240 --> 00:05:34.171
It's this little square
bracket square bracket,

103
00:05:34.171 --> 00:05:38.741
which means it's built into JavaScript
under the hood features scope property

104
00:05:38.741 --> 00:05:41.824
that bonds to that surrounding memory,
excellent.

105
00:05:41.824 --> 00:05:46.110
Good, now we'd return out
what would we return out?

106
00:05:46.110 --> 00:05:49.194
Josh, what are we returning out of
the bottom of this createFlow function?

107
00:05:49.194 --> 00:05:51.631
What's the sage return out?

108
00:05:51.631 --> 00:05:54.653
Final creep flow?
&gt;&gt; Josh: The bottom great flow.

109
00:05:54.653 --> 00:05:55.564
&gt;&gt; Will Sentance: You mean the inner?

110
00:05:55.564 --> 00:05:58.143
Return out inner which is-
&gt;&gt; Josh: The object.

111
00:05:58.143 --> 00:05:59.167
&gt;&gt; Will Sentance: The object, excellent.

112
00:05:59.167 --> 00:06:02.065
Thank you so much George,

113
00:06:02.065 --> 00:06:07.467
that's been out returns
the object with the,

114
00:06:07.467 --> 00:06:13.960
dear, I genuinely feel bad
now with the function here.

115
00:06:13.960 --> 00:06:20.118
But the function's brought with it its
surrounding data, and we're going to store

116
00:06:20.118 --> 00:06:24.075
that in what global constant, Blessing?
&gt;&gt; Speaker 9: returnNextElement.

117
00:06:24.075 --> 00:06:25.960
&gt;&gt; Will Sentance: returnNextElement.

118
00:06:25.960 --> 00:06:28.654
Which maybe isn't the perfect name for
it now, I'll grant.

119
00:06:28.654 --> 00:06:30.864
It's now better to be thought of as,
I wanted to call it this but

120
00:06:30.864 --> 00:06:32.767
I didn't wanna write the whole
thing out every time.

121
00:06:32.767 --> 00:06:38.270
I wanted to call it, function, sorry,
object with returnNextElement method,

122
00:06:38.270 --> 00:06:43.311
but it was too long to write out, but
that is what I really wanted to call it.

123
00:06:43.311 --> 00:06:46.208
I actually did change the slides to
that for a bit and thought, eh-eh,

124
00:06:46.208 --> 00:06:49.660
that's getting silly, it was like
running half the way across the page.

125
00:06:49.660 --> 00:06:53.590
I though it was maybe not smart but
there you go, next is this method.

126
00:06:53.590 --> 00:06:57.000
And that function has
a back pack of data but

127
00:06:57.000 --> 00:07:02.130
they object got put out with
the function on it, it blew with it.

128
00:07:03.150 --> 00:07:09.381
All that surrounding data array 4,

129
00:07:09.381 --> 00:07:13.000
5, 6, and i is 0.

130
00:07:13.000 --> 00:07:16.107
It put all of that out on the function,
even though it's no longer just

131
00:07:16.107 --> 00:07:19.965
a function, it's a functional object, it
still gets all that same thing happening.

132
00:07:19.965 --> 00:07:24.731
Objects don't, it's only functions,
because when that function gets called,

133
00:07:24.731 --> 00:07:28.137
returnNextElement.next parends,
runs that function,

134
00:07:28.137 --> 00:07:31.013
it's gonna have access to
that backpack of data.

135
00:07:31.013 --> 00:07:32.580
It's the only way it gets access to data.

136
00:07:32.580 --> 00:07:37.546
By the way, to be really clear we can't
go return its element.next.array.

137
00:07:37.546 --> 00:07:41.870
This is state, this is like live data
attached to the function definition.

138
00:07:41.870 --> 00:07:47.010
Okay, we've just finished
returnNextElement to the return value,

139
00:07:47.010 --> 00:07:50.678
createFlow which was that
object with next on it.

140
00:07:50.678 --> 00:07:55.668
And so what's our, we come back to
global execution context we're updating

141
00:07:55.668 --> 00:07:59.763
our next global line of code as what?
&gt;&gt; Abdee: Declare a const, element1.

142
00:07:59.763 --> 00:08:00.404
&gt;&gt; Will Sentance: I always ask the same

143
00:08:00.404 --> 00:08:01.620
people the same question.

144
00:08:01.620 --> 00:08:04.319
Do you notice this,
I cycle to the same people.

145
00:08:04.319 --> 00:08:08.951
Excellent, Abdee, you are spot on and
I've asked you that now 3 times.

146
00:08:08.951 --> 00:08:11.377
So well done, Abdee, it's fascinating.

147
00:08:11.377 --> 00:08:14.086
He's very consistent.
&gt;&gt; Abdee: It's because subconsciously

148
00:08:14.086 --> 00:08:19.160
I'm doing I'm sort of making
subconscious decisions about who to ask.

149
00:08:19.160 --> 00:08:19.929
&gt;&gt; Will Sentance: Excellent Abdee,

150
00:08:19.929 --> 00:08:20.653
you're spot on.

151
00:08:20.653 --> 00:08:25.965
We declare element1 and
it's going to be the return

152
00:08:25.965 --> 00:08:30.476
value of calling what, Abdee?
&gt;&gt; Abdee: The returnNextElement

153
00:08:30.476 --> 00:08:32.039
function.
&gt;&gt; Will Sentance: Yeah,

154
00:08:32.039 --> 00:08:33.173
which is not a function anymore, is it?

155
00:08:33.173 --> 00:08:36.980
It's an object with a meet a function
on it under what property name?

156
00:08:36.980 --> 00:08:37.494
&gt;&gt; Abdee: Next.

157
00:08:37.494 --> 00:08:38.122
&gt;&gt; Will Sentance: Exactly,

158
00:08:38.122 --> 00:08:40.200
so let's just walk through that.

159
00:08:40.200 --> 00:08:42.508
I wanna make sure we know
how this sorta thing works.

160
00:08:42.508 --> 00:08:46.324
Paul, where do I look for
returnNextElement, the object?

161
00:08:46.324 --> 00:08:47.760
&gt;&gt; Paul: In the global context?

162
00:08:47.760 --> 00:08:48.388
&gt;&gt; Will Sentance: In the global

163
00:08:48.388 --> 00:08:49.134
memory, yep.

164
00:08:49.134 --> 00:08:51.468
And what do I look for on it?
&gt;&gt; Paul: The next method?

165
00:08:51.468 --> 00:08:52.356
&gt;&gt; Will Sentance: The next property

166
00:08:52.356 --> 00:08:52.915
I'd say.

167
00:08:52.915 --> 00:08:53.896
You're right, yeah and

168
00:08:53.896 --> 00:08:56.379
I hope it is a method because
we've got parenthesis on the end.

169
00:08:56.379 --> 00:08:59.235
Is it, it is, excellent.

170
00:08:59.235 --> 00:09:03.451
But it is not, [INAUDIBLE] know it is
a method so to speak at this point,

171
00:09:03.451 --> 00:09:06.797
it could try to put parenthesis
on the end of anything,

172
00:09:06.797 --> 00:09:10.614
but it is indeed a function,
a method and execution context.

173
00:09:10.614 --> 00:09:12.823
So we're not gonna do both of these,

174
00:09:12.823 --> 00:09:17.530
we're just gonna do the first one into
it we go, and let's get this spot on.

175
00:09:17.530 --> 00:09:18.518
So Sean,

176
00:09:18.518 --> 00:09:23.209
first line of code inside the next method.
&gt;&gt; Sean: Const

177
00:09:23.209 --> 00:09:24.672
element is declared.
&gt;&gt; Will Sentance: Okay,

178
00:09:24.672 --> 00:09:29.144
element is declared, excellent,
exactly, element is declared.

179
00:09:29.144 --> 00:09:34.055
So element is going to be, and remember
we're hoping this function is gonna return

180
00:09:34.055 --> 00:09:36.312
out 4, that's what we're hoping.

181
00:09:36.312 --> 00:09:40.990
Element is gonna be array position I.

182
00:09:40.990 --> 00:09:43.859
We do not know what these two 1s are here.

183
00:09:43.859 --> 00:09:45.651
Where do we look first Shawn, for

184
00:09:45.651 --> 00:09:50.124
array and I?
&gt;&gt; Sean: We look into the function next to

185
00:09:50.124 --> 00:09:51.527
itself?
&gt;&gt; Will Sentance: Yeah, exactly,

186
00:09:51.527 --> 00:09:53.645
the execution content,
the local memory, well done.

187
00:09:53.645 --> 00:09:55.030
Did we find it?
&gt;&gt; Sean: No.

188
00:09:55.030 --> 00:09:55.993
&gt;&gt; Will Sentance: No, and we hopefully

189
00:09:55.993 --> 00:09:59.637
wouldn't right because we want these to
be persistent between function calls.

190
00:09:59.637 --> 00:10:03.744
And if were looking here finding it then
that will be a brand new data each time we

191
00:10:03.744 --> 00:10:04.811
call the function.

192
00:10:04.811 --> 00:10:08.287
So we wouldn't be
persisting our data at all,

193
00:10:08.287 --> 00:10:14.172
instead we look next out to the next
functions, backpack of persisting data,

194
00:10:14.172 --> 00:10:19.200
where should do we find?
&gt;&gt; Sean: We find array and

195
00:10:19.200 --> 00:10:22.308
I.
&gt;&gt; Will Sentance: Our raised value is?

196
00:10:22.308 --> 00:10:24.355
&gt;&gt; Sean: 4.

197
00:10:24.355 --> 00:10:25.301
&gt;&gt; Will Sentance: Array's value?

198
00:10:25.301 --> 00:10:26.500
&gt;&gt; Sean: I'm sorry, 4, 5, 6.

199
00:10:26.500 --> 00:10:27.852
&gt;&gt; Will Sentance: And i's value is?

200
00:10:27.852 --> 00:10:28.718
&gt;&gt; Sean: 0.

201
00:10:28.718 --> 00:10:29.967
&gt;&gt; Will Sentance: Perfect, and

202
00:10:29.967 --> 00:10:32.051
we switch them in here.

203
00:10:32.051 --> 00:10:40.434
We put them in here, let's do them in
green to show where they're coming from.

204
00:10:40.434 --> 00:10:45.705
4, 5, 6, position 0,
which gives us an element,

205
00:10:45.705 --> 00:10:48.069
what value Shawn?
&gt;&gt; Sean: 4.

206
00:10:48.069 --> 00:10:48.692
&gt;&gt; Will Sentance: 4, but

207
00:10:48.692 --> 00:10:50.658
now we have another line.

208
00:10:50.658 --> 00:10:54.220
What's the next line in our
returnNextElement.next method?

209
00:10:54.220 --> 00:10:55.248
&gt;&gt; Sean: Add 1 to i.

210
00:10:55.248 --> 00:10:56.289
&gt;&gt; Will Sentance: Add 1 to i,

211
00:10:56.289 --> 00:10:58.587
increment i from 0 to 1.

212
00:10:58.587 --> 00:10:59.948
Again, not in local memory, but

213
00:10:59.948 --> 00:11:05.074
in the backpack.
&gt;&gt; Speaker 2: Always surprising,

214
00:11:05.074 --> 00:11:09.090
right, because we're calling
returnNextElement.next.

215
00:11:09.090 --> 00:11:12.735
We're calling it in global but
the back pack of data,

216
00:11:12.735 --> 00:11:17.357
shoe horns itself in before we reach
global to looking for the data.

217
00:11:17.357 --> 00:11:23.360
The back pack of data shoe horns itself
in and that's where we look first.

218
00:11:23.360 --> 00:11:27.578
And there we also put i to 1, and
the final line of the next method

219
00:11:27.578 --> 00:11:30.070
has to do what Sean?
&gt;&gt; Sean: Return that value.

220
00:11:30.070 --> 00:11:31.532
&gt;&gt; Will Sentance: Return that value,

221
00:11:31.532 --> 00:11:35.754
the 4, and that's it,
stored in what global constant?

222
00:11:35.754 --> 00:11:37.011
&gt;&gt; Sean: Elements.

223
00:11:37.011 --> 00:11:37.776
&gt;&gt; Will Sentance: I'm sorry, what did you

224
00:11:37.776 --> 00:11:39.639
say?
&gt;&gt; Sean: Stored in what global constant?

225
00:11:39.639 --> 00:11:42.305
&gt;&gt; Will Sentance: You're close.

226
00:11:42.305 --> 00:11:42.997
&gt;&gt; Sean: element1.

227
00:11:42.997 --> 00:11:45.274
&gt;&gt; Will Sentance: element1, excellent.

228
00:11:45.274 --> 00:11:48.890
And we know that the next call to .next

229
00:11:48.890 --> 00:11:53.752
is going to look in the backpack,
find I is now one.

230
00:11:53.752 --> 00:11:56.244
And then it's gonna return
us at what value hopefully,

231
00:11:56.244 --> 00:11:57.278
Shawn?
&gt;&gt; Sean: 5.

232
00:11:57.278 --> 00:11:58.412
&gt;&gt; Will Sentance: 5, exactly.

233
00:11:58.412 --> 00:12:04.443
So in element2,
we would return out 5, okay.

234
00:12:04.443 --> 00:12:06.693
So basically, review there but

235
00:12:06.693 --> 00:12:10.870
the reason we did it was to
recognize the design of built in.

236
00:12:12.250 --> 00:12:16.703
Iterators, they're actually
objects with a function on them

237
00:12:16.703 --> 00:12:21.503
that's gonna do that stuff, okay,
as opposed to just a function.

238
00:12:21.503 --> 00:12:25.960
All right, and by the way, built in
iterators actually produce the element

239
00:12:25.960 --> 00:12:28.770
that gets returned out, not as a number.

240
00:12:28.770 --> 00:12:31.150
You never let us keep it easy man.

241
00:12:31.150 --> 00:12:35.581
They instead produce out an object with

242
00:12:35.581 --> 00:12:40.291
a value which is the number we care about.

243
00:12:40.291 --> 00:12:43.409
And then another property called done,

244
00:12:43.409 --> 00:12:48.390
which is false until we've
called returnNextElement.next.

245
00:12:48.390 --> 00:12:54.201
Again this time 5 ,still done is false,
next time six, still done with fold.

246
00:12:54.201 --> 00:12:57.912
Next time the value is undefined and

247
00:12:57.912 --> 00:13:02.834
done is true.
&gt;&gt; Will Sentance: I guess that's

248
00:13:02.834 --> 00:13:06.206
valuable if you wanna check whether your
iterator is finished because you could

249
00:13:06.206 --> 00:13:08.581
have a position in your
collection that was undefined.

250
00:13:08.581 --> 00:13:11.572
And if you were just checking for
undefined,

251
00:13:11.572 --> 00:13:15.978
cuz you hit the end of the array,
and you had an undefined element,

252
00:13:15.978 --> 00:13:20.310
then you would end your
grabbing of elements too soon.

253
00:13:20.310 --> 00:13:23.970
So it makes sense to have a property done
that actually switches the files once

254
00:13:23.970 --> 00:13:26.459
you've finished going
through all your elements.

255
00:13:26.459 --> 00:13:30.875
And by the way,
we could easily augment our create flow

256
00:13:30.875 --> 00:13:36.060
functions inner that gets returned
to returnNextElement to not

257
00:13:36.060 --> 00:13:41.064
return out the element, but
instead return out valued is 4.

258
00:13:41.064 --> 00:13:44.427
The value is the element, and
done is false until it's true, based on

259
00:13:44.427 --> 00:13:48.640
the condition of going through the array
and checking if it's finished or not.

260
00:13:48.640 --> 00:13:50.593
And we can very easily augment this, but

261
00:13:50.593 --> 00:13:53.241
that is exactly how they're
built out in JavaScript.

262
00:13:53.241 --> 00:13:58.729
We need to do that cuz we're
now gonna start using built-in

263
00:13:58.729 --> 00:14:04.220
tools to give us these
returnNextElement.next functions

264
00:14:04.220 --> 00:14:09.505
that when run will give us each
of our elements one by one.

265
00:14:09.505 --> 00:14:15.567
And we're gonna produce those flow of
data, not from underlying collections 4,

266
00:14:15.567 --> 00:14:20.950
5, 6, but instead we're gonna produce
these flows using a function.

267
00:14:21.960 --> 00:14:26.788
We're actually gonna define a function
that has kind of intermediate returns,

268
00:14:26.788 --> 00:14:28.991
the best way of thinking about them.

269
00:14:28.991 --> 00:14:33.863
They're statements that return
out our next element in our flow,

270
00:14:33.863 --> 00:14:37.780
just like we did when we
grabbed it from a collection.

271
00:14:37.780 --> 00:14:41.282
Behind the scenes is collection we
just see the returned out element,

272
00:14:41.282 --> 00:14:42.260
next element.

273
00:14:42.260 --> 00:14:47.174
Now we're gonna get those elements out,
not from a collection but instead

274
00:14:47.174 --> 00:14:52.251
from a function as kinda intermediate
steps in that function's execution.

275
00:14:52.251 --> 00:14:53.923
It's really interesting,

276
00:14:53.923 --> 00:14:59.100
kind of this fusion always increasing
fusion of data with functionality.

277
00:14:59.100 --> 00:15:03.215
Now we're producing flows of data
not from a collection of data.

278
00:15:03.215 --> 00:15:07.102
But instead from a function
where we evaluate statements and

279
00:15:07.102 --> 00:15:12.222
pull out the evaluated result as our
intermediate, as our elements one by one.

280
00:15:12.222 --> 00:15:14.966
It's gonna be very,
very interesting how this works.

281
00:15:14.966 --> 00:15:18.901
How this code works is going to
absolutely undo everything you

282
00:15:18.901 --> 00:15:22.620
thought about how JavaScript's
execution model works.

283
00:15:23.620 --> 00:15:28.317
Not undo, it's consistent with it, but
it's going to add a behavior that you

284
00:15:28.317 --> 00:15:32.676
never thought would be allowed,
that I never thought would be allowed.

285
00:15:32.676 --> 00:15:37.592
It's not crazy, but it is a behavior
that we never thought would be allowed.

286
00:15:37.592 --> 00:15:42.072
Okay, and it uses this new style
of function, the star function,

287
00:15:42.072 --> 00:15:46.240
known as a generator function,
to produce our flows of data.

288
00:15:47.960 --> 00:15:52.765
We're gonna call that createFlow
It's gonna return out a special

289
00:15:52.765 --> 00:15:57.824
generator object into returnNextElement,
&gt;&gt; Will Sentance: With

290
00:15:57.824 --> 00:15:59.224
a next property on it.

291
00:15:59.224 --> 00:16:02.470
And when that next is called,
you wait for it.

292
00:16:02.470 --> 00:16:10.136
It's gonna take us back in to continue our
execution of that createFlow function.

293
00:16:10.136 --> 00:16:14.691
It's gonna return out our result, and
that's gonna be our first element out.

294
00:16:14.691 --> 00:16:17.558
We're gonna walk through this line
by line and really get this precise.

295
00:16:17.558 --> 00:16:23.730
I'm hoping my board is white enough for
this because it's a fascinating new way.

296
00:16:23.730 --> 00:16:26.767
And again,
not inconsistent with our more execution.

297
00:16:26.767 --> 00:16:31.479
It just allows us because we're already
very used to attaching to function

298
00:16:31.479 --> 00:16:33.740
definition, persistence state.

299
00:16:33.740 --> 00:16:36.890
We're just attach persistence state and

300
00:16:36.890 --> 00:16:42.650
a tracker of where we are in a function
execution.We'll see us in a second.

