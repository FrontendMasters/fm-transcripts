WEBVTT

1
00:00:00.050 --> 00:00:01.590
&gt;&gt; Will Sentance: So pair programming.

2
00:00:01.590 --> 00:00:05.596
There is no better way to
grow as a software engineer.

3
00:00:05.596 --> 00:00:10.195
The reason being, we said at the start, as
people shared resources like Pluralsight.

4
00:00:10.195 --> 00:00:11.650
It was Sean who shared that.

5
00:00:11.650 --> 00:00:13.910
Pluralsight is video driven.

6
00:00:15.350 --> 00:00:17.360
These resources are solid.

7
00:00:18.640 --> 00:00:19.400
They're excellent.

8
00:00:20.440 --> 00:00:24.561
Well, I don't love Pluralsight
as much as Frontend Masters,

9
00:00:24.561 --> 00:00:27.060
one of the best resources for videos.

10
00:00:27.060 --> 00:00:28.490
Well, it's the best by a long way.

11
00:00:28.490 --> 00:00:31.170
For real, it's clearly the best.

12
00:00:31.170 --> 00:00:34.350
But those are only legit
if you're using them,

13
00:00:34.350 --> 00:00:39.010
wielding them to solve problems you're
getting in your day to day work.

14
00:00:39.010 --> 00:00:42.750
So if you're an aspiring engineer and
you're not working on tough JavaScript

15
00:00:42.750 --> 00:00:49.570
problems every day, then you fall into
the trap of what I call easy learning.

16
00:00:49.570 --> 00:00:53.810
Easy learning is learning where you don't
hit blocks and therefore you don't grow.

17
00:00:53.810 --> 00:00:56.890
So how do you do what I call
hard learning that's effective

18
00:00:56.890 --> 00:00:58.930
that actually is what makes
you grow as an engineer?

19
00:01:00.110 --> 00:01:03.090
Well, you do things like
tough coding challenges.

20
00:01:03.090 --> 00:01:03.890
You build projects.

21
00:01:03.890 --> 00:01:05.470
You have assignments.

22
00:01:05.470 --> 00:01:09.410
But the problem with those is
it's super tempting to do what?

23
00:01:09.410 --> 00:01:12.490
To do anything else besides that.

24
00:01:12.490 --> 00:01:15.060
Including, so
we might be making a cup of tea.

25
00:01:15.060 --> 00:01:16.410
Whatever.

26
00:01:16.410 --> 00:01:18.190
But even if it's not that,
even if the other person's like, no, no,

27
00:01:18.190 --> 00:01:19.660
I can actually push through them.

28
00:01:19.660 --> 00:01:21.550
You may still fall into two traps.

29
00:01:21.550 --> 00:01:26.270
I call it the researcher
versus the Stack Overflower.

30
00:01:27.590 --> 00:01:29.380
This is the researcher.

31
00:01:29.380 --> 00:01:30.660
That's my magnifying glass.

32
00:01:30.660 --> 00:01:33.390
I need to spell that out unfortunately
because clearly I've been told

33
00:01:33.390 --> 00:01:35.780
nobody ever recognizes
what this symbol is.

34
00:01:35.780 --> 00:01:37.430
And a Stack Overflower.

35
00:01:38.470 --> 00:01:42.234
Ideally, as a software engineer,
we're always balancing these two extremes.

36
00:01:42.234 --> 00:01:44.590
I wanna understand everything and
how it's working, but

37
00:01:44.590 --> 00:01:47.590
I simultaneously gotta
make it work sometimes.

38
00:01:47.590 --> 00:01:49.130
Just make it work without
understanding every piece.

39
00:01:49.130 --> 00:01:51.560
We're always balancing these two needs.

40
00:01:51.560 --> 00:01:53.950
As a pro engineer facing tough challenges,

41
00:01:53.950 --> 00:01:56.700
we've hopefully learned to
balance that effectively.

42
00:01:56.700 --> 00:01:58.740
But we could always get better at it,

43
00:01:58.740 --> 00:02:03.350
and the best way I know to get
the balance right is pair programming.

44
00:02:03.350 --> 00:02:06.370
Pair programming,
by separating the concerns.

45
00:02:06.370 --> 00:02:09.387
On the one side we have James,
on the other, we have Blessing.

46
00:02:09.387 --> 00:02:12.458
James and Blessing are working
through a challenge together.

47
00:02:12.458 --> 00:02:16.800
Let's say Blessing is what's called our
navigator, and James is our driver.

48
00:02:16.800 --> 00:02:21.520
Blessing is at no point
ever allowed to type.

49
00:02:21.520 --> 00:02:24.030
She's not allowed to put
her hands on the keyboard.

50
00:02:24.030 --> 00:02:28.760
But she is responsible for
the problem solving of the challenge.

51
00:02:28.760 --> 00:02:31.950
That is to say, Blessing is
the one who is gonna verbalize and

52
00:02:31.950 --> 00:02:37.540
approach both an over all strategy and
a line by line execution of the code

53
00:02:37.540 --> 00:02:41.440
that James is then gonna
interpret into actual code.

54
00:02:41.440 --> 00:02:43.076
She is never gonna take
control of the keyboard.

55
00:02:43.076 --> 00:02:47.535
She's never just gonna say, James,
you mind if I just show you what I mean?

56
00:02:47.535 --> 00:02:48.236
&gt;&gt; [SOUND].

57
00:02:48.236 --> 00:02:51.509
&gt;&gt; Will Sentance: Instead this separation
concerns is gonna ensure that Blessing

58
00:02:51.509 --> 00:02:55.509
can't ever become a researcher for
ten hours, reading every last thing about

59
00:02:55.509 --> 00:02:59.430
the new keyword because she's
got James sitting there waiting.

60
00:02:59.430 --> 00:03:02.650
But nor can she just be
a Stack Overflower, make it work, plug and

61
00:03:02.650 --> 00:03:07.140
play script person because James needs to
know a bit more about why we're doing it.

62
00:03:07.140 --> 00:03:07.970
What is our strategy here?

63
00:03:07.970 --> 00:03:10.200
What are we doing line by line?

64
00:03:10.200 --> 00:03:12.510
But also by her not being allowed to say,
James,

65
00:03:12.510 --> 00:03:16.420
let me just show you, her technical
communication, the ability for

66
00:03:16.420 --> 00:03:21.690
her to explicate her approach and make
it meaningful to somebody else is vital.

67
00:03:22.780 --> 00:03:24.700
It's a thing we look for in codes with
interviews more than [INAUDIBLE].

68
00:03:24.700 --> 00:03:29.007
We've turned down many people for
Codesmith who've been JavaScript engineers

69
00:03:29.007 --> 00:03:33.200
for four or five years, because their
technical communication is not there.

70
00:03:33.200 --> 00:03:35.010
And yet
that is what makes a senior developer.

71
00:03:35.010 --> 00:03:39.770
Mid level developer,
take any feature, implement it.

72
00:03:39.770 --> 00:03:41.710
Even if they've never
seen the concept before,

73
00:03:41.710 --> 00:03:43.730
because they've learned how
to break through blocks.

74
00:03:43.730 --> 00:03:47.885
Senior developer can take any feature and
they can empower a team,

75
00:03:47.885 --> 00:03:53.670
their colleagues, to implement it,
because their ability to take

76
00:03:53.670 --> 00:03:57.920
their internal mental model of the code
and make it meaningful to somebody else.

77
00:03:57.920 --> 00:04:00.750
That is what we're training
on when we pair program.

78
00:04:00.750 --> 00:04:03.920
All right,
which means one machine between two.

79
00:04:03.920 --> 00:04:07.150
It means switching over role
every ten minutes or so.

80
00:04:09.090 --> 00:04:12.430
It means, by the way, if your partner is
going down a path you think's a mistake,

81
00:04:12.430 --> 00:04:14.280
let it get to the point
where they press run.

82
00:04:14.280 --> 00:04:17.510
And they see the error and
then debug it together.

83
00:04:17.510 --> 00:04:20.490
Don't say,
I think you went the wrong way here.

84
00:04:21.620 --> 00:04:22.940
Very, very effective.

85
00:04:22.940 --> 00:04:23.610
All right, people.

86
00:04:23.610 --> 00:04:24.145
There it is.

87
00:04:24.145 --> 00:04:28.039
You're gonna go to csbin.io.

88
00:04:28.039 --> 00:04:29.400
This is for our online focus world.

89
00:04:29.400 --> 00:04:33.424
You're going to csbin.io/promises.

90
00:04:33.424 --> 00:04:37.460
Get to it, start working through them,
and we will reconvene shortly.

