WEBVTT

1
00:00:00.070 --> 00:00:03.940
&gt;&gt; Will Sentance: We need to know how
our promise deferred functionality

2
00:00:03.940 --> 00:00:06.350
displays a promise deferred function,
right?

3
00:00:06.350 --> 00:00:09.000
Display was deferred on a promise.

4
00:00:09.000 --> 00:00:12.430
It wasn't deferred by passing
into web browser feature and

5
00:00:12.430 --> 00:00:13.870
then pass back into Java.

6
00:00:13.870 --> 00:00:20.600
So this is deferred by a promise, how
it gets back into JavaScript to be run.

7
00:00:22.600 --> 00:00:26.587
Okay so I didn't know any other
examples for code in entire history

8
00:00:26.587 --> 00:00:30.517
to require three functions to be
defined for us to understand it.

9
00:00:30.517 --> 00:00:33.450
So I apologise, but this one, this is big.

10
00:00:33.450 --> 00:00:38.022
This is like the mega everything coming
together in async, it is messy it is big

11
00:00:38.022 --> 00:00:44.720
but if we get this down we have
every last piece of async down.

12
00:00:44.720 --> 00:00:46.500
Okay, we're going to walk through it.

13
00:00:46.500 --> 00:00:51.280
It's going to defer functions using
an old school callback input.

14
00:00:51.280 --> 00:00:55.390
The print hello passes at timeout,
old school facade function.

15
00:00:55.390 --> 00:00:59.060
It's going to defer functionality using a
new school double-pronged facade function,

16
00:00:59.060 --> 00:01:00.450
fetch.

17
00:01:00.450 --> 00:01:03.664
It's going to block our
thread in native JavaScript.

18
00:01:03.664 --> 00:01:07.564
It's all gonna come
together to ask ourselves

19
00:01:07.564 --> 00:01:12.600
which deferred functionality
executes first?

20
00:01:12.600 --> 00:01:15.359
Okay, here we go, let's wipe this clean.

21
00:01:15.359 --> 00:01:18.440
Sean, line one, what are we doing?

22
00:01:18.440 --> 00:01:21.900
&gt;&gt; Sean: Define display
as a place in memory.

23
00:01:21.900 --> 00:01:25.770
&gt;&gt; Will Sentance: You got function,
functionality, declared in memory.

24
00:01:25.770 --> 00:01:27.000
All right, excellent display, thank you.

25
00:01:27.000 --> 00:01:28.100
Mike, next?

26
00:01:28.100 --> 00:01:32.320
&gt;&gt; Mike: Print Hello function is defined.

27
00:01:32.320 --> 00:01:33.570
&gt;&gt; Will Sentance: Thank you, Mike.

28
00:01:33.570 --> 00:01:35.630
All right, next, Michelle?

29
00:01:36.990 --> 00:01:41.380
&gt;&gt; Michelle: We define a function
that in a black box manner-

30
00:01:41.380 --> 00:01:43.081
&gt;&gt; Will Sentance: Nicely put,

31
00:01:43.081 --> 00:01:47.105
exactly in a black box manner.

32
00:01:47.105 --> 00:01:52.940
Block for 300 milliseconds.

33
00:01:52.940 --> 00:01:56.290
We don't how it's gonna do it can
you remind us just how it might?

34
00:01:57.740 --> 00:02:02.610
How might we block our main JavaScript
thread from running any further code for

35
00:02:02.610 --> 00:02:04.099
300 milliseconds?

36
00:02:04.099 --> 00:02:05.685
&gt;&gt; Michelle: Make a really
nasty forward loop.

37
00:02:05.685 --> 00:02:08.161
&gt;&gt; Will Sentance: Yeah, we long loop,
exactly, which may be assigning stuff,

38
00:02:08.161 --> 00:02:09.670
whatever, it's going to take time.

39
00:02:09.670 --> 00:02:11.570
Excellent, thank you, Michelle.

40
00:02:11.570 --> 00:02:14.030
Now, we hit the interesting stuff.

41
00:02:14.030 --> 00:02:15.740
We've done our setup.

42
00:02:15.740 --> 00:02:18.540
Now we hit things that we get interesting.

43
00:02:21.120 --> 00:02:22.245
Okay, do you have enough room here?

44
00:02:22.245 --> 00:02:27.591
[SOUND] Yeah, probably, okay.

45
00:02:27.591 --> 00:02:33.833
Set timeout is past the entire

46
00:02:33.833 --> 00:02:42.110
print hello function definition.

47
00:02:42.110 --> 00:02:45.210
And it's additional argument,
Michelle, is?

48
00:02:45.210 --> 00:02:45.710
&gt;&gt; Michelle: Zero.

49
00:02:45.710 --> 00:02:46.960
&gt;&gt; Will Sentance: Which represents?

50
00:02:46.960 --> 00:02:47.840
&gt;&gt; Michelle: Zero milliseconds.

51
00:02:47.840 --> 00:02:52.410
&gt;&gt; Will Sentance: Right, zero milliseconds
after which we want print hello to call.

52
00:02:52.410 --> 00:02:57.110
Now, we probably realize all that
could mean is that's the minimum.

53
00:02:57.110 --> 00:02:59.240
We know it will not be called before then.

54
00:02:59.240 --> 00:03:04.050
But when it's allowed It
is the amount of time

55
00:03:04.050 --> 00:03:09.380
a background web browser timer will
run for, that's what we know it does.

56
00:03:09.380 --> 00:03:13.960
It does not tell us in JavaScript how
long until that function will be called.

57
00:03:13.960 --> 00:03:18.000
All we know is that zero milliseconds will
pass before that function Print Hello

58
00:03:18.000 --> 00:03:19.910
is ever allowed back in the JavaScript.

59
00:03:19.910 --> 00:03:22.880
But it could be a quite a lot longer
before it's allowed back in, but

60
00:03:22.880 --> 00:03:25.640
it'll be queued up ready to
go after zero milliseconds.

61
00:03:25.640 --> 00:03:28.420
It'll be sitting there waiting to be on
the call stack after zero milliseconds.

62
00:03:28.420 --> 00:03:32.890
Okay, so
what does settimeout do on that note?

63
00:03:32.890 --> 00:03:36.240
Nothing in JavaScript, but what does
it do, Blessing, in the web browser?

64
00:03:37.540 --> 00:03:42.052
&gt;&gt; Blessing: Its calls
are fetch [CROSSTALK] Sorry

65
00:03:42.052 --> 00:03:46.419
[LAUGH] web browser feature timer.

66
00:03:46.419 --> 00:03:48.240
&gt;&gt; Will Sentance: Timer, excellent.

67
00:03:49.630 --> 00:03:53.434
With the properties
&gt;&gt; Blessing: Of the function to call on

68
00:03:53.434 --> 00:03:56.818
completion and the time before it closes.

69
00:03:56.818 --> 00:04:00.353
&gt;&gt; Will Sentance: Excellent, and then
here is our timer being set up in the web

70
00:04:00.353 --> 00:04:05.810
browser with zero milliseconds Is it at
this moment, Blessing, is it complete?

71
00:04:05.810 --> 00:04:06.560
&gt;&gt; Blessing: No.

72
00:04:06.560 --> 00:04:07.640
&gt;&gt; Will Sentance: Is it complete?

73
00:04:07.640 --> 00:04:08.958
It's zero millisecond timer.

74
00:04:08.958 --> 00:04:09.880
&gt;&gt; Blessing: Yes, yes, it is.

75
00:04:09.880 --> 00:04:14.050
&gt;&gt; Will Sentance: So
it's complete already, excellent.

76
00:04:14.050 --> 00:04:18.070
And on completion,
what did we say we want to do, Blessing?

77
00:04:18.070 --> 00:04:21.979
&gt;&gt; Blessing: Once you put the print
hello function in the call back queue.

78
00:04:22.980 --> 00:04:25.300
&gt;&gt; Will Sentance: Very,
very good precision there by Blessing.

79
00:04:25.300 --> 00:04:30.139
We want to add print hello
function to the call back queue.

80
00:04:30.139 --> 00:04:35.142
So let's do that, let's put

81
00:04:35.142 --> 00:04:39.740
the call back
&gt;&gt; Will Sentance: Queue,

82
00:04:39.740 --> 00:04:44.424
call back
&gt;&gt; Will Sentance: Queue,

83
00:04:44.424 --> 00:04:49.900
there it is, and actually, print hello
is ready to go in there right now.

84
00:04:49.900 --> 00:04:51.890
It's ready to go and be added.

85
00:04:51.890 --> 00:04:57.640
So your event loop is going
to be checking already

86
00:04:57.640 --> 00:05:01.060
can I add this stuff
back to the cool stack.

87
00:05:01.060 --> 00:05:03.760
Can I add this print hello
function back to the call.

88
00:05:03.760 --> 00:05:08.720
It's sitting there, ready,
&gt;&gt; Will Sentance: To be run from

89
00:05:08.720 --> 00:05:13.020
basically, let's say
this was one millisecond,

90
00:05:13.020 --> 00:05:15.923
basically from one millisecond.

91
00:05:17.910 --> 00:05:19.050
&gt;&gt; Will Sentance: At one millisecond.

92
00:05:22.120 --> 00:05:27.460
It's sitting there basically from one
millisecond In the call back queue,

93
00:05:27.460 --> 00:05:30.260
ready to be executed.

94
00:05:30.260 --> 00:05:31.047
It's complete, it's ready,

95
00:05:31.047 --> 00:05:32.658
it's [SOUND] past it's ready
to go back to the event loop.

96
00:05:32.658 --> 00:05:35.893
We're going back to go to the call stack,
but

97
00:05:35.893 --> 00:05:40.698
the event loop is sitting there,
and it's like a god protecting.

98
00:05:40.698 --> 00:05:42.281
&gt;&gt; multiple: [LAUGH]
&gt;&gt; Will Sentance: So

99
00:05:42.281 --> 00:05:44.330
what is our next line of code?

100
00:05:44.330 --> 00:05:47.600
Because print hello is ready to run,
can it run though?

101
00:05:48.720 --> 00:05:51.230
No, cuz what's my one simple rule for
the event loop?

102
00:05:51.230 --> 00:05:51.820
Michelle?

103
00:05:51.820 --> 00:05:52.880
&gt;&gt; Michelle: The call
stack has to be clear

104
00:05:52.880 --> 00:05:53.530
&gt;&gt; Will Sentance: Has to be totally

105
00:05:53.530 --> 00:05:56.130
clear and all global code
has to finish executing, so

106
00:05:56.130 --> 00:05:57.630
we are definitely not there yet.

107
00:05:57.630 --> 00:06:02.547
So instead at two milliseconds
we hit what line, Michelle?

108
00:06:02.547 --> 00:06:05.178
Actually Abdi,
what line we hit at two milliseconds?

109
00:06:05.178 --> 00:06:06.380
&gt;&gt; Abdi: Variable constant.

110
00:06:06.380 --> 00:06:09.956
&gt;&gt; Will Sentance: Excellent, be careful
saying variable, I think from now on,

111
00:06:09.956 --> 00:06:14.757
just say a constant future data, that
makes sense, or a const, yep, future data.

112
00:06:14.757 --> 00:06:17.318
Now it's gonna start off undefined,

113
00:06:17.318 --> 00:06:22.990
as anything that's right hand side is
unfinished work, starts off undefined.

114
00:06:22.990 --> 00:06:26.800
It's gonna go and figure out what that
right hand side is going to evaluate to.

115
00:06:26.800 --> 00:06:32.570
Evaluate is the posh word for
get me down to my value.

116
00:06:32.570 --> 00:06:34.900
This is a command,
I can't store a command.

117
00:06:34.900 --> 00:06:37.490
I can't store a command to go and
run a function.

118
00:06:37.490 --> 00:06:40.390
I can only store the returned
value from that function.

119
00:06:40.390 --> 00:06:43.670
Okay, so let's start doing that.

120
00:06:43.670 --> 00:06:51.240
Future data is going to be
the return value in JavaScript

121
00:06:51.240 --> 00:06:58.650
using this double prong façade function
fetch that does something in JavaScript.

122
00:06:58.650 --> 00:07:04.840
And also in the web browser
features themselves.

123
00:07:04.840 --> 00:07:07.690
But it does do something in
JavaScript as well, this time.

124
00:07:07.690 --> 00:07:10.911
And what is the thing that it
does in JavaScript, Abdi?.

125
00:07:10.911 --> 00:07:15.082
&gt;&gt; Abdi: I create an object with value and
fulfillment.

126
00:07:15.082 --> 00:07:17.550
&gt;&gt; Will Sentance: Excellent, yeah.

127
00:07:17.550 --> 00:07:23.598
It returns out an object with
a property value that's undefined.

128
00:07:23.598 --> 00:07:28.280
On fulfillment that's an empty
array into which we wanna push all

129
00:07:28.280 --> 00:07:33.180
functions that would also
triggered when value gets updated.

130
00:07:33.180 --> 00:07:37.820
And this returned out JavaScript
object is the output of running fetch.

131
00:07:37.820 --> 00:07:43.150
This is what comes out, it's returned and
therefore is assigned the future data.

132
00:07:43.150 --> 00:07:50.213
Okay, so there's future data is now
that returned out promise object.

133
00:07:51.600 --> 00:07:53.158
&gt;&gt; Will Sentance: There it is with value.

134
00:07:54.713 --> 00:07:55.930
&gt;&gt; Will Sentance: And we're almost there,

135
00:07:55.930 --> 00:07:59.364
people on fulfilment
&gt;&gt; Will Sentance: Is an empty array that

136
00:07:59.364 --> 00:08:01.960
will be triggered to
run all its functions.

137
00:08:01.960 --> 00:08:06.299
When value gets updated by
fetches where browser works, so

138
00:08:06.299 --> 00:08:11.256
let's talk about it where browser work,
what is the consequence?

139
00:08:11.256 --> 00:08:11.968
All right, who am I gonna call on?

140
00:08:11.968 --> 00:08:18.110
Victor, what is fetches in
its facade function form?

141
00:08:18.110 --> 00:08:22.024
What's a thing it does in the web browser
in addition to this objective it returns

142
00:08:22.024 --> 00:08:25.260
out in JavaScript, but
what's it set up in the web browser fetch?

143
00:08:26.670 --> 00:08:27.680
&gt;&gt; Victor: An XHR.

144
00:08:27.680 --> 00:08:34.840
&gt;&gt; Will Sentance: It sets up
an XHR request or XMLHttpRequest.

145
00:08:34.840 --> 00:08:40.210
Exactly, it's going to get going
this web browser feature XHR,

146
00:08:40.210 --> 00:08:45.983
so let's add it, let's add it below here,
it's the next one, XHR.

147
00:08:45.983 --> 00:08:50.790
What properties does it need, Brian?

148
00:08:50.790 --> 00:08:55.003
&gt;&gt; Brian: It's the URL,
the path, and the method.

149
00:08:55.003 --> 00:09:00.900
&gt;&gt; Will Sentance: Yeah, [INAUDIBLE] yeah,
the URL, the path, and the method.

150
00:09:00.900 --> 00:09:08.230
And it also defaults to get,
everything in blue is the web browser,

151
00:09:08.230 --> 00:09:13.270
that's gonna send off to Twitter and

152
00:09:13.270 --> 00:09:16.970
their service, an http request.

153
00:09:18.160 --> 00:09:20.460
And we've gonna hopefully
get some data back.

154
00:09:20.460 --> 00:09:25.620
Is it complete, Brian, at 2 milliseconds?

155
00:09:26.860 --> 00:09:27.390
&gt;&gt; Brian: No.

156
00:09:27.390 --> 00:09:28.600
&gt;&gt; Will Sentance: Definitely not.

157
00:09:28.600 --> 00:09:30.390
But on completion,

158
00:09:30.390 --> 00:09:35.410
what do we want it to do, Brian do you
what we want it to do on completion?

159
00:09:35.410 --> 00:09:40.720
&gt;&gt; Brian: We want to assign the value
of the data that we got back to value.

160
00:09:40.720 --> 00:09:43.170
&gt;&gt; Will Sentance: Excellent,
on what object?

161
00:09:43.170 --> 00:09:44.240
&gt;&gt; Brian: Future data.

162
00:09:44.240 --> 00:09:49.079
&gt;&gt; Will Sentance: Very well put,
Brian, futureData.value will be

163
00:09:49.079 --> 00:09:54.750
whatever comes back from this
background work, well done, Brian.

164
00:09:54.750 --> 00:09:59.880
So fetch's work is done,
fetch is the most complex,

165
00:09:59.880 --> 00:10:03.648
one word API I've ever seen.

166
00:10:03.648 --> 00:10:06.020
It's literally two-pronged,
it does something in JavaScript,

167
00:10:06.020 --> 00:10:08.620
something in the web browser,
that is why it's ridiculous.

168
00:10:08.620 --> 00:10:13.570
Okay, but now we continue on in JavaScript
to immediately after we dump future data

169
00:10:13.570 --> 00:10:17.350
equals return value of fetch which was
object, future data, promise object.

170
00:10:17.350 --> 00:10:20.193
What's the next line of code we hit, Mike?

171
00:10:20.193 --> 00:10:22.612
&gt;&gt; Mike: The futureData.then line.

172
00:10:22.612 --> 00:10:26.974
&gt;&gt; Will Sentance: Excellent
futuredata.then parsing the display,

173
00:10:26.974 --> 00:10:29.060
the entire definition.

174
00:10:29.060 --> 00:10:32.060
I always draw that little box here to show
it's the entire definition of display

175
00:10:33.060 --> 00:10:35.980
being parsed to the then.

176
00:10:35.980 --> 00:10:41.220
Which we're actually gonna replace the
then method with store this function on

177
00:10:41.220 --> 00:10:48.080
this object data future data to be
triggered when value is outdated.

178
00:10:48.080 --> 00:10:51.290
That's what then is doing,
let's imagine it's called that.

179
00:10:51.290 --> 00:10:55.181
It is being done right now, it's only job
is never [INAUDIBLE] do anything again,

180
00:10:55.181 --> 00:10:56.627
it's only has one other job.

181
00:10:56.627 --> 00:10:58.261
But it's only interesting job for

182
00:10:58.261 --> 00:11:01.670
us right now is getting that
function stored on futureData.

183
00:11:01.670 --> 00:11:04.025
Under it's, what array, Ben?

184
00:11:04.025 --> 00:11:05.420
&gt;&gt; Ben: Unfulfillment.

185
00:11:05.420 --> 00:11:08.910
&gt;&gt; Will Sentance: Right,
it's hidden unfulfillment array,

186
00:11:08.910 --> 00:11:12.750
that's where it's gonna be stored
cuz it's hidden unfulfillment array.

187
00:11:12.750 --> 00:11:17.080
And so we are going to put the display
function, or at least a reference to it,

188
00:11:17.080 --> 00:11:21.880
a link to it in the unfulfillment array,
there it is.

189
00:11:22.910 --> 00:11:27.420
Okay, good, by the way, all through this
printHello is still sitting there saying,

190
00:11:27.420 --> 00:11:28.642
can I come back on the call back queue?

191
00:11:28.642 --> 00:11:30.340
Callback's called whatever it's called,
call sack,

192
00:11:30.340 --> 00:11:33.490
whatever that thing's called, precision.

193
00:11:33.490 --> 00:11:38.580
Back on the call sack and event loop is
going, you're not allowed back on yet but

194
00:11:38.580 --> 00:11:42.090
maybe now it's allowed back
on cuz we don't have no.

195
00:11:42.090 --> 00:11:44.690
What's actually our next line of code,
Abdi?

196
00:11:44.690 --> 00:11:46.230
&gt;&gt; Abdi: Console log in meFirst.

197
00:11:46.230 --> 00:11:48.360
&gt;&gt; Will Sentance: We've got one before
that, dude just after the then.

198
00:11:48.360 --> 00:11:53.080
&gt;&gt; Abdi: I didn't see that,
we're running the function of block for

199
00:11:53.080 --> 00:11:54.380
at 300 milliseconds.

200
00:11:54.380 --> 00:11:59.350
&gt;&gt; Will Sentance: Block for 300
milliseconds, who's functionality we don't

201
00:11:59.350 --> 00:12:03.360
know how it's working, we just know
that it's gonna sit on our call stack.

202
00:12:03.360 --> 00:12:07.360
We're gonna enter it,
we're gonna sit there for

203
00:12:07.360 --> 00:12:12.950
300 milliseconds and
come back out only at 303 milliseconds.

204
00:12:12.950 --> 00:12:15.272
Okay, while it was on the call stack,

205
00:12:15.272 --> 00:12:18.550
let's put it on the call stack so
it's really clear.

206
00:12:20.460 --> 00:12:25.577
While it's on the call stack,
block for 300 milliseconds,

207
00:12:25.577 --> 00:12:29.620
while it's on the call stack,
what happens?

208
00:12:29.620 --> 00:12:34.177
Well, actually, our request comes back,
so it's something like,

209
00:12:34.177 --> 00:12:36.584
let's say, 290 milliseconds.

210
00:12:36.584 --> 00:12:41.209
Our request comes back and then what's our
very nicely structured data we get back?

211
00:12:41.209 --> 00:12:45.243
&gt;&gt; Ben: Response-
&gt;&gt; Will Sentance: Right, exactly, hi,

212
00:12:45.243 --> 00:12:50.218
we're gonna simplify here slightly,
there it is, hi,

213
00:12:50.218 --> 00:12:54.999
and what at that point is it
going to trigger to update?

214
00:12:56.290 --> 00:12:57.800
&gt;&gt; Ben: Future data.value.

215
00:12:57.800 --> 00:12:59.180
&gt;&gt; Will Sentance: Excellent, there it is,

216
00:12:59.180 --> 00:13:04.430
which is going to trigger this little guy
here, display function, it's ready to go.

217
00:13:05.540 --> 00:13:08.940
So at this point, while we're inside
our block for [INAUDIBLE] call stack,

218
00:13:08.940 --> 00:13:13.440
we have ready to go printHello,
we've known that for a long time.

219
00:13:13.440 --> 00:13:18.330
We now have ready to go, display, so

220
00:13:18.330 --> 00:13:21.200
we don't call display,
where do we think we parse display, Ben?

221
00:13:26.122 --> 00:13:28.402
&gt;&gt; Will Sentance: Michelle,
we're not gonna call display immediately,

222
00:13:28.402 --> 00:13:29.310
where's it gonna go?

223
00:13:29.310 --> 00:13:30.340
&gt;&gt; Michelle: You can stick
it on the callback queue.

224
00:13:30.340 --> 00:13:31.639
&gt;&gt; Will Sentance: We're gonna
put it on the callback queue.

225
00:13:34.471 --> 00:13:35.226
&gt;&gt; Will Sentance: Or are we?

226
00:13:35.226 --> 00:13:38.540
Yeah, there it is, for now, they're at
good display on the callback queue.

227
00:13:38.540 --> 00:13:42.737
Sounds good to me, and it gets added
there at about 290 milliseconds.

228
00:13:45.837 --> 00:13:48.599
&gt;&gt; Will Sentance: The people who
stop watching the video right now,

229
00:13:48.599 --> 00:13:51.886
they're getting falsehoods but
there we go, there it is,

230
00:13:51.886 --> 00:13:54.862
nicely on the callback queue,
hurray, excellent!

231
00:13:54.862 --> 00:14:00.049
Block for one second finishes running,
so for 300 milliseconds

232
00:14:00.049 --> 00:14:04.980
finishes running we come back
out of it at 303 milliseconds.

233
00:14:04.980 --> 00:14:09.565
And we have teed up to go,
display, actually I can't do this,

234
00:14:09.565 --> 00:14:15.300
we have teed up to go, display,
we have teed up to go, printHello.

235
00:14:15.300 --> 00:14:18.075
We have teed up to go, what's our
next synchronous line of code, Brian?

236
00:14:18.075 --> 00:14:20.960
&gt;&gt; Brian: meFirst-
&gt;&gt; Will Sentance: Which one's gonna go

237
00:14:20.960 --> 00:14:21.890
first?

238
00:14:21.890 --> 00:14:23.860
Okay, I think the first one we know,
which one's gonna go first,

239
00:14:23.860 --> 00:14:24.950
which one's gonna go first?

240
00:14:24.950 --> 00:14:25.450
&gt;&gt; multiple: meFirst.

241
00:14:25.450 --> 00:14:27.164
&gt;&gt; Will Sentance: meFirst,
yeah, we got that bit,

242
00:14:27.164 --> 00:14:31.990
synchronous code is the monarch,
no, that's not,

243
00:14:31.990 --> 00:14:37.190
that doesn't make any sense, I don't like
that, I don't like that sort of stuff.

244
00:14:37.190 --> 00:14:38.423
Someone asked me during
a talk on Sunday or

245
00:14:38.423 --> 00:14:40.052
Saturday why you don't talk
about the royal wedding?

246
00:14:40.052 --> 00:14:44.347
&gt;&gt; multiple: [LAUGH]
&gt;&gt; Will Sentance: I left this country for

247
00:14:44.347 --> 00:14:46.789
reason,
&gt;&gt; multiple: [LAUGH]

248
00:14:49.621 --> 00:14:50.915
&gt;&gt; Will Sentance: Although I did go and

249
00:14:50.915 --> 00:14:54.648
watch the pictures,
I'd sneakily watch the pictures and

250
00:14:54.648 --> 00:14:58.545
pretend it didn't affect my
sense of views in meritocracy.

251
00:14:58.545 --> 00:15:04.023
All right, so me first at about

252
00:15:04.023 --> 00:15:12.090
303 milliseconds, we get me first.

253
00:15:12.090 --> 00:15:16.972
So let's just first note, by the way,
that we deferred printHello at one

254
00:15:16.972 --> 00:15:23.250
millisecond and for 0 milliseconds, and
it still has not been allowed to run.

255
00:15:23.250 --> 00:15:27.418
We then deferred,
&gt;&gt; Will Sentance: Display function to be

256
00:15:27.418 --> 00:15:30.330
run, triggered to be run,
what I did came back.

257
00:15:30.330 --> 00:15:31.950
And even though it's been ready to go for

258
00:15:31.950 --> 00:15:35.230
ten milliseconds at this point,
it's still not allowed to run.

259
00:15:35.230 --> 00:15:37.940
When we exit block for 30 milliseconds,
we still hit the console log first,

260
00:15:37.940 --> 00:15:41.390
the synchronous code first,
we knew that there.

261
00:15:41.390 --> 00:15:46.420
Now is where it gets really interesting,
now is where it gets really interesting,

262
00:15:46.420 --> 00:15:51.010
we have two event loop,
at least now it's happy.

263
00:15:51.010 --> 00:15:52.650
All the global code has finished running,

264
00:15:52.650 --> 00:15:54.889
now it's ready to start
running stuff in the queue.

265
00:15:59.250 --> 00:16:02.274
&gt;&gt; Will Sentance: We have printHello
ready to go, it's been in the queue for

266
00:16:02.274 --> 00:16:04.830
a long time And
we have display ready to go.

267
00:16:06.310 --> 00:16:08.406
It just end of the ten minutes ago.

268
00:16:08.406 --> 00:16:09.093
It's good to go now.

269
00:16:09.093 --> 00:16:11.280
It took me a little bit of time to
go back, but now it's good to go.

270
00:16:12.810 --> 00:16:15.130
Which one is gonna go first?

271
00:16:15.130 --> 00:16:17.410
Well, we've already said,
it's in the queue.

272
00:16:17.410 --> 00:16:18.680
How do queues work?

273
00:16:18.680 --> 00:16:19.409
Alec?

274
00:16:19.409 --> 00:16:20.370
&gt;&gt; Alex: Yeah, you gonna buy stocks.

275
00:16:20.370 --> 00:16:22.395
&gt;&gt; Will Sentance: Yeah, you gotta add
display in the back of it, right?

276
00:16:22.395 --> 00:16:24.086
No [LAUGH] not stocks [LAUGH]

277
00:16:24.086 --> 00:16:25.159
&gt;&gt; multiple: [LAUGH]
&gt;&gt; Will Sentance: Very good, very funny.

278
00:16:25.159 --> 00:16:27.088
&gt;&gt; multiple: [LAUGH]
&gt;&gt; Will Sentance: Very good.

279
00:16:27.088 --> 00:16:30.070
It's gonna be added to the end of
the queue, so it would be the last thing.

280
00:16:30.070 --> 00:16:33.669
It's the last thing added
to the last thing out.

281
00:16:33.669 --> 00:16:34.670
&gt;&gt; Alex: First in, first out.

282
00:16:34.670 --> 00:16:36.840
&gt;&gt; Will Sentance: First in, first out.

283
00:16:36.840 --> 00:16:39.579
So, who thinks next line is print hello?

284
00:16:39.579 --> 00:16:41.340
Raise your hand high if it's print hello.

285
00:16:41.340 --> 00:16:43.155
I know I'm doing my,
is not the right answer voice.

286
00:16:43.155 --> 00:16:43.930
&gt;&gt; multiple: [LAUGH]
&gt;&gt; Will Sentance: But come on,

287
00:16:44.960 --> 00:16:46.260
give me another explanation why.

288
00:16:50.000 --> 00:16:52.560
But you're right, well no the three of
you raised your hands are wrong but

289
00:16:52.560 --> 00:16:56.775
thank you, because everyone thinks of
that but they know they heard the voice.

290
00:16:56.775 --> 00:16:57.960
&gt;&gt; multiple: [LAUGH]
&gt;&gt; Will Sentance: It's the wrong

291
00:16:57.960 --> 00:16:59.090
answer voice.

292
00:16:59.090 --> 00:17:02.420
And so they refused to,
they didn't wanna get the wrong answer.

293
00:17:02.420 --> 00:17:03.580
Embrace it.

294
00:17:03.580 --> 00:17:09.070
Okay, turns out JavaScript
has an additional queue.

295
00:17:09.070 --> 00:17:13.525
It has an additional queue.

296
00:17:13.525 --> 00:17:15.154
People don't talk about this queue.

297
00:17:15.154 --> 00:17:16.713
People aren't talking about this queue.

298
00:17:16.713 --> 00:17:17.820
People should be talking about this queue.

299
00:17:17.820 --> 00:17:19.600
This queue is an additional queue.

300
00:17:19.600 --> 00:17:23.270
It's called, the micro.

301
00:17:23.270 --> 00:17:29.420
Task and the actual JavaScript spec
itself calls it the job queue.

302
00:17:29.420 --> 00:17:33.830
The microtask queue where any functions

303
00:17:33.830 --> 00:17:37.050
that weren't deferred using
these traditional model,

304
00:17:37.050 --> 00:17:42.610
where I set up a web browser task and
use web browser feature timer for

305
00:17:42.610 --> 00:17:47.730
example, and don't return anything into
JavaScript no object that function

306
00:17:47.730 --> 00:17:51.160
gets treated directly from the web
browser feature completion.

307
00:17:51.160 --> 00:17:52.760
It gets pushed to the callback queue.

308
00:17:54.030 --> 00:17:58.900
But, I now have a new way of
teeing up background work.

309
00:17:59.930 --> 00:18:05.829
These new types of web browser
feature APIs or facade functions.

310
00:18:06.840 --> 00:18:08.310
Well, it's like fetch.

311
00:18:08.310 --> 00:18:12.700
They return out an object,
a promise object, into JavaScript.

312
00:18:12.700 --> 00:18:18.120
Their value gets updated from
the background web browser feature.

313
00:18:18.120 --> 00:18:22.250
And it triggers in JavaScript
the function display.

314
00:18:22.250 --> 00:18:26.260
And that triggered function is not
ending up on the callback queue.

315
00:18:26.260 --> 00:18:32.140
It's getting passed to
the micro task queue,

316
00:18:32.140 --> 00:18:36.840
display passed to the micro task queue.

317
00:18:36.840 --> 00:18:39.550
At yeah, 290 milliseconds, fine.

318
00:18:40.830 --> 00:18:49.350
Much later, but the event loop prioritizes
tasks in the micro task queue.

319
00:18:49.350 --> 00:18:53.500
And so what happens here, yes, now we
finished our console log, the event loop

320
00:18:53.500 --> 00:18:57.340
goes hooray, the call stack's empty,
global code execution is finished,

321
00:18:57.340 --> 00:19:02.930
I'm gonna go and check not my call back
queue first, but my micro task queue.

322
00:19:02.930 --> 00:19:04.130
What do I find there?

323
00:19:04.130 --> 00:19:06.250
The recently added display function.

324
00:19:06.250 --> 00:19:11.580
What I do with it,
I put it on the top of my codes tag

325
00:19:11.580 --> 00:19:16.970
with it all human being the value
that triggered it to run, and so

326
00:19:16.970 --> 00:19:22.390
into my display function goes my argument,
high.

327
00:19:22.390 --> 00:19:27.230
And so, add about 304 milliseconds.

328
00:19:27.230 --> 00:19:30.230
I'm gonna finally call, or not finally.

329
00:19:30.230 --> 00:19:36.030
Fairly, quickly call display with high and

330
00:19:36.030 --> 00:19:38.590
that's gonna do what in my console,
Michelle?

331
00:19:38.590 --> 00:19:41.840
What display input gets what?

332
00:19:44.000 --> 00:19:44.640
So, display is parameter.

333
00:19:44.640 --> 00:19:47.283
&gt;&gt; Michelle: Yeah, it takes in the data,
but [CROSSTALK] Future, data, value.

334
00:19:47.283 --> 00:19:49.194
&gt;&gt; Will Sentance: And
that's gonna then be?

335
00:19:49.194 --> 00:19:50.290
Which is?
&gt;&gt; Michelle: Which is how high.

336
00:19:50.290 --> 00:19:52.030
&gt;&gt; Will Sentance: High.

337
00:19:52.030 --> 00:19:54.050
&gt;&gt; Michelle: And
then it console logs that out.

338
00:19:54.050 --> 00:19:57.680
&gt;&gt; Will Sentance: Be really clear,
it takes in the futureData.value, which is

339
00:19:57.680 --> 00:20:01.360
high, because that futureData.value
is triggered by this background work.

340
00:20:01.360 --> 00:20:03.620
Which then triggered
the display function to run,

341
00:20:03.620 --> 00:20:06.320
with that value as its argument,
very good.

342
00:20:06.320 --> 00:20:10.052
And then there it is at 304 milliseconds.

343
00:20:10.052 --> 00:20:14.270
We are gonna console log pi.

344
00:20:15.420 --> 00:20:18.640
Then I forgot to say
we therefore DQ'd this

345
00:20:18.640 --> 00:20:21.300
task when we took it to the call stack.

346
00:20:21.300 --> 00:20:22.979
We've now finished it on the call stack.

347
00:20:24.410 --> 00:20:27.490
The event loop's doing spinning, it's
saying a cause empty, it's empty again.

348
00:20:28.910 --> 00:20:30.350
Microsoft's queue, it's empty.

349
00:20:32.110 --> 00:20:35.280
Call back queue, got something in it.

350
00:20:35.280 --> 00:20:37.225
Finally, our poor little print hello.

351
00:20:37.225 --> 00:20:40.060
&gt;&gt; multiple: [LAUGH]
&gt;&gt; Will Sentance: That's been delayed for

352
00:20:40.060 --> 00:20:43.890
so long, this little guy's been
sitting there since one millisecond.

353
00:20:43.890 --> 00:20:47.588
Finally, poor [INAUDIBLE] At 305

354
00:20:47.588 --> 00:20:52.830
milliseconds is allowed
onto the call stack.

355
00:20:52.830 --> 00:20:57.170
And three it is, print hello.

356
00:20:57.170 --> 00:21:01.372
Out of the call stack at 305 milliseconds,

357
00:21:01.372 --> 00:21:04.040
we get,
&gt;&gt; Will Sentance: Hello.

358
00:21:05.420 --> 00:21:07.970
Despite it being the first
thing to be teed up,

359
00:21:07.970 --> 00:21:10.420
the first thing to be
kicked off to be deferred.

360
00:21:10.420 --> 00:21:14.290
Before we deferred our
display functionality.

361
00:21:14.290 --> 00:21:16.360
We could display our
tweet when it came back.

362
00:21:16.360 --> 00:21:22.013
Before we [INAUDIBLE] First, it would
not allow back onto the call stack.

363
00:21:24.133 --> 00:21:25.950
&gt;&gt; Will Sentance: DQ from
the callback queue now.

364
00:21:25.950 --> 00:21:27.370
Wasn't allowed back onto the call stack or

365
00:21:27.370 --> 00:21:31.840
allowed into the call stack until all
synchronous code is finished running,

366
00:21:32.910 --> 00:21:37.400
and until it's cleared our
microtask queue as well.

367
00:21:38.950 --> 00:21:44.115
This folk is all of asynchronous
JavaScript, every last piece.

