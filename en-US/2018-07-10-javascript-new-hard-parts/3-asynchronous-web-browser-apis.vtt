WEBVTT

1
00:00:00.040 --> 00:00:05.040
&gt;&gt; Will Sentance: So we have to
introduce a whole new world of features

2
00:00:05.040 --> 00:00:06.200
of JavaScript.

3
00:00:06.200 --> 00:00:12.270
These are features that happen outside
of our JavaScript engine itself.

4
00:00:12.270 --> 00:00:14.900
These are features of the web browser.

5
00:00:14.900 --> 00:00:17.570
JavaScript's a little feature
of the broader web browser.

6
00:00:17.570 --> 00:00:19.850
Web browser is full of features.

7
00:00:19.850 --> 00:00:22.810
The dorm, that's the model of our

8
00:00:22.810 --> 00:00:27.290
webpage that JavaScript can interact
with to change stuff on the webpage.

9
00:00:27.290 --> 00:00:30.120
It's a sort of representation
of the stuff on our page

10
00:00:30.120 --> 00:00:33.180
that JavaScript can write code to
interact with that changes our webpage.

11
00:00:33.180 --> 00:00:35.020
That's a feature outside of JavaScript.

12
00:00:35.020 --> 00:00:40.220
A console is another web browser feature
that's a feature outside of JavaScript.

13
00:00:40.220 --> 00:00:47.280
Our local storage,
that database thing in the browser.

14
00:00:47.280 --> 00:00:51.860
Our ability to speak to the Internet,
the XHR ability,

15
00:00:51.860 --> 00:00:54.870
all of these are not JavaScript features.

16
00:00:54.870 --> 00:00:57.150
They're found on MDN.

17
00:00:58.260 --> 00:01:04.450
As a list of web browser features known or
be it, in JavaScript as web browser API's.

18
00:01:04.450 --> 00:01:09.270
The reason they are know as that in
JavaScript is that we use labels for

19
00:01:09.270 --> 00:01:12.890
those features from within
JavaScript to stimulate,

20
00:01:12.890 --> 00:01:15.480
to get started, a web browser feature.

21
00:01:15.480 --> 00:01:17.490
And any feature that's
not in my own runtime,

22
00:01:17.490 --> 00:01:20.840
in my own engine is
something interface with.

23
00:01:20.840 --> 00:01:25.350
So, we call it an AP Interface an API,
so we interact outside of

24
00:01:25.350 --> 00:01:30.450
JavaScript.
&gt;&gt; Will Sentance: We gotta introduce those

25
00:01:30.450 --> 00:01:35.600
to have any chance of solving
this three-way conundrum.

26
00:01:35.600 --> 00:01:40.080
The only chance we have of solving it
is introduced web browser features or

27
00:01:40.080 --> 00:01:44.420
in Node, they're known as background
threads or APIs in Node as well.

28
00:01:44.420 --> 00:01:45.290
So here we go people.

29
00:01:45.290 --> 00:01:49.870
Line by line,
we're going to walk through this.

30
00:01:49.870 --> 00:01:52.500
And this solution I'm going to tell you,

31
00:01:52.500 --> 00:01:55.910
everything else is just
an augmentation of this solution.

32
00:01:55.910 --> 00:01:57.690
I like this solution.

33
00:01:59.080 --> 00:02:05.540
But JavaScript designers recognize
some failings of this solution.

34
00:02:05.540 --> 00:02:09.280
And solution three is gonna
be our brand new solution.

35
00:02:09.280 --> 00:02:11.860
And that is the most popular.

36
00:02:11.860 --> 00:02:16.448
But I still think our final solution,
we're gonna see the very end of

37
00:02:16.448 --> 00:02:21.050
the day is the solution that finally
is particularly nice, I think.

38
00:02:21.050 --> 00:02:25.624
And all of these solutions work including
solution two if you understand how they're

39
00:02:25.624 --> 00:02:27.360
working under the hood.

40
00:02:27.360 --> 00:02:27.860
So here we go.

41
00:02:29.380 --> 00:02:36.330
Line one Michelle, what are we doing?
&gt;&gt; Michelle: We're declaring

42
00:02:36.330 --> 00:02:39.060
a function and memory called print hello.
&gt;&gt; Will Sentance: Excellent.

43
00:02:39.060 --> 00:02:39.920
Thank you, Michelle.

44
00:02:39.920 --> 00:02:42.816
Can you tell it a little bit slower
while I continue to wipe down my white

45
00:02:42.816 --> 00:02:45.640
board?
&gt;&gt; Michelle: We're defining a function in

46
00:02:45.640 --> 00:02:49.520
memory called print hello.
&gt;&gt; Will Sentance: Print hello.

47
00:02:49.520 --> 00:02:53.870
I'm trying to keep my handwriting tidy for
posterity.

48
00:02:53.870 --> 00:02:54.370
There we go.

49
00:02:56.340 --> 00:02:58.320
That's better, good.

50
00:02:58.320 --> 00:02:59.450
All right, excellent.

51
00:02:59.450 --> 00:03:01.490
Thank you Michelle, excellent.

52
00:03:01.490 --> 00:03:03.920
Next line, talk to me in general terms.

53
00:03:03.920 --> 00:03:06.550
Victor, what are we doing in my next line?

54
00:03:06.550 --> 00:03:09.690
What are we calling?
&gt;&gt; Victor: I

55
00:03:09.690 --> 00:03:13.250
think we're calling the-
&gt;&gt; Will Sentance: Don't try and

56
00:03:13.250 --> 00:03:14.710
be smart about it.
&gt;&gt; Victor: Okay,

57
00:03:14.710 --> 00:03:17.349
we're talking to the global
execution context.

58
00:03:18.510 --> 00:03:19.630
To use a-
&gt;&gt; Will Sentance: Okay,

59
00:03:19.630 --> 00:03:20.970
stop trying to be smart.

60
00:03:20.970 --> 00:03:22.920
Someone else speak in more abstract terms.

61
00:03:22.920 --> 00:03:23.560
Very good, Victor.

62
00:03:23.560 --> 00:03:24.640
We're going to come to it in a sec.

63
00:03:24.640 --> 00:03:27.700
I just want to first, Mike.
&gt;&gt; Mike: I think we're

64
00:03:27.700 --> 00:03:30.630
actually trying to print our function.
&gt;&gt; Will Sentance: Okay, so

65
00:03:30.630 --> 00:03:32.240
we just need to be more abstract.

66
00:03:32.240 --> 00:03:34.120
We're calling set timer
with what arguments,

67
00:03:34.120 --> 00:03:35.490
Ben?
&gt;&gt; Ben: Print hello.

68
00:03:35.490 --> 00:03:37.220
&gt;&gt; Will Sentance: Yeah, the entire print

69
00:03:37.220 --> 00:03:39.350
hello function definition.

70
00:03:39.350 --> 00:03:40.560
Be really clear.

71
00:03:40.560 --> 00:03:45.090
When I call a function, what symbols
tell me I'm calling a function event?

72
00:03:45.090 --> 00:03:45.770
&gt;&gt; Ben: The parentheses.

73
00:03:45.770 --> 00:03:47.150
&gt;&gt; Will Sentance: Parens, parens, parens,

74
00:03:47.150 --> 00:03:47.880
parens.

75
00:03:47.880 --> 00:03:49.460
I'm calling set timeout.

76
00:03:49.460 --> 00:03:51.960
Do I see any parens on the end of hello?

77
00:03:51.960 --> 00:03:52.540
Definitely not,

78
00:03:52.540 --> 00:03:57.130
I'm instead passing the entire
function definition into set timeout.

79
00:03:57.130 --> 00:03:58.690
Who knows what that means?
&gt;&gt; Multiple: [LAUGH]

80
00:03:58.690 --> 00:04:00.245
&gt;&gt; Will Sentance: And the second argument

81
00:04:00.245 --> 00:04:04.910
1,000 which represents
the number of milliseconds

82
00:04:07.410 --> 00:04:11.050
after which I want this print hello
function to be called, to be invoked.

83
00:04:11.050 --> 00:04:14.730
So it's gonna be auto-invoked,
kind of beyond my control probably, right?

84
00:04:14.730 --> 00:04:20.060
Somewhere inside Set time out, wrong,
but let's imagine that's the case.

85
00:04:20.060 --> 00:04:24.710
Let's imagine that is the case that
somehow, when I put parens up, function

86
00:04:24.710 --> 00:04:29.470
call, Brian, what do I create, a new?
&gt;&gt; Brian: Execution context.

87
00:04:29.470 --> 00:04:30.530
&gt;&gt; Will Sentance: Execution context,

88
00:04:30.530 --> 00:04:31.590
everything suggests I would,

89
00:04:31.590 --> 00:04:33.880
let's just see what would
happen if that were the case.

90
00:04:33.880 --> 00:04:38.650
New execution context,
there it is Into it I go

91
00:04:40.000 --> 00:04:42.470
and then plus 1000 milliseconds.

92
00:04:42.470 --> 00:04:45.350
It's gonna stay on the cool stack for
1000 milliseconds.

93
00:04:45.350 --> 00:04:48.370
We're gonna be inside this and
you've got execution context.

94
00:04:48.370 --> 00:04:53.140
At which time, I'm then going to, well,
JavaScript set time out is gonna call for

95
00:04:53.140 --> 00:04:55.848
me, print hello and
we're gonna come back out.

96
00:04:55.848 --> 00:05:00.582
At about 1,001 milliseconds and
hit what line,

97
00:05:00.582 --> 00:05:04.680
Michelle?
&gt;&gt; Michelle: The set

98
00:05:04.680 --> 00:05:05.740
time out.
&gt;&gt; Will Sentance: Nichole.

99
00:05:05.740 --> 00:05:06.510
&gt;&gt; Michelle: The console log.

100
00:05:06.510 --> 00:05:07.650
&gt;&gt; Will Sentance: The console log,

101
00:05:07.650 --> 00:05:08.466
me first.

102
00:05:08.466 --> 00:05:13.450
Okay, 1,001 milliseconds later.

103
00:05:13.450 --> 00:05:16.690
I've continued my JavaScript synchronous
thread, a thousand one [INAUDIBLE].

104
00:05:16.690 --> 00:05:17.850
Does this seem likely,

105
00:05:17.850 --> 00:05:20.050
as how to set timeout works?
&gt;&gt; Michelle: No.

106
00:05:20.050 --> 00:05:20.880
&gt;&gt; Will Sentance: This would be

107
00:05:20.880 --> 00:05:22.520
disastrous.

108
00:05:22.520 --> 00:05:24.920
This is absolutely not
what set timeout's doing.

109
00:05:24.920 --> 00:05:28.320
Set timeout, in fact, does nothing.

110
00:05:28.320 --> 00:05:29.950
Here's one little thing in Javascript, but

111
00:05:29.950 --> 00:05:35.360
in fact, does nothing of any
interest in JavaScript at all.

112
00:05:35.360 --> 00:05:39.500
It is instead a facade function.

113
00:05:39.500 --> 00:05:47.630
A facade for functionality
happening outside of JavaScript.

114
00:05:47.630 --> 00:05:48.710
Where?

115
00:05:48.710 --> 00:05:50.440
In what place?
&gt;&gt; Multiple: Browser.

116
00:05:50.440 --> 00:05:52.200
&gt;&gt; Will Sentance: The web browser.

117
00:05:52.200 --> 00:05:56.251
JavaScript has no timer.
&gt;&gt; Will Sentance: JavaScript

118
00:05:56.251 --> 00:06:01.610
is not the timer that set timeout's using.

119
00:06:01.610 --> 00:06:06.400
We've got to introduce a whole new
section to our model app platform, for

120
00:06:06.400 --> 00:06:08.320
understanding JavaScript's runtime.

121
00:06:08.320 --> 00:06:12.550
It's actually not even in JavaScript,
&gt;&gt; Will Sentance: The web browser,

122
00:06:12.550 --> 00:06:20.103
let's try and
keep this tidy the Web Browser features,

123
00:06:20.103 --> 00:06:26.540
there it is, my proudest moment,
there it is.

124
00:06:30.130 --> 00:06:33.400
&gt;&gt; Will Sentance: Yeah, Ben look up.

125
00:06:33.400 --> 00:06:34.520
That's a beautiful illustration.
&gt;&gt; Multiple: [LAUGH]

126
00:06:34.520 --> 00:06:35.370
&gt;&gt; Will Sentance: It's not as good as I

127
00:06:35.370 --> 00:06:36.220
thought it was actually.

128
00:06:36.220 --> 00:06:37.490
I'm disappointed with that.

129
00:06:37.490 --> 00:06:38.070
Let me try that again.

130
00:06:38.070 --> 00:06:41.400
I've been practicing that for so long.

131
00:06:41.400 --> 00:06:42.880
The only thing I prepared.

132
00:06:44.100 --> 00:06:46.140
There we go.

133
00:06:46.140 --> 00:06:47.545
Too small this time.

134
00:06:47.545 --> 00:06:50.830
[LAUGH] I got it too small this time.

135
00:06:50.830 --> 00:06:53.630
Now let's look at.

136
00:06:53.630 --> 00:06:55.300
Okay, here we go straight.

137
00:06:55.300 --> 00:06:57.250
And you've got pho for this time.
&gt;&gt; Ben: I

138
00:06:57.250 --> 00:07:00.050
like the Firefox.
&gt;&gt; Will Sentance: Thanks man,

139
00:07:00.050 --> 00:07:00.933
nice.
&gt;&gt; Multiple: [LAUGH]

140
00:07:00.933 --> 00:07:01.810
&gt;&gt; Will Sentance: I don't even know what

141
00:07:01.810 --> 00:07:02.450
that looks like.

142
00:07:02.450 --> 00:07:04.180
That's got too many bits to it.

143
00:07:04.180 --> 00:07:06.540
And also I'm anti open source.

144
00:07:06.540 --> 00:07:07.130
No, no.
&gt;&gt; Multiple: [LAUGH]

145
00:07:07.130 --> 00:07:08.670
&gt;&gt; Will Sentance: That's a joke.

146
00:07:08.670 --> 00:07:09.290
It's a joke.

147
00:07:10.340 --> 00:07:12.620
That's a joke, big fan.

148
00:07:12.620 --> 00:07:14.010
Big fan of Firefox.

149
00:07:14.010 --> 00:07:16.670
Ever since 2010, big fan.

150
00:07:17.720 --> 00:07:20.820
All right, good, web browser features.

151
00:07:20.820 --> 00:07:24.300
Set timer is gonna do
nothing in JavaScript.

152
00:07:24.300 --> 00:07:29.441
Instead, it's gonna spin up a web

153
00:07:29.441 --> 00:07:34.590
browser feature, but which one?

154
00:07:37.070 --> 00:07:41.130
Does anyone know what the features called?
&gt;&gt; Michelle: A work

155
00:07:41.130 --> 00:07:41.880
group?
&gt;&gt; Ben: Timer.

156
00:07:41.880 --> 00:07:43.270
&gt;&gt; Will Sentance: Timer, brilliant Ben.

157
00:07:44.290 --> 00:07:45.110
You're gifted.

158
00:07:45.110 --> 00:07:46.380
There it is, timer.

159
00:07:48.300 --> 00:07:52.250
And we're going to take the information we
need, which is a function that we want to

160
00:07:52.250 --> 00:07:56.330
have called, the reference to the position
in JavaScript's memory of the function, we

161
00:07:56.330 --> 00:08:01.290
want to have called then and the important
property being the thousand milliseconds.

162
00:08:01.290 --> 00:08:06.290
And down in the web browser, down in
the web browser, we are going to spin up

163
00:08:06.290 --> 00:08:11.830
our timer with 1,000
milliseconds as our property.

164
00:08:11.830 --> 00:08:13.730
And then we're gonna
have a kind of condition.

165
00:08:13.730 --> 00:08:15.430
Is it complete?

166
00:08:15.430 --> 00:08:17.420
Ben, is it complete yet?
&gt;&gt; Ben: No.

167
00:08:17.420 --> 00:08:18.440
&gt;&gt; Will Sentance: Definitely not, exactly.

168
00:08:18.440 --> 00:08:22.020
At 1 millisecond,
it is definitely not complete.

169
00:08:22.020 --> 00:08:24.830
And then on completion, Ben,

170
00:08:24.830 --> 00:08:27.775
what are we gonig to want to invoke?
&gt;&gt; Ben: Print

171
00:08:27.775 --> 00:08:30.980
hello.
&gt;&gt; Will Sentance: Print hello exactly on

172
00:08:30.980 --> 00:08:36.680
completion, on completion we are going to

173
00:08:36.680 --> 00:08:42.455
want invoke
&gt;&gt; Will Sentance: We

174
00:08:42.455 --> 00:08:46.065
are gonna want to invoke
we're gonna wanna run print.

175
00:08:46.065 --> 00:08:50.065
Hello, the function.

176
00:08:50.065 --> 00:08:55.290
All right, set timeout's work is now done.

177
00:08:55.290 --> 00:09:01.930
It's only work of interest was the work
it does outside of JavaScript.

178
00:09:01.930 --> 00:09:08.738
Technically in JavaScript it returns
a value representing a timer, okay, fine.

179
00:09:08.738 --> 00:09:12.560
But it has nothing of any
interest in JavaScript.

180
00:09:12.560 --> 00:09:16.330
Its only job is in the Web
browser spin up this work.

181
00:09:17.870 --> 00:09:20.930
Meaning, we can move on from this line,

182
00:09:20.930 --> 00:09:26.380
this line until we finished its work,
in JavaScript, well, it's nothing.

183
00:09:26.380 --> 00:09:28.320
So we move straight on to Alec.

184
00:09:28.320 --> 00:09:33.480
What is our next line of code at about two
milliseconds that the JavaScript engine,

185
00:09:33.480 --> 00:09:34.800
we've just onset time out,

186
00:09:34.800 --> 00:09:37.445
the JavaScript engine is going to execute?
&gt;&gt; Alec: It's gonna log me first to

187
00:09:37.445 --> 00:09:40.004
the console.
&gt;&gt; Will Sentance: Exactly,

188
00:09:40.004 --> 00:09:45.060
log me first, beautiful.

189
00:09:45.060 --> 00:09:45.780
Me first is there.

190
00:09:45.780 --> 00:09:52.070
And look, people, we're very,
very close to being happy.

191
00:09:52.070 --> 00:09:54.904
We've spun up, we got started on
a task that takes a long time,

192
00:09:54.904 --> 00:09:57.000
here albeit just a timer
with functionality.

193
00:09:57.000 --> 00:10:00.559
You want to call it the end of it,
not the most interesting task but

194
00:10:00.559 --> 00:10:04.080
it's a task takes a long time and
we've continued straight on.

195
00:10:05.520 --> 00:10:10.170
There you go, accelerated, that's not
a good new additional piece to my diagram.

196
00:10:10.170 --> 00:10:12.640
We continued straight on

197
00:10:12.640 --> 00:10:17.490
in our synchronous job at
the execution to add console log.

198
00:10:17.490 --> 00:10:19.020
Look at that.

199
00:10:19.020 --> 00:10:21.240
This is very, very nice.

200
00:10:21.240 --> 00:10:22.140
This is the first part.

201
00:10:22.140 --> 00:10:26.230
But now we're going to encounter
the issue, it's basically going to be

202
00:10:26.230 --> 00:10:30.980
our issue ongoing, which is,
now we have functionality.

203
00:10:30.980 --> 00:10:34.930
That's gonna hopefully come back in and
be run, how?

204
00:10:34.930 --> 00:10:37.580
JavaScript sync, JavaScript synchronous
code, like the regular code,

205
00:10:37.580 --> 00:10:40.270
the stuff that's top to bottom,
line by line, is done now.

206
00:10:42.210 --> 00:10:46.120
But and since I call stack,
I should highlight call stack up, sorry.

207
00:10:46.120 --> 00:10:47.260
Just make sure our call stacks up.

208
00:10:49.040 --> 00:10:51.220
JavaScript synchronous code is done now.

209
00:10:52.500 --> 00:10:53.660
There it is.

210
00:10:53.660 --> 00:10:57.590
But in the background,
a world of stuff is happening.

211
00:10:57.590 --> 00:11:00.960
Our little timer,
it's clicking by, as it goes.

212
00:11:00.960 --> 00:11:06.400
And at about 1001 milliseconds,
what happens?

213
00:11:07.700 --> 00:11:10.990
Brian.
&gt;&gt; Brian: It executes the print

214
00:11:10.990 --> 00:11:11.530
hello.
&gt;&gt; Will Sentance: Right,

215
00:11:11.530 --> 00:11:13.910
is it complete at 1000 milliseconds?

216
00:11:13.910 --> 00:11:15.540
Is our timer complete after 1000

217
00:11:15.540 --> 00:11:16.490
milliseconds?
&gt;&gt; Brian: Yes.

218
00:11:16.490 --> 00:11:18.300
&gt;&gt; Will Sentance: It's complete and so

219
00:11:18.300 --> 00:11:20.280
we're able to call print hello.

220
00:11:20.280 --> 00:11:22.370
What does it mean in terms of my callsat,
Brian,

221
00:11:22.370 --> 00:11:27.320
to say I execute call print hello?
&gt;&gt; Brian: It adds it to a queue?

222
00:11:27.320 --> 00:11:28.240
&gt;&gt; Will Sentance: We'll come

223
00:11:28.240 --> 00:11:29.460
to that in one second.

224
00:11:29.460 --> 00:11:31.940
What does it mean, it tells my call stack?
&gt;&gt; Brian: It

225
00:11:31.940 --> 00:11:34.270
adds print hello to the call stack.
&gt;&gt; Will Sentance: The call stack.

226
00:11:34.270 --> 00:11:35.910
Excellent, Brian, thank you man.

227
00:11:35.910 --> 00:11:37.080
It adds it to the call stack.

228
00:11:37.080 --> 00:11:40.360
That is to say, the thing that was

229
00:11:40.360 --> 00:11:44.168
happening outside of the web browser
is gonna send a message to say.

230
00:11:44.168 --> 00:11:46.690
Print hello function,
get it back on the call stack.

231
00:11:46.690 --> 00:11:52.610
It's ready to be executed back in
JavaScript at about 1,001 milliseconds.

232
00:11:52.610 --> 00:11:55.360
So there it is, look at that.

233
00:11:55.360 --> 00:12:00.815
At 1,001 milliseconds,
we get our JavaScript Code.

234
00:12:00.815 --> 00:12:05.055
Our JavaScript function,
the one we deferred, is allowed back in.

235
00:12:05.055 --> 00:12:10.235
It calls print hello,
which console logs hello.

236
00:12:10.235 --> 00:12:13.875
And so this is a beautiful outcome.

237
00:12:13.875 --> 00:12:14.925
This is it.

238
00:12:14.925 --> 00:12:18.905
Our three goals were do
tasks that take a long time

239
00:12:18.905 --> 00:12:21.175
like deferring a function with a timer.

240
00:12:22.180 --> 00:12:25.540
Continue running our Java Script
code in the meantime.

241
00:12:25.540 --> 00:12:28.170
Oops, no, wrong way.

242
00:12:28.170 --> 00:12:30.100
Continue running our JavaScript
code in the meantime.

243
00:12:30.100 --> 00:12:33.400
Console code, we first continued,
immediately after.

244
00:12:33.400 --> 00:12:36.120
We set up a task, set time out,
it was going to take a long time.

245
00:12:36.120 --> 00:12:41.490
We set up long term tasks and we continue
the hell straight on 2 milliseconds later

246
00:12:41.490 --> 00:12:48.760
and when our slow task, that is this
countdown on the timer, completes.

247
00:12:48.760 --> 00:12:53.040
Be able to run functionality knowing
the task is done and data is ready.

248
00:12:53.040 --> 00:12:54.950
No data to be ready here.

249
00:12:54.950 --> 00:12:57.380
But we'll see in a moment
what that looks like.

250
00:12:58.810 --> 00:13:01.690
All right, thumbs on this concept.

251
00:13:01.690 --> 00:13:06.050
I want to add,
there are a whole bunch of edge cases.

252
00:13:06.050 --> 00:13:09.160
Things where you go, but
what about if that happened?

253
00:13:09.160 --> 00:13:11.210
But what about if that happened?

254
00:13:11.210 --> 00:13:14.200
I wanna see some medium thumbs on
clarifications but what if that happened?

255
00:13:14.200 --> 00:13:17.947
We're gonna see in a moment
when you interact with a world

256
00:13:17.947 --> 00:13:21.550
outside of this pure
synchronous JavaScript engine.

257
00:13:21.550 --> 00:13:25.825
You're going to need to have
some really strict rules for

258
00:13:25.825 --> 00:13:31.360
when our JavaScript engine allows
this differed functionality back in.

