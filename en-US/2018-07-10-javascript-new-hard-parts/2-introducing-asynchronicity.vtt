WEBVTT

1
00:00:03.391 --> 00:00:06.702
&gt;&gt; Will Sentance: We're going to move
on to now the wonderful world of

2
00:00:06.702 --> 00:00:07.940
asynchronicity.

3
00:00:09.170 --> 00:00:14.390
Asynchronicity is going to
change up this whole model.

4
00:00:14.390 --> 00:00:16.080
I'm gonna change it up.

5
00:00:16.080 --> 00:00:18.450
It's going to augment this whole model.

6
00:00:18.450 --> 00:00:20.950
This whole model is going
to continue to exist.

7
00:00:20.950 --> 00:00:24.060
In fact, the reason we are going
to need to augment our model,

8
00:00:24.060 --> 00:00:28.460
is this model is going to
be fundamentally untenable

9
00:00:28.460 --> 00:00:33.242
in how we think about doing
tasks that take a long time.

10
00:00:33.242 --> 00:00:34.340
So, let's just confirm.

11
00:00:34.340 --> 00:00:40.230
JavaScript is single threaded,
one line of code executing at a time.

12
00:00:40.230 --> 00:00:44.214
When I start running multiply by 2, I'm
not allowed to continue on in my global

13
00:00:44.214 --> 00:00:47.770
code,
&gt;&gt; Will Sentance: To executing

14
00:00:47.770 --> 00:00:50.628
the next multiply by 2 at the same time.

15
00:00:50.628 --> 00:00:52.951
I'm not allowed to, single threaded.

16
00:00:52.951 --> 00:00:58.181
But simultaneously, I'm also not allowed
to move on to the next line regardless,

17
00:00:58.181 --> 00:01:03.724
because, until I finish multiply by 2's
call, because JavaScript is synchronous.

18
00:01:03.724 --> 00:01:05.740
Now, all that means is I
go from top to bottom.

19
00:01:05.740 --> 00:01:08.412
I never move on to the next line,
until I've finished on the previous line.

20
00:01:08.412 --> 00:01:11.991
I never, ever move on to the next line.

21
00:01:11.991 --> 00:01:16.062
If you see a function clue,
I must return out of it.

22
00:01:16.062 --> 00:01:18.882
I must finish executing it
before I hit the next line.

23
00:01:18.882 --> 00:01:21.052
Well, this implies a big problem.

24
00:01:21.052 --> 00:01:24.763
What if I multiply by two call
where I call to a server,

25
00:01:24.763 --> 00:01:27.744
that was gonna take 300 milliseconds?

26
00:01:27.744 --> 00:01:30.251
I'm not allowed to move on
from that line to run any

27
00:01:30.251 --> 00:01:32.290
more JavaScript until that comes back.

28
00:01:32.290 --> 00:01:34.858
What if I click view more tweets,

29
00:01:34.858 --> 00:01:39.188
it runs JavaScript code that says,
go get more tweets.

30
00:01:39.188 --> 00:01:44.081
It's gonna take 300 or 200 milliseconds
before the tweets come back,

31
00:01:44.081 --> 00:01:47.390
but in the meantime,
I'm clicking like on a tweet,

32
00:01:47.390 --> 00:01:51.151
which is gonna run more JavaScript
code to turn it to pink and

33
00:01:51.151 --> 00:01:55.695
to increase the number of likes on
that tweet in my state, to my memory.

34
00:01:55.695 --> 00:02:00.435
That can't happen, I'll be sitting there
clicking because I'm still busy waiting on

35
00:02:00.435 --> 00:02:02.368
the line saying go get more tweets.

36
00:02:02.368 --> 00:02:06.106
Because I've gotta wait til it returns
back the tweets, right, before I can

37
00:02:06.106 --> 00:02:10.092
move on to my next line that says, color
the heart pink, cuz I clicked the button.

38
00:02:10.092 --> 00:02:13.024
This is gonna be a profound issue.

39
00:02:13.024 --> 00:02:16.201
What if we want to wait some time before
we can actually use or own bits of code.

40
00:02:16.201 --> 00:02:20.671
We want to wait until our
data comes back from Twitter,

41
00:02:20.671 --> 00:02:26.804
before we can then display and
run the functionality, display that data.

42
00:02:28.664 --> 00:02:30.772
&gt;&gt; Will Sentance: Perhaps we need
to get more data from the API, or

43
00:02:30.772 --> 00:02:33.370
even a timer to complete, and
then we wanna run some code.

44
00:02:33.370 --> 00:02:34.775
We have a conundrum.

45
00:02:34.775 --> 00:02:39.020
A tension between wanting to delay some
code running, because we're waiting for

46
00:02:39.020 --> 00:02:43.088
data to come back, so we wanna have the
next line of code display those tweets.

47
00:02:43.088 --> 00:02:44.600
We wanna add the data
to actually come back.

48
00:02:44.600 --> 00:02:50.391
But we do know to block our single
thread from continuing to run code.

49
00:02:50.391 --> 00:02:51.728
There's gonna be a profound conundrum.

50
00:02:51.728 --> 00:02:56.725
It's gonna be the essence of why
we have to introduce in JavaScript

51
00:02:56.725 --> 00:03:01.734
a whole complementary model to
our beautiful synchronous world.

52
00:03:01.734 --> 00:03:05.748
This, these three parts of
JavaScript alone are not enough.

53
00:03:05.748 --> 00:03:08.818
What's particularly interesting
is asynchronicity in Java,

54
00:03:08.818 --> 00:03:11.442
asynchronous world of Java
is the interesting stuff.

55
00:03:11.442 --> 00:03:16.681
I love our pure simple JavaScript engine,
but everything we love about

56
00:03:16.681 --> 00:03:21.677
web application development is
not happening in pure JavaScript.

57
00:03:21.677 --> 00:03:24.385
Pure JavaScript does not know
how to speak to the Internet.

58
00:03:24.385 --> 00:03:27.892
That is not a feature of JavaScript
to speak to the Internet.

59
00:03:27.892 --> 00:03:33.430
Instead, all those features
are sitting outside of JavaScript.

60
00:03:33.430 --> 00:03:37.136
They are sitting outside
of JavaScript in where?

61
00:03:37.136 --> 00:03:37.867
What's your name, dude?

62
00:03:37.867 --> 00:03:38.440
&gt;&gt; Alec: Alec.

63
00:03:38.440 --> 00:03:40.782
&gt;&gt; Will Sentance: Alec,
where are they sitting?

64
00:03:40.782 --> 00:03:43.097
Where are those features
of JavaScript that are not,

65
00:03:43.097 --> 00:03:45.470
they're doing things like
speaking to the Internet.

66
00:03:45.470 --> 00:03:46.040
Where are they?

67
00:03:46.040 --> 00:03:46.670
&gt;&gt; Alec: APIs?
&gt;&gt; Will Sentance: Or not features of

68
00:03:46.670 --> 00:03:47.410
the JavaScript, sorry.

69
00:03:47.410 --> 00:03:50.230
Where are the features that speak to
the Internet that Java should be using?

70
00:03:50.230 --> 00:03:50.960
Yeah, what does that mean?

71
00:03:52.090 --> 00:03:56.140
&gt;&gt; Alec: I don't know,
restful web services and.

72
00:03:56.140 --> 00:03:58.472
&gt;&gt; Will Sentance: Michelle, where
are those features that, for example,

73
00:03:58.472 --> 00:03:59.573
can speak to the Internet?

74
00:03:59.573 --> 00:04:00.374
&gt;&gt; Speaker 3: Are the in
the browser [CROSSTALK]?

75
00:04:00.374 --> 00:04:01.518
&gt;&gt; Will Sentance: They're in the browser.

76
00:04:01.518 --> 00:04:08.988
The browser is a wealth of features
that we in JavaScript get access to.

77
00:04:08.988 --> 00:04:13.077
We write JavaScript code that
is essentially a facade,

78
00:04:13.077 --> 00:04:17.601
we're gonna see these, our facades,
for a bunch of features

79
00:04:17.601 --> 00:04:23.040
that are not in JavaScript, but
are instead in the web browser.

80
00:04:23.040 --> 00:04:26.700
That's what we're gonna end up spending
most of our time this morning doing.

81
00:04:26.700 --> 00:04:30.140
Is writing JavaScript
code that interfaces API.

82
00:04:30.140 --> 00:04:31.560
So Alex is right.

83
00:04:31.560 --> 00:04:34.690
Interfaces, the I in API stands for
interface.

84
00:04:34.690 --> 00:04:39.189
That interacts with stuff
outside of JavaScript.

85
00:04:39.189 --> 00:04:43.841
Okay, we need a whole new bunch
of features in JavaScript and

86
00:04:43.841 --> 00:04:48.964
outside of Javascript in order to
understand how this is working.

87
00:04:48.964 --> 00:04:50.748
So here we go.

88
00:04:50.748 --> 00:04:52.595
Here is our first solution.

89
00:04:52.595 --> 00:04:55.398
And I'll pre tell you that
it's fundamentally untenable.

90
00:04:55.398 --> 00:05:00.286
But here's our first solution for how to
go and do a task that is going to take

91
00:05:00.286 --> 00:05:04.569
a long time like speaking to Twitter and
getting our tweets back.

92
00:05:05.640 --> 00:05:08.800
And nevertheless,
be able to continue running code, but

93
00:05:08.800 --> 00:05:11.130
know where that data
is when it comes back.

94
00:05:11.130 --> 00:05:16.160
This first solution here is
going to be untenable, but

95
00:05:17.170 --> 00:05:25.180
it is nevertheless going to be fairly
intuitive, but completely untenable.

96
00:05:25.180 --> 00:05:26.290
All right.

97
00:05:26.290 --> 00:05:28.000
Line 1, and by the way, so

98
00:05:28.000 --> 00:05:32.015
far we're still seeing things that are
very analogous to the first hard parts,

99
00:05:32.015 --> 00:05:36.990
but we need to get these foundations down
to understand the harder pieces to come.

100
00:05:36.990 --> 00:05:38.460
All right, line 1, Abdie?

101
00:05:40.890 --> 00:05:46.088
&gt;&gt; Abdi: Well, we're declaring
the display in our variable environment.

102
00:05:46.088 --> 00:05:47.680
&gt;&gt; Will Sentance: Yeah,
very nicely put, Abdie.

103
00:05:47.680 --> 00:05:50.670
Displays declared, excellent.

104
00:05:50.670 --> 00:05:54.205
Next line of code, Alec?

105
00:05:54.205 --> 00:05:56.321
Do the left hand side first.

106
00:05:56.321 --> 00:06:00.066
&gt;&gt; Abdi: We're declaring data from API.

107
00:06:00.066 --> 00:06:03.109
&gt;&gt; Will Sentance: Yeah, and
what's it gonna be assigned?

108
00:06:03.109 --> 00:06:05.291
&gt;&gt; Abdi: The fetchAndWait function.

109
00:06:05.291 --> 00:06:06.928
&gt;&gt; Will Sentance: No,
we never assign function.

110
00:06:06.928 --> 00:06:12.786
If we just had no paren's there,
it would say well, what's fetchAndWait?

111
00:06:12.786 --> 00:06:14.676
And it would assign it to that,
whatever it is.

112
00:06:14.676 --> 00:06:17.366
But JavaScript's not doing
that on the right hand side.

113
00:06:17.366 --> 00:06:21.080
And what a paren's always
telling me to do, Blessing?

114
00:06:21.080 --> 00:06:21.755
&gt;&gt; Speaker 3: Decode a function.

115
00:06:21.755 --> 00:06:22.540
&gt;&gt; Will Sentance: Decode.

116
00:06:22.540 --> 00:06:24.810
The right hand side here is a command.

117
00:06:24.810 --> 00:06:26.690
It is unfinished work.

118
00:06:26.690 --> 00:06:30.670
So be really clear with yourself
in no way are we assigned.

119
00:06:30.670 --> 00:06:34.385
Data API has zero
interest in fetchAndWait.

120
00:06:34.385 --> 00:06:39.613
Its only interest is in whatever
gets returned from fetchAndWait,

121
00:06:39.613 --> 00:06:42.096
which we hope will be our tweet.

122
00:06:42.096 --> 00:06:47.765
Okay, so fetchAndWait here is a made-up
function, but let's just see what it does.

123
00:06:47.765 --> 00:06:54.784
So data from API is going to be the return

124
00:06:54.784 --> 00:07:01.390
of fetchAndWait to our Twitter URL.

125
00:07:01.390 --> 00:07:07.670
So we're hoping it's gonna
return a nice tweet for us.

126
00:07:07.670 --> 00:07:08.960
That's what we're hoping.

127
00:07:08.960 --> 00:07:12.710
So let's start tracking our time passing.

128
00:07:12.710 --> 00:07:16.290
We're at about one millisecond here.

129
00:07:16.290 --> 00:07:21.192
Let's say this thing here takes
200 milliseconds to complete.

130
00:07:23.392 --> 00:07:27.913
&gt;&gt; Will Sentance: 200 milliseconds

131
00:07:27.913 --> 00:07:32.792
later,
&gt;&gt; Will Sentance: Finally our

132
00:07:32.792 --> 00:07:33.680
data comes back.

133
00:07:35.190 --> 00:07:36.850
Could be 300 milliseconds,
could be half a second.

134
00:07:36.850 --> 00:07:37.970
We don't even know.

135
00:07:37.970 --> 00:07:43.126
In that time are we allowed to move on and
run any further JavaScript code?

136
00:07:43.126 --> 00:07:46.649
Absolutely not,
we are not allowed to move on.

137
00:07:46.649 --> 00:07:50.708
We are blocked because our
JavaScript thread is synchronous.

138
00:07:50.708 --> 00:07:53.359
There's work we're still doing
on the right hand side here.

139
00:07:53.359 --> 00:07:55.417
We're not allowed to move
on to the next line, and

140
00:07:55.417 --> 00:07:58.661
we wouldn't want to because the next
line says, display the data of your API.

141
00:07:58.661 --> 00:08:01.222
So we better have that data
back if we're gonna display it.

142
00:08:01.222 --> 00:08:02.605
This is our solution 1.

143
00:08:02.605 --> 00:08:07.362
Be clear, this is not the right solution,
but this is a solution.

144
00:08:07.362 --> 00:08:12.757
So 200 milliseconds passes, and
our request to Twitter returns out,

145
00:08:12.757 --> 00:08:17.803
let's just say, very nicely it
returns out our data, and it is the,

146
00:08:17.803 --> 00:08:22.762
it is the single Tweet, and
it's not even coming back as an object,

147
00:08:22.762 --> 00:08:25.476
of course they come back as objects.

148
00:08:25.476 --> 00:08:27.558
But just a Tweet high.

149
00:08:27.558 --> 00:08:30.820
And we're going to store high,
where, Michelle?

150
00:08:30.820 --> 00:08:32.663
&gt;&gt; Michelle: In data from API.

151
00:08:32.663 --> 00:08:35.185
&gt;&gt; Will Sentance: In data from API.

152
00:08:35.185 --> 00:08:38.255
I apologize for sounding like I'm
correcting all of your pronunciations.

153
00:08:38.255 --> 00:08:41.731
Of date to data, but I'm not.

154
00:08:41.731 --> 00:08:44.032
I embrace your mispronunciations.

155
00:08:44.032 --> 00:08:45.852
Okay.

156
00:08:45.852 --> 00:08:49.778
Well done all of you for
corrupt, no, not corrupting.

157
00:08:52.570 --> 00:08:53.497
&gt;&gt; Will Sentance: Good.

158
00:08:53.497 --> 00:08:56.069
Customizing a beautiful language.

159
00:08:56.069 --> 00:08:57.084
All right.

160
00:08:57.084 --> 00:08:58.310
Okay, good.

161
00:08:58.310 --> 00:09:03.499
So Data API has high,
the string high stored in it.

162
00:09:03.499 --> 00:09:09.984
200 milliseconds later, in that time
no further JavaScript code could run.

163
00:09:09.984 --> 00:09:11.776
This is absolutely disastrous.

164
00:09:11.776 --> 00:09:16.635
Whatever, now we hit our next line
which is, who haven't I called on yet?

165
00:09:16.635 --> 00:09:19.040
Sonny, what's our next
line of code say to do?

166
00:09:19.040 --> 00:09:25.120
&gt;&gt; Sonny: To pass the data
API to display as high.

167
00:09:25.120 --> 00:09:27.630
&gt;&gt; Will Sentance: Right.
So we pass out to recalling the display

168
00:09:27.630 --> 00:09:31.200
function with our argument being
the value of data from API,

169
00:09:31.200 --> 00:09:34.980
everything in Java is we're going
to evaluate it immediately,

170
00:09:34.980 --> 00:09:39.180
data from API here is a string high',
we throw it straight in.

171
00:09:39.180 --> 00:09:44.420
And we create using context to run it
where in the memory, this is really clear

172
00:09:44.420 --> 00:09:51.020
here, in the memory data the parameter
data is set to that argument high.

173
00:09:51.020 --> 00:09:54.851
And so we're going to log in our console.

174
00:09:54.851 --> 00:10:00.349
At about 201 milliseconds
we're going to log high.

175
00:10:00.349 --> 00:10:02.424
Okay.

176
00:10:02.424 --> 00:10:05.272
And now finally, what line do we hit next?

177
00:10:05.272 --> 00:10:06.175
Gentleman, what's your name?

178
00:10:06.175 --> 00:10:07.041
&gt;&gt; Ben: Ben
&gt;&gt; Will Sentance: Ben.

179
00:10:07.041 --> 00:10:07.838
Sorry, Ben.

180
00:10:07.838 --> 00:10:10.074
&gt;&gt; Ben: We're gonna log me later.

181
00:10:10.074 --> 00:10:15.166
&gt;&gt; Will Sentance: Me later
is gonna be logged at

182
00:10:15.166 --> 00:10:20.784
the much later time of 202

183
00:10:20.784 --> 00:10:26.425
milliseconds, me later is logged.

184
00:10:29.457 --> 00:10:32.040
&gt;&gt; Will Sentance: Raise your hand if
you're a huge fan of this solution.

185
00:10:33.180 --> 00:10:34.150
I'm a huge fan of this.

186
00:10:34.150 --> 00:10:35.450
No, I don't mind the solution.

187
00:10:35.450 --> 00:10:39.669
Here's why I don't mind the solution,
is it is profoundly intuitive.

188
00:10:41.220 --> 00:10:43.760
Three goals we have, three goals we have.

189
00:10:43.760 --> 00:10:47.090
Be able to do tasks that take a long time,
slow tasks,

190
00:10:47.090 --> 00:10:48.860
like getting data from Twitter.

191
00:10:48.860 --> 00:10:50.110
We have to be able to do that.

192
00:10:50.110 --> 00:10:52.020
Otherwise, our web app is very,
very boring.

193
00:10:52.020 --> 00:10:53.720
Our best we can make a hangman game,

194
00:10:53.720 --> 00:10:58.550
a very nice hangman game in the command
line, but that's the best we can do.

195
00:10:58.550 --> 00:11:01.820
But we wanna be able to continue running
our JavaScript code in the meantime.

196
00:11:01.820 --> 00:11:03.300
We could not do that here.

197
00:11:03.300 --> 00:11:08.310
Look at this, in the meantime, Node
JavaScript code was allowed to run for

198
00:11:08.310 --> 00:11:09.690
200 milliseconds.

199
00:11:09.690 --> 00:11:13.380
When our slow task completes though we
should be able to run functionality

200
00:11:13.380 --> 00:11:15.420
knowing the task is done and
data is ready.

201
00:11:15.420 --> 00:11:16.417
That's the hard bit.

202
00:11:16.417 --> 00:11:19.836
So it turned out, every other solution
we have, that's the hard bit.

203
00:11:19.836 --> 00:11:22.118
In this solution, not a hard bit.

204
00:11:22.118 --> 00:11:23.375
This solution, it's effortless.

205
00:11:23.375 --> 00:11:26.672
I can see where my data is
synchronously in order, in memory.

206
00:11:26.672 --> 00:11:29.652
I've got no issues when my
display function is gonna run.

207
00:11:29.652 --> 00:11:33.756
It ain't gonna run literally in my
single thread until I got my data back.

208
00:11:33.756 --> 00:11:37.891
I'm dealing only in the synchronous world
here, in order, in order top to bottom.

209
00:11:37.891 --> 00:11:39.892
That's why we love JavaScript
single threaded model.

210
00:11:39.892 --> 00:11:43.614
That's the vision behind it,
is it's highly predictable, and

211
00:11:43.614 --> 00:11:45.384
easy to work with a developer.

212
00:11:45.384 --> 00:11:47.946
But obviously,
it's fundamentally untenable.

213
00:11:49.726 --> 00:11:52.796
Blocks our single JavaScript thread
from running any further code

214
00:11:52.796 --> 00:11:54.936
while this task completes.

215
00:11:54.936 --> 00:11:58.786
Benefits, it's definitely easy to
reason about, but it's untenable.

