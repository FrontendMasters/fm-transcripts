WEBVTT

1
00:00:00.088 --> 00:00:04.084
&gt;&gt; Will Sentance: We now have a situation
here where we could create a little

2
00:00:04.084 --> 00:00:09.582
function inside another function, returned
it out into a new global label and

3
00:00:09.582 --> 00:00:15.349
then use the new global label for that
functionality, for what possible reason?

4
00:00:15.349 --> 00:00:17.534
Why did I not to find add to globally?

5
00:00:19.773 --> 00:00:21.213
&gt;&gt; Will Sentance: Who
already knows the answer?

6
00:00:21.213 --> 00:00:23.039
Right?

7
00:00:23.039 --> 00:00:27.459
So I love it when there's lots of people
feel, cuz I love the people feels,

8
00:00:27.459 --> 00:00:28.942
I love the people feels.

9
00:00:28.942 --> 00:00:34.867
It's gonna turn out when we return
a function from another function we get so

10
00:00:34.867 --> 00:00:37.377
much more than just a function.

11
00:00:37.377 --> 00:00:39.472
We're gonna get a ton of what?

12
00:00:39.472 --> 00:00:42.405
A single profound bonus, and

13
00:00:42.405 --> 00:00:48.165
that's gonna be critical for
us to build out our own ITIL.

14
00:00:48.165 --> 00:00:54.577
Functions that when we call them give us
our next element from our flow of data.

15
00:00:54.577 --> 00:00:56.496
And I might call them what a strange name.

16
00:00:56.496 --> 00:00:59.470
But instead give us our next
element from our flow of data.

17
00:00:59.470 --> 00:01:04.124
Let's see it here, so if you wanna
create a function that holds, hold.

18
00:01:04.124 --> 00:01:08.557
You wanna create a function that has
the ability to return our next element

19
00:01:08.557 --> 00:01:11.720
from a list of data, four,
five, six for example.

20
00:01:11.720 --> 00:01:15.123
But then also, bundled on that function,

21
00:01:15.123 --> 00:01:19.482
it must have the underlying
data to grab from, right?

22
00:01:19.482 --> 00:01:20.801
Otherwise, where's it
getting the data from?

23
00:01:20.801 --> 00:01:25.446
And it must have the ability to track
which element it was on before, so

24
00:01:25.446 --> 00:01:30.407
that when we run that function,
again it doesn't give us the odd element,

25
00:01:30.407 --> 00:01:32.088
the previous elements.

26
00:01:32.088 --> 00:01:33.514
How the hell is gonna do that?

27
00:01:33.514 --> 00:01:37.719
Cuz functions when they call do not
remember their prior invitation.

28
00:01:37.719 --> 00:01:41.416
They do not remember data created that
was created in their prior running.

29
00:01:41.416 --> 00:01:44.524
The location you used on context,
[SOUND] we run the function again,

30
00:01:44.524 --> 00:01:46.281
brand new function, add to created.

31
00:01:46.281 --> 00:01:48.048
There's no memory of previous running.

32
00:01:48.048 --> 00:01:49.784
So how can we have
a function that when run,

33
00:01:49.784 --> 00:01:51.528
somehow remembers its previous running?

34
00:01:51.528 --> 00:01:56.464
That it's been run before and
had a previous element given out?

35
00:01:56.464 --> 00:01:59.501
We shall see, but
that's what we gotta try and do.

36
00:01:59.501 --> 00:02:04.279
Gonna start with this calling
create function that's gonna return

37
00:02:04.279 --> 00:02:07.728
out an inner function
into returnNextElement.

38
00:02:07.728 --> 00:02:13.156
And then we're gonna hopefully get
our first element, who knows how?

39
00:02:13.156 --> 00:02:16.910
We shall see, all right,
we're gonna walk through this very,

40
00:02:16.910 --> 00:02:20.038
very precisely because this
is pretty much our main,

41
00:02:20.038 --> 00:02:24.579
really our only code on this whole
section, but it's a very important code.

42
00:02:24.579 --> 00:02:29.704
And honestly,
it can be considered quite hard for

43
00:02:29.704 --> 00:02:35.447
focus, especially who've
not see in hot pots before.

44
00:02:35.447 --> 00:02:40.436
Before you have, there might be a section
that you remember that this is a sign to

45
00:02:40.436 --> 00:02:43.802
remind you of evolving
something called a back pack.

46
00:02:43.802 --> 00:02:49.531
All right, good, line one, I would
like to call this instead createFlow,

47
00:02:49.531 --> 00:02:52.676
because it's kind of creating the flow.

48
00:02:52.676 --> 00:02:56.564
We'll call it createFunction
here createFunction, so

49
00:02:56.564 --> 00:02:59.240
what are we doing in line one, Victor?

50
00:02:59.240 --> 00:03:03.606
&gt;&gt; Victor: We're creating a function
called createFunction in memory.

51
00:03:03.606 --> 00:03:08.271
&gt;&gt; Will Sentance: There it is, excellent,
thank you Victor, next line James.

52
00:03:08.271 --> 00:03:12.326
&gt;&gt; James: You're creating a new
constant called returnNextElement.

53
00:03:12.326 --> 00:03:14.872
&gt;&gt; Will Sentance: Excellent,
do we know what it's gonna be yet?

54
00:03:14.872 --> 00:03:16.419
What's gonna be stored there yet?

55
00:03:16.419 --> 00:03:17.282
&gt;&gt; James: Not yet.

56
00:03:17.282 --> 00:03:18.777
&gt;&gt; Will Sentance: So
it's gonna default in JavaScript to?

57
00:03:18.777 --> 00:03:19.407
&gt;&gt; James: Undefined.

58
00:03:19.407 --> 00:03:21.507
&gt;&gt; Will Sentance: Undefined,
excellent, so here we go.

59
00:03:23.961 --> 00:03:25.976
&gt;&gt; Will Sentance: I'm trying to get
my board positioning right here.

60
00:03:25.976 --> 00:03:30.614
So returnNextElement is going to be

61
00:03:30.614 --> 00:03:35.407
output of calling createFunction,

62
00:03:35.407 --> 00:03:42.220
where we're passing the array 4,5,6,
to it.

63
00:03:42.220 --> 00:03:46.466
We're gonna create what call,
a new Local Execution context.

64
00:03:46.466 --> 00:03:47.411
&gt;&gt; Victor: New execution context.

65
00:03:47.411 --> 00:03:49.240
&gt;&gt; Will Sentance: New execution context,
excellent, well done, man.

66
00:03:49.240 --> 00:03:51.571
I have the same enthusiasm for it as you.

67
00:03:51.571 --> 00:03:58.040
There it is, into it we go, and Sonny,
what is, it has of course our thread.

68
00:03:58.040 --> 00:04:03.320
Our threads weave, winded its way in,
and it has a memory just for

69
00:04:03.320 --> 00:04:07.167
stuff that's declared
inside this function.

70
00:04:07.167 --> 00:04:13.792
And Sonny, what's the first thing that
is declared inside this function?

71
00:04:13.792 --> 00:04:14.708
&gt;&gt; Sonny: Array, the array?

72
00:04:14.708 --> 00:04:16.691
&gt;&gt; Will Sentance: Yeah, sorry, array,
yeah, good, good job, array, yeah.

73
00:04:16.691 --> 00:04:17.770
Which is set to what?

74
00:04:17.770 --> 00:04:19.496
That's a parameter to what argument value?

75
00:04:19.496 --> 00:04:20.340
&gt;&gt; Sonny: 4, 5, 6.

76
00:04:20.340 --> 00:04:21.350
&gt;&gt; Will Sentance: 4, 5, 6.

77
00:04:24.038 --> 00:04:26.417
&gt;&gt; Will Sentance: Thank you,
that's very good, Sonny, and

78
00:04:26.417 --> 00:04:29.350
what's our next thing
inside of our local memory?

79
00:04:29.350 --> 00:04:30.518
Yeah, go ahead.

80
00:04:30.518 --> 00:04:33.211
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: Set to?

81
00:04:33.211 --> 00:04:34.081
&gt;&gt; Sonny: Zero.

82
00:04:34.081 --> 00:04:39.868
&gt;&gt; Will Sentance: Zero, good, and Ben,
next thing we set up in our local memory?

83
00:04:39.868 --> 00:04:41.994
&gt;&gt; Ben: To clear the function inner.

84
00:04:41.994 --> 00:04:43.441
&gt;&gt; Will Sentance: Excellent, there it is.

85
00:04:43.441 --> 00:04:45.970
Just so we can keep track of it,
I'm gonna do it in a different color,

86
00:04:45.970 --> 00:04:47.732
because it is really weird,
I recognize that.

87
00:04:47.732 --> 00:04:52.584
It's weird to define functions inside
of other functions and return them out.

88
00:04:52.584 --> 00:04:53.383
I recognize so

89
00:04:53.383 --> 00:04:57.389
I wanna make sure we're really
keeping track of how that's evolving.

90
00:04:57.389 --> 00:05:01.786
Now that's the function called inner,
are we gonna call it, Ben?

91
00:05:01.786 --> 00:05:02.613
We're gonna invoke it?

92
00:05:02.613 --> 00:05:03.775
&gt;&gt; Ben: No.

93
00:05:03.775 --> 00:05:05.080
&gt;&gt; Will Sentance: No,
what are we gonna do instead?

94
00:05:05.080 --> 00:05:06.260
&gt;&gt; Ben: We're going to return it.

95
00:05:06.260 --> 00:05:07.632
&gt;&gt; Will Sentance: Return
its entire definition out.

96
00:05:10.035 --> 00:05:15.433
&gt;&gt; Will Sentance: Now there it is,
out it returns, and store it where, Ben?

97
00:05:15.433 --> 00:05:18.223
&gt;&gt; Ben: We're going to store
it in returnNextElement.

98
00:05:18.223 --> 00:05:18.826
&gt;&gt; Will Sentance: Exactly,

99
00:05:18.826 --> 00:05:23.247
return this element is now our function
that was formally known as what, Ben?

100
00:05:24.334 --> 00:05:27.283
&gt;&gt; Ben: Function [INAUDIBLE].

101
00:05:27.283 --> 00:05:29.343
&gt;&gt; Will Sentance: See,
how hard it is to keep track of this.

102
00:05:29.343 --> 00:05:31.890
It was formally known
as that inner function.

103
00:05:31.890 --> 00:05:34.768
Inside a create function,
it was known as Inner.

104
00:05:34.768 --> 00:05:38.736
Now, we've hit the return
statement to create function, so

105
00:05:38.736 --> 00:05:43.029
all the labels in here,
all the data in here, what happened to it?

106
00:05:43.029 --> 00:05:46.393
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: Gone, just the function,

107
00:05:46.393 --> 00:05:52.098
they got returned out,
parsed out to returnNextElement, perfect.

108
00:05:52.098 --> 00:05:56.536
We've popped all the Call Stack, and
we're back out to returnNextElement.

109
00:05:56.536 --> 00:05:59.997
Let's just make sure we keep track
of our Call Stack, our Call Stack,

110
00:05:59.997 --> 00:06:02.002
we're back in what execution context?

111
00:06:02.002 --> 00:06:03.001
&gt;&gt; Ben: Global.

112
00:06:03.001 --> 00:06:04.548
&gt;&gt; Will Sentance: Global,
excellent, into Global.

113
00:06:05.721 --> 00:06:08.683
&gt;&gt; Will Sentance: So
we've done returnNextElement.

114
00:06:08.683 --> 00:06:14.360
Okay, so how can we, now in theory,
what do we hope that calling

115
00:06:14.360 --> 00:06:20.267
the returnNextElement function's gonna do,
in theory, Abdi?

116
00:06:20.267 --> 00:06:23.364
What do we hope in theory,
Brian, it's gonna do?

117
00:06:23.364 --> 00:06:24.305
&gt;&gt; Brian: Return four.

118
00:06:24.305 --> 00:06:25.386
&gt;&gt; Will Sentance: Four,
that's what we hope.

119
00:06:25.386 --> 00:06:27.182
If we run it again it would
hope it would return?

120
00:06:27.182 --> 00:06:28.033
&gt;&gt; Brian: Five.

121
00:06:28.033 --> 00:06:28.833
&gt;&gt; Will Sentance: And again?

122
00:06:28.833 --> 00:06:31.155
Six, and again,
undefined at some point, yeah, okay.

123
00:06:31.155 --> 00:06:33.100
That's what we're hoping for

124
00:06:33.100 --> 00:06:37.969
desperately, cuz that allows us to
rethink our collection of data as a flow.

125
00:06:37.969 --> 00:06:40.877
I run a function and get my x element,
I run a function, get my x element,

126
00:06:40.877 --> 00:06:42.335
I run a function, get my x element.

127
00:06:42.335 --> 00:06:43.800
That's a beautiful way
of thinking of data.

128
00:06:43.800 --> 00:06:47.733
No more, I have a collection,
statically, of data in memory.

129
00:06:47.733 --> 00:06:48.708
I've got to go and

130
00:06:48.708 --> 00:06:52.743
look at it, get an element, use it,
look at it, get an element, use it.

131
00:06:52.743 --> 00:06:57.468
Now I just run my function and
I've given, I've given my next element.

132
00:06:57.468 --> 00:07:00.964
It's a really beautiful way of thinking
about my collections of data as

133
00:07:00.964 --> 00:07:03.307
flows of element after
element after element.

134
00:07:03.307 --> 00:07:05.412
Everyone got that mentality shift?

135
00:07:05.412 --> 00:07:06.742
It's a beautiful way of thinking.

136
00:07:06.742 --> 00:07:13.651
So you're right, it is to run, call
returnNextElement, so let's do just that.

137
00:07:13.651 --> 00:07:17.326
So left hand side there
of d says to do what?

138
00:07:17.326 --> 00:07:18.456
&gt;&gt; Brian: Cast element one.

139
00:07:18.456 --> 00:07:21.364
&gt;&gt; Will Sentance: Okay,
element one is declared, yeah, good.

140
00:07:21.364 --> 00:07:23.188
Do we know what's assigned to it yet?

141
00:07:23.188 --> 00:07:24.270
&gt;&gt; Brian: No.

142
00:07:24.270 --> 00:07:28.584
&gt;&gt; Will Sentance: What are we going
to have to do to figure out what is

143
00:07:28.584 --> 00:07:30.068
assigned to it?

144
00:07:30.068 --> 00:07:31.868
&gt;&gt; Brian: We're gonna have to call it.

145
00:07:31.868 --> 00:07:33.144
&gt;&gt; Will Sentance: Call what?

146
00:07:33.144 --> 00:07:34.162
&gt;&gt; Brian: ReturnNextElement?

147
00:07:34.162 --> 00:07:36.054
&gt;&gt; Will Sentance: Good, yeah,
what symbol is, tell me,

148
00:07:36.054 --> 00:07:37.678
I got to call returnNextElement?

149
00:07:37.678 --> 00:07:38.391
&gt;&gt; Brian: Parentheses.

150
00:07:38.391 --> 00:07:44.061
&gt;&gt; Will Sentance: Excellent,
retrunNextElement, call it,

151
00:07:44.061 --> 00:07:49.441
I get to create my
favorite thing on Earth.

152
00:07:49.441 --> 00:07:51.635
So element one for now is undefined.

153
00:07:51.635 --> 00:07:54.524
I can call my favorite thing on Earth,
everyone together.

154
00:07:54.524 --> 00:07:55.964
&gt;&gt; Brian: Execution
[CROSSTALK] [INAUDIBLE].

155
00:07:55.964 --> 00:08:00.490
&gt;&gt; Will Sentance: Don't say local,
don't ruin the phraseology A new?

156
00:08:00.490 --> 00:08:03.129
&gt;&gt; Brian: Execution context.

157
00:08:03.129 --> 00:08:06.200
&gt;&gt; Will Sentance: Yeah, I like that
you to have a slightly tired tone.

158
00:08:06.200 --> 00:08:11.096
A kind of slightly exhausted please
stop doing this tone, so you did great,

159
00:08:11.096 --> 00:08:15.530
all right so,
&gt;&gt; Will Sentance: There it is,

160
00:08:15.530 --> 00:08:23.071
it has a local memory in which we're gonna
store anything that gets declared in here.

161
00:08:23.071 --> 00:08:27.294
Now, we have to visually
look back up to inner, but

162
00:08:27.294 --> 00:08:32.418
know that that's actually code
here in returnNextElement.

163
00:08:32.418 --> 00:08:37.309
So let's maybe even write element
= array[i] [i]++ returnElement.

164
00:08:37.309 --> 00:08:39.607
That's the code of returnNextElement.

165
00:08:39.607 --> 00:08:43.909
But we're gonna visually just save
ourselves and just look up to inner,

166
00:08:43.909 --> 00:08:45.047
to know what it is.

167
00:08:45.047 --> 00:08:46.649
So with that in mind, Shawn,
what is the first line of code?

168
00:08:46.649 --> 00:08:52.208
Or what's the first thing we're
gonna do inside returnNextElement?

169
00:08:52.208 --> 00:08:53.401
Left hand side first.

170
00:08:53.401 --> 00:08:54.040
&gt;&gt; Victor: Create a const called element.

171
00:08:54.040 --> 00:08:58.531
&gt;&gt; Will Sentance: Excellent,
there it is, const called element.

172
00:08:58.531 --> 00:09:04.124
&gt;&gt; Will Sentance: Element is going
to be the eighth position of array,

173
00:09:04.124 --> 00:09:06.801
what the hell are these?

174
00:09:06.801 --> 00:09:10.367
Well let's start to figure it out.

175
00:09:10.367 --> 00:09:16.986
Where do we look first for
something that we don't have a?

176
00:09:16.986 --> 00:09:24.589
We're calling returnNextElements so
it's goes in our Call Stack of course,

177
00:09:24.589 --> 00:09:31.286
there it is returnNextElement,
we're calling it inside a Global.

178
00:09:31.286 --> 00:09:36.169
So inside of here right now,
where do we look first for

179
00:09:36.169 --> 00:09:40.616
our array and our I Local memory, yeah?

180
00:09:40.616 --> 00:09:43.766
&gt;&gt; Abdi: Sorry [INAUDIBLE].

181
00:09:43.766 --> 00:09:48.437
&gt;&gt; Will Sentance: You're correct,
very good, do we find them, James?

182
00:09:48.437 --> 00:09:49.157
&gt;&gt; James: No.

183
00:09:49.157 --> 00:09:53.490
&gt;&gt; Will Sentance: No, I'm calling
returnNextElement to Global, so

184
00:09:53.490 --> 00:09:59.630
where might all my intuitions
imply I'm gonna look next, Ben?

185
00:09:59.630 --> 00:10:03.092
&gt;&gt; Ben: At the definition
of [CROSSTALK] [INAUDIBLE].

186
00:10:03.092 --> 00:10:05.670
&gt;&gt; Will Sentance: Okay, stop,
stop the definition of what?

187
00:10:05.670 --> 00:10:08.444
&gt;&gt; Ben: ReturnNextElement function.

188
00:10:08.444 --> 00:10:11.357
&gt;&gt; Will Sentance: Definition,
yeah, cuz you watch [INAUDIBLE].

189
00:10:11.357 --> 00:10:12.233
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: All right,

190
00:10:12.233 --> 00:10:13.860
raise your hand if you know what are for?

191
00:10:13.860 --> 00:10:15.720
Cuz those are the people
I'm gonna call on.

192
00:10:15.720 --> 00:10:18.792
You've never watched before?

193
00:10:18.792 --> 00:10:21.211
Okay, Rick,
Where would everything suggest,

194
00:10:21.211 --> 00:10:23.218
I'm calling returnNextElements out.

195
00:10:23.218 --> 00:10:25.910
Where would everything suggest
the next memories I look at?

196
00:10:28.210 --> 00:10:30.142
I don't find it in this local one,
where do I look next?

197
00:10:30.142 --> 00:10:31.464
&gt;&gt; Rick: In Global.
&gt;&gt; Will Sentance: In Global, exactly.

198
00:10:31.464 --> 00:10:36.602
Into Global I go looking desperately for

199
00:10:36.602 --> 00:10:41.747
my array and my I, do I find them, Rick?

200
00:10:41.747 --> 00:10:47.316
No, so I get an error, right Rick?

201
00:10:47.316 --> 00:10:49.379
Is that my the answer's no voice?

202
00:10:49.379 --> 00:10:50.217
&gt;&gt; Rick: [LAUGH]
&gt;&gt; Will Sentance: [LAUGH] Okay,

203
00:10:50.217 --> 00:10:52.600
I need to get better at that voice, right?

204
00:10:52.600 --> 00:10:56.664
No, that's not much better either,

205
00:10:56.664 --> 00:11:00.729
I get an error, okay, I get an error.

206
00:11:00.729 --> 00:11:06.874
Now that's,
see that was more convincing, right?

207
00:11:06.874 --> 00:11:11.914
I get an error, hm yes cuz I looked for

208
00:11:11.914 --> 00:11:17.939
these, mm-mm, not there, hm, hm, hm.

209
00:11:17.939 --> 00:11:21.899
There is another hard part where we
focus mainly on this concept and

210
00:11:21.899 --> 00:11:24.172
I'd like to drag it out for long time.

211
00:11:24.172 --> 00:11:27.518
So we got an error on the horizon here,
right?

212
00:11:28.971 --> 00:11:33.357
&gt;&gt; James: How long do you want us to
wait before we give you the answer?

213
00:11:33.357 --> 00:11:36.550
&gt;&gt; Will Sentance: James has a sound
of a confident person about him.

214
00:11:36.550 --> 00:11:40.048
&gt;&gt; James: [LAUGH]
&gt;&gt; Will Sentance: Where is that array

215
00:11:40.048 --> 00:11:40.599
in I?

216
00:11:40.599 --> 00:11:41.952
Because I am certain,

217
00:11:41.952 --> 00:11:46.804
do not at any point think I can go back
into my createFunction execution context.

218
00:11:46.804 --> 00:11:48.380
This has long gone.

219
00:11:48.380 --> 00:11:52.996
I cannot suddenly, I'll just go
up a group and createFunction.

220
00:11:52.996 --> 00:11:54.507
That is long gone.

221
00:11:54.507 --> 00:11:56.590
So where's my red I?

222
00:11:56.590 --> 00:12:00.419
All right, I'm not gonna drag
it out anymore, it turns out,

223
00:12:00.419 --> 00:12:05.223
in case James shouts out the answer before
I get to give the punchline myself.

224
00:12:05.223 --> 00:12:11.103
It turns out that as soon as I define my
inner function, in side of createFunction,

225
00:12:11.103 --> 00:12:15.478
while I was still back in createFunction,
before it exited.

226
00:12:15.478 --> 00:12:20.980
As soon as I defined it, I got a bond
to all the surrounding live memory,

227
00:12:20.980 --> 00:12:22.834
the surrounding data.

228
00:12:22.834 --> 00:12:27.330
You can call it state,
you can call it the variable environment,

229
00:12:27.330 --> 00:12:31.524
the live memory,
the data around the function definition.

230
00:12:31.524 --> 00:12:35.908
I got a bond to it, a little link,
a reference to all surrounding data.

231
00:12:35.908 --> 00:12:39.386
We'll talk about under
what property in a moment.

232
00:12:39.386 --> 00:12:42.303
I gotta bond to surround data immediately.

233
00:12:42.303 --> 00:12:44.939
Meaning when I return that function out,

234
00:12:44.939 --> 00:12:49.833
I brought with it on the back of the
function as the function got returned out,

235
00:12:49.833 --> 00:12:53.473
out on the back of it came all
that surrounding live data.

236
00:12:53.473 --> 00:12:55.609
When I return that function out,

237
00:12:55.609 --> 00:13:01.115
return out the function that used to have
the label inner, into returnNextElement.

238
00:13:01.115 --> 00:13:03.011
On the back of the function,

239
00:13:03.011 --> 00:13:06.811
I brought all the surrounding
data from when it was born.

240
00:13:06.811 --> 00:13:09.421
And it got stored in this new label,

241
00:13:09.421 --> 00:13:13.606
we will give it a new label
globally returnNextElement.

242
00:13:13.606 --> 00:13:18.600
But my surrounding data is attached
to that very definition with

243
00:13:18.600 --> 00:13:22.950
the array literally in the memory as four,
five, six.

244
00:13:22.950 --> 00:13:26.501
Not it will be, but
literally store to memory.

245
00:13:26.501 --> 00:13:30.334
I as literally stored in
memory as the number 0, and

246
00:13:30.334 --> 00:13:33.485
it's attached to the back of my function.

247
00:13:33.485 --> 00:13:38.442
There it is, on the definition itself,
and so Ben was hinting this.

248
00:13:38.442 --> 00:13:44.611
When I don't find array and I on my local
memory, I do not go to Global immediately.

249
00:13:44.611 --> 00:13:50.121
Instead I go look at my definition of my
function, I see is there a backpack of

250
00:13:50.121 --> 00:13:55.133
data that was brought out with
the function, and look, there it is.

251
00:13:55.133 --> 00:13:57.108
And Ben, what do I grab?

252
00:13:57.108 --> 00:14:02.557
&gt;&gt; Ben: You grab four?

253
00:14:02.557 --> 00:14:06.243
&gt;&gt; Will Sentance: Correct, but
specifically my array becomes,

254
00:14:06.243 --> 00:14:09.196
my array becomes
&gt;&gt; [INAUDIBLE]

255
00:14:09.196 --> 00:14:10.140
&gt;&gt; Will Sentance: And my I becomes?

256
00:14:10.140 --> 00:14:11.894
&gt;&gt; Ben: Zero.

257
00:14:11.894 --> 00:14:14.522
&gt;&gt; Will Sentance: Zero,
I'm not looking for my local memory,

258
00:14:14.522 --> 00:14:18.675
I'm looking on the function definition
that's been called itself and

259
00:14:18.675 --> 00:14:21.114
there attached to it, is my persistent.

260
00:14:21.114 --> 00:14:23.879
We'll give it a post in it in a moment,
but

261
00:14:23.879 --> 00:14:29.337
my backpack of data from when the function
was returned out from where it was born.

262
00:14:29.337 --> 00:14:30.724
As soon as it was born,

263
00:14:30.724 --> 00:14:35.623
it got a link to all the surrounding data
from the memory in which it was defined.

264
00:14:35.623 --> 00:14:38.149
When I return the function out,
that bond didn't break.

265
00:14:38.149 --> 00:14:43.797
That bond pulled out on the back of
the function all that surrounding data.

266
00:14:43.797 --> 00:14:49.878
And when I call that function by it's new
Global label here, and doesn't find some,

267
00:14:49.878 --> 00:14:55.376
it refer to labels in defined data of
in the local memory, it doesn't panic.

268
00:14:55.376 --> 00:14:59.850
It looks first for the functions
definition and finds attached to

269
00:14:59.850 --> 00:15:04.983
the function, our persistent live data
from where the function was born.

270
00:15:04.983 --> 00:15:10.086
All right, which means exactly as Ben
said, what am I storing in element?

271
00:15:11.470 --> 00:15:14.629
&gt;&gt; Will Sentance: I'm gonna take the
zeroth position of the array four, five,

272
00:15:14.629 --> 00:15:15.676
six which is, Ben?

273
00:15:15.676 --> 00:15:16.205
&gt;&gt; Ben: Four.

274
00:15:16.205 --> 00:15:16.889
&gt;&gt; Will Sentance: Four, and

275
00:15:16.889 --> 00:15:21.613
what am I going to do as my next line,
Ben, inside my body of the function?

276
00:15:21.613 --> 00:15:23.247
&gt;&gt; Ben: You're going to increment I.

277
00:15:23.247 --> 00:15:25.493
&gt;&gt; Will Sentance: Right,
do I find I in local memory?

278
00:15:25.493 --> 00:15:27.157
&gt;&gt; Ben: No.
&gt;&gt; Will Sentance: Where do I go?

279
00:15:27.157 --> 00:15:27.679
&gt;&gt; Ben: You go to
the [CROSSTALK] [INAUDIBLE].

280
00:15:27.679 --> 00:15:28.611
&gt;&gt; Will Sentance: Use my name,
good, know my name.

281
00:15:28.611 --> 00:15:31.174
&gt;&gt; Ben: [LAUGH]
&gt;&gt; Will Sentance: [LAUGH] Sorry,

282
00:15:31.174 --> 00:15:32.628
your name one and I go to one.

283
00:15:32.628 --> 00:15:39.251
And we then hit return,
element which is really return, what?

284
00:15:39.251 --> 00:15:40.452
&gt;&gt; Ben: Four.
&gt;&gt; Will Sentance: Four,

285
00:15:40.452 --> 00:15:45.757
we return out four into
what Global constant?

286
00:15:45.757 --> 00:15:46.414
&gt;&gt; Ben: Element one.

287
00:15:46.414 --> 00:15:49.464
&gt;&gt; Will Sentance: Element one and
look at that.

288
00:15:49.464 --> 00:15:55.809
Look at that element one is not four,
element one is four,

289
00:15:55.809 --> 00:16:00.610
exactly what we wanted From
calling returnNextElement.

290
00:16:00.610 --> 00:16:02.730
Let's call it one more time
to see what happens, and

291
00:16:02.730 --> 00:16:06.620
then we'll talk about what
concept this backpack is.

292
00:16:06.620 --> 00:16:08.394
You may already know its posher name.

293
00:16:10.189 --> 00:16:15.555
&gt;&gt; Will Sentance: Or, its more unintuitive
name, or its name that I'm hoping is gonna

294
00:16:15.555 --> 00:16:21.028
be replaced with backpack in the spec
very soon, I believe it will be.

295
00:16:21.028 --> 00:16:24.634
All right,
returnNextElement pop off the call stack,

296
00:16:24.634 --> 00:16:27.710
all of its execution context cleared,
right?

297
00:16:27.710 --> 00:16:30.505
So we better not be having
this information in here,

298
00:16:30.505 --> 00:16:31.910
cause it's all deleted.

299
00:16:31.910 --> 00:16:37.390
And we hit our next global line
of code which is what, Eddie.

300
00:16:37.390 --> 00:16:41.859
Const element two
declaring that in memory.

301
00:16:41.859 --> 00:16:46.214
Yeah, exactly, let's just try being super
precise at our technical communication.

302
00:16:46.214 --> 00:16:47.992
So I'll give you another shot on that.

303
00:16:47.992 --> 00:16:50.618
Yes.
&gt;&gt; Abdi: Declare the-

304
00:16:50.618 --> 00:16:51.292
&gt;&gt; Will Sentance: Function.

305
00:16:51.292 --> 00:16:52.777
&gt;&gt; Abdi: Declare the constant.

306
00:16:52.777 --> 00:16:56.457
Or declare the constant element to-
&gt;&gt; Will Sentance: Excellent.

307
00:16:56.457 --> 00:16:57.827
In global memory, and

308
00:16:57.827 --> 00:17:02.450
then we know it's going to be the return
the value of calling what function?

309
00:17:03.890 --> 00:17:05.020
Albie?
&gt;&gt; Abdi: Return x element.

310
00:17:05.020 --> 00:17:10.465
&gt;&gt; Will Sentance: Good, so for now,
element two, or default two, everyone?

311
00:17:10.465 --> 00:17:12.498
&gt;&gt; Abdi: [CROSSTALK]
&gt;&gt; Will Sentance: [INAUDIBLE], excellent.

312
00:17:12.498 --> 00:17:16.404
So let's create that execution
context people, almost there,

313
00:17:16.404 --> 00:17:18.046
God I wanna have a sit down.

314
00:17:18.046 --> 00:17:24.259
Let's create execution context,
in we go in our local memory.

315
00:17:24.259 --> 00:17:28.608
What's the first thing we declare, Victor?

316
00:17:28.608 --> 00:17:29.478
&gt;&gt; Victor: Element.

317
00:17:29.478 --> 00:17:33.367
&gt;&gt; Will Sentance: Element,
which is going to be set to array,

318
00:17:33.367 --> 00:17:36.220
these mysterious array(i).

319
00:17:36.220 --> 00:17:39.570
What are these mysterious things,
you might be asking?

320
00:17:39.570 --> 00:17:46.484
Well, where do I look for
array and i first, Victor?

321
00:17:46.484 --> 00:17:48.996
&gt;&gt; Victor: In the local execution context.

322
00:17:48.996 --> 00:17:50.470
&gt;&gt; Will Sentance: Always in
the local execution context first,

323
00:17:50.470 --> 00:17:51.500
nothing there though, right?

324
00:17:51.500 --> 00:17:53.542
So, do I panic?

325
00:17:53.542 --> 00:17:55.040
No, I mean, I wouldn't panic anyway.

326
00:17:55.040 --> 00:17:57.837
Where might I intuitively look next?

327
00:17:57.837 --> 00:18:01.285
&gt;&gt; Victor: You would intuitively
go to global backpack.

328
00:18:01.285 --> 00:18:02.063
&gt;&gt; Will Sentance: Right.
&gt;&gt; Victor: But

329
00:18:02.063 --> 00:18:06.086
there is a enclosed, [CROSSTALK]
&gt;&gt; Will Sentance: I like that sort of

330
00:18:06.086 --> 00:18:08.275
term, I like that sort of term.

331
00:18:08.275 --> 00:18:14.444
That's an enclosed backpack, good, got it,
where I find array is four five six.

332
00:18:14.444 --> 00:18:15.268
And I is?

333
00:18:15.268 --> 00:18:16.878
&gt;&gt; Victor: One.

334
00:18:16.878 --> 00:18:21.051
&gt;&gt; Will Sentance: One, our live data
here persists that that's the function

335
00:18:21.051 --> 00:18:22.056
definition.

336
00:18:22.056 --> 00:18:24.422
It's persisting that the function
definition in memory.

337
00:18:24.422 --> 00:18:30.162
So I is one, and so array is
&gt;&gt; Will Sentance: 4,

338
00:18:30.162 --> 00:18:38.460
5, 6, and i is 1, because return its
elements stored in global memory.

339
00:18:38.460 --> 00:18:41.440
So it's not suddenly deleting all
the data attached to it at each stop.

340
00:18:41.440 --> 00:18:43.220
It doesn't care about the running
of this function except,

341
00:18:43.220 --> 00:18:44.230
what do you store in here.

342
00:18:44.230 --> 00:18:48.010
This is persistent data, just like return
next element function is persistent

343
00:18:48.010 --> 00:18:51.450
function, as long as the application's
running, it can't suddenly be deleted.

344
00:18:51.450 --> 00:18:54.260
So 2 is its attached backpack of data,
persistent.

345
00:18:54.260 --> 00:18:56.470
That just means sticks around,
it doesn't change.

346
00:18:56.470 --> 00:18:57.780
Or it changes but it doesn't get removed.

347
00:18:58.820 --> 00:19:02.701
Okay, so position one vector of 4,
5, 6, is what?

348
00:19:02.701 --> 00:19:03.504
&gt;&gt; Victor: Five.

349
00:19:03.504 --> 00:19:05.423
&gt;&gt; Will Sentance: Five, good job.

350
00:19:05.423 --> 00:19:09.120
Five, and then we hit the next line
inside the body vector which is?

351
00:19:10.840 --> 00:19:12.030
&gt;&gt; Victor: Five, plus, plus.

352
00:19:12.030 --> 00:19:14.720
&gt;&gt; Will Sentance: And over here we
find it in the backpack and do?

353
00:19:14.720 --> 00:19:15.363
&gt;&gt; Victor: 2.

354
00:19:15.363 --> 00:19:20.410
&gt;&gt; Will Sentance: 2, and
then we hit return, return what, Victor?

355
00:19:20.410 --> 00:19:21.564
&gt;&gt; Victor: Return 5.

356
00:19:21.564 --> 00:19:28.001
&gt;&gt; Will Sentance: Return 5,
the value of element into element 2.

357
00:19:28.001 --> 00:19:32.630
Excellent, there it is, and look at that,
I think that's pretty beautiful.

358
00:19:32.630 --> 00:19:38.764
We have a function now, that when born,
got attached to its very definition.

359
00:19:38.764 --> 00:19:44.323
The underlying state, the underlying data
from which it's going to extract and

360
00:19:44.323 --> 00:19:47.016
return to us, on its call, one by one,

361
00:19:47.016 --> 00:19:51.690
the individual elements from that
underlying collection of data.

362
00:19:51.690 --> 00:19:56.819
And it's keeping track of which one's up
next using this little tracking value,

363
00:19:56.819 --> 00:20:00.480
also all bundled up on this
return next element function.

364
00:20:00.480 --> 00:20:03.420
I think that's very very beautiful,
we'll talk about it in a second, but

365
00:20:03.420 --> 00:20:06.860
I think it's very beautiful that you
can have a function return it's element

366
00:20:06.860 --> 00:20:08.650
that has everything you need.

367
00:20:08.650 --> 00:20:11.680
It has the ability when called,
to return out an x element.

368
00:20:11.680 --> 00:20:17.375
It has bundled on it the underlying data,
that it knows to extract from.

369
00:20:17.375 --> 00:20:23.137
And it has bundled on it the information
about what next elements are returned out,

370
00:20:23.137 --> 00:20:25.702
all bundled up in a single function.

371
00:20:25.702 --> 00:20:27.955
That's very, very beautiful design.

372
00:20:27.955 --> 00:20:32.121
All right, let's have thumbs,
and one of the thumbs or

373
00:20:32.121 --> 00:20:36.235
medium might be,
what do we call the backpack of data?

374
00:20:36.235 --> 00:20:37.300
&gt;&gt; Victor: [LAUGH]
&gt;&gt; Will Sentance: Every time that you

375
00:20:37.300 --> 00:20:40.320
lost me, I'm clear, I have clarifications.

376
00:20:40.320 --> 00:20:42.723
Everyone's thumbs out and proud.

377
00:20:42.723 --> 00:20:45.450
Everyone knows what
the backpack is called.

378
00:20:45.450 --> 00:20:46.470
No one has medium thumbs?

379
00:20:48.240 --> 00:20:48.810
All right.

380
00:20:48.810 --> 00:20:50.140
What's the backpack called?

381
00:20:50.140 --> 00:20:50.830
&gt;&gt; Victor: Good, good job, Alec.

