WEBVTT

1
00:00:00.250 --> 00:00:05.240
&gt;&gt; Will Sentance: Return next element
a special object with the next property on

2
00:00:05.240 --> 00:00:10.310
it, a method that when that
is record runs, starts or

3
00:00:10.310 --> 00:00:15.600
continues the cornea create
flow is where it was born.

4
00:00:15.600 --> 00:00:19.401
It was born by create flow and
so it has this ability to go and

5
00:00:19.401 --> 00:00:24.211
execute that function, and then continue
executing it by holding on to to

6
00:00:24.211 --> 00:00:27.471
the memory in that function
execution context and

7
00:00:27.471 --> 00:00:32.302
position in that function execution
context and then returning to that.

8
00:00:32.302 --> 00:00:36.430
It hits yield and
returns out of the value being yielded,

9
00:00:36.430 --> 00:00:40.680
pauses also rests this
context just holds on to it.

10
00:00:40.680 --> 00:00:45.350
Here, we end up with a stream
flow of values we get

11
00:00:45.350 --> 00:00:49.420
one by one by running
return NextElement.net,

12
00:00:49.420 --> 00:00:53.520
next element, the next element, but look
how dynamic can we control what they are.

13
00:00:53.520 --> 00:00:57.810
Every time you see the yield keyword the
next thing is expression is gonna evaluate

14
00:00:57.810 --> 00:01:05.000
to our next element in the flow of
elements coming out of our a flow.

15
00:01:05.000 --> 00:01:10.048
And those flows, those functions that give

16
00:01:10.048 --> 00:01:16.200
us an [INAUDIBLE] From the flow
are known as iterators.

17
00:01:16.200 --> 00:01:16.850
Okay?

18
00:01:16.850 --> 00:01:18.770
There we go.

19
00:01:18.770 --> 00:01:22.810
All right, anything that gives
a flow element by element.

20
00:01:22.810 --> 00:01:23.860
It's technically known as an iterator.

21
00:01:23.860 --> 00:01:27.160
I prefer to think of it as being
a flow of elements that we just grab

22
00:01:27.160 --> 00:01:28.820
one by one by running a function.

23
00:01:28.820 --> 00:01:31.870
Switch on the tap, get the next element,
switch on the tap, next element.

24
00:01:31.870 --> 00:01:36.010
But here we're producing that flow by
running through a function hitting a yield

25
00:01:36.010 --> 00:01:38.540
statement giving that as
the next element in the flow.

26
00:01:38.540 --> 00:01:40.780
Continue, yield statement,
next element to the flow.

27
00:01:40.780 --> 00:01:43.950
Go back in, continue yield statement,
next element of the flow.

28
00:01:43.950 --> 00:01:48.620
We're now running functionality to give,
to generate annex element of our flow.

29
00:01:49.680 --> 00:01:52.813
That also means we get
to control the return,

30
00:01:52.813 --> 00:01:57.110
manually ourselves into a function
that execution context.

31
00:01:57.110 --> 00:02:01.390
What method Ben do we call to
initiate us going back into

32
00:02:01.390 --> 00:02:02.858
the execution context?
&gt;&gt; Ben: .next.

33
00:02:02.858 --> 00:02:03.930
&gt;&gt; Will Sentance: .next.

34
00:02:03.930 --> 00:02:07.920
We now have manual control of how
to return back into a function

35
00:02:07.920 --> 00:02:11.420
execution context for the first time ever.

36
00:02:11.420 --> 00:02:16.410
All we needed to add by the way, is the
ability to track the position we're in and

37
00:02:16.410 --> 00:02:18.820
probably some other stuff
under the hood to do that, but

38
00:02:18.820 --> 00:02:20.660
that is essentially what we are adding.

39
00:02:20.660 --> 00:02:24.630
We are very use to persisting state
from a prior execution context

40
00:02:24.630 --> 00:02:26.010
as a backpack of data.

41
00:02:26.010 --> 00:02:28.920
Now we also possessed the position at
which we exited the function execution

42
00:02:28.920 --> 00:02:30.600
context to allow us to head back in.

43
00:02:30.600 --> 00:02:33.350
But that's super powerful.

44
00:02:33.350 --> 00:02:37.200
We're now getting to suspend
a function being run and

45
00:02:37.200 --> 00:02:39.609
then return to continue
running its body of code.

46
00:02:40.890 --> 00:02:43.450
By calling the next method
that takes us back in.

47
00:02:43.450 --> 00:02:47.280
We manually control when
we return back to run code.

48
00:02:47.280 --> 00:02:52.060
So what if we could use that
to handle asynchronicity?

49
00:02:52.060 --> 00:02:54.410
We could initiate a task
that takes a long time.

50
00:02:54.410 --> 00:02:55.950
For example,
requesting data from a server.

51
00:02:57.280 --> 00:03:04.260
Set it up, use the yield keyword to
have that be the return promise object.

52
00:03:04.260 --> 00:03:09.360
Be stored out here in some way and
throw us out the execution context.

53
00:03:09.360 --> 00:03:12.780
Then continue running

54
00:03:12.780 --> 00:03:17.780
through add code including attaching
some functionality be also triggered.

55
00:03:19.360 --> 00:03:23.580
When that promise gets its value back,
and what if that trigger functionality

56
00:03:23.580 --> 00:03:27.940
inside of it contained a call to next,
that took us back in?

57
00:03:27.940 --> 00:03:32.190
To continue running our code with
its value being passed back in,

58
00:03:32.190 --> 00:03:34.510
the value from the return request,

59
00:03:34.510 --> 00:03:38.160
the response object that came
back from into the promise value.

60
00:03:38.160 --> 00:03:41.370
Wow, and
that is exactly what we're gonna do here.

61
00:03:41.370 --> 00:03:45.180
We can use the ability to
pause createFlow's running and

62
00:03:45.180 --> 00:03:49.330
then restart it only
when our data returns.

63
00:03:49.330 --> 00:03:52.190
We get control when we return
back to createFlow and

64
00:03:52.190 --> 00:03:56.750
continue by setting up the trigger
to do so, which is the next method.

65
00:03:56.750 --> 00:03:59.680
To be run by our function
that was triggered

66
00:03:59.680 --> 00:04:03.470
by the promises resolution when
the value returned from Twitter.

67
00:04:03.470 --> 00:04:05.690
It's a little bit of a sort
of loopy back and forwards.

68
00:04:05.690 --> 00:04:09.370
It's all gonna be
automated by a sync await.

69
00:04:09.370 --> 00:04:13.390
But we're gonna build a sync
await from scratch using

70
00:04:13.390 --> 00:04:15.730
this generator function concept.

71
00:04:15.730 --> 00:04:18.120
And then we're gonna tidy it up,
wrap it up.

72
00:04:18.120 --> 00:04:20.990
Using a simple way, which is gonna
automate a few of the pieces.

73
00:04:20.990 --> 00:04:21.950
This is our final code.

74
00:04:21.950 --> 00:04:24.500
These last two sides are our final code.

