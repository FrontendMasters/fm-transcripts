WEBVTT

1
00:00:00.130 --> 00:00:02.500
&gt;&gt; Will Sentance: Before we do that,
what are the problems of this?

2
00:00:02.500 --> 00:00:04.160
No problems.

3
00:00:04.160 --> 00:00:07.810
There's a beautiful intuitive approach
once we understand under the hood

4
00:00:07.810 --> 00:00:08.720
how it's working.

5
00:00:09.790 --> 00:00:13.710
Response data, it's only available
in the call-back function.

6
00:00:13.710 --> 00:00:15.610
We don't see this here,
we're gonna see it in a moment.

7
00:00:15.610 --> 00:00:18.310
Any data that comes back from
our web browser features work.

8
00:00:18.310 --> 00:00:20.874
For example, I go and
get some tweets from Twitter.

9
00:00:20.874 --> 00:00:25.280
They're gonna be parsed as
the argument to the function

10
00:00:25.280 --> 00:00:28.230
that was set up to run on completion.

11
00:00:28.230 --> 00:00:29.840
That can get pretty complex,

12
00:00:29.840 --> 00:00:32.770
because the data is only gonna
be available inside of here.

13
00:00:32.770 --> 00:00:33.780
That can get pretty messy.

14
00:00:35.430 --> 00:00:41.000
And maybe it feels odd to think that
parsing a function into another function,

15
00:00:41.000 --> 00:00:42.760
only for it to run much later.

16
00:00:42.760 --> 00:00:43.760
Maybe it feels odd?

17
00:00:43.760 --> 00:00:45.820
It definitely feels odd.

18
00:00:45.820 --> 00:00:48.040
When I see that, setTimeout(printHello,0),

19
00:00:48.040 --> 00:00:53.040
everything tells me that I must be running
printHello somehow inside setTimeout.

20
00:00:54.230 --> 00:00:55.150
Everything tells me that.

21
00:00:55.150 --> 00:00:57.630
Especially if it says zero milliseconds.

22
00:00:57.630 --> 00:01:00.210
And yet, I am absolutely not.

23
00:01:00.210 --> 00:01:03.800
I am passing a function definition in,
only for

24
00:01:03.800 --> 00:01:06.820
it to be invoked beyond my control.

25
00:01:06.820 --> 00:01:08.810
Much later in application.

26
00:01:08.810 --> 00:01:13.585
That losing control of our execution and
defining something,

27
00:01:13.585 --> 00:01:16.840
printHello separately that's gonna
[INAUDIBLE] Well, not arbitrarily, but

28
00:01:16.840 --> 00:01:18.740
beyond that control going to be called?

29
00:01:18.740 --> 00:01:19.860
Late.

30
00:01:19.860 --> 00:01:22.740
When we write code we kind of think
of it somewhat at least of being,

31
00:01:22.740 --> 00:01:25.120
I'm taking control of
the structure of my code.

32
00:01:25.120 --> 00:01:29.250
But instead I'm leaving a whole piece
to be run beyond my control later on.

33
00:01:29.250 --> 00:01:30.940
That is a weird feeling.

34
00:01:30.940 --> 00:01:34.350
I'll say this, once you understand
under the hood how it's working.

35
00:01:34.350 --> 00:01:35.460
it's actually not too bad.

36
00:01:35.460 --> 00:01:37.630
If you don't understand under the hood
how it's working, it's horrible.

37
00:01:37.630 --> 00:01:39.800
But if you understand under
the hood how it's working,

38
00:01:39.800 --> 00:01:42.410
you know that this is a pretend
function in JavaScript.

39
00:01:42.410 --> 00:01:43.000
It's a facade.

40
00:01:43.000 --> 00:01:44.746
For functionality in the background.

41
00:01:44.746 --> 00:01:47.057
You know this function is gonna
be passed into a queue and

42
00:01:47.057 --> 00:01:50.058
then allowed back into the JavaScript,
yes, beyond your control, but

43
00:01:50.058 --> 00:01:52.437
that's the whole nature of
asynchronous programming.

44
00:01:52.437 --> 00:01:55.336
You do a single thread
of sending off tasks and

45
00:01:55.336 --> 00:01:59.760
you bring them back in automatically,
ready to be used in function or

46
00:01:59.760 --> 00:02:02.830
their return values or
their response values.

47
00:02:02.830 --> 00:02:07.600
Ready to be used in functionality that
you set up earlier to be called later on.

48
00:02:07.600 --> 00:02:13.750
You get that that the very model of
asynchronous input, output architectures.

49
00:02:13.750 --> 00:02:15.810
You get that that's the design.

50
00:02:15.810 --> 00:02:18.320
But I understand it's not intuitive.

51
00:02:19.570 --> 00:02:23.990
Benefits, super explicit once you
understand how it works under the hood.

52
00:02:23.990 --> 00:02:27.350
The function you parse in
is gonna be auto-triggered.

53
00:02:27.350 --> 00:02:32.840
From the Web browser feature's completion,
back into JavaScript, and then be called

54
00:02:32.840 --> 00:02:35.970
when the Web browser finishes its work,
or Web browser feature finishes its work.

