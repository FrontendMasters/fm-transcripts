WEBVTT

1
00:00:00.054 --> 00:00:04.319
&gt;&gt; Will Sentance: But before we get
to that, you lost me and it's okay.

2
00:00:04.319 --> 00:00:08.681
I'm clear, I have some clarification
questions on this new model of execution.

3
00:00:08.681 --> 00:00:11.609
Everybody thumbs proudly out,
it's okay to have.

4
00:00:11.609 --> 00:00:17.118
Alec has a clarification,
Abdi has more than a clarification.

5
00:00:17.118 --> 00:00:20.295
Brian has a clarification,
Brian do you wanna go first?

6
00:00:20.295 --> 00:00:24.635
&gt;&gt; Brian: Yeah, so this is still
asynchronous when you get down to the,

7
00:00:24.635 --> 00:00:29.820
then we're still adding everything
to the micro task through before it.

8
00:00:29.820 --> 00:00:30.360
&gt;&gt; Will Sentance: It is.

9
00:00:30.360 --> 00:00:34.270
&gt;&gt; Brian: So it was like a console
log after that that would go first.

10
00:00:34.270 --> 00:00:36.120
&gt;&gt; Will Sentance: Absolutely.
If I had, I should have done that.

11
00:00:36.120 --> 00:00:39.916
If I had a console log straight after
this storing the due when dates received

12
00:00:39.916 --> 00:00:43.433
on the then,
&gt;&gt; Will Sentance: On the future date on

13
00:00:43.433 --> 00:00:47.713
fulfillment array and a console.log
straight after, what were to happen.

14
00:00:47.713 --> 00:00:51.845
If I were to block my thread here,
after the assignment to the due when date

15
00:00:51.845 --> 00:00:55.057
received, the future.data's
on fulfillment array.

16
00:00:55.057 --> 00:01:00.109
If I were to have a blocking task
there for while it was infinite,

17
00:01:00.109 --> 00:01:04.694
then my due when date to receive
the triggers inside of it,

18
00:01:04.694 --> 00:01:07.332
entering back into createFlow.

19
00:01:07.332 --> 00:01:10.715
I'd never reach that,
because that's on my micro task queue.

20
00:01:10.715 --> 00:01:12.707
So it's still absolutely asynchronous.

21
00:01:12.707 --> 00:01:17.303
All this is doing, you can almost think of
the code console log, you can almost think

22
00:01:17.303 --> 00:01:20.931
of everything after the yield
statement that threw out the tasks,

23
00:01:20.931 --> 00:01:23.421
that threw out the promise
object feed data.

24
00:01:23.421 --> 00:01:28.112
Think of everything like this as being
like the functionality we want to run on

25
00:01:28.112 --> 00:01:29.490
the date coming back.

26
00:01:29.490 --> 00:01:33.284
Almost think of this as being
the function we pass here,

27
00:01:33.284 --> 00:01:37.820
like think of it as being this here
is our functionality run later.

28
00:01:37.820 --> 00:01:40.435
But now we get to go and run it,

29
00:01:40.435 --> 00:01:46.197
we get to write it as though it's
synchronous code in a function.

30
00:01:46.197 --> 00:01:49.580
We just come back to it only
when we trigger coming back to,

31
00:01:49.580 --> 00:01:52.701
only when we trigger running
due when date received.

32
00:01:52.701 --> 00:01:57.509
Which we then get to manually set,
now I get to go back and run this code.

33
00:01:57.509 --> 00:02:04.128
It's the most control we've had probably
over when our deferred functionality runs.

34
00:02:04.128 --> 00:02:08.690
But in the end, it's still, as by the very
nature of asynchronicity in the language,

35
00:02:08.690 --> 00:02:12.881
beyond our control, because what
triggers returnNextElement.next running

36
00:02:12.881 --> 00:02:15.336
that takes us back in here,
what triggers it?

37
00:02:15.336 --> 00:02:19.053
It's the beyond our control
setting a value property

38
00:02:19.053 --> 00:02:23.190
that beyond our control triggered
due when date received.

39
00:02:24.310 --> 00:02:28.300
But now when we trigger that we just
write inside a command that we did get to

40
00:02:28.300 --> 00:02:30.440
control writing that takes
us back into this function.

41
00:02:30.440 --> 00:02:34.919
But the very nature of a single
thread in asynchronous language

42
00:02:34.919 --> 00:02:36.958
is that you throw out tasks.

43
00:02:36.958 --> 00:02:40.496
In a single thread you throw them out,
and then they come back in, and

44
00:02:40.496 --> 00:02:43.684
run functionality on the return
values beyond your control.

45
00:02:43.684 --> 00:02:47.805
That's their very nature, and
that's why in the end, solution two,

46
00:02:47.805 --> 00:02:51.186
which was the call back model,
in the end it's also true.

47
00:02:51.186 --> 00:02:52.947
It's not a wrong model.

48
00:02:52.947 --> 00:02:54.644
Under the hood it's the same thing.

49
00:02:54.644 --> 00:02:58.110
Under the hood,
we're not doing profoundly more here.

50
00:02:58.110 --> 00:03:01.297
You just increasing readability more and
more.

51
00:03:01.297 --> 00:03:06.435
And in a sense by doing so, hiding
the underlying engine more and more.

52
00:03:06.435 --> 00:03:10.390
And that's arguably a problem of you
don't understand the underlying engine.

53
00:03:10.390 --> 00:03:12.730
If you do,
now you get best of both worlds.

54
00:03:12.730 --> 00:03:15.960
Increased readability and the ability
to understand how it's truly working.

