WEBVTT

1
00:00:00.130 --> 00:00:00.630
&gt;&gt; Will Sentance: Line 1.

2
00:00:00.630 --> 00:00:02.250
What are are we doing?

3
00:00:02.250 --> 00:00:06.110
Sean.
&gt;&gt; Sean: Declaring a new function due when

4
00:00:06.110 --> 00:00:11.490
data received.
&gt;&gt; Will Sentance: Due when data received.

5
00:00:11.490 --> 00:00:16.690
So this is my favorite page of code ever.

6
00:00:16.690 --> 00:00:19.670
This page of code is going to bring
together everything we remember from our

7
00:00:19.670 --> 00:00:25.526
web browser features, everything
from our new generator functions,

8
00:00:25.526 --> 00:00:30.760
our micro-task queue, our event loop,

9
00:00:30.760 --> 00:00:35.390
our crazy new generator functions,
that include our persistent of state.

10
00:00:35.390 --> 00:00:37.550
What you might call closure.

11
00:00:37.550 --> 00:00:40.679
All in one beautiful, complete setup.

12
00:00:44.020 --> 00:00:44.750
Very special.

13
00:00:44.750 --> 00:00:45.730
All right, good.

14
00:00:45.730 --> 00:00:47.330
Function one declared.

15
00:00:47.330 --> 00:00:51.320
Rick, next line.
&gt;&gt; Rick: You declare

16
00:00:51.320 --> 00:00:53.790
a generary function CreateFlow.
&gt;&gt; Will Sentance: Excellent!

17
00:00:54.850 --> 00:00:55.530
Hold on.

18
00:00:55.530 --> 00:00:59.010
There it is with the little star.

19
00:00:59.010 --> 00:00:59.961
Okay.

20
00:00:59.961 --> 00:01:03.981
Next line, Alec?
&gt;&gt; Alec: We

21
00:01:03.981 --> 00:01:08.784
declare a constant return next to element.
&gt;&gt; Will Sentance: Excellent,

22
00:01:08.784 --> 00:01:12.217
thank you, Alex, undefined for now.

23
00:01:12.217 --> 00:01:16.110
Here it goes, here it goes.
&gt;&gt; multiple: [LAUGH]

24
00:01:16.110 --> 00:01:16.755
&gt;&gt; Will Sentance: All right

25
00:01:21.117 --> 00:01:23.133
&gt;&gt; Will Sentance: [LAUGH] The diagramming,

26
00:01:23.133 --> 00:01:25.190
the mega diagram.

27
00:01:25.190 --> 00:01:30.078
I'm gonna put my call stack.
&gt;&gt; Will Sentance: I

28
00:01:30.078 --> 00:01:31.360
think there's room to do it here.

29
00:01:31.360 --> 00:01:35.180
I'm gonna put my full stack here.

30
00:01:36.720 --> 00:01:37.520
I think there's room.

31
00:01:39.280 --> 00:01:44.364
There it is, there's my call stack.
&gt;&gt; Will Sentance: And

32
00:01:44.364 --> 00:01:49.658
I'm gonna put return next element is

33
00:01:49.658 --> 00:01:54.781
the output of calling createFlow,

34
00:01:54.781 --> 00:02:00.587
which is surprisingly, an object known

35
00:02:00.587 --> 00:02:07.260
as a generator object
with a next method on it.

36
00:02:07.260 --> 00:02:11.028
And that's gonna be
stored in what constant,

37
00:02:11.028 --> 00:02:12.999
Brian?
&gt;&gt; Brian: Return next element.

38
00:02:12.999 --> 00:02:14.206
&gt;&gt; Will Sentance: Return next element,

39
00:02:14.206 --> 00:02:18.533
excellent, there it is, into return next
element, with next is just a method.

40
00:02:18.533 --> 00:02:20.668
That's the method we're interested in.

41
00:02:20.668 --> 00:02:23.918
That's the method which
when code should give us

42
00:02:23.918 --> 00:02:26.460
out a next value from our flow of data.

43
00:02:26.460 --> 00:02:31.650
Now,you probably already seen, we only got
one use so we gonna have only one value.

44
00:02:31.650 --> 00:02:32.731
But we could have many.

45
00:02:32.731 --> 00:02:33.900
But, only one here for now.

46
00:02:33.900 --> 00:02:37.971
Good, good.

47
00:02:37.971 --> 00:02:42.547
Next line is what,

48
00:02:42.547 --> 00:02:46.191
Ben?
&gt;&gt; Ben: Declare a constant future data.

49
00:02:46.191 --> 00:02:46.760
&gt;&gt; Will Sentance: Yeah.

50
00:02:46.760 --> 00:02:50.570
Let's just make sure we're in
the global execution context.

51
00:02:50.570 --> 00:02:53.700
Declare constant future data.

52
00:02:55.180 --> 00:02:55.910
There it is.

53
00:02:58.210 --> 00:03:00.180
This really does bring it all together.

54
00:03:00.180 --> 00:03:01.253
So we're gonna be as precise as possible.

55
00:03:01.253 --> 00:03:06.509
Future Data which is the output

56
00:03:06.509 --> 00:03:12.776
of return next element .next call,

57
00:03:12.776 --> 00:03:17.629
which enters what execution

58
00:03:17.629 --> 00:03:23.080
context, Ben?
&gt;&gt; Ben: CreateFlow execution.

59
00:03:23.080 --> 00:03:23.826
&gt;&gt; Will Sentance: CreateFlow

60
00:03:23.826 --> 00:03:25.640
execution context.

61
00:03:25.640 --> 00:03:26.610
There it is.

62
00:03:26.610 --> 00:03:27.470
In it goes.

63
00:03:27.470 --> 00:03:32.580
And by the way, notice how my execution
context, now I don't close them.

64
00:03:33.620 --> 00:03:35.746
Right?
Because I'm not going to exit straight

65
00:03:35.746 --> 00:03:36.359
out of them.

66
00:03:36.359 --> 00:03:40.110
That's what I've done for
both of them, I forgot to say.

67
00:03:40.110 --> 00:03:42.810
Okay, so return NextElement.next.

68
00:03:42.810 --> 00:03:50.500
Because next has this bond to createFlow,
&gt;&gt; Will Sentance: I start executing it.

69
00:03:52.350 --> 00:03:59.000
Into it I go, and what's the first
thing that I declare in my local?

70
00:03:59.000 --> 00:04:00.170
That's too wide.

71
00:04:00.170 --> 00:04:04.929
I declare in my local memory,
Paul, what's the first thing I

72
00:04:04.929 --> 00:04:07.580
declare in my local memory.
&gt;&gt; Paul: Busted.

73
00:04:07.580 --> 00:04:10.000
I was taking notes.
&gt;&gt; multiple: [LAUGH]

74
00:04:10.000 --> 00:04:11.180
&gt;&gt; Will Sentance: That's

75
00:04:11.180 --> 00:04:13.270
more dramatic then I expected.

76
00:04:13.270 --> 00:04:16.556
I'm calling createFlow,
what's the first thing, my first body of,

77
00:04:16.556 --> 00:04:18.615
in the body of createFlow-
&gt;&gt; Paul: Dynamo.

78
00:04:18.615 --> 00:04:19.482
&gt;&gt; Will Sentance: Exactly,

79
00:04:19.482 --> 00:04:23.623
the first thing I declare
is data which is, again,

80
00:04:23.623 --> 00:04:27.585
I'm not correcting anyone's pronunciation.

81
00:04:27.585 --> 00:04:28.746
&gt;&gt; multiple: [LAUGH]
&gt;&gt; Will Sentance: Which is

82
00:04:28.746 --> 00:04:29.560
undefined, right?

83
00:04:29.560 --> 00:04:30.930
Because we've gotta go
to the right hand side.

84
00:04:30.930 --> 00:04:35.510
And the right hand side, of course,
is a super powerful statement.

85
00:04:35.510 --> 00:04:39.350
It's one that's gonna actually
kick us out of createFlow's

86
00:04:39.350 --> 00:04:42.890
execution context before we ever
get to store anything in data.

87
00:04:46.140 --> 00:04:47.160
Let's make it slightly wider.

88
00:04:47.160 --> 00:04:48.680
I don't want to squeeze this too much.

89
00:04:48.680 --> 00:04:49.940
Make it slightly wider.

90
00:04:49.940 --> 00:04:56.256
So data is going to be
the evaluated result of

91
00:04:56.256 --> 00:05:03.449
the expression yield Fetch,
&gt;&gt; Will Sentance: Do I have space for

92
00:05:03.449 --> 00:05:07.838
this?
&gt;&gt; Will Sentance: [LAUGH] Yeah,

93
00:05:07.838 --> 00:05:11.758
there it is.
&gt;&gt; Will Sentance: And Fetch is a function

94
00:05:11.758 --> 00:05:16.917
that is a facade, for a whole, see
that's when we're coming back together,

95
00:05:16.917 --> 00:05:22.830
for a whole bunch of, well, for
a single major feature in the web browser.

96
00:05:22.830 --> 00:05:26.090
But also, it does something in
JavaScript as well, doesn't it?

97
00:05:26.090 --> 00:05:28.340
Let's do the bit it does JavaScript first.

98
00:05:28.340 --> 00:05:32.280
What does it do in JavaScript, Ben?
&gt;&gt; Ben: It creates a promise object.

99
00:05:32.280 --> 00:05:33.250
&gt;&gt; Will Sentance: Exactly, so

100
00:05:33.250 --> 00:05:38.232
the Fetch statement returns
which is going to be returned.

101
00:05:38.232 --> 00:05:43.363
No other data, no other data,
no other data is going to

102
00:05:43.363 --> 00:05:49.278
be returned out the promise object
which is going to be thrown,

103
00:05:49.278 --> 00:05:57.700
it's going to be thrown,unapologetically,
out of that execution context.

104
00:05:57.700 --> 00:06:01.330
To be the output of
return next element.next,

105
00:06:01.330 --> 00:06:04.570
which is stored where, Victor?
&gt;&gt; Victor: Future data.

106
00:06:04.570 --> 00:06:05.610
&gt;&gt; Will Sentance: Future data, excellent.

107
00:06:05.610 --> 00:06:09.392
And this promise object has what

108
00:06:09.392 --> 00:06:14.020
properties by default, Victor?
&gt;&gt; Victor: Value?

109
00:06:14.020 --> 00:06:14.800
&gt;&gt; Will Sentance: Value, which is

110
00:06:14.800 --> 00:06:16.510
undefined, I don't have
anything in it yet.

111
00:06:16.510 --> 00:06:19.570
It has status, which is pending,
you don't have to worry about that.

112
00:06:19.570 --> 00:06:25.540
And it has the hidden one, Unfulfilled,

113
00:06:25.540 --> 00:06:29.595
which is an empty array into which we're
gonna put any functions we want to

114
00:06:29.595 --> 00:06:31.640
auto-trigger when value gets updated.

115
00:06:33.450 --> 00:06:36.205
Okay, and it's gonna be thrown out.

116
00:06:36.205 --> 00:06:42.905
When, it's gonna be yielded out
&gt;&gt; Will Sentance: This

117
00:06:42.905 --> 00:06:45.060
is where we're gonna pause, I guess.

118
00:06:45.060 --> 00:06:53.749
Because it's gonna be thrown out to be
the output of returnNextElement.next so

119
00:06:53.749 --> 00:06:57.850
we returned out that promise object.

120
00:06:59.010 --> 00:07:03.930
To make sure it's clear, it's a promise.
&gt;&gt; Will Sentance: To be the output of

121
00:07:03.930 --> 00:07:08.676
returnNextElement.next, which
is then stored where, Ben?

122
00:07:08.676 --> 00:07:09.731
&gt;&gt; Ben: In future data.

123
00:07:09.731 --> 00:07:12.060
&gt;&gt; Will Sentance: In future data.

124
00:07:12.060 --> 00:07:13.344
So, let's put that over here.

125
00:07:13.344 --> 00:07:18.979
There's our promise object.

126
00:07:18.979 --> 00:07:23.030
Not very nicely drawn.

127
00:07:23.030 --> 00:07:27.920
There's our promise object with
values undefined and unfulfilled

128
00:07:29.620 --> 00:07:34.790
is an empty array into which we're going
to put functionality that we triggered

129
00:07:34.790 --> 00:07:36.470
when value gets updated.

130
00:07:36.470 --> 00:07:38.640
And, of course, I hate saying of course.

131
00:07:38.640 --> 00:07:44.039
And that value is updated when
Fetch''s background web browser

132
00:07:44.039 --> 00:07:49.449
API work Is complete and
passes that value back into JavaScript.

133
00:07:49.449 --> 00:07:52.650
Okay, good.

134
00:07:52.650 --> 00:07:55.090
Be really, really,
really clear with yourself,

135
00:07:55.090 --> 00:08:00.370
that we do not store in data,
this promise object.

136
00:08:00.370 --> 00:08:04.210
We don't get a chance to store anything in
data cuz the yield keyword is so strong.

137
00:08:04.210 --> 00:08:05.630
Imagine like it's a return statement.

138
00:08:05.630 --> 00:08:08.913
You won't store anything,
something assigned to return statement,

139
00:08:08.913 --> 00:08:10.838
you wouldn't even hit that assignment.

140
00:08:10.838 --> 00:08:12.559
The return just threw you out already.

141
00:08:12.559 --> 00:08:14.780
If through this expression,
the result of it.

142
00:08:14.780 --> 00:08:17.970
Not the expression, the evaluated
result of it, of its command.

143
00:08:17.970 --> 00:08:21.150
Which is the promise object
out in the futureData.

144
00:08:21.150 --> 00:08:23.460
As being the output of a next
call which took us in here and

145
00:08:23.460 --> 00:08:25.300
the next call took us in
here in the first place.

146
00:08:25.300 --> 00:08:27.780
And then we'd flow out in the futureData.

147
00:08:30.180 --> 00:08:33.120
But we're not finished with fetch yet.

148
00:08:33.120 --> 00:08:40.880
Fetch does a wealth of
stuff in our web browser.

149
00:08:40.880 --> 00:08:42.100
So here it is.

150
00:08:42.100 --> 00:08:46.010
Our web browser features.

151
00:08:49.350 --> 00:08:50.360
That is not good.

152
00:08:50.360 --> 00:08:51.830
Our web browser features.

153
00:08:57.350 --> 00:08:57.860
There it is.

154
00:08:58.920 --> 00:09:04.357
And what is the thing that fetch spins

155
00:09:04.357 --> 00:09:09.280
up in our web browser?
&gt;&gt; Blessing: XMLHttpRequest.

156
00:09:09.280 --> 00:09:11.093
&gt;&gt; Will Sentance: XMLHttpReques,

157
00:09:11.093 --> 00:09:13.030
the XHPR feature.

158
00:09:13.030 --> 00:09:17.810
Look at this everyone it all comes back
together what properties doesn't it need

159
00:09:17.810 --> 00:09:20.620
to know Blessing?
&gt;&gt; Blessing: The URL.

160
00:09:20.620 --> 00:09:21.380
&gt;&gt; Will Sentance: Excellent.

161
00:09:21.380 --> 00:09:22.570
&gt;&gt; Blessing: The path.

162
00:09:22.570 --> 00:09:24.590
&gt;&gt; Will Sentance: The path which is

163
00:09:25.680 --> 00:09:26.480
that.
&gt;&gt; Blessing: And

164
00:09:26.480 --> 00:09:27.580
the type.
&gt;&gt; Will Sentance: Exactly.

165
00:09:27.580 --> 00:09:29.259
The method type which is get.

166
00:09:29.259 --> 00:09:34.112
And now that's going to be kicking off

167
00:09:34.112 --> 00:09:39.267
a request, an HTTP request to Twitter,

168
00:09:39.267 --> 00:09:44.330
there it is,
&gt;&gt; Will Sentance: Good.

169
00:09:44.330 --> 00:09:46.740
All right, is it complete yet?

170
00:09:48.250 --> 00:09:50.130
Well at what time are we at?

171
00:09:50.130 --> 00:09:54.850
We're at something like here, I don't
know, let's just say it's one millisecond,

172
00:09:54.850 --> 00:09:57.540
we're at one millisecond,
is it complete yet,

173
00:09:57.540 --> 00:09:58.445
Blessing, at 1 millisecond?
&gt;&gt; Blessing: No.

174
00:09:58.445 --> 00:09:58.945
&gt;&gt; Will Sentance: No.

175
00:09:58.945 --> 00:10:00.783
He's going to go and get the data.

176
00:10:00.783 --> 00:10:02.713
It's going to take a bit of time to go and

177
00:10:02.713 --> 00:10:04.710
get that data.
On completion,

178
00:10:04.710 --> 00:10:09.080
Blessing, what do we want to update?

179
00:10:09.080 --> 00:10:12.086
What value do we want to
update back in Java Script?

180
00:10:12.086 --> 00:10:13.049
&gt;&gt; Blessing: futureData.value.

181
00:10:13.049 --> 00:10:15.157
&gt;&gt; Will Sentance: futureData.value

182
00:10:15.157 --> 00:10:20.000
excellent is gonna be the returned data.

183
00:10:20.000 --> 00:10:23.960
Perfect, now we have
finished fetch's work.

184
00:10:25.560 --> 00:10:27.900
We yielded out the object.

185
00:10:29.330 --> 00:10:33.890
Remember, return next element dot next
did nothing particularly interesting

186
00:10:33.890 --> 00:10:34.400
with next.

187
00:10:34.400 --> 00:10:37.943
All it did was kick off
createFlow's execution context.

188
00:10:37.943 --> 00:10:41.677
We went inside, we set up data but
we didn't even assign anything to it.

189
00:10:41.677 --> 00:10:45.772
Because the right hand side said go fetch,
which returned out a promise but

190
00:10:45.772 --> 00:10:47.310
then it said yield.

191
00:10:47.310 --> 00:10:51.660
Meaning throw the return value of this
right hand side bit out to be the output

192
00:10:51.660 --> 00:10:54.180
of the returnNextElement.next
that took us into createFlow.

193
00:10:54.180 --> 00:10:58.839
And that output, I'm gonna put it here,
it needs to be really clear.

194
00:10:58.839 --> 00:11:04.973
That output object,
&gt;&gt; Will Sentance: Got

195
00:11:04.973 --> 00:11:07.570
stored in computer data, excellent.

196
00:11:09.280 --> 00:11:13.220
Okay, we're now finished
all the fetch work.

197
00:11:13.220 --> 00:11:17.030
We've yielded back out,
back into global execution context.

198
00:11:17.030 --> 00:11:21.070
The last line in global as futureData
is the thing that kicked off createFlow

199
00:11:21.070 --> 00:11:26.035
with back out and the next line of
the global execution context is what,

200
00:11:26.035 --> 00:11:27.491
Abdee?

201
00:11:27.491 --> 00:11:30.410
&gt;&gt; Abdi: futureData.then.
&gt;&gt; Will Sentance: Excellent,

202
00:11:30.410 --> 00:11:30.916
very good, man.

203
00:11:30.916 --> 00:11:35.315
futureData.then to which we're passing

204
00:11:35.315 --> 00:11:40.510
the entire display function definition.

205
00:11:40.510 --> 00:11:47.879
Do we remember what that does,
Abdee, to the futureData object?

206
00:11:47.879 --> 00:11:49.769
Do you remember what then

207
00:11:49.769 --> 00:11:52.557
does with the display?
&gt;&gt; Abdi: Yeah,

208
00:11:52.557 --> 00:11:55.113
we're passing in the unfulfillment.
&gt;&gt; Will Sentance: Exactly.

209
00:11:55.113 --> 00:11:58.618
&gt;&gt; Abdi: I think.

210
00:11:58.618 --> 00:12:00.576
&gt;&gt; Will Sentance: Exactly, did I switch it

211
00:12:00.576 --> 00:12:03.860
from unfulfillment to unfulfilled?
&gt;&gt; Abdi: Yes.

212
00:12:05.240 --> 00:12:06.230
&gt;&gt; Will Sentance: It's a hidden property,

213
00:12:06.230 --> 00:12:08.249
it's unfulfillment.
&gt;&gt; Brian: This function's also

214
00:12:08.249 --> 00:12:11.290
called doWhenDataReceived, not display.
&gt;&gt; Will Sentance: Shit okay,

215
00:12:11.290 --> 00:12:16.690
all right we're losing it, we're
losing it okay, good, thank you James.

216
00:12:16.690 --> 00:12:21.190
And it's unfulillment is what it says
in the actual spec if I remember right.

217
00:12:21.190 --> 00:12:22.400
I mean, we don't get to see this.

218
00:12:22.400 --> 00:12:23.710
We can't even access these properties, so

219
00:12:23.710 --> 00:12:25.860
I guess it's not the end
of the world what it is.

220
00:12:25.860 --> 00:12:26.780
We just know it's there.

221
00:12:27.950 --> 00:12:28.810
But we can't even access it.

222
00:12:28.810 --> 00:12:31.230
We can't console log it.

223
00:12:32.320 --> 00:12:33.060
Yeah, unfulfilment.

224
00:12:33.060 --> 00:12:36.210
I think it's unfulfilled.

225
00:12:36.210 --> 00:12:37.015
Okay, whatever.

226
00:12:37.015 --> 00:12:40.890
&gt;&gt; multiple: [LAUGH]
&gt;&gt; Will Sentance: Maybe it's

227
00:12:40.890 --> 00:12:41.790
on fulfillment.

228
00:12:41.790 --> 00:12:43.800
Anyway, it doesn't matter
because we can't even access it.

229
00:12:43.800 --> 00:12:48.040
We just know it is the collection of
functions that will be auto triggered.

230
00:12:48.040 --> 00:12:53.860
And exactly we're passing
doWhenDataReceived, not displayed.

231
00:12:53.860 --> 00:12:56.830
Sorry, doWhenDataReceived.

232
00:12:56.830 --> 00:12:59.820
Are we calling that function here, James?
&gt;&gt; James: No.

233
00:12:59.820 --> 00:13:00.780
&gt;&gt; Will Sentance: No, what are we doing

234
00:13:00.780 --> 00:13:03.880
with it?
&gt;&gt; James: Adding it to the unfulfillment

235
00:13:03.880 --> 00:13:05.090
list.
&gt;&gt; Will Sentance: Hooray, exactly.

236
00:13:05.090 --> 00:13:06.370
List, exactly right.

237
00:13:06.370 --> 00:13:10.610
There it is, due when,
that's all that we're interested in,

238
00:13:10.610 --> 00:13:15.600
dot then doing,
passing that function to the unfulfillment

239
00:13:15.600 --> 00:13:19.640
collection of functions which will be
auto triggered when value gets updated.

240
00:13:20.640 --> 00:13:22.750
All right and to be continue on.

241
00:13:24.670 --> 00:13:28.740
We continue, we continue on now.

242
00:13:29.890 --> 00:13:32.500
And our global execution
context work is done.

243
00:13:33.760 --> 00:13:37.626
So, we set up everything.

244
00:13:37.626 --> 00:13:42.310
We have in JavaScript a promise

245
00:13:42.310 --> 00:13:47.170
object with a function that's ready to be
triggered when the value gets updated.

246
00:13:47.170 --> 00:13:49.861
Let's take a little preview at
that function, doWhenDataReceived.

247
00:13:49.861 --> 00:13:51.860
Look what it's running.

248
00:13:51.860 --> 00:13:55.556
It's running something that's going to
take us back in to continue running our

249
00:13:55.556 --> 00:14:00.362
code inside of the createFlow function.
&gt;&gt; Will Sentance: First time ever we've

250
00:14:00.362 --> 00:14:04.584
been able to write pseudo synchronous
ordered code which we exit from and

251
00:14:04.584 --> 00:14:05.560
come back into.

252
00:14:05.560 --> 00:14:10.770
We're going to trigger it's going
back into it using this .next method.

253
00:14:10.770 --> 00:14:12.690
Going back into createFlow.

254
00:14:12.690 --> 00:14:17.810
So we set that up to happen
in the web browser itself.

255
00:14:17.810 --> 00:14:20.340
We set up the background task to go and
speak to the Internet.

256
00:14:20.340 --> 00:14:22.220
Fetch did that for us.

257
00:14:22.220 --> 00:14:28.790
We exited out of this execution context to
createFlow that we got into using .next.

258
00:14:28.790 --> 00:14:30.050
We exited out of it.

259
00:14:30.050 --> 00:14:35.110
We attached the function to the promise
object that we passed out to futureData.

260
00:14:35.110 --> 00:14:39.845
Knowing that when our background
work completes, value of

261
00:14:39.845 --> 00:14:44.070
futureData is going to update it, it's
gonna also trigger doWhenDataReceived.

262
00:14:44.070 --> 00:14:49.178
Which hopefully has written in
it the functionality to take

263
00:14:49.178 --> 00:14:55.206
us back in to this execution context
with our value from the background

264
00:14:55.206 --> 00:15:02.580
work as an input that this yield statement
will evaluate to, just like we did before.

265
00:15:02.580 --> 00:15:06.391
We're going to pass the value in and
the last yield expression will evaluate to

266
00:15:06.391 --> 00:15:08.770
whatever we pass back in
the execution context.

267
00:15:10.230 --> 00:15:10.916
Crazy.
Crazy, crazy, crazy.

268
00:15:10.916 --> 00:15:12.457
All right, here we go.

269
00:15:12.457 --> 00:15:16.106
Time's gone by in the background,

270
00:15:16.106 --> 00:15:22.681
200 milliseconds have gone by and
our data is on its way back.

271
00:15:22.681 --> 00:15:26.739
So Blessing, at 201 milliseconds is our

272
00:15:26.739 --> 00:15:29.499
background work complete?
&gt;&gt; Blessing: Yes.

273
00:15:29.499 --> 00:15:30.904
&gt;&gt; Will Sentance: And we brought

274
00:15:30.904 --> 00:15:34.580
back our dear API response.

275
00:15:34.580 --> 00:15:38.283
Which is high and Blessing,
what are we gonna update with that high?

276
00:15:38.283 --> 00:15:40.495
&gt;&gt; Blessing: futureData.value.

277
00:15:40.495 --> 00:15:42.753
&gt;&gt; Will Sentance: futureData.value,

278
00:15:42.753 --> 00:15:44.070
excellent.

279
00:15:44.070 --> 00:15:46.940
There it is, which is gonna auto trigger.

280
00:15:46.940 --> 00:15:49.816
Well, let's be complete about this.

281
00:15:49.816 --> 00:15:54.270
It's gonna trigger the unfulfilment
array of functions to be called, but

282
00:15:54.270 --> 00:15:55.740
we don't get to call them straightaway.

283
00:15:55.740 --> 00:15:56.310
So instead,

284
00:15:56.310 --> 00:16:00.380
it's going to do what, Blessing?
&gt;&gt; Blessing: It's going to get into

285
00:16:00.380 --> 00:16:04.730
the microtask queue.
&gt;&gt; Will Sentance: Into the microtask Q.

286
00:16:04.730 --> 00:16:11.990
There it is, and there's the event loop.

287
00:16:11.990 --> 00:16:14.480
Into the microtask queue,
do when data received goes.

288
00:16:14.480 --> 00:16:22.868
Do when data received is past
the microtask queue at about,

289
00:16:22.868 --> 00:16:29.261
let's just say about 201 milliseconds.

290
00:16:29.261 --> 00:16:33.802
At which point we check with, it was
something like two milliseconds that we've

291
00:16:33.802 --> 00:16:36.640
finished our synchronous code executing.

292
00:16:36.640 --> 00:16:41.530
Time's past, and
we're now at 201 milliseconds.

293
00:16:41.530 --> 00:16:44.383
Is there anything in our call
stack at this point blessing?

294
00:16:44.383 --> 00:16:47.003
No, it's all done,
there's no global code left to run.

295
00:16:47.003 --> 00:16:50.450
So the event loop goes, hurray!

296
00:16:50.450 --> 00:16:52.850
You're clear to add stuff
from the microtask queue.

297
00:16:52.850 --> 00:16:53.450
Which we do.

298
00:16:53.450 --> 00:16:58.640
We add do when data received.

299
00:17:01.190 --> 00:17:03.060
And what's that input to it, Blessing?

300
00:17:04.560 --> 00:17:07.280
What's that input to
do when data received?

301
00:17:07.280 --> 00:17:08.470
&gt;&gt; Blessing: The value, which is high.

302
00:17:08.470 --> 00:17:09.210
&gt;&gt; Will Sentance: The value,

303
00:17:09.210 --> 00:17:12.370
which is high,
because the value being filled in and

304
00:17:12.370 --> 00:17:17.072
the status going to resolved.

305
00:17:17.072 --> 00:17:20.680
They're three statuses, but
they have multiple different names for

306
00:17:20.680 --> 00:17:22.410
them in different parts of the spec.

307
00:17:22.410 --> 00:17:26.030
This function is going to be triggered
with the value as its input.

308
00:17:26.030 --> 00:17:31.080
And so,
we pass the value high as the input, and

309
00:17:31.080 --> 00:17:36.680
at 201 milliseconds, we call do when data

310
00:17:36.680 --> 00:17:41.730
received with the value of high.

311
00:17:41.730 --> 00:17:44.660
We create an execution context for it.

312
00:17:46.440 --> 00:17:48.710
What's the first thing
in its local memory?

313
00:17:50.140 --> 00:17:52.232
Blessing.
&gt;&gt; Blessing: Value.

314
00:17:52.232 --> 00:17:54.019
&gt;&gt; Will Sentance: Which is set to?

315
00:17:54.019 --> 00:17:54.619
&gt;&gt; Blessing: Which is set to

316
00:17:54.619 --> 00:17:57.530
the argument high.
&gt;&gt; Will Sentance: To the argument high.

317
00:17:57.530 --> 00:17:58.030
Excellent.

318
00:17:59.670 --> 00:18:03.018
And what's the first line, Paul,
in the body of this function say to do?

319
00:18:03.018 --> 00:18:10.035
&gt;&gt; Paul: It says call the property.

320
00:18:10.035 --> 00:18:14.262
[CROSSTALK] Next on the generator object

321
00:18:14.262 --> 00:18:17.346
return next to it.
&gt;&gt; Will Sentance: Absolutely,

322
00:18:17.346 --> 00:18:20.540
with what value path to it?
&gt;&gt; Paul: The string pi value.

323
00:18:20.540 --> 00:18:21.550
&gt;&gt; Will Sentance: Excellent.

324
00:18:21.550 --> 00:18:23.550
And what does this next do?

325
00:18:23.550 --> 00:18:28.077
It takes us back into create
values execution context,

326
00:18:28.077 --> 00:18:33.583
at the position that it left out,
it exited with a yield statement.

327
00:18:33.583 --> 00:18:36.636
And the thing we pass to
it is the evaluated result,

328
00:18:36.636 --> 00:18:40.542
that is the right-hand side never
got to be evaluated to a value,

329
00:18:40.542 --> 00:18:44.830
to an actual thing, to be stored
on the left-hand side of data.

330
00:18:44.830 --> 00:18:47.810
We were booted out before we
got to store anything in data.

331
00:18:47.810 --> 00:18:49.110
But now we come back in.

332
00:18:49.110 --> 00:18:51.990
Whatever we pass into next

333
00:18:51.990 --> 00:18:55.750
is what the last yield statement on
the right-hand side will evaluate to.

334
00:18:55.750 --> 00:18:59.110
And so we get to evaluate it to high.

335
00:18:59.110 --> 00:19:01.550
Add data that came back from the Internet.

336
00:19:01.550 --> 00:19:06.340
Pass to value, pass to the due and
data received, pass to the next inside of

337
00:19:06.340 --> 00:19:11.780
there, pass back to be the evaluated
results of the yield expression.

338
00:19:11.780 --> 00:19:15.590
My goodness, and
we're gonna store that, Blessing,

339
00:19:15.590 --> 00:19:18.740
in what constant inside of Create Flow?
&gt;&gt; Blessing: Data.

340
00:19:18.740 --> 00:19:20.350
&gt;&gt; Will Sentance: Exactly.

341
00:19:20.350 --> 00:19:21.592
And there it is.

342
00:19:21.592 --> 00:19:26.452
And then we get to continue in our
pseudosynchronous execution context

343
00:19:26.452 --> 00:19:30.016
thread that continues
through our create flow, and

344
00:19:30.016 --> 00:19:34.229
what's the next line we hit, Ben?
&gt;&gt; Ben: It's a line about data.

345
00:19:34.229 --> 00:19:36.985
And it's the high.
&gt;&gt; Will Sentance: It's the high.

346
00:19:36.985 --> 00:19:39.220
And look at that, people.

347
00:19:39.220 --> 00:19:41.460
I genuinely think this
is absolutely beautiful.

348
00:19:41.460 --> 00:19:46.553
For the first time
&gt;&gt; Will Sentance: In history we

349
00:19:46.553 --> 00:19:51.886
get to exit a function, we get to show

350
00:19:51.886 --> 00:19:58.782
code that I want to do to
set off a long term task.

351
00:19:58.782 --> 00:20:02.504
Then exit out of the function, continue
with synchronous code and then when that

352
00:20:02.504 --> 00:20:06.500
long-term task value comes back, trigger,
it's going back into the function, and

353
00:20:06.500 --> 00:20:09.230
continuing within that
same function block.

354
00:20:09.230 --> 00:20:15.180
Now we get to think of our code
that's deferred, the console log,

355
00:20:15.180 --> 00:20:20.710
to be run until we get data
filled in with an actual value.

356
00:20:20.710 --> 00:20:25.480
We get to write it immediately below,
in logical steps,

357
00:20:25.480 --> 00:20:27.330
the code that kicked that work off.

358
00:20:28.350 --> 00:20:29.210
A first time ever.

359
00:20:29.210 --> 00:20:35.010
All right, so this is profoundly hard, and

360
00:20:35.010 --> 00:20:39.770
you can see it brought everything we've
done together, but let's have thumbs.

361
00:20:39.770 --> 00:20:42.560
In a moment we're gonna
clean all of this up.

362
00:20:42.560 --> 00:20:46.700
We're going to auto trigger
not a function here,

363
00:20:46.700 --> 00:20:50.460
we're going to instead auto trigger
the next block of code in here.

364
00:20:50.460 --> 00:20:54.124
We're not going to trigger a function
that then triggers us going back in here.

365
00:20:54.124 --> 00:20:57.090
We're instead just gonna
trigger straight from here,

366
00:20:57.090 --> 00:20:59.371
continuing our code inside the function.

367
00:20:59.371 --> 00:21:03.995
Using a new way of defining our
generated functions, called async/await.

