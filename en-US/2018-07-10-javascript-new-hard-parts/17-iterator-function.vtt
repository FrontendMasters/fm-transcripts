WEBVTT

1
00:00:00.020 --> 00:00:01.404
&gt;&gt; Will Sentance: Here we go.
When the function inner

2
00:00:01.404 --> 00:00:03.490
is defined it gets a bond to
surrounding local memory.

3
00:00:03.490 --> 00:00:05.590
You got that bit in which
it's being defined.

4
00:00:05.590 --> 00:00:08.330
We return out the function known as inner.

5
00:00:08.330 --> 00:00:12.500
The surrounding live data is returned
too attach the back of the function

6
00:00:12.500 --> 00:00:16.290
definition itself, which we then give
a new global label, returnNextElement.

7
00:00:16.290 --> 00:00:19.911
When we call returnNextElement and
don't find array or i and

8
00:00:19.911 --> 00:00:22.538
it's local immediate execution context,

9
00:00:22.538 --> 00:00:27.350
we look into the function
definition's backpack of live data.

10
00:00:27.350 --> 00:00:29.440
The backpack has some official names.

11
00:00:29.440 --> 00:00:31.050
Okay, let's first say,

12
00:00:31.050 --> 00:00:34.396
how is this bond to the backpack
actually stored on the function?

13
00:00:34.396 --> 00:00:38.110
It's stored in a hidden property, we can
actually see it in the Chrome dev tools.

14
00:00:38.110 --> 00:00:44.079
We can't access it meaningfully,
[[scope]].

15
00:00:44.079 --> 00:00:47.447
If you were to console.log
return next element,

16
00:00:47.447 --> 00:00:51.307
press a little down arrow,
you'd see [[scopes]].

17
00:00:51.307 --> 00:00:57.147
And that will have stored in it, so
it's on this hidden property scope,

18
00:00:57.147 --> 00:01:01.470
and that would have stored
in it all this data, okay?

19
00:01:02.890 --> 00:01:07.245
So with that in mind,
by the way, in general,

20
00:01:07.245 --> 00:01:12.609
a language who's rules, or
it's rule about what data is

21
00:01:12.609 --> 00:01:17.638
available to you is about
where the function is born,

22
00:01:17.638 --> 00:01:24.470
where it was defined,
is known as a lexically-scoped language.

23
00:01:24.470 --> 00:01:29.370
That means a language that says,
where you defined me is what determines,

24
00:01:29.370 --> 00:01:33.340
the positioning of my definition inside
another function, is what determines

25
00:01:33.340 --> 00:01:36.500
what data I have available to me when
I'm eventually run, eventually called.

26
00:01:36.500 --> 00:01:38.270
Wherever you end up calling me.

27
00:01:38.270 --> 00:01:42.790
Because I attached the data from
around me when I was born, to me.

28
00:01:42.790 --> 00:01:46.310
That's the first place I look, besides
the function execution context itself.

29
00:01:46.310 --> 00:01:50.860
That is known as a lexically scoped
language, as opposed to a dynamically.

30
00:01:50.860 --> 00:01:53.780
It's called a statically scoped language,
lexically or statically.

31
00:01:53.780 --> 00:01:55.690
Statically or lexically-scoped language.

32
00:01:56.940 --> 00:02:00.770
You could very easily imagine a language
where the next place I'd look is global.

33
00:02:00.770 --> 00:02:02.110
Not JavaScript.

34
00:02:02.110 --> 00:02:05.240
Is a statically or
lexically-scoped language.

35
00:02:05.240 --> 00:02:09.850
So we can call this backpack of data,
wanna be really fancy?

36
00:02:09.850 --> 00:02:15.224
We can call it a persistent lexical scope.

37
00:02:15.224 --> 00:02:19.440
This is our lexical scope bond,
or reference,

38
00:02:19.440 --> 00:02:22.580
persistent lexical scope reference data.

39
00:02:23.670 --> 00:02:24.620
Very catchy.

40
00:02:24.620 --> 00:02:27.270
Persistent lexical scope reference data.

41
00:02:27.270 --> 00:02:28.350
It's very literal.

42
00:02:30.240 --> 00:02:32.675
Go and say that in your senior
year engineering interviews,

43
00:02:32.675 --> 00:02:34.869
they'll be very happy with you.
&gt;&gt; [LAUGH]

44
00:02:34.869 --> 00:02:36.093
&gt;&gt; Will Sentance: You may also remember

45
00:02:36.093 --> 00:02:39.710
that the memory is called
the variable environment.

46
00:02:39.710 --> 00:02:42.180
That means that the variables
is available to you around.

47
00:02:42.180 --> 00:02:47.160
So you can call it also the variable
environment has been enclosed,

48
00:02:47.160 --> 00:02:48.270
closed over.

49
00:02:48.270 --> 00:02:50.170
And returned out of the function.

50
00:02:50.170 --> 00:02:55.746
So, you might call it
the Closed Over Variable Environment,

51
00:02:55.746 --> 00:03:00.060
the COVE.
&gt;&gt; Will Sentance: Also not catchy.

52
00:03:00.060 --> 00:03:03.500
People intuitively call it the backpack.

53
00:03:03.500 --> 00:03:06.330
People also unfortunately
I think unintuitively but

54
00:03:06.330 --> 00:03:11.550
colloquially typically call it,
that's the best name.

55
00:03:11.550 --> 00:03:15.220
Typically call it the closure.

56
00:03:15.220 --> 00:03:19.108
You'll hear engineers say put
those values in the closure.

57
00:03:19.108 --> 00:03:23.377
Why I don't love that name is because
firstly, it doesn't make sense.

58
00:03:23.377 --> 00:03:28.598
But secondly, we call the whole concept
closure, the idea of functions persisting

59
00:03:28.598 --> 00:03:33.540
their lexical scope references, their
surrounding data when they were born.

60
00:03:33.540 --> 00:03:36.950
We call the whole concept closure,
and we call the backpack the closure.

61
00:03:36.950 --> 00:03:40.180
So I think that's just a bit
too much under one label.

62
00:03:40.180 --> 00:03:43.060
And certainly a label doesn't
mean that much to me anyway.

63
00:03:43.060 --> 00:03:44.710
So I like the name backpack but

64
00:03:44.710 --> 00:03:48.160
people tend to call this
backpack of data the closure.

65
00:03:48.160 --> 00:03:52.870
It is to say that our functions
get to have memories.

66
00:03:52.870 --> 00:03:54.740
Not their local memory that
gets deleted each time but

67
00:03:54.740 --> 00:03:58.400
a persistent cache of data attached
to their very down definition.

68
00:03:59.420 --> 00:04:01.736
Meaning we can have
a function that when called,

69
00:04:01.736 --> 00:04:06.040
doesn't find data inside itself and looks
in its persistent cache attached to it.

70
00:04:06.040 --> 00:04:08.660
All bundled up on a single function.

71
00:04:08.660 --> 00:04:09.733
It's a pretty beautiful design.

72
00:04:09.733 --> 00:04:14.894
All right, returnNextElement,
that function has everything we need,

73
00:04:14.894 --> 00:04:19.424
by the way, the only way you can get
a backpack in a meaningful way is to

74
00:04:19.424 --> 00:04:23.250
return the function
from where it was born.

75
00:04:23.250 --> 00:04:24.900
Is to return the function and

76
00:04:24.900 --> 00:04:28.600
bring with it the data,
that's how you get that persistent data.

77
00:04:28.600 --> 00:04:35.515
So returnNextElement has everything
we need all bundled up in it.

78
00:04:35.515 --> 00:04:38.436
It has the underlying array in
the backpack, it has the position

79
00:04:38.436 --> 00:04:42.330
we're currently in, in our flow of
elements coming out to us in the backpack.

80
00:04:42.330 --> 00:04:46.830
And the ability when it's run when
the function actually itself has run

81
00:04:46.830 --> 00:04:48.760
to return out that next element.

82
00:04:49.870 --> 00:04:53.589
This relies completely on the special
property of functions in Java that also

83
00:04:53.589 --> 00:04:56.963
were born inside other functions and
returned, they get a backpack of

84
00:04:56.963 --> 00:05:00.075
persistent data that they have
access to when they're called.

85
00:05:00.075 --> 00:05:02.631
What is the posh name for
returnNextElement?

86
00:05:02.631 --> 00:05:03.342
Who knows the posh name for

87
00:05:03.342 --> 00:05:07.604
returnNextElement?
&gt;&gt; Will Sentance: It's known as

88
00:05:07.604 --> 00:05:09.110
an iterator.

89
00:05:09.110 --> 00:05:14.360
Any function that when called gives me out
the next element from my flow of data.

90
00:05:15.360 --> 00:05:17.580
My collection of data
gives me the next element.

91
00:05:17.580 --> 00:05:21.570
And when I run it I switch on the flow and
get the returning next element,

92
00:05:21.570 --> 00:05:24.050
I run the function again, I switch
on the flow, get the fnext element.

93
00:05:24.050 --> 00:05:26.460
That is known as an iterator function.

94
00:05:26.460 --> 00:05:27.890
It gives me one by one,

95
00:05:27.890 --> 00:05:31.790
every time it's called my next
element from my underlying collection.

96
00:05:31.790 --> 00:05:34.620
I refer the name returnNextElement,
we call these iterators.

97
00:05:34.620 --> 00:05:37.945
All right, so iterators I'm gonna
go to pairing in a second and

98
00:05:37.945 --> 00:05:40.155
then we're gonna come back to discover.

99
00:05:40.155 --> 00:05:43.360
Here, what our flow of data is, is preset.

100
00:05:43.360 --> 00:05:45.260
We can't go back and change it.

101
00:05:45.260 --> 00:05:49.900
It was sort of preset from at moment we
created the returnNextElement function,

102
00:05:49.900 --> 00:05:51.580
which was born inside create function.

103
00:05:51.580 --> 00:05:52.640
We can't go back and change it.

104
00:05:54.720 --> 00:06:00.150
I mean we could design returnNextElement
in some way to be able to mutate it.

105
00:06:00.150 --> 00:06:02.500
But, basically we can't go back and
change it.

106
00:06:02.500 --> 00:06:07.090
We're gonna discover in our next session,
there's now a new way of dynamically

107
00:06:07.090 --> 00:06:12.030
controlling the values that come out of
that flow, known as generator functions.

108
00:06:12.030 --> 00:06:16.120
But first, iterators turn our data,
our collections of numbers,

109
00:06:16.120 --> 00:06:19.070
or list, or whatever, into streams,

110
00:06:19.070 --> 00:06:23.540
into flows of actual values that
we can access one after another.

111
00:06:23.540 --> 00:06:26.367
No longer are we getting
a static list of elements and

112
00:06:26.367 --> 00:06:29.540
we go grab element at zero,
go grab element at one.

113
00:06:29.540 --> 00:06:34.410
Now we run a function and it gives us
the next element, one by one by one.

114
00:06:36.000 --> 00:06:38.956
Now we have functions that
hold our underlying array,

115
00:06:38.956 --> 00:06:41.077
the position we're currently in, and

116
00:06:41.077 --> 00:06:45.461
return out the next item in the streams
of elements from our array when it's run.

117
00:06:45.461 --> 00:06:49.091
This [INAUDIBLE] has our for
loops, known as for of loops,

118
00:06:49.091 --> 00:06:52.720
that show us the element
itself in the body of a loop.

119
00:06:52.720 --> 00:06:55.070
No accessing some from
some array the position,

120
00:06:55.070 --> 00:06:58.040
and you'll see these in the challenges,
but rather instead

121
00:06:58.040 --> 00:07:01.785
actually give us out into the body
of our for loop the actual element.

122
00:07:01.785 --> 00:07:05.210
Cuz behind the scenes it's
running returnNextElement.

123
00:07:05.210 --> 00:07:07.957
And returning that individual element and
giving it the label, I don't know,

124
00:07:07.957 --> 00:07:10.594
whatever you want, element, next element,
whatever you want to call it.

125
00:07:10.594 --> 00:07:16.586
And more deeply it allows us to rethink
our collections, our static lists of data,

126
00:07:16.586 --> 00:07:21.891
our arrays as flows of elements cuz most
of the time we store a list of data,

127
00:07:21.891 --> 00:07:25.935
we don't really care about it so
much as a static thing.

128
00:07:25.935 --> 00:07:28.800
We want to be able to get
the elements one by one.

129
00:07:28.800 --> 00:07:30.829
That's actually what we want to
do with it most of the time.

130
00:07:30.829 --> 00:07:32.611
We're not just sort of
just leaving it there,

131
00:07:32.611 --> 00:07:34.400
we want to get the elements
out one by one.

132
00:07:34.400 --> 00:07:37.000
And maybe conflate them, join them
together, do something with them.

133
00:07:38.170 --> 00:07:42.570
It allows us to rethink arrays
as flows of elements themselves.

134
00:07:42.570 --> 00:07:46.492
Which we can interact with by calling
a function that switches that flow on to

135
00:07:46.492 --> 00:07:48.037
give us out our next element.

136
00:07:48.037 --> 00:07:54.248
We have truly separated, decoupled, the
process of accessing each of our elements,

137
00:07:54.248 --> 00:07:58.604
from what we end up wanting to
do to our individual elements.

