WEBVTT

1
00:00:00.012 --> 00:00:02.030
&gt;&gt; Will Sentance: Solution
3: Using two-pronged,

2
00:00:02.030 --> 00:00:05.510
they do two things at the same time,
they do two things at the same time.

3
00:00:05.510 --> 00:00:08.820
One in JavaScript,
one outside of Java on the web browser.

4
00:00:08.820 --> 00:00:14.460
Facade functions that both initiate
background web browser work and

5
00:00:15.550 --> 00:00:19.670
in JavaScript, return a placeholder object
known as a promise object immediately,

6
00:00:19.670 --> 00:00:22.000
that's gonna be filled in later on.

7
00:00:22.000 --> 00:00:27.390
With a value from the background web
browser work, web browser features work.

8
00:00:27.390 --> 00:00:28.530
Okay, here we go.

9
00:00:28.530 --> 00:00:31.080
We're gonna walk through
it very precisely.

10
00:00:33.200 --> 00:00:37.340
Line one,
Michele who knows to do this very slowly.

11
00:00:38.770 --> 00:00:44.830
Michele, what are we doing
very slowly in our first,

12
00:00:44.830 --> 00:00:45.890
I'm just gonna go slowly as well.

13
00:00:45.890 --> 00:00:48.876
Very slowly Michelle,

14
00:00:48.876 --> 00:00:53.660
in our first line of code, Michelle.

15
00:00:53.660 --> 00:00:57.150
What are we doing?
&gt;&gt; [LAUGH]

16
00:00:57.150 --> 00:00:58.806
&gt;&gt; Will Sentance: In our first ally go,

17
00:00:58.806 --> 00:01:02.892
Michelle?
&gt;&gt; Michelle: We are using JavaScript to

18
00:01:02.892 --> 00:01:06.020
declare [LAUGH] in memory-
&gt;&gt; Will Sentance: Very good,

19
00:01:06.020 --> 00:01:07.210
that's very explicit, excellent.

20
00:01:07.210 --> 00:01:10.830
A function that we are calling display.

21
00:01:10.830 --> 00:01:13.300
We're naming it, be careful,
I say calling as well, but

22
00:01:13.300 --> 00:01:16.390
that sort of indicates we're running it.
&gt;&gt; Will Sentance: We're naming display,

23
00:01:16.390 --> 00:01:19.870
because we might be confused to say
we're executing it, we're calling it.

24
00:01:19.870 --> 00:01:21.423
No, we're just naming it, display.

25
00:01:21.423 --> 00:01:26.503
I knew you weren't implying that, but just
to be clear, display is saved excellent.

26
00:01:26.503 --> 00:01:31.227
Next line, Brian, left-hand side first.
&gt;&gt; Brian: We are clearing a constant name

27
00:01:31.227 --> 00:01:33.450
future data.
&gt;&gt; Will Sentance: Excellent.

28
00:01:33.450 --> 00:01:38.046
Okay, it's going to be what
in the more general sense?

29
00:01:39.310 --> 00:01:43.790
Well what is it, it's always gonna be the
outcome of the right hand side's work, so

30
00:01:43.790 --> 00:01:46.400
it's a return value of the right hand side

31
00:01:46.400 --> 00:01:48.610
execution of fetch.
&gt;&gt; Michelle: Yes.

32
00:01:48.610 --> 00:01:49.830
&gt;&gt; Will Sentance: Good, you maybe meant to

33
00:01:49.830 --> 00:01:51.920
say that so, I apologize if you were.

34
00:01:51.920 --> 00:01:54.210
But for now, it's going to be what?.
&gt;&gt; Brian: Undefined.

35
00:01:54.210 --> 00:01:55.207
&gt;&gt; Will Sentance: Undefined, we don't yet

36
00:01:55.207 --> 00:01:56.621
know what to store there, correct.

37
00:01:56.621 --> 00:01:58.786
We're gonna go do some work
on the right-hand side.

38
00:01:58.786 --> 00:02:04.180
So we are going to start
running a function, fetch.

39
00:02:04.180 --> 00:02:07.830
Now who thinks this function fetch creates
an execution context in a way that

40
00:02:07.830 --> 00:02:09.420
we're used to?

41
00:02:09.420 --> 00:02:10.790
Raise your hands.

42
00:02:10.790 --> 00:02:16.610
No, instead, thank you James for
being kind to give us somebody.

43
00:02:16.610 --> 00:02:18.720
Instead fetch is what?

44
00:02:18.720 --> 00:02:21.220
Fetch is a facade function.

45
00:02:21.220 --> 00:02:26.233
A facade for some work, actually I suppose
it could create an execution context for

46
00:02:26.233 --> 00:02:31.120
this in the sense we're used to, but
it's still something beyond our control.

47
00:02:31.120 --> 00:02:35.615
We did not write fetch, this is a function
that is masking a bunch of JavaScript

48
00:02:35.615 --> 00:02:39.989
work, we're going to see that in a second,
and a bunch of web browser work.

49
00:02:39.989 --> 00:02:43.115
And by the way,
we're hoping with the way fetch,

50
00:02:43.115 --> 00:02:46.837
fetch is this new feature of
the browser and of JavaScript,

51
00:02:46.837 --> 00:02:51.690
we're hoping it's gonna return us data
from Twitter and hopefully a tweet.

52
00:02:51.690 --> 00:02:54.660
That's pretty clear,
that's what we hope it's gonna do.

53
00:02:54.660 --> 00:02:58.419
Okay, so first function's fetch,
let's start doing it's work.

54
00:02:58.419 --> 00:03:00.851
We're gonna try to be as
complete as possible here, and

55
00:03:00.851 --> 00:03:02.680
this is where thoughts get complicated.

56
00:03:02.680 --> 00:03:07.700
So future data is going
to be the return value in

57
00:03:07.700 --> 00:03:14.136
JavaScript of calling fetch,
this new web browser feature

58
00:03:14.136 --> 00:03:19.570
that has the JavaScript label for
the feature.

59
00:03:19.570 --> 00:03:22.350
The label in JavaScript is known as fetch.

60
00:03:22.350 --> 00:03:26.520
Who knows,
what the web browser feature is,

61
00:03:26.520 --> 00:03:30.220
that fetch kicks off or gets started?

62
00:03:30.220 --> 00:03:31.390
Cuz it's not called fetch.

63
00:03:31.390 --> 00:03:33.880
Who knows what the web
browser feature is called?

64
00:03:33.880 --> 00:03:34.569
&gt;&gt; Paul: xhr.

65
00:03:34.569 --> 00:03:35.225
&gt;&gt; Will Sentance: It is xhr, well

66
00:03:35.225 --> 00:03:35.734
done Paul.

67
00:03:35.734 --> 00:03:38.660
It's XMLHttpRequest.

68
00:03:38.660 --> 00:03:41.710
We'll see what that stands for
in a second, well,

69
00:03:41.710 --> 00:03:44.150
it sounds like,
we'll see what each of those words mean.

70
00:03:44.150 --> 00:03:48.430
To be honest they all stand for
stuff, XML, HTTP, are all new words.

71
00:03:49.680 --> 00:03:50.680
Request obviously isn't.

72
00:03:50.680 --> 00:03:52.880
That would be interesting if it were,
though.

73
00:03:52.880 --> 00:03:53.729
Maybe it is.

74
00:03:53.729 --> 00:03:58.074
Maybe request is an acronym.
&gt;&gt; Will Sentance: All right, good, so

75
00:03:58.074 --> 00:04:01.240
this is gonna do something
in JavaScript immediately.

76
00:04:01.240 --> 00:04:05.370
Set timer, it didn't, set timer just
spun up our web browser feature.

77
00:04:05.370 --> 00:04:09.090
This little guy here, fetch, though is
gonna do a bunch of stuff in JavaScript.

78
00:04:09.090 --> 00:04:16.060
It's going to immediately
return out an object,

79
00:04:16.060 --> 00:04:21.240
immediately return on
object with a property

80
00:04:21.240 --> 00:04:26.090
on it called value, that is undefined.

81
00:04:26.090 --> 00:04:32.700
This is where the result of this data,
or the result of fetch's background work

82
00:04:32.700 --> 00:04:37.430
is gonna store our resultant value from
the background work, when it comes back.

83
00:04:37.430 --> 00:04:41.070
The background work being speaking to
Twitter's server, bringing back a tweet.

84
00:04:41.070 --> 00:04:42.260
That's gonna be filled in here.

85
00:04:44.630 --> 00:04:49.184
It's also got a property on it, it's
a hidden property called on fulfillment.

86
00:04:50.870 --> 00:04:54.882
Which is an array, a list, an empty array,

87
00:04:54.882 --> 00:04:58.786
into which we can stick any functions, but

88
00:04:58.786 --> 00:05:03.572
we want to also trigger when
the value gets updated.

89
00:05:03.572 --> 00:05:05.665
The design of this special object,

90
00:05:05.665 --> 00:05:09.372
the new type of object in JavaScript
known as a promise object.

91
00:05:09.372 --> 00:05:13.677
Its design is such that when
its value gets filled in,

92
00:05:13.677 --> 00:05:19.630
then it's gonna trigger all the functions
in this on fulfillment array.

93
00:05:19.630 --> 00:05:25.470
Now, the reason we want
to do that is this return

94
00:05:25.470 --> 00:05:31.024
dot object is gonna be
stored in future data.

95
00:05:31.024 --> 00:05:34.944
Sunni, where's the return of that object
from calling fetch going to be stored?

96
00:05:34.944 --> 00:05:36.540
&gt;&gt; Sunni: Fetch data.

97
00:05:36.540 --> 00:05:39.520
I'm sorry, future data.
&gt;&gt; Will Sentance: Future data, exactly.

98
00:05:40.690 --> 00:05:44.940
So we might think I could go
display futureData.value.

99
00:05:46.100 --> 00:05:50.770
But the problem is I've no idea when
that value is going to be updated.

100
00:05:50.770 --> 00:05:54.770
So, there's no way in my regular
code I can write futureData.value,

101
00:05:54.770 --> 00:05:57.320
and then that's gonna be my return tweet.

102
00:05:57.320 --> 00:06:00.570
Say hi, for example, and
then run display on that.

103
00:06:00.570 --> 00:06:01.780
But that's my goal.

104
00:06:01.780 --> 00:06:04.870
I'm only giving the data back, so
I can run functionality on it.

105
00:06:04.870 --> 00:06:07.560
So if I don't know when that
data's gonna come back,

106
00:06:07.560 --> 00:06:11.640
I can't in my regular ordered
synchronous thread of code right,

107
00:06:11.640 --> 00:06:16.990
display and pass in futureData.value,
cuz I have no idea when value's.

108
00:06:16.990 --> 00:06:20.615
I could try and hold off writing
like till the very bottom of my code

109
00:06:20.615 --> 00:06:27.460
display(futureData.value), which will
be the value that gets thrown in.

110
00:06:27.460 --> 00:06:29.130
But when can I run this?

111
00:06:29.130 --> 00:06:30.550
I never know when that date
is going to come back.

112
00:06:31.830 --> 00:06:35.380
So if I want to run functionality
on my data when it comes back from

113
00:06:35.380 --> 00:06:40.300
the background work, the only place I know
that the value is definitely filled in,

114
00:06:40.300 --> 00:06:42.480
the only place it really
definitely knows is this object.

115
00:06:43.490 --> 00:06:46.970
So we're going to attach to that
object functions into this array.

116
00:06:46.970 --> 00:06:48.590
You're gonna push them into that array.

117
00:06:48.590 --> 00:06:50.720
That are going to be auto-triggered.

118
00:06:50.720 --> 00:06:51.920
When the value gets updated.

119
00:06:53.120 --> 00:06:55.340
See it feels a lot like the thing
we were doing before honestly.

120
00:06:56.340 --> 00:06:57.930
We're not gonna be able to do this,

121
00:06:57.930 --> 00:07:00.800
cuz I still gave no idea when
that value's gonna be updated.

122
00:07:00.800 --> 00:07:04.120
So the only place I know for
sure that the value's been updated,

123
00:07:04.120 --> 00:07:08.620
the only time I know for sure is on this
object when that value gets filled in, and

124
00:07:08.620 --> 00:07:10.990
then auto trigger all
these functions to run.

125
00:07:10.990 --> 00:07:14.970
And that's the very design of this object,
this new promise object in JavaScript.

126
00:07:14.970 --> 00:07:17.760
When value gets updated,
trigger all my functions.

127
00:07:17.760 --> 00:07:20.820
By the way, with value,
as those functions input.

128
00:07:20.820 --> 00:07:23.700
Right now we have no functions in there,
but we better add some.

129
00:07:23.700 --> 00:07:26.489
So that is the object that comes out.

130
00:07:26.489 --> 00:07:30.523
It's known as a promise object,

131
00:07:30.523 --> 00:07:35.848
excellent.
&gt;&gt; Will Sentance: So,

132
00:07:35.848 --> 00:07:41.560
and that gets stored,
as Sonia rightly said, into future data.

133
00:07:41.560 --> 00:07:44.780
There it is in future data.

134
00:07:44.780 --> 00:07:47.370
It has a value property,
which is undefined.

135
00:07:47.370 --> 00:07:50.419
It has two placeholders basically,
two things that are waiting for stuff.

136
00:07:51.470 --> 00:07:55.030
And it has a property which is
hidden called on fulfillment,

137
00:07:55.030 --> 00:08:00.150
that is basically a list into which we can
put any functions we want to auto trigger

138
00:08:00.150 --> 00:08:01.840
when value gets updated.

139
00:08:01.840 --> 00:08:05.730
And value will be updated, when our web
browser feature gets back its results.

140
00:08:05.730 --> 00:08:11.983
So let's hope fetch also what, is two
pronged It also initiates a background

141
00:08:11.983 --> 00:08:16.429
web browser feature which was which, Paul?
&gt;&gt; Paul: XML HTTP request.

142
00:08:16.429 --> 00:08:17.563
&gt;&gt; Will Sentance: XML HTTP requests,

143
00:08:17.563 --> 00:08:18.380
excellent.

144
00:08:18.380 --> 00:08:21.180
So it has two consequences,
one in JavaScript.

145
00:08:21.180 --> 00:08:23.360
I might even write that actually.

146
00:08:23.360 --> 00:08:30.630
One in JavaScript and
one in the web browser,

147
00:08:30.630 --> 00:08:36.760
one in the web browser, web browser.

148
00:08:36.760 --> 00:08:40.924
Which is exactly as Paul said,

149
00:08:40.924 --> 00:08:46.790
XML HTTP request, what's that mean?

150
00:08:46.790 --> 00:08:51.600
XML is the former of the data, that we're
gonna go and get from the Internet,

151
00:08:51.600 --> 00:08:54.070
when we're dealing with web browser stuff.

152
00:08:54.070 --> 00:08:57.730
HTTP is the protocol,
P stands for protocol.

153
00:08:57.730 --> 00:09:01.670
That means the rules of the game for
how we can go and get and

154
00:09:01.670 --> 00:09:07.394
bring back data over the web and
request is request,

155
00:09:07.394 --> 00:09:10.560
go and get data, good.

156
00:09:10.560 --> 00:09:14.530
So, lets followup two things,
let's keep track of it down here.

157
00:09:14.530 --> 00:09:19.190
So xhr is the web browser
feature we're using.

158
00:09:19.190 --> 00:09:21.480
It's job,
it's a special feature of the browser,

159
00:09:21.480 --> 00:09:22.590
the most important feature of all.

160
00:09:23.650 --> 00:09:24.210
Quite clearly, right?

161
00:09:24.210 --> 00:09:25.590
It's the one that speaks to the internet.

162
00:09:25.590 --> 00:09:26.719
That's it's job.

163
00:09:26.719 --> 00:09:27.780
So it's spinning that one up.

164
00:09:27.780 --> 00:09:33.605
What information does it need to know,

165
00:09:33.605 --> 00:09:36.090
Ben?
&gt;&gt; Ben: URL.

166
00:09:36.090 --> 00:09:37.160
&gt;&gt; Will Sentance: URL, excellent,

167
00:09:37.160 --> 00:09:37.950
thank you, Ben.

168
00:09:37.950 --> 00:09:43.970
The URL, which is Twitter.com,
and also the path /will.

169
00:09:43.970 --> 00:09:46.482
And also,
what's the other thing it needs to know,

170
00:09:46.482 --> 00:09:50.648
Ben?
&gt;&gt; Will Sentance: Fetch to folks to it,

171
00:09:50.648 --> 00:09:53.142
actually, anyone know, James?
&gt;&gt; James: Method.

172
00:09:53.142 --> 00:09:54.352
&gt;&gt; Will Sentance: Method, which is get,

173
00:09:54.352 --> 00:09:58.163
that's to say it's gonna get some data,
not send or post like a new tweet,

174
00:09:58.163 --> 00:10:00.200
it's gonna get tweets back.

175
00:10:00.200 --> 00:10:03.260
And fetch to folks to get, okay.

176
00:10:03.260 --> 00:10:05.850
Is it complete yet, Ben?
&gt;&gt; Ben: No.

177
00:10:05.850 --> 00:10:06.775
&gt;&gt; Will Sentance: Definitely not, right,

178
00:10:06.775 --> 00:10:08.549
1 millisecond,
we're at 1 millisecond here.

179
00:10:10.350 --> 00:10:13.940
It definitely complete
the one millisecond, right?

180
00:10:13.940 --> 00:10:16.480
It's gonna, let's say 200 millisecond,
it's gonna take or something like that.

181
00:10:16.480 --> 00:10:20.710
On completion, and here is the toughly,
on completion, Ben,

182
00:10:20.710 --> 00:10:25.750
what's do we want this to do?

183
00:10:25.750 --> 00:10:27.220
On completion when they come back,

184
00:10:27.220 --> 00:10:29.720
what do we want to do with that data?
&gt;&gt; Ben: We want to

185
00:10:29.720 --> 00:10:34.020
assign the response data to value?
&gt;&gt; Will Sentance: Is he right?

186
00:10:34.020 --> 00:10:35.010
He is spot on.

187
00:10:35.010 --> 00:10:36.960
On what object?
&gt;&gt; Ben: Value.

188
00:10:36.960 --> 00:10:39.940
The promise object.
&gt;&gt; Will Sentance: Which is known as?

189
00:10:39.940 --> 00:10:40.690
&gt;&gt; Ben: Future data.

190
00:10:40.690 --> 00:10:41.545
&gt;&gt; Will Sentance: Excellent from Ben.

191
00:10:41.545 --> 00:10:46.206
We're going to update futureData.value,

192
00:10:46.206 --> 00:10:52.105
is going to be whatever data
we get back from our message.

193
00:10:52.105 --> 00:10:59.330
Our HTTP message to Twitter.

194
00:10:59.330 --> 00:11:01.020
There it is, the Twitter.

195
00:11:01.020 --> 00:11:02.670
To their computers.

196
00:11:02.670 --> 00:11:04.600
When that data comes back,

197
00:11:04.600 --> 00:11:09.520
it's gonna fill in the value
property of our future data object,

198
00:11:09.520 --> 00:11:12.300
which is then going to do what, Ben?
&gt;&gt; Ben: It's going to

199
00:11:12.300 --> 00:11:14.905
trigger on fulfillment functions?
&gt;&gt; Will Sentance: All the functions in our

200
00:11:14.905 --> 00:11:15.640
fulfillment array.

201
00:11:15.640 --> 00:11:19.220
Exactly.
&gt;&gt; Will Sentance: Very good.

202
00:11:19.220 --> 00:11:20.030
Very good.

203
00:11:20.030 --> 00:11:25.560
Can we talk about though how much
that single fetch segment is doing?

204
00:11:25.560 --> 00:11:30.982
It is a two pronged facade function, not
only is it doing stuff in the web browser,

205
00:11:30.982 --> 00:11:33.588
it's also doing stuff in JavaScript.

206
00:11:33.588 --> 00:11:38.223
So that we have in JavaScript ready
a little space into which our function,

207
00:11:38.223 --> 00:11:41.473
into which our return value,
our response object.

208
00:11:41.473 --> 00:11:45.317
That's the response we get from speaking
to Twitter in the form of an object,

209
00:11:45.317 --> 00:11:47.500
is gonna be stored in that value property.

210
00:11:47.500 --> 00:11:48.690
Right now it's undefined.

211
00:11:48.690 --> 00:11:50.210
Right now we've not even said
what we're gonna trigger.

212
00:11:51.300 --> 00:11:53.200
But we will in a second.

213
00:11:53.200 --> 00:11:56.940
Okay, excellent,
well browser feature stuff is finished.

214
00:11:56.940 --> 00:11:58.630
That was what fetch set up.

215
00:11:58.630 --> 00:12:02.170
The JavaScript stuff instantly
returned future data.

216
00:12:02.170 --> 00:12:07.110
And so we're able to move on to our
next line in our JavaScript thread,

217
00:12:07.110 --> 00:12:09.850
which says to do what, Blessing?

218
00:12:09.850 --> 00:12:12.958
We did future data,
with the return value of fetch,

219
00:12:12.958 --> 00:12:15.089
which is the object placer object.

220
00:12:15.089 --> 00:12:17.962
What's our next line, Blessing?
&gt;&gt; Blessing: The carded versionality on

221
00:12:17.962 --> 00:12:20.500
the future data.
&gt;&gt; Will Sentance: Excellent.

222
00:12:20.500 --> 00:12:26.570
My least favorite name
method in JavaScript, .then.

223
00:12:26.570 --> 00:12:29.110
Everything it's doing is telling you,

224
00:12:29.110 --> 00:12:33.950
that it's job is somehow,
I really dislike it, it makes people

225
00:12:33.950 --> 00:12:39.130
think that we're gonna somehow return
to that line and then call display.

226
00:12:39.130 --> 00:12:43.800
It is fundamentally not doing that,
what is then doing?

227
00:12:44.940 --> 00:12:50.100
Well, Ben, where do we put functions

228
00:12:50.100 --> 00:12:54.600
that we want to be auto-triggered,
when our value property of future data

229
00:12:54.600 --> 00:12:57.870
gets updated from the background work?
&gt;&gt; Ben: Into the future data

230
00:12:57.870 --> 00:13:00.660
object's.
&gt;&gt; Will Sentance: Excellent.

231
00:13:00.660 --> 00:13:02.470
How do we get them in there?

232
00:13:02.470 --> 00:13:06.150
Well, that is the job of this
built in function, then.

233
00:13:06.150 --> 00:13:08.860
I don't recall if the server function
implies this sort of facade for

234
00:13:08.860 --> 00:13:10.250
web browser or if it's not.

235
00:13:10.250 --> 00:13:14.620
It's a bunch of JavaScript
code written to do this.

236
00:13:14.620 --> 00:13:18.910
It's written to, so
this is future data, this object here.

237
00:13:18.910 --> 00:13:22.380
The same object just we pass it out and
we store it in future data.

238
00:13:22.380 --> 00:13:28.690
It has a property on it called on
fulfillment, which is an empty array.

239
00:13:28.690 --> 00:13:32.920
All that then does, is it says whatever
you pass to me whatever function

240
00:13:32.920 --> 00:13:35.700
definition, we're not
running display here.

241
00:13:35.700 --> 00:13:38.420
What symbols tell my I'm
running a function, Josh what

242
00:13:38.420 --> 00:13:40.789
special symbols say run a function?
&gt;&gt; Josh: The parenthesis.

243
00:13:40.789 --> 00:13:41.453
&gt;&gt; Will Sentance: Parenthesis,

244
00:13:41.453 --> 00:13:43.960
I see no parenthesis here, so
we are not running display.

245
00:13:43.960 --> 00:13:49.190
All we are doing is a whole function
definition, into that array.

246
00:13:49.190 --> 00:13:50.660
That's all that then is doing.

247
00:13:50.660 --> 00:13:56.220
I would replace name then with store
function we want to auto trigger,

248
00:13:56.220 --> 00:13:57.590
on value probably being updated.

249
00:13:57.590 --> 00:14:03.110
It's not a catchy method name, but
it is an accurate method name.

250
00:14:03.110 --> 00:14:07.606
Into it goes,
that is to say we put In the on

251
00:14:07.606 --> 00:14:13.520
fulfillment array,
the display functionality.

252
00:14:13.520 --> 00:14:18.310
That's now gonna mean when our value gets
updated, we are gonna call display and

253
00:14:18.310 --> 00:14:20.890
its input, its argument.

254
00:14:20.890 --> 00:14:23.660
Right now, the parameter's data,
that's gonna be thrown out and

255
00:14:23.660 --> 00:14:26.450
replaced with whatever the value is.

256
00:14:27.540 --> 00:14:30.890
And how do we get that display function
in the on fulfillment list of functions.

257
00:14:30.890 --> 00:14:32.040
How do we get it in there?

258
00:14:32.040 --> 00:14:34.890
Using the then method.

259
00:14:34.890 --> 00:14:39.140
To whatever you pass as their
method will be thrown into

260
00:14:39.140 --> 00:14:42.410
the object on the left hand
sides on fulfillment array.

261
00:14:42.410 --> 00:14:43.260
Hold on one second, Josh.

262
00:14:45.130 --> 00:14:48.220
All right, it attaches display
functionality to future data.

263
00:14:48.220 --> 00:14:53.600
It is absolutely not saying,
run display right now.

264
00:14:53.600 --> 00:14:55.960
It feels so much,
I mean you look at this and

265
00:14:55.960 --> 00:14:59.120
go well future data comes back and
then we need to run display.

266
00:15:00.350 --> 00:15:04.860
Yes, in theory,
in a broader metaphorical sense yes.

267
00:15:04.860 --> 00:15:09.110
But no, what we're actually
doing is we got into futureData

268
00:15:09.110 --> 00:15:12.730
a promise object with a value
property that's not yet filled in.

269
00:15:12.730 --> 00:15:15.170
When it does get filled in,
we're gonna trigger all these functions.

270
00:15:15.170 --> 00:15:16.470
How do we get functions in there?

271
00:15:16.470 --> 00:15:19.780
Using the then method on
the futureData object.

272
00:15:19.780 --> 00:15:25.076
Okay, which means now we can continue
the hell on with our synchronous code and

273
00:15:25.076 --> 00:15:29.971
at 2 milliseconds, what we've done for
you today .then, what line of

274
00:15:29.971 --> 00:15:34.426
code do we hit at 2 milliseconds, Bryan?
&gt;&gt; Brian: Console.log.

275
00:15:34.426 --> 00:15:35.176
&gt;&gt; Will Sentance: Console.log, yeah.

276
00:15:35.176 --> 00:15:35.955
&gt;&gt; Brian: Me first.

277
00:15:35.955 --> 00:15:36.959
&gt;&gt; Will Sentance: Console.log me first,

278
00:15:36.959 --> 00:15:37.498
excellent.

279
00:15:37.498 --> 00:15:42.680
Console.log me first.

280
00:15:42.680 --> 00:15:44.480
There it is at 2 milliseconds.

281
00:15:44.480 --> 00:15:46.890
Brian, have we achieved our very,

282
00:15:46.890 --> 00:15:51.630
very important goal of being able to set
up tasks that take a long time, and yet

283
00:15:51.630 --> 00:15:53.690
continue our regular JavaScript code?
&gt;&gt; Brian: Yes.

284
00:15:53.690 --> 00:15:54.470
&gt;&gt; Will Sentance: In a non-blocking way.

285
00:15:54.470 --> 00:15:55.270
Exellent, we have.

286
00:15:55.270 --> 00:15:55.770
You're spot on.

287
00:15:56.880 --> 00:16:00.480
At 2 milliseconds we continue
the hell on with our code.

288
00:16:00.480 --> 00:16:05.020
Okay, and now in JavaScript,
we're pretty clear.

289
00:16:05.020 --> 00:16:06.430
Honestly, we're pretty clear right now.

290
00:16:07.520 --> 00:16:15.260
Okay, but in our background web browser
feature, a world of stuff is going on.

291
00:16:15.260 --> 00:16:22.197
Twitter's server is sending us back
a response at maybe 201 milliseconds,

292
00:16:22.197 --> 00:16:26.657
something like that,
plus 200 milliseconds,

293
00:16:28.644 --> 00:16:32.577
&gt;&gt; Will Sentance: That comes, our response

294
00:16:32.577 --> 00:16:39.380
which is my ever simple
response thing of hi.

295
00:16:39.380 --> 00:16:43.366
Now obviously, it comes back,
to be really clear, when it comes

296
00:16:43.366 --> 00:16:47.800
back as an object when we got to go in and
find the actual value in the body.

297
00:16:47.800 --> 00:16:51.080
But we're just gonna simplify it and
say it comes back as a pretty string hi.

298
00:16:51.080 --> 00:16:56.850
So Rick at that point therefore,

299
00:16:56.850 --> 00:17:02.965
if we've just got our response subject
back has our background xhr task,

300
00:17:02.965 --> 00:17:04.685
the request of data, we got the data back.

301
00:17:04.685 --> 00:17:05.255
Has it completed?

302
00:17:06.725 --> 00:17:07.305
&gt;&gt; Rick: Yes.
&gt;&gt; Will Sentance: It has

303
00:17:07.305 --> 00:17:08.795
completed, spot on.

304
00:17:08.795 --> 00:17:10.735
It's completed and so, Ben,

305
00:17:10.735 --> 00:17:15.565
what are we going to trigger happening?
&gt;&gt; Rick: We're going to assign

306
00:17:15.565 --> 00:17:19.055
that string to futureData.value.
&gt;&gt; Will Sentance: Excellent,

307
00:17:19.055 --> 00:17:21.045
very good communication, yes, correct.

308
00:17:21.045 --> 00:17:24.826
Which means.
&gt;&gt; Will Sentance: What are we gonna

309
00:17:24.826 --> 00:17:26.420
trigger running?

310
00:17:26.420 --> 00:17:30.260
Blessing, be as simple as possible here,
what are we gonna trigger running at

311
00:17:30.260 --> 00:17:30.760
this point?
&gt;&gt; Blessing: Okay,

312
00:17:30.760 --> 00:17:34.050
now that the value has come back, we're
going to trigger the display function.

313
00:17:34.050 --> 00:17:34.680
&gt;&gt; Will Sentance: Exactly,

314
00:17:34.680 --> 00:17:38.590
now we're gonna hold on, for now we're
just gonna say we're gonna trigger it.

315
00:17:38.590 --> 00:17:42.940
We came back at about what,
201 milliseconds.

316
00:17:44.630 --> 00:17:49.160
We're gonna trigger it to
run at 200 milliseconds.

317
00:17:49.160 --> 00:17:50.310
We're gonna discover,

318
00:17:50.310 --> 00:17:54.470
do we really think the JavaScript's gonna
allow that function straight back in?

319
00:17:54.470 --> 00:17:56.750
Or is there gonna be
some intermediate step?

320
00:17:56.750 --> 00:18:03.080
Maybe, but for now let's just say, we
trigger running display, with hi, right?

321
00:18:03.080 --> 00:18:05.250
We look at the function
display that we're triggering.

322
00:18:05.250 --> 00:18:07.600
We see its parameter is data.

323
00:18:07.600 --> 00:18:08.290
We call it.

324
00:18:08.290 --> 00:18:11.690
The parameter data gets
replaced by the value what,

325
00:18:11.690 --> 00:18:13.860
Victor?
&gt;&gt; Victor: Hi.

326
00:18:13.860 --> 00:18:14.640
&gt;&gt; Will Sentance: Hi, excellent.

327
00:18:15.730 --> 00:18:22.140
Excellent, and therefore in our memory, we
have the parameter data with a value, hi.

328
00:18:22.140 --> 00:18:23.876
And were going to console.log,

329
00:18:23.876 --> 00:18:27.740
at 201 milliseconds.
&gt;&gt; Will Sentance: Our value of.

330
00:18:30.845 --> 00:18:33.307
&gt;&gt; Will Sentance: Hi, there it is people,

331
00:18:33.307 --> 00:18:37.378
my goodness.
&gt;&gt; Will Sentance: We've achieved our three

332
00:18:37.378 --> 00:18:42.541
goals, one, set of tasks that takes
a long time in web browser, two continue

333
00:18:42.541 --> 00:18:48.400
running through JavaScript code, it hits
me first, no problem, without blocking.

334
00:18:48.400 --> 00:18:54.040
Three, when that data comes
back from the background task,

335
00:18:54.040 --> 00:18:55.640
no where is it going to show up and

336
00:18:55.640 --> 00:19:00.360
then auto-trigger functionality at
that moment with that data's input.

337
00:19:01.660 --> 00:19:02.290
I'll tell you this.

338
00:19:02.290 --> 00:19:05.260
It looks very similar, by the way,
to the previous model.

339
00:19:05.260 --> 00:19:06.560
We've just now got an intermediate step.

340
00:19:06.560 --> 00:19:10.090
We now just update a value in JavaScript
that auto-triggers the function.

341
00:19:10.090 --> 00:19:12.000
Before, if you remember, with set timeout,

342
00:19:12.000 --> 00:19:15.180
we pass a function in that would
be auto-triggered with the value.

343
00:19:15.180 --> 00:19:18.720
Now we pass a reference to
a position in JavaScript memory,

344
00:19:18.720 --> 00:19:21.390
a value property that gets
filled in on completion.

345
00:19:21.390 --> 00:19:23.770
And that's what triggers
the function to call.

346
00:19:24.880 --> 00:19:27.510
I don't know.

347
00:19:27.510 --> 00:19:29.020
Improve readability maybe.

