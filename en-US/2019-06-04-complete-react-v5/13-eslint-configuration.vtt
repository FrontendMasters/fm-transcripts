WEBVTT

1
00:00:00.350 --> 00:00:02.374
&gt;&gt; Brian Holt: So back to our eslint.json.

2
00:00:04.694 --> 00:00:06.201
&gt;&gt; Brian Holt: So,
we're gonna create a file here,

3
00:00:06.201 --> 00:00:08.000
this one we do have to
configure a little bit.

4
00:00:08.000 --> 00:00:11.230
So, the first one we say is extends, and

5
00:00:11.230 --> 00:00:13.270
we get an array of things that extends,
right?

6
00:00:13.270 --> 00:00:16.090
So this is like sets of rules to use.

7
00:00:16.090 --> 00:00:21.882
So, the first one that I'm gonna
say is use eslint:recommended.

8
00:00:25.360 --> 00:00:30.074
&gt;&gt; Brian Holt: Then we're gonna
use prettier and prettier/react.

9
00:00:32.920 --> 00:00:34.444
&gt;&gt; Brian Holt: So, what is extends, right?

10
00:00:34.444 --> 00:00:37.980
So ESLint is configurable
down to the rule, right?

11
00:00:37.980 --> 00:00:41.480
So there is probably hundreds of
rules that you can use with ESLint.

12
00:00:42.500 --> 00:00:46.550
We're going to be using, basically,
like the bare minimum set here,

13
00:00:46.550 --> 00:00:48.680
which is eslint:recommended.

14
00:00:48.680 --> 00:00:51.900
Like everything in eslint:recommended
everyone should be running all the time.

15
00:00:51.900 --> 00:00:54.070
I don't think it's a controversial
opinion to state, right?

16
00:00:54.070 --> 00:00:55.800
It's a pretty bare minimum set of things,

17
00:00:55.800 --> 00:00:58.310
like don't have variables
that you never use.

18
00:00:58.310 --> 00:01:00.150
That's one of them, right?

19
00:01:00.150 --> 00:01:02.060
Or don't use with or

20
00:01:02.060 --> 00:01:05.290
something like that, right, which is like
a super old construct in JavaScript.

21
00:01:06.800 --> 00:01:09.285
Now, there is a bunch of ESLint configs,
right?

22
00:01:09.285 --> 00:01:13.040
There's standard,
which I taught previously before.

23
00:01:13.040 --> 00:01:16.220
There's airbnb,
which is one that I taught as well before.

24
00:01:16.220 --> 00:01:19.530
And those ones are much more opinionated.

25
00:01:19.530 --> 00:01:25.490
And so I've kind of just started
using esl recommended because, again,

26
00:01:25.490 --> 00:01:28.700
it kind of goes along with my methodology
that anytime that you introduce friction

27
00:01:28.700 --> 00:01:33.480
to a developers' ecosystem,
they start writing codes

28
00:01:33.480 --> 00:01:36.400
slower because they're fighting with
tools instead of writing code, right?

29
00:01:36.400 --> 00:01:37.070
So, in general,

30
00:01:37.070 --> 00:01:41.770
I want developers to write code however
it flows into their brain, right?

31
00:01:41.770 --> 00:01:43.320
And not hinder them, and

32
00:01:43.320 --> 00:01:46.370
only hinder them on things that
are totally necessary, right?

33
00:01:46.370 --> 00:01:47.714
So this will catch bugs, but

34
00:01:47.714 --> 00:01:50.414
it's not gonna force you to
write code in a specific way.

35
00:01:50.414 --> 00:01:52.960
Does that make sense?

36
00:01:52.960 --> 00:01:54.836
And how opinionated you wanna
get about that is up to you.

37
00:01:57.481 --> 00:02:01.820
&gt;&gt; Brian Holt: Okay, so this is those,
we're gonna say plugins.

38
00:02:01.820 --> 00:02:04.016
We're not gonna give it any plugins
right now, but just lets go ahead and

39
00:02:04.016 --> 00:02:05.577
put that in there,
we will put some in there later.

40
00:02:07.522 --> 00:02:12.201
&gt;&gt; Brian Holt: ParserOptions,
&gt;&gt; Brian Holt: Okay, so

41
00:02:12.201 --> 00:02:16.821
the ecmaVersion we're gonna be using,
let's do 2018.

42
00:02:19.226 --> 00:02:22.956
&gt;&gt; Brian Holt: So we're gonna be using the
latest version of it that it understands,

43
00:02:22.956 --> 00:02:24.040
which is 2018.

44
00:02:24.040 --> 00:02:27.622
I don't think 2019 is quite out yet.

45
00:02:27.622 --> 00:02:29.742
SourceType.

46
00:02:29.742 --> 00:02:34.859
We're gonna be using modules,
ecmaFeatures,

47
00:02:34.859 --> 00:02:40.241
we're gonna be using jsx, which is to true

48
00:02:42.906 --> 00:02:45.484
&gt;&gt; Brian Holt: So, ecmaVersion 2018,

49
00:02:45.484 --> 00:02:49.711
this means we can use
things like async/await,

50
00:02:49.711 --> 00:02:55.000
we can use things like things like that.

51
00:02:55.000 --> 00:02:59.579
Module means that we're gonna be using
import and export, right, es modules.

52
00:03:00.720 --> 00:03:03.500
EcmaFeatures, jsx in a second,
we're gonna be writing jsx here.

53
00:03:03.500 --> 00:03:05.910
So we're just going to put that
in there so it understands that.

54
00:03:07.100 --> 00:03:09.240
And then two more things
down here at the bottom.

55
00:03:11.250 --> 00:03:16.139
Env, we're going to be using es6,
so it's not going

56
00:03:16.139 --> 00:03:21.042
to choke on things like a async/await,
for example.

57
00:03:23.921 --> 00:03:29.436
&gt;&gt; Brian Holt: So, es6 true,
one of them is going to be browser true.

58
00:03:29.436 --> 00:03:33.508
So this means there's going to be
things like setTimeout and document and

59
00:03:33.508 --> 00:03:35.160
window and things like that.

60
00:03:36.190 --> 00:03:39.639
And node, cuz eventually we will be
writing node later in this class.

61
00:03:40.970 --> 00:03:46.545
So, don't choke on things like HTTP and
require, and things like that.

62
00:03:46.545 --> 00:03:51.033
So these are your defining
global variables, okay?

63
00:03:51.033 --> 00:03:56.213
I use this ESLint file frequently,
so this is a pretty good just

64
00:03:56.213 --> 00:04:01.120
like baseline ESLint file,
it's not super opinionated.

65
00:04:02.350 --> 00:04:06.580
Okay, next thing I want you to
do inside of your package.json,

66
00:04:06.580 --> 00:04:09.110
we're gonna put another command in here.

67
00:04:11.110 --> 00:04:17.028
And put lint,
&gt;&gt; Brian Holt: And

68
00:04:17.028 --> 00:04:21.513
we're going to put eslint, and

69
00:04:21.513 --> 00:04:26.507
we're going to put that inside of.

70
00:04:30.325 --> 00:04:35.464
&gt;&gt; Brian Holt: Quotes here,
and we're going to put it

71
00:04:35.464 --> 00:04:42.170
in everything inside of src**/*.js and
jsx.

72
00:04:43.720 --> 00:04:47.332
Except we're not even gonna do jsx
today in terms of pass, whatever,

73
00:04:47.332 --> 00:04:48.751
you can leave it like that.

74
00:04:48.751 --> 00:04:50.638
That's what my notes have.

75
00:04:50.638 --> 00:04:56.206
And then you can put in here --quiet,
it's kind of noisy and

76
00:04:56.206 --> 00:05:01.148
quiet just kind of removes
some of the noise from that.

77
00:05:05.488 --> 00:05:08.026
&gt;&gt; Brian Holt: So, now,
whenever we run ESLint,

78
00:05:08.026 --> 00:05:12.012
it's gonna run ESLint across
our app.js file as well.

79
00:05:12.012 --> 00:05:14.899
But whatever js files we put in there,
it will run.

80
00:05:17.512 --> 00:05:20.509
&gt;&gt; Brian Holt: So,
just to kinda prove my point to you,

81
00:05:20.509 --> 00:05:22.815
we're gonna say npm run lint.

82
00:05:25.347 --> 00:05:27.190
&gt;&gt; Brian Holt: And
looks like we have something.

83
00:05:28.330 --> 00:05:29.020
Which we should, right?

84
00:05:29.020 --> 00:05:31.532
It says react is not defined because it
doesn't know where react is coming from.

85
00:05:33.093 --> 00:05:36.662
&gt;&gt; Brian Holt: So,
if we come into our app.js,

86
00:05:36.662 --> 00:05:41.000
it's gonna say, hey, what's react?

87
00:05:41.000 --> 00:05:42.490
I don't know what that is.

88
00:05:42.490 --> 00:05:43.687
So where did that come from?

89
00:05:43.687 --> 00:05:45.380
Which is what it should say, right?

90
00:05:45.380 --> 00:05:45.880
Because it doesn't know.

91
00:05:50.075 --> 00:05:54.200
&gt;&gt; Brian Holt: So, we'll fix that here
in a second, but now this is working.

92
00:05:56.270 --> 00:05:59.110
Now, again,
I don't run that npm run lint command

93
00:05:59.110 --> 00:06:04.080
very often because now it's just
inside of my editor, right?

94
00:06:04.080 --> 00:06:07.150
I can see that red underline, I can
hover over and say, this is not defined,

95
00:06:07.150 --> 00:06:08.880
you need to fix this.

96
00:06:08.880 --> 00:06:11.420
So, I'm gonna show you
how to do that as well.

97
00:06:11.420 --> 00:06:15.615
There's an extension for all major
editors, but coming here to extensions,

98
00:06:15.615 --> 00:06:20.810
search for one called ESLint,
and it's this one.

99
00:06:20.810 --> 00:06:24.910
Which has about almost 20 million
downloads, so install that one as well and

100
00:06:24.910 --> 00:06:25.680
that should just work.

101
00:06:27.160 --> 00:06:32.393
So, once we have the ESLint 1
installed here, ESLint, like that,

102
00:06:32.393 --> 00:06:37.008
you should start seeing these
things inside of your editor.

103
00:06:39.094 --> 00:06:41.814
&gt;&gt; Brian Holt: So,
if you don't like ESLint 1, you should,

104
00:06:41.814 --> 00:06:43.590
cuz I think it's a great tool.

105
00:06:43.590 --> 00:06:45.820
It's, again, one of my favorites.

106
00:06:45.820 --> 00:06:48.910
Cuz it really does help me to be
a more productive developer, right?

107
00:06:50.010 --> 00:06:53.916
If I say things like const x = 5 and
then never use it later,

108
00:06:53.916 --> 00:06:57.760
it's going to say, hey,
no one used variables, right?

109
00:06:57.760 --> 00:07:01.630
You created this very well and you never
use it, so why do you have it, right?

110
00:07:01.630 --> 00:07:05.592
And often that's a case of,
let's say, I went down here and

111
00:07:05.592 --> 00:07:10.193
I accidentally set React.createElement(Ap)
with one P, right?

112
00:07:10.193 --> 00:07:12.318
It's gonna say,
I don't know what that is, right?

113
00:07:12.318 --> 00:07:14.507
So, it immediately highlights
these errors like this, or

114
00:07:14.507 --> 00:07:16.320
if I put three Ps in there or
something like that.

115
00:07:18.440 --> 00:07:22.320
It helps me catch a lot of really common
dumb errors like that very quickly.

116
00:07:22.320 --> 00:07:24.890
As opposed to when I go to
play into production and

117
00:07:24.890 --> 00:07:28.770
everything crashes because I put an extra
P in there, not that I've ever done that.

118
00:07:31.250 --> 00:07:32.030
So, big fan.

119
00:07:32.030 --> 00:07:34.970
So, I like ESLint because
it's very extensible.

120
00:07:34.970 --> 00:07:38.450
So you and
I can both write custom ESLint rules.

121
00:07:38.450 --> 00:07:42.548
When I worked at Netflix,
we had a ton of custom ESLint rules.

122
00:07:42.548 --> 00:07:44.699
But there are other tools,

123
00:07:44.699 --> 00:07:49.290
one of them would be JSHint
which has been around forever.

124
00:07:49.290 --> 00:07:52.099
There's JSLint which
Douglas Crockford created.

125
00:07:52.099 --> 00:07:54.991
But I'll just say that ESLint
is very much the standard and

126
00:07:54.991 --> 00:07:56.830
it's the one I suggest that you use.

127
00:07:59.318 --> 00:08:02.763
&gt;&gt; Brian Holt: It's actually been
adopted by the JS Foundation,

128
00:08:02.763 --> 00:08:08.461
which used to be the jQuery Foundation and
is now called the OpenJS Foundation, so.

