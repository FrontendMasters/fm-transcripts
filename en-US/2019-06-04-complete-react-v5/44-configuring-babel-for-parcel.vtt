WEBVTT

1
00:00:00.120 --> 00:00:03.160
&gt;&gt; Brian Holt: Now I wanna show you
how to do something, in my opinion,

2
00:00:03.160 --> 00:00:03.740
pretty cool here.

3
00:00:03.740 --> 00:00:07.970
This is a bit burdensome, to have

4
00:00:07.970 --> 00:00:11.940
to write out a constructor and
construct a state like this.

5
00:00:11.940 --> 00:00:15.940
It also is,
TypeScript can't figure this out, right?

6
00:00:17.810 --> 00:00:20.550
And so there's a better way of doing
this that I wanna show you really quick,

7
00:00:20.550 --> 00:00:22.300
to instantiate your state.

8
00:00:23.690 --> 00:00:26.640
If you have control of your Babel config,
then you can do this.

9
00:00:26.640 --> 00:00:31.924
If not, then you may not,
so it would be super

10
00:00:31.924 --> 00:00:38.472
useful if we could just do
state = { loading: true }.

11
00:00:45.456 --> 00:00:47.550
&gt;&gt; Brian Holt: Wouldn't that be a lot
nicer, if you could just do it that way?

12
00:00:48.700 --> 00:00:49.690
Well, you actually can.

13
00:00:50.990 --> 00:00:57.550
But the thing is that this
is actually a proposal for

14
00:00:57.550 --> 00:01:01.750
a JavaScript, and it's not actually a real
thing quite yet, but you can make it work.

15
00:01:01.750 --> 00:01:04.243
So this will land in JavaScript,

16
00:01:04.243 --> 00:01:08.882
I think it's actually going
to land in 2019 or 2020.

17
00:01:08.882 --> 00:01:13.060
So I'm gonna show you how to modify your
Babel config, if you have to, with React.

18
00:01:14.380 --> 00:01:18.445
So the first thing I need you to
do is open your command line here.

19
00:01:21.152 --> 00:01:22.877
&gt;&gt; Brian Holt: So
you can see here it says, Support for

20
00:01:22.877 --> 00:01:27.180
the experimental syntax 'classProperties'
isn't currently enabled.

21
00:01:27.180 --> 00:01:29.137
And we're just gonna go
enable that really quick.

22
00:01:34.113 --> 00:01:36.563
&gt;&gt; Brian Holt: So
I want you to do npm install -D, and

23
00:01:36.563 --> 00:01:40.171
you have to install quite a few
things to make this work.

24
00:01:40.171 --> 00:01:48.703
babel-eslint @babel/core @babel/preset-env

25
00:01:48.703 --> 00:01:57.238
@babel/plugin-proposal-class-properties.

26
00:01:57.238 --> 00:02:00.315
I don't name these, I'm very sorry.

27
00:02:00.315 --> 00:02:04.696
And @babel/preset-react.

28
00:02:09.473 --> 00:02:11.022
&gt;&gt; Brian Holt: You're all
done typing that now?

29
00:02:11.022 --> 00:02:13.002
I'm just kidding, it's a lot to type.

30
00:02:20.147 --> 00:02:21.494
&gt;&gt; Brian Holt: So what's going on here?

31
00:02:23.494 --> 00:02:26.523
&gt;&gt; Brian Holt: All this
stuff is built into Parcel,

32
00:02:26.523 --> 00:02:30.980
and Parcel has just been handling this for
us.

33
00:02:30.980 --> 00:02:34.670
However, it gives us the escape
hatch that if we have custom needs,

34
00:02:34.670 --> 00:02:37.230
which in this case we do because
it doesn't have this one,

35
00:02:37.230 --> 00:02:40.892
the
@babel/plugin-proposal-class-properties

36
00:02:40.892 --> 00:02:46.990
,that we can say, hey Parcel,
use our config instead of your config.

37
00:02:46.990 --> 00:02:52.890
Their config is basically like,
let's target modern JavaScript,

38
00:02:52.890 --> 00:02:58.610
basically, everything that has
already shipped with valid JavaScript.

39
00:02:58.610 --> 00:03:03.870
In general, I don't say ship to
production experimental JavaScript,

40
00:03:03.870 --> 00:03:06.490
except I'm okay with this one because
this one's definitely gonna land.

41
00:03:06.490 --> 00:03:10.179
In fact, I believe it has already landed,
and if I remember reading correctly,

42
00:03:10.179 --> 00:03:11.168
last week it landed.

43
00:03:14.674 --> 00:03:17.881
&gt;&gt; Brian Holt: But in general,
that can bite you in the butt.

44
00:03:17.881 --> 00:03:20.626
So we'll install that.

45
00:03:23.898 --> 00:03:26.684
&gt;&gt; Brian Holt: It should take a second
to go through and load all that stuff.

46
00:03:37.015 --> 00:03:40.267
&gt;&gt; Brian Holt: And I guess while this
is finishing, there, it finished.

47
00:03:42.068 --> 00:03:46.642
&gt;&gt; Brian Holt: So
I want you to create a new file here.

48
00:03:46.642 --> 00:03:50.710
And I want you to call it dot,
not inside the source, inside of adopt me,

49
00:03:50.710 --> 00:03:52.596
the root directory the project.

50
00:03:52.596 --> 00:03:55.487
Call it .babelrc.

51
00:03:58.737 --> 00:04:00.968
&gt;&gt; Brian Holt: Okay, yes, used on.

52
00:04:03.988 --> 00:04:09.019
&gt;&gt; Brian Holt: Okay, inside of here
I want you to put presets, and

53
00:04:09.019 --> 00:04:13.939
then we're gonna put two
things here in presets.

54
00:04:13.939 --> 00:04:19.355
One of them's gonna be,
@babel/preset-react.

55
00:04:19.355 --> 00:04:25.023
And one of these is gonna
be @babel/preset-env.

56
00:04:27.782 --> 00:04:32.954
&gt;&gt; Brian Holt: Under that
we're gonna put plugins, and

57
00:04:32.954 --> 00:04:42.869
inside of that we'll put
@babel/plugin-proposal-class-properties.

58
00:04:47.950 --> 00:04:50.604
&gt;&gt; Brian Holt: So let's talk
about what those two things are.

59
00:04:50.604 --> 00:04:55.148
presets babel react is brings with
it all the things that you need to

60
00:04:55.148 --> 00:04:57.024
transpile React, right?

61
00:04:57.024 --> 00:05:03.050
So in understanding JSX,
it also brings Flow.

62
00:05:03.050 --> 00:05:08.341
Not that we're using Flow at all, but
that is included in the preset for React.

63
00:05:08.341 --> 00:05:10.590
It's a bunch of transpilations around JSX.

64
00:05:11.970 --> 00:05:16.750
@babel/preset-env, this is

65
00:05:16.750 --> 00:05:22.419
a pretty, and I should mention that,
a preset is a group of plugins, right?

66
00:05:23.800 --> 00:05:26.780
So in this case we're bringing
one transformation, but

67
00:05:26.780 --> 00:05:30.390
our preset is a bunch of plugins,
which is a bunch of transformations.

68
00:05:30.390 --> 00:05:35.480
This will transpile your code for
the environment that you specify.

69
00:05:35.480 --> 00:05:39.080
So luckily, you and I have already
specified an environment, and

70
00:05:39.080 --> 00:05:42.060
that is in our package.json.

71
00:05:42.060 --> 00:05:43.137
Remember when we did this?

72
00:05:45.228 --> 00:05:50.303
&gt;&gt; Brian Holt: So this preset-env is gonna
look at this browsers list, and say, cool.

73
00:05:50.303 --> 00:05:53.884
I'm gonna transpile all the JavaScript so
it works in these browsers.

74
00:05:56.592 --> 00:06:00.000
&gt;&gt; Brian Holt: So that won't be very many
things because, cuz of JavaScript works in

75
00:06:00.000 --> 00:06:03.194
these browsers because these
are very very new browsers, okay?

76
00:06:06.030 --> 00:06:07.340
&gt;&gt; Brian Holt: But
there's pretty cool stuff you can do.

77
00:06:07.340 --> 00:06:11.810
You can actually import your
Google Analytics into preset-env, and

78
00:06:11.810 --> 00:06:15.000
it will actually transpile it
specifically for your users, right?

79
00:06:15.000 --> 00:06:17.820
So you can say, hey,
here's my Google Analytics.

80
00:06:17.820 --> 00:06:20.554
Transpile it so that 99% of
these people can see my website.

81
00:06:22.711 --> 00:06:24.648
&gt;&gt; Brian Holt: That's built
into the browserlist package.

82
00:06:24.648 --> 00:06:27.960
We're not gonna do that today,
but it is possible.

83
00:06:27.960 --> 00:06:31.160
Okay, and then the plugins here,
this is what's actually going to allow

84
00:06:31.160 --> 00:06:35.710
us to do that syntax that
I just showed you, okay?

85
00:06:35.710 --> 00:06:38.090
I need you to do one more thing here.

86
00:06:38.090 --> 00:06:40.320
So save this to your .babelrc.

87
00:06:40.320 --> 00:06:48.030
I need you to open you .eslintrc file,
and we have to add a parser option.

88
00:06:50.020 --> 00:06:56.470
So parser, and
I need you to put babel-eslint.

89
00:06:56.470 --> 00:06:57.932
So up to this point,

90
00:06:57.932 --> 00:07:03.106
eslint has been able to understand
all the code that we have been using.

91
00:07:03.106 --> 00:07:08.778
But now we've added a new experimental
feature that eslint would choke on,

92
00:07:08.778 --> 00:07:12.778
so we have to say,
use Babel to understand this code.

93
00:07:12.778 --> 00:07:14.231
And that's all this does.

94
00:07:18.616 --> 00:07:22.697
&gt;&gt; Brian Holt: Now, this might seem like
a lot of ritual to use one feature, but

95
00:07:22.697 --> 00:07:26.950
I typically wouldn't do it just for
one feature like this.

96
00:07:26.950 --> 00:07:31.417
But this is actually to be more
instructive on how to use Babel and

97
00:07:31.417 --> 00:07:32.752
Parcel together.

98
00:07:37.087 --> 00:07:41.950
&gt;&gt; Brian Holt: Okay, so
now that you've put in that line 17 there,

99
00:07:41.950 --> 00:07:45.680
let's go back to our SearchParams page.

100
00:07:45.680 --> 00:07:49.770
And now, not SearchParams,
we were on Details rather.

101
00:07:51.770 --> 00:07:53.082
Now it's fine with this.

102
00:07:56.921 --> 00:07:58.319
&gt;&gt; Brian Holt: Pretty cool, right?

103
00:08:03.513 --> 00:08:09.007
&gt;&gt; Brian Holt: Now, if I'm not mistaken,
you should be able to say this.state.,

104
00:08:09.007 --> 00:08:13.060
and then it knows that you
have loading on there.

105
00:08:13.060 --> 00:08:17.135
That's because now TypeScript can
understand your component, right?

106
00:08:17.135 --> 00:08:21.838
Notice it doesn't actually know that you
have media, and breed, and load, and

107
00:08:21.838 --> 00:08:25.938
some of these other ones,
because we didn't instantiate it up here.

108
00:08:25.938 --> 00:08:30.418
But TypeScript has the ability now to go
and run on your code and understand, okay,

109
00:08:30.418 --> 00:08:32.660
you have these things on your component.

110
00:08:32.660 --> 00:08:35.470
I can autocomplete these things for you.

111
00:08:35.470 --> 00:08:38.486
So if I want in here and
set name: blink like that, just set and

112
00:08:38.486 --> 00:08:41.220
instantiate to be some
sort of default thing.

113
00:08:41.220 --> 00:08:45.504
That means I can come down here and
say, this.state., and

114
00:08:45.504 --> 00:08:48.367
then notice now a name is in here as well.

115
00:08:51.367 --> 00:08:55.642
&gt;&gt; Brian Holt: It's the magic of
TypeScript, and VS Code for that matter.

116
00:09:01.761 --> 00:09:02.596
&gt;&gt; Brian Holt: We'll get to that later,
though.

117
00:09:02.596 --> 00:09:04.885
There's a whole section on TypeScript, so.

118
00:09:15.256 --> 00:09:16.130
&gt;&gt; Brian Holt: What if it doesn't work?

119
00:09:17.970 --> 00:09:21.304
I'm just kidding.
[LAUGH] Let's see what happened here.

120
00:09:23.177 --> 00:09:26.984
&gt;&gt; Brian Holt: This .state.return,
did I leave a this.state in somewhere?

121
00:09:26.984 --> 00:09:28.863
Yeah, that's weird.

122
00:09:31.718 --> 00:09:33.283
&gt;&gt; Brian Holt: There it goes.

123
00:09:33.283 --> 00:09:37.159
That was just for
me showing this.name and stuff like that,

124
00:09:37.159 --> 00:09:39.896
prettier than just wrap it onto that line.

125
00:09:48.815 --> 00:09:49.496
&gt;&gt; Brian Holt: Cool, so yeah,

126
00:09:49.496 --> 00:09:51.947
now that's still working with
the public class property.

127
00:09:51.947 --> 00:09:57.470
It's actually what that's called.

