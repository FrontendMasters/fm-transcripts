WEBVTT

1
00:00:00.040 --> 00:00:03.240
&gt;&gt; Brian Holt: So you can actually do
this entire workshop totally offline,

2
00:00:03.240 --> 00:00:04.800
which is useful to you as well.

3
00:00:04.800 --> 00:00:09.187
Whether that's maybe sometimes
our IT guy might have an issue or

4
00:00:09.187 --> 00:00:13.017
you're just not in a place
where have internet access.

5
00:00:13.017 --> 00:00:16.963
In that case, we've actually made it so
the API client works 100% offline.

6
00:00:16.963 --> 00:00:21.080
So I'm going to show you how to
make that work really quickly.

7
00:00:21.080 --> 00:00:25.031
The first thing that you're gonna
wanna run is this command right here,

8
00:00:25.031 --> 00:00:26.726
npm install-D cross-env.

9
00:00:26.726 --> 00:00:31.420
This is to make sure that environmental
variables were consistently across Linux,

10
00:00:31.420 --> 00:00:34.850
and Mac, and Window, so
go ahead and do that.

11
00:00:36.110 --> 00:00:41.029
Go to your command line.

12
00:00:41.029 --> 00:00:47.085
Go to your projects,
which we called ours adopt me,

13
00:00:47.085 --> 00:00:51.223
and do npm install-D cross-env.

14
00:01:00.203 --> 00:01:02.930
&gt;&gt; Brian Holt: Okay,
once you have that tool installed,

15
00:01:02.930 --> 00:01:06.592
then I want you to put this
inside of your package.json.

16
00:01:06.592 --> 00:01:10.180
"dev:mock": cross-env PET_MOCK=mock.

17
00:01:10.180 --> 00:01:14.840
This is the signal for
the API to go ahead and use the mock data.

18
00:01:14.840 --> 00:01:17.490
And then do npm run dev.

19
00:01:18.560 --> 00:01:21.890
And this will just do the same command but
it'll run it in a different environment.

20
00:01:21.890 --> 00:01:23.920
And that's all that's going to do for you.

21
00:01:23.920 --> 00:01:33.918
So I'm just going to copy and paste this
&gt;&gt; Brian Holt: Into my package.json.

22
00:01:33.918 --> 00:01:38.910
So I actually have it already here but
I'll just show you this is where it is.

23
00:01:38.910 --> 00:01:41.361
And I'll just put that in there.

24
00:01:44.763 --> 00:01:47.822
&gt;&gt; Brian Holt: Now,
if I say npm run dev:mock,

25
00:01:47.822 --> 00:01:51.547
everything will work exactly the same.

26
00:01:56.848 --> 00:01:59.136
&gt;&gt; Brian Holt: Except all
the data will be mocked,

27
00:01:59.136 --> 00:02:01.581
which means it will never hit the API.

28
00:02:01.581 --> 00:02:06.636
So if I go here to this,
refresh the page, and

29
00:02:06.636 --> 00:02:12.374
there you can see I have nonsensical data,
right?

30
00:02:12.374 --> 00:02:15.899
Now, this is just returning
to you random data.

31
00:02:15.899 --> 00:02:20.542
The good news is that it is deterministic
in the sense that if I go to,

32
00:02:20.542 --> 00:02:24.214
notice that this second one
here is called Jewelery.

33
00:02:24.214 --> 00:02:29.674
And if I go to Cat,
it will give me a different set of breeds.

34
00:02:29.674 --> 00:02:34.829
But if I go back to dog,
&gt;&gt; Brian Holt: It gives

35
00:02:34.829 --> 00:02:39.030
me the same set of data as well, so it's
dependably the same list of random things.

36
00:02:41.300 --> 00:02:45.260
So if you had the same problem that I did,
which is that it wasn't building in a mock

37
00:02:45.260 --> 00:02:50.050
mode, just do remove, or rather,

38
00:02:50.050 --> 00:02:54.030
what you want to do is you just
want to delete the cache and

39
00:02:54.030 --> 00:02:57.250
dist directories because sometimes
parse gets in a strange state.

40
00:02:58.950 --> 00:03:02.650
So if you just highlight those two and
say delete, and

41
00:03:02.650 --> 00:03:05.540
then rerun dev: mock,
everything should build correctly.

