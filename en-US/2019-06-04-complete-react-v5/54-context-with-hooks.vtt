WEBVTT

1
00:00:00.720 --> 00:00:02.878
&gt;&gt; Brian Holt: So I want you now to go to

2
00:00:02.878 --> 00:00:07.797
SearchParams.js,
&gt;&gt; Brian Holt: And

3
00:00:07.797 --> 00:00:11.220
we're gonna make all the buttons
use our ThemeContext.

4
00:00:13.100 --> 00:00:21.116
So at the top here, I want you to import
ThemeContext from './ThemeContext'.

5
00:00:24.769 --> 00:00:30.159
&gt;&gt; Brian Holt: And we're also gonna get
another hook from React called useContext.

6
00:00:37.371 --> 00:00:40.716
&gt;&gt; Brian Holt: Okay, and
then up here underneath pets,

7
00:00:40.716 --> 00:00:44.040
we're gonna say const Theme.

8
00:00:44.040 --> 00:00:47.290
And keep in mind that this also
comes with a setTheme as well.

9
00:00:48.690 --> 00:00:51.829
But we're not gonna use the setTheme,
so I'm just not gonna grab it.

10
00:00:51.829 --> 00:00:59.543
So const [theme] = useContext
&gt;&gt; Brian Holt: (ThemeContext).

11
00:01:03.760 --> 00:01:07.180
&gt;&gt; Brian Holt: So again,
ThemeContext could be anything.

12
00:01:07.180 --> 00:01:09.800
This could be an object, it doesn't
necessarily have to be an array or

13
00:01:09.800 --> 00:01:10.720
a hook or anything like that.

14
00:01:10.720 --> 00:01:14.206
They're just convenient to
use with each other, but

15
00:01:14.206 --> 00:01:16.460
they are more flexible than that.

16
00:01:19.957 --> 00:01:23.684
&gt;&gt; Brian Holt: So now, I have this theme,
which is available to use,

17
00:01:23.684 --> 00:01:26.046
so I'm gonna go down to my button.

18
00:01:30.652 --> 00:01:35.020
&gt;&gt; Brian Holt: Here, at this Submit
button, I'm gonna say style = and

19
00:01:35.020 --> 00:01:38.492
just do some inline CSS
like a professional.

20
00:01:38.492 --> 00:01:41.057
[LAUGH] Just kidding, don't do this.

21
00:01:44.469 --> 00:01:47.244
&gt;&gt; Brian Holt: So typically, you would
expect this to be color: blank or

22
00:01:47.244 --> 00:01:48.726
something like that, right?

23
00:01:48.726 --> 00:01:52.290
React makes it a little bit easier,
that you can just keep it an object.

24
00:01:52.290 --> 00:01:55.620
So I'm just gonna say
color: theme like that.

25
00:01:57.520 --> 00:01:59.975
Now notice there are two curly
braces next to each other, but

26
00:01:59.975 --> 00:02:05.130
notice they're colored differently,
that's because this is an object, right?

27
00:02:05.130 --> 00:02:08.960
And this is the JavaScript
expression from JSX thing.

28
00:02:08.960 --> 00:02:12.520
So it's not that two curly braces next
to each other have any sort of special

29
00:02:12.520 --> 00:02:13.420
meaning in JSX.

30
00:02:13.420 --> 00:02:15.379
That just happens to be how that looks.

31
00:02:24.390 --> 00:02:29.390
&gt;&gt; Brian Holt: Okay, so, now if you
go over and look at our project.

32
00:02:31.160 --> 00:02:33.660
Sorry, you don't want color,
you want background color.

33
00:02:33.660 --> 00:02:35.040
I mean notice it still worked, right?

34
00:02:35.040 --> 00:02:37.490
The color of this is blue, but
that's not what I intended.

35
00:02:37.490 --> 00:02:42.667
I intended this to be backgroundColor.

36
00:02:44.150 --> 00:02:46.148
&gt;&gt; Brian Holt: And there you go,
now it's dark blue.

37
00:02:50.879 --> 00:02:54.415
&gt;&gt; Brian Holt: Let's talk about, I mean,
obviously this was a lot of ritual to

38
00:02:54.415 --> 00:02:58.890
get very little benefit out of it, but
let's talk about why this was important.

39
00:02:58.890 --> 00:03:04.600
I have App.js here on the top, right,
which I've wrapped in this theme provider.

40
00:03:04.600 --> 00:03:09.820
And then inside of SearchParams, notice I
haven't passed anything into SearchParams.

41
00:03:09.820 --> 00:03:13.893
Typically, you would have
had to do something like

42
00:03:13.893 --> 00:03:16.744
themeColor = {theme}, right?

43
00:03:16.744 --> 00:03:19.911
And you'd have to do the same thing with
details and pass it into every individual

44
00:03:19.911 --> 00:03:22.760
piece of your application that
read from the theme, right?

45
00:03:22.760 --> 00:03:25.431
That's burdensome, right?

46
00:03:25.431 --> 00:03:29.120
You get to a certain point where it gets
more burdensome than it's useful, right?

47
00:03:29.120 --> 00:03:33.420
So that's where these
contexts are super useful.

48
00:03:33.420 --> 00:03:37.400
That instead of having to pass
this explicitly into SearchParams,

49
00:03:37.400 --> 00:03:41.420
now I can go into SearchParams.

50
00:03:42.720 --> 00:03:47.470
SearchParams, and
I can read off of the context.

51
00:03:47.470 --> 00:03:52.780
Now I could have infinite
layers between me and

52
00:03:52.780 --> 00:03:54.820
the provider and it still works, right?

53
00:03:54.820 --> 00:03:58.220
It just happens to be that it's the
immediate parent that has a provider but

54
00:03:58.220 --> 00:04:00.624
there could be 17 layers.

55
00:04:01.810 --> 00:04:06.897
And actually, if you look at the reach
router code inside of your Explorer,

56
00:04:06.897 --> 00:04:11.205
let's actually just look at that
right now, Inspect Element.

57
00:04:11.205 --> 00:04:14.705
React, they use context everywhere.

58
00:04:17.822 --> 00:04:21.423
&gt;&gt; Brian Holt: So you can see there
are context provider for ref,

59
00:04:21.423 --> 00:04:22.890
context consumer.

60
00:04:23.910 --> 00:04:27.268
They have a bunch of stuff in here,
context consumer,

61
00:04:27.268 --> 00:04:29.751
context consumer, context provider.

62
00:04:29.751 --> 00:04:34.138
There's a bunch of layers of consumers and
providers.

63
00:04:34.138 --> 00:04:39.607
That all has to do with context.

64
00:04:43.308 --> 00:04:47.678
&gt;&gt; Brian Holt: So it's really easy to use
with useContext, which is a hook, right?

65
00:04:49.879 --> 00:04:51.787
&gt;&gt; Brian Holt: Before we move
on to how to deal with classes,

66
00:04:51.787 --> 00:04:54.461
does anyone have any questions
about what you've seen so far?

67
00:04:57.326 --> 00:05:03.260
&gt;&gt; Speaker 2: So to use the useContext,
the context provider has to be a parent?

68
00:05:05.480 --> 00:05:05.980
&gt;&gt; Brian Holt: Yep.

