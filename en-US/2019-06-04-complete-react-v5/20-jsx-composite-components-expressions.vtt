WEBVTT

1
00:00:00.240 --> 00:00:04.372
&gt;&gt; Brian Holt: So let's go convert app.js
really quick, cuz we don't want this to

2
00:00:04.372 --> 00:00:12.300
be,
&gt;&gt; Brian Holt: Just we want it to be JSX.

3
00:00:13.760 --> 00:00:14.700
So I'm gonna say return.

4
00:00:16.846 --> 00:00:20.546
Let's talk about the parentheses for just
a second, why do I put parentheses here?

5
00:00:20.546 --> 00:00:25.020
Well, if I just say return and
then put something on a new line, and

6
00:00:25.020 --> 00:00:27.000
I put it on a new line so
it's easier to read.

7
00:00:28.800 --> 00:00:32.850
Well, the way the JavaScript
works is if it sees a new line,

8
00:00:32.850 --> 00:00:34.100
it just ends it right here.

9
00:00:34.100 --> 00:00:37.020
So it actually works like that,
where it just ends, right?

10
00:00:37.020 --> 00:00:40.884
So if I surround this in parenthesis,
it's saying hey,

11
00:00:40.884 --> 00:00:44.195
I'm not done yet,
continue on to the next line.

12
00:00:46.473 --> 00:00:51.738
&gt;&gt; Brian Holt: Okay, and so h1&gt;Adopt

13
00:00:51.738 --> 00:00:55.760
Me!, like that.

14
00:00:55.760 --> 00:00:59.230
And then now I wanna use this Pet
component that I made up here, right?

15
00:01:00.990 --> 00:01:01.990
So how am I gonna use that?

16
00:01:03.430 --> 00:01:06.040
Well, it works like this, Pet.

17
00:01:06.040 --> 00:01:09.720
So I actually can use a composite
component as if it was real HTML,

18
00:01:09.720 --> 00:01:10.360
which is really cool.

19
00:01:11.910 --> 00:01:15.140
And then if I wanted to
add that ID back here, so

20
00:01:15.140 --> 00:01:19.960
this ID would be, I called it
something important, right, like that.

21
00:01:21.240 --> 00:01:26.153
That works the same way, and
attributes or properties for

22
00:01:26.153 --> 00:01:32.681
this pet component works exactly the same
way, so I can say name = "Luna",

23
00:01:34.491 --> 00:01:38.238
&gt;&gt; Brian Holt: Animal = "Bird", or no,

24
00:01:38.238 --> 00:01:43.410
"Dog", and breed = "Havanese".

25
00:01:49.288 --> 00:01:54.650
&gt;&gt; Brian Holt: Now, you see this
self-closing tag thing, right?

26
00:01:54.650 --> 00:01:58.070
I know in HTML that that's optional and
frequently I leave it out, cuz again,

27
00:01:58.070 --> 00:02:00.640
I'm lazy and don't type things like that.

28
00:02:00.640 --> 00:02:04.940
But I'll tell you that in JSX they
actually are required, right?

29
00:02:04.940 --> 00:02:08.710
You need to let JSX know that
this is a self-closing tag so

30
00:02:08.710 --> 00:02:10.140
you have to put that trailing slash.

31
00:02:12.160 --> 00:02:14.005
Okay, I'm gonna put three of those.

32
00:02:14.005 --> 00:02:17.467
This was "Pepper",

33
00:02:17.467 --> 00:02:22.568
"Bird", "Cockatiel", and

34
00:02:22.568 --> 00:02:28.417
this was "Doink", mixed "Cat".

35
00:02:35.524 --> 00:02:37.289
&gt;&gt; Brian Holt: What is kinda fun though,

36
00:02:37.289 --> 00:02:42.600
with JSX you can even do self-closing
divs as well, like that.

37
00:02:42.600 --> 00:02:48.195
Which is not legal in HTML but
is legal in JSX, which is kinda fun.

38
00:02:51.446 --> 00:02:53.230
&gt;&gt; Brian Holt: And actually,
Prettier will just do it for you.

39
00:02:53.230 --> 00:03:00.076
If I do that, when I save, it's like, no,
you really meant that, which is kinda fun.

40
00:03:01.864 --> 00:03:05.741
&gt;&gt; Speaker 2: So JSX would take this and
turn it into a React.create,

41
00:03:05.741 --> 00:03:10.691
with the first argument being div,
the second one being emptyObject,

42
00:03:10.691 --> 00:03:15.420
and the third one being a list of
React.creates with all of those?

43
00:03:15.420 --> 00:03:16.350
&gt;&gt; Brian Holt: Yep.

44
00:03:16.350 --> 00:03:20.030
&gt;&gt; Speaker 2: So
what's the benefit of writing

45
00:03:20.030 --> 00:03:23.970
XML to turn it into JavaScript,
to turn it into HTML?

46
00:03:23.970 --> 00:03:25.152
&gt;&gt; Brian Holt: Yep.
&gt;&gt; Speaker 2: Why don't it just

47
00:03:25.152 --> 00:03:25.699
write HTML?

48
00:03:32.107 --> 00:03:35.321
&gt;&gt; Brian Holt: Ultimately,
this is a template of some sort, right?

49
00:03:35.321 --> 00:03:37.027
Kind of falsely so, right?

50
00:03:37.027 --> 00:03:40.520
Cuz it's not actually a template,
it's actually just function calls.

51
00:03:40.520 --> 00:03:42.040
But in the end,
this is actually imperative,

52
00:03:42.040 --> 00:03:43.930
cuz it's being executed, right?

53
00:03:43.930 --> 00:03:49.010
Whereas HTML is declarative,
it's not something you can execute, right?

54
00:03:49.010 --> 00:03:52.770
So everything I've shown you so far,
this is all very static data, right?

55
00:03:52.770 --> 00:03:56.180
But you can imagine here,
instead of having Luna equal this,

56
00:03:56.180 --> 00:04:00.290
I could have API result, right?

57
00:04:00.290 --> 00:04:03.050
And now I can pass dynamic
information into Pet.

58
00:04:03.050 --> 00:04:06.450
It gives me the power of
JavaScript to manipulate this.

59
00:04:06.450 --> 00:04:07.493
Does that answer your question?

60
00:04:07.493 --> 00:04:08.013
&gt;&gt; Speaker 2: Yeah, thank you.

61
00:04:08.013 --> 00:04:08.701
&gt;&gt; Brian Holt: Cool, yep.

62
00:04:12.020 --> 00:04:15.062
&gt;&gt; Brian Holt: So actually, along those
lines, I think something that I skipped

63
00:04:15.062 --> 00:04:17.506
over explaining were the curly
braces over here, and

64
00:04:17.506 --> 00:04:19.260
let's address that really quickly.

65
00:04:20.630 --> 00:04:24.650
So right now, if I go over and
look at my site,

66
00:04:24.650 --> 00:04:27.890
I think everything should be fixed again,
hold on, one more thing to fix here.

67
00:04:27.890 --> 00:04:33.152
Rather than having a React.create link
down here, make this app like that.

68
00:04:36.794 --> 00:04:38.402
&gt;&gt; Brian Holt: So again, line 31 there,

69
00:04:38.402 --> 00:04:41.085
just make that React.create
an App like that.

70
00:04:45.347 --> 00:04:49.953
&gt;&gt; Brian Holt: Okay, so
now that I've done that,

71
00:04:49.953 --> 00:04:53.210
go back over to Pet.js.

72
00:04:53.210 --> 00:04:56.230
And if I go over to my app,
hopefully it's still running.

73
00:04:56.230 --> 00:04:57.540
No, not that one, this one.

74
00:04:58.540 --> 00:04:59.890
Did I stop it from running?

75
00:04:59.890 --> 00:05:01.784
I did, npm run dev.

76
00:05:15.273 --> 00:05:16.475
&gt;&gt; Brian Holt: Refresh the page.

77
00:05:16.475 --> 00:05:18.985
So I have Luna, Pepper, and Doink, right?

78
00:05:20.575 --> 00:05:25.004
What happens if I remove
the curly braces here?

79
00:05:28.214 --> 00:05:30.655
&gt;&gt; Brian Holt: Now it's literally
gonna be the name, right?

80
00:05:30.655 --> 00:05:31.593
So if I save this and

81
00:05:31.593 --> 00:05:35.560
go back over here you'll see that it says
literally the word name here, right?

82
00:05:35.560 --> 00:05:40.035
So what the curly braces do is
you're letting JSX know this is

83
00:05:40.035 --> 00:05:42.590
a JavaScript expression in here.

84
00:05:42.590 --> 00:05:46.038
And the term expression means anything
that can be on the right side of

85
00:05:46.038 --> 00:05:46.880
an assignment.

86
00:05:46.880 --> 00:05:50.613
So if I say const x = something,

87
00:05:50.613 --> 00:05:56.715
let's just say,
&gt;&gt; Brian Holt: I

88
00:05:56.715 --> 00:06:01.663
don't know, named.toUpperCase}, right?

89
00:06:01.663 --> 00:06:06.170
So anything that can be on the right
side of an equals sign here,

90
00:06:06.170 --> 00:06:08.732
this is considered an expression.

91
00:06:10.695 --> 00:06:11.440
&gt;&gt; Brian Holt: So for example,

92
00:06:11.440 --> 00:06:14.660
you can't have an if statement
on the right side of it, right?

93
00:06:14.660 --> 00:06:17.070
So a const y = if,

94
00:06:17.070 --> 00:06:21.020
this doesn't work because an expression
and a statement are different, right?

95
00:06:21.020 --> 00:06:22.330
A statement is a whole idea, right?

96
00:06:22.330 --> 00:06:25.970
So all of line three would be
considered one statement, but

97
00:06:25.970 --> 00:06:28.460
everything here on the right side
is considered an expression.

98
00:06:30.040 --> 00:06:31.690
Does that delineation make sense?

99
00:06:32.770 --> 00:06:38.140
Okay, so that means here inside of name, I
can say .toUpperCase and invoke that right

100
00:06:38.140 --> 00:06:42.880
here, or this could be invoking animal,
the function, or something like that, or

101
00:06:42.880 --> 00:06:48.080
this can be + animal, right?

102
00:06:48.080 --> 00:06:50.110
So anything that can be on the right
side of an equal sign, but

103
00:06:50.110 --> 00:06:52.210
I can't put a full if statement in there.

104
00:06:52.210 --> 00:06:53.840
But you can use ternaries, right?

105
00:06:53.840 --> 00:06:56.276
Cuz ternaries are technically expressions,
and

106
00:06:56.276 --> 00:06:58.790
a ternary is like the question mark thing.

107
00:06:58.790 --> 00:06:59.911
I'll use them later.

108
00:06:59.911 --> 00:07:03.140
They're fun or not fun,
depending on who you ask.

109
00:07:03.140 --> 00:07:04.650
I think they're fun.

110
00:07:04.650 --> 00:07:08.728
So anyway, and again, yeah,
now I've messed up everything, right, so

111
00:07:08.728 --> 00:07:13.353
now Luna is all capitalized, and you have
HavaneseDog and CockatielBird, right?

112
00:07:15.738 --> 00:07:17.920
&gt;&gt; Brian Holt: So
that's what those are about.

113
00:07:17.920 --> 00:07:22.882
And it's just a single curly brace there,
that's how it works.

114
00:07:28.425 --> 00:07:29.683
&gt;&gt; Brian Holt: And so you can mix and

115
00:07:29.683 --> 00:07:32.654
match them too, so
I could have name like that.

116
00:07:32.654 --> 00:07:35.606
And if I go back here,
it says Name: Luna, Name: Pepper, and

117
00:07:35.606 --> 00:07:37.350
it does that concatenation for you.

