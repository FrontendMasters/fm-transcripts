WEBVTT

1
00:00:00.250 --> 00:00:05.786
&gt;&gt; Brian Holt: So
down here we're gonna say npm install -D

2
00:00:05.786 --> 00:00:11.780
eslint eslint-config-prettier like that.

3
00:00:14.370 --> 00:00:16.200
This is going to install two
different things for us.

4
00:00:16.200 --> 00:00:19.587
It's gonna obviously eslint,
which is a code linter.

5
00:00:19.587 --> 00:00:23.675
Let's talk about what the difference
between prettier and eslint now.

6
00:00:23.675 --> 00:00:28.100
Because people kind of confuse the two and
understandably so, there's overlap.

7
00:00:31.130 --> 00:00:34.658
Prettier is purely concerned
with is there a space here?

8
00:00:34.658 --> 00:00:36.920
Is there return here?

9
00:00:36.920 --> 00:00:40.322
How does this file star,
it's very mechanical, right?

10
00:00:40.322 --> 00:00:42.526
It's very much, how is this formatted, but

11
00:00:42.526 --> 00:00:45.492
it doesn't care about what
the code actually does, right?

12
00:00:45.492 --> 00:00:48.754
So it doesn't look like
does this variable exist?

13
00:00:48.754 --> 00:00:51.291
Does this you know,
are we using the wrong method here?

14
00:00:51.291 --> 00:00:53.410
Are we using old JavaScript here?

15
00:00:53.410 --> 00:00:57.336
As long as it parses like
prettier doesn't care.

16
00:00:57.336 --> 00:01:01.511
Eslint is much more concerned with style,
right.

17
00:01:01.511 --> 00:01:03.720
It's concerned with what
methods are you using?

18
00:01:05.350 --> 00:01:06.950
You know, accessibility friendly, right?

19
00:01:06.950 --> 00:01:08.700
It can check kind of those things.

20
00:01:09.780 --> 00:01:11.270
Does that make sense?

21
00:01:11.270 --> 00:01:14.500
So you can have eslint check
some of the mechanical stuff.

22
00:01:14.500 --> 00:01:17.642
But it doesn't have the power that
prettier does for that kind of stuff.

23
00:01:17.642 --> 00:01:20.380
So that's why we're going to
install the prettier config,

24
00:01:20.380 --> 00:01:21.731
to basically say hey eslint.

25
00:01:21.731 --> 00:01:24.819
That stuff that you sometimes
worry about like spacing,

26
00:01:24.819 --> 00:01:27.852
don't worry about it because
prettier has it, right?

27
00:01:27.852 --> 00:01:29.418
So install both of those.

28
00:01:39.598 --> 00:01:41.631
&gt;&gt; Brian Holt: Okay, and
now we have both of these.

29
00:01:41.631 --> 00:01:47.214
Eslint-config prettier, eslint, and

30
00:01:47.214 --> 00:01:54.640
now we're going to go
create A eslint-rc as well.

31
00:01:54.640 --> 00:01:56.660
So make a new file, save it.

32
00:01:58.210 --> 00:02:04.502
And call this .eslint-c.Json.

33
00:02:06.065 --> 00:02:08.902
&gt;&gt; Brian Holt: They require
you give it the extension,

34
00:02:08.902 --> 00:02:11.243
whereas .prettierrc does not.

35
00:02:11.243 --> 00:02:16.027
Because you can also configure this in
YAML, as well as in JavaScript as well.

36
00:02:16.027 --> 00:02:18.098
But we're gonna do the JSON
way of doing it right now.

37
00:02:20.983 --> 00:02:23.110
&gt;&gt; Brian Holt: And yes, I use a period.

38
00:02:23.110 --> 00:02:25.330
Did you have a question?

39
00:02:25.330 --> 00:02:27.796
&gt;&gt; Speaker 2: When I ran
the command in the terminal,

40
00:02:27.796 --> 00:02:31.540
it created a new file called package walk,
is that JSON?

41
00:02:31.540 --> 00:02:33.585
&gt;&gt; Brian Holt: Yep, it should do that.

42
00:02:33.585 --> 00:02:36.540
All right, so
let's let's just address that briefly.

43
00:02:36.540 --> 00:02:45.920
If I go back over here, it created
a new file here called package Lock.

44
00:02:45.920 --> 00:02:50.920
So package lock is a lock file.

45
00:02:50.920 --> 00:02:55.643
[LAUGH] So what it actually does is
when you deploy your code to production,

46
00:02:55.643 --> 00:02:58.395
it's actually locked down the versions.

47
00:02:58.395 --> 00:03:02.847
If you look at this you can see
that it has integrity checks, and

48
00:03:02.847 --> 00:03:08.820
like where to download it from and
what version it's on and stuff like that.

49
00:03:08.820 --> 00:03:10.100
And you want it to have this,

50
00:03:10.100 --> 00:03:14.130
because now I can install exactly
the correct versions in productions.

51
00:03:14.130 --> 00:03:17.110
So, what I'm running in my computer,
is exactly what's running on production.

52
00:03:18.940 --> 00:03:23.356
So, the way that you do that when
you're running in production,

53
00:03:23.356 --> 00:03:28.270
don't do this on your local computer,
but if I do it npm, oops, npm ci.

54
00:03:28.270 --> 00:03:30.300
It'll actually use the package lock and

55
00:03:30.300 --> 00:03:33.954
sort of package of JSON to install
exactly the correct version, right?

56
00:03:33.954 --> 00:03:38.010
Whereas if you do NPM install see
if I got a package of JSON here.

57
00:03:39.310 --> 00:03:45.470
Let's say you know next week
they release 1.17.1, right?

58
00:03:45.470 --> 00:03:47.600
If my file looks like this.

59
00:03:47.600 --> 00:03:49.010
It'll actually install at 1.17.1.

60
00:03:49.010 --> 00:03:52.630
Reason being it's because
that's a patch version, so

61
00:03:52.630 --> 00:03:53.960
it should be compatible, right?

62
00:03:53.960 --> 00:03:55.420
Does that make sense?

63
00:03:55.420 --> 00:04:00.010
Whereas if I do MPMCI, it'll actually
install exactly the versions I was using.

64
00:04:00.010 --> 00:04:02.100
So it'll still install MPM 1.17.0.

65
00:04:02.100 --> 00:04:04.340
Does that answer your question?

66
00:04:04.340 --> 00:04:05.520
&gt;&gt; Speaker 2: Yeah.
Thank you.

67
00:04:05.520 --> 00:04:06.600
&gt;&gt; Brian Holt: Cool.

68
00:04:06.600 --> 00:04:08.780
Yep, it's the same thing
as a Yarn log file.

69
00:04:08.780 --> 00:04:13.480
The packaged log and Yarn log accomplish,
as far as I know, exactly the same thing.

