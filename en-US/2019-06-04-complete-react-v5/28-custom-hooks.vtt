WEBVTT

1
00:00:00.050 --> 00:00:01.640
&gt;&gt; Brian Holt: Before we get
to requesting against the API,

2
00:00:01.640 --> 00:00:05.020
I wanna show you how to do with
something that's called a custom hook.

3
00:00:07.120 --> 00:00:10.660
So right now we've just been using
useState all over the place, but

4
00:00:10.660 --> 00:00:18.670
if you notice HTML for animal, or
this one here right animal and breed.

5
00:00:18.670 --> 00:00:21.680
These are almost the same thing,
right, to the point that like,

6
00:00:21.680 --> 00:00:24.490
it'd be nice if we could have
some sort of like reusable bit.

7
00:00:24.490 --> 00:00:26.943
That would do like a drop-down for us, and

8
00:00:26.943 --> 00:00:30.019
we didn't have to do all this song and
circumstance.

9
00:00:30.019 --> 00:00:34.190
And we could maintain them together,
so let's actually go do that.

10
00:00:35.280 --> 00:00:40.244
So make a new file here,
and call it useDropdown.js.

11
00:00:42.863 --> 00:00:45.962
&gt;&gt; Brian Holt: Okay,
here you wanna import React from 'react'.

12
00:00:49.611 --> 00:00:51.661
&gt;&gt; Brian Holt: And
we're also gonna use useState.

13
00:00:57.403 --> 00:00:59.984
&gt;&gt; Brian Holt: Okay, and
then I'm gonna say const useDropdown,

14
00:00:59.984 --> 00:01:02.590
this is gonna be our hook
that we're gonna create.

15
00:01:02.590 --> 00:01:07.750
And it's gonna take in a label,
some sort of default state,

16
00:01:07.750 --> 00:01:11.910
and some sort of a list of
options to put in there.

17
00:01:16.337 --> 00:01:24.224
&gt;&gt; Brian Holt: Then down at the bottom
we're going to export default useDropdown.

18
00:01:24.224 --> 00:01:26.934
So we're gonna say const state,
useState, so

19
00:01:26.934 --> 00:01:29.725
we're gonna make this
like a generic dropdown.

20
00:01:31.898 --> 00:01:33.148
&gt;&gt; Brian Holt: So not useState but

21
00:01:33.148 --> 00:01:39.355
setState
&gt;&gt; Brian Holt: Equals useState, and

22
00:01:39.355 --> 00:01:45.839
the default state of this is going to be
whatever they pass in, so default state.

23
00:01:50.223 --> 00:01:53.921
&gt;&gt; Brian Holt: We're gonna get some
sort of ID, so you just need it to be

24
00:01:53.921 --> 00:01:58.276
something unique, because we have
to give things keys and such.

25
00:01:58.276 --> 00:02:02.758
So I'm gonna use template strings,
so I'm gonna use backticks,

26
00:02:02.758 --> 00:02:06.210
backticks are the ones next
to 1 on your keyboard.

27
00:02:06.210 --> 00:02:11.099
Then we'll say use-drop
down-$ curly braces and

28
00:02:11.099 --> 00:02:15.330
then JavaScript expressions
can go in here.

29
00:02:15.330 --> 00:02:19.635
So, I'm gonna say, label.replace, so

30
00:02:19.635 --> 00:02:25.745
take any spaces out of the string and
also make it lowercase.

31
00:02:28.163 --> 00:02:33.897
&gt;&gt; Brian Holt: So like if label here
was something like Best Dogs Ever or

32
00:02:33.897 --> 00:02:37.070
something like that, right?

33
00:02:37.070 --> 00:02:43.346
What this would do is it would make this
&gt;&gt; Brian Holt: Look like that,

34
00:02:43.346 --> 00:02:47.000
right, that's what this
would output there, right?

35
00:02:47.000 --> 00:02:49.220
Doesn't matter that it's readable,
it just matters that it's unique.

36
00:02:55.471 --> 00:02:59.619
&gt;&gt; Brian Holt: Okay, and then the
component that we're gonna make is called

37
00:02:59.619 --> 00:03:03.550
a Dropdown, so
const Dropdown equals an arrow function.

38
00:03:03.550 --> 00:03:08.407
And we're just gonna use that
implicit return again with

39
00:03:08.407 --> 00:03:13.174
the parentheses,
equals label htmlFor equals the ID.

40
00:03:19.209 --> 00:03:24.371
&gt;&gt; Brian Holt: And then here, this is
gonna have an ID, we need to put a label

41
00:03:24.371 --> 00:03:29.958
inside of that label which is
coming in here from the parameters.

42
00:03:29.958 --> 00:03:32.366
And then we're gonna put
a select inside of that.

43
00:03:35.141 --> 00:03:41.159
&gt;&gt; Brian Holt: And we have to give that
select an ID as well, so id= [id],

44
00:03:41.159 --> 00:03:46.238
value = state which we created up here,
so state.

45
00:03:49.162 --> 00:03:54.702
&gt;&gt; Brian Holt: OnChange,
we're going to call e and

46
00:03:54.702 --> 00:04:02.935
we're gonna say to setState
to be e.target.value.

47
00:04:02.935 --> 00:04:09.663
And then the same thing for blur, onBlur.

48
00:04:14.640 --> 00:04:22.054
&gt;&gt; Brian Holt: And then we have to
give it that disabled thing as well,

49
00:04:22.054 --> 00:04:29.630
disabled equals options.length triple = 0.

50
00:04:29.630 --> 00:04:34.470
Here we're gonna give it an option of all,
which is gonna have no value, right?

51
00:04:34.470 --> 00:04:38.550
Which means it's going to have
nothing selective when it's on all.

52
00:04:41.460 --> 00:04:46.290
And then here we're gonna say options.map
and do the same thing with map.

53
00:04:46.290 --> 00:04:51.466
So this is gonna be some item in the array
of some option, we'll stick with item.

54
00:04:51.466 --> 00:04:57.092
Use our implicit return
with parentheses and

55
00:04:57.092 --> 00:05:03.163
say option key=[item], value=[item],

56
00:05:03.163 --> 00:05:07.466
and then item right there as well.

57
00:05:24.577 --> 00:05:27.205
&gt;&gt; Brian Holt: Get my parentheses
all matched up, here we go.

58
00:05:32.678 --> 00:05:35.356
&gt;&gt; Brian Holt: So now we have this
generic drop down component, right?

59
00:05:35.356 --> 00:05:39.935
That's gonna take in a label,
some default state options and

60
00:05:39.935 --> 00:05:42.056
make a dropdown component.

61
00:05:42.056 --> 00:05:48.537
So now what we're going to
return down here at the bottom,

62
00:05:48.537 --> 00:05:54.111
is we're gonna return the state,
the Dropdown.

63
00:05:54.111 --> 00:05:58.673
And then we're also gonna return
this setState function as well.

64
00:06:03.480 --> 00:06:07.743
&gt;&gt; Brian Holt: Like that, and now we
can use this just like we used a hook,

65
00:06:07.743 --> 00:06:11.268
because this is gonna give us the state.

66
00:06:11.268 --> 00:06:14.957
The Dropdown's gonna handle all of the
setting and unsetting of the state, right?

67
00:06:14.957 --> 00:06:19.210
And then just in case as well for later,
we're gonna return this setState function.

68
00:06:19.210 --> 00:06:22.620
So that we can programmatically update it,
in addition to using the Dropdown.

69
00:06:22.620 --> 00:06:25.612
So I understand this is a little abstract,

70
00:06:25.612 --> 00:06:29.696
we've taken the animal Dropdown and
the breed Dropdown.

71
00:06:29.696 --> 00:06:35.370
And then we've just formed it into
this kind of generic Dropdown hook.

72
00:06:38.252 --> 00:06:39.888
&gt;&gt; Brian Holt: Good so far?

73
00:06:39.888 --> 00:06:43.888
All right, so let's go ahead and
go back to the search params.

74
00:06:47.019 --> 00:06:51.793
&gt;&gt; Brian Holt: And what we're gonna do,
instead of doing animal and setAnimal,

75
00:06:51.793 --> 00:06:55.213
what we're gonna do is
we're gonna say const.

76
00:06:59.579 --> 00:07:04.686
&gt;&gt; Brian Holt: First thing is
you have to import up top,

77
00:07:04.686 --> 00:07:10.555
so Import useDropown from ./useDropdown.

78
00:07:10.555 --> 00:07:16.267
We still need breeds so
we'll keep track of that,

79
00:07:16.267 --> 00:07:21.163
but now what we're gonna do is we're gonna

80
00:07:21.163 --> 00:07:26.070
say const [animal, animalDropdown].

81
00:07:26.070 --> 00:07:30.733
And we'll actually just
leave it at that for now,

82
00:07:30.733 --> 00:07:35.961
= useDropDown, and
we'll give it Animals the label.

83
00:07:37.901 --> 00:07:40.162
&gt;&gt; Brian Holt: We'll give it
dog as the default state,

84
00:07:40.162 --> 00:07:43.630
and we'll give it Animals as
a list of options to choose from.

85
00:07:46.910 --> 00:07:52.717
Then for breeds we're gonna say const,
&gt;&gt; Brian Holt: Breed,

86
00:07:52.717 --> 00:07:58.075
BreedDropdown and
we'll leave it at that for

87
00:07:58.075 --> 00:08:02.728
now equals useDropdown with "Breed"

88
00:08:02.728 --> 00:08:08.530
empty string as a default state, right?

89
00:08:08.530 --> 00:08:15.750
And breeds which again we'll handle this
from the API here is just a second later.

90
00:08:16.890 --> 00:08:19.490
So now I have this animal Dropdown and
this breed drop down, so

91
00:08:19.490 --> 00:08:23.250
rather than having all of this
label stuff here for that.

92
00:08:23.250 --> 00:08:25.829
I'm gonna delete Animal and
I'm gonna delete Breed.

93
00:08:28.862 --> 00:08:31.578
&gt;&gt; Brian Holt: So now I just have
the location one, which is different,

94
00:08:31.578 --> 00:08:33.739
we don't wanna make
that generic right now.

95
00:08:33.739 --> 00:08:40.064
But what's cool is I just have
an AnimalDropdown and a BreedDropdown.

96
00:08:43.363 --> 00:08:46.025
&gt;&gt; Brian Holt: And
that's pretty cool in my opinion,

97
00:08:46.025 --> 00:08:51.607
we've kinda taken out this logic, we
extracted it out to this useDropdown hook.

98
00:08:51.607 --> 00:08:55.456
And now we just get these
little AnimalDropdown,

99
00:08:55.456 --> 00:08:59.130
BreedDropddown, self contained dropdowns.

100
00:08:59.130 --> 00:09:00.570
So if I save this and

101
00:09:00.570 --> 00:09:05.351
I go back over to my code this all
works exactly the same way now.

102
00:09:05.351 --> 00:09:12.742
But it's using this kind of shared
generic class, or hook, as it were.

103
00:09:15.650 --> 00:09:18.671
&gt;&gt; Brian Holt: And what's great about
this is now I can write all sorts of unit

104
00:09:18.671 --> 00:09:20.889
tests,and I can use this
all over the place.

105
00:09:20.889 --> 00:09:24.840
And I can kinda guarantee to my future
self that this is a really good piece of

106
00:09:24.840 --> 00:09:27.488
code that I can reuse over and
over and over again.

107
00:09:32.425 --> 00:09:36.520
&gt;&gt; Brian Holt: Now we have a bunch
of errors around unused variables,

108
00:09:36.520 --> 00:09:42.140
we will fix this momentarily, but
you should expect to see that right now.

