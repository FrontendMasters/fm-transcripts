WEBVTT

1
00:00:00.100 --> 00:00:05.430
&gt;&gt; Brian Holt: Error boundaries is one
of two things that hooks cannot do.

2
00:00:05.430 --> 00:00:08.601
You cannot do error boundaries
without using classes.

3
00:00:08.601 --> 00:00:14.730
So this is actually a pretty critical one,
so let's go ahead and take a look at this.

4
00:00:15.840 --> 00:00:18.990
So some of these API responses
could potentially have

5
00:00:18.990 --> 00:00:20.220
errors inside of them, right?

6
00:00:20.220 --> 00:00:23.758
We don't control this API,
it's coming from a third party, right, so

7
00:00:23.758 --> 00:00:27.705
we wanna be extra careful with handling
errors and handling malformatted data.

8
00:00:27.705 --> 00:00:32.091
And so error boundaries are going to
allow you to capture some of these errors

9
00:00:32.091 --> 00:00:34.500
without crashing your program, right?

10
00:00:36.890 --> 00:00:45.188
So I want you to make a new file
here called errorboundary.js.

11
00:00:49.068 --> 00:00:50.841
&gt;&gt; Brian Holt: And
I'm just gonna tell you right now,

12
00:00:50.841 --> 00:00:52.413
this is mostly code from the docs.

13
00:00:54.501 --> 00:01:04.181
&gt;&gt; Brian Holt: I'll just keep the
reactjs.org/docs/error-boundaries.html.

14
00:01:06.340 --> 00:01:10.140
Okay, we're gonna import React from React.

15
00:01:12.509 --> 00:01:21.022
&gt;&gt; Brian Holt: And we're gonna
import a link from @reach/router.

16
00:01:24.364 --> 00:01:28.361
&gt;&gt; Brian Holt: So here I'm going to say,
class ErrorBoundary,

17
00:01:28.361 --> 00:01:33.032
one of those words that looks
weird the more you look at it.

18
00:01:33.032 --> 00:01:35.100
Extends.

19
00:01:35.100 --> 00:01:37.310
So we've been doing React.component, but

20
00:01:37.310 --> 00:01:39.870
I'm gonna show just a different
way that you could do this.

21
00:01:39.870 --> 00:01:47.770
You can also put ,Component here like
this and just say extends Component.

22
00:01:53.040 --> 00:01:55.180
Works the same way right,
we're just pulling out component,

23
00:01:55.180 --> 00:01:58.400
there's no necessarily
benefit to doing it this way.

24
00:01:58.400 --> 00:01:59.940
You'll just see a lot of
people do it this way.

25
00:01:59.940 --> 00:02:01.074
Just wanted to show you that.

26
00:02:04.689 --> 00:02:10.684
&gt;&gt; Brian Holt: Okay,
we're gonna say state = hasError, false.

27
00:02:15.584 --> 00:02:20.061
&gt;&gt; Brian Holt: Okay, the next thing
we're going to write is static

28
00:02:20.061 --> 00:02:22.718
getDerivedStateFromError.

29
00:02:27.992 --> 00:02:31.050
&gt;&gt; Brian Holt: And
we're just gonna return hasError: true.

30
00:02:32.380 --> 00:02:35.721
&gt;&gt; Brian Holt: hasError: true.

31
00:02:35.721 --> 00:02:41.420
You could be more sophisticated about
how you do this, but we're not going to.

32
00:02:44.490 --> 00:02:47.844
And then we're going to say
componentDidCatch that top one there.

33
00:02:51.598 --> 00:02:53.709
&gt;&gt; Brian Holt: And
we're going to get back the error and

34
00:02:53.709 --> 00:02:55.810
the info about the error from that.

35
00:02:55.810 --> 00:02:58.332
These are all React methods.

36
00:02:58.332 --> 00:03:03.105
And here all we're going
to do is going to say

37
00:03:03.105 --> 00:03:08.781
console.error, ErrorBoundary
caught an error.

38
00:03:12.403 --> 00:03:15.720
&gt;&gt; Brian Holt: And then we're just
gonna log out error and info.

39
00:03:15.720 --> 00:03:20.408
But if you had something here like
Azure Monitor or Track JS or Century or

40
00:03:20.408 --> 00:03:21.894
something like that,

41
00:03:21.894 --> 00:03:26.991
you probably just send that off to
the tiered consolidated logging service.

42
00:03:30.234 --> 00:03:34.794
&gt;&gt; Brian Holt: Okay, and
then here we're gonna say return, sorry,

43
00:03:34.794 --> 00:03:36.891
render rather, render.

44
00:03:41.026 --> 00:03:44.302
&gt;&gt; Brian Holt: And we're gonna say,

45
00:03:44.302 --> 00:03:49.997
If this.state.hasError, return.

46
00:03:53.613 --> 00:03:57.333
&gt;&gt; Brian Holt: An h1, and again, you'd
probably have better UI around this, but

47
00:03:57.333 --> 00:04:01.645
we're just gonna return a h1 that says,
there was an error with this listing.

48
00:04:03.933 --> 00:04:07.746
&gt;&gt; Brian Holt: Link to equals.

49
00:04:07.746 --> 00:04:10.086
I'm just going to have them link to home.

50
00:04:10.086 --> 00:04:17.867
Click here to go back to the home page or

51
00:04:17.867 --> 00:04:22.006
wait five seconds.

52
00:04:26.162 --> 00:04:29.516
&gt;&gt; Brian Holt: So just to give the user
a bit of information, like hey there's

53
00:04:29.516 --> 00:04:33.908
an error here, just so you know, we're
gonna redirect you back to the homepage.

54
00:04:35.412 --> 00:04:38.229
&gt;&gt; Brian Holt: Otherwise, all you're
going to do is just pass through all of

55
00:04:38.229 --> 00:04:40.540
the components that are coming through,
right?

56
00:04:40.540 --> 00:04:44.020
So it's just like an error boundary that
sits above a component and if there's

57
00:04:44.020 --> 00:04:47.950
an error, it does something about it,
otherwise it's a pass-through right?

58
00:04:47.950 --> 00:04:53.144
So you just going to say
return this.props.children.

59
00:04:56.150 --> 00:05:00.484
&gt;&gt; Brian Holt: So this.props.children
is going to be whether it was contained

60
00:05:00.484 --> 00:05:02.227
inside of the component.

61
00:05:02.227 --> 00:05:05.290
So for example, we have the link
component right here, right?

62
00:05:06.500 --> 00:05:11.100
The children, "this.props.children"
of link would be click here, right?

63
00:05:11.100 --> 00:05:14.995
It's whatever you put inside of it.

64
00:05:14.995 --> 00:05:16.760
Does that make sense?

65
00:05:16.760 --> 00:05:18.765
So if I had like a bunch
of components inside of it,

66
00:05:18.765 --> 00:05:22.970
this.props.children will be all
of those components inside of it.

67
00:05:24.310 --> 00:05:31.535
Okay, and then last thing,
export default ErrorBoundary.

68
00:05:36.937 --> 00:05:40.320
&gt;&gt; Brian Holt: It's kind of
an advanced React use case right?

69
00:05:40.320 --> 00:05:44.605
This is not always going to be useful for
you.

70
00:05:44.605 --> 00:05:46.920
I don't think the entire time
I was working at Netflix,

71
00:05:46.920 --> 00:05:48.257
we ever used error boundaries.

72
00:05:52.787 --> 00:05:55.040
&gt;&gt; Brian Holt: This is prettier,
that's breaking it up this way.

73
00:05:55.040 --> 00:05:59.060
So if that looks weird,
that's where its coming from.

74
00:05:59.060 --> 00:06:01.409
This is how you can like
break it into multiple lines.

75
00:06:05.285 --> 00:06:10.840
&gt;&gt; Speaker 2: So this will catch an error
that occurs in any of its children?

76
00:06:10.840 --> 00:06:11.340
&gt;&gt; Brian Holt: Exactly.

77
00:06:12.740 --> 00:06:15.095
&gt;&gt; Speaker 2: Why do we need
to return this.props.children?

78
00:06:17.300 --> 00:06:23.217
&gt;&gt; Brian Holt: You always have to return
something inside of a render method.

79
00:06:23.217 --> 00:06:24.229
So if I have this,

80
00:06:24.229 --> 00:06:28.710
there's a potential right that this
wouldn't return anything, right?

81
00:06:28.710 --> 00:06:31.910
Which means it would be
basically eating the children.

82
00:06:31.910 --> 00:06:34.540
That's a really weird way of saying that,
right?

83
00:06:34.540 --> 00:06:36.490
But it would not be
rendering out the children.

84
00:06:36.490 --> 00:06:40.630
So it has to pass through right, it has to
take something and then pass it through to

85
00:06:40.630 --> 00:06:44.110
the other side, otherwise it would
just be blocking it right there.

