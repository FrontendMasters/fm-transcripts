WEBVTT

1
00:00:00.360 --> 00:00:05.312
&gt;&gt; Speaker 1: You talk a little bit
about when the componentDidUpdate

2
00:00:05.312 --> 00:00:07.214
lifecycle methods?

3
00:00:07.214 --> 00:00:12.384
&gt;&gt; Brian Holt: Sure, let's get rid
of all the error stuff really quick.

4
00:00:12.384 --> 00:00:16.335
So here,
&gt;&gt; Brian Holt: Inside of

5
00:00:16.335 --> 00:00:20.989
componentDidUpdate, so componentDidUpdate
is gonna get called when

6
00:00:20.989 --> 00:00:25.020
props change a state change,
that's about it, right?

7
00:00:25.020 --> 00:00:27.048
So it's very much similar to useEffect,
right?

8
00:00:27.048 --> 00:00:29.418
So useEffect gets running
whatever its dependencies update.

9
00:00:29.418 --> 00:00:32.800
componentDidUpdate is gonna get run
every single time that a proper or

10
00:00:32.800 --> 00:00:34.420
state changes, right?

11
00:00:34.420 --> 00:00:37.829
So that's why I say,
if this state.hasError,

12
00:00:37.829 --> 00:00:40.600
right, then set this to be something else.

13
00:00:41.640 --> 00:00:46.075
Now, I could have just said this,
because this only has one piece of state.

14
00:00:46.075 --> 00:00:47.690
But what happens later
if this has more state,

15
00:00:47.690 --> 00:00:51.510
you wanna be specific,
like this reacts to this, right?

16
00:00:52.910 --> 00:00:54.060
So in this particular case,

17
00:00:54.060 --> 00:00:57.250
this is reacting to componentDidCatch
gets called, right?

18
00:00:57.250 --> 00:01:02.712
Or no, sorry, getDerivedStateFromError,
this gets called, this updates

19
00:01:02.712 --> 00:01:08.271
the hasError to be true, which is then
going to call componentDidUpdate here.

20
00:01:08.271 --> 00:01:08.995
Does that make sense?

21
00:01:08.995 --> 00:01:10.094
&gt;&gt; Speaker 1: Yes, thank you.

22
00:01:10.094 --> 00:01:12.210
&gt;&gt; Brian Holt: Of course, good question.

23
00:01:12.210 --> 00:01:17.254
&gt;&gt; Speaker 3: Could you actually talk
about the getDerivedStateFromError?

24
00:01:17.254 --> 00:01:18.411
How does that get called?

25
00:01:18.411 --> 00:01:22.440
How does React know to run that function?

26
00:01:24.470 --> 00:01:26.550
&gt;&gt; Brian Holt: Sorry, this gets called

27
00:01:27.600 --> 00:01:30.074
whenever there's an error inside of it,
right?

28
00:01:30.074 --> 00:01:33.780
And so because it's a static method,
it can call it on the class and not on

29
00:01:33.780 --> 00:01:38.310
the instance, not that that's really a
thing that you really care too much about.

30
00:01:38.310 --> 00:01:40.650
But what it'll do is
it'll call this method,

31
00:01:40.650 --> 00:01:44.831
it'll pass in,
&gt;&gt; Speaker 3: Is that

32
00:01:44.831 --> 00:01:47.325
because of the naming convention
that it knows to call it?

33
00:01:47.325 --> 00:01:48.764
&gt;&gt; Brian Holt: Yes, I guess, I don't-
&gt;&gt; Speaker 3: Okay.

34
00:01:48.764 --> 00:01:50.620
&gt;&gt; Brian Holt: Yeah, so
it has to be called this.

35
00:01:50.620 --> 00:01:52.190
This is a lifecycle method in that sense,
right?

36
00:01:52.190 --> 00:01:52.887
&gt;&gt; Speaker 3: Okay.

37
00:01:52.887 --> 00:01:54.840
&gt;&gt; Brian Holt: Just like we had,
what was the-

38
00:01:54.840 --> 00:01:56.720
&gt;&gt; Speaker 3: On carousel?

39
00:01:56.720 --> 00:02:00.728
&gt;&gt; Brian Holt: Yeah, on the carousel
one as well, getDerivedStateFromProps.

40
00:02:03.405 --> 00:02:05.850
&gt;&gt; Brian Holt: So yeah,
it'll pass in the error here.

41
00:02:05.850 --> 00:02:10.660
For us, we just know there's an error now,
so we're gonna update that state and

42
00:02:10.660 --> 00:02:13.800
then it's going to re-render
with that new state.

43
00:02:13.800 --> 00:02:15.946
Does that make sense?

44
00:02:15.946 --> 00:02:16.798
Cool.

45
00:02:19.511 --> 00:02:23.725
&gt;&gt; Speaker 4: If there's an error
in production that's not handled,

46
00:02:23.725 --> 00:02:25.225
what does React do?

47
00:02:25.225 --> 00:02:26.515
&gt;&gt; Brian Holt: It unmounts.

48
00:02:26.515 --> 00:02:27.054
&gt;&gt; Speaker 4: Right.
&gt;&gt; Brian Holt: Yeah,

49
00:02:27.054 --> 00:02:28.930
it just takes the entire
thing out of the DOM.

50
00:02:30.260 --> 00:02:33.266
So a lot of companies will just have
one top level error handler, and

51
00:02:33.266 --> 00:02:34.758
that'll handle the entire app.

52
00:02:34.758 --> 00:02:40.350
But you can also have multiple levels of
maybe your footer has a lot of errors.

53
00:02:40.350 --> 00:02:41.940
Maybe you shouldn't have that footer.

54
00:02:41.940 --> 00:02:42.800
But maybe it does, right,

55
00:02:42.800 --> 00:02:44.399
but then you could have one
specifically for your footer, right.

56
00:02:46.490 --> 00:02:47.530
Yeah, Mark?

57
00:02:47.530 --> 00:02:51.024
&gt;&gt; Mark: Can error boundaries
be used with functional hooks?

58
00:02:51.024 --> 00:02:54.364
&gt;&gt; Brian Holt: No,
because getDerivedStatesFromErrors,

59
00:02:54.364 --> 00:02:58.330
there is end component to catch for
that matter.

60
00:02:58.330 --> 00:03:00.820
There is no equivalent for
these with hooks.

61
00:03:00.820 --> 00:03:03.040
So this one you actually
have to use class component.

62
00:03:03.040 --> 00:03:03.708
&gt;&gt; Mark: Currently?

63
00:03:03.708 --> 00:03:07.892
&gt;&gt; Brian Holt: Currently,
there's no plans to fix that, but

64
00:03:07.892 --> 00:03:12.370
that isn't to say that,
there won't be plans.

65
00:03:12.370 --> 00:03:16.185
But yeah, currently there's
no way to do it with hooks.

66
00:03:16.185 --> 00:03:20.267
&gt;&gt; Mark: So could you use it to wrap
a component that's using hooks?

67
00:03:20.267 --> 00:03:24.895
&gt;&gt; Brian Holt: Right, yeah, because
this.props.children can be anything,

68
00:03:24.895 --> 00:03:25.480
right?

69
00:03:25.480 --> 00:03:28.200
It has no opinion on whatever
its children are gonna be doing.

