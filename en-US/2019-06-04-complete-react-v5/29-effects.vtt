WEBVTT

1
00:00:00.000 --> 00:00:01.627
&gt;&gt; Brian: So
what we're gonna start doing here,

2
00:00:01.627 --> 00:00:04.305
is we're actually gonna to start
reading live data from an API.

3
00:00:06.791 --> 00:00:10.067
&gt;&gt; Brian: Which is gonna be exciting,
so we're gonna see pets to adopt her.

4
00:00:10.067 --> 00:00:13.986
And so this is gonna actually come
from Petfinder which is like one of

5
00:00:13.986 --> 00:00:16.267
the easiest ways to find pets to adopt.

6
00:00:16.267 --> 00:00:19.637
So if you see a patt here
use that you want to adopt,

7
00:00:19.637 --> 00:00:21.655
you should definitely do it.

8
00:00:21.655 --> 00:00:25.449
And the Petfinder client that you brought
in the front end master slash pet is

9
00:00:25.449 --> 00:00:26.936
already all set up to do that.

10
00:00:26.936 --> 00:00:31.213
So I'm gonna show you now how to handle
a synchronous code inside of React.

11
00:00:34.219 --> 00:00:39.495
&gt;&gt; Brian: Okay, so what I want you to
do first, again I mentioned earlier

12
00:00:39.495 --> 00:00:45.143
that while you can put in different
locations up here, I actually have,

13
00:00:45.143 --> 00:00:51.374
at least temporarily, limited this to
Seattle, WA, and San Francisco, CA.

14
00:00:51.374 --> 00:00:56.085
Reason being is that we have one developer
key and we don't wanna hammer their API,

15
00:00:56.085 --> 00:00:59.853
so that's why we're kind of limiting
ourselves to just a couple of

16
00:00:59.853 --> 00:01:01.153
geographical areas.

17
00:01:01.153 --> 00:01:04.484
This might change in the future, if we
can figure out better ways of doing this.

18
00:01:04.484 --> 00:01:10.167
But just to be on the safe side right now,
that's what we're gonna do.

19
00:01:10.167 --> 00:01:16.009
Okay, so let's go ahead and
start using some data here.

20
00:01:16.009 --> 00:01:20.699
So inside of App.js,
sorry, this isn't App.js,

21
00:01:20.699 --> 00:01:24.043
this is inside of SearchParams.js.

22
00:01:25.852 --> 00:01:28.031
&gt;&gt; Brian: We've already
got an animals here, but

23
00:01:28.031 --> 00:01:30.604
we're also going to get
the pet client up here.

24
00:01:33.326 --> 00:01:37.904
&gt;&gt; Brian: And underneath all these
use dropdowns, and things like that,

25
00:01:37.904 --> 00:01:42.673
we're gonna use another thing
from React here called useEffect.

26
00:01:45.034 --> 00:01:47.848
&gt;&gt; Brian: Now,
if you're familiar with React, already,

27
00:01:47.848 --> 00:01:52.213
useEffect is gonna take the place of
several of the lifecycle hooks, right?

28
00:01:52.213 --> 00:01:56.901
So, it's gonna take the place
of componentDidMount,

29
00:01:56.901 --> 00:02:01.397
componentWillUnmount, and
componentDidUpdate.

30
00:02:01.397 --> 00:02:04.729
So if you don't know what those are,
then that's fine, you can learn these for

31
00:02:04.729 --> 00:02:05.444
the first time.

32
00:02:05.444 --> 00:02:07.846
But if you're coming in
with some familiarity,

33
00:02:07.846 --> 00:02:09.669
that's what this is gonna replace.

34
00:02:09.669 --> 00:02:13.311
So here I'm gonna say useEffect, and
then I'm gonna give it a function.

35
00:02:18.136 --> 00:02:23.947
&gt;&gt; Brian: And
then here I'm gonna say pet.breeds,

36
00:02:27.534 --> 00:02:28.770
&gt;&gt; Brian: dog.

37
00:02:28.770 --> 00:02:32.738
This is gonna return a promise.

38
00:02:32.738 --> 00:02:34.390
You can actually see that
it returns a promise.

39
00:02:36.194 --> 00:02:39.637
&gt;&gt; Brian: That returns a breeds response.

40
00:02:39.637 --> 00:02:44.690
And then here, just for now so
we can see what it's doing,

41
00:02:44.690 --> 00:02:49.142
I'm gonna say console.log and
console.error.

42
00:02:49.142 --> 00:02:51.068
And what this is saying,

43
00:02:51.068 --> 00:02:56.299
if the call is successful then log
output whatever the response is,

44
00:02:56.299 --> 00:03:01.192
and if it's not successful,
then send it to console.error.

45
00:03:03.817 --> 00:03:06.534
&gt;&gt; Brian: So what's happening here?

46
00:03:06.534 --> 00:03:11.620
So useEffect is disconnected from
when the render is happening.

47
00:03:11.620 --> 00:03:15.226
So what this is actually doing
is this is scheduling this

48
00:03:15.226 --> 00:03:17.996
function to run after the render happens.

49
00:03:17.996 --> 00:03:20.921
So what's gonna happen is it's
going to render the first time,

50
00:03:20.921 --> 00:03:24.624
it's going to schedule use effect to run,
but then it's going to render first.

51
00:03:24.624 --> 00:03:29.055
So all of this stuff gets rendered
first before anything happens inside of

52
00:03:29.055 --> 00:03:29.844
useEffect.

53
00:03:29.844 --> 00:03:31.056
Good so far?

54
00:03:31.056 --> 00:03:33.499
All right, so
this does not happen immediately.

55
00:03:33.499 --> 00:03:38.532
As soon as this happens,
as soon as searchParams renders for

56
00:03:38.532 --> 00:03:43.870
the very first time,
t's then going to run this effect, okay?

57
00:03:43.870 --> 00:03:48.588
And it's not synchronized its not like
this happens and then immediately

58
00:03:48.588 --> 00:03:53.321
this happens, it happens and
then soon thereafter this effect will run.

59
00:03:53.321 --> 00:03:55.502
Now, why do you wanna do this?

60
00:03:55.502 --> 00:04:00.693
Well, you want to do this because you
don't wanna slow down that first render,

61
00:04:00.693 --> 00:04:01.244
right?

62
00:04:01.244 --> 00:04:03.529
You wanna show your users
something immediately.

63
00:04:03.529 --> 00:04:06.106
You don't want them to have
to wait to see something,

64
00:04:06.106 --> 00:04:09.507
you don't want them to wait for
some sort of Ajax request to come back.

65
00:04:09.507 --> 00:04:13.252
You want to immediately show something and
then go to the API and try and

66
00:04:13.252 --> 00:04:14.090
request data.

67
00:04:14.090 --> 00:04:17.002
So that's why we're doing this.

68
00:04:17.002 --> 00:04:19.291
So let's go take a look what
that actually looks like.

69
00:04:19.291 --> 00:04:24.833
If you go over here into your petinder
you should see here this object breeds,

70
00:04:24.833 --> 00:04:30.301
breeds, and then you should see it
comes back right now with 257 breeds.

71
00:04:30.301 --> 00:04:36.555
So if I look at one of these you
can see Husky, Icelandic sheepdog.

72
00:04:36.555 --> 00:04:39.683
I didn't even know that was a breed,
but apparently it is, right?

73
00:04:39.683 --> 00:04:42.730
And so it comes back with all
these things back from the API.

74
00:04:42.730 --> 00:04:50.196
And if you look at your network tab
you'll see that this is just JSX, XHR.

75
00:04:50.196 --> 00:04:56.469
This is going to the pet devs dev-apis,
and it is getting that back from the API.

76
00:05:00.024 --> 00:05:00.766
&gt;&gt; Brian: Which is great, right?

77
00:05:00.766 --> 00:05:04.443
Now we're getting all this information
back from the API, so now we can actually

78
00:05:04.443 --> 00:05:07.707
setBreeds to be all of these various
different kinds of breeds of dogs.

79
00:05:10.580 --> 00:05:16.409
&gt;&gt; Brian: So what we're gonna do instead
of useEffect, we'll just replace this and

80
00:05:16.409 --> 00:05:23.128
say,
&gt;&gt; Brian: The first thing we wanna do is,

81
00:05:23.128 --> 00:05:29.537
whenever this run through we want to
update breeds, to be empty array.

82
00:05:29.537 --> 00:05:32.816
Because if we're requesting new breeds and
there's already breeds in that,

83
00:05:32.816 --> 00:05:34.115
then we want to clear them out.

84
00:05:34.115 --> 00:05:35.689
We're gonna update the breed.

85
00:05:37.439 --> 00:05:39.426
&gt;&gt; Brian: To be an empty string.

86
00:05:39.426 --> 00:05:44.300
This useEffect, it's gonna get run
whenever we're changing sets of breeds,

87
00:05:44.300 --> 00:05:44.818
right?

88
00:05:44.818 --> 00:05:48.225
So if I go from like cats to dog,
I need to get a new set of breeds, right?

89
00:05:48.225 --> 00:05:51.057
So the first thing I'm gonna do is
I'm gonna clear out whatever breeds

90
00:05:51.057 --> 00:05:51.684
were in there.

91
00:05:51.684 --> 00:05:55.258
So if there's husky and poodle, I'm
gonna clear all that stuff out of there.

92
00:05:55.258 --> 00:05:59.661
And if I've selected Bichon Frise or
something like that, then I need to

93
00:05:59.661 --> 00:06:04.516
set that to be empty string, as well,
because I can't have a Bichon Frise cat.

94
00:06:04.516 --> 00:06:08.350
So once that's done,
then I'm gonna say, pet.breeds,

95
00:06:08.350 --> 00:06:12.577
which is that function that's
gonna retrieve that from the API.

96
00:06:12.577 --> 00:06:16.421
I'm gonna parse in whatever
animal is right there, so

97
00:06:16.421 --> 00:06:19.832
animal
&gt;&gt; Brian: And

98
00:06:19.832 --> 00:06:25.498
then I'm gonna say .then,
&gt;&gt; Brian: And

99
00:06:25.498 --> 00:06:30.399
that's gonna give us something
back from their API, and

100
00:06:30.399 --> 00:06:35.006
I know inside of that object
it's gonna have breeds.

101
00:06:38.466 --> 00:06:39.194
&gt;&gt; Brian: Okay?

102
00:06:42.313 --> 00:06:45.762
&gt;&gt; Brian: So we're just structuring out
this breed cuz I know that's gonna come

103
00:06:45.762 --> 00:06:46.704
back from the API.

104
00:06:46.704 --> 00:06:50.108
And then I'm gonna say,
if you look at these objects,

105
00:06:50.108 --> 00:06:54.628
if we go back here to our console,
notice that they are objects, right?

106
00:06:54.628 --> 00:06:59.274
So name, Fox Terrier, links,
something else, right?

107
00:06:59.274 --> 00:07:00.339
We actually just want the names.

108
00:07:00.339 --> 00:07:03.063
We want to throw away all those links,
we just want the names.

109
00:07:03.063 --> 00:07:06.786
So we have a list of objects that we
wanna transform into a list of strings.

110
00:07:06.786 --> 00:07:08.305
So how do we do that?

111
00:07:08.305 --> 00:07:09.105
Map.

112
00:07:11.315 --> 00:07:16.574
&gt;&gt; Brian: So what we're gonna do is,
we're gonna say const,

113
00:07:16.574 --> 00:07:22.200
breedstrings = breeds.map,
and we're gonna turn,

114
00:07:24.481 --> 00:07:28.499
&gt;&gt; Brian: Name into name.

115
00:07:30.288 --> 00:07:35.795
&gt;&gt; Brian: And then here, we're gonna
say setBreeds to be breedStrings.

116
00:07:42.932 --> 00:07:45.279
&gt;&gt; Brian: So what's going on with this?

117
00:07:45.279 --> 00:07:46.703
Well, we just structured out the name,
right?

118
00:07:46.703 --> 00:07:50.350
So we grab poodle out of that and then
we would just return to poodle, right?

119
00:07:50.350 --> 00:07:55.060
You also could have had
to spend like breed,

120
00:07:55.060 --> 00:08:00.162
object, and then be breedObj.name, right?

121
00:08:00.162 --> 00:08:02.110
Same thing.

122
00:08:02.110 --> 00:08:03.520
I just think this is
a little bit more elegant.

123
00:08:09.984 --> 00:08:12.699
&gt;&gt; Brian: Okay, and just in case
there's an error from the API,

124
00:08:12.699 --> 00:08:14.538
you just put console.error there.

125
00:08:14.538 --> 00:08:18.824
So it'll just feed whatever
the error is into console.error.

126
00:08:21.463 --> 00:08:28.765
&gt;&gt; Brian: This would be the same as doing
like error, console.error error, right?

127
00:08:28.765 --> 00:08:29.514
Same thing.

128
00:08:39.774 --> 00:08:40.534
&gt;&gt; Brian: Okay.

129
00:08:46.227 --> 00:08:47.967
&gt;&gt; Brian: Yeah, I have these as set,

130
00:08:47.967 --> 00:08:51.182
rather not update
&gt;&gt; Brian: So

131
00:08:51.182 --> 00:08:52.986
change this to be set, not that.

