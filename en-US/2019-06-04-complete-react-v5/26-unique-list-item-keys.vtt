WEBVTT

1
00:00:00.660 --> 00:00:04.674
&gt;&gt; Brian Holt: So it's saying,
hey, I need a key, so

2
00:00:04.674 --> 00:00:08.948
let's talk about that for just a second.

3
00:00:08.948 --> 00:00:12.900
So how does React work in
terms of like rerendering it?

4
00:00:12.900 --> 00:00:18.873
Everytime that something changes,
it runs the rerender function here, right?

5
00:00:18.873 --> 00:00:23.767
So it runs this searchParams
function again.

6
00:00:23.767 --> 00:00:27.769
I want you to imagine that maybe
these options were more complicated.

7
00:00:27.769 --> 00:00:31.640
Maybe they were deeply of
necetries of DOM structures, so

8
00:00:31.640 --> 00:00:36.386
let's say I had the ability to resort
these options one way or another.

9
00:00:36.386 --> 00:00:39.797
Well, what React would typically see is,

10
00:00:39.797 --> 00:00:45.590
this is different than it was before,
I'm gonna go rerender everything.

11
00:00:45.590 --> 00:00:48.634
But if I'm just resorting
them into a different order,

12
00:00:48.634 --> 00:00:52.345
that would be a lot of a necessary work,
quite slow, potentially.

13
00:00:52.345 --> 00:00:57.568
What would be really useful, is like,
hey, React, I just reordered these.

14
00:00:57.568 --> 00:00:58.988
I didn't actually create and

15
00:00:58.988 --> 00:01:01.898
destroy anything,
they're just in a different order now.

16
00:01:01.898 --> 00:01:04.810
And the way you can do
that is you can say,

17
00:01:04.810 --> 00:01:08.684
key = some unique thing
about that particular item.

18
00:01:08.684 --> 00:01:11.279
In this case they're all strings and
I know they're all different.

19
00:01:11.279 --> 00:01:15.385
So if I say key =
[animal] then it's happy,

20
00:01:15.385 --> 00:01:20.872
because then it says if dog was here,
but now it's down here.

21
00:01:20.872 --> 00:01:23.936
It's like I'm just going to take that
option, I'm not gonna destroy it,

22
00:01:23.936 --> 00:01:26.337
I'm just gonna move it down there,
so that's what key does.

23
00:01:26.337 --> 00:01:30.540
So it's a little performance
thing that's really easy to do.

24
00:01:31.830 --> 00:01:35.439
So the key here is, it needs to be some
sort of unique identifier about that

25
00:01:35.439 --> 00:01:36.905
particular object, right?

26
00:01:36.905 --> 00:01:40.749
So maybe if you're sorting user objects,
you can sort it by the email, or

27
00:01:40.749 --> 00:01:44.046
their user ID, or
something that's gonna be unique per user.

28
00:01:44.046 --> 00:01:47.547
Then if it moves here, and then it
moves down here, it is the same thing.

29
00:01:47.547 --> 00:01:53.318
So that React can tell it's
the same thing, makes sense?

30
00:01:53.318 --> 00:01:58.959
Now something that's really important is
it has to be unique, so if I put 1, right?

31
00:01:58.959 --> 00:02:02.473
Now all of these are gonna have a key
of 1 and is going to freak out.

32
00:02:05.763 --> 00:02:09.032
&gt;&gt; Brian Holt: It's gonna say, hey,
I encountered with the same key 1.

33
00:02:09.032 --> 00:02:13.547
That doesn't make any sense to me, so
it'll do weird things if you do that.

34
00:02:16.915 --> 00:02:19.142
&gt;&gt; Brian Holt: In this case, it actually
is rendering them, so good for that,

35
00:02:19.142 --> 00:02:20.649
but sometimes it just won't render them.

36
00:02:22.170 --> 00:02:23.600
So make sure it is actually
unique about them.

