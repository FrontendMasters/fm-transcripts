WEBVTT

1
00:00:00.120 --> 00:00:02.356
&gt;&gt; Brian Holt: I want you to try and
type into this.

2
00:00:06.921 --> 00:00:09.440
&gt;&gt; Brian Holt: Congratulations,
you broke the DOM.

3
00:00:09.440 --> 00:00:11.330
This is actually kinda difficult to do,
right?

4
00:00:11.330 --> 00:00:15.430
[LAUGH] And this is one of people's
frustrations when they first

5
00:00:15.430 --> 00:00:19.780
learn to write React is like,
this was so simple to do before.

6
00:00:19.780 --> 00:00:22.600
Why did we make something simple hard?

7
00:00:22.600 --> 00:00:25.630
Right, it's a valid thing to say.

8
00:00:25.630 --> 00:00:28.970
But I want you to think
about how this works.

9
00:00:30.580 --> 00:00:32.030
Whenever I type something in here, so

10
00:00:32.030 --> 00:00:37.640
if I hit a keystroke right now,
what happens is React captures that event.

11
00:00:37.640 --> 00:00:41.850
Then what happens is that kicks off a
re-render cycle inside of its components.

12
00:00:42.920 --> 00:00:46.180
So the first thing that
happens is it re-renders app.

13
00:00:46.180 --> 00:00:50.160
And then it gets done a SearchParams and
it hops down into search params.

14
00:00:50.160 --> 00:00:53.826
Here, it says const location
equals Seattle, Washington.

15
00:00:53.826 --> 00:00:59.350
And it re-renders, and what is
the value of this input right here?

16
00:01:01.520 --> 00:01:02.800
Seattle, right?

17
00:01:02.800 --> 00:01:04.350
Nothing changes that, right?

18
00:01:04.350 --> 00:01:08.740
So when it re-renders again, it's still
Seattle's because nothing changed it.

19
00:01:08.740 --> 00:01:14.380
So that's why, even when I type in there,
it's not changing.

20
00:01:14.380 --> 00:01:15.570
So in other words,

21
00:01:15.570 --> 00:01:20.280
two way data binding is not free in React,
which can be a point of frustration.

22
00:01:20.280 --> 00:01:21.890
I used to be an Angular developer.

23
00:01:21.890 --> 00:01:24.430
I wrote a lot of Angular
when I worked at Reddit.

24
00:01:24.430 --> 00:01:27.130
So this was frustrating for me because
this used to be free to me, right?

25
00:01:27.130 --> 00:01:30.760
If, in Angular, just did the NG bind or
something like that and

26
00:01:30.760 --> 00:01:34.100
it was just bound together and
it worked and magical.

27
00:01:34.100 --> 00:01:36.770
That's no longer the case and
I'm gonna argue for that.

28
00:01:36.770 --> 00:01:39.730
It's actually a benefit
because it forces me to

29
00:01:39.730 --> 00:01:41.410
think through everything that's happening.

30
00:01:41.410 --> 00:01:44.790
And I'm no longer limited by what
the framework is gonna do for me.

31
00:01:44.790 --> 00:01:47.210
I have to do it,
which I think is a benefit because later,

32
00:01:47.210 --> 00:01:51.039
when I come back to it, I can read
everything that's happening, right?

33
00:01:51.039 --> 00:01:53.980
I don't have to know Angular super well or
I don't have to know React super well to

34
00:01:53.980 --> 00:01:57.604
know what's happening because I can
see all the code that's governed.

35
00:01:57.604 --> 00:01:59.331
It's very explicit.

36
00:01:59.331 --> 00:02:02.770
This is actually kind of just
a general trend for React.

37
00:02:02.770 --> 00:02:04.060
It's verbose, right?

38
00:02:04.060 --> 00:02:06.280
You write more code.

39
00:02:06.280 --> 00:02:07.940
And that can be a point of frustration.

40
00:02:07.940 --> 00:02:11.450
But I argue that this is actually
one of the biggest benefits of React

41
00:02:11.450 --> 00:02:14.480
because it's very understandable, right?

42
00:02:14.480 --> 00:02:16.073
It forces you to think through everything.

43
00:02:16.073 --> 00:02:20.559
Which means that when you come back to
this a month later, you can re-read all

44
00:02:20.559 --> 00:02:24.370
the code that you wrote and
understand what's happened, okay?

45
00:02:25.690 --> 00:02:30.800
So we want to be able to change this
now from Seattle, WA to something else.

46
00:02:30.800 --> 00:02:32.440
So how are we going to do that?

47
00:02:34.330 --> 00:02:35.945
Well, let's take a look at that.

48
00:02:39.120 --> 00:02:43.356
&gt;&gt; Brian Holt: Up here,
where it says import React, for

49
00:02:43.356 --> 00:02:47.845
me, I'm gonna put comma, { useState }.

50
00:02:47.845 --> 00:02:49.849
Then I'm going to import that from React.

51
00:02:53.430 --> 00:02:58.236
&gt;&gt; Brian Holt: So instead of having
this location here, I'm gonna say const,

52
00:02:58.236 --> 00:03:02.252
square bracket, location,
comma, setLocation.

53
00:03:02.252 --> 00:03:09.532
= useState, and then the default state,
which is gonna be Seattle, WA,

54
00:03:17.396 --> 00:03:18.802
&gt;&gt; Brian Holt: Okay?

55
00:03:18.802 --> 00:03:23.600
Now, I have this location in this input.

56
00:03:23.600 --> 00:03:24.480
The thing you might notice,

57
00:03:24.480 --> 00:03:28.720
if you look at the console here, if I look
at the console, it's probably gonna say,

58
00:03:28.720 --> 00:03:31.660
you provided a value prop to a form
without a non-change handler.

59
00:03:31.660 --> 00:03:33.408
That's why.

60
00:03:33.408 --> 00:03:37.280
We're going to give this
a on change handler.

61
00:03:38.890 --> 00:03:43.720
So I'm gonna say on change = curly braces.

62
00:03:43.720 --> 00:03:46.570
I'm going to give it just a tiny function
to run whenever an event happens.

63
00:03:46.570 --> 00:03:52.930
So I'm gonna say,
whenever there is an event,

64
00:03:52.930 --> 00:03:57.865
setLocation to be e.target value.

65
00:03:57.865 --> 00:04:03.186
[BLANK AUDIO] So this is a little,

66
00:04:03.186 --> 00:04:07.830
little tiny function, right?

67
00:04:07.830 --> 00:04:10.679
And all it does it it takes an event,
so you can actually put event there,

68
00:04:10.679 --> 00:04:12.240
if that makes you feel better about it.

69
00:04:13.420 --> 00:04:16.840
I just have a habit from
forever that I call events e.

70
00:04:19.110 --> 00:04:20.655
&gt;&gt; Brian Holt: You can decide
if that's useful to you or not.

71
00:04:24.527 --> 00:04:26.603
&gt;&gt; Brian Holt: And if you've ever
written an event handler for jQuery or

72
00:04:26.603 --> 00:04:28.910
just normal JavaScript,
that should look familiar, right?

73
00:04:28.910 --> 00:04:30.990
It's a normal-looking event handler.

74
00:04:32.966 --> 00:04:36.821
&gt;&gt; Brian Holt: And the other thing is
if you have a single line of a function

75
00:04:36.821 --> 00:04:41.470
with an arrow function,
the curly braces are optional.

76
00:04:41.470 --> 00:04:45.029
So I could put that, and then it would
look like that, which is fine as well.

77
00:04:52.157 --> 00:04:55.384
&gt;&gt; Brian Holt: So now, any time that
a change happens in this input,

78
00:04:55.384 --> 00:04:59.500
it's gonna call setLocation with
whatever is inside of the input.

79
00:05:01.410 --> 00:05:03.700
So now if I go back over here and
I start typing in here,

80
00:05:03.700 --> 00:05:05.905
it's gonna start working again.

81
00:05:05.905 --> 00:05:08.363
Now, why?

82
00:05:08.363 --> 00:05:15.860
Well, I type, it kicks off a reRender,
search param reRenders.

83
00:05:15.860 --> 00:05:20.020
And then I have these two things up here,
location and setLocation.

84
00:05:20.020 --> 00:05:25.090
Location is going to be the current
state of location, okay?

85
00:05:25.090 --> 00:05:31.130
And then set location is an updater for
that particular piece of state.

86
00:05:32.310 --> 00:05:36.380
So every time that that event happens,
right, that I type into there,

87
00:05:36.380 --> 00:05:39.950
E is going to represent an event
that happened in the input.

88
00:05:39.950 --> 00:05:44.850
And then I'm gonna call setLocation
with whatever is inside

89
00:05:44.850 --> 00:05:49.670
of that particular event,
or inside of that input,

90
00:05:50.970 --> 00:05:55.580
which is going to update that
state that I'm getting here, okay?

91
00:05:55.580 --> 00:05:57.790
So then,
when that re-render happens after that,

92
00:05:57.790 --> 00:06:00.950
location is going to now be
whatever I've updated it to be.

93
00:06:02.740 --> 00:06:05.233
Now it can be a little confusing that I
have this string here Seattle, Washington.

94
00:06:05.233 --> 00:06:08.008
And obviously, that's not changing, but

95
00:06:08.008 --> 00:06:13.192
just keep in mind that this is always
the default state, right, the first state.

96
00:06:13.192 --> 00:06:15.479
And then after that, it'll be
whatever it is at that point in time.

97
00:06:17.990 --> 00:06:21.900
But that's, you have to keep in mind
that that's what happens with these

98
00:06:21.900 --> 00:06:24.860
render functions for these components
is they're run a bunch of times, right?

99
00:06:24.860 --> 00:06:28.180
Every time that you update your
application, it reruns all of the renders.

100
00:06:29.780 --> 00:06:33.770
So you want to make sure that
these functions are not doing

101
00:06:33.770 --> 00:06:35.350
anything extraneous, right?

102
00:06:35.350 --> 00:06:36.800
They shouldn't be updating any function.

103
00:06:36.800 --> 00:06:39.830
They shouldn't have any like side
effects or anything like that.

104
00:06:39.830 --> 00:06:44.490
You want to keep them pretty narrow to
the focus of rendering something, okay?

105
00:06:46.330 --> 00:06:51.553
So this is a hook,
that's what the react terminology is here.

106
00:06:51.553 --> 00:06:58.880
And one thing that you need to abide by
with hooks, all hooks begin with use.

107
00:06:58.880 --> 00:07:03.100
Use state, use effect,
use callback, use memo,

108
00:07:03.100 --> 00:07:05.670
all that stuff, all hooks begin with use.

109
00:07:05.670 --> 00:07:07.350
Even the ones like custom hooks,

110
00:07:07.350 --> 00:07:09.640
we're going to make a custom
hook [COUGH] excuse me.

111
00:07:09.640 --> 00:07:12.130
We're going to make a custom
hook here in just a second.

112
00:07:13.770 --> 00:07:16.900
But if you see use something,
it is a hook.

113
00:07:18.560 --> 00:07:24.600
So this is how you have stateful
logic with React is with these hooks.

114
00:07:26.200 --> 00:07:32.844
So now at any given time,
just to demonstrate to you,

115
00:07:32.844 --> 00:07:37.866
I'll just say a console.log('state

116
00:07:37.866 --> 00:07:41.717
of location', location).

117
00:07:45.760 --> 00:07:48.390
&gt;&gt; Brian Holt: Or
even better, let's do this.

118
00:07:48.390 --> 00:07:50.144
Let's just put an h1 right here.

119
00:07:53.100 --> 00:07:54.317
&gt;&gt; Brian Holt: That has location in it.

120
00:07:58.135 --> 00:08:01.160
&gt;&gt; Brian Holt: So now it says Seattle,
WA right there, right?

121
00:08:01.160 --> 00:08:05.290
And if we start typing in there,
notice that it's changing alongside of,

122
00:08:06.490 --> 00:08:09.340
because every time it re-renders, right,
it's outputting that location there.

123
00:08:12.690 --> 00:08:20.079
So I could put Salt Lake City, Utah.

124
00:08:20.079 --> 00:08:25.505
&gt;&gt; Speaker 2: Is using state different
than setting state in this context,

125
00:08:25.505 --> 00:08:32.900
then, because it's setting a default,
out of the box here.

126
00:08:32.900 --> 00:08:38.300
&gt;&gt; Brian Holt: Yes, so
useState is like creating a hook, right?

127
00:08:38.300 --> 00:08:42.770
So and, when you get back a hook,
you get back an array of two things.

128
00:08:42.770 --> 00:08:45.970
The first thing is always going
to be the current state of it.

129
00:08:45.970 --> 00:08:48.440
The second thing is always going
to be an updater function for

130
00:08:48.440 --> 00:08:50.850
that particular piece of statement, right?

131
00:08:50.850 --> 00:08:53.160
So useState creates the hook.

132
00:08:53.160 --> 00:08:56.591
This is called set location because
I chose to call it that, but

133
00:08:56.591 --> 00:08:59.136
you could totally call
this updateLocation.

134
00:08:59.136 --> 00:09:03.090
It's a function that gives you back
the updates that particular thing.

135
00:09:03.090 --> 00:09:06.370
I choose to always call it set
because then I can kind of see it, but

136
00:09:06.370 --> 00:09:08.352
that's just a convention that I have.

137
00:09:08.352 --> 00:09:13.485
That's not an industry best practice or
anything like that.

138
00:09:13.485 --> 00:09:14.828
Does that answer your question?

139
00:09:14.828 --> 00:09:16.873
Cool.

140
00:09:16.873 --> 00:09:18.620
I should call out here,
this might look a little weird to you.

141
00:09:18.620 --> 00:09:22.080
This is also destructuring, right,
because I know this is gonna be an array.

142
00:09:22.080 --> 00:09:23.781
This always gives back an array.

143
00:09:23.781 --> 00:09:26.410
And I know that the first
item is always the state, and

144
00:09:26.410 --> 00:09:28.970
I always know the second item
is the updater function.

145
00:09:28.970 --> 00:09:30.450
So that's why that's an array.

146
00:09:31.800 --> 00:09:33.520
Makes sense?

147
00:09:33.520 --> 00:09:34.163
Cool.

148
00:09:38.160 --> 00:09:41.313
&gt;&gt; Brian Holt: So historically,
if you've been writing React,

149
00:09:41.313 --> 00:09:45.550
you would have had to use
something called set state, right?

150
00:09:45.550 --> 00:09:52.050
This is kind of supplanting the need for
set state for these function components.

151
00:09:52.050 --> 00:09:54.610
I will show you later how to do that

152
00:09:54.610 --> 00:09:57.840
because it's important cuz it's still
very much a part of the React ecosystem.

153
00:09:57.840 --> 00:10:01.030
But for now,
this is the way to do state with hooks.

