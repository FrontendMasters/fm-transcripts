WEBVTT

1
00:00:00.250 --> 00:00:02.066
&gt;&gt; Brian Holt: So
we wanna wrap details in this, so

2
00:00:02.066 --> 00:00:05.341
in case there's an error from the API,
that it doesn't crash.

3
00:00:07.264 --> 00:00:10.666
&gt;&gt; Brian Holt: Now, I would be super
tempted to wrap this inside of an error

4
00:00:10.666 --> 00:00:11.355
boundary.

5
00:00:11.355 --> 00:00:16.755
But there's a big thing that you
have to know about error boundaries,

6
00:00:16.755 --> 00:00:20.151
is it only works with
children inside of it.

7
00:00:20.151 --> 00:00:22.274
This was an ErrorBoundary here.

8
00:00:25.423 --> 00:00:27.150
&gt;&gt; Brian Holt: Or ErrorBoundary?

9
00:00:28.335 --> 00:00:29.670
&gt;&gt; Brian Holt: This wouldn't work.

10
00:00:29.670 --> 00:00:34.750
And the reason being is that you would

11
00:00:34.750 --> 00:00:38.120
catch things in carousel, but you wouldn't
catch them inside of the class itself.

12
00:00:38.120 --> 00:00:41.360
So it can't catch it inside
of the class that it's in, so

13
00:00:41.360 --> 00:00:45.380
we have to make it basically a higher
order component above details.

14
00:00:45.380 --> 00:00:47.969
And I'll show you just a really
quick way of doing that.

15
00:00:47.969 --> 00:00:51.213
So rather than mess with details itself,

16
00:00:51.213 --> 00:00:56.781
what we're gonna do is we're going
to export a default function here.

17
00:00:58.568 --> 00:01:01.324
&gt;&gt; Brian Holt: Function,
there it's going to be called Details.

18
00:01:04.314 --> 00:01:06.380
&gt;&gt; Brian Holt: WthErrorBoundary.

19
00:01:07.763 --> 00:01:12.020
&gt;&gt; Brian Holt: It's gonna take in props,
and it's going to return

20
00:01:12.020 --> 00:01:18.836
an ErrorBoundary,
&gt;&gt; Brian Holt: And

21
00:01:18.836 --> 00:01:21.915
then, it's going to render
details inside of it.

22
00:01:25.190 --> 00:01:28.246
&gt;&gt; Brian Holt: So this automatically
imported up here ErrorBoundary as well, so

23
00:01:28.246 --> 00:01:30.764
make sure you import that
there like I did on line four.

24
00:01:32.883 --> 00:01:38.250
&gt;&gt; Brian Holt: And then down here,
we still have a problem with this.

25
00:01:38.250 --> 00:01:41.600
So this is correctly wrapping
an ErrorBoundary around Details.

26
00:01:41.600 --> 00:01:44.290
And now this will catch all
of the various different

27
00:01:44.290 --> 00:01:46.930
errors that could happen
inside of Details.

28
00:01:46.930 --> 00:01:48.880
But we have these props.

29
00:01:48.880 --> 00:01:53.150
And we want to pass these
props into Details.

30
00:01:54.390 --> 00:01:55.860
How do we do that?

31
00:01:55.860 --> 00:02:00.572
I mean, you could do something
like props=props, but

32
00:02:00.572 --> 00:02:02.987
this isn't quite the same.

33
00:02:06.596 --> 00:02:13.880
&gt;&gt; Brian Holt: Because now inside of here,
I would have to say this.props.props.

34
00:02:13.880 --> 00:02:16.820
It would be weird, so that's not right.

35
00:02:18.000 --> 00:02:20.920
I could go figure out everything
that Details is getting from

36
00:02:20.920 --> 00:02:24.170
its parent components, and
then, by name, pass them in.

37
00:02:24.170 --> 00:02:26.770
But that's burdensome,
I don't want to do that either.

38
00:02:26.770 --> 00:02:29.500
So I'm gonna show you a little
trick that you can do as well.

39
00:02:29.500 --> 00:02:36.660
You can actually just put these curly
braces here and say {...props} like that.

40
00:02:36.660 --> 00:02:40.953
This is going to spread
the props across Details.

41
00:02:40.953 --> 00:02:43.829
So imagine for
a second that props had some,

42
00:02:43.829 --> 00:02:46.404
what is Details even using from props?

43
00:02:46.404 --> 00:02:47.252
Props.

44
00:02:48.577 --> 00:02:49.160
&gt;&gt; Brian Holt: ID, right?

45
00:02:49.160 --> 00:02:50.307
So it's getting ID.

46
00:02:53.397 --> 00:02:58.574
&gt;&gt; Brian Holt: So this would be
equivalent from saying id={props.id},

47
00:02:58.574 --> 00:03:02.660
and then writing out all
of those piece by piece.

48
00:03:02.660 --> 00:03:05.191
This is just a faster way of doing it.

49
00:03:09.790 --> 00:03:13.039
&gt;&gt; Brian Holt: Now,
let me offer you a cautionary tale.

50
00:03:13.039 --> 00:03:18.335
The advantage of React, the reason why we
use React is because it's very explicit.

51
00:03:18.335 --> 00:03:20.659
It's very easy to go through and

52
00:03:20.659 --> 00:03:24.543
understand piece by piece
what everything is doing.

53
00:03:24.543 --> 00:03:28.726
ErrorBoundary here has no interaction and
does not care at all about the props,

54
00:03:28.726 --> 00:03:32.793
it's just trying to wrap something,
and then, let it continue rendering.

55
00:03:32.793 --> 00:03:35.884
So ErrorBoundary's not doing anything for
you other than catching errors, and

56
00:03:35.884 --> 00:03:38.077
it's Details that's actually
doing all the work here.

57
00:03:38.077 --> 00:03:41.692
So we just want to be a pass through for
this DetailsWithErrorBoundary.

58
00:03:41.692 --> 00:03:45.232
I spelled that wrong,
it's DetailsWithErrorBoundary,

59
00:03:45.232 --> 00:03:50.060
not that that matters, that's just for
debugging purposes, and that's all.

60
00:03:53.382 --> 00:03:55.972
&gt;&gt; Brian Holt: So you only wanna
use these spread operators when

61
00:03:55.972 --> 00:04:00.060
the component doesn't actually really
care about what those props are.

62
00:04:00.060 --> 00:04:01.900
It's just meant to be a pass through.

63
00:04:01.900 --> 00:04:06.380
Don't use this willy nilly, it makes your
code harder to read for the most part.

64
00:04:07.890 --> 00:04:08.390
Make sense?

65
00:04:10.060 --> 00:04:10.560
Okay.

66
00:04:12.143 --> 00:04:14.654
&gt;&gt; Brian Holt: So now,
if we go look at our app,

67
00:04:14.654 --> 00:04:20.049
everything should look exactly
the same cuz this has no errors on it,

68
00:04:20.049 --> 00:04:25.182
but what happens if I go into
the Details page now and say Details?

69
00:04:28.051 --> 00:04:32.298
&gt;&gt; Brian Holt: And let's say here
instead of componentDidMount,

70
00:04:32.298 --> 00:04:36.455
we're just gonna say,
throw new Error like that.

71
00:04:40.288 --> 00:04:41.120
&gt;&gt; Brian Holt: What's gonna happen?

72
00:04:42.300 --> 00:04:45.350
Hopefully, you can say that there
was an error with this page.

73
00:04:45.350 --> 00:04:47.949
Click here to go back,
and wait five seconds.

74
00:04:47.949 --> 00:04:50.955
We'll go do the five seconds part,
we haven't done that part.

75
00:04:50.955 --> 00:04:55.303
You can also see here
that you get the error.

76
00:04:58.547 --> 00:05:01.240
&gt;&gt; Brian Holt: And
you can see ErrorBoundary caught in error.

77
00:05:01.240 --> 00:05:05.765
So you do the message, which is this very
descriptive error that I just invented,

78
00:05:05.765 --> 00:05:10.113
and it also gives you all of the stuff
where this came from componentDidMount.

79
00:05:10.113 --> 00:05:14.247
Blah, blah, blah, all that kind of stuff.

80
00:05:14.247 --> 00:05:18.258
&gt;&gt; Brian Holt: Now, if we click here,
it'll take us back here.

81
00:05:18.258 --> 00:05:22.077
Now, if we didn't have the ErrorBoundary,
this would just crash the entire program.

82
00:05:27.790 --> 00:05:29.090
&gt;&gt; Brian Holt: So that's what
ErrorBoundaries are useful for.

