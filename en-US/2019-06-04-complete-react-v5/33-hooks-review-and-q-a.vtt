WEBVTT

1
00:00:00.300 --> 00:00:04.877
&gt;&gt; Speaker 1: So
why is breeds not a dependency?

2
00:00:04.877 --> 00:00:06.970
&gt;&gt; Brian Holt: So breeds,
as in this breeds right here.

3
00:00:09.210 --> 00:00:10.273
&gt;&gt; Brian Holt: Is not a dependency.

4
00:00:10.273 --> 00:00:15.122
I guess this is kind of misnamed
right here, breeds right there.

5
00:00:15.122 --> 00:00:18.932
We could call this breeds,
like API breeds or something like that

6
00:00:22.097 --> 00:00:24.609
&gt;&gt; Brian Holt: There we go.

7
00:00:24.609 --> 00:00:27.594
So that could've been
confusing to you before.

8
00:00:27.594 --> 00:00:31.333
It doesn't depend on
breeds because this breeds

9
00:00:31.333 --> 00:00:35.812
is not used anywhere inside
of this useEffect right here.

10
00:00:35.812 --> 00:00:40.405
It's not read from anywhere
inside of this effect, right?

11
00:00:40.405 --> 00:00:41.824
Now set breeds is, right?

12
00:00:41.824 --> 00:00:44.233
So that's why this is in here.

13
00:00:44.233 --> 00:00:49.912
But API, I just want you to keep in mind
this breeds and that breeds are separate.

14
00:00:49.912 --> 00:00:53.064
They're different things, right?

15
00:00:53.064 --> 00:00:56.527
So this is never used inside of use effect
so therefore it's not dependent on.

16
00:00:57.910 --> 00:01:00.096
&gt;&gt; Brian Holt: Yeah?

17
00:01:00.096 --> 00:01:04.661
&gt;&gt; Speaker 1: Was there any problem
with component did not amount those life

18
00:01:04.661 --> 00:01:05.902
cycle methods?

19
00:01:05.902 --> 00:01:07.823
Why did hooks get created?

20
00:01:12.082 --> 00:01:13.867
&gt;&gt; Brian Holt: Well, okay.

21
00:01:13.867 --> 00:01:16.903
&gt;&gt; Speaker 1: [COUGH]
&gt;&gt; Brian Holt: There's a belief that hooks

22
00:01:16.903 --> 00:01:21.473
are simpler than having to learn
the life cycle of components and

23
00:01:21.473 --> 00:01:26.311
having to understand like context and
some other things like that.

24
00:01:26.311 --> 00:01:30.319
And you can notice I'm being
non-committal with my language.

25
00:01:30.319 --> 00:01:34.812
It's because I have my doubts about which
of these APIs is gonna be for the better,

26
00:01:34.812 --> 00:01:39.383
and like maybe we'll address that a bit
later when we talk about class components.

27
00:01:39.383 --> 00:01:41.000
That's probably the better so

28
00:01:41.000 --> 00:01:43.683
that everyone can kind of
get on the same page here.

29
00:01:43.683 --> 00:01:48.300
But the short answer to that is
people think that this is easier, and

30
00:01:48.300 --> 00:01:53.647
then I'll teach you both, and you can be
the judge of which one you want to use.

31
00:01:53.647 --> 00:01:57.051
But no, there's no there's no inherent
problem with class components.

32
00:01:58.963 --> 00:01:59.780
&gt;&gt; Brian Holt: There's no limitations.

33
00:01:59.780 --> 00:02:03.155
Actually, class components
can do more than hooks can.

34
00:02:03.155 --> 00:02:05.900
&gt;&gt; Speaker 1: Currently
&gt;&gt; Brian Holt: Currently.

35
00:02:05.900 --> 00:02:11.029
They have plans to fix the gaps,
but as of right now

36
00:02:11.029 --> 00:02:16.173
there's still some things
that hooks can't do.

37
00:02:16.173 --> 00:02:18.355
So one more thing we should
call it that we did here.

38
00:02:18.355 --> 00:02:22.485
So if I go and select like American Eskimo
dog and then switch to Cat,

39
00:02:22.485 --> 00:02:27.128
notice it very quickly switches that
back to be the default option, right?

40
00:02:27.128 --> 00:02:32.834
That's something that we did
here with this empty string.

41
00:02:36.065 --> 00:02:38.980
&gt;&gt; Brian Holt: Normally it's just kind
of understood, but I just wanna call out

42
00:02:38.980 --> 00:02:42.266
the fact that as soon as I call setBreed
here to be empty string, because of

43
00:02:42.266 --> 00:02:45.673
the way of the reactive stretch and
the way that we're thinking about this.

44
00:02:45.673 --> 00:02:51.146
As soon as this is set, this is synced
to this animal drop down down here.

45
00:02:51.146 --> 00:02:55.156
Or rather the breed drop down, that as
soon as I send that to empty string,

46
00:02:55.156 --> 00:02:57.953
it immediately updates breed right here,
right?

47
00:02:57.953 --> 00:03:01.529
So those are connected together,
we've clung that together.

48
00:03:01.529 --> 00:03:05.752
So now it's really cool as long as we're
making sure that we're calling setBreed in

49
00:03:05.752 --> 00:03:09.439
the right places, that it cascades that
effect down to all the places that

50
00:03:09.439 --> 00:03:11.707
are depending on that information, right?

51
00:03:11.707 --> 00:03:16.393
So that's the power of hooks and stuff
like that is as long as you're playing by

52
00:03:16.393 --> 00:03:19.813
the React rules you get this
propagation state for free.

53
00:03:19.813 --> 00:03:22.835
So I wanna tell you that useAffect and

54
00:03:22.835 --> 00:03:27.721
useState are the two primary
hooks that you're gonna use.

55
00:03:27.721 --> 00:03:33.311
That's gonna cover about
90% of your use cases.

56
00:03:33.311 --> 00:03:38.115
So useState obviously the most common
use effect also being quite common, and

57
00:03:38.115 --> 00:03:40.736
then maybe like useRef occasionally, and

58
00:03:40.736 --> 00:03:45.131
then there's a long tail of other
hooks that you may never have to know.

59
00:03:45.131 --> 00:03:52.297
So we'll definitely still talk about them,
we'll get into an intermediate React.

60
00:03:52.297 --> 00:03:55.432
I think we'll still talk about Ref
in here, but that'll be it for

61
00:03:55.432 --> 00:03:58.290
the React life cycle of the React host and
things like that.

