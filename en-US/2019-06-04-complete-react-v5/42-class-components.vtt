WEBVTT

1
00:00:00.100 --> 00:00:03.670
&gt;&gt; Brian Holt: All we've talked about so
far are hooks, right?

2
00:00:03.670 --> 00:00:06.860
How to do state with hooks?

3
00:00:06.860 --> 00:00:09.123
It used to be called stateless
functional components and

4
00:00:09.123 --> 00:00:11.065
now people just call
them function components.

5
00:00:11.065 --> 00:00:14.670
But if you see that terminology,
those mean the same thing, right?

6
00:00:14.670 --> 00:00:18.023
It just means that a function
that's not a class.

7
00:00:18.023 --> 00:00:21.297
I'm going to show you how to do the other
way of doing components which are class

8
00:00:21.297 --> 00:00:22.690
components.

9
00:00:22.690 --> 00:00:26.614
And they function in one
most ways very similarly and

10
00:00:26.614 --> 00:00:29.295
in other ways, a bit differently.

11
00:00:30.517 --> 00:00:34.764
&gt;&gt; Brian Holt: So we're gonna make
the details page be a class component.

12
00:00:36.698 --> 00:00:42.068
&gt;&gt; Brian Holt: So what I'm gonna do here
is I'm gonna say class Details extends

13
00:00:42.068 --> 00:00:47.509
React.Component,
&gt;&gt; Brian Holt: Okay?

14
00:00:48.691 --> 00:00:51.475
&gt;&gt; Brian Holt: So,
this is a JavaScript class.

15
00:00:51.475 --> 00:00:53.304
There's nothing special about this yet,
right?

16
00:00:53.304 --> 00:00:56.655
It extends React.Component which means
that it has some inheritance that it's

17
00:00:56.655 --> 00:00:58.808
gonna get from a react component.

18
00:00:58.808 --> 00:01:01.282
&gt;&gt; Brian Holt: But other than that,
it works relatively the same way.

19
00:01:01.282 --> 00:01:05.997
The one hard requirement of every class
component is it must have a render method.

20
00:01:07.531 --> 00:01:09.434
&gt;&gt; Brian Holt: It will not work
unless you have a render method.

21
00:01:13.651 --> 00:01:18.081
&gt;&gt; Brian Holt: And then this render
method works mostly like how a function

22
00:01:18.081 --> 00:01:20.127
component works, right?

23
00:01:23.040 --> 00:01:25.806
&gt;&gt; Brian Holt: So
one thing to keep in mind as well is that,

24
00:01:27.680 --> 00:01:28.985
&gt;&gt; Brian Holt: You can't use hooks

25
00:01:28.985 --> 00:01:30.527
with classes, right?

26
00:01:30.527 --> 00:01:34.467
So use state will just simply not
function inside of a class component.

27
00:01:42.666 --> 00:01:46.037
&gt;&gt; Brian Holt: Okay,
&gt;&gt; Brian Holt: So,

28
00:01:46.037 --> 00:01:49.415
we're gonna put in a render
method here in just a second.

29
00:01:52.774 --> 00:01:56.135
&gt;&gt; Brian Holt: But let's go ahead and
put in a componentDidMount.

30
00:01:58.515 --> 00:02:01.637
&gt;&gt; Brian Holt: So, component, you can see
here that it's actually gonna try and

31
00:02:01.637 --> 00:02:04.873
complete it for me cuz it knows
it's coming from React.Component,

32
00:02:04.873 --> 00:02:06.910
that's how it knows all of these methods.

33
00:02:08.374 --> 00:02:11.262
&gt;&gt; Brian Holt: These
are called lifecycle methods.

34
00:02:11.262 --> 00:02:15.638
&gt;&gt; Brian Holt: And, right today,
we're gonna talk about componentDidMount.

35
00:02:15.638 --> 00:02:20.147
And componentDidMount is a very, very
similar to use effect in the sense that it

36
00:02:20.147 --> 00:02:22.856
runs when it first start up,
but then it stops.

37
00:02:22.856 --> 00:02:25.977
It doesn't run anymore after that, okay?

38
00:02:25.977 --> 00:02:28.889
Whereas use effect, you have to give it
the dependencies and things like that.

39
00:02:28.889 --> 00:02:33.101
ComponentDidMount just as like I'm gonna
do this once when I first get created and

40
00:02:33.101 --> 00:02:35.189
then I'm done doing this thing, okay?

41
00:02:35.189 --> 00:02:38.486
So that's what we're gonna
do with componentDidMount.

42
00:02:40.291 --> 00:02:43.809
&gt;&gt; Brian Holt: ComponentDidMount is useful
for things like doing Ajax request,

43
00:02:43.809 --> 00:02:47.922
which is exactly what we're gonna do,
right, when someone loads the page.

44
00:02:47.922 --> 00:02:51.691
We wanna go to the API and get the pet
information back from the API, right?.

45
00:02:52.698 --> 00:02:58.897
&gt;&gt; Brian Holt: So, that's exactly
what we're gonna do when we say pet,

46
00:02:58.897 --> 00:03:07.261
which we are going to import that from
import pet from frontendmasters/pet.

47
00:03:10.386 --> 00:03:15.543
&gt;&gt; Brian Holt: I wanna say pet.animal,
it's a single animal.

48
00:03:16.831 --> 00:03:19.040
&gt;&gt; Brian Holt: And
then we're going to pass it.

49
00:03:19.040 --> 00:03:21.800
We want to pass that the ID
that we're getting from here,

50
00:03:21.800 --> 00:03:27.050
I like it from /details/1, right?

51
00:03:27.050 --> 00:03:29.742
We wanna pass it this number
1 right there, right,

52
00:03:29.742 --> 00:03:32.420
that ID that we're getting from the URL.

53
00:03:32.420 --> 00:03:39.519
So the way we're gonna do
that is with this.props.id.

54
00:03:39.519 --> 00:03:43.579
So rather than getting that in as
an argument like we were with functions it

55
00:03:43.579 --> 00:03:44.892
comes up this.props.

56
00:03:44.892 --> 00:03:48.545
You can be assured that anything that's
passing from the parents is gonna come

57
00:03:48.545 --> 00:03:49.630
in from this.props.

58
00:03:49.630 --> 00:03:53.693
The one thing to keep in mind
with this.props is its immutable,

59
00:03:53.693 --> 00:03:55.130
you can't change it.

60
00:03:55.130 --> 00:03:59.408
So, a child receives props from its
parents, and it can't change them,

61
00:03:59.408 --> 00:04:01.207
it can only read them, right?

62
00:04:01.207 --> 00:04:02.822
They're read-only in that sense.

63
00:04:04.223 --> 00:04:06.088
&gt;&gt; Brian Holt: Does that make sense, yeah.

64
00:04:09.278 --> 00:04:11.266
&gt;&gt; Brian Holt: Okay, and
then after that, this is a promise.

65
00:04:11.266 --> 00:04:16.334
I'm gonna say .then and we're gonna
get the animal back from the API.

66
00:04:20.854 --> 00:04:22.255
&gt;&gt; Brian Holt: It's a pair function here.

67
00:04:24.839 --> 00:04:27.779
&gt;&gt; Brian Holt: And
we're gonna say this.setState.

68
00:04:30.300 --> 00:04:35.892
&gt;&gt; Brian Holt: And we're going to get
the name is going to be animal.name.

69
00:04:39.053 --> 00:04:41.537
&gt;&gt; Brian Holt: You could
put like a return here,

70
00:04:41.537 --> 00:04:45.310
it'll just stop giving
you all the red lines.

71
00:04:45.310 --> 00:04:47.751
We'll fix that in a second and
I'm just getting sick of the red lines.

72
00:04:47.751 --> 00:04:52.237
[LAUGH]
&gt;&gt; Brian Holt: Name,

73
00:04:53.707 --> 00:04:55.873
&gt;&gt; Brian Holt: Animal.name will do,

74
00:04:55.873 --> 00:04:59.776
animal is,
&gt;&gt; Brian Holt: Animal.type.

75
00:05:05.881 --> 00:05:09.444
&gt;&gt; Brian Holt: Here will do location which
will be a template string because we have

76
00:05:09.444 --> 00:05:11.454
to put a couple things together here.

77
00:05:14.215 --> 00:05:19.215
&gt;&gt; Brian Holt: We're gonna do
animal.contact.address.city.

78
00:05:20.741 --> 00:05:28.826
&gt;&gt; Brian Holt: Space,
animal.contact.address.state.

79
00:05:35.240 --> 00:05:40.234
&gt;&gt; Brian Holt: Description
will be animal.description.

80
00:05:43.573 --> 00:05:50.922
&gt;&gt; Brian Holt: And
the media will be animal.photos.

81
00:05:53.753 --> 00:06:01.473
&gt;&gt; Brian Holt: And
breed will be animal.breeds.primary.

82
00:06:03.793 --> 00:06:08.113
&gt;&gt; Brian Holt: And then the other thing
that we're gonna do here is we're gonna

83
00:06:08.113 --> 00:06:09.634
say, loading false.

84
00:06:14.192 --> 00:06:16.810
&gt;&gt; Brian Holt: So
we're gonna say, loading false.

85
00:06:17.830 --> 00:06:20.720
So, when we first load the page,
we're gonna put it in a loading state,

86
00:06:20.720 --> 00:06:23.490
right cuz you're grabbing
something from the API, right?

87
00:06:23.490 --> 00:06:26.010
And then whenever this
comes back from the API,

88
00:06:26.010 --> 00:06:28.400
we're going to set that to loading false.

89
00:06:28.400 --> 00:06:32.325
Now the way that we're gonna set it to
be a loading state is we're gonna say

90
00:06:32.325 --> 00:06:33.540
constructor up here.

91
00:06:35.239 --> 00:06:39.840
&gt;&gt; Brian Holt: Let's say, constructor,
and constructor will take in the props.

92
00:06:39.840 --> 00:06:41.980
And you have to say super props.

93
00:06:41.980 --> 00:06:46.350
This is just something kinda, it's
an odd ritual that you just have to do.

94
00:06:46.350 --> 00:06:48.090
It's going to be constructed
with properties, and

95
00:06:48.090 --> 00:06:51.390
you have to handle those
properties up to react, right?

96
00:06:51.390 --> 00:06:52.290
So that's what this does.

97
00:06:52.290 --> 00:06:53.411
The super props says,

98
00:06:53.411 --> 00:06:57.105
hey call the constructor on my parent
class which is a React.Component.

99
00:06:57.105 --> 00:06:59.512
Is that make sense?

100
00:06:59.512 --> 00:07:01.174
If you don't do this,
react will yell at you.

101
00:07:01.174 --> 00:07:02.872
So, just get used to doing it.

102
00:07:05.095 --> 00:07:08.296
&gt;&gt; Brian Holt: Okay, here,
I'm gonna set an initial stage,

103
00:07:08.296 --> 00:07:14.164
some would say this.state =,
&gt;&gt; Brian Holt: Loading,

104
00:07:14.164 --> 00:07:18.638
oops,
&gt;&gt; Brian Holt: True.

105
00:07:21.831 --> 00:07:25.455
&gt;&gt; Brian Holt: So let's talk about
this.state versus to this.props.

106
00:07:25.455 --> 00:07:29.653
This.props is information that you get
from your parent class that's handed

107
00:07:29.653 --> 00:07:30.806
down to you, right?

108
00:07:30.806 --> 00:07:35.047
This is, again,
what was coming in via parameters before.

109
00:07:35.047 --> 00:07:36.710
Now again, we don't have hooks.

110
00:07:36.710 --> 00:07:40.565
So we don't have any way to keep
stateful things using hooks, right?

111
00:07:40.565 --> 00:07:44.914
So the way that we do that with class
components as using this.state.

112
00:07:44.914 --> 00:07:47.720
Whereas this.props immutable and
only comes from the parent.

113
00:07:47.720 --> 00:07:50.430
This.state is self-contained
within the class.

114
00:07:50.430 --> 00:07:57.665
So no other components can modify its
state, its master of its own state, right?

115
00:07:59.873 --> 00:08:01.450
&gt;&gt; Brian Holt: So in this particular case,

116
00:08:01.450 --> 00:08:05.133
I'm instantiating it like I'm
creating the first set of state but

117
00:08:05.133 --> 00:08:08.650
everything after that I'll do
with this.setState, right?

118
00:08:08.650 --> 00:08:12.950
So after I call this .setState here, this
will update this state up here, right?

119
00:08:12.950 --> 00:08:16.490
So this will get a bunch of new
state from all this stuff, right?

120
00:08:16.490 --> 00:08:19.945
And then this loading true,
will be set to loading false.

121
00:08:23.155 --> 00:08:24.280
&gt;&gt; Brian Holt: Make sense?

122
00:08:24.280 --> 00:08:28.246
Okay, so the thing to know about
when I call this .setState,

123
00:08:28.246 --> 00:08:31.390
this is what's called a shallow merge,
right?

124
00:08:31.390 --> 00:08:36.194
So, I mean,
it might even literally just says Object,

125
00:08:36.194 --> 00:08:40.501
you can ignore this but
just showing what it does.

126
00:08:40.501 --> 00:08:45.314
Object assign,
&gt;&gt; Brian Holt: oldState,

127
00:08:47.100 --> 00:08:48.171
&gt;&gt; Brian Holt: newState, right?

128
00:08:49.328 --> 00:08:52.290
&gt;&gt; Brian Holt: So that basically what
that means is if any of these collide,

129
00:08:52.290 --> 00:08:55.731
like this one does with this one,
it will over write this one, right?

130
00:08:55.731 --> 00:08:58.539
But everything else will just be additive.

131
00:08:58.539 --> 00:09:05.063
So if this had some other thing,
&gt;&gt; Brian Holt: This

132
00:09:05.063 --> 00:09:08.327
would not be overwritten,
this would still exist afterwards, right?

133
00:09:08.327 --> 00:09:09.579
But it is shallow, right?

134
00:09:09.579 --> 00:09:13.056
So if I have deeply nested objects,
those won't get overwritten, right, so

135
00:09:13.056 --> 00:09:14.280
it just does the top level.

136
00:09:17.955 --> 00:09:20.681
&gt;&gt; Brian Holt: And that's how you
do state with class components.

137
00:09:20.681 --> 00:09:23.834
This is how I've been doing state for
a really long time until hooks came along.

138
00:09:26.651 --> 00:09:28.603
&gt;&gt; Brian Holt: Something
else I wanna call out here,

139
00:09:28.603 --> 00:09:32.209
notice these an arrow function here
instead of saying function here.

140
00:09:35.710 --> 00:09:39.154
&gt;&gt; Brian Holt: You’ve probably noticed
that I use a lot of arrow functions just

141
00:09:39.154 --> 00:09:43.195
by the nature of how I code, this in
this place, it's actually required.

142
00:09:44.451 --> 00:09:45.934
&gt;&gt; Brian Holt: I don't wanna say required,

143
00:09:45.934 --> 00:09:48.435
it's very difficult if
you don't do it this way.

144
00:09:49.551 --> 00:09:50.386
&gt;&gt; Brian Holt: So why?

145
00:09:50.386 --> 00:09:52.090
Why is this a problem here?

146
00:09:52.090 --> 00:09:55.170
Well, if I put a function here,
what is this?

147
00:09:57.175 --> 00:09:58.838
&gt;&gt; Brian Holt: The answer is not
what you would want it to be.

148
00:09:58.838 --> 00:10:01.598
[LAUGH] I don't actually
know it's gonna be, but

149
00:10:01.598 --> 00:10:05.560
it's not gonna be what
you'd want it to be, right?

150
00:10:05.560 --> 00:10:08.890
When I put function here, it creates
a new context when this is invoked.

151
00:10:08.890 --> 00:10:12.440
This.then is going to be
invoked somewhere else.

152
00:10:12.440 --> 00:10:15.160
That might be Window,
it might be the promise itself.

153
00:10:15.160 --> 00:10:17.520
I'm not actually sure
what it gets invoked on.

154
00:10:17.520 --> 00:10:23.480
But, if I do an arrow function
instead this will get.

155
00:10:23.480 --> 00:10:26.470
It will not create a new context,
which is what arrow functions do,

156
00:10:26.470 --> 00:10:28.570
they don't create new contexts, right?

157
00:10:28.570 --> 00:10:30.561
So this will be correct.

158
00:10:33.352 --> 00:10:34.350
&gt;&gt; Brian Holt: Does that make sense?

159
00:10:36.583 --> 00:10:39.850
&gt;&gt; Brian Holt: Some of classic components,
what this is very important, right?

160
00:10:39.850 --> 00:10:42.933
It's actually one of the reasons why they
chose to go the directions of hooks is

161
00:10:42.933 --> 00:10:44.767
because this is kind of hard to teach,
right?

162
00:10:45.835 --> 00:10:46.666
&gt;&gt; Brian Holt: It can be.

163
00:10:48.086 --> 00:10:51.130
&gt;&gt; Brian Holt: There's just like a handful
of things that you need to be aware of.

164
00:10:51.130 --> 00:10:53.941
And I think after that it's
pretty to move past what this is.

165
00:10:56.034 --> 00:11:02.400
&gt;&gt; Brian Holt: And, you can also put here
in the then, you can put console.error.

166
00:11:02.400 --> 00:11:05.355
So if there's any errors in the API, so
it will just log it out to the console.

167
00:11:09.604 --> 00:11:11.992
&gt;&gt; Brian Holt: You should have better
error handling than this, right?

168
00:11:11.992 --> 00:11:13.676
You should report it to your service and

169
00:11:13.676 --> 00:11:16.310
show that your error are some
useful error message.

170
00:11:16.310 --> 00:11:18.778
This is not a course on error handling.

171
00:11:18.778 --> 00:11:20.510
They have a course on that,
you should watch that.

172
00:11:20.510 --> 00:11:21.094
[LAUGH]

