WEBVTT

1
00:00:00.560 --> 00:00:03.550
&gt;&gt; Speaker 1: Could you explain the plus

2
00:00:03.550 --> 00:00:06.980
sign in front of
eventTargetDataSetIndex again?

3
00:00:06.980 --> 00:00:09.170
&gt;&gt; Brian Holt: When you get back
something from the data set,

4
00:00:09.170 --> 00:00:10.130
it's gonna be a string, right?

5
00:00:10.130 --> 00:00:11.670
Like a string five.

6
00:00:11.670 --> 00:00:15.070
And I need it to be a number,
not a string, right?

7
00:00:15.070 --> 00:00:18.170
So if I put +string5.

8
00:00:18.170 --> 00:00:20.870
I get back the actual number of five.

9
00:00:20.870 --> 00:00:22.987
&gt;&gt; Speaker 1: Okay, so
of course, it's an integer.

10
00:00:22.987 --> 00:00:24.170
&gt;&gt; Brian Holt: A number, yeah.

11
00:00:24.170 --> 00:00:30.101
So you could have also
just said parseInt("5",10)

12
00:00:30.101 --> 00:00:34.617
which just means you want
it to be in base ten.

13
00:00:34.617 --> 00:00:37.020
And that would give you
the same thing as well.

14
00:00:37.020 --> 00:00:39.000
But plus signs is far less work, so.

15
00:00:40.730 --> 00:00:43.540
Very well there might be something
like this, stop buying this here.

16
00:00:45.670 --> 00:00:46.580
So.

17
00:00:46.580 --> 00:00:49.340
&gt;&gt; Speaker 3: And
then adding index to that call.

18
00:00:50.440 --> 00:00:52.965
&gt;&gt; Brian Holt: Yeah, and you could have
done this as well right, for sure and

19
00:00:52.965 --> 00:00:54.240
then not had the data set here.

20
00:00:59.266 --> 00:01:02.322
&gt;&gt; Brian Holt: So then this would have
had worked like this instead of getting

21
00:01:02.322 --> 00:01:02.864
an event.

22
00:01:06.469 --> 00:01:08.312
&gt;&gt; Brian Holt: There would have
been an index like this and

23
00:01:08.312 --> 00:01:10.265
then you would've just been calling index.

24
00:01:13.747 --> 00:01:15.700
&gt;&gt; Brian Holt: Yes, this works.

25
00:01:15.700 --> 00:01:18.631
So let me tell you why people have
historically not done this, and

26
00:01:18.631 --> 00:01:22.066
then I'll tell you why that's silly
that people haven't done it this way.

27
00:01:26.776 --> 00:01:28.840
&gt;&gt; Brian Holt: So this does work.

28
00:01:28.840 --> 00:01:34.030
People did not used to do this,
because this calling bind used

29
00:01:34.030 --> 00:01:39.600
to be very expensive, far more expensive
than you would have ever expected.

30
00:01:39.600 --> 00:01:41.540
It used to be one of the slowest
things you could do in Chrome.

31
00:01:42.770 --> 00:01:50.490
Now about two years ago, Chrome fixed
this and made dot bind much faster.

32
00:01:52.630 --> 00:01:55.660
But why is this different from
doing it in the constructor?

33
00:01:55.660 --> 00:02:00.190
This is different because every time I
call render, this is calling bind, right?

34
00:02:00.190 --> 00:02:02.960
And if that was really so
that means you slow down your renders,

35
00:02:02.960 --> 00:02:06.390
which means that you're slowing down the
performance of your entire application.

36
00:02:06.390 --> 00:02:10.290
So people have established the best
practice of, don't do it this way.

37
00:02:11.670 --> 00:02:13.770
But the good news is, they fixed it.

38
00:02:13.770 --> 00:02:14.880
It is much faster now.

39
00:02:14.880 --> 00:02:19.020
And so this does actually work okay, but
we still have to deal with old browsers

40
00:02:19.020 --> 00:02:22.390
and so in old browsers,
this is still really slow.

41
00:02:22.390 --> 00:02:25.590
So it works and it's slow,
it's creating and

42
00:02:25.590 --> 00:02:27.636
destroying functions every single time.

43
00:02:27.636 --> 00:02:33.160
That you run this,
which hooks do now anyway.

44
00:02:33.160 --> 00:02:36.400
So I'm not really too sure if
that's a big deal anymore.

45
00:02:36.400 --> 00:02:40.361
But the real answer to that question is
the dot bind ends up being expensive.

