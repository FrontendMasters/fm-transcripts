WEBVTT

1
00:00:00.054 --> 00:00:02.530
&gt;&gt; Brian Holt: Actually gonna show you
a cool trick that parcel can do for you.

2
00:00:03.930 --> 00:00:10.075
So, we need to install a new client
library to make requests against an API.

3
00:00:11.633 --> 00:00:14.129
&gt;&gt; Brian Holt: So,
what I'm gonna do here, I'm gonna say,

4
00:00:14.129 --> 00:00:19.216
import,
&gt;&gt; Brian Holt: ANIMALS like this from

5
00:00:19.216 --> 00:00:26.136
@frontendmasters,
&gt;&gt; Brian Holt: /pet like that.

6
00:00:27.361 --> 00:00:30.550
&gt;&gt; Brian Holt: Now, you and
I have not installed this, right?

7
00:00:30.550 --> 00:00:34.755
This was not in our package.json, but
parcel is smart enough to say, hey,

8
00:00:34.755 --> 00:00:38.087
this is out on the NPM registry,
I'll just go grab it for you.

9
00:00:38.087 --> 00:00:41.590
So you don't have to NPM install it,
it'll just do it for you.

10
00:00:41.590 --> 00:00:43.494
So if you see here, if I say save,

11
00:00:43.494 --> 00:00:47.240
it's gonna say Installing
frontendmasters/pet right there.

12
00:00:51.402 --> 00:00:56.352
&gt;&gt; Brian Holt: And, while it's installing,
it will rebuild the project, and

13
00:00:56.352 --> 00:00:59.340
now it's available to us on a project.

14
00:00:59.340 --> 00:01:01.160
Okay, so
we installed this frontendmasters/pet.

15
00:01:01.160 --> 00:01:05.983
If you feel more comfortable, you can just
say npm install @frontendmasters/pet.

16
00:01:08.298 --> 00:01:09.896
&gt;&gt; Brian Holt: But
you can also have parcel just do it for

17
00:01:09.896 --> 00:01:12.013
him which is kind of a fun
feature that it does for you.

18
00:01:13.283 --> 00:01:13.963
&gt;&gt; Brian Holt: And, again,

19
00:01:13.963 --> 00:01:16.942
if you look in package.json you
can see that it installed it.

20
00:01:16.942 --> 00:01:22.086
Here, frontrendmasters/pet and
save that in their forest.

21
00:01:23.350 --> 00:01:24.334
&gt;&gt; Brian Holt: Magical.

22
00:01:26.478 --> 00:01:27.102
&gt;&gt; Brian Holt: Okay, so

23
00:01:27.102 --> 00:01:32.097
now we have this ANIMAL's array which
is just an array of strings I believe.

24
00:01:34.617 --> 00:01:41.282
&gt;&gt; Brian Holt: And here,
we're gonna say const animal,

25
00:01:41.282 --> 00:01:45.355
set animal = useState and

26
00:01:45.355 --> 00:01:53.970
we're gonna start with a dog,
&gt;&gt; Brian Holt: Okay?

27
00:01:55.603 --> 00:01:57.835
&gt;&gt; Brian Holt: Then
we're gonna go down and

28
00:01:57.835 --> 00:02:03.329
then we are going to make underneath
our input there, another label,

29
00:02:05.954 --> 00:02:09.728
&gt;&gt; Brian Holt: htmlFor = animal.

30
00:02:14.301 --> 00:02:18.103
&gt;&gt; Brian Holt: And inside of that,
we're going to select Animal.

31
00:02:21.030 --> 00:02:24.539
&gt;&gt; Brian Holt: And,
we're gonna put a select inside of that.

32
00:02:24.539 --> 00:02:30.352
So select,
&gt;&gt; Brian Holt: id="animal",

33
00:02:34.022 --> 00:02:38.241
&gt;&gt; Brian Holt: value= animal.

34
00:02:42.153 --> 00:02:45.123
&gt;&gt; Brian Holt: onChange = e, and

35
00:02:45.123 --> 00:02:50.884
then setAnimal e.target.value.

36
00:02:54.349 --> 00:02:56.276
&gt;&gt; Brian Holt: So I'm gonna show you
something pretty cool that we've

37
00:02:56.276 --> 00:02:57.450
done already.

38
00:02:57.450 --> 00:03:00.790
So it's saying, hey,
if you're gonna do onChange,

39
00:03:00.790 --> 00:03:02.690
I need you to have onBlur as well.

40
00:03:02.690 --> 00:03:06.313
Because some screen readers,
when you're tabbing across things,

41
00:03:06.313 --> 00:03:08.128
don't trigger onChange events.

42
00:03:08.128 --> 00:03:13.194
Which means that your code would not work
when being used with a screen reader,

43
00:03:13.194 --> 00:03:16.120
which is obviously a big party foul,
right?

44
00:03:16.120 --> 00:03:18.189
And I love the jsx ally,
just catches up for you and

45
00:03:18.189 --> 00:03:21.110
says like I'm not gonna let you go
forward until you fix this, right?

46
00:03:21.110 --> 00:03:23.990
Obviously like, this is so
distracting to see so many red lines,

47
00:03:23.990 --> 00:03:26.520
I just can't even handle myself, right?

48
00:03:26.520 --> 00:03:31.723
So, we can fix that by saying onBlur = e,

49
00:03:31.723 --> 00:03:37.368
setAnimal,
&gt;&gt; Brian Holt: e.target.value,

50
00:03:37.368 --> 00:03:39.209
as well, right?

51
00:03:39.209 --> 00:03:42.608
And now, it's all happy again
cuz we fixed our accessibility

52
00:03:42.608 --> 00:03:46.035
issue,
&gt;&gt; Brian Holt: Okay?

53
00:03:46.035 --> 00:03:50.192
And then we're gonna put a bunch of
options in here of different types of

54
00:03:50.192 --> 00:03:52.075
animals that we can search for.

55
00:03:52.075 --> 00:03:55.280
So the first one, we put in here,
is just a blank option.

56
00:03:55.280 --> 00:04:00.423
This is gonna represent when we search for
all animals, right?

57
00:04:03.021 --> 00:04:04.634
&gt;&gt; Brian Holt: I guess you
could put in here as well,

58
00:04:06.268 --> 00:04:07.300
&gt;&gt; Brian Holt: Something like this,

59
00:04:09.682 --> 00:04:12.170
&gt;&gt; Brian Holt: And put All as well.

60
00:04:12.170 --> 00:04:13.370
That's probably not a bad idea.

61
00:04:19.795 --> 00:04:23.355
&gt;&gt; Brian Holt: And then here,
we're gonna do curly braces and

62
00:04:23.355 --> 00:04:26.470
we have an array of animals here, right?

63
00:04:26.470 --> 00:04:29.318
And we wanna have one option for
every animal in there.

64
00:04:30.470 --> 00:04:32.813
&gt;&gt; Brian Holt: So
what we have is a list of strings, and

65
00:04:32.813 --> 00:04:36.680
what we need back from it is
a list of components, right?

66
00:04:36.680 --> 00:04:37.270
It makes sense?

67
00:04:37.270 --> 00:04:39.416
Like, we have a list of strings and

68
00:04:39.416 --> 00:04:44.260
we wanna turn those list of strings
into a list of option components.

69
00:04:44.260 --> 00:04:45.979
Or option tabs or
whatever you want to call them.

70
00:04:47.047 --> 00:04:49.738
&gt;&gt; Brian Holt: Well, luckily, there’s
something built directly into JavaScript

71
00:04:49.738 --> 00:04:52.657
that translates one array of things to
another array of things, right, and

72
00:04:52.657 --> 00:04:54.345
it’s called map.

73
00:04:54.345 --> 00:04:58.846
&gt;&gt; Brian Holt: So if I say animas.map,
right, cuz it’s an array,

74
00:04:58.846 --> 00:05:03.946
then you give it a function that
takes an item in that array and

75
00:05:03.946 --> 00:05:07.060
transforms it into something else.

76
00:05:07.060 --> 00:05:10.480
So I'm gonna take this string, right?

77
00:05:10.480 --> 00:05:14.065
Or, we'll just call it animal
because that's what it is.

78
00:05:14.065 --> 00:05:17.717
&gt;&gt; Brian Holt: And then we're
gonna have that return in option

79
00:05:17.717 --> 00:05:22.444
component,
&gt;&gt; Brian Holt: With the value of

80
00:05:22.444 --> 00:05:26.050
that option component is
going to be the animal.

81
00:05:26.050 --> 00:05:29.936
And, also that it's
going to display animal.

82
00:05:35.198 --> 00:05:37.829
&gt;&gt; Brian Holt: Okay,
it'll get a red line here for

83
00:05:37.829 --> 00:05:41.523
just a second which we'll
fix in just one moment.

84
00:05:45.339 --> 00:05:47.390
&gt;&gt; Brian Holt: So does this make sense?

85
00:05:47.390 --> 00:05:50.868
First of all,
&gt;&gt; Brian Holt: With arrow functions,

86
00:05:50.868 --> 00:05:53.450
you could have them implicit returned,
right?

87
00:05:53.450 --> 00:05:58.070
So in this particular case, I had the
arrow function and I have no curly braces,

88
00:05:58.070 --> 00:06:00.630
which means it’s implicitly returned.

89
00:06:00.630 --> 00:06:06.612
So this would be equivalent if I deleted
this parentheses and deleted this one.

90
00:06:07.964 --> 00:06:12.904
&gt;&gt; Brian Holt: And I said return,
&gt;&gt; Brian Holt: Like that.

91
00:06:17.549 --> 00:06:18.817
&gt;&gt; Brian Holt: Those two
things are the same, but

92
00:06:18.817 --> 00:06:21.706
because I have the parenthesis which
means continue on the next line, right,

93
00:06:21.706 --> 00:06:22.950
it's an implicit return.

94
00:06:22.950 --> 00:06:23.890
Does that make sense?

95
00:06:30.775 --> 00:06:33.419
&gt;&gt; Brian Holt: So those two things that
I showed you are exactly the same.

96
00:06:36.515 --> 00:06:40.699
&gt;&gt; Brian Holt: So now I'm gonna
have one option for every animal.

97
00:06:44.185 --> 00:06:47.701
&gt;&gt; Brian Holt: And indeed hopefully,
if you go back and look over here,

98
00:06:47.701 --> 00:06:52.599
it's still upset but you can see,
&gt;&gt; Brian Holt: I have a list of various

99
00:06:52.599 --> 00:06:53.840
different options.

100
00:06:53.840 --> 00:06:56.406
It's just a tiny bit bigger.

101
00:06:56.406 --> 00:07:00.776
So there's a barnyard, bird, cat, dog,
horse, rabbit, scales fins, other and

102
00:07:00.776 --> 00:07:04.419
small furry, which are the type of
animals that can be able to search for

103
00:07:04.419 --> 00:07:05.228
a crosses API.

