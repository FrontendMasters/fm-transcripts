WEBVTT

1
00:00:00.250 --> 00:00:03.808
&gt;&gt; Brian: So we're gonna do one more kind
of advance feature of react here which is

2
00:00:03.808 --> 00:00:04.711
called a Portal.

3
00:00:04.711 --> 00:00:06.806
We wanna make this button work here for

4
00:00:06.806 --> 00:00:10.940
the way you click adopt Fat boy Slim
cuz that's the greatest name for a dog.

5
00:00:10.940 --> 00:00:15.012
So you can actually go and adopter her,
but we wanna make sure people are like,

6
00:00:15.012 --> 00:00:17.973
are you sure you wanna adopt
this cuz adopting a pet is a big

7
00:00:17.973 --> 00:00:19.413
responsibility, right?

8
00:00:19.413 --> 00:00:21.996
So you wanna pop up a mottle
cuz everyone loves mottles.

9
00:00:21.996 --> 00:00:24.781
I hate mottles, but I'm gonna show
you how to make mottles, right.

10
00:00:24.781 --> 00:00:28.357
So, a mottle is something that pops over
your screen and says something like,

11
00:00:28.357 --> 00:00:30.211
are you sure you want to do this, right?

12
00:00:30.211 --> 00:00:34.435
It's a really annoying design pattern
that we keep doing to ourselves.

13
00:00:34.435 --> 00:00:36.971
And I'm perpetuating the pattern
by showing you, yeah?

14
00:00:36.971 --> 00:00:39.023
&gt;&gt; Speaker 2: If you hate mottles,
what is the better alternative?

15
00:00:39.023 --> 00:00:45.302
&gt;&gt; Brian: Just like in line confirmations,
I don't know.

16
00:00:45.302 --> 00:00:47.857
I think there's better design
patterns to lean on than,

17
00:00:47.857 --> 00:00:50.210
like it's just kind of a lazy
pattern in my opinion.

18
00:00:51.600 --> 00:00:53.315
Alerts, no I'm just kidding,
that's a joke.

19
00:00:53.315 --> 00:00:56.483
[LAUGH] Yeah, I don't know.

20
00:00:56.483 --> 00:00:59.547
I'd have to think more about it,
but I think there's better ways.

21
00:01:02.998 --> 00:01:06.878
&gt;&gt; Brian: So, the thing that I
wanna accomplish here, is that.

22
00:01:06.878 --> 00:01:12.027
I have this details page, right, and
I wanna click Adopt Fat Boy Slim and

23
00:01:12.027 --> 00:01:16.683
I want it to pop over,
a model that covers the whole page, right?

24
00:01:16.683 --> 00:01:20.210
Now that would be really hard because this
is already nested within several layers

25
00:01:20.210 --> 00:01:21.110
of markup.

26
00:01:21.110 --> 00:01:23.270
So taking over the whole
page might not be possible,

27
00:01:23.270 --> 00:01:25.600
given the CSS that lives above it.

28
00:01:25.600 --> 00:01:27.600
So, how do you do that?

29
00:01:27.600 --> 00:01:29.100
There's not really a good way of doing it.

30
00:01:29.100 --> 00:01:35.170
It'd be much better, if you look at my
markup here, I have root right here.

31
00:01:35.170 --> 00:01:39.500
It'd be cool if there was a model above
it, that I could render into, right.

32
00:01:39.500 --> 00:01:42.790
And so, we're gonna do that with portals.

33
00:01:44.630 --> 00:01:48.680
So, what I want you to do is I want
you to open your index.html file,

34
00:01:48.680 --> 00:01:53.410
inside of the source directory,
and then above root,

35
00:01:53.410 --> 00:01:58.710
put #modal with nothing in it.

36
00:02:00.070 --> 00:02:02.958
So once you've done that, line 11 there,

37
00:02:02.958 --> 00:02:06.764
I want you to make a new file
called Modal.js, Modal.js.

38
00:02:06.764 --> 00:02:13.156
And you go into import, React and

39
00:02:13.156 --> 00:02:17.730
useEffect and useRef.

40
00:02:17.730 --> 00:02:24.555
We'll talk about what useRef is
here in just a second, from React.

41
00:02:24.555 --> 00:02:31.575
And that I want you to import
createPortal from react-dom.

42
00:02:36.238 --> 00:02:42.263
&gt;&gt; Brian: I wanna say, const modalRoot

43
00:02:42.263 --> 00:02:50.218
= document.getElementById modal.

44
00:02:50.218 --> 00:02:55.352
And then here, I'm gonna say, const modal
= a function which takes in children.

45
00:02:58.394 --> 00:03:04.516
&gt;&gt; Brian: And returns,
&gt;&gt; Brian: Function,

46
00:03:06.393 --> 00:03:08.164
&gt;&gt; Brian: So I'm gonna use a thing

47
00:03:08.164 --> 00:03:12.859
called refs here, so
I'm gonna say const elRef = useRef, and

48
00:03:12.859 --> 00:03:15.260
I'm gonna give it null for now.

49
00:03:16.260 --> 00:03:19.330
So useRef, it's an interesting thing.

50
00:03:19.330 --> 00:03:22.492
So I'm gonna have this element
that I'm going to create,

51
00:03:22.492 --> 00:03:25.473
and I want to always refer
to the same element, right.

52
00:03:25.473 --> 00:03:28.810
Because, when I create a modal,
I'm gonna be creating markup and

53
00:03:28.810 --> 00:03:30.551
when I destroy the modal, right.

54
00:03:30.551 --> 00:03:33.511
It's still, as soon as I pop down the
modal, I need to go back and destroy it,

55
00:03:33.511 --> 00:03:35.400
right, and I need to go un-render it.

56
00:03:35.400 --> 00:03:38.864
Because if I don't destroy it,
then I'm gonna leak memory if I open and

57
00:03:38.864 --> 00:03:40.435
unopen modals a bunch of times.

58
00:03:40.435 --> 00:03:43.560
I'm just gonna keep creating markup and
not destroying it.

59
00:03:43.560 --> 00:03:46.080
So you kinda have to clean your own
garbage here, is what I'm saying.

60
00:03:46.080 --> 00:03:48.020
And useRef allows you to do that.

61
00:03:48.020 --> 00:03:50.410
Because you have renders and re-renders,

62
00:03:50.410 --> 00:03:55.150
you need to refer to the same dom
elements across renders, right?

63
00:03:55.150 --> 00:04:00.670
So I can't just say, I can't just
create the DOM element in here const.

64
00:04:03.900 --> 00:04:07.320
When I say, const div =

65
00:04:07.320 --> 00:04:13.990
documents.createElements, div, right?

66
00:04:13.990 --> 00:04:16.603
So this would be creating a new
div every single time, and

67
00:04:16.603 --> 00:04:18.030
that's what we want, right?

68
00:04:18.030 --> 00:04:19.730
We want one div created once.

69
00:04:19.730 --> 00:04:25.758
So we're gonna say, here is going to say,

70
00:04:25.758 --> 00:04:28.790
if elref.current.

71
00:04:28.790 --> 00:04:33.859
If I don't have an elref, create a div.

72
00:04:33.859 --> 00:04:39.990
And then say, elRef.current = div.

73
00:04:39.990 --> 00:04:45.960
Now, I have using this hook,
I always I'm going to have a div, right?

74
00:04:45.960 --> 00:04:50.470
A correct div, the same div,
because elRef is an object and

75
00:04:50.470 --> 00:04:52.840
this .current is always going
to be pointing at this div.

76
00:04:53.840 --> 00:04:54.461
So makes sense?

77
00:04:58.320 --> 00:05:00.230
&gt;&gt; Brian: Okay, and
then I'm gonna use effect here.

78
00:05:02.480 --> 00:05:05.627
UseEffect, so once this renders for
the first time,

79
00:05:09.265 --> 00:05:12.142
&gt;&gt; Brian: I'm gonna say,

80
00:05:12.142 --> 00:05:20.369
modalRoot.appendChild, elRef.current.

81
00:05:20.369 --> 00:05:21.966
And actually, what you could even do here?

82
00:05:21.966 --> 00:05:23.030
You could actually just move this in here.

83
00:05:24.050 --> 00:05:25.290
Just so
you don't even have to be out here.

84
00:05:25.290 --> 00:05:31.166
So instead of use effect, just say model
root inside of the use effect here.

85
00:05:31.166 --> 00:05:36.271
AppendChild.elRef.current, so,
I created this div, right?

86
00:05:36.271 --> 00:05:37.966
And this is gonna go inside of here.

87
00:05:42.014 --> 00:05:43.850
&gt;&gt; Brian: And then here,
I wanna say return.

88
00:05:45.760 --> 00:05:48.860
So, use effect that has special feature
that I have been told you about.

89
00:05:48.860 --> 00:05:51.649
If you return the function
that is the cleanup function.

90
00:05:53.010 --> 00:05:55.260
So it'll run this when it unmounts, right?

91
00:05:55.260 --> 00:05:58.410
This is component will unmount of hooks.

92
00:05:58.410 --> 00:06:03.703
So, if I return a function that,
at the end of it,

93
00:06:03.703 --> 00:06:07.612
will say, modalRoot.removeChild

94
00:06:07.612 --> 00:06:14.943
elRef.current
&gt;&gt; Brian: So

95
00:06:14.943 --> 00:06:18.686
it's only going to run this function
whenever the modal root gets closed.

96
00:06:18.686 --> 00:06:19.788
Does that make sense?

97
00:06:26.808 --> 00:06:30.965
&gt;&gt; Brian: Okay, and then down here
we're gonna say return, createPortal,

98
00:06:39.623 --> 00:06:42.006
&gt;&gt; Brian: div, we're gonna wrap it all in

99
00:06:42.006 --> 00:06:43.337
div, children.

100
00:06:47.732 --> 00:06:50.700
&gt;&gt; Brian: And elref.current.

101
00:06:50.700 --> 00:06:56.130
The reason why I'm wrapping a div, again,
is cuz I styled it with a div, that's all.

102
00:06:59.600 --> 00:07:01.922
And then down at the bottom,
export default Modal.

103
00:07:07.620 --> 00:07:11.600
&gt;&gt; Brian: So, just to kinda recap
the whole life cycle of this modal.

104
00:07:11.600 --> 00:07:12.480
The other thing, by the way,

105
00:07:12.480 --> 00:07:15.970
that I'm not doing here that you
should do if you're gonna do a modal.

106
00:07:15.970 --> 00:07:19.060
I think one of my biggest complaints about
modal as well is they're not accessible,

107
00:07:19.060 --> 00:07:20.410
and they're hard to make accessible.

108
00:07:20.410 --> 00:07:25.320
Cuz you have to trap focus, and
trapping focus is not easy all the time.

109
00:07:25.320 --> 00:07:27.530
And what we're not doing
here is trapping focus.

110
00:07:27.530 --> 00:07:32.342
So, I don't know how to do it well enough
off the top of my head to show you how to

111
00:07:32.342 --> 00:07:35.749
do, it but just google how to
trap focus in a modal, and

112
00:07:35.749 --> 00:07:39.108
you'll have a lot more smart
people than me doing it.

113
00:07:42.503 --> 00:07:47.609
&gt;&gt; Brian: So what I wanna say
here is we grab the modal here,

114
00:07:47.609 --> 00:07:51.483
that ID one that we created, right?

115
00:07:51.483 --> 00:07:55.800
Then we append this div, right?

116
00:07:55.800 --> 00:07:57.062
And inside of the div,

117
00:07:57.062 --> 00:08:01.910
we're gonna have all the children,
&gt;&gt; Brian: Right?

118
00:08:01.910 --> 00:08:05.264
That's where we'll do
the append child here, and

119
00:08:05.264 --> 00:08:07.608
then at the end, we'll remove it.

120
00:08:07.608 --> 00:08:11.054
But the cool part is like this is actually
getting rendered to another part, right,

121
00:08:11.054 --> 00:08:12.570
using this create portal function.

122
00:08:12.570 --> 00:08:15.523
This is getting rendered to
a different part of the DOM, and

123
00:08:15.523 --> 00:08:18.662
then once it gets unmounted I'll
get room unmounted for that.

124
00:08:18.662 --> 00:08:21.482
But what's cool is like,
I can use all of the state and

125
00:08:21.482 --> 00:08:26.011
render that into a different part and then
unrender it later using the same function.

126
00:08:31.431 --> 00:08:32.940
&gt;&gt; Brian: Follow me so far?

127
00:08:32.940 --> 00:08:38.035
All right, let's go make this work,
I want you to go into details.js.

128
00:08:45.666 --> 00:08:49.051
&gt;&gt; Brian: One thing we didn't do that
would have been a disaster if we

129
00:08:49.051 --> 00:08:50.029
hadn't fixed?

130
00:08:51.550 --> 00:08:53.241
How often do we want this effect to run?

131
00:08:55.645 --> 00:08:56.587
&gt;&gt; Brian: Once right?

132
00:08:56.587 --> 00:08:58.638
So how do we make an effect run once?

133
00:08:58.638 --> 00:09:04.340
Comma, empty array.

134
00:09:04.340 --> 00:09:07.629
This has no dependencies so
we want it to run once.

135
00:09:10.760 --> 00:09:14.730
Otherwise every time that the children
get updated here, that's not true.

136
00:09:14.730 --> 00:09:16.070
This post would have been okay,

137
00:09:16.070 --> 00:09:19.540
because there's this has no
state that's changing over time.

138
00:09:19.540 --> 00:09:21.420
But even still we only wanted to run once.

139
00:09:21.420 --> 00:09:24.590
That that would have could have been
a potential future source of bugs.

