WEBVTT

1
00:00:00.460 --> 00:00:03.100
&gt;&gt; Brian: This is still
gonna be in SearchParams.

2
00:00:03.100 --> 00:00:10.017
So if we go back to our website here,
just to show you, localhost1234.

3
00:00:12.846 --> 00:00:15.390
&gt;&gt; Brian: We have all the search facets
that we need to be able to search for

4
00:00:15.390 --> 00:00:18.190
pets, but we're not actually using
that to hit the API yet, right?

5
00:00:19.730 --> 00:00:24.320
So what we wanna do is we wanna
add the ability that we can go and

6
00:00:24.320 --> 00:00:28.200
hit the API and get pets back so
we can display them.

7
00:00:30.220 --> 00:00:34.504
So we're gonna add another useState here,

8
00:00:34.504 --> 00:00:40.178
we're gonna say contst [pets,
setPets] = useState,

9
00:00:40.178 --> 00:00:44.710
and it's gonna be an empty array,
all right?

10
00:00:44.710 --> 00:00:47.837
Because when you first request things from
the API, there's gonna be no pets there.

11
00:00:51.051 --> 00:00:54.871
&gt;&gt; Brian: Okay, here above the useEffect,

12
00:00:54.871 --> 00:00:59.350
we're gonna make an async function, so

13
00:00:59.350 --> 00:01:02.785
async function requestPets.

14
00:01:07.429 --> 00:01:10.955
&gt;&gt; Brian: What we're gonna do is
we're gonna say, const { animals },

15
00:01:10.955 --> 00:01:13.360
which we're gonna destructure, right?

16
00:01:13.360 --> 00:01:20.928
Cuz we know it's gonna be called animals,
and we're gonna say, = await pet.animals.

17
00:01:25.059 --> 00:01:29.407
&gt;&gt; Brian: And we're gonna send
the location, the breed, and the type,

18
00:01:29.407 --> 00:01:31.468
which is gonna be the animal.

19
00:01:35.635 --> 00:01:38.833
&gt;&gt; Brian: All right, so
a couple of things to unpack here,

20
00:01:38.833 --> 00:01:43.070
this may be your first time
using an async function.

21
00:01:43.070 --> 00:01:47.710
So an async function is a function that
is guaranteed to return a promise, right?

22
00:01:47.710 --> 00:01:51.470
So anything that's an async
function always returns a promise.

23
00:01:51.470 --> 00:01:53.390
Even though I'm not doing anything here,

24
00:01:53.390 --> 00:01:58.360
this returns a promise that will resolve
whenever this function completes.

25
00:01:58.360 --> 00:02:01.040
Now I'm just ignoring it,
but that's beside the point.

26
00:02:02.070 --> 00:02:06.590
So that's what an async function does,
but the superpower that you can decide of

27
00:02:06.590 --> 00:02:09.400
async functions is that I
get this await keyword.

28
00:02:09.400 --> 00:02:13.380
So pet.animals returns a promise itself,
right?

29
00:02:13.380 --> 00:02:18.440
And I'm just saying, hey, wait here in
this function until this completes and

30
00:02:18.440 --> 00:02:20.190
then give me back the data.

31
00:02:20.190 --> 00:02:25.090
So I could say pet.animals.then and
then do all that stuff inside of there,

32
00:02:25.090 --> 00:02:27.810
but here I'm just saying wait for
this to finish and give me back the data.

33
00:02:29.050 --> 00:02:33.630
So it makes this asynchronous code of
go to here, wait, go to here, wait,

34
00:02:33.630 --> 00:02:35.610
go to here, wait, and then finish, right?

35
00:02:37.130 --> 00:02:41.780
So I'm a big fan of async await, this just
makes this code look really, really nice.

36
00:02:41.780 --> 00:02:46.820
So now I have animals, I'm guaranteed
that animals will be done by

37
00:02:46.820 --> 00:02:51.970
the time I get down here and
I can just say setPets with the animals.

38
00:02:53.200 --> 00:02:55.360
Or if it comes back with
nothing from the API,

39
00:02:55.360 --> 00:02:58.500
just set it to continue to be
an empty array, all right?

40
00:02:58.500 --> 00:03:02.530
If I request something and no animals
come back, set it to be an empty array,

41
00:03:02.530 --> 00:03:06.150
and that's what this or
operator is gonna do for us.

42
00:03:06.150 --> 00:03:08.046
Either it's gonna be
whatever is in animals or

43
00:03:08.046 --> 00:03:09.414
it's going to be an empty array.

44
00:03:15.122 --> 00:03:15.733
&gt;&gt; Brian: Pretty cool, right?

45
00:03:15.733 --> 00:03:17.370
I think it's pretty cool.

46
00:03:20.742 --> 00:03:23.536
&gt;&gt; Brian: So now what I can do
is I can go down to the form.

47
00:03:26.135 --> 00:03:31.313
&gt;&gt; Brian: So this form that we put
in here, and I can say unsubmit =,

48
00:03:31.313 --> 00:03:36.309
and I need to do two things
here inside of this function.

49
00:03:42.523 --> 00:03:46.613
&gt;&gt; Brian: The first thing is I don't want
it to actually submit a form, right,

50
00:03:46.613 --> 00:03:47.750
like an HTML form.

51
00:03:47.750 --> 00:03:50.163
So I'm gonna say e.preventDefault,

52
00:03:50.163 --> 00:03:55.000
which you all have probably done at one
point in your JavaScript career or not.

53
00:03:56.360 --> 00:03:59.403
If not, then God bless you,
you've missed a really dark time.

54
00:03:59.403 --> 00:04:03.904
[LAUGH] Just kidding,
&gt;&gt; Brian: But

55
00:04:03.904 --> 00:04:07.150
this will prevent it from
submitting a HTML post form.

56
00:04:08.660 --> 00:04:10.413
And then all we're gonna do here
is we're gonna say requestPets.

57
00:04:18.062 --> 00:04:22.407
&gt;&gt; Brian: So if we try to transpile
this right now, right now, by default,

58
00:04:22.407 --> 00:04:26.120
Parcel is making this work for
Internet Explorer 11.

59
00:04:26.120 --> 00:04:30.758
As a representative of Microsoft,
I'm sorry

60
00:04:30.758 --> 00:04:35.000
[LAUGH]
we don't need that, right?

61
00:04:35.000 --> 00:04:38.520
This is just a demo application that
you and I are working on for fun, so

62
00:04:38.520 --> 00:04:40.320
we can just target modern browsers, right?

63
00:04:40.320 --> 00:04:43.369
We're okay to target the last two versions
of Firefox and Chrome and call it good.

64
00:04:44.600 --> 00:04:48.240
Obviously, you need to cater
this to your audience, right?

65
00:04:48.240 --> 00:04:50.860
So make sure you're looking at
your analytics to figure out

66
00:04:51.980 --> 00:04:56.290
this should work for 99% of my users or
something like that.

67
00:04:56.290 --> 00:05:01.048
But for us, we're just gonna say make
it work for the latest browsers and

68
00:05:01.048 --> 00:05:01.920
that's it.

69
00:05:01.920 --> 00:05:05.620
So actually here inside of my notes,
I have a really good list for

70
00:05:05.620 --> 00:05:09.294
you to hit all the latest browsers.

71
00:05:09.294 --> 00:05:14.251
So go ahead and just copy that right
there, or you can type it out,

72
00:05:14.251 --> 00:05:15.526
but it's a lot.

73
00:05:17.414 --> 00:05:22.552
&gt;&gt; Brian: So again,
this is in the Handling Async.

74
00:05:22.552 --> 00:05:26.206
So Handling Async right there,
number nine, down here,

75
00:05:26.206 --> 00:05:28.155
this browser's lists thing.

76
00:05:31.829 --> 00:05:36.640
&gt;&gt; Brian: Okay, and then I'm gonna
put this inside of my package.json.

77
00:05:36.640 --> 00:05:39.202
You can put it really anywhere, but
here, underneath dependencies is good.

78
00:05:42.334 --> 00:05:46.750
&gt;&gt; Brian: And so all this is is this
is an array of various kinds of

79
00:05:46.750 --> 00:05:50.285
browsers that I want, Babel and PostCSS,

80
00:05:50.285 --> 00:05:55.193
which are both running behind
the scenes inside of Parcel,

81
00:05:55.193 --> 00:05:58.850
compile my code to work for
these browsers.

82
00:06:00.350 --> 00:06:02.046
And Parcel already knows to look here,
which is cool.

83
00:06:05.219 --> 00:06:09.030
&gt;&gt; Brian: So let's look at the last two
Chrome versions, Chrome, Android, Firefox.

84
00:06:09.030 --> 00:06:12.210
These are all of the, quote-unquote,
alive, evergreen browsers.

85
00:06:13.420 --> 00:06:16.180
Now, the reason I wanted to
do this is because only very,

86
00:06:16.180 --> 00:06:19.300
very modern browsers support async await.

87
00:06:19.300 --> 00:06:22.820
Otherwise, it's going to transform this
into something called a regenerator,

88
00:06:22.820 --> 00:06:25.430
which we just don't even wanna deal with,
believe me.

