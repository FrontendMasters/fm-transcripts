WEBVTT

1
00:00:00.323 --> 00:00:02.694
What I want you to try to do
is you're gonna go ahead and

2
00:00:02.694 --> 00:00:05.028
take that UsersPage that
you're working on again.

3
00:00:05.028 --> 00:00:08.842
And this time, see what you can do on
that component to actually use the setup

4
00:00:08.842 --> 00:00:11.837
function to refactor at the bare minimum,
the fetch data.

5
00:00:11.837 --> 00:00:15.133
And then, if you have the time, feel free
to go ahead and practice using the ref,

6
00:00:15.133 --> 00:00:17.135
reactive, computed, or
whatever you prefer.

7
00:00:20.724 --> 00:00:23.258
All right, how did that feel for everyone?

8
00:00:23.258 --> 00:00:26.963
I know that we did some pairing here
in the room, but people online,

9
00:00:26.963 --> 00:00:30.680
tryna let me know how that experience
went, if you have questions.

10
00:00:30.680 --> 00:00:32.623
In the meantime, I'm gonna go ahead and

11
00:00:32.623 --> 00:00:35.952
start walking through the solution
to see how I would approach this.

12
00:00:35.952 --> 00:00:39.326
Okay, so let's go ahead and
dive into the code.

13
00:00:39.326 --> 00:00:42.919
As you can see here, what we wanna do is
we wanna migrate the stuff we've been

14
00:00:42.919 --> 00:00:46.362
doing, especially as far as the fetch
stuff, into our setup function.

15
00:00:46.362 --> 00:00:48.163
So let's go ahead and start doing that.

16
00:00:48.163 --> 00:00:49.789
First thing first, again,

17
00:00:49.789 --> 00:00:53.849
I always like to put my setup before
data as a reminder to myself that this

18
00:00:53.849 --> 00:00:57.791
is not going to actually be able to
access anything below it, right?

19
00:00:57.791 --> 00:01:01.238
It can go top down, but
there's nothing going bottom up.

20
00:01:01.238 --> 00:01:03.010
So let's do a couple things, let's see.

21
00:01:03.010 --> 00:01:05.814
All right, so this method here,
async functions,

22
00:01:05.814 --> 00:01:08.119
let's start actually by moving the data.

23
00:01:08.119 --> 00:01:10.581
The data here, I'm gonna go ahead and
use the reactive,

24
00:01:10.581 --> 00:01:14.144
since that's something that at least feels
a little bit more familiar to people.

25
00:01:14.144 --> 00:01:19.059
And I think when they're first
getting started with composition API.

26
00:01:19.059 --> 00:01:21.638
So we'll import reactive from Vue.

27
00:01:21.638 --> 00:01:27.172
And we'll create that state,
which is gonna be a reactive object.

28
00:01:27.172 --> 00:01:30.123
And inside of there,
I'm gonna have this thing called userList.

29
00:01:30.123 --> 00:01:32.340
And userLists will then be this array.

30
00:01:32.340 --> 00:01:36.423
And so this allows me to then
get rid of this data property.

31
00:01:36.423 --> 00:01:39.505
The only thing we need to do now
is actually return the state here.

32
00:01:39.505 --> 00:01:46.098
And then to show that this works, what we
can do is you can say this.state.userList.

33
00:01:46.098 --> 00:01:50.439
And then if everything should still work,
the only thing we have to change is here,

34
00:01:50.439 --> 00:01:52.433
state.userList, and we save that.

35
00:01:52.433 --> 00:01:55.997
Let's go and see, we refresh,
up, it's down, because why?

36
00:01:55.997 --> 00:01:58.727
Because there's no local dev running.

37
00:01:58.727 --> 00:02:03.118
Okay, there you go,
you can see everything's still working.

38
00:02:03.118 --> 00:02:06.427
All right, so
refactored step one, good to go.

39
00:02:06.427 --> 00:02:11.043
Next thing we need to do, the main thing
we wanna do, is dysfunction of methods.

40
00:02:11.043 --> 00:02:15.615
And so some of you caught on,
because you might be thinking, wait,

41
00:02:15.615 --> 00:02:19.318
is there a methods thing that
I need to import from Vue?

42
00:02:19.318 --> 00:02:24.018
And the answer is no, because when
we introduced methods earlier,

43
00:02:24.018 --> 00:02:25.590
remember what I said?

44
00:02:25.590 --> 00:02:29.429
Methods are really just JavaScript
functions that Vue has access to.

45
00:02:29.429 --> 00:02:32.370
So in other words,
there's nothing special about them,

46
00:02:32.370 --> 00:02:34.540
because they're JavaScript functions.

47
00:02:34.540 --> 00:02:39.104
So what we can do, we can take this and
we can copy this here, and

48
00:02:39.104 --> 00:02:43.690
basically say, this is an async
function called fetchUsers.

49
00:02:43.690 --> 00:02:46.947
Now, before we move on, though, there's
couple of things that's gonna break.

50
00:02:46.947 --> 00:02:50.202
One, we know for a fact that this
does not work anymore, because why?

51
00:02:50.202 --> 00:02:53.270
We're not in options API,
we're in composition API.

52
00:02:53.270 --> 00:02:57.001
So we have the state here, that's deleted.

53
00:02:57.001 --> 00:03:01.217
And then this is currently state.userList,
we'll equal that, and

54
00:03:01.217 --> 00:03:02.652
we have the async here.

55
00:03:02.652 --> 00:03:07.389
And so what we need to do is let's go
ahead and we also don't have, or actually,

56
00:03:07.389 --> 00:03:10.451
wait, there's a function there,
that's fine.

57
00:03:10.451 --> 00:03:13.311
And then, let's go and
start by returning it.

58
00:03:13.311 --> 00:03:18.302
We'll slowly refactor this, so we can
see it step by step, piece by piece.

59
00:03:18.302 --> 00:03:21.071
[SOUND] There's that.

60
00:03:21.071 --> 00:03:25.434
Now, we save this though, you'll notice
everything seems to still be working, and

61
00:03:25.434 --> 00:03:27.324
so we'll see that, hello, hello.

62
00:03:29.561 --> 00:03:33.320
And so here's the thing,
though, is that right now,

63
00:03:33.320 --> 00:03:37.350
fetchUsers has a very implicit
tie to our state right now.

64
00:03:37.350 --> 00:03:39.888
In other words, if we wanted to
fetchUsers in another context,

65
00:03:39.888 --> 00:03:42.381
we would then need to create
another function theoretically.

66
00:03:42.381 --> 00:03:45.165
But this is JavaScript,
this is programming, we don't want that,

67
00:03:45.165 --> 00:03:47.380
that's something that
wouldn't make a lot of sense.

68
00:03:47.380 --> 00:03:50.997
And so what you'd probably wanna do is
actually separate the state assignment

69
00:03:50.997 --> 00:03:52.486
here from the function itself.

70
00:03:52.486 --> 00:03:56.120
So in other words,
what we'd like to do is actually say,

71
00:03:56.120 --> 00:04:00.919
state.userList out here is equal to
what happens when we run fetchUsers.

72
00:04:00.919 --> 00:04:02.382
That's actually what we'd like to do.

73
00:04:02.382 --> 00:04:05.774
And so what we'd really want is to
basically kind of return the response that

74
00:04:05.774 --> 00:04:06.574
comes from this.

75
00:04:06.574 --> 00:04:09.219
So when you're looking at this, and you're
looking at the return, you might think,

76
00:04:09.219 --> 00:04:10.574
okay, I'm just gonna return the promise.

77
00:04:10.574 --> 00:04:14.583
Now, apparently when it comes to returning
promises inside of Vue, it gets a little

78
00:04:14.583 --> 00:04:17.800
bit tricky because then you have to
manage resolving the promise and

79
00:04:17.800 --> 00:04:18.715
that kinda stuff.

80
00:04:18.715 --> 00:04:22.448
And so at least for me, what I tried to do
actually is I will actually just create

81
00:04:22.448 --> 00:04:24.272
the response that's being awaited.

82
00:04:24.272 --> 00:04:28.714
So basically this const response, and
what I do is return the response directly.

83
00:04:28.714 --> 00:04:32.659
And that's what's being returned, rather
than returning the entire promise itself.

84
00:04:32.659 --> 00:04:36.187
And that's what should allow this
thing to assign itself to this.

85
00:04:36.187 --> 00:04:40.184
But before we finish, though, remember
that fetchUsers is an async function,

86
00:04:40.184 --> 00:04:41.139
which means what?

87
00:04:41.139 --> 00:04:42.821
We need the await keyword here.

88
00:04:42.821 --> 00:04:45.318
And if we need the await keyword here,
what does that mean?

89
00:04:45.318 --> 00:04:50.242
We also need the async key all
the way up here inside of setup.

90
00:04:50.242 --> 00:04:56.376
And then we save that, we get our
predictable yelling at us message.

91
00:04:56.376 --> 00:04:58.183
And the reason for that is because why?

92
00:04:58.183 --> 00:05:01.827
Because the parent is like, whoa, whoa,
whoa, you have this async function,

93
00:05:01.827 --> 00:05:04.079
it might be broken,
give me something to fall back on.

94
00:05:04.079 --> 00:05:05.868
So let's go and fix that.

95
00:05:05.868 --> 00:05:11.540
If you go inside of App.vue, inside a
C'est la Vue, we had this component here.

96
00:05:11.540 --> 00:05:16.534
And so what we're gonna do is we're
gonna wrap it in a suspense component,

97
00:05:16.534 --> 00:05:20.517
and then we have our template
with the v-slot of fallback.

98
00:05:20.517 --> 00:05:27.861
And then what we'll do here is then go,
data is loading safe.

99
00:05:27.861 --> 00:05:31.302
And if you actually saw the small blink,
it actually does do the data is loading,

100
00:05:31.302 --> 00:05:33.390
because Vue is actually waiting for
something.

101
00:05:33.390 --> 00:05:35.944
So, granted, again, for
your production level apps,

102
00:05:35.944 --> 00:05:39.317
you probably will want some sort of
nice loading page and whatnot for that.

103
00:05:39.317 --> 00:05:41.963
But for now,
we're just doing it with simple text.

104
00:05:41.963 --> 00:05:47.169
But now, if we take a look, it looks
like everything is working as expected.

105
00:05:47.169 --> 00:05:50.449
Now, the thing is though,
we're actually doing a double call here,

106
00:05:50.449 --> 00:05:51.344
if you realize it.

107
00:05:51.344 --> 00:05:53.859
In that we're returning
this fetchUsers method, but

108
00:05:53.859 --> 00:05:56.929
it's actually already being called
inside of your setup method.

109
00:05:56.929 --> 00:05:58.809
So really, we don't even need this here.

110
00:05:58.809 --> 00:06:02.668
So we can actually delete our
entire created life cycle hook.

111
00:06:02.668 --> 00:06:07.428
And what you have now here is
basically your entire user

112
00:06:07.428 --> 00:06:12.301
page using the composition
API within the options API.

113
00:06:12.301 --> 00:06:15.040
And everything is working as expected,
thankfully.

