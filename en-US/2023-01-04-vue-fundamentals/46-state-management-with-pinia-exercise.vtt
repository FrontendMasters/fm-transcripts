WEBVTT

1
00:00:00.000 --> 00:00:03.386
So, for this exercise we'd like you to do
is also get some hands on experience just

2
00:00:03.386 --> 00:00:04.576
like you do with the router.

3
00:00:04.576 --> 00:00:07.858
Go ahead and open up the Pinia docs for
reference because once again,

4
00:00:07.858 --> 00:00:10.348
the docs are a great resource for
helping to debug and

5
00:00:10.348 --> 00:00:13.309
learn more things about the library
as you continue using it.

6
00:00:13.309 --> 00:00:16.842
Then, go ahead and
install Pinia onto the cest-la-vue app and

7
00:00:16.842 --> 00:00:18.222
configure Vue to use it.

8
00:00:18.222 --> 00:00:21.389
Again, it should feel familiar based
on what we just did with Vue router.

9
00:00:21.389 --> 00:00:24.064
Go ahead and then create a stores folder,
and then go ahead and

10
00:00:24.064 --> 00:00:27.576
just create any kind of data store that
you think makes sense for cest-la-vue.

11
00:00:27.576 --> 00:00:32.660
Then once you create your first store,
try to add some state, getters or actions.

12
00:00:32.660 --> 00:00:37.820
And then finally go and call those
things inside of your components.

13
00:00:39.513 --> 00:00:43.704
All right, so as always, if you have
questions, for those watching online,

14
00:00:43.704 --> 00:00:45.937
please feel free to drop that in the chat.

15
00:00:45.937 --> 00:00:48.196
Let's go ahead and run through that.

16
00:00:48.196 --> 00:00:52.432
So, we're going to do this is
let's go ahead and restart and

17
00:00:52.432 --> 00:00:56.432
this time we're going to go
ahead to the cest-la-vue.

18
00:00:56.432 --> 00:01:00.131
And then we're going to install pinia,
that's the first thing we're gonna do.

19
00:01:00.131 --> 00:01:03.408
Once you have that then I can go ahead and
run dev.

20
00:01:03.408 --> 00:01:06.067
I can have that over here, which is great.

21
00:01:06.067 --> 00:01:08.370
Okay, that's working now.

22
00:01:08.370 --> 00:01:12.622
So, once you have Pina installed, what
you gotta do is you gotta configure it.

23
00:01:12.622 --> 00:01:14.774
So, inside of, oops!

24
00:01:14.774 --> 00:01:18.319
I'm in the wrong folder,
inside of cest-la-vue for main.js,

25
00:01:18.319 --> 00:01:21.562
we have here, this is where
we're creating the Vue router.

26
00:01:21.562 --> 00:01:27.896
Let's then go ahead and find createPinia
app functionality from pinia.

27
00:01:27.896 --> 00:01:30.478
So, as you can verify that,
you can always check the autocomplete.

28
00:01:30.478 --> 00:01:33.763
I usually do autocomplete
cuz it just prevents the one

29
00:01:33.763 --> 00:01:38.293
off typing errors that I have,
which you've seen me do on this workshop.

30
00:01:38.293 --> 00:01:39.820
So, once we have that.

31
00:01:39.820 --> 00:01:41.830
Great we can then.

32
00:01:41.830 --> 00:01:46.212
Okay, we have a bunch of router stuff
here let me just collapse that and

33
00:01:46.212 --> 00:01:48.683
then const pinia = createPinia().

34
00:01:48.683 --> 00:01:54.092
And we're gonna do app.use(pinia).

35
00:01:54.092 --> 00:01:58.686
All right, so, now that we have
that enabled we can go ahead and

36
00:01:58.686 --> 00:02:00.516
create our first store.

37
00:02:00.516 --> 00:02:04.658
So, what we're gonna do here, inside of
our components, it looks like, honestly,

38
00:02:04.658 --> 00:02:06.441
the user store makes the most sense.

39
00:02:06.441 --> 00:02:10.607
So, we can go ahead and do userStore.js.

40
00:02:10.607 --> 00:02:15.837
And so, we're gonna go ahead and
import definePinia from pinia.

41
00:02:15.837 --> 00:02:21.949
And then we're gonna export our store,
which is gonna be a const of useUserStore,

42
00:02:21.949 --> 00:02:27.557
and we'll call the define,
not definePinia, my mistake, defineStore.

43
00:02:27.557 --> 00:02:32.702
We've already defined pinia at the app
level now we're defining a specific store.

44
00:02:32.702 --> 00:02:34.034
The store gets what?

45
00:02:34.034 --> 00:02:34.862
It gets two arguments.

46
00:02:34.862 --> 00:02:36.365
One, what are we going to call the store?

47
00:02:36.365 --> 00:02:37.804
Again, keep it simple.

48
00:02:37.804 --> 00:02:39.522
I like to keep it whatever
the file name is.

49
00:02:39.522 --> 00:02:42.555
So, it's userStore and
then we get an option of what?

50
00:02:42.555 --> 00:02:46.635
We get the state which is
a function that returns an object.

51
00:02:46.635 --> 00:02:50.382
We get the getters, and
we have the actions.

52
00:02:50.382 --> 00:02:51.267
Okay.

53
00:02:51.267 --> 00:02:52.926
So, what we can do,

54
00:02:52.926 --> 00:02:58.615
if we take a look at our code is inside
of our views inside of UserPage.

55
00:02:58.615 --> 00:03:03.018
You can see that we're doing quite
a bit here as far as the data goes.

56
00:03:03.018 --> 00:03:06.428
Now, we're importing it currently from
composables, so let's migrate that over,

57
00:03:06.428 --> 00:03:08.543
that's what we're gonna do
in this particular one.

58
00:03:08.543 --> 00:03:11.594
So, inside of composables you'll
see that userList is just a ref.

59
00:03:11.594 --> 00:03:16.761
Well, if that's the case, all we got
to do here is to show you side by

60
00:03:16.761 --> 00:03:22.037
side in our userStore is add a userList
and then just make it an array.

61
00:03:22.037 --> 00:03:27.341
And when we save that,
now when we go inside of our user page,

62
00:03:27.341 --> 00:03:31.501
rather than importing
the user list like this,

63
00:03:31.501 --> 00:03:37.429
what we're gonna do is we're gonna
import the useUserStore from,

64
00:03:37.429 --> 00:03:43.266
and then this should be from
stores/UserStore, just like that.

65
00:03:43.266 --> 00:03:45.212
And so again, let's just double check.

66
00:03:45.212 --> 00:03:46.611
I didn't get the one.

67
00:03:46.611 --> 00:03:48.182
Wait, nope.

68
00:03:48.182 --> 00:03:52.374
Export const useUserStore.

69
00:03:52.374 --> 00:03:53.531
That should be the right one.

70
00:03:53.531 --> 00:03:56.203
We'll find out just momentarily, okay.

71
00:03:56.203 --> 00:03:58.274
So, then we will set up the store by what?

72
00:03:58.274 --> 00:03:59.573
By calling our function.

73
00:03:59.573 --> 00:04:05.540
So, const userStore = useUserStore,
and then we'll go ahead and save that.

74
00:04:05.540 --> 00:04:06.442
And that looks good.

75
00:04:06.442 --> 00:04:09.037
Okay good, now it's actually being
fetched correctly, that's good.

76
00:04:09.037 --> 00:04:12.384
So, now that we have the userStore,
we can get rid of this .value.

77
00:04:12.384 --> 00:04:17.460
No longer that, it's just
userStore.userList, just like that.

78
00:04:17.460 --> 00:04:18.396
So, let's see if that actually worked.

79
00:04:18.396 --> 00:04:24.081
If we refresh, go to the user page,
we'll see something is not working.

80
00:04:24.081 --> 00:04:24.806
Okay, why?

81
00:04:24.806 --> 00:04:26.537
Because guess what?

82
00:04:26.537 --> 00:04:29.969
We're looking at userStore.userList but
inside of our template,

83
00:04:29.969 --> 00:04:33.117
you'll see that we're only
referring to userList directly.

84
00:04:33.117 --> 00:04:37.044
So again, one of the things I like about
the modular way is that it's very clear

85
00:04:37.044 --> 00:04:38.899
about where things are coming from.

86
00:04:38.899 --> 00:04:42.126
Now, for those who really care about
destructuring making your code shorter,

87
00:04:42.126 --> 00:04:43.098
there are ways to do it.

88
00:04:43.098 --> 00:04:46.809
We're not gonna cover it right now because
I do think using it out of the box like

89
00:04:46.809 --> 00:04:50.197
this has its advantages for
being declarative and easy to understand.

90
00:04:50.197 --> 00:04:54.516
So, now that we save this, go ahead and
take a look how that looks.

91
00:04:54.516 --> 00:04:58.069
And there we go,
everything is showing up as expected.

92
00:04:58.069 --> 00:05:00.822
Now, the other things we can possibly
do with this is we wanna go ahead and

93
00:05:00.822 --> 00:05:02.368
practice getting the getters, right?

94
00:05:02.368 --> 00:05:05.457
So, we were doing that on the HomePage,
right here.

95
00:05:05.457 --> 00:05:10.976
So, we go on the App page, we have
the ability to, wait, HomePage is here.

96
00:05:10.976 --> 00:05:13.992
We were looking at something
called shortUserList.

97
00:05:13.992 --> 00:05:17.367
Well, all we can do instead is
actually take this part and we can

98
00:05:17.367 --> 00:05:22.018
shorten the code by saying, okay we gonna
take this calculation that we've done, and

99
00:05:22.018 --> 00:05:24.013
we're going to go to the userStore.

100
00:05:24.013 --> 00:05:28.933
And inside of our getters when
they get a shortUserList, and

101
00:05:28.933 --> 00:05:33.949
we can use an arrow function for
this, we'll get the state and

102
00:05:33.949 --> 00:05:39.181
it'll return state.userList,
and we don't need the value.

103
00:05:39.181 --> 00:05:42.279
And this is the equivalent,
of our computed property.

104
00:05:42.279 --> 00:05:46.387
Now that we have this in here,
we can go back over to our homepage,

105
00:05:46.387 --> 00:05:47.751
which is right here.

106
00:05:47.751 --> 00:05:50.801
And we can actually now just
remove this in its entirety.

107
00:05:50.801 --> 00:05:53.779
And we can then say instead
of import userList,

108
00:05:53.779 --> 00:05:56.690
we're actually gonna import useUserStore.

109
00:05:56.690 --> 00:05:59.251
There you go,
it's auto completed, fantastic.

110
00:05:59.251 --> 00:06:03.186
const userStore = useUserStore(),
we are calling that.

111
00:06:03.186 --> 00:06:07.777
And now that this is available to us,
we can then say,

112
00:06:07.777 --> 00:06:11.050
userStore.shortUserList, save.

113
00:06:11.050 --> 00:06:12.902
So, now we go back to the home.

114
00:06:12.902 --> 00:06:13.732
Oops, there we go, User Home.

115
00:06:13.732 --> 00:06:18.285
There we go, we have our shortlist.

116
00:06:18.285 --> 00:06:19.880
It's all kept in one place.

117
00:06:19.880 --> 00:06:24.538
Now one last thing before we wrap this up
is that we need to actually verify how do

118
00:06:24.538 --> 00:06:25.959
we do actions, right?

119
00:06:25.959 --> 00:06:28.890
And so there was a great question earlier
regarding the fact that if you look at

120
00:06:28.890 --> 00:06:31.595
userStore, you might be tempted to
actually make this part some sort of

121
00:06:31.595 --> 00:06:33.152
asynchronous functionality, right?

122
00:06:33.152 --> 00:06:35.897
Like, I wanna fetch this,
return it into this value.

123
00:06:35.897 --> 00:06:39.786
But when it comes to setting up state and
managing that with composables,

124
00:06:39.786 --> 00:06:44.128
my recommendation for doing that is to
always start with the initial empty state.

125
00:06:44.128 --> 00:06:45.255
That's where that's just start.

126
00:06:45.255 --> 00:06:48.180
And then later on when you're writing
code, you'll have that or go ahead and

127
00:06:48.180 --> 00:06:49.218
override and populate it.

128
00:06:49.218 --> 00:06:52.043
But for now, always try to
avoid the async stuff in here.

129
00:06:52.043 --> 00:06:55.504
Keep that just to the standard data types.

130
00:06:55.504 --> 00:06:58.414
However, what we can do though
is inside of our actions,

131
00:06:58.414 --> 00:07:01.152
this is where we can write
that fetch functionality.

132
00:07:01.152 --> 00:07:02.811
So, where is that
currently living right now?

133
00:07:02.811 --> 00:07:06.989
My guess is it's on UserPage and
sure enough look at this,

134
00:07:06.989 --> 00:07:09.137
async function fetch users.

135
00:07:09.137 --> 00:07:14.352
Let's just steal that entire thing away
because it doesn't need to be here.

136
00:07:14.352 --> 00:07:19.362
So, let's grab that over into
our userStore and drop that in.

137
00:07:19.362 --> 00:07:22.282
Now, this current syntax won't work, why?

138
00:07:22.282 --> 00:07:26.433
Because this is async function when
you're defining it outside of an object.

139
00:07:26.433 --> 00:07:31.903
So, we need to do is actually make fetch
users an async function like this and

140
00:07:31.903 --> 00:07:33.789
then let me try to save it.

141
00:07:33.789 --> 00:07:36.908
It'll format itself a little bit better,
which is great.

142
00:07:36.908 --> 00:07:39.210
And then there we go.

143
00:07:39.210 --> 00:07:42.213
And then you can see we get the fetch
here, we get this response, and

144
00:07:42.213 --> 00:07:43.383
then we get the response.

145
00:07:43.383 --> 00:07:48.063
But, rather than just return it in this
particular case, because in this scenario,

146
00:07:48.063 --> 00:07:51.319
we're saying that this function
is specific to the store.

147
00:07:51.319 --> 00:07:52.100
Actually, you know what?

148
00:07:52.100 --> 00:07:52.680
Take that back.

149
00:07:52.680 --> 00:07:54.470
We're gonna leave it like this.

150
00:07:54.470 --> 00:07:56.567
I'll show you the two ways on why.

151
00:07:56.567 --> 00:07:59.800
So, now we have the fetch users here,
how are we gonna use it?

152
00:07:59.800 --> 00:08:03.689
Well, inside of our UserPage,
we've gone ahead and we've said, okay,

153
00:08:03.689 --> 00:08:06.290
we have the user store, so what can we do?

154
00:08:06.290 --> 00:08:15.860
We can do userStore.fetchUsers.

155
00:08:15.860 --> 00:08:20.737
So, that should do the trick,
user.userList = await

156
00:08:20.737 --> 00:08:24.800
userStore.ser stores fetch users, great.

157
00:08:24.800 --> 00:08:31.720
You'll see now that when we come over and
refresh, everything is working still.

158
00:08:33.030 --> 00:08:36.165
Now, there's also value in
case that you're like, well,

159
00:08:36.165 --> 00:08:38.280
I don't wanna have to manually fetch it.

160
00:08:38.280 --> 00:08:41.510
I wanna just whenever this is called,
go ahead and update this.

161
00:08:41.510 --> 00:08:43.719
So, an alternative model,
there's no right or wrong,

162
00:08:43.719 --> 00:08:45.800
it just depends on what your use case is.

163
00:08:45.800 --> 00:08:50.926
If you go inside of our UserPage,
rather than having to call userList and

164
00:08:50.926 --> 00:08:57.460
assign it, we could do theoretically, if
we just wanna call userStore.fetchUsers.

165
00:08:57.460 --> 00:08:58.020
That's all we wanna do.

166
00:08:58.020 --> 00:09:02.120
But if we do that,
nothing's gonna happen, why?

167
00:09:02.120 --> 00:09:08.522
Because currently inside of our function,
all we're doing is actually running,

168
00:09:08.522 --> 00:09:13.423
the, not that one userStore, great.

169
00:09:13.423 --> 00:09:15.080
You see here,
we're only returning the response.

170
00:09:15.080 --> 00:09:16.480
We're actually not doing much with it.

171
00:09:16.480 --> 00:09:20.500
So, what we need to do instead is
we need to refer to the userList.

172
00:09:20.500 --> 00:09:24.501
And so, unlike the getters,
which gets the state in an arrow function,

173
00:09:24.501 --> 00:09:28.306
because the actions really do require
the entire context of the app,

174
00:09:28.306 --> 00:09:31.208
this is where the this
context comes back into play.

175
00:09:31.208 --> 00:09:34.220
So, we can go this.userList = response.

176
00:09:36.490 --> 00:09:40.760
So, now I want to refresh that you'll
see everything appears, as we expect.

177
00:09:40.760 --> 00:09:44.075
And this is now, again it's tightly
coupled but at the same time, this might

178
00:09:44.075 --> 00:09:47.240
be okay in this particular instance,
because this is the global source.

179
00:09:47.240 --> 00:09:49.230
So, that's actually
probably what we wanna do.

180
00:09:49.230 --> 00:09:52.016
When we fetch users we want
the entire global state to update.

181
00:09:52.016 --> 00:09:56.504
So, basically I would say if you're
writing or composing your functionality in

182
00:09:56.504 --> 00:09:59.808
this way, I think it does make
sense that tightly coupled.

183
00:09:59.808 --> 00:10:02.822
In the event that fetch users has
nothing to do with this and that's for

184
00:10:02.822 --> 00:10:05.442
whatever reason,
it's a separate type of functionality.

185
00:10:05.442 --> 00:10:09.197
That's where it might make sense as a
composable that you import into your store

186
00:10:09.197 --> 00:10:12.841
that does something entirely separate
that then you can, better break up and

187
00:10:12.841 --> 00:10:13.815
compose your code.

188
00:10:13.815 --> 00:10:17.476
So, we're at the tail end of all this.

189
00:10:17.476 --> 00:10:21.044
Obviously, there's a lot more to
cover as there's an entire world and

190
00:10:21.044 --> 00:10:22.184
ecosystem out there.

191
00:10:22.184 --> 00:10:25.652
So, some of the questions that have come
up during this include things like what

192
00:10:25.652 --> 00:10:28.260
about things like design systems,
component libraries?

193
00:10:28.260 --> 00:10:31.385
Well, you're just in luck
because recently, Vuetify,

194
00:10:31.385 --> 00:10:33.171
which is the official library for

195
00:10:33.171 --> 00:10:37.407
doing view components with material
design that has actually been released.

196
00:10:37.407 --> 00:10:41.334
So, if you go to veutify js,

197
00:10:41.334 --> 00:10:45.110
I want to say .org, nope.

198
00:10:45.110 --> 00:10:48.130
Ooh dot com, I messed up.

199
00:10:48.130 --> 00:10:52.131
This is, I think the most popular
component library that the Vue ecosystem

200
00:10:52.131 --> 00:10:55.942
has when it comes to a really well
maintained team that helps to make sure

201
00:10:55.942 --> 00:10:57.678
everything's kept up to date.

202
00:10:57.678 --> 00:11:00.902
As you can see here, they have wonderful
documentation that if you come in here you

203
00:11:00.902 --> 00:11:03.068
can actually take a look at
the different components.

204
00:11:03.068 --> 00:11:06.772
So, you know earlier I was showing
someone the tables down here.

205
00:11:06.772 --> 00:11:10.133
So, you could take a look at something
like a simple data table that

206
00:11:10.133 --> 00:11:11.705
automatically takes in data.

207
00:11:11.705 --> 00:11:15.280
It looks beautiful, you can sort it
without doing any additional work.

208
00:11:15.280 --> 00:11:18.458
This is the kind of thing that you might
wanna check out if you don't have time to

209
00:11:18.458 --> 00:11:21.160
build your own design library and
that kind of thing.

210
00:11:21.160 --> 00:11:23.250
So, Vuetify highly recommended
checking that out.

