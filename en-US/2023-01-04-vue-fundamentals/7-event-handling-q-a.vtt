WEBVTT

1
00:00:00.110 --> 00:00:01.784
I wanna cover two questions that came up.

2
00:00:01.784 --> 00:00:06.350
The first of which is around the strategy
of actually tracking the increment amount.

3
00:00:06.350 --> 00:00:09.099
So as we can see here what we're
doing right now is using Vue to track

4
00:00:09.099 --> 00:00:11.910
the increment amount using
this v-model directive.

5
00:00:11.910 --> 00:00:16.520
So down here we can see inside of this
reactive data we have it tracked in here.

6
00:00:16.520 --> 00:00:18.600
And the question is,
why do we even do this?

7
00:00:18.600 --> 00:00:23.418
Which is actually a good question,
because theoretically, if we go ahead and

8
00:00:23.418 --> 00:00:24.590
comment this out.

9
00:00:24.590 --> 00:00:25.863
And we go up here and

10
00:00:25.863 --> 00:00:30.647
we don't even attach any Vue powers
to this particular input element.

11
00:00:30.647 --> 00:00:33.104
Technically the text element
knows what it's doing, right?

12
00:00:33.104 --> 00:00:37.499
I should have chose a smaller number,
it's fine.

13
00:00:37.499 --> 00:00:40.280
It knows that it has 123 inside already.

14
00:00:40.280 --> 00:00:43.140
Why are we using Vue to also check it?

15
00:00:43.140 --> 00:00:43.979
So in other words,

16
00:00:43.979 --> 00:00:47.820
especially before sort of reactive
frameworks became really a big thing.

17
00:00:47.820 --> 00:00:51.541
A common strategy for this was that every
time you wanted to increment the count.

18
00:00:51.541 --> 00:00:55.881
We would basically go and check the DOM to
see what the source of truth is, right?

19
00:00:55.881 --> 00:00:58.479
And so a completely valid approach and
one that we use for many,

20
00:00:58.479 --> 00:01:00.540
many years in Web development.

21
00:01:00.540 --> 00:01:03.972
But as websites and
applications have gotten more complex,

22
00:01:03.972 --> 00:01:06.944
the problem is that if,
we were to have some method.

23
00:01:06.944 --> 00:01:11.257
Again, call it checkInputForValue
that's being run right here.

24
00:01:11.257 --> 00:01:14.725
Again, this is pseudocode, just in case
anyone's afraid they missed anything.

25
00:01:18.036 --> 00:01:21.630
The reason this ends up becoming a problem
is because there ends up being kind of

26
00:01:21.630 --> 00:01:23.890
an inefficient performance bottleneck.

27
00:01:23.890 --> 00:01:26.627
In the sense that now every time
someone's running this increment count,

28
00:01:26.627 --> 00:01:27.849
they're going to check the DOM.

29
00:01:27.849 --> 00:01:31.180
Regardless of the fact that
nothing has actually changed.

30
00:01:31.180 --> 00:01:33.924
And so that's what a lot of
reactivity system has provided for

31
00:01:33.924 --> 00:01:35.996
us from a developer
experience convenience.

32
00:01:35.996 --> 00:01:39.083
And also abstracting some of those
performance concerns away is because

33
00:01:39.083 --> 00:01:40.764
again, for this particular example.

34
00:01:40.764 --> 00:01:43.680
The performance difference is
probably negligible, to be honest,

35
00:01:43.680 --> 00:01:45.840
to just check an input element real quick.

36
00:01:45.840 --> 00:01:48.230
If it's a number,
pass it back and then run it.

37
00:01:48.230 --> 00:01:50.934
But we can envision when you have
complex data visualizations,

38
00:01:50.934 --> 00:01:53.197
when you have a lot of things
working with each other.

39
00:01:53.197 --> 00:01:56.782
If you have to check the DOM every single
time for every single element that has

40
00:01:56.782 --> 00:01:59.776
that source of truth,
you're gonna end up with some conflict.

41
00:01:59.776 --> 00:02:03.472
And then it'll probably be slower because
once again if those things haven't

42
00:02:03.472 --> 00:02:06.341
changed there's no reason to
even check that to begin with.

43
00:02:06.341 --> 00:02:10.393
So, as a result of that, this is why in
some of the more modern frameworks we have

44
00:02:10.393 --> 00:02:13.980
the ability to cache things and
have these reactivity tracking.

45
00:02:13.980 --> 00:02:18.522
And that's where the advantage of actually
making sure that the tracks that reactive

46
00:02:18.522 --> 00:02:20.790
data makes our lives a lot easier.

47
00:02:20.790 --> 00:02:23.810
So great question again for that one.

48
00:02:23.810 --> 00:02:29.159
Okay, so let's go and reset this part real
quick, so we don't ruin the code 123.

49
00:02:29.159 --> 00:02:34.239
And then we had the v-model here.

50
00:02:34.239 --> 00:02:38.103
IncrementAmount, let me save that,
make sure this works.

51
00:02:38.103 --> 00:02:41.174
This does great, okay.

52
00:02:41.174 --> 00:02:45.809
In addition, there was a second question
here in regards to what happens when you

53
00:02:45.809 --> 00:02:48.616
actually want to pass
an argument to the method.

54
00:02:48.616 --> 00:02:52.866
So in this particular case, what if,
for example, an IncrementCount,

55
00:02:52.866 --> 00:02:57.060
we wanted to pass it our own variables,
and in this case let's say 10.

56
00:02:57.060 --> 00:03:00.560
And then for whatever reason,
again, we're spitballing here.

57
00:03:00.560 --> 00:03:05.316
An increment count we're gonna check
if the argument is greater than what's

58
00:03:05.316 --> 00:03:07.888
inside of this, that increment amount.

59
00:03:07.888 --> 00:03:11.585
Then we'll basically use the argument
instead of the reactive variable.

60
00:03:11.585 --> 00:03:14.865
Again, a little bit convoluted, but
we're kind of going on the fly here.

61
00:03:14.865 --> 00:03:19.532
So in increment count,
I mentioned before that typically when

62
00:03:19.532 --> 00:03:24.872
something's being run,
it's by default pass an event object.

63
00:03:24.872 --> 00:03:27.718
So once again, to show that this works,
let me just go ahead and

64
00:03:27.718 --> 00:03:30.262
log(event) real quick and
then remove the argument.

65
00:03:30.262 --> 00:03:36.122
Save, refresh, Console, you can see
the pointer event is being registered.

66
00:03:36.122 --> 00:03:43.060
However, if I add that 10 here,
refresh, you'll see 10 is being passed.

67
00:03:43.060 --> 00:03:45.482
And that's because what
Vue does is it goes, okay,

68
00:03:45.482 --> 00:03:48.686
at this point I don't know how many
arguments you're going to pass.

69
00:03:48.686 --> 00:03:51.970
Cuz you could pass a bunch of
different ones if you wanted to.

70
00:03:51.970 --> 00:03:56.967
And so rather than sort of force you to
remember that the event object is there.

71
00:03:56.967 --> 00:04:00.198
The default event object that's being
passed to you basically gets pushed

72
00:04:00.198 --> 00:04:00.718
to the end.

73
00:04:00.718 --> 00:04:05.302
So if we still wanted to access the event
object in this regard, we would say for

74
00:04:05.302 --> 00:04:08.921
example, now this is not actually event,
it's newAmount.

75
00:04:08.921 --> 00:04:12.890
And then we also have the event object
that's being attached at the end.

76
00:04:12.890 --> 00:04:15.658
So once again, just to make sure that
this actually works as intended.

77
00:04:15.658 --> 00:04:19.447
So when it comes to how have
you handled that default event.

78
00:04:19.447 --> 00:04:24.001
Because it cannot predict where
the default event needs to be

79
00:04:24.001 --> 00:04:27.851
brought in basically,
you explicitly define it.

80
00:04:27.851 --> 00:04:32.830
So you can see here $event that passes the
standard JavaScript event to the function.

81
00:04:32.830 --> 00:04:36.079
And that way in case you have any sort
of funky things going on, it's very,

82
00:04:36.079 --> 00:04:38.120
very clear what you're looking for.

83
00:04:38.120 --> 00:04:42.821
The other thing I wanted to show with
this as well in the docs is that, again,

84
00:04:42.821 --> 00:04:45.107
I'm not a huge fan of inline events.

85
00:04:45.107 --> 00:04:48.170
But I just want you to know it is
possible, you can inline the event

86
00:04:48.170 --> 00:04:50.972
directly there and
just actually run the thing if you want.

87
00:04:50.972 --> 00:04:56.102
But generally speaking, I find that it's a
lot cleaner to just have the method there.

88
00:04:56.102 --> 00:05:00.205
Because again, HTML is in my
mind to be readable for users.

89
00:05:00.205 --> 00:05:00.997
And then the logic and

90
00:05:00.997 --> 00:05:04.170
all that stuff we should abstract that
away as much as humanly possible.

91
00:05:04.170 --> 00:05:06.459
Because what it does is it
lowers the barrier of entry for

92
00:05:06.459 --> 00:05:08.322
those who might want to come and
contribute.

93
00:05:08.322 --> 00:05:11.942
Particularly if you have designers on your
team who are have frontend abilities, but

94
00:05:11.942 --> 00:05:14.062
night might not be that
comfortable JavaScript.

95
00:05:14.062 --> 00:05:15.378
By abstracting that stuff away,

96
00:05:15.378 --> 00:05:18.490
it just makes the code a lot
more approachable for them.

97
00:05:18.490 --> 00:05:22.250
So the $event is the answer for that.

98
00:05:22.250 --> 00:05:29.585
So just to show that inside of the code
actually, so that we have consistency.

99
00:05:29.585 --> 00:05:35.623
Here again, this is the event but
it is not passed by default.

100
00:05:35.623 --> 00:05:40.310
We need to go inside of here and
we need to say $event.

101
00:05:41.790 --> 00:05:43.546
Now, when we increment, there we go.

102
00:05:43.546 --> 00:05:46.100
We have our pointer and
we have our account.

103
00:05:48.170 --> 00:05:49.971
All right, question?

104
00:05:49.971 --> 00:05:53.575
&gt;&gt; So what's the difference between
the @click and the v-on:click.

105
00:05:53.575 --> 00:05:57.046
@click is that just an HTML5 attribute,
right?

106
00:05:57.046 --> 00:06:01.580
&gt;&gt; Okay, good question, no,
it actually segues really well.

107
00:06:01.580 --> 00:06:06.391
So something you'll notice here is that
right now we're doing this v-on and

108
00:06:06.391 --> 00:06:07.066
v-bind.

109
00:06:07.066 --> 00:06:11.560
Where is my v-bind,
v-bind is gone in this particular case.

110
00:06:11.560 --> 00:06:16.507
Okay, that's fine, we interact with
elements a lot as far as interactivity and

111
00:06:16.507 --> 00:06:17.320
events.

112
00:06:17.320 --> 00:06:20.951
So rather than forcing you to type v-on
all the time, there is a shorthand,

113
00:06:20.951 --> 00:06:22.100
which is the @ symbol.

114
00:06:23.200 --> 00:06:24.460
And so if you shortcut that,

115
00:06:24.460 --> 00:06:27.517
that'll basically do exactly what
you expect in terms of the v-on.

116
00:06:27.517 --> 00:06:31.143
But otherwise it's a syntactic sugar
to basically say you don't have to type

117
00:06:31.143 --> 00:06:33.052
those 12345 characters anymore.

118
00:06:33.052 --> 00:06:37.411
Just do @, which honestly, I think is a
fairly intuitive shortcut when it comes to

119
00:06:37.411 --> 00:06:40.790
saying yes @click do this thing @keyup,
do this thing, etc.

120
00:06:42.710 --> 00:06:47.327
And so I mentioned v-bind and just for
the sake of showing that one,

121
00:06:47.327 --> 00:06:51.060
I'll just do a data attribute
called increment-by.

122
00:06:51.060 --> 00:06:54.682
Cuz sometimes you're rendering
stuff to the server or

123
00:06:54.682 --> 00:06:57.210
some other app needs something here.

124
00:06:57.210 --> 00:07:01.347
And let's say you wanna render
incrementAmount to this p element.

125
00:07:01.347 --> 00:07:07.230
And so if you look at this p element
right here, did I do the wrong one?

126
00:07:07.230 --> 00:07:10.835
I didn't refresh, that's why.

127
00:07:11.918 --> 00:07:12.740
Boom, okay,

128
00:07:12.740 --> 00:07:17.320
you see that the attribute data
increment-by is there available for you.

129
00:07:17.320 --> 00:07:22.160
But once again, we need it to be bound and
I said before that you could do v-bind.

130
00:07:22.160 --> 00:07:24.768
And that will go ahead and
change that to actually say, yes,

131
00:07:24.768 --> 00:07:27.230
the increment-by we're looking at is 8.

132
00:07:27.230 --> 00:07:30.742
But again, dynamically binding attributes,
very, very common.

133
00:07:30.742 --> 00:07:33.793
So what can you do instead,
you can just delete v-bind and

134
00:07:33.793 --> 00:07:36.920
just prefix your attribute
with the : another shorthand.

135
00:07:38.540 --> 00:07:40.542
Right or wrong way,
there's no right or wrong way.

136
00:07:40.542 --> 00:07:43.648
Most people end up eventually
getting used to the convention.

137
00:07:43.648 --> 00:07:45.181
So you see that a lot in code bases but

138
00:07:45.181 --> 00:07:47.800
otherwise it's up to you on how
you want to write your total.

