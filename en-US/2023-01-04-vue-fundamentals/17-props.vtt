WEBVTT

1
00:00:00.140 --> 00:00:02.894
The question is, how do we pass
data down to our components?

2
00:00:02.894 --> 00:00:06.436
And so this is where we talk about
the idea, and it's called props,

3
00:00:06.436 --> 00:00:08.377
which is shorthand for properties.

4
00:00:08.377 --> 00:00:11.822
And the reason why I like the concept of
props a lot is because if you think about

5
00:00:11.822 --> 00:00:14.748
it, they're really just data
attributes on your HTML element.

6
00:00:14.748 --> 00:00:18.246
But it sounds really fancy when you say
props, but really it's just, you're

7
00:00:18.246 --> 00:00:21.908
passing an attribute a value, and then
that component can access the attribute.

8
00:00:21.908 --> 00:00:22.893
That's really what it is.

9
00:00:22.893 --> 00:00:25.244
So I think of props as custom attributes.

10
00:00:25.244 --> 00:00:26.759
Well, what do we need?

11
00:00:26.759 --> 00:00:27.647
We need the character list.

12
00:00:27.647 --> 00:00:31.768
So for now,
I'm gonna add a prop called characters,

13
00:00:31.768 --> 00:00:35.898
and this is gonna be passing
down our characterList.

14
00:00:35.898 --> 00:00:40.393
So then I can go ahead and bind it to
character lists like this, and then,

15
00:00:40.393 --> 00:00:42.984
does anyone know what I'm missing here?

16
00:00:42.984 --> 00:00:44.261
&gt;&gt; Colon.

17
00:00:44.261 --> 00:00:46.508
&gt;&gt; Colon, yep, cuz I need to
v-bind this to make it dynamic.

18
00:00:46.508 --> 00:00:48.931
So I'm gonna just do the shorthand for
colon.

19
00:00:48.931 --> 00:00:52.299
But that's not good enough though,
because after all,

20
00:00:52.299 --> 00:00:54.978
what we just did was we
just passed it in data.

21
00:00:54.978 --> 00:00:58.966
But one of the things I really like
about Vue, it's not Vue-specific, but

22
00:00:58.966 --> 00:01:03.078
I did like this when I started learning
about it, is that it's really all about

23
00:01:03.078 --> 00:01:07.028
trying to document your components and
making it easier for people to use.

24
00:01:07.028 --> 00:01:08.305
So inside of your options,

25
00:01:08.305 --> 00:01:11.648
you have the ability to define what
props you're going to get, right?

26
00:01:11.648 --> 00:01:13.659
So actually, before I do the object one,

27
00:01:13.659 --> 00:01:17.004
the simplest way to define your props
is through an array of strings.

28
00:01:17.004 --> 00:01:20.617
So I could just be like characters,
like that, and

29
00:01:20.617 --> 00:01:23.991
then you can see here,
let me save that, okay?

30
00:01:23.991 --> 00:01:27.501
What this means now is that
if I do this.characters,

31
00:01:27.501 --> 00:01:32.183
Vue will know this character's
reference refers to this prop up here.

32
00:01:32.183 --> 00:01:33.789
And so if I save this now and

33
00:01:33.789 --> 00:01:37.811
refresh, you'll notice our
statistics suddenly works again.

34
00:01:37.811 --> 00:01:42.172
Now, the thing is though, I only show
you this because in case you see this in

35
00:01:42.172 --> 00:01:44.899
the wild, this is code smell,
because again,

36
00:01:44.899 --> 00:01:49.627
characters as a string doesn't tell you
very much about what you expect as a prop.

37
00:01:49.627 --> 00:01:53.095
If you're interested in enterprise level,
patterns, and that kinda stuff,

38
00:01:53.095 --> 00:01:56.373
be sure to check out the production
grade view that I've recorded before.

39
00:01:56.373 --> 00:01:59.820
And so that covers a lot of the different
patterns that you'll see in

40
00:01:59.820 --> 00:02:03.950
enterprise apps, and so this is kind of
a snippet of something that I mentioned.

41
00:02:03.950 --> 00:02:07.229
Okay, so when it comes to props,
I recommend defining it via object, why?

42
00:02:07.229 --> 00:02:09.560
Because what we can do is four characters,

43
00:02:09.560 --> 00:02:13.334
we can do things like define what
kind of type that we're expecting.

44
00:02:13.334 --> 00:02:16.216
And again, this is not type
in TypeScript perspective,

45
00:02:16.216 --> 00:02:19.051
this is more of a runtime check,
like Vue helps you out.

46
00:02:19.051 --> 00:02:21.983
When you pass something funny down,
it'll just kinda highlight, hey,

47
00:02:21.983 --> 00:02:23.129
you told me you wanted this?

48
00:02:23.129 --> 00:02:24.720
Why is it something different?

49
00:02:24.720 --> 00:02:26.857
So in this case,
I know this is gonna be an array.

50
00:02:26.857 --> 00:02:30.034
More importantly,
I can say this is a required property.

51
00:02:30.034 --> 00:02:36.441
Or I could say, I could also define
a default property on it as well.

52
00:02:36.441 --> 00:02:37.801
But for this particular case,

53
00:02:37.801 --> 00:02:40.848
all we need to worry about is the fact
that it's a required property.

54
00:02:40.848 --> 00:02:44.974
And that's important because what you're
doing here is basically self-documenting

55
00:02:44.974 --> 00:02:48.443
the component so that people in
the future can actually use it correctly.

56
00:02:48.443 --> 00:02:52.968
And so when I save this here,
you see that we're refreshed.

57
00:02:52.968 --> 00:02:53.636
This is good.

58
00:02:53.636 --> 00:02:56.707
But then when we go back to App.vue,
let's say I accidentally tried to use

59
00:02:56.707 --> 00:02:58.876
Bender Statistics without
passing the component.

60
00:02:58.876 --> 00:03:00.772
Let's see, will it yell at me?

61
00:03:00.772 --> 00:03:06.250
[SOUND] So this time,
it doesn't yell at me.

62
00:03:06.250 --> 00:03:13.654
But there are times where I think,
I actually I need to do this real quick,

63
00:03:13.654 --> 00:03:17.851
if I do characters="123", save.

64
00:03:17.851 --> 00:03:21.147
Looks like it's not doing any checks for
me at the moment.

65
00:03:21.147 --> 00:03:22.598
It's been kinda finicky.

66
00:03:22.598 --> 00:03:25.403
But anyhow, at the bare minimum,
when you're doing this,

67
00:03:25.403 --> 00:03:28.539
you can actually see, it's easy to read,
easy to understand, and

68
00:03:28.539 --> 00:03:31.360
then more importantly,
makes your app easier to maintain.

69
00:03:31.360 --> 00:03:35.928
So once again,
we are characterList like this, oops.

70
00:03:35.928 --> 00:03:40.972
Okay, and so props really is
basically the glue to which we can

71
00:03:40.972 --> 00:03:45.825
connect our parent components
into our child components.

72
00:03:45.825 --> 00:03:47.476
There's a question there?

73
00:03:47.476 --> 00:03:48.600
&gt;&gt; Functions as props.

74
00:03:48.600 --> 00:03:54.779
&gt;&gt; [LAUGH] Okay, so
this is a hotly debated one.

75
00:03:54.779 --> 00:03:59.328
Okay, so the question here is around
the concept of functions as props.

76
00:03:59.328 --> 00:04:03.594
And so in other words,
to set up the example here,

77
00:04:03.594 --> 00:04:07.970
let me go into the sandbox
one instead just to show.

78
00:04:07.970 --> 00:04:11.504
[SOUND] Okay, so let's say in
base counter, we had a props, and

79
00:04:11.504 --> 00:04:15.925
this is actually something that I think
it's more common in React code bases.

80
00:04:15.925 --> 00:04:20.004
So in App.vue,
we saw that we actually scoped

81
00:04:20.004 --> 00:04:25.241
the increment counter directly
to the component, right?

82
00:04:25.241 --> 00:04:28.626
Well, theoretically,
what you could do with this

83
00:04:28.626 --> 00:04:33.281
concept is that you would have your
methods at your parent component.

84
00:04:33.281 --> 00:04:35.339
So it'd be at this level, right?

85
00:04:35.339 --> 00:04:38.478
And you'd have this increment function,
and

86
00:04:38.478 --> 00:04:43.556
then what you pass down to the component
is the actual increment function.

87
00:04:43.556 --> 00:04:47.156
So it would look something like this,
right?

88
00:04:47.156 --> 00:04:51.459
And then in terms of how this would be,
how it would look from a component

89
00:04:51.459 --> 00:04:57.018
perspective, you would have this increment
prop, and it's like type function, right?

90
00:04:57.018 --> 00:04:59.631
And then just be like whoops,
required: true.

91
00:04:59.631 --> 00:05:02.783
[COUGH] There is an example of a props.

92
00:05:02.783 --> 00:05:07.239
Personally, I am not a fan of
passing functions down as props.

93
00:05:07.239 --> 00:05:11.575
The reason for this is because I know
that, especially when we are programming,

94
00:05:11.575 --> 00:05:14.786
we get caught up in trying to
do factory functions, right?

95
00:05:14.786 --> 00:05:16.309
And with the factory components,

96
00:05:16.309 --> 00:05:18.732
where it becomes very easy
to genericize everything.

97
00:05:18.732 --> 00:05:21.839
And so that's why I think one of
the reasons it even got popular to pass

98
00:05:21.839 --> 00:05:24.680
functions is, because you're
basically saying as a parent,

99
00:05:24.680 --> 00:05:26.410
I'm gonna tell the child what to run.

100
00:05:26.410 --> 00:05:31.045
But what I found with that a lot of times
is that now you're starting to kinda

101
00:05:31.045 --> 00:05:35.479
conflate, I feel like the parents
start to do too much work in terms of.

102
00:05:35.479 --> 00:05:38.623
if the scope of the child
is meant to increment,

103
00:05:38.623 --> 00:05:42.080
I found very few times where
it didn't make sense for

104
00:05:42.080 --> 00:05:46.890
the child to own that from the beginning,
as far as functionality wise.

105
00:05:46.890 --> 00:05:48.903
&gt;&gt; Sir, in this example,

106
00:05:48.903 --> 00:05:54.151
[COUGH] I tend to think about this
in the Add New Airbender form.

107
00:05:54.151 --> 00:05:54.917
&gt;&gt; Yep.

108
00:05:54.917 --> 00:05:59.322
&gt;&gt; The parent app owns
the list of airbenders, and

109
00:05:59.322 --> 00:06:05.171
the form has what is a new airbender app,
and how do I modify it?

110
00:06:05.171 --> 00:06:07.943
But the one I wanna actually
add that to that list,

111
00:06:07.943 --> 00:06:12.497
I could modify the list in the child, but
that feels dirtier than having the parent

112
00:06:12.497 --> 00:06:15.403
own that function that
actually adds it to the list.

113
00:06:15.403 --> 00:06:16.390
&gt;&gt; I love this question.

114
00:06:16.390 --> 00:06:21.043
So that is actually a good
lead in after the exercise.

115
00:06:21.043 --> 00:06:27.989
I'll call it what I consider the more
standard pattern of dealing with that.

116
00:06:27.989 --> 00:06:32.561
And so to recap, in case anyone couldn't
hear, is that, let's go back to

117
00:06:32.561 --> 00:06:37.370
the example brought up ,what's inside
of my Avatar Airbender component?.

118
00:06:37.370 --> 00:06:41.529
Earlier you might have heard me say, for
example, that the component hit a limit,

119
00:06:41.529 --> 00:06:43.145
and there's a reason for that.

120
00:06:43.145 --> 00:06:46.962
But for the favorite characterList,
as was mentioned,

121
00:06:46.962 --> 00:06:50.621
if we were to break our
favorite character right here,

122
00:06:50.621 --> 00:06:54.756
into its own component,
it's tricky because at this point,

123
00:06:54.756 --> 00:06:59.948
favorite list is also dependent on,
there's the data exists in the parent.

124
00:06:59.948 --> 00:07:03.047
And so you don't actually wanna
pass the data into the child for

125
00:07:03.047 --> 00:07:04.110
the child to modify.

126
00:07:04.110 --> 00:07:07.740
But at the same time then,
it sounds like it would be better to then

127
00:07:07.740 --> 00:07:10.912
pass a function to the child
to tell it what to do, right?

128
00:07:10.912 --> 00:07:14.318
But I'll leave that a little bit on the
cliffhanger, but just know that there's

129
00:07:14.318 --> 00:07:17.740
a better way than passing functions down
as props when it comes to that scenario.

