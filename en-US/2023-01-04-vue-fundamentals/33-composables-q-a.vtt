WEBVTT

1
00:00:00.000 --> 00:00:03.482
Question here in the chat.

2
00:00:03.482 --> 00:00:07.221
&gt;&gt; How do life lifecycle
hooks like before destroy or

3
00:00:07.221 --> 00:00:10.434
destroy work inside the Composition API?

4
00:00:10.434 --> 00:00:12.720
&gt;&gt; Yeah, this is a great question.

5
00:00:12.720 --> 00:00:17.188
So if we look inside of our lifecycle
hooks, do I have it already.

6
00:00:17.188 --> 00:00:20.703
The way to think about it is that
composition API doesn't actually,

7
00:00:20.703 --> 00:00:24.943
as much as we're talking about it as like
a separate way of architecting your apps,

8
00:00:24.943 --> 00:00:27.689
it doesn't break away from
how the component works.

9
00:00:27.689 --> 00:00:30.640
So the question here regarding
like before unmount, so

10
00:00:30.640 --> 00:00:34.302
basically destroy instead of destroyed,
think of it as unmounted.

11
00:00:34.302 --> 00:00:36.389
All that stuff still happens at the end.

12
00:00:36.389 --> 00:00:39.158
The only thing that's different about the
composition API is that it just happens at

13
00:00:39.158 --> 00:00:39.864
the very beginning.

14
00:00:39.864 --> 00:00:43.138
It's still all that other stuff you
expect when it comes to destroying stuff,

15
00:00:43.138 --> 00:00:44.938
that still factors into composition API.

16
00:00:44.938 --> 00:00:49.030
In fact, composition API will continue
to hit all these other lifecycle hooks.

17
00:00:49.030 --> 00:00:53.025
So just to answer this question
a little bit more fully,

18
00:00:53.025 --> 00:00:56.944
let me go to the pokedex here
that has the script set up.

19
00:00:56.944 --> 00:01:00.421
So if in the event, right,
you're saying, Well, this component,

20
00:01:00.421 --> 00:01:04.364
right, let's say, let me put the side by
side so we can actually see this together.

21
00:01:04.364 --> 00:01:07.027
And then let me reduce that so
it's easier to read, okay?

22
00:01:07.027 --> 00:01:11.155
So if you're trying to say that like,
okay, I have this thing where like right

23
00:01:11.155 --> 00:01:14.110
before the component unmount
I want it to do something.

24
00:01:14.110 --> 00:01:16.670
Sometimes that's the thing,
right, before it's destroyed.

25
00:01:16.670 --> 00:01:20.169
The way you would do that is
you need a helper method.

26
00:01:20.169 --> 00:01:21.054
And so we have,

27
00:01:21.054 --> 00:01:25.220
just as you would expect it to be
called it's not called before unmount.

28
00:01:25.220 --> 00:01:29.741
Because what we realized with conventions
is that this is really a lifecycle event.

29
00:01:29.741 --> 00:01:32.279
So really all of our stuff
are prefixed with on,

30
00:01:32.279 --> 00:01:35.462
like you would expect for
other events, on click on key up.

31
00:01:35.462 --> 00:01:38.362
Well, since this is a helper method for
an event for

32
00:01:38.362 --> 00:01:41.611
lifecycle hooks onBeforeMount
is what we would import.

33
00:01:41.611 --> 00:01:46.274
Sorry, onBeforeUnmount because that's
particularly what we were talking about.

34
00:01:46.274 --> 00:01:49.495
So we would say onBeforeUnmount.

35
00:01:49.495 --> 00:01:51.028
There we go.

36
00:01:51.028 --> 00:01:54.642
And then, I usually like to keep my
lifecycle hooks towards the bottom

37
00:01:54.642 --> 00:01:58.994
usually, but especially with composition
API that goes out the window depending on

38
00:01:58.994 --> 00:02:00.297
how complex the code is.

39
00:02:00.297 --> 00:02:01.084
So be very clear.

40
00:02:01.084 --> 00:02:04.327
That is not at all a best
practice just kind of what I use.

41
00:02:04.327 --> 00:02:07.330
I'm used to doing from
the the Options API.

42
00:02:07.330 --> 00:02:10.773
So what we do is we would
call onBeforeUnmount.

43
00:02:10.773 --> 00:02:14.963
And then it's a function that takes
a callback function of what we wanna do.

44
00:02:14.963 --> 00:02:18.803
So in this particular case,
you might be like, do this thing.

45
00:02:18.803 --> 00:02:21.254
And then that's it.

46
00:02:21.254 --> 00:02:24.337
Essentially what you have done in
Options API you just defined it at

47
00:02:24.337 --> 00:02:25.170
the setup level.

48
00:02:25.170 --> 00:02:29.468
So the key thing again to remember is that
Composition API does not take you out of

49
00:02:29.468 --> 00:02:30.058
the flow.

50
00:02:30.058 --> 00:02:31.930
You're absolutely bought
into the whole thing.

51
00:02:31.930 --> 00:02:35.596
It's just now you can literally
set everything up right

52
00:02:35.596 --> 00:02:38.950
here at this one step and
then let it run from there.

53
00:02:38.950 --> 00:02:43.030
Whereas as we saw with Options API there
is kind of a little bit more intricacy

54
00:02:43.030 --> 00:02:46.219
regarding do your setup then
pass that into your options and

55
00:02:46.219 --> 00:02:48.289
then options can do stuff from there.

56
00:02:48.289 --> 00:02:52.144
So it's a style thing,
you'll figure out what works best for you.

57
00:02:52.144 --> 00:02:56.566
But what I've done in this workshop is try
to present you with the different styles

58
00:02:56.566 --> 00:03:00.495
so that you can get a feel for it and
figure out what you want for your apps.

59
00:03:00.495 --> 00:03:03.270
Hopefully, it helps answer that question.

60
00:03:03.270 --> 00:03:04.065
Question?

61
00:03:04.065 --> 00:03:09.961
&gt;&gt; The composables.

62
00:03:09.961 --> 00:03:15.038
Are they singletons that are around for
the lifecycle of the app or

63
00:03:15.038 --> 00:03:19.838
if they're not being actively
used by components on screen,

64
00:03:19.838 --> 00:03:25.854
are they tossed away and then re
instantiated fresh next time they're used?

65
00:03:25.854 --> 00:03:27.362
&gt;&gt; This is a good question.

66
00:03:27.362 --> 00:03:28.084
All right.

67
00:03:28.084 --> 00:03:30.264
So the context set.

68
00:03:30.264 --> 00:03:33.878
The question here,
let me go to the base-counter,

69
00:03:33.878 --> 00:03:39.136
is around the idea of these composables
and whether they're singletons and

70
00:03:39.136 --> 00:03:43.918
basically how permanent are they
in regards to the entire instance.

71
00:03:43.918 --> 00:03:48.030
So, because we're not getting into
composable this means you are starting to

72
00:03:48.030 --> 00:03:51.582
get into scoping concerns when
you're talking about JavaScript,

73
00:03:51.582 --> 00:03:55.634
which was talking about like the learning
curve for Composition API starts to

74
00:03:55.634 --> 00:03:59.024
increment a little bit when you
start to think about this stuff.

75
00:03:59.024 --> 00:04:03.102
So to give you an example of this,
let's go back to that countStore.

76
00:04:03.102 --> 00:04:08.294
Okay, so like any normal JavaScript,
what we can also do is we can also instead

77
00:04:08.294 --> 00:04:12.951
create something called something
like useCount that is a function.

78
00:04:12.951 --> 00:04:15.899
And so when you do this though, okay, and

79
00:04:15.899 --> 00:04:20.463
let's say we have const localCount
= ref of, let's say 50.

80
00:04:20.463 --> 00:04:25.613
And then we return newCount,
although let me actually move

81
00:04:25.613 --> 00:04:31.175
this a little bit better,
globalCount and return localCount.

82
00:04:31.175 --> 00:04:32.543
Okay, there we have that.

83
00:04:32.543 --> 00:04:35.281
I think I did all this right,
perfect, okay.

84
00:04:35.281 --> 00:04:38.468
So the other thing I need to
do is actually not have this.

85
00:04:38.468 --> 00:04:42.081
This is more of like that sort of
factory approach to composables,

86
00:04:42.081 --> 00:04:46.479
where what you're doing is you're running
a function that then has basically.

87
00:04:46.479 --> 00:04:49.628
Well, we're about to see
shortly what it looks like,

88
00:04:49.628 --> 00:04:52.919
it's easier to show than to
explain this in its raw form.

89
00:04:52.919 --> 00:04:57.326
Okay, so rather than newCount anymore,
we got this function called useCount.

90
00:04:57.326 --> 00:04:59.556
So all we can do now is we can say,

91
00:04:59.556 --> 00:05:04.512
inside of the function we're going to
get the fact that we can do const,

92
00:05:04.512 --> 00:05:08.744
okay, actually I did not like
the way I've minimized this.

93
00:05:08.744 --> 00:05:09.640
There we go.

94
00:05:09.640 --> 00:05:12.246
countStore.

95
00:05:12.246 --> 00:05:14.163
Okay, very good.

96
00:05:14.163 --> 00:05:16.361
useCount.

97
00:05:16.361 --> 00:05:19.069
And then this is log countStore to start.

98
00:05:19.069 --> 00:05:24.571
Let's not even return anything just yet,
okay.

99
00:05:24.571 --> 00:05:30.768
Doo, doo, doo, doo, doo, if we take
a look at our console and refresh.

100
00:05:30.768 --> 00:05:33.237
Doo, doo, doo.

101
00:05:33.237 --> 00:05:34.673
Right.

102
00:05:34.673 --> 00:05:36.416
Okay, sorry.
It's still looking for newCount in here.

103
00:05:36.416 --> 00:05:39.404
So let me go ahead and comment that out.

104
00:05:39.404 --> 00:05:41.392
And then where's newCount?

105
00:05:41.392 --> 00:05:44.368
NewCount also exists
here inside of UserCard.

106
00:05:44.368 --> 00:05:47.004
Let me disable that as well.

107
00:05:47.004 --> 00:05:49.708
Not that UserCard, this UserCard.

108
00:05:49.708 --> 00:05:52.231
Yep, Yep.

109
00:05:54.582 --> 00:05:56.897
And then, this should be hidden too.

110
00:05:56.897 --> 00:05:58.431
Okay, now we're good.

111
00:05:59.533 --> 00:06:00.767
Okay.

112
00:06:03.562 --> 00:06:07.137
So what we see here is that
globalCount gets two different refs.

113
00:06:07.137 --> 00:06:09.180
There's a local and a global one.

114
00:06:09.180 --> 00:06:11.353
And so, inside of here,

115
00:06:11.353 --> 00:06:16.843
if we return countStore to expose
it out basically once again.

116
00:06:16.843 --> 00:06:20.288
And then what we can do here is,
let's do two different buttons now.

117
00:06:20.288 --> 00:06:25.191
We're going to have the ability to,
right, it's being referenced here.

118
00:06:25.191 --> 00:06:30.138
So we're gonna say New counter here.

119
00:06:30.138 --> 00:06:33.504
That's gonna add an extra
here that's easier to see.

120
00:06:33.504 --> 00:06:37.296
And then let me not clip the browser.

121
00:06:37.296 --> 00:06:44.982
Okay, so what I'm gonna do here
is when I say Global Count and

122
00:06:44.982 --> 00:06:51.167
that's going to be countStore.globalCount,

123
00:06:51.167 --> 00:06:58.283
and then Local Count
countStore.localCount, okay.

124
00:06:58.283 --> 00:07:04.247
So this what we're seeing here matches up
to what we have here inside of countStore,

125
00:07:04.247 --> 00:07:04.842
right?

126
00:07:04.842 --> 00:07:08.618
So the difference here being that let's
go ahead and add some functionality here

127
00:07:08.618 --> 00:07:12.076
where if we wanna go ahead and
increment stuff, what does that look like?

128
00:07:12.076 --> 00:07:14.684
So we're gonna add
a button here real quick.

129
00:07:14.684 --> 00:07:18.298
And we're just gonna write some inline
JavaScript just to make life a little

130
00:07:18.298 --> 00:07:18.928
bit easier.

131
00:07:18.928 --> 00:07:23.110
Where globalCount will
be incremented by 80.

132
00:07:23.110 --> 00:07:24.782
So I'll just call that global.

133
00:07:24.782 --> 00:07:29.844
And then we'll do localCount by 100.

134
00:07:29.844 --> 00:07:32.434
Although let's make this more jarring,
so that's easier.

135
00:07:32.434 --> 00:07:33.510
10 and 100.

136
00:07:33.510 --> 00:07:35.129
Local, great.

137
00:07:35.129 --> 00:07:38.098
So what we have here,
we have the references to it,

138
00:07:38.098 --> 00:07:41.222
but we're trying to mutate
the count specifically.

139
00:07:41.222 --> 00:07:46.387
And so one of the things we can do instead
is because of the way they're scoped,

140
00:07:46.387 --> 00:07:50.080
we could do the increment
localCount here for example.

141
00:07:50.080 --> 00:07:56.208
And here is where we can
say localCount.value +=80.

142
00:07:56.208 --> 00:08:02.306
Expose increment local count like this.

143
00:08:02.306 --> 00:08:07.234
And then since we have
that functionality shared,

144
00:08:07.234 --> 00:08:11.130
now what we can do is we can say doo, doo,

145
00:08:11.130 --> 00:08:15.727
doo, do countStore.incrementLocalCount.

146
00:08:15.727 --> 00:08:20.174
Like that, save, refresh.

147
00:08:20.174 --> 00:08:22.853
You see our local is now changing.

148
00:08:22.853 --> 00:08:27.670
The reason this is different is
if we go back to our UserCard.

149
00:08:27.670 --> 00:08:31.620
And let's do the same thing where
we import our use count here.

150
00:08:33.270 --> 00:08:38.231
And so then we say const countStore =

151
00:08:38.231 --> 00:08:44.210
useCount and then return countStore.

152
00:08:44.210 --> 00:08:47.350
And this time,
we'll copy this exact snippet over here.

153
00:08:47.350 --> 00:08:49.199
So it's very obvious.

154
00:08:53.028 --> 00:08:54.366
Save, okay.

155
00:08:54.366 --> 00:08:57.068
[COUGH] You'll see
a couple of things here.

156
00:08:57.068 --> 00:09:01.735
One, because of the way the function
instantiates, as you would expect,

157
00:09:01.735 --> 00:09:04.253
the localCount, like the component for

158
00:09:04.253 --> 00:09:08.861
the base counter actually is holding
its own version of that localCount.

159
00:09:08.861 --> 00:09:13.707
While over here we can see that
the UserCard has its own version of

160
00:09:13.707 --> 00:09:14.793
localCount.

161
00:09:14.793 --> 00:09:16.045
On the other hand,

162
00:09:16.045 --> 00:09:20.519
if we have a function here that
allows us to incrementGlobalCount.

163
00:09:23.133 --> 00:09:26.387
And then let's just, once again,

164
00:09:26.387 --> 00:09:31.379
globalCount.value+ equals, let's do 1000.

165
00:09:31.379 --> 00:09:36.170
Then we'll go ahead and
do incrementGlobalCount, great.

166
00:09:36.170 --> 00:09:38.250
Now let me go ahead and switch this out.

167
00:09:42.750 --> 00:09:49.289
Doo, doo, doo global, that's good.

168
00:09:49.289 --> 00:09:53.127
Then we have this right here,
save, refresh.

169
00:09:53.127 --> 00:09:57.329
We have Global changing in the top,

170
00:09:57.329 --> 00:10:00.839
Global changing both sides.

171
00:10:00.839 --> 00:10:03.513
And so I know this was a bit
of a long winded answer, but

172
00:10:03.513 --> 00:10:06.847
it goes to show that it basically
comes down to your ability to scope

173
00:10:06.847 --> 00:10:10.206
your JavaScript as you normally
would as far as generating those.

174
00:10:10.206 --> 00:10:11.203
&gt;&gt; So what Joe's asking.

175
00:10:11.203 --> 00:10:14.272
So let's say you hit a button that
rendered different components.

176
00:10:14.272 --> 00:10:16.445
&gt;&gt; Yep.
&gt;&gt; So both the counter and

177
00:10:16.445 --> 00:10:18.452
the user are off screen.

178
00:10:18.452 --> 00:10:20.777
And then you reinstantiate
those two components.

179
00:10:20.777 --> 00:10:26.984
Does Global Count start over or
is that state held by the app in some way?

180
00:10:26.984 --> 00:10:31.040
&gt;&gt; In that particular case if the
component is unmounted and views already

181
00:10:31.040 --> 00:10:35.367
tracking the global state, I would
imagine the global state would state but

182
00:10:35.367 --> 00:10:39.776
the local state would get reinstantiated,
that's what you should expect.

183
00:10:39.776 --> 00:10:43.716
&gt;&gt; Okay, [INAUDIBLE] uses it as
a singleton for the lifetime of the app.

184
00:10:43.716 --> 00:10:47.057
&gt;&gt; Yep, there might be some gotchas
in certain situations, but again,

185
00:10:47.057 --> 00:10:50.337
if you run into that, let me know we
can always take a look at that, but

186
00:10:50.337 --> 00:10:52.677
that probably would go
beyond the scope of this.

187
00:10:52.677 --> 00:10:53.959
Cool.

188
00:10:53.959 --> 00:10:56.919
Okay, so
I know there is a lot going on here, but

189
00:10:56.919 --> 00:10:59.953
I wanted to kind of provide
the full landscape for

190
00:10:59.953 --> 00:11:04.030
those who aren't used to writing
their own JavaScript modules.

191
00:11:04.030 --> 00:11:07.875
And to actually show you some of
the differences behind what happens when

192
00:11:07.875 --> 00:11:11.532
you use the function to invoke it
versus just exporting a constant and

193
00:11:11.532 --> 00:11:13.943
just give you some
different options there.

