WEBVTT

1
00:00:00.345 --> 00:00:05.682
So we're gonna talk about global
state management with Pinia.

2
00:00:05.682 --> 00:00:09.423
Pinia, if you don't know,
I believe it's French for pineapple and

3
00:00:09.423 --> 00:00:11.433
basically it is a successor to Vuex.

4
00:00:11.433 --> 00:00:14.700
So if you've heard from the React
community about Redux patterns and

5
00:00:14.700 --> 00:00:18.077
those kind of thing, Pinia is
the evolution of that because Vue did take

6
00:00:18.077 --> 00:00:19.893
inspiration from the Redux pattern.

7
00:00:19.893 --> 00:00:21.772
So we had Vuex for a very long time.

8
00:00:21.772 --> 00:00:25.259
But there were some ergonomics with it
that made it kind of tricky to work with

9
00:00:25.259 --> 00:00:26.624
over the long period of time.

10
00:00:26.624 --> 00:00:32.038
And so Pinia with the composition API has
basically been the evolution of Vuex.

11
00:00:32.038 --> 00:00:36.778
Okay, so in terms of Pinia,
let's take a look at what that looks like.

12
00:00:36.778 --> 00:00:41.469
All right, because global state management
typically is a fairly complicated topic.

13
00:00:41.469 --> 00:00:48.057
So first of all, be sure to pin
their docs, pinia.vuejs.org.

14
00:00:48.057 --> 00:00:51.961
Once again, this is an officially
supported view library.

15
00:00:51.961 --> 00:00:55.484
And it's got this cute little mascot,
which I need to get some stickers of.

16
00:00:55.484 --> 00:01:00.362
And basically, Pinia, funny enough what
started out as just like an experiment

17
00:01:00.362 --> 00:01:04.881
that Eduardo also known as Posva,
who actually wrote Vue Router was kind of

18
00:01:04.881 --> 00:01:07.842
experimenting with how
we might reinvent Vuex.

19
00:01:07.842 --> 00:01:10.580
And so
he kind of came up with this idea and

20
00:01:10.580 --> 00:01:15.351
it's gained a lot of popularity and
so thus it is now the official one.

21
00:01:15.351 --> 00:01:18.187
Okay, so the show that actually
we're gonna go ahead and

22
00:01:18.187 --> 00:01:19.437
do is on the playground.

23
00:01:19.437 --> 00:01:21.358
I'm gonna go ahead and
just install it right now.

24
00:01:21.358 --> 00:01:24.608
So install npm install Pinia.

25
00:01:24.608 --> 00:01:27.468
And so once again, let's go and
see how we know that we're using it.

26
00:01:27.468 --> 00:01:32.231
We can go ahead and
look inside of the package.json.

27
00:01:32.231 --> 00:01:36.983
And as we see here, we'll see vue-router,
and we see pinia now.

28
00:01:36.983 --> 00:01:40.613
Now, the only thing we need to do before
we need to continue using it though,

29
00:01:40.613 --> 00:01:41.821
is just like the router.

30
00:01:41.821 --> 00:01:45.704
We need to tell vue that we're
using this plugin basically.

31
00:01:45.704 --> 00:01:48.096
And so inside of our main.ts,

32
00:01:48.096 --> 00:01:53.158
we get the opportunity to now
create basically a pinia instance.

33
00:01:53.158 --> 00:01:54.030
How does that work?

34
00:01:54.030 --> 00:01:55.522
It's just like vue router actually.

35
00:01:55.522 --> 00:02:01.154
So we can import createPinia from pinia.

36
00:02:01.154 --> 00:02:03.150
As I just show you that again.

37
00:02:03.150 --> 00:02:06.254
This time it actually autocomplete,
there you go now that's right.

38
00:02:06.254 --> 00:02:08.285
And so remember that multilane
thing I was telling you about.

39
00:02:08.285 --> 00:02:09.662
So this is where this is super helpful.

40
00:02:09.662 --> 00:02:13.849
Because we can say const
pinia = createPinia and

41
00:02:13.849 --> 00:02:20.497
then after that after we use the router,
we can just say app.use(pinia).

42
00:02:20.497 --> 00:02:21.430
There you go.

43
00:02:21.430 --> 00:02:25.918
And just like that you have
Pinia enabled on your app.

44
00:02:25.918 --> 00:02:28.035
So, how does Pinia actually work, right?

45
00:02:28.035 --> 00:02:32.577
Creating stores and stuff this is stuff
again is typically very complicated.

46
00:02:32.577 --> 00:02:37.194
But I think I've set you all up to
kind of see what it's actually like.

47
00:02:37.194 --> 00:02:41.041
What we're gonna do is we
create a folder called stores.

48
00:02:41.041 --> 00:02:42.257
Because what are these, after all?

49
00:02:42.257 --> 00:02:42.986
What are we trying to track?

50
00:02:42.986 --> 00:02:44.528
We're trying to track stores of data.

51
00:02:44.528 --> 00:02:45.053
So what are we creating?

52
00:02:45.053 --> 00:02:47.051
We're creating a directory for
stores, why?

53
00:02:47.051 --> 00:02:49.465
Because when it comes to
global state management,

54
00:02:49.465 --> 00:02:53.390
they're typically referred to as stores of
the data of the actions we need to take in

55
00:02:53.390 --> 00:02:55.483
order to make changes
to those data stores.

56
00:02:55.483 --> 00:02:59.120
So, let's go ahead and
insert this playground this time.

57
00:02:59.120 --> 00:03:01.499
We notice that we have this
count store over here.

58
00:03:01.499 --> 00:03:03.792
Let's go ahead and
recreate this over here.

59
00:03:03.792 --> 00:03:05.316
So I'm gonna do CountStore and

60
00:03:05.316 --> 00:03:08.606
I'm just gonna do it in Pascal case
just to make it look different.

61
00:03:08.606 --> 00:03:12.085
And what does that look
like now inside of Pinia?

62
00:03:12.085 --> 00:03:14.055
Well, let's go ahead and define the store.

63
00:03:14.055 --> 00:03:18.340
As we look at the docs here, we're gonna
do things very composition API like.

64
00:03:18.340 --> 00:03:22.663
We're gonna import defineStore from pinia.

65
00:03:22.663 --> 00:03:27.473
And then what we're going to do then is
export a const of use whatever the count

66
00:03:27.473 --> 00:03:29.769
store or whatever the store name is.

67
00:03:29.769 --> 00:03:31.946
So useCountStore is typically
what is like what is called.

68
00:03:31.946 --> 00:03:33.941
So use appended to this.

69
00:03:33.941 --> 00:03:37.601
And then we call the defineStore in here.

70
00:03:37.601 --> 00:03:39.356
Now the difference is, is one,

71
00:03:39.356 --> 00:03:43.000
we first start by defining how we
want like the store to be labeled.

72
00:03:43.000 --> 00:03:44.875
So I usually just call it countStore,

73
00:03:44.875 --> 00:03:47.876
like whatever it's already
called inside of the file name.

74
00:03:47.876 --> 00:03:52.280
And then after that you get
an object that you get to configure.

75
00:03:52.280 --> 00:03:55.309
And inside of here,
it's gonna look kind of familiar.

76
00:03:55.309 --> 00:04:00.010
So one,
you get a state option to return data.

77
00:04:00.010 --> 00:04:02.497
There is a getters option.

78
00:04:02.497 --> 00:04:07.249
And there is an actions option.

79
00:04:07.249 --> 00:04:09.871
And so you might think,
this looks familiar.

80
00:04:09.871 --> 00:04:12.256
This looks a little bit like options.

81
00:04:12.256 --> 00:04:16.746
And it does in the sense that it's
providing you structure at how you manage

82
00:04:16.746 --> 00:04:17.536
your state.

83
00:04:17.536 --> 00:04:21.170
Guess what we saw the composition API
earlier is that you can kind of wrangle

84
00:04:21.170 --> 00:04:22.618
together whatever you want.

85
00:04:22.618 --> 00:04:25.094
But this, especially when we
think about global stores,

86
00:04:25.094 --> 00:04:27.988
it's actually useful to have
a convention for everyone to follow.

87
00:04:27.988 --> 00:04:32.290
Because you don't really don't want it to
be like the wild wild west when it comes

88
00:04:32.290 --> 00:04:34.456
to people managing and accessing data.

89
00:04:34.456 --> 00:04:37.103
And something else that you
might notice too, though,

90
00:04:37.103 --> 00:04:40.948
missing from here especially for my fellow
Vuex users, there are no mutations.

91
00:04:40.948 --> 00:04:45.468
And that is probably one of the best
things about Pinia is that,

92
00:04:45.468 --> 00:04:48.964
when we have something in
here like count zero and

93
00:04:48.964 --> 00:04:53.934
we want to increment the count all
we got to do is go this.count ++.

94
00:04:53.934 --> 00:04:56.523
And it takes care of everything for you.

95
00:04:56.523 --> 00:05:00.126
No more creating this separate thing
that's like a mutation that requires you

96
00:05:00.126 --> 00:05:01.054
to call in action and

97
00:05:01.054 --> 00:05:04.788
then the mutation is basically redundant
of the thing that you're trying to do.

98
00:05:04.788 --> 00:05:07.244
That's all gone.

99
00:05:07.244 --> 00:05:10.624
And so if we think of this,
another way to alias it,

100
00:05:10.624 --> 00:05:14.807
just to provide that mental
model Data &gt; Computed &gt; Methods.

101
00:05:17.571 --> 00:05:20.090
That's what you have.

102
00:05:20.090 --> 00:05:23.979
And so if we compare this over now to
the CountStore that we originally sort

103
00:05:23.979 --> 00:05:27.321
of scaffolded ourselves together
inside of the composables.

104
00:05:27.321 --> 00:05:31.246
You'll see here how different the code
is in the sense that this is just kind

105
00:05:31.246 --> 00:05:34.190
of however I feel like, and
however I chose to write it.

106
00:05:34.190 --> 00:05:36.593
But you get an additional benefit,
actually,

107
00:05:36.593 --> 00:05:38.343
that I'll show you in right here.

108
00:05:38.343 --> 00:05:41.257
So let's say,
let's add the increment amount to 80.

109
00:05:41.257 --> 00:05:44.148
And then this one is going to
be += this.incrementAmount,

110
00:05:44.148 --> 00:05:48.053
because this should look familiar to our
base countStore that we've done before.

111
00:05:48.053 --> 00:05:50.539
And then we'll have a doubleCount here,

112
00:05:50.539 --> 00:05:54.311
that will be a function that
receives the state as an argument.

113
00:05:54.311 --> 00:05:58.667
And we just return state.count times two,
just like that.

114
00:05:58.667 --> 00:06:03.596
And then I mess something up because I
use the comma instead of a period, boom.

115
00:06:03.596 --> 00:06:06.896
Okay, how is this any different
than what we just did?

116
00:06:06.896 --> 00:06:10.206
So we have this right here, and
I'm going to leave this to the right so

117
00:06:10.206 --> 00:06:11.816
that we have this as a reference.

118
00:06:11.816 --> 00:06:14.373
Now, inside of our base counter.

119
00:06:14.373 --> 00:06:20.741
This time what I'm gonna do is we're gonna
go ahead and actually import this store.

120
00:06:20.741 --> 00:06:24.739
So import useCounterStore or
useCountStore, it looks like.

121
00:06:24.739 --> 00:06:26.544
There you go.
It actually detected it properly.

122
00:06:26.544 --> 00:06:29.935
So we are getting some type auto
completion, which is super nice.

123
00:06:29.935 --> 00:06:34.250
And this time,
we'll do a const newCountStore,

124
00:06:34.250 --> 00:06:38.062
which will be the useCountStore like this.

125
00:06:38.062 --> 00:06:39.162
Just like that.

126
00:06:39.162 --> 00:06:43.413
And then we're gonna return newCountStore,
just like that.

127
00:06:43.413 --> 00:06:45.938
Okay, so what do we get out of this?

128
00:06:45.938 --> 00:06:49.775
One, I'm gonna show you what it
looks like when we actually use it.

129
00:06:49.775 --> 00:06:53.580
So let me bring that back over here,
this is great.

130
00:06:53.580 --> 00:07:00.745
Okay, so first thing is that now
that you have your CountStore.

131
00:07:00.745 --> 00:07:05.299
What you actually end up finding
out is that when we look

132
00:07:05.299 --> 00:07:08.865
at something like Third Counter Version.

133
00:07:08.865 --> 00:07:11.262
So when we look inside of here,

134
00:07:11.262 --> 00:07:15.617
you're gonna notice that we
get auto completion here.

135
00:07:15.617 --> 00:07:19.477
It actually can detect properties on that
store now to get a lot of auto completion

136
00:07:19.477 --> 00:07:20.116
out of this.

137
00:07:20.116 --> 00:07:23.322
So in other words if we take a look,
increment is actually sitting right here.

138
00:07:23.322 --> 00:07:25.500
It actually knows that
it's a property now.

139
00:07:25.500 --> 00:07:29.593
And so there's a lot of work being
done underneath to help with

140
00:07:29.593 --> 00:07:34.331
the intelligence of what's going
on when you're managing your code.

141
00:07:34.331 --> 00:07:35.845
And so here, we can do count, for example,
and then as you can see, it's zero.

142
00:07:35.845 --> 00:07:40.809
But actually very easily if we
added a button, we can just say,

143
00:07:40.809 --> 00:07:43.257
newCountStore.increment.

144
00:07:43.257 --> 00:07:46.467
And then New Increment.

145
00:07:46.467 --> 00:07:51.585
Then you can see, it just works.

146
00:07:51.585 --> 00:07:56.373
And the reason why I kind of preface
this with how global stores are normally

147
00:07:56.373 --> 00:07:57.368
complicated.

148
00:07:57.368 --> 00:08:00.403
This should actually remind you of the
composable we kind of designed ourselves.

149
00:08:00.403 --> 00:08:02.306
You have this thing called CountStore.

150
00:08:02.306 --> 00:08:06.870
Again, it learns from the options API
takes the advantage of the option API

151
00:08:06.870 --> 00:08:08.764
by providing some structure.

152
00:08:08.764 --> 00:08:11.023
Gives you the chance to
manipulate it as you see fit.

153
00:08:11.023 --> 00:08:12.490
But then when you call it,

154
00:08:12.490 --> 00:08:15.845
it feels just as natural as using
any other part of the data.

155
00:08:15.845 --> 00:08:19.441
Whereas in a lot of other state
managements that I've used before there's

156
00:08:19.441 --> 00:08:22.521
usually a lot in terms of like going
in to fetch a certain thing and

157
00:08:22.521 --> 00:08:24.710
then auto completion
becomes a bit of a pain.

158
00:08:24.710 --> 00:08:27.267
If you use Vuex you knew that
you had to type the string

159
00:08:27.267 --> 00:08:29.843
exactly a certain way to
initiate a certain action.

160
00:08:29.843 --> 00:08:32.551
There was a lot of opportunities for
mistakes.

161
00:08:32.551 --> 00:08:36.739
But with this, it's easy for
us to understand what's happening.

162
00:08:36.739 --> 00:08:39.989
And on top of that,
I'm always a big fan of conventions,

163
00:08:39.989 --> 00:08:42.308
especially when it comes to debugging.

164
00:08:42.308 --> 00:08:46.042
We know that state management
is notoriously difficult to do.

165
00:08:46.042 --> 00:08:50.504
And so, if you take a look right here,
you'll notice that another benefit you get

166
00:08:50.504 --> 00:08:53.621
by using Pinia,
is that you get this dev tool right here.

167
00:08:53.621 --> 00:08:56.767
And we can actually go ahead and start
inspecting it and doing stuff just like

168
00:08:56.767 --> 00:08:59.880
you normally would want to do when
you're debugging a large application.

169
00:08:59.880 --> 00:09:04.263
And the other thing that again it feels
really natural as we do this right now is

170
00:09:04.263 --> 00:09:08.378
that unlike a global state management
store like the way Vuex used to be,

171
00:09:08.378 --> 00:09:11.497
you used to have to
intentionally namespace modules.

172
00:09:11.497 --> 00:09:15.155
In other words, you have to be like from
this global piece only take this small

173
00:09:15.155 --> 00:09:16.409
piece and import it here.

174
00:09:16.409 --> 00:09:18.544
Only take this small piece and
import it here.

175
00:09:18.544 --> 00:09:21.400
But then sometimes you still ended up with
like importing everything at once, right?

176
00:09:21.400 --> 00:09:25.744
So Vuex stores became rather cumbersome
and people had trouble with that.

177
00:09:25.744 --> 00:09:29.448
But with this new model of like
a compostable about Pinia,

178
00:09:29.448 --> 00:09:31.878
this is actually modular by default.

179
00:09:31.878 --> 00:09:35.066
You only import the stores
you need where you need them.

180
00:09:35.066 --> 00:09:38.106
And so almost without even thinking
about it, you've solved the performance

181
00:09:38.106 --> 00:09:41.065
bottleneck that might have naturally
occurred in an enterprise grade app.

182
00:09:41.065 --> 00:09:45.570
Where you have the singleton tracking
global state, everyone just chucking stuff

183
00:09:45.570 --> 00:09:48.544
in there because they can or
is the easiest thing to do.

184
00:09:48.544 --> 00:09:51.027
But now it almost is just as easy to go.

185
00:09:51.027 --> 00:09:53.308
Wait, my functionality is about login.

186
00:09:53.308 --> 00:09:54.340
I'm gonna create a login store.

187
00:09:54.340 --> 00:09:56.501
I'm not gonna toss it in the global state.

188
00:09:56.501 --> 00:09:59.320
I'm gonna actually think
of it modular first.

189
00:09:59.320 --> 00:10:03.627
And the fact that it's namespace modular
first, I think that's wonderful because it

190
00:10:03.627 --> 00:10:06.820
encourages us to use best practices
without even realizing it.

191
00:10:06.820 --> 00:10:10.456
And they are some of the best sort of
advances that we can have when it comes to

192
00:10:10.456 --> 00:10:11.284
developer toy.

