WEBVTT

1
00:00:00.530 --> 00:00:04.561
So just based on this, for those who have
been working with web apps for a while,

2
00:00:04.561 --> 00:00:08.432
you might already start to realize
there's a lot of flexibility with this.

3
00:00:08.432 --> 00:00:09.546
Cuz now, all of a sudden,

4
00:00:09.546 --> 00:00:12.947
if you have a backend that's not quite
ready to integrate all the build tools and

5
00:00:12.947 --> 00:00:14.896
everything you need to get it up and
running.

6
00:00:14.896 --> 00:00:16.709
You can just on a specific page,

7
00:00:16.709 --> 00:00:20.686
when you're proposing to start
progressively migrating your apps.

8
00:00:20.686 --> 00:00:24.320
You can say, on this page, we're gonna
drop the CDN and we're gonna add the,

9
00:00:24.320 --> 00:00:28.086
basically, interactivity to this page,
and over time, we'll migrate away.

10
00:00:28.086 --> 00:00:31.142
And then once we have enough
pages that consolidate that Vue,

11
00:00:31.142 --> 00:00:34.043
then we can actually invest
the time to do the build tools.

12
00:00:34.043 --> 00:00:36.850
Because I think a lot of times
when we think about migration,

13
00:00:36.850 --> 00:00:40.760
a lot of times developers are thinking,
code freeze everything, no new features,

14
00:00:40.760 --> 00:00:42.211
and we just stop development.

15
00:00:42.211 --> 00:00:46.035
And we know that practically speaking,
that just rarely works for business.

16
00:00:46.035 --> 00:00:51.422
And so this is a really great way for
us to basically go ahead and migrate

17
00:00:51.422 --> 00:00:57.836
an enterprise app over to something that
use more modern framework technologies.

18
00:00:57.836 --> 00:01:00.893
Now, that said, we have a message here.

19
00:01:00.893 --> 00:01:04.541
Now, what if we wanted to,
let's say, show or

20
00:01:04.541 --> 00:01:08.934
hide it based on whether or
not the message is even or not?

21
00:01:08.934 --> 00:01:13.289
Well, something that Vue is also known for
are their directives.

22
00:01:13.289 --> 00:01:14.870
And so for
those who have come from Angular,

23
00:01:14.870 --> 00:01:16.296
this might look a little bit familiar.

24
00:01:16.296 --> 00:01:20.783
So the way that it works is
that we basically would have

25
00:01:20.783 --> 00:01:25.685
a normal HTML element, so
let's wrap this in a p element.

26
00:01:26.696 --> 00:01:33.181
And then this one, we're gonna say Even,
and this one we're gonna say Odd, okay?

27
00:01:33.181 --> 00:01:38.301
And so the idea here being that, what
we'd like to do is if the message.length

28
00:01:38.301 --> 00:01:42.658
is even, show the Even keyword,
otherwise show the Odd keyword.

29
00:01:42.658 --> 00:01:47.209
And so one way we can do this is we can
use something called Vue directives.

30
00:01:47.209 --> 00:01:52.767
And the way it works is, it's basically
an attribute you add on an HTML element,

31
00:01:52.767 --> 00:01:54.829
and it's prefixed with v-.

32
00:01:54.829 --> 00:02:00.297
So in this case,
if I go v-if = message.length,

33
00:02:00.297 --> 00:02:06.416
and I'll use the % 2 = 0 to
determine that it's even.

34
00:02:06.416 --> 00:02:10.906
And then otherwise, v-else,
it will display the other thing.

35
00:02:10.906 --> 00:02:14.060
So when we refresh this,
we'll see, okay, there we go,

36
00:02:14.060 --> 00:02:16.092
we'll notice that it is currently Odd.

37
00:02:16.092 --> 00:02:22.196
And so now, if I delete the exclamation
mark, that should bring us over to Even.

38
00:02:22.196 --> 00:02:25.278
And so what we see here is,
again, one of the things

39
00:02:25.278 --> 00:02:30.180
I talked about when it came to Vue is that
it builds on top of what you already know.

40
00:02:30.180 --> 00:02:34.282
And so when most people are working with
HTML and CSS, there's a lot of value in

41
00:02:34.282 --> 00:02:38.464
extending upon people's existing knowledge
when it comes to extending APIs.

42
00:02:38.464 --> 00:02:42.039
And so in this regard, by basically
having the convention of the v-, and

43
00:02:42.039 --> 00:02:43.958
then using this if-else statements.

44
00:02:43.958 --> 00:02:48.224
Again, if you know JavaScript, in fact,
you don't even need to know JavaScript,

45
00:02:48.224 --> 00:02:52.570
people would actually understand this
property, or granted, maybe not this part.

46
00:02:52.570 --> 00:02:54.080
But when people are navigating the HTML,

47
00:02:54.080 --> 00:02:56.120
they would actually understand
what's going on here.

48
00:02:56.120 --> 00:03:00.307
Rather than if you had kinda big if-else
blocks that have a bunch of functions in

49
00:03:00.307 --> 00:03:04.808
it, which again, I think sometimes we find
it's a little bit tricky with, I think,

50
00:03:04.808 --> 00:03:06.265
sort of React components.

51
00:03:06.265 --> 00:03:07.660
Those can be harder to follow,

52
00:03:07.660 --> 00:03:10.733
especially if you don't have as
much experience with JavaScript.

53
00:03:10.733 --> 00:03:13.523
But this here keeps visually a semantic,

54
00:03:13.523 --> 00:03:16.799
concise way of telling
people what's going on.

55
00:03:18.795 --> 00:03:25.025
Now, the other directive that I
wanna talk about is this one.

56
00:03:25.025 --> 00:03:27.746
But before we do that,
here's a slide to talk about this.

57
00:03:27.746 --> 00:03:30.679
And this is a while ago from Sam Saccone,
and

58
00:03:30.679 --> 00:03:36.150
what it says here is that 99.7% of
software development in one requirement,

59
00:03:36.150 --> 00:03:39.101
a user should be able to
view a list of items.

60
00:03:39.101 --> 00:03:40.821
And I still think that's
incredibly relevant today, right?

61
00:03:40.821 --> 00:03:44.169
That's what we're doing half the time,
we're talking a bunch of data,

62
00:03:44.169 --> 00:03:45.201
rendering out a list.

63
00:03:45.201 --> 00:03:49.497
And I don't know about you all, but
when I was doing this in React originally,

64
00:03:49.497 --> 00:03:52.373
I realized there's a lot
of different ways to do it.

65
00:03:52.373 --> 00:03:55.771
And I know that there's more of a best
practice now, but that can be confusing

66
00:03:55.771 --> 00:03:58.647
for users, especially if they have
a function that runs the map,

67
00:03:58.647 --> 00:04:00.497
or maybe in this case, it uses a for loop.

68
00:04:00.497 --> 00:04:03.911
There's a lot of kinda
deciding what to do.

69
00:04:03.911 --> 00:04:07.631
And so let's go ahead and
show how rendering a list works in Vue.

70
00:04:07.631 --> 00:04:12.994
So in this case, I'm just gonna do a list
of numbers here just to keep it easy,

71
00:04:12.994 --> 00:04:16.887
and so 1, 2, 3, 4, 5, and
we have an array here.

72
00:04:16.887 --> 00:04:21.650
And then what we're gonna do here is
we're just gonna do an unordered list.

73
00:04:21.650 --> 00:04:23.694
And then what are we trying to repeat,
right?

74
00:04:23.694 --> 00:04:25.328
We're trying to repeat the list item.

75
00:04:25.328 --> 00:04:29.233
So what we're gonna have is,
if you might wanna guess, is that we have

76
00:04:29.233 --> 00:04:33.560
the v-for directive, right, using the for
loop concept from JavaScript.

77
00:04:33.560 --> 00:04:34.610
And what are we looping for?

78
00:04:34.610 --> 00:04:38.756
For every number in listOfNumbers,

79
00:04:38.756 --> 00:04:43.979
we're gonna go ahead and
just put the number.

80
00:04:43.979 --> 00:04:45.915
That's it,.

81
00:04:45.915 --> 00:04:49.084
And if you refresh, there you go, done.

82
00:04:49.084 --> 00:04:53.651
Your list is rendered, it's fantastic.

83
00:04:53.651 --> 00:04:57.631
And so what's really nice about this, once
again, is that we are trying to extend

84
00:04:57.631 --> 00:05:01.743
upon people's base knowledge of JavaScript
without getting too much in the weeds.

85
00:05:01.743 --> 00:05:05.866
Again, the syntax is written in a way
that's approachable for people to,

86
00:05:05.866 --> 00:05:07.707
sort of in plain English really.

87
00:05:07.707 --> 00:05:10.181
For number in listOfNumbers,
print number, great,

88
00:05:10.181 --> 00:05:13.047
I understand what that means
even if I don't know JavaScript.

89
00:05:13.047 --> 00:05:16.823
The other fun fact about the declarative
rendering of the curly braces here is that

90
00:05:16.823 --> 00:05:18.903
it's not meant to just
print out variables,

91
00:05:18.903 --> 00:05:21.706
it actually does evaluate
JavaScript statements in there.

92
00:05:21.706 --> 00:05:27.051
So if in the case of, let's say, we wanted
to be really excited about the fact

93
00:05:27.051 --> 00:05:31.925
that it's Even, we can actually do
toUpperCase in here, and run it.

94
00:05:31.925 --> 00:05:34.367
And then you'll see that it'll
actually transform the text,

95
00:05:34.367 --> 00:05:36.868
it'll basically run the JavaScript
inside of it immediately.

96
00:05:36.868 --> 00:05:39.665
So theoretically,
you can also do things like, well,

97
00:05:39.665 --> 00:05:43.011
let's just multiply Math.random in here,
and we refresh this.

98
00:05:43.011 --> 00:05:47.017
Boom, I mean [LAUGH] we got some
interesting numbers up here, but

99
00:05:47.017 --> 00:05:48.866
that's something to consider.

100
00:05:48.866 --> 00:05:51.195
Now, the thing about this is
when people discover this,

101
00:05:51.195 --> 00:05:52.905
sometimes they get really carried away.

102
00:05:52.905 --> 00:05:55.883
And we're talking ternary statements and
ternary statements.

103
00:05:55.883 --> 00:05:58.276
And that to me is very,
I would say, anti-Vue ethos,

104
00:05:58.276 --> 00:06:01.987
in that we're trying to make it easy for
people to understand the code base, right?

105
00:06:01.987 --> 00:06:05.499
So I would say, when it comes to basically
in-lining your JavaScript inside of these

106
00:06:05.499 --> 00:06:07.837
double curly braces, I would say,
keep it to a minimum,

107
00:06:07.837 --> 00:06:10.314
and try to abstract that logic
as much as humanly possible.

108
00:06:10.314 --> 00:06:13.950
So the question we have here is in regard
to the differences between the Vue 2 way

109
00:06:13.950 --> 00:06:14.830
and the Vue 3 way.

110
00:06:14.830 --> 00:06:16.610
So the Vue 3 way, as we see here,

111
00:06:16.610 --> 00:06:19.417
is that you can abstract
a helper function from Vue.

112
00:06:19.417 --> 00:06:25.005
Or for those familiar with the Vue 2 way,
it was new Vue,

113
00:06:25.005 --> 00:06:29.438
you would instantiate
a new Vue app this way.

114
00:06:29.438 --> 00:06:33.003
And so part of the reason this
approach has changed is because Vue

115
00:06:33.003 --> 00:06:37.229
3 has become a lot about becoming
modular and performant, in other words,

116
00:06:37.229 --> 00:06:40.283
being able to split apart
things that you don't need.

117
00:06:40.283 --> 00:06:42.649
With this sort of new Vue approach,
basically,

118
00:06:42.649 --> 00:06:44.790
you have everything instantiated with it.

119
00:06:44.790 --> 00:06:46.888
And it was a lot harder from
a bundling perspective,

120
00:06:46.888 --> 00:06:49.047
think of it from a library
maintenance perspective.

121
00:06:49.047 --> 00:06:52.492
That was a lot of the motivation
behind this new approach,

122
00:06:52.492 --> 00:06:55.387
which you'll see a lot
more in Vue 3 code bases.

123
00:06:55.387 --> 00:06:58.802
Is that there's a lot of helper functions,
which we'll actually see in this workshop,

124
00:06:58.802 --> 00:07:01.852
that allow you to basically break apart
pieces of Vue that are helpful in certain

125
00:07:01.852 --> 00:07:02.373
instances.

126
00:07:02.373 --> 00:07:06.598
And otherwise, it'll know to either drop
certain things and optimize itself away.

127
00:07:06.598 --> 00:07:11.648
&gt;&gt; I expected that v-for inside
the ul instead of an li.

128
00:07:11.648 --> 00:07:15.909
&gt;&gt; So the question here is around
the idea of the v-for element being,

129
00:07:15.909 --> 00:07:20.772
basically, someone having the impression
that they thought that they would

130
00:07:20.772 --> 00:07:22.368
put it on the ul element.

131
00:07:22.368 --> 00:07:25.310
But the reason why this is not the case
is because we have to think through

132
00:07:25.310 --> 00:07:28.020
what exactly we want the renderer
to be looping through, right?

133
00:07:28.020 --> 00:07:29.964
What is the element we're repeating?

134
00:07:29.964 --> 00:07:34.569
And in this case, we're repeating the list
in this regard, and not say it like,

135
00:07:34.569 --> 00:07:37.033
we don't want the entire unordered list.

136
00:07:37.033 --> 00:07:44.195
So for example, if we did this, you'll
see, we'll just show the difference.

137
00:07:44.195 --> 00:07:48.313
So we can do it like this, and
if we refresh it, you'll notice that,

138
00:07:48.313 --> 00:07:50.948
at first glance,
it kind of looks the same.

139
00:07:50.948 --> 00:07:53.032
But when we take a look underneath,

140
00:07:53.032 --> 00:07:57.694
you'll see that there are individual
unordered lists happening in this case.

141
00:07:57.694 --> 00:08:00.664
So don't get me wrong,
if in the case you have a bunch of, okay,

142
00:08:00.664 --> 00:08:02.601
let's just actually give that example.

143
00:08:02.601 --> 00:08:07.135
If in the case,
we have different things that were going

144
00:08:07.135 --> 00:08:11.483
on in each element,
okay, so 1, 2, 3, 4, 5.

145
00:08:11.483 --> 00:08:15.824
So we had an object here,
and let's say, name.

146
00:08:15.824 --> 00:08:19.363
Let me do Text Pastry 1 to 3.

147
00:08:19.363 --> 00:08:24.129
And then our id,
let's just do Text Pastry uuid.

148
00:08:24.129 --> 00:08:30.264
Whoa, I need that first,
Text Pastry uuid, boom, okay, save.

149
00:08:30.264 --> 00:08:34.553
Okay, so here we have a more
complex dataset, right?

150
00:08:34.553 --> 00:08:38.183
We have a bunch of objects in each,
and so if I refresh this now,

151
00:08:38.183 --> 00:08:42.722
you might notice that, well, nothing,
did I mess something up syntax wise?

152
00:08:42.722 --> 00:08:45.375
&gt;&gt; There's math on that.

153
00:08:45.375 --> 00:08:47.235
&gt;&gt; I'm doing math, okay,
that totally makes sense.

154
00:08:47.235 --> 00:08:48.431
All right, okay, here we go.

155
00:08:48.431 --> 00:08:52.190
So now if I save this, so
in this particular case,

156
00:08:52.190 --> 00:08:56.052
maybe then inside of here,
we then have a sublist.

157
00:08:56.052 --> 00:08:59.740
So I've realized I actually didn't
even add the other thing I needed.

158
00:08:59.740 --> 00:09:03.915
So we could even say, inside of here,
we had another list inside of here.

159
00:09:03.915 --> 00:09:06.412
That was an 1, 2, 3, 4 example.

160
00:09:06.412 --> 00:09:10.726
Then we might say, for example,
in this particular list,

161
00:09:10.726 --> 00:09:15.234
we want the first item to show the ID,
so we say, number.id.

162
00:09:15.234 --> 00:09:18.889
And then we could then
embed a second list, and

163
00:09:18.889 --> 00:09:23.962
that's where we would loop
through number.list, like this.

164
00:09:23.962 --> 00:09:27.688
So instead of number,
I'm gonna say, switch this to item,

165
00:09:27.688 --> 00:09:29.596
cuz now this is more accurate.

166
00:09:29.596 --> 00:09:36.370
And then number in number.list,
and then number like this.

167
00:09:36.370 --> 00:09:37.823
So then we refresh this.

168
00:09:37.823 --> 00:09:39.001
I broke something.

169
00:09:39.001 --> 00:09:39.806
&gt;&gt; item.list.

170
00:09:39.806 --> 00:09:43.371
&gt;&gt; item.list
&gt;&gt; item.list.

171
00:09:43.371 --> 00:09:46.809
&gt;&gt; Number in number.list
should be number in item.list.

172
00:09:46.809 --> 00:09:48.835
&gt;&gt; Yes, [LAUGH] good catch.

173
00:09:48.835 --> 00:09:51.345
Okay, there we go.

174
00:09:51.345 --> 00:09:53.799
And so that's an example of where
you might wanna loop possibly,

175
00:09:53.799 --> 00:09:55.594
although at that point,
it might even be a div.

176
00:09:55.594 --> 00:09:57.811
Kinda be wondering why
you'd want just the one.

177
00:09:57.811 --> 00:10:02.300
But consider basically how you
want the semantic HTML to be

178
00:10:02.300 --> 00:10:07.889
rendered out at the end of the day,
and that's the key thing.

179
00:10:07.889 --> 00:10:12.482
Quick note before the next question,
in case anyone was wondering how I sort of

180
00:10:12.482 --> 00:10:16.533
did the data population,
that is the Text Pastry VS Code extension.

181
00:10:16.533 --> 00:10:21.301
That's highly underutilized, but
it's really great at generating things on

182
00:10:21.301 --> 00:10:24.216
the fly as far as ranges,
and also custom UUIDs,

183
00:10:24.216 --> 00:10:29.073
which is great for random data when you're
doing some sandbox coding like I did.

184
00:10:30.589 --> 00:10:32.263
Next question.

185
00:10:32.263 --> 00:10:37.729
&gt;&gt; Is that data attribute in
the createApp, is that required,

186
00:10:37.729 --> 00:10:41.706
or can we rename it to
something like state?

187
00:10:41.706 --> 00:10:45.435
&gt;&gt; So the question here is around
this particular keyword data here.

188
00:10:45.435 --> 00:10:49.631
In this particular context, when you're
passing a configuration object to

189
00:10:49.631 --> 00:10:54.083
createApp, this is basically a reserved
keyword, in that it is called data, and

190
00:10:54.083 --> 00:10:55.519
that's what it has to be.

191
00:10:55.519 --> 00:10:59.389
However, I will tell you right now that if
you're more of a fan of calling it state,

192
00:10:59.389 --> 00:11:02.155
there is gonna be another style
of components that we'll be

193
00:11:02.155 --> 00:11:05.394
covering that will allow you to
basically name things as you see fit.

194
00:11:05.394 --> 00:11:09.282
But basically, what you're seeing
here is basically a preview

195
00:11:09.282 --> 00:11:13.752
of what is known in Vue 2, or, well,
Vue 2 and Vue 3 as the options API.

196
00:11:13.752 --> 00:11:17.516
In that Vue will provide you a set of
options to do what you need to do inside

197
00:11:17.516 --> 00:11:18.210
of your app.

198
00:11:18.210 --> 00:11:22.083
And those configuration and rail guards
are actually, in my opinion, very powerful

199
00:11:22.083 --> 00:11:25.170
when it comes to people either
onboarding to Vue for the first time.

200
00:11:25.170 --> 00:11:28.755
Or when they're looking to set a standard
and consistency across their team,

201
00:11:28.755 --> 00:11:30.669
options API can be incredibly powerful.

202
00:11:30.669 --> 00:11:33.761
But we'll show a little bit more about how
that works before we get into the other

203
00:11:33.761 --> 00:11:36.853
one, which is composition API, which for
the person who asked that question,

204
00:11:36.853 --> 00:11:39.000
you might be more interested
in when we get to that one.

