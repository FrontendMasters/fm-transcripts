WEBVTT

1
00:00:00.000 --> 00:00:03.719
So what I'd like you to do is
to actually give this a shot,

2
00:00:03.719 --> 00:00:08.071
practice around using the idea of
a composable in your directory.

3
00:00:08.071 --> 00:00:10.897
So basically,
I kind of wanted to outline it a bit.

4
00:00:10.897 --> 00:00:13.284
You'll create a composables folder
inside of your source directory.

5
00:00:13.284 --> 00:00:14.505
Look inside of your app,

6
00:00:14.505 --> 00:00:18.297
see what opportunities there might be
to share some state or functionality.

7
00:00:18.297 --> 00:00:22.267
Or if you don't have it, obviously, like
I did earlier, just go ahead and do so

8
00:00:22.267 --> 00:00:24.779
to practice it,
practice sharing those things.

9
00:00:24.779 --> 00:00:28.281
And so here I said create a file
called useState or useFunction.

10
00:00:28.281 --> 00:00:31.438
Basically I know in my case I called
it countStore, which is a lead in for

11
00:00:31.438 --> 00:00:32.819
something else in the future.

12
00:00:32.819 --> 00:00:35.995
But generally speaking,
when you're naming your composables,

13
00:00:35.995 --> 00:00:37.476
you do prefix it with that use.

14
00:00:37.476 --> 00:00:40.750
So in that case, I should have probably
named it like useCountStore, for example.

15
00:00:40.750 --> 00:00:43.917
And then otherwise just try stuff out.

16
00:00:47.469 --> 00:00:50.592
All right, so
how that feel with the composables?

17
00:00:50.592 --> 00:00:55.082
Is is that kind of a bit
weird to deal with?

18
00:00:55.082 --> 00:00:58.360
I see a lot of people still typing,
so probably still tinkering away.

19
00:00:58.360 --> 00:01:02.081
People in the chat, if you had any
sort of issues with those composable,

20
00:01:02.081 --> 00:01:03.118
please let me know.

21
00:01:03.118 --> 00:01:08.068
So I'm just gonna head and kind of walk
through a simple example for the solution,

22
00:01:08.068 --> 00:01:12.245
and kind of talk through some
theoretical things while we're at it.

23
00:01:12.245 --> 00:01:15.242
So let's go ahead and
switch over to C'est La Vue.

24
00:01:15.242 --> 00:01:18.546
So if we look at C'est La Vue,
what do we have?

25
00:01:18.546 --> 00:01:20.717
Well, we have a couple things going on.

26
00:01:20.717 --> 00:01:21.845
We have a UserCard here.

27
00:01:21.845 --> 00:01:24.017
It's fine, UserPage, okay.

28
00:01:24.017 --> 00:01:26.447
We have some async stuff happening.

29
00:01:26.447 --> 00:01:28.589
All right, well,
this is in the script setup, so

30
00:01:28.589 --> 00:01:30.077
this actually might be a good one.

31
00:01:30.077 --> 00:01:32.529
So let's say for instance, then,

32
00:01:32.529 --> 00:01:37.201
that we want the ability to display
the users in more than one place.

33
00:01:37.201 --> 00:01:39.781
Cuz the UserPage is a great place
to list it, but on the other hand,

34
00:01:39.781 --> 00:01:42.841
there might be reasons actually to
display it on the homepage, for instance.

35
00:01:42.841 --> 00:01:45.768
So let's just abstract that
away into a composable.

36
00:01:45.768 --> 00:01:51.966
So I'm gonna go ahead and
create a new folder here for composables.

37
00:01:51.966 --> 00:01:54.274
And then we're gonna create one, and

38
00:01:54.274 --> 00:01:58.326
following the syntax now we're
gonna call it useUserStore.js.

39
00:01:58.326 --> 00:02:06.044
And all we're gonna do here is we're
gonna do a import reactive from Vue.

40
00:02:06.044 --> 00:02:12.528
And then we're going to export
a const called userList.

41
00:02:12.528 --> 00:02:16.670
Although actually,
you know what I'm gonna do?

42
00:02:16.670 --> 00:02:19.754
Because we're actually just
exporting the single array,

43
00:02:19.754 --> 00:02:22.475
I prefer usually to use ref
when it's not an object.

44
00:02:22.475 --> 00:02:25.266
So reactive is usually when I think
of like a more complex object,

45
00:02:25.266 --> 00:02:27.416
that's personally kind
of where I lean towards.

46
00:02:27.416 --> 00:02:31.041
So userList is a ref of an array,
that's all this is.

47
00:02:31.041 --> 00:02:35.289
And so now that we have this here,
we can go inside of UserPage and

48
00:02:35.289 --> 00:02:38.356
we can change this up
basically to say okay, so

49
00:02:38.356 --> 00:02:43.248
I'm gonna import, From, from what?

50
00:02:43.248 --> 00:02:48.737
From, go up one level,
go to composables, go to useUserStore.

51
00:02:48.737 --> 00:02:52.749
And then what we're looking for
inside of here is the userList,

52
00:02:52.749 --> 00:02:55.139
which is auto completed right there.

53
00:02:55.139 --> 00:02:57.097
So now we can technically delete this.

54
00:02:57.097 --> 00:03:00.982
And then this means we can
delete the reactive up here.

55
00:03:00.982 --> 00:03:05.228
And then wherever userList is being
called, we will remove the state.

56
00:03:05.228 --> 00:03:08.595
And then because we're in script setup,
remember that it's a ref.

57
00:03:08.595 --> 00:03:10.266
So we just unpack it with .value.

58
00:03:10.266 --> 00:03:13.161
And again, it's nice cuz
the tooling has updated now, so

59
00:03:13.161 --> 00:03:16.186
that it will actually tell you
that it expected the .value.

60
00:03:16.186 --> 00:03:18.418
There was a time where the tooling
hadn't caught up, and so

61
00:03:18.418 --> 00:03:21.293
it was really easy to miss that on your
own if you weren't paying attention.

62
00:03:21.293 --> 00:03:24.208
And so there we go,
userList is now available.

63
00:03:24.208 --> 00:03:27.611
We can save and
everything should still look good.

64
00:03:27.611 --> 00:03:28.200
Yeah, it looks good to me.

65
00:03:28.200 --> 00:03:33.015
If we go to Home now, let's actually
show that we can do something similar.

66
00:03:33.015 --> 00:03:36.890
So we'll go now over to the home page.

67
00:03:36.890 --> 00:03:41.378
So homepage, and I'll just use
the script setup again up here.

68
00:03:41.378 --> 00:03:45.928
And let me just actually copy that,
snip it over from up here.

69
00:03:45.928 --> 00:03:46.881
So import, there we go,
userList from that.

70
00:03:46.881 --> 00:03:51.948
Import userList right here.

71
00:03:51.948 --> 00:03:56.140
And again, once we've imported it, the
mental model shift that you have to think

72
00:03:56.140 --> 00:03:58.409
about here is that it
is already available.

73
00:03:58.409 --> 00:04:04.350
So we can go ahead and
just do an li in this case.

74
00:04:04.350 --> 00:04:11.208
And then v for user in userList and
then user.name.

75
00:04:11.208 --> 00:04:12.809
I think that should work.

76
00:04:12.809 --> 00:04:14.968
There we go, it's looking good.

77
00:04:14.968 --> 00:04:18.913
And then to show you why this is
incredibly powerful is that maybe in this

78
00:04:18.913 --> 00:04:23.206
specific context, this is where I want
to actually only show the first five.

79
00:04:23.206 --> 00:04:26.086
And so I don't need this
to pollute the entire file.

80
00:04:26.086 --> 00:04:33.557
What I can do is Is I can just import
the computed property from Vue.

81
00:04:33.557 --> 00:04:39.224
And just say const shortUserList

82
00:04:39.224 --> 00:04:43.877
is a computed property that

83
00:04:43.877 --> 00:04:48.735
returns userList.value,

84
00:04:48.735 --> 00:04:51.982
[SOUND] what was it?

85
00:04:51.982 --> 00:04:56.697
Splice, let's see, yes,
splice (0, 5), I think.

86
00:04:56.697 --> 00:04:58.118
I think that returns it, great.

87
00:04:58.118 --> 00:05:01.137
And then we can do shortUserList here.

88
00:05:01.137 --> 00:05:03.052
You'll notice, there we go.

89
00:05:03.052 --> 00:05:07.022
Now we have this global piece of data that
is shared in two files, but we also have

90
00:05:07.022 --> 00:05:10.700
some very specific contexts on how we
might wanna manipulate that data for

91
00:05:10.700 --> 00:05:11.785
that one component.

92
00:05:11.785 --> 00:05:15.775
And that in and of itself is, I think, the
power of the idea of a composition API,

93
00:05:15.775 --> 00:05:19.617
in that you can really start to compose
things the way that makes sense to you.

94
00:05:19.617 --> 00:05:23.077
And so the other thing about Vue 3,
which we're not gonna cover at all,

95
00:05:23.077 --> 00:05:26.310
but I did wanna make a mention to it
because those coming from Vue 2 or

96
00:05:26.310 --> 00:05:29.545
those looking at Vue 3 docs might
notice that mixins are a thing that

97
00:05:29.545 --> 00:05:32.263
also were particularly popular
during the Vue 2 days.

98
00:05:32.263 --> 00:05:35.406
And mixins what they basically
allow you to do, it was a way for

99
00:05:35.406 --> 00:05:38.504
you to share functionality and
state using the options API.

100
00:05:38.504 --> 00:05:42.034
Nowadays I would say the fact that
you have these composable and

101
00:05:42.034 --> 00:05:46.165
reusable pieces of state and function
that's easily injectable in a very

102
00:05:46.165 --> 00:05:50.919
concise way, these are basically superior
to mixins in every way, shape and form.

103
00:05:50.919 --> 00:05:55.080
It's really actually hard to argue for
using mixins over the composables.

104
00:05:55.080 --> 00:05:59.050
So it is valuable to spend the time to
get familiar with it, try it out, and

105
00:05:59.050 --> 00:06:02.391
start figuring out where it kinda
lands in your comfort zone.

106
00:06:02.391 --> 00:06:06.810
But as you can see here, there's something
really nice about being able to say okay,

107
00:06:06.810 --> 00:06:10.490
yeah, I'm getting what the userList
from where there's useUserStore.

108
00:06:10.490 --> 00:06:13.461
And then you just know where everything
is, everything's named correctly or

109
00:06:13.461 --> 00:06:15.676
if you need to update it,
cuz there's some name clashes.

110
00:06:15.676 --> 00:06:18.196
Everything is very declarative and
explicit.

111
00:06:18.196 --> 00:06:24.115
So, yeah, so these are composables in a
nutshell, and that kind of puts a wrap on

112
00:06:24.115 --> 00:06:29.183
the composition API section of all
the things we're talking about.

