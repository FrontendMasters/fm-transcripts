WEBVTT

1
00:00:00.000 --> 00:00:03.004
I've talked a bit about computed
properties in Watchers,

2
00:00:03.004 --> 00:00:05.898
we're gonna have you go ahead and
play around with that.

3
00:00:05.898 --> 00:00:12.027
So for your exercise, you will have put
a bunch of characters inside of your show.

4
00:00:12.027 --> 00:00:15.035
So you probably have certain attributes
that you can put basically on those

5
00:00:15.035 --> 00:00:15.952
characters, right?

6
00:00:15.952 --> 00:00:19.315
Whether it's their age, height, whatever
you want, but then based on those,

7
00:00:19.315 --> 00:00:21.110
add those attributes to your characters.

8
00:00:21.110 --> 00:00:24.859
And then use a computer property to start
generating some sort of statistics.

9
00:00:24.859 --> 00:00:27.033
So for example,
mine is Avatar Last Airbender.

10
00:00:27.033 --> 00:00:30.746
I could be like, okay,
two of them are waterbenders,

11
00:00:30.746 --> 00:00:33.250
three of them are earthbenders, and

12
00:00:33.250 --> 00:00:37.397
then I can run computations on
the percentage that might be.

13
00:00:37.397 --> 00:00:39.139
So just have a play around with that,

14
00:00:39.139 --> 00:00:42.518
it's one of those things where we'll
be reusing a lot as we go forward.

15
00:00:42.518 --> 00:00:45.506
And so, don't worry, you'll get plenty
of opportunity to play around with that.

16
00:00:48.901 --> 00:00:50.274
Welcome back everyone.

17
00:00:50.274 --> 00:00:53.266
I hope that you found that exercise with
the computer properties kinda fun to play

18
00:00:53.266 --> 00:00:53.800
around with.

19
00:00:53.800 --> 00:00:57.316
But again, you'll get plenty of
opportunity to practice that cuz I think

20
00:00:57.316 --> 00:01:01.073
it's one of the features we need to use
more of and see more of in the ecosystem.

21
00:01:01.073 --> 00:01:03.562
So definitely we'll be pushing that.

22
00:01:03.562 --> 00:01:08.267
But during the exercise there was a great
question regarding the differences between

23
00:01:08.267 --> 00:01:09.449
computed and watch.

24
00:01:09.449 --> 00:01:13.670
Earlier in the example I showed,
you notice that the reason why I mentioned

25
00:01:13.670 --> 00:01:16.618
that the watch is not a great
sort of technique in this

26
00:01:16.618 --> 00:01:20.505
particular case is because you're
dealing with the reactive data.

27
00:01:20.505 --> 00:01:24.699
In other words, you're basically doing a
computation that you're manually tracking.

28
00:01:24.699 --> 00:01:28.061
This is not to say that watch as
a technique is invalid, however.

29
00:01:28.061 --> 00:01:30.768
What that really means is that
when it comes to computing data,

30
00:01:30.768 --> 00:01:34.103
combining those things like we see up
here with optimized increment amount.

31
00:01:34.103 --> 00:01:37.841
Where you have multiple dependencies,
computed will do a lot of work for

32
00:01:37.841 --> 00:01:39.198
you right out of the gate.

33
00:01:39.198 --> 00:01:40.659
And so that's when you wanna do that,

34
00:01:40.659 --> 00:01:42.851
anytime you're modifying
something returning it, and

35
00:01:42.851 --> 00:01:45.651
you wanna be like, I wanna display
something slightly different.

36
00:01:45.651 --> 00:01:50.441
And so actually the question earlier
regarding the strings and combining them,

37
00:01:50.441 --> 00:01:55.090
that would be an example where the
character list for example, could be like,

38
00:01:55.090 --> 00:01:57.007
let's say, comma separated.

39
00:01:57.007 --> 00:01:57.960
This is a bad name.

40
00:01:57.960 --> 00:02:01.284
But you could do something like
this .characterList.split,

41
00:02:01.284 --> 00:02:03.315
you could do your calculation in here,

42
00:02:03.315 --> 00:02:07.515
and then just return that in the render
thing, and that would already look good.

43
00:02:07.515 --> 00:02:10.183
So I will show that later
when we're doing it.

44
00:02:10.183 --> 00:02:15.059
But to the main plan I wanna make,
though, is that watch is really good for

45
00:02:15.059 --> 00:02:18.690
when you wanna trigger a side
effect on your code base.

46
00:02:18.690 --> 00:02:23.150
So in other words, you can imagine, if
you might wanna have a specific API call

47
00:02:23.150 --> 00:02:25.935
when your reactive data
has set a certain state.

48
00:02:25.935 --> 00:02:29.388
That would be a great example of when
computed wouldn't make any sense at all,

49
00:02:29.388 --> 00:02:31.285
because computed is about managing data.

50
00:02:31.285 --> 00:02:34.533
Managing, triggering actions,
that kind of stuff, watch is perfect for

51
00:02:34.533 --> 00:02:35.418
that kind of stuff.

52
00:02:35.418 --> 00:02:39.003
Just know that's the main paradigm
difference between the two when it

53
00:02:39.003 --> 00:02:40.105
comes to using them.

54
00:02:40.105 --> 00:02:46.719
Okay, so
let's take a look at this example.

55
00:02:46.719 --> 00:02:52.009
So I'm gonna go my index
to do the solution together

56
00:02:54.181 --> 00:02:58.270
Okay, so here, okay,
you got my characters here, and

57
00:02:58.270 --> 00:03:02.796
this time let's add a property,
let's call there element.

58
00:03:02.796 --> 00:03:07.237
And so I know that Aang is Air,

59
00:03:07.237 --> 00:03:11.333
Earth, Water, and Fire.

60
00:03:11.333 --> 00:03:17.913
And we won't get into SQL stuff for anyone
who isn't Avatar:The Last Airbender fan.

61
00:03:17.913 --> 00:03:23.724
So we have Fire, we won't worry
about stuff like lightning and

62
00:03:23.724 --> 00:03:27.463
iron metal bending for now, and Water.

63
00:03:27.463 --> 00:03:30.362
Okay, so here we have all of
our stuff here, and then for

64
00:03:30.362 --> 00:03:34.391
the sake of consistency, let's just
make sure we go and add an element here.

65
00:03:34.391 --> 00:03:36.084
That's an empty array.

66
00:03:36.084 --> 00:03:43.431
Great, okay, so from here we could do
basically some statistic, shall we?

67
00:03:43.431 --> 00:03:47.916
So for now, let's go ahead and actually
add a h2 here for just characters.

68
00:03:47.916 --> 00:03:49.885
So this is consistent, there you go.

69
00:03:49.885 --> 00:03:52.541
Characters up top favorite characters,
new character.

70
00:03:52.541 --> 00:03:56.060
All right, and then actually just like I
did before, I'm gonna go the most recent

71
00:03:56.060 --> 00:03:59.130
thing so that it's right at the top,
which is easier for people to see.

72
00:03:59.130 --> 00:04:01.413
Let's talk about statistics.

73
00:04:01.413 --> 00:04:06.252
And so for something like statistics,
we wanna figure out, so

74
00:04:06.252 --> 00:04:10.652
for example,
let's see how many Earthbenders we have.

75
00:04:10.652 --> 00:04:12.878
And then we have how many Airbenders?

76
00:04:12.878 --> 00:04:16.776
We have Waterbenders, and
then we have Firebenders.

77
00:04:16.776 --> 00:04:20.744
Okay, a couple of ways to do this, but
we'll start with the simple approach

78
00:04:20.744 --> 00:04:24.655
first, which is that let's say we
wanna track the Earthbenders, right?

79
00:04:24.655 --> 00:04:25.727
That was one of the ones I'd mentioned.

80
00:04:25.727 --> 00:04:27.681
So let me hide data real quick.

81
00:04:29.988 --> 00:04:33.793
So we're gonna do with a computed
property cuz we're basically just

82
00:04:33.793 --> 00:04:36.231
computing data off of
what we already have.

83
00:04:36.231 --> 00:04:42.159
So we can do is we say earthBenders,
let's say earthBenderlist like that, and

84
00:04:42.159 --> 00:04:48.718
so return this .characterList, and we're
gonna filter it based on every character.

85
00:04:48.718 --> 00:04:53.910
And basically, we wanna know if,
actually let me do this the long way.

86
00:04:53.910 --> 00:04:58.697
If character.element, and
then I realized there are more than ones

87
00:04:58.697 --> 00:05:01.844
that no use that name right,
but it's fine.

88
00:05:01.844 --> 00:05:05.893
.element dot I think contained
to do the trick Earth.

89
00:05:08.869 --> 00:05:15.032
And then we are just going to,
actually, we'll do this one more.

90
00:05:15.032 --> 00:05:18.378
Let's see, return the filter.

91
00:05:18.378 --> 00:05:22.564
Yeah, yap, okay,
we can do it this way if it's

92
00:05:22.564 --> 00:05:26.871
contains element Earth,
and then return true.

93
00:05:26.871 --> 00:05:29.466
And then we're returning
the length of this thing.

94
00:05:29.466 --> 00:05:31.047
So this is a little bit convoluted.

95
00:05:31.047 --> 00:05:33.045
I wanna go ahead and
refactor this real quick.

96
00:05:33.045 --> 00:05:36.618
So we can basically say that this
contains to the earthBenders,

97
00:05:36.618 --> 00:05:40.126
is what this filter does,
it goes through all the characters,

98
00:05:40.126 --> 00:05:43.854
checks if they have it, and
if they have it, then it returns true.

99
00:05:43.854 --> 00:05:47.833
So the easier way to actually write
this is to return since the logic is not

100
00:05:47.833 --> 00:05:48.691
complicated.

101
00:05:48.691 --> 00:05:50.656
We can actually just do it like this.

102
00:05:52.100 --> 00:05:53.398
One more.

103
00:05:53.398 --> 00:05:54.472
There you go.

104
00:05:54.472 --> 00:05:59.489
So there we go and then,
once we have earthBenders we can return

105
00:05:59.489 --> 00:06:04.800
earthBenders, actually we can
just return the list itself.

106
00:06:04.800 --> 00:06:07.787
I'm actually overthinking this.

107
00:06:07.787 --> 00:06:08.546
Okay, here we go.

108
00:06:08.546 --> 00:06:11.941
So to show that this actually does work,
I'm gonna go ahead and

109
00:06:11.941 --> 00:06:13.942
render out the earthBenders first.

110
00:06:13.942 --> 00:06:18.273
So earthBenderList, right.

111
00:06:18.273 --> 00:06:23.487
If we refresh, something broke,

112
00:06:23.487 --> 00:06:27.124
contains, I missed that.

113
00:06:29.327 --> 00:06:32.122
Is contains, okay, that's fine.

114
00:06:32.122 --> 00:06:33.893
Contains always kind of throws me off.

115
00:06:33.893 --> 00:06:37.024
Greater than -1 that should be.

116
00:06:37.024 --> 00:06:38.788
There we go much better.

117
00:06:38.788 --> 00:06:42.608
Okay, so we'll see here now
is that it's gone ahead and

118
00:06:42.608 --> 00:06:47.405
taken our list of characters and
it's refined it down to the array with

119
00:06:47.405 --> 00:06:51.165
only the characters that
have like the Earth element.

120
00:06:51.165 --> 00:06:56.020
And so again, this is useful because
then we could do is we can say,

121
00:06:56.020 --> 00:07:00.732
okay, well then in this case we
have .length, and there we go.

122
00:07:00.732 --> 00:07:03.143
We have the number of earthBenders.

123
00:07:03.143 --> 00:07:09.001
And so you could basically duplicate
this down as far as doing each one.

124
00:07:09.001 --> 00:07:14.553
So I think though, for the sake of
making this a programmatic exercise,

125
00:07:14.553 --> 00:07:17.566
we can just say see benderStatistics.

126
00:07:17.566 --> 00:07:20.131
And rather than break it
up each time we'll have,

127
00:07:20.131 --> 00:07:22.035
we know the list of elements we want.

128
00:07:22.035 --> 00:07:26.790
So we have our elements
which is gonna be Air,

129
00:07:26.790 --> 00:07:29.676
Earth, Fire, and Water.

130
00:07:29.676 --> 00:07:34.884
And so what we can do is then
actually just, we're gonna return

131
00:07:34.884 --> 00:07:40.406
an object where each of these
are gonna contain the updated value.

132
00:07:40.406 --> 00:07:46.394
That way it's easier to display

133
00:07:46.394 --> 00:07:50.835
water and fire, okay.

134
00:07:50.835 --> 00:07:57.965
Finally, we will loop through
every single element so,

135
00:07:57.965 --> 00:08:02.867
this.characterlist.forEach, for

136
00:08:02.867 --> 00:08:05.689
every character, and

137
00:08:05.689 --> 00:08:10.748
then elements.forEach(element).

138
00:08:10.748 --> 00:08:17.011
If character.element.index of,

139
00:08:17.011 --> 00:08:24.691
the naming on this is
gonna be a little wonky.

140
00:08:24.691 --> 00:08:26.363
And it's greater than -1.

141
00:08:28.123 --> 00:08:32.963
Then we will say, const

142
00:08:32.963 --> 00:08:39.506
statistics equals this thing.

143
00:08:39.506 --> 00:08:40.719
So, actually, you know what?

144
00:08:40.719 --> 00:08:43.170
I think I can do this one better.

145
00:08:43.170 --> 00:08:50.285
We can say, statistics

146
00:08:50.285 --> 00:08:57.051
(element) +=1.

147
00:08:57.051 --> 00:09:01.810
Yes, so then we just need to make sure

148
00:09:01.810 --> 00:09:05.810
that is good, just like that.

149
00:09:05.810 --> 00:09:09.570
And then we return statistics.

150
00:09:11.850 --> 00:09:14.320
Okay, that should do the trick.

151
00:09:14.320 --> 00:09:21.459
I think, no wait, if this,
we're missing a parenthesis.

152
00:09:21.459 --> 00:09:23.637
Okay, that should do it.

153
00:09:23.637 --> 00:09:25.800
&gt;&gt; Index of is so off.

154
00:09:25.800 --> 00:09:29.562
&gt;&gt; Index of, you're totally right,

155
00:09:29.562 --> 00:09:35.797
indexof element that's what was off,
good call, thank you.

156
00:09:35.797 --> 00:09:38.708
Okay, now let's give this a shot.

157
00:09:38.708 --> 00:09:41.858
So we just render out the statistics now,

158
00:09:41.858 --> 00:09:45.550
what I call benderStatistics
then we could say,

159
00:09:50.742 --> 00:09:56.345
ForEach is not liking it,
cuz I can't spell, there we go.

160
00:09:58.167 --> 00:10:00.256
So we can see here there's one of each,
and

161
00:10:00.256 --> 00:10:03.391
the reason you get 2 here is because for
those that don't know,

162
00:10:03.391 --> 00:10:06.602
Aang has all the different elements,
so that's how we get that.

163
00:10:06.602 --> 00:10:10.568
And you can see we have
that computed property.

164
00:10:10.568 --> 00:10:12.293
I see there's a question.

165
00:10:12.293 --> 00:10:17.702
&gt;&gt; Should we use reduce here and pass
statistics object as a default parameter?

166
00:10:17.702 --> 00:10:20.307
&gt;&gt; [LAUGH] Reduce is certainly an option.

167
00:10:20.307 --> 00:10:23.268
I just went with what was kind of easier
to do since I know reduce can be kind of

168
00:10:23.268 --> 00:10:25.432
confusing sometimes for
those who don't use it a lot.

169
00:10:25.432 --> 00:10:29.262
But reduce would be a great option in this
point where we could reduce the array and

170
00:10:29.262 --> 00:10:30.683
get the numbers that we want.

171
00:10:30.683 --> 00:10:34.380
And for those who haven't used the reduce
a lot in JavaScript, reduce it's

172
00:10:34.380 --> 00:10:38.329
pretty magical that you can do basically
everything that you would want it to do.

173
00:10:38.329 --> 00:10:40.983
But in that regard, the API can get
a little bit complex sometimes.

174
00:10:40.983 --> 00:10:44.906
So that's why is not my go to
when teaching these things.

175
00:10:44.906 --> 00:10:46.567
So definitely a number of ways to do this.

176
00:10:46.567 --> 00:10:50.273
To be clear, this was just like
a quick code together of how you

177
00:10:50.273 --> 00:10:52.708
could cobble together the statistics.

178
00:10:52.708 --> 00:10:56.776
But I'm sure there are many ways
we could optimize for this.

179
00:10:56.776 --> 00:10:58.168
But I just wanted to show that here.

180
00:10:58.168 --> 00:11:04.229
Now that we actually have everything,
we can show that we can li and

181
00:11:04.229 --> 00:11:11.062
v-for through this bender list, so
I'll say stat in benderStatistics.

182
00:11:11.062 --> 00:11:14.804
And you'll see something interesting,
though, is that if we just do this, just

183
00:11:14.804 --> 00:11:18.618
bender or stat, you'll notice here that
it's only rendering out the right side.

184
00:11:18.618 --> 00:11:19.853
And that's because, well, guess what?

185
00:11:19.853 --> 00:11:22.806
We're in a for loop for
an object, and that's JavaScript.

186
00:11:22.806 --> 00:11:25.329
So that means that if we
want the key as well,

187
00:11:25.329 --> 00:11:28.618
we need to actually just open
it up cuz its value then key.

188
00:11:28.618 --> 00:11:31.320
So I would say type is probably
what I would name that.

189
00:11:31.320 --> 00:11:38.577
And then that way we can do type,
colon, space, refresh, there we go.

190
00:11:38.577 --> 00:11:42.997
We have all our elements, and
it's being computed as you would expect.

191
00:11:42.997 --> 00:11:47.449
And so as you can imagine, you can even
extend on this to be like percentages and

192
00:11:47.449 --> 00:11:51.847
all that fun stuff, and you just keep
building on your computer properties.

193
00:11:51.847 --> 00:11:54.882
And so what's nice about that because
computed properties can be composed,

194
00:11:54.882 --> 00:11:58.210
it allows you to approach it in basically
kind of like a functional programming way.

195
00:11:58.210 --> 00:12:01.200
You code the very small chunk
that does this one computation,

196
00:12:01.200 --> 00:12:02.935
then depend on other chain on that.

197
00:12:02.935 --> 00:12:07.867
And then that way you have actually a very
clean sort of setup when it comes to

198
00:12:07.867 --> 00:12:10.783
managing those individual calculations.

199
00:12:10.783 --> 00:12:18.444
So, that said, does anyone have any
questions regarding what they just saw?

