WEBVTT

1
00:00:00.290 --> 00:00:02.510
And so,
I know that we've gone through all this.

2
00:00:02.510 --> 00:00:07.160
And some of you might be thinking, well,
who builds web apps this way, right?

3
00:00:07.160 --> 00:00:10.496
Because after all, every sort of modern
text that you'll see always talks about

4
00:00:10.496 --> 00:00:12.600
build tools and that kind of thing.

5
00:00:12.600 --> 00:00:16.246
And to be honest, progressive enhancement
is very much a thing that continues to

6
00:00:16.246 --> 00:00:19.370
exist to this day, even though it's
not talked about a lot, right?

7
00:00:19.370 --> 00:00:21.170
Code rewrites are very sexy.

8
00:00:21.170 --> 00:00:25.050
But the truth is when you're dealing
with enterprise systems, it's just not

9
00:00:25.050 --> 00:00:29.310
realistic to stop everything, as we talked
about before, and write new features.

10
00:00:29.310 --> 00:00:33.230
But dropping in the CDN with Vue,
having it progressively enhance.

11
00:00:33.230 --> 00:00:35.057
That all works.

12
00:00:35.057 --> 00:00:37.775
We're not gonna cover it at this
point because we're going to move

13
00:00:37.775 --> 00:00:40.394
into build tools, but
a lot of these things we're seeing here,

14
00:00:40.394 --> 00:00:42.910
they can be just abstracted
into .js files, right?

15
00:00:42.910 --> 00:00:46.451
You can actually modularize your code,
you can do a lot actually, and

16
00:00:46.451 --> 00:00:48.250
make a fairly robust app.

17
00:00:48.250 --> 00:00:52.049
It doesn't have to all live inside of this
single object that I've shown you all,

18
00:00:52.049 --> 00:00:55.030
that's just a way for
us to keep it all as a mental model.

19
00:00:55.030 --> 00:00:58.809
But eventually you can break it out,
import JS into here,

20
00:00:58.809 --> 00:01:01.210
it can still scale pretty darn well.

21
00:01:02.530 --> 00:01:04.855
And so this image here,
which I love, it's like the cake,

22
00:01:04.855 --> 00:01:07.890
that then you get the frosting,
then you get the candles, right?

23
00:01:07.890 --> 00:01:10.667
And so the credit here is Tiffany Tse,
this is her blog post on

24
00:01:10.667 --> 00:01:13.910
What is Progressive Enhancement and
Why Should You Care?

25
00:01:13.910 --> 00:01:17.939
So definitely something that I do think
modern web developers need to consider

26
00:01:17.939 --> 00:01:21.060
when it comes to the realities
of upgrading their code base.

27
00:01:22.750 --> 00:01:26.730
And so this is a smashing article
magazine by Sarah Dresner,

28
00:01:26.730 --> 00:01:29.510
who used to be on the Vue core team.

29
00:01:29.510 --> 00:01:33.534
And this is a great one because the title
of this is Replacing jQuery with Vue.js,

30
00:01:33.534 --> 00:01:35.240
No Build Step Necessary.

31
00:01:35.240 --> 00:01:37.770
And this is also a very
valid way of using Vue.

32
00:01:37.770 --> 00:01:40.615
It's like, if you know that only one
page in your entire app because you're

33
00:01:40.615 --> 00:01:41.683
statically generating it so

34
00:01:41.683 --> 00:01:44.850
that everything's on the server side, but
only one could use some interactivity.

35
00:01:46.070 --> 00:01:49.079
Don't even need jQuery anymore,
you could literally just drop Vue,

36
00:01:49.079 --> 00:01:52.496
because I believe the CDN side is either
roughly the same, if Vue is not slightly

37
00:01:52.496 --> 00:01:55.215
lower at this point, but
that is actually a viable option now.

38
00:01:55.215 --> 00:01:58.342
You don't need to even approach Vue as
a framework, it can be just little bits of

39
00:01:58.342 --> 00:02:00.176
interactivity that are sprinkled in and
out.

40
00:02:02.477 --> 00:02:04.726
And finally, again,
people are always skeptical.

41
00:02:04.726 --> 00:02:06.970
They're like, well,
who's actually done it this way?

42
00:02:06.970 --> 00:02:09.340
Well, GitLab did it this way.

43
00:02:09.340 --> 00:02:11.870
GitLab used to actually
be a Ruby on Rails app.

44
00:02:11.870 --> 00:02:16.681
It was if anyone's worked with Ruby
on Rails, you know that, especially

45
00:02:16.681 --> 00:02:21.382
back then integrating node-based tool
chains into that was extremely painful.

46
00:02:21.382 --> 00:02:23.900
Again, and
also they needed to ship features, right?

47
00:02:23.900 --> 00:02:25.362
And this was before they went public.

48
00:02:25.362 --> 00:02:28.077
They had customers they needed
to meet their needs, so

49
00:02:28.077 --> 00:02:31.808
they couldn't stop everything and
go, yeah, Rails is kind of outdated.

50
00:02:31.808 --> 00:02:33.700
We really would love to use the framework,
so let's stop building stuff.

51
00:02:33.700 --> 00:02:34.680
They couldn't do that.

52
00:02:34.680 --> 00:02:35.791
So what did they do?

53
00:02:35.791 --> 00:02:38.690
I'm trying to remember
actually which page it was.

54
00:02:38.690 --> 00:02:40.897
I knew someone who was on
the team that did this.

55
00:02:40.897 --> 00:02:43.678
Let's just, for example,
they had the sign in page.

56
00:02:43.678 --> 00:02:46.542
And they said on the sign in page,
let's add Vue as a CDN,

57
00:02:46.542 --> 00:02:48.910
and let's just add interactivity.

58
00:02:48.910 --> 00:02:52.201
And once they proved that that worked
well, they went, okay, next one, what's

59
00:02:52.201 --> 00:02:55.413
something we can hit that's fairly low
impact performance wise that we can do?

60
00:02:55.413 --> 00:02:58.860
I think there was another one that they
did, and basically that's what they did.

61
00:02:58.860 --> 00:03:03.008
They slowly added new features to
the customer base while progressively

62
00:03:03.008 --> 00:03:04.644
migrating their app to Vue.

63
00:03:04.644 --> 00:03:08.890
And then eventually when they had,
basically, the tipping point of,

64
00:03:08.890 --> 00:03:13.415
they had so much code in Vue that it made
sense to like, let's take a couple of

65
00:03:13.415 --> 00:03:18.360
weeks to refactor our code to actually
use the node tooling to bring it all in.

66
00:03:18.360 --> 00:03:19.350
That's when they actually did that.

67
00:03:19.350 --> 00:03:22.541
But they proved their case rather than
trying to just tell product, hey,

68
00:03:22.541 --> 00:03:23.060
just stop.

69
00:03:23.060 --> 00:03:27.995
We have this wonderful idea that if anyone
has done ever a massive app refactoring,

70
00:03:27.995 --> 00:03:30.330
it often doesn't go quite as planned.

71
00:03:30.330 --> 00:03:34.730
And then deadlines get pushed, but
they were able to realistic do that.

72
00:03:34.730 --> 00:03:36.850
And so this is how GitLab
is now running on Vue now.

73
00:03:36.850 --> 00:03:40.438
And so the reason I wanted to emphasize
this method is because it's something that

74
00:03:40.438 --> 00:03:44.078
I think is often overlooked when people
are thinking about recommending solutions

75
00:03:44.078 --> 00:03:45.080
to clients.

76
00:03:45.080 --> 00:03:48.130
And it's something that I
want people to know about.

77
00:03:48.130 --> 00:03:51.215
So whenever you're working for someone or
you think that this could be a good

78
00:03:51.215 --> 00:03:53.251
approach, you now know
that this is here for you.

