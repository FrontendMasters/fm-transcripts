WEBVTT

1
00:00:00.110 --> 00:00:04.745
&gt;&gt; Bianca Gandolfo: So here are some
operations you might be expected to do

2
00:00:04.745 --> 00:00:09.590
in a typical data structure
based interview question.

3
00:00:09.590 --> 00:00:15.490
And I have some notes here,
so for a stack and a queue.

4
00:00:15.490 --> 00:00:22.179
Again, it's not really, it is ordered,
but it's usually not like ordered.

5
00:00:22.179 --> 00:00:27.103
It's not like sorted usually and
so, these kind of sorting based

6
00:00:27.103 --> 00:00:32.205
operations aren't common, but
you can do like the Tower of Hanoi or

7
00:00:32.205 --> 00:00:36.503
sort of stack with an auxiliary
stack kind of questions or

8
00:00:36.503 --> 00:00:42.430
something you could imagine, but
you're not really gonna sort it in place.

9
00:00:42.430 --> 00:00:48.855
I mean, you could, it's just not a really
common one, but definitely reversing,

10
00:00:48.855 --> 00:00:53.760
know how to reverse the stack,
link list and your array string.

11
00:00:53.760 --> 00:00:58.744
Know how to reverse them,
you can learn how to merge sort,

12
00:00:58.744 --> 00:01:01.550
quick sort for your raise.

13
00:01:01.550 --> 00:01:05.780
You could sort a link list, it's not very
common, but it could be a fun experiment.

14
00:01:07.760 --> 00:01:10.742
What else?
So if you're merging something that's

15
00:01:10.742 --> 00:01:15.063
already sorted, what about if
you're merging a range of values?

16
00:01:15.063 --> 00:01:21.670
The trick is if it's a range of values,
you typically want to sort.

17
00:01:21.670 --> 00:01:23.830
Well, it depends on the problem,
but the typical problem for

18
00:01:23.830 --> 00:01:28.850
merging a range of values is this job
scheduling or meeting scheduling problem.

19
00:01:28.850 --> 00:01:31.815
You usually wanna sort by the start time,
so that's a tip,

20
00:01:31.815 --> 00:01:33.367
you could sort by the end time.

21
00:01:33.367 --> 00:01:35.266
There are other ways that
you can sort them, but

22
00:01:35.266 --> 00:01:37.174
usually sorting by the start time.

23
00:01:37.174 --> 00:01:42.116
Wait, no, sort by the earliest end time,
sort by the early earliest end time.

24
00:01:42.116 --> 00:01:49.618
Yeah, sort by the earliest end time,
that's kind of the typical best solution.

25
00:01:49.618 --> 00:01:52.167
So shuffling is actually really hard,

26
00:01:52.167 --> 00:01:55.418
randomization questions
are really difficult.

27
00:01:55.418 --> 00:02:00.623
If you got this kind of question,
you would, would it necessarily need

28
00:02:00.623 --> 00:02:05.915
to be able to implemented perfectly,
but you should be able to talk about

29
00:02:05.915 --> 00:02:10.986
what are the challenges of like
randomization and things like that.

30
00:02:10.986 --> 00:02:15.940
A true randomization I mean,
added distance is if you have like

31
00:02:15.940 --> 00:02:21.173
this list one, two, thee, and
then you have this list it's two,

32
00:02:21.173 --> 00:02:25.192
two, three,
how many changes do you need to make,

33
00:02:25.192 --> 00:02:29.794
to get this to be the same, so
this is a really popular one.

34
00:02:29.794 --> 00:02:34.800
Usually in an interview question,
it's only one step,

35
00:02:34.800 --> 00:02:40.016
its not a recursive figure out
everything kind of problem,

36
00:02:40.016 --> 00:02:46.066
but the true edit distance problem
is what you use to diffing the dom,

37
00:02:46.066 --> 00:02:50.761
and stuff like that, or
going through large texts and

38
00:02:50.761 --> 00:02:53.920
spell-check, things like that.

39
00:02:55.560 --> 00:02:57.828
So those are some things,
so these two down here,

40
00:02:57.828 --> 00:03:01.347
I don't think you really need to know,
I just like them, so I put them there.

41
00:03:01.347 --> 00:03:05.911
But these ones I would practice,
all of these and even if it's not typical,

42
00:03:05.911 --> 00:03:09.905
just try it and see where you get
stuck and what the challenges are,

43
00:03:09.905 --> 00:03:13.860
and then you'll know why you can or
cannot do that.

44
00:03:13.860 --> 00:03:18.188
Okay, here's more [LAUGH] cuz
I knew you were like, man,

45
00:03:18.188 --> 00:03:20.812
that's not enough, I want more.

46
00:03:20.812 --> 00:03:25.215
So just some things, you should
be able to search for values and

47
00:03:25.215 --> 00:03:28.730
all of these searching if it's sorted.

48
00:03:28.730 --> 00:03:30.029
You can't sort a hash table.

49
00:03:30.029 --> 00:03:35.080
So a Min/Max, you probably wanna have
an auxiliary stack that makes it constant.

50
00:03:35.080 --> 00:03:39.795
If it's Min/Max sorted, and
you can just do it in place, unique,

51
00:03:39.795 --> 00:03:41.550
you can use a hash table.

52
00:03:43.580 --> 00:03:48.262
Linear time, if it's sorted,
you could do it in place as well.

53
00:03:48.262 --> 00:03:50.375
Permutations, that's a super fun one.

54
00:03:50.375 --> 00:03:56.778
I definitely recommend that you do
permutation, anagram, substring problems.

55
00:03:56.778 --> 00:04:03.150
We're out of the scope of this workshop,
but those are some super fun ones and

56
00:04:03.150 --> 00:04:09.151
very common for strings, and
also dynamic programming type problems.

