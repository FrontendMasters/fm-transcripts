WEBVTT

1
00:00:00.000 --> 00:00:01.213
&gt;&gt; Bianca Gandolfo: All right,
now we're gonna delete

2
00:00:01.213 --> 00:00:05.321
a node.
&gt;&gt; Bianca Gandolfo: And let's kind of

3
00:00:05.321 --> 00:00:11.694
reason about how we might delete a node.
&gt;&gt; Bianca Gandolfo: So when

4
00:00:11.694 --> 00:00:16.370
I'm thinking about deleting a null, there
are few things that I am thinking about.

5
00:00:16.370 --> 00:00:23.110
Like is this the head, is the tail,
are we deleting a specific node?

6
00:00:23.110 --> 00:00:24.360
Like are you gonna give me a value?

7
00:00:24.360 --> 00:00:26.620
And then I have to search this list for
a value and

8
00:00:26.620 --> 00:00:31.470
delete it or
you give me a reference to node.

9
00:00:31.470 --> 00:00:33.070
And I need to delete it.

10
00:00:33.070 --> 00:00:35.950
Cuz that's different than a value.
&gt;&gt; Speaker 2: This value.

11
00:00:35.950 --> 00:00:36.750
That's gonna take forever.

12
00:00:36.750 --> 00:00:38.660
Cuz you gotta go one step at a time.
&gt;&gt; Bianca Gandolfo: Yeah you have to

13
00:00:38.660 --> 00:00:39.910
loop through it.

14
00:00:39.910 --> 00:00:40.950
Exactly.

15
00:00:40.950 --> 00:00:48.210
But maybe that's just what the requirement
is, so I'm gonna read what is written.

16
00:00:48.210 --> 00:00:49.610
It just says delete a node.

17
00:00:49.610 --> 00:00:56.985
Let's say, deletes a node,
&gt;&gt; Bianca Gandolfo: Actually

18
00:00:56.985 --> 00:01:01.380
let's do removeTail.

19
00:01:01.380 --> 00:01:03.389
I see, so this one, you give it a node.

20
00:01:04.400 --> 00:01:09.350
You give it a reference to a node and
then it returns the value.

21
00:01:09.350 --> 00:01:10.043
But let's removeTail,

22
00:01:10.043 --> 00:01:14.438
it's a little bit easier.
&gt;&gt; Bianca Gandolfo: Okay so let's do

23
00:01:18.332 --> 00:01:20.187
&gt;&gt; Bianca Gandolfo: removeTail.

24
00:01:20.187 --> 00:01:22.920
Not gonna take anything.

25
00:01:24.810 --> 00:01:30.770
And when I run this, I expect for
a couple of things to happen.

26
00:01:30.770 --> 00:01:34.898
I expect for the tail to be

27
00:01:34.898 --> 00:01:40.206
updated to the last reference,

28
00:01:40.206 --> 00:01:48.856
which is the 2.
&gt;&gt; Bianca Gandolfo: So

29
00:01:48.856 --> 00:01:55.850
I'm gonna update that and then I expect
this next to no longer point to 3.

30
00:01:55.850 --> 00:02:00.222
So I would take this
&gt;&gt; Bianca Gandolfo: And

31
00:02:00.222 --> 00:02:05.970
point it to null,
which would thendDo the same thing here.

32
00:02:05.970 --> 00:02:09.690
So these are the same,
they're the same object.

33
00:02:09.690 --> 00:02:13.970
I just draw them out separately for
visualization purposes,

34
00:02:13.970 --> 00:02:16.203
okay.
&gt;&gt; Bianca Gandolfo: So

35
00:02:16.203 --> 00:02:17.880
that's what I'm expecting to happen.

36
00:02:19.360 --> 00:02:24.392
So reassign the tail and then give

37
00:02:24.392 --> 00:02:29.620
that tail's next the value null.

38
00:02:29.620 --> 00:02:32.430
Any questions about that,
Why we would do it that way?

39
00:02:33.740 --> 00:02:34.240
Okay.

40
00:02:35.320 --> 00:02:38.000
So, I'm going to bring
this up with this so,

41
00:02:38.000 --> 00:02:43.458
we can have our notes.
&gt;&gt; Bianca Gandolfo: And

42
00:02:43.458 --> 00:02:44.710
I would do this in an interview.

43
00:02:44.710 --> 00:02:45.580
I would take my notes.

44
00:02:45.580 --> 00:02:48.300
Whatever I needed to like solve it,
I would just take it.

45
00:02:48.300 --> 00:02:50.650
Whatever I'm doing here in front of you
right now is exactly what I would do

46
00:02:50.650 --> 00:02:51.250
in an interview.

47
00:02:51.250 --> 00:02:53.720
Including, explaining
everything that I'm doing,

48
00:02:53.720 --> 00:02:58.620
all the considerations I'm making
as I'm reasoning about this, okay.

49
00:02:59.630 --> 00:03:02.210
So we're gonna remove the tail.

50
00:03:03.340 --> 00:03:08.126
So the first thing I wanted to do
is I wanted to update the tail, so

51
00:03:08.126 --> 00:03:13.633
this.tail.,
&gt;&gt; Bianca Gandolfo: So

52
00:03:13.633 --> 00:03:18.369
then, I need to get the thing for
the tail actually.

53
00:03:19.546 --> 00:03:23.430
So if I wanna get the thing before
the tail, without a reference to the tail.

54
00:03:24.610 --> 00:03:29.098
That might be tough because.

55
00:03:29.098 --> 00:03:34.100
So basically since what

56
00:03:34.100 --> 00:03:39.830
I wanna do is I need to figure out what.
&gt;&gt; Speaker 2: Previous

57
00:03:39.830 --> 00:03:40.570
values.
&gt;&gt; Bianca Gandolfo: The previous

58
00:03:40.570 --> 00:03:42.320
values.
&gt;&gt; Speaker 2: Original.

59
00:03:43.890 --> 00:03:44.420
&gt;&gt; Bianca Gandolfo: Of this one.

60
00:03:44.420 --> 00:03:48.660
And you can't really figure that
out based on the data that we have

61
00:03:48.660 --> 00:03:49.390
right here, right?

62
00:03:49.390 --> 00:03:52.970
So, the only thing that we know
about this value of this node is

63
00:03:52.970 --> 00:03:56.590
that it has the value of 2 and
it has next pointer of null.

64
00:03:56.590 --> 00:04:01.520
We don't know that this then
belongs to the next of value 1.

65
00:04:01.520 --> 00:04:05.780
We don't know that from this information.

66
00:04:05.780 --> 00:04:09.656
So there are a few ways
we can go about it.

67
00:04:09.656 --> 00:04:14.990
The most straightforward way is what I was
saying before we have to loop through it.

68
00:04:14.990 --> 00:04:20.104
And so.
&gt;&gt; Bianca Gandolfo: We can

69
00:04:20.104 --> 00:04:27.741
loop through it, and then once we get
to the one right before the tail,

70
00:04:27.741 --> 00:04:32.020
we'll have the node that we will need.

71
00:04:32.020 --> 00:04:34.240
We need to find the node
right before the tail.

72
00:04:34.240 --> 00:04:39.299
So let's remove the tail
&gt;&gt; Bianca Gandolfo: So

73
00:04:39.299 --> 00:04:44.462
the first thing I wanna do is loop and

74
00:04:44.462 --> 00:04:48.975
find the node before the tail.

75
00:04:48.975 --> 00:04:51.930
So how do I know it's
the node before the tail?

76
00:04:51.930 --> 00:04:58.450
Because I think the node.next
would equal this.tail.

77
00:04:58.450 --> 00:05:03.090
They would be the same node, and we can
do the === because we're using objects,

78
00:05:03.090 --> 00:05:06.420
and we wanna make sure they're
actually the same object,

79
00:05:06.420 --> 00:05:07.870
not necessarily the same value.

80
00:05:07.870 --> 00:05:12.960
Our link list could have multiple
objects with the same value.

81
00:05:12.960 --> 00:05:14.460
So we're just gonna check on the node, and

82
00:05:14.460 --> 00:05:18.830
in general it's kind of a best
practice unless you're actually

83
00:05:18.830 --> 00:05:22.050
Interested in dealing with the values
like maybe you're finding duplicates or

84
00:05:22.050 --> 00:05:27.170
something like that but in this case
we're dealing with nodes, a whole node.

85
00:05:28.360 --> 00:05:35.229
Okay, so we can say while,
&gt;&gt; Bianca Gandolfo: So

86
00:05:35.229 --> 00:05:40.116
this is actually a
&gt;&gt; Bianca Gandolfo: Traversing

87
00:05:40.116 --> 00:05:43.090
a link list is a thing that
you should pay attention to.

88
00:05:43.090 --> 00:05:46.230
So what I'm about to do is what
you're gonna have to do a lot for

89
00:05:46.230 --> 00:05:49.870
link list questions, which is traverse
them forward, traverse them backwards,

90
00:05:49.870 --> 00:05:52.690
traverse them with two pointers,
traverse them with one pointer.

91
00:05:52.690 --> 00:05:58.460
So all of these traversing things, you
can't just for loop through a link list.

92
00:05:58.460 --> 00:06:04.183
It's not like an iterable data
structure or anything like that,

93
00:06:04.183 --> 00:06:08.239
no for each, for
real this time, so while, so

94
00:06:08.239 --> 00:06:16.158
we're gonna say currentNode = this.head.
&gt;&gt; Bianca Gandolfo: Okay,

95
00:06:16.158 --> 00:06:19.973
so we're gonna say,
while we have a current node,

96
00:06:19.973 --> 00:06:25.298
because it's either gonna be ideally,
if we implement it correctly,

97
00:06:25.298 --> 00:06:29.300
it's either gonna be a node or
it'll be null.

98
00:06:29.300 --> 00:06:33.573
Once it's null,
we know that we're at the end or

99
00:06:33.573 --> 00:06:37.234
we could say, while or we could say when.

100
00:06:38.520 --> 00:06:41.819
So while currentNode is not equal to that,

101
00:06:41.819 --> 00:06:45.900
that actually is probably better for
what we need.

102
00:06:45.900 --> 00:06:51.777
So while currentNode does not equal,

103
00:06:51.777 --> 00:06:56.560
so while currentNode.Next.

104
00:06:57.620 --> 00:07:02.778
So while does not equal this.tail.

105
00:07:02.778 --> 00:07:07.616
So once
&gt;&gt; Bianca Gandolfo: Once

106
00:07:07.616 --> 00:07:12.740
this condition is met where our current
nodes.next is the same as the tail.

107
00:07:12.740 --> 00:07:14.240
We know it's the second to last node.

108
00:07:14.240 --> 00:07:16.192
Does that make sense?

109
00:07:26.630 --> 00:07:27.151
&gt;&gt; Bianca Gandolfo: So this so

110
00:07:27.151 --> 00:07:29.239
that we don't have an infinite loop,

111
00:07:29.239 --> 00:07:33.480
so every time we loop we're gonna set
current node to currentNode.next, so

112
00:07:33.480 --> 00:07:38.240
then it will just keep going and
going through all the next properties.

113
00:07:38.240 --> 00:07:41.850
And once we are out of that,
then we know where we need to be.

114
00:07:41.850 --> 00:07:44.540
And this is when we can do the deletions.

115
00:07:44.540 --> 00:07:48.060
So we know our currentNode,
we wanna be our tail.

116
00:07:48.060 --> 00:07:56.520
So then we can say
this.tail = currentNode.

117
00:07:56.520 --> 00:07:57.050
Is that everything?

118
00:07:58.580 --> 00:08:03.141
I feel like I'm missing something.
&gt;&gt; Bianca Gandolfo: So, and

119
00:08:03.141 --> 00:08:07.134
we wanna make our currentNode.next at

120
00:08:07.134 --> 00:08:11.953
null.
&gt;&gt; Bianca Gandolfo: Right, we need to make

121
00:08:11.953 --> 00:08:21.772
sure we remove that pointer
&gt;&gt; Bianca Gandolfo: All right.

122
00:08:21.772 --> 00:08:25.130
Questions?
&gt;&gt; Speaker 2: So,

123
00:08:25.130 --> 00:08:28.860
line 38 is really looking for
the penultimate node.

124
00:08:28.860 --> 00:08:34.870
One right before the tail.
&gt;&gt; Bianca Gandolfo: Yeah, exactly.

125
00:08:34.870 --> 00:08:39.011
So it's gonna keep looping
when this breaks out.

126
00:08:39.011 --> 00:08:42.432
That means that the currentNode's next is

127
00:08:42.432 --> 00:08:46.926
the tail.
&gt;&gt; Bianca Gandolfo: Does

128
00:08:46.926 --> 00:08:48.030
that make sense?

129
00:08:48.030 --> 00:08:48.640
&gt;&gt; Speaker 2: Just not much.
&gt;&gt; Bianca Gandolfo: Okay.

130
00:08:48.640 --> 00:08:51.880
Yeah that's kind of a wierd one.

131
00:08:53.370 --> 00:08:58.800
So while it's not that, keep looping,
once that condition is met we won't enter

132
00:08:58.800 --> 00:09:04.490
that loop anymore and
it will continue down here.

133
00:09:04.490 --> 00:09:13.550
The other thing is what if
the currentNode.next is never the tail.

134
00:09:13.550 --> 00:09:17.910
Is there a case where this
condition is never met?

135
00:09:17.910 --> 00:09:19.260
Let's noodle on that.

136
00:09:19.260 --> 00:09:22.730
So current node is gonna be the head.

137
00:09:22.730 --> 00:09:25.320
No, it should always exist.

138
00:09:25.320 --> 00:09:28.300
That's a condition that you would consider
because that would give us an infinite

139
00:09:28.300 --> 00:09:30.500
loop if we're not meeting that.

140
00:09:30.500 --> 00:09:31.542
But it seems like the way that we

141
00:09:31.542 --> 00:09:33.010
implement it that we
wouldn't run into that.

142
00:09:34.430 --> 00:09:36.274
What else might we think about?

143
00:09:43.661 --> 00:09:44.995
&gt;&gt; Bianca Gandolfo: All right ready for

144
00:09:44.995 --> 00:09:47.370
checking some bugs?

145
00:09:47.370 --> 00:09:48.530
Let's see what happens.

146
00:09:48.530 --> 00:09:51.390
So we want we're expecting
it to look like this.

147
00:09:51.390 --> 00:09:53.550
This is still true yeah.

148
00:09:53.550 --> 00:09:59.275
So let's move our console log down.
&gt;&gt; Bianca Gandolfo: Moment of truth,

149
00:09:59.275 --> 00:10:07.760
uh-oh, I think we deleted everything.
&gt;&gt; Bianca Gandolfo: Let's see.

150
00:10:07.760 --> 00:10:12.119
I think we're exiting
one too soon perhaps.

151
00:10:13.950 --> 00:10:19.750
So hold on, we have our 1 and
then we insert our 2, insert our 3.

152
00:10:19.750 --> 00:10:22.290
Let's compare before and
after and make sure.

153
00:10:23.690 --> 00:10:26.076
So we have 1, 3.

154
00:10:26.076 --> 00:10:28.480
Are we?
&gt;&gt; Speaker 2: Missing two?

155
00:10:28.480 --> 00:10:33.213
&gt;&gt; Bianca Gandolfo: Where did two

156
00:10:33.213 --> 00:10:37.040
go?
&gt;&gt; Speaker 3: Did we change the

157
00:10:37.040 --> 00:10:37.650
&gt;&gt; Bianca Gandolfo: Did we change

158
00:10:37.650 --> 00:10:41.580
something?
&gt;&gt; Speaker 3: Because you added that pad

159
00:10:41.580 --> 00:10:47.910
plus one right?
&gt;&gt; Bianca Gandolfo: There we go.

160
00:10:47.910 --> 00:10:48.550
Yeah, no problem.

161
00:10:48.550 --> 00:10:50.080
That's why we were testing it early.

162
00:10:50.080 --> 00:10:51.688
Okay.
Okay.

163
00:10:51.688 --> 00:10:53.805
All right.

164
00:10:53.805 --> 00:10:55.319
Great.

165
00:10:55.319 --> 00:10:58.343
So what was it, okay so

166
00:10:58.343 --> 00:11:04.531
this.
&gt;&gt; Speaker 2: So

167
00:11:04.531 --> 00:11:10.170
we have 1,2,3 and then we have 1 and
2 are pointers no.

168
00:11:11.380 --> 00:11:13.760
Cool, I'm surprised it
did that on one pass.

169
00:11:13.760 --> 00:11:16.430
I was like this could go wrong in so
many ways.

