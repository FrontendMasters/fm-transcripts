WEBVTT

1
00:00:00.030 --> 00:00:04.090
&gt;&gt; Bianca Gandolfo: So we have this
prompt, which is a random like, using one

2
00:00:04.090 --> 00:00:10.560
array and implementing three stacks,
two stacks or in stacks, mini stacks.

3
00:00:10.560 --> 00:00:14.310
But only using one array as
your core data structure.

4
00:00:14.310 --> 00:00:20.590
So, you already, you implemented a stack
data structure earlier in this workshop.

5
00:00:20.590 --> 00:00:24.770
And so what you would do is you
would adapt that class, right?

6
00:00:24.770 --> 00:00:28.745
So you would make a constructor and
everything and

7
00:00:28.745 --> 00:00:35.490
instead of only representing one array or
one stack

8
00:00:35.490 --> 00:00:39.250
you would represent multiple, so there's
a few different ways you could do this.

9
00:00:39.250 --> 00:00:42.390
You could, if you are implementing
three stacks and you have and

10
00:00:42.390 --> 00:00:43.646
array of a certain length.

11
00:00:43.646 --> 00:00:47.660
Lets say certain length 30, you can say
the first ten are for the first stack,

12
00:00:47.660 --> 00:00:51.740
and the second, and the third and
then as that stack grows,

13
00:00:51.740 --> 00:00:55.890
then you can double it, double the size.

14
00:00:55.890 --> 00:00:58.965
So that is one way of going about it, and

15
00:00:58.965 --> 00:01:02.985
that's the naive way and
it takes up a lot of space.

16
00:01:02.985 --> 00:01:09.880
But it's not more,
it's not like a slow solution.

17
00:01:09.880 --> 00:01:16.553
The better solution is instead
is holding pointers to the,

18
00:01:16.553 --> 00:01:20.564
the first three nodes in the array.

19
00:01:20.564 --> 00:01:25.999
The first three indices in
the array would be node one,

20
00:01:25.999 --> 00:01:31.435
or stack ones first element,
and then the second would

21
00:01:31.435 --> 00:01:36.890
be stack two's first element,
and then stack three.

22
00:01:36.890 --> 00:01:41.780
And then one, two, three, the fourth
one would be the second one for stack

23
00:01:43.400 --> 00:01:48.070
one, and so you would kinda do
this interleaving approach.

24
00:01:48.070 --> 00:01:52.870
And so you'll see the interleaving as
a theme for ordered data structures.

25
00:01:52.870 --> 00:01:58.510
That means that you are taking
maybe two different lists and

26
00:01:58.510 --> 00:02:00.400
putting them one by one.

27
00:02:00.400 --> 00:02:03.360
There's also merging, so you can merge.

28
00:02:05.180 --> 00:02:10.500
You can merge a list, which usually,
you're comparing something.

29
00:02:10.500 --> 00:02:13.940
So if you have two lists and you're
gonna merge them, it's usually like,

30
00:02:13.940 --> 00:02:19.100
you have a list of integers and
you're merging it in order, or

31
00:02:19.100 --> 00:02:22.700
like they're sorted, you wanna put them
in sorted order, that kind of thing.

32
00:02:22.700 --> 00:02:24.470
It's different than kind
of this interleaving,

33
00:02:24.470 --> 00:02:27.480
which doesn't do a comparison necessarily.

34
00:02:27.480 --> 00:02:30.550
Doesn't matter the order,
just that it's in the original order.

35
00:02:31.830 --> 00:02:35.710
The next one is getMin() or getMax().

36
00:02:35.710 --> 00:02:39.590
This one is a fun one,

37
00:02:39.590 --> 00:02:44.810
it requires that you,
if you want to do it in constant time,

38
00:02:44.810 --> 00:02:49.170
it requires that you have an auxiliary
data structure, like a stack.

39
00:02:49.170 --> 00:02:53.534
Or you can just simply keep track of it,

40
00:02:53.534 --> 00:02:57.512
track of the min inside of the node.

41
00:02:57.512 --> 00:03:02.825
But basically every time you
push a value into your stack,

42
00:03:02.825 --> 00:03:09.665
you want to push a value into your min
stack that will always be the minimum.

43
00:03:09.665 --> 00:03:13.860
So you might have multiple
minimums In that min stack.

44
00:03:13.860 --> 00:03:20.520
And so it's not space efficient,
but it will return the min.

45
00:03:20.520 --> 00:03:23.990
So every time you pop off a min stack or
peak the min stack,

46
00:03:23.990 --> 00:03:28.740
it's always gonna be
a constant time solution.

47
00:03:28.740 --> 00:03:32.640
So queue using two stacks is similar.

48
00:03:32.640 --> 00:03:37.970
Where you need to queue and
unqueue and shift them over.

49
00:03:37.970 --> 00:03:42.806
Once you are inqueuing,
inqueueing, inqueueing, right so

50
00:03:42.806 --> 00:03:46.250
you have three items in your queue.

51
00:03:46.250 --> 00:03:51.370
When you need to dequeue you need to
take the thing off the bottom and

52
00:03:51.370 --> 00:03:52.740
it gets stuck.

53
00:03:52.740 --> 00:03:58.318
So what you do is you
&gt;&gt; Bianca Gandolfo: You pop,

54
00:03:58.318 --> 00:03:59.650
so it's a stack.

55
00:03:59.650 --> 00:04:04.620
So you have to pop, pop it and
then push it to the other stack.

56
00:04:04.620 --> 00:04:08.183
So, and then you pop it and you pop it.

57
00:04:08.183 --> 00:04:12.379
Once you want to dequeue, you need to pop,

58
00:04:12.379 --> 00:04:16.577
pop, pop all the things in your stack, and

59
00:04:16.577 --> 00:04:21.589
then it flips it upside
down into your other stack,

60
00:04:21.589 --> 00:04:26.253
and then you can pop it
off in the right order, so

61
00:04:26.253 --> 00:04:32.548
that's how that works.
&gt;&gt; Bianca Gandolfo: So

62
00:04:32.548 --> 00:04:35.639
sorting a stack with the min
values in order on top.

63
00:04:41.297 --> 00:04:42.228
&gt;&gt; Bianca Gandolfo: Basically, so

64
00:04:42.228 --> 00:04:47.095
this is a simplification of the Tower of
Hanoi problem, which is like that kid's

65
00:04:47.095 --> 00:04:52.070
game where you have the disks,
they're fat and then they get skinnier.

66
00:04:52.070 --> 00:04:52.660
You have three.

67
00:04:52.660 --> 00:04:53.500
And then you have two.

68
00:04:53.500 --> 00:04:57.740
And they're mixed up and you wanna get it
to where they look like a perfect pyramid.

69
00:04:58.800 --> 00:05:00.280
You know what I'm talking about?

70
00:05:00.280 --> 00:05:02.595
So that's the tower for Hanoi problem.

71
00:05:02.595 --> 00:05:10.970
And this one is a simplified
version of that.

72
00:05:10.970 --> 00:05:14.599
With just two.
&gt;&gt; Speaker 2: For the last one,

73
00:05:14.599 --> 00:05:16.198
creating the queue with two stacks.

74
00:05:16.198 --> 00:05:20.300
I didn't really quite understand
where the complexity comes in,

75
00:05:20.300 --> 00:05:24.548
cuz couldn't you just really shove into,
both of them into a queue,

76
00:05:24.548 --> 00:05:29.070
I don't understand what that.
&gt;&gt; Bianca Gandolfo: So you can't

77
00:05:29.070 --> 00:05:33.060
use a queue, you can only use a stack.
&gt;&gt; Speaker 2: Okay.

78
00:05:33.060 --> 00:05:33.730
&gt;&gt; Bianca Gandolfo: It's like a brain

79
00:05:33.730 --> 00:05:36.260
teaser thing,
it's not very useful in real life.

80
00:05:36.260 --> 00:05:39.320
It's a very,
very common interview question.

81
00:05:39.320 --> 00:05:41.220
You'll see them on all
the interview websites.

82
00:05:41.220 --> 00:05:42.940
I've never personally gotten it,

83
00:05:42.940 --> 00:05:46.250
but it's just one of those
questions to kind of know.

84
00:05:46.250 --> 00:05:47.160
It's a tricky one, right?

85
00:05:47.160 --> 00:05:49.780
Because it's really a logic question,

86
00:05:49.780 --> 00:05:55.420
but yeah, but you can't

87
00:05:55.420 --> 00:05:58.090
use a queue, you can only use a stack.
&gt;&gt; Speaker 2: Can you make it act

88
00:05:58.090 --> 00:06:00.640
like it's a queue?
&gt;&gt; Bianca Gandolfo: Yep, yep.

89
00:06:00.640 --> 00:06:05.100
So you would create a queue data structure
just like we made our queue with our

90
00:06:05.100 --> 00:06:06.200
constructor and everything.

91
00:06:06.200 --> 00:06:12.260
And then in queue could only push or pop,
and then dequeue can only push or pop.

92
00:06:12.260 --> 00:06:17.117
And then your storage would be stack
one and stack two instead of storage,

93
00:06:17.117 --> 00:06:19.950
you would have like stack one, stack two.

94
00:06:19.950 --> 00:06:21.800
And so,
you would go back before between those.

95
00:06:23.040 --> 00:06:27.785
And then so then we have like
a string of bracket validator type

96
00:06:27.785 --> 00:06:29.986
question that you see a lot.

97
00:06:29.986 --> 00:06:33.364
This will basically,

98
00:06:33.364 --> 00:06:38.400
you're gonna have two stacks.

99
00:06:38.400 --> 00:06:40.670
So you push all the opening brackets,
maybe you just need one,

100
00:06:40.670 --> 00:06:41.950
you push all the opening brackets.

101
00:06:41.950 --> 00:06:47.530
Once you find a closing bracket, you wanna
make sure that it matches the opening one.

102
00:06:47.530 --> 00:06:52.128
Opens you push and then closing ones,
if it matches you pop,

103
00:06:52.128 --> 00:06:57.913
if it doesn't match then it's not valid.
&gt;&gt; Bianca Gandolfo: That

104
00:06:57.913 --> 00:07:00.750
probably only means anything if
you've seen this question before.

105
00:07:01.990 --> 00:07:02.920
But that's sort of the gist.

