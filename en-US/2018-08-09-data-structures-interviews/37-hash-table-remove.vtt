WEBVTT

1
00:00:00.205 --> 00:00:08.022
&gt;&gt; Bianca Gandolfo: So remove is
gonna be really similar to retrieve,

2
00:00:08.022 --> 00:00:13.428
except that you need to delete it.

3
00:00:16.857 --> 00:00:17.669
&gt;&gt; Bianca Gandolfo: Yeah.

4
00:00:20.886 --> 00:00:23.732
&gt;&gt; Bianca Gandolfo: So again, even
though these looks like they are linear,

5
00:00:23.732 --> 00:00:26.875
if you have a hashing function
that is not my hashing function,

6
00:00:26.875 --> 00:00:29.447
you shouldn't run into
these kind of collisions.

7
00:00:29.447 --> 00:00:34.593
Another thing to think about is
if you're implementing your hash

8
00:00:34.593 --> 00:00:39.842
table is that once you get 50% full,
you wanna double the size.

9
00:00:39.842 --> 00:00:45.673
And so this will stop collisions
from being really dense.

10
00:00:45.673 --> 00:00:50.882
So once you resize it, you need to,
so that would happen in the insert.

11
00:00:50.882 --> 00:00:55.295
So when you insert,
if the size is greater than 50%

12
00:00:55.295 --> 00:00:58.740
of the length of your hash table storage.

13
00:00:58.740 --> 00:01:03.972
So if your table size is 25 and

14
00:01:03.972 --> 00:01:11.016
you can have your input size starts at 0,

15
00:01:11.016 --> 00:01:16.669
but you increment it every time.

16
00:01:16.669 --> 00:01:23.065
If this is 50% or more of your
table size which in this case,

17
00:01:23.065 --> 00:01:28.600
it's 13,
then you want to double the table size and

18
00:01:28.600 --> 00:01:36.599
then you need to run your hash function
with the new table size on every input.

19
00:01:36.599 --> 00:01:40.934
And this is called resizing, it's another
thing that you can do with a hash table

20
00:01:40.934 --> 00:01:43.053
and it's part of the implementation.

21
00:01:43.053 --> 00:01:46.563
And so this is another thing that
sounds like it's crazy expensive.

22
00:01:46.563 --> 00:01:49.300
But in the big scheme of things,
it averages out and

23
00:01:49.300 --> 00:01:51.090
we don't really worry about it.

24
00:01:51.090 --> 00:01:55.511
Cuz it happens just once every once
in a while, especially if you're

25
00:01:55.511 --> 00:02:00.562
initializing your hash table at a size
that's appropriate for your data set.

26
00:02:00.562 --> 00:02:04.318
It doesn't really make
a difference in the big picture.

27
00:02:14.012 --> 00:02:14.773
&gt;&gt; Bianca Gandolfo: So that's hash table.

28
00:02:14.773 --> 00:02:16.495
Any questions about hash table?

29
00:02:24.178 --> 00:02:28.863
&gt;&gt; Speaker 2: Is there a situation
that's pretty easy that's

30
00:02:28.863 --> 00:02:33.212
real world that you would
use a hash table in?

31
00:02:33.212 --> 00:02:35.821
&gt;&gt; Bianca Gandolfo: Like
make my own harsh table?

32
00:02:35.821 --> 00:02:36.475
&gt;&gt; Speaker 2: Yeah.

33
00:02:36.475 --> 00:02:39.170
&gt;&gt; Bianca Gandolfo: Not really.

34
00:02:39.170 --> 00:02:40.430
Yeah, good question.

35
00:02:40.430 --> 00:02:48.680
Yeah, you could just use an object or
a map or set, depending on your used case.

