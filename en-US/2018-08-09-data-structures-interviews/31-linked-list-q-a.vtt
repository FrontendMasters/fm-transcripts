WEBVTT

1
00:00:00.025 --> 00:00:06.010
&gt;&gt; Speaker 1: Why can't you just
do this.tell.next = null and

2
00:00:06.010 --> 00:00:10.604
then set this.tell.next = 104,

3
00:00:10.604 --> 00:00:14.939
will that not-
&gt;&gt; Bianca Gandolfo: So for example if we

4
00:00:14.939 --> 00:00:21.397
look at this, the tails,
next is null already.

5
00:00:23.328 --> 00:00:25.794
&gt;&gt; Speaker 1: Okay.

6
00:00:25.794 --> 00:00:31.050
&gt;&gt; Bianca Gandolfo: But in order to remove
this one we need to remove this pointer,

7
00:00:31.050 --> 00:00:35.918
in order to get to that pointer
we need to loop through it.

8
00:00:35.918 --> 00:00:37.370
&gt;&gt; Speaker 1: Okay.

9
00:00:37.370 --> 00:00:40.004
&gt;&gt; Bianca Gandolfo: There is a hack-ey
way that you could also do it but

10
00:00:40.004 --> 00:00:43.581
I think it's bad practise,
there's another way you could do it but

11
00:00:43.581 --> 00:00:45.489
this is the correct way of doing it.

12
00:00:47.209 --> 00:00:51.612
&gt;&gt; Speaker 3: This might be the bad
practise, but instead of closuring in

13
00:00:51.612 --> 00:00:56.910
current node to the while loop,
I haven't even thought through this.

14
00:00:56.910 --> 00:01:02.800
But it is possible to declare a function
that takes in a parameter which

15
00:01:02.800 --> 00:01:08.060
would be the stack head, then recursively
goes through and traverses down in?

16
00:01:08.060 --> 00:01:09.330
&gt;&gt; Bianca Gandolfo: It's the same,
that's the same.

17
00:01:09.330 --> 00:01:10.404
&gt;&gt; Speaker 3: It would
be the same function-

18
00:01:10.404 --> 00:01:10.923
&gt;&gt; Bianca Gandolfo: Yeah,

19
00:01:10.923 --> 00:01:15.640
recursion is just a different
way of looping through things.

20
00:01:15.640 --> 00:01:19.298
So anytime you see a loop you could do
it recursively but you are creating that

21
00:01:19.298 --> 00:01:23.147
extra space with the call stack, so you
are just doing extra work for yourself.

22
00:01:23.147 --> 00:01:26.765
&gt;&gt; Speaker 3: That is the big difference,
the space complexity would be greater and

23
00:01:26.765 --> 00:01:28.570
there wouldn't be-
&gt;&gt; Bianca Gandolfo: Yeah,

24
00:01:28.570 --> 00:01:32.509
there are certain optimizations around

25
00:01:32.509 --> 00:01:36.910
recursion that Java Script
sometimes has but

26
00:01:36.910 --> 00:01:41.771
in general,
&gt;&gt; Bianca Gandolfo: To an iterative

27
00:01:41.771 --> 00:01:46.768
solution, it's usually faster and
easier to reason about,

28
00:01:46.768 --> 00:01:50.235
recursion can be hard
to sort in your mind.

29
00:01:50.235 --> 00:01:53.441
You can only hold so
many things in your mind at once and

30
00:01:53.441 --> 00:01:56.910
recursion forces to hold
your maximum capacity.

31
00:01:56.910 --> 00:02:01.780
However, there are certain things when you
get to a point where it's easier to use

32
00:02:01.780 --> 00:02:07.960
recursion but if you can see an iterative
solution, just do the iterative solution.

33
00:02:09.390 --> 00:02:11.500
Unless your interviewer is like,
you can ask,

34
00:02:11.500 --> 00:02:13.890
do you want me to do this iteratively or
recursively?

35
00:02:13.890 --> 00:02:18.900
But if you're just supposed to be looping
through an array and you ask them to do it

36
00:02:18.900 --> 00:02:23.930
recursively, they might look at you funny,
so think about that before you ask.

37
00:02:23.930 --> 00:02:26.844
But if you're talking about a link list,
it's a recursive structure,

38
00:02:26.844 --> 00:02:29.497
you could recurse through a link list,
a reasonable thing to do.

39
00:02:31.459 --> 00:02:35.841
&gt;&gt; Bianca Gandolfo: But you could just ask
cuz that might be what they're getting at,

40
00:02:35.841 --> 00:02:37.601
the recursive solution.

41
00:02:46.275 --> 00:02:51.340
&gt;&gt; Bianca Gandolfo: All right,
so we're removing the tail.

42
00:02:51.340 --> 00:02:55.940
The other thing you can do,

43
00:02:55.940 --> 00:03:00.489
like if you wanna get constant time,
you might delete.

44
00:03:01.650 --> 00:03:06.500
You can do like a remove next where
you pass in the previous node and

45
00:03:06.500 --> 00:03:10.310
it will just remove the next one.

46
00:03:10.310 --> 00:03:13.250
That's the constant time,
easy thing to do, and

47
00:03:13.250 --> 00:03:16.894
you're just moving the pointer
from previousnodes.next.

48
00:03:22.610 --> 00:03:26.983
&gt;&gt; Bianca Gandolfo: So we could pass
in the list, also previous node.

49
00:03:26.983 --> 00:03:32.375
Also note what I'm doing here, I'm
writing a function outside of my class.

50
00:03:36.261 --> 00:03:38.330
&gt;&gt; Bianca Gandolfo: When do I do that?

51
00:03:38.330 --> 00:03:39.850
A lot actually.

52
00:03:39.850 --> 00:03:43.780
In this case, there isn't
really a real reason other than

53
00:03:43.780 --> 00:03:46.770
there's a bunch of garbage up there,
I don't wanna clutter.

54
00:03:46.770 --> 00:03:50.510
But I would use it in

55
00:03:50.510 --> 00:03:55.580
the case where I think this function would
be useful for a different data structure.

56
00:03:55.580 --> 00:04:00.090
So if it's a formating type function or

57
00:04:00.090 --> 00:04:06.010
anything that's not necessary
totally has to be tied to my class.

58
00:04:06.010 --> 00:04:07.666
I'll just make it outside and

59
00:04:07.666 --> 00:04:11.782
eventually I'll move it into its own
file if this is part of the code base.

60
00:04:15.812 --> 00:04:18.580
&gt;&gt; Speaker 1: But in an interview setting.

61
00:04:19.690 --> 00:04:22.530
&gt;&gt; Bianca Gandolfo: Either,
it depends, in an interview setting,

62
00:04:22.530 --> 00:04:25.330
they might say, write a function
that takes a linked list and

63
00:04:25.330 --> 00:04:29.730
deletes the previous node,
and deletes the next node.

64
00:04:30.830 --> 00:04:36.020
And so in that case, they are passing
the list and the previous node, right?

65
00:04:36.020 --> 00:04:40.564
And so, in this case, you would need
to access the internals of the list, so

66
00:04:40.564 --> 00:04:46.490
you would need to,
&gt;&gt; Bianca Gandolfo: No,

67
00:04:46.490 --> 00:04:48.277
actually you don't but

68
00:04:48.277 --> 00:04:53.790
you could potentially if you needed
to access the head or the tail.

69
00:04:53.790 --> 00:04:55.930
But those are public anyway,
so I guess it doesn't matter,

70
00:04:55.930 --> 00:04:58.760
we don't have an underscore storage or
anything like that.

71
00:04:58.760 --> 00:05:01.530
So yeah, we could just pass it
to a function, that's fine.

72
00:05:01.530 --> 00:05:04.791
And this is probably more likely
what you're gonna see than say,

73
00:05:04.791 --> 00:05:06.997
implementing your link list from scratch.

74
00:05:06.997 --> 00:05:10.504
It's gonna be like,
here's a link list, by the way,

75
00:05:10.504 --> 00:05:12.710
this is what it's gonna look like.

76
00:05:12.710 --> 00:05:17.067
You're gonna have a next and then you're
going to have a data or a value, and

77
00:05:17.067 --> 00:05:19.943
that's what you can expect
the node to look like.

78
00:05:19.943 --> 00:05:26.715
And just assumes that all of
the stuff underneath is how it works.

