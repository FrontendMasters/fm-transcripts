WEBVTT

1
00:00:00.170 --> 00:00:03.550
&gt;&gt; Bianca Gandolfo: So hash table is
a lot about counting occurrences,

2
00:00:03.550 --> 00:00:06.490
deleting duplicates,
finding unique values, things like that.

3
00:00:06.490 --> 00:00:09.480
So, I always think of a hash
table as an optimization steps.

4
00:00:09.480 --> 00:00:14.142
So when I'm pretty much
done with a solution,

5
00:00:14.142 --> 00:00:18.446
when I'm starting to think about, okay,

6
00:00:18.446 --> 00:00:23.130
what's the time complexity
of the solution?

7
00:00:23.130 --> 00:00:25.380
Does it seem reasonable?

8
00:00:25.380 --> 00:00:26.490
Can I make it faster?

9
00:00:26.490 --> 00:00:32.252
Like the first thing I think of is, how
can I use a hash table, because that could

10
00:00:32.252 --> 00:00:36.846
really increase the speed of my algorithm.
&gt;&gt; Bianca Gandolfo: So

11
00:00:36.846 --> 00:00:39.508
that's my little tip about hash table.

12
00:00:39.508 --> 00:00:42.268
Also, think about maps and
sets, and when you would and

13
00:00:42.268 --> 00:00:47.965
wouldn't use those.
&gt;&gt; Bianca Gandolfo: So, for stacking or

14
00:00:47.965 --> 00:00:52.884
array and string questions, some tips are,

15
00:00:52.884 --> 00:00:57.550
so some fun array questions are matrices.

16
00:00:57.550 --> 00:00:59.540
So that's an array of arrays.

17
00:00:59.540 --> 00:01:04.046
So if you have like a matrix of some size,
can you rotate it?

18
00:01:04.046 --> 00:01:09.420
Which means like, so you have
corners like you have the top left,

19
00:01:09.420 --> 00:01:11.470
top right, bottom left, bottom right.

20
00:01:11.470 --> 00:01:17.470
So if you rotate it, you just move all
the values like that, to some degree.

21
00:01:17.470 --> 00:01:19.116
Like you can rotate it
by a certain number,

22
00:01:19.116 --> 00:01:21.190
they will specify like how
they want you to rotate it.

23
00:01:21.190 --> 00:01:22.575
You can also rotate a string.

24
00:01:22.575 --> 00:01:26.692
So if you have a string like abcd and
you want to rotate it by one,

25
00:01:26.692 --> 00:01:32.715
then it would be bcd,
&gt;&gt; Bianca Gandolfo: Or it would be D.

26
00:01:32.715 --> 00:01:36.910
God, I can't do that in my head right now.
&gt;&gt; Bianca Gandolfo: So

27
00:01:36.910 --> 00:01:40.107
if you have a string and it's abcd and

28
00:01:40.107 --> 00:01:44.246
you want it to rotated by one,
it would be dabc.

29
00:01:44.246 --> 00:01:48.008
So you're like moving,
if you rotated by 2,

30
00:01:48.008 --> 00:01:52.112
it would be cdab.
&gt;&gt; Bianca Gandolfo: Mm-hm.

31
00:01:52.112 --> 00:01:53.407
&gt;&gt; Speaker 2: And that's not using shifter

32
00:01:53.407 --> 00:01:55.183
anything like that, right, I mean?
&gt;&gt; Bianca Gandolfo: So

33
00:01:55.183 --> 00:02:00.119
strings are immutable.
&gt;&gt; Bianca Gandolfo: So what you would have

34
00:02:00.119 --> 00:02:05.558
to do is you would need to
split it into an array, yeah.

35
00:02:05.558 --> 00:02:06.554
Or I would split it into an array,

36
00:02:06.554 --> 00:02:11.065
it's much easier.
&gt;&gt; Bianca Gandolfo: Yeah, so

37
00:02:11.065 --> 00:02:12.050
that's what a rotation is.

38
00:02:12.050 --> 00:02:14.347
So similarly, if this was an array,

39
00:02:14.347 --> 00:02:18.736
it would be really similar.
&gt;&gt; Bianca Gandolfo: If it's a matrix,

40
00:02:18.736 --> 00:02:22.189
right, it's just kind of,
you have like a little bit more going on.

41
00:02:22.189 --> 00:02:26.188
So it's more of like,
I guess maybe this is one d and

42
00:02:26.188 --> 00:02:28.792
then a two d matrix would be two d,

43
00:02:28.792 --> 00:02:33.704
something like that.
&gt;&gt; Bianca Gandolfo: Okay.

44
00:02:35.567 --> 00:02:36.967
&gt;&gt; Bianca Gandolfo: So rotating,

45
00:02:36.967 --> 00:02:41.400
zeroing out, so
if you have like a matrix like

46
00:02:41.400 --> 00:02:46.139
this,
&gt;&gt; Bianca Gandolfo: Imagine that this

47
00:02:46.139 --> 00:02:50.083
valid syntax, it's not right now, and

48
00:02:50.083 --> 00:02:55.673
you have mostly ones.
&gt;&gt; Bianca Gandolfo: You

49
00:02:55.673 --> 00:02:57.330
need to zero it out.

50
00:02:57.330 --> 00:03:02.290
Typically, it is like either a diagonal or
like up and down or

51
00:03:02.290 --> 00:03:06.410
left or right,
something like a chess piece would move.

52
00:03:06.410 --> 00:03:11.022
A lot of those are base on solving games,
like chess, checkers, Sudoku,

53
00:03:11.022 --> 00:03:13.160
things like that tic-tac-toe.

54
00:03:13.160 --> 00:03:18.215
So if you have a 0, then you 0 it all out.

55
00:03:18.215 --> 00:03:23.998
So this could represent
like if you have like a,

56
00:03:23.998 --> 00:03:26.963
&gt;&gt; Speaker 3: What's the chess piece,

57
00:03:26.963 --> 00:03:29.550
the castle one?
&gt;&gt; Bianca Gandolfo: What's

58
00:03:29.550 --> 00:03:30.085
that one called again?

59
00:03:30.085 --> 00:03:31.400
&gt;&gt; Speaker 3: Rook?
&gt;&gt; Bianca Gandolfo: The rook, so

60
00:03:31.400 --> 00:03:33.612
if you had a rook, so if we go back here,
&gt;&gt; Bianca Gandolfo: So

61
00:03:33.612 --> 00:03:38.019
if we have a rook here and
we want to represent,

62
00:03:38.019 --> 00:03:41.861
where you could not move another piece in

63
00:03:41.861 --> 00:03:46.833
the chessboard without it
being killed by the rook,

64
00:03:46.833 --> 00:03:52.711
we would add 0 in all,
that's kind of what that represents.

65
00:03:52.711 --> 00:03:54.117
One of the many things
that you could represent

66
00:03:54.117 --> 00:03:56.172
with.
&gt;&gt; Bianca Gandolfo: So

67
00:03:56.172 --> 00:04:00.480
if you hear anything about like,
a chessboard or checkers or

68
00:04:00.480 --> 00:04:04.440
tic-tac-toe, start thinking
about 2D matrices.

69
00:04:04.440 --> 00:04:07.920
Also, when you're thinking about
2D matrices and it's binary,

70
00:04:07.920 --> 00:04:12.760
you can also distill it down
to something like this.

71
00:04:12.760 --> 00:04:16.721
So for example,
&gt;&gt; Bianca Gandolfo: Maybe you can't

72
00:04:16.721 --> 00:04:17.510
in this example.

73
00:04:17.510 --> 00:04:23.060
But sometimes,
you could actually make it just one array,

74
00:04:23.060 --> 00:04:26.860
and this could represent everything,
but in this example, it doesn't work.

75
00:04:26.860 --> 00:04:31.830
But also, just think about how you could,
&gt;&gt; Bianca Gandolfo: Represent

76
00:04:31.830 --> 00:04:34.220
it even more simply in.

77
00:04:34.220 --> 00:04:36.094
Anyway, searching for a value.

78
00:04:36.094 --> 00:04:40.284
So when you search for a value,
&gt;&gt; Bianca Gandolfo: You have linear search

79
00:04:40.284 --> 00:04:42.470
where you just loop through and
you find it.

80
00:04:42.470 --> 00:04:45.974
Thus, we do a lot of linear search
when we are working with linked list.

81
00:04:47.784 --> 00:04:48.838
&gt;&gt; Bianca Gandolfo: Otherwise,

82
00:04:48.838 --> 00:04:54.776
you probably wanna sort your input or
have it pre-sorted would be nice and

83
00:04:54.776 --> 00:04:59.936
then you could do binary search.
&gt;&gt; Bianca Gandolfo: Which

84
00:04:59.936 --> 00:05:03.743
cuts down your,
&gt;&gt; Bianca Gandolfo: Time complexity

85
00:05:03.743 --> 00:05:07.030
considerably to log in,
if it's pre-sorted.

86
00:05:07.030 --> 00:05:09.980
Once you're sorting, then you also
have to count also the sorting.

87
00:05:09.980 --> 00:05:13.601
So,
&gt;&gt; Bianca Gandolfo: In coding strings,

88
00:05:13.601 --> 00:05:18.612
this is a thing where you're gonna
need to split it into an array,

89
00:05:18.612 --> 00:05:23.000
like some edge cases for
these kinds of string problems.

90
00:05:23.000 --> 00:05:27.702
It's like what if there's punctuation?
&gt;&gt; Bianca Gandolfo: What if,

91
00:05:29.422 --> 00:05:30.140
&gt;&gt; Bianca Gandolfo: What else?

92
00:05:30.140 --> 00:05:33.330
What about characteristics
in other languages,

93
00:05:33.330 --> 00:05:37.320
things like that, you need to consider.

94
00:05:37.320 --> 00:05:40.045
Merging two sorted lists into one list.

95
00:05:40.045 --> 00:05:42.711
There's a bunch of different variations

96
00:05:42.711 --> 00:05:46.284
of this.
&gt;&gt; Bianca Gandolfo: This is sort of like

97
00:05:46.284 --> 00:05:48.410
a subroutine of merge sort.

98
00:05:48.410 --> 00:05:50.926
So you'll learn this, and
then you'll learn merge sort,

99
00:05:50.926 --> 00:05:52.496
you'll notice that it's the same.

100
00:05:52.496 --> 00:05:57.726
But there's a way to use two pointers to,
in linear time, merge two sorted lists.

101
00:05:57.726 --> 00:06:03.550
So you just go through and you kind of
like, if this is less than and then you,

102
00:06:03.550 --> 00:06:08.796
kind of, keep moving them as they,
&gt;&gt; Bianca Gandolfo: I'm

103
00:06:08.796 --> 00:06:12.442
not explaining that very well, I'm sorry.
&gt;&gt; Bianca Gandolfo: Here,

104
00:06:12.442 --> 00:06:14.519
let me just show you.
&gt;&gt; Bianca Gandolfo: So

105
00:06:14.519 --> 00:06:20.239
let's say you have 2,5,6,
&gt;&gt; Bianca Gandolfo: And

106
00:06:20.239 --> 00:06:24.469
then you have,
&gt;&gt; Bianca Gandolfo: 1,4,7, and

107
00:06:24.469 --> 00:06:31.440
you wanted to merge them into
one list if that's sorted.

108
00:06:31.440 --> 00:06:33.880
So you would start at the very beginning,
you have two points.

109
00:06:33.880 --> 00:06:35.880
One would point here and
one would point here.

110
00:06:35.880 --> 00:06:36.860
You say, what is less?

111
00:06:36.860 --> 00:06:37.562
One is less, so

112
00:06:37.562 --> 00:06:41.850
you would take this one off,
&gt;&gt; Bianca Gandolfo: And you put it here.

113
00:06:41.850 --> 00:06:45.030
So this is still pointing here,
this is still pointing here.

114
00:06:45.030 --> 00:06:47.430
In reality,
we probably wouldn't remove it.

115
00:06:48.500 --> 00:06:51.465
We probably wouldn't remove it,
we would just move the pointer over, but

116
00:06:51.465 --> 00:06:55.780
I'm just gonna delete it for,
&gt;&gt; Bianca Gandolfo: From the example.

117
00:06:55.780 --> 00:06:57.070
And then we say, okay, which is less?

118
00:06:57.070 --> 00:06:59.217
Okay, two is less, and then we add it, and

119
00:06:59.217 --> 00:07:02.080
we remove it.
&gt;&gt; Bianca Gandolfo: Which is less?

120
00:07:02.080 --> 00:07:02.700
4 is less.

121
00:07:02.700 --> 00:07:05.860
Okay, we add it,
&gt;&gt; Bianca Gandolfo: And then we remove it.

122
00:07:05.860 --> 00:07:10.774
So this is the way that you
efficiently merge two sort of lists,

123
00:07:10.774 --> 00:07:16.326
which is less 5.
&gt;&gt; Bianca Gandolfo: And

124
00:07:16.326 --> 00:07:19.890
you can imagine some of these
might like be always less.

125
00:07:19.890 --> 00:07:23.720
And then suddenly, it might not be
this is almost like perfect order.

126
00:07:23.720 --> 00:07:27.927
My example is not very good.
&gt;&gt; Bianca Gandolfo: So

127
00:07:27.927 --> 00:07:33.015
that's how you would go about doing that.
&gt;&gt; Bianca Gandolfo: Okay,

128
00:07:33.015 --> 00:07:36.596
so,
&gt;&gt; Bianca Gandolfo: Those are kind of just

129
00:07:36.596 --> 00:07:41.492
like some tips and
tricks about arrays and strings, and

130
00:07:41.492 --> 00:07:46.300
hash tables and linked lists,
and stacks and queues.

131
00:07:46.300 --> 00:07:48.853
Some things that you like just
some common questions and

132
00:07:48.853 --> 00:07:50.710
operations you would be expected to do.

