WEBVTT

1
00:00:01.170 --> 00:00:02.703
&gt;&gt; Speaker 1: Here's a guess,
can you go back to the counter.

2
00:00:02.703 --> 00:00:03.853
&gt;&gt; Bianca Gandolfo: Yeah, sure.

3
00:00:03.853 --> 00:00:06.518
&gt;&gt; Speaker 1: Scroll up to the insert.

4
00:00:10.949 --> 00:00:11.918
&gt;&gt; Speaker 1: The method itself.

5
00:00:11.918 --> 00:00:19.751
So line 16 we're saying that
this.tail.next is node.

6
00:00:19.751 --> 00:00:22.350
But if we're looking at the node,
the pointer is null.

7
00:00:22.350 --> 00:00:25.273
But now we're updating that
pointer to the next object, so

8
00:00:25.273 --> 00:00:29.883
that's what's not kind of clicking.
&gt;&gt; Bianca Gandolfo: So this .tail, so

9
00:00:29.883 --> 00:00:34.315
this .tail looks like
&gt;&gt; Speaker 1: Because it's, got it,

10
00:00:34.315 --> 00:00:35.872
because it's always gonna be null.

11
00:00:35.872 --> 00:00:40.202
We're adding the next to the tail, not,

12
00:00:40.202 --> 00:00:42.935
[CROSSTALK]
&gt;&gt; Bianca Gandolfo: Yep, so this node,

13
00:00:42.935 --> 00:00:43.941
[CROSSTALK]
&gt;&gt; Speaker 1: Got

14
00:00:43.941 --> 00:00:44.638
it.
&gt;&gt; Bianca Gandolfo: Is a separate object.

15
00:00:44.638 --> 00:00:46.338
&gt;&gt; Speaker 1: Just meant for the tail.

16
00:00:46.338 --> 00:00:47.088
&gt;&gt; Bianca Gandolfo: Mm-hm.

17
00:00:47.088 --> 00:00:50.221
&gt;&gt; Speaker 1: Got it from [INAUDIBLE].

18
00:00:50.221 --> 00:00:51.001
&gt;&gt; Bianca Gandolfo: And then

19
00:00:51.001 --> 00:00:55.021
we set the current tails
next to that node.

20
00:00:55.021 --> 00:00:58.759
So we do that, but then,
we then what we have our,

21
00:00:58.759 --> 00:01:02.339
our current tail is no
longer our current tail.

22
00:01:02.339 --> 00:01:03.824
So then we need to make
it the correct tail.

23
00:01:03.824 --> 00:01:08.932
And so we do that by adding it here.

24
00:01:08.932 --> 00:01:13.800
If we'd skipped this, this line,

25
00:01:13.800 --> 00:01:19.646
what would happen?
&gt;&gt; Tom: This

26
00:01:19.646 --> 00:01:22.646
input to the [INAUDIBLE] was the same.
&gt;&gt; Speaker 1: Break the linkage.

27
00:01:22.646 --> 00:01:24.578
&gt;&gt; Bianca Gandolfo: What were you saying,

28
00:01:24.578 --> 00:01:26.728
Tom?
&gt;&gt; Tom: Was it the same points of the same

29
00:01:26.728 --> 00:01:27.707
node?
&gt;&gt; Bianca Gandolfo: Yeah, so

30
00:01:27.707 --> 00:01:31.214
every time we insert,
the tail will just be updated and

31
00:01:31.214 --> 00:01:34.124
we won't have our next
set to the next value.

32
00:01:34.124 --> 00:01:38.977
So this line, it may seem kinda,
it looks a little bit repetitive,

33
00:01:38.977 --> 00:01:42.396
but they're doing both
very important thing.

34
00:01:42.396 --> 00:01:48.222
So first thing is setting the next value
of the current tail to our new node.

35
00:01:48.222 --> 00:01:53.922
And the next one is updating our tail to
be the real tail, which is our new node.

36
00:01:53.922 --> 00:02:01.975
So doing two very important things.
&gt;&gt; Bianca Gandolfo: Deceptively

37
00:02:01.975 --> 00:02:04.324
powerful right?
&gt;&gt; Speaker 4: Could you do this

38
00:02:04.324 --> 00:02:08.923
.head.next=node then visually show us,

39
00:02:08.923 --> 00:02:11.852
I can do it on my own too.
&gt;&gt; Bianca Gandolfo: Yeah,

40
00:02:11.852 --> 00:02:13.700
so no that is a good thing.

41
00:02:13.700 --> 00:02:19.378
So if we did this.head=next here?
&gt;&gt; Speaker 4: Mm-hm.

42
00:02:19.378 --> 00:02:20.140
&gt;&gt; Bianca Gandolfo: And then update

43
00:02:20.140 --> 00:02:21.319
the tail?
&gt;&gt; Speaker 4: Yeah, and

44
00:02:21.319 --> 00:02:25.579
keep that [INAUDIBLE].
&gt;&gt; Bianca Gandolfo: Okay, so I'll run it.

45
00:02:25.579 --> 00:02:27.206
&gt;&gt; Speaker 1: Then the point is next and

46
00:02:27.206 --> 00:02:27.960
null.
&gt;&gt; Bianca Gandolfo: So

47
00:02:27.960 --> 00:02:33.666
you see that the next would be three and
not two.

48
00:02:33.666 --> 00:02:38.140
Because we need to make sure,
so as we grow our list,

49
00:02:38.140 --> 00:02:41.721
the head is always put into the first one.

50
00:02:41.721 --> 00:02:43.989
So if we look at this visualizer.

51
00:02:43.989 --> 00:02:48.271
If we said on the answer
we said this .head.next,

52
00:02:48.271 --> 00:02:51.469
you would be setting this every time.

53
00:02:51.469 --> 00:02:54.509
So let's say that

54
00:02:54.509 --> 00:03:02.263
you,
&gt;&gt; Bianca Gandolfo: Okay,

55
00:03:02.263 --> 00:03:03.171
let's create an empty.

56
00:03:03.171 --> 00:03:06.654
So we're going to insert a head at 85.

57
00:03:06.654 --> 00:03:10.650
So this is our first one, it's the head,
it's also the tail, okay?

58
00:03:10.650 --> 00:03:15.285
And then we can insert after the tail,
let's say 13.

59
00:03:15.285 --> 00:03:19.450
So now our head is
pointing to the next one.

60
00:03:19.450 --> 00:03:21.704
This is head.next is 13.

61
00:03:21.704 --> 00:03:27.449
Now, if we insert to the head,
this here is gonna insert to the head,

62
00:03:27.449 --> 00:03:31.030
which is not what we necessarily wanna do.

63
00:03:31.030 --> 00:03:35.130
But what would happen is
that it would go here, or

64
00:03:35.130 --> 00:03:41.540
actually that one goes before the head,
so that's a little bit different.

65
00:03:41.540 --> 00:03:44.721
So this one is inserting before the head,
but I wish I could drag this around.

66
00:03:44.721 --> 00:03:50.425
Lets remove head, okay.

67
00:03:50.425 --> 00:03:54.933
If we set this .head.next
to the next value,

68
00:03:57.273 --> 00:03:59.273
&gt;&gt; Bianca Gandolfo: Let's say it's 91,

69
00:03:59.273 --> 00:04:01.779
13 would then become 91.

70
00:04:01.779 --> 00:04:03.788
But really,

71
00:04:03.788 --> 00:04:09.893
we want head.next.next to be 91.
&gt;&gt; Speaker 1: Like

72
00:04:09.893 --> 00:04:12.429
we're chaining to the head?
&gt;&gt; Bianca Gandolfo: Yeah, but

73
00:04:12.429 --> 00:04:19.830
that next.next.next, so, you need to know
how many .next you need to traverse.

74
00:04:19.830 --> 00:04:22.160
And you don't really
know that from the head,

75
00:04:22.160 --> 00:04:24.858
the only way you can do that
is really loop through it.

76
00:04:24.858 --> 00:04:28.694
So that's why if we keep
a reference to the tail, so

77
00:04:28.694 --> 00:04:33.526
here's the tail, let's say,
tail.next and we add it there.

78
00:04:33.526 --> 00:04:40.714
So tail.next, we can insert 46,
and it just inserts it there.

79
00:04:40.714 --> 00:04:45.774
Versus .next that's always
going to keep adding

80
00:04:45.774 --> 00:04:51.195
just one next to the head.
&gt;&gt; Tom: But you could add it to the head?

81
00:04:51.195 --> 00:04:56.173
You know what I mean like
you could add to the front

82
00:04:56.173 --> 00:04:59.520
of the list instead of that?
&gt;&gt; Bianca Gandolfo: Yeah.

83
00:04:59.520 --> 00:05:00.945
&gt;&gt; Tom: Isn't that how the Hash Table

84
00:05:00.945 --> 00:05:01.686
kinda worked?

85
00:05:01.686 --> 00:05:04.927
We're adding in front of
the lest all the time?

86
00:05:04.927 --> 00:05:05.665
&gt;&gt; Bianca Gandolfo: It really

87
00:05:05.665 --> 00:05:06.942
depends.
&gt;&gt; Tom: Depends?

88
00:05:06.942 --> 00:05:08.462
&gt;&gt; Bianca Gandolfo: Yeah, you can add, so

89
00:05:08.462 --> 00:05:13.825
that's the nice thing about a link list
you can do content time add insertions,

90
00:05:13.825 --> 00:05:15.359
anywhere in the list.

91
00:05:15.359 --> 00:05:18.818
So you can do it before,
you can do it in the middle,

92
00:05:18.818 --> 00:05:21.641
you can do it at the end, so that's nice.

93
00:05:21.641 --> 00:05:24.167
And like what you choose to do with it?

94
00:05:24.167 --> 00:05:28.357
It really depends on
what you're trying to do,

95
00:05:28.357 --> 00:05:32.140
appending to the tail is pretty standard.

