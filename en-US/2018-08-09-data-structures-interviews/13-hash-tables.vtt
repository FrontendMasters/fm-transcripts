WEBVTT

1
00:00:00.200 --> 00:00:03.280
&gt;&gt; Bianca: Next thing we're
gonna talk about hash table.

2
00:00:03.280 --> 00:00:07.856
So a hash table is not ordered,
so we don't sort hash tables or

3
00:00:07.856 --> 00:00:09.560
anything like that.

4
00:00:09.560 --> 00:00:14.267
I guess hypothetically you could,
but if you were needing something

5
00:00:14.267 --> 00:00:18.893
with an order this is not the data
structure that you would choose but

6
00:00:18.893 --> 00:00:23.620
It is really good for fast lookups and
having keys that are flexible.

7
00:00:23.620 --> 00:00:28.082
So an array index is a numerically based,

8
00:00:28.082 --> 00:00:33.360
which can be a constraint, which

9
00:00:33.360 --> 00:00:36.466
might not be appropriate data structure
for the problem that you are solving.

10
00:00:36.466 --> 00:00:41.415
With a hash table, depending on the
underlying, depending on the interface,

11
00:00:41.415 --> 00:00:46.580
at the very least your
keys can be strings.

12
00:00:46.580 --> 00:00:53.290
But with new ES6 data structures,
we can also store functions and

13
00:00:53.290 --> 00:01:00.070
objects as keys if youuse like a set or a
map data structure, so that's pretty cool.

14
00:01:00.070 --> 00:01:01.639
It's becoming more and more flexible.

15
00:01:02.980 --> 00:01:08.731
So the inference there was that
a hash table implementation

16
00:01:08.731 --> 00:01:13.791
in Javascript is an object,
is a map, is a set with,

17
00:01:13.791 --> 00:01:19.771
there are like differences
between those data structures but

18
00:01:19.771 --> 00:01:23.120
the underlying idea's the same.

19
00:01:23.120 --> 00:01:27.890
Quick look up, quick insertion with

20
00:01:27.890 --> 00:01:32.610
keys that can be more than numbers,
and how does that work?

21
00:01:32.610 --> 00:01:34.500
So we need to be able to

22
00:01:35.740 --> 00:01:41.370
translate our keys into some memory
address, cuz we need to go directly there.

23
00:01:41.370 --> 00:01:47.310
So when we are looking for
something we either have

24
00:01:47.310 --> 00:01:52.250
to know the physical location somewhere or
whether it is on disk or in memory.

25
00:01:52.250 --> 00:01:57.060
You could think of this
as some mathematical

26
00:01:58.060 --> 00:02:02.720
formula that says I can just
point here and that's that value.

27
00:02:02.720 --> 00:02:10.270
I don't need to loop through all of these
memory spaces to find a particular value.

28
00:02:10.270 --> 00:02:13.280
So when we think about
a constant time look-up,

29
00:02:13.280 --> 00:02:15.920
which means we go directly to
the place that it's stored,

30
00:02:15.920 --> 00:02:20.810
we need to somehow mathematically
calculate that location, right?

31
00:02:20.810 --> 00:02:25.800
And obviously that calculation is really,
really complex but we can abstract

32
00:02:25.800 --> 00:02:31.190
it away just to understand how it works
and the core of it is a hashing function.

33
00:02:31.190 --> 00:02:35.800
So the hashing function takes the key,
in this case, we're gonna look at strings.

34
00:02:35.800 --> 00:02:41.540
It'll take a string and
it's gonna hash it to a numerical value

35
00:02:41.540 --> 00:02:46.520
that in our case is going to
be an index of an array, but

36
00:02:46.520 --> 00:02:51.851
under the hood it might be
a memory address, yeah.

37
00:02:51.851 --> 00:02:57.105
And so
hashing function is just a function.

38
00:02:57.105 --> 00:03:02.280
For every same input,
it always gives the same output, so for

39
00:03:02.280 --> 00:03:07.440
every Cristiano is always
gonna give 2 every time.

40
00:03:07.440 --> 00:03:10.990
That's the property of a hashing function.

41
00:03:10.990 --> 00:03:15.895
Hashing functions are used in
all kinds of like, you know,

42
00:03:15.895 --> 00:03:21.520
you're hashing for security and
things like that, passwordw, etc.

43
00:03:21.520 --> 00:03:26.920
This is a very similar concept except that
we are using it to hash to a numerical

44
00:03:26.920 --> 00:03:33.260
value in some range and
the range is the size of our hash table.

45
00:03:33.260 --> 00:03:36.980
So this hash table is the size of 25,
so our hashing function,

46
00:03:36.980 --> 00:03:42.170
no matter what we give it, it's always
going to give us a value between 0 and 25.

47
00:03:42.170 --> 00:03:46.600
&gt;&gt; Speaker 2: And we specify the range?

48
00:03:46.600 --> 00:03:51.390
Or it is always gonna be 25?

49
00:03:51.390 --> 00:03:54.829
&gt;&gt; Bianca: So when you are interacting
with a hash table you don't even have to

50
00:03:54.829 --> 00:03:59.160
think about it all but when you are
implementing it, you have to specify it.

51
00:03:59.160 --> 00:04:03.490
And then once it becomes full,
then you need to make it bigger, and

52
00:04:03.490 --> 00:04:05.510
there are strategies on how we do this.

53
00:04:05.510 --> 00:04:10.320
So typically what you do

54
00:04:10.320 --> 00:04:15.279
is once your hash table becomes 50% full,
you want to double it.

55
00:04:16.560 --> 00:04:19.960
And that's been found like
mathematically to be the most efficient,

56
00:04:19.960 --> 00:04:25.060
so once it's half full you double it and
then you rehash those

57
00:04:25.060 --> 00:04:30.010
values to 0 to 50, so
then it gets redistributed.

58
00:04:32.380 --> 00:04:36.680
&gt;&gt; Speaker 2: Do you need a new hash
function then to like, account for

59
00:04:36.680 --> 00:04:38.250
the bigger size?

60
00:04:38.250 --> 00:04:40.960
&gt;&gt; Bianca: So
the hash function should take the size.

61
00:04:40.960 --> 00:04:46.680
And so, it should be the same function
except that you just passed like,

62
00:04:46.680 --> 00:04:50.340
instead of 25, then you would pass 50 and
you would just rehash everything.

63
00:04:52.500 --> 00:04:53.630
&gt;&gt; Speaker 3: What do you mean by full?

64
00:04:53.630 --> 00:04:55.850
Once it gets full.

65
00:04:55.850 --> 00:05:00.790
&gt;&gt; Bianca: Yeah, so how you define
full varies but typically, you just

66
00:05:01.910 --> 00:05:08.140
count how many items, you kinda have
a length or size property under the hood.

67
00:05:08.140 --> 00:05:13.070
And if you get 13

68
00:05:13.070 --> 00:05:18.840
items in your hash table of size 25, then
you double it, and then you redistribute

69
00:05:18.840 --> 00:05:24.110
all of your items within 50 and then
once you get to 26, you double it again.

70
00:05:25.660 --> 00:05:29.675
That's the general strategy.

71
00:05:29.675 --> 00:05:31.970
&gt;&gt; Speaker 3: Why half?

72
00:05:33.972 --> 00:05:36.850
&gt;&gt; Bianca: Why half,
there's white papers and stuff on it.

73
00:05:36.850 --> 00:05:40.030
That's just typically what you do,
but there are all kinds of different

74
00:05:40.030 --> 00:05:44.710
strategies, and different implementations,
and optimizations for specific use cases.

75
00:05:44.710 --> 00:05:48.050
But that's kind of like

76
00:05:49.660 --> 00:05:55.460
the general on average the most efficient
way of doing it and the reason,

77
00:05:55.460 --> 00:06:02.150
how they got to the half is based on

78
00:06:02.150 --> 00:06:08.260
how many collisions would happen
if you're more than half full.

79
00:06:08.260 --> 00:06:13.490
I don't know the specific math but
since our hashing function only gives us

80
00:06:13.490 --> 00:06:18.860
from 0 to 25 there's a very high chance,
it happens a lot,

81
00:06:18.860 --> 00:06:23.570
that for different keys,
you get the same hash, right, and

82
00:06:23.570 --> 00:06:29.830
we'll see Anita and Antonio both has to 0.

83
00:06:29.830 --> 00:06:33.880
And so we call this a collision,
and when we have a collision,

84
00:06:35.100 --> 00:06:41.230
if we have many collisions, then that
can affect our run time for a look up.

85
00:06:42.400 --> 00:06:47.750
And so when we think about hash tables, we
think of this concept of the average case.

86
00:06:47.750 --> 00:06:54.730
In a lot of our time complexity
analysis we think about the worst case.

87
00:06:54.730 --> 00:06:58.720
However, for
things like hash tables, we think

88
00:06:58.720 --> 00:07:03.500
about the average case because the chance
of the worst case happening are so

89
00:07:03.500 --> 00:07:06.470
slim that we don't really
even worry about it.

90
00:07:06.470 --> 00:07:09.210
So that's why we say it's constant time,
even though, for

91
00:07:09.210 --> 00:07:14.200
example, if we wanted to find Christiano,

92
00:07:14.200 --> 00:07:19.100
we would have to go to this index.

93
00:07:19.100 --> 00:07:24.790
You can imagine that this is an array,
and the value of the array has,

94
00:07:24.790 --> 00:07:28.020
this is a linked list implementation but
it could be another array.

95
00:07:28.020 --> 00:07:30.310
It could be a variety of different things.

96
00:07:30.310 --> 00:07:36.620
The linked list tends to be a common
example of how to deal with equations.

97
00:07:36.620 --> 00:07:38.956
So then we need to find Christiano,

98
00:07:38.956 --> 00:07:43.540
we'd look at Charles, we look at
Cortra and then we get to Christiano.

99
00:07:43.540 --> 00:07:47.100
&gt;&gt; Speaker 4: So, I'm not fully
clear on how do collisions happen?

100
00:07:48.250 --> 00:07:49.800
&gt;&gt; Bianca: Yeah.
&gt;&gt; Speaker 4: Cuz there are inputs,

101
00:07:49.800 --> 00:07:52.400
get me right,
they share the same first letter but

102
00:07:52.400 --> 00:07:53.850
then they are different characters.

103
00:07:53.850 --> 00:07:55.625
So why do they have the same hash value?

104
00:07:55.625 --> 00:08:01.230
&gt;&gt; Bianca: Because whatever
the implementation of the hash function

105
00:08:01.230 --> 00:08:03.690
is giving the same value,
it has to be between 0 and 25.

106
00:08:03.690 --> 00:08:07.220
&gt;&gt; Speaker 4: When someone
decides they happen to have

107
00:08:07.220 --> 00:08:12.110
the same value because
there wasn't enough space?

108
00:08:12.110 --> 00:08:13.480
&gt;&gt; Bianca: It depends.

109
00:08:13.480 --> 00:08:16.730
Here's an example of a hashing function.

110
00:08:16.730 --> 00:08:20.960
You could get, so
each character in JavaScript has a code.

111
00:08:20.960 --> 00:08:25.549
So it's like, in the 20's,
40's, 70's are typically

112
00:08:25.549 --> 00:08:30.480
the different character codes in
Unicode that we use for JavaScript.

113
00:08:30.480 --> 00:08:35.420
So you could get the character code for
each letter and add them up.

114
00:08:35.420 --> 00:08:39.540
That would give you a numerical value for
that string.

115
00:08:39.540 --> 00:08:45.170
And then you wanna get it within a range,
so you could mod it by 25,

116
00:08:45.170 --> 00:08:50.280
and get a number between 0 and
25, something like that.

117
00:08:51.290 --> 00:08:59.150
So that's one way, and you can imagine
that a lot of strings would just happen to

118
00:08:59.150 --> 00:09:04.550
share the same hash value and
the frequency

119
00:09:04.550 --> 00:09:09.210
in which that happens is based on
the implementation of your hash function.

120
00:09:09.210 --> 00:09:14.000
There's a lot of hash functions that
are like kind of the common ones, and

121
00:09:14.000 --> 00:09:16.770
it's also based on what you
expect your data to look like.

122
00:09:16.770 --> 00:09:21.240
So, you know, if you expect your
data to be really long strings or

123
00:09:21.240 --> 00:09:28.450
if they are gonna have a lot of
the same letters versus not.

124
00:09:28.450 --> 00:09:32.714
And so if you're doing a lot of strings
that have a lot of the same letters and

125
00:09:32.714 --> 00:09:36.380
a lot of the same lengths,
then counting the character code and

126
00:09:36.380 --> 00:09:39.700
stuff like that might be bad.

127
00:09:39.700 --> 00:09:43.860
You might wanna use
a different hashing function.

128
00:09:43.860 --> 00:09:49.000
But in general, no one is gonna expect
you to implement a hashing function.

129
00:09:49.000 --> 00:09:50.750
It's very like,

130
00:09:50.750 --> 00:09:55.200
it's kind of like implementing
like a random number generator.

131
00:09:55.200 --> 00:09:58.330
Like you should be able
to reason about it and

132
00:09:58.330 --> 00:10:05.700
know what the challenges and difficulties
are but you don't necessarily need to

133
00:10:05.700 --> 00:10:09.016
implement it from scratch because they're
just very difficult problems to solve.

134
00:10:09.016 --> 00:10:12.503
So okay.

135
00:10:14.710 --> 00:10:19.930
&gt;&gt; Bianca: So the things I wanted to
talk about were the hashing function.

136
00:10:19.930 --> 00:10:21.300
How the hashing function works.

137
00:10:23.240 --> 00:10:30.030
Collisions, how collisions work,
and then resizing, when to resize.

138
00:10:30.030 --> 00:10:35.589
You guys feel like you got
those three main things?

139
00:10:36.720 --> 00:10:38.960
Cool, Jodie you have a question?

140
00:10:38.960 --> 00:10:40.290
You're having the question eyes.

141
00:10:40.290 --> 00:10:41.916
&gt;&gt; Jodie: I'm not fully
clear on the hash tables.

142
00:10:41.916 --> 00:10:43.820
I still need to adjust
it a little bit but-

143
00:10:43.820 --> 00:10:44.330
&gt;&gt; Bianca: Okay, can you turn

144
00:10:44.330 --> 00:10:45.030
that into a question?

145
00:10:45.030 --> 00:10:48.580
&gt;&gt; Jodie: I don't think I could.

146
00:10:48.580 --> 00:10:49.370
I think I need the.

147
00:10:49.370 --> 00:10:51.240
&gt;&gt; Bianca: What do you
know about a hash tables?

148
00:10:51.240 --> 00:10:56.770
&gt;&gt; Jodie: Well, my understanding was when
you said you're adding up the UTF for

149
00:10:56.770 --> 00:10:57.930
that.

150
00:10:57.930 --> 00:10:58.800
&gt;&gt; Bianca: The Unicode?

151
00:10:58.800 --> 00:10:59.410
&gt;&gt; Jodie: Yeah.

152
00:10:59.410 --> 00:11:00.620
&gt;&gt; Bianca: Character numbers.

153
00:11:00.620 --> 00:11:02.370
&gt;&gt; Jodie: I don't really
understand how that would work.

154
00:11:04.230 --> 00:11:09.400
&gt;&gt; Bianca: Yeah, so
the problem that we're trying to solve

155
00:11:09.400 --> 00:11:14.629
is we're trying to turn a string into
a number within a certain range.

156
00:11:15.890 --> 00:11:21.220
And so the question is what strategies
can we use to get there and so for

157
00:11:21.220 --> 00:11:27.310
each letter, lets say C is like 24,
R is like 33,

158
00:11:27.310 --> 00:11:33.000
I is 30, something like that.

159
00:11:33.000 --> 00:11:36.290
You could loop through this string and
get all of those numbers and add them up,

160
00:11:36.290 --> 00:11:37.240
let's say it's a hundred.

161
00:11:38.310 --> 00:11:42.271
And then if you wanted to be
within a range of 0 to 25,

162
00:11:42.271 --> 00:11:45.992
you just mod it by 25 and
then that would give you.

163
00:11:48.914 --> 00:11:51.290
&gt;&gt; Bianca: Yeah,
it would give you the range, so.

164
00:11:53.220 --> 00:11:55.916
So that's just like,
&gt;&gt; Bianca: But

165
00:11:55.916 --> 00:11:58.941
the point is not necessarily
the implementation.

166
00:11:58.941 --> 00:12:07.284
But you should just know that for every
&gt;&gt; Bianca: For the same string,

167
00:12:07.284 --> 00:12:12.606
you wanna get the same value every
time for your hashing function,

168
00:12:12.606 --> 00:12:17.660
so Anita will always return 0
when the range is 25, always.

169
00:12:22.260 --> 00:12:27.020
&gt;&gt; Jodie: [COUGH] And so this could be
framed in a interview based on you could

170
00:12:27.020 --> 00:12:32.663
have a question and it requires you to
look up certain values, or whatever,

171
00:12:32.663 --> 00:12:38.600
and so, even though so far we covered
the link table, or the link list and this.

172
00:12:38.600 --> 00:12:42.320
It would be like, we need something that's
gonna return something consistent like

173
00:12:42.320 --> 00:12:43.200
each and every time.

174
00:12:43.200 --> 00:12:47.468
So, we're like, we can't use the link list
because we gotta traverse going back and

175
00:12:47.468 --> 00:12:51.289
forth, but maybe the hash table because
it's holding like an actual location,

176
00:12:51.289 --> 00:12:52.040
set location.

177
00:12:52.040 --> 00:12:54.185
In this case, 0 to 25.

178
00:12:54.185 --> 00:12:58.140
We can almost count on that being
more reliable versus a link list and

179
00:12:58.140 --> 00:13:00.110
that's why we would wanna
use the hash table.

180
00:13:00.110 --> 00:13:04.370
&gt;&gt; Bianca: Exactly and we can use
the keys to look it up so we don't even

181
00:13:04.370 --> 00:13:08.960
need to understand that it's 0,
25 because that is just under the hood.

182
00:13:08.960 --> 00:13:13.380
What we do is we interact with a hash
table just like we would an object.

183
00:13:13.380 --> 00:13:19.130
So for saving a value to an object,
we would say object.val equals 1, right?

184
00:13:19.130 --> 00:13:23.693
And that would be an insertion and
that would be constant time.

185
00:13:23.693 --> 00:13:29.050
That val would go through the hashing
function and let's say it returns 1.

186
00:13:29.050 --> 00:13:33.690
Then we say in the first
index of our array,

187
00:13:33.690 --> 00:13:38.715
which is what we're building a hash
table out of, we would put value 1.

188
00:13:38.715 --> 00:13:44.152
And then when we want to retrieve it,
we would say object

189
00:13:44.152 --> 00:13:49.190
that value and that's how we
look up a value on an object,

190
00:13:49.190 --> 00:13:53.180
and then it would go through
the hashing function.

191
00:13:53.180 --> 00:13:55.153
It would put val through
the hashing function.

192
00:13:55.153 --> 00:13:59.397
It would return 1 and
then it will go to that index,

193
00:13:59.397 --> 00:14:04.050
it would find the value and
then it would just return 1.

194
00:14:05.356 --> 00:14:07.460
So the interface is the same,

195
00:14:07.460 --> 00:14:10.960
it's just a matter of understanding
how that happens so fast.

196
00:14:10.960 --> 00:14:14.060
Cuz usually if we're going
to lock something up

197
00:14:14.060 --> 00:14:19.780
we don't have a specific address we were
gonna have to do some sort of traversing

198
00:14:19.780 --> 00:14:23.570
linear time operation, or
log in if it's sorted.

199
00:14:24.770 --> 00:14:29.399
So,
&gt;&gt; Bianca: That's kind of

200
00:14:29.399 --> 00:14:30.710
the takeaway here.

