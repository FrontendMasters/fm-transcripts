WEBVTT

1
00:00:00.390 --> 00:00:02.980
&gt;&gt; Bianca Gandolfo: Let's retrieve,
so, we wanna pass the key.

2
00:00:05.380 --> 00:00:07.750
And it's gonna return
the value associated with it.

3
00:00:07.750 --> 00:00:09.100
Okay.

4
00:00:09.100 --> 00:00:18.860
So, we want to get the index from the key.

5
00:00:18.860 --> 00:00:20.294
So we have the key,

6
00:00:20.294 --> 00:00:25.697
we wanna look up the index by passing
it to the hashing function, okay?

7
00:00:25.697 --> 00:00:27.540
And then we need to delete it.

8
00:00:27.540 --> 00:00:31.714
So, the thing here is if
we have a collision and

9
00:00:31.714 --> 00:00:36.219
the scenario is that we
have something like this.

10
00:00:38.952 --> 00:00:40.910
&gt;&gt; Bianca Gandolfo: We need to loop.

11
00:00:42.390 --> 00:00:46.040
And so this is where, am I retrieving?

12
00:00:46.040 --> 00:00:46.540
Yeah.

13
00:00:48.820 --> 00:00:54.186
So this is where the question starts
to be, okay, so if we have these

14
00:00:54.186 --> 00:00:59.741
collisions and we're adding all of
these items into the same index and

15
00:00:59.741 --> 00:01:05.790
then if we need to find something,
we just loop through that index, right?

16
00:01:05.790 --> 00:01:08.860
The array of arrays,
we just loop until we find it.

17
00:01:08.860 --> 00:01:10.980
Doesn't that make this linear time?

18
00:01:12.140 --> 00:01:15.950
Why would I say hash tables
are always constant?

19
00:01:15.950 --> 00:01:20.600
Well, we think of hash tables as constant

20
00:01:20.600 --> 00:01:25.190
because on average,
with things like resizing,

21
00:01:26.610 --> 00:01:31.400
in really good hashing algorithms,
it's pretty much like a moot point.

22
00:01:31.400 --> 00:01:37.454
Like it's so rare that you would have
everything hashed to the same index.

23
00:01:37.454 --> 00:01:42.546
My hash function is stupid but
the real has function that people

24
00:01:42.546 --> 00:01:47.735
are using are very complex and
they manage like distribution and

25
00:01:47.735 --> 00:01:53.908
stuff like that, depending on the type
of data, there's different ones.

26
00:01:53.908 --> 00:01:58.630
So this is called
amortized time complexity.

27
00:01:58.630 --> 00:02:01.530
So we kind of like spread it out and

28
00:02:01.530 --> 00:02:06.640
think of it in terms of adverse
case when the worst case is so

29
00:02:06.640 --> 00:02:12.820
unlikely that it's not useful to
think about, does that make sense?

30
00:02:12.820 --> 00:02:18.118
So yeah, if suddenly, we know we do c3,
d4 and we keep going,

31
00:02:18.118 --> 00:02:22.240
going, going and
it's all in this third index and

32
00:02:22.240 --> 00:02:28.425
then we wanna find one of these, yeah,
we're gonna be looping through and

33
00:02:28.425 --> 00:02:32.746
that's a linear time operation
that would happen in

34
00:02:32.746 --> 00:02:37.108
a very rare circumstance,
so, something to know.

35
00:02:37.108 --> 00:02:42.210
Something to note.

36
00:02:43.430 --> 00:02:44.250
Okay.

37
00:02:44.250 --> 00:02:49.217
So what we're gonna do,
we retrieving keys, so

38
00:02:49.217 --> 00:02:54.438
we got the index, so,
let's say we want to say if.

39
00:02:58.096 --> 00:03:02.011
&gt;&gt; Bianca Gandolfo: So if this strong,

40
00:03:02.011 --> 00:03:09.379
got to be strong if this.storage.

41
00:03:09.379 --> 00:03:14.920
So if this.storage[index],
so if it exists,

42
00:03:16.500 --> 00:03:23.450
then we want to return our value.

43
00:03:23.450 --> 00:03:28.410
So we can loop through, we can reduce
over it, we can just go create but

44
00:03:28.410 --> 00:03:29.280
we're gonna need to loop.

45
00:03:31.960 --> 00:03:38.160
So this.storage[index] is gonna be,
should we for each?

46
00:03:38.160 --> 00:03:39.420
What kinda loop is the best?

47
00:03:39.420 --> 00:03:43.574
So we're just gonna loop through it,
we're gonna find the value,

48
00:03:43.574 --> 00:03:48.420
we wanna return is, so if you wanna
return, probably for each isn't the best.

49
00:03:48.420 --> 00:03:50.300
It's not really good for returning things.

50
00:03:51.370 --> 00:03:55.090
Why don't we, we mapped it,
then it wouldn't be an array.

51
00:03:55.090 --> 00:03:57.040
We don't really want it to be an array.

52
00:03:57.040 --> 00:04:01.970
We could reduce it but reduce is kind
of overly complicated for what we need.

53
00:04:01.970 --> 00:04:04.410
Also, it's really hard to stop the loop.

54
00:04:04.410 --> 00:04:06.090
So I think I'm just gonna be old school.

55
00:04:13.925 --> 00:04:15.728
&gt;&gt; Bianca Gandolfo: Okay.

56
00:04:23.728 --> 00:04:25.912
&gt;&gt; Bianca Gandolfo: So now we're looping

57
00:04:25.912 --> 00:04:30.277
through all of, so let's just make this,

58
00:04:30.277 --> 00:04:35.636
what do we wanna call like
this internal array here?

59
00:04:35.636 --> 00:04:42.169
Like maybe.
&gt;&gt; Bianca Gandolfo: Or

60
00:04:42.169 --> 00:04:45.899
I'm gonna put array in that word for sure.

61
00:04:47.640 --> 00:04:48.180
Let's see.

62
00:04:48.180 --> 00:04:51.730
All right, arrayAtIndex.

63
00:04:53.830 --> 00:05:01.468
That's what we're doing, okay?

64
00:05:01.468 --> 00:05:03.982
Okay.

65
00:05:05.590 --> 00:05:07.970
If you guys come up with a better name,
let me know.

66
00:05:07.970 --> 00:05:11.240
That's what I got right now in my head.

67
00:05:11.240 --> 00:05:16.692
So, for this arrayAtIndex,
we're gonna loop

68
00:05:16.692 --> 00:05:21.873
trough it and if (arrayAtIndex[i]), so

69
00:05:21.873 --> 00:05:27.325
the very first time we
loop through this array,

70
00:05:27.325 --> 00:05:32.260
we're gonna get this value, this array.

71
00:05:33.900 --> 00:05:36.660
The second time we loop through,
we're gonna get this one.

72
00:05:37.770 --> 00:05:43.019
So, this is gonna be, if I said type
of arrayAtIndex, it's also going to be

73
00:05:43.019 --> 00:05:49.471
an array.
&gt;&gt; Bianca Gandolfo: So, let's see.

74
00:05:49.471 --> 00:05:54.231
So we could say, if you could just see my
natural typing, I always just type var,

75
00:05:54.231 --> 00:05:56.010
I'm too used to it.

76
00:05:56.010 --> 00:05:59.970
What do we want to do?

77
00:05:59.970 --> 00:06:06.528
I'm gonna say keyValueArray.
&gt;&gt; Bianca Gandolfo: So

78
00:06:06.528 --> 00:06:12.699
we have our key value.
&gt;&gt; Bianca Gandolfo: Okay.

79
00:06:16.037 --> 00:06:17.203
&gt;&gt; Bianca Gandolfo: So if our

80
00:06:17.203 --> 00:06:24.540
keyValueArray, so
our very first value is the key.

81
00:06:26.270 --> 00:06:35.060
So we want to say if our keyValueArray,
this value equals the key,

82
00:06:35.060 --> 00:06:38.440
right, not the value because we
can't look up an object for a value.

83
00:06:38.440 --> 00:06:41.240
We can only look up an object for
the particular key.

84
00:06:42.410 --> 00:06:48.632
In any case, we only know the key.
&gt;&gt; Bianca Gandolfo: So, === are key,

85
00:06:48.632 --> 00:06:55.091
then you wanna return keyValueArray[1],

86
00:06:55.091 --> 00:06:57.911
which is our value.

87
00:07:04.867 --> 00:07:06.191
&gt;&gt; Bianca Gandolfo: Okay.

88
00:07:12.667 --> 00:07:13.872
&gt;&gt; Bianca Gandolfo: And hopefully,

89
00:07:13.872 --> 00:07:17.700
you only have to loop through this once or
twice.

90
00:07:17.700 --> 00:07:20.484
And that your collisions aren't so
deep that this is going on

91
00:07:20.484 --> 00:07:25.970
forever.
&gt;&gt; Bianca Gandolfo: All right,

92
00:07:25.970 --> 00:07:31.090
do I have any edge cases?
&gt;&gt; Speaker 2: Are there

93
00:07:31.090 --> 00:07:34.960
such a thing as like collisions
within a collision kind of thing?

94
00:07:34.960 --> 00:07:37.660
&gt;&gt; Bianca Gandolfo: So, you mean like

95
00:07:37.660 --> 00:07:42.620
if you try to add to the same keys?
&gt;&gt; Speaker 2: Maybe that's

96
00:07:42.620 --> 00:07:44.000
what I mean.
&gt;&gt; Bianca Gandolfo: So,

97
00:07:45.160 --> 00:07:48.590
we have a collision for this index three.

98
00:07:49.980 --> 00:07:56.200
And then we need to push, right?

99
00:07:56.200 --> 00:07:59.582
What if, I just found a bug actually,
now that we're talking about it,

100
00:07:59.582 --> 00:08:04.045
what if we do this?
&gt;&gt; Bianca Gandolfo: That wouldn't

101
00:08:04.045 --> 00:08:07.420
work because we can't have a duplicate.

102
00:08:08.570 --> 00:08:10.880
So, when we are pushing,

103
00:08:10.880 --> 00:08:16.551
we also need to make sure that we
don't have another value here.

104
00:08:23.706 --> 00:08:29.084
&gt;&gt; Bianca Gandolfo: So, let's see.

105
00:08:29.084 --> 00:08:34.496
So, if storage index and
then, so we can do TODO,

106
00:08:34.496 --> 00:08:39.529
TODO loop through,

107
00:08:39.529 --> 00:08:45.590
all right and
find if key was already inserted.

108
00:08:45.590 --> 00:08:47.120
Does that make sense?

109
00:08:47.120 --> 00:08:53.238
So if we insert B twice, we don't
wanna have two arrays for B, we need

110
00:08:53.238 --> 00:08:58.934
to update the value of B of the first B.
&gt;&gt; Bianca Gandolfo: We're

111
00:08:58.934 --> 00:09:00.800
not gonna have time to implement it.

112
00:09:00.800 --> 00:09:02.244
But that's what needs to be done.

