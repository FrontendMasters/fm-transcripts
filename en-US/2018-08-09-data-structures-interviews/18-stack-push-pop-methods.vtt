WEBVTT

1
00:00:00.170 --> 00:00:03.362
&gt;&gt; Bianca Gandolfo: We are gonna
get started with talking about

2
00:00:03.362 --> 00:00:05.224
the implementation, so

3
00:00:05.224 --> 00:00:10.732
we spent about 40 minutes giving this
a go with only minimal direction.

4
00:00:10.732 --> 00:00:15.493
So those of you who are at home working on
this, know that most people weren't able

5
00:00:15.493 --> 00:00:20.048
to finish the one data structure
implementation in a 40-minute period, so

6
00:00:20.048 --> 00:00:24.310
don't get discouraged if you're
finding that this takes a lot of time.

7
00:00:24.310 --> 00:00:30.560
You're gonna laugh because
although they are hard to,

8
00:00:30.560 --> 00:00:33.550
it's hard to get to
the answer from scratch.

9
00:00:33.550 --> 00:00:37.220
But once you see the implementation,
it's actually fairly simple.

10
00:00:37.220 --> 00:00:39.840
It's just a combination of
things that you already know.

11
00:00:39.840 --> 00:00:43.908
Arranged a little bit differently
than maybe you're used to because,

12
00:00:43.908 --> 00:00:48.519
often when we're programming in
JavaScript, we're not thinking about this,

13
00:00:48.519 --> 00:00:53.561
kind of like, meta programming stuff, like
how our programs are actually being used.

14
00:00:53.561 --> 00:00:57.189
And so, it's just a different
way of thinking about it, but

15
00:00:57.189 --> 00:01:01.549
a really good exercise to improve
the way that you understand your code.

16
00:01:03.600 --> 00:01:11.102
So let's get started,
we're gonna implement a stack, okay?

17
00:01:11.102 --> 00:01:14.060
And what I'm gonna do here is
I'm gonna ahead and fork it and

18
00:01:14.060 --> 00:01:15.790
we'll work on this together.

19
00:01:15.790 --> 00:01:22.670
So I'm gonna rely on all of you to ask
me questions, to give me suggestions

20
00:01:22.670 --> 00:01:28.170
as I walk through how I reason
about solving this problem, okay?

21
00:01:28.170 --> 00:01:35.880
So I'm going to implement this by hand,
and so we'll do it together.

22
00:01:37.580 --> 00:01:40.726
So again, when I run it,
we have the stack over here.

23
00:01:40.726 --> 00:01:43.970
It's just an object that
has a property_storage,

24
00:01:43.970 --> 00:01:49.330
that holds a reference to
this object here, okay.

25
00:01:49.330 --> 00:01:53.470
So the first thing I do when I'm
thinking about a data structure is,

26
00:01:53.470 --> 00:01:57.470
I think about okay, how do I draw
it out in kind of like code terms?

27
00:01:57.470 --> 00:02:01.630
So I would kind of just
think about it like this.

28
00:02:01.630 --> 00:02:02.840
This is how I think I just you know,

29
00:02:02.840 --> 00:02:07.500
and then I'm like okay,
if I wanna insert it, how am I to do that?

30
00:02:07.500 --> 00:02:14.490
Maybe like if I wanted to have some order,
I might like have like a key.

31
00:02:14.490 --> 00:02:21.520
That's a zero, and
then I could put a value here like three.

32
00:02:21.520 --> 00:02:27.219
And then okay,
if I would just keep inserting like this,

33
00:02:27.219 --> 00:02:29.967
so we have a key value pair.

34
00:02:32.672 --> 00:02:35.433
&gt;&gt; Bianca Gandolfo: So this is like
an object of objects, I'm realizing that

35
00:02:35.433 --> 00:02:39.410
that's the next thing that I need to make
sure that there's a containing object.

36
00:02:40.914 --> 00:02:46.083
And maybe, I'll just do like this,
actually put a comma there and

37
00:02:46.083 --> 00:02:50.236
then I just have one object,
and needed to and

38
00:02:50.236 --> 00:02:56.888
then,
&gt;&gt; Bianca Gandolfo: See,

39
00:02:56.888 --> 00:03:01.290
maybe I'll just keep this consistent,
okay.

40
00:03:01.290 --> 00:03:08.180
So this is I'm inserting, I'm inserting,
okay now, I'm pushing, I'm pushing.

41
00:03:08.180 --> 00:03:13.600
Now I need two, and the reason I'm using
numerical indices is because I know

42
00:03:13.600 --> 00:03:19.430
that a stack is really like an array and I
know that an array uses numerical indices.

43
00:03:19.430 --> 00:03:21.090
And so that's kinda how I made that leap.

44
00:03:22.220 --> 00:03:28.950
And then, so now I need to push, so in
order for me to, I'm sorry I need to pop.

45
00:03:28.950 --> 00:03:33.890
In order for me to pop,
I need to know which the last index is.

46
00:03:33.890 --> 00:03:38.648
So that means, I probably need
a way to keep track of that, right?

47
00:03:38.648 --> 00:03:40.877
Any ideas?

48
00:03:45.270 --> 00:03:47.954
&gt;&gt; Bianca Gandolfo: Maybe like a length
property, something like that.

49
00:03:49.882 --> 00:03:51.607
&gt;&gt; Bianca Gandolfo: Seem reasonable?

50
00:03:53.321 --> 00:03:54.755
&gt;&gt; Bianca Gandolfo: We
have a length property.

51
00:03:57.175 --> 00:03:58.332
&gt;&gt; Bianca Gandolfo: At this point,

52
00:03:58.332 --> 00:04:02.170
I would want it to be 2,
but how do we get it there?

53
00:04:02.170 --> 00:04:04.970
So those are some things that I'm
just thinking about as I'm thinking

54
00:04:04.970 --> 00:04:06.960
about how to code out the solution.

55
00:04:08.392 --> 00:04:12.210
So then peek, peek I feel like
is really similar to pop, so

56
00:04:12.210 --> 00:04:15.720
it would be knowing what the last
one is because a stack, right,

57
00:04:15.720 --> 00:04:17.770
we need to have a reference
to the last one.

58
00:04:17.770 --> 00:04:20.730
That's gonna be important so
that's what I'm thinking about.

59
00:04:20.730 --> 00:04:23.726
And then the next thing I like to do is,
like, okay, so

60
00:04:23.726 --> 00:04:28.350
that's, kind of like, me drawing it in my
code and then the next thing is, okay so,

61
00:04:28.350 --> 00:04:30.849
what would that look
like in terms of the API?

62
00:04:30.849 --> 00:04:34.550
And the API is just like, how am I
interacting with this data structure.

63
00:04:34.550 --> 00:04:36.762
So right, I'm gonna be pushing,

64
00:04:36.762 --> 00:04:41.280
the first time I'm going to build
it like this, I'm gonna push zero.

65
00:04:42.300 --> 00:04:44.090
And then I'm going to push one.

66
00:04:45.190 --> 00:04:49.350
And I expect it to look like this, and
I expect it to have a length of two.

67
00:04:49.350 --> 00:04:51.736
And then when I pop,

68
00:05:00.571 --> 00:05:03.351
&gt;&gt; Bianca Gandolfo: Let's put this under

69
00:05:03.351 --> 00:05:10.430
here so, and then when I pop,
I will expect it then.

70
00:05:10.430 --> 00:05:13.430
So I don't pass anything to pop just like

71
00:05:13.430 --> 00:05:15.590
you would in if you
are popping off an array.

72
00:05:15.590 --> 00:05:21.941
I would expect it then to look
like this and have a length of 1.

73
00:05:21.941 --> 00:05:25.449
So those are some things that's kind
of how I'm thinking about I would

74
00:05:25.449 --> 00:05:26.420
interact with it.

75
00:05:26.420 --> 00:05:28.461
And then, so
all the things that we think about and

76
00:05:28.461 --> 00:05:30.612
talk about with my interviewer
would be edge cases.

77
00:05:30.612 --> 00:05:32.684
Okay, so what if it's empty,

78
00:05:32.684 --> 00:05:36.591
how might my logic need to
accommodate like an empty list or

79
00:05:36.591 --> 00:05:42.270
another thing that you should consider is
okay, what if I pass something that into?

80
00:05:42.270 --> 00:05:48.980
Maybe you have a function that is
requiring other function to be passed,

81
00:05:48.980 --> 00:05:54.381
what if it's undefined,
what if I pass a string instead.

82
00:05:54.381 --> 00:05:56.030
So these are kind of age cases,

83
00:05:56.030 --> 00:06:00.090
error handling kind of things that you
might wanna think about and talk about

84
00:06:00.090 --> 00:06:04.613
with an interviewer, especially if your
interview prompt is kind of a shorter one.

85
00:06:04.613 --> 00:06:10.193
They might be looking for
more details like that if you are doing

86
00:06:10.193 --> 00:06:15.142
really long one like implement
a whole data structure,

87
00:06:15.142 --> 00:06:19.352
it might like be okay with
you just saying like,

88
00:06:19.352 --> 00:06:23.906
okay to do,
I will handle these kind of edge cases.

89
00:06:23.906 --> 00:06:28.490
So do some tips from little old me, okay.

90
00:06:28.490 --> 00:06:34.780
So now that I kind of have an idea,
the next I might do is pseudo code it out.

91
00:06:34.780 --> 00:06:38.300
But it's pretty
straightforward in my mind.

92
00:06:38.300 --> 00:06:40.830
So I'm gonna go ahead and code it.

93
00:06:40.830 --> 00:06:44.670
But I recommend that once you kind
of go through this process, and

94
00:06:44.670 --> 00:06:48.620
you feel like you know what your approach
is, you discuss it with your interviewer.

95
00:06:48.620 --> 00:06:50.550
Your interviewer thinks
it's also a good idea.

96
00:06:50.550 --> 00:06:53.170
You can ask them what their opinion is.

97
00:06:54.530 --> 00:07:00.180
And then, if you still don't have

98
00:07:00.180 --> 00:07:06.500
the specific step by step edge start
in your head, you may want to just

99
00:07:06.500 --> 00:07:11.920
do some pseudocode which just in English
say first, I would loop through this loop.

100
00:07:11.920 --> 00:07:18.700
Then I would do ten jumping jacks,
else, whatever.

101
00:07:18.700 --> 00:07:23.110
Just write it out like that and to get
your head around it you can even debug

102
00:07:23.110 --> 00:07:26.190
your pseudocode,
which we might do if we have time.

103
00:07:26.190 --> 00:07:27.750
Not for this one though.

104
00:07:27.750 --> 00:07:33.001
And kinda go through and see,
&gt;&gt; Bianca Gandolfo: If

105
00:07:33.001 --> 00:07:37.720
you're bug-free, okay.

106
00:07:37.720 --> 00:07:40.543
All right, so we'll start with push.

107
00:07:42.481 --> 00:07:47.612
&gt;&gt; Bianca Gandolfo: Okay, so
push adds a new value of any

108
00:07:47.612 --> 00:07:52.330
type and like that thing there.

109
00:07:52.330 --> 00:07:59.680
Okay, all right, so I want to add a value,
so I need a length.

110
00:08:00.880 --> 00:08:03.895
So maybe I'll say this.length.

111
00:08:07.012 --> 00:08:08.394
&gt;&gt; Bianca Gandolfo: We'll
initialize it at 0,

112
00:08:08.394 --> 00:08:10.530
cuz the first time we won't have anything.

113
00:08:11.670 --> 00:08:17.075
So let's see, so
I could say this._storage,

114
00:08:20.271 --> 00:08:21.389
&gt;&gt; Bianca Gandolfo: At the length,

115
00:08:25.583 --> 00:08:29.320
&gt;&gt; Bianca Gandolfo: Equals value, okay?

116
00:08:29.320 --> 00:08:32.608
The second time we add it,

117
00:08:32.608 --> 00:08:37.392
we're gonna want length to be one, so

118
00:08:37.392 --> 00:08:43.383
we'll increment length after, okay, push.

119
00:08:43.383 --> 00:08:49.590
&gt;&gt; Student: The basic thing at
this place in the stack, right?

120
00:08:49.590 --> 00:08:52.374
This is the value that is assigned to it.

121
00:08:52.374 --> 00:08:55.186
&gt;&gt; Bianca Gandolfo: Yep, so
the very first one is gonna be zero and

122
00:08:55.186 --> 00:08:57.160
you're gonna be counting up.

123
00:08:57.160 --> 00:09:03.730
Then when you pop, you are going to
start from the highest on and go down.

124
00:09:05.220 --> 00:09:06.863
&gt;&gt; Student: Which we'll know
from the length property?

125
00:09:06.863 --> 00:09:10.020
&gt;&gt; Bianca Gandolfo: Exactly, we can
derive that from the length, for sure.

126
00:09:10.020 --> 00:09:12.266
Okay, so that seems reasonable.

127
00:09:12.266 --> 00:09:19.002
Let's just,
&gt;&gt; Bianca Gandolfo: console.log,

128
00:09:19.002 --> 00:09:22.700
and make sure that we're on
the right track, all right.

129
00:09:23.810 --> 00:09:26.273
Great, that seems to be
what I am expecting.

130
00:09:29.102 --> 00:09:30.544
&gt;&gt; Bianca Gandolfo: I
apologize that's really small.

131
00:09:32.943 --> 00:09:34.784
&gt;&gt; Bianca Gandolfo: Okay,
I feel happy about that,

132
00:09:34.784 --> 00:09:37.600
how do you guys feel about that?

133
00:09:37.600 --> 00:09:42.416
Any questions about our push?

134
00:09:46.832 --> 00:09:49.961
&gt;&gt; Bianca Gandolfo: Something I used
to think about, since this an object,

135
00:09:49.961 --> 00:09:51.700
we can't support a function.

136
00:09:51.700 --> 00:09:53.910
We can't support an array or
anything like that.

137
00:09:53.910 --> 00:09:58.145
So those are some type
checks you could use, so

138
00:09:58.145 --> 00:10:03.691
I might do,
&gt;&gt; Bianca Gandolfo: Something like that.

139
00:10:04.770 --> 00:10:11.027
Okay, so let's think, if this is
empty would it work any differently?

140
00:10:13.110 --> 00:10:17.370
&gt;&gt; Student: Meaning that if
it didn't get an argument in?

141
00:10:17.370 --> 00:10:19.922
&gt;&gt; Bianca Gandolfo: That's another thing
to check, if there is no argument.

142
00:10:26.331 --> 00:10:27.349
&gt;&gt; Bianca Gandolfo: Go on, anything else?

143
00:10:30.323 --> 00:10:32.520
&gt;&gt; Student: [INAUDIBLE] Like edge cases-
&gt;&gt; Bianca Gandolfo: Yeah.

144
00:10:32.520 --> 00:10:35.110
&gt;&gt; Student: If something would break this.

145
00:10:35.110 --> 00:10:36.362
&gt;&gt; Bianca Gandolfo: Exactly.

146
00:10:46.375 --> 00:10:48.180
&gt;&gt; Bianca Gandolfo: Okay, ready for pop?

147
00:10:48.180 --> 00:10:51.038
So pop, what does pop take?

148
00:10:54.001 --> 00:10:55.906
&gt;&gt; Bianca Gandolfo: As an argument,
what does it take?

149
00:10:55.906 --> 00:10:58.318
Nothing, right?

150
00:10:58.318 --> 00:10:59.124
Okay.

151
00:10:59.124 --> 00:11:03.336
&gt;&gt; Student: It's always
gonna be the last one.

152
00:11:03.336 --> 00:11:04.715
&gt;&gt; Bianca Gandolfo: Yep,
it's always gonna be the last one.

153
00:11:04.715 --> 00:11:06.650
You want to return it at the end.

154
00:11:06.650 --> 00:11:11.445
So we can see for my signature,
tells what's doing and

155
00:11:11.445 --> 00:11:16.563
just return the last and
newest value in the stack, okay.

156
00:11:16.563 --> 00:11:18.510
So how can we do this?

157
00:11:18.510 --> 00:11:27.112
We can say,
&gt;&gt; Bianca Gandolfo: Let's say,

158
00:11:27.112 --> 00:11:34.819
const lastVal = this._storage and

159
00:11:34.819 --> 00:11:40.850
this.length- 1, right?

160
00:11:43.050 --> 00:11:45.877
So that's another thing to be mindful of,
off by one errors.

161
00:11:51.783 --> 00:11:56.775
&gt;&gt; Bianca Gandolfo: And
then we need to delete it,

162
00:11:56.775 --> 00:12:03.167
we can actually use a delete keyword,

163
00:12:03.167 --> 00:12:08.177
or what I usually do as I just.

164
00:12:16.359 --> 00:12:19.077
&gt;&gt; Bianca Gandolfo: this._length- 1.

165
00:12:23.456 --> 00:12:25.904
&gt;&gt; Bianca Gandolfo: Set it to undefined,
same thing as deleting it.

166
00:12:27.955 --> 00:12:30.910
&gt;&gt; Bianca Gandolfo: And then,
we wanna return our last value.

167
00:12:32.360 --> 00:12:38.488
And before that, I think Tom mentioned
we need to decrement our length.

168
00:12:43.615 --> 00:12:44.712
&gt;&gt; Bianca Gandolfo: All right.

169
00:12:47.550 --> 00:12:49.128
&gt;&gt; Bianca Gandolfo: What do we think?

170
00:12:49.128 --> 00:12:51.475
&gt;&gt; Student2: They'd have returning.

171
00:12:51.475 --> 00:12:54.342
&gt;&gt; Student: So what is 125,
walk me through that again?

172
00:12:54.342 --> 00:12:59.498
&gt;&gt; Bianca Gandolfo: Yeah, so what we're
doing is we have let's say, so we pushed,

173
00:12:59.498 --> 00:13:05.430
we have zero, this is our storage object,
we have zero like this in here.

174
00:13:06.510 --> 00:13:08.330
And then we also have one, right?

175
00:13:09.510 --> 00:13:10.680
We have two.

176
00:13:10.680 --> 00:13:15.040
So when we pop,
we are grabbing this value,

177
00:13:15.040 --> 00:13:19.690
which is one, at property one.

178
00:13:21.220 --> 00:13:23.630
Saving it in there,
because we're gonna delete it.

179
00:13:23.630 --> 00:13:27.680
Once you delete it, so you have to
save a reference before you delete it.

180
00:13:27.680 --> 00:13:32.800
And so what we're doing here is we're
just setting this value to undefined.

181
00:13:32.800 --> 00:13:34.050
&gt;&gt; Student: Reset it almost.

182
00:13:34.050 --> 00:13:35.920
&gt;&gt; Bianca Gandolfo: Yeah,
yeah, it's the same.

183
00:13:35.920 --> 00:13:39.097
I think the implementation
details of the delete keyword and

184
00:13:39.097 --> 00:13:43.093
sending it to undefined are pretty much
exactly the same, so I don't care.

185
00:13:43.093 --> 00:13:45.890
&gt;&gt; Student: So we saved the reference
on line 24, so we don't care.

186
00:13:45.890 --> 00:13:49.030
Now it's stored there cuz we grabbed it.

187
00:13:49.030 --> 00:13:51.500
&gt;&gt; Bianca Gandolfo: And
you have to delete it, somehow, right.

188
00:13:51.500 --> 00:13:55.310
Another way that you can do it
is you could instead of, yeah,

189
00:13:55.310 --> 00:13:57.191
I would just said undefined.

190
00:13:57.191 --> 00:14:00.220
There are a few other things you could do,
but this is the easiest thing.

191
00:14:00.220 --> 00:14:05.980
Or if you like the delete keyword,
you can just delete it, too.

