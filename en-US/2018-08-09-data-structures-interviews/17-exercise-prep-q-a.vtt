WEBVTT

1
00:00:00.220 --> 00:00:01.730
&gt;&gt; Bianca Gandolfo: Let me know
if anything isn't clear and

2
00:00:01.730 --> 00:00:05.500
I can clarify, okay.

3
00:00:05.500 --> 00:00:08.889
&gt;&gt; Speaker 2: So how would you recommend
we go about it, can we Google this?

4
00:00:08.889 --> 00:00:11.750
Or do you want us just to reason
ourselves, or what's the best approach?

5
00:00:11.750 --> 00:00:12.914
&gt;&gt; Bianca Gandolfo: Good question, so

6
00:00:12.914 --> 00:00:16.566
I recommend trying to read
the reason through it yourself.

7
00:00:16.566 --> 00:00:20.380
At home I would spend an hour
trying to do it yourself.

8
00:00:20.380 --> 00:00:24.985
If you get stuck, then maybe this
might be a little too advanced.

9
00:00:24.985 --> 00:00:31.255
And it might be worthwhile to look at
different ways that this is implemented.

10
00:00:31.255 --> 00:00:35.128
And then give it a couple days,
and then come back and

11
00:00:35.128 --> 00:00:38.662
see if you can remember
the general technique.

12
00:00:38.662 --> 00:00:42.649
But don't memorize it,
don't be like, okay so

13
00:00:42.649 --> 00:00:48.640
first there's an if, then I need
to make sure that there's an else.

14
00:00:48.640 --> 00:00:50.810
You shouldn't memorize the conditions and

15
00:00:50.810 --> 00:00:53.520
the logic,
just kind of like the general approach.

16
00:00:53.520 --> 00:00:56.568
And then be able to implement
it just from yourself.

17
00:00:58.793 --> 00:01:00.530
&gt;&gt; Bianca Gandolfo: Does that make sense?

18
00:01:00.530 --> 00:01:04.060
Most people should be able to
get to it in an hour if they

19
00:01:04.060 --> 00:01:07.710
have been working with JavaScript for
a while.

20
00:01:07.710 --> 00:01:09.710
If not,
you might struggle a little bit with it,

21
00:01:09.710 --> 00:01:13.500
and that's fine,
that's why we're all here.

22
00:01:13.500 --> 00:01:17.210
And in real life, you're never
gonna implement a hash table or

23
00:01:17.210 --> 00:01:18.590
a hashing function.

24
00:01:18.590 --> 00:01:23.390
You're probably never gonna implement
a link list unless you're doing some crazy

25
00:01:23.390 --> 00:01:25.030
streaming library stuff.

26
00:01:25.030 --> 00:01:27.780
Which is very, I don't know,
maybe you will.

27
00:01:27.780 --> 00:01:29.500
Stack and queue you will be using, but

28
00:01:29.500 --> 00:01:34.180
you won't be implementing from scratch
most of the time, at least I never have.

29
00:01:34.180 --> 00:01:36.020
And then arrays and strings,

30
00:01:36.020 --> 00:01:39.900
which is the other kind of interview
problems that we're gonna go over.

31
00:01:39.900 --> 00:01:44.970
You're clearly never gonna implement
those, cuz you just use them from scratch.

32
00:01:44.970 --> 00:01:47.436
So we're just totally skipping that,

33
00:01:47.436 --> 00:01:51.780
because you already know what an array
is and what a string is, okay?

34
00:01:53.000 --> 00:01:59.520
And then for those who finish early,
I have another prompt that's kind of fun.

35
00:01:59.520 --> 00:02:02.352
But that required is not gonna
help you much with interviews,

36
00:02:02.352 --> 00:02:03.940
it's just kind of a brainteaser.

37
00:02:03.940 --> 00:02:10.750
And it is to create
an array data structure.

38
00:02:10.750 --> 00:02:17.525
Notice this is A-R-A-Y, not A-R-R-Y, so
this is our fake array data structure.

39
00:02:17.525 --> 00:02:21.590
Where underlying we implement
the array as a string.

40
00:02:21.590 --> 00:02:25.550
So you can think about pushing and

41
00:02:25.550 --> 00:02:30.340
popping from an array, and
how you might handle that with a string.

42
00:02:30.340 --> 00:02:36.830
Edge cases, things like length,
it's kind of just a fun exercise.

43
00:02:36.830 --> 00:02:40.902
So if you had time, and you finished
early, or you like these kinds of things,

44
00:02:40.902 --> 00:02:42.025
it's there for you.

