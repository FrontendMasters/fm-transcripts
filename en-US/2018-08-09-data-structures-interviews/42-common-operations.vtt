WEBVTT

1
00:00:02.630 --> 00:00:03.580
&gt;&gt; Bianca Gandolfo: Just a quick recap.

2
00:00:04.590 --> 00:00:05.477
We have been through a lot.

3
00:00:05.477 --> 00:00:10.324
We have gone through a journey
of discovering properties and

4
00:00:10.324 --> 00:00:15.844
various data structures and
the operations that we perform on them.

5
00:00:15.844 --> 00:00:20.268
Then we implemented a bulk
of the data structures that

6
00:00:20.268 --> 00:00:25.200
you would be expected to know
in an interview from scratch.

7
00:00:25.200 --> 00:00:29.838
And then we talked about some themes
around questions related to these data

8
00:00:29.838 --> 00:00:32.600
structures that you might find.

9
00:00:32.600 --> 00:00:35.824
So we've been through a lot,
let's kind of recap what we've seen.

10
00:00:35.824 --> 00:00:38.564
So let's talk a little bit about
this time complexity piece here.

11
00:00:38.564 --> 00:00:44.490
We kind of glossed over it a little
bit in this workshop, last workshop.

12
00:00:44.490 --> 00:00:49.849
Practical intro to algorithms goes
more in depth on calculating and

13
00:00:49.849 --> 00:00:52.206
analyzing time complexity.

14
00:00:52.206 --> 00:00:56.225
So if you're feeling a little lost
about what I'm talking about,

15
00:00:56.225 --> 00:01:01.278
I recommend checking out those videos and
then coming back and hearing me out here.

16
00:01:01.278 --> 00:01:08.153
So let's see, what are some special
things that I wanna point out?

17
00:01:08.153 --> 00:01:13.392
So for a hash table,
we noticed that we have constant time for

18
00:01:13.392 --> 00:01:20.910
pretty much everything, which means that
we're gonna use our law for optimization.

19
00:01:20.910 --> 00:01:24.151
That's why I'm saying like if you can
look a hash table to make it faster,

20
00:01:24.151 --> 00:01:25.053
you should do that.

21
00:01:25.053 --> 00:01:30.057
A lot of our insertions and
deletions, they're ordered,

22
00:01:30.057 --> 00:01:35.770
but they're not necessarily like
in a contiguous block of memory.

23
00:01:35.770 --> 00:01:39.892
So when we insert and delete, we don't
have to worry about shifting things over

24
00:01:39.892 --> 00:01:41.564
and that makes a constant time.

25
00:01:41.564 --> 00:01:46.251
And actually in JavaScript arrays
in most browser environments

26
00:01:46.251 --> 00:01:48.602
are basically the same as this.

27
00:01:48.602 --> 00:01:53.536
So this linear time is kind
of probably not true for

28
00:01:53.536 --> 00:01:59.770
JavaScript, depending on where
your JavaScript is running.

29
00:02:01.510 --> 00:02:04.853
Let's see, what are some other
things that you should know?

30
00:02:04.853 --> 00:02:09.508
Did you check out in your sorting,
that's an important thing for

31
00:02:09.508 --> 00:02:11.970
these data structure questions.

32
00:02:11.970 --> 00:02:15.848
A lot of them can be improved
significantly, if you just sort the input.

33
00:02:15.848 --> 00:02:20.550
I would just use
the JavaScript sort method.

34
00:02:20.550 --> 00:02:24.284
Be careful you need to learn how to use
that call back function where you have to

35
00:02:24.284 --> 00:02:25.155
return a minus b.

36
00:02:25.155 --> 00:02:26.464
So just remember how that works.

37
00:02:26.464 --> 00:02:29.090
One is ascending, one is descending.

38
00:02:29.090 --> 00:02:32.726
And under the hood,
it's either merge sort or quick sort.

39
00:02:32.726 --> 00:02:36.872
And so, you can expect an end log in for
these kind of sorts, but

40
00:02:36.872 --> 00:02:40.237
it's even better if the input
is already sorted and

41
00:02:40.237 --> 00:02:45.111
then you don't even need to think about
sorting it or anything like that.

42
00:02:45.111 --> 00:02:48.360
Some other things to think about
are doing things in place.

43
00:02:48.360 --> 00:02:51.531
And so this is so
that you don't consume extra memory.

44
00:02:51.531 --> 00:02:56.309
A lot of questions will start off with
sort of a naive solution where maybe

45
00:02:56.309 --> 00:02:59.991
you'll use hash table to make
something really fast and

46
00:02:59.991 --> 00:03:05.110
then your interviewer will, they'll
be like but can you do it in place?

47
00:03:05.110 --> 00:03:06.424
And then you're like no and

48
00:03:06.424 --> 00:03:09.063
then you have to figure out a creative
way to not use a hash table.

49
00:03:09.063 --> 00:03:14.680
And so some ways you can do that are like
using pointers with link list is one way.

50
00:03:16.590 --> 00:03:17.380
What's another way?

51
00:03:18.904 --> 00:03:21.745
Man, there's some other ways.

52
00:03:21.745 --> 00:03:22.870
I don't know.

53
00:03:23.920 --> 00:03:28.572
I'm blanking at the moment, but
definitely using pointers, swapping.

54
00:03:28.572 --> 00:03:35.412
So instead of creating a new data
structure, you can just swap them.

55
00:03:35.412 --> 00:03:39.249
You can swap only in data
structures that have an order.

56
00:03:39.249 --> 00:03:42.733
So if it's an unordered data structure,
you can't really swap.

57
00:03:42.733 --> 00:03:45.769
So that's not gonna help you.

58
00:03:45.769 --> 00:03:50.734
Pretty much, searching the best you can do
is gonna be 0 of n cuz you have to look

59
00:03:50.734 --> 00:03:54.739
at everything, unless it's ordered,
unless it's sorted.

60
00:03:54.739 --> 00:03:59.607
And then in which case you can use
something like binary search in

61
00:03:59.607 --> 00:04:01.602
that can speed things up.

62
00:04:01.602 --> 00:04:04.510
Trying to think of what else
I can tell you about this.

63
00:04:04.510 --> 00:04:09.362
I don't know, be familiar with this.

64
00:04:09.362 --> 00:04:14.897
You don't need to memorize this table,
but you should be able to

65
00:04:14.897 --> 00:04:21.210
reason about the time complexity of
various operations in your code.

66
00:04:21.210 --> 00:04:26.360
So before you get into
interview questions, before

67
00:04:26.360 --> 00:04:31.535
you are studying data structures
when you're just writing your code

68
00:04:31.535 --> 00:04:36.650
day-to-day just think
about this array.push.

69
00:04:36.650 --> 00:04:37.679
How does that work?

70
00:04:37.679 --> 00:04:42.345
Think about memory allocation and how that
might work and then you can Google it and

71
00:04:42.345 --> 00:04:45.251
things like that,
then you can really learn okay,

72
00:04:45.251 --> 00:04:47.484
what are the costs of this operation?

73
00:04:47.484 --> 00:04:51.049
And that will help you have
a strong foundation of the time

74
00:04:51.049 --> 00:04:55.216
complexity of just common
operations that you use day-to-day.

75
00:04:55.216 --> 00:04:58.858
And then when you start to combine them
into solve problems that you wouldn't

76
00:04:58.858 --> 00:05:02.108
normally solve at least you
are comfortable with that to begin with,

77
00:05:02.108 --> 00:05:03.300
that would be my advice.

