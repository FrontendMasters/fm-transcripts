WEBVTT

1
00:00:00.270 --> 00:00:05.358
&gt;&gt; Bianca Gandolfo: So this is
an interesting one, it's a little bit

2
00:00:05.358 --> 00:00:11.200
different than our contiguous
block data structures.

3
00:00:11.200 --> 00:00:18.390
It doesn't really have a one-to-one
mental model from this

4
00:00:18.390 --> 00:00:23.280
data structure to what we actually think
about while we're coding in JavaScript.

5
00:00:23.280 --> 00:00:26.360
But it is important,
because like I mentioned,

6
00:00:26.360 --> 00:00:32.730
it is an example of how pointers
can be used creatively.

7
00:00:32.730 --> 00:00:38.810
And this is very important in languages
that don't have dynamic arrays.

8
00:00:38.810 --> 00:00:40.740
So JavaScript,
all of our arrays are dynamic,

9
00:00:40.740 --> 00:00:44.550
which means that we don't need to
set the size, it just changes.

10
00:00:44.550 --> 00:00:49.580
Linked list is pretty much how
you implement a dynamic array.

11
00:00:49.580 --> 00:00:54.191
So if you were going to traverse or
loop from 5 to 10 to 20,

12
00:00:54.191 --> 00:00:59.069
if this was a contiguous block of memory,
this would be index 0,

13
00:00:59.069 --> 00:01:03.260
this would be index 1,
this would be index 2, right?

14
00:01:03.260 --> 00:01:06.900
That's how we would loop through
it just with numbers, really.

15
00:01:08.330 --> 00:01:14.427
For a link list, the way we would loop is
we would say the next one, the next one.

16
00:01:14.427 --> 00:01:21.110
So this is a property called next
that points to another object.

17
00:01:21.110 --> 00:01:25.573
And so this is important because when we

18
00:01:25.573 --> 00:01:30.577
think about assigning values to an object,

19
00:01:30.577 --> 00:01:35.323
we are really just pointing to an object.

20
00:01:35.323 --> 00:01:40.628
That object is not living in
memory inside that variable,

21
00:01:40.628 --> 00:01:44.640
that variable has
a pointer to that object.

22
00:01:44.640 --> 00:01:46.680
If you assign another variable,

23
00:01:46.680 --> 00:01:51.030
that pointer is now pointing to that same
object, but there's only one object.

24
00:01:51.030 --> 00:01:56.006
And so that's what we say by reference,
cuz we're referring to that object.

25
00:01:56.006 --> 00:01:59.910
So you could have a bunch of
different variable names, or

26
00:01:59.910 --> 00:02:03.920
you could pass it into a function,
but it's all the same object.

27
00:02:03.920 --> 00:02:09.450
However, and that's not true for primitive
types like strings or numbers, right?

28
00:02:09.450 --> 00:02:15.790
If you say x equals 1 and b equals 2, or

29
00:02:15.790 --> 00:02:20.770
x equals 1 and b equals 1,
those are two different

30
00:02:22.200 --> 00:02:26.470
things, and it's actually
stored differently in memory.

31
00:02:26.470 --> 00:02:30.845
And so if I change x to 2, b is still 1,

32
00:02:30.845 --> 00:02:35.550
right, everyone would expect that?

33
00:02:35.550 --> 00:02:40.473
However, if x is pointing to an object and
b is pointing to an object, and

34
00:02:40.473 --> 00:02:46.319
we changed that object, the internals of
that object, both of them will be changed.

35
00:02:49.097 --> 00:02:51.272
&gt;&gt; Bianca Gandolfo: Someone asked
me a question about that, yeah.

36
00:02:51.272 --> 00:02:57.360
&gt;&gt; Student: [COUGH] Is that because
inheritance of that, or is that just?

37
00:02:57.360 --> 00:03:02.090
&gt;&gt; Bianca Gandolfo: That's because
of the way we store data in memory.

38
00:03:02.090 --> 00:03:06.380
So inheritance is different because,

39
00:03:06.380 --> 00:03:10.660
well so the interesting thing about
your question is that inheritance,

40
00:03:10.660 --> 00:03:16.590
like prototypal inheritance works
because of this concept of by reference.

41
00:03:16.590 --> 00:03:21.530
So inheritance, we're all sharing objects,
right, we're sharing the same object.

42
00:03:22.770 --> 00:03:26.570
If you're not careful you
can change this object, and

43
00:03:26.570 --> 00:03:28.720
you could have consequences
somewhere else.

44
00:03:28.720 --> 00:03:32.240
And that's something to think about
when you're mutating your data,

45
00:03:33.460 --> 00:03:35.140
like in your life, right?

46
00:03:35.140 --> 00:03:40.800
If you're changing your object,
it's gonna be changed everywhere.

47
00:03:40.800 --> 00:03:44.841
And this is the classic problem of if this
widget needs this object, and this widget

48
00:03:44.841 --> 00:03:48.781
needs this object, but this has this
value, you don't want this one to change.

49
00:03:48.781 --> 00:03:54.919
But you update this one, and that one
updates also, that can be a problem.

50
00:03:54.919 --> 00:03:58.301
&gt;&gt; Student2: This is what people talk
about when they talk about shallow copies

51
00:03:58.301 --> 00:04:00.560
and deep copies in JavaScript, right?

52
00:04:00.560 --> 00:04:02.046
Where in order to, no?

53
00:04:02.046 --> 00:04:04.480
&gt;&gt; Bianca Gandolfo: No.
&gt;&gt; Student2: This is not what, okay.

54
00:04:04.480 --> 00:04:09.490
&gt;&gt; Bianca Gandolfo: No, so
a shallow copy just means that, so

55
00:04:09.490 --> 00:04:16.450
if you have a nested data structure, a
shallow copy will only copy the top level.

56
00:04:16.450 --> 00:04:20.660
It won't copy the children if it's nested,
so that's a shallow copy.

57
00:04:20.660 --> 00:04:27.520
A deep copy will loop through into
all of the children recursively.

58
00:04:27.520 --> 00:04:32.490
And if you use a r flag in the terminal,
that's a recursive,

59
00:04:32.490 --> 00:04:35.914
that means it will go through all of them.

60
00:04:35.914 --> 00:04:40.785
Similarly with copying, same idea, except-
&gt;&gt; Student3: And nested lists, right?

61
00:04:40.785 --> 00:04:41.390
&gt;&gt; Bianca Gandolfo: What?

62
00:04:41.390 --> 00:04:44.110
&gt;&gt; Student3: Nested lists,
is that what you're talking about?

63
00:04:44.110 --> 00:04:45.747
&gt;&gt; Bianca Gandolfo: Yes, exactly, exactly.

64
00:04:49.459 --> 00:04:53.510
&gt;&gt; Bianca Gandolfo: Okay, so
back to the linked list thing.

65
00:04:53.510 --> 00:04:56.200
So linked lists,
another sequential data structure.

66
00:04:56.200 --> 00:05:01.550
It's important to note what's
sequential and what's not.

67
00:05:01.550 --> 00:05:05.726
Because that will prepresent constraints
for what you can use it for,

68
00:05:05.726 --> 00:05:07.820
what you can't use it for.

69
00:05:07.820 --> 00:05:15.300
So the size is dynamic, and that's
really powerful in some environments.

70
00:05:15.300 --> 00:05:19.292
In a JavaScript environment, we already
have that for free, which is nice.

71
00:05:19.292 --> 00:05:22.220
But in other languages, you might
have to think about that actively.

72
00:05:24.480 --> 00:05:30.460
We can do quick deletions from the middle.

73
00:05:30.460 --> 00:05:35.754
Just like that unshift example with
the queue that I was talking about before.

74
00:05:35.754 --> 00:05:38.280
Where if you remove
something from the front,

75
00:05:38.280 --> 00:05:41.080
you would then need to move
all of the indices over.

76
00:05:42.290 --> 00:05:46.620
The same thing could happen if you
deleted a node in the middle of an array,

77
00:05:46.620 --> 00:05:49.430
everything on the back would
need to be shifted over.

78
00:05:49.430 --> 00:05:52.840
And so with a linked list,
we don't need to worry about that.

79
00:05:52.840 --> 00:05:56.515
Because we would just move
the pointer to something else,

80
00:05:56.515 --> 00:05:58.843
and it doesn't affect it, mm-hm.

81
00:05:58.843 --> 00:06:01.904
&gt;&gt; Student: [COUGH] Isn't
it true you still have to

82
00:06:01.904 --> 00:06:04.580
traverse the list to get there?

83
00:06:05.580 --> 00:06:07.170
&gt;&gt; Bianca Gandolfo: Yeah so that's-
&gt;&gt; Student: You know what I mean, so

84
00:06:07.170 --> 00:06:07.860
that takes time.

85
00:06:07.860 --> 00:06:12.459
&gt;&gt; Bianca Gandolfo: So the find for
a link list is much slower.

86
00:06:12.459 --> 00:06:16.494
But if you have a reference to
the node that you wanna delete, or

87
00:06:16.494 --> 00:06:20.697
even just the node before it or
something, then it's constant.

88
00:06:20.697 --> 00:06:26.245
But yeah, the searching part is gonna
be slower, and that's one of the cons.

89
00:06:26.245 --> 00:06:30.420
Is if you're looking for
a particular value, that can take a while.

90
00:06:30.420 --> 00:06:37.110
Versus an array, we can go directly to
an index, if you're looking up a key.

91
00:06:37.110 --> 00:06:43.439
If you're looking up a value, right,
you still need to loop through everything.

92
00:06:43.439 --> 00:06:47.904
Unless is sorted, in which case there
are other ways we could go about it.

