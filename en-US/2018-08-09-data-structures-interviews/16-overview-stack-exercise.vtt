WEBVTT

1
00:00:02.743 --> 00:00:04.054
&gt;&gt; Bianca Gandolfo: All right, so,

2
00:00:04.054 --> 00:00:10.350
we're gonna hop into the implementation
piece of the workshop now.

3
00:00:10.350 --> 00:00:15.800
So we did the kind of discovery
phase where we discussed

4
00:00:15.800 --> 00:00:19.860
what these data structures are,
kind of the theory behind them.

5
00:00:19.860 --> 00:00:23.890
We talked a tiny bit about time complexity
analysis of certain operations and

6
00:00:23.890 --> 00:00:25.550
we drew a lot of pictures.

7
00:00:25.550 --> 00:00:29.330
And now sort of like the first phase
of learning data structure, the theory.

8
00:00:29.330 --> 00:00:33.220
Now we're getting to like, how do we
turn those pictures into lines of code?

9
00:00:33.220 --> 00:00:35.780
And this is the implementation piece.

10
00:00:35.780 --> 00:00:39.899
And then, the next step is going to be
how do we take those lines and code and

11
00:00:39.899 --> 00:00:43.036
solve the real problem that
you may be ask to interview?

12
00:00:43.036 --> 00:00:44.310
And then we do recap.

13
00:00:44.310 --> 00:00:48.290
But first,
I'm gonna go over the structure of

14
00:00:48.290 --> 00:00:52.680
the boilerplate code I'm gonna give you,
that's gonna be the prompt.

15
00:00:52.680 --> 00:00:57.080
So, I recommend when you guys get
home when you have some free time

16
00:00:57.080 --> 00:00:59.890
to go through and implement all of them.

17
00:00:59.890 --> 00:01:02.360
Those of you who are taking
this class online,

18
00:01:02.360 --> 00:01:04.890
I recommend implementing all of them.

19
00:01:04.890 --> 00:01:08.146
Just for the class, we don't have
time to do all of them here today,

20
00:01:08.146 --> 00:01:12.260
cuz it'll take 20-30 minutes for each, and
then suddenly that's two hours for us.

21
00:01:12.260 --> 00:01:14.850
And that's most of the day, and we don't
wanna focus on that, we wanna focus on,

22
00:01:14.850 --> 00:01:18.930
really, the application
of these data structures,

23
00:01:18.930 --> 00:01:22.618
to real interview questions, and
I want to leave a few hours for that.

24
00:01:22.618 --> 00:01:27.246
Okay, so,
&gt;&gt; Bianca Gandolfo: Some

25
00:01:27.246 --> 00:01:30.469
things to keep in mind are this table,

26
00:01:30.469 --> 00:01:36.080
this is a very famous table,
this is a big old cheat sheet.

27
00:01:36.080 --> 00:01:38.840
Most of the pictures in my
slides are secretly a link.

28
00:01:38.840 --> 00:01:43.124
So if you click on this it'll bring you
to the website, where you can find this.

29
00:01:43.124 --> 00:01:46.780
So, these are the data structures
that we're going over today.

30
00:01:46.780 --> 00:01:50.810
The time complexities for
most common operations.

31
00:01:50.810 --> 00:01:53.801
As you can see, they all share access, so

32
00:01:53.801 --> 00:01:59.659
that's the lookup, insertion,
search, and delete, deletion.

33
00:01:59.659 --> 00:02:01.274
&gt;&gt; Bianca Gandolfo: They all
have their pros and cons, and

34
00:02:01.274 --> 00:02:04.558
you need to keep this in mind when
you're implementing your data structure,

35
00:02:04.558 --> 00:02:06.852
because you need to meet
these requirements, okay?

36
00:02:08.435 --> 00:02:11.249
&gt;&gt; Bianca Gandolfo: And
then we have sorting algorithm,

37
00:02:11.249 --> 00:02:14.310
time complexity here as well.

38
00:02:14.310 --> 00:02:19.750
And this is good to know for when you're
actually solving interview questions,

39
00:02:19.750 --> 00:02:27.400
cuz you'll find that often you can
increase the time complexity of your

40
00:02:27.400 --> 00:02:33.880
solution by sorting the list if
it's an ordered data structure.

41
00:02:33.880 --> 00:02:37.162
So basically, anything other
than a hash table, you can sort.

42
00:02:39.865 --> 00:02:43.338
&gt;&gt; Bianca Gandolfo: Okay,
&gt;&gt; Bianca Gandolfo: So,

43
00:02:47.011 --> 00:02:47.842
&gt;&gt; Bianca Gandolfo: I'm trying to think if

44
00:02:47.842 --> 00:02:49.121
I should have go through each one.

45
00:02:49.121 --> 00:02:52.470
Well, we'll go through it when
I go through the bolierplate.

46
00:02:52.470 --> 00:02:55.449
And then we'll talk about
the specifics of each one.

47
00:02:55.449 --> 00:02:59.460
&gt;&gt; Bianca Gandolfo: And then you need to
make sure that you implement it that way.

48
00:02:59.460 --> 00:03:02.729
Okay, so we have our stack.

49
00:03:02.729 --> 00:03:05.884
So if you click this button,
&gt;&gt; Bianca Gandolfo: It will take you to

50
00:03:05.884 --> 00:03:06.987
the prompt.

51
00:03:11.502 --> 00:03:17.008
&gt;&gt; Bianca Gandolfo: And,
&gt;&gt; Bianca Gandolfo: Then what you

52
00:03:17.008 --> 00:03:21.970
can do from the prompt is you can fork it,
and then you can write your solution here.

53
00:03:23.410 --> 00:03:27.276
&gt;&gt; Bianca Gandolfo: And so,
&gt;&gt; Bianca Gandolfo: Just know that.

54
00:03:28.564 --> 00:03:29.178
&gt;&gt; Bianca Gandolfo: How do I go back?

55
00:03:32.890 --> 00:03:34.830
&gt;&gt; Bianca Gandolfo: Stick to the original,
okay.

56
00:03:34.830 --> 00:03:39.660
So here we are implementing
a class that represents a Stack.

57
00:03:39.660 --> 00:03:41.116
So we're using a constructor.

58
00:03:43.350 --> 00:03:45.311
&gt;&gt; Bianca Gandolfo: A class
contractor here.

59
00:03:48.314 --> 00:03:52.970
&gt;&gt; Bianca Gandolfo: And, anytime you wanna
put a property on a data structure itself,

60
00:03:52.970 --> 00:03:58.410
right, so this is like, storage or,
&gt;&gt; Bianca Gandolfo: What else?

61
00:03:58.410 --> 00:03:59.840
If you have a pointer to the head or

62
00:03:59.840 --> 00:04:05.150
the tail, you would put this
is in the constructor method.

63
00:04:05.150 --> 00:04:09.367
So this just ES6 classes,
if you're used to ES5 classes,

64
00:04:09.367 --> 00:04:13.997
this is just inside of the regular
function, where you call new and

65
00:04:13.997 --> 00:04:18.874
you return this .storage,
&gt;&gt; Bianca Gandolfo: This is just

66
00:04:18.874 --> 00:04:20.986
a different syntax.

67
00:04:25.894 --> 00:04:29.406
&gt;&gt; Bianca Gandolfo: When you create
an instance, which means that,

68
00:04:29.406 --> 00:04:34.288
from your constructor, you create one,
it's a factory, right,

69
00:04:34.288 --> 00:04:38.914
you create one of the things that
you're making, in this case,

70
00:04:38.914 --> 00:04:44.180
it's a stack, how we use it is we say
new Stack, and we call it like this.

71
00:04:44.180 --> 00:04:48.250
And so what myStack will look like?

72
00:04:48.250 --> 00:04:50.600
Is it will look like an object

73
00:04:51.840 --> 00:04:57.070
that has a property _storage,
that has an object inside of it?

74
00:04:57.070 --> 00:04:58.400
That's what that looks like.

75
00:04:58.400 --> 00:05:01.369
So we could take look and
then we have some methods as well.

76
00:05:01.369 --> 00:05:04.520
&gt;&gt; Bianca Gandolfo: But
we'll get to those in a second.

77
00:05:04.520 --> 00:05:09.290
So if we wanted to console.log,
and I highly recommend that

78
00:05:09.290 --> 00:05:13.690
through different steps, you should
inspect what the code actually looks like,

79
00:05:13.690 --> 00:05:16.130
instead of just assuming it
looks like a certain way.

80
00:05:16.130 --> 00:05:19.800
So let's take a look and see,
&gt;&gt; Bianca Gandolfo: What it looks like.

81
00:05:19.800 --> 00:05:21.391
So we have, again, here our storage.

82
00:05:25.033 --> 00:05:29.540
&gt;&gt; Bianca Gandolfo: Okay,
questions about how this works?

83
00:05:29.540 --> 00:05:32.220
So this is how we make classes in ES6.

84
00:05:32.220 --> 00:05:37.556
If we wanted to put another thing,
let me say this .otherThing.

85
00:05:37.556 --> 00:05:42.243
Whoa, you know and
then you can do it again,

86
00:05:42.243 --> 00:05:45.803
and you can see it's also there.

87
00:05:46.884 --> 00:05:48.373
&gt;&gt; Bianca Gandolfo: Okay.

88
00:05:48.373 --> 00:05:49.630
&gt;&gt; Bianca Gandolfo: So
we don't really need this.

89
00:05:49.630 --> 00:05:53.550
So the underscore is
a convention that says like,

90
00:05:53.550 --> 00:05:59.600
this is an internal property you
shouldn't be working on it directly.

91
00:05:59.600 --> 00:06:03.780
So if you were consuming this Stack class,
which means,

92
00:06:03.780 --> 00:06:06.750
you're the person who called new.

93
00:06:06.750 --> 00:06:14.030
So I'm consuming this Stack class,
I am not supposed to do stack.storage.

94
00:06:14.030 --> 00:06:18.180
Cuz the underscore says, this is private,
you're not supposed to access it,

95
00:06:18.180 --> 00:06:21.570
you can only access it through
the methods that are public.

96
00:06:21.570 --> 00:06:26.092
Right, and the public methods that
we have, which aren't implemented,

97
00:06:26.092 --> 00:06:28.737
we have peek, pop, and push.

98
00:06:28.737 --> 00:06:29.956
&gt;&gt; Bianca Gandolfo: So
that's what the underscore means.

99
00:06:31.537 --> 00:06:33.115
&gt;&gt; Bianca Gandolfo: Cuz you could,
right, you could do that.

100
00:06:34.497 --> 00:06:36.129
&gt;&gt; Bianca Gandolfo: It's
returning that value here.

101
00:06:39.559 --> 00:06:42.315
&gt;&gt; Bianca Gandolfo: It's not important.

102
00:06:43.583 --> 00:06:49.340
&gt;&gt; Bianca Gandolfo: Okay, so your task
is to read through this code comments.

103
00:06:49.340 --> 00:06:53.354
This is just JS Stack format which means
that, it kind of has a description,

104
00:06:53.354 --> 00:06:57.220
and then we'll talk about
the parameter that it takes.

105
00:06:57.220 --> 00:07:00.140
And then,
the name of that parameter, right?

106
00:07:00.140 --> 00:07:04.290
So in this case, when we say push,
we will say, push value, put this here.

107
00:07:04.290 --> 00:07:08.760
And then, if there's a return value,
we also talk about what it may return.

108
00:07:08.760 --> 00:07:10.910
So push doesn't necessarily
return new thing.

109
00:07:10.910 --> 00:07:13.692
However, pop, we'll return the last,
newest value.

110
00:07:13.692 --> 00:07:17.540
And so this is defining
the interface of this method.

111
00:07:17.540 --> 00:07:22.931
And so, you're task is,
how do we interact with our storage?

112
00:07:22.931 --> 00:07:25.962
And, do we need to make more
properties to make this work?

113
00:07:25.962 --> 00:07:31.736
What is the logic that we need
to put inside to have push work,

114
00:07:31.736 --> 00:07:35.359
to have pop work, and have peek work,

115
00:07:35.359 --> 00:07:41.491
in the time complexity that is
required of this data structure.

116
00:07:41.491 --> 00:07:47.208
So this needs to be a constant,
this needs to be constant,

117
00:07:47.208 --> 00:07:50.530
this needs to be constant time.

118
00:07:50.530 --> 00:07:54.941
Which means that,
we can't shift anything around,

119
00:07:54.941 --> 00:08:02.407
like there shouldn't be any looping, there
shouldn't be anything other than lookups.

120
00:08:02.407 --> 00:08:06.799
So lookups, simple math, things like that
are gonna be constant time operations.

121
00:08:08.120 --> 00:08:11.650
And if you're confused about what is or
isn't a constant time operation

122
00:08:11.650 --> 00:08:15.720
as you're going through this, feel free
to ask, and I can chat with you about it.

123
00:08:15.720 --> 00:08:18.720
For those of you who are watching
the video, you can check out my time

124
00:08:18.720 --> 00:08:22.190
complexity videos in the algorithms
portion of this course.

