WEBVTT

1
00:00:00.050 --> 00:00:04.410
&gt;&gt; Bianca Gandolfo: So we're going
to talk about data structures now.

2
00:00:04.410 --> 00:00:08.890
We're going to go into the theoretical
aspects of the data structure.

3
00:00:08.890 --> 00:00:15.270
We're going to describe what it looks
like the operations you can expect on it.

4
00:00:15.270 --> 00:00:19.140
And also the time complexity and

5
00:00:19.140 --> 00:00:24.810
analysis of these various operations.

6
00:00:24.810 --> 00:00:25.686
So that's step one.

7
00:00:25.686 --> 00:00:30.739
The analysis,
discovery even real life applications,

8
00:00:30.739 --> 00:00:34.640
why you would even use
this data structure.

9
00:00:34.640 --> 00:00:39.810
The next piece is diving into
the implementation details and so

10
00:00:39.810 --> 00:00:44.810
this would be taking those specific
methods that or perform a particular

11
00:00:44.810 --> 00:00:50.100
operation on your data structure and
writing it such that it beats the specs.

12
00:00:50.100 --> 00:00:54.020
It solves the problem within
the given time complexity

13
00:00:54.020 --> 00:00:59.290
requirement of that particular data
structure which often means that it relies

14
00:00:59.290 --> 00:01:02.830
on something on a particular
data structure for storage.

15
00:01:02.830 --> 00:01:07.390
In Java script we don't have a lot
of data structures that come

16
00:01:07.390 --> 00:01:12.460
out of the box especially pre ES6, so

17
00:01:12.460 --> 00:01:19.020
pre ES6 we really only had an array or
an object as a data structure.

18
00:01:19.020 --> 00:01:21.590
You know,
you can also sort things in variables and

19
00:01:21.590 --> 00:01:23.510
you have primitive data types and
things like that.

20
00:01:23.510 --> 00:01:26.270
But if you wanna store collections.

21
00:01:26.270 --> 00:01:28.531
And I mean you could really store.

22
00:01:28.531 --> 00:01:33.760
We're gonna do it an exercise where we
create an array with string as a store.

23
00:01:33.760 --> 00:01:34.690
So you could do that.

24
00:01:34.690 --> 00:01:37.350
But it's just kind of like a fun exercise.

25
00:01:37.350 --> 00:01:39.970
But typically,
when you're thinking about storage

26
00:01:39.970 --> 00:01:43.489
you're really thinking about an array or
an object under the hood.

27
00:01:45.400 --> 00:01:48.230
So you have like the core storage
of that data structure and

28
00:01:48.230 --> 00:01:57.160
then you have those operations that
perform on that underlying data structure.

29
00:01:58.670 --> 00:02:02.470
So then, so that was step two
the implementation details.

30
00:02:02.470 --> 00:02:07.150
Step three is solving problems with it,
right?

31
00:02:07.150 --> 00:02:12.130
So actually, using that data structure
to solve an interview type question.

32
00:02:12.130 --> 00:02:15.300
So we'll do some practice
problems together after.

33
00:02:15.300 --> 00:02:18.590
And then we'll have like a recap and

34
00:02:18.590 --> 00:02:22.140
we'll talk about kind of
an overview comparing contrast.

35
00:02:22.140 --> 00:02:23.450
All of the data structures.

36
00:02:23.450 --> 00:02:27.938
All the different operations that we may
or may not do with that data structure and

37
00:02:27.938 --> 00:02:33.060
think about how we could approach them.
&gt;&gt; Bianca Gandolfo: Cool.

38
00:02:35.060 --> 00:02:39.590
So the data structures that we're gonna
go over today, we have stacks, queues,

39
00:02:39.590 --> 00:02:44.050
linked lists, hash tables,
arrays and strings.

40
00:02:44.050 --> 00:02:52.450
So here we have this is like the classic
diagram of the JavaScript run time.

41
00:02:52.450 --> 00:02:55.260
And we have the stack,
the queue and the heap.

42
00:02:55.260 --> 00:02:59.138
So the stack is the call stack every
time you call a function it gets pushed

43
00:02:59.138 --> 00:02:59.782
to a stack.

44
00:02:59.782 --> 00:03:04.033
And then we have the queue which is
the message queue which is also a piece of

45
00:03:04.033 --> 00:03:08.270
the run time that deals with
the order that your code executes.

46
00:03:08.270 --> 00:03:11.760
So that's some examples for
stack and queue.

47
00:03:11.760 --> 00:03:14.120
We have our link list here.

48
00:03:14.120 --> 00:03:15.452
Link list is a cool data structure.

49
00:03:15.452 --> 00:03:17.072
It's not continuous, right?

50
00:03:17.072 --> 00:03:20.520
All these nodes can be anywhere in memory.

51
00:03:20.520 --> 00:03:21.980
Then we just have pointers.

52
00:03:21.980 --> 00:03:27.300
Link list are important to
understand how pointers even work.

53
00:03:27.300 --> 00:03:31.370
And that's why a lot of interview
questions focus on linked lists

54
00:03:31.370 --> 00:03:36.096
to show that you understand how
references to data work versus

55
00:03:36.096 --> 00:03:41.940
having a data bi-value.

56
00:03:41.940 --> 00:03:44.550
Then we have hash tables.

57
00:03:44.550 --> 00:03:46.780
Hash tables implement
a couple cool things.

58
00:03:46.780 --> 00:03:49.910
We have a hashing function that we have

59
00:03:49.910 --> 00:03:52.140
on our diagram on the top
of the screen there.

60
00:03:52.140 --> 00:03:58.440
Which it will take some stringified keys
and return some integer between a range.

61
00:03:58.440 --> 00:04:01.560
That's a hashing function,
that's a core component of a hash table.

62
00:04:01.560 --> 00:04:05.130
Hash tables are used under the hood in.

63
00:04:07.070 --> 00:04:09.830
Anytime you're like gosh,
I need something in memory.

64
00:04:09.830 --> 00:04:13.780
Any time you use an object that's going
to be a hash table under the hood.

65
00:04:14.980 --> 00:04:16.040
And we have arrays.

66
00:04:16.040 --> 00:04:18.910
You know all about arrays already
I don't think we need to go there.

67
00:04:18.910 --> 00:04:22.390
As well as strings you should be using
these pretty regularly in your code and

68
00:04:22.390 --> 00:04:24.930
be familiar with how they work.

69
00:04:26.190 --> 00:04:27.320
You can deal with arrays and

70
00:04:27.320 --> 00:04:32.426
strings pretty much interchangeably when
you're thinking about interview questions.

71
00:04:32.426 --> 00:04:38.580
So when you're asked a string question you
could just think about it as an array.

72
00:04:38.580 --> 00:04:40.180
The difference though a key component and

73
00:04:40.180 --> 00:04:43.990
I'll say this again later is
that strings are immutable.

74
00:04:43.990 --> 00:04:48.740
Which means that you cannot
swap characters in a string or

75
00:04:48.740 --> 00:04:51.050
anything like that versus an array, right?

76
00:04:51.050 --> 00:04:54.510
So if this were an apple if we
wanted to swap E and A we could.

77
00:04:54.510 --> 00:05:02.980
With a string you would have to create
a new string with those character swapped.

78
00:05:02.980 --> 00:05:05.760
So that's a key difference
between a string and array.

79
00:05:05.760 --> 00:05:08.860
Otherwise, you can kind of
consider them the same.

80
00:05:08.860 --> 00:05:14.357
And often, I'll just automatically
assume that I'm gonna make a string

81
00:05:14.357 --> 00:05:20.860
into an array by splitting it.
&gt;&gt; Bianca Gandolfo: That's

82
00:05:20.860 --> 00:05:24.100
what we're gonna talk about today or
we're just gonna hop right in.

