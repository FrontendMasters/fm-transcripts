WEBVTT

1
00:00:00.120 --> 00:00:03.968
&gt;&gt; Bianca Gandolfo: So
we also have a fun visualization for

2
00:00:03.968 --> 00:00:11.379
our linked list.
&gt;&gt; Bianca Gandolfo: Such a cool website,

3
00:00:11.379 --> 00:00:12.380
whoever made this.

4
00:00:14.240 --> 00:00:18.495
So we can insert things to

5
00:00:18.495 --> 00:00:23.573
the head,
&gt;&gt; Bianca Gandolfo: And

6
00:00:23.573 --> 00:00:25.170
just create pointers.

7
00:00:25.170 --> 00:00:26.710
So you can see that these are pointed.

8
00:00:27.800 --> 00:00:28.980
It has a value.

9
00:00:28.980 --> 00:00:32.088
We have a pointer here to the head,
and we also keep track of the tail,

10
00:00:32.088 --> 00:00:37.590
which will matter when you
actually implement it.

11
00:00:37.590 --> 00:00:40.211
So if you're thinking about
a linked listing code,

12
00:00:40.211 --> 00:00:42.664
you could think about it
as some nested objects.

13
00:00:42.664 --> 00:00:47.360
Remember, when we're storing things in
memory, the next is actually a pointer.

14
00:00:49.440 --> 00:00:52.370
But visually,
it might help to think about it like this.

15
00:00:52.370 --> 00:00:54.650
So you see that we have a linked list.

16
00:00:54.650 --> 00:00:57.660
The very first thing in
a linked list is the head.

17
00:00:57.660 --> 00:01:02.680
And if you pass a linked list around,
it's often, this is your entry point,

18
00:01:02.680 --> 00:01:05.150
you can't enter in the middle,
or anything like that.

19
00:01:05.150 --> 00:01:08.699
You have to start from the head, or
you could have a reference to the tail.

20
00:01:08.699 --> 00:01:11.484
You can access the tail,
but a linked list,

21
00:01:11.484 --> 00:01:14.431
a singly link list only
points one direction.

22
00:01:14.431 --> 00:01:15.960
So you can't go backwards.

23
00:01:15.960 --> 00:01:20.919
So you start from the head,
you go one direction, cuz the next points,

24
00:01:20.919 --> 00:01:24.980
you have two things you can look at,
the value or the next.

25
00:01:24.980 --> 00:01:30.172
And so, the next points to the next value,
which also has a value and a next,

26
00:01:30.172 --> 00:01:34.980
which points to its own value, and
if it's the end, then it's null.

27
00:01:36.490 --> 00:01:41.910
So if we get to the tail,
which is this object right here,

28
00:01:41.910 --> 00:01:43.150
we don't know what's behind it.

29
00:01:44.320 --> 00:01:46.950
There's no previous, right?

30
00:01:46.950 --> 00:01:49.100
If we did have a previous pointer,

31
00:01:49.100 --> 00:01:53.930
that pointed backwards, then we would
have a doubly linked list, which is cool.

32
00:01:53.930 --> 00:02:00.690
So this is useful if you ever wanna start
from the end, and traverse backwards.

33
00:02:00.690 --> 00:02:06.980
But often, you'll ask the interviewer,
can I use a doubly linked list?

34
00:02:06.980 --> 00:02:08.480
Often the answer is no,

35
00:02:08.480 --> 00:02:10.800
because they want you to do something
a little trickier than that.

36
00:02:12.060 --> 00:02:16.911
But you should also always ask,
this shows that you're aware that linked

37
00:02:16.911 --> 00:02:20.700
list can be singly linked,
or doubly linked, and

38
00:02:20.700 --> 00:02:25.670
we can look at that in the visualization,
so this is a singly linked list.

39
00:02:25.670 --> 00:02:30.510
We start at the head, and
we traverse down to find something.

40
00:02:30.510 --> 00:02:35.550
If we wanted to,
let's see what the search does.

41
00:02:36.730 --> 00:02:40.170
So it's searching, see,
this is such a cool thing,

42
00:02:40.170 --> 00:02:45.460
checking for file, it's not gonna find it,
it's gonna return false.

43
00:02:45.460 --> 00:02:49.150
And then,
we could do a doubly linked list.

44
00:02:49.150 --> 00:02:54.000
Which you can see, you can either start
from the tail, and go backwards, or

45
00:02:54.000 --> 00:02:54.560
from the head.

46
00:02:54.560 --> 00:02:58.040
And all this is,
is you have another property on your node.

47
00:02:58.040 --> 00:03:04.160
So each piece of your linked list,
each of these circles, we call a node.

48
00:03:04.160 --> 00:03:10.120
That's a reference to the fact that
a linked list is actually a graph.

49
00:03:10.120 --> 00:03:12.040
It's just like a pretty
good type of graph, and

50
00:03:12.040 --> 00:03:13.400
we'll talk about graphs some more later.

51
00:03:13.400 --> 00:03:15.260
But, when we talk about graphs,

52
00:03:15.260 --> 00:03:19.916
we call an instance,
like a little piece of that, a node.

53
00:03:19.916 --> 00:03:26.080
And so,
this node has three things on it, right?

54
00:03:26.080 --> 00:03:28.910
The first property is the value, 64.

55
00:03:28.910 --> 00:03:35.009
The second thing is the next value,
which is a pointer to this node,

56
00:03:35.009 --> 00:03:38.873
which is an object that has a value, 72.

57
00:03:38.873 --> 00:03:44.367
And then, it has a previous,
a property that points to,

58
00:03:44.367 --> 00:03:48.030
what, on 64, if you were to guess,

59
00:03:48.030 --> 00:03:52.921
what do you think previous points to?
&gt;&gt; Speaker 2: 29.

60
00:03:52.921 --> 00:03:54.777
&gt;&gt; Bianca Gandolfo: Could be the tail,

61
00:03:54.777 --> 00:03:59.185
could be null, yeah, yeah yeah, so again,

62
00:03:59.185 --> 00:04:04.521
these were just pointers,
and if we change 72 here,

63
00:04:04.521 --> 00:04:08.710
and we change it to 73, nothing breaks.

64
00:04:08.710 --> 00:04:11.880
It still will work exactly the same,
except that now,

65
00:04:11.880 --> 00:04:16.650
instead of 72, there'll be 73.

66
00:04:16.650 --> 00:04:19.390
The other thing is if you
wanna change the pointer,

67
00:04:19.390 --> 00:04:22.520
you just reassign it to another node.

68
00:04:22.520 --> 00:04:27.680
If you wanted to break off this linked
list into a separate linked list,

69
00:04:27.680 --> 00:04:32.152
that pointed somewhere else,
so maybe like 83 right here,

70
00:04:32.152 --> 00:04:37.488
you would just change the next property
of 72 to point to 83, or here.

