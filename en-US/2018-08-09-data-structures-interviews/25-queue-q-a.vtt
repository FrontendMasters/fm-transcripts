WEBVTT

1
00:00:00.430 --> 00:00:06.610
&gt;&gt; Speaker 1: Use these in like other
data structures to like some algorithms,

2
00:00:06.610 --> 00:00:11.560
some graph algorithms use stacks and
queues to maintain,

3
00:00:11.560 --> 00:00:14.610
&gt;&gt; Bianca: Mm-hm, like a particular order.

4
00:00:14.610 --> 00:00:16.850
&gt;&gt; Speaker 1: An order
of visited nodes etc.

5
00:00:16.850 --> 00:00:19.180
&gt;&gt; Bianca: Yeah, absolutely, so you're or

6
00:00:19.180 --> 00:00:24.290
whenever you use recursion, so trees and
grass are recursive by nature.

7
00:00:26.080 --> 00:00:28.860
Whenever you use recursion,
you're actually using a stack,

8
00:00:28.860 --> 00:00:32.570
because of how your
code is being executed.

9
00:00:32.570 --> 00:00:35.525
So if you're thinking
about space complexity and

10
00:00:35.525 --> 00:00:39.969
JR and I were talking a little bit about
space complexity with linked list.

11
00:00:39.969 --> 00:00:43.875
When you have a recursive algorithm,

12
00:00:43.875 --> 00:00:48.650
you need to account for
that space actually.

13
00:00:48.650 --> 00:00:52.767
So if you're thinking about, what is
the time complexity for this algorithm.

14
00:00:52.767 --> 00:00:57.937
And you forget that your recursion is
actually, making a stack and saving values

15
00:00:57.937 --> 00:01:02.870
for each call you know maybe you're
recursively looping through an array.

16
00:01:02.870 --> 00:01:04.770
Which you can do.

17
00:01:06.580 --> 00:01:10.560
Every time and you passing an index
to each of those recursive calls.

18
00:01:10.560 --> 00:01:14.520
It's like making a stack of another array.

19
00:01:14.520 --> 00:01:17.900
Or making a stack of those items in it.

20
00:01:17.900 --> 00:01:20.619
So that is using a stack.

21
00:01:22.500 --> 00:01:26.020
Implicitly in your code.

22
00:01:26.020 --> 00:01:28.920
But it's still requires that memory.

23
00:01:28.920 --> 00:01:33.690
You can have a stack overflow when
you don't have enough working memory

24
00:01:33.690 --> 00:01:38.700
to manage all of those stack frames.

