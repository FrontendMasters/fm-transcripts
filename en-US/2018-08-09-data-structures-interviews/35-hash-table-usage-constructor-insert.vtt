WEBVTT

1
00:00:00.160 --> 00:00:00.830
&gt;&gt; Bianca Gandolfo: All right, so

2
00:00:00.830 --> 00:00:04.890
the next thing we're gonna do
is implement a hash table.

3
00:00:04.890 --> 00:00:09.630
So just to remember,
the interface of a hash table is that

4
00:00:09.630 --> 00:00:12.620
you're going to insert and
remove in constant time.

5
00:00:13.950 --> 00:00:18.026
The way the magic that makes this constant
is gonna be our hashing function.

6
00:00:18.026 --> 00:00:24.473
And yeah, so when we insert,
we send a key value pair through,

7
00:00:24.473 --> 00:00:28.378
when we remove, we just send the key.

8
00:00:28.378 --> 00:00:32.065
Retrieving is just also a key, and
this is the same as an object, right?

9
00:00:32.065 --> 00:00:35.880
If you're assigning a value to an object,
you need the key and the value, right?

10
00:00:35.880 --> 00:00:41.880
So you can say that myobject.prop = 2,
something like that.

11
00:00:41.880 --> 00:00:45.302
So the prop is the key,
2 is the value, so you need both.

12
00:00:45.302 --> 00:00:52.010
And then when you're retrieving,
right, you say myob.prop, right?

13
00:00:52.010 --> 00:00:54.480
So you just need the key in that case.

14
00:00:54.480 --> 00:01:00.930
So that is the interface that
we're going to be copying.

15
00:01:01.990 --> 00:01:05.531
So let's just get started
with creating an instance, so

16
00:01:05.531 --> 00:01:08.250
my instance is called my hash table.

17
00:01:08.250 --> 00:01:14.080
This is gonna be an object that
has some properties on it.

18
00:01:14.080 --> 00:01:17.830
In this case, it's gonna be a storage
property that's assigned to an array.

19
00:01:17.830 --> 00:01:22.790
The reason we're using
an array is because we

20
00:01:23.950 --> 00:01:27.990
can't implement an object with an object,
so we're gonna use an array.

21
00:01:27.990 --> 00:01:30.106
Otherwise, that would be cheating.

22
00:01:30.106 --> 00:01:34.740
Okay, so let's think about this.

23
00:01:34.740 --> 00:01:40.301
So let's just console.log my hash
table and see what it looks like.

24
00:01:40.301 --> 00:01:44.900
All right, so just like we expected,
it has our storage on there.

25
00:01:46.430 --> 00:01:49.690
Great, now,

26
00:01:49.690 --> 00:01:54.940
let's insert something into myHT.insert.

27
00:01:54.940 --> 00:01:59.056
So let's inert a, ('a', 1).

28
00:01:59.056 --> 00:02:01.560
So a is our key, 1 is gonna be our value.

29
00:02:02.880 --> 00:02:07.974
So then I will imagine that my

30
00:02:07.974 --> 00:02:15.842
hash table would look something like this.

31
00:02:15.842 --> 00:02:21.160
So at some index,

32
00:02:21.160 --> 00:02:25.780
let's say 3.

33
00:02:25.780 --> 00:02:29.330
We'll get to how this happens exactly,
let's say 3.

34
00:02:29.330 --> 00:02:35.381
We will save the key and the value here.

35
00:02:35.381 --> 00:02:37.788
So this is how I would
imagine this would go down.

36
00:02:37.788 --> 00:02:40.950
And maybe we have some other 0s here.

37
00:02:40.950 --> 00:02:46.140
So we have an array
initialized with some 0s or

38
00:02:46.140 --> 00:02:47.630
undefineds, it doesn't really matter.

39
00:02:47.630 --> 00:02:52.980
But when I insert it,
I need to add this into my sorts array,

40
00:02:52.980 --> 00:02:54.730
it needs to be constant time.

41
00:02:54.730 --> 00:02:59.570
Our only option with constant time is that
we need a numerical index for our array.

42
00:02:59.570 --> 00:03:01.034
That's the only way we can do that.

43
00:03:01.034 --> 00:03:05.887
Otherwise, every other thing that
you're thinking of would require

44
00:03:05.887 --> 00:03:08.696
looping through and finding the value.

45
00:03:08.696 --> 00:03:11.380
And we can't do that because
hash tables constant time.

46
00:03:12.780 --> 00:03:14.851
So we're storing that there.

47
00:03:14.851 --> 00:03:22.074
If we have multiple items, so
let's say that we also insert b.

48
00:03:22.074 --> 00:03:24.312
And we wanna give it a value 2.

49
00:03:24.312 --> 00:03:28.910
And let's say for
some reason we have the same hash.

50
00:03:28.910 --> 00:03:31.860
So this is how I'm gonna
handle the collisions,

51
00:03:31.860 --> 00:03:36.340
is that I have an array
with two items in it.

52
00:03:38.260 --> 00:03:42.616
So that's kind of what I'm thinking in
terms of how I'm gonna work with this.

53
00:03:42.616 --> 00:03:47.990
&gt;&gt; Speaker 2: Why did you just go smack
dab in the middle rather than the front?

54
00:03:47.990 --> 00:03:52.056
&gt;&gt; Bianca Gandolfo: So we'll get to like
how it gets its location in a second.

55
00:03:52.056 --> 00:03:52.910
But that's a good question.

56
00:03:55.540 --> 00:03:57.360
Great, okay.

57
00:03:57.360 --> 00:04:02.070
So let's get started, and we'll talk
about how we get to the specific index.

58
00:04:02.070 --> 00:04:06.890
Because that's the really
important aspect of a hash table,

59
00:04:06.890 --> 00:04:08.170
is how do we get to that index.

60
00:04:09.390 --> 00:04:12.530
Okay, so our insert,
we need to have our key and our value.

61
00:04:15.312 --> 00:04:22.622
&gt;&gt; Bianca Gandolfo: So,
&gt;&gt; Bianca Gandolfo: So

62
00:04:22.622 --> 00:04:27.660
we are going to initialize our index.

63
00:04:27.660 --> 00:04:28.713
We need to get an index.

64
00:04:28.713 --> 00:04:32.978
And what we're gonna do is we're
gonna use our hash function that I

65
00:04:32.978 --> 00:04:35.000
implemented for us.

66
00:04:35.000 --> 00:04:39.880
And that is gonna take a string and
a number.

67
00:04:39.880 --> 00:04:46.660
So the string will be hashed
to a number between 0 and n.

68
00:04:46.660 --> 00:04:51.170
Again, a core property of a hashing is for
whatever string you input,

69
00:04:51.170 --> 00:04:53.040
it's always gonna give
you the same output.

70
00:04:54.250 --> 00:04:57.820
And in this case,
the output is gonna be between a range.

71
00:04:57.820 --> 00:05:02.580
And that range it's what we want the size
of our hash table to initially be.

72
00:05:02.580 --> 00:05:05.204
So I like to start with 25.

73
00:05:05.204 --> 00:05:09.365
And of course, this is something
that you might wanna think about,

74
00:05:09.365 --> 00:05:12.200
how much data are we trying to work with?

75
00:05:12.200 --> 00:05:15.220
Say we're gonna have a hash table, and
we only have two pieces of data ever.

76
00:05:15.220 --> 00:05:17.466
And that's just something we know somehow.

77
00:05:17.466 --> 00:05:19.664
You don't need to have 25.

78
00:05:19.664 --> 00:05:22.672
&gt;&gt; Speaker 3: Well, but is it gonna take
up on your space, the space holders so

79
00:05:22.672 --> 00:05:23.490
to speak?

80
00:05:23.490 --> 00:05:24.319
&gt;&gt; Bianca Gandolfo: Not really.

81
00:05:24.319 --> 00:05:25.655
&gt;&gt; Speaker 3: So
then it's really more unnecessary.

82
00:05:25.655 --> 00:05:27.175
&gt;&gt; Bianca Gandolfo: Yeah, yeah.

83
00:05:32.480 --> 00:05:34.418
&gt;&gt; Bianca Gandolfo: So
we have our tableSize,

84
00:05:34.418 --> 00:05:39.114
which is gonna be 25
&gt;&gt; Bianca Gandolfo: So

85
00:05:39.114 --> 00:05:43.831
we'll just keep that in mind,
and so great.

86
00:05:43.831 --> 00:05:46.558
&gt;&gt; Speaker 2: Why did
we hard code that in?

87
00:05:46.558 --> 00:05:48.787
&gt;&gt; Bianca Gandolfo: We
just are initializing it.

88
00:05:48.787 --> 00:05:50.231
&gt;&gt; Speaker 3: So
doesn't feel so consistent.

89
00:05:50.231 --> 00:05:51.486
&gt;&gt; Bianca Gandolfo: Yeah,
you could parse it.

90
00:05:55.103 --> 00:05:56.147
&gt;&gt; Bianca Gandolfo: You want in.

91
00:05:58.565 --> 00:06:00.977
&gt;&gt; Bianca Gandolfo: Probably better,
I like that better.

92
00:06:00.977 --> 00:06:08.990
Okay, so
now we want to hash our key to an index.

93
00:06:08.990 --> 00:06:16.720
So we have our key and
then we're also gonna pass this.tableSize.

94
00:06:16.720 --> 00:06:20.658
We could initialize this with a bunch
of 0s, but we don't really need to do

95
00:06:20.658 --> 00:06:23.308
that in JavaScript, so I'm just gonna-
&gt;&gt; Speaker 3: Won't

96
00:06:23.308 --> 00:06:27.190
you have an underscore before,
like in front of tableSize?

97
00:06:27.190 --> 00:06:28.073
&gt;&gt; Bianca Gandolfo: Cuz I forgot, thanks.

98
00:06:31.316 --> 00:06:38.907
&gt;&gt; Bianca Gandolfo: Okay, so
this.storage [index] = value.

99
00:06:38.907 --> 00:06:42.236
So basically we wanna do
something like this, right?

100
00:06:42.236 --> 00:06:47.002
Where our key,
which is a hash to an index between 0 and

101
00:06:47.002 --> 00:06:51.630
25, is going to be assigned to the value.

102
00:06:51.630 --> 00:06:55.319
However, we need to
think about collisions,

103
00:06:55.319 --> 00:06:59.385
which is what happens in the case of,
for example,

104
00:06:59.385 --> 00:07:05.362
what if b runs through a hash function,
and also returns 0, 1, 2, 3.

105
00:07:05.362 --> 00:07:06.422
And also returns 3.

106
00:07:06.422 --> 00:07:14.490
We need to make sure that we're
not overriding and losing data.

107
00:07:14.490 --> 00:07:21.787
So we need to create an array and,
&gt;&gt; Bianca Gandolfo: Add these values.

108
00:07:21.787 --> 00:07:24.330
So I would say something like if.

109
00:07:24.330 --> 00:07:29.901
So if this already exist,
&gt;&gt; Bianca Gandolfo: So

110
00:07:29.901 --> 00:07:33.337
if this already exists,

111
00:07:33.337 --> 00:07:39.071
then that means we have an array already.

112
00:07:39.071 --> 00:07:44.252
If this doesn't exist, then I

113
00:07:44.252 --> 00:07:53.830
wanna say this._storage[index]
= an empty array.

114
00:07:53.830 --> 00:07:58.630
So I'm initializing like a container
array inside of our storage array.

115
00:07:58.630 --> 00:08:01.370
So right now,
it will look something like this.

116
00:08:01.370 --> 00:08:03.040
Storage looks something like this.

117
00:08:04.440 --> 00:08:07.754
Let's say our index is 3 and

118
00:08:07.754 --> 00:08:12.180
there's 25 or something, maybe.

119
00:08:14.290 --> 00:08:15.660
Actually, it just looks like this.

120
00:08:15.660 --> 00:08:17.532
We'll go with this.

121
00:08:20.179 --> 00:08:21.176
&gt;&gt; Bianca Gandolfo: So
that's what that does.

122
00:08:21.176 --> 00:08:22.970
So we're just initializing and it's empty.

123
00:08:22.970 --> 00:08:25.030
We haven't added anything yet.

124
00:08:25.030 --> 00:08:33.240
So now we have this set index
is gonna return this array.

125
00:08:33.240 --> 00:08:36.548
So what I wanna do is push.

126
00:08:36.548 --> 00:08:42.890
I'm gonna push another array
with the key and the value.

127
00:08:45.250 --> 00:08:51.683
And so what this does is it
will push something like this.

128
00:08:55.868 --> 00:08:59.549
&gt;&gt; Bianca Gandolfo: And the reason is,
and so once we do this again.

129
00:08:59.549 --> 00:09:02.450
So if that doesn't exist,
then we initialize it.

130
00:09:02.450 --> 00:09:04.980
Otherwise, we push it, hm?

131
00:09:04.980 --> 00:09:06.370
&gt;&gt; Speaker 3: Is it just me or
that's weird syntax,

132
00:09:06.370 --> 00:09:08.970
where's your curly brackets
after if statement?

133
00:09:08.970 --> 00:09:10.450
&gt;&gt; Speaker 2: You don't need
it if it's on one line.

134
00:09:10.450 --> 00:09:12.472
&gt;&gt; Bianca Gandolfo: Yeah,
I just one-lined it, but

135
00:09:12.472 --> 00:09:14.720
you could do like this if you wanted.

136
00:09:23.561 --> 00:09:24.925
&gt;&gt; Bianca Gandolfo: Yeah,
they do the same thing though.

137
00:09:27.653 --> 00:09:28.763
&gt;&gt; Bianca Gandolfo: Okay,
so we're initializing that.

138
00:09:28.763 --> 00:09:31.920
So now, the second time that we call it,
we have this already.

139
00:09:33.100 --> 00:09:38.960
We hash the key of b, and let's say it
returns the same 0, 1, 2, returns 3.

140
00:09:40.160 --> 00:09:45.785
So what we need to do is push the key and
the value as an array.

141
00:09:45.785 --> 00:09:52.320
So here's the array, here's the key,
and here's the value.

142
00:09:53.840 --> 00:09:59.965
Okay, so that's what we just did,
we're handling our collision.

143
00:10:03.497 --> 00:10:07.282
&gt;&gt; Bianca Gandolfo: So collision is when
your hash function returns the same index

144
00:10:07.282 --> 00:10:08.606
for a different key.

145
00:10:08.606 --> 00:10:13.917
If you didn't handle a collision,
what we would do is instead

146
00:10:13.917 --> 00:10:18.736
of all of this,
&gt;&gt; Bianca Gandolfo: What we

147
00:10:18.736 --> 00:10:23.940
would simply do is we would
just have the value there.

148
00:10:23.940 --> 00:10:28.501
So the first time when we look up 2, and

149
00:10:28.501 --> 00:10:33.614
we get 2 and we pass a,
the value will be 1,

150
00:10:33.614 --> 00:10:36.960
so then here this will be 1.

151
00:10:36.960 --> 00:10:41.634
The second time b hashes, and
then it would overwrite it to 2.

152
00:10:41.634 --> 00:10:42.679
And so this is very dangerous.

153
00:10:42.679 --> 00:10:46.623
You don't wanna lose any of
your data in a data structure.

154
00:10:46.623 --> 00:10:52.162
So that is why we're doing it like this.

155
00:10:52.162 --> 00:10:55.627
And we're also storing the key
because when we do a lookup later,

156
00:10:55.627 --> 00:10:58.526
we wanna remember which one
is associated with which.

157
00:11:02.036 --> 00:11:05.405
&gt;&gt; Bianca Gandolfo: Okay, great, mh-mm?

158
00:11:05.405 --> 00:11:06.644
&gt;&gt; Speaker 4: There's a comment from chat.

159
00:11:06.644 --> 00:11:10.329
If this _storage index is 0,

160
00:11:10.329 --> 00:11:14.453
then that would coerce the false.

161
00:11:16.463 --> 00:11:19.750
&gt;&gt; Speaker 4: If the value of-
&gt;&gt; Bianca Gandolfo: It should be an array

162
00:11:19.750 --> 00:11:20.497
or not an array.

163
00:11:29.724 --> 00:11:34.967
&gt;&gt; Bianca Gandolfo: So
if you do something like you

164
00:11:34.967 --> 00:11:42.560
just say new Array[val).fill[0].

165
00:11:42.560 --> 00:11:47.529
In this case,
were you initializing your storages and

166
00:11:47.529 --> 00:11:52.939
arrays with a bunch of 0s,
then, that would be a problem.

167
00:11:52.939 --> 00:11:54.722
No, actually no, it is still the same.

168
00:11:54.722 --> 00:11:56.468
Cuz 0 would still be false.

169
00:12:03.145 --> 00:12:07.352
&gt;&gt; Bianca Gandolfo: Okay,
but I don't see the need to

170
00:12:07.352 --> 00:12:12.021
initialize it with 0s or anything.

171
00:12:12.021 --> 00:12:13.910
Okay, so where were we?

172
00:12:15.110 --> 00:12:16.270
I think this is gonna work.

173
00:12:16.270 --> 00:12:16.774
What do you think?

174
00:12:20.967 --> 00:12:21.973
&gt;&gt; Bianca Gandolfo: Guess we can try it.

175
00:12:28.175 --> 00:12:29.196
&gt;&gt; Bianca Gandolfo: All right,
let's see what we got.

176
00:12:32.487 --> 00:12:34.980
&gt;&gt; Bianca Gandolfo: Nice, so
we don't have a collision, but

177
00:12:34.980 --> 00:12:36.768
we do have our nested arrays.

178
00:12:38.689 --> 00:12:41.080
&gt;&gt; Bianca Gandolfo: And
you can see this one 16 empty items,

179
00:12:41.080 --> 00:12:43.003
a couple empty items in between.

180
00:12:52.117 --> 00:12:52.924
&gt;&gt; Bianca Gandolfo: Okay.

