WEBVTT

1
00:00:00.060 --> 00:00:04.334
&gt;&gt; Bianca Gandolfo: We are going to jump
into live coding our LinkedList class.

2
00:00:04.334 --> 00:00:07.590
So I'm just gonna start
like I did before and

3
00:00:07.590 --> 00:00:11.208
this is how I really would
do it in the interview.

4
00:00:11.208 --> 00:00:14.733
So I would just initiate
a new linked list.

5
00:00:14.733 --> 00:00:19.830
It looks like this linked list,
let's see when we initiate it.

6
00:00:19.830 --> 00:00:24.310
It's actually not taking a value,
but that's interesting.

7
00:00:24.310 --> 00:00:27.347
Something to think about,
should we initiate it by passing a value?

8
00:00:27.347 --> 00:00:29.615
Or should we initiate it empty and

9
00:00:29.615 --> 00:00:35.044
then have some insert method that does
that logic to check if it's empty or not?

10
00:00:35.044 --> 00:00:37.520
So that's something to think about.

11
00:00:37.520 --> 00:00:40.724
So I would probably just
write a note to myself.

12
00:00:40.724 --> 00:00:44.980
Or I would ask my interviewer,
how should I initiate this?

13
00:00:44.980 --> 00:00:45.551
With a value or empty?

14
00:00:45.551 --> 00:00:49.110
So let's say that we
initiate it with a value.

15
00:00:49.110 --> 00:00:52.140
What would that look like?

16
00:00:52.140 --> 00:00:57.770
So with a value 1, so
my whole linked list, we have our storage.

17
00:00:59.340 --> 00:01:02.049
And we have that as an empty object.

18
00:01:02.049 --> 00:01:09.290
And then I need, I definitely need
access to the head of my linked list.

19
00:01:10.950 --> 00:01:17.320
If we do initiate it, with a 1, then I
need to make sure I have a node in here.

20
00:01:21.478 --> 00:01:22.232
&gt;&gt; Bianca Gandolfo: Maybe I
don't even need this.

21
00:01:22.232 --> 00:01:28.820
Maybe I just need the head because we
don't have a continuous block of a memory.

22
00:01:28.820 --> 00:01:30.730
We just have pointers to each one.

23
00:01:30.730 --> 00:01:33.020
So maybe our storage
can really be our head.

24
00:01:33.020 --> 00:01:33.860
Let's play with that idea.

25
00:01:33.860 --> 00:01:35.651
What would that mean for our data storage?

26
00:01:35.651 --> 00:01:38.501
So, if we initiate it with a value,

27
00:01:38.501 --> 00:01:43.251
our head would just point to
a node that has a value, 1, and

28
00:01:43.251 --> 00:01:47.730
then a property next,
which we would initiate as null.

29
00:01:47.730 --> 00:01:50.390
Because we don't have a next value yet.

30
00:01:50.390 --> 00:01:53.480
Okay, that seems reasonable.

31
00:01:54.760 --> 00:02:00.770
Okay, so that is, if I initiate it
like this and then if I wanted to

32
00:02:02.150 --> 00:02:05.840
gain access to it, so
my linked list would look like this.

33
00:02:05.840 --> 00:02:08.970
So maybe I want my head
actually not to be a secret.

34
00:02:08.970 --> 00:02:12.502
I want that to be accessible
because I'm thinking next.

35
00:02:12.502 --> 00:02:19.086
So if I wanna insert a node,
if I wanna insert it after something,

36
00:02:19.086 --> 00:02:23.300
I might wanna put a reference here maybe.

37
00:02:25.650 --> 00:02:32.134
So I might wanna put
a reference to myList.head.

38
00:02:32.134 --> 00:02:34.210
&gt;&gt; Speaker 2: The node is gonna
be the value in the pointer.

39
00:02:35.620 --> 00:02:36.760
&gt;&gt; Bianca Gandolfo: Yep, exactly.

40
00:02:38.360 --> 00:02:43.200
So and then I put some value here,
I can have 2.

41
00:02:43.200 --> 00:02:46.368
So when I insert, I pass the head.

42
00:02:48.420 --> 00:02:50.030
&gt;&gt; Bianca Gandolfo: And
maybe I wanna add a value to it.

43
00:02:50.030 --> 00:02:53.206
But let me just double check
what we have defined here,

44
00:02:53.206 --> 00:02:55.530
inserts a new value to the end.

45
00:02:55.530 --> 00:03:01.050
That's interesting, so
maybe we don't even need this right now.

46
00:03:01.050 --> 00:03:03.070
So this would just automatically
insert at the end.

47
00:03:03.070 --> 00:03:05.500
So that makes me think, okay,
how do I know what the end is?

48
00:03:05.500 --> 00:03:08.470
So I need to keep track of the tail.

49
00:03:08.470 --> 00:03:15.150
So in addition to the head, maybe I should
have this tail thing at the beginning.

50
00:03:15.150 --> 00:03:17.430
The head would also be the tail.

51
00:03:17.430 --> 00:03:21.130
So I would initialize it and
it would look something like that.

52
00:03:21.130 --> 00:03:23.080
Now I'm pretty convinced
that I don't need storage.

53
00:03:23.080 --> 00:03:26.490
Does anyone have an argument for why you
wanna keep this storage object around?

54
00:03:27.650 --> 00:03:31.220
Okay, we'll just nuke it for now,
and if we change our mind later,

55
00:03:31.220 --> 00:03:32.990
we can come back to that.

56
00:03:32.990 --> 00:03:33.914
Seems like maybe we don't need it.

57
00:03:33.914 --> 00:03:40.440
Okay, so we initialize it as 1,
it looks like this.

58
00:03:40.440 --> 00:03:43.553
We're gonna insert 2.

59
00:03:43.553 --> 00:03:48.036
Okay, so then, after we do that,
we want it to look like,

60
00:03:48.036 --> 00:03:50.237
so the head would stay at 1.

61
00:03:50.237 --> 00:03:54.320
And then the tail would be 2.

62
00:03:54.320 --> 00:04:01.750
And then we'd also wanna make sure that
the null points to this one, right?

63
00:04:01.750 --> 00:04:08.573
So this is a pointer to this object.

64
00:04:08.573 --> 00:04:10.371
&gt;&gt; Speaker 2: Are you
referencing it by value?

65
00:04:10.371 --> 00:04:13.640
&gt;&gt; Bianca Gandolfo: No, this is just
me pretending that it's a pointer.

66
00:04:13.640 --> 00:04:17.730
I can't really draw a pointer,
but you can imagine.

67
00:04:17.730 --> 00:04:20.180
I could put a copy of it here.

68
00:04:20.180 --> 00:04:21.602
But they're the same thing,
they're not two different things.

69
00:04:21.602 --> 00:04:24.620
So we could do it like that for now.

70
00:04:24.620 --> 00:04:31.284
Let's see, if me saying pointers by
reference by value is confusing to you,

71
00:04:31.284 --> 00:04:36.309
I recommend watching a JavaScript
fundamentals course on

72
00:04:36.309 --> 00:04:42.994
Frontend Masters that deals with passing
by reference and passing by value.

73
00:04:42.994 --> 00:04:45.820
It will help you understand this concept.

74
00:04:45.820 --> 00:04:48.620
However, it's a little bit
out of the scope for today.

75
00:04:48.620 --> 00:04:50.770
But if that seems confusing,
you could just check that out.

76
00:04:50.770 --> 00:04:54.110
I'm sure either my JavaScript
fundamentals course or

77
00:04:54.110 --> 00:04:57.240
Kyle Simpson's mentions
a little bit about that.

78
00:05:00.256 --> 00:05:03.328
&gt;&gt; Bianca Gandolfo: Okay,
okay, so we insert 2, and so

79
00:05:03.328 --> 00:05:06.810
now we have our head and
we have our value.

80
00:05:06.810 --> 00:05:14.254
And then if we insert 3,
we want something a little similar.

81
00:05:17.370 --> 00:05:22.543
&gt;&gt; Bianca Gandolfo: We wanna update
&gt;&gt; Bianca Gandolfo: The tail,

82
00:05:22.543 --> 00:05:29.100
we also need to update this, whoa, okay.

83
00:05:29.100 --> 00:05:32.790
So this is how I'm imagining
this insert method will work.

84
00:05:34.110 --> 00:05:38.840
Okay, feeling pretty good about
how I'm going about this.

85
00:05:38.840 --> 00:05:42.250
At this point, I would ask my interviewer,
is this kind of what you had in mind?

86
00:05:42.250 --> 00:05:45.801
Are there any edge cases that
you want me to consider?

87
00:05:45.801 --> 00:05:52.880
In assumption, I started off that
this was just a singly linked list.

88
00:05:52.880 --> 00:05:56.415
And the reason that is is because we have,
we're not really being

89
00:05:56.415 --> 00:05:59.980
presented with a problem that
a doubly linked list would solve.

90
00:05:59.980 --> 00:06:04.800
And a doubly linked list just means
that you're taking more space.

91
00:06:06.290 --> 00:06:11.260
So for every pointer,
you're taking a space in memory.

92
00:06:11.260 --> 00:06:16.540
And so as your linked list grows, so
there's a space that it takes, right?

93
00:06:16.540 --> 00:06:20.870
So it's like a linear
amount of extra space.

94
00:06:20.870 --> 00:06:24.710
And if you don't need it, it doesn't
seem like you need it right now.

95
00:06:24.710 --> 00:06:27.380
No need to preoptimize or

96
00:06:27.380 --> 00:06:33.240
add more space if you're not saving
yourself any time for anything yet.

97
00:06:34.580 --> 00:06:35.949
But that's something you can ask us about.

98
00:06:40.342 --> 00:06:42.340
&gt;&gt; Bianca Gandolfo: Yeah, okay.

99
00:06:46.848 --> 00:06:51.820
&gt;&gt; Bianca Gandolfo: All right, so
let's start with the initialize, so

100
00:06:51.820 --> 00:06:57.585
we had a head that we passed
in some value, actually, here.

101
00:07:00.444 --> 00:07:05.513
&gt;&gt; Bianca Gandolfo: And so
we could have the head.

102
00:07:09.500 --> 00:07:10.008
&gt;&gt; Bianca Gandolfo: The value.

103
00:07:13.209 --> 00:07:18.660
&gt;&gt; Bianca Gandolfo: And
then next would be null.

104
00:07:18.660 --> 00:07:22.134
So this is the same as
saying value : value.

105
00:07:24.149 --> 00:07:31.861
&gt;&gt; Bianca Gandolfo: And then we would
also say this.tail = this.head.

106
00:07:31.861 --> 00:07:35.238
So we're setting up that
point relationship.

107
00:07:35.238 --> 00:07:40.250
These two properties point to
the same object and memory.

108
00:07:46.084 --> 00:07:47.889
&gt;&gt; Speaker 2: Cuz that's we're
just neutralizing it that way.

109
00:07:47.889 --> 00:07:50.919
&gt;&gt; Bianca Gandolfo: Mm-hm,
but if we did like this,

110
00:07:50.919 --> 00:07:54.390
these would be two separate objects.

111
00:07:56.450 --> 00:07:57.700
So just be careful of that.

112
00:07:58.740 --> 00:08:02.574
We're initializing like that the interface
that I decided on this that we would just

113
00:08:02.574 --> 00:08:03.981
initialize it with the value.

114
00:08:03.981 --> 00:08:06.320
You don't have to do that.

115
00:08:06.320 --> 00:08:10.060
The other option would be you would
just set this with just be null.

116
00:08:10.060 --> 00:08:12.244
And then when you insert,
you could add your first value.

117
00:08:12.244 --> 00:08:17.605
And you could do a check that like
if head is null, tail is null,

118
00:08:17.605 --> 00:08:22.500
then you can insert your first one and
set the head, etc.

119
00:08:22.500 --> 00:08:24.580
So we're gonna and then insert a value.

120
00:08:27.182 --> 00:08:29.419
Well, let's check our constructor and

121
00:08:29.419 --> 00:08:32.257
make sure our constructor
is behaving correctly.

122
00:08:39.566 --> 00:08:41.806
&gt;&gt; Bianca Gandolfo: All right,
what have we got going on?

123
00:08:41.806 --> 00:08:46.317
Great, that looks like what I expected.

124
00:08:50.468 --> 00:08:55.122
&gt;&gt; Bianca Gandolfo: And the core of my
debugging strategy is just ahead of time,

125
00:08:55.122 --> 00:08:59.090
figuring out what I'm going to expect.

126
00:08:59.090 --> 00:09:01.670
Write my code out to
meet that expectation.

127
00:09:01.670 --> 00:09:04.668
Test it, if for whatever reason
it's not meeting the expectation.

128
00:09:04.668 --> 00:09:11.970
Then I kinda go backwards and try to
figure out where I could have gone wrong.

129
00:09:11.970 --> 00:09:15.576
So that's just how I go about it,
and I think it's a good strategy.

