WEBVTT

1
00:00:00.210 --> 00:00:03.230
&gt;&gt; Bianca Gandolfo: Gonna get right
into it with Stack and Queue.

2
00:00:04.270 --> 00:00:08.260
So you've probably heard of a stack and

3
00:00:08.260 --> 00:00:11.910
a queue before but
if not I'm gonna go over it a little bit.

4
00:00:11.910 --> 00:00:16.960
So the properties of a Stack and
Queue are pretty similar.

5
00:00:16.960 --> 00:00:21.880
They are an ordered data
structure that have opinions about

6
00:00:23.590 --> 00:00:27.790
the order in which things can be
inserted and things can be removed.

7
00:00:27.790 --> 00:00:33.810
So for a stack, the example everyone
uses is like a stack of plates.

8
00:00:33.810 --> 00:00:39.940
You stack them on top of one another and
then you take the last one out.

9
00:00:39.940 --> 00:00:41.500
So for a Stack,

10
00:00:41.500 --> 00:00:47.680
the most recently added item is
also the most recently exited item.

11
00:00:47.680 --> 00:00:48.980
Queue is the opposite,

12
00:00:48.980 --> 00:00:52.478
the queue is what you would think of
as like waiting in line for something.

13
00:00:52.478 --> 00:00:57.660
So you would stack it up and
then you would take from the bottom.

14
00:00:57.660 --> 00:01:02.220
So you always take the oldest
item out of the queue.

15
00:01:03.420 --> 00:01:07.250
And so these are fundamental
data structures that underlie

16
00:01:07.250 --> 00:01:08.880
pretty much everything that we do.

17
00:01:10.830 --> 00:01:13.720
We're parsing, strings,

18
00:01:15.810 --> 00:01:20.950
your linter,
like I was saying that the call stack,

19
00:01:20.950 --> 00:01:24.010
and the message queue,
which is in your JavaScript runtime.

20
00:01:24.010 --> 00:01:30.080
That's what executes your code when you
load your browser or you run it in node.

21
00:01:33.040 --> 00:01:39.200
So this is our Stack and Queue,
and if you're interested we have

22
00:01:39.200 --> 00:01:42.720
some data visualizations here that you
can play with, they're secretly linked.

23
00:01:42.720 --> 00:01:50.100
So you can push, you can see that
we're pushing and we can pop values.

24
00:01:50.100 --> 00:01:50.880
So that's too small.

25
00:01:55.300 --> 00:01:58.712
So as you can see we're for
a stack, we add, add,

26
00:01:58.712 --> 00:02:02.629
add and then when we remove it,
we remove it from the end.

27
00:02:06.424 --> 00:02:11.040
&gt;&gt; Bianca Gandolfo: And you might notice
that this diagram looks like an array.

28
00:02:11.040 --> 00:02:13.940
We can implement a stack using an array.

29
00:02:13.940 --> 00:02:17.450
And probably you've been using stacks and
you didn't know.

30
00:02:17.450 --> 00:02:20.100
If you've ever had an array where
you're interacting with it,

31
00:02:20.100 --> 00:02:24.310
where you're only pushing and
popping, then you're using a stack.

32
00:02:24.310 --> 00:02:28.483
And when you're in an interview, you can
say that it's an array, but you can also

33
00:02:28.483 --> 00:02:32.737
say, I could use a stack for this, but
really you're just gonna use an array.

34
00:02:37.700 --> 00:02:40.500
&gt;&gt; Bianca Gandolfo: And then similarly
we have our queue visualization.

35
00:02:45.276 --> 00:02:46.391
&gt;&gt; Bianca Gandolfo: We enqueue.

36
00:02:49.677 --> 00:02:52.443
&gt;&gt; Bianca Gandolfo: Couple here.

37
00:02:52.443 --> 00:02:55.710
Right, so the pushing part is the same.

38
00:02:57.140 --> 00:03:01.990
But then it's the dequeuing that's
different so that the dequeue would be

39
00:03:01.990 --> 00:03:07.290
the first one etc., like this.

40
00:03:07.290 --> 00:03:11.360
And so this visualization

41
00:03:11.360 --> 00:03:15.620
shows this array as sort of like this
continuous block of memory, right?

42
00:03:15.620 --> 00:03:19.020
So in memory we have our
data next to each other.

43
00:03:19.020 --> 00:03:22.874
In some languages you need
to pre-allocate memory.

44
00:03:22.874 --> 00:03:25.420
In JavaScript we have something
called a dynamic array.

45
00:03:25.420 --> 00:03:28.650
And so we don't need to think about

46
00:03:28.650 --> 00:03:32.140
how long an array is gonna
be before we make it.

47
00:03:32.140 --> 00:03:35.980
So a lot of these diagrams
that's how they're working.

48
00:03:35.980 --> 00:03:40.740
But luckily in JavaScript, we don't
need to worry too much about that.

49
00:03:42.380 --> 00:03:47.260
So one thing that could happen when you
are using an array is to underline data

50
00:03:47.260 --> 00:03:50.710
structure and then you're pushing and
then unshifting.

51
00:03:50.710 --> 00:03:55.597
All right, unshifting is when
you move from the beginning

52
00:03:55.597 --> 00:04:00.591
is that if you want your array
indices is to be correct, so.

53
00:04:03.330 --> 00:04:04.375
&gt;&gt; Bianca Gandolfo: Let's requeue.

54
00:04:07.873 --> 00:04:08.410
&gt;&gt; Bianca Gandolfo: Let's clear it.

55
00:04:09.460 --> 00:04:11.602
We'll enqueue a couple things.

56
00:04:20.693 --> 00:04:23.261
&gt;&gt; Bianca Gandolfo: So,
when we remove the first one, and

57
00:04:23.261 --> 00:04:26.890
we want to ensure that our
array indices are correct.

58
00:04:27.890 --> 00:04:35.670
We would have to shift the 2 to the 0,
the 3 to the 1, right?

59
00:04:35.670 --> 00:04:38.672
If we were going to map these
to a particular indices.

60
00:04:38.672 --> 00:04:42.850
So, when you're using an array
it's not optimized for unshifting.

61
00:04:42.850 --> 00:04:47.375
I'm pretty sure that in modern browsers,

62
00:04:47.375 --> 00:04:51.280
it's optimized now if you unshift.

63
00:04:51.280 --> 00:04:55.063
It's not very expensive, like you don't
need to actually move things over.

64
00:04:55.063 --> 00:04:56.340
So just keep that in mind.

65
00:04:56.340 --> 00:05:00.627
If you talk about that in an interview and
you use something like unshift and

66
00:05:00.627 --> 00:05:03.362
they ask you about time
complexity of unshift.

67
00:05:03.362 --> 00:05:10.050
Then you could say it like typically,
it's a linear operation.

68
00:05:10.050 --> 00:05:17.240
Which means that for every item in
this list, you're gonna need to do it.

69
00:05:17.240 --> 00:05:19.200
You're gonna need to do some work.

70
00:05:21.030 --> 00:05:23.270
That's the same of the length
of the number of items.

71
00:05:23.270 --> 00:05:23.880
So that's n.

72
00:05:23.880 --> 00:05:27.113
So if in this example, n is 2.

73
00:05:27.113 --> 00:05:28.420
We have a length of 2.

74
00:05:28.420 --> 00:05:31.580
So if we need to just shift it over,
we would need to two operations.

75
00:05:31.580 --> 00:05:35.140
We shift over 2 and
we shift over 3, right?

76
00:05:35.140 --> 00:05:37.350
If it was ten, it would be ten.

77
00:05:37.350 --> 00:05:38.890
If it was 20, it would be 20, right?

78
00:05:38.890 --> 00:05:43.610
So it grows when we call
in a linear fashion.

79
00:05:43.610 --> 00:05:47.013
So, when it's ten it's not a 100, right.

80
00:05:47.013 --> 00:05:50.240
That would be what we call quadratic
cuz we're multiplying them.

81
00:05:50.240 --> 00:05:53.190
So linear,
we don't really multiply except for

82
00:05:53.190 --> 00:05:56.870
really by one as we grow our input size.

83
00:05:56.870 --> 00:05:58.880
And that's how we think
about time complexity.

84
00:05:58.880 --> 00:06:03.700
We're not gonna talk about as in depth in
this class because I talked about it a lot

85
00:06:03.700 --> 00:06:06.600
in the previous class, you can go and
check out those videos.

86
00:06:06.600 --> 00:06:10.220
If you want more in-depth
explanation in like

87
00:06:10.220 --> 00:06:12.280
kind of starting from the beginning,
building up.

88
00:06:12.280 --> 00:06:15.790
We're just gonna talk about it
kind of as we're going through.

89
00:06:17.460 --> 00:06:19.270
So, where were we?

90
00:06:19.270 --> 00:06:25.980
Linear as our input grows, the number of
operations just grows with that input.

91
00:06:27.230 --> 00:06:33.480
And typically, unshifting,
we would consider that linear, right?

92
00:06:33.480 --> 00:06:34.900
Shifting it over each one.

93
00:06:34.900 --> 00:06:39.910
However, that's not always the case,
depending on the implementation.

94
00:06:39.910 --> 00:06:44.240
And as you can see, this implementation
keeps track of a head and a tail.

95
00:06:44.240 --> 00:06:51.260
So when you dequeue everything,
you empty it and you enqueue it again.

96
00:06:51.260 --> 00:06:57.810
It's using basic math to figure
out where to put these values,

97
00:06:57.810 --> 00:07:04.550
versus it specifically
mapping to an index.

98
00:07:04.550 --> 00:07:06.050
Why do we use them?

99
00:07:06.050 --> 00:07:08.580
They're super fast at what they do.

100
00:07:08.580 --> 00:07:12.460
So, it's supposed to be constant time for
all of those operations.

101
00:07:12.460 --> 00:07:14.690
That's when people say, but
what about the unshift thing?

102
00:07:14.690 --> 00:07:17.800
You could say, well,
often it's optimized in modern browsers.

103
00:07:19.440 --> 00:07:23.000
Otherwise, you can implement
it with a linked list.

104
00:07:23.000 --> 00:07:28.340
I just wanted to show you what a stack
might look like in actual code.

105
00:07:28.340 --> 00:07:31.060
And this is just sort of like pseudo code,

106
00:07:31.060 --> 00:07:35.230
where we have a stack, we're
representing in this case as an array.

107
00:07:35.230 --> 00:07:36.830
We're gonna push something.

108
00:07:38.280 --> 00:07:40.250
That's what it looks like after that.

109
00:07:40.250 --> 00:07:46.440
When you pop it, it's gonna return five
and then our array looks like that.

110
00:07:46.440 --> 00:07:47.890
Or our stack looks like that.

111
00:07:47.890 --> 00:07:51.140
So that's kind of
the interface you can expect,

112
00:07:51.140 --> 00:07:55.060
typical operations, and
then we have our queue.

113
00:07:55.060 --> 00:07:58.960
Similarly, we add it to the end, but
when we dequeue, we're gonna return the 1.

114
00:07:58.960 --> 00:08:04.320
And so another example of using a stack
is a back button or an undo button.

115
00:08:04.320 --> 00:08:08.480
So that's going to pop off
the most recent changes.

116
00:08:11.310 --> 00:08:13.040
And that is a common interview question,

117
00:08:13.040 --> 00:08:16.670
it's like implement a back button or
an undo button.

118
00:08:16.670 --> 00:08:19.510
So, something to think about.

