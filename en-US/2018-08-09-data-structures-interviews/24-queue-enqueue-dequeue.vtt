WEBVTT

1
00:00:00.000 --> 00:00:03.290
&gt;&gt; Bianca Gandolfo: Okay, so let's
figure out how we're going to do that.

2
00:00:03.290 --> 00:00:07.330
Okay, so when we enqueue,
we're gonna add it to the storage, so

3
00:00:07.330 --> 00:00:08.060
let's start with that.

4
00:00:09.840 --> 00:00:16.950
So we're gonna say this.storage
= our this.storage.

5
00:00:16.950 --> 00:00:18.390
Then we need to do the length.

6
00:00:19.550 --> 00:00:24.480
So we have our length here.

7
00:00:24.480 --> 00:00:28.021
Let's start that at 0 and
then we can also do

8
00:00:28.021 --> 00:00:32.982
r.
&gt;&gt; Bianca Gandolfo: And

9
00:00:32.982 --> 00:00:35.749
notice I call this head index.

10
00:00:35.749 --> 00:00:39.290
Personally, I like to be really
annoying with my naming.

11
00:00:39.290 --> 00:00:43.210
So this is clear cuz this is a head index,
this is not a pointer to the head.

12
00:00:44.550 --> 00:00:49.400
So in a link list, maybe you would say
this.head, or head node I think would

13
00:00:49.400 --> 00:00:54.790
even be better so that you know that
it's either a node or an index.

14
00:00:54.790 --> 00:00:59.100
So it's better when things get complicated
and you can't remember what something is.

15
00:01:00.190 --> 00:01:07.780
So we're gonna say this.length
= our value, right?

16
00:01:07.780 --> 00:01:13.041
Same as before.
&gt;&gt; Bianca Gandolfo: All right and

17
00:01:13.041 --> 00:01:18.140
then now we wanna set our head,
do we wanna set our head index?

18
00:01:19.860 --> 00:01:23.170
We want to initialize our head,
so every time.

19
00:01:23.170 --> 00:01:25.800
Only if, so here's a good one.

20
00:01:25.800 --> 00:01:29.760
So if,
&gt;&gt; Bianca Gandolfo: I'm gonna put it up

21
00:01:29.760 --> 00:01:30.635
here, and we might move it.

22
00:01:30.635 --> 00:01:38.113
So if (this.length === 0),

23
00:01:38.113 --> 00:01:47.275
we want to say this.headIndex =
&gt;&gt; Bianca Gandolfo: So

24
00:01:47.275 --> 00:01:53.945
if it's zero we want to make sure
the head index, well it's still zero.

25
00:01:53.945 --> 00:01:58.759
So if it's one, we wanna set it to one.

26
00:01:58.759 --> 00:02:02.121
No, we don't wanna do that, we'll keep
it as zero, we're good with it at zero.

27
00:02:02.121 --> 00:02:07.839
We won't change it until we delete it
&gt;&gt; Bianca Gandolfo: Yeah, okay.

28
00:02:07.839 --> 00:02:13.506
So then,
&gt;&gt; Bianca Gandolfo: Let's just

29
00:02:13.506 --> 00:02:18.617
increment it.
&gt;&gt; Bianca Gandolfo: I

30
00:02:18.617 --> 00:02:19.890
think that'll get us there.

31
00:02:21.680 --> 00:02:27.240
All right, so and
we have some other to do's here.

32
00:02:27.240 --> 00:02:29.130
We could do type checking.

33
00:02:31.160 --> 00:02:33.520
Whenever I see this I'm like,
is it off by one?

34
00:02:33.520 --> 00:02:35.970
No, in this case we start by zero.

35
00:02:35.970 --> 00:02:37.020
Okay, we're good.

36
00:02:37.020 --> 00:02:42.250
Type checking input validation and
stuff like that.

37
00:02:43.480 --> 00:02:46.130
We can just call this and put validation.

38
00:02:46.130 --> 00:02:49.220
Our argument validation,
argument validation.

39
00:02:49.220 --> 00:02:54.526
Okay, all right, and the other thing
is I would to ask an interview like,

40
00:02:54.526 --> 00:02:57.140
do you want me to return anything?

41
00:02:57.140 --> 00:03:00.169
Typically I don't return
something from enqueue, but

42
00:03:00.169 --> 00:03:04.890
you can always just clarify if they
want something to be returned or not.

43
00:03:04.890 --> 00:03:07.730
So don't just make an assumption
about what they expect.

44
00:03:10.400 --> 00:03:12.254
Let's do the DQ.

45
00:03:12.254 --> 00:03:17.360
So actually, let's test this,
so let's make sure NQ works.

46
00:03:17.360 --> 00:03:18.560
Let's get rid of that.

47
00:03:20.180 --> 00:03:22.639
We want to run this and see if it matches.

48
00:03:25.500 --> 00:03:29.911
That's cuz I'm not
console logging anything.

49
00:03:29.911 --> 00:03:31.730
Is it plugged in?

50
00:03:31.730 --> 00:03:34.270
This is my, is it plugged test.

51
00:03:35.800 --> 00:03:39.690
Okay, so we have zero and
we have one we have a length two.

52
00:03:39.690 --> 00:03:42.740
Head index is two, that is a problem.

53
00:03:43.900 --> 00:03:45.150
We don't wanna change it every time.

54
00:03:49.890 --> 00:03:54.190
All right, maybe we just don't
need that in there at all, yeah.

55
00:03:55.820 --> 00:03:58.690
That makes sense to me.
&gt;&gt; Speaker 2: Well,

56
00:03:58.690 --> 00:04:03.320
cuz we really don't care,
we only care about the very first time and

57
00:04:03.320 --> 00:04:05.210
initialize.
&gt;&gt; Bianca Gandolfo: Yeah,

58
00:04:05.210 --> 00:04:06.890
which we said it here.

59
00:04:06.890 --> 00:04:10.120
And it's only gonna
change once we dequeue.

60
00:04:10.120 --> 00:04:14.310
I'm glad we checked that because
would have introduced a weird bug.

61
00:04:14.310 --> 00:04:17.098
It would have been a problem.

62
00:04:17.098 --> 00:04:21.971
Okay, so dequeue we

63
00:04:21.971 --> 00:04:28.278
are going to say lastValue

64
00:04:28.278 --> 00:04:33.439
= this_storage and

65
00:04:33.439 --> 00:04:37.476
then this done.

66
00:04:37.476 --> 00:04:41.360
So we're gonna get the last one
which is the length minus one.

67
00:04:42.590 --> 00:04:46.747
Key that minus one there.

68
00:04:46.747 --> 00:04:48.382
What do I wanna do?

69
00:04:48.382 --> 00:04:52.410
Then we wanna delete it.
&gt;&gt; Speaker 2: Why do we care about that

70
00:04:52.410 --> 00:04:56.548
length going to the first letter.
&gt;&gt; Bianca Gandolfo: You're right,

71
00:04:56.548 --> 00:04:57.670
thank you.

72
00:04:57.670 --> 00:04:59.510
You guys are so good at this.

73
00:05:01.600 --> 00:05:05.445
Okay.
&gt;&gt; Speaker 2: Just the first value maybe.

74
00:05:05.445 --> 00:05:06.800
&gt;&gt; Bianca Gandolfo: Hm?

75
00:05:06.800 --> 00:05:09.390
&gt;&gt; Speaker 2: Const first value.

76
00:05:09.390 --> 00:05:10.080
&gt;&gt; Bianca Gandolfo: Thank you.

77
00:05:13.190 --> 00:05:19.840
We're gonna delete the first value and
then we will delete it.

78
00:05:19.840 --> 00:05:21.810
So we store it, we delete it, and

79
00:05:21.810 --> 00:05:24.140
now we need to make sure our
pointers are catching on.

80
00:05:24.140 --> 00:05:24.804
Okay, so

81
00:05:24.804 --> 00:05:29.856
our length needs to be decremented.
&gt;&gt; Bianca Gandolfo: And

82
00:05:29.856 --> 00:05:33.371
then our head,
&gt;&gt; Bianca Gandolfo: Needs to be

83
00:05:33.371 --> 00:05:37.270
incremented.
&gt;&gt; Speaker 2: Why?

84
00:05:38.580 --> 00:05:39.800
&gt;&gt; Bianca Gandolfo: Because-

85
00:05:39.800 --> 00:05:41.470
&gt;&gt; Speaker 2: Because we moved the first

86
00:05:41.470 --> 00:05:42.370
one.
&gt;&gt; Bianca Gandolfo: Yeah, and

87
00:05:42.370 --> 00:05:46.050
then we want it to go to one, and then-
&gt;&gt; Speaker 2: Makes sense.

88
00:05:46.050 --> 00:05:46.680
&gt;&gt; Bianca Gandolfo: Yeah, we wanna just

89
00:05:46.680 --> 00:05:47.890
keep.
&gt;&gt; Speaker 2: We're like resetting it to

90
00:05:47.890 --> 00:05:49.380
the next one because we know we

91
00:05:49.380 --> 00:05:50.830
removed the first one.
&gt;&gt; Bianca Gandolfo: Mm hm.

92
00:05:50.830 --> 00:05:51.530
&gt;&gt; Speaker 2: So we know now

93
00:05:51.530 --> 00:05:53.010
it's kinda moving on to the-

94
00:05:53.010 --> 00:05:54.300
&gt;&gt; Bianca Gandolfo: Yep.
&gt;&gt; Speaker 2: Index one.

95
00:05:54.300 --> 00:05:56.520
&gt;&gt; Bianca Gandolfo: Yep, exactly.

96
00:05:57.770 --> 00:05:58.590
What else do we need?

97
00:05:58.590 --> 00:06:03.250
I think, so again,

98
00:06:03.250 --> 00:06:10.653
if it was empty we could check for

99
00:06:10.653 --> 00:06:16.150
that if this.length.

100
00:06:25.095 --> 00:06:26.608
&gt;&gt; Bianca Gandolfo: All right, so

101
00:06:26.608 --> 00:06:29.390
let's test out our code.

102
00:06:29.390 --> 00:06:33.130
So we're going to dequeue it and we're
expecting it to look something like this.

103
00:06:34.270 --> 00:06:36.250
Let's check it out,
make it a little bigger.

104
00:06:37.720 --> 00:06:40.875
Okay, so one, length is 1, head index 1,

105
00:06:40.875 --> 00:06:43.959
awesome.
&gt;&gt; Bianca Gandolfo: And

106
00:06:43.959 --> 00:06:46.870
then we wanna check this one.

107
00:06:46.870 --> 00:06:51.071
To make sure that, oops,
we donâ€™t wanna do that,

108
00:06:51.071 --> 00:06:59.793
that we're still getting the correct.
&gt;&gt; Bianca Gandolfo: Okay, one, two.

109
00:06:59.793 --> 00:07:01.450
Interesting.

110
00:07:01.450 --> 00:07:02.424
We have a weird bug here.

111
00:07:02.424 --> 00:07:09.829
So one is equal to two, off by one error.

112
00:07:09.829 --> 00:07:14.045
Let's check that out.

113
00:07:24.268 --> 00:07:28.752
&gt;&gt; Bianca Gandolfo: We need to, so when we

114
00:07:28.752 --> 00:07:34.990
dequeue, the length is two.

115
00:07:34.990 --> 00:07:39.391
&gt;&gt; Speaker 2: The length is right but

116
00:07:39.391 --> 00:07:43.331
the value is wrong.

117
00:07:43.331 --> 00:07:49.624
It's like we rewrote it.
&gt;&gt; Bianca Gandolfo: Maybe

118
00:07:49.624 --> 00:07:54.112
we don't need to, well I feel like, so

119
00:07:54.112 --> 00:07:57.520
we wanna decrement it there.

120
00:08:03.650 --> 00:08:10.580
It's interesting that it's setting
maybe we also forgot to return this.

121
00:08:12.980 --> 00:08:14.170
So we forgot to return that.

122
00:08:15.560 --> 00:08:16.720
That's not our issue.

123
00:08:20.690 --> 00:08:24.107
So this.length is 1 but

124
00:08:24.107 --> 00:08:30.091
we want it
&gt;&gt; Bianca Gandolfo: Maybe we

125
00:08:30.091 --> 00:08:35.890
need to do this because we want it
to be the length after the head.

126
00:08:35.890 --> 00:08:36.870
Remember we need to move it.

127
00:08:39.000 --> 00:08:43.020
So once head is incremented, so
if the first go around is 0,

128
00:08:43.020 --> 00:08:49.060
the headIndex, but then the next
round it's going to move up one.

129
00:08:52.580 --> 00:08:53.860
And let's check it out.

130
00:08:55.170 --> 00:08:59.186
Do you guys understand what our bug was?
&gt;&gt; Speaker 3: Can you explain it again?

131
00:08:59.186 --> 00:09:00.838
&gt;&gt; Bianca Gandolfo: Yeah sure, so

132
00:09:00.838 --> 00:09:03.320
remember down here.

133
00:09:04.440 --> 00:09:11.539
So when we enqueue two,
we need to get the value 2,

134
00:09:11.539 --> 00:09:16.671
but the length is 1 before, right?

135
00:09:16.671 --> 00:09:22.202
So with the length 1, remember I
was saying like head plus lass or

136
00:09:22.202 --> 00:09:28.255
something I forgot exactly what i was
even talking about at that point.

137
00:09:28.255 --> 00:09:35.067
But we need to add these together because
the length is 2, but the head starts at 1.

138
00:09:35.067 --> 00:09:39.153
So this is 1, 2, but
say this started at 14,

139
00:09:39.153 --> 00:09:44.639
you can't just look it up at
the length because the length could be

140
00:09:44.639 --> 00:09:50.351
a list of length one, but
it should be starting on the 14th index.

141
00:09:50.351 --> 00:09:57.717
So when we enqueue, or on queue,
we can't just use distance length.

142
00:09:57.717 --> 00:10:02.890
We need to find what
the last Index is in that

143
00:10:02.890 --> 00:10:08.081
kind of sub-array that we're creating.

144
00:10:08.081 --> 00:10:11.788
So the head index is the very
first on the list, and

145
00:10:11.788 --> 00:10:16.570
then the length is how many more
after you need to put something.

146
00:10:20.270 --> 00:10:24.016
So to put it another way,
let's say we have, so

147
00:10:24.016 --> 00:10:29.732
when we onqueue here two goes into our
on queue method, the top in there,

148
00:10:29.732 --> 00:10:36.957
let's take this with us though.
&gt;&gt; Bianca Gandolfo: We'll

149
00:10:36.957 --> 00:10:39.406
take it with us so we can look at it.

150
00:10:39.406 --> 00:10:45.056
So here's our
&gt;&gt; Bianca Gandolfo: Data structure.

151
00:10:45.056 --> 00:10:47.788
So we've dequeued, and
we only have this right now.

152
00:10:47.788 --> 00:10:52.436
So our head starts at 1, the length is 1.

153
00:10:52.436 --> 00:10:56.207
If we wanna insert the value 2,

154
00:10:56.207 --> 00:11:01.244
we want to insert it
into the second index.

155
00:11:01.244 --> 00:11:03.236
And the reason we wanna do this is so

156
00:11:03.236 --> 00:11:07.453
that we can mathematically figure
out which index we're going to next.

157
00:11:07.453 --> 00:11:12.255
Otherwise, our look up would be in
linear time, cuz we would need to loop

158
00:11:12.255 --> 00:11:16.210
through the whole object to
find what we're looking for.

159
00:11:16.210 --> 00:11:20.470
So we need to be able to just add it
up mathematically for constant time.

160
00:11:20.470 --> 00:11:24.850
So we wanna get the index to two, and
then we're gonna put our value there.

161
00:11:26.420 --> 00:11:27.330
So that's what we wanna do.

162
00:11:28.570 --> 00:11:33.590
So based on the data that we have
which is our headIndex starts at one,

163
00:11:35.400 --> 00:11:41.130
and the length of our
original is just one,

164
00:11:41.130 --> 00:11:45.530
we can say length plus headIndex gives us

165
00:11:45.530 --> 00:11:49.730
that index that we are interested in and
that's why we have this math here.

166
00:11:51.020 --> 00:11:56.398
So we can even do something like this,
const nextIndex, so that we are really

167
00:11:56.398 --> 00:12:04.092
clear about what this represents.
&gt;&gt; Bianca Gandolfo: Or

168
00:12:04.092 --> 00:12:06.420
even like, actually let's say lastIndex.

169
00:12:12.270 --> 00:12:12.770
Good?

