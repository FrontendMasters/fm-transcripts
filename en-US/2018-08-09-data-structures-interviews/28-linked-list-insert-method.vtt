WEBVTT

1
00:00:00.300 --> 00:00:02.710
&gt;&gt; Bianca Gandolfo: So
now let's try our insert.

2
00:00:02.710 --> 00:00:07.310
So somethings I want to keep in
mind is we need to update head and

3
00:00:07.310 --> 00:00:12.210
tail as needed, like they gave
out when we need to do that.

4
00:00:13.780 --> 00:00:19.070
It seems like we don't really need
to update the head when we insert,

5
00:00:19.070 --> 00:00:21.840
because we already initialized
the very first one.

6
00:00:21.840 --> 00:00:23.250
That's the only time
when I would think like,

7
00:00:23.250 --> 00:00:28.710
okay we need to update the head
on the insert is if head is null.

8
00:00:28.710 --> 00:00:30.390
So we don't really need to do that.

9
00:00:30.390 --> 00:00:32.480
So I'll just delete that for now.

10
00:00:32.480 --> 00:00:35.040
And then we can say update tail.

11
00:00:35.040 --> 00:00:40.159
And then as needed I think every time we
insert we're gonna need to update that

12
00:00:40.159 --> 00:00:45.953
tail reference, okay.
&gt;&gt; Bianca Gandolfo: Okay,

13
00:00:45.953 --> 00:00:53.426
so then we want to say
something like this dot tail.

14
00:00:53.426 --> 00:00:56.299
This dot tail,

15
00:00:56.299 --> 00:01:01.167
so we can say
&gt;&gt; Bianca Gandolfo: So

16
00:01:01.167 --> 00:01:02.670
we can initialize our node.

17
00:01:02.670 --> 00:01:07.206
We can also do things like, make a little
baby node constructor here where we can

18
00:01:07.206 --> 00:01:13.380
construct these nodes.
&gt;&gt; Bianca Gandolfo: That's okay.

19
00:01:13.380 --> 00:01:15.060
The reason that would be nice is for
example,

20
00:01:15.060 --> 00:01:17.770
what if you wanted to make
this a doubly linked list?

21
00:01:17.770 --> 00:01:21.920
If our node constructor was just in
one place we'd only need to change,

22
00:01:21.920 --> 00:01:28.640
we'd only need to add the previous
to that node constructor versus here

23
00:01:28.640 --> 00:01:32.200
we would have to change it in both places
and we'd just have to remember that.

24
00:01:32.200 --> 00:01:35.500
So that's another thing that you can
bring up as you're coding just kind of

25
00:01:35.500 --> 00:01:38.890
the implications of the decisions
that you're making the pros and cons.

26
00:01:38.890 --> 00:01:41.470
In this case I'm just trying to save time.

27
00:01:41.470 --> 00:01:42.180
But I'm aware,

28
00:01:42.180 --> 00:01:46.740
I want you guys to be aware that maybe
there is a better way of doing that.

29
00:01:46.740 --> 00:01:48.580
Okay, so now we need to update the tail.

30
00:01:49.880 --> 00:01:55.867
So we need to say this dot tail

31
00:01:55.867 --> 00:02:02.116
dot next equals node, okay?

32
00:02:02.116 --> 00:02:05.302
And then-
&gt;&gt; Speaker 2: That's what the updating

33
00:02:05.302 --> 00:02:07.967
the null, so then you know it,
the reference.

34
00:02:07.967 --> 00:02:08.881
&gt;&gt; Bianca Gandolfo: Yep, so

35
00:02:08.881 --> 00:02:11.497
what we're doing there

36
00:02:11.497 --> 00:02:17.837
is-
&gt;&gt; Bianca Gandolfo: When

37
00:02:17.837 --> 00:02:20.990
we look at our little guy right here.

38
00:02:20.990 --> 00:02:24.793
So we start off.
&gt;&gt; Bianca Gandolfo: Like

39
00:02:24.793 --> 00:02:28.387
this.
&gt;&gt; Bianca Gandolfo: This

40
00:02:28.387 --> 00:02:29.030
is not the right one.

41
00:02:30.200 --> 00:02:35.570
We start off like this.
&gt;&gt; Bianca Gandolfo: So

42
00:02:35.570 --> 00:02:41.026
we start off with the head and the tail,
the reason I'm doing it on the tail

43
00:02:41.026 --> 00:02:45.866
is because the head and
the tail aren't always gonna be the same.

44
00:02:45.866 --> 00:02:51.746
So while I'm updating this to our next one

45
00:02:51.746 --> 00:02:57.122
which really is going to update both,

46
00:02:57.122 --> 00:03:01.690
because of our bi-reference.

47
00:03:01.690 --> 00:03:02.990
The property of bi-reference.

48
00:03:02.990 --> 00:03:03.900
It's going to update both.

49
00:03:05.510 --> 00:03:07.740
So when I say this dot next dot node.

50
00:03:10.430 --> 00:03:15.010
I'm adding this node to the next and since
it's both we don't need to update both.

51
00:03:15.010 --> 00:03:17.470
Because it's the same
object that we're mutating.

52
00:03:22.270 --> 00:03:25.472
&gt;&gt; Speaker 3: But the tail is no longer

53
00:03:25.472 --> 00:03:28.791
the same node anymore.
&gt;&gt; Bianca Gandolfo: Right.

54
00:03:28.791 --> 00:03:29.554
&gt;&gt; Speaker 3: Is that what we are going

55
00:03:29.554 --> 00:03:30.213
to do?
&gt;&gt; Bianca Gandolfo: Yep, so

56
00:03:30.213 --> 00:03:31.803
that is the next step.
&gt;&gt; Speaker 3: Okay.

57
00:03:31.803 --> 00:03:32.914
&gt;&gt; Bianca Gandolfo: So now, our tail is

58
00:03:32.914 --> 00:03:34.721
pointing to the wrong thing and

59
00:03:34.721 --> 00:03:41.090
we need to update the tail.
&gt;&gt; Bianca Gandolfo: To the node.

60
00:03:44.780 --> 00:03:49.721
So now, what we did is we,
so we updated what

61
00:03:49.721 --> 00:03:54.273
was the tail happens to also be the head.

62
00:03:54.273 --> 00:03:58.283
So we updated both
because of bi-reference.

63
00:03:58.283 --> 00:04:02.963
Then we updated this to
the new value I guess

64
00:04:02.963 --> 00:04:08.294
probably wasn't three,
but let's say it was.

65
00:04:08.294 --> 00:04:14.497
And so now the new tail is three,
but our heads stays the same so

66
00:04:14.497 --> 00:04:22.014
when we're traversing through this we
start with the head it has a value and

67
00:04:22.014 --> 00:04:28.719
it has a next that points to the next
one that happens to be the tail.

68
00:04:28.719 --> 00:04:33.315
But as we grow this right, the next might
not be the tail anymore and you know,

69
00:04:33.315 --> 00:04:38.988
you can keep traversing through it.
&gt;&gt; Speaker 3: So

70
00:04:38.988 --> 00:04:43.594
why do you do the this dot
tail dot next equals node as

71
00:04:43.594 --> 00:04:48.112
opposed to the this dot
head dot next equals node?

72
00:04:48.112 --> 00:04:50.065
What is the benefit?
&gt;&gt; Bianca Gandolfo: So

73
00:04:50.065 --> 00:04:53.805
just here it says it inserts a new
value to the end of the link list.

74
00:04:53.805 --> 00:05:01.640
So this method is always gonna insert to
the end and the head is at the beginning.

75
00:05:01.640 --> 00:05:03.607
So that's why we're doing it that way.
&gt;&gt; Speaker 3: Okay.

76
00:05:03.607 --> 00:05:04.897
&gt;&gt; Bianca Gandolfo: So when you're

77
00:05:04.897 --> 00:05:11.560
implementing this kind of thing,
that's something to ask your interviewer.

78
00:05:11.560 --> 00:05:13.753
Like when you insert there are different
ways you could do an insert.

79
00:05:13.753 --> 00:05:15.907
You can insert it like before the head,

80
00:05:15.907 --> 00:05:18.920
you can insert it at
the end you can insert it.

81
00:05:18.920 --> 00:05:21.920
You can pass a node and
insert it after that node, so

82
00:05:21.920 --> 00:05:25.140
there are all these different
ways you can go about it.

83
00:05:25.140 --> 00:05:28.203
So you can ask specifically
what they expect when you

84
00:05:28.203 --> 00:05:33.336
insert.
&gt;&gt; Bianca Gandolfo: Okay,

85
00:05:33.336 --> 00:05:40.410
so some other things validate the input or
stuff like that.

86
00:05:42.930 --> 00:05:47.340
Okay, so
let's we wanna test our handy work.

87
00:05:48.830 --> 00:05:52.943
So we expect it to look
something like this,

88
00:05:52.943 --> 00:05:57.955
let's run it of course I'm
gonna consul logging in.

89
00:06:03.418 --> 00:06:04.142
&gt;&gt; Bianca Gandolfo: Okay, so

90
00:06:04.142 --> 00:06:10.080
our next is pointing to the second one and
our tail is now on the second one.

91
00:06:10.080 --> 00:06:11.110
So that's what we want.

92
00:06:12.330 --> 00:06:15.840
Any questions about how we arrived here?
&gt;&gt; Speaker 2: I

93
00:06:15.840 --> 00:06:18.470
wanna see the next one cuz I'm still-
&gt;&gt; Bianca Gandolfo: Yeah.

94
00:06:18.470 --> 00:06:19.960
&gt;&gt; Speaker 2: That whole next

95
00:06:19.960 --> 00:06:23.540
pointing to node is not quite clicking.
&gt;&gt; Bianca Gandolfo: Yeah.

96
00:06:24.680 --> 00:06:26.620
So now we have our third value.

97
00:06:28.450 --> 00:06:30.840
Starting to get pretty nasty here
let me make it a little bigger.

98
00:06:33.280 --> 00:06:40.190
So we have our head push
through our value 1.

99
00:06:40.190 --> 00:06:46.850
Our next is the 2 and the next next
is a 3, but it is not printing out.

100
00:06:46.850 --> 00:06:50.166
Then our tail is 3, which points
nothing because it is the tail.

101
00:06:50.166 --> 00:06:51.355
The tail will always point to null.

102
00:06:51.355 --> 00:06:56.990
If we wanted to look at a picture,
so here's our head,

103
00:06:56.990 --> 00:07:03.490
here's our value that's always
gonna point to the next node.

104
00:07:04.930 --> 00:07:08.614
And then if you wanna go even
more in depth we can look at our,

105
00:07:11.985 --> 00:07:14.591
&gt;&gt; Bianca Gandolfo: This visualizer, so

106
00:07:14.591 --> 00:07:20.960
when you insert, so
here's an insert after tale and

107
00:07:20.960 --> 00:07:26.189
so we're expecting to insert after 89.

108
00:07:26.189 --> 00:07:30.620
So you see it created the node.

109
00:07:30.620 --> 00:07:32.910
It changed the pointer here.

110
00:07:32.910 --> 00:07:38.970
This is going to point to null still.
&gt;&gt; Speaker 2: So that's what we're doing.

111
00:07:38.970 --> 00:07:39.996
We're adding a [INAUDIBLE].

