WEBVTT

1
00:00:00.000 --> 00:00:01.720
&gt;&gt; Bianca: All right, so
hash table in real life.

2
00:00:01.720 --> 00:00:03.450
It's a little simpler.

3
00:00:03.450 --> 00:00:05.270
We're used to using objects.

4
00:00:05.270 --> 00:00:08.686
Do you guys use ES6 maps and sets?

5
00:00:08.686 --> 00:00:17.280
So a set doesn't save a value.

6
00:00:17.280 --> 00:00:19.210
It just saves the property name.

7
00:00:19.210 --> 00:00:24.900
So this idea of the key value pair,
it's only a key for

8
00:00:24.900 --> 00:00:29.240
a set but the key can be a string,

9
00:00:29.240 --> 00:00:32.330
can be a function, could be a number,
could be anything.

10
00:00:32.330 --> 00:00:36.475
Where as a regular object it could only
be a string if you pass a number to

11
00:00:36.475 --> 00:00:38.070
an object.

12
00:00:38.070 --> 00:00:40.480
That property name is just stringified so

13
00:00:40.480 --> 00:00:43.790
is just like a string of zero,
for example.

14
00:00:43.790 --> 00:00:48.070
And then a map is like
a combination of the set and

15
00:00:48.070 --> 00:00:52.778
the object because you still
have a key value pair and

16
00:00:52.778 --> 00:00:57.170
you can save any data type
in a map just like a set.

17
00:00:57.170 --> 00:01:01.765
So you can save other objects,
you can save functions, strings,

18
00:01:01.765 --> 00:01:03.170
whatever you want.

19
00:01:04.650 --> 00:01:07.440
So it's like an extension of an object.

20
00:01:07.440 --> 00:01:14.730
The interface, how you interact with
a map and a set is a little different.

21
00:01:14.730 --> 00:01:19.320
So, you don't use the dot
notation like you would, or

22
00:01:19.320 --> 00:01:21.530
a bracket notation like
you would with an object.

23
00:01:21.530 --> 00:01:26.600
You do things like .has or
.get and .said, things like that.

24
00:01:26.600 --> 00:01:30.800
So, it's a little bit of a different
way of interacting with it,

25
00:01:30.800 --> 00:01:33.250
but a lot of the qualities are the same.

26
00:01:33.250 --> 00:01:37.374
And the time complexity in terms of
insertion and retrieval are all constant

27
00:01:37.374 --> 00:01:40.866
time and under the hood,
they're implemented as a hash table.

28
00:01:44.050 --> 00:01:44.620
&gt;&gt; Bianca: Questions?

29
00:01:45.740 --> 00:01:51.980
When you're thinking about optimizing
a problem that requires a fast look up,

30
00:01:51.980 --> 00:01:54.430
your mind should always think Hash table.

31
00:01:56.340 --> 00:02:00.790
And then when you think hash table,
and you're using ES6, which,

32
00:02:00.790 --> 00:02:03.810
you should try to do as much as you can,
it shows that you're

33
00:02:05.820 --> 00:02:09.874
learning and
growing as technology changes.

34
00:02:09.874 --> 00:02:17.800
When you consider,
what is the appropriate data structure?

35
00:02:17.800 --> 00:02:19.790
Is it just a regular object?

36
00:02:19.790 --> 00:02:24.450
Is it a map, like do I have to save
functions as values or as properties?

37
00:02:26.530 --> 00:02:30.450
Or is it a set, do I even need a key
value, maybe I just need a key.

38
00:02:32.750 --> 00:02:34.409
So we're gonna talk about arrays and
strings.

39
00:02:34.409 --> 00:02:37.932
When we think about
strings like I mentioned,

40
00:02:37.932 --> 00:02:43.273
we should think about them as arrays
of characters, as often better.

41
00:02:43.273 --> 00:02:48.239
Strings are not mutable, which means that
if you change a string you're really

42
00:02:48.239 --> 00:02:50.694
copying a new string with that change.

43
00:02:50.694 --> 00:02:55.207
And so if you're doing any string
operation that is changing the string, so

44
00:02:55.207 --> 00:03:00.375
if you're slicing a string, keep in mind
that you're actually copying a new string.

45
00:03:00.375 --> 00:03:05.761
And this has space
complexity implications.

46
00:03:05.761 --> 00:03:09.886
So if you're trying to do
something in constant space,

47
00:03:09.886 --> 00:03:12.770
you can't really use a string.

48
00:03:12.770 --> 00:03:18.140
You need to use an array and then you
would need to do swapping versus creating

49
00:03:18.140 --> 00:03:23.090
a new string every time.

50
00:03:23.090 --> 00:03:25.900
Through slicing or whatever it may be.

51
00:03:25.900 --> 00:03:28.600
If you loop,
you can loop through a string.

52
00:03:28.600 --> 00:03:32.340
But, in an array,
if you look through an array and

53
00:03:32.340 --> 00:03:35.680
you want to change array
I to a different value.

54
00:03:35.680 --> 00:03:44.040
You could say array at I equals 2 and
you would have an array of all twos.

55
00:03:44.040 --> 00:03:48.710
If you did a string at I, you could
look it up, it would say like ABC,

56
00:03:48.710 --> 00:03:50.980
as you look through.

57
00:03:50.980 --> 00:03:54.890
However, if you tried to set
it either it won't work or

58
00:03:54.890 --> 00:03:55.940
it will throw an error, I'm not sure.

59
00:03:55.940 --> 00:04:00.630
But you just can't do that,
you can't swap out the values of a string.

60
00:04:00.630 --> 00:04:03.970
So strings are unmutable,
something to keep in mind.

61
00:04:03.970 --> 00:04:09.420
When you're working with strings,
often I will just split it into an array.

62
00:04:09.420 --> 00:04:13.650
And then you have a lot of handy
array methods that you can work with.

63
00:04:13.650 --> 00:04:16.160
So what are arrays good at?

64
00:04:16.160 --> 00:04:21.100
They are good for looking up by key,

65
00:04:21.100 --> 00:04:24.850
by appending data in constant time.

66
00:04:24.850 --> 00:04:29.485
You can have a slow insert in the middle,
so if you insert something in the middle,

67
00:04:29.485 --> 00:04:32.300
you're gonna have to
shift everything over.

68
00:04:32.300 --> 00:04:35.610
Like I mentioned before when we were
talking about the que you would have to

69
00:04:35.610 --> 00:04:39.210
shift everything over and
then deleting things from the middle.

70
00:04:39.210 --> 00:04:41.400
Would have to shift everything over.

71
00:04:43.380 --> 00:04:45.287
What else do you need to know about this?

72
00:04:48.350 --> 00:04:52.078
&gt;&gt; Bianca: Yeah, so again,
when I say the same things over and

73
00:04:52.078 --> 00:04:55.039
over again because repetition is good.

74
00:04:55.039 --> 00:04:59.800
But often we, when we talk about
the array data structure we

75
00:04:59.800 --> 00:05:03.325
think about contiguous
blocks of memory and

76
00:05:03.325 --> 00:05:08.960
we also talk about a dynamic array,
which you can resize very easily.

77
00:05:08.960 --> 00:05:12.769
In JavaScript, we just have dynamic
arrays, we don't have anything else.

78
00:05:14.180 --> 00:05:19.136
So if you're reading about data structures
and you were talking about allocating

79
00:05:19.136 --> 00:05:23.132
memory for an array, then reallocating
more memory if the array grows.

80
00:05:23.132 --> 00:05:27.524
We don't do any of that,
so we get a nice pass.

81
00:05:27.524 --> 00:05:29.690
But you might see that when
you're reading about it.

