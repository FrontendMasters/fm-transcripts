WEBVTT

1
00:00:00.001 --> 00:00:04.494
&gt;&gt; Bianca Gandolfo: And then Hash Table.

2
00:00:04.494 --> 00:00:08.884
So the difference here is this

3
00:00:08.884 --> 00:00:14.334
Hash Table has array as the storage.

4
00:00:14.334 --> 00:00:18.164
You're gonna need to be able to insert.

5
00:00:18.164 --> 00:00:20.209
When you insert,
you need to pass a key and a value.

6
00:00:20.209 --> 00:00:21.713
It needs to be constant time.

7
00:00:21.713 --> 00:00:24.241
Removal also constant time.

8
00:00:24.241 --> 00:00:29.539
Retrieval constant time on average,
of course.

9
00:00:29.539 --> 00:00:34.483
Some things that aren't included in here,
but you should be thinking about

10
00:00:34.483 --> 00:00:38.977
when you think about a Hash Table
is the problem of resizing, right?

11
00:00:38.977 --> 00:00:42.323
And then also the problem of collisions.

12
00:00:42.323 --> 00:00:43.779
You will need to think about the size.

13
00:00:43.779 --> 00:00:45.945
You guys are doing the Hash Table?
&gt;&gt; Speaker 2: Mm-hm.

14
00:00:45.945 --> 00:00:46.939
&gt;&gt; Bianca Gandolfo: You're going to need

15
00:00:46.939 --> 00:00:50.373
to think about the size, because your
hashing function requires a size.

16
00:00:50.373 --> 00:00:52.410
You're going to think about the size.

17
00:00:52.410 --> 00:00:57.904
If you have time, you can handle
collisions however you feel like.

18
00:00:57.904 --> 00:01:01.771
You can just use an array, you don't need
to use a link, a link might be be too

19
00:01:01.771 --> 00:01:05.285
complicated for the time that we have,
but you can just use an array.

20
00:01:05.285 --> 00:01:09.505
When you have a collision with an array or
when you have a collision,

21
00:01:09.505 --> 00:01:13.503
you just put a two-pole, and
array with two values with a key and

22
00:01:13.503 --> 00:01:15.745
the value in the index of that hash.

23
00:01:15.745 --> 00:01:21.489
So when you have two, so let's just

24
00:01:21.489 --> 00:01:27.048
say this is your empty Hash Table.

25
00:01:27.048 --> 00:01:32.614
And say will you put A which to
say you put the keys one and

26
00:01:32.614 --> 00:01:37.212
the value is one, and
you have the keys two and

27
00:01:37.212 --> 00:01:40.337
the value is two, right?
&gt;&gt; Speaker 2: Yeah.

28
00:01:40.337 --> 00:01:42.261
&gt;&gt; Bianca Gandolfo: But they all hash to

29
00:01:42.261 --> 00:01:51.119
let's say zero.
&gt;&gt; Bianca Gandolfo: Okay,

30
00:01:51.119 --> 00:01:52.640
so they hash to zero.

31
00:01:52.640 --> 00:01:58.834
We're going to have to put both of these,
in the zeroth position.

32
00:01:58.834 --> 00:01:59.929
So how do we do that?

33
00:01:59.929 --> 00:02:05.265
Very easily, we could just simply put

34
00:02:05.265 --> 00:02:10.931
an array in here, and then put 'one',

35
00:02:10.931 --> 00:02:16.282
1 and then 'two', 2, like that.

36
00:02:16.282 --> 00:02:18.919
So that's how you can handle
collisions if you have

37
00:02:18.919 --> 00:02:25.314
time.
&gt;&gt; Bianca Gandolfo: Is this clear?

38
00:02:25.314 --> 00:02:28.059
The other thing is,
this could be a linked list.

39
00:02:28.059 --> 00:02:31.712
So where, like, this has a Next and
it points to this one,

40
00:02:31.712 --> 00:02:36.202
this one has a Next and it points to
the next, you know, to null, okay.

41
00:02:36.202 --> 00:02:40.105
And then the retrieval,
if you're gonna handle collisions,

42
00:02:40.105 --> 00:02:44.237
which needs to handle retrieving
from something that's nested.

43
00:02:44.237 --> 00:02:49.381
So that's some extra logic to think about.

44
00:02:49.381 --> 00:02:52.767
And then here's just
like my hash function.

45
00:02:56.520 --> 00:02:57.069
&gt;&gt; Bianca Gandolfo: Okay,

46
00:02:57.069 --> 00:03:00.832
and note so
a parameter needs to be defined here.

47
00:03:00.832 --> 00:03:05.509
I don't always define them, for you, so

48
00:03:05.509 --> 00:03:11.081
just be, be mindful of this.
&gt;&gt; Bianca Gandolfo: These

49
00:03:11.081 --> 00:03:14.740
comments that say what the parameters are,
and what they should return.

