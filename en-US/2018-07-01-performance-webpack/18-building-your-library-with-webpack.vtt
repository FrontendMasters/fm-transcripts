WEBVTT

1
00:00:00.000 --> 00:00:03.510
&gt;&gt; Sean Larkin: Should you
build your library with

2
00:00:03.510 --> 00:00:08.476
Webpack?
&gt;&gt; Sean Larkin: The only time that I

3
00:00:08.476 --> 00:00:13.469
would consider it is if you were
going to have to ship something

4
00:00:13.469 --> 00:00:18.185
that could be loaded with a script tag,
like a UMD bundle.

5
00:00:18.185 --> 00:00:20.940
UMD is like the universal
module definition.

6
00:00:20.940 --> 00:00:24.042
Basically just means that
it can be loaded with VSM,

7
00:00:24.042 --> 00:00:28.358
it could be loaded with common JS, and
it could be loaded in a script tag.

8
00:00:28.358 --> 00:00:34.751
And we have a feature that supports it, so
if you take a look at our documentation,

9
00:00:34.751 --> 00:00:38.680
we have, so webpac.js.org/configuration.

10
00:00:38.680 --> 00:00:40.420
I think it's /output.

11
00:00:41.690 --> 00:00:49.660
And you would want to be
setting a library, here we go.

12
00:00:49.660 --> 00:00:54.220
So this really is just a great way
to test whether or not you are,

13
00:00:54.220 --> 00:00:59.740
or to set how impact can
create a UMD bundle, right?

14
00:00:59.740 --> 00:01:01.930
It changes the outer run time.

15
00:01:01.930 --> 00:01:05.280
But I say this with extreme caution.

16
00:01:06.330 --> 00:01:08.320
If you yourself are using Webpack,

17
00:01:08.320 --> 00:01:12.190
don't consume a bundle that's been bundled
by Webpack, even if it's a library.

18
00:01:13.210 --> 00:01:15.876
You lose out on being able to tree shaken,
scope hoist or

19
00:01:15.876 --> 00:01:18.280
any of the optimizations, right?

20
00:01:18.280 --> 00:01:20.900
Because it's a self contained run time.

21
00:01:20.900 --> 00:01:25.110
So typically, if I'm building something,
I'm always gonna build it for

22
00:01:25.110 --> 00:01:29.090
myself first and if it's open source
then I might add something else.

23
00:01:29.090 --> 00:01:32.780
But I'm kind of bias and
I'm really strict with performance.

24
00:01:32.780 --> 00:01:35.750
So I don't even wanna create
a UMD bundle for somebody.

25
00:01:35.750 --> 00:01:39.630
I would rather say use a bundler and
consume the raw modules, right?

26
00:01:39.630 --> 00:01:42.850
So my short answer is yes.

27
00:01:42.850 --> 00:01:47.300
I don't do it myself, personally,
because I want people to use a build tool

28
00:01:47.300 --> 00:01:50.995
to consume the modules in a way that
can be tree shaken, scope hoisted,

29
00:01:50.995 --> 00:01:55.380
optimized and
work really well in the browser.

30
00:01:55.380 --> 00:01:56.640
And even be code split right?

31
00:01:56.640 --> 00:02:00.510
Cuz you can't really code split a library
that's been bundled like with this,

32
00:02:00.510 --> 00:02:02.020
which is the UMD bundle runtime.

33
00:02:03.760 --> 00:02:08.705
So, hopefully that asks,
to those who were curious out there,

34
00:02:08.705 --> 00:02:11.738
asking yesterday and in the feedback.

35
00:02:11.738 --> 00:02:16.704
I would say if you're gonna bundle
something, at least if Webpack is

36
00:02:16.704 --> 00:02:21.168
one of your consumers,
just ship the raw modules, raw ES7.

37
00:02:21.168 --> 00:02:24.450
I would even say don't even
transpile the ES6 syntax.

38
00:02:24.450 --> 00:02:25.910
Leave that there, too.

39
00:02:25.910 --> 00:02:28.960
And let Babble,
in your local Webpack application, like,

40
00:02:28.960 --> 00:02:31.300
load it and transpile it down.

41
00:02:33.490 --> 00:02:37.000
You could spend a whole class on
that with just Babble, as well.

42
00:02:37.000 --> 00:02:40.170
But Henry Zhu is a good resource
to reach out to for that.

43
00:02:40.170 --> 00:02:42.460
[LAUGH] I always throw
him under the bus there

