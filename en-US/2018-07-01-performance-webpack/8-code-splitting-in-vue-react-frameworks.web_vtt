WEBVTT

1
00:00:00.846 --> 00:00:03.678
&gt;&gt; Speaker 1: I remember you said
something yesterday about how

2
00:00:03.678 --> 00:00:08.197
it's specific based on what library or
what framework you're using to, codes

3
00:00:08.197 --> 00:00:12.176
blanks gets more complicated with say-
&gt;&gt; Sean Larkin: That's very true, yes.

4
00:00:12.176 --> 00:00:14.317
&gt;&gt; Speaker 1: Are you gonna dive
into that all later or [INAUDIBLE].

5
00:00:14.317 --> 00:00:21.340
&gt;&gt; Sean Larkin: I think it's fair for
me to show an example of what that means.

6
00:00:21.340 --> 00:00:23.081
So yeah some, go ahead.

7
00:00:23.081 --> 00:00:25.174
&gt;&gt; Speaker 1: [INAUDIBLE] more questions.

8
00:00:25.174 --> 00:00:28.988
&gt;&gt; Sean Larkin: Okay, okay,
so you're absolutely right.

9
00:00:28.988 --> 00:00:32.753
There are some frameworks
in some libraries that,

10
00:00:36.593 --> 00:00:38.023
&gt;&gt; Sean Larkin: How do I say this?

11
00:00:38.023 --> 00:00:41.794
Disregarded why Pack is
an important tool that people use.

12
00:00:41.794 --> 00:00:42.916
And therefore,

13
00:00:42.916 --> 00:00:48.216
missed the opportunity to make lazy
loading a first-class citizen for them.

14
00:00:48.216 --> 00:00:53.132
And therefore, it's a painful experience
to have a performing application.

15
00:00:53.132 --> 00:00:57.679
A great example of that is like Angular?

16
00:00:57.679 --> 00:01:02.113
It takes about 14 files to
even lazy load something.

17
00:01:02.113 --> 00:01:05.616
And they don't even support
component by component lazy loading.

18
00:01:05.616 --> 00:01:09.619
You have to technically fake
a router outlet to even do it.

19
00:01:09.619 --> 00:01:14.261
And so it's like,
when you don't respect the contextual

20
00:01:14.261 --> 00:01:18.061
things like what are people
using as a bundler.

21
00:01:18.061 --> 00:01:23.593
Or if you don't make code splitting
a first class citizen, you make it really

22
00:01:23.593 --> 00:01:29.311
hard for your users to be able to create
performance web applications, right?

23
00:01:29.311 --> 00:01:32.752
But on the other hand,
we have projects like,

24
00:01:32.752 --> 00:01:38.238
I'll just open an example cuz I think
it's super important to showcase.

25
00:01:41.780 --> 00:01:42.505
&gt;&gt; Sean Larkin: Let's see.

26
00:01:45.563 --> 00:01:49.507
&gt;&gt; Sean Larkin: Where we have vue.js.

27
00:01:49.507 --> 00:01:51.470
Where's that great example
that I used to have?

28
00:01:51.470 --> 00:01:53.541
Let's look at my 30 card folders.

29
00:01:53.541 --> 00:01:58.001
[NOISE]
&gt;&gt; Sean Larkin: Let's see,

30
00:01:58.001 --> 00:01:59.285
vue demo I think is fine.

31
00:02:04.619 --> 00:02:07.581
&gt;&gt; Sean Larkin: The most
beautiful thing about vue.js,

32
00:02:07.581 --> 00:02:10.297
I'll just give a very quick context.

33
00:02:10.297 --> 00:02:16.264
So long story short, to you, so
vue has a single file component system.

34
00:02:16.264 --> 00:02:20.307
I'll even say that they decided to build
on Webpack as a platform when they created

35
00:02:20.307 --> 00:02:21.197
their features.

36
00:02:21.197 --> 00:02:26.440
Single file components are powered
by a Webpack loader, its viewloader.

37
00:02:26.440 --> 00:02:30.083
And what they give is it
allows them write a single,

38
00:02:30.083 --> 00:02:33.150
you get to write a single component style.

39
00:02:33.150 --> 00:02:37.755
It's scoping data, and
it's templating in a single file.

40
00:02:37.755 --> 00:02:40.274
The context is really nice.

41
00:02:40.274 --> 00:02:44.985
If you wanna use one custom component
in another, you have to register it.

42
00:02:44.985 --> 00:02:49.662
Now, to do so, you just import
it like it's module, right?

43
00:02:49.662 --> 00:02:53.823
Because behind the scenes, the loader
converts all of this to ESM modules.

44
00:02:53.823 --> 00:02:57.867
So, when I say code splitting
as a first class citizen.

45
00:02:57.867 --> 00:03:00.835
I mean that well,
to register that component,

46
00:03:00.835 --> 00:03:04.626
you'd import it and
then you take that imported reference.

47
00:03:04.626 --> 00:03:10.280
And you just bind it here in components,
it's just a destructure Syntax.

48
00:03:10.280 --> 00:03:14.628
So now that I've set this here, I'm able
to actually use this hello world component

49
00:03:14.628 --> 00:03:16.540
as seen above in my custom template.

50
00:03:16.540 --> 00:03:17.788
Does that make sense so far?

51
00:03:17.788 --> 00:03:22.130
And, don't sweat too much
about the view syntax.

52
00:03:22.130 --> 00:03:26.054
Just think about this is an API for
registering components, right?

53
00:03:26.054 --> 00:03:30.328
So, when Evan, you created this, he said,

54
00:03:30.328 --> 00:03:34.043
well not only can you take a component.

55
00:03:34.043 --> 00:03:38.709
If I was to use an interface for
this and said, I like using interfaces

56
00:03:38.709 --> 00:03:42.908
because now that I do some typing stuff,
it makes sense to me.

57
00:03:42.908 --> 00:03:47.747
So if I said interface
RegisteredComponent,

58
00:03:47.747 --> 00:03:53.205
what it means is,
it takes a instance of component or

59
00:03:53.205 --> 00:03:57.555
like so the component's property here.

60
00:03:57.555 --> 00:03:59.371
Takes a component, or

61
00:03:59.371 --> 00:04:05.019
it takes a function that returns
a promise that resolves a component.

62
00:04:07.413 --> 00:04:09.028
&gt;&gt; Sean Larkin: So what does that mean?

63
00:04:09.028 --> 00:04:12.926
So it means that I literally
can comment this line,

64
00:04:12.926 --> 00:04:17.650
uncomment this line,
as long as this is named the same thing.

65
00:04:17.650 --> 00:04:22.108
Wow, I just code split this component.

66
00:04:22.108 --> 00:04:27.630
With one line change, one line.

67
00:04:27.630 --> 00:04:30.281
You just instantly made it possible for

68
00:04:30.281 --> 00:04:34.309
this to be loaded asynchronously,
and what's the power?

69
00:04:34.309 --> 00:04:35.858
Sean, why does that matter?

70
00:04:35.858 --> 00:04:40.857
Well so for example, if this state here,
so if you wanted to bind state.

71
00:04:40.857 --> 00:04:46.248
I don't even want,
please don't stress about

72
00:04:46.248 --> 00:04:51.919
the syntax itself Let's
say some state is false.

73
00:04:51.919 --> 00:04:56.924
And v, f is just like, it's very similar

74
00:04:56.924 --> 00:05:01.220
to Angular JS directives, right?

75
00:05:01.220 --> 00:05:04.903
And it complies down to render
functions like reactos.

76
00:05:04.903 --> 00:05:10.686
So, if this is false,
this component never gets loaded, right?

77
00:05:10.686 --> 00:05:15.848
Because what it's equal to is
a function that returns the promise.

78
00:05:15.848 --> 00:05:20.131
So, when at runtime,
this State evaluates to true,

79
00:05:20.131 --> 00:05:24.712
lets say some event changes it,
vue calls the function.

80
00:05:24.712 --> 00:05:28.529
Which then go fetches the bundle
that has the component.

81
00:05:28.529 --> 00:05:32.244
This is first class code splitting.

82
00:05:32.244 --> 00:05:36.760
There is no other framework
today that does this.

83
00:05:36.760 --> 00:05:41.569
And It's almost ironic
that another grassroots

84
00:05:41.569 --> 00:05:47.560
organization that serves nothing but
its users, like Vue.

85
00:05:47.560 --> 00:05:52.011
Has a really great integration with
another grassroots open source project

86
00:05:52.011 --> 00:05:54.805
that serves nobody but
its users like Webpack.

87
00:05:54.805 --> 00:05:59.781
So just something to think about when you
choose your technologies in the future.

88
00:05:59.781 --> 00:06:03.016
Anyways, I'm biased, so I'm biased.

89
00:06:03.016 --> 00:06:06.651
But yes, this is first class code
splitting, this is what excites me

90
00:06:06.651 --> 00:06:10.551
because I see libraries and frameworks
from the future building on this.

91
00:06:10.551 --> 00:06:15.740
This means that at any time you could
swap an app together with static imports.

92
00:06:15.740 --> 00:06:20.336
And then go back one line at a time and
refactor everything to be high performing.

93
00:06:20.336 --> 00:06:23.406
So this is first class code splitting.

94
00:06:23.406 --> 00:06:26.428
There are other examples of
doing this in other libraries.

95
00:06:26.428 --> 00:06:29.757
So if you're React,
there's React Loadable.

96
00:06:29.757 --> 00:06:37.373
Loadable, it's made by Jamie Builds or
James Kyle or Jamie Kyle he goes by now.

97
00:06:37.373 --> 00:06:42.713
And essentially what this does is,
now it's a little bit more boiler plate.

98
00:06:42.713 --> 00:06:47.100
It's not a first class experience,
it's very close though.

99
00:06:47.100 --> 00:06:49.911
Is that you can take and
just import loadable.

100
00:06:49.911 --> 00:06:53.542
And then if you had like a loader icon or
a spinning icon,

101
00:06:53.542 --> 00:06:55.795
it allows you to bind that as well.

102
00:06:55.795 --> 00:06:58.054
But you create this component and

103
00:06:58.054 --> 00:07:02.741
you can see here a function that
returns the dynamic import, right?

104
00:07:02.741 --> 00:07:05.354
Of your react component
that you wanna lazy load.

105
00:07:05.354 --> 00:07:08.858
And then all you have to do is
return that in your render function.

106
00:07:08.858 --> 00:07:10.182
Does that make sense?

107
00:07:10.182 --> 00:07:13.279
To people who know like jxx, they're like,
yeah this looks really clear.

108
00:07:13.279 --> 00:07:18.635
To me I'm just like, and
like okay, [LAUGH] cool.

109
00:07:18.635 --> 00:07:20.799
Yeah, so this is probably,

110
00:07:20.799 --> 00:07:26.310
this is the only like really convenient
way I know how to do it with react.

111
00:07:26.310 --> 00:07:31.070
So that's what I mean when say like
hopefully that answers the question,

112
00:07:31.070 --> 00:07:34.851
I kinda rebuilding dot a little
sub box there for a moment.

113
00:07:34.851 --> 00:07:38.064
But It's gonna differ for each library.

114
00:07:38.064 --> 00:07:38.788
&gt;&gt; Speaker 1: Pretty concise.

115
00:07:38.788 --> 00:07:43.296
So [INAUDIBLE] like in a spectrum
of ease vue by far the easiest to

116
00:07:43.296 --> 00:07:45.042
[INAUDIBLE] [CROSSTALK].

117
00:07:45.042 --> 00:07:45.553
&gt;&gt; Sean Larkin: By far.

118
00:07:45.553 --> 00:07:46.491
&gt;&gt; Speaker 1: React
somewhere in the middle.

119
00:07:46.491 --> 00:07:47.279
&gt;&gt; Sean Larkin: Yeah.

120
00:07:47.279 --> 00:07:50.020
&gt;&gt; Speaker 1: Angular-
&gt;&gt; Sean Larkin: Is incredibly painful for

121
00:07:50.020 --> 00:07:51.712
the component level.

122
00:07:51.712 --> 00:07:53.675
I would say for
routing they have it pretty well.

123
00:07:53.675 --> 00:07:58.004
But a lot of the times,
you can't just split at the route level.

124
00:07:58.004 --> 00:08:00.213
You should be doing all
your terminal components.

125
00:08:00.213 --> 00:08:02.593
Like what's super cool is in the future.

126
00:08:02.593 --> 00:08:04.233
I see us having tools and

127
00:08:04.233 --> 00:08:09.239
utilities that see like this is
the conditionally loaded component.

128
00:08:09.239 --> 00:08:12.777
Behind the scenes, let's just convert
this to a dynamic import, right?

129
00:08:12.777 --> 00:08:17.452
Hopefully, we see that, but
you're right, absolutely, vue by far.

130
00:08:17.452 --> 00:08:22.581
And, there are,
like I'm trying to work with teams,

131
00:08:22.581 --> 00:08:25.599
like PreAct and even Hyper App.

132
00:08:25.599 --> 00:08:29.354
If you've ever seen Hyper App it's a tiny,
tiny version, smaller than PreAct.

133
00:08:29.354 --> 00:08:32.727
But, they have a really cool API so
I've been trying to tell them, like hey.

134
00:08:32.727 --> 00:08:34.254
Can you make first class code splitting?

135
00:08:34.254 --> 00:08:37.187
And I'm trying to work with these
newer framework that look like they

136
00:08:37.187 --> 00:08:37.907
could take off?

137
00:08:37.907 --> 00:08:39.114
Because really,

138
00:08:39.114 --> 00:08:44.431
this is like 11 lines of code in your
own internal library to handle, right?

139
00:08:44.431 --> 00:08:48.684
All you have to say, is this,
is type of this a function?

140
00:08:48.684 --> 00:08:50.250
Or is it a component instance?

141
00:08:50.250 --> 00:08:52.880
If it's a type of function,
result of promise, right?

