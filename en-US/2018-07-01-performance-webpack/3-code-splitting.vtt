WEBVTT

1
00:00:00.250 --> 00:00:03.090
&gt;&gt; Sean Larkin: So I did kind
of a soul search cuz I wanted to

2
00:00:03.090 --> 00:00:05.320
do a talk about code splitting.

3
00:00:05.320 --> 00:00:08.870
And of course,
I went to Google and I searched,

4
00:00:08.870 --> 00:00:12.190
then I found our old Webpack docs and
I was like dang it.

5
00:00:12.190 --> 00:00:16.600
I was looking for more historical context,
like who invented this idea, right?

6
00:00:18.090 --> 00:00:22.340
But turns out, as you heard from me
yesterday, it's Google Web Toolkit.

7
00:00:22.340 --> 00:00:25.352
Who's ever used Google Web Toolkit
in the Java world?

8
00:00:25.352 --> 00:00:26.684
You know, you understand.

9
00:00:26.684 --> 00:00:32.950
So they're the pioneers of this
technology, is that you can take,

10
00:00:32.950 --> 00:00:38.570
and if there is code that isn't used
right away, like a button event or

11
00:00:38.570 --> 00:00:44.780
something, Google Web Toolkit would allow
you to have this method called run asynch.

12
00:00:44.780 --> 00:00:49.863
And any of the code inside of here
wouldn't actually run until that event

13
00:00:49.863 --> 00:00:55.112
occurred, and it would be separated
into a separate piece of JavaScript,

14
00:00:55.112 --> 00:00:58.302
right, that would be fetched dynamically.

15
00:00:58.302 --> 00:01:02.751
And so,
when Tobias forked modules web make,

16
00:01:02.751 --> 00:01:08.581
the whole point was to bring
this technology into bundlers.

17
00:01:08.581 --> 00:01:14.210
[COUGH] And so, I tried to beat,
I will beat this concept dead today.

18
00:01:14.210 --> 00:01:20.410
I want you to walk away,
how would I say this?

19
00:01:20.410 --> 00:01:22.830
How would I be so
over dramatic saying this?

20
00:01:22.830 --> 00:01:28.270
This is the number one most important
thing that you could walk away with for

21
00:01:28.270 --> 00:01:31.110
enabling performance in
your web applications.

22
00:01:31.110 --> 00:01:32.780
If you learned anything,

23
00:01:32.780 --> 00:01:35.565
this is the one thing that I want to
make sure you know back and front.

24
00:01:35.565 --> 00:01:37.236
No matter what.

25
00:01:37.236 --> 00:01:39.411
And this definition is very,

26
00:01:39.411 --> 00:01:45.327
I'm very persnickety about it because
you're gonna hear a lot of other tools and

27
00:01:45.327 --> 00:01:50.650
a lot of other frameworks that are gonna
say zero config code splitting.

28
00:01:50.650 --> 00:01:51.965
That's not a thing.

29
00:01:51.965 --> 00:01:59.852
Or you'll hear somebody say
&gt;&gt; Sean Larkin: Other tools like Roll Up,

30
00:01:59.852 --> 00:02:02.670
they'll say we have code
splitting now out of the box.

31
00:02:02.670 --> 00:02:05.340
Really, they don't, it's different.

32
00:02:05.340 --> 00:02:08.460
And this is not to knock on those.

33
00:02:08.460 --> 00:02:11.455
Rich Harris is a very
close friend of mine.

34
00:02:11.455 --> 00:02:13.555
It's just not the same thing.

35
00:02:13.555 --> 00:02:15.945
And you'll hear maybe like Ember.

36
00:02:15.945 --> 00:02:17.385
If you've ever used Ember, they say, yeah,

37
00:02:17.385 --> 00:02:19.375
we have code splitting,
it's called Ember Islands.

38
00:02:19.375 --> 00:02:22.985
And no, that's just loading
something in an iFrame dynamically.

39
00:02:24.015 --> 00:02:30.640
So code splitting to us means
creating at build time,

40
00:02:31.660 --> 00:02:35.610
separate chunks of Java script that
will only be reloaded asynchronously.

41
00:02:36.730 --> 00:02:38.570
So think about that.

42
00:02:38.570 --> 00:02:41.120
Everything that we
create is at build time.

43
00:02:41.120 --> 00:02:43.950
So when you use code splitting,

44
00:02:43.950 --> 00:02:47.360
you're creating these lazy
bundles in your build step.

45
00:02:47.360 --> 00:02:53.720
And they are accessed via WebPack in
the coded transforms asynchronously.

46
00:02:53.720 --> 00:02:55.436
So how does it work?

47
00:02:55.436 --> 00:02:59.220
We're actually gonna go through this
entire process more in depth after we talk

48
00:02:59.220 --> 00:03:00.570
about performance.

49
00:03:00.570 --> 00:03:05.177
But essentially, what WebPack does under
the hood is it takes your entry point,

50
00:03:05.177 --> 00:03:09.445
it passes it to this thing called a
resolver where you just make sure the file

51
00:03:09.445 --> 00:03:10.530
exists, right?

52
00:03:10.530 --> 00:03:14.104
Cuz if it doesn't,
you can't parse it and read it.

53
00:03:15.422 --> 00:03:18.590
&gt;&gt; Sean Larkin: We read the source code,
we parse it, and we look for

54
00:03:18.590 --> 00:03:24.560
dependency statements like imports,
redquires, the common JS, AMD syntax, etc.

55
00:03:24.560 --> 00:03:28.670
And then, we put these little object
models called dependencies on them.

56
00:03:28.670 --> 00:03:31.530
Well, all that we do differently
with code splitting is that it's

57
00:03:31.530 --> 00:03:33.450
a different type of dependency.

58
00:03:33.450 --> 00:03:34.930
It's another flavor.

59
00:03:34.930 --> 00:03:38.250
And we leverage this
information to say okay,

60
00:03:38.250 --> 00:03:41.910
at this point, separate everything
in the graph into a separate bundle.

61
00:03:41.910 --> 00:03:44.110
Flatten it, and create it.

