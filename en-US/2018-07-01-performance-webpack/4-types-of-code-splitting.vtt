WEBVTT

1
00:00:03.931 --> 00:00:05.500
&gt;&gt; Sean Larkin: You might be like, Sean.

2
00:00:05.500 --> 00:00:07.410
Why do I care?

3
00:00:07.410 --> 00:00:09.270
Why is this important?

4
00:00:09.270 --> 00:00:12.040
And so the future of the web is mobile.

5
00:00:12.040 --> 00:00:18.450
Literally today, the average website
takes 14 seconds to get interactive.

6
00:00:18.450 --> 00:00:19.670
14 seconds.

7
00:00:19.670 --> 00:00:26.050
And the less load that you ship means
that you can be interactive faster.

8
00:00:26.050 --> 00:00:32.610
When I referred to dynamic import,
I'm referring to this syntax right here.

9
00:00:32.610 --> 00:00:35.370
So the dynamic import is in stage three.

10
00:00:35.370 --> 00:00:37.920
It's part of the what WG loader spec.

11
00:00:37.920 --> 00:00:40.870
So whatwg/loader.

12
00:00:40.870 --> 00:00:42.430
And that's a web specification.

13
00:00:44.130 --> 00:00:47.770
And so what this allows
you to do in browser land.

14
00:00:47.770 --> 00:00:51.450
This will allow you to just at
run time dynamically fetch,

15
00:00:51.450 --> 00:00:54.995
any piece of JavaScript and
use it like a module.

16
00:00:54.995 --> 00:00:58.410
However, there's some constraints to that,

17
00:00:58.410 --> 00:01:02.500
which are like,
you really have no control over.

18
00:01:02.500 --> 00:01:05.270
You can't optimize anything
that you're doing dynamically.

19
00:01:05.270 --> 00:01:10.780
You can't, like really there's
some security concerns.

20
00:01:10.780 --> 00:01:14.490
And there's basically no complete
browser interrupt on the syntax.

21
00:01:15.610 --> 00:01:19.330
But for us,

22
00:01:19.330 --> 00:01:26.010
we saw this as an opportunity
to convert before webpack three,

23
00:01:26.010 --> 00:01:30.320
the only way to have code splitting
was to use require.ensure.

24
00:01:30.320 --> 00:01:34.550
But it's not a browser specification,
and so we wanted to get rid of it.

25
00:01:34.550 --> 00:01:39.913
And so, this syntax right here, is what
I refer to when I say dynamic import.

26
00:01:39.913 --> 00:01:44.780
So just remember that because I'm
gonna use two terms called dynamic and

27
00:01:44.780 --> 00:01:49.480
static code splitting, and
I don't want you to confuse the two.

28
00:01:49.480 --> 00:01:52.100
So, there's two types of code splitting.

29
00:01:54.030 --> 00:02:00.580
So there's static code splitting and
then there's dynamic, heavy quotes.

30
00:02:00.580 --> 00:02:02.220
Super heavy quotes.

31
00:02:02.220 --> 00:02:08.090
When I say that because there is nothing
in webpack that is purely dynamic.

32
00:02:08.090 --> 00:02:09.940
Everything we do has a build time, right?

33
00:02:09.940 --> 00:02:14.640
The number one question that I
hear from people is like Sean.

34
00:02:14.640 --> 00:02:18.610
Can I use code splitting and
do something like this, like some bar?

35
00:02:18.610 --> 00:02:22.860
And the answer is no, you'll never be
able to do it, and we'll never support.

36
00:02:22.860 --> 00:02:26.730
Because it's an anti-pattern we
don't you to do anything at runtime.

37
00:02:27.730 --> 00:02:30.090
If you have the sources
available on your code base,

38
00:02:33.230 --> 00:02:36.660
to be code splitting statically, right?

39
00:02:36.660 --> 00:02:41.400
And so, we'll cover this in a second but
I just want to clear some of the air,

40
00:02:41.400 --> 00:02:43.270
that's why I say heavy quotes, dynamic.

41
00:02:45.710 --> 00:02:50.150
So static code splitting,
an example might be

42
00:02:50.150 --> 00:02:54.540
you'd want to use this, anytime that
you have a heavy library, right?

43
00:02:55.610 --> 00:02:59.300
That you need to use but
you might need it up front, right?

44
00:03:00.450 --> 00:03:05.560
A great example is like, if you're not
using three.js on your initial download,

45
00:03:05.560 --> 00:03:08.250
or like on your initial view of your page.

46
00:03:08.250 --> 00:03:11.390
Yet, like in some other lazy
route you're gonna use it.

47
00:03:12.880 --> 00:03:15.200
Why do you wanna have that
in your initial bundles?

48
00:03:15.200 --> 00:03:16.620
You don't want it, right?

49
00:03:16.620 --> 00:03:17.910
You'd only want it when it's needed.

50
00:03:19.350 --> 00:03:22.060
Anything temporal, so when I say temporal,

51
00:03:22.060 --> 00:03:26.320
I mean like, if it's not there initially,
it appears, and then goes away.

52
00:03:26.320 --> 00:03:30.550
So like think a modal,
think a tooltip, a dialog.

53
00:03:32.710 --> 00:03:36.890
Anything that's not visible on your
page and will conditionally load.

54
00:03:36.890 --> 00:03:38.900
That's what I consider temporal.

55
00:03:38.900 --> 00:03:42.190
Even things like as you're
scrolling down the page and

56
00:03:42.190 --> 00:03:45.100
it comes below the fold,
that's technically temporal.

57
00:03:46.950 --> 00:03:48.430
And then routes.

58
00:03:48.430 --> 00:03:52.600
Like, any time you have routes,
especially client side routing.

59
00:03:53.870 --> 00:03:56.190
A user's only gonna go to
your first routes, right?

60
00:03:56.190 --> 00:04:00.170
So essentially you can code split

61
00:04:00.170 --> 00:04:05.270
every single route that you have to
ensure that the only code that's getting

62
00:04:05.270 --> 00:04:08.850
delivered to this person's experience is
the one for the page that they're on.

