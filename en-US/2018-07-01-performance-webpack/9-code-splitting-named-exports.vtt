WEBVTT

1
00:00:00.020 --> 00:00:06.540
&gt;&gt; Speaker 1: Can you lazy load a named
export or is it only the default?

2
00:00:06.540 --> 00:00:09.120
&gt;&gt; Sean Larkin: So
it's always only the default for now.

3
00:00:09.120 --> 00:00:12.220
So, the caveat to that,
that's actually a really great question.

4
00:00:12.220 --> 00:00:17.730
So, it's always gonna
be the default export.

5
00:00:17.730 --> 00:00:22.527
And because of that,
you do lose the ability to

6
00:00:22.527 --> 00:00:26.970
tree shake that asynchronous bundle.

7
00:00:26.970 --> 00:00:29.580
Now what you can do is,
like, let's say for

8
00:00:29.580 --> 00:00:35.180
example, let me see what would I do here?

9
00:00:37.020 --> 00:00:41.546
I think a great example is like,
you could use low dash or whatever or.

10
00:00:41.546 --> 00:00:46.380
So, I'll add lodash-es.

11
00:00:46.380 --> 00:00:55.180
I'll talk about tree shaking next,
lodash-es.

12
00:00:55.180 --> 00:01:01.084
So, essentially when you are using
a utility library like lodash-es,

13
00:01:01.084 --> 00:01:02.936
which is all pure ESM.

14
00:01:02.936 --> 00:01:06.134
You would notice that if
you lazy loaded this,

15
00:01:06.134 --> 00:01:11.710
that you're gonna get a lot more code
than what you actually expected.

16
00:01:11.710 --> 00:01:17.460
Right now, we don't have the heuristics
for webpac to determine if like,

17
00:01:17.460 --> 00:01:20.560
there's no way for us to say like,
what aren't you using.

18
00:01:21.740 --> 00:01:25.685
We're thinking about proposing that, if
you use destructure syntax inside of this.

19
00:01:25.685 --> 00:01:31.610
So let's say like, if a user did
something along the lines of this here.

20
00:01:31.610 --> 00:01:36.600
Like, destructure and said footer,
like that's the named export.

21
00:01:36.600 --> 00:01:42.120
Then maybe we could use this information
to consider, used versus unused.

22
00:01:42.120 --> 00:01:46.670
So, the technique that you wanna
do when you're lazy loading, so

23
00:01:46.670 --> 00:01:47.740
I just pulled in lodash.

24
00:01:47.740 --> 00:01:51.690
And so like, let' say I wanna
access one function from lodash.

25
00:01:51.690 --> 00:01:55.510
Now, in a static world, you would say
something like, you can do two things.

26
00:01:55.510 --> 00:01:58.954
So one, you can take and
separate into a separate

27
00:01:58.954 --> 00:02:03.574
file where you only grab the one piece and
then you lazy load that.

28
00:02:03.574 --> 00:02:08.799
Or you can take and say conts,

29
00:02:08.799 --> 00:02:16.760
getlodashunique=aimport of lodash-es.

30
00:02:16.760 --> 00:02:19.790
But then we wanna actually
access that individual function.

31
00:02:19.790 --> 00:02:23.160
So, I would have to look inside
the node_modules to see like,

32
00:02:23.160 --> 00:02:25.510
what is the path to that direct file.

33
00:02:26.510 --> 00:02:30.930
And this was a kind of a technique that
people would do when they're using,

34
00:02:30.930 --> 00:02:34.470
let's see, here we go, lodash-es.

35
00:02:34.470 --> 00:02:37.370
And then it is called unique, I believe.

36
00:02:38.680 --> 00:02:44.190
So I would actually go directly to unique,
there's no source folder, right?

37
00:02:44.190 --> 00:02:44.800
Yep, so.

38
00:02:47.040 --> 00:02:47.790
&gt;&gt; Sean Larkin: Unique.

39
00:02:49.700 --> 00:02:50.260
Then this way,

40
00:02:50.260 --> 00:02:53.830
this would ensure that you're only
grabbing that individual granular module.

41
00:02:53.830 --> 00:02:57.753
Even though it's hoisted up to
a bunch of other utilities.

