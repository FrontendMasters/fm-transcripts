WEBVTT

1
00:00:00.339 --> 00:00:05.352
&gt;&gt; Sean Larkin: I talked kind of about,
I stopped here where we

2
00:00:05.352 --> 00:00:10.120
dove into actually how
it works in the code.

3
00:00:10.120 --> 00:00:12.629
But things to remember,
that I think are important,

4
00:00:12.629 --> 00:00:16.660
is that anytime you use a dynamic import,
it's always returning a promise, right?

5
00:00:16.660 --> 00:00:17.831
And it's creating and

6
00:00:17.831 --> 00:00:21.660
putting the modules that you dynamically
imported into a separate file.

7
00:00:23.610 --> 00:00:30.760
Now I wanna talk about
dynamic code splitting.

8
00:00:30.760 --> 00:00:38.298
Dynamic, dynamic, I can't emphasize enough
that this is not true dynamic loading,

9
00:00:38.298 --> 00:00:42.890
but this is kind of a trick.

10
00:00:42.890 --> 00:00:44.430
It's a little compiler trick.

11
00:00:44.430 --> 00:00:45.740
It's a heuristic.

12
00:00:45.740 --> 00:00:51.151
So let's take this code
example that we see here.

13
00:00:51.151 --> 00:00:56.550
So we're using the dynamic input in the
same way that we're familiar with, right?

14
00:00:56.550 --> 00:01:01.348
We assign a variable to a function
that returns a dynamic import, but

15
00:01:01.348 --> 00:01:04.754
we're doing something
a little bit different.

16
00:01:04.754 --> 00:01:07.780
This path is not fully static, right?

17
00:01:07.780 --> 00:01:09.210
There is a variable in here.

18
00:01:10.430 --> 00:01:14.920
And we're taking that variable from
the function parameter and it's passed in.

19
00:01:16.230 --> 00:01:22.389
So, now when you use this code,
you actually see that you can leverage

20
00:01:24.800 --> 00:01:30.050
global conditions at runtime to choose
when to dynamically load something.

21
00:01:31.690 --> 00:01:33.803
Dynamically load something.

22
00:01:33.803 --> 00:01:39.054
So I call it dynamic code
splitting cuz you can actually use

23
00:01:39.054 --> 00:01:46.110
runtime conditions to actually choose
when to load something lazily.

24
00:01:46.110 --> 00:01:50.750
I was blown away cuz I was like,
wow, how does this work?

25
00:01:50.750 --> 00:01:51.740
So I'm gonna break this down.

26
00:01:53.800 --> 00:01:58.040
So we know that we have a function that
returns a dynamic import, but in this case

27
00:02:00.980 --> 00:02:04.830
there's two things that I want you
to walk away with this technique.

28
00:02:04.830 --> 00:02:07.750
Is that there's two pieces
that are really important.

29
00:02:07.750 --> 00:02:13.480
We have the expression,
which is the dynamic piece.

30
00:02:14.490 --> 00:02:19.689
And we have a partial path,
which is the static piece, right?

31
00:02:22.051 --> 00:02:25.452
&gt;&gt; Sean Larkin: What we call
this in our technical terms,

32
00:02:25.452 --> 00:02:28.860
in Webpack we call this a ContextModule.

33
00:02:28.860 --> 00:02:32.720
And I don't know why Tobias
chose context as the name.

34
00:02:32.720 --> 00:02:34.080
Really, it's like directory.

35
00:02:35.080 --> 00:02:37.439
That's what we mean by context.

36
00:02:37.439 --> 00:02:39.900
The path, the directory.

37
00:02:39.900 --> 00:02:41.700
So let's say, given this example,

38
00:02:41.700 --> 00:02:46.810
we have a set of themes that
are inside of a folder, right?

39
00:02:46.810 --> 00:02:50.190
And each of these has
an individual kind of theme defined

40
00:02:50.190 --> 00:02:51.530
in an ES module or whatever.

41
00:02:53.200 --> 00:02:56.530
So, Webpack, what we're telling it to do,
we're basically saying, hey, Webpack,

42
00:02:58.050 --> 00:03:03.180
take this partial path and find all the
possible modules that can resolve in it

43
00:03:04.980 --> 00:03:09.000
and create individual bundles for
them, right?

44
00:03:10.420 --> 00:03:11.530
Does that make sense so far?

45
00:03:12.990 --> 00:03:16.360
So it's not dynamic, it's still static.

46
00:03:16.360 --> 00:03:18.838
Everything that we're doing,
we're creating these chunks at build time.

47
00:03:18.838 --> 00:03:23.420
So, dynamic, right?

48
00:03:23.420 --> 00:03:26.030
You can never do it with
just a variable alone.

49
00:03:26.030 --> 00:03:30.330
In fact, I'll show you in a second when
we will write an example like this.

50
00:03:32.430 --> 00:03:35.200
But I'll show, in fact,
that we throw a warning and

51
00:03:35.200 --> 00:03:38.730
it doesn't really work when you try
to use it with just a variable.

52
00:03:41.260 --> 00:03:43.478
And so you might be like,
so when do we use this?

53
00:03:43.478 --> 00:03:49.180
Who here has to write AB tests, right?

54
00:03:49.180 --> 00:03:51.859
You probably all have to.

55
00:03:51.859 --> 00:03:53.550
Now here's the next question.

56
00:03:53.550 --> 00:03:59.750
Who here has to load both
of their tests at runtime?

57
00:03:59.750 --> 00:04:01.406
Typically, when you're doing AB tests,

58
00:04:01.406 --> 00:04:04.050
you end up having to ship any
scenario up front, right?

59
00:04:04.050 --> 00:04:09.679
You don't need to, but that's
probably contributing to unused code.

60
00:04:09.679 --> 00:04:11.843
Because if you're only
going through one scenario,

61
00:04:11.843 --> 00:04:13.920
you show me load the one UI piece for
that scenario.

62
00:04:15.460 --> 00:04:16.351
And you can do it lazily.

63
00:04:18.565 --> 00:04:21.931
&gt;&gt; Sean Larkin: Theming, just like you
saw in that example, it's a great way.

64
00:04:21.931 --> 00:04:23.720
And it's just convenience, right?

65
00:04:23.720 --> 00:04:31.000
Because if you look back at this, we could
write this code using just static, right?

66
00:04:31.000 --> 00:04:33.360
We would just have a lot more
code to work with, right?

67
00:04:33.360 --> 00:04:38.030
We'd have to say get stylish theme equals
the direct path, without a variable.

68
00:04:38.030 --> 00:04:41.400
Get whatever theme equals,

69
00:04:41.400 --> 00:04:45.390
it's kind of a convenience feature, but
it also is really expressive, right?

70
00:04:46.670 --> 00:04:49.638
And it helps remove duplication.

71
00:04:49.638 --> 00:04:51.709
And it's just easier to wrap.

72
00:04:51.709 --> 00:04:53.710
For me,
it's easier to do something like this.

