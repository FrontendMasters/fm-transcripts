WEBVTT

1
00:00:00.070 --> 00:00:02.780
&gt;&gt; Sean Larkin: Now, you'll also
see something called webpackMode.

2
00:00:02.780 --> 00:00:04.736
And you'll be like what is this?

3
00:00:04.736 --> 00:00:06.913
So this is another feature.

4
00:00:06.913 --> 00:00:10.795
And I actually just recently
discovered there's some cool build time

5
00:00:10.795 --> 00:00:13.944
optimizations that you can use for this.
&gt;&gt; Sean Larkin: But

6
00:00:13.944 --> 00:00:19.590
I'm just gonna kind of explain
how each of them work.

7
00:00:19.590 --> 00:00:22.730
And there are some scenarios
where they're really valuable and

8
00:00:22.730 --> 00:00:24.570
some where it's less valuable.

9
00:00:24.570 --> 00:00:28.228
So you also have the ability
to kinda even control,

10
00:00:28.228 --> 00:00:32.154
using webpackMode,
how the code splitting happens.

11
00:00:32.154 --> 00:00:38.426
Now, a really good example of this is,
so there's a couple settings.

12
00:00:38.426 --> 00:00:45.087
So lazy is default, so it's the default
behavior of code splitting.

13
00:00:45.087 --> 00:00:47.968
And then there's one called lazy-once.

14
00:00:47.968 --> 00:00:52.681
I think lazy-once is really cool
because you can use it in dev mode for

15
00:00:52.681 --> 00:00:54.235
build speed, right.

16
00:00:54.235 --> 00:00:59.163
Because the more lazy chunks you make, you
have this linear time complexity, right,

17
00:00:59.163 --> 00:01:01.990
because you have to create more bundles.

18
00:01:01.990 --> 00:01:05.770
Webpack has to scan these bundles to
optimize where the module should be

19
00:01:05.770 --> 00:01:06.274
placed.

20
00:01:06.274 --> 00:01:10.669
And so there is a smaller
trade-off in build time,

21
00:01:10.669 --> 00:01:13.747
the more lazy chunks that you make.

22
00:01:13.747 --> 00:01:18.045
I mean, it's a very justifiable trade-off,
in my opinion.

23
00:01:18.045 --> 00:01:20.182
Lazy-once, for example,

24
00:01:20.182 --> 00:01:25.770
if you added webpackMode,
&gt;&gt; Sean Larkin: in here.

25
00:01:25.770 --> 00:01:27.641
And you can either do a comment or

26
00:01:27.641 --> 00:01:31.689
you can break it down as multiline,
&gt;&gt; Sean Larkin: Some people like

27
00:01:31.689 --> 00:01:41.366
the multiline, so we can try that.
&gt;&gt; Sean Larkin: And

28
00:01:41.366 --> 00:01:47.090
so let's say if I set it to lazy-once.

29
00:01:52.995 --> 00:01:55.045
&gt;&gt; Sean Larkin: Now, well, actually, no,

30
00:01:55.045 --> 00:01:57.100
let's not do it for this one.

31
00:01:57.100 --> 00:01:59.650
Let's use it in a different
statement because it's not relevant.

32
00:01:59.650 --> 00:02:04.295
So what it does is it takes any code
splitting that occurs that's marked with

33
00:02:04.295 --> 00:02:07.860
lazy-once, is put into one bundle, right.

34
00:02:07.860 --> 00:02:12.067
It's really viable for
things like when you're using context,

35
00:02:12.067 --> 00:02:16.602
context modules
&gt;&gt; Sean Larkin: And

36
00:02:16.602 --> 00:02:19.144
you had webpackMode and

37
00:02:19.144 --> 00:02:25.668
you put lazy-once.
&gt;&gt; Sean Larkin: When

38
00:02:25.668 --> 00:02:30.453
you run your code,
&gt;&gt; Sean Larkin: You'll actually see less

39
00:02:30.453 --> 00:02:35.458
bundles created, right.
&gt;&gt; Sean Larkin: So

40
00:02:35.458 --> 00:02:38.540
now you don't have the five
individual bundles.

41
00:02:38.540 --> 00:02:42.770
And I should actually just delete this and
we can look at it.

42
00:02:42.770 --> 00:02:43.550
I'll build again.

43
00:02:44.970 --> 00:02:46.930
So you still get that
asynchronous behavior, right,

44
00:02:46.930 --> 00:02:51.050
because it's coming from one single junc,
and it's lazy loaded.

45
00:02:51.050 --> 00:02:56.090
But any additional files from that
same bundle just come in right away,

46
00:02:56.090 --> 00:02:57.020
no network request.

47
00:02:58.500 --> 00:03:02.596
So this can either be something that you
profile and you analyze to see, well,

48
00:03:02.596 --> 00:03:08.540
is there kind of a runtime cost for
these small, small, small, lazy bundles?

49
00:03:08.540 --> 00:03:11.970
If there is, maybe it's valuable
to just have them in a single.

50
00:03:11.970 --> 00:03:14.495
Or for me,
I'm a little bit more strict on it,

51
00:03:14.495 --> 00:03:18.670
where I will only do it
if it's in dev mode.

52
00:03:18.670 --> 00:03:23.018
So there is a neat trick,
if we get time for it,

53
00:03:23.018 --> 00:03:27.598
basically using what we
call the DefinePlugin.

54
00:03:27.598 --> 00:03:33.950
You can wrap this code.
&gt;&gt; Sean Larkin: Where is it?

55
00:03:33.950 --> 00:03:36.186
There it is.
Okay, so I could say something like this.

56
00:03:36.186 --> 00:03:41.175
If process.env.NODE_ENV is

57
00:03:41.175 --> 00:03:46.532
equal to "development," I'll

58
00:03:46.532 --> 00:03:52.601
say this.
&gt;&gt; Sean Larkin: And then I'll say else.

59
00:03:52.601 --> 00:03:58.387
So if I'm in production,
I'm gonna basically write the same code,

60
00:03:58.387 --> 00:04:01.892
except not use the webpack mode, right.

61
00:04:01.892 --> 00:04:10.642
So webpack by default injects a macro
replacement to this variable.

62
00:04:10.642 --> 00:04:16.513
When you set mode to development,
this macro converts to development, right.

63
00:04:16.513 --> 00:04:21.070
So by default webpack can
evaluate this and drop the code,

64
00:04:21.070 --> 00:04:24.800
and drop the code branch
in the else statement.

65
00:04:26.110 --> 00:04:28.581
And in the same way,
if you set production mode,

66
00:04:28.581 --> 00:04:31.670
webpack would drop the code
inside of this logic statement.

67
00:04:31.670 --> 00:04:33.520
Does that makes sense?

68
00:04:33.520 --> 00:04:37.540
So, essentially,
you're able to get your build performance

69
00:04:37.540 --> 00:04:40.760
by having only created one lazy bundle for
a context module.

70
00:04:42.890 --> 00:04:48.050
I discovered that this was kind of
a cool trick working with Adobe and

71
00:04:48.050 --> 00:04:51.620
Behance, who was creating
thousands of locales and

72
00:04:51.620 --> 00:04:54.170
thousands of lazy loaded
bundles to load them.

73
00:04:54.170 --> 00:04:55.760
But the builds were like six minutes.

74
00:04:55.760 --> 00:05:02.102
So this cut their build time by,
&gt;&gt; Sean Larkin: Like 80% for

75
00:05:02.102 --> 00:05:04.014
their dev mode, right.

76
00:05:04.014 --> 00:05:10.890
Because this is a performance feature that
it's separated into individual bundles.

77
00:05:10.890 --> 00:05:12.550
And so if you don't need them,
if you don't care.

78
00:05:12.550 --> 00:05:16.850
You really don't care about performance
optimizations in your dev mode, right.

79
00:05:18.360 --> 00:05:19.316
This is a neat trick.

80
00:05:19.316 --> 00:05:22.724
You can leverage it.
&gt;&gt; Sean Larkin: And

81
00:05:22.724 --> 00:05:24.530
I think it's very valuable.

82
00:05:25.570 --> 00:05:29.590
But, yeah, so
I'm just gonna check this out.

83
00:05:29.590 --> 00:05:34.510
And then we can talk about the last,
the newest, the latest and

84
00:05:34.510 --> 00:05:37.470
greatest, bleeding edge,
webpack magic comments.

