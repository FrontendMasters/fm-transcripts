WEBVTT

1
00:00:00.360 --> 00:00:03.140
&gt;&gt; Sean Larkin: So let's look
at a really simple example that,

2
00:00:04.340 --> 00:00:07.210
I try to portray what we're
trying to accomplish here.

3
00:00:08.240 --> 00:00:10.963
So it's kind of pseudo code.

4
00:00:10.963 --> 00:00:16.430
And so at the top here, we're importing
something called Listener, right?

5
00:00:16.430 --> 00:00:18.978
Just a module called Listener.

6
00:00:18.978 --> 00:00:23.479
And then down below, in the next line we
have this variable that's assigned to

7
00:00:23.479 --> 00:00:28.200
a function that returns a dynamic import
statement and a path to a module, right?

8
00:00:30.140 --> 00:00:32.950
And what's really important is that
it's assigned to a function that

9
00:00:32.950 --> 00:00:34.550
returns it, right?

10
00:00:34.550 --> 00:00:38.698
It's not equal to the import itself.

11
00:00:38.698 --> 00:00:42.741
And then so
we have some pseudo code here that says,

12
00:00:42.741 --> 00:00:47.635
when some event that
WarrenModalBeingLoaded is triggered,

13
00:00:47.635 --> 00:00:52.265
then we're actually gonna call
to getModal inside of it.

14
00:00:52.265 --> 00:00:56.606
And it returns a promise,
when we recall this function.

15
00:00:56.606 --> 00:00:59.310
And then we actually get the code itself,

16
00:00:59.310 --> 00:01:02.950
the module itself, and
we perform the functionality.

17
00:01:04.560 --> 00:01:06.748
Does that kinda make sense
even if it's pseudo code?

18
00:01:06.748 --> 00:01:08.365
Are you feeling comfortable with that?

19
00:01:08.365 --> 00:01:10.000
Does anybody have questions so far?

20
00:01:10.000 --> 00:01:12.530
Yeah, go ahead.
&gt;&gt; Speaker 2: Did you call the getModal

21
00:01:12.530 --> 00:01:13.770
a second time?

22
00:01:13.770 --> 00:01:18.466
Does it make a request or is it-
&gt;&gt; Sean Larkin: Remember when we looked at

23
00:01:18.466 --> 00:01:20.952
the webpack runtime yesterday,

24
00:01:20.952 --> 00:01:24.280
what was the first three lines of code?
&gt;&gt; Speaker 2: Yeah.

25
00:01:24.280 --> 00:01:25.320
&gt;&gt; Sean Larkin: You're right,

26
00:01:25.320 --> 00:01:26.840
the module cache, exactly.

27
00:01:26.840 --> 00:01:31.150
So answer is no,
it doesn't call a second time.

28
00:01:31.150 --> 00:01:35.788
It will request it but we find it in cache
first and we just get the module back.

29
00:01:35.788 --> 00:01:38.240
But that's a great question, absolutely.

30
00:01:38.240 --> 00:01:43.450
I will jump back to the code and
I'll show you an example

31
00:01:43.450 --> 00:01:48.430
with kind of the same context that we
have been working on, so all right.

32
00:01:50.150 --> 00:01:54.855
So let's say,
I think it's just fair to actually have

33
00:01:54.855 --> 00:01:58.247
the development experience running.

34
00:01:58.247 --> 00:02:02.454
So I'm gonna do yarn dev, and I fixed
presets in this branch, so it should work.

35
00:02:02.454 --> 00:02:08.280
Yeah, okay, let me pull up side by side so
we can see it.

36
00:02:08.280 --> 00:02:14.810
Okay, so let's just say,
I'll give this scenario.

37
00:02:14.810 --> 00:02:21.470
Let's say we don't want to show
the footer until we hit a button, right?

38
00:02:22.620 --> 00:02:27.480
So the naive approach
might just be setting some

39
00:02:27.480 --> 00:02:33.150
styles or some attributes or
not even having it on the dom.

40
00:02:33.150 --> 00:02:37.262
And then on the button click,
then actually calling code,

41
00:02:37.262 --> 00:02:38.998
I just trying code this.

42
00:02:38.998 --> 00:02:46.122
So for example, I could say,
since our button is right here,

43
00:02:46.122 --> 00:02:51.061
we wanna do it after it's actually added.

44
00:02:51.061 --> 00:02:55.419
So button.addEventListener("click"), and

45
00:02:55.419 --> 00:03:01.303
then there is our event.
&gt;&gt; Sean Larkin: Okay.

46
00:03:03.850 --> 00:03:05.104
&gt;&gt; Sean Larkin: So I think the naive

47
00:03:05.104 --> 00:03:08.557
approach would just be
saying something like this,

48
00:03:08.557 --> 00:03:13.050
we just moved the document
body.appendChild up, right?

49
00:03:13.050 --> 00:03:15.920
And then boom, sounds good?

50
00:03:17.000 --> 00:03:18.720
But think about the problem here.

51
00:03:18.720 --> 00:03:20.980
So there's our functionality,
but can we do better?

52
00:03:20.980 --> 00:03:25.530
Can we even not even load the footer code?

53
00:03:25.530 --> 00:03:31.730
Yes, absolutely, the whole point is that
even though we aren't showing this and

54
00:03:31.730 --> 00:03:36.740
adding it to the dom,
we can look and see that in our

55
00:03:36.740 --> 00:03:41.530
actual code itself like our
bundle includes this code.

56
00:03:41.530 --> 00:03:45.031
And we don't need it.

57
00:03:45.031 --> 00:03:48.180
So let's see, I bet we could find it.

58
00:03:49.480 --> 00:03:53.530
Essentially, it's module [SOUND], right?

59
00:03:53.530 --> 00:03:56.320
We can actually see it
with the decorations.

60
00:03:56.320 --> 00:04:00.420
So here's our footer code right here.

61
00:04:00.420 --> 00:04:01.330
We don't need this upfront.

62
00:04:03.470 --> 00:04:08.670
So the process of code
splitting is actually calling

63
00:04:08.670 --> 00:04:13.630
that module and having it loaded inside
of here, in this addEventListener.

64
00:04:13.630 --> 00:04:20.427
So what we're gonna do is we're gonna
actually remove the footer call, right?

65
00:04:20.427 --> 00:04:24.642
And there's two ways
that you can write this.

66
00:04:24.642 --> 00:04:30.640
So I'll do the first way and then I'll
show you how you make it more reusable.

67
00:04:30.640 --> 00:04:33.530
Cuz you may wanna call or
have this functionality multiple times.

68
00:04:33.530 --> 00:04:38.689
So the first way would say,
you could just use the dynamic

69
00:04:38.689 --> 00:04:44.750
import statement right here and
say ("./footer").then.

70
00:04:44.750 --> 00:04:47.540
So webpack takes this dynamic import,

71
00:04:47.540 --> 00:04:51.860
and according to the spec, it converts
into a promise behind the scenes.

72
00:04:51.860 --> 00:04:55.680
So this is gonna return a promise
when you use a statement.

73
00:04:57.110 --> 00:05:00.468
And then what you get is actually is
the module itself, just as if you were

74
00:05:00.468 --> 00:05:04.340
accessing one of the named exports, except
you get the default export by default.

75
00:05:04.340 --> 00:05:08.924
So I could say something
like defaultExport.

76
00:05:12.400 --> 00:05:17.890
Some people say like footerModule,
but you can name it whatever you want.

77
00:05:17.890 --> 00:05:23.929
And what we'd say is
document body.appendChild,

78
00:05:23.929 --> 00:05:29.291
we would say footerModule.footer, right?

79
00:05:29.291 --> 00:05:33.430
So now, we retained our functionality,
nothing has changed.

80
00:05:33.430 --> 00:05:40.661
Except, if I was to reload this page and

81
00:05:40.661 --> 00:05:47.930
we look at our network request, oops.

82
00:05:47.930 --> 00:05:51.350
Now, you notice that
when I hit that button,

83
00:05:51.350 --> 00:05:53.550
there is a second JavaScript
file that gets loaded.

84
00:05:55.600 --> 00:05:57.310
This file only contains your footer code.

85
00:05:57.310 --> 00:06:00.290
And we can identify that here.

86
00:06:00.290 --> 00:06:05.820
So if we look inside of this network
panel, you can actually see right there.

87
00:06:06.890 --> 00:06:07.430
There is your footer.

88
00:06:09.140 --> 00:06:09.959
Does that make sense?

89
00:06:11.920 --> 00:06:13.240
This is code splitting.

90
00:06:14.660 --> 00:06:18.118
Nothing else is code splitting,
but this process right here.

91
00:06:18.118 --> 00:06:23.198
And so
&gt;&gt; Sean Larkin: I think the only

92
00:06:23.198 --> 00:06:28.078
thing that was new to me to get
used to was understanding that

93
00:06:28.078 --> 00:06:33.560
you're introducing asynchronous
behavior into your code base.

94
00:06:33.560 --> 00:06:37.780
And I mean,
in this case it's a good thing, right?

95
00:06:37.780 --> 00:06:43.170
Because you're usually code
splitting on asynchronous events.

96
00:06:43.170 --> 00:06:46.600
It's happening on a callback.

97
00:06:46.600 --> 00:06:50.130
Or it's happening whenever
another route is visited.

98
00:06:50.130 --> 00:06:52.690
And so it works well together.

99
00:06:52.690 --> 00:06:58.740
So let's say if you want to reuse this,
you could instead take and just say.

100
00:06:59.890 --> 00:07:03.518
Instead of doing the exact call,

101
00:07:03.518 --> 00:07:08.568
what I like to do is,
I just like to say up here,

102
00:07:08.568 --> 00:07:12.600
what would be the best way to do this?

103
00:07:12.600 --> 00:07:18.130
So a common pattern for me, is I will
take in just rename the exact identifier.

104
00:07:18.130 --> 00:07:23.479
So const footer instead of import footer
= a function that returns a dynamic

105
00:07:23.479 --> 00:07:29.316
import
&gt;&gt; Sean Larkin: Sometimes I say like,

106
00:07:29.316 --> 00:07:30.470
get footer.

107
00:07:30.470 --> 00:07:31.280
So this is up to you.

108
00:07:31.280 --> 00:07:32.240
You can name it whatever you want.

109
00:07:33.440 --> 00:07:36.640
I'll use get footer because then it's
a little bit more easy to understand as

110
00:07:36.640 --> 00:07:39.860
a user, or if somebody diving into
my code base for the first time.

111
00:07:41.930 --> 00:07:43.900
So this is the same thing, but

112
00:07:43.900 --> 00:07:48.530
the beauty is that now you can actually
call this function multiple times.

113
00:07:49.650 --> 00:07:52.440
And just like I explained
earlier to Jesse is that,

114
00:07:53.850 --> 00:07:59.090
if you were to call this again, it's

115
00:07:59.090 --> 00:08:03.130
not going to refetch the network request,
it's gonna look into the module cache.

116
00:08:04.810 --> 00:08:09.540
So what I wanna do is actually show you,
and I wanna walk through the code.

117
00:08:09.540 --> 00:08:13.270
Here, let's hit the button, there we go.

118
00:08:13.270 --> 00:08:16.978
And you can see, even if I hit the button
multiple times, nothing happens, right?

119
00:08:16.978 --> 00:08:19.190
It's just reaching into that bundle again.

