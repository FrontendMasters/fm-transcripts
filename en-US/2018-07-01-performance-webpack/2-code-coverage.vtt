WEBVTT

1
00:00:00.130 --> 00:00:02.690
&gt;&gt; Sean: Before I talk about code
splitting, I wanna actually give you

2
00:00:02.690 --> 00:00:07.590
a demo of how you can determine
your code coverage, right?

3
00:00:07.590 --> 00:00:11.780
So, what I want you to do
is maybe pull up a website.

4
00:00:11.780 --> 00:00:15.851
I'm gonna pull up, let's say, mm-hm,

5
00:00:15.851 --> 00:00:21.070
let's see, what's a great
website that showcases this?

6
00:00:21.070 --> 00:00:25.280
Here, we'll do one, I used to work for
mutualofomaha.com or

7
00:00:25.280 --> 00:00:27.710
Mutual of Omaha and
we did an entire site redesign.

8
00:00:28.720 --> 00:00:32.132
It's a multipage app
architecture using Vue JS for

9
00:00:32.132 --> 00:00:37.220
any of the front-end assets and then
it is using Laravel PHP in the backend.

10
00:00:37.220 --> 00:00:41.108
So you can see this was actually
relatively fast to load,

11
00:00:41.108 --> 00:00:45.660
I'll reset it, and
it progressively loads, right?

12
00:00:45.660 --> 00:00:51.410
So let's find out and inspect, so,
you can open up Chrome Dev Tools.

13
00:00:52.740 --> 00:00:55.400
If you don't have Chrome Dev Tools,
you can follow along or

14
00:00:55.400 --> 00:00:59.429
take notes, but currently,
today this is the only feature

15
00:01:00.470 --> 00:01:05.030
in any browser that allows you
to test this coverage metric.

16
00:01:05.030 --> 00:01:09.816
So, when you open up Dev Tools,
you just wanna hit Ctrl or Cmd + P,

17
00:01:09.816 --> 00:01:13.420
and you'll see the little command palette.

18
00:01:13.420 --> 00:01:18.630
I'm sorry, Shift + Ctrl or Shift + Ctrl
+ P or Shift + Cmd + P, there we go.

19
00:01:20.020 --> 00:01:22.960
And you just wanna type in coverage.

20
00:01:22.960 --> 00:01:27.190
And you'll see the first item that shows
up there says, Drawer Show Coverage.

21
00:01:28.560 --> 00:01:33.790
So when this pops up,
you'll see some dialog here and

22
00:01:33.790 --> 00:01:36.090
all you have to do is
click this little reload

23
00:01:37.300 --> 00:01:42.353
icon.
&gt;&gt; Sean: So now you'll see here,

24
00:01:42.353 --> 00:01:47.685
is that instantly you can identify
how much code was used across

25
00:01:47.685 --> 00:01:52.990
this entire application for
this initial view, right?

26
00:01:52.990 --> 00:01:56.610
So, as you can tell here,

27
00:01:56.610 --> 00:02:01.100
we can identify right away,
this is a huge opportunity for this team.

28
00:02:01.100 --> 00:02:06.520
I was just talking to them last
night cuz I was doing an audit, and

29
00:02:06.520 --> 00:02:10.650
I said, dude, why are you not
using 62% of the code right here?

30
00:02:12.210 --> 00:02:12.920
What's going on?

31
00:02:12.920 --> 00:02:17.110
And so now, the one caviar, or
the one thing that frustrates me is that

32
00:02:18.170 --> 00:02:21.110
unless you have full
source mapping turned on,

33
00:02:21.110 --> 00:02:26.090
trying to identify what the unused
code is, is not very friendly.

34
00:02:27.490 --> 00:02:29.790
And this is what I want to solve for

35
00:02:29.790 --> 00:02:33.670
Microsoft Edge,
I have a full specification written

36
00:02:33.670 --> 00:02:38.830
bringing this feature to Edge after we
finish our remote dev tooling work.

37
00:02:38.830 --> 00:02:42.650
But the kicker is,
what if you could just take a web pack

38
00:02:42.650 --> 00:02:46.850
bundle analyzer status data,
and bind it to this?

39
00:02:46.850 --> 00:02:50.390
The dev tools could consume, and
then, you really have a graph

40
00:02:50.390 --> 00:02:55.800
that shows red borders around the modules
that aren't actually used, right?

41
00:02:55.800 --> 00:02:59.250
It's instant easy opportunity to identify.

42
00:03:00.340 --> 00:03:04.210
So we can kinda see that there are areas,
what was it?

43
00:03:04.210 --> 00:03:08.140
I can't remember exactly
what the code was,

44
00:03:08.140 --> 00:03:12.680
but you can see here the red and green
lines are gonna give you the opportunity

45
00:03:12.680 --> 00:03:16.700
to identify, what is used and
what is not used.

46
00:03:16.700 --> 00:03:22.490
And so for now it's not the best way,
it a little time consuming.

47
00:03:22.490 --> 00:03:25.715
But if you do have
pre-staging environment,

48
00:03:25.715 --> 00:03:31.300
you could maybe ship your code unminified,
it's make it easier to see.

49
00:03:31.300 --> 00:03:35.370
Or just have full source
mapping turned on.

50
00:03:35.370 --> 00:03:37.590
And so in this case, what was it?

51
00:03:39.230 --> 00:03:43.230
There were some legacy JavaScript
files that they had to include for

52
00:03:43.230 --> 00:03:50.730
custom analytics and
they told me that, yeah, why is this?

53
00:03:50.730 --> 00:03:51.840
Okay, so here we go.

54
00:03:51.840 --> 00:03:55.840
So it looks like there is some library
that's used to do a bunch of web GL that

55
00:03:55.840 --> 00:03:56.590
is not needed.

56
00:03:57.770 --> 00:04:00.698
That's probably taking
a considerable amount of time,

57
00:04:00.698 --> 00:04:04.570
gonna be like none of this is used.

58
00:04:04.570 --> 00:04:08.095
And it's pulling in a whole
bunch of shaders and like what?

59
00:04:08.095 --> 00:04:13.673
So, this has will be an opportunity,
at least if doesn't tell you right away,

60
00:04:13.673 --> 00:04:16.839
it's hey, these are pretty obvious flags,

61
00:04:16.839 --> 00:04:20.189
maybe you were shipping
too much code upfront.

62
00:04:20.189 --> 00:04:23.960
I mean,
I'm being hard on my former team, but

63
00:04:23.960 --> 00:04:30.080
really look at the total amount
of code that they shipped, right?

64
00:04:30.080 --> 00:04:32.520
It's only about 700 kilobytes.

65
00:04:32.520 --> 00:04:38.940
Now this isn't bad, what they should
be doing is maybe set a standard in

66
00:04:38.940 --> 00:04:44.240
their CI pipeline that just breaks their
build if they go over what they are today.

67
00:04:44.240 --> 00:04:49.060
And so every PR that they make they can
try and lower that barrier every time.

68
00:04:50.420 --> 00:04:52.870
And so that way you have standards,

69
00:04:52.870 --> 00:04:56.750
or performances as a standard just
comes as a first class citizen.

70
00:04:56.750 --> 00:05:00.370
Is just another thing that you do and
you always are concerned about.

71
00:05:01.410 --> 00:05:09.710
So, now when you think about this, so when
I talked about, whereas the, let me see.

72
00:05:09.710 --> 00:05:14.750
So when I talk about these numbers here,
when I say 90% code coverage,

73
00:05:14.750 --> 00:05:19.615
I say that, oops.
&gt;&gt; Sean: You wanna have

74
00:05:19.615 --> 00:05:21.296
this number to be about 10%.

75
00:05:21.296 --> 00:05:23.273
You can't really see it, but

76
00:05:23.273 --> 00:05:28.255
essentially you wanna have out of all
the resources that we're shipping,

77
00:05:28.255 --> 00:05:33.810
JavaScript and CSS, you wanna be using
90% of it, even 80% is a good metric.

78
00:05:35.680 --> 00:05:39.280
But, the reason why I say this
is because if JavaScript and

79
00:05:39.280 --> 00:05:44.590
CSS are the most costly things to load,
and

80
00:05:44.590 --> 00:05:48.090
only half of your code
is actually being used.

81
00:05:50.100 --> 00:05:53.270
You have the instant low hanging fruit
that you can reduce to have a faster

82
00:05:53.270 --> 00:05:54.520
page, right?

83
00:05:54.520 --> 00:05:58.472
So and I'm gonna show you how

84
00:05:58.472 --> 00:06:02.613
Webpack helps enable this.
&gt;&gt; Speaker 2: Quick

85
00:06:02.613 --> 00:06:03.358
question.
&gt;&gt; Sean: Go ahead.

86
00:06:03.358 --> 00:06:08.340
&gt;&gt; Speaker 2: Let's say they had a megabit

87
00:06:08.340 --> 00:06:12.070
of JavaScript-
&gt;&gt; Sean: Absolutely.

88
00:06:12.070 --> 00:06:12.830
&gt;&gt; Speaker 2: And 15%

89
00:06:12.830 --> 00:06:13.931
of it was unused.
&gt;&gt; Sean: Yes.

90
00:06:13.931 --> 00:06:15.073
&gt;&gt; Speaker 2: What kind of load-time

91
00:06:15.073 --> 00:06:16.620
reduction would you be seeing?

92
00:06:16.620 --> 00:06:20.122
Are we talking like, fractions,

93
00:06:20.122 --> 00:06:23.422
10ths of milliseconds?
&gt;&gt; Sean: No,

94
00:06:23.422 --> 00:06:28.160
you could have like a second, two seconds.

95
00:06:28.160 --> 00:06:31.780
You can significantly reduce
the amount of time your page loads.

96
00:06:31.780 --> 00:06:35.316
What was it?
&gt;&gt; Speaker 2: This one's different for

97
00:06:35.316 --> 00:06:37.442
mobile versus.
&gt;&gt; Sean: Yeah, well I mean,

98
00:06:37.442 --> 00:06:42.183
especially mobile too, mobile even gets
more, you'll see more reduction because

99
00:06:42.183 --> 00:06:46.188
those are the devices that struggle
the most when it comes to parsing and

100
00:06:46.188 --> 00:06:49.750
evaluating and executing
JavaScript through the V8 Engine.

101
00:06:51.480 --> 00:06:57.401
So much that even the temperature of that
device can affect how slow it takes.

102
00:06:57.401 --> 00:07:01.157
If you have a hot phone, so
I was working with the flip cart and

103
00:07:01.157 --> 00:07:05.874
the housing.com teams who they're
market is India and they literally have

104
00:07:05.874 --> 00:07:11.240
to test on every single device to make
sure they are performing as possible.

105
00:07:11.240 --> 00:07:16.930
And they found through their testing
that even when their phones heat up,

106
00:07:16.930 --> 00:07:22.080
they were seeing a two to three second
load time drop or increase in their pages.

107
00:07:22.080 --> 00:07:25.990
And so, even mobile devices,
especially these 2G and

108
00:07:25.990 --> 00:07:29.770
3G in emerging markets
are not that sophisticated.

109
00:07:29.770 --> 00:07:32.693
Nobody is rocking the pixel or
anything like that, and so,

110
00:07:32.693 --> 00:07:34.450
if you're trying to reach people.

111
00:07:34.450 --> 00:07:37.963
Or even people in rural areas, I mean,

112
00:07:37.963 --> 00:07:44.460
it's super important to be able
to ship a super-fast experience.

113
00:07:44.460 --> 00:07:50.450
And it's not that you need a megabyte of
code to deliver that initial experience.

114
00:07:50.450 --> 00:07:53.710
That's what the code
coverage really kind of

115
00:07:55.350 --> 00:07:59.930
unveils, it's you only need about
a tenth of this code, right?

116
00:08:01.060 --> 00:08:04.570
And the idea is just understanding
how we can reduce it.

