WEBVTT

1
00:00:00.030 --> 00:00:05.670
&gt;&gt; Sean Larkin: That would be
essentially the entirety of I would say

2
00:00:05.670 --> 00:00:12.221
I've exhausted code splitting
[LAUGH] to the maximum level.

3
00:00:12.221 --> 00:00:14.833
If you're creating
something like a component

4
00:00:14.833 --> 00:00:18.549
library,
&gt;&gt; Sean Larkin: I think the only other

5
00:00:18.549 --> 00:00:22.645
thing that I would encourage you
to consider is that if you are,

6
00:00:22.645 --> 00:00:26.990
think about how View makes
code-splitting first class, right?

7
00:00:28.770 --> 00:00:34.310
So this can be adapted to any other
library code that you want, right?

8
00:00:34.310 --> 00:00:38.250
If you,
a great example is Excalibur, right?

9
00:00:38.250 --> 00:00:41.977
So I'm sure that there are a lot pieces as
a part of Engine that might not get used

10
00:00:41.977 --> 00:00:43.810
right away, right?

11
00:00:43.810 --> 00:00:47.320
So or that only happened lazily.

12
00:00:47.320 --> 00:00:50.240
So the analogy could be while Engine,

13
00:00:51.780 --> 00:00:56.840
instead of shipping something under the
hood automatically when an event happens.

14
00:00:56.840 --> 00:00:58.760
Maybe take and

15
00:00:58.760 --> 00:01:04.740
allow a user to use a dynamic import
to load a piece that's required.

16
00:01:04.740 --> 00:01:07.400
And then,
as a part of instantiating Engine,

17
00:01:07.400 --> 00:01:10.940
you pass that piece in
as a dynamic import.

18
00:01:10.940 --> 00:01:15.130
So that way, when that event occurs, you
just made first class code-splitting for

19
00:01:15.130 --> 00:01:18.500
your library and
make the pieces really modular.

20
00:01:18.500 --> 00:01:22.997
So if somebody wants to focus
on performance in your library,

21
00:01:22.997 --> 00:01:27.579
having the ability to pass in in
your API surface a function that

22
00:01:27.579 --> 00:01:30.964
returns a dynamic import
is really powerful.

23
00:01:30.964 --> 00:01:35.382
But that's really the last I can,
if you have more questions about that or

24
00:01:35.382 --> 00:01:39.310
wanna see examples,
I'm happy to show you sometime.

25
00:01:39.310 --> 00:01:42.370
But I think we've exhausted
code-splitting, right?

26
00:01:42.370 --> 00:01:45.986
Does anybody have any
final questions about it?

27
00:01:45.986 --> 00:01:52.110
The reason why I emphasize it so much is
because literally code-splitting exists

28
00:01:52.110 --> 00:01:56.640
to solve performance, and to solve
the number one problem of performance,

29
00:01:56.640 --> 00:01:59.730
which is the amount of JavaScript you
ship on your initial experience, right?

30
00:02:01.010 --> 00:02:05.023
So if there aren't any questions,
I'm just gonna go ahead and, I mean,

31
00:02:05.023 --> 00:02:09.192
if there are just shoot them at me, and
I will go ahead and check this branch.

