WEBVTT

1
00:00:00.070 --> 00:00:02.340
&gt;&gt; Sean Larkin: So here our goals.

2
00:00:02.340 --> 00:00:04.560
Now, don't want you all
to feel intimidated.

3
00:00:04.560 --> 00:00:10.134
I don't want you to think like, my gosh,
I can't do this, this is such a high bar.

4
00:00:10.134 --> 00:00:18.810
But this is, what I've found in my
research in the real-world examples today.

5
00:00:18.810 --> 00:00:22.830
If you want a high
performance web application

6
00:00:22.830 --> 00:00:27.320
that not only can be fast
loading on a computer.

7
00:00:27.320 --> 00:00:33.544
But fast loading on a mobile device,
even fast loading in emerging markets.

8
00:00:33.544 --> 00:00:35.715
If you're catering your product or

9
00:00:35.715 --> 00:00:40.260
you're trying to reach
consumers in Africa, in India.

10
00:00:40.260 --> 00:00:47.240
In even places in China and Japan,
you need to be able to have an extremely

11
00:00:47.240 --> 00:00:51.120
small amount of JavaScript that you
shipping on your initial experience.

12
00:00:51.120 --> 00:00:56.497
And from the most case I found that
really, it's only about 200-300

13
00:00:56.497 --> 00:01:01.131
kilobytes uncompressed to get
your initial experience loaded.

14
00:01:01.131 --> 00:01:05.726
So, 200 KB total from all
the JavaScript that you shipping,

15
00:01:05.726 --> 00:01:08.886
should be what you're targeting, right?

16
00:01:08.886 --> 00:01:13.397
And then 100 KB, uncompressed of CSS.

17
00:01:13.397 --> 00:01:16.159
And so
those are really the really small numbers.

18
00:01:16.159 --> 00:01:20.464
And I really wanna stress,
do not feel intimidated.

19
00:01:20.464 --> 00:01:24.282
One of the things that I've talked about
is that you can take and start like,

20
00:01:24.282 --> 00:01:26.790
let's say 500 kilobytes as you're goal.

21
00:01:26.790 --> 00:01:30.136
But I want you to keep these
numbers in mind as we're looking.

22
00:01:30.136 --> 00:01:34.935
We're understanding what we
can do to reduce the amount

23
00:01:34.935 --> 00:01:39.337
of initial resources that
our app has to download.

24
00:01:39.337 --> 00:01:45.608
And then, finally for H2 and Http,
6 for H1 I guess I could say.

25
00:01:45.608 --> 00:01:49.010
Six is the average, six to eight,
depending on the browser.

26
00:01:49.010 --> 00:01:53.640
And then for H2 around 20 to 35 sometimes

27
00:01:53.640 --> 00:01:56.280
50 depending on your
server infrastructure.

28
00:01:58.210 --> 00:02:02.494
And then finally,
one of the most important statistics.

29
00:02:02.494 --> 00:02:07.870
Which I think, people miss more than
anything is this code coverage.

30
00:02:07.870 --> 00:02:13.190
And there really is today only
one tool that can measure it and

31
00:02:13.190 --> 00:02:14.370
it's in Chrome dev tools.

32
00:02:15.520 --> 00:02:18.900
And so that's why, you know, like, John
why you loading Chrome if your work for

33
00:02:18.900 --> 00:02:20.530
the Edge team?

34
00:02:20.530 --> 00:02:24.630
And it's like, this is actually why,
because this specific tool I use for

35
00:02:24.630 --> 00:02:26.350
web performance auditing.

36
00:02:26.350 --> 00:02:30.057
And so, when I say 90% code coverage,
that means.

37
00:02:30.057 --> 00:02:35.039
When you download your initial
experience 90% of that code that you're

38
00:02:35.039 --> 00:02:37.500
shipping is actually used, right?

39
00:02:38.940 --> 00:02:40.280
Super important to think about.

