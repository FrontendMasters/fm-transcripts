WEBVTT

1
00:00:01.290 --> 00:00:03.220
&gt;&gt; Sean Larkin: So
now let's talk about Magic Comments.

2
00:00:03.220 --> 00:00:06.770
So magic comments is,
when we talk about magic comments,

3
00:00:06.770 --> 00:00:11.380
it's specifically for
the dynamic import statement.

4
00:00:11.380 --> 00:00:13.585
So I actually wanna pull
up the documentation,

5
00:00:13.585 --> 00:00:19.830
cuz I think it's really well written in
terms of what is going to explain to you.

6
00:00:19.830 --> 00:00:22.690
So if you went to, and if you wanna
bookmark this, I would encourage it.

7
00:00:24.060 --> 00:00:24.960
It's a great resource.

8
00:00:26.770 --> 00:00:30.454
So we go to have a leaf documentation,
and then guides.

9
00:00:31.785 --> 00:00:34.700
No, I'm sorry API, and
then module methods.

10
00:00:36.350 --> 00:00:40.250
So this actually shows you all of
the module methods we support, right?

11
00:00:40.250 --> 00:00:45.930
So not only just Export, there's
a common JS, we even show the AMD ones,

12
00:00:48.230 --> 00:00:55.190
like everything, which is really cool.

13
00:00:55.190 --> 00:01:00.650
Even the proprietary ones that
are webpacky, that you can choose to use.

14
00:01:00.650 --> 00:01:02.820
There's even some for
like server-side rendering,

15
00:01:02.820 --> 00:01:08.560
I don't think we'll have time to talk
about server side rendering stuff, but

16
00:01:08.560 --> 00:01:13.990
this feature literally was designed for
server cyber nine in.

17
00:01:13.990 --> 00:01:18.939
Anyways, so let's jump to magic comments.
&gt;&gt; Sean Larkin: I

18
00:01:18.939 --> 00:01:22.530
think [LAUGH], where do we have it, okay.

19
00:01:23.910 --> 00:01:29.356
Here we go, so,
&gt;&gt; Sean Larkin: One

20
00:01:29.356 --> 00:01:34.882
of the things that you'll notice, is that
when we use code splitting as a technique,

21
00:01:34.882 --> 00:01:39.230
there is no name that is created
when you add the bundle, right?

22
00:01:39.230 --> 00:01:44.200
Because it's not an entry point, and so
we can't give it some assigned name.

23
00:01:44.200 --> 00:01:49.230
And therefore, we used to be able
to do this with require.insure, and

24
00:01:49.230 --> 00:01:55.100
people really liked it, because when you
have, let's say, in our code base, we have

25
00:01:55.100 --> 00:02:01.160
now, if we run a Prog-Build.

26
00:02:01.160 --> 00:02:06.073
Prod, we look at our folder here,
we're gonna notice that we have

27
00:02:06.073 --> 00:02:11.050
a whole bunch of files that like,
you're, well, what's what?

28
00:02:11.050 --> 00:02:12.300
What is which feature?

29
00:02:12.300 --> 00:02:17.430
It's a little harder to debug,
and so, not as friendly for

30
00:02:17.430 --> 00:02:22.380
debugging in developer experience,
right, and

31
00:02:22.380 --> 00:02:26.680
we also wanted to have a little bit
more control over how we could split.

32
00:02:26.680 --> 00:02:30.270
And so, we added this feature
called magic comments.

33
00:02:30.270 --> 00:02:33.620
And simply what it is,
is adding a comment before the paths

34
00:02:33.620 --> 00:02:35.950
of the module that you're
dynamically importing.

35
00:02:35.950 --> 00:02:40.107
So as seen here,
&gt;&gt; Sean Larkin: And

36
00:02:40.107 --> 00:02:42.269
you can add additional features.

37
00:02:43.610 --> 00:02:48.320
Specific to what the bundle is, or
what modules get thrown into a bundle.

38
00:02:48.320 --> 00:02:51.750
Now, the one that's really popular
is the web pack chunk name.

39
00:02:51.750 --> 00:02:54.990
So this is really great,
if you wanna be able to name or

40
00:02:54.990 --> 00:02:57.490
label one of these lazy little bundles.

41
00:02:57.490 --> 00:03:01.964
So why don't we go and
just add this to one of our dynamic

42
00:03:01.964 --> 00:03:06.874
imports.
&gt;&gt; Sean Larkin: So

43
00:03:06.874 --> 00:03:12.086
we know that we have GIT folders equals
functions that returns the dynamic import,

44
00:03:12.086 --> 00:03:18.612
and we can add,
&gt;&gt; Sean Larkin: A comment here,

45
00:03:18.612 --> 00:03:22.904
in kinda like the JS doc style,
webpackChunkName, and

46
00:03:22.904 --> 00:03:26.300
I don't think we wrap it in quotes, right?

47
00:03:26.300 --> 00:03:28.240
No, we only do it for the second piece.

48
00:03:29.950 --> 00:03:32.210
And we would say,
like I would say, footer.

49
00:03:34.900 --> 00:03:40.313
So this is going to allow Webpack to
have some sort of heuristic that doesn't

50
00:03:40.313 --> 00:03:45.559
conflict with the dynamic loader speck or
the web wg loader speck, we into

51
00:03:45.559 --> 00:03:50.974
allow you to still have the features
that you would get from require ensure,

52
00:03:50.974 --> 00:03:55.741
but not break people's code, and
make it not standard approved.

53
00:03:55.741 --> 00:03:58.570
So that's why they're comments.

54
00:03:58.570 --> 00:04:03.230
And so, it's kind of a trade off,
and the decision we have to make.

55
00:04:03.230 --> 00:04:10.764
And so, let's build our production build,
so to allow this to be visible,

56
00:04:10.764 --> 00:04:15.723
we do have to make a slight
configuration change.

57
00:04:15.723 --> 00:04:19.500
Least as far as I know,
unless this feature is broken.

58
00:04:21.510 --> 00:04:26.110
So you'll be like Shawn,
how come you don't know this?

59
00:04:26.110 --> 00:04:28.440
It's typically I don't use
this feature a lot, myself.

60
00:04:28.440 --> 00:04:30.230
Other people find it incredibly valuable.

61
00:04:32.050 --> 00:04:37.950
So we would want to say,
output.chuckfilename.

62
00:04:37.950 --> 00:04:43.130
Chuck file name, and
I believe we'd wanna set name.

63
00:04:43.130 --> 00:04:44.990
So I actually use a special powdering.

64
00:04:44.990 --> 00:04:49.470
So when you wanna have a naming powder for
your lazy loaded chunks,

65
00:04:49.470 --> 00:04:52.710
like what we did for Mutual of Omaha,

66
00:04:52.710 --> 00:04:57.020
is that I actually decorate
them as lazy chunk.js.

67
00:04:57.020 --> 00:04:59.600
That way I know when I look
at any production code,

68
00:04:59.600 --> 00:05:01.110
I'm like, this a lazy loaded bundle.

69
00:05:02.690 --> 00:05:04.324
I believe we can add
the name helper template.

70
00:05:15.951 --> 00:05:16.820
&gt;&gt; Sean Larkin: There you go.

71
00:05:18.570 --> 00:05:25.517
So now, we have footer.lazy-chunk.js.
&gt;&gt; Sean Larkin: And

72
00:05:25.517 --> 00:05:30.564
if you didn't want to,
let's say you're like,

73
00:05:30.564 --> 00:05:33.940
okay, I value this all the time.

74
00:05:33.940 --> 00:05:36.864
Then you could keep it in
your base configuration.

75
00:05:38.052 --> 00:05:39.342
Some people choose,

76
00:05:39.342 --> 00:05:43.870
I think it was a, think it was housing,
maybe it was flip card.

77
00:05:43.870 --> 00:05:48.060
It was one of those, where they only did
this for production, cuz it's easier to.

78
00:05:48.060 --> 00:05:50.210
I'm sorry, only did it for development.

79
00:05:50.210 --> 00:05:57.700
But I mean, but that's exactly how you
would use the magic comments there.

80
00:05:58.970 --> 00:06:00.550
Webpack join name, there you go.

81
00:06:02.360 --> 00:06:04.350
I'll make this even larger.

82
00:06:04.350 --> 00:06:05.770
There we go, ginormous.

83
00:06:07.550 --> 00:06:10.440
And I'll jump back to it, yes.

84
00:06:10.440 --> 00:06:13.080
So since Webpack 2.6,
we've had this feature.

