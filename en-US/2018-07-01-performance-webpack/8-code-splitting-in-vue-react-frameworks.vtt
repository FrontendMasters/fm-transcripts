WEBVTT

1
00:00:00.719 --> 00:00:04.551
&gt;&gt; Connor: I remember you said something
yesterday about how it's specific based on

2
00:00:04.551 --> 00:00:06.419
what framework you're using too.

3
00:00:06.419 --> 00:00:10.168
Code splitting gets more complicated with,
say-

4
00:00:10.168 --> 00:00:11.993
&gt;&gt; Sean Larkin: It's very true, yes.

5
00:00:11.993 --> 00:00:14.230
&gt;&gt; Connor: Are you gonna
dive into that at all later?

6
00:00:14.230 --> 00:00:16.805
&gt;&gt; Sean Larkin: I can give,
I think it's fair for

7
00:00:16.805 --> 00:00:21.380
me to show an example of what that means.

8
00:00:21.380 --> 00:00:23.620
So like some, yeah, go ahead.

9
00:00:23.620 --> 00:00:25.154
&gt;&gt; Speaker 3: It was just more questions.

10
00:00:25.154 --> 00:00:26.020
&gt;&gt; Sean Larkin: Okay, okay.

11
00:00:26.020 --> 00:00:28.034
So you're absolutely right.

12
00:00:28.034 --> 00:00:32.270
There are some frameworks and
some libraries

13
00:00:32.270 --> 00:00:38.010
that,
&gt;&gt; Sean Larkin: How do I say this?

14
00:00:38.010 --> 00:00:42.707
Disregarded webpack as an important
tool that people use, and therefore

15
00:00:42.707 --> 00:00:48.260
missed the opportunity to make lazy
loading a first class citizen for them.

16
00:00:48.260 --> 00:00:52.316
And therefore it's a painful experience
to have a performing application.

17
00:00:52.316 --> 00:00:57.472
A great example of that is like angular.

18
00:00:57.472 --> 00:01:01.085
It takes about 14 files to
even lazy load something, and

19
00:01:01.085 --> 00:01:05.620
then it will even support component
by component lazy loading.

20
00:01:05.620 --> 00:01:08.700
You have to technically fake
a router outlet to even do it.

21
00:01:09.780 --> 00:01:13.700
And so it's like when you don't

22
00:01:14.970 --> 00:01:18.860
respect the contextual things, like what
are people using as a bundler, or if

23
00:01:18.860 --> 00:01:23.210
you don't make code splitting your first
class citizen, you make it really hard for

24
00:01:23.210 --> 00:01:29.321
your users to be able to create
performance web applications, right?

25
00:01:29.321 --> 00:01:34.802
But on the other hand, we have projects
like, I'll just open an example,

26
00:01:34.802 --> 00:01:38.289
cuz I think it's super
important to showcase.

27
00:01:41.565 --> 00:01:42.340
&gt;&gt; Sean Larkin: Let's see.

28
00:01:45.338 --> 00:01:48.710
&gt;&gt; Sean Larkin: Where we have vue.js.

29
00:01:48.710 --> 00:01:51.460
Where's that great example
that I used to have?

30
00:01:51.460 --> 00:01:53.410
Let's look in my 30 card folders.

31
00:01:55.180 --> 00:01:59.147
Let's see, view demo I think is fine.

32
00:02:04.219 --> 00:02:06.915
&gt;&gt; Sean Larkin: The most
beautiful thing about vue.js,

33
00:02:06.915 --> 00:02:09.386
I'll just give a very quick context.

34
00:02:09.386 --> 00:02:16.086
So long story short, so
vue has a single file component system.

35
00:02:16.086 --> 00:02:19.915
I'll even say that they decide to build on
webpack as a platform when they created

36
00:02:19.915 --> 00:02:21.300
their features.

37
00:02:21.300 --> 00:02:25.500
Single file components are powered by
a webpack loader, it's vue loader.

38
00:02:25.500 --> 00:02:28.860
And what they get is that it
allows them to write a single,

39
00:02:30.150 --> 00:02:33.140
you get to write a single
components style.

40
00:02:33.140 --> 00:02:37.690
Its scope and data, and
it's templating in a single file.

41
00:02:37.690 --> 00:02:39.280
The context is really nice.

42
00:02:40.340 --> 00:02:45.130
If you wanna use one custom component
in another, you have to register it.

43
00:02:45.130 --> 00:02:49.069
Now to do so, you just import
it like it's a module, right?

44
00:02:49.069 --> 00:02:53.504
Because behind the scenes, the loader
converts all of this to ESN modules.

45
00:02:53.504 --> 00:02:57.014
So when I say code splitting
is a first class citizen,

46
00:02:57.014 --> 00:03:01.772
I mean that, well, to register that
component, you would import it and

47
00:03:01.772 --> 00:03:07.500
then you take that imported reference and
you just bind it here in components.

48
00:03:07.500 --> 00:03:10.400
It's just a destructure syntax.

49
00:03:10.400 --> 00:03:13.830
So now that I've set this here,
I'm able to actually use

50
00:03:13.830 --> 00:03:16.450
this hello world component as
seen above in my custom template.

51
00:03:16.450 --> 00:03:18.230
Does that make sense so far?

52
00:03:18.230 --> 00:03:22.190
And don't sweat too much
about the view syntax.

53
00:03:22.190 --> 00:03:25.553
Just think about this is an API for
registering components, right?

54
00:03:25.553 --> 00:03:31.848
So when Evan You created this, he said,
well, not only can you take a component,

55
00:03:31.848 --> 00:03:37.507
like if I was to use an interface for
this and said, I like using interfaces

56
00:03:37.507 --> 00:03:42.741
because now that I do some typing stuff,
I feel it makes sense to me.

57
00:03:42.741 --> 00:03:49.725
So if I said interface,
&gt;&gt; Sean Larkin: RegisteredComponent,

58
00:03:49.725 --> 00:03:54.201
what it means is it takes
an instance of component or

59
00:03:54.201 --> 00:03:58.990
the component's property here,
takes a component or

60
00:03:58.990 --> 00:04:05.150
it takes a function that returns
a promise that resolves a component.

61
00:04:07.490 --> 00:04:09.190
So what does that mean?

62
00:04:09.190 --> 00:04:12.890
So it means that I literally
can comment this line,

63
00:04:12.890 --> 00:04:17.820
uncomment this line as long as
this is named the same thing.

64
00:04:17.820 --> 00:04:19.580
Wow, I just code split this component.

65
00:04:22.130 --> 00:04:26.040
With one line change, one line.

66
00:04:27.730 --> 00:04:32.650
You just instantly made it possible for
this to be loaded asynchronously.

67
00:04:32.650 --> 00:04:34.330
And what's the power?

68
00:04:34.330 --> 00:04:35.430
Sean, why does that matter?

69
00:04:36.610 --> 00:04:39.340
So for example, if this state here.

70
00:04:39.340 --> 00:04:40.960
So if you wanted to bind state.

71
00:04:40.960 --> 00:04:44.380
I don't even want, please don't
stress about the syntax itself.

72
00:04:46.950 --> 00:04:50.110
Let's say some state is false.

73
00:04:51.960 --> 00:04:56.688
And,
&gt;&gt; Sean Larkin: V-if is very

74
00:04:56.688 --> 00:05:01.280
similar AngularJS directives, right?

75
00:05:01.280 --> 00:05:03.700
And it compiles down to render functions,
like ReactOS.

76
00:05:05.000 --> 00:05:10.720
So if this is false,
this component never gets loaded, right?

77
00:05:10.720 --> 00:05:15.930
Because what it's equal to is
a function that returns the promise.

78
00:05:15.930 --> 00:05:23.160
So when at runtime, this state evaluates
to true, let's say some event changes it.

79
00:05:23.160 --> 00:05:28.750
Vue calls the function, which then go
fetches the bundle that has the component.

80
00:05:28.750 --> 00:05:31.030
This is first class code splitting.

81
00:05:33.440 --> 00:05:37.585
There is no other framework
today that does this.

82
00:05:37.585 --> 00:05:43.033
And it's almost ironic that another
grassroots organization that serves

83
00:05:43.033 --> 00:05:48.737
nothing but its users, like Vue, has
a really great integration with another

84
00:05:48.737 --> 00:05:54.716
grassroots open source project that serves
nobody but its users, like webpack.

85
00:05:54.716 --> 00:05:58.830
So just something you think about when you
choose your technologies in the future.

86
00:05:59.840 --> 00:06:01.620
Anyways, I'm biased.

87
00:06:01.620 --> 00:06:02.120
I'm biased.

88
00:06:03.130 --> 00:06:05.080
But yes,
this is first class code splitting.

89
00:06:05.080 --> 00:06:07.810
This is what excites me
because I see libraries and

90
00:06:07.810 --> 00:06:09.940
frameworks of the future building on this.

91
00:06:11.170 --> 00:06:15.910
This means that at any time you could slap
an app together with static imports and

92
00:06:15.910 --> 00:06:20.373
then go back one line at a time and
refactor everything to be high-performing.

93
00:06:20.373 --> 00:06:23.400
So this is first-class code splitting.

94
00:06:23.400 --> 00:06:26.440
There are other examples of
doing this in other libraries.

95
00:06:26.440 --> 00:06:31.220
So if you were using react,
there is react-loadable.

96
00:06:31.220 --> 00:06:36.220
It's made by Jamie Builds, or
Jamie Kyle, he goes by now.

97
00:06:36.220 --> 00:06:42.750
And essentially what this does is now
it's a little bit more boilerplate.

98
00:06:42.750 --> 00:06:44.570
It's not a first class experience.

99
00:06:44.570 --> 00:06:49.990
It's very close, though, is that you
can take and just import loadable.

100
00:06:49.990 --> 00:06:52.320
And then if you had a loader icon or

101
00:06:52.320 --> 00:06:55.720
spinning icon,
it allows you to bind that as well.

102
00:06:55.720 --> 00:07:00.730
But you create this component and
you can see here a function that

103
00:07:00.730 --> 00:07:04.620
returns a dynamic import, right, of your
react component that you wanna lazy load.

104
00:07:04.620 --> 00:07:07.950
And then all you have to do is
return that in your render function.

105
00:07:07.950 --> 00:07:10.270
Does that make sense?

106
00:07:10.270 --> 00:07:13.230
To people who know JSX, they're like,
yeah, this looks really clear.

107
00:07:13.230 --> 00:07:17.290
To me, I'm just like [LAUGH] I'm like,
okay, cool.

108
00:07:18.690 --> 00:07:19.900
Yeah, so

109
00:07:19.900 --> 00:07:26.400
this is the only really convenient
way I know how to do it with react.

110
00:07:26.400 --> 00:07:30.506
So that's what I mean when I say,
hopefully that answers your question.

111
00:07:30.506 --> 00:07:35.485
I kinda rambled and got a little
soapboxy there for a moment, Connor, but

112
00:07:35.485 --> 00:07:38.064
it's gonna differ for each library.

113
00:07:38.064 --> 00:07:38.842
&gt;&gt; Connor: Pretty concise.

114
00:07:38.842 --> 00:07:44.478
So in the spectrum of ease, Vue by
far the easiest to do code splitting,

115
00:07:44.478 --> 00:07:45.016
&gt;&gt; Sean Larkin: By far.

116
00:07:45.016 --> 00:07:48.100
&gt;&gt; Connor: React somewhere in the middle,
Angular.

117
00:07:48.100 --> 00:07:51.364
&gt;&gt; Sean Larkin: It is ncredibly painful,
yeah, both for the component level.

118
00:07:51.364 --> 00:07:54.422
I would say for routing,
they have it pretty well, but

119
00:07:54.422 --> 00:07:57.697
a lot of the times you can't
just split at the route level.

120
00:07:57.697 --> 00:08:00.450
You should be doing all
your temporal components,

121
00:08:00.450 --> 00:08:02.505
like what super cool is in the future.

122
00:08:02.505 --> 00:08:03.866
I see us having tools and

123
00:08:03.866 --> 00:08:08.163
utilities that see like,
this is a conditionally loaded component.

124
00:08:08.163 --> 00:08:12.810
Behind the scenes let's just try to
convert this to a dynamic import, right?

125
00:08:12.810 --> 00:08:16.570
Hopefully we see that, but
you're right, absolutely.

126
00:08:16.570 --> 00:08:21.260
Vue by far, and there are,
I'm trying to work with teams,

127
00:08:21.260 --> 00:08:25.520
like Preact and like even Hyperapp,

128
00:08:25.520 --> 00:08:29.060
if you've ever seen Hyperapp, it's a tiny,
tiny version, like smaller than Preact.

129
00:08:29.060 --> 00:08:30.530
They have a really cool API, and so

130
00:08:30.530 --> 00:08:34.270
I've been trying to tell them, hey,
can you make first class code splitting?

131
00:08:34.270 --> 00:08:37.770
I'm trying to work with these newer
frameworks that look like they could take

132
00:08:37.770 --> 00:08:44.510
off, because really, it's 11 lines of code
in your own internal library to handle.

133
00:08:44.510 --> 00:08:50.270
All you have to say is, is type of this
a function or is it a component instance?

134
00:08:50.270 --> 00:08:52.500
If it's a type of function,
resolve the promise.

