WEBVTT

1
00:00:00.000 --> 00:00:06.109
&gt;&gt; Sean Larkin: So, yeah, exercise time.
&gt;&gt; Sean Larkin: So

2
00:00:06.109 --> 00:00:10.416
let's go ahead, and
I'll take and I'll check this,

3
00:00:10.416 --> 00:00:14.267
I'm just gonna check out
a branch really quick.

4
00:00:14.267 --> 00:00:18.232
But what I want you to do while I'm
doing this is take and let's add,

5
00:00:18.232 --> 00:00:22.845
let's say I think a great example would
be to leverage button styles, right?

6
00:00:22.845 --> 00:00:29.394
Let's just say instead, go ahead and
create a folder called button-styles,

7
00:00:29.394 --> 00:00:35.699
well, we'll just do it together.
&gt;&gt; Sean Larkin: And

8
00:00:35.699 --> 00:00:37.154
inside of it, create a module.

9
00:00:37.154 --> 00:00:42.971
One is red.js, one is blue.js,

10
00:00:42.971 --> 00:00:48.587
each of the colors, so red.js,

11
00:00:48.587 --> 00:00:55.217
blue.js, green.js, yellow.js.

12
00:00:55.217 --> 00:00:57.756
Okay, that seems pretty good, that's fair.

13
00:00:57.756 --> 00:01:04.671
Okay, now let me just,
let me stop where we were at and

14
00:01:04.671 --> 00:01:09.305
check this code in, so let's see.

15
00:01:19.177 --> 00:01:20.568
&gt;&gt; Sean Larkin: Check out,

16
00:01:23.971 --> 00:01:26.489
&gt;&gt; Sean Larkin: 0501,

17
00:01:35.687 --> 00:01:37.286
&gt;&gt; Sean Larkin: Get,

18
00:01:44.471 --> 00:01:46.277
&gt;&gt; Sean Larkin: Awesome, okay, so,

19
00:01:46.277 --> 00:01:52.369
beautiful, hopefully that push is great,
okay, so back to where we were.

20
00:01:52.369 --> 00:01:58.142
Now let's take button-styles.js, and
really, what we're just gonna do here is,

21
00:01:58.142 --> 00:02:03.455
each of them will just be a default export
that kinda uses this pattern, right?

22
00:02:03.455 --> 00:02:06.260
So we'll keep this existing module in,

23
00:02:06.260 --> 00:02:09.895
cuz we don't wanna break
where we're at right now.

24
00:02:09.895 --> 00:02:13.754
But we could even start our dev mode,
right, and get the incremental changes and

25
00:02:13.754 --> 00:02:16.213
feedback from webpack as
we're trying to do this.

26
00:02:18.124 --> 00:02:21.096
&gt;&gt; Sean Larkin: So blue would be default,

27
00:02:21.096 --> 00:02:27.584
or export default,
&gt;&gt; Sean Larkin: "color: blue",

28
00:02:27.584 --> 00:02:30.740
all right, seems kinda nice.

29
00:02:31.790 --> 00:02:35.680
Got a little duplication here,
I mean, a little repetition.

30
00:02:36.870 --> 00:02:40.219
But I just wanna make
this easy to understand.

31
00:02:40.219 --> 00:02:43.586
Color red, then color yellow.

32
00:02:51.172 --> 00:02:51.708
&gt;&gt; Sean Larkin: Here we go.

33
00:02:55.091 --> 00:02:58.058
&gt;&gt; Sean Larkin: And so once you've created

34
00:02:58.058 --> 00:03:03.347
these four,
let's jump back up into our index,

35
00:03:03.347 --> 00:03:07.733
and let's see where we have applied it.

36
00:03:07.733 --> 00:03:11.513
So typically,
we're applying it, let's see,

37
00:03:11.513 --> 00:03:16.347
from,
&gt;&gt; Sean Larkin: I think what's

38
00:03:16.347 --> 00:03:19.680
kind of cool is, maybe we should do
it inside of the onClick, right?

39
00:03:19.680 --> 00:03:24.490
So when we click on the button, let's set
a new color style, that's pretty nice.

40
00:03:24.490 --> 00:03:27.828
And we could still use the existing
module, right, to set our initial.

41
00:03:27.828 --> 00:03:33.838
And so what we're gonna do now is,
we need to conditionally load this.

42
00:03:33.838 --> 00:03:41.351
So we are going to write a function
that says setButtonStyle, right?

43
00:03:41.351 --> 00:03:45.886
It can be anything you want,
but we'll say setButtonStyle

44
00:03:45.886 --> 00:03:50.342
equals a function that returns
a dynamic import, right?

45
00:03:50.342 --> 00:03:54.993
And so we need to provide webpack with
information to know where to resolve

46
00:03:54.993 --> 00:03:56.110
these modules.

47
00:03:56.110 --> 00:04:03.554
So we're gonna do path to button-styles,
and we do need to use template strings.

48
00:04:03.554 --> 00:04:08.159
Now, you can do concatenation of strings,
I just think this is so

49
00:04:08.159 --> 00:04:11.785
much more convenient to use,
like the back ticks.

50
00:04:11.785 --> 00:04:17.252
Oops, what's interpolation, again,

51
00:04:17.252 --> 00:04:22.116
there we go.
&gt;&gt; Sean Larkin: Color,

52
00:04:22.116 --> 00:04:26.998
or we can say color,
these variables can be named whatever

53
00:04:26.998 --> 00:04:31.741
you want.
&gt;&gt; Sean Larkin: Okay,

54
00:04:31.741 --> 00:04:37.848
now when we save this, you may have
noticed in your first rebuild,

55
00:04:37.848 --> 00:04:42.883
you instantly get four more
bundles created, right?

56
00:04:42.883 --> 00:04:47.484
And they're tiny, cuz it's a small module,
but that's great,

57
00:04:47.484 --> 00:04:49.466
let's now actually use it.

58
00:04:49.466 --> 00:04:57.655
So we can say,
&gt;&gt; Sean Larkin: getButtonStyle,

59
00:04:57.655 --> 00:05:02.208
was it setButtonStyle,
there we go, setButtonStyle, and

60
00:05:02.208 --> 00:05:04.840
once again, it is just a promise.

61
00:05:04.840 --> 00:05:11.810
But now we can actually provide the color,
so I'm just gonna say ("red").then.

62
00:05:11.810 --> 00:05:14.532
And then we can say stylename or

63
00:05:14.532 --> 00:05:20.037
style.
&gt;&gt; Sean Larkin: And

64
00:05:20.037 --> 00:05:25.788
then button.style = style.

65
00:05:32.936 --> 00:05:34.482
&gt;&gt; Sean Larkin: I almost feel like it's

66
00:05:34.482 --> 00:05:39.134
easier to say style string, I just
hate seeing like the same name here.

67
00:05:41.375 --> 00:05:43.599
&gt;&gt; Sean Larkin: Now let's jump into,

68
00:05:43.599 --> 00:05:49.461
we can pull up the dev server,
if you don't have it loaded.

69
00:05:52.590 --> 00:05:55.783
&gt;&gt; Sean Larkin: Reload our page, hey,

70
00:05:55.783 --> 00:06:03.479
doesn't look very red.
&gt;&gt; Sean Larkin: What I

71
00:06:03.479 --> 00:06:08.343
should do is actually console.log this, so
we can see what actually this value is,

72
00:06:08.343 --> 00:06:14.682
style string.
&gt;&gt; Sean Larkin: All right,

73
00:06:14.682 --> 00:06:16.530
so let's jump into our console.

74
00:06:17.570 --> 00:06:21.252
This is that debug driven, if you're not
very sure, what is it actually set to,

75
00:06:21.252 --> 00:06:28.320
right?
&gt;&gt; Sean Larkin: The default is color red.

76
00:06:28.320 --> 00:06:32.101
So looks like I just need to
access the default, right,

77
00:06:32.101 --> 00:06:34.443
I always get thrown off from this.

78
00:06:34.443 --> 00:06:38.503
Export default, color red, default, okay.

79
00:06:38.503 --> 00:06:39.871
So I would technically,

80
00:06:39.871 --> 00:06:43.395
what's even cool is that you can
set a debugger statement here.

81
00:06:43.395 --> 00:06:46.685
So this is probably one of my favorite
parts, is now I can hit this.

82
00:06:46.685 --> 00:06:51.717
I can stop and I can literally
just see what this statement is.

83
00:06:51.717 --> 00:06:56.017
So it looks like instead of
just calling the style string,

84
00:06:56.017 --> 00:06:59.616
I should be saying styleStr.default,
right,

85
00:06:59.616 --> 00:07:03.837
so.
&gt;&gt; Sean Larkin: At least that's

86
00:07:03.837 --> 00:07:07.977
what it looks like here.
&gt;&gt; Sean Larkin: So

87
00:07:07.977 --> 00:07:10.393
maybe this is a case where it's like,
maybe I should,

88
00:07:10.393 --> 00:07:14.824
I'm just gonna rebuild.
&gt;&gt; Sean Larkin: I love using

89
00:07:14.824 --> 00:07:19.008
debuggers when it comes to code
splitting cuz it's like, cool,

90
00:07:19.008 --> 00:07:21.988
now I can inspect everything
that I have here.

91
00:07:21.988 --> 00:07:25.054
Step through, watch it get set,

92
00:07:25.054 --> 00:07:30.065
boom.
&gt;&gt; Sean Larkin: Instantly based

93
00:07:30.065 --> 00:07:34.390
on runtime conditions, well, I mean you
could set some random runtime conditions.

94
00:07:34.390 --> 00:07:41.291
Say, if window,whatever, or
at event listener at some event.

95
00:07:41.291 --> 00:07:46.050
But what's cool is that
we didn't actually need

96
00:07:46.050 --> 00:07:50.970
any of the other lazy loaded chunks,
right?

97
00:07:50.970 --> 00:07:54.644
They're created and they're provided
there in case they're called.

98
00:07:54.644 --> 00:07:58.756
But the value is,
we only needed to use this one, and

99
00:07:58.756 --> 00:08:02.040
therefore, that's what got loaded up.

100
00:08:02.040 --> 00:08:04.515
And you can reuse this in your code now,

101
00:08:04.515 --> 00:08:09.315
you can have this as an individual module
that you pull in and pass anywhere.

102
00:08:09.315 --> 00:08:14.373
The key thing about using this kind
of dynamic code splitting is that

103
00:08:14.373 --> 00:08:19.253
you always have to pass in information
like partial path to know,

104
00:08:19.253 --> 00:08:22.821
webpack won't know if
this is just a variable.

105
00:08:22.821 --> 00:08:27.629
I'll just say color, and this is gonna
error, I'll get a warning that says, hey,

106
00:08:27.629 --> 00:08:30.287
the request of a dependency
is an expression.

107
00:08:30.287 --> 00:08:34.012
The point, what this is trying to explain,
we need to make this easier to understand,

108
00:08:34.012 --> 00:08:35.044
this warning message.

109
00:08:35.044 --> 00:08:36.488
But the point here is, and

110
00:08:36.488 --> 00:08:40.635
you'll learn a little bit as I talk
about how webpack works under the hood.

111
00:08:40.635 --> 00:08:44.153
But if webpack has to
resolve a dependency,

112
00:08:44.153 --> 00:08:48.350
what can it resolve when you
just pass it a variable?

113
00:08:48.350 --> 00:08:52.455
It doesn't even know where to look and
find the code, right?

114
00:08:52.455 --> 00:08:54.192
So it has to do it statically, and

115
00:08:54.192 --> 00:08:56.930
that's what the partial
path is aiming to provide.

116
00:08:56.930 --> 00:09:01.106
So does anyone have any questions
before I move on to magic

117
00:09:01.106 --> 00:09:05.530
comments?
&gt;&gt; Sean Larkin: Well,

118
00:09:05.530 --> 00:09:07.889
I think this is a really
awesome technique.

119
00:09:07.889 --> 00:09:12.620
I think maybe before we move on,
the only other thing I would say is,

120
00:09:12.620 --> 00:09:16.521
now this expression right here,
what webpack does is,

121
00:09:16.521 --> 00:09:19.597
it just uses a regex and
separates them out.

122
00:09:19.597 --> 00:09:23.080
And says, okay, this is the partial path,
and then I'm looking for this.

123
00:09:23.080 --> 00:09:27.417
Now you can even do something
like this where if you said .js.

124
00:09:27.417 --> 00:09:30.538
If you had a folder that had
a bunch of other assets in there,

125
00:09:30.538 --> 00:09:34.408
webpack would try and resolve those and
create bundles for them, right,

126
00:09:34.408 --> 00:09:36.930
especially if you had
the loader to support it.

127
00:09:36.930 --> 00:09:42.480
So adding the .js would filter it and
say, only resolve the .js files.

128
00:09:42.480 --> 00:09:46.080
And that's what I think
is the coolest thing.

129
00:09:46.080 --> 00:09:50.390
For example, we support JSON out of
the box, right, and JSON is, by default,

130
00:09:50.390 --> 00:09:51.030
resolvable.

131
00:09:51.030 --> 00:09:54.818
So if I put in here, I actually think
this is really cool too because

132
00:09:54.818 --> 00:09:59.640
these wouldn't even need to be JavaScript
files if they're just strings, right?

133
00:09:59.640 --> 00:10:05.019
You could literally say magenta,
or no, let's just say pink,

134
00:10:05.019 --> 00:10:11.260
pink.json.
&gt;&gt; Sean Larkin: And let's see if my index,

135
00:10:11.260 --> 00:10:17.156
okay, yes, so that's right.
&gt;&gt; Sean Larkin: And

136
00:10:17.156 --> 00:10:19.297
I'm just gonna reload the dev server.

137
00:10:19.297 --> 00:10:24.692
Okay, so if you had pink.json in here,

138
00:10:24.692 --> 00:10:28.667
[LAUGH] replace of undefined.

139
00:10:28.667 --> 00:10:37.464
I've never seen that error before.
&gt;&gt; Sean Larkin: Yeah,

140
00:10:37.464 --> 00:10:39.944
because there is no json in it, sorry.

141
00:10:39.944 --> 00:10:45.023
And if I said,
&gt;&gt; Sean Larkin: I think if I said default,

142
00:10:45.023 --> 00:10:51.003
right?
&gt;&gt; Sean Larkin: And then I said,

143
00:10:51.003 --> 00:10:57.815
let's see what the color pink,
&gt;&gt; Sean Larkin: [LAUGH]

144
00:10:57.815 --> 00:11:03.700
it added another lazy loaded bundle,
right?

145
00:11:05.230 --> 00:11:09.683
I'll just redo the dev so we don't see
just the incremental update, we'll see all

146
00:11:09.683 --> 00:11:15.133
of the bundles initially created.
&gt;&gt; Sean Larkin: Look,

147
00:11:15.133 --> 00:11:18.541
now you have another one right, because,

148
00:11:18.541 --> 00:11:24.130
webpack by default can resolve json,
web assembly, .mjs and js.

149
00:11:24.130 --> 00:11:27.548
Those are the four extensions
that it supports, and so

150
00:11:27.548 --> 00:11:31.280
it's gonna resolve this because
there is no partial path.

151
00:11:31.280 --> 00:11:36.080
And so if we jump into our dev mode,
and I actually tried to call this, or

152
00:11:36.080 --> 00:11:38.486
maybe I'll jump into, here we go.

153
00:11:38.486 --> 00:11:45.590
If I said set button color pink,
&gt;&gt; Sean Larkin: Instead,

154
00:11:45.590 --> 00:11:49.685
let's see what happens.
&gt;&gt; Sean Larkin: So

155
00:11:49.685 --> 00:11:56.463
we get a reload, and then okay, great.

156
00:11:56.463 --> 00:12:01.130
I hit the button, I get a breakpoint,
and look at what we have in here.

157
00:12:01.130 --> 00:12:06.601
We actually have the default,
if I console log it,

158
00:12:06.601 --> 00:12:14.557
style string.
&gt;&gt; Sean Larkin: So

159
00:12:14.557 --> 00:12:18.718
it looks like I could just have it be, now
with JSON, it's a little different cuz we

160
00:12:18.718 --> 00:12:23.130
force everything into default name space,
and so each property is its own export.

161
00:12:23.130 --> 00:12:28.980
So in this case, we have a named import
of default, but look, you can do that.

162
00:12:28.980 --> 00:12:33.529
And so the point is that you can be
more strict about your filters, and

163
00:12:33.529 --> 00:12:37.136
you can say, webpack,
don't try and resolve this and

164
00:12:37.136 --> 00:12:39.970
create a lazy loaded bundle for it, okay.

165
00:12:39.970 --> 00:12:45.057
If I just set it to JS, then it's not
gonna emit every single bundle for

166
00:12:45.057 --> 00:12:51.345
it.
&gt;&gt; Sean Larkin: So that's how you just

167
00:12:51.345 --> 00:12:56.737
make your context resolving more strict.
&gt;&gt; Sean Larkin: So

168
00:12:56.737 --> 00:13:01.453
that I think is probably one
of the coolest capabilities,

169
00:13:01.453 --> 00:13:08.204
is that you can be really expressive with
it, even though it's not truly dynamic.

170
00:13:08.204 --> 00:13:11.362
So okay, I'm just gonna
commit this really quick and

171
00:13:11.362 --> 00:13:14.108
then we're gonna talk
about magic comments.

172
00:13:14.108 --> 00:13:17.685
That was something that I
saw a lot on our feedback.

173
00:13:17.685 --> 00:13:21.441
So git add source.

174
00:13:26.125 --> 00:13:30.208
&gt;&gt; Sean Larkin: 0502-context, okay,

175
00:13:30.208 --> 00:13:37.730
let's see, not-so-dynamic-code-splitting.

176
00:13:43.652 --> 00:13:44.937
&gt;&gt; Sean Larkin: Okay.

