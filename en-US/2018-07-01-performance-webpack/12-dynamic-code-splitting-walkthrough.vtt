WEBVTT

1
00:00:00.000 --> 00:00:01.542
&gt;&gt; Sean Larkin: So, yeah, exercise time.

2
00:00:05.922 --> 00:00:10.416
&gt;&gt; Sean Larkin: So let's go ahead,
and I'll take and I'll check this,

3
00:00:10.416 --> 00:00:14.267
I'm just gonna check out
a branch really quick.

4
00:00:14.267 --> 00:00:18.232
But what I want you to do while I'm
doing this is take and let's add,

5
00:00:18.232 --> 00:00:22.845
let's say I think a great example would
be to leverage button styles, right?

6
00:00:22.845 --> 00:00:27.830
Let's just say instead,
go ahead and create a folder called

7
00:00:27.830 --> 00:00:32.337
button-styles, well,
we'll just do it together.

8
00:00:35.538 --> 00:00:37.154
&gt;&gt; Sean Larkin: And
inside of it, create a module.

9
00:00:37.154 --> 00:00:42.971
One is red.js, one is blue.js,

10
00:00:42.971 --> 00:00:48.587
each of the colors, so red.js,

11
00:00:48.587 --> 00:00:55.217
blue.js, green.js, yellow.js.

12
00:00:55.217 --> 00:00:57.756
Okay, that seems pretty good, that's fair.

13
00:00:57.756 --> 00:01:04.671
Okay, now let me just,
let me stop where we were at and

14
00:01:04.671 --> 00:01:09.305
check this code in, so let's see.

15
00:01:19.177 --> 00:01:26.489
&gt;&gt; Sean Larkin: Check out,
&gt;&gt; Sean Larkin: 0501,

16
00:01:35.687 --> 00:01:37.286
&gt;&gt; Sean Larkin: Get,

17
00:01:44.471 --> 00:01:46.277
&gt;&gt; Sean Larkin: Awesome, okay, so,

18
00:01:46.277 --> 00:01:52.369
beautiful, hopefully that push is great,
okay, so back to where we were.

19
00:01:52.369 --> 00:01:58.142
Now let's take button-styles.js, and
really, what we're just gonna do here is,

20
00:01:58.142 --> 00:02:03.455
each of them will just be a default export
that kinda uses this pattern, right?

21
00:02:03.455 --> 00:02:06.260
So we'll keep this existing module in,

22
00:02:06.260 --> 00:02:09.895
cuz we don't wanna break
where we're at right now.

23
00:02:09.895 --> 00:02:13.754
But we could even start our dev mode,
right, and get the incremental changes and

24
00:02:13.754 --> 00:02:16.213
feedback from webpack as
we're trying to do this.

25
00:02:18.124 --> 00:02:23.397
&gt;&gt; Sean Larkin: So blue would be default,
or export default,

26
00:02:25.525 --> 00:02:28.795
&gt;&gt; Sean Larkin: "color: blue", all right,

27
00:02:28.795 --> 00:02:30.740
seems kinda nice.

28
00:02:31.790 --> 00:02:35.680
Got a little duplication here,
I mean, a little repetition.

29
00:02:36.870 --> 00:02:40.219
But I just wanna make
this easy to understand.

30
00:02:40.219 --> 00:02:43.586
Color red, then color yellow.

31
00:02:51.172 --> 00:02:51.708
&gt;&gt; Sean Larkin: Here we go.

32
00:02:55.091 --> 00:02:59.477
&gt;&gt; Sean Larkin: And so
once you've created these four,

33
00:02:59.477 --> 00:03:03.734
let's jump back up into our index, and

34
00:03:03.734 --> 00:03:07.733
let's see where we have applied it.

35
00:03:07.733 --> 00:03:11.513
So typically,
we're applying it, let's see,

36
00:03:11.513 --> 00:03:16.347
from,
&gt;&gt; Sean Larkin: I think what's

37
00:03:16.347 --> 00:03:19.680
kind of cool is, maybe we should do
it inside of the onClick, right?

38
00:03:19.680 --> 00:03:24.490
So when we click on the button, let's set
a new color style, that's pretty nice.

39
00:03:24.490 --> 00:03:27.828
And we could still use the existing
module, right, to set our initial.

40
00:03:27.828 --> 00:03:33.838
And so what we're gonna do now is,
we need to conditionally load this.

41
00:03:33.838 --> 00:03:41.351
So we are going to write a function
that says setButtonStyle, right?

42
00:03:41.351 --> 00:03:45.886
It can be anything you want,
but we'll say setButtonStyle

43
00:03:45.886 --> 00:03:50.342
equals a function that returns
a dynamic import, right?

44
00:03:50.342 --> 00:03:54.993
And so we need to provide webpack with
information to know where to resolve

45
00:03:54.993 --> 00:03:56.110
these modules.

46
00:03:56.110 --> 00:04:03.554
So we're gonna do path to button-styles,
and we do need to use template strings.

47
00:04:03.554 --> 00:04:08.159
Now, you can do concatenation of strings,
I just think this is so

48
00:04:08.159 --> 00:04:11.785
much more convenient to use,
like the back ticks.

49
00:04:11.785 --> 00:04:18.975
Oops, what's interpolation,
again, there we go.

50
00:04:21.419 --> 00:04:23.809
&gt;&gt; Sean Larkin: Color,
or we can say color,

51
00:04:23.809 --> 00:04:27.903
these variables can be
named whatever you want.

52
00:04:31.087 --> 00:04:33.812
&gt;&gt; Sean Larkin: Okay,
now when we save this,

53
00:04:33.812 --> 00:04:37.848
you may have noticed
in your first rebuild,

54
00:04:37.848 --> 00:04:42.883
you instantly get four more
bundles created, right?

55
00:04:42.883 --> 00:04:47.484
And they're tiny, cuz it's a small module,
but that's great,

56
00:04:47.484 --> 00:04:49.466
let's now actually use it.

57
00:04:49.466 --> 00:04:57.655
So we can say,
&gt;&gt; Sean Larkin: getButtonStyle,

58
00:04:57.655 --> 00:05:02.208
was it setButtonStyle,
there we go, setButtonStyle, and

59
00:05:02.208 --> 00:05:04.840
once again, it is just a promise.

60
00:05:04.840 --> 00:05:11.810
But now we can actually provide the color,
so I'm just gonna say ("red").then.

61
00:05:11.810 --> 00:05:15.268
And then we can say stylename or style.

62
00:05:19.374 --> 00:05:25.788
&gt;&gt; Sean Larkin: And
then button.style = style.

63
00:05:32.936 --> 00:05:36.337
&gt;&gt; Sean Larkin: I almost feel like
it's easier to say style string,

64
00:05:36.337 --> 00:05:39.134
I just hate seeing like
the same name here.

65
00:05:41.375 --> 00:05:46.525
&gt;&gt; Sean Larkin: Now let's jump into,
we can pull up the dev server,

66
00:05:46.525 --> 00:05:49.461
if you don't have it loaded.

67
00:05:52.590 --> 00:05:59.140
&gt;&gt; Sean Larkin: Reload our page,
hey, doesn't look very red.

68
00:06:03.137 --> 00:06:06.083
&gt;&gt; Sean Larkin: What I should do
is actually console.log this, so

69
00:06:06.083 --> 00:06:09.244
we can see what actually this value is,
style string.

70
00:06:14.022 --> 00:06:16.530
&gt;&gt; Sean Larkin: All right, so
let's jump into our console.

71
00:06:17.570 --> 00:06:18.747
This is that debug driven,

72
00:06:18.747 --> 00:06:21.619
if you're not very sure,
what is it actually set to, right?

73
00:06:25.449 --> 00:06:28.320
&gt;&gt; Sean Larkin: The default is color red.

74
00:06:28.320 --> 00:06:32.101
So looks like I just need to
access the default, right,

75
00:06:32.101 --> 00:06:34.443
I always get thrown off from this.

76
00:06:34.443 --> 00:06:38.503
Export default, color red, default, okay.

77
00:06:38.503 --> 00:06:39.871
So I would technically,

78
00:06:39.871 --> 00:06:43.395
what's even cool is that you can
set a debugger statement here.

79
00:06:43.395 --> 00:06:46.685
So this is probably one of my favorite
parts, is now I can hit this.

80
00:06:46.685 --> 00:06:51.717
I can stop and I can literally
just see what this statement is.

81
00:06:51.717 --> 00:06:56.017
So it looks like instead of
just calling the style string,

82
00:06:56.017 --> 00:06:59.980
I should be saying styleStr.default,
right, so.

83
00:07:03.331 --> 00:07:04.599
&gt;&gt; Sean Larkin: At least that's
what it looks like here.

84
00:07:07.872 --> 00:07:10.393
&gt;&gt; Sean Larkin: So maybe this is a case
where it's like, maybe I should,

85
00:07:10.393 --> 00:07:11.558
I'm just gonna rebuild.

86
00:07:14.063 --> 00:07:17.487
&gt;&gt; Sean Larkin: I love using debuggers
when it comes to code splitting

87
00:07:17.487 --> 00:07:21.988
cuz it's like, cool, now I can
inspect everything that I have here.

88
00:07:21.988 --> 00:07:25.716
Step through, watch it get set, boom.

89
00:07:29.225 --> 00:07:31.325
&gt;&gt; Sean Larkin: Instantly
based on runtime conditions,

90
00:07:31.325 --> 00:07:34.390
well, I mean you could set some
random runtime conditions.

91
00:07:34.390 --> 00:07:41.291
Say, if window,whatever, or
at event listener at some event.

92
00:07:41.291 --> 00:07:46.050
But what's cool is that
we didn't actually need

93
00:07:46.050 --> 00:07:50.970
any of the other lazy loaded chunks,
right?

94
00:07:50.970 --> 00:07:54.644
They're created and they're provided
there in case they're called.

95
00:07:54.644 --> 00:07:58.756
But the value is,
we only needed to use this one, and

96
00:07:58.756 --> 00:08:02.040
therefore, that's what got loaded up.

97
00:08:02.040 --> 00:08:04.515
And you can reuse this in your code now,

98
00:08:04.515 --> 00:08:09.315
you can have this as an individual module
that you pull in and pass anywhere.

99
00:08:09.315 --> 00:08:14.373
The key thing about using this kind
of dynamic code splitting is that

100
00:08:14.373 --> 00:08:19.253
you always have to pass in information
like partial path to know,

101
00:08:19.253 --> 00:08:22.821
webpack won't know if
this is just a variable.

102
00:08:22.821 --> 00:08:27.629
I'll just say color, and this is gonna
error, I'll get a warning that says, hey,

103
00:08:27.629 --> 00:08:30.287
the request of a dependency
is an expression.

104
00:08:30.287 --> 00:08:34.012
The point, what this is trying to explain,
we need to make this easier to understand,

105
00:08:34.012 --> 00:08:35.044
this warning message.

106
00:08:35.044 --> 00:08:36.488
But the point here is, and

107
00:08:36.488 --> 00:08:40.635
you'll learn a little bit as I talk
about how webpack works under the hood.

108
00:08:40.635 --> 00:08:44.153
But if webpack has to
resolve a dependency,

109
00:08:44.153 --> 00:08:48.350
what can it resolve when you
just pass it a variable?

110
00:08:48.350 --> 00:08:52.455
It doesn't even know where to look and
find the code, right?

111
00:08:52.455 --> 00:08:54.192
So it has to do it statically, and

112
00:08:54.192 --> 00:08:56.930
that's what the partial
path is aiming to provide.

113
00:08:56.930 --> 00:09:01.977
So does anyone have any questions
before I move on to magic comments?

114
00:09:05.149 --> 00:09:07.889
&gt;&gt; Sean Larkin: Well, I think this
is a really awesome technique.

115
00:09:07.889 --> 00:09:12.620
I think maybe before we move on,
the only other thing I would say is,

116
00:09:12.620 --> 00:09:16.521
now this expression right here,
what webpack does is,

117
00:09:16.521 --> 00:09:19.597
it just uses a regex and
separates them out.

118
00:09:19.597 --> 00:09:23.080
And says, okay, this is the partial path,
and then I'm looking for this.

119
00:09:23.080 --> 00:09:27.417
Now you can even do something
like this where if you said .js.

120
00:09:27.417 --> 00:09:30.538
If you had a folder that had
a bunch of other assets in there,

121
00:09:30.538 --> 00:09:34.408
webpack would try and resolve those and
create bundles for them, right,

122
00:09:34.408 --> 00:09:36.930
especially if you had
the loader to support it.

123
00:09:36.930 --> 00:09:42.480
So adding the .js would filter it and
say, only resolve the .js files.

124
00:09:42.480 --> 00:09:46.080
And that's what I think
is the coolest thing.

125
00:09:46.080 --> 00:09:50.390
For example, we support JSON out of
the box, right, and JSON is, by default,

126
00:09:50.390 --> 00:09:51.030
resolvable.

127
00:09:51.030 --> 00:09:54.818
So if I put in here, I actually think
this is really cool too because

128
00:09:54.818 --> 00:09:59.640
these wouldn't even need to be JavaScript
files if they're just strings, right?

129
00:09:59.640 --> 00:10:06.222
You could literally say magenta, or
no, let's just say pink, pink.json.

130
00:10:08.853 --> 00:10:14.094
&gt;&gt; Sean Larkin: And let's see if my index,
okay, yes, so that's right.

131
00:10:16.962 --> 00:10:19.297
&gt;&gt; Sean Larkin: And
I'm just gonna reload the dev server.

132
00:10:19.297 --> 00:10:24.692
Okay, so if you had pink.json in here,

133
00:10:24.692 --> 00:10:28.667
[LAUGH] replace of undefined.

134
00:10:28.667 --> 00:10:32.611
I've never seen that error before.

135
00:10:37.014 --> 00:10:39.944
&gt;&gt; Sean Larkin: Yeah,
because there is no json in it, sorry.

136
00:10:39.944 --> 00:10:45.023
And if I said,
&gt;&gt; Sean Larkin: I think if I said default,

137
00:10:45.023 --> 00:10:46.264
right?

138
00:10:48.824 --> 00:10:54.274
&gt;&gt; Sean Larkin: And then I said,
let's see what the color

139
00:10:54.274 --> 00:10:58.870
pink,
&gt;&gt; Sean Larkin: [LAUGH] it added

140
00:10:58.870 --> 00:11:03.700
another lazy loaded bundle, right?

141
00:11:05.230 --> 00:11:08.919
I'll just redo the dev so
we don't see just the incremental update,

142
00:11:08.919 --> 00:11:11.597
we'll see all of the bundles
initially created.

143
00:11:14.565 --> 00:11:18.541
&gt;&gt; Sean Larkin: Look,
now you have another one right, because,

144
00:11:18.541 --> 00:11:24.130
webpack by default can resolve json,
web assembly, .mjs and js.

145
00:11:24.130 --> 00:11:27.548
Those are the four extensions
that it supports, and so

146
00:11:27.548 --> 00:11:31.280
it's gonna resolve this because
there is no partial path.

147
00:11:31.280 --> 00:11:36.080
And so if we jump into our dev mode,
and I actually tried to call this, or

148
00:11:36.080 --> 00:11:38.486
maybe I'll jump into, here we go.

149
00:11:38.486 --> 00:11:45.590
If I said set button color pink,
&gt;&gt; Sean Larkin: Instead,

150
00:11:45.590 --> 00:11:47.040
let's see what happens.

151
00:11:49.287 --> 00:11:56.463
&gt;&gt; Sean Larkin: So we get a reload,
and then okay, great.

152
00:11:56.463 --> 00:12:01.130
I hit the button, I get a breakpoint,
and look at what we have in here.

153
00:12:01.130 --> 00:12:08.265
We actually have the default,
if I console log it, style string.

154
00:12:14.438 --> 00:12:17.173
&gt;&gt; Sean Larkin: So it looks like I
could just have it be, now with JSON,

155
00:12:17.173 --> 00:12:21.215
it's a little different cuz we force
everything into default name space, and so

156
00:12:21.215 --> 00:12:23.130
each property is its own export.

157
00:12:23.130 --> 00:12:28.980
So in this case, we have a named import
of default, but look, you can do that.

158
00:12:28.980 --> 00:12:33.529
And so the point is that you can be
more strict about your filters, and

159
00:12:33.529 --> 00:12:37.136
you can say, webpack,
don't try and resolve this and

160
00:12:37.136 --> 00:12:39.970
create a lazy loaded bundle for it, okay.

161
00:12:39.970 --> 00:12:45.409
If I just set it to JS, then it's not
gonna emit every single bundle for it.

162
00:12:49.767 --> 00:12:54.341
&gt;&gt; Sean Larkin: So that's how you just
make your context resolving more strict.

163
00:12:56.545 --> 00:13:01.453
&gt;&gt; Sean Larkin: So that I think is
probably one of the coolest capabilities,

164
00:13:01.453 --> 00:13:08.204
is that you can be really expressive with
it, even though it's not truly dynamic.

165
00:13:08.204 --> 00:13:11.362
So okay, I'm just gonna
commit this really quick and

166
00:13:11.362 --> 00:13:14.108
then we're gonna talk
about magic comments.

167
00:13:14.108 --> 00:13:17.685
That was something that I
saw a lot on our feedback.

168
00:13:17.685 --> 00:13:21.441
So git add source.

169
00:13:26.125 --> 00:13:32.004
&gt;&gt; Sean Larkin: 0502-context,
okay, let's see,

170
00:13:32.004 --> 00:13:37.730
not-so-dynamic-code-splitting.

171
00:13:43.652 --> 00:13:44.937
&gt;&gt; Sean Larkin: Okay.

