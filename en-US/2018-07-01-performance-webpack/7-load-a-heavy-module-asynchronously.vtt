WEBVTT

1
00:00:00.250 --> 00:00:02.430
&gt;&gt; Sean Larkin: Let's do npm install gsap.

2
00:00:02.430 --> 00:00:03.780
G-S-A-P.

3
00:00:03.780 --> 00:00:08.610
So, I'll just do G-S-A-P.

4
00:00:08.610 --> 00:00:09.280
Ooh it's a big one.

5
00:00:13.770 --> 00:00:15.960
&gt;&gt; Sean Larkin: And
there it's not a pure module of GSAP too.

6
00:00:15.960 --> 00:00:19.030
So like, they throw a bunch of
stuff willy nilly in globals.

7
00:00:19.030 --> 00:00:20.680
And they're trying to work on that.

8
00:00:20.680 --> 00:00:23.240
Like GSAP 2.0 is gonna be really awesome.

9
00:00:23.240 --> 00:00:25.920
I've been working with Jack behind
the scenes for the last month or two.

10
00:00:28.510 --> 00:00:33.750
So we add the GSAP,
let's just go ahead for example, right?

11
00:00:35.050 --> 00:00:40.037
Now, I think it's import TweenMax,
or TweenLite from gsap.

12
00:00:40.037 --> 00:00:43.712
I think that's a good example, or

13
00:00:43.712 --> 00:00:48.657
I think maybe canonically
what people might do

14
00:00:48.657 --> 00:00:53.622
is something like import
* as GSAP from gsap.

15
00:00:53.622 --> 00:00:57.780
And you don't really have to use it.

16
00:00:57.780 --> 00:01:01.120
I think this alone is enough for

17
00:01:01.120 --> 00:01:05.610
us to showcase like, holy moly,
we've got a lot of unused code, right.

18
00:01:05.610 --> 00:01:09.200
So, let's just see our
bundles increased in size.

19
00:01:09.200 --> 00:01:12.020
Well, that escalated quickly.

20
00:01:12.020 --> 00:01:15.150
There's 800 kilobytes, okay.

21
00:01:15.150 --> 00:01:23.530
And we can still see, this is pretty small
amount of code in our lazy loading bundle.

22
00:01:23.530 --> 00:01:26.490
So go ahead and jump into your dev mode.

23
00:01:26.490 --> 00:01:28.780
I ran npm run dev.

24
00:01:29.850 --> 00:01:32.290
And, let's just jump
back into the browser.

25
00:01:32.290 --> 00:01:35.490
If you have Chrome,
I would encourage you so we can look and

26
00:01:35.490 --> 00:01:36.920
do the coverage analysis.

27
00:01:37.940 --> 00:01:40.360
So lets open the drawer.

28
00:01:42.930 --> 00:01:44.340
Come on now, coverage.

29
00:01:47.480 --> 00:01:49.790
&gt;&gt; Sean Larkin: I wish I could
just see that standalone.

30
00:01:49.790 --> 00:01:50.909
I don't like how they make.

31
00:01:53.624 --> 00:01:55.720
&gt;&gt; Sean Larkin: Well now, look at that!

32
00:01:59.118 --> 00:02:02.710
&gt;&gt; Sean Larkin: That's super interesting
what the source maps do here.

33
00:02:07.230 --> 00:02:10.077
&gt;&gt; Sean Larkin: So maybe this is actually
kind of hard to visualize when you have

34
00:02:10.077 --> 00:02:10.930
source maps.

35
00:02:10.930 --> 00:02:15.470
This is kind of a bug Cuz what it
does is it separates each file and

36
00:02:15.470 --> 00:02:16.680
wraps it in an eval.

37
00:02:16.680 --> 00:02:22.160
And so like it's actually showing you
how much of even this library is unused.

38
00:02:22.160 --> 00:02:24.400
That's super interesting.

39
00:02:25.600 --> 00:02:27.480
But, I guess that's okay.

40
00:02:27.480 --> 00:02:30.670
This is kind of a feature too.

41
00:02:30.670 --> 00:02:36.460
Originally I would expect to see this
bundle jump up in unused size, right?

42
00:02:36.460 --> 00:02:37.550
You would see that.

43
00:02:37.550 --> 00:02:40.930
In this case,
because we're using eval as a source map,

44
00:02:40.930 --> 00:02:43.980
it's actually separating it
out into each individual file.

45
00:02:43.980 --> 00:02:45.110
Which is kind of insightful.

46
00:02:45.110 --> 00:02:50.178
And saying, hey,
you're instantly not using about

47
00:02:50.178 --> 00:02:54.690
80% of GSAP, just by importing it, right?

48
00:02:54.690 --> 00:02:57.419
So, even if we haven't
even played with it yet,

49
00:02:57.419 --> 00:03:00.080
I'm sure it's like in the global scope.

50
00:03:00.080 --> 00:03:07.150
So I bet, yeah,
like Tweenlite is in the window now, so.

51
00:03:07.150 --> 00:03:10.980
How can we prevent this from happening?

52
00:03:10.980 --> 00:03:15.120
So, let's say you don't actually need
it until you hit the button, right?

53
00:03:15.120 --> 00:03:18.370
So we can take and we can lazy load this.

54
00:03:18.370 --> 00:03:22.690
So, we can say const getGSAP.

55
00:03:22.690 --> 00:03:29.870
Or here, let me just comment it out so
you can still see for context.

56
00:03:29.870 --> 00:03:34.590
So const getGSAP = a function

57
00:03:34.590 --> 00:03:38.960
that returns a dynamic import
of that module, right?

58
00:03:41.070 --> 00:03:42.218
&gt;&gt; Sean Larkin: Okay.

59
00:03:44.330 --> 00:03:48.130
&gt;&gt; Sean Larkin: Well,
let's go ahead, let's go back.

60
00:03:48.130 --> 00:03:50.180
Let's do another profile analysis.

61
00:03:50.180 --> 00:03:52.440
Let's just see what
happened just as of now.

62
00:03:55.480 --> 00:03:57.530
&gt;&gt; Sean Larkin: Whoa!

63
00:03:57.530 --> 00:03:59.580
It's not even on the list anymore.

64
00:03:59.580 --> 00:04:03.890
Like, this is just the web
socket server for dev server.

65
00:04:05.060 --> 00:04:08.810
But what's important is that,
it doesn't even show up, it's gone.

66
00:04:12.510 --> 00:04:18.219
&gt;&gt; Sean Larkin: So we just dropped
like how much size from our bundles?

67
00:04:20.580 --> 00:04:25.954
We just split out essentially an entire.

68
00:04:25.954 --> 00:04:28.997
&gt;&gt; Sean Larkin: Looks like four,
five, 600 kilobytes.

69
00:04:31.850 --> 00:04:37.880
&gt;&gt; Sean Larkin: Now, this is the dev mode,
so let's run a prod bundle now.

70
00:04:37.880 --> 00:04:40.040
So we're just kinda seeing
the hot module replacement, so

71
00:04:40.040 --> 00:04:41.750
these are the only updates
that were changed.

72
00:04:41.750 --> 00:04:45.740
But we should actually see three
bundles that are now created, right?

73
00:04:45.740 --> 00:04:47.195
Lets just run yarn prod and
look at our build folder.

74
00:04:52.590 --> 00:04:56.890
&gt;&gt; Sean Larkin: Okay, so,
what do we have here?

75
00:04:56.890 --> 00:04:57.430
There we go.

76
00:05:01.270 --> 00:05:05.605
&gt;&gt; Sean Larkin: You'll notice that
actually what webpack is doing is taking

77
00:05:05.605 --> 00:05:10.960
and it separates even the GSAP library
into an entirely separated bundle.

78
00:05:12.660 --> 00:05:13.410
And there it is.

79
00:05:13.410 --> 00:05:15.390
There is the GSAP code.

80
00:05:17.380 --> 00:05:22.410
So, we've instantly saved ourselves

81
00:05:22.410 --> 00:05:26.690
by taking a pretty heavy library and
asynchronously loading it.

82
00:05:26.690 --> 00:05:32.420
Now of course, we would want to
use it inside of our button call,

83
00:05:32.420 --> 00:05:34.140
or whatever our event is, right?

84
00:05:34.140 --> 00:05:40.740
So, getGSAP().then, and then gsap.

85
00:05:43.140 --> 00:05:46.680
I'm not sure what the best
one would be to access.

86
00:05:46.680 --> 00:05:48.200
Gsap dot.

87
00:05:48.200 --> 00:05:51.120
We can just console log it to
see what this actually returns.

88
00:05:52.480 --> 00:05:53.910
I think that's fair.

89
00:05:53.910 --> 00:05:58.780
So, I'll just run yarn dev and
we can see it again.

90
00:05:58.780 --> 00:06:03.360
But we should see some console log
load along with an XHR request, right?

91
00:06:06.810 --> 00:06:10.810
&gt;&gt; Sean Larkin: So go to our network.

92
00:06:10.810 --> 00:06:13.420
I'm just gonna clear it for
the sake of being able to see.

93
00:06:13.420 --> 00:06:17.500
And hey, two parallel requests!

94
00:06:17.500 --> 00:06:18.000
Right?

95
00:06:22.220 --> 00:06:23.151
&gt;&gt; Sean Larkin: Now of course,

96
00:06:23.151 --> 00:06:27.990
if you still are watching coverage
you are like, now it jumps up.

97
00:06:27.990 --> 00:06:32.990
But the point is that we use the coverage
tool to determine our initial load time or

98
00:06:32.990 --> 00:06:35.950
the initial amount of code that's unused.

99
00:06:35.950 --> 00:06:37.050
To just get your page rendered.

