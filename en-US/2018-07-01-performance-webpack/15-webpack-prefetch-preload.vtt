WEBVTT

1
00:00:00.040 --> 00:00:04.557
&gt;&gt; Sean Larkin: So I wanna talk about a
feature that we just added in Webpack 4.8.

2
00:00:04.557 --> 00:00:09.341
So if you look, actually,
I'm just gonna pull up the Medium article,

3
00:00:09.341 --> 00:00:11.586
because it's a great resource.

4
00:00:11.586 --> 00:00:16.160
And so if you don't know,
I would encourage every single

5
00:00:16.160 --> 00:00:21.500
person here to at least subscribe
to our Medium publication.

6
00:00:21.500 --> 00:00:29.180
Not only does it have information
about major announcements,

7
00:00:29.180 --> 00:00:35.870
anytime we release anything or gain or
awarded money for grants and stuff.

8
00:00:35.870 --> 00:00:39.950
We talk about it and we try to give
updates on the future of the project.

9
00:00:41.950 --> 00:00:45.370
And there's even like a whole
section which is like,

10
00:00:45.370 --> 00:00:48.820
I spent four weeks in preparation for

11
00:00:48.820 --> 00:00:55.010
a talk to basically give a whole workshop
on how webpack works under the hood.

12
00:00:55.010 --> 00:00:58.980
And this is what these guides,
the contributor's guide to webpack is.

13
00:00:58.980 --> 00:01:00.630
Kind of like the blogging version.

14
00:01:00.630 --> 00:01:06.065
So there's all sorts of crazy stuffs, but
specifically why I'm pulling you here is,

15
00:01:06.065 --> 00:01:09.910
I'm sorry, it's webpack 4.6,

16
00:01:09.910 --> 00:01:15.020
we published like 2 minor versions
in like 3 days, or a week.

17
00:01:16.610 --> 00:01:22.450
So who knows what &lt;link rel="preload"&gt; or
prefetch does?

18
00:01:22.450 --> 00:01:26.290
Anybody?
Okay, so this is basically a resource hint

19
00:01:26.290 --> 00:01:30.980
to the browser that says, hey,
I'm gonna need this file eventually.

20
00:01:30.980 --> 00:01:34.060
I'm gonna need this asset,
so load it for me?

21
00:01:34.060 --> 00:01:36.703
Eagerly load it, right?

22
00:01:36.703 --> 00:01:42.543
And it fetches while there's idle time,
as well.

23
00:01:42.543 --> 00:01:46.850
And essentially explains it,
why is this useful?

24
00:01:46.850 --> 00:01:51.650
And it allows you to not have to have the
additional cost of network calls, right?

25
00:01:53.080 --> 00:01:55.990
Specifically, with code splitting, right?

26
00:01:55.990 --> 00:02:00.290
Cuz code splitting you are trading off
having a smaller initial download for

27
00:02:00.290 --> 00:02:02.850
a trade of an extra
network request lazily.

28
00:02:02.850 --> 00:02:05.620
Which is a pretty justifiable trade off.

29
00:02:06.940 --> 00:02:08.840
But we can even do better, right?

30
00:02:08.840 --> 00:02:13.530
So we added this new feature
called webpack prefetch.

31
00:02:13.530 --> 00:02:14.700
So it's another magic comment.

32
00:02:14.700 --> 00:02:17.477
Webpack prefetch and then also preload.

33
00:02:17.477 --> 00:02:21.603
Now, I'll admit up front I
specifically don't know the browser

34
00:02:21.603 --> 00:02:26.041
specification around the difference
between prefetch and preload.

35
00:02:26.041 --> 00:02:28.873
So I'd encourage you to look at that
if you want to know which one you'd

36
00:02:28.873 --> 00:02:30.340
wanna choose.

37
00:02:30.340 --> 00:02:34.500
But essentially, this API will
either add link route prefetch for

38
00:02:34.500 --> 00:02:39.180
that chunk, or it would add link route
preload for that chunk and that resource.

39
00:02:39.180 --> 00:02:42.650
It automatically adds it for you.

40
00:02:42.650 --> 00:02:45.510
Let's add it inside of our getFooter code.

41
00:02:45.510 --> 00:02:51.738
We'll jump into getFooter,
that module, awesome.

42
00:02:51.738 --> 00:02:55.120
And we don't even really have
any functionality in here, but

43
00:02:55.120 --> 00:02:59.930
what I want to do is just to showcase
what happens when the chunk is created.

44
00:02:59.930 --> 00:03:05.174
So let's just say
&gt;&gt; Sean Larkin: const

45
00:03:05.174 --> 00:03:08.150
we could get like a chunky library.

46
00:03:08.150 --> 00:03:11.070
So like get, could get gsap from here.

47
00:03:11.070 --> 00:03:14.023
Well, I think I added low dash again so.

48
00:03:18.346 --> 00:03:25.865
&gt;&gt; Sean Larkin: Okay low dash equals
Import and then "loadash-es".

49
00:03:28.875 --> 00:03:31.483
&gt;&gt; Sean Larkin: All right, so
let's build this again and

50
00:03:31.483 --> 00:03:33.575
our time code should be updated.

51
00:03:39.121 --> 00:03:42.859
&gt;&gt; Sean Larkin: Okay,
now let's take a look,

52
00:03:52.574 --> 00:03:54.570
&gt;&gt; Sean Larkin: There we go, okay.

53
00:03:54.570 --> 00:04:00.126
So now you see some actual decorations
added on to some extra comments.

54
00:04:00.126 --> 00:04:03.492
I just usually search for
preload, so we can see it.

55
00:04:03.492 --> 00:04:07.622
But we get a preload map, which basically
is like, okay, this is the lazy chunk and

56
00:04:07.622 --> 00:04:11.490
that's the ID and these are the two
modules that we're loading.

57
00:04:11.490 --> 00:04:12.400
And we look at the run time.

58
00:04:12.400 --> 00:04:17.200
Now we see we're gonna grab the head
reference of your document.

59
00:04:17.200 --> 00:04:22.478
And we're gonna say, for each lazy loaded
chunk that needs this requirement or

60
00:04:22.478 --> 00:04:25.785
meets it,
we're going to create a link element,

61
00:04:25.785 --> 00:04:31.458
we're gonna sign the property pre-load and
add the as attribute equal the script and

62
00:04:31.458 --> 00:04:34.484
then we're going to
append that to the head.

63
00:04:34.484 --> 00:04:40.312
So for example, when, I mean, technically
we could run this in dev mode and

64
00:04:40.312 --> 00:04:44.820
we should be able to see
that attribute added.

65
00:04:44.820 --> 00:04:46.524
Even when we're just getting the footer,
right?

66
00:04:49.136 --> 00:04:52.620
&gt;&gt; Sean Larkin: Cuz the point is that even
if you haven't ever called that function,

67
00:04:52.620 --> 00:04:54.784
it's still gonna give you this behavior,

68
00:04:54.784 --> 00:04:58.290
because it's preparing that
asset to be loaded, right?

69
00:04:58.290 --> 00:05:00.240
So that you don't incur
any of the network costs.

70
00:05:02.360 --> 00:05:07.230
So if I hit load the footer,
let's just step through that and

71
00:05:07.230 --> 00:05:09.660
take a look back at the elements.

72
00:05:09.660 --> 00:05:12.608
We now should see a link rel preload,
yeah, there you go, for

73
00:05:12.608 --> 00:05:13.811
two lazy loaded chunks.

74
00:05:17.498 --> 00:05:20.920
&gt;&gt; Sean Larkin: Does that make sense?

75
00:05:22.180 --> 00:05:27.990
And so I think the one thing that people
trip up on is that If the dynamic import

76
00:05:27.990 --> 00:05:33.500
is in your entry point, it's not going
to add that link rel preload by default.

77
00:05:35.550 --> 00:05:38.010
There are plugins that exist
out there in the wild,

78
00:05:38.010 --> 00:05:42.910
like I think Chrome Developers
owns a webpack preload plugin.

79
00:05:42.910 --> 00:05:45.940
And so it basically just hooks
into HTML webpack plugin and

80
00:05:45.940 --> 00:05:50.720
adds the decorations into that HTML file
template, so it's generated for you.

81
00:05:52.000 --> 00:05:57.590
&gt;&gt; Speaker 2: So just to clarify,
so rather then importing it when

82
00:05:57.590 --> 00:06:02.700
you click on the button, it's actually
kind of it's lazy loading editing.

83
00:06:02.700 --> 00:06:06.370
This will potentially be used, so
when during idol time it will actually,

84
00:06:06.370 --> 00:06:10.392
that way after it's brought in the scripts
and had those idle time in the browser,

85
00:06:10.392 --> 00:06:12.512
it'll actually preload it as opposed to.

86
00:06:12.512 --> 00:06:17.590
&gt;&gt; Sean Larkin: Yep, and this works really
well in combination with service workers.

87
00:06:17.590 --> 00:06:21.540
Because you could actually even
load that in a service worker

88
00:06:22.920 --> 00:06:27.860
on demand and then save it in your service
worker cache, the actual resource.

89
00:06:27.860 --> 00:06:31.140
And then it's literally
zero cost to load it.

90
00:06:31.140 --> 00:06:34.280
And so I'll actually look on Twitter.

91
00:06:34.280 --> 00:06:35.700
I'll just pull it up really quickly.

92
00:06:36.770 --> 00:06:40.808
Mike Griling,
who is one of the lead engineers at

93
00:06:40.808 --> 00:06:46.325
GET lab, they use View and

94
00:06:46.325 --> 00:06:52.750
webpack as well as,
I think they might use type script there.

95
00:06:52.750 --> 00:06:55.919
But if you look here,
this is an awesome example.

96
00:06:55.919 --> 00:06:57.630
On the left-hand side you see a gif.

97
00:06:57.630 --> 00:06:58.990
Let me see if I can try to make it bigger.

98
00:07:00.370 --> 00:07:04.310
So really what they are doing here,
is they've loaded lazy route, right?

99
00:07:05.810 --> 00:07:09.030
And on click,
this extra visual shows up, right?

100
00:07:09.030 --> 00:07:11.900
[COUGH] On the left hand side,

101
00:07:11.900 --> 00:07:16.930
you see that there is just
a tiny little delay in loading.

102
00:07:16.930 --> 00:07:21.490
And this can be because they're
testing a really slow network latency

103
00:07:21.490 --> 00:07:24.280
or- because they do heavy
performance testing.

104
00:07:25.360 --> 00:07:29.780
And so,
when they added web pack prefetch true,

105
00:07:29.780 --> 00:07:32.590
you can actually see it's
almost instantaneous, right?

106
00:07:33.900 --> 00:07:35.910
So this really solves the question like,

107
00:07:35.910 --> 00:07:39.340
hey, all these extra network
requests are bad, right?

108
00:07:39.340 --> 00:07:43.680
And it's, well, it's a trade-off in
that you have to go fetch that, but

109
00:07:43.680 --> 00:07:45.530
webpack takes care of that.

110
00:07:45.530 --> 00:07:50.150
And using this, you actually remove
basically any of the cost of having

111
00:07:50.150 --> 00:07:51.516
to wait for the network, right?

112
00:07:51.516 --> 00:07:55.171
Especially useful for
high-latency devices or

113
00:07:55.171 --> 00:07:59.290
people who are accessing
it from like Australia.

114
00:07:59.290 --> 00:08:01.680
There's heavy latency,
even though the connection's really great.

115
00:08:03.630 --> 00:08:05.390
So this is a really cool feature.

116
00:08:05.390 --> 00:08:07.770
This is what prefetch and
preload will give you.

117
00:08:07.770 --> 00:08:11.040
So does anybody have
any questions about it?

118
00:08:12.640 --> 00:08:16.740
I would say the best resource right
now until they add on our docs

119
00:08:16.740 --> 00:08:18.310
is that Medium article.

120
00:08:18.310 --> 00:08:22.164
Where I have it hiding, I don't.

121
00:08:22.164 --> 00:08:25.380
So it's medium.com/webpack,
I had it there.

122
00:08:29.070 --> 00:08:29.650
This one here.

