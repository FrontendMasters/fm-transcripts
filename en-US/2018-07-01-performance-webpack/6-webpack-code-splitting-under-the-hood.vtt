WEBVTT

1
00:00:00.060 --> 00:00:03.180
&gt;&gt; Sean Larkin: What I wanna do now,
I guess before we go further

2
00:00:03.180 --> 00:00:08.210
is actually read at how the webpack
runtime code has changed, right?

3
00:00:08.210 --> 00:00:09.930
Cuz how are we supporting this?

4
00:00:09.930 --> 00:00:10.680
How does this happen?

5
00:00:11.790 --> 00:00:17.816
So what I wanna do is actually, I'm gonna
jump in and I'm gonna set mode to none.

6
00:00:20.848 --> 00:00:23.863
&gt;&gt; Sean Larkin: Let's see, mode none,

7
00:00:23.863 --> 00:00:29.884
oops.
&gt;&gt; Sean Larkin: Let's see,

8
00:00:29.884 --> 00:00:33.944
yarn webpack.
&gt;&gt; Sean Larkin: It's just,

9
00:00:33.944 --> 00:00:35.950
this should give us that mode none.

10
00:00:35.950 --> 00:00:37.420
Let's see what it looks like in the dist.

11
00:00:38.500 --> 00:00:40.142
Yeah, cool, very cool.

12
00:00:40.142 --> 00:00:43.820
Okay, I'm just gonna wipe this dist
folder and rebuild again, just so

13
00:00:43.820 --> 00:00:44.770
it's a little easier to see.

14
00:00:46.130 --> 00:00:47.199
And let's hide this, and

15
00:00:47.199 --> 00:00:53.874
we can just walk through this code again.
&gt;&gt; Sean Larkin: All right,

16
00:00:53.874 --> 00:00:57.693
so you see the output here is not
only just a single bundle, but

17
00:00:57.693 --> 00:00:59.930
there's two bundles that we emit.

18
00:00:59.930 --> 00:01:03.460
So the code here has changed slightly.

19
00:01:03.460 --> 00:01:08.040
And the reason why we change it is because

20
00:01:08.040 --> 00:01:11.900
we care about this code
coverage percentage.

21
00:01:11.900 --> 00:01:15.820
So we're not gonna include pieces of the
runtime if you're not using all the full

22
00:01:15.820 --> 00:01:20.020
features of webpack like code splitting,
or cachability and things like that.

23
00:01:20.020 --> 00:01:23.200
So let's step through this code again.

24
00:01:23.200 --> 00:01:28.540
And so we have a function here that's
called webpackJsonpCallback, right?

25
00:01:28.540 --> 00:01:29.220
And it takes data.

26
00:01:31.320 --> 00:01:35.020
And basically what we do,
this data's gonna be an array.

27
00:01:35.020 --> 00:01:41.468
And it's gonna be passing through what
we call chunkIds, and then more modules.

28
00:01:41.468 --> 00:01:43.947
So you can think this might
be an array of modules,

29
00:01:43.947 --> 00:01:47.680
similar that we're used to seeing,
like in our IIFE parameters, right?

30
00:01:48.890 --> 00:01:52.560
So even if I went down,
just like, we have our IIFE.

31
00:01:52.560 --> 00:01:58.295
Let's make this a little bigger.
&gt;&gt; Sean Larkin: Okay,

32
00:01:58.295 --> 00:02:03.460
and so we still have an array of modules,
nothing has changed there.

33
00:02:05.010 --> 00:02:07.210
But we do have this new function, and so

34
00:02:07.210 --> 00:02:12.040
it looks like we define some
additional information.

35
00:02:12.040 --> 00:02:19.110
And we say for every chunkId, or
for the amount of chunkIds we have,

36
00:02:19.110 --> 00:02:25.650
basically it's gonna say,
well, if installedChunks.

37
00:02:25.650 --> 00:02:29.170
So now we not only have a module cache,
but we have a chunk cache, right?

38
00:02:32.360 --> 00:02:35.250
And it says resolves.push,
and it adds a resolve.

39
00:02:38.560 --> 00:02:43.469
And then it sets initial ID for
the installed chunks.

40
00:02:46.006 --> 00:02:48.197
&gt;&gt; Sean Larkin: And then we basically say,

41
00:02:48.197 --> 00:02:54.400
well, for each module in this array of
modules, so we can tell it is an array.

42
00:02:56.070 --> 00:03:01.420
We basically check and
see does this have, does this ID exist?

43
00:03:01.420 --> 00:03:06.440
So just basically verifying that for
the IDs that are mapped to our

44
00:03:06.440 --> 00:03:10.970
bundle of modules, or the array of
modules, we just check and make sure.

45
00:03:12.370 --> 00:03:15.200
And then let's scroll down a little bit.

46
00:03:15.200 --> 00:03:18.750
And you can see, here's the original code
that we read, so it's the module cache.

47
00:03:20.270 --> 00:03:25.647
The most important function though is
this right here, __webpack_require__.e.

48
00:03:25.647 --> 00:03:30.420
So this is the lazy
loading transformation.

49
00:03:30.420 --> 00:03:35.380
So this is what we convert,
a dynamic import, in our code.

50
00:03:35.380 --> 00:03:39.740
It gets transformed into
__webpack_require__.e.

51
00:03:39.740 --> 00:03:45.257
And so
what you can see here is that we take and

52
00:03:45.257 --> 00:03:48.660
perform a JSONP export.

53
00:03:48.660 --> 00:03:53.940
Or not a JSONP export, but
a JSONP fetch of another file.

54
00:03:53.940 --> 00:03:58.750
So we're actually taking and
finding the head, we create a script tag.

55
00:04:01.720 --> 00:04:06.590
And then we actually

56
00:04:06.590 --> 00:04:11.751
set a JSONP request.

57
00:04:11.751 --> 00:04:14.442
And then we append that
script to the actual

58
00:04:14.442 --> 00:04:17.985
head.
&gt;&gt; Sean Larkin: And

59
00:04:17.985 --> 00:04:22.488
then since this could be an array,
then we do Promise.all.

60
00:04:22.488 --> 00:04:25.720
So what does this actually look like when
code splitting occurs though, right?

61
00:04:25.720 --> 00:04:29.950
Because we haven't actually seen
what gets transformed for it.

62
00:04:31.460 --> 00:04:35.470
And then we have the single global
variable called webpackJsonp.

63
00:04:35.470 --> 00:04:39.610
It's defined as an array by default,
it's in the global scope.

64
00:04:39.610 --> 00:04:42.210
And this is where we actually register

65
00:04:42.210 --> 00:04:44.785
other chunks in what we
call the chunk cache.

66
00:04:44.785 --> 00:04:51.270
[COUGH] So let's take a look
at where it's actually loaded.

67
00:04:51.270 --> 00:04:55.905
So here's our getFooter, and
that's still a function that returns

68
00:04:55.905 --> 00:05:01.280
__webpack_require__.e, which is a promise.

69
00:05:01.280 --> 00:05:03.650
Now this number is the chunk ID.

70
00:05:03.650 --> 00:05:05.940
So this is the chunk ID that it's
trying to pull from the cache.

71
00:05:07.890 --> 00:05:12.300
And then what we do is then we take
the export inside of the promise and

72
00:05:12.300 --> 00:05:15.300
we do webpack_require.

73
00:05:15.300 --> 00:05:19.070
So to actually find this,
when you see this ID, it's

74
00:05:19.070 --> 00:05:23.990
actually referring to by default the chunk
ID for the other bundle that's created.

75
00:05:25.630 --> 00:05:33.020
So this file hasn't actually been
added yet onto the page, right?

76
00:05:34.410 --> 00:05:40.400
Only until it performs that
__webpack_require__.e, and

77
00:05:40.400 --> 00:05:46.240
it looks for chunkId 1, does it actually
add the script tag into your head,

78
00:05:46.240 --> 00:05:50.930
and then load this into the available
modules in the available chunks.

79
00:05:50.930 --> 00:05:52.520
And so when this happens now,

80
00:05:53.600 --> 00:05:56.440
it's being loaded just like
any other array of modules.

81
00:05:56.440 --> 00:05:59.920
Or in this case, we haven't set,
I believe it's set as an object, right?

82
00:05:59.920 --> 00:06:02.140
Yep, it goes object, and then the IDs.

83
00:06:02.140 --> 00:06:06.812
So whenever we're lazy loading, we're just
accessing modules that have been just

84
00:06:06.812 --> 00:06:09.588
separated into a separate
file asynchronously.

85
00:06:09.588 --> 00:06:11.100
Do you have any questions so far?

86
00:06:12.290 --> 00:06:15.910
Does that make a little bit
more sense in terms of how this

87
00:06:15.910 --> 00:06:17.162
behavior actually happens?

88
00:06:17.162 --> 00:06:24.060
Okay, so
I don't wanna say it's not magical.

89
00:06:24.060 --> 00:06:27.750
Cuz I mean, I love it, and it's really
amazing how we make it possible even

90
00:06:27.750 --> 00:06:30.060
across different module formats and
things.

91
00:06:30.060 --> 00:06:34.620
But this is really,
this is the permeative of CodeSplain.

92
00:06:34.620 --> 00:06:38.260
That's it,
we are able to create asynchronous bundles

93
00:06:39.330 --> 00:06:41.260
that can load on demand.

94
00:06:42.510 --> 00:06:46.710
And you don't have to control
any of the on demand loading.

95
00:06:46.710 --> 00:06:49.650
It's part of your code, it's imperative.

96
00:06:49.650 --> 00:06:54.360
All you're doing is just using that
function, using the dynamic import.

97
00:06:54.360 --> 00:06:56.870
And the beauty is that,
let's say ten years down the road,

98
00:06:56.870 --> 00:06:59.920
webpack's not here and you rip it out.

99
00:06:59.920 --> 00:07:03.410
This is still a browser
specified standard, right?

100
00:07:07.060 --> 00:07:10.570
So that's kind of in a nutshell,
I would say, code splitting.

101
00:07:10.570 --> 00:07:11.980
Now there's gonna be,

102
00:07:11.980 --> 00:07:16.270
I wanna show examples of
another type of code splitting.

103
00:07:16.270 --> 00:07:18.960
And this is static code splitting, right,

104
00:07:18.960 --> 00:07:23.360
because we're just providing a path
to the actual module itself.

105
00:07:23.360 --> 00:07:28.720
And this is the vanilla way that you
would lazy load any of your code.

106
00:07:28.720 --> 00:07:30.260
When anybody talks about code splitting or

107
00:07:30.260 --> 00:07:32.330
lazy loading bundles,
this is the technique.

108
00:07:35.940 --> 00:07:39.880
And so now that you actually know how
to do this, when you think about it,

109
00:07:39.880 --> 00:07:45.400
now you can tie together the concept of,
well wait, if I’m

110
00:07:45.400 --> 00:07:51.370
not using 62% of my code,
that entire chunk,

111
00:07:52.620 --> 00:07:57.470
that entire set of modules or unused code,
that’s something that you should be

112
00:07:57.470 --> 00:08:02.089
instead lazy loading when that
functionality’s actually needed, right?

113
00:08:03.450 --> 00:08:04.270
And a lot of the time,

114
00:08:04.270 --> 00:08:07.360
it just adds up to being a really large
library that you don't need upfront.

115
00:08:09.020 --> 00:08:13.290
Actually, that's a great, that should
be one thing that I wanna showcase.

116
00:08:13.290 --> 00:08:19.257
So if you haven't followed along,

117
00:08:19.257 --> 00:08:22.407
I'm just gonna check this branch out.

118
00:08:22.407 --> 00:08:25.218
But what we're gonna do next is
take a really heavy library, and

119
00:08:25.218 --> 00:08:26.581
just load it asynchronously.

