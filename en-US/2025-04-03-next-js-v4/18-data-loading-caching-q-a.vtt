WEBVTT

1
00:00:00.443 --> 00:00:04.222
&gt;&gt; Speaker 1: When we use
the loading.tsx in the background,

2
00:00:04.222 --> 00:00:09.491
does it know it's related to
the suspense component in the layout?

3
00:00:09.491 --> 00:00:14.579
&gt;&gt; Scott Moss: I got rid of this,
the loading.tsx is essentially

4
00:00:14.579 --> 00:00:19.903
the fallback that gets placed
inside of a suspense for

5
00:00:19.903 --> 00:00:23.828
your children that gets added for you.

6
00:00:23.828 --> 00:00:27.059
So as you can see in the layout,
I don't have the suspense anymore.

7
00:00:27.059 --> 00:00:27.787
I got rid of it.

8
00:00:27.787 --> 00:00:31.187
I mean, it's still being imported
at the top, but I'm not using it.

9
00:00:31.187 --> 00:00:33.061
The suspense is no longer
here in the layout.

10
00:00:33.061 --> 00:00:35.101
If you have the loading,
you don't need the suspense.

11
00:00:35.101 --> 00:00:37.878
Next.js will do essentially what we did.

12
00:00:37.878 --> 00:00:41.390
It will wrap this in a suspense for
you, and then for the fallback,

13
00:00:41.390 --> 00:00:42.915
it will use this component.

14
00:00:42.915 --> 00:00:45.880
So you're essentially telling next.js,

15
00:00:45.880 --> 00:00:50.056
wrap the children in a suspense and
use this JSX as a fallback.

16
00:00:50.056 --> 00:00:53.370
&gt;&gt; Speaker 2: So it just automatically
goes in between your layout and

17
00:00:53.370 --> 00:00:54.291
its children.

18
00:00:54.291 --> 00:00:55.146
&gt;&gt; Scott Moss: Yep.

19
00:00:59.372 --> 00:01:00.233
Cool.

20
00:01:00.233 --> 00:01:00.860
Any other questions?

21
00:01:00.860 --> 00:01:02.042
Yep.

22
00:01:02.042 --> 00:01:04.712
&gt;&gt; Speaker 1: Just to make sure
I'm understanding the terms.

23
00:01:04.712 --> 00:01:10.820
Suspending versus caching is
the same as dynamic versus static.

24
00:01:10.820 --> 00:01:16.055
&gt;&gt; Scott Moss: Ooh, yeah, in the regards
to what Next.js understands,

25
00:01:16.055 --> 00:01:18.463
if you suspend something,

26
00:01:18.463 --> 00:01:24.135
you're telling Next.js that I
always want this to be dynamic.

27
00:01:24.135 --> 00:01:25.461
This could change at any time.

28
00:01:25.461 --> 00:01:28.445
So I want this to be live every time.

29
00:01:28.445 --> 00:01:32.240
Every time someone goes to this route,
always hit the server,

30
00:01:32.240 --> 00:01:35.606
always run this function,
always calculate it again,

31
00:01:35.606 --> 00:01:38.918
just like an API route,
just always go and do it again.

32
00:01:38.918 --> 00:01:46.154
Caching is like, actually,
I don't want this to be run every time.

33
00:01:46.154 --> 00:01:48.882
I want this to be stored in a cache.

34
00:01:48.882 --> 00:01:50.947
And you can do that on a page level.

35
00:01:50.947 --> 00:01:53.011
You can do that on a function level.

36
00:01:53.011 --> 00:01:55.057
You can go as nested as you
want with the use cache.

37
00:01:55.057 --> 00:01:58.557
So in that case it would be static.

38
00:01:58.557 --> 00:02:03.097
But those caches can have expiration times
on them, so they're not completely static.

39
00:02:03.097 --> 00:02:07.384
They can expire and
then be executed live again.

40
00:02:07.384 --> 00:02:12.289
So it's not like completely static as
in it will never change, it's just, I

41
00:02:12.289 --> 00:02:17.278
want you to cache this up until I tell you
to stop caching it or until it expires.

42
00:02:17.278 --> 00:02:24.232
Whereas suspense is never cached.

43
00:02:24.232 --> 00:02:27.576
I think the way they model it
now that it's just coming to me,

44
00:02:27.576 --> 00:02:30.345
it's basically just how
an API route would work.

45
00:02:30.345 --> 00:02:33.751
If you put a network caching
layer in front of an API route,

46
00:02:33.751 --> 00:02:38.131
something like Cloudflare or something
like that, or whatever you use for

47
00:02:38.131 --> 00:02:41.557
caching, it could be any type of CDN,
proxy, whatever.

48
00:02:41.557 --> 00:02:43.709
There's always a TTL.

49
00:02:43.709 --> 00:02:49.897
You can warm up the cache
when you mutate the database.

50
00:02:49.897 --> 00:02:53.335
When you write to a table,
you might go clear the cache or expire or

51
00:02:53.335 --> 00:02:56.351
evict things out of the cache
because the data is old now.

52
00:02:56.351 --> 00:02:58.202
You might put some new things in there.

53
00:02:58.202 --> 00:02:59.667
They modeled it after that.

54
00:02:59.667 --> 00:03:02.584
So it's like if you put
a suspense on something,

55
00:03:02.584 --> 00:03:06.015
you're just gonna go to
the database every single time.

56
00:03:06.015 --> 00:03:07.097
It's never gonna be cached.

57
00:03:07.097 --> 00:03:10.792
But if you wanna add some type
of network caching layer,

58
00:03:10.792 --> 00:03:15.114
then you would say use cache and
then that would put a cache in front

59
00:03:15.114 --> 00:03:20.008
of whatever async operation you're
doing up until you want it to expire.

60
00:03:20.008 --> 00:03:24.009
And you can expire it manually or
you can expire it with a ttl.

61
00:03:24.009 --> 00:03:25.470
So that's kind of the way
I think about it.

62
00:03:25.470 --> 00:03:29.100
It works the same way as like
you would cache API routes,

63
00:03:29.100 --> 00:03:31.272
just a different flavor of that.

64
00:03:31.272 --> 00:03:34.488
&gt;&gt; Speaker 3: In terms of the data
access layer functions again, so

65
00:03:34.488 --> 00:03:39.218
we're kind of calling the get current
user within these components, right?

66
00:03:39.218 --> 00:03:46.287
Like new issue, for example, for
deleteIssue button that one is use client.

67
00:03:46.287 --> 00:03:47.640
So that one was a client one.

68
00:03:47.640 --> 00:03:52.243
So would that have an issue using
those data access error functions and

69
00:03:52.243 --> 00:03:54.984
like that if we were
to call that in there?

70
00:03:54.984 --> 00:03:58.289
&gt;&gt; Scott Moss: Okay, so you're saying-
&gt;&gt; Speaker 3: Since it's a client

71
00:03:58.289 --> 00:04:02.698
sizes use client,
would that cause issues like calling those

72
00:04:02.698 --> 00:04:06.782
Dell functions in there since
those are server related?

73
00:04:06.782 --> 00:04:10.362
&gt;&gt; Scott Moss: Well, delete issue.

74
00:04:10.362 --> 00:04:14.832
Cuz you're saying deleteIssue
has a dependency on,

75
00:04:14.832 --> 00:04:18.317
can you take me to delete issue, please?

76
00:04:18.317 --> 00:04:21.848
Okay, that was where.

77
00:04:21.848 --> 00:04:22.856
Maybe I didn't make it yet.

78
00:04:22.856 --> 00:04:23.625
I didn't make it yet.

79
00:04:23.625 --> 00:04:27.764
Okay, well, first of all, let's look at
deleteIssue will be coming from action.

80
00:04:27.764 --> 00:04:32.058
So it would be a server action and
not a data access layer function.

81
00:04:32.058 --> 00:04:33.132
So yeah.

82
00:04:33.132 --> 00:04:35.146
&gt;&gt; Speaker 3: That one's fine.

83
00:04:35.146 --> 00:04:39.548
But so we were calling the actual new
issue, for example, we were calling

84
00:04:39.548 --> 00:04:44.453
the get current user, which is one of
those data access layer functions, right?

85
00:04:44.453 --> 00:04:46.584
I see.
We wouldn't be able to do the same thing

86
00:04:46.584 --> 00:04:48.500
in that delete issue button, correct?

87
00:04:48.500 --> 00:04:52.624
&gt;&gt; Scott Moss: You can call these
functions in server actions if you want,

88
00:04:52.624 --> 00:04:55.850
cuz these are just regular
node JS functions.

89
00:04:55.850 --> 00:04:57.262
They have no idea what
they're going to like.

90
00:04:57.262 --> 00:05:00.791
You can call them if you want, because
they both have access to the same thing.

91
00:05:00.791 --> 00:05:04.743
They both are expected to be ran
during some type of request cycle,

92
00:05:04.743 --> 00:05:08.850
whether that's during a server action or
a react server component.

93
00:05:08.850 --> 00:05:11.639
So the expectation is that they
should have access to the same

94
00:05:11.639 --> 00:05:13.451
thing no matter when they're called.

95
00:05:13.451 --> 00:05:14.471
So that is a good pattern.

96
00:05:14.471 --> 00:05:17.482
Some people will just
have these just be like,

97
00:05:17.482 --> 00:05:20.878
these are functions that
will just run on a request,

98
00:05:20.878 --> 00:05:25.679
whether it's a react server component or
whether it's a server action.

99
00:05:25.679 --> 00:05:28.261
And then inside your server
actions you can pull these in.

100
00:05:28.261 --> 00:05:30.773
But I don't think you would pull
server actions into these though.

101
00:05:30.773 --> 00:05:32.595
It would be the other way around.

102
00:05:32.595 --> 00:05:34.292
That answer your question?

103
00:05:34.292 --> 00:05:34.842
&gt;&gt; Speaker 3: Yeah, somewhat.

104
00:05:34.842 --> 00:05:40.645
I mean, so is like the delete Issue,
but is that a server side component.

105
00:05:40.645 --> 00:05:41.678
&gt;&gt; Scott Moss: Delete Issue?

106
00:05:41.678 --> 00:05:43.898
This button right here,
this is a client component.

107
00:05:43.898 --> 00:05:44.593
&gt;&gt; Speaker 3: Client component.
&gt;&gt; Scott Moss: Yes,

108
00:05:44.593 --> 00:05:45.786
this is a client component.

109
00:05:45.786 --> 00:05:47.808
So it can use server actions.

110
00:05:47.808 --> 00:05:48.984
Right, cuz you can use.

111
00:05:48.984 --> 00:05:50.213
So this is the part that
I was talking about.

112
00:05:50.213 --> 00:05:54.817
So far we've used server
actions with the use

113
00:05:54.817 --> 00:05:59.796
action state hook but
you can can just call this.

114
00:05:59.796 --> 00:06:03.011
You can just put this on an on click and
call it and it'll work.

115
00:06:03.011 --> 00:06:04.463
It'll work just fine.

116
00:06:04.463 --> 00:06:09.279
Cuz I want you to think of when you
see a server action is like this is

117
00:06:09.279 --> 00:06:12.710
a function that is
essentially doing a fetch.

118
00:06:12.710 --> 00:06:19.063
You can just call a server action from
any interaction in a client component,

119
00:06:19.063 --> 00:06:22.986
just like you can do
the same thing with a fetch.

120
00:06:22.986 --> 00:06:25.607
So the client component doesn't care.

121
00:06:25.607 --> 00:06:26.507
It's just gonna call this.

122
00:06:26.507 --> 00:06:27.808
In this case, we're doing it.

123
00:06:27.808 --> 00:06:30.363
We haven't talked about it, but
we're gonna do a usetransition.

124
00:06:30.363 --> 00:06:35.844
And this is how you would get
the similar functionality

125
00:06:35.844 --> 00:06:41.935
we got from use action state but
without having to use a form.

126
00:06:41.935 --> 00:06:44.164
In this case, this would be like,
what is this?

127
00:06:44.164 --> 00:06:45.733
HandleDelete I'm guessing it's on a click,
so.

128
00:06:45.733 --> 00:06:49.651
So on a click call handleDelete and
this just starts a transition and

129
00:06:49.651 --> 00:06:51.380
I'll talk about that later.

130
00:06:51.380 --> 00:06:54.354
This is like a react specific thing,
but I don't have to.

131
00:06:54.354 --> 00:06:56.510
I could just call await deleteIssue
without this transition.

132
00:06:56.510 --> 00:07:00.720
And it'll just do it because essentially
this is just a fetch that's going to

133
00:07:00.720 --> 00:07:03.788
the server, it's doing a thing and
it's coming back.

134
00:07:03.788 --> 00:07:07.347
It's almost as if you made
this function yourself and

135
00:07:07.347 --> 00:07:09.652
literally put fetch inside of it.

136
00:07:09.652 --> 00:07:13.164
So there's no issue with
it using an action.

137
00:07:13.164 --> 00:07:17.787
Now if you try to use
one of these functions

138
00:07:17.787 --> 00:07:22.686
inside of delete Issue, it would not work.

139
00:07:22.686 --> 00:07:23.880
&gt;&gt; Speaker 3: Right,
that's what I figured.

140
00:07:23.880 --> 00:07:27.043
&gt;&gt; Scott Moss: Yeah, it would not work
because you don't have Use Server at

141
00:07:27.043 --> 00:07:27.547
the top.

142
00:07:27.547 --> 00:07:29.655
It'd be like,
this is just a regular node function.

143
00:07:29.655 --> 00:07:32.070
In fact,
I don't think it would even compile.

144
00:07:32.070 --> 00:07:35.718
I think it'll just break as soon
as you try to, what's something in

145
00:07:35.718 --> 00:07:39.435
here that I know doesn't work like
this does not work on the browser.

146
00:07:39.435 --> 00:07:44.349
This would break immediately because
it doesn't know because you didn't

147
00:07:44.349 --> 00:07:45.759
give it a directive.

148
00:07:45.759 --> 00:07:48.540
It's like I just assumed this
is client side JavaScript, so

149
00:07:48.540 --> 00:07:50.131
it's just gonna try to bundle it.

150
00:07:50.131 --> 00:07:54.593
It's gonna try to bundle this
whole file into the client.

151
00:07:54.593 --> 00:07:58.768
And if that works for some reason,
it's definitely not gonna execute because

152
00:07:58.768 --> 00:08:01.439
there's no way in hell
this works in the browser.

153
00:08:01.439 --> 00:08:03.959
There's no way in hell, well,
maybe Drizzle works in the browser,

154
00:08:03.959 --> 00:08:04.529
I don't know.

155
00:08:04.529 --> 00:08:07.563
But a lot of this database stuff
doesn't work in a browser.

156
00:08:07.563 --> 00:08:09.314
So it's going to break then.

157
00:08:09.314 --> 00:08:12.045
&gt;&gt; Speaker 1: So many of those other
components within that directory,

158
00:08:12.045 --> 00:08:15.288
like new issue, for example,
those don't have a directive up top.

159
00:08:15.288 --> 00:08:17.904
So those are just like server
components by default?

160
00:08:17.904 --> 00:08:21.186
&gt;&gt; Scott Moss: Yes,
if you don't have a directive up top,

161
00:08:21.186 --> 00:08:24.930
you are essentially gonna
be a server component.

162
00:08:24.930 --> 00:08:28.242
Or if your parent, like for instance, if
those components are rendered in something

163
00:08:28.242 --> 00:08:31.416
that's a client component, then it's
assumed that those components are client

164
00:08:31.416 --> 00:08:34.789
components too, so they'll inherit from
their parent if you don't have something.

165
00:08:34.789 --> 00:08:37.562
Pages are different
because they're top level.

166
00:08:37.562 --> 00:08:39.514
There's nothing above a page.

167
00:08:39.514 --> 00:08:44.255
So by default those are react server
components unless you explicitly

168
00:08:44.255 --> 00:08:49.166
say Use Client, everything else kind
of just inherits from its parent.

169
00:08:49.166 --> 00:08:54.221
And then you'll run into issues is when
like for instance, if I make a component

170
00:08:54.221 --> 00:08:59.047
that's using hooks and I don't put use
client at the top and I import that and

171
00:08:59.047 --> 00:09:03.741
somewhere in that chain, that hierarchy,
there is a server component.

172
00:09:03.741 --> 00:09:06.559
It's gonna error out and be like, you
got to put use client on this component,

173
00:09:06.559 --> 00:09:07.381
you're using hooks.

174
00:09:07.381 --> 00:09:09.822
But if in that chain there
was all client components,

175
00:09:09.822 --> 00:09:13.470
it wouldn't error out because like,
you're just in a client component.

176
00:09:13.470 --> 00:09:18.220
So to avoid that,
it's good to be explicit about whether or

177
00:09:18.220 --> 00:09:20.694
not you're in a server or not.

178
00:09:20.694 --> 00:09:21.661
Unless you're in a page.

179
00:09:21.661 --> 00:09:22.647
A page I think it's fine.

180
00:09:22.647 --> 00:09:25.742
You don't always have to
put if it's client or not.

181
00:09:25.742 --> 00:09:28.594
But for everything that's not a page,

182
00:09:28.594 --> 00:09:32.664
you should explicitly put if
you're in a client or not.

183
00:09:32.664 --> 00:09:35.950
&gt;&gt; Speaker 2: If we didn't
have the experimental flag on,

184
00:09:35.950 --> 00:09:39.675
I know you said that it
would be caching by default.

185
00:09:39.675 --> 00:09:44.324
Would supplying a loading state in
the router disable that caching and

186
00:09:44.324 --> 00:09:47.802
would like tell next.js
that it would be a dynamic?

187
00:09:47.802 --> 00:09:48.600
&gt;&gt; Scott Moss: No.

188
00:09:48.600 --> 00:09:49.364
&gt;&gt; Speaker 1: Okay.
&gt;&gt; Scott Moss: No.

189
00:09:49.364 --> 00:09:50.506
[LAUGH]
&gt;&gt; Speaker 1: It really

190
00:09:50.506 --> 00:09:51.226
wants to cache for you.

191
00:09:51.226 --> 00:09:54.234
&gt;&gt; Scott Moss: Yeah, that has no
effect on whether it caches or not.

192
00:09:54.234 --> 00:09:55.405
&gt;&gt; Speaker 1: Okay.

193
00:09:55.405 --> 00:09:56.165
&gt;&gt; Scott Moss: Nothing to do with it.

194
00:09:56.165 --> 00:10:00.051
The loading is still a thing and
it will still apply a suspense,

195
00:10:00.051 --> 00:10:05.050
but it would only show it the first time
and then the second time it'll be cached.

196
00:10:05.050 --> 00:10:07.832
So yeah, it has like look man,

197
00:10:07.832 --> 00:10:12.766
the caching before dynamic I O and
use cache was crazy.

198
00:10:12.766 --> 00:10:13.405
&gt;&gt; Speaker 2: Got you.
So

199
00:10:13.405 --> 00:10:17.090
that's the three day session
on caching and validation.

200
00:10:17.090 --> 00:10:20.022
&gt;&gt; Scott Moss: It is literally saying like
it's in the docs like and I'll link it.

201
00:10:20.022 --> 00:10:26.660
You wanna check it out but in my opinion,
man, use Canary, use this until it's done.

202
00:10:26.660 --> 00:10:27.742
It's way better.

203
00:10:27.742 --> 00:10:30.620
Everything else is really,
really difficult in my opinion.

