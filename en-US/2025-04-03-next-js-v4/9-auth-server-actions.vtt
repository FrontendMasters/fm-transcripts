WEBVTT

1
00:00:00.000 --> 00:00:00.895
&gt;&gt; Scott Moss: Let's do it.

2
00:00:00.895 --> 00:00:05.057
So I already have some stuff in here,
like the Schemas and things like that.

3
00:00:05.057 --> 00:00:07.389
If you'd never used Zod,
it's pretty simple,

4
00:00:07.389 --> 00:00:10.736
you're just describing the shape and
the requirements for it.

5
00:00:10.736 --> 00:00:13.335
And now we are just going
to make our function.

6
00:00:13.335 --> 00:00:16.950
So the first one we want to
make is going to be sign in.

7
00:00:16.950 --> 00:00:19.472
Also I have this mock delay thing,
you can use it or not.

8
00:00:19.472 --> 00:00:22.480
It just simulates the delay so
you can actually.

9
00:00:22.480 --> 00:00:24.432
Otherwise the app's gonna move so
damn fast,

10
00:00:24.432 --> 00:00:27.504
you're not gonna see loading states and
stuff like that on localhost.

11
00:00:27.504 --> 00:00:32.030
So you can use it or not, put in whatever
time you want, it's just simulating stuff.

12
00:00:32.030 --> 00:00:33.970
So let's make sign in.

13
00:00:35.630 --> 00:00:42.530
So I'm gonna say, export const signin.

14
00:00:44.270 --> 00:00:49.985
And for all my TypeScript people who
just cannot live without TypeScript,

15
00:00:49.985 --> 00:00:53.974
because we're gonna use this
as an action on a form,

16
00:00:53.974 --> 00:00:58.892
as a Server Action,
it's gonna always be passed the FormData.

17
00:00:58.892 --> 00:01:02.236
This is a type that's
part of the HTML spec.

18
00:01:02.236 --> 00:01:05.908
So we can use the FormData type, and
we're always gonna return a Promise,

19
00:01:05.908 --> 00:01:09.136
which in this case I already have
a type called ActionResponse.

20
00:01:09.136 --> 00:01:11.576
So I'm just gonna say, FormData here.

21
00:01:11.576 --> 00:01:15.700
It's gonna be type FormData and

22
00:01:15.700 --> 00:01:22.430
it's going to return
a Promise of ActionResponse.

23
00:01:23.970 --> 00:01:24.747
There we go.

24
00:01:28.093 --> 00:01:32.914
So the first thing we wanna do is we want
to get the data so we can abstract it.

25
00:01:32.914 --> 00:01:35.159
We can do that by doing FormData.get.

26
00:01:35.159 --> 00:01:39.258
This is because this is a map,
yeah, FormData is a map.

27
00:01:39.258 --> 00:01:43.170
So we can use the get method on it
to get the methods that we want.

28
00:01:43.170 --> 00:01:45.522
We haven't made the form yet,
but just assume for

29
00:01:45.522 --> 00:01:49.176
now that this form has two fields,
one called email, one called password.

30
00:01:49.176 --> 00:01:52.248
When we make the form, we'll ensure
that those are the names of the fields.

31
00:01:52.248 --> 00:01:54.667
So we wanna get that, so let's do that.

32
00:01:54.667 --> 00:01:58.600
So we can say, data = some object.

33
00:01:58.600 --> 00:02:05.764
Email will be
formData.get('email') as string.

34
00:02:05.764 --> 00:02:09.813
And then password would be

35
00:02:09.813 --> 00:02:18.285
formData.get('password') as a string,
cool.

36
00:02:18.285 --> 00:02:23.154
Now that we have that, what we
wanna do is we want to validate it.

37
00:02:23.154 --> 00:02:26.000
There's a lot of ways to validate it
with Zod, I'm gonna do a safe parse.

38
00:02:26.000 --> 00:02:30.100
This essentially won't
throw an error if it fails,

39
00:02:30.100 --> 00:02:35.504
instead will return an object with
a success or an error property.

40
00:02:35.504 --> 00:02:38.384
If I do a regular parse it'll
just throw an error if it fails.

41
00:02:38.384 --> 00:02:41.639
So let's do a safe parse, and

42
00:02:41.639 --> 00:02:47.248
if it's not successful,
then you can't sign in.

43
00:02:47.248 --> 00:02:49.813
You didn't pass this form validation, so

44
00:02:49.813 --> 00:02:53.242
something about your email
password stuff is messed up.

45
00:02:53.242 --> 00:02:59.671
So in this case we'll say,
validationResult =,

46
00:02:59.671 --> 00:03:05.834
I already have the SignInSchema.safeParse.

47
00:03:05.834 --> 00:03:13.374
We're gonna pass in our data, and then we
can say, if (!validationResult.success).

48
00:03:13.374 --> 00:03:17.631
We wanna go ahead and return that
ActionResponse that has error and

49
00:03:17.631 --> 00:03:20.833
all that stuff, so
I'll say, success: false.

50
00:03:20.833 --> 00:03:23.623
Actually, I'll just copy that,
make it faster.

51
00:03:27.005 --> 00:03:30.009
So we'll do that...Why is this freaking
out... Object literal may only specify known properties,

52
00:03:30.009 --> 00:03:31.661
and property 'success' does not exist.

53
00:03:31.661 --> 00:03:38.316
It's right there, [LAUGH] it says success.

54
00:03:38.316 --> 00:03:41.743
See, this is why I don't use TypeScript,
it's clearly wrong at this point.

55
00:03:41.743 --> 00:03:47.402
Function lacks ending return statement and
return.

56
00:03:47.402 --> 00:03:49.442
Cuz I haven't returned anything yet.

57
00:03:49.442 --> 00:03:54.026
No, I don't know, TypeScript errors,
whatever, that's TypeScript.

58
00:03:54.026 --> 00:03:57.284
&gt;&gt; Student: I think it's not liking
that the function is an async either.

59
00:03:57.284 --> 00:03:58.221
&gt;&gt; Scott Moss: Maybe that's it.

60
00:04:02.597 --> 00:04:05.996
That somehow fixed that,
[LAUGH] TypeScript.

61
00:04:05.996 --> 00:04:10.310
[LAUGH] I don't know, man.

62
00:04:10.310 --> 00:04:13.505
Well, I know it's freaking out now because
I don't have a return statement outside of

63
00:04:13.505 --> 00:04:14.234
an if statement.

64
00:04:14.234 --> 00:04:17.499
If I do this, it'll be happier,
it's like, well,

65
00:04:17.499 --> 00:04:19.981
you might return something undefined.

66
00:04:19.981 --> 00:04:24.752
That's why it's freaking out, but I
haven't gotten there yet, leave me alone,

67
00:04:24.752 --> 00:04:26.745
stop screaming at me, cool, so.

68
00:04:26.745 --> 00:04:30.462
And then the next thing is,
let's find the user by the email.

69
00:04:30.462 --> 00:04:34.641
We haven't made this function, so
let's just assume that it's made,

70
00:04:34.641 --> 00:04:36.342
but it's not implemented.

71
00:04:36.342 --> 00:04:37.886
So let's assume that it's gonna work.

72
00:04:37.886 --> 00:04:40.492
We'll have to go back and
make this function for it to be useful.

73
00:04:40.492 --> 00:04:46.240
So we'll say, user = await getUserbyEmail,

74
00:04:46.240 --> 00:04:51.422
and that will be already imported for you.

75
00:04:51.422 --> 00:04:54.023
Up here you can see right now
it says it has no exported

76
00:04:54.023 --> 00:04:58.060
member because we haven't made that yet,
so we'll go do that in a little bit.

77
00:04:58.060 --> 00:04:59.440
So user by email.

78
00:05:00.540 --> 00:05:05.886
And then if it's not a user,
then yeah, we just want to say, no,

79
00:05:05.886 --> 00:05:11.262
tell the user that, hey,
that's an invalid email or password.

80
00:05:11.262 --> 00:05:14.956
Don't tell them which one, you don't wanna
expose your logic, but you just say that.

81
00:05:14.956 --> 00:05:19.553
And then from there, we wanna verify
the password from the password that they

82
00:05:19.553 --> 00:05:23.596
passed in with the password that
exists on the user in the database.

83
00:05:23.596 --> 00:05:28.524
So we can say isPassword, let's type

84
00:05:28.524 --> 00:05:34.074
exactly what I had here, PasswordValid.

85
00:05:34.074 --> 00:05:42.636
We can say await verifyPassword with
(data.password, and user.password).

86
00:05:47.047 --> 00:05:48.168
And guess what?

87
00:05:48.168 --> 00:05:50.705
Same thing, if it's not valid,
get out of here.

88
00:05:53.957 --> 00:05:56.988
Pretty much the same thing we had, so
I'm just gonna copy and paste that.

89
00:05:56.988 --> 00:06:01.134
And again, don't say,
your password is wrong,

90
00:06:01.134 --> 00:06:06.020
cuz now they know that that email
exists in your database, yes.

91
00:06:07.160 --> 00:06:11.992
&gt;&gt; Student: Why do we need to put the use
server at the top when all of these

92
00:06:11.992 --> 00:06:15.581
are server components by default, right?

93
00:06:15.581 --> 00:06:16.644
&gt;&gt; Scott Moss: So the question is,

94
00:06:16.644 --> 00:06:20.654
why do we need to put use server at the
top if all these are server components?

95
00:06:20.654 --> 00:06:24.462
So none of these are components,
these are all just functions,

96
00:06:24.462 --> 00:06:26.444
that's one thing to recognize.

97
00:06:26.444 --> 00:06:29.245
And then two,
if I don't put the use server here,

98
00:06:29.245 --> 00:06:31.267
these are just regular functions.

99
00:06:31.267 --> 00:06:36.022
They won't have access to the request,
Next.js won't make routes for

100
00:06:36.022 --> 00:06:39.094
these, if I don't put that directive here.

101
00:06:39.094 --> 00:06:42.876
They'll just be treated like a regular
file that I can import and use anywhere.

102
00:06:42.876 --> 00:06:47.787
And if I try to,
if I don't do this and I try to import

103
00:06:47.787 --> 00:06:52.772
this into a React component,
it's gonna break.

104
00:06:52.772 --> 00:06:57.634
It's 100% gonna break because there's
a bunch of node specific stuff in

105
00:06:57.634 --> 00:07:00.720
these libraries that
won't run on the browser.

106
00:07:01.870 --> 00:07:06.838
This right here is literally telling
Next.js, hey, these functions

107
00:07:06.838 --> 00:07:11.885
that I'm making, can you go make routes
for them and make sure that their

108
00:07:11.885 --> 00:07:17.550
code is bundled with the server modules
and not with the client modules?

109
00:07:17.550 --> 00:07:20.646
That is what this directive
is telling Next.js.

110
00:07:20.646 --> 00:07:24.000
Without that,
you just have regular functions and

111
00:07:24.000 --> 00:07:27.050
those functions will not
work in the browser.

112
00:07:29.080 --> 00:07:31.792
There are other ways to use
the use the use server directive.

113
00:07:31.792 --> 00:07:33.642
This has nothing to do with Next.js,
it's React.

114
00:07:33.642 --> 00:07:38.069
So definitely recommend checking
out Brian Holt's course on it, but

115
00:07:38.069 --> 00:07:42.820
you could on a function level do
a directive here at the top of a function.

116
00:07:44.040 --> 00:07:48.912
But you typically would only do this
if you were making the function in

117
00:07:48.912 --> 00:07:50.080
a component.

118
00:07:50.080 --> 00:07:54.580
If you're making all the functions in
a separate file, just put them all here.

119
00:07:54.580 --> 00:07:56.850
Just do it once and
everything here gets exported.

120
00:08:00.496 --> 00:08:02.806
&gt;&gt; Scott Moss: Cool, any other questions?

121
00:08:02.806 --> 00:08:07.278
&gt;&gt; Student: Are there any security
implications to be aware of, or

122
00:08:07.278 --> 00:08:13.322
is everything pretty handled for
you by Next.js as far as security goes?

123
00:08:13.322 --> 00:08:18.712
&gt;&gt; Scott Moss: There are some foot guns,
you could expose secret values because

124
00:08:18.712 --> 00:08:24.301
technically none of your code from
this gets bundled in the client.

125
00:08:24.301 --> 00:08:27.686
But if you use environment
variables in such a way,

126
00:08:27.686 --> 00:08:30.140
you could expose them to the client.

127
00:08:31.440 --> 00:08:36.353
I forgot the exact scenario in which that
can happen, cuz I think they mostly have

128
00:08:36.353 --> 00:08:40.559
made it almost impossible for
you to do that now since Next.js 15.

129
00:08:40.559 --> 00:08:43.328
But there used to be a case
where Server Actions

130
00:08:43.328 --> 00:08:46.814
could leak sensitive environment
variables on a client.

131
00:08:46.814 --> 00:08:49.984
But other than that,
I haven't come across anything.

132
00:08:49.984 --> 00:08:53.224
And I mean, after we do this and
you can look at the network tab and

133
00:08:53.224 --> 00:08:57.004
you can kind of see what's going on
underneath the hood to see what they're

134
00:08:57.004 --> 00:08:59.057
sending and what they're not sending.

135
00:08:59.057 --> 00:09:01.898
But no, it's essentially just
creating routes for you.

136
00:09:01.898 --> 00:09:04.724
Password is not valid.

137
00:09:04.724 --> 00:09:08.216
Cool, assuming we passed all that,
let's create a session and

138
00:09:08.216 --> 00:09:11.265
let's tell the client that,
hey, you're good to go.

139
00:09:11.265 --> 00:09:15.816
So await createSession for

140
00:09:15.816 --> 00:09:20.746
the user.id, and then return

141
00:09:20.746 --> 00:09:25.115
{ success: true}, oops.

142
00:09:25.115 --> 00:09:29.903
With message: 'Signed in

143
00:09:29.903 --> 00:09:34.489
successfully', cool.

144
00:09:34.489 --> 00:09:35.630
So we got that.

145
00:09:37.540 --> 00:09:40.502
So good practice to wrap all
this stuff in a try catch just

146
00:09:40.502 --> 00:09:42.025
in case something happens.

147
00:09:42.025 --> 00:09:46.463
You should always do that on anything
server side, so I'll just do that.

148
00:09:46.463 --> 00:09:53.154
Try,
&gt;&gt; Scott Moss: Catch,

149
00:09:54.222 --> 00:09:57.780
there we go.

150
00:09:57.780 --> 00:10:01.880
And then, if there was an error,
then we'll just do this.

151
00:10:03.150 --> 00:10:07.721
No, definitely wanna log that error, so

152
00:10:07.721 --> 00:10:12.694
send it to your error
service if you have one.

153
00:10:20.329 --> 00:10:25.145
&gt;&gt; Scott Moss: 'Something bad happened',
cool.

154
00:10:25.145 --> 00:10:26.899
And what's this talking about?

155
00:10:26.899 --> 00:10:29.599
Success message,
you gotta do a message too.

156
00:10:29.599 --> 00:10:34.430
I'll do the same thing, cool.

157
00:10:34.430 --> 00:10:38.398
Okay, so that's sign in.

158
00:10:38.398 --> 00:10:43.715
Sign up is a little less work, but
mostly the same, so let's do that.

159
00:10:55.829 --> 00:10:56.337
&gt;&gt; Scott Moss: Cool,

160
00:10:56.337 --> 00:11:01.778
pretty much the same thing when it comes
to getting the data and validating.

161
00:11:01.778 --> 00:11:06.332
So we can just copy that, it's gonna
be pretty much the same schema too.

162
00:11:06.332 --> 00:11:09.260
I don't think I made a different schema,
I did.

163
00:11:09.260 --> 00:11:10.117
Why did I make it?

164
00:11:10.117 --> 00:11:14.588
Yeah, there's a confirmPassword,
that's right, forgot about that.

165
00:11:14.588 --> 00:11:20.644
So let's get the confirmPassword:

166
00:11:20.644 --> 00:11:30.190
from formData.get('confirmPassword'),
cool.

167
00:11:30.190 --> 00:11:33.433
So look at that,
change this to sign up schema.

168
00:11:36.220 --> 00:11:40.659
&gt;&gt; Scott Moss: If
(!validationResult.success) gonna

169
00:11:40.659 --> 00:11:43.465
return success: false,.

170
00:11:51.067 --> 00:11:52.462
&gt;&gt; Scott Moss: What did I put down here?

171
00:11:52.462 --> 00:11:54.622
Make sure it's exactly the same.

172
00:11:54.622 --> 00:12:01.184
'Validation failed', and
then errors would be,

173
00:12:01.184 --> 00:12:06.267
yeah, those validation errors there.

174
00:12:06.267 --> 00:12:15.108
So call
validationResults.error.flatten().filledE-

175
00:12:15.108 --> 00:12:18.287
rrors, yeah, cool.

176
00:12:21.261 --> 00:12:28.130
Next thing we wanna do is, okay, cool,
if that's all good, we want to attempt to.

177
00:12:28.130 --> 00:12:31.884
Well, in this case it's checking to
see if the user's in the database.

178
00:12:31.884 --> 00:12:33.447
But what you would typically do is,

179
00:12:33.447 --> 00:12:37.106
on the database level is just make sure
you have a unique constraint on the email.

180
00:12:37.106 --> 00:12:41.148
So the database would just store an error
so you don't have to check first,

181
00:12:41.148 --> 00:12:44.626
that would be pretty redundant,
but just being explicit here.

182
00:12:44.626 --> 00:12:47.370
So just check to make sure the user
is there, and then if it's not,

183
00:12:47.370 --> 00:12:49.140
then we wanna kinda do the same thing, so.

184
00:12:54.641 --> 00:13:00.070
&gt;&gt; Scott Moss: ExistingUser
= await getUserbyEmail().

185
00:13:01.090 --> 00:13:05.197
This will be (data.email).

186
00:13:05.197 --> 00:13:10.193
If there is an (existingUser),

187
00:13:10.193 --> 00:13:13.984
return success: false,

188
00:13:13.984 --> 00:13:18.991
message: 'You already have'.

189
00:13:18.991 --> 00:13:23.766
I don't know what you would put here
to not spook somebody into giving away

190
00:13:23.766 --> 00:13:26.860
that somebody already has an account.

191
00:13:26.860 --> 00:13:31.816
You'd be like, 'Nah', [LAUGH] cuz
if I put this email already exists,

192
00:13:31.816 --> 00:13:35.164
I'm like, I knew they had an account here.

193
00:13:35.164 --> 00:13:37.310
So I don't know what you would put there.

194
00:13:43.290 --> 00:13:50.450
&gt;&gt; Scott Moss: 'Stop trying to spoof me',
something like that, cool.

195
00:13:50.450 --> 00:13:54.462
And then from there, then yeah,
you actually would create the user,

196
00:13:54.462 --> 00:13:57.184
create the session success: true,
all that.

197
00:13:57.184 --> 00:13:58.944
So let's try to create the user.

198
00:13:58.944 --> 00:14:01.149
If the user doesn't get created for
some reason, we'll throw an error.

199
00:14:01.149 --> 00:14:06.111
So user = await createUser

200
00:14:06.111 --> 00:14:10.641
with the data.email and

201
00:14:10.641 --> 00:14:15.177
then a data.password.

202
00:14:15.177 --> 00:14:22.371
If (!user) for some reason,
you just return something like this.

203
00:14:30.892 --> 00:14:36.478
&gt;&gt; Scott Moss: Cool, and
then from there we can await

204
00:14:36.478 --> 00:14:42.066
the session with the (user.id) and

205
00:14:42.066 --> 00:14:46.431
then return success: true,

206
00:14:46.431 --> 00:14:51.604
message: 'Account created'.

207
00:14:51.604 --> 00:14:54.299
There we go, and should have
did a try catch at the top, but

208
00:14:54.299 --> 00:14:55.509
I'm just gonna do it now.

209
00:15:01.467 --> 00:15:02.422
&gt;&gt; Scott Moss: Whoa, whoa, whoa.

210
00:15:09.382 --> 00:15:10.782
&gt;&gt; Scott Moss: And there's an error.

211
00:15:10.782 --> 00:15:13.954
This is log it and

212
00:15:13.954 --> 00:15:18.940
return success: false,

213
00:15:18.940 --> 00:15:26.880
message: 'something bad happened'.

214
00:15:30.180 --> 00:15:33.360
And there we go, should be good, cool.

215
00:15:35.860 --> 00:15:37.103
Any questions on those?

216
00:15:39.997 --> 00:15:43.628
&gt;&gt; Scott Moss: Okay, sign out is pretty
simple, you just delete the session.

217
00:15:43.628 --> 00:15:45.104
So let's just make that right quick.

218
00:16:00.092 --> 00:16:03.976
&gt;&gt; Scott Moss: You just
say await deleteSession().

219
00:16:07.811 --> 00:16:14.767
&gt;&gt; Scott Moss: There we go, and then if
you couldn't, then yeah, throw the error.

220
00:16:14.767 --> 00:16:16.249
Yeah, I guess in this
case if you couldn't,

221
00:16:16.249 --> 00:16:17.617
you probably just wanna throw the error.

222
00:16:17.617 --> 00:16:21.854
So I guess I'm just catching it to
log it and report it to sentry or

223
00:16:21.854 --> 00:16:24.682
something, I'm so used to using sentry.

224
00:16:35.218 --> 00:16:40.593
&gt;&gt; Scott Moss: There we go, and
then, whatever, regardless, error or

225
00:16:40.593 --> 00:16:48.285
not, this finally what we're gonna do is
try to redirect, or I guess in this case.

226
00:16:48.285 --> 00:16:51.243
Yeah, I guess if you sign out, no matter
what, we always wanna redirect you.

227
00:16:51.243 --> 00:16:53.621
So we can use this redirect
method from Next.js and

228
00:16:53.621 --> 00:16:56.838
we can say redirect them to sign in
after they sign out, error or not.

229
00:17:01.330 --> 00:17:02.518
&gt;&gt; Student: Quick question,

230
00:17:02.518 --> 00:17:07.520
that redirect is essentially running
on a function on the server, right?

231
00:17:07.520 --> 00:17:08.294
&gt;&gt; Scott Moss: Mm-hm.

232
00:17:08.294 --> 00:17:15.447
&gt;&gt; Student: So let's say, Next.js
does the redirect on the client side?

233
00:17:15.447 --> 00:17:19.521
Because the server is just indicating it
to the client side that it needs to do

234
00:17:19.521 --> 00:17:22.629
a redirect, or
how that redirect actually work?

235
00:17:22.629 --> 00:17:23.518
&gt;&gt; Scott Moss: Great question.

236
00:17:23.518 --> 00:17:26.892
Yeah, question is, how does this redirect
happening if it's running on the server?

237
00:17:26.892 --> 00:17:28.589
Is Next.js telling a client?

238
00:17:28.589 --> 00:17:30.837
Nope, it's so much simpler than that.

239
00:17:30.837 --> 00:17:34.181
It's the same way you would do a redirect
on any server you've ever done.

240
00:17:34.181 --> 00:17:40.159
It's literally redirecting the request
with either a status code 303, whatever

241
00:17:40.159 --> 00:17:45.914
300 status code you wanna redirect it
to permanent, temporary, whatever.

242
00:17:45.914 --> 00:17:49.610
It's literally doing that cuz
it is essentially a request.

243
00:17:49.610 --> 00:17:54.548
They just do such a good job with
the SDK of this that it doesn't feel

244
00:17:54.548 --> 00:17:56.778
like you're in a request.

245
00:17:56.778 --> 00:18:03.834
But this is a route handler, essentially,
it just doesn't feel like it.

246
00:18:03.834 --> 00:18:08.046
It's just like it's using
a regular function, but

247
00:18:08.046 --> 00:18:13.119
you have access to the full request,
including redirecting,

248
00:18:13.119 --> 00:18:16.578
cookies, headers, everything, yeah.

249
00:18:16.578 --> 00:18:19.525
Only if it's a use server.

250
00:18:19.525 --> 00:18:23.726
If you don't have that,
it's just a regular function and

251
00:18:23.726 --> 00:18:26.995
it will throw an error
if you try to redirect.

252
00:18:26.995 --> 00:18:29.062
You're not even in a request,
or you try to use cookies,

253
00:18:29.062 --> 00:18:30.495
you don't have access to the request.

254
00:18:30.495 --> 00:18:34.003
So this means make these API routes.

255
00:18:34.003 --> 00:18:37.617
Whenever you see this,
I want you to think make these API routes,

256
00:18:37.617 --> 00:18:39.390
that's how I think about it.

257
00:18:39.390 --> 00:18:43.097
Obviously, we're not using this right now,
and a lot of stuff that we're using hasn't

258
00:18:43.097 --> 00:18:45.566
even been implemented, so
it's just not gonna work.

259
00:18:45.566 --> 00:18:50.110
So what we're gonna have to do next
is implement the client side of this.

260
00:18:50.110 --> 00:18:52.872
So the forms that actually call this,
right?

261
00:18:52.872 --> 00:18:57.522
And then we'll have to implement
these things like getUserbyEmail and,

262
00:18:57.522 --> 00:18:59.098
where's the other one?

263
00:18:59.098 --> 00:19:00.248
Is that the only one I had?

264
00:19:00.248 --> 00:19:03.494
GetUserbyEmail, this stuff's already done.

265
00:19:03.494 --> 00:19:06.102
So yeah, I think it's just
getUserbyEmail that we have to make.

