WEBVTT

1
00:00:00.160 --> 00:00:06.820
&gt;&gt; Scott Moss: Now we need to go to
our issues id page and get the issue.

2
00:00:08.240 --> 00:00:09.752
Well, first get the Params.

3
00:00:09.752 --> 00:00:10.464
Talk about that.

4
00:00:10.464 --> 00:00:15.001
Get the issue from the Params and
then from there go ahead and

5
00:00:15.001 --> 00:00:16.704
hook everything up.

6
00:00:16.704 --> 00:00:17.992
Everything here is pretty standard.

7
00:00:17.992 --> 00:00:21.444
There's nothing in here that's
super specific to Next.js.

8
00:00:21.444 --> 00:00:24.320
We're not suspending anything or
anything like that.

9
00:00:24.320 --> 00:00:27.205
It's pretty straightforward,
it's all just read only data.

10
00:00:27.205 --> 00:00:29.660
So, nothing new to learn there.

11
00:00:29.660 --> 00:00:34.676
But the important part is this, especially
this part cuz this is actually new.

12
00:00:34.676 --> 00:00:35.668
This part right here,

13
00:00:35.668 --> 00:00:39.252
it looks a little strange cuz you're just
awaiting a thing and not a function.

14
00:00:39.252 --> 00:00:42.316
This is relatively new and
latest version of Next.js.

15
00:00:42.316 --> 00:00:45.747
So let's go to our issues page,

16
00:00:45.747 --> 00:00:51.600
which should be issues
[id]/edit page right here.

17
00:00:52.918 --> 00:00:59.089
I'm sorry, no, we need to make a page for
the issues page right here actually.

18
00:00:59.089 --> 00:01:01.478
I don't have it.

19
00:01:01.478 --> 00:01:05.790
So you need to make issues id and
then page.tsx here and

20
00:01:05.790 --> 00:01:09.179
that's where our issues page is gonna be.

21
00:01:14.361 --> 00:01:17.991
I'm just gonna grab these
imports cuz it's a lot,

22
00:01:17.991 --> 00:01:21.628
put them in there and
then we can just make our page.

23
00:01:21.628 --> 00:01:26.140
So export, I'll say,

24
00:01:26.140 --> 00:01:29.750
const IssuePage,

25
00:01:29.750 --> 00:01:35.170
export default IssuePage.

26
00:01:37.820 --> 00:01:45.092
So all pages by default
have access to the request.

27
00:01:45.092 --> 00:01:47.420
So you can get the request
through the props.

28
00:01:47.420 --> 00:01:51.844
You can also get access
to in this case params.

29
00:01:51.844 --> 00:01:57.148
And the reason we get access to
params is because this page,

30
00:01:57.148 --> 00:02:02.108
it is a route of a dynamic segment,
this id right here.

31
00:02:02.108 --> 00:02:04.148
So we get access to the params.

32
00:02:04.148 --> 00:02:08.460
So here we can actually
get params like this.

33
00:02:08.460 --> 00:02:13.593
What's new in the latest version of
Next.js is that params is async,

34
00:02:13.593 --> 00:02:15.488
so you have to await it.

35
00:02:15.488 --> 00:02:18.448
This literally wasn't
the case in Next.js 14.

36
00:02:18.448 --> 00:02:22.168
So if you don't await it, you'll
actually get an error in the console.

37
00:02:22.168 --> 00:02:25.411
I mean, I can show you but the reason I'm
telling you that is cuz I know people here

38
00:02:25.411 --> 00:02:26.952
are really crazy about typescript.

39
00:02:26.952 --> 00:02:30.699
So when you type it,
make sure you put a promise around it,

40
00:02:30.699 --> 00:02:33.944
and then for the type,
just look at your routes.

41
00:02:33.944 --> 00:02:35.642
I have an id here.

42
00:02:35.642 --> 00:02:40.134
If this was a child directory
of another dynamic segment,

43
00:02:40.134 --> 00:02:43.684
I would put those
properties in here as well.

44
00:02:43.684 --> 00:02:45.640
But there's only one, it's id.

45
00:02:47.140 --> 00:02:50.251
So I'm only gonna put id and
we'll put string this.

46
00:02:53.102 --> 00:02:54.100
There we go.

47
00:02:59.011 --> 00:03:02.228
So now that we have that,
we can get the id from params.

48
00:03:02.228 --> 00:03:07.430
So I can say id = await params.

49
00:03:07.430 --> 00:03:09.209
Make sure I put async on this.

50
00:03:09.209 --> 00:03:12.686
There we go, now we got the id.

51
00:03:12.686 --> 00:03:13.870
It's gonna comment these out.

52
00:03:13.870 --> 00:03:15.644
So I'll use them cuz it's annoying.

53
00:03:17.755 --> 00:03:22.126
So once we have the id, we can go
ahead and get the issue by that id.

54
00:03:22.126 --> 00:03:27.186
So I'll just say const issue =

55
00:03:27.186 --> 00:03:33.813
await getIssue which comment that out.

56
00:03:36.339 --> 00:03:41.784
And I'm going to parseInt this id.

57
00:03:41.784 --> 00:03:46.464
The reason I'm doing that is because
in the database all ids are numbers,

58
00:03:46.464 --> 00:03:50.840
but in route parameters
everything's always a string.

59
00:03:50.840 --> 00:03:53.416
So I have to convert it to a number.

60
00:03:53.416 --> 00:03:56.456
So I'm using parse integer to do that,
okay?

61
00:03:56.456 --> 00:04:01.561
If we do not have an issue,
because again, this is a server

62
00:04:01.561 --> 00:04:07.620
component which is essentially a request,
I can just do a notFound.

63
00:04:09.360 --> 00:04:13.668
This right here will redirect
the user to a page that Next.js

64
00:04:13.668 --> 00:04:18.136
by default already creates for
us, which is a Not Found page.

65
00:04:18.136 --> 00:04:23.031
You can override this page by making it
yourself, but this will just redirect to

66
00:04:23.031 --> 00:04:28.170
the Not Found page, which you can
override by doing a 404.tsx or js.

67
00:04:28.170 --> 00:04:29.146
So this will do that.

68
00:04:29.146 --> 00:04:34.094
You don't have to put a return statement
here because it's never going to go

69
00:04:34.094 --> 00:04:36.270
parse this no matter what you do.

70
00:04:37.450 --> 00:04:43.322
So we're good there and
then we have all that.

71
00:04:43.322 --> 00:04:44.746
We can just grab all this.

72
00:04:44.746 --> 00:04:47.496
There's nothing important here
that's specific to Next.js.

73
00:04:52.083 --> 00:04:55.907
Cool and let me uncomment all this stuff.

74
00:05:01.429 --> 00:05:06.301
Great, so the last thing is we need
to go make the getIssue function

75
00:05:06.301 --> 00:05:10.217
from the data access layer
because it does not exist.

76
00:05:14.483 --> 00:05:16.000
So let's go do that.

77
00:05:17.020 --> 00:05:18.876
Did I not add that in here?

78
00:05:18.876 --> 00:05:21.160
That's all right,
we'll just make it ourselves.

79
00:05:22.220 --> 00:05:26.140
So if we go here to the data access layer,
we have getIssues.

80
00:05:26.140 --> 00:05:27.685
We can just make getIssue.

81
00:05:34.244 --> 00:05:41.724
GetIssue is gonna take
an id which is a number and

82
00:05:41.724 --> 00:05:47.334
we're just gonna say issue = await

83
00:05:47.334 --> 00:05:54.263
db.query.issues.findFirst, where,

84
00:05:59.359 --> 00:06:06.530
The issues plural, which is the table,
.id is equal to the id that you passed in.

85
00:06:07.550 --> 00:06:09.870
Oops, I need a comma there.

86
00:06:09.870 --> 00:06:10.665
There we go.

87
00:06:14.588 --> 00:06:16.570
So let's try catch this.

88
00:06:28.822 --> 00:06:30.116
Well, I guess I'll just return it.

89
00:06:30.116 --> 00:06:32.212
It doesn't matter, it'll be null or not.

90
00:06:32.212 --> 00:06:35.956
Cuz we're already handling it in
the component if it's null or not.

91
00:06:35.956 --> 00:06:40.400
So I'll just return that and
then if it's error, say console.error.

92
00:06:41.700 --> 00:06:46.452
And I guess I'll just
throw the error again.

93
00:06:46.452 --> 00:06:47.860
I actually want this to break it.

94
00:06:47.860 --> 00:06:50.076
Well, no, I guess I'll just
return null if there's an error.

95
00:06:50.076 --> 00:06:51.732
That way you can do a notFound.

96
00:06:51.732 --> 00:06:52.469
&gt;&gt; Learner: I have a question.

97
00:06:52.469 --> 00:06:54.328
&gt;&gt; Scott Moss: Yes.
&gt;&gt; Learner: Any more of a drizzle question

98
00:06:54.328 --> 00:06:55.480
anything?

99
00:06:55.480 --> 00:06:58.200
Sometimes in seeing queries like for
the getIssues.

100
00:06:58.200 --> 00:07:01.664
DX's layer function above it,
I've seen with user: true.

101
00:07:01.664 --> 00:07:02.432
&gt;&gt; Scott Moss: Yeah.

102
00:07:02.432 --> 00:07:03.320
&gt;&gt; Learner: What is that doing?

103
00:07:03.320 --> 00:07:04.700
&gt;&gt; Scott Moss: It's a join table.

104
00:07:04.700 --> 00:07:05.640
&gt;&gt; Learner: Okay.
&gt;&gt; Scott Moss: Yeah, so

105
00:07:05.640 --> 00:07:07.296
if you go look at the schema,

106
00:07:07.296 --> 00:07:10.592
the issues has a one to many
relationship with the user.

107
00:07:10.592 --> 00:07:13.720
This is just saying
include go join that user.

108
00:07:13.720 --> 00:07:18.600
Which I guess technically this would
be a left join or something like that.

109
00:07:18.600 --> 00:07:20.488
So that's essentially what it's doing.

110
00:07:20.488 --> 00:07:22.938
&gt;&gt; Learner: Got you, so
it's just including the user info on your?

111
00:07:22.938 --> 00:07:23.500
Got you.

112
00:07:23.500 --> 00:07:25.860
&gt;&gt; Scott Moss: Mm-hm, yep.

113
00:07:26.920 --> 00:07:28.696
&gt;&gt; Learner: So
you don't necessarily need that here?

114
00:07:28.696 --> 00:07:30.392
&gt;&gt; Scott Moss: No, yeah,
I don't need that here.

115
00:07:30.392 --> 00:07:32.290
I don't know if I even need it here.

116
00:07:32.290 --> 00:07:33.651
[LAUGH] I just did it.

117
00:07:33.651 --> 00:07:35.260
[LAUGH] I don't even know.

118
00:07:36.360 --> 00:07:39.064
Cool, any questions on
the on the getIssue?

119
00:07:39.064 --> 00:07:44.017
Okay, so if we didn't break anything,
we should be able to

120
00:07:44.017 --> 00:07:48.832
go look at an individual issue and
hopefully that works.

121
00:07:48.832 --> 00:07:51.024
So let's just see.

122
00:07:51.024 --> 00:07:53.640
No errors here, that's always good.

123
00:07:53.640 --> 00:07:55.904
Go to our Mode, new refresh.

124
00:07:55.904 --> 00:07:59.265
If you don't have any issues,
create one first and then click here.

125
00:08:02.382 --> 00:08:05.064
&gt;&gt; Scott Moss: Let's see, uh-huh.

126
00:08:05.064 --> 00:08:06.902
You guys should know this error by now.

127
00:08:06.902 --> 00:08:09.911
This is good.

128
00:08:09.911 --> 00:08:11.544
&gt;&gt; Learner: It's the dynamic I/O one,
right?

129
00:08:11.544 --> 00:08:14.290
&gt;&gt; Scott Moss: Yeah, so what is the issue?

130
00:08:14.290 --> 00:08:15.186
&gt;&gt; Learner: We gotta suspend it.

131
00:08:15.186 --> 00:08:17.066
&gt;&gt; Learner 2: Yeah,
you gotta suspend the page.

132
00:08:17.066 --> 00:08:19.585
&gt;&gt; Scott Moss: We gotta suspend it, right?

133
00:08:21.942 --> 00:08:23.426
&gt;&gt; Scott Moss: There's
two of them actually.

134
00:08:23.426 --> 00:08:25.170
So, what's this one?

135
00:08:25.170 --> 00:08:27.314
It's gonna read properties,
I don't define reading email.

136
00:08:27.314 --> 00:08:28.418
Okay, we'll get to that one.

137
00:08:28.418 --> 00:08:32.335
Okay, so yeah,
this is the new feature, right?

138
00:08:32.335 --> 00:08:36.164
And I'm glad that they actually do
this because like I was saying before,

139
00:08:36.164 --> 00:08:39.562
if you don't [LAUGH] opting out
of the caching that's invisible,

140
00:08:39.562 --> 00:08:41.691
that's happening for you all the time.

141
00:08:41.691 --> 00:08:45.527
Is so hard to get around whereas this
is just super straightforward and

142
00:08:45.527 --> 00:08:47.276
it just tells you what to do.

143
00:08:47.276 --> 00:08:55.508
So first we have to understand where
the data fetching is happening.

144
00:08:55.508 --> 00:08:57.769
And sometimes it's not as
obvious as you would think, but

145
00:08:57.769 --> 00:08:59.119
in this case it is pretty obvious.

146
00:08:59.119 --> 00:09:03.719
The reason I'm saying that is because if
you push down the data fetching like we

147
00:09:03.719 --> 00:09:06.796
did with the navigation sidebar,
with that email.

148
00:09:06.796 --> 00:09:08.009
If you push it all the way down,

149
00:09:08.009 --> 00:09:10.271
sometimes it's not as easy
as just suspending the page.

150
00:09:10.271 --> 00:09:13.893
You got to go all the way down to where
that is and suspend that or use a cache.

151
00:09:13.893 --> 00:09:20.241
So that's why I'm saying that,
but anyway, cool.

152
00:09:20.241 --> 00:09:25.607
Do you guys remember the three ways
I showed you how to add a suspense?

153
00:09:25.607 --> 00:09:27.027
&gt;&gt; Learner: In the layout
you could add it.

154
00:09:27.027 --> 00:09:27.969
&gt;&gt; Scott Moss: Mm-hm.

155
00:09:27.969 --> 00:09:30.736
&gt;&gt; Learner: Or
loading a loading component.

156
00:09:30.736 --> 00:09:31.608
&gt;&gt; Scott Moss: Loading component?

157
00:09:31.608 --> 00:09:32.642
Yeah, what was the other one?

158
00:09:32.642 --> 00:09:33.482
Do you remember?

159
00:09:33.482 --> 00:09:35.930
&gt;&gt; Learner: Well, that one suspended
that would actually use the cache.

160
00:09:35.930 --> 00:09:38.082
Is there another way to
suspend it than those two?

161
00:09:38.082 --> 00:09:39.154
&gt;&gt; Scott Moss: Yeah,
it's the way that you-

162
00:09:39.154 --> 00:09:39.962
&gt;&gt; Learner 2: Writing the component.

163
00:09:39.962 --> 00:09:41.258
&gt;&gt; Scott Moss: Yeah,
you just do write in the component.

164
00:09:41.258 --> 00:09:42.762
Yeah, so for this page.

165
00:09:42.762 --> 00:09:44.546
So this is the page that
needs to be suspended, right?

166
00:09:44.546 --> 00:09:45.770
So this needs to be suspended.

167
00:09:45.770 --> 00:09:48.810
So I don't recommend doing this, but

168
00:09:48.810 --> 00:09:53.090
I could just take literally all of this,
right?

169
00:09:53.090 --> 00:09:57.538
Putting in another component and then put
that component in here and suspend it.

170
00:09:57.538 --> 00:10:00.973
So it's like don't do that.

171
00:10:00.973 --> 00:10:03.834
[LAUGH] Yeah,
the simplest way is just to add a loading.

172
00:10:03.834 --> 00:10:08.882
So we'll say loading.tsx like this and

173
00:10:08.882 --> 00:10:14.230
then I'll just say const or yeah, const.

174
00:10:15.730 --> 00:10:22.530
Let's just call it IssueLoader
= some components.

175
00:10:22.530 --> 00:10:26.038
Remember, this loading component
is not the suspense component.

176
00:10:26.038 --> 00:10:29.294
It's the fallback for
the suspense component, right?

177
00:10:29.294 --> 00:10:34.292
By adding a loading file,
you're telling Next.js to wrap your

178
00:10:34.292 --> 00:10:39.710
page in a suspense, and
then use this component as a fallback.

179
00:10:39.710 --> 00:10:40.734
So remember that.

180
00:10:40.734 --> 00:10:44.110
So you won't be putting suspense
in here or anything like that.

181
00:10:44.110 --> 00:10:47.396
Let's say loading.

182
00:10:54.505 --> 00:10:57.516
&gt;&gt; Scott Moss: Cool, so fix that error.

183
00:10:57.516 --> 00:10:58.592
Now we have another error.

184
00:10:58.592 --> 00:11:03.514
This one is, cannot read properties
of undefined (reading 'email').

185
00:11:03.514 --> 00:11:07.417
Looks like it happened on
the server side maybe.

186
00:11:09.583 --> 00:11:12.114
&gt;&gt; Learner: I think it is asking for
that user join.

187
00:11:12.114 --> 00:11:14.058
&gt;&gt; Scott Moss: Maybe it is asking for
the user join, yeah.

188
00:11:14.058 --> 00:11:20.334
Let's see, let me hit Save right quick
to make sure I actually save everything.

189
00:11:22.479 --> 00:11:24.274
Cool, yeah, maybe it is.

190
00:11:24.274 --> 00:11:29.984
So in this case we will go back
to our data access layer and

191
00:11:29.984 --> 00:11:33.641
we will say can you give us the user.

192
00:11:37.878 --> 00:11:38.755
Like that.

193
00:11:42.344 --> 00:11:43.340
See if that fixes it.

194
00:11:43.340 --> 00:11:44.772
Yeah, I guess it did need the user.

195
00:11:44.772 --> 00:11:49.546
I had a really nice skeleton for this,
but I don't know what I did with it.

196
00:11:49.546 --> 00:11:52.842
And just so we can see the loading,
let's go ahead and

197
00:11:52.842 --> 00:11:57.316
simulate some delay here cuz it's
obviously just moving way too fast.

198
00:11:57.316 --> 00:12:00.540
So I'll go to getIssue.

199
00:12:00.540 --> 00:12:07.252
I'll add a mockDelay of some time and
there's our loading.

200
00:12:07.252 --> 00:12:09.244
Yeah, I've been using Drizzle for
about a year now.

201
00:12:09.244 --> 00:12:11.522
I switched from Prisma,
which I think is good.

202
00:12:11.522 --> 00:12:16.793
But I switched from Prisma because the
migrations were just really hard to do.

203
00:12:16.793 --> 00:12:20.654
[LAUGH] With Drizzle you can do them
programmatically, it was just so

204
00:12:20.654 --> 00:12:21.668
much easier.

205
00:12:21.668 --> 00:12:26.442
But since then I've learned how to
actually prevent myself from getting into

206
00:12:26.442 --> 00:12:28.468
a broken state on the database.

207
00:12:28.468 --> 00:12:32.068
So I don't commit breaking
changes on the database.

208
00:12:32.068 --> 00:12:34.821
So I probably could go back to Prisma
now that I actually know how to make

209
00:12:34.821 --> 00:12:35.624
proper changes.

210
00:12:35.624 --> 00:12:40.720
But Drizzle is actually just so
good, I just love it.

211
00:12:40.720 --> 00:12:43.718
&gt;&gt; Learner 2: So
what a drawback of doing the loading.tsx?

212
00:12:43.718 --> 00:12:47.447
Be that you can't really target a really
specific component for suspending, but

213
00:12:47.447 --> 00:12:49.160
you're just doing the whole page.

214
00:12:49.160 --> 00:12:49.736
&gt;&gt; Scott Moss: Exactly.

215
00:12:49.736 --> 00:12:54.520
The loading is for the entire page,
which would not work if you were

216
00:12:54.520 --> 00:12:58.634
pushing the loading all the way
down to a leaf component.

217
00:12:58.634 --> 00:13:02.530
So yeah, you have less accuracy and
it's a UX thing too, right?

218
00:13:02.530 --> 00:13:06.848
Look, the whole page is
blocked until I get the issue.

219
00:13:06.848 --> 00:13:10.706
Whereas if I was a little
clever about this,

220
00:13:10.706 --> 00:13:15.208
what on this page does not
need an issue to render?

221
00:13:15.208 --> 00:13:17.504
Well, this button doesn't need an Issue.

222
00:13:17.504 --> 00:13:19.694
This button doesn't need an Issue.

223
00:13:19.694 --> 00:13:23.352
All this is always gonna be the same,
no matter what issue is on the page.

224
00:13:23.352 --> 00:13:26.000
This box will always be
here no matter what.

225
00:13:26.000 --> 00:13:28.304
This box will be here
always no matter what.

226
00:13:28.304 --> 00:13:30.638
So I could-
&gt;&gt; Learner: You can skeleton in and out.

227
00:13:30.638 --> 00:13:33.686
&gt;&gt; Scott Moss: Exactly, so
you get that flexibility.

228
00:13:33.686 --> 00:13:37.230
But then you gotta push it all the way
down and you have to do all that.

229
00:13:37.230 --> 00:13:39.134
But yeah,
ideally that's what you would do.

230
00:13:39.134 --> 00:13:41.166
&gt;&gt; Learner: Here's a more
client-focused question.

231
00:13:41.166 --> 00:13:46.910
So you get to this page from previously
looking at the full list, right?

232
00:13:46.910 --> 00:13:49.918
Let's say you wanted to render
the title of the issue but

233
00:13:49.918 --> 00:13:51.524
then load the details later.

234
00:13:51.524 --> 00:13:52.995
&gt;&gt; Scott Moss: Mm-hm.

235
00:13:52.995 --> 00:13:59.453
&gt;&gt; Learner: You could do a combo of maybe
saving the title and client side state.

236
00:13:59.453 --> 00:14:05.213
And then navigating over having
the details be in a server component and

237
00:14:05.213 --> 00:14:08.101
then calling those up afterwards.

238
00:14:08.101 --> 00:14:10.785
&gt;&gt; Scott Moss: Well sure,
if you're coming from this page.

239
00:14:10.785 --> 00:14:11.571
&gt;&gt; Learner: Main list.
&gt;&gt; Scott Moss: Yeah.

240
00:14:11.571 --> 00:14:13.191
&gt;&gt; Learner: You wouldn't know
if you were refreshing the page.

241
00:14:13.191 --> 00:14:14.549
&gt;&gt; Scott Moss: Right, yeah.
If you refresh the page and yeah,

242
00:14:14.549 --> 00:14:15.140
you wouldn't know.

243
00:14:15.140 --> 00:14:16.705
Coming from this page, sure,

244
00:14:16.705 --> 00:14:20.629
you could save it to the client because
this is a client side route using link.

245
00:14:20.629 --> 00:14:24.384
So it takes us to the client side and
then you could get it.

246
00:14:24.384 --> 00:14:26.457
But because it is client side,

247
00:14:26.457 --> 00:14:30.928
you would have to wait until
the client bootstrapped to get that.

248
00:14:30.928 --> 00:14:32.232
So there would still be a delay.

249
00:14:32.232 --> 00:14:36.684
So I don't think you wouldn't actually
notice a difference because the client

250
00:14:36.684 --> 00:14:38.224
bootstraps after this.

251
00:14:38.224 --> 00:14:39.941
Then it would get the client side state.

252
00:14:39.941 --> 00:14:40.526
&gt;&gt; Learner: Okay.

253
00:14:40.526 --> 00:14:44.947
&gt;&gt; Scott Moss: So, it still really
wouldn't make a difference.

254
00:14:44.947 --> 00:14:48.091
Yeah, the only way to do it
is the way that I said that

255
00:14:48.091 --> 00:14:49.858
you'd have to do it, yeah.

256
00:14:49.858 --> 00:14:53.994
I mean, I guess a good way is this.

257
00:14:53.994 --> 00:15:00.347
I guess, you could do this.

258
00:15:00.347 --> 00:15:01.712
So you can put a layout here and

259
00:15:01.712 --> 00:15:05.610
in that layout you have these static
elements that are always here.

260
00:15:05.610 --> 00:15:07.034
That might be something you could do.

261
00:15:07.034 --> 00:15:10.349
But yeah,
I think the way that I would do it is,

262
00:15:10.349 --> 00:15:15.882
I would just break down these components
to do their own call to get an issue.

263
00:15:15.882 --> 00:15:19.517
And then we haven't talked about it yet,
but we'll talk about it soon,

264
00:15:19.517 --> 00:15:21.902
is then I would cache
that get issue function.

265
00:15:21.902 --> 00:15:25.296
So even though this component called
getIssue get an id and this component

266
00:15:25.296 --> 00:15:28.537
called getIssue with the same id,
it's only ever gonna call it once.

267
00:15:28.537 --> 00:15:29.189
&gt;&gt; Learner: Gonna call it once.

268
00:15:29.189 --> 00:15:30.190
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Learner: Cool, okay.

269
00:15:30.190 --> 00:15:32.316
&gt;&gt; Scott Moss: So
that way they can load independently and

270
00:15:32.316 --> 00:15:35.286
not know about each other,
but still get the same data.

271
00:15:35.286 --> 00:15:36.042
&gt;&gt; Learner 2: Stupid question.

272
00:15:36.042 --> 00:15:37.186
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Learner 2: If you have nested

273
00:15:37.186 --> 00:15:39.654
dynamic routes,
do parameters get nested as well?

274
00:15:39.654 --> 00:15:44.668
&gt;&gt; Scott Moss: If you have nested dynamic
routes, do parameters get nested?

275
00:15:44.668 --> 00:15:48.453
I'm pretty sure they remain flat.

276
00:15:48.453 --> 00:15:50.999
Where am I grabbing the parameters?

277
00:15:50.999 --> 00:15:56.897
Here, so in this case, let's say we had
another dynamic route above here and

278
00:15:56.897 --> 00:16:00.098
let's say it was called, I don't know.

279
00:16:00.098 --> 00:16:02.502
What's a good parameter value?

280
00:16:02.502 --> 00:16:04.358
&gt;&gt; Learner: Locale.

281
00:16:04.358 --> 00:16:05.078
&gt;&gt; Scott Moss: What'd you say?

282
00:16:05.078 --> 00:16:05.662
&gt;&gt; Learner: Locale.

283
00:16:05.662 --> 00:16:07.334
&gt;&gt; Scott Moss: Locale,
okay, locale, right?

284
00:16:07.334 --> 00:16:09.166
So then it would still just be flat.

285
00:16:09.166 --> 00:16:14.286
It would just be locale like that and
you could just grab it.

286
00:16:14.286 --> 00:16:16.094
So it wouldn't be in a nested object,

287
00:16:16.094 --> 00:16:18.454
it would just all be flat on parameters,
yeah.

288
00:16:18.454 --> 00:16:23.310
Now you might get an array of
parameters if you do a catch all.

289
00:16:23.310 --> 00:16:27.576
So if your route is a catch all route,
then this would not be a string,

290
00:16:27.576 --> 00:16:29.702
it would be an array of strings.

291
00:16:29.702 --> 00:16:36.134
I think that's it for creating or
deleting and editing the server actions.

292
00:16:36.134 --> 00:16:37.022
Pretty straightforward.

293
00:16:37.022 --> 00:16:41.304
I mean, not much is different from
what we kinda already went over.

294
00:16:41.304 --> 00:16:46.332
But what I wanted to hammer
home is just the pattern.

295
00:16:46.332 --> 00:16:50.579
At least I just wanted to show you
my pattern of how I go through and

296
00:16:50.579 --> 00:16:54.624
use the server actions to
respond to a client interaction.

297
00:16:54.624 --> 00:16:59.258
And then use the data access
layer functions to grab

298
00:16:59.258 --> 00:17:03.390
data during a React server render.

299
00:17:03.390 --> 00:17:04.230
So, pretty simple.

300
00:17:04.230 --> 00:17:07.650
And I think that's pretty much what
the Next.js docs recommend as well.

301
00:17:08.910 --> 00:17:09.591
And again,

302
00:17:09.591 --> 00:17:14.358
the easiest way to think about it is just
replace server actions with API calls.

303
00:17:14.358 --> 00:17:16.881
If you just mentally replace that,
it's like, okay,

304
00:17:16.881 --> 00:17:18.350
I was going to do a fetch here.

305
00:17:18.350 --> 00:17:21.350
I was gonna do a thing with React query.

306
00:17:21.350 --> 00:17:24.750
It's like,
now instead I'm gonna do a server action.

307
00:17:24.750 --> 00:17:25.974
Yeah, it works.

308
00:17:25.974 --> 00:17:29.234
And to me, it's crazy for
me to hear myself say that.

309
00:17:29.234 --> 00:17:31.786
Because it was, I don't know,
a year and a half ago where I was like,

310
00:17:31.786 --> 00:17:33.718
I don't know why people
would use server actions.

311
00:17:33.718 --> 00:17:37.166
These are just not, don't use them.

312
00:17:37.166 --> 00:17:41.774
But they've come a long way and
I have definitely changed my mind on them.

313
00:17:41.774 --> 00:17:45.380
And I honestly think it has little to
do with Next.js cuz they haven't really

314
00:17:45.380 --> 00:17:47.750
changed much as far as the DX for
server actions.

315
00:17:47.750 --> 00:17:49.110
It's more about React.

316
00:17:49.110 --> 00:17:51.790
React has added really good hooks.

317
00:17:51.790 --> 00:17:57.598
The biggest one was being able to do
async await inside of a transition hook,

318
00:17:57.598 --> 00:18:00.664
whereas you couldn't do that before.

319
00:18:00.664 --> 00:18:03.368
So I was like,
how do you await some async thing?

320
00:18:03.368 --> 00:18:04.109
What a transition?

321
00:18:04.109 --> 00:18:06.889
So yeah, it's really good now.

