WEBVTT

1
00:00:00.400 --> 00:00:03.100
&gt;&gt; Scott Moss: Let's try to get the
session, if there is no session, we will,

2
00:00:03.100 --> 00:00:04.400
okay, can you just go there?

3
00:00:04.400 --> 00:00:09.291
Thank you, there's no session,
we will turn null,

4
00:00:09.291 --> 00:00:12.659
so we can say session equals, wait,

5
00:00:12.659 --> 00:00:17.876
make this async get session like this,
if not a session,

6
00:00:17.876 --> 00:00:22.900
this person is not logged in,
there is no person here.

7
00:00:26.350 --> 00:00:30.997
If there is a session, we can try to get
the user by the database, no worries,

8
00:00:30.997 --> 00:00:35.360
if you don't have any experience with
databases or anything like that,

9
00:00:35.360 --> 00:00:39.870
it's super easy, I'm using something
called drizzle for the ORM (Object-relational mapping).

10
00:00:39.870 --> 00:00:45.459
It's pretty simple, so in this case we're
just going to do a select query from

11
00:00:45.459 --> 00:00:51.135
the users table where the user's ID
equals whatever the session's user ID is,

12
00:00:51.135 --> 00:00:57.190
so you don't have to know that part,
but it's trying to mix it up for you.

13
00:00:57.190 --> 00:01:01.116
Const user equals await db,

14
00:01:01.116 --> 00:01:05.533
select from import users,

15
00:01:05.533 --> 00:01:10.931
I guess I already have something called

16
00:01:10.931 --> 00:01:15.674
users, I'll call this results,

17
00:01:15.674 --> 00:01:19.780
there we go, and then where.

18
00:01:20.800 --> 00:01:24.442
There's a lot of ways you can do
the where stuff in Drizzle, but

19
00:01:24.442 --> 00:01:28.705
I'm gonna use this helper method
called eq, which stands for equals, so

20
00:01:28.705 --> 00:01:31.896
I can say equals,
I want the users table id property.

21
00:01:31.896 --> 00:01:35.533
If that equals whatever
the session.userId property is,

22
00:01:35.533 --> 00:01:39.607
then that's the match that I want,
this always returns an array,

23
00:01:39.607 --> 00:01:42.720
there's a match,
never returns the single one.

24
00:01:42.720 --> 00:01:46.869
So in this case I just return
the first thing in the array or

25
00:01:46.869 --> 00:01:48.864
if it's not there, null.

26
00:01:57.507 --> 00:02:03.504
We'll log this error if there's an error
and then from there just return null,

27
00:02:03.504 --> 00:02:07.979
so that is us getting the user by email,
so now if we do that,

28
00:02:07.979 --> 00:02:13.639
if we go back to Man, I don't want to
hit save here, like what did I change?

29
00:02:15.539 --> 00:02:19.321
I'm not gonna hit save there,
I don't know what's going on with that,

30
00:02:19.321 --> 00:02:22.793
if we go back to this auth this
getUserByEmail should now work,

31
00:02:22.793 --> 00:02:25.939
let me just get rid of the argument
that I was passing games.

32
00:02:25.939 --> 00:02:30.916
We don't actually need that, and
let's see if we can actually sign in or

33
00:02:30.916 --> 00:02:33.210
sign up now, so let's try that.

34
00:02:40.538 --> 00:02:46.725
Yeah, I fixed that already,
or did I not, I guess not,

35
00:02:46.725 --> 00:02:52.662
let me see, users,
why did it import it twice?

36
00:02:52.662 --> 00:02:58.267
That's weird, there we go,
okay, all right,

37
00:02:58.267 --> 00:03:05.516
sign up, I'll just say
admin@test.com password is admin,

38
00:03:05.516 --> 00:03:10.574
Admin Admin Admin,
try to sign in says nah,

39
00:03:10.574 --> 00:03:15.089
[LAUGH] that's actually really funny,

40
00:03:15.089 --> 00:03:19.020
let's see why it said that.

41
00:03:19.020 --> 00:03:23.376
So here if existing user,

42
00:03:23.376 --> 00:03:27.231
did I use that one already,

43
00:03:27.231 --> 00:03:33.264
I don't think I use that one, let's see,

44
00:03:33.264 --> 00:03:38.963
user@app.com adminadmin, adminadmin,

45
00:03:38.963 --> 00:03:44.997
okay, our shit's broke, let's fix it,

46
00:03:44.997 --> 00:03:50.890
so getUserByEmail is returning a match.

47
00:03:51.910 --> 00:03:56.740
So let's see what that is,

48
00:03:56.740 --> 00:04:00.940
log that on the server,

49
00:04:00.940 --> 00:04:07.241
admin@demo.com, adminadmin, adminadmin,

50
00:04:07.241 --> 00:04:11.861
and we get back this,

51
00:04:11.861 --> 00:04:20.198
I already have a session in here or
something.

52
00:04:20.198 --> 00:04:25.476
See getUserByEmail,
Users by, you know what,

53
00:04:25.476 --> 00:04:30.754
I just had a brain fart,
this is get user by email,

54
00:04:30.754 --> 00:04:35.029
not get the current user in the session,

55
00:04:35.029 --> 00:04:39.329
yeah, I don't know why I just did that?

56
00:04:39.329 --> 00:04:44.477
Well, that's good,
we can just rename this function,

57
00:04:44.477 --> 00:04:49.733
getCurrentUser, that's getCurrentUser,
I'm like,

58
00:04:49.733 --> 00:04:54.988
why is that doing that, okay,
and then getUserByEmail,

59
00:04:54.988 --> 00:05:00.917
let's just make that, sorry about that,
get the user by email?

60
00:05:00.917 --> 00:05:07.710
This one does take an email so
can do this and

61
00:05:07.710 --> 00:05:12.616
then do a try catch user would be

62
00:05:12.616 --> 00:05:17.521
await db, you actually do db,

63
00:05:17.521 --> 00:05:23.183
I'll need the async here db.users,

64
00:05:23.183 --> 00:05:26.260
that should work.

65
00:05:26.260 --> 00:05:32.868
db.query.users.findFirst and

66
00:05:32.868 --> 00:05:39.475
then where equals users.id or

67
00:05:39.475 --> 00:05:45.257
I'm sorry, users.email

68
00:05:45.257 --> 00:05:49.937
equals this email,

69
00:05:49.937 --> 00:05:54.616
so you can do that and

70
00:05:54.616 --> 00:06:00.121
then return user, return null,

71
00:06:00.121 --> 00:06:04.543
there you go.

72
00:06:08.571 --> 00:06:12.597
Little quick getUserByEmail,
which makes a lot more sense.

73
00:06:17.325 --> 00:06:22.234
And then now I can take this,

74
00:06:22.234 --> 00:06:26.325
go here, add my email,

75
00:06:26.325 --> 00:06:34.711
which in this case would
be data.email like that,

76
00:06:34.711 --> 00:06:40.029
and then this case right here,

77
00:06:40.029 --> 00:06:45.756
same thing, data.email, okay,

78
00:06:45.756 --> 00:06:50.257
I'll try that again now,

79
00:06:50.257 --> 00:06:58.060
User1@app.com, adminadmin, adminadmin.

80
00:06:59.560 --> 00:07:04.327
There we go,
I am now signed into the dashboard,

81
00:07:04.327 --> 00:07:07.581
I know I just went really fast, so

82
00:07:07.581 --> 00:07:12.348
I'll push this up if you
are looking to catch up,

83
00:07:12.348 --> 00:07:17.096
and I'll just leave this here for
one second.

84
00:07:17.096 --> 00:07:21.899
But before I move on, I think a really
good convention is to like put your

85
00:07:21.899 --> 00:07:26.703
stuff in folders that describe
the environment in which they run in, so

86
00:07:26.703 --> 00:07:29.204
like for me I have an actions folder.

87
00:07:29.204 --> 00:07:32.354
So I know that everything in here
is going to be a server action, and

88
00:07:32.354 --> 00:07:36.351
I have this file called dal that tells me
that these are not server actions, right,

89
00:07:36.351 --> 00:07:38.772
you could also name your
functions that way too.

90
00:07:38.772 --> 00:07:43.142
So all your actions might have
the name action in it, so

91
00:07:43.142 --> 00:07:48.747
you might have like sign in action
sign up action, so you just know that

92
00:07:48.747 --> 00:07:54.608
this is an action, it has access to
the request or something like that.

93
00:07:54.608 --> 00:07:58.247
Or put it in an object where
you have an actions object or

94
00:07:58.247 --> 00:08:01.017
something like that, just do it in a way,

95
00:08:01.017 --> 00:08:05.608
create your own conventions around
it because it can get confusing,

96
00:08:05.608 --> 00:08:11.020
I get confused by it all the time, as you
just saw, so, yeah, it takes a minute.

97
00:08:12.400 --> 00:08:17.255
&gt;&gt; Speaker 2: Is it fair to
say that server actions or

98
00:08:17.255 --> 00:08:22.265
functions are basically just Node code

99
00:08:22.265 --> 00:08:27.121
that's exposed by Next.js over HTTP,

100
00:08:27.121 --> 00:08:34.984
whereas your data layer type
stuff is just native Node code?

101
00:08:34.984 --> 00:08:38.611
&gt;&gt; Scott Moss: Yep, native Node
code that never leaves the server,

102
00:08:38.611 --> 00:08:43.772
whereas the server action is exposed
over HTTP, yep, that's the simplest

103
00:08:43.772 --> 00:08:50.700
solution I've ever heard someone describe
it as, so, yeah, pretty good, pretty much.

104
00:08:50.700 --> 00:08:52.172
&gt;&gt; Speaker 3: Another
organization question.

105
00:08:52.172 --> 00:08:53.415
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Speaker 3: Your actions need

106
00:08:53.415 --> 00:08:54.868
to be in the app directory?

107
00:08:54.868 --> 00:08:55.860
&gt;&gt; Scott Moss: No.
&gt;&gt; Speaker 3: Okay.

108
00:08:55.860 --> 00:08:57.640
&gt;&gt; Scott Moss: The only thing,
&gt;&gt; Speaker 3: That's just the route stuff.

109
00:08:57.640 --> 00:08:58.548
&gt;&gt; Scott Moss: Yes, just for routes.

110
00:08:58.548 --> 00:08:59.908
&gt;&gt; Speaker 3: Yeah,
I won't ask that anymore [LAUGH].

111
00:08:59.908 --> 00:09:03.536
&gt;&gt; Scott Moss: [LAUGH] Yeah,
that was good, that's a good question.

112
00:09:03.536 --> 00:09:04.652
&gt;&gt; Speaker 3: Triple checking.

113
00:09:04.652 --> 00:09:08.019
&gt;&gt; Scott Moss: Only routes and
API stuff, pages and API stuff,

114
00:09:08.019 --> 00:09:11.150
nothing else has to be
in the app directory.

115
00:09:11.150 --> 00:09:15.985
You can put all that shit down here and
like, literally until like two or

116
00:09:15.985 --> 00:09:20.577
three weeks ago, I would have just
put all this stuff down here, and

117
00:09:20.577 --> 00:09:23.566
I don't know, I just got bored, I guess.

118
00:09:23.566 --> 00:09:27.038
I just started putting here, so
that's where it is, there's no wrong or

119
00:09:27.038 --> 00:09:27.774
right answer.

120
00:09:27.774 --> 00:09:28.976
&gt;&gt; Speaker 3: I know a lot of folders.

121
00:09:28.976 --> 00:09:32.974
For instance, if you wanted to like make
a folder that says called server and

122
00:09:32.974 --> 00:09:35.150
then all the server stuff lived in it.

123
00:09:35.150 --> 00:09:39.120
&gt;&gt; Scott Moss: Yeah, that's a great, great
convention, all the server stuff is in

124
00:09:39.120 --> 00:09:43.623
here, put it all in there, yeah,
that works totally fine, yeah, wait,

125
00:09:43.623 --> 00:09:47.420
hold on, I think Next JS actually
has a server folder convention.

126
00:09:48.960 --> 00:09:52.647
I've never made a custom server with
Next.js, so I don't know, gotcha,

127
00:09:52.647 --> 00:09:54.320
they actually might.

128
00:09:54.320 --> 00:09:55.707
&gt;&gt; Speaker 3: You may not
want to call it that exactly.

129
00:09:55.707 --> 00:09:58.304
[LAUGH]
&gt;&gt; Scott Moss: Then let me see.

130
00:10:00.804 --> 00:10:04.052
&gt;&gt; Scott Moss: Is it called the server,
although they have a server.ts file, yeah,

131
00:10:04.052 --> 00:10:05.842
so you could be careful, probably?

132
00:10:05.842 --> 00:10:07.394
&gt;&gt; Speaker 3: Fine with directory.

133
00:10:07.394 --> 00:10:12.654
&gt;&gt; Scott Moss: Right, so
that's a thing, I've never used that,

134
00:10:12.654 --> 00:10:17.346
I hope I never have to,
[LAUGH] any questions?

135
00:10:17.346 --> 00:10:19.013
&gt;&gt; Speaker 2: I guess one more,

136
00:10:19.013 --> 00:10:24.238
this might just be my lack of
knowledge on the Node side,

137
00:10:24.238 --> 00:10:29.127
but is it, so
when you're doing like a getSession,

138
00:10:29.127 --> 00:10:34.017
you're, yeah,
maybe pulling it up would be good,

139
00:10:34.017 --> 00:10:38.120
so you're looking at cookies, right.

140
00:10:38.120 --> 00:10:42.689
And so is it,
when that function is called,

141
00:10:42.689 --> 00:10:48.122
it's always kind of assumed
that it's being called

142
00:10:48.122 --> 00:10:53.770
within the context of an active
like HTTP request.

143
00:10:53.770 --> 00:10:54.391
So.
&gt;&gt; Scott Moss: Yep.

144
00:10:54.391 --> 00:10:57.780
&gt;&gt; Speaker 2: That's why you can
be confident that when you're

145
00:10:57.780 --> 00:11:02.298
calling that function,
it's always in the right user context and

146
00:11:02.298 --> 00:11:06.897
you're getting the right cookie
associated with a specific user,

147
00:11:06.897 --> 00:11:10.274
you don't have to like
pass a user ID into this.

148
00:11:10.274 --> 00:11:13.684
&gt;&gt; Scott Moss: Right, it's literally
reading the headers that came in from

149
00:11:13.684 --> 00:11:17.160
the request and if you tried to
use this outside of the context,

150
00:11:17.160 --> 00:11:18.486
you would get an error.

151
00:11:18.486 --> 00:11:21.929
So it either worked because you
use it in the right place or

152
00:11:21.929 --> 00:11:25.373
it errored because you didn't
use it in the right place,

153
00:11:25.373 --> 00:11:30.560
it will literally break as soon as you try
to do this, nope, that doesn't work here.

154
00:11:32.220 --> 00:11:35.488
&gt;&gt; Speaker 2: And the only config you
have to do, or not even config, but

155
00:11:35.488 --> 00:11:36.580
just structure.

156
00:11:36.580 --> 00:11:40.756
You just have to make sure you're calling
it within one of those server components.

157
00:11:40.756 --> 00:11:42.700
And that's good.

158
00:11:42.700 --> 00:11:46.309
&gt;&gt; Scott Moss: Yep, right, so far I showed
you how to use this stuff in a server

159
00:11:46.309 --> 00:11:51.079
action, now I'm gonna show you how to use
this stuff in a server component, yeah,

160
00:11:51.079 --> 00:11:53.824
react should have been
like this from day one.

161
00:11:53.824 --> 00:11:58.293
Honestly, it really should, and also I
want you to know like everything I'm

162
00:11:58.293 --> 00:12:03.173
showing you now, I would say 80% of people
that use Next.js don't know it like this

163
00:12:03.173 --> 00:12:05.744
or know it this well or
even understand it.

164
00:12:05.744 --> 00:12:10.037
So to me this is like fundamentals,
but it's also pretty advanced,

165
00:12:10.037 --> 00:12:12.923
so you guys are ahead of
the game in my opinion,

166
00:12:12.923 --> 00:12:17.600
I have engineers that I work with that
I'm still trying to explain this to.

167
00:12:19.340 --> 00:12:23.525
And I don't think that it's hard,
I think it's just very different,

168
00:12:23.525 --> 00:12:26.596
it's very different because
once I understand it,

169
00:12:26.596 --> 00:12:30.932
I actually prefer this over making
API routes and TRPC, all this stuff.

170
00:12:30.932 --> 00:12:34.967
I was just like, if I could just make a
function and export it, and it was just on

171
00:12:34.967 --> 00:12:39.128
me to know when I'm supposed to use that
function, I'd rather do that than learn

172
00:12:39.128 --> 00:12:43.440
these different libraries and these
configurations, and I don't wanna do that.

173
00:12:45.260 --> 00:12:46.092
&gt;&gt; Speaker 4: Quick question.

174
00:12:46.092 --> 00:12:47.340
&gt;&gt; Scott Moss: Yes.

175
00:12:47.340 --> 00:12:53.141
&gt;&gt; Speaker 4: So is there a way to have
an open API exposure of APIs generated by

176
00:12:53.141 --> 00:12:58.572
Next.js if you need to expose
those APIs in a standard way?

177
00:12:58.572 --> 00:13:02.038
&gt;&gt; Scott Moss: Yeah, we're gonna get to
that, we're gonna make a developer API for

178
00:13:02.038 --> 00:13:04.738
our product so
you can see how to expose that, and yes,

179
00:13:04.738 --> 00:13:06.780
you can use open API for that.

180
00:13:06.780 --> 00:13:08.750
&gt;&gt; Speaker 4: Thank you, that's awesome.

181
00:13:08.750 --> 00:13:13.780
&gt;&gt; Speaker 2: And then one,
one kind of more follow up question

182
00:13:13.780 --> 00:13:18.319
to that is like, there's nothing saying or

183
00:13:18.319 --> 00:13:23.473
built into like Next that
prevents me from calling

184
00:13:23.473 --> 00:13:29.010
the sign in function just
like from Postman, right.

185
00:13:30.270 --> 00:13:34.384
&gt;&gt; Scott Moss: You wouldn't know the route
for it, so you wouldn't know how to,

186
00:13:34.384 --> 00:13:39.746
it doesn't have a route associated for it
until it's executed, if that makes sense,

187
00:13:39.746 --> 00:13:43.894
you wouldn't know what route to
type in a Postman to call it.

188
00:13:43.894 --> 00:13:47.207
&gt;&gt; Speaker 2: Okay, I thought in
the network tab, when we made the call,

189
00:13:47.207 --> 00:13:49.466
it just said like, /sign.

190
00:13:49.466 --> 00:13:51.743
&gt;&gt; Scott Moss: So
that was just like typical HTML5,

191
00:13:51.743 --> 00:13:55.371
if you make any action on a form,
it just does a post request to

192
00:13:55.371 --> 00:13:59.378
the page that you're on,
that's just how form actions work.

193
00:13:59.378 --> 00:14:00.422
&gt;&gt; Speaker 2: Right.
Because it's a form.

194
00:14:00.422 --> 00:14:01.273
It's a HTML5 form.

195
00:14:01.273 --> 00:14:02.157
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Speaker 2: Okay,.

196
00:14:02.157 --> 00:14:05.670
&gt;&gt; Scott Moss: So it just did that, but if
you use a server action outside of a form,

197
00:14:05.670 --> 00:14:08.691
which you can and we will,
then you're not going to know,

198
00:14:08.691 --> 00:14:12.820
then you're not gonna know, it's just
like, I don't know what URL that is.

199
00:14:12.820 --> 00:14:16.400
Next.js is gonna make one, so
you wouldn't know what it is, yeah.

200
00:14:18.340 --> 00:14:20.924
&gt;&gt; Speaker 3: That's almost a layer
of security in and of itself.

201
00:14:20.924 --> 00:14:22.300
&gt;&gt; Scott Moss: Yeah, it is, yeah.

