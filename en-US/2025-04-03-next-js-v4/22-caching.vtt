WEBVTT

1
00:00:00.400 --> 00:00:03.821
&gt;&gt; Scott Moss: Now we're gonna talk
about caching and memoizing and

2
00:00:03.821 --> 00:00:05.456
how much easier it is.

3
00:00:05.456 --> 00:00:09.648
It's an opt in caching, as you guys know,
through the errors that you saw.

4
00:00:09.648 --> 00:00:15.256
You have to decide on how you
want to treat dynamic pages.

5
00:00:15.256 --> 00:00:19.595
And by default,
Next JS detects dynamic pages for you,

6
00:00:19.595 --> 00:00:22.448
depending on what APIs you access.

7
00:00:22.448 --> 00:00:26.382
So if you access cookies,
if you fetch data on a server component,

8
00:00:26.382 --> 00:00:31.022
if you access parameters, if you access
short lived caches that Next JS offers

9
00:00:31.022 --> 00:00:36.011
you, if you access search parameters, if
you access headers, if I didn't say that

10
00:00:36.011 --> 00:00:40.662
already, there's probably something
else if you access any of that stuff.

11
00:00:40.662 --> 00:00:45.028
Next JS, this is a dynamic route,
and because it is a dynamic route,

12
00:00:45.028 --> 00:00:46.510
what do you want to do?

13
00:00:46.510 --> 00:00:48.894
Do you want to cache it or
do you want to suspend it?

14
00:00:48.894 --> 00:00:49.582
Which one?

15
00:00:49.582 --> 00:00:51.614
Right, so
that's where the error comes from.

16
00:00:51.614 --> 00:00:54.568
It won't show you that error
on a page that is not dynamic.

17
00:00:54.568 --> 00:00:58.086
So if you just made a regular page with
nothing dynamic on it, no data fetching,

18
00:00:58.086 --> 00:01:02.120
just pure JSX, you won't get that error
because it's like, this is a static page.

19
00:01:02.120 --> 00:01:02.656
I don't need to.

20
00:01:02.656 --> 00:01:03.648
I know what to do here.

21
00:01:03.648 --> 00:01:04.496
I'm just gonna cache it.

22
00:01:04.496 --> 00:01:08.480
This data never changes, so
it just caches the whole page.

23
00:01:08.480 --> 00:01:12.304
So it's only for dynamic pages,
which is essentially what people want it.

24
00:01:12.304 --> 00:01:17.984
Because I mean, I should have just took a
screenshot of what the docs look like and

25
00:01:17.984 --> 00:01:19.256
put it in here.

26
00:01:19.256 --> 00:01:22.590
What it was like to go through caching
before, what you're about to do now.

27
00:01:22.590 --> 00:01:26.340
There was like router cache,

28
00:01:26.340 --> 00:01:32.294
client caching, data caching, memoizing.

29
00:01:32.294 --> 00:01:34.509
It was just so many levels to it and
it was just really,

30
00:01:34.509 --> 00:01:35.806
really hard to understand.

31
00:01:35.806 --> 00:01:37.582
So we won't have to do that.

32
00:01:37.582 --> 00:01:38.726
So let's talk about caching.

33
00:01:38.726 --> 00:01:40.070
We've been talking about suspending.

34
00:01:40.070 --> 00:01:41.823
What if we go the other route and
we're like, actually,

35
00:01:41.823 --> 00:01:42.902
let's just cache this instead?

36
00:01:42.902 --> 00:01:44.094
What does that look like?

37
00:01:44.094 --> 00:01:46.770
So we'll go through an exercise
to see how easy it is.

38
00:01:48.540 --> 00:01:52.731
The first thing we want to do is take
advantage of this new directive called

39
00:01:52.731 --> 00:01:53.476
Use Cache.

40
00:01:53.476 --> 00:01:58.140
This is the only directive that
is not created by the React team.

41
00:01:58.140 --> 00:01:59.996
This one is actually created
by the Next JS team.

42
00:01:59.996 --> 00:02:01.492
It's called Use Cache.

43
00:02:01.492 --> 00:02:04.840
So if you're just using React or
if you're using Remix,

44
00:02:04.840 --> 00:02:07.228
this won't exist unless they make it.

45
00:02:07.228 --> 00:02:08.123
But as of right now,

46
00:02:08.123 --> 00:02:11.076
I don't know if they have any
plans on making any of this stuff.

47
00:02:11.076 --> 00:02:13.864
This is a Next JS exclusive thing.

48
00:02:13.864 --> 00:02:16.120
It's called Use Cache.

49
00:02:16.120 --> 00:02:19.536
So the way Use Cache works is you
can use it inside of a component.

50
00:02:19.536 --> 00:02:25.456
So this is like a page or a layout,
and it will cache that entire segment.

51
00:02:25.456 --> 00:02:29.138
So in the case of a layout,
if you put it at the top of a layout,

52
00:02:29.138 --> 00:02:32.620
that whole layout will be cached and
all of its children.

53
00:02:34.120 --> 00:02:36.241
And then down the leaf you can opt in for

54
00:02:36.241 --> 00:02:38.904
some of those parts to
be dynamic if you want.

55
00:02:38.904 --> 00:02:43.704
But that's more of like the same way,
whereas suspending the whole page would

56
00:02:43.704 --> 00:02:48.432
block the whole page from loading until
something loaded in would not be a good

57
00:02:48.432 --> 00:02:53.536
user experience, caching the whole page
might lead to stale data in some places.

58
00:02:53.536 --> 00:02:56.073
So you want to get really
granular with your caching for

59
00:02:56.073 --> 00:03:00.600
the same reasons you want to get really
granular with what you suspend, right?

60
00:03:00.600 --> 00:03:01.928
So that is the whole point.

61
00:03:01.928 --> 00:03:05.913
So to get around that,
you can put Use Cache in a function and

62
00:03:05.913 --> 00:03:07.638
not just a component.

63
00:03:07.638 --> 00:03:10.102
And when I say functions,
I'm not talking server actions.

64
00:03:10.102 --> 00:03:13.358
You cannot put Use Cache
in server actions,

65
00:03:13.358 --> 00:03:18.006
you cache the functions that you
use on the data access layer.

66
00:03:18.006 --> 00:03:22.449
So those functions that you use when
a server function is rendering,

67
00:03:22.449 --> 00:03:24.422
that's where you can cache.

68
00:03:24.422 --> 00:03:28.438
So any data fetching function for a React
server component, you can use cache.

69
00:03:28.438 --> 00:03:32.856
And that's how you get down to
as low as where you wanna be.

70
00:03:32.856 --> 00:03:37.248
So think of suspense is like getting down
to the one component that's fetching.

71
00:03:37.248 --> 00:03:41.135
And think about caching as like getting
down to the one function that's

72
00:03:41.135 --> 00:03:42.152
getting data.

73
00:03:42.152 --> 00:03:45.565
You wanna get as close as you can to that,
in my opinion, and

74
00:03:45.565 --> 00:03:49.820
that just leads to a smoother,
more predictable, cleaner experience.

75
00:03:50.920 --> 00:03:54.740
So first thing is you do
the use cache directive.

76
00:03:55.880 --> 00:03:58.808
What we're gonna do is let's go ahead and
cache the getIssues.

77
00:03:58.808 --> 00:04:03.178
So the getIssues is a function that
we use for the dashboard page, right?

78
00:04:03.178 --> 00:04:09.226
Did my JWT expire, I got to sign up again.

79
00:04:09.226 --> 00:04:12.278
Hold up,

80
00:04:12.278 --> 00:04:21.154
.admin@ai.com admin.

81
00:04:21.154 --> 00:04:22.630
Imagine having that domain.

82
00:04:24.650 --> 00:04:26.070
That would be insane.

83
00:04:27.620 --> 00:04:29.380
Absolutely insane.

84
00:04:29.380 --> 00:04:35.092
Okay, so the getIssues is the one
that's being called here, right?

85
00:04:35.092 --> 00:04:36.900
So we wanna cache this.

86
00:04:36.900 --> 00:04:39.692
So where I don't see this
skeleton every time I refresh.

87
00:04:39.692 --> 00:04:42.108
And I'm not doing a hard refresh,
I'm just doing a regular refresh.

88
00:04:42.108 --> 00:04:44.148
I'm doing Cmd+R on my MacBook Air.

89
00:04:44.148 --> 00:04:48.312
So regular refresh, it's still
clearly getting the issues over and

90
00:04:48.312 --> 00:04:51.228
over again because that
mock delay is running.

91
00:04:51.228 --> 00:04:53.116
So I know it's calling
that function every time.

92
00:04:53.116 --> 00:05:00.102
So if I go to my data access layer and
I go to getIssues at the top here,

93
00:05:00.102 --> 00:05:06.066
if I put use cache and
we save that, now I'm refreshing.

94
00:05:06.066 --> 00:05:07.770
I don't see it anymore.

95
00:05:07.770 --> 00:05:09.922
It's not calling that function anymore.

96
00:05:09.922 --> 00:05:11.194
It only called it that.

97
00:05:11.194 --> 00:05:12.450
I'll do a hard refresh.

98
00:05:12.450 --> 00:05:16.810
There's a heart refresh,
then every regular refresh after that.

99
00:05:16.810 --> 00:05:20.950
To do a heart refresh you can
do Cmd+Shift+R on a MacBook.

100
00:05:23.450 --> 00:05:26.410
So that's it you get
caching just by doing that.

101
00:05:26.410 --> 00:05:27.722
It's really great.

102
00:05:27.722 --> 00:05:28.922
Super free.

103
00:05:28.922 --> 00:05:33.266
This would have been turned on by default
in the previous versions of Next JS.

104
00:05:33.266 --> 00:05:34.830
Okay, but now we have a problem.

105
00:05:35.930 --> 00:05:41.507
So what happens if I go create
a new issue and I create it,

106
00:05:41.507 --> 00:05:47.002
I go back,
it doesn't show up because it's cached.

107
00:05:47.002 --> 00:05:48.308
So you can see why people were pissed.

108
00:05:48.308 --> 00:05:51.308
Because this is what happened by default,
right?

109
00:05:51.308 --> 00:05:53.356
Imagine that, you're like, wait, what?

110
00:05:53.356 --> 00:05:54.636
You think your app's broke, right?

111
00:05:54.636 --> 00:05:55.916
You think something's going on.

112
00:05:55.916 --> 00:05:57.996
You're like, why is this not showing up?

113
00:05:57.996 --> 00:06:01.868
And then when you do a Cmd+Shift+R,
you're like, there it is.

114
00:06:01.868 --> 00:06:02.620
It's here now.

115
00:06:02.620 --> 00:06:03.644
So people didn't like that.

116
00:06:03.644 --> 00:06:05.260
So this is why they changed it.

117
00:06:05.260 --> 00:06:06.684
So how do we get around that?

118
00:06:06.684 --> 00:06:08.628
Well, we have to revalidate the cache.

119
00:06:08.628 --> 00:06:10.572
We gotta evict it, we gotta expire it.

120
00:06:10.572 --> 00:06:12.720
So there's two things we need to do there.

121
00:06:14.010 --> 00:06:18.466
The first thing is we need a way
to reference what we just cached.

122
00:06:18.466 --> 00:06:21.910
The best way to do that
is with a cache tag.

123
00:06:23.050 --> 00:06:27.368
So to use a cache tag
inside of this function,

124
00:06:27.368 --> 00:06:30.818
we can use this unstable cache tag.

125
00:06:30.818 --> 00:06:35.290
Next JS puts the word unstable in front of
everything that isn't out of Canary yet.

126
00:06:35.290 --> 00:06:38.010
So don't be scared that it's unstable.

127
00:06:38.010 --> 00:06:40.350
It just means that it's
not out of Canary yet.

128
00:06:40.350 --> 00:06:42.142
They're just taking their time.

129
00:06:42.142 --> 00:06:43.950
It works pretty good.

130
00:06:43.950 --> 00:06:50.398
So unstable cache tag, and you just want
to give your cache any tag that you want.

131
00:06:50.398 --> 00:06:51.606
You can make this dynamic.

132
00:06:51.606 --> 00:06:54.816
If you wanna cache with
certain properties or IDs or

133
00:06:54.816 --> 00:06:58.558
user ID in this case,
this is just always gonna be issues.

134
00:06:58.558 --> 00:07:00.382
So I'm just gonna call it issues, right?

135
00:07:00.382 --> 00:07:03.310
So let's go do that.

136
00:07:03.310 --> 00:07:05.830
Import unstable cache tag.

137
00:07:05.830 --> 00:07:08.178
I'm just gonna refer to it as cash tags.

138
00:07:08.178 --> 00:07:09.870
There's no way I'm writing that out again.

139
00:07:11.450 --> 00:07:13.470
Go down to where our cache is.

140
00:07:17.290 --> 00:07:19.130
Where did I?

141
00:07:19.130 --> 00:07:20.970
Okay, there we go.

142
00:07:20.970 --> 00:07:25.870
And then I can just say, cacheTag issues.

143
00:07:27.210 --> 00:07:30.618
Cool.
So that's the first step is tagging it.

144
00:07:30.618 --> 00:07:35.480
The next step is revalidating
it after a server action.

145
00:07:38.020 --> 00:07:42.908
So you can't call these
functions the cacheTag and

146
00:07:42.908 --> 00:07:48.705
the revalidate tag that I'm
about to show you on the client,

147
00:07:48.705 --> 00:07:52.156
they have to happen on the server.

148
00:07:52.156 --> 00:07:56.116
So the only way to revalidate this
is inside of a server action.

149
00:07:56.116 --> 00:07:58.180
So it has to be on server.

150
00:07:58.180 --> 00:08:03.090
So to do that I'm gonna go to this
actions, this issues actions right here.

151
00:08:03.090 --> 00:08:06.530
These are server actions
cuz it has user at the top.

152
00:08:06.530 --> 00:08:10.946
I'm gonna go to where we
create an issue right here.

153
00:08:10.946 --> 00:08:14.339
I'm gonna go down to where
it is successful right here,

154
00:08:14.339 --> 00:08:16.018
right before we return.

155
00:08:16.018 --> 00:08:22.710
And I want to revalidate
the tag called issues.

156
00:08:24.290 --> 00:08:26.720
You don't have to await it,
you don't have to do anything.

157
00:08:26.720 --> 00:08:28.620
It's just gonna remove it.

158
00:08:33.080 --> 00:08:34.520
That's it.

159
00:08:34.520 --> 00:08:36.656
You can also do this from an API request.

160
00:08:36.656 --> 00:08:40.692
And I know we haven't talked about API
routes yet, but that's also server side,

161
00:08:40.692 --> 00:08:42.760
so this has to be on the server side.

162
00:08:42.760 --> 00:08:44.216
&gt;&gt; Speaker 2: This one's been around for
a bit then since it's not unstable.

163
00:08:44.216 --> 00:08:48.853
&gt;&gt; Scott Moss: Revalidate tag
has been around for a while,

164
00:08:48.853 --> 00:08:52.493
but the other part has not, yeah.

165
00:08:52.493 --> 00:08:54.630
&gt;&gt; Speaker 2: Which is funny cuz they're
kinda two sides of the same coin.

166
00:08:54.630 --> 00:08:55.590
&gt;&gt; Scott Moss: I know, exactly.

167
00:08:55.590 --> 00:08:56.974
&gt;&gt; Speaker 2: You can't
do one without the other.

168
00:08:56.974 --> 00:08:58.038
&gt;&gt; Scott Moss: Exactly.

169
00:08:58.038 --> 00:09:01.606
&gt;&gt; Speaker 2: How long does it cache for
by default?

170
00:09:01.606 --> 00:09:05.210
&gt;&gt; Scott Moss: By default it's cached
forever until you do a hard refresh.

171
00:09:08.030 --> 00:09:13.950
There is another function inside of here.

172
00:09:13.950 --> 00:09:16.610
It's called unstable cache life.

173
00:09:22.520 --> 00:09:27.430
And this thing allows you to like,
determine how long you want something

174
00:09:27.430 --> 00:09:31.496
to be cached and you can even
use it after you make the call.

175
00:09:31.496 --> 00:09:35.596
So that way,
if the life of the cache is depending

176
00:09:35.596 --> 00:09:40.040
on the result of the data,
you could just do it here.

177
00:09:40.040 --> 00:09:44.964
So I don't know, there was something
on the result that you wanted to do

178
00:09:44.964 --> 00:09:48.840
to change this,
what they call cache profiles.

179
00:09:48.840 --> 00:09:50.040
You can put stuff in here.

180
00:09:50.040 --> 00:09:53.980
So I can say something like days,
I can say something like weeks.

181
00:09:55.240 --> 00:09:59.944
I can even put the exact amount of seconds
and days and things that I want as well.

182
00:09:59.944 --> 00:10:01.688
So it's a lot of control over this.

183
00:10:01.688 --> 00:10:05.016
I think this is why it's still unstable,
is they're still figuring this part out.

184
00:10:05.016 --> 00:10:08.840
I think this is the part
that they're kinda stuck on.

185
00:10:08.840 --> 00:10:12.624
But we're not gonna get into that
because I have a feeling that's actually

186
00:10:12.624 --> 00:10:13.412
gonna change.

187
00:10:13.412 --> 00:10:19.306
&gt;&gt; Speaker 3: So in terms of tagging and
the caching and then the invalidation.

188
00:10:19.306 --> 00:10:23.002
This feels pretty TanStack Query ish
to me in terms of how that works.

189
00:10:23.002 --> 00:10:23.650
&gt;&gt; Scott Moss: Yeah, it kinda does.

190
00:10:23.650 --> 00:10:25.919
&gt;&gt; Speaker 3: Is there a way to get
more granular with your cache and

191
00:10:25.919 --> 00:10:27.242
your cache invalidation?

192
00:10:27.242 --> 00:10:32.710
With TanStack Query, you can give it
an array of dependencies essentially

193
00:10:32.710 --> 00:10:37.744
to specifically target the one
query to invalidate, for instance,

194
00:10:37.744 --> 00:10:42.448
with the getIssue,
like Data Access layer function, right?

195
00:10:42.448 --> 00:10:43.320
&gt;&gt; Scott Moss: Yeah.

196
00:10:43.320 --> 00:10:45.570
&gt;&gt; Speaker 3: I'm assuming
whatever's happening with Next or

197
00:10:45.570 --> 00:10:49.263
whatever behind the scenes, that they are
caching individually based on the ID or

198
00:10:49.263 --> 00:10:52.080
whatever that's coming through
the function to get that.

199
00:10:52.080 --> 00:10:55.398
&gt;&gt; Scott Moss: I mean, I think they're
just doing a pretty simple key value store

200
00:10:55.398 --> 00:10:59.368
of just whatever key you put in the cache
tag, that's what's gonna be cached in

201
00:10:59.368 --> 00:11:01.960
the object that they're
sending to the browser.

202
00:11:01.960 --> 00:11:02.664
&gt;&gt; Speaker 3: Gotcha.

203
00:11:02.664 --> 00:11:05.872
So is it only caching one
issue at a time then?

204
00:11:05.872 --> 00:11:11.376
&gt;&gt; Scott Moss: Well, in that case
the way it works is the reason it's.

205
00:11:11.376 --> 00:11:12.728
So let's talk about this.

206
00:11:12.728 --> 00:11:13.992
It's a good question.

207
00:11:13.992 --> 00:11:19.159
The reason it's a directive like
this is because the compiler,

208
00:11:19.159 --> 00:11:24.496
when they see this directive,
they can infer all types of stuff.

209
00:11:24.496 --> 00:11:29.095
They can infer if you had inputs here,
they can infer those arguments,

210
00:11:29.095 --> 00:11:34.079
they can infer the result, they can grab
all the stuff because this directive

211
00:11:34.079 --> 00:11:38.272
allows them to do a static analysis and
observe it at run time.

212
00:11:38.272 --> 00:11:41.052
So a lot of stuff is just done for
you automatically.

213
00:11:41.052 --> 00:11:43.940
So it's a little bit of
magic happening there.

214
00:11:43.940 --> 00:11:47.211
But if you want to get more granular
kinda like how TanStack Query does,

215
00:11:47.211 --> 00:11:50.356
they don't have the mechanism for
that yet, if you want to do that.

216
00:11:50.356 --> 00:11:51.318
&gt;&gt; Speaker 3: Sounds like they
kinda do it for you though.

217
00:11:51.318 --> 00:11:53.828
&gt;&gt; Scott Moss: Right, they kinda do it for
you, so you kinda just.

218
00:11:53.828 --> 00:11:55.468
It's a little magic.

219
00:11:55.468 --> 00:11:58.664
But I think the whole React ecosystem,
especially with React 19 and

220
00:11:58.664 --> 00:12:01.966
the new React compiler, which by the way,
I haven't talked about, but

221
00:12:01.966 --> 00:12:04.508
you can actually use the new
React compiler on Next JS.

222
00:12:04.508 --> 00:12:09.679
It's not enabled by default, where it
automatically does the use callback and

223
00:12:09.679 --> 00:12:14.926
the use memoize stuff for you, I think
there's memes out there right now because

224
00:12:14.926 --> 00:12:21.120
people are saying, React's a compiler now,
and that's a symptom of a bad design.

225
00:12:21.120 --> 00:12:25.200
Now you need a compiler to fix all
the bad mistakes that your framework had.

226
00:12:25.200 --> 00:12:26.272
I don't see it that way.

227
00:12:26.272 --> 00:12:30.324
I think it's more of just that is the
consequence of having a flexible framework

228
00:12:30.324 --> 00:12:33.970
in which people can pretty much
do whatever the hell they want.

229
00:12:33.970 --> 00:12:38.569
But when a lot of those decisions
made by developers are causing

230
00:12:38.569 --> 00:12:42.995
really ill performant or
really slow websites, slow apps,

231
00:12:42.995 --> 00:12:48.450
then if you're the framework creator,
maybe you wanna help solve that.

232
00:12:48.450 --> 00:12:49.802
So you add these tools.

233
00:12:49.802 --> 00:12:52.946
But yeah,
it's really good that they can do this.

234
00:12:52.946 --> 00:12:55.698
But yeah, it is happening a lot
in the background for you.

235
00:12:55.698 --> 00:12:56.538
&gt;&gt; Speaker 3: Gotcha.

236
00:12:56.538 --> 00:13:00.371
&gt;&gt; Speaker 4: Can you create
dynamic hashtags then,

237
00:13:00.371 --> 00:13:04.980
like issue comma, like one or whatever or.

238
00:13:04.980 --> 00:13:07.788
&gt;&gt; Speaker 3: Yeah,
issue underscore ID or something?

239
00:13:07.788 --> 00:13:08.508
&gt;&gt; Speaker 4: Yeah, right.

240
00:13:08.508 --> 00:13:10.236
&gt;&gt; Scott Moss: Yeah, yeah, there's
nothing stopping you from doing that.

241
00:13:10.236 --> 00:13:15.788
I mean, you can interpolate this and
do a thing here if you wanted to do that.

242
00:13:15.788 --> 00:13:21.400
So yep, totally cool.

243
00:13:23.180 --> 00:13:24.956
Great, okay, so now we have that.

244
00:13:24.956 --> 00:13:27.580
So let's try this again.

245
00:13:27.580 --> 00:13:31.268
Now let me just refresh
everything with hard refresh.

246
00:13:31.268 --> 00:13:32.240
Go here.

247
00:13:33.500 --> 00:13:35.440
Should see this one.

248
00:13:37.820 --> 00:13:38.764
And there we go.

249
00:13:38.764 --> 00:13:40.160
We see this one.

250
00:13:41.820 --> 00:13:42.600
Yes.

251
00:13:43.900 --> 00:13:48.321
&gt;&gt; Speaker 3: Is it a limitation
that revalidate can only happen on

252
00:13:48.321 --> 00:13:51.584
a server action, but not in?

253
00:13:51.584 --> 00:13:56.310
What would be the workaround if we
needed to revalidate while fetching?

254
00:13:56.310 --> 00:14:00.126
&gt;&gt; Scott Moss: If you needed to revalidate
while fetching, I guess technically you

255
00:14:00.126 --> 00:14:04.664
could because those functions in the data
access layer do happen on the server, so

256
00:14:04.664 --> 00:14:07.430
there's nothing stopping
you from doing that.

257
00:14:07.430 --> 00:14:12.440
But I would say you probably wanna kinda
rethink your architecture if you're

258
00:14:12.440 --> 00:14:17.837
revalidating while fetching, because
there's probably better ways to do that,

259
00:14:17.837 --> 00:14:22.462
depending on what you're revalidating,
because you have other tools

260
00:14:22.462 --> 00:14:26.420
in your toolbox,
like you have prefetching with the links.

261
00:14:28.000 --> 00:14:29.696
Yeah, there's so
many other ways to do that.

262
00:14:29.696 --> 00:14:32.816
It's kinda hard to imagine a scenario
where I would need to do that.

263
00:14:32.816 --> 00:14:33.984
But yeah, technically it's possible.

264
00:14:33.984 --> 00:14:36.384
As long as it happens on the server,
it doesn't matter.

265
00:14:36.384 --> 00:14:41.282
Server action, a call to a data access
layer function inside of a react

266
00:14:41.282 --> 00:14:43.714
server component, API routes.

267
00:14:43.714 --> 00:14:46.354
It just has to happen on the server.

268
00:14:46.354 --> 00:14:50.665
&gt;&gt; Speaker 3: How about if some sort
of revalidation needs to happen in like

269
00:14:50.665 --> 00:14:55.322
a background process or
like a web hook or something like that?

270
00:14:55.322 --> 00:14:57.002
How would you handle that?

271
00:14:57.002 --> 00:14:58.082
&gt;&gt; Scott Moss: Well, a web hook.

272
00:14:58.082 --> 00:15:00.786
Good question.
So a web hook would just be a API route.

273
00:15:00.786 --> 00:15:03.443
So there's no difference
between a web hook handler and

274
00:15:03.443 --> 00:15:05.626
a regular route handler
that you would make.

275
00:15:05.626 --> 00:15:10.480
So it'd be the same thing, same syntax,
same everything, background job.

276
00:15:10.480 --> 00:15:15.080
Next JS as a framework has no
concept of background jobs.

277
00:15:15.080 --> 00:15:18.890
So I guess the real answer
to the question is,

278
00:15:18.890 --> 00:15:24.592
if I'm using some other system,
how do I revalidate something?

279
00:15:24.592 --> 00:15:26.854
You would need to make a route,

280
00:15:26.854 --> 00:15:32.224
an API route on your Next JS app whose
job is only to revalidate when hit.

281
00:15:32.224 --> 00:15:36.009
So then you can just make a get
request post request to that route and

282
00:15:36.009 --> 00:15:37.624
revalidate that thing.

283
00:15:37.624 --> 00:15:39.834
And that way you could
access it from any system.

284
00:15:39.834 --> 00:15:44.025
Obviously lock it down if you want to lock
it down and have it take some secret or

285
00:15:44.025 --> 00:15:44.794
something.

286
00:15:44.794 --> 00:15:46.554
But that's usually the pattern that I see.

287
00:15:46.554 --> 00:15:50.330
Just make a route whose job is
literally just to revalidate a thing.

288
00:15:50.330 --> 00:15:53.640
&gt;&gt; Speaker 3: Have you ever had
to cache things across, like,

289
00:15:53.640 --> 00:15:55.670
multiple Next JS instances?

290
00:15:57.930 --> 00:16:01.638
&gt;&gt; Scott Moss: Yeah, I mean,
in order to solve that problem,

291
00:16:01.638 --> 00:16:06.634
you would need something on
your hosting provider, right.?

292
00:16:06.634 --> 00:16:09.578
So that wouldn't be something that lives.

293
00:16:09.578 --> 00:16:12.082
I mean,
you would need an external data source.

294
00:16:12.082 --> 00:16:15.706
Vercel has something called Edge Config
that does this really well.

295
00:16:15.706 --> 00:16:17.906
But most people will probably use Redis,
cool.

296
00:16:17.906 --> 00:16:20.938
And if I refresh,
we still get our cache here.

297
00:16:20.938 --> 00:16:24.074
It only gets invalidated
after I create an issue.

298
00:16:24.074 --> 00:16:26.770
So pretty simple.

299
00:16:26.770 --> 00:16:29.490
This to me makes sense.

300
00:16:29.490 --> 00:16:31.722
You just call cache when you want a cache.

301
00:16:31.722 --> 00:16:33.850
You invalidate the cache when
you don't want the cache.

