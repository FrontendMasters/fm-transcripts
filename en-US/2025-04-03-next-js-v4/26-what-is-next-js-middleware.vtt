WEBVTT

1
00:00:00.400 --> 00:00:05.414
&gt;&gt; Scott Moss: Okay,
let's move on to the next thing,

2
00:00:05.414 --> 00:00:08.560
which is middleware.

3
00:00:08.560 --> 00:00:13.208
There is an official middleware
implementation in Next.js.

4
00:00:13.208 --> 00:00:14.168
So what is middleware?

5
00:00:14.168 --> 00:00:17.734
Middleware is just a generic term
that the best way I can describe

6
00:00:17.734 --> 00:00:22.225
middleware is just like something that
sits in the middle between a requester and

7
00:00:22.225 --> 00:00:24.616
something that's serving the request.

8
00:00:24.616 --> 00:00:26.544
It's just something that sits
in the middle of any system.

9
00:00:26.544 --> 00:00:28.328
It doesn't have to be HTTP.

10
00:00:28.328 --> 00:00:35.560
You can have middleware for redux
locally inside of a front end React app.

11
00:00:35.560 --> 00:00:37.552
It doesn't always mean
going across the wire.

12
00:00:37.552 --> 00:00:41.800
Middleware is just like something
is trying to do something.

13
00:00:41.800 --> 00:00:42.798
It's asking and

14
00:00:42.798 --> 00:00:47.960
it's working with the implementation
over here that's going to do the thing.

15
00:00:47.960 --> 00:00:49.504
Middleware sits in the middle.

16
00:00:49.504 --> 00:00:54.632
It intercepts the request that's going to
some other system to fulfill the request.

17
00:00:54.632 --> 00:00:58.745
So in the case of Next.js,
the middleware is on the network layer and

18
00:00:58.745 --> 00:01:02.686
it's going to intercept any
requests coming into your app.

19
00:01:02.686 --> 00:01:07.948
So a request comes into your Next JS app,
middleware runs if you set it up that way,

20
00:01:07.948 --> 00:01:13.214
and then that request has opportunity to
go through to your app and do something.

21
00:01:13.214 --> 00:01:16.570
But middleware is kind of like sitting
in the middle and running some logic.

22
00:01:17.630 --> 00:01:21.102
And the sweet thing about this
is that it runs on the edge.

23
00:01:21.102 --> 00:01:22.434
So we'll talk about
the edge a little more.

24
00:01:22.434 --> 00:01:28.586
But you can think of this as
like basically programmatic CDN.

25
00:01:28.586 --> 00:01:34.506
So, you know, up until a few years ago,
CDNs were mostly all static.

26
00:01:34.506 --> 00:01:38.411
As in, you could only put files on there,
like assets, static assets, Images,

27
00:01:38.411 --> 00:01:42.162
you know, JavaScript files, CSS files,
things that wouldn't change.

28
00:01:42.162 --> 00:01:44.202
Well, now you can actually write logic.

29
00:01:44.202 --> 00:01:45.946
You can compute on the edge.

30
00:01:45.946 --> 00:01:48.958
You can compute on a CDN,
which is extremely powerful.

31
00:01:48.958 --> 00:01:52.278
You can actually build
a whole application and

32
00:01:52.278 --> 00:01:56.606
have it distributed by default
by just using Edge Compute.

33
00:01:56.606 --> 00:01:57.942
So again,
we'll talk more about that a little bit.

34
00:01:57.942 --> 00:01:59.118
But middleware sits on the edge.

35
00:01:59.118 --> 00:02:04.031
The reason this is powerful is because
if I am in Detroit and I make a request

36
00:02:04.031 --> 00:02:08.863
to your app, this middleware is going
to run on the server closest to me,

37
00:02:08.863 --> 00:02:13.558
which might be in Detroit,
might be in New York, wherever that is.

38
00:02:13.558 --> 00:02:16.842
And then that logic is going to run, and
then whatever that logic determines,

39
00:02:16.842 --> 00:02:19.838
it might then send me to wherever
your serverless function is hosted.

40
00:02:19.838 --> 00:02:23.014
Maybe your serverless function is hosted
in Oregon or something like that.

41
00:02:23.014 --> 00:02:27.798
So that logic runs very quickly,
very early, and you could do some.

42
00:02:27.798 --> 00:02:28.910
I mean, it really isn't.

43
00:02:28.910 --> 00:02:30.990
You can literally do
anything in middleware.

44
00:02:30.990 --> 00:02:33.910
So it's kind of cool.

45
00:02:33.910 --> 00:02:38.188
But some of the common use
cases are just like executing

46
00:02:38.188 --> 00:02:41.454
some code before a request is complete.

47
00:02:41.454 --> 00:02:44.118
Checking authentication,
which is what we're going to do.

48
00:02:44.118 --> 00:02:46.870
Rewriting, redirecting is
probably the biggest one.

49
00:02:46.870 --> 00:02:49.822
So like,
I've seen people do really crazy stuff.

50
00:02:49.822 --> 00:02:55.422
Like this request came in from
this IP address we recognized.

51
00:02:55.422 --> 00:03:00.150
We looked up and saw this IP address
belongs to a huge fortune 500 company.

52
00:03:00.150 --> 00:03:06.424
So we rewrote the website to reflect
them and their company and their brand.

53
00:03:06.424 --> 00:03:09.307
So the website they saw was completely
different than a website the rest of

54
00:03:09.307 --> 00:03:10.040
the world saw.

55
00:03:10.040 --> 00:03:12.542
And it's all indexable
because it happened,

56
00:03:12.542 --> 00:03:16.232
it happened without JavaScript,
it happened on the server side.

57
00:03:16.232 --> 00:03:18.260
So you could do really cool stuff.

58
00:03:19.400 --> 00:03:23.380
There's really not much you can't do
by just adding compute on the edge.

59
00:03:24.680 --> 00:03:27.192
Cool, so we're going to use it.

60
00:03:27.192 --> 00:03:29.176
And I got more use cases in here.

61
00:03:29.176 --> 00:03:33.387
I talk about basic authentication,
custom headers, language detection and

62
00:03:33.387 --> 00:03:34.338
redirection.

63
00:03:34.338 --> 00:03:37.380
So maybe you do have your website
set up in a way where different

64
00:03:37.380 --> 00:03:39.058
languages are different sites.

65
00:03:39.058 --> 00:03:40.658
You can redirect that way, yeah.

66
00:03:40.658 --> 00:03:42.410
You got a question?

67
00:03:42.410 --> 00:03:43.879
&gt;&gt; Speaker 2: Would another use case for

68
00:03:43.879 --> 00:03:46.630
middleware be to rate
limit a particular route?

69
00:03:48.250 --> 00:03:53.690
&gt;&gt; Scott Moss: Yes, Edge Compute
is a great place to rate limit.

70
00:03:53.690 --> 00:03:56.606
The reason I kind of hesitated there
is because although Edge computer

71
00:03:56.606 --> 00:04:00.042
are a great place to do it, I don't know
if I would do it in Next.js's middleware.

72
00:04:00.042 --> 00:04:02.440
But yeah, you definitely could.

73
00:04:02.440 --> 00:04:03.304
You definitely could.

74
00:04:03.304 --> 00:04:04.400
That's probably one of the biggest.

75
00:04:04.400 --> 00:04:06.680
I mean, that's what Cloudflare started as,
really.

76
00:04:06.680 --> 00:04:10.008
It's just like bot protection,
rate limiting protection,

77
00:04:10.008 --> 00:04:12.190
DDoS protection on a CDN level, right?

78
00:04:12.190 --> 00:04:15.128
So yeah,
definitely a great use case for that.

79
00:04:15.128 --> 00:04:18.184
You need some type of serverless
storage to go along with that.

80
00:04:18.184 --> 00:04:23.178
So you can store like, you know, how
many attempts this IP address did per X

81
00:04:23.178 --> 00:04:26.920
amount of time, but
there's tons of that as well, so.

