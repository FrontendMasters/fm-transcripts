WEBVTT

1
00:00:00.160 --> 00:00:04.361
&gt;&gt; Scott Moss: Now that we got caching out
of the way, let's talk about API routes,

2
00:00:04.361 --> 00:00:08.501
the thing that I said you'll probably
never need ever again [LAUGH].

3
00:00:08.501 --> 00:00:09.822
Because as you can see,

4
00:00:09.822 --> 00:00:13.727
we just built a full CRUD app without
making one API route whatsoever.

5
00:00:13.727 --> 00:00:15.280
It's pretty amazing.

6
00:00:15.280 --> 00:00:18.590
But there still are use cases for
API routes,

7
00:00:18.590 --> 00:00:22.438
not even just externally,
but internally as well.

8
00:00:22.438 --> 00:00:26.584
Use cases for making API routes for
the app that you're actually building.

9
00:00:26.584 --> 00:00:28.976
There are still some use cases, for sure.

10
00:00:28.976 --> 00:00:34.366
They're just not as wide as they used to
be cuz you can just use server actions for

11
00:00:34.366 --> 00:00:36.160
a lot of stuff.

12
00:00:36.160 --> 00:00:40.871
But nonetheless, Next.js makes
building API routes super easy.

13
00:00:40.871 --> 00:00:45.064
They are designed to execute
in a serverless environment.

14
00:00:45.064 --> 00:00:47.898
Vercel has serverless,
all its competitors have serverless.

15
00:00:47.898 --> 00:00:50.379
Serverless is kind of
a thing at this point, so

16
00:00:50.379 --> 00:00:52.768
they just built a framework around that.

17
00:00:52.768 --> 00:00:56.691
And recently, since next year is 13,
they changed the syntax of it.

18
00:00:56.691 --> 00:01:04.801
So it follows the web standards of kinda
like the edge syntax for making requests.

19
00:01:04.801 --> 00:01:06.922
So it follows the web standards.

20
00:01:06.922 --> 00:01:09.700
So it really is super simple.

21
00:01:09.700 --> 00:01:11.659
They don't even do
anything special in here.

22
00:01:11.659 --> 00:01:14.970
I mean, there are some things
that are really cool, but

23
00:01:14.970 --> 00:01:18.151
as far as what's exposed to you,
it's very simple.

24
00:01:18.151 --> 00:01:23.151
It very much follows the spec of
what is out there, it's really good.

25
00:01:23.151 --> 00:01:25.370
So let's talk about it.

26
00:01:25.370 --> 00:01:28.515
So API routes,
if you don't know what they are,

27
00:01:28.515 --> 00:01:33.066
HTTP routes that you can hit that
usually send back some data, right?

28
00:01:33.066 --> 00:01:36.168
So really, really easy to make these.

29
00:01:36.168 --> 00:01:37.330
Let's just go ahead and dive.

30
00:01:37.330 --> 00:01:40.817
I have tons and tons and
tons of notes on all this stuff.

31
00:01:40.817 --> 00:01:42.448
And we'll definitely talk about it.

32
00:01:42.448 --> 00:01:45.445
But I think it's just so
much easier to just go into here and

33
00:01:45.445 --> 00:01:47.167
start playing around with this.

34
00:01:47.167 --> 00:01:48.405
And then we'll make some API routes.

35
00:01:48.405 --> 00:01:50.296
So you can follow along if you want here.

36
00:01:50.296 --> 00:01:52.508
But this is just gonna be
me demonstrating API stuff.

37
00:01:52.508 --> 00:01:56.244
And then I'll let you know when we're
actually gonna make the APROs that we need

38
00:01:56.244 --> 00:01:56.868
for our app.

39
00:01:56.868 --> 00:02:00.240
So the first thing to know is,
where do you make an API route?

40
00:02:00.240 --> 00:02:02.034
Well, in our case,
we're using the app directory.

41
00:02:02.034 --> 00:02:02.982
We're not using source.

42
00:02:02.982 --> 00:02:04.335
So we go into app.

43
00:02:04.335 --> 00:02:09.965
And we have to have a folder called API
inside of app, it has to be an app.

44
00:02:09.965 --> 00:02:14.269
If it is not an app,
it will not get picked up as an API route.

45
00:02:14.269 --> 00:02:20.530
So I'm gonna make a new folder, gonna call
it API, even get a suite icon for it.

46
00:02:20.530 --> 00:02:22.714
It's very similar to pages.

47
00:02:22.714 --> 00:02:26.564
So with pages, we have to have
a directory, that's the path name, and

48
00:02:26.564 --> 00:02:28.373
then we have to have a page.tsx.

49
00:02:28.373 --> 00:02:31.351
Routes are very similar.

50
00:02:31.351 --> 00:02:34.886
Yeah, API routes are very similar,
you can have a path name.

51
00:02:34.886 --> 00:02:38.671
So in this case, let's just say
I'll make one called user, right,

52
00:02:38.671 --> 00:02:40.584
that's gonna be the path name.

53
00:02:40.584 --> 00:02:43.629
And then if I want to make a route here,
I'll make a file,

54
00:02:43.629 --> 00:02:46.307
instead of calling it page,
I'll call it route.

55
00:02:49.438 --> 00:02:55.914
And this will make a route
with the path of /api/user.

56
00:02:55.914 --> 00:02:58.655
It's always /api/user.

57
00:02:58.655 --> 00:03:04.031
Right, so for people who are versioning

58
00:03:04.031 --> 00:03:09.419
their APIs, you could do a v1, right?

59
00:03:09.419 --> 00:03:13.147
So it's /api/v1, and
now you've versioned it.

60
00:03:13.147 --> 00:03:18.817
So if you're doing graphql,
you could do a graphql,

61
00:03:18.817 --> 00:03:23.733
and then put your route in here,
very simple.

62
00:03:28.113 --> 00:03:30.787
So what does the actual route look like?

63
00:03:30.787 --> 00:03:34.850
How do you determine what verb or
whatever?

64
00:03:34.850 --> 00:03:39.638
So one route file,
you can create as many HTTP

65
00:03:39.638 --> 00:03:43.931
verb that you want in the one route file.

66
00:03:43.931 --> 00:03:46.330
So what does that look like?

67
00:03:46.330 --> 00:03:48.562
It's all about the exports.

68
00:03:48.562 --> 00:03:53.663
So if I export GET,
this is going to be a handler.

69
00:03:53.663 --> 00:03:59.965
For a GET request,
that is for /api/user, right?

70
00:03:59.965 --> 00:04:05.816
If I do a export for a POST, same thing.

71
00:04:08.027 --> 00:04:13.592
Options, put, delete,
patch, whatever you want.

72
00:04:13.592 --> 00:04:16.397
That's it, you just export that
variable or that function, and

73
00:04:16.397 --> 00:04:17.622
that's what's gonna run.

74
00:04:19.691 --> 00:04:21.795
What you get as arguments,

75
00:04:21.795 --> 00:04:27.108
this is the thing that's focusing
on the spec is you get the request.

76
00:04:27.108 --> 00:04:32.243
And this will be a NextRequest.

77
00:04:32.243 --> 00:04:37.223
It's kind of a wrapped request, but

78
00:04:37.223 --> 00:04:42.373
let's just say NextRequest for now.

79
00:04:42.373 --> 00:04:44.275
So you get this request object here.

80
00:04:44.275 --> 00:04:47.797
Let's just do a hello world thing.

81
00:04:47.797 --> 00:04:49.694
So I'm gonna return.

82
00:04:49.694 --> 00:04:56.537
I could actually just return a response,
which is native to web standards.

83
00:04:56.537 --> 00:05:02.240
But I'll use a helper from next/server,
that makes it easy to do some stuff.

84
00:05:03.380 --> 00:05:06.799
And I'll say, NextResponse.JSON.

85
00:05:06.799 --> 00:05:11.470
That won't have to add the headers and
do all that stuff.

86
00:05:11.470 --> 00:05:16.520
So I can say data: message: hello.

87
00:05:17.900 --> 00:05:22.052
So I'm just doing a GET
request to /api/user.

88
00:05:22.052 --> 00:05:26.133
It's immediately going to respond back
with some JSON, with a data object, and

89
00:05:26.133 --> 00:05:28.140
a message of hello.

90
00:05:28.140 --> 00:05:30.476
So now I need to test this.

91
00:05:30.476 --> 00:05:37.273
I'm going to use httpy.

92
00:05:37.273 --> 00:05:42.910
So httpy is a really
cool postman like client.

93
00:05:42.910 --> 00:05:45.248
They actually started as just a CLI.

94
00:05:45.248 --> 00:05:47.437
I've taught a lot of courses here
where I just use their CLI and

95
00:05:47.437 --> 00:05:48.247
it works really good.

96
00:05:48.247 --> 00:05:49.506
But now they have a GUI.

97
00:05:49.506 --> 00:05:53.730
And honestly, this was the only one that
I could find where I don't have to make

98
00:05:53.730 --> 00:05:54.759
an account or pay.

99
00:05:54.759 --> 00:05:56.294
I couldn't find any other one.

100
00:05:56.294 --> 00:06:01.054
Postman, Insomnia, which there's an issue
on Insomnia talking about its malware.

101
00:06:01.054 --> 00:06:03.499
Don't use it, [LAUGH] which is funny.

102
00:06:03.499 --> 00:06:05.933
But this was the only one that
I could use without an account,

103
00:06:05.933 --> 00:06:07.798
even though they do have a paid offering.

104
00:06:07.798 --> 00:06:09.894
So this is httpy.

105
00:06:09.894 --> 00:06:10.947
You can use whatever you want.

106
00:06:10.947 --> 00:06:14.132
You can use curl, just to test these
endpoints, whatever you wanna do.

107
00:06:14.132 --> 00:06:18.996
But let's make a request to /api/user.

108
00:06:18.996 --> 00:06:22.677
I don't need any authorization
stuff right now,

109
00:06:22.677 --> 00:06:26.807
so we can just ignore this,
it doesn't really matter.

110
00:06:26.807 --> 00:06:28.344
Let me make sure I have this running.

111
00:06:34.791 --> 00:06:41.380
Okay, and then let's issue a request, 404.

112
00:06:41.380 --> 00:06:42.941
&gt;&gt; Speaker 2: User, you've pluralized.

113
00:06:42.941 --> 00:06:44.198
&gt;&gt; Scott Moss: It's user.

114
00:06:44.198 --> 00:06:47.580
Okay, there we go, cool.

115
00:06:47.580 --> 00:06:52.604
So got back 200,
there's my JSON object message.

116
00:06:52.604 --> 00:06:56.057
Super simple, it's literally the simplest
server you'll ever make in your life.

117
00:06:56.057 --> 00:06:56.846
&gt;&gt; Speaker 3: Quick question.

118
00:06:56.846 --> 00:06:57.364
&gt;&gt; Scott Moss: Yes.
&gt;&gt; Speaker 3: So

119
00:06:57.364 --> 00:07:03.309
you're hitting the localhost 3000,
which is also the server for the client.

120
00:07:03.309 --> 00:07:08.993
So internally, Next.js is doing
a proxy to the server internally, or?

121
00:07:08.993 --> 00:07:13.402
&gt;&gt; Scott Moss: Well, yeah, internally,
cuz it's local development and

122
00:07:13.402 --> 00:07:17.394
I don't have actual serverless
containers and VMs.

123
00:07:17.394 --> 00:07:22.727
What it's actually doing is, it is
spinning up probably an express JS server,

124
00:07:22.727 --> 00:07:25.845
in which it's just
mounting the API on /api.

125
00:07:25.845 --> 00:07:27.311
So locally, it's doing that.

126
00:07:27.311 --> 00:07:30.969
When you deploy this somewhere,
the way it works with serverless is,

127
00:07:30.969 --> 00:07:34.690
a lot of serverless functions can
be triggered off of some event.

128
00:07:34.690 --> 00:07:37.872
The most popular event
is a incoming request.

129
00:07:37.872 --> 00:07:40.812
So the way it works when you deploy it is,

130
00:07:40.812 --> 00:07:46.711
your request will get captured by some API
gateway on AWS or something like that.

131
00:07:46.711 --> 00:07:50.551
And what that does is it maps to
some code that you deployed there.

132
00:07:50.551 --> 00:07:55.560
It'll go grab your code from cold storage
or S3 or wherever it is, whatever bucket,

133
00:07:55.560 --> 00:08:00.515
if it's not warmed up, unzip it, load it
into memory, and then execute your code.

134
00:08:00.515 --> 00:08:02.876
Right, and that's essentially
what serverless is doing.

135
00:08:07.907 --> 00:08:10.172
Cool, any questions on that, yes?

136
00:08:10.172 --> 00:08:13.438
&gt;&gt; Speaker 2: Can you just use your
dev tools to do the same thing, or?

137
00:08:13.438 --> 00:08:18.138
&gt;&gt; Scott Moss: Yeah, yeah, you could use
whatever you want to access the, wait,

138
00:08:18.138 --> 00:08:23.010
are you talking about for playing
around with API, or you talk about-

139
00:08:23.010 --> 00:08:24.905
&gt;&gt; Speaker 2: If you hit that URL and

140
00:08:24.905 --> 00:08:30.274
you went to the network and
you found that user file inside all

141
00:08:30.274 --> 00:08:36.902
the network files that came in, would
that be a good way to test it as well?

142
00:08:36.902 --> 00:08:38.801
&gt;&gt; Scott Moss: Well, so
this a server side route, and

143
00:08:38.801 --> 00:08:40.878
it won't get bundled with your client.

144
00:08:40.878 --> 00:08:46.957
So this won't show up in the browser
as a code that the browser is seeing,

145
00:08:46.957 --> 00:08:49.662
cuz this is purely server side.

146
00:08:49.662 --> 00:08:51.974
So Next.js at its core
is a full stack app.

147
00:08:51.974 --> 00:08:57.158
I like to say hybrid cuz server actions,
it's kind of both at the same time,

148
00:08:57.158 --> 00:08:59.925
but now we're fully on the server side.

149
00:08:59.925 --> 00:09:03.327
This has absolutely nothing
to do with the client.

150
00:09:03.327 --> 00:09:08.847
You can share code, and that code has
to work in the browser and in node.

151
00:09:08.847 --> 00:09:13.455
But yeah, you won't see any of
this stuff on the client side.

152
00:09:13.455 --> 00:09:18.243
In fact, you could just spin up
a Next.js app, have no pages, and

153
00:09:18.243 --> 00:09:23.730
only have API routes, and just deploy
that, and now you have an API, yeah.

154
00:09:25.110 --> 00:09:28.003
&gt;&gt; Speaker 3: Then sucking in data
on the client would be similar,

155
00:09:28.003 --> 00:09:30.387
you'd call fetch targeted to these URLs.

156
00:09:30.387 --> 00:09:35.203
&gt;&gt; Scott Moss: Yep, yeah, you can
call fetch in your code right now and

157
00:09:35.203 --> 00:09:36.442
hit this URL.

158
00:09:36.442 --> 00:09:40.307
Your frontend has no
idea that there's an API

159
00:09:40.307 --> 00:09:44.870
that's also on the same domain and
host as it is.

160
00:09:44.870 --> 00:09:47.576
So it might as well be an external thing.

161
00:09:47.576 --> 00:09:50.472
I mean, obviously, you won't get the cores
error cuz you're on the same domain.

162
00:09:50.472 --> 00:09:55.248
But as far as your client is concerned,
it might as well be some external API.

163
00:09:55.248 --> 00:09:57.123
Let's try some more, so let's try a post.

164
00:09:57.123 --> 00:09:59.350
So how do you get data from the body?

165
00:09:59.350 --> 00:10:01.639
Posting is a very common thing.

166
00:10:01.639 --> 00:10:06.135
Obviously, we can make this async,
so we'll make that async,

167
00:10:06.135 --> 00:10:08.063
and we have a NextRequest.

168
00:10:08.063 --> 00:10:13.302
So if we wanna get things from the body,
there's a few things you can do.

169
00:10:13.302 --> 00:10:18.026
So you can say req, or
I'm sorry, await req.

170
00:10:18.026 --> 00:10:23.732
And then what you want, req.body,

171
00:10:23.732 --> 00:10:29.584
no, actually, is it like this now?

172
00:10:29.584 --> 00:10:32.408
Actually, let me see.

173
00:10:32.408 --> 00:10:35.415
Thought it was something else, but
let's log this and see what this is.

174
00:10:35.415 --> 00:10:37.454
And I'll return the NextResponse.

175
00:10:40.215 --> 00:10:43.673
&gt;&gt; Scott Moss: NextResponse.json,
I guess we could just echo this,

176
00:10:43.673 --> 00:10:45.152
let's just echo this.

177
00:10:50.245 --> 00:10:53.138
&gt;&gt; Scott Moss: Body, okay, so
now we have a post request,

178
00:10:53.138 --> 00:10:58.631
it's gonna just send back whatever you
post up, if that's actually how you do it.

179
00:10:58.631 --> 00:11:00.190
So let's make a new one here.

180
00:11:00.190 --> 00:11:03.541
I'll say post to user.

181
00:11:03.541 --> 00:11:07.046
How do you add?

182
00:11:07.046 --> 00:11:08.339
Here we go, body.

183
00:11:08.339 --> 00:11:14.875
They don't have a JSON, that sucks.

184
00:11:14.875 --> 00:11:21.001
[LAUGH] Okay, it's a format of the text,
I was gonna say.

185
00:11:21.001 --> 00:11:25.973
I'm not using this anymore [LAUGH].

186
00:11:25.973 --> 00:11:29.433
Things, let's post some things.

187
00:11:31.947 --> 00:11:35.108
&gt;&gt; Scott Moss: Cool, so
let's try that, send that up.

188
00:11:35.108 --> 00:11:38.353
Right, yeah, exactly, I didn't think
that's actually what the rec body was.

189
00:11:38.353 --> 00:11:42.033
So to get the data,

190
00:11:42.033 --> 00:11:46.863
I'm pretty sure you have

191
00:11:46.863 --> 00:11:51.238
to await the request.

192
00:11:51.238 --> 00:11:52.676
Where is it?

193
00:11:54.732 --> 00:11:57.754
&gt;&gt; Scott Moss: JSON, yeah,
that's what it was, yeah.

194
00:11:57.754 --> 00:12:01.830
So you have to await the request.json,
and then you can get the data.

195
00:12:04.437 --> 00:12:06.290
&gt;&gt; Scott Moss: And
then there we go, we get the things.

196
00:12:12.158 --> 00:12:13.252
&gt;&gt; Scott Moss: Pretty simple.

197
00:12:13.252 --> 00:12:16.025
If you wanted to get the params,

198
00:12:16.025 --> 00:12:20.971
it's very similar to how you
get the params in the pages.

199
00:12:20.971 --> 00:12:25.720
We don't have any params on this route,
but you can access those.

200
00:12:25.720 --> 00:12:31.775
And then from there, the same rules apply
for any route handle that you would make.

201
00:12:31.775 --> 00:12:36.840
If you don't respond, this will hang,
right, if I don't send a response.

202
00:12:36.840 --> 00:12:40.499
On this case, it actually just said,
no, I'm just gonna die [LAUGH].

203
00:12:40.499 --> 00:12:41.784
It's gonna do a 500.

204
00:12:41.784 --> 00:12:48.680
So you always wanna respond back with your
handlers, otherwise, it's not useful.

205
00:12:48.680 --> 00:12:53.604
Next.js does have some really cool things
now where you can respond immediately, but

206
00:12:53.604 --> 00:12:56.916
still continue processing stuff,
which is really cool.

207
00:12:56.916 --> 00:12:59.444
They have a, I forgot what it's called,

208
00:12:59.444 --> 00:13:03.359
it's wait until or something like that,
that's really cool.

209
00:13:03.359 --> 00:13:05.598
It's really great for
handling webhook requests.

210
00:13:05.598 --> 00:13:08.188
But mostly, this is pretty simple.

211
00:13:08.188 --> 00:13:09.788
You get access to the cookies.

212
00:13:09.788 --> 00:13:14.023
The way you get access to the cookies
is the same way we have access

213
00:13:14.023 --> 00:13:19.200
to the cookies in the server actions,
is through next headers, or is it?

214
00:13:19.200 --> 00:13:21.264
Let's go see,
I forgot what it was actually.

215
00:13:24.991 --> 00:13:25.774
&gt;&gt; Scott Moss: It is next/headers.

216
00:13:25.774 --> 00:13:29.440
I don't know why they're autocomplete for
me, doesn't like me.

217
00:13:29.440 --> 00:13:33.441
So you can get the headers here,
you get the cookies here.

218
00:13:33.441 --> 00:13:36.966
And when you use them, you get
access to all that, so the headers.

219
00:13:43.113 --> 00:13:50.040
&gt;&gt; Scott Moss: Headers, together do that,
.get, have them weighted.

220
00:13:50.040 --> 00:13:51.422
And then you can get
the value of the header.

221
00:13:51.422 --> 00:13:53.577
So if you wanna get
the authorization header,

222
00:13:53.577 --> 00:13:55.409
you can get the authorization header.

223
00:13:57.989 --> 00:14:00.401
&gt;&gt; Scott Moss: And again,
this is web standard syntax right here.

224
00:14:00.401 --> 00:14:02.561
This is not something Next.js made up,
or anything like that.

225
00:14:02.561 --> 00:14:07.720
If you go on any platform, whether
it's edge or serverless, this is it.

226
00:14:07.720 --> 00:14:12.436
If you go look up the docs on
the request object and response object,

227
00:14:12.436 --> 00:14:16.062
this is exactly what the standards are for
the web.

228
00:14:16.062 --> 00:14:20.835
So that's why I like it, cuz you don't
really have to learn anything new.

229
00:14:20.835 --> 00:14:26.885
Now some people might ask, well, how do I
do the stuff that I used to do in express,

230
00:14:26.885 --> 00:14:30.966
and make all the routes and
stuff and things like that?

231
00:14:30.966 --> 00:14:34.708
Well, again,
you use the file system for the routes.

232
00:14:34.708 --> 00:14:37.443
And if you wanna do things like
middleware and stuff like that,

233
00:14:37.443 --> 00:14:39.415
we're gonna talk about global middleware.

234
00:14:39.415 --> 00:14:43.179
But if you wanna do local middleware,
I only wanna add middleware to this,

235
00:14:43.179 --> 00:14:45.342
because again, this is just a function.

236
00:14:45.342 --> 00:14:46.499
It's literally just a function.

237
00:14:46.499 --> 00:14:50.087
You can make your own abstraction for
middleware,

238
00:14:50.087 --> 00:14:53.206
you can do a higher order function, right?

239
00:14:53.206 --> 00:14:57.115
So if I wanted to do something that says,
always check the user, and

240
00:14:57.115 --> 00:15:01.434
I wanna do it on a route level, not
a global level, I can do something like,

241
00:15:01.434 --> 00:15:02.961
const withUser, right?

242
00:15:02.961 --> 00:15:05.350
And this is gonna take in a handler.

243
00:15:05.350 --> 00:15:08.059
Or even better,
it'll be something like this.

244
00:15:08.059 --> 00:15:10.325
This might be async, right?

245
00:15:10.325 --> 00:15:14.178
So I can do something like that, and
I could have this, take it there.

246
00:15:14.178 --> 00:15:17.605
There's so many ways you can do it,
right, but

247
00:15:17.605 --> 00:15:21.302
there really isn't anything
that you can't do.

248
00:15:21.302 --> 00:15:26.108
So in this case, you might say, this
takes a handler, and then it does this.

249
00:15:29.435 --> 00:15:37.610
&gt;&gt; Scott Moss: Async, checks user,
&gt;&gt; Scott Moss: Get the results.

250
00:15:37.610 --> 00:15:41.547
Or actually in this case,
it would just be like,

251
00:15:41.547 --> 00:15:45.015
if user, go ahead and return the handler.

252
00:15:49.242 --> 00:15:53.048
&gt;&gt; Scott Moss: Something like that, you
get the request objects and stuff here.

253
00:15:53.048 --> 00:15:56.097
So you can make your own abstractions
however you wanna do it.

254
00:15:56.097 --> 00:15:56.917
It's just a function.

255
00:15:56.917 --> 00:16:00.518
So however you wanna do it,
you can do it that way, pretty simple.

256
00:16:00.518 --> 00:16:03.633
So why would you make these
if you don't need to?

257
00:16:03.633 --> 00:16:05.924
If we can use server actions for
everything.

258
00:16:05.924 --> 00:16:09.853
Yeah, for the app that you're making,
maybe you don't need API routes.

259
00:16:09.853 --> 00:16:13.862
But at least as far as how the app
is consuming data and creating data,

260
00:16:13.862 --> 00:16:16.991
maybe you don't need API routes for
those use cases.

261
00:16:16.991 --> 00:16:21.255
There are some use cases where you would
need to go across the wire manually for

262
00:16:21.255 --> 00:16:22.564
a route from your app.

263
00:16:22.564 --> 00:16:24.371
And then now you have that.

264
00:16:24.371 --> 00:16:27.804
The other use cases are,
what if your app has to handle webhooks?

265
00:16:27.804 --> 00:16:29.002
That's a very common thing.

266
00:16:29.002 --> 00:16:32.626
I can't remember an app that I've built
today that didn't have to handle a webhook

267
00:16:32.626 --> 00:16:33.420
of some sort.

268
00:16:33.420 --> 00:16:37.620
You would need to make a route for that,
so you would make these API routes.

269
00:16:37.620 --> 00:16:40.784
What if you needed to
make a developer API?

270
00:16:40.784 --> 00:16:43.094
Maybe that's part of
your product offering,

271
00:16:43.094 --> 00:16:47.248
is that you let developers build on top of
your product by offering a developer API.

272
00:16:47.248 --> 00:16:51.816
This would be your developer API,
you would do it here, if you so choose.

273
00:16:51.816 --> 00:16:56.774
So there are other use cases outside
of being the mechanism in which

274
00:16:56.774 --> 00:17:01.555
your actual UI fetches and
creates data, especially if you're

275
00:17:01.555 --> 00:17:06.728
getting into workflows, and AI,
streaming, and all this stuff.

276
00:17:06.728 --> 00:17:09.951
The use cases can go
beyond just basic CRUD.

277
00:17:09.951 --> 00:17:11.869
So there are still use cases.

278
00:17:11.869 --> 00:17:15.975
It's just, for
the CRUD stuff that you do in your app,

279
00:17:15.975 --> 00:17:19.290
you almost never need this, in my opinion.

280
00:17:19.290 --> 00:17:20.445
&gt;&gt; Speaker 3: Quick question.

281
00:17:20.445 --> 00:17:27.011
So it would be, in your opinion, a
recommendation to have the server actions,

282
00:17:27.011 --> 00:17:31.325
and then separately just
expose the APIs as needed.

283
00:17:31.325 --> 00:17:34.045
Or is there a way to just code once and

284
00:17:34.045 --> 00:17:39.774
then generate automatically the other so
that you have more consistency?

285
00:17:39.774 --> 00:17:41.113
&gt;&gt; Scott Moss: Yeah, so
that's a great question.

286
00:17:41.113 --> 00:17:43.324
So the question was,
can I just write the code once and

287
00:17:43.324 --> 00:17:46.358
have some consistency between
the server actions and the API routes?

288
00:17:46.358 --> 00:17:51.916
Yeah, a very good abstraction that I do,
actually, is in my actions.

289
00:17:51.916 --> 00:17:53.900
For instance,
let's look at this action here.

290
00:17:55.560 --> 00:18:01.128
You couldn't import these into your route
handlers without some type of issues.

291
00:18:01.128 --> 00:18:03.727
But let's say,
I have a route that creates an issue, but

292
00:18:03.727 --> 00:18:06.168
I also have a server action
that creates an issue.

293
00:18:06.168 --> 00:18:10.589
Well, typically what I would do is,

294
00:18:10.589 --> 00:18:18.161
I know that because both of these
run in a request environment.

295
00:18:18.161 --> 00:18:20.830
All this code is gonna
work in the API route,

296
00:18:20.830 --> 00:18:24.092
it's also gonna work on
the Next.js server action.

297
00:18:24.092 --> 00:18:27.325
So what I'll do is I'll build a function
that just takes this logic, and

298
00:18:27.325 --> 00:18:30.970
I'll use that function in here, and
I'll use that same function in the route.

299
00:18:30.970 --> 00:18:34.066
So it's just one function that I'm
using in two different places.

300
00:18:34.066 --> 00:18:37.070
And the server actions just
become shells of just being like,

301
00:18:37.070 --> 00:18:40.604
you're just wrapping some logic, so
I can expose it as a server action.

302
00:18:40.604 --> 00:18:44.579
But the logic itself is independent of
a server action, is independent of API

303
00:18:44.579 --> 00:18:47.748
route, it's independent of
a data access layer function.

304
00:18:47.748 --> 00:18:52.214
It's just like, this is code that runs
on a server and runs during a request.

305
00:18:52.214 --> 00:18:54.294
And that's a very common thing that I see.

306
00:18:58.050 --> 00:18:59.720
&gt;&gt; Scott Moss: Cool, any other questions?

307
00:19:01.340 --> 00:19:05.900
&gt;&gt; Speaker 4: So the parameters for
the dynamic segments,

308
00:19:05.900 --> 00:19:12.745
they come through the params on
the Get function and Post function?

309
00:19:12.745 --> 00:19:19.955
Or is it kinda with the next headers and
cookies, is it something with?

310
00:19:19.955 --> 00:19:21.183
&gt;&gt; Scott Moss: Yeah,
it comes through like this.

311
00:19:21.183 --> 00:19:22.441
&gt;&gt; Speaker 4: Okay.
&gt;&gt; Scott Moss: Yep, so

312
00:19:22.441 --> 00:19:25.232
pretty much the same thing.

