WEBVTT

1
00:00:00.090 --> 00:00:02.203
&gt;&gt; Scott Moss: Okay, so how about this?

2
00:00:02.203 --> 00:00:03.402
Let's get the issues now.

3
00:00:03.402 --> 00:00:07.282
I think now that we've signed in,
we can redirect to our dashboard.

4
00:00:07.282 --> 00:00:08.582
Let's get the issue.

5
00:00:08.582 --> 00:00:10.823
So to get the issues,
we need to do a few things.

6
00:00:10.823 --> 00:00:14.010
We need to create the getIssuesfunction,
which is super easy.

7
00:00:14.010 --> 00:00:19.131
We need to actually make a page on
the dashboard that's not garbage [LAUGH].

8
00:00:19.131 --> 00:00:22.336
And this is where the data
access layer functions come in.

9
00:00:22.336 --> 00:00:24.219
You can see I'm just
calling a function here.

10
00:00:24.219 --> 00:00:26.225
You've never been able
to do this in React.

11
00:00:26.225 --> 00:00:30.665
You could not put a async in front of
a React component before until now.

12
00:00:30.665 --> 00:00:34.630
And now you can block rendering
until something async is done.

13
00:00:34.630 --> 00:00:36.514
And this is where it's different.

14
00:00:36.514 --> 00:00:41.570
We've all been in this cult where
we just had to learn that, God,

15
00:00:41.570 --> 00:00:45.496
this looks like a regular function,
but it's not.

16
00:00:45.496 --> 00:00:47.886
It keeps rendering when things change.

17
00:00:47.886 --> 00:00:51.158
So you have to write your
functions in a stateless way.

18
00:00:51.158 --> 00:00:52.535
Especially, man,

19
00:00:52.535 --> 00:00:57.072
that transition from React classes
to arrow functions was rough.

20
00:00:57.072 --> 00:01:01.814
So now that we've been gaslit
into writing our React

21
00:01:01.814 --> 00:01:05.921
components in a stateless way, guess what?

22
00:01:05.921 --> 00:01:10.728
Now you gotta go back and
just treat them like regular functions.

23
00:01:10.728 --> 00:01:12.121
They're just regular functions.

24
00:01:12.121 --> 00:01:14.326
You can put async in front of them,
you can weight things,

25
00:01:14.326 --> 00:01:15.550
then you can return something.

26
00:01:15.550 --> 00:01:16.251
And guess what?

27
00:01:16.251 --> 00:01:19.648
This won't run until this is done,
just like a regular function.

28
00:01:19.648 --> 00:01:21.646
It's just a regular function now.

29
00:01:21.646 --> 00:01:25.428
So to me it's much easier to understand
because if I would have showed someone

30
00:01:25.428 --> 00:01:29.094
that knows JavaScript very well but
have never used a React component, and

31
00:01:29.094 --> 00:01:31.381
asked them,
what do they think is happening?

32
00:01:31.381 --> 00:01:37.082
There's no way they would tell me, yeah,
when you change that state, it re-renders.

33
00:01:37.082 --> 00:01:38.166
No, they would not.

34
00:01:38.166 --> 00:01:39.061
They would not understand that.

35
00:01:39.061 --> 00:01:42.373
They're like,
it's just a function that gets called, and

36
00:01:42.373 --> 00:01:43.830
you can use these closures.

37
00:01:43.830 --> 00:01:45.838
Well, you can't use a closure, sorry.

38
00:01:45.838 --> 00:01:47.819
Or there's a hook for that.

39
00:01:47.819 --> 00:01:49.378
They're like, what are you talking about?

40
00:01:49.378 --> 00:01:52.029
Okay, you don't have any of that
[LAUGH] in server components.

41
00:01:52.029 --> 00:01:55.977
It's literally just a regular
function that returns jsx, and

42
00:01:55.977 --> 00:01:57.400
you can make it async.

43
00:01:57.400 --> 00:02:00.244
So pretty simple, in my opinion.

44
00:02:00.244 --> 00:02:01.821
But okay, let's do that.

45
00:02:01.821 --> 00:02:04.152
So a couple things we gotta do.

46
00:02:04.152 --> 00:02:07.758
First, let's create our getIssues.

47
00:02:07.758 --> 00:02:11.551
I'm just gonna copy it,
you should too cuz it's pretty simple.

48
00:02:11.551 --> 00:02:13.506
That's gonna go in our data access layer.

49
00:02:15.973 --> 00:02:17.592
&gt;&gt; Scott Moss: Pretty simple,

50
00:02:17.592 --> 00:02:23.617
it just queries the database to
find any issues with the user.

51
00:02:23.617 --> 00:02:25.815
Actually, it's describing every
issue out of the database.

52
00:02:25.815 --> 00:02:28.380
So we have a data leak here.

53
00:02:28.380 --> 00:02:31.976
We should honestly be only checking for
issues that belong to the user, but

54
00:02:31.976 --> 00:02:33.526
clearly we're not doing that.

55
00:02:33.526 --> 00:02:35.962
But yeah, you should do that.

56
00:02:35.962 --> 00:02:40.426
[LAUGH] And the way that you would do that
is, you would do a where clause here, but

57
00:02:40.426 --> 00:02:42.575
I don't feel like writing that code.

58
00:02:42.575 --> 00:02:47.478
So we're gonna get the issues,
we're gonna order them, pretty simple.

59
00:02:47.478 --> 00:02:51.803
And then the next thing you wanna do is,
let's just go to our dashboard page.

60
00:02:51.803 --> 00:02:56.074
Let's go here, and
let's make this an async function.

61
00:02:56.074 --> 00:03:00.024
And then we're gonna say,

62
00:03:00.024 --> 00:03:04.154
issues = await getIssues.

63
00:03:04.154 --> 00:03:07.270
And let's see if this does
what I think it's gonna do.

64
00:03:07.270 --> 00:03:09.454
And I don't think it's gonna work,
which is intentional, but

65
00:03:09.454 --> 00:03:10.355
let's see what happens.

66
00:03:10.355 --> 00:03:11.220
Let me log this.

67
00:03:14.241 --> 00:03:16.700
&gt;&gt; Scott Moss: Okay, so we got that.

68
00:03:16.700 --> 00:03:18.760
I'm gonna go here.

69
00:03:18.760 --> 00:03:21.145
There we go, that's what I wanted to see.

70
00:03:21.145 --> 00:03:22.819
So we have this error here.

71
00:03:22.819 --> 00:03:26.858
This is cool, cuz you guys, you're
coming in when it's a lot easier now.

72
00:03:26.858 --> 00:03:29.405
If you would have tried to
use this six months ago,

73
00:03:29.405 --> 00:03:33.179
I mean, I think it is on video of me
trying to teach caching six months ago.

74
00:03:33.179 --> 00:03:36.406
And I was like, yeah, I don't know.

75
00:03:36.406 --> 00:03:38.787
Now it's like,
it's pretty straightforward.

76
00:03:38.787 --> 00:03:39.480
This is great.

77
00:03:39.480 --> 00:03:44.138
So this is saying, hey,
you try to go to /dashboard, but

78
00:03:44.138 --> 00:03:46.623
the component accessed data.

79
00:03:46.623 --> 00:03:51.591
As in you called some function on
the server, or you access headers,

80
00:03:51.591 --> 00:03:56.130
or you access parameters, or
you access short parameters, or

81
00:03:56.130 --> 00:03:58.890
you access some short-lived cache.

82
00:03:58.890 --> 00:04:04.384
It's basically saying, hey,
this seems like a dynamic component.

83
00:04:04.384 --> 00:04:05.953
This does not seem like
a static component.

84
00:04:05.953 --> 00:04:08.935
It's not gonna be the same
every single time.

85
00:04:08.935 --> 00:04:15.038
So we're forcing you to tell us what
you want to do with this component.

86
00:04:15.038 --> 00:04:15.991
Technically, there's three options.

87
00:04:15.991 --> 00:04:17.288
Let's just say two for now.

88
00:04:17.288 --> 00:04:18.566
You have two options.

89
00:04:18.566 --> 00:04:22.818
You can say, always treat this as dynamic,
and I'll show you how we're gonna do that.

90
00:04:22.818 --> 00:04:28.634
Or you can tell us where you
want to cache this component.

91
00:04:28.634 --> 00:04:29.857
You have to do one of the two.

92
00:04:29.857 --> 00:04:31.622
And that's what it's saying.

93
00:04:31.622 --> 00:04:33.792
And I like that.

94
00:04:33.792 --> 00:04:39.512
Now by default, the current version
of Next.js does not do this.

95
00:04:39.512 --> 00:04:42.619
We are using something that is coming
to the current version very soon.

96
00:04:42.619 --> 00:04:45.919
I already talked to the Next.js team,

97
00:04:45.919 --> 00:04:51.020
which is why I'm confident of using it,
called dynamicIO.

98
00:04:51.020 --> 00:04:53.043
DynamicIO is a flag that I have set.

99
00:04:53.043 --> 00:04:57.251
It's already set in yours on
a canary version of Next.js.

100
00:04:57.251 --> 00:05:00.483
And what this does,
I already have it pulled up.

101
00:05:00.483 --> 00:05:04.805
They had a whole blog
post about it in October.

102
00:05:04.805 --> 00:05:06.322
So let me just give you a backstory.

103
00:05:06.322 --> 00:05:10.702
Caching in Next.js 13, all the way
up to 15, it was on by default,

104
00:05:10.702 --> 00:05:13.330
essentially, in many different places.

105
00:05:13.330 --> 00:05:18.501
They had caching on the router level,
caching on the data level.

106
00:05:18.501 --> 00:05:22.072
It was just caching everywhere,
and it was on by default.

107
00:05:22.072 --> 00:05:26.332
So things were happening that you didn't
think were happening on your page.

108
00:05:26.332 --> 00:05:30.373
And the Next.js team, I think their
philosophy was fast by default.

109
00:05:30.373 --> 00:05:31.649
I think that's what they
were pitching back then.

110
00:05:31.649 --> 00:05:32.645
It's like, by default,

111
00:05:32.645 --> 00:05:35.240
this is really fast, because they
just cached everything for you.

112
00:05:35.240 --> 00:05:36.956
But people did not like that.

113
00:05:36.956 --> 00:05:39.851
They didn't like you just
caching all their stuff.

114
00:05:39.851 --> 00:05:41.544
There were a lot of issues around that.

115
00:05:41.544 --> 00:05:45.492
So they've since decided, all right,

116
00:05:45.492 --> 00:05:50.840
we're not going to force you
to opt out of our caching.

117
00:05:50.840 --> 00:05:52.040
We're not gonna give you a choice.

118
00:05:52.040 --> 00:05:54.612
You tell us, you have to pick, though.

119
00:05:54.612 --> 00:05:57.175
If you don't pick, we're gonna throw
an error, but you have to pick.

120
00:05:57.175 --> 00:05:59.712
You have to tell us,
do you want this to be dynamic or

121
00:05:59.712 --> 00:06:01.187
do you want this to be cached?

122
00:06:01.187 --> 00:06:05.683
And then the third option is partial or
hybrid, and we'll talk about that later,

123
00:06:05.683 --> 00:06:07.720
but you have to pick one of those two.

124
00:06:07.720 --> 00:06:13.258
So this blog post kinda walks
through the different use cases.

125
00:06:13.258 --> 00:06:16.065
TLDR, they created their own
directive called use cache.

126
00:06:16.065 --> 00:06:19.468
This is not something that's
part of the React spec.

127
00:06:19.468 --> 00:06:21.639
This is something that Next.js created.

128
00:06:21.639 --> 00:06:27.658
The React team has never created something
called use cache as a directive.

129
00:06:27.658 --> 00:06:30.929
They do have a hook called use,
don't be confused with that, but

130
00:06:30.929 --> 00:06:33.672
use cache, the directive,
this is a Next.js thing.

131
00:06:33.672 --> 00:06:37.324
This is you saying,
I want this page to be cached, right?

132
00:06:37.324 --> 00:06:38.988
That's what this is saying.

133
00:06:38.988 --> 00:06:40.981
If you want it to be dynamic,

134
00:06:40.981 --> 00:06:45.474
you would wrap the page that's
fetching the data in a suspense.

135
00:06:45.474 --> 00:06:49.680
If you don't know what React suspense is,
it's basically like,

136
00:06:49.680 --> 00:06:54.789
you can stream in a component after it's
done doing its asynchronous workload,

137
00:06:54.789 --> 00:06:58.339
and the rest of the page won't
be blocked because of it.

138
00:06:58.339 --> 00:07:02.399
So it's a great way to be like, I have
parts of my page that are static, but

139
00:07:02.399 --> 00:07:04.049
then some parts are dynamic.

140
00:07:04.049 --> 00:07:05.932
Load the static stuff up immediately, and

141
00:07:05.932 --> 00:07:08.033
then stream in these
parts when they're done.

142
00:07:08.033 --> 00:07:09.398
And it's a really good experience.

143
00:07:09.398 --> 00:07:12.468
So that's what a suspense
allows you to do.

144
00:07:12.468 --> 00:07:16.381
So by wrapping a page that does
data fetching in a suspense,

145
00:07:16.381 --> 00:07:19.292
we tell Next.js, this is always dynamic.

146
00:07:19.292 --> 00:07:22.462
By putting a use cache at the top
of that page, we tell Next.js,

147
00:07:22.462 --> 00:07:23.657
this is always static.

148
00:07:23.657 --> 00:07:29.743
So TLDR,
that's kinda what the dynamicIO does.

149
00:07:29.743 --> 00:07:31.394
It gets way more complicated,

150
00:07:31.394 --> 00:07:35.597
but that's all we're gonna talk about
cuz that's all we really need to know.

151
00:07:35.597 --> 00:07:38.160
Okay, now in the case
of getting all issues,

152
00:07:38.160 --> 00:07:40.526
we don't want this to be cached forever.

153
00:07:40.526 --> 00:07:43.675
So we probably, for now,
let's just say we want this to be dynamic.

154
00:07:43.675 --> 00:07:46.439
So how do we make sure this
is dynamic every time?

155
00:07:46.439 --> 00:07:50.304
Well, we have to wrap this in a suspense.

156
00:07:50.304 --> 00:07:52.450
So there's two ways we can do this.

157
00:07:52.450 --> 00:07:59.029
We can create a component out here that we
call in here that's wrapped in a suspense,

158
00:07:59.029 --> 00:08:04.033
or we can go to the layout component
that already renders this and

159
00:08:04.033 --> 00:08:05.992
put the suspense there.

160
00:08:05.992 --> 00:08:07.114
I'm gonna do the latter.

161
00:08:07.114 --> 00:08:14.359
So I'm gonna go to our layout
component in our dashboard layout,

162
00:08:14.359 --> 00:08:20.829
and I'm gonna put a suspense
in here around the children.

163
00:08:23.419 --> 00:08:27.028
&gt;&gt; Scott Moss: Like that,
import Suspense from React.

164
00:08:27.028 --> 00:08:28.806
Suspense takes a fallback.

165
00:08:28.806 --> 00:08:32.446
For now, I'm just going to put a div.

166
00:08:35.469 --> 00:08:37.515
&gt;&gt; Scott Moss: We're gonna fix this in
a minute, but I just want you to see this.

167
00:08:37.515 --> 00:08:42.518
I'm gonna put a div that it says loading.

168
00:08:42.518 --> 00:08:49.348
So this fallback gets showed in
place of that component loading.

169
00:08:49.348 --> 00:08:51.307
This is the loading page for this page.

170
00:08:55.517 --> 00:08:56.284
&gt;&gt; Scott Moss: Okay.

171
00:08:58.262 --> 00:08:59.496
&gt;&gt; Scott Moss: Let's save that.

172
00:08:59.496 --> 00:09:01.537
Let's go back to our page.

173
00:09:01.537 --> 00:09:05.265
And I don't have that error anymore,
it's gone.

174
00:09:05.265 --> 00:09:11.718
Because I told Next.js, this is always
dynamic by wrapping it in a suspense.

175
00:09:11.718 --> 00:09:14.083
So I chose, so
Next.js is not gonna warn me.

176
00:09:14.083 --> 00:09:17.237
So now if you're in that
new mode dynamicIO,

177
00:09:17.237 --> 00:09:21.638
that is coming to Next.js,
you won't have to put a flag on it.

178
00:09:21.638 --> 00:09:26.430
If you have a page that's doing
one of those things, it listed it,

179
00:09:26.430 --> 00:09:30.966
but pretty much fetching data,
touching headers or cookies,

180
00:09:30.966 --> 00:09:33.878
search params, short-lived caches,

181
00:09:33.878 --> 00:09:38.778
anything like that is telling
Next.js that this is a dynamic page.

182
00:09:38.778 --> 00:09:43.056
So it's like, we don't know what you want
to do with this, so you have to tell us,

183
00:09:43.056 --> 00:09:44.734
what do you want to do with this?

184
00:09:44.734 --> 00:09:49.682
Should we always keep this dynamic like
every other framework ever out there, or

185
00:09:49.682 --> 00:09:52.021
do you wanna cache some parts of this?

186
00:09:52.021 --> 00:09:53.917
So that's why it's throwing the error.

187
00:09:53.917 --> 00:09:55.494
I think that's a really good approach.

188
00:09:55.494 --> 00:09:57.056
It forces you to choose.

189
00:09:57.056 --> 00:10:00.842
By default, when you're developing,
put everything in suspense.

190
00:10:00.842 --> 00:10:02.835
Just put everything in suspense
while you're developing.

191
00:10:02.835 --> 00:10:06.167
And then once you figure out what you
wanna cache, then start caching stuff.

192
00:10:06.167 --> 00:10:12.773
&gt;&gt; Speaker 2: So without that flag,
it would be back to caching everything?

193
00:10:12.773 --> 00:10:14.740
&gt;&gt; Scott Moss: Yeah, without that flag,

194
00:10:14.740 --> 00:10:18.342
I would need three days to
explain caching to you.

195
00:10:18.342 --> 00:10:21.745
Absolutely, a whole different world.

196
00:10:21.745 --> 00:10:25.853
Just insane, in my opinion, powerful.

197
00:10:25.853 --> 00:10:30.806
But I don't know, it's really hard.

198
00:10:30.806 --> 00:10:32.457
It's really hard to grok, in my opinion.

199
00:10:32.457 --> 00:10:36.326
It's like you have to do a lot of
gymnastics to opt out of caching.

200
00:10:36.326 --> 00:10:40.360
And even then, I swear, sometimes
I'm like, why is this still cached?

201
00:10:40.360 --> 00:10:43.097
The caching is so good,
you can't get away from it.

202
00:10:43.097 --> 00:10:45.525
So I like this approach better,
it's simple.

203
00:10:45.525 --> 00:10:51.220
You explicitly say, cache this, or
you explicitly say, never cache this.

