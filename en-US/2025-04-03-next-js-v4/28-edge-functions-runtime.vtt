WEBVTT

1
00:00:00.320 --> 00:00:03.514
&gt;&gt; Scott Moss: All right, and
that kinda brings us into the next thing

2
00:00:03.514 --> 00:00:06.570
that's very much more of
what I was just saying, and

3
00:00:06.570 --> 00:00:09.160
that is going to be
the edge compute stuff.

4
00:00:09.160 --> 00:00:13.640
So I talked a little bit about it, but
I was trying not to talk about it cuz I

5
00:00:13.640 --> 00:00:17.701
knew I was gonna talk about it now,
but now I'm talking about it.

6
00:00:17.701 --> 00:00:19.322
So what is Edge Runtime?

7
00:00:19.322 --> 00:00:22.924
It's basically a very lightweight
JavaScript environment.

8
00:00:22.924 --> 00:00:27.389
I have provided by Vercel here, but
Vercel didn't create Edge Runtime.

9
00:00:27.389 --> 00:00:30.039
[LAUGH] They're not
the makers of Edge Runtime.

10
00:00:30.039 --> 00:00:33.609
It's just a slimmed down
version of JavaScript,

11
00:00:33.609 --> 00:00:38.459
it's actually more similar to the web
than it is Node in my opinion.

12
00:00:38.459 --> 00:00:42.305
So far you've known browser
JavaScript with Windows and

13
00:00:42.305 --> 00:00:46.180
then you've known
Node JavaScript with modules.

14
00:00:46.180 --> 00:00:48.568
Now there's Edge JavaScript,
there's a third one now.

15
00:00:48.568 --> 00:00:55.459
[LAUGH] And it's way different and
it's way less and it's more strict, right?

16
00:00:55.459 --> 00:01:01.110
This is the first runtime that is limited
on the actual things you can use,

17
00:01:01.110 --> 00:01:06.026
how big it can be, how the size,
all different types of stuff.

18
00:01:06.026 --> 00:01:11.307
And the reason that is the case is because
if you're running something on the Edge,

19
00:01:11.307 --> 00:01:14.863
the window in which you have
to run that is really small.

20
00:01:14.863 --> 00:01:16.809
So it has to be lightweight,
it has to be quick.

21
00:01:16.809 --> 00:01:21.082
So there's a lot of limitations
on things you can bring in,

22
00:01:21.082 --> 00:01:26.090
you can't load up 500 megabyte
app on the Edge at that point.

23
00:01:26.090 --> 00:01:31.015
Any benefit you would have had of running
that computation on a server closest

24
00:01:31.015 --> 00:01:35.199
to your users is now null because
it took so long to load that file.

25
00:01:35.199 --> 00:01:36.526
So what was the point?

26
00:01:36.526 --> 00:01:39.309
You should have just went to your origin,
you should have just used Redis or

27
00:01:39.309 --> 00:01:40.159
something like that.

28
00:01:40.159 --> 00:01:44.617
So anyway, it's meant to be lightweight,

29
00:01:44.617 --> 00:01:48.237
it's fast, minimum code starts.

30
00:01:48.237 --> 00:01:53.488
It's basically optimizer functions,
I need to get things done quickly,

31
00:01:53.488 --> 00:01:58.070
closer to the user,
we did authentication, personalization,

32
00:01:58.070 --> 00:02:02.590
A/B testing is a huge one or
just like other request-time ops.

33
00:02:02.590 --> 00:02:05.115
Here's just a little chart that I
put together that shows some of

34
00:02:05.115 --> 00:02:05.872
the differences.

35
00:02:05.872 --> 00:02:09.636
So you can see the big
one is a Node.js runtime,

36
00:02:09.636 --> 00:02:14.360
you can have functions that
are several gigabytes in size.

37
00:02:14.360 --> 00:02:16.769
You'll pay the price, but you can do it.

38
00:02:16.769 --> 00:02:20.988
This usually lower than that.

39
00:02:20.988 --> 00:02:26.356
Execution time, most of them have very
strict execution times on how you

40
00:02:26.356 --> 00:02:32.254
can do Edge function, and if you go past
the execution time, it'll just stop.

41
00:02:32.254 --> 00:02:36.244
And I'm talking like three seconds,

42
00:02:36.244 --> 00:02:40.115
two seconds, something like that.

43
00:02:40.115 --> 00:02:47.180
Yeah, so lots of stuff there,
how do we do Edge Runtime in Next.js?

44
00:02:47.180 --> 00:02:51.082
Well, we just did one with the middleware
for free, that's always an edge.

45
00:02:51.082 --> 00:02:55.783
On our local computer, it's just node and
that can be confusing.

46
00:02:55.783 --> 00:02:59.006
You might pull in some code
locally during dev time,

47
00:02:59.006 --> 00:03:03.925
when you're running on your computer and
pull in something that works in node.

48
00:03:03.925 --> 00:03:05.629
And you run it in here and
you're like, wow, that worked.

49
00:03:05.629 --> 00:03:10.035
And then you go deploy it and it doesn't
work because the thing that you imported

50
00:03:10.035 --> 00:03:13.132
was in node and
this executed in node on your computer.

51
00:03:13.132 --> 00:03:15.925
So it worked on your computer, but
when you deployed it, it doesn't work.

52
00:03:15.925 --> 00:03:19.687
So that's something I see happen a lot.

53
00:03:19.687 --> 00:03:22.900
The other way we can do Edge is,
yeah, I was right.

54
00:03:22.900 --> 00:03:27.989
You can export const runtime
edge inside of API route or

55
00:03:27.989 --> 00:03:32.302
a server component and
that will tell Vercel,

56
00:03:32.302 --> 00:03:36.790
hey, use the Edge Runtime for
this function.

57
00:03:36.790 --> 00:03:38.228
Now that doesn't mean it's gonna work,

58
00:03:38.228 --> 00:03:40.417
it just means that that's
the runtime it's going to put it in.

59
00:03:40.417 --> 00:03:43.377
You still have to do your job to make sure

60
00:03:43.377 --> 00:03:47.162
that you aren't using some
of the node specific.

61
00:03:47.162 --> 00:03:48.497
What if I put some of that stuff in here?

62
00:03:48.497 --> 00:03:52.493
Node specific modules that
don't work in Edge and I mean,

63
00:03:52.493 --> 00:03:57.483
you're gonna get an error, so
you don't really have to think about it.

64
00:03:57.483 --> 00:04:01.236
It's gonna work or it's not gonna work,
but there are websites dedicated to

65
00:04:01.236 --> 00:04:04.188
showing you, does this work in Edge,
and things like that.

66
00:04:04.188 --> 00:04:05.805
I would say for the most part,

67
00:04:05.805 --> 00:04:09.766
most technologies coming out now try
to maintain to be Edge compatible.

68
00:04:09.766 --> 00:04:11.557
So that's something you
got to look out for,

69
00:04:11.557 --> 00:04:13.218
now if you're ever gonna use something.

70
00:04:13.218 --> 00:04:18.389
There are different approaches to how
to get Edge to work, there's shimming,

71
00:04:18.389 --> 00:04:23.162
poly filling things like, maybe file
system doesn't work on the Edge.

72
00:04:23.162 --> 00:04:25.944
But instead of forcing you to go
delete all your file system code,

73
00:04:25.944 --> 00:04:27.166
we'll just mock it all out.

74
00:04:27.166 --> 00:04:29.126
So it doesn't do anything,
but it won't break.

75
00:04:29.126 --> 00:04:31.250
So there's different attempts.

76
00:04:31.250 --> 00:04:35.262
Vercel has their own attempt where they
want you to get Edge computing but

77
00:04:35.262 --> 00:04:38.905
also still keep all your node code,
and it's pretty ambitious.

78
00:04:38.905 --> 00:04:43.547
And so far it works pretty good but
that's a whole other thing.

79
00:04:43.547 --> 00:04:46.059
Yeah, here we go, I was like,
I know I put this in here somewhere.

80
00:04:46.059 --> 00:04:50.722
So here's some things
you can do in the Edge,

81
00:04:50.722 --> 00:04:56.018
you got fetch that works for
request and response.

82
00:04:56.018 --> 00:05:02.522
You got headers, text, encoder, crypto,
the stuff that you would probably use.

83
00:05:02.522 --> 00:05:04.681
You might not use a lot of
this stuff directly, but

84
00:05:04.681 --> 00:05:06.339
a lot of the things you use, use this.

85
00:05:06.339 --> 00:05:08.812
So it's pretty good to have this.

86
00:05:08.812 --> 00:05:12.882
And then Next.js provides
these helpers for you.

87
00:05:14.835 --> 00:05:19.272
But again there are some limitations,
for instance, file system,

88
00:05:19.272 --> 00:05:23.876
memory constraints, execution times,
different things like that.

89
00:05:24.895 --> 00:05:28.132
&gt;&gt; Speaker 2: What's
that geolocation stuff?

90
00:05:28.132 --> 00:05:30.107
&gt;&gt; Scott Moss: The geolocation,
this one right here.

91
00:05:30.107 --> 00:05:34.474
So this one right here, the geo-property
that Next.js puts on the request,

92
00:05:34.474 --> 00:05:38.657
it just tells you more about information
of where the IP address came from.

93
00:05:38.657 --> 00:05:46.132
So I think you might have to buy into
some of that, don't quote me on that.

94
00:05:46.132 --> 00:05:48.569
But I think there's some additional
stuff you have to do there, but

95
00:05:48.569 --> 00:05:50.216
it could give you the longitude, latitude.

96
00:05:50.216 --> 00:05:54.348
But more specifically I think it gives
you the region of where somebody's coming

97
00:05:54.348 --> 00:05:57.461
from, maybe the locale,
the language, things like that.

98
00:05:57.461 --> 00:06:02.562
Stuff that's already on the request
object, they just format it nice for

99
00:06:02.562 --> 00:06:05.949
you, and
they might do a thin pass through of it.

100
00:06:05.949 --> 00:06:09.900
&gt;&gt; Speaker 3: Is the Edge Runtime
like standard across providers or

101
00:06:09.900 --> 00:06:12.365
is a vendor locking to Vercel or?

102
00:06:12.365 --> 00:06:13.643
&gt;&gt; Scott Moss: It's
standard across providers.

103
00:06:13.643 --> 00:06:16.765
Just like node is standard
across providers and I guess,

104
00:06:16.765 --> 00:06:20.085
the browser runtime has different
JavaScript engines, but

105
00:06:20.085 --> 00:06:23.090
still that's also standard
across browsers as well.

106
00:06:23.090 --> 00:06:28.756
So nobody owns it, it's a spec-specific
runtime, yeah, great, I've been

107
00:06:28.756 --> 00:06:34.950
talking about you also need storage on
the Edge if you're gonna use Edge compute.

108
00:06:34.950 --> 00:06:39.908
Well, Vercel has something called Edge
config which is simply just a key

109
00:06:39.908 --> 00:06:43.578
value store,
you can think of it as Redis on the Edge.

110
00:06:43.578 --> 00:06:48.422
The way you get around a lot of stuff,
just make sure it's HTTP based.

111
00:06:48.422 --> 00:06:51.416
If you can interact with
something over HTTP,

112
00:06:51.416 --> 00:06:54.560
you most likely will be
able to use it on the Edge,

113
00:06:54.560 --> 00:06:59.429
if the mechanism in which it's doing
HTTP is fetch or response or request.

114
00:06:59.429 --> 00:07:02.229
You won't be able to use
something like Axios on the Edge,

115
00:07:02.229 --> 00:07:03.667
that's just not gonna work.

116
00:07:03.667 --> 00:07:07.985
It's not gonna work.

117
00:07:07.985 --> 00:07:12.234
So HTTP uses web standards,
it'll work on the Edge, and to me,

118
00:07:12.234 --> 00:07:16.185
that's what serverless means,
that's what edge means.

