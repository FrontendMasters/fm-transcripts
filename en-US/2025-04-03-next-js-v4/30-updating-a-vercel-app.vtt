WEBVTT

1
00:00:00.000 --> 00:00:05.133
&gt;&gt; Scott Moss: Now if we wanted to make
changes to this and stuff like that,

2
00:00:05.133 --> 00:00:09.659
so let's say I go into my app,
I wanna make a change.

3
00:00:09.659 --> 00:00:12.684
I don't know,
I don't wanna change too much.

4
00:00:12.684 --> 00:00:16.171
But let's say I go into the home page and

5
00:00:16.171 --> 00:00:19.984
I want to put a period here for
some reason.

6
00:00:19.984 --> 00:00:23.867
Okay, so now I commit this change.

7
00:00:23.867 --> 00:00:28.304
Well, first of all, lemme get off main so
I can actually show this.

8
00:00:28.304 --> 00:00:35.521
So I'll check out a new branch, a feature
branch, and I'll call this feature copy.

9
00:00:35.521 --> 00:00:37.273
We're updating the copy.

10
00:00:37.273 --> 00:00:40.790
I'll add that change back, cool.

11
00:00:40.790 --> 00:00:43.317
Then I'll push this up.

12
00:00:43.317 --> 00:00:44.318
Now we have this.

13
00:00:44.318 --> 00:00:48.532
I'll open a PR to Main and

14
00:00:48.532 --> 00:00:52.752
then we get this Vercel.

15
00:00:52.752 --> 00:00:57.094
Automatically does some things,
so it starts adding some checks.

16
00:00:57.094 --> 00:01:02.537
So a couple checks that it tries to do is,
typically when you deploy something,

17
00:01:02.537 --> 00:01:05.543
there's usually like, you have staging,

18
00:01:05.543 --> 00:01:09.785
you have production,
Vercel doesn't support a lot of that.

19
00:01:09.785 --> 00:01:13.070
They actually just added a feature where
you can add custom environments now but

20
00:01:13.070 --> 00:01:14.895
what they do instead
is they have previews.

21
00:01:14.895 --> 00:01:17.336
You can change how the behavior works.

22
00:01:17.336 --> 00:01:22.016
But by default, when I make a new PR
a pull requests into my main branch or

23
00:01:22.016 --> 00:01:25.448
whatever branch you designate
as your main branch,

24
00:01:25.448 --> 00:01:30.063
Vercel is going to deploy a ephemeral
preview version of that branch.

25
00:01:30.063 --> 00:01:34.328
So in this case, it took the code
from this branch feature copy and

26
00:01:34.328 --> 00:01:36.510
deployed it as a preview branch.

27
00:01:36.510 --> 00:01:40.613
This is really great because if you are
responsible for reviewing this code, let's

28
00:01:40.613 --> 00:01:44.397
say you're the team leader or whatever,
you're the one reviewing this PR.

29
00:01:44.397 --> 00:01:48.144
You can go to the app and
actually see it, right?

30
00:01:48.144 --> 00:01:50.774
It's not just like, show me
a screenshot or let's go through this.

31
00:01:50.774 --> 00:01:52.639
No, I can just go to the app and

32
00:01:52.639 --> 00:01:57.818
see your code running in a production
like environment to see what's happening.

33
00:01:57.818 --> 00:01:58.947
So you can play around with it.

34
00:01:58.947 --> 00:02:00.585
So you get that for free.

35
00:02:00.585 --> 00:02:04.834
If I go click on it,
it'll take me to that preview branch.

36
00:02:04.834 --> 00:02:05.611
Here it is.

37
00:02:05.611 --> 00:02:07.910
Here's the URL for it.

38
00:02:07.910 --> 00:02:08.958
I click on it.

39
00:02:08.958 --> 00:02:09.895
It works.

40
00:02:09.895 --> 00:02:14.742
This authentication right here just makes
sure that whoever's looking at this

41
00:02:14.742 --> 00:02:18.014
preview branch has to be on
your Vercel team to see it.

42
00:02:18.014 --> 00:02:20.791
Otherwise, anybody who had this
URL can go look at your preview,

43
00:02:20.791 --> 00:02:22.218
which you probably don't want.

44
00:02:22.218 --> 00:02:25.905
Then they have this thing right
here that you can click on and

45
00:02:25.905 --> 00:02:27.464
it does a bunch of stuff.

46
00:02:27.464 --> 00:02:28.647
You can leave comments.

47
00:02:28.647 --> 00:02:33.707
So I can go in here and
like, no, don't do this.

48
00:02:36.915 --> 00:02:39.667
Now people can see that
there's a comment here.

49
00:02:39.667 --> 00:02:45.202
If I integrate it with Vercel's
feature flags, I can turn on and

50
00:02:45.202 --> 00:02:50.241
off feature flags to see them here,
which is really cool.

51
00:02:50.241 --> 00:02:51.362
They have a lot of stuff.

52
00:02:51.362 --> 00:02:56.953
[LAUGH] I can share this
with someone on my team.

53
00:02:56.953 --> 00:02:59.754
You can look at the Meta tags for SEO.

54
00:02:59.754 --> 00:03:03.334
You can do performance type stuff.

55
00:03:03.334 --> 00:03:07.767
There's a QR code for
something to go here.

56
00:03:07.767 --> 00:03:09.367
They just thought of everything.

57
00:03:09.367 --> 00:03:11.017
&gt;&gt; Speaker 2: You could like check mobile.

58
00:03:11.017 --> 00:03:12.240
&gt;&gt; Scott Moss: You could check mobile,
yeah,

59
00:03:12.240 --> 00:03:14.468
there you go,
I guess that's what it's good for, yeah.

60
00:03:14.468 --> 00:03:15.513
You could even switch branches.

61
00:03:15.513 --> 00:03:18.533
So if there's another branch which I don't
have, you can switch to that branch and

62
00:03:18.533 --> 00:03:20.837
it'll load that version of that
site right here immediately.

63
00:03:20.837 --> 00:03:24.539
So really, really, really cool.

64
00:03:24.539 --> 00:03:27.091
And you get this, as you can see for

65
00:03:27.091 --> 00:03:31.327
free, I'm not paying for
anything on my personal plan.

66
00:03:31.327 --> 00:03:32.960
They want me to install
the Slack integration.

67
00:03:32.960 --> 00:03:38.189
If someone comments something and tags
me in it, I'll get a Slack notification.

68
00:03:38.189 --> 00:03:40.030
So it kinda thought of everything.

69
00:03:40.030 --> 00:03:43.801
They also have like stuff for,
where is it at?

70
00:03:43.801 --> 00:03:44.998
What's preview mode?

71
00:03:44.998 --> 00:03:50.680
There should be a preview mode in here,
which is different than a preview deploy.

72
00:03:50.680 --> 00:03:53.790
Where is it at?

73
00:03:53.790 --> 00:03:54.680
I don't see it anymore.

74
00:03:54.680 --> 00:03:57.640
They used to have like a preview mode and

75
00:03:57.640 --> 00:04:02.404
that would be something you would have for
like headless CMSs.

76
00:04:02.404 --> 00:04:04.607
Headless CMSs that had preview content.

77
00:04:04.607 --> 00:04:09.131
You might want to see that preview
content on a preview branch.

78
00:04:09.131 --> 00:04:10.812
So it's pretty cool.

79
00:04:10.812 --> 00:04:11.886
So there we go.

80
00:04:11.886 --> 00:04:14.643
We got the preview branch and
then you can test that out.

81
00:04:14.643 --> 00:04:18.419
When it's ready to go, you can merge it.

82
00:04:18.419 --> 00:04:23.148
So lemme go back to my GitHub here.

83
00:04:23.148 --> 00:04:28.371
I didn't even know that it added a blocker
cuz those are unresolved comment.

84
00:04:28.371 --> 00:04:29.527
I didn't know it did that.

85
00:04:29.527 --> 00:04:30.113
&gt;&gt; Speaker 2: That's wild.

86
00:04:30.113 --> 00:04:31.613
&gt;&gt; Scott Moss: That's really cool.

87
00:04:31.613 --> 00:04:35.984
&gt;&gt; Speaker 2: What's that comment
that you added look like in here?

88
00:04:35.984 --> 00:04:37.353
&gt;&gt; Scott Moss: It doesn't show you.

89
00:04:37.353 --> 00:04:40.464
It just links you to where it is.

90
00:04:40.464 --> 00:04:45.510
&gt;&gt; Speaker 2: What if you click on that,
does it like deep link to?

91
00:04:45.510 --> 00:04:47.565
&gt;&gt; Scott Moss: Yeah,
it says go to feedback.

92
00:04:47.565 --> 00:04:49.647
Yeah, there you go, yeah.

93
00:04:49.647 --> 00:04:51.690
&gt;&gt; [LAUGH].

94
00:04:51.690 --> 00:04:52.917
&gt;&gt; Scott Moss: [LAUGH] Wow.

95
00:04:52.917 --> 00:04:57.051
Yeah, so I can resolve that and
I'm guessing that'll clean it up.

96
00:04:57.051 --> 00:04:59.024
So let's go back.

97
00:04:59.024 --> 00:05:01.346
Yeah, it does [LAUGH].

98
00:05:01.346 --> 00:05:03.023
It's pretty nice [LAUGH].

99
00:05:03.023 --> 00:05:08.830
It's pretty nice, I didn't know they
did that, that's really nice, yeah.

100
00:05:08.830 --> 00:05:12.183
And then when I'm ready and
everything looks good,

101
00:05:12.183 --> 00:05:14.554
I'll just merge this Pull request.

102
00:05:14.554 --> 00:05:16.033
Actually, hold on.

103
00:05:16.033 --> 00:05:19.304
Need to rebase and merge,
I don't ever merge, that's just gross.

104
00:05:19.304 --> 00:05:22.657
And now it's gonna do another deploy.

105
00:05:22.657 --> 00:05:24.584
It's gonna deploy that to production.

106
00:05:24.584 --> 00:05:31.213
So if I go look at Vercel
here I go to Deployments,

107
00:05:31.213 --> 00:05:35.923
it should be deploying right now.

108
00:05:35.923 --> 00:05:37.998
It's deploying that code into production.

109
00:05:37.998 --> 00:05:39.110
So pretty simple.

110
00:05:39.110 --> 00:05:43.189
And then you get to branch off of all the
environment settings, all the settings for

111
00:05:43.189 --> 00:05:47.279
deployment, you get to branch that off
depending on what environment you're in.

112
00:05:47.279 --> 00:05:50.949
If I'm in settings,
I can add different environment.

113
00:05:50.949 --> 00:05:53.369
Well, there's a custom environments, but

114
00:05:53.369 --> 00:05:57.328
I can add different environment
variables for different environments.

115
00:05:57.328 --> 00:05:58.482
They don't all have to be the same.

116
00:05:58.482 --> 00:06:01.804
So right now I'm using that one
database URL for all my environments.

117
00:06:01.804 --> 00:06:03.292
You probably wouldn't do that.

118
00:06:03.292 --> 00:06:07.996
You would instead use a different
database URL for preview.

119
00:06:07.996 --> 00:06:09.778
But here's the question,
if you've thought about it.

120
00:06:09.778 --> 00:06:14.757
If the preview branches are ephemeral,
they spin up whenever a new PR comes.

121
00:06:14.757 --> 00:06:17.983
How do you get a dynamic database
URL only for that preview?

122
00:06:17.983 --> 00:06:21.246
Because if you think about it,
if I'm spinning up a preview version of

123
00:06:21.246 --> 00:06:24.063
my app on every PR,
let's say I have 30 people on my team and

124
00:06:24.063 --> 00:06:27.270
they're all just doing pull requests,
how do they all have access to

125
00:06:27.270 --> 00:06:30.358
their own storage, their own database,
their own everything?

126
00:06:30.358 --> 00:06:35.321
Well, that's why every modern database
today has branching on it just for

127
00:06:35.321 --> 00:06:36.355
this purpose.

128
00:06:36.355 --> 00:06:39.473
So if Neon has branching,
you can branch your database off.

129
00:06:39.473 --> 00:06:42.376
They have integration with Vercel
that will create a branch for

130
00:06:42.376 --> 00:06:45.124
your database whenever a preview
deployment is deployed.

131
00:06:45.124 --> 00:06:47.256
And they'll add it in your
environment variables for you so

132
00:06:47.256 --> 00:06:48.415
you don't have to do anything.

133
00:06:48.415 --> 00:06:50.307
So does like planetscale, so

134
00:06:50.307 --> 00:06:55.233
does pretty much every modern database
that I've used today has branching.

135
00:06:55.233 --> 00:07:00.162
So you can associate a branch of your
database with a branch of your app,

136
00:07:00.162 --> 00:07:01.242
AKA a preview.

137
00:07:01.242 --> 00:07:04.304
They allow branching,
just empty database with a schema, but

138
00:07:04.304 --> 00:07:05.938
also branching the data as well.

139
00:07:05.938 --> 00:07:08.796
So if you wanna take all your prod data,
branch it,

140
00:07:08.796 --> 00:07:12.528
basically essentially copy it
into another database instantly.

141
00:07:12.528 --> 00:07:13.918
It doesn't take forever, it's instant.

142
00:07:13.918 --> 00:07:17.741
And then apply that to a preview
build automatically, it'll do that.

143
00:07:17.741 --> 00:07:22.036
So you're actually using real data on
a preview version of your app instantly

144
00:07:22.036 --> 00:07:24.955
without having to do what
we had to do 10 years ago.

145
00:07:24.955 --> 00:07:28.774
Just export a file from a database,
import it back, and

146
00:07:28.774 --> 00:07:33.754
it could take forever or even worse,
just using Mock data and Seed data.

147
00:07:33.754 --> 00:07:35.713
So it's really good.

148
00:07:35.713 --> 00:07:37.092
And that's actually what
I do in production.

149
00:07:37.092 --> 00:07:40.409
I use Neo, we branch on previews.

150
00:07:40.409 --> 00:07:43.027
It branches the production
database over to the preview.

151
00:07:43.027 --> 00:07:45.982
So when we're looking at the preview app,

152
00:07:45.982 --> 00:07:49.605
it's with real data and
we use it very exclusively.

153
00:07:49.605 --> 00:07:50.775
It works very well.

154
00:07:54.299 --> 00:07:57.130
&gt;&gt; Scott Moss: Cool,
that should have deployed.

155
00:07:57.130 --> 00:08:00.201
Looks like it did, it's good to go, cool.

156
00:08:00.201 --> 00:08:04.009
Any questions on deployment?

157
00:08:04.009 --> 00:08:05.656
&gt;&gt; Speaker 3: And this is all free?

158
00:08:05.656 --> 00:08:07.218
&gt;&gt; Scott Moss: For this, yeah, I mean,

159
00:08:07.218 --> 00:08:11.990
they're eventually gonna charge you
when you go past certain limits, right?

160
00:08:11.990 --> 00:08:16.681
I don't know the exact
thing that they charge, but

161
00:08:16.681 --> 00:08:21.275
let's say you had we have the API routes,
right?

162
00:08:21.275 --> 00:08:24.756
Those API routes, I don't know,
a lot of people just start, you blow up,

163
00:08:24.756 --> 00:08:29.154
you start getting 100,000 calls a day and
they're gonna charge you for that, right?

164
00:08:29.154 --> 00:08:33.678
Pretty much anything that hits their
server, anything that server sites or

165
00:08:33.678 --> 00:08:38.499
react server components, they're
eventually gonna start charging for that.

166
00:08:38.499 --> 00:08:41.478
Now if you just built like a full
client app and only put it on Vercel,

167
00:08:41.478 --> 00:08:45.037
you could probably get away with without
ever paying anything if you didn't want

168
00:08:45.037 --> 00:08:47.313
any of the collaborative
features that they have.

169
00:08:47.313 --> 00:08:50.532
Cuz a lot of the stuff you gotta pay for
is around collaboration as well.

170
00:08:50.532 --> 00:08:53.774
Like feature flags,
they have like observability.

171
00:08:53.774 --> 00:08:56.839
If you want like extra performance stuff
in here, they might charge you for it.

172
00:08:56.839 --> 00:09:03.544
Or I think analytics, yeah, you gotta pay
for analytics if you want web analytics.

173
00:09:03.544 --> 00:09:07.477
But they also have,
lemme see if I can find it.

174
00:09:07.477 --> 00:09:09.335
Is it in here?

175
00:09:09.335 --> 00:09:13.231
They have a platform
which you can install.

176
00:09:13.231 --> 00:09:14.821
You can install like integrations.

177
00:09:14.821 --> 00:09:16.161
They have like an integration thing.

178
00:09:16.161 --> 00:09:18.735
So yeah, you can also
integrate with a lot of stuff.

179
00:09:18.735 --> 00:09:21.565
And it's kinda like Heroku,
if you've ever used Heroku in the past.

180
00:09:21.565 --> 00:09:24.844
But these are all standalone products
that you can sign up externally and

181
00:09:24.844 --> 00:09:26.414
just add environment variables.

182
00:09:26.414 --> 00:09:29.981
But a lot of them optionally have
integrations with Vercel, like Neon,

183
00:09:29.981 --> 00:09:33.903
like I said, will automatically manage
those environment variables for you.

184
00:09:33.903 --> 00:09:36.953
Upstash will automatically do stuff for
you.

185
00:09:36.953 --> 00:09:39.663
And if you integrate on this side,

186
00:09:39.663 --> 00:09:43.874
you don't ever have to log
into this app to manage it.

187
00:09:43.874 --> 00:09:46.331
It's all like one unified bill.

188
00:09:46.331 --> 00:09:48.948
It's all underneath one house,
you don't have to do anything.

189
00:09:48.948 --> 00:09:51.616
So it's literally just like Heroku.

190
00:09:51.616 --> 00:09:54.762
So they have tons of integrations
as well that you can do.

191
00:09:54.762 --> 00:09:58.900
And then they've also partnered
with a lot of these companies, for

192
00:09:58.900 --> 00:10:03.271
instance, if you go to storage,
you can literally just add Neon here.

193
00:10:03.271 --> 00:10:06.807
Upstash a lot of the stuff
like Edge config and stuff.

194
00:10:06.807 --> 00:10:09.319
I'm pretty sure this
is just using Upstash.

195
00:10:09.319 --> 00:10:14.139
So they used to have their own,
yeah, right here.

196
00:10:14.139 --> 00:10:14.978
No, that's not it.

197
00:10:14.978 --> 00:10:18.387
They used to have their own Postgres
database which was literally just Neon.

198
00:10:18.387 --> 00:10:22.662
So they'll do stuff like that but
they're trying to make it super easy for

199
00:10:22.662 --> 00:10:24.193
you to just get started.

200
00:10:24.193 --> 00:10:28.195
They even have like AI now, so
if you've ever looked at NPM,

201
00:10:28.195 --> 00:10:30.160
install AI that's Vercel.

202
00:10:30.160 --> 00:10:35.920
That's their SDK that is just
like a super simple AI SDK.

203
00:10:35.920 --> 00:10:40.528
And they let you like use different
open-source models, different products

204
00:10:40.528 --> 00:10:44.593
like Perplexity, you can just tie
in without having to go anywhere.

205
00:10:44.593 --> 00:10:46.537
Replicate is a really good one.

206
00:10:46.537 --> 00:10:49.972
So they're trying to give you everything
here without having to go everywhere.

207
00:10:49.972 --> 00:10:54.248
Casting aside all these
amazing Vercel features,

208
00:10:54.248 --> 00:10:59.625
do you have any tips or
insight into self-hosting Next.js apps?

209
00:10:59.625 --> 00:11:03.269
I have, I don't recommend it.

210
00:11:03.269 --> 00:11:06.550
Well, I'm not gonna say I don't
recommend it, lemme take that back.

211
00:11:06.550 --> 00:11:10.453
Because up until recently,
in my opinion, Next.js or

212
00:11:10.453 --> 00:11:14.804
Vercel was really,
really expensive, super expensive.

213
00:11:14.804 --> 00:11:19.019
We got hit by traffic on one of our
iterations of our product cuz we were

214
00:11:19.019 --> 00:11:22.293
doing like all these background
jobs with Upstash and

215
00:11:22.293 --> 00:11:25.221
our bill went from nothing to $10,000.

216
00:11:25.221 --> 00:11:30.023
And I was like, we don't even have that
many users and it's already $10,000.

217
00:11:30.023 --> 00:11:36.113
It's not Vercel's fault,
it was just the way that those background

218
00:11:36.113 --> 00:11:41.573
jobs work is like one job might
do 100 requests for one job.

219
00:11:41.573 --> 00:11:45.336
And Next.js isn't built, assuming that
Next.js is like, that's 100 requests,

220
00:11:45.336 --> 00:11:47.005
that's probably like 100 people.

221
00:11:47.005 --> 00:11:49.986
So you're probably doing better and
you can afford this.

222
00:11:49.986 --> 00:11:54.164
But no, that was just like one person
doing one job that did a hundred requests.

223
00:11:54.164 --> 00:11:57.497
So it didn't scale the way that they
thought your business would be scaling if

224
00:11:57.497 --> 00:11:58.894
you had that amount of traffic.

225
00:11:58.894 --> 00:12:01.277
And they know this,
we've talked with them.

226
00:12:01.277 --> 00:12:05.690
I actually know the first Vercel
team pretty well from the CEO down.

227
00:12:05.690 --> 00:12:06.877
And they're aware of this.

228
00:12:06.877 --> 00:12:09.866
And I mean they've done some pretty
interesting things to solve this.

229
00:12:09.866 --> 00:12:13.978
They have like Fluid Compute now
which keeps your functions around.

230
00:12:13.978 --> 00:12:18.349
So it's like the best of a server and
a serverless at the same time.

231
00:12:18.349 --> 00:12:21.208
They have some other flags you can
turn on that really reduce your bill.

232
00:12:21.208 --> 00:12:25.608
So I think because it actually
is pretty good on price now and

233
00:12:25.608 --> 00:12:32.221
as far as like reliability, they've always
been better than Cloudflare in my opinion.

234
00:12:32.221 --> 00:12:37.268
The cost you save on self-hosting
probably isn't worth it unless your

235
00:12:37.268 --> 00:12:42.230
company's doing so well and
you're just like a really big company and

236
00:12:42.230 --> 00:12:47.551
saving 5% is gonna be worth hundreds
of thousands of dollars then maybe.

237
00:12:47.551 --> 00:12:50.618
But for most people who
are just building a thing and

238
00:12:50.618 --> 00:12:52.900
they don't have that much traffic and

239
00:12:52.900 --> 00:12:57.846
they're not constrained by a 10%
difference or whatever, I don't think so.

240
00:13:01.172 --> 00:13:06.155
&gt;&gt; Speaker 3: And what about features
like middleware implementing that kind

241
00:13:06.155 --> 00:13:09.945
of manually for
in a self-hosted environment?

242
00:13:09.945 --> 00:13:12.158
&gt;&gt; Scott Moss: It's gonna
depend on where you deploy.

243
00:13:12.158 --> 00:13:16.673
Most deployment platforms are aware
that Next.js is like the hot thing.

244
00:13:16.673 --> 00:13:19.612
So they usually have somewhere
in the documentation whether or

245
00:13:19.612 --> 00:13:21.502
not they support these features or not.

246
00:13:21.502 --> 00:13:24.021
So you'd have to look at where
you're deploying and whether or

247
00:13:24.021 --> 00:13:24.978
not they support that.

248
00:13:24.978 --> 00:13:31.570
Next.js doesn't know where
it's gonna be deployed, right?

249
00:13:31.570 --> 00:13:36.067
And Vercel isn't forcing everybody
to do the things that they're doing.

250
00:13:36.067 --> 00:13:37.763
So it's gonna be up to those providers.

251
00:13:37.763 --> 00:13:41.465
Competitive providers are definitely
trying to keep up with what Vercel is

252
00:13:41.465 --> 00:13:45.529
doing because they realize a lot of their
business is gonna be folks using Next.js.

253
00:13:48.890 --> 00:13:50.844
&gt;&gt; Speaker 4: So on this deployment,

254
00:13:50.844 --> 00:13:55.641
the API endpoints that we
created are on that same domain.

255
00:13:55.641 --> 00:13:56.831
Show there, right [CROSSTALK].

256
00:13:56.831 --> 00:13:57.627
&gt;&gt; Scott Moss: Let's try it.

257
00:13:57.627 --> 00:14:00.553
Let's grab the link address.

258
00:14:00.553 --> 00:14:01.881
We'll go here.

259
00:14:01.881 --> 00:14:04.941
Do a Get request,
get rid of the authorization.

260
00:14:10.221 --> 00:14:18.034
Well, I guess I actually have
to do the thing [LAUGH] issue.

261
00:14:18.034 --> 00:14:21.066
There we go,
we get a 401 from our middleware.

262
00:14:21.066 --> 00:14:29.047
If I add the authorization back,
Get a 200 but

263
00:14:29.047 --> 00:14:34.114
I don't have any issues,
so nothing came back.

264
00:14:34.114 --> 00:14:35.415
Any other questions?

265
00:14:41.006 --> 00:14:42.135
Nope, yep?

266
00:14:42.135 --> 00:14:46.490
&gt;&gt; Speaker 5: Is there a way to scale
Next.js like make API routes run on

267
00:14:46.490 --> 00:14:49.057
several instances for uptime?

268
00:14:49.057 --> 00:14:50.761
&gt;&gt; Scott Moss: It's a great question.

269
00:14:50.761 --> 00:14:55.687
That is the whole purpose of
Serverless is that you don't

270
00:14:55.687 --> 00:15:00.304
have to vertically scale them
because they spin up and

271
00:15:00.304 --> 00:15:04.117
run and
shut down when you don't need them.

272
00:15:04.117 --> 00:15:06.728
So you don't have to think
about how to scale them.

273
00:15:06.728 --> 00:15:09.790
It's not like a server that's
constantly on in which you need to

274
00:15:09.790 --> 00:15:13.204
think about the resources in which
they're consuming collectively.

275
00:15:13.204 --> 00:15:15.661
And then how do you scale this vertically?

276
00:15:15.661 --> 00:15:18.142
As in,
let's put more money into this machine or

277
00:15:18.142 --> 00:15:20.089
how do you scale these horizontally?

278
00:15:20.089 --> 00:15:21.832
As in, let's replicate these machines.

279
00:15:21.832 --> 00:15:22.766
You don't have to do that.

280
00:15:22.766 --> 00:15:29.686
It's serverless scales infinitely
forever at a cost, it's gonna cost you.

281
00:15:29.686 --> 00:15:32.297
But some of the new features they added,
like I said,

282
00:15:32.297 --> 00:15:36.140
Fluid Compute really reduces the cost,
probably like more than up to 50%.

283
00:15:36.140 --> 00:15:41.391
So scaling that is not something you
have to worry about with Serverless.

284
00:15:41.391 --> 00:15:44.141
But yeah, cost could be a thing
depending on where you deploy.

285
00:15:44.141 --> 00:15:50.812
Speed can be a thing because serverless
has cold start cost and stuff like that.

286
00:15:50.812 --> 00:15:54.689
But I think if you do edge
computing correctly and wisely,

287
00:15:54.689 --> 00:15:59.923
you can offset a lot of that speed cost
and reap the benefits of infinite scale.

288
00:16:05.853 --> 00:16:07.902
Cool, any other questions?

289
00:16:07.902 --> 00:16:11.833
&gt;&gt; Speaker 6: What would be your opinion
deploying Docker containers on Vercel and

290
00:16:11.833 --> 00:16:15.289
maybe have the container of
the database also deploy there so

291
00:16:15.289 --> 00:16:19.305
that you don't have outbound traffic
to another database provider?

292
00:16:19.305 --> 00:16:21.954
You see something for benefit there?

293
00:16:21.954 --> 00:16:22.795
&gt;&gt; Scott Moss: That's a great question.

294
00:16:22.795 --> 00:16:26.568
So the Docker container to Vercel,
different database.

295
00:16:26.568 --> 00:16:29.822
So Vercel does not support Docker.

296
00:16:29.822 --> 00:16:34.707
Vercel is not a low-level hosting platform
in which you can deploy an image,

297
00:16:34.707 --> 00:16:37.577
it's mostly just for application hosting.

298
00:16:37.577 --> 00:16:39.587
It's like you just wanna
deploy an application.

299
00:16:39.587 --> 00:16:41.900
They're assuming everything that you need.

300
00:16:41.900 --> 00:16:46.018
If you need a database that's somewhere
else, if you go spin up Amazon Aurora or

301
00:16:46.018 --> 00:16:48.721
something, you wanna use that in Vercel,
you can,

302
00:16:48.721 --> 00:16:50.698
it's just an environment variable.

303
00:16:50.698 --> 00:16:54.337
I mean, you'll have to obviously
get the IP address and

304
00:16:54.337 --> 00:16:56.201
allow that to go to your VPC.

305
00:16:56.201 --> 00:16:59.881
But you can let that in and you can use
an environment variable and connect it.

306
00:16:59.881 --> 00:17:02.676
They're not gonna prevent you from using
any resource from anywhere that you

307
00:17:02.676 --> 00:17:03.372
don't wanna use.

308
00:17:03.372 --> 00:17:08.249
But Vercel is for product engineers or
full stack engineers that don't

309
00:17:08.249 --> 00:17:12.160
wanna manage images or
they don't wanna manage Docker.

310
00:17:12.160 --> 00:17:14.908
They don't wanna manage a database.

311
00:17:14.908 --> 00:17:17.006
They just want to get their app hosted.

312
00:17:17.006 --> 00:17:22.207
So they're not gonna support Docker or
you can't deploy a traditional server

313
00:17:22.207 --> 00:17:27.509
to Vercel because they don't have an
environment to run a traditional server.

314
00:17:27.509 --> 00:17:29.396
It's just serverless functions.

315
00:17:29.396 --> 00:17:31.620
So if you want to deploy to Vercel,

316
00:17:31.620 --> 00:17:34.933
you have to deploy it in
a way that makes sense to it.

317
00:17:34.933 --> 00:17:37.015
So Next.js by default
makes sense to Vercel so

318
00:17:37.015 --> 00:17:41.091
they can read the Next.js app and know
that, here are your serverless functions.

319
00:17:41.091 --> 00:17:43.397
If you don't use Next.js, that's fine, but

320
00:17:43.397 --> 00:17:45.716
you still have to configure
your app in a way.

321
00:17:45.716 --> 00:17:49.281
There's a configure a Vercel JSON file
that you'll have to make that says,

322
00:17:49.281 --> 00:17:52.077
here are my serverless routes,
here's where they map to.

323
00:17:52.077 --> 00:17:56.733
You have to do that in order for it to
deploy, otherwise it's not gonna deploy.

324
00:17:56.733 --> 00:18:01.437
So yeah, you couldn't just
take like a Fastify server and

325
00:18:01.437 --> 00:18:05.471
just like throw it on Vercel,
it wouldn't work.

326
00:18:05.471 --> 00:18:08.375
But you can make serverless
routes in Python, right?

327
00:18:08.375 --> 00:18:10.520
You could do that,
they don't have to be in JavaScript.

328
00:18:10.520 --> 00:18:14.363
So yeah, you couldn't do that, but
if you need to get an app deployed,

329
00:18:14.363 --> 00:18:17.456
it's probably the best platform,
I think, out there.

