WEBVTT

1
00:00:00.000 --> 00:00:00.827
&gt;&gt; Scott Moss: Any other questions?

2
00:00:00.827 --> 00:00:02.755
&gt;&gt; Speaker 2: Are you able
to use client in a layout,

3
00:00:02.755 --> 00:00:05.781
or are there any reasons you'd
want to use that in a layout?

4
00:00:05.781 --> 00:00:09.096
&gt;&gt; Scott Moss: Yes, you can totally
use client in a layout, and yes,

5
00:00:09.096 --> 00:00:12.281
there are reasons you want
to use client in a layout.

6
00:00:12.281 --> 00:00:14.923
And the biggest reason I
can think of is providers.

7
00:00:14.923 --> 00:00:19.666
If you have to add providers to your app,
which most React apps do,

8
00:00:19.666 --> 00:00:25.172
a lot of those providers have to be
client-based cuz they pass down states and

9
00:00:25.172 --> 00:00:29.089
context, then you typically
do a use client for that.

10
00:00:29.089 --> 00:00:34.379
So yeah, you can do a use client in a
layout, and you will probably do it a lot.

11
00:00:34.379 --> 00:00:38.418
You can also push that down and
have the providers be its own component,

12
00:00:38.418 --> 00:00:42.861
that's a use client, and then import
that into the server component layout so

13
00:00:42.861 --> 00:00:46.055
that way the layout itself
is still a server component.

14
00:00:46.055 --> 00:00:50.016
And again, I think the Vercel team
calls that the donut architecture,

15
00:00:50.016 --> 00:00:52.723
where it's a server
component on the outside and

16
00:00:52.723 --> 00:00:55.973
then the donut hole is just
stuff with client components.

17
00:00:59.105 --> 00:01:02.540
&gt;&gt; Speaker 2: Do you have any favorite
third-party libraries that you use with

18
00:01:02.540 --> 00:01:03.670
your Next.js apps?

19
00:01:03.670 --> 00:01:06.872
&gt;&gt; Scott Moss: It's a great question,
like I said yesterday,

20
00:01:06.872 --> 00:01:10.317
I don't really use any
component libraries at all.

21
00:01:10.317 --> 00:01:13.812
Actually, I don't know
how to describe this, but

22
00:01:13.812 --> 00:01:17.725
I use a lot of this stuff, so
Magic UI is a really good one.

23
00:01:17.725 --> 00:01:22.470
I use a lot of this,
this is really cool stuff.

24
00:01:22.470 --> 00:01:26.123
Aceternity UI is also another
one just like it, this is for

25
00:01:26.123 --> 00:01:27.923
design engineering stuff.

26
00:01:27.923 --> 00:01:34.260
It's really cool, and
then what is the other one?

27
00:01:34.260 --> 00:01:38.004
Yeah, UIverse is also really cool,
you can go on here and

28
00:01:38.004 --> 00:01:42.384
get inspired and see different
components that people have made.

29
00:01:42.384 --> 00:01:44.277
I like to go look at the challenges.

30
00:01:44.277 --> 00:01:45.142
This is a good one.

31
00:01:45.142 --> 00:01:49.085
So they have to take this design and
make it with just CSS and

32
00:01:49.085 --> 00:01:51.185
JavaScript, these buttons.

33
00:01:51.185 --> 00:01:56.257
This one's really cool, this one won
first place, that's pretty good.

34
00:01:56.257 --> 00:02:00.415
Yeah, and you can look at the code,
so it's really fun.

35
00:02:00.415 --> 00:02:03.969
So I'll look at a lot of this stuff,
but yeah,

36
00:02:03.969 --> 00:02:07.537
those two projects, Aceternity, Magic UI.

37
00:02:07.537 --> 00:02:12.457
And then 21st.dev, which is a collection
of all of them, is also really good.

38
00:02:12.457 --> 00:02:14.894
You can go on here and
get some really cool stuff.

39
00:02:14.894 --> 00:02:19.411
The reason I like this one is because
I was telling somebody earlier, 80% of

40
00:02:19.411 --> 00:02:23.805
the stuff that I make, I don't write
code for anymore, I just have AI do it.

41
00:02:23.805 --> 00:02:28.531
And this right here makes it easy to
have AI do it for you, cuz for instance,

42
00:02:28.531 --> 00:02:31.323
let's say I want this,
I can click on this.

43
00:02:31.323 --> 00:02:36.778
I can click on Copy prompt, and
it'll give me a prompt to give Cursor,

44
00:02:36.778 --> 00:02:39.469
and then Cursor will just make it.

45
00:02:39.469 --> 00:02:41.552
Yeah, we're in the new generation,
[LAUGH].

46
00:02:41.552 --> 00:02:44.609
We got a lot of different
ways to make stuff.

47
00:02:44.609 --> 00:02:47.013
Or you can just copy the code
yourself if you want,

48
00:02:47.013 --> 00:02:48.797
you can even customize the prompts.

49
00:02:48.797 --> 00:02:51.835
If you're using V0 or one of these things,

50
00:02:51.835 --> 00:02:55.541
you can send the prompt there,
so it's pretty cool.

51
00:02:55.541 --> 00:02:59.065
I really like this project, 21st.dev, and

52
00:02:59.065 --> 00:03:02.949
you can pretty much use all this stuff for
your site.

53
00:03:02.949 --> 00:03:07.955
So that's about it,
everything else I just use Tailwind.

54
00:03:07.955 --> 00:03:12.439
I use V0 a lot, but not for anything in
production, V0 is like Figma to me now.

55
00:03:12.439 --> 00:03:16.927
So I'll go on Dribbble or
I'll go on Mobbin, and

56
00:03:16.927 --> 00:03:20.649
I'll get inspired by some screens, and

57
00:03:20.649 --> 00:03:25.918
I'll take these screens and
I'll go upload them to V0.

58
00:03:25.918 --> 00:03:28.785
I'm like, here's a screenshot
of a thing that I like,

59
00:03:28.785 --> 00:03:33.188
here's what I need you to change, here's
a screenshot of my app, make the changes.

60
00:03:33.188 --> 00:03:35.343
And after talking with that for
30 minutes,

61
00:03:35.343 --> 00:03:37.339
it'll finally make the thing that I want.

62
00:03:37.339 --> 00:03:41.260
I can use that code, probably won't,
but I'll take the screenshot of it.

63
00:03:41.260 --> 00:03:43.569
And then I'll take that to Cursor and

64
00:03:43.569 --> 00:03:48.198
then I'll work with Cursor to make
a PRD describing the thing that I want.

65
00:03:48.198 --> 00:03:50.587
Then I'll take that instruction
with the screenshot and

66
00:03:50.587 --> 00:03:53.084
then I'll feed it back to Cursor and
I'll say, make that.

67
00:03:53.084 --> 00:03:59.670
And then it'll usually get there
90% of the time, so super simple.

68
00:03:59.670 --> 00:04:02.604
But that's it, that's pretty much
my stack, I think with AI now,

69
00:04:02.604 --> 00:04:04.623
I feel like I don't need
a component library.

70
00:04:04.623 --> 00:04:11.242
It's almost slower to do it, so yeah,
this is pretty much how I work now.

71
00:04:11.242 --> 00:04:13.927
What else do I use?

72
00:04:13.927 --> 00:04:18.590
I use a lot of AI tools, so
that's nothing to do with Next.js, but

73
00:04:18.590 --> 00:04:21.525
I do use tons of AI
tools to get stuff done.

74
00:04:21.525 --> 00:04:25.936
But yeah, these are my favorite
things that I use all the time.

75
00:04:25.936 --> 00:04:29.004
I like Upstash, Upstash is really cool.

76
00:04:29.004 --> 00:04:32.890
Upstash, gotta give a shout-out to them,
they're really great.

77
00:04:32.890 --> 00:04:38.119
They do a lot of things, but the thing
I use them the most for was workflows,

78
00:04:38.119 --> 00:04:42.188
which is something that works
very well with serverless.

79
00:04:42.188 --> 00:04:45.463
They have workflows which are really good,
but honestly,

80
00:04:45.463 --> 00:04:49.602
we've been using Trigger.dev,
which is a really great company as well.

81
00:04:49.602 --> 00:04:53.930
I love these guys to do our workflows for
us, our background jobs,

82
00:04:53.930 --> 00:04:57.192
which is something that
we absolutely have to do.

83
00:04:57.192 --> 00:05:00.784
There's another one that we use that's
pretty good, it's called Ingest,

84
00:05:00.784 --> 00:05:03.558
they're also pretty good,
we use these folks before too.

85
00:05:03.558 --> 00:05:07.847
I mean, they're all really good,
they have different trade-offs and stuff.

86
00:05:07.847 --> 00:05:11.321
Trigger is the one we chose, but
any one of these is really great for

87
00:05:11.321 --> 00:05:12.387
doing serverless.

88
00:05:12.387 --> 00:05:16.041
And you need to do something in
the background like processing this,

89
00:05:16.041 --> 00:05:20.715
something on interval, something on
schedule, AI, retrying, handling webhooks.

90
00:05:20.715 --> 00:05:24.002
Anything like that,
you wanna use one of these tools.

91
00:05:24.002 --> 00:05:29.792
So yeah, been doing a lot of that,
and yeah, I think that's it.

92
00:05:29.792 --> 00:05:35.812
I can't think of anything else that I use,
other than Neon, I love Neon.

93
00:05:35.812 --> 00:05:37.502
Yeah, that's it.

94
00:05:37.502 --> 00:05:43.209
&gt;&gt; Speaker 2: I feel like I can't find
it anymore, maybe the docks changed,

95
00:05:43.209 --> 00:05:46.762
but I feel like not too long in the past,

96
00:05:46.762 --> 00:05:51.838
I saw something in the next
docks about SPA mode.

97
00:05:51.838 --> 00:05:57.645
&gt;&gt; Scott Moss: Yeah, so
that's called static exports,

98
00:05:57.645 --> 00:06:01.366
this would be the SPA mode.

99
00:06:01.366 --> 00:06:01.925
&gt;&gt; Speaker 3: Okay.

100
00:06:01.925 --> 00:06:04.733
&gt;&gt; Scott Moss: So
if you do a static export, excuse me,

101
00:06:04.733 --> 00:06:09.693
you could do output export,
it's just gonna give you single-page app

102
00:06:09.693 --> 00:06:13.759
you would have gotten from
Create React App essentially.

103
00:06:13.759 --> 00:06:16.311
If you just wanna make a pure SPA,

104
00:06:16.311 --> 00:06:20.700
I can upload this to a CDN,
no server-side, anything.

105
00:06:20.700 --> 00:06:23.508
Yeah, you could just export it like this,
and

106
00:06:23.508 --> 00:06:26.754
it'll give you that as
a single-page application.

107
00:06:26.754 --> 00:06:28.539
So it says right here
it can be deployed and

108
00:06:28.539 --> 00:06:30.787
hosted on any web server
that can serve these files.

109
00:06:30.787 --> 00:06:34.195
So if that's what you want,
you could do that.

110
00:06:34.195 --> 00:06:39.706
&gt;&gt; Speaker 3: Yeah, I was just gonna ask,
do you ever see a use case for

111
00:06:39.706 --> 00:06:45.349
that type of thing or
any benefits using this over a Vite?

112
00:06:45.349 --> 00:06:46.347
&gt;&gt; Scott Moss: That's a great question.

113
00:06:46.347 --> 00:06:49.137
I mean, yes, I still see the benefit,

114
00:06:49.137 --> 00:06:53.874
because even if you use something
like Vite, at the end of the day,

115
00:06:53.874 --> 00:06:58.951
you're still at the mercy of which
router framework are you gonna use,

116
00:06:58.951 --> 00:07:03.457
and then writing that code for
the router and things like that.

117
00:07:03.457 --> 00:07:05.526
So you still have to come
up with some opinions.

118
00:07:05.526 --> 00:07:08.183
You rather adopt somebody's
opinions at some point,

119
00:07:08.183 --> 00:07:12.238
whether it's the new TanStack router or
React Router or whatever router you want.

120
00:07:12.238 --> 00:07:16.339
You still gotta adopt those opinions, you
still gotta adopt the opinions on styling,

121
00:07:16.339 --> 00:07:17.754
how are you gonna do styling?

122
00:07:17.754 --> 00:07:20.291
Is it gonna be CSS and
JS, things like that,

123
00:07:20.291 --> 00:07:23.112
Vite has plugins to handle
styles differently.

124
00:07:23.112 --> 00:07:26.648
So there's still a little bit of
configuration there, whereas with Next.js,

125
00:07:26.648 --> 00:07:29.669
it's done, you just make the file,
you don't have to do anything.

126
00:07:29.669 --> 00:07:34.521
So it's just a trade-off, it's like
do you wanna configure that stuff

127
00:07:34.521 --> 00:07:38.988
yourself if you want more control or
do you just want to say export?

128
00:07:41.185 --> 00:07:46.577
&gt;&gt; Speaker 3: And
then you might know more about this, but

129
00:07:46.577 --> 00:07:53.135
I assume that using this
would break the site up more,

130
00:07:53.135 --> 00:07:58.528
chunk it better as far
as what asset's going

131
00:07:58.528 --> 00:08:03.480
to the client, the JS, HTML, and CSS,

132
00:08:03.480 --> 00:08:10.075
whereas maybe Vite might
just bundle it all into one.

133
00:08:10.075 --> 00:08:13.913
&gt;&gt; Speaker 2: Yeah, I mean, I think it
does more out of the box for you cuz each

134
00:08:13.913 --> 00:08:18.487
of your routes gets its own index.html and
then things get split that way.

135
00:08:18.487 --> 00:08:23.028
We have it set up with our app at work,
we do a lot of code splitting just via

136
00:08:23.028 --> 00:08:28.250
suspense and lazy loading with React, but
it would be easier to just let Next do it.

137
00:08:28.250 --> 00:08:31.336
&gt;&gt; Scott Moss: Yeah, it's definitely easy
to have the bundles split on the route

138
00:08:31.336 --> 00:08:34.378
done for you automatically without
having to do it dynamically.

139
00:08:34.378 --> 00:08:36.558
So that's probably another
big thing as well.

140
00:08:36.558 --> 00:08:38.831
I mean, you could do it with Vite,
but you probably have to set it up or

141
00:08:38.831 --> 00:08:40.610
rely on someone to make a plugin for
you or something.

142
00:08:40.610 --> 00:08:41.230
&gt;&gt; Speaker 2: Yeah.

143
00:08:41.230 --> 00:08:42.514
Yeah.
We were doing it at work,

144
00:08:42.514 --> 00:08:45.589
I was doing React Router stuff, and
at a certain point, I'm building this and

145
00:08:45.589 --> 00:08:47.143
Next did it way better than me, so why?

146
00:08:47.143 --> 00:08:48.260
&gt;&gt; Scott Moss: Exactly.
[LAUGH] Why [INAUDIBLE].

147
00:08:48.260 --> 00:08:48.867
Exactly, yeah.

148
00:08:48.867 --> 00:08:52.329
And that's kinda the point
I am in my career,

149
00:08:52.329 --> 00:08:58.358
is just I wanna limit the amount of time
that I spend on nonbusiness logic code.

150
00:08:58.358 --> 00:09:00.932
If I'm not working on business logic,
I feel like I'm wasting time.

151
00:09:00.932 --> 00:09:05.301
So that's like build tools, performance,
I don't wanna do any of that.

152
00:09:05.301 --> 00:09:07.578
I just want something to do that for me so

153
00:09:07.578 --> 00:09:12.279
I can focus on the thing that actually
makes my app, which is the business logic.

154
00:09:12.279 --> 00:09:16.699
The actual features, the value, the UI,
the things that people are here to use.

155
00:09:16.699 --> 00:09:19.316
No one's gonna use my app and like,

156
00:09:19.316 --> 00:09:23.689
I use his app because he uses Turbopack,
and I'm a big fan.

157
00:09:23.689 --> 00:09:25.775
Nobody's using my app
because I use Turbopack.

158
00:09:25.775 --> 00:09:29.582
I don't care, I just want it
to work very well and fast so

159
00:09:29.582 --> 00:09:32.905
I can focus on the thing
that makes my app unique.

160
00:09:32.905 --> 00:09:36.020
So I will always lean towards
tools that do that for me and

161
00:09:36.020 --> 00:09:39.402
hope that there are a bunch of
people smarter than me whose job

162
00:09:39.402 --> 00:09:42.473
is to make sure that this is good,
are doing their job.

163
00:09:42.473 --> 00:09:46.965
And I'll just do my job,
which is building a really cool app, so.

164
00:09:46.965 --> 00:09:51.801
&gt;&gt; Speaker 4: So if you use, for
example, this type of export and

165
00:09:51.801 --> 00:09:57.885
you have a server actions in your
application with Next output.

166
00:09:57.885 --> 00:10:02.207
The client file static,
and then you will get

167
00:10:02.207 --> 00:10:06.992
the server files in
a separate output directory.

168
00:10:06.992 --> 00:10:08.281
&gt;&gt; Scott Moss: So you'll get what?

169
00:10:08.281 --> 00:10:12.988
So even if you didn't do this, the way
it works when your app gets bundled,

170
00:10:12.988 --> 00:10:14.724
it's two module bundles.

171
00:10:14.724 --> 00:10:18.206
Well, there's more than one bundle, but
just think of two different types of

172
00:10:18.206 --> 00:10:21.081
bundles, there's a client modules and
then a server modules.

173
00:10:21.081 --> 00:10:24.196
If you import a function
into a server component,

174
00:10:24.196 --> 00:10:29.106
a function that's running on the server,
that doesn't get bundled anyway.

175
00:10:29.106 --> 00:10:32.301
Even before this export,
it never gets bundled into the client.

176
00:10:32.301 --> 00:10:35.736
So they're not really changing anything
on that part, you just won't see

177
00:10:35.736 --> 00:10:39.626
a server module bundle, you just won't get
that because where are you gonna put it?

178
00:10:39.626 --> 00:10:42.609
You can only deploy the static site.

179
00:10:42.609 --> 00:10:47.219
So essentially, it's gonna turn those
server components that you had that were

180
00:10:47.219 --> 00:10:51.624
fetching data into dynamic, I'm sorry,
into static components, and

181
00:10:51.624 --> 00:10:54.571
they would have tried to
have pre-rendered them.

182
00:10:54.571 --> 00:10:59.776
So while it was building and
doing this export, it's gonna execute your

183
00:10:59.776 --> 00:11:05.252
server component, try to get the data,
and render it statically, right?

184
00:11:05.252 --> 00:11:09.162
And then that's what you're gonna get for
the client-side stuff.

185
00:11:09.162 --> 00:11:14.124
I don't know what they call it, but
it's when the server hydrates the client,

186
00:11:14.124 --> 00:11:18.360
they're gonna put that in an object
that they attach to the window.

187
00:11:18.360 --> 00:11:21.935
So when your client loads up,
you'll just have that data there,

188
00:11:21.935 --> 00:11:23.695
which is a very common pattern.

189
00:11:23.695 --> 00:11:27.654
So yeah,
it will completely ignore server stuff.

