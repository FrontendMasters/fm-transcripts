WEBVTT

1
00:00:00.320 --> 00:00:01.376
&gt;&gt; Scoot Mass: Let's create some issues.

2
00:00:01.376 --> 00:00:06.136
So if I go here, it just goes here,
it doesn't do anything.

3
00:00:06.136 --> 00:00:10.421
So, let's make that true.

4
00:00:10.421 --> 00:00:14.977
So, now we're gonna use
Server Actions outside of a form,

5
00:00:14.977 --> 00:00:18.258
we don't need a form to click a button,
but

6
00:00:18.258 --> 00:00:23.808
we still wanna call a server action,
so that's what we're gonna do.

7
00:00:23.808 --> 00:00:27.402
We now wanna create an issue,
we'll use Server Actions for that.

8
00:00:27.402 --> 00:00:32.930
Pretty simple so,
we're gonna go into our Actions folder.

9
00:00:32.930 --> 00:00:37.099
In this case, we're gonna make a new
one if you don't have it already,

10
00:00:37.099 --> 00:00:41.354
called Issues in our Actions folder,
we're gonna put this in there.

11
00:00:41.354 --> 00:00:45.370
We're gonna make sure we can create
an issue, it's a lot going on there.

12
00:00:45.370 --> 00:00:49.407
And then in our new page
when you click the button,

13
00:00:49.407 --> 00:00:53.970
we wanna make sure you
can create a new issue.

14
00:00:53.970 --> 00:00:58.955
What we're doing though just to
solidify the concept is that

15
00:00:58.955 --> 00:01:02.042
I wanna show pushing down fetching.

16
00:01:02.042 --> 00:01:05.354
So in the case of a new issue, we're gonna
be fetching the current user to make sure

17
00:01:05.354 --> 00:01:08.626
that there's a user that's logged in so
they can actually create an issue.

18
00:01:08.626 --> 00:01:13.970
So we're gonna push that all the way
down to the new issue component.

19
00:01:13.970 --> 00:01:18.172
And then only then if there is a user will
we allow you to see the new issue form

20
00:01:18.172 --> 00:01:19.720
with the user ID.

21
00:01:19.720 --> 00:01:22.893
Because also we need to know who
the current user is in order to submit

22
00:01:22.893 --> 00:01:23.528
the issue.

23
00:01:23.528 --> 00:01:26.440
So it's another reason and we'll do that.

24
00:01:26.440 --> 00:01:28.280
We're still using a form here, so

25
00:01:28.280 --> 00:01:31.965
there's not much else going on here
as far as submitting the action.

26
00:01:31.965 --> 00:01:36.776
We're still gonna use UseActionState,
but we'll get into a point where you

27
00:01:36.776 --> 00:01:40.984
can do use transition to be able to
call an action outside of a form.

28
00:01:40.984 --> 00:01:44.588
But yeah, I guess in this case I forgot
the button doesn't create the new issue,

29
00:01:44.588 --> 00:01:47.464
I still actually do go to a form
in which we create the new issue.

30
00:01:47.464 --> 00:01:50.002
So we won't have to cover that part twice.

31
00:01:50.002 --> 00:01:55.246
I just wanna cover the parts that
are related to fetching the user and

32
00:01:55.246 --> 00:01:57.466
then calling this action.

33
00:01:57.466 --> 00:02:00.010
So let's do that.

34
00:02:00.010 --> 00:02:05.042
So now we'll go over to our actions.

35
00:02:05.042 --> 00:02:06.970
We have issues here.

36
00:02:06.970 --> 00:02:10.858
We already have the schemas and
stuff that I already made.

37
00:02:10.858 --> 00:02:17.702
What we need to do now is create
a function for creating an issue.

38
00:02:17.702 --> 00:02:19.782
So let's do that.

39
00:02:19.782 --> 00:02:22.150
And there is a lot going on here.

40
00:02:22.150 --> 00:02:26.930
None of this is specific to Next.js,
so I really don't have to go into too much

41
00:02:26.930 --> 00:02:31.010
detail about it,
I just want you to know what's happening.

42
00:02:32.950 --> 00:02:37.750
So I'll just copy it, you should too.

43
00:02:37.750 --> 00:02:42.970
It's more the same that we've already done
with the previous actions that we made.

44
00:02:44.440 --> 00:02:46.312
So how does this work?

45
00:02:46.312 --> 00:02:50.440
Well, the first thing is it
tries to get the current user.

46
00:02:50.440 --> 00:02:53.260
If you haven't noticed,
we're calling getCurrentUser a lot.

47
00:02:54.440 --> 00:02:56.997
That's gonna be a performance hit,
especially if you hit in database all

48
00:02:56.997 --> 00:02:58.780
the time, but
we'll talk about how to solve that.

49
00:03:01.400 --> 00:03:04.585
If there is no user,
we're just gonna follow the schema or

50
00:03:04.585 --> 00:03:08.620
our type that we have for the action
state we're gonna say get out of here.

51
00:03:11.950 --> 00:03:17.330
In this case, I think yeah, we need to
pass in the data here, there we go.

52
00:03:18.590 --> 00:03:25.574
IssueData, in this case, let's validate
the issue data using our schemas.

53
00:03:25.574 --> 00:03:28.010
Highly recommend doing this stuff
on the server side with Zod.

54
00:03:30.670 --> 00:03:33.606
Once we have that, we're just
gonna insert it into the database.

55
00:03:33.606 --> 00:03:36.262
I guess you could validate on
a database side too if you want.

56
00:03:36.262 --> 00:03:39.817
But I would never make
an API Route Handler without

57
00:03:39.817 --> 00:03:43.432
validating the inputs
before they touch the ORM.

58
00:03:43.432 --> 00:03:44.980
So I would do the same thing here.

59
00:03:46.720 --> 00:03:49.451
Database inserts are expensive and

60
00:03:49.451 --> 00:03:54.880
if that's good return success,
otherwise get out of here.

61
00:03:54.880 --> 00:04:00.842
So we got that, and then down here
I'm just gonna make a handler for

62
00:04:00.842 --> 00:04:02.660
updating an issue.

63
00:04:07.870 --> 00:04:11.319
So I think there's something that's
trying to import it somewhere,

64
00:04:11.319 --> 00:04:12.610
but we'll make it later.

65
00:04:16.990 --> 00:04:20.894
Okay, now we need to go to the new
page and we need to do a few things.

66
00:04:20.894 --> 00:04:23.118
So one, let's actually make it look good.

67
00:04:23.118 --> 00:04:28.330
So we'll copy this,
we'll go to the issues new page.

68
00:04:30.190 --> 00:04:32.168
What is this?

69
00:04:32.168 --> 00:04:35.014
This is that CSS module.

70
00:04:35.014 --> 00:04:37.930
I mean I'm like,
what is [LAUGH] I got hacked [LAUGH]?

71
00:04:39.470 --> 00:04:41.086
So we'll put this in here and
let's talk about it.

72
00:04:41.086 --> 00:04:45.046
So new issue page, just jsx.

73
00:04:45.046 --> 00:04:50.110
Only thing to note here is that we
are suspending a component here.

74
00:04:50.110 --> 00:04:51.478
So we have this NewIssue component.

75
00:04:51.478 --> 00:04:52.718
This is essentially the form.

76
00:04:52.718 --> 00:04:54.654
This is the form that creates a new issue.

77
00:04:54.654 --> 00:05:00.235
But we don't want to show this form unless
there is a user that signed in because

78
00:05:00.235 --> 00:05:05.294
we need the user ID to actually submit
the new issue to create an issue.

79
00:05:05.294 --> 00:05:11.518
So we know who the issue belongs to,
so we want to suspend that.

80
00:05:11.518 --> 00:05:14.071
So if we go look at the NewIssue,

81
00:05:14.071 --> 00:05:19.446
this is where we need to get the current
user so it can be suspended.

82
00:05:19.446 --> 00:05:23.494
So when you think about Suspense, remember
you're only ever gonna suspend something

83
00:05:23.494 --> 00:05:25.894
that's making a call to
get data on the server.

84
00:05:25.894 --> 00:05:27.843
So if I'm suspending
this NewIssue component,

85
00:05:27.843 --> 00:05:30.150
that means I'm getting some
data in here somewhere.

86
00:05:30.150 --> 00:05:31.678
So I wanna get the user here.

87
00:05:39.167 --> 00:05:40.454
So that's gonna give me the user.

88
00:05:40.454 --> 00:05:46.190
And then what I wanna return
here is the IssueForm.

89
00:05:46.190 --> 00:05:53.247
And it takes a, we'll have to make it,
but it's gonna take a user ID.

90
00:05:57.829 --> 00:05:59.057
So I'm gonna suspend that.

91
00:06:07.165 --> 00:06:11.480
And then for the issue form,
let's actually create it.

92
00:06:11.480 --> 00:06:13.256
So we go, look at that.

93
00:06:13.256 --> 00:06:14.984
This is essentially, what we just did.

94
00:06:14.984 --> 00:06:18.186
You can do this if it's not a user,
you can redirect them, that's fine.

95
00:06:18.186 --> 00:06:21.670
But essentially, we just need to
get the data, just get the user ID.

96
00:06:23.170 --> 00:06:28.434
Now that we have that,
we got this long form to create an issue.

97
00:06:28.434 --> 00:06:31.502
There's nothing new here that you
haven't already seen that I haven't gone

98
00:06:31.502 --> 00:06:32.226
over already.

99
00:06:32.226 --> 00:06:37.510
It's essentially doing the same
thing using action state,

100
00:06:37.510 --> 00:06:42.940
using the form,
submitting that action, that's it.

101
00:06:42.940 --> 00:06:46.321
Pretty straightforward,
it just uses that user ID from its props.

102
00:06:46.321 --> 00:06:51.983
So we can just copy that, go to a new
issue form, and we can paste that.

103
00:07:00.650 --> 00:07:03.040
This thing's freaking out
cuz it wants update issue.

104
00:07:04.060 --> 00:07:05.980
We could just import that.

105
00:07:05.980 --> 00:07:08.150
That's why I made it.

106
00:07:08.150 --> 00:07:13.222
Even though it's not
doing anything right now.

107
00:07:13.222 --> 00:07:15.163
My typescript, folks, there we go.

108
00:07:20.010 --> 00:07:25.531
Cool, so let's just make
sure we pass in our user ID,

109
00:07:25.531 --> 00:07:28.490
which is gonna be user.id.

110
00:07:29.910 --> 00:07:34.270
This thing's freaking out because it's
like, yeah, what if it's not a user?

111
00:07:34.270 --> 00:07:36.425
Sure, sure, sure, let's do it.

112
00:07:41.627 --> 00:07:43.635
There is no user,
then you need to go sign in.

113
00:07:45.541 --> 00:07:46.722
Now, we don't need this.

114
00:07:56.467 --> 00:08:02.596
Okay, let's see what we got here.

115
00:08:02.596 --> 00:08:05.240
This thing says must have.

116
00:08:05.240 --> 00:08:08.524
Must be async functions.

117
00:08:08.524 --> 00:08:14.644
That is a constraint,
let's do that, sorry about that.

118
00:08:14.644 --> 00:08:15.284
There you go.

119
00:08:15.284 --> 00:08:16.212
That better?

120
00:08:16.212 --> 00:08:18.708
Cool, so now we can create new issue.

121
00:08:18.708 --> 00:08:21.116
It goes here and
you can see that it's loading.

122
00:08:21.116 --> 00:08:24.700
That loading is the suspense
of it fetching the user.

123
00:08:24.700 --> 00:08:28.294
That's the fallback that I have for
the Suspense.

124
00:08:28.294 --> 00:08:31.200
This is it fetching the user,
It's like, cool, I have the user now.

125
00:08:33.020 --> 00:08:34.742
It's obviously delayed.

126
00:08:41.287 --> 00:08:43.020
If I try to create an issue.

127
00:08:43.020 --> 00:08:50.080
Hello there, this is my issue.

128
00:08:51.260 --> 00:08:53.210
I click create issue.

129
00:08:53.210 --> 00:08:54.858
We can see the loading state there.

130
00:08:54.858 --> 00:08:57.710
And then boom, hello there's my issue.

131
00:09:03.610 --> 00:09:07.658
Very much the same pattern that
we use to sign in and sign up.

132
00:09:07.658 --> 00:09:11.055
Just applied it to issues
nothing different there.

133
00:09:11.055 --> 00:09:18.042
Right, if we walk through that one more
time, we start off with our server action.

134
00:09:18.042 --> 00:09:20.270
So we have a server action
called create issue.

135
00:09:20.270 --> 00:09:25.086
It just takes in the data,
it gets the current user,

136
00:09:25.086 --> 00:09:31.215
it validates the data using Zod,
if so it adds it to the database and

137
00:09:31.215 --> 00:09:35.930
then it just returns
the success with the message.

138
00:09:40.510 --> 00:09:44.923
And then inside of the page for
a new issue,

139
00:09:44.923 --> 00:09:48.730
we suspend the new issue component.

140
00:09:49.950 --> 00:09:53.145
The reason we do that is because
it's getting the current user.

141
00:09:53.145 --> 00:09:57.735
So we need to wait until the current
user comes back before we show

142
00:09:57.735 --> 00:10:02.734
this component because its children
relies on the user being there.

143
00:10:02.734 --> 00:10:07.579
So there is no benefit of showing its
children until the user gets back

144
00:10:07.579 --> 00:10:10.326
because its children needs the user.

145
00:10:10.326 --> 00:10:14.416
So don't even show this jsx I don't even
show this component until it comes back.

146
00:10:14.416 --> 00:10:20.110
So we suspend it until it comes back,
it comes back and

147
00:10:20.110 --> 00:10:25.424
then we show the issue form
which is a client-side

148
00:10:25.424 --> 00:10:29.977
component that uses
the use action hook and

149
00:10:29.977 --> 00:10:34.929
calls the server action
that we created here.

150
00:10:44.527 --> 00:10:46.826
And that's it, everything else is
pretty much what you already did.

151
00:10:46.826 --> 00:10:49.390
We're using our forms,
we pin our form actions and

152
00:10:49.390 --> 00:10:53.394
we're just iterating over the state
messages and errors, nothing crazy.

153
00:10:53.394 --> 00:10:54.351
Same thing we did in Auth.

154
00:10:59.050 --> 00:11:01.377
&gt;&gt; Scoot Mass: Now that
you've seen this twice,

155
00:11:01.377 --> 00:11:06.812
you can start to see how some of these
patterns can be a little more streamlined.

156
00:11:06.812 --> 00:11:09.635
How you might be able to co locate
some of these in like folders and

157
00:11:09.635 --> 00:11:11.652
not have them separated like I have them.

158
00:11:11.652 --> 00:11:15.677
You might determine how
you might add to this and

159
00:11:15.677 --> 00:11:20.748
have different naming conventions for
a lot of this stuff.

160
00:11:20.748 --> 00:11:25.388
But this is literally the same pattern
that I use to do stuff all the time in

161
00:11:25.388 --> 00:11:26.740
Next.js.

162
00:11:26.740 --> 00:11:31.308
I have a server action,
I have a form or a form action,

163
00:11:31.308 --> 00:11:35.489
I suspend data that needs things and
that's it.

164
00:11:35.489 --> 00:11:39.149
[LAUGH] That's like more than half of my
app when it comes to like form stuff.

165
00:11:42.734 --> 00:11:44.495
We still haven't made an API route.

