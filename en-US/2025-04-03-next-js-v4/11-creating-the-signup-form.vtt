WEBVTT

1
00:00:00.000 --> 00:00:02.616
&gt;&gt; Scott Moss: So
you got to get all these imports.

2
00:00:02.616 --> 00:00:03.992
Let's go ahead and get all these imports.

3
00:00:03.992 --> 00:00:07.368
We probably already have, I think we
only have link in here maybe, yeah.

4
00:00:07.368 --> 00:00:11.355
So I'll talk about these imports.

5
00:00:11.355 --> 00:00:13.200
Use action state,
I already talked about it.

6
00:00:13.200 --> 00:00:14.556
You can go look at the docs if you want.

7
00:00:14.556 --> 00:00:18.163
Use router just by the name use,
you know it's a hook.

8
00:00:18.163 --> 00:00:23.192
This is a hook to use, next, this is
how to use the router programmatically.

9
00:00:23.192 --> 00:00:26.615
We talked about the link component and
that's how you click on something in link.

10
00:00:26.615 --> 00:00:28.556
But how do you navigate programmatically?

11
00:00:28.556 --> 00:00:32.963
You got to get a handle of the router and
to do that is you do use router, and

12
00:00:32.963 --> 00:00:37.593
now you can navigate programmatically
by manually calling router.push,

13
00:00:37.593 --> 00:00:42.348
router.replace, those type of methods
that exist on a client side router.

14
00:00:42.348 --> 00:00:44.204
So this is just to get
a handle to the router.

15
00:00:44.204 --> 00:00:47.577
Have a button component.

16
00:00:47.577 --> 00:00:49.692
I went ahead and created some form stuff.

17
00:00:49.692 --> 00:00:51.604
There's literally nothing
special going on in here.

18
00:00:51.604 --> 00:00:53.488
They're just encapsulating style.

19
00:00:53.488 --> 00:00:55.370
I just don't want you
guys having ugly forms.

20
00:00:55.370 --> 00:00:57.520
So, I went ahead and
made them nice for you.

21
00:00:57.520 --> 00:01:01.018
But you can go look at them,
they're just regular form stuff,

22
00:01:01.018 --> 00:01:02.677
nothing special about them.

23
00:01:02.677 --> 00:01:06.620
There's a toast component here that shows
a notification that basically displays

24
00:01:06.620 --> 00:01:09.490
the messages from the server
actions when a message is sent,

25
00:01:09.490 --> 00:01:10.928
that's really all it does.

26
00:01:10.928 --> 00:01:17.120
And then, here we go, we got our sign up
thing which I think I didn't camel case.

27
00:01:17.120 --> 00:01:18.346
So I'll go back and fix that.

28
00:01:18.346 --> 00:01:20.368
And then we have this
type action response.

29
00:01:20.368 --> 00:01:27.646
So, let me go back and fix that on mine
should be sign up with a camel case.

30
00:01:27.646 --> 00:01:32.420
And for all the types your people,
there you go, I'll put type there, so

31
00:01:32.420 --> 00:01:35.201
you don't lose your minds, there you go.

32
00:01:35.201 --> 00:01:37.947
Okay, obviously all this stuff
is red because I'm not using it.

33
00:01:37.947 --> 00:01:46.062
So let's use it, I think all we
have to do is somewhere in here,

34
00:01:46.062 --> 00:01:51.280
somewhere in here, I think it's here.

35
00:01:51.280 --> 00:01:53.779
We need to set up our action state,
let's do that first and

36
00:01:53.779 --> 00:01:55.116
then we'll do everything.

37
00:01:55.116 --> 00:01:56.880
So let's get our initial state.

38
00:02:01.420 --> 00:02:05.086
Our initial state is essentially
just going to be like,

39
00:02:05.086 --> 00:02:07.822
what is the default state of this action?

40
00:02:07.822 --> 00:02:09.204
So in this case, like the form,

41
00:02:09.204 --> 00:02:11.519
what is the initial state
that we're gonna get back?

42
00:02:11.519 --> 00:02:15.836
So I can say,
what is the default state here?

43
00:02:15.836 --> 00:02:17.767
I mean, you would pretty much do
the same thing if you were doing

44
00:02:17.767 --> 00:02:18.470
usestate with a form.

45
00:02:18.470 --> 00:02:20.252
You would have like a default state for
things.

46
00:02:20.252 --> 00:02:24.276
So, I'm just gonna say, success is false.

47
00:02:24.276 --> 00:02:28.187
We haven't done anything, there is
no message and there are no errors.

48
00:02:28.187 --> 00:02:29.467
Just so we have that.

49
00:02:34.274 --> 00:02:37.420
Cool, that's our initial state.

50
00:02:37.420 --> 00:02:41.080
And then what we wanna do is, we wanna
go ahead and get a handle on our router.

51
00:02:43.730 --> 00:02:45.017
Like that.

52
00:02:45.017 --> 00:02:49.314
Then now you can see if you do router.,
you get those methods that I talked about.

53
00:02:49.314 --> 00:02:52.394
Back, forward, prefetch,
push, refresh, replace.

54
00:02:52.394 --> 00:03:00.096
Just programmatically
navigating the router.

55
00:03:00.096 --> 00:03:01.596
I'm going to get rid of this
use client right quick.

56
00:03:01.596 --> 00:03:02.778
And I'm gonna try to go to this page.

57
00:03:02.778 --> 00:03:04.290
Let me see what happens.

58
00:03:04.290 --> 00:03:05.950
Just so you guys can see.

59
00:03:08.998 --> 00:03:11.500
Let me go to sign up.

60
00:03:11.500 --> 00:03:12.351
Is this off?

61
00:03:12.351 --> 00:03:14.035
I got to turn it on?

62
00:03:17.697 --> 00:03:19.420
Turn that on.

63
00:03:19.420 --> 00:03:21.212
Go here, and try to refresh.

64
00:03:21.212 --> 00:03:22.060
It breaks, right?

65
00:03:22.060 --> 00:03:25.284
Because it says, you're importing
a component that needs use router.

66
00:03:25.284 --> 00:03:30.155
This react hook only works in a client
component to fix, mark the file, or

67
00:03:30.155 --> 00:03:33.620
its parent with the use client directive.

68
00:03:33.620 --> 00:03:38.180
So this is a page, so
it doesn't really have a parent.

69
00:03:38.180 --> 00:03:44.007
So I have to put it here, I got to put
use client here, and now it works.

70
00:03:44.007 --> 00:03:49.480
As soon as you try to use a hook,
you have to put use client.

71
00:03:52.179 --> 00:03:53.164
Okay?

72
00:03:54.785 --> 00:03:56.311
And that's the hook that I'm using.

73
00:03:56.311 --> 00:04:00.238
All right, so now we're going
to set up our action state.

74
00:04:00.238 --> 00:04:05.240
The way this works is,
you basically it's gonna

75
00:04:05.240 --> 00:04:09.932
give you this ability
to provide a callback.

76
00:04:09.932 --> 00:04:14.196
This callback is the function
that's gonna run when the form is

77
00:04:14.196 --> 00:04:15.973
technically submitted.

78
00:04:15.973 --> 00:04:17.746
So when the form is submitted,
run this function,

79
00:04:17.746 --> 00:04:19.412
that's basically what's happening here.

80
00:04:19.412 --> 00:04:23.908
And then what you get in return is
an array of the current state of the form.

81
00:04:23.908 --> 00:04:31.080
So you can think of the state as in it's
the thing that we return from the action.

82
00:04:31.080 --> 00:04:34.388
So, in that case,
it's this action response, right, so

83
00:04:34.388 --> 00:04:36.780
it'll be this shape, that's the state.

84
00:04:37.960 --> 00:04:42.016
You also get back the form action itself.

85
00:04:42.016 --> 00:04:45.140
And then the status, is it pending or not?

86
00:04:45.140 --> 00:04:47.167
Is it still going or is it done, right?

87
00:04:47.167 --> 00:04:51.136
So, let's do that.

88
00:04:51.136 --> 00:04:56.451
Use action states, we can type check

89
00:04:56.451 --> 00:05:02.058
this with passing in these generics.

90
00:05:02.058 --> 00:05:05.274
If you don't know what a generic is in
typescript is like arguments for types.

91
00:05:05.274 --> 00:05:08.778
So we can pass in the action response,
that's gonna be the state type.

92
00:05:08.778 --> 00:05:13.415
And then form data is,
I'm guessing the form action type,

93
00:05:13.415 --> 00:05:16.380
let's see, I don't remember.

94
00:05:16.380 --> 00:05:23.980
So we can say, action response and
then form data, there we go.

95
00:05:23.980 --> 00:05:30.387
Call it like this,
it's an async function, there we go.

96
00:05:30.387 --> 00:05:35.084
Yeah, it takes in a second argument for
initial state.

97
00:05:35.084 --> 00:05:37.040
So I'll pass in the initial state here.

98
00:05:39.660 --> 00:05:42.230
Or is it an array initial state?

99
00:05:42.230 --> 00:05:49.610
No, it's just initial state, okay, so
many hooks, initial state, there we go.

100
00:05:50.790 --> 00:05:55.900
Okay, so now we have our state,
we have our form,

101
00:05:55.900 --> 00:06:00.790
or let's call it form action, I guess.

102
00:06:00.790 --> 00:06:04.470
And then we have our,
what did I call it here?

103
00:06:04.470 --> 00:06:10.307
Yeah, isPending, so, there we go.

104
00:06:10.307 --> 00:06:11.793
So what do we wanna do in here?

105
00:06:11.793 --> 00:06:15.226
We just wanna call sign up, that's
like the number one thing we wanna do.

106
00:06:15.226 --> 00:06:18.396
And then depending on that,
we'll show a toast or

107
00:06:18.396 --> 00:06:21.880
we'll navigate you somewhere
if it's successful.

108
00:06:21.880 --> 00:06:26.887
So in this case,
we can say result equals await,

109
00:06:26.887 --> 00:06:29.872
we're gonna call sign up.

110
00:06:29.872 --> 00:06:32.939
Like this, signup takes in the form data.

111
00:06:32.939 --> 00:06:37.877
We can get the form data from what's
gonna be passed in here as an argument.

112
00:06:37.877 --> 00:06:42.701
So, the two arguments you get are gonna be
the previous state and then the form data.

113
00:06:42.701 --> 00:06:45.341
So, we'll say, previous date,

114
00:06:45.341 --> 00:06:50.490
which is always gonna be the same
type that we're declaring here.

115
00:06:50.490 --> 00:06:52.970
So action response and then the form data.

116
00:06:52.970 --> 00:06:56.954
Because we're gonna add this to a form,
is always gonna be form data here.

117
00:06:56.954 --> 00:06:59.737
So I can just pass that in like that.

118
00:07:06.824 --> 00:07:10.746
Once we have that result,
we can handle success.

119
00:07:10.746 --> 00:07:14.803
So if it's a success, we want to call
a toast.success, show a message and

120
00:07:14.803 --> 00:07:16.722
then route you to the dashboard.

121
00:07:16.722 --> 00:07:18.826
Congratulations, you just signed up.

122
00:07:18.826 --> 00:07:22.973
So if result.success,

123
00:07:22.973 --> 00:07:28.110
we wanna say toast.success.

124
00:07:29.610 --> 00:07:31.527
What did I put there?

125
00:07:31.527 --> 00:07:36.347
Account created successfully,

126
00:07:36.347 --> 00:07:40.163
and then router.push, I mean,

127
00:07:40.163 --> 00:07:45.615
technically probably
wanna do a replace here,

128
00:07:45.615 --> 00:07:51.354
but push is fine to /dashboard,
there we go.

129
00:07:51.354 --> 00:07:54.366
This is terminal, it has a void.

130
00:07:54.366 --> 00:07:56.740
So you don't have to put a return here.

131
00:07:56.740 --> 00:07:58.520
Nothing will happen after this.

132
00:08:00.580 --> 00:08:04.340
If I put some code here,
it's gonna be unreachable.

133
00:08:04.340 --> 00:08:06.628
It actually might even,
it should show me that.

134
00:08:06.628 --> 00:08:08.260
Let me see.

135
00:08:08.260 --> 00:08:11.240
Maybe not, but yeah, you don't
have to put a return here, it's good.

136
00:08:15.060 --> 00:08:16.760
Yeah, just return the results.

137
00:08:16.760 --> 00:08:23.025
Otherwise, we could do a try catch here,
I guess just to handle the errors.

138
00:08:29.866 --> 00:08:34.889
So if there is an error,
we'll just return this.

139
00:08:41.221 --> 00:08:45.249
Cool, it wants errors maybe.

140
00:08:48.588 --> 00:08:52.914
Yeah, I'm not doing all that,
it's fine, [LAUGH] you'll be okay.

141
00:08:52.914 --> 00:08:55.905
So now we need to actually
implement this into our jsx.

142
00:08:55.905 --> 00:08:59.499
So we need to implement, we need to show
the errors, we need to do all that stuff.

143
00:08:59.499 --> 00:09:02.173
So right here, I have all the form stuff.

144
00:09:02.173 --> 00:09:05.237
We can just go ahead and copy this,
don't type all this stuff out,

145
00:09:05.237 --> 00:09:06.290
it's pretty simple.

146
00:09:06.290 --> 00:09:08.428
So grab all the form stuff.

147
00:09:10.490 --> 00:09:11.540
And we'll go through it.

148
00:09:11.540 --> 00:09:15.037
So I think down here
where we wanna put this,

149
00:09:15.037 --> 00:09:18.164
is like right above this div, I think.

150
00:09:18.164 --> 00:09:21.183
I mean, it's gonna look good, it's gonna
look bad, we're gonna find out, cool.

151
00:09:21.183 --> 00:09:25.006
So let's walk through this right
quick because it's pretty simple,

152
00:09:25.006 --> 00:09:26.243
just creating a form.

153
00:09:26.243 --> 00:09:29.587
The most important part
is that we pass our form

154
00:09:29.587 --> 00:09:32.900
action that we get from
our use action state.

155
00:09:32.900 --> 00:09:36.450
So this action, which is a handler for
this form function,

156
00:09:36.450 --> 00:09:40.290
essentially, we wanna pass that
to the action prop on the form.

157
00:09:40.290 --> 00:09:42.988
This is not a magical prop,
that's for this form component.

158
00:09:42.988 --> 00:09:46.660
Every form in HTML has
a prop called action on it.

159
00:09:46.660 --> 00:09:50.463
This is the handler to the action.

160
00:09:50.463 --> 00:09:51.822
This is where I show any error.

161
00:09:51.822 --> 00:09:57.212
So if the state has a message and there's
no success, then show a form error.

162
00:09:57.212 --> 00:09:59.780
So we can show the user the error message.

163
00:09:59.780 --> 00:10:03.042
And then out here,
this is how we map the names of,

164
00:10:03.042 --> 00:10:08.098
you remember we were doing
formdata.getemail, formdata.getpassword,

165
00:10:08.098 --> 00:10:12.186
okay, you have to put a name on that,
that's how it gets it.

166
00:10:12.186 --> 00:10:16.501
This is what's creating the formdata,
this name matters.

167
00:10:16.501 --> 00:10:21.433
So, everything else is standard
HTML5 form inputs, there's nothing,

168
00:10:21.433 --> 00:10:24.514
I mean,
this is also standard HTML5 inputs.

169
00:10:24.514 --> 00:10:28.344
I'm just letting you know how it maps to
form data, which is not related to Next.js,

170
00:10:28.344 --> 00:10:30.390
that's also just HTML5 forms.

171
00:10:30.390 --> 00:10:32.385
There's nothing special here,

172
00:10:32.385 --> 00:10:37.448
even though the client side validation on
the inputs is just regular HTML5 inputs.

173
00:10:37.448 --> 00:10:38.598
There's nothing crazy here.

174
00:10:38.598 --> 00:10:42.448
Notice this is not a controlled input,
there's no onchange, you probably like,

175
00:10:42.448 --> 00:10:43.990
where's the on change?

176
00:10:43.990 --> 00:10:44.854
Where's that?

177
00:10:44.854 --> 00:10:48.517
No, there's no unidirectional data flow,
there's no controlled inputs,

178
00:10:48.517 --> 00:10:49.517
we don't need that.

179
00:10:49.517 --> 00:10:51.446
It's done, it's out of here.

180
00:10:51.446 --> 00:10:53.087
At least for submitting forms,

181
00:10:53.087 --> 00:10:56.374
you'll still need that if you
need to validate stuff as you go.

182
00:10:56.374 --> 00:11:02.535
But for submitting a form,
you don't need controlled inputs anymore,

183
00:11:02.535 --> 00:11:07.990
which is crazy, cuz that's not
how it's been taught forever.

184
00:11:09.290 --> 00:11:11.725
And then yeah,
disable it if we're still pending.

185
00:11:11.725 --> 00:11:16.050
This will be true as long as
this function is still running.

186
00:11:16.050 --> 00:11:18.650
So, this will be true.

187
00:11:18.650 --> 00:11:22.955
And yeah, show some different color
borders if there's errors for

188
00:11:22.955 --> 00:11:25.987
that specific field,
that's pretty much it.

189
00:11:25.987 --> 00:11:29.745
Same thing for the password,
same thing for the confirm password,

190
00:11:29.745 --> 00:11:31.153
it's all the same thing.

191
00:11:38.338 --> 00:11:41.772
Cool, and the most important part
here is this button with type submit.

192
00:11:41.772 --> 00:11:45.981
This is what kicks it off, this is what
fires the action when you click it, right,

193
00:11:45.981 --> 00:11:47.172
or you can hit Enter.

194
00:11:47.172 --> 00:11:50.901
&gt;&gt; Learner: It's sort of unrelated,
but do you see Use Action state?

195
00:11:50.901 --> 00:11:55.580
That new React stuff kind of taking
over like formic and react form.

196
00:11:55.580 --> 00:11:58.305
Is there much use for
those libraries anymore with this?

197
00:11:58.305 --> 00:12:00.724
&gt;&gt; Scott Moss: Yeah, I don't know why
you would ever use them to be honest.

198
00:12:00.724 --> 00:12:05.053
Outside, like I said,
there is still a special use case for

199
00:12:05.053 --> 00:12:10.783
using forms client side and forms that
are not just for submitting to a server.

200
00:12:10.783 --> 00:12:15.552
But maybe you typing in something, I don't
know if you're making Google Doc and

201
00:12:15.552 --> 00:12:20.043
that's some type of form, you probably
still want to use some type of form,

202
00:12:20.043 --> 00:12:21.622
some client side thing.

203
00:12:21.622 --> 00:12:26.571
But for the case of filling something
out and submitting it to a server,

204
00:12:26.571 --> 00:12:30.630
I don't know why I would
ever use that validation.

205
00:12:30.630 --> 00:12:37.162
Sweet, I get some decent validation here,
also validate on a server.

206
00:12:37.162 --> 00:12:42.187
I guess if you want it more input
masking or validating as you type,

207
00:12:42.187 --> 00:12:46.216
then you still might need
those controlled inputs.

208
00:12:46.216 --> 00:12:49.440
But like I said, for most use cases,
just I'm filling out a form and

209
00:12:49.440 --> 00:12:50.656
I'm submitting it.

210
00:12:50.656 --> 00:12:52.080
Probably not, no, yeah.

211
00:12:52.080 --> 00:12:56.944
&gt;&gt; Learner: I have a question
around that form action prop.

212
00:12:56.944 --> 00:12:59.035
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Learner: I know that the action prop is

213
00:12:59.035 --> 00:13:03.144
like each inbuilt into HTML forms,
but in terms of the form action

214
00:13:03.144 --> 00:13:07.941
along with that being like an async
server action and everything like that.

215
00:13:07.941 --> 00:13:12.235
Is there anything that Next is doing
behind the hood to kind of like

216
00:13:12.235 --> 00:13:16.544
polyfill that prop on a form to do
any extra magic under the hood?

217
00:13:16.544 --> 00:13:20.575
&gt;&gt; Scott Moss: I don't think it's actually
touching that, I could be wrong, but

218
00:13:20.575 --> 00:13:23.302
I'm pretty sure it's not touching that.

219
00:13:23.302 --> 00:13:28.032
In this example, what's happening is,
this is just a regular client side

220
00:13:28.032 --> 00:13:33.038
function that when called calls the
referenced, this is like doing a fetch.

221
00:13:33.038 --> 00:13:34.654
This is essentially like,

222
00:13:34.654 --> 00:13:38.650
I'm doing a fetch to a function
with this reference of an id.

223
00:13:38.650 --> 00:13:43.576
So, I don't think it's actually doing
anything special there because that's

224
00:13:43.576 --> 00:13:45.468
just how it works in React now.

225
00:13:45.468 --> 00:13:49.207
If you put an action here, and
then you put some path to a server,

226
00:13:49.207 --> 00:13:51.018
it's gonna go try to do that.

227
00:13:51.018 --> 00:13:54.768
So, it might be doing
something where it allows you

228
00:13:54.768 --> 00:13:57.398
to handle a function here instead.

229
00:13:57.398 --> 00:14:00.588
But I actually don't know because
I've never used this before.

230
00:14:00.588 --> 00:14:03.131
If action already allows you to do that.

231
00:14:03.131 --> 00:14:06.135
So, could be, but
I suspect that, if anything,

232
00:14:06.135 --> 00:14:09.356
that would be React doing something and
not Next.js.

233
00:14:09.356 --> 00:14:10.892
&gt;&gt; Learner: That sounds right, yeah.

234
00:14:10.892 --> 00:14:13.382
&gt;&gt; Scott Moss: Yeah.

235
00:14:13.382 --> 00:14:16.506
&gt;&gt; Learner: Gotcha, so maybe the Next
magic doesn't really work or

236
00:14:16.506 --> 00:14:19.962
doesn't really do anything until
you call the await sign up,

237
00:14:19.962 --> 00:14:23.032
that's when Next starts to
do their API stuff for you.

238
00:14:23.032 --> 00:14:25.750
&gt;&gt; Scott Moss: Yeah, that's when
Next creates that stuff for you.

239
00:14:25.750 --> 00:14:31.617
And to be fair, Next is just like
server actions is a React spec thing.

240
00:14:31.617 --> 00:14:32.988
It has little to do with Next.js.

241
00:14:32.988 --> 00:14:37.718
It's just Next.js implemented the part that
goes across the network boundary for you,

242
00:14:37.718 --> 00:14:41.345
but how it's supposed to work and
the fact that it's compatible,

243
00:14:41.345 --> 00:14:44.958
that's just React, Next.js is like,
we just implemented it.

244
00:14:44.958 --> 00:14:48.006
We're just the thing in the middle,
so it's all React.

245
00:14:48.006 --> 00:14:50.731
Okay, if you try to run this,
it's probably, well, I think if you,

246
00:14:50.731 --> 00:14:51.686
which one's broken?

247
00:14:51.686 --> 00:14:53.470
One of these is broken.

248
00:14:53.470 --> 00:14:56.590
Let's go see something in here.

249
00:14:56.590 --> 00:15:00.254
It's the, yeah, get user by email.

250
00:15:00.254 --> 00:15:02.002
We can just go in here right quick and

251
00:15:02.002 --> 00:15:05.530
just export a function that
does nothing so it won't break.

252
00:15:05.530 --> 00:15:09.450
Export const, get user by email.

253
00:15:09.450 --> 00:15:14.754
This is inside of the /lib /D-A-L, dal.

254
00:15:14.754 --> 00:15:15.626
Why is it called that?

255
00:15:15.626 --> 00:15:20.912
We'll get there in a second,
but just export that so

256
00:15:20.912 --> 00:15:25.728
it doesn't break on the import,
cool, okay.

257
00:15:25.728 --> 00:15:31.183
So, now if you try to run this, we can try
to run this and see what errors we get.

258
00:15:31.183 --> 00:15:31.823
What is this?

259
00:15:31.823 --> 00:15:36.688
User, yeah, cuz it doesn't get
user by email, that's fine.

260
00:15:36.688 --> 00:15:40.880
And then sign up, I think that
signup uses it too, let's see, yeah.

261
00:15:40.880 --> 00:15:45.653
So obviously, it's gonna be chalked
because we haven't implemented this, but

262
00:15:45.653 --> 00:15:50.440
I just want you to see the function being
ran, so you can see what's going on here.

