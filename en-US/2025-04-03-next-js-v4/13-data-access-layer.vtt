WEBVTT

1
00:00:00.400 --> 00:00:04.040
&gt;&gt; Scott Moss: Let's actually get this
working by implementing those functions.

2
00:00:04.040 --> 00:00:09.430
So I need to go into,
Where that's happening.

3
00:00:09.430 --> 00:00:10.847
So in this case it's DAL.

4
00:00:10.847 --> 00:00:11.928
So what does dal stand for?

5
00:00:11.928 --> 00:00:13.928
It stands for data access layer.

6
00:00:13.928 --> 00:00:18.750
You can think about it as
utility functions that get used

7
00:00:18.750 --> 00:00:24.240
on the server side to fetch data for
server components.

8
00:00:24.240 --> 00:00:29.440
Not to be confused with server
functions or server actions.

9
00:00:29.440 --> 00:00:33.928
These are just regular functions
that happen before a route renders.

10
00:00:33.928 --> 00:00:37.967
They don't cross the network barrier,
they aren't on the client,

11
00:00:37.967 --> 00:00:41.400
they aren't responding to
interactions on the client.

12
00:00:41.400 --> 00:00:44.544
They happen before the browser
even knows what's going on.

13
00:00:44.544 --> 00:00:48.938
They're the first thing that gets executed
when someone goes to a route that is

14
00:00:48.938 --> 00:00:50.150
a server component.

15
00:00:50.150 --> 00:00:51.438
So that's the difference.

16
00:00:51.438 --> 00:00:54.607
They have access to the same
thing a server action does.

17
00:00:54.607 --> 00:00:58.112
They have access to the request because
they're happening on a request.

18
00:00:58.112 --> 00:01:00.074
But they are not server actions.

19
00:01:00.074 --> 00:01:06.900
Server actions are API routes that respond
to some interaction on the client.

20
00:01:06.900 --> 00:01:10.284
There's no official name for
what I'm describing to you right here, but

21
00:01:10.284 --> 00:01:13.779
these functions that just run on
React Server Components are just functions

22
00:01:13.779 --> 00:01:16.249
that run before the component
renders on the server.

23
00:01:16.249 --> 00:01:20.320
They're not responding to a button
click or form submission.

24
00:01:20.320 --> 00:01:23.785
I did a request to this route,
before that route loads,

25
00:01:23.785 --> 00:01:25.868
run this function on the server.

26
00:01:25.868 --> 00:01:27.706
That's what these functions are.

27
00:01:27.706 --> 00:01:30.512
They're mostly just used for getting data.

28
00:01:32.248 --> 00:01:39.747
You almost wouldn't do anything mutative
here, maybe outside of analytics, I guess.

29
00:01:39.747 --> 00:01:43.734
I don't know if you did that but
this is mostly just for fetching data for

30
00:01:43.734 --> 00:01:46.799
the page that the person is
trying to see dynamically.

31
00:01:46.799 --> 00:01:49.920
That's it, so don't confuse the two.

32
00:01:50.940 --> 00:01:55.574
If you try to use a server action
in the place of one of these,

33
00:01:55.574 --> 00:02:00.412
you could have potential bugs,
errors, things like that.

34
00:02:00.412 --> 00:02:04.519
So this is why I like to keep the file
separated, because in those server

35
00:02:04.519 --> 00:02:09.132
actions, I put useServer at the top so
everything in there is a server action.

36
00:02:09.132 --> 00:02:11.111
If I did that here,
it would make this a server action.

37
00:02:11.111 --> 00:02:12.239
I don't want this to be a server action.

38
00:02:12.239 --> 00:02:17.126
I just want it to be a regular function
that I can use on the server [LAUGH].

39
00:02:17.126 --> 00:02:22.585
Not a server action that gets executed on
the server, but triggered from a client.

40
00:02:22.585 --> 00:02:28.745
They should come up with a name for these,
but I'm calling them data access layers.

41
00:02:28.745 --> 00:02:31.930
So that's why it's called DAL.

42
00:02:31.930 --> 00:02:37.288
Okay, enough about that, and
I think I go into a lot more

43
00:02:37.288 --> 00:02:43.801
detail in the notes actually about that,
but let's just get to it.

44
00:02:46.141 --> 00:02:49.883
Yeah, so I kinda already talked about
those things, the network boundary.

45
00:02:49.883 --> 00:02:52.565
These functions run on the server,
they don't cross the network boundary.

46
00:02:52.565 --> 00:02:56.824
They're not API routes being triggered
from clients, so that's the difference.

47
00:02:56.824 --> 00:02:58.465
And again, they are bundled separately.

48
00:02:58.465 --> 00:03:02.046
This code will never ever
be bundled on the client,

49
00:03:02.046 --> 00:03:05.890
even though we're importing
them into components.

50
00:03:05.890 --> 00:03:09.298
But remember, the components that we
import them into are server components.

51
00:03:09.298 --> 00:03:12.593
You cannot import these functions
that we're about to make into

52
00:03:12.593 --> 00:03:14.810
a component that has useClient.

53
00:03:14.810 --> 00:03:16.950
It won't work, you'll get an error.

54
00:03:18.170 --> 00:03:23.394
You can only import these functions to
components that don't have useClient.

55
00:03:23.394 --> 00:03:27.532
If you wanna import a function that runs
on a server to a component that does

56
00:03:27.532 --> 00:03:30.954
useClient, then that function
needs to be a server action.

57
00:03:30.954 --> 00:03:36.517
So you have to put useServer at the top,
then you can import it.

58
00:03:36.517 --> 00:03:39.422
I don't have useServer at the top of this,
so it's not a server action,

59
00:03:39.422 --> 00:03:41.914
therefore it's just a regular
function that runs on Node.

60
00:03:41.914 --> 00:03:46.722
So I try to import that into the browser
and run it, it's not gonna go well.

61
00:03:46.722 --> 00:03:49.701
And anything that is useClient
is gonna run on the browser.

62
00:03:49.701 --> 00:03:55.981
All righty, so getUserByEmail,
what do we do here?

63
00:03:55.981 --> 00:04:01.001
Pretty simple, it actually doesn't
take an email because like I said,

64
00:04:01.001 --> 00:04:05.610
although it's not a server action,
it has access to the request,

65
00:04:05.610 --> 00:04:08.390
it has access to the cookies.

66
00:04:08.390 --> 00:04:11.982
So we can use this function called
getSession that I made, you can go look at

67
00:04:11.982 --> 00:04:15.473
it, but all this is doing is grabbing
the JSON web token from the cookie.

68
00:04:17.600 --> 00:04:20.422
So you might be asking yourself,
well, where is that being passed in?

69
00:04:20.422 --> 00:04:24.238
Next.js exposes the current request
through its headers package.

70
00:04:24.238 --> 00:04:27.886
So let me show you what that looks like.

71
00:04:30.930 --> 00:04:32.132
Let's go to getSession.

72
00:04:32.132 --> 00:04:39.305
So we go look at getSession, these cookies
right here comes from next/headers.

73
00:04:39.305 --> 00:04:43.333
You can use this whenever you are inside
of a function that has access to

74
00:04:43.333 --> 00:04:44.158
the request.

75
00:04:44.158 --> 00:04:47.754
So this would be a server action,
this would be a server component.

76
00:04:47.754 --> 00:04:50.009
This would be a route handler,

77
00:04:50.009 --> 00:04:55.416
this would be these data access layer
functions that we're making now.

78
00:04:55.416 --> 00:04:59.560
All these have access to the request,
therefore they can use this package.

79
00:04:59.560 --> 00:05:05.090
It's pretty confusing, but at the same
time, that's how it works [LAUGH].

80
00:05:05.090 --> 00:05:06.665
&gt;&gt; Student 1: One question.

81
00:05:06.665 --> 00:05:07.910
&gt;&gt; Scott Moss: Yes?

82
00:05:07.910 --> 00:05:13.899
&gt;&gt; Student 1: Does Next.js have some
kind of middleware implemented that is

83
00:05:13.899 --> 00:05:19.891
managing all that exposure of
data that come from the request?

84
00:05:19.891 --> 00:05:21.324
&gt;&gt; Scott Moss: Yeah, the question was,

85
00:05:21.324 --> 00:05:25.895
does Next.js have some middleware that's
managing the exposure to the request?

86
00:05:25.895 --> 00:05:30.615
Yeah, it's a combination of, it's
inferred by the use of directives, right?

87
00:05:30.615 --> 00:05:33.960
So it all comes down to all of this stuff.

88
00:05:33.960 --> 00:05:38.061
It's either this,
&gt;&gt; Scott Moss: Or this, and

89
00:05:38.061 --> 00:05:44.850
this right here tells Next.js what
the hell is going on, essentially.

90
00:05:44.850 --> 00:05:48.464
So through the use of
inferring those directives,

91
00:05:48.464 --> 00:05:52.394
it knows which environment
something is gonna run in.

92
00:05:52.394 --> 00:05:57.137
And then two, in the case of
directing that towards a route,

93
00:05:57.137 --> 00:06:00.290
that depends on where you put the code.

94
00:06:00.290 --> 00:06:01.877
So, as you'll see,

95
00:06:01.877 --> 00:06:07.082
this function right here is only
gonna have access to a route, because

96
00:06:07.082 --> 00:06:13.220
we're gonna import it into a server
component that is in itself a route.

97
00:06:13.220 --> 00:06:17.843
But if I were to call this function
outside of the case of a server component,

98
00:06:17.843 --> 00:06:20.236
it wouldn't have access to a route.

99
00:06:20.236 --> 00:06:27.540
You can only use those header functions
if you're in the context of a call.

100
00:06:27.540 --> 00:06:30.932
And in this case, I will be calling this,
as you'll see soon,

101
00:06:30.932 --> 00:06:33.066
inside of a React Server Component.

102
00:06:33.066 --> 00:06:37.896
So anything that is being executed in that
context has access to cookies, headers,

103
00:06:37.896 --> 00:06:38.585
whatever.

104
00:06:38.585 --> 00:06:42.695
Because you can think of a React Server
Component essentially as a route handler

105
00:06:42.695 --> 00:06:43.807
that sends back JSX.

106
00:06:43.807 --> 00:06:46.194
It's the same thing,
that's essentially what it is.

107
00:06:46.194 --> 00:06:48.805
So if you think about it from that
perspective, this is just like

108
00:06:48.805 --> 00:06:51.922
an API route handler that sends back JSX,
I can do whatever the hell I want here.

109
00:06:51.922 --> 00:06:55.270
I have access to the requests,
the headers, everything.

110
00:06:56.290 --> 00:06:57.922
So that's why this has access to it.

