WEBVTT

1
00:00:00.000 --> 00:00:05.035
&gt;&gt; Scott Moss: We left off talking about
static pages and how to determine what

2
00:00:05.035 --> 00:00:10.930
is a static page according to Next JS and
a little widget you get down here.

3
00:00:10.930 --> 00:00:15.656
We're gonna move into dynamic land and
start working on more app-like features.

4
00:00:15.656 --> 00:00:17.537
So the signed in experience,

5
00:00:17.537 --> 00:00:22.000
starting with the actual auth
pages that allow you to sign in.

6
00:00:22.000 --> 00:00:26.491
So, you've done this before, you've
created forms, you've submitted data to

7
00:00:26.491 --> 00:00:30.163
the server, you probably know this
pattern through and thorough.

8
00:00:30.163 --> 00:00:35.299
How to make a form, how to have
controlled inputs using useState or

9
00:00:35.299 --> 00:00:40.082
some form Hook or something like that,
and then submit that.

10
00:00:40.082 --> 00:00:44.277
If you're an OG, you just go ahead and
call Fetch on submit or

11
00:00:44.277 --> 00:00:47.914
something, prevent your default,
do your stuff.

12
00:00:47.914 --> 00:00:53.717
If you're a little bit cooler, maybe
you use a mutation from React Query or

13
00:00:53.717 --> 00:00:56.399
some TRPC, something like that.

14
00:00:56.399 --> 00:00:57.630
We're not gonna do any of that.

15
00:00:57.630 --> 00:01:00.234
[LAUGH] So
it's gonna be completely different.

16
00:01:00.234 --> 00:01:02.373
We're not even gonna make an API route,
but yet

17
00:01:02.373 --> 00:01:04.417
we're still gonna get
things to the server.

18
00:01:04.417 --> 00:01:07.530
So, how are we going to do that?

19
00:01:07.530 --> 00:01:09.369
Well, we'll talk about it.

20
00:01:09.369 --> 00:01:15.315
So, Server Actions.

21
00:01:15.315 --> 00:01:18.426
Anybody know what these are?

22
00:01:18.426 --> 00:01:21.892
I guess technically now they're called
server functions, but same thing.

23
00:01:21.892 --> 00:01:23.240
You ever heard of these?

24
00:01:24.420 --> 00:01:27.962
Yeah, so new feature introduced by React.

25
00:01:27.962 --> 00:01:32.772
It has little to do with Next.js,
although Next.js did.

26
00:01:32.772 --> 00:01:36.280
When Next.js saw that React was
introducing this, they went ahead and

27
00:01:36.280 --> 00:01:38.884
made it available in
Next.js many versions ago.

28
00:01:38.884 --> 00:01:43.076
But now that it is stable in React,
it's stable in Next.js as well.

29
00:01:43.076 --> 00:01:47.019
I've been using Server Actions,
or now server functions, for

30
00:01:47.019 --> 00:01:48.927
well over a year at this point.

31
00:01:48.927 --> 00:01:53.081
And I've also been quoted in a previous
version, of course, of being,

32
00:01:53.081 --> 00:01:57.506
I don't know when you would ever use
Server Actions or why you would use them,

33
00:01:57.506 --> 00:01:59.431
you should still use API routes.

34
00:01:59.431 --> 00:02:03.634
Well, that time has come and passed,
it's the other way around now.

35
00:02:03.634 --> 00:02:07.116
I don't know when you would ever
use API routes at this point.

36
00:02:07.116 --> 00:02:09.602
Well, there are some use cases and
we'll talk about them.

37
00:02:09.602 --> 00:02:13.434
But for the most use case, you're
probably gonna be doing Server Actions.

38
00:02:13.434 --> 00:02:15.900
So, what is a Server Action?

39
00:02:15.900 --> 00:02:20.635
It is a asynchronous function that
gets called on the server, but

40
00:02:20.635 --> 00:02:23.924
usually initiated from some interaction.

41
00:02:23.924 --> 00:02:26.881
So usually something on
the client happens, and

42
00:02:26.881 --> 00:02:32.300
then a Server Action gets fired and this
is code that gets executed on the server.

43
00:02:32.300 --> 00:02:35.437
Sounds like an API route,
[LAUGH] because it is.

44
00:02:35.437 --> 00:02:36.696
You just don't make it.

45
00:02:36.696 --> 00:02:43.957
It's really a clean syntax for creating
API route, so you don't have to do it.

46
00:02:43.957 --> 00:02:48.062
From your perspective,
you're just making these functions, but

47
00:02:48.062 --> 00:02:50.406
there is a network boundary type of.

48
00:02:50.406 --> 00:02:53.924
There is an HTTP request that's happening,
there is some data that's being sent to

49
00:02:53.924 --> 00:02:57.110
the server, you're just not
responsible for doing that.

50
00:02:57.110 --> 00:02:59.304
That's essentially what
a Server Action is.

51
00:02:59.304 --> 00:03:04.075
It's just a more streamlined way of
creating API routes without having to make

52
00:03:04.075 --> 00:03:04.974
API routes.

53
00:03:04.974 --> 00:03:07.935
You wanna cross the network boundary,
you wanna go from client to server,

54
00:03:07.935 --> 00:03:11.319
you wanna post some data, you wanna update
something, you wanna create something,

55
00:03:11.319 --> 00:03:12.181
even get something.

56
00:03:12.181 --> 00:03:14.230
You can do Server Actions
to get things as well.

57
00:03:15.490 --> 00:03:20.601
So we'll talk a little more in depth about
it, but I added some links to how Next.js

58
00:03:20.601 --> 00:03:25.714
talks about it and how React talks about
it, but that's just how I think about it.

59
00:03:25.714 --> 00:03:29.338
Just completely replace what you think,

60
00:03:29.338 --> 00:03:33.591
like Server Actions,
API routes, same thing.

61
00:03:33.591 --> 00:03:35.754
If you think about it from that
perspective, you're gonna be fine.

62
00:03:35.754 --> 00:03:37.412
They also have access to the same thing.

63
00:03:37.412 --> 00:03:40.405
They have access to the request and
the headers and the cookies and

64
00:03:40.405 --> 00:03:41.283
things like that.

65
00:03:41.283 --> 00:03:44.024
Because you are actually
making HTTP request,

66
00:03:44.024 --> 00:03:47.368
you're just not writing the code for
the HTTP request.

67
00:03:47.368 --> 00:03:50.177
It's kinda done for you,
if that makes sense.

68
00:03:50.177 --> 00:03:53.865
&gt;&gt; Speaker 2: How does this work
with things like Capacitor, for

69
00:03:53.865 --> 00:03:58.243
hybrid applications,
where Capacitor is actually serving

70
00:03:58.243 --> 00:04:03.244
the client application through
a local host embedded in the device.

71
00:04:03.244 --> 00:04:05.694
&gt;&gt; Scott Moss: Yeah, so, Capacitor,
like the mobile framework?

72
00:04:05.694 --> 00:04:06.931
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Scott Moss: Yeah, okay.

73
00:04:06.931 --> 00:04:10.781
So the question was,
how does something like Server Action,

74
00:04:10.781 --> 00:04:14.484
Server Functions,
work with a framework like Capacitor,

75
00:04:14.484 --> 00:04:19.687
whereas Capacitor itself is serving the
application on a local host on the device?

76
00:04:19.687 --> 00:04:24.795
Because from my knowledge,
Capacitor is a hybrid mobile framework

77
00:04:24.795 --> 00:04:29.372
that runs on the device through
an invisible shell of an app.

78
00:04:29.372 --> 00:04:30.561
&gt;&gt; Mark: Kind of Electron?

79
00:04:30.561 --> 00:04:33.512
&gt;&gt; Scott Moss: No,
Electron is like running Native.

80
00:04:33.512 --> 00:04:36.405
Yeah, Electron doesn't need a server,
but Capacitor does.

81
00:04:36.405 --> 00:04:40.865
Capacitor has a local host that's
running on an empty shell,

82
00:04:40.865 --> 00:04:42.934
Native mobile app, right?

83
00:04:42.934 --> 00:04:44.497
&gt;&gt; Mark: Correct.
&gt;&gt; Scott Moss: Okay, yeah, so

84
00:04:44.497 --> 00:04:45.901
how would that work?

85
00:04:45.901 --> 00:04:51.697
Well, I guess because you're
hosting it on the device,

86
00:04:51.697 --> 00:04:55.209
so actually that's a good point.

87
00:04:55.209 --> 00:05:01.422
Expo has, Expo,
what do they call it, Expo Routes?

88
00:05:01.422 --> 00:05:03.270
Expo Router, there it is.

89
00:05:03.270 --> 00:05:07.915
So, Expo is one of the first mobile
frameworks I've seen that's introduced

90
00:05:07.915 --> 00:05:09.718
pretty much spec for spec.

91
00:05:09.718 --> 00:05:13.583
Kinda like what Next.js is doing
with server side routing and

92
00:05:13.583 --> 00:05:16.195
server components and things like that.

93
00:05:16.195 --> 00:05:21.511
Capacitor, I don't think this is
going to affect that too much because

94
00:05:21.511 --> 00:05:26.930
essentially Capacitor itself hasn't
implemented what Next.js has.

95
00:05:26.930 --> 00:05:31.662
React supports Server Actions and
React Server Components,

96
00:05:31.662 --> 00:05:34.496
but you still need the server part.

97
00:05:34.496 --> 00:05:37.296
Next.js solves that by
giving you the server part.

98
00:05:37.296 --> 00:05:41.676
Capacitor doesn't have the server part, so
you would have to implement what Next.js

99
00:05:41.676 --> 00:05:44.627
implemented for Capacitor for
it to take advantage of it.

100
00:05:44.627 --> 00:05:49.410
So you wouldn't see any benefit from
Capacitor for React Server Components.

101
00:05:49.410 --> 00:05:53.634
Although, if you did have that,
something like Expo Router,

102
00:05:53.634 --> 00:05:56.354
then yeah, you can see those benefits.

103
00:05:56.354 --> 00:05:59.850
And I think you kinda already
get this with Capacitor, but

104
00:05:59.850 --> 00:06:04.485
you can have over the air, or I guess
server driven UI that updates without you

105
00:06:04.485 --> 00:06:08.570
having to go through the App Store or
things like that.

106
00:06:08.570 --> 00:06:13.421
But yeah, I think you wouldn't see
a benefit unless Capacitor themselves

107
00:06:13.421 --> 00:06:17.579
created the mechanism that
actually supports the server-side

108
00:06:17.579 --> 00:06:21.820
necessity of having Server Actions or
Server Functions, yeah.

109
00:06:22.960 --> 00:06:27.366
Because if it's just running localhost,
then you don't have access to your

110
00:06:27.366 --> 00:06:30.072
resources that you have
deployed somewhere.

111
00:06:30.072 --> 00:06:33.981
It's the person's phone, and at that point
you might as well use whatever Native

112
00:06:33.981 --> 00:06:37.256
modules capacitor gives you to
access the person's phone, so.

113
00:06:37.256 --> 00:06:40.340
Okay, cool, let's do it then.

114
00:06:40.340 --> 00:06:43.486
So we need to make a sign in function,

115
00:06:43.486 --> 00:06:48.412
we need to make a sign up function and
a sign out function.

116
00:06:48.412 --> 00:06:51.383
Let me just describe to you how
these work and the logic behind it.

117
00:06:51.383 --> 00:06:54.753
Because I did abstract a lot of the stuff
dealing with the session stuff,

118
00:06:54.753 --> 00:06:57.582
which I think has little to do or
nothing to do with Next.js.

119
00:06:57.582 --> 00:07:01.183
So, I'm not gonna have you go through
creating the sessions and things,

120
00:07:01.183 --> 00:07:02.706
although I will talk about it.

121
00:07:02.706 --> 00:07:07.274
Essentially, what we're doing for
sign in and sign up,

122
00:07:07.274 --> 00:07:10.806
it's email password, so pretty typical.

123
00:07:10.806 --> 00:07:14.542
On sign in the strategy is take the email
password that the user gave us.

124
00:07:14.542 --> 00:07:17.730
We're gonna do some form validation
here on the server with Zod.

125
00:07:17.730 --> 00:07:21.142
If you don't know what Zod is,
it's runtime schemas.

126
00:07:21.142 --> 00:07:25.571
So think of TypeScript but runtime, so
we can check a schema at runtime and

127
00:07:25.571 --> 00:07:30.215
get an error or not and whether or not
some object is validated by that schema or

128
00:07:30.215 --> 00:07:33.446
doesn't have to be an object,
but any piece of data.

129
00:07:33.446 --> 00:07:34.940
So validate those inputs.

130
00:07:34.940 --> 00:07:37.124
It's the same thing you would
do on API route, right?

131
00:07:37.124 --> 00:07:41.865
You would have form validation on the
client, and then you should also have form

132
00:07:41.865 --> 00:07:45.845
validation on the route for
whatever you're posting or putting.

133
00:07:45.845 --> 00:07:49.066
So it's the same thing,
we're just doing it here.

134
00:07:49.066 --> 00:07:52.520
And then, check to see if we
can find a user by that email.

135
00:07:52.520 --> 00:07:57.585
If we can't, then, that user doesn't
exist, but don't tell them that.

136
00:07:57.585 --> 00:08:00.939
And then, if the user is there,
check to see if their passwords are valid.

137
00:08:00.939 --> 00:08:04.358
If it's not, user doesn't exist,
but they don't need to know that.

138
00:08:04.358 --> 00:08:08.282
And then, if so, create a session which
literally just creates a JSON web token

139
00:08:08.282 --> 00:08:09.726
and puts it in the cookie.

140
00:08:09.726 --> 00:08:15.510
Because again, this runs on a request,
cuz it's gonna be a Server Action.

141
00:08:15.510 --> 00:08:19.886
So it has access to the request object, so
therefore it has access to set cookies.

142
00:08:19.886 --> 00:08:23.618
Just like a Server Route would
have access to set cookies,

143
00:08:23.618 --> 00:08:28.735
this function has access to set cookies,
cuz it's running on an HTTP request.

144
00:08:28.735 --> 00:08:31.262
That's a strategy for sign in,
sign up, more of the same,

145
00:08:31.262 --> 00:08:34.767
you're just not checking, you're just
gonna see if that email doesn't exist.

146
00:08:34.767 --> 00:08:38.617
And if it doesn't, go ahead and sign that
user up, create a session, sign them in,

147
00:08:38.617 --> 00:08:39.160
sign out.

148
00:08:39.160 --> 00:08:43.300
Just deletes the JSON web
token from the cookie.

149
00:08:44.760 --> 00:08:46.973
Cool, let's do it.

150
00:08:46.973 --> 00:08:54.018
So, let's hop into,
it should have a file here called auth.

151
00:08:54.018 --> 00:08:57.531
There's two auth files, there's
libauth and then there's actions auth.

152
00:08:57.531 --> 00:09:01.874
So make sure you are in actions auth.

153
00:09:01.874 --> 00:09:04.890
You will not be touching libauth, but
I might as well give you a tour of it,

154
00:09:04.890 --> 00:09:06.402
see why you won't be touching it.

155
00:09:06.402 --> 00:09:08.162
This is where all the session stuff is.

156
00:09:08.162 --> 00:09:11.394
I guess I could have called this session
and not auth to not confuse people.

157
00:09:11.394 --> 00:09:14.863
But you can take a look in
here to see what's going on.

158
00:09:14.863 --> 00:09:19.848
Pretty much nothing in here is related to
Next.js except for just this one thing,

159
00:09:19.848 --> 00:09:23.543
which is getting a cookie and
setting a cookie, that's it.

160
00:09:23.543 --> 00:09:27.772
Everything else is pretty standard for
anything in Node or

161
00:09:27.772 --> 00:09:30.112
anything in Node at this point.

162
00:09:30.112 --> 00:09:32.520
So, this is how you
interact with the cookies.

163
00:09:33.940 --> 00:09:36.140
Everything else is just pretty standard.

164
00:09:36.140 --> 00:09:39.380
JSON web token stuff
has nothing to do with.

165
00:09:39.380 --> 00:09:40.804
Yes, question, Mark.

166
00:09:40.804 --> 00:09:43.902
&gt;&gt; Mark: So
Server Actions is like Firebot.

167
00:09:43.902 --> 00:09:44.572
&gt;&gt; Scott Moss: Yeah.

168
00:09:44.572 --> 00:09:48.573
&gt;&gt; Mark: So Server Actions is
like Firebase Cloud Functions?

169
00:09:48.573 --> 00:09:54.088
&gt;&gt; Scott Moss: So, is Server Actions
like Firebase Cloud Functions?

170
00:09:54.088 --> 00:09:59.012
To my knowledge, Firebase Cloud Functions
are serverless functions which can

171
00:09:59.012 --> 00:10:02.990
get invoked on certain events,
usually through an HTTP event.

172
00:10:02.990 --> 00:10:08.778
So not quite, the Firebase Cloud Functions
would be more equivalent

173
00:10:08.778 --> 00:10:14.087
to an API route in Next.js, and
not so much of a Server Action.

174
00:10:14.087 --> 00:10:17.921
There really isn't a comparison
in JavaScript land.

175
00:10:17.921 --> 00:10:22.137
But if you know other frameworks, this
would be something you would see in Ruby,

176
00:10:22.137 --> 00:10:24.493
this would be something
you would see in PHP,

177
00:10:24.493 --> 00:10:27.048
this would be something
you would see in Elixir.

178
00:10:27.048 --> 00:10:28.898
So actually a very common pattern,

179
00:10:28.898 --> 00:10:32.415
it's just that we've never really
had it in JavaScript to be able to

180
00:10:32.415 --> 00:10:36.480
execute some logic on the server
initiated from the client.

181
00:10:36.480 --> 00:10:41.582
So, I can't think of an equivalent
thing that has existed since frameworks

182
00:10:41.582 --> 00:10:47.655
came to be in 2013 or 2012, 2013,
that this compares to in JavaScript land.

183
00:10:47.655 --> 00:10:50.840
But to other frameworks, they've been
doing this for a very, very long time.

184
00:10:52.260 --> 00:10:59.240
&gt;&gt; Speaker 4: Would it be fair to say that
Server Action is basically an API route,

185
00:10:59.240 --> 00:11:04.750
but Next.js and
the React standard kind of implement

186
00:11:04.750 --> 00:11:10.750
all the background details of
setting up that endpoint and

187
00:11:10.750 --> 00:11:16.032
all that stuff, and
it's just more declarative?

188
00:11:16.032 --> 00:11:17.262
&gt;&gt; Scott Moss: That's exactly right.

189
00:11:17.262 --> 00:11:19.757
Yeah, and
I was just about to talk about that.

190
00:11:19.757 --> 00:11:22.884
So, this directive,
this use server directive,

191
00:11:22.884 --> 00:11:24.858
there's a lot of ways to use it.

192
00:11:24.858 --> 00:11:26.686
We're gonna use it on the file level.

193
00:11:26.686 --> 00:11:30.316
So by putting use server at the top,
every single thing,

194
00:11:30.316 --> 00:11:36.360
every action that gets exported here,
is essentially a route, it's an API route.

195
00:11:36.360 --> 00:11:37.464
That's what's gonna happen.

196
00:11:37.464 --> 00:11:40.829
The compiler is gonna create an API
route for each one of these and

197
00:11:40.829 --> 00:11:42.651
the route is obfuscated from you.

198
00:11:42.651 --> 00:11:46.245
It's kinda like CSS modules, you don't
really know what the name of it is and

199
00:11:46.245 --> 00:11:48.363
you don't really care, it's just a route.

200
00:11:48.363 --> 00:11:52.240
And when that route gets hit, it's gonna
execute the function that is exported.

201
00:11:52.240 --> 00:11:55.160
And that's essentially what it's doing.

202
00:11:55.160 --> 00:11:57.322
So yeah, we can't beat physics.

203
00:11:57.322 --> 00:12:01.570
So it still has to cross the network
boundary, there's no way around that.

204
00:12:01.570 --> 00:12:05.384
So HTTP still has to happen, it's just
you're not responsible for setting up.

205
00:12:05.384 --> 00:12:10.172
From your perspective, you're just
making a function and exporting it,

206
00:12:10.172 --> 00:12:12.531
and everything else is done for you.

207
00:12:12.531 --> 00:12:16.938
One thing to note is, because these
functions that we're about to make execute

208
00:12:16.938 --> 00:12:20.554
on the server, that means they
don't have access to the window,

209
00:12:20.554 --> 00:12:23.322
they don't have access
to things on the client.

210
00:12:23.322 --> 00:12:26.334
So you can't do client things,
you can't do Dom things.

211
00:12:26.334 --> 00:12:30.815
You will get an error, just like
you would in any server-side Node

212
00:12:30.815 --> 00:12:33.709
code trying to access the window, right?

213
00:12:33.709 --> 00:12:35.944
It also means you can
access things on a server.

214
00:12:35.944 --> 00:12:41.322
So if you have an ORM, you have a
database, you have environment variables,

215
00:12:41.322 --> 00:12:44.550
you can access those
things in this function,

216
00:12:44.550 --> 00:12:48.630
which gets imported into a React
component on the client.

217
00:12:48.630 --> 00:12:52.697
I know it sounds crazy, but the magic is,

218
00:12:52.697 --> 00:13:00.310
this directive hints at the compiler
of what module bundle to put this code.

219
00:13:00.310 --> 00:13:04.582
So, now in Next.js, when your code gets
built, there's a lot of different ways it

220
00:13:04.582 --> 00:13:08.502
gets built with pages, but let's just
say you have two different bundles.

221
00:13:08.502 --> 00:13:13.710
You have client-side modules, and
then you have server-side modules.

222
00:13:13.710 --> 00:13:18.617
If in this file we're doing all this Node
stuff that will not work in a browser and

223
00:13:18.617 --> 00:13:23.672
we import one of these functions into a
component that gets bundled on the client,

224
00:13:23.672 --> 00:13:27.353
that would break,
because you can't do FS on the browser.

225
00:13:27.353 --> 00:13:29.308
And if this thing used FS,
it would break, right?

226
00:13:29.308 --> 00:13:31.052
So they have to separate those.

227
00:13:31.052 --> 00:13:33.746
There's two separate bundles.

228
00:13:33.746 --> 00:13:37.668
There's the server modules and
then there's the client modules.

229
00:13:37.668 --> 00:13:43.812
And the code that you use for Server
Actions are going to be server modules.

230
00:13:43.812 --> 00:13:47.079
So you have access to
everything on your server, and

231
00:13:47.079 --> 00:13:51.166
you don't have to worry about
that being exposed to the client.

232
00:13:51.166 --> 00:13:54.001
Even though you might be importing
this function to the client,

233
00:13:54.001 --> 00:13:56.006
that code isn't gonna
show up on the client.

234
00:13:56.006 --> 00:13:58.126
It literally would not work,
it would break.

235
00:13:58.126 --> 00:14:02.909
So there are some optimizations happening
through the use of intelligent looking

236
00:14:02.909 --> 00:14:07.287
at these directives, is making sure
those modules are bundled together.

237
00:14:07.287 --> 00:14:09.645
And that's some of the stuff
you get with Next.js.

238
00:14:09.645 --> 00:14:17.263
&gt;&gt; Speaker 2: Can we configure the actual
local host and ports on the server-side so

239
00:14:17.263 --> 00:14:23.332
we can deploy those server-side
modules on a server and

240
00:14:23.332 --> 00:14:28.366
then direct the client to
reach to that API that

241
00:14:28.366 --> 00:14:33.682
is created by Next.js so
that is configurable?

242
00:14:33.682 --> 00:14:36.347
&gt;&gt; Scott Moss: I mean, there's nothing
stopping you from making your own custom

243
00:14:36.347 --> 00:14:38.214
server, and deploying that somewhere else.

244
00:14:38.214 --> 00:14:41.573
In fact, Next.js has documentation on
how to make your own custom server and

245
00:14:41.573 --> 00:14:44.350
eject from theirs, and
then you can deploy that separately.

246
00:14:44.350 --> 00:14:49.470
So yeah, you could totally do that if
that's a thing that is gonna be necessary.

247
00:14:49.470 --> 00:14:52.287
I have no experience
doing that whatsoever.

248
00:14:52.287 --> 00:14:53.610
I just know that it's possible.

