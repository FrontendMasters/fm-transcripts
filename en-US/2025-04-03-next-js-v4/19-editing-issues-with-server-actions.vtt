WEBVTT

1
00:00:00.000 --> 00:00:04.538
&gt;&gt; Scott Moss: We left off
on creating new issues

2
00:00:04.538 --> 00:00:08.923
with our mode, our linear app.

3
00:00:08.923 --> 00:00:14.302
So I'm going to go ahead and
start that right quick run dev.

4
00:00:14.302 --> 00:00:21.504
There we go,
make sure that's not broken, cool.

5
00:00:21.504 --> 00:00:26.781
Okay, so what we want to do now
is start working on the edit and

6
00:00:26.781 --> 00:00:31.447
delete feature so
we can edit these things right now.

7
00:00:31.447 --> 00:00:34.930
We can't do that, so let's do that,
it's mostly more of the same.

8
00:00:34.930 --> 00:00:39.748
There is a difference, and I was kind of
hinting at it in the previous session,

9
00:00:39.748 --> 00:00:44.722
where we can do server actions without a
use action state hook and without a form.

10
00:00:44.722 --> 00:00:46.114
So we'll be doing that and

11
00:00:46.114 --> 00:00:50.039
then we'll be talking about like how
to get the parameters out of the ID and

12
00:00:50.039 --> 00:00:52.975
things like that, or
get the ID out of the parameters.

13
00:00:52.975 --> 00:01:00.707
Okay, so let's look at the notes for
that, cool.

14
00:01:00.707 --> 00:01:03.707
So editing and deleting an issue,
like I said, it's mostly the same.

15
00:01:03.707 --> 00:01:08.684
So our objective here is one, we got to
go fill out the update issue function.

16
00:01:08.684 --> 00:01:12.519
So we can go make that,
it's nothing really new here.

17
00:01:12.519 --> 00:01:16.775
It's just doing another validation on the
form because you can update every single

18
00:01:16.775 --> 00:01:17.759
field on an issue.

19
00:01:17.759 --> 00:01:19.579
So pretty much the same thing.

20
00:01:19.579 --> 00:01:22.691
And then the delete issue is even
simpler because it's not a form,

21
00:01:22.691 --> 00:01:24.868
it's just pressing a button and
deleting it.

22
00:01:24.868 --> 00:01:27.906
So the actions are pretty simple,

23
00:01:27.906 --> 00:01:32.620
the thing that's different
here is when we go edit and

24
00:01:32.620 --> 00:01:39.145
delete using the actual uI and
you'll see that we're using params here.

25
00:01:39.145 --> 00:01:41.819
So we'll talk about that and
how that works.

26
00:01:41.819 --> 00:01:47.853
And then we'll also talk about how to
actually like call server actions and

27
00:01:47.853 --> 00:01:53.997
things like that from using a transition
and not just a hook, the form hook.

28
00:01:53.997 --> 00:01:57.460
So no, don't want password,
okay, so let's do it.

29
00:01:57.460 --> 00:02:01.829
Let's start with adding our
update issue stuff to our action.

30
00:02:01.829 --> 00:02:04.454
So we can do that by
going over to our repo,

31
00:02:04.454 --> 00:02:07.761
going to the issues page
inside the actions folder.

32
00:02:07.761 --> 00:02:10.996
Let me just close everything, there we go.

33
00:02:10.996 --> 00:02:16.322
And then I already have this function kind
of scoped out here, but it's just vanilla.

34
00:02:16.322 --> 00:02:19.087
We did that, so
it was breaking trying to import it.

35
00:02:19.087 --> 00:02:21.057
So I'm just going to grab that,
pretty simple.

36
00:02:21.057 --> 00:02:25.413
So the first thing we want to do is we
want to get the actual data for the issue

37
00:02:25.413 --> 00:02:30.350
because we're going to be updating the
issue and it's a form, so we're going to.

38
00:02:30.350 --> 00:02:33.522
It's going to be like partial data
because you might update some fields,

39
00:02:33.522 --> 00:02:35.005
you might Update, other fields,

40
00:02:35.005 --> 00:02:38.145
it's not always going to be a complete
issue in which you're updating.

41
00:02:38.145 --> 00:02:43.156
So it's going to be a partial issue,
essentially, so we want to do that.

42
00:02:43.156 --> 00:02:45.368
And then the ID in which
you want to update on.

43
00:02:45.368 --> 00:02:50.554
So we'll get the ID which is a number and
then partial for all the typescript

44
00:02:50.554 --> 00:02:55.508
people, or I'm sorry, let me just
get this right here, called data.

45
00:02:55.508 --> 00:03:00.887
And then partial is something
that's built in a typescript and

46
00:03:00.887 --> 00:03:04.651
you could pass in, whatever type you want.

47
00:03:04.651 --> 00:03:09.462
In this case we have issue data,

48
00:03:09.462 --> 00:03:14.456
so we'll pass that in like that.

49
00:03:14.456 --> 00:03:19.752
And partial just means if there's anything
on this object that's required, as far as

50
00:03:19.752 --> 00:03:24.988
TypeScript goes, or anything on this type
that is required, it is now not required.

51
00:03:24.988 --> 00:03:29.882
That's basically all it is, from there
we want to get the current user,

52
00:03:29.882 --> 00:03:33.830
if not the user, do the same thing,
validate our schema.

53
00:03:33.830 --> 00:03:36.597
You guys know the drill at this point,
so let's just get warmed up.

54
00:03:36.597 --> 00:03:44.074
So we'll say user equals await,
get current user like that.

55
00:03:44.074 --> 00:03:52.729
If not a user, we want to return success,
false message.

56
00:03:52.729 --> 00:03:57.743
You can put whatever you want here,

57
00:03:57.743 --> 00:04:03.428
say unauthorized authorized access and

58
00:04:03.428 --> 00:04:10.633
then add an error message
to say authorize, cool.

59
00:04:10.633 --> 00:04:14.449
If there is a user, we want to go
ahead and validate that schema, so

60
00:04:14.449 --> 00:04:16.503
we can do that using the Zod schema.

61
00:04:16.503 --> 00:04:19.615
The issue schema will
make it a partial one.

62
00:04:19.615 --> 00:04:23.007
Just because again, this,
because you're doing an update,

63
00:04:23.007 --> 00:04:25.511
we don't know what fields you're updating.

64
00:04:25.511 --> 00:04:29.919
So we're not gonna follow the same
requirements as like for instance,

65
00:04:29.919 --> 00:04:31.026
on the database.

66
00:04:31.026 --> 00:04:34.677
It might be a requirement on database
level that you must have an issue name or

67
00:04:34.677 --> 00:04:35.773
something like that.

68
00:04:35.773 --> 00:04:37.645
But that doesn't mean
when you do an update,

69
00:04:37.645 --> 00:04:41.068
you have to update the name of the issue,
maybe you only updated the description.

70
00:04:41.068 --> 00:04:43.378
So we don't wanna follow
the database schema,

71
00:04:43.378 --> 00:04:47.083
which is where this issue data is coming
from, we wanna make that a partial.

72
00:04:47.083 --> 00:04:51.906
So we'll just say the update schema

73
00:04:51.906 --> 00:04:57.049
is the same thing as the input schema or

74
00:04:57.049 --> 00:05:03.340
issue schema, sorry, partial, like that.

75
00:05:03.340 --> 00:05:05.917
And then once you have that,
then we can do a safe parse.

76
00:05:05.917 --> 00:05:11.750
We'll say validation result equals

77
00:05:11.750 --> 00:05:18.155
update schema, safeparse of the data.

78
00:05:18.155 --> 00:05:21.994
Then we can say,
if not validation result success,

79
00:05:21.994 --> 00:05:25.755
we're going to do something
very similar to this.

80
00:05:25.755 --> 00:05:30.655
But in this case it's not unauthorized,

81
00:05:30.655 --> 00:05:37.795
it's just invalid issue or
whatever, you want to put here.

82
00:05:37.795 --> 00:05:41.637
And then we can take those
error messages from Zod and

83
00:05:41.637 --> 00:05:44.091
just flatten them and show them.

84
00:05:44.091 --> 00:05:48.537
So validation error,

85
00:05:48.537 --> 00:05:54.858
flatten filled errors, cool.

86
00:05:54.858 --> 00:06:01.677
And the rest of the stuff is
pretty not that important.

87
00:06:01.677 --> 00:06:06.111
It just really comes down to the business
logic of going through each single one

88
00:06:06.111 --> 00:06:06.726
of these.

89
00:06:06.726 --> 00:06:10.620
And making sure that like you have at
least one of these things here that you're

90
00:06:10.620 --> 00:06:12.873
trying to update and
informing that object.

91
00:06:12.873 --> 00:06:17.826
So you can just copy that and
then just put this into the update,

92
00:06:17.826 --> 00:06:20.074
it's not that big of a deal.

93
00:06:20.074 --> 00:06:23.530
It's definitely a cleaner way to do that,
but we'll just do it like that.

94
00:06:23.530 --> 00:06:29.448
And then lastly, success,
true, yeah, that.

95
00:06:29.448 --> 00:06:32.051
Then you can put whatever
message you want.

96
00:06:32.051 --> 00:06:38.623
So in this case,
issue updated successfully,

97
00:06:38.623 --> 00:06:45.044
there you go,
we'll wrap this in a Try Catch.

98
00:06:45.044 --> 00:06:49.061
I always forget to just do that at
the beginning because normally I don't use

99
00:06:49.061 --> 00:06:49.703
Try Catch.

100
00:06:49.703 --> 00:06:53.572
I actually use like this utility function

101
00:06:53.572 --> 00:06:58.214
that returns an array and
it's either the value or

102
00:06:58.214 --> 00:07:04.199
an error because I hate doing
Try Catch because it's just ugly.

103
00:07:04.199 --> 00:07:06.670
So not used to doing it all the time.

104
00:07:06.670 --> 00:07:08.118
Also, I think JavaScript is,

105
00:07:08.118 --> 00:07:11.753
there's a proposal in JavaScript to do
the same thing with a special syntax.

106
00:07:11.753 --> 00:07:15.442
So really looking forward to that, okay?

107
00:07:15.442 --> 00:07:18.635
And then, yeah, for the error,
you can just do whatever you want,

108
00:07:18.635 --> 00:07:20.664
for the error, return whatever you want.

109
00:07:20.664 --> 00:07:27.919
&gt;&gt; Student: So I'm seeing in the notes
that you have the return type for

110
00:07:27.919 --> 00:07:34.436
this whole function as
promise of action response,

111
00:07:34.436 --> 00:07:39.935
if it's not action response, would that.

112
00:07:39.935 --> 00:07:43.914
I guess, like,
is that what Next JS is expecting,

113
00:07:43.914 --> 00:07:48.001
like an action response or
can you return anything?

114
00:07:48.001 --> 00:07:50.075
&gt;&gt; Scott Moss: Good question,
you can return whatever you want.

115
00:07:50.075 --> 00:07:53.500
This is just a payload shape
that I came up with, yeah.

116
00:07:53.500 --> 00:07:57.678
So it makes no constraints on what
you return, it's totally up to you.

117
00:07:57.678 --> 00:08:01.266
Because when you use this inside
of the use action state hook,

118
00:08:01.266 --> 00:08:04.169
you do whatever you want in that function,
okay?

119
00:08:04.169 --> 00:08:08.461
&gt;&gt; Student: So action response isn't just,
you came up with that?

120
00:08:08.461 --> 00:08:09.044
&gt;&gt; Scott Moss: Yeah, I can.

121
00:08:09.044 --> 00:08:10.783
&gt;&gt; Student: Okay.
&gt;&gt; Scott Moss: Yeah, yeah, the types of-

122
00:08:10.783 --> 00:08:12.257
&gt;&gt; Student: I thought maybe that was like

123
00:08:12.257 --> 00:08:13.056
a Next JS.

124
00:08:13.056 --> 00:08:16.342
&gt;&gt; Scott Moss: No, yeah, it's right here,
nope, I just made it right here.

125
00:08:16.342 --> 00:08:21.104
Yeah, you can do whatever you want, yeah,

126
00:08:21.104 --> 00:08:24.982
yeah, they're pretty flexible.

127
00:08:24.982 --> 00:08:30.441
I can't think of too many places in next
JS where you have to return something

128
00:08:30.441 --> 00:08:35.156
a certain way other than like,
I don't know the route handlers.

129
00:08:35.156 --> 00:08:42.568
But that's with any server you have to
default export a component for a page.

130
00:08:42.568 --> 00:08:44.999
That's it, everything else,
you can do whatever you want,

131
00:08:44.999 --> 00:08:47.212
they don't really make any,
any constraints on that.

132
00:08:47.212 --> 00:08:53.309
So, okay, let's the delete one,
we can just copy that one.

133
00:08:53.309 --> 00:08:58.028
It's pretty straightforward, but
just to walk through it, it's gonna get

134
00:08:58.028 --> 00:09:03.265
the current user, it's not the user, get
out of here, you can't delete anything.

135
00:09:03.265 --> 00:09:07.680
If the user is there, go ahead and
delete it by the issue id.

136
00:09:07.680 --> 00:09:10.768
Although realistically you
should be checking and

137
00:09:10.768 --> 00:09:15.661
make sure this user is deleting an issue
that belongs to them, but that's okay.

138
00:09:15.661 --> 00:09:21.400
We're going to take shortcuts and then,
yeah, send back whatever you want.

139
00:09:21.400 --> 00:09:26.077
&gt;&gt; Student: I know this is just like a,
like a nitpick quote unquote, but

140
00:09:26.077 --> 00:09:28.667
is it, is it easy just to do like.

141
00:09:28.667 --> 00:09:36.044
Or would it make sense to do a,
like a 403 forbidden or something here?

142
00:09:36.044 --> 00:09:37.582
&gt;&gt; Scott Moss: That's a good question, so

143
00:09:37.582 --> 00:09:40.088
think about the context
in which this action.

144
00:09:40.088 --> 00:09:44.197
Well, so the question was, would it
make sense to do a 403 for bid in here?

145
00:09:44.197 --> 00:09:48.636
Think about the context in
which this function is called,

146
00:09:48.636 --> 00:09:50.545
this is a server action.

147
00:09:50.545 --> 00:09:58.309
So chances are it's gonna be called on
some user interaction on the client and

148
00:09:58.309 --> 00:10:02.257
not during a HTTP request to get a page.

149
00:10:02.257 --> 00:10:06.625
So if you are, I don't know,
clicking a button,

150
00:10:06.625 --> 00:10:12.249
clicking a form and
something wrong happened, what would you.

151
00:10:12.249 --> 00:10:14.796
And let's say you were
making the API request,

152
00:10:14.796 --> 00:10:17.162
what would you send back
on the API request?

153
00:10:17.162 --> 00:10:23.431
If in this case 403 is forbidden,
would you send back the 403 so

154
00:10:23.431 --> 00:10:27.660
the client can look at that,
or would you not.

155
00:10:27.660 --> 00:10:28.873
&gt;&gt; Student: Send Back A 403?

156
00:10:28.873 --> 00:10:30.302
&gt;&gt; Scott Moss: That was a trick question,
yeah, you would,

157
00:10:30.302 --> 00:10:31.301
you would send back the 403.

158
00:10:31.301 --> 00:10:33.863
But then if you look at
other things like GraphQL,

159
00:10:33.863 --> 00:10:36.313
where there's always a 200 no matter what.

160
00:10:36.313 --> 00:10:40.121
Right, so
what next JS is doing here is because this

161
00:10:40.121 --> 00:10:43.677
function has no idea how
it's going to be used.

162
00:10:43.677 --> 00:10:46.301
It doesn't know that it's going to be,

163
00:10:46.301 --> 00:10:49.944
it doesn't know that it's
going to be on a form action.

164
00:10:49.944 --> 00:10:52.667
It doesn't know if it's going
to be in a use transition,

165
00:10:52.667 --> 00:10:56.725
it just knows that it's just going to be
running on a server, it's a server action.

166
00:10:56.725 --> 00:11:01.578
So it has access to the request, but it
has no idea what it's going to do there.

167
00:11:01.578 --> 00:11:06.028
And you don't get access to the low level
request object through these server

168
00:11:06.028 --> 00:11:08.573
actions, it's abstracted away from you.

169
00:11:08.573 --> 00:11:11.480
You just get access to the payloads,
the inputs and the outputs.

170
00:11:11.480 --> 00:11:14.835
So the reason I bring up GraphQL
is because it's kind of operating

171
00:11:14.835 --> 00:11:15.750
similar to that.

172
00:11:15.750 --> 00:11:20.460
Whatever you want to show the client as
far as, like, status codes or whatever,

173
00:11:20.460 --> 00:11:24.014
you can just do that here through
the mechanisms of the data.

174
00:11:24.014 --> 00:11:28.095
But not through the raw
implementation of the HTTP request,

175
00:11:28.095 --> 00:11:32.105
because you won't have access
to that through the client.

176
00:11:32.105 --> 00:11:36.029
&gt;&gt; Student: Okay, could you get that with,
like, middleware and Next js,

177
00:11:36.029 --> 00:11:38.436
or could you get that with middleware?

178
00:11:38.436 --> 00:11:41.191
&gt;&gt; Scott Moss: I don't think so,
we are gonna talk about middle.

179
00:11:41.191 --> 00:11:43.391
Are you talking about, like,
the middleware that Next JS has or

180
00:11:43.391 --> 00:11:44.509
some other type of middleware?

181
00:11:44.509 --> 00:11:48.797
&gt;&gt; Student: Just any kind, yeah,
anything to intercept the requests.

182
00:11:48.797 --> 00:11:49.795
&gt;&gt; Scott Moss: To my knowledge,

183
00:11:49.795 --> 00:11:54.130
Next JS does not have a mechanism to
intercept the request for server action.

