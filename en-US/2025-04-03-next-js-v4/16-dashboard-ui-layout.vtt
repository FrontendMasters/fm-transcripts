WEBVTT

1
00:00:00.240 --> 00:00:03.919
&gt;&gt; Scott Moss: Okay, so
let's get our dashboard stuff in here so

2
00:00:03.919 --> 00:00:06.952
we can have a nice-looking dashboard.

3
00:00:06.952 --> 00:00:08.032
Here we go.

4
00:00:08.032 --> 00:00:15.011
I just gonna grab this stuff and
just paste it in, boom.

5
00:00:20.176 --> 00:00:23.200
Now that I have that,
we should have a dashboard.

6
00:00:23.200 --> 00:00:26.266
If I didn't break anything
that looks like this,

7
00:00:26.266 --> 00:00:30.786
it's still not perfectly looking cuz
we still have to go fix the layout.

8
00:00:30.786 --> 00:00:33.674
The layout has no styling and
no components in it and stuff like that.

9
00:00:33.674 --> 00:00:36.510
But there we go.

10
00:00:38.890 --> 00:00:42.330
And then for
the layout we'll do the same thing.

11
00:00:42.330 --> 00:00:43.530
Should be down here.

12
00:00:43.530 --> 00:00:45.283
There we go.
We'll grab the layout.

13
00:00:45.283 --> 00:00:48.490
It still has our suspense right there,
as you can see.

14
00:00:48.490 --> 00:00:51.627
But now we're gonna get rid of that
loading and we're gonna add this skeleton that I

15
00:00:51.627 --> 00:00:54.360
made that makes the dashboard
look kinda cool when it loads in.

16
00:00:54.360 --> 00:00:55.760
So go to our layout.

17
00:00:55.760 --> 00:00:57.336
We're gonna paste that in there.

18
00:00:57.336 --> 00:00:59.699
Still have our suspense.

19
00:01:02.241 --> 00:01:04.385
And actually might even wanna comment.

20
00:01:04.385 --> 00:01:07.128
Well, this navigation might
cause issues for now.

21
00:01:07.128 --> 00:01:09.400
We'll see, but actually you might
wanna comment that out for now.

22
00:01:09.400 --> 00:01:11.320
Actually, we didn't get there yet.

23
00:01:11.320 --> 00:01:12.540
So we'll do that.

24
00:01:13.640 --> 00:01:16.144
We'll go back, we'll refresh.

25
00:01:16.144 --> 00:01:20.078
It's happening so
fast that you can't see a skeleton.

26
00:01:20.078 --> 00:01:23.918
So this is why I introduced
those mock delays.

27
00:01:23.918 --> 00:01:28.212
So what you could do, you can go to
actions, you can go to issues, I'm sorry,

28
00:01:28.212 --> 00:01:29.038
not actions.

29
00:01:29.038 --> 00:01:30.390
Look, see, I almost fell for it.

30
00:01:30.390 --> 00:01:35.988
Go to right here, getIssues, and
you can add a mock delay in here.

31
00:01:35.988 --> 00:01:39.327
Await mockDelay for like a second or

32
00:01:39.327 --> 00:01:43.970
something like that and
you'll see the skeleton.

33
00:01:45.840 --> 00:01:47.224
And this is never cached.

34
00:01:47.224 --> 00:01:50.520
That's why we see the skeleton every time
cuz it's calling that function every

35
00:01:50.520 --> 00:01:51.118
single time.

36
00:01:51.118 --> 00:01:53.301
It is hitting that mock
delay every single time.

37
00:01:53.301 --> 00:01:55.208
This was not the previous
behavior on Next.js.

38
00:01:55.208 --> 00:01:57.724
If I were to refresh this
previously without that flag,

39
00:01:57.724 --> 00:01:59.980
it would just show up
instantly cuz it was cached.

40
00:02:01.440 --> 00:02:05.316
I had to do a hard refresh
on the browser to clear it,

41
00:02:05.316 --> 00:02:09.116
which is great, but
I wanna be in control of that.

42
00:02:14.614 --> 00:02:15.660
Cool, okay,

43
00:02:15.660 --> 00:02:21.253
now let's see why I commented out
the navigation cuz it's gonna be busted.

44
00:02:21.253 --> 00:02:24.909
I'm pretty sure it is or maybe we fix it,
I don't know, let's see.

45
00:02:26.229 --> 00:02:28.121
Maybe, okay, maybe we did fix it.

46
00:02:28.121 --> 00:02:31.728
I thought it was gonna show an error for

47
00:02:31.728 --> 00:02:36.180
something, but
maybe I didn't add that yet.

48
00:02:36.180 --> 00:02:37.213
Did I add that?

49
00:02:37.213 --> 00:02:40.500
No, we already had, never mind,
I did handle it, sorry.

50
00:02:40.500 --> 00:02:41.748
We are good to go.

51
00:02:41.748 --> 00:02:44.964
Cool, so this is a great use case
to show you something cool here.

52
00:02:44.964 --> 00:02:49.380
So if you look at the navigation,
it shows the user email here.

53
00:02:49.380 --> 00:02:56.052
After you sign in, it's happening so
fast that you can't really see it.

54
00:02:56.052 --> 00:02:59.720
But if I put a mock delay in here.

55
00:03:03.130 --> 00:03:08.903
Let's do one right here inside
of getCurrentUser and

56
00:03:08.903 --> 00:03:12.650
then inside of navigation.

57
00:03:12.650 --> 00:03:14.470
What do I have for a fallback?

58
00:03:15.850 --> 00:03:18.162
That's a shitty fallback [LAUGH].

59
00:03:18.162 --> 00:03:22.922
Wish I had a better one, but
you'll see what I'm talking about.

60
00:03:22.922 --> 00:03:24.114
Actually, that's a shitty fallback.

61
00:03:24.114 --> 00:03:25.514
Let me show you one that looks better.

62
00:03:25.514 --> 00:03:26.974
If I had a skeleton,
this would look better.

63
00:03:26.974 --> 00:03:28.310
I just don't feel like making one.

64
00:03:29.730 --> 00:03:32.210
Let's just do loading for now.

65
00:03:32.210 --> 00:03:33.954
This is where suspense comes in.

66
00:03:33.954 --> 00:03:38.874
So this part of the app is dynamic and
then only this part is dynamic.

67
00:03:38.874 --> 00:03:40.274
And I wanna walk you through how that is.

68
00:03:40.274 --> 00:03:41.402
But this isn't.

69
00:03:41.402 --> 00:03:44.338
So this loads up instantly
cuz it's static, right?

70
00:03:44.338 --> 00:03:48.278
This page is dynamic cuz the whole
page is blocked by getting issues, so

71
00:03:48.278 --> 00:03:49.506
it does not load up.

72
00:03:49.506 --> 00:03:53.799
Although we could push that down even
more and load up this and this and

73
00:03:53.799 --> 00:03:55.562
only have this be dynamic.

74
00:03:55.562 --> 00:03:59.764
We could push it, we can keep pushing
it down, which is what I did here.

75
00:03:59.764 --> 00:04:04.219
Instead of blocking the whole navigation
from loading until this came back,

76
00:04:04.219 --> 00:04:08.271
I pushed it all the way down just to
this component is blocked, right?

77
00:04:08.271 --> 00:04:11.410
So you can see it says
loading right there.

78
00:04:11.410 --> 00:04:14.282
Just that one part, but
everything else rendered.

79
00:04:14.282 --> 00:04:16.218
And this is where it starts
to get really powerful.

80
00:04:16.218 --> 00:04:17.578
And this is what Next.js recommends.

81
00:04:17.578 --> 00:04:20.610
It's like push it down as far as you can.

82
00:04:20.610 --> 00:04:23.633
So like before we would like if I
needed to show the user in here,

83
00:04:23.633 --> 00:04:27.341
somewhere in this component is where I
would fetch the user on the client, and

84
00:04:27.341 --> 00:04:28.614
I'll be fine with that.

85
00:04:28.614 --> 00:04:33.287
But now as we're getting things being done
on the server, you can just have just

86
00:04:33.287 --> 00:04:37.670
this component right here do it,
right, and that's exactly what I did.

87
00:04:37.670 --> 00:04:42.111
And so if you go look at
the navigation component,

88
00:04:42.111 --> 00:04:45.178
it itself is a server component and

89
00:04:45.178 --> 00:04:49.532
it calls suspense on this
user email component.

90
00:04:49.532 --> 00:04:52.128
If I go look at this user email component,

91
00:04:52.128 --> 00:04:55.549
it is a server component that
awaits getCurrentUser.

92
00:04:55.549 --> 00:04:58.600
So it's being suspended
until that comes back.

93
00:04:58.600 --> 00:05:01.800
And once it gets it,
then it shows the email.

94
00:05:01.800 --> 00:05:06.112
So I pushed the call to get
the current user all the way

95
00:05:06.112 --> 00:05:09.960
down to the component
that actually uses it.

96
00:05:09.960 --> 00:05:12.363
Whereas I could have called getuser here,
but

97
00:05:12.363 --> 00:05:15.629
that would have suspended this
whole navigation component and

98
00:05:15.629 --> 00:05:19.214
it would have been blocked from
rendering until the user came back.

99
00:05:19.214 --> 00:05:23.878
So the user would not have seen that panel
on the left until it fetched the user.

100
00:05:23.878 --> 00:05:25.406
It's not a good experience.

101
00:05:25.406 --> 00:05:30.128
Even worse, I could have called
getuser inside of the layout and

102
00:05:30.128 --> 00:05:33.062
passed it as a prop to the navigation.

103
00:05:33.062 --> 00:05:35.254
Now this whole page will be blocked.

104
00:05:35.254 --> 00:05:40.253
The user won't see anything
until the user comes back.

105
00:05:40.253 --> 00:05:41.788
And that's what happens
now in today's apps.

106
00:05:41.788 --> 00:05:45.037
You just see a full page loading screen
until they get the data they want,

107
00:05:45.037 --> 00:05:46.643
then they show you the whole thing.

108
00:05:46.643 --> 00:05:51.310
Whereas now you can just go piece by
piece loading in the things that you need

109
00:05:51.310 --> 00:05:52.060
to load in.

110
00:05:53.720 --> 00:05:55.540
I think it's very powerful.

111
00:05:58.600 --> 00:06:04.125
So push down your calls to get data as
close to where they're gonna be rendered

112
00:06:04.125 --> 00:06:09.660
as possible, suspend them if they're
dynamic, use cache if they're not.

113
00:06:10.760 --> 00:06:14.920
And yeah, you're gonna have a way
better performing app, I think.

114
00:06:14.920 --> 00:06:17.640
Well, I know for sure.

115
00:06:17.640 --> 00:06:23.816
Before we move on,
just wanted to show you an alternative

116
00:06:23.816 --> 00:06:29.296
Next.js specific way to wrap
a route in a suspense.

117
00:06:29.296 --> 00:06:30.560
So I talked about two ways.

118
00:06:30.560 --> 00:06:33.145
So if we go look at our layout for
our dashboard,

119
00:06:33.145 --> 00:06:36.170
we literally wrapped
the children in a suspense.

120
00:06:36.170 --> 00:06:40.428
I said the second way is we could have
just made a component out here that

121
00:06:40.428 --> 00:06:46.290
basically did this and then called that
component here and suspended it in here.

122
00:06:46.290 --> 00:06:53.297
The other way is you could just make
a file in the directory called loading and

123
00:06:53.297 --> 00:06:57.626
that will wrap the page
in a suspense as well.

124
00:06:57.626 --> 00:07:00.844
So that should work actually.

125
00:07:00.844 --> 00:07:03.036
So what we can do is we
can get rid of this.

126
00:07:03.036 --> 00:07:06.068
I'm just gonna take this
dashboard skeleton.

127
00:07:06.068 --> 00:07:09.500
We get rid of this,
I'm gonna put children back here.

128
00:07:09.500 --> 00:07:11.682
We'll probably get our error back.

129
00:07:11.682 --> 00:07:14.551
Well, turn it on.

130
00:07:17.174 --> 00:07:18.788
Here, refresh that.

131
00:07:22.432 --> 00:07:25.715
We'll get our error back saying like hey,
you gotta pick.

132
00:07:25.715 --> 00:07:33.254
So what we can do is should be
able to add a loading here.

133
00:07:33.254 --> 00:07:37.981
So loading definitely adds
a suspense to the component if it

134
00:07:37.981 --> 00:07:40.606
should directly wrap the page.

135
00:07:40.606 --> 00:07:45.481
So I'm just gonna say consts,

136
00:07:45.481 --> 00:07:48.926
dashboard loading.

137
00:07:48.926 --> 00:07:54.198
I guess I'm running out of
names at this point and

138
00:07:54.198 --> 00:08:01.124
I'm just gonna return the skeleton and
import this skeleton.

139
00:08:01.124 --> 00:08:04.364
I feel like it should have auto
imported but it doesn't love me.

140
00:08:04.364 --> 00:08:11.350
So components, DashboardSkeleton.

141
00:08:16.617 --> 00:08:17.788
Tripping.

142
00:08:24.404 --> 00:08:29.452
Okay, just, how about you do that?

143
00:08:29.452 --> 00:08:30.200
There we go.

144
00:08:30.200 --> 00:08:31.205
Okay, cool.

145
00:08:31.205 --> 00:08:32.728
So we got that.

146
00:08:32.728 --> 00:08:37.660
Now, if we go back, same thing.

147
00:08:38.680 --> 00:08:41.909
So loading is probably the cleaner way but

148
00:08:41.909 --> 00:08:47.084
just showing you how to do it without
Next.js with just using React.

149
00:08:47.084 --> 00:08:49.630
But if you just want Next.js to handle
it for you, just add a loading file.

