[00:00:00]
>> Scott Moss: I think we covered all the things that I wanted to cover, what's last then is just for me kind of just to go through and tell you some of the next things I think you should be looking at and what you should maybe build or learn with Next.js.

[00:00:12]
Because what I taught you here was probably like somewhere between 65 to 75% of everything, but that is like all you would need to build anything, everything else is like special use cases for. Nobody's gonna use 100% of Next.js, so that's not the goal, most of the time you're sitting at like 60 to 70% of what they offer you because it does such a good job, and everything else is just like specialized stuff.

[00:00:37]
So you know more than enough to build something, but I wanna go through and kind of just talk about just some of the things that I've learned that I think is really cool. So I've talked about this a little bit, but definitely look up fluid compute with Next.js, they have a whole video and animations and graphics, talking about it, so highly recommend checking that out.

[00:01:01]
It's really cool, I recommend looking into serverless databases a little more, if you don't have that, if you're gonna be deploying on Vercel with Next.js, you definitely wanna look into having a serverless database. You're gonna run into problems, I was one of the first, like I remember when AWS launched Serverless and at that conference in Vercel or I'm sorry, that conference in Vegas.

[00:01:21]
And I tried it like, this is really cool, this was back in like 2016, 2017, something like that, and then we got absolutely bodied by our, we were using Mongo database. The fact that like we just could not have a database connection in a serverless environment, so it was kind of like pointless.

[00:01:39]
And then we made an express server whose job was to sit in front of our MongoDB and use HTTP as a mechanism to transport database commands. So we made a serverless database and it was really bad because we didn't know how to make databases, but it's funny that that's how these products are today.

[00:01:58]
It's like billion dollar products that are serverless databases which are HTTPs sitting in front of a database, so highly recommend looking into a serverless database if you're gonna be using Next.js and Vercel, things like that. Other things to look into would be, everything else is pretty straightforward, I think, I don't think there's anything that's like, super crazy with Next.js, let me think.

[00:02:24]
Everything is pretty straightforward, I think the documentation is really good, all the other stuff is so unique and so specific, I don't think you really need to look into it unless you have the problem. So from here, I would say find a project that challenges you enough that you definitely can't do it without looking things up, getting help, doing some research, and like, go build that.

[00:02:47]
Go build a full stack thing, cause like, now you have to, like you took this course, but now you have to solidify what you learn. And the best way to do that, I think, is like, just, you gotta go make something as fast as possible, otherwise you'll just forget a lot of the stuff because it's muscle memory, right?

[00:03:02]
So go make something, go make something cool, something you always wanted to do, and use Next.js, use Vercel and have fun, and that's pretty much how I learned. I just started making stuff, I started getting into the GitHub comments, I started looking at the docs, started talking to the people making this, and next thing, it's like, I can't live without it.

[00:03:22]
So pretty cool framework and yeah, that's all that I have, well, thanks for coming, hope you guys feel empowered to go forward with Next.js and build really cool stuff. If you end up building some cool stuff, tag me, we'd love to see it, love to give feedback if you need any, but yeah, I mean, the path is go build something slightly uncomfortable, not too crazy, just slightly crazy.

[00:03:46]
And progressively get harder and harder and harder, and next thing you know, you'll know this stuff pretty well, so thanks for coming, thank you.
>> [APPLAUSE]

