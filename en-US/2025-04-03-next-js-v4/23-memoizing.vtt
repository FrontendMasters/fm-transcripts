WEBVTT

1
00:00:00.400 --> 00:00:01.021
&gt;&gt; Scott Moss: Memoizing.

2
00:00:01.021 --> 00:00:08.200
So, anybody know what memoizing is?

3
00:00:08.200 --> 00:00:09.620
Anybody have a definition for that?

4
00:00:10.880 --> 00:00:15.931
&gt;&gt; Student: It's like caching the answer
to a function so that when you call

5
00:00:15.931 --> 00:00:21.079
that function with the given input,
you already have the answer

6
00:00:21.079 --> 00:00:25.912
if you've already called
the function with those inputs.

7
00:00:25.912 --> 00:00:29.883
&gt;&gt; Scott Moss: Yeah, it's essentially like
I have some computation that might have

8
00:00:29.883 --> 00:00:31.560
been expensive.

9
00:00:31.560 --> 00:00:34.184
I'm probably gonna run
it more than one time.

10
00:00:34.184 --> 00:00:38.416
And it's also like a pure function.

11
00:00:38.416 --> 00:00:42.083
So if I give it, let's say it's
a function that takes two numbers and

12
00:00:42.083 --> 00:00:43.264
it returns the sum.

13
00:00:43.264 --> 00:00:45.215
If I call that function
with the same two numbers,

14
00:00:45.215 --> 00:00:47.480
it's always gonna return
the same sum no matter what.

15
00:00:47.480 --> 00:00:51.611
So that is a great candidate to be
memoized because if it gets the same

16
00:00:51.611 --> 00:00:53.550
arguments I can expect the same...

17
00:00:53.550 --> 00:00:56.086
It's a side effect free, pure function.

18
00:00:56.086 --> 00:01:01.062
So given that, yeah, memoization is really
cool because it's a form of caching

19
00:01:01.062 --> 00:01:03.542
that speeds things up dramatically.

20
00:01:03.542 --> 00:01:08.327
The reason it's super useful in our use
case is because we might be in a position

21
00:01:08.327 --> 00:01:13.166
sometimes where we have what we call
kind of like a waterfall effect of like.

22
00:01:13.166 --> 00:01:18.079
Because, now that you know that you can
have different data functions being called

23
00:01:18.079 --> 00:01:21.659
in different layers when someone
refreshes just one route,

24
00:01:21.659 --> 00:01:24.920
what if some of those things
call the same functions?

25
00:01:24.920 --> 00:01:26.888
In the case of like get the current user.

26
00:01:26.888 --> 00:01:31.667
What if the sidebar is calling get
the current user and the dashboard is

27
00:01:31.667 --> 00:01:36.728
calling getCurrentUser and the issues
list is calling getCurrentUser.

28
00:01:36.728 --> 00:01:40.664
All three of those load up when
you go to our index route.

29
00:01:40.664 --> 00:01:42.480
So is it just gonna call that three times?

30
00:01:42.480 --> 00:01:44.000
It's gonna hit our database three times.

31
00:01:44.000 --> 00:01:46.336
It's gonna access the cookies three times.

32
00:01:46.336 --> 00:01:52.234
It's really expensive to be doing that
performance wise and maybe even cost.

33
00:01:52.234 --> 00:01:58.762
So like you want to avoid that and
memoization is a great way to do that.

34
00:01:58.762 --> 00:02:02.658
The problem is you don't want
that to leak across users.

35
00:02:02.658 --> 00:02:04.978
You only want that to happen for
that one request.

36
00:02:04.978 --> 00:02:09.322
So that way some user doesn't
see somebody else's data, right?

37
00:02:09.322 --> 00:02:14.491
So the memoization in React and
Next.js is really great because it

38
00:02:14.491 --> 00:02:19.666
only works for that one request and
it's pretty simple to do.

39
00:02:19.666 --> 00:02:22.258
So let's give it a try.

40
00:02:22.258 --> 00:02:26.072
The way that we do that is we're gonna use
this cache function that actually comes

41
00:02:26.072 --> 00:02:26.794
from React.

42
00:02:26.794 --> 00:02:28.594
This isn't something Next.js made.

43
00:02:28.594 --> 00:02:30.434
This is a React thing.

44
00:02:30.434 --> 00:02:31.866
It's literally called cache.

45
00:02:31.866 --> 00:02:33.911
And its job, it was created for

46
00:02:33.911 --> 00:02:39.402
this purpose of caching functions that
you call in your React server components.

47
00:02:39.402 --> 00:02:41.340
That's exactly what it's made for.

48
00:02:41.340 --> 00:02:45.740
It's very reminiscent of if you've
ever built a GraphQL server.

49
00:02:45.740 --> 00:02:49.604
I don't know if anybody has experience
doing that, but when you make resolvers on

50
00:02:49.604 --> 00:02:52.404
a GraphQL server,
a lot of those resolvers can be cyclic and

51
00:02:52.404 --> 00:02:55.468
they might call the same thing,
they might do the same thing.

52
00:02:55.468 --> 00:02:57.584
So what you do is you make a data loader,

53
00:02:57.584 --> 00:03:01.748
which is essentially a memoization of
the results of those computations.

54
00:03:01.748 --> 00:03:06.727
So even though your GraphQL server is
cyclically calling the same things it only

55
00:03:06.727 --> 00:03:08.468
ever accesses the cache.

56
00:03:08.468 --> 00:03:09.336
It's pretty much the same thing.

57
00:03:09.336 --> 00:03:11.061
And it happens for one request and

58
00:03:11.061 --> 00:03:13.920
it significantly speeds up
your GraphQL responses.

59
00:03:13.920 --> 00:03:16.120
So that's what we're gonna do here.

60
00:03:16.120 --> 00:03:18.160
So getCurrentUser is a great candidate.

61
00:03:18.160 --> 00:03:21.160
We call that a lot in
many different places.

62
00:03:21.160 --> 00:03:22.280
And we want to cache it.

63
00:03:22.280 --> 00:03:25.254
So it doesn't do it all the time,
but there's a lot of setup and

64
00:03:25.254 --> 00:03:28.286
some things you need to understand
because once you set this up,

65
00:03:28.286 --> 00:03:30.664
it isn't obvious that
it's actually working.

66
00:03:30.664 --> 00:03:36.308
So I have to show you how to observe it,
because Next.js does some funky stuff.

67
00:03:36.308 --> 00:03:40.936
So the first thing is, yeah,
let's import the cache function and

68
00:03:40.936 --> 00:03:44.012
we'll wrap our getCurrentUser to use it.

69
00:03:44.012 --> 00:03:45.760
So let's do that.

70
00:03:47.900 --> 00:03:51.440
And that's gonna be inside of the dal here.

71
00:03:52.540 --> 00:03:58.317
And this, like again,
you won't be memoizing server actions

72
00:03:58.317 --> 00:04:03.848
because server actions don't
happen when a page loads up.

73
00:04:03.848 --> 00:04:05.328
Server actions happen on an interaction.

74
00:04:05.328 --> 00:04:07.240
You have more control of
when that gets called.

75
00:04:07.240 --> 00:04:09.064
You don't really need to memoize it.

76
00:04:09.064 --> 00:04:13.646
But in the case of components rendering
because somebody went to a page, yeah, you

77
00:04:13.646 --> 00:04:18.504
do wanna memoize that because there's less
control of when those things get called.

78
00:04:18.504 --> 00:04:21.652
That really depends on where
the components are in the render tree and

79
00:04:21.652 --> 00:04:22.880
how they are architected.

80
00:04:22.880 --> 00:04:27.262
So these are only gonna happen
on functions that get called for

81
00:04:27.262 --> 00:04:28.766
server component.

82
00:04:28.766 --> 00:04:29.758
So getCurrentUser.

83
00:04:29.758 --> 00:04:30.278
Here we go.

84
00:04:30.278 --> 00:04:31.166
So we have cache.

85
00:04:31.166 --> 00:04:35.670
All we have to do is just say cache.

86
00:04:35.670 --> 00:04:37.350
That's it.

87
00:04:37.350 --> 00:04:38.662
That's all we got to do.

88
00:04:38.662 --> 00:04:42.878
The other thing is, right now we
don't actually have a scenario.

89
00:04:42.878 --> 00:04:45.750
Well, we do, but let's make a perfect
scenario so we can observe this.

90
00:04:45.750 --> 00:04:48.364
Let's make a scenario in
which we actually do for

91
00:04:48.364 --> 00:04:52.014
sure call getCurrentUser on one
request so we can observe this.

92
00:04:52.014 --> 00:04:55.552
I think the best place to do this is
if you add await getCurrentUser on

93
00:04:55.552 --> 00:04:56.760
the dashboard page.

94
00:04:56.760 --> 00:05:01.598
We will for sure have two because if
we go look at the dashboard layout,

95
00:05:01.598 --> 00:05:06.272
we're using navigation and
then navigation is using UserEmail and

96
00:05:06.272 --> 00:05:09.272
then UserEmail is using getCurrentUser.

97
00:05:09.272 --> 00:05:11.040
So there's one.

98
00:05:11.040 --> 00:05:14.014
And then obviously the layout
is gonna render the children,

99
00:05:14.014 --> 00:05:15.768
which is gonna render this page.

100
00:05:15.768 --> 00:05:18.088
And if we put it here, this will be two.

101
00:05:18.088 --> 00:05:19.118
So we will for sure.

102
00:05:19.118 --> 00:05:22.678
So that means if you go to this page and
we add it here, getCurrentUser.

103
00:05:22.678 --> 00:05:23.326
We don't need to use it.

104
00:05:23.326 --> 00:05:27.382
I just wanna show you we will for
sure be calling getCurrentUser twice.

105
00:05:27.382 --> 00:05:31.130
We'll be calling it here and
we'll be calling it in that navigation,

106
00:05:31.130 --> 00:05:33.150
which is in the layout.

107
00:05:33.150 --> 00:05:34.838
So it's a great candidate.

108
00:05:34.838 --> 00:05:40.276
So what we can do is let's add a log

109
00:05:40.276 --> 00:05:45.340
temu debugger, console log.

110
00:05:47.720 --> 00:05:48.376
There we go.

111
00:05:48.376 --> 00:05:50.192
So we can say get user,

112
00:05:50.192 --> 00:05:51.164
get current user.

113
00:05:54.875 --> 00:05:57.560
Right, so let's do that.

114
00:05:57.560 --> 00:06:01.580
If we refresh this, I don't know why I hit
refresh in the terminal like that I was

115
00:06:01.580 --> 00:06:02.780
going to do something.

116
00:06:03.800 --> 00:06:05.020
Refresh this.

117
00:06:06.600 --> 00:06:12.100
We'll see get current user do more
than what we thought we would see.

118
00:06:12.100 --> 00:06:14.660
I don't know why I keep
hitting refresh in there.

119
00:06:14.660 --> 00:06:15.892
There we go.

120
00:06:15.892 --> 00:06:17.060
We'll see it a few times.

121
00:06:17.060 --> 00:06:18.228
So I'm gonna talk about this.

122
00:06:18.228 --> 00:06:19.620
So we should only see it two times.

123
00:06:19.620 --> 00:06:22.600
We only really called it twice,
but we see it four times.

124
00:06:23.700 --> 00:06:27.817
That is because while you're in
development mode Next.js will call

125
00:06:27.817 --> 00:06:29.436
your component twice.

126
00:06:29.436 --> 00:06:31.260
It always calls the component twice.

127
00:06:31.260 --> 00:06:35.927
The reason it does that
is to help you detect any

128
00:06:35.927 --> 00:06:40.186
cyclic state errors in your components.

129
00:06:40.186 --> 00:06:42.849
This is because a lot of
people do a use effect and

130
00:06:42.849 --> 00:06:47.443
that use effect usually can lead to a lot
of issues where it's like changing a state

131
00:06:47.443 --> 00:06:51.498
that then changes a render and
then it keeps rendering indefinitely.

132
00:06:51.498 --> 00:06:54.082
So they run it twice so
they can catch that.

133
00:06:54.082 --> 00:06:55.978
In development mode,
all your stuff is gonna run twice.

134
00:06:55.978 --> 00:06:57.963
So that's why we're gonna
see four logs here.

135
00:06:57.963 --> 00:07:00.331
The goal is just to see one, right?

136
00:07:00.331 --> 00:07:02.754
If we do this right,
we should only see this one time.

137
00:07:02.754 --> 00:07:06.450
So in order to do that one,
we got to get out of development mode.

138
00:07:06.450 --> 00:07:12.394
And then two, we don't have to
do anything else we just did it.

139
00:07:12.394 --> 00:07:14.890
So we just need to get out of
development mode and start that.

140
00:07:14.890 --> 00:07:18.196
And we should be able to see if for
sure we'll at least go down to two,

141
00:07:18.196 --> 00:07:22.274
because it's not gonna call our components
twice anymore in production mode.

142
00:07:22.274 --> 00:07:26.230
But we should see it once because we
added the cache, if that makes sense.

143
00:07:27.450 --> 00:07:29.020
Cool.
Okay, so let's do it.

144
00:07:29.020 --> 00:07:30.720
Before we can do that,

145
00:07:30.720 --> 00:07:36.640
we might have to make some changes to
make the production build actually work.

146
00:07:38.620 --> 00:07:43.524
At least in my case, because I couldn't
care less about TypeScript errors.

147
00:07:43.524 --> 00:07:46.956
I have to turn off the TypeScript
errors and the ESLint errors,

148
00:07:46.956 --> 00:07:49.060
otherwise it won't build locally.

149
00:07:49.060 --> 00:07:51.340
So I'm just gonna ignore those for now.

150
00:07:51.340 --> 00:07:53.212
So I could actually build this.

151
00:07:53.212 --> 00:07:57.100
If you try to build this right now,
it might actually freak out.

152
00:07:57.100 --> 00:07:58.140
Actually, I'll show you.

153
00:07:58.140 --> 00:08:01.260
So I'll just say we actually
have a command for this.

154
00:08:01.260 --> 00:08:06.668
So if you go to package.json, you see
there's a command here that says build.

155
00:08:06.668 --> 00:08:09.436
So if you run npm run build,
it's gonna build it.

156
00:08:09.436 --> 00:08:12.540
If it builds successfully,
we want to start it, right?

157
00:08:12.540 --> 00:08:13.925
So let's try that.

158
00:08:20.251 --> 00:08:22.850
Creating optimized production builds.

159
00:08:24.550 --> 00:08:26.590
And you can see right here,
it failed to compile.

160
00:08:26.590 --> 00:08:30.878
And the reason it failed to compile
is because TypeScript errors.

161
00:08:30.878 --> 00:08:31.621
All right.

162
00:08:31.621 --> 00:08:37.486
I could just fix those, but I have my
AI turned off, so I'm not gonna fix.

163
00:08:37.486 --> 00:08:39.646
Instead I'm just gonna ignore this stuff.

164
00:08:39.646 --> 00:08:46.240
And the way I can do that is go to
my Next.js config can go in here.

165
00:08:46.240 --> 00:08:49.860
I can say, hey, for TypeScript, can you
just ignore those build errors please?

166
00:08:49.860 --> 00:08:55.219
And then also for ESLint, can you
ignore those during the build as well?

167
00:08:58.740 --> 00:09:02.552
I'm a big fan of TypeScript
at dev time in the editor.

168
00:09:02.552 --> 00:09:04.800
I don't really like it at build time.

169
00:09:04.800 --> 00:09:06.820
It's kind of annoying in my head.

170
00:09:07.920 --> 00:09:09.600
I don't care.

171
00:09:09.600 --> 00:09:11.128
I just want it to work in my editor.

172
00:09:11.128 --> 00:09:14.780
I wanna see the squigglies, but I don't
want you yelling at me when I deploy.

173
00:09:14.780 --> 00:09:16.802
That's just a preference of mine, I guess.

174
00:09:20.486 --> 00:09:21.944
Cool.
So now if I run build,

175
00:09:21.944 --> 00:09:25.276
you can see it tried to get
current user there multiple times.

176
00:09:25.276 --> 00:09:26.724
And this is actually really cool.

177
00:09:26.724 --> 00:09:27.680
We can show this.

178
00:09:29.100 --> 00:09:33.004
This is the output of the build and it's
kind of cool how it goes through this.

179
00:09:33.004 --> 00:09:34.319
So if you see a circle, a dot,

180
00:09:34.319 --> 00:09:37.428
next to a route, that means that
that page was statically rendered.

181
00:09:37.428 --> 00:09:41.024
There was nothing dynamic about that page,
so it was pre rendered.

182
00:09:41.024 --> 00:09:43.288
And it's static content,
it's never gonna change.

183
00:09:43.288 --> 00:09:47.080
It's that way for
eternity until you build it again.

184
00:09:47.080 --> 00:09:51.200
If it has an f next to it, which is
like a function, this is a dynamic page.

185
00:09:51.200 --> 00:09:54.352
This page is not statically rendered.

186
00:09:54.352 --> 00:09:56.392
It is a server rendered on demand.

187
00:09:56.392 --> 00:10:00.552
That means when someone goes to this page,
then we will render it.

188
00:10:00.552 --> 00:10:04.952
And that is because most likely you're
touching the cookies, the headers,

189
00:10:04.952 --> 00:10:08.770
fetching data, touching the search params,
the route params.

190
00:10:08.770 --> 00:10:12.904
You're doing something that tells
Next.js that this is a dynamic page and

191
00:10:12.904 --> 00:10:15.282
it should not be statically rendered.

192
00:10:15.282 --> 00:10:17.910
So it does that for you automatically,
which I think is really cool.

193
00:10:19.370 --> 00:10:20.898
Okay, cool.

194
00:10:20.898 --> 00:10:21.674
So we've built this.

195
00:10:21.674 --> 00:10:23.870
Now we can do npm start.

196
00:10:30.730 --> 00:10:32.550
And we can see if our cache works.

197
00:10:33.660 --> 00:10:37.182
If our cache doesn't work, then I
think that's because we got to give it

198
00:10:37.182 --> 00:10:39.564
an argument so
it can actually cache on the key.

199
00:10:39.564 --> 00:10:44.180
But I have a feeling it might work without
a cache key if you don't give it anything.

200
00:10:44.180 --> 00:10:45.660
Let's check it out.

201
00:10:45.660 --> 00:10:49.915
So what we wanna do is just be
able to go to the page here,

202
00:10:49.915 --> 00:10:52.460
refresh that, and there it is -

203
00:10:52.460 --> 00:10:54.223
get current user one time.

204
00:10:54.223 --> 00:10:58.820
Even though we're using it in
two places on the same request.

205
00:10:58.820 --> 00:10:59.972
So in production it'll work.

206
00:10:59.972 --> 00:11:01.701
So don't freak out if you're developing,

207
00:11:01.701 --> 00:11:04.500
you're like,
why is this cache not working?

208
00:11:04.500 --> 00:11:05.612
Development is weird.

209
00:11:05.612 --> 00:11:08.440
Just build it in production and
try it out there.

210
00:11:10.660 --> 00:11:12.940
&gt;&gt; Student: So I have a question
about this, what I'm seeing.

211
00:11:12.940 --> 00:11:14.331
So it's not caching it for

212
00:11:14.331 --> 00:11:17.818
eternity if you're just using
the cache tag from React, right?

213
00:11:17.818 --> 00:11:19.511
It's just caching it once per request,
right?

214
00:11:19.511 --> 00:11:20.421
&gt;&gt; Scott Moss: Per request.

215
00:11:20.421 --> 00:11:21.868
Yeah, this is per request.

216
00:11:21.868 --> 00:11:22.834
Yeah.
&gt;&gt; Student: So yeah,

217
00:11:22.834 --> 00:11:25.747
because I'm still seeing if
you navigate to a new issue,

218
00:11:25.747 --> 00:11:27.639
you're using the getCurrentUser.

219
00:11:27.639 --> 00:11:28.448
&gt;&gt; Scott Moss: It's gonna call it again.

220
00:11:28.448 --> 00:11:29.329
&gt;&gt; Student: Go back.
&gt;&gt; Scott Moss: Yep.

221
00:11:29.329 --> 00:11:32.589
&gt;&gt; Student: But using the stuff from Next.js
if you were to use the cache tags,

222
00:11:32.589 --> 00:11:33.765
it does cache forever.

223
00:11:33.765 --> 00:11:34.802
&gt;&gt; Scott Moss: It does cache forever.

224
00:11:34.802 --> 00:11:35.394
Yep.

225
00:11:35.394 --> 00:11:36.482
&gt;&gt; Student: Until you revalidate.

226
00:11:36.482 --> 00:11:37.290
&gt;&gt; Scott Moss: Yep.
&gt;&gt; Student: Got it.

227
00:11:37.290 --> 00:11:40.330
&gt;&gt; Scott Moss: They honestly should
not call it cache, but I get it.

228
00:11:40.330 --> 00:11:44.610
React already has two
things called memoize.

229
00:11:44.610 --> 00:11:47.802
So they're like, we can't add a third
thing called memoize, but technically it-

230
00:11:47.802 --> 00:11:49.126
&gt;&gt; Student: Is just memoizing the actual

231
00:11:49.126 --> 00:11:49.746
function.

232
00:11:49.746 --> 00:11:51.186
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Student: Yeah, okay, yeah.

233
00:11:51.186 --> 00:11:55.857
&gt;&gt; Scott Moss: I mean with those three
things, caching, cache revalidating, and

234
00:11:55.857 --> 00:12:01.218
the memoization, you can make some
pretty performant websites pretty easy.

235
00:12:01.218 --> 00:12:02.282
You're in control.

236
00:12:02.282 --> 00:12:03.650
It makes sense.

237
00:12:03.650 --> 00:12:07.771
You can suspend things when you need to,
you can cache things when you need to,

238
00:12:07.771 --> 00:12:12.058
you can just go static when you need to
without really having to think about it.

239
00:12:12.058 --> 00:12:16.610
So again, it is different than
like what you would mostly see.

240
00:12:16.610 --> 00:12:19.312
But like,
once you get past that difference,

241
00:12:19.312 --> 00:12:23.320
it is a very simple developer
experience in my opinion.

242
00:12:23.320 --> 00:12:24.311
Big fan of it.

243
00:12:24.311 --> 00:12:27.000
&gt;&gt; Student: I guess more of
like a big picture question.

244
00:12:27.000 --> 00:12:31.024
So let's say you need a client component
that needed access to your user.

245
00:12:31.024 --> 00:12:31.860
&gt;&gt; Scott Moss: Okay.

246
00:12:33.240 --> 00:12:37.320
&gt;&gt; Student: Would an approach maybe be
like you cache it on the client too?

247
00:12:37.320 --> 00:12:37.872
&gt;&gt; Scott Moss: Yeah, so

248
00:12:37.872 --> 00:12:42.416
question was if you have a client
component that needs access to your user.

249
00:12:42.416 --> 00:12:44.560
The way that I would do that?

250
00:12:44.560 --> 00:12:48.640
Well, I guess it depends on if you're
using React Query or something like that.

251
00:12:48.640 --> 00:12:53.445
Okay, using React Query, you can actually
make a server action that gets data.

252
00:12:53.445 --> 00:12:57.831
So I would just make a server action that
gets the user and then I would pass that

253
00:12:57.831 --> 00:13:01.274
server action as the fetcher
function to React Query and then

254
00:13:01.274 --> 00:13:04.296
React Query will just get the user for it-
&gt;&gt; Student: It will cache it on

255
00:13:04.296 --> 00:13:04.855
to the client.

256
00:13:04.855 --> 00:13:06.902
&gt;&gt; Scott Moss: And then React Query
will cache it on the client and

257
00:13:06.902 --> 00:13:08.896
then it's all React Query
land at that point.

258
00:13:08.896 --> 00:13:10.372
&gt;&gt; Student: Yeah, that's very cool.

259
00:13:10.372 --> 00:13:10.872
&gt;&gt; Scott Moss: Yeah.

