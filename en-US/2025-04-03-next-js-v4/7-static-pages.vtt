WEBVTT

1
00:00:00.160 --> 00:00:03.136
&gt;&gt; Scott Moss: We were
talking about styling and

2
00:00:03.136 --> 00:00:06.225
why you should just use Tailwind.

3
00:00:06.225 --> 00:00:08.775
And let me get to the notes.

4
00:00:08.775 --> 00:00:10.312
So, yeah, just use Tailwind.

5
00:00:10.312 --> 00:00:12.015
So now what we wanna do is,
let's just go in and

6
00:00:12.015 --> 00:00:13.608
actually fill out these marketing pages.

7
00:00:13.608 --> 00:00:15.248
We have quite a few.

8
00:00:15.248 --> 00:00:19.600
So we have the landing page, which you
already made, but it does nothing.

9
00:00:19.600 --> 00:00:23.413
And we have the layout for
the marketing page, which you made and

10
00:00:23.413 --> 00:00:24.621
also does nothing.

11
00:00:24.621 --> 00:00:29.872
But as you can see for the layout in this
case, it's a great place to do navigation.

12
00:00:29.872 --> 00:00:34.559
So we'll have a header in here where
you have links to the other pages.

13
00:00:34.559 --> 00:00:36.350
I didn't ask for
you to make those other routes.

14
00:00:36.350 --> 00:00:37.400
And you still don't have to make them now.

15
00:00:37.400 --> 00:00:40.901
But if you want to, here's all the code
for those other routes as well.

16
00:00:40.901 --> 00:00:47.269
This is just to show you how to use
the link component to link to other pages.

17
00:00:47.269 --> 00:00:51.104
There's nothing special in any of this
code outside of just regular React and

18
00:00:51.104 --> 00:00:51.936
just styling.

19
00:00:51.936 --> 00:00:56.289
So feel free just to copy and paste
these in, that's what I'm going to do.

20
00:00:56.289 --> 00:01:00.498
And then we'll demonstrate what
it means to have a static page.

21
00:01:00.498 --> 00:01:03.812
How you can tell you have a static
page with Next.js, because what we're

22
00:01:03.812 --> 00:01:06.974
gonna get into after this is gonna
be dynamic and it's way different.

23
00:01:06.974 --> 00:01:10.310
So I want you to have a good
foundation of static pages.

24
00:01:10.310 --> 00:01:13.245
And what does that mean when
it comes to performance,

25
00:01:13.245 --> 00:01:15.472
caching, building, stuff like that.

26
00:01:15.472 --> 00:01:19.344
So let's get to it.

27
00:01:19.344 --> 00:01:23.230
So I'm going to take my index page,

28
00:01:23.230 --> 00:01:27.368
put that in here for marketing page.

29
00:01:27.368 --> 00:01:30.750
Just get that out of here, go.

30
00:01:30.750 --> 00:01:33.073
One cool thing, though,

31
00:01:33.073 --> 00:01:38.892
that is worth a mention is this
components, this Timestamp one.

32
00:01:38.892 --> 00:01:41.620
So who here has never seen 'use client'?

33
00:01:44.505 --> 00:01:46.406
Interesting, everybody has seen that so
far.

34
00:01:46.406 --> 00:01:49.362
Okay, this has nothing to do with Next.js.

35
00:01:49.362 --> 00:01:50.658
This is all React.

36
00:01:50.658 --> 00:01:52.810
This is a React feature, okay?

37
00:01:52.810 --> 00:01:56.782
If you don't know what this is, it's the
React that you've used your whole life,

38
00:01:56.782 --> 00:01:57.962
that's what this is.

39
00:01:57.962 --> 00:02:02.215
This is just regular old single
page application client side React.

40
00:02:02.215 --> 00:02:05.578
You now have to explicitly
say that with React now.

41
00:02:05.578 --> 00:02:07.050
So this is called a directive.

42
00:02:07.050 --> 00:02:09.140
This is the use client directive.

43
00:02:09.140 --> 00:02:15.700
This one, this function is interesting
because of just how static pages work.

44
00:02:15.700 --> 00:02:22.194
This Timestamp is used in the footer of
the page to show the incorporated year.

45
00:02:22.194 --> 00:02:23.460
So you have to go change that every year.

46
00:02:23.460 --> 00:02:25.673
You gotta keep that up to date if
you want investors to think you're

47
00:02:25.673 --> 00:02:26.353
still in business.

48
00:02:26.353 --> 00:02:30.540
So [LAUGH] if you don't wanna change
that every year, you're smart.

49
00:02:30.540 --> 00:02:33.318
You do it with a Timestamp, with a date.

50
00:02:33.318 --> 00:02:38.210
The problem is the page that you put it
on is a static page and it gets cached.

51
00:02:38.210 --> 00:02:41.304
This is a dynamic value that
gets executed every time.

52
00:02:41.304 --> 00:02:45.049
So you end up getting an error,
at least in the mode that we're in.

53
00:02:45.049 --> 00:02:48.074
So you have to run this on the client and
put it there.

54
00:02:48.074 --> 00:02:51.754
So you'll see in a minute how
all this works, but, yeah,

55
00:02:51.754 --> 00:02:54.650
pretty interesting thing here.

56
00:02:54.650 --> 00:02:56.482
Cool, so I have my page.

57
00:02:56.482 --> 00:03:02.440
Let me make sure that isn't busted.

58
00:03:06.194 --> 00:03:09.852
That's right, I still have my conflict.

59
00:03:09.852 --> 00:03:12.740
Let me get rid of my
conflicted page right quick.

60
00:03:12.740 --> 00:03:14.028
There we go, okay, cool.

61
00:03:14.028 --> 00:03:15.809
So now we look like this.

62
00:03:15.809 --> 00:03:19.388
Obviously, I still have my
layout stuff that's rendering.

63
00:03:19.388 --> 00:03:23.060
You may or may not have that, but
that's why mine is doing that.

64
00:03:23.060 --> 00:03:25.001
You might notice this thing down here.

65
00:03:25.001 --> 00:03:26.042
What is this?

66
00:03:26.042 --> 00:03:30.056
This Next.js logo, that is not
from our code, I did not add that.

67
00:03:30.056 --> 00:03:31.800
You did not add that.

68
00:03:31.800 --> 00:03:35.480
But when you click on it,
it gives you some information.

69
00:03:35.480 --> 00:03:37.856
One thing it says is route static.

70
00:03:37.856 --> 00:03:42.307
When you click on this, it tells you that,
hey, this path that you're on,

71
00:03:42.307 --> 00:03:44.254
which in this case is just index,

72
00:03:44.254 --> 00:03:48.760
is marked as static since it will
be pre-rendered during build time.

73
00:03:48.760 --> 00:03:52.721
With static rendering,
routes are rendered at build time or

74
00:03:52.721 --> 00:03:55.680
in the background after data revalidation.

75
00:03:55.680 --> 00:04:00.144
Static rendering is useful when
a route has data that is not

76
00:04:00.144 --> 00:04:04.425
personalized to the user and
can be known at build time,

77
00:04:04.425 --> 00:04:07.942
such as a static blog post or
a product page.

78
00:04:07.942 --> 00:04:16.350
So essentially, anything that doesn't
change is gonna be a static site.

79
00:04:16.350 --> 00:04:21.900
This is why I had to put the date
in a client component because

80
00:04:21.900 --> 00:04:27.345
when you compute the date is
different every single time.

81
00:04:27.345 --> 00:04:31.473
So I was not able to put that
directly in the page without it

82
00:04:31.473 --> 00:04:33.541
complaining about that.

83
00:04:33.541 --> 00:04:36.006
So this is a static page.

84
00:04:36.006 --> 00:04:40.255
By default, most pages are static
unless you do certain things.

85
00:04:40.255 --> 00:04:41.525
We'll talk about those certain things.

86
00:04:41.525 --> 00:04:47.600
You've already done one of them,
that's making a dynamic parameter.

87
00:04:47.600 --> 00:04:50.876
And if you use that
parameter inside of a page,

88
00:04:50.876 --> 00:04:55.416
that automatically makes it
a dynamic page, not a static page.

89
00:04:55.416 --> 00:05:00.842
So there's other things you can do,
like accessing cookies, explicitly saying

90
00:05:00.842 --> 00:05:06.400
this is dynamic, using suspense, things
that we'll be using, stuff like that.

91
00:05:06.400 --> 00:05:07.864
But this is static page.

92
00:05:07.864 --> 00:05:09.997
This thing gets rendered by Next.js.

93
00:05:09.997 --> 00:05:12.338
You can turn it off in the Next.js config.

94
00:05:12.338 --> 00:05:14.556
Just leave it here, it works.

95
00:05:14.556 --> 00:05:17.378
And then, hey, go try Turbopack.

96
00:05:17.378 --> 00:05:22.317
They really want you to try Turbopack,
so [LAUGH] go do it.

97
00:05:22.317 --> 00:05:23.573
To be fair, it is pretty good.

98
00:05:23.573 --> 00:05:27.130
It is much faster, but the compatibility
issues just aren't there yet.

99
00:05:27.130 --> 00:05:30.670
But the team that's working
on it is a very smart team.

100
00:05:32.330 --> 00:05:34.496
Cool, we got that static page.

101
00:05:34.496 --> 00:05:37.743
I'm gonna go get my other pages,
I'm gonna put them in.

102
00:05:37.743 --> 00:05:41.662
So let's grab our layouts for
our marketing.

103
00:05:41.662 --> 00:05:44.107
So I'll go to do that.

104
00:05:46.385 --> 00:05:51.655
Go get rid of that,
put this in here, cool.

105
00:05:51.655 --> 00:05:53.615
So now if I go back,

106
00:05:58.416 --> 00:06:03.375
I now have this navigation at the top
that tries to link to other pages that

107
00:06:03.375 --> 00:06:06.563
don't exist with a sign in and
sign up button.

108
00:06:11.559 --> 00:06:13.990
All right, keep it moving.

109
00:06:13.990 --> 00:06:17.586
Let's go ahead and add,
let's add a pricing page so

110
00:06:17.586 --> 00:06:19.639
we can see how the link works.

111
00:06:19.639 --> 00:06:23.678
So pricing is gonna be
marketing/pricing page.

112
00:06:23.678 --> 00:06:30.370
So let's do this, new folder,
pricing, new route.

113
00:06:30.370 --> 00:06:33.010
It's gonna be page.tsx.

114
00:06:33.010 --> 00:06:34.787
Paste that in.

115
00:06:34.787 --> 00:06:36.938
There we go.

116
00:06:36.938 --> 00:06:41.815
Now if I go back, I

117
00:06:41.815 --> 00:06:47.018
should be able to click on pricing,
and it'll go to pricing.

118
00:06:47.018 --> 00:06:50.371
So one thing I want you to take note of,
I'm gonna stop my server.

119
00:06:50.371 --> 00:06:52.242
Well, actually, no,
it shows it right here already.

120
00:06:52.242 --> 00:06:58.417
So notice it'll say things like this,
Compiled, Compiled.

121
00:06:58.417 --> 00:07:02.829
This happens because this
is a static page and,

122
00:07:02.829 --> 00:07:07.693
well, let's just talk about static or
not static.

123
00:07:07.693 --> 00:07:11.269
The pages themselves don't
actually get rendered or

124
00:07:11.269 --> 00:07:15.104
executed by Next.js until
you visit them in dev mode.

125
00:07:15.104 --> 00:07:20.104
So until I actually visited the price
page, it didn't get compiled.

126
00:07:20.104 --> 00:07:24.266
And that first compilation
step takes a long time.

127
00:07:24.266 --> 00:07:27.761
So you can see this took 336 milliseconds,

128
00:07:27.761 --> 00:07:31.175
kind of a long time, and
then it rendered it.

129
00:07:31.175 --> 00:07:34.955
But it only compiled once
when you stop your server and

130
00:07:34.955 --> 00:07:39.155
go the first time, or
if you change something in the file and

131
00:07:39.155 --> 00:07:42.695
did a hot module reload and
it had to recompile it.

132
00:07:42.695 --> 00:07:44.396
So this could stack.

133
00:07:44.396 --> 00:07:48.182
If you have dependencies in those
components that are fetching data and

134
00:07:48.182 --> 00:07:50.264
that data takes forever to be fetched,

135
00:07:50.264 --> 00:07:54.642
you might see the compilation step take
a long time, or if there's a lot going on.

136
00:07:54.642 --> 00:07:55.815
So it can stack.

137
00:07:55.815 --> 00:07:58.888
So sometimes in development you might have
big pages, and things just take forever to

138
00:07:58.888 --> 00:08:02.750
compile, and then when you execute them,
they can take even longer with the data.

139
00:08:02.750 --> 00:08:06.828
So just know that if you navigate to a
page for the first time since you start up

140
00:08:06.828 --> 00:08:09.846
your server and it took a long time,
it's compiling.

141
00:08:09.846 --> 00:08:12.530
Give it a second,
it won't do it the second time.

142
00:08:12.530 --> 00:08:15.753
And this is where Turbopack
actually makes it way faster,

143
00:08:15.753 --> 00:08:17.809
especially on this step right here.

144
00:08:20.141 --> 00:08:23.752
And just to demonstrate that,
I'm gonna stop my server.

145
00:08:23.752 --> 00:08:25.600
I'm gonna start it up.

146
00:08:25.600 --> 00:08:30.361
It's probably gonna compile whatever page
I'm on now, which is, what, the pricing.

147
00:08:30.361 --> 00:08:31.648
So I'm gonna refresh that.

148
00:08:31.648 --> 00:08:34.880
You see,
it just starts compiling the pricing.

149
00:08:34.880 --> 00:08:37.506
It compiled the favicon.

150
00:08:37.506 --> 00:08:39.630
It never compiled the homepage.

151
00:08:39.630 --> 00:08:41.951
I never went there, so it never did it.

152
00:08:41.951 --> 00:08:45.174
As soon as I go home,
it's going to compile that one.

153
00:08:45.174 --> 00:08:48.462
And there it is,
it compiled that one, and boom.

154
00:08:48.462 --> 00:08:51.634
&gt;&gt; Speaker 2: In copying over some of
the stuff in terms of the pricing page,

155
00:08:51.634 --> 00:08:52.976
let's say for instance,

156
00:08:52.976 --> 00:08:57.188
you're just somebody who prefers to have
one component per file, for instance.

157
00:08:57.188 --> 00:09:00.372
Next isn't gonna care unless it's
called page or layout, right?

158
00:09:00.372 --> 00:09:01.228
&gt;&gt; Scott Moss: Yeah.
They don't

159
00:09:01.228 --> 00:09:02.317
&gt;&gt; Speaker 2: just store your components

160
00:09:02.317 --> 00:09:03.317
in that same directory.

161
00:09:03.317 --> 00:09:04.130
&gt;&gt; Scott Moss: Yep.
&gt;&gt; Speaker 2: Yeah.

162
00:09:04.130 --> 00:09:10.136
&gt;&gt; Scott Moss: Absolutely, unless you use
one of those special names like page,

163
00:09:10.136 --> 00:09:15.729
layout, template, loading,
error, 404, not found.

164
00:09:15.729 --> 00:09:17.095
There's a few more.

165
00:09:17.095 --> 00:09:21.213
Yeah, as long as it's not that,
it's not gonna care, yeah.

166
00:09:21.213 --> 00:09:22.196
But yeah, I'm with you.

167
00:09:22.196 --> 00:09:29.123
Look, don't judge me, this is not how I'm
doing stuff in production, all right?

168
00:09:29.123 --> 00:09:31.744
We ain't just throwing stuff in
here all willy nilly like this.

169
00:09:31.744 --> 00:09:34.674
So we're gonna have components scoped out.

170
00:09:34.674 --> 00:09:39.338
But I don't want you guys copy and pasting
all these files and doing all this stuff.

171
00:09:39.338 --> 00:09:40.690
That's just so much work.

172
00:09:40.690 --> 00:09:45.730
So we're just gonna put it in one place,
but yeah, great point.

173
00:09:45.730 --> 00:09:49.018
So if we go to the layout,
we can look at the link component.

174
00:09:49.018 --> 00:09:51.515
Here it is, it's pretty simple.

175
00:09:51.515 --> 00:09:56.765
It has to have an href, and
it works just like an anchor tag stuff.

176
00:09:56.765 --> 00:09:58.570
It does client side routing and
prefetching.

177
00:09:58.570 --> 00:10:00.047
That's pretty much it.

178
00:10:00.047 --> 00:10:04.837
You can turn off prefetching,
you could do things like prefetch, false,

179
00:10:04.837 --> 00:10:06.476
say, don't do that.

180
00:10:06.476 --> 00:10:08.080
There's so many things you can do there.

181
00:10:08.080 --> 00:10:14.556
But, yeah, prefetching is good by default,
things like that, pretty simple.

182
00:10:14.556 --> 00:10:17.600
It's pretty self-explanatory,
it does what you think it does.

183
00:10:19.900 --> 00:10:23.751
Cool, I'm not going to add all those other
marketing pages because they're just more

184
00:10:23.751 --> 00:10:24.380
of the same.

185
00:10:24.380 --> 00:10:26.340
They don't actually do anything special.

186
00:10:26.340 --> 00:10:28.300
So let's get to the Auth pages.

187
00:10:28.300 --> 00:10:30.548
Where are they at?

188
00:10:30.548 --> 00:10:31.135
There we go.

189
00:10:31.135 --> 00:10:36.088
So for the sign up page,
I'm gonna copy that,

190
00:10:36.088 --> 00:10:40.595
go to my sign up, and put that in there.

191
00:10:40.595 --> 00:10:41.686
Does it sign up?

192
00:10:41.686 --> 00:10:44.098
Yeah, cool, so we have our sign up page.

193
00:10:44.098 --> 00:10:47.869
And then for my sign in page,
do the same thing.

194
00:10:50.764 --> 00:10:55.040
&gt;&gt; Scott Moss: Great, and
should be able to check those out.

195
00:10:55.040 --> 00:10:59.637
Go on to sign up, should look like this.

196
00:10:59.637 --> 00:11:02.384
You shouldn't have a form, cuz that's
the next thing we're gonna make.

197
00:11:02.384 --> 00:11:07.040
But you should see that if you go to
sign in, pretty much the same thing.

198
00:11:07.040 --> 00:11:13.560
Cool, so that's essentially static pages.

199
00:11:13.560 --> 00:11:19.600
Static pages are regular pages that don't
fetch data, or at least any dynamic data.

200
00:11:19.600 --> 00:11:22.657
They are not personalized to
the user that's looking at it.

201
00:11:22.657 --> 00:11:26.087
So it's not like, depending on
the user and their ID and their token,

202
00:11:26.087 --> 00:11:27.317
I wanna show this thing.

203
00:11:27.317 --> 00:11:28.556
That's a dynamic page.

204
00:11:28.556 --> 00:11:31.460
A static page is something that's
gonna be the same for everybody.

205
00:11:31.460 --> 00:11:33.849
And these pages are heavily optimized.

206
00:11:33.849 --> 00:11:36.244
&gt;&gt; Speaker 3: Can I just see
your sign in page real quick?

207
00:11:36.244 --> 00:11:38.042
&gt;&gt; Scott Moss: Sure.

208
00:11:38.042 --> 00:11:39.533
&gt;&gt; Speaker 3: The actual page.

209
00:11:39.533 --> 00:11:40.877
&gt;&gt; Scott Moss: The actual page,
how it looks?

210
00:11:40.877 --> 00:11:44.401
Yes, this is my sign in page.

211
00:11:44.401 --> 00:11:47.020
Yeah, yeah,
you should not see a form here.

212
00:11:47.020 --> 00:11:51.024
&gt;&gt; Speaker 3: Yeah, I would wanna make
sure you didn't have the layout either,

213
00:11:51.024 --> 00:11:52.104
like the navbar.

214
00:11:52.104 --> 00:11:53.870
&gt;&gt; Scott Moss: Got you,
yeah, that's a good point.

215
00:11:53.870 --> 00:12:02.350
Yeah, I don't have the navbar because
the navbar layout is the marketing layout.

216
00:12:02.350 --> 00:12:04.670
So the Auth won't have it.

217
00:12:04.670 --> 00:12:09.580
The only layout that the Auth has
is the root one cuz that's its

218
00:12:09.580 --> 00:12:14.597
closest ancestor layout,
which is down here somewhere here.

219
00:12:14.597 --> 00:12:15.920
So yeah, it won't have that.

220
00:12:15.920 --> 00:12:18.404
Now there are some other
things here with static pages.

221
00:12:18.404 --> 00:12:23.590
It's gonna come down to pre-rendering
static pages that have dynamic values.

222
00:12:23.590 --> 00:12:30.274
This is a good example for
blog post pages or documentation pages.

223
00:12:30.274 --> 00:12:31.961
So you have some external source.

224
00:12:31.961 --> 00:12:35.886
Let's say it's a headless,
yeah, a CMS or a database.

225
00:12:35.886 --> 00:12:38.402
And you have 50 blog
posts you need to render.

226
00:12:38.402 --> 00:12:40.157
These are all static pages.

227
00:12:40.157 --> 00:12:44.410
Are you gonna come in here and
make 50 different blog posts?

228
00:12:44.410 --> 00:12:47.560
Probably not, so you'll probably do
the catch all routes cuz you're smart.

229
00:12:47.560 --> 00:12:51.969
But then, how do you pre-render
each one if you only have one

230
00:12:51.969 --> 00:12:55.609
route made in your code
that represents each one?

231
00:12:55.609 --> 00:12:59.160
So Next.js has something called, cool.

232
00:12:59.160 --> 00:13:00.780
So get static params.

233
00:13:02.240 --> 00:13:06.380
Basically, if you have a dynamic
page like this, again,

234
00:13:06.380 --> 00:13:10.698
like a blog post, and
I need to go fetch all those blog posts.

235
00:13:10.698 --> 00:13:13.209
And I want to pre-render a static page for

236
00:13:13.209 --> 00:13:17.945
each one of those blog posts inside of
that file that represents one blog post,

237
00:13:17.945 --> 00:13:21.290
I would export a function
called get StaticParams.

238
00:13:21.290 --> 00:13:25.490
I would go get all of my blog posts
from whatever source they are in.

239
00:13:25.490 --> 00:13:26.452
And in this case,

240
00:13:26.452 --> 00:13:30.538
I need to return an array of objects
that match the dynamic parts of the URL.

241
00:13:30.538 --> 00:13:32.432
So in this case, there's a slug here.

242
00:13:32.432 --> 00:13:36.346
So I need to return an array that
has objects that have slugs.

243
00:13:36.346 --> 00:13:39.148
And then for
each slug that you return here,

244
00:13:39.148 --> 00:13:42.870
a route will be pre-rendered and
generated for you.

245
00:13:42.870 --> 00:13:45.990
So that's essentially what this is.

246
00:13:45.990 --> 00:13:48.070
You can put all your blog posts in here.

247
00:13:48.070 --> 00:13:51.270
Let's say you have a hundred thousand
blog posts, you could do that.

248
00:13:51.270 --> 00:13:53.750
Your build time's gonna be insane.

249
00:13:53.750 --> 00:13:57.036
So what you can do instead is you can,
I don't know,

250
00:13:57.036 --> 00:13:59.448
maybe get the first 50 recent ones.

251
00:13:59.448 --> 00:14:03.079
And then if anybody tries to
navigate to an older one,

252
00:14:03.079 --> 00:14:05.915
you do server-side generation on that.

253
00:14:05.915 --> 00:14:09.120
That's called incremental regeneration.

254
00:14:09.120 --> 00:14:10.864
So you would generate it.

255
00:14:10.864 --> 00:14:13.171
When someone goes to visit a page,

256
00:14:13.171 --> 00:14:17.707
let's say a blog post with a slug
that you did not pre-render here,

257
00:14:17.707 --> 00:14:22.347
Next.js will render it on the server
like it's a server component.

258
00:14:22.347 --> 00:14:26.568
And then now because it's static,
it never has to render again.

259
00:14:26.568 --> 00:14:29.435
So if somebody tries to check
it two seconds after that,

260
00:14:29.435 --> 00:14:33.279
they'll immediately get it without
having to render like the first time,

261
00:14:33.279 --> 00:14:35.378
as if you were to put it in this array.

262
00:14:35.378 --> 00:14:39.935
So it basically gets rendered
on demand versus you doing it

263
00:14:39.935 --> 00:14:43.470
ahead of time to save
time on your build time.

264
00:14:45.450 --> 00:14:50.890
That was really complicated explaining,
[LAUGH] but yes, that's how that works.

265
00:14:50.890 --> 00:14:55.176
&gt;&gt; Speaker 4: Is building thousands
of pages on, let's say, Vercel,

266
00:14:55.176 --> 00:14:58.416
really expensive, or not that expensive?

267
00:14:58.416 --> 00:15:00.517
&gt;&gt; Scott Moss: It's slow,
it doesn't really cost.

268
00:15:00.517 --> 00:15:02.556
I mean,
I guess it depends on where you run it.

269
00:15:02.556 --> 00:15:07.175
Vercel does build, and
they're not gonna charge you extra for

270
00:15:07.175 --> 00:15:09.606
build time, but it can be slow.

271
00:15:09.606 --> 00:15:15.988
I've worked with companies that had
hundreds of thousands of articles, and

272
00:15:15.988 --> 00:15:21.397
it could take them 30,
40 minutes plus to deploy something.

273
00:15:21.397 --> 00:15:27.212
I guess that's fine compared to what
things normally are in bigger companies,

274
00:15:27.212 --> 00:15:29.588
but it's still pretty slow.

275
00:15:29.588 --> 00:15:32.108
And you're compiling things
that nobody looks at.

276
00:15:32.108 --> 00:15:34.788
You're compiling a blog
post from ten years ago.

277
00:15:34.788 --> 00:15:36.060
Who the hell's looking at that?

278
00:15:36.060 --> 00:15:40.101
Nobody, so yeah,
only compile the things that you need.

