WEBVTT

1
00:00:00.294 --> 00:00:02.701
&gt;&gt; Scott Moss: How do we
make middleware in Next js?

2
00:00:02.701 --> 00:00:03.559
It's really easy.

3
00:00:03.559 --> 00:00:11.374
You just make a file on the root
called middleware, that's it.

4
00:00:11.374 --> 00:00:16.394
So outside of the app folder you
make a file called middleware.

5
00:00:16.394 --> 00:00:18.445
And now this file has the opportunity,

6
00:00:18.445 --> 00:00:21.688
I say opportunity because it
depends on how you configure it.

7
00:00:21.688 --> 00:00:26.464
It has the opportunity to run on every
single request that comes to your app, but

8
00:00:26.464 --> 00:00:29.473
again, it does come down
to how you configure it.

9
00:00:29.473 --> 00:00:33.674
And there are many,
many ways to configure it.

10
00:00:33.674 --> 00:00:35.763
The easiest way, in my opinion,
is just to use the matcher.

11
00:00:35.763 --> 00:00:40.817
So if you export a config object like
this, you can say what paths you

12
00:00:40.817 --> 00:00:45.889
want the middleware to be triggered on,
and it uses a glot pattern.

13
00:00:45.889 --> 00:00:50.269
You can also use regexes, you can also
use exact paths, you can use many

14
00:00:50.269 --> 00:00:55.030
different ways to describe what paths
you want the middleware to operate on.

15
00:00:55.030 --> 00:00:59.293
So we can just put this in here,
and let's just give it a whirl.

16
00:00:59.293 --> 00:01:05.266
So I'll do this and
I'll say, on every path.

17
00:01:05.266 --> 00:01:10.226
And then what I'll do here is, oops,

18
00:01:10.226 --> 00:01:15.342
console log here, I'll just do this,

19
00:01:15.342 --> 00:01:20.457
I'll go back to our app, start it, and

20
00:01:20.457 --> 00:01:25.745
this thing says, wait, invalid.

21
00:01:25.745 --> 00:01:31.249
Let's just do that.

22
00:01:31.249 --> 00:01:35.686
Cool, so
now when I go to the index of our app,

23
00:01:42.184 --> 00:01:47.462
did the log, let's see if it actually log.

24
00:01:55.194 --> 00:01:58.248
I don't,
I don't see my middleware log, maybe,

25
00:01:58.248 --> 00:02:01.593
maybe it doesn't show up here anymore,
I don't know.

26
00:02:01.593 --> 00:02:04.430
I thought that that was gonna show up
there in the server, but I guess not.

27
00:02:04.430 --> 00:02:09.771
Regardless, we're still gonna make
middleware for authenticating our APIs.

28
00:02:09.771 --> 00:02:14.277
Because having to check for, let's say we
wanna have an API key for our developer

29
00:02:14.277 --> 00:02:18.926
API, having to check for that on the code
level for every single route is annoying.

30
00:02:18.926 --> 00:02:20.614
So let's just do that on the middleware.

31
00:02:20.614 --> 00:02:24.555
Globally, it's not the perfect protection
because we still wanna check to make sure

32
00:02:24.555 --> 00:02:28.055
the API key actually belongs to a user,
and maybe they have a paid account and

33
00:02:28.055 --> 00:02:28.781
this and that.

34
00:02:28.781 --> 00:02:34.583
Unless you have that stored on
a edge storage mechanism Edge,

35
00:02:34.583 --> 00:02:37.718
Redis, or something like that.

36
00:02:37.718 --> 00:02:39.269
You still got to go to your source,

37
00:02:39.269 --> 00:02:42.225
your code that talks to your
database that has that information.

38
00:02:42.225 --> 00:02:43.726
So it's not a complete check,

39
00:02:43.726 --> 00:02:46.979
but at least it's checking to see
if you even have it in the header.

40
00:02:46.979 --> 00:02:50.851
And if you do have it in the header,
then we can forward you to the server and

41
00:02:50.851 --> 00:02:53.743
then you can go from there,
if that makes sense, yes.

42
00:02:53.743 --> 00:02:56.785
&gt;&gt; Speaker 2: Does middleware
only work in serverless or

43
00:02:56.785 --> 00:03:00.340
Vercel environments or
does it work standalone?

44
00:03:00.340 --> 00:03:01.912
&gt;&gt; Scott Moss: So, great question.

45
00:03:01.912 --> 00:03:06.595
Almost every one of Vercell's
competitors supports this now, so

46
00:03:06.595 --> 00:03:08.190
it pretty much works.

47
00:03:08.190 --> 00:03:12.989
It's really hard to say where all
these features work because there's n

48
00:03:12.989 --> 00:03:17.488
amount of hosting platforms,
I don't know what they all support.

49
00:03:17.488 --> 00:03:23.383
What I can say is that the leading hosting
platforms like Vercel, Netlify, Railway,

50
00:03:23.383 --> 00:03:28.731
like all these other ones that would
support Next JS also support middleware.

51
00:03:28.731 --> 00:03:32.986
So it's pretty safe to say
if they have Edge Compute,

52
00:03:32.986 --> 00:03:36.779
they probably support
middleware in some way.

53
00:03:36.779 --> 00:03:37.892
Vercel definitely supports it.

54
00:03:40.357 --> 00:03:47.685
&gt;&gt; Scott Moss: Okay, so
let's lock down our API.

55
00:03:47.685 --> 00:03:53.001
So what we're gonna do here is we're
gonna match on anything that says API.

56
00:03:53.001 --> 00:03:58.108
And then what we're gonna do is we're
gonna check in here, programming, hey,

57
00:03:58.108 --> 00:04:03.609
the request that came in starts with/API,
we want to grab the authorization header.

58
00:04:03.609 --> 00:04:08.739
If there is no header, get out of here.

59
00:04:08.739 --> 00:04:13.643
Otherwise just pass through,
so let's do that.

60
00:04:13.643 --> 00:04:18.258
So I'll say matcher and I'll say API.

61
00:04:18.258 --> 00:04:20.954
How did I do that?

62
00:04:20.954 --> 00:04:23.018
Path like this.

63
00:04:26.219 --> 00:04:28.940
&gt;&gt; Scott Moss: And
then we can use the request here, and

64
00:04:28.940 --> 00:04:32.633
get the
request.NextUrl.pathname.startswith.

65
00:04:32.633 --> 00:04:36.548
Next URL is not Next js URL,

66
00:04:36.548 --> 00:04:43.373
it's the next URL that
you're trying to go to.

67
00:04:43.373 --> 00:04:45.294
So don't confuse that with Next js URL.

68
00:04:45.294 --> 00:04:48.124
It's the URL that, because remember
this is intercepting something.

69
00:04:48.124 --> 00:04:52.304
So this is the URL that
the request is trying to go to,

70
00:04:52.304 --> 00:04:55.161
that's why it's called Next URL.

71
00:04:55.161 --> 00:05:00.545
So if request nexturl.pathname
startsWith/API,

72
00:05:00.545 --> 00:05:04.970
we want to get the headers
using the standard

73
00:05:04.970 --> 00:05:10.005
getter method on the headers
because it's a set,

74
00:05:17.561 --> 00:05:18.268
&gt;&gt; Scott Moss: Headers and

75
00:05:18.268 --> 00:05:19.686
we can import headers.

76
00:05:19.686 --> 00:05:25.446
So headers dot, or I think we've

77
00:05:25.446 --> 00:05:30.190
got to do like headers dot.

78
00:05:30.190 --> 00:05:33.018
Need to make this async.

79
00:05:33.018 --> 00:05:40.587
Actually, I would I like this better.

80
00:05:40.587 --> 00:05:41.990
I just like arrow functions better.

81
00:05:47.768 --> 00:05:51.386
&gt;&gt; Scott Moss: There we go.

82
00:05:51.386 --> 00:05:57.652
Cool, okay, so headers.get

83
00:05:57.652 --> 00:06:03.566
await that authorization.

84
00:06:03.566 --> 00:06:05.741
Yeah, let me make sure I capitalize it.

85
00:06:05.741 --> 00:06:07.664
Cool, so we get the authHeader.

86
00:06:07.664 --> 00:06:15.716
f not authHeader, then what we
wanna do here is just do a 401.

87
00:06:15.716 --> 00:06:19.507
We could also redirect you, but if you're
hitting the API, there's no point of

88
00:06:19.507 --> 00:06:22.909
redirecting your API request,
you're not trying to go to our website,

89
00:06:22.909 --> 00:06:26.017
you're trying to hit our API,
so we'll just send back a 401.

90
00:06:26.017 --> 00:06:29.748
So I'll just copy that.

91
00:06:29.748 --> 00:06:32.560
Get out of here,
you didn't add your API key.

92
00:06:32.560 --> 00:06:38.252
Otherwise we can just say
NextResponse dot, what is it?

93
00:06:38.252 --> 00:06:41.267
Yeah, dot next, keep going.

94
00:06:41.267 --> 00:06:45.430
This is a common pattern in most
middleware implementations that there's

95
00:06:45.430 --> 00:06:48.015
like a next function so
you can continue to go.

96
00:06:48.015 --> 00:06:51.502
Cuz a lot of middleware implementation
has a stack of middleware where you might

97
00:06:51.502 --> 00:06:53.229
have more than one function that runs.

98
00:06:53.229 --> 00:06:57.655
So it's like, go to the next one in the
stack and then it just keeps going next,

99
00:06:57.655 --> 00:07:01.965
and you can think of the handler as
the last piece of middleware in the stack.

100
00:07:01.965 --> 00:07:07.816
So if it keeps going next,
eventually you'll hit the last one.

101
00:07:07.816 --> 00:07:12.655
&gt;&gt; Speaker 3 slow: So
is that next response?

102
00:07:12.655 --> 00:07:17.575
Could we think of that as some
sort of like, singleton or.

103
00:07:17.575 --> 00:07:18.472
&gt;&gt; Scott Moss: Yeah, yeah.

104
00:07:18.472 --> 00:07:19.763
&gt;&gt; Speaker 3 slow: Coming out of thin air.

105
00:07:19.763 --> 00:07:23.010
&gt;&gt; Scott Moss: Yeah, well,
I'm importing it here.

106
00:07:23.010 --> 00:07:24.822
&gt;&gt; Speaker 3 slow: Right.
&gt;&gt; Scott Moss: Yeah, cuz you're like,

107
00:07:24.822 --> 00:07:28.683
we're not instantiating it as a new
instance, it's just like a global.

108
00:07:28.683 --> 00:07:29.871
Yeah, you can think of that.

109
00:07:29.871 --> 00:07:34.814
I mean, I think they kept it that
way because you have response,

110
00:07:34.814 --> 00:07:36.199
which is global.

111
00:07:36.199 --> 00:07:39.075
This is built in.

112
00:07:39.075 --> 00:07:43.690
So they kind of just wanna be
on parity with that, I think,

113
00:07:43.690 --> 00:07:46.247
cuz you can make a new response.

114
00:07:50.830 --> 00:07:53.145
&gt;&gt; Scott Moss: And then from there
there's like methods on here.

115
00:07:53.145 --> 00:07:58.069
So I think they wanted to
elevate theirs to also be

116
00:07:58.069 --> 00:08:01.800
capitalized and whatnot, so yeah.

117
00:08:01.800 --> 00:08:05.549
&gt;&gt; Speaker 4: So yeah, you got headers,

118
00:08:05.549 --> 00:08:10.604
You can grab cookies, I assume too.

119
00:08:10.604 --> 00:08:12.835
&gt;&gt; Scott Moss: Yep.
&gt;&gt; Speaker 4: So it's all kind of

120
00:08:12.835 --> 00:08:18.183
operating within the context
of a single request.

121
00:08:18.183 --> 00:08:22.311
It's kinda like we were talking about
yesterday with server functions.

122
00:08:22.311 --> 00:08:26.880
&gt;&gt; Scott Moss: Yep, it's literally
the same thing that you just made, but

123
00:08:26.880 --> 00:08:30.922
think of this as we just made
the methods for get post.

124
00:08:30.922 --> 00:08:34.029
Okay, this is all the verbs.

125
00:08:34.029 --> 00:08:39.555
Every single request that'll come in,
no matter what the verb is, it's gonna

126
00:08:39.555 --> 00:08:44.599
come in here first, I mean, yeah,
I could return JSON here if I want it.

127
00:08:44.599 --> 00:08:50.825
You would never be able to use the API
because I'm only ever gonna return JSON.

128
00:08:50.825 --> 00:08:52.668
So, yeah, it works the same way as that.

129
00:08:52.668 --> 00:08:56.862
The standards for the web is basically,
they're trying to standardize how you do

130
00:08:56.862 --> 00:08:59.680
edge compute versus serverless,
it's all the same.

131
00:08:59.680 --> 00:09:05.432
Now it's all the same code because they
want you to be able to toggle environments

132
00:09:05.432 --> 00:09:11.028
without having to change your code,
which is almost there, maybe not there.

133
00:09:11.028 --> 00:09:13.959
People are taking different approaches
because some things work in node and

134
00:09:13.959 --> 00:09:15.067
will never work in the edge.

135
00:09:15.067 --> 00:09:16.843
I'll talk more about later after this, but

136
00:09:16.843 --> 00:09:18.769
that's kind of where
the standards come from.

137
00:09:18.769 --> 00:09:21.695
It's like it'd be really cool
to be able to run a node but

138
00:09:21.695 --> 00:09:24.142
also run on the edge
without changing my code.

139
00:09:24.142 --> 00:09:28.773
That's not gonna happen,
but that's the dream, yes.

140
00:09:28.773 --> 00:09:33.523
&gt;&gt; Speaker 5: Is there any reason you
need to check the pathnamestartsWith,

141
00:09:33.523 --> 00:09:37.381
because would the matcher
already make that true?

142
00:09:37.381 --> 00:09:38.188
&gt;&gt; Scott Moss: That's a great question.

143
00:09:38.188 --> 00:09:39.314
I wonder if somebody's gonna ask that.

144
00:09:39.314 --> 00:09:44.691
So in this example, no, but you might
have a matcher that has different paths.

145
00:09:44.691 --> 00:09:47.421
In that case, you only wanna
run this logic on that path and

146
00:09:47.421 --> 00:09:50.335
then you have another if statement for
logic on another path.

147
00:09:50.335 --> 00:09:53.372
But yeah, in this case,
because we only have a matcher for this,

148
00:09:53.372 --> 00:09:54.818
we don't actually need this.

149
00:09:54.818 --> 00:09:59.217
But I'm gonna put it there anyway
just in case some person comes

150
00:09:59.217 --> 00:10:03.787
later down the road is like,
you know what, I want to add this to.

151
00:10:03.787 --> 00:10:07.015
I don't wanna check for
user on our pages, I wanna say anything.

152
00:10:07.015 --> 00:10:11.683
I moved everything that's
signed in into Dashboard, so

153
00:10:11.683 --> 00:10:15.000
I wanna check everything in Dashboard.

154
00:10:15.000 --> 00:10:18.870
I wanna do this and
then inside of here I wanna check for

155
00:10:18.870 --> 00:10:21.367
a JWT if it starts with Dashboard.

156
00:10:21.367 --> 00:10:24.952
So that way I can check to see if
there's a user without having to

157
00:10:24.952 --> 00:10:26.855
do the user request in the pages.

158
00:10:26.855 --> 00:10:31.340
So yeah, just future proofing, but

159
00:10:31.340 --> 00:10:35.107
no, there is no exact reason.

160
00:10:35.107 --> 00:10:37.747
&gt;&gt; Speaker 6 lATINO: So
the logic has to be on that same file or

161
00:10:37.747 --> 00:10:42.559
is there a way to spread the logic
into different files and just have it.

162
00:10:42.559 --> 00:10:43.342
&gt;&gt; Scott Moss: Yeah, great question.

163
00:10:43.342 --> 00:10:45.667
Yeah, you can spread the logic
into any files you want.

164
00:10:45.667 --> 00:10:48.918
You can import your stuff, bring it
in as long as it's edge compatible.

165
00:10:48.918 --> 00:10:52.377
So again, I wouldn't be able to import
file system and bring it in here,

166
00:10:52.377 --> 00:10:54.829
that would break,
that doesn't work on the edge.

167
00:10:54.829 --> 00:10:58.916
There's a lot of stuff that just works in
node that does not work on the edge, but

168
00:10:58.916 --> 00:11:01.234
yeah, as long as it works on the edge,
yeah,

169
00:11:01.234 --> 00:11:03.257
you can bring it in here from anywhere.

170
00:11:03.257 --> 00:11:09.343
Let's try to run this again.

171
00:11:09.343 --> 00:11:13.944
I still got the same thing cuz maybe I

172
00:11:13.944 --> 00:11:18.708
have authorization in here I think.

173
00:11:18.708 --> 00:11:21.493
I had an authorization header in there,
so try that again.

174
00:11:21.493 --> 00:11:25.823
There we go 401 as soon as I
add in authorization header,

175
00:11:25.823 --> 00:11:30.241
as you saw, we're not really
checking the value right now,

176
00:11:30.241 --> 00:11:34.411
we're just checking to see
if it's in there, it works.

177
00:11:34.411 --> 00:11:39.434
&gt;&gt; Speaker 3 slow: Just observation,
it's interesting to me

178
00:11:39.434 --> 00:11:44.593
that you're returning NextResponse JSON,

179
00:11:44.593 --> 00:11:52.206
then the convention is that
the status is in that JSON object.

180
00:11:52.206 --> 00:12:00.493
So okay, that first parameter is
the actual JSON that you wanna return.

181
00:12:00.493 --> 00:12:01.075
&gt;&gt; Scott Moss: Yep.

182
00:12:01.075 --> 00:12:05.645
&gt;&gt; Speaker 3 slow: And then the second
parameter is additional stuff

183
00:12:05.645 --> 00:12:07.609
related to the JSON.

184
00:12:07.609 --> 00:12:08.982
&gt;&gt; Scott Moss: Yep, exactly, yeah.

185
00:12:08.982 --> 00:12:11.446
This is the data that I want to return,

186
00:12:11.446 --> 00:12:14.835
this is the configuration for
the response, yeah.

187
00:12:14.835 --> 00:12:18.993
In the older versions of Next JS with
the response object used to be able to do

188
00:12:18.993 --> 00:12:22.694
something like status, or
status text, or something like that.

189
00:12:22.694 --> 00:12:25.706
And these still exist, but
these aren't methods anymore,

190
00:12:25.706 --> 00:12:28.789
these are properties that you can get,
so these are getters.

191
00:12:28.789 --> 00:12:31.369
So that can be confusing sometimes.

192
00:12:34.812 --> 00:12:40.517
But as you saw when I did that,
here we go, the MDM reference.

193
00:12:40.517 --> 00:12:45.112
It's just pointing to the official
response object that's

194
00:12:45.112 --> 00:12:49.266
widely available in every browser and
every runtime.

195
00:12:49.266 --> 00:12:52.822
So again, Next JS is just using this,
it's not doing anything else.

196
00:12:57.078 --> 00:12:59.662
Cool, any other questions on middleware?

197
00:12:59.662 --> 00:13:02.843
&gt;&gt; Speaker 7: I can see potentially,
requests coming from the clients have

198
00:13:02.843 --> 00:13:06.514
a middleware that as your authorization
header to all your requests and

199
00:13:06.514 --> 00:13:08.854
then requests that
are coming to these URLs.

200
00:13:08.854 --> 00:13:11.615
You check if the authorization
header is present and if it's valid.

201
00:13:11.615 --> 00:13:13.215
&gt;&gt; Scott Moss: Yep, a hundred percent.

202
00:13:13.215 --> 00:13:18.190
Yep, I mean there really isn't anything
you can't do in the middleware, honestly,

203
00:13:18.190 --> 00:13:19.635
that's the power of it.

204
00:13:19.635 --> 00:13:22.791
You can literally run
compute on the edge and

205
00:13:22.791 --> 00:13:28.346
it's like you're only limited by
the resources in which this has access to.

206
00:13:28.346 --> 00:13:31.481
So again, as long as you use
like a serverless storage,

207
00:13:31.481 --> 00:13:34.164
you can't use the file
system stuff like that.

208
00:13:34.164 --> 00:13:36.380
You can do some pretty crazy stuff.

209
00:13:36.380 --> 00:13:40.665
You can build a whole app, I mean,
I could return JSX in here if I wanted to.

210
00:13:40.665 --> 00:13:46.020
Don't do it in here, but you could,
in fact, you could go to

211
00:13:46.020 --> 00:13:52.112
any one of these pages and you can
change this to a different runtime.

212
00:13:52.112 --> 00:13:58.726
I forgot if it's actual called runtime,
or not, or something like that.

213
00:13:58.726 --> 00:14:03.104
There's a flag that you can return that
will put this in a different environment,

214
00:14:03.104 --> 00:14:05.777
which is the same with just
returning JSX in here.

215
00:14:05.777 --> 00:14:14.204
So yeah, some frameworks are just
an abstraction around this.

216
00:14:14.204 --> 00:14:18.100
Cloudflare workers is literally this,
but as a product.

