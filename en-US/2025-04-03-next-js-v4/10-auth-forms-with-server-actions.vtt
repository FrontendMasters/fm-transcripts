WEBVTT

1
00:00:00.320 --> 00:00:03.566
&gt;&gt; Scott Moss: We are going to be doing
configuring the Auth Forms, okay?

2
00:00:03.566 --> 00:00:08.545
So instead of submitting a form
with the on submit handler,

3
00:00:08.545 --> 00:00:14.533
which is probably what you're used to,
and making a request to an API.

4
00:00:14.533 --> 00:00:19.932
We're instead gonna use the new use
action state hook from React and

5
00:00:19.932 --> 00:00:26.720
add a form action to the form that uses
our server functions that we just made.

6
00:00:26.720 --> 00:00:30.312
So if you've never seen this hook before,
this is cool.

7
00:00:30.312 --> 00:00:32.080
This is gonna be your first time using it.

8
00:00:32.080 --> 00:00:33.920
It's pretty great.

9
00:00:33.920 --> 00:00:35.404
The use action state,

10
00:00:35.404 --> 00:00:40.563
essentially what it does is back in the
day when people wanted to submit forms,

11
00:00:40.563 --> 00:00:45.429
before Jquery came along, before
Ajax came along, before Google Maps.

12
00:00:45.429 --> 00:00:48.507
You would have a form action,
it'd be like,

13
00:00:48.507 --> 00:00:52.320
what is the name of the action
you want this form to do?

14
00:00:52.320 --> 00:00:55.840
And that action correlated
to something on the server.

15
00:00:55.840 --> 00:00:58.985
This is very common in PHP days and
things like that.

16
00:00:58.985 --> 00:01:02.508
Even in JavaScript,
they're just using that.

17
00:01:02.508 --> 00:01:06.964
But the action itself is
going to be some unique.

18
00:01:06.964 --> 00:01:11.225
It's obfuscated from you, but it's gonna
be some unique identifier that maps to

19
00:01:11.225 --> 00:01:13.150
the server action that you created.

20
00:01:13.150 --> 00:01:17.258
Remember when I said when you create the
server actions, it just creates routes for

21
00:01:17.258 --> 00:01:20.840
you, but the paths of those routes
are like generated and obfuscated and

22
00:01:20.840 --> 00:01:21.853
random and unique.

23
00:01:21.853 --> 00:01:25.222
Okay, the action that we pass into
the form is gonna be a handler for

24
00:01:25.222 --> 00:01:27.040
that value that you did not create.

25
00:01:27.040 --> 00:01:31.056
So whatever the value, just like CSS
modules, you didn't create that end

26
00:01:31.056 --> 00:01:34.384
part on the CSS module that was unique,
the build system did.

27
00:01:34.384 --> 00:01:36.968
Well, next JS is gonna do the same
thing for all your server actions.

28
00:01:36.968 --> 00:01:39.040
It's gonna create a unique path for them.

29
00:01:39.040 --> 00:01:42.456
We're gonna reference that path in
our form action with a variable, and

30
00:01:42.456 --> 00:01:45.034
that variable is gonna be
the handler to our function.

31
00:01:45.034 --> 00:01:49.307
So when you import a server action into
a client component, what you're really

32
00:01:49.307 --> 00:01:53.390
importing is just like the handler for
that function, you're not actually

33
00:01:53.390 --> 00:01:57.769
importing the code, you're just saying
this is the handler for that function.

34
00:01:57.769 --> 00:02:01.562
So when it gets called make a network
request to that function and

35
00:02:01.562 --> 00:02:03.328
then give me the result back.

36
00:02:03.328 --> 00:02:04.480
That's what it's actually doing.

37
00:02:04.480 --> 00:02:07.780
It's not actually importing the code.

38
00:02:07.780 --> 00:02:09.308
Does that make sense?

39
00:02:09.308 --> 00:02:12.848
Okay, they're using the action,

40
00:02:12.848 --> 00:02:17.214
prop on a form,
which is super OG to do that.

41
00:02:17.214 --> 00:02:22.952
So we aren't doing any controlled inputs.

42
00:02:22.952 --> 00:02:27.702
We're not keeping track of the loading
state coz use action state does

43
00:02:27.702 --> 00:02:28.595
that for us.

44
00:02:28.595 --> 00:02:32.571
It gives us the status of whether or

45
00:02:32.571 --> 00:02:36.426
not an action is still running.

46
00:02:36.426 --> 00:02:39.324
It gives us the state of the input and

47
00:02:39.324 --> 00:02:45.028
it allows us to describe what we
wanna do once the form is submitted.

48
00:02:45.028 --> 00:02:46.951
So it gives us all those things
that we would have made anyway.

49
00:02:46.951 --> 00:02:48.492
We just get them for free.

50
00:02:48.492 --> 00:02:50.860
So it's kinda cool.

51
00:02:50.860 --> 00:02:52.196
So let's go make signup.

52
00:02:52.196 --> 00:02:56.780
So sign up.

53
00:02:56.780 --> 00:02:58.636
We already have some code here.

54
00:02:58.636 --> 00:03:01.388
First thing you wanna do is
put a use client at the top.

55
00:03:01.388 --> 00:03:03.540
Why do we need to put a use client here?

56
00:03:03.540 --> 00:03:06.130
You have to put a use client
if you're gonna use hooks.

57
00:03:07.910 --> 00:03:11.623
If you try to use any hook on a component
that does not have use client,

58
00:03:11.623 --> 00:03:13.510
you will get an error.

59
00:03:13.510 --> 00:03:18.310
Why, because hooks run in the browser.

60
00:03:18.310 --> 00:03:21.897
To tell React that you want
this component to be like,

61
00:03:21.897 --> 00:03:26.770
think of use client as like use client
is basically saying, I want this.

62
00:03:26.770 --> 00:03:30.320
This component is gonna
have some interactivity.

63
00:03:30.320 --> 00:03:34.896
It's gonna respond to some
interaction on the Browser.

64
00:03:34.896 --> 00:03:37.712
I need JavaScript to run on the browser.

65
00:03:37.712 --> 00:03:38.704
You gotta put use client.

66
00:03:38.704 --> 00:03:39.880
This is a form.

67
00:03:39.880 --> 00:03:42.848
So there's gonna be some type of
JavaScript that's running on the browser.

68
00:03:42.848 --> 00:03:46.150
In this case, it could be validation,
it could be anything.

69
00:03:46.150 --> 00:03:49.255
So if you need to do some
type of browser calculation,

70
00:03:49.255 --> 00:03:53.671
some type of browser interaction handling,
you're gonna do a use client.

71
00:03:53.671 --> 00:03:56.846
You need to do anything where code
is running in the browser and

72
00:03:56.846 --> 00:04:00.449
it's not just presentational like
the landing page that we created,

73
00:04:00.449 --> 00:04:03.786
where it's just a landing page and
it's not doing anything.

74
00:04:03.786 --> 00:04:05.626
You're probably going to use client.

75
00:04:05.626 --> 00:04:10.226
And unfortunately if you go use
a component library that uses CSS and

76
00:04:10.226 --> 00:04:14.030
JavaScript, you just gotta
do use client everywhere.

77
00:04:15.090 --> 00:04:18.590
A lot of them have fixed it, but you might
have to literally take a component that

78
00:04:18.590 --> 00:04:21.933
you want, go make another component
that wraps it, just to put use client at

79
00:04:21.933 --> 00:04:25.550
the top and then use that component for
every component that you wanna use.

80
00:04:25.550 --> 00:04:27.542
This is why I don't do CSS and JavaScript.

81
00:04:27.542 --> 00:04:32.462
A lot of them have fixed it, but
still I don't wanna risk it.

82
00:04:32.462 --> 00:04:36.910
So use client is the React
that you've come to know.

83
00:04:36.910 --> 00:04:42.750
Not putting use client means it's
gonna be a server component.

84
00:04:42.750 --> 00:04:44.090
If that makes sense, okay?

85
00:04:45.710 --> 00:04:49.374
We can interchange how we use them.

86
00:04:49.374 --> 00:04:51.362
I'm not covering too much
about that because again,

87
00:04:51.362 --> 00:04:52.742
it's not really Next JS specific.

88
00:04:52.742 --> 00:04:53.945
It's mostly React specific.

89
00:04:53.945 --> 00:04:57.339
So you can check out Brian's course
on that, but you can pull in

90
00:04:57.339 --> 00:05:02.161
client components into server components
and that's typically actually the pattern.

91
00:05:02.161 --> 00:05:05.260
I think next JS calls it,
what do they call it?

92
00:05:05.260 --> 00:05:07.410
The donut pattern or something like that.

93
00:05:07.410 --> 00:05:10.110
Where it's the server
components on the outside and

94
00:05:10.110 --> 00:05:14.178
then the donut hole is where you would
stuff client components or something.

95
00:05:14.178 --> 00:05:15.810
I don't know,
I think that's what they call it.

96
00:05:15.810 --> 00:05:17.650
I don't call it that.

97
00:05:17.650 --> 00:05:21.650
I like to fetch my data on the server, so
server components make sense, you'll see.

98
00:05:21.650 --> 00:05:24.903
When we do data fetching, then I like
to pass that data to the clients and

99
00:05:24.903 --> 00:05:27.180
those clients can do
whatever they want with it.

100
00:05:27.180 --> 00:05:32.436
They could use React query and
initiate a client request.

101
00:05:32.436 --> 00:05:34.700
Which by the way, here's a tip.

102
00:05:34.700 --> 00:05:38.612
React query isn't just for HTTP requests.

103
00:05:38.612 --> 00:05:41.844
You can use server actions in React Query.

104
00:05:41.844 --> 00:05:45.300
React query takes any async
function as a fetcher.

105
00:05:45.300 --> 00:05:47.770
So if I ever use React query, which I do,

106
00:05:47.770 --> 00:05:50.508
sometimes I just give
it a server function.

107
00:05:50.508 --> 00:05:53.573
I don't actually make a fetcher or
anything like that,

108
00:05:53.573 --> 00:05:55.420
just give it a server function.

109
00:05:55.420 --> 00:05:56.580
So it's really great.

