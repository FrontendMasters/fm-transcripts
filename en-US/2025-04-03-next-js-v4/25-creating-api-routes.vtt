WEBVTT

1
00:00:00.000 --> 00:00:05.011
&gt;&gt; Scott Moss: All right, so
let's check out making our own routes.

2
00:00:05.011 --> 00:00:10.274
What we're gonna do is we're gonna
make a route for a developer API.

3
00:00:10.274 --> 00:00:15.097
We want people to develop and,
or actually, before I do that,

4
00:00:15.097 --> 00:00:21.196
I think someone asked me how to develop
an API that was OpenAPI spec compatible.

5
00:00:21.196 --> 00:00:23.549
I think somebody asked me that.

6
00:00:23.549 --> 00:00:25.965
I added some notes on that.

7
00:00:25.965 --> 00:00:32.191
And the short answer is there is no
official way to do it in Next.js.

8
00:00:32.191 --> 00:00:36.177
There's been tons of people in
the community have made it possible.

9
00:00:36.177 --> 00:00:40.606
After researching and trying a bunch of
stuff, I found the best way to do it was

10
00:00:40.606 --> 00:00:44.424
actually to use this package right
here called Next SwaggerDoc and

11
00:00:44.424 --> 00:00:45.531
Swagger UI React.

12
00:00:45.531 --> 00:00:46.757
It essentially looks at,

13
00:00:46.757 --> 00:00:50.280
I guess it's very similar to how you
would do it in Python with a doc string.

14
00:00:50.280 --> 00:00:55.071
It looks at your comments and
it can go from that and create the spec,

15
00:00:55.071 --> 00:00:57.692
and also create the UI for it as well.

16
00:00:57.692 --> 00:01:04.079
So, I left the link here if
anybody wants to check that out.

17
00:01:04.079 --> 00:01:06.717
But this is the best that
I could find to do this.

18
00:01:06.717 --> 00:01:08.185
There was no official way to do it.

19
00:01:08.185 --> 00:01:09.833
Other than that, let's make our route.

20
00:01:09.833 --> 00:01:12.708
So we're gonna create some routes for
our developer API.

21
00:01:12.708 --> 00:01:16.553
We want people to be able
to get all the issues,

22
00:01:16.553 --> 00:01:20.012
create an issue, and then get one issue.

23
00:01:20.012 --> 00:01:21.536
So we're gonna make routes for that.

24
00:01:26.205 --> 00:01:30.743
So I'm gonna go here,
I'm gonna delete this user one,

25
00:01:30.743 --> 00:01:35.292
get out of here, and
make a new folder for issue.

26
00:01:35.292 --> 00:01:39.545
And sibling to that,
I'll make a new folder.

27
00:01:39.545 --> 00:01:41.228
Wait, no, that's the only one I need.

28
00:01:41.228 --> 00:01:45.135
So issue and then inside of issue
I'll make a new folder for id,

29
00:01:45.135 --> 00:01:46.992
since we wanna get one issue.

30
00:01:46.992 --> 00:01:51.685
And then inside of that
I'll make a route.ts.

31
00:01:51.685 --> 00:01:57.341
Right above that I'll make
a new file called route.ts.

32
00:02:01.147 --> 00:02:05.974
So for the ones without the ID,
if you just follow rest,

33
00:02:05.974 --> 00:02:11.742
this would allow me to get all
the issues and then create one issue.

34
00:02:11.742 --> 00:02:16.355
If I followed rest and
the ID one would let me delete one issue,

35
00:02:16.355 --> 00:02:18.944
update one issue, get one issue.

36
00:02:18.944 --> 00:02:20.061
So let's do this.

37
00:02:20.061 --> 00:02:21.371
So let's get all issues.

38
00:02:21.371 --> 00:02:25.958
So I'll say, export const

39
00:02:25.958 --> 00:02:33.750
GET And then we have the one for post.

40
00:02:33.750 --> 00:02:34.586
We'll do that in a minute.

41
00:02:34.586 --> 00:02:37.228
So we wanna get all the issues,
should be pretty simple.

42
00:02:37.228 --> 00:02:41.858
We're not gonna make it production-ready
and do all the things that we need to do

43
00:02:41.858 --> 00:02:47.271
that you would typically do for
Production app.

44
00:02:55.709 --> 00:02:58.786
X request, there we go.

45
00:02:58.786 --> 00:03:02.320
So it should be pretty simple,
because again, we're on the back end, so

46
00:03:02.320 --> 00:03:05.640
we can do the same stuff that we've
been doing on the server actions.

47
00:03:05.640 --> 00:03:08.463
And this one's pretty simple,
we just wanna just grab all the issues and

48
00:03:08.463 --> 00:03:09.119
send them back.

49
00:03:09.119 --> 00:03:10.396
So, let's do that.

50
00:03:10.396 --> 00:03:11.991
And then, in the case where we fail,

51
00:03:11.991 --> 00:03:14.107
we can change the status
code to something else.

52
00:03:14.107 --> 00:03:15.283
So let's do that.

53
00:03:20.964 --> 00:03:29.142
So I'll say, issues equals
await db.query.issues.findmany,

54
00:03:29.142 --> 00:03:34.642
let's just grab every
issue in the database.

55
00:03:34.642 --> 00:03:40.790
We'll do that, and
then we'll return NextResponse.json.

56
00:03:40.790 --> 00:03:44.640
I always like to return an object
with a data property on it so

57
00:03:44.640 --> 00:03:47.567
it's consistent, and just return issues.

58
00:03:49.688 --> 00:03:51.578
Otherwise, let's log this.

59
00:03:54.255 --> 00:03:59.353
And we'll return NextResponse.,
you can return JSON here if you want.

60
00:03:59.353 --> 00:04:03.837
If you wanna send back like a message,
like send back error if there's an error.

61
00:04:03.837 --> 00:04:06.472
And I'll say, nah.

62
00:04:06.472 --> 00:04:12.057
And then, you can change the status,
or actually, I think it's here now.

63
00:04:12.057 --> 00:04:15.007
Yeah, you change the status to
whatever you want in this case.

64
00:04:15.007 --> 00:04:17.557
You couldn't get this, it errored.

65
00:04:17.557 --> 00:04:18.593
That's on us.

66
00:04:18.593 --> 00:04:20.334
There's no reason why
you couldn't get this.

67
00:04:20.334 --> 00:04:21.655
So if it broke, that's our problem.

68
00:04:21.655 --> 00:04:22.546
So, 500.

69
00:04:28.764 --> 00:04:29.573
Cool, we got that.

70
00:04:29.573 --> 00:04:30.619
Let's test this out.

71
00:04:30.619 --> 00:04:35.574
So we're gonna go here, I say, issues,

72
00:04:35.574 --> 00:04:41.122
change this to get, and send this request.

73
00:04:41.122 --> 00:04:42.023
It's issue.

74
00:04:44.248 --> 00:04:47.987
Method, I swear I changed that to git.

75
00:04:47.987 --> 00:04:49.193
There we go.

76
00:04:49.193 --> 00:04:50.976
There we go, there's all my issues.

77
00:04:59.257 --> 00:05:01.707
Cool, do the same thing for
creating an issue.

78
00:05:07.832 --> 00:05:10.512
So for this one we do wanna get the body.

79
00:05:14.786 --> 00:05:21.081
I'll say, newIssue = awaits

80
00:05:21.081 --> 00:05:28.350
db.insert(issues).values.

81
00:05:28.350 --> 00:05:31.123
I want to insert await.

82
00:05:31.123 --> 00:05:34.128
I gotta import issues up here.

83
00:05:39.095 --> 00:05:41.999
What do you mean?

84
00:05:41.999 --> 00:05:46.111
No, that comes from schemas.

85
00:05:46.111 --> 00:05:46.938
Yeah, schemas.

86
00:05:46.938 --> 00:05:52.063
Okay, so then I got to await rec.json.

87
00:05:52.063 --> 00:05:53.165
That's gonna be the value.

88
00:05:53.165 --> 00:05:54.706
Whatever object they pass up,

89
00:05:54.706 --> 00:05:57.626
that's what we'll put in here
to insert to the database.

90
00:05:57.626 --> 00:06:00.148
And, actually let's try catch this.

91
00:06:05.433 --> 00:06:06.810
Cool, got a new issue.

92
00:06:06.810 --> 00:06:11.209
And then I'll just return that

93
00:06:11.209 --> 00:06:16.533
NextResponse Data, and for

94
00:06:16.533 --> 00:06:24.489
this one, Drizzle's always
gonna return an array here.

95
00:06:24.489 --> 00:06:30.540
So I just wanna return, I'll just say new.

96
00:06:32.832 --> 00:06:33.725
I'll just do this.

97
00:06:41.483 --> 00:06:45.236
And it's freaking out, it's like,
hey, that might not be there.

98
00:06:45.236 --> 00:06:47.016
No, I gotta do .return here, actually.

99
00:06:47.016 --> 00:06:48.069
There we go.

100
00:06:48.069 --> 00:06:49.248
There it is.

101
00:06:51.276 --> 00:06:56.156
And then if it's an error,
same thing, console.error this.

102
00:06:57.379 --> 00:07:01.016
This case,
it actually might not be a firewriter,

103
00:07:01.016 --> 00:07:04.074
cuz they might have set
up the wrong thing.

104
00:07:04.074 --> 00:07:05.340
This is where you wanna validate.

105
00:07:05.340 --> 00:07:06.754
This is why I was like,

106
00:07:06.754 --> 00:07:11.163
hey, I'm gonna validate the form
on the server action, the inputs.

107
00:07:11.163 --> 00:07:14.831
Because if there's an API route,
I'd validate that here.

108
00:07:14.831 --> 00:07:15.688
I'll do the same thing.

109
00:07:15.688 --> 00:07:20.280
I set up schemas and validate
stuff before I touch the database.

110
00:07:23.744 --> 00:07:25.721
Okay, let's try to create an issue.

111
00:07:25.721 --> 00:07:29.139
Let me just look at the schema right quick
to see what an issue needs before I do it.

112
00:07:29.139 --> 00:07:33.767
So issue needs a title, and that's it.

113
00:07:33.767 --> 00:07:37.914
Everything else is either not needed or
already has a default.

114
00:07:37.914 --> 00:07:39.295
So it just needs a title.

115
00:07:39.295 --> 00:07:42.819
So we can just go make
an issue with the title.

116
00:07:42.819 --> 00:07:44.738
So let's do that.

117
00:07:44.738 --> 00:07:48.956
So I'll change this to post.

118
00:07:48.956 --> 00:07:51.591
I'll go to my body, put a title here.

119
00:07:53.766 --> 00:07:56.180
Normal mode.

120
00:08:00.183 --> 00:08:02.220
And I'll send this up.

121
00:08:02.220 --> 00:08:06.188
We got a nah,
let's see what the error was.

122
00:08:08.829 --> 00:08:13.382
Felling roll contains [INAUDIBLE].

123
00:08:14.891 --> 00:08:17.883
Need a user id.

124
00:08:17.883 --> 00:08:19.738
Let's get the current user.

125
00:08:19.738 --> 00:08:22.650
Yeah, we can just use,
this is where the flexibility comes in.

126
00:08:22.650 --> 00:08:27.479
I can just say, user = await get

127
00:08:30.048 --> 00:08:32.382
cetCurrentUser.

128
00:08:32.382 --> 00:08:33.581
I can just use that function.

129
00:08:33.581 --> 00:08:34.675
It works on the server.

130
00:08:40.335 --> 00:08:43.125
And then issues, need a map over these.

131
00:08:43.125 --> 00:08:48.135
Not these, this right here.

132
00:08:48.135 --> 00:08:55.144
This needs a, Let's get this,

133
00:08:55.144 --> 00:08:59.385
newIssueData equals that.

134
00:08:59.385 --> 00:09:05.984
This is userId, I'm guessing,
that's what it's gonna be called.

135
00:09:05.984 --> 00:09:08.485
And then, newIssueData.

136
00:09:08.485 --> 00:09:13.699
What we wanna do now is we were making
the post request to create an issue.

137
00:09:13.699 --> 00:09:17.143
We need to make sure that
the issue has a user ID on it.

138
00:09:17.143 --> 00:09:22.897
Because I'm using a HTTP client
that doesn't have a session cookie,

139
00:09:22.897 --> 00:09:29.251
I'd have to add the JSON web token here
in the cookie, which I don't want to.

140
00:09:29.251 --> 00:09:35.618
Instead, I'm just gonna have
this thing sent up, the user ID.

141
00:09:35.618 --> 00:09:39.905
So what I can do is,
I got my Drizzle Studio working.

142
00:09:39.905 --> 00:09:44.043
I had it running on another tab over here,
so I had to stop that.

143
00:09:44.043 --> 00:09:44.886
Now I'm here.

144
00:09:44.886 --> 00:09:51.099
And now it works, so I can go here to
Drizzle Studio, it'll show me my database.

145
00:09:51.099 --> 00:09:58.055
I'm gonna grab this user's ID right here,
gonna go back into my project.

146
00:09:58.055 --> 00:10:02.534
Gonna make a post request to

147
00:10:02.534 --> 00:10:08.584
localhost3000/API/issue.

148
00:10:08.584 --> 00:10:14.941
I'm going to add a body of JSON,

149
00:10:14.941 --> 00:10:21.540
give it a title of new issue here.

150
00:10:21.540 --> 00:10:28.412
Give it a user ID of that user ID,
and hit Send.

151
00:10:28.412 --> 00:10:32.412
And there we go,
created a new issue for this user.

152
00:10:32.412 --> 00:10:35.063
And then the last one we
wanna do is get one issue.

153
00:10:35.063 --> 00:10:41.531
So I'm gonna go into
my/API/issue/id route.ts.

154
00:10:41.531 --> 00:10:49.971
I'm going to export a GET
request to get one issue here.

155
00:10:49.971 --> 00:10:56.665
I'm going to get the request, and
then I'm gonna get the params.

156
00:10:56.665 --> 00:10:57.925
I'll go ahead and type check these.

157
00:10:57.925 --> 00:11:01.829
I know I got got those
folks that really like it.

158
00:11:01.829 --> 00:11:05.647
So, Next Request.

159
00:11:05.647 --> 00:11:11.181
And then for params, or actually,

160
00:11:11.181 --> 00:11:20.364
it'll be like Something like that.

161
00:11:20.364 --> 00:11:25.254
Okay, so,
I believe we still have to await this.

162
00:11:25.254 --> 00:11:29.475
So I'll do, wait params,

163
00:11:29.475 --> 00:11:34.612
get the id, and then issue will be

164
00:11:34.612 --> 00:11:41.778
wait db.query.issues.findFirst where,

165
00:11:44.704 --> 00:11:48.532
Issues.id is the id, but

166
00:11:48.532 --> 00:11:54.449
I think I need to parse int that id maybe.

167
00:11:58.616 --> 00:12:00.416
And I'm just gonna try catch this.

168
00:12:09.294 --> 00:12:14.728
Cool, and if we don't find it,
Where does return.

169
00:12:19.178 --> 00:12:24.341
JSON here, I'll just put an error here.

170
00:12:27.996 --> 00:12:32.475
And status, I'll just put 404, whatever.

171
00:12:32.475 --> 00:12:34.124
If we do find it, I'll just return it.

172
00:12:44.046 --> 00:12:44.847
Cool.

173
00:12:48.100 --> 00:12:49.338
So we can try this.

174
00:12:49.338 --> 00:12:52.173
Let's grab an issue.

175
00:12:52.173 --> 00:12:57.316
So if I go here, I grab, this issue is 11.

176
00:12:57.316 --> 00:13:02.951
So I can go here, I'll make a,
we can go back to this one.

177
00:13:02.951 --> 00:13:10.341
Get request to/API/issues/that ID.

178
00:13:10.341 --> 00:13:14.427
I don't need anything in a body to GET
requests, so it shouldn't send it anyway.

179
00:13:14.427 --> 00:13:15.742
There we go, get the issue back.

180
00:13:15.742 --> 00:13:18.658
It's pretty simple.

181
00:13:18.658 --> 00:13:23.293
Because it's using standard web
stuff when it comes to request and

182
00:13:23.293 --> 00:13:27.525
response, everything's pretty
much compatible with it.

183
00:13:27.525 --> 00:13:29.460
So if you wanna add a GraphQL server,

184
00:13:29.460 --> 00:13:33.271
every GraphQL server from Apollo to
GraphQL Yoga to, pick your flavor,

185
00:13:33.271 --> 00:13:36.030
works with this because
they all support the specs.

186
00:13:36.030 --> 00:13:37.991
So you can pretty much do anything.

187
00:13:37.991 --> 00:13:41.093
There's frameworks that people have
built on top of this to make it feel and

188
00:13:41.093 --> 00:13:43.665
look more like Express.js,
if that's something you want.

189
00:13:43.665 --> 00:13:47.561
But, yeah, I mean,
TRPCS is a good use case.

190
00:13:47.561 --> 00:13:52.009
People use this for, it's like, it's so
easy to use this, in my opinion.

191
00:13:52.009 --> 00:13:56.258
And really, I didn't import anything from
Next.js other than these two things,

192
00:13:56.258 --> 00:13:58.820
which are really just like
wrappers around this.

193
00:13:58.820 --> 00:14:04.656
I don't have to use these, I could use
just the native response if I wanted.

194
00:14:04.656 --> 00:14:07.050
It's just a lot more work to Get.json.

195
00:14:07.050 --> 00:14:08.494
There's just a wrapper around that.

196
00:14:08.494 --> 00:14:11.063
Yeah, there really isn't
that much more to it.

197
00:14:11.063 --> 00:14:12.452
Like I said,
there are some special things.

198
00:14:12.452 --> 00:14:16.232
But the reason I didn't show that
is because it depends on whether or

199
00:14:16.232 --> 00:14:18.035
not you deploy to Vercel or not.

200
00:14:18.035 --> 00:14:21.329
So I was like, eh, I don't wanna show
stuff that's only specific to Vercel and

201
00:14:21.329 --> 00:14:23.409
doesn't work if you deploy
this somewhere else.

202
00:14:23.409 --> 00:14:25.018
But there are some other
things that you can do.

203
00:14:25.018 --> 00:14:30.171
Like I mentioned, being able to,
a very common use case is if you ever had

204
00:14:30.171 --> 00:14:35.748
to make a handler for a webhook is, when
a service hits your route as a webhook,

205
00:14:35.748 --> 00:14:38.641
like, let's say Stripe hits your API.

206
00:14:38.641 --> 00:14:42.399
You want to immediately
respond back as quickly as

207
00:14:42.399 --> 00:14:46.253
possible to acknowledge
that you got the request.

208
00:14:46.253 --> 00:14:48.824
But there's probably some work you
need to do when that comes in.

209
00:14:48.824 --> 00:14:53.340
So, Stripe hits your API and it's like,
hey, this person's charge failed.

210
00:14:53.340 --> 00:14:55.077
Okay, there's some work
that you need to do.

211
00:14:55.077 --> 00:14:59.416
You don't want Stripe waiting on you to do
that work, cuz what if that work fails?

212
00:14:59.416 --> 00:15:01.244
Do you send Stripe back an error?

213
00:15:01.244 --> 00:15:05.649
Well, if Stripe got that error, to Stripe,
that means you didn't get the webhook.

214
00:15:05.649 --> 00:15:07.067
So they're gonna send it again.

215
00:15:07.067 --> 00:15:08.156
That's not actually the case.

216
00:15:08.156 --> 00:15:12.252
So when you receive a webhook, you want
to respond back with a 200 as quickly as

217
00:15:12.252 --> 00:15:16.004
possible to acknowledge that you got it,
and then you wanna do your work.

218
00:15:16.004 --> 00:15:20.169
Well, that's impossible in serverless,
because as soon as you respond,

219
00:15:20.169 --> 00:15:21.611
you stop executing code.

220
00:15:21.611 --> 00:15:23.680
You can't do anything after this.

221
00:15:23.680 --> 00:15:27.015
So if I respond back to Stripe,
how do I do something?

222
00:15:27.015 --> 00:15:30.162
So typically what you would do
is you would use a background,

223
00:15:30.162 --> 00:15:33.925
you have another job queue,
a queuing system that's event driven, and

224
00:15:33.925 --> 00:15:36.475
then you queue the job up and
you go do something.

225
00:15:36.475 --> 00:15:37.481
That's a way.

226
00:15:37.481 --> 00:15:40.099
The other way you can do it is Vercel or

227
00:15:40.099 --> 00:15:45.339
Next.js through hosting on Vercel
allows you to respond immediately and

228
00:15:45.339 --> 00:15:50.850
then wait until all your work is done
before the service function shuts down.

229
00:15:50.850 --> 00:15:54.968
So even though you responded immediately,
the function continues to run the code

230
00:15:54.968 --> 00:15:58.500
that you want it to wait for
even though you already ended the request.

231
00:15:58.500 --> 00:16:00.330
So that's a really good use case.

232
00:16:00.330 --> 00:16:07.828
And then as far as databases and
stuff like that, It's the same.

233
00:16:07.828 --> 00:16:13.506
Well, I guess it is, I do want to mention,
when it comes to serverless,

234
00:16:13.506 --> 00:16:19.574
that for a serverless environment,
you have to have a serverless database.

235
00:16:19.574 --> 00:16:23.155
You can't use a database
that isn't HTTP based.

236
00:16:23.155 --> 00:16:26.301
I mean, you can, but you'll have problems.

237
00:16:26.301 --> 00:16:29.992
Because most databases have long
lived connections with pooling.

238
00:16:29.992 --> 00:16:32.944
But the way serverless works
is that it's spinning up a vm,

239
00:16:32.944 --> 00:16:37.093
running your function and then shutting
it down at its most naive implementation.

240
00:16:37.093 --> 00:16:41.735
So you aren't on a traditional
long-lived server that's pooling

241
00:16:41.735 --> 00:16:43.939
connections across requests.

242
00:16:43.939 --> 00:16:45.910
So if that database even works,
you will for

243
00:16:45.910 --> 00:16:47.838
sure run into pooling connection issues.

244
00:16:47.838 --> 00:16:51.387
Most databases have pooling limits
in which they can only connect so

245
00:16:51.387 --> 00:16:54.138
many connections before
they don't do it anymore.

246
00:16:54.138 --> 00:16:56.586
You'll have memory issues,
you'll have cold start issues.

247
00:16:56.586 --> 00:17:00.900
So typically,
you wanna use an HTTP-based database,

248
00:17:00.900 --> 00:17:05.135
AKA a serverless database,
for your serverless API.

249
00:17:05.135 --> 00:17:09.420
Neon is a serverless database, so
it kinda works perfectly for Next.js.

250
00:17:09.420 --> 00:17:13.325
And almost any modern database
today has some serverless offering.

251
00:17:13.325 --> 00:17:17.656
If you want Postgres, there's five, six
serverless Postgres databases out there.

252
00:17:17.656 --> 00:17:19.649
You want SQL, same thing.

253
00:17:19.649 --> 00:17:20.340
There's tons of them.

254
00:17:20.340 --> 00:17:25.961
So, just remember that you want to make
sure you have a serverless database,

255
00:17:25.961 --> 00:17:28.994
or I should say, HTTP-based database.

256
00:17:28.994 --> 00:17:32.365
Okay, this-
&gt;&gt; Speaker 2: I think of one question on

257
00:17:32.365 --> 00:17:33.028
API stuff.

258
00:17:33.028 --> 00:17:37.999
I'm assuming all the same conventions for
the router is the same of, you can create

259
00:17:37.999 --> 00:17:42.627
route groups and spread dynamic params and
everything in your directories.

260
00:17:42.627 --> 00:17:44.820
&gt;&gt; Scott Moss: I've never created
route groups with the API, but

261
00:17:44.820 --> 00:17:46.049
you can definitely spread.

262
00:17:46.049 --> 00:17:49.453
Yeah, route groups.

263
00:17:49.453 --> 00:17:50.153
&gt;&gt; Speaker 2: I don't know why you would.

264
00:17:50.153 --> 00:17:51.938
&gt;&gt; Scott Moss: Yeah, I don't know why you
would, because you don't have layouts, so

265
00:17:51.938 --> 00:17:52.447
there's no point.

266
00:17:52.447 --> 00:17:54.149
But the spread definitely works.

267
00:17:54.149 --> 00:17:57.234
Yeah, or they used to.

268
00:17:57.234 --> 00:17:59.609
I haven't tried it yet, so
[LAUGH] don't quote me on definitely.

269
00:17:59.609 --> 00:18:02.874
It used to, I haven't tried it, so
I cannot say that it still does.

270
00:18:02.874 --> 00:18:06.251
But yeah,
I don't think the route groups do.

