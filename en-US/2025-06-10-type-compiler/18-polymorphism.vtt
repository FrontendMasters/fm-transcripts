WEBVTT

1
00:00:00.000 --> 00:00:03.323
&gt;&gt; Richard Feldman: Okay, and
that brings us to part 6, polymorphism.

2
00:00:03.323 --> 00:00:07.591
&gt;&gt; Speaker 2: So now we're gonna get
into the most advanced forms of function

3
00:00:07.591 --> 00:00:08.808
related things.

4
00:00:08.808 --> 00:00:12.797
&gt;&gt; Richard Feldman: And part 7 is going
to be WebAssembly code generation.

5
00:00:12.797 --> 00:00:17.200
So this part 6 is the culmination
of our type checking journey.

6
00:00:17.200 --> 00:00:21.101
So at the end of this we will have
gone as far as we're going to go with

7
00:00:21.101 --> 00:00:23.205
Hindley-Milner type inference.

8
00:00:23.205 --> 00:00:25.484
And hopefully,
it's been an enjoyable journey.

9
00:00:25.484 --> 00:00:28.701
Let's just start off by talking
about polymorphic functions, and

10
00:00:28.701 --> 00:00:32.382
we'll talk about what that term means
very specifically while we're at it.

11
00:00:32.382 --> 00:00:35.945
We'll talk about arrays, this is a very
classic example of polymorphism,

12
00:00:35.945 --> 00:00:39.133
where you have an array that has
a specific type associated with it.

13
00:00:39.133 --> 00:00:41.503
So you could say, at the type level,
this is an array of strings, or

14
00:00:41.503 --> 00:00:42.512
this is an array of numbers.

15
00:00:42.512 --> 00:00:45.819
And then finally, we're gonna talk about
type annotations as promised earlier on.

16
00:00:45.819 --> 00:00:49.334
At the very end, after we've talked about
all the other type system features we're

17
00:00:49.334 --> 00:00:52.502
just gonna throw type annotations in
there at the end, just as a way of really

18
00:00:52.502 --> 00:00:55.695
emphasizing that, yes, you really can
get complete full type inference.

19
00:00:55.695 --> 00:00:59.648
And really type annotations are strictly
an optional thing that we're just kind of

20
00:00:59.648 --> 00:01:00.837
attacking on at the end.

21
00:01:00.837 --> 00:01:04.343
In case you want to write annotations
to annotate your source code for all

22
00:01:04.343 --> 00:01:08.381
the usual reasons that you might choose to
do that, even though you don't have to.

23
00:01:08.381 --> 00:01:11.773
Okay, so let's start off by talking
about polymorphic functions.

24
00:01:11.773 --> 00:01:13.443
So previously, you may recall,

25
00:01:13.443 --> 00:01:16.731
that we had this increment function
defined to be x return x + 1.

26
00:01:16.731 --> 00:01:19.740
We had this goal of having one
successful unification here,

27
00:01:19.740 --> 00:01:24.106
where we're using inc(42) that should
unify, because this is all about numbers,

28
00:01:24.106 --> 00:01:26.238
and 42 is a number, that should be fine.

29
00:01:26.238 --> 00:01:29.909
This one needs to be a mismatch, because
it's a string, which is a concrete type,

30
00:01:29.909 --> 00:01:30.916
that's not a number.

31
00:01:30.916 --> 00:01:34.440
So now we're going to do something
that's a little bit fancier than that.

32
00:01:34.440 --> 00:01:38.133
So this here is the identity function,
it's one of the most famous functions out

33
00:01:38.133 --> 00:01:41.410
there, it's just basically takes one
argument and returns it [LAUGH].

34
00:01:41.410 --> 00:01:45.163
It's very straightforward function,
but has some surprisingly useful and

35
00:01:45.163 --> 00:01:47.424
also surprisingly interesting properties.

36
00:01:47.424 --> 00:01:51.390
So the identity function is interesting
because the way that this works in terms

37
00:01:51.390 --> 00:01:52.928
of definition, first of all,

38
00:01:52.928 --> 00:01:55.947
ends up getting us to that case
that we talked about earlier,

39
00:01:55.947 --> 00:01:59.469
where we actually are going to have
a null ending up in the types table.

40
00:01:59.469 --> 00:02:02.861
But also, this is a case where this
actually should not end up with 1 success

41
00:02:02.861 --> 00:02:05.415
and 1 mismatch for this,
this should be totally legit.

42
00:02:05.415 --> 00:02:07.807
We should just have 2 successes for
these two types,

43
00:02:07.807 --> 00:02:10.427
even though they're totally
different concrete types.

44
00:02:10.427 --> 00:02:14.346
And in fact, if we don't have 2 successes
here, something has gone very, very wrong

45
00:02:14.346 --> 00:02:18.160
with our type checker because obviously,
the identity function should always work

46
00:02:18.160 --> 00:02:21.455
when you call it with different types,
that's kind of its whole thing.

47
00:02:21.455 --> 00:02:23.980
Now, worth noting,
this is a form of polymorphism.

48
00:02:23.980 --> 00:02:28.536
So polymorphism generally means that you
have your program behaving differently

49
00:02:28.536 --> 00:02:30.392
depending on a type difference.

50
00:02:30.392 --> 00:02:34.736
In other words, this identity function is
essentially doing two different things

51
00:02:34.736 --> 00:02:36.608
depending on what types we pass it.

52
00:02:36.608 --> 00:02:40.229
If I pass it a number, it's returning
a number, if I pass it to get a string,

53
00:02:40.229 --> 00:02:41.547
it's returning a string.

54
00:02:41.547 --> 00:02:45.509
Now, in the language like JavaScript, that
distinction might sound kinda meaningless,

55
00:02:45.509 --> 00:02:48.810
it's, what do you mean it's doing
something different based on the type?

56
00:02:48.810 --> 00:02:51.736
Those are just two different types,
what's the big deal?

57
00:02:51.736 --> 00:02:53.771
When we get to WebAssembly
code generation,

58
00:02:53.771 --> 00:02:56.350
we'll see that that actually
is a relevant difference.

59
00:02:56.350 --> 00:02:59.713
Because strings and numbers,
if you're dealing with bytes in memory,

60
00:02:59.713 --> 00:03:01.478
those are different sizes in memory,

61
00:03:01.478 --> 00:03:04.306
they have a different number of
bytes they take up in memory.

62
00:03:04.306 --> 00:03:07.360
And so, when you're implementing
this at a really low-level,

63
00:03:07.360 --> 00:03:09.313
like we're gonna do in the next section.

64
00:03:09.313 --> 00:03:13.518
When you're, hey, this function returns
8 bytes, versus this function returns 12

65
00:03:13.518 --> 00:03:16.502
bytes, those are different functions,
you have to pick one.

66
00:03:16.502 --> 00:03:19.367
[LAUGH] You can't just say this
returns some bytes, I don't know,

67
00:03:19.367 --> 00:03:20.859
you have to pick an actual number.

68
00:03:20.859 --> 00:03:24.215
And so, from that perspective, this
function has to be polymorphic because

69
00:03:24.215 --> 00:03:27.017
that's what type of low-level
code generation we're doing.

70
00:03:27.017 --> 00:03:30.755
If we're doing an interpreter or something
like that, we could sort of pass along

71
00:03:30.755 --> 00:03:34.070
some runtime type information and
then do the polymorphism at runtime.

72
00:03:34.070 --> 00:03:37.465
Which is why it maybe doesn't feel
like it's polymorphic because a lot of

73
00:03:37.465 --> 00:03:39.887
languages just take care
of that at runtime for you.

74
00:03:39.887 --> 00:03:41.555
So, as a user of the language,

75
00:03:41.555 --> 00:03:45.730
it doesn't feel as if I'm doing something
different based on the types, but

76
00:03:45.730 --> 00:03:50.247
behind the scenes, the runtime interpreter
is having to do something different.

77
00:03:50.247 --> 00:03:53.948
Because fundamentally, if you have two
different types of different sizes,

78
00:03:53.948 --> 00:03:56.415
the CPU really is only gonna
accept [LAUGH] numbers and

79
00:03:56.415 --> 00:03:58.617
instructions that work with one or
the other.

80
00:03:58.617 --> 00:04:02.884
Okay, so, let's bust out our trusty types
table here and our little database,

81
00:04:02.884 --> 00:04:06.523
and basically say, okay,
we're gonna assign 0 to the name here and

82
00:04:06.523 --> 00:04:09.184
1 to the thing after
the equals just like always.

83
00:04:09.184 --> 00:04:13.324
We're gonna go through and assign 2 to
the argument a, 3 to the return type.

84
00:04:13.324 --> 00:04:16.652
And then, once again, we're gonna
recycle this and just say, okay,

85
00:04:16.652 --> 00:04:19.536
yeah, we could just make a thing and
assign it to symlink, but

86
00:04:19.536 --> 00:04:22.609
we're just gonna say cut to the chase,
a is just 2 in both cases.

87
00:04:22.609 --> 00:04:25.441
Okay, here's our initial types database,
everything's null.

88
00:04:25.441 --> 00:04:28.662
Basically, we're gonna start off
building up some unifications here.

89
00:04:28.662 --> 00:04:30.577
So unify(0, 1) that's our classic,

90
00:04:30.577 --> 00:04:34.407
just like we're gonna symlink this thing
to the thing that it's equal to unify(3,

91
00:04:34.407 --> 00:04:36.604
2) is basically because
we have a return here.

92
00:04:36.604 --> 00:04:40.717
So anywhere we have a return,
we're basically saying, okay,

93
00:04:40.717 --> 00:04:44.754
that return type that is getting
returned needs to be the return

94
00:04:44.754 --> 00:04:47.893
type of the function,
those need to be unified.

95
00:04:47.893 --> 00:04:49.992
And that's actually it for identity.

96
00:04:49.992 --> 00:04:54.911
So previously, when we had the return x +
1, we had a whole bunch more unifications

97
00:04:54.911 --> 00:04:57.909
to do here,
because plus brought three of its own.

98
00:04:57.909 --> 00:04:59.196
We had a number literal.

99
00:04:59.196 --> 00:05:01.234
Identity function, really lightweight.

100
00:05:01.234 --> 00:05:04.275
It's basically just these two
unifications, and that's it.

101
00:05:04.275 --> 00:05:06.889
So let's see how these
translate into the database.

102
00:05:06.889 --> 00:05:09.999
So okay, it's unify(0, 1),
we have seen this many times,

103
00:05:09.999 --> 00:05:12.052
this is just a symlink connecting the two.

104
00:05:12.052 --> 00:05:15.210
And then unify(3, 2) again,
just a symlink, and that's it.

105
00:05:15.210 --> 00:05:19.509
So we're done unifying this function,
there is nothing more to unify,

106
00:05:19.509 --> 00:05:21.910
there are no more constraints to apply.

107
00:05:21.910 --> 00:05:26.486
There are no more rules that this function
has to follow, and yet we still have two

108
00:05:26.486 --> 00:05:30.407
glaring nulls sitting here [LAUGH]
in our database for the first time.

109
00:05:30.407 --> 00:05:33.915
So, what implications does this have for
calling the functions?

110
00:05:33.915 --> 00:05:37.108
Well, so this is what it's
gonna look like in the actual,

111
00:05:37.108 --> 00:05:41.278
whether we do it in the side table, or
whether we actually store it in there,

112
00:05:41.278 --> 00:05:45.020
we are going to end up with a function
that has these variables in it.

113
00:05:45.020 --> 00:05:48.497
So, I guess we end up with just one null
in the database after we put that in

114
00:05:48.497 --> 00:05:51.518
there for 1 which is this whole thing,
forget about that one.

115
00:05:51.518 --> 00:05:55.008
But yes, [LAUGH] the a is what's
null here, because this thing has no

116
00:05:55.008 --> 00:05:59.539
constraints on it whatsoever, it's just,
I am an argument, that's my constraint,

117
00:05:59.539 --> 00:06:02.407
[LAUGH] being an argument
is not a type constraint.

118
00:06:02.407 --> 00:06:05.521
Yeah, then also we'll do
a path compression on this.

119
00:06:05.521 --> 00:06:10.187
So the path compression would basically
say, okay, since 2 and 3 are connected,

120
00:06:10.187 --> 00:06:14.588
3 is sub-linked to 2, then basically,
we would follow that and say, okay,

121
00:06:14.588 --> 00:06:16.119
these two are just both 2.

122
00:06:16.119 --> 00:06:18.547
Okay, so, our goal is 2 successes for
each of these.

123
00:06:18.547 --> 00:06:21.320
So now let's get into the calling
the functions part of this.

124
00:06:21.320 --> 00:06:24.980
All right, so to do this we're gonna need
to once again expand our database table.

125
00:06:24.980 --> 00:06:28.139
So all the values are the same, but
we've got a bunch more nulls in here.

126
00:06:28.139 --> 00:06:31.897
I'm gonna assign 0 to identity again
because again, we're just doing the scope

127
00:06:31.897 --> 00:06:35.015
lookup here and saying,
we're gonna reuse the 0 we already have.

128
00:06:35.015 --> 00:06:39.078
We're gonna assign 4 to be the return
type of this whole thing, and

129
00:06:39.078 --> 00:06:43.993
then 5 to be the argument, and same thing
here, 6 to be what it all evaluates to,

130
00:06:43.993 --> 00:06:45.881
and then 7 to be the argument.

131
00:06:45.881 --> 00:06:50.686
Okay, next up, we're gonna unify(4,
2) because basically, we're saying, okay,

132
00:06:50.686 --> 00:06:54.401
4 is the entire thing that this call
to identity is going to resolve to.

133
00:06:54.401 --> 00:06:59.278
And what a returns is, sorry,
what the identity function returns is 2.

134
00:06:59.278 --> 00:07:02.095
So, right at this point, and I'm gonna
give you a very small spoiler that

135
00:07:02.095 --> 00:07:04.335
the approach we're about to
take is not going to work out.

136
00:07:04.335 --> 00:07:06.365
So if you're watching this and
saying, hang on a sec,

137
00:07:06.365 --> 00:07:08.719
that doesn't look like it's
gonna work out, you're right.

138
00:07:08.719 --> 00:07:11.946
It's not gonna work out and then we're
gonna learn what we're gonna do instead.

139
00:07:11.946 --> 00:07:14.991
But for right now, we're just gonna keep
doing the thing we did in the previous

140
00:07:14.991 --> 00:07:16.809
section and then crash and
we'll brick wall.

141
00:07:16.809 --> 00:07:20.031
So, unify(4, 2), basically just
exactly like we did last time, great.

142
00:07:20.031 --> 00:07:23.858
Then unify(5, 2), because okay, well,
that's the argument coming in and

143
00:07:23.858 --> 00:07:25.971
it's a 2 over there as well,
so far so good.

144
00:07:25.971 --> 00:07:29.133
So we've unified this with the return
type just like we did last time and

145
00:07:29.133 --> 00:07:30.669
then this with the argument type.

146
00:07:30.669 --> 00:07:31.880
Great, and then of course,

147
00:07:31.880 --> 00:07:35.367
we need to unify 5 with a number because
it's a number, they're all obviously.

148
00:07:35.367 --> 00:07:38.212
So [LAUGH] we've all done a one
character worth of space here [LAUGH].

149
00:07:38.212 --> 00:07:40.479
Okay, so we'll just go ahead and
process those.

150
00:07:40.479 --> 00:07:44.209
So 4 becomes the symlink to 2, 5 also
becomes the symlink to 2, and then 5 also

151
00:07:44.209 --> 00:07:47.580
becomes the symlink to a Number, and
already there was trouble brewing.

152
00:07:47.580 --> 00:07:51.436
Because now we have our identity function,
and somehow, our identity function now

153
00:07:51.436 --> 00:07:55.251
thinks it only takes numbers, which means
it's no longer the identity function.

154
00:07:55.251 --> 00:07:59.099
And we're about to ran crash into the
brick wall of implications of that as soon

155
00:07:59.099 --> 00:08:01.388
as we start trying to
unify this next one here.

156
00:08:01.388 --> 00:08:04.545
So, again, we're doing 6 and
2 because that's the return type here.

157
00:08:04.545 --> 00:08:07.814
So, this whole thing's return type
should be whatever this is returning.

158
00:08:07.814 --> 00:08:10.645
Then 7 and 2, because the argument
is also coming in there.

159
00:08:10.645 --> 00:08:13.856
And then finally, 7 and string,
because, hey, that's a string literal.

160
00:08:13.856 --> 00:08:16.358
So 6 and 2, great symlink,
7 and 2, great symlink.

161
00:08:16.358 --> 00:08:19.985
And then here's where trouble starts,
we're unifying the number 7,

162
00:08:19.985 --> 00:08:22.848
which is symlink to 2 over
here with a string and kaboom.

163
00:08:22.848 --> 00:08:26.838
Now we're trying to make this be both a
number and a string at the same time, and

164
00:08:26.838 --> 00:08:29.687
we've got a tight mismatch
that we shouldn't have it.

165
00:08:29.687 --> 00:08:33.820
We were trying to aim for 2 successes and
we ended up with 1 success and 1 type

166
00:08:33.820 --> 00:08:38.159
mismatch exactly as we did in the previous
section when we actually wanted that.

167
00:08:38.159 --> 00:08:40.758
Okay, so what were we supposed
to do different here?

168
00:08:40.758 --> 00:08:43.761
Cuz our goal was 2 successes and
we did not achieve our goal.

169
00:08:43.761 --> 00:08:47.277
So what do we need to do differently in
order to make it so that this actually

170
00:08:47.277 --> 00:08:51.212
works the way the identity function is
supposed to work from a types perspective?

171
00:08:51.212 --> 00:08:55.611
Okay, so let's sort of rewind the clock
and go back when we had not expanded those

172
00:08:55.611 --> 00:08:58.082
extra database table
entries at this point.

173
00:08:58.082 --> 00:09:00.182
And we're just kinda looking at, okay,

174
00:09:00.182 --> 00:09:03.962
let's just take the identity function,
we're calling it passing 42.

175
00:09:03.962 --> 00:09:06.534
How else can we do
the unification constraints so

176
00:09:06.534 --> 00:09:08.679
that this ends up with a better outcome?

177
00:09:08.679 --> 00:09:12.305
Okay, so first off, we resolve
that identity is id0, no problem,

178
00:09:12.305 --> 00:09:14.816
that part's the same,
that part's the same.

179
00:09:14.816 --> 00:09:18.022
So far, so good, everything is
totally harmless at this point.

180
00:09:18.022 --> 00:09:22.553
The next thing we're gonna do is we're
going to make a fresh function type just

181
00:09:22.553 --> 00:09:23.455
for this call.

182
00:09:23.455 --> 00:09:26.048
So you may recall at the end
of the previous exercise,

183
00:09:26.048 --> 00:09:27.258
one of the things we did,

184
00:09:27.258 --> 00:09:30.551
which is a little bit of foreshadowing,
was that we made a fresh ID.

185
00:09:30.551 --> 00:09:33.200
In the middle of unification,
we're just, hey,

186
00:09:33.200 --> 00:09:35.671
let's just add some new
stuff to the database.

187
00:09:35.671 --> 00:09:37.157
That's the thing we can do.

188
00:09:37.157 --> 00:09:40.602
And one of the other things we can do is
not only can we add rows to the database,

189
00:09:40.602 --> 00:09:44.101
but we can put constraints on those rows,
we can populate them with new stuff.

190
00:09:44.101 --> 00:09:46.185
And that's exactly what
we're gonna do here.

191
00:09:46.185 --> 00:09:49.206
So what we're gonna do is we're
just gonna make up a new function.

192
00:09:49.206 --> 00:09:52.121
And this new function is basically
a carbon copy of the old function,

193
00:09:52.121 --> 00:09:55.146
except that we're giving it fresh IDs for
everything that is unbound.

194
00:09:55.146 --> 00:09:58.644
So it's still got the same shape,
it's still one argument, one return value.

195
00:09:58.644 --> 00:10:02.408
And it's still got the same sort of
connection here, where it's the argument

196
00:10:02.408 --> 00:10:06.130
and the return value are the same ID,
it's just that we've given it a new ID.

197
00:10:06.130 --> 00:10:08.856
So rather than recycling the two,
we're just sort of,

198
00:10:08.856 --> 00:10:12.687
we made a new one that looks and works
like the old one, but it's sort of a twin.

199
00:10:12.687 --> 00:10:16.798
They're totally independent, they're
not connected, they're not symlinked.

200
00:10:16.798 --> 00:10:19.339
They just look identical,
but they aren't identical.

201
00:10:19.339 --> 00:10:22.896
And the really critical thing here is
that, now, if we start using this one in

202
00:10:22.896 --> 00:10:25.434
all the places that we were
previously using this one.

203
00:10:25.434 --> 00:10:28.244
Now, we can go ahead and
modify this one as much as we want, and

204
00:10:28.244 --> 00:10:31.346
it's not gonna go back and
damage the original identity function.

205
00:10:31.346 --> 00:10:35.205
It's not gonna go and turn this into
a number because now we're just messing

206
00:10:35.205 --> 00:10:38.292
around with this copy that we
made rather than the original.

207
00:10:38.292 --> 00:10:40.699
Now, this is a really
important subtle distinction,

208
00:10:40.699 --> 00:10:44.064
because sometimes you wanna do this and
sometimes you don't wanna do this.

209
00:10:44.064 --> 00:10:46.929
In the previous example, it was very
important that we went back and

210
00:10:46.929 --> 00:10:49.456
affected the original,
whereas in this case, we don't.

211
00:10:49.456 --> 00:10:50.654
So, what's the difference?

212
00:10:50.654 --> 00:10:52.723
Well, the difference is,
a is a polymorphic type.

213
00:10:52.723 --> 00:10:56.636
So previously, we were dealing with
a function that was taking a number type,

214
00:10:56.636 --> 00:11:00.397
after we did type inference,
we concluded, that thing was a number.

215
00:11:00.397 --> 00:11:03.911
Its type was hard-coded,
it was a concrete number type.

216
00:11:03.911 --> 00:11:08.411
This thing, remember, never gets
bound to anything, it's unbound,

217
00:11:08.411 --> 00:11:13.229
that's how we know it's a polymorphic
type, also known as a type variable.

218
00:11:13.229 --> 00:11:17.419
So in our system here, when you have this
scenario where you have this thing and

219
00:11:17.419 --> 00:11:20.861
there's nothing associated with it,
that is a type variable.

220
00:11:20.861 --> 00:11:24.239
Which is why in the literature, [LAUGH]
they call these things type variables

221
00:11:24.239 --> 00:11:26.899
because when you initialize them,
that's what they are.

222
00:11:26.899 --> 00:11:29.571
So I like to call them IDs
cuz of the database metaphor.

223
00:11:29.571 --> 00:11:33.696
But if you see someone talking about, this
is a type variable, that can usually mean

224
00:11:33.696 --> 00:11:37.546
either the ID itself or just the sort of
default situation that it's in when you've

225
00:11:37.546 --> 00:11:41.286
just made the number and you haven't
actually associated anything with it yet,

226
00:11:41.286 --> 00:11:45.660
because it's, well, yeah, it's null,
it's unbound, it's just a type variable.

227
00:11:45.660 --> 00:11:47.997
It could end up being anything,
it's polymorphic.

228
00:11:47.997 --> 00:11:51.966
And when you are calling these things,
this is the scenario where you want to do

229
00:11:51.966 --> 00:11:55.999
this sort of cloning trick to make sure
that you're not accidentally polluting

230
00:11:55.999 --> 00:11:59.748
the original thing and it stays
polymorphic and remains a type variable.

231
00:11:59.748 --> 00:12:03.550
As far as figuring out when to do that,
one way you could think of this,

232
00:12:03.550 --> 00:12:06.466
this would be a very inefficient
way to implement it.

233
00:12:06.466 --> 00:12:09.868
Is you could just say, well,
every time we do a function call,

234
00:12:09.868 --> 00:12:11.744
we just clone it as much as we want.

235
00:12:11.744 --> 00:12:14.196
But then if the arguments
are not polymorphic,

236
00:12:14.196 --> 00:12:15.917
then we just throw away the call.

237
00:12:15.917 --> 00:12:19.837
But of course, it kinda makes more
sense to just sort of be, okay, well,

238
00:12:19.837 --> 00:12:22.384
let me look at what I'm
actually passing here.

239
00:12:22.384 --> 00:12:26.101
Before I do this unification,
I can decide in the moment, on the fly,

240
00:12:26.101 --> 00:12:28.749
okay, am I dealing with
a polymorphic variable?

241
00:12:28.749 --> 00:12:31.692
If so, I need to do this cloning,
and otherwise, I don't.

242
00:12:31.692 --> 00:12:35.919
Okay, so, I've chosen a different color
for these just to kind of emphasize

243
00:12:35.919 --> 00:12:39.245
that both of these are sort of for
purposes of this call only.

244
00:12:39.245 --> 00:12:43.158
The only reason we created these was
just for this one call to identity.

245
00:12:43.158 --> 00:12:47.427
They're not gonna participate in any
of the rest of the stuff we're doing.

246
00:12:47.427 --> 00:12:50.157
They're just narrowly scoped to,
we did this so

247
00:12:50.157 --> 00:12:54.366
that we can type check this without
affecting the identity function here.

248
00:12:54.366 --> 00:12:56.262
Okay, so now we unify(4, 7).

249
00:12:56.262 --> 00:13:01.015
So 4 being the return type, and then
the 7 being the equivalent of this two,

250
00:13:01.015 --> 00:13:03.663
except over here it's a 7 instead of a 2.

251
00:13:03.663 --> 00:13:05.174
Then unify(5, 7), okay?

252
00:13:05.174 --> 00:13:06.225
So far, so good.

253
00:13:06.225 --> 00:13:08.004
And then unify(5, N).

254
00:13:08.004 --> 00:13:10.599
So, exact same stuff that we did before,

255
00:13:10.599 --> 00:13:14.529
except the arguments of return
type are now unifying with 6 and

256
00:13:14.529 --> 00:13:18.625
7 rather than 2 and 3,
like they were in the previous example.

257
00:13:18.625 --> 00:13:21.475
So, so far, so good,
we'll just go ahead and do those.

258
00:13:21.475 --> 00:13:26.099
So 4 unifies with 7, 5 unifies with 7,
and then 5 unifies with Number,

259
00:13:26.099 --> 00:13:30.025
which results in the symlink
causing 7 to end up being a Number.

260
00:13:30.025 --> 00:13:32.872
This is fine because we
have this clone here and

261
00:13:32.872 --> 00:13:35.583
this clone thinks it's all about numbers.

262
00:13:35.583 --> 00:13:39.525
But that's not a big deal when we come to
the other one where we're passing it in

263
00:13:39.525 --> 00:13:43.768
with a string because it's gonna get its
own clone, which we're gonna call 10 and

264
00:13:43.768 --> 00:13:44.638
11 down here.

265
00:13:44.638 --> 00:13:48.518
So 8 is gonna be the strategy thing, 0 is
the same as before, 9 is the argument.

266
00:13:48.518 --> 00:13:52.196
And now when we go and unify these three
in exactly the same way that we did

267
00:13:52.196 --> 00:13:56.512
the previous time, except that now we're
unifying with 11 rather than with 2.

268
00:13:56.512 --> 00:14:00.476
Yeah, then we go through and just process
these things, symlink, symlink, and

269
00:14:00.476 --> 00:14:02.952
this ends up being a string,
and it's no problem.

270
00:14:02.952 --> 00:14:07.526
We have these two clones that got totally
unified and they didn't harm anything,

271
00:14:07.526 --> 00:14:09.395
there was no effect on identity.

272
00:14:09.395 --> 00:14:13.448
If we wanted to, we could call it a whole
bunch more times like an array and

273
00:14:13.448 --> 00:14:15.320
pass in a function and a Boolean.

274
00:14:15.320 --> 00:14:18.603
And all these different things, since
every single time we do them, they're

275
00:14:18.603 --> 00:14:22.052
gonna get their own fresh clone of this
function that we're gonna unify against.

276
00:14:22.052 --> 00:14:24.739
We're never gonna end up actually
stomping on the original,

277
00:14:24.739 --> 00:14:27.283
we're only ever gonna be
interacting with these copies.

278
00:14:27.283 --> 00:14:29.203
And so,
we can do all the full type inference,

279
00:14:29.203 --> 00:14:31.663
we are still getting stuff out of this,
figuring out,

280
00:14:31.663 --> 00:14:34.787
this thing is getting the same return
type because that's what this does.

281
00:14:34.787 --> 00:14:39.547
So we do get to see, this ends up being
a Number, this ends up being a String,

282
00:14:39.547 --> 00:14:42.209
and these things
are similar to one another.

283
00:14:42.209 --> 00:14:44.488
That's all very nice and useful, right?

284
00:14:44.488 --> 00:14:48.017
If we ask,
what's the type of this whole expression?

285
00:14:48.017 --> 00:14:50.368
We can ask, 8 0, 8 is 11, 11 is string.

286
00:14:50.368 --> 00:14:55.219
So it's serving a very useful purpose,
but it's not serving the purpose that we

287
00:14:55.219 --> 00:14:58.514
don't want it to, namely,
modifying the original.

288
00:14:58.514 --> 00:15:01.117
Because the original is polymorphic, and

289
00:15:01.117 --> 00:15:04.305
we do not want to modify
that polymorphic function.

