WEBVTT

1
00:00:00.000 --> 00:00:01.043
We have some exercises here.

2
00:00:01.043 --> 00:00:07.038
So if you've checked out the repo,
you can open up exercises/1/formatter.js.

3
00:00:07.038 --> 00:00:09.174
There's a couple of different
files in that folder.

4
00:00:09.174 --> 00:00:11.062
I'm gonna go through what
they all do in a sec.

5
00:00:11.062 --> 00:00:13.580
But the format is the one where
we're gonna make our changes.

6
00:00:13.580 --> 00:00:17.683
So basically, there's comments that have
a little arrow finger pointing to them,

7
00:00:17.683 --> 00:00:20.359
and what we're gonna do is
do what those comments say.

8
00:00:20.359 --> 00:00:24.218
So let's hop on over here
to my trusty Zed editor.

9
00:00:24.218 --> 00:00:26.411
I work at Zed, so shameless plug.

10
00:00:26.411 --> 00:00:28.391
And also, I love it.

11
00:00:28.391 --> 00:00:31.858
[LAUGH] But basically all of
the exercises have the same format.

12
00:00:31.858 --> 00:00:36.849
So you've got index.js, and index.js
is essentially just a bunch of tests.

13
00:00:36.849 --> 00:00:37.875
So it's like, hey,

14
00:00:37.875 --> 00:00:40.673
does the const declaration
format the way we expect it to?

15
00:00:40.673 --> 00:00:41.800
Great, looks good.

16
00:00:41.800 --> 00:00:45.804
What if we have one of the type annotation
we're not actually gonna implement type

17
00:00:45.804 --> 00:00:49.285
annotations in this, course, but
we are gonna talk about them, and so

18
00:00:49.285 --> 00:00:51.489
the lexer and
the parser do support them, but

19
00:00:51.489 --> 00:00:53.948
we don't go as far as to
actually implement them.

20
00:00:53.948 --> 00:00:57.336
String literals like hello world,
they format, okay, etc., etc.

21
00:00:57.336 --> 00:01:01.172
So there's a whole bunch of
tests in here but unfortunately,

22
00:01:01.172 --> 00:01:03.255
the tests don't work right now.

23
00:01:03.255 --> 00:01:05.151
Well, they don't all pass right now.

24
00:01:05.151 --> 00:01:09.887
So if I do node, sorry,
I need a cd into their

25
00:01:09.887 --> 00:01:14.763
firstm cd exercises/1, node index.js.

26
00:01:14.763 --> 00:01:17.429
We actually get some test errors,
quite a few of them, actually.

27
00:01:17.429 --> 00:01:20.236
Now I really wanted to make
this a zero dependency course,

28
00:01:20.236 --> 00:01:22.081
you don't have to install anything.

29
00:01:22.081 --> 00:01:24.851
So this is our little,
extremely fancy test runner.

30
00:01:24.851 --> 00:01:27.134
It's test.js, it's one directory up.

31
00:01:27.134 --> 00:01:28.909
But basically, it's just like, okay,

32
00:01:28.909 --> 00:01:31.148
some of these are not
formatting things correctly.

33
00:01:31.148 --> 00:01:32.532
Why are they not formatting correctly?

34
00:01:32.532 --> 00:01:34.680
Because there's a giant
to do here in the output,

35
00:01:34.680 --> 00:01:36.583
instead of what should actually be output.

36
00:01:36.583 --> 00:01:38.420
So let's go take a look at that.

37
00:01:38.420 --> 00:01:39.942
I'm just going to show you these files.

38
00:01:39.942 --> 00:01:42.795
We're not actually gonna make any
changes them, but just so they're there.

39
00:01:42.795 --> 00:01:46.248
This is the tokenization thing for
what we just talked about.

40
00:01:46.248 --> 00:01:48.739
Basically, this is an actual
implementation of this.

41
00:01:48.739 --> 00:01:51.318
Like I said, this is not a course
about parsing and tokenization.

42
00:01:51.318 --> 00:01:54.046
So if you wanna take a look at this code,
you can feel free to do that, but

43
00:01:54.046 --> 00:01:57.338
you don't really need to for what we're
talking about, same thing with parse.js.

44
00:01:57.338 --> 00:02:00.902
So every single one of these examples that
we're gonna go through in the exercises

45
00:02:00.902 --> 00:02:03.445
has a tokenizer and
a parse just cuz the compiler needs it.

46
00:02:03.445 --> 00:02:05.940
But again, we're not really gonna spend
a lot of time looking through it.

47
00:02:05.940 --> 00:02:07.666
It's just like, man,
if you're curious, it's cool.

48
00:02:07.666 --> 00:02:08.313
Here's all the stuff.

49
00:02:08.313 --> 00:02:10.398
We got constant, we got return,

50
00:02:10.398 --> 00:02:14.054
it's what makes the tokens and
then later the parse tree.

51
00:02:14.054 --> 00:02:17.430
Now we are gonna definitely spend
time with parse tree notes for sure.

52
00:02:17.430 --> 00:02:20.468
And starting with right
here in the formatter.

53
00:02:20.468 --> 00:02:24.954
So here we have our formatter, and if you
look at the top, we've got our very first

54
00:02:24.954 --> 00:02:28.661
little finger pointing arrow icon
that basically says okay, Rod,

55
00:02:28.661 --> 00:02:32.914
run node index.js from the parent
directory to see which tests are failing.

56
00:02:32.914 --> 00:02:35.242
We already did that, but if you wanna do
that locally, there's the command and

57
00:02:35.242 --> 00:02:36.335
the instructions for how to do that.

58
00:02:36.335 --> 00:02:40.489
Then basically it's like, fix the failing
tests by resolving the comments for

59
00:02:40.489 --> 00:02:41.672
this down in the file.

60
00:02:41.672 --> 00:02:42.434
So if you scroll down,

61
00:02:42.434 --> 00:02:44.976
you can see there's a bunch of stuff
that is actually correct and working.

62
00:02:44.976 --> 00:02:49.519
And there's a bunch of logic around,
I mentioned big switch statement, right?

63
00:02:49.519 --> 00:02:50.684
It's like doing LOL.

64
00:02:50.684 --> 00:02:53.389
We got a block, we got a string literal,
numeric literal,

65
00:02:53.389 --> 00:02:55.568
you don't need to know
how all this code works.

66
00:02:55.568 --> 00:02:58.914
Mostly, the point of these exercise
is we actually do want it to work.

67
00:02:58.914 --> 00:03:01.066
So you can actually fix it and
watch the test pass.

68
00:03:01.066 --> 00:03:04.502
So again, if you wanna sorta poke
around and see what this is doing,

69
00:03:04.502 --> 00:03:08.062
I would not claim this is like production
grade compiler code [LAUGH] but

70
00:03:08.062 --> 00:03:11.700
it is at least functioning well enough
that we can see what it's doing.

71
00:03:11.700 --> 00:03:14.818
Okay, so
once we get down to the array literals,

72
00:03:14.818 --> 00:03:17.342
this is where we've got the problems.

73
00:03:17.342 --> 00:03:18.463
So basically,

74
00:03:18.463 --> 00:03:23.908
what we wanna do is we want to resolve
all of these little finger emoji icon.

75
00:03:23.908 --> 00:03:26.170
So there's one here for
format array literal.

76
00:03:26.170 --> 00:03:28.703
This is right below
a format return statement.

77
00:03:28.703 --> 00:03:31.225
Then there's another one for
format call expression.

78
00:03:31.225 --> 00:03:33.117
So this is when you're calling a function.

79
00:03:33.117 --> 00:03:36.483
And then finally,
we have a format binary expression.

80
00:03:36.483 --> 00:03:37.177
That was last one, right?

81
00:03:37.177 --> 00:03:38.916
Yeah, format binary expression.

82
00:03:38.916 --> 00:03:43.506
So binary expression is essentially where
you have, in our case, it's just + or *.

83
00:03:43.506 --> 00:03:47.485
Most languages have more than just plus or
times, but that's all we've got.

84
00:03:47.485 --> 00:03:50.421
But the important part here is
that in each of these examples,

85
00:03:50.421 --> 00:03:53.308
I've given you sort of the structure
of this node argument.

86
00:03:53.308 --> 00:03:57.525
So you can just see, okay, node, the this
argument you've got right here is going to

87
00:03:57.525 --> 00:04:01.231
have an array of elements, and each of
those elements is a parse tree node.

88
00:04:01.231 --> 00:04:05.182
So what you wanna do in the exercise
is essentially end up with, instead of

89
00:04:05.182 --> 00:04:09.347
returning this TODO string, you wanna
return a string that looks like this.

90
00:04:09.347 --> 00:04:12.860
Based on iterating over these
elements that you've got in there,

91
00:04:12.860 --> 00:04:15.066
each of which is one of these parse nodes.

92
00:04:15.066 --> 00:04:18.583
Same thing kinda here, this same basic
idea except instead of an array,

93
00:04:18.583 --> 00:04:20.325
now you've got a call expression.

94
00:04:20.325 --> 00:04:24.365
So this has actually two different fields
on its structure, so one is callee.

95
00:04:24.365 --> 00:04:27.565
Callee basically refers to
the function that you are calling.

96
00:04:27.565 --> 00:04:31.688
Note by the way that, I mean, typically we
think about this as like, foo(arg1, arg2).

97
00:04:31.688 --> 00:04:34.267
But one of the many edge cases
that comes up in compilers,

98
00:04:34.267 --> 00:04:37.657
which we're actually our compiler is
not gonna bother implementing, but

99
00:04:37.657 --> 00:04:40.264
we are gonna format it in case
someone writes it that way.

100
00:04:40.264 --> 00:04:45.090
Well, actually, let me put it to you,
can anyone think of another way that you

101
00:04:45.090 --> 00:04:48.988
can call a function that's not
involving putting a name here?

102
00:04:48.988 --> 00:04:50.271
&gt;&gt; Student 1: Lambda functions?

103
00:04:50.271 --> 00:04:51.529
&gt;&gt; Richard Feldman: Yeah,
exactly, lambda functions.

104
00:04:51.529 --> 00:04:56.021
So you can do a is whatever, and
then immediately call it, right?

105
00:04:56.021 --> 00:05:00.294
So that's why callee is a parse tree node
and not just a name, cuz it could be.

106
00:05:00.294 --> 00:05:03.306
This whole thing right here could
be this gigantic expression,

107
00:05:03.306 --> 00:05:04.710
and that has to be supported.

108
00:05:04.710 --> 00:05:08.252
So this is something that definitely
comes up in production grade compilers.

109
00:05:08.252 --> 00:05:10.121
So the callee is a parse tree node.

110
00:05:10.121 --> 00:05:12.361
It's not just a name,
but it might be a name.

111
00:05:12.361 --> 00:05:15.288
But we have to treat it as
though it might be anything.

112
00:05:15.288 --> 00:05:17.783
And then of course,
you have the arguments that are coming in.

113
00:05:17.783 --> 00:05:21.544
And so basically, unlike the array example
from earlier, we actually need to do

114
00:05:21.544 --> 00:05:25.213
a traversal of the arguments, but
then also deal with the callee separately.

115
00:05:25.213 --> 00:05:27.599
And then finally,
we have the binary expression,

116
00:05:27.599 --> 00:05:30.216
which is basically just operator,
like plus or times.

117
00:05:30.216 --> 00:05:32.774
And then there's the left, which is
basically the thing that comes before

118
00:05:32.774 --> 00:05:35.209
the operator, and that's gonna be
a parse tree node, and then right,

119
00:05:35.209 --> 00:05:37.791
which is another parse tree node that's
on the other side of the operator.

120
00:05:37.791 --> 00:05:40.196
And then there's the operator name itself,
which is just gonna be a string,

121
00:05:40.196 --> 00:05:40.907
like cluster or time.

122
00:05:40.907 --> 00:05:41.893
Something like that.

123
00:05:46.862 --> 00:05:49.077
&gt;&gt; Richard Feldman: Cool,
let's go through the solutions.

124
00:05:49.077 --> 00:05:51.474
All right, so
first we had our format array literal.

125
00:05:51.474 --> 00:05:53.488
By the way,
there is a solutions directory.

126
00:05:53.488 --> 00:05:56.528
If you are totally stuck and
just wanna take a peek, you can.

127
00:05:56.528 --> 00:05:58.388
But it's definitely better for
learning if you don't.

128
00:05:58.388 --> 00:06:02.021
[LAUGH] So I'll use it to go
through the solutions, but

129
00:06:02.021 --> 00:06:07.458
only use if absolutely necessary, or later
on if you wanna go see how it worked.

130
00:06:07.458 --> 00:06:11.240
All right, so we're gonna skip over
this sort of edge case here first and

131
00:06:11.240 --> 00:06:12.615
come back to that in a sec.

132
00:06:12.615 --> 00:06:15.589
The main sort of bread and
butter here is, you got, okay,

133
00:06:15.589 --> 00:06:19.233
I want to take my node node.elements,
you may recall from this thing,

134
00:06:19.233 --> 00:06:21.987
this right here,
it's an array of parse tree nodes.

135
00:06:21.987 --> 00:06:24.776
And just map over it, and
then for each element,

136
00:06:24.776 --> 00:06:26.967
we wanna call formatNode on element.

137
00:06:26.967 --> 00:06:30.204
So formatNode, if you poked
around in the source code file,

138
00:06:30.204 --> 00:06:32.741
this is sort of the generic
I've got a node, and

139
00:06:32.741 --> 00:06:36.438
then I want to turn it into the source
code format, an actual string.

140
00:06:36.438 --> 00:06:41.427
And one of the things that formatNode
does is in its gigantic switch statement,

141
00:06:41.427 --> 00:06:44.117
is actually calls our array literal here.

142
00:06:44.117 --> 00:06:47.098
So we are actually doing something
recursive here potentially.

143
00:06:47.098 --> 00:06:50.581
If we format an array literal inside
array literal, we go in here.

144
00:06:50.581 --> 00:06:54.318
In the middle elements.map we call
formatNode, formatNode comes back

145
00:06:54.318 --> 00:06:58.743
down here, and then how many times we have
nested arrays that'll just keep running.

146
00:06:58.743 --> 00:07:03.005
After you got done with that,
then we're just doing a join with a comma.

147
00:07:03.005 --> 00:07:05.039
Did anyone try to get fancy and make it so

148
00:07:05.039 --> 00:07:08.378
that it did the multi-line thing
that we talked about earlier?

149
00:07:08.378 --> 00:07:11.382
I wouldn't either for
ten minute exercise, but you could.

150
00:07:11.382 --> 00:07:14.102
If you wanted to get fancy with it,
this is exactly where you would do that.

151
00:07:14.102 --> 00:07:17.858
And then do the thing where you record in
the parse tree node, and then you have to

152
00:07:17.858 --> 00:07:21.635
escape the formatter, and go back into
the parser to actually write that down.

153
00:07:21.635 --> 00:07:26.585
But then at that point, you could just
look right here, sorry, at this node,

154
00:07:26.585 --> 00:07:30.260
this one right here, and
just say if node.isMultiline or

155
00:07:30.260 --> 00:07:34.914
something, has trailing comma,
then you could just branch right here.

156
00:07:34.914 --> 00:07:38.900
And instead of doing this, you would do
an indentation and join on new line, and

157
00:07:38.900 --> 00:07:39.804
stuff like that.

158
00:07:39.804 --> 00:07:42.532
Cool, and then, of course,
we have the edge case,

159
00:07:42.532 --> 00:07:46.748
which is that if the length is zero, then
you don't want to actually put spaces in

160
00:07:46.748 --> 00:07:49.921
the middle of in the case of an object or
something like that.

161
00:07:49.921 --> 00:07:53.612
Now, in this particular case, if you
didn't do this, nothing bad would happen.

162
00:07:53.612 --> 00:07:57.018
But there are quite a lot of
scenarios where that does matter,

163
00:07:57.018 --> 00:07:59.455
records or objects being the main example.

164
00:07:59.455 --> 00:08:03.136
So usually, the way that formatters will
do those is something more like this.

165
00:08:03.136 --> 00:08:06.666
But of course, you don't want your
empty object to look like that.

166
00:08:06.666 --> 00:08:08.253
So that's where that edge case comes up.

167
00:08:08.253 --> 00:08:12.385
In this case, it's more of a just habit
of putting the edge case in slash,

168
00:08:12.385 --> 00:08:16.533
maybe a performance optimization,
although in this case, not really.

169
00:08:16.533 --> 00:08:19.027
You're just saving yourself
a string interpolation.

170
00:08:19.027 --> 00:08:21.891
But yeah, the main bread and
butter is just this.

171
00:08:21.891 --> 00:08:26.090
So for our purposes, we can just copy this
over and demonstrate that'll just work.

172
00:08:26.090 --> 00:08:30.743
Okay, so
now we should be down one of these arrows.

173
00:08:30.743 --> 00:08:32.423
So here we had all these tests failed, and

174
00:08:32.423 --> 00:08:34.252
now a slightly shorter
list of tests failed.

175
00:08:34.252 --> 00:08:35.774
Hooray, we're making progress.

176
00:08:35.774 --> 00:08:41.016
Any questions about that one before
we move on to the other two?

177
00:08:41.016 --> 00:08:43.247
All right, so
next one is the call expression.

178
00:08:43.247 --> 00:08:47.218
So we have the callee, which is a parse
tree node as previously mentioned,

179
00:08:47.218 --> 00:08:48.300
not an identifier.

180
00:08:48.300 --> 00:08:51.252
Then we have the actual arguments, which
is what we're gonna need to iterate over,

181
00:08:51.252 --> 00:08:52.386
just like we did with the array.

182
00:08:52.386 --> 00:08:53.732
So here's what that can look like.

183
00:08:53.732 --> 00:08:56.965
So, first thing we do is we call
formatNode once again on the callee, and

184
00:08:56.965 --> 00:08:59.880
that'll get us back a formatted
string that we can just later on,

185
00:08:59.880 --> 00:09:02.434
using string interpretation,
so this interpolation.

186
00:09:02.434 --> 00:09:05.526
So this will be either foo,
if it's the name of the function,

187
00:09:05.526 --> 00:09:08.975
if it's an identifier node, or
it could be something really fancy,

188
00:09:08.975 --> 00:09:10.472
with parentheses around it.

189
00:09:10.472 --> 00:09:13.016
Either way, this is just gonna work.

190
00:09:13.016 --> 00:09:15.928
Worth noting that if this
were a production compiler,

191
00:09:15.928 --> 00:09:19.726
this is the part where you would probably
need some logic to try to answer

192
00:09:19.726 --> 00:09:22.592
the question,
do I need to insert parentheses here?

193
00:09:22.592 --> 00:09:26.289
Because this parse tree node might not,
depending on how you're representing

194
00:09:26.289 --> 00:09:29.612
things, might not record whether or
not it had parentheses around it.

195
00:09:29.612 --> 00:09:31.685
And if you've discarded those parentheses,

196
00:09:31.685 --> 00:09:33.871
you might need to
strategically reinsert them.

197
00:09:33.871 --> 00:09:36.967
So you wouldn't wanna put these
if it's an identifier, like foo,

198
00:09:36.967 --> 00:09:38.828
then it would be really weird if you had.

199
00:09:38.828 --> 00:09:42.542
I mean, it could work, but nobody
wants their code formatted like this.

200
00:09:42.542 --> 00:09:45.770
But if it's something like,
it's (x =&gt; x + 1) or

201
00:09:45.770 --> 00:09:48.756
something like that,
then you need the parentheses.

202
00:09:48.756 --> 00:09:52.657
Because otherwise, if I don't have the
parentheses there, then it's gonna break.

203
00:09:52.657 --> 00:09:55.217
Now I'm trying to call 1 as a function.

204
00:09:55.217 --> 00:09:59.091
So this is another good example of where
these are the types of edge cases that

205
00:09:59.091 --> 00:10:03.206
we're not gonna bother handling in our
compiler, but I am gonna call some of them

206
00:10:03.206 --> 00:10:06.192
out along the way, just so
you can be aware of them, yeah.

207
00:10:06.192 --> 00:10:12.830
&gt;&gt; Student 2: As a design decision here,
are we guarding upstream for null inputs?

208
00:10:12.830 --> 00:10:15.589
So if I just call
the function without inputs,

209
00:10:15.589 --> 00:10:20.045
will it give me something if I click
Python where it gives you the object, or

210
00:10:20.045 --> 00:10:22.597
do we throw an error-
&gt;&gt; Richard Feldman: I see, so basically,

211
00:10:22.597 --> 00:10:25.710
question is like, so
if I don't pass in any arguments,

212
00:10:25.710 --> 00:10:27.517
what happens in this compiler?

213
00:10:27.517 --> 00:10:28.837
This compiler accepts that.

214
00:10:28.837 --> 00:10:32.712
We actually have first class support for
zero argument, like function calling.

215
00:10:32.712 --> 00:10:35.679
So this can just be an empty
array when it comes in but yeah,

216
00:10:35.679 --> 00:10:39.028
different languages like handle
those scenarios differently.

217
00:10:39.028 --> 00:10:42.369
But yeah, in general,
with the one exception, arguably,

218
00:10:42.369 --> 00:10:45.057
of generics,
we are gonna go through generics,

219
00:10:45.057 --> 00:10:48.022
aka parametric polymorphism,
in our type checker.

220
00:10:48.022 --> 00:10:52.013
But that's basically mainly because if
you're doing Hindley motor type inference,

221
00:10:52.013 --> 00:10:55.361
it's either free or necessary anyway,
depending on how you look at it.

222
00:10:55.361 --> 00:10:58.069
So it's not that fancy if you're
doing a Hindley motor type checker.

223
00:10:58.069 --> 00:11:00.654
But other than that, in general,
if you're wondering,

224
00:11:00.654 --> 00:11:02.147
are we gonna do this fancy thing?

225
00:11:02.147 --> 00:11:02.989
Probably the answer is no.

226
00:11:02.989 --> 00:11:04.333
[LAUGH] It's gonna be a very,

227
00:11:04.333 --> 00:11:07.246
very un fancy subset of JavaScript
we're compiling to here.

228
00:11:07.246 --> 00:11:09.166
All right, so in this case,

229
00:11:09.166 --> 00:11:13.730
there is no optional initial edge
case that we might or might not do.

230
00:11:13.730 --> 00:11:15.131
This is just all necessary.

231
00:11:15.131 --> 00:11:18.414
This part is basically identical to
what we did in the previous one,

232
00:11:18.414 --> 00:11:21.194
so with the one exception of
the extra formatNode there.

233
00:11:21.194 --> 00:11:25.079
So let's run that again and,
hey, even fewer tests failed and

234
00:11:25.079 --> 00:11:26.773
I think one fewer, great.

235
00:11:26.773 --> 00:11:31.303
And finally,
we have the format a binary expression.

236
00:11:31.303 --> 00:11:34.010
So here we have three fields
that we're dealing with.

237
00:11:34.010 --> 00:11:35.722
So left operator and right.

238
00:11:35.722 --> 00:11:39.953
Now, I'll show you an example of how we
could implement this incorrectly, but it's

239
00:11:39.953 --> 00:11:44.089
pretty obvious, pretty much right away how
this is incorrect if you do it this way.

240
00:11:44.089 --> 00:11:46.604
So format the thing that's
to the left of the operator,

241
00:11:46.604 --> 00:11:48.809
format the thing that's
right to the operator.

242
00:11:48.809 --> 00:11:55.134
If I were to just say left and right,
well, I'm missing something pretty

243
00:11:55.134 --> 00:12:00.246
important for an operator,
which is the actual operator.

244
00:12:00.246 --> 00:12:03.247
So if I run this, I did not make
any tests pass because although

245
00:12:03.247 --> 00:12:05.170
we don't need to format the operator.

246
00:12:05.170 --> 00:12:07.875
So if I try to do this,
I will get a different error.

247
00:12:07.875 --> 00:12:10.535
Operator = formatNode(node.operator);.

248
00:12:10.535 --> 00:12:13.146
Now, the operator is not a node.

249
00:12:13.146 --> 00:12:14.339
This is actually just a string.

250
00:12:14.339 --> 00:12:20.346
So if I try to do this, yeah,
at times still have a failure.

251
00:12:20.346 --> 00:12:21.926
I'm not gonna scroll up and
find what the exact error was.

252
00:12:21.926 --> 00:12:24.362
But the point is, this one,
we want to not formatNode.

253
00:12:24.362 --> 00:12:25.702
This one just is a string.

254
00:12:25.702 --> 00:12:29.864
So what we actually want is just that and
hooray, now all of our tests pass.

255
00:12:29.864 --> 00:12:32.427
For extra credit, you can turn it
into a transpiler, just kidding.

256
00:12:32.427 --> 00:12:36.463
But if you want to, you could, actually,
after the workshop [LAUGH] go do the thing

257
00:12:36.463 --> 00:12:38.921
we talked about,
add some piece of syntax sugar,

258
00:12:38.921 --> 00:12:41.631
but that requires changing the parser and
stuff, so.

259
00:12:41.631 --> 00:12:44.396
Are you afraid of blowing
the stack with recursion?

260
00:12:44.396 --> 00:12:47.198
[LAUGH] Are you afraid of blowing
the stack with recursion?

261
00:12:47.198 --> 00:12:47.763
Yeah, right.

262
00:12:47.763 --> 00:12:51.427
So this is where formatNode is potentially
calling from an array literal, etc.

263
00:12:51.427 --> 00:12:53.276
I mentioned this is recursive.

264
00:12:53.276 --> 00:12:54.825
It's a very good question.

265
00:12:54.825 --> 00:12:57.850
So blowing the stack would basically
mean what if this recurses so

266
00:12:57.850 --> 00:13:01.261
many times that you run out of stack
space and then your compiler crashes?

267
00:13:01.261 --> 00:13:01.843
That can't happen.

268
00:13:01.843 --> 00:13:02.470
That's a real thing.

269
00:13:02.470 --> 00:13:05.117
I have definitely used production grade,
very fancy,

270
00:13:05.117 --> 00:13:08.440
millions of dollars have gone into
them compilers where I managed to,

271
00:13:08.440 --> 00:13:12.348
in some cases, on purpose cuz someone
didn't believe me that I could induce one.

272
00:13:12.348 --> 00:13:17.097
But also, in one case accidentally,
gotten a stack overflow from the compiler.

273
00:13:17.097 --> 00:13:21.957
And so if you want to,
it is possible to avoid this happening.

274
00:13:21.957 --> 00:13:24.343
The trade off is that it makes
your code a lot more complicated.

275
00:13:24.343 --> 00:13:26.827
So basically, if you want to
make your compiler stack safe,

276
00:13:26.827 --> 00:13:30.238
where you're not worrying about blowing
the stack, what you do is you essentially

277
00:13:30.238 --> 00:13:33.088
simulate the stack where you
basically make an array, for example.

278
00:13:33.088 --> 00:13:36.572
And instead of calling the function
recursively, you have it in a big loop,

279
00:13:36.572 --> 00:13:38.760
and you just are pushing
things onto the stack.

280
00:13:38.760 --> 00:13:40.537
and then when you finish your operation,

281
00:13:40.537 --> 00:13:42.668
you pop them off the stack
just like functions do,

282
00:13:42.668 --> 00:13:46.071
just like much worse ergonomically, and
then the trade off being that although

283
00:13:46.071 --> 00:13:49.556
the ergonomics are worse now, you don't
have to worry about blowing the stack.

284
00:13:49.556 --> 00:13:53.108
So, am I worried about it?

285
00:13:53.108 --> 00:13:54.652
Not for this example, certainly.

286
00:13:54.652 --> 00:13:58.443
[LAUGH] But I am actually worried about
it on production grade rock compiler.

287
00:13:58.443 --> 00:14:02.021
And that is actually something I do
try to use the less ergonomic, but

288
00:14:02.021 --> 00:14:03.079
stack save option.

289
00:14:03.079 --> 00:14:04.698
But I think I'm kind of
in the minority on that.

290
00:14:04.698 --> 00:14:07.641
I think most compiler authors would
just be like, just for courage.

291
00:14:07.641 --> 00:14:10.160
Nobody's gonna write something
that has that much depth, anyway.

292
00:14:10.160 --> 00:14:14.889
If they write a gazillion nested array
literals, they get what's coming to them.

293
00:14:14.889 --> 00:14:19.531
But I don't know, so I guess I am
unusually worried about that, but

294
00:14:19.531 --> 00:14:21.822
most compiler authors aren't.

295
00:14:21.822 --> 00:14:23.065
Great question.

296
00:14:23.065 --> 00:14:26.254
Any other questions before we
dive into name resolution?

297
00:14:26.254 --> 00:14:30.840
I'm curious, do you know if any
languages that implement that kind of

298
00:14:30.840 --> 00:14:34.510
protection against the stack blowing up,
so to speak?

299
00:14:34.510 --> 00:14:35.787
Go comes to mind.

300
00:14:35.787 --> 00:14:36.908
So the question was,

301
00:14:36.908 --> 00:14:41.094
do you know of any languages that protect
against that sort of stack blowing up?

302
00:14:41.094 --> 00:14:42.363
So there's trade offs here too.

303
00:14:42.363 --> 00:14:45.785
So Go has this thing, I know it was
originally called segmented stacks, and

304
00:14:45.785 --> 00:14:48.511
I think I read about them moving
to a different approach, but

305
00:14:48.511 --> 00:14:51.238
I'm not sure if it's still
called segmented stacks or not,

306
00:14:51.238 --> 00:14:53.449
or even if they did move
to a different approach.

307
00:14:53.449 --> 00:14:58.653
But basically, without going out a huge
rabbit hole about [LAUGH] stacks.

308
00:14:58.653 --> 00:15:01.176
The basic idea is that if you want,
you can make it so

309
00:15:01.176 --> 00:15:04.526
that every single function that
when you're in the code gen phase,

310
00:15:04.526 --> 00:15:07.991
when you code gen your functions,
you can insert a little bit of code at

311
00:15:07.991 --> 00:15:11.750
the beginning and a little bit of code
at the end that basically says, okay,

312
00:15:11.750 --> 00:15:14.445
I know exactly how much stack
space I'm going to use.

313
00:15:14.445 --> 00:15:15.626
I know how many variables I have,

314
00:15:15.626 --> 00:15:17.490
what's the maximum amount
of stack space I can use?

315
00:15:17.490 --> 00:15:20.724
And before I start running my actual
function body, I'm just gonna check and

316
00:15:20.724 --> 00:15:21.629
see if we got enough.

317
00:15:21.629 --> 00:15:23.540
And if we don't have enough, and

318
00:15:23.540 --> 00:15:26.902
you track that with these are all
your uses of stack space.

319
00:15:26.902 --> 00:15:28.195
And if we don't have enough,

320
00:15:28.195 --> 00:15:31.558
I'm gonna do this magical actually
allocate some new memory on the heap, and

321
00:15:31.558 --> 00:15:34.630
I'm gonna move all my stuff over to
that and start running over there.

322
00:15:34.630 --> 00:15:37.613
Now this does mean that
you can effectively guard

323
00:15:37.613 --> 00:15:40.825
against your stack ever
running out of stack space.

324
00:15:40.825 --> 00:15:45.220
It also means that if you recurs
indefinitely, you're just gonna run out of

325
00:15:45.220 --> 00:15:49.350
heat memory instead, which is less
likely to happen but even scarier.

326
00:15:49.350 --> 00:15:51.317
[LAUGH] Because you run
out of stack memory,

327
00:15:51.317 --> 00:15:54.609
the consequences are much less severe
than running out of heat memory.

328
00:15:54.609 --> 00:15:57.856
Plus it's probably gonna take a long
time to run out of heat memory, so

329
00:15:57.856 --> 00:16:01.433
it's gonna be the symptom will be, your
program hangs for a long time and then

330
00:16:01.433 --> 00:16:05.313
super blows up, whereas a stack overflow
happens, it gets resolved much faster.

331
00:16:05.313 --> 00:16:06.675
So, trade-offs.

332
00:16:06.675 --> 00:16:07.639
[LAUGH]

