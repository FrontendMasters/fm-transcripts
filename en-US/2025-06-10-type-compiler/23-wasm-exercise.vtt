WEBVTT

1
00:00:00.000 --> 00:00:01.565
All right, cool.

2
00:00:01.565 --> 00:00:06.481
Let's go through, well,
get into the last exercise.

3
00:00:06.481 --> 00:00:10.151
So as before,
we once again have our index.js that is,

4
00:00:10.151 --> 00:00:13.210
once again,
the thing that we're gonna run.

5
00:00:13.210 --> 00:00:17.410
And unlike the other sections, we're all
done with typecheck.js that's still there,

6
00:00:17.410 --> 00:00:19.850
it's doing its job,
whether someone's using it.

7
00:00:19.850 --> 00:00:24.494
But now we have our new thing of wasm.js
which is what we're actually gonna have

8
00:00:24.494 --> 00:00:26.723
our little section to mess around in.

9
00:00:26.723 --> 00:00:30.913
So let's cd into part 7 and
run this, and there we go.

10
00:00:30.913 --> 00:00:35.939
We're getting a whole bunch of WebAssembly
errors that are not working out right now.

11
00:00:35.939 --> 00:00:38.551
Even for
our test titled simple numeric edition,

12
00:00:38.551 --> 00:00:41.296
we're even blowing up on
simple numeric addition.

13
00:00:41.296 --> 00:00:42.318
Can you imagine it?

14
00:00:42.318 --> 00:00:45.847
As you may recall, we have done
quite a lot with binary operators,

15
00:00:45.847 --> 00:00:48.253
the two that we support being plus and
times.

16
00:00:48.253 --> 00:00:52.949
So right here, basically what we wanna do
is we want to use Webassembly's magical

17
00:00:52.949 --> 00:00:57.646
numbers to tell Webassembly, hey
Webassembly, it's multiplication time, or

18
00:00:57.646 --> 00:00:59.976
hey Webassembly, it is addition time.

19
00:00:59.976 --> 00:01:03.450
All we have to do, essentially,
is to just go look for

20
00:01:03.450 --> 00:01:07.023
the global OP constant,
which is short for operator.

21
00:01:07.023 --> 00:01:10.438
So that is back up at the top of
the file somewhere, there it is.

22
00:01:10.438 --> 00:01:12.687
That was it, yeah.

23
00:01:12.687 --> 00:01:13.827
So as you can see,

24
00:01:13.827 --> 00:01:18.774
there's a whole bunch of different
operations that WebAssembly supports.

25
00:01:18.774 --> 00:01:20.275
Let me get back there.

26
00:01:20.275 --> 00:01:24.958
So we got BLOCK, LOOP, IF, ELSE, END,
blah, blah, blah, on, and on, and on.

27
00:01:24.958 --> 00:01:28.869
And then in here we have
a whole bunch of F64 specific,

28
00:01:28.869 --> 00:01:34.380
F64 being our number type operations,
such as add, subtract, multiply.

29
00:01:34.380 --> 00:01:38.276
So of course we are interested
in these two out of all of them.

30
00:01:38.276 --> 00:01:40.300
I definitely recommend
referencing the constant.

31
00:01:40.300 --> 00:01:42.944
You could just put the hard-coded
number in there, but

32
00:01:42.944 --> 00:01:45.597
nobody's gonna ever remember
what that's all about.

33
00:01:45.597 --> 00:01:49.508
So I would definitely recommend not
doing that if you could avoid it.

34
00:01:49.508 --> 00:01:53.646
But yeah, so basically what we wanna do
is in both cases, we want to set this

35
00:01:53.646 --> 00:01:57.743
variable called opCode because what
we end up returning is concatBytes.

36
00:01:57.743 --> 00:02:00.643
Again, concatBytes being essentially
the same thing as concatString,

37
00:02:00.643 --> 00:02:03.543
except that we're concatenating bytes
instead of a string like we were at

38
00:02:03.543 --> 00:02:05.151
the very beginning with the formatter.

39
00:02:05.151 --> 00:02:10.140
So what we're gonna do here is essentially
say, okay, I'm going to concat left,

40
00:02:10.140 --> 00:02:14.918
which is basically where we have sort of
recursively gone down this path as usual

41
00:02:14.918 --> 00:02:19.483
doing a visit type thing where we're
just going down and building up bytes,

42
00:02:19.483 --> 00:02:21.015
bytes, bytes, bytes.

43
00:02:21.015 --> 00:02:23.740
We say, okay, take all the stuff
that we had on the left, and

44
00:02:23.740 --> 00:02:27.169
then we take all the stuff on the right,
and then that goes right after that.

45
00:02:27.169 --> 00:02:31.734
So you can imagine this big, long chunk of
bytes and this big, long chunk of bytes,

46
00:02:31.734 --> 00:02:35.797
and then after that we put the actual
opCode that we want to apply to those.

47
00:02:35.797 --> 00:02:38.811
Now, the reason they're in this order is,
again, going back to the WebAssembly,

48
00:02:38.811 --> 00:02:39.752
is a stack machine thing.

49
00:02:39.752 --> 00:02:43.628
So what WebAssembly wants you to do is,
essentially, when it sees this opCode,

50
00:02:43.628 --> 00:02:46.193
it says, aha,
I see you want me to do this operation.

51
00:02:46.193 --> 00:02:49.925
You'd better have put the two parameters
to that on the stack already.

52
00:02:49.925 --> 00:02:51.737
You better have put that one here and
that one here,

53
00:02:51.737 --> 00:02:53.522
because that's where I'm
expecting them to be.

54
00:02:53.522 --> 00:02:55.934
I expect them to be right
in front of the operation.

55
00:02:55.934 --> 00:02:59.083
Whereas, of course,
if we were writing this in JavaScript,

56
00:02:59.083 --> 00:03:00.606
we would put it in the middle.

57
00:03:00.606 --> 00:03:04.023
So we'd go like, put the opCode,
whether it's plus, or minus, or times, or

58
00:03:04.023 --> 00:03:07.542
whatever, in the middle, and then we put
the other operand on the other side, but

59
00:03:07.542 --> 00:03:09.490
WebAssembly doesn't want it in that order.

60
00:03:09.490 --> 00:03:13.228
Now, that's a pretty minor little
swap around, but you can kind of see,

61
00:03:13.228 --> 00:03:17.025
if you squint, we're doing the same
stuff that we would do in a formatter,

62
00:03:17.025 --> 00:03:20.912
just at a slightly different order and
with slightly different constants.

63
00:03:20.912 --> 00:03:23.215
So this is our one thing.

64
00:03:23.215 --> 00:03:24.971
It's a little light one to end on.

65
00:03:24.971 --> 00:03:27.930
Get a little WebAssembly in the mix and

66
00:03:27.930 --> 00:03:31.919
let's just take five minutes and
work through it.

67
00:03:37.737 --> 00:03:38.723
&gt;&gt; Richard Feldman: Great, all right,

68
00:03:38.723 --> 00:03:40.992
let's go through the final
set of solutions.

69
00:03:40.992 --> 00:03:42.084
It's a pretty simple one this time.

70
00:03:42.084 --> 00:03:44.945
So basically,
we're doing a switch on node.operator.

71
00:03:44.945 --> 00:03:47.627
If we wanted to add support for more in
the future, of course we could, but for

72
00:03:47.627 --> 00:03:49.172
right now, we've just got plus and times.

73
00:03:49.172 --> 00:03:52.753
So the cases here are pretty
straightforward, it's just like,

74
00:03:52.753 --> 00:03:54.587
OP.F64_ADD, F64_MUL.

75
00:03:54.587 --> 00:03:57.654
If you wanted to know the full range
of things that WebAssembly supports,

76
00:03:57.654 --> 00:03:59.935
this is where you'd sort of
just go to documentation.

77
00:03:59.935 --> 00:04:03.721
You can just find a long lists of here
they are, here's what the magic numbers

78
00:04:03.721 --> 00:04:06.760
are that correspond to these,
but pretty straightforward.

79
00:04:06.760 --> 00:04:11.425
At this point, just put it in there,
assign it to that thing, and we are good.

80
00:04:11.425 --> 00:04:14.589
One other note on this
is that at this point,

81
00:04:14.589 --> 00:04:20.576
we've already sort of generated the thing
that's going to be the first operand and

82
00:04:20.576 --> 00:04:24.185
the thing that's going to
be the second operand.

83
00:04:24.185 --> 00:04:28.838
If it is conceivable that not in the case
of plus and times obviously, but you might

84
00:04:28.838 --> 00:04:33.290
actually need to potentially generate
these in a different order depending on

85
00:04:33.290 --> 00:04:37.551
if you have operator specific things
that you need to do with these things.

86
00:04:37.551 --> 00:04:40.856
In this case, that doesn't come up, but
just like with everything else that we've

87
00:04:40.856 --> 00:04:44.163
talked, Cogen is something where sometimes
you have a nice neat pattern like this,

88
00:04:44.163 --> 00:04:47.263
and then other times it's sort of like,
yeah, in this situation it's fine.

89
00:04:47.263 --> 00:04:50.048
But then as soon as I introduce a raise,
wait a minute, now there's an edge case,

90
00:04:50.048 --> 00:04:50.744
and stuff like that.

91
00:04:50.744 --> 00:04:53.355
So all these things that
we're looking at here,

92
00:04:53.355 --> 00:04:55.785
this is kind of
the simplified version of it.

93
00:04:55.785 --> 00:04:58.253
It's like not necessarily
as simple as you can get.

94
00:04:58.253 --> 00:05:01.927
I try to kinda strike a balance with
like interesting type system and

95
00:05:01.927 --> 00:05:06.387
code gen features, and whatnot with,
something that's so easily digestible.

96
00:05:06.387 --> 00:05:10.675
But when you think about what's the
difference between this code right here

97
00:05:10.675 --> 00:05:14.159
and a big production gigantic
million line of code compiler?

98
00:05:14.159 --> 00:05:15.674
A lot of it just has to do with,

99
00:05:15.674 --> 00:05:19.027
there's just way more edge cases
around little stuff like this.

100
00:05:19.027 --> 00:05:22.189
But if you kinda blur the lines
a little bit, you can be like,

101
00:05:22.189 --> 00:05:25.551
okay, I can still see the same
basic fundamentals around this.

102
00:05:25.551 --> 00:05:30.060
They just have a lot more conditionals
in between in a lot of cases.

103
00:05:30.060 --> 00:05:32.838
So alright, so now we've got
our opcodes in there, and hey,

104
00:05:32.838 --> 00:05:35.308
look at that simple numeric
addition in WebAssembly.

105
00:05:35.308 --> 00:05:36.594
It's a beautiful thing.

106
00:05:36.594 --> 00:05:41.119
Any questions on WebAssembly before
we go to our final little wrap up,

107
00:05:41.119 --> 00:05:44.276
summarize everything
that we learned section?

