WEBVTT

1
00:00:00.000 --> 00:00:02.330
&gt;&gt; Richard Feldman: That segues
us into inferring functions,

2
00:00:02.330 --> 00:00:05.834
where we have a lot more interesting
moving pieces to deal with.

3
00:00:05.834 --> 00:00:08.283
So here we have our increment
function from earlier.

4
00:00:08.283 --> 00:00:10.172
So, we got x's, that's one argument.

5
00:00:10.172 --> 00:00:12.182
We're returning x +1.

6
00:00:12.182 --> 00:00:14.556
Again, we're just gonna go through and
like very quickly assign some things here.

7
00:00:14.556 --> 00:00:18.298
So, we're gonna have 0 for
the name of the increment.

8
00:00:18.298 --> 00:00:21.250
I'm just gonna use one to be
the entire function body.

9
00:00:21.250 --> 00:00:24.232
It's kind of a squiggly line there,
but basically this is, like, it's not,

10
00:00:24.232 --> 00:00:27.363
we're not talking about the argument,
we're not talking about the return type.

11
00:00:27.363 --> 00:00:30.108
We're talking about the function,
like the entire lambda.

12
00:00:30.108 --> 00:00:32.606
And, in JavaScript, of course,
as in the other languages,

13
00:00:32.606 --> 00:00:35.353
you can pass an entire function,
like as an argument to something.

14
00:00:35.353 --> 00:00:39.234
You can put it in an array, and, of
course, you can assign it to a constant.

15
00:00:39.234 --> 00:00:40.894
So that's what that type
is referring to that.

16
00:00:40.894 --> 00:00:45.512
That one, two, we're going to give two,
the argument of that function.

17
00:00:45.512 --> 00:00:47.613
Three is gonna be the return
type of the function.

18
00:00:47.613 --> 00:00:51.085
So those are all distinct pieces that all
have different type checking going on

19
00:00:51.085 --> 00:00:51.620
with them.

20
00:00:51.620 --> 00:00:56.173
And then we have four being the actual
expression here of like x + 1.

21
00:00:56.173 --> 00:01:00.074
And then within that we have two is
what we're going to assign here.

22
00:01:00.074 --> 00:01:02.589
Here we are doing the cut
to the chase thing, right?

23
00:01:02.589 --> 00:01:04.662
Where we're saying, like, okay,
I see it's a two in scope.

24
00:01:04.662 --> 00:01:06.162
So, like, don't bother some linking.

25
00:01:06.162 --> 00:01:07.460
Just like, that's a two.

26
00:01:07.460 --> 00:01:12.249
We know it's a two, like, it resolves
directly to that, and then one is

27
00:01:12.249 --> 00:01:17.211
gonna be its own type, which is just
gonna end up being unified to a number.

28
00:01:17.211 --> 00:01:18.948
Okay, so everything's null.

29
00:01:18.948 --> 00:01:20.027
Yeah, question, right?

30
00:01:20.027 --> 00:01:24.326
&gt;&gt; Speaker 2: Why are you able to just so,
in like, the past example,

31
00:01:24.326 --> 00:01:29.833
you had a const, and then you reference
that same variable down there.

32
00:01:29.833 --> 00:01:33.826
Why did you have a different ID
in the database in that case?

33
00:01:33.826 --> 00:01:36.595
But here you're able to,
&gt;&gt; Richard Feldman: Gotcha, just because I

34
00:01:36.595 --> 00:01:40.343
was doing the like, demonstrating
that this is sort of like the.

35
00:01:40.343 --> 00:01:43.434
This whole thing is following the like
maximum, like use variables for

36
00:01:43.434 --> 00:01:44.318
everything thing.

37
00:01:44.318 --> 00:01:45.794
You don't like, you don't need to do that.

38
00:01:45.794 --> 00:01:49.061
You definitely can just like cut
to the chase and be like, yeah.

39
00:01:49.061 --> 00:01:50.223
Like we know that x is 2.

40
00:01:50.223 --> 00:01:52.584
So, like, we don't need to
like make a new variable and

41
00:01:52.584 --> 00:01:54.760
simply get to say that
they're the same like that.

42
00:01:54.760 --> 00:01:57.851
The point in both cases is that like,
if you have knowledge for

43
00:01:57.851 --> 00:02:01.484
sure that these two things are going
to be identical, you have a choice.

44
00:02:01.484 --> 00:02:05.146
Like, either you can, like,
assign the thing and then, like,

45
00:02:05.146 --> 00:02:07.956
immediately turn around and
link them together.

46
00:02:07.956 --> 00:02:11.815
Or you can just say like no, these are
gonna be identical because the whole point

47
00:02:11.815 --> 00:02:15.327
of like the sim linking is that it's
supposed to mean that these two are so

48
00:02:15.327 --> 00:02:18.572
connected that it doesn't matter
which one of them gets changed.

49
00:02:18.572 --> 00:02:21.105
And it's gonna affect
the other one anyway, so

50
00:02:21.105 --> 00:02:23.585
either way should work equally well,
right?

51
00:02:23.585 --> 00:02:25.134
So, we've got all our variables in place,
and

52
00:02:25.134 --> 00:02:27.131
now we're gonna start going through and
inferring things.

53
00:02:27.131 --> 00:02:30.030
Now, keep in mind that at this
point we have no call sites,

54
00:02:30.030 --> 00:02:31.757
nobody is calling this function.

55
00:02:31.757 --> 00:02:35.500
All we're trying to do right now is we're
trying to use the information that we have

56
00:02:35.500 --> 00:02:39.083
about this function, namely that it
returns x +1, to learn things about what

57
00:02:39.083 --> 00:02:41.511
are the different pieces
that go into this function?

58
00:02:41.511 --> 00:02:44.437
Like, what can we say about that function
just using the information within

59
00:02:44.437 --> 00:02:45.313
the function itself?

60
00:02:45.313 --> 00:02:46.850
And then in the next section,

61
00:02:46.850 --> 00:02:51.168
we're gonna get into callers 'cause they
can also influence the function types.

62
00:02:51.168 --> 00:02:53.610
So here we have unify(0, 1).

63
00:02:53.610 --> 00:02:57.010
So this is basically our classic,
like unify this with this.

64
00:02:57.010 --> 00:02:59.381
As previously noted,
you could shortcut that if you want to.

65
00:02:59.381 --> 00:03:02.720
We're gonna really keep that consistent
with how we've been doing it.

66
00:03:02.720 --> 00:03:05.562
I'm keeping a little running tab
over here, of what is the reason for

67
00:03:05.562 --> 00:03:06.498
these unifications?

68
00:03:06.498 --> 00:03:09.553
Because we're gonna end up with
a quite a little stack of them here.

69
00:03:09.553 --> 00:03:12.076
Next one is gonna be we're
gonna unify four with number.

70
00:03:12.076 --> 00:03:15.659
So, the reason to do that is that
basically, whenever you have plus,

71
00:03:15.659 --> 00:03:18.657
much like when you have
multiplication in this language.

72
00:03:18.657 --> 00:03:21.063
We're choosing to say that
it always returns a number.

73
00:03:21.063 --> 00:03:23.340
Obviously, there are plenty of languages
where it could be a number or string, or

74
00:03:23.340 --> 00:03:23.974
something like that.

75
00:03:23.974 --> 00:03:25.938
But probably this is like, yeah,

76
00:03:25.938 --> 00:03:29.731
any time you see a plus just like
any time you see a multiplication,

77
00:03:29.731 --> 00:03:34.581
that means we immediately know that thing
is a number, no further analysis needed.

78
00:03:34.581 --> 00:03:37.339
Next, we unify 2 with number.

79
00:03:37.339 --> 00:03:41.381
So 2 is x over here and that's once again,
gonna be for exactly the same rule,

80
00:03:41.381 --> 00:03:43.111
except applied to the operands.

81
00:03:43.111 --> 00:03:47.354
So this is saying, just like with
multiplication, if you're on either side

82
00:03:47.354 --> 00:03:50.965
of the plus, you must be a number,
which leads us directly to 5.

83
00:03:50.965 --> 00:03:53.219
There's actually multiple reasons
that 5 needs to be a number.

84
00:03:53.219 --> 00:03:54.550
One is it's a number literal.

85
00:03:54.550 --> 00:03:56.527
And even if it weren't a number literal,

86
00:03:56.527 --> 00:03:59.191
the plus would cause us to do
the same unification here.

87
00:03:59.191 --> 00:04:03.308
So basically, like we're doing two
unifications, two unifies here, and

88
00:04:03.308 --> 00:04:05.510
both of them are exactly the same thing.

89
00:04:05.510 --> 00:04:07.111
They're gonna have the same result.

90
00:04:07.111 --> 00:04:10.690
It's always harmless to redo
the same unification multiple times.

91
00:04:10.690 --> 00:04:13.340
It's like a waste of performance.

92
00:04:13.340 --> 00:04:17.287
But point being that one of them is
because of plus, and plus says, hey,

93
00:04:17.287 --> 00:04:21.783
unify both operators was number, and the
other one is because of number literal.

94
00:04:21.783 --> 00:04:24.841
I don't know of any precedent for
trying to be fancy and, like,

95
00:04:24.841 --> 00:04:28.593
elide something like this and try to say,
like, hey, this is a waste of time.

96
00:04:28.593 --> 00:04:29.707
Don't do it.

97
00:04:29.707 --> 00:04:30.556
There might be a way to do that.

98
00:04:30.556 --> 00:04:32.231
I'm not sure.

99
00:04:32.231 --> 00:04:35.201
It probably wouldn't apply in all
scenarios, but there's probably some way

100
00:04:35.201 --> 00:04:38.316
you could be a little bit strategic about
like, hey, I'm about to go unify this.

101
00:04:38.316 --> 00:04:42.310
Let me go see if that's a number literal,
because, if so, we already did, like,

102
00:04:42.310 --> 00:04:44.431
when you're still at the parse node level.

103
00:04:44.431 --> 00:04:45.359
But yeah, I said,

104
00:04:45.359 --> 00:04:49.148
I'm not aware of people like trying to
get that fancy with unification yeah.

105
00:04:49.148 --> 00:04:52.157
&gt;&gt; Speaker 3: The algorithm is
called worst case optimal join.

106
00:04:52.157 --> 00:04:53.104
You can run that.

107
00:04:53.104 --> 00:04:54.255
&gt;&gt; Richard Feldman: Worst-case
optimal join okay?

108
00:04:54.255 --> 00:04:55.611
&gt;&gt; Speaker 3: Yeah.

109
00:04:55.611 --> 00:04:56.555
&gt;&gt; Richard Feldman: I guess
there was a way to do it.

110
00:04:56.555 --> 00:05:00.528
Cool, good to know.

111
00:05:00.528 --> 00:05:04.465
Okay, and then finally we have a unifying
4 and 3 and that's because of the return.

112
00:05:04.465 --> 00:05:05.579
So, what 4 and
3 are basically saying is like, okay.

113
00:05:05.579 --> 00:05:10.464
So this is the entire expression that's
being given to this return statement, and

114
00:05:10.464 --> 00:05:13.409
then 3 is the actual return
type of the function.

115
00:05:13.409 --> 00:05:16.516
Now, the reason it's important to connect
these is that return is statement that can

116
00:05:16.516 --> 00:05:17.997
appear multiple times in the function.

117
00:05:17.997 --> 00:05:21.210
So, similarly to the ternary that we
just learned about where we had the two

118
00:05:21.210 --> 00:05:24.117
different branches and the only
rule was they have to be connected.

119
00:05:24.117 --> 00:05:27.822
That's exactly the same relationship
that we have between return and

120
00:05:27.822 --> 00:05:32.277
the function's return type, except instead
of it being two branches, it's one or

121
00:05:32.277 --> 00:05:34.615
more [LAUGH] branches or
one or more returns.

122
00:05:34.615 --> 00:05:37.428
So we could have a bunch of
conditionals up in here, and

123
00:05:37.428 --> 00:05:40.375
each of them is doing its own
early return, for example.

124
00:05:40.375 --> 00:05:43.842
And if we had that, every single one of
those return statements would need to get

125
00:05:43.842 --> 00:05:47.186
unified with this return value, which
in turn means they all need to agree.

126
00:05:47.186 --> 00:05:50.047
So in other words,
if I have five different return

127
00:05:50.047 --> 00:05:54.147
statements in this function,
they all better be numbers or whatever.

128
00:05:54.147 --> 00:05:57.172
But one of them are numbers, and one of
them is a string, then we got a problem.

129
00:05:57.172 --> 00:05:58.883
That's gonna be a type mismatch.

130
00:05:58.883 --> 00:06:03.136
Doing this unification one time for every
single return we encounter is the way that

131
00:06:03.136 --> 00:06:07.529
we both do that, while also inferring what
is the actual return type of the function.

132
00:06:07.529 --> 00:06:09.449
Was there a question?

133
00:06:09.449 --> 00:06:14.039
&gt;&gt; Speaker 2: You might go through this,
but I'm struggling to understand,

134
00:06:14.039 --> 00:06:20.255
when you unify 4 and number, how you're
inferring that number type without direct.

135
00:06:20.255 --> 00:06:23.678
I would think you'd have to go to
the + is where that comes from.

136
00:06:23.678 --> 00:06:26.848
&gt;&gt; Richard Feldman: Yeah, so basically,
the rule for + is the same as the rule

137
00:06:26.848 --> 00:06:30.409
that we, for this language,
we're choosing to have the rule for

138
00:06:30.409 --> 00:06:34.914
+ be the same as the rule that we chose to
multiply, which is basically just that.

139
00:06:34.914 --> 00:06:38.786
+ means, whenever we see +,
we're always gonna unify this with number.

140
00:06:38.786 --> 00:06:42.078
And we're always gonna unify
this with whatever's there,

141
00:06:42.078 --> 00:06:45.832
because we're saying plus takes two
numbers, and so I have no idea.

142
00:06:45.832 --> 00:06:48.156
Without even looking at this, I'm like,
whatever this thing's type ID is,

143
00:06:48.156 --> 00:06:49.263
it's getting unified with number.

144
00:06:49.263 --> 00:06:51.729
Whatever this thing's type ID is,
it's getting unified with a number.

145
00:06:51.729 --> 00:06:56.697
And also, whatever my entire return or
return value is the wrong term, like,

146
00:06:56.697 --> 00:07:01.238
whatever I evaluate to that four is
also getting unified with numbers.

147
00:07:01.238 --> 00:07:03.912
So, x is getting it,
because it's one of the operands,

148
00:07:03.912 --> 00:07:06.811
one is getting it because it's
one of the other operands, and

149
00:07:06.811 --> 00:07:10.360
then separately it's getting it again,
because it's a number literal.

150
00:07:10.360 --> 00:07:14.045
And then the entire thing that is to say,
the four is getting it,

151
00:07:14.045 --> 00:07:17.133
because that's what the plus returns,
so to speak.

152
00:07:17.133 --> 00:07:17.850
Does that make sense?

153
00:07:17.850 --> 00:07:19.510
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Richard Feldman: Okay.

154
00:07:19.510 --> 00:07:21.867
&gt;&gt; Speaker 3: In another
way of saying this,

155
00:07:21.867 --> 00:07:26.776
we set some rules that the plus
operator has a fixed definition.

156
00:07:26.776 --> 00:07:29.399
&gt;&gt; Richard Feldman: Yeah, so
that's the language design thing, right?

157
00:07:29.399 --> 00:07:33.215
Every language has some set of
hard-coded rules that in some languages,

158
00:07:33.215 --> 00:07:37.274
have more than others, but the hard-coded
rule that we have decided to use for

159
00:07:37.274 --> 00:07:39.633
this language,
that this is how plus works.

160
00:07:39.633 --> 00:07:42.290
We could make it have totally
different semantics, but

161
00:07:42.290 --> 00:07:46.132
these are pretty reasonable semantics,
and also, give you a good intuition for

162
00:07:46.132 --> 00:07:49.433
what's going on here without having
gotten into function calling.

163
00:07:49.433 --> 00:07:53.198
Which is an even fancier version
of what we're doing here.

164
00:07:53.198 --> 00:07:56.270
All right, so
just going through the actual unification.

165
00:07:56.270 --> 00:07:59.331
So, this one basically says,
all right, simply get to 1.

166
00:07:59.331 --> 00:08:00.834
Next one is a unify 4 with number.

167
00:08:00.834 --> 00:08:03.929
So 4 was null, now it's number.

168
00:08:03.929 --> 00:08:05.326
Same thing with 2, now it's number.

169
00:08:05.326 --> 00:08:07.069
5, again, was number.

170
00:08:07.069 --> 00:08:09.303
These two, it's like it already is number,
so we're fine, we'll leave that alone.

171
00:08:09.303 --> 00:08:11.654
That one's basically a no-op or
wasted work.

172
00:08:11.654 --> 00:08:16.491
And then finally, unify 4 with 3, and so
that basically results in 3 being symlinks

173
00:08:16.491 --> 00:08:20.221
to four, which means it yet
again is going to end up being a number.

174
00:08:20.221 --> 00:08:24.196
Now, we may notice that we finished
all of our unifications, and

175
00:08:24.196 --> 00:08:27.169
at this point we still
have somebody being null.

176
00:08:27.169 --> 00:08:29.986
Now, as previously noted,
in future examples,

177
00:08:29.986 --> 00:08:34.157
we will actually have functions that
like where that stays null for real.

178
00:08:34.157 --> 00:08:38.049
But in this case, we actually do have
some, sorry, that's the wrong one.

179
00:08:38.049 --> 00:08:40.458
I was referring to one, right?

180
00:08:40.458 --> 00:08:43.339
So one is the type of the entire function.

181
00:08:43.339 --> 00:08:46.974
So, the type of the entire function,
yeah, let's talk about that.

182
00:08:46.974 --> 00:08:50.804
Basically, what we have here is
we have a concrete type that has

183
00:08:50.804 --> 00:08:54.875
more information than what we've
seen in a concrete type before.

184
00:08:54.875 --> 00:08:58.109
So previously our concrete types
are just like, I am a concrete string.

185
00:08:58.109 --> 00:09:00.099
The end, goodbye or I'm a concrete number.

186
00:09:00.099 --> 00:09:01.499
The end, goodbye.

187
00:09:01.499 --> 00:09:05.513
Here we have, I am a concrete function,
and I have more information.

188
00:09:05.513 --> 00:09:07.601
Now this more information
is very important for

189
00:09:07.601 --> 00:09:11.321
our type checker implementation, because
we have to take this stuff into account.

190
00:09:11.321 --> 00:09:15.621
For example, when we were saying
if I'm unifying this string and

191
00:09:15.621 --> 00:09:19.841
this number, all I need to look at,
if this field is different,

192
00:09:19.841 --> 00:09:22.205
it's a type mismatch, game over.

193
00:09:22.205 --> 00:09:23.271
That's still true here.

194
00:09:23.271 --> 00:09:26.879
If you look at this field, and you're
this is a function and that's a string,

195
00:09:26.879 --> 00:09:27.657
type mismatch.

196
00:09:27.657 --> 00:09:29.877
This is a function,
that's a number, type mismatch.

197
00:09:29.877 --> 00:09:33.222
But if they're both function,
it's actually not sufficient

198
00:09:33.222 --> 00:09:36.692
anymore to just conclude that they
automatically are unified and

199
00:09:36.692 --> 00:09:40.305
everything, it's fine because
there's more information here.

200
00:09:40.305 --> 00:09:44.546
So, if with strings and numbers, if it's
like they have the same concrete type,

201
00:09:44.546 --> 00:09:48.855
we're in that branch of unify, where
we're like, yeah, we're done moving on.

202
00:09:48.855 --> 00:09:52.080
But if it's specifically two functions,
there's more work to do,

203
00:09:52.080 --> 00:09:55.098
because these functions could
have different argument types.

204
00:09:55.098 --> 00:09:57.438
They could have different return types.

205
00:09:57.438 --> 00:09:59.939
Basically, what we need to do
at this point is say, well,

206
00:09:59.939 --> 00:10:03.516
before we can answer the question of like,
what's going on with these functions,

207
00:10:03.516 --> 00:10:05.427
we essentially need to recursively unify.

208
00:10:05.427 --> 00:10:08.448
We basically need to say like,
now that we've gotten to a point

209
00:10:08.448 --> 00:10:11.811
in unify where we have two functions,
the next step is to go through and

210
00:10:11.811 --> 00:10:14.551
unify all their arguments and
unify their return value.

211
00:10:14.551 --> 00:10:19.225
And any one of those could produce
a tightness match absolutely.

212
00:10:19.225 --> 00:10:22.676
But basically, the reason that we have to
do that is because otherwise we are just

213
00:10:22.676 --> 00:10:24.468
completely disregarding these things.

214
00:10:24.468 --> 00:10:25.895
They're sort of sneaking by.

215
00:10:25.895 --> 00:10:29.584
That's how you get type unsoundness
is where you have types that

216
00:10:29.584 --> 00:10:31.984
are participating in type unification.

217
00:10:31.984 --> 00:10:34.176
But you're not actually constraining
them the way that they're supposed to

218
00:10:34.176 --> 00:10:34.690
be constrained.

219
00:10:34.690 --> 00:10:36.611
We've just like missed some constraints.

220
00:10:36.611 --> 00:10:40.915
So this is one of several complications
that are going to end up being added on to

221
00:10:40.915 --> 00:10:45.549
our unify function and that are gonna make
it ultimately more complicated than the,

222
00:10:45.549 --> 00:10:48.115
well, it still took up
like an entire screen.

223
00:10:48.115 --> 00:10:52.623
But the simpler version that we
talked about two sections ago,

224
00:10:52.623 --> 00:10:56.630
back when we didn't have any
functions to think about.

225
00:10:56.630 --> 00:10:58.826
So, the way that I'm gonna represent
this in the database is like this.

226
00:10:58.826 --> 00:11:01.648
So, this is basically just like
a little rotation I made up for,

227
00:11:01.648 --> 00:11:02.657
this is the argument.

228
00:11:02.657 --> 00:11:05.338
The argument is a sim
link to 2 in this case.

229
00:11:05.338 --> 00:11:10.312
And then the return value is
essentially a sim link to 3.

230
00:11:10.312 --> 00:11:13.207
This is really just me trying to fit
something concise on the slide, but

231
00:11:13.207 --> 00:11:15.825
in the actual compiler,
this is how we're gonna represent it.

232
00:11:15.825 --> 00:11:18.227
We're gonna say you have
a concrete function.

233
00:11:18.227 --> 00:11:20.940
Here are your ARGs, and
then here is what it returns.

234
00:11:20.940 --> 00:11:23.150
And I said returns,
not because it's portable,

235
00:11:23.150 --> 00:11:26.465
because return is a keyword in JavaScript,
so I can't call it return, but

236
00:11:26.465 --> 00:11:28.584
you can also say ret,
like is short for return.

237
00:11:28.584 --> 00:11:32.786
But I figured, if you're not used
to seeing ret all over the place,

238
00:11:32.786 --> 00:11:37.091
like I have a compiler code bases,
returns is probably reasonable.

239
00:11:37.091 --> 00:11:40.938
Okay, so actually, sorry,
before we move on to calling.

240
00:11:40.938 --> 00:11:44.257
Any questions on defining functions, yeah?

241
00:11:44.257 --> 00:11:44.869
&gt;&gt; Speaker 4: I guess I'm curious.

242
00:11:44.869 --> 00:11:49.829
Like, when you represent the function
instead of the database, I mean,

243
00:11:49.829 --> 00:11:54.229
obviously, you have args is to
like a concrete value, but like,

244
00:11:54.229 --> 00:11:55.993
would you want that to be?

245
00:11:55.993 --> 00:11:57.516
Like you said, like, number, right?

246
00:11:57.516 --> 00:11:59.787
And then returns would
be also number as well.

247
00:11:59.787 --> 00:12:04.538
Or would you just stuff the actual,
I guess,

248
00:12:04.538 --> 00:12:08.175
like node in the database itself.

249
00:12:08.175 --> 00:12:08.886
&gt;&gt; Richard Feldman: I didn't quite follow.

250
00:12:08.886 --> 00:12:12.073
So which thing are we stuffing
in the database or not?

251
00:12:12.073 --> 00:12:14.067
&gt;&gt; Speaker 4: The function definition,
if we have like.

252
00:12:14.067 --> 00:12:14.663
&gt;&gt; Richard Feldman: Yes.

253
00:12:14.663 --> 00:12:17.610
&gt;&gt; Speaker 4: So
maybe I'm misunderstanding it a bit.

254
00:12:17.610 --> 00:12:20.505
Is like on the bottom left,
that object with concrete function?

255
00:12:20.505 --> 00:12:21.606
&gt;&gt; Richard Feldman: Yeah.

256
00:12:21.606 --> 00:12:24.887
&gt;&gt; Speaker 4: Is that the exact
value that would be stuffed?

257
00:12:24.887 --> 00:12:25.611
&gt;&gt; Richard Feldman: Yes, yeah, right.
So,

258
00:12:25.611 --> 00:12:28.654
in the same way that when we say
number in the table over here,

259
00:12:28.654 --> 00:12:31.829
what we're actually meaning is
concrete colon quote number.

260
00:12:31.829 --> 00:12:32.807
&gt;&gt; Speaker 4: Yeah.
&gt;&gt; Richard Feldman: It's the same

261
00:12:32.807 --> 00:12:34.873
exact thing,
except that it's concrete function, and

262
00:12:34.873 --> 00:12:37.337
then there's more information than
there is in the case of number.

263
00:12:37.337 --> 00:12:39.788
&gt;&gt; Speaker 4: Gotcha, so
I guess what I'm wondering, and

264
00:12:39.788 --> 00:12:42.574
sorry if maybe I misunderstood
you like confused.

265
00:12:42.574 --> 00:12:46.947
It's like for like args we have two,
like the value two, but would that be?

266
00:12:46.947 --> 00:12:48.776
&gt;&gt; Richard Feldman: That's like this.

267
00:12:48.776 --> 00:12:50.537
&gt;&gt; Speaker 4: I see.
&gt;&gt; Richard Feldman: Type ID two yeah.

268
00:12:50.537 --> 00:12:51.471
&gt;&gt; Speaker 4: I'm sorry, that makes sense.

269
00:12:51.471 --> 00:12:52.491
That was like the value too.

270
00:12:52.491 --> 00:12:53.066
&gt;&gt; Richard Feldman: Yeah.
&gt;&gt; Speaker 4: Okay.

271
00:12:53.066 --> 00:12:54.897
&gt;&gt; Richard Feldman: Yeah,
so I like, I don't know.

272
00:12:54.897 --> 00:12:56.772
Maybe I should have
represented differently here.

273
00:12:56.772 --> 00:12:57.460
I just feel like I said.

274
00:12:57.460 --> 00:12:58.300
&gt;&gt; Speaker 4: I think I have a citation.

275
00:12:58.300 --> 00:13:01.459
&gt;&gt; Richard Feldman: But it's the type ID
and then usually the way we refer to.

276
00:13:01.459 --> 00:13:05.199
It's whatever that type of years like
the sublink notation here, but yeah,

277
00:13:05.199 --> 00:13:06.590
this is the source of truth.

278
00:13:06.590 --> 00:13:08.166
This is what's actually
the compiler [LAUGH].

279
00:13:08.166 --> 00:13:12.436
&gt;&gt; Speaker 4: I was evaluating it and you
put x as 2 and term value is actually 3

280
00:13:12.436 --> 00:13:16.720
sub, that's why I think there's
a bit of confusion on my part.

281
00:13:16.720 --> 00:13:19.771
&gt;&gt; Richard Feldman: Yeah, so 2 is
the argument, 3 is our term value, yeah?

282
00:13:19.771 --> 00:13:23.459
&gt;&gt; Speaker 4: Correct, but is you saying
that's a value in the database or

283
00:13:23.459 --> 00:13:24.553
the key, the ID?

284
00:13:24.553 --> 00:13:25.507
&gt;&gt; Richard Feldman: It's the ID, yeah.

285
00:13:25.507 --> 00:13:28.764
&gt;&gt; Speaker 4: Yeah, I was actually
saying the actual return value.

286
00:13:28.764 --> 00:13:29.406
&gt;&gt; Richard Feldman: I see.

287
00:13:29.406 --> 00:13:30.961
&gt;&gt; Speaker 4: So
that was just my confusion.

288
00:13:30.961 --> 00:13:31.885
&gt;&gt; Richard Feldman: Okay, got it.

289
00:13:31.885 --> 00:13:32.702
&gt;&gt; Speaker 4: Yeah, exactly.

290
00:13:32.702 --> 00:13:36.878
&gt;&gt; Richard Feldman: Okay, cool, yeah,
and it is worth noting that much like

291
00:13:36.878 --> 00:13:42.098
the symlinks, these can change over time,
as other things affect them

292
00:13:42.098 --> 00:13:47.424
outside the definition of the function,
such as function calls [LAUGH].

293
00:13:47.424 --> 00:13:49.021
So let's talk about those.

