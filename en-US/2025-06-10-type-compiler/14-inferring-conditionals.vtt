WEBVTT

1
00:00:00.000 --> 00:00:01.979
All right, let's move on to part five.

2
00:00:01.979 --> 00:00:04.361
Let's talk about actually
inferring functions.

3
00:00:04.361 --> 00:00:06.132
This is a big part of programming and

4
00:00:06.132 --> 00:00:08.384
unsurprisingly a big
part of type checking.

5
00:00:08.384 --> 00:00:10.300
So let's get into it.

6
00:00:10.300 --> 00:00:13.505
First off, we're gonna start off with
conditionals, which are not functions, but

7
00:00:13.505 --> 00:00:15.969
have a good number of things in
common with inferring functions.

8
00:00:15.969 --> 00:00:18.377
So, since we wanna learn how
to infer conditionals anyway,

9
00:00:18.377 --> 00:00:20.044
they're kind of a nice little on-ramp.

10
00:00:20.044 --> 00:00:23.511
We're about to talk about next, which is
in first inferring function declaration.

11
00:00:23.511 --> 00:00:25.974
So, this is we're actually writing out,
this is the body of the function.

12
00:00:25.974 --> 00:00:27.617
These are the arguments that states, etc.

13
00:00:27.617 --> 00:00:30.349
And then finally,
actually inferring function calls.

14
00:00:30.349 --> 00:00:33.430
So, calling functions, as it turns out,
is actually a little bit of

15
00:00:33.430 --> 00:00:36.583
a different beast than declaring
them when it comes to type checking.

16
00:00:36.583 --> 00:00:39.848
Okay, so we're gonna start with
conditionals as sort of the nice little

17
00:00:39.848 --> 00:00:40.711
onward ramp here.

18
00:00:40.711 --> 00:00:43.617
So again, we've got our const an equal hi,
this time we're gonna,

19
00:00:43.617 --> 00:00:47.074
instead of the classic B equals A, or
something like that, we're actually gonna

20
00:00:47.074 --> 00:00:50.651
define a variable called Cond, which is
gonna be the condition of our conditional.

21
00:00:50.651 --> 00:00:54.868
So this is like the if, it would be what
comes in the parentheses right after if.

22
00:00:54.868 --> 00:00:58.790
But since we're doing only ternaries here,
for reasons that we'll talk about later,

23
00:00:58.790 --> 00:01:00.751
we're just gonna say Cond equals true, and

24
00:01:00.751 --> 00:01:03.258
that's what's gonna be our
condition in our ternary.

25
00:01:03.258 --> 00:01:05.283
And then finally,
we actually have the ternary.

26
00:01:05.283 --> 00:01:09.744
We're saying const b equals and
then con parentheses a colon other.

27
00:01:09.744 --> 00:01:13.466
The reason we're doing ternaries here
is that basically if you know how to do

28
00:01:13.466 --> 00:01:17.783
ternaries when it comes to type inference
and type unification, if it's very simple.

29
00:01:17.783 --> 00:01:20.945
It's basically just like this part isn't
allowed, so there's just strictly less to

30
00:01:20.945 --> 00:01:23.979
think to think about, especially if you've
already got a concept of statements,

31
00:01:23.979 --> 00:01:25.084
which we do in this language.

32
00:01:25.084 --> 00:01:28.778
So, yeah, if you want to think
about it as if you just can, but

33
00:01:28.778 --> 00:01:33.116
ternaries are more interesting because
they evaluate to a value, and so

34
00:01:33.116 --> 00:01:36.483
we get to talk about that aspect
of how we unify all that.

35
00:01:36.483 --> 00:01:40.084
All right, in this language,
we are not gonna get into truthiness.

36
00:01:40.084 --> 00:01:44.790
Somebody asked earlier about scenarios
where you have like plus can accept either

37
00:01:44.790 --> 00:01:46.025
strings or numbers.

38
00:01:46.025 --> 00:01:50.441
Truthiness is in a similar boat where like
if you're trying to infer the type of con

39
00:01:50.441 --> 00:01:54.740
and you're like, well, it could be this or
it could be that or it could be that.

40
00:01:54.740 --> 00:01:58.206
Truthiness, I guess, can theoretically
go as far as to say like it could be

41
00:01:58.206 --> 00:02:00.029
anything and we might accept it there.

42
00:02:00.029 --> 00:02:05.002
We're not doing that, we're just gonna say
this has to be a Boolean, that's the rule.

43
00:02:05.002 --> 00:02:07.396
Cuz if you're going all the way,
then you could actually just say like,

44
00:02:07.396 --> 00:02:08.228
there is no constraint.

45
00:02:08.228 --> 00:02:10.793
It's just literally you can put whatever
you want there and it'll type check.

46
00:02:10.793 --> 00:02:14.132
I guess that would work, but
then that's not very reliable at runtime.

47
00:02:14.132 --> 00:02:17.143
Pretty much every language that uses
Hindley Miller has the rule that it's

48
00:02:17.143 --> 00:02:20.368
like, no, if you're doing a conditional,
the condition has to be a Boolean.

49
00:02:20.368 --> 00:02:21.550
True or False, that's it.

50
00:02:21.550 --> 00:02:23.063
So that's what we're gonna do here.

51
00:02:23.063 --> 00:02:27.026
And then the other rule that we have
here is that we have two branches for

52
00:02:27.026 --> 00:02:27.974
the condition.

53
00:02:27.974 --> 00:02:30.308
But unlike with
the multiplication scenario,

54
00:02:30.308 --> 00:02:32.475
we don't know what those
are ahead of time.

55
00:02:32.475 --> 00:02:35.017
We don't know these are both numbers.

56
00:02:35.017 --> 00:02:37.579
We just know they got to be the same.

57
00:02:37.579 --> 00:02:39.031
So why do they have to be the same?

58
00:02:39.031 --> 00:02:41.632
Well, we're trying to assign them to be.

59
00:02:41.632 --> 00:02:44.859
So imagine if you're like, okay, this
one is a string, but this other thing,

60
00:02:44.859 --> 00:02:46.752
this isn't a string,
this might be a number.

61
00:02:46.752 --> 00:02:48.591
So if you take this branch,
you get a number.

62
00:02:48.591 --> 00:02:50.583
You take this branch, you get a string.

63
00:02:50.583 --> 00:02:51.936
Well, then okay, fine.

64
00:02:51.936 --> 00:02:52.950
So what's the type of B?

65
00:02:52.950 --> 00:02:55.052
It's like string or number?

66
00:02:55.052 --> 00:02:56.887
I mean, yeah, that's maybe nice.

67
00:02:56.887 --> 00:02:59.068
You see why Typescript has union
types as a language feature, but

68
00:02:59.068 --> 00:03:00.190
we're not gonna get that fancy.

69
00:03:00.190 --> 00:03:01.608
We're gonna say, no, no, no,

70
00:03:01.608 --> 00:03:05.265
it's If you're gonna have a condition with
two branches, and either those branches

71
00:03:05.265 --> 00:03:08.706
can end up being assigned to something
here cuz it's a ternary then guess what?

72
00:03:08.706 --> 00:03:10.130
I don't know what type they are.

73
00:03:10.130 --> 00:03:12.642
You can put whatever type you want there,
but it's got to be the same type.

74
00:03:12.642 --> 00:03:16.720
They have to be able to unify with
one another, otherwise type mismatch.

75
00:03:16.720 --> 00:03:20.080
So, this is gonna be our first example
of a type mismatch that can come without

76
00:03:20.080 --> 00:03:22.317
actually having a hard
coded type involved at all.

77
00:03:22.317 --> 00:03:25.512
We're just saying, hey,
if these are two different concrete types,

78
00:03:25.512 --> 00:03:29.361
I don't care what the concrete types were,
if they were different, type mismatch.

79
00:03:29.361 --> 00:03:34.099
Okay, so really, what this sort of reduces
down to is, essentially, it's like,

80
00:03:34.099 --> 00:03:37.198
okay, these three things all
have to be the same type.

81
00:03:37.198 --> 00:03:40.596
Whatever type they are, they're all
gonna end up being the same thing.

82
00:03:40.596 --> 00:03:43.332
These two have to be the same type
because that's the rule of the branches.

83
00:03:43.332 --> 00:03:45.949
And then this one has to be the same
type as those because it's being

84
00:03:45.949 --> 00:03:46.714
assigned to them.

85
00:03:46.714 --> 00:03:49.721
So, it's either going to be assigned to
a or it's gonna be assigned to other,

86
00:03:49.721 --> 00:03:51.417
depending on whether Cond is true or
false.

87
00:03:51.417 --> 00:03:55.272
And so because of that, we basically can
just simplify that down to just saying,

88
00:03:55.272 --> 00:03:58.349
like, look, all three of these
things have to be the same type.

89
00:03:58.349 --> 00:04:00.923
They all need to get unified
together with one another.

90
00:04:00.923 --> 00:04:03.468
Okay, so let's go and do that.

91
00:04:03.468 --> 00:04:06.561
So as we do more and more of these
unifications, I'm gonna kinda

92
00:04:06.561 --> 00:04:10.359
speed run a little bit setting up the Ids
that we're gonna put in our database.

93
00:04:10.359 --> 00:04:15.908
So here we go this is basically
the same kinda stuff we've seen before,

94
00:04:15.908 --> 00:04:20.810
a is 0, a is symlinked to 1is a string,
2 is symlinked to 3,

95
00:04:20.810 --> 00:04:23.317
and 3 in this case is a Boolean.

96
00:04:23.317 --> 00:04:25.717
I'm gonna use the term
Boole rather than Boolean.

97
00:04:25.717 --> 00:04:28.858
I'm not gonna lie mainly because I
didn't wanna have it run off the side of

98
00:04:28.858 --> 00:04:29.373
the slide.

99
00:04:29.373 --> 00:04:33.594
But there was a little bit of interesting
history there, which is that booleans

100
00:04:33.594 --> 00:04:37.756
are invented by the logician George Boole,
which is spelled B-O-O-L-E.

101
00:04:37.756 --> 00:04:40.573
We totally have room for an E there,
but I'm just gonna follow programming

102
00:04:40.573 --> 00:04:42.373
tradition and
just mess with that guy's name.

103
00:04:42.373 --> 00:04:44.387
For no reason, just like,
chop off the E and

104
00:04:44.387 --> 00:04:46.680
then some languages go as
far as to make it longer.

105
00:04:46.680 --> 00:04:51.037
They go like, B-O-O-L-E-A-N, like Boolean
and then he still not using his name.

106
00:04:51.037 --> 00:04:54.139
So really, for whatever reason, the
programming rules has decided that this

107
00:04:54.139 --> 00:04:55.930
logician, we will never
use his exact name.

108
00:04:55.930 --> 00:04:59.130
We will only either truncate it or
extend it, who knows?

109
00:04:59.130 --> 00:05:04.972
Anyway, okay, so, now at this point,
we've got our basic types here.

110
00:05:04.972 --> 00:05:08.857
We've got our types database populated,
and what we want to do is we want

111
00:05:08.857 --> 00:05:12.425
to start setting up the relationships
between the conditional and

112
00:05:12.425 --> 00:05:16.202
its two branches and this return
type that it's getting assigned to.

113
00:05:16.202 --> 00:05:19.841
So, we're just gonna go ahead and
assign some numbers to those, and

114
00:05:19.841 --> 00:05:23.919
then we need to add one more here,
which is for the entire expression itself,

115
00:05:23.919 --> 00:05:26.394
like the ternary,
like what it evaluates to.

116
00:05:26.394 --> 00:05:29.304
This is spoiler alert going
to get similar to B, but

117
00:05:29.304 --> 00:05:33.366
it's important that we do have that
as a concept because in not all cases

118
00:05:33.366 --> 00:05:37.657
are we going to be like immediately
assigning this to be like a named thing.

119
00:05:37.657 --> 00:05:41.020
You can also have a ternary like in
the middle of a function call or

120
00:05:41.020 --> 00:05:43.467
something like that or
like an Array element.

121
00:05:43.467 --> 00:05:47.602
So, it's pretty important that we do have
some type in general, like in the general

122
00:05:47.602 --> 00:05:51.213
case, to track, okay, what is
the inferred type of this whole thing, so

123
00:05:51.213 --> 00:05:53.574
that we can unify that
with these other things.

124
00:05:53.574 --> 00:05:56.607
Okay, at first we
initialize these to null.

125
00:05:56.607 --> 00:06:00.884
So, let's just start by unifying this one,
just to sorta get that one out of the way.

126
00:06:00.884 --> 00:06:05.340
So, it's like, alright, initially B, we've
got an idea for initialize it to null,

127
00:06:05.340 --> 00:06:07.281
and then we're gonna unify 4 and 8.

128
00:06:07.281 --> 00:06:07.971
Why are we doing that?

129
00:06:07.971 --> 00:06:10.909
Because just like what we always
do with with conditionals and

130
00:06:10.909 --> 00:06:13.618
equals, it's like you got
the thing to left the equals,

131
00:06:13.618 --> 00:06:16.046
that's your the ID, and
then you have equals, and

132
00:06:16.046 --> 00:06:19.229
then you have what's whatever's
on the other side of the equals.

133
00:06:19.229 --> 00:06:22.111
And there we've conveniently made
this entire eight thing here,

134
00:06:22.111 --> 00:06:23.869
so we're just gonna similarly do that.

135
00:06:23.869 --> 00:06:27.190
It's exactly the same thing as what
we did in the first two consts.

136
00:06:27.190 --> 00:06:30.428
Okay, so now let's move on to five here,
which is the condition.

137
00:06:30.428 --> 00:06:34.589
This is another easy one because
we've said that the rule is that

138
00:06:34.589 --> 00:06:39.234
anything that is in a ternary condition
has to be bool in this language.

139
00:06:39.234 --> 00:06:42.161
So we can basically just pretty
directly say, yeah, okay.

140
00:06:42.161 --> 00:06:46.562
Like, we know that cond is similar to two
because, or, sorry, not simply to two.

141
00:06:46.562 --> 00:06:50.088
It's it resolves the two,
because we're saying, like, yeah, that's,

142
00:06:50.088 --> 00:06:52.164
that's just what that, that look up means.

143
00:06:52.164 --> 00:06:55.287
And then we can take that one
more step and say, like, okay,

144
00:06:55.287 --> 00:06:57.698
this is a bool because
it's in that position.

145
00:06:57.698 --> 00:07:01.230
So, in exactly the same way that when
we were doing the multiplication thing,

146
00:07:01.230 --> 00:07:04.601
we said, both things on either side of
the multiplication operator have to

147
00:07:04.601 --> 00:07:05.202
be numbers.

148
00:07:05.202 --> 00:07:07.503
With ternaries,
it's exactly the same thing,

149
00:07:07.503 --> 00:07:10.252
except instead of it being on
either side of the operator,

150
00:07:10.252 --> 00:07:12.850
it's just like this particular
thing has to be a Bool.

151
00:07:12.850 --> 00:07:16.511
And then, yeah,
we do the resolving it thing.

152
00:07:16.511 --> 00:07:19.643
And sure enough, we say, cool,
that does end up resolving to a Bool.

153
00:07:19.643 --> 00:07:23.413
So, all is well, the fact that 2
was assigned to a Bool and also,

154
00:07:23.413 --> 00:07:26.305
we have the constraint of
that thing being a Bool.

155
00:07:26.305 --> 00:07:27.896
They're both Bools, so we're all set.

156
00:07:27.896 --> 00:07:31.400
If in contrast,
we had said that this is a string, so

157
00:07:31.400 --> 00:07:33.718
the string not a Bool in this case.

158
00:07:33.718 --> 00:07:35.846
Then if you go through
the same unification steps,

159
00:07:35.846 --> 00:07:38.368
you end up with a string attempting
to unify with a Boolean and

160
00:07:38.368 --> 00:07:40.313
then you're just gonna
get a tight mismatch.

161
00:07:40.313 --> 00:07:45.282
So, this is basically just like how the
types are flowing through to end up with

162
00:07:45.282 --> 00:07:48.536
us arriving at a type mismatch for
this condition.

163
00:07:48.536 --> 00:07:50.558
Okay, but so let's put it back to true,

164
00:07:50.558 --> 00:07:53.786
because that's actually what we
want to do with this scenario.

165
00:07:53.786 --> 00:07:56.376
So then we get to
the interesting position of and

166
00:07:56.376 --> 00:07:59.439
I'm kind of scrolling the table
down here a little bit.

167
00:07:59.439 --> 00:08:03.799
So, iDS 01, and two are kind of off
the screen there, but they're still there,

168
00:08:03.799 --> 00:08:05.557
I have limited room on the slide.

169
00:08:05.557 --> 00:08:10.342
So at this point we're saying okay,
now we wanna deal with 6, 7 and 8.

170
00:08:10.342 --> 00:08:14.543
And these are the things where we start to
get into the scenario of saying, it's not

171
00:08:14.543 --> 00:08:18.704
that we're trying to unify them with a
concrete type like bool, like we just did.

172
00:08:18.704 --> 00:08:21.129
Now we're just trying to
unify them with each other.

173
00:08:21.129 --> 00:08:23.418
So initially they're all gonna be null.

174
00:08:23.418 --> 00:08:27.907
And then we're gonna do our unify of 6 and
0 to basically say like okay,

175
00:08:27.907 --> 00:08:32.261
this you know a is lined up with that
thing which we get out of the scope.

176
00:08:32.261 --> 00:08:35.162
7 is unified with string
because it's a string literal.

177
00:08:35.162 --> 00:08:38.178
We just get that from the parse tree node
id like, yep, that's a string literal.

178
00:08:38.178 --> 00:08:39.558
So that's just gonna be a string.

179
00:08:39.558 --> 00:08:41.518
And then finally, we unify 6 and

180
00:08:41.518 --> 00:08:44.741
7 because we're saying these
two have to be the same.

181
00:08:44.741 --> 00:08:47.400
Whatever types they have,
they are connected in that way.

182
00:08:47.400 --> 00:08:50.472
Of note, we do not subsequently go and
unify seven and six,

183
00:08:50.472 --> 00:08:53.115
in part because we don't
want infinite loops, but

184
00:08:53.115 --> 00:08:57.047
also because anytime you're passing
these two arguments to unify, we've

185
00:08:57.047 --> 00:09:01.494
already established the relationship like
we talked about in the previous section.

186
00:09:01.494 --> 00:09:06.098
So, there's no need to do the symmetrical
one where you unify 7 and 6 as well.

187
00:09:06.098 --> 00:09:08.354
It's totally sufficient to
just pick some ordering and

188
00:09:08.354 --> 00:09:10.179
just make sure that
those two are connected.

189
00:09:10.179 --> 00:09:12.783
Okay, and then yeah, sure enough,

190
00:09:12.783 --> 00:09:16.407
that checks out because
we unified 6 with string.

191
00:09:16.407 --> 00:09:20.060
So when you unify 6 and 7,
it's all good, it's just a string.

192
00:09:20.060 --> 00:09:23.905
Now, if,
in contrast We had done it like this,

193
00:09:23.905 --> 00:09:29.401
where 6 is a string from high,
back up here, but seven is a number.

194
00:09:29.401 --> 00:09:33.736
Then, once again, just as we had with
the Boolean scenario, we would get a type

195
00:09:33.736 --> 00:09:37.555
mismatch, not because there was any
hard coded type in here, but just

196
00:09:37.555 --> 00:09:41.986
because those two have to agree, and now
they don't, so put it back to a string.

197
00:09:41.986 --> 00:09:46.098
Okay, and then finally, we have the last
one, which is just basically saying, like,

198
00:09:46.098 --> 00:09:48.390
this whole thing needs to
unify with one of them.

199
00:09:48.390 --> 00:09:50.116
So, I just picked
the first branch at random.

200
00:09:50.116 --> 00:09:54.081
We could have also picked like the other
branch, but again, the point is that

201
00:09:54.081 --> 00:09:57.863
the entire conditional is always going
to evaluate to either one branch or

202
00:09:57.863 --> 00:09:58.850
the other branch.

203
00:09:58.850 --> 00:10:02.952
But since we said like, these things are
connected and we can just pick a branch

204
00:10:02.952 --> 00:10:07.176
and say, yeah, you have to be the same as
one of those two branches worth noting,

205
00:10:07.176 --> 00:10:10.430
by the way, that there are other
ways you can represent this.

206
00:10:10.430 --> 00:10:14.175
So, I've kind of done for this section,
the maximally symlinky kind of way of

207
00:10:14.175 --> 00:10:17.977
doing things, if you want, I guess I
haven't tried this, but conceptually,

208
00:10:17.977 --> 00:10:22.063
there's no reason it couldn't work, that
you could sort of take a shortcut and say,

209
00:10:22.063 --> 00:10:24.893
like, do we really need this
extra type of variable here?

210
00:10:24.893 --> 00:10:28.292
Like, why don't we just have this like,
all right, look like, when I'm Sim linking

211
00:10:28.292 --> 00:10:31.364
B to something, I'm just gonna say,
like, yeah, just simply get to a just,

212
00:10:31.364 --> 00:10:34.003
just go straight to just go figure
out what's in the first branch.

213
00:10:34.003 --> 00:10:37.066
Go take a little peek at the structure
there, and just say, yeah,

214
00:10:37.066 --> 00:10:40.365
I see what's going on over there when
I'm still back in the node stage.

215
00:10:40.365 --> 00:10:43.432
And say, like,
I'm not gonna bother with this whole like.

216
00:10:43.432 --> 00:10:46.630
Formality of having an extra expression
that's just gonna get symbolized in this

217
00:10:46.630 --> 00:10:49.242
anyway, I know that I'm going to
link all these things together.

218
00:10:49.242 --> 00:10:52.161
So, I can just delete some of these and
just get them out of there and

219
00:10:52.161 --> 00:10:53.634
just like cut right to the chase.

220
00:10:53.634 --> 00:10:57.177
There are probably trade-offs there
in terms of like, I don't know,

221
00:10:57.177 --> 00:10:58.664
how easy is your code to read?

222
00:10:58.664 --> 00:11:01.322
How obvious is it like what it's doing?

223
00:11:01.322 --> 00:11:03.707
You're saving a little bit of
memory if you don't do that.

224
00:11:03.707 --> 00:11:07.977
But I can't think of any reason
why either wouldn't work.

225
00:11:07.977 --> 00:11:10.942
But at least the way I've learned it is
sort of like, just as a matter of course,

226
00:11:10.942 --> 00:11:13.866
it's like, yeah, just give all these
things variables and then make sure you

227
00:11:13.866 --> 00:11:16.338
get all the relationships right,
that's the important thing.

228
00:11:16.338 --> 00:11:19.210
There is probably a corner you
could cut here if you wanted to

229
00:11:19.210 --> 00:11:22.199
squeeze out a little tiny bit
of performance in terms of just,

230
00:11:22.199 --> 00:11:25.724
sort of cutting out the intermediary,
just going direct to the source.

231
00:11:25.724 --> 00:11:29.048
Okay, yeah and
then there was that question, hey,

232
00:11:29.048 --> 00:11:31.213
do we need to do the symmetrical one?

233
00:11:31.213 --> 00:11:33.462
And just like before,
the answer is no, we don't.

234
00:11:33.462 --> 00:11:36.481
If we've already unified eight with 6,
there's no reason to unify with 7.

235
00:11:36.481 --> 00:11:39.847
All we ever need to do if we're ever
unifying with one branch, since we already

236
00:11:39.847 --> 00:11:43.015
unified the one branch with the other
branch, there's just no point in.

237
00:11:43.015 --> 00:11:46.341
It's overkill to unify it with
the other branch as well,

238
00:11:46.341 --> 00:11:50.027
because that branch is already
unified with the other branch.

239
00:11:50.027 --> 00:11:53.428
Okay, finally,
there's path compression happening here.

240
00:11:53.428 --> 00:11:58.417
So, the only other piece to all this is
that basically it's gonna go through and

241
00:11:58.417 --> 00:12:00.725
change all these things around, and

242
00:12:00.725 --> 00:12:05.567
eventually we're gonna end up with
a perfectly well inferred conditional,

243
00:12:05.567 --> 00:12:09.462
where we have successfully said
that this thing is a Boolean.

244
00:12:09.462 --> 00:12:10.436
This thing is also a Boolean.

245
00:12:10.436 --> 00:12:13.062
We verified that those line up,
this is a string.

246
00:12:13.062 --> 00:12:15.425
This is also a string, those line up,
the whole thing is a string,

247
00:12:15.425 --> 00:12:17.043
because both of their
branches are strings.

248
00:12:17.043 --> 00:12:21.314
And then finally, if anyone was curious,
b must also be a string.

