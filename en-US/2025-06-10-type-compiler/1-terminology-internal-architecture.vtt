WEBVTT

1
00:00:00.000 --> 00:00:02.646
&gt;&gt; Richard Feldman: Some terminology
we're going to use in this course.

2
00:00:02.646 --> 00:00:05.029
So as previously mentioned,
there's assembler,

3
00:00:05.029 --> 00:00:07.201
which is basically low-level to low-level.

4
00:00:07.201 --> 00:00:11.362
So in this case, when I say low-level,
I mean not intended to be human readable.

5
00:00:11.362 --> 00:00:15.357
Transpiler is high level to high level,
that is something that's intended to be

6
00:00:15.357 --> 00:00:18.428
human readable, and
that's what you get out the other side.

7
00:00:18.428 --> 00:00:22.588
Interpreter is generating, whatever
that output target is at runtime, and

8
00:00:22.588 --> 00:00:26.172
a compiler is taking it and
generating the output at compile time,

9
00:00:26.172 --> 00:00:28.541
as opposed to when the program's running.

10
00:00:28.541 --> 00:00:33.228
Okay, in addition to spitting out output,
another thing that modern compilers do is

11
00:00:33.228 --> 00:00:36.497
analysis, so this can include
things like name checking.

12
00:00:36.497 --> 00:00:40.332
So this would be like, I defined
a variable and then I used it, good job.

13
00:00:40.332 --> 00:00:43.914
I used the variable and
I never defined it, that's a naming error,

14
00:00:43.914 --> 00:00:46.053
that analysis can be done at compile time.

15
00:00:46.053 --> 00:00:49.371
This doesn't necessarily have anything
to do with the output of the program.

16
00:00:49.371 --> 00:00:52.263
As we're gonna see, you can just
cut that step out if you want.

17
00:00:52.263 --> 00:00:56.433
But a lot of compilers actually rely on
the assumption that the naming analysis

18
00:00:56.433 --> 00:00:57.264
has been done.

19
00:00:57.264 --> 00:01:00.013
And so, later stages of compilation
are kind of assuming that.

20
00:01:00.013 --> 00:01:03.561
If there ever was any problem with the
names, that they would have been sorted

21
00:01:03.561 --> 00:01:06.747
out by now or you would have gotten
an error and not made it to this far.

22
00:01:06.747 --> 00:01:08.749
Because if you can't have that assumption,

23
00:01:08.749 --> 00:01:12.181
it does make the later stages of the
compiler more complicated to implement.

24
00:01:12.181 --> 00:01:15.918
So it's pretty common to see compilers
that, if you have a naming error,

25
00:01:15.918 --> 00:01:17.802
you just won't see any type errors.

26
00:01:17.802 --> 00:01:21.269
And the reason for that is that, the
compiler compiler was designed to be like,

27
00:01:21.269 --> 00:01:25.028
yeah, if there's any naming errors, let's
just stop and make them fix that first.

28
00:01:25.028 --> 00:01:28.345
Because otherwise, we would have to deal
with the possibility of the names being

29
00:01:28.345 --> 00:01:31.562
wrong later in type checking and later,
and we don't wanna deal with that, so

30
00:01:31.562 --> 00:01:32.171
we just stop.

31
00:01:32.171 --> 00:01:34.897
You don't have to do it that way,
in the rock compiler,

32
00:01:34.897 --> 00:01:38.098
which is the language I've been
building for several years now.

33
00:01:38.098 --> 00:01:41.462
We do the hard thing [LAUGH] actually
allow you to have naming errors and

34
00:01:41.462 --> 00:01:42.859
typing errors coexisting.

35
00:01:42.859 --> 00:01:44.345
Another is type checking,

36
00:01:44.345 --> 00:01:47.714
type inference, both of those
are flavors of type analysis.

37
00:01:47.714 --> 00:01:50.420
You can get very, very fancy with this and
very, very simple with this.

38
00:01:50.420 --> 00:01:53.070
This, course,
is gonna be more on the simple side,

39
00:01:53.070 --> 00:01:54.713
[LAUGH] cuz we have limited time.

40
00:01:54.713 --> 00:01:57.264
But rest assured, there's a very,
deep rabbit hole,

41
00:01:57.264 --> 00:01:59.666
how far you can go with
a fanciness of type checking.

42
00:01:59.666 --> 00:02:03.169
And then finally, optimization
is very common analysis paths,

43
00:02:03.169 --> 00:02:04.897
this can work in one of two ways.

44
00:02:04.897 --> 00:02:07.622
One way is where the optimizer,
well, the analysis runs and

45
00:02:07.622 --> 00:02:10.241
figures out some ways that your
code could run better, and

46
00:02:10.241 --> 00:02:13.618
then it tells you what those things are,
that would be like pure analysis.

47
00:02:13.618 --> 00:02:15.806
So this is usually more like linters.

48
00:02:15.806 --> 00:02:19.495
So an example of this is in Rust,
there's a linter called Clippy.

49
00:02:19.495 --> 00:02:23.836
Named after the famous, like Microsoft
Office, [LAUGH] Clippy animated icon.

50
00:02:23.836 --> 00:02:27.102
And one of the things that I'll tell you
about is like, hey, you're doing a clone,

51
00:02:27.102 --> 00:02:29.365
like a deep clone of this thing,
and you don't need to be.

52
00:02:29.365 --> 00:02:32.713
Definitely if you just took that clone
out, your code would still work and

53
00:02:32.713 --> 00:02:35.201
it would run faster, so
maybe you wanna take that out.

54
00:02:35.201 --> 00:02:38.253
But the much more common version of
this is, it's doing the analysis, and

55
00:02:38.253 --> 00:02:40.495
then immediately applying
the analysis to your code.

56
00:02:40.495 --> 00:02:44.165
And just changing what code it
actually spits out the other side,

57
00:02:44.165 --> 00:02:48.304
based on heuristics and things that
it's going to expect are going to make

58
00:02:48.304 --> 00:02:51.123
your code sort of run equivalently,
hopefully.

59
00:02:51.123 --> 00:02:55.028
Unless there's a bug or something like
that, and such that the optimization is

60
00:02:55.028 --> 00:02:57.956
essentially harmless, but
it makes your code run faster.

61
00:02:57.956 --> 00:03:01.331
So the former kind like the Clippy style
is more about, you as the programmer,

62
00:03:01.331 --> 00:03:04.555
have more control, but it's also less
convenient and way less powerful,

63
00:03:04.555 --> 00:03:06.724
much more common is
the automated optimization.

64
00:03:06.724 --> 00:03:08.538
We're not gonna do any
optimization in this course,

65
00:03:08.538 --> 00:03:10.569
you could easily do a whole
course on just on optimization.

66
00:03:10.569 --> 00:03:15.041
So for our purposes, we're just
gonna focus on name resolution and

67
00:03:15.041 --> 00:03:16.147
type checking.

68
00:03:16.147 --> 00:03:18.546
Okay, so quick overview of the course.

69
00:03:18.546 --> 00:03:22.002
So basically, what we're going to be
building over the course of this course

70
00:03:22.002 --> 00:03:24.999
is, a compiler for a small subset of JS,
a very small subset of JS.

71
00:03:24.999 --> 00:03:29.905
We're talking like you get strings,
and numbers, and Booleans, and

72
00:03:29.905 --> 00:03:34.828
arrays of those and functions, and
ternaries, and that's it [LAUGH].

73
00:03:34.828 --> 00:03:37.538
We gave you plus and times for operators.

74
00:03:37.538 --> 00:03:40.103
So, that's such a big deal,
and cons, okay?

75
00:03:40.103 --> 00:03:42.730
Cons to, so, yeah,
very small subset of JS.

76
00:03:42.730 --> 00:03:45.806
And on top of that, it's actually
an even smaller subset than that,

77
00:03:45.806 --> 00:03:49.521
because if we were building a production
compiler for the subset I just described,

78
00:03:49.521 --> 00:03:52.085
it would be several times as
long as what we are building.

79
00:03:52.085 --> 00:03:54.771
Because we are omitting all sorts
of edge cases and ergonomics,

80
00:03:54.771 --> 00:03:56.971
things that the programmer would want and
so forth.

81
00:03:56.971 --> 00:03:58.670
Because again,
the point of this is learning, so

82
00:03:58.670 --> 00:04:00.784
we're not trying to build
a production grade compiler here.

83
00:04:00.784 --> 00:04:03.665
Obviously, no one wants
that subset of JS anyway.

84
00:04:03.665 --> 00:04:06.415
The whole point of this is just to
understand, what does it actually look

85
00:04:06.415 --> 00:04:09.208
like when you are building this part
of a type checker, this part of naming

86
00:04:09.208 --> 00:04:11.985
resolution, or this part of a code
generator at the end of the pipeline?

87
00:04:11.985 --> 00:04:13.683
We're gonna build a real compiler,

88
00:04:13.683 --> 00:04:16.163
it's just not going to be
an awesome compiler [LAUGH].

89
00:04:16.163 --> 00:04:20.193
So we're actually gonna
start with formatting, and

90
00:04:20.193 --> 00:04:25.306
you might think formatting that's
prettier not a compiler at all.

91
00:04:25.306 --> 00:04:29.698
We'll see if it's the same thing by
the end of the course, source code in,

92
00:04:29.698 --> 00:04:31.953
source code out, is it a transpiler?

93
00:04:31.953 --> 00:04:33.220
Is prettier a transpiler?

94
00:04:33.220 --> 00:04:33.807
We'll see.

95
00:04:33.807 --> 00:04:36.150
So, we're gonna start with a name
resolution after formatting.

96
00:04:36.150 --> 00:04:38.942
So the first section is gonna be,
we're gonna build a very quick formatter.

97
00:04:38.942 --> 00:04:42.893
The main purpose of this is, I'm kind of
intentionally hand waving away the first

98
00:04:42.893 --> 00:04:47.263
two steps of compilation, which are, well,
parsing, you can just start with parsing.

99
00:04:47.263 --> 00:04:50.415
You don't need to have a separate lexing
or tokenizing step before that, but

100
00:04:50.415 --> 00:04:51.249
it's very common.

101
00:04:51.249 --> 00:04:54.381
The reason I'm skipping through that is
that, Frontendmasters already has a course

102
00:04:54.381 --> 00:04:56.219
on interpreters,
which goes into depth on that.

103
00:04:56.219 --> 00:04:59.887
So if you're curious about those stages of
compilation, you can just totally go watch

104
00:04:59.887 --> 00:05:02.718
that course, and then learn about
how lexicon and parsing works.

105
00:05:02.718 --> 00:05:06.539
So my goal for this course is to kind of
speed run through that very quickly and

106
00:05:06.539 --> 00:05:09.599
just kind of give a very hand
wavy overview of how those work.

107
00:05:09.599 --> 00:05:12.902
And then move on to the stuff that we
don't have any material for, which is

108
00:05:12.902 --> 00:05:16.862
these other things, formatting, name
resolution and, of course, type inference.

109
00:05:16.862 --> 00:05:20.587
Yeah, so we're not building TypeScript
here, [LAUGH] to no one's surprise.

110
00:05:20.587 --> 00:05:22.804
And we're going to be using
Hindley-Miller type inference.

111
00:05:22.804 --> 00:05:25.626
We'll talk a little bit more about that
when we get to the type inference section.

112
00:05:25.626 --> 00:05:29.465
But it's a very famous type inference
algorithm used by languages like Haskell

113
00:05:29.465 --> 00:05:31.540
and Elm and rock the language I'm making.

114
00:05:31.540 --> 00:05:33.485
And, yeah,
it's got a lot of nice properties,

115
00:05:33.485 --> 00:05:35.776
which we will talk more about
when we get to that section.

116
00:05:35.776 --> 00:05:39.894
And then finally, the last step that we're
going to do is WebAssembly generation,

117
00:05:39.894 --> 00:05:43.722
where we're actually going to take all
of this stuff that we've used up at this

118
00:05:43.722 --> 00:05:47.620
point as inputs and then actually output
some WebAssembly and get to see it run.

119
00:05:47.620 --> 00:05:51.402
I will note, though that these are not
evenly spaced, so formatting and

120
00:05:51.402 --> 00:05:53.703
name resolution are pretty quick early on.

121
00:05:53.703 --> 00:05:56.342
Most of what we're going to do today is
the type inference part that's broken down

122
00:05:56.342 --> 00:05:57.988
into multiple sections,
and then at the very end,

123
00:05:57.988 --> 00:06:00.191
we're just gonna have one section
on the WebAssembly generation.

124
00:06:00.191 --> 00:06:04.176
So, most of what we'll be doing today is
type checking and type inference related.

