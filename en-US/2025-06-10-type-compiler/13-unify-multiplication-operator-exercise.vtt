WEBVTT

1
00:00:00.000 --> 00:00:01.789
&gt;&gt; Richard Feldman: So
to wrap up, summary part four,

2
00:00:01.789 --> 00:00:05.879
we started off talking about unifying
operators and just like the very basic.

3
00:00:05.879 --> 00:00:09.961
We should get two type mismatches if we
call the multiplication like the time

4
00:00:09.961 --> 00:00:13.558
sign and the two things on both
sides of it are definitely strings.

5
00:00:13.558 --> 00:00:15.388
We talked about type mismatches and

6
00:00:15.388 --> 00:00:17.706
how the only way you can
get type mismatches so

7
00:00:17.706 --> 00:00:22.098
far that we've seen is through unifying,
vacation and that's also gonna persist.

8
00:00:22.098 --> 00:00:25.653
If we're just doing like, you one constant
side to another, there's no real way to

9
00:00:25.653 --> 00:00:28.429
get a type mismatch no matter how
many of them you chain together.

10
00:00:28.429 --> 00:00:31.195
But as soon as you start getting
multiple constraints into play,

11
00:00:31.195 --> 00:00:32.917
that's where type mismatches come up.

12
00:00:32.917 --> 00:00:36.267
In other words, like you're calling unify
on the same number more than once, or

13
00:00:36.267 --> 00:00:37.612
the same type ID more than once.

14
00:00:37.612 --> 00:00:40.307
That's where the first time it
can set it to one concrete Or

15
00:00:40.307 --> 00:00:42.234
something that becomes a concrete type.

16
00:00:42.234 --> 00:00:43.155
And then later on,

17
00:00:43.155 --> 00:00:47.071
you attempt to unify it with something
else that's a different concrete type and

18
00:00:47.071 --> 00:00:50.832
that's when the trouble starts and
that's when the type mismatch happens.

19
00:00:50.832 --> 00:00:54.538
And then finally, we went and looked at
the code of the unify function itself to

20
00:00:54.538 --> 00:00:56.729
just really see like, conceptually, yeah,

21
00:00:56.729 --> 00:01:00.184
it's kind of like the types are identical
but really, it's own thing.

22
00:01:00.184 --> 00:01:04.766
It's like those specific branches that do
these specific things under these specific

23
00:01:04.766 --> 00:01:07.349
circumstances that's really unfortunately.

24
00:01:07.349 --> 00:01:11.425
The best way to understand unify is
just to kinda look at that code and

25
00:01:11.425 --> 00:01:14.802
just remember or
even step through in your in your mind.

26
00:01:14.802 --> 00:01:18.390
What branches are happening when
&gt;&gt; Speaker 2: in unify with the case where

27
00:01:18.390 --> 00:01:20.101
we have both a and b as null.

28
00:01:20.101 --> 00:01:24.953
Richard said that it's not important
that we simulate a to b or b to a,

29
00:01:24.953 --> 00:01:28.299
Can you speak a little
bit more about that?

30
00:01:28.299 --> 00:01:30.683
&gt;&gt; Richard Feldman: Sure, so
this was like right here,

31
00:01:30.683 --> 00:01:35.133
away that you can tell this that
this is true, so the question was,

32
00:01:35.133 --> 00:01:38.399
at this point,
we are sym linking a to b, right?

33
00:01:38.399 --> 00:01:43.937
If a was null, then we're Okay, cool set
A, to be a symlink, A is symlinked to B.

34
00:01:43.937 --> 00:01:48.727
If you get down into this branch,
if B happened to be a was not null and

35
00:01:48.727 --> 00:01:51.771
B was null, we unify it and
come back here.

36
00:01:51.771 --> 00:01:54.627
So a way that you can think about this is,

37
00:01:54.627 --> 00:02:00.606
let's just like walk back through this
scenario right here so everything's null.

38
00:02:00.606 --> 00:02:04.585
And right here, we're like, okay,
I similarly this is the sibling a to

39
00:02:04.585 --> 00:02:08.775
be right like we unify these two and
we said that I D, 0 is now selling to one.

40
00:02:08.775 --> 00:02:11.823
What if we instead had like
done the reverse and said,

41
00:02:11.823 --> 00:02:15.550
like I wanna symlink 12 so
let's pretend that this is still null

42
00:02:15.550 --> 00:02:19.923
I'm not gonna like change the slide in
real time, but pretend this is null.

43
00:02:19.923 --> 00:02:23.091
And then The next thing we
do is we unify this one and

44
00:02:23.091 --> 00:02:26.863
we say that's a string well,
when we're going through and

45
00:02:26.863 --> 00:02:31.780
unifying this two string, we still do
have the information in the database.

46
00:02:31.780 --> 00:02:36.156
That prior to doing that, this thing
was sim linked to this other type And

47
00:02:36.156 --> 00:02:40.820
when we're going through and resolving
what we would be unifying that string

48
00:02:40.820 --> 00:02:44.574
against is like we would
have already traverse that.

49
00:02:44.574 --> 00:02:49.448
What we'd end up with is we're now in the
branch of unify where we are attempting

50
00:02:49.448 --> 00:02:54.418
to go through and unify this with string,
so that's like one of the two type IDs.

51
00:02:54.418 --> 00:02:58.874
And the other type ID is gonna have gone
through the resolve and compress thing,

52
00:02:58.874 --> 00:03:00.945
which is gonna end us up back At zero.

53
00:03:00.945 --> 00:03:03.549
So after you follow that symlink,
like, again,

54
00:03:03.549 --> 00:03:06.594
pretending that symlink is down here and
this one is null.

55
00:03:06.594 --> 00:03:08.271
We're basically saying okay,

56
00:03:08.271 --> 00:03:11.188
unify whatever this thing
resolves to with string, and

57
00:03:11.188 --> 00:03:15.363
what that thing resolves to is a symlink
to zero in this hypothetical scenario.

58
00:03:15.363 --> 00:03:20.049
So what you end up with is basically like,
you're still unifying string with zero,

59
00:03:20.049 --> 00:03:22.887
and you're Basically gonna
still end up with one of

60
00:03:22.887 --> 00:03:26.523
these things that's saying like,
I am the same as the other one.

61
00:03:26.523 --> 00:03:29.637
And the other one is a string
either way you come at it.

62
00:03:29.637 --> 00:03:32.855
&gt;&gt; Speaker 2: Another question is
how would unify function work for

63
00:03:32.855 --> 00:03:37.646
a node that cannot create a mismatch like
assignment are such nodes skipped from

64
00:03:37.646 --> 00:03:40.378
unification step or
is there some implicit?

65
00:03:40.378 --> 00:03:42.428
&gt;&gt; Richard Feldman: How would it work for
nodes that so

66
00:03:42.428 --> 00:03:45.576
I think it's important to
note that at this point,

67
00:03:45.576 --> 00:03:49.621
Unify only knows about types,
so Unify actually doesn't like.

68
00:03:49.621 --> 00:03:54.539
What we give it are these two IDs so we
give it the purple numbers it actually has

69
00:03:54.539 --> 00:03:58.711
no idea what node that came from
it could have been an assignment.

70
00:03:58.711 --> 00:04:02.569
It could have been a number could have
been a string, could have been a function,

71
00:04:02.569 --> 00:04:04.523
really, it has no idea other than that.

72
00:04:04.523 --> 00:04:07.461
Like, it knows what this type ID is,
and it can access the database so

73
00:04:07.461 --> 00:04:08.789
it can go ask what that type is.

74
00:04:08.789 --> 00:04:11.937
But basically because we have this
separate phase, like, before then,

75
00:04:11.937 --> 00:04:15.261
where we're going through and saying,
like, actually even further back.

76
00:04:15.261 --> 00:04:19.023
Where we're basically saying, kay, this
is the phase where we know which things

77
00:04:19.023 --> 00:04:21.270
are assignments,
which things are constants.

78
00:04:21.270 --> 00:04:25.757
And then, as we go through and
assign these numbers and put them in

79
00:04:25.757 --> 00:04:30.993
the database, and then start connecting
them up and running unify on them.

80
00:04:30.993 --> 00:04:36.583
Like right at this point, unify is like,
okay, yes, we still have these over here,

81
00:04:36.583 --> 00:04:40.484
but unify never sees these unify
only sees the numbers and.

82
00:04:40.484 --> 00:04:44.821
The relationships between the numbers
that are represented in the database so

83
00:04:44.821 --> 00:04:48.894
the sum total of what unify is able to
access is right over here it has no idea

84
00:04:48.894 --> 00:04:50.290
about any of this stuff.

85
00:04:50.290 --> 00:04:54.614
So I guess the short answer is basically
that that can't possibly affect Unify

86
00:04:54.614 --> 00:04:58.162
because it just doesn't even
have access to that information.

87
00:04:58.162 --> 00:05:02.152
Now, we can go from node to type ID
because we write down the type ID in

88
00:05:02.152 --> 00:05:02.852
the node but

89
00:05:02.852 --> 00:05:07.063
the reverse is not true we don't
connect the type IDs back to the nodes.

90
00:05:07.063 --> 00:05:10.591
If all you have is a type ID [LAUGH],
you're stuck in types land,

91
00:05:10.591 --> 00:05:15.386
you can't get back to two nodes if that's
all you have, alright, with that in mind,

92
00:05:15.386 --> 00:05:17.606
let's hop over and do some exercises.

93
00:05:18.795 --> 00:05:23.619
&gt;&gt; Richard Feldman: So we're off to part
four now once again, you know, parts four,

94
00:05:23.619 --> 00:05:28.093
five, and six are all just going
to be doing type check.js so

95
00:05:28.093 --> 00:05:30.846
let me cd into that and run our tests.

96
00:05:30.846 --> 00:05:35.991
As usual, we have test failure and
let's go take a look at how we might

97
00:05:35.991 --> 00:05:42.141
fix that got a lotta other type checking
stuff here, two right here we are, okay.

98
00:05:42.141 --> 00:05:46.067
So this one is just all about
the actual multiplication operator,

99
00:05:46.067 --> 00:05:50.357
so this is gonna be a relatively quick
one, just a five minute exercise.

100
00:05:50.357 --> 00:05:54.845
Basically, we're just gonna do
exactly what we did in the slides in

101
00:05:54.845 --> 00:05:56.668
the multiplication case.

102
00:05:56.668 --> 00:05:59.596
We have discovered that we
have two operands, as I know,

103
00:05:59.596 --> 00:06:02.951
like the two things on the ones on
the left, ones on the right, and

104
00:06:02.951 --> 00:06:06.738
we've already said, Okay,
I'm gonna make this concrete number type.

105
00:06:06.738 --> 00:06:09.605
I mentioned like,
two sections ago that although for

106
00:06:09.605 --> 00:06:12.152
our purposes, for like,
teaching in Slides,

107
00:06:12.152 --> 00:06:16.440
it's pretty convenient to just say you
can just put a number directly in there.

108
00:06:16.440 --> 00:06:19.414
This is one of those scenarios
where it's okay ,well, actually,

109
00:06:19.414 --> 00:06:22.492
what I want is that type ID and so
rather than make a bunch of edge cases,

110
00:06:22.492 --> 00:06:25.067
we're just gonna go ahead and
create our own number type.

111
00:06:25.067 --> 00:06:27.834
And if you look at the implementation
of this thing, it's basically like,

112
00:06:27.834 --> 00:06:30.772
just give me a new type ID, and I'm just
going to put concrete right in there, and

113
00:06:30.772 --> 00:06:32.393
now I have a type ID for
that concrete thing.

114
00:06:32.393 --> 00:06:33.992
You never do this in
a production compiler,

115
00:06:33.992 --> 00:06:35.298
because this is totally wasteful.

116
00:06:35.298 --> 00:06:39.554
We're just, like, adding database rows
just to write down string, over and

117
00:06:39.554 --> 00:06:43.624
over, and they're all getting different
IDs instead of hard coding one.

118
00:06:43.624 --> 00:06:48.010
But again, this is not a production
compiler, so that's the most convenient

119
00:06:48.010 --> 00:06:52.330
way to get ourselves a type ID that
guarantees points in number without having

120
00:06:52.330 --> 00:06:56.000
to pre-populate the database of
constants and stuff like that.

121
00:06:56.000 --> 00:06:58.410
Okay, so that's our number type ID and

122
00:06:58.410 --> 00:07:01.186
then basically
the conditional that we wanna

123
00:07:01.186 --> 00:07:05.729
do here is take a look at the left operand
of the node and also the right one.

124
00:07:05.729 --> 00:07:09.342
And if either of those,
sorry if they are both concrete,

125
00:07:09.342 --> 00:07:13.178
they know if either of them is concrete,
it must be a number,

126
00:07:13.178 --> 00:07:16.668
because those are the rules
of the asterisk operator.

127
00:07:16.668 --> 00:07:21.582
So separately, a thing that we would do
is we would say those two things need

128
00:07:21.582 --> 00:07:23.302
to be equal to each other.

129
00:07:23.302 --> 00:07:27.253
That distinction can matter if you have
a polymorphic type which we don't for

130
00:07:27.253 --> 00:07:30.556
our operator we're saying this
is hard coded concrete number.

131
00:07:30.556 --> 00:07:34.648
So really all we need to say is left needs
to be number and right needs to be number.

132
00:07:34.648 --> 00:07:37.759
Otherwise, if they're not concrete,
then that's fine,

133
00:07:37.759 --> 00:07:40.626
we can just unify the non-concrete
type with number and

134
00:07:40.626 --> 00:07:44.469
basically say you're null or you're
a sibling or something like that, or

135
00:07:44.469 --> 00:07:47.340
I guess at this point it
wouldn't be a sibling anymore.

136
00:07:47.340 --> 00:07:51.043
So you are null, that's fine, but now you
were before and now you were a number.

137
00:07:51.043 --> 00:07:54.752
And that's not type mismatch because
there wasn't any constraint there.

138
00:07:54.752 --> 00:07:57.932
And then the final scenario being,
you're already concrete, but

139
00:07:57.932 --> 00:07:59.894
the concrete type that you are is number.

140
00:07:59.894 --> 00:08:03.850
So no harm no foul we will
just leave you alone okay,

141
00:08:03.850 --> 00:08:07.623
let's take five minutes and
work through that.

142
00:08:09.254 --> 00:08:13.970
&gt;&gt; Richard Feldman: Okay, so we have our
solutions over here for this one very

143
00:08:13.970 --> 00:08:20.379
simple thing where we're just checking
to see if we have an operator of star.

144
00:08:20.379 --> 00:08:23.447
Then we need to basically just
make a concrete type of number,

145
00:08:23.447 --> 00:08:25.749
using our little hack here
to get a type ID out.

146
00:08:25.749 --> 00:08:28.404
And then basically we just
have these two scenarios.

147
00:08:28.404 --> 00:08:32.148
So left concrete is something that is
defined a little bit higher up here, so

148
00:08:32.148 --> 00:08:35.950
back up in the top here, before we're
looking at what type operator we have,

149
00:08:35.950 --> 00:08:37.543
we have this convenient thing.

150
00:08:37.543 --> 00:08:41.654
We're like, okay, well, let's go use
this get concrete type name thing,

151
00:08:41.654 --> 00:08:45.130
which if you go and take a look at this,
is basically like, okay,

152
00:08:45.130 --> 00:08:47.749
go do the resolve siblings and
compress things.

153
00:08:47.749 --> 00:08:51.179
So now we have back either null or
we have a concrete type Sorry,

154
00:08:51.179 --> 00:08:53.004
an ID that refers to one of those.

155
00:08:53.004 --> 00:08:57.356
And then basically you say, okay,
is entry.concrete not equal to undefined,

156
00:08:57.356 --> 00:09:00.366
meaning that like it does
have an actual concrete type.

157
00:09:00.366 --> 00:09:03.073
Then we can return that otherwise,
we return null.

158
00:09:03.073 --> 00:09:06.715
So putting that together,
what we end up with here is either null or

159
00:09:06.715 --> 00:09:10.045
else the actual concrete type
itself that's inside there.

160
00:09:10.045 --> 00:09:12.907
So not like the object with
the concrete field in it,

161
00:09:12.907 --> 00:09:17.396
but the actual contents of that concrete
field, which means that we actually have

162
00:09:17.396 --> 00:09:21.059
a string that we can compare with
triple equals and In JavaScript.

163
00:09:21.059 --> 00:09:24.852
So using that we can basically say
okay left concrete double ampersand is

164
00:09:24.852 --> 00:09:29.079
basically saying like okay, it's not null
because one of the two possibilities

165
00:09:29.079 --> 00:09:31.455
was that we could have
gotten it back as null.

166
00:09:31.455 --> 00:09:34.056
And if it's not null and
it's not equal to number,

167
00:09:34.056 --> 00:09:37.265
that's a problem because when
we are doing this unification,

168
00:09:37.265 --> 00:09:40.310
we expect this thing to be a number and
so, it was concrete.

169
00:09:40.310 --> 00:09:44.677
But it wasn't a number that's going to be
a type mismatch and basically it's just

170
00:09:44.677 --> 00:09:47.984
exactly the same thing, but
with right concrete if you want.

171
00:09:47.984 --> 00:09:52.339
Of course, combine these two code paths
and do a little like for loop over over,

172
00:09:52.339 --> 00:09:54.686
a two element array of like left and
right.

173
00:09:54.686 --> 00:09:58.756
That would work too but this, I guess,
does give you a little bit more specific

174
00:09:58.756 --> 00:10:01.975
type mismatch error message up with this,
moving on, okay.

175
00:10:01.975 --> 00:10:05.420
So then the other way that we can
do this is we can say, okay, and

176
00:10:05.420 --> 00:10:08.418
this was a scenario where we
knew that it was concrete.

177
00:10:08.418 --> 00:10:12.721
This is a scenario where we know that it
is not concrete, so this is basically,

178
00:10:12.721 --> 00:10:14.886
yeah, this thing is definitely null.

179
00:10:14.886 --> 00:10:18.998
You could also have, instead of that,
you could have equals equals null, or

180
00:10:18.998 --> 00:10:23.639
triple equals or triple equals null, or
hey, man, my JavaScript's a little rusty.

181
00:10:23.639 --> 00:10:27.859
I don't remember there's some other fancy
way to do this, to check if it's null,

182
00:10:27.859 --> 00:10:30.716
besides like bang and
double equals and triple equals.

183
00:10:30.716 --> 00:10:35.126
I think there might have even been a gotta
around triple equals I think double equals

184
00:10:35.126 --> 00:10:36.647
also checks for undefined.

185
00:10:36.647 --> 00:10:37.983
At any rate, point being,

186
00:10:37.983 --> 00:10:40.721
this is the scenario where
left is not concrete is null.

187
00:10:40.721 --> 00:10:44.465
At that point, we're just saying, cool,
just go ahead and unify that with number,

188
00:10:44.465 --> 00:10:47.182
and we know that that's gonna work out,
because it's null.

189
00:10:47.182 --> 00:10:50.999
Anytime you unify null with anything else,
it's just gonna either sim link it, or

190
00:10:50.999 --> 00:10:53.740
in this case, since we know
we're giving a concrete type.

191
00:10:53.740 --> 00:10:57.325
We know that thing is just gonna end
up being number, which is what we want.

192
00:10:57.325 --> 00:11:02.217
Then same thing for
the right version of that,

193
00:11:02.217 --> 00:11:07.110
and then we are good so
let's try grabbing that

194
00:11:07.110 --> 00:11:11.633
real quick, that's not where I wanna be.

195
00:11:11.633 --> 00:11:16.765
There we go, Okay, and bam, all good, you.

