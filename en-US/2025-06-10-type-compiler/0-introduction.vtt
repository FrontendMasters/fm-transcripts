WEBVTT

1
00:00:00.000 --> 00:00:03.200
I'm Richard, I am the creator of
the Roc Programming Language, and

2
00:00:03.200 --> 00:00:06.635
I'm a full-time rust programmer for
Zed, make an awesome code editor.

3
00:00:06.635 --> 00:00:09.048
And today,
we're going to talk all about compilers.

4
00:00:09.048 --> 00:00:11.676
We got some instructions here to get set
up for the workshop, it's very simple.

5
00:00:11.676 --> 00:00:14.759
It's basically clone the repo and you need
to have Node.js installed, that's it.

6
00:00:14.759 --> 00:00:16.729
So, doesn't need to be a big rush,

7
00:00:16.729 --> 00:00:20.691
you can probably just kind of do it
right before we start the exercises.

8
00:00:20.691 --> 00:00:24.915
So back in the day, way, way back in
the day, before the time of compilers,

9
00:00:24.915 --> 00:00:27.432
people used to program
computers like this.

10
00:00:27.432 --> 00:00:30.775
These are people who are actually
programming that computer physically

11
00:00:30.775 --> 00:00:31.932
by moving wires around.

12
00:00:31.932 --> 00:00:35.798
This was considered to be less ergonomic
than what we do today by a considerable

13
00:00:35.798 --> 00:00:39.911
margin, but it worked, I mean, it was a
way that you could convince the computer.

14
00:00:39.911 --> 00:00:41.690
Convince the machine to make the ones and

15
00:00:41.690 --> 00:00:45.315
zeros go in the place that you want it to
by physically moving these cables around.

16
00:00:45.315 --> 00:00:49.750
This is the 1946 ENIAC computer or ENIAC,
I've heard it pronounced both ways,

17
00:00:49.750 --> 00:00:52.624
I like ENIAC better,
at University of Pennsylvania,

18
00:00:52.624 --> 00:00:55.328
which is actually walking
distance from my house.

19
00:00:55.328 --> 00:00:58.034
Although, I haven't seen
the ENIAC in there [LAUGH].

20
00:00:58.034 --> 00:01:01.919
And ENIAC stands for the electronic,
numerical, integrator, and computer.

21
00:01:01.919 --> 00:01:05.959
So one of the big things that people used
to use these things for was just like

22
00:01:05.959 --> 00:01:10.086
mathematical calculations, that was
kind of the bread and butter of them.

23
00:01:10.086 --> 00:01:12.936
And importantly,
there was this concept then, and

24
00:01:12.936 --> 00:01:16.125
there still is this concept
now of machine instructions.

25
00:01:16.125 --> 00:01:20.559
So the way that these programmers were
giving the machine its instructions were

26
00:01:20.559 --> 00:01:22.024
by moving things around.

27
00:01:22.024 --> 00:01:25.317
And the way that we typically give
machines their instructions these days

28
00:01:25.317 --> 00:01:28.450
is not so manual, but rather we have
a compiler generate those machine

29
00:01:28.450 --> 00:01:31.873
instructions, sometimes with several
layers of indirection in between.

30
00:01:31.873 --> 00:01:34.678
So if you zoom all the way out
of what is a compiler's job,

31
00:01:34.678 --> 00:01:38.597
basically what people typically mean when
they say compiler is you've got your

32
00:01:38.597 --> 00:01:42.355
source code representation and
you've got your compiler in between that.

33
00:01:42.355 --> 00:01:44.009
And then the machine instructions
come out the other side.

34
00:01:44.009 --> 00:01:45.735
You run the compiler on the source, and

35
00:01:45.735 --> 00:01:49.188
what you get out the other side are ones
and zeros, machine instructions, and

36
00:01:49.188 --> 00:01:51.924
that is much more ergonomic
than the 1946 way of doing it.

37
00:01:51.924 --> 00:01:55.826
C is a great classic example of
a compiler, we just did a workshop on C,

38
00:01:55.826 --> 00:01:59.477
if you wanna learn about C,
this is not a course about C, though.

39
00:01:59.477 --> 00:02:02.449
Rust is another, good example,
famous of compilers,

40
00:02:02.449 --> 00:02:05.308
I also do the Rust [LAUGH] course for
FrontendMasters.

41
00:02:05.308 --> 00:02:09.554
And assembly also is a thing that
you could consider to be a compiler,

42
00:02:09.554 --> 00:02:14.332
but most people actually would put that
in a separate category of assembler.

43
00:02:14.332 --> 00:02:17.325
It's a little unclear, maybe it's kind of
a historical reason for this, but I mean,

44
00:02:17.325 --> 00:02:19.498
fundamentally, it is taking
a source code representation and

45
00:02:19.498 --> 00:02:20.898
turning it into machine instructions.

46
00:02:20.898 --> 00:02:23.257
So I would personally put it in
the category of compiler, but

47
00:02:23.257 --> 00:02:25.677
some people would say, no,
no, that's a different thing.

48
00:02:25.677 --> 00:02:27.166
Debates maybe had.

49
00:02:27.166 --> 00:02:30.282
Now, these are all things that people
would call ahead of time compilers,

50
00:02:30.282 --> 00:02:33.202
which essentially means that you
turn the source representation into

51
00:02:33.202 --> 00:02:36.093
the machine instructions before
you are even running your program.

52
00:02:36.093 --> 00:02:39.037
It's like that is the head of time,
ahead of run time,

53
00:02:39.037 --> 00:02:41.536
transformation that
these compilers all do.

54
00:02:41.536 --> 00:02:44.882
You also have sort of a runtime
transformation, where you're like,

55
00:02:44.882 --> 00:02:48.510
as you're running your program, it is
on the fly turning your source code or

56
00:02:48.510 --> 00:02:52.144
some intermediate representation of
that into machine instructions while

57
00:02:52.144 --> 00:02:53.646
the program is still running.

58
00:02:53.646 --> 00:02:56.114
And this is usually what people
mean when they say interpreter.

59
00:02:56.114 --> 00:02:59.334
That's basically the fundamental
difference between a compiler or

60
00:02:59.334 --> 00:03:02.942
interpreter is, whether a compiler is
ahead of time turning your source code

61
00:03:02.942 --> 00:03:04.342
into machine instructions.

62
00:03:04.342 --> 00:03:05.999
Or some other intermediate representation,

63
00:03:05.999 --> 00:03:08.171
whereas an interpreter is doing
that same thing at runtime.

64
00:03:08.171 --> 00:03:13.341
So shell scripts, classic example of
runtime, like interpreted languages.

65
00:03:13.341 --> 00:03:16.825
JavaScript is an interpreted language, but
there's a little bit of a wrinkle there.

66
00:03:16.825 --> 00:03:21.144
So JavaScript, in addition to having
a runtime interpreter has a just in-time

67
00:03:21.144 --> 00:03:23.408
compiler, or JIT compiler, for short.

68
00:03:23.408 --> 00:03:25.867
So a lot of interpreted languages do this.

69
00:03:25.867 --> 00:03:28.829
And basically, the reason for
it is essentially performance.

70
00:03:28.829 --> 00:03:31.940
If you've got a loop that's running in
JavaScript, last I checked the cut off in

71
00:03:31.940 --> 00:03:34.594
V8 was like, if the loop is
running 4,000 iterations or more,

72
00:03:34.594 --> 00:03:37.643
it sort of counts how many iterations
it's doing in the runtime interpreter.

73
00:03:37.643 --> 00:03:40.641
And once it crosses the,
I think it's 4,000 iteration mark,

74
00:03:40.641 --> 00:03:43.441
4,001 it's like,
okay this seems like a very long loop.

75
00:03:43.441 --> 00:03:46.582
Maybe we should optimize this thing and
turn it into machine instructions,

76
00:03:46.582 --> 00:03:50.081
rather than having to do the interpreter
thing every single iteration of this loop.

77
00:03:50.081 --> 00:03:53.263
And they're kind of betting that
the extra work that they take to do that

78
00:03:53.263 --> 00:03:56.196
translation at runtime into
machine instructions will pay off.

79
00:03:56.196 --> 00:03:58.394
Because the remaining iterations
of the loop, they figure,

80
00:03:58.394 --> 00:04:00.981
if there's 4,000 there's
probably another couple 1,000.

81
00:04:00.981 --> 00:04:04.668
Then, okay, that'll pay for itself,
and it'll end up being faster than if

82
00:04:04.668 --> 00:04:07.689
you just continue the entire
loop of the runtime interpreter.

83
00:04:07.689 --> 00:04:11.145
So just in time, compilers have really
made a big difference in the performance

84
00:04:11.145 --> 00:04:12.796
of a lot of interpreted languages, or

85
00:04:12.796 --> 00:04:14.872
languages that originally
just interpreted.

86
00:04:14.872 --> 00:04:18.914
To the point where pretty much every
popular runtime interpreted language these

87
00:04:18.914 --> 00:04:21.479
days, maybe, except for
bash [LAUGH] now has a JIT.

88
00:04:21.479 --> 00:04:25.874
So JavaScript does, Pearl does,
Ruby does, PHP, Python,

89
00:04:25.874 --> 00:04:29.012
as far as I know,
all of those have JITs now.

90
00:04:29.012 --> 00:04:31.973
Maybe not the main implementation,
but it certainly,

91
00:04:31.973 --> 00:04:34.432
you can find an implementation
that has a JIT.

92
00:04:34.432 --> 00:04:38.362
WebAssembly is an interesting
example of a language that only has

93
00:04:38.362 --> 00:04:40.295
the just-in-time compiler.

94
00:04:40.295 --> 00:04:43.697
So basically, WebAssembly is
designed to be sort of streamed,

95
00:04:43.697 --> 00:04:45.650
like have streaming compilations.

96
00:04:45.650 --> 00:04:48.784
So the idea is like your browser
wants to be able to execute this,

97
00:04:48.784 --> 00:04:51.290
partially WebAssembly
has sandboxing features.

98
00:04:51.290 --> 00:04:54.953
But also it's like a language where it
was designed from the get-go to be like,

99
00:04:54.953 --> 00:04:57.140
you've got bytes coming
in over the network and

100
00:04:57.140 --> 00:04:59.285
you're able to actually just-in-time go.

101
00:04:59.285 --> 00:05:02.369
Compile those to machine code as
they are coming in off the network

102
00:05:02.369 --> 00:05:04.116
before you have the entire program.

103
00:05:04.116 --> 00:05:07.314
So everything has to be organized in a way
where you never need to wait and be like,

104
00:05:07.314 --> 00:05:10.652
hang on, hang on, I can't continue until I
get some bytes at the end of the message,

105
00:05:10.652 --> 00:05:12.083
it's like, no, no, streaming.

106
00:05:12.083 --> 00:05:14.503
As it comes in, you're able to do
this just-in-time compilation.

107
00:05:14.503 --> 00:05:18.145
That was one of the design
goals WebAssembly from Yego.

108
00:05:18.145 --> 00:05:21.464
Now you also find compilers that will
compile from a source representation to

109
00:05:21.464 --> 00:05:24.436
machine instructions by way of
some intermediate representation.

110
00:05:24.436 --> 00:05:27.313
So one example of this is transpiler.

111
00:05:27.313 --> 00:05:30.865
This is the term that people use when the
source representation and the intermediate

112
00:05:30.865 --> 00:05:34.026
representation are both sort of intended
to be human readable languages.

113
00:05:34.026 --> 00:05:35.970
So typescript compiler, tsc,

114
00:05:35.970 --> 00:05:40.435
would be a perfect example of this
that's going from a human-readable,

115
00:05:40.435 --> 00:05:45.415
human consumption language, namely
TypeScript, to compiling to JavaScript.

116
00:05:45.415 --> 00:05:49.370
You will note, by the way,
that tsc is short for TypeScript compiler.

117
00:05:49.370 --> 00:05:52.622
So it doesn't call itself tst,
it's not calling itself a transpiler,

118
00:05:52.622 --> 00:05:54.182
it's calling itself a compiler.

119
00:05:54.182 --> 00:05:56.085
This is another one of those
terms that is embattled.

120
00:05:56.085 --> 00:05:57.159
Some people will say that,

121
00:05:57.159 --> 00:06:00.193
no transpilers don't count as compilers
cuz they don't go to machine code or

122
00:06:00.193 --> 00:06:03.432
other reasons, just like people will say
assemblers don't count as compilers.

123
00:06:03.432 --> 00:06:06.140
I'm not taking a stance on this,
I'm just making

124
00:06:06.140 --> 00:06:10.218
you aware of the controversy [LAUGH] in
case you see people argue about this.

125
00:06:10.218 --> 00:06:13.344
The enemy representation
in this case is JavaScript.

126
00:06:13.344 --> 00:06:16.066
And you can also have an IR interpreter.

127
00:06:16.066 --> 00:06:20.262
So basically,
this is a browser Netscape, for example.

128
00:06:20.262 --> 00:06:23.622
You can also have an IR compiler,
which was either a JIT one like V8, or

129
00:06:23.622 --> 00:06:27.151
you could have an ahead of time compiler
that would take JavaScript code and

130
00:06:27.151 --> 00:06:29.632
ahead of time compile it all
the way to machine code.

131
00:06:29.632 --> 00:06:32.216
I'm not aware of any popular
tools that do this, but

132
00:06:32.216 --> 00:06:36.036
I have seen some floating around GitHub
that will take JavaScript and give you

133
00:06:36.036 --> 00:06:40.172
a statically compiled binary of ones and
zeros directly executable machine code.

134
00:06:40.172 --> 00:06:44.638
But obviously, the interpreter for
that Netscape being an old school example,

135
00:06:44.638 --> 00:06:47.987
obviously Chrome and Firefox,
SpiderMonkey, all those,

136
00:06:47.987 --> 00:06:49.379
being more modern ones.

137
00:06:49.379 --> 00:06:51.674
Now you also find bytecode compilers.

138
00:06:51.674 --> 00:06:55.055
So, bytecode compilers are different
than transpilers, because bytecode is

139
00:06:55.055 --> 00:06:58.387
an intermediate representation that
is not intended to be human-readable,

140
00:06:58.387 --> 00:07:00.311
it's intended to be only machine readable.

141
00:07:00.311 --> 00:07:04.581
So Java would be probably the most
popular example of really embracing this.

142
00:07:04.581 --> 00:07:08.126
So Java has a source code format.java
files, and then it also has

143
00:07:08.126 --> 00:07:12.137
a bytecode format, and that bytecode
format is intended to be portable.

144
00:07:12.137 --> 00:07:15.476
So you can take your Java code,
compile it down to Java bytecode, and

145
00:07:15.476 --> 00:07:17.146
you can take that Java bytecode and

146
00:07:17.146 --> 00:07:20.624
run it on any different machine that
has the Java virtual machine on it.

147
00:07:20.624 --> 00:07:24.149
This was what Java's original selling
point of write once run anywhere meant.

148
00:07:24.149 --> 00:07:26.581
It was kind of,
compiler once run anywhere cuz, I mean,

149
00:07:26.581 --> 00:07:29.739
you can write run Python anywhere as
the as long as I got Python installed.

150
00:07:29.739 --> 00:07:32.171
It was more about the separating
out that compilation step,

151
00:07:32.171 --> 00:07:34.754
where you don't have to give your
Java source code to everyone.

152
00:07:34.754 --> 00:07:37.312
You can compile it down to this
bytecode and give them that, and

153
00:07:37.312 --> 00:07:40.124
then they don't have to do the work
of compiling it on their machine.

154
00:07:40.124 --> 00:07:41.305
Maybe there was also some, like,

155
00:07:41.305 --> 00:07:44.072
this was back at a time when proprietary
wasn't the dirty word that it is now, but

156
00:07:44.072 --> 00:07:46.531
maybe they'd like,
we can hide our source code, that's great.

157
00:07:46.531 --> 00:07:51.662
So JVM bytecode, another famous IR,
and then the IR interpreter,

158
00:07:51.662 --> 00:07:55.270
in that case would be
the Java virtual machine.

159
00:07:55.270 --> 00:07:58.575
And an example of a just in
time compiler would be hotspot.

160
00:07:58.575 --> 00:08:01.456
This is a famous Java compiler,
that was Bach and

161
00:08:01.456 --> 00:08:05.547
his team developed to make Java
basically jittered and a lot faster.

162
00:08:05.547 --> 00:08:09.370
And actually, that same team, because
they did such a good job on Hotspot,

163
00:08:09.370 --> 00:08:12.654
Google hired them to go work on V8,
and they made V8 way faster,

164
00:08:12.654 --> 00:08:15.984
which ended up sort of kicking
off a JavaScript performance war.

165
00:08:15.984 --> 00:08:20.262
So that all came down to basically just
in time compilation of Java bytecode.

166
00:08:20.262 --> 00:08:24.696
We are gonna do some WebAssembly
bytecode in this course.

167
00:08:24.696 --> 00:08:28.296
And so, an example of a WebAssembly,
well, so

168
00:08:28.296 --> 00:08:31.718
WebAssembly bytecode is like JVM bytecode.

169
00:08:31.718 --> 00:08:33.276
It is just like ones and zeros.

170
00:08:33.276 --> 00:08:34.925
It's not intended to be human-readable,

171
00:08:34.925 --> 00:08:36.981
as we're gonna see in the last
section of this course.

172
00:08:36.981 --> 00:08:40.493
It's basically just like, hey, we got
some bytes, they're arbitrary integers,

173
00:08:40.493 --> 00:08:41.528
it was magic constants.

174
00:08:41.528 --> 00:08:43.028
And we're gonna write
them to a specific part.

175
00:08:43.028 --> 00:08:45.270
And then magically,
the browser or in our case,

176
00:08:45.270 --> 00:08:48.840
Node.js is going to actually know what
to do with them and be able to run them.

177
00:08:48.840 --> 00:08:53.373
Now, in this case, let's say you wanted
to run WebAssembly in the browser,

178
00:08:53.373 --> 00:08:55.325
you could do that same thing, but

179
00:08:55.325 --> 00:08:59.190
you do still need some sort of
source language to compile to that.

180
00:08:59.190 --> 00:09:02.607
So in the case of Java bytecode, Java
would be an obvious language that compiles

181
00:09:02.607 --> 00:09:04.904
the Java bytecode,
we talked about Kotlin earlier.

182
00:09:04.904 --> 00:09:07.431
Kotlin also compiles the Java bytecode.

183
00:09:07.431 --> 00:09:09.546
Lots of languages compile
to WebAssembly bytecode.

184
00:09:09.546 --> 00:09:11.829
So C,
in addition to going to machine code,

185
00:09:11.829 --> 00:09:14.690
has the option of compiling
to WebAssembly bytecode.

186
00:09:14.690 --> 00:09:17.140
Rust is the same way,
you can take your Rust source code and

187
00:09:17.140 --> 00:09:18.494
get out WebAssembly bytecode.

188
00:09:18.494 --> 00:09:20.744
And in this course,
we are going to make something,

189
00:09:20.744 --> 00:09:22.851
this spits out WebAssembly
bytecode directly.

190
00:09:22.851 --> 00:09:26.383
We're also not gonna do any libraries, so
everything we're doing in this course is

191
00:09:26.383 --> 00:09:29.031
just like, you get to see how
the entire sausage is made [LAUGH].

192
00:09:29.031 --> 00:09:33.342
And in this case, that is what we're
compiling to is WebAssembly bytecode.

193
00:09:33.342 --> 00:09:36.861
Of note, once you understand
compiling to WebAssembly bytecode,

194
00:09:36.861 --> 00:09:41.057
I can say from experience that, the next
step to machine code is kind of just about

195
00:09:41.057 --> 00:09:43.855
learning a different flavor
of a very similar thing.

196
00:09:43.855 --> 00:09:47.124
There definitely are differences between
WebAssembly bytecode and machine code.

197
00:09:47.124 --> 00:09:50.958
But fundamentally, there's a whole lot of
looking up magic integer constants and

198
00:09:50.958 --> 00:09:54.078
figuring out where they go in the right
order to make the machine, or

199
00:09:54.078 --> 00:09:57.717
in this case, the WebAssembly interpreter
understand what you're saying.

