WEBVTT

1
00:00:00.000 --> 00:00:01.506
&gt;&gt; Richard Feldman: So
now let's talk about hoisting.

2
00:00:01.506 --> 00:00:05.524
So again, we're gonna start with
this x = 5, y = increment 3 example.

3
00:00:05.524 --> 00:00:09.146
But this time I'm going to do something
that our language does not support,

4
00:00:09.146 --> 00:00:12.260
but we're just gonna roll with it for
the purpose of the example,

5
00:00:12.260 --> 00:00:14.660
where I wrote the function
keyword down below it.

6
00:00:14.660 --> 00:00:17.809
So in JavaScript, this is a thing you
can do, not in our subset of JavaScript,

7
00:00:17.809 --> 00:00:20.629
but in JavaScript in general you're
allowed to call a function before

8
00:00:20.629 --> 00:00:21.955
it has actually been declared.

9
00:00:21.955 --> 00:00:25.604
Now, if we do our same kinda scoping
algorithm that we've been doing here,

10
00:00:25.604 --> 00:00:29.195
okay, we got a new scope, we push
the scope onto it, we add x to that scope,

11
00:00:29.195 --> 00:00:30.295
we add y to that scope.

12
00:00:30.295 --> 00:00:35.141
And then later on, we say, if scope
has increment, we have a naming error.

13
00:00:35.141 --> 00:00:37.312
Well, right here,
we have not added increment to scope.

14
00:00:37.312 --> 00:00:39.885
So as soon as we hit this thing and
we run this code, saying,

15
00:00:39.885 --> 00:00:42.765
let's see if we've got increment
in our scope, it's gonna say,

16
00:00:42.765 --> 00:00:46.071
well, no, you don't have it in scope,
so that's gonna be a naming error.

17
00:00:46.071 --> 00:00:48.629
But of course, those are not the semantics
we want for this increment, so

18
00:00:48.629 --> 00:00:49.503
how do we deal with that?

19
00:00:49.503 --> 00:00:51.753
How do we make it so
that if we wanted to support this feature,

20
00:00:51.753 --> 00:00:54.844
which we don't precisely, because it's
not only so complicated here, but it's

21
00:00:54.844 --> 00:00:57.957
even more complicated in type checking,
so we're definitely not supporting it.

22
00:00:57.957 --> 00:01:01.532
But if we did want to,
how would we actually implement this?

23
00:01:01.532 --> 00:01:03.713
Well, there's a very straightforward
way you can do that,

24
00:01:03.713 --> 00:01:04.838
which is just do a second pass.

25
00:01:04.838 --> 00:01:08.601
So basically, what we can do is have a
separate hoisting pass, where at first we

26
00:01:08.601 --> 00:01:11.982
just pretend everybody who's not
a function keyword doesn't exist.

27
00:01:11.982 --> 00:01:14.798
[LAUGH] We're gonna scan through all
the parse tree nodes and just say,

28
00:01:14.798 --> 00:01:17.276
if you are not a function,
you stand off in a corner right now,

29
00:01:17.276 --> 00:01:19.538
because I am only considering
the functions right now.

30
00:01:19.538 --> 00:01:20.838
And then I just go through and

31
00:01:20.838 --> 00:01:23.122
just add all of them to
scope right away at the top.

32
00:01:23.122 --> 00:01:26.052
And so, it's as if, that's why it's
called hoisting, you picked them up and

33
00:01:26.052 --> 00:01:27.071
hoisted them up to the top.

34
00:01:27.071 --> 00:01:30.301
You're basically saying, okay,
I'm going to add you to the scope,

35
00:01:30.301 --> 00:01:33.716
at the top of the scope, as if you had
been defined above everything else.

36
00:01:33.716 --> 00:01:37.026
But we're not actually hoisting it, we're
not really rearranging the nodes at all.

37
00:01:37.026 --> 00:01:39.980
All we're doing is we're just doing a
separate pass where all these other things

38
00:01:39.980 --> 00:01:41.289
are sort of ignored for the moment.

39
00:01:41.289 --> 00:01:44.868
And then adding it to scope first,
such that by the time we come back and

40
00:01:44.868 --> 00:01:49.055
do the non-hoisting pass, the regular
naming resolution that we've been doing

41
00:01:49.055 --> 00:01:51.435
previously, now x and
y have been added here.

42
00:01:51.435 --> 00:01:57.916
And it's no problem because they've
already been added to scope before.

43
00:01:57.916 --> 00:02:01.137
Well, so the actual sequence here
would be increments added to scope

44
00:02:01.137 --> 00:02:02.198
in the hoisting pass.

45
00:02:02.198 --> 00:02:03.470
Then we come along, we add x.

46
00:02:03.470 --> 00:02:06.590
Then, before we can add y, we need to
process what y is being set to, and

47
00:02:06.590 --> 00:02:09.141
that's where we would actually check for
the increment.

48
00:02:09.141 --> 00:02:12.081
Yep, it's in scope, it's great,
because of the hoisting pass, and

49
00:02:12.081 --> 00:02:13.257
then we finally add y scope.

50
00:02:13.257 --> 00:02:16.958
So, we're not doing that in this compiler,
but this is a common thing that a lot of

51
00:02:16.958 --> 00:02:20.088
languages support, is calling
functions after they're defined.

52
00:02:20.088 --> 00:02:22.882
And this is a very straightforward
way to support that,

53
00:02:22.882 --> 00:02:26.633
is just being able to do a separate
pass over the same exact data structure.

54
00:02:26.633 --> 00:02:28.279
But now we're not mutating
the data structure,

55
00:02:28.279 --> 00:02:29.735
we're not changing the parse tree nodes.

56
00:02:29.735 --> 00:02:30.892
Despite the name hoisting,

57
00:02:30.892 --> 00:02:33.600
we're not actually moving the nodes,
we're not moving them up.

58
00:02:33.600 --> 00:02:37.796
We're just sort of having the effect of
hoisting it up the scope conceptually.

59
00:02:37.796 --> 00:02:39.424
Any questions about hoisting?

60
00:02:39.424 --> 00:02:40.014
Yeah.

61
00:02:40.014 --> 00:02:43.854
&gt;&gt; Speaker 2: I'm curious,
is it common to do a two-pass approach for

62
00:02:43.854 --> 00:02:45.299
handling hoisting?

63
00:02:45.299 --> 00:02:48.586
I was also thinking too, would it make
sense to just kind of keep track of,

64
00:02:48.586 --> 00:02:51.568
cuz is hoisting this function
specific thing typically, right?

65
00:02:51.568 --> 00:02:53.053
&gt;&gt; Richard Feldman: Right.
&gt;&gt; Speaker 2: This track, okay,

66
00:02:53.053 --> 00:02:56.332
whenever we call this function
at the end of this first pass.

67
00:02:56.332 --> 00:02:57.878
&gt;&gt; Richard Feldman: Yeah,
it's a great question.

68
00:02:57.878 --> 00:03:00.821
So there are definitely a lot
of different ways you can do it.

69
00:03:00.821 --> 00:03:04.289
So, if you don't care about
modifying the node structure,

70
00:03:04.289 --> 00:03:08.505
a way that you can do it is you can
basically have, as you're going along,

71
00:03:08.505 --> 00:03:10.750
going from tokens to parse tree nodes.

72
00:03:10.750 --> 00:03:11.526
You can say, okay,

73
00:03:11.526 --> 00:03:14.697
I'm just gonna have a separate list of all
the functions that are defined in here.

74
00:03:14.697 --> 00:03:16.599
And then whenever I encounter one,
I'm gonna put it in that list.

75
00:03:16.599 --> 00:03:20.481
And then that way, when you come through
and do your naming pass, you can just look

76
00:03:20.481 --> 00:03:23.475
at that list first before looking
at the everything else list.

77
00:03:23.475 --> 00:03:25.444
So that would avoid the second pass,

78
00:03:25.444 --> 00:03:28.568
you're still only doing one
pass from tokens to parsing.

79
00:03:28.568 --> 00:03:33.807
And honestly, I'm not aware of exactly
how common any given approach is.

80
00:03:33.807 --> 00:03:37.622
I think a lot of it just depends on
tradeoffs of how much does the compiler

81
00:03:37.622 --> 00:03:41.060
care about performance versus
how much performance difference

82
00:03:41.060 --> 00:03:44.131
they observe if they benchmark it and
try multiple ways.

83
00:03:44.131 --> 00:03:47.425
But in a lot of cases, these types of
things are things where I think people

84
00:03:47.425 --> 00:03:50.934
just kind of implemented however they
decide to implement it the first time and

85
00:03:50.934 --> 00:03:52.864
probably never benchmark it another way.

86
00:03:52.864 --> 00:03:56.041
But yeah, I mean, there's definitely lots
of different ways you could do this,

87
00:03:56.041 --> 00:03:57.985
this is the most
straightforward one I would say.

88
00:03:57.985 --> 00:04:00.911
But there are fancier ones that could
avoid the second pass if you wanted

89
00:04:00.911 --> 00:04:01.561
to, for sure.

90
00:04:01.561 --> 00:04:05.017
All right, yeah,
then we do the constant equals new set and

91
00:04:05.017 --> 00:04:08.098
all that other fun stuff
inside the increment function.

92
00:04:08.098 --> 00:04:12.315
Okay, so again, coming back to this theme,
traverse input, generate output.

93
00:04:12.315 --> 00:04:17.033
So this was the naming resolution step
that we added in between parsing and

94
00:04:17.033 --> 00:04:17.728
code gen.

95
00:04:17.728 --> 00:04:20.036
There is an optional additional
thing that we can do here,

96
00:04:20.036 --> 00:04:22.826
which is, we can actually change
the intermediate representation.

97
00:04:22.826 --> 00:04:24.925
So this is what's known
as canonicalization.

98
00:04:24.925 --> 00:04:27.851
And you basically, instead of just
printing out the same parse tree and

99
00:04:27.851 --> 00:04:31.020
just being, yeah, we're gonna keep
essentially the same input as before,

100
00:04:31.020 --> 00:04:34.363
except now we've got this new scope thing
which may or may not be useful later on.

101
00:04:34.363 --> 00:04:36.478
Now we have a new thing
called a canonical IR.

102
00:04:36.478 --> 00:04:37.309
And basically,

103
00:04:37.309 --> 00:04:40.760
the canonical IR is essentially
the same kinda thing as a parse tree.

104
00:04:40.760 --> 00:04:44.773
But it's been transformed in various ways
that are gonna be useful to later stages

105
00:04:44.773 --> 00:04:45.654
of the compiler.

106
00:04:45.654 --> 00:04:49.498
So some examples of things we might
do there is sometimes you do what's

107
00:04:49.498 --> 00:04:51.005
called string interning.

108
00:04:51.005 --> 00:04:53.827
We saw there's a lot of identifiers
that are coming up, a lot of strings.

109
00:04:53.827 --> 00:04:57.796
Doing lots of string comparisons can be
way more expensive computationally than

110
00:04:57.796 --> 00:04:59.617
doing lots of integer comparisons.

111
00:04:59.617 --> 00:05:02.781
So string interning is a thing where,
as you're going through the parse tree,

112
00:05:02.781 --> 00:05:05.538
every time you see an identifier,
you basically put it in a hash map.

113
00:05:05.538 --> 00:05:09.354
It's not really a hash map, but
close enough, where you say, okay,

114
00:05:09.354 --> 00:05:11.813
I'm gonna go put this
thing in the hash map and

115
00:05:11.813 --> 00:05:15.971
then get back a unique identifier
that's an integer that represents that.

116
00:05:15.971 --> 00:05:19.569
And then now in my canonical IR, every
time we would have had an identifier in

117
00:05:19.569 --> 00:05:21.720
the parse tree,
now we just have an integer.

118
00:05:21.720 --> 00:05:25.118
So that means that later on, in future
stages of the compiler, when they're

119
00:05:25.118 --> 00:05:28.856
traversing that and doing all sorts of,
did you have the same identifier here?

120
00:05:28.856 --> 00:05:32.177
We're doing those scope lookups,
those can be integer lookups,

121
00:05:32.177 --> 00:05:34.618
rather than having to be
entire string lookups.

122
00:05:34.618 --> 00:05:37.849
Obviously, there's a cost of doing the
interning in the first place, but again,

123
00:05:37.849 --> 00:05:39.804
this is a trade off that
some compilers will make.

124
00:05:39.804 --> 00:05:41.571
So there's a bunch of stuff like that,

125
00:05:41.571 --> 00:05:44.262
another thing that will
commonly happen is de-sugaring.

126
00:05:44.262 --> 00:05:47.342
So you'll have multiple different ways to
represent something in the parse tree.

127
00:05:47.342 --> 00:05:50.418
And then you'll kind of condense that down
and just eliminate some of those cases and

128
00:05:50.418 --> 00:05:52.557
be, okay, this one's just
syntax trigger for that one.

129
00:05:52.557 --> 00:05:54.551
So we're not gonna have two
different canonical IR nodes for

130
00:05:54.551 --> 00:05:56.948
that, we're just gonna turn the one
into the other and then that's it.

131
00:05:56.948 --> 00:06:01.028
And then we just have fewer cases in
our switch statement in later stages

132
00:06:01.028 --> 00:06:01.642
of the IR.

133
00:06:01.642 --> 00:06:05.392
So again, not something we're
gonna do in this workshop, but

134
00:06:05.392 --> 00:06:07.034
a good thing to be aware of.

135
00:06:07.034 --> 00:06:10.377
Okay, so a summary of part 2,
things we talked about.

136
00:06:10.377 --> 00:06:12.532
So first,
we talked about declarations and lookups.

137
00:06:12.532 --> 00:06:16.558
So this is basically, you declare
something that adds it to the scope set.

138
00:06:16.558 --> 00:06:17.783
And then lookups, later on,

139
00:06:17.783 --> 00:06:20.086
is when you are actually
trying to answer the question,

140
00:06:20.086 --> 00:06:22.941
was it in the scope set at the top
the time I was trying to do the lookup?

141
00:06:22.941 --> 00:06:25.478
If not, it's naming,
otherwise, you're all set.

142
00:06:25.478 --> 00:06:28.291
We talked about hoisting,
which is where you want to do a lookup,

143
00:06:28.291 --> 00:06:29.990
essentially before the declaration.

144
00:06:29.990 --> 00:06:32.118
Yeah, like we said,
typically for functions.

145
00:06:32.118 --> 00:06:35.278
And a way you can do this is just have
an extra pass, just for functions.

146
00:06:35.278 --> 00:06:39.060
We're not gonna do that in this compiler,
but is an important thing to know about,

147
00:06:39.060 --> 00:06:41.180
and there are other
strategies you can do too.

148
00:06:41.180 --> 00:06:43.974
And then finally, nested scopes, which is
definitely something that basically every

149
00:06:43.974 --> 00:06:45.344
programming language needs to deal with.

150
00:06:45.344 --> 00:06:48.593
And this is where you are not just
having a single scope set, but

151
00:06:48.593 --> 00:06:50.261
rather an entire array of them.

152
00:06:50.261 --> 00:06:55.126
And you're pushing new scopes, new sets
onto that array, as we descend into more

153
00:06:55.126 --> 00:06:59.869
and more nested sets, and then popping
them off as we exit those nested scopes.

154
00:06:59.869 --> 00:07:01.732
And then every time we look through this,

155
00:07:01.732 --> 00:07:04.286
we have to go through every
single one in the array to see,

156
00:07:04.286 --> 00:07:07.390
did anybody in our current scope
actually have this thing declared?

157
00:07:07.390 --> 00:07:10.900
Because if so, then great, we will allow
it, and if nobody had it declared,

158
00:07:10.900 --> 00:07:13.281
then that's the point at
which we say naming error.

159
00:07:13.281 --> 00:07:17.160
&gt;&gt; Speaker 3: How do we keep track
of which scope was where between

160
00:07:17.160 --> 00:07:19.337
the two stages and two pass?

161
00:07:19.337 --> 00:07:21.570
Would we attach scoped tokens?

162
00:07:21.570 --> 00:07:25.100
&gt;&gt; Richard Feldman: How do we keep
track of which scope is where?

163
00:07:25.100 --> 00:07:29.801
So in general, I would say that it's
pretty uncommon to need to keep track of

164
00:07:29.801 --> 00:07:31.646
scope in subsequent phases.

165
00:07:31.646 --> 00:07:35.289
The reason we're okay with doing a push
here and a pop here, which is destructive

166
00:07:35.289 --> 00:07:38.506
and we're not really writing down
which scope was which along the way,

167
00:07:38.506 --> 00:07:40.648
is that if you do wanna
track that sort of thing,

168
00:07:40.648 --> 00:07:42.757
there are other arguably
better ways to do it.

169
00:07:42.757 --> 00:07:46.577
So I mentioned canonicalization earlier,
that's a way that if you want to keep

170
00:07:46.577 --> 00:07:50.225
track of things uniquely, and not
necessarily which scope they went with,

171
00:07:50.225 --> 00:07:53.543
specifically, but rather which
ones are semantically different.

172
00:07:53.543 --> 00:07:56.656
A thing you can do in canonicalization,
you can say, okay,

173
00:07:56.656 --> 00:08:00.806
not only am I going to store what was the
integer that corresponds to the string for

174
00:08:00.806 --> 00:08:04.369
the identifier, but I can actually
make that unique within a scope.

175
00:08:04.369 --> 00:08:08.569
So in other words, in four different
scopes I have something called n,

176
00:08:08.569 --> 00:08:10.818
cuz I really like that variable name.

177
00:08:10.818 --> 00:08:14.419
You could choose to have your canonical
IR represent those as four different

178
00:08:14.419 --> 00:08:17.017
integers, even though they
all map to the same name n.

179
00:08:17.017 --> 00:08:20.143
So if you wanted to track that and
keep it along, that would be, I think,

180
00:08:20.143 --> 00:08:23.239
a more common way of doing that than
actually trying to keep the scopes.

181
00:08:23.239 --> 00:08:27.767
Largely because the information you
would wanna get out of them is,

182
00:08:27.767 --> 00:08:32.453
these scopes can get big to be storing
all that from one phase to the next

183
00:08:32.453 --> 00:08:37.084
if you really just need it for
something straightforward like that.

