WEBVTT

1
00:00:00.000 --> 00:00:01.967
&gt;&gt; Richard Feldman: That brings
us to part two, name resolution.

2
00:00:01.967 --> 00:00:06.877
All right, so here we're gonna talk about
declarations and lookups, hoisting, and

3
00:00:06.877 --> 00:00:07.830
nested scopes.

4
00:00:07.830 --> 00:00:10.813
Okay, so I mentioned in a previous section
that we're gonna have this theme of

5
00:00:10.813 --> 00:00:13.448
traversing input and generating output,
and this is no exception.

6
00:00:13.448 --> 00:00:17.573
Here, we are gonna introduce a new form of
traversing input and generating output.

7
00:00:17.573 --> 00:00:18.813
So we got our parsing right here,

8
00:00:18.813 --> 00:00:21.916
we're gonna kinda we're push that out of
the way and then right after parsing, but

9
00:00:21.916 --> 00:00:24.596
before Code Gen, this is where we're
going to do our name resolution.

10
00:00:24.596 --> 00:00:27.155
So, again, this is a step that
goes by multiple different names.

11
00:00:27.155 --> 00:00:30.108
I'm using the terms naming or
name resolution here.

12
00:00:30.108 --> 00:00:33.369
People also call it canonicalization,
which I'll talk a little bit about towards

13
00:00:33.369 --> 00:00:36.676
the end of this section, which is a little
bit, it's like naming plus a little bit of

14
00:00:36.676 --> 00:00:38.742
extra, but
we're not actually gonna do that here.

15
00:00:38.742 --> 00:00:42.466
We're just gonna, in name resolution,
do the checking, and then basically,

16
00:00:42.466 --> 00:00:45.145
at the end, at the other side,
we have our parse tree, and

17
00:00:45.145 --> 00:00:47.761
then also a scope that we can
do things with if we want to.

18
00:00:47.761 --> 00:00:51.971
But although, in this compiler, we're not
really gonna do anything with the scope,

19
00:00:51.971 --> 00:00:55.430
it's just going to be kind of an
intermediary thing that we use to report

20
00:00:55.430 --> 00:00:57.237
the naming errors, and that's it.

21
00:00:57.237 --> 00:01:00.500
Okay, so let's talk about declarations and
lookups first.

22
00:01:00.500 --> 00:01:03.299
So here's our const x = 5 once again.

23
00:01:03.299 --> 00:01:06.807
We're gonna choose a new one,
which is const y = x + 1.

24
00:01:06.807 --> 00:01:10.603
So essentially,
if we want to represent this in memory,

25
00:01:10.603 --> 00:01:14.412
we could do this as a scope or
nobody could do this as a set.

26
00:01:14.412 --> 00:01:17.505
Nobody could do this if you didn't wanna
do it as a set is you can just use object

27
00:01:17.505 --> 00:01:20.409
literals and actually in the exercises,
I am using object literals, so

28
00:01:20.409 --> 00:01:22.135
that would be more semantically correct.

29
00:01:22.135 --> 00:01:26.390
So for the slides, I'll do it with sets,
but basically, the idea is that,

30
00:01:26.390 --> 00:01:31.064
I am going to have a data structure that's
going to track what is in scope right now.

31
00:01:31.064 --> 00:01:32.839
So in this current scope that we're in,

32
00:01:32.839 --> 00:01:35.189
which we can kind of assume
is like the top of the file,

33
00:01:35.189 --> 00:01:38.814
we're not inside a function or inside a
curly brace block or something like that.

34
00:01:38.814 --> 00:01:43.233
At the outset of the program, the scope
is empty, there is nothing in scope.

35
00:01:43.233 --> 00:01:45.447
And then as we go along,
we put things in scope.

36
00:01:45.447 --> 00:01:49.423
So we'll say, I encountered this x
here as we're traversing through our

37
00:01:49.423 --> 00:01:53.051
parse three nodes and we see an identifier
of x inside a constant decal.

38
00:01:53.051 --> 00:01:56.505
And we say, well, that means that now x is
in scope from now on within this scope, so

39
00:01:56.505 --> 00:01:57.551
we just add it to that set.

40
00:01:57.551 --> 00:02:01.000
And then later on, when I'm doing
this lookup, where I'm saying,

41
00:02:01.000 --> 00:02:05.054
I need to go get the value of x, this is
exactly where we say, well, is x in scope?

42
00:02:05.054 --> 00:02:05.571
Yes or no.

43
00:02:05.571 --> 00:02:09.658
And all we do is we just go and
ask that set, okay, do you have x in you?

44
00:02:09.658 --> 00:02:11.032
[LAUGH] Is there an x in that set?

45
00:02:11.032 --> 00:02:13.547
And if it does, then fantastic,
we're all good.

46
00:02:13.547 --> 00:02:16.920
And if it's not in there, then that means,
this x has been used before it was

47
00:02:16.920 --> 00:02:20.379
declared, because if it had been declared
already, it would be in that set.

48
00:02:20.379 --> 00:02:24.120
So that's where we give a naming error,
we just report, hey,

49
00:02:24.120 --> 00:02:28.919
this x right here at this position, which
we passed along from our lexing stage,

50
00:02:28.919 --> 00:02:32.047
that was not in scope when
you use it with the lookup.

51
00:02:32.047 --> 00:02:33.303
And so, therefore, report naming error.

52
00:02:33.303 --> 00:02:37.271
Assuming that it goes, you all goes well
and it does not have a naming error,

53
00:02:37.271 --> 00:02:39.379
then we would go on and
add y to scope, and

54
00:02:39.379 --> 00:02:43.238
now y can be used from now on in the rest
of the scope, and so on and so forth.

55
00:02:43.238 --> 00:02:45.846
Now, another thing that you can do is,

56
00:02:45.846 --> 00:02:49.016
you can do a check for
a duplicate declaration.

57
00:02:49.016 --> 00:02:49.890
So basically,

58
00:02:49.890 --> 00:02:54.336
this would be not trying to say that there
was a naming error of a failed lookup.

59
00:02:54.336 --> 00:02:58.244
But for example, if we said const y, and
then later on you said const y again,

60
00:02:58.244 --> 00:03:01.930
we would probably wanna give an error
saying, hey, you can't do that.

61
00:03:01.930 --> 00:03:03.671
Now, in some languages you can.

62
00:03:03.671 --> 00:03:07.758
So in Rust, const y followed by const y
is totally allowed, and you're allowed

63
00:03:07.758 --> 00:03:11.980
to change the type and stuff like that,
I believe Elixir also does the same thing.

64
00:03:11.980 --> 00:03:15.244
But most programming languages,
if you say const y in the same scope, and

65
00:03:15.244 --> 00:03:17.678
then later on, you say const y,
that's not allowed.

66
00:03:17.678 --> 00:03:20.593
Another variation of that is shadowing,
where, again,

67
00:03:20.593 --> 00:03:23.625
we're not getting to nested scopes yet,
but down the line,

68
00:03:23.625 --> 00:03:27.149
that's where if it's in exactly
the same scope, it's not allowed.

69
00:03:27.149 --> 00:03:29.449
But if one of them is in a nested scope,
then it is allowed, and

70
00:03:29.449 --> 00:03:30.528
that's called shadowing.

71
00:03:30.528 --> 00:03:35.262
So the basic idea here is that, all we
do in order to support either shadowing,

72
00:03:35.262 --> 00:03:39.856
or no shadowing allowed, or shadowing
is allowed, and also this shadowing

73
00:03:39.856 --> 00:03:44.703
in the same scope is allowed, where you
can just say const y followed by const y.

74
00:03:44.703 --> 00:03:48.412
All of those are handled right here in
naming resolution, where we basically

75
00:03:48.412 --> 00:03:51.951
either check to see before adding y
to scope, whether or not it's already

76
00:03:51.951 --> 00:03:55.565
in scope, meaning somebody else
declared it, or we don't do that check.

77
00:03:55.565 --> 00:03:57.911
And then that check can either
be done with or without nesting,

78
00:03:57.911 --> 00:03:59.830
which we will talk about
when we get to the nesting.

79
00:03:59.830 --> 00:04:03.103
So nested scopes are a common thing
that comes up on programming and

80
00:04:03.103 --> 00:04:06.328
these add a little bit of a layer
of complexity to what we just saw.

81
00:04:06.328 --> 00:04:10.354
So let's suppose that I have a function
called increment, and I'm doing it in

82
00:04:10.354 --> 00:04:14.502
arrow function style, which is all our
syntax supports [LAUGH] in this language,

83
00:04:14.502 --> 00:04:17.503
we don't support the write
out the word function syntax.

84
00:04:17.503 --> 00:04:21.348
So const increment equals, or inc for
short, for slide saving purposes,

85
00:04:21.348 --> 00:04:25.132
takes an argument called n, and
then it returns n + 1 and increments it,

86
00:04:25.132 --> 00:04:26.367
very simple function.

87
00:04:26.367 --> 00:04:31.002
So let's say, once again,
we've got our x equals 5, and then for y,

88
00:04:31.002 --> 00:04:33.647
we call increment passing in 3, okay?

89
00:04:33.647 --> 00:04:38.098
So far, so good, now, at this point,
it's not enough for us to just say,

90
00:04:38.098 --> 00:04:40.374
well, we've got just the one scope.

91
00:04:40.374 --> 00:04:43.648
Because if I were to use n down here,
that's supposed to be an error,

92
00:04:43.648 --> 00:04:47.147
because we have a different scope here
at the top level, where we have x and

93
00:04:47.147 --> 00:04:49.764
y in increment than we do
inside the body of increment.

94
00:04:49.764 --> 00:04:53.539
Now, inside the body of increment, we have
a different scope where n is in scope, and

95
00:04:53.539 --> 00:04:56.906
so, I'm allowed to do this, but outside
of your n is not allowed to be used.

96
00:04:56.906 --> 00:04:58.649
However, inside this nested scope,

97
00:04:58.649 --> 00:05:00.940
I am still supposed to be
able to reference x and y.

98
00:05:00.940 --> 00:05:04.552
Or at least, depending on the sort of
capture rules of lambdas and hoisting and

99
00:05:04.552 --> 00:05:06.632
things like that, some languages will, and

100
00:05:06.632 --> 00:05:08.787
other languages will not
allow you to do that.

101
00:05:08.787 --> 00:05:11.919
But pretty much every language will,
if you move inc down below these two,

102
00:05:11.919 --> 00:05:12.821
allow you to do that.

103
00:05:12.821 --> 00:05:14.919
Here is, if we were just doing
the naive version of this,

104
00:05:14.919 --> 00:05:17.897
like we've done the previous slide,
where we're not thinking about nesting,

105
00:05:17.897 --> 00:05:19.885
here's what we would do,
initialize the new scope.

106
00:05:19.885 --> 00:05:21.225
We add increment to the scope.

107
00:05:21.225 --> 00:05:25.160
We add n to the scope because, we came
along and this needs to be in scope.

108
00:05:25.160 --> 00:05:27.865
That way, when we go here,
we can look it up successfully.

109
00:05:27.865 --> 00:05:30.894
And then we add x, and now we're
already in trouble because now x and

110
00:05:30.894 --> 00:05:33.249
n are in the same scope,
which is not what we wanted.

111
00:05:33.249 --> 00:05:36.340
And then we add y, and that's also
a problem because [LAUGH] that's

112
00:05:36.340 --> 00:05:38.115
not supposed to be the same scope as n.

113
00:05:38.115 --> 00:05:41.696
So already we can see that the model that
we used on the previous slide is not quite

114
00:05:41.696 --> 00:05:43.247
sufficient for the nesting case,

115
00:05:43.247 --> 00:05:46.473
we need to add some sort of layer of
complexity to be able to handle that.

116
00:05:46.473 --> 00:05:50.597
So let's start over and actually do
it properly with nesting in mind.

117
00:05:50.597 --> 00:05:54.319
So here, essentially, we're still gonna
do the scope = new Set(), but basically,

118
00:05:54.319 --> 00:05:55.919
we're gonna have an array of scopes.

119
00:05:55.919 --> 00:06:00.308
So we're gonna push that
set onto the scopes array.

120
00:06:00.308 --> 00:06:04.348
And then basically, from there we can
just add stuff like increment, and

121
00:06:04.348 --> 00:06:06.448
then when we want to start a new scope.

122
00:06:06.448 --> 00:06:07.987
So I'm just gonna call this one inner.

123
00:06:07.987 --> 00:06:11.395
This is gonna be exactly the same thing,
I'm just choosing a different name for it,

124
00:06:11.395 --> 00:06:13.419
that can now represent
the scope inside of there.

125
00:06:13.419 --> 00:06:15.179
And so, I can do scopes.push(inner).

126
00:06:15.179 --> 00:06:18.070
And then while we're inside inner,
now I can say inner.add(''n'').

127
00:06:18.070 --> 00:06:20.340
So I'm not adding it to the outer scope,
being added to the inner scope.

128
00:06:20.340 --> 00:06:23.705
And then at that point, this part
gets a little bit fancier, a little

129
00:06:23.705 --> 00:06:27.942
bit more complicated, where, now, instead
of just being able to say, scope.has,

130
00:06:27.942 --> 00:06:31.389
I need to iterate over all my scopes and
see if any of the scopes have it.

131
00:06:31.389 --> 00:06:36.119
So that's again, that point of, well,
at this point, and we know we have n, but

132
00:06:36.119 --> 00:06:39.845
there could have been other stuff
above here in the outer scope.

133
00:06:39.845 --> 00:06:42.757
For example, if these had moved up,
that should be in scope,

134
00:06:42.757 --> 00:06:45.849
that I should be allowed to
reference from inside this function.

135
00:06:45.849 --> 00:06:49.984
And if I got naming errors saying these
are not in scope, that would be an error,

136
00:06:49.984 --> 00:06:52.405
that's not what you want
your compiler to do.

137
00:06:52.405 --> 00:06:55.741
So to guard against that,
we have this entire array of scopes, and

138
00:06:55.741 --> 00:06:59.435
we keep them around, and we do search
all of them when we are trying to say,

139
00:06:59.435 --> 00:07:01.121
is this thing in scope properly.

140
00:07:01.121 --> 00:07:04.823
And then finally, it's very important
that once we're done with the scope,

141
00:07:04.823 --> 00:07:07.684
we end this inner scope,
we get to this closing curly brace,

142
00:07:07.684 --> 00:07:10.623
we need to get rid of it and and
pop it, so just pop it off scope.

143
00:07:10.623 --> 00:07:13.457
Just basically get rid of
the last one that we were using.

144
00:07:13.457 --> 00:07:16.248
And the reason that's important is that,
if you don't do that,

145
00:07:16.248 --> 00:07:18.074
then later on you do
the same exact search,

146
00:07:18.074 --> 00:07:21.047
this is how we always search our scopes
now to see if a lookup is valid.

147
00:07:21.047 --> 00:07:24.368
Now, you get down and you get down
here and you're doing that lookup,

148
00:07:24.368 --> 00:07:27.631
all these lookups would be able to
find n if we didn't pop that scope,

149
00:07:27.631 --> 00:07:30.018
it would just be as if we
had no curly braces at all.

150
00:07:30.018 --> 00:07:32.205
We'd basically be back
where we started on from.

151
00:07:32.205 --> 00:07:35.624
So the whole point of having an array of
scopes is basically to be able to push

152
00:07:35.624 --> 00:07:39.452
right here, and then to pop when you're
done with it, and that allows you to nest.

153
00:07:39.452 --> 00:07:42.586
And un-nest and nest, there's nest, nest,
nest, nest and un-nest a little bit, and

154
00:07:42.586 --> 00:07:43.627
nest some more and un-nest.

155
00:07:43.627 --> 00:07:47.316
So basically, every time you're pushing
a scope onto this array of scopes,

156
00:07:47.316 --> 00:07:50.509
you are increasing your indentation level,
your nesting level.

157
00:07:50.509 --> 00:07:53.485
And then every time you pop,
you're finishing a scope, it's ending and

158
00:07:53.485 --> 00:07:54.784
you're going back up a little.

