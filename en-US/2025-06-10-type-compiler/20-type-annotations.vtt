WEBVTT

1
00:00:00.000 --> 00:00:02.059
So as we have seen,
everything up to this point.

2
00:00:02.059 --> 00:00:06.379
[LAUGH] We have not even discussed a
syntax for type annotations because yeah,

3
00:00:06.379 --> 00:00:09.379
Hindley-Milner, it's decidable,
it's great.

4
00:00:09.379 --> 00:00:12.480
You don't need to annotate your types if
you don't want to but now we're going to.

5
00:00:12.480 --> 00:00:16.522
There are multiple reasons you
might want to annotate your types.

6
00:00:16.522 --> 00:00:19.767
The most obvious one is that these
can serve as essentially comments,

7
00:00:19.767 --> 00:00:21.254
except that they are verified.

8
00:00:21.254 --> 00:00:25.349
So if your comments, you write a comment
over that says, hey, this is a string, but

9
00:00:25.349 --> 00:00:27.328
then later on, it stops being a string.

10
00:00:27.328 --> 00:00:29.720
Nobody tells you about
the comment being out of date,

11
00:00:29.720 --> 00:00:31.861
you just are unpleasantly
surprised perhaps.

12
00:00:31.861 --> 00:00:34.579
Whereas this thing, if I actually were
to change this to not be a string,

13
00:00:34.579 --> 00:00:35.838
then I would get a type mismatch.

14
00:00:35.838 --> 00:00:38.633
So that's a convenient thing,
that type annotations can do.

15
00:00:38.633 --> 00:00:42.539
A subtler thing, that type annotations
this can do is that, although it is

16
00:00:42.539 --> 00:00:46.817
the case that in Hindley-Milner, well
actually we'll talk about that in a sec,

17
00:00:46.817 --> 00:00:48.802
so I'll come back to that one in a sec.

18
00:00:48.802 --> 00:00:51.527
There was another thing that you
can do with type annotations and

19
00:00:51.527 --> 00:00:52.546
we'll come back to it.

20
00:00:52.546 --> 00:00:55.668
So yeah, here are two different type
annotations, string and number.

21
00:00:55.668 --> 00:00:59.299
We're not gonna get into syntax
too much of type annotations,

22
00:00:59.299 --> 00:01:01.435
basically just kind of TypeScript.

23
00:01:01.435 --> 00:01:03.583
Like I said, they're really
an afterthought in this course,

24
00:01:03.583 --> 00:01:05.661
the main purpose is,
let's talk about the type inference.

25
00:01:05.661 --> 00:01:11.019
And then annotations are just a by the
way, this is a thing you probably want to.

26
00:01:11.019 --> 00:01:14.787
So go through and do our usual
assignments of these things, okay,

27
00:01:14.787 --> 00:01:16.211
all this very familiar.

28
00:01:16.211 --> 00:01:20.395
The thing that the type annotation gives
us is that we can basically say, okay,

29
00:01:20.395 --> 00:01:23.711
I can go ahead and actually put
an additional constraint here.

30
00:01:23.711 --> 00:01:27.687
Now we don't actually, at least in
the case of something like string,

31
00:01:27.687 --> 00:01:30.668
we don't need to go and
make a separate type idfor it,

32
00:01:30.668 --> 00:01:33.808
because it's really only
doing one thing in one place.

33
00:01:33.808 --> 00:01:37.927
So much like with our lookups, we can just
say, okay, this is just a constraint, so

34
00:01:37.927 --> 00:01:41.930
we're just gonna unify, we're gonna do
an extra unification here with string,

35
00:01:41.930 --> 00:01:43.457
but we don't need to store it.

36
00:01:43.457 --> 00:01:45.133
Because nobody's ever gonna be like,

37
00:01:45.133 --> 00:01:48.852
hey, I have the same type as that thing's
type annotation, that's just not a thing.

38
00:01:48.852 --> 00:01:51.310
So all we're gonna do is we're
just going to be like, okay,

39
00:01:51.310 --> 00:01:52.625
I see this annotation, got it.

40
00:01:52.625 --> 00:01:55.964
I'm just gonna add one more unification
on the pile and basically say, okay,

41
00:01:55.964 --> 00:01:59.253
because this thing has the type string,
I'm gonna unify 0 with string, and

42
00:01:59.253 --> 00:02:00.640
then that's it, we're done.

43
00:02:00.640 --> 00:02:02.983
We just have that one
unification in the mix, and

44
00:02:02.983 --> 00:02:06.197
then the type annotation is
essentially discarded at that point.

45
00:02:06.197 --> 00:02:09.427
Same thing with numbers, just like,
yeah, just unify this thing with number.

46
00:02:09.427 --> 00:02:12.933
One way that you can think about it is
that the purpose of a type annotation is

47
00:02:12.933 --> 00:02:16.175
essentially to just be an extra
constraint or an extra unification.

48
00:02:16.175 --> 00:02:20.058
And we're gonna come back to that
word constraint in a second.

49
00:02:20.058 --> 00:02:23.200
So this does,
it is a meaningful constraint, right?

50
00:02:23.200 --> 00:02:25.326
So if I did try to annotate
it as a number, and

51
00:02:25.326 --> 00:02:28.790
then I tried to put a string here,
well, that's end up being a string.

52
00:02:28.790 --> 00:02:31.054
And then I unified the string with
a number, then we get a type mismatch.

53
00:02:31.054 --> 00:02:33.970
So the way that you get type
mismatches out of type annotations in

54
00:02:33.970 --> 00:02:37.697
a Hindley-Milner language is basically
just the same way you get type mismatches

55
00:02:37.697 --> 00:02:39.002
absolutely anywhere else.

56
00:02:39.002 --> 00:02:42.392
You just unified two things and
they were both concrete types and

57
00:02:42.392 --> 00:02:46.096
they were different concrete types,
and that's a type mismatch, so

58
00:02:46.096 --> 00:02:48.131
this is exactly how you would do that.

59
00:02:48.131 --> 00:02:52.135
Okay, now there's actually a more precise
way to talk about what Hindley-Milner

60
00:02:52.135 --> 00:02:55.507
gives you, which is that it is not
only decidable type inference, but

61
00:02:55.507 --> 00:02:57.638
it is principle decidable type inference.

62
00:02:57.638 --> 00:03:01.432
Now, not all Hindley-Milner languages
have this, so there are certain type

63
00:03:01.432 --> 00:03:05.010
system features, which, if you put
them in your type system, you stop.

64
00:03:05.010 --> 00:03:07.636
You're still decidable, but
you're not principle decidable, so

65
00:03:07.636 --> 00:03:09.277
I'll explain what that means in a second.

66
00:03:09.277 --> 00:03:11.845
But as an example, so
if you have rank one types,

67
00:03:11.845 --> 00:03:14.550
definitely not gonna get
into what rank types are.

68
00:03:14.550 --> 00:03:18.160
But if you're familiar with Haskell,
there's some extensions called rank two

69
00:03:18.160 --> 00:03:21.041
types and Rank-N types, and
the default being rank one types.

70
00:03:21.041 --> 00:03:25.333
A really subtle distinction here
is that if you have Rank-2 types,

71
00:03:25.333 --> 00:03:28.589
that means you are principle
decidable in Haskell.

72
00:03:28.589 --> 00:03:32.275
If you have Rank-N types, you lose
the principle part but weirdly, and

73
00:03:32.275 --> 00:03:36.386
this is such a strange thing because this
so rarely happens in computer science,

74
00:03:36.386 --> 00:03:39.483
rank two types are still
technically principle decidable.

75
00:03:39.483 --> 00:03:43.979
Rank-1 and Rank-2 both are, bur rank
anything three and above stops being that.

76
00:03:43.979 --> 00:03:46.739
I don't know enough type
theory to know why that is,

77
00:03:46.739 --> 00:03:48.450
I just know that it's that way.

78
00:03:48.450 --> 00:03:52.155
Based on this, I looked into, hey,
could we have ranked two types in rock and

79
00:03:52.155 --> 00:03:54.726
not sacrifice principle
decidable type inference.

80
00:03:54.726 --> 00:03:58.935
And I got two pieces of advice on this,
one was from a professor at Upenn,

81
00:03:58.935 --> 00:04:02.462
Stephanie Weyrich,
who was basically like don't do that.

82
00:04:02.462 --> 00:04:05.822
[LAUGH] She went down the Rank-2 rabbit
hole and was like, no, it's not worth it.

83
00:04:05.822 --> 00:04:10.026
Just either keep your principal
decidable or go all the way to Rank-N,

84
00:04:10.026 --> 00:04:12.914
just that middle ground
is not worth the effort.

85
00:04:12.914 --> 00:04:16.807
And then the other was we were actually
looking into it with rocks like Cogen.

86
00:04:16.807 --> 00:04:20.519
It turns out that there are some type
system features that actually interact

87
00:04:20.519 --> 00:04:21.509
with and restrict.

88
00:04:21.509 --> 00:04:24.923
What you're able to do in terms of high
performance code generation if you're

89
00:04:24.923 --> 00:04:27.731
going straight to machine code or
web assembly like we are here.

90
00:04:27.731 --> 00:04:31.228
So for both of those reasons, yeah,
Rank-2 types, maybe not the best choice.

91
00:04:31.228 --> 00:04:35.437
I mainly give that as an example of there
are good reasons that a language might

92
00:04:35.437 --> 00:04:36.943
choose to sacrifice this.

93
00:04:36.943 --> 00:04:40.047
It's not like if you don't have
the principle part of the type inference,

94
00:04:40.047 --> 00:04:43.215
you're just making a mistake but
just talk about what that is very briefly.

95
00:04:43.215 --> 00:04:45.091
So decidable, like we mentioned earlier,

96
00:04:45.091 --> 00:04:48.339
at the very beginning when we introduced
Hindley-Milner type inference,

97
00:04:48.339 --> 00:04:51.295
this means that the type system
always infers the correct type okay.

98
00:04:51.295 --> 00:04:54.564
Unless there's a bug in the type checker,
which we would never write bugs.

99
00:04:54.564 --> 00:04:57.677
But if some other person were to write
a bug in a type checker, then yeah,

100
00:04:57.677 --> 00:05:00.809
the idea is that the algorithm itself
always produces the correct type.

101
00:05:00.809 --> 00:05:03.945
So assuming the algorithm is implemented
correctly, that's gonna happen and

102
00:05:03.945 --> 00:05:05.687
it never needs help from type annotations.

103
00:05:05.687 --> 00:05:09.838
So we've definitely seen that, haven't
written any type annotations yet, and

104
00:05:09.838 --> 00:05:12.496
we're at the very end of
the type checking section.

105
00:05:12.496 --> 00:05:15.800
Principle decidable type
parameters means that the type

106
00:05:15.800 --> 00:05:20.636
inference always infers the most generic
type, the most flexible possible type.

107
00:05:20.636 --> 00:05:24.818
And the practical upshot of this, it means
that it is not possible in the language to

108
00:05:24.818 --> 00:05:27.947
add a type annotation,
which makes that type more flexible.

109
00:05:27.947 --> 00:05:32.358
But you can add a type annotation that
makes the type less flexible if you want.

110
00:05:32.358 --> 00:05:36.652
So an example of this is you could have an
array that's basically like I am an array

111
00:05:36.652 --> 00:05:38.622
with like an unbound type variable.

112
00:05:38.622 --> 00:05:43.133
Really easy example of this is empty
array, that's unbound type variable.

113
00:05:43.133 --> 00:05:46.174
Empty array is not an array of strings,
it's not an array of numbers,

114
00:05:46.174 --> 00:05:49.539
it's an array of unbound type variable
I don't know it works with anything.

115
00:05:49.539 --> 00:05:52.873
But if you want,
you could say X equals empty array and

116
00:05:52.873 --> 00:05:57.334
slap a type annotation on there that
says X colon array bracket string.

117
00:05:57.334 --> 00:06:01.049
So you're like this is
an empty array of strings,

118
00:06:01.049 --> 00:06:03.883
okay and if you want, you can do that.

119
00:06:03.883 --> 00:06:06.840
And the reason that that sort of
just works naturally is because,

120
00:06:06.840 --> 00:06:10.335
as we've seen from the previous section,
all these things are doing is it's

121
00:06:10.335 --> 00:06:13.643
just unifying whatever the annotation
says with whatever this type is.

122
00:06:13.643 --> 00:06:16.280
So you can of course,
use that to constrain something,

123
00:06:16.280 --> 00:06:19.322
because that's just one of
the things that unification can do.

124
00:06:19.322 --> 00:06:23.054
If it is going down and traversing down
and trying to combine these things and

125
00:06:23.054 --> 00:06:26.025
find some common ground there,
it might say, okay, well,

126
00:06:26.025 --> 00:06:29.088
array of string unifies with
array of unbound type variable.

127
00:06:29.088 --> 00:06:33.187
Well, we descend down and unify string,
which is a concrete type with unbound type

128
00:06:33.187 --> 00:06:35.663
variable, which is null and
string sort of wins.

129
00:06:35.663 --> 00:06:39.987
And this the null gets similar to that,
or just outright replaced, either way,

130
00:06:39.987 --> 00:06:43.182
you end up with array bracket
string if you unify those two.

131
00:06:43.182 --> 00:06:45.086
So even though the type inference says,

132
00:06:45.086 --> 00:06:48.951
yeah, this could be this flexible, you
can annotate it to make it less flexible.

133
00:06:48.951 --> 00:06:52.584
But principal decidable type inference
means that you cannot annotate your

134
00:06:52.584 --> 00:06:55.149
way into it being more flexible
than what it would be.

135
00:06:55.149 --> 00:06:57.913
If you can,
then it's not principal anymore, yeah.

136
00:06:57.913 --> 00:06:59.777
&gt;&gt; Student: I had a question to
go back to the previous slide.

137
00:06:59.777 --> 00:07:01.363
&gt;&gt; Richard Feldman: Yeah.

138
00:07:01.363 --> 00:07:04.424
&gt;&gt; Student: Why is it that,
for example, id0 and

139
00:07:04.424 --> 00:07:09.400
2 are referring to the IDs of
the other elements in the table,

140
00:07:09.400 --> 00:07:14.185
as opposed to just the concrete
type string, for example,

141
00:07:14.185 --> 00:07:18.328
since you're doing unified zero and
string here?

142
00:07:18.328 --> 00:07:20.815
&gt;&gt; Richard Feldman: I see we're saying,
why is this not overriding that one?

143
00:07:20.815 --> 00:07:21.790
&gt;&gt; Student: Yeah.

144
00:07:21.790 --> 00:07:23.974
&gt;&gt; Richard Feldman: Yeah, I mean that's,
I think that's just a typo on my,

145
00:07:23.974 --> 00:07:26.579
like these, they're similar to
each other so it doesn't matter.

146
00:07:26.579 --> 00:07:28.549
But you're right,
they should be swapped but

147
00:07:28.549 --> 00:07:31.427
you'll end up with the type checker
doing the same things but yeah,

148
00:07:31.427 --> 00:07:33.817
I think you're right,
that's just a slight mistake.

149
00:07:33.817 --> 00:07:34.477
[LAUGH]
&gt;&gt; Student: No worries,

150
00:07:34.477 --> 00:07:36.428
yes I'm not sure it was in a specific,
you know what I mean?

151
00:07:36.428 --> 00:07:38.499
&gt;&gt; Richard Feldman: Yeah,
you weren't missing anything but

152
00:07:38.499 --> 00:07:42.297
yeah six one half dozen, the other,
yes it should have been the other slot.

153
00:07:42.297 --> 00:07:45.962
[LAUGH] Good catch.

154
00:07:45.962 --> 00:07:48.618
Okay, so the other thing about
Hindley-Milner is that is a sound type

155
00:07:48.618 --> 00:07:50.430
system, we talked about
this earlier as well.

156
00:07:50.430 --> 00:07:54.303
So basically this means that this type
system has no concept of runtime type

157
00:07:54.303 --> 00:07:55.047
mismatches.

158
00:07:55.047 --> 00:07:57.607
So now that we're at the end
of the type checking section,

159
00:07:57.607 --> 00:07:58.817
we can once again see this.

160
00:07:58.817 --> 00:08:01.067
There was no point at which we were like,
and

161
00:08:01.067 --> 00:08:04.473
here's the spot where you can have
a string here and a number here, and

162
00:08:04.473 --> 00:08:06.980
then if you got the wrong one at runtime,
we crash.

163
00:08:06.980 --> 00:08:09.720
It's like, no if you ever had a string
here and a number here, potentially,

164
00:08:09.720 --> 00:08:12.605
that's where we have a type mismatch, and
we report it to the user at build time.

165
00:08:12.605 --> 00:08:16.424
That's the only thing we even have
a concept of in this type system,

166
00:08:16.424 --> 00:08:19.979
so all type errors, I should say,
are reported at build time.

167
00:08:19.979 --> 00:08:23.072
Also the implication of both of these
is that all types are fully known

168
00:08:23.072 --> 00:08:23.776
at build time.

169
00:08:23.776 --> 00:08:28.655
So even if we know that the type is
a bound, that basically means what we

170
00:08:28.655 --> 00:08:32.554
know about this type is it
could be anything at run time.

171
00:08:32.554 --> 00:08:34.211
It's the identity function like,

172
00:08:34.211 --> 00:08:36.539
one of those type scenarios
are in an empty array.

173
00:08:36.539 --> 00:08:39.707
Yeah, the information about its type
is that that type is maximally flexible

174
00:08:39.707 --> 00:08:42.158
because you can use it with whatever,
it's polymorphic.

175
00:08:42.158 --> 00:08:45.742
Yeah, so in summary, basically,
we talked about polymorphic functions,

176
00:08:45.742 --> 00:08:47.959
arrays and
how they can be polymorphic as well.

177
00:08:47.959 --> 00:08:51.579
And finally, type annotations, at long
last, we actually finally got some type

178
00:08:51.579 --> 00:08:54.473
annotations in here,
right at the last minute, under the wire.

179
00:08:54.473 --> 00:08:57.537
And yeah, that's because,
with him, lemon type that prints,

180
00:08:57.537 --> 00:09:00.838
you don't have to have them,
they're completely optional, yeah.

181
00:09:00.838 --> 00:09:06.185
Would it be fair to say that committing
in ways to Hindley-Milner and

182
00:09:06.185 --> 00:09:11.625
the conventions of it helps us with
polymorphism because it sets a more

183
00:09:11.625 --> 00:09:17.549
strict bound early, it defines our
possibilities upstream, so to speak?

184
00:09:17.549 --> 00:09:21.427
I'd say it's pretty subjective,
the question of does committing to

185
00:09:21.427 --> 00:09:25.118
Hindley-Milner make your life
easier in terms of polymorphism?

186
00:09:25.118 --> 00:09:29.130
Because you're sort of committing to a
certain rule set that's pretty simple, but

187
00:09:29.130 --> 00:09:30.268
also pretty powerful.

188
00:09:30.268 --> 00:09:33.516
Yeah, reasonable people can disagree,
I would say some people would say yeah,

189
00:09:33.516 --> 00:09:36.118
I totally agree, it's great,
it's simple, it's awesome.

190
00:09:36.118 --> 00:09:37.532
Other people might say,

191
00:09:37.532 --> 00:09:41.516
but the type of polymorphism I wanna
do is not easy to do in this system.

192
00:09:41.516 --> 00:09:44.387
I wanna do subtype polymorphisms and
stuff like that, so yeah,

193
00:09:44.387 --> 00:09:46.362
I wouldn't take a stand
either way on that.

194
00:09:46.362 --> 00:09:47.222
[LAUGH] Personally.

