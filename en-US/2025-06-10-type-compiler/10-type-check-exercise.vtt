WEBVTT

1
00:00:00.000 --> 00:00:00.670
&gt;&gt; Richard Feldman: So once again,

2
00:00:00.670 --> 00:00:03.303
we now have a new section in
here that we didn't have before.

3
00:00:03.303 --> 00:00:05.827
We still have naming parts tokenized
from the previous section.

4
00:00:05.827 --> 00:00:07.583
And now we additionally have type check,

5
00:00:07.583 --> 00:00:11.111
which is what we're gonna also have these
exact five for the next three exercises.

6
00:00:11.111 --> 00:00:15.414
So as with all the others,
it's just like run node index.js.

7
00:00:15.414 --> 00:00:16.733
So we just gotta see
the inter there first.

8
00:00:16.733 --> 00:00:18.054
So we'll go ahead and do that.

9
00:00:18.054 --> 00:00:22.383
And as with all the others,
we have a bunch failing tests and

10
00:00:22.383 --> 00:00:28.185
we're gonna resolve them by just finding
this little finger pointing thing and

11
00:00:28.185 --> 00:00:30.537
figuring out what we should do.

12
00:00:30.537 --> 00:00:34.427
So, once again if you're curious about
all this stuff, you can learn about it.

13
00:00:34.427 --> 00:00:36.572
A lot of the things in the type checker,

14
00:00:36.572 --> 00:00:38.915
this is a lot longer
than the other things.

15
00:00:38.915 --> 00:00:41.280
This is already 500 and
by the end of the course,

16
00:00:41.280 --> 00:00:42.995
it's doubled in size to a thousand.

17
00:00:42.995 --> 00:00:45.065
There's already some stuff in here
that we haven't talked about.

18
00:00:45.065 --> 00:00:49.259
So if you see unify, for example, we're
gonna talk about that in the next section.

19
00:00:49.259 --> 00:00:52.440
So don't feel bad at you need to
understand that or you missed something.

20
00:00:52.440 --> 00:00:55.368
You didn't miss it, it's just like for
the exercises I wanted to have,

21
00:00:55.368 --> 00:00:57.000
doing the actual type checking thing and

22
00:00:57.000 --> 00:00:59.650
that requires having things that
we haven't learned about yet.

23
00:00:59.650 --> 00:01:00.973
But for our purposes,

24
00:01:00.973 --> 00:01:05.924
we're mostly concerned with jus fixing
these small number of finger arrow things.

25
00:01:05.924 --> 00:01:10.009
So in this case we're using the same
terminology as we were in naming and

26
00:01:10.009 --> 00:01:13.619
this is what we're gonna be
consistent with throughout here,

27
00:01:13.619 --> 00:01:15.405
which is just visiting a note.

28
00:01:15.405 --> 00:01:19.037
So when it was naming, we were visiting
nodes in order to build up scope and

29
00:01:19.037 --> 00:01:21.850
detect whether we use things
after they were declared and

30
00:01:21.850 --> 00:01:23.620
if we had duplicate declarations.

31
00:01:23.620 --> 00:01:24.906
But for type checking,

32
00:01:24.906 --> 00:01:29.420
we're visiting nodes, because basically
we want to populate the type database.

33
00:01:29.420 --> 00:01:33.640
So a really consistent thing that we're
gonna be doing in this stage is basically

34
00:01:33.640 --> 00:01:36.507
just like working with type
IDs in that type database.

35
00:01:36.507 --> 00:01:38.872
So the first thing we do here is be like,

36
00:01:38.872 --> 00:01:43.257
okay find the type ID of the parse
tree node that is stored in node.init.

37
00:01:43.257 --> 00:01:46.727
So const declaration basically has
these three fields, so you have type.

38
00:01:46.727 --> 00:01:49.910
That's just the node type, so
all the nodes have a field called type.

39
00:01:49.910 --> 00:01:55.178
The ID is basically corresponding
to an actual like database ID.

40
00:01:55.178 --> 00:02:00.084
So it has a field called type ID, won't
get into why this is an object later, but

41
00:02:00.084 --> 00:02:03.014
basically that is the field
that if you wanna get

42
00:02:03.014 --> 00:02:06.037
the actual ID that
corresponds to the database.

43
00:02:06.037 --> 00:02:09.509
That's like zero or one or two or
whatever that is, that's how you get that.

44
00:02:09.509 --> 00:02:11.012
And then finally, we have init,

45
00:02:11.012 --> 00:02:13.650
which is basically what is
this constant initialized to?

46
00:02:13.650 --> 00:02:15.341
And that is another parse tree node.

47
00:02:15.341 --> 00:02:17.555
So this one's a parse tree node,
this one is not.

48
00:02:17.555 --> 00:02:19.389
This one's just a database ID.

49
00:02:19.389 --> 00:02:21.754
And then this thing is
just saying I am a cost.

50
00:02:21.754 --> 00:02:25.267
So as the example if we had const x
equals five, the parse tree node for

51
00:02:25.267 --> 00:02:28.064
the five part,
that's gonna be over here init field.

52
00:02:28.064 --> 00:02:31.932
And then there's gonna be some type
id that was associated in a previous

53
00:02:31.932 --> 00:02:34.772
step that we're not gonna
work on in this exercise.

54
00:02:34.772 --> 00:02:37.743
Something went through and
assigned all of these ids to these.

55
00:02:37.743 --> 00:02:42.471
Okay, that's the first thing we gotta do
is we gotta actually go find the type id

56
00:02:42.471 --> 00:02:43.670
and once we have it,

57
00:02:43.670 --> 00:02:48.132
then what we wanna do is we want to store
that in our sort of type level scope.

58
00:02:48.132 --> 00:02:49.101
So this right here,

59
00:02:49.101 --> 00:02:52.752
the scope concept works exactly the same
way as we did in the naming section.

60
00:02:52.752 --> 00:02:56.209
The only difference is that now we're
actually storing something with

61
00:02:56.209 --> 00:02:57.080
the scope entry.

62
00:02:57.080 --> 00:03:00.932
So I'm not just saying yes, this is in
scope, I'm saying, I'm in scope, and

63
00:03:00.932 --> 00:03:02.326
actually this is my type id.

64
00:03:02.326 --> 00:03:05.221
So now, you can not only go look up and
ask the question,

65
00:03:05.221 --> 00:03:06.766
is this thing in scope or not?

66
00:03:06.766 --> 00:03:09.834
It was declared, but
also you can say much more importantly,

67
00:03:09.834 --> 00:03:11.906
what is the type id associated with that?

68
00:03:11.906 --> 00:03:15.205
So that was how when we were
talking through it in the slides,

69
00:03:15.205 --> 00:03:18.894
we were able to do things like
associate like a with 0 immediately,

70
00:03:18.894 --> 00:03:21.309
without having to do the symlinking stuff.

71
00:03:21.309 --> 00:03:23.093
We can just be like, I see it's in scope.

72
00:03:23.093 --> 00:03:26.163
Got it, that's what its type id is.

73
00:03:26.163 --> 00:03:30.800
So this is where we are actually setting
that in the declaration, we're like, okay,

74
00:03:30.800 --> 00:03:34.991
cool, we need to modify the scope to say
that is equal to the type id that we found

75
00:03:34.991 --> 00:03:36.281
in the previous thing.

76
00:03:36.281 --> 00:03:41.175
And finally, we have basically just like
needing to record the type id that we

77
00:03:41.175 --> 00:03:44.884
just added the scope inside
the notes node.id.type id.

78
00:03:44.884 --> 00:03:47.768
And that's also gonna be a freebie,
apparently.

79
00:03:47.768 --> 00:03:53.072
[LAUGH] But yeah, basically, this is the
part where we're like, okay, if we want to

80
00:03:53.072 --> 00:03:58.323
write this down for later, it's not enough
for us to say, we added we looked it up.

81
00:03:58.323 --> 00:04:02.060
We added it to scope, we also need to add
it to the node so that, if we were making

82
00:04:02.060 --> 00:04:05.195
a language server, we could do
the hover to find out the id thing.

83
00:04:05.195 --> 00:04:08.659
Or much more importantly, for our
purposes, we actually will directly need

84
00:04:08.659 --> 00:04:11.288
that later on when we get to
web assembly code generation.

85
00:04:17.457 --> 00:04:21.105
&gt;&gt; Richard Feldman: So
let's go through our solutions here.

86
00:04:21.105 --> 00:04:24.389
So we had this visit cost
declaration function and

87
00:04:24.389 --> 00:04:27.368
currently we need to do
a couple things here.

88
00:04:27.368 --> 00:04:31.757
So one is first find the type id of
the parse tree node stored in node.init.

89
00:04:31.757 --> 00:04:35.542
So, it's basically this thing right here,
there's the type id that we need.

90
00:04:35.542 --> 00:04:39.248
So [COUGH] the one other thing
that we need to do is in order

91
00:04:39.248 --> 00:04:41.585
to actually get the correct node,

92
00:04:41.585 --> 00:04:46.034
we do wanna visit the node of
node.init in order to get that back.

93
00:04:46.034 --> 00:04:50.984
So essentially, putting those two
things together, we do const init type,

94
00:04:50.984 --> 00:04:53.508
or you can name this whatever you want.

95
00:04:53.508 --> 00:04:58.605
But the relevant part is that we do
wanna visit this node and go process it.

96
00:04:58.605 --> 00:05:03.478
And node.init is the one that we
want here to go with its type id.

97
00:05:03.478 --> 00:05:07.583
Then next thing we wanna do is
assign that type to the identifier.

98
00:05:07.583 --> 00:05:10.479
So for example, for
like const x equals five,

99
00:05:10.479 --> 00:05:14.504
we wanna write down in this node
what the actual identifier was.

100
00:05:14.504 --> 00:05:18.824
So that's where
the node.id.typeid comes in.

101
00:05:18.824 --> 00:05:23.379
And so we'll just put that right there
next to this now that we've looked it up.

102
00:05:23.379 --> 00:05:29.182
And after that, next thing we wanna do is
just add the actual variable to scope.

103
00:05:29.182 --> 00:05:32.616
So unlike the previous section when
we were just adding it to a set and

104
00:05:32.616 --> 00:05:36.228
there was no associated value,
now there is a value that we care about,

105
00:05:36.228 --> 00:05:39.020
which is that we wanna actually
write down the type ID.

106
00:05:39.020 --> 00:05:43.787
So after doing this, everyone who
subsequently looks up in the scope,

107
00:05:43.787 --> 00:05:46.733
what is this particular constant's name?

108
00:05:46.733 --> 00:05:51.530
So a or b or x or whatever,
they'll find out immediately that this is

109
00:05:51.530 --> 00:05:55.581
the type of that thing on
the other side of the equal sign.

110
00:05:55.581 --> 00:05:59.336
I do wanna note that in some of
the solutions, I have some bits and

111
00:05:59.336 --> 00:06:01.994
pieces included about, type annotations.

112
00:06:01.994 --> 00:06:05.328
We're not talking about type annotations
now, but one of the things about type

113
00:06:05.328 --> 00:06:07.915
annotations is that, and
part of the reason we're not really

114
00:06:07.915 --> 00:06:11.072
doing them in this course is that they
just kind of pop up all over the place.

115
00:06:11.072 --> 00:06:14.342
There's just a whole bunch of ways,
there's annotation here, we gotta do this,

116
00:06:14.342 --> 00:06:15.858
and annotation here, we gotta do that.

117
00:06:15.858 --> 00:06:19.511
And so you will see a little sprinklings
of these things throughout the solutions

118
00:06:19.511 --> 00:06:22.895
where it's sort of like, okay, FYI,
if we were doing annotation stuff,

119
00:06:22.895 --> 00:06:26.514
here is one of the several places where
you would need to take that into account.

120
00:06:26.514 --> 00:06:28.382
But for our purposes,
we're gonna ignore them,

121
00:06:28.382 --> 00:06:31.287
and we're gonna talk about them a little
bit in a couple of sections from now.

122
00:06:31.287 --> 00:06:35.169
Okay, and then finally,
we return the actual type,

123
00:06:35.169 --> 00:06:39.066
because that's what visit
const declaration does.

124
00:06:39.066 --> 00:06:42.538
And let's see how we're looking,
fantastic, all the tests pass.

