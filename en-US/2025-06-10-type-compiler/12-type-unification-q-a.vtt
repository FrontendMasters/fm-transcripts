WEBVTT

1
00:00:00.000 --> 00:00:03.831
&gt;&gt; Speaker 2: Can you reiterate what
the situation in source code would be for

2
00:00:03.831 --> 00:00:07.847
a type or b type to end up being
resolved to null as their types?

3
00:00:07.847 --> 00:00:09.616
&gt;&gt; Richard Feldman: We're
actually gonna see that.

4
00:00:09.616 --> 00:00:14.379
So a really easy example of that, well, I
say easy, but we haven't gotten to it yet.

5
00:00:14.379 --> 00:00:17.491
So a polymorphic function,
so if you have a function,

6
00:00:17.491 --> 00:00:20.410
the identity function where
you have an argument.

7
00:00:20.410 --> 00:00:25.191
And the argument doesn't get used in the
body of the function, the argument ends up

8
00:00:25.191 --> 00:00:28.960
just staying null indefinitely
basically until it gets called.

9
00:00:28.960 --> 00:00:32.684
But it can get called and the calling
can cause it to stop being null

10
00:00:32.684 --> 00:00:35.730
identity function is
the easiest example of that, so

11
00:00:35.730 --> 00:00:39.068
we will see some nulls that
persist in the database table.

12
00:00:39.068 --> 00:00:40.708
[LAUGH] Let me get to that.

13
00:00:40.708 --> 00:00:43.761
Great question,
any other questions on this topic?

14
00:00:43.761 --> 00:00:45.332
Yeah.
&gt;&gt; Speaker 3: I on that question,

15
00:00:45.332 --> 00:00:49.457
so how many nulls you allow in rust
will not allow those states, so

16
00:00:49.457 --> 00:00:52.398
you'll be getting errors
all over the place.

17
00:00:52.398 --> 00:00:55.857
This is more of a design decision for
what you are intent,

18
00:00:55.857 --> 00:00:59.099
what you want out of your language and
compiler like so

19
00:00:59.099 --> 00:01:02.654
you have a bunch of null
variables that you're not using.

20
00:01:02.654 --> 00:01:04.305
&gt;&gt; Richard Feldman: Yeah.
&gt;&gt; Speaker 3: Some languages are fine

21
00:01:04.305 --> 00:01:07.162
with that,
some languages flag those as errors,

22
00:01:07.162 --> 00:01:09.758
is this kind of a design
decision point here?

23
00:01:09.758 --> 00:01:12.830
&gt;&gt; Richard Feldman: So these are null in
the sense of like these are null database

24
00:01:12.830 --> 00:01:16.701
entries, which is just like the thing
we're using to say, they could also

25
00:01:16.701 --> 00:01:20.941
be objects where we just write down the,
Instead of having symlink and concrete,

26
00:01:20.941 --> 00:01:25.244
we have simply concrete and unbound, and
then when we go through initialize them,

27
00:01:25.244 --> 00:01:28.097
we can initialize them to
an object that says unbound.

28
00:01:28.097 --> 00:01:31.127
It just seemed like null was kind of
the natural like way to say that in

29
00:01:31.127 --> 00:01:33.641
JavaScript, but yeah,
it could be whatever you want.

30
00:01:33.641 --> 00:01:37.489
&gt;&gt; Speaker 3: Yeah, thank you, that does
actually answer my question, thank you.

31
00:01:37.489 --> 00:01:40.023
&gt;&gt; Richard Feldman: [LAUGH] All right, so
that was the scenario where a is null,

32
00:01:40.023 --> 00:01:41.076
what about if b is null?

33
00:01:41.076 --> 00:01:45.499
So at this point, we know that we are not
in the scenario where a and b were null,

34
00:01:45.499 --> 00:01:49.454
because if a and b were null,
we already would have taken this path, so

35
00:01:49.454 --> 00:01:51.960
now we know that b is null,
but a is not null.

36
00:01:51.960 --> 00:01:55.378
Again, there's a number of
different ways you can handle this.

37
00:01:55.378 --> 00:01:59.861
One of the easiest ways to handle
this is basically just be like, what?

38
00:01:59.861 --> 00:02:02.162
Since the order doesn't
really matter here,

39
00:02:02.162 --> 00:02:05.349
I'm just gonna delegate to myself
just swapping the argument.

40
00:02:05.349 --> 00:02:08.884
So basically just call unify again,
passing B for the first argument, a for

41
00:02:08.884 --> 00:02:09.943
the second argument.

42
00:02:09.943 --> 00:02:13.715
So you're essentially doing the swap,
and now you're just gonna come back and

43
00:02:13.715 --> 00:02:16.092
then just like,
do whatever was was done in here.

44
00:02:16.092 --> 00:02:19.013
The reason you might wanna do
that is that at this point,

45
00:02:19.013 --> 00:02:21.634
this is all we're doing
in terms of unification.

46
00:02:21.634 --> 00:02:25.775
But as your type system gets bigger and
more complicated, you can have more and

47
00:02:25.775 --> 00:02:27.289
more stuff going on in here.

48
00:02:27.289 --> 00:02:31.480
And the advantage of doing something
like this is, you can just write once

49
00:02:31.480 --> 00:02:35.535
don't have to write the symmetrical
version where it's like hang on,

50
00:02:35.535 --> 00:02:36.630
what if b was null?

51
00:02:36.630 --> 00:02:40.638
Then we already know these things about
a because it wasn't in there, but

52
00:02:40.638 --> 00:02:43.627
like these other scenarios
still might be happening.

53
00:02:43.627 --> 00:02:46.838
So it's really just a straightforward
way to say like, yeah,

54
00:02:46.838 --> 00:02:51.096
I'm just going to punt all that and say
like, okay, if a is null, do these things.

55
00:02:51.096 --> 00:02:52.929
If b is null, just pretend b is a and

56
00:02:52.929 --> 00:02:55.536
just go handle it using
the code I already wrote.

57
00:02:55.536 --> 00:02:58.389
So then another scenario that
can come up is we say, okay,

58
00:02:58.389 --> 00:03:00.776
we now know that a is not null and
b is not null, and

59
00:03:00.776 --> 00:03:04.294
we also know from resolving symlinks
that neither of them is a symlink.

60
00:03:04.294 --> 00:03:05.675
So by process of elimination,

61
00:03:05.675 --> 00:03:09.086
we now know that if we make it to here in
UniFi both of them have to be concrete.

62
00:03:09.086 --> 00:03:12.581
So if both of them are concrete, then
the scenario that we really care about is,

63
00:03:12.581 --> 00:03:14.105
are they concrete and different?

64
00:03:14.105 --> 00:03:17.659
So remember remembering a few slides ago,
if we get to this point and we're like,

65
00:03:17.659 --> 00:03:20.047
they're both numbers,
we're like, that's fine.

66
00:03:20.047 --> 00:03:22.609
There's nothing wrong with
them both being numbers,

67
00:03:22.609 --> 00:03:25.180
they can just continue to
both be numbers and be happy.

68
00:03:25.180 --> 00:03:28.229
If one of them is a number,
the other one's a string or vice versa,

69
00:03:28.229 --> 00:03:31.942
that's when we have a problem, that's
where we need to report a type mismatch.

70
00:03:31.942 --> 00:03:34.991
So in the future, we will see that
Unify can get bigger and bigger,

71
00:03:34.991 --> 00:03:37.015
there's more and more of these scenarios.

72
00:03:37.015 --> 00:03:40.965
It turns out that like, concrete and
symlinks and the null are not the only

73
00:03:40.965 --> 00:03:44.295
possible things that this will
end up being, or there can be.

74
00:03:44.295 --> 00:03:47.699
If one is concrete, the other is concrete,
you can get these sort of nested

75
00:03:47.699 --> 00:03:50.888
structures where, like well,
what if they're both functions, but

76
00:03:50.888 --> 00:03:53.338
the functions might have
different argument types?

77
00:03:53.338 --> 00:03:56.522
Well, that still counts as a type
mismatch, and we'd have to, like,

78
00:03:56.522 --> 00:03:59.988
do a little bit more logic in here, or
maybe we start getting into two arrays.

79
00:03:59.988 --> 00:04:02.380
We say, okay, well yeah,
you're the both arrays but

80
00:04:02.380 --> 00:04:05.032
they could have different type
variables for their arrays.

81
00:04:05.032 --> 00:04:07.200
There's a lot more scenarios than this,
but

82
00:04:07.200 --> 00:04:11.136
right now we're just starting with like
a version of unified that fits on a slide,

83
00:04:11.136 --> 00:04:14.407
any questions about this version
that we're talking about so far.

84
00:04:14.407 --> 00:04:17.004
So we're just to reiterate
we result on the symlink so

85
00:04:17.004 --> 00:04:19.150
we don't have to worry
about those in here.

86
00:04:19.150 --> 00:04:21.927
We're only either a concrete type or
a null and then you can still end up

87
00:04:21.927 --> 00:04:24.486
returning a assembly,
like setting something to be assembly.

88
00:04:24.486 --> 00:04:27.944
But basically the only things that
we're either doing are we are either

89
00:04:27.944 --> 00:04:28.577
updating a or

90
00:04:28.577 --> 00:04:32.560
we're doing a swap which might result in
b getting updated by the same exact code.

91
00:04:32.560 --> 00:04:35.262
Or we are reporting a type
mismatch because we were like,

92
00:04:35.262 --> 00:04:38.375
these were both concrete and
they had different concrete types.

93
00:04:38.375 --> 00:04:40.319
Yeah.
&gt;&gt; Speaker 4: In the case where they're

94
00:04:40.319 --> 00:04:43.815
both null, and
we're returning a symlink, the idea

95
00:04:43.815 --> 00:04:48.801
is that would be resolved down the chain,
further down in the type checker.

96
00:04:48.801 --> 00:04:49.822
&gt;&gt; Richard Feldman: Exactly, yeah.

97
00:04:49.822 --> 00:04:54.496
So the reason for this case right
here is where you're like, okay,

98
00:04:54.496 --> 00:04:59.745
both of these, actually this comes up,
we can just go back to it real quick.

99
00:04:59.745 --> 00:05:02.955
Right, yeah, sure, we're right here,
so let's just go and

100
00:05:02.955 --> 00:05:04.663
look where it actually happens.

101
00:05:04.663 --> 00:05:08.382
So this scenario right here, this is
exactly that where we're like, okay,

102
00:05:08.382 --> 00:05:10.785
I know a is 0 and
the string literal high is 1, but

103
00:05:10.785 --> 00:05:13.554
this point, this is a and
this is b, they're both null.

104
00:05:13.554 --> 00:05:17.466
There's just nothing, we have no
information about either of them that we

105
00:05:17.466 --> 00:05:20.023
it's really important
that we write this down.

106
00:05:20.023 --> 00:05:24.103
But because later on, this one's gonna
stop being null, and we will have missed

107
00:05:24.103 --> 00:05:27.897
our opportunity to record that it was
a symlink if we don't do it right now.

108
00:05:27.897 --> 00:05:31.414
Because as previously noted,
we don't symlink them to each other, So

109
00:05:31.414 --> 00:05:33.358
we only want to write down one symlink.

110
00:05:33.358 --> 00:05:37.252
And the reason for doing a now is so
that later on, when we get to high and

111
00:05:37.252 --> 00:05:41.215
it turns into a string, we've already
written these two are related,

112
00:05:41.215 --> 00:05:45.111
and now we've sort of retroactively
captured that, a is a string, or

113
00:05:45.111 --> 00:05:47.844
at least configured out
by traversing the path?

114
00:05:47.844 --> 00:05:49.009
Does that make sense?

115
00:05:49.009 --> 00:05:50.642
&gt;&gt; Speaker 4: Think so.
&gt;&gt; Richard Feldman: We can look at another

116
00:05:50.642 --> 00:05:51.543
way if you want.

117
00:05:51.543 --> 00:05:54.468
[LAUGH] So if you think about
it just in terms of, like,

118
00:05:54.468 --> 00:05:58.303
the arguments we're passing in, so
that unified function was like,

119
00:05:58.303 --> 00:06:01.171
it takes two arguments,
lik Aa type ID and b type ID.

120
00:06:01.171 --> 00:06:04.603
What we're doing when we go
through this process right here,

121
00:06:04.603 --> 00:06:08.630
essentially, is we just go through
every single one of these type IDs and

122
00:06:08.630 --> 00:06:11.485
we just call unify on them
based on their node type.

123
00:06:11.485 --> 00:06:15.290
So when you have an equals like this,
we look at that parse tree node and

124
00:06:15.290 --> 00:06:19.742
we're like, I know that conceptually
the relationship between these two,

125
00:06:19.742 --> 00:06:21.508
is that they should be the same.

126
00:06:21.508 --> 00:06:25.735
When you say a is high, the whole point
of naming the constant is whenever I look

127
00:06:25.735 --> 00:06:29.384
up a, I wanna get the same type as hig,
so unification is our tool for

128
00:06:29.384 --> 00:06:30.620
accomplishing that.

129
00:06:30.620 --> 00:06:34.795
So what we're doing is we're saying
we're calling unify passing zero and

130
00:06:34.795 --> 00:06:38.916
one because we wanna say these two
are linked, they should be identical.

131
00:06:38.916 --> 00:06:42.828
Whenever I ask for one I should get
the same type as the other, anhd yeah,

132
00:06:42.828 --> 00:06:46.627
as we saw, there's a few different
scenarios where that can come up.

133
00:06:46.627 --> 00:06:50.609
But this particular scenario is when
we're at the beginning of our process,

134
00:06:50.609 --> 00:06:53.193
We don't have information
about any of them yet.

135
00:06:53.193 --> 00:06:57.268
And so all we can do really is say,
well, unification means they're linked,

136
00:06:57.268 --> 00:07:00.815
let's just go ahead and link them,
and that's what this is doing.

137
00:07:00.815 --> 00:07:02.847
Yeah?
&gt;&gt; Speaker 5: At which step would we

138
00:07:02.847 --> 00:07:07.085
throw things like warning
variable a isn't used?

139
00:07:07.085 --> 00:07:08.262
&gt;&gt; Richard Feldman: Great question.

140
00:07:08.262 --> 00:07:14.073
Now, which step would we throw things
like warning variable isn't used, so for

141
00:07:14.073 --> 00:07:19.813
that one, it depends on exactly what type
of thing you were trying to say is not.

142
00:07:19.813 --> 00:07:23.211
So for example, if you are talking
about literally, a variable or

143
00:07:23.211 --> 00:07:27.353
an argument is unused, both of those can
be done just using naming information.

144
00:07:27.353 --> 00:07:31.039
Like you don't even need type information
at all the scope that we were

145
00:07:31.039 --> 00:07:34.113
dealing with previously,
that's totally sufficient.

146
00:07:34.113 --> 00:07:37.091
We didn't do an example of this,
but if you as an exercise,

147
00:07:37.091 --> 00:07:39.843
you can imagine,
if you're going through the scope.

148
00:07:39.843 --> 00:07:44.216
One of the things you can write down is
not just is this thing in scope, but also,

149
00:07:44.216 --> 00:07:46.391
has anyone ever actually looked it up?

150
00:07:46.391 --> 00:07:50.989
So in other words, changing our scope from
a map kind of similar to what we did here,

151
00:07:50.989 --> 00:07:54.208
where the map would essentially
record a Boolean of like,

152
00:07:54.208 --> 00:07:55.933
has anyone looked me up or not?

153
00:07:55.933 --> 00:07:59.734
And then at that point, if you get to
the end, right before you pop the.

154
00:07:59.734 --> 00:08:03.259
The scope you can go through and look at
all the things you're about to pop and

155
00:08:03.259 --> 00:08:06.637
say, hang on a sec, are any of these,
they're about to go out of scope?

156
00:08:06.637 --> 00:08:09.375
So this is the last chance for
anyone to look them up, and no,

157
00:08:09.375 --> 00:08:10.413
there were no takers.

158
00:08:10.413 --> 00:08:12.867
If that Boolean is still false,
nobody looked it up,

159
00:08:12.867 --> 00:08:14.838
then right there you can record a warning.

160
00:08:14.838 --> 00:08:18.578
It does get a little bit more complicated,
if you wanna do things like unused like

161
00:08:18.578 --> 00:08:22.218
object fields or unuse like variants,
like an enum, or something like that.

162
00:08:22.218 --> 00:08:25.671
For those, you actually do need type
information, because it's more than just

163
00:08:25.671 --> 00:08:28.943
scope, it's about like, here is this
defined type, I defined it to have.

164
00:08:28.943 --> 00:08:32.741
This record is a thing, but nobody ever
actually used that record that requires

165
00:08:32.741 --> 00:08:35.403
it's a more complicated thing
to give a warning about,

166
00:08:35.403 --> 00:08:37.914
cuz you have to connect it
through the type checker.

167
00:08:37.914 --> 00:08:42.062
I'm happy to spend time in, answering
questions about Unify because it's very

168
00:08:42.062 --> 00:08:46.343
important and we're gonna, the next two
sections are all about unifying things.

169
00:08:46.343 --> 00:08:49.861
So now is a great time to ask any
questions you have about them while we

170
00:08:49.861 --> 00:08:51.674
got the code on the screen, yeah.

171
00:08:51.674 --> 00:08:54.280
&gt;&gt; Speaker 6: Are we gona run our
unification to completion, so

172
00:08:54.280 --> 00:08:57.547
are we going to say you've
got a hundred iterations max?

173
00:08:57.547 --> 00:08:59.585
&gt;&gt; Richard Feldman: Are we
gonna run it to completion or

174
00:08:59.585 --> 00:09:02.058
give you a maximum number of iterations?

175
00:09:02.058 --> 00:09:05.909
I haven't really heard of people
giving a maximum number of iterations,

176
00:09:05.909 --> 00:09:09.881
there is a thing that we're not doing
in this course called an occurs check,

177
00:09:09.881 --> 00:09:12.317
which is designed to
prevent infinite loops.

178
00:09:12.317 --> 00:09:14.114
&gt;&gt; Speaker 6: That's what
I'm asking about, yeah.

179
00:09:14.114 --> 00:09:14.624
&gt;&gt; Richard Feldman: Okay, yeah.

180
00:09:14.624 --> 00:09:18.241
So very briefly, the occurs check,
basically, the point of that is like,

181
00:09:18.241 --> 00:09:21.519
let's imagine that, [LAUGH] it would
be bad if somebody did this, but

182
00:09:21.519 --> 00:09:23.288
what if you said, cons to a equals a?

183
00:09:23.288 --> 00:09:26.816
Okay, well, that's not good if
you're trying to infer things,

184
00:09:26.816 --> 00:09:30.975
you need some sort of safety guard that's
gonna prevent that from happening.

185
00:09:30.975 --> 00:09:35.321
Now, if it's literally a equals a, that's
really easy to detect in the naming stage,

186
00:09:35.321 --> 00:09:39.395
because you can be like, well, okay,
we're in the middle of defining what a is.

187
00:09:39.395 --> 00:09:43.611
Over here, and you use a so, no,
unless you're a function, it's recursion,

188
00:09:43.611 --> 00:09:44.674
you can't do that.

189
00:09:44.674 --> 00:09:47.658
Similarly, not they don't
look exactly like that, but

190
00:09:47.658 --> 00:09:51.525
there are scenarios where you can get
unification into an infinite loop.

191
00:09:51.525 --> 00:09:55.813
Where it's just trying to resolve things
that are resolving to each other, and

192
00:09:55.813 --> 00:09:57.669
you end up just getting stuck, and

193
00:09:57.669 --> 00:10:01.393
the way that you prevent that is
with what's called an occurs check.

194
00:10:01.393 --> 00:10:05.641
Which is basically you say, okay, I'm
about to go traverse this whole branch of

195
00:10:05.641 --> 00:10:09.906
something of like complicated types of,
like I said, we don't have those yet.

196
00:10:09.906 --> 00:10:14.683
We haven't gotten to functions and whatnot
yet, but there become types where you can

197
00:10:14.683 --> 00:10:19.210
go so far traversing them in the course of
running Unify that you actually end up.

198
00:10:19.210 --> 00:10:23.408
Looping back on yourself without realizing
it because there's all these intermediate

199
00:10:23.408 --> 00:10:25.516
twists and
turns that you took to get there.

200
00:10:25.516 --> 00:10:27.042
The occurs check basically says,

201
00:10:27.042 --> 00:10:29.616
okay, I'm about to go do some
work on this type variable,

202
00:10:29.616 --> 00:10:33.322
I'm gonna go traverse the entire tree and
I'm not gonna try to do the actual unify.

203
00:10:33.322 --> 00:10:35.293
I'm just gonna try to answer the question,

204
00:10:35.293 --> 00:10:38.286
does this type variable like loop
back on itself anywhere in here?

205
00:10:38.286 --> 00:10:41.865
Because if it does, I need to not run
Unify on this, so I'm gonna get stuck.

206
00:10:41.865 --> 00:10:45.936
So this is also one of those things where
if you're making a production compiler,

207
00:10:45.936 --> 00:10:49.067
you really gotta be careful to
sprinkle your occurs, checks.

208
00:10:49.067 --> 00:10:52.109
Occurs like 0-c-c-u-r,
does this occur in this subtree.

209
00:10:52.109 --> 00:10:56.053
So if you look at rocks compiler, there's
a lot of like, okay, do this thing,

210
00:10:56.053 --> 00:10:59.664
but, wait, do an occur check here to
make sure there's no infinite loop,

211
00:10:59.664 --> 00:11:02.531
it's one of those things you
gotta be really careful about.

212
00:11:02.531 --> 00:11:05.056
And if you forget a curse check,
maybe nobody notices, but

213
00:11:05.056 --> 00:11:07.948
then maybe someone's like
the compiler's hanging, why is that?

214
00:11:07.948 --> 00:11:11.988
And they're like, no, I forgot an curse
check somewhere, and they hit something,

215
00:11:11.988 --> 00:11:13.857
this is gonna be fun
to debug [LAUGH] Yeah.

216
00:11:13.857 --> 00:11:16.670
&gt;&gt; Speaker 7: I Just wanna make sure I
understand this, so the first time Unify

217
00:11:16.670 --> 00:11:18.672
is run in like the unification process,
&gt;&gt; Richard Feldman: Yeah.

218
00:11:18.672 --> 00:11:19.906
&gt;&gt; Speaker 7: That resolve symlinks and

219
00:11:19.906 --> 00:11:23.057
press function will basically
always return, null for the type.

220
00:11:23.057 --> 00:11:24.993
&gt;&gt; Richard Feldman: Yep 100%, yeah
&gt;&gt; Speaker 7: Then, in theory,

221
00:11:24.993 --> 00:11:28.102
the last unify call and
unification step shouldn't.

222
00:11:28.102 --> 00:11:30.937
&gt;&gt; Richard Feldman: Yeah, unless you're
in the very specific case of like,

223
00:11:30.937 --> 00:11:34.481
a polymer function that we haven't
gotten to yet, but yes, for the for

224
00:11:34.481 --> 00:11:38.114
the purpose of the things we've learned so
far, absolutely 100%.

225
00:11:38.114 --> 00:11:38.688
[LAUGH] Yeah.

226
00:11:38.688 --> 00:11:41.698
&gt;&gt; Speaker 8: You're leaving futures
out of our type inference for now.

227
00:11:41.698 --> 00:11:42.686
&gt;&gt; Richard Feldman: Yeah.
So, right, so

228
00:11:42.686 --> 00:11:45.422
when you're in the initial
state of everything is null,

229
00:11:45.422 --> 00:11:48.510
this function is a hundred percent
always going to return null.

230
00:11:48.510 --> 00:11:51.246
And then once you've completely
populated the table and

231
00:11:51.246 --> 00:11:54.555
there's no more nulls than the table,
this will never return null.

232
00:11:54.555 --> 00:11:55.622
Great questions, yeah.

233
00:11:55.622 --> 00:11:58.052
&gt;&gt; Speaker 9: Yeah, I'm kind of
curious with JavaScript you can,

234
00:11:58.052 --> 00:12:01.672
if you have the addition of a string and
a number, forces the number to a string.

235
00:12:01.672 --> 00:12:02.605
&gt;&gt; Richard Feldman: Yeah.
&gt;&gt; Speaker 9: How would the,

236
00:12:02.605 --> 00:12:06.135
I'm assuming we're doing this more like
strong typing if I'm using the term

237
00:12:06.135 --> 00:12:06.749
correctly.

238
00:12:06.749 --> 00:12:07.401
&gt;&gt; Richard Feldman: Yep.
&gt;&gt; Speaker 9: I guess,

239
00:12:07.401 --> 00:12:10.737
how would this kinda change if we
wanted to kind of enforce or allow for

240
00:12:10.737 --> 00:12:11.551
type coercion?

241
00:12:11.551 --> 00:12:14.416
&gt;&gt; Richard Feldman: Strong typing, yeah,
so that's another one that's like,

242
00:12:14.416 --> 00:12:16.799
that one's so
controversial I don't even use it.

243
00:12:16.799 --> 00:12:20.890
[LAUGH] Strong typing, I'm pretty sure
that the most accurate, if aliens land and

244
00:12:20.890 --> 00:12:24.230
you were like, I have to describe
to you what strong typing means.

245
00:12:24.230 --> 00:12:28.043
I'm pretty sure strong typing refers to
a type system that I the person saying

246
00:12:28.043 --> 00:12:30.625
strong typing,
that's just what that term means,

247
00:12:30.625 --> 00:12:34.987
cuz if you listen to people argue about
it, that's like, this is just you like it.

248
00:12:34.987 --> 00:12:39.189
So you're calling it strong definitions
are all over the place on that one anyway.

249
00:12:39.189 --> 00:12:42.369
So yeah, the question was, let's say
that you have the plus operator and

250
00:12:42.369 --> 00:12:45.649
the definition of plus operator is not
that they both have to be numbers, but

251
00:12:45.649 --> 00:12:47.462
rather they could be numbers or strings.

252
00:12:47.462 --> 00:12:50.545
That's a rabbit hole, there's a lot
of different ways you can do that.

253
00:12:50.545 --> 00:12:53.874
There's like super fancy ways that
get into like subtyping territory and

254
00:12:53.874 --> 00:12:56.613
there's also like very restricted
ways where you can sort of

255
00:12:56.613 --> 00:12:59.524
like have a little like secret
type variable behind the scenes.

256
00:12:59.524 --> 00:13:04.125
That makes it look like subtyping if
you are not doing it too carefully, but

257
00:13:04.125 --> 00:13:08.871
then if you use it in certain ways,
that sort of reveals that there's a hidden

258
00:13:08.871 --> 00:13:12.394
type variable, and
then maybe it's kind of confusing.

259
00:13:12.394 --> 00:13:15.541
Point is,
we're definitely not doing it here, and

260
00:13:15.541 --> 00:13:18.270
it certainly can be done
in a variety of ways.

261
00:13:18.270 --> 00:13:22.999
But there's trade offs abound [LAUGH]
when you're doing stuff like that, but

262
00:13:22.999 --> 00:13:27.083
definitely life is easier if you
choose not to do things like that.

