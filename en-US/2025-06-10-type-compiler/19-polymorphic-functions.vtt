WEBVTT

1
00:00:00.000 --> 00:00:00.660
&gt;&gt; Richard Feldman: At any rate,

2
00:00:00.660 --> 00:00:04.624
we've now arrived at a point where we
have successfully unified everything.

3
00:00:04.624 --> 00:00:07.285
We've ended up with basically
achieving our goal.

4
00:00:07.285 --> 00:00:11.519
We had our goal of two successful calls,
two identity function, no type mismatches,

5
00:00:11.519 --> 00:00:15.011
and yet full type inference occurred,
and we've achieved that goal.

6
00:00:15.011 --> 00:00:19.133
We can now ask what is the return type of
this thing and it'll go and say, okay,

7
00:00:19.133 --> 00:00:20.210
that's in slot 4.

8
00:00:20.210 --> 00:00:22.094
Let's go look at number 7.

9
00:00:22.094 --> 00:00:22.913
It's a number.

10
00:00:22.913 --> 00:00:26.326
Same thing over here,
we can go ask what's in slot 8.

11
00:00:26.326 --> 00:00:28.166
It's 11 and that's a string.

12
00:00:28.166 --> 00:00:33.024
Great, we've successfully inferred
the correct types and all without any type

13
00:00:33.024 --> 00:00:37.327
mismatches or with messing up
the identity function, great success.

14
00:00:37.327 --> 00:00:40.139
Okay, now let's move on and
talk about arrays.

15
00:00:40.139 --> 00:00:43.495
So here we have a function that
we're gonna define named concat.

16
00:00:43.495 --> 00:00:47.401
So this is gonna be your classic
staple two arrays together function.

17
00:00:47.401 --> 00:00:50.775
We're not gonna write out the type
annotations for this, because,

18
00:00:50.775 --> 00:00:51.881
as previously noted,

19
00:00:51.881 --> 00:00:55.273
the type annotation is going to be
the very last section of this part.

20
00:00:55.273 --> 00:00:58.138
But you can just imagine
the implementation, right,

21
00:00:58.138 --> 00:00:59.641
we put two arrays together.

22
00:00:59.641 --> 00:01:01.952
The relevant part for
our purposes is like,

23
00:01:01.952 --> 00:01:05.518
I wanna be able to call concat
passing an array of numbers like this.

24
00:01:05.518 --> 00:01:09.044
And I also wanna be able to call
concat passing an array of strings.

25
00:01:09.044 --> 00:01:13.415
So this has some things in common with the
identity function example in that I want

26
00:01:13.415 --> 00:01:16.562
to be able to call it with two
different flavors of types and

27
00:01:16.562 --> 00:01:18.250
not have a type mismatch here.

28
00:01:18.250 --> 00:01:22.881
But also it has some things that
are different, namely that it's not like

29
00:01:22.881 --> 00:01:27.224
we're just taking some variable like a,
and just like not using it.

30
00:01:27.224 --> 00:01:30.040
There are going to be
some constraints here,

31
00:01:30.040 --> 00:01:33.015
because we are actually
using these as arrays.

32
00:01:33.015 --> 00:01:35.797
So, once again,
we're gonna select, okay, 0,

33
00:01:35.797 --> 00:01:38.578
1, 2, 3, 4, etc, initialize our database,

34
00:01:38.578 --> 00:01:42.918
just kind of just blasting through these
things we've seen a million times now.

35
00:01:42.918 --> 00:01:44.368
This is assembling to 1.

36
00:01:44.368 --> 00:01:46.301
This is gonna be our function here.

37
00:01:46.301 --> 00:01:50.589
And then we have for these, we're gonna
end up with Array &lt;5&gt;, Array &lt;5&gt;,

38
00:01:50.589 --> 00:01:51.407
Array &lt;5&gt;.

39
00:01:51.407 --> 00:01:56.095
Just to pause on this for a second,
the basic idea here is that each of

40
00:01:56.095 --> 00:02:00.457
these three things we have ended
up unifying to basically say,

41
00:02:00.457 --> 00:02:03.606
I don't know what my
arrays element type is.

42
00:02:03.606 --> 00:02:07.824
But I do know that these all have
the same array element type,

43
00:02:07.824 --> 00:02:12.057
which is gonna be whatever ends
up being in slot 5 over here.

44
00:02:12.057 --> 00:02:15.933
So taking a step further from this,
we're gonna again,

45
00:02:15.933 --> 00:02:19.824
just a lighting numbers 2 through 3 for
space reasons.

46
00:02:19.824 --> 00:02:21.313
We've got our function up here.

47
00:02:21.313 --> 00:02:22.917
We've got our array &lt;five&gt;.

48
00:02:22.917 --> 00:02:25.492
We still don't know anything
about 5 at this point.

49
00:02:25.492 --> 00:02:28.415
It's one of those variables
that we've created and

50
00:02:28.415 --> 00:02:30.416
assigned all these array types to.

51
00:02:30.416 --> 00:02:32.307
But it has not been further constrained.

52
00:02:32.307 --> 00:02:34.596
So at this point,
it is still totally polymorphic.

53
00:02:34.596 --> 00:02:37.124
And then we're gonna start
doing the blue ones,

54
00:02:37.124 --> 00:02:41.142
the sort of fake instantiated on the fly,
just for the purposes of call once.

55
00:02:41.142 --> 00:02:45.725
So this call to concat, we're gonna make a
fake instantiation of the concat function.

56
00:02:45.725 --> 00:02:48.800
So you can see over here we've got two,
three, and four.

57
00:02:48.800 --> 00:02:52.007
So in the identity function,
these were all the same numbers.

58
00:02:52.007 --> 00:02:55.328
Here we have three different types,
like the two argument types and

59
00:02:55.328 --> 00:02:57.438
the return type, two, three, and four.

60
00:02:57.438 --> 00:03:00.469
They are actually different types or
potentially can be.

61
00:03:00.469 --> 00:03:02.950
They're different type variables,
if you will.

62
00:03:02.950 --> 00:03:05.554
They're different type Ids,
so when we copy it,

63
00:03:05.554 --> 00:03:08.227
we're also going to give
it three different ones.

64
00:03:08.227 --> 00:03:10.452
We're not gonna like
make them be the same.

65
00:03:10.452 --> 00:03:12.434
And then when we get into these things,

66
00:03:12.434 --> 00:03:15.560
instead of the three array bracket
fives up there that we had,

67
00:03:15.560 --> 00:03:19.669
we have array bracket 10, which is going
to be unified in this case to a number.

68
00:03:19.669 --> 00:03:23.204
So once again, the similarity here to what
we saw with the identity function was

69
00:03:23.204 --> 00:03:26.159
that we ended up with this thing
that's basically saying, yeah,

70
00:03:26.159 --> 00:03:28.139
there's an element of polymorphism here.

71
00:03:28.139 --> 00:03:31.119
Now, in that case, the element of
polymorphism was the argument itself.

72
00:03:31.119 --> 00:03:31.713
In this case,

73
00:03:31.713 --> 00:03:35.039
it's something that actually doesn't
really appear in the implementation.

74
00:03:35.039 --> 00:03:36.711
It's more of a behind the scenes thing.

75
00:03:36.711 --> 00:03:39.669
It's like, I know that this is an array,
and I know that this is an array.

76
00:03:39.669 --> 00:03:41.494
And I know that they return an array, and

77
00:03:41.494 --> 00:03:44.501
I know that all those arrays have
to have the same element type, but

78
00:03:44.501 --> 00:03:47.203
the element type itself,
at least in our implementation.

79
00:03:47.203 --> 00:03:51.029
Okay, maybe it would appear in here if we
actually written out the implementation.

80
00:03:51.029 --> 00:03:53.553
But we don't see that,
we didn't write a five on here,

81
00:03:53.553 --> 00:03:56.738
because it doesn't correspond to
any one of these elements out here.

82
00:03:56.738 --> 00:03:59.577
The five is about, this is the type
parameter of that array of.

83
00:03:59.577 --> 00:04:03.812
Of these two arguments and also that
return value, and it's exactly the same

84
00:04:03.812 --> 00:04:07.527
thing over here, except this is
gonna end up unifying with number,

85
00:04:07.527 --> 00:04:10.083
because that's what we're passing in here.

86
00:04:10.083 --> 00:04:14.403
One cool implication about this is that
the process that we use to arrive at this

87
00:04:14.403 --> 00:04:17.348
is not actually different
than the process we used for

88
00:04:17.348 --> 00:04:20.635
the identity function It like
we already had this problem.

89
00:04:20.635 --> 00:04:22.873
We needed identity function to work,
and so

90
00:04:22.873 --> 00:04:26.922
we came up with this cloning the weird
fresh thing, and going and making a copy,

91
00:04:26.922 --> 00:04:30.317
but it's like the same shape,
but it's like different type IDs.

92
00:04:30.317 --> 00:04:33.429
Then from there, you can just
proceed normally with unification.

93
00:04:33.429 --> 00:04:37.617
This is what I meant earlier in Henley
Miller, you kind of are priced into slash,

94
00:04:37.617 --> 00:04:38.863
get for free generics.

95
00:04:38.863 --> 00:04:43.358
Cuz it's sort of, I don't know, we didn't
actually do anything different here than

96
00:04:43.358 --> 00:04:46.700
what we did on the previous section
with the identity function.

97
00:04:46.700 --> 00:04:49.568
If you want identity function to work,
which of course,

98
00:04:49.568 --> 00:04:53.749
you do, you just already have to deal with
polymorphism on a way that happens to work

99
00:04:53.749 --> 00:04:57.482
already perfectly well for generics,
like parameterized types array.

100
00:04:57.482 --> 00:05:01.439
So if you're in one of these languages,
the price in part is essentialized, well,

101
00:05:01.439 --> 00:05:05.140
if you're not gonna support you there
that means that this isn't gonna work.

102
00:05:05.140 --> 00:05:08.120
You're not even gonna be to have
identity function, of course,

103
00:05:08.120 --> 00:05:10.192
you wanna be able to
have identity function.

104
00:05:10.192 --> 00:05:14.046
But of course, if you've already done
that work to implement that then you're

105
00:05:14.046 --> 00:05:17.841
basically already all the way here other
than maybe having a, [LAUGH] syntax for

106
00:05:17.841 --> 00:05:19.645
having type annotations around it.

107
00:05:19.645 --> 00:05:23.244
Now I don't want to completely hand wave
this away and say, this is 0% different.

108
00:05:23.244 --> 00:05:24.293
There are some differences.

109
00:05:24.293 --> 00:05:27.099
The unified function does get a little
bit more complicated, because,

110
00:05:27.099 --> 00:05:30.227
much like with function, array is also one
of those concrete types where you have

111
00:05:30.227 --> 00:05:33.355
an additional consideration, and
you can't just say, these two arrays,

112
00:05:33.355 --> 00:05:34.323
they're both an array.

113
00:05:34.323 --> 00:05:35.462
So I guess that's the end of it.

114
00:05:35.462 --> 00:05:38.469
You have to descend into it and
compare their element types as well.

115
00:05:38.469 --> 00:05:40.243
There is a little bit more work there.

116
00:05:40.243 --> 00:05:41.488
But fundamentally,

117
00:05:41.488 --> 00:05:45.510
the overall approach is it's all
the heavy lifting is already done.

118
00:05:45.510 --> 00:05:48.584
There's just a little bit
of detail work left over.

119
00:05:48.584 --> 00:05:53.508
But fundamentally, it's really not any
different to support having arrays with

120
00:05:53.508 --> 00:05:57.145
polymorphic type variables in
them than it is to just support

121
00:05:57.145 --> 00:05:59.878
the basic identity
function works at all in.

122
00:05:59.878 --> 00:06:02.730
So that's why you tend to see like ML,
Elm, Haskell,

123
00:06:02.730 --> 00:06:05.149
like they all have
parametric polymorphism.

124
00:06:05.149 --> 00:06:09.820
They've all way before Java and
them did because they were like, well,

125
00:06:09.820 --> 00:06:12.816
yeah, we just need it on
a basic level anyway.

126
00:06:12.816 --> 00:06:17.199
[LAUGH] So anyway, so to sum up like
everything we talked about when it comes

127
00:06:17.199 --> 00:06:21.313
to polymorphic type checking before
we move on to type annotations.

128
00:06:21.313 --> 00:06:25.480
Basically whenever you're calling
a polymorphic function, that is to say

129
00:06:25.480 --> 00:06:30.235
a function that behaves differently, which
might be a behind the scenes runtime thing

130
00:06:30.235 --> 00:06:34.725
based on its type, what we do is we just
make fresh copies of the function's type,

131
00:06:34.725 --> 00:06:37.157
like the entire structure of the function.

132
00:06:37.157 --> 00:06:40.285
The new copies, importantly,
have new unbound variables.

133
00:06:40.285 --> 00:06:42.021
So there are different numbers, and

134
00:06:42.021 --> 00:06:45.885
then also those numbers are initialized
to null, and then they'll, of course,

135
00:06:45.885 --> 00:06:48.520
immediately get overwritten
based on the actual call.

136
00:06:48.520 --> 00:06:51.786
Because what we do is we unify
the function call stuff with the copies

137
00:06:51.786 --> 00:06:55.857
instead of the originals, thereby making
it so that the originals are unaffected,

138
00:06:55.857 --> 00:06:57.368
only the copies are affected.

139
00:06:57.368 --> 00:07:00.162
Something I'm not really
getting into here is that you.

140
00:07:00.162 --> 00:07:01.410
Can mix and match a little bit.

141
00:07:01.410 --> 00:07:04.741
So it is possible to have array.concat
both arguments are polymorphic.

142
00:07:04.741 --> 00:07:08.001
You can also imagine array.concat
that has a third argument that's just

143
00:07:08.001 --> 00:07:09.009
like a concrete type.

144
00:07:09.009 --> 00:07:11.276
And then in that case,
when you're doing the copies,

145
00:07:11.276 --> 00:07:13.743
you actually would intentionally
copy the original type,

146
00:07:13.743 --> 00:07:16.972
because you do want a type mismatch if
somebody gives the wrong type for that.

147
00:07:16.972 --> 00:07:20.273
So it's not like the polymorphism is
just like an all or nothing thing,

148
00:07:20.273 --> 00:07:23.696
it's really just like the arguments
that are polymorphic work this way.

149
00:07:23.696 --> 00:07:27.085
And if you have both polymorphic and
non-polymorphic arguments,

150
00:07:27.085 --> 00:07:30.712
it is actually important that you
maintain some of those sim linky kind of

151
00:07:30.712 --> 00:07:34.399
relationships with the copies so
that they are actually unifying against

152
00:07:34.399 --> 00:07:37.500
the originals and
breaking when they're supposed to break.

153
00:07:37.500 --> 00:07:39.039
&gt;&gt; Speaker 2: I had
a quick question just for

154
00:07:39.039 --> 00:07:41.945
my understanding with
the identity function, right?

155
00:07:41.945 --> 00:07:43.330
&gt;&gt; Richard Feldman: Yeah
&gt;&gt; Speaker 2: We have just like that,

156
00:07:43.330 --> 00:07:45.497
the argument type is
the same as return type.

157
00:07:45.497 --> 00:07:48.762
But say we had another polymorphic
function where the return type

158
00:07:48.762 --> 00:07:49.542
is different.

159
00:07:49.542 --> 00:07:51.826
The only difference
there is that we would,

160
00:07:51.826 --> 00:07:56.157
instead of having the same database ID,
we'd have another ID for the return type.

161
00:07:56.157 --> 00:07:57.504
&gt;&gt; Richard Feldman: Yep.
&gt;&gt; Speaker 2: That would also be null.

162
00:07:57.504 --> 00:07:58.667
Is that correct?

163
00:07:58.667 --> 00:08:01.531
&gt;&gt; Richard Feldman: Yeah, so
let's say it would be kind of silly.

164
00:08:01.531 --> 00:08:03.870
But what if you were just return zero,
Yeah.

165
00:08:03.870 --> 00:08:06.149
It's like, what's that argument doing?

166
00:08:06.149 --> 00:08:08.674
But, yeah, so like, if you did that,
then, right, exactly.

167
00:08:08.674 --> 00:08:11.102
So what would happen is that
way back at this stage,

168
00:08:11.102 --> 00:08:12.799
these would not both be two, Yeah.

169
00:08:12.799 --> 00:08:15.890
And so then later,
when we're doing the unification,

170
00:08:15.890 --> 00:08:20.098
the whole reason that we were unifying,
and this is a place where it's maybe

171
00:08:20.098 --> 00:08:23.978
a little bit easier to understand if
you don't do the short cutting and

172
00:08:23.978 --> 00:08:27.639
cutting to the chase,
cutting out the middleman kind of a thing.

173
00:08:27.639 --> 00:08:29.844
If we actually had different
type variables here,

174
00:08:29.844 --> 00:08:32.420
it would be more obvious that
this one was for the argument.

175
00:08:32.420 --> 00:08:33.816
This one was for the return type.

176
00:08:33.816 --> 00:08:34.407
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Richard Feldman: But yeah.

177
00:08:34.407 --> 00:08:37.835
So this is the point where it's like,
okay, you would get something different

178
00:08:37.835 --> 00:08:40.200
here because the return type
was not identical to the.

179
00:08:40.200 --> 00:08:40.841
&gt;&gt; Speaker 2: Right.

180
00:08:40.841 --> 00:08:45.400
And it could be different, maybe you
return maybe a Boolean or a string,

181
00:08:45.400 --> 00:08:47.810
depending on what value you get for a.

182
00:08:47.810 --> 00:08:51.254
&gt;&gt; Richard Feldman: Well, so that's
a more advanced type system feature.

183
00:08:51.254 --> 00:08:56.804
If you have the possibility of depending
on runtime conditions, like a conditional,

184
00:08:56.804 --> 00:09:02.144
it can either return a bool or a string,
now you need union types in the language.

185
00:09:02.144 --> 00:09:02.756
&gt;&gt; Speaker 2: Yeah, yeah.
&gt;&gt; Richard Feldman: Or

186
00:09:02.756 --> 00:09:06.972
at least some types or something that
can distinguish a runtime between those.

187
00:09:06.972 --> 00:09:10.920
But in this type system, that would just
be a type mismatch if the two branches

188
00:09:10.920 --> 00:09:15.201
were different things, going back to
our conditionals, ternaries discussion.

189
00:09:15.201 --> 00:09:19.256
But yeah, so when you got to this point,
these would not both be 7 in that world,

190
00:09:19.256 --> 00:09:20.762
where you were returning 0.

191
00:09:20.762 --> 00:09:26.770
One of them would be 7, the other would
be, I don't know, something else.

