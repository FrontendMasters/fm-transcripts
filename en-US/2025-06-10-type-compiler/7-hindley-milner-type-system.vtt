WEBVTT

1
00:00:00.000 --> 00:00:02.448
&gt;&gt; Richard Feldman: So this is going to
be the beginning of our type checking

2
00:00:02.448 --> 00:00:03.042
adventure.

3
00:00:03.042 --> 00:00:06.648
There's gonna be multiple sections on
type checking, parts three through six.

4
00:00:06.648 --> 00:00:09.495
And basically,
this is gonna be the absolute bare bones,

5
00:00:09.495 --> 00:00:12.879
most basic, most straightforward
kind of type checking you can do.

6
00:00:12.879 --> 00:00:15.448
You may have some questions as we go
about, well, wait, what about this?

7
00:00:15.448 --> 00:00:16.208
What about that?

8
00:00:16.208 --> 00:00:20.468
Don't worry, we're gonna get to those,
but we're gonna start off with something

9
00:00:20.468 --> 00:00:24.608
really, really basic so that we can get
really the foundational idea of what style

10
00:00:24.608 --> 00:00:28.030
of type checking we're doing and
what the basic mechanism of it is.

11
00:00:28.030 --> 00:00:30.299
So this one's gonna be relatively short,
but

12
00:00:30.299 --> 00:00:33.511
it's very important to understand
this foundational concept.

13
00:00:33.511 --> 00:00:36.439
So we're not gonna put any
more stuff after it and

14
00:00:36.439 --> 00:00:38.231
just move on to the next part.

15
00:00:38.231 --> 00:00:41.923
Okay, so first we're gonna talk about type
variables, or as we're gonna call them,

16
00:00:41.923 --> 00:00:45.110
type IDs, but typically, you see
a compiler, they'll talk about as type

17
00:00:45.110 --> 00:00:48.065
variables, which will make more
sense when we get to polymorphism.

18
00:00:48.065 --> 00:00:51.328
Type relationships, and
finally, path compression.

19
00:00:51.328 --> 00:00:54.528
All right, so, I mentioned in
the beginning of the workshop that we

20
00:00:54.528 --> 00:00:58.481
are doing Hindley-Milner type inference,
this is how you spell Hindley Miller.

21
00:00:58.481 --> 00:01:03.173
If you're ever wondering, this is named
after two famous computer scientists,

22
00:01:03.173 --> 00:01:04.397
Hindley and Milner.

23
00:01:04.397 --> 00:01:07.118
Robin Milner is famous for
all sorts of things, Hindley, I think,

24
00:01:07.118 --> 00:01:08.856
is mainly just famous for this algorithm.

25
00:01:08.856 --> 00:01:13.115
There's also, you might see
Damas-Hindley-Milner, or DMS for short,

26
00:01:13.115 --> 00:01:15.120
because Damas got involved later.

27
00:01:15.120 --> 00:01:18.673
But usually, the most common way that I
hear people refer to this style of type

28
00:01:18.673 --> 00:01:20.049
checking is Hindley Milner.

29
00:01:20.049 --> 00:01:21.698
So why are we using it in this course?

30
00:01:21.698 --> 00:01:26.285
Well, first off, it's a real-world
production like type inference system.

31
00:01:26.285 --> 00:01:27.870
It's not just like a toy thing.

32
00:01:27.870 --> 00:01:31.643
This is used by production
languages like Elm, Haskell, Rock,

33
00:01:31.643 --> 00:01:36.518
basically the typed functional programming
languages tend to use Hindley- Milner

34
00:01:36.518 --> 00:01:40.725
type inference among languages that
seal real-world production use.

35
00:01:40.725 --> 00:01:44.074
So it's not the most popular way to do it,
but does have a lot of nice properties.

36
00:01:44.074 --> 00:01:47.988
And in some cases, people will say, I wish
that the language that I were using were

37
00:01:47.988 --> 00:01:52.076
using Hindley-Milner inference, because
it does have some very nice properties,

38
00:01:52.076 --> 00:01:53.915
such as, it has a simple type system.

39
00:01:53.915 --> 00:01:56.251
Now, the word simple can mean a lot
of different things to a lot of

40
00:01:56.251 --> 00:01:56.999
different people.

41
00:01:56.999 --> 00:02:00.546
In this case, what I mean basically is
that, you don't have subtyping to deal

42
00:02:00.546 --> 00:02:04.257
with, which means you don't have to
worry about covariance, contravariance,

43
00:02:04.257 --> 00:02:06.433
or any of the other
implications of subtyping.

44
00:02:06.433 --> 00:02:09.889
Now, subtyping can be quite nice for
ergonomics, in some cases,

45
00:02:09.889 --> 00:02:13.160
it can be something where you
kind of expect something to work,

46
00:02:13.160 --> 00:02:16.308
and then if you have a subtyping
type checker or type system,

47
00:02:16.308 --> 00:02:18.558
it just works the way
that you expect it to.

48
00:02:18.558 --> 00:02:22.792
And the fact that Hindley-Milner is not
a subtyping type system generally tends to

49
00:02:22.792 --> 00:02:26.601
mean that you might have some language
features that you would find in other

50
00:02:26.601 --> 00:02:29.764
languages that you don't find
the languages that have this.

51
00:02:29.764 --> 00:02:32.308
So for example,
go interfaces would be an example this,

52
00:02:32.308 --> 00:02:35.753
that's a subtyping thing where you say,
I'm defining this interface, and

53
00:02:35.753 --> 00:02:39.102
anybody who matches this interface
can just instantly use this function.

54
00:02:39.102 --> 00:02:41.670
Call this function without needing
to change my types in any way or

55
00:02:41.670 --> 00:02:43.503
add any type variables or
anything like that.

56
00:02:43.503 --> 00:02:46.819
There are ways you can be equally
flexible, but in Hindley-Milner you

57
00:02:46.819 --> 00:02:50.475
usually end up incorporating a type
variable to do that level of flexibility.

58
00:02:50.475 --> 00:02:54.510
Whereas if you have subtyping,
you don't need to put a type variable or

59
00:02:54.510 --> 00:02:56.939
a type parameter in your type annotation.

60
00:02:56.939 --> 00:03:01.479
So Hindley-Milner type inference, or
at least a lot of languages that use

61
00:03:01.479 --> 00:03:04.506
Hindley-Milner tend to
be sound meaning there,

62
00:03:04.506 --> 00:03:08.414
there is no concept in the language
of a runtime tight mismatch.

63
00:03:08.414 --> 00:03:10.717
So an example of a runtime
tight mismatch would be,

64
00:03:10.717 --> 00:03:14.040
you're coming along in your JavaScript
code and you call a function, but

65
00:03:14.040 --> 00:03:16.578
it wasn't a function,
it was a string for some reason.

66
00:03:16.578 --> 00:03:18.366
And you get a tight mismatch
at runtime that was like,

67
00:03:18.366 --> 00:03:20.909
I'm trying to call a string,
you can't do that, you can't call strings,

68
00:03:20.909 --> 00:03:21.935
you can only call functions.

69
00:03:21.935 --> 00:03:26.472
And somehow you got a string here in this
variable that you thought was a function,

70
00:03:26.472 --> 00:03:28.656
but actually at runtime, it wasn't.

71
00:03:28.656 --> 00:03:31.398
So a sound type checker is one where,
before the program runs,

72
00:03:31.398 --> 00:03:34.101
it tells you about every single
instance of things like that.

73
00:03:34.101 --> 00:03:36.794
There is no such thing in this
language as a runtime type mismatch,

74
00:03:36.794 --> 00:03:38.634
as we'll see when we
get to code generation.

75
00:03:38.634 --> 00:03:43.558
There isn't even code that could report
one, because there's just not a thing.

76
00:03:43.558 --> 00:03:47.382
[LAUGH] So that's a very nice
property of these languages,

77
00:03:47.382 --> 00:03:50.980
a lot of production type
checkers today are not sound.

78
00:03:50.980 --> 00:03:54.633
Java is not sound, TypeScript is
famously intentionally unsound.

79
00:03:54.633 --> 00:03:58.726
I think Java had some soundness holes that
they found that were not intentional,

80
00:03:58.726 --> 00:04:00.661
I think having to do with reflection.

81
00:04:00.661 --> 00:04:05.454
But basically, it is possible to write
a Java program in a way where you get

82
00:04:05.454 --> 00:04:09.340
runtime type mismatches that
the compiler didn't catch.

83
00:04:09.340 --> 00:04:14.214
TypeScript was intentionally unsound
because they wanted to cover

84
00:04:14.214 --> 00:04:18.070
a very wide range of existing
JavaScript code bases.

85
00:04:18.070 --> 00:04:22.794
Including some that are using things that
essentially were either impossible or

86
00:04:22.794 --> 00:04:27.106
at least impractical to be able to
catch type mismatches at compile time.

87
00:04:27.106 --> 00:04:30.010
Hindley-Milner type
inference is decidable, and

88
00:04:30.010 --> 00:04:32.782
what decidable means is that,
it can figure out,

89
00:04:32.782 --> 00:04:36.082
it can infer all of the types for
your program, all of them.

90
00:04:36.082 --> 00:04:38.188
You do not need to write type annotations.

91
00:04:38.188 --> 00:04:40.567
And in fact, in this workshop,
just to emphasize this,

92
00:04:40.567 --> 00:04:42.914
I made type annotations
essentially in afterthought.

93
00:04:42.914 --> 00:04:46.412
So the very last thing at the very end of
all the type checking sections that we do

94
00:04:46.412 --> 00:04:50.017
is we just kinda sneak type annotations in
there and talk about how they work, and

95
00:04:50.017 --> 00:04:50.827
then that's it.

96
00:04:50.827 --> 00:04:55.158
So by the time we get to them, we've
already made everything else work just

97
00:04:55.158 --> 00:04:57.720
using type inference with no annotations.

98
00:04:57.720 --> 00:05:00.513
It's all sound, it's all decidable,
and it all just works.

99
00:05:00.513 --> 00:05:03.951
It's also polymorphic, so
that means that it can support generics.

100
00:05:03.951 --> 00:05:07.149
So we will get to things like you can say,
I have an array of strings or

101
00:05:07.149 --> 00:05:10.182
I have an array of numbers, and
that is like that type variable,

102
00:05:10.182 --> 00:05:13.968
that type parameter thing that, a lot
of languages, again, going back to Go.

103
00:05:13.968 --> 00:05:17.620
For a long time, Go didn't have generics,
and this was like a famous Hello Blue, and

104
00:05:17.620 --> 00:05:19.419
then eventually, they added generics.

105
00:05:19.419 --> 00:05:23.292
And when they what they added were
the form of generics known as parametric

106
00:05:23.292 --> 00:05:27.236
polymorphism, which is exactly the type
of thing that we're doing here.

107
00:05:27.236 --> 00:05:29.199
And parametric polymorphism is basically,

108
00:05:29.199 --> 00:05:32.244
some people use it interchangeably
with the term generics, although

109
00:05:32.244 --> 00:05:35.823
generics usually has a little bit more
of an object-oriented connotation to it.

110
00:05:35.823 --> 00:05:38.742
Parametric polymorphism is
just like the most general,

111
00:05:38.742 --> 00:05:41.735
you got type parameters now,
[LAUGH] and they're a thing.

112
00:05:41.735 --> 00:05:45.967
And that's what we're doing here, that's
what all the functional languages that

113
00:05:45.967 --> 00:05:48.899
use Hindley-Milner Inference use,
and it works great.

114
00:05:48.899 --> 00:05:50.269
Question?

115
00:05:50.269 --> 00:05:55.444
&gt;&gt; Speaker 2: Yeah, I was curious
about the sound, I guess, type system.

116
00:05:55.444 --> 00:06:00.172
Is there a performance penalty,
either at runtime or maybe a memory,

117
00:06:00.172 --> 00:06:03.950
a penalty that is incurred by
having a system like that?

118
00:06:03.950 --> 00:06:05.204
&gt;&gt; Richard Feldman: It's
actually the opposite.

119
00:06:05.204 --> 00:06:09.892
There's a performance penalty incurred
by having an unsound type system,

120
00:06:09.892 --> 00:06:12.967
at least if you wanna have
an unsound type system,

121
00:06:12.967 --> 00:06:16.864
where when you get the types wrong,
you got a crash at runtime.

122
00:06:16.864 --> 00:06:20.060
If you're okay with having undefined
behavior at runtime, then you can have

123
00:06:20.060 --> 00:06:23.318
an unsound type system like assembly
language would be a good example of this.

124
00:06:23.318 --> 00:06:28.430
Where if you mix up your types in assembly
language at runtime, you get, who knows?

125
00:06:28.430 --> 00:06:29.230
Could be anything.

126
00:06:29.230 --> 00:06:32.800
You're telling the CPU to add two things
together that you thought were integers,

127
00:06:32.800 --> 00:06:35.916
but actually, it's adding two memory
addresses of strings together.

128
00:06:35.916 --> 00:06:37.843
Now the ones and
zeros just, who knows what?

129
00:06:37.843 --> 00:06:41.352
And you're just gonna get all sorts
of wild unpredictable behavior.

130
00:06:41.352 --> 00:06:44.067
It's much better to get a runtime
type mismatch than that,

131
00:06:44.067 --> 00:06:47.436
[LAUGH] an actual error that stops your
program or gives you a stack trace and

132
00:06:47.436 --> 00:06:49.574
stuff like that, but
you have to pay for that.

133
00:06:49.574 --> 00:06:53.884
So basically if you want to allow
gracefully recoverable runtime type

134
00:06:53.884 --> 00:06:54.766
mismatches.

135
00:06:54.766 --> 00:06:58.984
Then that requires, essentially, every
single thing that you are taking through

136
00:06:58.984 --> 00:07:02.297
your program needs to end up having
some runtime metadata about,

137
00:07:02.297 --> 00:07:03.818
here's what my real type is.

138
00:07:03.818 --> 00:07:08.205
But if you don't have that requirement,
and you're not otherwise wanting that for

139
00:07:08.205 --> 00:07:12.468
runtime type reflection or something like
that, then you have the option of doing

140
00:07:12.468 --> 00:07:15.219
what Rust does and C++ does,
at least by default.

141
00:07:15.219 --> 00:07:19.278
And what Rock does, which is basically,
you can say we have no overhead at

142
00:07:19.278 --> 00:07:21.972
runtime, we don't even
keep the types around.

143
00:07:21.972 --> 00:07:23.918
We have no idea what
the types are at runtime,

144
00:07:23.918 --> 00:07:26.441
because we know that we got
them all right at compile time.

145
00:07:26.441 --> 00:07:30.132
So yeah, definitely at least potential
performance benefit, unless you want, for

146
00:07:30.132 --> 00:07:32.763
other reasons to keep around
the runtime type information.

147
00:07:32.763 --> 00:07:34.608
&gt;&gt; Speaker 2: Thank you, and
just quick follow up too,

148
00:07:34.608 --> 00:07:37.052
cuz I was thinking about in
the context of TypeScript.

149
00:07:37.052 --> 00:07:38.135
&gt;&gt; Richard Feldman: Yeah.
&gt;&gt; Speaker 2: We kind of provide

150
00:07:38.135 --> 00:07:41.230
that runtime type safety using
type guards and stuff like that.

151
00:07:41.230 --> 00:07:43.917
So that's why I was kind of curious
if there's a performance penalty

152
00:07:43.917 --> 00:07:44.480
in that case.

153
00:07:44.480 --> 00:07:46.026
But it's different when you're-
&gt;&gt; Richard Feldman: I see what you're

154
00:07:46.026 --> 00:07:48.056
saying, yeah, I mean, TypeScript,
because it compiles to JavaScript,

155
00:07:48.056 --> 00:07:50.043
JavaScript's already keeping all
that information around at runtime.

156
00:07:50.043 --> 00:07:52.764
You're paying for it no matter what,
so they might as well use it [LAUGH].

157
00:07:52.764 --> 00:07:56.074
&gt;&gt; Speaker 2: Right, got it,
that makes sense, thank you.

