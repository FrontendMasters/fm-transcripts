WEBVTT

1
00:00:00.003 --> 00:00:02.793
&gt;&gt; Richard Feldman: All right, so for
this one, we are not going formatter.js,

2
00:00:02.793 --> 00:00:05.262
in fact, formatter.js was
just a part one thing, and

3
00:00:05.262 --> 00:00:08.770
we're not gonna talk about formatting
again until very end of the workshop.

4
00:00:08.770 --> 00:00:13.261
So in part 2 we don't have formatter.js
but we do have a new one called naming.js,

5
00:00:13.261 --> 00:00:14.855
so let's take a look at that.

6
00:00:14.855 --> 00:00:19.361
And basically, inside, sorry,
that's the solutions, whoops,

7
00:00:19.361 --> 00:00:21.628
cheating, this one, naming.js.

8
00:00:21.628 --> 00:00:24.194
So at first, we have the same
exact instructions to run this, so

9
00:00:24.194 --> 00:00:27.567
in your terminal, you can basically do the
exact same command to run every single one

10
00:00:27.567 --> 00:00:30.251
of these exercises, you just need
to do it a different directory.

11
00:00:30.251 --> 00:00:33.434
So if you see the into 2, then now you can
do node index.js and once again, you're

12
00:00:33.434 --> 00:00:36.574
gonna see the exact same thing that we see
at the beginning of all these exercises,

13
00:00:36.574 --> 00:00:37.731
which is some failing tests.

14
00:00:37.731 --> 00:00:40.420
So some of these are passing,
some of these are failing, and

15
00:00:40.420 --> 00:00:44.058
in order to change the failing ones to
passing ones, we are going to, once again,

16
00:00:44.058 --> 00:00:45.931
do the same thing that we did previously.

17
00:00:45.931 --> 00:00:49.412
Where we just scroll down until we find
little arrows here, and yeah, again,

18
00:00:49.412 --> 00:00:51.756
we're not gonna go through
what all this code does.

19
00:00:51.756 --> 00:00:55.612
But you can see this same kind
of some similar patterns,

20
00:00:55.612 --> 00:00:58.006
like some big switch statements.

21
00:00:58.006 --> 00:01:01.353
One thing that is worth noting, this is
something that is gonna come up not only

22
00:01:01.353 --> 00:01:04.142
naming resolution, but
also in type checking, we're gonna use

23
00:01:04.142 --> 00:01:07.609
the same function naming convention,
which is basically just like visit node.

24
00:01:07.609 --> 00:01:10.419
Now, in the previous exercise,
we didn't call it visit,

25
00:01:10.419 --> 00:01:13.639
we called it, what we call it,
format node, something like that.

26
00:01:13.639 --> 00:01:16.296
And this is like a case of what
some people would say is, and

27
00:01:16.296 --> 00:01:19.932
some people would say is not the visitor
pattern, where you're basically just

28
00:01:19.932 --> 00:01:23.479
going through every single node in
the tree and like doing something with it.

29
00:01:23.479 --> 00:01:27.370
So we're gonna do a whole lot of going
through nodes and trees and visiting them,

30
00:01:27.370 --> 00:01:28.986
doing different things to them.

31
00:01:28.986 --> 00:01:32.236
And so in this case,
we are choosing to name it visitNode, but

32
00:01:32.236 --> 00:01:36.110
you could also say name check node,
that would be a fine name for that too or

33
00:01:36.110 --> 00:01:39.637
canonicalize node, if you were
making a canonicalization pass.

34
00:01:39.637 --> 00:01:42.310
But visitNode is kind of the generic name,

35
00:01:42.310 --> 00:01:46.478
it's just like whatever we're going
to do the thing to this node.

36
00:01:46.478 --> 00:01:49.934
And then that's where then right after
that you get your big switch statement.

37
00:01:49.934 --> 00:01:54.863
Okay, so basically we have a couple
of different little to-dos

38
00:01:54.863 --> 00:01:57.249
here that need to be resolved.

39
00:01:57.249 --> 00:02:01.592
So inside declare variable, right now we
have your classic if false, which always

40
00:02:01.592 --> 00:02:05.578
lets that either some debugging or
some teaching materials was happening.

41
00:02:05.578 --> 00:02:09.351
Basically what we wanna do is only report
this error if the name has been declared.

42
00:02:09.351 --> 00:02:12.402
So right now we're just never reporting
the error, but this is one of those

43
00:02:12.402 --> 00:02:15.366
duplicate declaration errors that
we talked about several slides ago.

44
00:02:15.366 --> 00:02:18.642
So this is not the basic,
am I in scope or not,

45
00:02:18.642 --> 00:02:22.386
this is actually I am declaring
a variable right now, and

46
00:02:22.386 --> 00:02:26.836
we wanna see, is this variable
already declared in the same scope?

47
00:02:26.836 --> 00:02:31.267
And if so, that's a duplicate declaration
error, and if not, it's fine.

48
00:02:31.267 --> 00:02:33.090
Now, I mentioned this in the hint here,
but

49
00:02:33.090 --> 00:02:35.174
like there are two ways
you could implement this.

50
00:02:35.174 --> 00:02:36.684
One is I support shadowing, and so

51
00:02:36.684 --> 00:02:39.392
that is basically where I'm not
gonna look at all the scopes,

52
00:02:39.392 --> 00:02:42.901
I'm just gonna, we report an error if
it's in exactly the same current scope.

53
00:02:42.901 --> 00:02:47.407
And if it's in any other scope, it's fine,
it's allowed, that's shadowing.

54
00:02:47.407 --> 00:02:50.538
And then the other way to implement that
would be to say shadowing is disallowed

55
00:02:50.538 --> 00:02:52.532
and like duplicate
declarations is disallowed,

56
00:02:52.532 --> 00:02:54.960
I guess the third way would be
they're both always allowed.

57
00:02:54.960 --> 00:02:58.930
But the test runner expects shadowing to
be supported, so what you wanna do here

58
00:02:58.930 --> 00:03:02.917
is do the presentation that supports
shadowing right here for this condition.

59
00:03:02.917 --> 00:03:06.861
And what that means is look in
the exact current scope that we're in,

60
00:03:06.861 --> 00:03:08.157
not any other scopes.

61
00:03:08.157 --> 00:03:11.710
And if we are only in the exact
current scope that, sorry,

62
00:03:11.710 --> 00:03:16.641
only within the exact current scope,
does this name already appear in that set,

63
00:03:16.641 --> 00:03:20.071
then we wanna report the error and
otherwise we don't.

64
00:03:20.071 --> 00:03:20.864
And then basically,

65
00:03:20.864 --> 00:03:23.474
this is the part where we are actually
gonna add the variable to scope.

66
00:03:23.474 --> 00:03:24.123
So of course,

67
00:03:24.123 --> 00:03:27.914
the main thing that declare variable needs
to do is it needs to actually say, okay,

68
00:03:27.914 --> 00:03:31.236
I got this name, I need to add this to
a scope set, the current scope set.

69
00:03:31.236 --> 00:03:33.697
Otherwise, if I don't add it to
the current scope set, that later on,

70
00:03:33.697 --> 00:03:35.708
when somebody does a lookup,
they're not gonna see it and

71
00:03:35.708 --> 00:03:36.912
they're just gonna get an error.

72
00:03:36.912 --> 00:03:39.775
So this is the second thing
that we are doing here.

73
00:03:39.775 --> 00:03:42.467
And then there's two more
things that we're doing here.

74
00:03:42.467 --> 00:03:46.487
One is visit binary expression, so this is
just to kind of give you a sense of like

75
00:03:46.487 --> 00:03:49.730
in that big switch statement,
it's doing all this branching.

76
00:03:49.730 --> 00:03:52.082
Okay, what happens if we're
going down the parse tree and

77
00:03:52.082 --> 00:03:54.446
we hit a binary expression just
like we did in the last one?

78
00:03:54.446 --> 00:03:56.351
That's plus or times.

79
00:03:56.351 --> 00:04:01.379
Basically what we need to do
here is to visit both nodes

80
00:04:01.379 --> 00:04:06.984
in the parse tree,
the trickier one is the arrow function.

81
00:04:06.984 --> 00:04:10.869
So the arrow function is basically
where you have params and a body,

82
00:04:10.869 --> 00:04:14.207
we need to check that the body
has access to all of the things

83
00:04:14.207 --> 00:04:16.615
in the params as well as the other scopes.

84
00:04:16.615 --> 00:04:20.673
But for the params, we're actually
defining them in scope and and

85
00:04:20.673 --> 00:04:23.731
there needs to be a nested scope here for
the body.

86
00:04:23.731 --> 00:04:27.370
So inside the body, the params should be
in scope but we don't wanna add the params

87
00:04:27.370 --> 00:04:30.905
to the current scope or else we have that
same problem that we talked about before

88
00:04:30.905 --> 00:04:34.306
we got into nesting, where you have
a function that has an argument named n.

89
00:04:34.306 --> 00:04:37.297
And now everybody in the same scope of
that function is declared can access n

90
00:04:37.297 --> 00:04:40.163
because we didn't remember to push
the scope and then pop it at the end.

91
00:04:40.163 --> 00:04:44.427
So this is where we're gonna wanna
actually do that nesting scope.

92
00:04:44.427 --> 00:04:47.597
Okay, so yeah,
one change to declare variable,

93
00:04:47.597 --> 00:04:51.680
one change to add it to scope,
visiting the binary expression.

94
00:04:51.680 --> 00:04:54.773
One is very easy, and even easier
if the answer is right there, and

95
00:04:54.773 --> 00:04:57.826
then visiting the error function,
which is more non-trivial.

96
00:05:02.807 --> 00:05:04.611
&gt;&gt; Richard Feldman: So
first we had the declare variable, so

97
00:05:04.611 --> 00:05:07.803
the first thing we wanna do is just
figure out what is our current scope.

98
00:05:07.803 --> 00:05:11.082
So we have this whole array of scopes,
like we talked about, and

99
00:05:11.082 --> 00:05:14.970
since we are pushing onto that array
every time we introduce a new scope, and

100
00:05:14.970 --> 00:05:16.879
popping when we get exit that scope.

101
00:05:16.879 --> 00:05:20.200
That means that at any given moment, what
the current scope is, is just gonna be

102
00:05:20.200 --> 00:05:22.841
the last one in the array,
cuz we push onto the end of the array.

103
00:05:22.841 --> 00:05:28.693
So current scope is just gonna be scopes,
bracket scopes out length-1.

104
00:05:28.693 --> 00:05:32.022
Then we can say, okay, well, if we
are trying to do the shadowing rules,

105
00:05:32.022 --> 00:05:35.217
that means that we only want to look
in this current scope for the name.

106
00:05:35.217 --> 00:05:39.751
And if the current scope has that name,
then that is not shadowing and therefore

107
00:05:39.751 --> 00:05:44.351
it's a duplicate declaration, whereas,
if we wanted to disallow shadowing,

108
00:05:44.351 --> 00:05:47.192
then we would look at all the scopes and
say, of any

109
00:05:47.192 --> 00:05:51.887
scope up to this point has that name, then
that is disallowed and we give an error.

110
00:05:51.887 --> 00:05:56.354
But since we're gonna allow shadowing
here, we go with just the current scope.

111
00:05:56.354 --> 00:06:00.844
Finally, after we do that check, we're
gonna say, okay, well, now that we have

112
00:06:00.844 --> 00:06:05.076
verified that it's ready to go and all
set and it's not a duplicate, now we can

113
00:06:05.076 --> 00:06:09.464
actually add it to the current scope, and
then from then on it will be available.

114
00:06:09.464 --> 00:06:10.954
Any questions on that one?

115
00:06:10.954 --> 00:06:11.900
Yeah, question.

116
00:06:11.900 --> 00:06:16.273
&gt;&gt; Speaker 2: We're making the implicit
assumption here that the scopes array is

117
00:06:16.273 --> 00:06:19.541
being coherently updated, globally, right?

118
00:06:19.541 --> 00:06:22.056
&gt;&gt; Richard Feldman: Yeah, right,
elsewhere in the code, it's like,

119
00:06:22.056 --> 00:06:24.400
it wasn't the slide,
other code is doing that,

120
00:06:24.400 --> 00:06:27.848
we're not going to build the whole
thing from scratch in 10 minutes.

121
00:06:27.848 --> 00:06:32.496
[LAUGH] All right, so
let's run that again, and hey,

122
00:06:32.496 --> 00:06:35.815
we have fewer test failures, great.

123
00:06:35.815 --> 00:06:39.289
All right, next up,
we're gonna do a visit binary expression.

124
00:06:39.289 --> 00:06:42.624
Basically, we have two things we care
about here in the node argument,

125
00:06:42.624 --> 00:06:44.139
which is the left and the right.

126
00:06:44.139 --> 00:06:47.722
Now, from a naming perspective, you may
recall that in the formatter section we

127
00:06:47.722 --> 00:06:49.527
also visited one of these binary nodes.

128
00:06:49.527 --> 00:06:53.150
And there it was really important that we
remember that the operator is a string and

129
00:06:53.150 --> 00:06:55.881
not a node, so although we were visiting,
or as we called it,

130
00:06:55.881 --> 00:06:57.214
formatting in that section.

131
00:06:57.214 --> 00:07:00.598
The left and the right the operator needed
to not be visited because it's just

132
00:07:00.598 --> 00:07:01.493
a plain old string.

133
00:07:01.493 --> 00:07:04.589
Now, for our purposes, what that sort of
translates to is like the operator doesn't

134
00:07:04.589 --> 00:07:07.040
have any names in it, so we don't care,
we don't need to visit it.

135
00:07:07.040 --> 00:07:11.187
There's nothing to do there, we're just
gonna completely disregard that field for

136
00:07:11.187 --> 00:07:12.579
this stage of compilation.

137
00:07:12.579 --> 00:07:16.407
And although it becomes important later
on and just basically just say, yep,

138
00:07:16.407 --> 00:07:20.477
just visit the left node and the right
node, and that's it, and then we're done.

139
00:07:20.477 --> 00:07:22.908
And there we go, okay.

140
00:07:22.908 --> 00:07:25.445
So next up, we have the arrow function, so

141
00:07:25.445 --> 00:07:28.967
here is the one where we actually
need to create a new scope,

142
00:07:28.967 --> 00:07:33.774
so in order to create a new scope, we're
gonna just do scopes.push of a new set.

143
00:07:33.774 --> 00:07:36.714
If you want,
you could choose to name this set and

144
00:07:36.714 --> 00:07:41.234
then potentially make use of it later,
but since we're not actually doing

145
00:07:41.234 --> 00:07:45.200
the square bracket.length -1
thing like we did two fixes ago.

146
00:07:45.200 --> 00:07:47.041
There's kind of no reason to name it, so

147
00:07:47.041 --> 00:07:50.563
I would just personally just push an
anonymous set here, then we've got a for

148
00:07:50.563 --> 00:07:53.345
loop where you could use a for
each or whatever you like here.

149
00:07:53.345 --> 00:07:56.731
Any of those would be all reasonable,
and basically we just wanna say, okay,

150
00:07:56.731 --> 00:07:59.194
let's go through all the parameters
that we have here and

151
00:07:59.194 --> 00:08:01.531
declare all of them now that
we're inside the scope.

152
00:08:01.531 --> 00:08:04.631
So if we did this for loop and we did not
do the push, that would be where we'd

153
00:08:04.631 --> 00:08:06.915
create the problem that we
talked about in the slides.

154
00:08:06.915 --> 00:08:10.312
Where we are now pushing these parameters
that are supposed to be function

155
00:08:10.312 --> 00:08:13.654
parameters into the same scope where
the function is being defined, and

156
00:08:13.654 --> 00:08:16.417
then they're accessible outside
the end of the function.

157
00:08:16.417 --> 00:08:20.350
It would be especially bad if we did
the scopes.pop at the end without doing

158
00:08:20.350 --> 00:08:24.222
the scopes.push at the start,
because then we're sort of out denting,

159
00:08:24.222 --> 00:08:26.667
we're leaving a scope
that we didn't begin.

160
00:08:26.667 --> 00:08:30.763
We're just accidentally, it's as if
we inserted an extra curly brace and

161
00:08:30.763 --> 00:08:34.415
somehow that parsed, but
then did bad things in terms of scoping.

162
00:08:34.415 --> 00:08:39.432
So definitely always want a pair of your
pushes with your pops when doing this.

163
00:08:39.432 --> 00:08:41.917
And then finally,
there's the very straightforward, okay,

164
00:08:41.917 --> 00:08:44.999
now we've got all these variables in
scope, we're gonna visit the actual node

165
00:08:44.999 --> 00:08:48.053
body, and now that body can make use of
all these things that we just declared.

166
00:08:48.053 --> 00:08:51.008
As soon as we're done with the body,
that's the closed curly brace, and

167
00:08:51.008 --> 00:08:53.978
then we do the scopes.pop to say nobody
else gets to use these variables.

168
00:08:53.978 --> 00:08:57.854
Ordering is very important here,
so if you did this first and

169
00:08:57.854 --> 00:09:01.129
you've visited,
what do you think would happen?

170
00:09:01.129 --> 00:09:03.818
&gt;&gt; Speaker 2: You wouldn't
find any of your variables.

171
00:09:03.818 --> 00:09:05.026
&gt;&gt; Richard Feldman: Yeah.
&gt;&gt; Speaker 2: You wouldn't have populated.

172
00:09:05.026 --> 00:09:07.767
&gt;&gt; Richard Feldman: [LAUGH] Exactly, yeah,
so everything other than your arguments

173
00:09:07.767 --> 00:09:10.266
would be in scope,
everything the function closes over.

174
00:09:10.266 --> 00:09:13.199
But as soon as you try to reference any
of your arguments, you immediately get

175
00:09:13.199 --> 00:09:16.150
a naming error, so yeah, definitely
do those in the opposite order, yeah.

176
00:09:16.150 --> 00:09:19.531
&gt;&gt; Speaker 2: Point of clarity,
you may have already, we covered this,

177
00:09:19.531 --> 00:09:23.452
we are using this push pop strategy
here in arrow functions because we

178
00:09:23.452 --> 00:09:26.511
do not intend to persist their variables,
correct?

179
00:09:26.511 --> 00:09:30.804
Because they're ad hoc functions and
we're not leaving them in our namespace.

180
00:09:30.804 --> 00:09:34.278
&gt;&gt; Richard Feldman: Yeah, right, so these
are just like function parameters that

181
00:09:34.278 --> 00:09:38.487
only exist in the body of the function,
nobody else gets to see them, yeah.

182
00:09:38.487 --> 00:09:40.504
All right, cool then, okay, so

183
00:09:40.504 --> 00:09:44.338
that was the actual last finger
area that we needed to address.

