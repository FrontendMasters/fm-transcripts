WEBVTT

1
00:00:00.389 --> 00:00:02.732
&gt;&gt; Richard Feldman: All right, so
we are on part six out of seven,

2
00:00:02.732 --> 00:00:04.223
we're in the home stretch.

3
00:00:04.223 --> 00:00:09.255
So this is gonna be the last time
that we do this on typecheck.js,

4
00:00:09.255 --> 00:00:12.189
the next one's gonna be on wasm.js.

5
00:00:12.189 --> 00:00:16.304
All right, so here we are,
typecheck.js, scrolling down.

6
00:00:16.304 --> 00:00:20.990
And now at this point, right,
we're closer to the bottom here.

7
00:00:20.990 --> 00:00:23.164
I think that's where all the things
are clustered, yeah, they are.

8
00:00:23.164 --> 00:00:25.688
Okay, great, right.

9
00:00:25.688 --> 00:00:27.542
So here's what we're doing here.

10
00:00:27.542 --> 00:00:30.023
We are now actually doing some
type checking on an array.

11
00:00:30.023 --> 00:00:33.810
So this is our first polymorphic type
checking that we've done in an exercise.

12
00:00:33.810 --> 00:00:37.326
So array types,
they have one type parameter.

13
00:00:37.326 --> 00:00:40.519
If the array is empty, then this
is actually very straightforward,

14
00:00:40.519 --> 00:00:44.053
like when we visited it's, well,
if it's an empty array then no problem.

15
00:00:44.053 --> 00:00:47.830
There's definitely nothing to infer about
the element type, it's definitely gonna be

16
00:00:47.830 --> 00:00:50.515
unbound, and so you can just early
return and just do that fun.

17
00:00:50.515 --> 00:00:54.562
Create concrete type array, which is going
to end up with an array that has null for

18
00:00:54.562 --> 00:00:55.627
its type parameter.

19
00:00:55.627 --> 00:01:00.038
So that part, pretty straight forward,
but the more interesting part, of course,

20
00:01:00.038 --> 00:01:02.506
is when you actually do
have elements in there.

21
00:01:02.506 --> 00:01:06.840
Now, the cool thing about arrays is that,
some languages have what are called

22
00:01:06.840 --> 00:01:11.369
heterogeneous arrays, where you can have
a mix of different types of the arrays,

23
00:01:11.369 --> 00:01:14.276
you can get a string and
a number, and this and that.

24
00:01:14.276 --> 00:01:17.711
Lots of other languages including
this one, require homogeneous arrays,

25
00:01:17.711 --> 00:01:21.039
where you're allowed to have as many
different elements as you want, but

26
00:01:21.039 --> 00:01:22.556
they all have to be the same type.

27
00:01:22.556 --> 00:01:26.571
Or, to be more precise about it,
all of their types have to unify.

28
00:01:26.571 --> 00:01:29.640
We're not really gonna get into
the implications of that quite right here.

29
00:01:29.640 --> 00:01:32.661
But something that does
fall out of this is that,

30
00:01:32.661 --> 00:01:37.227
you can have an array of arrays, and
some of those arrays are more strict or

31
00:01:37.227 --> 00:01:40.558
permissive in terms of what
their type parameter is.

32
00:01:40.558 --> 00:01:45.140
Cuz you don't have to just have
a type parameters and all or nothing,

33
00:01:45.140 --> 00:01:48.300
it's not just a concrete type string or
a null,

34
00:01:48.300 --> 00:01:53.596
it could also be another array type, for
example, you have an array of arrays.

35
00:01:53.596 --> 00:01:58.402
And as you nest these, just the fact that
they're all getting unified together means

36
00:01:58.402 --> 00:02:02.274
that you can end up with different
arrays getting restricted more and

37
00:02:02.274 --> 00:02:03.692
more as they get used in.

38
00:02:03.692 --> 00:02:07.887
And sort of, you end up with sort
of the lowest common denominator of

39
00:02:07.887 --> 00:02:11.063
flexibility as all of those
get unified together.

40
00:02:11.063 --> 00:02:14.353
So, basically, what we're gonna do is we
need to ensure that every single element

41
00:02:14.353 --> 00:02:15.579
in the array has the same type.

42
00:02:15.579 --> 00:02:18.667
And we're gonna do this in pretty
much the most basic way there is,

43
00:02:18.667 --> 00:02:22.197
which is just to march down all the
elements, [LAUGH] and just be like, okay,

44
00:02:22.197 --> 00:02:23.433
you all gotta be the same.

45
00:02:23.433 --> 00:02:26.271
There is one thing we do have going for
us, though, which is,

46
00:02:26.271 --> 00:02:29.710
the nice thing about the whole unification
system is that, it means that,

47
00:02:29.710 --> 00:02:32.713
if the if we knew that they're all
going to get unified together,

48
00:02:32.713 --> 00:02:35.197
we don't need to do the matrix
of all possibilities.

49
00:02:35.197 --> 00:02:38.327
What we can do instead is we can just say,
okay, just grab the first element out of

50
00:02:38.327 --> 00:02:40.599
there, and just everybody else
needs to be equal to that.

51
00:02:40.599 --> 00:02:43.694
So that's exactly what we're gonna do,
we're gonna unify every single element in

52
00:02:43.694 --> 00:02:46.091
the array with the first element
in the array, and then just say,

53
00:02:46.091 --> 00:02:48.855
whatever that thing's type is,
that's what everybody else's type is.

54
00:02:48.855 --> 00:02:51.240
And as soon as we encounter
somebody that's a mismatch,

55
00:02:51.240 --> 00:02:52.439
it's a mismatch game over.

56
00:02:52.439 --> 00:02:54.658
But otherwise,
all the symlinks will end up with,

57
00:02:54.658 --> 00:02:57.654
just everything is essentially
equivalent to everything else, and

58
00:02:57.654 --> 00:02:59.889
we don't really need to do
any other work for that.

59
00:02:59.889 --> 00:03:04.784
Okay, so that's what the purpose
of this first element type is.

60
00:03:04.784 --> 00:03:09.062
Note that we'll be handy later is we're
doing the visitNode to get the actual type

61
00:03:09.062 --> 00:03:11.796
out of this and
all the right implications for that.

62
00:03:11.796 --> 00:03:14.088
So this is just the first
element of the array, and

63
00:03:14.088 --> 00:03:16.993
we already handled the case where
the elements list was empty.

64
00:03:16.993 --> 00:03:18.912
So we know that we already
have at least one here.

65
00:03:18.912 --> 00:03:21.330
So this is definitely gonna
end up with something.

66
00:03:21.330 --> 00:03:24.290
Then, we have this first element concrete,
which is our,

67
00:03:24.290 --> 00:03:27.309
the thing that we used in a previous
exercise just to be like,

68
00:03:27.309 --> 00:03:29.798
a convenience like this
will either return null or

69
00:03:29.798 --> 00:03:33.791
else it will return the thing that's
inside the concrete field of that record.

70
00:03:33.791 --> 00:03:38.095
So it's sort of unwrapping it or
just giving you back a null.

71
00:03:38.095 --> 00:03:42.171
And then, we're doing
node.elements.slice1, which is basically

72
00:03:42.171 --> 00:03:45.992
just skip the first one, cuz we
already got the first one over here.

73
00:03:45.992 --> 00:03:50.326
And this is the part where we start to
get into the stuff we're gonna change.

74
00:03:50.326 --> 00:03:54.408
So basically, the procedure for
unifying these all with one another, this

75
00:03:54.408 --> 00:03:58.508
is gonna be our our first from-scratch
unification of polymorphic types.

76
00:03:58.508 --> 00:04:03.031
Get the element's type ID and then
basically get concrete type name just like

77
00:04:03.031 --> 00:04:07.275
we did there, in order to just pull out
the concrete type if there is one or

78
00:04:07.275 --> 00:04:08.891
it might end up being null.

79
00:04:08.891 --> 00:04:10.406
And then we need to check for
type mismatch.

80
00:04:10.406 --> 00:04:13.940
So if it has a concrete type, in other
words, if this is non-null, and so

81
00:04:13.940 --> 00:04:17.588
does the first element, and those
are different, then type mismatch, but

82
00:04:17.588 --> 00:04:19.472
all of those conditions have to be met.

83
00:04:19.472 --> 00:04:22.696
Otherwise, it's okay,
and we let it through.

84
00:04:22.696 --> 00:04:25.512
If that's not the case, sorry,
if we didn't have a type mismatch,

85
00:04:25.512 --> 00:04:27.323
then basically we just
wanna unify the two.

86
00:04:27.323 --> 00:04:30.857
So first we check to see if there's
a type mismatch, and then afterwards,

87
00:04:30.857 --> 00:04:33.959
then if there was not a type mismatch,
then we go ahead and unify.

88
00:04:33.959 --> 00:04:37.881
Great, let's take five minutes and
work through it.

89
00:04:44.218 --> 00:04:46.955
&gt;&gt; Richard Feldman: All right, so
this initial case, not a problem,

90
00:04:46.955 --> 00:04:48.724
we're already done with that.

91
00:04:48.724 --> 00:04:50.734
Nothing to do there,
getting the first element type and

92
00:04:50.734 --> 00:04:52.548
the first element concrete,
also not a problem.

93
00:04:52.548 --> 00:04:54.769
The interesting part is
in the body of the loop.

94
00:04:54.769 --> 00:04:58.925
So in the body of the loop, we're gonna
go through this and basically say, okay,

95
00:04:58.925 --> 00:05:01.105
go ahead and
first we get the element type.

96
00:05:01.105 --> 00:05:03.955
So this is actually basically
a carbon copy of what we did up here.

97
00:05:03.955 --> 00:05:08.617
The only difference is
that we're actually,

98
00:05:08.617 --> 00:05:11.970
I forgot that I refactored that.

99
00:05:11.970 --> 00:05:15.158
So basically, just go visit that node,
instead of visiting the first node,

100
00:05:15.158 --> 00:05:17.085
we're just going to do
what we did over there.

101
00:05:17.085 --> 00:05:18.898
And then once you've got the element type,

102
00:05:18.898 --> 00:05:22.397
you can use that to get the element
concrete type, I don't need that anymore.

103
00:05:22.397 --> 00:05:25.579
Yeah, there's a funny example
of JavaScript, or guess,

104
00:05:25.579 --> 00:05:29.285
TypeScript telling that rule that
we talked about earlier, right?

105
00:05:29.285 --> 00:05:31.489
Now we know how to implement
this if you want, right?

106
00:05:31.489 --> 00:05:36.188
This is whether you search the entire
scope and say, disallow duplicates

107
00:05:36.188 --> 00:05:41.213
based on the entire scope, or based on
current scope only or allow it, right?

108
00:05:41.213 --> 00:05:45.488
So here we're seeing,
they are not allowing it in this case, but

109
00:05:45.488 --> 00:05:49.089
now we know how to do all
three if we want, from part 2.

110
00:05:49.089 --> 00:05:51.239
Okay, so there's that one,
and then basically,

111
00:05:51.239 --> 00:05:53.089
here we have this conditional I mentioned,

112
00:05:53.089 --> 00:05:56.191
all of these conditions have to be true
in order for us to report the error.

113
00:05:56.191 --> 00:05:58.882
So, the first element
needs to be concrete and

114
00:05:58.882 --> 00:06:01.298
the second element needs to be concrete.

115
00:06:01.298 --> 00:06:05.268
The first element concrete needs to
not be null is what I should say, so

116
00:06:05.268 --> 00:06:09.914
this is the nullability check and the same
thing there, and then basically just,

117
00:06:09.914 --> 00:06:12.902
yeah, are these actually
not equal to one another.

118
00:06:12.902 --> 00:06:16.898
So if they are both concrete and
they are not equal to each other,

119
00:06:16.898 --> 00:06:21.338
then we have the classic type is
matched scenario, both are concrete,

120
00:06:21.338 --> 00:06:25.630
they're not the same, therefore,
we report an error, so do that.

121
00:06:25.630 --> 00:06:28.488
And then afterwards, if we, yeah,

122
00:06:28.488 --> 00:06:32.670
that's a little bit annoying
to break out before each loop.

123
00:06:32.670 --> 00:06:35.456
So return will actually do what we want,
I guess that's a good argument for

124
00:06:35.456 --> 00:06:37.373
not refactoring this the way I did,
but whatever.

125
00:06:37.373 --> 00:06:41.310
Point being, we're doing the reporting,
that's the critical thing here.

126
00:06:41.310 --> 00:06:45.627
And then basically after that,
we can then try to unify the rating one.

127
00:06:45.627 --> 00:06:49.313
So this is where we essentially say,
okay, the first element type needs to be

128
00:06:49.313 --> 00:06:51.993
the same as every single one
of the other element types.

129
00:06:51.993 --> 00:06:54.289
So all we have to do is essentially say,

130
00:06:54.289 --> 00:06:57.002
since that's sort of
fixed outside the loop,

131
00:06:57.002 --> 00:07:01.957
we're in the middle of the loop, take this
element type and just unify it with that.

132
00:07:01.957 --> 00:07:06.762
And then, this once again, did
the refactor there, elements, or, sorry,

133
00:07:06.762 --> 00:07:09.385
element, and
now we have unified these two.

134
00:07:09.385 --> 00:07:12.077
And unify does actually return
a Boolean as to whether or

135
00:07:12.077 --> 00:07:13.921
not the unification was successful.

136
00:07:13.921 --> 00:07:18.811
If they didn't actually unify,
then, okay, type mismatch,

137
00:07:18.811 --> 00:07:22.175
right here, another one, and there we go.

138
00:07:22.175 --> 00:07:27.178
So now we rerun it, is not defined
a missed one, yeah, that one.

139
00:07:29.643 --> 00:07:33.211
&gt;&gt; Richard Feldman: It just looks nicer
without the old school for loop style.

140
00:07:33.211 --> 00:07:36.237
Although, shout out to the C
course that we did the other day.

141
00:07:36.237 --> 00:07:38.820
[LAUGH] Definitely do some old school for
loops in that.

142
00:07:38.820 --> 00:07:44.490
All right, any questions about arrays,
polymorphism?

143
00:07:44.490 --> 00:07:45.656
Last call for types of questions.

144
00:07:45.656 --> 00:07:48.496
Actually no, you can ask some of the next
section if you want, but we're after this,

145
00:07:48.496 --> 00:07:49.651
we're moving on to WebAssembly.

146
00:07:49.651 --> 00:07:56.248
So now is the best time, I guess, to ask
any type related questions that you got.

147
00:07:56.248 --> 00:07:59.893
&gt;&gt; Speaker 2: I forget the name of
the type system we're using, but

148
00:07:59.893 --> 00:08:04.591
in languages like C and stuff,
that's a different type system, and

149
00:08:04.591 --> 00:08:10.439
I'm assuming the type annotations there
are necessary versus the one we're using?

150
00:08:10.439 --> 00:08:11.301
&gt;&gt; Richard Feldman: In a lot of cases,
yeah.

151
00:08:11.301 --> 00:08:16.847
So quite a lot of languages have either
no or very minimal type inference,

152
00:08:16.847 --> 00:08:20.701
and so they rely very
heavily on type annotations.

153
00:08:20.701 --> 00:08:23.222
Honestly, they look very
different than this,

154
00:08:23.222 --> 00:08:27.041
they'll still have the same basic
concepts of types and how they relate.

155
00:08:27.041 --> 00:08:30.806
And of course, they find type mismatches
too, but the way that they're going about

156
00:08:30.806 --> 00:08:34.268
updating their database is different
in many ways, from what we're doing.

157
00:08:34.268 --> 00:08:41.018
So I would say there's some overlap at
a foundational level, at a basics level.

158
00:08:41.018 --> 00:08:43.559
But yeah, if you get into the details,

159
00:08:43.559 --> 00:08:48.179
you're gonna find quite a lot
different between a C-type system, for

160
00:08:48.179 --> 00:08:52.491
example, and Henley Milner,
who's [LAUGH] the one we're doing.

161
00:08:52.491 --> 00:08:57.596
&gt;&gt; Speaker 2: Do you know what a system
that TypeScript is built off of?

162
00:08:57.596 --> 00:09:00.872
&gt;&gt; Richard Feldman: I mean, TypeScript
is a beast, I mean, it's a really,

163
00:09:00.872 --> 00:09:05.379
it's among languages that are top 10,
top 20, most popular languages,

164
00:09:05.379 --> 00:09:10.253
I would say TypeScript is almost certainly
the most complicated type system there.

165
00:09:10.253 --> 00:09:15.007
The only other contender would be C++, and
I'm not actually sure if C++ type system

166
00:09:15.007 --> 00:09:19.261
is more complicated or if C++ lets you
make a bigger mess in this type system.

167
00:09:19.261 --> 00:09:19.775
&gt;&gt; [LAUGH]
&gt;&gt; Richard Feldman: But

168
00:09:19.775 --> 00:09:24.916
those would be the two top contenders,
[LAUGH] really.

169
00:09:24.916 --> 00:09:29.506
So, yeah, I don't know what they're using,
but it's doesn't fit neatly into

170
00:09:29.506 --> 00:09:33.599
a bucket because it's so complicated, yeah
&gt;&gt; Speaker 3: Why do you think TypeScript

171
00:09:33.599 --> 00:09:36.578
doesn't have function
parameter type inference?

172
00:09:36.578 --> 00:09:38.653
&gt;&gt; Richard Feldman: Why do I think,
first of all,

173
00:09:38.653 --> 00:09:42.554
I didn't know that I don't use
TypeScript much [LAUGH] so

174
00:09:42.554 --> 00:09:48.542
this is news to me that TypeScript doesn't
have function parameter type inference.

175
00:09:48.542 --> 00:09:49.187
I don't know offhand.

176
00:09:49.187 --> 00:09:53.479
I mean, it's actually pretty common for a
lot of languages that they will say things

177
00:09:53.479 --> 00:09:57.591
like, if you're doing it for like an
inline function, like an anonymous lambda

178
00:09:57.591 --> 00:10:01.111
or something like that,
we'll do type inference on the arguments.

179
00:10:01.111 --> 00:10:05.679
But if it's at the top level,
you have to spell out every single type,

180
00:10:05.679 --> 00:10:08.401
there's no type inference whatsoever.

181
00:10:08.401 --> 00:10:10.747
Obviously, that's not true of
what we're doing here, but

182
00:10:10.747 --> 00:10:12.687
I think that hoisting might
be one of the reasons.

183
00:10:12.687 --> 00:10:16.795
So that is an example of a case where a
top level function is just sort of special

184
00:10:16.795 --> 00:10:19.576
and it works differently,
in the case of hoisting,

185
00:10:19.576 --> 00:10:23.076
it's working differently from
a name resolution perspective.

186
00:10:23.076 --> 00:10:25.917
But I wouldn't be surprised if,
in those languages,

187
00:10:25.917 --> 00:10:27.845
if you really dig under the surface.

188
00:10:27.845 --> 00:10:32.756
You can find multiple differences, and not
just the like name resolution between what

189
00:10:32.756 --> 00:10:37.407
it means if you have a top-level function
versus if you have an anonymous lambda.

190
00:10:37.407 --> 00:10:40.377
And some of those languages may not
even support anonymous Lambdas.

191
00:10:40.377 --> 00:10:44.428
So I guess, I don't know, and I don't
really have a particular guess other

192
00:10:44.428 --> 00:10:48.609
than just the general, there's multiple
reasons that many languages don't

193
00:10:48.609 --> 00:10:51.290
allow type inference for
top-level functions.

194
00:10:51.290 --> 00:10:56.162
&gt;&gt; Speaker 3: In functional languages like
Elixir, is there something like unify, but

195
00:10:56.162 --> 00:11:00.049
not for types, but for
values like pattern matching?

196
00:11:00.049 --> 00:11:03.775
&gt;&gt; Richard Feldman: So the way that
pattern matching works is, I would say,

197
00:11:03.775 --> 00:11:06.484
pretty unrelated to type unification.

198
00:11:06.484 --> 00:11:11.388
You basically build up this big matrix and
then, yeah, it's just kind

199
00:11:11.388 --> 00:11:16.062
of its own thing, I wouldn't put
those in the same group, really.

200
00:11:16.062 --> 00:11:19.026
&gt;&gt; Speaker 4: What happens to type
inference when you partially apply

201
00:11:19.026 --> 00:11:19.727
a function?

202
00:11:19.727 --> 00:11:24.086
&gt;&gt; Richard Feldman: What happens to
type inference when you partially apply

203
00:11:24.086 --> 00:11:25.111
a function?

204
00:11:25.111 --> 00:11:29.012
So a piece of trivia, I guess,
about most of these languages is that,

205
00:11:29.012 --> 00:11:34.054
more of them than not are curried, meaning
that they're partially applying non-stop.

206
00:11:34.054 --> 00:11:37.943
So the way that it works in those
languages, so the way that we have

207
00:11:37.943 --> 00:11:42.776
functions working is, I think arrow
function was how I solved this, yeah.

208
00:11:42.776 --> 00:11:45.571
See if you say arrow function, now you
have something to grep for that's not

209
00:11:45.571 --> 00:11:48.465
function which has a million matches it,
I guess I could also use the outline.

210
00:11:48.465 --> 00:11:49.141
Yeah, there it is.

211
00:11:49.141 --> 00:11:52.761
Okay, so in our case,
we have multiple params here, right?

212
00:11:52.761 --> 00:11:56.075
But if you look at the type checker for
like Elm or Haskell or ML, or

213
00:11:56.075 --> 00:12:00.176
something like that, actually rock is
not curried, but all the other ones are,

214
00:12:00.176 --> 00:12:02.373
rock is very unusual in not being curried.

215
00:12:02.373 --> 00:12:07.233
What the language being curried means
is that, technically, in Elm and

216
00:12:07.233 --> 00:12:08.986
Haskell, technically,

217
00:12:08.986 --> 00:12:14.260
every language they have has exactly
one parameter, always, one argument.

218
00:12:14.260 --> 00:12:18.052
But syntactically, they disguise that
fact by basically making it so that both

219
00:12:18.052 --> 00:12:22.198
the syntax for declaring a function looks
like you're defining multiple arguments.

220
00:12:22.198 --> 00:12:23.362
And then also the syntax for

221
00:12:23.362 --> 00:12:26.306
calling a function looks like
you're passing multiple arguments.

222
00:12:26.306 --> 00:12:28.173
And the only time
the distinction comes up,

223
00:12:28.173 --> 00:12:30.805
is if you omit an argument when
you're calling the function.

224
00:12:30.805 --> 00:12:33.900
And in most languages,
that's where the compiler says, hey,

225
00:12:33.900 --> 00:12:35.516
you forgot one, that's error.

226
00:12:35.516 --> 00:12:40.053
But in those languages, says, that's fine,
I'm just gonna return a partially applied

227
00:12:40.053 --> 00:12:43.172
function that has applied all
the arguments you did provide, and

228
00:12:43.172 --> 00:12:46.546
then just says, a lambda,
basically that takes the final argument.

229
00:12:46.546 --> 00:12:50.866
And then if you provide that to the thing
that it's returning, then it goes back and

230
00:12:50.866 --> 00:12:54.584
runs the whole thing, without going
on a huge tangent about currying.

231
00:12:54.584 --> 00:12:56.395
So what does that mean for type inference?

232
00:12:56.395 --> 00:12:59.587
What that basically means is that,
as long as you've got a language

233
00:12:59.587 --> 00:13:02.443
that's already set up to have
all the functions be curried,

234
00:13:02.443 --> 00:13:04.964
it's actually an easier
job than what we're doing.

235
00:13:04.964 --> 00:13:07.002
Because basically you're just,

236
00:13:07.002 --> 00:13:11.513
instead of having to iterate over
here you're just, cool, node.param.

237
00:13:11.513 --> 00:13:14.553
It's the one param I just get rid of,
I just delete some for loops,

238
00:13:14.553 --> 00:13:15.430
basically [LAUGH].

239
00:13:15.430 --> 00:13:18.404
And then there you go, you already have
the partial application and all that.

240
00:13:18.404 --> 00:13:22.309
Where partial application becomes more
of a pain for a compiler author is

241
00:13:22.309 --> 00:13:26.163
actually in the step we're about to
get to, which is code generation.

242
00:13:26.163 --> 00:13:30.016
If you do the naive code generation and
you just actually, literally create all

243
00:13:30.016 --> 00:13:33.712
those lambdas every single time,
that's tends to be bad for performance.

244
00:13:33.712 --> 00:13:38.520
And overcoming that and making it so that
you sort of undo the querying in the very,

245
00:13:38.520 --> 00:13:42.075
very common case where you're
not partially applying it and

246
00:13:42.075 --> 00:13:45.576
applying everything is more work for
the compiler author.

247
00:13:45.576 --> 00:13:48.163
So that's the trade off,
really from a type perspective,

248
00:13:48.163 --> 00:13:51.958
it's actually more convenient to curry
everything and partially apply everything.

249
00:13:51.958 --> 00:13:55.374
And if you're partially applying manually
where you're just like, I'm just like

250
00:13:55.374 --> 00:13:58.378
returning a lambda that I wrote that is
calling this other one with arguments,

251
00:13:58.378 --> 00:14:00.218
that doesn't even need
any special handling.

252
00:14:00.218 --> 00:14:05.537
It's just plain old ordinary function
calling and type unification.

253
00:14:05.537 --> 00:14:08.586
So, that would already work using
everything we've already done here,

254
00:14:08.586 --> 00:14:11.053
we don't even need to lift
a finger [LAUGH] and support that.

