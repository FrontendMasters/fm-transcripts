WEBVTT

1
00:00:00.078 --> 00:00:03.018
So basically,
we're gonna do the visit call expression.

2
00:00:03.018 --> 00:00:07.671
So this is essentially when you are in the
parse tree node and you're going through

3
00:00:07.671 --> 00:00:12.271
that gigantic switch statement of all
the different flavors of parse tree node.

4
00:00:12.271 --> 00:00:15.730
Now is the point in the course where
we are going to finally take a look at

5
00:00:15.730 --> 00:00:16.857
the call expression.

6
00:00:16.857 --> 00:00:19.899
So this is where you're
actually calling the function.

7
00:00:19.899 --> 00:00:21.339
So there's this term callee.

8
00:00:21.339 --> 00:00:24.555
Callee basically returns to
the thing that you're calling.

9
00:00:24.555 --> 00:00:28.889
As we noted in three or four sections ago,
it is possible that this is an identifier,

10
00:00:28.889 --> 00:00:32.430
so like foo or something like the name
of the function increment, but

11
00:00:32.430 --> 00:00:34.099
it's also possible it's not.

12
00:00:34.099 --> 00:00:37.082
You can always call things that are just
arbitrary expressions by putting

13
00:00:37.082 --> 00:00:38.199
parentheses around them.

14
00:00:38.199 --> 00:00:42.906
So since we don't know which one we have
here, we are going to have to assume

15
00:00:42.906 --> 00:00:46.516
that it's a node and
then treat it as such as we progress.

16
00:00:46.516 --> 00:00:50.212
So basically the next thing we're gonna
do is just go sort of walk through all

17
00:00:50.212 --> 00:00:54.197
the arguments of this function, which we
know based on having this node in scope,

18
00:00:54.197 --> 00:00:55.732
this like the parse tree node.

19
00:00:55.732 --> 00:00:59.578
Parse tree nodes have the arguments
listed for function types.

20
00:00:59.578 --> 00:01:04.298
This is what we are calling and then
basically we're just gonna build up this,

21
00:01:04.298 --> 00:01:08.033
like accumulation of arc types
by visiting each node in turn.

22
00:01:08.033 --> 00:01:11.936
So this is not just giving us
the if we didn't visit the node and

23
00:01:11.936 --> 00:01:16.833
we just did it like this, then we would
have a collection of parse tree nodes.

24
00:01:16.833 --> 00:01:17.813
But that's not what we want.

25
00:01:17.813 --> 00:01:18.989
These are the arc types.

26
00:01:18.989 --> 00:01:23.090
So we're going to go call visit node to
run our usual logic, go through our giant

27
00:01:23.090 --> 00:01:26.903
switch statement, possibly end up
back here a couple times, who knows?

28
00:01:26.903 --> 00:01:30.185
And we're not gonna worry about [LAUGH]
blowing the stack for this course.

29
00:01:30.185 --> 00:01:36.210
And ultimately, after doing all that,
we end up with archetypes being populated

30
00:01:36.210 --> 00:01:42.512
with the contents of all those visit node
calls and all those different types, okay?

31
00:01:42.512 --> 00:01:45.170
So the next thing is our first,
here's what we need to actually do.

32
00:01:45.170 --> 00:01:46.964
And this is basically where,

33
00:01:46.964 --> 00:01:51.698
rather than making a return type of 0 this
is a case where we need to actually for

34
00:01:51.698 --> 00:01:56.247
the first time in any of our exercises,
add a new row to our database table.

35
00:01:56.247 --> 00:01:59.924
So this is something where there is a
function in here has the word fresh in it,

36
00:01:59.924 --> 00:02:02.994
so I'm not spoil the answer, but
you can poke around to find it.

37
00:02:02.994 --> 00:02:05.466
It's basically a way of saying,
hey, database,

38
00:02:05.466 --> 00:02:08.352
I need a new row because I need
to do some unification stuff.

39
00:02:08.352 --> 00:02:13.727
So in most of our examples we have seen so
far, we have this sort of extra pass,

40
00:02:13.727 --> 00:02:18.693
or, if you're doing it in
canonicalization, where you go through and

41
00:02:18.693 --> 00:02:22.292
sort of hand out all of these IDs for
database rows.

42
00:02:22.292 --> 00:02:25.444
But it's also very possible that right in
the middle of unification, you're like,

43
00:02:25.444 --> 00:02:26.382
I need to do one of those.

44
00:02:26.382 --> 00:02:28.144
Wait, I didn't plan ahead for this,

45
00:02:28.144 --> 00:02:30.911
I didn't anticipate that we
would end up in this scenario.

46
00:02:30.911 --> 00:02:33.511
I have found that I need
a new one of these.

47
00:02:33.511 --> 00:02:36.282
Now, granted, this one was kind
of maybe anticipatable, okay,

48
00:02:36.282 --> 00:02:38.868
you're going to need a return type for
your function, fine.

49
00:02:38.868 --> 00:02:43.029
But this is something that actually
legitimately happens all the time, and

50
00:02:43.029 --> 00:02:45.954
so it's useful to know that
you have access to this and

51
00:02:45.954 --> 00:02:48.568
how to do it in the middle
of a unification pass.

52
00:02:48.568 --> 00:02:52.856
So do that there, just change this from
zero to basically give me a new fresh type

53
00:02:52.856 --> 00:02:57.080
variable that is a row where the the type
is just gonna be initialized to null and

54
00:02:57.080 --> 00:02:59.518
then we'll actually do
stuff with it later.

55
00:02:59.518 --> 00:03:01.454
Then we start to actually look at like,

56
00:03:01.454 --> 00:03:03.631
what type of colleague
are we dealing with?

57
00:03:03.631 --> 00:03:06.347
So this is where we've essentially
broken it down into two possibilities.

58
00:03:06.347 --> 00:03:10.379
One is we are in the parentheses scenario
as written out here, whereas, basically,

59
00:03:10.379 --> 00:03:13.683
okay, I have parentheses around
something that is a function type and

60
00:03:13.683 --> 00:03:14.862
then I'm calling that.

61
00:03:14.862 --> 00:03:17.879
Or I have an identifier where
there's no parentheses, or

62
00:03:17.879 --> 00:03:20.044
at least probably not if the format runs.

63
00:03:20.044 --> 00:03:25.597
And then I'm calling that sort of by name.

64
00:03:25.597 --> 00:03:28.841
Yeah, so basically,
in each of these two scenarios,

65
00:03:28.841 --> 00:03:30.964
we have some different thing to do.

66
00:03:30.964 --> 00:03:34.450
So here is basically take callee.body and
go look up its type.

67
00:03:34.450 --> 00:03:36.671
So essentially this is the callee and so

68
00:03:36.671 --> 00:03:41.245
we want to go look up the body of that
function expression, so not the arguments,

69
00:03:41.245 --> 00:03:43.895
but this part, the body,
go look up its type.

70
00:03:43.895 --> 00:03:47.056
And then basically make this
variable here called body type,

71
00:03:47.056 --> 00:03:49.122
be whatever that thing's body type is,

72
00:03:49.122 --> 00:03:53.031
instead of the current that we're just
initializing it to, which is null.

73
00:03:53.031 --> 00:03:56.679
And then for the identifier case, we're
not gonna look so much at the body, but

74
00:03:56.679 --> 00:03:58.912
rather we're gonna go look
up the identifier and

75
00:03:58.912 --> 00:04:00.394
basically try to find in scope.

76
00:04:00.394 --> 00:04:04.943
Okay, is that thing there,
that identifier for that thing's name, so

77
00:04:04.943 --> 00:04:06.373
like foo in this case.

78
00:04:06.373 --> 00:04:09.495
And then basically say like,
okay, if we have one of those,

79
00:04:09.495 --> 00:04:12.311
then let's go get it out of scope,
find this type ID and

80
00:04:12.311 --> 00:04:15.085
then use it right here instead
of the hard coded zero.

81
00:04:22.304 --> 00:04:24.027
&gt;&gt; Richard Feldman: Okay,
let's go through these solutions.

82
00:04:24.027 --> 00:04:27.947
So, first, we're gonna start off with
this one, create a fresh tight variable.

83
00:04:27.947 --> 00:04:32.560
Fortunately, we have they,
let me jump down here real quick.

84
00:04:32.560 --> 00:04:37.324
Fortunately we have a nice convenient
thing here called fresh type ID.

85
00:04:37.324 --> 00:04:40.906
So, let's go ahead and
use that one right there.

86
00:04:40.906 --> 00:04:41.572
What was that?

87
00:04:41.572 --> 00:04:43.341
Yeah, fresh type variable, great.

88
00:04:43.341 --> 00:04:43.999
FreshTypeID.

89
00:04:43.999 --> 00:04:47.245
So if you go look at the definition
of FreshTypeId, very simple,

90
00:04:47.245 --> 00:04:51.435
it's just like we have this thing called
NextTypeId, which is auto-incrementing

91
00:04:51.435 --> 00:04:54.577
integer, basically from your
classic relational database.

92
00:04:54.577 --> 00:04:58.310
Except we're doing it with
JavaScript arrays, increment it, and

93
00:04:58.310 --> 00:05:00.741
then basically just initialize it to null.

94
00:05:00.741 --> 00:05:04.854
That slot in the database initialize
the null and then return it.

95
00:05:04.854 --> 00:05:08.026
So great, we've now gotten our
new returnTypeId in the middle of

96
00:05:08.026 --> 00:05:09.768
the function, which is very nice.

97
00:05:09.768 --> 00:05:16.620
Now we need to go look up the type,
not the type ID of callee.body.

98
00:05:16.620 --> 00:05:18.416
So way to do that is basically
just like visit node.

99
00:05:18.416 --> 00:05:21.273
So we can, oops, go get the callee type.

100
00:05:21.273 --> 00:05:22.031
I'm sorry, that's.

101
00:05:22.031 --> 00:05:25.023
Yeah, am I in the right one here?

102
00:05:25.023 --> 00:05:26.466
I am.
Okay, yeah, so

103
00:05:26.466 --> 00:05:29.144
get the callee type from the body.

104
00:05:29.144 --> 00:05:33.675
So this is visit node,

105
00:05:33.675 --> 00:05:36.955
calle.body.

106
00:05:36.955 --> 00:05:37.530
You know what?

107
00:05:37.530 --> 00:05:39.554
I'm looking at the my bad that's I
was wondering why that wasn't there.

108
00:05:39.554 --> 00:05:42.043
I'm looking at the wrong one.

109
00:05:42.043 --> 00:05:49.811
Let me look at the part five one
solution that makes more sense.

110
00:05:49.811 --> 00:05:51.841
It's more complicated now
that we're in function land.

111
00:05:58.772 --> 00:06:00.867
&gt;&gt; Richard Feldman: Cool.
Right, so there's our FreshTypeId.

112
00:06:00.867 --> 00:06:06.827
And here we are doing the visit
node on the node.collee.body.

113
00:06:06.827 --> 00:06:12.892
That was that one and
that's gonna be instead of body type.null.

114
00:06:12.892 --> 00:06:16.141
And so now basically what we're
unifying is the returnTypeId,

115
00:06:16.141 --> 00:06:19.524
which as we just saw a second ago,
we have now initialized to null.

116
00:06:19.524 --> 00:06:23.273
So as we know from unify, this is because
it's coming in as null, this is just

117
00:06:23.273 --> 00:06:26.810
immediately going to be unified to
Assem link to whatever this thing is.

118
00:06:26.810 --> 00:06:30.586
That's the like, the first code
path we talked about in unify.

119
00:06:30.586 --> 00:06:34.212
So essentially,
what we're saying here is like, okay,

120
00:06:34.212 --> 00:06:39.170
whatever your body type is, like the
actual implementation of this body here,

121
00:06:39.170 --> 00:06:43.096
we are going to unify directly with that,
like our whole type.

122
00:06:43.096 --> 00:06:43.757
Okay, so

123
00:06:43.757 --> 00:06:49.305
then the next case is where we don't
have this unusual parentheses situation.

124
00:06:49.305 --> 00:06:50.667
We instead have an identifier.

125
00:06:50.667 --> 00:06:54.501
And for the identifier case, it's even
simpler where basically we're like, okay,

126
00:06:54.501 --> 00:06:56.772
we have an identifier,
we've got the scope here.

127
00:06:56.772 --> 00:07:01.424
All we really need to do is just grab
the function's type Id from scope and

128
00:07:01.424 --> 00:07:05.466
that's just the thing that we do
at the very beginning of this,

129
00:07:05.466 --> 00:07:07.856
which is just hey, go get the scope.

130
00:07:07.856 --> 00:07:11.860
And then resolve some links and compress
to get it all the way back down to

131
00:07:11.860 --> 00:07:16.618
something that's either guaranteed to be
null or guaranteed to be a concrete type.

132
00:07:16.618 --> 00:07:20.250
So this same trick that we use
at the very beginning of unify,

133
00:07:20.250 --> 00:07:24.523
all the way back up at here for a and
b, we can use it once again to just make

134
00:07:24.523 --> 00:07:29.180
sure that we have something that is all
the way resolved to the end of the line.

135
00:07:29.180 --> 00:07:34.651
And from there, we're basically just
looking at the same stuff we were before,

136
00:07:34.651 --> 00:07:39.560
where we're like checking to see if
there's return type information in

137
00:07:39.560 --> 00:07:41.824
this function return types map.

138
00:07:41.824 --> 00:07:45.558
A little bit of a sidebar on this,
so back at the slides,

139
00:07:45.558 --> 00:07:49.619
we talked about how we're kind
of storing this in the table.

140
00:07:49.619 --> 00:07:51.041
That is a way that you can do this.

141
00:07:51.041 --> 00:07:54.738
But actually it's more common to
store this extra function information

142
00:07:54.738 --> 00:07:55.413
out of band.

143
00:07:55.413 --> 00:07:59.157
So that, basically, rather than storing
this right here inside the node,

144
00:07:59.157 --> 00:08:00.794
another way that you can do that,

145
00:08:00.794 --> 00:08:03.852
somebody asked the question
isn't that gonna make the type?

146
00:08:03.852 --> 00:08:07.341
Kind of big over here and the answer
is like, well, yes, it is [LAUGH].

147
00:08:07.341 --> 00:08:10.492
So another trick you can do is you can
just sort of store it in like a side table

148
00:08:10.492 --> 00:08:13.795
where basically you just have a separate
mapping from like the IDs that you know

149
00:08:13.795 --> 00:08:16.775
are functions to what are their extra
pieces of metadata around that?

150
00:08:16.775 --> 00:08:20.256
And this is basically just like
demonstrating a way of doing that.

151
00:08:20.256 --> 00:08:24.646
Either technique works, they both
have their pros and cons, but FYI,

152
00:08:24.646 --> 00:08:28.538
that's what the function return
types like side map is about.

153
00:08:28.538 --> 00:08:33.587
It just kind of hangs up here with
scope and the next type ID and

154
00:08:33.587 --> 00:08:37.449
errors and
those other sort of global things.

