WEBVTT

1
00:00:00.000 --> 00:00:02.369
&gt;&gt; Richard Feldman: So here,
we have our function definition up here.

2
00:00:02.369 --> 00:00:05.981
And one of the many things that you can
do with a function is you can call it,

3
00:00:05.981 --> 00:00:08.431
and sometimes you can call
it multiple times, and

4
00:00:08.431 --> 00:00:11.604
sometimes you can call it multiple
times with different types.

5
00:00:11.604 --> 00:00:15.015
So here, we have a call to Inc,
passing 42 which should work out great,

6
00:00:15.015 --> 00:00:16.403
because it expects a number.

7
00:00:16.403 --> 00:00:19.925
And here we have one passing a string,
which we want to not work out great.

8
00:00:19.925 --> 00:00:22.786
So here we have a goal of one success and
one type mismatch.

9
00:00:22.786 --> 00:00:26.185
So we wanna see that this one succeeds
because it's passing a number,

10
00:00:26.185 --> 00:00:29.712
and then we wanna see that this one
fails because it's passing a string.

11
00:00:29.712 --> 00:00:31.742
Again, we have a slide
real estate problem.

12
00:00:31.742 --> 00:00:33.773
So I've actually got some ellipses here.

13
00:00:33.773 --> 00:00:35.087
These numbers are not gone.

14
00:00:35.087 --> 00:00:36.619
They're just hiding [LAUGH] so

15
00:00:36.619 --> 00:00:39.445
that I can fit the more relevant
ones all on the screen.

16
00:00:39.445 --> 00:00:41.455
Okay, so here we have 0 through 3 up here.

17
00:00:41.455 --> 00:00:44.257
And then we have 6, 7, 8, and
9, which are currently null.

18
00:00:44.257 --> 00:00:46.189
Let's go ahead and assign those.

19
00:00:46.189 --> 00:00:48.558
So here we're finding,
again, we're using ink.

20
00:00:48.558 --> 00:00:51.731
So since we already have ink in scope,
we're saying yeah,

21
00:00:51.731 --> 00:00:55.226
we're not gonna bother creating
a new one and some linking them.

22
00:00:55.226 --> 00:00:57.656
We're just gonna say,
go straight to the source.

23
00:00:57.656 --> 00:00:58.465
This one is 0.

24
00:00:58.465 --> 00:00:59.523
This one is also 0.

25
00:00:59.523 --> 00:01:03.618
We do need a new one for this, because
this is a expression that we haven't seen

26
00:01:03.618 --> 00:01:05.986
anywhere else, so that's going to go in 6.

27
00:01:05.986 --> 00:01:08.300
7 is going to be the entire call itself.

28
00:01:08.300 --> 00:01:10.282
So this is what the call evaluates to.

29
00:01:10.282 --> 00:01:14.380
So if we said like const whatever equals,
then that would be similar to seven.

30
00:01:14.380 --> 00:01:17.052
Same basic deal here
except we're gonna use 8,

31
00:01:17.052 --> 00:01:19.405
9 because we already used those earlier.

32
00:01:19.405 --> 00:01:23.352
Okay, so the next thing we're gonna do
is we're gonna do unify of six and.

33
00:01:23.352 --> 00:01:26.108
This would be number but
again, screen real estate, so

34
00:01:26.108 --> 00:01:29.463
6 right here being essentially like,
hey, I am a number literal.

35
00:01:29.463 --> 00:01:30.492
So no problem there.

36
00:01:30.492 --> 00:01:31.715
It's a number literal.

37
00:01:31.715 --> 00:01:33.969
That's just all that's happening there.

38
00:01:33.969 --> 00:01:37.972
Then we're gonna unify six and two and
the reason for that is that, basically,

39
00:01:37.972 --> 00:01:41.045
this is where we get into the like,
function calling rules.

40
00:01:41.045 --> 00:01:45.424
So pretty intuitive if you're calling
a function passing a particular type,

41
00:01:45.424 --> 00:01:49.619
that function's argument at that
position had better have the same type.

42
00:01:49.619 --> 00:01:51.227
So we're going to unify them.

43
00:01:51.227 --> 00:01:54.780
So here's our 6 and then here's that 2,
going to unify those.

44
00:01:54.780 --> 00:01:59.236
This is an example of the way that you are
calling a function actually influencing

45
00:01:59.236 --> 00:02:00.950
the function's type itself.

46
00:02:00.950 --> 00:02:03.596
So if we didn't know what
this thing's type was,

47
00:02:03.596 --> 00:02:07.124
the fact that we've unified these
would cause it to say like,

48
00:02:07.124 --> 00:02:10.665
now this function is a number,
when previously maybe it wasn't.

49
00:02:10.665 --> 00:02:14.919
Although we will see a little bit later
why that's not actually what we want,

50
00:02:14.919 --> 00:02:19.370
and what we're really gonna do after we
move on a little bit is something slightly

51
00:02:19.370 --> 00:02:20.625
different than this.

52
00:02:20.625 --> 00:02:24.142
Then we're gonna unify 7 and 3, so
this is basically the The entire

53
00:02:24.142 --> 00:02:26.520
expression corresponds
to the return value.

54
00:02:26.520 --> 00:02:29.905
So, in exactly the same way that when
I call this passing this argument,

55
00:02:29.905 --> 00:02:33.190
this argument had better have the same
type as what we're passing in.

56
00:02:33.190 --> 00:02:37.027
It's also the case that whatever this
whole expression evaluates to had better

57
00:02:37.027 --> 00:02:38.809
be the return type of that function.

58
00:02:38.809 --> 00:02:41.187
So that's what's putting those together,

59
00:02:41.187 --> 00:02:44.562
then basically we're just gonna
do the same thing for string and

60
00:02:44.562 --> 00:02:47.643
this with the argument and
then that with the return type.

61
00:02:47.643 --> 00:02:51.797
So just the same stuff repeated, but
with string and the different numbers.

62
00:02:51.797 --> 00:02:54.957
Okay, so unifying 6 to the number,
very straightforward,

63
00:02:54.957 --> 00:02:56.428
that just becomes a number.

64
00:02:56.428 --> 00:02:59.288
Unifying 6 and 2,
we basically just go do the check.

65
00:02:59.288 --> 00:03:02.217
Okay, that's also a number,
no problem, leave it alone.

66
00:03:02.217 --> 00:03:06.628
7 and 3, now 7 is symlinked to 3,
8 and string, 8 is now string.

67
00:03:06.628 --> 00:03:08.520
And now we have a type mismatch.

68
00:03:08.520 --> 00:03:12.919
So everything was working great until
we tried to unify ID number eight

69
00:03:12.919 --> 00:03:17.464
with ID number two because eight is
already the concrete type string from

70
00:03:17.464 --> 00:03:18.742
the previous step.

71
00:03:18.742 --> 00:03:22.055
And two is already the concrete
type number from back

72
00:03:22.055 --> 00:03:24.473
earlier in the unification process.

73
00:03:24.473 --> 00:03:26.731
So okay, sure enough,
we did get what we wanted.

74
00:03:26.731 --> 00:03:29.994
We wanted to get one success, so
this one did successfully unify.

75
00:03:29.994 --> 00:03:32.881
And then one failure,
this one indeed was a type mismatch.

76
00:03:32.881 --> 00:03:34.073
So hey, the system works.

77
00:03:34.073 --> 00:03:34.639
Fantastic.

78
00:03:34.639 --> 00:03:38.467
Also, if you want, you can keep going and
unify nine here, but at this point,

79
00:03:38.467 --> 00:03:42.296
that's kind of pointless because we're
never gonna actually make use of it.

80
00:03:42.296 --> 00:03:45.643
I mainly bring this up on the context
of when you hit a type mismatch,

81
00:03:45.643 --> 00:03:48.312
there are a few different
things the compiler can do.

82
00:03:48.312 --> 00:03:51.669
This once again is another one of those
things where it's sort of up to you as

83
00:03:51.669 --> 00:03:54.247
the compiler author to decide
how you wanna handle that.

84
00:03:54.247 --> 00:03:57.293
One thing you can do, which I would not
advise, is you can say, we are done.

85
00:03:57.293 --> 00:03:59.172
As soon as we hit our first type mismatch,

86
00:03:59.172 --> 00:04:02.395
you get reported that one type mismatch
and we will never do any more type

87
00:04:02.395 --> 00:04:04.831
inference ever again and
you get to go solve that one.

88
00:04:04.831 --> 00:04:07.548
Once you solve that one,
then I'll maybe give you another one.

89
00:04:07.548 --> 00:04:08.363
Nobody wants that.

90
00:04:08.363 --> 00:04:12.331
[LAUGH] People would definitely prefer to
get all the tightness matches at once.

91
00:04:12.331 --> 00:04:16.276
Or well, I guess maybe not, if it's
gonna be repeats or redundant ones but

92
00:04:16.276 --> 00:04:17.602
that's another topic.

93
00:04:17.602 --> 00:04:20.880
The point is usually it might seem
pointless to keep going with something

94
00:04:20.880 --> 00:04:23.955
like this, where it's like,
we're already in tightness match.

95
00:04:23.955 --> 00:04:25.333
Smashing what are you doing?

96
00:04:25.333 --> 00:04:26.099
Just stop working.

97
00:04:26.099 --> 00:04:29.316
But it's like, no actually, if you want
to give people nice error messages,

98
00:04:29.316 --> 00:04:32.001
multiple error messages, and
there's other type mismatches,

99
00:04:32.001 --> 00:04:34.219
you really should keep going
after a tight mismatch.

100
00:04:34.219 --> 00:04:37.588
So these, like other unifications, you
generally tend to want to proceed with.

101
00:04:37.588 --> 00:04:40.717
And like I said, there's a couple
different ways to handle this, but

102
00:04:40.717 --> 00:04:44.374
quite often, what you'll do when you get
to this point is you'll record a special

103
00:04:44.374 --> 00:04:46.250
type in here that's not quite concrete.

104
00:04:46.250 --> 00:04:48.375
And not quite a symlink and
also not quite null,

105
00:04:48.375 --> 00:04:50.991
but it's this fourth thing
that's called like an error.

106
00:04:50.991 --> 00:04:54.216
And error has its own special set of
unification rules that are kind of

107
00:04:54.216 --> 00:04:57.170
designed to be like,
just let me keep going and doing my thing.

108
00:04:57.170 --> 00:05:00.230
I know that we blew up here and
like this doesn't make sense.

109
00:05:00.230 --> 00:05:04.240
That we've reached this sort of
logical impossibility where this thing

110
00:05:04.240 --> 00:05:06.747
is trying to be two
different things at once.

111
00:05:06.747 --> 00:05:08.696
So we're not gonna pretend it's a string,

112
00:05:08.696 --> 00:05:10.866
because that could cause
problems downstream.

113
00:05:10.866 --> 00:05:12.299
We are gonna write down this is,

114
00:05:12.299 --> 00:05:15.442
like a the type of this thing is
a something bad happened, basically.

115
00:05:15.442 --> 00:05:18.855
And then in the different branches of
unify, you just sort of like handle that

116
00:05:18.855 --> 00:05:21.498
differently depending on what
it's trying to unify with.

117
00:05:21.498 --> 00:05:22.871
So not gonna get into that for.

118
00:05:22.871 --> 00:05:24.251
Purposes of this workshop.

119
00:05:24.251 --> 00:05:28.031
But just to be aware, this is the point
where, in a real production compiler,

120
00:05:28.031 --> 00:05:31.026
I wouldn't stop here and say,
forget about that last unify.

121
00:05:31.026 --> 00:05:31.905
It's pointless.

122
00:05:31.905 --> 00:05:35.605
I would, in fact, unify it and and
I also would have, not left this a string.

123
00:05:35.605 --> 00:05:38.114
I would have changed it to
some sort of error type.

124
00:05:38.114 --> 00:05:39.305
Okay, so we did the thing.

125
00:05:39.305 --> 00:05:42.866
We had a goal of one success and
one mismatch, and we achieved our goal.

126
00:05:42.866 --> 00:05:43.391
Fantastic.

127
00:05:43.391 --> 00:05:46.829
All right, to summarize part 5,
we talked about inferring conditionals.

128
00:05:46.829 --> 00:05:48.693
So we started off with just the ternary.

129
00:05:48.693 --> 00:05:52.408
We had a little bit of carryover from our
previous multiplication example where

130
00:05:52.408 --> 00:05:55.126
the question mark,
like right before the question mark,

131
00:05:55.126 --> 00:05:58.018
that had to be a bool that was hard coded,
no questions asked.

132
00:05:58.018 --> 00:06:01.925
But it was also a little bit different
than the multiplication because the two

133
00:06:01.925 --> 00:06:05.590
different branches didn't have to be
a number like they did in the case of

134
00:06:05.590 --> 00:06:07.534
the operands for exclamation point.

135
00:06:07.534 --> 00:06:09.949
But they did have to be
unified with each other.

136
00:06:09.949 --> 00:06:13.013
They have to be quote unquote identical,
essentially and

137
00:06:13.013 --> 00:06:16.336
then also they had to be unified
with the expression as a whole.

138
00:06:16.336 --> 00:06:19.601
So there was sort of a three-way
unification at no point in that

139
00:06:19.601 --> 00:06:21.892
unification or doing anything hardcoded.

140
00:06:21.892 --> 00:06:23.007
It's just like, yeah.

141
00:06:23.007 --> 00:06:26.603
The relationship these three things have
to have with each other and of course,

142
00:06:26.603 --> 00:06:29.459
there are opportunities for
tight mismatches there as we saw.

143
00:06:29.459 --> 00:06:33.117
Then we talked about inferring just the
function declaration without taking into

144
00:06:33.117 --> 00:06:34.025
account any calls.

145
00:06:34.025 --> 00:06:37.488
And we saw things like, we already have
considerations like the return type,

146
00:06:37.488 --> 00:06:39.697
the return statements,
and how those interact.

147
00:06:39.697 --> 00:06:42.806
So however many return statements
you have, you need a unify for

148
00:06:42.806 --> 00:06:45.743
every single one of those to
unify that with the return type,

149
00:06:45.743 --> 00:06:47.831
which can not only affect the return type.

150
00:06:47.831 --> 00:06:51.296
But also can be a source of tightness
matches if they happen to disagree.

151
00:06:51.296 --> 00:06:55.074
Then we got the argument types, then
of course the function body as a whole,

152
00:06:55.074 --> 00:06:58.807
which introduced our new concrete
type that has additional information.

153
00:06:58.807 --> 00:07:01.157
Which requires additional
branches in Unify,

154
00:07:01.157 --> 00:07:03.222
which we will start to see as we progress.

155
00:07:03.222 --> 00:07:06.858
And then finally we got into function
calls, where we saw that, yeah, not

156
00:07:06.858 --> 00:07:10.860
only does the function definition set the
and give you a way to affect these types.

157
00:07:10.860 --> 00:07:14.745
But also, as the calls participate in
the unification process, you can actually

158
00:07:14.745 --> 00:07:18.138
either end up changing the functions
type or causing type mismatches.

159
00:07:18.138 --> 00:07:23.020
Because the way that you know one call
site is doing it like disagrees with

160
00:07:23.020 --> 00:07:27.983
another call site or one call site
disagrees with the definition itself,

161
00:07:27.983 --> 00:07:29.600
which is what we saw here

