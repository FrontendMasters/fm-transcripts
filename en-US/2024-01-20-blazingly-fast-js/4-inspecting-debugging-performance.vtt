WEBVTT

1
00:00:00.500 --> 00:00:03.380
All right, next,
we're gonna open up the Chrome debugger.

2
00:00:03.380 --> 00:00:08.286
And it's really important that we look
at what's happening within our program,

3
00:00:08.286 --> 00:00:12.837
because we are going to first start off
by doing what is referred to as hotspot

4
00:00:12.837 --> 00:00:13.920
optimizations.

5
00:00:13.920 --> 00:00:17.827
Now, hotspot optimizations
are where you just simply look for

6
00:00:17.827 --> 00:00:20.791
the worst offender and
you try to fix that.

7
00:00:20.791 --> 00:00:23.957
Now, this isn't always the best
way to go about things, but

8
00:00:23.957 --> 00:00:27.992
it can just be really easy, low hanging
fruit that is pretty simple to fix, or

9
00:00:27.992 --> 00:00:31.621
it's gonna give you an idea into
how you should change your program.

10
00:00:31.621 --> 00:00:33.997
But often, just fixing the function,

11
00:00:33.997 --> 00:00:37.641
you can just distribute
the problem into many functions.

12
00:00:37.641 --> 00:00:39.958
And then yes,
your new function does look smaller, but

13
00:00:39.958 --> 00:00:41.699
you've just distributed the workload.

14
00:00:41.699 --> 00:00:44.968
So you don't always want to just
simply try to fix every hotspot.

15
00:00:44.968 --> 00:00:48.122
You want to kind of think about
what is the actual problem, and

16
00:00:48.122 --> 00:00:52.539
how can we solve the actual problem and
not just make this one look smaller?

17
00:00:52.539 --> 00:00:55.669
And so a good story about this is Yunong.

18
00:00:55.669 --> 00:00:58.891
If you don't know who Yunong is, great
guy, used to work at Netflix, by the way,

19
00:00:58.891 --> 00:01:00.080
he was on my team, by the way.

20
00:01:00.080 --> 00:01:03.970
And I used to use IntelliJ with Vim
motions and he convinced me to use Vim.

21
00:01:03.970 --> 00:01:08.120
Yeah, Vim, I think that we were in
version 6 back in the day or version 5.

22
00:01:08.120 --> 00:01:12.840
And so he was the catalyst for me using
Vim, changed my life, love Yunong.

23
00:01:12.840 --> 00:01:14.842
And when he got there, he said, Hey,

24
00:01:14.842 --> 00:01:18.170
has anyone actually checked
performance on our node servers?

25
00:01:18.170 --> 00:01:22.376
Because this is at the point where the
website was heavily investing into node,

26
00:01:22.376 --> 00:01:24.973
and no one actually ran
anything on the server.

27
00:01:24.973 --> 00:01:29.824
So he just ran a simple perf on
the server and 50% of the time

28
00:01:29.824 --> 00:01:34.595
in production,
it turns out we were deep merging objects.

29
00:01:34.595 --> 00:01:39.553
Somebody accidentally use lodash deep
merge instead of object dot assign.

30
00:01:39.553 --> 00:01:41.286
And that's the only thing we did.

31
00:01:41.286 --> 00:01:44.026
And so
it instantaneously made everything faster.

32
00:01:44.026 --> 00:01:47.974
So sometimes hotspot optimizations
are absolutely a beautiful thing because

33
00:01:47.974 --> 00:01:49.936
you're like, Look at that.

34
00:01:49.936 --> 00:01:52.896
I'm dumb, that's bad, fix it.

35
00:01:52.896 --> 00:01:54.776
And so they can be really,
really wonderful.

36
00:01:54.776 --> 00:01:56.716
But sometimes they can be misleading.

37
00:01:56.716 --> 00:01:59.934
So just something to always know about.

38
00:01:59.934 --> 00:02:02.804
All right, so we're gonna do the exact
same thing we have been doing.

39
00:02:02.804 --> 00:02:04.494
Make sure you have your log path correct.

40
00:02:04.494 --> 00:02:06.794
Again, you don't want to dirty
any of your previous results.

41
00:02:09.144 --> 00:02:13.434
We're gonna open up our little server, but
this time we're gonna add the inspect flag

42
00:02:13.434 --> 00:02:16.044
so that way we can actually
open up Chrome debugger.

43
00:02:16.044 --> 00:02:19.334
And we're gonna look at both
the performance and memory tab.

44
00:02:19.334 --> 00:02:22.239
If you don't have the performance
tab when you open it up,

45
00:02:22.239 --> 00:02:26.528
you probably aren't on node 20 and you're
probably on an older version of Chrome.

46
00:02:26.528 --> 00:02:30.578
So make sure you are somewhat up to
date and these things should be there.

47
00:02:30.578 --> 00:02:33.416
I think they've been there for
the last six to eight months,

48
00:02:33.416 --> 00:02:36.066
somewhere right around in that timeframe.

49
00:02:36.066 --> 00:02:38.749
For those that don't know
the difference between deep merge and

50
00:02:38.749 --> 00:02:40.755
assign, assign does key level assignment.

51
00:02:40.755 --> 00:02:44.623
So if you had an object that has A,
B, and C, and no matter what is on

52
00:02:44.623 --> 00:02:49.135
the right-hand side of those object keys,
it just simply assigns A, B, C.

53
00:02:49.135 --> 00:02:51.045
The deep merge would go,
Hey, what are you?

54
00:02:51.045 --> 00:02:51.675
You're a string?

55
00:02:51.675 --> 00:02:52.871
Okay, we can assign you over.

56
00:02:52.871 --> 00:02:53.825
You're an object.

57
00:02:53.825 --> 00:02:55.347
What are all of your keys?

58
00:02:55.347 --> 00:02:55.935
You're an array.

59
00:02:55.935 --> 00:02:57.995
Let's go through every
single value of your array.

60
00:02:57.995 --> 00:03:01.763
So it will deeply walk the object and
try to merge it over one by one and

61
00:03:01.763 --> 00:03:05.006
take two different shaped objects and
make them into one,

62
00:03:05.006 --> 00:03:08.370
doing rightmost objects
having highest priority.

63
00:03:08.370 --> 00:03:12.793
And so that's a lot more work than just
simply being like, I'm going to assign

64
00:03:12.793 --> 00:03:17.800
your keys over one object at a time, and
whoever had the last key in wins that key.

65
00:03:17.800 --> 00:03:19.815
So, obviously much more expensive.

66
00:03:21.365 --> 00:03:23.755
And usually deep merge
is done in JavaScript.

67
00:03:23.755 --> 00:03:28.836
Whereas object dot assign is a C++
method for you get the speed of allowing

68
00:03:28.836 --> 00:03:34.765
JavaScript the engine to do the JavaScript
the engine things, not you doing them.

69
00:03:34.765 --> 00:03:35.297
You don't want to do them.

70
00:03:35.297 --> 00:03:37.635
If you can avoid, don't do it.

71
00:03:37.635 --> 00:03:39.344
All right, so I'm going to run
these two things right here.

72
00:03:41.635 --> 00:03:42.233
Awesome.

73
00:03:42.233 --> 00:03:44.653
So I'm gonna take this, wait, actually I
don't even need to take that whole thing.

74
00:03:44.653 --> 00:03:45.833
Really, I just need this inspect flag.

75
00:03:45.833 --> 00:03:47.703
So what I'm gonna do is
I'm gonna jump over here.

76
00:03:47.703 --> 00:03:51.049
I'm gonna make sure I just set it
to testing, fix your log path, and

77
00:03:51.049 --> 00:03:53.863
I'm gonna go over to node and
add the inspect flag.

78
00:03:53.863 --> 00:03:56.653
This will just allow the server to
be created and we can attach to it.

79
00:03:58.273 --> 00:03:59.643
Awesome, so there you go.

80
00:03:59.643 --> 00:04:00.890
You get a little extra
information out here.

81
00:04:00.890 --> 00:04:04.921
This does slow down your server, so you
don't really wanna look at the results.

82
00:04:04.921 --> 00:04:08.594
We don't wanna visualize these results
cuz they'll just simply be worse.

83
00:04:08.594 --> 00:04:11.915
Cuz we are inspecting, it's running extra
hooks, it's looking for extra data, so

84
00:04:11.915 --> 00:04:13.084
it's not a big deal.

85
00:04:13.084 --> 00:04:15.554
Second, I'm gonna run the test client.

86
00:04:15.554 --> 00:04:17.584
I'll put a thousand clients on it for now.

87
00:04:17.584 --> 00:04:21.144
Cuz from our tests, it went 31,
36, and then sixty some.

88
00:04:21.144 --> 00:04:24.616
So I saw the failure started to
happen right around 1,000, so

89
00:04:24.616 --> 00:04:26.988
we'll just go with 1,000.

90
00:04:26.988 --> 00:04:27.868
Pretty easy to look at.

91
00:04:27.868 --> 00:04:28.768
So there we go.

92
00:04:28.768 --> 00:04:30.768
Next, I'm going to open
up a Chrome inspector.

93
00:04:30.768 --> 00:04:33.998
So if you don't know,
you can do chrome://inspect.

94
00:04:33.998 --> 00:04:35.953
I'm sure you might try to
do this from VS Code, but

95
00:04:35.953 --> 00:04:37.778
I don't think they have
all the tools in here.

96
00:04:37.778 --> 00:04:41.367
So I'm going to make sure that
this is all zoomed in nicely.

97
00:04:41.367 --> 00:04:42.507
All right, beautiful.

98
00:04:42.507 --> 00:04:43.197
So there you go.

99
00:04:43.197 --> 00:04:47.577
So now we have our
dedicated node debugger.

100
00:04:47.577 --> 00:04:51.949
If you don't know about that,
chrome://inspect works well and

101
00:04:51.949 --> 00:04:53.797
just select the dedicated.

102
00:04:53.797 --> 00:04:56.817
You can't really see this right here.

103
00:04:56.817 --> 00:04:57.737
There you go.

104
00:04:57.737 --> 00:05:00.150
Dedicated dev tools for node.

105
00:05:00.150 --> 00:05:00.910
Easy peasy.

106
00:05:00.910 --> 00:05:02.100
And then you can close this tab.

107
00:05:02.100 --> 00:05:03.350
You don't need it open anymore.

108
00:05:03.350 --> 00:05:05.830
We'll keep our original
measurements still open.

109
00:05:05.830 --> 00:05:08.670
So we're running right now,
it's been running for a while.

110
00:05:08.670 --> 00:05:12.030
And first,
let's start out with the performance tab.

111
00:05:12.030 --> 00:05:12.780
This is pretty great.

112
00:05:12.780 --> 00:05:15.183
So what I'm gonna do is I'm going
to open the performance tab and

113
00:05:15.183 --> 00:05:18.090
I'm gonna just hit record and I'm gonna
let it record for about ten seconds.

114
00:05:18.090 --> 00:05:21.756
You don't need a lot of data in
the performance tab because it doesn't

115
00:05:21.756 --> 00:05:25.711
create a flame graph,
it creates a timeline of what's happening.

116
00:05:25.711 --> 00:05:28.695
So we'll do that, ten seconds and
it's gonna take a second and

117
00:05:28.695 --> 00:05:30.471
it's gonna look like that.

118
00:05:30.471 --> 00:05:32.121
So this is everything
that's been happening.

119
00:05:32.121 --> 00:05:33.691
Every single call going up and down.

120
00:05:33.691 --> 00:05:36.927
I'm sure there's some fudge factor
that they do for speed purposes, but

121
00:05:36.927 --> 00:05:37.871
this is what you get.

122
00:05:37.871 --> 00:05:40.274
You can zoom in and
you can like, right here,

123
00:05:40.274 --> 00:05:42.372
I'm gonna zoom in on this weird block.

124
00:05:42.372 --> 00:05:43.782
Look at that.

125
00:05:43.782 --> 00:05:48.512
For 14 milliseconds,
we were collecting garbage.

126
00:05:48.512 --> 00:05:50.382
So that's not very good.

127
00:05:50.382 --> 00:05:53.601
How many frames do you think were
late because of this one garbage

128
00:05:53.601 --> 00:05:55.112
collection event?

129
00:05:55.112 --> 00:05:56.402
Probably a lot.

130
00:05:56.402 --> 00:05:58.682
If you click in the kind of,
for me, it's dark blue.

131
00:05:58.682 --> 00:06:00.258
I don't know what color it's gonna be for
you.

132
00:06:00.258 --> 00:06:05.138
If you click in the dark blue, it will
just ensure that everything is selected

133
00:06:05.138 --> 00:06:09.208
and then you can back it all the way up so
you have the full view in.

134
00:06:09.208 --> 00:06:11.528
So there we go, I'm not zoomed in at all.

135
00:06:11.528 --> 00:06:15.388
And on this bottom panel, instead of
having summary, look at bottom up.

136
00:06:15.388 --> 00:06:20.789
This is going to organize functions by
name, who's had the most self time.

137
00:06:20.789 --> 00:06:23.239
Now there's always two
times with something.

138
00:06:23.239 --> 00:06:25.179
So there's total time and self time.

139
00:06:25.179 --> 00:06:26.439
Let me explain the difference.

140
00:06:26.439 --> 00:06:29.247
Let's go back down to one of those garbage
collection events because it's actually

141
00:06:29.247 --> 00:06:31.259
really easy to show you
what's happening here.

142
00:06:31.259 --> 00:06:32.339
All right, there you go.

143
00:06:32.339 --> 00:06:36.649
So right now we are in playGame function,
it's 11.2 milliseconds.

144
00:06:36.649 --> 00:06:40.433
But playGame function didn't
really add anything to the time,

145
00:06:40.433 --> 00:06:44.437
because you notice that it has no
like plateaus on playGame itself.

146
00:06:44.437 --> 00:06:47.447
It just has another function on top of it,
update,

147
00:06:47.447 --> 00:06:51.518
which is literally saying it's doing
the exact same amount of time.

148
00:06:51.518 --> 00:06:54.338
This one has its own small
amount of self time.

149
00:06:54.338 --> 00:06:57.728
You can see right, right there.

150
00:06:57.728 --> 00:07:00.797
That's where update was
doing its own execution, and

151
00:07:00.797 --> 00:07:05.078
then garbage collector happened,
which notice that it's flat on the top.

152
00:07:05.078 --> 00:07:06.638
There's nothing else that it's calling.

153
00:07:06.638 --> 00:07:08.868
So this is time that it's running.

154
00:07:08.868 --> 00:07:13.898
So update ran for just a moment, playGame
effectively did not have any self time.

155
00:07:13.898 --> 00:07:15.428
And so that's kind of how you read that.

156
00:07:15.428 --> 00:07:19.608
The flat tops are where the time
is being spent in your program.

157
00:07:19.608 --> 00:07:22.091
Notice we're idle, we're idle for
a half millisecond,

158
00:07:22.091 --> 00:07:23.924
nothing else is running during that time.

159
00:07:23.924 --> 00:07:25.760
We're garbage collecting for
11 milliseconds,

160
00:07:25.760 --> 00:07:27.313
nothing else is running for that time.

161
00:07:27.313 --> 00:07:29.513
We're updating for 0.31 milliseconds.

162
00:07:29.513 --> 00:07:32.543
Nothing else is running at
that time other than update.

163
00:07:32.543 --> 00:07:37.933
So we go all the way back out,
all the way back out.

164
00:07:37.933 --> 00:07:39.998
And so
this is where something cool happens.

165
00:07:39.998 --> 00:07:43.388
Is that we're gonna go and we're gonna
pull this up and we're gonna look at that.

166
00:07:43.388 --> 00:07:47.998
So total time, remember, that's how
much time it appears in this chart.

167
00:07:47.998 --> 00:07:51.838
Self time is how much time is it at
the top of the chart actually executing.

168
00:07:51.838 --> 00:07:52.888
And what do we see?

169
00:07:52.888 --> 00:07:55.528
Well, the first thing I see
is that we're largely idle.

170
00:07:55.528 --> 00:07:56.738
Well, that's not awesome.

171
00:07:56.738 --> 00:07:58.888
That's not what we want to see.

172
00:07:58.888 --> 00:08:01.873
Second, we spent a lot of
time in the update method.

173
00:08:03.603 --> 00:08:04.723
That sucks.

174
00:08:04.723 --> 00:08:08.233
Thirdly, we spent a lot of
time collecting garbage.

175
00:08:08.233 --> 00:08:11.972
Fourth, we got registerDestroyHook,
init, destroy,

176
00:08:11.972 --> 00:08:15.723
playGame, tickRunner,
microtasks, listOnTimeout.

177
00:08:15.723 --> 00:08:17.173
They get smaller and smaller.

178
00:08:17.173 --> 00:08:19.001
They become less and less important.

179
00:08:19.001 --> 00:08:23.344
But right away, the first thing that we
can control I see, is update function.

180
00:08:23.344 --> 00:08:24.784
We know the function.

181
00:08:24.784 --> 00:08:26.354
Why is it taking time?

182
00:08:26.354 --> 00:08:27.924
We can try to go and look at it.

183
00:08:27.924 --> 00:08:30.681
Now, one thing you can do is you can
like double-click on this thing or

184
00:08:30.681 --> 00:08:32.384
double-click on our, sorry, the game.

185
00:08:32.384 --> 00:08:34.654
And it will try to,
it'll put these times out.

186
00:08:34.654 --> 00:08:39.599
I am not convinced these times are correct
because I just somehow doubt that adding

187
00:08:39.599 --> 00:08:42.896
two numbers together takes
a huge portion of the time,

188
00:08:42.896 --> 00:08:48.041
whereas adding these two numbers together
takes almost no portion of the time.

189
00:08:48.041 --> 00:08:50.382
I'm doubting hard right now, okay?

190
00:08:50.382 --> 00:08:53.401
This one's saying that a lot of
time is spent in the for loops.

191
00:08:53.401 --> 00:08:57.262
I've just never really used this as a good
way to gauge what's happening because

192
00:08:57.262 --> 00:08:59.271
again, I just don't trust the numbers.

