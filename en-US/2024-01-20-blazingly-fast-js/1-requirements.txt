WEBVTT

1
00:00:00.000 --> 00:00:04.121
So you are gonna need Rust, you're gonna
need Golang because I can't help but

2
00:00:04.121 --> 00:00:07.314
to throw every language I can
possibly use into any project.

3
00:00:07.314 --> 00:00:09.783
So installing Rust is incredibly simple,

4
00:00:09.783 --> 00:00:13.703
you Google install Rustlang it's
gonna take you to a shell script.

5
00:00:13.703 --> 00:00:17.452
You're gonna take that copy it, probably
give it pseudo privileges because you know

6
00:00:17.452 --> 00:00:20.786
scripts from the internet should always
just be installed at freewill, and

7
00:00:20.786 --> 00:00:21.425
there you go.

8
00:00:21.425 --> 00:00:22.543
And then same thing with Golang.

9
00:00:22.543 --> 00:00:27.240
You literally, Google install Golang,
and you'll be able to install Golang.

10
00:00:27.240 --> 00:00:32.606
Make sure you're at least at version
1.2.1 or higher, very important, okay?

11
00:00:32.606 --> 00:00:33.582
Rust has been mentioned.

12
00:00:33.582 --> 00:00:36.820
We haven't mentioned HTMX yet,
but we're doing pretty good.

13
00:00:36.820 --> 00:00:40.374
Please at least get the latest version
of Node or something pretty late,

14
00:00:40.374 --> 00:00:42.483
just 20 something that's good enough.

15
00:00:42.483 --> 00:00:46.554
Just be in the 20s because each node
version will have vastly different

16
00:00:46.554 --> 00:00:47.429
experiences.

17
00:00:47.429 --> 00:00:52.374
One thing I was kind of doing at work is
I had to iterate over very large sections

18
00:00:52.374 --> 00:00:54.822
of data for my job, and it was in node.

19
00:00:54.822 --> 00:00:57.379
And when I used node 18 versus node 20,

20
00:00:57.379 --> 00:01:00.793
there was like a several seconds
difference for using for

21
00:01:00.793 --> 00:01:04.653
each as opposed to a for
loop going over millions of rows of data.

22
00:01:04.653 --> 00:01:07.362
And so can things be different
between versions of node?

23
00:01:07.362 --> 00:01:08.080
Absolutely.

24
00:01:08.080 --> 00:01:11.830
So we're gonna all try to be on
the same-ish version, at least hopefully

25
00:01:11.830 --> 00:01:15.881
the mostly the same, I don't know the last
time I've updated my node 20, but

26
00:01:15.881 --> 00:01:18.260
it was probably a month ago so
be close enough.

27
00:01:18.260 --> 00:01:22.177
And then lastly here's really the only
thing you're gonna really wanna copy and

28
00:01:22.177 --> 00:01:25.229
pasta from this, there'll be
probably one or two other ones,

29
00:01:25.229 --> 00:01:26.799
which is all of this right here.

30
00:01:26.799 --> 00:01:30.345
That's really the only thing you're
gonna wanna have on your system.

31
00:01:30.345 --> 00:01:34.679
You're gonna just wanna clone this out
however you want and wherever you want.

32
00:01:34.679 --> 00:01:36.348
So I'll do literally the exact same thing.

33
00:01:36.348 --> 00:01:39.113
I'm gonna take all of that information and
I'm just gonna clone it out.

34
00:01:39.113 --> 00:01:42.358
It's gonna build some Rust
that takes a long time.

35
00:01:42.358 --> 00:01:44.429
My fan might start spinning here shortly.

36
00:01:48.528 --> 00:01:49.385
There it goes.

37
00:01:49.385 --> 00:01:51.332
We're building.
You can tell we're doing something.

38
00:01:55.191 --> 00:02:00.295
Did you guys hear that Rust recently
was adopted fully by Microsoft?

39
00:02:00.295 --> 00:02:00.935
&gt;&gt; Not fully.

40
00:02:00.935 --> 00:02:02.639
&gt;&gt; Yeah,
they're like really going all in on it.

41
00:02:02.639 --> 00:02:06.333
They've decided to really invest millions
of dollars, hire many Rust engineers.

42
00:02:06.333 --> 00:02:07.505
It's official.

43
00:02:07.505 --> 00:02:10.384
The amount of Rust jobs
have doubled in 2023.

44
00:02:10.384 --> 00:02:12.804
We're up to well over 21 positions.

45
00:02:12.804 --> 00:02:16.172
Not more than 23, but
it's really starting to happen.

46
00:02:16.172 --> 00:02:18.001
It's happening right now.

47
00:02:18.001 --> 00:02:22.380
So I'm gonna give everybody a few moments
to be able to get Rust installed,

48
00:02:22.380 --> 00:02:26.151
to be able to get Golang installed,
node version on the latest.

49
00:02:26.151 --> 00:02:30.807
There's a couple things he got to do,
so make sure it all happens.

50
00:02:30.807 --> 00:02:33.216
And then, of course,
you want it all built and everything.

51
00:02:33.216 --> 00:02:36.701
And if you use Neovim,
obviously bonus points,

52
00:02:36.701 --> 00:02:40.957
it does make your project 20%
faster just using Neovim.

53
00:02:40.957 --> 00:02:43.355
Vim is only like 10% vast or so.

54
00:02:43.355 --> 00:02:44.642
Sorry, yes?

55
00:02:44.642 --> 00:02:49.295
&gt;&gt; Is today's course gonna
be mainly focused on Node?

56
00:02:49.295 --> 00:02:52.628
&gt;&gt; Well, we'll be using Node
as our running platform and

57
00:02:52.628 --> 00:02:54.370
running everything off of.

58
00:02:54.370 --> 00:02:57.356
We won't be running in the browser,
and we won't be running Bun.

59
00:02:57.356 --> 00:02:58.913
Bun is obviously much different.

60
00:02:58.913 --> 00:03:02.071
The tools aren't as much mature.

61
00:03:02.071 --> 00:03:05.653
Maybe in a year could do something fun
with going over all the Bun tools and

62
00:03:05.653 --> 00:03:06.188
all that.

63
00:03:06.188 --> 00:03:10.761
The goal of today's course is to use
the tools that are easily available in

64
00:03:10.761 --> 00:03:13.565
Chrome to be able to
identify bottlenecks and

65
00:03:13.565 --> 00:03:17.650
be able to try to make good
performance changes in your code base.

66
00:03:17.650 --> 00:03:21.358
Because obviously there's better and
more in-depth tools being one of the most

67
00:03:21.358 --> 00:03:24.479
in-depth tools possible, but
it's not as easy to set up, right?

68
00:03:24.479 --> 00:03:27.864
Right now, I have to run perf
through a Docker container because

69
00:03:27.864 --> 00:03:30.573
I can't currently even get
it to work on just my OS.

70
00:03:30.573 --> 00:03:35.692
So I'm running things through an entire
roundabout way to get something to run.

71
00:03:35.692 --> 00:03:38.637
So it's not always just
the easiest to use, and so

72
00:03:38.637 --> 00:03:43.551
I didn't really wanna include anything
that's gonna have a lot of setup time, and

73
00:03:43.551 --> 00:03:48.136
which is gonna cause people to kind of
fall off and not be able to follow along.

74
00:03:48.136 --> 00:03:50.519
So there you go, yeah?

75
00:03:50.519 --> 00:03:55.215
&gt;&gt; What level of JavaScript are you gonna
need to know in order to do this course?

76
00:03:55.215 --> 00:03:55.738
&gt;&gt; All right, so

77
00:03:55.738 --> 00:03:58.280
what level of JavaScript are you
gonna need to know to do this course?

78
00:03:58.280 --> 00:04:00.126
Just basic proficiency.

79
00:04:00.126 --> 00:04:03.561
That's all you really,
if you understand how functions and

80
00:04:03.561 --> 00:04:06.589
classes work,
you know how you can pass them around,

81
00:04:06.589 --> 00:04:10.043
you can just use them normally,
then yes, that's enough.

82
00:04:10.043 --> 00:04:13.483
Like, I'm not gonna expect you to
know every single array method.

83
00:04:13.483 --> 00:04:15.374
We're not gonna be going
over meticulously.

84
00:04:15.374 --> 00:04:20.787
Again, I don't like those kinds of
optimizations, like don't use push, use X.

85
00:04:20.787 --> 00:04:24.523
It's like, yeah, that only makes sense
when there's a real problem with it.

86
00:04:24.523 --> 00:04:27.138
And that's usually not
because of the function,

87
00:04:27.138 --> 00:04:29.637
that's because of what
the function is doing.

88
00:04:29.637 --> 00:04:33.146
And so push versus setting
length by minus one, that's not,

89
00:04:33.146 --> 00:04:36.192
you're doing the same
operation just differently.

90
00:04:36.192 --> 00:04:37.741
You're not changing the problem.

91
00:04:37.741 --> 00:04:40.556
You're just changing how
you're invoking the problem.

92
00:04:40.556 --> 00:04:41.604
So, if that makes sense.

93
00:04:41.604 --> 00:04:44.414
You don't need a ton of JavaScript,
but you should be pretty good at it.

94
00:04:44.414 --> 00:04:46.451
You should be comfortable
writing JavaScript.

95
00:04:46.451 --> 00:04:47.942
All right, so two quick things.

96
00:04:47.942 --> 00:04:49.035
It's not really two quick things.

97
00:04:49.035 --> 00:04:50.569
It'll be about seven quick things.

98
00:04:50.569 --> 00:04:54.019
We're gonna be doing optimization
step by step and independently for

99
00:04:54.019 --> 00:04:57.876
the first couple, and then we're gonna
kind of figure out where the value is,

100
00:04:57.876 --> 00:04:59.647
what's going on with each change.

101
00:04:59.647 --> 00:05:02.035
We're also gonna be using
local host to test.

102
00:05:02.035 --> 00:05:04.547
Local host has its
obvious problems with it.

103
00:05:04.547 --> 00:05:06.513
It's never gonna quite
look like the real world.

104
00:05:06.513 --> 00:05:10.545
Your operating system does things that are
gonna probably be very different than if

105
00:05:10.545 --> 00:05:13.786
you're getting Internet packets
versus from yourself packets.

106
00:05:13.786 --> 00:05:16.294
It can still be used to do some testing,

107
00:05:16.294 --> 00:05:19.113
but it's not gonna quite
be the real world.

108
00:05:19.113 --> 00:05:23.564
Obviously, whenever you're doing any, you
know, performance optimizations, though,

109
00:05:23.564 --> 00:05:25.493
it should be bared out in the real world.

110
00:05:25.493 --> 00:05:26.703
You should be able to measure this.

111
00:05:26.703 --> 00:05:29.586
You should be able to understand it,
whatever way you collect data, and

112
00:05:29.586 --> 00:05:31.489
understand how fast your
endpoints are going.

113
00:05:31.489 --> 00:05:34.327
You should see real impacts because
if you only see it locally, but

114
00:05:34.327 --> 00:05:37.789
you don't see in production, it just
means you didn't really make any change.

115
00:05:37.789 --> 00:05:38.806
That's worthwhile.

116
00:05:38.806 --> 00:05:44.129
It doesn't mean that change won't be
worthwhile at some point, it just may

117
00:05:44.129 --> 00:05:50.129
not be worthwhile at the time, just due to
how it works locally versus in production.

118
00:05:50.129 --> 00:05:54.688
And second off,
we're gonna all get different results.

119
00:05:54.688 --> 00:05:57.182
We're all running on different computers.

120
00:05:57.182 --> 00:06:00.954
I will get different results than I
did yesterday running these things.

121
00:06:00.954 --> 00:06:05.281
And so, I tried not to put any
hard numbers in this presentation,

122
00:06:05.281 --> 00:06:09.307
because depends on how many
programs I'm gonna be running.

123
00:06:09.307 --> 00:06:14.208
I wasn't planning on running
this website locally, well,

124
00:06:14.208 --> 00:06:17.198
I'm currently running it locally.

125
00:06:17.198 --> 00:06:18.939
So, I don't know what
that does to performance.

126
00:06:18.939 --> 00:06:20.224
I don't know what that does.

127
00:06:20.224 --> 00:06:24.267
I also have a LSP running right now, or
two, or three or four LSPs running, so

128
00:06:24.267 --> 00:06:27.647
I have no idea how that's gonna
affect measuring performance.

129
00:06:27.647 --> 00:06:28.408
So in general,

130
00:06:28.408 --> 00:06:32.335
measuring locally has that effect as well
as you're not on an isolated system.

131
00:06:32.335 --> 00:06:34.210
You're not on a system
that's just doing one thing.

132
00:06:34.210 --> 00:06:36.534
You're on a system that's doing,
who knows amount of items.

133
00:06:36.534 --> 00:06:39.927
So you can't, it's very hard to
reproduce the same thing twice.

134
00:06:39.927 --> 00:06:44.204
But it's very obvious when you've made a
substantial improvement in the direction,

135
00:06:44.204 --> 00:06:46.313
because even though the numbers may vary,

136
00:06:46.313 --> 00:06:49.315
the results keep showing some
same proportional movement.

137
00:06:49.315 --> 00:06:51.050
So just some things to think about.

138
00:06:51.050 --> 00:06:52.451
I also have two three monitors.

139
00:06:52.451 --> 00:06:54.028
I never have three monitors.

140
00:06:54.028 --> 00:06:57.596
I have this one, this one and this one
over here, and I don't ever have 4k going.

141
00:06:57.596 --> 00:06:58.884
So how does that affect it?

142
00:06:58.884 --> 00:06:59.818
I have no idea.

143
00:06:59.818 --> 00:07:01.239
And again, no micro benchmarks.

144
00:07:01.239 --> 00:07:04.497
We already talked about this ridiculous,
all right?

145
00:07:04.497 --> 00:07:05.408
I'm also not very good at planning.

146
00:07:05.408 --> 00:07:09.414
So every single step of the way,
every single change we're gonna make all

147
00:07:09.414 --> 00:07:13.486
the optimizations will be available
in branches first off, second off and

148
00:07:13.486 --> 00:07:14.146
third off.

149
00:07:14.146 --> 00:07:16.663
So you'll be able to kind of follow along,
so

150
00:07:16.663 --> 00:07:20.706
if you can't quite get one to work
locally, can't get the test to pass,

151
00:07:20.706 --> 00:07:24.182
you can just jump into the next branch and
continue on with us.

152
00:07:24.182 --> 00:07:27.718
So that way,
you don't get left behind at all.

153
00:07:27.718 --> 00:07:31.669
I don't think the programming is
honestly as important as just going over

154
00:07:31.669 --> 00:07:34.918
the topics, going through the motions and
doing these, and

155
00:07:34.918 --> 00:07:38.568
going through like the reasoning
of why we're gonna do something.

156
00:07:38.568 --> 00:07:42.629
Cuz at the end of the day, I'm sure all of
you are great programmers or good enough,

157
00:07:42.629 --> 00:07:45.194
and you will be able to do
these changes by yourself.

158
00:07:45.194 --> 00:07:48.144
It's really the reasoning
that's more important.

159
00:07:48.144 --> 00:07:50.350
So if you fall behind, that's okay.

160
00:07:50.350 --> 00:07:52.319
Jump on another branch.

161
00:07:52.319 --> 00:07:53.046
It's okay.

