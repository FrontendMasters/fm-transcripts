WEBVTT

1
00:00:00.200 --> 00:00:04.736
Now it kinda seems like we're starting to
approach a bit of a problem, which is any

2
00:00:04.736 --> 00:00:09.900
updates we're making at this point,
we're fighting over not a lot of wins.

3
00:00:09.900 --> 00:00:11.674
And so
we can increase the amount of stuff.

4
00:00:11.674 --> 00:00:12.232
Look at that.

5
00:00:12.232 --> 00:00:13.976
Now our ratio's bounced all the way up.

6
00:00:13.976 --> 00:00:16.582
Goes to show, hard to trust anything.

7
00:00:16.582 --> 00:00:17.878
We're going out of control.

8
00:00:17.878 --> 00:00:19.938
We're going out of control.
It's going way up!

9
00:00:19.938 --> 00:00:22.754
So who knows what's happening there,
but we'll just stop it anyways.

10
00:00:22.754 --> 00:00:24.239
Maybe we didn't measure
the other ones long enough.

11
00:00:24.239 --> 00:00:27.836
But either way, we're looking like we're
starting to get something happening.

12
00:00:27.836 --> 00:00:29.189
At this point, we've made an improvement.

13
00:00:29.189 --> 00:00:30.833
We can see that it's better, but

14
00:00:30.833 --> 00:00:34.074
we're still not really seeing any
sort of change in our program.

15
00:00:34.074 --> 00:00:37.580
So I think there's only a couple
kind of answers we have to do.

16
00:00:37.580 --> 00:00:40.634
One, we can try increasing the amount
of connections and saying, okay,

17
00:00:40.634 --> 00:00:43.780
let's bring down this thing and
really make sure we're under load.

18
00:00:43.780 --> 00:00:45.457
Does it actually make
a difference at a higher level?

19
00:00:45.457 --> 00:00:48.165
Can we go to 3,000 connections and
see what happens?

20
00:00:48.165 --> 00:00:51.286
Or B, at this point, we can just say,

21
00:00:51.286 --> 00:00:57.500
our only goal is to improve our program,
and damned be current metrics.

22
00:00:57.500 --> 00:01:00.359
We just wanna see all of our
processing be as small as possible.

23
00:01:00.359 --> 00:01:02.299
Cuz you could imagine that at some point,

24
00:01:02.299 --> 00:01:05.449
you will be integrating with
other programs, being slower.

25
00:01:05.449 --> 00:01:07.599
And so I kinda like the second approach.

26
00:01:07.599 --> 00:01:10.589
For me, this is kinda the fun side.

27
00:01:10.589 --> 00:01:14.163
And I've had to do some internal
projects at my job where we have to just

28
00:01:14.163 --> 00:01:17.859
simply make it as fast as possible
because we're about to be integrating

29
00:01:17.859 --> 00:01:19.569
into a very large library.

30
00:01:19.569 --> 00:01:23.290
And so we find every single way possible
to make it use as little memory,

31
00:01:23.290 --> 00:01:27.475
memory pull things out, do every single
trick in the book to make it quick.

32
00:01:27.475 --> 00:01:29.873
Cuz if you do not do it that way,
your program's gonna be slow.

33
00:01:29.873 --> 00:01:32.842
Now, this doesn't always happen,
of course, right?

34
00:01:32.842 --> 00:01:35.326
Typically, when you're working on
anything, you just kinda throw things in.

35
00:01:35.326 --> 00:01:39.626
But my previous project, I had to do
stuff with, we had a CSV that when it got

36
00:01:39.626 --> 00:01:44.272
generated, it got so big I couldn't stand
up a node instance internal to Netflix

37
00:01:44.272 --> 00:01:47.516
without it falling over with
two CSVs being generated.

38
00:01:47.516 --> 00:01:52.630
And so having to just play the game of,
how can we make this thing as efficient as

39
00:01:52.630 --> 00:01:57.837
possible, can be very beneficial,
especially as your scale starts going up.

40
00:01:57.837 --> 00:02:01.327
And all of a sudden, it went from
generating one CSV to generating ten CSVs

41
00:02:01.327 --> 00:02:04.106
and not falling over by just
being really aware of memory.

42
00:02:04.106 --> 00:02:06.631
Now, unfortunately, we won't be doing
any of those fun memory techniques.

43
00:02:06.631 --> 00:02:11.443
But for this one, let's start just looking
at what is left to kinda clean up to

44
00:02:11.443 --> 00:02:15.680
really just tighten up our program and
make it the best as possible.

45
00:02:15.680 --> 00:02:17.959
&gt;&gt; First,
I have to call out this awesome comment.

46
00:02:17.959 --> 00:02:19.464
Writing in Rust is really a spiral.

47
00:02:19.464 --> 00:02:24.428
I'm not sure if it's a spiral upward or
downward yet.

48
00:02:24.428 --> 00:02:25.324
&gt;&gt; [LAUGH] That was really great.

49
00:02:25.324 --> 00:02:30.171
I really hope everyone heard that comment
cuz that was [SOUND], it was a beautiful,

50
00:02:30.171 --> 00:02:31.444
beautiful comment.

51
00:02:31.444 --> 00:02:33.022
Which direction is that spiral?

52
00:02:33.022 --> 00:02:33.700
We still don't know.
But

53
00:02:33.700 --> 00:02:36.630
what matters is that
the spiral is happening.

54
00:02:36.630 --> 00:02:39.897
So let's continue on
with our notions here.

55
00:02:39.897 --> 00:02:43.662
So we're gonna kinda start covering
some next kinda fun topics.

56
00:02:43.662 --> 00:02:48.723
And the big thing and the hard part about
this is that these topics I have yet, like

57
00:02:48.723 --> 00:02:54.168
in this example on my local host, I've
really yet to show any real difference.

58
00:02:54.168 --> 00:02:58.969
But six months ago and a year ago using
programs that are running on the server,

59
00:02:58.969 --> 00:03:01.342
I've seen huge differences.

60
00:03:01.342 --> 00:03:03.812
And so are we gonna see something locally?

61
00:03:03.812 --> 00:03:04.732
Probably not.

62
00:03:04.732 --> 00:03:08.026
Will you be able to reach for this in
your tool bag as a way to really make big

63
00:03:08.026 --> 00:03:10.738
memory wins, and really,
in the end, performance wins?

64
00:03:10.738 --> 00:03:14.327
Probably, especially on servers with less
and less cores than our modern one here.

65
00:03:14.327 --> 00:03:16.831
So can we improve our program
based on what we now understand?

66
00:03:16.831 --> 00:03:18.700
Well, we understand a lot of things,
right?

67
00:03:18.700 --> 00:03:21.504
That all of our time is
spent in update and run.

68
00:03:21.504 --> 00:03:22.600
And what about memory?

69
00:03:22.600 --> 00:03:24.020
Where's all of our memory being ran at?

70
00:03:24.020 --> 00:03:25.934
Do we even know where that is?

71
00:03:25.934 --> 00:03:29.680
So here, we've never actually even
checked where our memory was.

72
00:03:29.680 --> 00:03:30.781
Poor form, people.

73
00:03:31.861 --> 00:03:33.281
Let's just make sure we know.

74
00:03:33.281 --> 00:03:33.954
Man, I did this backwards.

75
00:03:33.954 --> 00:03:34.955
It's driving me nuts.

76
00:03:37.240 --> 00:03:41.134
Let's take this memory and, yep,
see, we can't do it backwards.

77
00:03:41.134 --> 00:03:42.137
It's just not ready for it.

78
00:03:42.137 --> 00:03:45.254
It's just not ready to
go backwards like that.

79
00:03:45.254 --> 00:03:45.890
There we go.

80
00:03:45.890 --> 00:03:47.973
All right, so we're gonna do this.

81
00:03:47.973 --> 00:03:49.474
We're gonna look at
where all the memory is.

82
00:03:49.474 --> 00:03:51.056
I think this should be our shape,

83
00:03:51.056 --> 00:03:54.445
but just to make sure, cuz we've made
a couple changes to our program,

84
00:03:54.445 --> 00:03:57.287
let's just make sure that we
have the same shape of memory.

85
00:03:57.287 --> 00:04:01.758
I don't wanna make any guesstimates or
some false assumptions here, but

86
00:04:01.758 --> 00:04:04.581
I bet you it's gonna
probably look like this.

87
00:04:04.581 --> 00:04:08.469
And the next couple changes
are gonna probably be both great,

88
00:04:11.476 --> 00:04:16.062
And very disappointing,
all at the same time.

89
00:04:16.062 --> 00:04:20.630
I love those kinda changes, or
when you do them, afterwards,

90
00:04:20.630 --> 00:04:22.795
you feel bad about yourself.

91
00:04:22.795 --> 00:04:25.050
That's really where the big Ws happen,

92
00:04:25.050 --> 00:04:29.365
because you know you've committed
potentially some programming sins, but

93
00:04:29.365 --> 00:04:32.605
nonetheless, they're
great programming sins.

94
00:04:32.605 --> 00:04:36.255
Yeah, someone's saying, hey, what do you
do if you're gonna be doing memory leaks?

95
00:04:36.255 --> 00:04:37.755
And someone's suggesting Valgrind.

96
00:04:37.755 --> 00:04:41.627
Another big technique,
especially when it comes to JavaScript is,

97
00:04:41.627 --> 00:04:44.980
you don't have to use Valgrind
if you're just doing that.

98
00:04:44.980 --> 00:04:48.141
You can use heap snapshots if you really
do have an actual memory leak and

99
00:04:48.141 --> 00:04:49.839
you can watch your memory just run up.

100
00:04:49.839 --> 00:04:54.752
Do heap snapshot, wait a minute, do heap
snapshot, wait a minute, do heap snapshot.

101
00:04:54.752 --> 00:04:57.235
And then you can actually look
at the diffs between them or

102
00:04:57.235 --> 00:04:59.213
the objects that stayed
alive between them.

103
00:04:59.213 --> 00:05:02.768
And if you see one object type keep
growing, you have a pretty good idea of

104
00:05:02.768 --> 00:05:06.056
where you had accidentally messed up,
and so you can follow that.

105
00:05:06.056 --> 00:05:11.075
So we're not trying to solve
any of that stuff right now.

106
00:05:11.075 --> 00:05:12.358
That is not our goal.

107
00:05:12.358 --> 00:05:17.522
So looks like if we look at our stuff,
pretty much at this point in our program,

108
00:05:17.522 --> 00:05:21.455
exclusively, we're creating
all of our memory.

109
00:05:21.455 --> 00:05:24.013
So this is good to know,
this is good to see.

110
00:05:24.013 --> 00:05:26.699
Let's try to prevent that from happening.

111
00:05:26.699 --> 00:05:29.474
Let's reduce the amount
of memory we're creating.

