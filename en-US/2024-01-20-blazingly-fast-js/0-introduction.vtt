WEBVTT

1
00:00:00.394 --> 00:00:04.477
We're not gonna do really much of
an intro, we're just gonna get moving.

2
00:00:04.477 --> 00:00:07.282
And so this is the only thing I really
wanted to kind of point out and

3
00:00:07.282 --> 00:00:09.590
then a couple other things
cuz I'm always off by one.

4
00:00:09.590 --> 00:00:13.922
But this is one of my favorite people out
in the Twitter space is Casey Moratori,

5
00:00:13.922 --> 00:00:14.837
as he is called.

6
00:00:14.837 --> 00:00:16.817
And I just wanted to
read this bottom part,

7
00:00:16.817 --> 00:00:20.504
which says people start to use the word
optimization as if it means thinking even

8
00:00:20.504 --> 00:00:22.557
briefly about how efficient something is.

9
00:00:22.557 --> 00:00:27.006
And at that point, quotes like, premature
optimization is the root of all evil,

10
00:00:27.006 --> 00:00:31.339
are very damaging because they were not
talking about that meaning of the word.

11
00:00:31.339 --> 00:00:34.909
They were talking about hand optimizing
assembly and stuff like that.

12
00:00:34.909 --> 00:00:39.465
There's no way Tony Hoare or Knuth would
have ever told you number one on your list

13
00:00:39.465 --> 00:00:44.088
was premature optimization, yet that is
what people started thinking it means.

14
00:00:44.088 --> 00:00:47.538
And so, you always hear this anytime
you try to make something fast or

15
00:00:47.538 --> 00:00:49.560
you talk about making something quick,

16
00:00:49.560 --> 00:00:52.905
you hear the premature optimization
is the root of all evil quote.

17
00:00:52.905 --> 00:00:57.483
And perhaps, just perhaps,
maybe not that correct.

18
00:00:57.483 --> 00:00:59.185
And so good thing to think about.

19
00:00:59.185 --> 00:01:02.794
Casey, if you wanna go give Casey you
follow, good guy Casey, appreciated him.

20
00:01:02.794 --> 00:01:06.835
Welcome to JavaScript performance,
is this an oxymoron?

21
00:01:06.835 --> 00:01:09.525
Maybe, maybe it's not, we'll find out.

22
00:01:09.525 --> 00:01:13.582
So anyways, fast is kind of relative,
so that term doesn't mean anything.

23
00:01:13.582 --> 00:01:17.393
So if you're gonna make JavaScript fast,
you can always have fast JavaScript.

24
00:01:17.393 --> 00:01:20.896
Now will JavaScript ever
be as fast as Go or Rust?

25
00:01:20.896 --> 00:01:25.127
Probably not in our lifetime or anyone's
lifetime, cuz it's just not the kind of

26
00:01:25.127 --> 00:01:28.701
language to go that kind of speed,
but can it be fast comparatively?

27
00:01:28.701 --> 00:01:32.220
Absolutely, you've seen all the bench
markings in the world where one framework

28
00:01:32.220 --> 00:01:35.383
is five times faster than another
framework, and you see it all the time.

29
00:01:35.383 --> 00:01:37.379
So fast does have meaning and

30
00:01:37.379 --> 00:01:43.128
we are gonna try to relatively make our
JavaScript significantly faster, okay?

31
00:01:43.128 --> 00:01:45.352
And we're gonna have a lot of
fun techniques and all that.

32
00:01:45.352 --> 00:01:46.726
All right, so what is this course about?

33
00:01:46.726 --> 00:01:49.989
Well, it says much about JavaScript
fundamentals as it is about performance.

34
00:01:49.989 --> 00:01:52.890
If you stick through the whole course,
you're gonna learn a lot about

35
00:01:52.890 --> 00:01:55.217
how JavaScript hopefully
works underneath the hoods.

36
00:01:55.217 --> 00:01:58.883
These skills will be partially
transferable or mostly transferable to any

37
00:01:58.883 --> 00:02:03.463
GC-based language, because similar
concepts exist kind of everywhere.

38
00:02:03.463 --> 00:02:05.766
So if you go to Bun,
same thing's gonna happen.

39
00:02:05.766 --> 00:02:08.175
You're gonna be able to apply
a lot of the same techniques,

40
00:02:08.175 --> 00:02:11.032
cuz Bun is still JSC underneath the hood,
which is still JavaScript.

41
00:02:11.032 --> 00:02:12.665
You'll be able to use some
of these things in Go.

42
00:02:12.665 --> 00:02:14.587
And we're not gonna be
talking about the DOM today.

43
00:02:14.587 --> 00:02:17.634
This is not about how to make
rendering order fantastic.

44
00:02:17.634 --> 00:02:20.898
This is not about any sort of paint
optimizations, anything like that.

45
00:02:20.898 --> 00:02:24.772
You're gonna need to get Ken Wheeler
in here if you wanna hear about that.

46
00:02:24.772 --> 00:02:28.835
It will hopefully make you write better
code, because at the end of the day,

47
00:02:28.835 --> 00:02:31.899
things that feel really good
are just awesome products.

48
00:02:31.899 --> 00:02:34.550
If you've used Twitter on your phone and
just in the Chrome browser,

49
00:02:34.550 --> 00:02:36.345
it crashes about every
fourth time you use it.

50
00:02:36.345 --> 00:02:38.554
Because it runs out of memory and
the thing just locks up and

51
00:02:38.554 --> 00:02:40.417
then it just completely
explodes on your phone.

52
00:02:40.417 --> 00:02:42.655
And so that's really annoying.

53
00:02:42.655 --> 00:02:45.446
I want to be able to just use
something without having it

54
00:02:45.446 --> 00:02:48.065
just completely hard shut
down every single time.

55
00:02:48.065 --> 00:02:52.244
We're not gonna deep dive into using the
tool Perf or Chrome Tracing or V8 Tracing.

56
00:02:52.244 --> 00:02:57.528
We may hit like tracing GC or
trace GC as a node option for a moment.

57
00:02:57.528 --> 00:02:59.958
We're not gonna do anything
into the deeper levels.

58
00:02:59.958 --> 00:03:02.502
And we're not gonna really talk
about any micro optimization.

59
00:03:02.502 --> 00:03:06.361
There's gonna be one moment where I'll
show you a micro benchmark to make

60
00:03:06.361 --> 00:03:07.676
a point, but that is it.

61
00:03:07.676 --> 00:03:10.383
Micro benchmarks are largely deceiving.

62
00:03:10.383 --> 00:03:13.367
You can make pretty much anything look
fast if you work hard enough with

63
00:03:13.367 --> 00:03:14.339
the micro benchmark.

64
00:03:14.339 --> 00:03:16.765
So we're not gonna be doing any of that.

65
00:03:16.765 --> 00:03:20.337
And we're also gonna not do any sort of
like, hey, when you create an object,

66
00:03:20.337 --> 00:03:23.774
always have your keys in the same order,
always have the same types.

67
00:03:23.774 --> 00:03:26.144
We're not gonna be talking about
that type of optimization either.

68
00:03:26.144 --> 00:03:27.790
That's a series of tricks
that are applicable,

69
00:03:27.790 --> 00:03:28.962
that can be really, really good.

70
00:03:28.962 --> 00:03:31.349
But in five years,
are they still gonna be good?

71
00:03:31.349 --> 00:03:33.884
We don't know, we don't know what
kind of new achievements there are.

72
00:03:33.884 --> 00:03:35.504
We don't know what,
how things are gonna be done.

73
00:03:35.504 --> 00:03:37.321
Think about all the dumb
things you used to do,

74
00:03:37.321 --> 00:03:39.254
like setting an array length to be zero.

75
00:03:39.254 --> 00:03:42.864
Used to be the quickest way to empty
an array rather than creating a new array.

76
00:03:42.864 --> 00:03:45.266
If you have short-lived objects,
is that still a thing today?

77
00:03:45.266 --> 00:03:46.339
Probably not.

78
00:03:46.339 --> 00:03:51.235
And so it's like, now you have a whole
different way you have to think about

79
00:03:51.235 --> 00:03:55.590
things, comparatively to the old
wisdom of minusing length by one

80
00:03:55.590 --> 00:03:58.722
to pop something off as
opposed to calling pop.

81
00:03:58.722 --> 00:04:01.002
There's all sorts of dumb things
that we used to do in JavaScript try

82
00:04:01.002 --> 00:04:01.562
to make it fast.

83
00:04:01.562 --> 00:04:05.462
So I don't wanna go over any of those
things cuz they're not as exciting, right,

84
00:04:05.462 --> 00:04:07.162
and they just tend to fade.

85
00:04:07.162 --> 00:04:10.802
All right, long rambling intro,
pretty much done, there you go.

86
00:04:10.802 --> 00:04:12.289
Hopefully, everybody's excited about that.

