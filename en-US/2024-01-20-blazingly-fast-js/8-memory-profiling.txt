WEBVTT

1
00:00:00.280 --> 00:00:05.090
So let's create a second
optimization branch.

2
00:00:05.090 --> 00:00:09.040
And let's try to find
another optimization, okay?

3
00:00:09.040 --> 00:00:10.860
So we're gonna do something
a little bit different this time.

4
00:00:10.860 --> 00:00:13.392
I'm gonna go back over here.

5
00:00:13.392 --> 00:00:13.968
Again, we're just branched.

6
00:00:13.968 --> 00:00:16.432
We're in a clean state, so
anyone can start with this one.

7
00:00:16.432 --> 00:00:19.260
And I'm gonna make sure
you have your nice path.

8
00:00:20.280 --> 00:00:22.921
Correctly done.
So I'm just gonna call this one testing,

9
00:00:22.921 --> 00:00:23.426
right?

10
00:00:23.426 --> 00:00:27.844
And I'm gonna go inspect, I'm gonna launch
that server and let's go backwards.

11
00:00:27.844 --> 00:00:28.419
Did I see it?

12
00:00:28.419 --> 00:00:29.910
No, okay, good.
I just wanna make sure I didn't.

13
00:00:29.910 --> 00:00:31.000
I thought I saw a bunch of fares.

14
00:00:31.000 --> 00:00:32.980
I'm gonna just run 1,000
connections again, right?

15
00:00:32.980 --> 00:00:37.062
That we are starting to get a nice good
overload on our server at about 1,000.

16
00:00:37.062 --> 00:00:38.850
I'm gonna jump back over here.

17
00:00:38.850 --> 00:00:41.366
And instead of going on
the Pro Performance tab.

18
00:00:41.366 --> 00:00:42.576
Let's jump over into the memory tab.

19
00:00:42.576 --> 00:00:45.676
And then we'll do
the performance afterwards.

20
00:00:45.676 --> 00:00:47.656
So I'm gonna let this thing run for
a while.

21
00:00:47.656 --> 00:00:50.766
The longer you let the memory one run for
the better.

22
00:00:50.766 --> 00:00:52.558
And by the way,
you probably got hit here actually,

23
00:00:52.558 --> 00:00:55.276
I'm gonna stop this you probably
got hit with this screen first.

24
00:00:55.276 --> 00:00:58.206
Don't do heap snapshot down
to an allocation timeline.

25
00:00:58.206 --> 00:01:00.417
Let's first start with
allocation sampling.

26
00:01:00.417 --> 00:01:03.797
So allocation sampling is
a lot like how PerfTool works.

27
00:01:03.797 --> 00:01:06.353
Imagine that as we allocate come in,
every so

28
00:01:06.353 --> 00:01:10.879
much memory that's come through the
system, we're gonna take a sample of it.

29
00:01:10.879 --> 00:01:12.405
Where did you come from?

30
00:01:12.405 --> 00:01:13.227
Where did you go?

31
00:01:13.227 --> 00:01:14.817
Where'd you come from?
Cotton Eye Joe, right?

32
00:01:14.817 --> 00:01:17.700
Just grab that, put it in there,
put it into a stack and go, okay,

33
00:01:17.700 --> 00:01:18.588
we have one object.

34
00:01:18.588 --> 00:01:20.178
And then maybe thousands
of more objects come in.

35
00:01:20.178 --> 00:01:21.858
It's come through, grabs another one.

36
00:01:21.858 --> 00:01:24.108
So you really want this to run for
a while.

37
00:01:24.108 --> 00:01:29.292
The longer you can run it,
the more rare events will also show up.

38
00:01:29.292 --> 00:01:33.189
The more statistically sound your memory
kinda allocation scheme will look.

39
00:01:33.189 --> 00:01:36.568
So I'm gonna let this run for
about a minute longer.

40
00:01:36.568 --> 00:01:41.629
&gt;&gt; They're just asking if you could detect
major or minor GC in performance but

41
00:01:41.629 --> 00:01:45.121
that's kinda what you're gonna get into,
right?

42
00:01:45.121 --> 00:01:45.712
&gt;&gt; We're gonna look at just memory.

43
00:01:45.712 --> 00:01:48.580
We're not gonna look, I mean,
we're gonna measure garbage collection.

44
00:01:48.580 --> 00:01:54.492
The performance tool on node is not
as good as it is in the browser,

45
00:01:54.492 --> 00:01:57.081
it just isn't as complete.

46
00:01:57.081 --> 00:02:00.921
We can throw a little trace GC and see
how often these things are happening and

47
00:02:00.921 --> 00:02:05.121
we can actually disambiguate between the
two and how long they're taking, but for

48
00:02:05.121 --> 00:02:06.801
now, we're just gonna do this.

49
00:02:06.801 --> 00:02:10.197
This will give us a pretty good indication
as to where memory's being spent.

50
00:02:14.951 --> 00:02:17.382
&gt;&gt; So audio is good for the most part.

51
00:02:17.382 --> 00:02:18.075
&gt;&gt; Yeah.

52
00:02:18.075 --> 00:02:21.626
&gt;&gt; The only thing that's hurting us
is that you do end of next step.

53
00:02:21.626 --> 00:02:23.193
&gt;&gt; Okay, so don't back step.

54
00:02:24.233 --> 00:02:26.213
Can I walk off the side?

55
00:02:26.213 --> 00:02:27.743
Okay, just checking.

56
00:02:27.743 --> 00:02:29.843
All right, I'll try to stand still.

57
00:02:29.843 --> 00:02:30.833
Firm.

58
00:02:30.833 --> 00:02:31.333
Ready?

59
00:02:32.724 --> 00:02:33.938
There we go.
All right, I'm gonna stop this.

60
00:02:33.938 --> 00:02:34.583
So there you go.

61
00:02:34.583 --> 00:02:37.151
This is our memory graph.

62
00:02:37.151 --> 00:02:37.948
Look at what we see right here.

63
00:02:37.948 --> 00:02:41.507
So I'm just gonna kinda go through
it much like the other graphs.

64
00:02:41.507 --> 00:02:44.709
Every function that was
involved along the way to

65
00:02:44.709 --> 00:02:47.217
the allocation is a part of the stack.

66
00:02:47.217 --> 00:02:53.917
At the tippy top, the flat areas,
that is where the memory was allocated at.

67
00:02:53.917 --> 00:02:55.054
And so you've just kinda
got to keep that in mind.

68
00:02:55.054 --> 00:02:59.796
So I can see right now, play games right
here, we allocate a lot of memory in

69
00:02:59.796 --> 00:03:04.565
the play game region, but most of it
is not play game, it's around these.

70
00:03:04.565 --> 00:03:07.896
I can also see over here that a lot of
these are on connection, socket, socket,

71
00:03:07.896 --> 00:03:11.877
duplex, right, start loop, right, right,
handle upgrade, complete upgrade, socket,

72
00:03:11.877 --> 00:03:13.004
socket, socket.

73
00:03:13.004 --> 00:03:16.453
So I'm gonna call this region WebSocket,
okay?

74
00:03:16.453 --> 00:03:19.824
So this is WebSocket creating
JavaScript memory region over here.

75
00:03:19.824 --> 00:03:21.294
If I look at this.

76
00:03:21.294 --> 00:03:26.495
I see, okay, play game, game,
child set level, error, add chidings.

77
00:03:26.495 --> 00:03:27.977
I'm not sure what chidings are.

78
00:03:27.977 --> 00:03:31.149
I assume those are bindings for
children in the penal logger.

79
00:03:31.149 --> 00:03:35.425
So this must be penal logger
memory being created right here.

80
00:03:35.425 --> 00:03:36.324
Then we see these ones.

81
00:03:36.324 --> 00:03:39.261
We see tick runner,
we see promise, promise, promise.

82
00:03:39.261 --> 00:03:41.478
Okay, we definitely see
some promises in here.

83
00:03:41.478 --> 00:03:42.698
We also see some ads.

84
00:03:42.698 --> 00:03:45.578
This kinda sounds like potentially
some set stuff going on here.

85
00:03:45.578 --> 00:03:50.124
Create bullet is in here,
because remember, we're still using sets.

86
00:03:50.124 --> 00:03:54.306
So we can see these things cuz we're back
to the beginning, but this promise one is

87
00:03:54.306 --> 00:03:57.834
pretty interesting cuz this is a lot
of memory right in here, right?

88
00:03:57.834 --> 00:04:00.755
We are doing quite a bit of
memory in this one region.

89
00:04:00.755 --> 00:04:03.285
And the reason why I'm zeroing in on that,
let's go over here and

90
00:04:03.285 --> 00:04:04.989
let's take a sample from the performance.

91
00:04:04.989 --> 00:04:06.429
We'll just do 10 seconds.

92
00:04:09.650 --> 00:04:10.595
Just let it run.

93
00:04:14.087 --> 00:04:15.360
All right, fantastic.

94
00:04:15.360 --> 00:04:20.940
[BLANK AUDIO]

