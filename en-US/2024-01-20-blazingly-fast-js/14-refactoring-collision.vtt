WEBVTT

1
00:00:00.081 --> 00:00:03.611
We are going to continue
on with our optimizations.

2
00:00:03.611 --> 00:00:06.044
So if you cannot remember
where we just were,

3
00:00:06.044 --> 00:00:09.566
we did a third optimization merge
with the second optimization,

4
00:00:09.566 --> 00:00:13.681
which of course is gonna be moving
promises completely out of our main area.

5
00:00:13.681 --> 00:00:16.305
So our hotspot is now depromisified.

6
00:00:16.305 --> 00:00:21.370
And second thing was to move away
from JavaScript processing of frame

7
00:00:21.370 --> 00:00:26.522
data in WebSockets and move it all
into C++ using micro WebSockets,

8
00:00:26.522 --> 00:00:29.772
which is a very, very, very good library.

9
00:00:29.772 --> 00:00:30.595
I absolutely love them.

10
00:00:30.595 --> 00:00:31.629
Bun uses them.

11
00:00:31.629 --> 00:00:34.056
Bun's been enjoying all
the performance accolades.

12
00:00:34.056 --> 00:00:37.554
And a lot of that is just simply because
they try to do as little as possible with

13
00:00:37.554 --> 00:00:39.356
JavaScript, very, very good at that.

14
00:00:39.356 --> 00:00:44.150
So what we're gonna do now is we're just
gonna actually do a continued measurement

15
00:00:44.150 --> 00:00:48.751
and see, do we actually see a difference
if we include our update function win?

16
00:00:48.751 --> 00:00:52.503
Now, remember, our update function does
win, it doesn't win a whole bunch, but

17
00:00:52.503 --> 00:00:53.104
it does win.

18
00:00:53.104 --> 00:00:56.294
And so maybe we have room to even
make it better, faster, stronger,

19
00:00:56.294 --> 00:00:58.556
we're just not doing it
at this current moment.

20
00:00:58.556 --> 00:01:01.629
Okay, so we're gonna jump over
here to our third one, and

21
00:01:01.629 --> 00:01:03.337
I'm gonna add this git commit.

22
00:01:03.337 --> 00:01:05.365
I forgot to do this, third opt.

23
00:01:05.365 --> 00:01:06.200
There we go.

24
00:01:06.200 --> 00:01:07.676
Yeah, we don't need to push that.

25
00:01:07.676 --> 00:01:09.230
Git checkout, let's call it fto.

26
00:01:09.230 --> 00:01:10.421
So we're gonna check this out.

27
00:01:10.421 --> 00:01:16.297
We're gonna do fto, and we're gonna
merge in the first optimization.

28
00:01:16.297 --> 00:01:17.758
So git merge fo.

29
00:01:17.758 --> 00:01:19.383
There we go, awesome.

30
00:01:19.383 --> 00:01:24.040
So now we have the improved update
function, plus we have the removed

31
00:01:24.040 --> 00:01:29.203
promises, plus we have the C++
processing of frame data for WebSockets.

32
00:01:29.203 --> 00:01:33.179
So I think we have as good of
a program that we can have right now,

33
00:01:33.179 --> 00:01:36.496
because there's no more
optimizations we can add.

34
00:01:36.496 --> 00:01:37.978
So yeah, this looks pretty good.

35
00:01:37.978 --> 00:01:38.720
We'll actually add some more.

36
00:01:38.720 --> 00:01:43.409
So let's jump over to here,
and let's do one more run.

37
00:01:43.409 --> 00:01:47.132
And we're gonna call this one fto and
we're gonna just run it at 2000.

38
00:01:47.132 --> 00:01:48.661
Sounds good?

39
00:01:48.661 --> 00:01:51.647
Sounds great,
thank you very much for saying that.

40
00:01:51.647 --> 00:01:54.502
All right, so let's go to cargo, 2000.

41
00:01:54.502 --> 00:01:56.384
This one, fantastic.

42
00:01:56.384 --> 00:02:03.222
Go over here, I'm gonna highlight this,
and we're gonna add in fto, there we go.

43
00:02:03.222 --> 00:02:04.309
Does this make a difference?

44
00:02:04.309 --> 00:02:06.987
I'm hoping we see a bit of a difference.

45
00:02:06.987 --> 00:02:08.611
So we're gonna let this thing run for
a little bit.

46
00:02:08.611 --> 00:02:11.281
And maybe we'll check it out on the perf,

47
00:02:11.281 --> 00:02:14.730
see how much time is left
over on the update function.

48
00:02:14.730 --> 00:02:19.240
Because at this point, our update function
making that faster, despite it showing up

49
00:02:19.240 --> 00:02:23.581
as almost always a top line item, is just
not meaningfully impacting our program.

50
00:02:23.581 --> 00:02:25.448
A little bit, but not a lot of it.

51
00:02:25.448 --> 00:02:29.215
And so I'm very curious if
we're gonna see something here.

52
00:02:29.215 --> 00:02:32.983
And so it doesn't look like we're still
seeing pretty much anything at this point,

53
00:02:32.983 --> 00:02:34.160
which is a little too bad.

54
00:02:34.160 --> 00:02:37.304
I mean, it still hasn't quite hit enough.

55
00:02:37.304 --> 00:02:39.664
Maybe we just didn't make it fast enough.

56
00:02:39.664 --> 00:02:42.365
We can check out how much time
it's actually still running.

57
00:02:42.365 --> 00:02:46.556
Maybe we just haven't hit that point where
it really starts making a difference.

58
00:02:46.556 --> 00:02:49.810
And so one of the big problems, of course,
is that anytime you run things,

59
00:02:49.810 --> 00:02:51.929
you're gonna get slightly
different results,

60
00:02:51.929 --> 00:02:54.063
especially if you're
running it on localhost.

61
00:02:54.063 --> 00:02:56.210
Often I find that when
I restart my system,

62
00:02:56.210 --> 00:02:59.202
I'll just get simply different
results than I got before.

63
00:02:59.202 --> 00:03:02.614
Because again, this ain't production,
this is localhost,

64
00:03:02.614 --> 00:03:04.259
take it with a grain of salt.

65
00:03:04.259 --> 00:03:06.051
So we'll cut this thing down.

66
00:03:06.051 --> 00:03:08.302
And so
we're still not seeing a whole bunch,

67
00:03:09.802 --> 00:03:14.269
Which is a little sad to see cuz
it just feels like it should.

68
00:03:14.269 --> 00:03:16.452
So we're now gonna do an inspect, and

69
00:03:16.452 --> 00:03:21.037
let's just see what is our opportunity
potential size of the update function.

70
00:03:21.037 --> 00:03:23.584
All right, we'll do that, we'll do this.

71
00:03:23.584 --> 00:03:26.437
And let's go over to our
performance side of things.

72
00:03:26.437 --> 00:03:30.662
And once we get a few of these running,
we will go in here and we'll hit Record.

73
00:03:35.956 --> 00:03:37.975
Gonna wait ten seconds again.

74
00:03:37.975 --> 00:03:41.768
You don't need a ton of time in here,
I find that usually if I go longer,

75
00:03:41.768 --> 00:03:43.678
the numbers do change a little bit.

76
00:03:43.678 --> 00:03:44.773
It just takes longer and

77
00:03:44.773 --> 00:03:48.014
longer to process because it is
displaying all of those little items.

78
00:03:48.014 --> 00:03:50.205
And so it's not necessarily that great.

79
00:03:50.205 --> 00:03:53.840
So it looks like our update function is
still taking a lot of time right now.

80
00:03:53.840 --> 00:03:56.533
And so we probably have
something that we could improve.

81
00:03:56.533 --> 00:03:59.525
Another thing to look at is that
we're still largely idle, so

82
00:03:59.525 --> 00:04:01.769
maybe we just haven't
put enough pressure yet

83
00:04:01.769 --> 00:04:04.833
to really see is this thing still
affecting it at maximum load?

84
00:04:04.833 --> 00:04:08.483
Because our server's gotten way more
efficient than it ever was before.

85
00:04:08.483 --> 00:04:10.545
So maybe there's some problems here.

86
00:04:10.545 --> 00:04:13.182
We're having a bit of a testing problem,
if you will.

87
00:04:13.182 --> 00:04:15.219
And so let's just start.

88
00:04:15.219 --> 00:04:17.779
Actually, well,
before I say what we're going to do,

89
00:04:17.779 --> 00:04:20.840
let me check my notes because I
think we got some good things going.

90
00:04:20.840 --> 00:04:25.834
All right, so we're gonna rethink
the update function again.

91
00:04:25.834 --> 00:04:28.594
And this is a technique that,
I mean, okay, so

92
00:04:28.594 --> 00:04:32.049
it's hard to call this a technique,
but it is a technique.

93
00:04:34.086 --> 00:04:37.536
I'm gonna try to do this in a way
that helps people understand,

94
00:04:37.536 --> 00:04:38.914
cuz I see it constantly.

95
00:04:38.914 --> 00:04:42.511
You'll see this, I'm guaranteeing,
you do this, I do this, we all do this.

96
00:04:42.511 --> 00:04:45.927
So what can we say is true
about the update function?

97
00:04:45.927 --> 00:04:48.563
What does it do?

98
00:04:48.563 --> 00:04:49.978
It takes the bullets and

99
00:04:49.978 --> 00:04:53.939
compares them against each other
to see if they've collided, and

100
00:04:53.939 --> 00:04:58.554
compares them against player one and
player two to see if they've collided.

101
00:04:58.554 --> 00:05:03.535
But if you remember during the beginning,
the bullets shoot in a straight line.

102
00:05:03.535 --> 00:05:06.773
Only the first two
bullets can ever collide.

103
00:05:06.773 --> 00:05:11.930
Do we ever need to check if there
is a collision with the player and

104
00:05:11.930 --> 00:05:17.009
a bullet, if there exists two bullets,
one from each player?

105
00:05:17.009 --> 00:05:20.692
No, because if there's two bullets,
they can never hit each player.

106
00:05:20.692 --> 00:05:24.543
If there's only bullets from one player,
then there actually is a chance for

107
00:05:24.543 --> 00:05:25.974
it to be able to hit a player.

108
00:05:25.974 --> 00:05:31.621
And so this is called
project-specific optimizations.

109
00:05:31.621 --> 00:05:34.402
Actually really thinking
about your problem and

110
00:05:34.402 --> 00:05:37.055
stop trying to program
the general solution.

111
00:05:37.055 --> 00:05:40.083
Often you'll find yourself
making these generalized

112
00:05:40.083 --> 00:05:43.975
functions because at some point in
the future, things might change.

113
00:05:43.975 --> 00:05:48.843
And though that can be good, it often, a,
leads you down a point of just abstraction

114
00:05:48.843 --> 00:05:52.215
and which causes you to not
actually write as good of code.

115
00:05:52.215 --> 00:05:56.986
But b, you also just make things slower
cuz you're planning on some future state

116
00:05:56.986 --> 00:05:59.664
where things are gonna change drastically.

117
00:05:59.664 --> 00:06:01.151
And is that the case for this?

118
00:06:01.151 --> 00:06:03.981
Well, no, for the case of this,
we're not changing.

119
00:06:03.981 --> 00:06:07.965
So let's try to think about our update
function and exactly what it needs to do.

120
00:06:07.965 --> 00:06:09.520
And so I'm gonna make this change and

121
00:06:09.520 --> 00:06:11.736
we're gonna branch off of
the third optimization.

122
00:06:11.736 --> 00:06:13.847
We're gonna call this one blazingly-fast,
okay?

123
00:06:13.847 --> 00:06:18.224
We're gonna make a very specific change to
only address the problem we're addressing.

124
00:06:18.224 --> 00:06:22.107
Cuz right now, again, we are solving,
if we look at the function,

125
00:06:22.107 --> 00:06:24.370
we are truly solving the general case.

126
00:06:24.370 --> 00:06:28.409
Any bullet can hit any other bullet,
any bullet could hit a player, but

127
00:06:28.409 --> 00:06:30.309
that's not the case in reality.

128
00:06:30.309 --> 00:06:33.320
Only certain conditions have to be met for
things to happen.

129
00:06:33.320 --> 00:06:36.704
So what I'm gonna do is I'm gonna actually
re-kinda create how we do PlayerState, and

130
00:06:36.704 --> 00:06:37.952
I'm gonna paste these in here.

131
00:06:37.952 --> 00:06:40.064
We're gonna do b1, b2.

132
00:06:40.064 --> 00:06:43.520
We're gonna have Bullet array,
Bullet array.

133
00:06:43.520 --> 00:06:47.943
I did not do that well,
Bullet array, fantastic.

134
00:06:47.943 --> 00:06:51.944
We're gonna drop this bullet because
we really don't need that one.

135
00:06:51.944 --> 00:06:55.112
And I'm gonna go b1,
copy that, b2, fantastic.

136
00:06:55.112 --> 00:06:56.482
So we're gonna create two new arrays.

137
00:06:56.482 --> 00:06:59.688
And now we're gonna do the exact same
thing, when we call for PlayerState,

138
00:06:59.688 --> 00:07:02.560
we're also gonna call for
the specific bullet set for that player.

139
00:07:02.560 --> 00:07:06.561
And then when we do update functions,
we're only gonna check the front bullets.

140
00:07:06.561 --> 00:07:09.518
We don't need to check all the bullets for
collision.

141
00:07:09.518 --> 00:07:12.816
So I'll first go all the way down here
where we actually do the updating.

142
00:07:12.816 --> 00:07:16.793
This one,
we're gonna take in a Bullet array, right?

143
00:07:16.793 --> 00:07:20.020
Probably should have called it bullets
because it makes more sense to be

144
00:07:20.020 --> 00:07:20.836
called bullets.

145
00:07:20.836 --> 00:07:22.544
So there we go, we have bullets.

146
00:07:22.544 --> 00:07:27.722
And then up here we can call this
bullets and we're gonna go getBullets.

147
00:07:27.722 --> 00:07:32.219
I can't keep saying that phrase,
it's getting really weird sounding.

148
00:07:32.219 --> 00:07:36.553
And we're gonna go down here and
we're gonna getBullets, and

149
00:07:36.553 --> 00:07:39.267
this is gonna return, [LAUGH] Bullets.

150
00:07:39.267 --> 00:07:44.501
And that is gonna be s/b/gc.

151
00:07:44.501 --> 00:07:45.509
No, yes, no, yes, no.

152
00:07:45.509 --> 00:07:47.499
There we go, fantastic.

153
00:07:49.448 --> 00:07:53.797
All right, so now we kinda have this
thing effectively programmed right here.

154
00:07:53.797 --> 00:07:55.600
And so now we need to do
the actual update function.

155
00:07:55.600 --> 00:07:58.921
So now we're adding player 1
bullets to play player 1 array,

156
00:07:58.921 --> 00:08:00.939
player 2 bullets to player 2 array.

157
00:08:00.939 --> 00:08:04.163
This should hopefully get us also
an additional speed up because we're no

158
00:08:04.163 --> 00:08:05.463
longer having one big array.

159
00:08:05.463 --> 00:08:09.223
So when we remove bullets, we're always
removing from the front of the list.

160
00:08:09.223 --> 00:08:11.809
So we were shifting, say, 28 bullets.

161
00:08:11.809 --> 00:08:15.004
Now, we'll only be shifting
sets of 14 when they collide.

162
00:08:15.004 --> 00:08:16.927
Maybe it makes a difference,
maybe it doesn't.

163
00:08:16.927 --> 00:08:19.694
Probably doesn't, but you never know.

164
00:08:19.694 --> 00:08:22.568
So let's go, let's think about this.

165
00:08:22.568 --> 00:08:25.314
The first thing we wanna do is go for,

166
00:08:25.314 --> 00:08:29.310
I guess we can go constant b of this.b1,
all right?

167
00:08:29.310 --> 00:08:33.406
And go updateBullet(b, delta).

168
00:08:33.406 --> 00:08:34.118
Paste that in there.

169
00:08:34.118 --> 00:08:34.656
There we go.

170
00:08:34.656 --> 00:08:37.219
We need to update all the positions
of the bullets that we did before.

171
00:08:37.219 --> 00:08:39.942
And now let's do the actual checking.

172
00:08:39.942 --> 00:08:48.726
Let's go const b = this.b1[0], b2[0].

173
00:08:48.726 --> 00:08:54.602
If b &amp;&amp; b2, oopsies, then we only
need to check for a collision.

174
00:08:54.602 --> 00:08:56.801
We don't need to check,
do you collide with other players?

175
00:08:56.801 --> 00:09:01.752
We don't need to check any of that because
it's already kind of been solved, right?.

176
00:09:01.752 --> 00:09:08.916
So we can just come here and b1, b1,
and we're just gonna simply shift.

177
00:09:08.916 --> 00:09:12.783
I know shifts, this should make
you uncomfortable seeing that b1.

178
00:09:12.783 --> 00:09:16.402
When you see a shift, you should think,
okay, we could probably do better here,

179
00:09:16.402 --> 00:09:19.515
cuz shifts mean that we're adjusting
all the indices from the front.

180
00:09:19.515 --> 00:09:24.277
It's the worst case scenario removed from
an array, probably not the best way to go.

181
00:09:24.277 --> 00:09:27.568
But hey, we now have more information
to think about for later on.

182
00:09:27.568 --> 00:09:28.909
So let's do a little b.

183
00:09:28.909 --> 00:09:35.226
If only b exists, that means we
need to check against player 2.

184
00:09:35.226 --> 00:09:37.404
So I'll just come in here, drop that in.

185
00:09:37.404 --> 00:09:42.224
Else if b2 exists, then we only need

186
00:09:42.224 --> 00:09:47.055
to check against player 1, right?

187
00:09:47.055 --> 00:09:49.117
b2, there we go.

188
00:09:49.117 --> 00:09:50.143
So it's really that simple.

189
00:09:50.143 --> 00:09:53.936
We actually don't even
need these returns here.

190
00:09:53.936 --> 00:09:55.348
And that means all of this goes away.

191
00:09:55.348 --> 00:09:57.131
So now we kinda have this, well,

192
00:09:57.131 --> 00:10:00.581
really much more optimized way
we're attempting to do things.

193
00:10:00.581 --> 00:10:04.129
We're really only doing
the absolute minimum for

194
00:10:04.129 --> 00:10:07.093
this specific problem and nothing else.

195
00:10:07.093 --> 00:10:08.757
And that's really my concern here.

196
00:10:08.757 --> 00:10:13.269
Now, just to make sure
everything's working,

197
00:10:13.269 --> 00:10:16.467
I'm gonna do an npm run test game.

198
00:10:16.467 --> 00:10:18.301
We don't need to test
the integration at this point,

199
00:10:18.301 --> 00:10:19.536
we're only changing the bullets.

200
00:10:19.536 --> 00:10:20.796
As long as they collide, move, and

201
00:10:20.796 --> 00:10:22.907
do all the things,
we've probably done something right.

202
00:10:22.907 --> 00:10:24.778
Hey, this doesn't work anymore.

203
00:10:24.778 --> 00:10:27.451
You're absolutely right,

204
00:10:27.451 --> 00:10:33.362
it should be b1.length + game.b2.length,
fantastic.

205
00:10:33.362 --> 00:10:37.321
You forgot to make this also,
again, right?

206
00:10:37.321 --> 00:10:40.991
Thank you, TypeScript,
saving my bacon with all this classing.

207
00:10:40.991 --> 00:10:45.299
I know everybody loves classes, so
there we go, we made it all work.

208
00:10:45.299 --> 00:10:47.286
This is beautiful, so
now this is working again.

209
00:10:47.286 --> 00:10:49.112
So, does this make a difference?

210
00:10:49.112 --> 00:10:51.040
So, of course,
what's the first thing we do?

211
00:10:51.040 --> 00:10:55.635
We've made a small change,
we've made a hypothesis, now we validate,

212
00:10:55.635 --> 00:10:57.941
have we actually made a real change?

213
00:10:57.941 --> 00:10:59.670
Well, it's a good question.

214
00:10:59.670 --> 00:11:06.718
I also forgot to do git status,
git checkout -b blazingly-fast, okay?

215
00:11:06.718 --> 00:11:11.618
Cuz we're gonna really just make
this thing run as small as possible.

216
00:11:11.618 --> 00:11:15.222
All right, so let's go like this, a tsc,

217
00:11:15.222 --> 00:11:19.639
we're gonna run with
inspect under bf-2000.

218
00:11:22.881 --> 00:11:26.823
I'm also positive if I just increased
the connection amount, we'd start seeing

219
00:11:26.823 --> 00:11:30.606
differences, but I would love to see it
if we could see it at the smaller level.

220
00:11:30.606 --> 00:11:37.327
All right, so I'm just gonna hit
Record again, see how we do.

221
00:11:37.327 --> 00:11:38.555
I'm hoping to see something good.

222
00:11:44.780 --> 00:11:48.122
All right, so our update function
does look a touch smaller.

223
00:11:48.122 --> 00:11:50.829
Last time it was sitting around,
what was it, 20%?

224
00:11:50.829 --> 00:11:53.157
We're now down to about 10% of the time.

225
00:11:53.157 --> 00:11:54.709
So I think we've made a good thing.

226
00:11:54.709 --> 00:11:57.352
We could kinda go back and forth and
test it a couple of times to see,

227
00:11:57.352 --> 00:11:58.879
are we actually making a difference?

228
00:11:58.879 --> 00:12:01.512
But to me, this looks like a big W.

229
00:12:01.512 --> 00:12:05.682
We've again just made the amount of time
we're processing JavaScript just keep

230
00:12:05.682 --> 00:12:06.368
shrinking.

231
00:12:06.368 --> 00:12:07.730
Look at our idle time.

232
00:12:07.730 --> 00:12:10.749
Our idle time is through the roof and
we're at 2000 connections.

233
00:12:10.749 --> 00:12:13.277
I'm pretty sure we can increase
the amount of connections and

234
00:12:13.277 --> 00:12:15.472
probably not see a huge
degradation in performance.

235
00:12:15.472 --> 00:12:18.436
So I think there could be
a there there at this point.

236
00:12:18.436 --> 00:12:20.112
I'm happy about what I'm seeing.

237
00:12:20.112 --> 00:12:23.173
So let's try the old,
we'll drop the inspect.

238
00:12:23.173 --> 00:12:27.142
I'm gonna go rm /tmp/bf-2000 cuz
we don't want that because we had

239
00:12:27.142 --> 00:12:28.784
the old inspect flag on there.

240
00:12:32.535 --> 00:12:34.499
Which if you think about it,
I mean, it's still really crazy.

241
00:12:34.499 --> 00:12:41.134
At the beginning of the day when we first
ran our program, 500 was 32% of the time.

242
00:12:41.134 --> 00:12:43.747
We were having bad frames.

243
00:12:43.747 --> 00:12:46.604
Now we're at 2000,
significantly less than that.

244
00:12:46.604 --> 00:12:50.662
And so you can make even a slow
thing still fast relative to itself.

245
00:12:50.662 --> 00:12:52.487
Now, if we were to write this in Rust,

246
00:12:52.487 --> 00:12:55.470
we could probably do 10,000
games all running on time.

247
00:12:55.470 --> 00:12:59.008
It's a different order of scale, but
then you're also writing in Rust, and

248
00:12:59.008 --> 00:13:01.523
then you have to tell people
about you writing in Rust.

249
00:13:01.523 --> 00:13:02.927
Then there's a whole set of complications.

250
00:13:02.927 --> 00:13:04.430
Then you start tweeting about it.

251
00:13:04.430 --> 00:13:07.321
It's very complicated,
you probably don't wanna do that.

252
00:13:07.321 --> 00:13:09.245
Not at your stage in career.

253
00:13:09.245 --> 00:13:11.675
It's really only when you wanna ride
into the sunset do you do that.

254
00:13:16.333 --> 00:13:20.541
Okay, well, look at that, our ratio is
actually also looking really, really good.

255
00:13:20.541 --> 00:13:24.928
We may have actually made some sort of
dent using our update function speed up,

256
00:13:24.928 --> 00:13:26.795
so this is really, really good.

257
00:13:26.795 --> 00:13:28.215
I'm very, very happy about that.

