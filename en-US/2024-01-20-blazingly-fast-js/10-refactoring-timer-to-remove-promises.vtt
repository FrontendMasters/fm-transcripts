WEBVTT

1
00:00:00.028 --> 00:00:03.364
So let's make some changes,
no more crazy timers.

2
00:00:03.364 --> 00:00:04.048
We just have so

3
00:00:04.048 --> 00:00:08.802
many of them, potentially 120,000 a second
out of 1,000 concurrent games running.

4
00:00:08.802 --> 00:00:12.420
Let's try to make something
that's a little bit more clever.

5
00:00:12.420 --> 00:00:15.811
So what we're gonna do is we're gonna pull
out the timer, and we're gonna make it

6
00:00:15.811 --> 00:00:19.480
only return numbers, which will be the
next time in which you need to wake up.

7
00:00:19.480 --> 00:00:23.908
The next step is that we should
create a map of expiry call backs.

8
00:00:23.908 --> 00:00:28.462
At this point, these call backs need to be
called, and so that way we don't have to

9
00:00:28.462 --> 00:00:31.630
go to the process event loop
unless if we want to go there,

10
00:00:31.630 --> 00:00:33.957
and we're gonna make this pretty tight.

11
00:00:33.957 --> 00:00:36.720
Next, we're gonna have to update
the game loop function so

12
00:00:36.720 --> 00:00:40.618
that it's no longer an async loop,
but that delicious callback recursion.

13
00:00:40.618 --> 00:00:42.601
Everyone loves callback hell.

14
00:00:42.601 --> 00:00:45.894
And then hopefully at the end,
we'll have some profit,

15
00:00:45.894 --> 00:00:47.959
less memory, hopefully less CPU.

16
00:00:47.959 --> 00:00:50.874
Added the word lisp in there cuz
I just had a lot of parentheses,

17
00:00:50.874 --> 00:00:51.977
felt right at the time.

18
00:00:51.977 --> 00:00:53.065
So let's do that right now.

19
00:00:53.065 --> 00:00:57.667
This one's gonna be a pretty fun change
because it's a very different change.

20
00:00:57.667 --> 00:01:00.337
Now, notice that what I
didn't do is try to improve.

21
00:01:00.337 --> 00:01:04.229
Everything that I just suggested wasn't
trying to just kind of change this.

22
00:01:04.229 --> 00:01:06.246
We're really rethinking the problem,

23
00:01:06.246 --> 00:01:10.052
like how can we create something that's
completely different or radical?

24
00:01:10.052 --> 00:01:15.270
How can we change 120,000 promises
created, say, down to just 60 or

25
00:01:15.270 --> 00:01:21.136
maybe less than 60, maybe 30 per second,
just some very small number amount.

26
00:01:21.136 --> 00:01:24.245
So what I'm gonna do is first I'm
gonna highlight this ticker and

27
00:01:24.245 --> 00:01:25.326
I'm gonna delete it.

28
00:01:25.326 --> 00:01:28.096
And I'm gonna create
a file called ticker.ts.

29
00:01:28.096 --> 00:01:31.174
I'll paste that in there and
we're gonna export this thing.

30
00:01:31.174 --> 00:01:32.146
All right, awesome.

31
00:01:32.146 --> 00:01:35.656
I'll make sure that we
have everything assigned.

32
00:01:35.656 --> 00:01:37.007
And so we kinda need to thin this out.

33
00:01:37.007 --> 00:01:39.154
We don't need nearly as
much information in here.

34
00:01:39.154 --> 00:01:40.714
We don't need to do the async thing.

35
00:01:40.714 --> 00:01:43.481
And like all problems
you're going to encounter,

36
00:01:43.481 --> 00:01:48.109
what I'm doing exactly right here will
probably not be applicable to you.

37
00:01:48.109 --> 00:01:50.948
But the fact that we looked at memory,
saw that this was

38
00:01:50.948 --> 00:01:55.569
a good portion of our memory, we looked at
the CPU, we saw this was a good portion.

39
00:01:55.569 --> 00:01:59.429
This is likely going to be a significantly
larger win, cuz we have two dimensions

40
00:01:59.429 --> 00:02:03.990
in which we're making the program more
efficient, not just a singular dimension.

41
00:02:03.990 --> 00:02:08.776
So all right, I'm gonna go down here,
and we don't need the remaining.

42
00:02:08.776 --> 00:02:12.404
We don't need the promise, resolve.

43
00:02:12.404 --> 00:02:13.500
We don't need the end now.

44
00:02:13.500 --> 00:02:14.580
We don't need the extras.

45
00:02:14.580 --> 00:02:17.178
Let's just do that or erase that.

46
00:02:17.178 --> 00:02:19.316
And we're just going
to return flooredNext.

47
00:02:19.316 --> 00:02:22.300
So that's when we're
close to execute next.

48
00:02:22.300 --> 00:02:27.267
So every time this thing is called, we
return our next value we should go to, and

49
00:02:27.267 --> 00:02:29.948
then increment our next to the next point.

50
00:02:29.948 --> 00:02:31.408
Next time it calls, it does it again.

51
00:02:31.408 --> 00:02:32.695
Next time it calls, it does it again.

52
00:02:32.695 --> 00:02:36.209
So every single time we do this,
it should just be a nice consistent timer.

53
00:02:36.209 --> 00:02:38.199
Notice that there's no more async.

54
00:02:38.199 --> 00:02:40.649
I'm gonna remove async from that function.

55
00:02:40.649 --> 00:02:43.852
It's now just a very simple function
that's just returning numbers.

56
00:02:43.852 --> 00:02:46.723
Now, we could test this.

57
00:02:46.723 --> 00:02:51.032
But this is a class about performance,
so ain't nobody gonna test this, okay?

58
00:02:51.032 --> 00:02:52.670
We're gonna do this the old-fashioned way,

59
00:02:52.670 --> 00:02:54.644
which is not test it and
just hope everything goes well.

60
00:02:54.644 --> 00:02:56.228
I'm getting we have an integration test.

61
00:02:56.228 --> 00:02:58.017
We should know if this thing fails.

62
00:02:58.017 --> 00:02:59.447
No TDD is going on here, so

63
00:02:59.447 --> 00:03:03.552
now I'm gonna do something which
everybody is gonna be super happy about.

64
00:03:03.552 --> 00:03:04.697
We're gonna create a class.

65
00:03:04.697 --> 00:03:07.199
Everyone loves classes, don't you?

66
00:03:07.199 --> 00:03:08.732
And in this class,
remember what we're gonna do.

67
00:03:08.732 --> 00:03:12.955
We're gonna do a map of some time in
the future to a list of callbacks, cuz

68
00:03:12.955 --> 00:03:17.752
we could have several games at the exact
same millisecond that need to be woken up.

69
00:03:17.752 --> 00:03:21.072
Look at how beautiful this timer is,
and it's also completely worthless?

70
00:03:21.072 --> 00:03:24.758
So we're gonna go private,
callbacks will be a map.

71
00:03:24.758 --> 00:03:30.114
Let's define a callback type, callback
will just be a standard callback, right?

72
00:03:30.114 --> 00:03:34.489
So I'll have a number, the time in
the future when it should happen, and

73
00:03:34.489 --> 00:03:35.800
a callback, right?

74
00:03:35.800 --> 00:03:38.968
For whatever reason, I don't like creating
stuff right there, it just bothers me,

75
00:03:38.968 --> 00:03:41.136
I like to create it in the constructor,
I don't know why.

76
00:03:41.136 --> 00:03:46.606
Then we're gonna have a private last
update time, which will be a number.

77
00:03:46.606 --> 00:03:50.455
And then we'll have a nice
little constructor here, and

78
00:03:50.455 --> 00:03:53.420
it will have this.cbs equals a new map,
and

79
00:03:53.420 --> 00:03:57.769
this.lastUpdateTime does not equal 0 but
equals date.now.

80
00:03:57.769 --> 00:04:00.129
So this is the last time
that these things happened.

81
00:04:00.129 --> 00:04:00.861
Okay, good.

82
00:04:00.861 --> 00:04:02.699
So let's create an add function.

83
00:04:02.699 --> 00:04:05.902
We need to be able to
add to these callbacks.

84
00:04:05.902 --> 00:04:07.610
And because our goal, again,

85
00:04:07.610 --> 00:04:12.223
is to go from 120,000 potential promises
down to somewhere less than 60.

86
00:04:12.223 --> 00:04:13.237
That's our goal.

87
00:04:13.237 --> 00:04:17.268
All right, so I'm gonna go add, and
it's gonna take in a callback rate,

88
00:04:17.268 --> 00:04:20.863
that's not the right number,
we're gonna go like this, when.

89
00:04:20.863 --> 00:04:23.533
When in the future do
you need to be called?

90
00:04:23.533 --> 00:04:26.981
And that's what this whole ticker is, is
that it sets some time in the future for

91
00:04:26.981 --> 00:04:27.759
you to be called.

92
00:04:27.759 --> 00:04:28.898
Okay, fantastic!

93
00:04:31.318 --> 00:04:36.897
And let's do this, we're gonna go
this.cbs.set when callback, right?

94
00:04:36.897 --> 00:04:37.900
I'm kidding, we can't do that.

95
00:04:37.900 --> 00:04:43.031
We've gotta do this whole like, all right,
callback equals this.cbs get this,

96
00:04:43.031 --> 00:04:46.125
if not cbs,
then we need to go cbs equals an array.

97
00:04:46.125 --> 00:04:52.476
And then go up here and forget to do that
whole thing because I forget things,

98
00:04:52.476 --> 00:04:59.143
and then do this whole cbs.set when
this thing, and then cbs.push callback.

99
00:04:59.143 --> 00:05:02.207
All right, there we go, we got a nice
little callback adding, right?

100
00:05:02.207 --> 00:05:04.923
So every place we're gonna have
a bunch of callbacks that potentially

101
00:05:04.923 --> 00:05:06.131
could be added at this number.

102
00:05:06.131 --> 00:05:09.336
Fantastic, we're looking, feeling good.

103
00:05:09.336 --> 00:05:14.783
Okay, next, we just have to return out.

104
00:05:14.783 --> 00:05:15.989
We have to return out nothing.

105
00:05:15.989 --> 00:05:16.977
Okay, fantastic!

106
00:05:16.977 --> 00:05:19.000
Now we need something that
runs the actual time.

107
00:05:19.000 --> 00:05:21.193
This is where we're gonna
do the actual loop,

108
00:05:21.193 --> 00:05:25.316
where we're trying to aggressively reduce
the amount of promises or memory created.

109
00:05:25.316 --> 00:05:26.582
Should be pretty easy here.

110
00:05:26.582 --> 00:05:29.318
So the first thing I'm gonna
do is I'm gonna go like this.

111
00:05:29.318 --> 00:05:32.792
Let's do a const start = date.now().

112
00:05:32.792 --> 00:05:35.180
We need to know when we started cuz
there's gonna be an important point.

113
00:05:35.180 --> 00:05:37.221
Because remember, what are we doing here?

114
00:05:37.221 --> 00:05:41.140
We're controlling when the process
event loop takes control again.

115
00:05:41.140 --> 00:05:43.141
So we need to be judicious
about how we do it.

116
00:05:43.141 --> 00:05:45.377
We can't just infinitely
spin processing things,

117
00:05:45.377 --> 00:05:48.829
because you can imagine that it could get
really bad where we could end up spending

118
00:05:48.829 --> 00:05:51.402
30 milliseconds,
40 milliseconds doing something.

119
00:05:51.402 --> 00:05:53.802
So we got to be a bit more judicious here.

120
00:05:53.802 --> 00:05:58.777
So I'm gonna go like this,
while this.LastUpdate is less than start,

121
00:05:58.777 --> 00:06:02.948
so we're gonna only process
the things up until this point.

122
00:06:02.948 --> 00:06:08.700
If date.now minus start is greater than
two milliseconds, let's just break.

123
00:06:08.700 --> 00:06:09.444
Let's get out of here.

124
00:06:09.444 --> 00:06:13.136
So we'll only process up to two
milliseconds worth of data and

125
00:06:13.136 --> 00:06:13.992
that is that.

126
00:06:13.992 --> 00:06:16.901
So however many updates we can do,
fantastic.

127
00:06:16.901 --> 00:06:21.245
So we're gonna grab the last
callbacks at this time.

128
00:06:21.245 --> 00:06:26.048
And then we're gonna go for, let's go like
this, if callbacks, if there's a callback

129
00:06:26.048 --> 00:06:30.032
at this time, we're gonna do a little
nice little callback right there.

130
00:06:30.032 --> 00:06:31.756
Look at how great that is, thanks Copilot.

131
00:06:31.756 --> 00:06:35.735
After that, we need to go
this.callbacks.delete last time,

132
00:06:35.735 --> 00:06:39.207
and then we're gonna increment
last time by one value.

133
00:06:39.207 --> 00:06:42.595
So all we're doing is we're literally
walking per millisecond and

134
00:06:42.595 --> 00:06:44.919
executing all the callbacks synchronously.

135
00:06:44.919 --> 00:06:47.869
No more hooks,
no more a bunch of other things happening,

136
00:06:47.869 --> 00:06:50.896
no more going to the process event loop,
no more anything.

137
00:06:50.896 --> 00:06:54.848
It's just in JavaScript
constantly running.

138
00:06:54.848 --> 00:06:59.345
And then after that, we just need to
be able to call ourselves again and

139
00:06:59.345 --> 00:07:01.189
run sometime in the future.

140
00:07:01.189 --> 00:07:04.797
So we can do something like setTmeout,
this.run, and

141
00:07:04.797 --> 00:07:07.730
we'll do it pretty much
as soon as possible.

142
00:07:07.730 --> 00:07:09.056
What this is gonna allow,

143
00:07:09.056 --> 00:07:12.689
is that any data coming in from web
sockets will be able to be processed.

144
00:07:12.689 --> 00:07:13.963
We're letting somebody else run for

145
00:07:13.963 --> 00:07:16.400
a moment and then we're gonna go back and
try to keep processing data.

146
00:07:16.400 --> 00:07:18.661
So pretty straightforward
stuff right here.

147
00:07:18.661 --> 00:07:23.132
But this is where my intensity comes in.

148
00:07:23.132 --> 00:07:27.568
I just hate the fact that when I look at
this, I'm creating this little function

149
00:07:27.568 --> 00:07:30.361
right here every time just
to call this function.

150
00:07:30.361 --> 00:07:32.635
Because we're already trying to be so
efficient, so

151
00:07:32.635 --> 00:07:35.476
I wanna just put this on the shelf and
make it maximally efficient.

152
00:07:35.476 --> 00:07:40.527
So I'm gonna go this, private boundRun,
which is going to be that,

153
00:07:40.527 --> 00:07:46.117
and I'm just gonna go this.boundrun
equals this.runbind this, right?

154
00:07:46.117 --> 00:07:52.246
And so then I can just do this
beauty right here, this.boundrun, 0.

155
00:07:52.246 --> 00:07:53.059
There we go.

156
00:07:53.059 --> 00:07:54.995
Look at that,
doesn't that just feel better?

157
00:07:54.995 --> 00:07:58.789
I just feel more emotionally less in pain.

158
00:07:58.789 --> 00:08:01.619
I just love making things as
efficient as possible, and so

159
00:08:01.619 --> 00:08:03.073
I feel very happy about this.

160
00:08:03.073 --> 00:08:07.543
We have effectively removed a bunch of
memory being created, a bunch of promises.

161
00:08:07.543 --> 00:08:09.767
It looks pretty good, but
now how do we start this?

162
00:08:09.767 --> 00:08:10.973
How do we return this?

163
00:08:10.973 --> 00:08:13.824
Hell, this is where
the fun is gonna get here.

164
00:08:13.824 --> 00:08:16.408
This is where people are gonna
really love me after this.

165
00:08:16.408 --> 00:08:19.697
I'm gonna just do a quick export function,
getTimer.

166
00:08:19.697 --> 00:08:21.366
Whoa, did you see that,
it said getTicker too?

167
00:08:21.366 --> 00:08:23.834
That is beautiful.

168
00:08:23.834 --> 00:08:26.544
So I'm gonna have a singleton,
but we still have to call run.

169
00:08:26.544 --> 00:08:30.096
So what I will do instead is I'll
do a nice little static function.

170
00:08:30.096 --> 00:08:31.409
Isn't this just beautiful?

171
00:08:31.409 --> 00:08:36.121
Create const timer = new Timer(),

172
00:08:36.121 --> 00:08:39.515
timer run, return timer.

173
00:08:39.515 --> 00:08:40.210
There we go.

174
00:08:43.739 --> 00:08:45.157
There we go.
It's a singular item,

175
00:08:45.157 --> 00:08:46.975
little state container runs by itself.

176
00:08:46.975 --> 00:08:49.432
I could have done this all
that module level stuff.

177
00:08:49.432 --> 00:08:51.416
But if at some point I
wanted to test this,

178
00:08:51.416 --> 00:08:54.819
it'd be nice to be able to kind of
export all these things, expose it and

179
00:08:54.819 --> 00:08:58.015
be able to run and actually test
that we're doing what I want to do.

180
00:08:58.015 --> 00:09:01.694
And I also just love creating classes
to trigger a JavaScript people.

181
00:09:01.694 --> 00:09:02.962
I think it's just tons of fun.

182
00:09:02.962 --> 00:09:04.186
So there we go.

183
00:09:04.186 --> 00:09:05.338
Great times, great times.

184
00:09:05.338 --> 00:09:07.382
So I think this will all
just work first try.

185
00:09:07.382 --> 00:09:09.922
I assume I'm smart enough
to be able to do that.

186
00:09:09.922 --> 00:09:12.818
And so now all we have to do
is go back to our game and

187
00:09:12.818 --> 00:09:14.678
we need to make these updates.

188
00:09:14.678 --> 00:09:19.434
So, this is not really available anymore,
so I'll import this in.

189
00:09:19.434 --> 00:09:23.087
Now remember,
this just gives us the next time to run.

190
00:09:23.087 --> 00:09:25.462
It doesn't give us
anything other than that.

191
00:09:25.462 --> 00:09:26.790
So that means this needs to change.

192
00:09:26.790 --> 00:09:29.090
We can no longer use the Lord's loop,
a do while loop,

193
00:09:29.090 --> 00:09:31.141
we need to use something
a little bit different.

194
00:09:31.141 --> 00:09:34.951
So I'm gonna have a function and
we're gonna to call it run.

195
00:09:34.951 --> 00:09:36.115
And that's all we're gonna use.

196
00:09:36.115 --> 00:09:40.575
And I'm gonna also have let
lastRunTime = date.now().

197
00:09:40.575 --> 00:09:44.183
So that way I can kind of keep track
of how long it took me to run now.

198
00:09:44.183 --> 00:09:46.547
So I'm gonna move this
logic somewhere else.

199
00:09:46.547 --> 00:09:51.114
All right, so
that means ticks no longer equals this.

200
00:09:51.114 --> 00:09:55.296
Ticks = date.now minus lastRunTime.

201
00:09:55.296 --> 00:09:57.417
So that's how long it took for
us to call this thing.

202
00:09:57.417 --> 00:09:58.988
So there we go,
kind of makes sense, right?

203
00:09:58.988 --> 00:10:00.358
We're kind of walking through this.

204
00:10:00.358 --> 00:10:04.725
So all this stuff, still the same,
still the same except for right here.

205
00:10:04.725 --> 00:10:07.229
We can no longer do the while loop.

206
00:10:07.229 --> 00:10:09.943
So I have to move this
into an if statement.

207
00:10:09.943 --> 00:10:11.223
And the best part is I get it, what is it?

208
00:10:11.223 --> 00:10:12.519
Modus ponens?

209
00:10:12.519 --> 00:10:13.701
Is that what we need to apply here?

210
00:10:13.701 --> 00:10:15.207
I always forget my logic name.

211
00:10:15.207 --> 00:10:18.671
I need to convert all
the ampersands into that and

212
00:10:18.671 --> 00:10:21.387
then convert all the bangs into that.

213
00:10:21.387 --> 00:10:22.154
So there we go.

214
00:10:22.154 --> 00:10:26.737
So if the game has ended, or a socket's
been closed, or a socket has been errored,

215
00:10:26.737 --> 00:10:28.713
we need to do something different.

216
00:10:28.713 --> 00:10:29.891
So I'll call finish.

217
00:10:29.891 --> 00:10:34.888
Else, we need to call run, but
we don't wanna just call run directly.

218
00:10:34.888 --> 00:10:40.120
We wanna go getTimer(), add, we're gonna

219
00:10:40.120 --> 00:10:45.230
add ourself, at the game ticker, next tip.

220
00:10:45.230 --> 00:10:45.948
So there we go.

221
00:10:45.948 --> 00:10:47.325
Add us into the future.

222
00:10:47.325 --> 00:10:48.310
Let us run at some point.

223
00:10:48.310 --> 00:10:50.579
We'll be very happy about this, fantastic.

224
00:10:50.579 --> 00:10:51.371
So there we go.

225
00:10:51.371 --> 00:10:54.748
That looks pretty good.

226
00:10:54.748 --> 00:10:56.464
All right, fantastic.

227
00:10:56.464 --> 00:10:58.818
Now we have this whole problem down here,

228
00:10:58.818 --> 00:11:01.318
which is just now what we want to do,
right?

229
00:11:01.318 --> 00:11:05.002
This is kind of problematic because
this will just run right away.

230
00:11:05.002 --> 00:11:08.528
So that's why I created this
little finish function, so

231
00:11:08.528 --> 00:11:10.956
I can go function finish, there we go.

232
00:11:13.726 --> 00:11:14.964
And do that.

233
00:11:14.964 --> 00:11:20.273
That kind of made goofiness, so
I'll just go, why is that doing that?

234
00:11:20.273 --> 00:11:21.543
Why is that doing it?

235
00:11:21.543 --> 00:11:23.217
Trust me, Vim is super cool!

236
00:11:23.217 --> 00:11:24.719
All right, there we go.

237
00:11:24.719 --> 00:11:28.025
Now we have this little finish function
that's gonna do all the same finishing we

238
00:11:28.025 --> 00:11:28.569
did before.

239
00:11:28.569 --> 00:11:32.001
If we stop with one or two,
we'll stop it, else we'll send, hey,

240
00:11:32.001 --> 00:11:35.157
opponent disconnected, or
we're gonna do this right here.

241
00:11:35.157 --> 00:11:38.809
We're gonna send out the messages like,
hey, the game stopped, everyone's done.

242
00:11:38.809 --> 00:11:40.071
And then we're gonna
keep track of everything.

243
00:11:40.071 --> 00:11:44.070
So therefore we're now kind of keeping
track of everything that has happened.

244
00:11:44.070 --> 00:11:46.611
There's one more small tiny, teeny,

245
00:11:46.611 --> 00:11:51.000
tiny problem that I don't know if
anyone's really thought about,

246
00:11:51.000 --> 00:11:55.554
which is going to be the classic issue,
which is inside of our ticker.

247
00:11:55.554 --> 00:11:58.153
We do everything right except for
one thing.

248
00:11:58.153 --> 00:12:03.883
What happen if we run into the future and
it's taken too long to process everything,

249
00:12:03.883 --> 00:12:08.903
and then one of our timers tries to
call this function in the past, right?

250
00:12:08.903 --> 00:12:11.331
Because our ticker only
adds 16 milliseconds,

251
00:12:11.331 --> 00:12:13.019
which is probably not that great.

252
00:12:13.019 --> 00:12:18.924
So we kinda have to do something either
inside of here or inside of here.

253
00:12:18.924 --> 00:12:21.851
Now, I would probably recommend,
let's just fix it in the ticker.

254
00:12:21.851 --> 00:12:24.512
If we run so
fast that we're now into the past,

255
00:12:24.512 --> 00:12:29.376
we're gonna just move ourselves forward
and cause a starter, cause a larger tick.

256
00:12:29.376 --> 00:12:31.410
Does that sound fine?

257
00:12:31.410 --> 00:12:32.873
It's probably the best way to do,

258
00:12:32.873 --> 00:12:35.657
which means our update function
will get called multiple times.

259
00:12:35.657 --> 00:12:37.563
I think that's probably fine.

260
00:12:37.563 --> 00:12:40.819
And so we're gonna go math.max,

261
00:12:40.819 --> 00:12:45.207
which is giving me now plus 1 or
flooredNext.

262
00:12:45.207 --> 00:12:48.711
All right, which we could do that one,
which maybe that would be good, but

263
00:12:48.711 --> 00:12:51.287
then of course we haven't
done this thing right here.

264
00:12:51.287 --> 00:12:53.878
So we do need to update this
a little bit more properly.

265
00:12:53.878 --> 00:12:55.996
So we're gonna do a little bit of this.

266
00:12:55.996 --> 00:12:59.540
We're gonna go,
if now is greater than flooredNext,

267
00:12:59.540 --> 00:13:03.017
then we're gonna go
flooredNext equals now plus 1.

268
00:13:03.017 --> 00:13:04.662
So we'll put it slightly into the future.

269
00:13:04.662 --> 00:13:07.250
Hey, you're gonna happen
one moment into the future.

270
00:13:07.250 --> 00:13:14.783
And then we'll do next equals flooredNext
plus rate, so that's our next time.

271
00:13:14.783 --> 00:13:16.544
And our previous now remain the same.

272
00:13:16.544 --> 00:13:18.569
Else, we'll just do this.

273
00:13:18.569 --> 00:13:20.823
And now we can just redo
the whole flooredNext.

274
00:13:20.823 --> 00:13:23.027
All right, does that look good?

275
00:13:23.027 --> 00:13:27.316
By the way, during this presentation,
I only realized that this was a bug during

276
00:13:27.316 --> 00:13:29.598
all the times I was
doing things right now.

277
00:13:29.598 --> 00:13:32.645
And so this was kind of a live
coding update that may or

278
00:13:32.645 --> 00:13:36.745
may not be 100% well thought through,
but this should just work.

279
00:13:36.745 --> 00:13:39.538
Hashtag that out if anyone's wondering.

280
00:13:39.538 --> 00:13:41.646
All right, fantastic, looks good to me.

281
00:13:41.646 --> 00:13:43.691
Looks good to me too,
I just wanna double check this.

282
00:13:43.691 --> 00:13:46.896
If now is greater than flooredNext,
then obviously we need to move it forward.

283
00:13:46.896 --> 00:13:49.441
We need to move forward next by that,
else we do this.

284
00:13:49.441 --> 00:13:50.403
Previous now equals now.

285
00:13:50.403 --> 00:13:51.915
Perfect, okay, I think that's correct.

286
00:13:51.915 --> 00:13:53.389
I think we're looking good on that one.

287
00:13:53.389 --> 00:13:57.973
You should never admit your downfalls, by
the way, publicly, but I'm okay with it.

288
00:13:57.973 --> 00:14:00.832
It's a shameful moment for
me to actually have this happen.

289
00:14:00.832 --> 00:14:03.737
So what I'm gonna do is,
I think everything is working, so

290
00:14:03.737 --> 00:14:07.236
I'll just do a quick tsc to make sure,
okay, all my types are working.

291
00:14:07.236 --> 00:14:08.380
We're probably pretty close here.

292
00:14:08.380 --> 00:14:10.491
So let's do a quick run test.

293
00:14:10.491 --> 00:14:13.489
Obviously, the first four
tests should just work.

294
00:14:13.489 --> 00:14:17.025
I would be very surprised if the first
four tests broke because they're only

295
00:14:17.025 --> 00:14:19.348
involving the game and
making sure the bullets and

296
00:14:19.348 --> 00:14:21.131
everything are shooting correctly.

297
00:14:21.131 --> 00:14:24.047
If you're ever wondering,
if you're using this program and

298
00:14:24.047 --> 00:14:27.580
you're trying to implement this test
yourself, and you're wondering,

299
00:14:27.580 --> 00:14:30.563
is integration doing anything,
you can always tail test log.

300
00:14:30.563 --> 00:14:31.840
And so
notice that we're not doing anything.

301
00:14:31.840 --> 00:14:34.912
So my guess is that we actually
broke something right here.

302
00:14:34.912 --> 00:14:35.766
It's not running.

303
00:14:35.766 --> 00:14:36.886
We're not doing something.

304
00:14:36.886 --> 00:14:38.737
So what the heck has happened?

305
00:14:38.737 --> 00:14:42.907
No, this is always the worst possible
answers when things break live.

306
00:14:42.907 --> 00:14:45.505
This is the one I was
hoping wouldn't break live.

307
00:14:45.505 --> 00:14:47.197
So what did we do wrong here?

308
00:14:47.197 --> 00:14:50.134
So sorry,
we got to do a quick moment of debugging.

309
00:14:50.134 --> 00:14:52.254
Let's make sure everything looks good.

310
00:14:52.254 --> 00:14:54.655
When is into the future.

311
00:14:54.655 --> 00:14:56.901
Start is right there, fantastic.

312
00:14:56.901 --> 00:15:00.398
Well, last update is less than start.

313
00:15:00.398 --> 00:15:04.734
Okay, fantastic, given now minus start
is greater than 2, then we do that.

314
00:15:04.734 --> 00:15:07.167
We get the last one of those,
we do a little four const.

315
00:15:07.167 --> 00:15:08.570
I know live demo.

316
00:15:08.570 --> 00:15:12.015
Of course live demo, we delete any of
the previous time, we do this, and

317
00:15:12.015 --> 00:15:13.153
then we rerun it again.

318
00:15:13.153 --> 00:15:17.019
Okay, so I mean,
I feel like this all looks pretty good.

319
00:15:17.019 --> 00:15:20.402
Let's go back to our game just to make
sure that our game is actually doing what

320
00:15:20.402 --> 00:15:22.187
it's supposed to be doing.

321
00:15:22.187 --> 00:15:25.197
Of course, I am so stupid.

322
00:15:25.197 --> 00:15:27.077
Are we running?

323
00:15:27.077 --> 00:15:29.089
No, we didn't run, we didn't run.

324
00:15:29.089 --> 00:15:30.307
We didn't even run the thing.

325
00:15:30.307 --> 00:15:33.360
So here, we've got to make
sure we start the game loop.

326
00:15:33.360 --> 00:15:35.501
All right, man, I'm a genius.

327
00:15:35.501 --> 00:15:39.034
All right, so we rerun this thing.

328
00:15:39.034 --> 00:15:40.320
We jump over here.

329
00:15:40.320 --> 00:15:43.081
Is the thing actually gonna start running?

330
00:15:43.081 --> 00:15:44.047
There we go.

331
00:15:44.047 --> 00:15:47.712
We saw some things run.

332
00:15:47.712 --> 00:15:48.602
Nice!

333
00:15:48.602 --> 00:15:51.132
All right, so what went wrong here?

334
00:15:51.132 --> 00:15:52.663
Luckily I prepared for this one.

335
00:15:52.663 --> 00:15:54.832
I actually made this mistake earlier.

336
00:15:54.832 --> 00:15:59.701
So we didn't update last run time.

337
00:15:59.701 --> 00:16:04.981
Just lucky moves going on right now.

338
00:16:04.981 --> 00:16:05.600
There we go.

339
00:16:05.600 --> 00:16:08.194
Just in case,
I know it's happening, there we go.

340
00:16:08.194 --> 00:16:10.763
Now we're actually properly
calculating the game loop out.

341
00:16:10.763 --> 00:16:12.004
Okay, fantastic!

342
00:16:12.004 --> 00:16:15.730
These kind of changes can
be quite difficult to make.

343
00:16:15.730 --> 00:16:17.261
But we've made them.

344
00:16:17.261 --> 00:16:19.458
We're feeling successful right now.

345
00:16:19.458 --> 00:16:21.384
And so, let's do this one.

346
00:16:21.384 --> 00:16:23.670
We're gonna kill this,
we're gonna do this.

347
00:16:23.670 --> 00:16:26.839
Remember, my server sometimes leaks.

348
00:16:26.839 --> 00:16:31.779
My integration test sometimes leaks out
zombie processes, just part of life,

349
00:16:31.779 --> 00:16:34.517
just as just a little
thing we get to do here.

350
00:16:34.517 --> 00:16:35.150
There we go.

351
00:16:35.150 --> 00:16:36.235
All right, this looks good.

352
00:16:36.235 --> 00:16:38.674
I believe we're gonna play
ourselves a correct thing.

353
00:16:41.989 --> 00:16:43.614
We'll let this thing play out.

