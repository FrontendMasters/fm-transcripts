WEBVTT

1
00:00:00.000 --> 00:00:03.127
So we already talked about how
node has a ton of amazing stuff.

2
00:00:03.127 --> 00:00:07.474
We've now created headroom cuz obviously
we could remove add in end, or

3
00:00:07.474 --> 00:00:09.334
remove this update function.

4
00:00:09.334 --> 00:00:11.732
Actually, before we do that,

5
00:00:11.732 --> 00:00:17.177
one thing we forgot to do is let's
just look at the performance chart,

6
00:00:17.177 --> 00:00:22.190
and see are we actually,
is update actually being changed now?

7
00:00:22.190 --> 00:00:26.297
Because we didn't really actually measure
it again to see how much are we shrinking

8
00:00:26.297 --> 00:00:26.949
update now.

9
00:00:26.949 --> 00:00:30.835
Because before we shrink it a bunch,
maybe we're not shrinking it as much now,

10
00:00:30.835 --> 00:00:31.597
I don't know.

11
00:00:33.972 --> 00:00:36.238
So we'll wait for this thing to get
running, I forgot to do this part.

12
00:00:36.238 --> 00:00:39.977
I think it's important
to kind of look at this.

13
00:00:43.478 --> 00:00:46.921
Let it run, let it run,
let it run, let it run.

14
00:00:55.025 --> 00:00:58.615
Fantastic, yeah,
we shrink update by a decent amount.

15
00:00:58.615 --> 00:01:03.673
Last time it was 25% now, it's 15%,
so it seems maybe we could

16
00:01:03.673 --> 00:01:08.734
do better with update, and
then we could potentially see some wins,

17
00:01:08.734 --> 00:01:13.384
but i just don't think that's
where we need to be focusing on.

18
00:01:13.384 --> 00:01:16.827
What I do see is we still have we have
a little bit of garbage collection not

19
00:01:16.827 --> 00:01:20.215
a lot, we do have on message,
we do have stream read, we do have right,

20
00:01:20.215 --> 00:01:21.188
we do have consume.

21
00:01:21.188 --> 00:01:25.763
We do have start loop, we do have some
other socket on data, a bunch of these

22
00:01:25.763 --> 00:01:30.282
tiny functions all put together that
are all causing some amounts of CPU.

23
00:01:30.282 --> 00:01:36.938
And not only that, but if we look at
the last time we do anything with memory,

24
00:01:36.938 --> 00:01:41.930
you'll notice that from here
to here is all WebSockets.

25
00:01:41.930 --> 00:01:43.543
Can we make WebSockets better?

26
00:01:46.394 --> 00:01:50.270
Yes, we can make WebSockets better,
we're gonna make WebSockets better, but

27
00:01:50.270 --> 00:01:54.156
we're not gonna change WebSockets,
we're gonna continue to use WebSockets.

28
00:01:54.156 --> 00:01:58.042
We're just not gonna keep on
using our current WebSockets,

29
00:01:58.042 --> 00:02:00.566
because our current WebSockets is WS.

30
00:02:00.566 --> 00:02:04.282
The one that's recommended all
over the place, have you used WS?

31
00:02:04.282 --> 00:02:05.549
&gt;&gt; Yeah,
&gt;&gt; Yes, you have,

32
00:02:05.549 --> 00:02:09.825
everyone's used WS at some point,
very convenient, very naughty,

33
00:02:09.825 --> 00:02:14.250
very slow, and causes a lot of memory,
shockingly not like that great.

34
00:02:14.250 --> 00:02:18.340
And so what we're gonna do is we're
actually gonna use the sockets that

35
00:02:18.340 --> 00:02:23.110
band uses, we're gonna go use a native set
of socket that does all the framing, and

36
00:02:23.110 --> 00:02:27.679
requesting in C plus plus, which means
that every part of it from the network all

37
00:02:27.679 --> 00:02:31.466
the way to the frame can be
constructed out of band of JavaScript.

38
00:02:31.466 --> 00:02:35.774
And then when that's done, just the frame
can be handed into JavaScript, so

39
00:02:35.774 --> 00:02:38.041
we can just do processing at that point.

40
00:02:38.041 --> 00:02:41.491
And that's a very different paradigm than
what's happening right now, cuz right now,

41
00:02:41.491 --> 00:02:42.928
we're getting handed the raw data.

42
00:02:42.928 --> 00:02:46.818
We're then going through it in JavaScript
doing all this piping, and readable, and

43
00:02:46.818 --> 00:02:49.911
all that stuff that node uses to
kind of generate out these packets.

44
00:02:49.911 --> 00:02:52.375
So it's a very different experience.

45
00:02:52.375 --> 00:02:54.978
And so I think this would be
a good win because again,

46
00:02:54.978 --> 00:02:57.002
I'm not even using this side of things.

47
00:02:57.002 --> 00:03:01.920
I'm kind of using intuition at this point,
and a little bit of looking at the graphs.

48
00:03:01.920 --> 00:03:06.841
One, I see that we are seeing some level
of WebSocket showing up, not a lot, but

49
00:03:06.841 --> 00:03:09.574
I am seeing that we're
creating a ton here.

50
00:03:09.574 --> 00:03:11.187
And so
that gives me a little bit of pause.

51
00:03:11.187 --> 00:03:15.360
Like, okay, this might be doing
a lot more than we realize.

52
00:03:15.360 --> 00:03:18.552
And maybe the performance chart
isn't showing us everything that

53
00:03:18.552 --> 00:03:19.525
it's supposed to.

54
00:03:19.525 --> 00:03:23.491
We're not doing like a deep analysis tool,
which would be something more like perf,

55
00:03:23.491 --> 00:03:26.797
where we can actually see every last
little bit of everything processing.

56
00:03:26.797 --> 00:03:29.518
So maybe we're missing some data,
I'm not exactly sure what's happening.

57
00:03:29.518 --> 00:03:31.933
We have this unusually
high amount of idle,

58
00:03:31.933 --> 00:03:36.133
despite the fact that when I add more
connections, our program slows down.

59
00:03:36.133 --> 00:03:37.987
So that can't make any sort of sense.

60
00:03:37.987 --> 00:03:39.487
So maybe we're missing some data, but

61
00:03:39.487 --> 00:03:42.082
it seems like the memory side of
things is a really great indicator.

62
00:03:42.082 --> 00:03:46.956
So we're gonna go with our gut,
which our gut says JavaScript is slow,

63
00:03:46.956 --> 00:03:50.205
and then go with the memory chart,
which says,

64
00:03:50.205 --> 00:03:54.041
this JavaScript is using a lot of memory,
sounds good?

65
00:03:54.041 --> 00:03:54.717
Sound good.

66
00:03:54.717 --> 00:04:00.214
I've definitely skipped out on
my presentation a little bit.

67
00:04:00.214 --> 00:04:02.535
So we've been doing hotspot optimizations.

68
00:04:02.535 --> 00:04:06.098
So we've assessed, yeah, so
the best JavaScript is not JavaScript.

69
00:04:06.098 --> 00:04:08.104
That's usually how I think about it,

70
00:04:08.104 --> 00:04:12.180
is that if we could just stop writing
JavaScript, and I mean that literally,

71
00:04:12.180 --> 00:04:16.908
we would actually be you'd just be faster,
you'd write something different, right?

72
00:04:16.908 --> 00:04:20.658
I mean, the best thing you can do for
performance is not just don't do anything,

73
00:04:20.658 --> 00:04:23.988
don't that's your fastest program
is the program that does nothing.

74
00:04:23.988 --> 00:04:26.532
And so if we don't have that as an option,

75
00:04:26.532 --> 00:04:31.057
then using a language that's fast is
always a really good intermediate.

76
00:04:31.057 --> 00:04:34.696
So here we go, uNetworking WebSockets.

77
00:04:34.696 --> 00:04:36.819
I have this thing hard-coded here.

78
00:04:36.819 --> 00:04:38.825
It's kind of an unusual
way you install this.

79
00:04:38.825 --> 00:04:43.768
Typically, you expect it on npm and all
that, but if you Identify, if you do npm i

80
00:04:43.768 --> 00:04:47.721
like this, it will actually install
it from a Git tag on GitHub.

81
00:04:47.721 --> 00:04:50.619
So we're gonna install it there, and then
it has to do a little bit of compiling for

82
00:04:50.619 --> 00:04:51.126
your system.

83
00:04:51.126 --> 00:04:52.708
It's gonna release some findings.

84
00:04:52.708 --> 00:04:54.741
We still have the performance
program running.

85
00:04:54.741 --> 00:04:57.272
So what I'm gonna do is
I'm first gonna check out

86
00:04:57.272 --> 00:05:00.422
my second optimization cuz I
wanna keep that optimization,

87
00:05:00.422 --> 00:05:03.655
removing promises did seem like
the first major bottleneck.

88
00:05:03.655 --> 00:05:08.278
So now any improvements to our program no
longer has that as our real bottleneck cuz

89
00:05:08.278 --> 00:05:10.691
that actually was our first real win here.

90
00:05:10.691 --> 00:05:16.937
So from this one, I'm gonna check out the,
Third optimization.

91
00:05:16.937 --> 00:05:21.572
And the reason why I'm doing that is
because the first optimization though on

92
00:05:21.572 --> 00:05:25.435
paper looks really good,
I don't know if it is really good yet.

93
00:05:25.435 --> 00:05:29.412
And so I kinda wanna wait, and
maybe it will become really good.

94
00:05:29.412 --> 00:05:33.187
When we get to the point where
that's the new actual problem,

95
00:05:33.187 --> 00:05:35.516
it just hasn't been the problem yet.

96
00:05:35.516 --> 00:05:40.399
And so lots of paper wins,
no practical wins, very sad.

97
00:05:40.399 --> 00:05:43.045
And so I'm gonna execute
to get this little npm i,

98
00:05:43.045 --> 00:05:47.018
it's gonna do you networking WebSocket's,
takes a moment to download.

99
00:05:47.018 --> 00:05:51.189
And this will give us some delicious
native sockets depending on your node

100
00:05:51.189 --> 00:05:55.976
version, it's kind of like what versions
you need to download for you networking.

101
00:05:55.976 --> 00:05:58.519
It's a little bit complicated, but

102
00:05:58.519 --> 00:06:01.974
I'm positive you'll be
able to figure that out.

103
00:06:01.974 --> 00:06:05.081
This one should work with pretty
much the latest nodes stuff.

104
00:06:05.081 --> 00:06:08.186
So we've installed your
networking sockets, and so

105
00:06:08.186 --> 00:06:09.778
now we just gotta use them.

106
00:06:09.778 --> 00:06:11.897
I'm pretty lazy, I know how to do it, but

107
00:06:11.897 --> 00:06:14.208
just in case you guys
don't know how to do it.

108
00:06:14.208 --> 00:06:18.168
What I'm gonna do is,
I'm gonna go on the internet, and

109
00:06:18.168 --> 00:06:20.651
I'm gonna look up uWebSockets js.

110
00:06:20.651 --> 00:06:23.226
I am gonna go to the GitHub.

111
00:06:23.226 --> 00:06:27.308
I am going to zoom in because
this is 4k and that was crazy.

112
00:06:27.308 --> 00:06:31.588
And I'm just literally gonna
copy everything, all right?

113
00:06:31.588 --> 00:06:36.312
We are programmers here, there's some
percentage of what we do that is copying.

114
00:06:36.312 --> 00:06:40.198
I don't like to say it's all copying,
okay, but there is some percentage some

115
00:06:40.198 --> 00:06:43.504
consts exists out there where
the coefficient is less than one, and

116
00:06:43.504 --> 00:06:45.362
I'm just gonna paste this all there.

117
00:06:45.362 --> 00:06:47.760
And before I do that,
I'm gonna remove WebSockets,

118
00:06:47.760 --> 00:06:49.799
because we don't want WebSockets anymore.

119
00:06:49.799 --> 00:06:52.269
We don't want JavaScript anymore.

120
00:06:52.269 --> 00:06:54.697
12 down, I'm gonna remove server.

121
00:06:54.697 --> 00:06:57.708
When I remove server, it's gonna
cause a bunch of issues down here.

122
00:06:57.708 --> 00:07:01.395
And what I'm gonna do, I'm gonna
delete these ones right here, but

123
00:07:01.395 --> 00:07:04.777
I'm gonna keep these two,
because I wanna move the logs over.

124
00:07:04.777 --> 00:07:08.049
All right, so
now let's do the upgrade here.

125
00:07:08.049 --> 00:07:14.468
So I'll go up here, I'm gonna
import MicrowebSockets, let's see.

126
00:07:14.468 --> 00:07:20.604
It's star as MicrowebSockets from
uNetworking, or uWebSockets, there we go.

127
00:07:20.604 --> 00:07:24.776
So now we have this beautiful new
librarian, it's nice and fast,

128
00:07:24.776 --> 00:07:26.277
very excited about it.

129
00:07:26.277 --> 00:07:29.142
And we'll delete out this thing,
uwebsockets.

130
00:07:29.142 --> 00:07:30.855
We're not gonna do SSL, okay?

131
00:07:30.855 --> 00:07:34.380
I mean, what do they think,
I mean, come on.

132
00:07:34.380 --> 00:07:38.168
This isn't that kind of course,
we're just here doing stuff.

133
00:07:38.168 --> 00:07:39.324
All right, so we have our app.

134
00:07:39.324 --> 00:07:41.645
We're gonna listen on Slash.

135
00:07:41.645 --> 00:07:45.364
I am not gonna do any of these items
though, I'm sure there's some of these

136
00:07:45.364 --> 00:07:49.321
that could be really good, should we do
per packet compression, all these kind

137
00:07:49.321 --> 00:07:52.887
of extra options in WebSockets,
well, I haven't tested any of that.

138
00:07:52.887 --> 00:07:56.695
Right now, I'm just simply gonna say no,
and we have three functions here.

139
00:07:56.695 --> 00:08:03.029
Now, what makes this really interesting,
Is how they set this up.

140
00:08:03.029 --> 00:08:08.128
They set it up in such a way that I think
actually makes it way nicer to work with,

141
00:08:08.128 --> 00:08:09.999
and then we also wanna open.

142
00:08:09.999 --> 00:08:13.687
So, I want you to think
about how WS does it.

143
00:08:13.687 --> 00:08:18.270
They hand you a WebSocket, and
then you need to add listeners to it.

144
00:08:18.270 --> 00:08:21.171
The event listener has a map,
it does a bunch of stuff, and

145
00:08:21.171 --> 00:08:24.740
then you have to remove that part
blah blah, there's quite a bit to it.

146
00:08:24.740 --> 00:08:28.369
Whereas with this one,
every single function that's called,

147
00:08:28.369 --> 00:08:32.613
they also just hand the WebSocket to you,
which is a little bit different.

148
00:08:32.613 --> 00:08:36.128
You don't have to do things
nearly the same way,

149
00:08:36.128 --> 00:08:39.406
which I think is is just
a nicer way to do this.

150
00:08:39.406 --> 00:08:43.030
I like that because that means you can
do more performance based activities,

151
00:08:43.030 --> 00:08:46.877
because you can make your program instead
of having a reference to the WebSocket,

152
00:08:46.877 --> 00:08:48.513
and then listening for messages.

153
00:08:48.513 --> 00:08:51.772
You can have a message listener that
passes it through to some sort of queue

154
00:08:51.772 --> 00:08:54.943
specifically for that WebSocket cuz
you already have that WebSocket.

155
00:08:54.943 --> 00:08:58.404
We could dangle it off the WebSocket,
we could just add properties.

156
00:08:58.404 --> 00:09:00.533
In some reality,
we could just be like queue, right?

157
00:09:00.533 --> 00:09:01.798
We could just add our own to it,

158
00:09:01.798 --> 00:09:04.636
because this is JavaScript you can
do whatever you really want to do.

159
00:09:04.636 --> 00:09:07.109
If we want it to be all kind of
like efficient with our time,

160
00:09:07.109 --> 00:09:08.880
there's some cool stuff that you can do.

161
00:09:08.880 --> 00:09:11.212
But for now,
we're not gonna do any of those things.

162
00:09:11.212 --> 00:09:14.321
I'm gonna erase this Git because,
well, we don't need to do that.

163
00:09:14.321 --> 00:09:18.785
And we definitely don't listen on 9001,
we listen on port 4269.

164
00:09:18.785 --> 00:09:24.486
So there we go, we have this, and let me
move over our nice delicious logging.

165
00:09:24.486 --> 00:09:31.367
We'll do that, I don't know what
happens specifically in this file.

166
00:09:31.367 --> 00:09:35.008
But whatever, I know this is such a scale
issue moment I'm having right now.

167
00:09:35.008 --> 00:09:38.273
For whatever reason right here,
tree sitter falls apart, and

168
00:09:38.273 --> 00:09:41.660
cannot indent right here, and
it just it just drives me nuts, and

169
00:09:41.660 --> 00:09:44.676
I already know if I were to
look at frontendmasters.com,

170
00:09:44.676 --> 00:09:48.329
or look at Twitch, it's gonna just
be a wall of the worst skill issue.

171
00:09:48.329 --> 00:09:51.349
OK, we're not doing it,
we're not looking at it.

172
00:09:51.349 --> 00:09:54.759
So there we go, we have this
delicious nice listening function,

173
00:09:54.759 --> 00:09:56.001
everything's great.

174
00:09:56.001 --> 00:09:59.035
I will now delete this right down here,
and

175
00:09:59.035 --> 00:10:03.858
I'll move this up here, so
we have logging in proper for ordering.

176
00:10:03.858 --> 00:10:04.939
Yeah, get out of here.

177
00:10:04.939 --> 00:10:07.063
All right, beautiful and beautiful.

178
00:10:07.063 --> 00:10:10.108
So now we need to kind of reorganize
our app to work with this.

179
00:10:10.108 --> 00:10:12.958
Now how are we gonna do this?

180
00:10:12.958 --> 00:10:15.074
It might be a bit more tricky.

181
00:10:15.074 --> 00:10:17.971
First off, we probably don't need code or
message, we really just need this.

182
00:10:17.971 --> 00:10:20.251
And so
I'm gonna create something called onClose.

183
00:10:20.251 --> 00:10:22.082
That's just gonna take a WebSocket.

184
00:10:22.082 --> 00:10:25.060
I'm gonna create something,
let's see for, for open, well,

185
00:10:25.060 --> 00:10:28.166
we can actually just pass into the runner,
the WebSocket, right?

186
00:10:28.166 --> 00:10:32.279
Because before that's what we were doing
is, whenever a new connection came in,

187
00:10:32.279 --> 00:10:35.093
we just handed it to the runner,
and said, here you go.

188
00:10:35.093 --> 00:10:36.686
Here's a new web socket.

189
00:10:36.686 --> 00:10:42.016
Lastly for the message, let's do something
like on message, and just pass in the WS.

190
00:10:42.016 --> 00:10:45.442
And then let's go buffer from,
cause this is technically,

191
00:10:45.442 --> 00:10:47.265
it's an array buffer, right?

192
00:10:47.265 --> 00:10:49.129
So we're gonna go buffer from message.

193
00:10:49.129 --> 00:10:51.688
I'm sure there's a nice way to do this,
but

194
00:10:51.688 --> 00:10:54.467
we know we're getting
stringified messages.

195
00:10:54.467 --> 00:10:56.482
We already know it's not binary data.

196
00:10:56.482 --> 00:10:59.012
So I'm just gonna
pre-emptively springify it.

197
00:10:59.012 --> 00:11:02.237
So we need to create this on message,
and onClose in our game.

198
00:11:02.237 --> 00:11:04.905
That can kind of browse through
based on the WebSocket, so

199
00:11:04.905 --> 00:11:07.308
we can start updating these queues and
everything.

200
00:11:07.308 --> 00:11:08.472
And so hopefully this is faster.

201
00:11:08.472 --> 00:11:13.338
Hopefully my hypothesis that less
JavaScript equals more speed actually

202
00:11:13.338 --> 00:11:14.596
bears some fruit.

203
00:11:14.596 --> 00:11:17.354
All right, let's find out.

204
00:11:17.354 --> 00:11:19.629
So the next thing we need to
do is create those functions.

205
00:11:19.629 --> 00:11:23.302
So I'm gonna go all the way up here
to the tip pity-top, and well,

206
00:11:23.302 --> 00:11:26.056
we don't have to wait for
open anymore do we know,

207
00:11:26.056 --> 00:11:29.750
we don't pick us the thing tells
you when the window sockets open.

208
00:11:29.750 --> 00:11:32.255
Awesome, all right, so
let's do our two functions.

209
00:11:32.255 --> 00:11:33.249
We're gonna go like this.

210
00:11:33.249 --> 00:11:36.738
We're gonna first do WS to state.

211
00:11:36.738 --> 00:11:38.116
And this is gonna be a new map.

212
00:11:38.116 --> 00:11:40.472
I don't need to do a week map,
no one's a week around here, and

213
00:11:40.472 --> 00:11:41.726
this will be WebSocket to state.

214
00:11:41.726 --> 00:11:44.944
I guess we're gonna be
using a lookup like this.

215
00:11:44.944 --> 00:11:50.244
I have some ideas to make this better,
but I'm just gonna keep it simple.

216
00:11:50.244 --> 00:11:54.084
Use a map, I know I'm gonna have
a lot of them, it's not gonna be 20,

217
00:11:54.084 --> 00:11:57.416
it's gonna be 1,000, 2,000, 4,000, so,

