WEBVTT

1
00:00:00.323 --> 00:00:03.084
So let's see,
did we actually improve the performance?

2
00:00:03.084 --> 00:00:05.544
So our integration tests are now working.

3
00:00:05.544 --> 00:00:08.323
I'm a positive, a lot of you did
not follow along with that code.

4
00:00:08.323 --> 00:00:11.965
I hope you followed along with the idea,
which is to measure, identify,

5
00:00:11.965 --> 00:00:13.564
come up with a better solution.

6
00:00:13.564 --> 00:00:15.910
Don't just try to fix that one function.

7
00:00:15.910 --> 00:00:18.790
If we would have just thought
about how to make timer better,

8
00:00:18.790 --> 00:00:21.965
guarantee you we would not have
come up with a, or take her better.

9
00:00:21.965 --> 00:00:23.427
We would not have come up with a solution.

10
00:00:23.427 --> 00:00:26.464
You really do wanna think larger and
outside of the box and

11
00:00:26.464 --> 00:00:27.987
identify what is the issue.

12
00:00:27.987 --> 00:00:32.252
And memory plus CPU is a great way to
know where the issue was, all right?

13
00:00:32.252 --> 00:00:34.941
So we have that let's
start this server up.

14
00:00:34.941 --> 00:00:38.310
And what I'm gonna do is do the exact
same thing we have been doing,

15
00:00:38.310 --> 00:00:40.969
which is I'm gonna go
second optimization 500.

16
00:00:40.969 --> 00:00:42.930
And I'm gonna drop the inspect, okay?

17
00:00:42.930 --> 00:00:43.950
We don't even wanna see the inspect.

18
00:00:43.950 --> 00:00:47.435
We'll look at, we'll look at
the performance here in a moment to see if

19
00:00:47.435 --> 00:00:50.065
we did it, but
I just wanna see do what do we have here?

20
00:00:50.065 --> 00:00:53.485
So I'm gonna run this one,
and I'm gonna now run cargo.

21
00:00:53.485 --> 00:00:58.167
Everyone's favorite language,
Rust, with 500.

22
00:00:58.167 --> 00:01:00.319
And so we're gonna let this thing run for
a moment.

23
00:01:00.319 --> 00:01:02.502
It's at temp shout out 500.

24
00:01:02.502 --> 00:01:06.088
So let's see if we got
anything going here.

25
00:01:06.088 --> 00:01:10.362
I'm gonna put this in and use our
little identifying program to do this,

26
00:01:10.362 --> 00:01:12.194
that's first optimization.

27
00:01:12.194 --> 00:01:15.247
I was about to say that,
looks like we've already done this before.

28
00:01:15.247 --> 00:01:19.603
Second optimization, okay, hey,
this is starting to look a lot better, and

29
00:01:19.603 --> 00:01:22.904
this isn't even compounded
with our first optimization.

30
00:01:22.904 --> 00:01:27.006
This is just the second optimization.

31
00:01:27.006 --> 00:01:29.228
So let this one run for a while.

32
00:01:29.228 --> 00:01:37.689
Our ratio is already looking significantly
better locally, or really the percentage.

33
00:01:37.689 --> 00:01:38.676
So let it run.

34
00:01:38.676 --> 00:01:43.160
We're gonna try to get about
a thousand games played.

35
00:01:43.160 --> 00:01:44.595
This is great.
This is actually great.

36
00:01:44.595 --> 00:01:47.506
This is really what you
wanna see because honestly,

37
00:01:47.506 --> 00:01:52.284
when you're doing performance work, and
you see just like movement by 5% or 3%.

38
00:01:52.284 --> 00:01:54.531
I mean often I'm just like
am I lying to myself?

39
00:01:54.531 --> 00:01:55.901
Am I kidding myself?

40
00:01:55.901 --> 00:01:57.761
I don't know why this is better, but

41
00:01:57.761 --> 00:02:01.912
it doesn't feel like it's better because
it doesn't It doesn't feel real yet.

42
00:02:01.912 --> 00:02:05.784
I wanna see something that jumps in
a real intangible way, all right?

43
00:02:05.784 --> 00:02:06.707
So I'm just gonna kill that.

44
00:02:06.707 --> 00:02:08.623
Notice that we actually went down, okay?

45
00:02:08.623 --> 00:02:10.725
All right, 18% of the time.

46
00:02:10.725 --> 00:02:16.413
Now, if you remember when we started off
this, we originally started off at 31.6.

47
00:02:16.413 --> 00:02:19.790
Our first optimization only
brought it down to 30.9.

48
00:02:19.790 --> 00:02:21.510
And we're not even sure if that's real.

49
00:02:21.510 --> 00:02:23.035
And so this one was a real one,

50
00:02:23.035 --> 00:02:25.974
I would say we have dramatically
changed the landscape.

51
00:02:25.974 --> 00:02:28.671
And I'm sure when we profile it,
we'll see that it's dramatically changed.

52
00:02:28.671 --> 00:02:30.460
So again, we're gonna do the boring part.

53
00:02:30.460 --> 00:02:31.935
We're gonna go to 1000.

54
00:02:31.935 --> 00:02:33.921
We're gonna relaunch this thing.

55
00:02:33.921 --> 00:02:37.558
We're gonna do it again over here and
relaunch that one.

56
00:02:37.558 --> 00:02:42.181
And we're gonna let it go for
a little while longer.

57
00:02:42.181 --> 00:02:47.961
We're gonna let this thing run, and
then we'll do a little bit of a recap.

58
00:02:47.961 --> 00:02:52.896
And then the third optimization
is a very fun one.

59
00:02:52.896 --> 00:02:53.735
It's very fun.

60
00:02:53.735 --> 00:02:54.768
It's very exciting.

61
00:02:54.768 --> 00:02:57.139
Very easy, very exciting.

62
00:02:57.139 --> 00:02:58.037
Much wow.

63
00:03:01.305 --> 00:03:04.578
And for those that are joining on
frontendmasters.com or Twitch, yes,

64
00:03:04.578 --> 00:03:05.968
there is a live audience here.

65
00:03:05.968 --> 00:03:09.054
Not very many,
they're very quiet right now.

66
00:03:09.054 --> 00:03:10.832
My typing might've been too fast.

67
00:03:13.413 --> 00:03:15.385
Too furious, use Vim by the way.

68
00:03:15.385 --> 00:03:17.479
It's a good time.

69
00:03:17.479 --> 00:03:19.322
It's a good time.

70
00:03:19.322 --> 00:03:20.211
All right, so we're almost there.

71
00:03:20.211 --> 00:03:21.085
Look at this.

72
00:03:21.085 --> 00:03:25.127
I mean, the ratio somehow is even better
at this point than it was when we did 500.

73
00:03:25.127 --> 00:03:26.775
So what's that all about?

74
00:03:26.775 --> 00:03:29.680
Nobody knows, maybe we just didn't
let the 500 one run long enough.

75
00:03:29.680 --> 00:03:31.369
It's going down in value,
but look at that.

76
00:03:31.369 --> 00:03:32.697
This is really good right?

77
00:03:32.697 --> 00:03:34.401
I'm happy about this.

78
00:03:34.401 --> 00:03:36.125
Did I know this was gonna happen?

79
00:03:36.125 --> 00:03:37.363
Maybe.

80
00:03:37.363 --> 00:03:40.317
Maybe I did know it was gonna happen,
all right?

81
00:03:40.317 --> 00:03:41.528
Let's do one more.

82
00:03:41.528 --> 00:03:45.083
I know this is the boring part,
but I just really wanna

83
00:03:45.083 --> 00:03:49.665
make sure we have a good history of
what happened because it's just so

84
00:03:49.665 --> 00:03:52.998
important to have that
history of what happened.

85
00:03:52.998 --> 00:03:56.034
You don't wanna lose this
because you've got to see it.

86
00:03:56.034 --> 00:03:59.307
Putting things in temp, by the way,
it's a really great way to lose it on

87
00:03:59.307 --> 00:04:02.440
accident when you restart your system and
all of your data goes away.

88
00:04:02.440 --> 00:04:07.201
So, I don't recommend storing things
in temp, but sometimes it's nice.

89
00:04:07.201 --> 00:04:09.240
&gt;&gt; Can I just say you're going so fast and

90
00:04:09.240 --> 00:04:11.934
furious that you could
call yourself Vin Diesel?

91
00:04:11.934 --> 00:04:16.484
&gt;&gt; I could call myself Vin Diesel, but
I'd be infringing on Luke Smith, so

92
00:04:16.484 --> 00:04:20.902
I will not infringe upon him, but
Is that a thing that already exists?

93
00:04:20.902 --> 00:04:23.498
&gt;&gt; Yea, someone already has Vin Diesel.

94
00:04:23.498 --> 00:04:26.844
That was a good, I'm gonna give you
many points for knowing this, okay?

95
00:04:26.844 --> 00:04:29.352
I'm gonna give you many points for
at least coming up with it, all right?

96
00:04:29.352 --> 00:04:32.069
So we're about done.

97
00:04:32.069 --> 00:04:32.847
Look at this, okay?

98
00:04:32.847 --> 00:04:35.781
So we'll do a quick recap.

99
00:04:35.781 --> 00:04:40.373
So that way anyone that's just
joining us now can get a good recap,

100
00:04:40.373 --> 00:04:43.739
and we can kind of see what's happening,
okay?

101
00:04:43.739 --> 00:04:47.859
So we started off the day with
absolutely no optimizations when we ran

102
00:04:47.859 --> 00:04:50.779
500 concurrent games at
the exact same time.

103
00:04:50.779 --> 00:04:53.240
31% of the time we were dropping frames.

104
00:04:53.240 --> 00:04:56.751
When I say dropping frames,
it's not quite accurate for the term drop.

105
00:04:56.751 --> 00:05:01.445
It's less than that, dropping frame
usually involves when you exceed a V-sync

106
00:05:01.445 --> 00:05:03.388
or go beyond 16 milliseconds.

107
00:05:03.388 --> 00:05:06.947
But this one,
anything that's above 17 milliseconds and

108
00:05:06.947 --> 00:05:09.468
below 15 is considered a drop in my case.

109
00:05:09.468 --> 00:05:13.950
And so we're at 31% of the time,
we were dropping frames at 500.

110
00:05:13.950 --> 00:05:18.055
At 1000, we were at 36 on my computer,
and at 2000 games running,

111
00:05:18.055 --> 00:05:21.098
we were at 62% of the time
We were just doing horrible.

112
00:05:21.098 --> 00:05:22.567
We made our first optimization.

113
00:05:22.567 --> 00:05:25.360
We barely changed the needle at 500.

114
00:05:25.360 --> 00:05:28.288
Sort of changed the needle at a thousand,
maybe, maybe not.

115
00:05:28.288 --> 00:05:30.391
And at 2000,
it does look like we did something.

116
00:05:30.391 --> 00:05:31.789
We're down to 43%.

117
00:05:31.789 --> 00:05:35.635
The second optimization,
just based off of the original game.

118
00:05:35.635 --> 00:05:39.804
We went from 31% to 18.

119
00:05:39.804 --> 00:05:41.946
What, 36% to 16?

120
00:05:41.946 --> 00:05:44.185
So you can see there's some variability
when you're measuring, right?

121
00:05:44.185 --> 00:05:45.285
So you just got to be aware of that.

122
00:05:45.285 --> 00:05:48.486
And even at 2000,
we went from 60 some to just 30 some.

123
00:05:48.486 --> 00:05:50.771
So like there's something
real going on here.

124
00:05:50.771 --> 00:05:52.611
I think we've made some good changes.

125
00:05:52.611 --> 00:05:56.410
And so let's look at what's happening,
but with the inspect flag,

126
00:05:56.410 --> 00:05:58.586
don't forget to change your log path.

127
00:05:58.586 --> 00:06:02.448
I should just go.
Always go testing for this and let's go.

128
00:06:02.448 --> 00:06:02.974
Let's just go.

129
00:06:02.974 --> 00:06:05.003
Instead of 1000 games,
we're gonna go to 2000 games.

130
00:06:05.003 --> 00:06:07.941
I feel like our server can handle this,
should be pretty easy.

131
00:06:07.941 --> 00:06:12.701
And so if we look at our previous one,
we had a bunch of time in garbage,

132
00:06:12.701 --> 00:06:17.808
14.6% of the time in garbage,
9.2% of the time in Register Hook.

133
00:06:17.808 --> 00:06:22.076
We had a bunch of time destroy list on
timeout, emit hook before promise hook,

134
00:06:22.076 --> 00:06:26.343
and, no, just a lot of these like little
functions that are all taking up about

135
00:06:26.343 --> 00:06:27.396
a percent of time.

136
00:06:27.396 --> 00:06:28.958
So let's record for 10 seconds.

137
00:06:38.399 --> 00:06:39.352
I'm gonna stop that.

138
00:06:39.352 --> 00:06:43.456
And before we look at the results,
I'm just gonna jump over here and

139
00:06:43.456 --> 00:06:47.490
start a memory record just, so
we can see that and see what it does.

140
00:06:47.490 --> 00:06:49.310
All right, so let's go back here.

141
00:06:49.310 --> 00:06:51.027
Idle is still at the top.

142
00:06:51.027 --> 00:06:54.123
Update, we didn't merge over the changes.

143
00:06:54.123 --> 00:06:56.706
It's now taking up a larger
portion of our program.

144
00:06:56.706 --> 00:07:00.626
Before it was like in the 14 to 15%,
now it's taken up 24%.

145
00:07:00.626 --> 00:07:03.691
But I want you to notice
something really big here.

146
00:07:03.691 --> 00:07:10.207
Garbage, 7%, it went from a big portion,
and it went down a bunch.

147
00:07:10.207 --> 00:07:11.012
Register hook destroy.

148
00:07:11.012 --> 00:07:12.571
We still are getting promises here.

149
00:07:12.571 --> 00:07:13.621
So that's a little strange.

150
00:07:13.621 --> 00:07:15.762
I thought we took out all of our promises.

151
00:07:15.762 --> 00:07:17.668
I thought we did the right thing.

152
00:07:17.668 --> 00:07:20.819
We still see a little bit more
promise in knitting here.

153
00:07:20.819 --> 00:07:22.699
I'm starting to see some web sockets,
right?

154
00:07:22.699 --> 00:07:24.082
Or buffer, okay?

155
00:07:24.082 --> 00:07:27.482
So we're starting to see some new things
starting to make some plays for the top,

156
00:07:27.482 --> 00:07:27.986
all right?

157
00:07:27.986 --> 00:07:31.628
So this is good to know,
but we still have promises.

158
00:07:31.628 --> 00:07:33.077
So, what the heck's that?

159
00:07:33.077 --> 00:07:35.725
So let's look at our memory and
let's see if that's actually true.

160
00:07:35.725 --> 00:07:37.940
Does our memory bear out
that we still have promises?

161
00:07:37.940 --> 00:07:43.267
If I look in here,
I may have not let it run long enough.

162
00:07:43.267 --> 00:07:45.478
I don't think I let it run long enough.

163
00:07:45.478 --> 00:07:46.174
Come on.

164
00:07:46.174 --> 00:07:47.239
&gt;&gt; Come on.

165
00:07:47.239 --> 00:07:50.593
&gt;&gt; Okay, so there is actually one
other place we do have promises.

166
00:07:50.593 --> 00:07:54.949
And I wanted to save this because this
is just so incredibly disappointing.

167
00:07:54.949 --> 00:07:57.625
If we go into my data writer,

168
00:07:57.625 --> 00:08:02.981
I just accidentally left some
syncs on these functions.

169
00:08:02.981 --> 00:08:05.677
We had garbage collection
running at 7% of the time.

170
00:08:05.677 --> 00:08:09.148
We had that other,
that emit, what's it called,

171
00:08:09.148 --> 00:08:14.095
registered destroy hooks, 5%,
4.5% of the time it was running.

172
00:08:14.095 --> 00:08:16.195
A net, 3.2% of the time it was running.

173
00:08:16.195 --> 00:08:20.219
And I literally just accidentally
left some asyncs on there.

174
00:08:20.219 --> 00:08:22.534
And they're not even async,
they don't even do anything.

175
00:08:22.534 --> 00:08:28.038
So if I just simply erase this and
erase this, save, it's no longer async,

176
00:08:28.038 --> 00:08:33.203
nor did we ever use it to be async,
and just simply rerun these results.

177
00:08:33.203 --> 00:08:38.641
Again, emotional trauma
is going on right now.

178
00:08:38.641 --> 00:08:40.061
I'll let it run for first second.

179
00:08:40.061 --> 00:08:42.373
I know, again, how crazy is that?

180
00:08:42.373 --> 00:08:44.561
Because we call out a couple of
things to our data writer so

181
00:08:44.561 --> 00:08:45.846
we can aggregate a bunch of data.

182
00:08:45.846 --> 00:08:49.848
What the data writer does is it takes in a
bunch of the data instead of just writing

183
00:08:49.848 --> 00:08:52.016
it all out to disk, it aggregates a bunch.

184
00:08:52.016 --> 00:08:55.701
And then after some amount of time, it'll
just write out one small piece of data

185
00:08:55.701 --> 00:08:58.953
that is the aggregated version
instead of every single little event.

186
00:08:58.953 --> 00:09:00.801
And so when I read profile this.

187
00:09:03.996 --> 00:09:06.270
Let it run, let it run.

188
00:09:13.033 --> 00:09:15.058
Notice that that all went away.

189
00:09:15.058 --> 00:09:16.357
And also notice garbage collection.

190
00:09:16.357 --> 00:09:19.439
It went from 7% to 2%.

191
00:09:19.439 --> 00:09:23.104
You know how many times you put something
on your server for convenience to be

192
00:09:23.104 --> 00:09:26.551
a promise always, and a lot of time
you're reading it synchronously.

193
00:09:26.551 --> 00:09:28.830
It can literally have
an effect on your program.

194
00:09:28.830 --> 00:09:30.816
How wild is that?

195
00:09:30.816 --> 00:09:34.358
It's like we didn't even wonder, we're
not even smart programming at this point.

196
00:09:34.358 --> 00:09:39.772
We just removed the word async and
4% went away another 5% went away,

197
00:09:39.772 --> 00:09:44.044
another 3% went away,
it's rather wild what that is.

198
00:09:44.044 --> 00:09:46.370
And so let's jump back down here,
and I'm gonna go like this.

199
00:09:46.370 --> 00:09:52.041
I'm gonna call the second optimization
2000, and I'm gonna call it -2, right?

200
00:09:52.041 --> 00:09:55.486
And let's just do one measurement
out at the 2000 to see what happens,

201
00:09:55.486 --> 00:09:57.522
see if we can even see
a difference out here.

202
00:09:57.522 --> 00:10:00.795
We'll do 2000 run on our little system,
and we'll go check, and

203
00:10:00.795 --> 00:10:03.527
we'll actually see do we
actually see anything, right?

204
00:10:03.527 --> 00:10:07.577
Because you know,
maybe we actually don't see anything,

205
00:10:07.577 --> 00:10:11.152
maybe that it's not practically seeable,
right?

206
00:10:11.152 --> 00:10:13.200
And so we're gonna let this thing run for
a little bit.

207
00:10:20.046 --> 00:10:23.979
I don't know if promises can be
replaced with generators and yields.

208
00:10:23.979 --> 00:10:29.305
I don't know if there's
a big difference there.

209
00:10:29.305 --> 00:10:30.107
I have no idea.

210
00:10:30.107 --> 00:10:33.744
So I've never tried playing
around with generators.

211
00:10:33.744 --> 00:10:34.755
They're neat.

212
00:10:34.755 --> 00:10:37.035
You get to add an asterisk
to your function.

213
00:10:37.035 --> 00:10:38.981
They're really cool for file tree walks.

214
00:10:38.981 --> 00:10:39.998
I just have never done one.

215
00:10:39.998 --> 00:10:43.340
So I honestly just simply have no idea.

216
00:10:43.340 --> 00:10:49.395
&gt;&gt; Someone commented a stinky,
&gt;&gt; A stinky, it is a stinky, all right?

217
00:10:49.395 --> 00:10:53.342
So it looks like it might make
a difference, probably not.

218
00:10:53.342 --> 00:10:56.150
But at the end of that it's pretty
much the same value factor,

219
00:10:56.150 --> 00:10:57.718
even looks like a little bit more.

220
00:10:57.718 --> 00:10:58.758
So in our time,

221
00:10:58.758 --> 00:11:04.045
it looks like this change was what I
would refer to as a non-impactful change.

222
00:11:04.045 --> 00:11:07.919
But we are reducing the pressure on the
garbage collection meaning that if another

223
00:11:07.919 --> 00:11:11.627
part of our programs say we added in some
more analytics started producing more

224
00:11:11.627 --> 00:11:12.994
garbage, we now have room.

225
00:11:12.994 --> 00:11:16.969
We can now make changes to our
program that we have a room to make.

226
00:11:16.969 --> 00:11:18.489
And so this is a little bit of headroom.

227
00:11:18.489 --> 00:11:25.326
Very good thing to always have ready,
and not to just simply let go so easily.

228
00:11:25.326 --> 00:11:26.024
So there we go.

229
00:11:26.024 --> 00:11:29.908
Yeah.
So effectively-ish, the same, okay?

230
00:11:29.908 --> 00:11:33.833
So we didn't really make an impact here
on our program with that last change, but

231
00:11:33.833 --> 00:11:34.998
we have more headroom.

232
00:11:34.998 --> 00:11:37.911
So interesting thing to consider.

233
00:11:37.911 --> 00:11:41.093
Is that just because you
put the async keyword, but

234
00:11:41.093 --> 00:11:43.693
don't even use the promise or anything.

235
00:11:43.693 --> 00:11:45.525
It doesn't mean it's free, right?

236
00:11:45.525 --> 00:11:50.537
Cause at the end of the day, V8 doesn't
know you're not using that promise.

237
00:11:50.537 --> 00:11:54.594
Like, I can't imagine their analysis
is that deep that it's able to say,

238
00:11:54.594 --> 00:11:56.241
no one ever actually used this.

239
00:11:56.241 --> 00:11:58.385
Maybe they can at some point,
maybe they will soon.

240
00:11:58.385 --> 00:12:01.702
I have no idea, but
that seems like a hard problem to know,

241
00:12:01.702 --> 00:12:05.048
if your function will never
actually be used in a promise.

242
00:12:05.048 --> 00:12:07.514
There's a lot to that,
but this is painful.

243
00:12:07.514 --> 00:12:09.457
It's painful to see that happens.

244
00:12:09.457 --> 00:12:10.955
So now let's try something.

245
00:12:10.955 --> 00:12:15.324
Our update function is now the most
commanding item, 25% of the time.

246
00:12:15.324 --> 00:12:19.515
Let's try, I'm gonna go home, git status,

247
00:12:19.515 --> 00:12:23.172
git add, git commit, I opt 2, right?

248
00:12:23.172 --> 00:12:26.216
Awesome, and
I'm gonna check out FSO, okay?

249
00:12:26.216 --> 00:12:28.693
First optimization plus
second optimization.

250
00:12:28.693 --> 00:12:33.307
I'm gonna go git merge
first optimization awesome.

251
00:12:33.307 --> 00:12:36.175
We merged in fantastic,
or didn't you rebase?

252
00:12:36.175 --> 00:12:37.362
It doesn't really matter at this point.

253
00:12:37.362 --> 00:12:38.739
So now we have them both in.

254
00:12:38.739 --> 00:12:43.369
So just for fun,
let's go Also do one more run, but

255
00:12:43.369 --> 00:12:48.121
let's add in a,
I'm gonna call this FSO 2000.

256
00:12:48.121 --> 00:12:52.902
Let's see, does this actually make
a difference with our new update function?

257
00:12:52.902 --> 00:12:56.706
Are we finally hitting a spot
where it makes a big difference?

258
00:12:56.706 --> 00:13:00.746
Because last time, it made a difference,
but it only really made it in

259
00:13:00.746 --> 00:13:04.453
the upper bounds, we really didn't
see it in the lower bounds.

260
00:13:04.453 --> 00:13:09.756
So I believe we're running again,
fantastic.

261
00:13:09.756 --> 00:13:15.959
And so I'll do this thing, and we'll call
this one FSO, first second optimization.

262
00:13:22.339 --> 00:13:26.915
Not gonna lie to you, it doesn't look like
it's gonna do anything, which is too bad.

263
00:13:26.915 --> 00:13:30.387
Feels sad, right?

264
00:13:30.387 --> 00:13:31.618
Very sad.

265
00:13:31.618 --> 00:13:35.065
So even though we keep feeling
like there's a there or there,

266
00:13:35.065 --> 00:13:37.398
it really hasn't yielded much, has it?

267
00:13:37.398 --> 00:13:42.367
And so this is one of the problem about
hotspot optimizations is not all hotspots

268
00:13:42.367 --> 00:13:44.085
are meaningful hotspots.

269
00:13:44.085 --> 00:13:48.530
You know, like this update function, we
keep trying to, it clearly was a big spot.

270
00:13:48.530 --> 00:13:52.637
And again, it looks like it's made
a small impact on our program from 30-ish

271
00:13:52.637 --> 00:13:54.303
percent down to 27 and a half.

272
00:13:54.303 --> 00:13:55.406
Is that even real?

273
00:13:55.406 --> 00:13:59.506
Maybe this would be something we'd have
to check out in production, something

274
00:13:59.506 --> 00:14:03.543
that we'd have to really measure over
a course of a lot of requests in time, but

275
00:14:03.543 --> 00:14:05.707
maybe there's something there, okay?

276
00:14:05.707 --> 00:14:13.265
[SOUND] So sort of, we can say that this
sort of did something, but maybe not.

277
00:14:13.265 --> 00:14:16.320
The reason why I wanted to have this
as a part of it, is that it's so

278
00:14:16.320 --> 00:14:20.211
important to realize that just because you
make a performance change, and it looks

279
00:14:20.211 --> 00:14:23.903
like it makes a difference in a graph,
it may not be as meaningful as possible.

280
00:14:23.903 --> 00:14:28.395
I really like making changes in which
show up both on the performance side and

281
00:14:28.395 --> 00:14:29.597
on the memory side.

282
00:14:29.597 --> 00:14:33.939
That's usually always a good indicator
that that change will be bigger.

283
00:14:33.939 --> 00:14:38.991
Now, we still have some more room and
some more things to do that actually have

284
00:14:38.991 --> 00:14:44.278
some pretty big changes and can make some
pretty good, exciting things happen,

285
00:14:44.278 --> 00:14:49.041
and it may even make update into
something that's important to change.

