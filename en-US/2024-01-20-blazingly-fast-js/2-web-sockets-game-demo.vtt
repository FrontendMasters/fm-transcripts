WEBVTT

1
00:00:00.290 --> 00:00:02.198
So, we're gonna talk about the basic game,

2
00:00:02.198 --> 00:00:04.420
or the basic little program
we're gonna be making.

3
00:00:04.420 --> 00:00:08.770
I made a really dumb shooter program
that looks something like this.

4
00:00:08.770 --> 00:00:12.366
This is obviously, there's no graphics,
it just runs in Node, so I made my own

5
00:00:12.366 --> 00:00:15.960
pictorial version of it so that we can
see it and see how beautiful it is.

6
00:00:15.960 --> 00:00:18.100
Effectively, two people
are standing far apart.

7
00:00:18.100 --> 00:00:19.587
They start shooting, at some rate.

8
00:00:19.587 --> 00:00:21.657
The bullets travel at some other rate.

9
00:00:21.657 --> 00:00:26.007
As the bullets get near each other,
they may collide, removing both bullets.

10
00:00:26.007 --> 00:00:29.877
It's only played in a plane, it's only
on a straight line, nothing fantastic.

11
00:00:29.877 --> 00:00:33.610
And once, of course, the bullet reaches
the final guy and touches one side or

12
00:00:33.610 --> 00:00:36.497
the other, well, that person dies and
that player loses.

13
00:00:36.497 --> 00:00:39.638
Then we send back a nice message saying,
hey, you won, you shot this many bullets,

14
00:00:39.638 --> 00:00:41.337
some basic statistics about what happened.

15
00:00:41.337 --> 00:00:45.621
And the other person, hey, you lost, but
hey, you got all these things, and so

16
00:00:45.621 --> 00:00:46.517
there we go.

17
00:00:46.517 --> 00:00:50.172
Fun game, it's a skill issue for
the person that died, I know feels bad for

18
00:00:50.172 --> 00:00:50.797
that guy.

19
00:00:50.797 --> 00:00:53.597
And so there we go,
that is what the program does.

20
00:00:53.597 --> 00:00:58.395
And so now we're gonna walk through what
the code is doing kind of line by line, so

21
00:00:58.395 --> 00:00:59.961
it shouldn't be too bad.

22
00:00:59.961 --> 00:01:04.696
So, see next, okay, so the first thing
is just we started really simple server.

23
00:01:04.696 --> 00:01:08.566
If you're not familiar, just do a little
WebSocket server, it's gonna be played

24
00:01:08.566 --> 00:01:12.493
over WebSockets, cuz you played with UDP,
probably UDP might be slightly better,

25
00:01:12.493 --> 00:01:15.112
but there's a lot of complication
when it comes to UDP.

26
00:01:15.112 --> 00:01:18.846
Just because I mean, you're still sending
TCP and at the end of the day a WebSocket

27
00:01:18.846 --> 00:01:22.258
header that's sending a small amount
of information only adds two bytes of

28
00:01:22.258 --> 00:01:24.606
information and
there's an XORing of the packet.

29
00:01:24.606 --> 00:01:28.240
So, I mean, it's not much, could be four
bytes or six bytes if you have the XOR

30
00:01:28.240 --> 00:01:31.843
part of it, so it's not like it's a huge
amount of overhead on these things.

31
00:01:31.843 --> 00:01:35.598
So, we're not gonna worry about
the fact that we're using WebSockets.

32
00:01:35.598 --> 00:01:36.955
All right, so
the server goes pretty simple.

33
00:01:36.955 --> 00:01:40.452
We start the server,
we create a runner for all the games, and

34
00:01:40.452 --> 00:01:45.859
then on every new connection I hand the
socket off to the runner, pretty simple.

35
00:01:45.859 --> 00:01:48.979
After that,
we start listening on the server.

36
00:01:48.979 --> 00:01:51.309
If we listen, awesome,
I'm gonna print it out.

37
00:01:51.309 --> 00:01:54.680
If we fail, I'm gonna print out,
hey, we can't start the server,

38
00:01:54.680 --> 00:01:57.709
just so we know all these
things are happening, okay?

39
00:01:57.709 --> 00:02:00.168
Everyone should be pretty
comfortable with that.

40
00:02:00.168 --> 00:02:01.858
And so let's look at the runner.

41
00:02:01.858 --> 00:02:05.868
The runner is pretty straightforward,
all it does is it has a waiting WebSocket.

42
00:02:05.868 --> 00:02:09.631
And when we have no waiting WebSocket,
we just add the first socket that comes in

43
00:02:09.631 --> 00:02:13.088
and then returns, if we have two,
we're gonna play the game, right?

44
00:02:13.088 --> 00:02:16.728
It's two people shooting at each other,
so once we have two WebSockets, we play.

45
00:02:16.728 --> 00:02:20.543
And then we just repeat this motion
over and over and over again.

46
00:02:20.543 --> 00:02:22.643
Okay, pretty straightforward, right?

47
00:02:22.643 --> 00:02:25.432
Now playing the game gets a little
bit more complicated, and

48
00:02:25.432 --> 00:02:28.656
I didn't really try to write this
code in the most beautiful sense, so

49
00:02:28.656 --> 00:02:30.473
I hope everyone can just follow along.

50
00:02:30.473 --> 00:02:33.556
First thing we do is obviously we wait for
the sockets both to be open,

51
00:02:33.556 --> 00:02:37.223
we don't want them to be in some sort
of opening state or connecting state.

52
00:02:37.223 --> 00:02:40.431
So once they're both opened,
we send a start command to both of them.

53
00:02:40.431 --> 00:02:43.370
If this was a real game, obviously
you'd send some sort of future time,

54
00:02:43.370 --> 00:02:45.811
you'd count down,
not allow key presses, all that.

55
00:02:45.811 --> 00:02:48.681
This is not a production game,
this is a fake game.

56
00:02:48.681 --> 00:02:51.101
Next, we create some state for
each player.

57
00:02:51.101 --> 00:02:53.582
After that, we listen to a bunch
of different messages for

58
00:02:53.582 --> 00:02:55.821
each one of the sockets,
hey, do we have a message?

59
00:02:55.821 --> 00:02:58.371
If we have a message,
we need to add it to that player's queue.

60
00:02:58.371 --> 00:03:00.743
If we got a close message,
we need to say the player closed.

61
00:03:00.743 --> 00:03:02.393
If we got an error,
we need to say the player errors.

62
00:03:02.393 --> 00:03:05.063
That way we can kinda keep track
of all the state of the socket.

63
00:03:05.063 --> 00:03:06.663
Next, we create a ticker.

64
00:03:06.663 --> 00:03:10.488
A ticker simply is going to,
as reliably as possible,

65
00:03:10.488 --> 00:03:14.863
create a 16.66, or
really an FPS amount of frames.

66
00:03:14.863 --> 00:03:18.260
And so, with this one, it's pretty simple,
we'll go over it here shortly.

67
00:03:18.260 --> 00:03:21.974
Next, create a new game, and
then after that I simply await for

68
00:03:21.974 --> 00:03:24.916
each time I'm supposed to
run my update loop, and

69
00:03:24.916 --> 00:03:27.953
it will hopefully update
as steadily as possible.

70
00:03:27.953 --> 00:03:31.618
If for whatever reason,
we update longer than 16 milliseconds,

71
00:03:31.618 --> 00:03:33.435
I do kind of do multiple updates.

72
00:03:33.435 --> 00:03:36.235
And the reason why I do that is
that the collision formula for

73
00:03:36.235 --> 00:03:38.901
two circles with time updates
are fairly complicated.

74
00:03:38.901 --> 00:03:42.152
Cated so I ensured that the bullets are
big enough, and they're moving fast enough

75
00:03:42.152 --> 00:03:44.709
that at 16 milliseconds,
even if they're next to each other,

76
00:03:44.709 --> 00:03:47.371
they'll still be overlapping
at the end of the day.

77
00:03:47.371 --> 00:03:50.249
I'm not a great game programmer and
I know these things, and so

78
00:03:50.249 --> 00:03:51.771
pretty straightforward.

79
00:03:51.771 --> 00:03:54.846
After that we check to see are there
any messages, if there are messages,

80
00:03:54.846 --> 00:03:58.131
we'll call a fire, and
then after that we'll clear out the queue.

81
00:03:58.131 --> 00:04:02.244
If the has ended or player one has closed,
or player two has closed, or

82
00:04:02.244 --> 00:04:05.311
player one has errored, or
player two has errored,

83
00:04:05.311 --> 00:04:09.286
we quit this loop, and
then we simply just get the stats out.

84
00:04:09.286 --> 00:04:12.036
If both players have screwed up,
don't do anything.

85
00:04:12.036 --> 00:04:15.226
If one player screwed up, send hey,
the other opponent disconnected.

86
00:04:15.226 --> 00:04:18.616
If the other player do that,
else send out the stats.

87
00:04:18.616 --> 00:04:21.252
Do a little bit of bookkeeping,
and that's it.

88
00:04:21.252 --> 00:04:24.270
So that is really our kind of our game
loop for running the games over and

89
00:04:24.270 --> 00:04:24.842
over again.

90
00:04:24.842 --> 00:04:28.212
So pretty straightforward,
pretty simple, I would say.

91
00:04:28.212 --> 00:04:30.832
Next, we have the ticker,
the ticker is pretty straightforward.

92
00:04:30.832 --> 00:04:35.602
All it does is it just simply calculates
intervals, and we have a next.

93
00:04:35.602 --> 00:04:39.758
Next just simply means, every single
next is gonna just be a plus rate,

94
00:04:39.758 --> 00:04:43.063
rate being the FPS, so 16.66666 forever.

95
00:04:43.063 --> 00:04:44.762
And so
it's just gonna keep on saying, hey,

96
00:04:44.762 --> 00:04:47.533
that's the next point in time in
which we need to do something.

97
00:04:47.533 --> 00:04:51.783
If from the last time to this time being
called it has been less than the tick

98
00:04:51.783 --> 00:04:56.448
rate, I'm going to sleep for a second and
just let whatever happens happen, and

99
00:04:56.448 --> 00:04:59.163
then I'm gonna come back and
keep doing it.

100
00:04:59.163 --> 00:05:03.740
You If I've slept a little bit extra than
I was expecting to, I make sure I keep

101
00:05:03.740 --> 00:05:07.980
track of that amount, and then I return
out to the player or to the game.

102
00:05:07.980 --> 00:05:12.363
Hey, you were asleep for this amount of
ticks, or in other words, this amount of

103
00:05:12.363 --> 00:05:16.500
milliseconds, so I expected 16 but
I woke up and the extra was about 18.

104
00:05:16.500 --> 00:05:19.295
It's gonna come back so
that way we can update properly and

105
00:05:19.295 --> 00:05:21.486
we know kind of where we're at.

106
00:05:21.486 --> 00:05:24.546
All right, so
that is really most of the game.

107
00:05:24.546 --> 00:05:28.781
So the last thing, last piece of code we
want to go over is going to be the game

108
00:05:28.781 --> 00:05:33.736
itself, which isn't all that hard so I'll
just jump down to, let's go to update.

109
00:05:33.736 --> 00:05:35.936
Update is pretty straightforward.

110
00:05:35.936 --> 00:05:39.527
Update, all we're doing is we go
over all the player two bullets,

111
00:05:39.527 --> 00:05:43.632
we update the location and
see if any of them have hit player one.

112
00:05:43.632 --> 00:05:47.112
We do the same thing for player one,
we go over all player one's bullets,

113
00:05:47.112 --> 00:05:50.705
update their location, see if they hit
player two, and then after that we go

114
00:05:50.705 --> 00:05:54.702
through each one of player two's bullets
and see, hey, do we collide with you?

115
00:05:54.702 --> 00:05:55.915
If we collide with you,

116
00:05:55.915 --> 00:06:00.053
I add this little hold bullets remove list
because you cannot edit a collection.

117
00:06:01.693 --> 00:06:05.803
Bullets are a set, so you can't edit
a set collection while iterating over it.

118
00:06:05.803 --> 00:06:07.501
I don't know what the effects
are gonna be, but

119
00:06:07.501 --> 00:06:09.953
largely that is considered
a pretty negative thing to do.

120
00:06:09.953 --> 00:06:13.122
So I add it to a list, and
then at the end, if there's anything left,

121
00:06:13.122 --> 00:06:15.653
we just simply delete
the bullets out of the set.

122
00:06:15.653 --> 00:06:17.346
So we have player one and
player two's sets.

123
00:06:17.346 --> 00:06:19.583
And I just kind of
blindly delete each one,

124
00:06:19.583 --> 00:06:23.436
I don't really try to be precise about
that this come from player one set or

125
00:06:23.436 --> 00:06:26.189
players to set,
we just hope that we get it correct.

126
00:06:26.189 --> 00:06:30.449
Fire is really, really simple, make sure
you just achieve the fire rate and creating

127
00:06:30.449 --> 00:06:34.696
a bullet, really, really simple,
just add a bullet to a set, and that's it.

128
00:06:34.696 --> 00:06:36.906
And so
that's really the entirety of the game.

129
00:06:36.906 --> 00:06:40.575
So there you go, you got the whole nine
yards, it's not a lot of programming,

130
00:06:40.575 --> 00:06:43.380
it's a pretty straightforward
small piece of code.

131
00:06:43.380 --> 00:06:47.333
I wanted to create something that had
enough problems, but at the exact same

132
00:06:47.333 --> 00:06:51.719
time isn't terribly complicated so that
even if you're just okay at programming,

133
00:06:51.719 --> 00:06:55.760
you can jump in and go, okay, I
understand this, okay, I understand this.

134
00:06:55.760 --> 00:06:58.460
We didn't try to do anything too fancy.

135
00:06:58.460 --> 00:07:00.315
All right, there we go.

136
00:07:03.081 --> 00:07:07.206
All right, so everyone feels comfortable,
we feel good enough, right?

137
00:07:07.206 --> 00:07:10.254
Okay, good, all right, so
we have a problem statement,

138
00:07:10.254 --> 00:07:14.960
which is that our internal CI server show
that our games are not delivering frames.

139
00:07:14.960 --> 00:07:19.090
We expect frames to be 15,
16, or 17 millisecond frames.

140
00:07:19.090 --> 00:07:22.201
It's just JavaScript, of course,
meaning we don't have precision,

141
00:07:22.201 --> 00:07:24.450
you cannot sleep for at 16.66666, right?

142
00:07:24.450 --> 00:07:29.382
You sleep for if it's 16.66, you sleep for
16, the next time, that's gonna be 17,

143
00:07:29.382 --> 00:07:31.493
the next time that would be kind of 15.

144
00:07:31.493 --> 00:07:34.251
You're gonna kind of do this
little jumping back and

145
00:07:34.251 --> 00:07:37.759
forth to where you're trying to
make a 16.66 average, and so

146
00:07:37.759 --> 00:07:41.597
you're largely gonna be in the 16s,
in the 17 millisecond sleeps.

147
00:07:41.597 --> 00:07:45.639
We really want to quit having
frames overflow or underflow.

148
00:07:45.639 --> 00:07:50.469
And so your job, you boss said,
hey, we have to be at least below

149
00:07:50.469 --> 00:07:55.399
25% of all frames being either
overflowing or underflowing.

150
00:07:55.399 --> 00:07:59.842
And overflow would be 18 or more
milliseconds, and underflow would be 15 or

151
00:07:59.842 --> 00:08:01.448
14 or less milliseconds.

152
00:08:01.448 --> 00:08:05.221
So that means if you did like a 19 sleep,
the next one would have to come at much,

153
00:08:05.221 --> 00:08:08.161
much lower for you to be able to make up,
and so you don't want to

154
00:08:08.161 --> 00:08:12.288
be bouncing around as a server, you
just want nice smooth updates happening.

155
00:08:12.288 --> 00:08:16.178
Of course, you want to have a job so
you're like, I like this idea.

156
00:08:16.178 --> 00:08:18.878
And second, you want to get nice
Christmas bonus, so there you go.

157
00:08:18.878 --> 00:08:20.758
We wanna do good job,
we wanna be able to get some W.

158
00:08:20.758 --> 00:08:22.885
So we wanna do a really fantastic job and

159
00:08:22.885 --> 00:08:25.601
take something back that
makes everybody happy.

160
00:08:25.601 --> 00:08:27.847
All right, everyone excited?

161
00:08:27.847 --> 00:08:28.552
Does that sound good?

162
00:08:28.552 --> 00:08:29.913
We got a question?

163
00:08:29.913 --> 00:08:34.084
&gt;&gt; Why did you use sets instead
of objects to record the bullets?

164
00:08:34.084 --> 00:08:37.129
&gt;&gt; Okay, why did I use sets instead
of objects to record the bullets?

165
00:08:37.129 --> 00:08:41.159
The problem is I'm not really sure
how I would use objects versus sets

166
00:08:41.159 --> 00:08:45.488
in this situation, because how do you
iterate over an object of bullets?

167
00:08:45.488 --> 00:08:51.544
I would have to have some sort of key, so
is it a 1, 2, 3, is it an A, B, C sets?

168
00:08:51.544 --> 00:08:55.122
I can simply just iterate over the
collection that's underneath the set by

169
00:08:55.122 --> 00:08:58.130
just doing this, and so
it's a pretty simple data structure,

170
00:08:58.130 --> 00:09:01.786
plus when I want to remove it from the
set, I get a remove it at constant time.

171
00:09:01.786 --> 00:09:04.936
And so when I wanna look up something,
it's a constant time lookup, and

172
00:09:04.936 --> 00:09:08.102
when I wanna delete something,
it's a constant time deletion.

173
00:09:08.102 --> 00:09:11.929
So that feels a lot better than,
say, like an object I'd have to a,

174
00:09:11.929 --> 00:09:15.022
know the key, and
then deleting a key off an object.

175
00:09:15.022 --> 00:09:16.882
I don't know how it's
stored underneath the hood.

176
00:09:16.882 --> 00:09:20.439
I know it's not the same as a set, a set
is gonna be much different than an object.

177
00:09:20.439 --> 00:09:21.799
Is that a log(n) delete?

178
00:09:21.799 --> 00:09:23.589
I have no idea.

179
00:09:23.589 --> 00:09:28.063
And plus generally, from what I've seen,
objects just aren't as fast as maps when

180
00:09:28.063 --> 00:09:32.489
you're just looking up a bunch of random
keys, they seem to be a little bit better.

181
00:09:33.749 --> 00:09:37.453
I can't say that's 100% true,
but my brief playing around,

182
00:09:37.453 --> 00:09:41.766
I just typically reach for maps or sets
when it comes to looking up something.

183
00:09:42.856 --> 00:09:43.786
Fair, everybody else?

184
00:09:43.786 --> 00:09:48.031
I'm pretty sure pretty much every single
person casually enjoys using sets or

185
00:09:48.031 --> 00:09:50.776
maps pretty regularly, right?

186
00:09:50.776 --> 00:09:52.766
Yeah, now, sort of, okay.

187
00:09:52.766 --> 00:09:53.658
&gt;&gt; One quick question.

188
00:09:53.658 --> 00:09:54.593
&gt;&gt; Yeah.

189
00:09:54.593 --> 00:09:58.296
&gt;&gt; How do we close the WebSocket
after the user closes the browser?

190
00:10:00.048 --> 00:10:01.808
&gt;&gt; I don't, that's a great question.

191
00:10:01.808 --> 00:10:03.408
Do I even explicitly call close on them?

192
00:10:05.378 --> 00:10:07.118
I don't think I explicitly
call close on them.

193
00:10:07.118 --> 00:10:09.194
Did I forget to do that?

194
00:10:11.995 --> 00:10:13.546
I mean, on the Rust side we call close,

195
00:10:13.546 --> 00:10:15.813
which inevitably gets a called
closed on the other side.

196
00:10:15.813 --> 00:10:17.188
They should get automatically closed down.

197
00:10:17.188 --> 00:10:23.456
The test client does a 1000 close on it,
so the other side should get closed down.

198
00:10:23.456 --> 00:10:25.804
I guess one thing I probably
didn't even think about or

199
00:10:25.804 --> 00:10:28.216
even try to do was make sure
I clean up after the sockets.

200
00:10:28.216 --> 00:10:30.926
That's a great point,
I don't even think I did that.

201
00:10:30.926 --> 00:10:34.846
I'm unsure if I have to clean up after
these, I'd have to look into that.

202
00:10:34.846 --> 00:10:36.346
I didn't see any memory leak.

203
00:10:36.346 --> 00:10:39.423
I've ran this program for
quite some time and the memory just.

204
00:10:39.423 --> 00:10:42.558
Sat there, so I don't think I have
a problem on that, but it is something I

205
00:10:42.558 --> 00:10:45.866
should have probably just looked into,
I just completely forgot to do that.

206
00:10:45.866 --> 00:10:50.288
I'm so used to the Rust way of doing
things where when the drop happens for me,

207
00:10:50.288 --> 00:10:53.910
I just don't even have to think about it,
but we could do that.

208
00:10:53.910 --> 00:10:56.891
You could add a p1.off, what is it?

209
00:10:56.891 --> 00:10:59.853
Is there is a remove all listeners, right?

210
00:10:59.853 --> 00:11:03.085
Boom, and add that,
there you go, you'd have that.

211
00:11:03.085 --> 00:11:05.661
In fact, at the end of the course
we can even try to see,

212
00:11:05.661 --> 00:11:07.961
does that actually make
a material difference?

213
00:11:07.961 --> 00:11:09.340
Is it actually affecting things?

214
00:11:09.340 --> 00:11:09.993
We'll do that.

