WEBVTT

1
00:00:00.153 --> 00:00:03.076
So I'm gonna do the world's simplest.

2
00:00:03.076 --> 00:00:05.130
So I'm gonna go back
to the previous thing.

3
00:00:05.130 --> 00:00:08.475
So I'm gonna do the world's
simplest form of programming,

4
00:00:08.475 --> 00:00:12.228
which is I'm gonna just update this
to use an array instead of a set.

5
00:00:12.228 --> 00:00:15.156
So if you'd like to follow along,
please do,

6
00:00:15.156 --> 00:00:19.146
there's not too much code that has
to be ran to get this to work.

7
00:00:19.146 --> 00:00:23.124
So I'm gonna first go up to the tippy
top of the game/game.ts file, and

8
00:00:23.124 --> 00:00:27.430
I'm gonna just delete on each player
state instead of having bullets as a set,

9
00:00:27.430 --> 00:00:29.469
I'm just gonna delete it right off.

10
00:00:29.469 --> 00:00:31.515
We're gonna delete it
from the player state.

11
00:00:31.515 --> 00:00:34.612
I'm gonna delete it from create state,
and so there we go.

12
00:00:34.612 --> 00:00:39.147
So, the players no longer
have their own bullet sets.

13
00:00:39.147 --> 00:00:43.196
I'm gonna be really lazy about this and
just kind of test the theory.

14
00:00:43.196 --> 00:00:44.910
Does this actually work out?

15
00:00:44.910 --> 00:00:47.773
So I'm gonna go all the way down to
the game, all the way down here.

16
00:00:47.773 --> 00:00:52.318
I know some of you see the word class,
and you vomit a little bit, okay?

17
00:00:52.318 --> 00:00:53.352
Calm down, okay?

18
00:00:53.352 --> 00:00:56.031
Sometimes state containers
are a good thing, all right?

19
00:00:56.031 --> 00:00:57.404
Rust kind of has classes.

20
00:00:57.404 --> 00:01:01.536
I'm just saying a lot languages still
have at least a notion of objects

21
00:01:01.536 --> 00:01:03.016
with functions on them.

22
00:01:03.016 --> 00:01:04.527
So calm down, all right?

23
00:01:04.527 --> 00:01:09.913
So I'm gonna go like this, public,
let's call it public bullets, right?

24
00:01:09.913 --> 00:01:12.623
I'm gonna make it public because that
way it's easy to update our tests,

25
00:01:12.623 --> 00:01:13.638
pretty straightforward.

26
00:01:13.638 --> 00:01:16.720
So we have this nice little public
function bullets in which I'm

27
00:01:16.720 --> 00:01:20.384
gonna go down to the constructor
this.bullets = a new array, fantastic.

28
00:01:20.384 --> 00:01:25.464
I'm just gonna put all the bullets into a
single array, and I'll check against that.

29
00:01:25.464 --> 00:01:27.844
Just see, is there even a there or there,

30
00:01:27.844 --> 00:01:30.700
we're not even being as
efficient as we could be.

31
00:01:30.700 --> 00:01:32.546
I just want the bookkeeping to be simple.

32
00:01:32.546 --> 00:01:35.731
I just wanna prove something out.

33
00:01:35.731 --> 00:01:38.399
All right, so
let's go down all the way down to update.

34
00:01:38.399 --> 00:01:40.993
So we're gonna have some problems here,
we can no longer use this.

35
00:01:40.993 --> 00:01:45.964
So I'm gonna go for let I know again,
people hate this idea of for loops,

36
00:01:45.964 --> 00:01:48.912
but they're actually quite nice, okay?

37
00:01:48.912 --> 00:01:51.506
You can run your own for
loops from time to time.

38
00:01:51.506 --> 00:01:54.511
They're very simple, and
they can be quite performant, okay?

39
00:01:54.511 --> 00:01:56.593
So I'm gonna save
a reference to the bullet.

40
00:01:56.593 --> 00:01:57.403
There we go.

41
00:01:57.403 --> 00:02:01.020
I'm gonna grab this update function,
put it in there.

42
00:02:01.020 --> 00:02:05.590
And then after that, I need to check,
hey, does this bullet hit player 1?

43
00:02:05.590 --> 00:02:08.850
So I'm gonna delete that,
put it in there, awesome.

44
00:02:08.850 --> 00:02:13.121
Now we can go down, I can just delete
out that previous for loop, do it again.

45
00:02:13.121 --> 00:02:15.121
I'm gonna check, hey, do you hit player 2?

46
00:02:15.121 --> 00:02:17.775
We're not gonna be smart with our tests.

47
00:02:17.775 --> 00:02:18.840
Again, we're just seeing.

48
00:02:18.840 --> 00:02:21.042
So do you hit player 2?

49
00:02:21.042 --> 00:02:21.697
Yes or no?

50
00:02:21.697 --> 00:02:23.106
Okay, awesome.

51
00:02:23.106 --> 00:02:23.920
Delete that.

52
00:02:23.920 --> 00:02:27.982
And then lastly, I have to do this
final for loop right here, which is,

53
00:02:27.982 --> 00:02:31.125
I need to test these bullets
against the rest, right?

54
00:02:31.125 --> 00:02:33.766
I need to see, hey,
do you intersect any other bullets?

55
00:02:33.766 --> 00:02:36.431
So therefore,
we don't we can remove those.

56
00:02:36.431 --> 00:02:38.991
So I'll just give it one of these and
go let j equals, hey,

57
00:02:38.991 --> 00:02:41.101
do you already know what
I'm gonna do copilot?

58
00:02:41.101 --> 00:02:42.656
It's like copilots read my brain.

59
00:02:42.656 --> 00:02:46.299
We need to go to effectively
the next bullet in our list.

60
00:02:46.299 --> 00:02:48.153
So think of something like insertion sort.

61
00:02:48.153 --> 00:02:51.614
We go to the next item in the list,
and we're only gonna run what bullets

62
00:02:51.614 --> 00:02:54.628
are left, because we've already
tested the previous ones.

63
00:02:54.628 --> 00:02:55.470
There we go.

64
00:02:55.470 --> 00:02:58.669
And so now we're gonna check,
hey, do you collide?

65
00:02:58.669 --> 00:03:02.493
So I'll go like this,
const b2= this.bullets [j],

66
00:03:02.493 --> 00:03:04.922
awesome, so we have b2 versus b1.

67
00:03:04.922 --> 00:03:07.141
We'll log that out, but
we can no longer use this.

68
00:03:07.141 --> 00:03:09.819
We don't need to have these
whole bullets remove array.

69
00:03:09.819 --> 00:03:13.068
We're gonna be a little bit
more clever about this.

70
00:03:13.068 --> 00:03:15.518
I'm gonna go this.bullets.splice.

71
00:03:15.518 --> 00:03:18.247
If you don't know the difference
between splice and slice,

72
00:03:18.247 --> 00:03:19.540
it's really not that hard.

73
00:03:19.540 --> 00:03:25.205
Splice takes things out, slice creates
a view into, it's even in the name.

74
00:03:25.205 --> 00:03:27.357
You know, you can kind of
guess what's happening here.

75
00:03:27.357 --> 00:03:31.651
So splice at j remove one element, at i--,

76
00:03:31.651 --> 00:03:38.668
I'm being really trickier, remove
one element, so why am I doing that?

77
00:03:38.668 --> 00:03:40.556
Obviously, j is one ahead of i.

78
00:03:40.556 --> 00:03:43.868
So we can just remove it safely, because
our collection that we're iterating over

79
00:03:43.868 --> 00:03:46.869
is on i, but i is currently pointed to
an element that we're currently on.

80
00:03:46.869 --> 00:03:49.911
So if I remove that, I gets moved forward,
and then on our next loop,

81
00:03:49.911 --> 00:03:51.595
we would accidentally skip a bullet.

82
00:03:51.595 --> 00:03:54.781
So I'm gonna just set i back one so
when we increment our loop,

83
00:03:54.781 --> 00:03:56.391
we're onto the next new item.

84
00:03:56.391 --> 00:03:57.912
Pretty straightforward, pretty easy.

85
00:03:57.912 --> 00:04:02.893
I know people don't love for loops,
but hey, we're for looping, okay?

86
00:04:02.893 --> 00:04:05.985
They don't call me off by one prime for
no reason here.

87
00:04:05.985 --> 00:04:10.023
So I feel pretty confident that we've
just done this all first try pretty well,

88
00:04:10.023 --> 00:04:11.298
very simple algorithm.

89
00:04:11.298 --> 00:04:17.674
It's still bullet squared for
its running time, but maybe it is better.

90
00:04:17.674 --> 00:04:19.559
Again, just checking for there or there.

91
00:04:19.559 --> 00:04:22.286
Lastly, we have this whole
create bullet function,

92
00:04:22.286 --> 00:04:24.358
which attaches the bullet to the state.

93
00:04:24.358 --> 00:04:25.737
So we don't need to do that.

94
00:04:25.737 --> 00:04:28.879
I'm gonna go this.bullets.push.

95
00:04:28.879 --> 00:04:31.311
Boom, that's it, that's all we had to do.

96
00:04:31.311 --> 00:04:32.482
Make sure it's ready.

97
00:04:32.482 --> 00:04:36.427
Now, the good news is I did create
a couple unit tests and one integration

98
00:04:36.427 --> 00:04:40.647
test, which by the way, the integration
test is just absolutely dog water.

99
00:04:40.647 --> 00:04:43.061
It may not work on your Mac.

100
00:04:43.061 --> 00:04:44.818
I just spawned a bunch of processes,

101
00:04:44.818 --> 00:04:48.519
definitely used some things that might
be Linux only, I'm not even sure.

102
00:04:48.519 --> 00:04:52.504
But it mostly works, and sometimes it
leaves a zombie process running, so

103
00:04:52.504 --> 00:04:54.286
you have to make sure you kill it.

104
00:04:54.286 --> 00:04:55.255
It's just is what it is.

105
00:04:55.255 --> 00:04:57.486
I just wanted to prove to
myself it somewhat works.

106
00:04:57.486 --> 00:05:00.812
So you can go like this npm run test.

107
00:05:00.812 --> 00:05:05.399
And this should run four game tests, so
long as up look at that, look at that.

108
00:05:05.399 --> 00:05:09.194
We forgot to do something,
so let's go inside the test.

109
00:05:09.194 --> 00:05:12.324
So I'm gonna go inside the test,
go to game, go to the next diagnostic.

110
00:05:12.324 --> 00:05:16.041
Look at this, see before I was relying
on the fact that we're using a test,

111
00:05:16.041 --> 00:05:18.997
we're not using a test, or
we're not using a set anymore.

112
00:05:18.997 --> 00:05:22.766
So I'm just gonna, I'm gonna go CI
this and go game.bullets.length.

113
00:05:22.766 --> 00:05:24.825
Remember when we made that public?

114
00:05:24.825 --> 00:05:25.999
I wanna make sure it's zero.

115
00:05:25.999 --> 00:05:26.515
There we go.

116
00:05:26.515 --> 00:05:29.910
We've updated our interface,
absolutely wonderful.

117
00:05:29.910 --> 00:05:32.976
We're gonna rerun our tests,
and what do we see here?

118
00:05:32.976 --> 00:05:36.907
Well, we should see four passing local
tests, that's probably really good.

119
00:05:36.907 --> 00:05:39.825
The integration test does
take 30 seconds to run,

120
00:05:39.825 --> 00:05:43.939
because it literally spawns all
the processes and plays one actual game,

121
00:05:43.939 --> 00:05:47.077
which takes about 30 seconds
to get everything done.

122
00:05:47.077 --> 00:05:48.662
So absolutely fantastic.

123
00:05:48.662 --> 00:05:50.163
I'll let this one run out.

124
00:05:50.163 --> 00:05:54.769
We technically don't need this one to
run out because we only changed how

125
00:05:54.769 --> 00:05:56.669
the game internal is played.

126
00:05:56.669 --> 00:06:00.349
This really shouldn't have any
effect on the overall thing, but for

127
00:06:00.349 --> 00:06:02.575
the sake of completeness, we'll do it.

128
00:06:02.575 --> 00:06:06.111
Awesome.
Then I'm gonna do this little LS of 420,

129
00:06:06.111 --> 00:06:08.446
420 or 42,000 kill 9.

130
00:06:08.446 --> 00:06:11.792
Yeah, it did look like we had our server
still zombie there for a moment, but

131
00:06:11.792 --> 00:06:13.217
don't worry, it's dead now.

132
00:06:13.217 --> 00:06:16.613
So we know that the game is working,
everything is working fine.

133
00:06:16.613 --> 00:06:21.131
We made a really simple update to no
longer use bullets, but instead use, or

134
00:06:21.131 --> 00:06:23.681
no longer use a set, instead use an array.

135
00:06:23.681 --> 00:06:25.828
And so, I'm gonna do the exact
same thing we did before.

136
00:06:25.828 --> 00:06:29.458
I'm gonna do a little typescript compile,
we'll use inspect,

137
00:06:29.458 --> 00:06:32.103
and we'll launch it on
the log path of testing.

138
00:06:32.103 --> 00:06:35.596
And I'm gonna go over here and
run it with 1000 again.

139
00:06:35.596 --> 00:06:38.784
And we should go back here,
and we should try to see,

140
00:06:38.784 --> 00:06:42.552
did we actually make this thing faster,
cuz before update was

141
00:06:42.552 --> 00:06:47.348
taking effectively 14.4% of the time
self time and 17.2 total time.

142
00:06:47.348 --> 00:06:51.561
Again, total time doesn't matter
nearly as much as self time.

143
00:06:51.561 --> 00:06:53.710
So I'm gonna let this thing
kind of get fired up.

144
00:06:53.710 --> 00:06:54.693
It's running.

145
00:06:54.693 --> 00:06:56.949
We're feeling fast.

146
00:06:56.949 --> 00:07:00.931
Maybe we're even feeling a little faster,
I don't even know.

147
00:07:00.931 --> 00:07:02.035
So we're gonna record.

148
00:07:02.035 --> 00:07:05.431
Let's just see,
did we make an actual dent here?

149
00:07:05.431 --> 00:07:07.832
So I'm gonna record this for 10 seconds.

150
00:07:09.941 --> 00:07:13.033
By the way, do we have any predictions?

151
00:07:14.872 --> 00:07:17.478
Of how much this will improve performance.

152
00:07:17.478 --> 00:07:19.460
Look at that, update is gone.

153
00:07:19.460 --> 00:07:21.438
It's still 3.8% of the time.

154
00:07:21.438 --> 00:07:22.938
What the heck happened?

155
00:07:22.938 --> 00:07:24.271
We didn't even do a great algorithm.

156
00:07:24.271 --> 00:07:25.988
It's like way faster.

157
00:07:25.988 --> 00:07:28.366
So sometimes, don't just reach for sets.

158
00:07:28.366 --> 00:07:30.373
You don't always need to reach for sets.

159
00:07:30.373 --> 00:07:33.823
Anyways, so update, clearly a W right now.

160
00:07:33.823 --> 00:07:36.769
Does anyone have any predictions for

161
00:07:36.769 --> 00:07:41.529
how much better this is gonna
make our game server overall?

162
00:07:41.529 --> 00:07:42.355
&gt;&gt; 100%.

163
00:07:42.355 --> 00:07:44.937
&gt;&gt; 100% faster, that's a bold move, Conor.

164
00:07:48.023 --> 00:07:48.811
No one else, okay?

165
00:07:48.811 --> 00:07:53.219
No one else decides they
really want to make a guess.

166
00:07:53.219 --> 00:07:59.434
I'm gonna shut everything off, and
we're gonna create a new loging path and

167
00:07:59.434 --> 00:08:03.623
a new log here, so
I'm gonna go remove, inspect.

168
00:08:03.623 --> 00:08:04.785
Don't forget to do this.

169
00:08:04.785 --> 00:08:07.952
I'm just gonna call this
first optimization 500.

170
00:08:07.952 --> 00:08:11.165
I'm gonna measure 500, 1000, 2000.

171
00:08:11.165 --> 00:08:15.599
We're gonna do the same stepladder and
see does it affect anywhere within that

172
00:08:15.599 --> 00:08:20.454
because by 2000, you saw our server was
just like almost like exclusively late.

173
00:08:20.454 --> 00:08:23.485
And so hopefully,
we see some better performance.

174
00:08:23.485 --> 00:08:25.806
So I'll start off, of course, with 500.

175
00:08:25.806 --> 00:08:27.868
We start this up, things are looking good.

176
00:08:27.868 --> 00:08:33.021
And I will cargo run, make sure I get 500
for my Q value, and now it's running.

177
00:08:33.021 --> 00:08:38.199
And so I'm gonna go over here, and
I'm gonna open up a new tab, and

178
00:08:38.199 --> 00:08:45.528
I'm gonna go to local host 42068, and
go to temp/first optimization 500, okay?

179
00:08:45.528 --> 00:08:46.522
So there we go.

180
00:08:46.522 --> 00:08:47.203
It's running.

181
00:08:47.203 --> 00:08:48.820
We'll let it run for a little bit.

182
00:08:48.820 --> 00:08:53.061
Again, this is most of
performance stuff is doing this.

183
00:08:53.061 --> 00:08:56.825
So I'm gonna keep on going through
the 500, the 1000, and the 2000.

184
00:08:56.825 --> 00:08:59.059
And then we'll see did
we actually improve it.

