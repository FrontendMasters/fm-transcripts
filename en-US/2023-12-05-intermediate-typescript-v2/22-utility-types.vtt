WEBVTT

1
00:00:00.097 --> 00:00:01.984
So at the beginning of the course,

2
00:00:01.984 --> 00:00:06.288
I promised that we would think about
utility types that come with TypeScript.

3
00:00:06.288 --> 00:00:09.372
You can think of this
almost like a standard

4
00:00:09.372 --> 00:00:12.121
library that ships with TypeScript.

5
00:00:12.121 --> 00:00:16.915
And we're gonna start digging into
them now because we finally have

6
00:00:16.915 --> 00:00:21.050
all of the elements we need to
tackle a few of them, right?

7
00:00:21.050 --> 00:00:26.634
Conditional types are a big part of
some of these built-in utility types.

8
00:00:26.634 --> 00:00:30.878
So first, we're going to look at extract.

9
00:00:30.878 --> 00:00:36.197
The purpose of extract
is you want to obtain

10
00:00:36.197 --> 00:00:42.418
some subpart of a type
that matches another type.

11
00:00:42.418 --> 00:00:48.193
So I'll show you an example, so
we've got FavoriteColors, it's a medium

12
00:00:48.193 --> 00:00:53.711
cardinality union type here, there
are a lot of things that it could be.

13
00:00:53.711 --> 00:00:57.944
A lot of string literals, we've got
a tuple here with three numbers, we've got

14
00:00:57.944 --> 00:01:02.504
an object that represents red, green,
blue, it has properties red, green, blue.

15
00:01:02.504 --> 00:01:07.636
And what we can do is say,
I want to extract the subset of

16
00:01:07.636 --> 00:01:12.891
FavoriteColors, which is
assignable to type string.

17
00:01:12.891 --> 00:01:14.528
What do we get out?

18
00:01:14.528 --> 00:01:16.210
Only the strings.

19
00:01:17.512 --> 00:01:23.652
If we wanna get the types
that are assignable to

20
00:01:23.652 --> 00:01:28.699
objects, we only get the one object.

21
00:01:28.699 --> 00:01:32.745
Sorry, we're comparing to this type.

22
00:01:32.745 --> 00:01:37.810
So it's just like,
give me those parts of FavoriteColors that

23
00:01:37.810 --> 00:01:43.464
are type equivalent to an object with
a red property which is a number.

24
00:01:43.464 --> 00:01:47.641
And there we go, we get that.

25
00:01:47.641 --> 00:01:50.551
And then the tuples,
we could do that, too.

26
00:01:52.636 --> 00:01:55.766
We could get number, number,
number out of this, we could also do this.

27
00:01:59.473 --> 00:02:00.274
Is that gonna work?

28
00:02:00.274 --> 00:02:07.580
Nope, I have to do, Is that gonna work?

29
00:02:07.580 --> 00:02:11.104
Yep, anything that's array-ish,

30
00:02:11.104 --> 00:02:16.509
get me the subpart of
FavoriteColors that is array-ish.

31
00:02:16.509 --> 00:02:24.683
&gt;&gt; We're doing an implicit
satisfies inside.

32
00:02:24.683 --> 00:02:28.550
&gt;&gt; Well, let's pop the hood,
let's see what it looks like.

33
00:02:29.754 --> 00:02:31.637
There's your conditional type.

34
00:02:31.637 --> 00:02:33.598
So let's see if we can understand this,

35
00:02:33.598 --> 00:02:36.668
I wanna go through the next type
cuz it's kind of the opposite.

36
00:02:36.668 --> 00:02:41.631
And we can look at how these two types
work simultaneously cuz they're sort

37
00:02:41.631 --> 00:02:43.694
of one is the anti of the other.

38
00:02:43.694 --> 00:02:51.699
It's not just hand me the piece of
tea that is type equivalent to you,

39
00:02:51.699 --> 00:02:57.495
we're saying,
hand me the piece of tea except for

40
00:02:57.495 --> 00:03:02.341
the stuff that is type equivalent to you.

41
00:03:02.341 --> 00:03:07.568
So you're saying exclude
anything that is you-ish.

42
00:03:09.783 --> 00:03:13.923
So let's look at our
NonStringColors example here,

43
00:03:13.923 --> 00:03:17.143
and we would get the tuple and the object.

44
00:03:17.143 --> 00:03:22.040
We're saying get rid of anything that is
assignable to string, give me the rest.

45
00:03:22.040 --> 00:03:25.729
Exclude those things that
are assignable to string.

46
00:03:25.729 --> 00:03:30.473
So here's how they work behind the scenes,
I've added an underscore so

47
00:03:30.473 --> 00:03:35.453
I don't collide with the real definition
here that TypeScript provides cuz

48
00:03:35.453 --> 00:03:37.894
you can't redeclare type aliases.

49
00:03:37.894 --> 00:03:43.560
So let's break this down, and
let's keep this in mind here.

50
00:03:43.560 --> 00:03:46.811
So if we said,
I'm gonna bring the other example lower so

51
00:03:46.811 --> 00:03:49.337
we can have it all in
the same viewport here.

52
00:03:49.337 --> 00:03:54.730
Let's look at extract first
since we cover that first.

53
00:03:54.730 --> 00:03:59.493
So what we're saying here is T extends U,

54
00:03:59.493 --> 00:04:04.255
so as long as T extends
U evaluate out to T,

55
00:04:04.255 --> 00:04:08.486
otherwise, evaluate out to never.

56
00:04:08.486 --> 00:04:12.977
And here's something important
to observe about the way never

57
00:04:12.977 --> 00:04:15.951
behaves in a union type, it disappears.

58
00:04:18.650 --> 00:04:19.980
&gt;&gt; It's like it was never there.

59
00:04:19.980 --> 00:04:21.981
&gt;&gt; It's like it was never there, right?

60
00:04:21.981 --> 00:04:26.886
&gt;&gt; [LAUGH]
&gt;&gt; Remember when I showed this

61
00:04:26.886 --> 00:04:32.138
union type, remember we said back up here,

62
00:04:33.842 --> 00:04:38.570
This example, remember we had 10 or 2, and

63
00:04:38.570 --> 00:04:42.704
I said that, I'll leave these both up.

64
00:04:44.396 --> 00:04:48.307
I told you to think about
this as equivalent.

65
00:04:49.732 --> 00:04:54.130
These mean the same thing,
Boolean, Boolean.

66
00:04:54.130 --> 00:04:58.415
So when we see this,
this top example, 10 or 2,

67
00:04:58.415 --> 00:05:04.910
it's as if we're evaluating piece by
piece and unioning them all together.

68
00:05:04.910 --> 00:05:09.455
And so if we go down here and
we think about this extract,

69
00:05:09.455 --> 00:05:15.190
we're gonna one by one take those
things that are in FavoriteColors.

70
00:05:15.190 --> 00:05:19.222
And if they match U in this case,
it would be like,

71
00:05:19.222 --> 00:05:23.159
is the dark sienna,
is that a subtype of string?

72
00:05:23.159 --> 00:05:25.622
Sure, it is.

73
00:05:25.622 --> 00:05:29.546
Okay, that's T, that's dark sienna.

74
00:05:33.295 --> 00:05:35.289
We'll call this a RunningType.

75
00:05:36.374 --> 00:05:42.451
And we're gonna do a couple other strings.

76
00:05:44.059 --> 00:05:49.018
And then there will be a bunch of things
that don't match this condition, and

77
00:05:49.018 --> 00:05:51.165
those we'll value out to never.

78
00:05:55.383 --> 00:05:59.219
And the never just melt away,
that's how extract works,

79
00:05:59.219 --> 00:06:02.441
that's why it's convenient
to use never here.

80
00:06:02.441 --> 00:06:07.129
We're taking advantage of the way
that the union sort of fans out, and

81
00:06:07.129 --> 00:06:10.944
then the things that match our condition,
they turn in,

82
00:06:10.944 --> 00:06:13.424
they sort of pass straight through.

83
00:06:13.424 --> 00:06:17.847
And then the things that don't,
they turn into nevers.

84
00:06:17.847 --> 00:06:20.771
We union that together and
the nevers melt away, and

85
00:06:20.771 --> 00:06:23.306
we're left with only
the things that match.

86
00:06:23.306 --> 00:06:28.752
Exclude, if we bring this down,
we'll bring it up so you can see it above.

87
00:06:28.752 --> 00:06:32.705
Wow, it looks like very, very similar,
except the conditions flipped.

88
00:06:32.705 --> 00:06:38.765
Those things that match string,
They will turn into nevers,

89
00:06:38.765 --> 00:06:43.746
everything that doesn't match
passes straight through.

90
00:06:43.746 --> 00:06:46.375
We union all of the results together,

91
00:06:46.375 --> 00:06:51.564
the things that match to string meltaway
because they turned into nevers.

92
00:06:51.564 --> 00:06:56.874
And we're left with only the things
that did not match the condition,

93
00:06:56.874 --> 00:06:58.320
that's exclude.

94
00:06:58.320 --> 00:06:59.990
Does that make sense?

95
00:07:03.650 --> 00:07:09.217
Thinking about never in the abstract,
it's a little mind-blowing,

96
00:07:09.217 --> 00:07:14.132
it's sort of very strange concept,
but you can see that the way

97
00:07:14.132 --> 00:07:18.699
never behaves in this situation
is quite useful, right?

98
00:07:18.699 --> 00:07:23.306
We can sort of transform things,
and if it becomes a never,

99
00:07:23.306 --> 00:07:26.509
it melts away when we do a union.

100
00:07:26.509 --> 00:07:31.454
Mahmood has a question,
what happens if we're trying to

101
00:07:31.454 --> 00:07:34.863
extract things that no value satisfy?

102
00:07:34.863 --> 00:07:41.398
This is why I love doing this in VS code,
where I can just, let's try it.

103
00:07:43.099 --> 00:07:48.073
Can I do

104
00:07:48.073 --> 00:07:53.047
that?

105
00:07:58.246 --> 00:08:00.659
I'm just trying to get too clever here,
Symbol.

106
00:08:04.373 --> 00:08:07.027
Well, we're excluding nothing.

107
00:08:09.421 --> 00:08:11.918
What do you think happens
on the other side?

108
00:08:14.285 --> 00:08:16.680
We're extracting nothing, so
what does that mean we're gonna get?

109
00:08:16.680 --> 00:08:19.145
[INAUDIBLE]
&gt;&gt; I hope so.

110
00:08:20.823 --> 00:08:21.620
Thank God.

111
00:08:23.434 --> 00:08:27.400
Sometimes these things turn into any,
and you're like, no, [LAUGH] it broke.

112
00:08:27.400 --> 00:08:31.357
This doesn't work but yeah,
we're extracting nothing, or

113
00:08:31.357 --> 00:08:33.192
we're excluding nothing.

114
00:08:33.192 --> 00:08:37.621
So we get the whole thing
if we extract nothing.

115
00:08:37.621 --> 00:08:42.181
Sorry, we get the whole thing
if we exclude nothing, and

116
00:08:42.181 --> 00:08:47.026
when we extract and
nothing matches the thing that describes

117
00:08:47.026 --> 00:08:52.067
what we're trying to extract,
we're left with an empty bag.

118
00:08:52.067 --> 00:08:57.631
Nothing matched,
I have nothing to give you, never.

119
00:08:57.631 --> 00:09:00.897
&gt;&gt; Is there a difference
between using extract and

120
00:09:00.897 --> 00:09:03.843
using the ampersand to narrow down types?

121
00:09:03.843 --> 00:09:08.752
&gt;&gt; It's a very good question.

122
00:09:16.140 --> 00:09:20.762
I would have to look at how
a union type would work there.

123
00:09:20.762 --> 00:09:22.347
Let's try that.

124
00:09:22.347 --> 00:09:29.439
So, = like this,

125
00:09:29.439 --> 00:09:36.344
you could try that.

126
00:09:39.946 --> 00:09:45.466
FavoriteColors, string.

127
00:09:49.532 --> 00:09:51.668
What do we get?

128
00:09:55.700 --> 00:09:59.591
I mean, I know this one's gonna work.

129
00:10:03.758 --> 00:10:05.535
The tooltip is just not very helpful here.

130
00:10:11.900 --> 00:10:13.432
Go ahead.

131
00:10:13.432 --> 00:10:17.372
&gt;&gt; Try assigning a new variable
to type it as type example.

132
00:10:17.372 --> 00:10:20.419
&gt;&gt; And see what we can put in it?

133
00:10:20.419 --> 00:10:25.406
&gt;&gt; Yeah, declare a variable x as example.

134
00:10:34.621 --> 00:10:35.687
&gt;&gt; Is it x is unused?

135
00:10:35.687 --> 00:10:39.350
No, so it's happy with that.

136
00:10:49.620 --> 00:10:51.436
It's unhappy with that.

137
00:10:52.463 --> 00:10:56.921
Yeah, let's give it a string
that's not in the type.

138
00:11:03.120 --> 00:11:06.939
Yep, I'm seeing similar behavior here.

139
00:11:06.939 --> 00:11:12.395
Having not had much of a chance to dig
into this, I wouldn't make the claim

140
00:11:12.395 --> 00:11:17.770
that this always works, but
it's certainly working for this example.

141
00:11:21.990 --> 00:11:30.502
You couldn't exclude,
With that intersection type.

142
00:11:31.570 --> 00:11:36.229
You couldn't say, give me things other

143
00:11:36.229 --> 00:11:41.170
than the intersection of these two types.

144
00:11:41.170 --> 00:11:46.280
I think you could model extract that way,
but I don't think you could model exclude.

