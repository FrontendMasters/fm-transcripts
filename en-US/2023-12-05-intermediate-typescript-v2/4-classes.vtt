WEBVTT

1
00:00:00.000 --> 00:00:05.641
Let's look at a more modern place where
we see declaration merging in at play.

2
00:00:05.641 --> 00:00:12.201
So let's create a new class,
I'm gonna call this Fruit2.

3
00:00:12.201 --> 00:00:16.993
And I'm gonna give it a name property,
which is optionally present,

4
00:00:16.993 --> 00:00:18.140
it's a string.

5
00:00:18.140 --> 00:00:21.304
And I'm gonna give it a mass property,
which is a number.

6
00:00:21.304 --> 00:00:24.046
I'm gonna give it a color,
which is a string.

7
00:00:24.046 --> 00:00:29.133
And then let's give it a static field

8
00:00:29.133 --> 00:00:33.400
called createBanana, yeah,

9
00:00:33.400 --> 00:00:38.496
that'll work, thanks, Copilot.

10
00:00:38.496 --> 00:00:40.932
So, great, we've got Fruit2,

11
00:00:40.932 --> 00:00:46.732
let's apply the tests we just learned to
figure out what's on this declaration.

12
00:00:46.732 --> 00:00:48.600
So I'm gonna change this to Fruit2.

13
00:00:50.522 --> 00:00:55.877
All right, so Fruit2 is a value,
a class is a value,

14
00:00:55.877 --> 00:01:01.958
maybe not super surprising,
classes exist in JavaScript.

15
00:01:01.958 --> 00:01:07.165
We can call new Fruit2,
we're using it as a value there,

16
00:01:07.165 --> 00:01:10.046
so this isn't super shocking.

17
00:01:10.046 --> 00:01:12.114
The createBanana function is there.

18
00:01:12.114 --> 00:01:17.349
This is almost like the jQuery case,
where we have the class

19
00:01:17.349 --> 00:01:22.280
where we can invoke it to
create an instance of Fruit2.

20
00:01:22.280 --> 00:01:24.489
But we also have this
thing dangling off of it.

21
00:01:24.489 --> 00:01:31.496
So this is almost like a namespace here,
the static side of a class, right?

22
00:01:31.496 --> 00:01:36.398
And then let's look at this,
we've got Fruit2,

23
00:01:36.398 --> 00:01:41.076
typeTest: Fruit2 equals
empty object as any.

24
00:01:41.076 --> 00:01:46.685
Fruit2 is passing the test for a type.

25
00:01:46.685 --> 00:01:51.256
And we can see that when we start
to pull things off of this type,

26
00:01:51.256 --> 00:01:56.021
that's evidence that these
properties are present on the type.

27
00:01:56.021 --> 00:02:00.349
What we're seeing here is that
we have been benefiting from

28
00:02:00.349 --> 00:02:04.257
declaration merging whenever
we've used classes.

29
00:02:04.257 --> 00:02:09.141
It's an interface for
an instance of the class stacked on top

30
00:02:09.141 --> 00:02:13.848
of a value declaration that
represents the class itself.

31
00:02:13.848 --> 00:02:18.676
The thing we invoke when
we say I want a new Fruit2,

32
00:02:18.676 --> 00:02:23.631
it's passing both the value test and
the type test.

33
00:02:28.248 --> 00:02:31.286
The tooltips here,
let me put Fruit2 down here just so

34
00:02:31.286 --> 00:02:33.213
you know nothing's up my sleeve.

35
00:02:35.501 --> 00:02:38.417
It's not showing us multiple things here.

36
00:02:38.417 --> 00:02:41.791
And that's because this is
a super common use case.

37
00:02:41.791 --> 00:02:45.559
And it's an optimized
way to represent this.

38
00:02:45.559 --> 00:02:52.037
It's the class Fruit2, but
there is declaration merging at play.

39
00:02:52.037 --> 00:02:56.339
There is a type on this thing,
there is a value on this thing.

40
00:02:56.339 --> 00:03:00.189
Whether you wanna call createBanana,
the static methods on a class,

41
00:03:00.189 --> 00:03:04.049
whether you wanna think of that as
a namespace or not, it's up to you.

42
00:03:04.049 --> 00:03:08.710
Actually, it won't break your mental
model either way, because, remember,

43
00:03:08.710 --> 00:03:10.777
a namespace is kind of like a value.

44
00:03:10.777 --> 00:03:12.953
And so we could say, well,

45
00:03:12.953 --> 00:03:18.613
it's like a separate thing from the class
definition in the constructor, right?

46
00:03:18.613 --> 00:03:24.472
Or you could think of it as like,
okay, this is one big value,

47
00:03:24.472 --> 00:03:28.442
it's not quite like a function, right?

48
00:03:28.442 --> 00:03:33.760
It's not quite like the jQuery case, where
we literally have a function called $.

49
00:03:33.760 --> 00:03:37.685
You could think of it either way, but

50
00:03:37.685 --> 00:03:41.494
classes are both types and values.

51
00:03:41.494 --> 00:03:46.687
So I submit to you that there is
declaration merging happening here.

52
00:03:46.687 --> 00:03:50.740
There's more than one thing
riding on the single identifier.

53
00:03:50.740 --> 00:03:54.927
&gt;&gt; It looks like it picked
up the types of Fruit2.

54
00:03:54.927 --> 00:03:58.227
Cuz the actual method createBanana
just return this one option,

55
00:03:58.227 --> 00:04:00.150
static, that's always that thing.

56
00:04:00.150 --> 00:04:01.608
&gt;&gt; Yep, I can do this, though.

57
00:04:01.608 --> 00:04:03.528
&gt;&gt; Why is it not giving me literals?

58
00:04:09.419 --> 00:04:13.520
&gt;&gt; Why is it not giving you literals,
can you say more?

59
00:04:13.520 --> 00:04:18.110
&gt;&gt; On 107, you're returning name as
banana, color, yellow, mass, 183.

60
00:04:18.110 --> 00:04:21.918
Why is it not thinking it's
always gonna be those things, and

61
00:04:21.918 --> 00:04:24.858
it's picking up that
it's this type up above?

62
00:04:24.858 --> 00:04:29.712
&gt;&gt; TypeScript is trying to make
a reasonably safe assumption here.

63
00:04:29.712 --> 00:04:34.568
I think if I did this,
let's see if I do this, there's one more

64
00:04:34.568 --> 00:04:39.532
thing I could try, but, right,
createBanana, there you go.

65
00:04:39.532 --> 00:04:47.146
So I can help you with
your mental model here.

66
00:04:47.146 --> 00:04:48.314
What happens if I do this?

67
00:04:55.419 --> 00:04:59.129
What type is TypeScript
gonna think this is?

68
00:04:59.129 --> 00:04:59.827
&gt;&gt; An array?

69
00:04:59.827 --> 00:05:00.662
&gt;&gt; An array of numbers.

70
00:05:00.662 --> 00:05:05.635
Why isn't it saying it's a tuple of length

71
00:05:05.635 --> 00:05:09.925
3 with these specific things in it?

72
00:05:09.925 --> 00:05:10.795
It'd be inconvenient.

73
00:05:10.795 --> 00:05:11.789
&gt;&gt; That's for the array.

74
00:05:11.789 --> 00:05:17.189
&gt;&gt; Well, also, arrays are mutable, right?

75
00:05:17.189 --> 00:05:22.458
If I do this,
I'm combining a non-reassignable variable,

76
00:05:22.458 --> 00:05:29.368
that's const, we can't reassign it, and
I have an immutable value type here.

77
00:05:29.368 --> 00:05:33.799
I can't change that one to
a different number in memory.

78
00:05:33.799 --> 00:05:38.899
And I can't point array to a different
number, so this is cemented in place.

79
00:05:38.899 --> 00:05:44.234
So where you'll see literal types
coming through is where you've stated,

80
00:05:44.234 --> 00:05:47.495
look, I have this mutable thing,
an object.

81
00:05:47.495 --> 00:05:53.973
But I want you to regard it as
if this is a read-only thing,

82
00:05:53.973 --> 00:05:58.481
infer as if it were a const declaration.

83
00:05:58.481 --> 00:06:02.584
And when you do that, you're saying,
all right, TypeScript,

84
00:06:02.584 --> 00:06:07.445
I'm never changing this, make much
more specific assumptions about this.

85
00:06:07.445 --> 00:06:11.372
And that's why here we can see,
look at that,

86
00:06:11.372 --> 00:06:16.825
it's read-only name,
read-only color, read-only mass.

87
00:06:16.825 --> 00:06:21.296
Imagine we were holding
this as a class field or

88
00:06:21.296 --> 00:06:24.974
some state outside of createBanana.

89
00:06:24.974 --> 00:06:28.734
It doesn't know for
sure that by the time it returns this,

90
00:06:28.734 --> 00:06:31.440
it will be exactly what
it is on this line.

91
00:06:31.440 --> 00:06:34.071
Does that said help it click?

92
00:06:34.071 --> 00:06:35.267
&gt;&gt; Yeah.

93
00:06:41.623 --> 00:06:45.950
&gt;&gt; LJ in chat asks,
how do we check that fruit is a value?

94
00:06:45.950 --> 00:06:53.132
Can someone help me write a test that
will only pass if fruit is a value?

95
00:06:53.132 --> 00:06:56.308
Go ahead.
&gt;&gt; You could try assigning it to

96
00:06:56.308 --> 00:06:57.564
a variable.

97
00:06:59.409 --> 00:07:00.769
&gt;&gt; Only works if it's a value.

98
00:07:03.931 --> 00:07:06.556
This line right here,
if this were just a type,

99
00:07:12.262 --> 00:07:16.769
It would object, so if you can assign
something to a variable, it's a value, or

100
00:07:16.769 --> 00:07:19.775
it's at least a value,
make sure you remember that.

101
00:07:19.775 --> 00:07:25.784
It could be other things too, but
at least there's a value present.

102
00:07:25.784 --> 00:07:29.521
Mahmoud asks,
why are we using any on line 117?

103
00:07:29.521 --> 00:07:33.297
That is a great question, and I actually
ran into this problem earlier, and

104
00:07:33.297 --> 00:07:36.112
someone in class helped
me figure this out.

105
00:07:36.112 --> 00:07:40.224
[LAUGH] it happens to work here.

106
00:07:40.224 --> 00:07:44.672
I'm gonna change something, I'm gonna
make name a required property here.

107
00:07:44.672 --> 00:07:47.163
If I didn't use as any here, and

108
00:07:47.163 --> 00:07:52.717
I had some required property on Fruit2,
I'm gonna get an error here.

109
00:07:52.717 --> 00:07:58.155
Now, I would argue,
we're still passing the value test here,

110
00:07:58.155 --> 00:08:01.890
sorry, we're passing the type test here.

111
00:08:01.890 --> 00:08:06.160
Because the nature of this error,
it's saying, all right, it's a type, but

112
00:08:06.160 --> 00:08:08.158
you're missing the name property.

113
00:08:08.158 --> 00:08:12.867
But it's a type, we're still passing that,

114
00:08:12.867 --> 00:08:17.348
it's easier to understand
if we say as any.

115
00:08:17.348 --> 00:08:21.969
And what we're doing here is we're saying,
look, I don't want you to worry

116
00:08:21.969 --> 00:08:25.396
about the particulars of
actual type equivalence here.

117
00:08:25.396 --> 00:08:28.897
Just tell me if it is a type at all,
and that,

118
00:08:28.897 --> 00:08:34.016
we can suppress any errors about
the particulars of comparing is

119
00:08:34.016 --> 00:08:38.974
this empty object,
does it really satisfy the Fruit2 type?

120
00:08:38.974 --> 00:08:44.025
We're suppressing those errors,
effectively, and we're saying,

121
00:08:44.025 --> 00:08:48.672
just tell me if I have the right
thing to put in this part of my code.

122
00:08:52.326 --> 00:08:55.943
&gt;&gt; And one more question, what happens
if we clone an object as const,

123
00:08:55.943 --> 00:08:58.108
does it keep the read-only attribute?

124
00:08:59.322 --> 00:09:04.891
&gt;&gt; How are we cloning it?

125
00:09:04.891 --> 00:09:11.235
So I'm gonna answer what I think
the real question is behind the scenes.

126
00:09:11.235 --> 00:09:16.268
The read-only attributes here,
they're just

127
00:09:16.268 --> 00:09:22.292
TypeScript trying to stop you
from editing these values.

128
00:09:22.292 --> 00:09:27.048
It will do nothing for you at runtime,
it's not actually read-only.

129
00:09:27.048 --> 00:09:29.722
It's more like TypeScript saying,

130
00:09:29.722 --> 00:09:33.353
I will yell at you if you
try to write to this thing.

131
00:09:33.353 --> 00:09:36.755
There is a way you could make something
read-only, and that would be this.

132
00:09:40.496 --> 00:09:45.320
If we do Object.freeze,
you can think of this as like,

133
00:09:45.320 --> 00:09:49.438
you're not allowed to
write anything to this.

134
00:09:49.438 --> 00:09:52.591
I'm curious, let's see, all right,

135
00:09:52.591 --> 00:09:57.800
now it's called this Readonly,
great, it's a different form.

136
00:09:57.800 --> 00:10:02.572
Instead of saying as const, which will go
to every property of the value, and will

137
00:10:02.572 --> 00:10:07.504
say, okay, this is a literal type, we're
saying the whole object is read-only.

138
00:10:07.504 --> 00:10:12.278
It's not a mutable object
with some read-only

139
00:10:12.278 --> 00:10:17.049
fields in it,
the whole object is read-only,

140
00:10:17.049 --> 00:10:21.600
we can't add new things to this one,
right?

141
00:10:21.600 --> 00:10:25.705
The more important thing to realize is
this is actually a read-only object.

142
00:10:25.705 --> 00:10:29.544
If you were to run this code in a browser
that has no knowledge of TypeScript.

143
00:10:29.544 --> 00:10:36.691
And by that time the readonly keyword that
we had before, like this kind of thing.

144
00:10:36.691 --> 00:10:41.966
This kind of thing is stripped away after
you build and you spit out JavaScript.

145
00:10:41.966 --> 00:10:46.824
Object.freeze actually makes
the object read-only, and at runtime,

146
00:10:46.824 --> 00:10:48.950
it actually cannot be changed.

147
00:10:48.950 --> 00:10:53.863
Almost like you replaced all of
the fields with just getters of

148
00:10:53.863 --> 00:10:58.599
the same name, and
there's just no way to set properties.

149
00:10:58.599 --> 00:11:02.802
If you attempt to write to this object,
then it's just intercepted.

150
00:11:02.802 --> 00:11:07.792
I believe the property is, like what you
would see, you can attempt to write,

151
00:11:07.792 --> 00:11:10.678
and I think it just
silently does not happen.

152
00:11:10.678 --> 00:11:13.443
You can try to write all you want,
it just has no effect.

153
00:11:16.079 --> 00:11:18.256
Very important thing to understand,

154
00:11:18.256 --> 00:11:22.201
what is the thing that TypeScript
is trying to keep you honest about,

155
00:11:22.201 --> 00:11:26.023
versus what's something that's
actually part of your program?

156
00:11:26.023 --> 00:11:31.237
And is really preventing things
from happening at runtime.

157
00:11:31.237 --> 00:11:36.385
This make me think of, also,
the access modifier keyword private,

158
00:11:36.385 --> 00:11:42.262
for TypeScript private fields,
versus actual, hashtag JS private fields.

159
00:11:42.262 --> 00:11:46.326
The latter actually being private, and the
former is sort of just TypeScript saying,

160
00:11:46.326 --> 00:11:48.674
look, you said that you
shouldn't access this.

161
00:11:48.674 --> 00:11:53.355
And so I'm gonna fail to type check
if you try to access this thing.

162
00:11:53.355 --> 00:11:55.455
Did you have a question?

163
00:11:55.455 --> 00:12:00.040
&gt;&gt; Yeah, I guess what's more
common in practice is, I mean,

164
00:12:00.040 --> 00:12:06.386
to use the TypeScript's read-only kind
of method, or to do an Object.freeze?

165
00:12:06.386 --> 00:12:12.459
&gt;&gt; I'm gonna say they are different tools.

166
00:12:12.459 --> 00:12:18.240
Object.freeze is not free, so if you
were to do this on a really hot path,

167
00:12:18.240 --> 00:12:23.583
it comes with some cost, and
you're doing it to the entire object.

168
00:12:23.583 --> 00:12:27.446
So if you wanted an object with
a few read-only properties on it,

169
00:12:27.446 --> 00:12:29.916
you wouldn't wanna do Object.freeze.

170
00:12:29.916 --> 00:12:34.038
There are other things you could do to
make that actually enforced at runtime,

171
00:12:34.038 --> 00:12:37.108
and you would reach for
an ES proxy or something like that.

172
00:12:37.108 --> 00:12:43.856
Or you'd write a class with getters where
there is no setter for a few properties.

173
00:12:43.856 --> 00:12:48.556
But it's really about
deciding whether something

174
00:12:48.556 --> 00:12:52.716
actually needs to be read-only at runtime.

175
00:12:52.716 --> 00:12:59.912
Or whether you just wanna be kept
honest about abstaining from writing.

176
00:12:59.912 --> 00:13:04.135
I mean, we get the right type out of this,

177
00:13:04.135 --> 00:13:07.765
it's this Readonly utility type.

178
00:13:07.765 --> 00:13:13.036
And if we were to look at that,
it's the same thing as the previous type.

179
00:13:13.036 --> 00:13:16.606
The Readonly type, we'll look at it later.

180
00:13:19.364 --> 00:13:21.990
But I'll explain it to you now, oops.

181
00:13:25.902 --> 00:13:29.760
All it's doing is it's iterating
over the keys of a thing and

182
00:13:29.760 --> 00:13:32.192
it's adding readonly to each field.

183
00:13:32.192 --> 00:13:37.094
It's the same as what we saw before.

184
00:13:39.009 --> 00:13:43.082
I tend to reach for
Object.freeze pretty rarely.

185
00:13:43.082 --> 00:13:46.892
Sometimes in library or
framework code where you're like,

186
00:13:46.892 --> 00:13:51.820
this should never be mutated, I will see
Chrome deoptimize my code if this ever

187
00:13:51.820 --> 00:13:55.497
mutates, that's when you
would do something like this.

188
00:13:55.497 --> 00:13:59.867
But the silent failure nature of
it is sort of, can be confusing,

189
00:13:59.867 --> 00:14:02.179
it's hard to catch bugs that way.

190
00:14:02.179 --> 00:14:05.150
And then you're right back to just
TypeScript keeping you honest, so.

