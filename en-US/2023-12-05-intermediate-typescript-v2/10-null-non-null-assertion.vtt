WEBVTT

1
00:00:00.033 --> 00:00:02.961
The next topic we're gonna
cover is Nullish values.

2
00:00:02.961 --> 00:00:10.280
These are dealing with values that
might be empty or not yet populated.

3
00:00:10.280 --> 00:00:13.541
We talked a little bit
about null undefined and

4
00:00:13.541 --> 00:00:16.309
void in terms of them being unit types.

5
00:00:16.309 --> 00:00:21.585
But let's talk about when it's appropriate
to use undefined versus nuul and

6
00:00:21.585 --> 00:00:26.130
then we're going to get into a couple
of topics here dealing with,

7
00:00:26.130 --> 00:00:28.661
how do you work with Nullish values?

8
00:00:28.661 --> 00:00:31.834
How do you safely do
that,TypeScript provides us

9
00:00:31.834 --> 00:00:35.620
with a couple different
things,several operators here.

10
00:00:35.620 --> 00:00:40.469
All four of these are TypeScript
features that have a particular

11
00:00:40.469 --> 00:00:45.600
syntax that you can use,
that relates to handling Nullish values.

12
00:00:45.600 --> 00:00:50.576
So first let's look at null.

13
00:00:50.576 --> 00:00:56.930
So null differs from
undefined in that null is

14
00:00:56.930 --> 00:01:02.790
something that has to be explicitly set.

15
00:01:02.790 --> 00:01:10.041
So I tend to use null to
mean that nothing is here.

16
00:01:10.041 --> 00:01:14.522
Like somebody has filled in this field and

17
00:01:14.522 --> 00:01:18.241
the field contains nothing null.

18
00:01:18.241 --> 00:01:20.854
It is distinguishable from undefined.

19
00:01:20.854 --> 00:01:28.810
Undefined, it indicates that something may
not have ever been set in the first place.

20
00:01:28.810 --> 00:01:30.557
So, where are we gonna see undefined?

21
00:01:30.557 --> 00:01:34.597
Well, anytime you have an optional
property, right, on a, gosh,

22
00:01:34.597 --> 00:01:39.139
I don't even wanna say object type now,
but on an interface, I can say that.

23
00:01:39.139 --> 00:01:43.792
Date has the possibility, or so completed
at has the possibility of being a date or

24
00:01:43.792 --> 00:01:44.880
being undefined.

25
00:01:44.880 --> 00:01:49.724
And you can see here, if we're saying,
all right, I've got a form in

26
00:01:49.724 --> 00:01:54.920
progress interface, I have a value
that describes this form in progress.

27
00:01:54.920 --> 00:02:00.312
And I want to then pass it into this,
I wanna use it to submit this form.

28
00:02:00.312 --> 00:02:05.160
Sorry, let me get the tool tip here,
it's lagging a little bit.

29
00:02:05.160 --> 00:02:07.166
Come on, give me completed at.

30
00:02:07.166 --> 00:02:12.209
So that is new date but
if we look at the type here,

31
00:02:12.209 --> 00:02:15.914
it's still type form in progress.

32
00:02:15.914 --> 00:02:18.818
This is gonna indicate
that it's undefined,

33
00:02:18.818 --> 00:02:21.502
cuz that's how we've ended up with this.

34
00:02:21.502 --> 00:02:24.069
It's really coming from this
type annotation here, right.

35
00:02:24.069 --> 00:02:30.209
It's gonna say, the value you gave me
certainly meets this interface and

36
00:02:30.209 --> 00:02:34.084
if you want to regard it
as this type of course.

37
00:02:34.084 --> 00:02:39.500
Sorry, I'm getting a little confused here,
completedAt versus createdAt.

38
00:02:39.500 --> 00:02:44.859
We could put a completed at here just for
fun, I think the example still works.

39
00:02:50.340 --> 00:02:51.650
Yep, it does still work.

40
00:02:51.650 --> 00:02:54.633
So, yeah,
we happen to be providing it in this case.

41
00:02:54.633 --> 00:03:00.310
We have both dates but here, if we're
saying my date equals form in progress,

42
00:03:00.310 --> 00:03:03.505
whose type is the interface above, right?

43
00:03:03.505 --> 00:03:06.729
It's the interface on
line 11 which represents

44
00:03:06.729 --> 00:03:09.040
that completedAt may not be there.

45
00:03:09.040 --> 00:03:12.811
If we try to go ahead and grab it,
it has the possibility of being undefined.

46
00:03:16.091 --> 00:03:18.340
So this is an interesting thing here.

47
00:03:18.340 --> 00:03:23.756
TypeScript has a new feature that
we'll learn more about later called,

48
00:03:23.756 --> 00:03:28.930
it's a satisfies keyword which would
make this a little bit neater.

49
00:03:28.930 --> 00:03:34.671
It would allow us to say yes we have
a form in progres, okay because onto that.

50
00:03:34.671 --> 00:03:39.371
But can you go ahead and
keep the most specific type you can so

51
00:03:39.371 --> 00:03:43.140
that we don't lose
the fact that completedAt.

52
00:03:43.140 --> 00:03:47.955
Is actually present it is present
on this particular variable.

53
00:03:47.955 --> 00:03:49.754
So we'll learn more about that later.

54
00:03:49.754 --> 00:03:51.190
That's undefined void.

55
00:03:51.190 --> 00:03:55.045
We talked about void just now.

56
00:03:55.045 --> 00:03:59.506
It means, a function functions
return value should be uninteresting

57
00:03:59.506 --> 00:04:04.353
console.log is an example,
don't listen to what console.log returns.

58
00:04:04.353 --> 00:04:08.811
All right, let's get into how we
work with these Nullish values.

59
00:04:08.811 --> 00:04:12.817
The first of these operators
we're gonna describe is

60
00:04:12.817 --> 00:04:15.584
the non-null assertion operator.

61
00:04:15.584 --> 00:04:18.871
So here we have a GroceryCart.

62
00:04:18.871 --> 00:04:23.390
This fruits and vegetables, property,
they both may not be present, right.

63
00:04:23.390 --> 00:04:25.721
So we're gonna create
a cart called grocery cart.

64
00:04:25.721 --> 00:04:29.310
It happens to not have either
of those two fields on it.

65
00:04:29.310 --> 00:04:35.114
And we can see that if we just
try to go like cart.fruits.push,

66
00:04:35.114 --> 00:04:42.220
we're alerted to the possibility that
cart.fruits is possibly undefined.

67
00:04:42.220 --> 00:04:48.527
Adding this exclamation mark right here,
that is the non null assertion operator.

68
00:04:48.527 --> 00:04:53.290
What this means is plow straight through.

69
00:04:53.290 --> 00:04:54.260
Does that sound safe?

70
00:04:54.260 --> 00:04:55.077
&gt;&gt; It could possibly go wrong.

71
00:04:55.077 --> 00:04:59.320
&gt;&gt; What could possibly go
wrong seems like a great idea.

72
00:04:59.320 --> 00:05:01.790
It's not, it's not safe.

73
00:05:01.790 --> 00:05:06.659
It's not to say that this is useless,
but this will error.

74
00:05:06.659 --> 00:05:13.850
This will error, fruits is in fact
not there, so this will throw.

75
00:05:13.850 --> 00:05:17.531
Now, where might this be useful?

76
00:05:17.531 --> 00:05:22.230
Well, I use this all the time in tests,
why?

77
00:05:22.230 --> 00:05:27.090
I want things to throw, if they
deviate from my expectations in tests.

78
00:05:27.090 --> 00:05:31.013
It's perfectly fine for them to throw,
that is a test failure.

79
00:05:31.013 --> 00:05:33.660
So it's a little bit like
an assertion in a test.

80
00:05:33.660 --> 00:05:39.212
It works beautifully in
tests libraries like MOCA,

81
00:05:39.212 --> 00:05:47.170
for example, where thrown errors
are what happens when assertions fail.

82
00:05:47.170 --> 00:05:52.210
So if you have other thrown errors that
are part of your test It'll be caught

83
00:05:52.210 --> 00:05:57.660
just like an assertion failure and in
most cases it'll be surfaced very nicely.

84
00:05:57.660 --> 00:06:00.865
There are test frameworks that
don't behave that way, but

85
00:06:00.865 --> 00:06:02.413
I prefer I like when throws.

86
00:06:02.413 --> 00:06:06.753
Even if they're not part of a direct
assertion, it's just like this function

87
00:06:06.753 --> 00:06:10.846
was not happy and it threw, I like that
to be handled in a very visible way.

88
00:06:10.846 --> 00:06:12.057
Yes, sir.

89
00:06:12.057 --> 00:06:16.871
&gt;&gt; Is that similar to that annotation you
had already told TypeScript to ignore

90
00:06:16.871 --> 00:06:20.342
the next line, or
is it more specific to just that one?

91
00:06:20.342 --> 00:06:22.847
&gt;&gt; Very good question,
yeah, we could do this.

92
00:06:26.164 --> 00:06:28.663
I could do that, so
let's try that instead.

93
00:06:28.663 --> 00:06:31.876
Actually, I'm gonna leave this example,
let's try it up here.

94
00:06:31.876 --> 00:06:38.097
So it would make that error go away,
but what about this

95
00:06:39.525 --> 00:06:43.727
Oops, I'm lagging a little bit here.

96
00:06:48.072 --> 00:06:52.322
Should this work?

97
00:06:55.166 --> 00:07:02.745
There's a difference between turning
TypeScript off and saying specifically,

98
00:07:02.745 --> 00:07:09.240
please just ignore the possibility
that this one thing might be null.

99
00:07:09.240 --> 00:07:14.387
So that's part of the value here,
you don't want to sort of say TypeScript

100
00:07:14.387 --> 00:07:19.779
literally get out of my way on this next
slide like don't do any type checking,

101
00:07:19.779 --> 00:07:22.414
don't error I don't care what it is.

102
00:07:22.414 --> 00:07:27.899
Versus this is a much more precise way
of saying just that I want you to ignore

103
00:07:27.899 --> 00:07:33.756
something very specific and it's the
possibility that this one thing is null.

104
00:07:33.756 --> 00:07:37.406
And if you had,
let's say cart could have been undefined,

105
00:07:37.406 --> 00:07:42.151
you'd have to add a bang, an exclamation
mark, every step of the way that you

106
00:07:42.151 --> 00:07:46.686
wanna plow through a specific
possibility that something is undefined.

107
00:07:46.686 --> 00:07:50.489
So if it were a chain, sometimes you
have a big nested JSON object, and

108
00:07:50.489 --> 00:07:52.100
it could be a bunch of things,

109
00:07:52.100 --> 00:07:56.181
and if you just wanna sort of plow
straight through into a particular path.

110
00:07:56.181 --> 00:07:59.287
You'd need a lot of exclamation
marks in order to do that, but

111
00:07:59.287 --> 00:08:01.700
that would be perfectly fine in a test,
right?

112
00:08:01.700 --> 00:08:06.227
Where you get the result of a function and
you want to know, did some,

113
00:08:06.227 --> 00:08:11.071
grandchild object have a particular
field on it with a value you could just

114
00:08:11.071 --> 00:08:12.730
push straight through.

115
00:08:12.730 --> 00:08:17.605
And if anything throws that's
an assertion failure, that's great.

116
00:08:17.605 --> 00:08:21.304
But I tend to not want to
use this in library code or

117
00:08:21.304 --> 00:08:24.928
an application code
because it's dangerous.

118
00:08:24.928 --> 00:08:28.807
I'm about to talk about one place
I will use something very similar.

119
00:08:28.807 --> 00:08:33.581
It's similar in nature, it's kind of
the same syntax, also an exclamation mark.

120
00:08:33.581 --> 00:08:36.132
But we'll get to that immediately,

121
00:08:36.132 --> 00:08:39.760
let me just get this back to where it was,
all right.

