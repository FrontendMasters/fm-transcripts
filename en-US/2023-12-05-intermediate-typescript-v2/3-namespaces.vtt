WEBVTT

1
00:00:00.440 --> 00:00:03.745
Let's take a little side trip here and

2
00:00:03.745 --> 00:00:09.330
talk about namespaces just so
you all understand how they work.

3
00:00:10.740 --> 00:00:14.550
Who here, or online,
like who's used jQuery before?

4
00:00:15.950 --> 00:00:20.507
Awesome, every passing year I
get a little bit afraid that

5
00:00:20.507 --> 00:00:22.925
people forget what jQuery is.

6
00:00:22.925 --> 00:00:25.940
Great, lots of people use jQuery.

7
00:00:25.940 --> 00:00:29.230
It's still on 80% of websites globally.

8
00:00:30.360 --> 00:00:33.549
And aside from the highest
traffic websites,

9
00:00:33.549 --> 00:00:38.080
it's incredibly likely that
you'll find jQuery on things.

10
00:00:38.080 --> 00:00:43.107
The purpose of jQuery was,
it helped us at a time where

11
00:00:43.107 --> 00:00:48.390
we did not have a standardized
DOM API we could use.

12
00:00:48.390 --> 00:00:52.099
So if you use
document.querySelector today,

13
00:00:52.099 --> 00:00:58.610
that was not a thing that we could
rely on in the early 2010s and before.

14
00:00:58.610 --> 00:01:03.218
We needed a library that sort of
provided some abstractions that would do

15
00:01:03.218 --> 00:01:07.156
the right thing in like early
versions of Internet Explorer.

16
00:01:07.156 --> 00:01:12.490
And worked on all the browsers,
it's it's really a compatibility layer.

17
00:01:12.490 --> 00:01:15.943
So there are two kinds of things
that we can do with jQuery, or

18
00:01:15.943 --> 00:01:18.030
two common kinds of things.

19
00:01:18.030 --> 00:01:22.133
One is, so first off,
we would distribute jQuery as a global.

20
00:01:22.133 --> 00:01:25.630
You'd import a script,
add it to your website, right?

21
00:01:25.630 --> 00:01:29.560
You'd have a script tag,
you'd paste that in your HTML.

22
00:01:29.560 --> 00:01:34.120
And then as a result of that script being
evaluated, it would set up a global.

23
00:01:34.120 --> 00:01:38.319
You would include this script and then
you'd be able to just hit dollar sign, and

24
00:01:38.319 --> 00:01:39.660
there's jQuery.

25
00:01:39.660 --> 00:01:43.430
This was before we had proper packaging
where you'd import things that you need.

26
00:01:43.430 --> 00:01:45.560
It would just be set up as a global.

27
00:01:45.560 --> 00:01:50.390
So hanging off of this global would
be a bunch of functions like .ajax.

28
00:01:50.390 --> 00:01:55.070
If you've not used this,
this is like the old equivalent to fetch.

29
00:01:55.070 --> 00:01:59.520
This is making a HTTP
request asynchronously.

30
00:01:59.520 --> 00:02:04.580
And here you can see, this is actually
what's on the jQuery homepage right now.

31
00:02:05.850 --> 00:02:11.190
Ajax later began to return promises before
promises were a standardized thing.

32
00:02:11.190 --> 00:02:15.208
But the earliest versions had you passing
in a callback to handle the success case

33
00:02:15.208 --> 00:02:17.880
and a different callback
to handle the failure case.

34
00:02:17.880 --> 00:02:20.810
So this is a function
hanging off of dollar sign.

35
00:02:22.110 --> 00:02:27.410
Also, you could invoke
dollar sign as a function.

36
00:02:27.410 --> 00:02:32.100
And this is equivalent to
document.querySelectorAll,

37
00:02:32.100 --> 00:02:35.926
where you're saying,
here is an expression,

38
00:02:35.926 --> 00:02:40.400
find me the DOM nodes that
meet this expression.

39
00:02:40.400 --> 00:02:43.090
And then I wanna operate on them.

40
00:02:43.090 --> 00:02:47.610
And today we would get like a node
list back from QuerySelectorAll.

41
00:02:47.610 --> 00:02:51.500
jQuery had its own little construct here,
but it would give you a forEach.

42
00:02:51.500 --> 00:02:54.705
And this is how we used to do DOM
manipulation in a way that would work

43
00:02:54.705 --> 00:02:56.320
across a wide range of browsers.

44
00:02:58.260 --> 00:03:00.450
Typing this is challenging.

45
00:03:00.450 --> 00:03:04.720
It's a function and it's got a bunch
of stuff dangling off of it.

46
00:03:04.720 --> 00:03:05.850
How do we type that?

47
00:03:05.850 --> 00:03:07.660
With a namespace.

48
00:03:07.660 --> 00:03:12.070
So this is an approximate type for jQuery.

49
00:03:14.050 --> 00:03:17.712
We could say that we have
a function called dollar sign and

50
00:03:17.712 --> 00:03:20.200
it returns a node list of elements.

51
00:03:20.200 --> 00:03:23.641
And here we're probably failing or
like implementing it by calling,

52
00:03:23.641 --> 00:03:25.580
effectively the API that replaced it.

53
00:03:26.650 --> 00:03:31.547
And then we can have a namespace here
that exposes functions which sort

54
00:03:31.547 --> 00:03:34.910
of end up dangling off of the dollar sign.

55
00:03:34.910 --> 00:03:37.290
That's the idea of a namespace.

56
00:03:37.290 --> 00:03:42.076
You can have a function and
then you can merge on top of it things

57
00:03:42.076 --> 00:03:46.232
that should be kind of
dangling off of this function.

58
00:03:46.232 --> 00:03:49.660
If we take this ts-ignore comment away,

59
00:03:52.967 --> 00:03:59.550
We can see that there's a namespace
dollar sign, function dollar sign.

60
00:03:59.550 --> 00:04:04.277
So we can see that we have declaration
merging here, we see a namespace and

61
00:04:04.277 --> 00:04:06.700
a non namespace value.

62
00:04:06.700 --> 00:04:11.360
And we can invoke it and
we can access .ajax off of it.

63
00:04:11.360 --> 00:04:15.107
So this is a very good example of
why we used to use namespaces for

64
00:04:15.107 --> 00:04:16.320
this kind of thing.

65
00:04:17.320 --> 00:04:23.055
NThis is sort of evidence that TypeScript,
one of the problems it's trying to solve

66
00:04:23.055 --> 00:04:28.000
is that a very wide range of JavaScript
things can be effectively typed.

67
00:04:28.000 --> 00:04:33.307
And without namespace we would have
to get really interesting here.

68
00:04:33.307 --> 00:04:36.036
We could type it other ways, but

69
00:04:36.036 --> 00:04:41.596
it's more clear when you can say,
here's the callable thing and

70
00:04:41.596 --> 00:04:46.060
then here are the things
that are dangling off of it.

71
00:04:46.060 --> 00:04:48.890
You could have one big mega
interface with a call signature and

72
00:04:48.890 --> 00:04:50.260
a bunch of properties there.

73
00:04:52.020 --> 00:04:55.643
There are advantages to doing it this
way where you could sort of break your

74
00:04:55.643 --> 00:04:58.333
type information up into
a bunch of different files and

75
00:04:58.333 --> 00:05:01.380
sort of expose them all
through the central namespace.

76
00:05:01.380 --> 00:05:03.580
It's easier to manage
when you do it this way.

