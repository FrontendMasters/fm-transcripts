WEBVTT

1
00:00:00.970 --> 00:00:05.660
The first topic we're gonna discuss
today is a declaration merging.

2
00:00:05.660 --> 00:00:09.491
So, TypeScript and
JavaScript, well, sorry,

3
00:00:09.491 --> 00:00:15.332
TypeScript lets us create different
kinds of things that can be imported and

4
00:00:15.332 --> 00:00:18.740
exported across module boundaries.

5
00:00:18.740 --> 00:00:24.480
So, if you imagine I've got a situation
like what I'm showing on the screen here,

6
00:00:24.480 --> 00:00:27.570
we have an interface called Fruit.

7
00:00:27.570 --> 00:00:32.860
We can create a banana that
is a value of type Fruit, and

8
00:00:32.860 --> 00:00:40.352
we can see that fruits have a property
on them called name, mass, and color.

9
00:00:40.352 --> 00:00:43.889
And we have name, mass and color here.

10
00:00:43.889 --> 00:00:49.830
We can see banana is a named thing
with something associated with it.

11
00:00:49.830 --> 00:00:52.850
Fruit is a name thing with
something associated with it.

12
00:00:52.850 --> 00:00:55.070
We're exporting both of these things.

13
00:00:55.070 --> 00:01:01.909
You can see on the tool tips here, const
banana: Fruit, interface Fruit, great.

14
00:01:01.909 --> 00:01:04.722
So I'm gonna coin a term here, and

15
00:01:04.722 --> 00:01:09.960
let's call these importable,
exportable things with a name.

16
00:01:09.960 --> 00:01:11.850
Let's call them identifiers.

17
00:01:13.370 --> 00:01:17.590
Internally, TypeScript
calls these a ts.symbol.

18
00:01:17.590 --> 00:01:19.670
But JavaScript has
a concept called symbols.

19
00:01:19.670 --> 00:01:23.972
So we're not gonna call them that,
we're gonna call them identifiers.

20
00:01:26.352 --> 00:01:31.981
So let's change our
situation a little bit.

21
00:01:31.981 --> 00:01:35.288
Let's introduce a function.

22
00:01:38.977 --> 00:01:41.285
So we've got a function called fruit.

23
00:01:41.285 --> 00:01:45.702
It takes an argument that's a string,
and you can see that,

24
00:01:45.702 --> 00:01:51.519
depending on the string we pass in,
it's going to return an instance of Fruit.

25
00:01:51.519 --> 00:01:55.784
So it's gonna return banana
which already exists, right,

26
00:01:55.784 --> 00:01:59.310
that's that's coming from up here.

27
00:01:59.310 --> 00:02:03.745
So if we look at the function Fruit,
it takes a string as an argument,

28
00:02:03.745 --> 00:02:05.049
it returns a fruit.

29
00:02:05.049 --> 00:02:09.306
It's a :fruit at the end, great.

30
00:02:09.306 --> 00:02:13.239
Let's look at our export statement again.

31
00:02:13.239 --> 00:02:16.270
So banana is as we left it.

32
00:02:17.600 --> 00:02:24.160
But look at Fruit, Fruit has two things
with this little alias word before that.

33
00:02:24.160 --> 00:02:29.550
It has a function Fruit and it has the
interface that was there when we started.

34
00:02:30.660 --> 00:02:34.410
What we're seeing here is something
called declaration merging.

35
00:02:34.410 --> 00:02:38.585
Fruit is a single identifier,
a single exportable or

36
00:02:38.585 --> 00:02:43.615
importable thing, that now has
two things stacked on top of it.

37
00:02:45.961 --> 00:02:48.135
We can take this one step further.

38
00:02:52.013 --> 00:02:54.773
We're gonna add something
called a namespace and

39
00:02:54.773 --> 00:02:58.067
I'll get into what a namespace is and
when you might use it.

40
00:02:58.067 --> 00:03:01.012
It's actually not super
important to remember it but

41
00:03:01.012 --> 00:03:04.160
it's useful when thinking
about declaration merging.

42
00:03:05.240 --> 00:03:08.180
We're creating a namespace called Fruit.

43
00:03:08.180 --> 00:03:13.660
It's got a function on it, appears to have
a function within it called createBanana.

44
00:03:13.660 --> 00:03:18.637
It invokes Fruit, and it's gonna
get that banana instance returning.

45
00:03:18.637 --> 00:03:21.785
Let's go down and look at our
export statement one more time.

46
00:03:21.785 --> 00:03:26.200
Look at that, we have three things
stacked on top of each other.

47
00:03:26.200 --> 00:03:31.190
We have a function, we have an interface,
and we have a namespace.

48
00:03:31.190 --> 00:03:32.990
A function is a value, right?

49
00:03:32.990 --> 00:03:37.442
We know we can create,
you can use like const fruit equals and

50
00:03:37.442 --> 00:03:39.630
then put an arrow function.

51
00:03:39.630 --> 00:03:41.900
Functions are just values.

52
00:03:41.900 --> 00:03:45.955
You could pass a function into another
function, anytime you use a callback,

53
00:03:45.955 --> 00:03:47.500
that's what you're doing.

54
00:03:47.500 --> 00:03:48.858
Interface is a type.

55
00:03:48.858 --> 00:03:50.080
We know its type.

56
00:03:51.990 --> 00:03:53.540
Namespace is kind of something else.

57
00:03:53.540 --> 00:03:57.270
I want you to think of it
as like another value.

58
00:03:57.270 --> 00:03:58.200
It is a value,

59
00:03:58.200 --> 00:04:03.490
we'll prove this to ourselves with
an evidence-based approach here.

60
00:04:03.490 --> 00:04:07.385
But it's special enough that TypeScript

61
00:04:07.385 --> 00:04:12.050
gives it its own slot
on an identifier here.

62
00:04:12.050 --> 00:04:16.530
So, how do we tell
what's on an identifier?

63
00:04:16.530 --> 00:04:20.095
LiWe see we've got three things stacked
on top of each other, and short of just

64
00:04:20.095 --> 00:04:24.270
looking at the tooltip, we're gonna have
to resort to that for one of these things.

65
00:04:24.270 --> 00:04:26.550
But how do we know
what's on an identifier?

66
00:04:26.550 --> 00:04:29.177
So, there are a couple tests
that we can perform and

67
00:04:29.177 --> 00:04:31.730
we're gonna go through
them one by one here.

68
00:04:31.730 --> 00:04:34.570
So first, I'm gonna create
a bunch of different things.

69
00:04:34.570 --> 00:04:36.450
This, clearly a value, right?

70
00:04:36.450 --> 00:04:37.680
This is like a variable.

71
00:04:37.680 --> 00:04:39.580
We're setting it equal to 4,
that's a value.

72
00:04:39.580 --> 00:04:43.453
This very clearly as a type so
I'm creating a type alias,

73
00:04:43.453 --> 00:04:46.450
it happens to be the empty
object type here.

74
00:04:49.040 --> 00:04:52.280
The third thing we're
creating is a namespace.

75
00:04:52.280 --> 00:04:56.440
I haven't really discussed namespaces but
I'm just borrowing the syntax here.

76
00:04:56.440 --> 00:04:59.806
It says if we just took
the namespace Fruit, renamed it and

77
00:04:59.806 --> 00:05:05.530
took everything inside of it out or we're
just putting another variable in here.

78
00:05:05.530 --> 00:05:10.410
So those were our three things we're
going to use as we perform tests.

79
00:05:10.410 --> 00:05:11.514
So we have tests for

80
00:05:11.514 --> 00:05:15.450
checking whether something within
an identifier has a value on it.

81
00:05:15.450 --> 00:05:18.920
We have something for checking whether
an identifier has a type on it.

82
00:05:18.920 --> 00:05:24.615
And then finally, there's no great way
to differentiate between values and

83
00:05:24.615 --> 00:05:28.040
namespaces using some
expression like this.

84
00:05:28.040 --> 00:05:33.280
So this one you sort of have to hover
over it and look at the tool tip.

85
00:05:33.280 --> 00:05:36.800
And namespace can pass for
a value in a lot of cases.

86
00:05:36.800 --> 00:05:41.560
So this is the one where I have to say,
hover over the thing.

87
00:05:42.680 --> 00:05:46.283
There's no expression you can write
that will only work if something is

88
00:05:46.283 --> 00:05:49.690
a namespace,
the value stuff will work as well.

89
00:05:49.690 --> 00:05:54.662
So let's convince ourselves that these
tests work by looking at some negative

90
00:05:54.662 --> 00:05:55.850
test cases.

91
00:05:55.850 --> 00:05:59.335
So here, we're trying to use a type
in the value position, right,

92
00:05:59.335 --> 00:06:02.310
on the right hand side of
a variable assignment.

93
00:06:02.310 --> 00:06:04.610
And it's saying it's a type,
only refers to a type but

94
00:06:04.610 --> 00:06:07.200
it's being used as a value
here that's very clear, right?

95
00:06:07.200 --> 00:06:11.740
It's saying there is no
value on this identifier.

96
00:06:13.400 --> 00:06:16.200
Here is a namespace being used as a value.

97
00:06:16.200 --> 00:06:21.988
This is reinforcing the idea that
it can be used in value space,

98
00:06:21.988 --> 00:06:27.920
meaning in places where values
are the only things you can use.

99
00:06:27.920 --> 00:06:32.353
Here, we're trying to use a value as
a type and it's telling you very clearly,

100
00:06:32.353 --> 00:06:35.680
this refers to a value but
you're trying to use it as a type.

101
00:06:35.680 --> 00:06:37.920
This means there's no
type on this identifier.

102
00:06:37.920 --> 00:06:43.220
And then finally, namespaces, it's the
same test you perform as values, right?

103
00:06:43.220 --> 00:06:45.200
You can't use namespaces as a type either.

104
00:06:46.370 --> 00:06:50.416
You could use a type query,
but remember, type queries,

105
00:06:50.416 --> 00:06:54.058
the whole point of those is
to get the type of a value.

106
00:06:54.058 --> 00:06:57.448
Something like that and it would work.

107
00:06:57.448 --> 00:07:02.878
But this here, you could also think
of this as proof that this is

108
00:07:02.878 --> 00:07:09.124
a value cuz if you did this,
It's not gonna be happy here.

109
00:07:09.124 --> 00:07:12.550
Type of is another way you could
test to see if something's a value.

110
00:07:12.550 --> 00:07:17.250
You can't say type of and
then provide something without a value.

111
00:07:17.250 --> 00:07:19.780
Great, so we know these tests work.

