WEBVTT

1
00:00:00.100 --> 00:00:03.970
Extreme types,
these are types that accept anything or

2
00:00:03.970 --> 00:00:09.130
almost anything, and types that
accept nothing or almost nothing.

3
00:00:09.130 --> 00:00:14.080
And we call these, respectively,
top and bottom types.

4
00:00:14.080 --> 00:00:18.473
So TypeScript has a wide range of things
that sort of fit into this extreme types

5
00:00:18.473 --> 00:00:19.680
category.

6
00:00:19.680 --> 00:00:24.970
And by the end of this chapter you should
understand like what these things are.

7
00:00:24.970 --> 00:00:30.080
Some pragmatic use cases for where some of
these different things are best applied.

8
00:00:30.080 --> 00:00:35.611
And in particular there's a really cool
pattern around the use of the Never type,

9
00:00:35.611 --> 00:00:38.820
which is tops scripts bottom type.

10
00:00:38.820 --> 00:00:42.006
This is called exhaustive conditionals,
and

11
00:00:42.006 --> 00:00:47.820
it's one of my favorite things,
favorite patterns to use in TypeScript.

12
00:00:47.820 --> 00:00:49.280
So we'll get a little bit into that.

13
00:00:50.930 --> 00:00:54.437
So first,
I'm actually gonna pivot to my VS Code,

14
00:00:54.437 --> 00:00:58.310
which you can follow on in
the website if you like.

15
00:00:58.310 --> 00:01:01.050
The first thing we're gonna
talk about is the type any.

16
00:01:01.050 --> 00:01:05.031
So we've been dealing with this already,
you see a lot of anys

17
00:01:05.031 --> 00:01:09.320
particularly as you're starting
to use TypeScript, even more so

18
00:01:09.320 --> 00:01:14.450
if you're converting a JavaScript code
base to TypeScript a lot of things start

19
00:01:14.450 --> 00:01:19.681
out as these implicit any's, or typeScript
cannot infer a more specific type.

20
00:01:19.681 --> 00:01:26.855
But any can accept anything, that's what
makes it a top type, can accept anything.

21
00:01:26.855 --> 00:01:34.790
Any value you can create in JavaScript,
you can put in a variable of type any.

22
00:01:34.790 --> 00:01:38.612
So here we can see I've got something
I'm initially assigning it a number,

23
00:01:38.612 --> 00:01:42.318
then I'm putting a string in there,
then the window.document object,

24
00:01:42.318 --> 00:01:45.929
then the function settimeout,
type scripts, happy to let me do this.

25
00:01:45.929 --> 00:01:50.450
But I want you to think about this as
sort of type checking being disabled.

26
00:01:50.450 --> 00:01:54.693
We just got done talking about this
at the end of the declaration merging

27
00:01:54.693 --> 00:01:59.280
chapter where somebody asked,
I had this sort of empty object as any.

28
00:01:59.280 --> 00:02:03.283
And I said, well, I'm putting the any
there so that TypeScript is not actually

29
00:02:03.283 --> 00:02:07.350
caring at all about the specifics of
like comparing the types to things.

30
00:02:07.350 --> 00:02:08.970
That's exactly what we're seeing here.

31
00:02:08.970 --> 00:02:13.532
TypeScript has sort of backed off and
regular JavaScript rules apply,

32
00:02:13.532 --> 00:02:16.050
which is, of course, a problem here.

33
00:02:16.050 --> 00:02:19.850
Look at this almost sentence
that I'm able to write.

34
00:02:19.850 --> 00:02:25.820
Obviously, none of these objects are here,
and TypeScript is not doing a thing

35
00:02:25.820 --> 00:02:32.600
to stop us from calling these properties
on undefined, it's, it's not gonna work.

36
00:02:32.600 --> 00:02:35.654
Now, it's a common misconception
that like anys are evil and

37
00:02:35.654 --> 00:02:38.060
you should ban them from your code base.

38
00:02:38.060 --> 00:02:42.625
Sometimes any is exactly the type
that is most appropriate for

39
00:02:42.625 --> 00:02:47.474
a given situation, and
a great example of this is console.log.

40
00:02:47.474 --> 00:02:51.470
Any value you can create in JavaScript
you can pass to console that log.

41
00:02:51.470 --> 00:02:56.953
There's literally nothing that you can
pass to it that it will fail to serialize,

42
00:02:56.953 --> 00:03:01.255
I believe that's true,
that's a pretty sweeping statement.

43
00:03:01.255 --> 00:03:05.647
And you can see here
like it's typed as any,

44
00:03:05.647 --> 00:03:12.030
there's not really a purpose to
message and optional params.

45
00:03:12.030 --> 00:03:16.620
You all have use console.log,
you just pass it a bunch of stuff, but

46
00:03:16.620 --> 00:03:22.160
the first argument isn't any, and then
you have a rest param of type any array.

47
00:03:22.160 --> 00:03:26.378
So you pass it as many anys you want and
it will log, this is the actual

48
00:03:26.378 --> 00:03:31.281
appropriate type to use, or I will say,
a top type is appropriate to use here.

49
00:03:33.615 --> 00:03:38.160
There's another type that TypeScript
provides, and it's called unknown.

50
00:03:42.359 --> 00:03:46.193
So, performing the same
tests that we did above,

51
00:03:46.193 --> 00:03:51.868
we can see that we're allowed to assign
a wide range of things to unknown.

52
00:03:51.868 --> 00:03:57.928
And this, in fact is what makes it another
top type, it's ready to accept any value.

53
00:03:57.928 --> 00:04:01.960
But there is something
different about this.

54
00:04:01.960 --> 00:04:06.201
We can't use an unknown
until we perform a little

55
00:04:06.201 --> 00:04:09.726
bit of an investigation into what it is.

56
00:04:09.726 --> 00:04:13.946
It can accept anything and
that makes it a top type,

57
00:04:13.946 --> 00:04:16.707
but we have to narrow this value.

58
00:04:16.707 --> 00:04:21.950
We have to use a type guard before we can
go and use it for just about anything.

59
00:04:21.950 --> 00:04:28.435
And so you can see here, we're busted
Typescript's helping us avoid having

60
00:04:28.435 --> 00:04:34.740
an improper assumption that like all
of this stuff is my unknown variable.

61
00:04:34.740 --> 00:04:35.793
It's a number, it's 14.

62
00:04:35.793 --> 00:04:41.529
It doesn't treat it as a number, but
it certainly is not willing to let us use

63
00:04:41.529 --> 00:04:47.731
it until we apply some type guards here,
which is exactly what we're about to do.

64
00:04:47.731 --> 00:04:49.998
And I've left some comments here,

65
00:04:49.998 --> 00:04:54.458
going back to the analogy we started
in TypeScript fundamentals V4,

66
00:04:54.458 --> 00:04:59.190
where we think about types as
representing a set of allowed values.

67
00:04:59.190 --> 00:05:04.207
I've put the sets for
each branch of this condition,

68
00:05:04.207 --> 00:05:09.350
or this conditional flow,
as comments along the way.

69
00:05:09.350 --> 00:05:13.768
So, this code up here,
my unknown, it's an unknown,

70
00:05:13.768 --> 00:05:17.160
that means it's still a top type, right?

71
00:05:17.160 --> 00:05:21.903
And that's true above this first if
statement, and within the if statement.

72
00:05:21.903 --> 00:05:26.850
But the code block following it, you can
see we've said type of my unknown is

73
00:05:26.850 --> 00:05:29.806
equal to string, well, now it's a string.

74
00:05:29.806 --> 00:05:35.340
So this is the same narrowing behavior
that we see with other kinds of values.

75
00:05:35.340 --> 00:05:38.633
This is what you would
see with a union type,

76
00:05:38.633 --> 00:05:44.960
where you're trying to handle one
possibility and then another possibility.

77
00:05:44.960 --> 00:05:48.310
But this is how you use an unknown.

78
00:05:48.310 --> 00:05:53.098
You can almost think of it as like,
you could do the same thing with any, but

79
00:05:53.098 --> 00:05:57.658
the main thing is that it prevents you
from using the variable before you

80
00:05:57.658 --> 00:05:58.723
narrow it down.

81
00:05:58.723 --> 00:06:01.104
You can see we narrowed again,
here's the number, and

82
00:06:01.104 --> 00:06:02.583
then here we've got an else part.

83
00:06:02.583 --> 00:06:06.276
And we're back to my unknown, and
that's because like it could be so

84
00:06:06.276 --> 00:06:07.370
many other things.

85
00:06:08.650 --> 00:06:14.351
TypeScript has no way of representing
the set of all possible values,

86
00:06:14.351 --> 00:06:20.147
except strings, except numbers,
there's no way to represent that,

87
00:06:20.147 --> 00:06:23.760
at least in the publicly usable syntax.

88
00:06:23.760 --> 00:06:27.506
It may be possible to do it in
the internals of the system, but

89
00:06:27.506 --> 00:06:30.671
nothing that's part of
the language lets us do it.

