WEBVTT

1
00:00:00.348 --> 00:00:01.332
Hi, everyone.

2
00:00:01.332 --> 00:00:03.752
Welcome to Intermediate TypeScript v2.

3
00:00:03.752 --> 00:00:05.090
My name is Mike North.

4
00:00:05.090 --> 00:00:08.778
I've been a Frontend Masters
instructor for nine years now.

5
00:00:08.778 --> 00:00:11.785
I'm a principal staff engineer at Stripe,
and

6
00:00:11.785 --> 00:00:15.552
I'm the architect of their
developer platform division.

7
00:00:15.552 --> 00:00:20.524
So if you use Stripe's SDKs or
any of the dev tools we make available to

8
00:00:20.524 --> 00:00:24.323
our customers,
that's my team that works on that.

9
00:00:24.323 --> 00:00:30.008
We do a lot of TypeScript projects at
Stripe, and I'm happy to package some

10
00:00:30.008 --> 00:00:36.255
of that knowledge from using TypeScript at
scale and give it to you in this course.

11
00:00:36.255 --> 00:00:41.738
And also we use types internally to
discuss the way our public API works.

12
00:00:41.738 --> 00:00:45.655
TypeScript is great for
describing shapes of things and

13
00:00:45.655 --> 00:00:50.153
API semantics, and it's kind of
a great language to discuss and

14
00:00:50.153 --> 00:00:54.918
define types that you may not use
the TypeScript language for that.

15
00:00:54.918 --> 00:00:57.701
But it's a very concise representation for
that kind of thing.

16
00:00:57.701 --> 00:01:03.515
So, basically, I live and
breathe types as part of my job.

17
00:01:03.515 --> 00:01:08.319
Some goals for this course, so I hope to
take some of the knowledge I have from

18
00:01:08.319 --> 00:01:13.429
teaching over 100 TypeScript workshops and
spending thousands of hours pair

19
00:01:13.429 --> 00:01:19.089
programming with people and helping teams
reach successful outcomes with TypeScript.

20
00:01:19.089 --> 00:01:23.799
Have to package that up and
give that to you in this short course.

21
00:01:23.799 --> 00:01:27.680
And more important than just
covering language features and

22
00:01:27.680 --> 00:01:32.854
things that are possible with TypeScript
5, I hope we can together through this

23
00:01:32.854 --> 00:01:38.210
time build a mental model and a framework
for thinking about how TypeScript works.

24
00:01:38.210 --> 00:01:42.727
That way, when new features land
in TypeScript 6, and TypeScript 7,

25
00:01:42.727 --> 00:01:47.612
you kind of know how to think about it,
and it's easier to understand how all of

26
00:01:47.612 --> 00:01:51.480
these pieces fit together if
you have the right foundations.

27
00:01:51.480 --> 00:01:55.088
And I hope to help you form that today.

28
00:01:55.088 --> 00:02:00.001
We're gonna deal a lot with the utility
types that are built into TypeScript.

29
00:02:00.001 --> 00:02:04.469
So if you've ever seen something like
partial, or pick, or record, those kinds

30
00:02:04.469 --> 00:02:09.026
of things, by the end of this course, you
will understand exactly how those work.

31
00:02:09.026 --> 00:02:11.483
We're even gonna look at
how they're implemented so

32
00:02:11.483 --> 00:02:12.909
we can get some good practice.

33
00:02:12.909 --> 00:02:17.360
Taking something like a utility type and
picking it apart and

34
00:02:17.360 --> 00:02:21.644
understanding it in depth,
that's a very useful skill.

35
00:02:21.644 --> 00:02:26.161
This is probably a pretty
scary piece of code here.

36
00:02:26.161 --> 00:02:29.237
If you're not used to looking at this,
it's a little bit intimidating.

37
00:02:29.237 --> 00:02:32.032
There's a lot of syntax, there
are a lot of capital letters in there.

38
00:02:32.032 --> 00:02:33.792
By the end of this course,

39
00:02:33.792 --> 00:02:37.552
you'll understand everything
that's going on here.

40
00:02:37.552 --> 00:02:43.086
And we will have together, with hands-on
experience taken things like this,

41
00:02:43.086 --> 00:02:45.894
picked them apart into smaller pieces so

42
00:02:45.894 --> 00:02:49.628
that we can understand what's
going on step by step.

43
00:02:49.628 --> 00:02:52.662
And then we can put it
all back together and

44
00:02:52.662 --> 00:02:57.706
learn how to reason about the overall
behavior you're seeing here.

45
00:02:57.706 --> 00:03:01.710
So by the end of the course,
I hope you'll be able to look at this, and

46
00:03:01.710 --> 00:03:05.250
you may not be able to sort of see
the matrix or what it is here.

47
00:03:05.250 --> 00:03:10.219
But you'll be able to certainly take
pieces out and say, all right, here's

48
00:03:10.219 --> 00:03:15.816
the index access type, and here's the maps
type, and here's the conditional type.

49
00:03:15.816 --> 00:03:21.365
And okay, if I put these together,
here's what I get.

50
00:03:21.365 --> 00:03:23.979
So what do I assume you already know?

51
00:03:23.979 --> 00:03:27.498
Well, you should be pretty experienced,

52
00:03:27.498 --> 00:03:31.605
fairly experienced with modern JavaScript,
and

53
00:03:31.605 --> 00:03:37.678
that means you know how to use classes,
you know how to use async/await.

54
00:03:37.678 --> 00:03:39.692
We're not gonna do something
incredibly exotic.

55
00:03:39.692 --> 00:03:43.830
We're not gonna use proxies or
anything like that but any,

56
00:03:43.830 --> 00:03:47.824
any mainstream JavaScript,
I assume you already know.

57
00:03:47.824 --> 00:03:52.803
You should also have either taken
the TypeScript Fundamentals course or

58
00:03:52.803 --> 00:03:54.931
have equivalent experience.

59
00:03:54.931 --> 00:03:59.280
So we're gonna kind of pick up right from
where the TypeScript Fundamentals course

60
00:03:59.280 --> 00:03:59.845
left off.

61
00:03:59.845 --> 00:04:04.362
And that means you should have some
experience knowing how variables,

62
00:04:04.362 --> 00:04:07.757
objects, arrays have,
all those things are typed.

63
00:04:07.757 --> 00:04:12.760
And I also assume that you have
a little bit of experience at least

64
00:04:12.760 --> 00:04:17.499
doing the most basic level of generics and
type parameters.

65
00:04:17.499 --> 00:04:22.216
A lot of what we're gonna discuss
today builds upon that concept.

66
00:04:22.216 --> 00:04:28.461
And we're gonna start
digging into it from there.

67
00:04:28.461 --> 00:04:33.129
This course may be a little bit
challenging to understand if you're just

68
00:04:33.129 --> 00:04:35.436
getting started with TypeScript.

69
00:04:35.436 --> 00:04:40.458
So I would encourage you, if you start
taking this course and it feels like

70
00:04:40.458 --> 00:04:45.894
it's a little bit of a steep learning
curve, it's okay to sort of press pause.

71
00:04:45.894 --> 00:04:50.131
Maybe do a couple exercises,
a little bit of learning on your own,

72
00:04:50.131 --> 00:04:55.218
get more comfortable, and you should feel
fine coming back in trying it again.

73
00:04:55.218 --> 00:04:59.869
The idea here is to sort of take you
from being able to understand some basic

74
00:04:59.869 --> 00:05:04.014
TypeScript code, that's the goal
of the fundamentals course.

75
00:05:04.014 --> 00:05:06.564
And here we're trying to
take you to the point where

76
00:05:06.564 --> 00:05:09.472
you almost comprehensively
understand the language, or

77
00:05:09.472 --> 00:05:12.814
at least the various things that
are available to you in language.

78
00:05:12.814 --> 00:05:16.161
So the learning curve gets
a little bit steeper.

79
00:05:16.161 --> 00:05:18.938
Don't feel bad if you have to come and

80
00:05:18.938 --> 00:05:23.784
try again when you'll feel easier
the more experience you get.

81
00:05:23.784 --> 00:05:28.632
So let's talk a little bit about
setting up the workshop project.

82
00:05:28.632 --> 00:05:34.533
First, if you just learn best by kind of
watching somebody else go through examples

83
00:05:34.533 --> 00:05:40.014
and maybe taking notes, all you'll need
to access is the course website that

84
00:05:40.014 --> 00:05:45.782
you're reading right now, which you
can find at typescript-training.com.

85
00:05:45.782 --> 00:05:49.842
And you'll need to be able to access
the official TypeScript website.

86
00:05:49.842 --> 00:05:53.812
What you'll see is that a lot of the code
snippets that we use in the course,

87
00:05:53.812 --> 00:05:56.849
they will have a little button
in the lower right corner.

88
00:05:56.849 --> 00:05:58.315
I don't have a great example.

89
00:05:58.315 --> 00:05:59.001
Here it is.

90
00:05:59.001 --> 00:06:00.397
This Try button here,

91
00:06:00.397 --> 00:06:05.105
clicking this will actually take you
to the official TypeScript playground

92
00:06:05.105 --> 00:06:10.050
where that example that we were just
looking at is pre-populated for you here.

93
00:06:10.050 --> 00:06:12.671
And this is a live environment
you can mess around in here.

94
00:06:12.671 --> 00:06:14.685
You could introduce an error, and

95
00:06:14.685 --> 00:06:19.074
TypeScript will give you red squiggles
like it does in Visual Studio Code.

96
00:06:19.074 --> 00:06:21.335
So that's one way you
could take this course.

97
00:06:21.335 --> 00:06:25.475
You could even do that on an iPad or
something.

98
00:06:25.475 --> 00:06:32.145
If you learn best by doing real hands-on
coding in Visual Studio Code or

99
00:06:32.145 --> 00:06:37.494
an IDE of your choice,
you can check out the course repo.

100
00:06:37.494 --> 00:06:40.486
And first,
you're going to need to install Volta.

101
00:06:40.486 --> 00:06:43.743
So Volta is a JavaScript
tool chain manager.

102
00:06:43.743 --> 00:06:48.553
And the purpose of including Volta in
this project, it's to make sure we're

103
00:06:48.553 --> 00:06:53.441
all using the same version of Node, and
we're using the same version of Yarn.

104
00:06:53.441 --> 00:06:56.660
So the Node version that we're using for
this course and

105
00:06:56.660 --> 00:07:00.097
Volta will take care of this
behind the scenes if you use it.

106
00:07:00.097 --> 00:07:04.819
But if you were to set it up on your own,
you don't want to install Volta, you just

107
00:07:04.819 --> 00:07:09.689
need to make sure you're using Node 18,
which is the latest LTS release of Node.

108
00:07:09.689 --> 00:07:12.833
It's the one that they would advise
you use in production today, right?

109
00:07:12.833 --> 00:07:18.857
They always say use the latest LTS,
not the most modern version.

110
00:07:18.857 --> 00:07:23.198
For Yarn, we're using version 3.6.4.

111
00:07:23.198 --> 00:07:27.511
As of the time of recording,
there are some 4.0 release candidates.

112
00:07:27.511 --> 00:07:30.829
We're not playing with release candidates,
we're just using Yarn 3.

113
00:07:30.829 --> 00:07:33.479
It's important you don't use Yarn 1.

114
00:07:33.479 --> 00:07:39.394
We're going to touch on some things
that involve the modern version of Yarn,

115
00:07:39.394 --> 00:07:43.322
which is a totally separate
code base from Yarn 1.

116
00:07:43.322 --> 00:07:47.942
Okay, so once you've installed Volta, and
make sure you follow the installation

117
00:07:47.942 --> 00:07:52.764
instructions that you'll see both on the
website, it's very simple instructions.

118
00:07:52.764 --> 00:07:53.899
Sorry, I'll go back here.

119
00:07:53.899 --> 00:07:58.851
That's it, there you go,
that's the full set.

120
00:07:58.851 --> 00:08:03.631
Once you install that, make sure you also
pay attention to any instructions you may

121
00:08:03.631 --> 00:08:06.168
see in the CLI from
running those commands.

122
00:08:06.168 --> 00:08:11.073
Sometimes it will say we need you to
close your terminal and reopen a new one.

123
00:08:11.073 --> 00:08:16.745
That's because it's putting some
things in your .bashrc or your .zshrc.

124
00:08:16.745 --> 00:08:21.079
And you need to sort of like start a new
terminal session, so that's picked up and

125
00:08:21.079 --> 00:08:23.522
everything works the way it's supposed to.

126
00:08:23.522 --> 00:08:28.716
You can then run this command which
will install the node LTS and

127
00:08:28.716 --> 00:08:31.074
the latest Yarn 3 release.

128
00:08:31.074 --> 00:08:35.313
To be honest, we're probably not
very sensitive to node here,

129
00:08:35.313 --> 00:08:37.831
we're just using it to build things.

130
00:08:37.831 --> 00:08:40.590
Even if the LTS is different in
the future, it should still work.

131
00:08:40.590 --> 00:08:45.439
But in case you're having problems,
Node 18 is what we're using.

132
00:08:45.439 --> 00:08:48.488
So once you have all that done,
you can clone the GitHub repo.

133
00:08:48.488 --> 00:08:52.927
And if you've already taken
the fundamentals V4 course on

134
00:08:52.927 --> 00:08:56.134
Frontend Masters, this is the same repo.

135
00:08:56.134 --> 00:08:58.555
You have a head start,
you are already set up.

136
00:08:58.555 --> 00:09:01.397
It's just a different folder
in the exact same repo.

137
00:09:01.397 --> 00:09:06.220
But you'd clone this project,
you'd enter the directory for

138
00:09:06.220 --> 00:09:09.314
the project, and then you'd run Yarn.

139
00:09:09.314 --> 00:09:13.967
Once you've done all that, you can head
to this folder within the project, and

140
00:09:13.967 --> 00:09:17.384
that's where we will be doing
most of our hands-on work.

141
00:09:17.384 --> 00:09:19.860
When I'm showing you
my Visual Studio Code,

142
00:09:19.860 --> 00:09:22.214
that's where I'm going to be operating.

143
00:09:22.214 --> 00:09:25.265
And just to show you what that looks like,

144
00:09:25.265 --> 00:09:29.810
you can see here we have a bunch
of numbered files and folders.

145
00:09:29.810 --> 00:09:35.099
Those each correspond to a chapter of this
course addressing a particular topic,

146
00:09:35.099 --> 00:09:37.105
so this is what you should see.

147
00:09:37.105 --> 00:09:44.202
This is in packages, notes, intermediate
TypeScript V2, and then the source folder.

