WEBVTT

1
00:00:00.208 --> 00:00:04.807
All right, one more concept we have to
introduce before we talk about a couple

2
00:00:04.807 --> 00:00:08.363
more utility types here, and
they are mapping modifiers.

3
00:00:08.363 --> 00:00:12.703
So here's where I want you to
look right before the colon, so

4
00:00:12.703 --> 00:00:17.054
here we've got ?: here we've
got- question mark colon.

5
00:00:17.054 --> 00:00:20.913
Here we've got sorry, this one's
not in the same place, read only.

6
00:00:20.913 --> 00:00:25.818
So what this lets us do just if we think
about array.map, return, we're going

7
00:00:25.818 --> 00:00:30.376
through a for loop, we're defining
each key value pair, key type pair.

8
00:00:30.376 --> 00:00:36.690
Here we're saying okay, as we're defining
those key type pairs, make this read only,

9
00:00:36.690 --> 00:00:42.597
make this a reader, sorry, make this
optional, make this an optional property.

10
00:00:42.597 --> 00:00:49.637
So this is partial, this is a built-in
TypeScript utility type, where all we're

11
00:00:49.637 --> 00:00:55.081
doing here is going through every
single key in T, or in key of T.

12
00:00:55.081 --> 00:00:57.862
And we're saying, all right,

13
00:00:57.862 --> 00:01:02.703
now an optional field exists
on the resultant type, but

14
00:01:02.703 --> 00:01:08.993
it has the same value type, it just
could be missing if you want partial.

15
00:01:08.993 --> 00:01:12.493
A lot of you have probably
used partial before.

16
00:01:12.493 --> 00:01:16.753
Required does the opposite,
anything that was optional,

17
00:01:16.753 --> 00:01:21.790
the optionality is removed,
that's what minus question mark does.

18
00:01:21.790 --> 00:01:26.230
And then finally read
only adds read only's

19
00:01:26.230 --> 00:01:30.079
as it goes through each key type pair.

20
00:01:30.079 --> 00:01:35.769
Those are mapping modifiers those
are the only ones that exist today.

21
00:01:35.769 --> 00:01:39.087
There's one more type we could create

22
00:01:42.876 --> 00:01:49.351
You could technically do this,
this does not come with TypeScript.

23
00:01:49.351 --> 00:01:53.360
This would take a read only object and
make it not read only,

24
00:01:53.360 --> 00:01:55.691
this made me think of just for fun.

25
00:01:58.719 --> 00:02:02.629
Made me think of this, so
around the holidays in the United States,

26
00:02:02.629 --> 00:02:05.782
hardware stores have to put
a sign up like this that says

27
00:02:05.782 --> 00:02:08.410
we don't make mail to
mail extension cords.

28
00:02:08.410 --> 00:02:15.513
Because you'll set yourself on fire,
they will make your house below circuit,

29
00:02:15.513 --> 00:02:19.388
so in the spirit of that, don't make this.

30
00:02:19.388 --> 00:02:21.837
Read only this is there to help you and

31
00:02:21.837 --> 00:02:25.327
I think There's a good
reason this doesn't exist.

32
00:02:25.327 --> 00:02:29.525
This would sort of strip away
things that are helpfully there and

33
00:02:29.525 --> 00:02:33.343
valuable intent that some
developers left for you there.

34
00:02:39.541 --> 00:02:44.690
All right, this is a related topic,
this is actually much simpler than some

35
00:02:44.690 --> 00:02:50.090
of the stuff we've talked about, but
it fits really nicely with mapped types.

36
00:02:50.090 --> 00:02:54.947
Because using template literal types,
which effectively are the type version

37
00:02:54.947 --> 00:02:59.308
of string templates where you could say,
I have some hard coded thing.

38
00:02:59.308 --> 00:03:03.613
And then I have a string variable that I
wanna drop into the middle of the template

39
00:03:03.613 --> 00:03:05.356
string, these are types here.

40
00:03:05.356 --> 00:03:09.744
So what we can do, and it's like
identical syntax for the most part,

41
00:03:09.744 --> 00:03:13.463
we've got art features,
which is cabin tree and sunset.

42
00:03:13.463 --> 00:03:15.517
And then we've got colors, and

43
00:03:15.517 --> 00:03:20.247
we can use this syntax here it looks
just like a backtick template string.

44
00:03:20.247 --> 00:03:24.887
But remember, this is on
the right side of the equal sign

45
00:03:24.887 --> 00:03:27.668
when defining a type alias here.

46
00:03:27.668 --> 00:03:28.688
Look at what we get.

47
00:03:31.475 --> 00:03:34.616
Paint_darkSienna_cabin,
paint_darkSienna_tree,

48
00:03:34.616 --> 00:03:36.281
paint_darkSienna_sunset.

49
00:03:36.281 --> 00:03:41.950
We're kind of taking every combination
of these two union types and

50
00:03:41.950 --> 00:03:47.421
putting them together, and
just as it's the case with some other

51
00:03:47.421 --> 00:03:52.913
places where you put a union type
in this kind of a type parameter.

52
00:03:52.913 --> 00:03:58.260
You end up sort of one by one,
taking all combinations of those things,

53
00:03:58.260 --> 00:04:02.450
and then them unioning them
all together at the end, and

54
00:04:02.450 --> 00:04:05.595
that's the resultant type that you get.

55
00:04:05.595 --> 00:04:10.683
There are a couple little modifiers that
you can add to this I'm not gonna talk

56
00:04:10.683 --> 00:04:15.546
about them exhaustively, but
these are utility types like capitalize.

57
00:04:15.546 --> 00:04:19.025
There's also, I think,
lowercase or title case, but

58
00:04:19.025 --> 00:04:24.132
what this would let you do is, you can see
we don't have the underscores anymore,

59
00:04:24.132 --> 00:04:28.666
it'll take a lowercase string literal,
capitalize the first letter.

60
00:04:28.666 --> 00:04:33.426
Some of these are useful if you wanted
to make getters and setters for,

61
00:04:33.426 --> 00:04:35.860
a particular set of literal types.

62
00:04:45.178 --> 00:04:52.917
Agalas, I'm not sure he said can you
also use a regex in type equals?

63
00:04:52.917 --> 00:04:56.267
I think I understand what
you're getting at here.

64
00:04:56.267 --> 00:05:01.638
You cannot use a regular expression here,
it's almost like backtick

65
00:05:01.638 --> 00:05:07.385
strings where you can drop variables,
and it's the same syntax, right?

66
00:05:07.385 --> 00:05:12.117
Dollar sign and open brace, and
you put something here TypeScript

67
00:05:12.117 --> 00:05:16.513
doesn't understand or
can't expand regular expressions,

68
00:05:16.513 --> 00:05:20.161
that's why we have this extends keyword,
right?

69
00:05:20.161 --> 00:05:22.977
There's a lot of dynamic behavior
that you can kind of put, or

70
00:05:22.977 --> 00:05:26.011
a lot of complicated behavior you
can put in regular expressions,

71
00:05:26.011 --> 00:05:28.087
which would make the type
system super slow.

72
00:05:38.641 --> 00:05:46.964
Let's look at a little more, Of an example
of using template literal types.

73
00:06:00.073 --> 00:06:04.739
So here we have an interface,
we're calling it data state just

74
00:06:04.739 --> 00:06:09.683
imagine this is some properties
that you're holding somewhere.

75
00:06:09.683 --> 00:06:14.339
And you could build a type for
an SDK on top of that

76
00:06:14.339 --> 00:06:19.230
using a mapped type,
an indexed access type, and

77
00:06:19.230 --> 00:06:23.785
a template,
like a string literal type here.

78
00:06:23.785 --> 00:06:31.312
So let's take a look at it, so, first
of all, the mapped type is really this,

79
00:06:31.312 --> 00:06:37.260
it looks like an index signature
to this whole thing, right?

80
00:06:39.680 --> 00:06:44.461
So we have a property name k
which that's what's looping over,

81
00:06:44.461 --> 00:06:49.862
that's the key that's changing every
time we evaluate a new property,

82
00:06:49.862 --> 00:06:52.000
what are we iterating over?

83
00:06:52.000 --> 00:06:58.033
Key of data state, but
what we've done is we're

84
00:06:58.033 --> 00:07:03.928
saying key of data state as set,
capitalize K.

85
00:07:03.928 --> 00:07:09.700
And so it's almost like we're saying,
iterate over all the keys.

86
00:07:11.630 --> 00:07:17.387
And transform each key,
add the word set at the beginning of it,

87
00:07:17.387 --> 00:07:20.595
and then capitalize key k, right?

88
00:07:20.595 --> 00:07:24.796
Capitalize k, and then for the arg we're
using an indexed access type right,

89
00:07:24.796 --> 00:07:28.442
this is the indexed access type
right there in the square brackets.

90
00:07:28.442 --> 00:07:34.576
And what do we get, they'd SDK set digits,
set flags, that's coming from digits and

91
00:07:34.576 --> 00:07:38.708
flags, there's also a set
names here in all likelihood.

92
00:07:44.321 --> 00:07:47.929
There's copilot knows it's true,
set names,

93
00:07:47.929 --> 00:07:52.601
so you could take an object make
a bunch of getters and setters.

94
00:07:52.601 --> 00:07:56.961
Something like that, and
it can be done programmatically here,

95
00:07:56.961 --> 00:07:58.479
which is pretty nice.

96
00:07:58.479 --> 00:08:02.853
Data layers sometimes do this
where you'll have property,

97
00:08:02.853 --> 00:08:07.753
you'll have setters that are based
on a field that already exists.

98
00:08:10.632 --> 00:08:15.366
We can use infer In a conditional type to

99
00:08:15.366 --> 00:08:20.251
extract type params from string types.

100
00:08:20.251 --> 00:08:24.145
So check this out, I've got course
website is Frontend Masters,

101
00:08:24.145 --> 00:08:28.109
because it's a const declaration,
that is a string literal type,

102
00:08:28.109 --> 00:08:31.884
it's not just any string,
it's the string Frontend Masters.

103
00:08:31.884 --> 00:08:36.674
And we're gonna create a new type
here called ExtractMasterName,

104
00:08:36.674 --> 00:08:41.139
and we're gonna say, okay,
it's got this type parameter S.

105
00:08:41.139 --> 00:08:48.408
If S is a subtype of whatever this is,
let's look at what that is,

106
00:08:48.408 --> 00:08:54.091
It's a string that has
a space in the word masters,

107
00:08:54.091 --> 00:08:57.415
and we're using infer here.

108
00:08:57.415 --> 00:09:02.174
So we're gonna capture whatever is
before the space in a new type perm.

109
00:09:02.174 --> 00:09:06.626
We'll evaluate that to t, we'll spit
out the t if we're able to match

110
00:09:06.626 --> 00:09:10.928
the condition and extract,
otherwise will evaluate to never, and

111
00:09:10.928 --> 00:09:15.095
look at that we're able to get
front end out of front end masters.

112
00:09:15.095 --> 00:09:20.062
We've got little bit of string
manipulation happening in the type

113
00:09:20.062 --> 00:09:21.135
system here.

114
00:09:21.135 --> 00:09:26.919
You could take this one step further and
you could say,

115
00:09:26.919 --> 00:09:33.993
infer T extends Right?

116
00:09:33.993 --> 00:09:37.937
Extends a word beginning with F,
so this will continue to work, but

117
00:09:37.937 --> 00:09:43.213
as soon as I'm saying,
It's gotta start with a B,

118
00:09:43.213 --> 00:09:47.411
well now it's a never,
didn't begin with an F.

