WEBVTT

1
00:00:00.190 --> 00:00:08.005
I wanna revisit an exercise that we kind
of started in TypeScript Fundamentals v4.

2
00:00:08.005 --> 00:00:12.533
We discussed this when we were
talking about type queries and

3
00:00:12.533 --> 00:00:15.475
specifically an indexed access type.

4
00:00:15.475 --> 00:00:20.342
And we were attempting to build
the data layer that would allow

5
00:00:20.342 --> 00:00:25.208
us to kind of fetch a record and
state the name of the record that

6
00:00:25.208 --> 00:00:29.066
we're trying to fetch and
an ID for that record.

7
00:00:29.066 --> 00:00:33.116
And the hope was eventually you
could get a promise that would

8
00:00:33.116 --> 00:00:35.267
resolve to the right type here.

9
00:00:35.267 --> 00:00:40.041
But in TypeScript Fundamentals v4,
we didn't really have all the tools

10
00:00:40.041 --> 00:00:43.816
that we've now covered in order
to do all of those things.

11
00:00:43.816 --> 00:00:48.219
All we could really do was make
sure that the type param for

12
00:00:48.219 --> 00:00:52.347
the first argument, sorry,
not the type param, but

13
00:00:52.347 --> 00:00:58.460
the argument type for this first
argument was either book or magazine.

14
00:00:58.460 --> 00:01:01.678
And we accomplished that through,
and I'll scroll down here,

15
00:01:01.678 --> 00:01:04.370
we accomplished that through
declaration merging.

16
00:01:04.370 --> 00:01:09.280
And I have a copy of this locally, and
I'll switch to VS Code here in a second.

17
00:01:09.280 --> 00:01:11.690
But we did get some good
things out of that, right?

18
00:01:11.690 --> 00:01:16.602
We saw that we could create new TypeScript
files that would define a class

19
00:01:16.602 --> 00:01:19.460
representing a new record type.

20
00:01:19.460 --> 00:01:23.123
And we could kind of register those types,

21
00:01:23.123 --> 00:01:28.415
register book in the DataTypeRegistry,
and, sure enough,

22
00:01:28.415 --> 00:01:32.994
when we went back to call
this fetch record function,

23
00:01:32.994 --> 00:01:39.734
if we looked at this argument type,
here it is, we could see book or magazine.

24
00:01:39.734 --> 00:01:43.023
So it's an example of open interfaces,

25
00:01:43.023 --> 00:01:46.990
letting us inject something
into an interface,

26
00:01:46.990 --> 00:01:51.923
module declarations, like this,
allowing us to sort of add

27
00:01:51.923 --> 00:01:57.460
type information as if it was
defined in this other file.

28
00:01:57.460 --> 00:02:02.830
We also see evidence that there is one and
only one DataTypeRegistry type.

29
00:02:02.830 --> 00:02:07.160
So if we modify it, it's modified
everywhere that type is used,

30
00:02:07.160 --> 00:02:09.850
including in your node modules folder.

31
00:02:09.850 --> 00:02:14.923
Again, type checking is a holistic
operation that sort of operates

32
00:02:14.923 --> 00:02:19.729
on all of your code including its
dependencies at the same time,

33
00:02:19.729 --> 00:02:22.934
and there's only one DataTypeRegistry.

34
00:02:22.934 --> 00:02:30.199
So what I'd like us to do is pick
up where we left off effectively.

35
00:02:30.199 --> 00:02:32.653
So I'm just gonna walk
through the structure here,

36
00:02:32.653 --> 00:02:35.850
in case some of you did not attend
TypeScript Fundamentals before.

37
00:02:37.340 --> 00:02:39.840
Our project contains a data folder.

38
00:02:39.840 --> 00:02:44.320
The contents of each file in the data
folder, they represent a record type,

39
00:02:44.320 --> 00:02:48.030
something we could retrieve with
this fetch record function,

40
00:02:48.030 --> 00:02:50.260
which we hope to be able to use.

41
00:02:50.260 --> 00:02:54.170
This lib/registry file looks like this.

42
00:02:54.170 --> 00:03:00.580
We have an empty interface which record
files like book.ts and magazine.ts.

43
00:03:00.580 --> 00:03:05.007
They will register themselves
in the DataTypeRegistry.

44
00:03:05.007 --> 00:03:09.915
And then we have a fetchRecord function
which requires that the argument

45
00:03:09.915 --> 00:03:14.670
be an intersection type between string and
key of DataTypeRegistry.

46
00:03:17.818 --> 00:03:22.450
So here's what the record types look like.

47
00:03:23.820 --> 00:03:28.860
And then here is kind of as far as we got,
we were able to get

48
00:03:28.860 --> 00:03:33.803
DataTypeRegistry, it had the keys book and
magazine.

49
00:03:33.803 --> 00:03:38.971
Now, I want us to take
on a task of fleshing

50
00:03:38.971 --> 00:03:43.715
this example out a little more fully.

51
00:03:43.715 --> 00:03:50.600
I want us to make this nicer,
more ergonomic, do some more cool things.

52
00:03:51.690 --> 00:03:54.682
So we're gonna use a mapped
type to make fetch record

53
00:03:54.682 --> 00:03:58.480
return a promise that resolves
to the correct record type.

54
00:03:58.480 --> 00:04:03.386
Meaning, if we say fetchRecord("book"),

55
00:04:03.386 --> 00:04:08.330
we had better see a book type coming back.

56
00:04:08.330 --> 00:04:09.600
My book should be a book.

57
00:04:11.520 --> 00:04:14.887
If we call magazine,
if that's the first argument here,

58
00:04:14.887 --> 00:04:17.830
this had better be a magazine type.

59
00:04:17.830 --> 00:04:22.432
I'm also introducing a plural,
fetchRecords, and

60
00:04:22.432 --> 00:04:27.134
I'm providing a list of IDs here,
an array of IDs, and

61
00:04:27.134 --> 00:04:32.055
these should be arrays of books,
an array of magazines.

62
00:04:32.055 --> 00:04:37.570
So that's these two
requirements effectively.

63
00:04:37.570 --> 00:04:44.220
Here I am imposing a constraint
on the shape of the ID.

64
00:04:44.220 --> 00:04:47.742
Book IDs must begin with book_.

65
00:04:47.742 --> 00:04:54.778
Magazine IDs must begin with magazine_.

66
00:04:54.778 --> 00:05:00.082
So we have a starting point for
our code in our notes folder,

67
00:05:00.082 --> 00:05:02.900
sorry, this should be a dash.

68
00:05:02.900 --> 00:05:04.260
That's my typo here.

69
00:05:04.260 --> 00:05:11.370
Notes-intermediate-ts-v2-src/10-type-regi-
stry-revisited/index.ts.

70
00:05:11.370 --> 00:05:13.513
So I'm gonna go over to that file.

71
00:05:13.513 --> 00:05:18.293
If you're following along from home if
you wanna try this yourself, this is

72
00:05:18.293 --> 00:05:23.280
a big time to pause cuz we're gonna go
walk through the solution together.

73
00:05:23.280 --> 00:05:28.120
It's also worth noting, and I have this
in the website so people can spot it.

74
00:05:28.120 --> 00:05:31.717
Everything you need to do
is in lib/registry.ts,

75
00:05:31.717 --> 00:05:34.590
shouldn't have to touch any other file.

76
00:05:35.780 --> 00:05:41.129
But I'm gonna keep this other file open,
index.ts,

77
00:05:41.129 --> 00:05:46.256
cuz that's kind of like our
test suite a little bit.

78
00:05:46.256 --> 00:05:51.737
I'm gonna uncomment these, and
we're gonna start coding until it passes.

79
00:05:56.593 --> 00:06:01.368
So okay,
the first thing we're gonna wanna do

80
00:06:01.368 --> 00:06:06.149
is we're going to need
a type parameter here.

81
00:06:12.939 --> 00:06:16.760
Key, so I'll make this K for key.

82
00:06:16.760 --> 00:06:20.260
K extends keyof DataTypeRegistry.

83
00:06:21.290 --> 00:06:25.619
And we can say arg is now of type K.

84
00:06:27.500 --> 00:06:31.689
And we can look back and
see fetchRecord, okay, look,

85
00:06:31.689 --> 00:06:36.560
it's generic over the string literal type,
magazine.

86
00:06:36.560 --> 00:06:38.162
The arguments it takes in are fine.

87
00:06:38.162 --> 00:06:42.630
If I try to use a string
that is not present in

88
00:06:42.630 --> 00:06:48.466
the DataTypeRegistry just as
it should just as before,

89
00:06:48.466 --> 00:06:55.439
it won't accept invalid record names,
so that's looking good.

90
00:06:55.439 --> 00:07:01.385
Sorry, just to make it easier on folks,
can I do this?

91
00:07:01.385 --> 00:07:03.648
Yeah, we'll do that.

92
00:07:03.648 --> 00:07:08.270
Cuz code is wide and
this is probably easier to see.

93
00:07:08.270 --> 00:07:10.525
Okay, so okay, that's great.

94
00:07:10.525 --> 00:07:15.455
And I'm gonna actually kinda copy
that down cuz I suspect we'll want

95
00:07:15.455 --> 00:07:17.920
the same thing for the array case.

96
00:07:20.050 --> 00:07:23.096
Great, what are we going to return?

97
00:07:23.096 --> 00:07:27.073
Well, we know we can use
an indexed access type here.

98
00:07:29.778 --> 00:07:33.205
DataTypeRegistry[K].

99
00:07:33.205 --> 00:07:34.260
What's the problem here?

100
00:07:36.050 --> 00:07:36.960
We're not returning.

101
00:07:36.960 --> 00:07:37.561
That's fine.

102
00:07:40.636 --> 00:07:43.020
We'll do that just to suppress that error.

103
00:07:43.020 --> 00:07:45.460
We're not actually running this code.

104
00:07:45.460 --> 00:07:47.870
Just have to return something.

105
00:07:47.870 --> 00:07:50.660
We'll make sure we return
something at the bottom too.

106
00:07:51.690 --> 00:07:53.881
We're just solving for the types here.

107
00:07:53.881 --> 00:08:02.918
So here we're returning
DataTypeRegistry[K], array.

108
00:08:02.918 --> 00:08:04.220
So let's look back here.

109
00:08:05.320 --> 00:08:06.770
Look at that.

110
00:08:06.770 --> 00:08:10.987
We fetch a record of type book,
we get a book.

111
00:08:10.987 --> 00:08:16.680
We fetch a record of type magazine,
we get a magazine.

112
00:08:16.680 --> 00:08:18.604
Here we get an array of books.

113
00:08:19.785 --> 00:08:22.425
An array of magazines, pretty cool, right?

114
00:08:22.425 --> 00:08:25.074
You could imagine writing a library or

115
00:08:25.074 --> 00:08:28.981
something that has no knowledge
of a book or a magazine.

116
00:08:28.981 --> 00:08:32.704
One user of this library could
be writing code for a library,

117
00:08:32.704 --> 00:08:37.230
another could be writing code for
a pharmacy, and they could have totally

118
00:08:37.230 --> 00:08:42.430
different kinds of records, but
they're able to register them centrally.

119
00:08:42.430 --> 00:08:45.611
All of the code dealing with
specificity of the records,

120
00:08:45.611 --> 00:08:47.146
that could live in the app.

121
00:08:47.146 --> 00:08:51.783
And then this record fetching system
is implemented in a very reusable and

122
00:08:51.783 --> 00:08:55.521
generic way, where it's typed
in a reusable generic way,

123
00:08:55.521 --> 00:08:58.896
its not implemented at all, but still.

124
00:08:58.896 --> 00:09:05.193
All right, we're still not erroring

125
00:09:05.193 --> 00:09:10.709
in places where we should error.

126
00:09:10.709 --> 00:09:14.525
And that's because,
I think in all of these cases,

127
00:09:14.525 --> 00:09:19.080
they deal with IDs that
don't match the convention.

128
00:09:19.080 --> 00:09:23.909
I asked us to match where book
IDs should start with book_.

129
00:09:23.909 --> 00:09:27.180
Magazine IDs should start with magazine_.

130
00:09:27.180 --> 00:09:31.118
So let's go ahead and
work with these ID types.

131
00:09:31.118 --> 00:09:40.369
So here, what we can do is say, K string.

132
00:09:44.897 --> 00:09:50.420
Here we can say, an array of K_strings.

133
00:09:50.420 --> 00:09:55.416
K, in this case, is gonna be book or
magazine, and then an underscore, and

134
00:09:55.416 --> 00:10:00.117
then we'll take any string,
any completion of the string after that.

135
00:10:04.085 --> 00:10:09.014
So if you wanna look at the diffs here,
now that everything is passing in this top

136
00:10:09.014 --> 00:10:16.356
file, I'm just gonna close it,
And I'll show you the diff.

137
00:10:18.863 --> 00:10:22.530
Actually, this is probably better.

138
00:10:22.530 --> 00:10:24.596
&gt;&gt; Someone just said, wow, that's nice.

139
00:10:24.596 --> 00:10:27.024
&gt;&gt; [LAUGH]
&gt;&gt; Nice.

140
00:10:27.024 --> 00:10:32.724
&gt;&gt; Nice, so
this was our starting point in red.

141
00:10:32.724 --> 00:10:34.600
And you see we had no type parameter.

142
00:10:34.600 --> 00:10:40.013
We still had a constraint that ensured
only things in the DataTypeRegistry,

143
00:10:40.013 --> 00:10:42.188
only key names were passed in.

144
00:10:42.188 --> 00:10:47.800
But we've extracted that out, used a type
parameter with the constraint, right?

145
00:10:47.800 --> 00:10:52.170
It must be in keyof DataTypeRegistry.

146
00:10:52.170 --> 00:10:54.630
Here we're using a string literal type.

147
00:10:54.630 --> 00:10:59.646
And we're saying, for this key name,
which we're gonna be able to

148
00:10:59.646 --> 00:11:05.206
infer based on that first argument,
the ID must also start with that word.

149
00:11:10.101 --> 00:11:14.421
And then here we have
this indexed access type,

150
00:11:14.421 --> 00:11:18.310
which says, give me the value of the type.

151
00:11:21.342 --> 00:11:26.010
That DataTypeRegistry with key K has,
right?

152
00:11:26.010 --> 00:11:27.910
The string book should go to book.

153
00:11:29.130 --> 00:11:30.690
There you go.

154
00:11:30.690 --> 00:11:32.861
This is starting to become
a nice little data layer.

155
00:11:37.118 --> 00:11:41.094
Yeah, LJ says this is more clear than what
we had in the fundamentals course, for

156
00:11:41.094 --> 00:11:42.560
some reason.

157
00:11:42.560 --> 00:11:46.409
Some candidate reasons are, we have
covered a lot of material since then,

158
00:11:46.409 --> 00:11:48.590
so I'm glad it's more clear.

159
00:11:48.590 --> 00:11:51.175
Also, this probably makes more sense,

160
00:11:51.175 --> 00:11:55.289
now that we've seen how valuable
this can be, maybe it clicks.

161
00:11:57.059 --> 00:11:59.930
All right,
we've now finished the DataTypeRegistry.

162
00:11:59.930 --> 00:12:03.150
We met all of the requirements.

163
00:12:03.150 --> 00:12:06.530
It's a much cooler thing
that we can use now.

164
00:12:06.530 --> 00:12:12.705
And there are some sort of client-side
ORMs that behave in this way,

165
00:12:12.705 --> 00:12:17.601
but one of the key benefits is
if we wanted to add like a,

166
00:12:17.601 --> 00:12:20.916
let's copy and paste, audiobook.

167
00:12:23.773 --> 00:12:25.452
And here's audiobook.

168
00:12:29.473 --> 00:12:32.478
Make this lowercase just to
stick with our convention and

169
00:12:32.478 --> 00:12:37.760
we'll call this, DurationInMinutes.

170
00:12:39.090 --> 00:12:41.509
Now we've just created this class.

171
00:12:43.210 --> 00:12:46.217
Now we can do this.

172
00:12:51.621 --> 00:12:54.670
Look at that, audiobook pops out.

173
00:12:54.670 --> 00:12:56.321
Whoa, this is interesting.

174
00:12:56.321 --> 00:12:57.710
Why is it allowing us to do that?

175
00:12:58.790 --> 00:13:05.119
FetchRecord, Magazine,

176
00:13:05.119 --> 00:13:08.120
it's inferred that it could be magazine or
audiobook.

177
00:13:08.120 --> 00:13:09.810
It's sort of double inferring here.

178
00:13:11.050 --> 00:13:12.890
That's curious.

179
00:13:14.220 --> 00:13:15.970
Not type checking.

180
00:13:15.970 --> 00:13:19.910
So it's a valid ID, this would be caught
cuz it doesn't match any conventions.

181
00:13:19.910 --> 00:13:25.044
We'll leave that as an exercise for
the next course, maybe.

182
00:13:25.044 --> 00:13:29.720
We can do that, and we get audiobook back.

183
00:13:29.720 --> 00:13:33.108
So you could just add more and
more and more record types, and

184
00:13:33.108 --> 00:13:37.562
that reusable fetchRecord piece of code,
it's just going to keep adapting and

185
00:13:37.562 --> 00:13:39.400
adapting and adapting.

186
00:13:39.400 --> 00:13:44.274
And we get really nice
typed promises coming back.

