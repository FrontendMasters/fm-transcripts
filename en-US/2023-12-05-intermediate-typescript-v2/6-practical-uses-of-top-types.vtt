WEBVTT

1
00:00:00.360 --> 00:00:03.292
All right,
let's talk about using top types.

2
00:00:03.292 --> 00:00:06.520
What are some practical uses of top types?

3
00:00:06.520 --> 00:00:11.536
The first example I'm gonna
show you is handling errors.

4
00:00:11.536 --> 00:00:15.890
So here we've got a function
called doSomethingRisky.

5
00:00:15.890 --> 00:00:21.656
It flips a coin and if it's heads,
it returns the string ok.

6
00:00:21.656 --> 00:00:25.114
And then it flips another coin and
it says,

7
00:00:25.114 --> 00:00:29.910
all right, if that one's heads,
we throw an error.

8
00:00:29.910 --> 00:00:32.837
And then finally we say, all right,

9
00:00:32.837 --> 00:00:37.096
we're gonna throw a string at the end,
which is bad.

10
00:00:37.096 --> 00:00:38.320
Don't throw strings.

11
00:00:39.540 --> 00:00:44.015
How many people in here throw strings?

12
00:00:44.015 --> 00:00:48.590
My guy, you shouldn't do this.

13
00:00:48.590 --> 00:00:51.503
And I've told you this, so
you're not gonna do it now.

14
00:00:51.503 --> 00:00:56.347
But how much do you trust everything
inside your node modules folder?

15
00:00:56.347 --> 00:00:59.920
How much do you trust every piece
of code that's part of your app?

16
00:00:59.920 --> 00:01:05.316
That it's throwing a proper throwable,
a proper error.

17
00:01:05.316 --> 00:01:10.460
It's almost certain something in there is
throwing a string or throwing an object.

18
00:01:10.460 --> 00:01:12.026
It's not an error.

19
00:01:12.026 --> 00:01:17.650
So, what we're doing here, and this is
one place where unknown can be used.

20
00:01:17.650 --> 00:01:20.879
We're saying we're gonna have a try catch,
but

21
00:01:20.879 --> 00:01:24.992
we're gonna type this error in
the catch block as an unknown.

22
00:01:24.992 --> 00:01:29.812
And effectively what we're doing here is
we're saying, TypeScript, keep me honest.

23
00:01:29.812 --> 00:01:34.760
I am not allowed to assume that this
is an error before checking it.

24
00:01:35.810 --> 00:01:37.882
If we didn't do this,

25
00:01:37.882 --> 00:01:43.675
I forgot what my compiler setting
currently is but let's see.

26
00:01:43.675 --> 00:01:45.550
If we didn't do this, it would be in any.

27
00:01:45.550 --> 00:01:49.589
It would be super easy to reach
into this e, and do like,

28
00:01:53.104 --> 00:01:56.520
Could do e.stack,
we could do e.name or e.message.

29
00:01:56.520 --> 00:01:59.510
You could treat this,
you could be thinking in your mind like,

30
00:01:59.510 --> 00:02:01.936
this is probably an error,
I will treat it as an error.

31
00:02:01.936 --> 00:02:06.903
So it's useful to say anything I catch,
I wanna type as unknown.

32
00:02:06.903 --> 00:02:13.992
And in fact, there is a compiler setting,
and I'm just real quick,

33
00:02:13.992 --> 00:02:19.020
gonna go to the TS config for
this notes package.

34
00:02:19.020 --> 00:02:24.642
So this is in packages notes intermediate,
ts-v2 and the tsconfig there, and

35
00:02:24.642 --> 00:02:33.720
we can say, UseUnknownInCatchVariables,
we'll set that to true.

36
00:02:33.720 --> 00:02:36.688
What this lets us do is we don't
even have to say this anymore.

37
00:02:38.950 --> 00:02:41.158
E will always be an unknown.

38
00:02:41.158 --> 00:02:45.390
I love enabling this flag, it's great.

39
00:02:45.390 --> 00:02:51.609
This gives you some assurance and
some encouragement

40
00:02:51.609 --> 00:02:57.975
to handle throwables robustly,
which is important.

41
00:02:57.975 --> 00:03:03.910
If you've ever seen a log file
with object in it or something.

42
00:03:03.910 --> 00:03:08.552
Console dot logs object, you'll
understand how this could be valuable and

43
00:03:08.552 --> 00:03:12.989
how you could handle errors in a special
way and strings in a special way.

44
00:03:12.989 --> 00:03:14.501
However you need to do this.

45
00:03:14.501 --> 00:03:17.612
You could probably even write a reusable
function in here that would be,

46
00:03:17.612 --> 00:03:18.632
like serialize error or

47
00:03:18.632 --> 00:03:22.409
something like that, that could handle all
of those different possibilities for you.

48
00:03:23.540 --> 00:03:28.440
So protip, turn this on and
then you don't have to worry about like

49
00:03:28.440 --> 00:03:33.269
did we remember to put colon unknown
in every single cache block.

50
00:03:33.269 --> 00:03:37.780
It's just like the base assumption
TypeScript will make is to do this, so

51
00:03:37.780 --> 00:03:39.686
that is a great use of unknown.

52
00:03:43.475 --> 00:03:45.700
Sorry, there's another good use for
unknown.

53
00:03:45.700 --> 00:03:49.396
I'll just talk about it cuz
they don't have it here, but

54
00:03:49.396 --> 00:03:53.554
we'll look at it a little bit later
in a later chapter when we have

55
00:03:53.554 --> 00:03:57.265
an example that involves it,
receiving API responses.

56
00:03:57.265 --> 00:04:02.731
So sometimes we have control over
the API and then the API client.

57
00:04:02.731 --> 00:04:06.070
Let's say we're building
a browser-based app with Typescript.

58
00:04:06.070 --> 00:04:11.095
Sometimes we know what the API response
is gonna be or it's like guaranteed to be

59
00:04:11.095 --> 00:04:16.132
a set of a couple things and we could hard
code some assumptions about the types.

60
00:04:16.132 --> 00:04:19.499
You'd say, here's what
a successful API shape looks like,

61
00:04:19.499 --> 00:04:23.202
here's what an error looks like,
could be one of these two things.

62
00:04:23.202 --> 00:04:26.833
But if you're talking to
APIs that you don't control,

63
00:04:26.833 --> 00:04:30.700
in particular where they could
change underneath you, and

64
00:04:30.700 --> 00:04:35.744
you don't have control over the timing
of that change, or whatever that is.

65
00:04:35.744 --> 00:04:40.400
Some people like to say,
okay, I want to treat this as

66
00:04:40.400 --> 00:04:44.958
an unknown when my fetch
returns its JSON response.

67
00:04:44.958 --> 00:04:49.656
And then I'm going to apply some
typeguards to make sure that this is what

68
00:04:49.656 --> 00:04:51.070
I expect it to be.

69
00:04:51.070 --> 00:04:55.013
And the end result there,
there are pros and cons, but

70
00:04:55.013 --> 00:05:00.328
the cons are you're paying a cost at
runtime to apply these typeguards and

71
00:05:00.328 --> 00:05:04.634
to validate that this thing is
what you hope it's gonna be.

72
00:05:04.634 --> 00:05:10.530
But what you get there is you get a much
more actionable error when it's thrown.

73
00:05:10.530 --> 00:05:14.290
It's not gonna be sort of the API response
flows through, maybe it goes into a bunch

74
00:05:14.290 --> 00:05:17.581
of React components, and you're like,
why is this property not here?

75
00:05:17.581 --> 00:05:20.488
It should be here and
you trace it back and ultimately like,

76
00:05:20.488 --> 00:05:22.490
the API changed underneath me.

77
00:05:22.490 --> 00:05:28.150
Instead, you'll sort of be validating
that API response as it enters your app,

78
00:05:28.150 --> 00:05:32.145
and you could see, all right,
expected shape was this,

79
00:05:32.145 --> 00:05:35.496
and it came in, and
it was not that shape throw.

80
00:05:35.496 --> 00:05:39.080
So that's another good use of unknown.

81
00:05:39.080 --> 00:05:43.805
Also, one more use, if you're passing a
value through a piece of code that doesn't

82
00:05:43.805 --> 00:05:45.083
need to know about it.

83
00:05:45.083 --> 00:05:47.907
Sometimes you can treat it as an unknown,
and

84
00:05:47.907 --> 00:05:52.442
then say you have a library that takes
something a consumer of the library

85
00:05:52.442 --> 00:05:57.030
provides you, and you just wanna
hand it back to them unaltered.

86
00:05:57.030 --> 00:06:00.447
Unknown would prevent you from
sort of touching that object, or

87
00:06:00.447 --> 00:06:04.260
becoming entangled with any specific
shape that that object could be.

88
00:06:04.260 --> 00:06:08.634
It's just like some value that's like
piggybacking in your library and

89
00:06:08.634 --> 00:06:12.610
eventually goes back to the person
that provided it with you.

90
00:06:12.610 --> 00:06:16.121
So we would describe this
as like an opaque value.

91
00:06:16.121 --> 00:06:18.720
Sometimes there's a good reason for that.

92
00:06:18.720 --> 00:06:23.030
Sometimes you wanna make sure that in
your code you're treating it as opaque.

93
00:06:23.030 --> 00:06:26.768
That's sort of establishing a guarantee
that you're not going to be

94
00:06:26.768 --> 00:06:29.797
making any assumptions about this thing,
you can't,

95
00:06:29.797 --> 00:06:32.384
not unless you start
applying type parts to it.

96
00:06:32.384 --> 00:06:36.500
And even if you do that, those
assumptions are validated in your code.

97
00:06:36.500 --> 00:06:40.128
You only treat it as a string
if it's actually a string.

98
00:06:43.301 --> 00:06:46.642
Let's see, Marjon asks,

99
00:06:46.642 --> 00:06:50.920
should we to reuse typecasting then or
setting up some typeguards?

100
00:06:52.120 --> 00:06:58.244
If I control both my API and
my API client, I would probably cast.

101
00:06:58.244 --> 00:07:01.957
I mean, if you wanna look at the my
full stack TypeScript course on

102
00:07:01.957 --> 00:07:06.144
Frontend Masters, that's an example
of where we use a single set of types

103
00:07:06.144 --> 00:07:09.260
that are shared both in the backend and
the frontend.

104
00:07:09.260 --> 00:07:10.822
And there, it's very clear.

105
00:07:10.822 --> 00:07:15.420
Technically, we're casting, but
we have this very strong relationship.

106
00:07:15.420 --> 00:07:21.276
It's literally a server and
a client folder in the same git repo.

107
00:07:21.276 --> 00:07:25.170
Everything is in sync with
every single git commit.

108
00:07:25.170 --> 00:07:30.788
In that situation, I'd say definitely
cast, if you still control a backend and

109
00:07:30.788 --> 00:07:35.179
the frontend, but
they're not sharing a single set of types.

110
00:07:35.179 --> 00:07:39.271
I might cast there as well, because often,
there's a coordinated release,

111
00:07:39.271 --> 00:07:42.185
where you make sure that get
the API out there first, and

112
00:07:42.185 --> 00:07:44.179
it's always backwards compatible.

113
00:07:44.179 --> 00:07:48.000
And then we roll out the UI,
which depends on the new API.

114
00:07:48.000 --> 00:07:50.864
It's sort of a release
management problem there.

115
00:07:50.864 --> 00:07:57.539
Where I would definitely use typeguards
is if you're talking to another API,

116
00:07:57.539 --> 00:08:03.211
maybe one that is not a SAS product,
it would be an API that sort of,

117
00:08:06.450 --> 00:08:12.160
Maybe it's very few people use it and
there's a high rate of change,

118
00:08:12.160 --> 00:08:17.279
or you don't have any way of
knowing when something changes,

119
00:08:17.279 --> 00:08:21.730
that's where I would say
you should use typeguards.

120
00:08:21.730 --> 00:08:25.215
If you were scraping an HTML page,
for example,

121
00:08:25.215 --> 00:08:29.982
and you represent that as JSON,
HTML is gonna change all the time.

122
00:08:29.982 --> 00:08:31.990
People don't think of that as an API.

123
00:08:31.990 --> 00:08:34.297
So that's where I would
say use typeguards.

124
00:08:34.297 --> 00:08:39.100
That will change, and it will bust your
app in terrifying and mysterious ways.

125
00:08:39.100 --> 00:08:41.793
It's better to have it fail
in a very clear way, and

126
00:08:41.793 --> 00:08:43.682
then you know exactly how to fix it.

127
00:08:43.682 --> 00:08:45.590
You can get that out fast and move on.

