WEBVTT

1
00:00:00.180 --> 00:00:02.690
Let's talk about native ES modules.

2
00:00:04.420 --> 00:00:09.749
So, TypeScript supports native ES
modules and what we're gonna do here,

3
00:00:09.749 --> 00:00:15.370
I'm gonna just make this narrower cuz
we're gonna need some stuff there.

4
00:00:15.370 --> 00:00:21.902
So Let's pretend we want

5
00:00:21.902 --> 00:00:27.368
all files in this project to
be treated as ES modules.

6
00:00:27.368 --> 00:00:32.692
And before we go into exactly how that
would work, I wanna point out that

7
00:00:32.692 --> 00:00:38.401
there are new file extensions that
are part of the way node handles modules.

8
00:00:38.401 --> 00:00:40.633
I think this is standardized,
and if it's not,

9
00:00:40.633 --> 00:00:42.489
it's on its way to being standardized.

10
00:00:43.960 --> 00:00:46.919
You can have,
I actually have a web page for this,

11
00:00:46.919 --> 00:00:49.117
which is easier to look at than code.

12
00:00:51.534 --> 00:00:58.878
Right here, okay, so,

13
00:01:02.232 --> 00:01:10.635
We have different kinds of file
extensions we can use, .njs, .cjs.

14
00:01:10.635 --> 00:01:12.400
Has anyone ever used a .tsx file?

15
00:01:13.810 --> 00:01:15.290
TypeScript JSX file?

16
00:01:15.290 --> 00:01:19.740
Yep, so same convention applies here,
swap the j for a t.

17
00:01:19.740 --> 00:01:24.150
You can have an empty s file or a TS file.

18
00:01:24.150 --> 00:01:27.620
And these files are unambiguous.

19
00:01:27.620 --> 00:01:31.384
An .mjs or a .mts file,

20
00:01:31.384 --> 00:01:37.560
that is a native ES module for sure.

21
00:01:37.560 --> 00:01:42.054
It's an ES module,
should be treated as such.

22
00:01:42.054 --> 00:01:46.675
Files with the .cjs or .cts extension,

23
00:01:46.675 --> 00:01:51.307
unambiguously, are CommonJS modules.

24
00:01:51.307 --> 00:01:54.481
And you can actually mix these
together in a project and

25
00:01:54.481 --> 00:01:57.250
TypeScript knows how to handle both.

26
00:01:57.250 --> 00:02:00.650
They'll all sort of be compiled together
and you'll get a consistent result.

27
00:02:00.650 --> 00:02:03.488
So if you have some CommonJS
code in your project,

28
00:02:03.488 --> 00:02:06.980
you could just rename the files and
it's unambiguous.

29
00:02:06.980 --> 00:02:11.260
Now, what happens with the .js files?

30
00:02:11.260 --> 00:02:13.246
Well, you have a couple options, right?

31
00:02:13.246 --> 00:02:14.740
You have two options.

32
00:02:14.740 --> 00:02:21.010
You could start with the default, which
is they're not assumed to be ES modules.

33
00:02:21.010 --> 00:02:24.903
And by the way,
when I talk about native ES modules,

34
00:02:24.903 --> 00:02:27.824
it's not just about this syntax here,

35
00:02:27.824 --> 00:02:33.418
there are features like top-level await,
which you kinda need to exist.

36
00:02:34.622 --> 00:02:40.980
It can't be polyfilled very easily and
compiled down to some CJS equivalent.

37
00:02:40.980 --> 00:02:44.859
So there are some features of native ES
modules that are not just about imports

38
00:02:44.859 --> 00:02:47.554
and exports, but
what you're allowed to do in them.

39
00:02:47.554 --> 00:02:51.410
And this is relatively unusual stuff.

40
00:02:51.410 --> 00:02:53.840
I mean, it's new stuff.

41
00:02:53.840 --> 00:02:59.162
But there are reasons why you might
want to say, all right, this is not just

42
00:02:59.162 --> 00:03:05.220
using import and export modern syntax, but
treat this as the standardized module.

43
00:03:05.220 --> 00:03:07.222
Now I can have top-level awaits.

44
00:03:07.222 --> 00:03:10.772
I don't need to have a main async
function that I then invoke,

45
00:03:10.772 --> 00:03:14.205
I can have top-level awaits and
top-level module scope.

46
00:03:14.205 --> 00:03:17.531
So these are the unambiguous
file extensions, and

47
00:03:17.531 --> 00:03:22.032
then we can make decisions about how
we want .js files to be treated.

48
00:03:22.032 --> 00:03:27.285
And there is a top-level type
field in your package.json,

49
00:03:27.285 --> 00:03:34.020
which you can use to state what should
be assumed about the .js files.

50
00:03:34.020 --> 00:03:39.621
If you use module, that means .js files
should be assumed to be ES modules,

51
00:03:39.621 --> 00:03:42.550
they should be run as ES modules.

52
00:03:42.550 --> 00:03:48.680
If you have CommonJS that means that they
should be treated as CommonJS modules.

53
00:03:48.680 --> 00:03:49.960
So you have those options.

54
00:03:51.480 --> 00:03:53.940
So, let's make a little
change in our project.

55
00:03:56.280 --> 00:04:00.756
We can take Banana and make it a CJS.

56
00:04:04.548 --> 00:04:09.896
I'm not gonna update imports because I
want you to see me updating imports.

57
00:04:09.896 --> 00:04:13.089
Wow, I hit Never,
that's a setting that's gonna haunt me,

58
00:04:13.089 --> 00:04:15.660
I'll figure out where that is and undo it.

59
00:04:15.660 --> 00:04:20.790
Okay, so now we've got bananaNamespace.

60
00:04:20.790 --> 00:04:24.220
Let's call it bananaNamespace2.

61
00:04:24.220 --> 00:04:27.420
We can import it from banana.cjs.

62
00:04:27.420 --> 00:04:30.410
Let's look at our existing banana import.

63
00:04:30.410 --> 00:04:32.020
Look, that has failed.

64
00:04:33.130 --> 00:04:38.063
So when we're importing a CJS file,
we need to add an extension,

65
00:04:38.063 --> 00:04:40.590
and it'll work perfectly fine.

66
00:04:40.590 --> 00:04:41.935
This is gonna have.

67
00:04:44.815 --> 00:04:48.190
Our Banana class, it's all there.

68
00:04:48.190 --> 00:04:53.860
But this is a good thing to know about,
especially if you're writing Node.js code.

69
00:04:53.860 --> 00:04:58.603
That's the more likely place
where you may see a lot of

70
00:04:58.603 --> 00:05:03.137
existing CJS stuff because
it has technically been

71
00:05:03.137 --> 00:05:08.001
possible to have Node run
modern JavaScript modules.

72
00:05:08.001 --> 00:05:12.587
But until somewhat recent releases,

73
00:05:12.587 --> 00:05:19.903
I think I had Node 13 written
down as the transition point.

74
00:05:19.903 --> 00:05:24.911
You had to operate Node in --harmony
mode and you had to sort of opt

75
00:05:24.911 --> 00:05:30.736
into a bunch of experimental behavior to
get it to work now it works natively.

76
00:05:30.736 --> 00:05:35.540
And so you you might come across places
where you have to mix these things.

77
00:05:35.540 --> 00:05:38.504
And this is a great thing
to help keep this straight.

78
00:05:38.504 --> 00:05:42.818
And of course, it's also great to be able
to apply lint rules that are a little bit

79
00:05:42.818 --> 00:05:45.800
different for
CJS stuff versus native ES module stuff,

80
00:05:45.800 --> 00:05:48.796
you might have different
roles that you wanna enforce.

81
00:05:48.796 --> 00:05:51.738
And a different file extension
makes that super, super easy.

82
00:05:55.518 --> 00:05:57.460
Rohit had a great question here.

83
00:05:57.460 --> 00:05:59.710
What does top-level await mean?

84
00:05:59.710 --> 00:06:00.580
It means this.

85
00:06:15.640 --> 00:06:19.805
I can't do this, cuz I'm not operating in

86
00:06:19.805 --> 00:06:24.820
a sufficiently modern
module version right?

87
00:06:24.820 --> 00:06:27.415
What it's saying is.

88
00:06:30.401 --> 00:06:35.110
First of all, the target option needs to
be set to a particularly modern version of

89
00:06:35.110 --> 00:06:36.762
JavaScript, ES2017.

90
00:06:36.762 --> 00:06:41.157
I happen to know it's yelling at me,
or that error message is here.

91
00:06:41.157 --> 00:06:46.330
It's not really an error in this piece of
code, but it's part of this error message.

92
00:06:46.330 --> 00:06:49.881
Await in general is necessary,

93
00:06:49.881 --> 00:06:53.962
or it landed in ES2017, right?

94
00:06:53.962 --> 00:06:58.603
And then here, it's saying Top-level
'await' expressions are only allowed when

95
00:06:58.603 --> 00:07:01.318
the 'module' option is set to 'es2022'.

96
00:07:01.318 --> 00:07:06.846
That means I'm spitting out ES2022 modules

97
00:07:06.846 --> 00:07:11.981
instead of CJS modules I'm emitting those.

98
00:07:11.981 --> 00:07:16.557
And a corollary of this, or
a reason behind this is,

99
00:07:16.557 --> 00:07:22.490
it's just not possible to port this
over to CJS in a reasonable way.

100
00:07:24.020 --> 00:07:26.434
The workaround of course is

101
00:07:30.275 --> 00:07:36.269
I'm sure, oops, I need async function.

102
00:07:36.269 --> 00:07:42.786
You could always do this,
Something like that, or you could

103
00:07:42.786 --> 00:07:47.458
even have an async immediately invoke
function expression, something like this.

104
00:07:51.350 --> 00:07:56.815
But it's not really the same.

105
00:07:56.815 --> 00:08:01.576
This will also work, but
again, in both of these cases,

106
00:08:01.576 --> 00:08:05.970
we're absolutely not
having a top-level await.

107
00:08:05.970 --> 00:08:08.918
Whether we have a named
function we're invoking,

108
00:08:08.918 --> 00:08:13.440
or it's an IIFE, you're creating
a scope in which the await exists.

109
00:08:13.440 --> 00:08:18.987
So top-level await, it's not something
that can compile down to CommonJS.

110
00:08:18.987 --> 00:08:24.505
And that's why TypeScript's saying you can
only do this If you output a sufficiently

111
00:08:24.505 --> 00:08:29.040
modern module format, not a language
level, but the kind of module.

112
00:08:29.040 --> 00:08:30.688
So if we go back to
the TypeScript playground,

113
00:08:30.688 --> 00:08:31.840
we can see what that looks like.

114
00:08:31.840 --> 00:08:36.381
That would be like us going here,

115
00:08:36.381 --> 00:08:41.581
module ES 2022, and there we go.

116
00:08:41.581 --> 00:08:45.532
It's decided to drop the import entirely,
which is interesting.

117
00:08:45.532 --> 00:08:47.140
I can't do this.

118
00:08:47.140 --> 00:08:49.970
Yeah, it's not even letting
me do this in ES22.

119
00:08:49.970 --> 00:08:54.065
So I'd have to do the namespace.

120
00:08:57.810 --> 00:09:01.920
But in this scenario, sorry,
I'm getting my syntaxes confused.

121
00:09:03.840 --> 00:09:07.877
In this scenario, you're not really
worried about CommonJS interrupt because

122
00:09:07.877 --> 00:09:11.494
it's not just a choice about, I have
one piece of code that can be emitted

123
00:09:11.494 --> 00:09:13.950
in a variety of different module formats.

124
00:09:13.950 --> 00:09:18.501
When you use a top-level await, that
is something that only is supported in

125
00:09:18.501 --> 00:09:21.430
certain module formats,
the most modern ones.

126
00:09:26.616 --> 00:09:29.704
And one day we'll build this,
this will be our build target and

127
00:09:29.704 --> 00:09:31.420
we'll run things this way.

128
00:09:31.420 --> 00:09:32.539
But honestly,

129
00:09:32.539 --> 00:09:38.660
there's not really a great reason to spit
out modules that are this modern, right?

130
00:09:38.660 --> 00:09:42.199
It's a compiled target,
aside from top-level await,

131
00:09:42.199 --> 00:09:47.150
which you'd have to think about,
is that something you really, really need?

132
00:09:48.510 --> 00:09:53.111
You don't really get much
difference between a CGS

133
00:09:53.111 --> 00:09:56.968
compiled target or these modern modules.

134
00:09:56.968 --> 00:09:59.441
It's the code that is actually being run.

135
00:09:59.441 --> 00:10:02.084
And remember, you're already compiling,

136
00:10:02.084 --> 00:10:04.804
you're ripping out
the types from your code.

137
00:10:04.804 --> 00:10:10.246
And so aside from those very small set of
features, there will certainly be more

138
00:10:10.246 --> 00:10:15.952
in the future, but there's no advantage
to outputting super super modern stuff.

