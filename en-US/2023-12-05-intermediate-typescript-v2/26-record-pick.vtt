WEBVTT

1
00:00:00.170 --> 00:00:06.266
As we think about the next topic,
which is mapped types,

2
00:00:06.266 --> 00:00:12.235
I want you to recall that we
studied index signatures and

3
00:00:12.235 --> 00:00:16.809
index signatures look like this, right?

4
00:00:16.809 --> 00:00:18.180
Like a dictionary type, right?

5
00:00:18.180 --> 00:00:22.082
We're saying you can gimme any key,
and it could be,

6
00:00:22.082 --> 00:00:26.600
you could put a value of
a certain type under any key.

7
00:00:26.600 --> 00:00:29.830
So this is kind of our starting point for
mapped types.

8
00:00:29.830 --> 00:00:34.702
The way I want you to think
about mapped types is it's

9
00:00:34.702 --> 00:00:38.039
almost like array.map for types.

10
00:00:38.039 --> 00:00:43.104
Meaning, we're trying to almost like

11
00:00:43.104 --> 00:00:49.088
iterate over the names of
fields in one type and

12
00:00:49.088 --> 00:00:56.159
produce another type that
is transformed in some way.

13
00:00:57.280 --> 00:00:59.390
So, let's dig into that.

14
00:00:59.390 --> 00:01:03.551
So, our example here, we have fruit,
we have a dictionary of fruit,

15
00:01:03.551 --> 00:01:07.610
we're saying, a fruit could be there or
it could not be there.

16
00:01:07.610 --> 00:01:10.767
Here's our fruit catalog,
it's dictionary of fruits, and

17
00:01:10.767 --> 00:01:14.430
here's apple, could be fruit or
undefined, right?

18
00:01:14.430 --> 00:01:17.890
Now, the important thing to note
is apple's not there, right?

19
00:01:19.030 --> 00:01:21.650
So that's why it's saying
it might be undefined.

20
00:01:21.650 --> 00:01:24.854
So let's build our first mapped
type based on that example.

21
00:01:29.569 --> 00:01:32.698
Okay, this kind of looks
like an index signature, and

22
00:01:32.698 --> 00:01:37.830
I'll leave line 9 in our field of view
here so that we can see the difference.

23
00:01:37.830 --> 00:01:44.759
This is saying any key that's a string,
that's an index signature.

24
00:01:44.759 --> 00:01:46.320
You could put whatever you like there.

25
00:01:46.320 --> 00:01:48.660
That's what makes
a dictionary a dictionary.

26
00:01:49.730 --> 00:01:52.210
Here we have some different syntax.

27
00:01:53.700 --> 00:01:58.811
We're saying fruit key in apple or cherry.

28
00:02:01.671 --> 00:02:06.023
This is a type parameter, it's another
kinda type parameter that just sort

29
00:02:06.023 --> 00:02:08.410
of pops up in the type expression itself.

30
00:02:08.410 --> 00:02:13.380
It's not over here,
it's popping up in the type expression.

31
00:02:13.380 --> 00:02:21.924
So what we're saying is FruitKey is
a property name in the set of apple and

32
00:02:21.924 --> 00:02:25.996
cherry, and then you get a fruit.

33
00:02:25.996 --> 00:02:30.175
And so here you can see that, we can
have a cherry, we can have an apple,

34
00:02:30.175 --> 00:02:32.740
but we can't have a pineapple only.

35
00:02:32.740 --> 00:02:36.590
Effectively, we've said
only known properties or

36
00:02:36.590 --> 00:02:41.233
only a property of particular
names are present on this thing.

37
00:02:41.233 --> 00:02:46.839
It is no longer a dictionary,
we call this a record.

38
00:02:46.839 --> 00:02:52.167
Dictionaries have arbitrary keys,
records have specific keys.

39
00:02:59.799 --> 00:03:02.414
Another important thing
to realize here is, and

40
00:03:02.414 --> 00:03:07.020
this is true of index signatures as well,
valid property names are not just strings.

41
00:03:07.020 --> 00:03:10.950
You can have symbols as property names and
you can have numbers as property names.

42
00:03:10.950 --> 00:03:12.990
So, let's look at record.

43
00:03:14.020 --> 00:03:17.280
Let's start with a type
that says any possible key.

44
00:03:17.280 --> 00:03:21.155
And boy, this is just what
I said just now, keyof any.

45
00:03:21.155 --> 00:03:25.600
That's like, what are the valid
things that could be keyof anything?

46
00:03:27.000 --> 00:03:29.570
String or number or symbol?

47
00:03:29.570 --> 00:03:31.917
Keyof can only return
those kinds of things,

48
00:03:31.917 --> 00:03:34.022
only evaluate to those kinds of things.

49
00:03:35.234 --> 00:03:39.603
All right, so
let's look at this, we can say,

50
00:03:39.603 --> 00:03:44.411
okay, my record is generic
over a type parameter K,

51
00:03:44.411 --> 00:03:48.570
K extends keyof any, then I have a value.

52
00:03:48.570 --> 00:03:50.970
The value's not really interesting here.

53
00:03:50.970 --> 00:03:55.798
Just as in the case with dictionary,
right, value ends up being the value type,

54
00:03:55.798 --> 00:03:56.300
right?

55
00:03:58.130 --> 00:04:01.350
Like see, T, just ends up going over here.

56
00:04:02.420 --> 00:04:04.710
It just sort of passes straight
through as the value type.

57
00:04:04.710 --> 00:04:09.200
So maybe ignore the V for now, but
let's study this piece by piece.

58
00:04:10.880 --> 00:04:15.663
What we're saying is, K is a string,

59
00:04:15.663 --> 00:04:19.060
a number, or a symbol.

60
00:04:19.060 --> 00:04:20.900
That's the minimum requirement.

61
00:04:20.900 --> 00:04:23.768
That's what we're saying with our
type parameter constraint here.

62
00:04:25.938 --> 00:04:28.610
Over here, here's our k, right?

63
00:04:29.790 --> 00:04:32.740
Minimum requirement,
a string or number or symbol.

64
00:04:32.740 --> 00:04:38.336
Now we're saying, for
each key in this type, for each,

65
00:04:38.336 --> 00:04:46.060
it's almost like a for each,
here's the value I want you to show me.

66
00:04:46.060 --> 00:04:48.502
So that's a good starting point.

67
00:04:51.203 --> 00:04:53.117
Let's look at what we can do with that.

68
00:04:55.267 --> 00:04:59.130
Well, first, let me do the big
reveal here, this is record.

69
00:05:00.710 --> 00:05:06.948
So there is a, It's a built-in
TypeScript type, here it is.

70
00:05:06.948 --> 00:05:10.868
And if you see that I,
if I were to just take key,

71
00:05:10.868 --> 00:05:17.650
if I were to turn that into this letter p,
effectively, that's what we've got.

72
00:05:17.650 --> 00:05:21.033
Let's put this on a new line so
we can see it formatted the same way.

73
00:05:23.054 --> 00:05:24.528
It doesn't like that?

74
00:05:26.109 --> 00:05:26.906
Why doesn't it?

75
00:05:26.906 --> 00:05:27.704
Because I have this.

76
00:05:31.769 --> 00:05:33.740
I'm missing the open brace,
that would explain it.

77
00:05:35.220 --> 00:05:35.870
So there you go.

78
00:05:35.870 --> 00:05:39.660
It's just like a different name of
type parameter, but this is record.

79
00:05:39.660 --> 00:05:44.350
So, let's look at what
we can create with this.

80
00:05:46.210 --> 00:05:52.489
My, Do I have a fruit up there?

81
00:05:53.906 --> 00:05:55.188
Yeah, I have a fruit.

82
00:05:58.121 --> 00:05:59.918
So we could say it's a record.

83
00:06:04.197 --> 00:06:06.521
You can make these even first or second.

84
00:06:17.209 --> 00:06:19.869
Get rid of this little thing.

85
00:06:19.869 --> 00:06:27.370
If we hover over this, Or if we do this,
can we get it to expand that out?

86
00:06:28.800 --> 00:06:30.857
Now we can't,
we have to rely on autocomplete here.

87
00:06:34.066 --> 00:06:36.650
There's first, there's second,
they're both there.

88
00:06:36.650 --> 00:06:40.474
So effectively, we're not saying any
old place you can store a fruit,

89
00:06:40.474 --> 00:06:42.209
you have a specific set of keys.

90
00:06:43.970 --> 00:06:47.790
So let's combine this with
an indexed access type.

91
00:06:47.790 --> 00:06:51.440
And I should point out to you that,
what is the mapped type here?

92
00:06:51.440 --> 00:06:52.650
It's this.

93
00:06:52.650 --> 00:06:56.110
This is effectively, like, array.map.

94
00:06:56.110 --> 00:07:00.050
We're saying here's the array,
all of the possible keys.

95
00:07:00.050 --> 00:07:01.780
Sorry, I got it wrong.

96
00:07:01.780 --> 00:07:04.660
This is the array of
all the possible keys.

97
00:07:04.660 --> 00:07:07.410
This is almost like your I, right?

98
00:07:07.410 --> 00:07:13.464
It's changing with each turn of the mapped
type, and then here's the value.

99
00:07:20.976 --> 00:07:26.126
So we've got key in and
then a couple names of properties,

100
00:07:26.126 --> 00:07:29.900
and look what we can do with this.

101
00:07:29.900 --> 00:07:37.580
Indexed access types allow us to retrieve
the type of a field on an object type.

102
00:07:37.580 --> 00:07:40.350
So here, it's almost like we're saying.

103
00:07:49.168 --> 00:07:52.510
Look at this, y is of type document.

104
00:07:52.510 --> 00:07:56.150
Give me the type of your
document field window?

105
00:07:58.520 --> 00:08:02.046
Now note that,
we're able to use this type param,

106
00:08:02.046 --> 00:08:07.790
which represents kind of the key that's
changing with each iteration of the loop.

107
00:08:07.790 --> 00:08:11.820
If you wanna think about it,
like array.map,

108
00:08:11.820 --> 00:08:17.982
we're allowed to use this over here
in terms of defining the value type.

109
00:08:17.982 --> 00:08:19.600
This is pretty powerful.

110
00:08:19.600 --> 00:08:24.021
So what we've got here is,
we're letting ourselves get

111
00:08:24.021 --> 00:08:28.086
a subset of a type by
specifying the property names.

112
00:08:28.086 --> 00:08:30.350
And we can generalize that a little bit.

113
00:08:30.350 --> 00:08:32.382
And we could say, all right,

114
00:08:32.382 --> 00:08:38.005
I want the caller to be able to to decide
which property names they're asking for.

115
00:08:38.005 --> 00:08:41.445
So we could say,
I want to get a part of a window.

116
00:08:41.445 --> 00:08:45.685
We'll just make that two to not collide
with above, pick window properties.

117
00:08:45.685 --> 00:08:48.605
And we've got document navigator,
set time out.

118
00:08:48.605 --> 00:08:51.777
And sure enough, if we look at this,
there's document navigator and

119
00:08:51.777 --> 00:08:52.435
set time out.

120
00:08:52.435 --> 00:08:53.908
We've plucked those off and

121
00:08:53.908 --> 00:08:57.785
we have a new object type that represents
some subset of these properties.

122
00:08:57.785 --> 00:09:01.108
We can make this a little
more generic by saying, hey,

123
00:09:01.108 --> 00:09:05.160
let's not just make this about
getting things off of window.

124
00:09:05.160 --> 00:09:07.620
What if we introduce one more type param?

125
00:09:08.730 --> 00:09:12.330
We'll call this value type.

126
00:09:12.330 --> 00:09:17.258
And that's what we're gonna iterate
over here, not window, but a type param.

127
00:09:17.258 --> 00:09:20.969
So you're gonna pass pick
properties a value type and

128
00:09:20.969 --> 00:09:24.029
then you have a type
parameter called keys.

129
00:09:24.029 --> 00:09:29.790
And keys must be a subset
of keyof value type.

130
00:09:29.790 --> 00:09:32.204
Which means, we can't just pick, and

131
00:09:32.204 --> 00:09:35.358
I had the same similar constraint up here,
right?

132
00:09:35.358 --> 00:09:41.288
If I do this, It's

133
00:09:41.288 --> 00:09:45.880
not gonna be happy with me, foo is
not assignable to type keyof window.

134
00:09:45.880 --> 00:09:49.490
I can only specify the names of
properties that are on window.

135
00:09:49.490 --> 00:09:53.176
Same below, for
a given value type I pass in,

136
00:09:53.176 --> 00:09:58.512
I can only specify known properties
on that value type, whoops.

137
00:10:01.170 --> 00:10:05.223
So I pass in window, I pass in
property names that are on window,

138
00:10:05.223 --> 00:10:12.940
I'll prove the constraint still works,
And what do I get?

139
00:10:12.940 --> 00:10:14.529
Exactly the same thing.

140
00:10:14.529 --> 00:10:18.508
And what we've arrived at is pick.

141
00:10:18.508 --> 00:10:25.513
This is another utility type, Pick.

142
00:10:25.513 --> 00:10:32.129
Given a value type and the names
of some fields on that value type,

143
00:10:32.129 --> 00:10:40.330
generate a new object type that almost
plucks the key type pairs that were named.

