WEBVTT

1
00:00:00.200 --> 00:00:02.849
The next topic we're gonna take on,

2
00:00:02.849 --> 00:00:08.244
represent us picking up where we left
off in TypeScript Fundamentals V4.

3
00:00:08.244 --> 00:00:12.553
We were talking about generics
at the end of that course, and

4
00:00:12.553 --> 00:00:16.959
now we're gonna talk about
generic scopes and constraints.

5
00:00:16.959 --> 00:00:21.366
Generic constraints are the ability
to specify a minimum

6
00:00:21.366 --> 00:00:24.620
requirement on a type parameter.

7
00:00:24.620 --> 00:00:28.970
And I'm gonna begin with
an example that illustrates,

8
00:00:28.970 --> 00:00:33.060
the importance of having
something like this.

9
00:00:33.060 --> 00:00:38.157
So in the exercise we completed
in the generic section of

10
00:00:38.157 --> 00:00:43.798
TypeScript Fundamentals V4,
it involved us taking an array

11
00:00:43.798 --> 00:00:50.421
of objects that have some sort of ID
on them, in this case, customerId.

12
00:00:50.421 --> 00:00:55.073
And we converted them to kind
of like a equivalent dictionary

13
00:00:55.073 --> 00:00:57.726
representation of the same data.

14
00:00:57.726 --> 00:01:03.276
And you can see here, we're just using the
customerId as the key in our dictionary

15
00:01:03.276 --> 00:01:08.602
and we can look up a customer by ID now
without having to iterate through a list.

16
00:01:08.602 --> 00:01:13.693
So the working code we ended up with at
the end of that exercise was this and

17
00:01:13.693 --> 00:01:18.369
just to refresh everybody's memory
in case it's been a little bit

18
00:01:18.369 --> 00:01:20.305
since you took the course.

19
00:01:20.305 --> 00:01:23.629
And we've talked about a lot of things so
far, so we'll just,

20
00:01:23.629 --> 00:01:25.146
well, I'll catch up here.

21
00:01:25.146 --> 00:01:31.257
We ended up with a function called
listToDict that takes in a type parameter.

22
00:01:31.257 --> 00:01:34.197
And that T represents
a couple different things,

23
00:01:34.197 --> 00:01:36.650
or it's used in a couple different ways.

24
00:01:36.650 --> 00:01:38.500
But here's what our T is.

25
00:01:38.500 --> 00:01:43.270
It effectively represents one
of these members of the array,

26
00:01:43.270 --> 00:01:46.490
or one of these values in our dictionary.

27
00:01:46.490 --> 00:01:47.541
It's the same shape, right?

28
00:01:47.541 --> 00:01:49.963
It's three properties and
there's an object.

29
00:01:49.963 --> 00:01:54.130
Now, we ended up with a very
flexible implementation

30
00:01:54.130 --> 00:01:58.290
that can handle a wide
range of different shapes.

31
00:01:58.290 --> 00:02:00.915
But that's where the shape manifests,
right?

32
00:02:00.915 --> 00:02:04.130
It's the type of an array member.

33
00:02:04.130 --> 00:02:08.955
So we've got this type parameter T,
here's the list we take in as input, and

34
00:02:08.955 --> 00:02:10.610
it's an array of Ts.

35
00:02:10.610 --> 00:02:12.730
So this is where the inference happens,
right?

36
00:02:12.730 --> 00:02:16.934
As soon as we say, here's the array
that I want to convert to a dictionary.

37
00:02:16.934 --> 00:02:20.724
listToDict will then
understand what T is and

38
00:02:20.724 --> 00:02:25.219
it will help us provide this
ID generation function.

39
00:02:25.219 --> 00:02:30.061
And it'll know what the return
type is supposed to be cuz

40
00:02:30.061 --> 00:02:34.090
it can infer T based on
the list that we give it.

41
00:02:34.090 --> 00:02:38.792
So we're gonna enter inside of the
function we create an empty dictionary of

42
00:02:38.792 --> 00:02:42.537
the correct type, so
it can have any key that is a string, and

43
00:02:42.537 --> 00:02:44.820
it can have a value of type T.

44
00:02:44.820 --> 00:02:48.982
We iterate over the list,
we call this ID generation function,

45
00:02:48.982 --> 00:02:51.771
which we pass it an item,
it gives us an ID.

46
00:02:51.771 --> 00:02:52.700
Here's that function.

47
00:02:52.700 --> 00:02:55.500
It's a function just for
obtaining an item's ID.

48
00:02:55.500 --> 00:02:58.140
We leave it to the caller
to provide that for us so

49
00:02:58.140 --> 00:03:02.250
that we can be maximally flexible,
and then we return the dictionary.

50
00:03:02.250 --> 00:03:06.483
So this is the most complicated
thing that's going on, but

51
00:03:06.483 --> 00:03:09.880
hopefully, we can
understand how this works.

52
00:03:09.880 --> 00:03:11.623
It's iterating over an array and

53
00:03:11.623 --> 00:03:14.870
it's transforming it into a dictionary or
a hash.

54
00:03:14.870 --> 00:03:16.710
All those words mean kinda the same thing.

55
00:03:17.860 --> 00:03:25.190
Okay, so let's think about
how we might implement this.

56
00:03:25.190 --> 00:03:29.756
Let's add an additional convention
to the solution that we made for

57
00:03:29.756 --> 00:03:32.980
the TypeScript fundamentals problem.

58
00:03:32.980 --> 00:03:37.300
So here we have customer ID and
an ID generation function.

59
00:03:37.300 --> 00:03:42.380
But let's say we wanted to drop
the ID generation function, and

60
00:03:42.380 --> 00:03:47.835
just operate by some convention
where if we have properties with ID,

61
00:03:47.835 --> 00:03:50.070
we'll just pick that up.

62
00:03:50.070 --> 00:03:54.001
We just know that there's an ID
that's going to be present,

63
00:03:54.001 --> 00:03:55.860
and we can use that, right?

64
00:03:55.860 --> 00:03:57.300
That lets us simplify this.

65
00:03:57.300 --> 00:03:58.511
We can get rid of this, and

66
00:03:58.511 --> 00:04:01.500
look at how much easier this
function is to understand, right?

67
00:04:01.500 --> 00:04:05.780
You get a list of T's, you get
a dictionary of T's fed back to you.

68
00:04:05.780 --> 00:04:08.913
It's less abstract and
maybe for our use case,

69
00:04:08.913 --> 00:04:13.140
everything has an ID property and
this will do just fine.

70
00:04:13.140 --> 00:04:18.130
So let's look at how we might
implement this without using generics.

71
00:04:18.130 --> 00:04:22.020
Well, first, we could create
a type alias or an interface,

72
00:04:22.020 --> 00:04:24.860
it doesn't really matter, called HasId.

73
00:04:24.860 --> 00:04:25.520
This is,

74
00:04:25.520 --> 00:04:30.725
represents anything that has a property
called ID whose value is a string.

75
00:04:30.725 --> 00:04:35.106
We're going to want an interface
that represents a dictionary.

76
00:04:35.106 --> 00:04:39.976
So this is a dictionary that's
generic over type T which is the value

77
00:04:39.976 --> 00:04:44.861
type that's in the dictionary,
and we've removed generics now.

78
00:04:44.861 --> 00:04:47.885
So this function gets
a little bit simpler and

79
00:04:47.885 --> 00:04:51.875
let me comment out this one above just so
we don't collide.

80
00:04:55.719 --> 00:05:00.096
So we take in a list of
objects that are HasId,

81
00:05:00.096 --> 00:05:05.130
that make sure that we
have an ID on each object.

82
00:05:05.130 --> 00:05:09.786
We can iterate over each of
the items because there HasId, well,

83
00:05:09.786 --> 00:05:11.320
we know it's there.

84
00:05:11.320 --> 00:05:15.193
We don't need to call this
function to generate IDs anymore.

85
00:05:15.193 --> 00:05:20.690
We just know the properties there
because it's sort of like a minimum

86
00:05:20.690 --> 00:05:26.203
requirement we have placed on list,
and we have that guarantee now.

87
00:05:26.203 --> 00:05:29.891
And then we return the dictionary and
it seems like it works.

88
00:05:29.891 --> 00:05:35.995
So the problem here is we have lost,

89
00:05:35.995 --> 00:05:39.659
if we do listToDict,

90
00:05:43.842 --> 00:05:46.873
Let's not do phone list
because those don't have IDs.

91
00:05:49.541 --> 00:05:55.068
So we'll say a and then,
Something like that.

92
00:05:58.209 --> 00:06:01.429
Let me create these in a variable here, so

93
00:06:01.429 --> 00:06:05.578
I don't get excess property
checking yelling at me.

94
00:06:08.127 --> 00:06:10.127
Just create a bunch of these.

95
00:06:17.142 --> 00:06:22.427
All right, so we've got an example
of things that have IDs on them,

96
00:06:22.427 --> 00:06:26.895
and we're gonna call listToDict,
pass in the testArr.

97
00:06:29.255 --> 00:06:30.939
What's our test result?

98
00:06:30.939 --> 00:06:33.188
And if we look at test result,

99
00:06:36.993 --> 00:06:41.821
Look at that,
only the id property is available.

100
00:06:41.821 --> 00:06:46.030
And of course, that's because
this is what we're returning.

101
00:06:46.030 --> 00:06:50.623
So we've stated a requirement on our
input but that requirement is kind of,

102
00:06:50.623 --> 00:06:53.994
all we know about this is that
they have the property ID,

103
00:06:53.994 --> 00:06:57.070
we can't create a more
specific result here.

104
00:06:57.070 --> 00:07:02.070
We've lost the flexibility that our
generics, or type parameter gave us.

105
00:07:02.070 --> 00:07:07.140
The point of the type parameter was we
could be flexible, while still retaining

106
00:07:07.140 --> 00:07:11.910
type information and letting it
pass straight through our function.

107
00:07:11.910 --> 00:07:16.947
So let's see if we can bring our type
parameter back into the function.

108
00:07:19.203 --> 00:07:24.650
So this is the new function head or
the beginning of the declaration.

109
00:07:24.650 --> 00:07:27.230
So I'm gonna drop it in place.

110
00:07:27.230 --> 00:07:30.499
And just so
you can look at them side-by-side,

111
00:07:30.499 --> 00:07:34.890
what we're doing here is
we're replacing HasId with T.

112
00:07:34.890 --> 00:07:41.590
And instead of a dictionary of HasId,
it's a dictionary over type T.

113
00:07:41.590 --> 00:07:48.590
So if we use that, Well,
we'd have to change this to T as well.

114
00:07:50.560 --> 00:07:56.030
So if we look at our test result,
that looks a lot better, right?

115
00:07:56.030 --> 00:07:57.100
Color is there.

116
00:07:57.100 --> 00:08:02.640
If we did testResult.a., there's color.

117
00:08:02.640 --> 00:08:07.040
The type information is passing
through our function again, but

118
00:08:07.040 --> 00:08:11.440
look at this, we can't access.id
because T could be anything.

119
00:08:12.800 --> 00:08:14.500
T could be literally anything.

120
00:08:16.300 --> 00:08:19.730
So what we need here is
to describe a constraint.

121
00:08:19.730 --> 00:08:21.780
We've looked at two options here.

122
00:08:21.780 --> 00:08:25.214
In this option, we had some guarantee,

123
00:08:25.214 --> 00:08:31.140
like a minimum requirement, for
what we could accept in our list.

124
00:08:31.140 --> 00:08:35.040
It has to be objects
containing an ID property.

125
00:08:35.040 --> 00:08:39.740
And here, we have flexibility, but
we lost that minimum requirement.

126
00:08:39.740 --> 00:08:42.390
A type parameter constraint
lets us have both.

127
00:08:42.390 --> 00:08:45.760
It lets us kind of get
the best of both worlds here.

128
00:08:45.760 --> 00:08:49.281
Let me comment this out, so
it doesn't screw up syntax highlighting.

129
00:08:52.105 --> 00:08:54.207
And we already put that in.

130
00:08:56.856 --> 00:09:01.060
So what we're gonna
need to do here is say,

131
00:09:05.312 --> 00:09:10.410
T extends HasId.

132
00:09:10.410 --> 00:09:12.130
There's our type parameter constraint.

133
00:09:13.760 --> 00:09:15.379
T extends HasId.

134
00:09:17.250 --> 00:09:18.930
There's our id.

135
00:09:18.930 --> 00:09:24.990
So that internally,
these look like HasId objects.

136
00:09:24.990 --> 00:09:25.810
In fact, look at that.

137
00:09:25.810 --> 00:09:28.380
It's being regarded as a HasId.

138
00:09:28.380 --> 00:09:29.080
Look at the tooltip.

139
00:09:30.880 --> 00:09:36.674
But the distinction here is,
we're still using a type parameter here.

140
00:09:36.674 --> 00:09:40.898
Anything that goes beyond
satisfying the HasId interface,

141
00:09:40.898 --> 00:09:46.300
like this color field, it's preserved and
it flows through this function.

