WEBVTT

1
00:00:00.130 --> 00:00:04.780
The next topic we're going to discuss
is inference with conditional types.

2
00:00:05.910 --> 00:00:10.648
So conditional types aren't
just about checking to see

3
00:00:10.648 --> 00:00:15.096
whether a given thing is
a subtype of another thing.

4
00:00:15.096 --> 00:00:20.207
We can use the infer keyword
to extract something out of

5
00:00:20.207 --> 00:00:26.080
a type within a condition,
which we then can use separately.

6
00:00:26.080 --> 00:00:31.294
And when I talk about extracting something
out of a type, I don't necessarily

7
00:00:31.294 --> 00:00:35.644
mean the kind of thing that we
looked at with extract and exclude.

8
00:00:35.644 --> 00:00:40.986
But sometimes this is extracting a type
per out of something, essentially.

9
00:00:40.986 --> 00:00:43.130
We're gonna look at a motivating use case.

10
00:00:44.860 --> 00:00:52.000
In this 08-infer folder, within our course
notes, you can see that we have two files.

11
00:00:52.000 --> 00:00:55.330
One of them we're calling fruit market.

12
00:00:55.330 --> 00:00:58.520
You can see we've got apple varieties,
orange varieties.

13
00:00:58.520 --> 00:01:02.480
We've got a list of possible allergies.

14
00:01:02.480 --> 00:01:07.140
We've got some type that
represents degree of ripeness.

15
00:01:07.140 --> 00:01:08.682
We have a type representing
a quality range.

16
00:01:08.682 --> 00:01:12.687
So there's there's a lot going on
in here we've got fruit order item,

17
00:01:12.687 --> 00:01:15.642
we've got fruit order,
fruit order preferences.

18
00:01:15.642 --> 00:01:19.577
And then finally there's something
at the bottom that we export so

19
00:01:19.577 --> 00:01:22.457
outside the model,
sorry outside this module,

20
00:01:22.457 --> 00:01:27.420
this is the only thing that we'd
be able to see, it's create order.

21
00:01:27.420 --> 00:01:30.740
And it takes as an argument,
this fruit order preferences thing.

22
00:01:30.740 --> 00:01:34.820
Now, we don't need to understand
this in detail except in so

23
00:01:34.820 --> 00:01:39.460
far as like, you see that there
are a lot of types referenced here that

24
00:01:39.460 --> 00:01:43.868
are that you only have access to
by these names within the module.

25
00:01:43.868 --> 00:01:48.531
So let's go to our index.ts file, so
here's our create order function takes

26
00:01:48.531 --> 00:01:53.137
fruit order preferences but there's no
way for us to get that type right now.

27
00:01:53.137 --> 00:01:55.890
It's the first argument of that function.

28
00:01:55.890 --> 00:02:00.834
So what we're gonna do is
use a conditional type

29
00:02:00.834 --> 00:02:05.418
to sort of tease out, that first argument.

30
00:02:05.418 --> 00:02:09.920
And what we hope to do
here is get prefs like,

31
00:02:09.920 --> 00:02:15.080
if we've defined get first arg correctly.

32
00:02:15.080 --> 00:02:18.303
This instead of being of type any,

33
00:02:18.303 --> 00:02:23.870
it should turn into type fruit
order preferences, right.

34
00:02:23.870 --> 00:02:27.110
Get first arg is going to do that for us.

35
00:02:27.110 --> 00:02:29.882
It's gonna take the type of the function,

36
00:02:29.882 --> 00:02:34.590
create order, and it's going to give
us the type of its first argument.

37
00:02:36.220 --> 00:02:42.463
So let's get started, first we
need to introduce something called

38
00:02:42.463 --> 00:02:48.060
the infer keyword and
I want to look at a simple example here.

39
00:02:49.520 --> 00:02:55.521
Before we get into function signatures and
things that are practical,

40
00:02:55.521 --> 00:03:01.523
but make things a little bit more
complicated in TypeScript promises,

41
00:03:01.523 --> 00:03:08.750
have a type param promises are generic
over the type of value they resolve to.

42
00:03:08.750 --> 00:03:12.994
So if you have a promise,

43
00:03:18.817 --> 00:03:21.610
wow, copilot you're awesome.

44
00:03:21.610 --> 00:03:26.410
Promise that resolve 1 2 3, so this is
a promise that resolves to a number.

45
00:03:26.410 --> 00:03:32.760
How might we take the type of a promise,
like this?

46
00:03:32.760 --> 00:03:39.190
Promise string, how might we take that and
end up with this becoming a string?

47
00:03:39.190 --> 00:03:42.650
Well, we have the answer in front of
us and we're going to walk through it.

48
00:03:42.650 --> 00:03:43.920
So, here's the answer.

49
00:03:44.960 --> 00:03:49.710
We're going to do it step by step,
on different lines.

50
00:03:50.790 --> 00:03:54.490
First, we can identify that this
is a conditional type, right?

51
00:03:54.490 --> 00:03:58.764
All of this stuff is a type expression,
and

52
00:03:58.764 --> 00:04:02.340
sorry the whole thing including P.

53
00:04:02.340 --> 00:04:06.610
This represents the condition and
we have our extends keyword here.

54
00:04:06.610 --> 00:04:11.612
So we're saying P extends
a promise like what's

55
00:04:11.612 --> 00:04:16.990
gonna happen with this
[LAUGH] Infer thing, come on.

56
00:04:19.020 --> 00:04:23.855
P extends promise like, and
we have this infer keyword and

57
00:04:23.855 --> 00:04:28.392
what this is going to do is,
well first of all the type,

58
00:04:28.392 --> 00:04:35.319
the condition expression here it's going
to evaluate as it always would, right.

59
00:04:35.319 --> 00:04:38.271
Like in terms of whether
we're sent down this branch,

60
00:04:38.271 --> 00:04:41.928
in the case that the condition is
satisfied, or this other branch,

61
00:04:41.928 --> 00:04:43.993
in the case that it's not satisfied.

62
00:04:43.993 --> 00:04:47.951
This infer keyword will have
absolutely no effect on that, but

63
00:04:47.951 --> 00:04:52.630
what it lets us do within the condition
is tease out a new type parameter T.

64
00:04:52.630 --> 00:04:58.230
Note that there's no T up here when
we're defining unwrap promise.

65
00:04:58.230 --> 00:05:03.262
We can use this T in
this branch specifically

66
00:05:03.262 --> 00:05:08.570
where we have found that
the condition is met.

67
00:05:09.740 --> 00:05:15.813
So, what we're doing is we're
saying we take in a promise,

68
00:05:15.813 --> 00:05:22.850
that's our P and if P extends
promise-like over some generic type T.

69
00:05:23.870 --> 00:05:28.003
We're gonna grab that T, and
we're going to return it or

70
00:05:28.003 --> 00:05:31.120
we're going to evaluate up to it.

71
00:05:31.120 --> 00:05:32.660
And here you can see we get a string.

72
00:05:33.830 --> 00:05:37.430
Here you can see we get an array
containing a string array and

73
00:05:37.430 --> 00:05:39.020
a number array.

74
00:05:39.020 --> 00:05:42.570
Here we can see we get a number so
that's how infer works.

75
00:05:42.570 --> 00:05:47.228
infer can only be used in this branch, it
cannot be used in this one right that this

76
00:05:47.228 --> 00:05:52.220
is the branch down here that represents
the condition not having been met.

77
00:05:52.220 --> 00:05:56.910
And of course you could assume there that
like, well, it's not a promise and so

78
00:05:56.910 --> 00:06:01.730
of course we can't extract out
the type that the promise resolves to.

79
00:06:01.730 --> 00:06:03.810
We've failed to meet the condition so

80
00:06:03.810 --> 00:06:06.416
that's why only in this
branch you could use T.

81
00:06:07.770 --> 00:06:12.289
It's almost like a type parameter
that's sort of declared on the fly and

82
00:06:12.289 --> 00:06:15.340
can be used in this part
of the conditional type.

83
00:06:17.480 --> 00:06:19.171
It's a really powerful idea.

84
00:06:24.233 --> 00:06:27.549
So let's go back to our
fruit market example.

85
00:06:29.130 --> 00:06:33.840
First, we're going to need a type for
a one function argument.

86
00:06:33.840 --> 00:06:38.689
And because of the way arguments work in
JavaScript, there's a little fishiness

87
00:06:38.689 --> 00:06:43.990
around being able to check for exactly one
argument versus at least one argument.

88
00:06:43.990 --> 00:06:45.740
But we'll do our best here.

89
00:06:45.740 --> 00:06:48.902
So we're saying, all right,
I have a type and

90
00:06:48.902 --> 00:06:52.970
I think I don't need this any
here in fact, I know I don't.

91
00:06:56.200 --> 00:07:01.840
I have a type 1 arg function
that is generic over A.

92
00:07:01.840 --> 00:07:06.647
Its first argument is A and
its remaining args can be anything,

93
00:07:06.647 --> 00:07:09.990
and there can be any number of them.

94
00:07:09.990 --> 00:07:10.902
And it returns a void,

95
00:07:10.902 --> 00:07:13.640
which means I don't care what it
returns it could return whatever.

96
00:07:14.660 --> 00:07:17.872
And I'm going to ignore it,
you might say, like,

97
00:07:17.872 --> 00:07:21.030
wait a minute couldn't we
have done this or this?

98
00:07:21.030 --> 00:07:23.860
Something that's not null, not undefined.

99
00:07:23.860 --> 00:07:28.280
I'm putting a type pram here for a reason.

100
00:07:28.280 --> 00:07:32.611
It lets me use infer, so
here's get first arg and

101
00:07:32.611 --> 00:07:37.907
I think I have that defined above so
I'll comment that out.

102
00:07:43.005 --> 00:07:48.628
This is why I have the any,
it is just a default for the type param,

103
00:07:48.628 --> 00:07:55.050
like in the event T is not provided,
you can assume it's an any.

104
00:07:55.050 --> 00:08:02.099
So we're saying get first arg,
if T extends one arg function,

105
00:08:02.099 --> 00:08:06.360
then we'll accept it as a type param.

106
00:08:08.160 --> 00:08:11.295
Now, in terms of what that evaluates to,

107
00:08:11.295 --> 00:08:16.132
we have a conditional type as long
as T extends one arc function,

108
00:08:16.132 --> 00:08:20.980
we'll emit a string array,
otherwise we'll emit a never.

109
00:08:20.980 --> 00:08:24.994
I'm just doing this so that we can see
if we can identify a one arg function,

110
00:08:24.994 --> 00:08:28.440
like if we see string ray we'll
know that our condition works.

111
00:08:28.440 --> 00:08:31.280
I do this all the time to
test conditional types.

112
00:08:31.280 --> 00:08:34.799
You're just sort of testing it to make
sure the condition flips the way you want

113
00:08:34.799 --> 00:08:38.367
and this is to make up for the fact that
like, this is not imperative code where we

114
00:08:38.367 --> 00:08:41.560
can put a debugger somewhere and
we can see what's happening.

115
00:08:41.560 --> 00:08:46.379
We kind of have to set up a test case and
see what the expression evaluates out to.

116
00:08:47.690 --> 00:08:53.790
So here's our function, it has at least
one argument and t1 is a string array.

117
00:08:53.790 --> 00:08:56.800
So we know that this type checks,

118
00:08:56.800 --> 00:09:01.639
we know that at least
the positive test case works, so

119
00:09:01.639 --> 00:09:06.160
let's let's modify this a little bit.

120
00:09:06.160 --> 00:09:11.107
What we want here is to say
T extends a OneArgFn, and

121
00:09:11.107 --> 00:09:15.610
OneArgFn is generic over
its first argument.

122
00:09:19.310 --> 00:09:20.440
Just use R there.

123
00:09:22.040 --> 00:09:24.280
Why is it yelling at me?

124
00:09:24.280 --> 00:09:27.712
I have not used R yet, so instead of
returning a string array, let's return R.

125
00:09:32.364 --> 00:09:36.886
Sorry I put that in the wrong place.

126
00:09:36.886 --> 00:09:38.125
That instructor.

127
00:09:42.197 --> 00:09:46.850
Up here, there we go.

128
00:09:46.850 --> 00:09:51.110
Infer R, so we're saying OneArgFn.

129
00:09:51.110 --> 00:09:53.310
So do you match OneArgFn?

130
00:09:53.310 --> 00:09:58.526
And if you do, let's tease out the thing

131
00:09:58.526 --> 00:10:05.133
that a particular OneArgFn has for
its type param.

132
00:10:05.133 --> 00:10:07.670
Look what we get, string.

133
00:10:07.670 --> 00:10:12.383
String is in fact the type of
the first argument here so

134
00:10:12.383 --> 00:10:20.780
let's go back up to the top here and
See how this works.

135
00:10:20.780 --> 00:10:22.770
So prefs, what's the type of prefs?

136
00:10:22.770 --> 00:10:29.510
Look at that, fruit order preferences,
so we've managed to obtain this type.

137
00:10:29.510 --> 00:10:35.512
Fruit order preferences, despite it
not being exported from the module but

138
00:10:35.512 --> 00:10:41.606
we had like access to a type that included
fruit order preferences, and using

139
00:10:41.606 --> 00:10:48.160
infer we were able to pluck that out as
the type of the first argument and use it.

140
00:10:48.160 --> 00:10:52.490
And now if we wanted to we could sort
of stage, to stage some preferences and

141
00:10:52.490 --> 00:10:55.770
then send them into
the create order function.

142
00:10:55.770 --> 00:11:00.150
The remaining type type error we're
getting here it just proves that we

143
00:11:00.150 --> 00:11:05.187
are type checking against fruit order
preferences, like we don't have apples,

144
00:11:05.187 --> 00:11:09.790
oranges prefers local produce like
that's we're working with the tape.

145
00:11:09.790 --> 00:11:11.040
Now that was the goal.

146
00:11:11.040 --> 00:11:17.130
&gt;&gt; So, and you can tell me if we're gonna
do this later, but I see it says never.

147
00:11:17.130 --> 00:11:22.077
But if I change like foo to not have any

148
00:11:22.077 --> 00:11:27.833
params it comes back as unknown not never.

149
00:11:27.833 --> 00:11:34.345
&gt;&gt; Comes back as unknown, I bet that's
the one arc function type here.

150
00:11:44.932 --> 00:11:51.132
Yep, it's going to be, and let's prove
it to ourselves like more directly here.

151
00:12:08.208 --> 00:12:09.540
Let me explain this a different way.

152
00:12:12.510 --> 00:12:17.334
It's hard to actually type check to find
a function that has a specific arg while

153
00:12:17.334 --> 00:12:20.130
being flexible to a bunch
of different args.

154
00:12:20.130 --> 00:12:24.075
And you can trace this back to kind
of how you can do function.call and

155
00:12:24.075 --> 00:12:27.690
function.apply and all that with,
remember we used, well.

156
00:12:29.780 --> 00:12:33.045
I remember a time when we used
to use the arguments list,

157
00:12:33.045 --> 00:12:37.575
like literally the arguments keyword
that is available in a function scope.

158
00:12:40.701 --> 00:12:43.216
Type checking here is not as good
as I would hope it would be, but

159
00:12:43.216 --> 00:12:44.360
this is kind of how it works.

160
00:12:44.360 --> 00:12:49.300
We actually never, as long as you
pass in a function of some sort.

161
00:12:49.300 --> 00:12:54.286
Like if we if we make this a number,
this well first of all it's going to

162
00:12:54.286 --> 00:13:00.120
fail this type prime constraint but
like let's let's get rid of that.

163
00:13:00.120 --> 00:13:04.121
Just so we can see what happens
just purely based on the condition,

164
00:13:04.121 --> 00:13:06.050
it'll flip to never here.

165
00:13:06.050 --> 00:13:10.746
It's really that sort of the the number
of arguments of the function are sort of

166
00:13:10.746 --> 00:13:12.241
slipping through
&gt;&gt; Got it,

167
00:13:12.241 --> 00:13:13.810
okay
&gt;&gt; An unknown would be like

168
00:13:13.810 --> 00:13:17.075
an acceptable thing to fall out because
at least you can't mess with it, right,

169
00:13:17.075 --> 00:13:20.770
it's still a dead end
&gt;&gt; Thank you.

170
00:13:20.770 --> 00:13:22.080
&gt;&gt; Its a good question.

