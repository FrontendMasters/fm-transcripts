WEBVTT

1
00:00:00.140 --> 00:00:05.144
So when we were talking about the list
of topics we're gonna cover today,

2
00:00:05.144 --> 00:00:09.920
I mentioned that the JavaScript
ecosystem is in a transition period.

3
00:00:09.920 --> 00:00:14.192
Where we've been using
a particular module syntax

4
00:00:14.192 --> 00:00:19.170
in terms of imports and exports for
a long time now, right?

5
00:00:19.170 --> 00:00:25.540
Since ES2015, this was defined as a
standard that we knew was going somewhere.

6
00:00:25.540 --> 00:00:30.312
The big thing that has changed
recently in the past couple of

7
00:00:30.312 --> 00:00:33.557
years is official support has landed for

8
00:00:33.557 --> 00:00:39.760
running modern JavaScript modules
directly in NoJS and in browsers.

9
00:00:39.760 --> 00:00:45.380
If you've ever seen a file that ends
in MJS, that's the file extension.

10
00:00:45.380 --> 00:00:47.060
You've seen this.

11
00:00:47.060 --> 00:00:50.855
And part of why I have chosen to
include some coverage of this topic in

12
00:00:50.855 --> 00:00:54.787
intermediate TypeScript is while
we're in this transition period,

13
00:00:54.787 --> 00:00:56.784
which will happen over many years,

14
00:00:56.784 --> 00:01:01.811
you're gonna have to deal with mixing both
old-style modules and new-style modules.

15
00:01:01.811 --> 00:01:04.422
So we're gonna talk about
the new-style modules,

16
00:01:04.422 --> 00:01:07.470
all of the kinds of things you
can do to import and export.

17
00:01:07.470 --> 00:01:12.139
TypeScript adds a couple things to
what can already be done in a modern

18
00:01:12.139 --> 00:01:14.360
JavaScript project.

19
00:01:14.360 --> 00:01:18.330
We're going to talk about importing types,
which is of particular importance.

20
00:01:18.330 --> 00:01:22.541
If in your project,
you have something like Babel or

21
00:01:22.541 --> 00:01:26.849
Webpack, which,
if those tools are responsible for

22
00:01:26.849 --> 00:01:31.254
actually emitting the resultant
JavaScript from your

23
00:01:31.254 --> 00:01:36.155
TypeScript program,
importing types is super important.

24
00:01:36.155 --> 00:01:41.280
To import types only as opposed to
something that has a value and a type.

25
00:01:41.280 --> 00:01:45.560
So we'll talk about why that is and
then how to go ahead and do that.

26
00:01:45.560 --> 00:01:47.850
We'll talk about CommonJS interop, right?

27
00:01:47.850 --> 00:01:52.247
If you have an old-style
CommonJS dependency of some sort,

28
00:01:52.247 --> 00:01:55.850
how do you consume
the types of this thing?

29
00:01:55.850 --> 00:01:59.596
And this is one of those situations where,
most of the time,

30
00:01:59.596 --> 00:02:04.597
you don't have to worry about this and
it kind of works with a simple convention.

31
00:02:04.597 --> 00:02:09.535
But there are some really interesting
things that can happen in specific cases,

32
00:02:09.535 --> 00:02:13.029
and it can be a real headache
if you don't know what to do.

33
00:02:13.029 --> 00:02:15.400
And I'm gonna give you the medicine for
that headache.

34
00:02:15.400 --> 00:02:17.400
I'm gonna give you the way to do this.

35
00:02:17.400 --> 00:02:19.924
And I'm gonna give you
a way to do it that doesn't

36
00:02:19.924 --> 00:02:21.969
involve changing compiler settings.

37
00:02:21.969 --> 00:02:26.917
Which is sometimes undesirable,
particularly if you're building a library,

38
00:02:26.917 --> 00:02:27.434
right?

39
00:02:27.434 --> 00:02:31.943
Sometimes, enabling one of these compiler
settings to get your types to work,

40
00:02:31.943 --> 00:02:37.090
that will require anyone who consumes your
library to also enable those settings.

41
00:02:37.090 --> 00:02:39.280
So we'll talk about how
we can avoid doing that.

42
00:02:39.280 --> 00:02:44.041
There is a path to doing that and
we'll go over it.

43
00:02:44.041 --> 00:02:48.981
Next we'll talk about native
ES module support, and

44
00:02:48.981 --> 00:02:54.028
that is the idea of working with,
in your own project,

45
00:02:54.028 --> 00:02:58.660
a mix of CommonJS and
modern module formats.

46
00:02:58.660 --> 00:03:01.080
How do we interop between these?

47
00:03:01.080 --> 00:03:07.386
How do you import across those boundaries
and deal with these things side by side?

48
00:03:07.386 --> 00:03:11.000
And then, finally, we'll talk about
importing non-TypeScript things.

49
00:03:11.000 --> 00:03:15.928
So if you've used Webpack before, you
ever imported a CSS file or an image just

50
00:03:15.928 --> 00:03:20.573
to indicate that this thing should be
loaded for a particular component.

51
00:03:20.573 --> 00:03:23.989
Sometimes you import an image
in something like Webpack.

52
00:03:23.989 --> 00:03:27.029
If you have a file loader, Webpack plugin,

53
00:03:27.029 --> 00:03:31.880
it'll give you the URL of the image
that you can place somewhere.

54
00:03:31.880 --> 00:03:34.620
But how do we make
TypeScript happy with that?

55
00:03:34.620 --> 00:03:37.724
It's not a TypeScript file,
we still use the imports in Next.

56
00:03:37.724 --> 00:03:40.040
What do we need to do to make that work?

57
00:03:40.040 --> 00:03:45.080
So that's our modules and
CJS interop section here.

