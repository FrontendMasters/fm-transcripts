WEBVTT

1
00:00:00.159 --> 00:00:02.680
Let's talk about scopes and
type parameters.

2
00:00:02.680 --> 00:00:07.166
This one is not, I don't think it's
particularly difficult to understand.

3
00:00:07.166 --> 00:00:11.435
Because thankfully,
type params work just like variables.

4
00:00:11.435 --> 00:00:16.391
So here's an example of a function here.

5
00:00:16.391 --> 00:00:20.668
So we've got a function
here called eatApple and

6
00:00:20.668 --> 00:00:25.062
it takes a callback as its last argument,
right?

7
00:00:25.062 --> 00:00:27.763
And so we're gonna say,
receiveFruitBasket.

8
00:00:27.763 --> 00:00:28.906
That's another function.

9
00:00:28.906 --> 00:00:33.688
We're past a bowl, whatever a bowl means,
the types here aren't important.

10
00:00:33.688 --> 00:00:36.101
We're saying, thanks for the fruit basket.

11
00:00:36.101 --> 00:00:40.910
And in this scope,
you can access both, right?

12
00:00:40.910 --> 00:00:43.573
It's an argument passed to the function.

13
00:00:43.573 --> 00:00:49.415
In this callback here, bowl and
apple can both be accessed, right?

14
00:00:49.415 --> 00:00:53.502
You can always access
things in outer scopes, but

15
00:00:53.502 --> 00:01:00.000
you can't access things in a more
interscope compared to what you exist in.

16
00:01:00.000 --> 00:01:03.250
Like I can't access apple up here.

17
00:01:05.230 --> 00:01:09.422
All right,
let's look at the type param equivalent.

18
00:01:09.422 --> 00:01:10.847
So we've got a function here.

19
00:01:10.847 --> 00:01:14.946
Let's observe how it works first before
we start looking at how the function's

20
00:01:14.946 --> 00:01:15.505
defined.

21
00:01:15.505 --> 00:01:21.145
So I've got a tuple creator
that takes an argument and

22
00:01:21.145 --> 00:01:26.783
then it returns a function,
and I can pass an argument

23
00:01:26.783 --> 00:01:31.309
into that function, and what do I get out?

24
00:01:31.309 --> 00:01:35.571
3 and null, so I kind of like,
I start the topple by

25
00:01:35.571 --> 00:01:40.248
providing the first element and
it returns a function.

26
00:01:40.248 --> 00:01:45.470
And then I give this finish
tuple function a null and

27
00:01:45.470 --> 00:01:50.218
that becomes the second
element of the tuple.

28
00:01:50.218 --> 00:01:55.271
And look at this, I can say finish tuple
pass it a bunch of stuff and look at that.

29
00:01:55.271 --> 00:02:01.807
I get a number array here, so I'm kind of
reusing that three In two places, right?

30
00:02:01.807 --> 00:02:03.858
I can finish it as one tuple or

31
00:02:03.858 --> 00:02:08.145
I can finish it as this other
tuple with an array of numbers.

32
00:02:08.145 --> 00:02:10.379
So let's look at the function itself.

33
00:02:10.379 --> 00:02:13.605
It's pretty simple, we take an argument.

34
00:02:13.605 --> 00:02:17.736
We return a function,
that function takes an argument and

35
00:02:17.736 --> 00:02:20.785
this is what that inner function returns.

36
00:02:20.785 --> 00:02:24.512
It's just first and last, that's it.

37
00:02:24.512 --> 00:02:30.795
So note that up here,
if I were to create something like.

38
00:02:35.486 --> 00:02:36.138
Do that.

39
00:02:40.542 --> 00:02:42.913
There's no S up here.

40
00:02:42.913 --> 00:02:48.039
S is a type param that is only
related to this inner function.

41
00:02:48.039 --> 00:02:50.510
We can't use it in the outer scope.

42
00:02:50.510 --> 00:02:53.995
But in this inner function,
we can use both.

43
00:02:53.995 --> 00:02:59.127
Type params work just like
variables in terms of scoping.

44
00:02:59.127 --> 00:03:03.222
It's very common like you could have
a class that's generic over one thing and

45
00:03:03.222 --> 00:03:07.068
has a type param for that, and then
you could have particular methods that

46
00:03:07.068 --> 00:03:11.350
are generic over another thing, and you
could have one of those methods return yet

47
00:03:11.350 --> 00:03:15.172
another function that's generic
over something entirely different.

48
00:03:15.172 --> 00:03:19.195
You can have scopes with type params just
like you can have scopes over variable.

49
00:03:19.195 --> 00:03:21.427
They play by the same rules,

50
00:03:21.427 --> 00:03:26.266
thankfully because it makes it
easy to intuit how this works.

51
00:03:26.266 --> 00:03:29.260
It's not exceedingly common to see this,

52
00:03:29.260 --> 00:03:34.084
although I would say the most common
case is classes and methods, but

53
00:03:34.084 --> 00:03:40.181
this is sort of the functional programming
example here the inner and outer function.

54
00:03:42.055 --> 00:03:45.818
So let's talk about some best
practices around type params.

55
00:03:45.818 --> 00:03:49.772
We already have our HasId and
our dictionary interfaces, so

56
00:03:49.772 --> 00:03:51.950
I'm not gonna uncomment those.

57
00:03:51.950 --> 00:03:56.276
But what I'm gonna do is create
two different functions,

58
00:03:56.276 --> 00:04:00.349
their implementation,
line 109 and line 113.

59
00:04:00.349 --> 00:04:04.879
You can see those are the same functions
do the same thing at runtime, but

60
00:04:04.879 --> 00:04:07.714
their type params are defined differently.

61
00:04:07.714 --> 00:04:12.916
So up here, I'm saying T extends a HasId

62
00:04:12.916 --> 00:04:17.205
array and I take in a type param T.

63
00:04:17.205 --> 00:04:22.500
Here I'm saying, T extends HasId and

64
00:04:22.500 --> 00:04:25.816
I take in an array of Ts.

65
00:04:25.816 --> 00:04:30.345
Let's look at what happens when we
compare the results of these two things.

66
00:04:30.345 --> 00:04:35.290
So not super important what these
classes are, I just made some things for

67
00:04:35.290 --> 00:04:37.058
an interesting example.

68
00:04:37.058 --> 00:04:37.733
We have a payment.

69
00:04:37.733 --> 00:04:38.930
We have an invoice.

70
00:04:38.930 --> 00:04:43.502
It's just so I can have like two different
flavors of things that will not type check

71
00:04:43.502 --> 00:04:44.693
against each other.

72
00:04:44.693 --> 00:04:47.312
Here's result one with example one.

73
00:04:47.312 --> 00:04:50.916
Here's result two with example two and
just to remind,

74
00:04:50.916 --> 00:04:53.302
you example one is this one, right?

75
00:04:53.302 --> 00:04:58.339
It's the one that says,
T extends an array of HasIds.

76
00:04:58.339 --> 00:05:02.559
These both taking array T,
the list that comes in.

77
00:05:02.559 --> 00:05:03.818
It must be an array.

78
00:05:03.818 --> 00:05:06.987
In either case, there's the array
on the right side of the tooltip.

79
00:05:06.987 --> 00:05:08.757
There's the array on the right
side of the tooltip.

80
00:05:08.757 --> 00:05:10.590
It's just two different
ways of expressing this.

81
00:05:11.970 --> 00:05:13.248
Here's result one.

82
00:05:13.248 --> 00:05:18.685
It's an array of payment or invoice.

83
00:05:18.685 --> 00:05:22.726
So any position of that
array can be either,

84
00:05:22.726 --> 00:05:28.090
which is interesting and
then let's look at example two.

85
00:05:30.460 --> 00:05:34.170
So it's a list of payment or invoice.

86
00:05:34.170 --> 00:05:35.551
So here's the array over here.

87
00:05:35.551 --> 00:05:38.107
So we get a union type here.

88
00:05:38.107 --> 00:05:40.781
In both cases, it's just sort of like,

89
00:05:40.781 --> 00:05:44.330
does it end up also being
represented in the type RAM?

90
00:05:44.330 --> 00:05:47.820
Let's look at this one one more time.

91
00:05:47.820 --> 00:05:51.162
That's in both in either case,
but look at the return type here.

92
00:05:51.162 --> 00:05:55.949
HasId or undefined and then this one,

93
00:05:55.949 --> 00:06:00.295
payment or invoice or undefined?

94
00:06:00.295 --> 00:06:01.790
That's a big difference.

95
00:06:02.850 --> 00:06:07.514
Remember, we talked about how
the a good generic will that type

96
00:06:07.514 --> 00:06:12.713
information flow through it and
you will lose that type information.

97
00:06:12.713 --> 00:06:15.228
We're losing type information and

98
00:06:15.228 --> 00:06:20.265
example one HasId is a pretty lowest
common denominator type, right?

99
00:06:20.265 --> 00:06:23.043
It's just this thing with an id property.

100
00:06:23.043 --> 00:06:27.975
We can't treat these as instances of a
class even, certainly not as payments and

101
00:06:27.975 --> 00:06:29.160
invoices.

102
00:06:29.160 --> 00:06:34.542
So what's happening here is it

103
00:06:34.542 --> 00:06:42.201
has to do with what these
lists end up being.

104
00:06:42.201 --> 00:06:48.452
Up here, you can see that we regard
these as an array of HasIds.

105
00:06:48.452 --> 00:06:52.210
When pop returns,
it's HasId are undefined.

106
00:06:52.210 --> 00:06:56.833
That's what comes out of this function,
you don't see a T.

107
00:06:56.833 --> 00:07:02.314
I mean, you see T extends HasId there,
but the way pop is defined.

108
00:07:02.314 --> 00:07:06.868
It's sort of the lowest common
denominator that ends up flowing

109
00:07:06.868 --> 00:07:08.734
into this type over here.

110
00:07:08.734 --> 00:07:12.671
We've got an array of T's
when we pop we pop out a T.

111
00:07:16.274 --> 00:07:21.796
So my advice to you here is specify

112
00:07:21.796 --> 00:07:29.891
your constraints in the most
simple way you can.

113
00:07:29.891 --> 00:07:33.585
It turns out that there are two
constraints that we really want to apply

114
00:07:33.585 --> 00:07:34.596
to this argument.

115
00:07:34.596 --> 00:07:39.217
One is that it's got to be an array and
the other is that

116
00:07:39.217 --> 00:07:44.065
each member of the array has
to have an id property on it.

117
00:07:44.065 --> 00:07:46.304
And here we're trying to do too much,
I would argue.

118
00:07:46.304 --> 00:07:52.891
We're trying to say, let's put both
of those in the type param, right?

119
00:07:52.891 --> 00:07:55.822
Whereas here we're saying,
I'm just gonna talk about T.

120
00:07:55.822 --> 00:07:58.047
There is an array piece, but

121
00:07:58.047 --> 00:08:02.981
I can use the type of the argument
to capture that information.

122
00:08:02.981 --> 00:08:07.669
And so we're sort of trying to define
a type param constraint at the lowest

123
00:08:07.669 --> 00:08:11.147
possible level and
that maximizes the chance that type

124
00:08:11.147 --> 00:08:15.757
information will flow through your
generic functions or generic code in

125
00:08:15.757 --> 00:08:20.470
the way you would hope where there's
a minimal loss of type information.

