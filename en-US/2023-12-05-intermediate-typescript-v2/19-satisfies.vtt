WEBVTT

1
00:00:00.285 --> 00:00:04.999
So we've got a question
about the use of satisfies,

2
00:00:04.999 --> 00:00:10.571
which is a little bit,
it's not super related to this topic,

3
00:00:10.571 --> 00:00:15.740
but I can show you how satisfies
would work in an example.

4
00:00:15.740 --> 00:00:20.241
So let's say we had an interface

5
00:00:20.241 --> 00:00:25.244
ColorWithId and it extends HasId,

6
00:00:25.244 --> 00:00:29.925
and optionally, it has a color.

7
00:00:29.925 --> 00:00:33.497
This describes the type of what
we've been working with here.

8
00:00:33.497 --> 00:00:34.902
And let me grab one of these.

9
00:00:49.795 --> 00:00:53.790
Cool, so
this type checks as it should, right?

10
00:00:53.790 --> 00:00:58.629
It's got the Id,
that HasId wants us to have up here and

11
00:00:58.629 --> 00:01:01.796
it has the color from ColorWithId.

12
00:01:04.004 --> 00:01:04.743
Here's the problem.

13
00:01:14.592 --> 00:01:19.368
Good, man this code is trying
to help me too much today.

14
00:01:19.368 --> 00:01:23.417
I can't do this,
color is possibly undefined,

15
00:01:23.417 --> 00:01:28.470
it's possibly undefined
because of ColorWithId, right?

16
00:01:28.470 --> 00:01:33.607
It is possibly undefined if we
regard my color as this type,

17
00:01:33.607 --> 00:01:35.982
that's just the reality.

18
00:01:35.982 --> 00:01:40.962
Now, we could do this and
the error would go away, look at myColor.

19
00:01:40.962 --> 00:01:46.678
But now we've lost
the guarantee that this object

20
00:01:46.678 --> 00:01:51.860
satisfies the type, ColorWithId, right?

21
00:01:51.860 --> 00:01:53.336
We could do this.

22
00:01:57.241 --> 00:02:01.700
There's nothing here that's gonna
make sure that we include brightness.

23
00:02:01.700 --> 00:02:06.024
So this is now a value that at one
moment happens to satisfy the type, but

24
00:02:06.024 --> 00:02:07.476
they're not related.

25
00:02:07.476 --> 00:02:11.221
There's nothing in our code right
now that type checks for that.

26
00:02:11.221 --> 00:02:14.571
So the satisfies keyword lets us do this.

27
00:02:18.607 --> 00:02:21.255
We get the best of both worlds.

28
00:02:21.255 --> 00:02:26.267
So what we're saying here is,
if we look at myColor, look at that type.

29
00:02:26.267 --> 00:02:30.030
Color is there for sure,
that's why I can call substring on it.

30
00:02:30.030 --> 00:02:37.165
And here, we are type-checking
against the ColorWithId interface.

31
00:02:37.165 --> 00:02:41.800
Like, if I were to delete id or
rename this property,

32
00:02:41.800 --> 00:02:47.156
we're gonna get a type error saying,
you gotta give us an id,

33
00:02:47.156 --> 00:02:51.383
that's necessary to
conform to this type here.

34
00:02:51.383 --> 00:02:56.264
So what what's happening here is
we're kinda getting the benefit

35
00:02:56.264 --> 00:02:58.712
of an explicit type annotation.

36
00:02:58.712 --> 00:03:06.078
But we're also retaining the most
specific type that we can retain, right?

37
00:03:06.078 --> 00:03:11.788
That colour is a string, it's not
string or undefined, it's a string.

38
00:03:15.923 --> 00:03:20.696
&gt;&gt; How does that different from as?

39
00:03:20.696 --> 00:03:23.398
&gt;&gt; Good question,

40
00:03:23.398 --> 00:03:29.381
as it's casting,we could do that,

41
00:03:29.381 --> 00:03:34.979
it would get you some things here.

42
00:03:34.979 --> 00:03:37.183
What if we did this

43
00:03:42.356 --> 00:03:45.424
Yeah, this is interesting.

44
00:03:45.424 --> 00:03:50.765
So as is sort of forcibly regarding

45
00:03:50.765 --> 00:03:54.822
a type as this other type.

46
00:03:54.822 --> 00:04:01.781
So I'll tell you one thing, like you do
get a similar kind of type checking here

47
00:04:01.781 --> 00:04:07.168
with casting in that this has
to be a subtype of ColorWithId.

48
00:04:07.168 --> 00:04:11.850
But look what happened below,
like look at what we ended up with here.

49
00:04:11.850 --> 00:04:18.807
We still end up with ColorWithId, I would
call this using this as keyword oops.

50
00:04:18.807 --> 00:04:23.273
It's very, very similar to this,
almost identical.

51
00:04:24.975 --> 00:04:29.706
And the end result is color is undefined.

52
00:04:29.706 --> 00:04:33.428
You're saying here's my value,
regard it as this other thing.

53
00:04:33.428 --> 00:04:37.357
We do not preserve the most
specific possible type.

54
00:04:37.357 --> 00:04:42.077
We preserve exactly what we said
should be preserved, ColorWithId,

55
00:04:42.077 --> 00:04:43.998
represented as that thing.

56
00:04:43.998 --> 00:04:47.849
Regardless of whether we
know that there's something,

57
00:04:47.849 --> 00:04:50.344
we could even do this, if we did color

58
00:04:57.786 --> 00:05:00.779
Right, so here we could say,
this is green or blue or red.

59
00:05:00.779 --> 00:05:04.762
Right, but we assigned it green,
if we did satisfies,

60
00:05:09.795 --> 00:05:11.146
If I could spell satisfies.

61
00:05:13.865 --> 00:05:15.080
Just green.

62
00:05:15.080 --> 00:05:17.632
So it certainly conforms to the type,

63
00:05:17.632 --> 00:05:21.879
but we're retaining the most
specific thing we could retain.

64
00:05:21.879 --> 00:05:27.164
It is a ColorWithId, but
even more specialized.

65
00:05:27.164 --> 00:05:32.851
&gt;&gt; Does that update then when
you mutate the variable type?

66
00:05:32.851 --> 00:05:35.363
&gt;&gt; Can you put an update them in?

67
00:05:35.363 --> 00:05:40.292
&gt;&gt; So like, right now it's specified
to just be green because your first

68
00:05:40.292 --> 00:05:44.969
check on the interface and
then you check them later on being like,

69
00:05:44.969 --> 00:05:47.725
oay, so this is the most specific later

70
00:05:47.725 --> 00:05:52.214
on if you update to blue per se well then
&gt;&gt; Where would you like me to update

71
00:05:52.214 --> 00:05:53.083
it right here?

72
00:05:53.083 --> 00:05:58.753
Like, after your substring line,
like say you update

73
00:05:58.753 --> 00:06:03.693
myColor.color to blue,
will the type still.

74
00:06:08.574 --> 00:06:11.684
That's what I was curious about.

75
00:06:11.684 --> 00:06:17.467
So once, this goes back to I
began the fundamentals course

76
00:06:17.467 --> 00:06:23.264
by pointing out that variables
are born with their types.

77
00:06:23.264 --> 00:06:26.505
So once we create this,

78
00:06:26.505 --> 00:06:31.366
once it's green, that's green,

79
00:06:31.366 --> 00:06:36.725
inherently, we cannot give it a blue.

80
00:06:36.725 --> 00:06:40.191
And satisfies, sometimes we've done this.

81
00:06:43.271 --> 00:06:45.738
And that might do a similar thing here,
right?

82
00:06:45.738 --> 00:06:53.335
We're just saying, this is the way I want
it to be, it's a very specific thing.

83
00:06:53.335 --> 00:06:57.849
Make the most specific possible
assumptions you can make when

84
00:06:57.849 --> 00:07:00.291
figuring out what the types are.

85
00:07:00.291 --> 00:07:03.010
So it's similar in that respect.

86
00:07:03.010 --> 00:07:08.518
It's gonna kind of be, it's gonna be
very specific, but that's what you,

87
00:07:08.518 --> 00:07:13.861
that's what you are doing when you're
saying satisfies you're saying,

88
00:07:13.861 --> 00:07:16.573
type check it against this thing, but

89
00:07:16.573 --> 00:07:20.583
retain the most specific type
you can possibly retain.

90
00:07:20.583 --> 00:07:24.885
And it's almost the TypeScript is gonna,
like shrink wrap that thing,

91
00:07:24.885 --> 00:07:27.927
whatever it is,
it's pretty rigid at that point.

92
00:07:27.927 --> 00:07:35.493
But that's a feature here, that's part of
what you are aiming to do with satisfies.

93
00:07:35.493 --> 00:07:39.220
And if you didn't want that,
you would just say, ColorWithId.

94
00:07:39.220 --> 00:07:43.770
Now you have the flexibility,
you don't need to use that as

95
00:07:43.770 --> 00:07:48.323
an interesting little side trip there,
worth it for sure.

96
00:07:48.323 --> 00:07:53.411
So I want to just,
before we move on Just going back to

97
00:07:53.411 --> 00:07:59.670
this typerem quickly just want
to talk about this word extents.

98
00:07:59.670 --> 00:08:04.965
And this is used in more than one
place right like this is I've referred

99
00:08:04.965 --> 00:08:10.013
to this as a heritage clause right
when you use it for inheritance.

100
00:08:10.013 --> 00:08:15.809
Like class,
dog extends base class, animal.

101
00:08:15.809 --> 00:08:21.071
And I'm gonna make the argument that
they actually mean the same thing.

102
00:08:21.071 --> 00:08:28.878
What you're saying is, one thing is
a subtype of whatever it's extending.

103
00:08:28.878 --> 00:08:33.387
A dog is a subtype of an animal,

104
00:08:33.387 --> 00:08:36.687
all dogs are animals.

105
00:08:36.687 --> 00:08:39.994
Anyone wanna disagree with that statement?

106
00:08:39.994 --> 00:08:42.418
Good.

107
00:08:42.418 --> 00:08:47.514
Here, we're saying T
is a subtype of HasId,

108
00:08:47.514 --> 00:08:51.001
it might be exactly HasID, but

109
00:08:51.001 --> 00:08:55.303
it could be something more specific.

110
00:08:55.303 --> 00:08:59.488
It could be HasId, but
also has a color on it.

111
00:08:59.488 --> 00:09:01.608
So that may help help this click,

112
00:09:01.608 --> 00:09:07.009
there's another place where we're gonna
see this and that's conditional types.

113
00:09:07.009 --> 00:09:09.335
And it means the same thing there as well.

114
00:09:09.335 --> 00:09:16.760
So if we think back to our Mental model
of types representing sets of values,

115
00:09:16.760 --> 00:09:22.213
that means all the possible
things that T could be must be

116
00:09:22.213 --> 00:09:28.385
included in all the possible
objects that have an ID property.

117
00:09:28.385 --> 00:09:32.154
It's a way of specifying that requirement,

118
00:09:32.154 --> 00:09:36.030
T is a subset of HasId
it's a subtype of HasId.

