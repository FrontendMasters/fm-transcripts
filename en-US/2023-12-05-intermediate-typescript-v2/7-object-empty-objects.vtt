WEBVTT

1
00:00:00.250 --> 00:00:02.160
Let's talk about an almost top type.

2
00:00:04.760 --> 00:00:08.640
This type is called object,
like the word object.

3
00:00:10.480 --> 00:00:14.800
So there's a little bit of overloading
of terminology here in TypeScript.

4
00:00:15.880 --> 00:00:23.430
The object type represents the set of all
possible values except for primitives.

5
00:00:23.430 --> 00:00:28.670
So we can see here that it will accept an
object containing a field called status.

6
00:00:28.670 --> 00:00:31.148
It's not happy with the string,
it's not happy with null,

7
00:00:31.148 --> 00:00:32.370
it's happy with a function.

8
00:00:32.370 --> 00:00:37.300
A function is an object, it just
happens to have a call signature on it

9
00:00:37.300 --> 00:00:40.190
that we can invoke to call the function.

10
00:00:41.400 --> 00:00:43.300
I'd say this is almost a top type, right?

11
00:00:43.300 --> 00:00:47.291
The only things it can't be are number,
string, boolean,

12
00:00:47.291 --> 00:00:50.870
null, undefined, symbol, and big end.

13
00:00:50.870 --> 00:00:53.422
Those are all the primitives
in JavaScript.

14
00:00:53.422 --> 00:00:57.680
So it's like all possible values
except for seven kinds of things.

15
00:00:57.680 --> 00:01:02.160
So I told you that there's a little
bit of terminology overloading here.

16
00:01:03.220 --> 00:01:06.510
We have a type that is the word object,
but

17
00:01:06.510 --> 00:01:12.490
also sometimes people say interfaces
are used to describe object types.

18
00:01:12.490 --> 00:01:15.610
So these are not the same
thing in this context.

19
00:01:15.610 --> 00:01:20.302
So what we're doing here is we're creating
something here that has a union type

20
00:01:20.302 --> 00:01:21.480
baked into it.

21
00:01:21.480 --> 00:01:26.310
So I've got a success shaped thing,
and then a fail shaped thing and

22
00:01:26.310 --> 00:01:28.360
it could be either or.

23
00:01:28.360 --> 00:01:31.852
We know that we can't use
union types with interfaces,

24
00:01:31.852 --> 00:01:34.909
like an interface cannot
describe a union type.

25
00:01:36.100 --> 00:01:39.910
But if we look here,
val is of type object.

26
00:01:39.910 --> 00:01:43.830
And it's perfectly happy to receive this,
actually I should,

27
00:01:43.830 --> 00:01:47.220
just to make sure I'm being honest here.

28
00:01:47.220 --> 00:01:50.650
Sticking to my evidence based approach.

29
00:01:50.650 --> 00:01:57.100
There was some inference there that was
stopping us from seeing this for real.

30
00:01:59.320 --> 00:02:00.750
Yep, good, it's still valid.

31
00:02:00.750 --> 00:02:05.260
So here's response,
just to explain what I just said.

32
00:02:05.260 --> 00:02:09.521
TypeScript was being too clever and it was
saying, hey, I know you described that

33
00:02:09.521 --> 00:02:14.040
this is the type here, but but I also see
that you're just giving it this value.

34
00:02:14.040 --> 00:02:17.222
So I'm just gonna assume
it's this one shape, and

35
00:02:17.222 --> 00:02:22.310
when I hovered over this all we saw was
this, this this first piece, right?

36
00:02:22.310 --> 00:02:25.503
So now because I've casted it,

37
00:02:25.503 --> 00:02:31.181
we can actually see that
the union type is present here and

38
00:02:31.181 --> 00:02:34.980
assignment happens perfectly well.

39
00:02:36.030 --> 00:02:40.440
Val, which is of type object,
is perfectly happy to accept this.

40
00:02:40.440 --> 00:02:42.850
So don't get this confused.

41
00:02:42.850 --> 00:02:47.576
When we say interfaces
represent object types,

42
00:02:47.576 --> 00:02:53.001
that's different than this,
the type called object.

43
00:02:55.638 --> 00:02:58.672
The reason I'm making this point so
clearly is,

44
00:02:58.672 --> 00:03:00.970
some of you will get trolled by this.

45
00:03:00.970 --> 00:03:03.972
And maybe you'll remember
talking about this and

46
00:03:03.972 --> 00:03:06.626
it'll save you from spinning your wheels.

47
00:03:08.661 --> 00:03:12.500
So TypeScript considers
null not to be an object.

48
00:03:12.500 --> 00:03:16.490
I know that in JavaScript null is
an object to due to the historical bug.

49
00:03:18.752 --> 00:03:21.324
So let's check our tsconfig here.

50
00:03:21.324 --> 00:03:22.970
This would be the first thing I'd look at.

51
00:03:22.970 --> 00:03:25.340
I'm gonna turn off strict null checks.

52
00:03:26.880 --> 00:03:31.733
So whether or not null is
allowed in an object type, yep,

53
00:03:31.733 --> 00:03:36.587
whether or not null is allowed
in an object type just has to

54
00:03:36.587 --> 00:03:41.930
do with this strict null checks,
tsconfig settings.

55
00:03:41.930 --> 00:03:45.867
This setting here, if set to false,

56
00:03:45.867 --> 00:03:49.677
if there are no strict null checks,

57
00:03:49.677 --> 00:03:54.640
null is allowed as part
of any type you create.

58
00:03:56.320 --> 00:03:59.139
This is why you wanna enable this to true.

59
00:04:00.190 --> 00:04:05.871
So I would just say, object is not
special when it comes to null,

60
00:04:05.871 --> 00:04:11.029
the inclusion of null inside
of the values it represents,

61
00:04:11.029 --> 00:04:15.976
it works exactly the same as
you would expect strict null

62
00:04:15.976 --> 00:04:18.940
checks to behave in other cases.

63
00:04:18.940 --> 00:04:22.955
And there, you should see up here,
65, yep, it's erroring now.

64
00:04:24.922 --> 00:04:28.234
And this fits the previous
definition that I had, right?

65
00:04:28.234 --> 00:04:31.930
I said it can't,
it's not happy with primitive values.

66
00:04:31.930 --> 00:04:36.460
Null is one of the seven primitive
value types, undefined as well.

67
00:04:38.620 --> 00:04:39.259
Good question though.

68
00:04:43.560 --> 00:04:45.450
All right, one more almost top type.

69
00:04:45.450 --> 00:04:48.720
This is even topper than
the previous top type.

70
00:04:50.940 --> 00:04:53.900
So this,
I'm gonna overload this even more.

71
00:04:53.900 --> 00:04:56.740
I wish I had different terminology
to share with you, but

72
00:04:56.740 --> 00:04:58.050
this is the terminology.

73
00:04:59.250 --> 00:05:06.396
This type here, the open close brace,
this is called the empty object type.

74
00:05:06.396 --> 00:05:13.480
It is still different than the previous
two object type terms that I've described.

75
00:05:13.480 --> 00:05:17.840
It's not the one that pertains to
interfaces, it's not the word object.

76
00:05:17.840 --> 00:05:21.530
This is a third distinct thing.

77
00:05:21.530 --> 00:05:26.209
It's common to think that this is
interchangeable with that type that's

78
00:05:26.209 --> 00:05:28.040
called object.

79
00:05:28.040 --> 00:05:30.440
In many cases it is, but not all.

80
00:05:30.440 --> 00:05:36.840
So, what is the empty object
type allowed to accept?

81
00:05:36.840 --> 00:05:42.550
It is happy to accept all possible
values except null and undefined.

82
00:05:44.360 --> 00:05:48.922
So you can see here, we create a bunch of
different values up here and I've named

83
00:05:48.922 --> 00:05:53.230
them so that we don't have to stare at
these and understand them too much.

84
00:05:53.230 --> 00:05:55.840
The variable names describe what they are.

85
00:05:55.840 --> 00:06:00.280
So we create val2 which
is of type empty object.

86
00:06:01.350 --> 00:06:04.160
It accepts four, it accepts a string,
it accepts a date.

87
00:06:04.160 --> 00:06:05.660
It accepts a string or number.

88
00:06:05.660 --> 00:06:06.920
Here's a nullable string.

89
00:06:08.690 --> 00:06:11.940
And I'm gonna do, TypeScript
again getting super clever here.

90
00:06:11.940 --> 00:06:15.930
It's saying on line 78 I assigned it
to null, I'm gonna flip that around.

91
00:06:16.940 --> 00:06:18.474
Good guy TypeScript screwing me up.

92
00:06:23.250 --> 00:06:27.217
Good, I mean, it's still unhappy.

93
00:06:27.217 --> 00:06:29.580
It's funny how it was happy before.

94
00:06:29.580 --> 00:06:31.160
It's almost like the tooltip
was lying to me.

95
00:06:32.630 --> 00:06:35.460
Like this, it knows it was null,
that's why.

96
00:06:36.628 --> 00:06:38.660
I hate to say, oops sorry.

97
00:06:38.660 --> 00:06:44.428
I hate to think what would
happen if I did this.

98
00:06:49.400 --> 00:06:55.210
This is where we would have gotten
screwed up, what if I do this?

99
00:06:59.396 --> 00:07:04.556
All right, now it's, all right,
you've set this to null now.

100
00:07:04.556 --> 00:07:08.679
Maybe it's saying, I see what you
initialized it to and I don't see any code

101
00:07:08.679 --> 00:07:12.820
that could have possibly changed
this value between here and there.

102
00:07:12.820 --> 00:07:19.340
And so I can say it's a string, but
here we're actually getting the null case.

103
00:07:19.340 --> 00:07:21.590
It's now confident, I see the null.

104
00:07:21.590 --> 00:07:23.700
I know it's null.

105
00:07:23.700 --> 00:07:28.332
But in any case,
I hope you get the point here that it's

106
00:07:28.332 --> 00:07:32.880
anything that has
the possibility of being null.

107
00:07:32.880 --> 00:07:36.431
And here's object.a,
which that's an optional property,

108
00:07:36.431 --> 00:07:39.160
it has the potential to be undefined.

109
00:07:39.160 --> 00:07:42.770
The empty object type
is not happy with that.

110
00:07:42.770 --> 00:07:45.730
Undefined is not assignable
to empty object.

111
00:07:45.730 --> 00:07:49.650
A null is not assignable to empty object.

112
00:07:49.650 --> 00:07:51.030
So that's the empty object type.

113
00:07:51.030 --> 00:07:55.752
I say it's even more even closer
to a top type than the type called

114
00:07:55.752 --> 00:08:00.900
object because that wasn't happy
with any primitives, right?

115
00:08:00.900 --> 00:08:04.480
Now we're even more accepting
of different kinds of values.

116
00:08:04.480 --> 00:08:06.970
We can take strings, we can take numbers.

117
00:08:06.970 --> 00:08:10.888
We can take a big ends, we can take
symbols, we can take Boolean values,

118
00:08:10.888 --> 00:08:11.930
a lot more things.

119
00:08:11.930 --> 00:08:16.843
So this is this is a more expansive,
an accepting type.

120
00:08:21.354 --> 00:08:27.389
A practical use of this type cuz I may
feel like I'm throwing a bunch of things.

121
00:08:27.389 --> 00:08:31.130
It's like we got all these things on
the menu, what do I use them for?

122
00:08:31.130 --> 00:08:33.180
Empty object is actually quite useful.

123
00:08:33.180 --> 00:08:38.470
So here we have a bunch of
different example types.

124
00:08:38.470 --> 00:08:42.550
We've got one that's
a number without undefined.

125
00:08:42.550 --> 00:08:47.090
It's just got the empty object or null.

126
00:08:47.090 --> 00:08:53.100
This one is with undefined, so
it's empty object or null or undefined.

127
00:08:53.100 --> 00:08:55.120
And then here's an unknown.

128
00:08:55.120 --> 00:09:00.972
So what we can see here is
the fact that this is unknown,

129
00:09:00.972 --> 00:09:06.120
we can't assign that to this value here.

130
00:09:06.120 --> 00:09:07.300
Why do we think that is?

131
00:09:07.300 --> 00:09:09.930
So this could be anything.

132
00:09:09.930 --> 00:09:13.090
In terms of the values it could accept,
it could be anything.

133
00:09:13.090 --> 00:09:16.020
What's the problem here?

134
00:09:17.930 --> 00:09:19.960
&gt;&gt; If it's undefined, it wouldn't work.

135
00:09:19.960 --> 00:09:24.610
&gt;&gt; If there's literally one
value in JavaScript undefined,

136
00:09:24.610 --> 00:09:30.100
that unknown could include which
empty object or null does not allow.

137
00:09:31.180 --> 00:09:32.460
That's very good.

138
00:09:32.460 --> 00:09:35.620
The error message doesn't say undefined,
but that's it.

139
00:09:35.620 --> 00:09:40.407
And look down here,
now empty object or null or undefined,

140
00:09:40.407 --> 00:09:42.819
now we're back to a top type.

141
00:09:44.280 --> 00:09:47.510
Remember empty object,
it's everything except null and undefined.

142
00:09:47.510 --> 00:09:52.560
We've added those back in, and now this
is perfectly happy to accept an unknown.

143
00:09:54.170 --> 00:09:55.440
So that's kind of interesting.

144
00:09:57.530 --> 00:10:00.110
I mean, it's interesting,
it's not useful yet.

145
00:10:00.110 --> 00:10:01.640
All right, let's look at a scenario.

146
00:10:01.640 --> 00:10:03.420
Let's say we have something like this.

147
00:10:03.420 --> 00:10:05.650
It's a nullable string or number.

148
00:10:05.650 --> 00:10:09.730
And I'm using the word nullable here
to mean it could be null or undefined.

149
00:10:09.730 --> 00:10:16.049
It could be something that indicates
value is missing or value is not present.

150
00:10:18.120 --> 00:10:23.603
We can use an intersection
type with the empty object

151
00:10:23.603 --> 00:10:29.930
to effectively remove null and
undefined from a type.

152
00:10:29.930 --> 00:10:32.220
This is a very, very useful type.

153
00:10:32.220 --> 00:10:35.838
You can use it to remove nullability

154
00:10:39.649 --> 00:10:43.554
You wouldn't be able to do this with
a truthy falsey check cuz of course,

155
00:10:43.554 --> 00:10:45.488
you can have empty string and zero.

156
00:10:45.488 --> 00:10:47.580
But this lets you remove nullability.

157
00:10:47.580 --> 00:10:52.303
It's as if we narrowed in a condition
where you said, all right, is the subject,

158
00:10:52.303 --> 00:10:55.657
as long as it's not type of
the subject is not undefined and

159
00:10:55.657 --> 00:10:57.522
type of this object is not null.

160
00:10:59.300 --> 00:11:04.208
Here's a block of code I want you to
execute and you'd get string or number.

161
00:11:04.208 --> 00:11:09.148
There's a utility type,
I think it's called non nullable,

162
00:11:09.148 --> 00:11:11.240
let's test this theory.

163
00:11:14.320 --> 00:11:22.546
See I said the word test, There it is.

164
00:11:22.546 --> 00:11:24.480
And let's look at
the definition of this site.

165
00:11:25.510 --> 00:11:29.947
Hey, look at that, it takes in a type or
M, it intersects it with empty object,

166
00:11:29.947 --> 00:11:30.756
there you go.

167
00:11:34.085 --> 00:11:37.033
So I promised we'd cover
a bunch of utility types,

168
00:11:37.033 --> 00:11:39.234
you need to understand how they work.

169
00:11:39.234 --> 00:11:40.430
There you go.

170
00:11:40.430 --> 00:11:46.620
Sometimes it's useful to intersect types
to just remove a piece of that type.

171
00:11:46.620 --> 00:11:52.790
That's these almost top types,
sometimes it's useful.

172
00:11:52.790 --> 00:11:54.000
Look what happens here.

173
00:11:55.460 --> 00:11:58.130
Who thinks they know what
the result is gonna be here?

174
00:11:59.290 --> 00:12:00.907
What does intersecting with any do?

175
00:12:06.349 --> 00:12:13.941
This is safe, sorry,
we went to any, it's not the same.

176
00:12:13.941 --> 00:12:17.496
We intersected with any and
so now we're at any.

177
00:12:17.496 --> 00:12:19.400
That's confusing.

178
00:12:19.400 --> 00:12:21.387
&gt;&gt; [LAUGH]
&gt;&gt; All right,

179
00:12:21.387 --> 00:12:23.626
we're just gonna move on here.

180
00:12:23.626 --> 00:12:26.344
&gt;&gt; [LAUGH]
&gt;&gt; This feels like we're going down

181
00:12:26.344 --> 00:12:29.760
the rabbit hole, but
it was any anyways, was it?

182
00:12:29.760 --> 00:12:34.010
This was not any,
I have an explanation here for you.

183
00:12:34.010 --> 00:12:37.221
When we intersected
with empty object type,

184
00:12:37.221 --> 00:12:42.469
we removed the things that were
incompatible with the empty object type.

185
00:12:44.680 --> 00:12:49.522
Here, we're removing the things
that are incompatible with any, and

186
00:12:49.522 --> 00:12:52.340
there's nothing there, right?

187
00:12:52.340 --> 00:12:53.900
There's nothing to remove.

188
00:12:53.900 --> 00:12:57.880
I kind of feel like I would prefer to see
string or number on null or undefined.

189
00:12:57.880 --> 00:13:00.340
But you could think of it that way.

190
00:13:00.340 --> 00:13:04.416
I kind of expected this to be a no op and
instead it's a,

191
00:13:04.416 --> 00:13:07.440
any kind of consumes everything there.

192
00:13:08.830 --> 00:13:11.280
Anyway, we don't have to understand that,
we'll move on.

193
00:13:11.280 --> 00:13:13.460
It broke my too, so don't worry.

