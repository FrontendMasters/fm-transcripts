WEBVTT

1
00:00:00.160 --> 00:00:06.860
Let's continue our
exploration of utility types.

2
00:00:06.860 --> 00:00:11.252
So, we'll talk about this
one called parameters.

3
00:00:11.252 --> 00:00:17.112
This is actually a generalized
version of what we just wrote,

4
00:00:17.112 --> 00:00:22.533
where we extract the types of
the argument of a function.

5
00:00:22.533 --> 00:00:26.192
In this case, instead of giving
us just the first argument,

6
00:00:26.192 --> 00:00:29.505
it's gonna give us a tupple
of all the argument types.

7
00:00:29.505 --> 00:00:32.979
So, as usual, I have my underscore here,
it only exists so

8
00:00:32.979 --> 00:00:36.183
that we don't collide with
the real parameters type.

9
00:00:36.183 --> 00:00:40.450
But take my word for it, this is the type,
this is how it's described.

10
00:00:40.450 --> 00:00:44.647
And here I have written
out in some more plain

11
00:00:44.647 --> 00:00:49.420
language what all of this means,
piece by piece.

12
00:00:49.420 --> 00:00:54.454
So first off,
parameters takes in a type parameter T,

13
00:00:54.454 --> 00:00:59.378
which extends,
meaning T must be a subtype of any kind

14
00:00:59.378 --> 00:01:03.647
of function that has any
number of arguments,

15
00:01:03.647 --> 00:01:08.701
any return value,
that's the minimum requirement.

16
00:01:08.701 --> 00:01:13.737
You cannot say parameters of a number or

17
00:01:13.737 --> 00:01:16.946
parameters of a string.

18
00:01:19.304 --> 00:01:23.013
So that's the type param constraint here,
and

19
00:01:23.013 --> 00:01:27.463
this is the most flexible
function type you can imagine,

20
00:01:27.463 --> 00:01:33.041
any number of arguments that are of
any type, and it returns anything.

21
00:01:33.041 --> 00:01:35.939
Okay, now let's look at
what this evaluates out to.

22
00:01:35.939 --> 00:01:41.181
So we have a conditional type here,
T must be a subtype

23
00:01:41.181 --> 00:01:46.085
of here's that any function type again,
right?

24
00:01:46.085 --> 00:01:51.585
Remember when we see infer
P with no constraint here,

25
00:01:51.585 --> 00:01:56.361
this does not have this
infer S extend string.

26
00:01:56.361 --> 00:02:02.676
This is what a type an infer type
parameter with a constraint looks like,

27
00:02:02.676 --> 00:02:06.721
and down there,
we see nothing after infer P.

28
00:02:06.721 --> 00:02:09.252
So this P could be anything.

29
00:02:09.252 --> 00:02:15.748
What we wanna do is tease out and
extract this.

30
00:02:15.748 --> 00:02:23.365
P is a tuple representing the rest param
of all the arguments of the function.

31
00:02:23.365 --> 00:02:28.045
And if we extract that out,
it means the condition is met, and

32
00:02:28.045 --> 00:02:31.833
we emit P, that tuple,
otherwise we emit never.

33
00:02:36.750 --> 00:02:39.463
Here's another one, very, very similar.

34
00:02:39.463 --> 00:02:42.405
This one gives you the return
type of a function.

35
00:02:45.505 --> 00:02:52.267
T extends any kind of function with
any argument types, any return value.

36
00:02:52.267 --> 00:02:56.644
As long as T matches something
that looks like a call signature,

37
00:02:56.644 --> 00:03:01.279
I don't really care about the argument
types, it can be whatever.

38
00:03:01.279 --> 00:03:07.395
But whenever it returns,
give me that return type,

39
00:03:07.395 --> 00:03:11.984
and hold it for me in a type parameter R.

40
00:03:11.984 --> 00:03:16.634
And in the event that you
successfully met the condition, and

41
00:03:16.634 --> 00:03:21.564
got that type parameter R,
give it to me, otherwise return any.

42
00:03:27.625 --> 00:03:28.434
Here's some more.

43
00:03:28.434 --> 00:03:29.203
It's more of the same.

44
00:03:29.203 --> 00:03:34.061
This is why I'm not having us go through
building each one of these piece by piece.

45
00:03:34.061 --> 00:03:35.972
I'll just point out the differences here.

46
00:03:35.972 --> 00:03:40.467
Instance type,
the only thing new here is this.

47
00:03:40.467 --> 00:03:44.488
It's not a call signature now,
it's a construct signature.

48
00:03:44.488 --> 00:03:47.833
And this word abstract is here
because TypeScript allows for

49
00:03:47.833 --> 00:03:51.769
something called abstract classes,
you can think of them as half class

50
00:03:51.769 --> 00:03:55.324
half/interface where pieces of
the class may not be filled in.

51
00:03:55.324 --> 00:04:00.006
Abstract classes are not
directly instantiatable, but

52
00:04:00.006 --> 00:04:04.200
they can have constructor
signatures rather, and

53
00:04:04.200 --> 00:04:08.883
it's a subclass's responsibility
to conform to that to

54
00:04:08.883 --> 00:04:13.778
make sure that they are type
equivalent to that signature.

55
00:04:13.778 --> 00:04:17.723
And so you could think of this as
like the most flexible type of class.

56
00:04:17.723 --> 00:04:25.076
Abstract classes will work with this
as well as non-abstract classes, right?

57
00:04:25.076 --> 00:04:29.077
This is sort of think of all classes or

58
00:04:29.077 --> 00:04:34.240
classes that are not abstract or
a subtype of all

59
00:04:34.240 --> 00:04:40.195
the possible classes,
some of which may be abstract.

60
00:04:40.195 --> 00:04:42.155
This is maximum flexibility here.

61
00:04:42.155 --> 00:04:46.255
We don't care about the arguments passed
to the constructor, we don't care

62
00:04:46.255 --> 00:04:50.305
about what it instantiates here in
terms of the type parameter constraint.

63
00:04:50.305 --> 00:04:53.608
But look down in the condition,
we've got something that looks

64
00:04:53.608 --> 00:04:57.159
very similar except we're grabbing
what the constructor returns,

65
00:04:57.159 --> 00:04:59.133
which is gonna be that instance type.

66
00:04:59.133 --> 00:05:02.712
And then we return it, otherwise any.

67
00:05:02.712 --> 00:05:06.768
This looks so
close to what we just did up here,

68
00:05:06.768 --> 00:05:10.630
it's just literally adding abstract new.

69
00:05:10.630 --> 00:05:14.492
All right, and
these two I'm gonna put together.

70
00:05:14.492 --> 00:05:20.377
We talked a little bit about this in
types of fundamentals, this type, right?

71
00:05:20.377 --> 00:05:25.427
If you have functions that need
a specific thing to be set for

72
00:05:25.427 --> 00:05:30.687
this, this extracts out whatever
this type is of a function.

73
00:05:30.687 --> 00:05:36.652
And if it's successful it'll spit it out,
otherwise it'll evaluate to unknown.

74
00:05:36.652 --> 00:05:40.806
And this one here,
it creates a type for a function.

75
00:05:40.806 --> 00:05:43.279
This one's actually quite interesting.

76
00:05:43.279 --> 00:05:48.746
Given a function,
it will create a function

77
00:05:48.746 --> 00:05:53.623
type that has the original functions,

78
00:05:53.623 --> 00:05:56.446
this type, removed.

79
00:05:56.446 --> 00:06:01.366
And this involves a couple of steps, so
let's look at this one more closely.

80
00:06:01.366 --> 00:06:03.752
So omit this parameter.

81
00:06:03.752 --> 00:06:08.203
First of all, there's no constraint on
this type parameter, which is interesting.

82
00:06:08.203 --> 00:06:13.358
And here we're saying if unknown

83
00:06:13.358 --> 00:06:19.256
extends ThisParameterType T emit T.

84
00:06:19.256 --> 00:06:23.597
So let's use our subtype language here.

85
00:06:23.597 --> 00:06:28.764
We're saying, if unknown is
a subtype of the this parameter

86
00:06:28.764 --> 00:06:33.945
of a function,
that effectively means that it's unknown.

87
00:06:33.945 --> 00:06:37.100
It means that this parameter is unknown.

88
00:06:39.176 --> 00:06:43.294
Right, cuz this is the top type,
I guess it could be any as well.

89
00:06:43.294 --> 00:06:48.293
But when we're saying a top type
is a subtype of whatever I've got,

90
00:06:48.293 --> 00:06:51.287
that has to be another top type, right?

91
00:06:51.287 --> 00:06:54.079
This type must fit inside
this type over here, and

92
00:06:54.079 --> 00:06:57.610
everything in JavaScript is in
this type over here on the left.

93
00:06:57.610 --> 00:07:04.276
So it's got to be a top type,
and if so, we emit T.

94
00:07:04.276 --> 00:07:10.656
All right, in the case where that doesn't
happen, we're gonna say, all right,

95
00:07:10.656 --> 00:07:16.692
if T is a function signature of some sort,
we're gonna do a double infer here.

96
00:07:16.692 --> 00:07:17.730
Look at this.

97
00:07:17.730 --> 00:07:22.354
We're gonna tease out the arguments and
we're gonna get the return type as well.

98
00:07:22.354 --> 00:07:23.889
And all we're gonna do,

99
00:07:23.889 --> 00:07:28.290
is we're gonna build a new function
type using those two ingredients.

100
00:07:28.290 --> 00:07:29.394
What's missing?

101
00:07:29.394 --> 00:07:33.571
We did not extract out this
type as if we'd done this here.

102
00:07:38.483 --> 00:07:41.894
We didn't do that,
we didn't grab this piece,

103
00:07:41.894 --> 00:07:46.150
we could do it down here,
it would defeat the whole purpose.

104
00:07:46.150 --> 00:07:51.625
Now we're just passing this function's,
sorry, I need an infer.

105
00:07:51.625 --> 00:07:55.815
Now we're literally just passing the
function type straight through as a whole.

106
00:07:55.815 --> 00:08:01.790
But the fact that we're not grabbing
the this type, and we're reconstructing

107
00:08:01.790 --> 00:08:07.051
a new function type using the same
arguments and the same return type,

108
00:08:07.051 --> 00:08:12.965
that means we've effectively dropped
this type, we've omitted this type.

109
00:08:12.965 --> 00:08:16.474
And once we've done that, we emit that.

110
00:08:16.474 --> 00:08:21.829
And if T does not extend this,
we allow T to pass straight through.

111
00:08:21.829 --> 00:08:25.651
But if you think about this and look
through this a little bit more closely on

112
00:08:25.651 --> 00:08:29.667
your own time, you will realize that
this is actually an unreachable branch.

113
00:08:29.667 --> 00:08:34.474
And it has to do with the fact that, oops.

114
00:08:37.873 --> 00:08:42.772
It has to do with the fact that
you essentially would not be

115
00:08:42.772 --> 00:08:45.029
a function by this point.

116
00:08:45.029 --> 00:08:50.057
And if we look at this parameter
type here, you've already

117
00:08:50.057 --> 00:08:54.995
got a check here that states
that this has to be a function.

118
00:08:54.995 --> 00:08:59.667
So, it's almost for
that very last branch at the bottom.

119
00:08:59.667 --> 00:09:04.075
You already validated everything
that was possible to validate here,

120
00:09:04.075 --> 00:09:08.194
you don't have to return T here,
you could just return whatever.

121
00:09:08.194 --> 00:09:09.068
As far as I can tell,

122
00:09:09.068 --> 00:09:12.423
it's just impossible to actually make
this evaluate out to that last thing.

123
00:09:12.423 --> 00:09:14.120
So those are a few more utility types.

