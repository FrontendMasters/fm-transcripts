WEBVTT

1
00:00:00.430 --> 00:00:04.460
All right, let's talk a little bit
about filtering properties out.

2
00:00:04.460 --> 00:00:07.884
And this is actually the last
section of this unit.

3
00:00:10.056 --> 00:00:15.670
So, we'll go back to filtering
things out of an existing type.

4
00:00:15.670 --> 00:00:21.050
So in this case, it's the document object,
as in, window.document.

5
00:00:21.050 --> 00:00:22.370
So we can get keys here.

6
00:00:24.040 --> 00:00:25.870
Keys that begin with query.

7
00:00:25.870 --> 00:00:28.040
It's query anything,
that's what this means.

8
00:00:28.040 --> 00:00:29.560
Query followed by string.

9
00:00:30.690 --> 00:00:37.550
So we're gonna extract the keys of the
document type which match this pattern.

10
00:00:37.550 --> 00:00:42.110
Again Ls in chat you're
asking about regex's.

11
00:00:42.110 --> 00:00:43.671
Little regex, right?

12
00:00:43.671 --> 00:00:49.538
You can you can specify a prefix and
then a wildcard can do everything,

13
00:00:49.538 --> 00:00:53.430
in first kind of like capture groups,
right?

14
00:00:53.430 --> 00:00:57.940
I mean, you can serve,
maybe this is a regex, who knows?

15
00:00:57.940 --> 00:01:00.400
So, let's look at what we've got here.

16
00:01:00.400 --> 00:01:02.070
We've got keyFilteredDuck.

17
00:01:03.820 --> 00:01:06.440
Interesting, everything starts with query.

18
00:01:06.440 --> 00:01:07.280
That's pretty great.

19
00:01:08.910 --> 00:01:12.840
So, this is kind of what
we would hope to get.

20
00:01:12.840 --> 00:01:15.220
Here's an example of what not to do.

21
00:01:15.220 --> 00:01:18.189
And we're gonna compare it to what
worked out pretty well for us just now.

22
00:01:19.370 --> 00:01:23.429
So, it's a different approach here,

23
00:01:23.429 --> 00:01:27.860
where we are not filtering the keys first.

24
00:01:27.860 --> 00:01:31.679
Here what we're doing is we're saying,

25
00:01:31.679 --> 00:01:37.098
iterate over all keys
present in keyof Document.

26
00:01:37.098 --> 00:01:43.140
And then as the value type here,
we have a conditional type.

27
00:01:44.190 --> 00:01:48.689
So we're saying, all right,
for each key in Document,

28
00:01:48.689 --> 00:01:52.810
if Document extends and
then what is this here?

29
00:01:52.810 --> 00:01:56.906
It is a function that
accepts any arguments and

30
00:01:56.906 --> 00:02:01.670
returns either an element or
an array of elements.

31
00:02:01.670 --> 00:02:02.990
We don't care what the arguments are.

32
00:02:02.990 --> 00:02:07.251
But the filter here is only those
functions that return an element or

33
00:02:07.251 --> 00:02:08.680
an array of elements.

34
00:02:08.680 --> 00:02:13.236
I tried to keep it in spirit with things
that begin with the word query on Document

35
00:02:13.236 --> 00:02:15.490
cuz that's querying the DOM, right?

36
00:02:15.490 --> 00:02:20.010
These are like, give me all the things to
get like one element or many elements.

37
00:02:20.010 --> 00:02:25.980
And then if that condition is met,
here we are using Document[K], right?

38
00:02:25.980 --> 00:02:28.460
That's kind of like this thing up here.

39
00:02:28.460 --> 00:02:32.230
It effectively means,
let that thing pass through.

40
00:02:32.230 --> 00:02:35.590
Give me the value type that was there,
otherwise, give me never.

41
00:02:37.600 --> 00:02:39.264
Let's look at how that turned out.

42
00:02:45.068 --> 00:02:48.860
Look at that junk,
look at all those nevers.

43
00:02:48.860 --> 00:02:53.535
There are 249 more things here, and yes,
query selector is gonna be there and

44
00:02:53.535 --> 00:02:56.200
it's gonna have the correct type.

45
00:02:56.200 --> 00:02:59.943
But we didn't filter the keys,

46
00:02:59.943 --> 00:03:05.487
what you wanna do is filter
the keys in advance,

47
00:03:05.487 --> 00:03:09.380
as we're doing up here, right?

48
00:03:09.380 --> 00:03:12.926
We extracted the keys that
met a particular condition,

49
00:03:12.926 --> 00:03:15.730
and then put them through the map type.

50
00:03:15.730 --> 00:03:18.684
This is similar to array.map, right?

51
00:03:18.684 --> 00:03:23.260
You're gonna get something
out of the array.map.

52
00:03:23.260 --> 00:03:26.590
It's the same length of
the array that you put in.

53
00:03:26.590 --> 00:03:28.670
That's how mapping works.

54
00:03:30.030 --> 00:03:33.438
If you want it to filter and
then map, you do them in that order.

55
00:03:33.438 --> 00:03:37.071
But if you want as your mapping,
to try to filter things out,

56
00:03:37.071 --> 00:03:41.074
it's almost like the best you could
do is set things equal to null.

57
00:03:41.074 --> 00:03:45.676
You're gonna end up with a bunch of
nulls in the array and then, okay,

58
00:03:45.676 --> 00:03:50.910
now we've gotta go filter all those
nulls out, it's kind of a pain.

59
00:03:50.910 --> 00:03:56.600
So these are two ways of doing this, but
clearly, first of all, this is less code.

60
00:03:56.600 --> 00:03:58.640
This is much easier to debug.

61
00:03:58.640 --> 00:04:03.272
But this is a mistake people make
sometimes where you gotta remember

62
00:04:03.272 --> 00:04:08.420
a map type, it's you're gonna get
generally the same keys you put in.

63
00:04:08.420 --> 00:04:11.170
You're going to get
those as properties out.

64
00:04:11.170 --> 00:04:13.460
You're gonna get one for each.

65
00:04:13.460 --> 00:04:18.286
And the fact that we haven't
filtered here means well it has

66
00:04:18.286 --> 00:04:23.112
the same number of properties
as the full document object,

67
00:04:23.112 --> 00:04:27.085
but most of it's just not useful and
not usable.

68
00:04:27.085 --> 00:04:31.233
This will slow down your TypeScript
compilation because it's gotta think about

69
00:04:31.233 --> 00:04:34.527
all these fields that are there,
and they're read-only, and

70
00:04:34.527 --> 00:04:38.375
they're of type never, and type checking
against this is gonna be a pain.

71
00:04:38.375 --> 00:04:44.633
So that's my advice there, and
here's filtering the keys first.

72
00:04:44.633 --> 00:04:46.248
I think we already had this up top.

73
00:04:53.321 --> 00:04:57.004
I think this is just an abbreviated,
sorry,

74
00:04:57.004 --> 00:05:00.874
this is an abbreviated
version of the general case.

75
00:05:00.874 --> 00:05:03.929
So up here we're using Document, right?

76
00:05:03.929 --> 00:05:08.069
Document's hard-coded into our type and

77
00:05:08.069 --> 00:05:12.554
down here,
this we're just calling it we're

78
00:05:12.554 --> 00:05:17.158
calling it T is that type and
U is the set of keys.

79
00:05:17.158 --> 00:05:21.852
And this is an example of
the ability to filter keys.

80
00:05:21.852 --> 00:05:26.057
So for each key in T, if the value type

81
00:05:26.057 --> 00:05:31.082
extends something you're interested in,

82
00:05:31.082 --> 00:05:37.751
return the property name,
otherwise evaluate to never.

83
00:05:37.751 --> 00:05:43.252
&gt;&gt; It was some time ago they
introduced a new way of operating on

84
00:05:43.252 --> 00:05:48.541
the how you're iterating over
the key of or the keys of T.

85
00:05:48.541 --> 00:05:56.230
Where you can put a filtering expression
before the right square bracket and

86
00:05:56.230 --> 00:06:01.875
cast something, using the as keyword,
you can use T and

87
00:06:01.875 --> 00:06:06.079
P to determine whether
to return the key or

88
00:06:06.079 --> 00:06:10.470
never, and that sort of prefilters.

89
00:06:10.470 --> 00:06:12.780
&gt;&gt; Really.
&gt;&gt; You're projecting into.

90
00:06:12.780 --> 00:06:14.240
&gt;&gt; I honestly have never seen that.

91
00:06:14.240 --> 00:06:16.560
Can you help us get to that syntax here?

92
00:06:17.610 --> 00:06:22.339
&gt;&gt; Sure.
&gt;&gt; So the value filtered doc the bad way.

93
00:06:23.820 --> 00:06:25.902
&gt;&gt; Yeah let's start here
&gt;&gt; And refactor that.

94
00:06:25.902 --> 00:06:26.713
&gt;&gt; Let's do it.

95
00:06:26.713 --> 00:06:30.389
&gt;&gt; If you take the Documents
[K] extends blah blah blah.

96
00:06:30.389 --> 00:06:31.083
&gt;&gt; Over here.

97
00:06:31.083 --> 00:06:33.160
&gt;&gt; Never
&gt;&gt; Yep.

98
00:06:33.160 --> 00:06:40.080
&gt;&gt; So take take that whole block and
cut it.

99
00:06:40.080 --> 00:06:45.180
Then we're gonna wanna paste
inside that square bracket,

100
00:06:45.180 --> 00:06:48.140
just after keyof Document, yep.

101
00:06:49.906 --> 00:06:51.290
&gt;&gt; This whole thing.

102
00:06:51.290 --> 00:06:51.996
&gt;&gt; Yep.
&gt;&gt; Wow.

103
00:06:51.996 --> 00:06:53.853
&gt;&gt; So as paste.

104
00:06:57.393 --> 00:06:58.197
And then as.

105
00:06:58.197 --> 00:06:59.962
&gt;&gt; And the ternary we should take out.

106
00:06:59.962 --> 00:07:05.599
&gt;&gt; Instead of returning Documents[K],
just return K on 152.

107
00:07:05.599 --> 00:07:10.659
&gt;&gt; So but we really want
a conditional here or do we want.

108
00:07:13.208 --> 00:07:16.446
Sorry, I don't understand
&gt;&gt; So on 150,

109
00:07:16.446 --> 00:07:20.230
it'll probably make sense as soon as
we finish and clean up the syntax.

110
00:07:20.230 --> 00:07:21.352
&gt;&gt; Okay.
&gt;&gt; It's a little busted.

111
00:07:21.352 --> 00:07:21.888
&gt;&gt; Let's do it Document[K].

112
00:07:21.888 --> 00:07:28.480
&gt;&gt; Yep and then on 152,
Documents[K] should just be K.

113
00:07:28.480 --> 00:07:31.660
Cuz what we wanna do is
prefilter all the keys.

114
00:07:31.660 --> 00:07:32.660
&gt;&gt; Holy cow.

115
00:07:32.660 --> 00:07:33.194
&gt;&gt; Yeah.

116
00:07:33.194 --> 00:07:35.970
&gt;&gt; I learned something today.

117
00:07:37.540 --> 00:07:44.420
&gt;&gt; So now if you hover over that on
148 you'll only get your ten or so.

118
00:07:44.420 --> 00:07:47.450
&gt;&gt; There they are, adoptNode is there.

119
00:07:47.450 --> 00:07:50.110
Yep, wow that is valid.

120
00:07:50.110 --> 00:07:52.279
I somehow missed this.

121
00:07:53.380 --> 00:07:56.990
That's really cool, we're filtering
the keys, I'm gonna delete this.

122
00:07:58.140 --> 00:08:00.557
Oops, not the whole thing,

123
00:08:00.557 --> 00:08:04.722
just the do not use it
&gt;&gt; I would still generally recommend as as

124
00:08:04.722 --> 00:08:09.384
you have been use the utility types
because their way better maintained and

125
00:08:09.384 --> 00:08:11.832
well understood they're idiomatic.

126
00:08:11.832 --> 00:08:15.227
&gt;&gt; Yep.
&gt;&gt; This is if your hand rolling some super

127
00:08:15.227 --> 00:08:19.376
stupid custom stuff this is
nice to know but [LAUGH].

128
00:08:19.376 --> 00:08:21.245
&gt;&gt; That's super cool thank you for
pointing that out.

