WEBVTT

1
00:00:00.235 --> 00:00:05.059
All right, we talked about TypeScript ES
modules, importing non-TypeScript things.

2
00:00:05.059 --> 00:00:10.015
So if you're using a bundler like webpack,
or parcel, or snowpack,

3
00:00:10.015 --> 00:00:14.559
or even Babel, which is not a bundler,
but it's a transpiler.

4
00:00:14.559 --> 00:00:19.227
Depending on your Babel plugins or
your webpack loaders,

5
00:00:19.227 --> 00:00:22.382
you may import things like file.png.

6
00:00:22.382 --> 00:00:26.820
And if you don't do anything to support
this, you'll get errors like this.

7
00:00:26.820 --> 00:00:29.196
It's saying, what is file.png?

8
00:00:29.196 --> 00:00:35.260
I can't find a file.png.ts file for
you to import, what's going on here?

9
00:00:35.260 --> 00:00:39.910
So what we can do to address this, so

10
00:00:39.910 --> 00:00:43.011
here's our scenario.

11
00:00:45.830 --> 00:00:49.493
You can have what's called
a global declaration file.

12
00:00:49.493 --> 00:00:53.630
Let's see,
you can have a file called global.d.ts.

13
00:00:53.630 --> 00:01:00.977
This is where you would put type
information, ambient type information.

14
00:01:00.977 --> 00:01:03.909
We'll talk more about what this is later,
but

15
00:01:03.909 --> 00:01:08.755
this is equivalent to the d.ts files
that are part of your compiled output.

16
00:01:08.755 --> 00:01:14.168
global.d.ts is sort of a place
where you can do the highest

17
00:01:14.168 --> 00:01:19.269
level adjustments to the way
TypeScript understands.

18
00:01:19.269 --> 00:01:22.530
The types that ship with TypeScript,
so the way it treats certain things.

19
00:01:22.530 --> 00:01:26.516
So I'm gonna grab this piece of code,
I'm gonna paste it in here,

20
00:01:26.516 --> 00:01:30.076
we're gonna witness that it
actually solved the problem,

21
00:01:30.076 --> 00:01:34.223
and then we'll look back and
we'll try to understand what it means.

22
00:01:34.223 --> 00:01:35.200
Problem goes away.

23
00:01:36.810 --> 00:01:43.904
In fact, if I click this,
I thought VS Code might load the image.

24
00:01:43.904 --> 00:01:48.380
It's gonna take me to
the module declaration here.

25
00:01:48.380 --> 00:01:50.067
And so what are we saying here?

26
00:01:50.067 --> 00:01:54.514
Well, we're saying,
I have a certain type of module and

27
00:01:54.514 --> 00:01:58.420
it's anything that ends
with the extension png.

28
00:01:59.810 --> 00:02:05.174
And what I want you to
regard that module as

29
00:02:05.174 --> 00:02:10.240
containing is it should have a string.

30
00:02:10.240 --> 00:02:14.530
And you won't see this,
cuz in a module declaration like this,

31
00:02:14.530 --> 00:02:19.226
we'll talk more about this, but
we're not exporting this, right?

32
00:02:19.226 --> 00:02:24.095
You have to explicitly export things from
module declarations just like you have

33
00:02:24.095 --> 00:02:26.753
to explicitly export things from modules.

34
00:02:26.753 --> 00:02:30.110
So we're saying, okay,
I'm gonna create a comp thing,

35
00:02:30.110 --> 00:02:34.631
we're not initializing it or anything,
and we could not in this context, but

36
00:02:34.631 --> 00:02:38.020
then I want you to treat
it as a default export.

37
00:02:38.020 --> 00:02:40.290
Maybe we could even do this
just to abbreviate it.

38
00:02:44.870 --> 00:02:50.682
Nope, I knew there was a reason because
it has to be kind of value-ish for

39
00:02:50.682 --> 00:02:55.636
us to export it, which is a little
bit of a screwy thing because

40
00:02:55.636 --> 00:02:59.572
you're not allowed to
have values in this file.

41
00:02:59.572 --> 00:03:03.632
You can have declarations that
sort of represent values, but

42
00:03:03.632 --> 00:03:07.390
I absolutely cannot do this, not allowed.

43
00:03:07.390 --> 00:03:12.515
This file can only contain types,
it's just types.

44
00:03:12.515 --> 00:03:17.760
But in essence, what that lets us
do here is, if I hover over image,

45
00:03:17.760 --> 00:03:23.210
look at that, it's a string,
it's a const declaration of a string.

46
00:03:23.210 --> 00:03:27.720
And this is kind of how you might
see webpack using this, right?

47
00:03:27.720 --> 00:03:32.725
I mean, maybe I haven't done this in
a while, but probably gives you some

48
00:03:32.725 --> 00:03:37.919
way to get the URL of this image, which
includes the hash in the bundle name.

49
00:03:37.919 --> 00:03:43.145
Or where it does cache busting and adds
little fingerprints like MT5 checksums

50
00:03:43.145 --> 00:03:48.110
to images so that when they change,
you request them when appropriate.

51
00:03:48.110 --> 00:03:53.821
So it creates the right URL for
you, and you'll obtain it here.

52
00:03:53.821 --> 00:03:58.120
It might even, if it were really fancy,
give you dimensions of this image.

53
00:03:58.120 --> 00:04:02.291
So I don't know maybe you could use that
information as you build your layout

54
00:04:02.291 --> 00:04:03.083
out, right?

55
00:04:03.083 --> 00:04:05.694
All of that is knowable at build time,
and so

56
00:04:05.694 --> 00:04:09.379
it can assemble that information
together and feed it to you.

57
00:04:09.379 --> 00:04:12.332
But this is just a little hack,
it's not really a hack, but

58
00:04:12.332 --> 00:04:15.406
it's the adjustment that you
have to tell TypeScript about so

59
00:04:15.406 --> 00:04:19.030
that it can understand when you're
importing things that are not code.

60
00:04:19.030 --> 00:04:21.670
I mean, it could also be a JSON file.

61
00:04:21.670 --> 00:04:23.754
There are other ways to handle JSON, but

62
00:04:23.754 --> 00:04:26.034
it would be perfectly
fine to do it this way.

63
00:04:26.034 --> 00:04:29.792
Anything that's in the webpack
world like a loader, where it has

64
00:04:29.792 --> 00:04:35.280
the opportunity to transform things for
you, this would be super, super useful.

65
00:04:35.280 --> 00:04:39.813
Why is it that whenever I create a module
declaration for png, for example, and

66
00:04:39.813 --> 00:04:44.211
I try to jump to that file in my IDE,
it navigates to the module declaration and

67
00:04:44.211 --> 00:04:45.449
not the actual file?

68
00:04:45.449 --> 00:04:48.541
Because that's the way TypeScript
thinks about these things.

69
00:04:48.541 --> 00:04:53.080
It treats this as a module,
it doesn't know it's an image.

70
00:04:53.080 --> 00:04:55.422
It has no idea that it's an image.

71
00:04:55.422 --> 00:04:59.048
It doesn't even know that it's a file.

72
00:04:59.048 --> 00:05:00.130
What if you did this?

73
00:05:01.400 --> 00:05:03.375
We're gonna do something really weird.

74
00:05:11.562 --> 00:05:15.140
Well, that's odd.

75
00:05:15.140 --> 00:05:17.183
What if we did this?

76
00:05:17.183 --> 00:05:21.366
Just make it not png,
you can make it HTML.

77
00:05:26.436 --> 00:05:28.940
And then up here, we can say, okay.

78
00:05:39.622 --> 00:05:42.920
Possible illegal module characters.

79
00:05:42.920 --> 00:05:45.680
We'll see if the escapes
actually work here.

80
00:05:53.857 --> 00:05:59.825
Or we do this, Something like that.

81
00:06:05.827 --> 00:06:12.233
All right, so we're saying if
a module begins with http://,

82
00:06:12.233 --> 00:06:16.194
our default export treat default export

83
00:06:16.194 --> 00:06:21.099
as if it's the return type
of the fetch function.

84
00:06:23.100 --> 00:06:25.342
And look, we go back here,
and look at that,

85
00:06:25.342 --> 00:06:27.590
it's a promise that
resolves to a response.

86
00:06:27.590 --> 00:06:33.070
So this clearly is not a file in my
project, right, I'm giving it a URL.

87
00:06:33.070 --> 00:06:36.307
This is super, super unusual,
but I make this point.

88
00:06:36.307 --> 00:06:43.032
I'm showing you this example because the
name of the module here could be anything,

89
00:06:43.032 --> 00:06:47.300
it doesn't necessarily
have to be a local file.

90
00:06:47.300 --> 00:06:51.517
And so all that's safe for
TypeScript to do is to say,

91
00:06:51.517 --> 00:06:56.040
all right, see,
there it did try to jump to the URL.

92
00:06:56.040 --> 00:06:58.862
It just took me here, and it's saying,

93
00:06:58.862 --> 00:07:04.060
you want the type, the declaration,
where this module exists?

94
00:07:04.060 --> 00:07:08.178
This is the best I've got for you,
this is my source of truth for

95
00:07:08.178 --> 00:07:10.911
understanding the types of this module.

