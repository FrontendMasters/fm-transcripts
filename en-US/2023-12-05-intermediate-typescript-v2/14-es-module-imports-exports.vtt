WEBVTT

1
00:00:00.000 --> 00:00:03.500
Let's first talk about ES
module imports and exports.

2
00:00:03.500 --> 00:00:06.690
And as usual,
I'm gonna switch over to VS code.

3
00:00:06.690 --> 00:00:09.410
It's exactly the same examples
that you see on the website.

4
00:00:09.410 --> 00:00:12.248
So if you prefer to read,
you can follow along, but

5
00:00:12.248 --> 00:00:15.812
I like to show you hands on how this
works so I can poke at things and

6
00:00:15.812 --> 00:00:19.599
screw them up and show you how
they're screwed up and then fix them.

7
00:00:19.599 --> 00:00:22.539
Sometimes that helps to
land some of these points.

8
00:00:22.539 --> 00:00:27.267
So without further delay,
let's look at index.ts here.

9
00:00:27.267 --> 00:00:29.594
So whenever I have a folder like this,

10
00:00:29.594 --> 00:00:33.909
it's an indication that we benefit
from having multiple files here.

11
00:00:33.909 --> 00:00:38.159
We're talking about imports and
exports and why fake it in a file?

12
00:00:38.159 --> 00:00:41.142
We can have multiple files and
see how this actually works.

13
00:00:41.142 --> 00:00:42.657
Index is where we're gonna begin.

14
00:00:42.657 --> 00:00:44.022
That's sort of the entry point.

15
00:00:44.022 --> 00:00:47.134
So let's talk about ES module imports and
exports.

16
00:00:47.134 --> 00:00:51.950
What we have here are a bunch
of examples of named imports,

17
00:00:51.950 --> 00:00:56.589
a bunch of different varieties
of things that we can do.

18
00:00:56.589 --> 00:01:02.189
First off, we have some named imports here
that involve consuming named exports.

19
00:01:02.189 --> 00:01:06.916
So that would be something like
this on the export side, right?

20
00:01:06.916 --> 00:01:09.750
Export class FruitBasket,
something like that.

21
00:01:09.750 --> 00:01:12.630
And then you'd consume it
with the named import.

22
00:01:12.630 --> 00:01:16.181
Here we're consuming a default import.

23
00:01:16.181 --> 00:01:20.244
So if you did export
default class FruitBasket,

24
00:01:20.244 --> 00:01:23.124
I have multiple default exports.

25
00:01:23.124 --> 00:01:23.657
You know what?

26
00:01:23.657 --> 00:01:24.558
There's something at the bottom.

27
00:01:24.558 --> 00:01:25.356
I can fix that.

28
00:01:25.356 --> 00:01:27.376
I always put this thing at the bottom.

29
00:01:27.376 --> 00:01:30.861
Typescript regards each file as a module.

30
00:01:30.861 --> 00:01:32.644
Export default class FruitBasket.

31
00:01:32.644 --> 00:01:33.817
This is the default export.

32
00:01:33.817 --> 00:01:36.404
This would be the matching
import on the other side.

33
00:01:36.404 --> 00:01:40.838
You put the file name here obviously, and
then whatever locally you want to call

34
00:01:40.838 --> 00:01:44.293
that name, with default imports
you get to choose your name.

35
00:01:44.293 --> 00:01:47.809
You can make this Grape.

36
00:01:47.809 --> 00:01:52.294
It doesn't need to match the name of
the class as defined in this key we file.

37
00:01:52.294 --> 00:01:53.789
That's your local name.

38
00:01:53.789 --> 00:01:56.220
It's almost like a variable.

39
00:01:56.220 --> 00:02:02.795
Not true for this syntax, but
you could rename it you could do this.

40
00:02:02.795 --> 00:02:08.314
Come on tooltip overload here.

41
00:02:08.314 --> 00:02:14.179
Something like that Grapes, so
this is an alias where you can say,

42
00:02:14.179 --> 00:02:20.885
all right, in this file I'm importing
from it's exported as Blueberry but

43
00:02:20.885 --> 00:02:26.881
within my file I want to call it Grapes,
which you have that option.

44
00:02:26.881 --> 00:02:30.729
And I only tend to do that when
there's a collision between things.

45
00:02:30.729 --> 00:02:37.750
Generic things like builder,
or form, or error.

46
00:02:37.750 --> 00:02:42.159
Usually if you can have a couple of
those playing together side by side and

47
00:02:42.159 --> 00:02:44.920
you need some disambiguation between them.

48
00:02:44.920 --> 00:02:46.566
All right, so
we talked about a named export,

49
00:02:46.566 --> 00:02:48.439
that's where we don't have
the word default here.

50
00:02:48.439 --> 00:02:51.224
So this would be exported
as makeFruitSalad.

51
00:02:51.224 --> 00:02:53.399
This would be a default export.

52
00:02:53.399 --> 00:02:56.159
There are also these
things called re-exports.

53
00:02:56.159 --> 00:02:59.977
And you'll see this a lot in libraries
that sort of have a single entry point,

54
00:02:59.977 --> 00:03:03.349
right, where you're just using
this library right from its root.

55
00:03:03.349 --> 00:03:05.999
It's like one package that's
the name of its package.

56
00:03:05.999 --> 00:03:10.727
And if you look into those projects, you
might see that there's an index.ts file

57
00:03:10.727 --> 00:03:13.879
that will effectively have
no interesting code in it,

58
00:03:13.879 --> 00:03:16.706
it'll just strictly be
a bunch of re-exports.

59
00:03:16.706 --> 00:03:21.358
What we're saying here is,
I want to import lime and

60
00:03:21.358 --> 00:03:24.123
lemon from the citrus module.

61
00:03:24.123 --> 00:03:29.824
And I want to export them
as if they're my exports,

62
00:03:29.824 --> 00:03:32.484
that's a re-export.

63
00:03:32.484 --> 00:03:35.851
What we have here,
we would call this a namespace export.

64
00:03:35.851 --> 00:03:41.855
And what we're effectively saying here
is there's a bunch of stuff on berries,

65
00:03:41.855 --> 00:03:47.697
one or more things that berries, the file
exports I want to re-export it all.

66
00:03:47.697 --> 00:03:51.221
Every single thing that's there.

67
00:03:51.221 --> 00:03:58.140
Take the whole thing, but I want it to
be exported from this module as berries.

68
00:03:58.140 --> 00:04:01.932
Here we go back to kind of a namespace
type thing where you can have a bunch of

69
00:04:01.932 --> 00:04:03.901
different things hanging out there.

70
00:04:03.901 --> 00:04:06.285
And if we look at berries in this case,

71
00:04:06.285 --> 00:04:10.694
we can see, there are some
re-exports there, all the way down.

72
00:04:10.694 --> 00:04:16.480
So we've got like a Raspberry, which has
a pick Raspberries and a Raspberry class.

73
00:04:16.480 --> 00:04:20.357
So all of that would end up kinda
coming through all the way.

74
00:04:20.357 --> 00:04:22.451
You can re-export as
many times as you want.

75
00:04:22.451 --> 00:04:25.262
TypeScript knows how to deal with this.

76
00:04:25.262 --> 00:04:29.349
So if you use like jump to definition,
or anything that would let you,

77
00:04:29.349 --> 00:04:34.338
when you're consuming something from
berries, you'd say, jump to definition and

78
00:04:34.338 --> 00:04:37.064
it would go to actually
where it's declared.

79
00:04:37.064 --> 00:04:41.976
It would just sort of think of those
re-exports is almost like 302 redirects.

80
00:04:41.976 --> 00:04:45.242
That'll just capturable
traverses through those and

81
00:04:45.242 --> 00:04:48.866
then it'll send you on your way
to where you actually wanna go

82
00:04:52.488 --> 00:04:57.251
All right, here's namespace imports.

83
00:04:57.251 --> 00:05:02.052
This will be important as we look
at CJS modules and CJS interrupt.

84
00:05:02.052 --> 00:05:06.138
So here, we can import allBerries, and
you can see here, there's our Strawberry,

85
00:05:06.138 --> 00:05:07.573
Blueberry, and Raspberry.

86
00:05:07.573 --> 00:05:12.550
We kind of saw that in the file, there
were clearly re-exports within those.

87
00:05:12.550 --> 00:05:17.586
But if you wanna look at what allBerries
includes, it's the three classes.

88
00:05:17.586 --> 00:05:21.274
And we went into the Raspberry file, we
saw there was a pickRaspberries function.

89
00:05:21.274 --> 00:05:23.761
It's a separate named export.

90
00:05:23.761 --> 00:05:25.058
And that's here too.

91
00:05:25.058 --> 00:05:28.872
It's star.star,
send it all through, right?

92
00:05:28.872 --> 00:05:31.509
That's what a namespace export does.

93
00:05:31.509 --> 00:05:36.423
And you often do this,
it avoids collisions.

94
00:05:36.423 --> 00:05:39.799
You could also say this.

95
00:05:42.720 --> 00:05:47.020
But things might bump into each other.

96
00:05:47.020 --> 00:05:52.265
You might have things in different
files that are of the same name and

97
00:05:52.265 --> 00:05:55.310
it's gonna be a little bit confusing.

98
00:05:55.310 --> 00:05:56.494
It's gonna be a little hard to manage.

99
00:05:56.494 --> 00:05:59.339
So, it's more common to
do something like this.

100
00:05:59.339 --> 00:06:02.413
If you're creating a library with
a bunch of different things available,

101
00:06:02.413 --> 00:06:04.477
where do you wanna consume
the library as a whole?

102
00:06:04.477 --> 00:06:05.678
Importing types.

103
00:06:05.678 --> 00:06:13.699
So in this case, let's say that we
do have a Raspberry thing in scope.

104
00:06:13.699 --> 00:06:17.399
We can click on this and see where
we're gonna go right to the definition.

105
00:06:17.399 --> 00:06:19.923
Where did we import Raspberry?

106
00:06:19.923 --> 00:06:21.749
It's from up here.

107
00:06:23.474 --> 00:06:28.337
So, here we're using Raspberry
in the type position and

108
00:06:28.337 --> 00:06:31.489
down here we're using it as a value.

109
00:06:31.489 --> 00:06:33.414
We're actually instantiating a Raspberry.

110
00:06:33.414 --> 00:06:37.599
So, we have this Raspberry
identifier in scope.

111
00:06:37.599 --> 00:06:42.037
Remember that term that we
coined when we were dealing with

112
00:06:42.037 --> 00:06:44.494
declaration merging, right?

113
00:06:44.494 --> 00:06:48.468
It's an importable,
exportable thing, and it's a class.

114
00:06:48.468 --> 00:06:52.294
And remember, we talked about how classes
can be used as a type and a value.

115
00:06:52.294 --> 00:06:53.519
So we can have something like this.

116
00:06:53.519 --> 00:06:58.983
We can use it as a type, and
we can use it as a value.

117
00:06:58.983 --> 00:07:07.229
And in this case, we need both to
run lines 27 and 28 successfully.

118
00:07:07.229 --> 00:07:10.279
We need it to be usable
in both of those forms.

119
00:07:10.279 --> 00:07:13.805
But let's say we didn't care about this.

120
00:07:13.805 --> 00:07:15.438
We didn't have that in our code.

121
00:07:15.438 --> 00:07:17.669
We're only consuming it as a type.

122
00:07:17.669 --> 00:07:21.450
Well, there's a different way to do this
and we're switching to Strawberry now

123
00:07:21.450 --> 00:07:24.350
because I don't think that was
something we imported up top.

124
00:07:24.350 --> 00:07:28.612
It was just Blueberry and Raspberry.

125
00:07:28.612 --> 00:07:33.512
So we can import type Strawberry,
and look how we can't actually use

126
00:07:33.512 --> 00:07:38.680
Strawberry to create an instance we
don't have the value in this scope.

127
00:07:38.680 --> 00:07:42.348
We can use it as a type, but
what's the error we get here,

128
00:07:42.348 --> 00:07:46.330
cannot be used as value cuz it
was imported using import type.

129
00:07:46.330 --> 00:07:54.809
Now, Typescript is actually
quite smart about this.

130
00:07:54.809 --> 00:07:59.514
So if we just had a piece of
code like this, where Raspberry

131
00:07:59.514 --> 00:08:04.893
doesn't happen to be used as a value,
types of people kind of erase

132
00:08:04.893 --> 00:08:09.909
the import of Raspberry when it
compiles down to JavaScript.

133
00:08:09.909 --> 00:08:14.883
It will be able to detect that although
we imported this conventionally,

134
00:08:14.883 --> 00:08:17.049
that we didn't have this here,

135
00:08:17.049 --> 00:08:21.719
we just had import Raspberry that
was up at the top here, there it is.

136
00:08:21.719 --> 00:08:26.569
TypeScript will be smart enough cuz it
does a holistic analysis of our program

137
00:08:26.569 --> 00:08:30.539
and it'll say,
you never actually instantiated Raspberry.

138
00:08:30.539 --> 00:08:33.899
You just use the interface
side of the class.

139
00:08:33.899 --> 00:08:39.120
And so we won't include
that module in your bundle.

140
00:08:39.120 --> 00:08:43.487
There will be no resultant import.

141
00:08:43.487 --> 00:08:44.447
Bug Workbench.

142
00:08:44.447 --> 00:08:47.937
I think this is the thing that will
understand multiple files, and

143
00:08:47.937 --> 00:08:48.819
indeed it does.

144
00:08:48.819 --> 00:08:52.184
If you ever wanna go to this mode here,

145
00:08:52.184 --> 00:08:57.137
it's typescriptlang.org/dev/bug-workbench.

146
00:08:57.137 --> 00:09:03.418
This is what gives you some of
the special syntax that I use.

147
00:09:03.418 --> 00:09:07.929
Here where I've got file name and
sometimes I have a little like caret.

148
00:09:07.929 --> 00:09:09.496
This is a little aside, but

149
00:09:09.496 --> 00:09:14.132
I have little symbols that make those tool
tips pop up sometimes not in this page,

150
00:09:14.132 --> 00:09:17.689
but that's, that's kind of
what we're working with here.

151
00:09:17.689 --> 00:09:19.119
So we've talked about importing types.

152
00:09:19.119 --> 00:09:20.544
We talked about type-only imports.

153
00:09:20.544 --> 00:09:25.322
Let's look at an example where we can
see the resultant JavaScript code

154
00:09:25.322 --> 00:09:27.799
that comes from some examples here.

155
00:09:27.799 --> 00:09:31.313
So what we have here, y = foo, so

156
00:09:31.313 --> 00:09:35.582
I'm just gonna create a variable here so

157
00:09:35.582 --> 00:09:40.102
we can see where it pops up,
and down here,

158
00:09:40.102 --> 00:09:44.622
this piece of code,
you can see that this is

159
00:09:44.622 --> 00:09:49.673
the code that represents
this index .ts file.

160
00:09:56.489 --> 00:10:00.899
And what you can see here,
if I comment this line out,

161
00:10:00.899 --> 00:10:06.989
just note this section here at the bottom,
then I'm gonna uncomment it.

162
00:10:06.989 --> 00:10:12.189
So, you see how it's saying file name
index.ts and it's added this require here.

163
00:10:12.189 --> 00:10:17.003
This is TypeScript saying you're
actually using this as a value and

164
00:10:17.003 --> 00:10:21.141
when we compile this code and
you need to run it somewhere,

165
00:10:21.141 --> 00:10:23.769
we really need to import this thing.

166
00:10:23.769 --> 00:10:29.234
Before I did this, before I added line
16 here, I can make it a little bigger.

167
00:10:29.234 --> 00:10:33.380
Before I added line 16,
there was no need to import this.

168
00:10:33.380 --> 00:10:37.382
It's something that could sort of just
melt away as part of the type checking

169
00:10:37.382 --> 00:10:41.006
process, but we've crossed a threshold and
we can go back over it and

170
00:10:41.006 --> 00:10:42.149
watch it disappear.

171
00:10:42.149 --> 00:10:42.729
Look at that.

172
00:10:42.729 --> 00:10:45.980
See, there's the comment and
then it's back, right?

173
00:10:45.980 --> 00:10:49.733
As soon as we need to use it as a value,
TypeScript knows about this and

174
00:10:49.733 --> 00:10:51.369
it really becomes an import.

175
00:10:51.369 --> 00:10:54.502
It's part of the compiled result.

176
00:10:54.502 --> 00:10:56.405
That's what TypeScript does.

177
00:10:56.405 --> 00:11:02.030
If you use Babel, if you use Webpack,
other bundlers like that,

178
00:11:02.030 --> 00:11:07.247
at first glance,
they might say they work with TypeScript,

179
00:11:07.247 --> 00:11:12.175
which is true, but
they don't understand TypeScript.

180
00:11:12.175 --> 00:11:19.471
They effectively just know which parts
of syntax they can safely ignore or

181
00:11:19.471 --> 00:11:24.539
delete as part of producing
result in JavaScript.

182
00:11:24.539 --> 00:11:32.669
And they operate in a mode maybe we
can even do it here if I zoom out.

183
00:11:32.669 --> 00:11:38.559
There's a mode the compiler can
run in called isolated modules.

184
00:11:38.559 --> 00:11:42.139
It probably won't work in the playground,
so we won't do this.

185
00:11:42.139 --> 00:11:46.655
But really,
each module is being transformed from

186
00:11:46.655 --> 00:11:50.231
TypeScript to JavaScript one at a time.

187
00:11:50.231 --> 00:11:54.114
There's no holistic analysis across files.

188
00:11:54.114 --> 00:11:58.650
And so what that means is you're
always gonna see that import.

189
00:11:58.650 --> 00:12:03.166
There's there's no knowing whether
this is a type or a value or

190
00:12:03.166 --> 00:12:08.107
what kinds of things you're using it as,
when Babel goes through and

191
00:12:08.107 --> 00:12:12.875
it looks at this it just knows that
it can eat that piece of syntax and

192
00:12:12.875 --> 00:12:18.779
not include it in the resultant JavaScript
file, it's not doing type checking.

193
00:12:18.779 --> 00:12:23.399
Now if you're using TypeScript with
Babel or TypeScript with Webpack,

194
00:12:23.399 --> 00:12:27.336
something like that, TSC,
that TypeScript CLI command, or

195
00:12:27.336 --> 00:12:31.819
the programmatic equivalent,
it will type check your code, right?

196
00:12:31.819 --> 00:12:34.099
So you'll see errors and things.

197
00:12:34.099 --> 00:12:37.238
You'll see the same kind of developer
feedback as if you were using

198
00:12:37.238 --> 00:12:39.549
TypeScript to actually
admit your JavaScript.

199
00:12:39.549 --> 00:12:42.068
So you won't suffer there, but

200
00:12:42.068 --> 00:12:47.306
where you will suffer is code splitting or
dead code elimination.

201
00:12:47.306 --> 00:12:51.668
You'll have all of these imports in
a variety of places where they could

202
00:12:51.668 --> 00:12:53.059
safely be discarded.

203
00:12:53.059 --> 00:12:59.829
But the fact that all Babel or webpack
knows how to do is lose pieces of syntax.

204
00:12:59.829 --> 00:13:04.335
It doesn't have the holistic understanding
of your program that's necessary to know

205
00:13:04.335 --> 00:13:07.679
that an import is safe to disregard,
so it includes all of them.

206
00:13:07.679 --> 00:13:11.161
Now, that is the main
motivating statement for

207
00:13:11.161 --> 00:13:14.561
why you would want to
use a type-only import.

208
00:13:14.561 --> 00:13:16.141
It does two things.

209
00:13:16.141 --> 00:13:21.133
One is, it'll bust you if you attempt
to use a type-only import as if

210
00:13:21.133 --> 00:13:23.379
it's a conventional import.

211
00:13:23.379 --> 00:13:28.363
And then the second thing is, webpack and
Babel and other similar tools, they

212
00:13:28.363 --> 00:13:33.359
know that this is a type-only import and
they know that it is safe to drop this.

213
00:13:33.359 --> 00:13:40.600
Because the type checking is enforcing
that it will be safe to drop.

214
00:13:40.600 --> 00:13:44.769
That is the importance of,
using type-only imports.

215
00:13:44.769 --> 00:13:49.192
It allows you to avoid entangling
with other modules when it comes to

216
00:13:49.192 --> 00:13:51.374
code splitting or tree shaking.

217
00:13:51.374 --> 00:13:53.200
Sometimes it's called tree shaking.

218
00:13:53.200 --> 00:13:56.289
It's dead code elimination is
what's happening behind the scenes.

219
00:13:56.289 --> 00:13:59.630
But it allows you to really
shake this modules loose,

220
00:13:59.630 --> 00:14:02.760
cuz we don't really need
Strawberry at runtime.

221
00:14:02.760 --> 00:14:06.239
We just need it for type checking.

222
00:14:06.239 --> 00:14:07.376
That makes sense?

223
00:14:10.695 --> 00:14:13.889
And if you're writing
a library by the way,

224
00:14:13.889 --> 00:14:16.919
it's gonna get used in Webpack or Babel.

225
00:14:16.919 --> 00:14:18.798
It's a good idea to use this,

226
00:14:18.798 --> 00:14:23.920
especially if other people might consume
your code and use it in different ways.

227
00:14:23.920 --> 00:14:27.159
So I tend to use these whenever
I just need the types.

228
00:14:27.159 --> 00:14:27.979
Yes?

229
00:14:27.979 --> 00:14:32.407
&gt;&gt; Is there a TS config that
will just warn you if you

230
00:14:32.407 --> 00:14:35.410
forget to be explicit about it?

231
00:14:35.410 --> 00:14:38.844
&gt;&gt; There's probably a lint roll,
but not not a TS

232
00:14:38.844 --> 00:14:43.444
config option that I'm aware of,
&gt;&gt; Okay, cuz it seems like something easy

233
00:14:43.444 --> 00:14:47.399
to overlook or forget or maybe you were
using it now you removed it and you-.

234
00:14:47.399 --> 00:14:50.972
&gt;&gt; It is and even if you try
to be vigilant and you say,

235
00:14:50.972 --> 00:14:54.635
I'm gonna start out with
the type-only import and

236
00:14:54.635 --> 00:15:00.027
when I crossed that threshold I will
make it a proper conventional import.

237
00:15:00.027 --> 00:15:02.359
But then you could delete that, right?

238
00:15:02.359 --> 00:15:04.485
And then there's nothing there
to help you stay in sync.

239
00:15:04.485 --> 00:15:09.880
If that lint roll doesn't exist yet,
hello, open source community.

240
00:15:09.880 --> 00:15:13.124
There's a very good lint
roll opportunity here.

241
00:15:13.124 --> 00:15:16.229
If it doesn't exist yet,
maybe go build it.

