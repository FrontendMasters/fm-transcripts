WEBVTT

1
00:00:00.340 --> 00:00:03.369
Variants over type parameters, out,

2
00:00:03.369 --> 00:00:08.049
you will understand what variants
means by the end of this but

3
00:00:08.049 --> 00:00:12.914
as before, we're gonna use
an example-based approach where

4
00:00:12.914 --> 00:00:17.710
you can see right in front of
your eyes how something behaves.

5
00:00:17.710 --> 00:00:19.370
We'll give it a name at the end.

6
00:00:20.800 --> 00:00:24.530
And let's get started.

7
00:00:24.530 --> 00:00:30.750
So, I have a situation where
I run a snack factory.

8
00:00:30.750 --> 00:00:32.260
This is our example.

9
00:00:33.280 --> 00:00:34.430
I run a snack factory.

10
00:00:35.610 --> 00:00:38.230
I make different kinds of snacks for now.

11
00:00:38.230 --> 00:00:40.430
It's just cookies and pretzels.

12
00:00:41.470 --> 00:00:43.286
So I have a snack base class,

13
00:00:43.286 --> 00:00:47.616
a Boolean that indicates whether
something is pet friendly or not.

14
00:00:47.616 --> 00:00:49.770
On all snacks it has that.

15
00:00:49.770 --> 00:00:54.710
Pretzels are pet friendly based
on whether they're salted or not.

16
00:00:56.050 --> 00:00:59.328
And then cookies, because these
happen to be chocolate cookies,

17
00:00:59.328 --> 00:01:00.859
they're never pet friendly.

18
00:01:02.410 --> 00:01:03.890
Dogs can't eat chocolate.

19
00:01:03.890 --> 00:01:07.913
Maybe some pets can, but
we can't say it's pet friendly in general.

20
00:01:07.913 --> 00:01:13.881
So, okay, the important thing to remember

21
00:01:13.881 --> 00:01:19.054
here is a cookie is a subtype of snack.

22
00:01:19.054 --> 00:01:21.870
All cookies are snacks.

23
00:01:21.870 --> 00:01:23.540
Not all snacks are cookies.

24
00:01:23.540 --> 00:01:25.456
Specifically, pretzels are not cookies.

25
00:01:28.847 --> 00:01:37.588
So in my factory, I want to model
machines that produce cookies.

26
00:01:37.588 --> 00:01:42.748
So I make an interface that kinda
describes this called producer.

27
00:01:42.748 --> 00:01:47.363
Producer is generic over
the thing that it produces,

28
00:01:47.363 --> 00:01:50.550
which is represented here by type T.

29
00:01:50.550 --> 00:01:53.827
We can create a cookie producer.

30
00:01:53.827 --> 00:01:56.573
Produce makes a new cookie.

31
00:01:56.573 --> 00:01:59.730
Always dark chocolate it happens.

32
00:01:59.730 --> 00:02:05.127
A snack producer while this
machine produces different

33
00:02:05.127 --> 00:02:09.843
types of snacks,
I have here it does a coin flip.

34
00:02:09.843 --> 00:02:14.471
And it could produce a milk
chocolate cookie if it's heads, or

35
00:02:14.471 --> 00:02:17.628
it could produce a pretzel if it's tails.

36
00:02:17.628 --> 00:02:22.264
I want you to imagine this as like, look,
producing a snack we don't necessarily

37
00:02:22.264 --> 00:02:26.513
know what kind of snack is gonna come out,
we know it's going to be a snack.

38
00:02:26.513 --> 00:02:33.101
So, Let's try assignment
in both directions.

39
00:02:37.484 --> 00:02:39.432
If we need a snack producer,

40
00:02:39.432 --> 00:02:43.093
we need something that
produces snacks of some sort.

41
00:02:43.093 --> 00:02:46.035
Will it be okay if we
use the cookie machine?

42
00:02:48.773 --> 00:02:50.912
Yep, I see some nods in class.

43
00:02:50.912 --> 00:02:52.670
So yeah, cookies are snacks.

44
00:02:52.670 --> 00:02:57.731
If I need a machine that makes snacks and
I have a cookie machine, that's fine.

45
00:02:57.731 --> 00:03:05.423
But if I need something that only produces
cookies, will a snack producer do?

46
00:03:05.423 --> 00:03:07.932
And the answer here is no.

47
00:03:07.932 --> 00:03:09.558
Some pretzels are gonna
come out of that thing.

48
00:03:09.558 --> 00:03:13.055
If I need specifically a cookie machine,

49
00:03:14.480 --> 00:03:18.109
Those pretzels are kind of unwanted.

50
00:03:18.109 --> 00:03:22.893
What we're observing here
is called covariance.

51
00:03:24.670 --> 00:03:28.396
And I'm gonna read these
rows from left to right.

52
00:03:28.396 --> 00:03:33.380
A cookie is a subtype of snack.

53
00:03:33.380 --> 00:03:38.701
A cookie producer is
a subtype of snack producer.

54
00:03:38.701 --> 00:03:44.490
The fact that both of these arrows
are pointing in the same direction.

55
00:03:44.490 --> 00:03:52.367
That means that producer
is covariant over type T.

56
00:03:52.367 --> 00:03:58.875
The type, this type is defined in such
a way that if we have like types A and

57
00:03:58.875 --> 00:04:04.659
B, and A is a subtype of B,
producer A is a subtype of producer B.

58
00:04:04.659 --> 00:04:10.325
The subtype directions are the same for
both the things that are filling

59
00:04:10.325 --> 00:04:15.339
in the type param and
the producer that is using the type param.

60
00:04:18.160 --> 00:04:21.852
TypeScript gives us
a way to describe this.

61
00:04:21.852 --> 00:04:27.861
We can add a keyword before
the type param that is out.

62
00:04:27.861 --> 00:04:32.265
It's easy to remember that the out
keyword pertains to producer

63
00:04:32.265 --> 00:04:36.351
because the produce function
returns the type parameter.

64
00:04:36.351 --> 00:04:39.525
The type parameter comes out of produce.

65
00:04:39.525 --> 00:04:41.665
Let's look at a different situation.

66
00:04:41.665 --> 00:04:44.250
I have a different machine now.

67
00:04:44.250 --> 00:04:46.074
A packaging machine.

68
00:04:49.580 --> 00:04:52.813
And I define a type to describe this.

69
00:04:52.813 --> 00:04:57.679
This is a machine that takes some sort of,
collection of snacks,

70
00:04:57.679 --> 00:05:00.333
and it puts them into boxes or bags or

71
00:05:00.333 --> 00:05:05.380
whatever needs to happen in order for
us to be ready to ship them out.

72
00:05:05.380 --> 00:05:09.282
We can make a cookie packager.

73
00:05:09.282 --> 00:05:12.980
So we're passing in cookie
as a type param, and

74
00:05:12.980 --> 00:05:17.150
we see that we're taking
cookie as an argument here.

75
00:05:17.150 --> 00:05:18.570
And we can make a snack packager.

76
00:05:18.570 --> 00:05:23.004
And if we look at this
the way this is implemented,

77
00:05:23.004 --> 00:05:29.245
we could see that this machine it's
like a cookie packager plus plus.

78
00:05:29.245 --> 00:05:30.950
It'll package cookies.

79
00:05:30.950 --> 00:05:34.982
But if the item it's given is a pretzel,
it knows how to do that too, potentially

80
00:05:34.982 --> 00:05:38.860
if there are other snacks in the future,
maybe it knows how to do that as well.

81
00:05:38.860 --> 00:05:42.446
It's like imagine this is a cookie
packaging machine with like a pretzel

82
00:05:42.446 --> 00:05:43.931
packaging attachment to it.

83
00:05:43.931 --> 00:05:49.240
It can do everything a cookie
packager does and more.

84
00:05:49.240 --> 00:05:51.386
Let's check for type equivalence.

85
00:05:55.111 --> 00:05:59.455
Well, if we need a cookie packager,
yeah, the snack packager will do.

86
00:05:59.455 --> 00:06:02.903
I mean it's packaging cookies
right up here on line 62.

87
00:06:02.903 --> 00:06:08.657
But if we need something that
packages a wide range of snacks.

88
00:06:08.657 --> 00:06:12.978
You can't just put a machine in
there that only handles the cookies.

89
00:06:12.978 --> 00:06:16.373
You won't be handling the complete set of
possibilities of what a snack could be.

90
00:06:19.150 --> 00:06:21.940
Let's bring that table back.

91
00:06:21.940 --> 00:06:26.509
So, reading in the direction
of the arrows,

92
00:06:26.509 --> 00:06:30.726
I would say a cookie
is a subtype of snack.

93
00:06:32.540 --> 00:06:38.471
A snack packager is a subtype
of a cookie packager.

94
00:06:38.471 --> 00:06:42.773
Meaning snack packages can stand in for
cookie packages, but

95
00:06:42.773 --> 00:06:46.673
they're specialized,
they have extra stuff in them.

96
00:06:46.673 --> 00:06:49.883
Similar to up here but
in the other direction.

97
00:06:49.883 --> 00:06:54.851
We were saying like, look,
if you need a snack producing machine,

98
00:06:54.851 --> 00:06:59.219
a cookie machine can spit out snacks,
that's no problem.

99
00:06:59.219 --> 00:07:03.149
Cookies are snacks, you need me to
give you something that matches

100
00:07:03.149 --> 00:07:06.040
the contract described
by the snack interface.

101
00:07:06.040 --> 00:07:09.620
I'll chuck cookies at you all day,
it's fine.

102
00:07:09.620 --> 00:07:16.077
So when these arrows are in
opposite directions,

103
00:07:16.077 --> 00:07:20.227
we say that this type packager is

104
00:07:20.227 --> 00:07:25.311
contrarian over its type parameter T.

105
00:07:25.311 --> 00:07:27.910
For two types that you give it.

106
00:07:27.910 --> 00:07:35.182
If a is a subtype of b, and then you look
at the packagers, they flipped directions.

107
00:07:35.182 --> 00:07:37.500
A is a subtype of b.

108
00:07:37.500 --> 00:07:45.300
But packager b is a subtype of packager a,
contravariance.

109
00:07:45.300 --> 00:07:52.393
TypeScript gives us a way to
describe this using an n keyword.

110
00:07:52.393 --> 00:07:57.385
It's kinda easy to remember this
one because the item goes in.

111
00:07:57.385 --> 00:08:02.369
This will contravariant
behavior often happens when

112
00:08:02.369 --> 00:08:06.797
you accept your type
parameter as an argument,

113
00:08:06.797 --> 00:08:14.670
covariate behavior often happens when you
return your type parameter, in and out.

114
00:08:14.670 --> 00:08:18.038
&gt;&gt; Do you find yourself using
the variance helpers very often?

115
00:08:18.038 --> 00:08:21.804
&gt;&gt; These are so new that I really
haven't had a chance to use them much.

116
00:08:21.804 --> 00:08:27.830
Where I have added them is a centrally,
like I have a repo that has JSON types.

117
00:08:27.830 --> 00:08:32.825
Which if you took TypeScript fundamentals,
that's literally the contents of the repo,

118
00:08:32.825 --> 00:08:34.674
and it's used by a lot of things.

119
00:08:34.674 --> 00:08:38.564
I've added this to that because
it's a recursive type, and for

120
00:08:38.564 --> 00:08:43.842
deeply nested JSON, you can end up running
through that recursion many, many times.

121
00:08:45.330 --> 00:08:50.030
But I would strictly not recommend putting
this everywhere throughout your code.

122
00:08:50.030 --> 00:08:53.270
It's just if you're trying to have
something that you're preserving

123
00:08:53.270 --> 00:08:55.380
the covariant or
contravariant nature of it.

124
00:08:55.380 --> 00:08:58.637
You could put this up as sort of
a guardrail where at least you know when

125
00:08:58.637 --> 00:09:00.505
you've crossed into that territory.

