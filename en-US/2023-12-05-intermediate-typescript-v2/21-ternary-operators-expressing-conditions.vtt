WEBVTT

1
00:00:00.000 --> 00:00:04.728
Next, let's take a look
at conditional types.

2
00:00:04.728 --> 00:00:09.761
You can think of conditional types
as kind of a ternary operator,

3
00:00:09.761 --> 00:00:12.505
but for type information and just so

4
00:00:12.505 --> 00:00:17.187
everybody understands what I
mean by the ternary operator.

5
00:00:17.187 --> 00:00:21.665
It's this where we could say shorthand for
if then else.

6
00:00:21.665 --> 00:00:26.503
If x is greater than 0,
then the expression should evaluate to no.

7
00:00:26.503 --> 00:00:29.617
Otherwise, it should evaluate to yes.

8
00:00:29.617 --> 00:00:34.334
So I imagine a lot of you have seen this.

9
00:00:34.334 --> 00:00:40.539
This is part of modern JavaScript
has been around for a while.

10
00:00:40.539 --> 00:00:45.509
So let's look at the type
equivalent to a ternary operator.

11
00:00:45.509 --> 00:00:50.539
We've got two cooking appliances,
a grill and an oven.

12
00:00:50.539 --> 00:00:55.664
And I can define a type cooking device

13
00:00:55.664 --> 00:01:01.130
that's generic over T, a type param.

14
00:01:01.130 --> 00:01:05.664
And if T extends the string literal

15
00:01:05.664 --> 00:01:10.204
type grill, evaluate to a grill.

16
00:01:10.204 --> 00:01:14.620
Otherwise, evaluate to an oven and
look at what we get.

17
00:01:17.350 --> 00:01:19.840
Device1, grill.

18
00:01:19.840 --> 00:01:21.975
Device2, oven.

19
00:01:23.850 --> 00:01:26.599
It's a little bit of
if--then-else happening here.

20
00:01:26.599 --> 00:01:30.613
And remember my argument for

21
00:01:30.613 --> 00:01:35.804
extends being like, is subtype of?

22
00:01:35.804 --> 00:01:42.300
You can think of it as in
terms of this condition,

23
00:01:42.300 --> 00:01:49.280
you're evaluating whether
T is a subtype of grill.

24
00:01:49.280 --> 00:01:50.979
In this case, it's a unit type.

25
00:01:50.979 --> 00:01:57.006
It can really only be grill and you might
witness that even if we screw this up,

26
00:01:57.006 --> 00:02:01.739
we're gonna end up with oven
because anything that doesn't

27
00:02:01.739 --> 00:02:04.554
match grill is regarded as an oven.

28
00:02:04.554 --> 00:02:10.013
That's just how these work same as
if I were to screw this up sort of

29
00:02:10.013 --> 00:02:16.570
like if the conditions not met, absolutely
everything else flows through and

30
00:02:16.570 --> 00:02:22.559
you get the if condition not met
expression as what you evaluate out to.

31
00:02:22.559 --> 00:02:24.619
These are some interesting examples.

32
00:02:24.619 --> 00:02:30.209
So we've got some values 1, 2 and
10 because these are const declarations.

33
00:02:30.209 --> 00:02:35.060
And because the value we assign to these
variables, they're immutable values.

34
00:02:35.060 --> 00:02:37.937
Numbers cannot be altered once.

35
00:02:37.937 --> 00:02:43.463
Once declared,
these end up being literal types.

36
00:02:43.463 --> 00:02:46.977
It comes ten is of type ten,
there's only one thing this could be.

37
00:02:46.977 --> 00:02:51.719
So we could create some
interesting types here.

38
00:02:51.719 --> 00:02:57.279
So this one is like is low number and
we're saying, okay,

39
00:02:57.279 --> 00:03:03.759
if T extends one or two, then is
low number should evaluate to true.

40
00:03:03.759 --> 00:03:05.228
Otherwise, it should be false.

41
00:03:05.228 --> 00:03:07.739
And if we look, TestOne is true.

42
00:03:07.739 --> 00:03:09.838
TestTwo is true.

43
00:03:09.838 --> 00:03:16.061
TestThree with TestTen is false and

44
00:03:16.061 --> 00:03:21.874
look at this, TestTen with two.

45
00:03:23.763 --> 00:03:27.710
We're passing a union type
through this type param.

46
00:03:31.794 --> 00:03:35.049
That's interesting,
we're getting Boolean out.

47
00:03:35.049 --> 00:03:37.609
We don't have Boolean anywhere
in our conditional type.

48
00:03:37.609 --> 00:03:40.010
I mean, we have true and
false, but that's interesting.

49
00:03:41.240 --> 00:03:44.192
There's a question that I see,
does grill and

50
00:03:44.192 --> 00:03:48.369
oven being lowercase when passing
in the type parameter matter?

51
00:03:48.369 --> 00:03:49.954
Is there is there case sensitivity.

52
00:03:49.954 --> 00:03:51.790
So there is case sensitivity and

53
00:03:51.790 --> 00:03:55.400
the only thing that you have
to do is make sure you match.

54
00:03:55.400 --> 00:03:59.349
So if we did capital G for grill,
this is gonna turn into oven.

55
00:03:59.349 --> 00:04:02.902
Just think about it like
a string comparison check,

56
00:04:02.902 --> 00:04:06.221
you can fix that by doing this and
you'd be okay.

57
00:04:06.221 --> 00:04:13.272
In either case, they are different strings
held in different places in memory,

58
00:04:13.272 --> 00:04:20.549
but those strings are not equal to each
other, unless they're case-sensitive.

59
00:04:20.549 --> 00:04:24.234
Yeah, the strings don't have to be
class names here, we'll do that.

60
00:04:27.184 --> 00:04:31.329
Really, it's just comparing this cuz
this is the T, right, cooking device.

61
00:04:31.329 --> 00:04:35.011
If I hover over this,
see how it's like T extends G.

62
00:04:35.011 --> 00:04:37.243
So it's just G coming through here.

63
00:04:37.243 --> 00:04:41.520
It It is not really connected
with the class name at all.

64
00:04:43.462 --> 00:04:48.809
Okay, let's go back to
this puzzling thing here.

65
00:04:48.809 --> 00:04:53.639
Does anyone have a theory as
to why we're seeing this?

66
00:04:53.639 --> 00:04:58.454
&gt;&gt; It knows its load number
just resolves to Boolean.

67
00:04:58.454 --> 00:05:02.023
&gt;&gt; IsLowNumber does resolve to a Boolean,
why?

68
00:05:02.023 --> 00:05:09.299
&gt;&gt; So it's the only options
coming out of the ternary.

69
00:05:09.299 --> 00:05:11.972
It could be either or, or false.

70
00:05:11.972 --> 00:05:16.604
&gt;&gt; Could be either or,
one of those evaluates to true.

71
00:05:16.604 --> 00:05:20.073
The other one evaluates to false and

72
00:05:20.073 --> 00:05:24.359
you put those together and
you get Boolean.

73
00:05:24.359 --> 00:05:29.828
What we're seeing here is evidence
that when we project a union

74
00:05:29.828 --> 00:05:36.749
type through a type parameter, you really
wanna think of that as if we did this.

75
00:05:46.879 --> 00:05:48.870
It's the same thing.

76
00:05:48.870 --> 00:05:54.040
When you project a union type
through a type parameter, you wanna

77
00:05:54.040 --> 00:06:00.056
imagine as if every element of that
union type is individually evaluated and

78
00:06:00.056 --> 00:06:05.142
then we take all of those results and
we union them all together.

79
00:06:06.954 --> 00:06:09.629
That's why we're getting true, it's both.

80
00:06:14.216 --> 00:06:21.219
Jay asks, is T always the top level type?

81
00:06:21.219 --> 00:06:23.429
This is just cargo culting.

82
00:06:23.429 --> 00:06:25.886
If you wanna look up that term,

83
00:06:25.886 --> 00:06:31.946
it's a convention that doesn't have
any particular importance or value.

84
00:06:31.946 --> 00:06:36.994
But in C++, the equivalent concept
to this was called template

85
00:06:36.994 --> 00:06:42.224
classes where you could take in
a type param just we're doing here or

86
00:06:42.224 --> 00:06:45.371
capital T for template and it has stuck.

87
00:06:45.371 --> 00:06:46.902
You'll see that in Java and

88
00:06:46.902 --> 00:06:50.705
C Sharp anywhere they're type
params people use capital letters.

89
00:06:50.705 --> 00:06:52.616
You can do whatever you want.

90
00:06:57.891 --> 00:07:00.308
As long as you match the number off these,
you're fine.

91
00:07:01.734 --> 00:07:03.979
These you can name however you want.

92
00:07:03.979 --> 00:07:09.558
There is a convention around using
at least capitalized things, but

93
00:07:09.558 --> 00:07:14.752
I would just say that is as important
as beginning variable names

94
00:07:14.752 --> 00:07:20.066
with lowercase and beginning
class names with capital letters.

95
00:07:20.066 --> 00:07:23.150
The value is in us being able
to look at something and

96
00:07:23.150 --> 00:07:27.410
to sort of understand what it could be and
what it couldn't be.

97
00:07:27.410 --> 00:07:33.919
But beyond that, there's nothing
that would stop me from doing this.

98
00:07:33.919 --> 00:07:35.078
It can be whatever you want.

