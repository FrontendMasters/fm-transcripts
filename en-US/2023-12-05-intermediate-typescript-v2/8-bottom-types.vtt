WEBVTT

1
00:00:00.000 --> 00:00:04.056
Let's move on to bottom types.

2
00:00:04.056 --> 00:00:09.945
All right, in contrast with top types,
bottom types do not accept any value.

3
00:00:09.945 --> 00:00:16.565
They're happy with nothing, they
represent an impossibility in some sense.

4
00:00:16.565 --> 00:00:22.394
So let's look at where we might
see one of these in the wild.

5
00:00:22.394 --> 00:00:26.748
We have a car, and we have a truck,
we've got a method called drive on car.

6
00:00:26.748 --> 00:00:28.485
We've got tow on truck,

7
00:00:28.485 --> 00:00:33.718
this is just an example to illustrate
that these are two different shapes.

8
00:00:33.718 --> 00:00:36.894
I've got my vehicle equals
obtain random vehicle.

9
00:00:36.894 --> 00:00:41.658
There you go,the fact that it returns
any means like we can pretend that It's

10
00:00:41.658 --> 00:00:42.841
giving us a value.

11
00:00:42.841 --> 00:00:47.830
My vehicle is still of type vehicle.

12
00:00:47.830 --> 00:00:49.538
What is vehicle?

13
00:00:49.538 --> 00:00:51.428
It's a truck or a car.

14
00:00:51.428 --> 00:00:55.575
This is a union type, it's either or,
could be a truck, could be a car.

15
00:00:55.575 --> 00:00:57.540
No base class involved here, right?

16
00:00:57.540 --> 00:00:59.162
It's just the union type.

17
00:00:59.162 --> 00:01:03.856
So let's build what we call
an exhaustive conditional.

18
00:01:03.856 --> 00:01:09.036
And what that means is,
we are trying to model the entire domain

19
00:01:09.036 --> 00:01:13.926
of something that we're examining,
meaning we wanna look

20
00:01:13.926 --> 00:01:18.751
at every possibility,
everything it could possibly be.

21
00:01:18.751 --> 00:01:25.266
And we want some assurance that at
the end, there's nothing left unhandled.

22
00:01:25.266 --> 00:01:29.832
So here we're gonna have a type card
that says, up here it's a vehicle right?

23
00:01:29.832 --> 00:01:33.498
myVehicle instance of
truck if that's true,

24
00:01:33.498 --> 00:01:36.601
it is a truck and we can call tow safely.

25
00:01:36.601 --> 00:01:40.157
If myVehicle is an instance
of car I can say,

26
00:01:40.157 --> 00:01:44.402
all right my vehicles a car
we can call drive safely.

27
00:01:44.402 --> 00:01:46.470
And what's left?

28
00:01:46.470 --> 00:01:50.349
What's left in the set of
possible values this could be.

29
00:01:50.349 --> 00:01:51.697
How do we describe that set?

30
00:01:54.309 --> 00:01:56.726
[INAUDIBLE]
&gt;&gt; There's nothing left in it.

31
00:01:56.726 --> 00:02:00.453
It's an empty set to
set with nothing in it.

32
00:02:00.453 --> 00:02:06.638
My vehicle is a never and
then you should never get here.

33
00:02:06.638 --> 00:02:11.233
You should never reach this
branch of code if the types

34
00:02:11.233 --> 00:02:16.245
truly represent what this value
is going to be at runtime.

35
00:02:16.245 --> 00:02:21.385
You shouldn't get here and
what I've done here is I've said I'm

36
00:02:21.385 --> 00:02:27.283
gonna create a value of type never,
and I'm gonna assign my vehicle to it.

37
00:02:27.283 --> 00:02:29.932
This is gonna be good in a sec.

38
00:02:29.932 --> 00:02:34.046
So okay, another developer comes along and

39
00:02:34.046 --> 00:02:38.838
they say, hey,
boats are vehicle here's a boat.

40
00:02:41.293 --> 00:02:45.135
And I'm just gonna go up and I'm gonna
say vehicle because it can be a boat too.

41
00:02:47.400 --> 00:02:48.425
And look at this.

42
00:02:49.732 --> 00:02:52.399
Never value is declared, no,

43
00:02:52.399 --> 00:02:57.753
that's the wrong error type boat
is not assignable to type never.

44
00:02:57.753 --> 00:03:02.153
And what we're saying here is effectively,

45
00:03:02.153 --> 00:03:09.228
this line is an assertion that nothing
should be left over in this block.

46
00:03:09.228 --> 00:03:14.366
It's a way for us to say, I think I've
handled every possible thing that

47
00:03:14.366 --> 00:03:20.115
this could be, and now there's a new
thing that's left over at the end, right?

48
00:03:20.115 --> 00:03:22.940
This is like a pie, like a pie chart.

49
00:03:22.940 --> 00:03:27.500
We should have had no pieces of the pie
left over by the time we reached

50
00:03:27.500 --> 00:03:30.949
this point, but we do and
we're getting an error.

51
00:03:30.949 --> 00:03:35.930
This is great, feedback that's happening
right in the authoring phase where we

52
00:03:35.930 --> 00:03:38.507
don't have to wait for unit tests to run.

53
00:03:38.507 --> 00:03:43.300
We don't have to hope, that we have
coverage here, it's going to fail.

54
00:03:43.300 --> 00:03:46.425
Now, you don't handle every
kinda value this way, but

55
00:03:46.425 --> 00:03:49.232
when you want to handle
something exhaustively.

56
00:03:49.232 --> 00:03:53.940
Meaning handle every possible
mode something can be in, or

57
00:03:53.940 --> 00:03:58.189
every kinda vehicle it can be,
this lets you do this.

58
00:03:58.189 --> 00:04:00.755
And if we didn't wanna handle boat,
we could still do this.

59
00:04:04.140 --> 00:04:05.282
Something like that.

60
00:04:05.282 --> 00:04:11.068
[BLANK_AUDIO.

61
00:04:11.068 --> 00:04:13.900
Why are we getting an error here?

62
00:04:13.900 --> 00:04:20.209
All right, let's yank this up just cuz
of hoisting is not a thing anymore.

63
00:04:20.209 --> 00:04:26.975
Note though that hoisting
with types happened [LAUGH].

64
00:04:26.975 --> 00:04:30.923
All right and let's see what's happening

65
00:04:30.923 --> 00:04:36.155
here I need an else.

66
00:04:38.588 --> 00:04:44.078
And now, this line of code that I was
telling you is kind of an assertion,

67
00:04:44.078 --> 00:04:45.428
it's happy now.

68
00:04:45.428 --> 00:04:48.966
We're deliberately doing nothing
in the case that it's a boat.

69
00:04:48.966 --> 00:04:53.434
But that's enough to ensure that
we don't end up in this block,

70
00:04:53.434 --> 00:04:57.013
in this code block here,
in the bookcase, right?

71
00:04:57.013 --> 00:05:00.531
That has a specific thing, it's a no up.

72
00:05:00.531 --> 00:05:03.841
So we could still say, okay,
we're handling this exhaustively,

73
00:05:03.841 --> 00:05:07.746
even though in some cases we're doing
nothing about it, this is super useful.

74
00:05:07.746 --> 00:05:10.394
Okay, but we can make it even more useful.

75
00:05:13.634 --> 00:05:17.303
Instead of just having
that assertion there,

76
00:05:17.303 --> 00:05:22.017
we're going to create an error class or
an error subclass.

77
00:05:22.017 --> 00:05:26.716
And the arguments that this error class
takes well first we're gonna take

78
00:05:26.716 --> 00:05:28.244
a never as an argument.

79
00:05:30.452 --> 00:05:34.216
And then we're gonna take a message and

80
00:05:34.216 --> 00:05:38.548
what we can do here is
say wanna grab this, and

81
00:05:38.548 --> 00:05:42.442
I'm gonna put it in our last else block.

82
00:05:42.442 --> 00:05:47.449
Instead of this assertion, I'll leave
that there just for illustration.

83
00:05:47.449 --> 00:05:48.954
Up hoisting again.

84
00:05:52.649 --> 00:05:58.658
I haven't found a better way to do this
sequentially like this, but there you go.

85
00:05:58.658 --> 00:06:01.738
We would spoil the surprise,
you'd see it there as we scroll down.

86
00:06:01.738 --> 00:06:04.531
So, now we're saying I
want to throw an error and

87
00:06:04.531 --> 00:06:06.926
I'm calling this an unreachable error.

88
00:06:06.926 --> 00:06:12.050
Cuz, we shouldn't hit this if
the types are telling the truth.

89
00:06:12.050 --> 00:06:14.879
Nobody at runtime is
slipped in a possibility

90
00:06:14.879 --> 00:06:17.116
that there's another thing here.

91
00:06:17.116 --> 00:06:22.364
Then I should throw, and
if we remove this else block

92
00:06:22.364 --> 00:06:27.496
that elsif you can see that
the unreachable error is

93
00:06:27.496 --> 00:06:32.529
lighting up just like that
one line assertion is.

94
00:06:32.529 --> 00:06:37.066
The difference here is that sometimes
we lie with type, sometimes we're

95
00:06:37.066 --> 00:06:41.980
especially if this is like a JSON response
that you get from an API or something.

96
00:06:41.980 --> 00:06:47.655
Sometimes it's an innum and
an API or something like that.

97
00:06:47.655 --> 00:06:51.670
Something where it's not part of your
compiled code, in this case, it's

98
00:06:51.670 --> 00:06:56.022
impossible to sort of sneak a boat class
in if it's not part of the code like that.

99
00:06:56.022 --> 00:06:58.993
You gotta have a class there,
we're doing instance of checks.

100
00:06:58.993 --> 00:07:03.484
But in a case where it was something
coming in from the outside,

101
00:07:03.484 --> 00:07:07.405
this would say, all right,
something new popped up.

102
00:07:07.405 --> 00:07:11.833
The way my code is written assumes
that this is never possible and

103
00:07:11.833 --> 00:07:14.795
now we're getting an unreachable error.

104
00:07:14.795 --> 00:07:19.946
We're gonna see that in our,
whatever observability tool we're using,

105
00:07:19.946 --> 00:07:25.682
like if it's sentry or Splunk or something
else, and we'll be able to act on that.

106
00:07:25.682 --> 00:07:29.336
So this is great because this means,
well, at build time,

107
00:07:29.336 --> 00:07:33.591
you get the benefit of a type
equivalence check to whenever, right?

108
00:07:33.591 --> 00:07:37.448
You get the same enforcement that
you're exhaustively handling.

109
00:07:37.448 --> 00:07:41.441
This domain, the domain being
like the domain of a vehicle,

110
00:07:41.441 --> 00:07:43.806
all things that a vehicle could be.

111
00:07:43.806 --> 00:07:49.272
And at runtime, you get, in the event that
you actually reach this piece of code,

112
00:07:49.272 --> 00:07:54.442
you'll get some indication that you hit
this and you need to take a look at it.

113
00:07:54.442 --> 00:07:59.155
Because at the time you wrote this code,
you thought that to be impossible.

114
00:07:59.155 --> 00:08:02.639
Something happened that you
didn't think could happen, and

115
00:08:02.639 --> 00:08:04.182
now you're alerted to it.

116
00:08:04.182 --> 00:08:10.213
So I love this unreachable
error concept for that reason.

117
00:08:10.213 --> 00:08:15.074
And of course, here, if we went back, now
this is the way we would throw it away,

118
00:08:15.074 --> 00:08:16.299
we would deploy it.

119
00:08:16.299 --> 00:08:20.169
We'd say, all right, this is never,
this will type check, this will compile.

120
00:08:20.169 --> 00:08:26.683
Ship it and then if this ever happens you
know we got to really take a look at this.

121
00:08:26.683 --> 00:08:29.310
So that's the concept of
an exhaustive conditional

