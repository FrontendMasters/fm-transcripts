WEBVTT

1
00:00:00.240 --> 00:00:02.939
What happens if we combine
these things together?

2
00:00:02.939 --> 00:00:07.420
Now we've got like an all-in-one machine,
it's the producer-packager, and

3
00:00:07.420 --> 00:00:10.684
let's pretend like we need to
be able to use the packaging and

4
00:00:10.684 --> 00:00:15.496
the producing side independently, it's not
one thing that handles everything for us.

5
00:00:15.496 --> 00:00:17.794
So we have a new interface
that describes this.

6
00:00:17.794 --> 00:00:21.871
And let's, as before,
create one for a snack,

7
00:00:21.871 --> 00:00:25.257
arbitrary snack, and one for cookies.

8
00:00:25.257 --> 00:00:27.435
So here's my cookieProducerPackager.

9
00:00:27.435 --> 00:00:29.699
Here's it producing a cookie,
packaging it.

10
00:00:29.699 --> 00:00:32.643
It's doing something in here.

11
00:00:32.643 --> 00:00:35.610
And then here's the snack equivalent.

12
00:00:35.610 --> 00:00:39.662
Well, it's gonna flip a coin and
give us a cookie or a pretzel, so

13
00:00:39.662 --> 00:00:42.995
we can't depend on what
it's gonna give us, right?

14
00:00:42.995 --> 00:00:47.236
And then if we look at the package side,
well, this the same implementation we had

15
00:00:47.236 --> 00:00:50.441
above, where it's gonna be able
to handle any kind of snack.

16
00:00:50.441 --> 00:00:54.149
It can handle a cookie, it can handle
a pretzel, it can handle anything else.

17
00:00:54.149 --> 00:00:56.211
And let's check our assignments again.

18
00:00:56.211 --> 00:01:00.452
Are we type equivalent in one direction or
both?

19
00:01:00.452 --> 00:01:03.084
It turns out neither.

20
00:01:03.084 --> 00:01:09.611
What we have created here, this scenario,
we would say, we've created invariants.

21
00:01:09.611 --> 00:01:14.193
Because we have a place
where we're accepting

22
00:01:14.193 --> 00:01:18.664
an argument in and
we're returning a thing.

23
00:01:18.664 --> 00:01:20.140
Nobody's happy, right?

24
00:01:20.140 --> 00:01:24.367
So in this side for this first assignment,
we're trying to have a snack,

25
00:01:24.367 --> 00:01:27.790
you produce your packagers standing in for
the cookie one.

26
00:01:27.790 --> 00:01:30.186
The produce side is unhappy.

27
00:01:30.186 --> 00:01:33.899
It's saying, look I need this
thing over here on the left,

28
00:01:33.899 --> 00:01:37.765
it needs a function that's
guaranteed to spit out cookies and

29
00:01:37.765 --> 00:01:42.096
you're spitting out pretzels sometimes,
I can't live with that.

30
00:01:42.096 --> 00:01:47.454
And then down here, snackProducerPackager,
it's saying, hey, look,

31
00:01:47.454 --> 00:01:52.643
I have this function package, which
needs to be able to take in cookies and

32
00:01:52.643 --> 00:01:55.591
pretzels, and you only accept cookies.

33
00:01:55.591 --> 00:01:57.587
I'm not happy with that either.

34
00:01:57.587 --> 00:02:01.582
So what we have now is that we
can't establish any sort of

35
00:02:01.582 --> 00:02:06.514
relationship between ProducerPackager
between two different type

36
00:02:06.514 --> 00:02:10.096
params that have a relationship
with each other.

37
00:02:10.096 --> 00:02:11.793
So effectively now,

38
00:02:11.793 --> 00:02:17.367
we would say ProducerPackager is
invariant over its type parameter.

39
00:02:17.367 --> 00:02:20.710
Now you you can do this,
although it's the default,

40
00:02:20.710 --> 00:02:24.065
it's what happens if you
don't say anything at all.

41
00:02:26.999 --> 00:02:28.870
You could do that, there's not much point.

42
00:02:28.870 --> 00:02:32.486
This is implicitly present before
every single type param that does not

43
00:02:32.486 --> 00:02:34.486
have one of these explicit notations.

44
00:02:34.486 --> 00:02:36.835
Some of you are probably
wondering why would you do this?

45
00:02:36.835 --> 00:02:38.521
What are the benefits for denoting this?

46
00:02:38.521 --> 00:02:39.981
We will get to that in a moment.

47
00:02:39.981 --> 00:02:43.715
Okay, we have one more thing we have
to model in our cookie factory,

48
00:02:43.715 --> 00:02:44.773
quality control.

49
00:02:44.773 --> 00:02:48.905
We have two employees we've hired,
one very seasoned employee,

50
00:02:48.905 --> 00:02:52.834
they know how to do quality
control over cookies and pretzels.

51
00:02:52.834 --> 00:02:56.474
And they can inspect any kind of snack,
and the whole factory, and

52
00:02:56.474 --> 00:02:58.882
they just really know what they're doing.

53
00:02:58.882 --> 00:03:02.141
We also have somebody that we just hired,
they know the cookie business,

54
00:03:02.141 --> 00:03:03.359
they can inspect a cookie.

55
00:03:03.359 --> 00:03:06.226
But they've never seen
a pretzel before in their life,

56
00:03:06.226 --> 00:03:08.667
they can't do quality
control over pretzels.

57
00:03:08.667 --> 00:03:12.423
So here are two functions that
represent those quality control checks.

58
00:03:12.423 --> 00:03:15.116
We've got the one that
only works on cookies and

59
00:03:15.116 --> 00:03:18.223
then the one that works on
an arbitrary snack, right?

60
00:03:18.223 --> 00:03:23.139
And we see here,
it's doing the cookie check and more,

61
00:03:23.139 --> 00:03:28.383
it's even calling into the cookie
quality control check.

62
00:03:28.383 --> 00:03:33.413
Now, we'll take these
quality control checks, and

63
00:03:33.413 --> 00:03:40.454
let's create a type that describes
the act of checking a bunch of cookies,

64
00:03:40.454 --> 00:03:45.955
or snacks, or whatever and
preparing them for shipment.

65
00:03:45.955 --> 00:03:49.689
And what we have here is a call signature,
right?

66
00:03:49.689 --> 00:03:54.761
We take in a group of unchecked items and
a quality check function,

67
00:03:54.761 --> 00:04:00.753
and presumably we're going to return
the things that pass the quality check.

68
00:04:00.753 --> 00:04:06.356
So this is our new type that has
a type param that we're exploring.

69
00:04:06.356 --> 00:04:11.550
So as before, we're gonna create one for
cookies and one for snacks.

70
00:04:11.550 --> 00:04:14.057
So, here we've got prepareSnacks, and

71
00:04:14.057 --> 00:04:18.434
we're saying it's a prepareFoodPackage
with snack as the type param.

72
00:04:18.434 --> 00:04:23.158
We've taken the unchecked items and
the callback, and

73
00:04:23.158 --> 00:04:27.994
we're going to just like
array.filter over the array.

74
00:04:27.994 --> 00:04:31.050
Implementation here is the same,
they're just of different types.

75
00:04:33.970 --> 00:04:35.369
So let's see how it turns out.

76
00:04:39.287 --> 00:04:43.761
We've got an array of cookies and an array
of snacks just to use as test values.

77
00:04:43.761 --> 00:04:44.796
So look at this.

78
00:04:44.796 --> 00:04:48.624
We can say prepareSnacks,
pass in the array of cookies or

79
00:04:48.624 --> 00:04:53.588
the array of snacks, and it works with
the cookie quality control check.

80
00:04:53.588 --> 00:04:58.398
This is that inexperienced employee who
only knows how to check the cookies.

81
00:04:58.398 --> 00:04:59.645
This is working.

82
00:05:01.705 --> 00:05:07.061
And then prepareCookies, that work
with the snack quality control check.

83
00:05:07.061 --> 00:05:11.655
What we're seeing here is bi
variants where it's not just

84
00:05:11.655 --> 00:05:15.414
things are interchangeable
in one direction.

85
00:05:15.414 --> 00:05:21.114
They're interchangeable in both
directions to the same good,

86
00:05:21.114 --> 00:05:27.881
prepareSnacks and we've got this,
this check that only handles cookies.

87
00:05:27.881 --> 00:05:31.511
That seems problematic, right?

88
00:05:31.511 --> 00:05:36.273
What I did in my tsconfig is I
turned strict function types off.

89
00:05:36.273 --> 00:05:41.986
So if I turn it back on, there we go.

90
00:05:41.986 --> 00:05:43.878
Good.
There's the type checking we

91
00:05:43.878 --> 00:05:44.899
were looking for.

92
00:05:44.899 --> 00:05:49.519
If you've ever wondered what strict
function types do beyond adding more

93
00:05:49.519 --> 00:05:52.724
strictness to the checking
of functions somehow,

94
00:05:52.724 --> 00:05:54.970
this is specifically what it does.

95
00:05:54.970 --> 00:05:59.129
Without this compiler setting turned on,

96
00:05:59.129 --> 00:06:03.526
it allows for
bivariance in function types.

97
00:06:03.526 --> 00:06:08.026
It allows things to be used
interchangeably where it's not

98
00:06:08.026 --> 00:06:10.369
desirable for that to happen.

99
00:06:10.369 --> 00:06:13.471
As long as strict function types are true,

100
00:06:13.471 --> 00:06:18.565
you get covariance over function types,
which is how it should work.

101
00:06:18.565 --> 00:06:21.189
In fact, yeah,
that's what we're seeing here, right?

102
00:06:21.189 --> 00:06:24.419
The experienced employee that
can check cookies and pretzels,

103
00:06:24.419 --> 00:06:28.662
it's totally fine for them to prepare the
cookies, they can stand in for anything,

104
00:06:28.662 --> 00:06:34.362
cuz they can check anything here There

105
00:06:34.362 --> 00:06:40.267
are a couple other places where you might
see bivariant behavior in TypeScript, but

106
00:06:40.267 --> 00:06:45.278
they all involve combining things,
they don't involve type params.

107
00:06:45.278 --> 00:06:48.954
Bivariants in general is undesirable,

108
00:06:48.954 --> 00:06:54.140
because it's not very sound
when used in this particular

109
00:06:54.140 --> 00:06:59.993
context when talking about a type
parameter and a generic type.

110
00:07:04.570 --> 00:07:09.173
So, what do variance helpers do for you?

111
00:07:12.744 --> 00:07:14.304
Why do we care?

112
00:07:14.304 --> 00:07:19.357
I've just created a new, clean example
here so we can work in isolation.

113
00:07:19.357 --> 00:07:24.632
Well, one thing they do is
they keep you honest, right?

114
00:07:24.632 --> 00:07:28.055
You can say I can live
within a certain constraint,

115
00:07:28.055 --> 00:07:31.248
I want to be alerted if I
ever deviate from that.

116
00:07:31.248 --> 00:07:34.721
You can see, all right, we've got in T,

117
00:07:34.721 --> 00:07:39.295
which means I am contravariant
over type parameter T.

118
00:07:39.295 --> 00:07:40.453
And this works, right?

119
00:07:40.453 --> 00:07:44.345
This is just like the cookie packaging
machine, it's the equivalent.

120
00:07:44.345 --> 00:07:49.030
But if I add the produce side here,
it's gonna say hey, hey,

121
00:07:49.030 --> 00:07:51.025
hey, you can't do this.

122
00:07:51.025 --> 00:07:58.319
You can see it's even saying
Example&lt;super-T&gt; and Example&lt;sub-T&gt;.

123
00:07:58.319 --> 00:08:02.301
I need to be able to assign
a super T to a sub T, and

124
00:08:02.301 --> 00:08:07.299
it should work out cuz that's
what contravariants means.

125
00:08:07.299 --> 00:08:11.591
The types returned by
produce are incompatible

126
00:08:11.591 --> 00:08:15.998
between these types, so
it objects to produce.

127
00:08:15.998 --> 00:08:21.158
It objects to produce
because this is not returning

128
00:08:21.158 --> 00:08:25.246
a type T is not contravariant behavior.

129
00:08:25.246 --> 00:08:26.938
Similarly, if we did this.

130
00:08:30.235 --> 00:08:33.828
Well, we're saying this is a covariant.

131
00:08:33.828 --> 00:08:37.775
Example is covariant over
its type parameter, and

132
00:08:37.775 --> 00:08:42.745
here it's gonna say,
package is not using T in a covariant way.

133
00:08:46.813 --> 00:08:52.609
So you can sort of set up
a constraint here that ensures that.

134
00:08:54.793 --> 00:08:58.294
Type equivalence between subtypes and

135
00:08:58.294 --> 00:09:02.438
supertypes works in
a particular direction.

136
00:09:02.438 --> 00:09:06.290
More importantly, I mean it's
good to have these constraints,

137
00:09:06.290 --> 00:09:10.151
I wouldn't advise putting these
all over the place in your code.

138
00:09:10.151 --> 00:09:16.012
Cuz especially for more complicated types,
you'll end up changing these and

139
00:09:16.012 --> 00:09:20.917
you end up in a, you have to break
out of this at some point anyway.

140
00:09:20.917 --> 00:09:24.292
But if you're building
highly recursive types, or

141
00:09:24.292 --> 00:09:29.596
if you're building types that are used
incredibly frequently in type checking.

142
00:09:29.596 --> 00:09:34.664
It's some little very atomic
thing where you've got hundreds

143
00:09:34.664 --> 00:09:40.209
of thousands of values that are all
type checking, providing an in or

144
00:09:40.209 --> 00:09:44.437
out variance hint greatly
speeds up type checking.

145
00:09:44.437 --> 00:09:49.260
TypeScript literally can
skip over a bunch of stuff,

146
00:09:49.260 --> 00:09:56.347
because the way it works by default,
it assumes that it could work either way.

147
00:09:56.347 --> 00:10:00.355
It has to check all of the different
possibilities, supertypes and subtypes.

148
00:10:00.355 --> 00:10:03.168
And if this variant hint is here,

149
00:10:03.168 --> 00:10:08.191
it can literally skip over a very
large chunk of that work and

150
00:10:08.191 --> 00:10:12.524
extremely efficiently
performed type checking.

151
00:10:12.524 --> 00:10:15.340
So if you're working
on a large project and

152
00:10:15.340 --> 00:10:20.269
your type checking is getting slow, and
where you would see this is the code

153
00:10:20.269 --> 00:10:23.496
hints in VS Code would be
popping up very slowly.

154
00:10:23.496 --> 00:10:28.016
There's a lot of lag maybe when you
run yarn type check which in this

155
00:10:28.016 --> 00:10:32.863
project would just without emitting
JavaScript, it would compile and

156
00:10:32.863 --> 00:10:34.817
see if there are any errors.

157
00:10:34.817 --> 00:10:38.258
If that's getting slow, this is one of
the things that you can start to look at.

158
00:10:38.258 --> 00:10:43.186
But variance is also a useful
thing to understand in

159
00:10:43.186 --> 00:10:47.999
terms of how generic types
relate to each other and

160
00:10:47.999 --> 00:10:54.890
how that is aligned with the relationships
between their type params.

