WEBVTT

1
00:00:00.470 --> 00:00:01.520
Optional Chaining.

2
00:00:03.010 --> 00:00:07.650
So I'll set up an example, and we'll talk
about why we might use optional chaining.

3
00:00:07.650 --> 00:00:09.629
Let me uncomment this real quick.

4
00:00:11.936 --> 00:00:15.839
So I have a little
obligatory payment example,

5
00:00:15.839 --> 00:00:19.753
where we have a couple
different objects here.

6
00:00:19.753 --> 00:00:28.130
And what I've done here, I have made an
effort to create a highly nested object.

7
00:00:28.130 --> 00:00:32.822
So, starting from the bottom,
we have a response that could

8
00:00:32.822 --> 00:00:37.280
contain a single customer or
an array of customers.

9
00:00:37.280 --> 00:00:40.585
And if we go one step up,
we can see, all right,

10
00:00:40.585 --> 00:00:44.486
customers have a lastInvoice and
an array of invoices.

11
00:00:44.486 --> 00:00:48.138
Presumably if they have no invoices,
lastInvoice has no meaning,

12
00:00:48.138 --> 00:00:50.450
shouldn't be populated.

13
00:00:50.450 --> 00:00:52.950
invoices have multiple payments, right?

14
00:00:52.950 --> 00:00:56.391
You can make a deposit, pay for half of
the invoice, and you could pay the rest.

15
00:00:56.391 --> 00:00:58.995
And now same deal here,
lastPayment, which like,

16
00:00:58.995 --> 00:01:03.610
if you haven't made any payments yet,
clearly you don't have a last payment yet.

17
00:01:03.610 --> 00:01:07.095
And then a payment is sort of
all the way at the bottom or

18
00:01:07.095 --> 00:01:10.620
all the way most nested
into the JSON object.

19
00:01:10.620 --> 00:01:13.400
It just has three properties on it.

20
00:01:13.400 --> 00:01:18.306
So, yeah, the important thing is
just to know this contains this,

21
00:01:18.306 --> 00:01:20.729
contains this, contains this.

22
00:01:22.130 --> 00:01:26.210
So let's look at how we would
write some code to deal with this.

23
00:01:26.210 --> 00:01:28.240
So this is one way of writing code.

24
00:01:28.240 --> 00:01:34.242
This is using just type guards, where
we're using, at three steps along the way,

25
00:01:34.242 --> 00:01:39.047
destructured assignment to sort of
pluck off a const variable that

26
00:01:39.047 --> 00:01:43.620
represents customer,
lastInvoice, lastPayment, right?

27
00:01:43.620 --> 00:01:50.798
And then once we check to make sure that
customer is there, lastInvoice is there,

28
00:01:50.798 --> 00:01:56.800
lastPayment is there,
then we can finally return the amount.

29
00:01:56.800 --> 00:02:00.782
So what we'll end up
returning here is undefined,

30
00:02:00.782 --> 00:02:05.620
from the outer function we'll
return undefined or a number.

31
00:02:05.620 --> 00:02:06.636
Let's see if that's true.

32
00:02:06.636 --> 00:02:08.420
There it is, number or undefined.

33
00:02:09.840 --> 00:02:14.376
You could argue we could return null,
but given what I just talked about,

34
00:02:14.376 --> 00:02:17.130
it would look the same, similar.

35
00:02:17.130 --> 00:02:19.800
So, but
this is a lot of noise here, right?

36
00:02:19.800 --> 00:02:21.053
There's a lot of code.

37
00:02:21.053 --> 00:02:24.130
Here's how you could write
it using optional chaining.

38
00:02:25.950 --> 00:02:30.135
It's similar to the non-null
assertion operator,

39
00:02:30.135 --> 00:02:35.750
which was exclamation point dot,
and this is question mark dot.

40
00:02:35.750 --> 00:02:40.302
And look how we can just drill from data
to customer to lastInvoice, lastPayment,

41
00:02:40.302 --> 00:02:40.829
amount.

42
00:02:41.940 --> 00:02:48.382
If at any of these steps something
is found to be undefined or null,

43
00:02:48.382 --> 00:02:53.920
the entire expression will
just evaluate to undefined.

44
00:02:55.140 --> 00:02:57.163
So this does not throw,

45
00:02:57.163 --> 00:03:03.240
this just evaluates to undefined if
any of these things are undefined.

46
00:03:03.240 --> 00:03:08.126
And so we can still return
the same thing from our function,

47
00:03:08.126 --> 00:03:12.720
but look how much easier
this code is to read.

48
00:03:12.720 --> 00:03:14.830
And we know what's gonna happen
at each step of the way.

49
00:03:14.830 --> 00:03:16.000
This is much safer.

50
00:03:16.000 --> 00:03:21.310
This one I would use in
production code that runs.

51
00:03:21.310 --> 00:03:26.004
It's different from the non-null assertion
operator in that it's not gonna just

52
00:03:26.004 --> 00:03:31.370
randomly throw at a particular place,
it's kinda like uncontrolled failure.

53
00:03:31.370 --> 00:03:37.320
Here, we're evaluating out to exactly
the same thing we'd evaluate out to here.

54
00:03:37.320 --> 00:03:41.588
That's part of why I didn't put null at
each of these returns cuz I wanted it to

55
00:03:41.588 --> 00:03:43.650
match what you would get here.

56
00:03:43.650 --> 00:03:48.485
These two implementations are equivalent,
but look how much easier it is to read.

57
00:03:51.274 --> 00:03:52.620
So this is a great one to use.

58
00:03:53.810 --> 00:03:55.790
Also, I use this in tests, right?

59
00:03:55.790 --> 00:04:00.368
If you wanna drill all the way down to
a particular property and it's not there,

60
00:04:00.368 --> 00:04:01.470
it's undefined.

61
00:04:01.470 --> 00:04:05.000
It's another way of sort of
drilling into a nested object.

62
00:04:05.000 --> 00:04:10.333
Your choice depends on whether you wanna
throw in the event of the failure or

63
00:04:10.333 --> 00:04:12.119
evaluate to undefined.

64
00:04:15.789 --> 00:04:18.210
Last topic, Nullish Coalescing.

65
00:04:18.210 --> 00:04:21.269
So we have another example here.

66
00:04:21.269 --> 00:04:25.360
Let's say we have a video
player that we're building.

67
00:04:25.360 --> 00:04:29.248
And we want to set the volume
of a video player,

68
00:04:29.248 --> 00:04:34.380
and the volume could be 0,
which represents mute.

69
00:04:34.380 --> 00:04:38.989
And then we have steps up
by 25% all the way to 100.

70
00:04:38.989 --> 00:04:42.924
And we have a function here that
initializes the video player.

71
00:04:42.924 --> 00:04:47.468
And we'd say, if the type of the volume

72
00:04:47.468 --> 00:04:51.889
is undefined, then we set it to 50.

73
00:04:51.889 --> 00:04:54.080
Let's say that that's the default volume.

74
00:04:55.180 --> 00:05:00.370
Otherwise we return
the config volume here.

75
00:05:00.370 --> 00:05:02.160
If we wanted to replace this,

76
00:05:02.160 --> 00:05:06.324
let's say that this ternary operator
is getting a little unwieldy.

77
00:05:06.324 --> 00:05:10.501
So this code is correct as it stands,
but somebody comes along and they're

78
00:05:10.501 --> 00:05:15.076
not thinking about this carefully, and
they're like, you know what I could do,

79
00:05:15.076 --> 00:05:18.620
is I've seen a pattern all over
the place that looks like this.

80
00:05:20.869 --> 00:05:22.310
I'll just do that, right?

81
00:05:22.310 --> 00:05:24.149
This is a pattern I've
seen all over the place.

82
00:05:24.149 --> 00:05:27.503
It's good for setting defaults,
who's seen something like this before?

83
00:05:28.695 --> 00:05:32.029
All right, we have a problem though.

84
00:05:35.739 --> 00:05:39.208
Look what happened to our
allowed values for vol.

85
00:05:41.042 --> 00:05:42.480
0 has disappeared.

86
00:05:43.800 --> 00:05:48.309
This kind of treatment for
using a value if it exists and

87
00:05:48.309 --> 00:05:51.440
falling back to a default.

88
00:05:51.440 --> 00:05:54.120
You're doing a truthy-falsy check here.

89
00:05:54.120 --> 00:06:00.169
And in this case, there is a value here
that will fail the truthy-falsy check,

90
00:06:00.169 --> 00:06:02.709
but it's a valid thing, right?

91
00:06:02.709 --> 00:06:05.659
What this would leave you with
is every time a user comes back,

92
00:06:05.659 --> 00:06:07.660
they have a preset volume, right?

93
00:06:07.660 --> 00:06:12.220
Every time if they muted it,
they'd come back and they're back to 50.

94
00:06:12.220 --> 00:06:16.554
So we don't want that,
we can just change this to this,

95
00:06:16.554 --> 00:06:20.530
question marks,
question mark, question mark.

96
00:06:20.530 --> 00:06:22.559
This is not a truthy-falsy check.

97
00:06:22.559 --> 00:06:25.259
This is a check for null or undefined.

98
00:06:25.259 --> 00:06:28.749
You look at vol,
there's our 0 back where it should be.

99
00:06:28.749 --> 00:06:34.260
I would say, anytime you see this,

100
00:06:34.260 --> 00:06:38.498
you see pipe pipe, think.

101
00:06:38.498 --> 00:06:44.709
Think carefully, but it's usually safe to
switch it to question mark, question mark.

102
00:06:44.709 --> 00:06:47.460
Keep in mind, it's different behavior.

103
00:06:47.460 --> 00:06:50.879
And so you'll have to think carefully
about what happened to the zeros,

104
00:06:50.879 --> 00:06:53.190
what happened to the empty strings,
the nulls?

105
00:06:54.420 --> 00:06:59.360
But for new code that you're writing,
this is a lot safer, right?

106
00:07:00.530 --> 00:07:06.767
Because it's easy to think about truthy,
falsy checks as sort of present or

107
00:07:06.767 --> 00:07:12.230
not present, but remember,
Boolean false, 0, empty string.

108
00:07:13.260 --> 00:07:14.542
They all are falsy, and

109
00:07:14.542 --> 00:07:18.530
this handles falsy values in a way
that's a little bit more appropriate.

110
00:07:21.130 --> 00:07:24.929
Yeah, I'm not gonna say just wholesale
throughout your code, find double pipe and

111
00:07:24.929 --> 00:07:28.249
replace it, cuz somewhere someone
might be depending on that behavior,

112
00:07:28.249 --> 00:07:29.390
the existing behavior.

113
00:07:29.390 --> 00:07:34.599
But I tend to write all my code
like this now, where you can really

114
00:07:34.599 --> 00:07:40.310
disambiguate between empty and
present instead of truthy and falsy.

115
00:07:42.240 --> 00:07:45.543
&gt;&gt; That is available just in
null JavaScript as well, right?

116
00:07:45.543 --> 00:07:46.043
&gt;&gt; It is.

117
00:07:47.070 --> 00:07:47.780
It is, right?

118
00:07:47.780 --> 00:07:49.190
It's a JavaScript feature.

119
00:07:49.190 --> 00:07:52.660
TypeScript handles the narrowing properly.

120
00:07:52.660 --> 00:07:58.877
But it's still an important thing for
working with null values, nullish values.

121
00:07:58.877 --> 00:07:59.850
That's a good question.

122
00:07:59.850 --> 00:08:06.296
In fact, optional chaining is
also part of regular JavaScript.

123
00:08:06.296 --> 00:08:13.050
The non-null assertion operator,
I think that's only TypeScript.

124
00:08:13.050 --> 00:08:15.180
I'd have to check, right, this bang.

125
00:08:16.390 --> 00:08:17.405
&gt;&gt; I think so.

126
00:08:17.405 --> 00:08:18.510
&gt;&gt; Did I lose?

127
00:08:18.510 --> 00:08:22.230
I lost my other example,
I've messed with this too much.

128
00:08:22.230 --> 00:08:26.160
But bang dot, that's only TypeScript.

129
00:08:26.160 --> 00:08:31.354
And this definite assignment
operator is also only TypeScript.

