WEBVTT

1
00:00:00.000 --> 00:00:05.697
Let's talk about constraints
that we can apply to infer.

2
00:00:05.697 --> 00:00:10.337
So, this is a new TypeScript 5 feature.

3
00:00:10.337 --> 00:00:16.200
And what we can see here is
an example where we're saying,

4
00:00:16.200 --> 00:00:21.474
I want to get the first
stringish element of a tuple.

5
00:00:21.474 --> 00:00:22.885
Let's look at these examples.

6
00:00:25.927 --> 00:00:34.692
So in the case of type 1,
These are just our test tuples,

7
00:00:34.692 --> 00:00:39.919
so we get success, we get the number 4.

8
00:00:39.919 --> 00:00:41.108
That seems good.

9
00:00:49.187 --> 00:00:54.012
What we can also do here is say,
infer S extends string.

10
00:00:59.705 --> 00:01:04.242
And in terms of the pragmatic use case for
this, so

11
00:01:04.242 --> 00:01:07.603
you see here for t2 we get never now.

12
00:01:10.339 --> 00:01:13.975
I've been describing this S as a type

13
00:01:13.975 --> 00:01:18.798
parameter we're declaring on the fly,
right?

14
00:01:18.798 --> 00:01:23.555
Once we match the condition,
we sort of can point to a particular place

15
00:01:23.555 --> 00:01:27.440
where a type parameter would go and
we can extract it out.

16
00:01:27.440 --> 00:01:29.696
We're creating a new type
parameter on the fly.

17
00:01:29.696 --> 00:01:33.977
Just as we want to be able to
state constraints like this,

18
00:01:33.977 --> 00:01:37.546
on type parameters that
are declared up front,

19
00:01:37.546 --> 00:01:42.296
sometimes you wish to do the same
on inferred type parameters.

20
00:01:42.296 --> 00:01:44.881
You don't wanna just take
whatever you can get.

21
00:01:44.881 --> 00:01:49.419
You wanna be able to say,
this needs to be met.

22
00:01:49.419 --> 00:01:55.576
It ends up becoming part of the condition,
right?

23
00:01:55.576 --> 00:02:00.212
So it's almost like you're saying this,
String,

24
00:02:03.704 --> 00:02:06.458
So we'll observe, in the first case,
it'll be string, right?

25
00:02:06.458 --> 00:02:09.960
We're not actually teasing out
the string literal type anymore.

26
00:02:09.960 --> 00:02:12.785
This should be never, and it is never.

27
00:02:12.785 --> 00:02:16.638
So, if we're type-checking for this,

28
00:02:16.638 --> 00:02:21.821
we don't need a constraint
on the inferred type param.

29
00:02:21.821 --> 00:02:24.517
Could be anything, we'll take it.

30
00:02:24.517 --> 00:02:28.519
If this is really the way we
wanna describe our condition and

31
00:02:28.519 --> 00:02:33.321
we just wanna grab this whatever it is,
it could be literally any type,

32
00:02:33.321 --> 00:02:35.655
then we don't need a constraint.

33
00:02:35.655 --> 00:02:37.897
But as soon as you're saying, look,

34
00:02:37.897 --> 00:02:42.677
this is what I really wanna express my
condition S, I wanna express it like this.

35
00:02:42.677 --> 00:02:47.840
But if there's a more specific thing, like
if there's a string literal type here,

36
00:02:47.840 --> 00:02:50.838
I wanna extract that out and
I wanna be handed it.

37
00:02:50.838 --> 00:02:55.444
That's where you have to say, infer S, and

38
00:02:55.444 --> 00:03:01.931
there's a minimum requirement
that S is a subtype of string.

39
00:03:01.931 --> 00:03:06.197
It could be string itself, but
it could be a much more specific,

40
00:03:06.197 --> 00:03:10.779
like a single string literal, or
a union of many string literals, or

41
00:03:10.779 --> 00:03:15.602
even strings that begin with a, b,
c, there's a way to describe that.

42
00:03:23.793 --> 00:03:28.882
A very good question from the chat,
Mahmoud asks, what is this?

43
00:03:28.882 --> 00:03:33.275
[LAUGH] It's a rest argument or

44
00:03:33.275 --> 00:03:36.613
it's a spread param,

45
00:03:36.613 --> 00:03:41.540
if you wanna think of it that way.

46
00:03:41.540 --> 00:03:45.875
What we're saying is there
could be any number of other

47
00:03:45.875 --> 00:03:48.898
elements in this array-like thing.

48
00:03:48.898 --> 00:03:52.124
I don't care what their types are,
there can be as many as you want.

49
00:03:52.124 --> 00:03:56.768
And just as a convention,
sometimes we use underscores to

50
00:03:56.768 --> 00:04:00.482
represent things that
we are going to ignore.

51
00:04:00.482 --> 00:04:01.893
I could just as easily do this.

52
00:04:06.745 --> 00:04:07.806
Something like that.

53
00:04:11.112 --> 00:04:16.093
But underscore is sort of
a shorthand in some languages,

54
00:04:16.093 --> 00:04:22.959
where it just means it's here but I am
not gonna reach for it, I don't need it.

55
00:04:24.920 --> 00:04:28.243
Some languages will even prevent
you from accessing that,

56
00:04:28.243 --> 00:04:32.497
where you're saying,
by writing underscore here, you're saying,

57
00:04:32.497 --> 00:04:35.168
you're not going to use that,
and you may not.

58
00:04:35.168 --> 00:04:41.487
And if you wish to, give it a name Sorry,

59
00:04:41.487 --> 00:04:44.887
that's a little curveball syntax there,
[LAUGH] I shouldn't left that in.

60
00:04:48.210 --> 00:04:52.451
Yep, LJ says Go acts like that,
a language I've used before,

61
00:04:52.451 --> 00:04:54.382
Elixir also acts like that.

62
00:04:54.382 --> 00:04:57.650
So it is something you'll see elsewhere.

