WEBVTT

1
00:00:00.450 --> 00:00:05.837
You will inevitably need to work
with modules that are shipped,

2
00:00:05.837 --> 00:00:10.010
that are distributed as CommonJS modules.

3
00:00:10.010 --> 00:00:12.499
And what do we mean by CommonJS?

4
00:00:12.499 --> 00:00:16.296
So I have one in here, banana.js, I bet.

5
00:00:16.296 --> 00:00:18.737
That's not CommonJS, is Melon?

6
00:00:18.737 --> 00:00:21.230
No, it is, sorry, Banana is.

7
00:00:21.230 --> 00:00:25.519
We have a class called Banana, and
then this is the smoking gun here.

8
00:00:25.519 --> 00:00:32.555
This is the key thing that tells us it's
CommonJS, module.exports = { Banana }.

9
00:00:34.570 --> 00:00:39.570
So, this is the way Node.js has treated

10
00:00:39.570 --> 00:00:46.055
JS files since its inception,
as far as I'm aware.

11
00:00:46.055 --> 00:00:50.349
You could point Node.js at this today
in a file with a JS extension, and

12
00:00:50.349 --> 00:00:52.650
it would be totally happy to run this.

13
00:00:54.980 --> 00:00:57.180
So how do we deal with files like that?

14
00:00:57.180 --> 00:01:01.515
Well, look,
we're consuming Banana over here.

15
00:01:04.018 --> 00:01:08.320
All these fruit things and talking about
consuming them is making me hungry.

16
00:01:08.320 --> 00:01:13.085
So here we're importing
from this banana file, and

17
00:01:13.085 --> 00:01:16.998
we're importing * as bananaNamespace.

18
00:01:16.998 --> 00:01:19.980
So here we've got
bananaNanamespace.Banana.

19
00:01:19.980 --> 00:01:24.060
In fact, you could also just do this.

20
00:01:25.420 --> 00:01:26.800
You could just do it conventionally.

21
00:01:26.800 --> 00:01:32.060
As long as it's a named export,
You could do this.

22
00:01:34.330 --> 00:01:36.092
When I say a named export,

23
00:01:36.092 --> 00:01:39.946
I mean as long as it's sort of
within an object like this.

24
00:01:39.946 --> 00:01:42.651
It's one of many things
that could be exported.

25
00:01:42.651 --> 00:01:45.197
You could put a comma here and

26
00:01:45.197 --> 00:01:50.088
export a bunch of other stuff
if you wanted to, right?

27
00:01:50.088 --> 00:01:54.590
But namespace importing
is a valid thing to do.

28
00:01:55.740 --> 00:02:00.878
Has anyone here ever modernized
a Node.js library or

29
00:02:00.878 --> 00:02:07.165
something like that,
where you're reaching for the fs module?

30
00:02:07.165 --> 00:02:15.580
It used to be just you do const
fs = require fs as string.

31
00:02:15.580 --> 00:02:17.135
This is what you'd convert it to.

32
00:02:20.925 --> 00:02:22.421
Something like that, right?

33
00:02:25.543 --> 00:02:27.923
And why might you do it this way?

34
00:02:27.923 --> 00:02:30.897
Well, maybe in a bunch of
different places in your module,

35
00:02:30.897 --> 00:02:33.420
you're referring to this fs thing.

36
00:02:33.420 --> 00:02:37.780
And you can just make this one change,
you don't have to perturb a bunch of code

37
00:02:37.780 --> 00:02:40.309
that already assumes
the existence of an fs.

38
00:02:40.309 --> 00:02:42.870
You change this import,
you go about your day.

39
00:02:42.870 --> 00:02:47.863
It's a relatively low-risk code change,
compared to refactoring everything around

40
00:02:47.863 --> 00:02:51.040
so you're doing specific
imports in specific places.

41
00:02:52.560 --> 00:02:55.384
Okay, let's look at something else.

42
00:02:55.384 --> 00:03:01.360
Let's say we have to import
something as a single thing.

43
00:03:01.360 --> 00:03:08.230
So, Melon is also a CommonJS module,
but we're getting an error here.

44
00:03:09.910 --> 00:03:15.926
And if we look at Melon,
let's go look at what melon.js has in it.

45
00:03:15.926 --> 00:03:20.140
Look at that, there's no braces here.

46
00:03:20.140 --> 00:03:23.360
We're exporting Melon as a single thing.

47
00:03:23.360 --> 00:03:25.890
Sometimes you'll see a function here,
right?

48
00:03:25.890 --> 00:03:28.586
We can't do a named import for this.

49
00:03:28.586 --> 00:03:30.854
This isn't a default export, right?

50
00:03:30.854 --> 00:03:33.746
This isn't a default export,
it's not a named export.

51
00:03:33.746 --> 00:03:39.404
It's just saying Melon is all
the exported stuff, right?

52
00:03:39.404 --> 00:03:42.544
There's no picking apart
individual things.

53
00:03:42.544 --> 00:03:45.750
It's the one thing that
we're exporting here.

54
00:03:45.750 --> 00:03:47.739
Not to be confused with
the default export.

55
00:03:47.739 --> 00:03:51.967
Cuz remember, with modern JavaScript
modules, you can have a default export and

56
00:03:51.967 --> 00:03:54.060
also named exports all in the same file.

57
00:03:54.060 --> 00:03:56.180
They don't collide with each other,
it's fine.

58
00:03:56.180 --> 00:03:58.446
But here we're exporting one thing, and

59
00:03:58.446 --> 00:04:01.580
it's sort of hogging
up all the space here.

60
00:04:01.580 --> 00:04:04.696
So we're getting an error message.

61
00:04:04.696 --> 00:04:08.812
And the error message says,
the module can only be

62
00:04:08.812 --> 00:04:13.813
referenced with ECMAScript
imports/exports by turning on

63
00:04:13.813 --> 00:04:19.740
the 'esModuleInterop' flag and
referencing its default export.

64
00:04:19.740 --> 00:04:22.736
We could follow that advice.

65
00:04:24.422 --> 00:04:25.760
But we're not going to.

66
00:04:27.250 --> 00:04:27.920
And here's why.

67
00:04:29.710 --> 00:04:34.106
If you turn on that esModuleInterop flag,
TypeScript is gonna helpfully,

68
00:04:34.106 --> 00:04:36.520
behind the scenes, say, you know what?

69
00:04:37.980 --> 00:04:42.691
I'm gonna treat that Melon thing
as if it's a default export.

70
00:04:42.691 --> 00:04:46.351
And I'm gonna type check
a little bit differently,

71
00:04:46.351 --> 00:04:49.940
such that you're not going
to have a problem here.

72
00:04:51.730 --> 00:04:54.862
And then, let's say we have a library, and

73
00:04:54.862 --> 00:05:01.140
we're gonna emit types that still have
that kind of problematic thing in them.

74
00:05:01.140 --> 00:05:07.510
But it's okay, as long as it's type
checked, with esModuleInterop turned on.

75
00:05:07.510 --> 00:05:10.580
So I call this a viral option.

76
00:05:10.580 --> 00:05:14.759
If you enable this in a library,
and there are other viral options,

77
00:05:14.759 --> 00:05:18.075
we'll talk about those in
the Enterprise TS course.

78
00:05:18.075 --> 00:05:23.574
But if you enable this in a library,
you are forcing all consumers of

79
00:05:23.574 --> 00:05:29.479
that library to also enable this, or
their project will not type check.

80
00:05:29.479 --> 00:05:33.490
And as a library author,
I think that's a bad thing.

81
00:05:33.490 --> 00:05:36.778
I want to leave optionality for
consumers of my code,

82
00:05:36.778 --> 00:05:40.310
I want to let them make
the right decision for them.

83
00:05:40.310 --> 00:05:43.520
Plenty of library consumers
will turn this flag on.

84
00:05:43.520 --> 00:05:47.707
If you're building an app, of course, you
can turn this flag on, that's your app,

85
00:05:47.707 --> 00:05:48.760
who cares?

86
00:05:48.760 --> 00:05:53.690
But I don't wanna force somebody to shift
into a different mode that will affect

87
00:05:53.690 --> 00:05:58.559
their type checking just because I wanna
solve this problem a particular way.

88
00:05:58.559 --> 00:06:01.146
And there's another way to solve it

89
00:06:01.146 --> 00:06:06.700
that doesn't require us imposing
things on consumers of our code.

90
00:06:06.700 --> 00:06:09.241
And here's what we have to do.

91
00:06:11.796 --> 00:06:17.918
And the error message, if we look closely
at it, there's a little wiggle room here.

92
00:06:20.368 --> 00:06:22.768
And it's here.

93
00:06:22.768 --> 00:06:28.458
This module can be only referenced
with ECMAScript imports/exports,

94
00:06:28.458 --> 00:06:31.160
if we turn this flag on.

95
00:06:31.160 --> 00:06:36.055
But there's a way to reference this module
without ECMAScript imports and exports.

96
00:06:36.055 --> 00:06:41.037
And it's using an old style
of TypeScript importing that

97
00:06:41.037 --> 00:06:45.406
predates ES modules being
a standardized thing.

98
00:06:45.406 --> 00:06:47.144
And that's this syntax here.

99
00:06:49.440 --> 00:06:52.432
It's really weird,
this does not work in JavaScript,

100
00:06:52.432 --> 00:06:54.926
import Melon = require ('./melon').

101
00:06:54.926 --> 00:06:57.895
If we look at that,
well, there's the class.

102
00:06:57.895 --> 00:07:02.326
And we can use the Melon constructor,
we can cut it into slices,

103
00:07:02.326 --> 00:07:04.740
everything type checks here.

104
00:07:04.740 --> 00:07:09.759
So I know that the TypeScript core team,
they're trying to steer people in

105
00:07:09.759 --> 00:07:14.970
the direction of, we're trying to
use ES modules and things like that.

106
00:07:14.970 --> 00:07:19.705
But this is a useful escape hatch to know
about, where if you didn't wanna change

107
00:07:19.705 --> 00:07:24.070
the way your project is compiled,
you could still import in this way.

108
00:07:24.070 --> 00:07:30.685
It'll compile to a totally runnable thing,
it's just not an ECMAScript import.

109
00:07:30.685 --> 00:07:33.346
It's a different kind of import,

110
00:07:33.346 --> 00:07:38.310
a specific way that TypeScript
lets you import things.

111
00:07:38.310 --> 00:07:39.640
It looks a little bit like this.

112
00:07:40.650 --> 00:07:43.910
Almost a CJS import, but
we're using the import keyword here.

113
00:07:51.584 --> 00:07:58.070
Rohit says, when you use the syntax
in React, then it'll give an error.

114
00:07:59.390 --> 00:08:03.466
I'm not sure I believe
that that is always true.

115
00:08:03.466 --> 00:08:08.177
I think it's likely you should be able to
adjust your compiler settings to allow

116
00:08:08.177 --> 00:08:09.030
this to work.

117
00:08:13.587 --> 00:08:18.445
Yeah, LJ in chat says it seems weird that
we have so many different options for

118
00:08:18.445 --> 00:08:21.527
import, export,
it seems a little confusing.

119
00:08:21.527 --> 00:08:24.125
I agree,
this is why we're talking about it.

120
00:08:24.125 --> 00:08:28.866
We're in kind of a transitionary
state where old code exists,

121
00:08:28.866 --> 00:08:30.570
new code also exists.

122
00:08:30.570 --> 00:08:32.857
We probably have to
consume a variety of both.

123
00:08:32.857 --> 00:08:36.201
And we need to be able to manage that,
both in library and app code.

124
00:08:36.201 --> 00:08:40.138
So this is part of the reason why
it's worthwhile to focus on this.

125
00:08:43.066 --> 00:08:47.399
&gt;&gt; Will that compile to CommonJS or
ES modules,

126
00:08:47.399 --> 00:08:53.060
depending on what you set the-
&gt;&gt; Yeah, let's let's go look.

127
00:08:53.060 --> 00:08:56.414
So I'm gonna clear this out,
and I'm gonna say,

128
00:09:01.840 --> 00:09:07.917
Actually, I can do this style of
import with any CommonJS module,

129
00:09:07.917 --> 00:09:14.333
even if it's not that special type
where this is sort of a last resort.

130
00:09:16.825 --> 00:09:18.520
So I could still do that.

131
00:09:18.520 --> 00:09:22.779
Now, I don't have to, there's a better
option here, there's the wildcard import.

132
00:09:27.523 --> 00:09:31.230
And look what it compiles to,
perfectly fine CommonJS.

133
00:09:32.710 --> 00:09:35.641
It is literally the same thing as this,

134
00:09:43.509 --> 00:09:48.068
Except the key difference here, and
by the way, with this import here,

135
00:09:48.068 --> 00:09:52.653
look at what it's having to do,
well, cuz we're compiling out to CJS.

136
00:09:52.653 --> 00:09:57.299
So it has to put some poly filling
in there to make that possible.

137
00:09:57.299 --> 00:10:01.317
Here's a little thing have you do
default exports, things like that.

138
00:10:01.317 --> 00:10:05.739
But the important thing at the bottom
is we should just see a require.

139
00:10:06.978 --> 00:10:09.960
Sorry, __importStar(require), right?

140
00:10:09.960 --> 00:10:15.856
So this is actually the real import,
and then it's sort of processing what

141
00:10:15.856 --> 00:10:22.430
the require returns into something that
has a default and all that kind of stuff.

142
00:10:22.430 --> 00:10:27.722
But the important thing is,
in terms of how the import is performed,

143
00:10:27.722 --> 00:10:30.350
it's very, very similar.

144
00:10:30.350 --> 00:10:34.969
The thing that gives us a little
bit extra flexibility here is,

145
00:10:34.969 --> 00:10:39.948
in the wildcard import case,
this thing has to be namespace-ish.

146
00:10:39.948 --> 00:10:44.652
You have to be able to sort of access
several independent things on it.

147
00:10:44.652 --> 00:10:49.400
If we looked at our Banana module here,
this is a namespace-ish thing.

148
00:10:49.400 --> 00:10:52.704
There's a property called
Banana with a capital B, and

149
00:10:52.704 --> 00:10:54.820
its value is the Banana class.

150
00:10:54.820 --> 00:10:56.110
That's a namespace thing, right?

151
00:10:56.110 --> 00:10:59.607
It's an object that has some specific
things that we could pick off of

152
00:10:59.607 --> 00:11:00.660
it and use.

153
00:11:00.660 --> 00:11:03.780
In our Melon class, that's not the case.

154
00:11:03.780 --> 00:11:09.185
So you can almost think of this
type of import, in terms of what's

155
00:11:09.185 --> 00:11:14.880
happening behind the scenes,
as a special case of this, right?

156
00:11:14.880 --> 00:11:21.498
This works even if it's
not namespace-like.

157
00:11:21.498 --> 00:11:25.888
The only time I reach for
this is when no other options will do.

158
00:11:25.888 --> 00:11:29.640
I would prefer to use ECMAScript
imports wherever I can.

159
00:11:29.640 --> 00:11:33.797
But I would prefer to use this,
especially in library code,

160
00:11:33.797 --> 00:11:39.272
over forcing everyone who uses my library
to change the way their imports work.

161
00:11:39.272 --> 00:11:41.410
That seems like an imposition.

