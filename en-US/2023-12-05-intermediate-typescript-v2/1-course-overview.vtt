WEBVTT

1
00:00:00.000 --> 00:00:04.211
Let's talk a little bit about what we
are going to cover in this course.

2
00:00:04.211 --> 00:00:09.254
The first topic we're going to
get in to is declaration merging.

3
00:00:09.254 --> 00:00:14.692
When I learned about this concept,
which describes how various things

4
00:00:14.692 --> 00:00:20.594
kind of stack on top of each other to
form importable and exportable symbols.

5
00:00:20.594 --> 00:00:23.969
This changed the way I looked
at TypeScript forever,

6
00:00:23.969 --> 00:00:29.069
it was sort of where I went from having to
memorize a bunch of special case things.

7
00:00:29.069 --> 00:00:32.005
And sort of, I knew that A,
B and C happened, and

8
00:00:32.005 --> 00:00:34.525
I have to remember that they will happen.

9
00:00:34.525 --> 00:00:39.626
Once I learned declaration merging,
it's almost like I found the core

10
00:00:39.626 --> 00:00:44.398
foundational idea that was responsible for
all of this behavior.

11
00:00:44.398 --> 00:00:48.097
It's like finding a law of physics
that explains a bunch of different

12
00:00:48.097 --> 00:00:49.003
observations.

13
00:00:49.003 --> 00:00:55.149
So I figured to start with that because
for me it was like a mind-blowing thing,

14
00:00:55.149 --> 00:00:58.376
and I think it might be for
others as well.

15
00:00:58.376 --> 00:01:02.926
We'll move on then to talk about
extreme types, so, top and

16
00:01:02.926 --> 00:01:08.549
bottom types, respectively,
describe types that can accept any value,

17
00:01:08.549 --> 00:01:11.600
or types that can accept no value at all.

18
00:01:11.600 --> 00:01:16.225
So, we'll talk about, actual top and
bottom types, which are both

19
00:01:16.225 --> 00:01:21.029
present in TypeScript, as well as
almost top and almost bottom types.

20
00:01:21.029 --> 00:01:24.071
So if you've ever seen the object type, or

21
00:01:24.071 --> 00:01:29.576
the empty object type which is represented
by a pair of open and close braces.

22
00:01:29.576 --> 00:01:34.701
We'll talk about those and we'll talk
about unit types, which are types that

23
00:01:34.701 --> 00:01:39.765
can only hold exactly one value, the set
that they represent its of size one.

24
00:01:39.765 --> 00:01:44.904
We will then move on to discussing
knowledge values, how do we represent

25
00:01:44.904 --> 00:01:49.889
values which may or may not be present,
how do we handle those values?

26
00:01:49.889 --> 00:01:55.412
What are different types we can use,
different operators we can use to handle,

27
00:01:55.412 --> 00:02:01.362
things that could be absent, or things
that indicate they're empty in TypeScript.

28
00:02:01.362 --> 00:02:05.674
It's important to get this right,
because this improves

29
00:02:05.674 --> 00:02:10.697
the soundness of your code if you
can stick to a couple conventions.

30
00:02:10.697 --> 00:02:15.767
So, it's true now, and
will be true for the next couple of

31
00:02:15.767 --> 00:02:22.304
years that the JavaScript ecosystem
is moving towards Native ES modules.

32
00:02:22.304 --> 00:02:24.904
You may not have seen this or
you may have, but

33
00:02:24.904 --> 00:02:27.929
you can create files that
have an MJS extension now.

34
00:02:27.929 --> 00:02:30.564
And I know we've all been writing for

35
00:02:30.564 --> 00:02:36.522
many years JavaScript modules that use
the import keyword and the export keyword.

36
00:02:36.522 --> 00:02:43.199
And it's true, we're using module syntax
there, this has been around since 2015.

37
00:02:43.199 --> 00:02:48.290
The big change is that now we're
getting to a point where you can take

38
00:02:48.290 --> 00:02:53.558
code that looks like that and
run it directly in a browser, or directly

39
00:02:53.558 --> 00:02:59.479
in Node JS using that MJS extension or
there other ways, we'll get into that.

40
00:02:59.479 --> 00:03:03.740
Because we're at this transition point,
more important now than ever,

41
00:03:03.740 --> 00:03:06.291
it's like knowing how this works, right?

42
00:03:06.291 --> 00:03:10.614
Knowing what you're looking at,
how to deal with this,

43
00:03:10.614 --> 00:03:15.930
as JavaScript sort of moves towards
this being the way we write code and

44
00:03:15.930 --> 00:03:18.199
we distribute code, right?

45
00:03:18.199 --> 00:03:22.119
You'll probably run into situations where
you're dealing with legacy stuff that

46
00:03:22.119 --> 00:03:25.599
doesn't do that yet, and then modern
stuff that's doing this already.

47
00:03:25.599 --> 00:03:29.257
Almost certainly you're gonna have
a code base with something in your Node

48
00:03:29.257 --> 00:03:32.349
modules folder that is old and
something that's very modern.

49
00:03:32.349 --> 00:03:36.662
So we're gonna look at
how we can manage that,

50
00:03:36.662 --> 00:03:42.864
while we're sort of, stepping up
to this new way of doing things.

51
00:03:42.864 --> 00:03:48.098
So chapter 6, we're gonna pick up where
we left off in TypeScript fundamentals,

52
00:03:48.098 --> 00:03:51.709
which was the last chapter we
went through was generics.

53
00:03:51.709 --> 00:03:56.267
We just started introducing
this concept of a type param,

54
00:03:56.267 --> 00:04:01.020
making a type that is expressed
in terms of a type parameter.

55
00:04:01.020 --> 00:04:05.331
We're gonna talk about how we can
apply constraints to a type param,

56
00:04:05.331 --> 00:04:08.169
which is sort of like
a minimum requirement.

57
00:04:08.169 --> 00:04:09.869
So you can't just feed it any type,

58
00:04:09.869 --> 00:04:12.429
you have to feed it a type
that meets the requirement.

59
00:04:12.429 --> 00:04:14.676
And we'll talk about scopes, so

60
00:04:14.676 --> 00:04:19.419
type parameters can have scopes just
like variables can have scopes.

61
00:04:19.419 --> 00:04:23.301
That will let us start to
take on conditional types,

62
00:04:23.301 --> 00:04:27.798
you can think of this as, if then or
if then else for types, or

63
00:04:27.798 --> 00:04:31.792
if you wanna think of it kind
of the ternary operator.

64
00:04:31.792 --> 00:04:36.707
Where you can use a condition,
question mark, expression for true,

65
00:04:36.707 --> 00:04:42.389
question mark expression for false, this
is kind of what a conditional type is.

66
00:04:42.389 --> 00:04:46.302
It kind of seems odd if you've
never looked at this before,

67
00:04:46.302 --> 00:04:48.885
why would you need an if then for types,

68
00:04:48.885 --> 00:04:53.839
but we'll look at how we can model some
things that were just not possible.

69
00:04:53.839 --> 00:04:58.655
And make our types more reusable
through using this feature.

70
00:04:58.655 --> 00:05:03.563
Something that's possible with
conditional types is extracting a type

71
00:05:03.563 --> 00:05:05.739
parameter out of another type.

72
00:05:05.739 --> 00:05:10.426
And we can do this within
the condition of the conditional

73
00:05:10.426 --> 00:05:12.971
type using the infer keyword.

74
00:05:12.971 --> 00:05:16.962
This lets us sort of pluck something
out of an existing type that,

75
00:05:16.962 --> 00:05:21.464
we may not have access to this inner
thing that's within the outer thing,

76
00:05:21.464 --> 00:05:23.809
we may only be given this outer thing.

77
00:05:23.809 --> 00:05:26.403
So it's a really important concept, and

78
00:05:26.403 --> 00:05:30.636
a really important language feature
that lets us transform types.

79
00:05:32.854 --> 00:05:37.983
Our second last major topic
is going to be mapped types,

80
00:05:37.983 --> 00:05:41.256
think of this kind of array.map but

81
00:05:41.256 --> 00:05:45.634
for types,
maybe we're taking an interface.

82
00:05:45.634 --> 00:05:50.159
And then we're producing another interface

83
00:05:50.159 --> 00:05:55.158
with the same keys, but
different value types for

84
00:05:55.158 --> 00:06:00.529
each field on class or
each property on an interface.

85
00:06:00.529 --> 00:06:03.699
We're going to return to
an example that we started

86
00:06:03.699 --> 00:06:07.681
in TypeScript fundamentals before,
this was a type registry,

87
00:06:07.681 --> 00:06:11.754
where we were building a data layer
with a fetch record function.

88
00:06:11.754 --> 00:06:16.687
And this led us,
based on arguments that we

89
00:06:16.687 --> 00:06:22.175
passed to a function have
a proper return type.

90
00:06:22.175 --> 00:06:27.406
We started the process of kind of solving
this problem in TypeScript fundamentals

91
00:06:27.406 --> 00:06:32.352
when we were studying type queries,
specifically, indexed access types.

92
00:06:32.352 --> 00:06:38.621
We were using this keyword, where we got
the the property names have an interface.

93
00:06:38.621 --> 00:06:42.880
And after we cover most of
the content in this course,

94
00:06:42.880 --> 00:06:46.381
we will be set up to sort
of finish the job, or

95
00:06:46.381 --> 00:06:51.129
we can start to type the values
coming out of this function.

96
00:06:51.129 --> 00:06:57.451
And then finally, we're gonna talk
about a really interesting concept,

97
00:06:57.451 --> 00:07:03.489
it's starting to get into, type theory,
the branch of mathematics.

98
00:07:03.489 --> 00:07:08.288
Don't worry, I've spent a lot of time
making this as relatable as I can make it,

99
00:07:08.288 --> 00:07:11.617
but we're gonna talk about
variance over type params.

100
00:07:11.617 --> 00:07:16.648
So this is covariance,
contravariance, by variance and

101
00:07:16.648 --> 00:07:21.985
invariance, and
TypeScript as of I think version 4.7, so

102
00:07:21.985 --> 00:07:28.780
this is kind of a new thing for TypeScript
5, or within the last few releases.

103
00:07:28.780 --> 00:07:30.750
It gives us a way to state,

104
00:07:30.750 --> 00:07:35.779
that we wanna operate in a covariant way,
or a contravariant way.

105
00:07:35.779 --> 00:07:41.345
So we'll learn what those terms mean,
we'll learn the TypeScript syntax for

106
00:07:41.345 --> 00:07:45.914
that, and I will do my best to
make this very easy to understand.

107
00:07:45.914 --> 00:07:48.038
With that, let's jump in.

