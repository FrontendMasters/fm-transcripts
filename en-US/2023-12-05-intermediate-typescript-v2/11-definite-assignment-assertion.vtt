WEBVTT

1
00:00:00.200 --> 00:00:03.569
The next thing we're gonna talk about
is definite assignment assertion.

2
00:00:03.569 --> 00:00:08.597
It also involves an exclamation mark and
to do this part,

3
00:00:08.597 --> 00:00:14.149
this exercise, we're going to
need to go into our tsconfig for

4
00:00:14.149 --> 00:00:17.921
this notes project and we're gonna turn on

5
00:00:17.921 --> 00:00:22.569
strictPropertyInitialization and
set it to true.

6
00:00:22.569 --> 00:00:26.520
You should see some errors pop up
on the left, and we do, perfect.

7
00:00:26.520 --> 00:00:30.555
So make sure you turn that on,
we're gonna talk about what that is, and

8
00:00:30.555 --> 00:00:31.710
how we deal with it.

9
00:00:31.710 --> 00:00:34.555
So it's strictPropertyInitialization.

10
00:00:38.923 --> 00:00:43.124
So I have a class here and
it's called ThingWithAsyncSetup and

11
00:00:43.124 --> 00:00:48.356
I've done something that's a little odd
here, I have something async inside

12
00:00:48.356 --> 00:00:53.684
of a constructor and some might argue
I'm already doing something a bit weird.

13
00:00:53.684 --> 00:00:58.086
But I might pushback against that and
say, well look,

14
00:00:58.086 --> 00:01:01.447
I'm kinda just kicking off the promise.

15
00:01:01.447 --> 00:01:07.313
I'm doing nothing in the constructor that
depends on the promise being resolved,

16
00:01:07.313 --> 00:01:12.000
and it looks like I have some state
I can have in place where I can from

17
00:01:12.000 --> 00:01:16.693
the outside observe whether whatever
this setup promise does I can

18
00:01:16.693 --> 00:01:21.937
observe that it is successfully,
has successfully completed, right?

19
00:01:21.937 --> 00:01:25.451
The dot then will be called and
then I'll see this flip.

20
00:01:25.451 --> 00:01:29.550
And I have here isSetup as a class
field set to a boolean but

21
00:01:29.550 --> 00:01:34.848
I'm getting an error, and the error
is that is set up has no initializer,

22
00:01:34.848 --> 00:01:38.884
and it's not definitely
assigned in the constructor.

23
00:01:38.884 --> 00:01:43.195
So if I were to take this one line here
and move it up into the constructor,

24
00:01:43.195 --> 00:01:48.073
the error goes away, and that's because
TypeScript analyzes the constructor,

25
00:01:48.073 --> 00:01:50.616
it looks at all the class
fields that don't

26
00:01:50.616 --> 00:01:54.030
have an initializer which
would look like this, right?

27
00:01:54.030 --> 00:01:58.052
I mean, you might argue in this scenario,

28
00:01:58.052 --> 00:02:02.764
I should do this, but
this is a good example here.

29
00:02:02.764 --> 00:02:06.717
The problem here is Typescript saying,
I don't know,

30
00:02:06.717 --> 00:02:11.089
it doesn't seem like,
at least in the general case isSetup,

31
00:02:11.089 --> 00:02:16.492
like by the time we return an instance,
is that actually gonna be a Boolean?

32
00:02:16.492 --> 00:02:19.415
It seems like it might be undefined.

33
00:02:19.415 --> 00:02:22.972
And why do we think that it's saying that?

34
00:02:22.972 --> 00:02:25.384
Does anyone have any hypotheses?

35
00:02:25.384 --> 00:02:26.928
Any guesses?

36
00:02:26.928 --> 00:02:28.472
I mean, I'm setting it in here.

37
00:02:33.811 --> 00:02:35.977
&gt;&gt; Is that run after the constructor?

38
00:02:35.977 --> 00:02:42.622
&gt;&gt; Typescript sees a callback here,
and it's like, callbacks.

39
00:02:42.622 --> 00:02:47.874
I don't know when promise invokes
this callback, I don't know if,

40
00:02:47.874 --> 00:02:52.947
by the time this promise function,
the constructor for promise,

41
00:02:52.947 --> 00:02:58.762
by the time it returns, how do I know
that this callback has been completed?

42
00:02:58.762 --> 00:03:04.416
It doesn't know effectively that
once we advance beyond line 49,

43
00:03:04.416 --> 00:03:08.898
whether isSetup will be set,
and in the general case,

44
00:03:08.898 --> 00:03:14.074
that is a perfectly valid thing
to be concerned about, right?

45
00:03:14.074 --> 00:03:18.262
You could get an instance of
thing with AsyncSetup, and

46
00:03:18.262 --> 00:03:23.609
it claims to have a boolean value for
setup, but it could be undefined,

47
00:03:23.609 --> 00:03:29.867
except this callback here, we would call
this like the promise executor, right?

48
00:03:29.867 --> 00:03:35.102
It's the thing you use to,
it's the function that represents

49
00:03:35.102 --> 00:03:41.147
sort of the work or the beginning of
the work that could be async, right?

50
00:03:41.147 --> 00:03:45.373
This is invoked synchronously
within the promise constructor.

51
00:03:45.373 --> 00:03:50.721
So I know that by the time we
assign the promise to setupPromise,

52
00:03:50.721 --> 00:03:55.487
this function's already done,
it has been completed.

53
00:03:55.487 --> 00:04:00.736
I know, definitely, that isSetup,
this line of code on line 50,

54
00:04:00.736 --> 00:04:04.002
that will have been run,
I know for a fact.

55
00:04:04.002 --> 00:04:06.116
Now, I also know that TypeScript,

56
00:04:06.116 --> 00:04:09.710
there's no way to articulate
that in TypeScript and to say,

57
00:04:09.710 --> 00:04:14.645
this is a synchronous function, you should
assume that this is completed before,

58
00:04:14.645 --> 00:04:19.177
like chill out TypeScript, this has
been run, there's no way to say that.

59
00:04:19.177 --> 00:04:24.541
But I can say, look,
I know about this particular callback,

60
00:04:24.541 --> 00:04:29.390
and I'm gonna say,
isSetup is definitely going to have

61
00:04:29.390 --> 00:04:34.154
been assigned by the time
the constructor completes.

62
00:04:34.154 --> 00:04:38.774
Now what I've given you here,
it's actually a very,

63
00:04:38.774 --> 00:04:43.797
this is a true example, and
it does actually guarantee that

64
00:04:43.797 --> 00:04:48.620
by the time you get an instance
of ThingWithAsyncSetup,

65
00:04:48.620 --> 00:04:53.258
it's gonna have a boolean value there,
that is true.

66
00:04:53.258 --> 00:04:56.716
Sometimes you might know something else,

67
00:04:56.716 --> 00:05:01.900
like you might know that look,
this object is gonna be created,

68
00:05:01.900 --> 00:05:08.252
but no one's gonna be working with it or
using it until this thing is done to it.

69
00:05:08.252 --> 00:05:12.400
Maybe you're initializing objects and
you're collecting them, and

70
00:05:12.400 --> 00:05:16.891
then after they're already initialized,
you set some stuff up on them, and

71
00:05:16.891 --> 00:05:21.659
you want downstream consumers to not have
to deal with the possibility that a bunch

72
00:05:21.659 --> 00:05:23.482
of things could be undefined.

73
00:05:23.482 --> 00:05:28.330
And so you might blur the lines here and
say, okay, technically TypeScript,

74
00:05:28.330 --> 00:05:32.666
you're correct, these fields might
not have been initialized, but

75
00:05:32.666 --> 00:05:36.580
I'll take care of initializing
them myself from the outside.

76
00:05:36.580 --> 00:05:41.800
And the thing I wanna be sure of is
that whoever is working with isSetup,

77
00:05:41.800 --> 00:05:46.846
they don't have to deal with this
type here, they don't have to deal

78
00:05:46.846 --> 00:05:51.560
with the truly honest state of
where it is after instantiation.

79
00:05:51.560 --> 00:05:56.398
You might wanna say, look, right after I
create it, I'm doing this thing to it, and

80
00:05:56.398 --> 00:05:59.762
I'm always doing that, and
I'll take responsibility for

81
00:05:59.762 --> 00:06:04.292
making sure that that's true and that no
one gets a hold of these things before.

82
00:06:04.292 --> 00:06:08.609
So an example of where you might see
this is like framework level code,

83
00:06:08.609 --> 00:06:12.707
where objects are created,
not by invoking the constructor, but

84
00:06:12.707 --> 00:06:17.711
by some other process like they're created
as a side effect of doing something.

85
00:06:17.711 --> 00:06:19.740
And then you can be assured that,

86
00:06:19.740 --> 00:06:23.954
whenever we go through this pathway
where these things are created.

87
00:06:23.954 --> 00:06:26.465
I'm grabbing that instance and

88
00:06:26.465 --> 00:06:31.208
I'm doing a bunch of stuff to it,
and then when I hand it off,

89
00:06:31.208 --> 00:06:35.871
I want it to be represented as
if the stuff was always there.

90
00:06:35.871 --> 00:06:40.532
You're taking on risk there, but
sometimes it's a valid pattern.

91
00:06:40.532 --> 00:06:46.534
Sometimes it's preferable over modeling
an interface, or a class that represents,

92
00:06:46.534 --> 00:06:51.217
the partially set up thing, and
then you have another class that you

93
00:06:51.217 --> 00:06:56.228
have to deserialize and serialize into so
you get the fully set up thing,

94
00:06:56.228 --> 00:07:00.949
it can get complicated if you try
to stick very rigidly to the rules.

95
00:07:00.949 --> 00:07:05.229
Those are two use cases for
definitely assignment operator.

96
00:07:05.229 --> 00:07:10.157
&gt;&gt; Is it a good practice to use
the non-knowledge assertion operator

97
00:07:10.157 --> 00:07:11.742
in production code?

98
00:07:11.742 --> 00:07:13.858
&gt;&gt; Non-null assertion operator.

99
00:07:13.858 --> 00:07:14.818
&gt;&gt; The exclamation point.

100
00:07:14.818 --> 00:07:20.139
&gt;&gt; The exclamation point, so what I
said before, and I'll stick to it here.

101
00:07:20.139 --> 00:07:23.549
I use this all the time in my tests.

102
00:07:23.549 --> 00:07:28.929
I try to not use it in applications,
in libraries, in any code that's actually

103
00:07:28.929 --> 00:07:34.069
running and the reason is the mode of
failure is usually unacceptable to me,

104
00:07:34.069 --> 00:07:40.127
it'll just throw your codes interrupted,
and it'll fail however, it's gonna fail.

105
00:07:40.127 --> 00:07:43.992
And I usually like to,
like I would say, if you want this

106
00:07:43.992 --> 00:07:48.779
equivalent thing in production,
what you should really do is this.

107
00:08:03.403 --> 00:08:04.263
Do this.

108
00:08:09.925 --> 00:08:14.101
And then write something explicit,
like how to handle,

109
00:08:14.101 --> 00:08:18.018
the case where it's not there,
just use a type card.

110
00:08:18.018 --> 00:08:22.688
In tests, this will get very messy
cuz I might, on every single line,

111
00:08:22.688 --> 00:08:27.775
I get a big JSON object like back that
has tons of properties and things on it.

112
00:08:27.775 --> 00:08:32.126
My test would be three quarters,
like by line count.

113
00:08:32.126 --> 00:08:35.073
Type guards and
safely finding if things are there and

114
00:08:35.073 --> 00:08:39.792
throwing very specific errors, it's not
just that the outer object wasn't there,

115
00:08:39.792 --> 00:08:43.020
but the inner object too and
the inner inner inner object.

116
00:08:43.020 --> 00:08:48.740
And that's where using this
non-null assertion operator,

117
00:08:48.740 --> 00:08:52.920
it's valuable cuz all I
want is to throw the,

118
00:08:52.920 --> 00:08:58.420
as I try to probe into this object,
drill into this object,

119
00:08:58.420 --> 00:09:05.020
and this is a very concise way of
doing that, it's easier to maintain,

120
00:09:05.020 --> 00:09:10.746
your test remains a lot more readable,
but I don't use this.

121
00:09:10.746 --> 00:09:18.252
I'm not gonna speak in absolutes here,
it would have to be exceptional case for

122
00:09:18.252 --> 00:09:24.190
me to use this in production code,
not even a production code,

123
00:09:24.190 --> 00:09:28.806
any code that's outside
of the testing sphere.

124
00:09:28.806 --> 00:09:33.667
Cuz you can always do this and
this is much more graceful error handling,

125
00:09:33.667 --> 00:09:38.369
this is okay when throwing is
the desired outcome, that is an absolute

126
00:09:38.369 --> 00:09:43.325
statement I'll make because that's
exactly what I'm near it'll throw

127
00:09:46.440 --> 00:09:49.553
&gt;&gt; Is there a difference between [COUGH]

128
00:09:49.553 --> 00:09:55.478
using the exclamation point on 53 and
using the declare keyword?

129
00:09:55.478 --> 00:09:56.436
&gt;&gt; Like this?

130
00:10:02.183 --> 00:10:05.209
That's interesting.

131
00:10:05.209 --> 00:10:10.519
I wouldn't necessarily do this.

132
00:10:10.519 --> 00:10:13.026
I'm actually surprised that this works.

133
00:10:13.026 --> 00:10:16.767
I use declare mostly in
ambient type information, or

134
00:10:16.767 --> 00:10:22.006
when I'm making a mod, like a type
declaration, which we'll see later,

135
00:10:22.006 --> 00:10:26.411
where you can do that,
you can augment types in other modules or

136
00:10:26.411 --> 00:10:30.263
in the global scope, but
I generally don't use this.

137
00:10:30.263 --> 00:10:35.455
It does appear to work,
it appears to work.

138
00:10:35.455 --> 00:10:40.518
I would be kind of, if I saw this in
a poll request, I would comment on it and

139
00:10:40.518 --> 00:10:45.015
say, you're asking people to
understand that you can do this and

140
00:10:45.015 --> 00:10:48.286
there's an equally effective
way to do this and

141
00:10:48.286 --> 00:10:53.230
it's much more common and people will
know it when they come across it.

142
00:10:53.230 --> 00:10:57.213
But that's interesting,
you taught me something here.

143
00:10:57.213 --> 00:11:00.714
I guess we're saying what we're
doing there with declare,

144
00:11:00.714 --> 00:11:03.664
if I had to guess,
I don't know this for a fact, but

145
00:11:03.664 --> 00:11:06.842
I'll explain how my mental
model is processing that.

146
00:11:06.842 --> 00:11:11.584
When we say declare,
we might be stating that,

147
00:11:11.584 --> 00:11:16.207
this is a boolean,
it's of type boolean, and

148
00:11:16.207 --> 00:11:21.069
it's sort of a different
thing then checking for

149
00:11:21.069 --> 00:11:24.292
definite assignment, right?

150
00:11:24.292 --> 00:11:30.698
You're really, yeah,
that's the best way I can articulate it.

151
00:11:30.698 --> 00:11:36.070
I'd recommend using this,
I don't think I've ever seen the use

152
00:11:36.070 --> 00:11:42.432
of declare before field unless it's in
a declaration file, like a DTS file.

153
00:11:42.432 --> 00:11:47.275
&gt;&gt; I've ended up having to use it like in
a number of projects where I'm injecting,

154
00:11:47.275 --> 00:11:50.568
setting that to a bad service,
using that decorator.

155
00:11:50.568 --> 00:11:54.111
And it's probably cause like my TS config
wasn't set up right or something, but

156
00:11:54.111 --> 00:11:56.562
it would complain about
the exclamation point there but

157
00:11:56.562 --> 00:11:58.797
it wouldn't complain about the declares.

158
00:11:58.797 --> 00:12:00.849
&gt;&gt; I see like a collision of syntax.

159
00:12:00.849 --> 00:12:06.096
Yeah, I would use declare
there given that it works, but

160
00:12:06.096 --> 00:12:13.436
man, is that uncommon and please file
a bug report because I think that's odd.

161
00:12:13.436 --> 00:12:18.567
It's odd to the point where I'm not
sure it will continue to work that way,

162
00:12:18.567 --> 00:12:20.043
it's that unusual.

163
00:12:20.043 --> 00:12:22.901
It'll work in declaration files,

164
00:12:22.901 --> 00:12:27.857
all of definitelytyped like
that's declared everywhere but

165
00:12:27.857 --> 00:12:32.252
in this space,
I've never seen that, interesting.

166
00:12:32.252 --> 00:12:37.411
I believe you though, there are all sorts
of typescript syntax things that sort

167
00:12:37.411 --> 00:12:42.339
of collide with other things like this,
this is a when you mix this with JSX,

168
00:12:42.339 --> 00:12:47.046
it's quite interesting here,
this is why we don't write arrays like,

169
00:12:49.526 --> 00:12:55.041
This is popular for a long time, but
this makes it complicated in JSX,

170
00:12:55.041 --> 00:13:00.089
where the parsers get overwhelmed
with the same kind of syntax,

171
00:13:00.089 --> 00:13:03.940
meaning different things
in different spaces.

