WEBVTT

1
00:00:00.180 --> 00:00:02.100
&gt;&gt; Brian Holt: Let's talk
about testing custom hooks.

2
00:00:03.260 --> 00:00:09.193
Like one of the big reasons that we
actually want to use custom hooks,

3
00:00:09.193 --> 00:00:13.298
so we're gonna test,
use pizza of the day here.

4
00:00:13.298 --> 00:00:16.631
But it's really nice that we have
these custom hooks because it,

5
00:00:16.631 --> 00:00:18.764
they've become extremely easy to test.

6
00:00:18.764 --> 00:00:19.759
And then you can make sure,

7
00:00:19.759 --> 00:00:22.535
epecially if you have this important
hook that's used in a bunch of places.

8
00:00:23.605 --> 00:00:27.657
Again, if we're showing pizza everywhere,
and we particularly use pizza of the day,

9
00:00:27.657 --> 00:00:30.808
we're gonna use this in 30
different places in our code bases.

10
00:00:30.808 --> 00:00:34.965
We can test this in various different ways
to make sure that it works across various

11
00:00:34.965 --> 00:00:39.135
different environments, becomes a very
well stable and reliable piece of code.

12
00:00:41.400 --> 00:00:44.350
The thing that makes me laugh about some
of these tests, though, is they almost

13
00:00:44.350 --> 00:00:47.520
always end up being longer than the
component themselves, it's very normal.

14
00:00:47.520 --> 00:00:52.976
Create a new file here, call it

15
00:00:52.976 --> 00:00:59.007
usePizzaOfTheDay.test.jsx, okay?

16
00:00:59.007 --> 00:01:04.881
We're gonna say import expect,

17
00:01:04.881 --> 00:01:09.711
test ,vi, from vitest.

18
00:01:09.711 --> 00:01:13.926
Import render from

19
00:01:13.926 --> 00:01:19.007
@testing-library/react
&gt;&gt; Brian Holt: And

20
00:01:19.007 --> 00:01:23.323
import createFetchMock.

21
00:01:27.094 --> 00:01:31.647
&gt;&gt; Brian Holt: From vitest-fetch-mock,

22
00:01:31.647 --> 00:01:36.390
and then of course, import,

23
00:01:36.390 --> 00:01:41.144
so pizza, use pizza the day.

24
00:01:44.234 --> 00:01:46.844
Yeah, for whatever reason,
I did this as a named export.

25
00:01:46.844 --> 00:01:50.659
It's so weird that I would do that, but

26
00:01:50.659 --> 00:01:55.064
I did, so
we're going to import it that way.

27
00:01:57.487 --> 00:02:00.597
&gt;&gt; Brian Holt: usePizzaUpTheDay,
like that.

28
00:02:04.941 --> 00:02:10.293
&gt;&gt; Brian Holt: const fetchMocker
= createFetchMock,

29
00:02:10.293 --> 00:02:15.916
all things that we've done before,
pass in vi,

30
00:02:15.916 --> 00:02:21.004
fetchMocker.enableMocks, there we go.

31
00:02:21.004 --> 00:02:23.185
We're gonna make a testpizza here.

32
00:02:25.936 --> 00:02:29.357
&gt;&gt; Brian Holt: So I put calabrese in here.

33
00:02:32.499 --> 00:02:34.596
&gt;&gt; Brian Holt: I think I literally
just grabbed this out of the database.

34
00:02:34.596 --> 00:02:36.968
So "The calabrese pizza".

35
00:02:40.859 --> 00:02:42.989
&gt;&gt; Brian Holt: Category, "Supreme".

36
00:02:42.989 --> 00:02:48.041
I guess it's a supreme style pizza and
description.

37
00:02:48.041 --> 00:02:50.801
I'm not writing all that, so it's just
gonna be something shorter than that.

38
00:02:51.921 --> 00:02:57.438
So "lol pizza from Calabria" and

39
00:02:57.438 --> 00:03:04.718
image is /public/pizzas

40
00:03:04.718 --> 00:03:09.805
/calabrese.webp.

41
00:03:09.805 --> 00:03:13.708
And then the sizes is,

42
00:03:13.708 --> 00:03:18.639
this is the prices, right,

43
00:03:18.639 --> 00:03:23.981
12.25, 16.25,

44
00:03:23.981 --> 00:03:29.128
and the large is 20.25.

45
00:03:29.128 --> 00:03:31.341
Okay, good test pizza there.

46
00:03:36.581 --> 00:03:41.001
&gt;&gt; Brian Holt: So, how do you render
a hook outside of a component,

47
00:03:41.001 --> 00:03:44.918
that's a trick question, you can't right,

48
00:03:44.918 --> 00:03:49.152
a hook really works in
the context of a component.

49
00:03:50.382 --> 00:03:55.332
So we're gonna say function

50
00:03:55.332 --> 00:04:00.152
getPizzaOfTheDay and we're just gonna fake it out.

51
00:04:00.152 --> 00:04:06.214
We're gonna say, let pizza
&gt;&gt; Brian Holt: Function,

52
00:04:06.214 --> 00:04:09.631
TestComponent.

53
00:04:13.007 --> 00:04:17.678
&gt;&gt; Brian Holt: We're gonna say,
pizza = UsePizzaOfTheDay and

54
00:04:17.678 --> 00:04:18.855
return null.

55
00:04:22.113 --> 00:04:26.369
&gt;&gt; Brian Holt: We're gonna say
render(<TestComponent />), and

56
00:04:26.369 --> 00:04:31.638
then we're just going to return pizza,
right?

57
00:04:31.638 --> 00:04:33.249
That should work.

58
00:04:35.581 --> 00:04:39.081
&gt;&gt; Brian Holt: So it's gonna create a test
component that doesn't render anything,

59
00:04:39.081 --> 00:04:41.371
all it's gonna do is
just call the component.

60
00:04:42.531 --> 00:04:45.599
We're going to go as far to render
the component and throw it away cuz we

61
00:04:45.599 --> 00:04:49.141
actually don't really care what it renders
out at the end, it's gonna be null.

62
00:04:50.451 --> 00:04:54.569
But we're going to just keep that pizza
variable that it gets back from use pizza

63
00:04:54.569 --> 00:04:57.709
the day, and we're going to
return whatever that pizza is.

64
00:04:59.418 --> 00:05:01.015
&gt;&gt; Brian Holt: What is
pizza the first time?

65
00:05:03.637 --> 00:05:08.380
&gt;&gt; Brian Holt: Null, right,
usePizzaOfTheDay, what is it the first time, null,

66
00:05:08.380 --> 00:05:12.150
and then it calls the useEffect,
right?

67
00:05:12.150 --> 00:05:16.223
And then that's what we're
gonna get on subsequent, right?

68
00:05:16.223 --> 00:05:17.827
So, let's write a test of that, right?

69
00:05:17.827 --> 00:05:20.667
We wanna make sure that it's not giving
us something weird the first time.

70
00:05:21.847 --> 00:05:24.367
Gives null when first called,
that's what we expect.

71
00:05:26.877 --> 00:05:32.257
Async function, and we're gonna

72
00:05:32.257 --> 00:05:37.636
say fetch.mockResponseOnce,

73
00:05:37.636 --> 00:05:40.983
mockResponseOnce.

74
00:05:47.583 --> 00:05:52.572
I'm gonna say,

75
00:05:52.572 --> 00:05:58.060
JSON.stringify(testPizza),

76
00:05:58.060 --> 00:06:02.799
const pizza =

77
00:06:02.799 --> 00:06:07.288
getPizzaOfTheDay, and

78
00:06:07.288 --> 00:06:12.538
expect pizza to be null.

79
00:06:19.706 --> 00:06:26.444
&gt;&gt; Brian Holt: There we go, it works,
let's go make it something else.

80
00:06:26.444 --> 00:06:29.465
Use pizza of the day,
we want this to now return.

81
00:06:33.511 --> 00:06:37.166
&gt;&gt; Brian Holt: And there we go,
it expected null and it got lol.

82
00:06:37.166 --> 00:06:44.125
So that's not gonna work, there we go, null.

83
00:06:46.283 --> 00:06:48.733
&gt;&gt; Brian Holt: Now,
you might be looking at this like,

84
00:06:48.733 --> 00:06:51.412
this seems like it's kinda weird, right?

85
00:06:51.412 --> 00:06:55.272
That we're like faking a component
to get a hook out of it.

86
00:06:56.542 --> 00:07:00.208
And I wanted you to see how to do this
because I'm gonna show you how to just use

87
00:07:00.208 --> 00:07:02.555
the, what is it called,
renderHook function,

88
00:07:02.555 --> 00:07:05.088
which just does all of this for you.

89
00:07:05.088 --> 00:07:08.389
But I wanted to demystify a little
bit as like what this is doing for

90
00:07:08.389 --> 00:07:10.138
it doesn't do very much, right?

91
00:07:10.138 --> 00:07:12.518
It's just it's making a fake component.

92
00:07:12.518 --> 00:07:15.248
It's rendering it once and
then it's giving stuff out of it.

93
00:07:16.258 --> 00:07:18.041
That's all that this thing does for you.

94
00:07:18.041 --> 00:07:20.058
But we're gonna make this so
much simpler now.

95
00:07:21.410 --> 00:07:26.997
Get rid of all this just garbage,
get pizza of the day, no one likes that,

96
00:07:26.997 --> 00:07:32.427
and we're gonna get this function
here called renderHook from React.

97
00:07:32.427 --> 00:07:35.430
So instead of render,
we want renderHook like this.

98
00:07:37.620 --> 00:07:41.371
Then what we want instead is,

99
00:07:41.371 --> 00:07:46.022
on this line we're gonna say

100
00:07:46.022 --> 00:07:50.375
const result = renderHook, and

101
00:07:50.375 --> 00:07:54.276
you give it a function to call,

102
00:07:54.276 --> 00:07:58.195
usePizzaOfTheDay like this.

103
00:08:01.039 --> 00:08:05.376
&gt;&gt; Brian Holt: And then we're gonna
expect result.current to be null.

104
00:08:09.274 --> 00:08:11.343
&gt;&gt; Brian Holt: This got
a lot more succinct, right?

105
00:08:12.543 --> 00:08:16.143
This looks a little strange,
right, but at the same time,

106
00:08:16.143 --> 00:08:19.553
it's way less code that we have to write.

107
00:08:19.553 --> 00:08:23.431
All this is doing is this is creating
a fake component underneath the hood and

108
00:08:23.431 --> 00:08:27.147
then calls this function,
which is gonna call our hook for us.

109
00:08:27.147 --> 00:08:29.136
And then we're just pulling
up the results there.

110
00:08:31.303 --> 00:08:32.652
&gt;&gt; Brian Holt: Does that make sense?

111
00:08:35.103 --> 00:08:35.797
&gt;&gt; Brian Holt: Yeah.

112
00:08:35.797 --> 00:08:38.977
&gt;&gt; Speaker 2: Just wondering about the
formatting on line 20 const result

113
00:08:38.977 --> 00:08:40.027
in curly brackets.

114
00:08:40.027 --> 00:08:43.737
Is that because you said "pulling it out".
Is it a more complex object and

115
00:08:43.737 --> 00:08:47.136
we're just taking something
called results, okay, cool.

116
00:08:47.136 --> 00:08:51.323
&gt;&gt; Brian Holt: Same thing, yep, you're
just destructuring what you get back out

117
00:08:51.323 --> 00:08:54.712
of it, and
let's make sure I'm not telling you lies.

118
00:08:54.712 --> 00:08:59.872
But yeah, that that passes pretty cool,
just love the vitest tools as well.

119
00:08:59.872 --> 00:09:02.187
Like they're just so nice to work with.

120
00:09:02.187 --> 00:09:05.393
It's very easy to run all of
your tests all at once, or

121
00:09:05.393 --> 00:09:10.617
rerun certain ones of them, like let's say
I only wanna run certain patterns of them.

122
00:09:13.757 --> 00:09:17.206
You can hit f to only rerun failed tests,
which I don't have any so

123
00:09:17.206 --> 00:09:20.177
it's not doing that right now,
you can write a filter.

124
00:09:21.644 --> 00:09:27.388
So let's say I just want,
I could put like contact and

125
00:09:27.388 --> 00:09:34.694
then it'd be like, okay,
I'll only rerun that test for you.

126
00:09:34.694 --> 00:09:38.484
It's just a very nice tool to work with,
but it just hit h to show this and

127
00:09:38.484 --> 00:09:41.462
it'll show you all the different
things that it can do.

128
00:09:45.406 --> 00:09:51.970
&gt;&gt; Brian Holt: Okay, so
let's add another test.

129
00:09:51.970 --> 00:09:54.300
It's not super interesting that it's
just getting null the first time.

130
00:09:56.900 --> 00:09:59.930
So let's write another test here that we
make sure that it calls the right API.

131
00:10:01.904 --> 00:10:06.187
We're gonna add another one up here

132
00:10:06.187 --> 00:10:11.042
under testing library called waitFor,

133
00:10:11.042 --> 00:10:17.464
we'll use that in just a second
test to call the API and

134
00:10:17.464 --> 00:10:22.212
give back the pizza of the day, async.

135
00:10:22.212 --> 00:10:24.626
I can spell promise.

136
00:10:27.831 --> 00:10:31.026
&gt;&gt; Brian Holt: Okay, fetch, you can
actually just grab that from the top one

137
00:10:31.026 --> 00:10:35.145
here as well, so I'm gonna grab that,
I don't even know if this is necessary,

138
00:10:35.145 --> 00:10:40.938
if we're being honest,
&gt;&gt; Brian Holt: const

139
00:10:40.938 --> 00:10:47.202
result = renderHook,
same thing here.

140
00:10:51.636 --> 00:10:56.357
&gt;&gt; Brian Holt: usePizzaOfTheDay,
I don't know why we're giving

141
00:10:56.357 --> 00:11:00.985
an empty string there,
you don't have to, await

142
00:11:00.985 --> 00:11:07.671
waitFor, and it's kind of the same way
with the one that we were using before.

143
00:11:07.671 --> 00:11:11.506
We were just saying, hey, wait till
this happens and it looks like this.

144
00:11:11.506 --> 00:11:17.134
So we're gonna say, waitFor

145
00:11:17.134 --> 00:11:22.538
expect result.current to

146
00:11:22.538 --> 00:11:27.564
equal testPizza, okay?

147
00:11:27.564 --> 00:11:33.705
And then you just expect fetchMocker

148
00:11:33.705 --> 00:11:40.050
to be called with, toBeCalledWith

149
00:11:43.965 --> 00:11:49.104
&gt;&gt; Brian Holt: api/pizza-of-the-day.

150
00:11:49.104 --> 00:11:51.364
So let me explain a little
bit more on waitFor.

151
00:11:51.364 --> 00:11:53.674
It's kind of an interesting API.

152
00:11:53.674 --> 00:11:58.331
waitFor, basically says run this function
continually until it no longer throws

153
00:11:58.331 --> 00:11:58.944
an error.

154
00:12:00.680 --> 00:12:05.971
What does expect do when it fails
the test, throws an error, right?

155
00:12:05.971 --> 00:12:10.266
So you're basically saying like,
run this expectation again and

156
00:12:10.266 --> 00:12:13.420
again until it doesn't throw an error,
right?

157
00:12:13.420 --> 00:12:16.770
So until this test passed,
essentially run this again.

158
00:12:16.770 --> 00:12:18.927
And this one will wait a little
bit longer than our other one,

159
00:12:18.927 --> 00:12:21.508
I think It'll wait quite a while before,
I don't say quite a while, but

160
00:12:21.508 --> 00:12:23.437
several seconds before it
actually ends up failing.

161
00:12:25.207 --> 00:12:26.517
So let's see how we did here.

162
00:12:26.517 --> 00:12:30.487
It did work, but let's just,

163
00:12:30.487 --> 00:12:35.687
if you did this, it should wait a while.

164
00:12:35.687 --> 00:12:38.104
Yeah, I mean it's like two
seconds there at that time.

165
00:12:41.585 --> 00:12:44.735
But there you go,
waitFor is quite nice as well.

166
00:12:44.735 --> 00:12:48.875
Now, this is a pretty
well-tested little hook, right?

167
00:12:48.875 --> 00:12:52.492
We can now be pretty confident in
using this all over our code base.

168
00:12:52.492 --> 00:12:56.695
At least with null and with proper data,
it's gonna work, right?

169
00:12:56.695 --> 00:12:58.895
So, I like that,
you might need to test like an error case,

170
00:12:58.895 --> 00:13:01.592
like what happens if pizza of the day
doesn't come back with something?

171
00:13:02.642 --> 00:13:03.703
Or what if there isn't one for

172
00:13:03.703 --> 00:13:06.552
that day or something like that, you might
have to add some of those edge cases.

173
00:13:06.552 --> 00:13:09.772
But at least the happy
paths are all covered.

174
00:13:11.142 --> 00:13:12.762
The happy pizzas, as one might say.

