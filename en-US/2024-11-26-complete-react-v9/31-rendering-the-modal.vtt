WEBVTT

1
00:00:00.170 --> 00:00:02.398
&gt;&gt; Brian Holt: What's cool about this
modal is we really can put it anywhere,

2
00:00:02.398 --> 00:00:03.795
I'm gonna put it right here at the end.

3
00:00:03.795 --> 00:00:05.824
And this is where I was saying is,

4
00:00:05.824 --> 00:00:09.680
I probably would normally split
this out into a separate file.

5
00:00:09.680 --> 00:00:14.008
But I don't want to today,
so we're not going to.

6
00:00:14.008 --> 00:00:21.709
So focused order, if we have a focused
order we wanna show our modal, right?

7
00:00:21.709 --> 00:00:26.314
And if we don't have a focused modal,
then what do we wanna render?

8
00:00:26.314 --> 00:00:28.619
Nothing, null.

9
00:00:28.619 --> 00:00:30.744
You can render null, that's okay.

10
00:00:30.744 --> 00:00:34.065
Null just means don't render anything.

11
00:00:34.065 --> 00:00:38.219
&gt;&gt; Speaker 2: Is that better
than doing just fragments?

12
00:00:38.219 --> 00:00:41.120
&gt;&gt; Brian Holt: Just something like-
&gt;&gt; Speaker 2: Or, yeah,

13
00:00:41.120 --> 00:00:43.541
that's what I've usually.

14
00:00:43.541 --> 00:00:46.106
&gt;&gt; Brian Holt: My intuition
is it doesn't really matter.

15
00:00:46.106 --> 00:00:49.720
I like null cuz you're expressing is I
literally want nothing to be here, yeah.

16
00:00:49.720 --> 00:00:51.970
&gt;&gt; Speaker 2: Yes,
kinda what I [INAUDIBLE].

17
00:00:51.970 --> 00:00:54.009
&gt;&gt; Brian Holt: But again,
we're splitting errors here.

18
00:00:56.364 --> 00:00:57.684
&gt;&gt; Brian Holt: All right, so modal, and

19
00:00:57.684 --> 00:01:00.234
then now we can put
whatever we want in here.

20
00:01:00.234 --> 00:01:02.215
So let's put our model.

21
00:01:03.835 --> 00:01:08.248
So we're gonna say Order # and

22
00:01:08.248 --> 00:01:13.352
then it's gonna be focusedOrder.

23
00:01:16.857 --> 00:01:22.074
&gt;&gt; Brian Holt: Okay, and then we do have
to make sure that it's loaded, right?

24
00:01:22.074 --> 00:01:26.391
Because the user will select their order,
and it'll render the modal,

25
00:01:26.391 --> 00:01:30.734
but we still need to wait until the stuff
is actually loaded from the API.

26
00:01:32.314 --> 00:01:35.725
So we're gonna say that when
it's not loading past order,

27
00:01:42.673 --> 00:01:44.229
&gt;&gt; Brian Holt: Then do this otherwise,

28
00:01:44.229 --> 00:01:47.870
again, null, or
actually I think I have a loading there.

29
00:01:47.870 --> 00:01:48.768
Yeah, I do all right.

30
00:01:48.768 --> 00:01:53.600
So this is gonna be, what do I have?

31
00:01:53.600 --> 00:01:54.333
Is it a p?

32
00:01:54.333 --> 00:02:02.808
Yeah, it is a p,
&lt;p&gt; Loading ...&lt;/p&gt;, like that.

33
00:02:02.808 --> 00:02:09.353
Otherwise, we're gonna do another one
of our favorite things, tables, again.

34
00:02:11.563 --> 00:02:16.968
&lt;Table&gt; &lt;thead&gt;,
you were not sick of hearing me say that,

35
00:02:16.968 --> 00:02:20.083
&lt;tr&gt;, &lt;td&gt;, and it's Image.

36
00:02:23.738 --> 00:02:26.941
Name, let's just copy and
paste a bunch of these.

37
00:02:26.941 --> 00:02:30.805
I need Size, Quantity, Price, Total.

38
00:02:30.805 --> 00:02:35.265
So this is Size, this is Quantity,

39
00:02:35.265 --> 00:02:40.481
this is Price, and this is Total, okay?

40
00:02:40.481 --> 00:02:45.304
Under the thead, we are into the &lt;tbody&gt;.

41
00:02:48.674 --> 00:02:53.734
&gt;&gt; Brian Holt: Okay, and
then inside of here we're gonna do our map

42
00:02:53.734 --> 00:03:00.059
of all the data that we're getting
back from the past order data,

43
00:03:00.059 --> 00:03:04.212
{pastOrderData.orderItems.map}.

44
00:03:04.212 --> 00:03:09.141
And each one of these is gonna be
a pizza that we're getting back

45
00:03:09.141 --> 00:03:10.725
from the order API.

46
00:03:10.725 --> 00:03:15.783
And then inside of that you are gonna

47
00:03:15.783 --> 00:03:22.247
have a &lt;tr key=,
&gt;&gt; Brian Holt: I

48
00:03:22.247 --> 00:03:26.385
have some longer key here,
all right, sounds good.

49
00:03:26.385 --> 00:03:30.650
Again, it just has to be something unique
to the particular thing that we're

50
00:03:30.650 --> 00:03:32.360
looking at.

51
00:03:32.360 --> 00:03:40.210
So I did (`${pizza.pizzaTypeId}`},

52
00:03:40.210 --> 00:03:42.961
and this is why.

53
00:03:47.088 --> 00:03:51.694
&gt;&gt; Brian Holt: If you ordered seven
of those Napolitano snake pizzas,

54
00:03:51.694 --> 00:03:55.717
it will collapse that down
to the same quantity.

55
00:03:55.717 --> 00:04:00.364
So you're guaranteed that
the combination of a pizza type Id and

56
00:04:00.364 --> 00:04:04.763
the pizza size will be unique,
that's why I did it this way.

57
00:04:04.763 --> 00:04:07.941
Again, we're not gonna do
any reordering here, so

58
00:04:07.941 --> 00:04:12.363
it's actually kind of not necessary for
us to be so guarded with our key.

59
00:04:12.363 --> 00:04:17.789
But my recommendation for you is,
let's say you become the new Domino's and

60
00:04:17.789 --> 00:04:20.590
you built this pizza system for it.

61
00:04:20.590 --> 00:04:23.850
Maybe later you do need to add the ability
to filter and reorder and stuff like that.

62
00:04:23.850 --> 00:04:26.749
And it's better to just
build these things now,

63
00:04:26.749 --> 00:04:29.728
especially since it's
usually not very hard to.

64
00:04:29.728 --> 00:04:34.100
All right, so for this &lt;td&gt; we're gonna do

65
00:04:34.100 --> 00:04:41.016
an &gt;img_src={pizza.image},
and the alt is {pizza.name}.

66
00:04:46.810 --> 00:04:53.218
&gt;&gt; Brian Holt: And then we're gonna have
a &lt;td&gt; of name, right, {pizza.name}.

67
00:04:53.218 --> 00:04:57.380
And again,
I'm just gonna be lazy and copy and

68
00:04:57.380 --> 00:05:03.162
paste this a bunch of times,
Size, Quantity, Price, Total.

69
00:05:03.162 --> 00:05:08.002
Size,
&gt;&gt; Brian Holt: Quantity,

70
00:05:08.002 --> 00:05:11.687
and then we have our price converter,
right?

71
00:05:11.687 --> 00:05:18.857
So we're gonna use our priceConverter
that we just built, {pizza.price}.

72
00:05:18.857 --> 00:05:28.315
And {priceConverter(pizza.total)}

73
00:05:31.434 --> 00:05:32.417
&gt;&gt; Brian Holt: Okay,

74
00:05:35.434 --> 00:05:36.837
&gt;&gt; Brian Holt: That'll be good for

75
00:05:36.837 --> 00:05:41.382
our rows, and drew to body,
the table, the loading.

76
00:05:41.382 --> 00:05:45.412
And we need some ability for
us to be able to close.

77
00:05:45.412 --> 00:05:50.092
So before this,
just I need a button right there.

78
00:05:50.092 --> 00:05:55.472
That's a close,
how are we gonna close our modal?

79
00:05:56.912 --> 00:06:03.414
Maybe a better way of asking the question
is, how do we unrender the modal?

80
00:06:03.414 --> 00:06:06.774
What is modal rendering based on?

81
00:06:06.774 --> 00:06:08.866
FocusedOrder, right?

82
00:06:08.866 --> 00:06:13.924
So what happens if we set focusedOrder
to be null, or undefined, or zero?

83
00:06:16.794 --> 00:06:18.298
&gt;&gt; Brian Holt: It'll unrender it, right?

84
00:06:18.298 --> 00:06:20.465
It just won't be there anymore.

85
00:06:20.465 --> 00:06:24.906
So if we say onClick=,
and we could just say

86
00:06:24.906 --> 00:06:29.755
straight up setFocusedOrder, like that.

87
00:06:29.755 --> 00:06:32.882
So we have to go create
inside of our API directory,

88
00:06:32.882 --> 00:06:36.685
we're gonna create another
file here called getPastOrder.

89
00:06:38.725 --> 00:06:41.806
Not confusing,
definitely not right for us,

90
00:06:41.806 --> 00:06:45.049
typo errors,
nothing to see here, move along.

91
00:06:45.049 --> 00:06:52.133
Export default async
function getPastOrder() {.

92
00:06:58.109 --> 00:07:01.849
&gt;&gt; Brian Holt: And
this takes in an order number.

93
00:07:01.849 --> 00:07:08.673
And we're gonna say const response = await

94
00:07:08.673 --> 00:07:17.530
fetch (`/api/past-order/${order}`);,

95
00:07:17.530 --> 00:07:20.119
just like that.

96
00:07:20.119 --> 00:07:29.857
Const data = await response.json(); and
return data.

97
00:07:29.857 --> 00:07:33.864
Calls the API looking for
a past order with that,

98
00:07:33.864 --> 00:07:38.080
await response.json(); and
return the data.

99
00:07:38.080 --> 00:07:42.725
All right, so we have passed here,
this is loading.

100
00:07:42.725 --> 00:07:45.425
So we still have no way to open the page,
right?

101
00:07:45.425 --> 00:07:49.597
We haven't added the ability
to click on these rows yet, so

102
00:07:49.597 --> 00:07:52.151
we still have to go do that.

103
00:07:52.151 --> 00:07:56.203
Go into your PastOrder, or

104
00:07:56.203 --> 00:08:00.431
your past.lazy.jsx, and

105
00:08:00.431 --> 00:08:07.486
go to where we're
rendering our buttons here.

106
00:08:07.486 --> 00:08:11.306
So for the order_id we're gonna
make that clickable, yep.

107
00:08:14.276 --> 00:08:19.947
So here, on line 50 here,
we're just gonna put another

108
00:08:19.947 --> 00:08:25.176
HTML element here,
it's gonna be a button onClick.

109
00:08:27.036 --> 00:08:29.926
We're going to just set the order or
the focus order.

110
00:08:29.926 --> 00:08:37.292
SetFocusedOrder to be (order.order_id).

111
00:08:41.408 --> 00:08:44.113
&gt;&gt; Brian Holt: I don't think I need
to do much more than that, nope.

112
00:08:45.153 --> 00:08:48.514
Except, we'll just put
the order_id inside of it.

113
00:08:48.514 --> 00:08:52.913
So all I did was this, I surrounded
this order_id with this button here.

114
00:08:56.546 --> 00:08:59.903
&gt;&gt; Brian Holt: Now, again, remember,
someone's gonna click this button,

115
00:08:59.903 --> 00:09:01.769
it's gonna invoke this function,

116
00:09:01.769 --> 00:09:05.575
it's gonna set the FocusedOrder to
be whatever the order_id was here.

117
00:09:06.655 --> 00:09:07.475
What's that gonna do?

118
00:09:08.685 --> 00:09:11.666
It's then gonna open the modal
because this is just looking for

119
00:09:11.666 --> 00:09:13.699
whenever a focused order exists, right?

120
00:09:18.944 --> 00:09:20.371
&gt;&gt; Brian Holt: Pretty slick, right?

121
00:09:24.862 --> 00:09:26.773
&gt;&gt; Brian Holt: All right, so
now we have nice looking buttons here.

122
00:09:26.773 --> 00:09:31.788
If I click one of these I get
a nice little looking modal.

123
00:09:36.492 --> 00:09:40.573
&gt;&gt; Brian Holt: All right, and then,
again, notice, when I click these,

124
00:09:40.573 --> 00:09:43.868
these ones you'll see
just the briefest flash.

125
00:09:43.868 --> 00:09:47.521
And let's this do our silly thing and
intentionally delay it.

126
00:09:51.953 --> 00:09:55.187
&gt;&gt; Brian Holt: I'll wait for ten seconds.

127
00:10:05.777 --> 00:10:08.288
&gt;&gt; Brian Holt: Okay, so
that's gonna make this wait for

128
00:10:08.288 --> 00:10:14.415
ten seconds,
&gt;&gt; Brian Holt: Whenever

129
00:10:14.415 --> 00:10:15.534
we get there, okay?

130
00:10:15.534 --> 00:10:19.142
We're gonna click this one, and
then now see it's gonna be sit here and

131
00:10:19.142 --> 00:10:20.055
load for a while.

132
00:10:23.735 --> 00:10:25.862
&gt;&gt; Brian Holt: And whenever that finishes,

133
00:10:25.862 --> 00:10:30.236
we should end up seeing our
nice looking pages here.

134
00:10:30.236 --> 00:10:34.480
But again, now if I click it again,
because it's pulling from cache,

135
00:10:34.480 --> 00:10:38.038
it's not hitting that function,
it's gonna be instant.

136
00:10:42.343 --> 00:10:44.594
&gt;&gt; Brian Holt: And again, if I hit this
one, it's gonna make us wait, right,

137
00:10:44.594 --> 00:10:45.981
cuz that one's not in cache right now.

138
00:10:48.051 --> 00:10:51.971
So again, I was kind of talking about
you can actually preload the cache.

139
00:10:51.971 --> 00:10:54.579
So if you're doing some sort
of server side rendering, or

140
00:10:54.579 --> 00:10:57.256
something like that, or
some sort of optimistic loading.

141
00:10:57.256 --> 00:10:59.818
What you could do is you could
go load the first ten orders,

142
00:10:59.818 --> 00:11:03.481
just because you assume people are gonna
be mostly looking at the first ten orders,

143
00:11:03.481 --> 00:11:04.657
and stick those in cache.

144
00:11:04.657 --> 00:11:08.922
And so you would have to do that
ten second wait every single time.

145
00:11:08.922 --> 00:11:13.131
Or, fun fact, you can just go and
delete the await here,

146
00:11:13.131 --> 00:11:15.863
that instant performance for free.

147
00:11:15.863 --> 00:11:20.901
[LAUGH] This was obviously the most
dense part of what we just did.

148
00:11:20.901 --> 00:11:25.925
I would say this is one of
the more advanced React concepts,

149
00:11:25.925 --> 00:11:30.559
or maybe more advanced
client-side React concepts.

150
00:11:30.559 --> 00:11:34.240
Once you get on the server side,
some weird stuff starts to pan out.

