WEBVTT

1
00:00:00.977 --> 00:00:05.871
&gt;&gt; Speaker 2: So when do you want to
use a custom hook instead of just

2
00:00:05.871 --> 00:00:08.773
creating another component?

3
00:00:08.773 --> 00:00:10.813
&gt;&gt; Brian Holt: Yeah, it's a good question.

4
00:00:10.813 --> 00:00:15.759
My first answer to your question is, there
are divided opinions on the matter, so

5
00:00:15.759 --> 00:00:18.180
there's not a right answer here.

6
00:00:18.180 --> 00:00:19.545
&gt;&gt; Speaker 2: Okay.

7
00:00:19.545 --> 00:00:23.280
&gt;&gt; Brian Holt: The extreme side of one
of it is, there are some people that I

8
00:00:23.280 --> 00:00:27.914
know that will say, never put an effect
in your component, ever period,

9
00:00:27.914 --> 00:00:32.426
end of sentence, and that any effect
should always go on a custom hook.

10
00:00:35.003 --> 00:00:36.034
&gt;&gt; Brian Holt: That's one side of it.

11
00:00:36.034 --> 00:00:40.100
There's an amount of validity to it,
because then the nice thing about custom

12
00:00:40.100 --> 00:00:43.008
hooks is they become easy to
test in isolation, right?

13
00:00:43.008 --> 00:00:45.883
As opposed to like a part
of a great component,

14
00:00:45.883 --> 00:00:48.553
you can test just that
the hook is working.

15
00:00:48.553 --> 00:00:50.730
That can be nice, right?

16
00:00:50.730 --> 00:00:54.429
&gt;&gt; Brian Holt: The other side of people's,
never write any custom hooks,

17
00:00:54.429 --> 00:00:56.395
always put it in the component.

18
00:00:56.395 --> 00:00:59.862
I think there's less validity to that.

19
00:00:59.862 --> 00:01:05.457
I'm probably mostly to the side
of most effects should probably

20
00:01:05.457 --> 00:01:11.375
end up in custom hooks if they're
shared at all or need to be tested.

21
00:01:11.375 --> 00:01:14.270
Which one usually one of those is true,
right?

22
00:01:16.886 --> 00:01:17.945
&gt;&gt; Brian Holt: Yeah.

23
00:01:17.945 --> 00:01:22.446
So the nice thing about like this hook and
during the testing section, we will

24
00:01:22.446 --> 00:01:27.097
actually write tests for this hook, so
you'll actually see how to test hooks.

25
00:01:27.097 --> 00:01:31.105
We can test that it's calling the API,
it's using the right parameters,

26
00:01:31.105 --> 00:01:33.967
it does the right thing
when there's nothing there,

27
00:01:33.967 --> 00:01:36.911
it does the right thing when
there is something there.

28
00:01:36.911 --> 00:01:39.806
It becomes very, straightforward and

29
00:01:39.806 --> 00:01:42.154
very easy to test.

30
00:01:45.077 --> 00:01:48.720
&gt;&gt; Brian Holt: And then, now, if I had
like a, let's say I was writing like

31
00:01:48.720 --> 00:01:53.505
the admin dashboard for this, and I needed
to fetch the pizza of the day so I could

32
00:01:53.505 --> 00:01:58.103
show, like, stats for how many pizzas
of the days that we were able to push.

33
00:01:58.103 --> 00:02:00.497
I could just use this hook all over again,
right?

34
00:02:00.497 --> 00:02:02.612
Yeah, and
this just immediately gives it back to me.

35
00:02:02.612 --> 00:02:03.874
I don't have to rewrite the logic again.

36
00:02:06.026 --> 00:02:09.478
&gt;&gt; Brian Holt: So hopefully that kind
of bounds the box of where your opinion

37
00:02:09.478 --> 00:02:10.703
should lie, right?

38
00:02:10.703 --> 00:02:15.304
Somewhere in there,
in this specific case where we

39
00:02:15.304 --> 00:02:20.125
only are using pizza the day,
in this very one place.

40
00:02:20.125 --> 00:02:25.741
I'm gonna put in the component 'cause I
just, this is not an interesting enough

41
00:02:25.741 --> 00:02:32.265
custom hook for me to try and encapsulate
it or test it to all hell and back right?

42
00:02:32.265 --> 00:02:35.864
&gt;&gt; Brian Holt: I'm sure you've
all heard of dry code, right?

43
00:02:35.864 --> 00:02:37.580
Do not repeat yourself.

44
00:02:37.580 --> 00:02:38.815
I'm a wet code person.

45
00:02:38.815 --> 00:02:40.552
[LAUGH] Write everything thrice.

46
00:02:40.552 --> 00:02:44.951
[LAUGH] The third time I go to write, like
copy a piece of logic, I'm like, okay,

47
00:02:44.951 --> 00:02:48.153
maybe I should put this into a module and
reuse it, right?

48
00:02:49.373 --> 00:02:50.513
First time, absolutely not.

49
00:02:50.513 --> 00:02:51.524
Second time might be a fluke.

50
00:02:51.524 --> 00:02:54.810
Third time it probably is like
app code that I need to test.

51
00:02:56.416 --> 00:03:00.195
&gt;&gt; Brian Holt: There's my methodology,
but up to you.

52
00:03:00.195 --> 00:03:04.182
&gt;&gt; Speaker 3: Let's say that the network
call takes a long time to respond.

53
00:03:04.182 --> 00:03:07.878
Will this cause a delay in the rendering
from the custom hook, or will

54
00:03:07.878 --> 00:03:13.240
it return undefined first and then, when
it has a value, return the updated value?

55
00:03:13.240 --> 00:03:14.481
&gt;&gt; Brian Holt: Good question.

56
00:03:14.481 --> 00:03:19.121
Let's walk through it.
&gt;&gt; Brian Holt: Pizza of the day.

57
00:03:19.121 --> 00:03:20.123
After we're done with this section.

58
00:03:20.123 --> 00:03:22.073
I'm never saying pizza of the day ever again.

59
00:03:22.073 --> 00:03:24.827
[LAUGH] For the record,
until we get to the testing section and

60
00:03:24.827 --> 00:03:26.348
then I'm right back on the pony.

61
00:03:26.348 --> 00:03:30.201
Okay, so
&gt;&gt; Brian Holt: I have this function here

62
00:03:30.201 --> 00:03:31.432
which calls this.

63
00:03:31.432 --> 00:03:33.422
This is not await or anything like that.

64
00:03:33.422 --> 00:03:35.383
This is just directly
calling the function.

65
00:03:37.609 --> 00:03:43.335
&gt;&gt; Brian Holt: So this is not awaiting
this is sync, so this is gonna call this,

66
00:03:43.335 --> 00:03:49.611
it's gonna go into here, and
it's gonna set this to be null, right?

67
00:03:49.611 --> 00:03:52.362
It's then going to schedule
an effect to be run.

68
00:03:52.362 --> 00:03:56.509
Keep in mind, renders finish first
before their effects happen.

69
00:03:56.509 --> 00:04:00.862
So your first render is always gonna
be done by the time the effect is

70
00:04:00.862 --> 00:04:01.885
actually run.

71
00:04:01.885 --> 00:04:07.941
So this effect, this function here,
is scheduled to run, but does not run yet.

72
00:04:07.941 --> 00:04:09.953
What gets returned on the first render?

73
00:04:11.317 --> 00:04:12.842
&gt;&gt; Speaker 3: Null.

74
00:04:12.842 --> 00:04:16.252
&gt;&gt; Brian Holt: Null,
that's the default value.

75
00:04:16.252 --> 00:04:19.211
So this repeats the data for
the first render before this effect.

76
00:04:19.211 --> 00:04:25.175
Effect has been run,
this return here is going to be null,

77
00:04:25.175 --> 00:04:27.870
which means here is null.

78
00:04:27.870 --> 00:04:31.799
So what happens when we
hit this block with null?

79
00:04:34.130 --> 00:04:35.252
&gt;&gt; Brian Holt: It's going
to just return loading.

80
00:04:35.252 --> 00:04:36.601
It returns, right?

81
00:04:36.601 --> 00:04:39.050
This is an early return pattern, right?

82
00:04:39.050 --> 00:04:40.752
And so none of this gets run.

83
00:04:42.192 --> 00:04:45.669
&gt;&gt; Brian Holt: It just returns
this in short circuits here.

84
00:04:45.669 --> 00:04:49.171
Now the effect runs, we get back
from the API, the set gets called,

85
00:04:49.171 --> 00:04:51.566
this gets rendered again.

86
00:04:51.566 --> 00:04:53.876
This is now actually an object
that came back from the API.

87
00:04:55.186 --> 00:04:56.656
Is it null?

88
00:04:56.656 --> 00:04:59.001
No.

89
00:04:59.001 --> 00:05:00.192
So all of this is gonna get rendered.

90
00:05:03.245 --> 00:05:09.804
&gt;&gt; Brian Holt: So, I mean, let's just
super draw this out into being agonizing.

91
00:05:09.804 --> 00:05:11.299
Wait for 10 seconds.

92
00:05:14.578 --> 00:05:16.584
&gt;&gt; Brian Holt: All right,
so yeah, I got it.

93
00:05:16.584 --> 00:05:17.614
Copilot.

94
00:05:19.296 --> 00:05:21.028
&gt;&gt; Brian Holt: See this very
[LAUGH] small loading down here?

95
00:05:21.028 --> 00:05:23.404
I am very talented with loading spinners,

96
00:05:23.404 --> 00:05:26.545
as you can see,
&gt;&gt; Brian Holt: But

97
00:05:26.545 --> 00:05:29.500
nothing is being rendered down there,
and then eventually it shows up.

98
00:05:29.500 --> 00:05:34.033
Did you use a lowercase "u" in
the file name of the custom hook

99
00:05:34.033 --> 00:05:36.971
because it's a naming convention?

100
00:05:36.971 --> 00:05:39.578
Like, use pizza the day here.

101
00:05:39.578 --> 00:05:44.256
&gt;&gt; Brian Holt: Yeah, let's talk
about the name, kind of in general.

102
00:05:44.256 --> 00:05:46.821
It's a lowercase "u" because
it's not a component, right?

103
00:05:46.821 --> 00:05:47.654
What is this returning?

104
00:05:48.716 --> 00:05:52.164
&gt;&gt; Brian Holt: This returns a hook
which is not renderable by and

105
00:05:52.164 --> 00:05:53.600
of itself in react.

106
00:05:53.600 --> 00:05:58.604
It has, it's part of a composable part of
&gt;&gt; Brian Holt: Like a,

107
00:05:58.604 --> 00:06:01.419
what a component can use to get data.

108
00:06:01.419 --> 00:06:03.757
So maybe state it differently.

109
00:06:03.757 --> 00:06:07.167
Only components have the convention
of being named in uppercase.

110
00:06:08.197 --> 00:06:11.920
And just to be super clear,
the file names really don't matter.

111
00:06:11.920 --> 00:06:17.015
You will see people call this
like pizza.jsx like this.

112
00:06:23.794 --> 00:06:26.280
&gt;&gt; Brian Holt: Because, like,
Linux file systems are insensitive and

113
00:06:26.280 --> 00:06:28.626
most of our stuff is always
running on Linux, right?

114
00:06:28.626 --> 00:06:31.988
So you can run into issues,
actually, by uppercasing things.

115
00:06:31.988 --> 00:06:34.229
That did happen to me at Netflix one time.

116
00:06:36.899 --> 00:06:37.779
&gt;&gt; Brian Holt: That
usually doesn't matter.

117
00:06:37.779 --> 00:06:38.731
You usually don't have to care.

118
00:06:38.731 --> 00:06:42.774
Usually the convention of putting
uppercase here is useful for

119
00:06:42.774 --> 00:06:47.815
me at a glance to say, like, this is
a component, and it exports a component.

120
00:06:50.281 --> 00:06:53.492
&gt;&gt; Brian Holt: So another way of
stating this is, not a component.

121
00:06:53.492 --> 00:06:56.316
And anything that's not a component,
I always just lowercase name.

122
00:06:56.316 --> 00:07:00.146
It's really,
only components that get the uppercase.

123
00:07:01.316 --> 00:07:05.192
&gt;&gt; Brian Holt: And then we did talk
about earlier that it is important for

124
00:07:05.192 --> 00:07:06.738
the name of the thing.

125
00:07:06.738 --> 00:07:15.221
So looking at Order here that Pizza
does need to be uppercase "P" for that.

126
00:07:15.221 --> 00:07:16.906
Now the next thing to say is

127
00:07:16.906 --> 00:07:17.757
"use".

128
00:07:19.660 --> 00:07:21.572
&gt;&gt; Brian Holt: Hooks
have "use" in front of it.

129
00:07:21.572 --> 00:07:22.744
That is a convention.

130
00:07:24.364 --> 00:07:29.055
It's not necessarily gonna break React,
but if you use, "use" in your name,

131
00:07:29.055 --> 00:07:34.040
then all of the React linting will catch
errors that you would do with potentially

132
00:07:34.040 --> 00:07:36.244
with a hook, right?

133
00:07:36.244 --> 00:07:38.416
So, we haven't put it in here.

134
00:07:38.416 --> 00:07:39.885
In fact,
I don't even know if I do it in here.

135
00:07:41.281 --> 00:07:47.123
&gt;&gt; Brian Holt: If we go into,
&gt;&gt; Brian Holt: Yeah,

136
00:07:47.123 --> 00:07:51.693
PizzaOfTheDay here, and if I say,
something like, if true, or

137
00:07:51.693 --> 00:07:55.250
something like that,
is this gonna catch this?

138
00:07:57.069 --> 00:07:58.903
&gt;&gt; Brian Holt: It does look at that.

139
00:07:58.903 --> 00:07:59.741
Nope.

140
00:07:59.741 --> 00:08:02.983
Nevermind.
It doesn't if I had the React hooks

141
00:08:02.983 --> 00:08:08.184
ESlint rules in here, it would catch
this because even though

142
00:08:08.184 --> 00:08:14.631
PizzaOfTheDay is not its own type of hook,
it knows, it's like this begins with "use".

143
00:08:14.631 --> 00:08:16.567
And therefore I know that
this cannot be inside of a,

144
00:08:16.567 --> 00:08:20.757
an if statement
&gt;&gt; Brian Holt: Beyond that,

145
00:08:20.757 --> 00:08:23.448
it's just very easy to see at a glance.

146
00:08:23.448 --> 00:08:25.354
usePizzaOfTheDay,

147
00:08:25.354 --> 00:08:28.617
very obvious that this is a custom hook,
right?

148
00:08:30.098 --> 00:08:36.308
&gt;&gt; Brian Holt: So while you don't have to,
as your future co worker, you do have to.

