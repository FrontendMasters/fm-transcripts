WEBVTT

1
00:00:00.000 --> 00:00:02.714
&gt;&gt; Brian Holt: So
that's enough on class component,

2
00:00:02.714 --> 00:00:05.023
we shall never speak of it again.

3
00:00:05.023 --> 00:00:07.981
Let's go actually use it though.

4
00:00:10.112 --> 00:00:13.883
&gt;&gt; Brian Holt: Let's go
to past order route.

5
00:00:13.883 --> 00:00:19.387
We're gonna import our
error boundary at the top,

6
00:00:19.387 --> 00:00:24.253
import error boundary from error boundary.

7
00:00:24.253 --> 00:00:29.098
One interesting thing about error
boundaries, because of the way that

8
00:00:29.098 --> 00:00:33.467
the the errors work that you can't
put the error boundary here.

9
00:00:33.467 --> 00:00:37.984
So I can't just say error boundary here,
why?

10
00:00:37.984 --> 00:00:42.374
Because if this component has an error,
the whole component blows up, right?

11
00:00:42.374 --> 00:00:45.265
So I need to put it in a function
component above it, right?

12
00:00:45.265 --> 00:00:49.370
So that I can catch things inside of it,
does that make sense?

13
00:00:49.370 --> 00:00:52.790
It's like you have to put things inside
of the try for the catch to work,

14
00:00:52.790 --> 00:00:54.730
that's essentially what I'm saying.

15
00:00:54.730 --> 00:00:56.876
So let me show you what I mean, and

16
00:00:56.876 --> 00:01:00.654
then you can give me those
perplexed glances again.

17
00:01:00.654 --> 00:01:05.462
So, let's just do it above, I think I have
it above, so it's a little bit more clear.

18
00:01:05.462 --> 00:01:10.589
So, I'm gonna write another function here

19
00:01:10.589 --> 00:01:16.549
called error
BoundaryWrappedPastOrderRoutes,

20
00:01:16.549 --> 00:01:20.714
and you're just gonna say return.

21
00:01:20.714 --> 00:01:25.736
Error boundary, and
then inside of that past order route, and

22
00:01:25.736 --> 00:01:31.061
then error boundary is gonna be
the thing that we actually export.

23
00:01:36.802 --> 00:01:40.863
&gt;&gt; Brian Holt: So the error boundary
can only catch things that are being

24
00:01:40.863 --> 00:01:42.560
rendered inside of it.

25
00:01:42.560 --> 00:01:46.682
And so if it's on the same level of this,
so if it was actually inside of past order,

26
00:01:46.682 --> 00:01:51.008
it won't get the opportunity to catch
the error, so it has to be outside of it.

27
00:01:52.873 --> 00:01:55.013
&gt;&gt; Brian Holt: Which is why we
have two components here and

28
00:01:55.013 --> 00:01:57.752
then we are actually shipping
the error boundary one.

29
00:02:00.496 --> 00:02:03.563
&gt;&gt; Brian Holt: Now,
some of you might say, but Brian,

30
00:02:03.563 --> 00:02:07.183
what if there's being
props passed into this?

31
00:02:07.183 --> 00:02:11.159
In this case, we're not passing any props
into it, but what if we were, right?

32
00:02:11.159 --> 00:02:16.211
So, all you'd have to do here is
we've taken props here at this level,

33
00:02:16.211 --> 00:02:21.789
and then there's this something here
called the Spread Operator that works.

34
00:02:21.789 --> 00:02:27.026
And we're gonna say whatever props we
got here, just pass them on through.

35
00:02:27.026 --> 00:02:28.648
Now, why didn't I teach you this earlier?

36
00:02:28.648 --> 00:02:31.446
You're probably thinking,
that Spread Operator looks pretty cool.

37
00:02:31.446 --> 00:02:34.150
Why don't we, use that a lot of places?

38
00:02:34.150 --> 00:02:35.567
And I intentionally do that,

39
00:02:35.567 --> 00:02:38.465
because I don't want you to
use it that frequently, right?

40
00:02:38.465 --> 00:02:43.415
It is nice that it's just saying, here's a
grab bag of things kinda spread them out.

41
00:02:43.415 --> 00:02:47.688
So imagine this props, for example,

42
00:02:47.688 --> 00:02:52.494
was something I don't even comment this,

43
00:02:52.494 --> 00:02:55.966
it could be like stuff, cool,

44
00:02:55.966 --> 00:03:01.851
other stuff,
&gt;&gt; Brian Holt: Not cool, right?

45
00:03:01.851 --> 00:03:04.930
And you could come in here and

46
00:03:04.930 --> 00:03:09.550
actually just do stuff = props.stuff and

47
00:03:09.550 --> 00:03:14.437
otherStuff = props.otherstuff, right?

48
00:03:14.437 --> 00:03:18.351
And you could go be more explicit about
that, that's totally fine as well.

49
00:03:18.351 --> 00:03:23.716
But it looks nicer to do
just the spread operator,

50
00:03:23.716 --> 00:03:28.201
this makes it so opaque to read, though.

51
00:03:28.201 --> 00:03:33.005
So, for things that you're actually
passing stuff into explicitly,

52
00:03:33.005 --> 00:03:37.726
I want to see this because it makes me
know this is the API that I'm gonna

53
00:03:37.726 --> 00:03:42.548
adhering to, where the data from is
coming from and where it's going.

54
00:03:42.548 --> 00:03:48.424
Again, the explicitness of react
is one of its superpowers,

55
00:03:48.424 --> 00:03:51.927
and so by hiding it behind dot, dot,

56
00:03:51.927 --> 00:03:56.560
dot props like this,
you make it pretty opaque,

57
00:03:56.560 --> 00:04:01.317
of what is coming from where and
where is it going?

58
00:04:01.317 --> 00:04:05.930
The only reason in this particular case,
that I am okay with the spread

59
00:04:05.930 --> 00:04:10.792
operator is that this particular
component is meant to be a pass through.

60
00:04:10.792 --> 00:04:13.528
It's actually not meant to know
about what's coming into it and

61
00:04:13.528 --> 00:04:14.751
where it's going, right?

62
00:04:14.751 --> 00:04:20.013
It's literally just meant to be going
from like connecting two pipe together,

63
00:04:20.013 --> 00:04:23.477
and so this actually makes
this less clear, right?

64
00:04:23.477 --> 00:04:26.342
And this is a clear communication
to the future developer,

65
00:04:26.342 --> 00:04:29.275
they're reading this,
which is likely yourself, right?

66
00:04:29.275 --> 00:04:33.226
That this isn't supposed to know
what is coming through it, right?

67
00:04:33.226 --> 00:04:34.996
It's just supposed to be the pass through.

68
00:04:34.996 --> 00:04:40.556
&gt;&gt; Speaker 2: Do you know why there
are boundaries were left out of the new

69
00:04:40.556 --> 00:04:46.585
react or why they were still
require the classical component?

70
00:04:46.585 --> 00:04:51.292
&gt;&gt; Brian Holt: It's a good question,
my reading on the situation which is Brian

71
00:04:51.292 --> 00:04:57.111
reading between the lines is they didn't
really have a elegant way to handle it,

72
00:04:57.111 --> 00:05:01.237
that was better than doing it
in the class component way.

73
00:05:01.237 --> 00:05:04.607
Because it doesn't have a get
derived state from pro,

74
00:05:04.607 --> 00:05:07.989
it doesn't have all the things
that a class will have.

75
00:05:07.989 --> 00:05:09.822
And so because of that,
they decided, well,

76
00:05:09.822 --> 00:05:11.468
we're gonna leave in class components.

77
00:05:11.468 --> 00:05:17.125
They didn't have any intent to
deprecate class components anyway,

78
00:05:17.125 --> 00:05:22.001
so they left it that, because,
yeah, they would have made

79
00:05:22.001 --> 00:05:27.281
the library worse by trying to
force it into this other pattern.

80
00:05:27.281 --> 00:05:29.904
And because they published that,

81
00:05:29.904 --> 00:05:34.702
react error boundary component,
everyone can just use that.

82
00:05:34.702 --> 00:05:37.234
&gt;&gt; Speaker 2: And can I just put
an error boundary in my root?

83
00:05:37.234 --> 00:05:38.406
&gt;&gt; Brian Holt: Sure you can.

84
00:05:38.406 --> 00:05:41.268
&gt;&gt; Speaker 2: Route and just people do
it on error boundary, handle everything?

85
00:05:41.268 --> 00:05:44.980
&gt;&gt; Brian Holt: Yeah, I would put it here,
probably at root, yeah,

86
00:05:44.980 --> 00:05:49.847
I would put it here, and you could
just do error boundary, right there,

87
00:05:49.847 --> 00:05:53.578
catch everything,
if that was appropriate for you?

88
00:05:53.578 --> 00:05:55.618
Yeah, hell yeah, absolutely.

89
00:05:55.618 --> 00:05:59.496
So let's actually,
make it work because of our try it,

90
00:06:08.943 --> 00:06:12.044
&gt;&gt; Brian Holt: There you go OMG LOL WTF,

91
00:06:12.044 --> 00:06:16.193
is that is that our error boundary?

92
00:06:18.693 --> 00:06:21.407
&gt;&gt; Brian Holt: There you go.

93
00:06:21.407 --> 00:06:26.247
So, there was an error with this page,
click here to go back to the home page,

94
00:06:26.247 --> 00:06:26.778
right?

95
00:06:26.778 --> 00:06:31.894
So what you saw before
my page had reloaded,

96
00:06:31.894 --> 00:06:36.331
was Vite catching my error boundary.

97
00:06:36.331 --> 00:06:37.574
This actually makes sense, right?

98
00:06:37.574 --> 00:06:40.618
This actually is a nice error page,
there was an error.

99
00:06:40.618 --> 00:06:43.066
Click here to go back to the homepage and
you caught everything.

100
00:06:43.066 --> 00:06:49.594
And now it's caught in the flow of the app
and everything looks like it works, okay?

101
00:06:49.594 --> 00:06:52.192
Yeah, one of the advantages of putting
this around the app is I think it

102
00:06:52.192 --> 00:06:54.141
would catch 404s,
which would be nice, right?

