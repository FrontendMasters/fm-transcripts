WEBVTT

1
00:00:00.400 --> 00:00:07.652
&gt;&gt; Brian Holt: Let's try another
test here in pizza.test.jsx,

2
00:00:07.652 --> 00:00:14.258
test to have default image
if none is provided.

3
00:00:16.526 --> 00:00:18.445
&gt;&gt; Brian Holt: Some of you might
be looking this is like, but

4
00:00:18.445 --> 00:00:20.473
Brian, it doesn't have a default image.

5
00:00:20.473 --> 00:00:22.841
Yeah, we've discovered a bug in our code.

6
00:00:22.841 --> 00:00:27.894
Async, we're gonna say something

7
00:00:27.894 --> 00:00:32.783
quite similar, const screen.

8
00:00:32.783 --> 00:00:36.653
You could probably even just copy and
past this if you wanted to.

9
00:00:40.394 --> 00:00:43.353
&gt;&gt; Brian Holt: And
just dump source here, right?

10
00:00:43.353 --> 00:00:46.383
You don't want that and
we want name to be something else.

11
00:00:47.733 --> 00:00:51.877
And I'm just going to put something
else because I'm not feeling clever at

12
00:00:51.877 --> 00:00:53.163
the moment.

13
00:00:53.163 --> 00:00:59.113
So notice that this has no image
despite the fact that it expects one.

14
00:00:59.113 --> 00:01:04.662
So I'm going to say, const image
equals screen, again, you can do this.

15
00:01:07.325 --> 00:01:10.952
&gt;&gt; Brian Holt: And we're going to say,

16
00:01:10.952 --> 00:01:17.007
we expect img.src not to be blank.

17
00:01:21.601 --> 00:01:27.473
&gt;&gt; Brian Holt: Now, if we look at
our thing, obviously, it is, right?

18
00:01:27.473 --> 00:01:28.956
There we go.

19
00:01:30.440 --> 00:01:35.249
&gt;&gt; Brian Holt: It gives you a bunch
of just helper stuff to figure out

20
00:01:35.249 --> 00:01:37.117
what it needs here.

21
00:01:37.117 --> 00:01:40.357
But it tells you this is not working.

22
00:01:40.357 --> 00:01:42.709
Notice, it's also saying
something about this, right?

23
00:01:42.709 --> 00:01:46.164
Does my favorite pizza picksum,
this doesn't make any sense, right?

24
00:01:46.164 --> 00:01:48.782
This was from the former test, right?

25
00:01:48.782 --> 00:01:50.473
Why is that?

26
00:01:50.473 --> 00:01:53.546
It's because screen is stateful and
we didn't reset it.

27
00:01:56.007 --> 00:01:59.594
&gt;&gt; Brian Holt: And that's why I'm putting
this in here, because I constantly forget

28
00:01:59.594 --> 00:02:03.556
to reset it, and I know you all are gonna
constantly forget to reset it as well.

29
00:02:03.556 --> 00:02:05.552
So I want you to share in my pain, mostly,

30
00:02:05.552 --> 00:02:08.016
this has been just a long
con to make people suffer.

31
00:02:09.296 --> 00:02:12.994
So we're gonna clean up after ourselves.

32
00:02:12.994 --> 00:02:18.125
Inside of vitest here, we're gonna
grab our sentiment in vitest, but

33
00:02:18.125 --> 00:02:23.919
rather a testing library, react, the
cleanup function, and then from vitest,

34
00:02:23.919 --> 00:02:28.891
we also need afterEach
&gt;&gt; Brian Holt: And then,

35
00:02:28.891 --> 00:02:34.553
you just got to do one little tiny,
very easy thing afterEach(cleanup).

36
00:02:38.273 --> 00:02:39.633
&gt;&gt; Brian Holt: And now, if we go back,

37
00:02:39.633 --> 00:02:42.461
this is gonna be a much cleaner error,
right?

38
00:02:42.461 --> 00:02:45.481
It doesn't have all that other stuff.

39
00:02:45.481 --> 00:02:51.145
This is just basically telling,
hey, after each one of these tests,

40
00:02:51.145 --> 00:02:55.182
run the testing library
react to clean up itself.

41
00:02:55.182 --> 00:02:57.924
You might be looking at this like,
why do I have to plumb this?

42
00:02:57.924 --> 00:03:00.103
This doesn't make a ton of sense to me,

43
00:03:00.103 --> 00:03:04.934
it's because testing library react doesn't
know when each test starts or finishes.

44
00:03:04.934 --> 00:03:07.774
It's not the same thing as vitest, right?

45
00:03:07.774 --> 00:03:11.282
It's a separate library, and
it's usable across mocha and

46
00:03:11.282 --> 00:03:13.834
all the other testing harnesses.

47
00:03:13.834 --> 00:03:17.760
So you just have to give it like,
hey, I'm done,

48
00:03:17.760 --> 00:03:22.904
you also could have done,
I'm pretty sure something like this.

49
00:03:25.860 --> 00:03:27.067
&gt;&gt; Brian Holt: And
just called it right there.

50
00:03:27.067 --> 00:03:28.547
And I think this would have also worked.

51
00:03:30.187 --> 00:03:33.317
Yeah, right, so
you can manually call it as well.

52
00:03:33.317 --> 00:03:37.049
This is just nice with vitests to say,
like, hey, after every single thing,

53
00:03:37.049 --> 00:03:39.457
please reset testing library
back to where it was.

54
00:03:42.868 --> 00:03:48.598
Okay, so that works, but
our test is still failing obviously.

55
00:03:48.598 --> 00:03:54.975
So let's go modify pizza then to
say if there is an image, use it.

56
00:03:57.838 --> 00:04:04.115
&gt;&gt; Brian Holt: Otherwise use
our little picsum.photo/200.

57
00:04:06.170 --> 00:04:12.843
&gt;&gt; Brian Holt: This 200 just
means it's a 200 by 200 square.

58
00:04:14.593 --> 00:04:17.936
You guess it if you want a 3 by 300
square, I think if you want a 3 by 200

59
00:04:17.936 --> 00:04:21.312
it's like this, it's useful, I use it
from time to time for prototyping.

60
00:04:24.787 --> 00:04:29.519
&gt;&gt; Brian Holt: So now, source will have
something here if you didn't pass in

61
00:04:29.519 --> 00:04:36.124
an image, and in theory, our testing
suite should be passing now, it is.

62
00:04:36.124 --> 00:04:38.940
So there we go.

63
00:04:38.940 --> 00:04:43.844
&gt;&gt; Student: Why are our tests in here
having the asynchronous functions if

64
00:04:43.844 --> 00:04:48.098
our pizza does not have any
asynchronous calls to it?

65
00:04:48.098 --> 00:04:49.821
&gt;&gt; Brian Holt: It's good question.

66
00:04:49.821 --> 00:04:54.893
Let's look at the, so
the very first answer to your question is,

67
00:04:54.893 --> 00:05:00.905
I just always make it async, because
later I might add asynchronous things.

68
00:05:00.905 --> 00:05:05.095
I don't remember, we don't have anything
in here that we have to wait for.

69
00:05:05.095 --> 00:05:09.486
So no, this one, we don't have to
you really could take these out.

70
00:05:09.486 --> 00:05:10.215
I'm not mistaken, right?

71
00:05:10.215 --> 00:05:13.884
It actually doesn't depend
on those being async.

72
00:05:13.884 --> 00:05:14.847
But so frequently,

73
00:05:14.847 --> 00:05:18.085
I end up adding async things when
later I'm why is this not working?

74
00:05:18.085 --> 00:05:22.355
It's yeah, I got to add the async,
as soon as you put await here or

75
00:05:22.355 --> 00:05:28.220
something like that, it's gonna say it
failed, and I'll be like, why did it fail?

76
00:05:28.220 --> 00:05:30.180
Well, at least it gives you
a nice error message, right?

77
00:05:33.260 --> 00:05:36.720
So in this particular case, the answer
to your question is force of habit.

78
00:05:39.880 --> 00:05:43.082
There's no downside here
because vitest handles both.

