WEBVTT

1
00:00:00.048 --> 00:00:04.636
&gt;&gt; Brian Holt: So we have API requests
in a bunch of our various different

2
00:00:04.636 --> 00:00:05.788
components.

3
00:00:05.788 --> 00:00:06.958
You have two choices here, and

4
00:00:06.958 --> 00:00:09.120
I'm gonna say you actually
really only have one choice.

5
00:00:09.120 --> 00:00:11.868
But in theory,
you could spin up your API and

6
00:00:11.868 --> 00:00:16.419
you could have it make real requests
to a fake API or something like that.

7
00:00:16.419 --> 00:00:19.455
Don't do that,
it usually ends in heartache.

8
00:00:19.455 --> 00:00:24.518
[LAUGH] so in that case, you probably
wanna mock it, make mock requests so

9
00:00:24.518 --> 00:00:29.838
that it goes to make a request and then
it just gets faked an answer back to it.

10
00:00:29.838 --> 00:00:32.139
That's what I'm gonna
teach you how to do now.

11
00:00:32.139 --> 00:00:41.160
So we're gonna npm install
vitest-fetch-mock@0.3.0.

12
00:00:41.160 --> 00:00:43.140
We didn't have to use vitest-fetch-mock,

13
00:00:43.140 --> 00:00:45.535
it's actually really easy
to do directly with vitest.

14
00:00:45.535 --> 00:00:50.594
It just adds some niceties and I just
didn't wanna make you code all that stuff,

15
00:00:50.594 --> 00:00:52.871
so we're just gonna stick with it.

16
00:00:52.871 --> 00:00:58.152
Let's write the code for testing,
&gt;&gt; Brian Holt: We're

17
00:00:58.152 --> 00:01:01.037
gonna test the contact page.

18
00:01:01.037 --> 00:01:06.074
So let's go create another
test file in here,

19
00:01:06.074 --> 00:01:12.919
and this one gets to be called
something that's kind of silly,

20
00:01:12.919 --> 00:01:16.939
it's contact.lazy.test.jsx.

21
00:01:19.826 --> 00:01:21.998
&gt;&gt; Brian Holt: And
if you're looking at it as like,

22
00:01:21.998 --> 00:01:26.130
that is the dumbest name of a file
that I've ever created, just wait,

23
00:01:26.130 --> 00:01:29.366
we're about to do one that's even sillier,
but why?

24
00:01:29.366 --> 00:01:35.674
Well, lazy, it's being dependent on
that for React or a TanStack router.

25
00:01:35.674 --> 00:01:39.718
And test, it's being dependent on that for
the testing suite.

26
00:01:39.718 --> 00:01:44.650
So this is why I kinda get a little
hesitant about should file

27
00:01:44.650 --> 00:01:46.632
names be significant?

28
00:01:46.632 --> 00:01:51.078
Cuz then you end up with silly stuff like
this, which obviously this is silly, but

29
00:01:51.078 --> 00:01:53.340
here we are, we're gonna use it anyway.

30
00:01:53.340 --> 00:02:00.729
So import render from
@testing-library/react,

31
00:02:00.729 --> 00:02:04.832
import, expect, test, and

32
00:02:04.832 --> 00:02:12.725
another one here called vi
that we're gonna talk about.

33
00:02:12.725 --> 00:02:16.854
I promise you, it is not Vim,
it is is different than that.

34
00:02:16.854 --> 00:02:20.376
And in any case, I will show you
how to get out of it afterwards.

35
00:02:20.376 --> 00:02:27.109
Import createFetchMock
from vitest-fetch-mock,

36
00:02:27.109 --> 00:02:31.208
import QueryClientProvider and

37
00:02:31.208 --> 00:02:36.770
QueryClient from tanstackrouter, sorry,

38
00:02:36.770 --> 00:02:41.759
tanstackquery, rather QueryClient.

39
00:02:44.652 --> 00:02:54.287
&gt;&gt; Brian Holt: And
import Route from ../routes/contact.lazy.

40
00:02:57.372 --> 00:02:59.951
&gt;&gt; Brian Holt: So why are we
importing stuff from ReactQuery?

41
00:02:59.951 --> 00:03:01.987
That seems kinda strange, right?

42
00:03:01.987 --> 00:03:07.186
Well, it's because in order for ReactQuery
to function, it depends on a QueryClient

43
00:03:07.186 --> 00:03:11.547
being there, and we're not rendering
it in the context of app, right?

44
00:03:11.547 --> 00:03:14.468
An app is what actually
possesses the QueryClient.

45
00:03:14.468 --> 00:03:16.866
So we have to create a fake one for it.

46
00:03:16.866 --> 00:03:21.247
It's not a fake one, it's actually a real
one, but we have to create one for it.

47
00:03:21.247 --> 00:03:22.513
So that's exactly what
we're gonna do here.

48
00:03:22.513 --> 00:03:29.915
We're gonna say const QueryClient,
&gt;&gt; Brian Holt: = new QueryClient.

49
00:03:33.084 --> 00:03:37.597
&gt;&gt; Brian Holt: Okay,
let's talk about vi for a second.

50
00:03:37.597 --> 00:03:42.518
Vi is the name of the spy
library inside of vitest.

51
00:03:42.518 --> 00:03:47.980
So if you've ever used sinon in old React
testing, I guess it's still current,

52
00:03:47.980 --> 00:03:52.177
you can still use sinon in lots of stuff,
it's the same idea.

53
00:03:52.177 --> 00:03:54.707
But it's basically a thing that's like,
all right,

54
00:03:54.707 --> 00:03:58.667
I'm gonna create a fake version of this,
and then I'm gonna ask later, it's like,

55
00:03:58.667 --> 00:04:01.698
did this get called,
what functions does this gets called with?

56
00:04:01.698 --> 00:04:06.844
That's called spying in testing and
that's what vi does for you.

57
00:04:06.844 --> 00:04:13.775
So we're gonna say const
fetchMocker = createFetchMock(vi).

58
00:04:13.775 --> 00:04:20.326
And this is gonna kind of
fetchMocker.enableMocks.

59
00:04:20.326 --> 00:04:25.392
What this does is it goes and monkey
patches fetch to be now testable, right?

60
00:04:25.392 --> 00:04:29.332
It's not actually gonna
go call really the API,

61
00:04:29.332 --> 00:04:32.992
it's just going to fake like it did,
right?

62
00:04:32.992 --> 00:04:37.702
And now what's cool about that is we can
say, hey fetch, what were you called with?

63
00:04:37.702 --> 00:04:40.748
And that's a good thing for
us because now we can go back and say,

64
00:04:40.748 --> 00:04:42.057
did you call the right API?

65
00:04:42.057 --> 00:04:45.640
Did you do the right things given
that kinds of inputs, right?

66
00:04:45.640 --> 00:04:47.043
That's the point.

67
00:04:47.043 --> 00:04:54.986
All right, so we're gonna say
test can submit contact form.

68
00:04:54.986 --> 00:04:58.566
Seems like a pretty good test, right?

69
00:04:58.566 --> 00:05:05.102
Async function,
&gt;&gt; Brian Holt: And

70
00:05:05.102 --> 00:05:06.613
this one's gonna have a little bit more,

71
00:05:06.613 --> 00:05:09.432
but we're gonna do actually simulated
test events, which is gonna be cool.

72
00:05:13.007 --> 00:05:19.280
&gt;&gt; Brian Holt: All right, so
first thing we're gonna say, fetchMocker,

73
00:05:19.280 --> 00:05:24.204
mockResponse once and
not just mockResponse.

74
00:05:26.001 --> 00:05:29.865
&gt;&gt; Brian Holt: I don't think it matters
cuz we're only gonna call it once.

75
00:05:29.865 --> 00:05:33.857
In any case, basically you're
saying to the fetchMocker is,

76
00:05:33.857 --> 00:05:37.490
hey, if you get called,
respond with this from the API.

77
00:05:40.153 --> 00:05:43.349
&gt;&gt; Brian Holt: Because we know only one
API is gonna be called in the course of

78
00:05:43.349 --> 00:05:47.299
this, we don't have to really think too
much about which one was called and

79
00:05:47.299 --> 00:05:48.759
why and that kind of stuff.

80
00:05:48.759 --> 00:05:52.392
But I can imagine, let's say you have
something that has nine different API

81
00:05:52.392 --> 00:05:55.079
calls, you have to get a bit
more specific, all right?

82
00:05:55.079 --> 00:05:58.622
To this route, respond with this,
to this route, respond with this.

83
00:05:58.622 --> 00:06:00.839
We don't have to care too much about that,
so we're not going to.

84
00:06:03.144 --> 00:06:04.332
&gt;&gt; Brian Holt: All right, and

85
00:06:04.332 --> 00:06:10.380
then this is gonna be just status ok cuz
that's what the API responds with now.

86
00:06:10.380 --> 00:06:16.202
All right,
we're gonna say const screen = render.

87
00:06:16.202 --> 00:06:20.942
And remember,
we have to give it a QueryClientProvider.

88
00:06:20.942 --> 00:06:26.594
And a QueryClient = as you might guess,
QueryClient.

89
00:06:30.482 --> 00:06:34.683
&gt;&gt; Brian Holt: And we're gonna say

90
00:06:34.683 --> 00:06:41.361
Route.options.component.

91
00:06:41.361 --> 00:06:44.009
So why this kind of strangeness?

92
00:06:44.009 --> 00:06:48.077
Well, if you remember from contact here,

93
00:06:48.077 --> 00:06:53.162
what gets exported is actually
this lazy file route,

94
00:06:53.162 --> 00:06:59.950
which has a bunch of machinery around
it that the TanStack router uses.

95
00:06:59.950 --> 00:07:02.294
We don't need that,
we just need the component.

96
00:07:02.294 --> 00:07:06.747
So that's why we're doing
the Route.options.component,

97
00:07:06.747 --> 00:07:09.019
that's where that comes from.

98
00:07:09.019 --> 00:07:14.455
All right now let's simulate
all of our input events.

99
00:07:14.455 --> 00:07:19.964
So we're gonna say const
nameInput = screen.

100
00:07:19.964 --> 00:07:22.679
And when you can do getByPlaceholder,
I was like,

101
00:07:22.679 --> 00:07:25.460
that seems like actually
a pretty appropriate one,

102
00:07:25.460 --> 00:07:29.140
because that's something that
the user would experience, right?

103
00:07:29.140 --> 00:07:30.660
And we'll do three of those.

104
00:07:30.660 --> 00:07:35.549
And we'll do emailInput, email.

105
00:07:37.966 --> 00:07:41.435
&gt;&gt; Brian Holt: And it msgTextArea,

106
00:07:45.043 --> 00:07:48.549
&gt;&gt; Brian Holt: And it is Message.

107
00:07:48.549 --> 00:07:54.780
All right, so now we have handles on
all of our various different inputs,

108
00:07:54.780 --> 00:07:58.913
and we're going to put
some test data together.

109
00:07:58.913 --> 00:08:07.219
Const testData = put
whatever you want in here,

110
00:08:07.219 --> 00:08:12.486
I'll just put Brian, email,

111
00:08:12.486 --> 00:08:19.186
dustinshatemamail@example.com.

112
00:08:19.186 --> 00:08:26.623
And message just let Brian teach, Dustin.

113
00:08:26.623 --> 00:08:33.000
So I'm gonna say nameInput.value

114
00:08:33.000 --> 00:08:38.532
is assigned testData.name.

115
00:08:38.532 --> 00:08:41.208
And again,
we're gonna do that three times.

116
00:08:41.208 --> 00:08:45.968
The emailInput is gonna be email, and

117
00:08:45.968 --> 00:08:51.037
the msgTextArea is going to be message.

118
00:08:51.037 --> 00:08:53.536
Again, this would just be like
a user filling out a form, right?

119
00:08:53.536 --> 00:08:56.981
All right, after they fill out the form,
what do they do next?

120
00:08:56.981 --> 00:08:58.482
Click the button.

121
00:08:58.482 --> 00:09:03.463
Const btn = screen.getBy

122
00:09:03.463 --> 00:09:08.448
what, role, getByRole.

123
00:09:08.448 --> 00:09:12.767
Button's a pretty good role, there's
only one button on the page as we know.

124
00:09:12.767 --> 00:09:14.559
What are you gonna do with a button?

125
00:09:14.559 --> 00:09:20.108
Click,
&gt;&gt; Brian Holt: Kind

126
00:09:20.108 --> 00:09:21.200
of a cool feature, right?

127
00:09:27.611 --> 00:09:31.529
&gt;&gt; Brian Holt: Now,
this one's kind of cool, I like this.

128
00:09:31.529 --> 00:09:34.840
Let's just go do it on our page and
see what happens.

129
00:09:40.248 --> 00:09:45.204
&gt;&gt; Brian Holt: Okay, how do we know
that our page was submitted correctly?

130
00:09:47.537 --> 00:09:49.348
&gt;&gt; Brian Holt: What did we do wrong here?

131
00:09:49.348 --> 00:09:51.127
&gt;&gt; Speaker 2: Your server's not running.

132
00:09:51.127 --> 00:09:52.163
&gt;&gt; Brian Holt: Is it not?

133
00:09:52.163 --> 00:09:53.045
It's not, you're right.

134
00:09:57.142 --> 00:09:59.941
&gt;&gt; Brian Holt: I'm not gonna
get it running right now, but

135
00:09:59.941 --> 00:10:04.113
what would eventually happen is
the submitted shows up, right?

136
00:10:04.113 --> 00:10:06.626
That's what you would
expect to show up here.

137
00:10:06.626 --> 00:10:09.025
But it's not instant, right?

138
00:10:09.025 --> 00:10:10.929
It goes to the loading state, and

139
00:10:10.929 --> 00:10:14.261
then eventually it settles in
an h3 of saying submitted.

140
00:10:14.261 --> 00:10:19.112
But we know that the entire process
went through once that h3 shows up.

141
00:10:19.112 --> 00:10:24.667
So what you can say is you can say

142
00:10:24.667 --> 00:10:32.158
const h3 = await screen.findByRole.

143
00:10:32.158 --> 00:10:33.502
We're looking for

144
00:10:33.502 --> 00:10:39.306
a heading of level three which is another
way of saying level three or h3, right?

145
00:10:42.916 --> 00:10:47.893
&gt;&gt; Brian Holt: This await means hey,
this isn't gonna show up right away, but

146
00:10:47.893 --> 00:10:49.102
wait for this.

147
00:10:49.102 --> 00:10:50.521
Wait for it to happen.

148
00:10:50.521 --> 00:10:52.712
Once this shows up and
it just pulls it, right?

149
00:10:52.712 --> 00:10:55.011
So is it there now, is it there now?

150
00:10:55.011 --> 00:11:00.539
And once it's there it's to be like, okay,
cool, here you go and here is your h3.

151
00:11:00.539 --> 00:11:05.129
And then if it never finds it, it's
gonna error out because it says, well,

152
00:11:05.129 --> 00:11:08.016
you wanted this and
it never showed up, right?

153
00:11:08.016 --> 00:11:12.461
Now we can just say, expect

154
00:11:12.461 --> 00:11:21.746
(h3.innerText).toContain("Submitted").

155
00:11:21.746 --> 00:11:23.949
toContain is nice here rather than toBe.

156
00:11:23.949 --> 00:11:28.322
If you remember I think it actually is
submitted with an explanation point.

157
00:11:28.322 --> 00:11:31.434
I just care that it that shows
them that it was submitted, right?

158
00:11:31.434 --> 00:11:37.223
So that's why I'm gonna do
contain instead of toBe.

159
00:11:37.223 --> 00:11:41.980
Some people might argue you're good,
you did it, you can stop here.

160
00:11:41.980 --> 00:11:48.127
I wanna go further and I wanna say did
they call the API with the right thing?

161
00:11:48.127 --> 00:11:52.987
I think that's user facing, because if it
doesn't call the API with the right thing,

162
00:11:52.987 --> 00:11:55.397
the user's data is getting lost, right?

163
00:11:55.397 --> 00:11:59.919
There are people that would argue
that testing the API endpoint and

164
00:11:59.919 --> 00:12:04.209
the data is implementation details and
shouldn't be tested.

165
00:12:04.209 --> 00:12:08.554
And I mean, they're wrong,
and that's okay, right?

166
00:12:08.554 --> 00:12:14.629
Not everyone gets to be right all
the time, except me, because I'm teaching.

167
00:12:14.629 --> 00:12:22.057
So we're gonna test that,
requests = fetchMocker.requests and

168
00:12:22.057 --> 00:12:27.670
this is gonna give you back
everything that it got.

169
00:12:27.670 --> 00:12:33.311
So the first thing I'm gonna say, if you
got more than one call, what happened?

170
00:12:33.311 --> 00:12:40.488
expect(requests.length).toBe(1),

171
00:12:43.210 --> 00:12:47.356
&gt;&gt; Brian Holt: And then I'm gonna make
sure that it called the right thing,

172
00:12:47.356 --> 00:12:52.238
(requests[0], it's the first thing,
right, .url).toBe,

173
00:12:52.238 --> 00:12:57.390
to be make sure that it called
the right one, ("/api/contact");.

174
00:12:57.390 --> 00:13:02.440
expect(fetchMocker) and then you say

175
00:13:02.440 --> 00:13:09.723
.toHaveBeenCalledWith("/api/contact"), and

176
00:13:09.723 --> 00:13:17.162
then you give it what you expected
to have been called with.

177
00:13:17.162 --> 00:13:21.674
So it's going to be body: JSON.stringify.

178
00:13:21.674 --> 00:13:22.843
This one I'm gonna say,

179
00:13:22.843 --> 00:13:25.857
this is getting dangerously
close to implementation details.

180
00:13:25.857 --> 00:13:31.728
But headers: Content-Type":

181
00:13:31.728 --> 00:13:36.587
"application/json" and

182
00:13:36.587 --> 00:13:40.235
method: "POST".

183
00:13:42.984 --> 00:13:46.796
&gt;&gt; Brian Holt: Nope,
don't do that, "POST".

184
00:13:52.047 --> 00:13:56.931
&gt;&gt; Brian Holt: So this is basically
saying, I expect when they called fetch

185
00:13:56.931 --> 00:14:02.293
they called it with this,
the correct URL and the right testData,

186
00:14:02.293 --> 00:14:07.692
headers to be correct method: "POST",
all that kind of stuff.

187
00:14:07.692 --> 00:14:12.885
So again, let's go ahead and
say npm test and see what happens.

188
00:14:12.885 --> 00:14:15.242
Failed the test,
let's go see what happened.

189
00:14:15.242 --> 00:14:22.747
So useMutation, no QueryClient set, did I?

190
00:14:22.747 --> 00:14:23.448
I thought I did.

191
00:14:26.975 --> 00:14:28.313
&gt;&gt; Brian Holt: It's client,
not QueryClient.

192
00:14:28.313 --> 00:14:31.715
So bear with me a second,
come back up here.

193
00:14:31.715 --> 00:14:33.959
I said QueryClient = QueryClient,
right there.

194
00:14:33.959 --> 00:14:37.917
This is actually just
supposed to be client.

195
00:14:43.133 --> 00:14:44.923
&gt;&gt; Brian Holt: This is something
that if we had TypeScript,

196
00:14:44.923 --> 00:14:46.439
it would have yelled at us right away.

197
00:14:46.439 --> 00:14:49.233
So that is one of the nice
things about TypeScript.

198
00:14:49.233 --> 00:14:54.155
Yeah, TypeScript will immediately say when
you don't pass in the right props that

199
00:14:54.155 --> 00:14:54.938
it expects.

200
00:14:54.938 --> 00:14:59.399
It's one of the nicest things about
writing React with TypeScript.

201
00:14:59.399 --> 00:15:02.777
Okay, nameInput = screen.

202
00:15:02.777 --> 00:15:07.756
getAll, I don't want getAll,
I want getByPlaceholderText.

203
00:15:12.589 --> 00:15:16.030
&gt;&gt; Brian Holt: getByPlaceholderText.

204
00:15:16.030 --> 00:15:20.655
I'm surprised that actually works,
&gt;&gt; Brian Holt: Cuz

205
00:15:20.655 --> 00:15:23.566
otherwise it will get all of them and
it gives you an array of them.

206
00:15:27.684 --> 00:15:29.621
&gt;&gt; Brian Holt: But I guess you can
set .value on an array, right?

207
00:15:29.621 --> 00:15:30.892
It's not gonna yell about that.

208
00:15:30.892 --> 00:15:32.491
It's just weird.

209
00:15:32.491 --> 00:15:33.946
But let's see, did that, fix it?

210
00:15:33.946 --> 00:15:35.021
It did fix it, okay.

