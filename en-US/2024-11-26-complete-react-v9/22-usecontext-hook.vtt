WEBVTT

1
00:00:00.120 --> 00:00:06.666
&gt;&gt; Brian Holt: Context, I teach this
intentionally pretty late in the course,

2
00:00:06.666 --> 00:00:11.791
or in terms of,
late of the fundamentals of React.

3
00:00:11.791 --> 00:00:14.779
It's a powerful tool.

4
00:00:14.779 --> 00:00:18.886
And I see new React developers get
tempted to use it all over the place,

5
00:00:18.886 --> 00:00:21.819
because it simplifies
the writing part of React.

6
00:00:21.819 --> 00:00:26.611
And I will say it greatly complicates
the maintenance part of React.

7
00:00:26.611 --> 00:00:30.962
This is another way of me begging you
as your perhaps future coworkers,

8
00:00:30.962 --> 00:00:33.948
you'd be very sparing
with your use of context.

9
00:00:33.948 --> 00:00:37.036
With great power comes
great responsibility,

10
00:00:37.036 --> 00:00:40.051
I think I'm the first
person to ever say that.

11
00:00:40.051 --> 00:00:45.375
[LAUGH] No,
it's just props come from parent to child,

12
00:00:45.375 --> 00:00:50.947
and it becomes very explicit,
the data flow of your app.

13
00:00:50.947 --> 00:00:53.834
Context is being able to
dump data into a portal and

14
00:00:53.834 --> 00:00:58.177
then somewhere else being able to
receive data out of the portal.

15
00:00:58.177 --> 00:01:03.148
And so if you have five components that
are passing data from parent to child,

16
00:01:03.148 --> 00:01:05.730
it can get a little annoying.

17
00:01:05.730 --> 00:01:10.203
That problem is called
the prop drilling problem.

18
00:01:10.203 --> 00:01:16.283
It's tempting to use context there, right?

19
00:01:16.283 --> 00:01:21.529
I'm gonna say, unless you're using
that context in multiple places,

20
00:01:21.529 --> 00:01:27.134
that state in multiple different places,
just deal with the prop drilling.

21
00:01:27.134 --> 00:01:29.589
I know it's annoying, but it is helpful.

22
00:01:29.589 --> 00:01:34.113
But there are some things that
are legitimately what I would call

23
00:01:34.113 --> 00:01:35.384
app level state.

24
00:01:35.384 --> 00:01:37.533
A really good example,
this would be like a user, right?

25
00:01:37.533 --> 00:01:41.825
So if someone logs into your website,
that doesn't just affect one part of your

26
00:01:41.825 --> 00:01:45.045
website, it affects everything
in your website, right?

27
00:01:45.045 --> 00:01:48.279
You're showing the user their information,
their checkout information,

28
00:01:48.279 --> 00:01:49.330
their address, right?

29
00:01:49.330 --> 00:01:53.397
And that's all pulling from
the same piece of user information.

30
00:01:53.397 --> 00:01:58.261
So you could have App.jsx,
have useState user, right?

31
00:01:58.261 --> 00:02:00.991
And then pass that into everything.

32
00:02:00.991 --> 00:02:03.595
That doesn't seem like a good idea to me,
right?

33
00:02:03.595 --> 00:02:08.971
I think it's better to say hey, we have
this app level state that is the user,

34
00:02:08.971 --> 00:02:13.056
and then anyone can pull out of
the context who the user is.

35
00:02:13.056 --> 00:02:15.206
Does that make sense?

36
00:02:15.206 --> 00:02:20.140
So you're looking for what I call app
level state as opposed to view level state

37
00:02:20.140 --> 00:02:23.678
or localized state,
that's where context is useful.

38
00:02:23.678 --> 00:02:26.819
Theme is another one that will
sometimes come up, right?

39
00:02:26.819 --> 00:02:31.384
If someone switches their theme that
affects not just one piece of your code,

40
00:02:31.384 --> 00:02:33.925
it affects a lot of
the pieces of your code.

41
00:02:33.925 --> 00:02:37.009
So you might use theme as
another piece of context.

42
00:02:39.800 --> 00:02:43.232
&gt;&gt; Brian Holt: A lot of time libraries,
so React router or tan stack router,

43
00:02:43.232 --> 00:02:45.873
which we're gonna look
at here in a little bit.

44
00:02:45.873 --> 00:02:48.739
Those will use context quite a bit,
it's also made for those things.

45
00:02:48.739 --> 00:02:51.967
And you don't have to care about those
things because that's their problem

46
00:02:51.967 --> 00:02:52.479
not yours.

47
00:02:52.479 --> 00:02:55.943
So in our app here, we have a header.

48
00:02:55.943 --> 00:03:02.267
And I wanna put a little indicator
there of what's in your cart.

49
00:03:03.517 --> 00:03:08.337
And then the other thing that you can
say about carts being as a function of

50
00:03:08.337 --> 00:03:12.459
context is, if someone navigates
away from this order page.

51
00:03:12.459 --> 00:03:15.369
So let's say there was an about page or
a contact page,

52
00:03:15.369 --> 00:03:17.596
which we'll build here in just a second.

53
00:03:17.596 --> 00:03:19.513
If they navigated to the contact page, and

54
00:03:19.513 --> 00:03:22.879
then they navigated back to the order
page, what would happen to the cart?

55
00:03:26.251 --> 00:03:27.901
&gt;&gt; Brian Holt: Disappear, right?

56
00:03:27.901 --> 00:03:29.539
Why?

57
00:03:29.539 --> 00:03:34.366
If this gets unmounted,
all of its state goes away, right?

58
00:03:34.366 --> 00:03:36.943
It doesn't get saved if it gets
removed from the DOM, right?

59
00:03:36.943 --> 00:03:41.312
So if I come over here to App.jsx,
we can literally do this,

60
00:03:41.312 --> 00:03:44.583
we're gonna add a bunch
of stuff right here.

61
00:03:44.583 --> 00:03:47.070
I'm just gonna remove this, okay?

62
00:03:47.070 --> 00:03:48.763
So I just removed it from the DOM,

63
00:03:48.763 --> 00:03:52.271
which would be the same thing
from unrendering it, right?

64
00:03:52.271 --> 00:03:53.905
And then I'm gonna add it back.

65
00:03:53.905 --> 00:03:56.171
Notice that the cart is empty again,
right?

66
00:03:56.171 --> 00:03:57.952
Because it got totally thrown away.

67
00:03:57.952 --> 00:04:02.472
It would be the same thing if you routed
to a different page and came back.

68
00:04:02.472 --> 00:04:06.802
Now again, we are in the business
of making pizza money, right?

69
00:04:06.802 --> 00:04:10.562
[LAUGH] So,
we wanna keep that cart full, right?

70
00:04:10.562 --> 00:04:14.270
Always be keeping cart fulls,
that's what they say, right?

71
00:04:14.270 --> 00:04:14.987
I think so.

72
00:04:14.987 --> 00:04:18.928
[LAUGH] So, we wanna preserve the cart
between page loads, at this point,

73
00:04:18.928 --> 00:04:20.146
what I'm getting at.

74
00:04:20.146 --> 00:04:22.872
So we're gonna use context to do that.

75
00:04:22.872 --> 00:04:27.410
Now, really, what you could do, which
would be probably a much simpler model of

76
00:04:27.410 --> 00:04:31.681
doing this, is you would just say,
useState cart right there, right, and

77
00:04:31.681 --> 00:04:33.385
just pass it into all of them.

78
00:04:33.385 --> 00:04:38.085
But we wanna learn about context, I'm
gonna show you how to do it with context.

79
00:04:38.085 --> 00:04:43.416
So first thing, let's build the header
that's going to read from the cart, okay?

80
00:04:43.416 --> 00:04:48.007
So new page we're gonna
make it called Header.jsx.

81
00:04:48.007 --> 00:04:52.948
We're gonna say export default

82
00:04:52.948 --> 00:04:57.710
function Header(), okay?

83
00:04:57.710 --> 00:05:02.483
Return, and we're gonna put a &lt;nav&gt;

84
00:05:02.483 --> 00:05:06.540
cuz we all like semantic markup.

85
00:05:06.540 --> 00:05:08.630
Remember when that used to
be a really big thing, and

86
00:05:08.630 --> 00:05:11.114
people would get all bent out
of shape about semantic markup?

87
00:05:11.114 --> 00:05:14.062
No, don't use divs, always use navs.

88
00:05:14.062 --> 00:05:14.953
What happened to those arguments?

89
00:05:14.953 --> 00:05:16.457
I feel like we should
argue more about that.

90
00:05:20.746 --> 00:05:25.414
&gt;&gt; Brian Holt: Padre Gino's Pizza,
cool, and

91
00:05:25.414 --> 00:05:33.259
then we're gonna say div
className = "nav- cart".

92
00:05:33.259 --> 00:05:37.461
And then I'm gonna put
an emoji in here of a cart.

93
00:05:41.161 --> 00:05:49.206
&gt;&gt; Brian Holt: Span className
= "nav-cart-number".

94
00:05:49.206 --> 00:05:53.621
Put any number you want in here,
I'm just gonna put 5.

95
00:05:53.621 --> 00:05:57.732
And cool, that will be enough for
now for our Header.

96
00:05:57.732 --> 00:05:59.573
Let's put that into App.jsx.

97
00:05:59.573 --> 00:06:04.937
I think we can just replace,
so we're gonna import Header

98
00:06:04.937 --> 00:06:09.654
from Header, and
I think we can just replace this.

99
00:06:09.654 --> 00:06:11.611
Yep, Header.

100
00:06:15.187 --> 00:06:17.856
&gt;&gt; Brian Holt: You'll see that
this is kind of turning out to be

101
00:06:17.856 --> 00:06:21.594
just a composition of a lot of
other functions that we've made, or

102
00:06:21.594 --> 00:06:23.156
a lot of other components.

103
00:06:23.156 --> 00:06:27.366
It's kind of what React is, for the most
part, it's just composing components and

104
00:06:27.366 --> 00:06:28.384
other components.

105
00:06:28.384 --> 00:06:31.987
All right, so now we got this like
a little fun cart thing up there, right?

106
00:06:31.987 --> 00:06:33.382
Obviously, 5 is fake, right?

107
00:06:33.382 --> 00:06:36.941
This isn't actually reading
from the real cart.

108
00:06:36.941 --> 00:06:40.068
So how would we do that?

109
00:06:40.068 --> 00:06:44.230
Well, think about this for a second now,
how would you do that right now,

110
00:06:44.230 --> 00:06:47.606
not having learned about context yet,
how would you do it?

111
00:06:47.606 --> 00:06:49.964
There's no cart in here, right?

112
00:06:49.964 --> 00:06:54.126
So you would have to do useState here,
and you'd have to say,

113
00:06:54.126 --> 00:06:59.008
cart = (cart), and you would have to say,
cart = (cart) here, but

114
00:06:59.008 --> 00:07:03.274
then we would have to actually
pass in setCart here, right?

115
00:07:03.274 --> 00:07:07.836
Because then you end up with
a bunch of fallout effects of that.

116
00:07:07.836 --> 00:07:10.474
Well, nobody wants to do that, right?

117
00:07:10.474 --> 00:07:13.102
So, let's go ahead and
do it differently with these contexts.

118
00:07:16.059 --> 00:07:19.230
&gt;&gt; Brian Holt: So I've seen people do
this with a bunch of different patterns.

119
00:07:19.230 --> 00:07:21.981
I saw one recently that I kinda like,
so I'm gonna teach that one today.

120
00:07:21.981 --> 00:07:26.062
They just created a file
called contexts.jsx,

121
00:07:26.062 --> 00:07:30.950
and they throw all of their
context into one context file.

122
00:07:30.950 --> 00:07:34.019
Thought that was kinda cool
because it's never very much.

123
00:07:34.019 --> 00:07:38.703
My Context files used to
be literally one line and

124
00:07:38.703 --> 00:07:43.501
then I would export it and
it was just very short and

125
00:07:43.501 --> 00:07:46.712
sweet, but more short and dumb.

126
00:07:46.712 --> 00:07:52.102
We're gonna say createContext,
which is gonna come from React,

127
00:07:52.102 --> 00:07:59.146
okay, and then we're gonna export const,
so this one, you actually wanna do a name.

128
00:07:59.146 --> 00:08:03.282
If you're gonna do this pattern where you
have multiple different contexts coming

129
00:08:03.282 --> 00:08:06.958
from one file, it's important that
you would do named exports, right?

130
00:08:11.926 --> 00:08:18.411
&gt;&gt; Brian Holt: Export const
CartContext = createContext().

131
00:08:18.411 --> 00:08:24.665
You can leave it like this if you want to,
and just call good there, for

132
00:08:24.665 --> 00:08:31.460
the sake of maybe your future TypeScript
self and/or future testing self.

133
00:08:31.460 --> 00:08:33.772
It is useful with context to give it,

134
00:08:33.772 --> 00:08:37.962
this is the shape of what is going
to be held inside of this context.

135
00:08:39.342 --> 00:08:42.072
So we're gonna hold a hook in here, right?

136
00:08:42.072 --> 00:08:43.750
That's what we're gonna do,

137
00:08:43.750 --> 00:08:47.435
cuz we're gonna hold the state
that's both mutable and readable.

138
00:08:47.435 --> 00:08:50.759
So what is the return type for a hook?

139
00:08:54.975 --> 00:08:57.486
&gt;&gt; Brian Holt: It's an array.

140
00:08:57.486 --> 00:08:59.901
And what is cart?

141
00:08:59.901 --> 00:09:00.530
An array.

142
00:09:03.229 --> 00:09:05.533
&gt;&gt; Brian Holt: And then what is this?

143
00:09:05.533 --> 00:09:07.212
Sum function.

144
00:09:11.284 --> 00:09:12.272
&gt;&gt; Brian Holt: Right?

145
00:09:12.272 --> 00:09:18.565
That's what a hook looks like, right?

146
00:09:18.565 --> 00:09:22.342
So I'm literally just
gonna put that right here.

147
00:09:25.460 --> 00:09:30.088
&gt;&gt; Brian Holt: So, I show that too cuz
I know this looks obtuse and weird, but

148
00:09:30.088 --> 00:09:32.409
that's why you're doing it.

149
00:09:32.409 --> 00:09:34.199
Why this is nice?

150
00:09:34.199 --> 00:09:36.859
As soon as you pop this into TypeScript,
TypeScript will be like, okay, I got this.

151
00:09:36.859 --> 00:09:42.353
This is an array with this, and it's just
gonna check it and get it right away.

152
00:09:42.353 --> 00:09:43.860
So it's just a good habit to get into.

153
00:09:47.493 --> 00:09:50.945
&gt;&gt; Brian Holt: And even though we're not
using TypeScript anywhere in this project,

154
00:09:50.945 --> 00:09:53.431
VS Code does an okay job
of observing types in here.

155
00:09:58.389 --> 00:10:03.259
&gt;&gt; Brian Holt: Okay, so
let's go set up our context,

156
00:10:03.259 --> 00:10:08.130
go to App.jsx, we're going to import

157
00:10:08.130 --> 00:10:13.601
{CartContext} from "./contexts".

158
00:10:13.601 --> 00:10:18.833
And the first thing we're gonna
do is we're gonna wrap our app

159
00:10:18.833 --> 00:10:22.863
in this thing called CartContext.Provider,

160
00:10:28.995 --> 00:10:31.770
&gt;&gt; Brian Holt: Usually strict mode is
always gonna be the outermost thing.

161
00:10:31.770 --> 00:10:36.199
The order inside of it really
usually doesn't make a difference.

162
00:10:36.199 --> 00:10:39.595
So what is CartContext.Provider doing for
us?

163
00:10:39.595 --> 00:10:42.441
Well, the first thing is that can
be kind of strange with React,

164
00:10:42.441 --> 00:10:45.994
you can have components that don't
actually render real markup.

165
00:10:45.994 --> 00:10:48.172
All they do is they act as
kind of a pass through, but

166
00:10:48.172 --> 00:10:50.715
they augment the ability of
the components inside of them.

167
00:10:50.715 --> 00:10:52.344
And that's what this provider is doing.

168
00:10:52.344 --> 00:10:55.353
It's now making whatever value
that we're gonna pass into it,

169
00:10:55.353 --> 00:10:57.814
which we'll do momentarily,
we have not done yet.

170
00:10:58.971 --> 00:11:02.621
And it's gonna make that
available everywhere inside of it.

171
00:11:02.621 --> 00:11:07.421
Now, what's kind of cool about this is,
we're wrapping our whole app in it,

172
00:11:07.421 --> 00:11:09.675
but we could do something like this,

173
00:11:09.675 --> 00:11:13.261
where now only pizza of the day
has access to this context.

174
00:11:14.781 --> 00:11:16.551
Kinda cool, right?

175
00:11:16.551 --> 00:11:19.469
We could even have two
different context providers and

176
00:11:19.469 --> 00:11:22.047
have each one of them wrapped in it.

177
00:11:22.047 --> 00:11:25.907
That seems like a weird idea, and I'm not
super into that one, but you could do it.

178
00:11:28.017 --> 00:11:33.834
You can even have multiple cart contexts
kind of layer out from each other.

179
00:11:33.834 --> 00:11:36.131
And what it's gonna do is it's
gonna find the nearest one, right?

180
00:11:36.131 --> 00:11:39.444
So it's gonna find the one
that's closest to it.

181
00:11:39.444 --> 00:11:45.787
So if I had this, and then this, this is
totally, I think it's value, yeah, okay.

182
00:11:49.263 --> 00:11:53.067
&gt;&gt; Brian Holt: If I tried to access
the context from PizzaOfTheDay,

183
00:11:53.067 --> 00:11:55.187
what value would it get back?

184
00:11:55.187 --> 00:11:56.283
&gt;&gt; Speaker 2: 1.
&gt;&gt; Brian Holt: 1, now, again,

185
00:11:56.283 --> 00:11:59.153
you might be thinking,
well, why would I do this?

186
00:11:59.153 --> 00:12:01.232
And I'm also asking you,
why would you do that?

187
00:12:01.232 --> 00:12:03.876
[LAUGH] I don't know
why you would do that.

188
00:12:03.876 --> 00:12:08.056
But it is possible, and
it's why they had this kind of weird API.

189
00:12:11.780 --> 00:12:16.947
&gt;&gt; Brian Holt: Okay, so
going back to where we were, we're gonna

190
00:12:16.947 --> 00:12:22.489
say CartContext.Provider,
a small footnote here.

191
00:12:22.489 --> 00:12:26.668
They're making it so in React 19, you
can just say CartContext like that, and

192
00:12:26.668 --> 00:12:29.011
leave off the provider, it's kind of nice.

193
00:12:33.388 --> 00:12:37.247
&gt;&gt; Brian Holt: So if you're watching
this with React 19, just go ahead and

194
00:12:37.247 --> 00:12:38.666
drop the .Provider.

195
00:12:38.666 --> 00:12:44.471
Now we wanna hook that we
wanna pass into the context,

196
00:12:44.471 --> 00:12:49.631
so what we can do is we
can say const cartHook =,

197
00:12:49.631 --> 00:12:55.823
notice we're not destructuring,
useState like that.

198
00:12:55.823 --> 00:13:05.166
And then the value here = cartHook,
&gt;&gt; Brian Holt: Okay?

199
00:13:08.297 --> 00:13:11.136
&gt;&gt; Brian Holt: Remember,
normally you would say cart, setCart and

200
00:13:11.136 --> 00:13:13.165
use that kind of destructuring here.

201
00:13:13.165 --> 00:13:15.033
Here we're passing the whole thing in.

202
00:13:19.119 --> 00:13:22.315
&gt;&gt; Speaker 3: Does that mean that there's
a setter that's also been assigned within

203
00:13:22.315 --> 00:13:23.335
the cartHook object?

204
00:13:23.335 --> 00:13:26.108
&gt;&gt; Brian Holt: You got it, so
now we can call that within order,

205
00:13:26.108 --> 00:13:28.220
cuz we need to, right?

206
00:13:28.220 --> 00:13:31.256
We have to be able to set
that hook from inside order,

207
00:13:31.256 --> 00:13:33.891
or else this whole kind
of thing falls apart.

208
00:13:33.891 --> 00:13:36.025
Now, you might be thinking yourselves,
well,

209
00:13:36.025 --> 00:13:38.064
does that mean you can
set that hook anywhere?

210
00:13:38.064 --> 00:13:42.986
And yes, you can, and yes it is a foot
gun, which is why I'm just kind of trying

211
00:13:42.986 --> 00:13:46.211
to steer you away from
context as much as possible.

212
00:13:46.211 --> 00:13:47.209
But there you go.

