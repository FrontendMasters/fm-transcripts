WEBVTT

1
00:00:00.330 --> 00:00:02.400
&gt;&gt; Brian Holt: So
let's talk about Tanstack query.

2
00:00:02.400 --> 00:00:06.420
This is the artist formerly
known as React query.

3
00:00:07.910 --> 00:00:11.808
They call it now a Tanstack query because
now it works across several libraries,

4
00:00:11.808 --> 00:00:12.620
not just React.

5
00:00:12.620 --> 00:00:17.440
There's an angular query, there's
view query, there's a couple of them.

6
00:00:17.440 --> 00:00:21.499
But I would say far and above the most
popular one is Tanstack query.

7
00:00:23.749 --> 00:00:29.809
So we're gonna make a past orders page,
and this page is going to pull in

8
00:00:29.809 --> 00:00:35.649
all of the old orders that we can
kind of navigate through them.

9
00:00:35.649 --> 00:00:40.810
What's interesting about this data is it's
highly, highly, highly cacheable, right?

10
00:00:40.810 --> 00:00:43.290
Your old orders aren't really
changing from page load to page load.

11
00:00:43.290 --> 00:00:45.640
You might be getting new ones, right?

12
00:00:45.640 --> 00:00:48.762
But the old ones are gonna keep
staying there, and particularly,

13
00:00:48.762 --> 00:00:50.450
if you click the details, right?

14
00:00:50.450 --> 00:00:53.866
The details of an old order aren't
changing minute to minute, so

15
00:00:53.866 --> 00:00:55.180
very highly cacheable.

16
00:00:56.480 --> 00:01:01.089
That's kinda the nice thing
about Tanstack query,

17
00:01:01.089 --> 00:01:06.422
is that it makes caching API
requests just so simple.

18
00:01:06.422 --> 00:01:09.850
Imagine right now with everything
that's shown with use effect,

19
00:01:09.850 --> 00:01:12.372
how would you cache a response?

20
00:01:12.372 --> 00:01:13.332
You could, right?

21
00:01:13.332 --> 00:01:17.174
I imagine most of you would make some sort
of object and that object would live from

22
00:01:17.174 --> 00:01:19.996
you may be another external module and
you would set a key And

23
00:01:19.996 --> 00:01:24.493
then you say if I'm requesting this,
then don't request it pull it from cache.

24
00:01:24.493 --> 00:01:26.943
But no one wants to write that logic,
right?

25
00:01:26.943 --> 00:01:28.753
Then you have to write the expiry logic.

26
00:01:28.753 --> 00:01:31.393
You have to write like hydration
logic if you wanna preload it.

27
00:01:31.393 --> 00:01:33.391
There's a bunch of stuff like that and

28
00:01:33.391 --> 00:01:36.833
you don't have to because ten stack
query kind of does it for you.

29
00:01:37.873 --> 00:01:39.827
It's almost to the point that I almost.

30
00:01:39.827 --> 00:01:41.527
To never have to use effect anymore.

31
00:01:41.527 --> 00:01:46.945
I just use Tanstack query for almost all
the things I was using use effect for.

32
00:01:46.945 --> 00:01:52.125
So, with React,
whenever I start a brand new project,

33
00:01:52.125 --> 00:01:56.315
it's NPM install, React, React-DARM and

34
00:01:56.315 --> 00:02:01.384
Tanstack query,
almost all the time, right?

35
00:02:01.384 --> 00:02:03.517
Everything else,
I don't always need routing,

36
00:02:03.517 --> 00:02:07.222
I don't always need the other tools, but I
almost always end up using tenstack query,

37
00:02:07.222 --> 00:02:09.644
just because it's better and
easier to use.

38
00:02:09.644 --> 00:02:13.144
And use effect, it's just as you can see,
can have some pretty strange bugs.

39
00:02:14.464 --> 00:02:17.594
You just kind of sidestep
that by using tenstack query.

40
00:02:17.594 --> 00:02:18.714
So I'm a fan, as you can tell.

41
00:02:20.224 --> 00:02:23.592
So Let us go make our past orders page.

42
00:02:23.592 --> 00:02:27.022
It's gonna be fun, if you have
a warped sense of fun, like I do.

43
00:02:27.022 --> 00:02:30.632
All right, I'm gonna run my server again.

44
00:02:30.632 --> 00:02:35.342
NPM run dev, now inside of routes,

45
00:02:35.342 --> 00:02:38.956
I'm gonna make a new file.

46
00:02:38.956 --> 00:02:45.080
We're gonna call this past.lazy.jsx.

47
00:02:45.080 --> 00:02:50.006
And it's gonna create this really nice
little stub for us thank you Tanstack.

48
00:02:53.012 --> 00:02:54.559
&gt;&gt; Brian Holt: And that all looks good.

49
00:02:54.559 --> 00:02:58.893
&gt;&gt; Brian Holt: So before we get
too far here, let's go ahead and

50
00:02:58.893 --> 00:03:02.394
install all of our things that we need.

51
00:03:02.394 --> 00:03:04.564
So I'm just gonna grab this
directly out of the docs.

52
00:03:04.564 --> 00:03:10.024
We're gonna be using
Tanstack five 5.59.13 today.

53
00:03:11.985 --> 00:03:14.915
&gt;&gt; Brian Holt: Again, this library doesn't
really change too too much between

54
00:03:14.915 --> 00:03:15.454
versions.

55
00:03:17.014 --> 00:03:19.867
There's some experimental features that
I'm sure that they'll end up adding later,

56
00:03:19.867 --> 00:03:21.884
but we're not using any of
the experimental Features today.

57
00:03:22.884 --> 00:03:24.684
Actually, that's not true,
towards the end we will,

58
00:03:24.684 --> 00:03:26.154
it'll be fun just in
another terminal here.

59
00:03:26.154 --> 00:03:30.694
I'm gonna run MPM install
at Tantack/React-query.

60
00:03:30.694 --> 00:03:34.889
Here we're gonna install MPM
install TanStack React query.

61
00:03:34.889 --> 00:03:41.233
Add 5.59.13, so ahead and
run Install there.

62
00:03:41.233 --> 00:03:44.213
Then we're gonna grab
one out of here as well.

63
00:03:44.213 --> 00:03:46.713
This is just a bunch of them.

64
00:03:46.713 --> 00:03:48.575
It has some really nice dev tools and

65
00:03:48.575 --> 00:03:52.003
it has some nice linting rules
that we're gonna bring in as well.

66
00:03:53.513 --> 00:03:58.043
So npm, install dash D,
cuz these are dev dependencies.

67
00:03:58.043 --> 00:04:01.183
Tantack react query dev tools,
ojhave the warick.

68
00:04:01.183 --> 00:04:03.041
Is like the router dev tools.

69
00:04:03.041 --> 00:04:05.518
I'll say that I use the query ones
more than I use the router ones, so

70
00:04:05.518 --> 00:04:07.401
these ones are actually
more useful in my opinion.

71
00:04:08.821 --> 00:04:13.680
And then we're gonna install
the plugin as well for

72
00:04:13.680 --> 00:04:16.514
it for ESLint specifically.

73
00:04:16.514 --> 00:04:21.480
And again 5.59 13 and
5.59.7 are the versions I'm using.

74
00:04:25.683 --> 00:04:31.696
&gt;&gt; Brian Holt: Awesome,
let's go modify our ESLint config here,

75
00:04:31.696 --> 00:04:34.572
put that there and then.

76
00:04:36.122 --> 00:04:41.197
So we're going to import at the top,
import, plug in.

77
00:04:41.197 --> 00:04:48.025
The query from @ tan
stack/eslint-plugin-query.

78
00:04:51.146 --> 00:04:56.223
&gt;&gt; Brian Holt: And
under the JSX runtime one here we're

79
00:04:56.223 --> 00:05:02.053
just gonna say ...pluginquery.config,

80
00:05:06.021 --> 00:05:08.794
&gt;&gt; Brian Holt: Flat/recommended.

81
00:05:14.755 --> 00:05:17.847
&gt;&gt; Brian Holt: I think I've complained
about this style of config seven times in

82
00:05:17.847 --> 00:05:20.053
this workshop, but
hear me out one more time.

83
00:05:20.053 --> 00:05:21.324
This is just nonsensical-looking.

84
00:05:22.660 --> 00:05:27.731
Some of them are spread,

85
00:05:27.731 --> 00:05:32.090
some of them are not.

86
00:05:32.090 --> 00:05:35.720
Frankly, I spent a lot of time getting
it right before this course, right?

87
00:05:38.260 --> 00:05:40.870
Anyway, that was my problem,
but not yours.

88
00:05:40.870 --> 00:05:42.130
But your future problem.

89
00:05:42.130 --> 00:05:44.190
So, maybe we can commiserate.

90
00:05:45.190 --> 00:05:48.290
All right, so that should work.

91
00:05:48.290 --> 00:05:51.905
I mean, it's always good to just give her
an all NPM run link just to make sure that

92
00:05:51.905 --> 00:05:53.831
say like, something broke that's cool.

93
00:05:57.327 --> 00:05:59.162
&gt;&gt; Brian Holt: Flat,
recommended all right, so

94
00:05:59.162 --> 00:06:01.513
let's make sure that I
got this right here.

95
00:06:01.513 --> 00:06:06.121
PluginQuery.configs with an s.

96
00:06:08.371 --> 00:06:10.771
&gt;&gt; Brian Holt: Right there.

97
00:06:10.771 --> 00:06:14.959
So I had config, it's configs,
let's try that again.

98
00:06:16.799 --> 00:06:18.572
There we go, okay, good.

99
00:06:23.235 --> 00:06:27.125
&gt;&gt; Brian Holt: Get my dev server
running again, all righty.

100
00:06:32.327 --> 00:06:36.499
&gt;&gt; Brian Holt: So let's go ahead and
add our dev tools, might be fun,

101
00:06:36.499 --> 00:06:37.691
could be cute.

102
00:06:39.351 --> 00:06:41.887
So we're going to root.jsx.

103
00:06:43.613 --> 00:06:49.114
And here at the top, we're going to,
&gt;&gt; Brian Holt: I don`t know,

104
00:06:49.114 --> 00:06:51.471
wherever you want to, under here, import,

105
00:06:53.911 --> 00:06:58.274
&gt;&gt; Brian Holt: ReactQueryDevtools

106
00:06:58.274 --> 00:07:01.937
like that, for.

107
00:07:01.937 --> 00:07:08.788
From at Tanstack, react query dev tools,
&gt;&gt; Brian Holt: okay,

108
00:07:08.788 --> 00:07:12.427
and then I just put it like here.

109
00:07:12.427 --> 00:07:14.997
It doesn't really matter, but
we'll just put it like right there.

110
00:07:14.997 --> 00:07:19.210
React query dev tools, like that.

111
00:07:24.947 --> 00:07:27.446
&gt;&gt; Brian Holt: Some of these dev
tools things are just popping up now.

112
00:07:27.446 --> 00:07:32.362
Cuz I think there's a Vercel one and
a Next.js one,

113
00:07:32.362 --> 00:07:36.731
and I think React Toolkit might have one.

114
00:07:36.731 --> 00:07:39.834
So you can have like seven
sets of DevTools in your app.

115
00:07:39.834 --> 00:07:42.858
It's going to end up being like those,
like old school,

116
00:07:42.858 --> 00:07:46.701
like like web 2.0 browsers that have
like 17 ads that all pop up, but

117
00:07:46.701 --> 00:07:49.104
it's going to be just DevTools everywhere.

118
00:07:51.264 --> 00:07:54.459
Can't decide if that's like utopian or
dystopian, and I think the answer is both.

119
00:07:56.898 --> 00:07:59.604
&gt;&gt; Brian Holt: Okay, so
now we have dev tools in there.

120
00:07:59.604 --> 00:08:03.384
I think if you just look at your app now,
yeah, so

121
00:08:03.384 --> 00:08:08.694
it's mad that we still haven't put
the actual React query library in yet.

122
00:08:08.694 --> 00:08:11.874
It's like, I'm looking for something
to hook onto, and I can't find it yet.

123
00:08:11.874 --> 00:08:13.624
So that's expected.

124
00:08:13.624 --> 00:08:18.075
So app.jsx, we're going to

125
00:08:18.075 --> 00:08:22.703
have to import query client and

126
00:08:22.703 --> 00:08:27.510
query client provider from that

127
00:08:27.510 --> 00:08:32.151
Tanstacked React query here.

128
00:08:35.454 --> 00:08:38.533
&gt;&gt; Brian Holt: So those are the two
things I'm importing here.

129
00:08:38.533 --> 00:08:42.102
We have the create router here and

130
00:08:42.102 --> 00:08:46.948
then we have to create
underneath that a const

131
00:08:46.948 --> 00:08:51.168
query client equals new query client.

132
00:08:51.168 --> 00:08:54.227
There's some configurations
you can pass this

133
00:08:54.227 --> 00:08:58.512
I don't remember what they
are necessarily off the top of my head.

134
00:09:03.056 --> 00:09:08.927
&gt;&gt; Brian Holt: You can pre fill the cache,
which is kind of cool, it's covering it.

135
00:09:08.927 --> 00:09:13.859
So let's say you have a bunch of requests
that you know that the user is likely

136
00:09:13.859 --> 00:09:15.724
to make, if in our example.

137
00:09:15.724 --> 00:09:20.087
Let's say we could pre fill this with
like the last ten orders, just knowing

138
00:09:20.087 --> 00:09:24.536
that that's the most likely orders that
people are going to look at, right?

139
00:09:24.536 --> 00:09:26.458
You could pass that in in query cache,
right?

140
00:09:26.458 --> 00:09:28.698
And so you can precache these things,
which is kinda cool.

141
00:09:28.698 --> 00:09:33.381
The reason why I really like that is
now all of our API requests get to look

142
00:09:33.381 --> 00:09:34.018
normal.

143
00:09:34.018 --> 00:09:37.138
We don't have to say, all right, check the
cache first and then make the API request.

144
00:09:37.138 --> 00:09:39.854
It's like, nope, just make the call
tanstack queries just be like,

145
00:09:39.854 --> 00:09:43.094
if I have it, I'll give it to you already,
and if I don't have it, I'll go get it.

146
00:09:45.194 --> 00:09:47.224
Mutation cache is much the same.

147
00:09:47.224 --> 00:09:48.963
Mutations are like post requests, right,

148
00:09:48.963 --> 00:09:51.504
where you're like posting
something to the API.

149
00:09:51.504 --> 00:09:53.724
You can cache that it's a bit more weird.

150
00:09:53.724 --> 00:09:57.718
And then the default options here,
queries, mutations, hydrate,

151
00:09:57.718 --> 00:10:01.898
dehydrate, there's a bunch of options
around doing stuff like that.

152
00:10:01.898 --> 00:10:03.948
Those were just the TypeScript types.

153
00:10:03.948 --> 00:10:06.800
If that was confusing to anyone,
you can just command, click on things,

154
00:10:06.800 --> 00:10:09.278
and it'll take you to
the TypeScript types.

155
00:10:09.278 --> 00:10:12.158
I do that all the time, just to,
it's like, what does this do?

156
00:10:12.158 --> 00:10:13.088
Why does it do it this way?

157
00:10:14.128 --> 00:10:15.560
Sometimes the the types can help.

158
00:10:17.517 --> 00:10:19.954
&gt;&gt; Brian Holt: Okay, so we have that.

159
00:10:19.954 --> 00:10:24.692
Now, we have to give it to the app
with the QueryClientProvider.

160
00:10:24.692 --> 00:10:29.269
Client = queryClient and

161
00:10:29.269 --> 00:10:34.267
we'll just do it like that.

162
00:10:39.673 --> 00:10:43.593
&gt;&gt; Brian Holt: There we go, so now if you
look at our page, it's loading again, and

163
00:10:43.593 --> 00:10:47.260
you can see we have this nice little
palm tree down in the corner.

164
00:10:49.490 --> 00:10:53.650
It's very tropical, and you click on that,
we don't we're not using it yet.

165
00:10:53.650 --> 00:10:56.691
So our dev tools are vacant, but
stuff will start showing up here,

166
00:10:56.691 --> 00:10:57.896
which is kind of cool you.

