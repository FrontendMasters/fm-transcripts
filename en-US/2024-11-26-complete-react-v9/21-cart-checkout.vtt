WEBVTT

1
00:00:00.140 --> 00:00:02.682
&gt;&gt; Brian Holt: So
inside the render body of order,

2
00:00:02.682 --> 00:00:07.190
you want to take care of the checkout
at this particular level.

3
00:00:10.732 --> 00:00:13.362
&gt;&gt; Brian Holt: Just to kinda
show you how you would do this.

4
00:00:17.476 --> 00:00:20.474
&gt;&gt; Brian Holt: Okay, so we're gonna
write an async function called checkout.

5
00:00:28.955 --> 00:00:33.847
&gt;&gt; Brian Holt: Okay,
we're gonna setLoading(true) because we

6
00:00:33.847 --> 00:00:37.403
don't want people to be able to add and

7
00:00:37.403 --> 00:00:42.418
subtract things while we're checking out,
right?

8
00:00:42.418 --> 00:00:46.768
And then we're going to say,

9
00:00:46.768 --> 00:00:53.391
await fetch( "/ api/order") okay?.

10
00:00:53.391 --> 00:00:58.297
And then we want it to be a post,
so method:"POST",

11
00:00:58.297 --> 00:01:02.801
headers, we have to tell
it it's a JSON request.

12
00:01:02.801 --> 00:01:06.896
So "content- type":

13
00:01:06.896 --> 00:01:12.557
"application/json", Cool.

14
00:01:14.635 --> 00:01:21.126
&gt;&gt; Brian Holt: We're gonna have
a body which is JSON.stringify({ cart }).

15
00:01:27.626 --> 00:01:29.858
&gt;&gt; Brian Holt: So if you're not familiar,

16
00:01:29.858 --> 00:01:32.927
this is the same as saying cart:cart,

17
00:01:32.927 --> 00:01:38.596
the name of the thing is cart, and
the name of the variables cart.

18
00:01:38.596 --> 00:01:41.678
But in JavaScript, you can just condense
that down If they're the same name and

19
00:01:41.678 --> 00:01:43.277
just call it cart like that.

20
00:01:43.277 --> 00:01:49.237
When someone checks out, they probably
expect their cart to be emptied, right?

21
00:01:49.237 --> 00:01:57.257
So, all you do with that is setCart to be
empty array and setLoading to be false.

22
00:01:57.257 --> 00:02:01.500
By this point, because we're doing
an await here, then it's just going to

23
00:02:01.500 --> 00:02:05.012
wait for this to finish first,
and then once this is finished,

24
00:02:05.012 --> 00:02:08.550
then it'll do these things,
that's the magic of await here.

25
00:02:11.620 --> 00:02:14.700
Okay, last thing here,
we have this function called checkout,

26
00:02:14.700 --> 00:02:16.716
we have the ability to
call inside of cart,

27
00:02:16.716 --> 00:02:19.129
but we have to pass it from
parent to child, right?

28
00:02:20.330 --> 00:02:25.730
So down here on cart,
we're just going to say checkout equals,

29
00:02:25.730 --> 00:02:28.940
you probably guessed it, checkout.

30
00:02:31.580 --> 00:02:36.960
And now that function is being passed from
parent to child via the props, right?

31
00:02:36.960 --> 00:02:39.537
So that checkout function is
now this checkout function,

32
00:02:39.537 --> 00:02:42.601
which now we can call very
easily with the on click here.

33
00:02:42.601 --> 00:02:44.912
Let's talk a second about props,
we haven't really talked too,

34
00:02:44.912 --> 00:02:45.791
too much about it.

35
00:02:45.791 --> 00:02:49.616
It used to be kind of confusing

36
00:02:49.616 --> 00:02:54.981
the difference between props and state.

37
00:02:54.981 --> 00:02:57.266
I kind of really pull
those concepts apart so

38
00:02:57.266 --> 00:03:00.740
that hopefully they're not
confusing to each other.

39
00:03:00.740 --> 00:03:04.490
Props are things that are passed
from parent to child, right?

40
00:03:04.490 --> 00:03:06.479
So in this particular case,
you have the cart,

41
00:03:06.479 --> 00:03:09.514
and this is getting the actual cart
itself is coming from the parent, and

42
00:03:09.514 --> 00:03:12.600
checkout is a function that's
coming from the parent.

43
00:03:12.600 --> 00:03:17.117
But it's important to note here, cart is
immutable, or maybe stated differently,

44
00:03:17.117 --> 00:03:20.644
you cannot change cart because
it came from the parent, right?

45
00:03:22.004 --> 00:03:27.704
So I can't say cart =cart.push( 'lol'),
right?

46
00:03:27.704 --> 00:03:29.542
This is not gonna do anything,

47
00:03:29.542 --> 00:03:33.724
because the cart of the parent is
separated from the cart of the child.

48
00:03:34.884 --> 00:03:38.581
So in other words,
this is what's called one-way data flow,

49
00:03:38.581 --> 00:03:42.699
which is something that some people
talk about sometimes with React,

50
00:03:42.699 --> 00:03:47.094
that data only flows down in components,
it never flows up, right?

51
00:03:47.094 --> 00:03:52.808
So there's no way I can say inside of
this cart, like parent.cart.push or

52
00:03:52.808 --> 00:03:59.613
anything like that, doesn't exist, there's
no way to do that directly from the child.

53
00:03:59.613 --> 00:04:04.428
The only way that a child component can
affect the parent component is through

54
00:04:04.428 --> 00:04:09.389
something like this, where you pass a
function down from the parent to the child

55
00:04:09.389 --> 00:04:14.447
and say, hey child, when you want to
affect the parent, called this function.

56
00:04:15.987 --> 00:04:19.493
So maybe you stated differently,
cart has no concept of its parent,

57
00:04:19.493 --> 00:04:23.420
it could be the top level component,
it could not be the top level component,

58
00:04:23.420 --> 00:04:26.262
it could be rendered here,
it could be rendered there,

59
00:04:26.262 --> 00:04:29.420
it has no concept of where it is,
it doesn't matter, right?

60
00:04:29.420 --> 00:04:34.830
It's its own encapsulated component, this
is different versus the useState, right?

61
00:04:34.830 --> 00:04:39.418
Which is the mutable part of the child
that it can modify itself, right?

62
00:04:39.418 --> 00:04:44.117
And a component can only modify its own
state, it can't modify its child state,

63
00:04:44.117 --> 00:04:48.263
it can't modify its parent state,
it can only modify its own state, so

64
00:04:48.263 --> 00:04:51.875
in other words,
these components are self-encapsulated.

65
00:04:51.875 --> 00:04:56.210
It can be annoying because it makes it
verbose to change things at various

66
00:04:56.210 --> 00:04:59.030
different levels, but it means that like.

67
00:04:59.030 --> 00:05:03.822
If I see that there's a problem with cart,
let's say it is showing the wrong word for

68
00:05:03.822 --> 00:05:04.510
checkout.

69
00:05:07.100 --> 00:05:12.107
I'm 99.99% that the problem is
going to be inside of cart,

70
00:05:12.107 --> 00:05:16.210
it makes it very obvious
of where problems are.

71
00:05:16.210 --> 00:05:19.121
And that's my favorite part about
React is it's very debuggable from

72
00:05:19.121 --> 00:05:20.318
that perspective, right?

73
00:05:22.018 --> 00:05:24.042
If there's a problem with checkout here,

74
00:05:24.042 --> 00:05:26.685
it could mean that the props
are passed in incorrectly,

75
00:05:26.685 --> 00:05:31.248
in which case I'd have to go up the parent
tree to see, what are you passing down?

76
00:05:31.248 --> 00:05:35.192
But at that interface level,
parent passes in this, child takes this,

77
00:05:35.192 --> 00:05:37.598
makes that interface really easy to debug.

78
00:05:37.598 --> 00:05:41.179
Because I can just open my dev tool,
like what are your props, right?

79
00:05:41.179 --> 00:05:41.919
What did you get?

80
00:05:42.939 --> 00:05:45.552
And if it's what I expect or what it gets,

81
00:05:45.552 --> 00:05:49.509
right, that I know the problem
lies within the child.

82
00:05:49.509 --> 00:05:54.145
So let's go fix the problem
that we had here,

83
00:05:54.145 --> 00:05:57.319
it is not header, it headers.

84
00:05:59.432 --> 00:06:04.538
How dare you browse, so that's in
order.JSX, that's the checkout function,

85
00:06:04.538 --> 00:06:07.722
just make sure you have
headers instead of header.

86
00:06:10.842 --> 00:06:15.567
Alright, so
then we can come back over here, and

87
00:06:15.567 --> 00:06:20.067
get your Hawaiian pizza, couple of those.

88
00:06:20.067 --> 00:06:25.060
Barbecue, add cart,
click Check out, and you can see,

89
00:06:25.060 --> 00:06:27.877
we get a 200 with an orderid.

90
00:06:29.157 --> 00:06:32.021
So just so you know this actually
is being saved in your database,

91
00:06:32.021 --> 00:06:35.317
then the little SQLite file, so
you'll be able to view your orders later.

92
00:06:35.317 --> 00:06:42.268
And you can just wonder, why did you buy
so many not Pluton of pizzas [LAUGH]

