WEBVTT

1
00:00:00.444 --> 00:00:01.094
&gt;&gt; Brian Holt: Let's do coverage.

2
00:00:01.094 --> 00:00:02.646
We were just talking
about 100% test coverage.

3
00:00:02.646 --> 00:00:05.497
I'm going to show you how to
measure that with vTest now.

4
00:00:05.497 --> 00:00:10.677
We are gonna install one more thing,

5
00:00:10.677 --> 00:00:19.043
NPM install D at VTest slash
coverage dash v8 2.1.3.

6
00:00:22.693 --> 00:00:23.583
&gt;&gt; Brian Holt: Okay.

7
00:00:25.786 --> 00:00:27.099
&gt;&gt; Brian Holt: I showed
you how to do this,

8
00:00:27.099 --> 00:00:28.936
I'm gonna show you how to do with V8.

9
00:00:28.936 --> 00:00:32.769
I think it's the better library, but
if you are bent on using Istanbul.

10
00:00:34.974 --> 00:00:36.658
&gt;&gt; Brian Holt: You can do that as,
well and

11
00:00:36.658 --> 00:00:39.081
that will get the Istanbul one as well.

12
00:00:39.081 --> 00:00:42.694
If it doesn't make any difference to you,
just to stick with VA Istanbul has,

13
00:00:42.694 --> 00:00:45.784
like the been the gold standard for
longer than my career, right?

14
00:00:45.784 --> 00:00:50.712
It's been the test coverage tool forever,

15
00:00:50.712 --> 00:00:53.781
but V8 is the new hotness.

16
00:00:53.781 --> 00:01:01.495
All right, so I want you to go to
your V config really quick and.` And

17
00:01:01.495 --> 00:01:06.292
inside of, I think it just says coverage.

18
00:01:06.292 --> 00:01:08.493
So we're gonna do coverage here.

19
00:01:08.493 --> 00:01:10.966
Is it inside of test, I can't tell.

20
00:01:10.966 --> 00:01:12.229
Yeah, it's inside of test.

21
00:01:12.229 --> 00:01:13.807
My notes didn't say that.

22
00:01:13.807 --> 00:01:18.483
But coverage, and then we're gonna do

23
00:01:18.483 --> 00:01:23.451
a reporter, and I just have in here text.

24
00:01:23.451 --> 00:01:27.526
I think I have all of them, but
you can choose just some of them.

25
00:01:27.526 --> 00:01:36.001
JSON and HTML and this will generate all
of the tests for your coverage tools.

26
00:01:36.001 --> 00:01:40.107
You probably don't need all of them,
we'll look at the HTML one, but

27
00:01:40.107 --> 00:01:43.100
the JSON one can be ingested
into your dashboards or

28
00:01:43.100 --> 00:01:45.759
something like that,
if you want to do that.

29
00:01:45.759 --> 00:01:49.923
Okay, that's really it,
which is kind of cool to set this up.

30
00:01:49.923 --> 00:01:54.246
The only thing we got to go do
now is in our package.json,

31
00:01:54.246 --> 00:01:59.396
instead of our scripts,
we're gonna create one called coverage.

32
00:01:59.396 --> 00:02:04.503
So, I'll just put this down at the bottom,
coverage,

33
00:02:04.503 --> 00:02:11.580
and all you're gonna do is vtest--
coverage, and it will handle the rest.

34
00:02:11.580 --> 00:02:15.410
If you've never had to set up
coverage by hand in like, I don't,

35
00:02:15.410 --> 00:02:16.745
like eight years ago.

36
00:02:16.745 --> 00:02:20.552
I just want you to know that
this used to suck [LAUGH] a lot,

37
00:02:20.552 --> 00:02:24.781
to instrument everything correctly,
to run test coverage.

38
00:02:24.781 --> 00:02:31.195
And the fact that VTest just does it for
you is just great.

39
00:02:32.387 --> 00:02:36.670
&gt;&gt; Brian Holt: MPM, run, test: or
no, I call the coverage.

40
00:02:36.670 --> 00:02:39.777
MPM run Coverage, like that.

41
00:02:39.777 --> 00:02:45.065
It's gonna run our entire testing suite,
and then we get this really cool report

42
00:02:45.065 --> 00:02:50.536
here in our command line, of what files
are covered, what files aren't covered.

43
00:02:50.536 --> 00:02:55.373
And this is cool that we get
this directly into our CLI, but

44
00:02:55.373 --> 00:02:59.641
we can actually do something
that's even cooler.

45
00:02:59.641 --> 00:03:04.500
I'm gonna go to my browser and
I'm gonna do Command open, and

46
00:03:04.500 --> 00:03:09.920
I'm gonna be in Padre Genos here,
you get this coverage directory,

47
00:03:09.920 --> 00:03:15.170
and just open this index.HTML
inside of the coverage directory.

48
00:03:15.170 --> 00:03:19.609
Now, we get a full on web page that's
just Scribes all of the test coverage.

49
00:03:19.609 --> 00:03:23.563
When I say coverage, I'm just saying what
files are tested and what files are not,

50
00:03:23.563 --> 00:03:25.895
and what lines are tested and
what lines are not.

51
00:03:25.895 --> 00:03:28.938
So let's look at our source directory,

52
00:03:28.938 --> 00:03:32.976
we can see that pizza.jsx,
every line was covered.

53
00:03:32.976 --> 00:03:36.837
You can see some of them got run twice,
some of them got run once.

54
00:03:36.837 --> 00:03:40.591
Cool, let's go look at cart.

55
00:03:40.591 --> 00:03:45.185
You can see that all of these
lines were run once, but

56
00:03:45.185 --> 00:03:48.640
you can see it actually never got here.

57
00:03:48.640 --> 00:03:50.007
Why is that?

58
00:03:50.007 --> 00:03:51.473
Well, we gave it an empty cart.

59
00:03:51.473 --> 00:03:53.028
We never gave it a full cart, right?

60
00:03:53.028 --> 00:03:55.643
So this for loop never gets run.

61
00:03:55.643 --> 00:04:01.415
This cart.map never gets run because
it never had anything in the cart.

62
00:04:01.415 --> 00:04:03.714
Or use pizza the day, right?

63
00:04:03.714 --> 00:04:06.487
Some of these got run twice,
this got run four times.

64
00:04:06.487 --> 00:04:08.852
That's kind of cool, right?

65
00:04:08.852 --> 00:04:11.769
And you can see, for example,
header never tested.

66
00:04:11.769 --> 00:04:14.275
Same with sources like post contact,
looks like this got run, but

67
00:04:14.275 --> 00:04:15.672
we never hit the error case, right?

68
00:04:15.672 --> 00:04:18.770
So we don't know if it actually
does the correct error.

69
00:04:20.782 --> 00:04:25.774
&gt;&gt; Brian Holt: So you can see here
we have 16% of statements under 17%,

70
00:04:25.774 --> 00:04:29.330
45% of branches, 33% of functions.

71
00:04:29.330 --> 00:04:31.964
Obviously, this is not a well
tested code base, right?

72
00:04:31.964 --> 00:04:34.529
I'm not purporting that it is.

73
00:04:34.529 --> 00:04:38.631
But I'm also gonna say that I don't I
think 100% test coverage is a worthy goal.

74
00:04:38.631 --> 00:04:39.663
I think it's a waste of time.

75
00:04:39.663 --> 00:04:42.501
Most of the time you end up writing
tests that you don't care about.

76
00:04:42.501 --> 00:04:45.010
And tests that you don't care about
are worse than tests that don't exist.

77
00:04:45.010 --> 00:04:47.068
It's pretty cool stuff, though, right?

78
00:04:47.068 --> 00:04:50.012
This all just gets
generated automatically.

79
00:04:50.012 --> 00:04:51.296
I think it's cool.

