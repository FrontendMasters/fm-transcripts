WEBVTT

1
00:00:00.440 --> 00:00:01.160
&gt;&gt; Brian Holt: So, yeah, thank you.

2
00:00:01.160 --> 00:00:05.992
Thank you for all sticking with it,
this is a lot of material to take in.

3
00:00:05.992 --> 00:00:10.310
I think it's a pretty usable and fun
to use library for building interfaces.

4
00:00:10.310 --> 00:00:13.920
I still use it to this day,
just for my side projects.

5
00:00:13.920 --> 00:00:18.827
I do dabble around with solid and
HTML and all those kinda things as well,

6
00:00:18.827 --> 00:00:22.299
but it's old reliable for
me to come back to React.

7
00:00:22.299 --> 00:00:25.354
Something I'm gonna have to maintain for

8
00:00:25.354 --> 00:00:29.435
a while and
have a team work on all that kinda stuff.

9
00:00:29.435 --> 00:00:35.101
I still think React is the best
library for it, fight me.

10
00:00:35.101 --> 00:00:39.825
So, yeah, I'm gonna assert that what I
taught you today is 95% of what you need

11
00:00:39.825 --> 00:00:42.508
to know about writing
React professionally.

12
00:00:42.508 --> 00:00:44.785
The last 5% is a pretty long tail and

13
00:00:44.785 --> 00:00:49.707
gets into some really strange performance
details, like use transition, and

14
00:00:49.707 --> 00:00:53.389
some of these things I didn't
really end up talking about.

15
00:00:53.389 --> 00:00:57.822
If you're doing advanced animations,
or animating between pages, or

16
00:00:57.822 --> 00:01:02.255
something like that, you'll need a bit
more than I talked about today or

17
00:01:02.255 --> 00:01:04.600
if you're building like libraries.

18
00:01:04.600 --> 00:01:08.634
But for just building interfaces,
like everything that I did at Netflix,

19
00:01:08.634 --> 00:01:10.170
I think that's fair to say,

20
00:01:10.170 --> 00:01:13.962
everything that I did at Netflix is
encapsulated what I taught today.

21
00:01:13.962 --> 00:01:15.009
So that should tell you something.

22
00:01:17.936 --> 00:01:21.057
&gt;&gt; Brian Holt: And I'll say, yeah,
the last 5% I'll be teaching you

23
00:01:21.057 --> 00:01:23.997
an intermediate React v6
which is scheduled later.

24
00:01:26.590 --> 00:01:29.956
&gt;&gt; Brian Holt: So you might be
asking what do I do from here?

25
00:01:29.956 --> 00:01:35.268
Well, our intermediate React,
v5 has a lot of good stuff in it, and

26
00:01:35.268 --> 00:01:40.320
another dashing gentleman in
a very nice looking sweater there.

27
00:01:40.320 --> 00:01:45.317
I go through all the hooks that
exist React 18 in depth, so reducer,

28
00:01:45.317 --> 00:01:49.565
memo, callback,
I didn't talk about any of these today.

29
00:01:49.565 --> 00:01:54.278
We do tailwind if you wanna talk
about that, more performance.

30
00:01:54.278 --> 00:01:57.286
Code splitting,
we kinda talked about today.

31
00:01:57.286 --> 00:01:59.445
You could probably actually
end up skipping some of this,

32
00:01:59.445 --> 00:02:00.995
cuz this will be covered better with v6.

33
00:02:02.721 --> 00:02:05.631
I did talk about deferred value and
useTransition.

34
00:02:05.631 --> 00:02:09.941
We convert the entire project to
TypeScript, that might be helpful.

35
00:02:09.941 --> 00:02:15.951
Redux and testing this, I moved that into
intro cuz that seems more appropriate.

36
00:02:17.041 --> 00:02:20.712
So that's out there for
you if you wanna do that.

37
00:02:20.712 --> 00:02:24.523
There's a front-end
master's learning path,

38
00:02:24.523 --> 00:02:29.424
there's other stuff on here
React performance, TypeScript,

39
00:02:29.424 --> 00:02:32.520
Next.js lots of good goodies in there.

40
00:02:32.520 --> 00:02:37.804
Next.js, Remix/React-Router,
that's all goodness.

41
00:02:37.804 --> 00:02:42.521
And then again Tailwind,
there's a great Steve King Course on

42
00:02:42.521 --> 00:02:47.426
doing Tailwind as well,
which is people seem to love with React.

43
00:02:47.426 --> 00:02:51.334
Let's just talk a moment about
other stuff you could do.

44
00:02:51.334 --> 00:02:55.613
You could build your own app,
I always encourage people to build apps,

45
00:02:55.613 --> 00:02:58.624
cuz that's usually the way
that I learn the best.

46
00:02:58.624 --> 00:03:02.497
For work I had to build an example
app inside, I haven't HTMX very much,

47
00:03:02.497 --> 00:03:07.222
and so I spent a bunch of time learning
HTMX building a sample app, right?

48
00:03:07.222 --> 00:03:10.518
So I think that's the best
way to internalize this.

49
00:03:10.518 --> 00:03:14.845
I just picked the dumbest idea in my head,
I'm gonna go build that.

50
00:03:14.845 --> 00:03:19.043
One of the ones I just built recently
was associating my Strava and

51
00:03:19.043 --> 00:03:24.383
associating my Spotify, and then it would
read what music I listened to on my runs,

52
00:03:24.383 --> 00:03:29.114
and then it would use open AI to
generate stupid titles for my runs.

53
00:03:29.114 --> 00:03:32.730
That was it, it's an objectively
terrible idea, but I did it, and

54
00:03:32.730 --> 00:03:37.224
I learned a bunch of stuff about
the technology I was working with, right?

55
00:03:37.224 --> 00:03:41.133
So do stuff like that,
I encourage you to build the Thomas tabs.

56
00:03:41.133 --> 00:03:44.656
The Sarah Vieira is an awesome
developer relations person on Twitter.

57
00:03:44.656 --> 00:03:50.046
She wants to bring back stupid, and
I wholeheartedly endorse that motion.

58
00:03:52.136 --> 00:03:56.521
One more thing is, people like to deploy
their apps, which I think is a kinda

59
00:03:56.521 --> 00:04:01.131
cool thing to do with this afterwards,
you can put it as part of your portfolio.

60
00:04:01.131 --> 00:04:04.134
Or, I don't know, just learn a bunch
of stuff about infrastructure,

61
00:04:04.134 --> 00:04:06.729
which I'm also very much into, obviously.

62
00:04:06.729 --> 00:04:09.969
So I wanted to talk a second, I was like,
how would you go about deploying this app?

63
00:04:11.119 --> 00:04:18.369
The first thing, so let's stop our
server here, we'd made an npm run build.

64
00:04:18.369 --> 00:04:20.599
We already did that at
the beginning of the course.

65
00:04:20.599 --> 00:04:26.618
This will build everything into a very
nice ready to go package here called dist.

66
00:04:26.618 --> 00:04:30.238
So you have index.html and
all of your static assets.

67
00:04:32.188 --> 00:04:37.105
So that's cool,
that's all ready to be deployed to a CDN.

68
00:04:37.105 --> 00:04:40.430
You would also have to deploy your API, so

69
00:04:40.430 --> 00:04:44.906
let's talk just a second about
what you would do there.

70
00:04:47.015 --> 00:04:50.353
&gt;&gt; Brian Holt: So this is the API.

71
00:04:53.200 --> 00:04:55.766
&gt;&gt; Brian Holt: The first thing is,
this is all running on SQLite,

72
00:04:55.766 --> 00:04:58.632
which there's another good
course on Frontend Master,

73
00:04:58.632 --> 00:05:00.976
if you wanna learn about
SQLite that I taught.

74
00:05:03.967 --> 00:05:06.944
&gt;&gt; Brian Holt: So you either need to move
this database off of this server, or

75
00:05:06.944 --> 00:05:11.215
you just have to accept that it's going
to not preserve your data long term.

76
00:05:11.215 --> 00:05:14.180
One of those two things, if you don't
care about saving your database,

77
00:05:14.180 --> 00:05:15.795
by all means leave it just the way it is.

78
00:05:15.795 --> 00:05:20.395
If you care about saving your database,
there's a cool database company

79
00:05:20.395 --> 00:05:24.854
called Neon, I don't know if you've
heard of it, it's pretty cool.

80
00:05:24.854 --> 00:05:28.984
You could definitely load this SQLite
database directly into Neon and

81
00:05:28.984 --> 00:05:31.645
then put the NEON
connection string in here.

82
00:05:31.645 --> 00:05:36.381
I am 95% sure that this is just
all very dumb SQL that would

83
00:05:36.381 --> 00:05:39.718
all work directly with Postgres.

84
00:05:39.718 --> 00:05:44.121
So you would just have to change from this
SQLite driver to something like the Neon

85
00:05:44.121 --> 00:05:46.529
serverless driver or something like that.

86
00:05:46.529 --> 00:05:50.206
It would be pretty fast to convert
this from SQLite to Postgres, or

87
00:05:50.206 --> 00:05:55.118
you could use something like Turso,
right, which does SQLite in the cloud.

88
00:05:55.118 --> 00:05:57.196
All of those are valid options.

89
00:05:57.196 --> 00:06:00.975
And then you'd have to deploy
this to something like Vercel or

90
00:06:00.975 --> 00:06:03.673
Elastic Beanstalk or something like that.

91
00:06:05.327 --> 00:06:08.536
&gt;&gt; Brian Holt: So if you're able to do
that, deploy all your static assets,

92
00:06:08.536 --> 00:06:10.707
deploy your app, change your database.

93
00:06:10.707 --> 00:06:14.537
If you care about changing your database,
then everything should just work.

94
00:06:15.537 --> 00:06:18.751
Last thing, you might need to move,
you might need to move the style.css and

95
00:06:18.751 --> 00:06:22.096
some of the images over to this project,
cuz that's kinda where they belong.

96
00:06:22.096 --> 00:06:24.833
I was kinda cheating by making
it available on the API so

97
00:06:24.833 --> 00:06:28.894
that you never had to worry about where
the images of the styles were coming from.

98
00:06:28.894 --> 00:06:33.709
But that might be the case as well,
any questions?

99
00:06:33.709 --> 00:06:39.361
All right, nailed it,
no questions, perfect dismount.

100
00:06:39.361 --> 00:06:43.823
[LAUGH] [APPLAUSE]

