WEBVTT

1
00:00:00.430 --> 00:00:05.334
There's a question about, it looks like
there's a number of ways that you can

2
00:00:05.334 --> 00:00:10.400
fetch data, whether you're using
useEffect, React query or TanStack query.

3
00:00:11.450 --> 00:00:14.453
They seem to share a lot
of the same purposes,

4
00:00:14.453 --> 00:00:18.810
what's a use case I would use
Tanstack query over say useEffect?

5
00:00:20.070 --> 00:00:26.302
&gt;&gt; Brian Holt: It's good question,
you can choose for yourself, right?

6
00:00:26.302 --> 00:00:30.666
So I've kind of shown you both
ways cuz I wanted you to see,

7
00:00:30.666 --> 00:00:36.472
this is a personal preference and
I'm gonna say this is not a controversial.

8
00:00:36.472 --> 00:00:41.265
Opinion here, is that the industry
tends to just use React Query

9
00:00:41.265 --> 00:00:45.455
when it comes to making API
requests on a regular basis.

10
00:00:45.455 --> 00:00:51.685
This API is just a lot nicer that
it has built in caching into it,

11
00:00:51.685 --> 00:00:58.327
the hooks are super nice,
it has refreshing built into it.

12
00:00:58.327 --> 00:00:59.577
It has nice error handling,

13
00:00:59.577 --> 00:01:02.714
all the stuff that you would have to
kind of just reconstruct yourself.

14
00:01:04.354 --> 00:01:08.843
This is such an elegant tool in my opinion
and honestly, this is one of the tools I

15
00:01:08.843 --> 00:01:12.805
hold up as like a prime example of
really good developer experiences.

16
00:01:12.805 --> 00:01:15.514
Because you can use
React Query however you want,

17
00:01:15.514 --> 00:01:18.494
it really doesn't enforce
an opinion too much on you.

18
00:01:18.494 --> 00:01:22.294
It's just a very useful tool that's
generally applicable to almost every

19
00:01:22.294 --> 00:01:25.902
problem when it comes to react
components making API requests.

20
00:01:25.902 --> 00:01:30.544
That's why I don't really feel too much
controversy in saying just always use this

21
00:01:30.544 --> 00:01:32.412
if you're using an API, right?

22
00:01:32.412 --> 00:01:37.002
If you wanna refetch every single time
you just set the stale time to 0 and

23
00:01:37.002 --> 00:01:38.289
all of a sudden, okay?

24
00:01:38.289 --> 00:01:41.411
Now it's gonna refetch at
every single time, right?

25
00:01:41.411 --> 00:01:45.311
I can't remember if it's zero or infinity.

26
00:01:45.311 --> 00:01:49.658
&gt;&gt; Brian Holt: So I think what I did here
is, I think I made it always refetch or

27
00:01:49.658 --> 00:01:54.677
something like that maybe it's one there,
might even be, no cache, or

28
00:01:54.677 --> 00:02:00.056
something like that, you'd have to go
look at what the actual, here it is.

29
00:02:01.957 --> 00:02:05.702
We'll use enabled here in just a second,

30
00:02:05.702 --> 00:02:10.410
you can tell it how many pages
you want it to hold max,

31
00:02:10.410 --> 00:02:15.867
there's a bunch of stuff anyway,
maybe just make this one.

32
00:02:15.867 --> 00:02:19.991
Anyway, so when would I use useEffect?

33
00:02:19.991 --> 00:02:24.894
UseEffect still has its place, if I had
to talk to local storage or something

34
00:02:24.894 --> 00:02:30.041
like that, I might find a library for
that, I might just use an effect for that.

35
00:02:31.071 --> 00:02:35.106
A good example is like, okay,
I loaded a component and

36
00:02:35.106 --> 00:02:40.007
I wanna fire off analytics events,
I'd use an effect for that.

37
00:02:40.007 --> 00:02:43.235
Yeah, so it still has its use cases.

38
00:02:43.235 --> 00:02:48.632
&gt;&gt; Male Student 2: With remote state
management, is TanStack a better solution

39
00:02:48.632 --> 00:02:54.267
or is something like Zustand or
Redux handle that better?

40
00:02:54.267 --> 00:02:58.787
&gt;&gt; Brian Holt: I'm gonna say that they're
different tools for different jobs,

41
00:02:58.787 --> 00:03:03.073
you can use Zustand or
something like that with React Query.

42
00:03:03.073 --> 00:03:05.681
You certainly can use Redux as a cache,

43
00:03:05.681 --> 00:03:10.831
there's no reason that you couldn't,
but they serve different purposes.

44
00:03:10.831 --> 00:03:17.011
The TanStack store is more directly
competing with Zustand and all of those.

45
00:03:17.011 --> 00:03:22.177
Like I said, I tend not to use any
state management libraries anymore,

46
00:03:22.177 --> 00:03:26.049
but if I was building
something like Figma, right?

47
00:03:26.049 --> 00:03:31.388
Very big, complicated browser
app that's gonna have a lot of

48
00:03:31.388 --> 00:03:37.343
browsers-based data that's gonna
be shared across lots of teams,

49
00:03:37.343 --> 00:03:41.964
then I would use something
like Zustand to coordinate

50
00:03:41.964 --> 00:03:46.811
across a massive big app that
has lots of app level data.

51
00:03:49.151 --> 00:03:53.751
I'm not the person that's gonna use it on
a very small app, but on an enormous app,

52
00:03:53.751 --> 00:03:57.366
I think at that scale and
with that many people looking at the app,

53
00:03:57.366 --> 00:03:58.836
it makes more sense to me.

54
00:03:58.836 --> 00:04:02.982
&gt;&gt; Male Student 3: Kadi Kraman uses,
Zustand in our React Native courses.

55
00:04:02.982 --> 00:04:04.030
&gt;&gt; Brian Holt: Cool.
&gt;&gt; Male Student 3: It's released, so

56
00:04:04.030 --> 00:04:05.704
if you're interested in Zustand, right?

57
00:04:05.704 --> 00:04:07.114
You wanna learn more about it?

58
00:04:07.114 --> 00:04:09.999
&gt;&gt; Brian Holt: Yeah, I would say with
an iOS app where you have many pages and

59
00:04:09.999 --> 00:04:12.829
it's all being stored in
the same thing with React Native,

60
00:04:12.829 --> 00:04:14.314
that makes a lot of sense to me.

61
00:04:14.314 --> 00:04:18.121
&gt;&gt; Male Student 4: Do you have any
opinions about putting query code inside

62
00:04:18.121 --> 00:04:19.724
a custom hook?

63
00:04:19.724 --> 00:04:21.158
&gt;&gt; Brian Holt: It's a good question, so

64
00:04:21.158 --> 00:04:23.641
why wouldn't I put this
one in a custom hook?

65
00:04:25.801 --> 00:04:30.065
Cuz I don't think that makes it
any clearer what this is doing,

66
00:04:30.065 --> 00:04:31.765
and I'm not gonna test.

67
00:04:31.765 --> 00:04:36.752
I'm not gonna write tests for React Query,
Tanner Lindley and the react or

68
00:04:36.752 --> 00:04:41.518
the TanStack team test it plenty more
than I ever wanna test it, right?

69
00:04:41.518 --> 00:04:45.617
So I don't wanna test my libraries,
I assume my libraries test themselves, and

70
00:04:45.617 --> 00:04:47.363
so if I put this into a custom hook,

71
00:04:47.363 --> 00:04:49.979
there'd be nothing
interesting to test about it.

72
00:04:51.909 --> 00:04:53.709
So I just wouldn't, however,

73
00:04:53.709 --> 00:04:57.442
if I had seven requests that were
firing off in serial and I wanted to

74
00:04:57.442 --> 00:05:01.812
make sure that the right things were
being called in the right in order.

75
00:05:01.812 --> 00:05:05.092
Yeah, I'd make that a custom hook,
but for just one request, no,

76
00:05:05.092 --> 00:05:07.810
I'm okay just putting this
directly in the component.

77
00:05:07.810 --> 00:05:13.312
I just chose these two because almost
every app that you write has API requests.

78
00:05:13.312 --> 00:05:18.780
Almost every app you write has routing
needs, or at least very frequently,

79
00:05:18.780 --> 00:05:24.513
so I chose these two, but there's other
ones out there, like virtual tables.

80
00:05:24.513 --> 00:05:29.993
Those can be super useful form libraries,
all sorts of stuff like that.

81
00:05:29.993 --> 00:05:34.820
There's lots of things to talk about with
CSS, and I decided to not talk too much

82
00:05:34.820 --> 00:05:39.233
about CSS in the intro to this one,
it's a pretty fractured ecosystem.

83
00:05:39.233 --> 00:05:43.610
So there's not an obvious one to
teach you like this is the answer.

84
00:05:45.960 --> 00:05:51.300
Once you understand React,
layering in CSS is not super hard.

85
00:05:53.290 --> 00:05:58.031
I'll just throw in that I'm
of the opinion, typically,

86
00:05:58.031 --> 00:06:01.611
let's say if I have this, PizzaOfTheDay,

87
00:06:01.611 --> 00:06:06.189
I'll just come in here and
say, PizzaOfTheDay.css.

88
00:06:07.209 --> 00:06:11.957
And this will just be normal run,

89
00:06:11.957 --> 00:06:16.029
not very interesting CSS and

90
00:06:16.029 --> 00:06:21.118
then here in PizzaOfTheDay.jsx,

91
00:06:21.118 --> 00:06:28.257
I'll just say import ./PizzaOfTheDay.css.

92
00:06:30.827 --> 00:06:35.447
That's how I like to do it, it keeps it
pretty simple I'm just writing direct CSS.

93
00:06:35.447 --> 00:06:38.367
And actually,
if you really wanna get into it,

94
00:06:38.367 --> 00:06:43.190
what I'll do is I'll actually have
a directory, PizzaOfTheDay directory.

95
00:06:43.190 --> 00:06:46.685
I'll have the component in there,
I'll have the CSS in there,

96
00:06:46.685 --> 00:06:49.570
I'll have all the tests for it in there.

97
00:06:49.570 --> 00:06:51.429
My favorite part about that pattern is,

98
00:06:51.429 --> 00:06:55.320
let's say I just we've decided later that
we're going to Pizza of the month, right?

99
00:06:55.320 --> 00:07:00.123
And now we need a whole new component with
new tests and new CSS, if you don't do it

100
00:07:00.123 --> 00:07:04.589
this way you have to go hunt for all
the files and delete them individually.

101
00:07:04.589 --> 00:07:08.133
Or even worse and even more likely
is that you just don't, and

102
00:07:08.133 --> 00:07:11.767
you leave dead code in your code base,
right?

103
00:07:11.767 --> 00:07:15.050
If you structure it like that where it's
just a directory of everything's kind

104
00:07:15.050 --> 00:07:18.138
of self-contained in directory,
you just delete the whole directory and

105
00:07:18.138 --> 00:07:21.127
you're just assured that all of
the related code goes with it.

106
00:07:21.127 --> 00:07:24.079
I wasn't intending to talk about CSS or
anything like that but

107
00:07:24.079 --> 00:07:26.650
that's how I do handle it
nine times out of ten.

108
00:07:26.650 --> 00:07:30.940
I can hear chat now furiously just banging
away it's like what about Tailwind?

109
00:07:30.940 --> 00:07:34.389
I was like okay,
[LAUGH] I understand Tailwind,

110
00:07:34.389 --> 00:07:37.936
I've taught Tailwind as
part of intermediate.

111
00:07:37.936 --> 00:07:42.505
So if you wanna see how I use
Tailwind it's Intermediate React,

112
00:07:42.505 --> 00:07:45.309
v5, there's a section on Tailwind.

113
00:07:46.529 --> 00:07:50.921
I've kinda come back around to it as,
I don't really like using it,

114
00:07:50.921 --> 00:07:53.809
I kinda like writing CSS, right?

115
00:07:53.809 --> 00:07:57.491
But I don't judge those that do,
I don't have any strong opinion of like,

116
00:07:57.491 --> 00:08:00.589
I don't like the class names or
anything like that.

117
00:08:00.589 --> 00:08:04.394
I am just personally have a bit
of Stockholm syndrome around CSS,

118
00:08:04.394 --> 00:08:07.956
that I've been doing it for so
long that now I kinda like it.

119
00:08:07.956 --> 00:08:11.812
And so I'm just gonna keep doing that but
if I hadn't had so

120
00:08:11.812 --> 00:08:13.937
many years of fighting floats,

121
00:08:13.937 --> 00:08:19.526
[LAUGH] then I probably would be more
drawn to something like Tailwind, right?

122
00:08:19.526 --> 00:08:23.135
So totally valid if you use it in your
code base I'm not upset, I will have

123
00:08:23.135 --> 00:08:27.532
contribute to a Tailwind code base, it's
just not what I'm gonna choose personally.

124
00:08:29.932 --> 00:08:30.611
And I will say,

125
00:08:30.611 --> 00:08:34.182
I think it's probably the most common
thing with React now is to write Tailwind.

126
00:08:35.562 --> 00:08:38.908
That's just a feeling,
I'm not sure if that's actually true, but

127
00:08:38.908 --> 00:08:40.882
certainly I see that being very common.

