WEBVTT

1
00:00:00.102 --> 00:00:03.213
&gt;&gt; Brian Holt: We are gonna
talk about linting.

2
00:00:03.213 --> 00:00:06.040
Who is pumped about linting, get out.

3
00:00:06.040 --> 00:00:08.228
[LAUGH] No, I'm just kidding.

4
00:00:08.228 --> 00:00:11.581
[LAUGH] Just kidding.

5
00:00:11.581 --> 00:00:13.159
I got mixed feelings about linting.

6
00:00:13.159 --> 00:00:18.252
I've gone all over the map from unlinting.

7
00:00:18.252 --> 00:00:23.508
If you watch complete intro to React V2,
there comes in this different Brian Holt

8
00:00:23.508 --> 00:00:28.402
character that's just like we're gonna
lint the hell out of this project.

9
00:00:28.402 --> 00:00:33.143
It's gonna look like one person wrote it
and I was very much on that train of like,

10
00:00:33.143 --> 00:00:35.189
let's let the tools control you.

11
00:00:35.189 --> 00:00:38.352
And I've come all the way
back the other way and

12
00:00:38.352 --> 00:00:40.798
if you like watch React V7.

13
00:00:40.798 --> 00:00:42.209
You get this hippie brand.

14
00:00:42.209 --> 00:00:44.714
It's free love and no linting, right?

15
00:00:44.714 --> 00:00:50.758
Where I'm just write
whatever code you feel dude.

16
00:00:50.758 --> 00:00:55.162
Now I've come back more to
help me catch very common and

17
00:00:55.162 --> 00:01:00.055
very easy to miss bugs and
otherwise leave me the hell alone.

18
00:01:00.055 --> 00:01:04.836
This actually just kind of applies to
my general thought process on building

19
00:01:04.836 --> 00:01:08.796
dev tools of your developer has
something in mind that they want

20
00:01:08.796 --> 00:01:10.301
to express in the code.

21
00:01:10.301 --> 00:01:15.362
And don't interrupt them unless
they're actually going to,

22
00:01:15.362 --> 00:01:18.520
unless you're helping them, right?

23
00:01:18.520 --> 00:01:23.417
Just getting someone to write code in a
certain format because you feel like it is

24
00:01:23.417 --> 00:01:25.463
adding more and more friction and

25
00:01:25.463 --> 00:01:29.722
it's more distance between someone
expressing their idea in code.

26
00:01:29.722 --> 00:01:34.986
And so that's why I'm much more
careful these days to be very light

27
00:01:34.986 --> 00:01:40.913
on the linting side and just if it's
not important, don't do it, right.

28
00:01:40.913 --> 00:01:44.630
Okay, so we're gonna do prettier and

29
00:01:44.630 --> 00:01:49.395
people frequently ask me
what's the difference

30
00:01:49.395 --> 00:01:53.823
between linting and or
ESlint and prettier?

31
00:01:53.823 --> 00:01:55.909
ESlint is linting obviously.

32
00:01:55.909 --> 00:02:01.060
Linting is much more semantics and
syntax and

33
00:02:01.060 --> 00:02:06.881
content focused where
you're saying things like.

34
00:02:06.881 --> 00:02:10.009
You have to alphabetize
all of your imports,

35
00:02:10.009 --> 00:02:15.210
which is one of my very least favorite
rules that you can enforce in ESLint.

36
00:02:15.210 --> 00:02:17.918
But it's things like that,
it's things where you're

37
00:02:17.918 --> 00:02:21.088
enforcing an opinion on someone it
could be totally valid code but

38
00:02:21.088 --> 00:02:23.350
you're saying,
I don't want you to do this.

39
00:02:23.350 --> 00:02:27.646
One of the ones that I do find useful
is don't use any globals, right?

40
00:02:27.646 --> 00:02:30.855
Because usually that means that
you misspelled something, so

41
00:02:30.855 --> 00:02:34.728
it's gonna reach for a global as opposed
to finding the one that you actually

42
00:02:34.728 --> 00:02:36.260
intended to name it, right?

43
00:02:36.260 --> 00:02:37.687
Prettier is just formatting.

44
00:02:37.687 --> 00:02:40.412
It's just white space and new lines.

45
00:02:40.412 --> 00:02:42.757
It does not enforce
anything about the code,

46
00:02:42.757 --> 00:02:46.718
it's just making sure that all of the
white space ends up in the right place.

47
00:02:46.718 --> 00:02:48.310
That's all that prettier does.

48
00:02:48.310 --> 00:02:51.765
There's some overlap that you can
basically have ESlint do some of what

49
00:02:51.765 --> 00:02:52.578
prettier does.

50
00:02:52.578 --> 00:02:56.032
But if we're using both tools,
prettier is much better formatting.

51
00:02:56.032 --> 00:03:01.234
Leave the formatting to prettier,
just have lint for all the linting rules.

52
00:03:01.234 --> 00:03:04.439
Yeah, Marc?
&gt;&gt; Marc: Have you heard of Oxlint?

53
00:03:04.439 --> 00:03:05.198
&gt;&gt; Brian Holt: I have.

54
00:03:05.198 --> 00:03:11.491
I might even mention it down here,I do,
look at that.

55
00:03:11.491 --> 00:03:14.948
I think this is actually
supposed to be a zero.

56
00:03:14.948 --> 00:03:19.078
No, okay, no, I was right it is.

57
00:03:19.078 --> 00:03:21.220
There's two projects to keep an eye on.

58
00:03:21.220 --> 00:03:23.117
Here is oxlint and biome.

59
00:03:23.117 --> 00:03:30.452
Biome used to be called Rome oxlint,
I think is, this is all written in rust.

60
00:03:30.452 --> 00:03:33.688
And there's, I think,
a couple of other projects.

61
00:03:33.688 --> 00:03:40.279
They're so new, and they both really
lean on ESLint anyway, for its rules.

62
00:03:40.279 --> 00:03:45.236
So I'm interested,
I'm keeping an eye on it.

63
00:03:45.236 --> 00:03:47.311
The creator of Vue and vite,

64
00:03:47.311 --> 00:03:52.600
Evan Yu started a new company around
oxlint and vite and all these tools.

65
00:03:52.600 --> 00:03:54.089
So I'm interested, but
they're still so new.

66
00:03:54.089 --> 00:03:58.473
In this course, I'm trying to teach you
to be job ready today with React and

67
00:03:58.473 --> 00:04:02.248
I'm not teaching you anything
that's that far out on the edge.

68
00:04:02.248 --> 00:04:04.841
So look at it, admire it.

69
00:04:04.841 --> 00:04:09.709
Help but if you're going to your day job,
ship, ESLint it's just the safe choice

70
00:04:09.709 --> 00:04:13.086
right now, and
it's a perfectly good piece of software.

71
00:04:16.837 --> 00:04:18.744
&gt;&gt; Brian Holt: Okay, yeah.

72
00:04:18.744 --> 00:04:21.787
A good example here is you want
a force people to never use with.

73
00:04:21.787 --> 00:04:27.099
If with is technically valid JavaScript,
it was an ES3, right?

74
00:04:27.099 --> 00:04:29.746
But you never wanna have
with in a modern code base,

75
00:04:29.746 --> 00:04:31.791
it would just make zero sense, right?

76
00:04:31.791 --> 00:04:34.462
So you can have ESLint say,
hey, you're using with.

77
00:04:34.462 --> 00:04:36.698
No one uses with, please stop doing that.

78
00:04:38.355 --> 00:04:44.299
Okay, I'm gonna have you install ESLint
and these tools at specific versions.

79
00:04:44.299 --> 00:04:46.811
&gt;&gt; Brian Holt: The reason why I'm
gonna have you do that now and for

80
00:04:46.811 --> 00:04:49.851
the rest of the course is,
this course is a moment in time, and

81
00:04:49.851 --> 00:04:53.491
they're definitely going to release
new changes and breaking changes.

82
00:04:53.491 --> 00:04:59.487
And I want people to stay on tools
that I have verified work together.

83
00:04:59.487 --> 00:05:03.432
So, feel free to try and install
later versions of ESLint or React or

84
00:05:03.432 --> 00:05:07.102
whatever you want, but
just know when they release new minor or

85
00:05:07.102 --> 00:05:11.279
major versions of these things,
it's probably gonna break, right?

86
00:05:11.279 --> 00:05:15.421
There is a massive difference
between ESLint 8 and ESLint 9.

87
00:05:15.421 --> 00:05:20.009
React V8 uses ESLint 8, and
I had to rewrite this entire portion of

88
00:05:20.009 --> 00:05:23.321
the course because it totally changed,
right?

89
00:05:23.321 --> 00:05:27.851
So, go ahead and grab this,
I will just copy and paste it directly,

90
00:05:29.981 --> 00:05:32.794
&gt;&gt; Brian Holt: Go to your project, and

91
00:05:32.794 --> 00:05:39.838
we're just gonna install -D,
right, for development.

92
00:05:39.838 --> 00:05:46.603
eslint@9.9.1, eslint-config@9.1.0,
and globals@15.9.0.

93
00:05:51.769 --> 00:05:55.622
&gt;&gt; Brian Holt: Cool, again,
you'll notice in our package.json,

94
00:05:55.622 --> 00:05:58.648
we now have a bunch more devDependencies.

95
00:06:01.146 --> 00:06:02.045
&gt;&gt; Brian Holt: Cool.

96
00:06:03.948 --> 00:06:09.700
&gt;&gt; Brian Holt: Now,
&gt;&gt; Brian Holt: We're

97
00:06:09.700 --> 00:06:11.485
gonna create a file in
the root of our project.

98
00:06:11.485 --> 00:06:14.301
It's gonna be called

99
00:06:14.301 --> 00:06:21.489
eslint.config.mjs
&gt;&gt; Brian Holt: Now every version of

100
00:06:21.489 --> 00:06:25.902
this course previously used eslintrc.json,
that is no longer supported.

101
00:06:25.902 --> 00:06:30.894
You actually have to do it this way now
and you might be asking, why is it mjs?

102
00:06:30.894 --> 00:06:36.176
Because otherwise it assumes it is common
JS, and we want to use ES modules.

103
00:06:36.176 --> 00:06:40.777
So the mjs here means that
we're gonna do import and

104
00:06:40.777 --> 00:06:44.317
export as opposed to require, right?

105
00:06:44.317 --> 00:06:45.325
So that's why.

106
00:06:47.789 --> 00:06:52.549
&gt;&gt; Brian Holt: And
we are gonna start writing

107
00:06:52.549 --> 00:06:56.549
a little ESLint config,

108
00:06:56.549 --> 00:07:01.121
import js from @eslint/js,

109
00:07:01.121 --> 00:07:06.263
import globals from globals and

110
00:07:06.263 --> 00:07:10.835
import prettier from

111
00:07:10.835 --> 00:07:15.798
eslint-config-prettier, all right?

112
00:07:15.798 --> 00:07:23.210
This is one of my favorite tricks with
just VS Code and TypeScript in general.

113
00:07:23.210 --> 00:07:28.955
This is not TypeScript, but I still love
completions when I'm writing code, right?

114
00:07:28.955 --> 00:07:36.449
So you can say @type,
&gt;&gt; Brian Holt: import

115
00:07:38.414 --> 00:07:39.664
&gt;&gt; Brian Holt: Eslint.

116
00:07:42.096 --> 00:07:48.206
&gt;&gt; Brian Holt: .linter.config array.

117
00:07:48.206 --> 00:07:50.697
Now, you can see the two
stars here in the slash.

118
00:07:50.697 --> 00:07:52.725
This is a comment, right?

119
00:07:52.725 --> 00:07:57.254
But this is letting VS Code
know this is this type.

120
00:07:57.254 --> 00:08:00.435
Please give me all the type
completions for this.

121
00:08:00.435 --> 00:08:05.102
So now I can say export default and
give it an array and

122
00:08:05.102 --> 00:08:10.527
now I'm gonna have proper type
completions inside of this.

123
00:08:10.527 --> 00:08:11.696
This is totally optional.

124
00:08:11.696 --> 00:08:16.535
You can totally leave this off if
you're in something like sub yeah,

125
00:08:16.535 --> 00:08:18.128
sublime or textmate.

126
00:08:18.128 --> 00:08:21.215
I don't know why you're on textmate.
That... I have questions about that, but

127
00:08:21.215 --> 00:08:22.646
you probably wouldn't use this.

128
00:08:22.646 --> 00:08:25.795
This probably wouldn't be very helpful for
you, but for

129
00:08:25.795 --> 00:08:28.624
VS code specifically,
this is really quite nice.

130
00:08:28.624 --> 00:08:32.535
So now I can say js.configs and

131
00:08:32.535 --> 00:08:37.237
I'm gonna give it .recommended.

132
00:08:38.727 --> 00:08:43.443
So we're gonna export this
array of rules for eslint.

133
00:08:43.443 --> 00:08:47.421
This is their new flat
configuration style.

134
00:08:47.421 --> 00:08:52.139
I find it confusing.

135
00:08:52.139 --> 00:08:56.124
[LAUGH] But
this is the way you have to do it now.

136
00:08:56.124 --> 00:08:57.181
So we're stuck with it.

137
00:08:58.251 --> 00:09:02.348
So you export multiple
different configurations, and

138
00:09:02.348 --> 00:09:05.581
it kind of builds one
on time upon the other.

139
00:09:07.311 --> 00:09:10.650
So this will be executed,
then the second one, then the third one,

140
00:09:10.650 --> 00:09:11.711
then the fourth one.

141
00:09:11.711 --> 00:09:15.931
So the lower it is in the list,
the last it is executed.

142
00:09:17.041 --> 00:09:22.689
So one thing is this prettier
config always has to be last.

143
00:09:22.689 --> 00:09:24.649
Just keep that in mind,
just drill it into your brain.

144
00:09:24.649 --> 00:09:26.619
The prettier config always has to be last.

145
00:09:28.179 --> 00:09:29.603
Why is that?

146
00:09:29.603 --> 00:09:32.468
The prettier config,
all it does is turn off stuff.

147
00:09:32.468 --> 00:09:33.785
It doesn't add anything new.

148
00:09:33.785 --> 00:09:36.119
All it says is, don't check formatting.

149
00:09:36.119 --> 00:09:37.406
Don't check this kind of formatting.

150
00:09:37.406 --> 00:09:40.463
Don't check new lines,
don't check any of that kinda stuff.

151
00:09:40.463 --> 00:09:45.642
All this does is turn off formatting,
which is useful.

152
00:09:45.642 --> 00:09:49.322
Otherwise you get,
eslint yelling at you that's like, hey,

153
00:09:49.322 --> 00:09:54.044
you didn't format this correctly and this
will prevent it from yelling at you for

154
00:09:54.044 --> 00:09:55.791
stuff that doesn't matter.

155
00:09:55.791 --> 00:09:59.351
Okay, we're gonna put our
configuration here in the middle, so

156
00:09:59.351 --> 00:10:01.068
js.configs.recommended.

157
00:10:01.068 --> 00:10:06.868
This is just a very small subset of
non-controversial ESLint rules, right?

158
00:10:06.868 --> 00:10:08.403
They're just purely value-add.

159
00:10:08.403 --> 00:10:11.898
I've never had a problem
with the recommended one.

160
00:10:11.898 --> 00:10:15.318
If you want everything that ESLint
can check for, you can do .all, but

161
00:10:15.318 --> 00:10:17.997
you are a glutton for
punishment if you're doing that,

162
00:10:17.997 --> 00:10:21.248
it's going to check things that
you don't care about, I promise.

163
00:10:21.248 --> 00:10:23.368
So you know what?

164
00:10:23.368 --> 00:10:26.614
Again, I'm not your mom
do whatever you want, but

165
00:10:26.614 --> 00:10:30.858
I'm not going to put that in there
because it annoys me so quickly.

166
00:10:30.858 --> 00:10:33.710
Okay, we're gonna tell what files so
that, okay?

167
00:10:33.710 --> 00:10:38.511
Again, this type thing right here,
the reason why it knows here,

168
00:10:38.511 --> 00:10:42.132
this files is from that comment up there,
right?

169
00:10:42.132 --> 00:10:45.850
Which I find extremely useful.

170
00:10:45.850 --> 00:10:50.547
Okay, and I'm gonna tell it to check for

171
00:10:50.547 --> 00:10:55.522
everything to do with .js files.

172
00:10:55.522 --> 00:10:58.614
And if you want to get ahead of the game
here, we're eventually going to be doing

173
00:10:58.614 --> 00:11:00.801
JSX so you might as well just
check that in there as well.

174
00:11:03.551 --> 00:11:06.748
If you're doing TS and
TSX you put that in here as well, right?

175
00:11:06.748 --> 00:11:10.462
So, okay, language options.

176
00:11:13.989 --> 00:11:20.444
&gt;&gt; Brian Holt: We are gonna
say here's the globals

177
00:11:20.444 --> 00:11:25.177
that we want you to check or

178
00:11:25.177 --> 00:11:32.708
be aware of where do globals.browser and

179
00:11:32.708 --> 00:11:35.950
globals.node.

180
00:11:35.950 --> 00:11:37.645
Why this?

181
00:11:37.645 --> 00:11:42.485
It's so that when we go into like here,
we can say things like window or

182
00:11:42.485 --> 00:11:46.685
document, things that are globals
in those environments.

183
00:11:46.685 --> 00:11:50.825
If you don't import and add those,
it's going to be like, hey,

184
00:11:50.825 --> 00:11:53.472
I don't know what document is, right?

185
00:11:53.472 --> 00:11:56.815
So that's what globals is.

186
00:11:56.815 --> 00:11:58.642
Sorry, back in here.

187
00:11:58.642 --> 00:12:00.700
This is just the spread operator, right?

188
00:12:00.700 --> 00:12:04.538
So we could do some sort of like
Object.assign here, right?

189
00:12:04.538 --> 00:12:06.301
But we can just use the spread operator.

190
00:12:06.301 --> 00:12:08.020
This is a little bit cleaner.

191
00:12:08.020 --> 00:12:13.430
This is just going to be the union
of browser and node here, right?

192
00:12:13.430 --> 00:12:14.419
As one object.

193
00:12:14.419 --> 00:12:18.374
That's all the globals that we need for
this project, parser options.

194
00:12:21.233 --> 00:12:25.931
&gt;&gt; Brian Holt: ECMA features,and we need

195
00:12:25.931 --> 00:12:30.492
JSX,
&gt;&gt; Brian Holt: And

196
00:12:30.492 --> 00:12:32.950
I think that should be good for
us for a little bit.

197
00:12:36.089 --> 00:12:38.050
&gt;&gt; Brian Holt: This is just
going to allow us to use JSX,

198
00:12:38.050 --> 00:12:39.742
which we're about to do, right?

199
00:12:39.742 --> 00:12:44.631
Without this, ESLint is still gonna
be okay cuz it can parse jsx,

200
00:12:44.631 --> 00:12:49.145
but it's not going to understand
how React is working and

201
00:12:49.145 --> 00:12:52.359
how it's importing things, correctly.

202
00:12:52.359 --> 00:12:54.260
So this becomes important.

203
00:13:00.154 --> 00:13:02.299
&gt;&gt; Brian Holt: All right.

204
00:13:04.485 --> 00:13:09.137
&gt;&gt; Brian Holt: So again, let's go back
into our package.json and make it so

205
00:13:09.137 --> 00:13:11.108
that this can run eslint.

206
00:13:11.108 --> 00:13:17.581
We're gonna say lint and
now we can just say eslint.

207
00:13:17.581 --> 00:13:20.727
You used to have to put this long
string associated with it but

208
00:13:20.727 --> 00:13:23.819
now it reads Config properly and
you don't have to do that.

209
00:13:28.988 --> 00:13:33.359
&gt;&gt; Brian Holt: So now if we come
in here and we say npm run lint,

210
00:13:33.359 --> 00:13:37.637
you'll see a bunch of these errors, right.

211
00:13:40.699 --> 00:13:45.639
&gt;&gt; Brian Holt: And my notes here say that,
this should fix it if you say ESPN or

212
00:13:45.639 --> 00:13:46.685
ESPN, wow.

213
00:13:46.685 --> 00:13:50.234
Yeah, something on the mind, I guess.

214
00:13:50.234 --> 00:13:53.328
Run lint -- --fix.

215
00:13:53.328 --> 00:13:59.021
So this -- just means, hey,
I want to pass this into eslint.

216
00:13:59.021 --> 00:14:01.965
So this will actually end
up running eslint --fix.

217
00:14:03.426 --> 00:14:09.529
If you don't put this -- in there,
it's going to apply --fix to npm.

218
00:14:09.529 --> 00:14:10.821
Which doesn't make any sense right?

219
00:14:10.821 --> 00:14:14.946
So that's why you need the --.

220
00:14:14.946 --> 00:14:16.253
Yeah I didn't think so.

221
00:14:16.253 --> 00:14:20.546
So, [COUGH] what's something
that I could fix automatically?

222
00:14:20.546 --> 00:14:23.844
I don't remember.

223
00:14:23.844 --> 00:14:26.990
Some of your linting errors
can be fixed automatically,

224
00:14:26.990 --> 00:14:31.263
it contains transformations that will
just fix some of these things for you.

225
00:14:31.263 --> 00:14:36.612
We have nothing to fix right now, so
that doesn't really help us that much,

226
00:14:36.612 --> 00:14:39.956
but that's kind of a fun
trick to do sometimes,

227
00:14:39.956 --> 00:14:44.490
another one if you're debugging
this is debug is super useful.

228
00:14:44.490 --> 00:14:48.406
You get a lot of output of like eslint for
working.

229
00:14:49.706 --> 00:14:51.160
It's telling you everything
that it's parsing,

230
00:14:51.160 --> 00:14:52.623
it's telling you all
the errors that it's found.

231
00:14:52.623 --> 00:14:55.035
It's telling you all
the rules that it's loading.

232
00:14:55.035 --> 00:15:03.126
So you can see these are all of the checks
that it's running, which is Kind of cool.

233
00:15:03.126 --> 00:15:05.371
Yeah so, here's a good one, no debugger.

234
00:15:06.581 --> 00:15:12.415
Let's say, I don't know if
you've ever used this before.

235
00:15:12.415 --> 00:15:14.906
VS code has a very useful
debugger built into it.

236
00:15:14.906 --> 00:15:18.039
We won't be using it today, but

237
00:15:18.039 --> 00:15:22.807
like I use it quite a bit for
my node projects and.

238
00:15:22.807 --> 00:15:24.750
So now I think if I say npm run lint,

239
00:15:24.750 --> 00:15:27.968
it should give me an error
around not using the debugger.

240
00:15:30.356 --> 00:15:35.054
&gt;&gt; Brian Holt: Yeah,
unexpected debugger statement.

241
00:15:35.054 --> 00:15:36.618
It'll catch things like that.

242
00:15:36.618 --> 00:15:37.924
You want this to error, right?

243
00:15:37.924 --> 00:15:41.864
Because I'm gonna put this in there, and I
want this to stay here while I'm using it

244
00:15:41.864 --> 00:15:45.020
but I don't ever want to ship
this to production, right?

245
00:15:45.020 --> 00:15:46.980
So that's something that
lint will catch for you.

246
00:15:46.980 --> 00:15:48.900
Yeah, let's install the extension.

247
00:15:50.490 --> 00:15:55.488
There is an ESLint extension,
I will say that of the common extensions I

248
00:15:55.488 --> 00:15:59.420
recommend people install this
one is the most finicky.

249
00:15:59.420 --> 00:16:02.306
Sometimes the ESLint one
should look like this.

250
00:16:02.306 --> 00:16:08.201
It's official from Microsoft, it just
gets bent out of shape sometimes and

251
00:16:08.201 --> 00:16:14.188
so if you find that it's not or it's
highlighting something that it should or

252
00:16:14.188 --> 00:16:17.710
not highlighting something that it should.

253
00:16:17.710 --> 00:16:22.468
A good restart will usually fix a lot
of stuff either of VS Code itself or

254
00:16:22.468 --> 00:16:24.980
the whole computer, I don't know.

255
00:16:24.980 --> 00:16:27.213
Definitely one of the ones
that annoys me the most and

256
00:16:27.213 --> 00:16:29.974
sometimes I just end up disabling
it because it's so annoying.

257
00:16:29.974 --> 00:16:34.855
The purpose of the npm script
you wrote is only if somebody

258
00:16:34.855 --> 00:16:40.256
doesn't have prettier installed
in their editor, correct?

259
00:16:41.636 --> 00:16:46.441
It's amongst the reasons that I would do
it, the probably the chief reason, is so

260
00:16:46.441 --> 00:16:48.612
that I can now run it in CICD, right?

261
00:16:48.612 --> 00:16:52.465
So I can run it as like a GitHub action,
so then it won't check in my or

262
00:16:52.465 --> 00:16:56.746
it won't deploy my code, if it's like
failing lint or failing prettier.

263
00:16:56.746 --> 00:17:01.550
That's probably the biggest reason,
because almost everyone that I work with

264
00:17:01.550 --> 00:17:04.704
or have worked with,
has some version of Prettier or

265
00:17:04.704 --> 00:17:08.311
Lint built into their editor and
they just fix it on the fly.

266
00:17:08.311 --> 00:17:12.558
And there's a few holdouts that'll just
run it right before they commit, right?

267
00:17:12.558 --> 00:17:15.806
So those are the two
chief reasons I do it.

