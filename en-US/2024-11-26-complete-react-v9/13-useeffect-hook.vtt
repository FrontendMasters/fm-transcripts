WEBVTT

1
00:00:00.171 --> 00:00:05.025
&gt;&gt; Brian Holt: So if you are having issues
or just wanna see where I'm at here,

2
00:00:05.025 --> 00:00:10.153
we're at, four dash hooks where
we learned about use state,

3
00:00:10.153 --> 00:00:13.649
by far the most common
hook that you'll use.

4
00:00:13.649 --> 00:00:17.008
The next, we're gonna talk about the next
most common hook that you're gonna use,

5
00:00:17.008 --> 00:00:17.871
which is use effect.

6
00:00:21.447 --> 00:00:24.497
&gt;&gt; Brian Holt: So, state is all about
statefulness in your component of

7
00:00:24.497 --> 00:00:27.302
things that can change over
time in your component.

8
00:00:27.302 --> 00:00:32.177
This will be frequently tied to forms but
you could easily write like a clock,

9
00:00:32.177 --> 00:00:32.703
right?

10
00:00:32.703 --> 00:00:35.355
Or something like that or
something that, and

11
00:00:35.355 --> 00:00:39.300
the other thing is effects will be
usually be used with state as well.

12
00:00:39.300 --> 00:00:42.996
So they tend to combine and compose.

13
00:00:42.996 --> 00:00:46.407
But let's talk about effects,

14
00:00:46.407 --> 00:00:51.471
effects like stands for
side effects, right?

15
00:00:51.471 --> 00:00:53.363
So you have some component and

16
00:00:53.363 --> 00:00:56.774
it has something that's
gonna happen outside of it.

17
00:00:56.774 --> 00:00:59.305
Frequently this is gonna be
like an API request, right?

18
00:00:59.305 --> 00:01:02.650
So you're gonna go reach out to some API,

19
00:01:02.650 --> 00:01:06.962
it's gonna come back with data and
you will see that.

20
00:01:06.962 --> 00:01:11.481
But this could be like, let's say you have
something that you wanna show a clock in

21
00:01:11.481 --> 00:01:13.589
the date time or something like that.

22
00:01:13.589 --> 00:01:16.456
You could be doing that with an effect
because you can think of time as

23
00:01:16.456 --> 00:01:18.233
a side effect to your component, right?

24
00:01:18.233 --> 00:01:23.389
It's anything that's gonna be inputting
into your component that's not just user

25
00:01:23.389 --> 00:01:31.251
input or something like that, so,
&gt;&gt; Brian Holt: Let's go do that.

26
00:01:31.251 --> 00:01:36.156
So make sure your API server is
running because we actually are going

27
00:01:36.156 --> 00:01:37.540
to hit the API now.

28
00:01:37.540 --> 00:01:40.883
So let's go to order.jsx.

29
00:01:40.883 --> 00:01:45.240
This needs client, just make

30
00:01:45.240 --> 00:01:50.130
sure you have that if you don't.

31
00:01:50.130 --> 00:01:55.161
And we're gonna go to order.jsx and
we're gonna

32
00:01:55.161 --> 00:02:00.686
import use effect from React and
we have pizza, cool.

33
00:02:03.724 --> 00:02:10.480
&gt;&gt; Brian Holt: We're gonna be doing
some currency conversions here.

34
00:02:10.480 --> 00:02:14.073
So this is now just built into
the browser, which is super nice.

35
00:02:16.500 --> 00:02:20.311
&gt;&gt; Brian Holt: Number format,
you give it what format you want,

36
00:02:20.311 --> 00:02:23.413
feel free to put this in your own locale.

37
00:02:23.413 --> 00:02:25.863
I'm gonna show you how
to do it with dollars.

38
00:02:30.137 --> 00:02:33.153
&gt;&gt; Brian Holt: So this is currency,

39
00:02:33.153 --> 00:02:37.850
and I want the currency to be USD.

40
00:02:37.850 --> 00:02:40.374
So, we're gonna load in pizza types.

41
00:02:40.374 --> 00:02:43.342
So right now we just have a flat
list of all of these pizza types,

42
00:02:43.342 --> 00:02:46.941
but I want this to be a dynamically
populated of all of our different pizzas.

43
00:02:46.941 --> 00:02:50.577
I, being the generous
course creator that I have,

44
00:02:50.577 --> 00:02:53.463
I've created 32 pizza types for you.

45
00:02:53.463 --> 00:02:57.364
And we're going to use all of them.

46
00:02:57.364 --> 00:03:02.223
Most of them look terrible,
just to be aware of that.

47
00:03:02.223 --> 00:03:07.629
So const, another hook here,
another useState hook,

48
00:03:07.629 --> 00:03:13.230
pizzaTypes,
&gt;&gt; Brian Holt: SetPizzaTypes,

49
00:03:16.841 --> 00:03:19.937
&gt;&gt; Brian Holt: Equals useState with

50
00:03:19.937 --> 00:03:23.550
an empty array, right?

51
00:03:23.550 --> 00:03:27.879
So this is basically gonna say
like start with nothing and

52
00:03:27.879 --> 00:03:30.502
then we will progress from there.

53
00:03:30.502 --> 00:03:34.711
And then I'm gonna have a loading hook.

54
00:03:34.711 --> 00:03:38.935
This is gonna be useful for that,
you can say like set loading to be true.

55
00:03:38.935 --> 00:03:40.892
And we can show the user
a nice spinner and

56
00:03:40.892 --> 00:03:43.087
not render stuff that's not available yet.

57
00:03:43.087 --> 00:03:47.061
And then once everything has loaded,
you can say set loading to false, and

58
00:03:47.061 --> 00:03:49.726
then you can show them
whatever they need to know.

59
00:03:49.726 --> 00:03:54.412
So, useState, we're gonna start by
having the form be loading, right?

60
00:03:54.412 --> 00:03:56.289
Because it won't have all
the pizzas loaded yet.

61
00:04:03.702 --> 00:04:09.027
&gt;&gt; Brian Holt: Okay,
cool, here we're gonna

62
00:04:09.027 --> 00:04:14.753
say let price and selected pizza,

63
00:04:18.121 --> 00:04:22.638
&gt;&gt; Brian Holt: If it's not loading,

64
00:04:22.638 --> 00:04:28.107
I'm gonna say select pizza

65
00:04:28.107 --> 00:04:33.815
equals pizza types.find,

66
00:04:33.815 --> 00:04:40.807
pizza,
&gt;&gt; Brian Holt: Pizza type,

67
00:04:40.807 --> 00:04:43.710
triple equals pizza.id.

68
00:04:43.710 --> 00:04:46.177
So why are we doing this?

69
00:04:46.177 --> 00:04:50.952
We're gonna be keeping track of just the
ID of the pizza type that's been selected.

70
00:04:50.952 --> 00:04:54.056
We have to go actually find inside of our
array of pizza types the correct one and

71
00:04:54.056 --> 00:04:55.291
we're gonna do that by its ID.

72
00:04:55.291 --> 00:05:02.223
And you notice these are not hooks
despite the fact that they're immutable.

73
00:05:02.223 --> 00:05:04.558
This is cuz it's kind of derivative state,
right?

74
00:05:04.558 --> 00:05:09.768
So we can use this state up here to
find this state, this doesn't actually

75
00:05:09.768 --> 00:05:14.954
need to be a hook because it's always
going to be a function of these.

76
00:05:14.954 --> 00:05:18.389
Sorry, these are always
a function of these, right?

77
00:05:18.389 --> 00:05:22.159
So the price is going to be whatever
the pizza's price is, right?

78
00:05:22.159 --> 00:05:26.904
The selected pizza is always
going to be the pizza

79
00:05:26.904 --> 00:05:31.079
type that matches in pizza types, right?

80
00:05:31.079 --> 00:05:36.678
So, view has this concept of derivative
state, I think Svelte has it as well.

81
00:05:36.678 --> 00:05:39.587
Doesn't exist in React, you just keep
track of them in normal variables,

82
00:05:42.919 --> 00:05:43.535
&gt;&gt; Brian Holt: Okay, so

83
00:05:43.535 --> 00:05:47.232
now we're going to adhere that
selected pizza is going to

84
00:05:47.232 --> 00:05:51.482
be the correct pizza object that
we've gotten back from our API.

85
00:05:54.903 --> 00:05:59.809
&gt;&gt; Brian Holt: We're gonna write
a function here called fetchPizzas,

86
00:05:59.809 --> 00:06:05.439
async function fetchPizzas,
pizza types rather, pizza type.

87
00:06:05.439 --> 00:06:14.088
And this is just gonna be
a really normal fetch command.

88
00:06:14.088 --> 00:06:18.871
So, we're gonna say

89
00:06:18.871 --> 00:06:23.921
const pizzaRes equals

90
00:06:23.921 --> 00:06:30.566
await fetch/api/pizzas,

91
00:06:30.566 --> 00:06:35.882
const pizzaJson equals

92
00:06:35.882 --> 00:06:41.470
await pizzaRes.Json.

93
00:06:41.470 --> 00:06:45.690
SetPizzaTypes to be

94
00:06:45.690 --> 00:06:52.732
PizzaJson
&gt;&gt; Brian Holt: And

95
00:06:52.732 --> 00:06:57.390
set loading to be false, cuz we'll be
done loading at that point, right?

96
00:07:02.704 --> 00:07:07.379
&gt;&gt; Brian Holt: All right, so we have this
side effect function that we wanna call.

97
00:07:07.379 --> 00:07:08.459
Where do we call it?

98
00:07:11.278 --> 00:07:14.576
&gt;&gt; Brian Holt: I can't just
say fetch pizza types here.

99
00:07:14.576 --> 00:07:16.521
Why is this a bad idea?

100
00:07:16.521 --> 00:07:18.734
It would run each time
the component is rendered.

101
00:07:18.734 --> 00:07:22.667
You got it, it would run every single
time that the component rendered.

102
00:07:22.667 --> 00:07:26.496
You're basically DDoSing yourself, right?

103
00:07:26.496 --> 00:07:27.785
So that's not a good idea.

104
00:07:27.785 --> 00:07:30.703
How can I run this at the beginning,
right?

105
00:07:30.703 --> 00:07:36.730
That's all, I only wanna do it once,
when the component first loads, right?

106
00:07:36.730 --> 00:07:39.342
Effects, you found the need for effects.

107
00:07:39.342 --> 00:07:41.850
This is exactly what effects are for.

108
00:07:41.850 --> 00:07:44.800
Use effect,
you give it a function of like, hey,

109
00:07:44.800 --> 00:07:48.124
I need you to do this kind of
outside of the render cycle.

110
00:07:48.124 --> 00:07:52.624
So if you find that's exactly what effects
are for, it's like I have my renders, and

111
00:07:52.624 --> 00:07:55.811
I have things that need to happen
outside of the renders, and

112
00:07:55.811 --> 00:07:58.079
I wanna kind of control when that happens.

113
00:07:58.079 --> 00:08:02.904
So in this case,
we're gonna say fetch pizza type.

114
00:08:02.904 --> 00:08:06.438
This isn't still quite
what we want it to do,

115
00:08:06.438 --> 00:08:11.843
this is still going to schedule
an effect after every single render.

116
00:08:11.843 --> 00:08:16.862
So how do we tell it, hey,
we only want this to change once?

117
00:08:16.862 --> 00:08:20.207
There's a second parameter here of like,
hey,

118
00:08:20.207 --> 00:08:25.523
whenever this variable is different
from the previous render, do it again.

119
00:08:25.523 --> 00:08:30.389
So, let's say here we put,
I don't know, pizza size.

120
00:08:32.747 --> 00:08:37.734
&gt;&gt; Brian Holt: Now, every time the user
selected a different pizza size,

121
00:08:37.734 --> 00:08:40.538
this effect would get run again.

122
00:08:40.538 --> 00:08:42.864
That's not actually what we want, right?

123
00:08:42.864 --> 00:08:45.599
We want it to run once, right?

124
00:08:45.599 --> 00:08:46.246
Just at the beginning.

125
00:08:46.246 --> 00:08:49.151
So how do we do that?

126
00:08:49.151 --> 00:08:50.676
Well, we just don't give it anything,
right?

127
00:08:50.676 --> 00:08:52.216
We just give it an empty array, right?

128
00:08:52.216 --> 00:08:54.655
And that's saying, run this once, and

129
00:08:54.655 --> 00:08:59.766
then you're not tracking any variables
here, so you're never gonna run it again.

130
00:08:59.766 --> 00:09:03.742
Make sense, okay.

131
00:09:09.075 --> 00:09:11.950
&gt;&gt; Brian Holt: You'll have to excuse the
backwards walk into the logic there, but

132
00:09:11.950 --> 00:09:13.923
usually, people see this for
the first time.

133
00:09:13.923 --> 00:09:15.534
It's like,
why is there an empty array there, right?

134
00:09:15.534 --> 00:09:19.323
And they get really upset by that,
so I'm trying to walk you back into,

135
00:09:19.323 --> 00:09:21.228
why that empty array exists there.

136
00:09:21.228 --> 00:09:24.779
It does make sense,
it's a little dense to look at,

137
00:09:24.779 --> 00:09:29.866
that's a lot of syntax in one line of
just curly bracket, square bracket,

138
00:09:29.866 --> 00:09:34.410
square bracket, round bracket,
or round parenthesis, right?

139
00:09:34.410 --> 00:09:37.395
It does make sense.

140
00:09:37.395 --> 00:09:39.987
Okay, next question people might ask me,

141
00:09:39.987 --> 00:09:42.802
why can't I just make
this an async function?

142
00:09:42.802 --> 00:09:45.228
I think Burton,
you literally just asked me this.

143
00:09:45.228 --> 00:09:47.498
Async functions return what?

144
00:09:47.498 --> 00:09:49.795
Promises, they always return a promise.

145
00:09:49.795 --> 00:09:53.770
No matter what, if it's an async function,
the return type is always a promise.

146
00:09:53.770 --> 00:09:57.848
And effects, the return type matters.

147
00:09:57.848 --> 00:10:02.687
I'm not gonna show you anything today
where it does matter, but let's say you

148
00:10:02.687 --> 00:10:07.327
wanted it to run once and you wanted it
to run at the end, not the beginning.

149
00:10:07.327 --> 00:10:11.777
This can be useful for clearing timeouts,
that's usually the time that I do it, or

150
00:10:11.777 --> 00:10:16.052
canceling, using an abort token to cancel
a request, or something like that.

151
00:10:16.052 --> 00:10:20.401
You can return a function,
get rid of this async.

152
00:10:23.264 --> 00:10:25.632
&gt;&gt; Brian Holt: This is
how you would do that.

153
00:10:25.632 --> 00:10:27.721
The return here is the cleanup function.

154
00:10:29.837 --> 00:10:33.350
&gt;&gt; Brian Holt: So, all of this to say,
you don't need to do that right now.

155
00:10:33.350 --> 00:10:37.281
It's a fairly rare thing that you need to
clean up, but that's how you would do it.

156
00:10:39.655 --> 00:10:42.073
&gt;&gt; Brian Holt: And that's why we
can't just make this async, right?

157
00:10:42.073 --> 00:10:45.937
That's why I make an async function up
here and then call it for my effect.

158
00:10:45.937 --> 00:10:49.499
I now have selected pizza price,

159
00:10:49.499 --> 00:10:53.953
we're now fetching all of the pizzas, so

160
00:10:53.953 --> 00:10:59.947
eventually this is going to
be full of pizza types here.

161
00:10:59.947 --> 00:11:04.856
Now, this is like one of my
favorite things again about React.

162
00:11:04.856 --> 00:11:09.755
By doing everything this way, I basically
could just treat all of my code down here

163
00:11:09.755 --> 00:11:11.893
as if pizza types already existed.

164
00:11:11.893 --> 00:11:16.485
It reads very optimistically in the sense
of I just assume that the data is gonna be

165
00:11:16.485 --> 00:11:17.778
fed here eventually.

166
00:11:17.778 --> 00:11:21.711
And it makes the code not full of if this,
then that, right?

167
00:11:21.711 --> 00:11:24.852
It's usually just like read as
if the code is here, right?

168
00:11:24.852 --> 00:11:27.001
Let's go replace the options here.

169
00:11:33.456 --> 00:11:38.192
&gt;&gt; Brian Holt: PizzaTypes.map,
pizza, and here we're

170
00:11:38.192 --> 00:11:43.184
just gonna do an option
key equals pizza.id,

171
00:11:43.184 --> 00:11:48.053
we'll talk about keys
here in just a second.

172
00:11:48.053 --> 00:11:51.913
And value equals pizza.id.

173
00:11:51.913 --> 00:11:56.076
And then we want pizza.name
to be down here, pizza.name.

174
00:11:56.076 --> 00:11:57.461
All right, so this is a little dense here.

175
00:11:57.461 --> 00:12:00.025
Let's talk about this for just a second.

176
00:12:00.025 --> 00:12:01.353
It's all concepts you know though.

177
00:12:01.353 --> 00:12:08.734
Between the curly braces can be any
JavaScript expression, whatsoever, right?

178
00:12:08.734 --> 00:12:10.582
If you're familiar with map,

179
00:12:10.582 --> 00:12:14.989
it's a JavaScript function that you're
taking an array of something and

180
00:12:14.989 --> 00:12:18.770
you're turning that into an array
of something else, right?

181
00:12:18.770 --> 00:12:22.355
It's just a transformation
from an array of 1, 2, 3,

182
00:12:22.355 --> 00:12:26.906
4, and you say, map double,
that you'd get 2, 4, 6, 8, right?

183
00:12:26.906 --> 00:12:30.747
It would just transform one to the other.

184
00:12:30.747 --> 00:12:33.828
We have an array of pizza types, and

185
00:12:33.828 --> 00:12:39.180
we wanna transform that into
an array of components, right?

186
00:12:39.180 --> 00:12:44.745
Or elements as it were,
not that that really matters.

187
00:12:44.745 --> 00:12:46.264
That's all we're doing here,

188
00:12:46.264 --> 00:12:50.043
is we're just turning an array of objects
into an array of React stuff, right?

189
00:12:50.043 --> 00:12:53.942
And if you remember,
under the hood, like we saw,

190
00:12:53.942 --> 00:12:56.766
what is JSX transforming that into?

191
00:12:56.766 --> 00:12:58.132
It's an array, right?

192
00:12:58.132 --> 00:13:01.988
So if we give it an array of components,
it knows exactly what to do with them.

193
00:13:01.988 --> 00:13:04.048
So that's why map here works,

194
00:13:04.048 --> 00:13:09.213
we're turning an array of these pizza
objects just into an array of options.

195
00:13:09.213 --> 00:13:09.763
Makes sense?

196
00:13:09.763 --> 00:13:14.638
We follow, right?

197
00:13:14.638 --> 00:13:17.480
Obviously there's some errors here,
but I think if we refresh this,

198
00:13:17.480 --> 00:13:23.394
we should see,
&gt;&gt; Brian Holt: Lots of pizza types.

199
00:13:28.323 --> 00:13:31.714
&gt;&gt; Brian Holt: Which is kinda cool, right?

200
00:13:31.714 --> 00:13:36.912
So if we refresh, look here at
the network, you can see here we have a,

201
00:13:36.912 --> 00:13:41.160
I'm looking just at XHR,
which are Ajax requests here.

202
00:13:41.160 --> 00:13:43.530
You can see it's hitting the API,

203
00:13:43.530 --> 00:13:48.778
it's getting a response back here of
all of the different objects, right?

204
00:13:48.778 --> 00:13:51.737
And it's turning that
into an array of options.

