WEBVTT

1
00:00:00.140 --> 00:00:03.416
So we have been talking so

2
00:00:03.416 --> 00:00:08.415
far only about function components.

3
00:00:08.415 --> 00:00:12.528
That used to be a very interesting and
distinct word in the React world, and

4
00:00:12.528 --> 00:00:13.377
we've moved so

5
00:00:13.377 --> 00:00:17.901
far towards function components that we
don't even remember class components.

6
00:00:17.901 --> 00:00:22.092
However, they are still there,
they're not deprecated,

7
00:00:22.092 --> 00:00:26.854
and there is one use case as far as I
can tell where you can only do it with

8
00:00:26.854 --> 00:00:30.245
a class component and
that is error boundaries.

9
00:00:30.245 --> 00:00:35.170
So what happens if,
let's say our past.lazy.jsx had

10
00:00:35.170 --> 00:00:40.319
an error with its API request and
it was an uncaught error.

11
00:00:40.319 --> 00:00:42.879
It would just bubble up to the top
of the app and crash the app, right?

12
00:00:42.879 --> 00:00:46.953
As you've seen several times happen in
our app where it just says, I give up,

13
00:00:46.953 --> 00:00:48.783
the whole thing crashed, right?

14
00:00:48.783 --> 00:00:54.684
There's a thing called error boundaries
that allow you to catch those errors and

15
00:00:54.684 --> 00:01:00.598
prevent it from crashing your app, and
you can only do it with class components.

16
00:01:00.598 --> 00:01:06.064
So I'm kind of taking this as a dual
opportunity to teach you error boundaries,

17
00:01:06.064 --> 00:01:10.715
which frankly I don't really write
too much myself because there is

18
00:01:10.715 --> 00:01:14.242
react-error-boundary, this component here.

19
00:01:14.242 --> 00:01:19.228
Written by a member of the, I think he's
an ex-member of the React Core team.

20
00:01:19.228 --> 00:01:22.876
I don't think Brian works
there anymore but he used to.

21
00:01:22.876 --> 00:01:25.166
He made a component that
just does this for you.

22
00:01:25.166 --> 00:01:28.586
So generally speaking I'm going to
recommend that you just use this and

23
00:01:28.586 --> 00:01:30.702
not write them yourself
unless you need to.

24
00:01:30.702 --> 00:01:34.255
That's not gonna stop me from teaching
you how to write it yourself,

25
00:01:34.255 --> 00:01:37.762
though, and the reason being is I
want you to see a class component.

26
00:01:37.762 --> 00:01:41.622
Cuz if you are gonna hop into a company
that's been writing React for a decade,

27
00:01:41.622 --> 00:01:45.018
you're definitely gonna see some
class components laying around,

28
00:01:45.018 --> 00:01:47.515
cuz this used to be the only
way to write React.

29
00:01:47.515 --> 00:01:50.417
Function components are as a result of,
I don't know,

30
00:01:50.417 --> 00:01:55.145
probably six years ago at this point where
they were very first introduced, right?

31
00:01:55.145 --> 00:01:57.668
And over time they've become so
popular and hooks made it so

32
00:01:57.668 --> 00:02:00.839
that you actually don't ever need
class components ever anymore.

33
00:02:00.839 --> 00:02:02.585
Let's talk about class components.

34
00:02:02.585 --> 00:02:08.852
Number one, no hooks,
cannot use hooks with class components.

35
00:02:08.852 --> 00:02:13.440
Just kind of sear that in your brain
because you're gonna be tempted to but

36
00:02:13.440 --> 00:02:15.109
you can't.

37
00:02:15.109 --> 00:02:19.996
So for example if you made a custom
hook like use PizzaOfTheDay it is

38
00:02:19.996 --> 00:02:22.627
not usable with a class component.

39
00:02:24.587 --> 00:02:28.219
Now, you can kind of hack it, what you
do is you make a function component,

40
00:02:28.219 --> 00:02:32.727
you run the hook, and then you pass it
into a class component as a prop, right?

41
00:02:32.727 --> 00:02:37.159
So you can kind of cheat a little bit,
which you may need to, but

42
00:02:37.159 --> 00:02:41.021
inside of a class component,
you can never use a hook.

43
00:02:42.793 --> 00:02:46.351
&gt;&gt; Brian Holt: So there's no state,
there's no useState, there's no useEffect,

44
00:02:46.351 --> 00:02:48.384
it has its own set of APIs for doing that.

45
00:02:50.725 --> 00:02:51.878
&gt;&gt; Brian Holt: So
let's just start writing one,

46
00:02:51.878 --> 00:02:53.802
I think that's probably kind
of the easiest way to do it.

47
00:02:53.802 --> 00:02:59.399
I want you to make a new file here, and
it's gonna be called ErrorBoundary.jsx.

48
00:03:05.279 --> 00:03:10.360
&gt;&gt; Brian Holt: Yeah, they're in this weird
state where they're not recommended,

49
00:03:10.360 --> 00:03:12.610
but they're not deprecated.

50
00:03:12.610 --> 00:03:15.812
And I don't really understand that.

51
00:03:15.812 --> 00:03:19.948
Either just say we're gonna
maintain both of them or

52
00:03:19.948 --> 00:03:23.906
say we're just deprecating one of them,
right?

53
00:03:23.906 --> 00:03:29.654
I don't know, but
I'm not in charge, no one asked me.

54
00:03:29.654 --> 00:03:34.442
So we're gonna import { Component } from

55
00:03:34.442 --> 00:03:39.496
"react" and we're going to do this thing,

56
00:03:39.496 --> 00:03:44.704
say class ErrorBoundary extends Component.

57
00:03:44.704 --> 00:03:48.139
Somewhere in chat right now, there's
a Java developer just getting really

58
00:03:48.139 --> 00:03:50.589
excited, just pumped about
what we're doing here.

59
00:03:50.589 --> 00:03:52.547
&gt;&gt; Student 1: [LAUGH]
&gt;&gt; Brian Holt: And everyone else is like,

60
00:03:52.547 --> 00:03:53.744
what is going on, right?

61
00:03:55.344 --> 00:04:01.146
And just down here at the bottom, we're
gonna export default, ErrorBoundary;.

62
00:04:01.146 --> 00:04:08.369
I actually like class components, I don't
write them anymore because no one does.

63
00:04:08.369 --> 00:04:13.946
But there actually used to be a React
function cuz you do like React.createClass

64
00:04:13.946 --> 00:04:19.370
like this, and then you would give it
an object, it would look a lot like this.

65
00:04:19.370 --> 00:04:23.832
This was the original way of writing
React years and years and years ago,

66
00:04:23.832 --> 00:04:27.123
if you look at Complete Intro to React,
v2, right,

67
00:04:27.123 --> 00:04:31.027
it's all taught with createClass,
this was my favorite API.

68
00:04:31.027 --> 00:04:35.039
Don't tell anyone that,
this is just between you and me, but

69
00:04:35.039 --> 00:04:37.597
I really liked that and I kinda miss it.

70
00:04:37.597 --> 00:04:41.662
That Wolverine meme of him stroking
a picture, that's me and createClass.

71
00:04:41.662 --> 00:04:43.842
I do that with the docs [LAUGH].

72
00:04:43.842 --> 00:04:48.738
All right, so state =, we we're gonna

73
00:04:48.738 --> 00:04:53.346
give it some amount of default state,

74
00:04:53.346 --> 00:04:57.101
and by default it has no error.

75
00:04:57.101 --> 00:05:02.258
By the way this is just a normal
ES6 class, or ES2015 class.

76
00:05:03.858 --> 00:05:10.548
So nothing special here, this is just
React using JavaScript classes, okay?

77
00:05:12.748 --> 00:05:15.110
It's got a weird thing
called a static method.

78
00:05:15.110 --> 00:05:18.664
Again, if you're a Java developer,
you're just pumped about life,

79
00:05:18.664 --> 00:05:20.334
you're just ready to roll here.

80
00:05:20.334 --> 00:05:27.348
Everyone else is like, I don't understand,
why are you writing Java in my JavaScript?

81
00:05:27.348 --> 00:05:31.647
&gt;&gt; Brian Holt: A static method,
so if you have a class here,

82
00:05:31.647 --> 00:05:36.855
you can say
ErrorBoundary.getDerivedStateFrom and

83
00:05:36.855 --> 00:05:42.306
it works directly on
the uninstantiated class, right?

84
00:05:42.306 --> 00:05:46.638
As opposed to everything else
is an instance method, so

85
00:05:46.638 --> 00:05:50.510
you have to say const eb
= new ErrorBoundary;.

86
00:05:50.510 --> 00:05:55.162
And then if we have
something here like lol,

87
00:05:55.162 --> 00:05:59.834
right, then you can call eb.lol, right?

88
00:05:59.834 --> 00:06:02.528
It happens on the thing that you newed up,

89
00:06:02.528 --> 00:06:08.094
whereas something that is static is called
directly on the uninstantiated class.

90
00:06:09.814 --> 00:06:13.881
If you're looking at me like,
I don't know or care about the difference,

91
00:06:13.881 --> 00:06:15.947
that`s acceptable, that's fine,

92
00:06:15.947 --> 00:06:20.637
[LAUGH] but I just wanted to tell you
the difference of what static is, right?

93
00:06:20.637 --> 00:06:24.777
The reason why they do this is because
when it hits an error, it's gonna

94
00:06:24.777 --> 00:06:29.124
call this ErrorBoundary function so
that it can get the proper state of it,

95
00:06:29.124 --> 00:06:34.107
because the thing is gonna be busted,
right, because it caught an error.

96
00:06:34.107 --> 00:06:35.752
And so
it has to kind of rebuild itself, and

97
00:06:35.752 --> 00:06:37.767
it does that with this
getDerivedStateFromError,

98
00:06:37.767 --> 00:06:39.417
that's where it comes from.

99
00:06:39.417 --> 00:06:43.511
So we're just gonna say
whenever it gets busted,

100
00:06:43.511 --> 00:06:48.970
we just want to make sure that it
has this state in here of hasError,

101
00:06:48.970 --> 00:06:52.288
we wanted that to be set to true, right?

102
00:06:53.478 --> 00:06:56.069
There is no lol function, by the way.

103
00:06:56.069 --> 00:07:00.769
So it's gonna go from having a state
of hasError: false to having

104
00:07:00.769 --> 00:07:03.770
an error as true whenever it gets busted.

105
00:07:03.770 --> 00:07:08.067
And then you're gonna run this
function called componentDidCatch,

106
00:07:08.067 --> 00:07:10.410
it's gonna catch the error and info.

107
00:07:12.746 --> 00:07:18.449
&gt;&gt; Brian Holt: And here, if you had
something like send to TrackJS or Sentry,

108
00:07:18.449 --> 00:07:24.916
or something like that, you would
send it off and log your errors here.

109
00:07:24.916 --> 00:07:28.220
I'm gonna show you this sophisticated
technology of where I log all of my

110
00:07:28.220 --> 00:07:29.534
errors, which is console.

111
00:07:29.534 --> 00:07:35.827
Console.error("ErrorBoundary caught

112
00:07:35.827 --> 00:07:40.588
some stupid error",) I like my

113
00:07:40.588 --> 00:07:45.178
tools to tell me that I'm dumb,

114
00:07:45.178 --> 00:07:50.978
it motivates me, error, info, okay?

115
00:07:50.978 --> 00:07:55.766
And then here's kind of the interesting
thing, every component, so

116
00:07:55.766 --> 00:08:00.632
every React component,
class component has a render function.

117
00:08:00.632 --> 00:08:05.198
Everything else is totally optional,
but it must have a render function,

118
00:08:05.198 --> 00:08:09.400
and the render function is 95%
the same thing as just a normal React

119
00:08:09.400 --> 00:08:12.062
component function body.

120
00:08:12.062 --> 00:08:16.936
So here's where you're going
to return something, so,

121
00:08:16.936 --> 00:08:22.797
if (this.state.hasError),
&gt;&gt; Brian Holt: Then

122
00:08:22.797 --> 00:08:28.686
you're gonna return your error,
whatever you wanna show the user, right?

123
00:08:28.686 --> 00:08:33.213
So you're gonna say something
like error-boundary

124
00:08:35.727 --> 00:08:42.011
&gt;&gt; Brian Holt: &lt;h2&gt;Uh oh!&lt;/h2&gt;,

125
00:08:42.011 --> 00:08:45.937
&lt;p&gt;, there was

126
00:08:45.937 --> 00:08:51.442
an error with this page.

127
00:08:51.442 --> 00:08:56.258
And then we'll pull in a link.

128
00:08:56.258 --> 00:09:01.234
Make sure we import that
as well from up at the top,

129
00:09:01.234 --> 00:09:07.042
import { Link } from
'@tanstack/react-router'.

130
00:09:07.042 --> 00:09:13.118
We're gonna send this to just
the homepage and, click here,

131
00:09:16.635 --> 00:09:20.760
&gt;&gt; Brian Holt: To go back to the home

132
00:09:20.760 --> 00:09:28.445
page,
&gt;&gt; Brian Holt: Okay?

133
00:09:28.445 --> 00:09:32.885
All right, so if you have this
ErrorBoundary wrapping your component,

134
00:09:32.885 --> 00:09:35.960
what do you want it to
display if there is no error?

135
00:09:38.477 --> 00:09:40.507
&gt;&gt; Brian Holt: You don't want it
to add anything of itself, right?

136
00:09:40.507 --> 00:09:45.987
You just want it to just be a straight
on invisible passthrough, right?

137
00:09:45.987 --> 00:09:50.011
So in that particular case,
instead of this one, rather,

138
00:09:50.011 --> 00:09:53.717
you're gonna say return
this.props.children;.

139
00:09:55.307 --> 00:09:58.908
It's not wrapping it or
anything like that,

140
00:09:58.908 --> 00:10:04.216
it's just saying if I have
an ErrorBoundary around MyComponent,

141
00:10:04.216 --> 00:10:09.164
or let's make it even simpler and
just say that an &lt;h1&gt; of,

142
00:10:12.044 --> 00:10:14.213
&gt;&gt; Brian Holt: Something like this, right?

143
00:10:14.213 --> 00:10:17.827
If there's no error, be invisible, right?

144
00:10:17.827 --> 00:10:19.129
Don't show me anything right?

145
00:10:19.129 --> 00:10:23.472
And that's what this does, this is just
saying, I'm an invisible path through,

146
00:10:23.472 --> 00:10:27.008
do nothing, and then if this, for
whatever reason, has an error,

147
00:10:27.008 --> 00:10:28.513
right, then display this.

148
00:10:28.513 --> 00:10:32.033
Don't do anything with the children,
right,

149
00:10:32.033 --> 00:10:36.613
just display this, and
then that's how that works, right?

150
00:10:36.613 --> 00:10:40.770
Okay, that's it for an ErrorBoundary,

151
00:10:40.770 --> 00:10:45.273
just a slight more on class components.

152
00:10:45.273 --> 00:10:48.277
I showed you one of these,
they're called life cycle methods.

153
00:10:48.277 --> 00:10:52.525
So before we had effects, right,
where you can kind of useEffect

154
00:10:52.525 --> 00:10:56.165
to affect different parts of
the component life cycle.

155
00:10:56.165 --> 00:10:59.560
This had very strict named
parts of the life cycle, so

156
00:10:59.560 --> 00:11:03.264
you could do something like
componentDidMount, right?

157
00:11:03.264 --> 00:11:07.551
And this would be like, when we do
useEffect and give it an empty array so

158
00:11:07.551 --> 00:11:09.984
it only runs once, right?

159
00:11:09.984 --> 00:11:13.394
That's what componentDidMount does, right?

160
00:11:13.394 --> 00:11:19.449
Or componentWillUnmount, this is like
that returned function from a useEffect,

161
00:11:19.449 --> 00:11:21.792
right, it runs once at the end.

162
00:11:21.792 --> 00:11:24.827
Or if you wanted to do,
where is component,

163
00:11:24.827 --> 00:11:29.424
there's componentShouldUpdate,
not the one I'm looking for,

164
00:11:29.424 --> 00:11:33.292
componentDidUpdate, that's
what I'm looking for.

165
00:11:35.152 --> 00:11:39.141
This is an effect that's rendering
again and again based on,

166
00:11:39.141 --> 00:11:42.133
remember we were looking pizza size,
right,

167
00:11:42.133 --> 00:11:46.135
where we were having it run every
time pizza size ran, right?

168
00:11:46.135 --> 00:11:50.417
componentDidUpdate runs every
single time the component changes,

169
00:11:50.417 --> 00:11:52.492
that the state changes, right?

170
00:11:52.492 --> 00:11:56.056
The other thing I'll just
mention kind of briefly,

171
00:11:56.056 --> 00:12:01.322
there's also a constructor, that's
also something that you should know.

172
00:12:01.322 --> 00:12:07.135
If you ever have to do something when
the component is very first created,

173
00:12:07.135 --> 00:12:12.500
you have to put in a constructor and
you have to pass this up to React.

174
00:12:12.500 --> 00:12:16.704
And the way you do that is you pass it
to the super, the class that's above it,

175
00:12:16.704 --> 00:12:18.077
which is the component.

176
00:12:18.077 --> 00:12:21.176
So you take the props in and
you have to pass that to React,

177
00:12:21.176 --> 00:12:23.957
that's what this super(props) things does.

178
00:12:23.957 --> 00:12:27.421
Why I'm kind of grateful I
don't have to teach this

179
00:12:27.421 --> 00:12:31.057
anymore is because you have
to learn a lot about this.

180
00:12:33.847 --> 00:12:35.742
And if you've ever done
a JavaScript interview,

181
00:12:35.742 --> 00:12:37.557
people love to talk about what this is,
right?

182
00:12:39.548 --> 00:12:46.031
And really, the big problem
here is if I do something like,

183
00:12:46.031 --> 00:12:50.829
let's call this function, I don't know,

184
00:12:50.829 --> 00:12:56.680
celebrateError, okay,
and I say this.setState.

185
00:13:00.369 --> 00:13:05.132
&gt;&gt; Brian Holt: celebrateError,
or something like that,

186
00:13:05.132 --> 00:13:11.406
celebration,
&gt;&gt; Brian Holt: Okay, and

187
00:13:11.406 --> 00:13:18.089
I wanna put this every time that you click
on this, onClick =(this.celebrateError).

188
00:13:20.585 --> 00:13:27.135
&gt;&gt; Brian Holt: This is not gonna work yet,
which sucks, right, why?

189
00:13:27.135 --> 00:13:28.672
Because, what is this here?

190
00:13:30.222 --> 00:13:32.458
Your answer that question should be,
I don't know, Brian,

191
00:13:32.458 --> 00:13:34.462
why are you asking me this question,
right?

192
00:13:34.462 --> 00:13:37.624
And the answer, I think it's undefined or
something, right?

193
00:13:37.624 --> 00:13:42.189
Or window, but
it's not what you would expect it to be.

194
00:13:42.189 --> 00:13:47.781
So, you have to go do something
really silly like this.celebrateError

195
00:13:47.781 --> 00:13:51.542
= this.celebrateError.bind(this), and

196
00:13:51.542 --> 00:13:57.075
then this will actually bind the context
so that this will be correct.

197
00:13:57.075 --> 00:14:03.936
Or you can get extra silly and
you can say celebrateError = function and

198
00:14:03.936 --> 00:14:08.175
you have to use an arrow
function like this.

199
00:14:11.035 --> 00:14:12.795
Now, why does this work?

200
00:14:12.795 --> 00:14:16.971
It's because error functions, or
arrow functions, have a different,

201
00:14:16.971 --> 00:14:20.552
context setting methodology
than normal functions.

202
00:14:20.552 --> 00:14:24.853
Its lexical, I think is the term that they
use for it, or it's the other way around,

203
00:14:24.853 --> 00:14:29.412
I can never keep them straight, but it's
where it's written, not where it's called.

204
00:14:29.412 --> 00:14:34.231
Whereas these functions,
the context is set where it's invoked,

205
00:14:34.231 --> 00:14:36.097
not where it's created.

206
00:14:36.097 --> 00:14:40.680
Again, if you're looking at me like,
am I speaking Chinese?

207
00:14:40.680 --> 00:14:42.680
I might be, I actually don't know,
right [LAUGH]?

208
00:14:43.720 --> 00:14:47.290
But I'm just kind of trying to survey
the land of where the landmines are here.

209
00:14:47.290 --> 00:14:52.081
And so just be aware that you have to get
kind of into the weeds of what this is.

210
00:14:52.081 --> 00:14:56.149
I asked you to also see here
that I called this.setState,

211
00:14:56.149 --> 00:14:59.890
this is a React functionality for
class components.

212
00:14:59.890 --> 00:15:04.404
This doesn't exist, obviously,
on function components, but

213
00:15:04.404 --> 00:15:07.857
this is what it uses instead of useState,
right?

214
00:15:07.857 --> 00:15:10.695
You do this.setState, and
then you change the state, and

215
00:15:10.695 --> 00:15:13.437
this will be a massive object
of all of the state, right?

216
00:15:13.437 --> 00:15:17.181
As opposed to having a one hook for
every single piece of state that you have,

217
00:15:17.181 --> 00:15:18.538
you got one big old object.

218
00:15:20.138 --> 00:15:22.840
And so, for example, right here
you can see that I have hasError,

219
00:15:22.840 --> 00:15:24.748
that's some state on here.

220
00:15:24.748 --> 00:15:29.308
This won't overwrite it because it does
an object merge between the two, so

221
00:15:29.308 --> 00:15:30.670
just be aware of that.

222
00:15:33.254 --> 00:15:37.322
&gt;&gt; Brian Holt: Last thing here is if
you wanna reference the props here,

223
00:15:37.322 --> 00:15:41.055
you just say console.log(this.props.lol),

224
00:15:41.055 --> 00:15:44.887
whatever you would normally
get props here, right?

225
00:15:44.887 --> 00:15:48.307
Instead, you just reference
them here under this.props.

226
00:15:50.743 --> 00:15:54.019
&gt;&gt; Brian Holt: Okay, that's kind of
a whirlwind tour of class components,

227
00:15:54.019 --> 00:15:57.043
enough hopefully that you kind
of get the lay of the land,

228
00:15:57.043 --> 00:16:00.200
that if you have to use them,
you know where everything is.

229
00:16:00.200 --> 00:16:03.431
I've kinda shown you the 95% of them,
beyond that,

230
00:16:03.431 --> 00:16:08.338
everything's kind of the same between
class components and function components.

231
00:16:10.008 --> 00:16:14.902
One more thing I was gonna show you,
I kind of referenced it earlier, but

232
00:16:14.902 --> 00:16:18.127
let's say if we had to
use our custom hook here.

233
00:16:18.127 --> 00:16:25.840
I would do something like
function EBWithHooks and

234
00:16:25.840 --> 00:16:30.503
I would do something like const

235
00:16:30.503 --> 00:16:34.987
potd = usePizzaOfTheDay and

236
00:16:34.987 --> 00:16:40.907
then I would return (ErrorBoundary)

237
00:16:40.907 --> 00:16:47.973
with,
&gt;&gt; Brian Holt: Something like this, right?

238
00:16:47.973 --> 00:16:51.962
So you do all of the hooks above
it in a function component, and

239
00:16:51.962 --> 00:16:55.356
then you pass them down into
the component that way.

240
00:17:00.979 --> 00:17:03.161
&gt;&gt; Brian Holt: Kind of silly,
but it does work, right?

241
00:17:03.161 --> 00:17:05.486
You can kind of use the tools and
compose them together.

