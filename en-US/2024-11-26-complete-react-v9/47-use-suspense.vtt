WEBVTT

1
00:00:00.247 --> 00:00:04.179
&gt;&gt; Brian Holt: Let's talk
now about use and Suspense.

2
00:00:04.179 --> 00:00:08.982
We've been talking on and off for
years at this point about Suspense.

3
00:00:08.982 --> 00:00:12.630
They announced it forever ago, and then
they got really close to releasing and

4
00:00:12.630 --> 00:00:14.960
they're like, no,
we don't wanna release it.

5
00:00:14.960 --> 00:00:18.023
And then they're kind of coming back and
ready to release it again.

6
00:00:18.023 --> 00:00:21.761
And kind of what they're recommending
is we don't really want you to use

7
00:00:21.761 --> 00:00:22.873
Suspense directly.

8
00:00:22.873 --> 00:00:27.868
We want you to use things
that use Suspense for you.

9
00:00:27.868 --> 00:00:32.912
So cuz it's kind of a strange API,
but they're getting closer and

10
00:00:32.912 --> 00:00:38.780
React 19, it'll finally be stable,
and I'm gonna show you how to use it.

11
00:00:38.780 --> 00:00:42.652
Yeah, I'm gonna show you
how to use it today.

12
00:00:42.652 --> 00:00:46.938
So one of the cool things is it's
actually usable by TanStack Query.

13
00:00:46.938 --> 00:00:48.857
They'll use it for
you which is pretty cool.

14
00:00:48.857 --> 00:00:50.290
So we're gonna do that.

15
00:00:50.290 --> 00:00:54.351
So I want you to head over to app.jsx, and

16
00:00:54.351 --> 00:01:00.737
we're gonna give this some
configuration to QueryClient here,

17
00:01:00.737 --> 00:01:08.204
and we're gonna say defaultOptions
&gt;&gt; Brian Holt: Queries,

18
00:01:08.204 --> 00:01:12.764
and we're gonna say
experimental_prefetchInRender, and

19
00:01:12.764 --> 00:01:15.225
we're gonna set that to be true.

20
00:01:17.810 --> 00:01:24.801
&gt;&gt; Brian Holt: All right, let's go back
to past.jsx, sorry, past.lazy.jsx,

21
00:01:24.801 --> 00:01:30.972
and we're gonna import a couple
of things up here from React.

22
00:01:30.972 --> 00:01:34.347
We're gonna import a useState,
which we have already.

23
00:01:34.347 --> 00:01:39.290
So I don't need to do that, but

24
00:01:39.290 --> 00:01:44.806
we're gonna import Suspense with

25
00:01:44.806 --> 00:01:50.139
the capital S and "use", just "use".

26
00:01:51.413 --> 00:01:57.200
&gt;&gt; Brian Holt: So, we wanna show
a really nice loading page that's

27
00:01:57.200 --> 00:02:02.866
not like this one when
we're loading past orders.

28
00:02:02.866 --> 00:02:06.533
So here inside of this error-wrapped
past order, we're gonna

29
00:02:06.533 --> 00:02:10.993
abuse this higher-level component a little
bit and put some more stuff in here.

30
00:02:10.993 --> 00:02:16.248
So one, we're gonna move page
just up into this component.

31
00:02:16.248 --> 00:02:22.864
And we're gonna move our useQuery here

32
00:02:22.864 --> 00:02:27.885
as well up into that, right?

33
00:02:37.823 --> 00:02:41.136
&gt;&gt; Brian Holt: Now,
the interesting thing that we're

34
00:02:41.136 --> 00:02:45.918
gonna do here is I'm gonna
just call this loadedPromise.

35
00:02:45.918 --> 00:02:51.031
And then just here before the semicolon,
I'm gonna put .Promise.

36
00:02:51.031 --> 00:02:54.497
This is gonna give you access directly

37
00:02:54.497 --> 00:02:59.379
to the promise of this
useQuery that's generating.

38
00:02:59.379 --> 00:03:04.800
So inside of the error boundary,
I'm gonna put one called Suspense.

39
00:03:04.800 --> 00:03:12.650
And I'm gonna give it a fallback of
something nice that like hey, I'm loading.

40
00:03:12.650 --> 00:03:18.771
So I'm gonna say div className

41
00:03:18.771 --> 00:03:22.774
= past_orders and

42
00:03:22.774 --> 00:03:28.431
h2 of Loading Past Orders.

43
00:03:31.580 --> 00:03:35.740
&gt;&gt; Brian Holt: And then outside of that,
I'm gonna say close Suspense.

44
00:03:37.200 --> 00:03:38.270
This also needs to be closed.

45
00:03:46.455 --> 00:03:51.129
&gt;&gt; Brian Holt: Okay, now that I'm tracking
page and the promise outside of this,

46
00:03:51.129 --> 00:03:54.010
I have to pass this into past orders here.

47
00:03:56.150 --> 00:04:02.207
So I'm gonna say
loadedPromise={loadedPromise}.

48
00:04:04.446 --> 00:04:07.087
&gt;&gt; Brian Holt: And page = page.

49
00:04:10.416 --> 00:04:11.626
&gt;&gt; Brian Holt: Bear with me,
we're getting there.

50
00:04:13.656 --> 00:04:17.047
All right, so
now we have this promise being passed in,

51
00:04:17.047 --> 00:04:19.224
you have to pass in setPage as well.

52
00:04:19.224 --> 00:04:24.260
I do you have to pass in setPage,
so page and setPage, sorry.

53
00:04:29.008 --> 00:04:31.630
&gt;&gt; Brian Holt: So we're passing
in loadedPromise page, setPage.

54
00:04:31.630 --> 00:04:36.359
You can ignore these props because there's
not actually any props that we care about,

55
00:04:36.359 --> 00:04:39.619
but they were there from me
previously putting them there.

56
00:04:39.619 --> 00:04:43.196
So if you want to,
you can leave them there, okay.

57
00:04:45.166 --> 00:04:50.161
This loadedPromise represents the data
that's going to be there eventually,

58
00:04:50.161 --> 00:04:50.687
right?

59
00:04:50.687 --> 00:04:52.778
So it's a promise of
the data that's coming.

60
00:04:57.544 --> 00:05:01.536
&gt;&gt; Brian Holt: So
what I need you to do is,

61
00:05:01.536 --> 00:05:06.434
I need you to say const data = use().

62
00:05:06.434 --> 00:05:11.522
This has to be coming from props.

63
00:05:11.522 --> 00:05:16.049
So we have to destructure this.

64
00:05:16.049 --> 00:05:19.842
So I'm gonna put page,

65
00:05:19.842 --> 00:05:24.585
setPage and loadedPromise,

66
00:05:24.585 --> 00:05:29.714
and data = use(loadedPromise).

67
00:05:30.934 --> 00:05:32.327
There's too many parentheses here.

68
00:05:35.495 --> 00:05:40.513
&gt;&gt; Brian Holt: There we go.

69
00:05:40.513 --> 00:05:44.373
So this is the line that I'm concerned
that you might be looking at, like,

70
00:05:44.373 --> 00:05:45.554
what the hell is that?

71
00:05:46.874 --> 00:05:48.364
So follow with me for a second.

72
00:05:48.364 --> 00:05:52.952
Suspense is basically saying here is a
boundary that stuff inside of it might be

73
00:05:52.952 --> 00:05:53.584
loading.

74
00:05:54.784 --> 00:05:58.238
When it's loading, render the fallback.

75
00:05:58.238 --> 00:06:00.668
When it's not loading,
render whatever is inside of it.

76
00:06:00.668 --> 00:06:08.979
What we're doing here is we
are passing in a promise of the data.

77
00:06:08.979 --> 00:06:13.653
So the reason why we brought this
outside of the Suspense boundary,

78
00:06:13.653 --> 00:06:16.036
it works like the error boundary.

79
00:06:16.036 --> 00:06:20.658
That this has to exist outside of
the rendering thing because it can't

80
00:06:20.658 --> 00:06:23.178
render if it's not working, right?

81
00:06:23.178 --> 00:06:27.054
I guess we have to pass in the isLoading.

82
00:06:27.054 --> 00:06:30.255
I guess you can just delete the isLoading
thing cuz this will never hit.

83
00:06:30.255 --> 00:06:31.294
So you can delete that.

84
00:06:33.444 --> 00:06:36.467
We're passing in this promise,
this loadedPromise, and

85
00:06:36.467 --> 00:06:39.074
what's happening is this "use",
this is another react thing,

86
00:06:39.074 --> 00:06:44.356
it says all right if this promise is
not loaded yet, suspend this component.

87
00:06:44.356 --> 00:06:49.064
Don't render it, stop here and
tell that Suspense component above me,

88
00:06:49.064 --> 00:06:51.415
I'm still loading, right?

89
00:06:51.415 --> 00:06:52.488
So it's going to hit this line.

90
00:06:52.488 --> 00:06:56.172
It's actually probably good if you can
put this line first cuz you wanna run as

91
00:06:56.172 --> 00:06:58.615
little code as possible here.

92
00:06:58.615 --> 00:07:01.868
It's going to go Backup is like,
hey, Suspense, I'm loading, and

93
00:07:01.868 --> 00:07:03.975
then it's gonna load this fallback for
you.

94
00:07:05.465 --> 00:07:10.172
Eventually, when this promise resolves,
it's gonna be like cool, I'm good now, and

95
00:07:10.172 --> 00:07:12.705
then it's gonna let this
continue rendering.

96
00:07:14.945 --> 00:07:18.790
Now, what's cool about that is what
happens later when we set the page to be

97
00:07:18.790 --> 00:07:20.326
something different again.

98
00:07:20.326 --> 00:07:23.580
It's gonna send it back to Suspense,
and then it's gonna go back and forth.

99
00:07:27.798 --> 00:07:30.030
&gt;&gt; Brian Holt: Is this
better than what we had?

100
00:07:30.030 --> 00:07:36.684
Maybe, I think so because now this
component has no concept of loading.

101
00:07:36.684 --> 00:07:40.245
Once it unsuspends itself,
the data is all loaded and

102
00:07:40.245 --> 00:07:43.661
this reads like it's all
just linear loaded code.

103
00:07:45.131 --> 00:07:47.450
I think it's kind of nice
if you can get past this.

104
00:07:47.450 --> 00:07:52.157
This is kind of a weird API, but some
people put one Suspense at the top level

105
00:07:52.157 --> 00:07:57.211
of their app and it's like this is
a loading state for my entire app.

106
00:07:57.211 --> 00:07:59.450
It's not the most user friendly thing,
but you could do it that way.

107
00:07:59.450 --> 00:08:04.680
And some people will do it like this,
where it's more localized.

108
00:08:06.530 --> 00:08:09.808
So I mean, let's make sure that
I'm not telling you all lies.

109
00:08:09.808 --> 00:08:11.100
That could happen.

110
00:08:11.100 --> 00:08:14.586
This was past orders,
so loading past orders.

111
00:08:18.640 --> 00:08:21.667
&gt;&gt; Brian Holt: And it loaded,
same thing if I hit Next,

112
00:08:21.667 --> 00:08:27.558
it's gonna go back to this Loading
Passed Orders thing, and then it's done.

113
00:08:27.558 --> 00:08:30.946
And then because it's TanStack Query,
it's all cached well so

114
00:08:30.946 --> 00:08:33.152
you don't hit that loading state again.

115
00:08:36.516 --> 00:08:37.527
&gt;&gt; Brian Holt: I think this is quite nice.

116
00:08:41.545 --> 00:08:44.688
&gt;&gt; Brian Holt: Another kind of fun fact,
can I do this really quick here?

117
00:08:44.688 --> 00:08:48.605
I don't have it in here, but

118
00:08:48.605 --> 00:08:54.820
let's go look at Header.jsx really quick.

119
00:08:54.820 --> 00:09:00.478
They made "use" do several things,
it's become this,

120
00:09:00.478 --> 00:09:05.390
there it is,
where we have useContext here.

121
00:09:05.390 --> 00:09:10.316
You can also just use it with "use" now,
&gt;&gt; Brian Holt: And do this.

122
00:09:11.645 --> 00:09:14.612
&gt;&gt; Brian Holt: Surprise,
you might say, who cares?

123
00:09:14.612 --> 00:09:20.091
And fair thing to say, but
you can now do that with React 19.

