WEBVTT

1
00:00:00.103 --> 00:00:02.041
&gt;&gt; Brian Holt: Uncontrolled Forms,

2
00:00:02.041 --> 00:00:06.735
not just from when you feel
out of control of your life.

3
00:00:06.735 --> 00:00:08.485
We're gonna talk about
some uncontrolled forms.

4
00:00:08.485 --> 00:00:12.475
Alluded to a little bit
on this Create Order page

5
00:00:12.475 --> 00:00:16.380
that we have controlled inputs here,
right?

6
00:00:16.380 --> 00:00:20.135
That we're actually, explicitly using
the value and we're setting it and

7
00:00:20.135 --> 00:00:22.200
we're using hooks to track everything.

8
00:00:22.200 --> 00:00:25.878
As you might imagine, that's called a
controlled form because we're using React

9
00:00:25.878 --> 00:00:28.516
to explicitly control the input and
the output of the form.

10
00:00:28.516 --> 00:00:31.826
I will say that this is more unusual.

11
00:00:31.826 --> 00:00:36.119
I would say, usually, you wanna do
what's called an uncontrolled form,

12
00:00:36.119 --> 00:00:40.819
which is basically, let the browser just
handle all of the form stuff for you, and

13
00:00:40.819 --> 00:00:42.679
only listen for submit events.

14
00:00:42.679 --> 00:00:45.379
This is pretty easy for
us to just kinda knock out really quick.

15
00:00:45.379 --> 00:00:48.938
So let's go ahead and go do that.

16
00:00:48.938 --> 00:00:53.915
Also, wanted to show you how to do a post
or a mutation with a TanStack Query.

17
00:00:53.915 --> 00:00:57.784
So we'll knock out both of
those birds with one stone.

18
00:01:00.462 --> 00:01:03.565
&gt;&gt; Brian Holt: Okay, so
inside of your API directory,

19
00:01:03.565 --> 00:01:08.237
we're gonna make a getPastOrder,
no, I'm just kidding.

20
00:01:08.237 --> 00:01:13.641
We're gonna make a postContact file here.

21
00:01:16.610 --> 00:01:24.451
&gt;&gt; Brian Holt: And it's gonna be export
default async function postContact,

22
00:01:24.451 --> 00:01:29.105
takes in name, email, and message.

23
00:01:29.105 --> 00:01:33.518
And contact response, or

24
00:01:33.518 --> 00:01:38.934
const response = await fetch,

25
00:01:38.934 --> 00:01:46.165
and we're gonna post to /api/contact.

26
00:01:46.165 --> 00:01:50.373
And we have to give it some
more configuration here, so

27
00:01:50.373 --> 00:01:55.129
we have to give it a method,
which is going to be POST headers,

28
00:01:55.129 --> 00:01:58.701
as we learned before,
definitely s headers.

29
00:01:58.701 --> 00:02:06.298
We're doing Content-Type application/json,

30
00:02:06.298 --> 00:02:14.069
and the body is going to
be JSON.stringify( name,

31
00:02:14.069 --> 00:02:17.787
email, and message).

32
00:02:17.787 --> 00:02:22.725
So if this is not apparent yet,
we're gonna make a contact form, right,

33
00:02:22.725 --> 00:02:27.025
where someone can go in and
put name, email, and a message, and

34
00:02:27.025 --> 00:02:29.434
then we will spam them with emails.

35
00:02:29.434 --> 00:02:34.676
That's kind of my plan here
in Brian's Capitalism 101.

36
00:02:34.676 --> 00:02:39.535
So if the response is not okay,
&gt;&gt; Brian Holt: Then

37
00:02:39.535 --> 00:02:41.189
we'll just throw an error.

38
00:02:44.048 --> 00:02:47.606
&gt;&gt; Brian Holt: This is how you wanna
handle this actually because that way,

39
00:02:47.606 --> 00:02:52.280
TanStack Query will actually catch the
error for you, and then it'll set the is

40
00:02:52.280 --> 00:02:56.905
error property be true, and then you
can handle that appropriately, right?

41
00:03:04.548 --> 00:03:10.193
&gt;&gt; Brian Holt: And
then return response.json.

42
00:03:10.193 --> 00:03:15.645
So this is an async function.

43
00:03:15.645 --> 00:03:19.624
So it always returns a promise,
I think we talked about that earlier,

44
00:03:19.624 --> 00:03:21.791
that async functions always return.

45
00:03:21.791 --> 00:03:24.244
So what we could have
done here is it said,

46
00:03:27.854 --> 00:03:29.706
&gt;&gt; Brian Holt: Const json = response.json,

47
00:03:29.706 --> 00:03:32.869
and return json,
that's typically what I've done.

48
00:03:32.869 --> 00:03:35.688
But I got this code from TanStack Query,
and they do it this way.

49
00:03:35.688 --> 00:03:39.604
And it's because if you return a promise,
then it does something called promise

50
00:03:39.604 --> 00:03:43.345
chaining, that none of you ever have to
think about that term ever again, but

51
00:03:43.345 --> 00:03:46.882
that's what it is called,
where you basically do promise, then this.

52
00:03:46.882 --> 00:03:49.692
And so if you return a promise,

53
00:03:49.692 --> 00:03:55.107
it implicitly chains that
promise to the current promise.

54
00:03:55.107 --> 00:03:59.662
Not that really matters for you, but
that's why it's okay that we're not

55
00:03:59.662 --> 00:04:04.000
awaiting here, cuz you could do a to
return await response.json, but

56
00:04:04.000 --> 00:04:07.853
you don't need to, and
it doesn't really make a difference.

57
00:04:11.427 --> 00:04:13.732
&gt;&gt; Brian Holt: Again, stuff you just
don't really have to care about.

58
00:04:13.732 --> 00:04:22.777
Okay, so let's go to index.lazy.jsx
&gt;&gt; Brian Holt: I

59
00:04:22.777 --> 00:04:25.002
feel like most of the stuff I learned
from stuff like this is like,

60
00:04:25.002 --> 00:04:27.639
I'll look at a lot of line of codes like,
why the hell does that work that way?

61
00:04:27.639 --> 00:04:31.660
And then I'll get way too deep into it,
that's how I found that one.

62
00:04:31.660 --> 00:04:37.623
Okay, index.lazy.jsx,
we're gonna make a contact form.

63
00:04:37.623 --> 00:04:41.040
So we'll just make another one of
these li's with a link into it.

64
00:04:41.040 --> 00:04:45.127
This is gonna go to contact, and
we're gonna put a contact us or

65
00:04:45.127 --> 00:04:46.602
something like that.

66
00:04:50.200 --> 00:04:54.771
&gt;&gt; Brian Holt: Okay, and
then we're gonna go make a new route here.

67
00:04:54.771 --> 00:05:00.888
So this is gonna be contact.lazy.jsx.

68
00:05:00.888 --> 00:05:06.204
Get a nice little stub
here from TanStack router.

69
00:05:08.580 --> 00:05:12.948
&gt;&gt; Brian Holt: So
that's all good, we need import

70
00:05:12.948 --> 00:05:18.045
useMutation from TanStack React Query,

71
00:05:18.045 --> 00:05:23.882
and we need our postContact
from postContact.

72
00:05:23.882 --> 00:05:29.197
There we go, and then we'll make
a function called ContactRoute,

73
00:05:29.197 --> 00:05:32.377
or page, or whatever you wanna call it.

74
00:05:32.377 --> 00:05:33.974
And we'll just put that up here.

75
00:05:37.787 --> 00:05:40.400
&gt;&gt; Brian Holt: Okay,
now we have our React component, so

76
00:05:40.400 --> 00:05:45.044
now we're gonna do a mutation, which
is just a fun way of saying, a post, or

77
00:05:45.044 --> 00:05:49.709
a put, or a patch, or something like that,
but it's changing something.

78
00:05:49.709 --> 00:05:52.899
A query is in theory, you can call
the query as many times as you want,

79
00:05:52.899 --> 00:05:56.706
it doesn't change anything, right,
it's just getting data back from the API.

80
00:05:56.706 --> 00:06:01.425
And a mutation, you don't wanna call that
a bunch of different times because it

81
00:06:01.425 --> 00:06:06.367
could be semantically different depending
on if you do it multiple times, right?

82
00:06:06.367 --> 00:06:09.757
I don't wanna get into the intricacies
of REST, because, again,

83
00:06:09.757 --> 00:06:12.671
it is one of the dumbest things
that people argue about is,

84
00:06:12.671 --> 00:06:16.316
should this be a put, or should this
be a patch, or should this be a post?

85
00:06:16.316 --> 00:06:20.866
And my answer to that is,
it doesn't matter, just write the API,

86
00:06:20.866 --> 00:06:22.260
right, who cares?

87
00:06:22.260 --> 00:06:27.349
So TanStack kind of wraps all these
things into the put, patch, delete, all

88
00:06:27.349 --> 00:06:33.013
that kinda stuff into a mutation, right,
something is changing on the server side.

89
00:06:33.013 --> 00:06:40.486
So const mutation = useMutation,
here a mutation function,

90
00:06:40.486 --> 00:06:45.421
function ee.preventDefault, right,

91
00:06:45.421 --> 00:06:50.502
cuz we're gonna use this as a form submit.

92
00:06:50.502 --> 00:06:52.494
So, we'll have a preventDefault.

93
00:06:52.494 --> 00:06:54.110
We're gonna grab the form data.

94
00:06:54.110 --> 00:07:00.075
So, we're gonna say that by
const formData = new FormData.

95
00:07:00.075 --> 00:07:05.484
FormData is a browser API, so
this comes from the browser,

96
00:07:05.484 --> 00:07:08.199
it doesn't come from React.

97
00:07:08.199 --> 00:07:10.622
And we're gonna say e.target.

98
00:07:10.622 --> 00:07:12.553
E.target in this particular case,

99
00:07:12.553 --> 00:07:15.240
because this is gonna be
a submit event from a form.

100
00:07:15.240 --> 00:07:17.495
E.target will be what?

101
00:07:17.495 --> 00:07:18.703
The form, right?

102
00:07:18.703 --> 00:07:22.217
So the form element will
actually be the e.target here.

103
00:07:22.217 --> 00:07:24.824
So when you do new FormData like this,

104
00:07:24.824 --> 00:07:29.469
it's going to then pull all this
out into this FormData object, and

105
00:07:29.469 --> 00:07:34.785
we can now pull all of the information
out of the form using this FormData API.

106
00:07:34.785 --> 00:07:39.250
Okay, and then we're

107
00:07:39.250 --> 00:07:44.890
gonna return postContact,

108
00:07:44.890 --> 00:07:49.356
formData.get("name").

109
00:07:49.356 --> 00:07:53.658
And we're gonna do that three times,

110
00:07:53.658 --> 00:07:57.835
once for email and once for message.

111
00:07:57.835 --> 00:08:01.245
Just to make sure we got this right,

112
00:08:01.245 --> 00:08:06.247
we're gonna look in postContact's name,
email,

113
00:08:06.247 --> 00:08:11.475
message, get rid of that,
don't save, and to look,

114
00:08:11.475 --> 00:08:16.839
again, in contact, name,
email, message, right?

115
00:08:16.839 --> 00:08:20.230
We gotta make sure that the things
get put in there in the right order.

116
00:08:20.230 --> 00:08:26.973
Now, we have this mutation function,
or hook that we can call.

117
00:08:26.973 --> 00:08:30.735
I always call that a hook, but
it's like the result of a hook.

118
00:08:30.735 --> 00:08:34.256
This would be an object of some variety,
what do they call it,

119
00:08:34.256 --> 00:08:35.762
the UseMutationResult.

120
00:08:35.762 --> 00:08:37.691
This is the name of the type, and

121
00:08:37.691 --> 00:08:41.632
now this doesn't get called every
time like query does, right?

122
00:08:41.632 --> 00:08:44.702
It actually waits for you to invoke it.

123
00:08:44.702 --> 00:08:47.733
So let's go check out how you do that.

124
00:08:47.733 --> 00:08:51.232
Let's go start building our markup for
the page.

125
00:08:51.232 --> 00:08:55.850
We're gonna say, return here, and
we'll start building our contact page.

126
00:08:55.850 --> 00:09:03.300
Ok, h2, this is a contact,
and then we're gonna say,

127
00:09:03.300 --> 00:09:07.802
if the mutation is successful, so

128
00:09:07.802 --> 00:09:14.031
if they successfully
click Submit my contact.

129
00:09:14.031 --> 00:09:16.438
We don't wanna just leave
them on the contact page,

130
00:09:16.438 --> 00:09:18.143
we wanna do something else, right?

131
00:09:18.143 --> 00:09:22.867
So we're gonna say, isSuccess.

132
00:09:22.867 --> 00:09:26.379
And if it is successful,

133
00:09:26.379 --> 00:09:32.077
then we're gonna say, h3 submitted.

134
00:09:32.077 --> 00:09:36.344
In theory, you would have probably
some nicer thing here, would be like,

135
00:09:36.344 --> 00:09:39.730
redirect them back to the home page or
something like that,

136
00:09:39.730 --> 00:09:43.477
but I don't know, let them do some work,
let them run it, okay?

137
00:09:43.477 --> 00:09:46.704
So otherwise,
we're gonna show them the form, right,

138
00:09:46.704 --> 00:09:48.733
of something that they can submit.

139
00:09:48.733 --> 00:09:52.090
So the form, and
then we're gonna say onSubmit.

140
00:09:55.891 --> 00:10:01.143
&gt;&gt; Brian Holt: We're gonna say,
mutation., you're never

141
00:10:01.143 --> 00:10:07.587
gonna guess what the function's called,
mutate [LAUGH].

142
00:10:07.587 --> 00:10:13.348
So whenever the Submit happens, right,
either by someone hitting Enter or

143
00:10:13.348 --> 00:10:19.919
hitting the Submit button, it's going to
call this function, which as you guessed,

144
00:10:19.919 --> 00:10:26.243
is probably gonna go call the mutation
function on this useMutation hook, right?

145
00:10:26.243 --> 00:10:28.423
But not before then, which is cool.

146
00:10:28.423 --> 00:10:35.762
All right, we're gonna put a couple
inputs in here, name = "name".

147
00:10:35.762 --> 00:10:42.792
We're gonna have one for
placeholder="name",

148
00:10:42.792 --> 00:10:48.713
and we'll have another one here for email.

149
00:10:48.713 --> 00:10:52.200
And it's a good idea as well
to put type equals email,

150
00:10:52.200 --> 00:10:57.005
that'll bring up the different keyboard
in iOS and Android, right, and

151
00:10:57.005 --> 00:11:01.676
it'll also do some basic validation is,
is this a valid email, yeah.

152
00:11:01.676 --> 00:11:05.960
&gt;&gt; Question 1: Why is it, for us calling
a mutation .mutate, why does that

153
00:11:05.960 --> 00:11:12.016
automatically go to mutate.function and
not us calling mutate.mutate function?

154
00:11:12.016 --> 00:11:13.215
&gt;&gt; Brian Holt: That's a good question.

155
00:11:13.215 --> 00:11:20.154
So this is not actually directly
calling the useMutation function here.

156
00:11:20.154 --> 00:11:23.441
It's actually calling something
else inside of TanStack Query,

157
00:11:23.441 --> 00:11:27.267
which is doing a bunch of other stuff
first, and then it calls your function.

158
00:11:27.267 --> 00:11:27.770
&gt;&gt; Question 1: Okay.
&gt;&gt; Brian Holt: Yeah, so

159
00:11:27.770 --> 00:11:31.405
this is just saying, hey,
whenever you're ready, call this function.

160
00:11:31.405 --> 00:11:34.333
This is the function that I've
made to actually call the API, but

161
00:11:34.333 --> 00:11:37.220
there's some other machinery that
it has to take care of first.

162
00:11:37.220 --> 00:11:38.154
That make sense?

163
00:11:38.154 --> 00:11:41.322
Cool, good question.

164
00:11:41.322 --> 00:11:43.807
Okay, so that's the inputs that we're on.

165
00:11:43.807 --> 00:11:46.566
So email, email, email, the placeholder,

166
00:11:46.566 --> 00:11:51.331
we should probably make these capital
because we're not savages, all right?

167
00:11:51.331 --> 00:11:54.925
And then we'll have a text
area underneath this.

168
00:11:58.618 --> 00:12:04.796
&gt;&gt; Brian Holt: Placeholder = message,

169
00:12:04.796 --> 00:12:09.855
and name = message.

170
00:12:09.855 --> 00:12:12.129
And that's good for that, and

171
00:12:12.129 --> 00:12:17.651
then we just want a button at the end
that says, submit, button&gt;Submit.

172
00:12:17.651 --> 00:12:23.517
If you really wanna get explicit here,
you can say, type="submit",

173
00:12:23.517 --> 00:12:28.542
but you don't need to,
that's implicit on buttons, right?

174
00:12:28.542 --> 00:12:30.068
But whatever, that's up to you.

175
00:12:35.029 --> 00:12:41.574
&gt;&gt; Brian Holt: And cool, all right, I
think this is pretty close to good to go.

176
00:12:41.574 --> 00:12:43.318
Just refresh the page here.

177
00:12:43.318 --> 00:12:47.028
We'll go to Padre Gino's, contact us,

178
00:12:47.028 --> 00:12:52.117
nice looking little contact
form we've built out here.

179
00:12:52.117 --> 00:12:59.522
So we're gonna put Brian,
we'll put brian@example.com.

180
00:12:59.522 --> 00:13:04.071
And why do you have

181
00:13:04.071 --> 00:13:09.536
snake-fish pizza?

182
00:13:11.541 --> 00:13:12.203
&gt;&gt; Brian Holt: This is disturbing.

183
00:13:17.048 --> 00:13:19.480
&gt;&gt; Brian Holt: This is
probably from the FBI.

184
00:13:19.480 --> 00:13:24.053
So we should be able to submit this now,
submitted.

185
00:13:24.053 --> 00:13:29.061
And if we go look at your,
you can see right there,

186
00:13:29.061 --> 00:13:33.371
this is now being logged
in our API server.

187
00:13:33.371 --> 00:13:37.226
And like all customer contact forms,
it just gets logged then ignored.

188
00:13:37.226 --> 00:13:40.171
[LAUGH] But the point being here is, one,

189
00:13:40.171 --> 00:13:44.860
we did the mutation with TanStack Query,
which is pretty cool.

190
00:13:44.860 --> 00:13:49.663
And we also did uncontrolled forms, which
I'm gonna say, there's no reason that we

191
00:13:49.663 --> 00:13:53.867
would need to necessarily keep track
of everything in a hook here, right,

192
00:13:53.867 --> 00:13:57.469
cuz we're not doing anything
that's kind of reactive to that,

193
00:13:57.469 --> 00:14:00.028
we're not doing any sort of type ahead,
or.

194
00:14:00.028 --> 00:14:02.827
In the previous course,
I did one with pet adoption.

195
00:14:02.827 --> 00:14:07.666
So you would set the cat to be the type of
animal, and then you'd have to repopulate

196
00:14:07.666 --> 00:14:12.369
the breed list so it's reactive to
what's happening in the first drop-down,

197
00:14:12.369 --> 00:14:15.134
also known as the double
drop-down problem.

198
00:14:15.134 --> 00:14:15.653
That one,

199
00:14:15.653 --> 00:14:19.640
you have to do a controlled form because
you have to react to the first one, right?

200
00:14:19.640 --> 00:14:23.810
You have to repopulate the breed drop-down
list based on what's in the first

201
00:14:23.810 --> 00:14:24.589
drop-down.

202
00:14:24.589 --> 00:14:27.109
But this one, you're just gathering
all the form data and you're

203
00:14:27.109 --> 00:14:29.818
submitting it somewhere, uncontrolled
form is how you wanna do that.

