WEBVTT

1
00:00:00.000 --> 00:00:05.309
&gt;&gt; Brian Holt: Past.lazy.jsx,
at the top here.

2
00:00:05.309 --> 00:00:10.074
So we're gonna import another one

3
00:00:10.074 --> 00:00:15.003
up here called getPastOrder with no

4
00:00:15.003 --> 00:00:19.943
S from ../api/getPastOrder.

5
00:00:21.144 --> 00:00:23.188
We'll go code that up in just a second.

6
00:00:26.171 --> 00:00:28.215
&gt;&gt; Brian Holt: And
then we're gonna import our modal as well.

7
00:00:28.215 --> 00:00:35.699
Import Modal from ../Modal,
cool, all right.

8
00:00:37.805 --> 00:00:38.986
&gt;&gt; Brian Holt: Everyone's favorite,

9
00:00:38.986 --> 00:00:41.634
we're going to make another
currency converter here.

10
00:00:45.398 --> 00:00:50.784
&gt;&gt; Brian Holt: NumberFormat en-US,

11
00:00:50.784 --> 00:00:56.174
and style is currency.

12
00:00:56.174 --> 00:00:58.481
&gt;&gt; Speaker 1: Would you just
put that in the utility?

13
00:00:58.481 --> 00:01:01.085
&gt;&gt; Brian Holt: Yeah, no, I think this
is the fourth time we've done it.

14
00:01:01.085 --> 00:01:02.978
I'm already regretting my decisions.

15
00:01:02.978 --> 00:01:04.641
All right, we're just doing it,
all right fine.

16
00:01:04.641 --> 00:01:09.775
[LAUGH] We'll just do it,

17
00:01:09.775 --> 00:01:14.178
useCurrency.jsx.

18
00:01:14.178 --> 00:01:16.831
Don't say I never did anything for you.

19
00:01:16.831 --> 00:01:22.729
Export default function useCurrency.

20
00:01:22.729 --> 00:01:24.831
This is gonna take in some sort of price.

21
00:01:26.421 --> 00:01:29.453
We're gonna have that all that stupid
stuff we keep writing over and

22
00:01:29.453 --> 00:01:31.803
over again that everyone
keeps complaining about.

23
00:01:34.590 --> 00:01:38.871
&gt;&gt; Brian Holt: .NumberFormat en-US.

24
00:01:40.041 --> 00:01:44.457
It's gonna be style

25
00:01:44.457 --> 00:01:49.923
currency currency USD.

26
00:01:49.923 --> 00:01:57.949
And we're really just going
to return intl.format.

27
00:01:57.949 --> 00:01:59.153
Is it format to price?

28
00:01:59.153 --> 00:02:03.355
What is that, I gotta remember exactly.

29
00:02:03.355 --> 00:02:04.224
It's just format.

30
00:02:04.224 --> 00:02:11.195
Okay, format, price, okay?

31
00:02:11.195 --> 00:02:15.287
Now instead of doing it this way,

32
00:02:15.287 --> 00:02:22.023
we can say instead of here,
we can dump that business.

33
00:02:22.023 --> 00:02:26.753
And our price is going to be

34
00:02:26.753 --> 00:02:33.213
something like const price = use.

35
00:02:33.213 --> 00:02:34.275
What did I call it?

36
00:02:39.036 --> 00:02:39.921
&gt;&gt; Brian Holt: UseCurrencies,
is that what it's called?

37
00:02:39.921 --> 00:02:41.227
&gt;&gt; Speaker 1: Yeah, it's that.

38
00:02:41.227 --> 00:02:42.017
&gt;&gt; Brian Holt: Yeah, cool.

39
00:02:44.349 --> 00:02:48.748
&gt;&gt; Brian Holt: UseCurrency and
I mean this is gonna be a little bit hairy

40
00:02:48.748 --> 00:02:53.255
now because I actually have
this inside of a map, right?

41
00:02:54.505 --> 00:02:58.482
In theory you shouldn't
use hooks that way, but

42
00:02:58.482 --> 00:03:02.362
you'd be able to say like 15.10 here, and

43
00:03:02.362 --> 00:03:06.252
now price would be
a properly formatted price.

44
00:03:08.022 --> 00:03:11.472
So in this case, it's actually probably
not gonna be useful because we can't use

45
00:03:11.472 --> 00:03:12.582
it inside of our map here.

46
00:03:14.432 --> 00:03:17.674
So instead of making this a hook, probably
what you would do is you would just say

47
00:03:22.605 --> 00:03:31.993
&gt;&gt; Brian Holt: const priceConverter =

48
00:03:41.010 --> 00:03:43.997
&gt;&gt; Brian Holt: And then we'll say

49
00:03:43.997 --> 00:03:47.733
intl.format price.

50
00:03:47.733 --> 00:03:49.513
So I guess this is exactly the same thing.

51
00:03:49.513 --> 00:03:52.112
It's just not a hook, right?

52
00:03:52.112 --> 00:03:56.192
Is that the hook return the just I-N-T-L,
right, and

53
00:03:56.192 --> 00:03:59.682
then Yeah, and
then you could just have this.

54
00:03:59.682 --> 00:04:00.963
Here's the scone flow.

55
00:04:06.027 --> 00:04:07.204
&gt;&gt; Brian Holt: Something like that, and

56
00:04:07.204 --> 00:04:09.353
then now you kind of cover
both ways of doing it.

57
00:04:12.897 --> 00:04:15.927
&gt;&gt; Brian Holt: All right,
now inside of past.lazy.jsx,

58
00:04:15.927 --> 00:04:19.205
we can instead of getting
the useCurrency here.

59
00:04:19.205 --> 00:04:24.095
We can also get the priceConverter and
then this actually will be useful to us.

60
00:04:24.095 --> 00:04:30.075
So we're gonna make another hook up here,
which is focusedOrder.

61
00:04:32.585 --> 00:04:37.035
So if a user clicks on one of the orders,
we want them to pop up with the modal and

62
00:04:37.035 --> 00:04:40.593
see the details of that
particular past order.

63
00:04:40.593 --> 00:04:43.142
So that's what
the focusedOrder is gonna be.

64
00:04:47.241 --> 00:04:50.113
&gt;&gt; Brian Holt: UseState, again,
you can put anything here.

65
00:04:50.113 --> 00:04:52.773
I just have this as empty,
which is gonna be undefined.

66
00:04:52.773 --> 00:04:55.653
So focusedOrder is not gonna have
anything to it to begin with.

67
00:04:57.945 --> 00:05:01.500
But feel free to put null or
whatever you want there.

68
00:05:06.592 --> 00:05:07.965
&gt;&gt; Brian Holt: This is kind of a cool one.

69
00:05:07.965 --> 00:05:11.803
All right, so we're gonna do
another query here from TanStack.

70
00:05:11.803 --> 00:05:18.038
So const isLoading.

71
00:05:18.038 --> 00:05:21.286
We have to call this something else
because isloading already exists here.

72
00:05:21.286 --> 00:05:25.655
So we have to call this something
like isloadingPastOrder.

73
00:05:28.818 --> 00:05:31.555
&gt;&gt; Brian Holt: That's all this is doing is
just renaming it to a different variable.

74
00:05:33.995 --> 00:05:39.632
And data again is gonna be pastOrderData,
okay?

75
00:05:39.632 --> 00:05:45.471
And that's gonna be equal to useQuery.

76
00:05:45.471 --> 00:05:48.953
What's our query key gonna be?

77
00:05:48.953 --> 00:05:50.884
It's got to be unique to
this particular order.

78
00:05:51.934 --> 00:05:55.266
So it's gonna be pastOrder, and

79
00:05:55.266 --> 00:05:59.907
we have to give it some
unique kind of key to it,

80
00:05:59.907 --> 00:06:04.080
kind of like the keys
that we use in React.

81
00:06:05.720 --> 00:06:09.307
Well, focusedOrder itself we know this
is gonna be unique to that particular

82
00:06:09.307 --> 00:06:11.690
focusedOrder, so
we can use that as the query key.

83
00:06:15.682 --> 00:06:21.706
&gt;&gt; Brian Holt: Okay, queryFunction,
it's just gonna be getPastOrder,

84
00:06:21.706 --> 00:06:27.739
that one that we just imported
that we haven't written yet.

85
00:06:27.739 --> 00:06:29.950
And it's gonna be focusedOrder.

86
00:06:34.574 --> 00:06:35.753
&gt;&gt; Brian Holt: StaleTime.

87
00:06:38.999 --> 00:06:42.043
&gt;&gt; Brian Holt: Now something
I said earlier in the course,

88
00:06:42.043 --> 00:06:43.990
I did not use AI anywhere.

89
00:06:43.990 --> 00:06:47.839
I'll confess I actually did use it here
cuz I wanted to find out how many seconds

90
00:06:47.839 --> 00:06:50.950
are in a day, cuz I didn't wanna
do that math off top of my head.

91
00:06:50.950 --> 00:06:56.257
So I said staleTime should be

92
00:06:56.257 --> 00:07:01.127
one day in milliseconds.

93
00:07:08.869 --> 00:07:12.435
&gt;&gt; Brian Holt: So that is one place I
did use it cuz I couldn't be bothered

94
00:07:12.435 --> 00:07:14.605
to google it, that sounded hard.

95
00:07:20.721 --> 00:07:21.444
&gt;&gt; Brian Holt: All right,

96
00:07:21.444 --> 00:07:26.432
we do have one weird problem that you're
probably catching on to here, which is,

97
00:07:26.432 --> 00:07:31.699
wait I don't have a focusedOrder
if there's no focusedOrder, right?

98
00:07:31.699 --> 00:07:34.639
What happens if this runs on
the first page right now?

99
00:07:34.639 --> 00:07:37.623
It's gonna go try and
request a focusedOrder for

100
00:07:37.623 --> 00:07:39.889
something that doesn't exist yet.

101
00:07:40.979 --> 00:07:42.519
So how do we prevent it from doing that?

102
00:07:43.519 --> 00:07:46.579
We only wanna request something
if there is a focusedOrder.

103
00:07:46.579 --> 00:07:50.419
And if there's not a focusedOrder,
then we don't want to, right?

104
00:07:50.419 --> 00:07:53.146
That make sense?

105
00:07:53.146 --> 00:07:55.536
Well, turns out they thought of that.

106
00:07:55.536 --> 00:07:57.131
That's kinda cool.

107
00:07:57.131 --> 00:08:02.466
You just put in this enabled, and
if there is a focusedOrder, then

108
00:08:02.466 --> 00:08:08.391
you you will go out and grab something and
if there's not then you won't.

109
00:08:10.161 --> 00:08:12.347
So you'll see my note here I
have a double exclamation point.

110
00:08:12.347 --> 00:08:16.536
It's not that I'm just
excited about focused orders.

111
00:08:16.536 --> 00:08:22.304
We've all seen if or
something like this if loading, right?

112
00:08:22.304 --> 00:08:24.348
This means not loading, right?

113
00:08:25.428 --> 00:08:29.258
This also has the fascinating feature
of turning this into a Boolean, right?

114
00:08:29.258 --> 00:08:31.258
So this is actually literally false,
right?

115
00:08:32.298 --> 00:08:38.716
So not loading is triple equal to false or
true if it is, right?

116
00:08:38.716 --> 00:08:42.727
So what happens if I do not not loading?

117
00:08:44.637 --> 00:08:48.577
It's just it's the same thing, but
it's turned into a Boolean, right?

118
00:08:48.577 --> 00:08:51.127
So this is going to be either true or
false.

119
00:08:52.897 --> 00:08:55.867
That's what the double
exclamation point means.

120
00:08:55.867 --> 00:09:00.768
I do it, I understand that it's
kind of like a little opaque,

121
00:09:00.768 --> 00:09:05.499
but it's common enough in coding
that I just keep doing it.

122
00:09:05.499 --> 00:09:08.081
I don't think it's actually
even technically necessary.

123
00:09:08.081 --> 00:09:12.942
I think this is just fine, but
that's why that's in there in my notes.

124
00:09:12.942 --> 00:09:13.811
Does that make sense?

125
00:09:14.904 --> 00:09:17.926
&gt;&gt; Speaker 2: To put it another way,
is it avoiding truthiness or

126
00:09:17.926 --> 00:09:21.214
implied truthiness and
forcing like a full Boolean?

127
00:09:21.214 --> 00:09:25.675
&gt;&gt; Brian Holt: Yes exactly, it's doing
the type coercion right here, right,

128
00:09:25.675 --> 00:09:28.686
as opposed to letting
TanStack query do it.

