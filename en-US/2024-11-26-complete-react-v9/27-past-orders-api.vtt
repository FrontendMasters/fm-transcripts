WEBVTT

1
00:00:00.241 --> 00:00:05.321
&gt;&gt; Brian Holt: Inside of our directory
here, inside of our source directory

2
00:00:05.321 --> 00:00:09.921
outside of routes,
create another folder called API.

3
00:00:09.921 --> 00:00:13.990
This is just something I do,
not even just a React specific thing,

4
00:00:13.990 --> 00:00:16.472
this is just kind of across many things.

5
00:00:16.472 --> 00:00:21.551
I write my API request is just little
individual functions and then I'll

6
00:00:21.551 --> 00:00:27.062
import those to be used later and that
works really well with temp stack query.

7
00:00:27.062 --> 00:00:30.749
You don't have to do it this way I'm
just gonna show you the way that I would

8
00:00:30.749 --> 00:00:32.725
typically go about structuring this.

9
00:00:32.725 --> 00:00:37.279
So inside of this, make a file and

10
00:00:37.279 --> 00:00:43.145
call it getPastOrders and call it dot JSX.

11
00:00:43.145 --> 00:00:46.616
I think in my notes I have a dot JS we'll
just stick with that, doesn't matter.

12
00:00:46.616 --> 00:00:52.872
Export default,
async function getPastOrders, and

13
00:00:52.872 --> 00:00:58.315
it takes in a page cuz it's paginated,
right?

14
00:00:58.315 --> 00:01:04.602
Const response equals await fetch,

15
00:01:04.602 --> 00:01:10.075
and then this is gonna go to slash

16
00:01:10.075 --> 00:01:14.537
API slash past-orders,

17
00:01:14.537 --> 00:01:18.203
page, equals page.

18
00:01:18.203 --> 00:01:23.045
This is a template string, so make sure
using back ticks here which is the one

19
00:01:23.045 --> 00:01:26.740
next to the one on
the same key as the tilde.

20
00:01:26.740 --> 00:01:30.945
&gt;&gt; Brian Holt: And then this will put
in the page whatever we got there.

21
00:01:30.945 --> 00:01:36.393
And then we will say const data equals

22
00:01:36.393 --> 00:01:42.729
await response.json and return, data.

23
00:01:42.729 --> 00:01:46.211
Fairly straightforward here,
it's gonna go out to the API.

24
00:01:46.211 --> 00:01:49.338
You're gonna give it a page,
it's gonna call past-orders,

25
00:01:49.338 --> 00:01:50.701
it's gonna give it a page.

26
00:01:50.701 --> 00:01:53.158
And then you are gonna
get data back from this.

27
00:01:53.158 --> 00:01:57.814
So it's just gonna be a promise
that eventually gives you back

28
00:01:57.814 --> 00:02:00.416
past-order data based on a page.

29
00:02:02.487 --> 00:02:09.502
&gt;&gt; Brian Holt: Okay, cool,
let us go back to past dot lazy, dot JSX.

30
00:02:11.223 --> 00:02:15.086
&gt;&gt; Brian Holt: Yeah, one thing I was gonna
say about the getPastOrders function here,

31
00:02:15.086 --> 00:02:17.302
we're gonna use it with Tanstack Query,

32
00:02:17.302 --> 00:02:20.106
but obviously you could use this anywhere,
right?

33
00:02:20.106 --> 00:02:21.911
This doesn't have to be
used with Tanstack Query.

34
00:02:21.911 --> 00:02:25.511
This could be used in an effect, right?

35
00:02:25.511 --> 00:02:28.260
Or in your testing, or
whatever you want, right?

36
00:02:28.260 --> 00:02:31.461
It's nice to encapsulate the logic and
kind of small,

37
00:02:31.461 --> 00:02:35.302
reusable pieces of information there,
past dot lazy, dot JSX.

38
00:02:35.302 --> 00:02:38.813
Let's go make this component here.

39
00:02:38.813 --> 00:02:45.989
So make a function down here,
to be called PastOrdersRoute,

40
00:02:45.989 --> 00:02:52.757
and I'm gonna call this just
PastOrdersRoute like that.

41
00:02:54.333 --> 00:02:57.501
&gt;&gt; Brian Holt: This one, I'm a little bit
more like having the named function here,

42
00:02:57.501 --> 00:03:00.469
which is why I'm not just putting
it directly here in component.

43
00:03:00.469 --> 00:03:05.671
Having what page it happened on in your
stack trace tends to be more useful,

44
00:03:05.671 --> 00:03:07.166
more often than not.

45
00:03:07.166 --> 00:03:10.287
Up here, we're gonna import useState,

46
00:03:10.287 --> 00:03:15.824
which we're gonna use to encapsulate
the page that we're on from React.

47
00:03:15.824 --> 00:03:21.088
We're gonna import this wonderful
new hook called useQuery,

48
00:03:21.088 --> 00:03:24.076
from @tanstack/react-query.

49
00:03:26.279 --> 00:03:32.887
&gt;&gt; Brian Holt: And we're gonna import,
&gt;&gt; Brian Holt: GetPastOrders

50
00:03:32.887 --> 00:03:34.891
from API getPastOrders.

51
00:03:38.029 --> 00:03:40.667
&gt;&gt; Brian Holt: Okay,
let's take care of that,

52
00:03:40.667 --> 00:03:43.979
we're gonna get a hook here for the page.

53
00:03:43.979 --> 00:03:48.420
Page setPage that should look
familiar to you, equals useState,

54
00:03:48.420 --> 00:03:50.656
and we will start them on page 1.

55
00:03:54.689 --> 00:04:00.189
&gt;&gt; Brian Holt: And const is loading and

56
00:04:00.189 --> 00:04:06.244
data, equals useQuery.

57
00:04:06.244 --> 00:04:12.300
So a couple of things here,
we have to give it a queryKey.

58
00:04:13.657 --> 00:04:15.644
&gt;&gt; Brian Holt: This is an array,
and it's like,

59
00:04:15.644 --> 00:04:18.187
how many of you have
ever used Redis before?

60
00:04:18.187 --> 00:04:19.775
Probably asking the wrong crowd here.

61
00:04:19.775 --> 00:04:24.386
[LAUGH] But Redis much functions the same
way that you kind of give out these

62
00:04:24.386 --> 00:04:28.253
queryKeys, and
it's how it stores it in the cache, right?

63
00:04:28.253 --> 00:04:32.672
And then later, you can say hey,
I'm looking for the past-orders, and

64
00:04:32.672 --> 00:04:35.104
then I'm looking for the page, right?

65
00:04:35.104 --> 00:04:38.960
This is a unique thing to this query so
that it knows later when it goes, hey,

66
00:04:38.960 --> 00:04:42.157
I'm looking for past-orders page two,
it's gonna be like,

67
00:04:42.157 --> 00:04:46.475
I have seen that before, here you go, or I
have never seen this before, here you go.

68
00:04:46.475 --> 00:04:51.359
Or another thing you can say, I've seen
this before, but my cache is stale,

69
00:04:51.359 --> 00:04:53.781
so I'm gonna go get it again, right?

70
00:04:53.781 --> 00:05:01.155
That's what this queryKey is for, it's for
the name of the key in the cache.

71
00:05:01.155 --> 00:05:04.242
And if you're interested in Redis,
Redis works a lot the same way.

72
00:05:06.902 --> 00:05:11.191
&gt;&gt; Brian Holt: Okay,
you're gonna give it a query function, and

73
00:05:11.191 --> 00:05:17.795
you're just gonna say, all right,
give me back, getPastOrders with page.

74
00:05:21.563 --> 00:05:29.138
&gt;&gt; Brian Holt: And then staleTime,
I think I gave it a 30-second staleTime.

75
00:05:29.138 --> 00:05:30.768
Why such a short staleTime?

76
00:05:30.768 --> 00:05:33.146
This is in milliseconds by the way,
that's why it's 30,000.

77
00:05:33.146 --> 00:05:37.928
All right, so imagine your pizza here and
you are looking at past-orders,

78
00:05:37.928 --> 00:05:40.779
and this is how you put
your orders together.

79
00:05:40.779 --> 00:05:43.141
You want it to be pretty up to date,
right?

80
00:05:43.141 --> 00:05:46.982
Because you wanna see the piece of
the orders as they're rolling in.

81
00:05:46.982 --> 00:05:52.276
So I had it expiring every 30 seconds,
so that you can always be guaranteed

82
00:05:52.276 --> 00:05:57.422
every 30 seconds you're getting
a fresh pun in kind of intended there.

83
00:05:57.422 --> 00:05:59.843
Look at the pizzas, right?

84
00:05:59.843 --> 00:06:02.026
But if you're going back and
forth a bunch of times,

85
00:06:02.026 --> 00:06:03.973
you don't wanna just hammer the API,
right?

86
00:06:03.973 --> 00:06:07.667
So it makes sense that you would have
a little bit of cache time there.

87
00:06:07.667 --> 00:06:12.382
So 30 seconds felt right to me, but
this is how you would adjust it, right?

88
00:06:12.382 --> 00:06:16.583
There's other things, in fact,
one of them that we're gonna about to do,

89
00:06:16.583 --> 00:06:20.982
we're gonna cache for a whole day because
the past-orders don't change, and

90
00:06:20.982 --> 00:06:23.831
we don't really need to
refresh those very often.

91
00:06:23.831 --> 00:06:28.979
So it all depends on your needs, caching
in general is just kind of is hard,

92
00:06:28.979 --> 00:06:33.081
it's hard to figure out how
long things should be good for.

93
00:06:33.081 --> 00:06:36.729
So kind of a guess and
check kind of situation.

94
00:06:36.729 --> 00:06:37.847
If I had to guess,

95
00:06:37.847 --> 00:06:42.487
most major bugs throughout my career
have been caused by caching issues.

96
00:06:42.487 --> 00:06:44.817
Is that fair to say?

97
00:06:44.817 --> 00:06:46.292
I think that's pretty fair to say.

98
00:06:46.292 --> 00:06:53.095
All right, so if isLoading, this is
another nice thing about React Query.

99
00:06:53.095 --> 00:06:57.367
There's a bunch of them,
there's like isSuccess, isFetched,

100
00:06:57.367 --> 00:07:01.259
isLoading, isPaused,
isPending, isPlaceholderData,

101
00:07:01.259 --> 00:07:05.552
isRefetchError, they give you
a bunch of different things here.

102
00:07:05.552 --> 00:07:08.073
You can also just grab the status I think,

103
00:07:08.073 --> 00:07:12.048
this is an enumerated type as
opposed to being a Boolean, right?

104
00:07:12.048 --> 00:07:13.256
So you can also use that as well.

105
00:07:13.256 --> 00:07:16.670
If David Khourshid was here,
the guy that does,

106
00:07:16.670 --> 00:07:20.849
X State to be very happy that
you could make a state machine.

107
00:07:20.849 --> 00:07:24.014
I am not gonna make a state
machine because I'm not a nerd.

108
00:07:24.014 --> 00:07:27.630
That's not true, I am a nerd,
he's probably less nerdy than I am.

109
00:07:27.630 --> 00:07:31.091
But, whatever fight me,
David, that's fine.

110
00:07:31.091 --> 00:07:37.225
So if isLoading,
&gt;&gt; Brian Holt: Return,

111
00:07:37.225 --> 00:07:44.384
div className equals past-orders.

112
00:07:45.396 --> 00:07:47.697
&gt;&gt; Brian Holt: And
we're gonna have, again,

113
00:07:47.697 --> 00:07:51.627
my very,
very user experience focused loading here.

114
00:07:51.627 --> 00:07:53.310
I hope you get that,
I'm being facetious here.

115
00:07:53.310 --> 00:07:56.874
You should have a much better loading
state than just returning loading here.

116
00:07:56.874 --> 00:08:00.534
But I didn't wanna spend half of
our time building loading pages, so

117
00:08:00.534 --> 00:08:02.247
that's why we're doing this.

118
00:08:02.247 --> 00:08:05.420
Please, care more about your users than
I care about you, no, I'm just kidding.

119
00:08:05.420 --> 00:08:07.922
[LAUGH] That's a joke.

120
00:08:07.922 --> 00:08:10.747
I do care deeply about each and
every one of you.

121
00:08:13.870 --> 00:08:15.419
&gt;&gt; Brian Holt: I woke up and
chose violence today.

122
00:08:15.419 --> 00:08:17.621
Okay, here we go, return.

123
00:08:17.621 --> 00:08:22.014
So if it's not loading, then we can assume
that our past-orders have loaded and

124
00:08:22.014 --> 00:08:25.708
we can just make a nice little table
here of all of our past-orders.

125
00:08:25.708 --> 00:08:28.876
Feel free to just go into there and
just copy all of the markup here, but

126
00:08:28.876 --> 00:08:32.380
I'm gonna write it here by hand if you
wanna follow along, that's cool too.

127
00:08:32.380 --> 00:08:36.866
We've had no problems with me forgetting
divs or anything like that, so

128
00:08:36.866 --> 00:08:40.935
I'm very confident this
time will be no different.

129
00:08:40.935 --> 00:08:45.436
&gt;&gt; Brian Holt: Table,
thead fed, as I like to say.

130
00:08:48.621 --> 00:08:53.293
&gt;&gt; Brian Holt: Table row,
table definition ID.

131
00:08:53.293 --> 00:08:57.691
So these are our head rows, this is an ID,

132
00:08:57.691 --> 00:09:01.734
this is a date, this is a time, okay?

133
00:09:01.734 --> 00:09:06.067
And then out of the fed there's
the body as, it is said.

134
00:09:10.601 --> 00:09:15.135
&gt;&gt; Brian Holt: Then,
we're gonna say data, we're gonna get map

135
00:09:15.135 --> 00:09:19.891
across our data and
make those into, rows map order.

136
00:09:23.728 --> 00:09:26.513
&gt;&gt; Brian Holt: You can make this
into the return blah, right?

137
00:09:26.513 --> 00:09:31.490
And use curly braces there, but because
I'm lazy, if you use parentheses here,

138
00:09:31.490 --> 00:09:33.522
you can use the implicit return.

139
00:09:33.522 --> 00:09:36.670
I think I've used that here previously,
but we're gonna do that again here.

140
00:09:36.670 --> 00:09:40.326
That's why this is a parentheses
instead of a curly brace.

141
00:09:44.072 --> 00:09:44.750
&gt;&gt; Brian Holt: And in this case,

142
00:09:44.750 --> 00:09:47.832
in case you're wondering, the parentheses
in itself, doesn't do anything,

143
00:09:47.832 --> 00:09:49.712
it just means continued on the next row,
right?

144
00:09:49.712 --> 00:09:51.851
That's why the parentheses
ends up being put here.

145
00:09:54.187 --> 00:09:57.379
&gt;&gt; Brian Holt: You definitely could do
something, just put the thing directly on

146
00:09:57.379 --> 00:10:00.582
the same row, but this looks nicer,
just so we'll do it this way.

147
00:10:00.582 --> 00:10:04.837
All right, tr, we have to give the key.

148
00:10:08.626 --> 00:10:11.198
&gt;&gt; Brian Holt: And a good key for
this is order, order ID,

149
00:10:15.643 --> 00:10:19.646
&gt;&gt; Brian Holt: Okay, and then td.

150
00:10:21.568 --> 00:10:27.212
&gt;&gt; Brian Holt: We're
gonna do order.order_id,

151
00:10:27.212 --> 00:10:29.947
couple of those.

152
00:10:29.947 --> 00:10:32.704
Next one will be date,
next one will be time.

153
00:10:36.809 --> 00:10:40.165
&gt;&gt; Brian Holt: Okay, that should
give us our rows and our tables.

154
00:10:40.165 --> 00:10:45.246
So outside of the tbody and
the table, we're gonna have

155
00:10:45.246 --> 00:10:49.907
another div here and
this is gonna be called pages.

156
00:10:51.091 --> 00:10:54.252
&gt;&gt; Brian Holt: And we're just gonna
give some basic pagination buttons here.

157
00:10:54.252 --> 00:11:01.685
So button disabled equals
page is greater than or

158
00:11:01.685 --> 00:11:05.684
less than and equal to 1.

159
00:11:05.684 --> 00:11:10.718
So again, this is just my font
combining the two into one thing,

160
00:11:10.718 --> 00:11:13.434
but it's less than or equal to 1.

161
00:11:16.002 --> 00:11:21.027
&gt;&gt; Brian Holt: Okay,
onClick equals setPage,

162
00:11:21.027 --> 00:11:28.210
that's a function, setPage, page minus 1.

163
00:11:31.399 --> 00:11:36.370
&gt;&gt; Brian Holt: And we'll put previous
here, and then the next one looks really

164
00:11:36.370 --> 00:11:41.446
similar, so I'm just gonna copy and
paste the whole block here.

165
00:11:41.446 --> 00:11:46.071
So the disabled, I know these come in
lengths of 10, and I didn't wanna make

166
00:11:46.071 --> 00:11:50.925
the API any more complicated than this,
so I said data.length is less than 10.

167
00:11:50.925 --> 00:11:55.135
Because if it returns eight results,
you've reached the end, right?

168
00:11:55.135 --> 00:11:58.488
The only problem is,
what if there's exactly ten left?

169
00:11:58.488 --> 00:12:02.532
You're gonna get a page of zero after
that, again, phenomenal user experience.

170
00:12:02.532 --> 00:12:06.763
You should definitely listen to me and
hire me to consult at your company.

171
00:12:06.763 --> 00:12:08.210
That's a joke, that's a terrible idea.

172
00:12:08.210 --> 00:12:13.566
But this is what we are doing,
so this should be minus 1 here,

173
00:12:13.566 --> 00:12:17.382
so there should be
a space here on line 46.

174
00:12:17.382 --> 00:12:23.949
And as the same here, there should be
a plus 1, there should be a space there.

175
00:12:23.949 --> 00:12:26.889
&gt;&gt; Brian Holt: And then we, instead of
previous here, we're gonna have next.

176
00:12:31.247 --> 00:12:35.766
&gt;&gt; Brian Holt: There's some thousands
of orders in the database, so

177
00:12:35.766 --> 00:12:41.474
unless you're very bored,
want to page through all of them one day.

178
00:12:41.474 --> 00:12:44.254
I don't think many people
are gonna find the end of this and

179
00:12:44.254 --> 00:12:46.478
discover what a terrible
experience this is.

180
00:12:46.478 --> 00:12:51.894
I think that should be enough for
us to see if it works.

181
00:12:51.894 --> 00:12:56.148
So past-orders,
we made this button previously,

182
00:12:56.148 --> 00:13:00.121
so I think if we click on that,
it's gonna load.

183
00:13:03.708 --> 00:13:05.857
&gt;&gt; Brian Holt: It did okay, cool.

184
00:13:05.857 --> 00:13:12.282
So you can see here, throughout the course
here, I've submitted two orders here,

185
00:13:12.282 --> 00:13:16.731
which is pretty cool cuz you
can see those are in 2024.

186
00:13:16.731 --> 00:13:20.305
I grabbed a dataset off of Kaggle for
pizza orders,

187
00:13:20.305 --> 00:13:23.226
that's why all these are from 2015.

188
00:13:23.226 --> 00:13:25.007
We're not time traveling
in the past right now.

189
00:13:25.007 --> 00:13:28.796
And you're like,
how is he talking about React 18 and 2015?

190
00:13:28.796 --> 00:13:31.047
It's cuz I knew, I'm just kidding.

191
00:13:31.047 --> 00:13:38.308
There you go, so
you can see these are taking a while.

192
00:13:38.308 --> 00:13:41.038
Did I leave that,
let's just check in my API,

193
00:13:41.038 --> 00:13:44.691
I think I might've left the weight
in there, that's funny.

194
00:13:44.691 --> 00:13:50.438
All right, but now, if I hit previous,
what's gonna happen?

195
00:13:50.438 --> 00:13:54.861
Notice that these loads are instant
between these two that I've loaded before.

196
00:13:54.861 --> 00:14:01.567
But if I hit Next again, it's gonna load
it again, so it's going back to the API.

197
00:14:01.567 --> 00:14:04.408
Yeah, I think I put artificial
delay into this API so

198
00:14:04.408 --> 00:14:06.617
that people could tell the difference.

199
00:14:06.617 --> 00:14:10.232
But now look at your open,
your TanStack dev tools,

200
00:14:10.232 --> 00:14:12.622
you can see these being used here.

201
00:14:12.622 --> 00:14:17.451
So if I do next, it's gonna show
you things I have in my cache here,

202
00:14:17.451 --> 00:14:20.661
and that it's gonna go out and
get this one.

203
00:14:20.661 --> 00:14:27.173
You can click on that, I think,
and you can see what the key is.

204
00:14:27.173 --> 00:14:31.229
This only has one observer, but if you had
a bunch of things that were looking at

205
00:14:31.229 --> 00:14:33.764
these cache keys,
it would look at that as well.

206
00:14:33.764 --> 00:14:37.350
And you can see what it came back with,
the actual data, right?

207
00:14:37.350 --> 00:14:43.365
The order ID, date, time,
all sorts of really cool stuff.

208
00:14:43.365 --> 00:14:46.701
Pretty useful, I use the DevTools for
this one somewhat frequently.

