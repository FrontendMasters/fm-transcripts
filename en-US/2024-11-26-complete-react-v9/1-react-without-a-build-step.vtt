WEBVTT

1
00:00:00.000 --> 00:00:03.759
&gt;&gt; Brian Holt: Let's hop in and
start writing some React so

2
00:00:03.759 --> 00:00:07.526
that we can eventually make Padre Gino's.

3
00:00:07.526 --> 00:00:10.825
So you can see here, I'm in my
complete intro to React V9 project.

4
00:00:10.825 --> 00:00:14.284
The way I'm gonna do this is I'm just
gonna make a new directory in here,

5
00:00:14.284 --> 00:00:17.018
and I'm just gonna start
working out of that directory.

6
00:00:17.018 --> 00:00:19.365
I think that's just gonna
be the easiest for me.

7
00:00:19.365 --> 00:00:22.884
Yeah, let's do that.

8
00:00:22.884 --> 00:00:30.070
We'll just called Padre Gino's,
cuz that's what we're gonna make, okay?

9
00:00:30.070 --> 00:00:32.594
And then I'm gonna open
this in my VS Code editor.

10
00:00:32.594 --> 00:00:37.929
So Padre Gino's, empty directory.

11
00:00:37.929 --> 00:00:40.277
We're gonna make a index.html.

12
00:00:45.384 --> 00:00:51.529
&gt;&gt; Brian Holt: Okay, and we're gonna
start building React with no build step.

13
00:00:51.529 --> 00:00:56.314
So we're gonna write React the way that
I don't know of anyone that actually

14
00:00:56.314 --> 00:00:58.781
writes React without a build step, but

15
00:00:58.781 --> 00:01:02.167
I wanna show you that it is
actually indeed possible.

16
00:01:02.167 --> 00:01:09.139
So one of my favorite cheat codes in
VS Code is that there's Emmet built in.

17
00:01:09.139 --> 00:01:13.496
So I can just say, html:5, and
then I can just hit Tab, and

18
00:01:13.496 --> 00:01:16.933
it just generates a valid
HTML document for me.

19
00:01:16.933 --> 00:01:19.403
So I'm gonna do that.

20
00:01:19.403 --> 00:01:21.893
And I'm gonna call this Padre Gino's.

21
00:01:27.089 --> 00:01:32.931
&gt;&gt; Brian Holt: Okay, and then I'm
gonna have a div that's gonna be root.

22
00:01:32.931 --> 00:01:35.872
And I like to put something in here
because this will get replaced.

23
00:01:35.872 --> 00:01:38.710
And so if you see not rendered on
the page, you know something went wrong.

24
00:01:41.257 --> 00:01:45.537
&gt;&gt; Brian Holt: And then we're gonna
put a couple of script tags on here.

25
00:01:45.537 --> 00:01:49.776
So we're gonna do

26
00:01:49.776 --> 00:01:54.300
script, source.

27
00:01:54.300 --> 00:01:58.954
If I were you, I would just grab these
directly from my page here cuz otherwise,

28
00:01:58.954 --> 00:02:01.326
it's really annoying to write by hand.

29
00:02:09.078 --> 00:02:14.940
&gt;&gt; Brian Holt: Unpkg was actually created
by one of the React router authors,

30
00:02:14.940 --> 00:02:20.256
and it's basically just a CDN
full of every NPM package.

31
00:02:20.256 --> 00:02:20.939
It's really nice.

32
00:02:20.939 --> 00:02:25.335
You can do things like this where you can
just load things directly off the CDN and

33
00:02:25.335 --> 00:02:29.613
get started with something off of NPM
with no build step, which is kinda fun.

34
00:02:29.613 --> 00:02:36.118
So unpkg.com,
we're getting from react18.3.1.

35
00:02:36.118 --> 00:02:40.519
Umd stands for
universal module definition, and

36
00:02:40.519 --> 00:02:44.090
we're grabbing react and react-dom.

37
00:02:44.090 --> 00:02:47.536
Just a quick note on why
there's two packages.

38
00:02:47.536 --> 00:02:54.072
React is the universal interface for
React, so things like React Native,

39
00:02:54.072 --> 00:02:59.996
React 3D, React 360,
all of those use the same React package.

40
00:02:59.996 --> 00:03:04.244
And then the actual rendering layer
underneath it that's specific

41
00:03:04.244 --> 00:03:06.637
to the browser is called React-DOM.

42
00:03:06.637 --> 00:03:08.430
So if you're ever working in a browser,

43
00:03:08.430 --> 00:03:10.501
you'll always just have
these two packages.

44
00:03:10.501 --> 00:03:15.034
If you're working in React Native, you'll
have a different React Native toolkit, but

45
00:03:15.034 --> 00:03:17.162
it'll still use the same React package.

46
00:03:17.162 --> 00:03:20.705
Okay, I'm gonna save that, and

47
00:03:20.705 --> 00:03:24.892
then I'm gonna open my terminal here.

48
00:03:24.892 --> 00:03:30.849
And we can do a fun little trick here
that I'll do, npx serve, just like that.

49
00:03:32.833 --> 00:03:36.924
&gt;&gt; Brian Holt: It'll ask you,
is it okay if I install this package, and

50
00:03:36.924 --> 00:03:38.129
you can say yes.

51
00:03:38.129 --> 00:03:42.683
And this will actually just start
serving it directly on port 3000 here,

52
00:03:42.683 --> 00:03:46.618
and you can see I'm getting
this page up on localhost:3000.

53
00:03:46.618 --> 00:03:51.348
There's a trillion ways to
run a local host server.

54
00:03:51.348 --> 00:03:53.879
This is just a very fast one using Node.

55
00:03:53.879 --> 00:04:00.018
But you could do php-s, there's a Python
one, you can run NGINX via Docker.

56
00:04:00.018 --> 00:04:04.194
You could literally just open
this directly with Cmd+O, and

57
00:04:04.194 --> 00:04:05.807
open it in the browser.

58
00:04:05.807 --> 00:04:10.092
So we have this, it's opening on our page,
it's using Serve.

59
00:04:10.092 --> 00:04:13.058
Serve is made by Vercel,
in case you were curious.

60
00:04:13.058 --> 00:04:15.723
You get some nice little server logs here,
it's kinda fun.

61
00:04:15.723 --> 00:04:17.521
We have our two script tags here.

62
00:04:17.521 --> 00:04:21.833
Unpkg from React and React-DOM.

63
00:04:21.833 --> 00:04:27.148
And the last one, we're gonna
put one more script tag on here,

64
00:04:27.148 --> 00:04:31.475
and this is just gonna
go to ./source/App.js.

65
00:04:36.002 --> 00:04:37.948
&gt;&gt; Brian Holt: As you might imagine,
we're gonna create a directory here.

66
00:04:37.948 --> 00:04:42.334
We're gonna call it src, and
we're gonna create a file in there, and

67
00:04:42.334 --> 00:04:44.262
it's gonna be called App.js.

68
00:04:44.262 --> 00:04:52.831
So inside of App.js, we're going to
create our very first React component.

69
00:04:52.831 --> 00:04:59.414
So we're gonna say, const app =,
I'm just gonna do an arrow function here.

70
00:04:59.414 --> 00:05:04.500
If you've never seen this fat arrow
before, this is my ligature combining,

71
00:05:04.500 --> 00:05:09.449
which is the font, right, combining
in equal signs and an angle bracket.

72
00:05:09.449 --> 00:05:10.796
That's what a ligature is.

73
00:05:10.796 --> 00:05:18.068
I left a note in my setup part of the
course, if you wanna know how to do that.

74
00:05:18.068 --> 00:05:23.353
&gt;&gt; Brian Holt: Okay, and
then I'm gonna return React,

75
00:05:23.353 --> 00:05:27.884
nope, not that, createElement.

76
00:05:29.942 --> 00:05:36.475
&gt;&gt; Brian Holt: Okay, and then we're
gonna put in a div, an empty object.

77
00:05:36.475 --> 00:05:40.068
You also could put an all here,
both of those are fine.

78
00:05:40.068 --> 00:05:45.533
And then another
React.createElement of an h1

79
00:05:45.533 --> 00:05:50.873
empty object, and
whatever you wanna call it.

80
00:05:50.873 --> 00:05:52.879
I'm gonna call mine Padre Gino's.

81
00:05:58.120 --> 00:06:03.262
&gt;&gt; Brian Holt: Okay, then we're gonna
go down here and say const container.

82
00:06:03.262 --> 00:06:08.407
We're gonna grab this, where did I put it?

83
00:06:08.407 --> 00:06:11.325
This one, root, right?

84
00:06:11.325 --> 00:06:15.069
So we're gonna say,
const container = document.

85
00:06:18.156 --> 00:06:24.508
&gt;&gt; Brian Holt: getElementById("root").

86
00:06:24.508 --> 00:06:27.774
Const root =

87
00:06:27.774 --> 00:06:35.399
ReactDOM.createRoot(container).

88
00:06:35.399 --> 00:06:41.913
And then we're gonna say,
root.render(React.createElement(App)).

89
00:06:52.483 --> 00:06:55.506
&gt;&gt; Brian Holt: That's it, that is your
very first React app right there.

90
00:06:55.506 --> 00:06:56.999
What do we expect to happen?

91
00:06:56.999 --> 00:06:59.186
This is my favorite question before, and

92
00:06:59.186 --> 00:07:01.570
I do this all the time
when I'm writing code.

93
00:07:01.570 --> 00:07:06.061
Before I Click Save and run and
see what happens, I always ask myself,

94
00:07:06.061 --> 00:07:09.274
what do I expect to happen
before I run over there?

95
00:07:09.274 --> 00:07:12.602
Well, I have an app thing.

96
00:07:12.602 --> 00:07:14.567
You might call it a component.

97
00:07:14.567 --> 00:07:18.819
I don't know, if you're feeling spicy,
you could call it a component.

98
00:07:18.819 --> 00:07:22.262
And it's a type of component, and

99
00:07:22.262 --> 00:07:28.096
it returns whatever the result
of this createElement is.

100
00:07:28.096 --> 00:07:31.432
I'm gonna guess that
React.createElement returns an element.

101
00:07:31.432 --> 00:07:35.584
I don't know where I got that, but
it's probably a good bet there.

102
00:07:35.584 --> 00:07:38.297
And there's gonna be a div.

103
00:07:38.297 --> 00:07:43.416
This thing, it's like attributes, so
it's probably not gonna have an ID,

104
00:07:43.416 --> 00:07:46.743
or a class, or a for, or
anything like that on it.

105
00:07:46.743 --> 00:07:48.225
And then inside of it,

106
00:07:48.225 --> 00:07:52.828
there's gonna be an H1 that's gonna
say Padre Gino's inside of it.

107
00:07:52.828 --> 00:07:58.602
This is going to be rendered inside
of the root ID div on the page.

108
00:07:58.602 --> 00:08:00.547
All right, let's go see if we're right.

109
00:08:04.458 --> 00:08:06.657
&gt;&gt; Brian Holt: Pretty cool, right?

110
00:08:06.657 --> 00:08:09.026
Let's see if we were actually correct.

111
00:08:09.026 --> 00:08:11.513
We have a div.

112
00:08:11.513 --> 00:08:13.572
Let's see if I can make these
dev tools a little bit bigger.

113
00:08:18.127 --> 00:08:20.614
&gt;&gt; Brian Holt: There's ID root there,
right?

114
00:08:20.614 --> 00:08:23.010
That's the one that we first
put on the HTML doc, and

115
00:08:23.010 --> 00:08:24.656
then there's a div inside of that.

116
00:08:24.656 --> 00:08:28.801
There's an h1 inside of that, and
there's a Padre Gino's inside of that.

117
00:08:28.801 --> 00:08:31.685
Kinda what we expected, right?

118
00:08:31.685 --> 00:08:35.742
All right, you're done,
let's call it a day.

119
00:08:35.742 --> 00:08:39.140
[LAUGH] No, I'm just kidding,

120
00:08:39.140 --> 00:08:44.770
there's a few more things
to React than just this.

121
00:08:44.770 --> 00:08:49.653
But I'm also gonna say, this is kinda
most of React, which is kinda cool.

122
00:08:49.653 --> 00:08:52.811
The principal core iteration loop is
not terribly complicated with React,

123
00:08:52.811 --> 00:08:54.598
which is one of my
favorite parts about it.

124
00:08:58.376 --> 00:09:02.087
&gt;&gt; Brian Holt: So React is all
about making components, right?

125
00:09:02.087 --> 00:09:08.418
We made this app component that every time
that you call it, you're gonna get a div,

126
00:09:08.418 --> 00:09:13.252
an h1 inside of it, and
a text in there that says Padre Gino's.

127
00:09:13.252 --> 00:09:16.887
And right now, you can see that
we're using createElement again,

128
00:09:16.887 --> 00:09:17.985
the exact same one.

129
00:09:17.985 --> 00:09:20.759
Here we gave it a string, right, and

130
00:09:20.759 --> 00:09:24.619
that gave us the actual
literal div tag on the page.

131
00:09:24.619 --> 00:09:28.185
So we have the div, we have the h1,
and then we have this component.

132
00:09:28.185 --> 00:09:31.162
I like to compare this to a stamp, right?

133
00:09:31.162 --> 00:09:35.824
So we made this app stamp, and now we can
go stamp it as many times as we want,

134
00:09:35.824 --> 00:09:38.415
right, cuz it's a reusable component.

135
00:09:38.415 --> 00:09:43.150
You could imagine you have a pizza one
cuz that's what we're literally about to

136
00:09:43.150 --> 00:09:44.928
create here in just a minute.

137
00:09:44.928 --> 00:09:48.947
And if you have five different types of
pizza, you can stamp it out five different

138
00:09:48.947 --> 00:09:51.682
times, but
you're creating your little stamp here.

139
00:09:51.682 --> 00:09:53.580
And then what createElement does,

140
00:09:53.580 --> 00:09:57.192
the only thing that it does is it
just stamps the stamp once, right?

141
00:09:57.192 --> 00:10:01.662
So I'm calling the React.createElement
here with app, and I'm just saying,

142
00:10:01.662 --> 00:10:04.501
hey, inside of route,
go stamp app once, right?

143
00:10:04.501 --> 00:10:09.620
And you get an instance of the class or
an instance of the component.

144
00:10:09.620 --> 00:10:13.884
So, element instance, you can kind of
associate those two words together,

145
00:10:13.884 --> 00:10:17.832
component class, you can kind of
associate those two words together.

146
00:10:17.832 --> 00:10:22.012
If you're an object-oriented programmer,
that'll make a lot of sense to you,

147
00:10:22.012 --> 00:10:26.145
if you're not, you're just saying words
now and making me feel weird, right?

148
00:10:26.145 --> 00:10:29.166
I get it, anyway, app reusable component,

149
00:10:29.166 --> 00:10:33.155
that's the part that you really
wanna take away from this.

