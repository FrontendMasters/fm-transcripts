WEBVTT

1
00:00:00.320 --> 00:00:04.213
&gt;&gt; Brian Holt: Let's talk about Advanced
React, these were things that you don't

2
00:00:04.213 --> 00:00:07.904
really need to use these so much,
maybe uncontrolled forms you,

3
00:00:07.904 --> 00:00:12.080
you'll use these quite a bit,
but error boundaries and portals.

4
00:00:12.080 --> 00:00:16.462
Much more niche in their use cases, but
still felt useful enough that I wanted you

5
00:00:16.462 --> 00:00:20.725
to have them in your tool bag even if you
don't pull them out very much, right?

6
00:00:20.725 --> 00:00:27.415
So let's talk about portals, this is
just the markup for the page, right?

7
00:00:29.245 --> 00:00:34.961
We have root right here, and that's the
only thing that our app can render into,

8
00:00:34.961 --> 00:00:37.988
let's say we had ten different divs here,

9
00:00:37.988 --> 00:00:43.818
our app currently is only constrained to
its root, which is this root right here.

10
00:00:46.508 --> 00:00:49.295
Let's say that you dislike your users and

11
00:00:49.295 --> 00:00:53.751
you want to show them modals,
I think modals are a terrible thing,

12
00:00:53.751 --> 00:00:58.128
I think whoever invented them
should be ashamed of themselves.

13
00:00:58.128 --> 00:01:01.488
And now I'm going to show
you how to do them [LAUGH],

14
00:01:01.488 --> 00:01:05.888
this used to be a huge problem
trying to render modals with React,

15
00:01:05.888 --> 00:01:10.462
because it's really hard to get
something in front of other stuff.

16
00:01:10.462 --> 00:01:14.614
You either have to do unholy
things with Z-Index, or

17
00:01:14.614 --> 00:01:19.505
you have to find some way to render
something first in your app,

18
00:01:19.505 --> 00:01:23.093
and it becomes really hard to do, right?

19
00:01:23.093 --> 00:01:25.346
We could probably mess around and

20
00:01:25.346 --> 00:01:29.823
figure out how to do it
somewhat with context, right?

21
00:01:29.823 --> 00:01:33.470
But I'm gonna show you something way
easier that they introduced to make

22
00:01:33.470 --> 00:01:36.994
this a much easier thing,
a much more common, I'll say more common,

23
00:01:36.994 --> 00:01:38.663
but less user antagonistic.

24
00:01:38.663 --> 00:01:43.725
Way of using portals is, let's say you
had a side nav that contextually rendered

25
00:01:43.725 --> 00:01:48.799
stuff based on what was on the page,
and so they're two separate things.

26
00:01:48.799 --> 00:01:53.757
You can use a portal to say like, all
right, render this into the side nav if

27
00:01:53.757 --> 00:01:59.676
you're on this page, right, that's
actually a very cool use case for this.

28
00:01:59.676 --> 00:02:01.328
&gt;&gt; Brian Holt: Yeah,
a good example of this,

29
00:02:01.328 --> 00:02:05.207
if you just wanna visualize what I'm
talking about is the Azure Docs, so

30
00:02:05.207 --> 00:02:09.934
JavaScript Azure Functions, let's just see
if I can show you what I'm talking about.

31
00:02:09.934 --> 00:02:12.600
So let's say on this page,
you have the nav here, and

32
00:02:12.600 --> 00:02:14.911
then this is your React
app here in the middle,

33
00:02:14.911 --> 00:02:18.493
you have these like additional
resources here that you're training.

34
00:02:18.493 --> 00:02:23.107
And like these change depend on what page
you're on, you could use a portal to, say,

35
00:02:23.107 --> 00:02:27.339
render into the additional resources
these things when you're on this page,

36
00:02:27.339 --> 00:02:30.186
it allows you to render
outside of your app, right?

37
00:02:30.186 --> 00:02:34.850
So that's kind of the use case
we're getting at here, so

38
00:02:34.850 --> 00:02:41.963
we're gonna head into our index.html, and
above root, we're going to put a modal.

39
00:02:46.079 --> 00:02:48.833
&gt;&gt; Brian Holt: This time we're not gonna
put anything inside of modal because we

40
00:02:48.833 --> 00:02:52.452
don't want it to show anything unless
there's something rendered into it, right?

41
00:02:52.452 --> 00:02:58.666
Okay, I want you to make a new file here,
I just call it modal.jsx,

42
00:02:58.666 --> 00:03:02.603
you ever watch the good
place that TV show.

43
00:03:02.603 --> 00:03:04.769
I feel like when I get
up to the pearly gates,

44
00:03:04.769 --> 00:03:08.647
one of my crimes against humanity is
showing so many people how to make modals.

45
00:03:12.531 --> 00:03:16.490
&gt;&gt; Brian Holt: All right, import,
use effect, and use ref, so

46
00:03:16.490 --> 00:03:22.257
we'll talk about ref as well,
that'll be kind of exciting from React.

47
00:03:25.926 --> 00:03:32.842
&gt;&gt; Brian Holt: Import create portal
&gt;&gt; Brian Holt: From react-dom,

48
00:03:32.842 --> 00:03:37.563
I'm just gonna say this
code is 90% directly from

49
00:03:37.563 --> 00:03:41.444
the React docs, so you credit work is due.

50
00:03:44.339 --> 00:03:47.647
&gt;&gt; Brian Holt: So maybe I can pass
my sins on to them, modal equals,

51
00:03:47.647 --> 00:03:50.205
we're talking about children as well,

52
00:03:50.205 --> 00:03:55.339
there's lots of fun tidbits in here about
React of some more advanced use cases.

53
00:03:58.150 --> 00:04:00.922
&gt;&gt; Brian Holt: All right, so
this is kind of a weird one but

54
00:04:00.922 --> 00:04:04.774
what we have one div that
represents the root of our portal,

55
00:04:04.774 --> 00:04:09.516
which is gonna be that modal
that we're gonna grab, right?

56
00:04:09.516 --> 00:04:12.854
We need to reference the same
div between renders, right,

57
00:04:12.854 --> 00:04:16.746
because this modal is gonna keep
rendering cuz it's React, right?

58
00:04:16.746 --> 00:04:21.200
That's how React works, so how do we
make sure that we're always referring to

59
00:04:21.200 --> 00:04:25.381
the exact same div, we don't wanna
create a new div every single render,

60
00:04:25.381 --> 00:04:29.905
we wanna refer to the same div
between renders, how do we do that?

61
00:04:29.905 --> 00:04:33.986
We don't want to do
a document.getElementID directly in

62
00:04:33.986 --> 00:04:36.899
the render, that's a slow API, right,

63
00:04:36.899 --> 00:04:41.896
anytime that you have to interact with
a div direct or the DOM directly,

64
00:04:41.896 --> 00:04:46.417
you end up in this kind of slow
code path and you don't want that.

65
00:04:47.487 --> 00:04:54.464
Enter refs, that's what we're gonna do
here, so we're gonna say const elRef,

66
00:04:54.464 --> 00:05:00.038
el being element, use ref and
we're gonna have it start as null.

67
00:05:00.038 --> 00:05:07.203
This is the default value the first time,

68
00:05:07.203 --> 00:05:12.321
and then we're gonna say if no

69
00:05:12.321 --> 00:05:19.283
elRef.current, then elRef.current

70
00:05:19.283 --> 00:05:25.440
=document.createElement div.

71
00:05:25.440 --> 00:05:30.610
So, a ref is a frozen object,
we don't really use freeze too much,

72
00:05:30.610 --> 00:05:35.510
it's usually a library thing, but
it only has one thing that you

73
00:05:35.510 --> 00:05:39.801
can modify on it, which is current,
why is it this way?

74
00:05:39.801 --> 00:05:44.421
Because the ref is an object, we can
modify the values on it, and it's always

75
00:05:44.421 --> 00:05:49.554
going to refer to the same thing, right,
it's the pointer points at the same thing.

76
00:05:51.582 --> 00:05:54.268
&gt;&gt; Brian Holt: So this current
is going to be the same div, so

77
00:05:54.268 --> 00:05:59.151
we're only gonna create one div, and we're
going to reference the same div every

78
00:05:59.151 --> 00:06:02.541
single render, little strange, I know.

79
00:06:02.541 --> 00:06:06.937
But stick with me, and it'll make maybe
a bit more sense here, just keep in mind,

80
00:06:06.937 --> 00:06:11.079
this elRef contains a div, and it's the
same div no matter how many times I run

81
00:06:11.079 --> 00:06:13.723
the render, now,
our old friend, useEffect.

82
00:06:20.508 --> 00:06:27.568
&gt;&gt; Brian Holt: Const modal root
= document.getElementById,

83
00:06:27.568 --> 00:06:33.785
modal, so that's gonna be our modal root,

84
00:06:33.785 --> 00:06:40.510
modal root.appendChild, elRef.current,

85
00:06:40.510 --> 00:06:45.552
so now, our created div is inserted

86
00:06:45.552 --> 00:06:49.772
into the DOM, that's cool.

87
00:06:49.772 --> 00:06:54.634
And hold on, we'll come back and
do the return here in a second cuz I wanna

88
00:06:54.634 --> 00:06:59.451
explain that more in depth, how many
times are we gonna insert our div?

89
00:07:00.541 --> 00:07:05.545
Once, empty array, right, you got it, and

90
00:07:05.545 --> 00:07:13.606
then down here at the bottom we're
going to return create portal of div.

91
00:07:18.673 --> 00:07:20.839
&gt;&gt; Brian Holt: And
we're going to render out children.

92
00:07:25.659 --> 00:07:30.245
&gt;&gt; Brian Holt: And then we're going
to do that with our elRef.current.

93
00:07:32.721 --> 00:07:36.036
&gt;&gt; Brian Holt: And then export
default modal, so create portal,

94
00:07:36.036 --> 00:07:41.353
what's cool about this is, now, we can
render this anywhere inside of our app and

95
00:07:41.353 --> 00:07:45.746
it'll be like, you don't want
this actually directly here,

96
00:07:45.746 --> 00:07:49.009
you're trying to stick this over there,
right?

97
00:07:49.009 --> 00:07:52.098
So it's not gonna render whatever
you render as children there,

98
00:07:52.098 --> 00:07:56.141
it's going to stick it whatever you put in
the portal, let's talk about children for

99
00:07:56.141 --> 00:07:56.889
just a second.

100
00:08:00.369 --> 00:08:06.313
So if I have a div here and
I have my h1 that's like right there,

101
00:08:06.313 --> 00:08:10.238
right, what is the children of this div,

102
00:08:10.238 --> 00:08:14.748
it's whatever is inside of it, right?

103
00:08:14.748 --> 00:08:20.109
So it's the same thing with modal,
what is the children of modal,

104
00:08:20.109 --> 00:08:23.508
it's whatever's inside of it, right?

105
00:08:23.508 --> 00:08:26.458
Whatever you put inside of it,
most of the stuff that we've been doing

106
00:08:26.458 --> 00:08:29.708
has been self closing, right,
where it's pizza, because it doesn't make

107
00:08:29.708 --> 00:08:32.548
any we're not trying to put
anything inside of pizza, right?

108
00:08:32.548 --> 00:08:35.957
So that's why all these have been
the self closing, but modal,

109
00:08:35.957 --> 00:08:40.505
we actually do wanna have arbitrary stuff
inside of it, so that's what children is,

110
00:08:40.505 --> 00:08:42.702
and children comes in via props.

111
00:08:42.702 --> 00:08:46.815
It's a specifically named props,
we destructured here, but

112
00:08:46.815 --> 00:08:49.453
this is normally called props, right,

113
00:08:49.453 --> 00:08:53.972
if you did it that way,
you would just say props.children, right?

114
00:08:55.782 --> 00:08:59.515
But instead we did destructuring
cuz I don't know, but

115
00:08:59.515 --> 00:09:04.998
I typically destructure cuz I like
the shorter names, but that's up to you.

116
00:09:04.998 --> 00:09:08.390
Cool, we used an effect here because
we want this to happen once,

117
00:09:08.390 --> 00:09:12.658
we want it to be scheduled for after the
initial render, that makes sense, okay.

118
00:09:13.988 --> 00:09:22.215
That's probably a hint of what I'm about
to talk to, this has a memory leak.

119
00:09:27.817 --> 00:09:28.492
&gt;&gt; Brian Holt: Why?

120
00:09:31.928 --> 00:09:37.081
&gt;&gt; Brian Holt: Let's say I render and
unrender this modal a thousand times.

121
00:09:40.417 --> 00:09:45.845
&gt;&gt; Brian Holt: How many divs is modal
root gonna have inside of it, 1,000?

122
00:09:45.845 --> 00:09:52.559
Nothing goes back and removes
elRref.current from this modal root,

123
00:09:52.559 --> 00:09:57.792
so it's just gonna keep
leaving behind divs, right,

124
00:09:57.792 --> 00:10:02.587
so we have to go clean up after ourselves,
right?

125
00:10:04.277 --> 00:10:07.997
So this is one of the weirdest APIs for

126
00:10:07.997 --> 00:10:13.397
React in my opinion, but
you return a function here,

127
00:10:13.397 --> 00:10:19.886
and you do all your cleanup here,
so modalroot.removechild.

128
00:10:22.839 --> 00:10:26.935
&gt;&gt; Brian Holt: elRef.current,
that's our cleanup function, so

129
00:10:26.935 --> 00:10:32.031
whatever function you run or
you return from your effect will be run

130
00:10:32.031 --> 00:10:37.231
once after it gets unmounted, and
this will solve our memory leak.

