WEBVTT

1
00:00:00.330 --> 00:00:02.618
&gt;&gt; Scott Moss: I do wanna get
into a little other cool stuff.

2
00:00:02.618 --> 00:00:06.783
I think that'll be super helpful in
your journey with front-end graphql and

3
00:00:06.783 --> 00:00:08.400
stuff like that.

4
00:00:08.400 --> 00:00:10.410
So one thing to note here is

5
00:00:11.530 --> 00:00:16.450
a really cool feature called aliasing
using queries and mutations.

6
00:00:16.450 --> 00:00:20.200
So if you have fields, like in this case,
we have a field called name.

7
00:00:20.200 --> 00:00:22.240
What else do we have here on a character?

8
00:00:24.540 --> 00:00:29.920
Name, status, species, type, gender,
origin, image, episode, all this stuff.

9
00:00:29.920 --> 00:00:34.180
So if I wanted to, for instance,
we get a name here, but

10
00:00:34.180 --> 00:00:38.030
let's say in the component of my UI,
I'm not looking for

11
00:00:38.030 --> 00:00:40.399
a character.name, I'm looking for
a character died.

12
00:00:41.510 --> 00:00:43.910
Full Name, something like that,
it's not name, and

13
00:00:43.910 --> 00:00:45.920
I don't wanna go change
it in my component.

14
00:00:45.920 --> 00:00:48.680
So I just want to change
it from grayscale, so

15
00:00:48.680 --> 00:00:50.260
I can stick his trademark component.

16
00:00:50.260 --> 00:00:54.200
But I also don't have access to
the server to go change the whole API, or

17
00:00:54.200 --> 00:00:55.450
maybe something else is using name.

18
00:00:55.450 --> 00:00:58.990
And if I change it on the API level,
it's gonna break everything else.

19
00:00:58.990 --> 00:01:00.780
So I don't wanna change the name.

20
00:01:00.780 --> 00:01:03.660
But I also don't wanna change it and
my react app.

21
00:01:03.660 --> 00:01:04.630
So what do I do?

22
00:01:04.630 --> 00:01:06.000
This is where alias is coming.

23
00:01:06.000 --> 00:01:10.070
So with an alias,
I can just put whatever I want.

24
00:01:10.070 --> 00:01:11.750
So left of it like that.

25
00:01:13.140 --> 00:01:17.870
And now, I can Alias Name with whatever I
want it to be, in this case, full name.

26
00:01:17.870 --> 00:01:20.680
So if I were to do that,
it changes the format.

27
00:01:22.120 --> 00:01:23.500
This is really cool.

28
00:01:23.500 --> 00:01:25.530
One of the things I like
to do with aliases is,

29
00:01:25.530 --> 00:01:29.520
if you notice, when whatever query or
mutation, you run the name of it.

30
00:01:29.520 --> 00:01:30.820
That's what you get back at the response.

31
00:01:30.820 --> 00:01:34.630
So you'll get data dot
whatever the query name is.

32
00:01:34.630 --> 00:01:39.590
Sometimes, I don't like that and this
cases were done is already results here.

33
00:01:39.590 --> 00:01:41.800
But sometimes,
I'll do something like, results.

34
00:01:44.780 --> 00:01:48.130
And I'll actually A list a querie,
and I'll make sure all of my queries

35
00:01:48.130 --> 00:01:52.170
have data dot results or something like
that verses data dot, whatever the name of

36
00:01:52.170 --> 00:01:55.250
that querie is, and having to figure
it out every time and going back.

37
00:01:55.250 --> 00:01:58.640
I just always A list it to a standard
name that I always use for

38
00:01:58.640 --> 00:02:01.040
every single querie, and
I can look for it that way.

39
00:02:01.040 --> 00:02:05.470
So that's one thing to know, but yeah,
you can alias any field that you want.

40
00:02:06.650 --> 00:02:10.630
Another good example of doing aliases,
is if you

41
00:02:11.860 --> 00:02:18.530
have conflicting fields from union
types or from interfaces, you can do

42
00:02:18.530 --> 00:02:24.370
aliases to change whatever those field
values are, and stuff like that.

43
00:02:24.370 --> 00:02:26.480
That way you don't have
that that collision there.

44
00:02:26.480 --> 00:02:28.800
So really another good example of that.

45
00:02:28.800 --> 00:02:34.790
The other thing is you can run
multiple queries in one API call.

46
00:02:34.790 --> 00:02:39.160
So if I wanted to run another query
simultaneously within the same operation,

47
00:02:39.160 --> 00:02:41.980
even the exact same query,
like I could just do this.

48
00:02:41.980 --> 00:02:44.500
I can just copy this and run this again.

49
00:02:46.910 --> 00:02:49.170
If I try to execute this with both

50
00:02:52.040 --> 00:02:56.230
queries happening simultaneously,
graph QL can support that.

51
00:02:56.230 --> 00:02:59.960
But when I execute them right now,
it actually won't run too, and

52
00:02:59.960 --> 00:03:01.860
that's because they're both the same name.

53
00:03:01.860 --> 00:03:04.729
So by default,
this is gonna get de-duplicated.

54
00:03:04.729 --> 00:03:09.576
It's gonna realize like, you're actually
already running a query with the exact

55
00:03:09.576 --> 00:03:14.422
same name, so I was only gonna run them
once, I'm gonna de-duplicate it for you,

56
00:03:14.422 --> 00:03:18.320
or to get this to run, I would have
to alias this to something else.

57
00:03:21.030 --> 00:03:23.820
And then, when I execute this, you can
see I get something else down here.

58
00:03:24.950 --> 00:03:29.645
So that's another good example of using
aliases on field levels, is to help you

59
00:03:29.645 --> 00:03:34.144
resolve the point where you have like
multiple queries running at one time.

60
00:03:34.144 --> 00:03:38.920
And then, on the server side, this is all
gonna happen pretty much in parallel.

61
00:03:38.920 --> 00:03:43.460
So this is you adding multiple
queries to one operation, but

62
00:03:43.460 --> 00:03:46.000
at the same time,
depending on what framework you're using,

63
00:03:46.000 --> 00:03:50.680
you might be running multiple operations
at one time that all get batched, as well.

64
00:03:50.680 --> 00:03:54.554
So if you think about let's
say you load up your app.

65
00:03:54.554 --> 00:03:57.844
Your app started up, and
it had an operation that ran for

66
00:03:57.844 --> 00:03:59.460
the nav bar to get the user.

67
00:03:59.460 --> 00:04:02.850
It had a operation for whatever page
you're looking on to get the main data.

68
00:04:02.850 --> 00:04:05.440
Another operation that ran
that did something else.

69
00:04:05.440 --> 00:04:09.540
Each one was operations had 10 queries
inside of them for some reason.

70
00:04:09.540 --> 00:04:14.740
That's 30 queries, your server is gonna
be executing at pretty much one time.

71
00:04:14.740 --> 00:04:16.990
So something to think about there.

72
00:04:16.990 --> 00:04:20.560
But as a front end person working on this,
you don't care.

73
00:04:20.560 --> 00:04:23.790
I guess, it doesn't really matter,
but just something to think

74
00:04:23.790 --> 00:04:26.490
about when you're executing your
careers and putting them together.

75
00:04:27.670 --> 00:04:30.500
There's a lot of other cool stuff
that we'll get to with queries, and

76
00:04:30.500 --> 00:04:33.260
mutations, and things like that.

77
00:04:33.260 --> 00:04:35.620
But, for now, yeah, this is it.

78
00:04:35.620 --> 00:04:39.690
And then, I guess, on the flip side of
this, I've been talking about queries for

79
00:04:39.690 --> 00:04:42.320
mutations if you want to
do a mutation operation.

80
00:04:42.320 --> 00:04:45.140
It's very similar to a query operation.

81
00:04:45.140 --> 00:04:46.883
You just use the mutation keyword.

82
00:04:46.883 --> 00:04:50.237
And then, you also just do,
I don't think this API has any mutations.

83
00:04:50.237 --> 00:04:52.421
Which is why I can actually execute.

84
00:04:52.421 --> 00:04:54.722
Yeah, there's no mutations on this API,
but

85
00:04:54.722 --> 00:04:58.033
you can just do mutation followed
by whatever operation you want.

86
00:04:58.033 --> 00:05:05.522
Let's say I was creating a character
&gt;&gt; Scott Moss: And

87
00:05:05.522 --> 00:05:09.865
I wanted some variables there,
and if there was a mutation,

88
00:05:09.865 --> 00:05:13.201
I would use that one here,
createCharacter.

89
00:05:16.096 --> 00:05:18.690
&gt;&gt; Scott Moss: That is the same thing,
it follows the same rules as the query.

90
00:05:18.690 --> 00:05:22.245
So the only difference here is you
use the mutation keyword to the left

91
00:05:22.245 --> 00:05:25.568
versus the query keyword,
that's it, nothing else changed.

92
00:05:25.568 --> 00:05:29.850
It's the exact same thing, the same
variable rules, same, all of that stuff.

93
00:05:29.850 --> 00:05:31.520
So all good to go, yes?

94
00:05:31.520 --> 00:05:34.380
&gt;&gt; Speaker 2: So
what's the point of naming mutations?

95
00:05:34.380 --> 00:05:35.980
Will those be cached, as well?

96
00:05:37.530 --> 00:05:40.010
&gt;&gt; Scott Moss: That's a good question,
will mutations be cached, as well?

97
00:05:42.160 --> 00:05:46.482
No, mutations themselves aren't cashed,
because, yeah,

98
00:05:46.482 --> 00:05:51.790
they're not really cached, but
the operations are still gonna be indexed.

99
00:05:51.790 --> 00:05:56.870
So you can reference them through tools,
and you'll see another

100
00:05:56.870 --> 00:06:00.560
tool that we're gonna download for react
that, it's very important to name these.

101
00:06:00.560 --> 00:06:05.660
But as far as like the data being cached,
no, they're not going to be cached for

102
00:06:05.660 --> 00:06:10.306
you like a query would, at least not
with the library that we're using,

103
00:06:10.306 --> 00:06:12.842
some libraries might do it, but, no.

104
00:06:12.842 --> 00:06:17.621
The reason, I think, it's important to,
to also just put these names on them,

105
00:06:17.621 --> 00:06:22.333
is because you might not, you don't really
understand unless you built it what

106
00:06:22.333 --> 00:06:26.190
the tools you're using
are gonna be doing with them.

107
00:06:26.190 --> 00:06:30.980
So in that case, I tend to just always
add operation names when I'm doing

108
00:06:30.980 --> 00:06:34.360
client site implementations,
because, I have no idea what this

109
00:06:34.360 --> 00:06:37.760
library that I downloaded is expecting,
what it's doing with these names,

110
00:06:37.760 --> 00:06:40.490
if it's planning on indexing,
if it's trying to cache them, or if it's

111
00:06:40.490 --> 00:06:44.460
doing something smart that I'm not aware
of, always just provide the name for it.

112
00:06:45.790 --> 00:06:48.320
But, no,
you’re not gonna have cache mutations.

113
00:06:48.320 --> 00:06:51.210
Only query results are going to be cached.

114
00:06:51.210 --> 00:06:55.980
And we’ll get to the point, how do you
update a cache after you mutate something.

115
00:06:55.980 --> 00:06:56.950
Cuz you will have to do that.

116
00:06:56.950 --> 00:06:58.370
So we’ll talk about that.

117
00:06:58.370 --> 00:06:59.820
&gt;&gt; Speaker 3: What’s that across the wire?

118
00:06:59.820 --> 00:07:01.680
There's a string posted?

119
00:07:01.680 --> 00:07:02.850
&gt;&gt; Scott Moss: Good question.

120
00:07:02.850 --> 00:07:07.730
So there's a lot of ways that this
could happen, as a get request,

121
00:07:07.730 --> 00:07:10.370
then this is going to be
a query string on the end with,

122
00:07:10.370 --> 00:07:15.090
I think the parameters literally, or the
query is actually called query equals, and

123
00:07:15.090 --> 00:07:20.440
is literally your query string of fire, up
to the maximum character, whatever can be.

124
00:07:20.440 --> 00:07:21.470
Same thing with mutations.

125
00:07:21.470 --> 00:07:23.250
Mutations can also be on the get request.

126
00:07:23.250 --> 00:07:26.390
And that happens to the most
time is gonna be a POST request.

127
00:07:26.390 --> 00:07:30.526
Post requires, I believe, it's going
to be a body that has query in it.

128
00:07:30.526 --> 00:07:33.350
And it's gonna be your query as a string,
and there's variables,

129
00:07:33.350 --> 00:07:37.660
there's gonna be a field called variables,
and that's gonna be your variables object.

130
00:07:37.660 --> 00:07:38.979
And that's basically what gets it up.

131
00:07:41.120 --> 00:07:43.721
But yeah, most of the times,
it's gonna be a post request,

132
00:07:43.721 --> 00:07:47.345
unless you're doing something persistent
query, or something like that where you

133
00:07:47.345 --> 00:07:49.760
can still get request what the URL,
you're good to go.

134
00:07:50.980 --> 00:07:54.300
&gt;&gt; Speaker 4: Is there any support for
like something in this one if you have

135
00:07:54.300 --> 00:07:57.820
list of characters and they have a list
of episodes, rather than returning all

136
00:07:57.820 --> 00:08:01.850
the episodes in the field on there, just
returning like the number of episodes?

137
00:08:03.260 --> 00:08:06.466
&gt;&gt; Scott Moss: Yeah,
that's a good question.

138
00:08:06.466 --> 00:08:08.560
So there's a couple of ways
that you can support that.

139
00:08:08.560 --> 00:08:12.660
The easy way, or the obvious way is
whoever made the API needs a supportive

140
00:08:12.660 --> 00:08:15.990
field that says episode count, that's one.

141
00:08:15.990 --> 00:08:20.640
The other thing you could do, and
all of these are gonna require someone on

142
00:08:20.640 --> 00:08:26.940
the back in doing something, the other
thing you can do is have a directive

143
00:08:26.940 --> 00:08:32.540
that we haven't talked too much about
directive or directives at all, but,

144
00:08:32.540 --> 00:08:38.070
basically, you can have a directive
that might say, I don't know,

145
00:08:38.070 --> 00:08:40.750
it might have something in here
called count or something like that.

146
00:08:40.750 --> 00:08:45.658
It could do anything, a directive could
literally do anything that allows you to

147
00:08:45.658 --> 00:08:49.930
get that, I know there are some
really cool ones, Lodash, GraphQL.

148
00:08:49.930 --> 00:08:51.150
Let me see if this is still a thing.

149
00:08:52.480 --> 00:08:56.320
So this directive library is something
that you can add to GraphQL that allows

150
00:08:56.320 --> 00:09:02.910
you to basically use Lodash inside
of a query, which is really cool.

151
00:09:02.910 --> 00:09:07.470
So something like this might be able to
offer you that flexibility without having

152
00:09:07.470 --> 00:09:12.260
to ask the person working on the server
to change something, but, yeah,

153
00:09:12.260 --> 00:09:14.180
most times,
it's gonna require a backend change.

