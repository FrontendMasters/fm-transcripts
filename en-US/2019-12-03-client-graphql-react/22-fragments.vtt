WEBVTT

1
00:00:00.270 --> 00:00:03.230
&gt;&gt; Scott Moss: So what I want to talk
about is something called fragments.

2
00:00:03.230 --> 00:00:05.930
Fragments are basically kind
of like what they sound like,

3
00:00:05.930 --> 00:00:08.560
they're little pieces of something.

4
00:00:08.560 --> 00:00:12.460
For instance, if we have owner here and

5
00:00:12.460 --> 00:00:16.330
we know we have to add it here,
all of these fields are very similar.

6
00:00:16.330 --> 00:00:19.160
We kinda just duplicated
this stuff everywhere.

7
00:00:19.160 --> 00:00:23.140
So instead of duplicating everywhere,
we can just add a fragment.

8
00:00:23.140 --> 00:00:26.070
So I'm gonna take all these
fields away from here,

9
00:00:26.070 --> 00:00:28.750
take all these fields away from here.

10
00:00:28.750 --> 00:00:31.020
And now, what I'm gonna do is I'm
gonna create what's called a fragment.

11
00:00:31.020 --> 00:00:39.504
So I can say const, and then I'll just say
PETS_FIELDS = always use our graphql-tag.

12
00:00:41.475 --> 00:00:46.270
&gt;&gt; Scott Moss: And
I'm gonna say fragment, and

13
00:00:46.270 --> 00:00:52.790
we can call it PetsFields on Pet,
like that.

14
00:00:52.790 --> 00:00:54.380
I gotta spell it right, fragment.

15
00:00:54.380 --> 00:00:55.140
There we go.

16
00:00:55.140 --> 00:00:59.793
So you use the fragment keyword,
you give it a name.

17
00:00:59.793 --> 00:01:03.159
Use the on keyword to describe on what

18
00:01:03.159 --> 00:01:08.100
type are you trying to
declare fragments for.

19
00:01:08.100 --> 00:01:13.621
So AllPets query and the add pet
mutation both returned a pet type,

20
00:01:13.621 --> 00:01:17.280
so I'm creating a fragment
on the pet type.

21
00:01:18.370 --> 00:01:20.120
And then here,
I can add whatever fields I want.

22
00:01:20.120 --> 00:01:21.960
So in this case, I want to do this.

23
00:01:23.560 --> 00:01:28.250
I wanna add a fragment that has an id,
a name, type, img, owner, id, age,

24
00:01:28.250 --> 00:01:29.550
and that's a client.

25
00:01:29.550 --> 00:01:30.738
Even a client name will work here.

26
00:01:36.058 --> 00:01:40.149
&gt;&gt; Scott Moss: And
then from there to add my,

27
00:01:42.344 --> 00:01:44.124
&gt;&gt; Scott Moss: To add in my fragments,

28
00:01:44.124 --> 00:01:47.862
because we're inside of
a ES6 string like this,

29
00:01:47.862 --> 00:01:51.333
all I have to do is just
use a template literal or

30
00:01:51.333 --> 00:01:56.050
interpolation here, and
just pass in the variable like that,

31
00:01:56.050 --> 00:02:02.498
PETS_FIELDS
&gt;&gt; Scott Moss: So

32
00:02:02.498 --> 00:02:06.390
now, you could move this to another file,
do something else with it.

33
00:02:06.390 --> 00:02:10.340
And now you know all your queries and
mutations are gonna have the same fields.

34
00:02:10.340 --> 00:02:12.430
So fragments are really handy.

35
00:02:12.430 --> 00:02:15.202
You might read, in some documentation,
other ways to use fragments.

36
00:02:15.202 --> 00:02:19.485
I think a big thing the community
does in React is they'll attach

37
00:02:19.485 --> 00:02:22.987
the fragments to the components
that use the query.

38
00:02:22.987 --> 00:02:28.105
So they'll come down here and
they'll do something like the pets

39
00:02:28.105 --> 00:02:32.853
component Pets.fragments =,
they'll make an object and

40
00:02:32.853 --> 00:02:36.990
they'll give the fragment
a name like petsFields.

41
00:02:36.990 --> 00:02:41.620
And then they'll add that fragment
that we created up here to do that.

42
00:02:41.620 --> 00:02:44.610
And that way they can share
the fragments based around components.

43
00:02:44.610 --> 00:02:47.630
So that's something if you started
getting into organizing your React app.

44
00:02:47.630 --> 00:02:51.380
If that's how you do your app, then yeah,
that's a thing that the community does,

45
00:02:51.380 --> 00:02:54.890
they'll add their fragments here like
gql and do their fragments like that.

46
00:02:56.780 --> 00:02:59.390
But we're just in one file, so
there's no need to do all that.

47
00:03:00.850 --> 00:03:02.530
I'm just stuck in my app right now.

48
00:03:02.530 --> 00:03:04.370
This is not my app, this is.

49
00:03:04.370 --> 00:03:09.680
Okay, so
there's two things you have to do.

50
00:03:09.680 --> 00:03:11.410
You can't just add them in like this.

51
00:03:11.410 --> 00:03:14.390
In my app, I add them in like this
because we're just using strings, so

52
00:03:14.390 --> 00:03:15.760
I got confused just now.

53
00:03:15.760 --> 00:03:19.990
But we're using a graphql template tag
here, so we have to account for that.

54
00:03:19.990 --> 00:03:25.569
The way you would do that is,
first is you have to add the fragment.

55
00:03:25.569 --> 00:03:30.288
So you add the fragment at the bottom
using the same thing that we just did, and

56
00:03:30.288 --> 00:03:33.410
then you can use the ...,
syntax like this, and

57
00:03:33.410 --> 00:03:38.146
then you can use the fragment name, so
PetsFields, so something like that.

58
00:03:54.381 --> 00:03:56.590
&gt;&gt; Scott Moss: So this is just spreading
over all the fields you want on

59
00:03:56.590 --> 00:03:57.220
the fragment.

60
00:03:57.220 --> 00:04:00.358
This is adding the fragment
to the actual operation.

61
00:04:05.707 --> 00:04:08.101
&gt;&gt; Scott Moss: So now,
if we refresh our app,

62
00:04:08.101 --> 00:04:11.337
everything should be working just fine.

63
00:04:16.462 --> 00:04:21.269
&gt;&gt; Scott Moss: There's no simple way to
add those fragments here to the optimistic

64
00:04:21.269 --> 00:04:22.310
response.

65
00:04:22.310 --> 00:04:29.280
Cuz we wrote those graphics in graphql,
so you can't just easily get them here.

66
00:04:29.280 --> 00:04:32.960
But there's nothing stopping you from
creating a mechanism from grabbing those

67
00:04:32.960 --> 00:04:35.830
fragments and using them here yourself.

68
00:04:35.830 --> 00:04:37.070
But you still have to
come up with a value,

69
00:04:37.070 --> 00:04:40.840
so it's probably just better to be
declarative about in the first place.

70
00:04:42.390 --> 00:04:46.250
&gt;&gt; Speaker 2: So when I attempt to use
the optimisticResponse I get an invariant

71
00:04:46.250 --> 00:04:51.680
violation, no fragment named pets fields,
do I now have to add that pets fields?

72
00:04:51.680 --> 00:04:53.830
&gt;&gt; Scott Moss: Yeah, so yeah, now-
&gt;&gt; Speaker 2: Is it gonna add in

73
00:04:53.830 --> 00:04:55.900
the fragment to the optimisticResponse?

74
00:04:55.900 --> 00:04:59.625
&gt;&gt; Scott Moss: Right, so now you have
to add the fragment to the response,

75
00:04:59.625 --> 00:05:03.214
which is, let me see,
how do we add the fragment to this?

76
00:05:05.205 --> 00:05:06.756
&gt;&gt; Scott Moss: I don't remember
how to add the fragment to

77
00:05:06.756 --> 00:05:07.480
that-
&gt;&gt; Speaker 2: Something like

78
00:05:07.480 --> 00:05:08.330
a typename fragment.

79
00:05:08.330 --> 00:05:10.080
&gt;&gt; Scott Moss: There's
a specific typename, yeah.

80
00:05:10.080 --> 00:05:12.340
You gotta get the specific typename and
add it there.

81
00:05:12.340 --> 00:05:16.690
But yeah, well, optimisticResponse has
to follow exactly what the queried

82
00:05:16.690 --> 00:05:19.140
mutation has to the tee, even with that.

83
00:05:19.140 --> 00:05:20.540
So, yeah, you gotta add that.

