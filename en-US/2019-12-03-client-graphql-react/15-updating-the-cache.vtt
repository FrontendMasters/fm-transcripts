WEBVTT

1
00:00:00.250 --> 00:00:03.471
&gt;&gt; Scott Moss: So update, the way it works
is, the first argument that you're gonna

2
00:00:03.471 --> 00:00:07.510
get in update is you're gonna get
a reference to the actual cache object.

3
00:00:07.510 --> 00:00:11.960
The cache object is, like I said, it's
that internal thing that Apollo is storing

4
00:00:11.960 --> 00:00:15.472
all the cache flat when we get back
it from queries and mutations.

5
00:00:15.472 --> 00:00:18.673
The next thing you're gonna get back is,

6
00:00:18.673 --> 00:00:23.440
you're going to get back what
looks like a GraphQL response.

7
00:00:23.440 --> 00:00:24.396
And that's because it is.

8
00:00:24.396 --> 00:00:28.316
So you're gonna get back the GraphQL
response from the mutation that you're

9
00:00:28.316 --> 00:00:29.290
trying to update.

10
00:00:29.290 --> 00:00:31.720
So in this case,
they have an ADD_TODO mutation.

11
00:00:31.720 --> 00:00:34.656
Whatever your mutation is,
that's the response you're gonna get back.

12
00:00:34.656 --> 00:00:38.190
You're gonna get back data dot,
whatever the name of your mutation was.

13
00:00:38.190 --> 00:00:39.592
So in my example,

14
00:00:39.592 --> 00:00:44.831
I would get back an object that has
a data property data dot addPet.

15
00:00:44.831 --> 00:00:46.300
So that's the response
that I would get back.

16
00:00:46.300 --> 00:00:47.170
I would get back this.

17
00:00:49.880 --> 00:00:53.757
And then from there,
the objective is basically,

18
00:00:53.757 --> 00:00:58.084
what you wanna do is you have
to read any query that might be

19
00:00:58.084 --> 00:01:02.610
interested in this new resource
that you created, right?

20
00:01:02.610 --> 00:01:06.150
So in our our example, we only have
one query, that's the allPets query.

21
00:01:06.150 --> 00:01:11.275
But in other apps,
you might have many queries that use pets,

22
00:01:11.275 --> 00:01:14.550
lists in many different places,
or maybe just this one pet.

23
00:01:14.550 --> 00:01:17.020
You might have different places
where those pets can be.

24
00:01:17.020 --> 00:01:20.828
For every single one of those queries,
you have to read them using the cache.

25
00:01:20.828 --> 00:01:22.994
So there's a cache.readQuery
function here.

26
00:01:22.994 --> 00:01:27.458
This readQuery function takes an object
that takes a query property, and

27
00:01:27.458 --> 00:01:30.781
its just the reference to
your query that you created.

28
00:01:30.781 --> 00:01:33.646
And when I say reference to
the query that you created,

29
00:01:33.646 --> 00:01:35.890
I'm talking about the actual query.

30
00:01:35.890 --> 00:01:37.715
So in this case, I would pass allPets.

31
00:01:37.715 --> 00:01:39.826
That's the reference to my query.

32
00:01:39.826 --> 00:01:40.914
So I need the exact, and

33
00:01:40.914 --> 00:01:43.483
this is why I said the fields
have to be exactly the same.

34
00:01:43.483 --> 00:01:46.397
Because GraphQL is gonna go look for
that query.

35
00:01:46.397 --> 00:01:48.538
And if it's different than what you
did before, it's gonna be like,

36
00:01:48.538 --> 00:01:49.130
I didn't find it.

37
00:01:49.130 --> 00:01:51.610
I didn't see a query in the cache for
that, what are you talking about?

38
00:01:51.610 --> 00:01:54.640
Because it's watching these queries,
so that it has to know,

39
00:01:54.640 --> 00:01:55.910
it needs a reference to it.

40
00:01:55.910 --> 00:01:59.020
So passing that reference is gonna
let GraphQL know, or Apollo know,

41
00:01:59.020 --> 00:02:01.299
that this is the query
that you're interested in.

42
00:02:03.972 --> 00:02:07.660
&gt;&gt; Scott Moss: So once you do that, you'll
get a reference back to its data, right?

43
00:02:07.660 --> 00:02:12.843
So in our example, we would get
back an object that had pets on it,

44
00:02:12.843 --> 00:02:16.255
whatever the name of the query was, yeah.

45
00:02:16.255 --> 00:02:17.678
So we'd get back an object that had pets.

46
00:02:19.973 --> 00:02:20.994
&gt;&gt; Scott Moss: And then from there,

47
00:02:20.994 --> 00:02:23.500
what you wanna do is you
wanna use the write query.

48
00:02:23.500 --> 00:02:27.353
So once you read the query,
now you've gotta write back to the query,

49
00:02:27.353 --> 00:02:28.674
just like Apollo does.

50
00:02:28.674 --> 00:02:32.166
When you issue a query yourself,
when you do use query,

51
00:02:32.166 --> 00:02:37.630
Apollo's gonna automatically write that
query as a result to the cache for you.

52
00:02:37.630 --> 00:02:38.840
You're just doing it manually.

53
00:02:38.840 --> 00:02:40.773
You're saying, cool,
now I'm gonna take the cache, and

54
00:02:40.773 --> 00:02:42.490
I'm gonna write it to the query myself.

55
00:02:42.490 --> 00:02:45.757
So for this given query, for GET_TODOS,

56
00:02:45.757 --> 00:02:49.132
I'm gonna overwrite it
to be this data now.

57
00:02:49.132 --> 00:02:53.470
And in this example, you can see that
they basically created a new todos array,

58
00:02:53.470 --> 00:02:57.778
based off the old todos array concatenated
with the new one that they created.

59
00:02:57.778 --> 00:02:58.840
So they added it to the end of it.

60
00:02:58.840 --> 00:03:01.810
You should probably add it to the
beginning so the new pet shows up first,

61
00:03:01.810 --> 00:03:02.870
and not the end.

62
00:03:02.870 --> 00:03:04.360
But you can do whatever you want.

63
00:03:04.360 --> 00:03:06.000
And that's basically it.

64
00:03:06.000 --> 00:03:09.175
You need to read from
the cache to get the query.

65
00:03:09.175 --> 00:03:14.173
And then you need to update
the cache with the same query, and

66
00:03:14.173 --> 00:03:17.818
completely make a brand new state for
that.

67
00:03:17.818 --> 00:03:19.825
Don't do mutable operations.

68
00:03:19.825 --> 00:03:22.150
Don't do push, pop,
don't do any of that stuff.

69
00:03:22.150 --> 00:03:25.621
It's immutable, create a whole
new thing and update your cache.

70
00:03:25.621 --> 00:03:30.590
And make sure it's exactly the same as it
would be if GraphQL did it automatically.

71
00:03:30.590 --> 00:03:32.430
So how to you know if
it's exactly the same?

72
00:03:32.430 --> 00:03:34.740
Well, GraphQL is gonna save things
the way that they come back.

73
00:03:34.740 --> 00:03:38.410
So if you have pets here,
then that's how GraphQL is gonna save it.

74
00:03:38.410 --> 00:03:43.690
If you alias this to something else,
that's how GraphQL is gonna save it.

75
00:03:43.690 --> 00:03:44.662
It's not gonna save it as pets.

76
00:03:44.662 --> 00:03:45.711
It's gonna save it as things.

77
00:03:45.711 --> 00:03:48.950
So you need to make sure yours
is following that alias as well.

78
00:03:48.950 --> 00:03:54.780
So that's how the automatic cache writes
happen, is based off your queries.

79
00:03:54.780 --> 00:03:57.790
So you need to make sure since
you're doing it manually,

80
00:03:57.790 --> 00:04:00.430
you follow the rules based
off your queries as well.

81
00:04:00.430 --> 00:04:02.630
So in this example, todos,

82
00:04:02.630 --> 00:04:08.240
that's the exact query name that was
being used for the GET_TODOS query.

83
00:04:08.240 --> 00:04:09.290
That's the name of the query.

84
00:04:09.290 --> 00:04:11.610
This is the name of
the variable holding the query.

85
00:04:11.610 --> 00:04:14.882
And then they're just
concatenating it to here.

86
00:04:14.882 --> 00:04:16.980
Any more questions on this?

87
00:04:16.980 --> 00:04:17.829
Yes Radash?

88
00:04:17.829 --> 00:04:20.249
&gt;&gt; Radash: So
the component will update twice,

89
00:04:20.249 --> 00:04:25.420
once when the response comes back and
another time when you write to the cache?

90
00:04:25.420 --> 00:04:28.679
&gt;&gt; Scott Moss: So it won't update
when the response comes back,

91
00:04:28.679 --> 00:04:30.473
because where is it going?

92
00:04:30.473 --> 00:04:33.545
I guess it depends on what
you're describing as an update.

93
00:04:33.545 --> 00:04:35.999
Are you saying-
&gt;&gt; Radash: The component re-rendering,

94
00:04:35.999 --> 00:04:37.665
I mean-
&gt;&gt; Scott Moss: The component will

95
00:04:37.665 --> 00:04:42.767
definitely re-render, because we're
gonna get back a data property on,

96
00:04:42.767 --> 00:04:44.910
where's it at, this thing.

97
00:04:44.910 --> 00:04:46.548
So yeah, you will have a re-render.

98
00:04:46.548 --> 00:04:51.167
But you won't see the app flicker or
anything like that.

99
00:04:51.167 --> 00:04:54.830
This is all happening at the same time,
right?

100
00:04:54.830 --> 00:04:58.600
So when you do a new pet,
you're gonna do your update.

101
00:04:58.600 --> 00:04:59.886
That's gonna cause a re-render.

102
00:04:59.886 --> 00:05:02.070
Once you do your update,
the cache is gonna update.

103
00:05:02.070 --> 00:05:06.740
Once that cache is updated, that's gonna
trigger this data to be different now.

104
00:05:06.740 --> 00:05:09.190
This data from this query is
gonna be different now, and

105
00:05:09.190 --> 00:05:10.462
that's gonna cause a re-render.

106
00:05:10.462 --> 00:05:13.480
So yeah, it's just like, basically,
you're just setting a state.

107
00:05:13.480 --> 00:05:14.790
So you get some new data back.

108
00:05:14.790 --> 00:05:18.070
You can think of this, this is
the same thing that would happen if

109
00:05:18.070 --> 00:05:21.810
you had a prop that came in,
which will cause a re-render.

110
00:05:21.810 --> 00:05:24.670
And then you took that prop and
you set a state based off that prop,

111
00:05:24.670 --> 00:05:26.605
which will then cause another re-render.

112
00:05:26.605 --> 00:05:28.210
That's basically what's happening here.

113
00:05:28.210 --> 00:05:31.610
You could think of this as a prop that's
coming in, that causes a re-render.

114
00:05:31.610 --> 00:05:36.450
And then we're setting some state
inside of here that causes a re-render.

115
00:05:36.450 --> 00:05:37.070
Any other questions?

116
00:05:39.330 --> 00:05:44.580
&gt;&gt; Speaker 3: So you were saying that,
so in the cache,

117
00:05:44.580 --> 00:05:49.870
where you're reading the cache,
you could have multiple queries?

118
00:05:49.870 --> 00:05:52.930
&gt;&gt; Scott Moss: Yeah, you can read the
cache as many times as you want in here,

119
00:05:52.930 --> 00:05:55.640
for as many queries as you need,
and write to it.

120
00:05:55.640 --> 00:05:59.160
&gt;&gt; Speaker 3: So would that be
multiple lines of cache.readQuery?

121
00:05:59.160 --> 00:06:02.027
Or is there some syntax where you-
&gt;&gt; Scott Moss: It would be multiple lines

122
00:06:02.027 --> 00:06:03.300
of cache.readQuery, yeah.

