WEBVTT

1
00:00:00.160 --> 00:00:03.955
&gt;&gt; Scott Moss: I had already created my
mutation in the graphical Apollo tools

2
00:00:03.955 --> 00:00:06.468
that we have here in the Dev tool section.

3
00:00:06.468 --> 00:00:10.450
And for me, it's mostly exactly
what I want to use in React, so

4
00:00:10.450 --> 00:00:15.310
I'm just gonna copy that and
I'm gonna head over to our React code.

5
00:00:15.310 --> 00:00:20.123
First thing is I need to make a query for
that mutation, so I'm going to const.

6
00:00:20.123 --> 00:00:23.230
And I'm gonna call this one a NEW_PET,
like that.

7
00:00:24.900 --> 00:00:27.120
I'm gonna use the gql tag here.

8
00:00:28.790 --> 00:00:33.610
And I'm just going to paste that mutation
in there and fix this indentation.

9
00:00:33.610 --> 00:00:34.390
There we go.

10
00:00:34.390 --> 00:00:38.987
So now we got a mutation and just to recap
this, so we have the mutation keyword

11
00:00:38.987 --> 00:00:43.608
which telegraph kill that we're running
a mutation type of operation here.

12
00:00:43.608 --> 00:00:46.036
And then you have the operation name,
which is gonna be,

13
00:00:46.036 --> 00:00:47.760
in my case it's CreateAPet.

14
00:00:47.760 --> 00:00:49.740
You could name this whatever you want.

15
00:00:49.740 --> 00:00:53.729
I'm declaring a variable here by
the name of newPet and setting its type

16
00:00:53.729 --> 00:00:58.395
to a new input, which is non-null so
it's required when writing this operation.

17
00:00:58.395 --> 00:01:01.776
And then I'm going to run
the addPet mutation and

18
00:01:01.776 --> 00:01:04.829
I'm going to satisfy
its input argument and

19
00:01:04.829 --> 00:01:10.540
set that to the newPet variable that I
created above in the CreateAPet operation.

20
00:01:10.540 --> 00:01:12.822
And then I'm gonna ask for these fields.

21
00:01:12.822 --> 00:01:16.503
And as far as the fields go,
I selected the fields id, name, type,

22
00:01:16.503 --> 00:01:20.655
and image because they're the exact
same fields that I have for ALL_PETS.

23
00:01:20.655 --> 00:01:24.305
Because what I wanna do is I
wanna be able to create a pet and

24
00:01:24.305 --> 00:01:26.600
have it show up in the list of Pets.

25
00:01:26.600 --> 00:01:29.970
And to make sure nothing goes wrong,
if no components error out,

26
00:01:29.970 --> 00:01:34.390
I should pass in the exact same
fields that the ALL_PETS query does.

27
00:01:34.390 --> 00:01:38.774
Otherwise, like I said, you could get
an error if your components are expecting

28
00:01:38.774 --> 00:01:41.431
something, you would just
have to do a refetch.

29
00:01:41.431 --> 00:01:45.650
You'd have to refetch the query if you
needed some additional information.

30
00:01:45.650 --> 00:01:49.320
So you don't wanna have to do a refetch
when the mutation can just return exactly

31
00:01:49.320 --> 00:01:52.060
what you need, so you might also
just ask for the same fields.

32
00:01:52.060 --> 00:01:54.210
So I'm asking for the same fields there.

33
00:01:54.210 --> 00:01:59.046
The next thing is I can use
the useMutation hook applied to us by

34
00:01:59.046 --> 00:02:02.305
@apollo/react-hooks useMutation.

35
00:02:02.305 --> 00:02:07.834
And for this I'm just going to pass in
the mutation that we created above,

36
00:02:07.834 --> 00:02:09.920
which is called NEW_PET.

37
00:02:09.920 --> 00:02:13.570
So I'll say NEW_PET, like that.

38
00:02:13.570 --> 00:02:15.840
And then you're gonna get back an array.

39
00:02:15.840 --> 00:02:20.000
The first thing is gonna be the actual
mutation function that you can use

40
00:02:20.000 --> 00:02:21.610
to call the mutation.

41
00:02:21.610 --> 00:02:25.560
So again, unlike useQuery,
useMutation doesn't execute.

42
00:02:25.560 --> 00:02:28.879
It makes a network call when
you instantiate it like this.

43
00:02:28.879 --> 00:02:30.999
It doesn't make the call, and so

44
00:02:30.999 --> 00:02:35.100
you call the function provided
to you from the hook.

45
00:02:35.100 --> 00:02:39.137
And then you get back this object that's
very similar to the object you get when

46
00:02:39.137 --> 00:02:40.003
you use a query.

47
00:02:40.003 --> 00:02:42.650
So it's gonna have a data,
loading, error, and

48
00:02:42.650 --> 00:02:45.056
other things that you
might find necessary.

49
00:02:45.056 --> 00:02:47.817
So I'm just going to name
space mine as newPet.

50
00:02:49.261 --> 00:02:53.221
&gt;&gt; Scott Moss: So now that I have that,
I'm gonna go to this onSubmit function,

51
00:02:53.221 --> 00:02:56.965
which if you looked a little further,
this onSubmit function

52
00:02:56.965 --> 00:03:02.244
is tied to this NewPetModal that has
onSubmit, and you're just passing to that.

53
00:03:02.244 --> 00:03:04.800
That NewPetModal encapsulates
that logic for you, so

54
00:03:04.800 --> 00:03:06.240
you don't have to worry about it.

55
00:03:06.240 --> 00:03:08.770
And it's hidden behind an if (modal) flag.

56
00:03:08.770 --> 00:03:13.666
That flag is toggle to Boolean when you
click on the Create a new pet button.

57
00:03:13.666 --> 00:03:17.200
So you don't have to worry about all that,
ti's just set up context.

58
00:03:17.200 --> 00:03:20.860
So inside his onSubmit function,
I wanna call a createPet.

59
00:03:20.860 --> 00:03:24.780
And any mutation function is going
to take an object of properties and

60
00:03:24.780 --> 00:03:27.700
you can look at the Apollo client docs for
this.

61
00:03:27.700 --> 00:03:30.600
But the one that we're interested in,
in this case is called variables.

62
00:03:31.830 --> 00:03:35.630
And variables are gonna be the exact
same variables as we have down here

63
00:03:35.630 --> 00:03:37.890
in graphical,
which are called Query Variables.

64
00:03:37.890 --> 00:03:42.010
So we want to pass an object
that looks exactly like this.

65
00:03:42.010 --> 00:03:45.870
It has a newPet because that's
the name of the variable

66
00:03:45.870 --> 00:03:47.870
that we declared in our mutation.

67
00:03:47.870 --> 00:03:49.150
Your variable name might be different.

68
00:03:49.150 --> 00:03:52.700
So whatever you named your variable up
here with the $, that's the name of

69
00:03:52.700 --> 00:03:56.060
the variable that you're going to
pass to the variables object here.

70
00:03:56.060 --> 00:03:57.970
And any other variables
that you might have passed.

71
00:03:57.970 --> 00:04:02.960
If for whatever reason you had
other variables here like that,

72
00:04:02.960 --> 00:04:07.630
then you would place that
as a key down here as well.

73
00:04:07.630 --> 00:04:08.500
Minus the dollar sign.

74
00:04:08.500 --> 00:04:10.470
You dont do dollar other.

75
00:04:10.470 --> 00:04:12.380
So if you did that then
that's were these go.

76
00:04:12.380 --> 00:04:13.380
So theres viable go there.

77
00:04:13.380 --> 00:04:17.490
So for use we have a newPet variable and
its type is a NewPetInput.

78
00:04:17.490 --> 00:04:22.055
So I'm gonna say a newPet variable and

79
00:04:22.055 --> 00:04:26.720
its type needs to be NewPetInput.

80
00:04:26.720 --> 00:04:32.940
If you go to look at a NewPetInput it
has a object with a name and a type.

81
00:04:32.940 --> 00:04:36.530
A name is a String and a type is a PetTyp,
which is a enum which is a string.

82
00:04:36.530 --> 00:04:38.180
So it's gotta be CAT or a DOG.

83
00:04:38.180 --> 00:04:43.032
Luckily for you, this input that comes in
on onSubmit is already formatted that way.

84
00:04:43.032 --> 00:04:44.405
It is an object with a name and

85
00:04:44.405 --> 00:04:46.878
a type that's guaranteed
to be one of those enums.

86
00:04:46.878 --> 00:04:48.090
So you don't have to think about it.

87
00:04:48.090 --> 00:04:51.641
So you need just set newPet: input.

88
00:04:51.641 --> 00:04:52.740
And you should be good to go.

89
00:04:53.900 --> 00:04:55.795
So now we have that there.

90
00:04:55.795 --> 00:04:59.557
And the next thing we need to do is
account for when we're loading and

91
00:04:59.557 --> 00:05:01.807
if we have an error and things like that.

92
00:05:01.807 --> 00:05:09.210
So I'll say if loading or
if newPet.loading.

93
00:05:09.210 --> 00:05:15.358
And then I'll say if error or
if newPet.error.

94
00:05:15.358 --> 00:05:17.678
That's it.

95
00:05:17.678 --> 00:05:21.061
So now we're handling the error and
we're handling the loading state.

96
00:05:21.061 --> 00:05:23.493
We should be able to go and create a pet.

97
00:05:23.493 --> 00:05:24.230
So let's try that.

98
00:05:26.160 --> 00:05:28.715
So right now I have these four pets.

99
00:05:28.715 --> 00:05:33.130
[INAUDIBLE] Make a new
Cat call it Garfield.

100
00:05:34.460 --> 00:05:35.695
I can add that cat.

101
00:05:35.695 --> 00:05:40.576
It doesn't show up on the list, but if you
refresh it we should see Garfield there.

102
00:05:42.670 --> 00:05:44.380
&gt;&gt; Scott Moss: All right,
did everyone get to this part?

103
00:05:45.700 --> 00:05:48.700
Were they able to create a pet and
get it going, right?

104
00:05:48.700 --> 00:05:49.580
Pretty simple, right?

105
00:05:49.580 --> 00:05:53.370
I mean, I think it's pretty
intuitive of how Apollo set that up.

106
00:05:53.370 --> 00:06:00.870
Trust me, this is at least for me the
third approach for using Apollo and React.

107
00:06:00.870 --> 00:06:04.750
And so far this is the easiest
approach that I've seen.

108
00:06:04.750 --> 00:06:09.790
Before this, before hooks and
stuff basically

109
00:06:09.790 --> 00:06:12.890
you have to compose the components
using like higher order components,

110
00:06:12.890 --> 00:06:15.730
which in my opinion, using React I'm
not a fan of higher order components.

111
00:06:15.730 --> 00:06:17.375
I think it gets really sloppy, and

112
00:06:17.375 --> 00:06:20.232
I think that's another reason
why they came up with hooks.

113
00:06:20.232 --> 00:06:23.231
Higher order components, wrapping other
components, wrapping other components,

114
00:06:23.231 --> 00:06:25.134
wrapping other components forever and
ever and ever.

115
00:06:25.134 --> 00:06:27.301
To me that can get really sloppy and for

116
00:06:27.301 --> 00:06:31.727
a lot of people it's very confusing to
look at, follow that all the way down.

117
00:06:31.727 --> 00:06:33.230
So that was the other approach.

118
00:06:33.230 --> 00:06:35.620
This one to me just makes way more sense.

119
00:06:35.620 --> 00:06:40.150
Well, also in my opinion,
I find that even though this is simple and

120
00:06:40.150 --> 00:06:44.440
is really intuitive, using Apollo
in other frameworks is even easier.

121
00:06:44.440 --> 00:06:50.020
In Angular and Vue, for me Apollo is a lot
easier to use even in React at this point,

122
00:06:50.020 --> 00:06:50.970
even though this is simple.

123
00:06:50.970 --> 00:06:53.390
So just imagine how simple
those frameworks are to use.

124
00:06:53.390 --> 00:06:56.258
So you get pretty good results here.

125
00:06:56.258 --> 00:06:58.310
And another thing to note is
we don't have to wait on this.

126
00:06:58.310 --> 00:07:00.800
Just like we didn't have to
wait on this use query, and

127
00:07:00.800 --> 00:07:02.400
that's because this is a hook.

128
00:07:02.400 --> 00:07:06.820
When we create a pet, and that comes back
from the server in the background, and

129
00:07:06.820 --> 00:07:10.580
it updates the data property in this
newPet object, this is gonna rerender.

130
00:07:10.580 --> 00:07:14.400
And that's why we have a loading state,
and that's how we have an error state

131
00:07:14.400 --> 00:07:17.400
because we're not, waiting for
this to be resolved.

132
00:07:17.400 --> 00:07:18.750
We don't have to wait at all.

133
00:07:19.790 --> 00:07:22.422
When the data get set,
that's gonna trigger, rerender, and react.

134
00:07:22.422 --> 00:07:25.826
That's the whole point it reacts, when
the state changes, when props changes,

135
00:07:25.826 --> 00:07:28.060
the whole components gonna react.

136
00:07:28.060 --> 00:07:29.860
So, we don't have to worry
about waiting for it.

137
00:07:29.860 --> 00:07:32.640
We just let React do its job, and

138
00:07:32.640 --> 00:07:37.920
we get a new render whenever
any property changes here.

139
00:07:37.920 --> 00:07:40.420
So there's no waiting for
any of that stuff.

140
00:07:40.420 --> 00:07:42.230
If you want to wait for
something, then, yeah,

141
00:07:42.230 --> 00:07:45.540
you could totally do that,
you just wouldn't use a hook.

142
00:07:45.540 --> 00:07:48.393
You would use the client directly,

143
00:07:48.393 --> 00:07:54.397
just like we did earlier today where
we had something like client.query.

144
00:07:54.397 --> 00:07:55.215
You would do something like that.

145
00:07:55.215 --> 00:07:58.410
And this returns a promise, so
you could wait that if you wanted to.

146
00:07:58.410 --> 00:08:02.730
And that's something where you would
want to wait and do things like that.

147
00:08:02.730 --> 00:08:04.410
But the hooks are meant just for

148
00:08:04.410 --> 00:08:08.080
retrieving data inside
a component life cycle.

149
00:08:08.080 --> 00:08:09.240
And that's the whole purpose.

150
00:08:09.240 --> 00:08:12.830
But again, if you were retrieving data
outside of a component life cycle

151
00:08:12.830 --> 00:08:15.530
you probably wouldn't use hooks and
you would just use a client directly and

152
00:08:15.530 --> 00:08:18.680
do a .query or a .mutation because
you're not even inside of React.

153
00:08:18.680 --> 00:08:19.820
So you're probably not even using React.

154
00:08:19.820 --> 00:08:21.880
Maybe you're using jQuery or
something like that.

155
00:08:21.880 --> 00:08:23.570
So you would just use it directly.

156
00:08:23.570 --> 00:08:30.080
So why didn't our panelists update?

157
00:08:30.080 --> 00:08:32.830
Or who expected our pitless
to update automatically?

158
00:08:34.030 --> 00:08:34.931
Okay, one person.

159
00:08:34.931 --> 00:08:38.907
So everybody, I think it's cuz I
told you I wasn't gonna update,

160
00:08:38.907 --> 00:08:40.480
it's stupid question.

161
00:08:40.480 --> 00:08:42.668
Who here knows why I didn't update?

162
00:08:42.668 --> 00:08:43.447
Tiff?

163
00:08:43.447 --> 00:08:47.860
&gt;&gt; Tiff: We need to be able to refresh the
view when there is an update to the data,

164
00:08:47.860 --> 00:08:50.830
like it needs to be tied
to some sort of state.

165
00:08:50.830 --> 00:08:55.170
React right now doesn't know
that the data has changed, so.

166
00:08:55.170 --> 00:08:59.637
&gt;&gt; Scott Moss: Yeah, React doesn't know
that the data's changed because there's

167
00:08:59.637 --> 00:09:03.505
this newPet.data and
we're not even using that anywhere.

168
00:09:03.505 --> 00:09:08.222
I mean, I guess I could,
I don't know, take newpet.data and

169
00:09:08.222 --> 00:09:12.140
append it to data.pets,
just stick it in there.

170
00:09:12.140 --> 00:09:15.200
What you would normally
do here is you say, cool.

171
00:09:15.200 --> 00:09:17.340
I have a data structure,
I have a collection of pets.

172
00:09:17.340 --> 00:09:18.680
That's an array of pets.

173
00:09:18.680 --> 00:09:20.400
I added a new one on the server.

174
00:09:20.400 --> 00:09:21.070
It came back.

175
00:09:21.070 --> 00:09:22.960
I'm just gonna push into this pets array.

176
00:09:22.960 --> 00:09:26.260
If you're using Redux you
would reduce over this and

177
00:09:26.260 --> 00:09:28.160
create a whole new immutable array.

178
00:09:28.160 --> 00:09:31.380
Spread the previous results, add the new
one to the front, and then you're done.

179
00:09:31.380 --> 00:09:32.980
That's what Redux does.

180
00:09:32.980 --> 00:09:36.130
That's what pretty much an immutable
state machine is gonna do.

181
00:09:36.130 --> 00:09:39.685
And that's probably what your first
reaction what to do here, is like,

182
00:09:39.685 --> 00:09:42.248
okay, if you take the data.pets
make a clone of it,

183
00:09:42.248 --> 00:09:45.367
make a new array, add the one that
I just got back from newPets.

184
00:09:45.367 --> 00:09:49.028
And then instead of passing data.pets to
pets down here, I'll pass my new array and

185
00:09:49.028 --> 00:09:50.500
then everything just works.

186
00:09:50.500 --> 00:09:53.802
Yeah, that would work,
100% that would that would work.

187
00:09:53.802 --> 00:09:55.960
But there is a better way to do it.

188
00:09:55.960 --> 00:09:57.540
Because if you do it that way,

189
00:09:57.540 --> 00:10:00.190
sure you updated your components
that have the right state.

190
00:10:00.190 --> 00:10:04.470
And it wold work but your doing all
this cloning of immutable data and

191
00:10:04.470 --> 00:10:05.340
stuff like that.

192
00:10:05.340 --> 00:10:08.467
But your cache, your Apollo cache
wouldn't have the right data in it.

193
00:10:08.467 --> 00:10:12.060
Your cache would still not have
that newPet that you created.

194
00:10:12.060 --> 00:10:15.210
So anything else in your app
that's relying on this query and

195
00:10:15.210 --> 00:10:17.790
that cache is also not gonna have it.

196
00:10:17.790 --> 00:10:21.345
So only this component would be up
to date and no other component.

197
00:10:21.345 --> 00:10:24.183
And you're kinda defeating
the purpose of using a cache.

198
00:10:24.183 --> 00:10:25.844
You're getting to the point where,

199
00:10:25.844 --> 00:10:29.580
I mean you're only one step away from just
storing stuff in a dom at that point.

200
00:10:29.580 --> 00:10:31.580
You must so just go further and do that.

201
00:10:31.580 --> 00:10:33.810
So you don't wanna do that.

202
00:10:33.810 --> 00:10:35.290
Instead, we wanna update the cache.

