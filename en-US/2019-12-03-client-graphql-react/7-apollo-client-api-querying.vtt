WEBVTT

1
00:00:00.170 --> 00:00:04.270
&gt;&gt; Scott Moss: Now we're gonna
talk about queries in React.

2
00:00:04.270 --> 00:00:07.300
And we're gonna do a follow along, so

3
00:00:07.300 --> 00:00:13.290
what I want you to do is if you have
the repo, you can open up the repo here.

4
00:00:13.290 --> 00:00:18.580
And what we're gonna do is we're
going to one, initialize a client.

5
00:00:18.580 --> 00:00:20.910
With Apollo, and
then from there we're gonna go and

6
00:00:20.910 --> 00:00:23.900
start creating some of our first queries.

7
00:00:23.900 --> 00:00:27.690
So if you go to this repo, and there's one
script that you probably wanna run and

8
00:00:27.690 --> 00:00:31.330
that's gonna be yarn app from the root,

9
00:00:31.330 --> 00:00:34.570
make sure you're on the client branch,
make sure you did a yarn or

10
00:00:34.570 --> 00:00:38.750
an mpn install, whatever tool you're
using got all of the dependencies.

11
00:00:38.750 --> 00:00:41.600
And if you're running yarn app,
it's going to build this app and

12
00:00:41.600 --> 00:00:42.960
serve it all into whatever port.

13
00:00:42.960 --> 00:00:45.940
Mines is one, two, three,
four, yours is something else.

14
00:00:45.940 --> 00:00:49.650
I'm building this app using something
called Parcel which is a bundler.

15
00:00:49.650 --> 00:00:52.490
It's super easy to use,
you don't have to do any configuration.

16
00:00:52.490 --> 00:00:55.180
Feel free to look at the package.json
to understand how I'm building

17
00:00:55.180 --> 00:00:56.690
that if you want to.

18
00:00:56.690 --> 00:00:58.050
So I'm just gonna go to this app.

19
00:00:58.050 --> 00:01:00.380
I think I already have it pulled up here.

20
00:01:00.380 --> 00:01:02.510
And if you pull it up you
might see something like this.

21
00:01:02.510 --> 00:01:06.630
This is basic ugly app that says pets and
new pet.

22
00:01:06.630 --> 00:01:08.230
Cuz we're building a pet app.

23
00:01:08.230 --> 00:01:13.230
We're building a app that allows you
to add pets and things like that so

24
00:01:13.230 --> 00:01:16.990
you can keep track of your pets, because
people have hundreds of pets these days.

25
00:01:16.990 --> 00:01:19.370
So they need a way to keep track of them.

26
00:01:19.370 --> 00:01:22.012
This app will help you do it.

27
00:01:22.012 --> 00:01:24.753
And that's what we're gonna be doing,
if you click New Pet,

28
00:01:24.753 --> 00:01:28.300
you get to make a new pet, and nothing
happens, so we're gonna make that work.

29
00:01:29.720 --> 00:01:30.690
So that's your context.

30
00:01:30.690 --> 00:01:35.160
So now what I wanna do is first I
want to create our Apollo client.

31
00:01:35.160 --> 00:01:42.720
So if we hop into a file called client JS,
hop into this thing.

32
00:01:44.470 --> 00:01:45.411
You'll see a couple things here.

33
00:01:45.411 --> 00:01:48.430
One, it says, create a new Apollo client,
an expert is default.

34
00:01:48.430 --> 00:01:50.030
So let's do that together.

35
00:01:50.030 --> 00:01:51.010
And this is where we will talk about,

36
00:01:51.010 --> 00:01:54.240
you're gonna see a lot of
the stuff that I just glazed over.

37
00:01:54.240 --> 00:01:56.240
We're going to go a little
more detail about it.

38
00:01:56.240 --> 00:02:01.050
So the first thing is to create
an Apollo client we need two things.

39
00:02:01.050 --> 00:02:04.840
The first thing we need is going
to be what's called a link.

40
00:02:04.840 --> 00:02:09.490
So we and this is this a name that
they call it a link is basically you

41
00:02:10.500 --> 00:02:13.500
can think of is like a network

42
00:02:13.500 --> 00:02:18.240
interface to access a graph kill server,
we're gonna create a link.

43
00:02:18.240 --> 00:02:20.899
It's basically something you're
gonna do in the network level.

44
00:02:20.899 --> 00:02:25.640
In this case, we need a link to
replace a new HTTP link here.

45
00:02:27.020 --> 00:02:32.600
We need a link that's gonna point to a
server that we're gonna use for this app.

46
00:02:32.600 --> 00:02:37.810
So you use the new HTTP link which is
provided to you from Apollo-link-HTTP.

47
00:02:39.310 --> 00:02:41.740
And I think this takes a URI.

48
00:02:41.740 --> 00:02:46.370
And from here, we're gonna point
it to a server that we have.

49
00:02:46.370 --> 00:02:50.890
So the URL to the server is if you go and

50
00:02:50.890 --> 00:02:56.380
open up a new terminal window here you
can run yarn server in the same repo.

51
00:02:57.900 --> 00:02:59.310
And that should start a server for
you, and

52
00:02:59.310 --> 00:03:00.820
you'll get the URL from that printed out.

53
00:03:00.820 --> 00:03:04.230
For me it's localhost:4000,
yours is probably similar.

54
00:03:04.230 --> 00:03:07.056
So that's the server that we
wanna point this link to.

55
00:03:07.056 --> 00:03:10.710
So we're gonna copy that and
we're gonna paste that into the URI here.

56
00:03:13.810 --> 00:03:15.190
So this is basically saying,

57
00:03:15.190 --> 00:03:19.910
we're getting ready to tell Apollo client,
hey our API is here.

58
00:03:19.910 --> 00:03:23.249
You can have multiple links and
you can have multiple clients,

59
00:03:23.249 --> 00:03:24.955
all different types of things.

60
00:03:24.955 --> 00:03:30.370
But, for this example all we need is URI
and the URL tour server, that's one thing.

61
00:03:30.370 --> 00:03:35.090
The next thing is we need a cache, so by
default Apollo actually gives us a really

62
00:03:35.090 --> 00:03:40.480
cruel one and it's called the
InMemoryCache from Apollo-cache-inmemory.

63
00:03:40.480 --> 00:03:45.747
Now we gotta say cash = new in memory

64
00:03:45.747 --> 00:03:49.960
cache, and in this case,
we don't have to pass in any arguments,

65
00:03:49.960 --> 00:03:53.470
by default it's good to go, we'll
probably get to advanced arguments later.

66
00:03:53.470 --> 00:03:56.287
But this in memory cache is pretty simple,

67
00:03:56.287 --> 00:03:59.820
I believe it's an interface
that anyone can extend.

68
00:03:59.820 --> 00:04:03.767
You can make your own, I think you just
need like a setter getter, like a delete,

69
00:04:03.767 --> 00:04:06.270
you can look at the interface for
this very basic.

70
00:04:06.270 --> 00:04:08.170
I really liked the way
Apollo builds their tools.

71
00:04:08.170 --> 00:04:10.900
They allow you to extend
them super easily.

72
00:04:10.900 --> 00:04:12.507
They build really good foundations and

73
00:04:12.507 --> 00:04:14.852
then they build their tools
on top of those foundations.

74
00:04:14.852 --> 00:04:17.418
Which means you can just build your
tools on top of their foundations and

75
00:04:17.418 --> 00:04:18.370
it just works.

76
00:04:18.370 --> 00:04:22.130
So I really like their approach in memory
caches just the one they provide but

77
00:04:22.130 --> 00:04:24.700
like I said,
you can literally make your own.

78
00:04:24.700 --> 00:04:27.964
You could turn this into local
storage cache if you want,

79
00:04:27.964 --> 00:04:30.005
Ndeg's DB cache if you fancy that.

80
00:04:30.005 --> 00:04:33.254
There's a lot of different things
you can do as long as you use those,

81
00:04:33.254 --> 00:04:36.210
that interface that they created for
the cache.

82
00:04:36.210 --> 00:04:39.510
So once we have our link and our cache
we can go ahead and initialize a client.

83
00:04:39.510 --> 00:04:44.342
So we'll say const client = new.

84
00:04:44.342 --> 00:04:47.770
Apollo client like this.

85
00:04:49.570 --> 00:04:55.200
And we can go ahead and
pass in the link, like that.

86
00:04:55.200 --> 00:04:58.420
And then we can pass in
the cache like that.

87
00:04:58.420 --> 00:05:01.585
And we'll just export this as a default.

88
00:05:06.006 --> 00:05:07.070
&gt;&gt; Scott Moss: Not cache, client.

89
00:05:10.118 --> 00:05:14.932
&gt;&gt; Scott Moss: And that's the simplest way
to create an Apollo client that we can use

90
00:05:14.932 --> 00:05:16.210
inside our app.

91
00:05:16.210 --> 00:05:19.180
And like I said, this has nothing to do
with reacts, there's no react in here.

92
00:05:19.180 --> 00:05:20.510
There's no other framework here.

93
00:05:20.510 --> 00:05:22.613
It's just vanilla JavaScript.

94
00:05:22.613 --> 00:05:26.110
Before we get into the react stuff,
I just wanna test that this client works.

95
00:05:26.110 --> 00:05:28.730
I wanna walk you through the tools and
a lot of things.

96
00:05:28.730 --> 00:05:35.969
So what I'm gonna do is I'm going to go
back to our browser, find it, there it is.

97
00:05:35.969 --> 00:05:40.530
I'm gonna get that Rick and
Morty API here.

98
00:05:40.530 --> 00:05:41.850
We'll copy it.

99
00:05:41.850 --> 00:05:45.599
Like this, and I'm gonna go back to my
client and I'm going to just change

100
00:05:45.599 --> 00:05:49.000
the URI to the Rick and Morty one so
we can use it right quick in here.

101
00:05:51.995 --> 00:05:56.156
&gt;&gt; Scott Moss: So I'm gonna do that, and
what I'm gonna do now is I'm going to just

102
00:05:56.156 --> 00:06:00.730
run a query right here in this file,
log it out, see what happens.

103
00:06:00.730 --> 00:06:05.690
So quickest, easiest way to run a query is
the one first, let's just make a query.

104
00:06:05.690 --> 00:06:08.402
And we can make a query
using this GraphQL tag.

105
00:06:08.402 --> 00:06:13.480
If you've taken any of the service
side graphic courses that we have here

106
00:06:13.480 --> 00:06:18.893
at Frontend Masters, you'll notice that
this GraphQL is a template tag that

107
00:06:18.893 --> 00:06:24.510
allows you to basically write a GraphQL
query inside of template stream.

108
00:06:24.510 --> 00:06:29.040
And it gets to something like
Apollo client can understand to

109
00:06:29.040 --> 00:06:30.688
actually issue a query.

110
00:06:30.688 --> 00:06:33.983
So let's just call it

111
00:06:33.983 --> 00:06:40.774
characters,
&gt;&gt; Scott Moss: Actually I'm

112
00:06:40.774 --> 00:06:45.470
not even gonna do that, I'm gonna just run
it as a promise, so I'll just say, let

113
00:06:45.470 --> 00:06:51.020
me get the query first, const query = gqL
as a template tag, so I do the backticks.

114
00:06:51.020 --> 00:06:55.285
And I was gonna take the query
that I already have from here.

115
00:06:55.285 --> 00:06:59.020
I'm not even gonna do the operation name,
I'm just gonna just grabs a query.

116
00:06:59.020 --> 00:07:00.800
And I do this shorthand method.

117
00:07:00.800 --> 00:07:03.180
First got to put object
literal in there like that.

118
00:07:03.180 --> 00:07:06.590
It's not really object, it's just GraphQL,
but you have to put those brackets.

119
00:07:06.590 --> 00:07:10.313
These brackets right here means, I'm about
to do the shorthand method of a query.

120
00:07:10.313 --> 00:07:15.590
I'm not doing the whole create
a operation name, or nothing like that.

121
00:07:15.590 --> 00:07:16.610
I'm just doing the shorthand method.

122
00:07:16.610 --> 00:07:19.520
That's what those brackets indicate.

123
00:07:19.520 --> 00:07:22.060
I don't know why this spacing is off,
it's really bothering me.

124
00:07:23.680 --> 00:07:24.480
Is anybody else like that?

125
00:07:26.180 --> 00:07:31.919
Why does that not index correctly,
there we go.

126
00:07:31.919 --> 00:07:35.767
So then I could just paste in that
query like that, fix that indentation.

127
00:07:37.895 --> 00:07:39.158
&gt;&gt; Scott Moss: There we go, and

128
00:07:39.158 --> 00:07:44.500
I'm just gonna get rid of these cuz
that's not gonna work, and cool.

129
00:07:44.500 --> 00:07:48.300
I'll just get rid of that a list cuz
it doesn't matter, get rid of that.

130
00:07:48.300 --> 00:07:52.380
And I'll just make sure I get back
an ID or do you already have that cool.

131
00:07:52.380 --> 00:07:53.340
So we have our query here.

132
00:07:53.340 --> 00:07:55.680
And the next thing we can
do is we can say clients.

133
00:07:57.660 --> 00:08:01.500
And you notice there is
a query method here.

134
00:08:01.500 --> 00:08:02.780
We say query.

135
00:08:02.780 --> 00:08:04.400
We can invoke that.

136
00:08:04.400 --> 00:08:06.220
And it just takes a query here.

137
00:08:06.220 --> 00:08:08.410
So options takes query operations.

138
00:08:08.410 --> 00:08:12.460
So if we do this,
I believe it's a query field like that.

139
00:08:12.460 --> 00:08:15.310
And because our query is actually called
query, I can just leave it like that.

140
00:08:16.830 --> 00:08:17.750
That takes a promise.

141
00:08:19.700 --> 00:08:26.356
And we'll get the results and
I'm just gonna log it, boom.

142
00:08:29.700 --> 00:08:30.726
&gt;&gt; Scott Moss: Pretty simple here.

143
00:08:35.459 --> 00:08:36.550
&gt;&gt; Scott Moss: All right,
everybody follow me?

144
00:08:36.550 --> 00:08:37.990
Okay, so

145
00:08:37.990 --> 00:08:43.310
the next thing is I'm just gonna just
import that client inside of index JS.

146
00:08:43.310 --> 00:08:51.125
So I'm just gonna say clients from,
&gt;&gt; Scott Moss: Client.

147
00:08:51.125 --> 00:08:54.410
I'm not gonna do anything with it right
now, but I'm just gonna import that in.

148
00:08:54.410 --> 00:08:57.080
That way it gets initialized when it runs,

149
00:08:57.080 --> 00:08:59.430
cuz index is the actual file
that gets bootstrapped.

150
00:09:00.620 --> 00:09:03.460
Okay, and if nothing broke our
build should still be fine.

151
00:09:03.460 --> 00:09:05.700
This things rebuilds by
itself when you hit save.

152
00:09:05.700 --> 00:09:09.490
Sometimes it'll error out, sometimes
you might get an error in a console,

153
00:09:09.490 --> 00:09:13.020
you might have to rebuild it, but
most of the time it's pretty good.

154
00:09:13.020 --> 00:09:17.286
I got the hot module reloading stuff
happening down here, so we should be good.

155
00:09:17.286 --> 00:09:21.678
All right, now what I'm gonna
do is I'm gonna go to our app,

156
00:09:21.678 --> 00:09:27.990
open up the console here, this thing broke
because I must have misstitled something.

157
00:09:29.910 --> 00:09:33.166
Results results.

158
00:09:33.166 --> 00:09:35.592
Arrow function whoo, we got to have that.

159
00:09:35.592 --> 00:09:39.116
All right, cool, so
it looks like it works.

160
00:09:39.116 --> 00:09:43.816
It issued a query and we got back this
response here, let me blow this up,

161
00:09:43.816 --> 00:09:44.830
got back data.

162
00:09:44.830 --> 00:09:48.338
So every graph kill request
comes back data, right?

163
00:09:48.338 --> 00:09:49.045
Remember that,

164
00:09:49.045 --> 00:09:53.000
it's always going to be a data field
guarantee always going to be a data field.

165
00:09:53.000 --> 00:09:55.610
There are other sibling
fields like errors field.

166
00:09:55.610 --> 00:09:59.110
If you have errors,
you might also see an errors field, but

167
00:09:59.110 --> 00:10:01.643
usually you see a data or
you see an errors.

168
00:10:01.643 --> 00:10:05.210
And then there might be another field for
like, extensions or stuff like that.

169
00:10:05.210 --> 00:10:07.145
But the spec is data and errors.

170
00:10:07.145 --> 00:10:11.390
So data and then boom, here's our query.

171
00:10:11.390 --> 00:10:13.980
We got back characters,
we got back our results.

172
00:10:13.980 --> 00:10:15.670
And we got back all this stuff.

173
00:10:15.670 --> 00:10:17.493
All right, pretty cool.

174
00:10:17.493 --> 00:10:21.806
There is a chrome, if were using Chrome
there's a tool called the Apollo,

175
00:10:21.806 --> 00:10:25.162
Dev tool if you have that,
I'd definitely recommend, or

176
00:10:25.162 --> 00:10:29.620
if you don't have it I'd definitely
recommend installing it.

177
00:10:29.620 --> 00:10:31.720
But let me see,
yeah we don't have it hooked up so

178
00:10:31.720 --> 00:10:37.070
I don't think it's gonna show up
here until we hook it up with react.

179
00:10:37.070 --> 00:10:38.100
No there it is.

180
00:10:38.100 --> 00:10:41.760
So if you have that tool,
and you're able to go to it,

181
00:10:41.760 --> 00:10:46.170
click on it through the dev tools,
click on Apollo, you can go down to cache.

182
00:10:47.480 --> 00:10:50.210
And this tool is using the same
client that we created.

183
00:10:50.210 --> 00:10:53.090
So that client had any
authentication hooked up with it.

184
00:10:53.090 --> 00:10:56.190
Anything that was hooked up to that
client, this tool is using it.

185
00:10:56.190 --> 00:10:56.970
So it's pretty good.

186
00:10:56.970 --> 00:11:00.080
What we're looking at right
now is we're looking at

187
00:11:00.080 --> 00:11:04.910
all the characters that came
back from the API stored flat.

188
00:11:04.910 --> 00:11:06.630
So here's the cache.

189
00:11:06.630 --> 00:11:10.556
Everything is stored flat here,
every single character.

190
00:11:10.556 --> 00:11:13.124
And then we have this thing
called the root query.

191
00:11:13.124 --> 00:11:17.303
And this is the query that we ran
with null operationing basically and

192
00:11:17.303 --> 00:11:22.700
this is how it knows what this query had
and what it's pointing to based on the ID.

193
00:11:22.700 --> 00:11:27.430
So if we were to go update character ten,
any query that had character ten

194
00:11:27.430 --> 00:11:32.220
in it would get the new character ten, and
any view that was referencing that query

195
00:11:32.220 --> 00:11:35.860
would automatically update to show the
character ten without you doing anything.

196
00:11:35.860 --> 00:11:39.780
If you had your app hooked up
in a reactive way that way.

197
00:11:39.780 --> 00:11:43.200
Which most apps like reactive so
it's pretty free.

198
00:11:43.200 --> 00:11:45.250
But yeah,
this is what the cache looks like, right?

199
00:11:45.250 --> 00:11:48.152
And we got back exactly what we asked for
cuz that's how Graph QL works.

200
00:11:48.152 --> 00:11:48.700
Pretty simple.

