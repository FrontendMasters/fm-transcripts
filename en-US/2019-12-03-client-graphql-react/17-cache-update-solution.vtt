WEBVTT

1
00:00:00.320 --> 00:00:02.610
&gt;&gt; Scott Moss: So just looking at
the example that I have pulled up from

2
00:00:02.610 --> 00:00:05.310
the docks,
just kind of go over it one more time.

3
00:00:05.310 --> 00:00:10.350
So use mutation can take an optional
second argument which is an object, and

4
00:00:10.350 --> 00:00:13.040
on an object you can provide
a method called update,

5
00:00:13.040 --> 00:00:17.480
which is going to be called,
after the mutation is processed and

6
00:00:17.480 --> 00:00:21.890
gives you complete control over,
the cache in order to

7
00:00:21.890 --> 00:00:25.340
update the cache with whatever you want
based off of the mutation results.

8
00:00:25.340 --> 00:00:27.810
So the update function
receives two arguments.

9
00:00:27.810 --> 00:00:31.790
One is gonna be the cache that
Apollo is using internally.

10
00:00:31.790 --> 00:00:36.440
And then you're gonna receive
the exact response that the mutation

11
00:00:36.440 --> 00:00:39.090
that you're using is gonna
return from the server.

12
00:00:39.090 --> 00:00:42.270
So nothing more, so this is
literally what your server returned.

13
00:00:42.270 --> 00:00:46.610
An object with .data and whatever the name
of your mutation was if you didn't

14
00:00:46.610 --> 00:00:48.680
put an a list or anything like that,
that's what it's gonna be.

15
00:00:48.680 --> 00:00:52.430
And then the strategy is to

16
00:00:52.430 --> 00:00:57.870
find any query that needs to know about
the update that you just performed.

17
00:00:57.870 --> 00:01:02.090
So in our case we have a query that's
displaying a list of pets, and

18
00:01:02.090 --> 00:01:03.540
we just created a pet.

19
00:01:03.540 --> 00:01:06.260
So that query would need to know
about that new pet, so therefore,

20
00:01:06.260 --> 00:01:09.530
it can update the cache,
which will cause a rerender, and

21
00:01:09.530 --> 00:01:11.700
therefore, our pets should
show up on the page.

22
00:01:11.700 --> 00:01:16.160
So that's what the strategy is, and
you can just use the cache to read

23
00:01:16.160 --> 00:01:19.800
any query that you want based off
the query that you've got a reference to.

24
00:01:19.800 --> 00:01:24.800
And then you can write back to that
query And set the new data yourself.

25
00:01:24.800 --> 00:01:28.570
So data again, this is the same thing
the server would send out on a query.

26
00:01:28.570 --> 00:01:31.440
Your server would send down
object with the data property,

27
00:01:31.440 --> 00:01:34.910
followed by the name of the query,
followed by the value of that.

28
00:01:34.910 --> 00:01:36.580
And that's exactly what you're doing.

29
00:01:36.580 --> 00:01:38.680
It's no more and nothing less than that.

30
00:01:38.680 --> 00:01:41.950
It's exactly what Apollo does internally,
you're just doing it manually.

31
00:01:43.130 --> 00:01:43.854
Following so far?

32
00:01:43.854 --> 00:01:44.790
So let's just do that.

33
00:01:44.790 --> 00:01:47.720
So usurpation we have new pet.

34
00:01:47.720 --> 00:01:51.560
First thing were gonna do is
we're gonna get the cash here and

35
00:01:51.560 --> 00:01:54.250
then we're gonna get the response
back from the server.

36
00:01:54.250 --> 00:01:56.600
I'm just gonna restructure this.

37
00:01:56.600 --> 00:01:57.760
There's a data property on it.

38
00:01:57.760 --> 00:02:02.500
And the only thing I'm interested
in is this app that's right here.

39
00:02:02.500 --> 00:02:05.380
This is the name of my mutations,
probably the name of yours too,

40
00:02:05.380 --> 00:02:06.760
because we had the same server.

41
00:02:06.760 --> 00:02:10.910
We're gonna alias this to something else.

42
00:02:10.910 --> 00:02:13.670
Or if it was just called something else,
that's what would be here, it'd be

43
00:02:13.670 --> 00:02:19.490
something, else something, else like that,
but we're not, we're not releasing it.

44
00:02:21.210 --> 00:02:24.116
So I'm just going to get the app pet.

45
00:02:24.116 --> 00:02:29.610
Like that, the next thing I need to do is
figure out what queries I want to update.

46
00:02:29.610 --> 00:02:32.570
In this case I only have one query and
I would update this one,

47
00:02:32.570 --> 00:02:35.930
the all pets query, so
I'm gonna read the cache for that.

48
00:02:35.930 --> 00:02:41.130
So I'm gonna say, all pets

49
00:02:41.130 --> 00:02:46.690
equals cache.readQuery and

50
00:02:46.690 --> 00:02:49.540
records gonna take an object
here with a query property.

51
00:02:49.540 --> 00:02:52.950
And I'm going to pass
in all pets query here.

52
00:02:52.950 --> 00:02:55.040
So now I got all pets.

53
00:02:55.040 --> 00:02:57.960
And then the next thing I want
is I want to update this query.

54
00:02:57.960 --> 00:03:00.520
So I'm wanna write to that I wanna
completely override what is there, but

55
00:03:00.520 --> 00:03:02.170
what I want to add.

56
00:03:02.170 --> 00:03:07.740
So I can just say cache.writeQuery and

57
00:03:07.740 --> 00:03:11.270
I can say, pass in this object here.

58
00:03:11.270 --> 00:03:14.460
And the first one is well,
let's say query first.

59
00:03:14.460 --> 00:03:15.640
And we'll say allpets.

60
00:03:17.010 --> 00:03:22.060
So I want to update the allpets query
to now have a data property like this.

61
00:03:23.320 --> 00:03:27.260
And then, I have to use the exact
same query name that's up here, so

62
00:03:27.260 --> 00:03:28.260
in this case pets.

63
00:03:29.660 --> 00:03:30.160
Insert there.

64
00:03:32.990 --> 00:03:39.740
Update pets to now be a completely
new array with the allpets

65
00:03:39.740 --> 00:03:44.570
that's inside of it, and the new
one that I created which is addpet.

66
00:03:44.570 --> 00:03:51.000
So I'll just have addpet show up first and
then allpets will be here, allpets.

67
00:03:53.500 --> 00:03:54.430
You can use concat.

68
00:03:54.430 --> 00:03:55.500
You can do whatever you want.

69
00:03:55.500 --> 00:03:56.530
There's a lot of ways you can do it.

70
00:03:56.530 --> 00:03:58.760
Just don't mutate the original.

71
00:04:00.050 --> 00:04:01.960
Everybody following me so far?

72
00:04:01.960 --> 00:04:06.556
I'm pretty sure this comes back as,
&gt;&gt; Speaker 2: You have to destructure

73
00:04:06.556 --> 00:04:07.220
of allpets.

74
00:04:07.220 --> 00:04:08.950
&gt;&gt; Scott Moss: Yeah, I did have
to destructure this you right so

75
00:04:08.950 --> 00:04:12.520
I'll just say allpets.

76
00:04:12.520 --> 00:04:14.220
not think that already is data.

77
00:04:14.220 --> 00:04:18.740
So let me let me just get this data and

78
00:04:18.740 --> 00:04:25.732
I'll say data.pets
&gt;&gt; Scott Moss: There we go.

79
00:04:29.846 --> 00:04:35.896
&gt;&gt; Scott Moss: Cool, so now if we
run our app, get rid of this thing,

80
00:04:35.896 --> 00:04:40.290
refresh, we got five animals here.

81
00:04:40.290 --> 00:04:41.690
Make a new one, a dog.

82
00:04:42.850 --> 00:04:47.180
Goose, boom,
it popped up without me having to refresh.

83
00:04:47.180 --> 00:04:49.520
And it went to the beginning when because
I added it to the beginning of the array.

