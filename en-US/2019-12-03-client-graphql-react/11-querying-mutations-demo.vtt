WEBVTT

1
00:00:00.000 --> 00:00:03.034
&gt;&gt; Scott Moss: Mutations are very
similar to queries, right?

2
00:00:03.034 --> 00:00:04.750
As far as,
as far as graph fields concerned.

3
00:00:04.750 --> 00:00:08.420
Let's go look at,
let's just stay inside of our tools here.

4
00:00:09.500 --> 00:00:11.120
I think the tools are pretty good.

5
00:00:14.030 --> 00:00:15.890
There we go, so stay inside here.

6
00:00:15.890 --> 00:00:20.210
I think this is super helpful to be able
to come in here and like see what your app

7
00:00:20.210 --> 00:00:23.950
is hooked up to and experiment and
try things and stuff like that.

8
00:00:23.950 --> 00:00:26.820
One thing I wanted to note though is,

9
00:00:26.820 --> 00:00:30.040
if you click on this query section you'll
see something called watched queries.

10
00:00:30.040 --> 00:00:34.300
And then, you'll see the actual query that
I created by the operation name, all pets.

11
00:00:34.300 --> 00:00:38.290
If I click on it, you can see all
this interesting stuff about it.

12
00:00:38.290 --> 00:00:40.000
We'll get to watch queries later.

13
00:00:40.000 --> 00:00:44.520
But this is some of the magic that you
get with Apollo, it's really awesome.

14
00:00:44.520 --> 00:00:48.779
And then if you look at the cache, then
obviously, you'll see this stuff here, so

15
00:00:48.779 --> 00:00:51.910
pretty cool.

16
00:00:51.910 --> 00:00:54.700
Anyway, mutations are very
similar to queries.

17
00:00:54.700 --> 00:00:58.340
They are a route type on the schema,
which is like a query is.

18
00:00:58.340 --> 00:01:03.200
And as for our API, the only mutation that
we have is going to the addPet which takes

19
00:01:03.200 --> 00:01:08.960
a required new input type
which is a name and a type.

20
00:01:08.960 --> 00:01:10.890
And a petType is enum, so
it can be a cat or a dog.

21
00:01:10.890 --> 00:01:14.010
It's the only pets we support
on this app right now.

22
00:01:14.010 --> 00:01:17.610
We gotta raise some more money to
support turtles or anything like that.

23
00:01:17.610 --> 00:01:19.520
So it's not gonna happen.

24
00:01:19.520 --> 00:01:21.610
But yeah, mutations very similar.

25
00:01:21.610 --> 00:01:24.880
So what you would do just to
go over it one more time,

26
00:01:24.880 --> 00:01:29.992
just run mutation given operation,
let's say, create a pet,

27
00:01:29.992 --> 00:01:35.272
something like that.

28
00:01:35.272 --> 00:01:39.910
Go away, go away.

29
00:01:39.910 --> 00:01:40.410
There we go.

30
00:01:41.710 --> 00:01:43.400
So I created that.

31
00:01:43.400 --> 00:01:48.870
But unlike the query where we could
just do that, and not really care

32
00:01:48.870 --> 00:01:53.990
about arguments or variables,
remember, mutations, most of the time,

33
00:01:53.990 --> 00:01:57.560
I would say 99% of the time your mutations
are for sure gonna have arguments.

34
00:01:57.560 --> 00:02:00.770
Otherwise, how did your
server know what to mutate?

35
00:02:00.770 --> 00:02:03.330
It has to know what to create,
it has to know what to update,

36
00:02:03.330 --> 00:02:04.675
it have to know what to delete.

37
00:02:04.675 --> 00:02:08.280
And the only way you can do that is
use passive variable and argument.

38
00:02:08.280 --> 00:02:12.660
So unless youre updating or creating
something that doesn't need an info,

39
00:02:12.660 --> 00:02:15.960
youre probably gonna need some
arguments for your mutation.

40
00:02:15.960 --> 00:02:17.999
So youre gonna need some arguments here.

41
00:02:19.780 --> 00:02:23.890
In our case, it's called add pet so
add a pet here.

42
00:02:25.410 --> 00:02:30.390
And then you need some variables, so
in this case I would just name it new pet,

43
00:02:30.390 --> 00:02:32.990
something like that,
call it whatever you want.

44
00:02:32.990 --> 00:02:35.945
And we know that it's supposed
to be a new pet input.

45
00:02:35.945 --> 00:02:40.860
I'm even going to say that it's required
you have to pass us a new pen input.

46
00:02:40.860 --> 00:02:41.670
You can do that here.

47
00:02:41.670 --> 00:02:47.850
I'm putting this exclamation here, after
new pet input to say that the Create a pet

48
00:02:47.850 --> 00:02:54.040
operation requires a new pet variable
whose type is new pet input.

49
00:02:54.040 --> 00:02:57.930
And required means,
it can be known so its nano.

50
00:02:57.930 --> 00:03:02.710
So GraphQL won't execute
[COUGH] this operation

51
00:03:02.710 --> 00:03:06.700
unless you pass a new pet variable
whose type is new input type.

52
00:03:06.700 --> 00:03:08.120
So that's what that means.

53
00:03:08.120 --> 00:03:12.070
It's pretty much guaranteeing that
you actually pass it your variable.

54
00:03:12.070 --> 00:03:14.330
In this case, addPet takes an argument.

55
00:03:14.330 --> 00:03:17.930
We can see what mutation that is,
it's called input.

56
00:03:17.930 --> 00:03:20.560
Right there, it's called input.

57
00:03:20.560 --> 00:03:21.252
So we'll take the input.

58
00:03:24.067 --> 00:03:24.692
&gt;&gt; Scott Moss: Like that.

59
00:03:24.692 --> 00:03:32.338
And we'll set it equal to our
variable which is newPet, like that.

60
00:03:32.338 --> 00:03:35.360
And then from there,
you can just ask for whatever you want.

61
00:03:35.360 --> 00:03:38.350
You want id, always get the ID back.

62
00:03:38.350 --> 00:03:41.730
And then mutations, so
the thing about mutations is you

63
00:03:43.930 --> 00:03:47.080
can ask back for
whatever you want with mutations.

64
00:03:47.080 --> 00:03:49.250
But what you wanna get right here,

65
00:03:49.250 --> 00:03:53.490
is you want to make sure that you think
about when you're writing mutations.

66
00:03:53.490 --> 00:03:56.250
You really wanna consider the queries
that you already wrote or

67
00:03:56.250 --> 00:03:57.950
the queries you will write.

68
00:03:57.950 --> 00:04:00.880
The reason I'm saying that is because,
you get a lot of things for

69
00:04:00.880 --> 00:04:05.570
free if the mutations that
you do return the exact same

70
00:04:05.570 --> 00:04:10.040
fields that the queries before
after this are returning.

71
00:04:10.040 --> 00:04:13.560
So basically, depending on what you're
doing, if you're getting a list of data if

72
00:04:13.560 --> 00:04:16.350
you're getting one thing back or
whatever you're doing.

73
00:04:16.350 --> 00:04:20.370
You might not have to do anything to see
an automatic update in your application.

74
00:04:20.370 --> 00:04:24.740
Because Apollo will be
able to match the IDs

75
00:04:24.740 --> 00:04:28.460
form the results of your mutation and
update them locally for you.

76
00:04:28.460 --> 00:04:30.580
And, if they have the exact same fields,
then everything just works.

77
00:04:30.580 --> 00:04:33.210
If they don't have the exact same fields,
it's not going to happen automatically

78
00:04:33.210 --> 00:04:35.020
for, and
you're going to have to figure things out.

79
00:04:35.020 --> 00:04:38.350
You might have to make an additional
query depending on what that is.

80
00:04:38.350 --> 00:04:42.710
So we're gonna get into different
strategies of keeping your cache in sync.

81
00:04:42.710 --> 00:04:46.650
But the easiest one is, just to have
it happen for you automatically.

82
00:04:46.650 --> 00:04:51.980
And the simplest way to do that by default
is just to make sure you return the same

83
00:04:51.980 --> 00:04:57.280
fields on your mutations, as you do on the
queries that respond with the same data.

84
00:04:57.280 --> 00:04:58.870
So for instance, we're adding a pet.

85
00:04:58.870 --> 00:05:03.200
Therefore, if we're interacting with a pet
type, we have a query that gets all pets.

86
00:05:03.200 --> 00:05:07.100
It would be in our best interest to make
sure that the query that gets all the pets

87
00:05:07.100 --> 00:05:08.650
and the mutation that's adding a pet,

88
00:05:08.650 --> 00:05:13.440
both return the exact same fields,
therefore it'll be a lot easier for us.

89
00:05:13.440 --> 00:05:18.340
It's not gonna give us It's not always
done automatically based off for us.

90
00:05:18.340 --> 00:05:21.230
Because if you have things like list,
like we do, we have to do some,

91
00:05:21.230 --> 00:05:22.460
some manual stuff.

92
00:05:22.460 --> 00:05:23.640
But if it was a one for one thing,

93
00:05:23.640 --> 00:05:28.050
like you got one pet and then you updated
a pet, that'll happen for you for free.

94
00:05:28.050 --> 00:05:30.750
So there are some scenarios
where that stuff happens.

95
00:05:30.750 --> 00:05:33.280
But returning all
the fields is a good point.

96
00:05:33.280 --> 00:05:35.730
And we'll get to a part in the app where,

97
00:05:36.780 --> 00:05:42.280
we can write a piece of a fragment
that helps us not repeat ourselves and

98
00:05:42.280 --> 00:05:44.440
keep writing fields all over and
over and over again.

99
00:05:44.440 --> 00:05:46.650
We can just write it once and
reuse it everywhere.

100
00:05:46.650 --> 00:05:47.780
So we'll do that.

101
00:05:47.780 --> 00:05:49.760
But for now,
make sure you return the same stuff.

102
00:05:49.760 --> 00:05:53.227
So I'm going to say name tied and image.

103
00:05:53.227 --> 00:05:54.436
So I think that's what you want to query.

104
00:05:56.301 --> 00:05:58.551
&gt;&gt; Scott Moss: And if I execute that,
it's not gonna work,

105
00:05:58.551 --> 00:06:01.580
cuz I actually have to add
some variables down here.

106
00:06:01.580 --> 00:06:03.240
So the variable I need is newPet.

107
00:06:04.670 --> 00:06:06.684
NewPet takes in a name.

108
00:06:10.746 --> 00:06:13.561
&gt;&gt; Scott Moss: We'll call it batman.

109
00:06:13.561 --> 00:06:15.170
I do know a dog named batman.

110
00:06:15.170 --> 00:06:16.640
It's a very terrifying dog.

111
00:06:18.180 --> 00:06:23.460
Add a type, which is gonna

112
00:06:23.460 --> 00:06:27.550
be a pet type of dog.

113
00:06:27.550 --> 00:06:28.050
There we go.

114
00:06:30.340 --> 00:06:32.875
So if I execute that,
hey we got a new pet.

115
00:06:32.875 --> 00:06:35.260
Right, so that's mutations.

