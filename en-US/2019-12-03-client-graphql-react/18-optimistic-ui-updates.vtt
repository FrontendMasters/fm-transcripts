WEBVTT

1
00:00:00.320 --> 00:00:06.526
&gt;&gt; Scott Moss: So if I add a delay to this
lets say mid here and let's add a newPet.

2
00:00:09.784 --> 00:00:13.700
&gt;&gt; Scott Moss: Jenkins, cool, we can just
load in screen, pretty awesome, right?

3
00:00:15.150 --> 00:00:19.770
I'm not a fan of that, I don't like
loading screens, I just don't like it.

4
00:00:19.770 --> 00:00:24.000
I mean, maybe you work really hard on that
spinner, and you like it, and it's clean.

5
00:00:24.000 --> 00:00:27.222
You got it off CSS tricks or
code pin and you're like,

6
00:00:27.222 --> 00:00:29.806
this is like the number one rated spinner.

7
00:00:29.806 --> 00:00:34.150
And I spent two days making it a react
component and it's just so great.

8
00:00:34.150 --> 00:00:39.446
I centered it, it's so awesome,
[LAUGH] I know how we get with that stuff.

9
00:00:39.446 --> 00:00:44.660
So I actually don't like it,
I don't like spinners, I like more,

10
00:00:44.660 --> 00:00:50.390
I don't know, fast filling UIs,
things that are more optimized.

11
00:00:50.390 --> 00:00:53.822
I'm in a boat of kind of what
the Facebook's doing with the world,

12
00:00:53.822 --> 00:00:57.826
where they show you the skeleton of
a component and they load it in gradually.

13
00:00:57.826 --> 00:01:01.311
I like things like that,
that's called optimistic UI.

14
00:01:01.311 --> 00:01:06.274
So your UI is optimistic that
the server is gonna respond back with

15
00:01:06.274 --> 00:01:08.630
exactly what they think it is.

16
00:01:08.630 --> 00:01:10.971
So they just went ahead and
did it for you anyway, right?

17
00:01:10.971 --> 00:01:14.287
If you ever played a multiplayer game,
how the architecture works,

18
00:01:14.287 --> 00:01:16.530
you have local state on
the multiplayer game.

19
00:01:16.530 --> 00:01:19.725
So when you're playing a fighting game and
you press a button,

20
00:01:19.725 --> 00:01:21.907
it's gonna happen on your machine first.

21
00:01:21.907 --> 00:01:23.270
And then it goes to the server, and

22
00:01:23.270 --> 00:01:26.481
then the server agrees with all the other
clients and then everything works out.

23
00:01:26.481 --> 00:01:31.510
Everybody sees the same thing, but
it updates on your machine first, right?

24
00:01:31.510 --> 00:01:34.870
When it doesn't update, that's when
you get that lag, it looks different.

25
00:01:34.870 --> 00:01:39.030
We can get that for free with Apollo,
so we can get a that optimistic update

26
00:01:39.030 --> 00:01:43.496
where we just update our local app
before our server even comes back.

27
00:01:43.496 --> 00:01:46.680
And if there's a disagreement well see
some lag, but there's not a disagreement,

28
00:01:46.680 --> 00:01:48.450
no one will ever notice.

29
00:01:48.450 --> 00:01:53.206
They won't even see it load in,
it'll look like it happened instantly and

30
00:01:53.206 --> 00:01:54.650
I'm a big fan of that.

31
00:01:54.650 --> 00:01:59.734
Okay, yeah, Optimistic UI, so here's
my definition have written down for.

32
00:01:59.734 --> 00:02:04.104
Basic ultimate UIs ,when your UI does not
wait until after a mutation operation to

33
00:02:04.104 --> 00:02:05.000
update itself.

34
00:02:05.000 --> 00:02:08.440
Instead, it anticipates
the response from the API and

35
00:02:08.440 --> 00:02:11.371
proceeds as if the API
call was synchronized.

36
00:02:11.371 --> 00:02:14.065
The API response replaces
the generated one,

37
00:02:14.065 --> 00:02:17.520
this gives the illusion of
your app being really fast.

38
00:02:17.520 --> 00:02:20.570
That's basically what Optimistic UI is.

39
00:02:20.570 --> 00:02:25.340
So like I said, Apollo provides a simple
hook that allows you to write to

40
00:02:25.340 --> 00:02:28.290
a local cache after a mutation.

41
00:02:28.290 --> 00:02:31.675
That's not the same thing that we just
did, I know that sounds very simple to,

42
00:02:31.675 --> 00:02:33.810
wait, isn't that just update?

43
00:02:33.810 --> 00:02:38.360
Not quite, because update happens
after a mutation comes back.

44
00:02:38.360 --> 00:02:41.730
So you can do optimistic update,
after the mutations already done,

45
00:02:41.730 --> 00:02:43.320
you already waited.

46
00:02:43.320 --> 00:02:48.172
The hook that I'm talking about which
is the optimistic response is going

47
00:02:48.172 --> 00:02:48.963
to happen.

48
00:02:48.963 --> 00:02:54.067
When, as soon as you execute a mutation,
before it comes back.

49
00:02:55.410 --> 00:02:58.940
That's the whole point of
optimistic response, so

50
00:02:58.940 --> 00:03:01.390
I'm gonna go to GitHub right click.

51
00:03:03.500 --> 00:03:06.099
I wanna simulate some network delay and

52
00:03:06.099 --> 00:03:09.178
we can do this in Apollo
client pretty easily.

53
00:03:09.178 --> 00:03:16.395
Using,
&gt;&gt; Scott Moss: A new link.

54
00:03:16.395 --> 00:03:21.216
So I'm just gonna go grab this link
that I have here, this delay link,

55
00:03:21.216 --> 00:03:26.110
which is pretty cool, bam,
bam, bam, grab that, okay.

56
00:03:26.110 --> 00:03:31.051
So and grab that, too, all right.

57
00:03:33.910 --> 00:03:35.389
&gt;&gt; Scott Moss: So
I'm gonna go back to the client.

58
00:03:37.600 --> 00:03:41.115
&gt;&gt; Scott Moss: And the thing about
links with the clients is that

59
00:03:41.115 --> 00:03:44.380
you can compose them to
do whatever you want.

60
00:03:44.380 --> 00:03:47.070
You can think of them as middleware, you
have many links that do different things.

61
00:03:47.070 --> 00:03:51.238
You can have a link that Intercepts and
grab a JWT from local storage.

62
00:03:51.238 --> 00:03:53.750
You could have a link that
adds something to the header,

63
00:03:53.750 --> 00:03:55.200
you could have a link that logs.

64
00:03:55.200 --> 00:03:59.698
They're basically, if you've ever used
Angular, they're like HTTP interceptors.

65
00:03:59.698 --> 00:04:05.390
If you've used any sophisticated HTTP
client, like axios, they're interceptors.

66
00:04:05.390 --> 00:04:08.334
You can do things before and
after a response is fired,

67
00:04:08.334 --> 00:04:10.384
so that's basically what links are.

68
00:04:10.384 --> 00:04:13.795
So we're gonna add a link that
just delay some network delay, so

69
00:04:13.795 --> 00:04:16.965
we can actually see the benefit
of having an Optimistic UI.

70
00:04:16.965 --> 00:04:20.555
Right now, everything's on local host, so
it's so fast, you won't even notice it,

71
00:04:20.555 --> 00:04:21.437
but we wanna do that.

72
00:04:21.437 --> 00:04:27.760
So what I'm gonna do here is
I'm going to import Apollo,

73
00:04:27.760 --> 00:04:31.861
did I not copy that, where did it go?

74
00:04:31.861 --> 00:04:35.232
There you go I wanna import Apollo
link from Apollo link like that?

75
00:04:41.460 --> 00:04:43.176
&gt;&gt; Scott Moss: And then I'm going to make,

76
00:04:43.176 --> 00:04:46.260
I'm gonna change this link
down here to HTTO link.

77
00:04:47.420 --> 00:04:52.838
Move it above that one,
I’m gonna make a new link,

78
00:04:52.838 --> 00:04:55.611
I’m gonna call it Delay.

79
00:04:55.611 --> 00:04:58.307
And basically, what it’s got to do,

80
00:04:58.307 --> 00:05:02.702
it’s gonna use set context which
is gonna come from imports.

81
00:05:02.702 --> 00:05:06.718
I wanna say set context from

82
00:05:06.718 --> 00:05:12.486
apollo-link-context, like this.

83
00:05:12.486 --> 00:05:15.782
And this will take this takes, it takes a
callback function that takes a request and

84
00:05:15.782 --> 00:05:17.478
you can return whenever you want.

85
00:05:17.478 --> 00:05:21.610
I'm just gonna return a promise that times
out after 800 milliseconds to create

86
00:05:21.610 --> 00:05:22.507
some delay here.

87
00:05:25.982 --> 00:05:29.110
&gt;&gt; Scott Moss: And then I wanna make
a new link composed of those two links.

88
00:05:29.110 --> 00:05:31.996
So the delay link, and
then the HTTP link and

89
00:05:31.996 --> 00:05:37.778
you can do that using the ApolloLink.from
method, which you can get from ApolloLink.

90
00:05:40.805 --> 00:05:42.750
&gt;&gt; Scott Moss: And you put them in
order that you want them to run.

91
00:05:42.750 --> 00:05:44.280
So I want the delay to run first,

92
00:05:44.280 --> 00:05:48.440
then I want the HTTP link, and
then I can keep this link down here.

93
00:05:48.440 --> 00:05:52.620
So basically, from just generates one
link based off a whole bunch of links and

94
00:05:52.620 --> 00:05:53.850
whatever order you send them.

95
00:05:53.850 --> 00:05:57.452
Like I said, it's literally middleware,
whatever order you want,

96
00:05:57.452 --> 00:05:59.478
that's the order they're gonna run.

97
00:06:01.393 --> 00:06:03.813
&gt;&gt; Scott Moss: So it's just a delay,
if you don't feel doing all this, I mean,

98
00:06:03.813 --> 00:06:06.547
you could just go to Chrome and freeze and
Chrome does add a network delay.

99
00:06:06.547 --> 00:06:09.841
The reason I don't wanna put the network
delay or any slower than I have,

100
00:06:09.841 --> 00:06:12.865
is because in the app will take
forever to load up to, cuz the CSS and

101
00:06:12.865 --> 00:06:14.730
the JavaScript will take forever.

102
00:06:14.730 --> 00:06:17.083
I just wanna delay the network
activities as far as APIs,

103
00:06:17.083 --> 00:06:19.103
I don't wanna delay the CSS and
the JavaScript.

104
00:06:19.103 --> 00:06:21.470
We'll be sitting here forever
watching that thing load and

105
00:06:21.470 --> 00:06:23.140
I just don't want to do it.

106
00:06:23.140 --> 00:06:29.020
But you can do a that too if you want,
cool, so now, that we have that simulated.

107
00:06:31.510 --> 00:06:33.066
The update is actually,

108
00:06:33.066 --> 00:06:37.150
I'm sorry, the optimistic UI
stuff is actually pretty simple.

109
00:06:37.150 --> 00:06:42.628
Basically, there's two ways you can use
it where they're both the same way.

110
00:06:42.628 --> 00:06:45.573
But the two places you can use it,
so you can add, basically,

111
00:06:45.573 --> 00:06:50.320
the property you're going to use is called
optimistic response just like this.

112
00:06:50.320 --> 00:06:52.111
It's gonna be an object,
it's not gonna be a function.

113
00:06:52.111 --> 00:06:58.850
So, yeah, optimistic response as a key on
the object that you pass the use mutation.

114
00:07:00.140 --> 00:07:04.956
But you can also add optimistic
response to the key inside

115
00:07:04.956 --> 00:07:08.174
the mutation function that you call.

116
00:07:08.174 --> 00:07:14.289
The difference is basically, it really
depends on what you need access to, right?

117
00:07:14.289 --> 00:07:21.120
So if I wrote a call to optimisticResponse
object up here on the useMutation,

118
00:07:21.120 --> 00:07:26.720
then this is gonna happen for
every single mutation.

119
00:07:26.720 --> 00:07:30.590
Every single time createPet is invoked,
this optimisticResponse is gonna happen,

120
00:07:30.590 --> 00:07:32.320
so it's global, right?

121
00:07:32.320 --> 00:07:35.240
If I were just to call it down on just
this instance, it's only gonna happen

122
00:07:35.240 --> 00:07:39.100
when I invoke it just this one time, if I
invoke it again, it won't happen again.

123
00:07:39.100 --> 00:07:43.162
Also, if you need access
to any input variables,

124
00:07:43.162 --> 00:07:47.721
then you wouldn't want to
place it on the use mutation.

125
00:07:47.721 --> 00:07:50.788
Because you don't have access to
the variables that this mutation is using,

126
00:07:50.788 --> 00:07:53.630
I don't know what any of
the variables are, I don't have them.

127
00:07:53.630 --> 00:07:55.720
The variables don't come in until
you actually call the function,

128
00:07:55.720 --> 00:07:58.180
the variables are here, right here.

129
00:07:58.180 --> 00:07:59.790
So if we need to access the variables for

130
00:07:59.790 --> 00:08:04.540
the optimisticResponse, then you're
gonna need to put them on the createPet.

131
00:08:04.540 --> 00:08:06.330
So now, you know where you can use them.

132
00:08:06.330 --> 00:08:10.010
Basically, the way OptimisticResponse is,
the whole purpose of it is that

133
00:08:10.010 --> 00:08:14.620
you're trying to return an object
that's going to look exactly

134
00:08:14.620 --> 00:08:17.830
like the objects that you think you're
gonna get back from your server.

135
00:08:18.870 --> 00:08:21.208
And that should be pretty easy,
because we're using GraphQL.

136
00:08:21.208 --> 00:08:23.620
And we know exactly what we're
getting back from the server.

137
00:08:23.620 --> 00:08:26.850
So we should be able to determine
what the objects gonna look like.

138
00:08:26.850 --> 00:08:33.280
So in my example, if I was creating a pet,
what am I gonna get back from the server?

139
00:08:33.280 --> 00:08:36.122
Well, I've just got to look at a mutation,
I'm getting back an ID,

140
00:08:36.122 --> 00:08:37.160
I know that's a stream.

141
00:08:37.160 --> 00:08:38.397
If I didn't know that was a stream,

142
00:08:38.397 --> 00:08:40.200
I can go look at the schema
inside of Apollo Tools.

143
00:08:40.200 --> 00:08:43.070
I know that's a stream or
an ID type, same thing.

144
00:08:43.070 --> 00:08:44.762
I'm getting back a name
which I know is a stream.

145
00:08:44.762 --> 00:08:47.220
I'm getting back a type
which I know is an enum.

146
00:08:47.220 --> 00:08:49.380
I can even go look at
those enums in the schema.

147
00:08:49.380 --> 00:08:53.350
And I'm getting back an image
which is also a stream, so

148
00:08:53.350 --> 00:08:58.040
if I return an object that looks
like that, I should be good to go.

149
00:08:58.040 --> 00:09:03.150
That’s basically, what you have to
return here, plus some extra things.

150
00:09:03.150 --> 00:09:09.200
For instance, you don’t see this, but
Apollo and most graphical frameworks

151
00:09:09.200 --> 00:09:14.650
automatically add an underscore
typename to all your queries.

152
00:09:14.650 --> 00:09:17.199
So every single query that you have,
this gets added.

153
00:09:17.199 --> 00:09:20.620
You just don't see it in the tools like
playground, they just get rid of it.

154
00:09:20.620 --> 00:09:24.000
But if you look at the response on the
data that's coming back from the network,

155
00:09:24.000 --> 00:09:24.990
you'll see this.

156
00:09:24.990 --> 00:09:28.760
And the typename is gonna be the name of
the type that you're trying to retrieve.

157
00:09:28.760 --> 00:09:32.220
So in this case, the name of this type
would probably be Pet with a capital P,

158
00:09:32.220 --> 00:09:34.400
cuz that's what our
schema defines this as.

159
00:09:34.400 --> 00:09:38.647
So you would have to add those type names
here as well for every single type.

160
00:09:38.647 --> 00:09:42.735
And not just for the types that
you're getting, but also for

161
00:09:42.735 --> 00:09:47.176
the higher level types, like for
instance, mutation or query.

162
00:09:47.176 --> 00:09:48.600
You got to add those type names,

163
00:09:48.600 --> 00:09:52.880
too, you got to be very explicit about
exactly what you're gonna get back.

164
00:09:52.880 --> 00:09:55.140
And like I said, these are the things
we know we're getting back.

165
00:09:55.140 --> 00:09:57.870
And now I'm telling you about
the things that definitely come back,

166
00:09:57.870 --> 00:09:59.430
you just don't see.

167
00:09:59.430 --> 00:10:01.580
And this is the time where you
have to be explicit about those.

168
00:10:01.580 --> 00:10:05.360
So basically,
show you what I'm talking about.

169
00:10:05.360 --> 00:10:08.850
Basically, I said you return an object and
in this case,

170
00:10:08.850 --> 00:10:11.180
the type name is probably
always gonna be mutation.

171
00:10:11.180 --> 00:10:14.030
Cuz you're only running optimistic
response when you mutate something.

172
00:10:14.030 --> 00:10:19.560
So the overall operation, it's type name
is mutation, so a mutation is a type.

173
00:10:19.560 --> 00:10:22.870
It's just a very specific type that
graph cares about, but it is a type,

174
00:10:22.870 --> 00:10:23.880
just like Pet is a type.

175
00:10:25.100 --> 00:10:26.480
So we're gonna say type name, mutation.

176
00:10:26.480 --> 00:10:27.860
And then from there,

177
00:10:27.860 --> 00:10:32.370
you add a key with the exact name
of the mutation that you're in.

178
00:10:32.370 --> 00:10:35.380
So if your mutation was called at
pet that's what this will be called,

179
00:10:35.380 --> 00:10:36.480
it will be called at pet.

180
00:10:36.480 --> 00:10:37.706
You're running at pet, and

181
00:10:37.706 --> 00:10:40.786
then you will start putting all
the fields that you expect to come back.

182
00:10:40.786 --> 00:10:43.337
And then the only difference is you
have to get those fields values,

183
00:10:43.337 --> 00:10:46.710
you need to give them values that you
think your server is gonna give you back.

184
00:10:46.710 --> 00:10:49.902
Some values you can't compute, for
instance, you can't compute an ID,

185
00:10:49.902 --> 00:10:51.078
your database creates ID.

186
00:10:51.078 --> 00:10:52.250
How would you know that?

187
00:10:52.250 --> 00:10:54.250
That's fine,
you don't have to put the exact ID.

188
00:10:54.250 --> 00:10:57.240
This whole thing is gonna get replaced
when it comes back from the server anyway.

189
00:10:57.240 --> 00:11:01.590
But you need to put a value that
satisfies the ID requirement.

190
00:11:01.590 --> 00:11:04.730
So in our example an ID is an ID type,
which is a string.

191
00:11:04.730 --> 00:11:06.970
So you could literally put
any string you want in here.

192
00:11:06.970 --> 00:11:10.952
Or if you actually have the ID,
because maybe this mutation is an update.

193
00:11:10.952 --> 00:11:13.403
So you have access to
the ID through a variable,

194
00:11:13.403 --> 00:11:16.080
you can actually put the real ID there.

195
00:11:16.080 --> 00:11:20.226
In our example, we're doing a creation, so
we don't have access to an actual ID, so

196
00:11:20.226 --> 00:11:22.486
we got to make up one,
so you'll make up an ID.

197
00:11:22.486 --> 00:11:26.827
You also have to put the type name for
the type that the update comment,

198
00:11:26.827 --> 00:11:29.480
in this case, mutation returns.

199
00:11:29.480 --> 00:11:31.550
In your example,
it'll probably be Pet with a capital P.

200
00:11:31.550 --> 00:11:34.800
That'll be the type name, and then you
need to put all the other fields that you

201
00:11:34.800 --> 00:11:36.520
expect that mutation to come back with.

202
00:11:36.520 --> 00:11:39.446
So things like an image which
anticipates it being your stream,

203
00:11:39.446 --> 00:11:40.973
you can put a placeholder there.

204
00:11:40.973 --> 00:11:44.250
I think there's also a type for
a pet and it has to be enum.

205
00:11:44.250 --> 00:11:47.103
So it has to be either a DOG or
CAT in all caps.

206
00:11:47.103 --> 00:11:49.415
You have to put a name,
you can make it whatever you want, or

207
00:11:49.415 --> 00:11:51.855
you can use the name that's
coming in as a variable.

208
00:11:51.855 --> 00:11:55.714
Cuz you have access to that, same thing
with the type, you have access to that.

209
00:11:55.714 --> 00:12:00.477
And then that's all you gotta do is
you need to return an object that

210
00:12:00.477 --> 00:12:05.597
looks exactly like the response you
expect to get back from the server.

211
00:12:05.597 --> 00:12:09.229
You know you got it right, because one you
won't see any warnings in the console,

212
00:12:09.229 --> 00:12:11.082
cracky will probably give you a warning.

213
00:12:11.082 --> 00:12:15.114
If you try if you miss a field or
something, I couldn't do this, because you

214
00:12:15.114 --> 00:12:19.347
don't have an ID field, couldn't do this,
because this image isn't there.

215
00:12:19.347 --> 00:12:22.497
It'll give you a warning, it won't break,
cuz it gives you a warning, or

216
00:12:22.497 --> 00:12:23.859
at least Apollo it not GraphQL.

217
00:12:23.859 --> 00:12:27.536
But you know you got it right,
because you won't see a delay, so

218
00:12:27.536 --> 00:12:28.980
that delay that I added.

219
00:12:30.440 --> 00:12:31.900
Let's take a look at it.

220
00:12:31.900 --> 00:12:36.030
So if I add a newPet,

221
00:12:36.030 --> 00:12:40.970
that 802nd delay, you won't see that you
won't even see a loading screen at all.

222
00:12:40.970 --> 00:12:43.520
It just won't be there,
it'll just be good to go.

223
00:12:43.520 --> 00:12:44.820
But in order to enable that,

224
00:12:46.710 --> 00:12:49.960
you need to opt out of having
a loading screen in the first place.

225
00:12:49.960 --> 00:12:56.617
So let me get rid of this,
get rid of that.

226
00:12:56.617 --> 00:13:00.659
You need to tell our Boolean here,
cuz right now, at least for me, I have

227
00:13:00.659 --> 00:13:05.750
if the query is loading or if that newPet
mutation is loading, then show the loader.

228
00:13:05.750 --> 00:13:07.250
Now, I never want to show the loader for

229
00:13:07.250 --> 00:13:10.540
the newPet mutation, just don't
even show it, cuz I'm opting in.

230
00:13:10.540 --> 00:13:13.300
For optimistic UI,
I never wanna show a loader.

231
00:13:13.300 --> 00:13:15.350
If you still have that,
even with optimistic UI,

232
00:13:15.350 --> 00:13:16.480
it's still gonna show a loader.

233
00:13:16.480 --> 00:13:18.430
Because the loading is still gonna toggle,
the true or

234
00:13:18.430 --> 00:13:21.420
false, even though you
optimistically already updated it.

235
00:13:21.420 --> 00:13:23.660
You don't wanna do optimistic update and

236
00:13:23.660 --> 00:13:25.840
have a loading screen that
kind of defeats the purpose.

237
00:13:25.840 --> 00:13:28.270
So you gotta turn one of them on and
other one off.

238
00:13:28.270 --> 00:13:32.085
So I'm opting out of showing a loading
screen for my newPet mutation and

239
00:13:32.085 --> 00:13:34.610
I'm opting in for optimistic response.

