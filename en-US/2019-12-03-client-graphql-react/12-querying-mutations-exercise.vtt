WEBVTT

1
00:00:00.070 --> 00:00:02.370
&gt;&gt; Scott Moss: So the only thing you're
going to need to know at this point

2
00:00:02.370 --> 00:00:05.050
is how, I mean,
cuz we're in graphical right now.

3
00:00:05.050 --> 00:00:07.880
So they have this really
nice auto completed section

4
00:00:07.880 --> 00:00:10.830
down here where we can add variables,
but in React, in the code,

5
00:00:10.830 --> 00:00:13.220
how do we add the variables
cuz we don't have this?

6
00:00:13.220 --> 00:00:14.730
So that's the only thing
you're gonna need to know.

7
00:00:14.730 --> 00:00:15.950
I'm just gonna give you
a quick walkthrough.

8
00:00:15.950 --> 00:00:19.340
So if you follow along and you still have
this, this is great because remember,

9
00:00:19.340 --> 00:00:22.960
you can write your stuff in here and just
copy it in your code, and it just works.

10
00:00:22.960 --> 00:00:27.190
If you ran into here and it worked, it's
probably going to work in your code too.

11
00:00:27.190 --> 00:00:31.270
Because remember, what's happening in
this Apollo DevTools graphical client

12
00:00:31.270 --> 00:00:34.560
is using the exact same client that
you configure it in your client file.

13
00:00:34.560 --> 00:00:37.810
So whatever authentication,
whatever middleware, whatever anything you

14
00:00:37.810 --> 00:00:42.460
have set up, it's probably gonna work
the exact same way that it does here, so I

15
00:00:42.460 --> 00:00:46.280
always test myself in here first before I
put in my code, it's a really good habit.

16
00:00:47.430 --> 00:00:52.890
So in order to use mutations in React,

17
00:00:52.890 --> 00:00:55.600
you might notice there's a function
up here called Use Mutation.

18
00:00:56.610 --> 00:00:57.920
This is also a hook.

19
00:00:57.920 --> 00:01:00.480
Remember, you don't really
need to know much about hooks

20
00:01:00.480 --> 00:01:02.400
in order to understand what's going on.

21
00:01:02.400 --> 00:01:08.740
So the goal is to be able
to go to our app here,

22
00:01:08.740 --> 00:01:11.380
click on New Pet,
which goes to this model that's very tiny.

23
00:01:11.380 --> 00:01:13.660
Over here, you can select a dog or
a cat, and

24
00:01:13.660 --> 00:01:16.350
if you hit that button, it'll create one.

25
00:01:16.350 --> 00:01:20.343
Right now, it's not because I
don't have anything there, so

26
00:01:20.343 --> 00:01:22.060
it only still have
the three pets that I had.

27
00:01:23.370 --> 00:01:24.760
You need to get that to work.

28
00:01:24.760 --> 00:01:27.194
Don't worry about the React stuff,
it's already hooked up.

29
00:01:27.194 --> 00:01:28.760
You just got to make
the graph kill stuff work.

30
00:01:29.860 --> 00:01:35.860
So in order to do that, you have
this use mutation function up top.

31
00:01:35.860 --> 00:01:42.060
And the way you're going to do that is
you're going to declare a variable.

32
00:01:44.200 --> 00:01:46.440
Actually, I'm not going to do it for
you, I'll show you the answers.

33
00:01:46.440 --> 00:01:47.410
You almost trick me.

34
00:01:48.810 --> 00:01:54.440
The usemutation function, basically, what
it does is it's going to take a query,

35
00:01:54.440 --> 00:01:57.500
just like this one, just like we made
all pets using the graph geotag.

36
00:01:57.500 --> 00:02:03.150
You're going to make another query
that's going to be mutation this time,

37
00:02:03.150 --> 00:02:06.008
and it's going to look very similar
to this, if not exactly this.

38
00:02:06.008 --> 00:02:11.497
And then useMutation,
its syntax is unlike useQuery.

39
00:02:11.497 --> 00:02:15.420
So useMutation doesn't return an object,
it actually returns an array.

40
00:02:15.420 --> 00:02:19.615
And the only difference with this
one is the first argument inside of

41
00:02:19.615 --> 00:02:22.680
useMutation is actually gonna
be the mutation function, so

42
00:02:22.680 --> 00:02:25.730
this is where you're going to
actually mutate something.

43
00:02:25.730 --> 00:02:27.864
So I'll just write it out.

44
00:02:27.864 --> 00:02:32.752
So actually, I'll call it like createPet,
you can call it whatever you want.

45
00:02:32.752 --> 00:02:38.709
The second argument is gonna be
the same thing that useQuery has,

46
00:02:38.709 --> 00:02:44.576
where you get an object back that
has a data loading and an error.

47
00:02:44.576 --> 00:02:49.801
And then you can do useMutation like that,
and then you pass in your mutation,

48
00:02:49.801 --> 00:02:53.776
whatever you made up here,
you're gonna make a mutation.

49
00:02:53.776 --> 00:02:56.711
This createPet, or
whatever you call this first argument,

50
00:02:56.711 --> 00:02:59.820
that's the actual function
that's gonna make the mutation.

51
00:02:59.820 --> 00:03:03.240
When you call the useMutation, it's
not actually going to do the mutation.

52
00:03:03.240 --> 00:03:08.930
Unlike useQuery, it will run your
query as soon as you call useQuerry,

53
00:03:08.930 --> 00:03:11.230
useMutation doesn't run the mutation.

54
00:03:11.230 --> 00:03:13.630
The mutation happens when
you execute this function.

55
00:03:15.260 --> 00:03:18.370
Whatever your first argument is in
your array, when you execute that,

56
00:03:18.370 --> 00:03:22.930
that is a function, when you execute that,
that's when the mutation is going to run.

57
00:03:24.340 --> 00:03:26.670
So what you wanna do in your React app,

58
00:03:26.670 --> 00:03:32.420
there's this onSubmit function
here that closes a model.

59
00:03:32.420 --> 00:03:33.900
Before or after you close the model,

60
00:03:33.900 --> 00:03:36.350
that's where you wanna
execute your mutation.

61
00:03:36.350 --> 00:03:39.555
This this onSubmit gets happened when
you click that button on that model that

62
00:03:39.555 --> 00:03:40.790
creates a pet.

63
00:03:40.790 --> 00:03:42.150
So it's going to take an input.

64
00:03:42.150 --> 00:03:46.420
This input is going to have a type and
a name for a pet.

65
00:03:46.420 --> 00:03:48.310
It's an object with a type in a name.

66
00:03:48.310 --> 00:03:50.510
So using that type in the name,

67
00:03:50.510 --> 00:03:55.910
you need to use this function,
this mutation function here.

68
00:03:55.910 --> 00:03:57.050
Like I said, it is a function.

69
00:03:58.080 --> 00:04:04.350
And it takes an object, and on this object
exists a property called variables,

70
00:04:04.350 --> 00:04:05.950
the same variables that we have down here.

71
00:04:07.130 --> 00:04:09.960
See how we pass the variables down here,
this exact same way

72
00:04:09.960 --> 00:04:13.760
with the same name that we created in
our mutation, newPet, newPet, newPet?

73
00:04:14.770 --> 00:04:16.910
That's what the variables
property does here.

74
00:04:18.270 --> 00:04:20.700
And we get the variables that
we want from this input.

75
00:04:20.700 --> 00:04:25.170
This input object is an object with a type
and a name on it already guaranteed.

76
00:04:25.170 --> 00:04:28.795
We just need to find a way to pass it
to our createPet mutation as variables.

77
00:04:32.445 --> 00:04:36.110
&gt;&gt; Scott Moss: So once you have that,
you're pretty much good.

78
00:04:36.110 --> 00:04:37.518
That's all you gotta do to do a mutation.

79
00:04:41.161 --> 00:04:42.020
&gt;&gt; Scott Moss: Everybody follow me?

80
00:04:43.140 --> 00:04:49.790
Okay, now, you're going to do that and
you're going to find out,

81
00:04:49.790 --> 00:04:52.810
although it did work, it didn't work
the way you thought it was going to work.

82
00:04:53.940 --> 00:04:58.150
You might not see your pet list update
with the new thing that you created,

83
00:04:58.150 --> 00:04:59.250
that's intentional.

84
00:04:59.250 --> 00:05:03.010
You won't see it update in this use case,
and when we get back, you'll figure out

85
00:05:03.010 --> 00:05:07.070
why that didn't happen, although you
probably thought it would, but it didn't.

86
00:05:08.290 --> 00:05:10.760
But as long as your mutation works,
usually fine.

87
00:05:10.760 --> 00:05:12.050
Other thing to take note of,

88
00:05:12.050 --> 00:05:15.320
you still have to handle your loading and
your error.

89
00:05:15.320 --> 00:05:18.330
So remember to handle that,
it should be easy to just come in here and

90
00:05:18.330 --> 00:05:22.050
just be like, or this thing is loading.

91
00:05:22.050 --> 00:05:26.060
And don't do what I just did here,
which is confuse these and

92
00:05:26.060 --> 00:05:31.110
override these variables here,
I put data loading and error.

93
00:05:32.110 --> 00:05:34.390
So Javascripting already
have data loading error.

94
00:05:34.390 --> 00:05:36.680
Now, I'm declaring them again,
so that's not gonna work.

95
00:05:36.680 --> 00:05:41.350
So you probably just wanna just
maybe call this like newPet object.

96
00:05:41.350 --> 00:05:45.758
And then you can like, newPet.data,
newPet.loading, newPet.error,

97
00:05:45.758 --> 00:05:47.380
something like that.

98
00:05:47.380 --> 00:05:52.310
Or just, if you're feeling like writing
a lot of variable name changes you can

99
00:05:52.310 --> 00:05:54.820
just come in here and
call this something else, like that.

100
00:05:56.620 --> 00:06:01.170
If you fancy that, so it's a lot, but
you can do that too, up to you, but

101
00:06:01.170 --> 00:06:03.250
just don't give them the same
name because it won't work.

102
00:06:06.160 --> 00:06:08.010
Let's go to this, put pet on my newPet.

103
00:06:08.010 --> 00:06:09.610
There we go.

104
00:06:12.930 --> 00:06:15.600
Cool, everybody understand
what they're doing.

105
00:06:15.600 --> 00:06:19.020
So when you do that the result should
be exactly the same as what I did here.

106
00:06:19.020 --> 00:06:21.585
There should be a mutation
that returns the data, and

107
00:06:21.585 --> 00:06:23.979
if you were to go look in
the database in db.json,

108
00:06:23.979 --> 00:06:26.605
you would actually see it pop
up just like this one did.

