WEBVTT

1
00:00:00.280 --> 00:00:04.100
&gt;&gt; Speaker 1: Welcome back, hopefully
everyone had enough time to write a query

2
00:00:04.100 --> 00:00:09.040
for the pets react page to Fets and
Pets, and if you went the extra step you

3
00:00:09.040 --> 00:00:14.058
might've even added some pets based off
the pet type in our graphical schema,

4
00:00:14.058 --> 00:00:17.420
to the sense so you can actually
see some pets show up on the page.

5
00:00:17.420 --> 00:00:21.095
If you didn't get that far, don't worry,
I'm gonna walk through it right now.

6
00:00:21.095 --> 00:00:26.397
All right, first thing first is let's
figure out what query we're writing and

7
00:00:26.397 --> 00:00:28.860
go ahead and pass it to our use query.

8
00:00:28.860 --> 00:00:31.351
So in order to do that, what we'll do is,

9
00:00:31.351 --> 00:00:35.790
let me just comment this stuff out just
in case it's broken on my version.

10
00:00:35.790 --> 00:00:43.730
What we'll do is we'll go to the app
here and, let me refresh this.

11
00:00:43.730 --> 00:00:45.960
Looks like I've still got stuff broken.

12
00:00:45.960 --> 00:00:47.720
Yeah, pets not defined.

13
00:00:47.720 --> 00:00:48.395
Get rid of that.

14
00:00:51.235 --> 00:00:54.260
&gt;&gt; Speaker 1: Cool, so
we'll go to the Apollo dev tools.

15
00:00:55.420 --> 00:00:57.550
Sometimes you've gotta refresh it.

16
00:00:57.550 --> 00:00:58.630
There we go.

17
00:00:58.630 --> 00:01:01.950
And if we click on the Docs,
we can see Query.

18
00:01:01.950 --> 00:01:03.190
And we wanna get the pets queries.

19
00:01:03.190 --> 00:01:04.580
So that's the name of it, pets.

20
00:01:05.850 --> 00:01:10.230
It takes optional arguments, pets
input and it returns an array of pets.

21
00:01:10.230 --> 00:01:11.260
So that's the one that we're gonna do.

22
00:01:11.260 --> 00:01:12.940
I already have it here.

23
00:01:12.940 --> 00:01:16.210
So what I like to do is I like to just
go ahead and write my query in here and

24
00:01:16.210 --> 00:01:16.930
get it all ready.

25
00:01:16.930 --> 00:01:20.960
So I'm gonna give it a operation name
of something called like allPets.

26
00:01:20.960 --> 00:01:22.640
You can call it whatever you want.

27
00:01:22.640 --> 00:01:27.410
And then I wanna put my query in here and
the important things,

28
00:01:27.410 --> 00:01:30.020
oops, this thing is all formatted for me.

29
00:01:31.710 --> 00:01:32.930
There we go.

30
00:01:32.930 --> 00:01:34.850
Why is this acting so weird?

31
00:01:34.850 --> 00:01:39.358
Wait!
[SOUND] pets, there we go!

32
00:01:39.358 --> 00:01:44.300
The important thing is if we only ask for
one thing it's gonna be the ID.

33
00:01:44.300 --> 00:01:47.540
Like if that's the one thing you ask for,
make sure you get the ID back.

34
00:01:47.540 --> 00:01:52.850
And remember because we need that
to cache, because without this what

35
00:01:52.850 --> 00:01:58.690
Apollo's going to do, it's going to use
the path to the node based on the query

36
00:01:58.690 --> 00:02:03.622
as an index to store it, and
that is a lot harder for

37
00:02:03.622 --> 00:02:08.310
Apollo to do automatic updates
when you do things like mutations,

38
00:02:08.310 --> 00:02:09.960
because it's gonna be a different path.

39
00:02:09.960 --> 00:02:12.770
So I highly recommend
always setting down an ID.

40
00:02:12.770 --> 00:02:14.700
Otherwise, you'd have to
update that yourself.

41
00:02:14.700 --> 00:02:16.730
So do that.

42
00:02:16.730 --> 00:02:20.330
Let's get a name, let's get a type and
let's get the image.

43
00:02:20.330 --> 00:02:22.300
So execute that, empty array.

44
00:02:22.300 --> 00:02:23.860
That means it didn't break,
so that's good.

45
00:02:23.860 --> 00:02:25.270
And I was gonna copy that query.

46
00:02:25.270 --> 00:02:28.120
Now I'm gonna go back to our code and
I'm gonna make a query.

47
00:02:29.610 --> 00:02:34.140
What most people do is the convention is,
if you ever use something redux or

48
00:02:34.140 --> 00:02:40.200
anything like that, you kinda name your
queries using all caps, and underscore.

49
00:02:40.200 --> 00:02:45.030
So, I'm just gonna name this the ALL_PETS.

50
00:02:45.030 --> 00:02:45.757
Query like that.

51
00:02:48.834 --> 00:02:50.205
&gt;&gt; Speaker 1: And
I'm just gonna paste in my query.

52
00:02:52.853 --> 00:02:56.080
&gt;&gt; Speaker 1: Boom, so
now we got ALL_PETS, we got our pets here.

53
00:02:57.520 --> 00:02:59.250
And I can go down to useQuery.

54
00:02:59.250 --> 00:03:02.410
So again, this is a hook but you don't
really need to know that it's a hook.

55
00:03:02.410 --> 00:03:04.248
Just think of it as a function
that takes a query.

56
00:03:04.248 --> 00:03:06.670
In this case,ALL_PETS.

57
00:03:06.670 --> 00:03:08.790
And it's just gonna return
an object that has the data.

58
00:03:08.790 --> 00:03:11.940
A Boolean, if it's loading or not.

59
00:03:11.940 --> 00:03:15.100
Because this does happen asynchronously
in the background for you.

60
00:03:15.100 --> 00:03:18.700
And I said the background,
because you don't have to do this.

61
00:03:18.700 --> 00:03:21.500
There's no await, you're not waiting for
this to come back.

62
00:03:21.500 --> 00:03:23.190
And that's why there's
a loading property here,

63
00:03:23.190 --> 00:03:26.030
cuz this could be happening
in the background.

64
00:03:26.030 --> 00:03:31.910
And just like in React where you do set
state, what happens is once this promises

65
00:03:31.910 --> 00:03:36.860
resolve and there's no error, the data
gets set which causes this property to be

66
00:03:36.860 --> 00:03:41.650
updated with the correct data which causes
a re-render of this entire component.

67
00:03:41.650 --> 00:03:46.487
So this entire component re-renders
whenever any one of these states used from

68
00:03:46.487 --> 00:03:48.130
a hook is changed.

69
00:03:48.130 --> 00:03:50.320
And that's what causes a re-render.

70
00:03:50.320 --> 00:03:55.050
So when data is changed because your query
was resolved in the background, you're

71
00:03:55.050 --> 00:03:59.610
gonna get a re-render, and now data will
have some data, and loading will be false.

72
00:03:59.610 --> 00:04:01.960
And if you don't have any errors,
this won't be anything as well.

73
00:04:03.820 --> 00:04:08.390
But we need to handle that because if
we just try to use data right now,

74
00:04:08.390 --> 00:04:12.870
it's gonna break because the data will for
sure be undefined if loading is false

75
00:04:12.870 --> 00:04:15.948
because it's still loading, so
we have to handle that used case.

76
00:04:15.948 --> 00:04:19.930
If you looked up top you might notice
there's a loader component here, so

77
00:04:19.930 --> 00:04:26.340
we can just copy that and
you can do something like, if loading,

78
00:04:27.340 --> 00:04:32.880
you can just return that
loader component like that.

79
00:04:32.880 --> 00:04:35.100
And that will do a loading for you.

80
00:04:35.100 --> 00:04:36.910
And then you just need handle errors.

81
00:04:36.910 --> 00:04:41.660
If there was an error,
you can return whatever you want.

82
00:04:41.660 --> 00:04:46.412
In this case,
I'll just return like a P tag

83
00:04:46.412 --> 00:04:50.910
that says error, something like that.

84
00:04:50.910 --> 00:04:52.350
So we handle those use cases.

85
00:04:52.350 --> 00:04:56.760
And then now for data,
data is going to be the entire response.

86
00:04:56.760 --> 00:05:00.940
And remember all graph kill
objects return on a data problem.

87
00:05:00.940 --> 00:05:03.290
And then everything after that
is whatever is in your query.

88
00:05:03.290 --> 00:05:06.510
So that means we're gonna have data.pets.

89
00:05:06.510 --> 00:05:07.730
We're going to have pets here.

90
00:05:07.730 --> 00:05:12.210
And if you don't want pets,
then you can call this whatever you want,

91
00:05:12.210 --> 00:05:13.970
and then it'll going to
be data dot whatever.

92
00:05:15.120 --> 00:05:16.420
That's where aliases come back in.

93
00:05:16.420 --> 00:05:17.770
So in this case, I'll just keep pets.

94
00:05:18.790 --> 00:05:19.840
Got data.pets.

95
00:05:20.930 --> 00:05:25.237
I'll go down to our pets
list as pets like this,

96
00:05:25.237 --> 00:05:29.637
and as data.pets.

97
00:05:29.637 --> 00:05:33.900
Everybody following me so far?

98
00:05:33.900 --> 00:05:37.280
All right.
Make sure your server is still on,

99
00:05:37.280 --> 00:05:38.610
everything is still good.

100
00:05:38.610 --> 00:05:40.380
Go back to refresh.

101
00:05:40.380 --> 00:05:42.480
If you don't get any
errors then you did good.

102
00:05:42.480 --> 00:05:44.900
Now if you want to actually see
something show up on the page,

103
00:05:44.900 --> 00:05:51.980
then you can go to dv.json and
based off on, this thing opens back up.

104
00:05:53.560 --> 00:05:58.035
There we go, based off on

105
00:05:58.035 --> 00:06:02.969
the pet type which is here.

106
00:06:02.969 --> 00:06:07.010
So, ID, a name, owner,
image creator, all this stuff.

107
00:06:07.010 --> 00:06:10.400
You can just copy this,
you can go to pets.json.

108
00:06:10.400 --> 00:06:12.680
You can just make some pets, right click.

109
00:06:12.680 --> 00:06:13.591
So we'll move this over.

110
00:06:19.265 --> 00:06:20.227
&gt;&gt; Speaker 1: There we go.

111
00:06:20.227 --> 00:06:21.657
So you can just hard
code a lot of this stuff.

112
00:06:21.657 --> 00:06:26.489
I'm just gonna make this appropriate json.

113
00:06:26.489 --> 00:06:28.370
There we go.

114
00:06:28.370 --> 00:06:30.740
So for an ID, you can just put
whatever you want, it's just an ID,

115
00:06:30.740 --> 00:06:32.720
it doesn't matter.

116
00:06:32.720 --> 00:06:35.640
For a type, I'm just gonna put dog.

117
00:06:37.410 --> 00:06:43.930
For a name, moose, owner, don't need that.

118
00:06:43.930 --> 00:06:46.410
Image, don't need that, created that.

119
00:06:48.520 --> 00:06:53.120
Sure sometimes out there,
where you can make a few of this.

120
00:06:53.120 --> 00:06:57.110
So am going to copy that,
make another one, make another one.

121
00:06:58.120 --> 00:07:03.424
Make this one a cat, give a different ID,

122
00:07:03.424 --> 00:07:07.222
give that one a different ID.

123
00:07:07.222 --> 00:07:08.768
There we go.

124
00:07:08.768 --> 00:07:10.388
Cool.

125
00:07:10.388 --> 00:07:14.990
Save that,
have to restart the server probably.

126
00:07:17.150 --> 00:07:20.397
And if we go back and
refresh this, we'll get some pets.

127
00:07:28.354 --> 00:07:29.920
&gt;&gt; Speaker 1: Everybody following me so
far?

128
00:07:29.920 --> 00:07:31.791
Who got tests to show up?

129
00:07:31.791 --> 00:07:37.139
So everybody understand the concept
of having to handle the loading and

130
00:07:37.139 --> 00:07:38.209
error state.

131
00:07:38.209 --> 00:07:38.833
Right?

132
00:07:38.833 --> 00:07:43.646
If I were to comment this out right now,
our whole applet break.

133
00:07:43.646 --> 00:07:47.659
completely broke and
it's probably broke because.

134
00:07:47.659 --> 00:07:53.010
It's saying can't read doc pets of
undefined or something like that.

135
00:07:53.010 --> 00:07:53.860
Yep.

136
00:07:53.860 --> 00:07:55.768
Can't read pets property of undefined.

137
00:07:55.768 --> 00:08:02.180
And that's because, it's trying to read
pets of data, but data's undefined.

138
00:08:02.180 --> 00:08:04.910
And data's undefined
because loading is true.

139
00:08:04.910 --> 00:08:08.150
So, your initial reaction might
be able to go in here like,

140
00:08:08.150 --> 00:08:10.510
I'm just going to create
a default state for data.

141
00:08:10.510 --> 00:08:13.550
Well, don't do that,
just handle the loading case instead.

142
00:08:13.550 --> 00:08:16.270
And the same would go true,
if there was an error.

143
00:08:16.270 --> 00:08:19.900
So, if I kept the loading, but
didn't handle the error, and I for

144
00:08:19.900 --> 00:08:24.010
sure had an error here like that
which is not a valid GraphQL query,

145
00:08:24.010 --> 00:08:28.710
it will probably also break, right?

146
00:08:28.710 --> 00:08:29.680
Can't read pets or undefined.

147
00:08:29.680 --> 00:08:31.880
That's because I have an error.

148
00:08:31.880 --> 00:08:35.280
And you know you have an error if
you've got like 400 bad requests, and

149
00:08:35.280 --> 00:08:39.270
if you go look at the network tab you
can see that it failed right here.

150
00:08:39.270 --> 00:08:43.690
The errors array, and
it says cannot query field on type pet.

151
00:08:43.690 --> 00:08:47.240
Did you mean type, it even gave
you a suggestion, look at that.

152
00:08:47.240 --> 00:08:49.730
Like that's what you meant,
you actually meant that.

153
00:08:49.730 --> 00:08:53.034
That's actually a really good feature,
I forgot GraphQL had that.

154
00:08:53.034 --> 00:08:53.913
That's really dope.

155
00:08:56.684 --> 00:09:00.960
&gt;&gt; Speaker 1: Cool, so you fix that,
handle your error case, good to go.

156
00:09:02.300 --> 00:09:06.080
Definitely wanna show a better error than
that, but you get the point, pretty good.

