WEBVTT

1
00:00:00.000 --> 00:00:01.767
&gt;&gt; Scott Moss: Now that we
know how to write a query,

2
00:00:01.767 --> 00:00:03.480
we know how to set up Apollo Client.

3
00:00:03.480 --> 00:00:06.500
The next thing we do is we're gonna hook
it up to React, and we're gonna write our

4
00:00:06.500 --> 00:00:11.640
first query against our API to actually
get some pets and show them on the screen.

5
00:00:11.640 --> 00:00:13.917
So let's do that.

6
00:00:13.917 --> 00:00:15.790
I'm not gonna do all of it for you, you're
gonna have to do some of it yourself.

7
00:00:15.790 --> 00:00:19.440
But I'm gonna get you to the part where
this is at least hooked up to React, and

8
00:00:19.440 --> 00:00:20.370
you can get going.

9
00:00:20.370 --> 00:00:24.360
So the first thing is,
if you've ever used React before,

10
00:00:24.360 --> 00:00:28.740
you normally have an index app
that you bootstrap on the page.

11
00:00:28.740 --> 00:00:29.980
This is our index app.

12
00:00:29.980 --> 00:00:31.920
This is the app that gets
bootstrapped on the page.

13
00:00:31.920 --> 00:00:33.030
Ignore the browser router.

14
00:00:33.030 --> 00:00:36.860
If you've never used React or never used
a router before, don't worry about it.

15
00:00:36.860 --> 00:00:42.100
This is JSX, it's just a way to
write some component language.

16
00:00:42.100 --> 00:00:46.590
And the thing we need to do is we need
to wrap, whatever part of our app

17
00:00:46.590 --> 00:00:51.482
that we want to expose to Apollo,
we have to wrap it in an Apollo provider.

18
00:00:51.482 --> 00:00:54.810
So in this case, our whole app is
encapsulated in this app component.

19
00:00:54.810 --> 00:00:58.260
So all we gotta do is just wrap this
app component with an Apollo provider.

20
00:00:58.260 --> 00:01:00.630
So we'll do that, it should already
be imported for you at the top.

21
00:01:00.630 --> 00:01:04.606
But if it's not, it's gonna be
from @apollo/react-hooks, and

22
00:01:04.606 --> 00:01:07.153
that's the one that we're gonna be using.

23
00:01:07.153 --> 00:01:11.090
There's another one called React Apollo,
or Apollo React.

24
00:01:11.090 --> 00:01:14.290
That one's being phased out
in favor of the @Apollo.

25
00:01:14.290 --> 00:01:21.562
Every organization has their tag
now on npm, @apollo/react-hooks.

26
00:01:21.562 --> 00:01:23.098
So we'll say ApolloProvider.

27
00:01:27.225 --> 00:01:29.054
&gt;&gt; Scott Moss: Like that.

28
00:01:31.943 --> 00:01:34.374
&gt;&gt; Scott Moss: And
we'll put the @ between it.

29
00:01:34.374 --> 00:01:37.740
And ApolloProvider in this case
is only gonna take one prop,

30
00:01:37.740 --> 00:01:39.470
and it's gonna be called client.

31
00:01:39.470 --> 00:01:43.364
And you guessed it, we're gonna be
passing in the client, that's it.

32
00:01:45.614 --> 00:01:47.137
&gt;&gt; Scott Moss: So
usually it's something that,

33
00:01:47.137 --> 00:01:50.496
something like this in React that wraps
another component and takes a prop,

34
00:01:50.496 --> 00:01:54.110
usually it's manipulating the context API,
or something like that.

35
00:01:54.110 --> 00:01:59.190
So through the context API, we get access
to whatever this client exposes to us.

36
00:02:00.490 --> 00:02:02.450
In this case,
we're gonna be using React Hooks, so

37
00:02:02.450 --> 00:02:04.270
it's gonna be a little different.

38
00:02:04.270 --> 00:02:07.330
But yeah, you still get access to some
of that stuff through the context.

39
00:02:07.330 --> 00:02:08.120
We just won't be using it.

40
00:02:09.740 --> 00:02:10.640
Any questions on this?

41
00:02:12.040 --> 00:02:15.380
All right, so we've made the client,
we made an ApolloProvider.

42
00:02:15.380 --> 00:02:18.770
We passed it the client that we created,
and we wrapped our entire app with it.

43
00:02:18.770 --> 00:02:20.480
Pretty simple so far.

44
00:02:20.480 --> 00:02:25.050
So then you head over to the pets page,
pages, Pets.

45
00:02:25.050 --> 00:02:27.490
And this page is what you see
when you load the app up.

46
00:02:27.490 --> 00:02:30.493
It's just this basic page here
that says Pets and New Pet,

47
00:02:30.493 --> 00:02:32.098
doesn't really do anything.

48
00:02:34.514 --> 00:02:38.804
&gt;&gt; Scott Moss: You're gonna get to the
point where you can actually write a query

49
00:02:38.804 --> 00:02:42.980
using Apollo GraphQL to actually
load in the pets from our API.

50
00:02:42.980 --> 00:02:46.920
Now we're gonna go ahead and,
anyone here ever used React Hooks?

51
00:02:48.770 --> 00:02:49.490
One person, okay.

52
00:02:50.720 --> 00:02:55.180
So I did my best to abstract that away
cuz I don't want React Hooks to be

53
00:02:55.180 --> 00:02:59.630
like a big deal to this,
and it's really not.

54
00:02:59.630 --> 00:03:03.032
You almost never have to interact with it.

55
00:03:03.032 --> 00:03:08.086
But what we're gonna be doing is there's
these things up here called useQuery and

56
00:03:08.086 --> 00:03:11.676
useMutation, which are hooks
that Apollo has created for

57
00:03:11.676 --> 00:03:13.520
us to interact with GraphQL.

58
00:03:14.590 --> 00:03:16.550
You don't need to know
anything about how hooks work.

59
00:03:16.550 --> 00:03:18.220
The only thing you're gonna need to
know is the two things I'm gonna

60
00:03:18.220 --> 00:03:21.304
tell you right now, and you can look
at from this example right here.

61
00:03:21.304 --> 00:03:25.310
So useState is a hook that
React applies for us.

62
00:03:25.310 --> 00:03:28.970
Whenever you use a hook like this,
useState, there's a couple things.

63
00:03:28.970 --> 00:03:30.450
One, it's gonna return an array.

64
00:03:31.510 --> 00:03:36.430
And the first argument is gonna be the
state that you're trying to keep track of.

65
00:03:36.430 --> 00:03:39.700
So in this case, I'm trying to keep
track of a state that I call modal.

66
00:03:39.700 --> 00:03:41.020
You can call this whatever you want.

67
00:03:41.020 --> 00:03:42.251
This is destructuring,

68
00:03:42.251 --> 00:03:45.450
this is destructuring syntax
in JavaScript in an array.

69
00:03:45.450 --> 00:03:48.460
So whatever the first thing in the array
is I'm gonna set it to a variable

70
00:03:48.460 --> 00:03:49.930
called modal.

71
00:03:49.930 --> 00:03:53.820
The second thing in the array is always
gonna be a function used to update

72
00:03:53.820 --> 00:03:55.960
that state in the first argument.

73
00:03:55.960 --> 00:03:58.510
That's it, that's how hooks work.

74
00:03:58.510 --> 00:04:01.640
You get a state property that
you're interested in, and

75
00:04:01.640 --> 00:04:03.870
you get a function to
update that state property.

76
00:04:03.870 --> 00:04:06.800
And then when you use the hook,
you pass in the default state.

77
00:04:06.800 --> 00:04:10.310
That's it, so by default,
I'm setting modal to false.

78
00:04:10.310 --> 00:04:14.350
And now I have a function called setModal
that I can take an argument that will

79
00:04:14.350 --> 00:04:16.450
set modal to whatever I want it to be.

80
00:04:16.450 --> 00:04:17.480
That's basically what it is.

81
00:04:17.480 --> 00:04:21.980
If you've ever used React without
React Hooks, this is like setState.

82
00:04:21.980 --> 00:04:27.050
This is literally a setState function for
this individual state property.

83
00:04:27.050 --> 00:04:28.150
That's all it is.

84
00:04:28.150 --> 00:04:31.770
So instead of having an object with
all these properties on them, and

85
00:04:31.770 --> 00:04:34.900
you set state, and you gotta copy
the object just to change this one field.

86
00:04:34.900 --> 00:04:39.020
You're saying, I'm only interested in
setting the state for this one field,

87
00:04:39.020 --> 00:04:40.830
which defaults to false.

88
00:04:40.830 --> 00:04:44.380
And whatever I call this function with the
variable, that's what I'm setting it to.

89
00:04:44.380 --> 00:04:46.800
That's how hooks work in detail.

90
00:04:46.800 --> 00:04:50.505
And when you change that state,
it's gonna cause a re-render, so

91
00:04:50.505 --> 00:04:52.130
your function re-renders.

92
00:04:52.130 --> 00:04:54.270
Just like setState would,
it's gonna re-render.

93
00:04:54.270 --> 00:04:56.650
So it's the same thing,
it's just abstracted away.

94
00:04:56.650 --> 00:04:57.800
They have their reasons for it.

95
00:04:57.800 --> 00:05:00.290
I recommend looking it up if you
wanna know more about hooks and

96
00:05:00.290 --> 00:05:04.800
things like that, but everybody's
pretty much doing this these days.

97
00:05:04.800 --> 00:05:08.270
I think this is, I think a lot of
this came from Svelte, actually.

98
00:05:08.270 --> 00:05:10.803
I think they were some of the first
ones to do this, so React's doing it,

99
00:05:10.803 --> 00:05:12.000
Vue's doing it now.

100
00:05:12.000 --> 00:05:14.580
But yeah, I think it's a good approach,
allows you to co-locate

101
00:05:14.580 --> 00:05:17.370
your code together versus having
it in all these separate places.

