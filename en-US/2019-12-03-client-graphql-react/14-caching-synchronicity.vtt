WEBVTT

1
00:00:00.000 --> 00:00:01.920
&gt;&gt; Scott Moss: So keeping cache in sync.

2
00:00:03.720 --> 00:00:05.540
So why is the cache out of
sync in the first place?

3
00:00:05.540 --> 00:00:11.250
Well, if you perform a mutation that
updates or creates a single node,

4
00:00:11.250 --> 00:00:14.680
then apollo will update your cache
automatically given the mutation and

5
00:00:14.680 --> 00:00:16.570
query has the same fields and id.

6
00:00:16.570 --> 00:00:17.870
So what exactly does that mean?

7
00:00:17.870 --> 00:00:22.660
So basically what I'm saying is
let's say this was not all pets and

8
00:00:22.660 --> 00:00:24.240
there was one pet.

9
00:00:25.440 --> 00:00:27.382
And this was not pets it was pet,

10
00:00:27.382 --> 00:00:31.240
I dunno, just get one pet back
it's always the same pet.

11
00:00:31.240 --> 00:00:37.790
And let's say this was not
create a pet it was update pet,

12
00:00:37.790 --> 00:00:42.070
and this was called update pet, okay?

13
00:00:42.070 --> 00:00:45.310
And let's also assume that
the pet that I'm updating

14
00:00:45.310 --> 00:00:50.030
has the same ID as the pet
that I'm getting here.

15
00:00:50.030 --> 00:00:55.010
When this mutation comes back, because
this mutation has access to all these

16
00:00:55.010 --> 00:00:57.680
fields via the server side
allowed us to have it, and

17
00:00:57.680 --> 00:01:00.610
it has the same ID as
the query that I did earlier.

18
00:01:00.610 --> 00:01:03.880
That pet is gonna be updated
first automatically because

19
00:01:03.880 --> 00:01:04.880
Apollo mashed them together.

20
00:01:04.880 --> 00:01:09.210
It's like, you have the exact same ID

21
00:01:09.210 --> 00:01:13.580
signature as one that I already have in
my store, so I'm just gonna update you.

22
00:01:13.580 --> 00:01:14.760
That's happens for free.

23
00:01:14.760 --> 00:01:15.969
That's why that happens.

24
00:01:17.160 --> 00:01:18.810
Everybody understand that, all right?

25
00:01:18.810 --> 00:01:20.980
The IDs are the same, so therefore,
it just gets replaced, and

26
00:01:20.980 --> 00:01:22.490
it's the same thing.

27
00:01:22.490 --> 00:01:23.820
You should use the same fields,

28
00:01:23.820 --> 00:01:28.360
because whatever reason the query
needed those fields, and because

29
00:01:28.360 --> 00:01:31.180
whatever the mutation's gonna return is
gonna replace whatever the query had?

30
00:01:31.180 --> 00:01:34.440
You're still gonna need those fields,
so you should return the same fields.

31
00:01:34.440 --> 00:01:36.570
If the query didn't need those fields,
it wouldn't have asked for them.

32
00:01:36.570 --> 00:01:39.420
So if there are some fields
in there that you don't need,

33
00:01:39.420 --> 00:01:42.420
then you should also exclude them from
your query and not just your mutation.

34
00:01:42.420 --> 00:01:47.814
So you should also return all of the same
fields, and that's why that's important.

35
00:01:47.814 --> 00:01:49.053
Okay, cool.

36
00:01:51.499 --> 00:01:54.957
&gt;&gt; Scott Moss: If you perform a mutation
that updates a node in a list or removes

37
00:01:54.957 --> 00:01:59.267
a node, you are responsible for updating
any queries referencing that list or

38
00:01:59.267 --> 00:02:02.310
node and there are many ways
to do this with apollo.

39
00:02:02.310 --> 00:02:03.820
So that's our example right now.

40
00:02:03.820 --> 00:02:08.860
So we have a list of pets and
right now we are creating a pet.

41
00:02:08.860 --> 00:02:13.340
That means that there is no ID in
our local cache that is going to be

42
00:02:13.340 --> 00:02:16.010
associated with the pet
that we just created.

43
00:02:16.010 --> 00:02:17.330
It's a whole new pet, there is no ID.

44
00:02:17.330 --> 00:02:20.380
So there is never going to be a point
where apollo gets this back and

45
00:02:20.380 --> 00:02:24.360
be like there's an ID that's already
in the cache, let me update it.

46
00:02:24.360 --> 00:02:26.790
How, we just created it, there is no ID.

47
00:02:26.790 --> 00:02:28.950
So it doesn't know what to do with it.

48
00:02:28.950 --> 00:02:31.960
And because there's no ID,
there is no automatic update.

49
00:02:31.960 --> 00:02:35.780
The next thing is well,
you might already be like well,

50
00:02:35.780 --> 00:02:41.110
my mutation returns a pet type, and
the queries, this query also returns pets.

51
00:02:41.110 --> 00:02:45.730
Okay, apollo still doesn't know that
you want to associate this pet that you

52
00:02:45.730 --> 00:02:48.740
created with this list of
pets that you have over here.

53
00:02:48.740 --> 00:02:50.200
Like how would it know that?

54
00:02:50.200 --> 00:02:53.370
I mean if you did that you would have some
really crazy side effects in your app that

55
00:02:53.370 --> 00:02:54.680
you wouldn't want to happen.

56
00:02:54.680 --> 00:02:57.480
To be honest, that would that would
cause some issues in your app.

57
00:02:57.480 --> 00:03:01.975
Cuz maybe this array of pets
only has these fields and

58
00:03:01.975 --> 00:03:05.660
they're specific for this, so this new pet
that you created is not for this view,

59
00:03:05.660 --> 00:03:06.452
it's for this other view.

60
00:03:06.452 --> 00:03:08.562
If they just started adding all
the pets to all the arrays,

61
00:03:08.562 --> 00:03:11.120
it would probably give you
side effects you didn't want.

62
00:03:11.120 --> 00:03:12.600
You want control over that.

63
00:03:12.600 --> 00:03:14.710
So you have to tell apollo like yeah,

64
00:03:14.710 --> 00:03:18.760
I need to update my cache
to add this pet here.

65
00:03:18.760 --> 00:03:22.860
Another example is, if you're deleting
something, if I had a mutation where I was

66
00:03:22.860 --> 00:03:27.720
deleting something, apollo wouldn't know
how to go into a list and remove it.

67
00:03:27.720 --> 00:03:32.130
It wouldn't know that like, you deleted
this thing off the server, so for

68
00:03:32.130 --> 00:03:35.000
some reason I need to
go into the cache and

69
00:03:35.000 --> 00:03:39.000
find a list of all the list thas
a reference and delete it all there.

70
00:03:39.000 --> 00:03:41.190
It wouldn't know that,
it would have no idea.

71
00:03:41.190 --> 00:03:42.710
So you would have to do
that yourself as well.

72
00:03:44.170 --> 00:03:45.750
Does that make sense?

73
00:03:45.750 --> 00:03:46.320
Yes?
&gt;&gt; Speaker 2: So

74
00:03:46.320 --> 00:03:52.160
if I'm updating a pet that exists
in all pets, apollo doesn't update?

75
00:03:52.160 --> 00:03:56.800
&gt;&gt; Scott Moss: If you're updating one
pet and it exists in all the pets,

76
00:03:56.800 --> 00:04:00.390
apollo will not update any
pet in that list of pets.

77
00:04:02.310 --> 00:04:03.430
&gt;&gt; Speaker 3: Even the ID's
would be the same?

78
00:04:03.430 --> 00:04:06.200
&gt;&gt; Scott Moss: Even though
the IDS will be the same,

79
00:04:06.200 --> 00:04:11.510
because it doesn't know that you're
interested in that list, right?

80
00:04:11.510 --> 00:04:14.810
You might have many lists of
pets all throughout your app and

81
00:04:14.810 --> 00:04:16.230
they all are slightly different.

82
00:04:16.230 --> 00:04:20.544
It will not know which one
of those to go update.

83
00:04:22.834 --> 00:04:27.390
&gt;&gt; Scott Moss: Automatically,
unless you gave it some hints.

84
00:04:27.390 --> 00:04:31.563
So automatically it wouldn't, but in some
scenarios it will if you start giving it

85
00:04:31.563 --> 00:04:34.141
hints, and
we'll talk about some of those hints.

86
00:04:36.299 --> 00:04:38.950
&gt;&gt; Scott Moss: Any questions?

87
00:04:38.950 --> 00:04:41.930
&gt;&gt; Speaker 4: But in this case you
said when you change that to update

88
00:04:41.930 --> 00:04:43.860
pet it would update, right?

89
00:04:43.860 --> 00:04:47.010
&gt;&gt; Scott Moss: No cuz I had
it as one pet and one pet.

90
00:04:47.010 --> 00:04:48.140
&gt;&gt; Speaker 4: Okay.
&gt;&gt; Scott Moss: Yeah so

91
00:04:48.140 --> 00:04:52.040
if I have multiple pets, so
if I have all these pets, and

92
00:04:52.040 --> 00:04:56.970
then I was updating one
pet with the id of a pet

93
00:04:56.970 --> 00:05:02.040
that was already in this array, it won't
update it unless we gave it hints.

94
00:05:02.040 --> 00:05:05.310
And the hints in this case is literally
just giving it all the fields.

95
00:05:05.310 --> 00:05:07.970
If you gave it all the fields,
then yeah, it'll update it, yeah.

96
00:05:07.970 --> 00:05:10.520
In that case, yeah,
if you gave it all the fields, okay, cool,

97
00:05:10.520 --> 00:05:15.220
because all those nodes
got normalized on Flatly.

98
00:05:15.220 --> 00:05:17.860
And they all have IDs, so
the IDs matched, and then it worked.

99
00:05:17.860 --> 00:05:20.340
But the fields have to be the same,
otherwise you might have errors.

100
00:05:20.340 --> 00:05:23.320
So you have to have those fields there,
otherwise, it won't work.

101
00:05:23.320 --> 00:05:25.050
But yes, that's only for updating, and

102
00:05:25.050 --> 00:05:28.780
that's only because we had it existing
in the cache in the first place, yes.

103
00:05:28.780 --> 00:05:30.890
&gt;&gt; Speaker 5: Does the order
of the fields matter?

104
00:05:30.890 --> 00:05:32.650
&gt;&gt; Scott Moss: No,
orders of the fields don't matter.

105
00:05:32.650 --> 00:05:38.510
These are just for you, yeah.

106
00:05:38.510 --> 00:05:40.150
Any other questions on that?

107
00:05:40.150 --> 00:05:44.920
&gt;&gt; Speaker 6: So if I'm just coding for
I just usually sometimes I mean

108
00:05:44.920 --> 00:05:48.150
I don't need all of the keys,
I just need maybe two keys.

109
00:05:48.150 --> 00:05:51.390
But while updating I'm updating
all of the keys of that.

110
00:05:51.390 --> 00:05:55.670
Would that still update if there is
like only one query, and one mutation?

111
00:05:55.670 --> 00:05:59.650
Would that still go and update it or?

112
00:05:59.650 --> 00:06:02.028
&gt;&gt; Scott Moss: So what you update,
as far as on the server side,

113
00:06:02.028 --> 00:06:05.918
what actually gets updated is irrelevant
to what is happening on the front end,

114
00:06:05.918 --> 00:06:07.444
it's only what you send back.

115
00:06:07.444 --> 00:06:11.603
So, even if you updated two fields,
that's fine.

116
00:06:11.603 --> 00:06:14.460
As long as you send back the exact fields
that the query wants, that's good, and

117
00:06:14.460 --> 00:06:17.510
they could all be the same value,
it's still gonna get replaced.

118
00:06:17.510 --> 00:06:21.120
So, it doesn't matter what you updated
on the server, how many fields or

119
00:06:21.120 --> 00:06:23.250
anything like that,
all of them, any of them.

120
00:06:23.250 --> 00:06:26.090
As long as the ID signature matches,
it's gonna get replaced.

121
00:06:26.090 --> 00:06:29.560
So, how can we keep the cache in sync,
here are a couple strategies.

122
00:06:29.560 --> 00:06:35.330
So the first one is we can refetch
matching queries after a mutation.

123
00:06:36.840 --> 00:06:41.360
There are some built-in helper
methods in apollo literally

124
00:06:41.360 --> 00:06:46.320
called refetch to fetch more,
well fetch more is for pagination,

125
00:06:46.320 --> 00:06:49.700
but you can refetch
queries after mutation.

126
00:06:49.700 --> 00:06:52.990
You can do it yourself using like a single
way if youre not using hooks, but

127
00:06:52.990 --> 00:06:54.760
in our case we are using hooks so

128
00:06:54.760 --> 00:07:00.010
we would have to sign up to be
notified when a query changes.

129
00:07:00.010 --> 00:07:04.810
In fact if you go look inside,
where's it at.

130
00:07:04.810 --> 00:07:07.370
I got so many things open, there we go.

131
00:07:07.370 --> 00:07:09.040
If you go look inside apollo dental.

132
00:07:12.530 --> 00:07:13.885
My command button just doesn't work.

133
00:07:13.885 --> 00:07:19.589
And we click on Apollo,
and we click on queries,

134
00:07:19.589 --> 00:07:26.020
you'll see something called watch queries.

135
00:07:26.020 --> 00:07:28.230
So these watch queries
are called watch queries for

136
00:07:28.230 --> 00:07:31.230
a reason because Apollo's watching them so
they can update them things happen.

137
00:07:31.230 --> 00:07:34.980
You can subscribe to this in the coding
like I too want to watch this query, and

138
00:07:34.980 --> 00:07:37.120
whenever something in that query changes,

139
00:07:37.120 --> 00:07:39.010
you'll get a callback that
you can do something.

140
00:07:39.010 --> 00:07:41.440
So that's how you can do
a refresh if you want to like,

141
00:07:41.440 --> 00:07:44.800
I need to fetch more when something
changes or something like that.

142
00:07:44.800 --> 00:07:48.280
So that's, That's one thing you can do,
probably not the best way.

143
00:07:48.280 --> 00:07:52.640
You can also just be like after this
mutation comes back, run this query again,

144
00:07:52.640 --> 00:07:53.910
like you could do that too.

145
00:07:55.070 --> 00:07:57.350
I would probably opt out of that as well.

146
00:07:59.560 --> 00:08:02.520
You can use the update
method on the mutation,

147
00:08:02.520 --> 00:08:04.460
which is pretty much what we're gonna do.

148
00:08:04.460 --> 00:08:07.160
That's the standard approach,
it's the simplest approach,

149
00:08:07.160 --> 00:08:08.820
it's the one that makes the most sense.

150
00:08:08.820 --> 00:08:11.920
If you ever use something like redux or
view X or

151
00:08:11.920 --> 00:08:14.210
anything like that,
it's basically the same thing.

152
00:08:14.210 --> 00:08:16.180
You're gonna be writing a reducer.

153
00:08:16.180 --> 00:08:20.120
The only difference is you're
gonna be writing to the cache of

154
00:08:21.590 --> 00:08:24.460
the internal Apollo state, that's it.

155
00:08:24.460 --> 00:08:30.198
So you rather get direct access to
the cache that we're exposing or

156
00:08:30.198 --> 00:08:32.765
that we're looking at here.

157
00:08:38.364 --> 00:08:39.410
&gt;&gt; Scott Moss: This cache.

158
00:08:39.410 --> 00:08:43.650
You can direct access to this cache or
you can write to it and

159
00:08:43.650 --> 00:08:46.180
you can pretty much do whatever
you want with this cache.

160
00:08:47.370 --> 00:08:48.890
And you have to write to it yourself.

161
00:08:48.890 --> 00:08:52.690
But how you do it, this is where it kinda
gets confusing because apollo can only

162
00:08:52.690 --> 00:08:57.480
write to a cache not based
off on what you think.

163
00:08:57.480 --> 00:09:01.730
It's not a key value store where you can
just be like I wanna update this pet with

164
00:09:01.730 --> 00:09:05.640
this ID or just push inside the pet's
array, it doesn't work that way.

165
00:09:05.640 --> 00:09:08.976
You have to update it, you have to
query the cache with graphQL and

166
00:09:08.976 --> 00:09:11.047
you have to write to cache with graphQL.

167
00:09:13.480 --> 00:09:14.920
&gt;&gt; Scott Moss: Does that make sense?

168
00:09:14.920 --> 00:09:19.670
And reason that is is because that's
how graphQL knows what has what,

169
00:09:19.670 --> 00:09:21.860
is through these watched queries and
stuff like that.

170
00:09:21.860 --> 00:09:24.880
So if you wanna retrieve
items from the cache, and

171
00:09:24.880 --> 00:09:28.510
in our example we're gonna be retrieving
all the pets from all pets array.

172
00:09:28.510 --> 00:09:29.810
We wanna get all of those.

173
00:09:29.810 --> 00:09:34.680
And then we wanna add a pet to it, we
gotta write it back with that same query.

174
00:09:34.680 --> 00:09:35.430
Question.

175
00:09:35.430 --> 00:09:38.150
&gt;&gt; Speaker 7: Why is that a better
solution as opposed to just

176
00:09:39.510 --> 00:09:40.750
requerying the database?

177
00:09:40.750 --> 00:09:43.630
Cuz what I'm understanding
is that the mutation, right?

178
00:09:43.630 --> 00:09:49.649
The mutation updates the database so I get
why the front end wouldn't reflect that,

179
00:09:49.649 --> 00:09:52.880
but if I manually updated the cache,

180
00:09:54.110 --> 00:09:57.400
isn't there more opportunity for
things to go awry?

181
00:09:57.400 --> 00:09:59.850
Like I could mess things up there,

182
00:09:59.850 --> 00:10:02.140
isn't it just better to pull
it straight from the source?

183
00:10:02.140 --> 00:10:04.530
If I updated the database,
just pull from the database.

184
00:10:04.530 --> 00:10:07.100
&gt;&gt; Scott Moss: I wouldn't say
one's better or worse, it

185
00:10:07.100 --> 00:10:12.005
depends on if latency is a huge deal for
you then having to make another API call,

186
00:10:12.005 --> 00:10:17.750
if it takes your API two
seconds to respond for

187
00:10:17.750 --> 00:10:21.050
every single API call and having to make
another one needs a different thing.

188
00:10:21.050 --> 00:10:22.470
Your users waiting two more seconds or

189
00:10:22.470 --> 00:10:25.930
not, versus doing something
in memory that's instant.

190
00:10:25.930 --> 00:10:27.830
Yeah, I would say and
if you set everything up right,

191
00:10:27.830 --> 00:10:30.770
as in your mutations return
the exact same fields.

192
00:10:30.770 --> 00:10:33.785
You named your queries, you have
reference to them through variables,

193
00:10:33.785 --> 00:10:36.290
updating the cache is pretty simple.

194
00:10:36.290 --> 00:10:39.310
You can't mess it up as long
as you have queries and

195
00:10:39.310 --> 00:10:43.190
you have the exact fields on
your mutation, it just works.

196
00:10:43.190 --> 00:10:47.100
It's literally the same thing as
writing a reducer inside of redux.

197
00:10:48.700 --> 00:10:49.440
Any questions on that.

198
00:10:50.500 --> 00:10:54.610
&gt;&gt; Speaker 8: So is there other ways to
make the [INAUDIBLE] call again because

199
00:10:54.610 --> 00:10:59.780
if I want it to be something on demand
like a click of a button on UI then?

200
00:10:59.780 --> 00:11:01.980
&gt;&gt; Scott Moss: Yeah then you
would use the client directly.

201
00:11:01.980 --> 00:11:06.989
So you wouldn't use the the use query,
you would just say client.query, and

202
00:11:06.989 --> 00:11:10.809
you would hook that up to a button
handler, or something like that.

203
00:11:10.809 --> 00:11:13.744
Don't use a hook if you want
direct control over a query.

