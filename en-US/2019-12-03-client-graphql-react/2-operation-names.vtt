WEBVTT

1
00:00:00.000 --> 00:00:02.530
&gt;&gt; Scott Moss: But now we're
gonna talk about Operation Names.

2
00:00:02.530 --> 00:00:06.960
So if you've done the GraphQL stuff
on the server, you might have got

3
00:00:06.960 --> 00:00:11.150
to the point where you were writing Querys
in playground and things like that.

4
00:00:11.150 --> 00:00:13.980
But the way you might have done that

5
00:00:13.980 --> 00:00:17.460
were just like the short hand method of
writing Querys and writing Mutations.

6
00:00:17.460 --> 00:00:22.720
What we're gonna do is we're going to
use the full way, the full approach

7
00:00:22.720 --> 00:00:25.990
of writing Querys and Mutations, starting
with something called Operation names.

8
00:00:25.990 --> 00:00:30.140
So Operation names are basically, unique
names for your client side Querys and

9
00:00:30.140 --> 00:00:32.090
Mutations operations.

10
00:00:32.090 --> 00:00:34.110
What does that basically mean?

11
00:00:34.110 --> 00:00:38.301
So if you could think about it like this,
if you create a function in JavaScript and

12
00:00:38.301 --> 00:00:39.596
you just had a variable.

13
00:00:39.596 --> 00:00:41.135
But you didn't actually
name that function,

14
00:00:41.135 --> 00:00:44.430
that function is technically anonymous
even though the variable has a name.

15
00:00:44.430 --> 00:00:46.160
That's basically what
you're doing in GraphQL.

16
00:00:46.160 --> 00:00:47.490
So to translate that,

17
00:00:47.490 --> 00:00:52.140
this query right here for
characters, it doesn't have a name.

18
00:00:52.140 --> 00:00:55.790
I mean the query is called characters, but
the option itself doesn't have a name,

19
00:00:55.790 --> 00:00:57.120
it's anonymous.

20
00:00:57.120 --> 00:00:59.470
So we could actually give
this operation a name

21
00:01:00.910 --> 00:01:03.820
by using the operation
name syntax in GraphQL.

22
00:01:03.820 --> 00:01:08.270
And the way we can do that is,
so we get rid of this query.

23
00:01:08.270 --> 00:01:09.610
The first thing we want to do is,

24
00:01:09.610 --> 00:01:12.520
we want to type the name of
the operation we want to do.

25
00:01:12.520 --> 00:01:15.210
In this case,
we're going to type the word query.

26
00:01:15.210 --> 00:01:17.760
Query means hey,
we actually want to execute a query,

27
00:01:17.760 --> 00:01:19.250
because there's different
types of operations.

28
00:01:19.250 --> 00:01:21.200
We have mutations, we have subscriptions.

29
00:01:21.200 --> 00:01:24.180
We're interested in executing a query, and

30
00:01:24.180 --> 00:01:29.700
as a refresher, queries are responsible
for retrieving data from a GraphQL API.

31
00:01:29.700 --> 00:01:32.410
So in this case, we wanna retrieve
some Rick and Morty data, so

32
00:01:32.410 --> 00:01:33.330
we're gonna issue a query.

33
00:01:33.330 --> 00:01:35.890
And then,
we can just give it an operation name.

34
00:01:35.890 --> 00:01:40.580
And the operation name is pretty much,
you can name it whatever you want.

35
00:01:40.580 --> 00:01:43.510
The restrictions on it is that you
can't have any spaces or dashes,

36
00:01:43.510 --> 00:01:44.760
anything like that.

37
00:01:44.760 --> 00:01:46.260
But you can kinda name
it whatever you want.

38
00:01:46.260 --> 00:01:50.790
The convention is most people just
camel case or pascal case this.

39
00:01:50.790 --> 00:01:56.400
So let's call this a,
we'll call this all characters.

40
00:01:57.990 --> 00:01:59.500
Like that, all characters.

41
00:02:00.980 --> 00:02:02.235
That's the operation name.

42
00:02:02.235 --> 00:02:05.790
And then, followed by that,
you might have an optional arguments here.

43
00:02:05.790 --> 00:02:07.910
We're not going to use
arguments right now.

44
00:02:07.910 --> 00:02:10.610
Instead, we're just going to hit enter and
we'll use these brackets.

45
00:02:10.610 --> 00:02:13.342
So, now that we have our
operation named all characters,

46
00:02:13.342 --> 00:02:14.972
now we can actually run our query.

47
00:02:14.972 --> 00:02:18.180
And the query that I want to run,
if I go look at the schema.

48
00:02:18.180 --> 00:02:21.400
Here's all the queries
that's possible on this API.

49
00:02:21.400 --> 00:02:26.540
So I'm going to run the characters
query which takes in

50
00:02:26.540 --> 00:02:28.220
optional arguments of a page.

51
00:02:28.220 --> 00:02:33.079
I'm guessing for pagination and to filter
if I want to filter out a character.

52
00:02:33.079 --> 00:02:35.530
So I'm not going to pass any
of those arguments right now.

53
00:02:35.530 --> 00:02:39.330
And I'm just going to execute
the query called character, like this.

54
00:02:39.330 --> 00:02:42.620
So once I run character,
I can now go ahead and ask for

55
00:02:42.620 --> 00:02:44.220
some fields on the character.

56
00:02:44.220 --> 00:02:45.144
What fields do I have?

57
00:02:45.144 --> 00:02:50.183
Well, if I go click on a character,
&gt;&gt; Scott Moss: Here,

58
00:02:50.183 --> 00:02:54.350
you can see that characters have an info.

59
00:02:54.350 --> 00:02:58.038
Well, I'm sorry this thing returned
type characters which has info and

60
00:02:58.038 --> 00:02:59.180
then results.

61
00:02:59.180 --> 00:03:03.430
And then, you have for results an array
of characters which is an ID of names and

62
00:03:03.430 --> 00:03:04.080
stuff like that.

63
00:03:04.080 --> 00:03:08.920
So what I want to do is I want to go
ahead and get the results, or I'm

64
00:03:10.260 --> 00:03:16.330
sorry, get the ID like this so if I hit
enter, run this, I got a null for that.

65
00:03:16.330 --> 00:03:20.960
So, let's try a name and see what
happens when we use that Name is null.

66
00:03:22.030 --> 00:03:26.841
Maybe this API is just
not feeling it right now.

67
00:03:26.841 --> 00:03:28.330
I'm sorry, I wrote in character.

68
00:03:28.330 --> 00:03:30.960
I need characters, there we go.

69
00:03:30.960 --> 00:03:31.955
Then, we get the results.

70
00:03:35.550 --> 00:03:38.753
&gt;&gt; Scott Moss: And now,
we can do something like gimme the name,

71
00:03:38.753 --> 00:03:40.060
gimme the episode.

72
00:03:41.220 --> 00:03:43.830
Our episode is an object type,
let's just do name.

73
00:03:43.830 --> 00:03:49.940
And now we get characters, results, an
array, and we get the name Rick and Morty.

74
00:03:49.940 --> 00:03:51.060
So, this is an operation name.

75
00:03:51.060 --> 00:03:54.450
So, a couple of things to note here
is you note that the tab up top

76
00:03:54.450 --> 00:03:56.660
reflected the name of the operation.

77
00:03:56.660 --> 00:04:00.530
And that's kind of the point
of a operation name.

78
00:04:00.530 --> 00:04:03.633
Operation names are used for
client side caching, which we'll get into.

79
00:04:03.633 --> 00:04:05.889
And indexing inside of tools
like GraphQL playground,

80
00:04:05.889 --> 00:04:07.610
which is what I just showed you.

81
00:04:07.610 --> 00:04:11.180
So, having the operation name is a way
that tools like GraphQL playground and

82
00:04:11.180 --> 00:04:15.260
Graphical can reference different
operations that you're trying to run.

83
00:04:15.260 --> 00:04:18.650
So keeping those names unique
Is a really good practice.

84
00:04:18.650 --> 00:04:21.270
And in fact,
when we get to client side caching and

85
00:04:21.270 --> 00:04:23.340
stuff like that,
you definitely want to keep them unique.

86
00:04:23.340 --> 00:04:27.500
Otherwise, you will have conflicts
with like state and things like that.

87
00:04:27.500 --> 00:04:31.500
So, make sure you have those
operation names unique.

88
00:04:31.500 --> 00:04:35.100
So, naming your functions just like in
JavaScript versus keeping them anonymous.

