WEBVTT

1
00:00:00.130 --> 00:00:03.607
&gt;&gt; Scott Moss: Starting with GraphQL
on the frontend, a couple things.

2
00:00:03.607 --> 00:00:07.345
One, you need a GraphQL
server to interact with.

3
00:00:07.345 --> 00:00:12.147
And I'm going to put quotes there, because
nowadays you actually don't even need

4
00:00:12.147 --> 00:00:15.728
a server, a GraphQL server,
to use GraphQL on the front end.

5
00:00:15.728 --> 00:00:17.034
It's pretty crazy,

6
00:00:17.034 --> 00:00:20.957
you can actually use GraphQL on
the frontend to proxy a REST API.

7
00:00:20.957 --> 00:00:23.516
And as far as your frontend is concerned,
it's just writing queries.

8
00:00:23.516 --> 00:00:28.389
So there's so many ways to interact with
GraphQL without even fully diving into

9
00:00:28.389 --> 00:00:32.038
GraphQL, and
rebuilding out your whole infrastructure.

10
00:00:32.038 --> 00:00:33.441
So, there's a lot of ways.

11
00:00:33.441 --> 00:00:34.300
We're not doing that.

12
00:00:34.300 --> 00:00:38.510
We already have a GraphQL server built
out for us and we're gonna be using that.

13
00:00:38.510 --> 00:00:41.599
You don't have to write any code, or
interact with that, it's done for you.

14
00:00:41.599 --> 00:00:44.381
I'll just show you the command to run
when we get to the exercises to start

15
00:00:44.381 --> 00:00:45.030
that server up.

16
00:00:45.030 --> 00:00:48.377
And we're gonna focus on the front end.

17
00:00:48.377 --> 00:00:51.720
So with that being said,
let's just dive in in these slides.

18
00:00:51.720 --> 00:00:56.222
So the first thing I wanna talk about is
queries and mutations from the client.

19
00:00:56.222 --> 00:01:00.973
So if you're familiar with GraphQL on
the back end, we know that when we

20
00:01:00.973 --> 00:01:05.642
create a schema, which is part of
the server that we create, we must,

21
00:01:05.642 --> 00:01:08.989
at minimum,
we have to create a type definition.

22
00:01:08.989 --> 00:01:10.719
Well, actually,
we don't even need a type definition.

23
00:01:10.719 --> 00:01:14.990
At minimum, we need just a query type and
one field that resolves to some type of

24
00:01:14.990 --> 00:01:20.220
value, whether it's a scholar or a type
definition, object type that you created.

25
00:01:20.220 --> 00:01:24.140
So that's a query on the backend, and
mutations are pretty much the same.

26
00:01:24.140 --> 00:01:27.990
It's a mutation type, you create some
fields, they result in some values.

27
00:01:27.990 --> 00:01:32.200
Now queries and mutations from the client,
when I talk about that, I'm not actually

28
00:01:32.200 --> 00:01:35.740
talking about us creating mutation
types and query types on the front end.

29
00:01:35.740 --> 00:01:39.460
What I'm actually referring to is
since we have those queries and

30
00:01:39.460 --> 00:01:43.600
mutations defined on the backend,
we're now going to

31
00:01:43.600 --> 00:01:48.150
issue requests to actually execute
those queries and mutations.

32
00:01:48.150 --> 00:01:50.910
And that's what I mean by queries and
mutations on the frontend.

33
00:01:50.910 --> 00:01:53.770
So it's not defining them,
it's actually using them.

34
00:01:53.770 --> 00:01:56.990
But they're also called queries and
mutations.

35
00:01:56.990 --> 00:02:01.704
There is a section that we might get to
where you can actually define queries and

36
00:02:01.704 --> 00:02:03.431
mutations on the frontend.

37
00:02:03.431 --> 00:02:07.364
Cuz you can pretty much run GraphQL
anywhere, not just the server side.

38
00:02:07.364 --> 00:02:08.420
You can also run and

39
00:02:08.420 --> 00:02:12.780
execute GraphQL on the frontend,
which is something we'll probably get to.

40
00:02:13.970 --> 00:02:15.480
Let's pull up GraphQL Playground.

41
00:02:15.480 --> 00:02:16.780
So this is GraphQL Playground.

42
00:02:17.910 --> 00:02:23.300
This is a tool that we use a lot
to interact with GraphQL APIs.

43
00:02:23.300 --> 00:02:25.716
If you're familiar with
GraphQL on the server side,

44
00:02:25.716 --> 00:02:28.304
you've probably used this to
build up some APIs before.

45
00:02:28.304 --> 00:02:32.570
If not, like I said, this is a tool, you
can point it to any GraphQL server, and

46
00:02:32.570 --> 00:02:35.438
it's basically going to load
up the schema for you and

47
00:02:35.438 --> 00:02:39.671
give you some really nice documentation
and syntax to interact with that API.

48
00:02:39.671 --> 00:02:43.356
So right now I'm pointing it to
a public Rick and Morty GraphQL API.

49
00:02:43.356 --> 00:02:45.010
Actually just found this one.

50
00:02:45.010 --> 00:02:46.204
I think it's pretty legit.

51
00:02:46.204 --> 00:02:49.323
Rick and Morty's one my most
favorite cartoons, can't wait for

52
00:02:49.323 --> 00:02:51.031
season four in November, I think.

53
00:02:51.031 --> 00:02:52.040
It's going to be legit.

54
00:02:52.040 --> 00:02:57.176
But this is a public API, so we're going
to use this one to interact and show some

55
00:02:57.176 --> 00:03:02.404
of the capabilities as far as querying and
writing mutations on the client side.

56
00:03:02.404 --> 00:03:04.389
So just to give you a walk
around of the playground.

57
00:03:04.389 --> 00:03:07.360
On the left,
we have what a client would issue.

58
00:03:07.360 --> 00:03:11.010
So this is something from a client, this
is something your React app would have or

59
00:03:11.010 --> 00:03:11.860
your Vue app.

60
00:03:11.860 --> 00:03:14.210
These are the queries and
mutations that you would write.

61
00:03:14.210 --> 00:03:16.870
And then on the right side here
are the results from the server.

62
00:03:16.870 --> 00:03:18.740
And that’s basically how it goes.

63
00:03:18.740 --> 00:03:20.880
Down here we have this thing
called query variables.

64
00:03:20.880 --> 00:03:22.900
So we’re going to talk
about that later today.

65
00:03:22.900 --> 00:03:25.650
And then we have HEADERS if we need
to modify some headers to send along

66
00:03:25.650 --> 00:03:27.200
the request.

67
00:03:27.200 --> 00:03:28.940
If this API needed authentication,

68
00:03:28.940 --> 00:03:31.440
this is where you would probably
add the authentication.

69
00:03:31.440 --> 00:03:35.370
Up here we have tabs
where we can store state.

70
00:03:35.370 --> 00:03:38.987
All this gets persisted in local storage,
so you can just keep track of this.

71
00:03:38.987 --> 00:03:41.435
Even if you refresh,
your tab should still be there.

72
00:03:41.435 --> 00:03:43.233
Prettify cleans up your query.

73
00:03:43.233 --> 00:03:47.438
If it looks like crap you can just hit
Prettify and it'll clean it up for you.

74
00:03:47.438 --> 00:03:51.135
And then history just shows you
any history as far as queries and

75
00:03:51.135 --> 00:03:53.377
mutations that you have already ran.

76
00:03:53.377 --> 00:03:57.292
And you can click on that and
it'll take you to that point, and

77
00:03:57.292 --> 00:04:00.091
that also gets persisted in local storage.

78
00:04:00.091 --> 00:04:02.073
And over here,
it's just some settings to change.

79
00:04:02.073 --> 00:04:04.827
The themes [INAUDIBLE]
which is really cool.

80
00:04:04.827 --> 00:04:07.001
So a lot going on in this playground app.

81
00:04:07.001 --> 00:04:11.571
Fun fact, this playground app is
a implementation on top of something

82
00:04:11.571 --> 00:04:15.298
called Graphiql,
a play on words using an I, Graphiql.

83
00:04:15.298 --> 00:04:21.735
Graph, Q, Graph, I-Q-L, Graphiql.

84
00:04:21.735 --> 00:04:25.573
This was built by, I'm pretty sure
this was built by the Facebook team.

85
00:04:25.573 --> 00:04:29.520
And GraphQL playground is basically
like a version, someone forked it and

86
00:04:29.520 --> 00:04:32.074
built GraphQL Playground on top of this.

87
00:04:32.074 --> 00:04:35.475
So Graphiql is like the first thing,
and people still use it, but

88
00:04:35.475 --> 00:04:38.300
GraphQL Playground is like a more
extended version on top of it.

89
00:04:38.300 --> 00:04:40.750
So they both kind of do the same thing.

90
00:04:40.750 --> 00:04:43.730
But you can check out Graphiql,
if you're interested in that as well.

91
00:04:43.730 --> 00:04:45.680
We're going to stick
with GraphQL Playground,

92
00:04:45.680 --> 00:04:47.620
because I just like the way it looks.

93
00:04:47.620 --> 00:04:49.430
Honestly, it just looks great.

94
00:04:49.430 --> 00:04:51.040
So we're going to do that.

95
00:04:51.040 --> 00:04:54.410
Any questions on GraphQL Playground or
Graphiql, any of that stuff?

96
00:04:55.850 --> 00:04:58.540
And depending on the server you use,
you get this for free.

97
00:04:58.540 --> 00:04:59.531
You don't have to set this up.

98
00:04:59.531 --> 00:05:02.805
If you're using something like
Apollo server on the back end or

99
00:05:02.805 --> 00:05:05.543
most server GraphQL frameworks
have this built in.

100
00:05:05.543 --> 00:05:07.491
You just do a get request to your,

101
00:05:07.491 --> 00:05:11.679
by default you do a get request to
your GraphQL server and this shows up.

102
00:05:11.679 --> 00:05:14.411
That's it.
Sometimes you can put it on another route,

103
00:05:14.411 --> 00:05:17.900
/docs, /playground,
/graphiql, whatever you want.

104
00:05:17.900 --> 00:05:21.080
But most times you just do a get request
to whatever your GraphQL server is,

105
00:05:21.080 --> 00:05:23.650
and it'll just render this app for
you by default.

106
00:05:23.650 --> 00:05:28.440
So, no more swagger, let's get this.

107
00:05:28.440 --> 00:05:29.880
Okay, cool.

108
00:05:29.880 --> 00:05:31.680
Enough talking about that,
let's get in to the query.

