WEBVTT

1
00:00:00.260 --> 00:00:02.460
&gt;&gt; Scott Moss: Now hopping
into Apollo Client.

2
00:00:02.460 --> 00:00:06.660
So Apollo Client is a couple of things.

3
00:00:06.660 --> 00:00:07.830
Basically what it is,

4
00:00:07.830 --> 00:00:12.750
is it encapsulate HTTP logic used
to interact with the GraphQL API.

5
00:00:12.750 --> 00:00:16.010
So everything we've been doing here,
as far as like these operations,

6
00:00:16.010 --> 00:00:20.370
these quarters, these mutations, this
is what the client is responsible for.

7
00:00:20.370 --> 00:00:22.994
And how these gets
transferred over the server,

8
00:00:22.994 --> 00:00:26.200
the network layer Apollo
encapsulates that away from you.

9
00:00:26.200 --> 00:00:28.610
So you don't have to worry
about setting up a fetcher and

10
00:00:28.610 --> 00:00:33.080
using, am I using window.fetch,
am I using Axios, am I using Ajax?

11
00:00:33.080 --> 00:00:34.440
You don't have to worry about that.

12
00:00:34.440 --> 00:00:36.800
Apollo figures that out for
you, so that's one benefit.

13
00:00:38.590 --> 00:00:41.970
It also doubles as
a client-side state management.

14
00:00:41.970 --> 00:00:46.509
So if you ever use something like
Redux for Reacts or ViewX for

15
00:00:46.509 --> 00:00:50.250
View or
what does Edgar use these days NGRX store.

16
00:00:50.250 --> 00:00:54.770
If you ever use something like that
Apollo doubles as that so it's not

17
00:00:54.770 --> 00:00:59.860
only going to be storing state for the
data that you get back from your server,

18
00:00:59.860 --> 00:01:05.090
it's also possible to store state
it's created locally on your client.

19
00:01:05.090 --> 00:01:07.070
So it can do both.

20
00:01:07.070 --> 00:01:10.590
Not just API data, but local data as well.

21
00:01:10.590 --> 00:01:12.720
So it kind of kind of does all that stuff.

22
00:01:12.720 --> 00:01:17.910
It also has a really nice plugin
approach for extending its capabilities.

23
00:01:17.910 --> 00:01:19.730
It depends on no framework.

24
00:01:19.730 --> 00:01:23.570
Apollo client has nothing to do with
React has nothing to do with View,

25
00:01:23.570 --> 00:01:24.650
has nothing to do with Redux.

26
00:01:24.650 --> 00:01:28.380
It used to be built on top of Redux,
but they took that out.

27
00:01:28.380 --> 00:01:29.820
But it you can use it anywhere.

28
00:01:29.820 --> 00:01:32.340
You can use it in
a Vanilla JavaScript if you want, so

29
00:01:32.340 --> 00:01:35.530
that it really doesn't matter has no
dependencies on any other framework.

30
00:01:35.530 --> 00:01:36.859
You just drop it in and it just works.

31
00:01:38.360 --> 00:01:39.570
Yes?

32
00:01:39.570 --> 00:01:44.280
&gt;&gt; Speaker 2: So, I'm sure people then
ask, I have a project that's all ready

33
00:01:44.280 --> 00:01:47.760
using a state management tool like ReadX,
but we're interested in adopting

34
00:01:47.760 --> 00:01:52.170
Apollo Client, how do people
usually go upon navigating that?

35
00:01:52.170 --> 00:01:55.850
I'd imagine they wouldn't
be maintaining two spaces.

36
00:01:55.850 --> 00:01:59.433
So what, I guess from your experience,
how do people approach that problem?

37
00:01:59.433 --> 00:02:01.590
&gt;&gt; Scott Moss: Yeah,
I actually ran across that problem before.

38
00:02:01.590 --> 00:02:05.760
So, I was using Apollo Client One
when it had Redux built into it.

39
00:02:05.760 --> 00:02:09.790
So, at that point it was just merging
their internal Redux with your Redux and

40
00:02:09.790 --> 00:02:10.640
it just worked.

41
00:02:10.640 --> 00:02:13.370
And then we migrated up to Apollo Two, but

42
00:02:13.370 --> 00:02:16.760
we still had Redux, so
we're like what do we do here?

43
00:02:16.760 --> 00:02:19.520
Well, from what I end
up doing at least was,

44
00:02:19.520 --> 00:02:23.610
I use the, first you don't have to use
any of the caching that Apollo does,

45
00:02:23.610 --> 00:02:26.980
you can just not if you want to,
you don't have to.

46
00:02:26.980 --> 00:02:31.740
But to what I decided to do was
use Apollo's cache for only

47
00:02:31.740 --> 00:02:36.370
the data that came back from the GraphQL
API but use Redux for any local state.

48
00:02:36.370 --> 00:02:37.390
That was basically it.

49
00:02:37.390 --> 00:02:39.120
So it still worked out.

50
00:02:39.120 --> 00:02:43.600
I had one state management for a data
from API, another state management for

51
00:02:43.600 --> 00:02:47.350
any local state, like toggling is Boolean
or this flag or something like that.

52
00:02:47.350 --> 00:02:49.780
And they don't really
conflict with each other.

53
00:02:49.780 --> 00:02:53.630
But now with Apollo two,
you can just use Apollo for all that,

54
00:02:53.630 --> 00:02:58.170
what's basically means you can query
local states using GraphQL queries.

55
00:02:58.170 --> 00:03:02.510
So that's the whole point of it this, it's
like, they want you to use GraphQL for

56
00:03:02.510 --> 00:03:05.400
everything, not just querying
data on your API, but

57
00:03:05.400 --> 00:03:07.470
also querying data in local storage.

58
00:03:07.470 --> 00:03:09.440
Querying data in memory and
you React that.

59
00:03:09.440 --> 00:03:11.380
Querying the DOM.

60
00:03:11.380 --> 00:03:14.480
You can do anything with GraphQL,
and that's the whole point.

61
00:03:14.480 --> 00:03:16.260
So that's what they're trying to get to.

