WEBVTT

1
00:00:00.080 --> 00:00:02.407
&gt;&gt; Scott Moss: Now, let's get into
the variables with operations.

2
00:00:02.407 --> 00:00:07.240
So let's talk about operations,
operations can also define arguments.

3
00:00:08.580 --> 00:00:10.812
Quick refresher on arguments.

4
00:00:10.812 --> 00:00:14.720
So if you ever use arguments
before in graphical query,

5
00:00:14.720 --> 00:00:19.400
you know that you can just use parenthesis
like this and you can pass arguments.

6
00:00:19.400 --> 00:00:27.760
So for instance, characters query
takes in a page and a filter.

7
00:00:27.760 --> 00:00:32.604
So if I were to go into my arguments and
I were to type in page like this,

8
00:00:32.604 --> 00:00:38.052
I could and it says and so, I can do
something like to and that's an argument.

9
00:00:38.052 --> 00:00:43.353
It's gonna do that for me, but I had
to hard code this number two in there.

10
00:00:43.353 --> 00:00:46.657
What if I want the number two to be
a variable that's dynamic that's coming

11
00:00:46.657 --> 00:00:48.210
from my application?

12
00:00:48.210 --> 00:00:49.585
Well, that's where variables come in.

13
00:00:49.585 --> 00:00:54.048
So variables are substitutions for
arguments that can be passed

14
00:00:54.048 --> 00:00:58.269
in dynamically,
at execution time from your application.

15
00:00:58.269 --> 00:01:01.110
So to define variables,
at least in graphical playground,

16
00:01:01.110 --> 00:01:04.520
we can do is we can click on
the query variables below here.

17
00:01:04.520 --> 00:01:07.413
And we just create an object
that represents or

18
00:01:07.413 --> 00:01:12.190
fulfills the need of the variable
name that we're gonna create up here.

19
00:01:12.190 --> 00:01:15.400
So we'll go to the operation,
we'll put the parentheses up here.

20
00:01:15.400 --> 00:01:18.830
The first thing is,
you have to use this dollar sign here.

21
00:01:18.830 --> 00:01:22.620
This dollar sign represents that
you're creating a placeholder,

22
00:01:22.620 --> 00:01:25.830
just like you would in argument
in a function in JavaScript.

23
00:01:25.830 --> 00:01:27.759
You can name the argument
whatever you want,

24
00:01:27.759 --> 00:01:29.550
that's exactly what we're doing here.

25
00:01:29.550 --> 00:01:33.613
We're describing arguments that all
characters operation can accept and

26
00:01:33.613 --> 00:01:35.630
we can name them whatever we want.

27
00:01:35.630 --> 00:01:37.444
We just have to put a dollar
sign in front of the verse.

28
00:01:37.444 --> 00:01:43.650
So I'm gonna say, I'm gonna call this one,
I don't know input.

29
00:01:43.650 --> 00:01:47.740
So this takes a variable called input or
actually lets just start with page.

30
00:01:47.740 --> 00:01:51.720
This takes the variable called dollar page
and from her, we have to give it a type.

31
00:01:52.750 --> 00:01:57.273
So I know that the page argument that's
passed in the characters query isn't int,

32
00:01:57.273 --> 00:01:59.417
so I'm also gonna say this isn't int.

33
00:01:59.417 --> 00:02:02.842
Like that or we'll just figure now, yeah,

34
00:02:02.842 --> 00:02:07.170
so far that's good,
we got the page, you got the int.

35
00:02:07.170 --> 00:02:10.024
This is just freaking out, cuz its saying,
hey, you declared a variable, but

36
00:02:10.024 --> 00:02:10.973
you're not using it yet.

37
00:02:10.973 --> 00:02:13.287
And that makes sense,
cuz we're not using it yet.

38
00:02:13.287 --> 00:02:17.616
So now, what I'm gonna do is I'm gonna
remove this too and in it's place,

39
00:02:17.616 --> 00:02:19.910
I'm gonna put page, the dollar page.

40
00:02:22.100 --> 00:02:26.400
So again, this is me declaring
a variable or an argument for

41
00:02:26.400 --> 00:02:27.790
the operation calls all characters.

42
00:02:27.790 --> 00:02:31.770
I'm setting it's type to int which is
the same type the argument characters

43
00:02:31.770 --> 00:02:36.330
query's expecting as an input and
I'm setting its value to that variable.

44
00:02:36.330 --> 00:02:38.100
Now, I actually have to
create that variable.

45
00:02:38.100 --> 00:02:40.942
So down here in the query variables,
I create an object and

46
00:02:40.942 --> 00:02:43.330
you can see I get all
the complete right there.

47
00:02:43.330 --> 00:02:46.620
That's the sweet thing about
having a type safe language there.

48
00:02:46.620 --> 00:02:50.591
So page, and
then I can also put a number there.

49
00:02:50.591 --> 00:02:54.255
Now, when I execute this,
it should get back the same result,

50
00:02:54.255 --> 00:02:58.350
if I change this to another page,
get back a different result, boom.

51
00:02:59.410 --> 00:03:00.165
That's how variables work.

52
00:03:00.165 --> 00:03:04.396
So I'm sure you can understand the benefit
of variables, we're able to basically make

53
00:03:04.396 --> 00:03:08.587
our queries and mutations dynamic without
having to change our queries or mutations.

54
00:03:08.587 --> 00:03:11.292
We don't have to write a whole another
one just to get the second page and

55
00:03:11.292 --> 00:03:13.150
write another one to get the third page.

56
00:03:13.150 --> 00:03:17.889
We just inject some variables that
are substituted execution time

57
00:03:17.889 --> 00:03:22.048
through the arguments,
which is pretty pretty helpful.

58
00:03:22.048 --> 00:03:27.217
Any questions on the variables in
arguments combined with the operations?

59
00:03:27.217 --> 00:03:28.060
Yes, Adarsh.

60
00:03:28.060 --> 00:03:30.054
&gt;&gt; Speaker 2: Can we
pass in objects as well?

61
00:03:30.054 --> 00:03:33.849
&gt;&gt; Scott Moss: Yes, you can pass in
objects, so that's a good question.

62
00:03:33.849 --> 00:03:38.061
So let's look at, so we know that
the characters takes an info or

63
00:03:38.061 --> 00:03:40.590
that's type characters, hold on.

64
00:03:40.590 --> 00:03:44.370
Let's click, here, here we go, so
now, that characters takes a page and

65
00:03:44.370 --> 00:03:46.160
a filter, right?

66
00:03:46.160 --> 00:03:49.360
So we could pass one option that
has both of these props on it.

67
00:03:49.360 --> 00:03:52.820
But I know filter is an object, so
let's look at filter character.

68
00:03:52.820 --> 00:03:55.674
Filter character has all these properties,
so let's do that.

69
00:03:55.674 --> 00:03:59.780
So it has a name, a status, species,
all that stuff, so let's do that.

70
00:03:59.780 --> 00:04:02.470
So we'll define another
argument up here and

71
00:04:02.470 --> 00:04:04.710
we'll call it, just give it the same name.

72
00:04:04.710 --> 00:04:07.980
So my convention that I use,
I usually name the arguments.

73
00:04:07.980 --> 00:04:12.382
I'm sorry, I usually name the variables
the same name as the arguments,

74
00:04:12.382 --> 00:04:15.225
that way I don't get them mixed up,
honestly.

75
00:04:15.225 --> 00:04:18.008
So that's just my convention, I mean,
you can name these whatever you want.

76
00:04:18.008 --> 00:04:25.514
So for filter, I know that it's gonna use
a $filter [SOUND] or what was it called?

77
00:04:25.514 --> 00:04:30.180
A filter character type, so
I'll just do that filter.

78
00:04:33.183 --> 00:04:34.743
&gt;&gt; Scott Moss: If this warning goes away.

79
00:04:34.743 --> 00:04:40.182
[LAUGH] Character, filter character
type here, and then down below,

80
00:04:40.182 --> 00:04:44.740
if I type in filter,
it automatically complete it.

81
00:04:44.740 --> 00:04:47.954
And it's a filter character type,
which is an object, so I can do an object.

82
00:04:47.954 --> 00:04:50.600
And as you can see some of the start
typing, I get autocomplete for

83
00:04:50.600 --> 00:04:51.340
that as well.

84
00:04:51.340 --> 00:04:56.716
So I can say cool, I wanna filter by name,
and then for the name,

85
00:04:56.716 --> 00:05:02.034
I'm gonna put, let's just grab
one of these, Roxanne says.

86
00:05:02.034 --> 00:05:08.740
Like that and now, all I have to do is
just add that variable to an argument and

87
00:05:08.740 --> 00:05:12.360
I know that the characters query
takes a filter argument whose

88
00:05:12.360 --> 00:05:17.780
type is filtered character which happens
to be the filter argument that we created.

89
00:05:17.780 --> 00:05:22.798
So I can just do that, now, if I execute
this I just get back Rick Sanchez.

90
00:05:25.830 --> 00:05:29.481
&gt;&gt; Scott Moss: Any questions on fields or
arguments,

91
00:05:29.481 --> 00:05:33.140
variables and operations on queries?

92
00:05:34.460 --> 00:05:37.528
This works the same way with mutations
as well, there's no difference.

93
00:05:37.528 --> 00:05:43.206
Exactly the same, it's also works if
you had, arguments on the field level,

94
00:05:43.206 --> 00:05:46.747
you could also pass your
variables here as well.

95
00:05:46.747 --> 00:05:52.893
If this thing had a page for some reason,
you could do that, it doesn't matter.

96
00:05:52.893 --> 00:05:57.892
Everything, these variables that
you created are scoped with

97
00:05:57.892 --> 00:06:00.440
inside this operation.

98
00:06:00.440 --> 00:06:03.711
So anything in this operation can
take advantage of these variables.

