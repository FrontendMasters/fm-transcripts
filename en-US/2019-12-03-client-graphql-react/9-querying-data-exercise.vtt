WEBVTT

1
00:00:00.370 --> 00:00:05.550
&gt;&gt; Scott Moss: You're gonna be
using the useQuery hook here.

2
00:00:05.550 --> 00:00:11.010
And basically, the way you useQuery
hook is gonna work is pretty simple,

3
00:00:11.010 --> 00:00:12.450
so you're gonna do something like this.

4
00:00:12.450 --> 00:00:17.249
UseQuery is gonna give back an array,
cuz it's a hook, and then,

5
00:00:17.249 --> 00:00:20.884
you're gonna use something
like useQuery here.

6
00:00:20.884 --> 00:00:24.390
But useQuery,
it's argument that it's gonna take,

7
00:00:24.390 --> 00:00:26.510
it's gonna take a graph to query.

8
00:00:26.510 --> 00:00:31.410
So you need to write a graphical query
that's going to allow you to get the pets.

9
00:00:31.410 --> 00:00:33.290
So how do you know how to do that?

10
00:00:33.290 --> 00:00:38.518
Well, if you go to where's our client?

11
00:00:38.518 --> 00:00:41.100
Cool, let me put our
actual API back in here.

12
00:00:43.170 --> 00:00:48.940
Which was http local hosts.

13
00:00:48.940 --> 00:00:50.953
I think mine was 4,000.

14
00:00:50.953 --> 00:00:53.096
Yours should be 4,000 to for that.

15
00:00:53.096 --> 00:00:57.070
So if you do that and
we wanted to look at the queries.

16
00:00:57.070 --> 00:00:59.600
You can just go to GraphQL playground.

17
00:00:59.600 --> 00:01:00.680
Where is that?
There it is.

18
00:01:00.680 --> 00:01:02.980
You can go to GraphQL playground and
type in your URL.

19
00:01:02.980 --> 00:01:07.720
But you can also just go
to your DevTools here.

20
00:01:07.720 --> 00:01:10.180
There we go.

21
00:01:10.180 --> 00:01:12.050
I think I stopped my server.

22
00:01:12.050 --> 00:01:12.880
Yeah, there it is.

23
00:01:12.880 --> 00:01:13.825
Let me just copy that.

24
00:01:13.825 --> 00:01:17.147
There we go.

25
00:01:17.147 --> 00:01:23.250
[SOUND] I gotta get rid of that query at
the bottom, it's actually breaking it.

26
00:01:23.250 --> 00:01:24.820
That's what it is.

27
00:01:24.820 --> 00:01:25.640
Get rid of this thing.

28
00:01:27.010 --> 00:01:29.104
It's like you don't have that
on your server, cuz I don't.

29
00:01:32.938 --> 00:01:34.641
&gt;&gt; Scott Moss: Cool, so then,
if you go to your DevTools,

30
00:01:34.641 --> 00:01:36.260
if you download the Dev Tools.

31
00:01:36.260 --> 00:01:37.660
Let me refresh that to get it to kick up.

32
00:01:39.030 --> 00:01:40.340
Okay, something is breaking.

33
00:01:41.920 --> 00:01:43.553
I spelled local host wrong, Jesus.

34
00:01:43.553 --> 00:01:47.808
Localhost, there we go.

35
00:01:50.137 --> 00:01:53.740
&gt;&gt; Scott Moss: All right,
go back to your DevTools, refresh this.

36
00:01:55.340 --> 00:02:00.780
And this is basically, you can see
right here, this says, GraphiQL.

37
00:02:00.780 --> 00:02:04.390
So I told you about GraphiQL, which is
basically the first version of Playground.

38
00:02:04.390 --> 00:02:05.740
You have GraphiQL built in right here.

39
00:02:05.740 --> 00:02:07.940
So you can explore your schema.

40
00:02:07.940 --> 00:02:09.230
So right here, if I click on query,

41
00:02:09.230 --> 00:02:12.456
you can see, here's all the queries
that we can do against of API.

42
00:02:12.456 --> 00:02:17.550
So we wanna run a pets query to get
all the pets to display on this page.

43
00:02:17.550 --> 00:02:19.900
And it takes an optional argument.

44
00:02:19.900 --> 00:02:22.550
You can use the argument if you want or
not, but we'll get to that.

45
00:02:22.550 --> 00:02:24.410
But for now,
you just wanna run the pets query.

46
00:02:24.410 --> 00:02:26.080
So you can just come in here and
just test it right quick.

47
00:02:26.080 --> 00:02:27.500
You say cool, what does that look like?

48
00:02:27.500 --> 00:02:30.250
So if I run the pets query,
what do pets look like?

49
00:02:30.250 --> 00:02:31.660
Well, they have a name?

50
00:02:31.660 --> 00:02:37.016
Always get that ID and have an image.

51
00:02:37.016 --> 00:02:40.170
So if you run that,
you can see we get zero pets back,

52
00:02:40.170 --> 00:02:43.830
because there are no pets in the database,
cuz we haven't created any yet.

53
00:02:43.830 --> 00:02:46.820
So you can wait till we get to the point
where you create some, or you can go into

54
00:02:46.820 --> 00:02:49.630
the database and make some yourself,
and I'll show you how to do that.

55
00:02:49.630 --> 00:02:52.760
But, at least, you're getting back
an empty array, which is no pets.

56
00:02:52.760 --> 00:02:54.330
So that's how you know your query works.

57
00:02:54.330 --> 00:02:55.820
So this is a great place to go and

58
00:02:55.820 --> 00:03:01.240
test client-side queries against a server
that your client is hooked up to.

59
00:03:01.240 --> 00:03:03.570
And then,
you could literally just go from here.

60
00:03:03.570 --> 00:03:06.540
You can copy and paste it in your code,
and you've got the query working.

61
00:03:06.540 --> 00:03:09.240
Just remember,
you need to create an operation name.

62
00:03:09.240 --> 00:03:11.900
So this is the shorthand
method of creating a query.

63
00:03:11.900 --> 00:03:14.150
But you really wanna create
an operation name here.

64
00:03:14.150 --> 00:03:18.780
So Apollo cash can take advantage of that
operation and save it inside of the cache.

65
00:03:19.940 --> 00:03:21.390
Underneath the operation name, right now,

66
00:03:21.390 --> 00:03:24.000
there's nothing in a cache,
cuz we didn't execute a query yet.

67
00:03:24.000 --> 00:03:26.430
But once they execute a query,
you'll see the nodes in the cache.

68
00:03:26.430 --> 00:03:29.750
You also see the queries by their
name in the cache, as well.

69
00:03:29.750 --> 00:03:31.960
So make sure you add operation in there.

70
00:03:31.960 --> 00:03:33.992
So we wanna do the pets query
with an operation name.

71
00:03:33.992 --> 00:03:40.300
And we wanna do it inside
of the pets file here.

72
00:03:40.300 --> 00:03:42.970
So in order to do that,
you would do something called used query.

73
00:03:42.970 --> 00:03:46.090
So if I were to make a query here,

74
00:03:46.090 --> 00:03:48.580
I'm not even gonna make a real ones,
cuz I want you to do it.

75
00:03:49.580 --> 00:03:52.274
It's gonna call it a query.

76
00:03:52.274 --> 00:03:55.940
And you're gonna use the graphiQL tag,
just like we've done in the other example.

77
00:03:57.040 --> 00:03:58.830
And you're gonna issue your query.

78
00:03:58.830 --> 00:04:03.024
So you go to operation name, name.

79
00:04:03.024 --> 00:04:06.430
And then, you give it a query,
whatever your query is.

80
00:04:06.430 --> 00:04:07.889
In this case, you should be using pets.

81
00:04:10.960 --> 00:04:15.620
And you get some fields here, like that.

82
00:04:15.620 --> 00:04:22.340
Once you have your query, you can
pass it into useQuery, or like this,

83
00:04:22.340 --> 00:04:27.620
query, and then, use query's gonna give
back a couple things in this array.

84
00:04:27.620 --> 00:04:32.410
So the first thing, it's gonna
give back is, the actual response

85
00:04:32.410 --> 00:04:36.900
from the server, so in this case,
it's gonna be an object.

86
00:04:36.900 --> 00:04:41.310
And what we get back from the object
is gonna be a data property.

87
00:04:41.310 --> 00:04:44.920
The fact I think, should be giving me
some, no, it doesn't give me that.

88
00:04:44.920 --> 00:04:48.870
So looking back at the data property,
we'll get back some something if it's

89
00:04:48.870 --> 00:04:53.190
loading, something like that, to let us
know if it's loading, things like that.

90
00:04:54.980 --> 00:05:00.280
And from there, you should be able to get
the data, see if something's loading,

91
00:05:00.280 --> 00:05:05.160
and pretty much, look at that and see what
it is, what you wanna do is you wanna

92
00:05:05.160 --> 00:05:09.510
get the data, and get the pets that you
get back, and you want to pass them to

93
00:05:09.510 --> 00:05:13.760
the PetsList component on line 41, or
whatever line number it is for you.

94
00:05:13.760 --> 00:05:16.070
There's a PetList component at the bottom.

95
00:05:16.070 --> 00:05:19.690
It's going to take a pets
property like that.

96
00:05:19.690 --> 00:05:22.680
And you should be able to pass in
an array of pets like that, and

97
00:05:22.680 --> 00:05:23.410
it will give you the pets.

98
00:05:24.740 --> 00:05:28.290
So however you write your query,
whatever names, whatever aliases you use,

99
00:05:28.290 --> 00:05:32.870
you need to get it using the useQuery, and
you need to pass it down to the pets list.

100
00:05:32.870 --> 00:05:36.390
And like I said, you're not gonna
have any pets in the array, so

101
00:05:36.390 --> 00:05:37.560
you probably won't see anything.

102
00:05:37.560 --> 00:05:39.210
But nothing should, great.

103
00:05:39.210 --> 00:05:41.952
If you wanted to add
some stuff to the array,

104
00:05:41.952 --> 00:05:46.993
you can just go to db.json in your pets
array, and you can add some pets here, and

105
00:05:46.993 --> 00:05:52.436
you can look at a pet type,
&gt;&gt; Scott Moss: To see what field a pet

106
00:05:52.436 --> 00:05:56.408
has, and you can just make those up if you
want, and put them inside your database.

107
00:05:56.408 --> 00:05:59.400
Or you can just wait until we get to
the mutation part, totally up to you.

108
00:05:59.400 --> 00:06:03.750
Because I know react hooks
might be a blocker for

109
00:06:03.750 --> 00:06:09.414
someone if we go to Apollo Click on Docs.

110
00:06:09.414 --> 00:06:12.961
Click on this one,

111
00:06:12.961 --> 00:06:18.281
useQuery, next page,

112
00:06:18.281 --> 00:06:22.946
useQuery, there we go.

113
00:06:22.946 --> 00:06:27.210
So click on useQuery and
here, here we go, so

114
00:06:27.210 --> 00:06:31.380
if you forget the syntax, it's just this.

115
00:06:32.380 --> 00:06:33.140
That's how you use current.

116
00:06:33.140 --> 00:06:34.110
Actually, I think I put an array,

117
00:06:34.110 --> 00:06:37.970
it's actually not an array,
it's just an object.

118
00:06:40.590 --> 00:06:42.770
So you'll get that data loading error.

119
00:06:42.770 --> 00:06:47.460
So yeah, if you forget, you can literally
go to this doc page right here.

120
00:06:47.460 --> 00:06:51.320
If you forget the syntax, if React Host
is just like what is this, that's all you

121
00:06:51.320 --> 00:06:55.490
need to know, just think of useQuery
as a function that takes a query, and

122
00:06:55.490 --> 00:06:58.980
returns an object that has a data, which
is what you'd get back from the server,

123
00:06:58.980 --> 00:07:01.470
a loading, which is true or
false if it's a loading.

124
00:07:01.470 --> 00:07:05.748
An error, which may have an error or
not, that's it.

125
00:07:05.748 --> 00:07:07.984
This is not a promise,
you don't need to wait it,

126
00:07:07.984 --> 00:07:10.860
you don't need to think about then,
all you gotta do, so this,

127
00:07:10.860 --> 00:07:14.194
you don't have to think about react hooks,
just that thing right there.

