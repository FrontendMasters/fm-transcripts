WEBVTT

1
00:00:00.970 --> 00:00:03.440
&gt;&gt; Scott Moss: So,
storing data from your API.

2
00:00:05.000 --> 00:00:11.500
By default, Apollo's going to store all
the nodes, and when I talk about nodes,

3
00:00:11.500 --> 00:00:15.960
I'm talking about pretty much every object
that's returned from a graph to API.

4
00:00:17.480 --> 00:00:20.136
Apollo is going to store those flat.

5
00:00:20.136 --> 00:00:23.515
And it's gonna be normalized, and it's
gonna be flat inside of a local cache.

6
00:00:23.515 --> 00:00:25.730
And we're gonna look at that cache,
you're gonna see what we're talking about.

7
00:00:25.730 --> 00:00:28.330
And it does that by
generating that unique ID.

8
00:00:28.330 --> 00:00:34.160
That unique ID is default to .id property,
or ._id from your nodes.

9
00:00:34.160 --> 00:00:39.000
So basically if you look at,
I think characters have an ID here, right?

10
00:00:39.000 --> 00:00:41.500
So if we did ID, by default,

11
00:00:41.500 --> 00:00:46.590
Apollo's gonna look at an ID field or
an _ID field on any single node.

12
00:00:46.590 --> 00:00:51.599
And that is gonna use that along with the,
I believe it also uses typename.

13
00:00:56.354 --> 00:00:57.800
&gt;&gt; Scott Moss: It's gonna use ID and

14
00:00:57.800 --> 00:01:02.539
typename combined to create a unique
Index for each individual note,

15
00:01:02.539 --> 00:01:07.214
and he's going to store them flat
inside of a local cache and memory.

16
00:01:07.214 --> 00:01:09.006
So what does that mean flat will,

17
00:01:09.006 --> 00:01:13.742
right now if you look at this architecture
right here, this data model, it's nested,

18
00:01:13.742 --> 00:01:17.652
you have characters and results and
the results is an array of all these.

19
00:01:17.652 --> 00:01:21.625
Well, Apollo is going to start them all on
the top level every single one of these

20
00:01:21.625 --> 00:01:25.418
items is going to be stored flat in the
keys going to be like their ID plus their

21
00:01:25.418 --> 00:01:27.170
type name or something like that.

22
00:01:27.170 --> 00:01:30.160
And that's how they're
gonna be stored by default.

23
00:01:30.160 --> 00:01:30.726
That's what happens.

24
00:01:30.726 --> 00:01:35.930
So, it's a really good habit of making
sure you always return an id or

25
00:01:35.930 --> 00:01:39.175
a _id from every single query that you do.

26
00:01:39.175 --> 00:01:43.614
Otherwise, you are going to
have to change what Apollo

27
00:01:43.614 --> 00:01:46.890
stores as far as the ID, which you can.

28
00:01:46.890 --> 00:01:49.720
There's a function in Apollo you
can see that you can override,

29
00:01:49.720 --> 00:01:52.064
like you know what, don't use ID.

30
00:01:52.064 --> 00:01:54.480
Run this function to compute the ID for
all my nodes.

31
00:01:54.480 --> 00:01:59.770
But my recommendation is, always send
on an id, or an _id, or none at all.

32
00:01:59.770 --> 00:02:04.460
It's not a good practice to say, these
nodes have IDs but these nodes don't,

33
00:02:04.460 --> 00:02:09.250
like I would not do it just make sure
they all have IDs or none of them do.

34
00:02:09.250 --> 00:02:13.226
And if none of them do, then you need to
write a function to let Apollo know how to

35
00:02:13.226 --> 00:02:15.479
generate a unique ID
to store these things.

36
00:02:16.790 --> 00:02:18.150
&gt;&gt; Scott Moss: Any questions on that?

37
00:02:18.150 --> 00:02:21.145
&gt;&gt; Speaker 2: So that means that yesterday
we talked a bit about how you could

38
00:02:21.145 --> 00:02:25.001
get friends, of friends, of friends,
of friends, of friends, of friends,

39
00:02:25.001 --> 00:02:25.650
of friends.

40
00:02:27.080 --> 00:02:29.220
That data structure that's
returned from your server,

41
00:02:29.220 --> 00:02:32.430
it's gonna be nested pretty deeply when
you get it back in the results, but

42
00:02:32.430 --> 00:02:35.760
then with the client you can just
say it can be friend with ID five.

43
00:02:35.760 --> 00:02:38.077
And it's gonna bind that
in the structure and-

44
00:02:39.663 --> 00:02:40.411
&gt;&gt; Scott Moss: So yes.

45
00:02:40.411 --> 00:02:43.425
If you wanted to query from
the clients ichache and

46
00:02:43.425 --> 00:02:46.723
you say, I wanna find this
friend With this ID of five,

47
00:02:46.723 --> 00:02:51.030
yeah that would be possible
because it's all stored flat.

48
00:02:51.030 --> 00:02:55.410
But it's not as simple
as asking Apollo for

49
00:02:55.410 --> 00:02:58.790
give me this frame with this
ID of five as you'll see.

50
00:02:58.790 --> 00:03:02.295
It is that simple, but
it's not that simple.

51
00:03:02.295 --> 00:03:06.260
[LAUGH] Basically you can do it,
but there's a better way.

52
00:03:06.260 --> 00:03:09.110
But yes, it is very possible to do that.

53
00:03:09.110 --> 00:03:12.810
&gt;&gt; Speaker 2: Yeah, my question was do
all objects get rolled up to the top,

54
00:03:12.810 --> 00:03:14.460
like the next two topics as well?

55
00:03:14.460 --> 00:03:15.070
&gt;&gt; Scott Moss: Yep.

56
00:03:15.070 --> 00:03:17.360
All nodes get rolled up the top,

57
00:03:17.360 --> 00:03:20.520
anything that's pretty much
an object gets, it's all flat.

58
00:03:20.520 --> 00:03:27.810
There's no nested structure inside
of this side of the pile of cache.

59
00:03:27.810 --> 00:03:33.900
And the reason they do that as we get
more into it is, it allows you to

60
00:03:33.900 --> 00:03:39.910
easily update your cache when nodes
get updated from different operations.

61
00:03:39.910 --> 00:03:43.178
Like if you do a query that's
getting all these characters.

62
00:03:46.197 --> 00:03:48.320
&gt;&gt; Scott Moss: There you go.

63
00:03:48.320 --> 00:03:50.610
If you do a query getting
all of these characters.

64
00:03:50.610 --> 00:03:54.060
But then you have another query
that's slightly different,

65
00:03:54.060 --> 00:03:56.160
but gets characters as well.

66
00:03:56.160 --> 00:04:00.230
And then you have mutation that, I don't
know, updates one of those characters,

67
00:04:00.230 --> 00:04:03.050
if they were stored the way
that they came back nested.

68
00:04:03.050 --> 00:04:06.000
You have to go into places and
find that character updated.

69
00:04:06.000 --> 00:04:09.380
But if it was stored flat, there's
only one instance of a character cuz

70
00:04:09.380 --> 00:04:11.660
it's a unique ID and it gets updated once.

71
00:04:11.660 --> 00:04:16.920
And both instances of those queries
now have the new updated character,

72
00:04:16.920 --> 00:04:18.800
whenever you show them on the page.

73
00:04:18.800 --> 00:04:21.120
&gt;&gt; Speaker 2: But if character
has something like an address and

74
00:04:21.120 --> 00:04:24.700
address itself is an object, will that be
rolled up again because then you'll have

75
00:04:24.700 --> 00:04:29.810
to maintain a reference between the
addresses and their characters as well.

76
00:04:29.810 --> 00:04:32.180
&gt;&gt; Scott Moss: So,
that doesn't maintain the reference.

77
00:04:32.180 --> 00:04:34.730
In fact, what it does is it doesn't
care about the references, and

78
00:04:34.730 --> 00:04:36.540
this is where operation names come in.

79
00:04:36.540 --> 00:04:38.720
So, what it will do instead is,

80
00:04:38.720 --> 00:04:40.800
yes anything that's a node
like an object type,

81
00:04:40.800 --> 00:04:44.200
or anything like that does get pushed
to the top no matter how deep it is.

82
00:04:44.200 --> 00:04:45.700
And as far as references go,

83
00:04:45.700 --> 00:04:49.660
it doesn't really care about them
cuz it remembers your query.

84
00:04:49.660 --> 00:04:52.950
So you can think about it like this,
these operation names these queries.

85
00:04:52.950 --> 00:04:58.172
These are index, so
it knows what queries have access to what,

86
00:04:58.172 --> 00:05:03.786
and when a node gets updated via
either you doing it automatically or

87
00:05:03.786 --> 00:05:10.600
you doing it manually, that query has
the ability to just automatically update.

88
00:05:10.600 --> 00:05:15.523
Because everything inside of that query or
one thing inside that query got updated

89
00:05:15.523 --> 00:05:18.248
via whatever you did a mutation or
whatever.

90
00:05:18.248 --> 00:05:21.231
So, it all happens
automatically by default,

91
00:05:21.231 --> 00:05:25.782
unless you get to the point where,
you have a mutation that's returning

92
00:05:25.782 --> 00:05:29.510
different fields than the query
before it was returning.

93
00:05:29.510 --> 00:05:31.150
Then you manually have to do it.

94
00:05:31.150 --> 00:05:34.950
A lot of this sound's complicated,
cuz I'm trying not to talk a lot about it,

95
00:05:34.950 --> 00:05:36.220
cuz we're gonna get to it.

96
00:05:36.220 --> 00:05:42.870
But, yeah, there is a point where you
will have to do some manual stuff.

97
00:05:42.870 --> 00:05:45.760
But most of the time,
it's gonna be automatic.

98
00:05:45.760 --> 00:05:48.650
And Apollo doesn't care about
relationships cuz it doesn't have to.

99
00:05:48.650 --> 00:05:50.850
It just remembers query operations and
it stores everything flat.

100
00:05:50.850 --> 00:05:54.850
Because that's the only way you can
access data is through a query operation.

101
00:05:54.850 --> 00:05:56.940
That's what your components
are concerned about.

102
00:05:56.940 --> 00:05:58.860
Your components aren't even
concerned about relations.

103
00:05:58.860 --> 00:06:01.930
So, those relations
mean nothing to Apollo.

104
00:06:01.930 --> 00:06:04.670
And when we go to the cache and explore
it, you'll see what I'm talking about.

105
00:06:04.670 --> 00:06:05.860
You'll see how all that stuff works.

