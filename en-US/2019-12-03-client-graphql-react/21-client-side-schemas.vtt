WEBVTT

1
00:00:00.350 --> 00:00:01.600
&gt;&gt; Scott Moss: The next
thing I wanna talk about.

2
00:00:01.600 --> 00:00:08.160
So I mentioned something about managing
local state with Apollo and GraphQL.

3
00:00:09.220 --> 00:00:11.790
And yeah, I wanna talk about that
cuz I think it's really cool.

4
00:00:11.790 --> 00:00:15.600
And in order to learn about that you
have to understand client side schemas.

5
00:00:15.600 --> 00:00:18.040
So, if you're taking any of
the Apollo server side courses or

6
00:00:18.040 --> 00:00:20.330
the GraphQL server side
courses that we have here,

7
00:00:20.330 --> 00:00:23.050
you already learned how to create
schemas on the server side.

8
00:00:23.050 --> 00:00:25.940
If not, you're gonna learn how
to create schemas on the client

9
00:00:25.940 --> 00:00:30.510
side now which are very similar
to schemas on the server side and

10
00:00:30.510 --> 00:00:32.110
why you need them in the first place.

11
00:00:32.110 --> 00:00:33.360
So why?

12
00:00:33.360 --> 00:00:37.860
In addition to managing data from
your API Apollo client can also

13
00:00:38.940 --> 00:00:42.060
manage local state originated
from your front end app.

14
00:00:42.060 --> 00:00:44.760
Stuff you would normally store
in something like Redux or view.

15
00:00:44.760 --> 00:00:47.990
You can create a schema to define that
state, which allows you to query for

16
00:00:47.990 --> 00:00:51.960
that state the same way you query for
your API data.

17
00:00:53.360 --> 00:00:55.160
So, that's basically a long way of saying

18
00:00:56.920 --> 00:01:01.920
you can define the state that
you create locally in your app

19
00:01:01.920 --> 00:01:05.250
the same way you define state on
your server, which is a schema.

20
00:01:05.250 --> 00:01:09.690
And then you can use graphical
queries to retrieve that state.

21
00:01:09.690 --> 00:01:12.470
And you can mix those queries
in with the exact same queries

22
00:01:12.470 --> 00:01:13.950
are used to retrieve
state from the server.

23
00:01:13.950 --> 00:01:17.070
You don't have to make separate queries,
you can make one query that gets.

24
00:01:17.070 --> 00:01:20.520
Server data and
local data at the same time and

25
00:01:20.520 --> 00:01:26.650
Apollo will resolve them for you with
no changes to your code, no issues.

26
00:01:26.650 --> 00:01:30.360
Your app will never know what came
from local and what came from server,

27
00:01:30.360 --> 00:01:34.520
it won't even know,
it's the same thing, it's pretty legit.

28
00:01:34.520 --> 00:01:38.940
So, yeah like I said, the same way just
like the server, all you have to do is

29
00:01:38.940 --> 00:01:43.890
extend the types that your server
schema has created for you.

30
00:01:43.890 --> 00:01:47.030
And then you have to use what is called a
directive and I'll show you what directive

31
00:01:47.030 --> 00:01:50.450
is to access the local state
from your queries and mutations.

32
00:01:50.450 --> 00:01:51.750
So what do I mean by that?

33
00:01:51.750 --> 00:01:53.360
Let' get into the example.

34
00:01:53.360 --> 00:01:57.210
So if we head over to client JS, and

35
00:01:57.210 --> 00:02:02.490
let's say we wanted to add
a new type to the user.

36
00:02:02.490 --> 00:02:04.140
Let's just make a new type for the user.

37
00:02:04.140 --> 00:02:08.380
The first thing you have to do
is you have to make a schema.

38
00:02:08.380 --> 00:02:11.150
So to make a graph scale schema,
you need two things,

39
00:02:11.150 --> 00:02:15.110
you need some type definitions and
you need some resolvers.

40
00:02:15.110 --> 00:02:18.970
Resolvers are functions
that are responsible for

41
00:02:18.970 --> 00:02:22.320
getting the values for
the fields on your type definitions.

42
00:02:22.320 --> 00:02:24.440
So let's just make some
type definitions here.

43
00:02:24.440 --> 00:02:26.610
So, we'll say type defs and

44
00:02:26.610 --> 00:02:31.400
we're going to use the gql tag here,
just like we do in our crazy mutations and

45
00:02:31.400 --> 00:02:33.830
we're gonna use what's called
the schema definition language.

46
00:02:33.830 --> 00:02:36.600
The schema definition language
is slightly different than

47
00:02:36.600 --> 00:02:40.410
the query language that you use
to make queries and mutations, so

48
00:02:40.410 --> 00:02:43.070
what we need to do is use
a keyword here called extend.

49
00:02:44.130 --> 00:02:48.590
And because we're trying to add
a new field to the User type,

50
00:02:48.590 --> 00:02:51.380
we're gonna extend the User type here.

51
00:02:51.380 --> 00:02:56.410
So extend user, like that,
or extend type User.

52
00:02:57.950 --> 00:03:03.079
And we know we have a User type,
because if you go back to our

53
00:03:03.079 --> 00:03:08.127
code which is somewhere around here,
we go back to this.

54
00:03:11.387 --> 00:03:13.079
&gt;&gt; Scott Moss: We can look at our schema.

55
00:03:16.048 --> 00:03:18.839
&gt;&gt; Scott Moss: And we can look for
user, there we go,

56
00:03:18.839 --> 00:03:22.130
user type has an idea username and pets.

57
00:03:22.130 --> 00:03:25.230
So we can extend this to
have whatever else we want.

58
00:03:25.230 --> 00:03:30.280
So we're gonna extend it to add
a field for, I don't know, age.

59
00:03:30.280 --> 00:03:32.290
We'll add a new field that says age,

60
00:03:32.290 --> 00:03:34.770
if you needed to know the user's age for
some reason.

61
00:03:34.770 --> 00:03:38.770
So we'll extend it, we'll give the user
an age and we'll say its type is

62
00:03:38.770 --> 00:03:43.421
integer like that, okay?

63
00:03:45.420 --> 00:03:46.470
Everybody follow me so far?

64
00:03:46.470 --> 00:03:48.924
Okay, then we'll make some resolvers.

65
00:03:50.383 --> 00:03:55.430
&gt;&gt; Scott Moss: We'll make some resolvers
which is gonna be an object that

66
00:03:55.430 --> 00:04:00.170
maps directly to the user
type which is also an object.

67
00:04:01.190 --> 00:04:04.370
And we're gonna make a function
that's going to be executed when we

68
00:04:04.370 --> 00:04:06.610
are interested in the age of a user.

69
00:04:06.610 --> 00:04:10.605
So, if we want an age of a user, I'm just
going to return a hard code of value and

70
00:04:10.605 --> 00:04:15.407
say
&gt;&gt; Scott Moss: 35, all users are 35.

71
00:04:17.710 --> 00:04:20.180
&gt;&gt; Scott Moss: It's an integer
that matches up with this.

72
00:04:22.528 --> 00:04:23.550
&gt;&gt; Scott Moss: Everybody follow me here?

73
00:04:24.860 --> 00:04:28.950
Okay, and all we have to do from there
is add it to our client down below.

74
00:04:28.950 --> 00:04:32.714
So we can say here's some resolvers and
here's some type definitions.

75
00:04:40.619 --> 00:04:42.581
&gt;&gt; Scott Moss: Right, so
we're defining some local state,

76
00:04:42.581 --> 00:04:44.000
age does not exist on the server.

77
00:04:44.000 --> 00:04:46.110
This is not gonna push it
back up to our server,

78
00:04:46.110 --> 00:04:48.280
and then our server has to do something.

79
00:04:48.280 --> 00:04:50.110
Nope, this is all local.

80
00:04:50.110 --> 00:04:53.430
We can do whatever we want with
this,wWe can derive this from anywhere,

81
00:04:53.430 --> 00:04:54.520
we can do whatever we want.

82
00:04:54.520 --> 00:04:55.400
This is local state.

83
00:04:57.730 --> 00:05:00.380
And we're just adding it to Apollo,
so Apollo knows about it.

84
00:05:00.380 --> 00:05:01.680
And we're extending it on the user type.

85
00:05:03.400 --> 00:05:06.990
So now, if I go back to pets,
I know pets have an owner.

86
00:05:08.080 --> 00:05:12.730
And I know that because if
I go look at the pet type,

87
00:05:14.430 --> 00:05:16.740
there is an owner here,
which is a user type.

88
00:05:16.740 --> 00:05:18.970
And a user has a ID and
username of pets, so

89
00:05:18.970 --> 00:05:23.530
what I'll do is I'll grab the owner and
I'll grab the ID of the owner,

90
00:05:23.530 --> 00:05:27.390
always grab the ID and then what I want,
is I wanna get the age.

91
00:05:27.390 --> 00:05:31.350
But if I just put age like this,
this is gonna go to our server, and

92
00:05:31.350 --> 00:05:33.790
our server's gonna go, like, what's that?

93
00:05:33.790 --> 00:05:35.840
I've never heard of that,
I don't know what age is.

94
00:05:35.840 --> 00:05:37.500
So we have to tell Apollo like,

95
00:05:37.500 --> 00:05:39.840
okay actually this one doesn't
need to go to the server.

96
00:05:39.840 --> 00:05:42.815
So this is where the director
was talking about his,

97
00:05:42.815 --> 00:05:47.224
he's the director of these outside,
like this and you'll just say client.

98
00:05:51.366 --> 00:05:55.031
&gt;&gt; Scott Moss: This is saying, this age
phil is only on the client don’t go to

99
00:05:55.031 --> 00:05:59.895
the server with it, keep it here and
give it to the client.That's basically is,

100
00:05:59.895 --> 00:06:04.404
and that's the direct to syntax,
you can have directives to fields types,

101
00:06:04.404 --> 00:06:07.100
you pretty much add
the redress to anything.

102
00:06:08.440 --> 00:06:09.710
On the schema side and

103
00:06:09.710 --> 00:06:12.690
the query mutation side there’s
different types of directives.

104
00:06:12.690 --> 00:06:15.260
But this is the client directive
that we get for free without Apollo.

105
00:06:16.760 --> 00:06:21.440
All right, so once we have that,
we can kinda take a look at this data.

106
00:06:21.440 --> 00:06:28.360
So, let's just say console.log data.pets.

107
00:06:28.360 --> 00:06:33.190
And we'll just maybe look at it like
the first one, see what happens.

108
00:06:34.840 --> 00:06:40.336
Cool, so we got that
&gt;&gt; Scott Moss: Get rid of that thing and

109
00:06:40.336 --> 00:06:43.550
refresh this, go look at this log here.

110
00:06:43.550 --> 00:06:48.730
We get back in Object, we go look at
the owner and then wow, there it is.

111
00:06:48.730 --> 00:06:50.226
The owner has an age of 35.

112
00:06:52.745 --> 00:06:55.548
&gt;&gt; Scott Moss: So we were able to
merge some local state that we had,

113
00:06:55.548 --> 00:06:59.116
we extended it from some server
type that we created on the server,

114
00:06:59.116 --> 00:07:03.150
either we did, or someone else on our
team, or whatever API we're using.

115
00:07:03.150 --> 00:07:05.700
And we were able to mix
them together seamlessly,

116
00:07:05.700 --> 00:07:08.810
and we didn't have to make any code
changes, as far as our components.

117
00:07:08.810 --> 00:07:12.390
They don't really need to know anything,
they don't even know if this came from,

118
00:07:12.390 --> 00:07:14.480
you couldn't look at this and
say that it came from local state.

119
00:07:14.480 --> 00:07:15.210
How would you know?

120
00:07:15.210 --> 00:07:16.772
It's Summer's object.

121
00:07:19.372 --> 00:07:20.790
&gt;&gt; Scott Moss: That right
there is super powerful.

122
00:07:20.790 --> 00:07:22.790
So Apollo's just came out with this,

123
00:07:22.790 --> 00:07:25.810
I would say probably not too long
ago within the last year or so.

124
00:07:25.810 --> 00:07:29.400
And that's like one of the best features
that's kind of like why they rip.

125
00:07:29.400 --> 00:07:31.310
They used to have Redux built
into the Apollo client.

126
00:07:31.310 --> 00:07:33.400
They rip it out and
the opposite for their own thing,

127
00:07:33.400 --> 00:07:36.630
and I'm glad they did because they
enable them to build stuff like that.

128
00:07:36.630 --> 00:07:39.980
And this is where you can kind of start
replacing Redux with your own stuff,

129
00:07:39.980 --> 00:07:44.320
because you can just store local state and
the way you resolve it is by

130
00:07:44.320 --> 00:07:49.030
creating a schema with some type daps that
you either created or extended yourself.

131
00:07:49.030 --> 00:07:52.790
And you just resolve them however
you want, they're just resolvers,

132
00:07:52.790 --> 00:07:56.310
you can make a resolve or do whatever
you want to take the same arguments.

133
00:07:56.310 --> 00:07:58.940
As the resolvers on the server
side which would be

134
00:08:00.410 --> 00:08:03.530
the current user in this case,
so the first argument.

135
00:08:03.530 --> 00:08:08.150
They would take any inputs that you had or
any orders that you had,

136
00:08:08.150 --> 00:08:12.050
they will take some context here that
would be created for you from Apollo.

137
00:08:12.050 --> 00:08:15.210
And even an info with an AST of
the query that you're trying to create,

138
00:08:15.210 --> 00:08:16.710
just like a server would.

139
00:08:16.710 --> 00:08:19.490
And you can do whatever you
want to resolve that value.

140
00:08:19.490 --> 00:08:23.260
So the client side state
management is pretty powerful.

141
00:08:23.260 --> 00:08:27.514
&gt;&gt; Speaker 2: And all of these changes
have to trickle down through our response

142
00:08:27.514 --> 00:08:32.013
to adding a pet to our optimistic
response from having added the pet.

143
00:08:32.013 --> 00:08:36.181
&gt;&gt; Scott Moss: 100%, so really even user
here, we even have an optimistic response

144
00:08:36.181 --> 00:08:40.700
for user, but yeah if this was a pet,
and we added a field to the pet.

145
00:08:40.700 --> 00:08:43.530
Then you bet you gotta go back
to the optimistic response and

146
00:08:43.530 --> 00:08:44.540
add that field on there.

147
00:08:44.540 --> 00:08:48.490
&gt;&gt; Speaker 2: But
since our get AllPets has the owner on it,

148
00:08:48.490 --> 00:08:50.529
that same data structure
has to be on there.

149
00:08:50.529 --> 00:08:55.892
&gt;&gt; Scott Moss: Yeah, yep, so since I
added the owner here on my AllPets,

150
00:08:55.892 --> 00:08:59.734
not only do I have to
add it to my mutation.

151
00:09:02.055 --> 00:09:05.310
&gt;&gt; Scott Moss: I also have to add
it to my optimistic response.

152
00:09:05.310 --> 00:09:07.080
So that's kind of annoying, right?

153
00:09:07.080 --> 00:09:08.460
So that's good,

154
00:09:08.460 --> 00:09:11.148
because that leads us right into the next
thing that I'm about to talk about.

155
00:09:11.148 --> 00:09:12.910
[LAUGH] So that's really great.

156
00:09:12.910 --> 00:09:16.390
So this is what I was saying, GraphQL
can pretty much be executed anywhere.

157
00:09:16.390 --> 00:09:19.380
This, we're not even in a server, we're on
the client and we're creating schemas and

158
00:09:19.380 --> 00:09:22.420
writing resolvers,
because that's all GraphQL does.

159
00:09:22.420 --> 00:09:26.750
It's a very simple function
in fact underlying tool for

160
00:09:26.750 --> 00:09:32.100
every GraphQL process that I've ever used
is a little function from GraphQL JS

161
00:09:32.100 --> 00:09:36.639
that takes in a query or a mutation,
a schema, some resolvers,

162
00:09:37.740 --> 00:09:41.880
some context in the root value, and
it returns you a resolved value.

163
00:09:41.880 --> 00:09:44.830
That's all it does,
that's literally all this stuff does.

164
00:09:44.830 --> 00:09:48.570
It's very simple, you can pretty much do
whatever you want with it, and there's

165
00:09:48.570 --> 00:09:53.420
new, crazy ways people are starting to do,
new things that people are starting to do

166
00:09:53.420 --> 00:09:57.790
with GraphQL that it's changing a lot of
stuff every day, so this is one of them.

