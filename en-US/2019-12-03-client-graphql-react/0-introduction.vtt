WEBVTT

1
00:00:00.070 --> 00:00:01.202
&gt;&gt; Scott Moss: All right,
good morning, everyone.

2
00:00:01.202 --> 00:00:06.608
Thanks for coming to the GraphQL course
for the client side using React.

3
00:00:06.608 --> 00:00:09.200
I'm Scott Moss,
I'm gonna be instructor today.

4
00:00:09.200 --> 00:00:12.620
I love GraphQL, I use GraphQL every single
day at my company, been using it for

5
00:00:12.620 --> 00:00:13.680
years.

6
00:00:13.680 --> 00:00:17.200
I've taught GraphQL here at
Frontend Masters a couple of times and

7
00:00:17.200 --> 00:00:20.580
this is the first time I'm getting to
talk to you all about using GraphQL on

8
00:00:20.580 --> 00:00:25.130
the frontend which is slightly different
than using it on the server side.

9
00:00:25.130 --> 00:00:27.520
And, if you're interested in
that we have courses for that.

10
00:00:27.520 --> 00:00:30.680
We have an advanced GraphQL
course on the server side.

11
00:00:30.680 --> 00:00:33.690
We also have a intro to GraphQL for
the server side.

12
00:00:33.690 --> 00:00:35.600
So definitely check those out
if you're interested in that.

13
00:00:35.600 --> 00:00:40.278
But this course is gonna be focused
purely on using GraphQL on the frontend

14
00:00:40.278 --> 00:00:41.187
using React.

15
00:00:43.197 --> 00:00:45.213
&gt;&gt; Scott Moss: So, to hop right into it,

16
00:00:45.213 --> 00:00:50.372
understanding what GraphQL is
specifically for the client side.

17
00:00:50.372 --> 00:00:55.315
GraphQL, at least the way Facebook
used GraphQL when it was initially

18
00:00:55.315 --> 00:00:57.410
created was they intended for

19
00:00:57.410 --> 00:01:02.460
GraphQL to be used solve frontend
problems, as far as like UI related.

20
00:01:02.460 --> 00:01:07.109
So, you build the UI mostly in some
component architecture using a framework

21
00:01:07.109 --> 00:01:11.699
like React, or Vue, or whatever your
favorite library is, or framework.

22
00:01:11.699 --> 00:01:15.774
And then those components have props, and
usually those component's props are shaped

23
00:01:15.774 --> 00:01:19.610
a certain way using something like
prop types, or something like that.

24
00:01:19.610 --> 00:01:22.430
So, you get to the point
where you start designing or

25
00:01:22.430 --> 00:01:27.830
modeling data on the frontend exactly
the same way that your components needed.

26
00:01:27.830 --> 00:01:32.770
So that eventually just translates over to
like, well, if the in-memory state that

27
00:01:32.770 --> 00:01:37.410
we have on the client is modeled in a way
that our components can just consume,

28
00:01:37.410 --> 00:01:42.260
how can we extend that to have
the data from the server coming back

29
00:01:42.260 --> 00:01:44.540
the exact same way that
our components as well?

30
00:01:44.540 --> 00:01:47.875
And now those are some of the first steps
of getting what we have now which is

31
00:01:47.875 --> 00:01:48.780
GraphQL.

32
00:01:48.780 --> 00:01:51.341
So that's basically what the purpose
of GraphQL on the frontend is.

33
00:01:51.341 --> 00:01:56.350
Like how do we consume data from
the server in the exact shape,

34
00:01:56.350 --> 00:02:00.840
the exact type that we needed to display
it so we can just take it from the server,

35
00:02:00.840 --> 00:02:03.860
throw it right on the page
without having to do anything?

36
00:02:03.860 --> 00:02:05.640
Just completely eliminate that.

37
00:02:05.640 --> 00:02:10.241
I need to do any post transformations or
processing and just throw it on the page,

38
00:02:10.241 --> 00:02:12.418
and that's kind of where it started.

39
00:02:12.418 --> 00:02:18.230
And now, GraphQL has evolved
into like a whole another beast.

40
00:02:18.230 --> 00:02:21.060
It's more than just a way to
fetch data from a server to throw

41
00:02:21.060 --> 00:02:22.340
inside of a component.

42
00:02:22.340 --> 00:02:27.868
It's actually its own language and
its own process to build a schema for

43
00:02:27.868 --> 00:02:32.768
anything and write queries to
resolve into whatever you want.

44
00:02:32.768 --> 00:02:36.780
We're just using it for
data on a server and on the bracket.

45
00:02:36.780 --> 00:02:40.902
So for this course,
I have a repo for everyone.

46
00:02:40.902 --> 00:02:46.644
So first thing, let's just get started
with that, cuz if you go to GitHub,

47
00:02:46.644 --> 00:02:52.528
Frontend Masters it's going to be,
&gt;&gt; Scott Moss: Fullstack GraphQL.

48
00:02:53.947 --> 00:02:55.140
&gt;&gt; Scott Moss: And, you can fort that.

49
00:02:55.140 --> 00:02:58.993
And then once you do that you need
to check out to the client branch.

50
00:02:58.993 --> 00:03:01.138
If you already have the repos
just do a fetch and

51
00:03:01.138 --> 00:03:03.220
then check out to the client branch.

52
00:03:03.220 --> 00:03:05.690
The master branch has
some server side stuff.

53
00:03:05.690 --> 00:03:08.490
There's a solution branch that
has all the stuff completed.

54
00:03:08.490 --> 00:03:11.190
But what we're focusing on today
will be the client branch,

55
00:03:11.190 --> 00:03:14.090
which is everything you need.

56
00:03:14.090 --> 00:03:15.710
So go ahead and check out to that one.

57
00:03:15.710 --> 00:03:19.771
And then in the read me, there's a link
to the slides that we'll be using today,

58
00:03:19.771 --> 00:03:21.821
so follow along or you can just watch me.

59
00:03:23.978 --> 00:03:27.342
&gt;&gt; Scott Moss: There are no dependencies
other than just having node version

60
00:03:27.342 --> 00:03:29.300
greater than six purely frontend.

61
00:03:29.300 --> 00:03:30.220
Everything is already in the pack.

62
00:03:30.220 --> 00:03:30.910
Is that JSON?

63
00:03:30.910 --> 00:03:32.440
I don't even think you
have to install anything.

64
00:03:32.440 --> 00:03:35.444
I have everything in the pack is that
JSON have everything in the yarn lock so

65
00:03:35.444 --> 00:03:38.447
I don't think you even have that,
you can run it install command other than

66
00:03:38.447 --> 00:03:40.272
the initial one when you
pull this repo down.

67
00:03:42.319 --> 00:03:45.994
&gt;&gt; Scott Moss: So the first thing is,
I want to talk about GraphQL,

68
00:03:45.994 --> 00:03:48.850
to the big picture like, what is it?

69
00:03:48.850 --> 00:03:54.673
Like when people's mentioned GraphQL, I
think there's like different scenarios of

70
00:03:54.673 --> 00:04:00.034
what they could be talking about because
GraphQL itself covers a lot of things.

71
00:04:00.034 --> 00:04:04.898
But, basically what I think of GraphQL
is this is kinda like my definition

72
00:04:04.898 --> 00:04:09.449
is it's a spec that describes
a declarative query language that your

73
00:04:09.449 --> 00:04:13.230
clients can use to ask an API for
the exact data they want.

74
00:04:13.230 --> 00:04:16.513
This is achieved by creating
a strongly type schema for your API,

75
00:04:16.513 --> 00:04:19.439
ultimate flexibility and
how your API can resolve data and

76
00:04:19.439 --> 00:04:22.620
client queries validated
against your schema.

77
00:04:22.620 --> 00:04:24.740
All that just sounds crazy.

78
00:04:24.740 --> 00:04:27.208
But, it took me a while to come
up the definition because it's so

79
00:04:27.208 --> 00:04:29.145
many different things what
I believe GraphQL is.

80
00:04:29.145 --> 00:04:33.336
So basically what this is saying is if
you ever use any strong type language

81
00:04:33.336 --> 00:04:36.039
like Java or TypeScript,
anything like that,

82
00:04:36.039 --> 00:04:39.440
imagine putting a type system
in front of an existing API.

83
00:04:39.440 --> 00:04:44.250
And then now, on any client they
want to interact with the API.

84
00:04:44.250 --> 00:04:49.070
They could leverage that type system to
ask the API for exactly what they want it.

85
00:04:49.070 --> 00:04:51.650
So, if you created some
types of some fields on it,

86
00:04:51.650 --> 00:04:55.850
then you could from the client side, give
me this data with these exact fields and

87
00:04:55.850 --> 00:04:58.890
the API will respond back
with that exact shape.

88
00:04:58.890 --> 00:05:02.380
Just like if you were using a type
system on a strongly typed language.

89
00:05:02.380 --> 00:05:05.840
It's basically that as far as like
how the client interacts with it

90
00:05:05.840 --> 00:05:08.430
server side as you find out,
there's a lot more to it.

91
00:05:08.430 --> 00:05:11.111
It's actually a graph,
you're creating a graph.

92
00:05:11.111 --> 00:05:12.300
If you don't know what a graph is.

93
00:05:12.300 --> 00:05:16.220
You're gonna learn what a graph is and
and we'll get into it.

94
00:05:16.220 --> 00:05:20.426
Any questions on that, on what is GraphQL?

95
00:05:20.426 --> 00:05:21.985
After me telling you this definition,

96
00:05:21.985 --> 00:05:24.170
I don't expect you to know
everything about GraphQL.

97
00:05:24.170 --> 00:05:26.880
So, if you still don't know
what GraphQL is, that's fine.

98
00:05:26.880 --> 00:05:28.196
This is just to give you some context.

99
00:05:31.494 --> 00:05:33.870
&gt;&gt; Scott Moss: So like I said,
it's just a spec.

100
00:05:33.870 --> 00:05:39.350
GraphQL itself is not a repo somewhere,
it's not a framework.

101
00:05:39.350 --> 00:05:41.370
It's literally just a spec,
and here's the link to it.

102
00:05:41.370 --> 00:05:45.450
If you click this,
it'll actually take you to the spec

103
00:05:45.450 --> 00:05:48.960
that was created by the people who
created GraphQL which is Facebook.

104
00:05:48.960 --> 00:05:51.860
Facebook created GraphQL,
and here's the spec for it.

105
00:05:51.860 --> 00:05:53.517
And it changes all the time.

106
00:05:53.517 --> 00:05:57.004
And if we would go to look at this one
they have here, you start scrolling,

107
00:05:57.004 --> 00:06:00.180
yeah, it looks like what a spec
looks like, very boring.

108
00:06:00.180 --> 00:06:04.800
A lot of stuff that you probably don't
wanna read and it just scrolls forever.

109
00:06:04.800 --> 00:06:05.940
That's what a spec is.

110
00:06:05.940 --> 00:06:09.080
So, if you really wanna understand
how GraphQL works and the ins and

111
00:06:09.080 --> 00:06:10.590
outs, then go do this.

112
00:06:10.590 --> 00:06:12.931
This is what GraphQL is,
it's just this spec.

113
00:06:14.342 --> 00:06:17.501
&gt;&gt; Scott Moss: So, see how Facebook
created this spec which spawned from some

114
00:06:17.501 --> 00:06:20.070
internal thing that they were using.

115
00:06:20.070 --> 00:06:23.690
There are several implementations and
variations of that spec.

116
00:06:23.690 --> 00:06:27.750
So like I said, it's just a spec, people
from the community, including Facebook

117
00:06:27.750 --> 00:06:31.310
themselves have taken that spec and
created different libraries and

118
00:06:31.310 --> 00:06:35.390
frameworks and implementations,
based off languages and platforms and

119
00:06:35.390 --> 00:06:38.860
like there's so
many different graphical things out there

