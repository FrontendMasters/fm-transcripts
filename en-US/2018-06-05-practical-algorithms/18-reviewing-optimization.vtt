WEBVTT

1
00:00:00.040 --> 00:00:03.607
&gt;&gt; Bianca Gandolfo: So
in this section we talked

2
00:00:03.607 --> 00:00:07.510
about a couple different techniques for
caching.

3
00:00:07.510 --> 00:00:12.510
And the things that you should keep
in mind when using this technique is

4
00:00:12.510 --> 00:00:16.847
that you are trading time complexity for
space complexity.

5
00:00:16.847 --> 00:00:21.359
So for each operation you
are saving the value, and so

6
00:00:21.359 --> 00:00:28.090
you're creating a new data structure and
adding a new value to that every time.

7
00:00:28.090 --> 00:00:31.100
And so you're increasing the space
complexity while minimizing the time

8
00:00:31.100 --> 00:00:36.700
complexity, and this is really
important when your function calls or

9
00:00:36.700 --> 00:00:39.040
any operation is expensive.

10
00:00:39.040 --> 00:00:41.980
And so usually that trade-off is fine.

11
00:00:41.980 --> 00:00:46.480
Often in interviews people joke like,
there's this optimization question,

12
00:00:46.480 --> 00:00:47.850
how do we optimize?

13
00:00:47.850 --> 00:00:49.420
And there's a joke, I mean, a joke.

14
00:00:49.420 --> 00:00:53.894
I don't know if people really joke about
interviews or algorithms with people,

15
00:00:53.894 --> 00:00:57.659
the thing that people always say is,
you just use a hash table.

16
00:00:57.659 --> 00:00:59.611
This is us using a hash table.

17
00:00:59.611 --> 00:01:04.540
When they say use a hash table to
optimize, this is really what they mean.

18
00:01:04.540 --> 00:01:09.270
In JavaScript,
an object is essentially a hash table.

19
00:01:09.270 --> 00:01:12.870
And in our future course we'll
talk in depth about hash tables,

20
00:01:12.870 --> 00:01:16.130
we'll make our own hash tables and
all of that.

21
00:01:16.130 --> 00:01:19.958
But for what you really need to know
in the real world, when they say,

22
00:01:19.958 --> 00:01:24.512
optimize it by adding like using a hash
table, this is that technique where we're

23
00:01:24.512 --> 00:01:27.765
adding things to a cache,
which is really just an object.

24
00:01:27.765 --> 00:01:31.941
And there are different ways of going
about it, but it's all the same concept,

25
00:01:31.941 --> 00:01:34.496
which is how do we take
an expensive operation and

26
00:01:34.496 --> 00:01:37.630
turn it into constant time or
at least linear time?

27
00:01:37.630 --> 00:01:38.910
And that is by using a hash table.

