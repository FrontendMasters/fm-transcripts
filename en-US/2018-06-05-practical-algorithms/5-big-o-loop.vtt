WEBVTT

1
00:00:00.006 --> 00:00:04.672
&gt;&gt; Bianca: Here's another chart that,
[COUGH] excuse me,

2
00:00:04.672 --> 00:00:09.572
here's another chart on Big-O complexity,
and

3
00:00:09.572 --> 00:00:13.890
you can see that we have
our constant time and

4
00:00:13.890 --> 00:00:18.300
our login times are very, very good.

5
00:00:18.300 --> 00:00:23.550
Then we have our linear, which grows at a
much slower pace as well, also very good.

6
00:00:23.550 --> 00:00:27.880
And then as we increase to quadratic and

7
00:00:27.880 --> 00:00:31.320
exponential time, those are terrible,
terrible, terrible algorithms.

8
00:00:33.270 --> 00:00:35.970
Another good resource, if you wanna

9
00:00:36.990 --> 00:00:41.440
learn more about this is called a Big-O
cheat sheet, where I stole this image.

10
00:00:41.440 --> 00:00:45.080
And they have the time complexity and
there's the average and

11
00:00:45.080 --> 00:00:48.610
worst cases for
a bunch of different things.

12
00:00:48.610 --> 00:00:52.570
And you can even get a poster, so
it's kinda cool, really good resource.

13
00:00:54.465 --> 00:00:55.700
&gt;&gt; Bianca: All right.

14
00:00:55.700 --> 00:00:59.570
So let's do an exercise together,

15
00:00:59.570 --> 00:01:05.050
we're going to reason about the time
complexity of a few different functions.

16
00:01:05.050 --> 00:01:08.440
So this function is called
the count character function.

17
00:01:08.440 --> 00:01:11.500
We loop through the length of a string and
then we increment to counter.

18
00:01:13.590 --> 00:01:18.400
So when our length of the string,
which is n, right?

19
00:01:18.400 --> 00:01:21.957
So our n here, the thing that's gonna
change is the length of the string.

20
00:01:21.957 --> 00:01:26.686
And we know that because it affects

21
00:01:26.686 --> 00:01:32.860
the number of loops for our loop here.

22
00:01:32.860 --> 00:01:37.558
And then when we do an increment, that
is gonna be a constant time operation.

23
00:01:40.211 --> 00:01:41.240
&gt;&gt; Bianca: So what do we think?

24
00:01:42.540 --> 00:01:45.670
So we have this constant every time.

25
00:01:45.670 --> 00:01:50.191
So if string is length five,
&gt;&gt; Bianca: How many

26
00:01:50.191 --> 00:01:52.038
operations does this do?

27
00:01:53.230 --> 00:01:54.400
&gt;&gt; Speaker 2: Just one.

28
00:01:54.400 --> 00:01:55.320
&gt;&gt; Bianca: Just one, yeah.

29
00:01:56.330 --> 00:02:00.205
How many operations does this line do?

30
00:02:00.205 --> 00:02:00.807
&gt;&gt; Speaker 2: One.
&gt;&gt; Speaker 3: One.

31
00:02:00.807 --> 00:02:01.894
&gt;&gt; Bianca: Five.
&gt;&gt; Speaker 3: Five,

32
00:02:01.894 --> 00:02:04.390
the four loops through the number.

33
00:02:04.390 --> 00:02:06.640
&gt;&gt; Bianca: Yep so
this will be called five times.

34
00:02:06.640 --> 00:02:09.417
And now what about this one?

35
00:02:09.417 --> 00:02:11.410
&gt;&gt; Speaker 2: One.
&gt;&gt; Bianca: Just once, yeah.

36
00:02:11.410 --> 00:02:13.640
And so
we can say these are both constant time.

37
00:02:15.390 --> 00:02:18.340
Because it's gonna be one,
because when we, so let's see,

38
00:02:18.340 --> 00:02:23.310
let's make this really long
walking really fast or something.

39
00:02:25.650 --> 00:02:28.620
How many operations for this one?

40
00:02:30.200 --> 00:02:31.762
&gt;&gt; Speaker 2: Still one.
&gt;&gt; Speaker 3: Still one,

41
00:02:31.762 --> 00:02:35.232
how many operations for this one.

42
00:02:35.232 --> 00:02:37.140
&gt;&gt; Speaker 4: 14.

43
00:02:37.140 --> 00:02:40.100
&gt;&gt; Bianca: Yeah,
however long this is, right?

44
00:02:40.100 --> 00:02:41.300
&gt;&gt; Speaker 2: Right.

45
00:02:41.300 --> 00:02:41.958
&gt;&gt; Bianca: And then this one?

46
00:02:41.958 --> 00:02:42.474
&gt;&gt; Speaker 2: One.

47
00:02:42.474 --> 00:02:42.994
&gt;&gt; Speaker 3: One.

48
00:02:42.994 --> 00:02:43.494
&gt;&gt; Bianca: One.

49
00:02:45.434 --> 00:02:49.300
&gt;&gt; Bianca: So what kind of time complexity
do you think this algorithm has?

50
00:02:49.300 --> 00:02:49.930
&gt;&gt; Speaker 3: Linear.
&gt;&gt; Bianca: Linear.

51
00:02:49.930 --> 00:02:50.758
Linear, right?

52
00:02:50.758 --> 00:02:53.949
The big give-away is
that we have this loop.

53
00:02:55.290 --> 00:02:59.430
And we're doing a constant time operation
in the loop, so we just drop those,

54
00:02:59.430 --> 00:03:03.090
it's not that important, we stick to
the linear, that's the most significant.

55
00:03:03.090 --> 00:03:08.510
That's the slowest part of this, so
we don't really think about the constant.

56
00:03:08.510 --> 00:03:11.120
&gt;&gt; Speaker 3: Question, so
it sounds like then when you assess it

57
00:03:11.120 --> 00:03:14.860
during the analysis,
you evaluate every expression?

58
00:03:14.860 --> 00:03:16.850
Whatever's the longest,
what's the worst case, and

59
00:03:16.850 --> 00:03:18.890
that really becomes your-
&gt;&gt; Bianca: Yeah.

60
00:03:18.890 --> 00:03:19.790
&gt;&gt; Speaker 3: Time complexity.

61
00:03:19.790 --> 00:03:21.690
&gt;&gt; Bianca: Absolutely, yeah, exactly.

62
00:03:21.690 --> 00:03:23.340
&gt;&gt; Speaker 3: So
it's not holistically, you assess it?

63
00:03:23.340 --> 00:03:24.830
You really break it down into each

64
00:03:24.830 --> 00:03:25.810
expression,
&gt;&gt; Bianca: Mm-hm.

65
00:03:25.810 --> 00:03:26.878
&gt;&gt; Speaker 3: And then pick the worst one?

66
00:03:26.878 --> 00:03:29.438
&gt;&gt; Bianca: Mm-hm, yep, yep, exactly.

67
00:03:29.438 --> 00:03:33.780
And then you'll learn to kinda disregard
certain things, like initializing values,

68
00:03:33.780 --> 00:03:36.730
and returning values you learned,
just to, those don't really matter.

69
00:03:36.730 --> 00:03:39.660
And then you can kinda see
where to focus your attention

70
00:03:39.660 --> 00:03:41.220
when you're estimating time complexity.

