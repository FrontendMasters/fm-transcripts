WEBVTT

1
00:00:00.150 --> 00:00:03.690
&gt;&gt; Bianca Gandolfo: So sorting,
we talked about a couple different

2
00:00:03.690 --> 00:00:07.240
searching algorithms,
linear search, binary search.

3
00:00:07.240 --> 00:00:10.100
Now we're gonna talk about another
hot topic in the algorithms world,

4
00:00:10.100 --> 00:00:11.790
which is sorting.

5
00:00:11.790 --> 00:00:16.236
Searching and sorting are pretty
time-intensive operations, and they're

6
00:00:16.236 --> 00:00:20.760
also core to a lot of the processing that
we do in the day to day on the web, right?

7
00:00:20.760 --> 00:00:25.673
We have Google search and we want to
sort our photos by time stamp and

8
00:00:25.673 --> 00:00:27.090
things like that.

9
00:00:27.090 --> 00:00:29.899
And you can imagine that when we're
dealing with these kinds of problems,

10
00:00:29.899 --> 00:00:32.500
the data sets that we're working
with can be really, really large.

11
00:00:32.500 --> 00:00:38.790
And so there's been a lot of studies
done on improving sorting and searching.

12
00:00:38.790 --> 00:00:44.480
And we'll be doing a lot of work with that
when we get to the data structures part,

13
00:00:44.480 --> 00:00:50.360
cuz a lot of our searching is combined
with a particular data structure and

14
00:00:50.360 --> 00:00:53.644
how you get to your solution.

15
00:00:53.644 --> 00:00:55.180
So for binary search, right,

16
00:00:55.180 --> 00:00:57.940
we have a binary search tree
that goes nicely with it.

17
00:00:57.940 --> 00:01:03.480
And so we'll keep building on these
topics in mastering them together.

18
00:01:03.480 --> 00:01:08.510
So for sorting, there are two main types
of sorting that we're gonna talk about.

19
00:01:08.510 --> 00:01:15.410
We have naive sorts, naive sorts
are going to be quadratic time, right?

20
00:01:15.410 --> 00:01:18.260
We're going to compare everything
to everything at some point.

21
00:01:18.260 --> 00:01:22.620
And you're gonna imagine that these
are gonna have two loops involved.

22
00:01:24.240 --> 00:01:28.704
Then we have our divide and conquer sorts,
we're gonna talk about merge sort today,

23
00:01:28.704 --> 00:01:32.550
we're not gonna get to quick sort,
but these are gonna be n log n.

24
00:01:32.550 --> 00:01:37.990
So the reason that sorting is always going
to have some, and for comparison sorts,

25
00:01:37.990 --> 00:01:42.010
there are non-comparison sorts out
there that we won't talk about but

26
00:01:42.010 --> 00:01:44.340
you can research,
those are pretty interesting.

27
00:01:44.340 --> 00:01:48.830
You always are gonna have to compare
one item to another at some point.

28
00:01:48.830 --> 00:01:53.528
So it's never gonna be less,
because we have to look at everything,

29
00:01:53.528 --> 00:01:58.150
you can't ever be less than linear,
right, same with searching.

30
00:01:58.150 --> 00:02:03.971
Actually no, that's not true, same with,
&gt;&gt; Bianca Gandolfo: Actually

31
00:02:03.971 --> 00:02:06.380
none of that's true.

32
00:02:06.380 --> 00:02:09.680
So for sorting,
you have to look at everything.

33
00:02:12.100 --> 00:02:15.970
And so it can never be in your head,
right,

34
00:02:15.970 --> 00:02:17.930
you have to uncover each thing to sort it.

35
00:02:17.930 --> 00:02:21.400
So it could never be less than that, but
really, the best you can do is n log n.

36
00:02:21.400 --> 00:02:25.939
And that's what these divide and conquer
algorithms, where we have to look at

37
00:02:25.939 --> 00:02:30.920
everything, but we don't have to compare
everything to everything else to sort it.

38
00:02:30.920 --> 00:02:34.390
Where these naive sorts,
that's the basis of them.

39
00:02:34.390 --> 00:02:36.820
So we have bubble sort.

40
00:02:36.820 --> 00:02:44.154
Bubble sort compares adjacent indices and

41
00:02:44.154 --> 00:02:50.704
kind of bubbles up the larger number.

42
00:02:50.704 --> 00:02:54.560
And so, you can see here,
we can start with this unsorted.

43
00:02:54.560 --> 00:02:58.390
We compare 5 to 1, okay,
5 is bigger, we swap it.

44
00:02:58.390 --> 00:03:01.090
And then we do the next one,
5 to 4, we swap it.

45
00:03:01.090 --> 00:03:07.554
And then you keep going, and keep
swapping and swapping until you can see,

46
00:03:07.554 --> 00:03:12.374
compare 1 to 4, no swap,
and you can compare 4 to 2,

47
00:03:12.374 --> 00:03:17.820
swap, etc.,
until we finally reach our solution.

48
00:03:17.820 --> 00:03:20.400
So this is a common naive sort.

49
00:03:20.400 --> 00:03:26.398
A couple other ones are insertion sort,
which you

50
00:03:26.398 --> 00:03:33.790
basically take another empty array,
and then you choose.

51
00:03:33.790 --> 00:03:36.320
Or no, this is selection sort,
where you choose the biggest one.

52
00:03:36.320 --> 00:03:38.237
Or you actually,
you could choose the smallest one and

53
00:03:38.237 --> 00:03:39.410
then you push it into that array.

54
00:03:39.410 --> 00:03:41.110
And then you choose the next smallest one,
you push it to that array.

55
00:03:41.110 --> 00:03:46.521
And then it builds a new array with

56
00:03:46.521 --> 00:03:51.750
the sorted values, thank you.

57
00:03:51.750 --> 00:03:56.860
Conversely, mergesort and quicksort are
a little harder to reason about because

58
00:03:56.860 --> 00:04:01.650
we are going to be recursively
handling the sort.

59
00:04:01.650 --> 00:04:06.540
So the merge, with the merge sort,
we take sorted lists.

60
00:04:06.540 --> 00:04:14.004
So we have to start with a sorted list,
and then we sort two sorted lists.

61
00:04:14.004 --> 00:04:17.080
Let me show you the chart.

62
00:04:17.080 --> 00:04:21.060
So the first thing you do,
you're gonna divide, divide and conquer.

63
00:04:21.060 --> 00:04:22.190
So let's do the divide steps.

64
00:04:22.190 --> 00:04:24.020
We start with an unsorted list.

65
00:04:24.020 --> 00:04:26.370
You divide it, divide it, and
divide it until it's sorted.

66
00:04:26.370 --> 00:04:28.916
When is it sorted,
when it's a list of one.

67
00:04:28.916 --> 00:04:33.490
So you can assume that any list of one is
gonna be sorted until you start there.

68
00:04:33.490 --> 00:04:41.360
Then, you're going to
merge each sorted list.

69
00:04:41.360 --> 00:04:43.870
So you're going to choose each one.

70
00:04:43.870 --> 00:04:47.210
So this one is now sorted, right,
you put 27 first and then 38.

71
00:04:47.210 --> 00:04:53.180
And then so on and so forth,
until you get your sorted list.

72
00:04:53.180 --> 00:04:56.141
And so what this does is,

73
00:04:56.141 --> 00:05:00.935
you don't have to compare 27 to 10,

74
00:05:00.935 --> 00:05:05.600
for example, until you get down here.

75
00:05:05.600 --> 00:05:12.630
And so you're not having to
check in a quadratic way.

76
00:05:12.630 --> 00:05:19.170
I wish I had a diagram of how
many columns it would be for

77
00:05:19.170 --> 00:05:23.090
bubble sort to get to
where you need to go.

78
00:05:23.090 --> 00:05:28.490
But you can see that we're chopping
the problem in half each time.

79
00:05:28.490 --> 00:05:31.170
That's gonna be your logarithmic part.

80
00:05:31.170 --> 00:05:36.280
However, we still need to do this final
loop here, which is gonna be the linear.

81
00:05:36.280 --> 00:05:41.447
So you can kind of see how it's
cut in half, that's the log part.

82
00:05:41.447 --> 00:05:46.727
And then the final merge, you can kind
of think of it as the linear part,

83
00:05:46.727 --> 00:05:50.200
and that's the n log n of mergesort,
mm-hm.

84
00:05:50.200 --> 00:05:57.530
&gt;&gt; Speaker 2: So why do we step through
the second and third steps of this tree?

85
00:05:57.530 --> 00:06:03.750
Why don't we go straight from the top to
add into one value of these and then keep?

86
00:06:03.750 --> 00:06:09.220
&gt;&gt; Bianca Gandolfo: Mm, because
the nature of recursion, that's why.

87
00:06:09.220 --> 00:06:09.938
Cuz I can.

88
00:06:09.938 --> 00:06:14.960
So, you could,

89
00:06:18.150 --> 00:06:19.590
&gt;&gt; Bianca Gandolfo: Could you do that?

90
00:06:19.590 --> 00:06:21.860
I don't know,
I've never seen a solution like that.

91
00:06:21.860 --> 00:06:26.970
That would be interesting, but
essentially you divide it.

92
00:06:26.970 --> 00:06:28.960
So you're saying start
with the divided part?

93
00:06:30.350 --> 00:06:36.250
So the thing about, I'll

94
00:06:36.250 --> 00:06:39.820
show you when we get to the pseudo code,

95
00:06:39.820 --> 00:06:45.360
because I'll show you where it pauses and
then it continues.

96
00:06:45.360 --> 00:06:49.334
And then, you'll see how this
kinda plays out in the code.

97
00:06:49.334 --> 00:06:53.244
But I can't imagine it playing
out where it's already divided.

98
00:06:53.244 --> 00:06:56.544
Although that would seem like
an optimization if you could.

99
00:06:56.544 --> 00:06:57.044
So that's a cool idea.

