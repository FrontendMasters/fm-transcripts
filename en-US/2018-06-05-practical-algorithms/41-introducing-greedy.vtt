WEBVTT

1
00:00:03.980 --> 00:00:06.740
&gt;&gt; Bianca: We're moving on,
guys, divide and conquer.

2
00:00:06.740 --> 00:00:09.251
Recursive, break it up into sub-problems.

3
00:00:12.460 --> 00:00:15.471
&gt;&gt; Bianca: Greedy algorithms.

4
00:00:18.581 --> 00:00:20.777
&gt;&gt; Bianca: Greedy algorithms,
where do I wanna start with this?

5
00:00:20.777 --> 00:00:23.595
So a greedy algorithm
is just like it sounds,

6
00:00:23.595 --> 00:00:29.660
it takes the short-sighted,
&gt;&gt; Bianca: Solution.

7
00:00:29.660 --> 00:00:34.262
Given a decision, it's going to do the one
that looks like the best decision at that

8
00:00:34.262 --> 00:00:36.852
time, without considering the big picture.

9
00:00:36.852 --> 00:00:39.165
So you can think like a toddler.

10
00:00:39.165 --> 00:00:43.020
If you say, hey, give you one Oreo now or
two Oreos later,

11
00:00:43.020 --> 00:00:48.160
they're probably gonna take the one
Oreo now kind of situation.

12
00:00:48.160 --> 00:00:51.030
Let's see, usually people teach
greedy algorithms like this, but

13
00:00:51.030 --> 00:00:53.060
we're not gonna talk about it like that.

14
00:00:53.060 --> 00:00:58.055
We're only gonna talk about how greedy
algorithms always make the locally

15
00:00:58.055 --> 00:00:59.253
optimal choice.

16
00:00:59.253 --> 00:01:03.671
And actually,
this is kinda the inspiration for

17
00:01:03.671 --> 00:01:09.288
this whole series, and
this is a MIT computer science class.

18
00:01:09.288 --> 00:01:13.215
And this is one of the classes I took
just online, the open courseware,

19
00:01:13.215 --> 00:01:17.190
to learn data structures and
algorithms earlier in my career.

20
00:01:17.190 --> 00:01:23.984
And it's very, very academic, and so
this is kind of a response to that.

21
00:01:23.984 --> 00:01:29.194
It's a less academic version, we're
just talking about the practical stuff,

22
00:01:29.194 --> 00:01:33.959
we're making estimations, insofar
as it matters to you, here and now.

23
00:01:33.959 --> 00:01:37.137
Maybe one day you'll become a PhD student,
and

24
00:01:37.137 --> 00:01:42.236
you'll be writing white papers and
algorithms, and that's really cool.

25
00:01:42.236 --> 00:01:46.338
But this is a good place to start and
build up your base knowledge before you

26
00:01:46.338 --> 00:01:50.460
take a course like this, where you
have a bunch of mathematical symbols.

27
00:01:50.460 --> 00:01:57.100
For something that's, at its core, very
simple, which is, given a choice, they're

28
00:01:57.100 --> 00:02:01.640
always gonna make the locally optimal
one without considering the big picture.

29
00:02:01.640 --> 00:02:06.532
So if we have a map like this, and say we
are trying to get from city a to city g,

30
00:02:06.532 --> 00:02:10.214
and these roads between them
have different distances.

31
00:02:10.214 --> 00:02:15.116
So we have, between a and c,
we have a road of three miles, and a and

32
00:02:15.116 --> 00:02:16.968
b, a road of five miles.

33
00:02:16.968 --> 00:02:19.176
Those of you who have taken
a data structures class before,

34
00:02:19.176 --> 00:02:20.113
this may look familiar.

35
00:02:20.113 --> 00:02:24.730
This is a weighted graph, but let's just
talk about it in terms of it being a map.

36
00:02:24.730 --> 00:02:29.819
If we were doing a greedy algorithm,
starting at a, we would say, what is

37
00:02:29.819 --> 00:02:35.416
the locally optimal solution, assuming
that we want it to be the shortest path?

38
00:02:35.416 --> 00:02:37.664
We're gonna say three,
right, so then we're here.

39
00:02:37.664 --> 00:02:42.014
And we're gonna keep making these
decisions based on the locally optimal

40
00:02:42.014 --> 00:02:46.930
solution, which is gonna be four and then
two and then three and then four again.

41
00:02:46.930 --> 00:02:51.513
And so we come up with this path which,
at the end of the day,

42
00:02:51.513 --> 00:02:55.669
is gonna be 16 miles or
16 units, whatever it is.

43
00:02:55.669 --> 00:02:59.084
It's a solution, but
is it the best solution?

44
00:02:59.084 --> 00:03:04.822
No, we can see with our eyes that
this one's a better solution,

45
00:03:04.822 --> 00:03:07.390
12 miles instead of 16.

46
00:03:07.390 --> 00:03:10.852
However, so
this is one thing that I'm like, hm,

47
00:03:10.852 --> 00:03:15.210
greedy algorithms kind of suck,
and this is one of the reasons.

48
00:03:15.210 --> 00:03:19.098
However, there is a time and
a place for greedy algorithms, and

49
00:03:19.098 --> 00:03:22.626
that's when your data set is so
big that you can't think of

50
00:03:22.626 --> 00:03:27.690
all the different scenarios because
it's just computationally too much.

51
00:03:27.690 --> 00:03:30.920
And so it's better to have
a solution than no solution at all.

52
00:03:30.920 --> 00:03:34.150
And so
that's when a greedy algorithm is good.

53
00:03:34.150 --> 00:03:38.869
And we'll talk a lot about
greedy algorithms when we get to

54
00:03:38.869 --> 00:03:43.218
graph theory on part four
of this four-part series.

55
00:03:45.248 --> 00:03:50.690
&gt;&gt; Bianca: So we'll get more into that,
but let's jump into a greedy prompt.

