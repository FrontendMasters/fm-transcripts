WEBVTT

1
00:00:00.070 --> 00:00:02.070
&gt;&gt; Bianca Gandolfo: So we're just
gonna hop into the solution here.

2
00:00:02.070 --> 00:00:07.420
We're gonna call our factorial
with the value five.

3
00:00:07.420 --> 00:00:12.030
However, if we check out what
factorial is, factorial is wrapped,

4
00:00:12.030 --> 00:00:17.150
it's actually being called
with another function.

5
00:00:17.150 --> 00:00:19.070
So first, we're passing this function.

6
00:00:21.080 --> 00:00:23.400
Right, which is just a typical factorial.

7
00:00:23.400 --> 00:00:24.890
We're doing our work here.

8
00:00:24.890 --> 00:00:26.180
Here's our base case.

9
00:00:28.879 --> 00:00:31.040
&gt;&gt; Bianca Gandolfo: But
we're passing it to this function memoize.

10
00:00:31.040 --> 00:00:32.960
So let's check out what's
happening in memoize.

11
00:00:32.960 --> 00:00:35.230
So memoize expects a function.

12
00:00:35.230 --> 00:00:35.810
And it's caching.

13
00:00:35.810 --> 00:00:39.240
This looks familiar, right,
from our previous examples?

14
00:00:39.240 --> 00:00:47.810
So we're going to return,
we're going to return this function.

15
00:00:48.870 --> 00:00:53.410
And we just,
we're just gonna call our factorial there.

16
00:00:53.410 --> 00:00:57.980
So when we calculate the factorial
of five, what happens is,

17
00:00:57.980 --> 00:01:01.430
we're gonna jump in to this function here.

18
00:01:02.480 --> 00:01:05.980
So this is gonna be five, and it's five.

19
00:01:07.200 --> 00:01:09.090
So we're gonna check if it's in the cache.

20
00:01:09.090 --> 00:01:12.250
it's not in the cache yet,
otherwise, we're gonna calculate it.

21
00:01:12.250 --> 00:01:16.481
So we're gonna do Fibonacci of five,
I'm sorry, factorial of five, and

22
00:01:16.481 --> 00:01:18.577
then we're gonna [LAUGH] cache that.

23
00:01:19.580 --> 00:01:21.768
And we're gonna return that results.

24
00:01:21.768 --> 00:01:27.190
All right, great, so
let's check this one out.

25
00:01:27.190 --> 00:01:32.410
So we're gonna do factorial,
actually, sorry,

26
00:01:32.410 --> 00:01:37.050
we did not in there,
I'm skipping many steps,

27
00:01:37.050 --> 00:01:41.458
which is we are gonna call this call back,
and

28
00:01:41.458 --> 00:01:45.518
then we are going to do some work here,
and

29
00:01:45.518 --> 00:01:52.943
we're gonna recursively call our
factorial, and do our recursive steps.

30
00:01:55.675 --> 00:01:57.841
&gt;&gt; Bianca Gandolfo: Cool, and
this actually isn't doing this,

31
00:01:57.841 --> 00:01:58.725
I just realized.

32
00:01:58.725 --> 00:02:01.440
It is doing something
a little bit different.

33
00:02:01.440 --> 00:02:07.010
But, if we reference this,
it's going to be cached,

34
00:02:07.010 --> 00:02:12.030
just like in our other example, and we're
not needing to calculate it everytime.

35
00:02:12.030 --> 00:02:15.982
The other thing that we can do,
is we can cache this line, so

36
00:02:15.982 --> 00:02:20.640
that we have a check and
to see if this has already been

37
00:02:20.640 --> 00:02:24.890
calculated and cached, but
this isn't what the solution is doing.

38
00:02:24.890 --> 00:02:29.488
But that's another way of memoizing this.

