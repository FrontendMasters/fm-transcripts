WEBVTT

1
00:00:02.260 --> 00:00:05.719
&gt;&gt; Bianca Gandolfo: So dynamic
programming is a optimization technique.

2
00:00:05.719 --> 00:00:11.725
We talked a little bit about optimization
earlier in this workshop and

3
00:00:11.725 --> 00:00:15.715
we did a couple different
caching exercises.

4
00:00:15.715 --> 00:00:19.940
So cue that up in your brain because
this is gonna build on top of that, and

5
00:00:19.940 --> 00:00:24.010
it's also gonna build on top of our
previous example of make change,

6
00:00:24.010 --> 00:00:27.130
with all of those recursive
calls in a brute force solution.

7
00:00:27.130 --> 00:00:34.357
So you may remember that,
&gt;&gt; Bianca Gandolfo: We're

8
00:00:34.357 --> 00:00:39.930
doing a lot of calculations, repeated
calculations, right, for our make change.

9
00:00:41.480 --> 00:00:46.148
I painted this, by the way,
cuz I'm a nerd.

10
00:00:46.148 --> 00:00:51.730
We have a lot of repeated calculations.

11
00:00:51.730 --> 00:00:56.942
And so what dynamic programming
says is if you can break

12
00:00:56.942 --> 00:01:02.495
it into the subproblems and
the subproblems are optimal,

13
00:01:02.495 --> 00:01:08.161
meaning that they are going to
give you the correct answer,

14
00:01:08.161 --> 00:01:10.910
you can cache these values.

15
00:01:10.910 --> 00:01:14.770
Just like we did with the factorial,
with the memoize for the factorial,

16
00:01:14.770 --> 00:01:19.860
that's secretly a dynamic
programming solution.

17
00:01:19.860 --> 00:01:23.145
And so the reason it's
called dynamic programming,

18
00:01:23.145 --> 00:01:27.306
which is not really reflective of
what it is, is kinda similar to why

19
00:01:27.306 --> 00:01:31.476
JavaScript is called JavaScript and
it's nothing to do with Java.

20
00:01:31.476 --> 00:01:36.034
It's kinda like a marketing thing, and
these really smart people take advantage

21
00:01:36.034 --> 00:01:40.590
of the fact that their management
doesn't really understand what they do.

22
00:01:40.590 --> 00:01:42.326
And so dynamic programming,

23
00:01:42.326 --> 00:01:46.910
they chose the name dynamic programming
because it was making some government

24
00:01:46.910 --> 00:01:51.230
grant maker more likely to give them
funding to continue their research.

25
00:01:51.230 --> 00:01:52.770
And then JavaScript,

26
00:01:52.770 --> 00:01:58.208
the reason that we call it JavaScript is
because it kind of, Java was really in.

27
00:01:58.208 --> 00:02:02.704
And we wanted to make it seem like,
JavaScript's kinda like Java,

28
00:02:02.704 --> 00:02:04.160
we're cool too.

29
00:02:04.160 --> 00:02:08.498
So there's kind of,
&gt;&gt; Bianca Gandolfo: I don't know,

30
00:02:08.498 --> 00:02:13.876
I just think of it as deceptive
marketing to either convert people

31
00:02:13.876 --> 00:02:19.743
to supporting a programming language or
get someone to give you money so

32
00:02:19.743 --> 00:02:25.346
you can keep researching this
mathematical concept as you please.

33
00:02:25.346 --> 00:02:28.310
And here we have the name
Dynamic Programming.

34
00:02:28.310 --> 00:02:30.670
You could think of it as just caching.

35
00:02:31.750 --> 00:02:36.466
If you have a solution that you can cache,
that's dynamic programming.

36
00:02:36.466 --> 00:02:41.490
So there is a couple of ways that
you can cache your solutions.

37
00:02:41.490 --> 00:02:47.530
So we have a top-down recursive approach,
which is what we've been doing a lot of,

38
00:02:47.530 --> 00:02:54.410
where we start from, say 12, right,
which sort of our end result.

39
00:02:54.410 --> 00:02:57.380
And then we break it up
into smaller pieces and

40
00:02:57.380 --> 00:03:02.003
we cache if we recalculate something,
right?

41
00:03:02.003 --> 00:03:06.297
And so
that's a top-down recursive technique.

42
00:03:06.297 --> 00:03:12.051
And then there's also
a bottom-up iterative technique,

43
00:03:12.051 --> 00:03:18.610
where you can translate the recursion
into an iterative solution,

44
00:03:18.610 --> 00:03:25.302
starting from the simplest problem,
which would be make change 0.

45
00:03:25.302 --> 00:03:28.550
So start with make change zero,
you calculate that.

46
00:03:28.550 --> 00:03:29.900
Make change one, you calculate that.

47
00:03:29.900 --> 00:03:30.930
You cache it.

48
00:03:30.930 --> 00:03:37.080
So if it comes up again,
you then just have it on hand.

49
00:03:37.080 --> 00:03:39.710
So one starts from the top and

50
00:03:39.710 --> 00:03:44.140
goes down, the other one starts from the
bottom and goes up, and it's iterative.

51
00:03:45.140 --> 00:03:48.375
And so that's really the key
to dynamic programming,

52
00:03:48.375 --> 00:03:50.710
it's just this memoization step.

53
00:03:50.710 --> 00:03:54.640
So all the stuff that you
did in the memoization and

54
00:03:54.640 --> 00:03:59.210
caching part of this workshop is
all related to dynamic programming.

55
00:03:59.210 --> 00:04:04.410
And it's kind of intimidating, and
I don't think the thing that's

56
00:04:04.410 --> 00:04:08.250
intimidating about dynamic programming
is necessarily the memoization step.

57
00:04:08.250 --> 00:04:10.663
I think that the hard part about
the dynamic programming is actually

58
00:04:10.663 --> 00:04:15.260
the recurgent involved in reasoning
about these subproblems, and

59
00:04:15.260 --> 00:04:20.670
being able to trace our minds through how
our code executes to solve these problems.

60
00:04:20.670 --> 00:04:25.600
And so the way to get through that
really is through practicing recursion,

61
00:04:25.600 --> 00:04:29.500
and better improving your mental
model of how your code executes,

62
00:04:29.500 --> 00:04:34.600
doing things like the call stack
game on your own, or talking, rubber

63
00:04:34.600 --> 00:04:38.810
ducking we call it, where you just talk
out loud about what your code is doing.

64
00:04:38.810 --> 00:04:43.690
Again, I think an anti-pattern in
learning is to type something, hit play,

65
00:04:43.690 --> 00:04:44.310
see what happens.

66
00:04:44.310 --> 00:04:45.980
We can do that really easy in JavaScript,
right,

67
00:04:45.980 --> 00:04:48.860
we just refresh and
we hit Enter in that console.

68
00:04:48.860 --> 00:04:52.590
Versus like in compiling, which you
kinda have to wait a little longer and

69
00:04:52.590 --> 00:04:55.307
maybe you're less tempted
to make these shortcuts.

70
00:04:55.307 --> 00:05:00.158
But really being able to reason
through what you're writing versus

71
00:05:00.158 --> 00:05:05.177
just having your execution environment
tell you if you have an error or

72
00:05:05.177 --> 00:05:08.170
if your solution isn't what you expect.

73
00:05:09.240 --> 00:05:12.142
So pro tip.

74
00:05:12.142 --> 00:05:14.900
What else do I wanna tell you
about dynamic programming?

75
00:05:14.900 --> 00:05:16.822
Question?
&gt;&gt; Speaker 2: Do interviewers,

76
00:05:16.822 --> 00:05:21.731
when you are in an environment where
you're on a computer doing the interview,

77
00:05:21.731 --> 00:05:26.786
do interviewers kind of watch for how many
times you try to just run the code instead

78
00:05:26.786 --> 00:05:29.353
of understanding what can [CROSSTALK]?
&gt;&gt; Bianca Gandolfo: You

79
00:05:29.353 --> 00:05:30.600
can't run the code actually.

80
00:05:30.600 --> 00:05:35.110
So in a typical interview environment,
you aren't running the code, you're either

81
00:05:35.110 --> 00:05:38.860
writing it on a whiteboard or you're
doing it in something like a Google Doc.

82
00:05:38.860 --> 00:05:40.460
You might even do it in text editor, but

83
00:05:40.460 --> 00:05:43.260
not typically in an environment
where you can run it.

84
00:05:43.260 --> 00:05:45.430
So it's not that they're not looking for

85
00:05:45.430 --> 00:05:47.900
it, it's like you don't really
even have that available to you.

86
00:05:47.900 --> 00:05:52.580
And so you need to learn how to
debug your code in your head.

87
00:05:52.580 --> 00:05:55.968
And so how you do that is
you just choose some inputs,

88
00:05:55.968 --> 00:06:00.514
make sure your inputs aren't too
simple because sometimes the simple

89
00:06:00.514 --> 00:06:04.153
inputs can hide edge cases,
so a pretty complex input.

90
00:06:04.153 --> 00:06:07.651
And run that, just like we're
doing that call stack game, but

91
00:06:07.651 --> 00:06:11.550
maybe you don't have to do the call
stack part if it's not recursion.

92
00:06:11.550 --> 00:06:16.760
So that's one way to go
about manually debugging,

93
00:06:16.760 --> 00:06:20.770
and I think that's the best practice.

94
00:06:20.770 --> 00:06:23.220
Even though at first it may
seem like a waste of time,

95
00:06:23.220 --> 00:06:27.760
it may seem like it's taking longer to
go through these problems, in the end,

96
00:06:27.760 --> 00:06:28.960
you'll be better for it.

97
00:06:30.510 --> 00:06:34.560
Yeah, cool, okay, good questions.

98
00:06:34.560 --> 00:06:41.551
Any other questions?
&gt;&gt; Bianca Gandolfo: All right,

99
00:06:41.551 --> 00:06:44.704
so the difference between dynamic
programming and a divide and

100
00:06:44.704 --> 00:06:49.260
conquer technique is that the dynamic
programming has overlapping subproblems.

101
00:06:49.260 --> 00:06:53.380
So when we're doing make change, for

102
00:06:53.380 --> 00:06:57.770
example, there are many times that we're
calculating, like make change of five,

103
00:06:57.770 --> 00:06:59.420
that's always gonna be the same answer.

104
00:06:59.420 --> 00:07:04.527
Versus our merge sort example,
where that merge step isn't overlapping,

105
00:07:04.527 --> 00:07:09.890
each step has to be done individually and
it's gonna change every time.

106
00:07:09.890 --> 00:07:13.670
And so that's what I think about when I
think about the difference between dynamic

107
00:07:13.670 --> 00:07:15.440
programming, and divide and conquer.

108
00:07:15.440 --> 00:07:19.079
They're still recursive approaches, but

109
00:07:19.079 --> 00:07:24.290
one of them has some repeated
calculation that you can cache and

110
00:07:24.290 --> 00:07:30.895
access, while one of them you can't,
you have to just go through it each time.

111
00:07:30.895 --> 00:07:35.243
Dynamic programming problems are also
really common with really big,

112
00:07:35.243 --> 00:07:39.910
like Google is really famous for
asking dynamic programming problems.

113
00:07:39.910 --> 00:07:43.260
So if you are studying to go,
you wanna work at a big company or

114
00:07:43.260 --> 00:07:49.100
something like that, I would focus mostly
on dynamic programming, especially cuz

115
00:07:49.100 --> 00:07:54.880
it can be tough to do it within a certain
timeframe while you're under pressure.

116
00:07:54.880 --> 00:07:56.052
So I would definitely practice these.

