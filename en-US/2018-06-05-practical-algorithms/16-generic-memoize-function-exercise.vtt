WEBVTT

1
00:00:00.080 --> 00:00:04.320
&gt;&gt; Bianca: Well, I'm going to now
talk about our third prompts.

2
00:00:04.320 --> 00:00:07.432
So we're gonna take the solution from this
then we're gonna build on it a little bit

3
00:00:07.432 --> 00:00:11.185
more.
&gt;&gt; Bianca: So

4
00:00:11.185 --> 00:00:13.940
we're gonna make our memo
function more generic.

5
00:00:15.230 --> 00:00:17.950
And let's take a look.

6
00:00:19.460 --> 00:00:24.630
So previously, we were either referencing

7
00:00:24.630 --> 00:00:29.520
the function outside of the scope,
the times10 function outside of the scope.

8
00:00:29.520 --> 00:00:34.050
We were calling times10 n inside
the body of our function.

9
00:00:34.050 --> 00:00:35.762
And a second example,

10
00:00:35.762 --> 00:00:41.451
we just did the work directly inside
of the function, we said 10 times n.

11
00:00:41.451 --> 00:00:47.295
In this case, we want to enable
this function to take any function

12
00:00:47.295 --> 00:00:54.220
as a callback, and that is going to be
the function that calculates a result.

13
00:00:55.320 --> 00:01:01.530
So whatever this callback calculates
with some value and/or could

14
00:01:01.530 --> 00:01:06.730
be multiple depending on how you wanna do
it but we can stick with one parameter.

15
00:01:06.730 --> 00:01:09.070
It's a little bit simpler
to get started with.

16
00:01:09.070 --> 00:01:11.630
But you can also make it marginal and
it can pass many arguments.

17
00:01:13.390 --> 00:01:20.680
So essentially, we need to use a closure.

18
00:01:20.680 --> 00:01:22.480
Again, we're gonna return a function.

19
00:01:22.480 --> 00:01:25.410
And in that step where we're
calculating the result,

20
00:01:25.410 --> 00:01:28.450
that's where we're gonna
call our callback,

21
00:01:28.450 --> 00:01:32.510
which is just a generic function that's
gonna do some calculation for us.

22
00:01:32.510 --> 00:01:36.530
In our case,
our callback is just gonna be the times10.

23
00:01:36.530 --> 00:01:39.145
But you could imagine that
it could be really anything.

24
00:01:42.003 --> 00:01:43.630
&gt;&gt; Bianca: Any questions?

25
00:01:43.630 --> 00:01:50.892
I feel like there's questions.
&gt;&gt; Bianca: Okay,

26
00:01:50.892 --> 00:01:53.030
so let's take a look
at the other solution.

27
00:01:53.030 --> 00:02:02.648
And we can talk about.
&gt;&gt; Bianca: So

28
00:02:02.648 --> 00:02:08.456
our solution, here, so
our very first solution,

29
00:02:08.456 --> 00:02:14.420
we are referencing
the times10 function in here.

30
00:02:14.420 --> 00:02:17.980
But it's looking up in the parent
scope and it's grabbing it.

31
00:02:17.980 --> 00:02:19.230
So it's like grabbing out, right?

32
00:02:19.230 --> 00:02:22.860
We don't like to do that too much,
similarly with the cache.

33
00:02:22.860 --> 00:02:25.170
Outside of those scope we're
reaching out of our function.

34
00:02:25.170 --> 00:02:27.450
We wanna tidy it up a little bit.

35
00:02:27.450 --> 00:02:28.090
So what do we do?

36
00:02:28.090 --> 00:02:31.810
We're gonna move our cache
inside of our function.

37
00:02:31.810 --> 00:02:33.520
So we did that last time.

38
00:02:33.520 --> 00:02:34.710
We did something a little bit different.

39
00:02:34.710 --> 00:02:37.760
We could still, for
the sake of consistency,

40
00:02:37.760 --> 00:02:40.790
we could still reference this outside.

41
00:02:41.890 --> 00:02:46.780
So the next step is how do
we make this generic, so

42
00:02:46.780 --> 00:02:52.204
that instead of always doing
times10 we could do times11, right?

43
00:02:54.430 --> 00:02:58.730
Being passed in as an argument,
&gt;&gt; Bianca: Up here.

44
00:02:58.730 --> 00:03:03.830
So you pass something here, and I call
it CB for call back, call back is just

45
00:03:03.830 --> 00:03:07.340
a function that is passed into a function
then called inside of that function.

46
00:03:08.780 --> 00:03:14.970
And so we need to figure out how to
make this little more generic using

47
00:03:14.970 --> 00:03:20.190
callback versus using our times10
function that lives outside.

