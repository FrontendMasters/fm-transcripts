WEBVTT

1
00:00:00.863 --> 00:00:01.636
&gt;&gt; Speaker 1: So what is n in this case?

2
00:00:09.409 --> 00:00:13.060
&gt;&gt; Speaker 1: What is the, so n in
this case is the length of the string.

3
00:00:15.470 --> 00:00:21.131
Then the time complexity is
going to be as the string

4
00:00:21.131 --> 00:00:26.538
gets longer,
how much more work do we need to do?

5
00:00:28.571 --> 00:00:32.490
&gt;&gt; Speaker 1: So
when the string is length five,

6
00:00:32.490 --> 00:00:37.769
how much work does this
expression have to do?

7
00:00:40.788 --> 00:00:42.680
&gt;&gt; Speaker 2: But didn't you say
return is always gonna be constant?

8
00:00:42.680 --> 00:00:44.779
&gt;&gt; Speaker 1: Well,
the return but what about this?

9
00:00:49.419 --> 00:00:50.960
&gt;&gt; Laney: Well how does it get the length?

10
00:00:50.960 --> 00:00:52.240
&gt;&gt; Speaker 1: Yeah, exactly, Laney.

11
00:00:52.240 --> 00:00:53.950
That's the exact point.

12
00:00:53.950 --> 00:00:55.260
How does it get the length?

13
00:00:55.260 --> 00:00:58.570
We need to understand the length property.

14
00:00:58.570 --> 00:01:05.180
So if the length property looped through
the length of a string and counted from 0

15
00:01:05.180 --> 00:01:10.350
to n, that would be a linear operation.

16
00:01:10.350 --> 00:01:14.120
Luckily, JavaScript's a little bit smarter
than that, and if we just keep track of

17
00:01:14.120 --> 00:01:19.510
the length as we add items to our array,
or we remove items we increment and

18
00:01:19.510 --> 00:01:25.590
decrement our length, and so the length
is just a property lookup, right?

19
00:01:25.590 --> 00:01:28.040
So we have the dot notation,
this is just string.

20
00:01:28.040 --> 00:01:31.922
Everything's an object in JavaScript and
that's why we can do a property lookup and

21
00:01:31.922 --> 00:01:33.464
that's gonna be constant time.

22
00:01:38.431 --> 00:01:44.870
&gt;&gt; Speaker 1: And as a result this will
always be a constant time algorithm.

23
00:01:49.860 --> 00:01:54.734
&gt;&gt; Speaker 1: Which means if our string
length was 1 million it wouldn't be any

24
00:01:54.734 --> 00:01:56.980
slower than if it was just 1.

25
00:01:56.980 --> 00:01:58.080
&gt;&gt; Speaker 2: Cuz it already knows that.

26
00:01:58.080 --> 00:02:00.160
&gt;&gt; Speaker 1: Yeah,
exactly, it doesn't matter.

