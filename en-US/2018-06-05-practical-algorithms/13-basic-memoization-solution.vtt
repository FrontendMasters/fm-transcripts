WEBVTT

1
00:00:00.040 --> 00:00:01.740
&gt;&gt; Bianca: We had two tasks.

2
00:00:01.740 --> 00:00:05.900
We were writing a function that takes n,
multiplies n times 10.

3
00:00:06.900 --> 00:00:11.080
Here is our solution for that, n times 10.

4
00:00:12.880 --> 00:00:17.780
Our second one was building on that first
one where we're going to use an object

5
00:00:17.780 --> 00:00:22.456
to cache the results of
our times 10 function.

6
00:00:23.530 --> 00:00:24.980
So how do we do that?

7
00:00:24.980 --> 00:00:28.540
So we check if n is in cache.

8
00:00:28.540 --> 00:00:32.560
If it is, I have a handy console.log
just for reference here.

9
00:00:32.560 --> 00:00:34.100
We're gonna just return that value.

10
00:00:35.110 --> 00:00:37.700
If not, we're going to say

11
00:00:37.700 --> 00:00:42.218
that we're calculating the results.
&gt;&gt; Bianca: And

12
00:00:42.218 --> 00:00:45.700
we're gonna calculate it here, right?

13
00:00:45.700 --> 00:00:46.590
This is our calculation.

14
00:00:46.590 --> 00:00:49.070
We're calling our function
here versus here,

15
00:00:49.070 --> 00:00:51.150
we're just looking it up in our cache.

16
00:00:51.150 --> 00:00:53.520
If it's not already in our cache
we're gonna call that function, and

17
00:00:53.520 --> 00:00:58.110
we're going to save the results
of that into our cache.

18
00:00:58.110 --> 00:00:59.130
And this is important.

19
00:00:59.130 --> 00:01:01.820
We're also gonna return that result so

20
00:01:01.820 --> 00:01:06.795
that when we're interacting with this,
it's actually returning 90

21
00:01:06.795 --> 00:01:11.295
every time because that's actually
what we're interested in.

22
00:01:11.295 --> 00:01:14.582
When we're calling this method and
we're consuming the method,

23
00:01:14.582 --> 00:01:15.880
we want to get the result.

24
00:01:15.880 --> 00:01:18.230
So don't forget to return that result.

25
00:01:18.230 --> 00:01:21.718
So,
&gt;&gt; Bianca: The first time we call it with

26
00:01:21.718 --> 00:01:23.200
9, it's gonna be calculated.

27
00:01:23.200 --> 00:01:28.450
The second time it's gonna
hit this condition and

28
00:01:28.450 --> 00:01:32.890
it's just gonna do a property
lookup in our cache.

29
00:01:34.900 --> 00:01:36.740
Any questions about this solution?
&gt;&gt; Speaker 2: So

30
00:01:36.740 --> 00:01:40.100
there's something that's still not
quite clicking with this whole.

31
00:01:40.100 --> 00:01:42.880
So I understand the caches and
the object, right?

32
00:01:42.880 --> 00:01:45.130
So when we did the first function,

33
00:01:45.130 --> 00:01:47.050
it's something in the background
that's happening,

34
00:01:47.050 --> 00:01:50.320
hey, I've calculated this, right?
&gt;&gt; Bianca: Mm-hm.

35
00:01:50.320 --> 00:01:51.220
&gt;&gt; Speaker 2: And it's saved somewhere

36
00:01:51.220 --> 00:01:53.340
like in this abstract object.
&gt;&gt; Bianca: Well,

37
00:01:53.340 --> 00:01:55.130
it's happening right here.
&gt;&gt; Speaker 2: Because how do we, I guess,

38
00:01:55.130 --> 00:01:56.480
tie the two together?

39
00:01:56.480 --> 00:02:00.950
When we say on line 15, if n is in cache,
how does that function even knows about

40
00:02:00.950 --> 00:02:05.420
cache, because it's just
a variable before it?

41
00:02:05.420 --> 00:02:07.370
I know it's kind of a bridge, but

42
00:02:07.370 --> 00:02:11.250
I don't know how the two intersect.
&gt;&gt; Bianca: Got it.

43
00:02:11.250 --> 00:02:17.270
So in this example, we're using this
global cache that lives in a parent scope,

44
00:02:17.270 --> 00:02:21.830
and functions can reach up into
the parent scope, mutate data.

45
00:02:21.830 --> 00:02:25.240
It's not a best practice,
but it's possible and

46
00:02:25.240 --> 00:02:28.640
we're gonna make it better
in the next exercise.

47
00:02:28.640 --> 00:02:32.659
So I think the thing that's a little
bit confusing to people is,

48
00:02:32.659 --> 00:02:37.733
instead of starting at the first if
condition, let's start at the else, okay?

49
00:02:37.733 --> 00:02:41.710
So we're gonna call memo times 10 with 9.

50
00:02:41.710 --> 00:02:42.720
So memo times 10.

51
00:02:42.720 --> 00:02:45.589
Whenever we call a function, we're gonna
hop into that body of the function.

52
00:02:45.589 --> 00:02:47.430
n is nine.

53
00:02:47.430 --> 00:02:49.000
And n is not in cache, right?

54
00:02:49.000 --> 00:02:50.600
Cache is empty at this point.

55
00:02:50.600 --> 00:02:52.010
It's initialized as empty.

56
00:02:53.220 --> 00:02:54.540
So we run into this else.

57
00:02:55.920 --> 00:02:59.789
The first thing that we're gonna do is
we're gonna calculate times 10 of n

58
00:02:59.789 --> 00:03:00.586
which is 90.

59
00:03:00.586 --> 00:03:03.320
We're gonna save that n to results.

60
00:03:03.320 --> 00:03:04.850
And here's where the magic happens.

61
00:03:04.850 --> 00:03:08.916
We're saving cache of n so
cache of 9 equals 90, right?

62
00:03:08.916 --> 00:03:13.366
Before we were saving our values
to true because we were just

63
00:03:13.366 --> 00:03:15.890
checking if we had seen it.

64
00:03:15.890 --> 00:03:18.990
In this case, we are saving
the results of that calculation.

65
00:03:20.420 --> 00:03:25.620
So we're doing the calculation,
n times 10 is 90, so our result is 90.

66
00:03:25.620 --> 00:03:27.850
And we're saving that n to cache of n.

67
00:03:27.850 --> 00:03:28.610
What is n again?

68
00:03:30.150 --> 00:03:30.650
9.

69
00:03:32.610 --> 00:03:34.370
So and then we're returning
the result which is 90,

70
00:03:34.370 --> 00:03:40.580
the thing that we're actually interested
in as a consumer of this function.

71
00:03:40.580 --> 00:03:41.950
Okay, so that's the first time.

72
00:03:41.950 --> 00:03:43.970
Let's go to the second time and
then I'll take your question.

73
00:03:43.970 --> 00:03:47.000
I think this might answer your question.

74
00:03:47.000 --> 00:03:50.830
The second time n is 9,
and then we're gonna say,

75
00:03:50.830 --> 00:03:54.749
if n is in cache, n isn't,
so n is 9, is in cache and

76
00:03:54.749 --> 00:03:58.000
what is the value that is saved?
&gt;&gt; Speaker 2: 90.

77
00:03:58.000 --> 00:04:00.320
&gt;&gt; Bianca: 90, so

78
00:04:00.320 --> 00:04:05.710
in this cache we have something
that looks like 9, 90.

79
00:04:05.710 --> 00:04:12.570
So when we look up 9, it exists, great.

80
00:04:12.570 --> 00:04:15.380
And then we just return a cache of n,
which is 9.

81
00:04:15.380 --> 00:04:20.068
And it's gonna return
the value associated with 9,

82
00:04:20.068 --> 00:04:24.210
which is 90.
&gt;&gt; Bianca: Questions?

83
00:04:24.210 --> 00:04:26.058
&gt;&gt; Speaker 2: Why are we declaring cache

84
00:04:26.058 --> 00:04:29.960
as outside of the scope of
memo times ten function?

85
00:04:29.960 --> 00:04:33.630
&gt;&gt; Bianca: Because the second time that we

86
00:04:33.630 --> 00:04:40.580
call it,
we just need to retain access to it.

87
00:04:40.580 --> 00:04:44.260
If we initialized it here in
the way that this is written,

88
00:04:44.260 --> 00:04:49.980
every time we recall memo wise, it's
gonna read calculate the cache as empty.

89
00:04:49.980 --> 00:04:55.428
So we need to save it somewhere where
it's not gonna get really overwritten

90
00:04:55.428 --> 00:05:01.610
because we're gonna initialize it as
empty, and then we're gonna write to it.

91
00:05:01.610 --> 00:05:05.930
And the next time we call it,
we execute the body of the function.

92
00:05:05.930 --> 00:05:07.480
We're gonna execute
the body of the function,

93
00:05:07.480 --> 00:05:09.630
I'm just gonna rewrite
that cache to be empty.

94
00:05:09.630 --> 00:05:13.080
But that's a really good question,
all right.

95
00:05:13.080 --> 00:05:14.975
&gt;&gt; Speaker 3: Whenever pushing to

96
00:05:14.975 --> 00:05:19.879
the cache,
is that what cache with n equals result,

97
00:05:19.879 --> 00:05:24.006
is that what it's essentially doing?
&gt;&gt; Bianca: Yeah, yeah,

98
00:05:24.006 --> 00:05:25.900
that's exactly what it's doing.

99
00:05:25.900 --> 00:05:30.166
So it's saying okay, cache,
create a property called 9, and

100
00:05:30.166 --> 00:05:31.922
save the value 90.
&gt;&gt; Speaker 3: Okay.

101
00:05:31.922 --> 00:05:33.519
&gt;&gt; Bianca: Mm-hm.

102
00:05:35.915 --> 00:05:38.147
&gt;&gt; Bianca: And the reason that we're using

103
00:05:38.147 --> 00:05:43.460
the bracket notation instead of cache.in,
because in is a variable name.

104
00:05:43.460 --> 00:05:46.940
And so when you were gonna save a property
to an object, that's a variable name,

105
00:05:46.940 --> 00:05:48.229
you need to put it inside the brackets.

106
00:05:50.040 --> 00:05:56.770
And it's going to evaluate what is n,
and the environment is gonna say n is 9.

107
00:05:56.770 --> 00:05:59.150
Just like,
we're gonna evaluate what is the result?

108
00:05:59.150 --> 00:06:04.700
The environment's gonna say
the result is 90 in this case.

