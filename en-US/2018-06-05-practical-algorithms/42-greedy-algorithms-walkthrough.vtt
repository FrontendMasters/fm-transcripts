WEBVTT

1
00:00:00.450 --> 00:00:03.533
&gt;&gt; Bianca Gandolfo: Let's just say
that you're a banker in Monopoly.

2
00:00:03.533 --> 00:00:08.022
Your family, they just lose all their
game pieces so you need to make sure,

3
00:00:08.022 --> 00:00:10.535
so they only have 3 bills, first of all.

4
00:00:10.535 --> 00:00:14.771
You have a $5 bill, a $10 bill and
a $25 bill for some reason.

5
00:00:14.771 --> 00:00:19.012
And whenever you pay out your family,
you wanna make sure that you're using

6
00:00:19.012 --> 00:00:23.395
the least number of bills because once
you run out of bills, Monopoly is over.

7
00:00:23.395 --> 00:00:28.293
Okay, so how might you write
an algorithm to solve this problem?

8
00:00:28.293 --> 00:00:32.433
This is one version of the make
change problem which is the same

9
00:00:32.433 --> 00:00:36.108
thing except you'll see
different versions of this.

10
00:00:36.108 --> 00:00:40.615
So it'll be Monopoly money or
it'll be coins or it'll be weight,

11
00:00:40.615 --> 00:00:45.609
something like that, where you need
to minimize or maximize something.

12
00:00:45.609 --> 00:00:51.622
And in this case, we wanna minimize the
number of coins that add up to our amount.

13
00:00:51.622 --> 00:00:55.216
So in this case,
it's always gonna be divisible by

14
00:00:55.216 --> 00:00:59.949
5.
&gt;&gt; Bianca Gandolfo: Because otherwise it

15
00:00:59.949 --> 00:01:01.369
wouldn't work, okay?

16
00:01:01.369 --> 00:01:07.426
So if our input is 40, and
we would want a output of 3, right?

17
00:01:07.426 --> 00:01:11.915
So it would be 25, 10, and 5.

18
00:01:11.915 --> 00:01:16.288
And if our input is 35,
it would 2, 25 and 10.

19
00:01:16.288 --> 00:01:22.211
So your task right now is to
write a function, make change,

20
00:01:22.211 --> 00:01:28.177
such that we get the correct,
&gt;&gt; Bianca Gandolfo: Result.

21
00:01:32.259 --> 00:01:33.393
&gt;&gt; Bianca Gandolfo: All right,

22
00:01:35.240 --> 00:01:36.686
&gt;&gt; Bianca Gandolfo: Good luck.

23
00:01:39.198 --> 00:01:41.937
&gt;&gt; Bianca Gandolfo: So the greedy solution

24
00:01:41.937 --> 00:01:46.983
to something like the make change problem

25
00:01:46.983 --> 00:01:55.069
is to simply choose the largest coin
that you can at any given time.

26
00:01:55.069 --> 00:01:58.680
So if you're starting with 40,
you're gonna pick the largest one, 25.

27
00:01:58.680 --> 00:02:02.728
So you're gonna subtract 40 minus 25,
what do you have left?

28
00:02:02.728 --> 00:02:07.272
15, so then you're gonna do that again,
subtract 10, subtract 5.

29
00:02:07.272 --> 00:02:09.377
So this is the greedy algorithm.

30
00:02:09.377 --> 00:02:10.950
And it seems reasonable right?

31
00:02:10.950 --> 00:02:17.705
It works in this scenario for 40,
it's gonna give us the right answer.

32
00:02:17.705 --> 00:02:23.972
And here is how you might do that.

33
00:02:23.972 --> 00:02:26.173
You can sort the coins
first if you'd like.

34
00:02:26.173 --> 00:02:28.541
And then you're just
gonna do this while loop.

35
00:02:28.541 --> 00:02:32.910
While you have a certain amount,
you're gonna decrement

36
00:02:32.910 --> 00:02:37.377
the largest coin you possibly can and
keep going with that.

37
00:02:37.377 --> 00:02:38.792
It seems pretty straightforward.

