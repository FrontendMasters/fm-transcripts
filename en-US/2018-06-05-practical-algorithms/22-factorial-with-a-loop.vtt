WEBVTT

1
00:00:00.428 --> 00:00:02.520
&gt;&gt; Bianca: Factorial,
we talked a little bit about factorial.

2
00:00:02.520 --> 00:00:05.265
And I was like, it does some work,
don't worry about it.

3
00:00:05.265 --> 00:00:08.674
Now we're gonna worry about
the work that it's doing each time.

4
00:00:08.674 --> 00:00:12.500
So a factorial is always gonna
take the previous result and

5
00:00:12.500 --> 00:00:14.510
times it by the next one up.

6
00:00:15.930 --> 00:00:17.880
So what does that look like?

7
00:00:17.880 --> 00:00:21.900
So a result equals 1 times 2, 2 times 3.

8
00:00:21.900 --> 00:00:29.640
I'm sorry, it's the multiplication
of the result times the next thing.

9
00:00:29.640 --> 00:00:32.020
So this would be,
it's gonna take the last one.

10
00:00:32.020 --> 00:00:33.570
Let me just zoom in for you.

11
00:00:33.570 --> 00:00:37.160
So the very first
calculation is 1 times 2.

12
00:00:37.160 --> 00:00:42.340
The next one is the previous calculation
times the next value, which is 3.

13
00:00:42.340 --> 00:00:46.656
Take the previous calculation,
which is 6 times 4, so 2, 3, 4, 5.

14
00:00:46.656 --> 00:00:51.280
And then the first number's
always gonna be the previous one.

15
00:00:51.280 --> 00:00:58.750
So it's gonna be just like how it prints.

16
00:01:00.540 --> 00:01:01.420
So this is with a loop.

17
00:01:01.420 --> 00:01:04.900
This is the iterative
solution of a factorial.

18
00:01:04.900 --> 00:01:07.510
And then, we also have it recursively.

19
00:01:07.510 --> 00:01:08.940
And so

20
00:01:08.940 --> 00:01:13.270
something to keep in mind is identifying
these patterns, what is the pattern?

21
00:01:13.270 --> 00:01:16.330
How is this problem
breaking down over time?

22
00:01:16.330 --> 00:01:22.310
And you may notice that, essentially,
it's the current number,

23
00:01:22.310 --> 00:01:26.220
plus the computed factorial
of that number minus one,

24
00:01:28.440 --> 00:01:36.276
right?
&gt;&gt; Bianca: Let's

25
00:01:36.276 --> 00:01:38.004
take a look at how this runs.

26
00:01:38.004 --> 00:01:41.810
So returning 5 times the factorial of 4,
etc., etc.,

27
00:01:41.810 --> 00:01:45.223
etc.
&gt;&gt; Bianca: And

28
00:01:45.223 --> 00:01:49.870
this is a classic recursive example.

29
00:01:49.870 --> 00:01:51.320
And also,

30
00:01:51.320 --> 00:01:55.060
the example that I like to point out is
actually easier to just do with a loop.

31
00:01:56.250 --> 00:01:57.290
That's my perspective.

32
00:01:57.290 --> 00:01:57.900
I think it's easier.

33
00:02:00.280 --> 00:02:07.080
Okay, I'm gonna keep going
with these looping things.

34
00:02:07.080 --> 00:02:14.660
All right, so here's one, okay.

35
00:02:14.660 --> 00:02:18.070
Here's a couple of different
ways that we can do it.

36
00:02:18.070 --> 00:02:21.130
So we have just our loop, right?

37
00:02:21.130 --> 00:02:22.690
Here's a function.

38
00:02:22.690 --> 00:02:25.200
It takes a starting point and
an ending point.

39
00:02:25.200 --> 00:02:26.080
And we're just gonna make a loop.

40
00:02:26.080 --> 00:02:31.690
And we're just gonna log the numbers
between some start and end point.

41
00:02:31.690 --> 00:02:35.230
So we start at whatever the starting
point is, in this case, it's one.

42
00:02:35.230 --> 00:02:40.300
And then we only live once really
until we get to two, which is the end.

43
00:02:40.300 --> 00:02:43.340
And we're gonna console.log each time.

44
00:02:43.340 --> 00:02:48.320
Pretty simple, that's our loop,
and here it is using recursion.

45
00:02:48.320 --> 00:02:53.080
So notice that we have a function in here,
okay?

46
00:02:53.080 --> 00:02:57.410
So we're gonna console.log,
star in the end.

47
00:02:57.410 --> 00:02:59.990
We're defining this function,
but we're not calling it yet.

48
00:02:59.990 --> 00:03:03.920
Let's play the call stack game, why not?

49
00:03:03.920 --> 00:03:05.300
Let's just do it.

50
00:03:05.300 --> 00:03:06.390
It's gonna be fun.

51
00:03:06.390 --> 00:03:10.290
Okay, play the call stack game.

52
00:03:15.462 --> 00:03:19.530
&gt;&gt; Bianca: Okay, so what is this?

53
00:03:19.530 --> 00:03:25.632
Okay, I see.
&gt;&gt; Bianca: Okay,

54
00:03:25.632 --> 00:03:26.710
we're gonna call that function.

55
00:03:37.100 --> 00:03:41.860
&gt;&gt; Bianca: If we could focus.

56
00:03:41.860 --> 00:03:43.720
So we're gonna call this function.

57
00:03:43.720 --> 00:03:46.112
Our start and end is going,

58
00:03:46.112 --> 00:03:51.950
I'm gonna remove our console logs
just to give us some space here.

59
00:03:53.100 --> 00:03:57.030
So the start and end is gonna be 1 and 3.

60
00:03:57.030 --> 00:03:58.940
So we're gonna recurse on i.

61
00:03:58.940 --> 00:04:03.690
However, this function hasn't been called
yet, so we're not even gonna go there.

62
00:04:05.030 --> 00:04:06.070
We're getting ahead of ourselves.

63
00:04:06.070 --> 00:04:08.800
We have to wait until we call it.

64
00:04:10.560 --> 00:04:14.640
We're calling this function,
not this function, okay?

65
00:04:14.640 --> 00:04:19.170
So we're gonna take that function and
we're gonna put it on the call stack.

66
00:04:19.170 --> 00:04:26.494
We're calling it with our start,
which has the value 1, okay?

67
00:04:26.494 --> 00:04:28.790
So i is now 1.

68
00:04:28.790 --> 00:04:34.940
If i &lt; end,
remember we can reach up into our parent.

69
00:04:34.940 --> 00:04:37.170
We keep track of n, which is 3.

70
00:04:37.170 --> 00:04:41.550
Which is is i &lt; end?
&gt;&gt; Speaker 2: Yes.

71
00:04:41.550 --> 00:04:42.700
&gt;&gt; Bianca: Yeah, uh-oh,

72
00:04:42.700 --> 00:04:44.429
it's happening again.

73
00:04:45.785 --> 00:04:48.690
Let's start keeping track of where
we're leaving off before we get lost.

74
00:04:50.590 --> 00:04:52.454
So then we need to call
that function again.

75
00:04:52.454 --> 00:04:57.390
i is i + 1, which is 2.

76
00:04:57.390 --> 00:04:58.590
We can do that kinda math.

77
00:05:00.530 --> 00:05:04.140
Okay, so i is 2, and
we're reaching back up, what is it?

78
00:05:04.140 --> 00:05:06.780
3, is it less?

79
00:05:06.780 --> 00:05:10.100
Yes, we're gonna do it even more.

80
00:05:11.700 --> 00:05:15.580
Okay, and then now we're hitting 3.

81
00:05:15.580 --> 00:05:17.550
Is 3 less than 3?

82
00:05:17.550 --> 00:05:21.600
No, so we don't enter into this.

83
00:05:21.600 --> 00:05:23.700
We have that implicit return.

84
00:05:23.700 --> 00:05:27.889
It's gonna return undefined.
&gt;&gt; Bianca: So

85
00:05:27.889 --> 00:05:30.853
this is returning undefined, right?

86
00:05:30.853 --> 00:05:31.660
So we win here.

87
00:05:31.660 --> 00:05:35.490
This is returning undefined.

88
00:05:35.490 --> 00:05:39.080
Then, we continue executing this
function from where we left off.

89
00:05:39.080 --> 00:05:42.806
There's nothing else going on, except that
this also implicitly returns undefined.

90
00:05:42.806 --> 00:05:44.519
Cool, we pop that off.

91
00:05:46.100 --> 00:05:49.540
Same here, implicitly returns undefined,
we're gonna pop it off.

92
00:05:52.070 --> 00:05:56.650
And same, implicitly returns undefined,
we pop this off.

93
00:05:59.450 --> 00:06:03.185
And meanwhile, we would be
console logging hitting index at

94
00:06:03.185 --> 00:06:06.757
i.
&gt;&gt; Bianca: So

95
00:06:06.757 --> 00:06:11.190
recursive looping, pop this guy off.

