WEBVTT

1
00:00:00.278 --> 00:00:02.216
&gt;&gt; Bianca Gandolfo: This
is an accumulator,

2
00:00:05.084 --> 00:00:07.500
&gt;&gt; Bianca Gandolfo: The accumulator

3
00:00:07.500 --> 00:00:09.400
technique.

4
00:00:09.400 --> 00:00:15.128
And what we do is, as we build a solution,

5
00:00:15.128 --> 00:00:17.927
we keep passing it.

6
00:00:17.927 --> 00:00:23.983
So for example, let's do,
what do you think I'm about to do?

7
00:00:23.983 --> 00:00:30.084
Can anyone guess what's gonna happen next?

8
00:00:30.084 --> 00:00:33.792
I'm gonna play the closure,
or the closure game,

9
00:00:33.792 --> 00:00:37.167
I calling it weird things,
the call set game.

10
00:00:37.167 --> 00:00:45.019
So, my gosh, this is a lot of
stuff going on, but let's call it.

11
00:00:45.019 --> 00:00:50.694
We're gonna call joinElements,
let's put it at the top.

12
00:00:50.694 --> 00:00:56.050
So our array looks like this, and

13
00:00:56.050 --> 00:01:02.560
then our join string is this letter e.

14
00:01:02.560 --> 00:01:04.180
So what this function is doing is,

15
00:01:04.180 --> 00:01:09.540
it's going to join this
array with the string here.

16
00:01:09.540 --> 00:01:15.414
So this array is going to be joined, so
array.join is a native array method.

17
00:01:15.414 --> 00:01:17.302
So you can join a list with a comma, for

18
00:01:17.302 --> 00:01:19.906
example, that's a common use case for
the .join.

19
00:01:19.906 --> 00:01:22.773
So if you have a series of whatever,

20
00:01:22.773 --> 00:01:27.276
fruit would be a common thing,
you can do array.join.

21
00:01:27.276 --> 00:01:32.949
And then it'll say apples,
bananas, oranges, like that.

22
00:01:32.949 --> 00:01:37.197
However, it's a thing that's nice,
but it's a bit annoying,

23
00:01:37.197 --> 00:01:40.377
because in English we wanna put the and
in there.

24
00:01:40.377 --> 00:01:42.384
So you say apples, bananas, and oranges.

25
00:01:42.384 --> 00:01:45.264
And so
you may wanna write your own pretty join,

26
00:01:45.264 --> 00:01:49.080
where it keeps track of when
you're the second to last one, and

27
00:01:49.080 --> 00:01:53.621
will add an and in there as appropriate,
with or without the Oxford comma.

28
00:01:53.621 --> 00:01:57.634
The programmer's choice, I guess it's
probably the product person's choice or

29
00:01:57.634 --> 00:01:59.708
whoever's in charge of that, who knows.

30
00:01:59.708 --> 00:02:03.921
So we're doing that,
except we're doing it recursively, and

31
00:02:03.921 --> 00:02:07.993
we're using a technique called
the accumulator technique.

32
00:02:07.993 --> 00:02:11.674
And let's take a peek at how that works.

33
00:02:11.674 --> 00:02:18.765
So we have our two arguments that are
passed in, we're defining this function.

34
00:02:18.765 --> 00:02:22.093
So we're not pushing this function on
to the call stack because we have not

35
00:02:22.093 --> 00:02:22.797
called it yet.

36
00:02:22.797 --> 00:02:25.314
However, we're gonna call it, down here,

37
00:02:25.314 --> 00:02:28.210
we're initializing it
with a couple values.

38
00:02:28.210 --> 00:02:36.371
So we're gonna call this recurse function.
&gt;&gt; Bianca Gandolfo: We're gonna push that,

39
00:02:36.371 --> 00:02:42.900
so our index is gonna be 0, and
then the resultSoFar is an empty string.

40
00:02:44.160 --> 00:02:48.636
So the first thing we wanna
do is add the resultSoFar,

41
00:02:48.636 --> 00:02:54.580
which is empty string, we wanna give
it the very first value, which is s.

42
00:02:54.580 --> 00:03:00.490
So we're calling,
we're looking up into the parent scope,

43
00:03:00.490 --> 00:03:04.135
getting array.index, index is 0.

44
00:03:04.135 --> 00:03:09.762
So we're looking at s, everyone
following where we're getting s from?

45
00:03:09.762 --> 00:03:13.652
So now resultSoFar is s,

46
00:03:13.652 --> 00:03:18.105
cuz empty string plus s is s.

47
00:03:18.105 --> 00:03:23.404
Math, just kidding, it's not math.
&gt;&gt; Bianca Gandolfo: So

48
00:03:23.404 --> 00:03:29.332
if the index is at the end of the array,
this is our base case,

49
00:03:29.332 --> 00:03:33.652
did we get to the end, we're gonna return.

50
00:03:33.652 --> 00:03:40.632
So we're not there yet., index is 0, so
we're going to go into our recursive case.

51
00:03:40.632 --> 00:03:46.259
So we're going to return index + 1, key,
we need to get closer to our base case.

52
00:03:46.259 --> 00:03:49.360
Which is when we have gone through
the entire array, we're looping.

53
00:03:49.360 --> 00:03:54.416
We're just looping through this array,
and at every index,

54
00:03:54.416 --> 00:04:00.734
we're giving it a string.
&gt;&gt; Bianca Gandolfo: Cool,

55
00:04:00.734 --> 00:04:06.047
so now we're going to, so this index,

56
00:04:06.047 --> 00:04:09.755
so we're gonna call this.

57
00:04:09.755 --> 00:04:14.366
Let's just push it, so we're gonna be

58
00:04:14.366 --> 00:04:19.780
calling it with index 0 + 1, which is 1.

59
00:04:19.780 --> 00:04:26.160
The resultSoFar, which is our s, and
then our join string, remember, is the e.

60
00:04:26.160 --> 00:04:31.864
Again, you're reaching up, and
getting it from our parent scope.

61
00:04:31.864 --> 00:04:39.019
Okay, this is where we left off,
&gt;&gt; Bianca Gandolfo: This is where

62
00:04:39.019 --> 00:04:45.754
we left off before, wait, no it's not, I'm
lying to you, this is where we left off.

63
00:04:45.754 --> 00:04:51.146
Okay, so now we're hopping in,
we have these things to worry about,

64
00:04:51.146 --> 00:04:53.897
sorry, we're concatenating this.

65
00:04:53.897 --> 00:05:01.401
So actually, what we're passing is se, you
see where the accumulation is happening?

66
00:05:01.401 --> 00:05:05.698
We're accumulating by
adding things together, and

67
00:05:05.698 --> 00:05:10.378
then we're passing it down
into our recursion each time.

68
00:05:10.378 --> 00:05:15.019
So now our index is gonna be 1,

69
00:05:15.019 --> 00:05:18.594
our resultSoFar is se.

70
00:05:18.594 --> 00:05:23.933
Okay, so what is index at i,
we're gonna have that one,

71
00:05:23.933 --> 00:05:29.058
so.
&gt;&gt; Bianca Gandolfo: And this is a +=,

72
00:05:29.058 --> 00:05:34.120
right, so we're going to be
building this string out.

73
00:05:34.120 --> 00:05:39.867
So we started with resultSoFar,
which we passed in.

74
00:05:39.867 --> 00:05:43.863
And the next item in the array,

75
00:05:43.863 --> 00:05:48.951
which is cr, so now we get secr, cool?

76
00:05:48.951 --> 00:05:53.811
Is index at the end of the array,
and this -1, you guys are aware,

77
00:05:53.811 --> 00:05:58.775
is cuz arrays are zero-indexed,
that's why we have to do the -1.

78
00:05:58.775 --> 00:05:59.787
It is not, so

79
00:05:59.787 --> 00:06:05.870
we're gonna go into this other case
where we're going to call our recursion.

80
00:06:05.870 --> 00:06:10.737
What are the variables that we're
calling with, index + 1 is gonna be 2,

81
00:06:10.737 --> 00:06:12.878
and resultSoFar + joinString.

82
00:06:12.878 --> 00:06:16.755
So here's our resultSoFar,
and we're gonna reach up and

83
00:06:16.755 --> 00:06:19.950
get our joinString, which was e.

84
00:06:19.950 --> 00:06:26.416
And then pop this on again, oops,
that's not we're popping on.

85
00:06:26.416 --> 00:06:29.633
We're not even popping,
sorry, we're pushing,

86
00:06:29.633 --> 00:06:31.908
we're pushing this onto the stack.

87
00:06:31.908 --> 00:06:38.864
Cuz our index in this case is 2, then we
have the string that's being constructed.

88
00:06:38.864 --> 00:06:43.924
So again,
we're going to take our resultSoFar,

89
00:06:43.924 --> 00:06:49.705
which is this, and
then we're going to add the next one,

90
00:06:49.705 --> 00:06:54.055
uh-oh, a word is appearing, which is t.

91
00:06:54.055 --> 00:06:57.354
Are we at the end of our array,
index is 2,

92
00:06:57.354 --> 00:07:02.380
array.length- 1 is 1, 2, 3, 4, there's 4.

93
00:07:02.380 --> 00:07:07.112
There, actually, it's 1, 2, 3, 4, yeah,

94
00:07:07.112 --> 00:07:10.030
it's 4, so we're not there.

95
00:07:10.030 --> 00:07:15.600
And we're gonna keep going, and
as we loop through this array,

96
00:07:15.600 --> 00:07:18.760
we are going to be
concatenating our string.

97
00:07:18.760 --> 00:07:23.410
And this is the accumulator method that,
each time, after each loop,

98
00:07:23.410 --> 00:07:28.830
not only are we incrementing our index,
but we're saving some result.

99
00:07:28.830 --> 00:07:32.210
And that result is getting
passed down into our recursion.

100
00:07:33.990 --> 00:07:39.148
So this is some work that's getting done,

101
00:07:39.148 --> 00:07:43.877
where we are doing some operation, and

102
00:07:43.877 --> 00:07:49.322
we're also getting
closer to our base case,

103
00:07:49.322 --> 00:07:53.270
cool, mm-hm?
&gt;&gt; Student: The string at index 3,

104
00:07:53.270 --> 00:07:57.831
is that t space cod, rather than just t?
&gt;&gt; Bianca Gandolfo: Yeah, thank you.

105
00:08:06.039 --> 00:08:07.448
&gt;&gt; Bianca Gandolfo: What could it say,

106
00:08:07.448 --> 00:08:10.274
I don't know, it's so mysterious.

107
00:08:10.274 --> 00:08:14.368
Any questions about this,
I'm not gonna keep going with it,

108
00:08:14.368 --> 00:08:17.524
cuz you guys, I think,
kinda get the picture.

109
00:08:17.524 --> 00:08:22.493
The one thing to note before we move
on is, eventually, when we reach this,

110
00:08:22.493 --> 00:08:25.068
we're gonna return the resultSoFar.

111
00:08:25.068 --> 00:08:28.956
Which, as you see,
is gonna be this string that we built up,

112
00:08:28.956 --> 00:08:32.650
we accumulated through
our recursive calls.

113
00:08:32.650 --> 00:08:36.189
And so that will return that, and
since we're returning this recursion,

114
00:08:36.189 --> 00:08:37.325
this will be returned.

115
00:08:37.325 --> 00:08:42.298
And it will keep popping and popping and
popping until we will finally return here.

116
00:08:42.298 --> 00:08:45.887
And that's gonna return,
where we initially called it.

