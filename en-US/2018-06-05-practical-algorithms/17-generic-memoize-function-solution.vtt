WEBVTT

1
00:00:00.370 --> 00:00:04.410
&gt;&gt; Bianca: All right, so I'm gonna go
over all of the exercises in one go,

2
00:00:04.410 --> 00:00:06.750
from task one through task four.

3
00:00:06.750 --> 00:00:09.510
And we'll talk about
the different optimizations and

4
00:00:09.510 --> 00:00:12.130
then we're go even further and
make it a little bit nicer, as well.

5
00:00:13.550 --> 00:00:17.120
So again, we started off with this times
ten function, all it does is it takes

6
00:00:17.120 --> 00:00:22.050
input and returns that input times ten,
it does some calculation, here.

7
00:00:22.050 --> 00:00:27.050
So when we hit play we can see
we're console logging TASK 1,

8
00:00:27.050 --> 00:00:30.470
and times 10 returns 90.

9
00:00:30.470 --> 00:00:32.900
Referencing that.

10
00:00:32.900 --> 00:00:37.960
So our second task is to use
an object to create a cache,

11
00:00:37.960 --> 00:00:45.720
so that we don't have to calculate
times10 with the input 9 more than once.

12
00:00:45.720 --> 00:00:46.850
How do we do that?

13
00:00:46.850 --> 00:00:54.370
Well, first we want to call it with
some value, nine, so n is nine.

14
00:00:54.370 --> 00:00:57.550
And since our cache is
initialized as empty,

15
00:00:57.550 --> 00:01:01.230
we skip over that first case and
we jump into this else.

16
00:01:01.230 --> 00:01:05.150
So in this else, we're gonna calculate
the result for n, which is 9.

17
00:01:05.150 --> 00:01:10.680
And so 9 times 10,
that's gonna be 90, right?

18
00:01:11.700 --> 00:01:13.760
Result is then 90.

19
00:01:13.760 --> 00:01:20.260
So cache of n is going to look
something like this in our object.

20
00:01:21.650 --> 00:01:25.590
So we can move that up here just for
our reference.

21
00:01:25.590 --> 00:01:28.520
You can imagine that this
happening in the background,

22
00:01:28.520 --> 00:01:31.696
you can imagine that's what's happening
and then we return the result.

23
00:01:31.696 --> 00:01:34.963
When we call again with 9,

24
00:01:34.963 --> 00:01:39.710
it's going to say, is 9 in the cache?

25
00:01:39.710 --> 00:01:41.770
And in fact, it is, right?

26
00:01:41.770 --> 00:01:44.090
And so we get to jump into this block.

27
00:01:44.090 --> 00:01:47.970
We're gonna do a little console.log,
and we'll just return the cache.

28
00:01:47.970 --> 00:01:49.620
This is an optimization,

29
00:01:49.620 --> 00:01:54.090
because we are not having to do
this calculation every single time.

30
00:01:54.090 --> 00:01:59.480
This is especially important for
very expensive function calls.

31
00:02:00.940 --> 00:02:05.884
And so we're having a trade off
here of space, right, we're going

32
00:02:05.884 --> 00:02:10.915
to be caching all these values,
which is adding more data in memory,

33
00:02:10.915 --> 00:02:14.942
however, it can really speed
up our time complexity.

34
00:02:17.624 --> 00:02:20.564
&gt;&gt; Bianca: Great, so if we hit play,

35
00:02:20.564 --> 00:02:27.075
we can see,
&gt;&gt; Bianca: Let's just clear that,

36
00:02:27.075 --> 00:02:33.471
you can see that first,
&gt;&gt; Bianca: That's interesting,

37
00:02:33.471 --> 00:02:37.445
it's cause it already, hold on I need to,
so the cache, since, this is

38
00:02:37.445 --> 00:02:42.445
the problem actually with having global,
that's because I left that there, okay.

39
00:02:42.445 --> 00:02:46.920
It's like it's not clearing.
&gt;&gt; Bianca: Okay,

40
00:02:46.920 --> 00:02:51.356
there we go, so first,
we calculate the results, which is 90, and

41
00:02:51.356 --> 00:02:55.360
then we'll fetch it from cache
the second time that we call it.

42
00:02:56.520 --> 00:03:00.720
So these are just console logging here and
hitting these different cases.

43
00:03:01.860 --> 00:03:04.860
Okay, so we have a global cache.

44
00:03:06.130 --> 00:03:08.370
Wanna avoid that, so
how do we clean that up?

45
00:03:08.370 --> 00:03:10.900
We're gonna move it into a function.

46
00:03:12.070 --> 00:03:15.351
We just wrap our regular
function in a parent

47
00:03:15.351 --> 00:03:20.959
function.
&gt;&gt; Bianca: We

48
00:03:20.959 --> 00:03:26.162
would change this earlier.
&gt;&gt; Bianca: I

49
00:03:26.162 --> 00:03:31.393
forgot what we called it.
&gt;&gt; Bianca: And,

50
00:03:33.102 --> 00:03:34.374
&gt;&gt; Bianca: When we call this, so

51
00:03:34.374 --> 00:03:38.835
we're gonna initially call our parent
function, it's gonna return this

52
00:03:38.835 --> 00:03:44.580
function that means this variable name is
retaining a reference to this function.

53
00:03:44.580 --> 00:03:46.510
When we execute this function,

54
00:03:46.510 --> 00:03:51.510
down here, it also retains
a reference to any variables

55
00:03:54.110 --> 00:03:59.060
saved or mutated in the parent scope,

56
00:03:59.060 --> 00:04:03.340
as well as, any variables that were passed
in to the initial scope of the parent.

57
00:04:03.340 --> 00:04:07.440
In this case, we're not passing anything,
so no big deal, but if we had,

58
00:04:07.440 --> 00:04:12.470
we could also retain access to
those parameters in this scope,

59
00:04:12.470 --> 00:04:13.930
assuming that you didn't overwrite it.

60
00:04:13.930 --> 00:04:17.244
If you name this n, and then this one n,
it's gonna override it, so

61
00:04:17.244 --> 00:04:19.919
just be careful of naming conflicts,
but otherwise,

62
00:04:19.919 --> 00:04:24.980
you should have access.
&gt;&gt; Bianca: Okay, so

63
00:04:24.980 --> 00:04:31.688
then we can hit play.
&gt;&gt; Bianca: Great.

64
00:04:37.769 --> 00:04:39.221
&gt;&gt; Bianca: Very cool.

65
00:04:39.221 --> 00:04:44.750
All right, and then we have our next one,
which is, we want to make it generic.

66
00:04:44.750 --> 00:04:50.400
As programmers, a big part of going
from a beginner programmer to

67
00:04:50.400 --> 00:04:56.220
an intermediate or advanced programmer is
making things more generic, more reusable.

68
00:04:56.220 --> 00:04:59.680
And so with our minimalize function,
we're making it much more reusable,

69
00:04:59.680 --> 00:05:03.950
because it doesn't rely, we're not
hard coating that times10 operation.

70
00:05:03.950 --> 00:05:06.760
So this function, memoize,
which is called memoize,

71
00:05:06.760 --> 00:05:10.300
cuz it doesn't have necessarily
anything that it does.

72
00:05:10.300 --> 00:05:16.730
You pass in whatever function that
you would like for it to run.

73
00:05:17.780 --> 00:05:20.520
And so
the only difference between this one is,

74
00:05:20.520 --> 00:05:25.960
we have our times10 where we pass n,
instead we just call it,

75
00:05:25.960 --> 00:05:31.620
call back, we pass n, and
when we call this function

76
00:05:31.620 --> 00:05:36.320
we pass in a reference
to this other function.

77
00:05:36.320 --> 00:05:39.845
So a little crazy, so first of all,
we're returning a function,

78
00:05:39.845 --> 00:05:44.580
we're saving it in here, but
we're also passing in a function,

79
00:05:44.580 --> 00:05:48.320
because in JavaScript functions
are just data, we can do that.

80
00:05:48.320 --> 00:05:50.010
And it's kind of cool and fun, so why not?

81
00:05:51.100 --> 00:05:57.330
And so, and like I said,
since we have access to our parent scope,

82
00:05:57.330 --> 00:06:02.600
because of closure,
we have access to our call back here.

83
00:06:02.600 --> 00:06:06.394
And then we just call it right there.
&gt;&gt; Speaker 2: It's already

84
00:06:06.394 --> 00:06:09.210
expecting an argument, so that's why
we could just pass n right into it.

85
00:06:09.210 --> 00:06:11.280
&gt;&gt; Bianca: Mm-hm, and

86
00:06:11.280 --> 00:06:16.750
then we can make this more generic,
so right now, this call back isn't so

87
00:06:16.750 --> 00:06:20.010
generic, this memoized function, because
we can only call it with one argument.

88
00:06:20.010 --> 00:06:25.730
So down here, when we, so we call
memoize times10, Memoized with times10.

89
00:06:25.730 --> 00:06:28.270
And then we call this memoizedTimes10,

90
00:06:28.270 --> 00:06:31.370
because it's a times10
method that is memoized.

91
00:06:32.690 --> 00:06:39.650
And then we passed the nine, this is gonna
get memoized and saved into our cache.

92
00:06:39.650 --> 00:06:44.230
But we could call this with another
function and it would do the same thing.

93
00:06:45.650 --> 00:06:46.490
That's why it's generic.

94
00:06:46.490 --> 00:06:52.680
Except that we're only allowing it to
pass one argument to our callback.

95
00:06:52.680 --> 00:06:58.443
So if we wanted to make it a little
more generic, you could have it pass

96
00:06:58.443 --> 00:07:04.080
multiple using a spread and rest operator.

97
00:07:04.080 --> 00:07:04.840
Just like that.

98
00:07:04.840 --> 00:07:11.545
So then, they can be a different variable
amounts of arguments you could pass in.

99
00:07:11.545 --> 00:07:13.080
Mm-hm?
&gt;&gt; Speaker 3: Yeah,

100
00:07:13.080 --> 00:07:14.260
I'm mostly following you, but

101
00:07:14.260 --> 00:07:19.000
I'm having a little bit of friction
trying to trace the passing of

102
00:07:19.000 --> 00:07:20.600
variables through the different functions.
&gt;&gt; Bianca: Mm-hm.

103
00:07:20.600 --> 00:07:21.800
&gt;&gt; Speaker 3: Do you mind doing a trace?

104
00:07:21.800 --> 00:07:22.560
&gt;&gt; Bianca: Yeah, absolutely,

105
00:07:22.560 --> 00:07:23.820
it's like my favorite thing.

106
00:07:25.050 --> 00:07:30.348
Okay, so let's start with, we always start
with where the function is being called.

107
00:07:30.348 --> 00:07:32.813
So memoize, and we're gonna pass that
function that we defined up here.

108
00:07:36.800 --> 00:07:38.288
&gt;&gt; Bianca: No, I lost this [INAUDIBLE],

109
00:07:38.288 --> 00:07:38.908
here we go.

110
00:07:38.908 --> 00:07:46.780
So times10 is now cb,
cache we initialize as empty.

111
00:07:46.780 --> 00:07:49.300
We return this function as empty.

112
00:07:49.300 --> 00:07:51.810
I'm sorry, wait, it's not empty,
it's full of stuff.

113
00:07:51.810 --> 00:07:55.390
We return this function, it is not
invoked, we just return the body.

114
00:07:55.390 --> 00:07:58.260
This check if else is not run yet,

115
00:07:58.260 --> 00:08:03.240
because we haven't run this function,
we're just returning it, the definition.

116
00:08:03.240 --> 00:08:06.180
Just like when we define
this function here,

117
00:08:06.180 --> 00:08:10.106
nothing actually runs until we make
it down here and we invoke it.

118
00:08:10.106 --> 00:08:13.700
So similarly, where this is just
a function definition, nothing is run yet.

119
00:08:15.160 --> 00:08:16.740
And we save it in this variable.

120
00:08:16.740 --> 00:08:19.775
Now, like any function that we wanna run,
we're gonna call it,

121
00:08:19.775 --> 00:08:23.036
recall it down here with nine.

122
00:08:23.036 --> 00:08:29.292
So now, nine is our argument, and so
really what this is gonna look like,

123
00:08:29.292 --> 00:08:33.920
is like an array with nine, that's what
that args with the dot, dot, dot is doing.

124
00:08:35.200 --> 00:08:37.755
Do we have it in cache, no we don't,
right, we haven't called this yet,

125
00:08:37.755 --> 00:08:39.280
cache is still empty.

126
00:08:39.280 --> 00:08:42.666
So, we're going to, do our calculation,

127
00:08:42.666 --> 00:08:48.570
this is going to do this.
&gt;&gt; Bianca: Whoops,

128
00:08:48.570 --> 00:08:54.187
excuse me.
&gt;&gt; Bianca: This is just gonna say,

129
00:08:54.187 --> 00:08:55.100
call back at nine.

130
00:08:55.100 --> 00:08:57.720
If there are multiple,
like say, we did nine and

131
00:08:57.720 --> 00:09:02.660
ten, what it would do is it would just
pass it as a series versus an array.

132
00:09:02.660 --> 00:09:04.100
That's what that's doing.

133
00:09:04.100 --> 00:09:10.088
So we're not doing that.
&gt;&gt; Bianca: But just so you know.

134
00:09:10.088 --> 00:09:17.150
So we're doing our calculation,
storing it, caching it, returning it.

135
00:09:17.150 --> 00:09:21.728
Then when we get to this line
we're gonna call it again,

136
00:09:21.728 --> 00:09:23.860
and this is when we're
gonna hit that cache.

137
00:09:23.860 --> 00:09:29.670
So we have nine, again, we're jumping
into the body of this function.

138
00:09:29.670 --> 00:09:33.280
When we run the body of this function all
the variables in the scope are gonna be

139
00:09:33.280 --> 00:09:37.699
reinitialized, but the variables in
this scope are gonna stay the same.

140
00:09:39.040 --> 00:09:42.730
That's very important when
reasoning about a closure.

141
00:09:42.730 --> 00:09:46.140
The closure variables here stay the same,
CB is the same,

142
00:09:46.140 --> 00:09:50.030
our cache is the same, but
the arguments that we pass in are new.

143
00:09:50.030 --> 00:09:52.642
N is now, well,
it's actually still nine, but

144
00:09:52.642 --> 00:09:55.020
it's a new version of
nine you could think.

145
00:09:57.480 --> 00:09:59.680
So we're going to say, is nine in cache?

146
00:09:59.680 --> 00:10:03.340
Yeah, so we're gonna fetch it and
return it.

147
00:10:06.070 --> 00:10:07.539
Or we're gonna console log in and
then return it.

148
00:10:14.436 --> 00:10:15.411
&gt;&gt; Bianca: Mm-hm.

149
00:10:15.411 --> 00:10:17.478
&gt;&gt; Speaker 4: Just a question for

150
00:10:17.478 --> 00:10:19.972
the else statements.

151
00:10:19.972 --> 00:10:24.260
When you create that result
variable does it serve any benefit

152
00:10:24.260 --> 00:10:29.090
other than just like readability as
opposed to just assigning the cache?

153
00:10:29.090 --> 00:10:29.950
&gt;&gt; Bianca: Yeah, yeah,

154
00:10:29.950 --> 00:10:34.150
it's just there to break out
like the step by step, so

155
00:10:34.150 --> 00:10:36.090
when I explain it-
&gt;&gt; Speaker 4: Just curious.

156
00:10:36.090 --> 00:10:38.120
&gt;&gt; Bianca: Yeah, yeah, yeah, no, yeah,

157
00:10:38.120 --> 00:10:42.130
good question.
&gt;&gt; Speaker 2: How does the first example

158
00:10:42.130 --> 00:10:47.900
greatly differ from the third example
in terms of the space complexity and

159
00:10:47.900 --> 00:10:50.730
the time complexity?
&gt;&gt; Bianca: Mm, so for

160
00:10:50.730 --> 00:10:55.980
the different examples, the time and
space complexity are consistent.

161
00:10:57.790 --> 00:11:02.680
In terms of using memoization versus
not using memoization in a solution,

162
00:11:03.860 --> 00:11:09.560
for our specific case where our call back
is really doing a constant time operation,

163
00:11:09.560 --> 00:11:12.150
the time complexity improvement is none.

164
00:11:12.150 --> 00:11:17.410
However, this technique is really
important for when you're a call back

165
00:11:17.410 --> 00:11:22.510
is doing some very time
expensive operations.

166
00:11:22.510 --> 00:11:27.045
And so, we'll see that when we
get later on in this course,

167
00:11:27.045 --> 00:11:32.233
we'll see that sometimes our
calculations can be very expensive.

