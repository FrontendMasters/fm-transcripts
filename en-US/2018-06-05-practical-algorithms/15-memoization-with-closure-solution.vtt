WEBVTT

1
00:00:00.140 --> 00:00:05.920
&gt;&gt; Bianca: Okay, so we're coming back from
our third task related to memoization.

2
00:00:05.920 --> 00:00:08.420
Our goal here was to
clean up our global scope

3
00:00:08.420 --> 00:00:10.980
by moving our cache
inside of our function.

4
00:00:10.980 --> 00:00:14.520
This requires us to return
a function from our

5
00:00:14.520 --> 00:00:19.350
memoizedClosure ten times function so
that we could call it later.

6
00:00:19.350 --> 00:00:25.510
What this does is it allows us to have
a local version of our cache that,

7
00:00:25.510 --> 00:00:30.070
one, isn't reset every single time it
would call the function that we're

8
00:00:30.070 --> 00:00:34.830
concerned about, and
it doesn't clutter our global scope.

9
00:00:34.830 --> 00:00:39.260
As you can imagine,
if you had this global cache, and

10
00:00:39.260 --> 00:00:46.462
you have multiple functions Interacting
with this, it can have unexpected results.

11
00:00:46.462 --> 00:00:51.525
And so, in general, that's why we
like to avoid having global caches,

12
00:00:51.525 --> 00:00:55.940
and so this is a better approach
is to have our local cache here.

13
00:00:55.940 --> 00:01:00.830
But it does require a little more
expertise in JavaScript, in particular,

14
00:01:00.830 --> 00:01:03.490
being comfortable with returning
function from functions and

15
00:01:03.490 --> 00:01:05.030
then calling them later.

16
00:01:05.030 --> 00:01:11.790
So, this is called using a closure,
and let's walk through how this works.

17
00:01:14.390 --> 00:01:17.430
The first thing we're gonna do here
is we're gonna call this function,

18
00:01:17.430 --> 00:01:20.160
it's called memorized closure times ten.

19
00:01:21.430 --> 00:01:26.160
Very long name, and
what this does is we are going to.

20
00:01:26.160 --> 00:01:29.080
Since we called it,
we're gonna hop into the function body.

21
00:01:29.080 --> 00:01:32.430
We're gonna initialize this
cache as an empty object, and

22
00:01:32.430 --> 00:01:36.100
then we're gonna return this function, so

23
00:01:36.100 --> 00:01:40.760
this function now is referenced here.

24
00:01:43.700 --> 00:01:48.600
We could just take a peek
at what this looks like,

25
00:01:52.190 --> 00:01:54.150
so again, call this function,

26
00:01:55.310 --> 00:02:00.260
this variable is just gonna save
whatever this function returns.

27
00:02:00.260 --> 00:02:01.680
But what does this function return?

28
00:02:01.680 --> 00:02:07.590
Another function,
let's take a look of what that looks like.

29
00:02:07.590 --> 00:02:14.630
Here's memo closure times 10, which is
just referring to our function, right?

30
00:02:14.630 --> 00:02:19.505
Which is awesome because that
means that we can call it again,

31
00:02:19.505 --> 00:02:22.612
but what happens when we call it again?

32
00:02:22.612 --> 00:02:26.612
The first thing that we could do,
let's pass nine to it, so

33
00:02:26.612 --> 00:02:31.572
when we call this function it's
important to note that we're not calling

34
00:02:31.572 --> 00:02:36.222
the entire body of the memorized
closure times ten folder function.

35
00:02:36.222 --> 00:02:40.413
We're actually calling the body of
the function that is being returned,

36
00:02:40.413 --> 00:02:42.385
it's an important distinction.

37
00:02:42.385 --> 00:02:49.660
So, when we call this function,
we're hopping into the body of this one.

38
00:02:50.730 --> 00:02:53.420
Luckily, because of how closures work,

39
00:02:53.420 --> 00:02:57.290
we still have reference to variables
declared in the parent scope.

40
00:02:57.290 --> 00:02:58.259
What is the parent scope?

41
00:02:59.400 --> 00:03:03.280
Just this bigger function body, and also
anything that's in the Globescope as well,

42
00:03:03.280 --> 00:03:05.990
we have reference to.

43
00:03:05.990 --> 00:03:11.600
We're going to pass 9, n is 9, we're
going to check if, n is in the cache.

44
00:03:11.600 --> 00:03:14.240
Very first time we call it we know that
we don't have anything in the cache so

45
00:03:14.240 --> 00:03:15.890
this is going to be undefined.

46
00:03:15.890 --> 00:03:18.730
So we're going to skip
down to our next block And

47
00:03:18.730 --> 00:03:20.150
we're gonna calculate our result.

48
00:03:20.150 --> 00:03:23.400
So our result is just n times 10.

49
00:03:23.400 --> 00:03:27.680
And we are going to save
that into a variable.

50
00:03:27.680 --> 00:03:34.540
And then we are going to save that value
into our cache object, just like before.

51
00:03:34.540 --> 00:03:39.910
And then we're going to return the result,
because We really care about that 90.

52
00:03:39.910 --> 00:03:43.560
We're not so worried about how it's
implemented in the background.

53
00:03:45.130 --> 00:03:52.090
So our expected output is always 90
despite whether it's cached or not.

54
00:03:52.090 --> 00:03:56.750
&gt;&gt; Speaker 2: Why would we pass
an argument to the parent function?

55
00:03:56.750 --> 00:04:01.400
Meaning that, why don't we have,
I can't see the line, but

56
00:04:01.400 --> 00:04:04.820
const closure times ten
equals closure times ten.

57
00:04:04.820 --> 00:04:07.740
Why don't we pass something there and

58
00:04:07.740 --> 00:04:11.580
then it becomes an argument
in the function it's calling?

59
00:04:11.580 --> 00:04:13.190
And then we'll reference and return that.

60
00:04:13.190 --> 00:04:15.660
Why does it only go into the
&gt;&gt; Bianca: You could.

61
00:04:15.660 --> 00:04:18.800
So you could do that, so
you can pass things here,

62
00:04:18.800 --> 00:04:22.840
you know you could pass numbers here and
then you can call this M and

63
00:04:22.840 --> 00:04:27.600
you could do work on M and you could
also reference M in this function and

64
00:04:27.600 --> 00:04:33.790
have access to it cause that's how
a scope works or in this case at least.

65
00:04:33.790 --> 00:04:37.880
So you could do that the reason that
we're not doing that in this case

66
00:04:37.880 --> 00:04:42.810
Is because we wanna create a new
function that we can use multiple times.

67
00:04:42.810 --> 00:04:45.920
And so this one we can use multiple times,
we'll just pass an int.

68
00:04:45.920 --> 00:04:51.150
And the only point of our parent function
is to make this cache variable private.

69
00:04:51.150 --> 00:04:56.250
That's the only reason that we're doing
that is because we want to take our cache

70
00:04:56.250 --> 00:04:59.910
object out of the global scope
Put it inside of a function so

71
00:04:59.910 --> 00:05:02.120
then it's private to that function scope.

72
00:05:02.120 --> 00:05:07.350
Also, what we can do is if we
call this again, we can have

73
00:05:07.350 --> 00:05:12.400
two separate caches, okay?

74
00:05:12.400 --> 00:05:19.558
So, for example, if, let's say
&gt;&gt; Bianca: Let's

75
00:05:19.558 --> 00:05:23.790
say that, okay I'm gonna do it.

76
00:05:23.790 --> 00:05:24.640
I'm gonna do it.

77
00:05:24.640 --> 00:05:29.630
Let's say that we want this to be generic,
okay?

78
00:05:29.630 --> 00:05:36.340
And then we would call this
memoize closures closure times m.

79
00:05:36.340 --> 00:05:43.700
Okay we pass m This one is gonna be ten,
okay?

80
00:05:43.700 --> 00:05:45.620
Following here so we name this for

81
00:05:45.620 --> 00:05:50.145
calling it with in ten in this ten
&gt;&gt; Bianca: and

82
00:05:50.145 --> 00:05:57.390
the we return this function, now this
function is always gonna return N times M.

83
00:05:57.390 --> 00:06:01.980
So that's what we're gonna call this,
memoClosureTimes10, because n is 10.

84
00:06:01.980 --> 00:06:04.199
However, we could also
do something like this.

85
00:06:07.228 --> 00:06:13.827
&gt;&gt; Bianca: 5, now every time we call
this function it's still cached but

86
00:06:13.827 --> 00:06:17.570
we're multiplying n times 5 now.

87
00:06:18.650 --> 00:06:23.310
And so every time you call a function,
you create a new execution environment.

88
00:06:23.310 --> 00:06:27.580
And inside that execution environment,
you have your local variables, and

89
00:06:27.580 --> 00:06:29.860
you can do really cool stuff with it.

90
00:06:29.860 --> 00:06:33.510
This is the power of a closure,
is that even though it's kinda confusing,

91
00:06:33.510 --> 00:06:35.650
cuz you're returning functions,
and here's this other function

92
00:06:37.390 --> 00:06:41.260
It's very very powerful, and
it allows you to make generic functions.

93
00:06:41.260 --> 00:06:46.199
And it really is the underlying
technique that powers the functional

94
00:06:46.199 --> 00:06:47.996
programming paradigm.

95
00:06:51.129 --> 00:06:55.160
&gt;&gt; Bianca: Cool, but we're not doing that,

96
00:06:55.160 --> 00:07:01.420
we're just doing Like this,
so that's kinda cool.

97
00:07:03.365 --> 00:07:08.011
&gt;&gt; Bianca: And anyway,
&gt;&gt; Bianca: The reason again, so

98
00:07:08.011 --> 00:07:12.740
the point I wanna make here is, the reason
that we can even call this, like this,

99
00:07:12.740 --> 00:07:17.349
we have our invocational operator,
is because we're returning a function.

100
00:07:18.480 --> 00:07:23.460
If you get the error like
undefined is not a function,

101
00:07:23.460 --> 00:07:25.210
then you know that you're
not returning a function.

102
00:07:25.210 --> 00:07:28.650
I would check what your
function is returning and

103
00:07:28.650 --> 00:07:31.980
make sure that you're actually returning
function and not some primitive value.

104
00:07:31.980 --> 00:07:34.920
Or another thing that some people
accidentally do is they will

105
00:07:34.920 --> 00:07:36.710
call the function.

106
00:07:36.710 --> 00:07:38.220
First and then return that,

107
00:07:38.220 --> 00:07:40.720
which is returning the result
of the function that's called.

108
00:07:40.720 --> 00:07:42.320
Does make sense?

109
00:07:43.390 --> 00:07:44.920
Versus the entire function body.

110
00:07:46.260 --> 00:07:47.890
Key here is this a function definition?

111
00:07:49.240 --> 00:07:54.140
This is a function invocation, and
they mean different things, one is data,

112
00:07:54.140 --> 00:07:58.660
right so this function here's is just
data we can return it like a string And

113
00:07:58.660 --> 00:07:59.760
this is a function invocation.

114
00:07:59.760 --> 00:08:03.280
This is an action, so
this means run the body of this function.

115
00:08:03.280 --> 00:08:07.160
And then afterwards, whatever that
returns, you're gonna save it here.

116
00:08:09.600 --> 00:08:14.270
Anyway, that's our solution.

117
00:08:14.270 --> 00:08:16.000
Any questions?

118
00:08:16.000 --> 00:08:17.539
Everyone's like so many questions.

119
00:08:19.180 --> 00:08:23.060
Sorry, let me get this in frame.

120
00:08:25.660 --> 00:08:27.490
Yeah.
&gt;&gt; Speaker 3: So what would happen,

121
00:08:27.490 --> 00:08:31.615
and maybe just,
I just need to know more about closures.

122
00:08:31.615 --> 00:08:32.180
&gt;&gt; Bianca: Mm-hm.
&gt;&gt; Speaker 3: But

123
00:08:32.180 --> 00:08:38.080
what would happen if you were to
do memo closure times nine comma.

124
00:08:38.080 --> 00:08:38.840
8.

125
00:08:38.840 --> 00:08:44.940
And then, I just,
I'm missing the portion where, why does it

126
00:08:44.940 --> 00:08:51.660
kind of know that we want 9 to 7 for n,
if we are not giving it any sort of.

127
00:08:51.660 --> 00:08:52.680
&gt;&gt; Bianca: We are giving it right here.

128
00:08:56.110 --> 00:08:57.090
&gt;&gt; Speaker 3: Yeah, yeah.
But then.

129
00:08:57.090 --> 00:09:00.560
&gt;&gt; Bianca: Since this is just a function,
we can call it multiple times.

130
00:09:00.560 --> 00:09:02.640
And each time it could be different.

131
00:09:05.920 --> 00:09:08.960
&gt;&gt; Speaker 3: What happens if you
try to do two different arguments.

132
00:09:08.960 --> 00:09:09.970
&gt;&gt; Bianca: Hmm.

133
00:09:09.970 --> 00:09:11.400
&gt;&gt; Speaker 3: Does that work?

134
00:09:12.890 --> 00:09:13.460
&gt;&gt; Bianca: Like this?

135
00:09:13.460 --> 00:09:16.160
&gt;&gt; Speaker 3: Yeah.
&gt;&gt; Bianca: So to pass a second argument

136
00:09:16.160 --> 00:09:18.120
you would need to reference it here.

137
00:09:18.120 --> 00:09:22.050
You could do that, you would just
need to be sure when you're defining,

138
00:09:23.380 --> 00:09:29.440
The, the function definition that your
referencing that either by passing

139
00:09:29.440 --> 00:09:34.350
it like [INAUDIBLE] explicitly or
you can do something like more generic or

140
00:09:34.350 --> 00:09:35.910
you're doing like that or
you're doing like that or

141
00:09:35.910 --> 00:09:39.960
you're just gather all the rest into
an array, that's another technique.

