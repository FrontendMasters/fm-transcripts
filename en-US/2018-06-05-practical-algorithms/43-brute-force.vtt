WEBVTT

1
00:00:00.160 --> 00:00:02.540
&gt;&gt; Bianca Gandolfo: However,
there's a problem.

2
00:00:03.680 --> 00:00:07.936
Would this approach work with
these values of the coins,

3
00:00:07.936 --> 00:00:12.914
what if the input was 21 and
the coin values were 10, 6 and 1?

4
00:00:12.914 --> 00:00:16.370
This is where the greedy
approach breaks down.

5
00:00:16.370 --> 00:00:21.507
And this is why I'm not very pro
using the greedy approach in

6
00:00:21.507 --> 00:00:26.852
an interview setting because
it can seem like it's correct,

7
00:00:26.852 --> 00:00:31.168
but it's also hard to prove
that it's correct and

8
00:00:31.168 --> 00:00:34.899
that's just a part of greedy algorithms.

9
00:00:34.899 --> 00:00:38.830
In general, you kind of have to think
of all the scenarios where it isn't

10
00:00:38.830 --> 00:00:43.220
correct versus just finding one correct
answer and it being the correct answer.

11
00:00:43.220 --> 00:00:46.328
With a lot of algorithms,
you can just know that.

12
00:00:46.328 --> 00:00:49.014
With the greedy solution, you have to say,

13
00:00:49.014 --> 00:00:53.630
is the locally optimal solution
actually the globally optimal solution?

14
00:00:53.630 --> 00:00:56.104
And sometimes,
it will feel like it is, and it's not.

15
00:00:56.104 --> 00:01:01.005
And so there's this job scheduling
problem that is very common

16
00:01:01.005 --> 00:01:04.709
when we're talking about
greedy algorithms.

17
00:01:04.709 --> 00:01:08.614
And there's four different ways
that you can go about doing that.

18
00:01:08.614 --> 00:01:11.261
Three of them are wrong, so

19
00:01:11.261 --> 00:01:16.325
just be aware of that when
you're in an interview and

20
00:01:16.325 --> 00:01:22.443
you're like, this seems like
a classic greedy algorithm.

21
00:01:22.443 --> 00:01:25.610
Just know that there's a lot
of ways you can go wrong.

22
00:01:25.610 --> 00:01:30.739
And so that's why I think we
should just do brute force,

23
00:01:30.739 --> 00:01:36.756
which is to just go through every
different combination of them.

24
00:01:36.756 --> 00:01:41.665
And then when you're introducing,
I'm gonna just go with a brute force

25
00:01:41.665 --> 00:01:45.218
solution at first, and
then I'll optimize after.

26
00:01:45.218 --> 00:01:48.870
It'll be fine, at least you have
some solution that's correct.

27
00:01:48.870 --> 00:01:52.190
And what's an algorithm if
it's not correct, right?

28
00:01:53.260 --> 00:01:57.020
I guess in some scenarios,
it's okay if it's not totally correct.

29
00:01:57.020 --> 00:02:00.200
In those scenarios where I mentioned
before where the input size is so

30
00:02:00.200 --> 00:02:02.460
big that you can't actually find
the correct answer, anyway, or

31
00:02:02.460 --> 00:02:04.910
you can't really know for
sure if something is the correct answer.

32
00:02:04.910 --> 00:02:08.130
There are still these unsolved
mysteries in computer science.

33
00:02:10.250 --> 00:02:15.690
But, so for this scenario, our brute
force approach is we're gonna calculate

34
00:02:15.690 --> 00:02:20.930
every single combination and keep track
of the minimum combination of points.

35
00:02:20.930 --> 00:02:23.080
So what does that look like?

36
00:02:23.080 --> 00:02:26.250
Yes, it's recursion, it is.

37
00:02:26.250 --> 00:02:31.458
So we are going to, at every step,

38
00:02:31.458 --> 00:02:36.390
figure out all the different scenarios.

39
00:02:36.390 --> 00:02:39.310
So the very first step,
we can subtract all three.

40
00:02:39.310 --> 00:02:42.480
So we're going to go down to
each of these decision trees and

41
00:02:42.480 --> 00:02:46.650
add up the one that is the least.

42
00:02:46.650 --> 00:02:51.090
And you can see, it's kind of,
the depth of the recursion for

43
00:02:51.090 --> 00:02:55.790
each decision tree is the same as
the number of decisions that are made.

44
00:02:55.790 --> 00:03:04.330
So you can see that our best solution
is 12- 6- 6, which is two coins.

45
00:03:06.480 --> 00:03:09.422
So you can think of it like that, or

46
00:03:09.422 --> 00:03:15.008
we could look at the actual code and
we can play our favorite game.

47
00:03:15.008 --> 00:03:21.311
You guys are gonna hate
this game after this class.

48
00:03:21.311 --> 00:03:25.444
It's so useful, especially with something
like this when you have a bunch,

49
00:03:25.444 --> 00:03:28.130
you think that merge sort branching,
just wait.

50
00:03:29.370 --> 00:03:31.860
Just kidding, it's not that bad.

51
00:03:31.860 --> 00:03:35.340
Okay, so let's make some change.

52
00:03:37.170 --> 00:03:43.362
Maybe we'll just use our example as 12,
keep it consistent.

53
00:03:43.362 --> 00:03:47.767
So this one is really cool,
because we have a forEach in here.

54
00:03:47.767 --> 00:03:52.524
Remember we were talking about
the forEach making things a little

55
00:03:52.524 --> 00:03:54.260
bit more complicated?

56
00:03:55.470 --> 00:03:56.236
Here we are.

57
00:03:56.236 --> 00:04:02.981
Okay, so we're gonna makeChange,
our value is 12.

58
00:04:02.981 --> 00:04:05.472
This has a recursion counter.

59
00:04:05.472 --> 00:04:07.095
I'm just gonna take this out.

60
00:04:14.560 --> 00:04:17.033
&gt;&gt; Bianca Gandolfo: This is just,
I have console logs for my examples so

61
00:04:17.033 --> 00:04:20.323
that you guys can run them and
kind of see some helpful console logs.

62
00:04:20.323 --> 00:04:25.298
Okay, so we see our base case
is when our value is zero, so

63
00:04:25.298 --> 00:04:31.740
we're gonna keep subtracting our coins
from our value until we hit zero.

64
00:04:31.740 --> 00:04:34.490
Once we hit zero,
that's our base case, we return up.

65
00:04:34.490 --> 00:04:36.470
All right, so
we're gonna initialize our minCoins.

66
00:04:36.470 --> 00:04:40.811
Sometimes I'll do minCoins -1,
I think that's better.

67
00:04:42.450 --> 00:04:44.210
But that's okay.

68
00:04:44.210 --> 00:04:47.901
So let me just remove my, okay.

69
00:04:47.901 --> 00:04:51.373
So, we're gonna loop through
all of the coins which,

70
00:04:56.342 --> 00:04:57.510
&gt;&gt; Bianca Gandolfo: We have here.

71
00:04:59.550 --> 00:05:01.820
Here are our coins.

72
00:05:01.820 --> 00:05:04.150
So for our first coin,
we'll start with 10.

73
00:05:04.150 --> 00:05:08.495
And we're gonna say ( value- coin ), so

74
00:05:08.495 --> 00:05:13.586
here's our ( value- coin
) is gonna give us 2.

75
00:05:13.586 --> 00:05:22.081
So then, we call makeChange,
&gt;&gt; Bianca Gandolfo: Here,

76
00:05:25.031 --> 00:05:26.600
&gt;&gt; Bianca Gandolfo: Where our value is 2.

77
00:05:29.319 --> 00:05:31.624
&gt;&gt; Bianca Gandolfo: All right,
so it's not 0.

78
00:05:31.624 --> 00:05:37.800
Gonna initialize this, again,
it's in its own little scope universe.

79
00:05:39.470 --> 00:05:41.923
And we have our coin, and
then we're gonna start with 10 again.

80
00:05:45.003 --> 00:05:45.763
&gt;&gt; Bianca Gandolfo: However,

81
00:05:45.763 --> 00:05:50.753
we don't ever go into this if block
because the coin is bigger than 2.

82
00:05:50.753 --> 00:05:57.180
Or this condition is not met,
so we're gonna go to 6.

83
00:05:57.180 --> 00:06:00.740
Condition still not met, so we go to 1.

84
00:06:00.740 --> 00:06:02.590
Then we do our recursion again.

85
00:06:03.650 --> 00:06:08.109
Put the value one,
&gt;&gt; Bianca Gandolfo: And,

86
00:06:10.804 --> 00:06:11.975
&gt;&gt; Bianca Gandolfo: Still not there.

87
00:06:11.975 --> 00:06:14.410
Initialize that,
we're gonna start with ten.

88
00:06:14.410 --> 00:06:15.980
That's not gonna work,
we're gonna start with.

89
00:06:15.980 --> 00:06:18.060
Then we're gonna do six,
that one's not gonna work.

90
00:06:18.060 --> 00:06:19.820
Then we finally get to one, great.

91
00:06:19.820 --> 00:06:26.850
Now we can do, cuz ( 1- 1 ) is 0,
so it meets our requirements.

92
00:06:28.580 --> 00:06:32.388
So, we hit our base case,

93
00:06:32.388 --> 00:06:37.672
which is 0, so we're gonna return that.

94
00:06:37.672 --> 00:06:40.039
We're returning 0 from where we left off.

95
00:06:41.870 --> 00:06:48.013
So this, so makeChange(0), which is
what we just calculated, equals 0.

96
00:06:48.013 --> 00:06:50.402
So I'm gonna update that value to 0.

97
00:06:52.548 --> 00:06:56.040
&gt;&gt; Bianca Gandolfo: And then,
we're gonna continue on.

98
00:06:56.040 --> 00:07:00.612
So if the minimum coins is undefined,
which it is, we are going to enter in here

99
00:07:00.612 --> 00:07:04.932
and we're gonna have our minimum coins
equal our current minimum coins.

100
00:07:04.932 --> 00:07:06.613
So this is now zero, cool.

101
00:07:06.613 --> 00:07:08.210
So, then we're gonna loop again.

102
00:07:08.210 --> 00:07:12.475
Actually we're gonna break
through this loop, we're done,

103
00:07:12.475 --> 00:07:15.853
cuz we already looped
through all of the values and

104
00:07:15.853 --> 00:07:19.722
then we're gonna return minCoins + 1,
which is what?

105
00:07:19.722 --> 00:07:26.361
One, yeah, so
we're gonna pop this off our stack.

106
00:07:28.139 --> 00:07:33.188
&gt;&gt; Bianca Gandolfo: And this,
so makeChange(1) equals 1.

107
00:07:33.188 --> 00:07:36.500
minCoins, is minCoins undefined?

108
00:07:36.500 --> 00:07:42.070
Yes, even though we defined
it in the previous stack,

109
00:07:42.070 --> 00:07:44.400
we popped it off,
that doesn't exist anymore.

110
00:07:44.400 --> 00:07:46.010
They don't share the state at all.

111
00:07:46.010 --> 00:07:47.260
They're separate.

112
00:07:47.260 --> 00:07:51.780
So minCoins is undefined, and
so we're gonna set it again.

113
00:07:51.780 --> 00:07:54.610
Our currMinCoins is now going to be 1.

114
00:07:56.640 --> 00:07:58.950
So I think, yeah,
we looped through everything.

115
00:08:00.420 --> 00:08:04.662
And now we're gonna return minCoins + 1,
which is 2.

116
00:08:04.662 --> 00:08:05.300
Pop that off.

117
00:08:09.219 --> 00:08:13.710
&gt;&gt; Bianca Gandolfo: So,
makeChange(2) is 2.

118
00:08:15.180 --> 00:08:16.040
Following?

119
00:08:16.040 --> 00:08:16.580
Everyone good?

120
00:08:17.870 --> 00:08:19.029
Is minCoin undefined?

121
00:08:21.070 --> 00:08:21.570
Yes.

122
00:08:23.239 --> 00:08:26.942
&gt;&gt; Bianca Gandolfo: So, we're gonna
set our minCoins to our currMinCoins,

123
00:08:26.942 --> 00:08:27.800
which is 2.

124
00:08:27.800 --> 00:08:34.456
And then, so we reached the bottom
of one of our branches here.

125
00:08:36.820 --> 00:08:41.536
&gt;&gt; Bianca Gandolfo: So,
we did 12 -10, -1, -1.

126
00:08:41.536 --> 00:08:44.790
And we recursed up, and
now we're back here, and

127
00:08:44.790 --> 00:08:48.820
now we're about to go down through the 6.

128
00:08:48.820 --> 00:08:57.594
Everyone following how this is,
&gt;&gt; Bianca Gandolfo: Keeping track?

129
00:08:57.594 --> 00:09:01.012
Okay, now, we're going to, so we did 10.

130
00:09:01.012 --> 00:09:02.983
Now we're going to six.

131
00:09:05.240 --> 00:09:09.962
&gt;&gt; Bianca Gandolfo: Okay, 6- 12 is 6,

132
00:09:09.962 --> 00:09:14.686
and so we're going to,

133
00:09:14.686 --> 00:09:19.883
sorry, I shouldn't have

134
00:09:19.883 --> 00:09:24.857
actually changed that.

135
00:09:24.857 --> 00:09:29.516
makeChange(6).

136
00:09:35.354 --> 00:09:40.040
&gt;&gt; Bianca Gandolfo: So and
as you can see, we are now going here.

137
00:09:42.030 --> 00:09:43.098
So we subtracted 6.

138
00:09:43.098 --> 00:09:46.960
However, the next thing that we're
gonna do, actually, no, this will work.

139
00:09:46.960 --> 00:09:49.000
It's gonna be perfect.

140
00:09:49.000 --> 00:09:51.469
Okay.

141
00:09:51.469 --> 00:09:52.389
So we have 6.

142
00:09:52.389 --> 00:09:55.600
The first coin is 10,
that's not gonna work.

143
00:09:55.600 --> 00:09:56.425
Next coin is gonna be 6.

144
00:09:56.425 --> 00:10:01.269
So we're gonna makeChange(6-6),
which is 0.

145
00:10:01.269 --> 00:10:05.214
You guys remember what that returns?

146
00:10:05.214 --> 00:10:07.870
It's gonna return 0.

147
00:10:07.870 --> 00:10:11.764
So is minCoins undefined?

148
00:10:11.764 --> 00:10:12.355
Yes.

149
00:10:12.355 --> 00:10:18.411
So minCoins now equals currMinCoins,
which is 0.

150
00:10:18.411 --> 00:10:25.893
And then we go to the next loop,
which is one.

151
00:10:25.893 --> 00:10:33.107
And now we are, so we already returned
here and we're going to go here and

152
00:10:33.107 --> 00:10:38.800
then this goes super deep,
so I'm not gonna keep going.

153
00:10:39.840 --> 00:10:44.846
But the key here is if it's not undefined,
okay?

154
00:10:44.846 --> 00:10:45.880
Which it's not, it's 0.

155
00:10:45.880 --> 00:10:50.600
That's why it's important that this
is triple equals undefined, and

156
00:10:50.600 --> 00:10:52.338
not something like this.

157
00:10:52.338 --> 00:10:58.780
This is a common bug because if it's 0,
it's gonna be false e2.

158
00:10:58.780 --> 00:11:01.760
So make sure that it's
explicitly set to undefined.

159
00:11:01.760 --> 00:11:07.530
Sometimes I do negative 1 here as well
instead of checking for undefined.

160
00:11:07.530 --> 00:11:13.168
It's gonna say, if currMinCoin,
which again is just

161
00:11:13.168 --> 00:11:18.200
gonna be makeChange(5) less than minCoins.

162
00:11:19.290 --> 00:11:21.660
No, it's not.
We know that because we have to

163
00:11:21.660 --> 00:11:22.890
make all of these coins.

164
00:11:22.890 --> 00:11:25.490
So five is really gonna be five one coin.

165
00:11:25.490 --> 00:11:31.860
So this is gonna be five, so six
different coins just to make this branch.

166
00:11:31.860 --> 00:11:36.950
And that's not less than zero,
I know what you're thinking.

167
00:11:36.950 --> 00:11:38.330
Wait, but isn't it supposed to be two?

168
00:11:38.330 --> 00:11:39.386
How did we even get there?

169
00:11:41.812 --> 00:11:47.080
&gt;&gt; Bianca Gandolfo: And it is because,
&gt;&gt; Bianca Gandolfo: What,

170
00:11:47.080 --> 00:11:49.240
where did we,
how did we get there actually?

171
00:11:49.240 --> 00:11:53.340
Hm, I think I skipped a step.

172
00:11:54.620 --> 00:11:57.650
Anyway, it's always gonna be,
as we loop through here,

173
00:11:57.650 --> 00:12:02.360
it's always gonna be one less than what
it is, and at the very end, I see.

174
00:12:03.740 --> 00:12:07.980
At the very end we're gonna add one,
up the stack.

175
00:12:07.980 --> 00:12:12.840
So we're gonna add one, because we're
gonna go through here, we're gonna do all

176
00:12:12.840 --> 00:12:18.530
these calculations, but we're never gonna
set minCoins to whatever this returns.

177
00:12:18.530 --> 00:12:21.590
And that's simply because currMinCoins
is not gonna be less than zero.

178
00:12:22.730 --> 00:12:25.160
But we're still calculating all of that.

179
00:12:25.160 --> 00:12:29.880
So, we return minCoins + 1, which is 1,

180
00:12:29.880 --> 00:12:33.790
up here, and then minCoins.

181
00:12:33.790 --> 00:12:36.189
So, is currMinCoins less than minCoins?

182
00:12:37.490 --> 00:12:38.530
Right, it's 1, yes?

183
00:12:38.530 --> 00:12:42.227
So we're gonna update this, here,
this line is updating it to 1.

184
00:12:42.227 --> 00:12:45.317
And then it has to also
do all of these and

185
00:12:45.317 --> 00:12:51.230
it's gonna go all the way down here and
do a bunch of bunch of calculations.

186
00:12:52.550 --> 00:12:56.954
But it's not gonna be less, and so
it's gonna say is the current minCoins of,

187
00:12:56.954 --> 00:13:02.600
makeChange(11), gonna be less than 1?

188
00:13:02.600 --> 00:13:03.379
Definitely not.

189
00:13:03.379 --> 00:13:07.060
So then we get to the bottom,
we increment it by 1 and

190
00:13:07.060 --> 00:13:09.919
then we have our solution, which is 2.

191
00:13:09.919 --> 00:13:13.870
So this is called brute force,
and you can see why it is.

192
00:13:13.870 --> 00:13:16.595
Because it takes a lot of
time to go through and

193
00:13:16.595 --> 00:13:18.979
calculate every single combination.

194
00:13:18.979 --> 00:13:21.253
And so-
&gt;&gt; Speaker 2: [INAUDIBLE] assess the time

195
00:13:21.253 --> 00:13:24.104
complexity of something like this?

196
00:13:24.104 --> 00:13:27.110
&gt;&gt; Bianca Gandolfo: It's exponential,
yeah, yeah.

197
00:13:27.110 --> 00:13:31.310
And so, given certain data sets,
it's fine.

198
00:13:31.310 --> 00:13:32.038
You can make it work.

199
00:13:32.038 --> 00:13:37.806
However, with even moderate sized
data sets, it can be too long,

200
00:13:37.806 --> 00:13:43.059
which is why sometimes greedy
might not be the most optimal or

201
00:13:43.059 --> 00:13:50.090
correct solution, but it might be the good
enough solution, a solution for it.

202
00:13:50.090 --> 00:13:55.910
So there is our brute force

203
00:13:55.910 --> 00:14:01.733
solution, okay, yeah?

204
00:14:01.733 --> 00:14:05.785
&gt;&gt; Speaker 3: Why are you making sure
that the least number of bills is

205
00:14:05.785 --> 00:14:07.290
divisible by five?

206
00:14:08.490 --> 00:14:12.951
&gt;&gt; Bianca Gandolfo: For the different
one is not divisible by five.

207
00:14:12.951 --> 00:14:14.614
&gt;&gt; Speaker 3: For the one-
&gt;&gt; Bianca Gandolfo: The one that we just

208
00:14:14.614 --> 00:14:16.801
did, yeah, that one is any one.

209
00:14:16.801 --> 00:14:24.030
But yeah, for the original solution with
the five there, I wasn't really checking.

210
00:14:24.030 --> 00:14:24.551
I was just assuming.

211
00:14:24.551 --> 00:14:27.024
It was the assumption is all
the inputs would be the divisible by 5.

212
00:14:27.024 --> 00:14:32.080
But yeah, that's a good thing to
ask your interviewer, actually.

213
00:14:32.080 --> 00:14:33.230
Should I do a check here or

214
00:14:33.230 --> 00:14:37.190
should I just assume that the inputs
are gonna conform to my expectations?

215
00:14:37.190 --> 00:14:40.010
And they're probably gonna be like,
you should probably check for it.

216
00:14:40.010 --> 00:14:42.660
Because it's not reasonable to expect

217
00:14:42.660 --> 00:14:46.300
external data to conform to
any sort of expectations.

218
00:14:46.300 --> 00:14:48.210
So you kinda have to
check those edge cases.

219
00:14:48.210 --> 00:14:49.091
That's a good question.

