WEBVTT

1
00:00:00.080 --> 00:00:04.140
&gt;&gt; Bianca: I hope that you
took a stab at Bubble Sort.

2
00:00:04.140 --> 00:00:07.607
Let's take a look at the solution.

3
00:00:07.607 --> 00:00:12.710
So there is a few different ways
you can implement Bubble Sort.

4
00:00:12.710 --> 00:00:20.780
This first one here is a naive Bubble Sort
where we aren't optimizing for any cases.

5
00:00:20.780 --> 00:00:22.850
So with Bubble Sort,

6
00:00:22.850 --> 00:00:27.950
if you loop through an array
without swapping anything, that is

7
00:00:27.950 --> 00:00:33.130
a sign that your array is already sorted
and so you can just break from your loop.

8
00:00:33.130 --> 00:00:35.153
So, that's one optimization
of Bubble Sort.

9
00:00:35.153 --> 00:00:42.200
And for example, you can see that
this solution does not do that.

10
00:00:42.200 --> 00:00:45.500
And then we have our
optimized version here,

11
00:00:45.500 --> 00:00:49.810
where we are keeping track of the swap.

12
00:00:49.810 --> 00:00:55.560
So if there is an iteration where we don't
swap anything, then we'll just return it.

13
00:00:55.560 --> 00:00:58.670
So it's gonna short circuit any extra

14
00:01:00.050 --> 00:01:03.980
looping when there's no
more items to be swapped.

15
00:01:05.330 --> 00:01:08.580
So if you're working with
a mostly sorted list,

16
00:01:08.580 --> 00:01:11.110
Bubble Sort is actually an okay sort.

17
00:01:11.110 --> 00:01:15.830
If you're dealing with a reverse
list than it's terrible.

18
00:01:15.830 --> 00:01:18.880
So, that's Bubble Sort.

19
00:01:18.880 --> 00:01:25.770
We can check out,
&gt;&gt; Bianca: When we run it.

20
00:01:25.770 --> 00:01:31.200
You can see when we have our basic
implementation with the two loops,

21
00:01:31.200 --> 00:01:36.737
that each time it's going to run it.
&gt;&gt; Bianca: It's

22
00:01:36.737 --> 00:01:42.260
going to run the outer and
inner loops the same amount of times.

23
00:01:42.260 --> 00:01:46.706
When it's randomly out of order,
it's gonna swap it 21 times.

24
00:01:46.706 --> 00:01:49.640
When it's already ordered,
there are no swaps.

25
00:01:51.340 --> 00:01:54.220
And if it's reversed then it's a bunch.

26
00:01:56.404 --> 00:01:59.850
However when we optimize it,
when we go through it,

27
00:01:59.850 --> 00:02:02.290
we just loop through it one time.

28
00:02:02.290 --> 00:02:05.340
And so it's a linear solution
if the list is sorted.

29
00:02:07.040 --> 00:02:09.590
But again,
we think about worse case, and so

30
00:02:09.590 --> 00:02:14.320
here's our worse case which is
gonna be a quadratic solution.

31
00:02:15.470 --> 00:02:17.420
So, that's Bubble Sort.

32
00:02:17.420 --> 00:02:20.670
There's a few different other
sorts in the naive category.

33
00:02:20.670 --> 00:02:24.526
I encourage you to check them out
online and implement them for

34
00:02:24.526 --> 00:02:28.689
yourself.
&gt;&gt; Bianca: They're pretty fun.

