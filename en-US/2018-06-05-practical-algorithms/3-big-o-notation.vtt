WEBVTT

1
00:00:00.050 --> 00:00:03.640
&gt;&gt; Bianca: So
what if we had multiple expressions or

2
00:00:03.640 --> 00:00:07.125
we put them inside of a loop, like how
do we reason with a function that,

3
00:00:07.125 --> 00:00:09.820
in the function body,
has multiple expressions?

4
00:00:09.820 --> 00:00:16.056
And so the way I think about it is
if you have multiple expressions

5
00:00:16.056 --> 00:00:21.496
that are not inside of a loop,
I just add them together.

6
00:00:21.496 --> 00:00:24.089
So if we have a bunch in constant time,

7
00:00:24.089 --> 00:00:27.337
I would just say like 1
+ 1 + 1 equals three.

8
00:00:27.337 --> 00:00:32.434
However, if these things get put inside
of a loop then you start to multiple it.

9
00:00:32.434 --> 00:00:38.268
So, if you have a loop inside of a loop
right, we have n, a loop is linear, right?

10
00:00:38.268 --> 00:00:39.111
We talked about that.

11
00:00:39.111 --> 00:00:42.524
And if we have a loop inside of a loop
it's n times n, which is then quadratic.

12
00:00:42.524 --> 00:00:45.330
If we have three loops n times n times n.

13
00:00:46.340 --> 00:00:49.960
However, we also need to think about
what is going on inside of those loops.

14
00:00:49.960 --> 00:00:55.271
So if inside of the loop
we're doing like recursion,

15
00:00:55.271 --> 00:00:58.349
that can add some more things.

16
00:00:58.349 --> 00:01:04.459
And so depending on the time complexity
of that method that you're calling,

17
00:01:04.459 --> 00:01:08.320
you need to just multiply
it by n inside of a loop.

18
00:01:10.500 --> 00:01:15.290
Otherwise, just add it.
&gt;&gt; Bianca: Does that make sense?

19
00:01:16.340 --> 00:01:23.794
Questions about this?
&gt;&gt; Bianca: Okay.

20
00:01:27.561 --> 00:01:32.306
&gt;&gt; Bianca: Okay, so what about O(logn)?

21
00:01:32.306 --> 00:01:36.991
So logarithmic time, so we do not really
talk about logarithms anymore after like,I

22
00:01:36.991 --> 00:01:39.280
don't know, high school or something.

23
00:01:39.280 --> 00:01:42.956
Unless you're a scientist,
I guess logarithms are really

24
00:01:42.956 --> 00:01:47.677
important if you deal with like really
big numbers or really small numbers.

25
00:01:47.677 --> 00:01:51.766
Which is what we do if we're
analyzing large sets of data.

26
00:01:51.766 --> 00:01:56.639
I'm not gonna teach you logarithms right
now, but all you need to know really is

27
00:01:56.639 --> 00:02:00.874
that logarithmic times, so
logarithms can have a different bases.

28
00:02:00.874 --> 00:02:03.165
You can have base 10, you can have base 2.

29
00:02:03.165 --> 00:02:07.416
And you can think about,
as your input increases, the work, or

30
00:02:07.416 --> 00:02:12.540
the number of operations that need
to be done, decreases by a fraction.

31
00:02:12.540 --> 00:02:16.799
So commonly,
if you are looping through an array,

32
00:02:19.840 --> 00:02:23.560
you have a loop, and then every time
you loop, you cut your problem in half.

33
00:02:24.860 --> 00:02:26.430
That is going to be a logarithmic time.

34
00:02:26.430 --> 00:02:32.150
So every time you loop, you only have
to do work on half of your dataset.

35
00:02:32.150 --> 00:02:33.980
Or a third, or some fraction, right?

36
00:02:33.980 --> 00:02:36.340
So logarithmic can be some fraction, so.

37
00:02:36.340 --> 00:02:37.750
Base 2 will be divided by 2.

38
00:02:37.750 --> 00:02:40.490
Base 3, 3, 10, etc.

39
00:02:40.490 --> 00:02:47.010
So as it increases, the time complexity

40
00:02:47.010 --> 00:02:52.260
increases at a fraction, so it grows
really, really slow, which is good.

41
00:02:52.260 --> 00:02:56.783
Which is why it's pretty close
here to constant time, and

42
00:02:56.783 --> 00:03:01.583
it's often better than linear
time when we have a large enough

43
00:03:01.583 --> 00:03:05.481
datasets that we care about,
this kind of stuff.

44
00:03:05.481 --> 00:03:09.246
So that's what you need
to know about logn.

45
00:03:09.246 --> 00:03:12.806
Cool, and then there's also nlogn.

46
00:03:12.806 --> 00:03:19.155
Nlogn happens when you have a linear loop,
and then you're also looping and

47
00:03:19.155 --> 00:03:24.924
cutting it in half, so linear, and
then you're cutting it in half.

48
00:03:24.924 --> 00:03:29.220
And you multiply them
together to make nlogn.

49
00:03:29.220 --> 00:03:31.433
And we'll see an example of that later.

50
00:03:31.433 --> 00:03:36.647
So you'll put some examples
to these vocab terms.

51
00:03:36.647 --> 00:03:38.467
Okay, questions?
&gt;&gt; Speaker 2: So

52
00:03:38.467 --> 00:03:41.481
you mentioned different bases and
how is that determined,

53
00:03:41.481 --> 00:03:44.477
is it base 2 or base 10, is that-
&gt;&gt; Bianca: It's what have you divide it

54
00:03:44.477 --> 00:03:47.130
by, so if you are dividing your
input by 2, then it's base 2,

55
00:03:47.130 --> 00:03:49.167
if you are dividing it by 10,
it's base 10.

56
00:03:49.167 --> 00:03:53.086
Typically you're gonna see
it divided by 2, mostly.

57
00:03:53.086 --> 00:03:54.799
&gt;&gt; Speaker 2: Like a binary search?

58
00:03:54.799 --> 00:03:56.095
&gt;&gt; Bianca: Yeah exactly, binary search,

59
00:03:56.095 --> 00:03:57.829
anything where you are cutting it in half.

60
00:03:59.670 --> 00:04:07.800
Okay, so here's a little table
to help us have some reference.

61
00:04:07.800 --> 00:04:11.900
So if we're just running a statement,
returning a value, for

62
00:04:11.900 --> 00:04:16.810
example, this cost of time, any sort
of value you look up, array object.

63
00:04:17.950 --> 00:04:20.420
Variable is gonna be a constant time,
again,

64
00:04:20.420 --> 00:04:25.110
with the needle just going directly
to where it is in memory, easy.

65
00:04:25.110 --> 00:04:28.250
So loop, you can think of this as loop
that cuts a problem in half every time.

66
00:04:29.510 --> 00:04:32.030
n is just gonna loop through all of them.

67
00:04:32.030 --> 00:04:35.230
So anything where you have to like look at
everything at least once is gonna be at

68
00:04:35.230 --> 00:04:36.810
least n, right?

69
00:04:38.670 --> 00:04:43.325
So n squared there's gonna
be double nested loops and

70
00:04:43.325 --> 00:04:48.510
we have triple nested loops
of n to the 3 or n cubed.

71
00:04:48.510 --> 00:04:56.472
So just a word of caution, I'm giving you
some tools to make rough estimations here.

72
00:04:56.472 --> 00:05:00.778
This is not the full version of
how to calculate time complexity.

73
00:05:00.778 --> 00:05:05.427
Which is deeply mathematical and
really out of the scope of this workshop.

74
00:05:05.427 --> 00:05:09.428
But what you need to be
mindful of is what is n.

75
00:05:09.428 --> 00:05:13.023
Because you're gonna have a lot of
different data points in your methods,

76
00:05:13.023 --> 00:05:14.057
in your algorithms.

77
00:05:14.057 --> 00:05:17.062
And so, you wanna make sure that
you're identifying what is the dataset

78
00:05:17.062 --> 00:05:18.320
that's growing.

79
00:05:18.320 --> 00:05:21.680
And if you have more than one
dataset that has a variable length,

80
00:05:21.680 --> 00:05:23.510
you're gonna need to take
that into consideration.

81
00:05:23.510 --> 00:05:25.720
That's something that when
people get started with this,

82
00:05:25.720 --> 00:05:28.430
they just assume that n is always
gonna be the length of the array.

83
00:05:28.430 --> 00:05:32.600
Or n is always gonna be a certain input,
and it's not necessarily so.

84
00:05:32.600 --> 00:05:35.820
You need to really think about
how your code is executing and

85
00:05:35.820 --> 00:05:41.278
what is changing as your input changes.
&gt;&gt; Speaker 3: Can

86
00:05:41.278 --> 00:05:45.302
you provide a concrete example?
&gt;&gt; Bianca: Of what exactly?

87
00:05:45.302 --> 00:05:47.090
&gt;&gt; Speaker 3: What you were describing.

88
00:05:47.090 --> 00:05:47.860
&gt;&gt; Bianca: Of what I was describing.

89
00:05:47.860 --> 00:05:51.290
So like I will in future our slides.
&gt;&gt; Speaker 3: Okay.

90
00:05:51.290 --> 00:05:52.050
&gt;&gt; Bianca: Yeah, yeah, yeah.

91
00:05:54.610 --> 00:05:57.603
Yeah, and when we go through it, I'm going
to ask you, okay, what exactly is n here?

92
00:05:57.603 --> 00:06:01.491
And we're going to think about like,
what are the things that are changing?

93
00:06:01.491 --> 00:06:06.001
Because that's one of the common mistakes,
is assuming that n is

94
00:06:06.001 --> 00:06:10.686
a particular thing when it's not
necessarily a particular input.

