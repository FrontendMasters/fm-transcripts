WEBVTT

1
00:00:00.060 --> 00:00:02.110
&gt;&gt; Bianca: We're just gonna jump in.

2
00:00:02.110 --> 00:00:10.420
So, this is a three part exercise.
&gt;&gt; Bianca: Where we're going to cache.

3
00:00:10.420 --> 00:00:14.546
So my recommendation for going through
this exercise is to click this button

4
00:00:14.546 --> 00:00:16.489
where it says open it and repl.it.

5
00:00:16.489 --> 00:00:21.442
Or copy and pasting into your ID where
whatever your preferred ID maybe or

6
00:00:21.442 --> 00:00:23.540
your text editor.

7
00:00:23.540 --> 00:00:24.567
Open it and repl.it,

8
00:00:24.567 --> 00:00:27.870
maybe make an account and you can fork
it into your own repl.it account.

9
00:00:27.870 --> 00:00:32.090
And then you can just have
a copy of this for yourself.

10
00:00:32.090 --> 00:00:35.950
So our first task is to write
a function called Times10.

11
00:00:35.950 --> 00:00:40.120
It takes an argument n and
then multiplies n times 10.

12
00:00:40.120 --> 00:00:43.490
So here is an empty function for
you to fill out.

13
00:00:43.490 --> 00:00:44.600
That's our very first task.

14
00:00:45.770 --> 00:00:50.660
And then the second thing that we need
to do is we're going to cache, or

15
00:00:50.660 --> 00:00:54.980
menolize, our results.

16
00:00:54.980 --> 00:00:59.830
So you can see in our
console log example that

17
00:00:59.830 --> 00:01:05.130
the first time we do menolize
times 10 we calculate it, right?

18
00:01:05.130 --> 00:01:06.745
So we do 9 times 8, etc etc.

19
00:01:06.745 --> 00:01:11.765
Or sorry, 9 times 10 is the only
calculation, we're not doing factorial

20
00:01:11.765 --> 00:01:17.220
yet.
&gt;&gt; Bianca: So just one calculation there.

21
00:01:17.220 --> 00:01:19.120
The second time we do it
is the cache version.

22
00:01:19.120 --> 00:01:21.570
So we already have 90 saved in there.

23
00:01:21.570 --> 00:01:24.940
We don't have to recalculate 9 times 10.

24
00:01:24.940 --> 00:01:31.636
This is kind of a trivial example where
the calculation isn't very expensive.

25
00:01:31.636 --> 00:01:36.960
However, hopefully you can see the larger
picture implications of this caching.

26
00:01:36.960 --> 00:01:39.215
When the operation is very expensive,

27
00:01:39.215 --> 00:01:43.656
like factorial where you have this chain
of multiplication that you have to go

28
00:01:43.656 --> 00:01:49.160
through.
&gt;&gt; Bianca: Okay, are you guys ready?

29
00:01:49.160 --> 00:01:50.930
Any questions about the task?

30
00:01:52.280 --> 00:01:56.470
First thing we're just gonna write our
function Times10, get a little warm up,

31
00:01:56.470 --> 00:01:58.400
warm up our fingers a little bit.

32
00:01:58.400 --> 00:02:03.440
Then, we are going to write memoTimes10.

33
00:02:03.440 --> 00:02:07.586
And it's gonna reference
this Times10 function, and

34
00:02:07.586 --> 00:02:11.760
whenever it has a result
we're gonna cache it.

35
00:02:11.760 --> 00:02:13.650
It's gonna be very similar to
your bread crumbs example.

36
00:02:16.873 --> 00:02:18.560
&gt;&gt; Bianca: Do you have a question, Kevin?

37
00:02:19.690 --> 00:02:21.800
Are you sure?
&gt;&gt; Speaker 2: I just have to look at it

38
00:02:21.800 --> 00:02:22.520
longer.
&gt;&gt; Bianca: Okay.

39
00:02:22.520 --> 00:02:23.528
&gt;&gt; Speaker 2: It just looks a little

40
00:02:23.528 --> 00:02:27.049
overwhelming at first.
&gt;&gt; Bianca: Yeah, it's mostly my pro tips.

41
00:02:28.680 --> 00:02:32.950
So there's some tips in there.
&gt;&gt; Bianca: So

42
00:02:32.950 --> 00:02:37.190
the first tip is to create a function
that checks if the value for

43
00:02:37.190 --> 00:02:42.049
n has been calculated before.
&gt;&gt; Bianca: So

44
00:02:42.049 --> 00:02:45.030
here it is, you could call it memoTimes10.

45
00:02:46.120 --> 00:02:49.856
And then inside of that function, if
the value for n has not been calculated,

46
00:02:49.856 --> 00:02:56.660
then calculate it and
save the result in the cache object.

47
00:02:56.660 --> 00:03:01.740
So the next time you visit it, you can
check if it's already been calculated.

48
00:03:01.740 --> 00:03:02.990
If it's already been calculated,

49
00:03:02.990 --> 00:03:08.300
then just return that value
versus actually calculating it.

50
00:03:08.300 --> 00:03:11.690
So there's an if conditional in there
that says has it been seen already or

51
00:03:11.690 --> 00:03:13.380
has it not been seen already.

52
00:03:13.380 --> 00:03:17.003
Very similar to your bread crumbs example
where, had we seen that value before or

53
00:03:17.003 --> 00:03:21.427
had we not seen that value before?
&gt;&gt; Bianca: So

54
00:03:21.427 --> 00:03:23.100
I'm just gonna let you
guys take a stab at it.

