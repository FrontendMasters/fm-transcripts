WEBVTT

1
00:00:02.589 --> 00:00:05.295
&gt;&gt; Bianca: Our next topic is my favourite,
recursion.

2
00:00:05.295 --> 00:00:08.090
And so, at its core, recursion is
just when a function calls itself.

3
00:00:08.090 --> 00:00:11.590
However, as you may know if you've
worked with recursion before,

4
00:00:11.590 --> 00:00:13.290
there's a little more to that.

5
00:00:14.470 --> 00:00:16.100
Recursion is a technique.

6
00:00:16.100 --> 00:00:18.022
It's also a mindset.

7
00:00:18.022 --> 00:00:24.142
It's a way of approaching a problem.
&gt;&gt; Bianca: [LAUGH] With your head and

8
00:00:24.142 --> 00:00:26.300
also you have to feel it in your heart.

9
00:00:26.300 --> 00:00:29.978
So hopefully we'll wrap
our mind around it and

10
00:00:29.978 --> 00:00:35.934
then we'll start to gain some intuition
around the recursive technique.

11
00:00:35.934 --> 00:00:40.339
And this concept underlies all the rest
of this workshop, so ask questions,

12
00:00:40.339 --> 00:00:43.589
slow me down to make sure that
we're all on the same page so

13
00:00:43.589 --> 00:00:47.165
that as we move through the content,
no one gets left behind.

14
00:00:47.165 --> 00:00:50.590
Recursion is one of those
things that's pretty abstract,

15
00:00:50.590 --> 00:00:53.063
pretty tricky, so ask lots of questions.

16
00:00:53.063 --> 00:00:54.210
I really appreciate it
when people do that.

17
00:00:55.830 --> 00:00:56.330
All right.

18
00:00:58.270 --> 00:01:00.316
So why do we care about recursion?

19
00:01:00.316 --> 00:01:02.390
Why do we go through this pain?

20
00:01:02.390 --> 00:01:04.590
So it's an elegant solution.

21
00:01:04.590 --> 00:01:09.750
It can keep your code D.R.Y. which is do
not repeat yourself, which is contrasted

22
00:01:09.750 --> 00:01:15.220
with W.E.T. which stands for
we enjoy typing or write everything twice.

23
00:01:16.730 --> 00:01:19.820
That's a thing that you don't
wanna do when you're programming.

24
00:01:19.820 --> 00:01:22.410
And it's expected CS knowledge and,
believe it or

25
00:01:22.410 --> 00:01:27.900
not, it's actually an easier
solution sometimes.

26
00:01:27.900 --> 00:01:30.330
And we'll get to a point
when we get to trees and

27
00:01:30.330 --> 00:01:35.870
graphs when it's actually easier to use
recursion versus an iterative approach.

28
00:01:37.520 --> 00:01:42.393
And here's a common, I don't know.

29
00:01:42.393 --> 00:01:44.685
Here's a picture that I
like about recursion.

30
00:01:44.685 --> 00:01:45.930
So it starts with this question.

31
00:01:45.930 --> 00:01:48.152
How many people are in your organization?

32
00:01:48.152 --> 00:01:52.026
And then we break this problem into
smaller problems, and this guy says me and

33
00:01:52.026 --> 00:01:55.080
all our members of department one and
department two, etc.

34
00:01:55.080 --> 00:01:57.754
And then you talk to the guy in
department one and he says me and

35
00:01:57.754 --> 00:02:00.330
all members in project one and
project two.

36
00:02:00.330 --> 00:02:02.310
And that goes all the way down to just me.

37
00:02:02.310 --> 00:02:04.880
So we break down the problem all the way
to the simplest case, the base case,

38
00:02:04.880 --> 00:02:10.710
where it's just one person and
then you add all of that work up and

39
00:02:10.710 --> 00:02:14.490
you get your result, which is the total
number of people in the organization.

40
00:02:16.130 --> 00:02:18.643
And so that's sort of the core
concept of recursion.

