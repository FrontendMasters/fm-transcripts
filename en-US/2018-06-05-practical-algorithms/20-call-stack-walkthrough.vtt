WEBVTT

1
00:00:00.000 --> 00:00:03.120
&gt;&gt; Bianca: And the way I like to
teach recursion is through something

2
00:00:03.120 --> 00:00:04.840
called the Call Stack Game.

3
00:00:04.840 --> 00:00:06.460
And here are the rules
of the Call Stack Game.

4
00:00:06.460 --> 00:00:10.250
So the first thing is whenever
a function is called,

5
00:00:10.250 --> 00:00:14.080
you push it onto the stack,
then you execute the function body.

6
00:00:14.080 --> 00:00:18.151
The function body is like the thing that
lives between these two parentheses,

7
00:00:18.151 --> 00:00:19.137
an ES5, an ES6,

8
00:00:19.137 --> 00:00:23.208
then it gets a little crazy when people
don't have the parentheses anymore and

9
00:00:23.208 --> 00:00:27.927
then sometimes it's,
&gt;&gt; Bianca: No these aren't

10
00:00:27.927 --> 00:00:29.260
parentheses, I'm sorry.

11
00:00:29.260 --> 00:00:34.230
The brackets, and then sometimes
it's parentheses, craziness.

12
00:00:34.230 --> 00:00:37.230
But anyway you know what I
mean when I say function body.

13
00:00:37.230 --> 00:00:37.790
It's this part.

14
00:00:39.280 --> 00:00:44.230
And then you execute the function body
until another function is called, for

15
00:00:44.230 --> 00:00:47.430
example, this is a function being
called inside of a function body.

16
00:00:47.430 --> 00:00:51.970
If that happens, then you wanna pause the
current execution wherever you are, and

17
00:00:51.970 --> 00:00:53.320
go back to step one.

18
00:00:53.320 --> 00:00:56.760
And you push that function
onto the call stack, and

19
00:00:56.760 --> 00:00:58.349
you execute the new function body.

20
00:01:00.430 --> 00:01:02.250
And then you do that
until another function,

21
00:01:02.250 --> 00:01:05.690
then you keep repeating it, or
until you hit a return statement.

22
00:01:05.690 --> 00:01:10.600
If a return statement is hit, you're going
to pop the current function off the stack

23
00:01:10.600 --> 00:01:14.370
and you will resume executing where you
left off if you left off somewhere else.

24
00:01:14.370 --> 00:01:15.550
So that's the call stack game.

25
00:01:16.940 --> 00:01:17.993
We're going to do it in action,

26
00:01:17.993 --> 00:01:22.773
because maybe it's not as
&gt;&gt; Bianca: So

27
00:01:22.773 --> 00:01:29.400
here we have, I can put our rules too.

28
00:01:29.400 --> 00:01:33.690
I'll put our rules for us so
that we have a reference.

29
00:01:33.690 --> 00:01:35.380
So we have our reference on the left.

30
00:01:37.500 --> 00:01:40.882
And then on the right,

31
00:01:40.882 --> 00:01:45.334
we're gonna have our stack.

32
00:01:45.334 --> 00:01:52.330
Okay, here's our function so
as we are executing this,

33
00:01:52.330 --> 00:01:56.410
are we hitting any of the rules for

34
00:01:56.410 --> 00:02:03.817
the call stack game?
&gt;&gt; Bianca: We're

35
00:02:03.817 --> 00:02:09.130
actually not because we never
get to a function execution.

36
00:02:09.130 --> 00:02:11.530
Se we have to call this function first.

37
00:02:12.780 --> 00:02:16.770
So when we call this function
we push the function.

38
00:02:18.230 --> 00:02:18.880
Whoops.

39
00:02:18.880 --> 00:02:22.860
We push the function on to the call
stack which I wanna put over here.

40
00:02:22.860 --> 00:02:24.490
Here, let me make this JavaScript for you.

41
00:02:25.590 --> 00:02:26.220
Is this big enough?

42
00:02:28.200 --> 00:02:28.700
Okay.

43
00:02:29.780 --> 00:02:36.680
So we pushed on to the call stack and
then we execute the function body

44
00:02:36.680 --> 00:02:42.200
until we hit another function and
then we keep doing it.

45
00:02:42.200 --> 00:02:44.170
So and then we're gonna keep
track of where we left off,

46
00:02:44.170 --> 00:02:48.300
I like to use these squigglies,
and then we keep doing it.

47
00:02:48.300 --> 00:02:50.043
And then we call it here,

48
00:02:50.043 --> 00:02:55.790
gonna put my squigglies.
&gt;&gt; Bianca: That is not a squiggly.

49
00:02:55.790 --> 00:03:00.350
Put my squigglies and
we're gonna keep doing that.

50
00:03:00.350 --> 00:03:01.480
And our Call Stack Game,

51
00:03:01.480 --> 00:03:04.770
the reason that we play this game
is this how your code executes.

52
00:03:04.770 --> 00:03:08.030
This is how it's actually executing
in the order in which it's executing.

53
00:03:08.030 --> 00:03:12.310
You might see that we're in an infinite
loop here so we keep calling and

54
00:03:12.310 --> 00:03:13.000
calling and calling.

55
00:03:13.000 --> 00:03:14.230
We're not returning.

56
00:03:14.230 --> 00:03:15.380
So this is going to go forever.

57
00:03:15.380 --> 00:03:20.590
And it's never even getting
to any of these second calls.

58
00:03:20.590 --> 00:03:23.360
So we're kind of stuck in
this first frame here,

59
00:03:23.360 --> 00:03:26.170
and it's never gonna make it down here.

60
00:03:26.170 --> 00:03:30.810
And so that's really important, lesson one
of recursion and just looping in general,

61
00:03:30.810 --> 00:03:32.520
is you have to return somewhere.

62
00:03:34.220 --> 00:03:36.350
So let's return.
&gt;&gt; Speaker 2: [INAUDIBLE] an infinite loop

63
00:03:36.350 --> 00:03:39.110
then, and
browser will just say I'm out of memory.

64
00:03:39.110 --> 00:03:39.680
&gt;&gt; Bianca: Yeah, yeah, so

65
00:03:39.680 --> 00:03:43.940
when you hear the stack overflow,
here's our stack.

66
00:03:45.030 --> 00:03:48.820
If we keep going it will run out of
memory and it overflows and it crashes.

67
00:03:48.820 --> 00:03:50.420
That's a stack overflow.

68
00:03:50.420 --> 00:03:53.540
The next thing we might
do to make this better.

69
00:03:53.540 --> 00:03:55.180
We need to throw a return somewhere.

70
00:03:55.180 --> 00:03:55.680
Why not?

71
00:03:55.680 --> 00:03:56.600
We'll just return here.

72
00:03:56.600 --> 00:03:58.160
Let's see what happens.

73
00:03:58.160 --> 00:03:59.240
Let's play the Call Stack Game again.

74
00:04:00.650 --> 00:04:02.480
So we call this function.

75
00:04:02.480 --> 00:04:04.990
We're going to put it on our stack.

76
00:04:04.990 --> 00:04:06.416
Great.
And then we return.

77
00:04:06.416 --> 00:04:08.532
Call me.

78
00:04:08.532 --> 00:04:12.350
So first this is actually
an important point.

79
00:04:12.350 --> 00:04:13.950
So first we have to call the function.

80
00:04:19.000 --> 00:04:19.540
And.

81
00:04:20.550 --> 00:04:26.740
Then it's gonna keep calling it forever.

82
00:04:26.740 --> 00:04:33.574
So even though we have a return here,
it 's still not quite solving our problem.

83
00:04:33.574 --> 00:04:38.560
So what we need to do is find a way,
for recursion we really want to be

84
00:04:38.560 --> 00:04:43.564
able to loop multiple times,
meet some base case, and return up.

85
00:04:43.564 --> 00:04:48.090
Once we get through our questions here.

86
00:04:48.090 --> 00:04:51.930
Once we get to one person,
we wanna be able to return up and

87
00:04:51.930 --> 00:04:56.180
count all of that together, but
let's look at another example.

88
00:04:56.180 --> 00:05:03.663
See what this is doing.
&gt;&gt; Bianca: So

89
00:05:03.663 --> 00:05:06.885
we're gonna keep doing our Call Stack
Game, so we have a tracker here,

90
00:05:06.885 --> 00:05:08.291
it's a little bit different.

91
00:05:08.291 --> 00:05:11.650
All right, so we need to call it again.

92
00:05:13.970 --> 00:05:16.061
And then we're gonna
pop that function body

93
00:05:16.061 --> 00:05:21.036
here.
&gt;&gt; Bianca: Let's put our global scope

94
00:05:21.036 --> 00:05:22.050
to keep track.

95
00:05:23.500 --> 00:05:24.860
So we're gonna increment this.

96
00:05:26.240 --> 00:05:27.130
This is now one.

97
00:05:28.310 --> 00:05:30.340
Is tracker three, equal to three?

98
00:05:30.340 --> 00:05:31.650
No, so we're not there.

99
00:05:31.650 --> 00:05:33.320
We're gonna keep calling.

100
00:05:33.320 --> 00:05:37.050
So we're gonna call, so
we hit a function location.

101
00:05:37.050 --> 00:05:41.887
We are going to,
&gt;&gt; Bianca: And

102
00:05:41.887 --> 00:05:44.560
I'm gonna mark this because this
is kind of like a global scope.

103
00:05:44.560 --> 00:05:45.900
This is our call stack.

104
00:05:50.040 --> 00:05:50.880
Okay.

105
00:05:50.880 --> 00:05:54.040
So then,
we're going to increment tracker again.

106
00:05:55.110 --> 00:05:56.990
Now it's two.

107
00:05:56.990 --> 00:06:00.830
This doesn't help us,
gonna go call it again.

108
00:06:01.850 --> 00:06:04.600
Increment tracker, it is now three.

109
00:06:04.600 --> 00:06:11.330
We're gonna hit this conditional, and
we're gonna return this value loops.

110
00:06:12.620 --> 00:06:14.290
So again, we hit the return statement.

111
00:06:14.290 --> 00:06:15.000
What do we do?

112
00:06:15.000 --> 00:06:16.539
We have to pop this off the stack.

113
00:06:17.580 --> 00:06:21.190
When we need to continue where
we left off, which was here.

114
00:06:22.850 --> 00:06:24.630
I should have put this.

115
00:06:25.750 --> 00:06:30.494
So, this function
invocation returns loops.

116
00:06:35.349 --> 00:06:36.384
&gt;&gt; Bianca: However,

117
00:06:36.384 --> 00:06:40.330
This function has an implicit return.

118
00:06:40.330 --> 00:06:43.120
When we reach the end of the body,
the function has an implicit return.

119
00:06:43.120 --> 00:06:45.550
It's going to return undefined.

120
00:06:45.550 --> 00:06:50.401
So that's an important
thing to note is that now

121
00:06:50.401 --> 00:06:54.050
this is going to return undefined.

122
00:06:55.180 --> 00:06:59.392
So if we had wanted loops
to be pushed back through

123
00:06:59.392 --> 00:07:04.084
the call stack.
&gt;&gt; Bianca: How might we do

124
00:07:04.084 --> 00:07:08.494
that?
&gt;&gt; Bianca: Let's go back to how we had it.

125
00:07:16.303 --> 00:07:18.560
&gt;&gt; Bianca: Okay, so we return loops.

126
00:07:18.560 --> 00:07:19.060
Here.

127
00:07:20.460 --> 00:07:24.810
So this one was loops, which is
probably what you wanna do, right?

128
00:07:24.810 --> 00:07:26.380
You wanna keep your data.

129
00:07:28.590 --> 00:07:29.640
Now let me pop this off.

130
00:07:30.870 --> 00:07:35.860
So what might we wanna do so that we don't
lose, we don't jump to an implicit return?

131
00:07:37.120 --> 00:07:38.010
What's the other option?

132
00:07:39.200 --> 00:07:42.630
Implicit opposite is?
&gt;&gt; Speaker 2: Explicit.

133
00:07:42.630 --> 00:07:43.230
&gt;&gt; Bianca: Explict.

134
00:07:43.230 --> 00:07:46.350
So we're gonna explicitly
return some value.

135
00:07:46.350 --> 00:07:48.080
What is that value?

136
00:07:48.080 --> 00:07:51.470
The value that this function
return which is loops.

137
00:07:51.470 --> 00:07:54.750
So how we do that is we just
stick a return in there.

138
00:07:54.750 --> 00:07:58.979
So now we just assume that
all of these are the same.

139
00:08:00.210 --> 00:08:05.130
So now when this returns loops,
when this function returns loops,

140
00:08:05.130 --> 00:08:07.770
this function now also returns loops so
we can pop it off.

141
00:08:09.320 --> 00:08:10.880
And this is gonna be returning loops.

142
00:08:15.510 --> 00:08:21.440
And then we pop it off which means down

143
00:08:21.440 --> 00:08:27.027
here this will also return loops.

144
00:08:27.027 --> 00:08:31.100
So that's the way that you
kind of trace the data from

145
00:08:31.100 --> 00:08:35.610
some base case and
get it out of each recursive call.

146
00:08:35.610 --> 00:08:38.370
Do you want me to go through it again or
do you guys feel solid?

147
00:08:40.010 --> 00:08:42.426
So, can I see thumbs on
how we got loops out?

148
00:08:46.690 --> 00:08:48.213
&gt;&gt; Speaker 3: Doesn't it run forever,

149
00:08:48.213 --> 00:08:48.870
though?

150
00:08:48.870 --> 00:08:51.370
Am I missing?
&gt;&gt; Bianca: It doesn't run forever,

151
00:08:51.370 --> 00:08:53.600
because we have a return statement.

152
00:08:53.600 --> 00:08:56.600
Once you hit a return statement
it's gonna exit the function.

153
00:08:56.600 --> 00:09:01.790
So, we hit this return here.

154
00:09:01.790 --> 00:09:06.130
Once this conditional is met this is what
we would call in recursion our base case

155
00:09:06.130 --> 00:09:09.970
which is where the very bottom of where we

156
00:09:09.970 --> 00:09:15.540
want to recurse to, and
this isn't doing anything very important,

157
00:09:15.540 --> 00:09:20.530
this is just saying just recurse
three times and then return loops.

158
00:09:20.530 --> 00:09:21.300
This is what this is doing.

159
00:09:21.300 --> 00:09:29.235
It's not doing anything special and so
you can imagine that you can figure out.

160
00:09:29.235 --> 00:09:30.870
And this is how we reach
our base case right?

161
00:09:30.870 --> 00:09:33.690
So we're incrementing
tracker each time we loop,

162
00:09:33.690 --> 00:09:35.210
we're getting closer to our base case.

163
00:09:35.210 --> 00:09:39.660
If we didn't do that and
we never got tracker to equal three,

164
00:09:39.660 --> 00:09:42.900
then we would also enter into
an infinite loop as well.

165
00:09:42.900 --> 00:09:46.108
Have a question?
&gt;&gt; Speaker 4: Yeah, so if tracker reaches

166
00:09:46.108 --> 00:09:51.670
3, we hit the return statement and
we go back up pop stuff up the stack.

167
00:09:51.670 --> 00:09:54.690
Then if callMe gets called again and

168
00:09:54.690 --> 00:09:59.000
tracker hasn't been reset do we just then
have an infinite loop and go forever,

169
00:09:59.000 --> 00:10:03.208
because it's never gonna be equal the 3
again if every time we go through it's

170
00:10:03.208 --> 00:10:04.540
gonna increment again.
&gt;&gt; Bianca: Mm-hm,

171
00:10:04.540 --> 00:10:09.056
how can we fix that?
&gt;&gt; Speaker 4: We could do it greater than

172
00:10:09.056 --> 00:10:11.960
or equal to 3.
&gt;&gt; Bianca: Yeah, we could do that.

173
00:10:11.960 --> 00:10:14.641
Or you can just reset it here.

174
00:10:19.465 --> 00:10:23.480
&gt;&gt; Bianca: 0
&gt;&gt; Bianca: So

175
00:10:23.480 --> 00:10:25.770
then next time we'll just reset it.

176
00:10:25.770 --> 00:10:27.600
However, this is dangerous.

177
00:10:27.600 --> 00:10:33.990
This is why we don't do globals like this
because you can create a race-condition.

178
00:10:35.070 --> 00:10:36.990
Weird things can happen.

179
00:10:36.990 --> 00:10:37.980
So just be careful.

180
00:10:39.350 --> 00:10:40.180
In most scenarios,

181
00:10:40.180 --> 00:10:44.704
you're not gonna be relying on a global
for any kind of loop like this.

182
00:10:44.704 --> 00:10:46.660
Mm-hm.
&gt;&gt; Speaker 5: Can

183
00:10:46.660 --> 00:10:51.280
you do an example where you actually
use the time in the recursion,

184
00:10:51.280 --> 00:10:53.427
how does it work?
&gt;&gt; Bianca: Yeah, sure.

185
00:11:02.736 --> 00:11:05.368
&gt;&gt; Bianca: Let's do one of these guys,

186
00:11:05.368 --> 00:11:09.956
this is fun.
&gt;&gt; Bianca: Okay.

187
00:11:13.451 --> 00:11:14.403
&gt;&gt; Bianca: So we're gonna play our

188
00:11:14.403 --> 00:11:18.620
game.
&gt;&gt; Bianca: We're

189
00:11:18.620 --> 00:11:20.740
going to call our function.

190
00:11:20.740 --> 00:11:23.250
We're gonna put it on to the call stack.

191
00:11:23.250 --> 00:11:24.060
What is arg?

192
00:11:24.060 --> 00:11:28.909
Arg in this case is any time.
&gt;&gt; Bianca: We're

193
00:11:28.909 --> 00:11:30.007
gonna increment our tracker.

194
00:11:30.007 --> 00:11:32.255
This is now one.

195
00:11:32.255 --> 00:11:35.500
This is false.
&gt;&gt; Bianca: What is?

196
00:11:35.500 --> 00:11:37.234
Or actually arg is this case, I'm sorry,

197
00:11:37.234 --> 00:11:40.891
is undefined.
&gt;&gt; Bianca: Right,

198
00:11:40.891 --> 00:11:43.330
because we're not passing
anything right here.

199
00:11:44.640 --> 00:11:46.970
So we start as undefined.

200
00:11:46.970 --> 00:11:50.790
However, the second time we call it,
we give it a value.

201
00:11:52.460 --> 00:11:57.418
But let's put our little line here.
&gt;&gt; Bianca: So arg,

202
00:11:57.418 --> 00:12:03.700
at this point is, let me put in the next
line so you can see it, is anytime.

203
00:12:04.910 --> 00:12:10.220
We're gonna increment tracker.
&gt;&gt; Bianca: Still not three.

204
00:12:11.920 --> 00:12:14.060
Calling it again,
we're going to push it on the stack.

205
00:12:16.150 --> 00:12:18.780
Again this is still anytime.

206
00:12:20.820 --> 00:12:25.210
Increment tracker is now three,
which is our base case.

207
00:12:25.210 --> 00:12:29.839
We're gonna reset tracker
&gt;&gt; Bianca: And

208
00:12:29.839 --> 00:12:37.400
then we're going to return loops + arg,
which is gonna be loops anytime.

209
00:12:40.320 --> 00:12:44.680
Hold on, let's get to the,
so this is where we were.

210
00:12:44.680 --> 00:12:50.320
So let's just pop off properly so
that we can see how it loops through.

211
00:12:50.320 --> 00:12:53.310
I am putting this here from
where we kinda left off.

212
00:12:55.780 --> 00:12:59.060
So, we hit this return.

213
00:12:59.060 --> 00:13:00.490
Actually we didn't do this.

214
00:13:00.490 --> 00:13:05.520
We never get to here,
cuz we get inside of here, we return.

215
00:13:05.520 --> 00:13:07.400
This is what we're returning.

216
00:13:07.400 --> 00:13:08.600
So let's pop this off.

217
00:13:09.970 --> 00:13:15.888
This function is going to be
evaluated to what this returns which,

218
00:13:15.888 --> 00:13:24.287
again, let's put this actual value.
&gt;&gt; Bianca: And

219
00:13:24.287 --> 00:13:29.348
then, so this evaluates to that so
it's essentially saying do that.

220
00:13:29.348 --> 00:13:32.270
And we're gonna return again, so

221
00:13:32.270 --> 00:13:37.750
we pop this off.
&gt;&gt; Bianca: This returns this value.

222
00:13:39.570 --> 00:13:40.960
We pop this off.

223
00:13:40.960 --> 00:13:47.500
This function is just gonna return,
&gt;&gt; Bianca: Down here.

224
00:13:47.500 --> 00:13:52.430
So that's how you can
pass an argument through.

225
00:13:54.360 --> 00:13:58.990
You can also start with
passing one here as well.

226
00:14:00.080 --> 00:14:01.580
But we'll go through more examples.

227
00:14:01.580 --> 00:14:04.823
How do you guys feel about
the Call Stack Game?

228
00:14:07.946 --> 00:14:09.332
&gt;&gt; Bianca: Working for you?

229
00:14:09.332 --> 00:14:10.945
&gt;&gt; Speaker 3: Can you just repeat one more

230
00:14:10.945 --> 00:14:14.677
time why we went from call me
anytime to return call me anytime?

231
00:14:14.677 --> 00:14:15.749
&gt;&gt; Bianca: Sure.

232
00:14:15.749 --> 00:14:20.405
The reason we did that was
because in this case the very

233
00:14:20.405 --> 00:14:25.360
first time we returned,
we returned a value.

234
00:14:25.360 --> 00:14:29.720
However, once we evaluated
the next function on the stack,

235
00:14:29.720 --> 00:14:31.350
it didn't return anything.

236
00:14:31.350 --> 00:14:37.210
It just was calling a function and so
what happens automatically when you

237
00:14:37.210 --> 00:14:41.100
don't have an explicit return statement in
the function, it just returns undefined.

238
00:14:41.100 --> 00:14:46.150
So the subsequent returns up the stack
we're just returning undefined.

239
00:14:46.150 --> 00:14:50.030
And so we were losing our value
that we returned initially.

240
00:14:50.030 --> 00:14:54.020
So that's why whatever this returns,
we want to also return it.

241
00:14:55.200 --> 00:14:58.228
Otherwise it will just return undefined

242
00:14:58.228 --> 00:15:02.308
implicitly.
&gt;&gt; Speaker 4: So

243
00:15:02.308 --> 00:15:05.617
essentially the purpose of this recursion
is to continue doing the loops until

244
00:15:05.617 --> 00:15:07.821
a certain condition is met and
then break out of it and

245
00:15:07.821 --> 00:15:09.270
return that value.
&gt;&gt; Bianca: Yep,

246
00:15:09.270 --> 00:15:11.250
which is what every loop does right?

247
00:15:11.250 --> 00:15:14.630
So recursion is just a super
cool way of looping.

248
00:15:15.650 --> 00:15:17.980
Hate to break it to you,
that's all it really is.

249
00:15:19.530 --> 00:15:20.800
Makes you feel cooler.

