WEBVTT

1
00:00:00.060 --> 00:00:03.380
&gt;&gt; Bianca: Let's talk about some native
JavaScript methods, expressions,

2
00:00:03.380 --> 00:00:08.190
operations that you see, and talk about
what the time complexity of each one is.

3
00:00:08.190 --> 00:00:11.190
So what's a method?

4
00:00:11.190 --> 00:00:13.170
Think about array methods or?

5
00:00:13.170 --> 00:00:17.652
What's that?
&gt;&gt; [INAUDIBLE]

6
00:00:17.652 --> 00:00:19.281
&gt;&gt; Bianca: Yeah, that was a little

7
00:00:19.281 --> 00:00:20.831
complicated though.

8
00:00:20.831 --> 00:00:21.855
We'll save that one.

9
00:00:21.855 --> 00:00:23.470
That's another good question.
&gt;&gt; Speaker 2: For

10
00:00:23.470 --> 00:00:24.425
loop.
&gt;&gt; Bianca: Hm?

11
00:00:24.425 --> 00:00:25.819
&gt;&gt; Speaker 2: Pop.

12
00:00:25.819 --> 00:00:26.399
&gt;&gt; Bianca: Who said for

13
00:00:26.399 --> 00:00:26.960
loop?
&gt;&gt; Speaker 2: For

14
00:00:26.960 --> 00:00:28.910
loop.
&gt;&gt; Bianca: Yeah, so for loop, we talked

15
00:00:28.910 --> 00:00:30.582
about that a little bit, is what?

16
00:00:30.582 --> 00:00:34.044
&gt;&gt; [COUGH]
&gt;&gt; Bianca: Linear,

17
00:00:34.044 --> 00:00:35.700
right?
&gt;&gt; Speaker 2: Yeah.

18
00:00:35.700 --> 00:00:39.040
&gt;&gt; Bianca: So if you have a for loop, it's

19
00:00:39.040 --> 00:00:43.882
whatever the ending case,
which is like, usually, you say i &lt; n,

20
00:00:43.882 --> 00:00:48.440
and whatever n is, that is going
to be the number of operations,

21
00:00:48.440 --> 00:00:51.860
the number of times that loop executes.

22
00:00:51.860 --> 00:00:54.900
Good, and then, what did you say, Matthew?
&gt;&gt; Speaker 3: Pop.

23
00:00:54.900 --> 00:00:56.618
&gt;&gt; Bianca: Pop, yeah, so

24
00:00:56.618 --> 00:00:59.659
pop is where we remove.

25
00:00:59.659 --> 00:01:03.880
I should do,
&gt;&gt; Bianca: Where we have some array, 1,

26
00:01:03.880 --> 00:01:04.417
2, 3.

27
00:01:04.417 --> 00:01:10.678
And we say array.pop,
which just removes the last one,

28
00:01:10.678 --> 00:01:16.820
and then, my goodness,
&gt;&gt; Bianca: 1, 2.

29
00:01:16.820 --> 00:01:21.336
So pop is a constant time operation,

30
00:01:21.336 --> 00:01:27.309
because you're always
taking off the last one,

31
00:01:27.309 --> 00:01:32.132
always taking off the last one, cool?

32
00:01:32.132 --> 00:01:32.960
What are some other ones?

33
00:01:32.960 --> 00:01:34.332
So we have pop.
&gt;&gt; Speaker 4: For

34
00:01:34.332 --> 00:01:40.180
each as complicated as the map?
&gt;&gt; Bianca: Well, I guess, so

35
00:01:40.180 --> 00:01:45.750
the thing to know about for each in map is
that under the hood, they're just loops.

36
00:01:45.750 --> 00:01:48.260
So it's very similar to the for loop.

37
00:01:48.260 --> 00:01:53.120
It just gets a little hairy, because
you're passing a callback in there, and

38
00:01:53.120 --> 00:01:58.420
based on what is inside of that callback,
it can vary the number of operations.

39
00:01:58.420 --> 00:02:02.590
So if in your for each, you pass
a function that also has a loop in it,

40
00:02:02.590 --> 00:02:05.160
then it's gonna change.

41
00:02:05.160 --> 00:02:09.147
So that's why it's a little complicated
because there are some other factors.

42
00:02:09.147 --> 00:02:11.111
Pop will always just pop off the last one,

43
00:02:11.111 --> 00:02:16.046
and,
&gt;&gt; Bianca: There's no other variables

44
00:02:16.046 --> 00:02:20.320
to consider.
&gt;&gt; Bianca: Okay, what else?

45
00:02:20.320 --> 00:02:23.333
How about Patrick?
&gt;&gt; Speaker 2: Let's say we wanna get

46
00:02:23.333 --> 00:02:25.370
the first value array.

47
00:02:25.370 --> 00:02:29.930
Can you do a for
loop that just always gets the first value

48
00:02:29.930 --> 00:02:32.193
with that cuz it would be constant?
&gt;&gt; Bianca: Well so

49
00:02:32.193 --> 00:02:34.820
you wouldn't actually need to use a for
loop.

50
00:02:34.820 --> 00:02:38.032
If you wanna get the first one,
you can always just reference the zero.

51
00:02:38.032 --> 00:02:44.882
And this would be constant, so just
like in our min max price range example,

52
00:02:44.882 --> 00:02:50.390
when we had the sorted list,
just go directly to the index.

53
00:02:50.390 --> 00:02:54.197
And you can imagine,
if you're a visual person,

54
00:02:54.197 --> 00:02:57.928
that there's this array
that exists in memory.

55
00:02:57.928 --> 00:03:03.524
And then there's some mathematical
formula to calculate where your

56
00:03:03.524 --> 00:03:08.550
needle that's gonna read it is
gonna land in your hand drive.

57
00:03:08.550 --> 00:03:10.540
This is not exactly how it works, but

58
00:03:10.540 --> 00:03:13.010
you can kind of imagine that's
why it's constant time.

59
00:03:13.010 --> 00:03:16.800
So, when you have an index,

60
00:03:16.800 --> 00:03:20.490
you can imagine that there's some
formula that's two plus two or

61
00:03:20.490 --> 00:03:25.110
two plus index multiplied by the memory
address, something like that.

62
00:03:25.110 --> 00:03:29.840
It knows exactly where to go, it doesn't
have to search through all of your

63
00:03:29.840 --> 00:03:32.470
data in your hard drive
to get to where it is.

64
00:03:32.470 --> 00:03:35.874
Or actually, in this case, it's in memory

65
00:03:35.874 --> 00:03:39.379
because this is not a database.
&gt;&gt; Bianca: So

66
00:03:39.379 --> 00:03:44.494
that's why,
&gt;&gt; Bianca: This is constant time,

67
00:03:44.494 --> 00:03:45.106
and this.

68
00:03:45.106 --> 00:03:49.950
You don't need to start at array 0 to get
to array 1, it just goes directly there.

69
00:03:49.950 --> 00:03:55.895
I just imagine this big needle
reaching in and pulling, there it is.

70
00:03:55.895 --> 00:03:59.230
But that's just my active imagination.

71
00:04:01.780 --> 00:04:06.377
Similarly with an object,
so if we have some

72
00:04:06.377 --> 00:04:11.490
object,
&gt;&gt; Bianca: Right?

73
00:04:11.490 --> 00:04:12.789
And we're doing a property lookup.

74
00:04:12.789 --> 00:04:17.452
You can imagine,
&gt;&gt; Bianca: That it's doing the same

75
00:04:17.452 --> 00:04:21.951
thing.
&gt;&gt; Bianca: So

76
00:04:21.951 --> 00:04:27.117
it has some formula, and it just goes
[SOUND] right to where it needs to go,

77
00:04:27.117 --> 00:04:32.126
constant time.
&gt;&gt; Bianca: All right,

78
00:04:32.126 --> 00:04:37.913
what about this?
&gt;&gt; Bianca: As your inputs grow,

79
00:04:37.913 --> 00:04:42.626
1+2 will always be 1+2,
assuming that your input isn't,

80
00:04:42.626 --> 00:04:45.810
these numbers aren't variables, right?

81
00:04:47.260 --> 00:04:53.700
Or actually even if it was, 1+n is always
just gonna be one operation, right?

82
00:04:53.700 --> 00:04:57.919
Just addition.
&gt;&gt; Bianca: Okay, so

83
00:04:57.919 --> 00:05:04.022
math is constant,
our lookups are constant.

84
00:05:04.022 --> 00:05:06.274
What else?

85
00:05:06.274 --> 00:05:10.162
Saving to an object an array, you can
think of it as constant in JavaScript.

86
00:05:16.583 --> 00:05:18.492
&gt;&gt; Bianca: Any other common methods,

87
00:05:18.492 --> 00:05:20.568
expressions, operations?

88
00:05:20.568 --> 00:05:24.462
We talked about the greater than or
less than, that's a constant time

89
00:05:24.462 --> 00:05:29.671
operation.
&gt;&gt; Bianca: So

90
00:05:29.671 --> 00:05:31.929
when you're looking
through your algorithm,

91
00:05:31.929 --> 00:05:35.541
you can kind of spot these things and
think about, okay, as my input grows,

92
00:05:35.541 --> 00:05:38.599
and you need to also pay attention
to what is your input, right?

93
00:05:38.599 --> 00:05:40.696
Cuz there could be a few
different variables.

94
00:05:40.696 --> 00:05:43.033
You can have a list and
you can have a number.

95
00:05:43.033 --> 00:05:46.220
And we'll talk about that when
we go through some examples.

96
00:05:46.220 --> 00:05:50.250
But as your input grows,
how is it gonna change, right?

97
00:05:50.250 --> 00:05:54.309
So if you have an array and you pop
one off, if the array is length 3 or

98
00:05:54.309 --> 00:05:59.030
the array is length 1,000, it's always
just gonna pop off the last one.

99
00:05:59.030 --> 00:06:02.310
That's just constant,
it's not changing when your input changes.

100
00:06:02.310 --> 00:06:07.680
However, if we do something

101
00:06:07.680 --> 00:06:13.765
like,
&gt;&gt; Bianca: Unshift or, why am I blanking?

102
00:06:13.765 --> 00:06:15.983
What's the other one, where you-

103
00:06:15.983 --> 00:06:17.407
&gt;&gt; Speaker 2: Push?

104
00:06:17.407 --> 00:06:19.622
&gt;&gt; Speaker 3: Slice?
&gt;&gt; Bianca: No,

105
00:06:21.360 --> 00:06:22.071
&gt;&gt; Bianca: No.

106
00:06:22.071 --> 00:06:22.951
&gt;&gt; Speaker 2: Splice?

107
00:06:22.951 --> 00:06:24.801
&gt;&gt; Bianca: No, so when you put something

108
00:06:24.801 --> 00:06:27.990
on or take something off
the front of an array, so-

109
00:06:27.990 --> 00:06:29.024
&gt;&gt; Speaker 2: Shift and unshift.

110
00:06:29.024 --> 00:06:31.495
&gt;&gt; Bianca: Okay, shift and unshift,

111
00:06:31.495 --> 00:06:35.363
what the difference
there is that shift and

112
00:06:35.363 --> 00:06:39.349
unshift are not constant time operations.

113
00:06:39.349 --> 00:06:43.570
So if we're starting with 1, 2, 3,
we wanna shift a 0 on the front.

114
00:06:45.510 --> 00:06:50.282
We have to first,
&gt;&gt; Bianca: So we put the zero here but

115
00:06:50.282 --> 00:06:53.175
then we have to move the 1 to the next
one, then we need to move the 2

116
00:06:53.175 --> 00:06:55.887
to the next one, and then we need
to move the 3 to the next one.

117
00:06:55.887 --> 00:07:02.302
And so, if our array is size 3,
we have to move things over 3 times.

118
00:07:02.302 --> 00:07:06.890
For array size 100,
we have to move things over 100 times.

119
00:07:06.890 --> 00:07:11.828
So what is the time complexity of that?
&gt;&gt; Speaker 2: Is

120
00:07:11.828 --> 00:07:14.014
that actually how they do it?
&gt;&gt; Bianca: Mm-hm.

121
00:07:14.014 --> 00:07:14.514
&gt;&gt; Speaker 2: Okay.

122
00:07:14.514 --> 00:07:15.428
&gt;&gt; Bianca: What is it?

123
00:07:15.428 --> 00:07:16.640
&gt;&gt; Speaker 4: Quadratic.

124
00:07:16.640 --> 00:07:17.752
&gt;&gt; Bianca: Close, so

125
00:07:17.752 --> 00:07:22.208
if the length of the array is 3, it's 3.

126
00:07:22.208 --> 00:07:24.150
If the length of the array is 100,
it's 100.

127
00:07:24.150 --> 00:07:25.146
&gt;&gt; Speaker 2: Linear.

128
00:07:25.146 --> 00:07:27.630
&gt;&gt; Bianca: Linear, so it's just n.

129
00:07:27.630 --> 00:07:31.682
So if n is our length of the array,
it's gonna be linear.

130
00:07:31.682 --> 00:07:32.787
Mm-hm?
&gt;&gt; Speaker 2: So then,

131
00:07:32.787 --> 00:07:37.641
kinda a native method they use is kind
of a combination of both of these that

132
00:07:37.641 --> 00:07:38.910
you talked about?

133
00:07:38.910 --> 00:07:43.840
What about something like reduce that
has all of these different, can expand,

134
00:07:43.840 --> 00:07:46.428
but then also you're contracting

135
00:07:46.428 --> 00:07:48.760
through addition as well?
&gt;&gt; Bianca: Yeah,

136
00:07:48.760 --> 00:07:51.650
so that's another one
that takes a call back.

137
00:07:51.650 --> 00:07:57.110
And the time complexity of reduce,
in its core,

138
00:07:57.110 --> 00:08:00.340
it's really just a loop that's calling
a function with some arguments.

139
00:08:00.340 --> 00:08:01.800
So that's linear time.

140
00:08:01.800 --> 00:08:04.350
But when you're taking a callback,
you need to consider

141
00:08:04.350 --> 00:08:08.150
the time complexity of that function
that you're passing in to a reduce.

142
00:08:08.150 --> 00:08:12.485
So if you have a constant time operation
in reduce, like the classic example of

143
00:08:12.485 --> 00:08:16.839
reduce is adding two numbers together or
something, that's constant time.

144
00:08:16.839 --> 00:08:20.050
So that's really not gonna change
anything, so it'll still be linear.

145
00:08:20.050 --> 00:08:23.830
But if you're doing something more
complicated inside of that call back,

146
00:08:23.830 --> 00:08:26.530
it can increase the time
complexity significantly.

147
00:08:28.790 --> 00:08:31.690
So, yeah, good question.

148
00:08:31.690 --> 00:08:32.483
These are good questions.

149
00:08:32.483 --> 00:08:37.277
And no one's ever asked me about, I guess
the last time I taught this class, map and

150
00:08:37.277 --> 00:08:40.610
reduce and for
each weren't that popular yet.

151
00:08:40.610 --> 00:08:41.460
So this is good.

152
00:08:41.460 --> 00:08:46.185
This is good.
&gt;&gt; Speaker 2: Someone online asked about

153
00:08:46.185 --> 00:08:47.702
sort.
&gt;&gt; Bianca: Mm, okay, so

154
00:08:47.702 --> 00:08:48.900
that's a good question.

155
00:08:48.900 --> 00:08:55.950
So sort under the hood is,
it really depends.

156
00:08:55.950 --> 00:08:57.350
Dang it, this is a hard question.

157
00:08:57.350 --> 00:09:02.412
We could just say that it's n log n, which
is something that we're gonna talk about

158
00:09:02.412 --> 00:09:07.556
when we get to sorting.
&gt;&gt; Bianca: I

159
00:09:07.556 --> 00:09:08.809
don't wanna put all my cards on the table.

