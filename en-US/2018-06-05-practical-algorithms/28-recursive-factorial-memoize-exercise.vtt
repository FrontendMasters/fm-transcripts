WEBVTT

1
00:00:00.106 --> 00:00:03.180
&gt;&gt; Bianca: So we're gonna hop into
our next exercise which is going

2
00:00:03.180 --> 00:00:06.110
to be you writing your own
recursive factorial method.

3
00:00:07.620 --> 00:00:13.100
You can reference the past
slides if you'd like on

4
00:00:13.100 --> 00:00:17.930
factorial, but
try not to copy the recursive solution.

5
00:00:17.930 --> 00:00:21.410
I recommend looking at the iterative
solution, maybe looking at the slide where

6
00:00:21.410 --> 00:00:26.890
it's like, this is the pattern, but not
copying directly the factorial solution.

7
00:00:26.890 --> 00:00:30.840
You might find that hearing
me talk about it is,

8
00:00:30.840 --> 00:00:36.400
feels very different than
actually implementing it.

9
00:00:36.400 --> 00:00:41.230
So I wanna give you that experience
of the two differences there.

10
00:00:41.230 --> 00:00:43.580
There is a false sense of progress,

11
00:00:43.580 --> 00:00:48.520
when you hear someone talking about
a concept, especially around programming.

12
00:00:48.520 --> 00:00:54.410
And it feels like, I got it,
the way she explains seems like, easy.

13
00:00:54.410 --> 00:00:59.020
But it's a whole different experience when
you have to implement it from scratch, and

14
00:00:59.020 --> 00:01:01.690
you need to reason through
every line of code.

15
00:01:01.690 --> 00:01:06.400
So my advice is to not write some code,
run it.

16
00:01:06.400 --> 00:01:10.890
Write some code, run it, and see what
happens, but instead make sure that you're

17
00:01:10.890 --> 00:01:14.290
paying attention to every line
of code that you're writing.

18
00:01:14.290 --> 00:01:16.120
Maybe even play the call
set game with yourself.

19
00:01:16.120 --> 00:01:18.870
I actually do that when I get stuck
on something, especially recursion.

20
00:01:18.870 --> 00:01:21.150
I play the call set game with myself,

21
00:01:21.150 --> 00:01:25.728
just to see that I'm reasoning correctly
about how my code is executing.

22
00:01:25.728 --> 00:01:29.818
So, with Task 1 do that, and
then, if you have time, and

23
00:01:29.818 --> 00:01:34.408
for our more advanced people,
you can combine this with your memo

24
00:01:34.408 --> 00:01:39.340
function that we wrote earlier, and
you can memoize your factorial.

25
00:01:39.340 --> 00:01:43.200
Cuz the factorial is doing
a lot of repeated calculations.

26
00:01:43.200 --> 00:01:48.200
And you can just pass it to your
memo function, or you can use your

27
00:01:48.200 --> 00:01:53.410
memo function in a creative way
to cache your factorial results.

