WEBVTT

1
00:00:00.058 --> 00:00:00.777
&gt;&gt; Bianca Gandolfo: What about this one?

2
00:00:00.777 --> 00:00:05.757
So we have a list of different ways
that you can greet someone in languages.

3
00:00:10.471 --> 00:00:12.875
&gt;&gt; Bianca Gandolfo: What's
the time complexity of push?

4
00:00:12.875 --> 00:00:14.861
We talked a little bit about that.

5
00:00:14.861 --> 00:00:16.299
Constant, mm-hm.

6
00:00:16.299 --> 00:00:17.414
&gt;&gt; Student1: [INAUDIBLE]
it goes to the end.

7
00:00:17.414 --> 00:00:22.094
&gt;&gt; Bianca Gandolfo: Mm-hm, yep, we always
just put it at the end, not a big deal.

8
00:00:22.094 --> 00:00:26.223
Other languages, when you're
actually doing memory allocation,

9
00:00:26.223 --> 00:00:28.010
this might not be a constant.

10
00:00:28.010 --> 00:00:32.090
But in JavaScript, we can reason
that this is just a constant.

11
00:00:32.090 --> 00:00:35.719
We don't need to worry about initializing
an array of a certain length and

12
00:00:35.719 --> 00:00:36.772
blah, blah, blah,

13
00:00:36.772 --> 00:00:40.420
and then keeping track and then expanding
if it exceeds a certain length.

14
00:00:40.420 --> 00:00:43.498
So we don't need to worry about
anything like that, cool.

15
00:00:43.498 --> 00:00:48.309
And then if we do,
&gt;&gt; Bianca Gandolfo: I always get

16
00:00:48.309 --> 00:00:50.183
these two, I never actually use these,

17
00:00:50.183 --> 00:00:53.447
does anyone actually use these in
their real life, shift or unshift?

18
00:00:57.406 --> 00:00:59.831
&gt;&gt; Bianca Gandolfo: So if we're
taking the first one off the front,

19
00:00:59.831 --> 00:01:02.932
how does that change the time
complexity of this operation?

20
00:01:05.487 --> 00:01:07.812
&gt;&gt; Bianca Gandolfo: Mm-hm,
just like I said, we were going to,

21
00:01:07.812 --> 00:01:11.914
if we take the first one off, then we need
to shift the second one into the first,

22
00:01:11.914 --> 00:01:13.898
the second to the first, or, sorry.

23
00:01:13.898 --> 00:01:17.543
The second to the first,
third to the second, fourth to the third.

24
00:01:17.543 --> 00:01:20.622
And then that's gonna be
n number of operations,

25
00:01:20.622 --> 00:01:22.830
where n is the length of that array.

