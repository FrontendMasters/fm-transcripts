WEBVTT

1
00:00:00.050 --> 00:00:04.367
&gt;&gt; Bianca Gandolfo: So how does our
makeChange brute force solution change?

2
00:00:04.367 --> 00:00:10.559
[LAUGH] How does it change,
how does it make change?

3
00:00:10.559 --> 00:00:13.958
The only difference really is that
you're just caching it, right?

4
00:00:13.958 --> 00:00:18.233
So this here, this should also be
a red flag, we talked about this,

5
00:00:18.233 --> 00:00:21.461
this is global cache,
we don't really want that.

6
00:00:21.461 --> 00:00:25.610
But to focus on the makeChange
algorithm specifically, and

7
00:00:25.610 --> 00:00:30.410
not wasting a lot of time talking
about memoization techniques that we

8
00:00:30.410 --> 00:00:33.603
mentioned earlier on how
to make this better.

9
00:00:33.603 --> 00:00:37.410
The only change here is that we're gonna
see, if it's already cached, we return it.

10
00:00:37.410 --> 00:00:42.470
So what this does is,
as you're making these recursive calls,

11
00:00:42.470 --> 00:00:46.041
you're gonna short-circuit it each time.

12
00:00:46.041 --> 00:00:51.232
And then, what else, yeah,
that's pretty much it,

13
00:00:51.232 --> 00:00:56.867
yeah, you just need to make sure
that you cache it every time.

14
00:00:56.867 --> 00:01:00.945
So there's two main differences there.

15
00:01:00.945 --> 00:01:05.828
And then of course,
you can more responsibly memoize

16
00:01:05.828 --> 00:01:11.050
this as well by just passing
it to your memoize function.

17
00:01:11.050 --> 00:01:15.351
Or even just adding your cache
inside of your makeChange and

18
00:01:15.351 --> 00:01:18.370
returning a function like we did before.

19
00:01:19.870 --> 00:01:22.640
And passing in the coins, so

20
00:01:22.640 --> 00:01:27.930
that you're not relying
on this exterior data.

21
00:01:27.930 --> 00:01:32.020
You don't wanna hard-code it, you wanna
just pass it in as arguments, it's better.

