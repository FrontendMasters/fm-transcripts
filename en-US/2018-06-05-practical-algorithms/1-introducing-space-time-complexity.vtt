WEBVTT

1
00:00:00.440 --> 00:00:02.676
&gt;&gt; Bianca Gandolfo: We're gonna
talk about time complexity.

2
00:00:02.676 --> 00:00:10.344
Time complexity is how we reason
about the speed of an algorithm.

3
00:00:10.344 --> 00:00:12.191
So as you can imagine,

4
00:00:12.191 --> 00:00:18.136
speeding up an algorithm allows us to
process more and more data inputs.

5
00:00:18.136 --> 00:00:24.562
However, we can't time the start and
the finish of an algorithm,

6
00:00:24.562 --> 00:00:30.020
so we use a way of estimating
the speed of algorithms.

7
00:00:30.020 --> 00:00:35.528
So if we run some code on a machine,
there's a lot of factors we can't control,

8
00:00:35.528 --> 00:00:38.899
such as the speed of the machine,
and language,

9
00:00:38.899 --> 00:00:44.021
the environment that the language is
executing in, all of these things.

10
00:00:44.021 --> 00:00:50.129
So instead of saying,
this algorithm is three seconds long,

11
00:00:50.129 --> 00:00:54.944
we say that this algorithm,
as the input grows,

12
00:00:54.944 --> 00:00:58.320
it will grow in this proportion.

13
00:00:58.320 --> 00:01:00.470
And so we're gonna talk about
that a little more in depth.

14
00:01:00.470 --> 00:01:03.450
So there's two things,
there's space complexity,

15
00:01:03.450 --> 00:01:05.791
which talks about how much memory is used.

16
00:01:05.791 --> 00:01:12.274
And there's time complexity, which tends
to be a little more difficult for people,

17
00:01:12.274 --> 00:01:17.420
which is, how many operations
are executed to solve your problem?

18
00:01:19.100 --> 00:01:22.014
And we wanna think about this
in respect to input size.

19
00:01:22.014 --> 00:01:27.120
So as your input grows, how many more
operations do we have to complete?

20
00:01:27.120 --> 00:01:30.595
And we also are pessimists in our field,
and so

21
00:01:30.595 --> 00:01:34.350
we always wanna assume
the worst case scenarios.

22
00:01:34.350 --> 00:01:37.358
And so we're thinking about
always worst case scenario

23
00:01:37.358 --> 00:01:42.266
and,
&gt;&gt; Bianca Gandolfo: Yeah, but

24
00:01:42.266 --> 00:01:45.180
there are other ways to
think about it as well,

25
00:01:45.180 --> 00:01:48.841
okay, questions?
&gt;&gt; Bianca Gandolfo: No,

26
00:01:48.841 --> 00:01:53.627
[INAUDIBLE], okay, all right, so
let's look at a few examples.

27
00:01:53.627 --> 00:02:00.390
So here is kayak.com,
let's say you're an engineer here.

28
00:02:00.390 --> 00:02:05.963
Your PM or your whoever's
telling you what to do says,

29
00:02:05.963 --> 00:02:09.477
okay, given this list of hotels,

30
00:02:09.477 --> 00:02:15.654
you need to return the minimum and
the maximum price value for

31
00:02:15.654 --> 00:02:20.038
all of the results from some search query.

32
00:02:20.038 --> 00:02:26.411
So how might we solve this?
&gt;&gt; Bianca Gandolfo: Cool,

33
00:02:26.411 --> 00:02:31.820
one note, so
as more data is being processed.

34
00:02:31.820 --> 00:02:35.770
So say we have a list of 3 hotels
versus a list of 1000 hotels.

35
00:02:35.770 --> 00:02:38.613
You can expect, right,
you're gonna be doing more operations,

36
00:02:38.613 --> 00:02:39.793
that's the obvious part.

37
00:02:39.793 --> 00:02:46.310
So that's why we like to think
about it in terms of proportion.

38
00:02:46.310 --> 00:02:51.166
So as you're adding one, how many more
operations need to be completed to get to

39
00:02:51.166 --> 00:02:56.360
your solution?
&gt;&gt; Bianca Gandolfo: And the cost

40
00:02:56.360 --> 00:03:00.781
as a result, as your data set grows,
the cost can either be really great, or

41
00:03:00.781 --> 00:03:06.353
it can grow really slow.
&gt;&gt; Bianca Gandolfo: All right,

42
00:03:06.353 --> 00:03:13.877
so one approach to find the range is, we
simply have some nested loops going on and

43
00:03:13.877 --> 00:03:19.425
we compare all numbers,
all prices, to the other prices.

44
00:03:19.425 --> 00:03:24.527
And so you can imagine,
&gt;&gt; Bianca Gandolfo: That

45
00:03:24.527 --> 00:03:28.520
we won't compare one to another.

46
00:03:29.620 --> 00:03:34.324
But we say, okay, so
is 50 greater than 200?

47
00:03:34.324 --> 00:03:37.218
No, and
we're just gonna keep track of that.

48
00:03:37.218 --> 00:03:40.850
And then we compare, keeping track
of the lowest and the highest.

49
00:03:40.850 --> 00:03:44.080
As we're looping through,
we have some variable that we're updating.

50
00:03:44.080 --> 00:03:47.970
But we have some nested loops cuz we wanna
make sure that we're comparing everything

51
00:03:47.970 --> 00:03:48.751
to everything.

52
00:03:48.751 --> 00:03:54.002
And so you can see, every time we do
this comparison, and we are doing some

53
00:03:54.002 --> 00:03:59.108
operation, right, which is the greater
than or less than operation.

54
00:03:59.108 --> 00:04:03.466
And so every time our list grows, so

55
00:04:03.466 --> 00:04:10.160
say we have three items,
kind of like this graph here.

56
00:04:11.360 --> 00:04:15.806
Right, we're gonna do nine compares,

57
00:04:15.806 --> 00:04:21.176
versus if we have five,
it's definitely 25.

58
00:04:21.176 --> 00:04:24.492
Because our table is gonna grow,

59
00:04:24.492 --> 00:04:29.590
as we compare numbers,
our x and ys will compound.

60
00:04:29.590 --> 00:04:34.944
So 10 is gonna be 10x, 10y, and
so there will be 100 comparisons.

61
00:04:34.944 --> 00:04:38.026
So this is what we call quadratic time.

62
00:04:38.026 --> 00:04:44.131
So as our number of n,
which is the number of hotels, increases,

63
00:04:44.131 --> 00:04:49.239
our number of operations
increases by the power of 2.

64
00:04:49.239 --> 00:04:52.666
So 3 times 3, 5 times 5, 10 times 10, and

65
00:04:52.666 --> 00:04:56.355
this is how I want you to
think about time complexity.

66
00:04:56.355 --> 00:05:00.032
As our input grows,
how much more work do we need to

67
00:05:00.032 --> 00:05:04.629
do?
&gt;&gt; Bianca Gandolfo: Okay,

68
00:05:04.629 --> 00:05:08.600
here's another approach,
what if we have two loops?

69
00:05:08.600 --> 00:05:13.356
On the first loop, we check what's
the minimum, in the second loop,

70
00:05:13.356 --> 00:05:14.898
we check the maximum.

71
00:05:14.898 --> 00:05:20.138
How many operations do we need?

72
00:05:20.138 --> 00:05:25.002
So for our first loop, we'd say,
is 200 the maximum, yes,

73
00:05:25.002 --> 00:05:28.798
is 50 the maximum, no,
so we just keep 200.

74
00:05:28.798 --> 00:05:31.440
You can imagine we might
do that a bunch of times.

75
00:05:31.440 --> 00:05:34.319
Is 175 the maximum, no,
we'll keep it at 200.

76
00:05:34.319 --> 00:05:37.120
And then we have another loop
it's gonna loop through.

77
00:05:37.120 --> 00:05:39.332
Is 200 the minimum,
at the very first point, yeah.

78
00:05:39.332 --> 00:05:42.557
And then is 50 in the minimum,
yes, now it's the new minimum.

79
00:05:42.557 --> 00:05:48.893
And we keep going, and
then 50 is still the minimum.

80
00:05:48.893 --> 00:05:55.620
And so in this technique,
we are looking and

81
00:05:55.620 --> 00:06:02.540
doing operations on each item one at
a time, so this is two loops, not nested.

82
00:06:02.540 --> 00:06:05.612
The first example, nested loops,

83
00:06:05.612 --> 00:06:08.896
where every item gets
compared to every other item.

84
00:06:08.896 --> 00:06:14.569
This one, every item gets looked at once,
we just keep track of that min.

85
00:06:14.569 --> 00:06:18.554
And we'll look at it a second time and
we keep track of that min.

86
00:06:18.554 --> 00:06:23.450
And so
if you had to put this in terms of n,

87
00:06:23.450 --> 00:06:28.350
I gave you the answer, I always do that.

88
00:06:30.010 --> 00:06:33.304
What do you think, if you had to guess,
so if the other one was n squared-

89
00:06:33.304 --> 00:06:34.787
&gt;&gt; Unidentified Male: Two times n?

90
00:06:34.787 --> 00:06:36.073
&gt;&gt; Bianca Gandolfo: Yeah, two times n,

91
00:06:36.073 --> 00:06:39.493
exactly, so for the first loop,
that's n, right?

92
00:06:39.493 --> 00:06:46.808
So from zero or one to three,
the second one, one to three.

93
00:06:46.808 --> 00:06:52.803
Cool, and so yeah, so
every time we increase n,

94
00:06:52.803 --> 00:06:57.486
our work increases by 2n, questions

95
00:06:57.486 --> 00:07:03.078
here?
&gt;&gt; Bianca Gandolfo: Is

96
00:07:03.078 --> 00:07:08.176
everyone clear on the difference
between 2n and n squared, okay.

97
00:07:08.176 --> 00:07:09.175
&gt;&gt; Speaker 3: This is shorter.

98
00:07:09.175 --> 00:07:09.722
&gt;&gt; Bianca Gandolfo: Yeah,

99
00:07:09.722 --> 00:07:13.101
it's faster, less comparisons are made.

100
00:07:13.101 --> 00:07:18.309
And you can make this table and
you can see that this

101
00:07:18.309 --> 00:07:23.269
one only has two here,
and this row here is n, or

102
00:07:23.269 --> 00:07:28.516
the number of hotels.
&gt;&gt; Bianca Gandolfo: All right, so

103
00:07:28.516 --> 00:07:32.502
what if the list was already sorted, how
might we find the min and the max there?

104
00:07:32.502 --> 00:07:40.127
How about,
&gt;&gt; Bianca Gandolfo: Who do I wanna choose?

105
00:07:40.127 --> 00:07:43.330
So many people, I like all of you.

106
00:07:43.330 --> 00:07:48.783
How about Josh?
&gt;&gt; Josh: I missed the first part of that.

107
00:07:48.783 --> 00:07:49.543
&gt;&gt; Bianca Gandolfo: Yeah, so

108
00:07:49.543 --> 00:07:52.775
if the list was sorted, how might we find

109
00:07:52.775 --> 00:07:58.552
the min?
&gt;&gt; Josh: If it was sorted,

110
00:07:58.552 --> 00:08:02.210
well, there's that thing where you just
divide it, and then you divide it or

111
00:08:02.210 --> 00:08:04.419
whatever into chunks.
&gt;&gt; Bianca Gandolfo: That's true,

112
00:08:04.419 --> 00:08:08.388
that's if you're searching for something
&gt;&gt; Josh: I guess one end,

113
00:08:08.388 --> 00:08:11.309
you just go through the list and-
&gt;&gt; Bianca Gandolfo: Mm-hm, but if it's

114
00:08:11.309 --> 00:08:14.110
sorted, you know the minimum is where?
&gt;&gt; Josh: Or you just go to the first.

115
00:08:14.110 --> 00:08:15.164
&gt;&gt; Bianca Gandolfo: Yeah, exactly, so

116
00:08:15.164 --> 00:08:18.459
we just know exactly where it is,
so we'll go to the first one.

117
00:08:18.459 --> 00:08:21.554
And Sarah Rose, what about the max?
&gt;&gt; Sarah Rose: Well,

118
00:08:21.554 --> 00:08:22.670
you'd go to the last one.
&gt;&gt; Bianca Gandolfo: Yeah,

119
00:08:22.670 --> 00:08:24.610
we'd just go to the last one.

120
00:08:24.610 --> 00:08:26.419
So that speeds things up
considerably there, right?

121
00:08:26.419 --> 00:08:31.529
No loops, definitely no nested loops,
and so every time,

122
00:08:31.529 --> 00:08:37.664
the number of operations is really,
no matter what, no matter how long

123
00:08:37.664 --> 00:08:41.723
the list is, it's still going to be two.
&gt;&gt; Unidentified Female: Yeah,

124
00:08:41.723 --> 00:08:45.693
why is it three, I was kind of wondering.
&gt;&gt; Bianca Gandolfo: I don't know why,

125
00:08:45.693 --> 00:08:49.304
there might be something else in here.
&gt;&gt; Unidentified Female: Because

126
00:08:49.304 --> 00:08:50.972
it's sorted?
&gt;&gt; Unidentified Male: It has to sort.

127
00:08:50.972 --> 00:08:52.117
&gt;&gt; Bianca Gandolfo: No, it's already

128
00:08:52.117 --> 00:08:55.552
sorted, because the sort,
if there's a sort on there,

129
00:08:55.552 --> 00:08:57.998
then the time complexity would change.

130
00:08:57.998 --> 00:09:02.392
This is the correct slide for,
okay, so if it's sorted,

131
00:09:02.392 --> 00:09:07.070
we just do two operations,
no matter the length of the array.

132
00:09:07.070 --> 00:09:11.278
So we can have a list that's 100,
it's still we get the first,

133
00:09:11.278 --> 00:09:12.719
we still get the last.

134
00:09:12.719 --> 00:09:15.485
And so
the number of operations doesn't change.

135
00:09:18.618 --> 00:09:19.470
&gt;&gt; Bianca Gandolfo: Cool,

136
00:09:19.470 --> 00:09:24.390
questions?
&gt;&gt; Bianca Gandolfo: And

137
00:09:24.390 --> 00:09:26.762
here's just a review of that, so

138
00:09:26.762 --> 00:09:32.120
if we compare all the numbers to one
another in that nested loop situation.

139
00:09:32.120 --> 00:09:37.515
The very first one, that's gonna be n
squared, because as our n increases,

140
00:09:37.515 --> 00:09:42.837
each loop is also going to increase, and
so we need to multiply it by itself.

141
00:09:42.837 --> 00:09:44.736
Anytime you have one loop, and

142
00:09:44.736 --> 00:09:49.791
it's looping from the beginning to the end
of n, that's gonna be just n, right?

143
00:09:49.791 --> 00:09:54.837
Because when it's 10, you loop 10 times,
when it's 11 you loop 11 times, right?

144
00:09:54.837 --> 00:09:59.118
So 10 is n, 11 is n, so we just have n.

145
00:09:59.118 --> 00:10:02.194
And in this case we have 2n
because we have one loop, and

146
00:10:02.194 --> 00:10:06.581
then we finish that loop, and then we do
a second loop, and we finish that loop,

147
00:10:06.581 --> 00:10:08.426
they're not inside each other.

148
00:10:08.426 --> 00:10:14.020
And then with just the 2 here,
we just go directly to the source.

149
00:10:14.020 --> 00:10:17.652
Right, either the beginning or
the very end,

150
00:10:17.652 --> 00:10:22.588
because our list is already sorted,
and that's nice, cool,

151
00:10:22.588 --> 00:10:28.665
all right.
&gt;&gt; Bianca Gandolfo: Here

152
00:10:28.665 --> 00:10:30.570
are some fancy names for these things.

153
00:10:30.570 --> 00:10:34.526
So when we say n squared,
that's called quadratic time.

154
00:10:34.526 --> 00:10:40.104
We talk about time complexity using
something called big O notation.

155
00:10:40.104 --> 00:10:44.795
And so we would say, this is O of
n to the 2, or O of n squared, or

156
00:10:44.795 --> 00:10:48.950
quadratic time,
that's how we talk about it.

157
00:10:48.950 --> 00:10:54.195
And then we say O of n which is linear for
our 2n example.

158
00:10:54.195 --> 00:10:59.575
And then O of 1, constant time for our,

159
00:10:59.575 --> 00:11:05.919
this is another corrected slide,
sorry guys.

160
00:11:05.919 --> 00:11:11.437
For our case where we're
going directly to the min and

161
00:11:11.437 --> 00:11:19.929
the max here.
&gt;&gt; Bianca Gandolfo: So

162
00:11:19.929 --> 00:11:22.780
the next logical question might be,
what's with these 2s?

163
00:11:22.780 --> 00:11:28.559
This one says 1, that one just says n,
then we have 2n, then we have 2.

164
00:11:28.559 --> 00:11:32.579
When we are thinking
about time complexity,

165
00:11:32.579 --> 00:11:36.400
we don't think about every small detail.

166
00:11:36.400 --> 00:11:38.510
We wanna have a big picture estimation,
and so

167
00:11:38.510 --> 00:11:42.990
we drop what we call
non-significant numbers,

168
00:11:42.990 --> 00:11:48.200
which is anything that is
not pretty much listed here.

169
00:11:48.200 --> 00:11:54.307
So if it's not n or log n or n squared or
k to the n, we just drop it, essentially.

170
00:11:54.307 --> 00:11:58.781
And we just give it a big label versus
getting to the nitty gritty of,

171
00:11:58.781 --> 00:12:01.688
if you take an algorithmic analysis class,

172
00:12:01.688 --> 00:12:05.238
you will do all of the calculations
that go into this.

173
00:12:05.238 --> 00:12:08.244
But in the interview setting,

174
00:12:08.244 --> 00:12:13.684
it's not expected that you're
gonna be proving this.

175
00:12:13.684 --> 00:12:16.693
So you could just think
about it like that, and

176
00:12:16.693 --> 00:12:20.538
what else do I wanna tell you about this?
&gt;&gt; Unidentified Female: Bianca, is this

177
00:12:20.538 --> 00:12:25.067
the entire range of the big O notations?
&gt;&gt; Bianca Gandolfo: Yeah, well,

178
00:12:25.067 --> 00:12:30.170
more or less, yeah, it's the major ones.

179
00:12:30.170 --> 00:12:33.768
But there's also n log n,
which is another major one,

180
00:12:33.768 --> 00:12:36.203
which is linear times logarithmic.

181
00:12:36.203 --> 00:12:44.059
But we'll get to that when we get to merge
sort we'll talk about that a little bit.

182
00:12:44.059 --> 00:12:45.880
A good question, thank you.

183
00:12:45.880 --> 00:12:50.843
And also, the fastest algorithms
are in constant time, and

184
00:12:50.843 --> 00:12:53.971
the slowest are in exponential time.

185
00:12:53.971 --> 00:12:58.066
As this input grows,
it's like an exponent,

186
00:12:58.066 --> 00:13:03.660
it grows exponentially, and
this one grows n times n.

187
00:13:03.660 --> 00:13:07.435
This one grows just by n, so
it kind of is a straight line, or

188
00:13:07.435 --> 00:13:10.467
not a straight line, but
a straight diagonal.

189
00:13:10.467 --> 00:13:12.235
And then we'll talk about
logarithm in a second, and

190
00:13:12.235 --> 00:13:13.661
then constant is always gonna be the same.

191
00:13:13.661 --> 00:13:16.901
No matter how your input grows,
it's always gonna be the same number of

192
00:13:16.901 --> 00:13:20.949
operations.
&gt;&gt; Bianca Gandolfo: Okay,

193
00:13:20.949 --> 00:13:26.230
here's a graph, so
here is our constant time rise.

194
00:13:26.230 --> 00:13:29.103
No matter what,
it's always gonna be the same.

195
00:13:29.103 --> 00:13:35.215
Here's some exponential one,
here's a cubic one, quadratic.

196
00:13:35.215 --> 00:13:37.389
These are all really, really, really slow,

197
00:13:37.389 --> 00:13:39.410
look how fast they grow
as the input grows.

198
00:13:39.410 --> 00:13:43.062
So when your inputs are sufficiently
large, you just can't compute anymore.

199
00:13:43.062 --> 00:13:46.243
It'll take a billion years and
you won't be able to solve your algorithm.

200
00:13:46.243 --> 00:13:50.313
And that's why it's important to
know how slow it is or fast, and

201
00:13:50.313 --> 00:13:53.199
then be able to reason
about how to speed it up,

202
00:13:53.199 --> 00:13:57.270
or understand the constraints,
that maybe you can't do that.

203
00:13:57.270 --> 00:14:00.126
And you might need to
make some trade-offs,

204
00:14:00.126 --> 00:14:03.460
like maybe algorithmic correctness,
which is this idea that,

205
00:14:04.510 --> 00:14:08.720
is your solution to the algorithm the
optimal solution or the correct solution?

206
00:14:08.720 --> 00:14:10.970
Sometimes you have to make a trade-off,

207
00:14:10.970 --> 00:14:15.289
because your algorithm otherwise would
be so slow that it would never compute.

208
00:14:15.289 --> 00:14:18.743
So it's better to have some
solution that's good enough,

209
00:14:18.743 --> 00:14:23.827
versus no solution at all.
&gt;&gt; Bianca Gandolfo: What else,

210
00:14:23.827 --> 00:14:27.116
and then I'll talk a little bit
about logarithmic in a second.

211
00:14:27.116 --> 00:14:29.726
But what is good to know
is that as log grows,

212
00:14:29.726 --> 00:14:33.900
you can see that this is really steep
at first, and then it tapers off.

213
00:14:33.900 --> 00:14:40.201
So as on the logarithmic solution,
as the inputs grow for

214
00:14:40.201 --> 00:14:47.436
a logarithmic solution it grows,
but then it kind of tapers off.

215
00:14:47.436 --> 00:14:50.069
So as the work increases,

216
00:14:50.069 --> 00:14:56.897
it doesn't,
&gt;&gt; Bianca Gandolfo: The delta,

217
00:14:56.897 --> 00:14:59.805
or the increase, lessens,

218
00:14:59.805 --> 00:15:03.802
we'll talk about that more, yep.
&gt;&gt; Unidentified Female: So

219
00:15:03.802 --> 00:15:10.798
it looks like there are some places on
the graph where the quadratic is actually

220
00:15:10.798 --> 00:15:16.953
more efficient than the logarithmic
if you had a very small data set.

221
00:15:16.953 --> 00:15:21.312
So would there ever be a point
where you might choose that

222
00:15:21.312 --> 00:15:25.151
over the other-
&gt;&gt; Bianca Gandolfo: Usually time

223
00:15:25.151 --> 00:15:29.658
complexity isn't so
important when your data set is small.

224
00:15:29.658 --> 00:15:32.130
So I would just,
if your data set it small,

225
00:15:32.130 --> 00:15:35.651
I would just focus on readability
rather than performance.

226
00:15:35.651 --> 00:15:40.550
When your dataset is large is when you
wanna start thinking about the speed.

227
00:15:40.550 --> 00:15:44.460
Really, you don't wanna start thinking
about speed until it's lagging and

228
00:15:44.460 --> 00:15:46.273
someone's complaining about it.

229
00:15:46.273 --> 00:15:49.124
You don't wanna pre-optimize, but yeah,

230
00:15:49.124 --> 00:15:53.925
you really don't need to start thinking
about it until your data set grows,

231
00:15:53.925 --> 00:15:57.170
and there's some sort of
lag in your computation.

232
00:15:57.170 --> 00:15:57.860
It was a good question.

