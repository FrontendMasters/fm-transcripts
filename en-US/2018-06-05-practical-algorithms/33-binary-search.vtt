WEBVTT

1
00:00:00.059 --> 00:00:01.240
&gt;&gt; Bianca Gandolfo: So
we're gonna talk about binary search.

2
00:00:01.240 --> 00:00:06.089
Again, binary search is our search where
we are expecting our array to be sorted.

3
00:00:06.089 --> 00:00:11.436
And we're going to break our list in half
every time, and we're gonna say, is our

4
00:00:11.436 --> 00:00:17.109
value that we're searching for less than,
or greater than, this current location?

5
00:00:17.109 --> 00:00:20.455
So if it's less, we're gonna go to
the left, if it's greater than,

6
00:00:20.455 --> 00:00:21.891
we're gonna go to the right.

7
00:00:21.891 --> 00:00:26.089
All right,
what does this look like in reality?

8
00:00:26.089 --> 00:00:34.369
All right, so we could do the call stack
game with this, that would be a fun one.

9
00:00:34.369 --> 00:00:39.147
And so we just called,
&gt;&gt; Bianca Gandolfo: Our

10
00:00:39.147 --> 00:00:40.869
binarySearch with these values.

11
00:00:44.129 --> 00:00:46.302
&gt;&gt; Bianca Gandolfo: I'm gonna
keep them up here for reference.

12
00:00:46.302 --> 00:00:51.402
So we're initializing a minimum,
our maximum is list.length -1,

13
00:00:51.402 --> 00:00:54.639
which is 1, 2, 3, 4, 5, which is 4.

14
00:00:54.639 --> 00:00:58.010
Initializing a guess
that's gonna be empty.

15
00:00:58.010 --> 00:01:01.330
So while the minimum is less than max, so

16
00:01:01.330 --> 00:01:06.150
while we aren't looping outside
of the bounds of our function.

17
00:01:06.150 --> 00:01:12.775
We are going to grab the center, so our
guess is, let's just start in the middle.

18
00:01:12.775 --> 00:01:16.246
And for, and this is common for
a divide and

19
00:01:16.246 --> 00:01:19.919
conquer algorithm, we start in the middle.

20
00:01:19.919 --> 00:01:25.343
But if you take a look at quick sort,
which we won't have time to cover today,

21
00:01:25.343 --> 00:01:28.189
It's not always gonna be in the middle.

22
00:01:28.189 --> 00:01:31.795
Sometimes you'll pick a point to do
a divide and conquer at the end in

23
00:01:31.795 --> 00:01:35.419
the case of quick sort, but
there's different implementations.

24
00:01:35.419 --> 00:01:39.005
However, you can kind of reason that if
it's divide and conquer, you're probably

25
00:01:39.005 --> 00:01:42.099
gonna split it in the middle,
although sometimes that's not the case.

26
00:01:42.099 --> 00:01:48.077
Okay, so is min less than or
equal to the max, sure is, and

27
00:01:48.077 --> 00:01:53.209
then now our guess is going
to be the second index.

28
00:01:53.209 --> 00:01:57.960
Okay, so did we find it,
0, 1, 2, no, we didn't.

29
00:01:57.960 --> 00:02:04.810
So we're gonna go into this else,
is 7 less than 90?

30
00:02:04.810 --> 00:02:10.820
Yes, so
we're going to increment our min now to 1.

31
00:02:10.820 --> 00:02:18.760
And then we are going to
loop back into our while.

32
00:02:18.760 --> 00:02:23.199
So is 1 less than or
equal to max, sure is.

33
00:02:23.199 --> 00:02:28.969
So now we are going to map
that floor 5 divided by 2.

34
00:02:28.969 --> 00:02:33.813
So we're kind of narrowing

35
00:02:33.813 --> 00:02:39.475
the,
&gt;&gt; Bianca Gandolfo: Range

36
00:02:39.475 --> 00:02:41.319
that we're looking in.

37
00:02:41.319 --> 00:02:49.474
Okay, so then that is going to be 2,
did we find it?

38
00:02:49.474 --> 00:02:55.574
No, otherwise we are going to,
so is 7 less than 90?

39
00:02:55.574 --> 00:03:01.304
Yes, then we increment it again,
so now this is 2, okay.

40
00:03:01.304 --> 00:03:06.248
Then 2+4 is 6, so
now this is 3, so it's 0, 1,

41
00:03:06.248 --> 00:03:09.584
2, 3, and then we find it, okay.

42
00:03:09.584 --> 00:03:14.764
Then we find it and we return it,
we did it, there it is.

43
00:03:17.784 --> 00:03:20.244
&gt;&gt; Bianca Gandolfo: Any
questions about this?

44
00:03:20.244 --> 00:03:24.009
&gt;&gt; Speaker 2: So
if you were dealing with a larger array,

45
00:03:24.009 --> 00:03:28.833
instead of incrementing or
lowering your guess by 1.

46
00:03:28.833 --> 00:03:34.866
You'd want to add the array
length divided by 2,

47
00:03:34.866 --> 00:03:39.945
and each time you divide it by 2-
&gt;&gt; Bianca Gandolfo: You can do

48
00:03:39.945 --> 00:03:45.462
it that way, so
you could just divide the length.

49
00:03:45.462 --> 00:03:48.874
So you could divide the length, and

50
00:03:48.874 --> 00:03:53.992
you can also just could choose
an index in the middle,

51
00:03:53.992 --> 00:03:58.674
and compare your item to
the index in the middle.

52
00:03:58.674 --> 00:04:02.752
And say, is it greater than or
it is less than, and

53
00:04:02.752 --> 00:04:07.624
then you can change your starting
index to the one after it.

54
00:04:07.624 --> 00:04:12.664
So your minimum, so say your index,
you were looking for

55
00:04:12.664 --> 00:04:16.969
something that's in
the right of your array, so

56
00:04:16.969 --> 00:04:21.130
it's gonna be greater than your min index.

57
00:04:21.130 --> 00:04:25.110
You can just set your min
index to that current one.

58
00:04:25.110 --> 00:04:30.982
So then the min, and
you can just look on in the left.

59
00:04:30.982 --> 00:04:33.850
That's another way of doing it,
yeah, cool.

