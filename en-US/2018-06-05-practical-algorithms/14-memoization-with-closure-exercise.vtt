WEBVTT

1
00:00:00.669 --> 00:00:02.901
&gt;&gt; Bianca Gandolfo: So
we're gonna keep going with this so

2
00:00:02.901 --> 00:00:11.539
the next exercise.
&gt;&gt; Bianca Gandolfo: And

3
00:00:11.539 --> 00:00:13.306
you probably saw the sneak preview.

4
00:00:13.306 --> 00:00:14.952
There's the solutions,

5
00:00:14.952 --> 00:00:19.522
which I don't recommend looking at
all the solutions and copying them.

6
00:00:19.522 --> 00:00:21.657
It's not a way to learn.

7
00:00:21.657 --> 00:00:23.991
But they are available for
you especially for

8
00:00:23.991 --> 00:00:27.194
those of you who aren't here in
person to have as a reference.

9
00:00:27.194 --> 00:00:32.448
But if you haven't finished
the first two you can just

10
00:00:32.448 --> 00:00:38.415
copy the solution from the task two and
use it for task three.

11
00:00:38.415 --> 00:00:41.709
Because we're gonna clean
up our approach and

12
00:00:41.709 --> 00:00:47.430
make this better.
&gt;&gt; Bianca Gandolfo: Okay,

13
00:00:47.430 --> 00:00:54.272
so.
&gt;&gt; Bianca Gandolfo: All right,

14
00:00:54.272 --> 00:00:59.563
so task three is all about
cleaning up our global scope.

15
00:00:59.563 --> 00:01:04.847
This task is for our advanced viewers,
if you are not familiar

16
00:01:04.847 --> 00:01:09.940
with closures I recommend just
sticking with Exercise 1.

17
00:01:09.940 --> 00:01:14.207
If you have played with closures a bit or
you wanna take it for a whirl,

18
00:01:14.207 --> 00:01:17.901
this is the classic example of when and
how to use a closure.

19
00:01:17.901 --> 00:01:23.457
And we'll go over it in
ten minutes after this.

20
00:01:23.457 --> 00:01:28.639
But so the pro tip here,
use a closure to return a function that

21
00:01:28.639 --> 00:01:34.270
you can call later.
&gt;&gt; Bianca Gandolfo: So you

22
00:01:34.270 --> 00:01:40.340
can see that we're invoking this function
and saving it into a variable name.

23
00:01:40.340 --> 00:01:42.489
Then with that variable name we're calling

24
00:01:42.489 --> 00:01:46.468
it again.
&gt;&gt; Bianca Gandolfo: That's a key.

25
00:01:48.663 --> 00:01:50.249
&gt;&gt; Bianca Gandolfo: Aspect of this being

26
00:01:50.249 --> 00:01:51.186
a closure.

27
00:01:51.186 --> 00:01:53.515
If it was only returning
a primitive value and

28
00:01:53.515 --> 00:01:56.530
not a function then you wouldn't
be able to call it again.

29
00:01:56.530 --> 00:01:58.171
It would just be saved to some value.

30
00:01:58.171 --> 00:02:03.248
So it's important that we're returning
function so that we can call it later.

31
00:02:03.248 --> 00:02:08.797
And inside of our closure we retain access
to variables that were passed in before,

32
00:02:08.797 --> 00:02:09.834
which is a key.

33
00:02:09.834 --> 00:02:16.744
So in a closure you can
remember prior values.

34
00:02:16.744 --> 00:02:20.125
And if you haven't worked with closures
yet that probably sounds like Greek and

35
00:02:20.125 --> 00:02:20.784
that's okay.

36
00:02:20.784 --> 00:02:23.484
Stick with Exercise 1,
we'll go through the solution and

37
00:02:23.484 --> 00:02:25.327
you'll learn about how closures work.

38
00:02:25.327 --> 00:02:27.150
So don't stress about it if
that sounds too complicated.

