WEBVTT

1
00:00:00.140 --> 00:00:05.150
&gt;&gt; Bianca: We were talking about
using the breadcrumbs method to cache

2
00:00:05.150 --> 00:00:13.160
values that we've seen before
to optimize our unique function.

3
00:00:13.160 --> 00:00:18.380
Memoization is a type of caching, as well,
and so the difference between memoization

4
00:00:18.380 --> 00:00:23.090
and the breadcrumbs method is that
the value that we're getting to cache, so

5
00:00:23.090 --> 00:00:26.956
we rooted array at i and
saved that into our breadcrumbs object,

6
00:00:26.956 --> 00:00:31.610
is not the result of a function.

7
00:00:31.610 --> 00:00:35.880
If you're caching the result of
a function we call that memoization, and

8
00:00:35.880 --> 00:00:41.050
you can think of it as memorization,
remembering things.

9
00:00:42.150 --> 00:00:46.970
The concept of cashing in
memoization are often conflated.

10
00:00:46.970 --> 00:00:49.550
Memoization is a type of cashing.

11
00:00:49.550 --> 00:00:53.120
Cashing really, in the simplest
form in a JavaScript environment,

12
00:00:53.120 --> 00:00:57.820
is saving something into an object or
an array.

13
00:00:57.820 --> 00:01:02.010
Or even a variable,
more like an object and array actually.

14
00:01:02.010 --> 00:01:06.710
That's all caching, so if you refresh
the page, that's gonna be erased,

15
00:01:06.710 --> 00:01:08.360
it's not saved on discs, that's caching.

16
00:01:08.360 --> 00:01:09.490
Same with Node,

17
00:01:09.490 --> 00:01:13.490
if you're gonna cache it you're saving it
into an object that's just on the server.

18
00:01:13.490 --> 00:01:15.360
So if you shut off that server and
restart it,

19
00:01:16.530 --> 00:01:21.540
you're gonna lose that cache unless you're
syncing it to a database somewhere.

20
00:01:21.540 --> 00:01:26.360
So that's what caching is, and
then there's types of caching, right?

21
00:01:26.360 --> 00:01:30.840
We cache HTTP requests and things in the
browser, which is a little bit different

22
00:01:30.840 --> 00:01:36.870
execution environment than
the JavaScript execution environment.

23
00:01:36.870 --> 00:01:40.030
Anyway, we're gonna talk about factorial.

24
00:01:40.030 --> 00:01:42.129
So, factorial is the one were it's like,

25
00:01:43.240 --> 00:01:47.770
like n to the bang,
bang is the exclamation point.

26
00:01:47.770 --> 00:01:49.960
That's how we say it in programming speak,
bang.

27
00:01:51.230 --> 00:01:55.570
So what that looks like, so

28
00:01:55.570 --> 00:02:00.475
5 factorial is 5 with a bang,

29
00:02:00.475 --> 00:02:05.585
which is just 5 x 4 x 3 x 2 x 1.

30
00:02:09.397 --> 00:02:10.590
&gt;&gt; Bianca: Cool.

31
00:02:10.590 --> 00:02:12.230
So with factorial,

32
00:02:12.230 --> 00:02:18.040
we're doing a lot of the same calculations
over and over and over again.

33
00:02:18.040 --> 00:02:24.690
And so instead of re-calculating

34
00:02:24.690 --> 00:02:28.690
the result of this,
it's actually a recursive function.

35
00:02:28.690 --> 00:02:32.060
We could just memoize it,
which means we're going to

36
00:02:32.060 --> 00:02:36.600
save the results of the factorial
function into an object.

37
00:02:36.600 --> 00:02:41.880
Just like in the breadcrumbs version,
except that the value that we're

38
00:02:41.880 --> 00:02:45.490
caching is gonna be
returned from a function.

39
00:02:47.520 --> 00:02:51.040
This is very very similar,
just where the value comes from is what

40
00:02:51.040 --> 00:02:57.820
differs.
&gt;&gt; Bianca: Cool.

41
00:03:00.210 --> 00:03:08.710
And so you can see they're repeated here
so it just keeps getting concatenated.

42
00:03:08.710 --> 00:03:13.160
And so instead of calculating 36 again,

43
00:03:13.160 --> 00:03:19.550
if we just save 35, then we don't have to
go through all of the decision trees of

44
00:03:19.550 --> 00:03:23.740
calculating the recursion of a factorial.
&gt;&gt; Speaker 2: Are you missing some level,

45
00:03:23.740 --> 00:03:25.200
and you have sudo code.

46
00:03:25.200 --> 00:03:26.920
Is there some kind of code
that's supposed to go there,

47
00:03:26.920 --> 00:03:29.000
you're just not writing it?
&gt;&gt; Bianca: Yeah.

48
00:03:29.000 --> 00:03:29.590
&gt;&gt; Speaker 2: The assumption is that

49
00:03:29.590 --> 00:03:32.050
there's gonna be code there.
&gt;&gt; Bianca: Yeah, there's some code there,

50
00:03:32.050 --> 00:03:35.870
it takes away from the point
because it's a little confusing.

51
00:03:35.870 --> 00:03:44.480
But the point is is that factorial of
36 is just factorial of 35 times 36.

52
00:03:44.480 --> 00:03:49.566
So instead of every time we calculate, if
we already calculated a factorial of 35,

53
00:03:49.566 --> 00:03:52.970
we don't need to recalculate
it all over again, right?

54
00:03:52.970 --> 00:03:58.778
Because I mean you got to do 35 times
34 times 33 all the way down to 1.

55
00:03:58.778 --> 00:04:01.970
So, do you have a question?

56
00:04:01.970 --> 00:04:06.241
Okay.
&gt;&gt; Speaker 3: When you talk about caching

57
00:04:06.241 --> 00:04:08.181
and memoization?
&gt;&gt; Bianca: Mm hm?

58
00:04:08.181 --> 00:04:09.441
&gt;&gt; Speaker 3: Could that relate

59
00:04:09.441 --> 00:04:14.229
back to space complexity which you
mentioned earlier along the time

60
00:04:14.229 --> 00:04:15.380
complexity.
&gt;&gt; Bianca: Yeah.

61
00:04:15.380 --> 00:04:17.374
&gt;&gt; Speaker 3: Is this more an example that

62
00:04:17.374 --> 00:04:21.070
it's gonna affect space complexity?
&gt;&gt; Bianca: Absolutely.

63
00:04:21.070 --> 00:04:21.640
So yeah.

64
00:04:21.640 --> 00:04:26.598
With caching you're always making
the trade-off between time complexity and

65
00:04:26.598 --> 00:04:27.860
space complexity.

66
00:04:27.860 --> 00:04:30.740
So it's faster but it takes up more space.

67
00:04:30.740 --> 00:04:34.415
In the browser environment, where
a lot of us JavaScript engineers live,

68
00:04:34.415 --> 00:04:39.060
it's typically the obvious
trade-off is time complexity for

69
00:04:39.060 --> 00:04:43.040
us and other environments where
memory constraints are more relevant.

70
00:04:44.320 --> 00:04:46.080
It's something you want
to think about more, but

71
00:04:46.080 --> 00:04:49.910
in Java Script world,
you can always memoize, always cache.

72
00:04:49.910 --> 00:04:54.750
It's always a good idea, unless you are
getting into big data stuff then that's

73
00:04:55.870 --> 00:04:57.950
something that most of us don't
deal with on the day to day.

