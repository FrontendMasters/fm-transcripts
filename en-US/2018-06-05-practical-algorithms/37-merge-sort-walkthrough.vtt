WEBVTT

1
00:00:00.580 --> 00:00:05.693
&gt;&gt; Bianca: So let's do our game with

2
00:00:05.693 --> 00:00:14.778
our pseudocode.
&gt;&gt; Bianca: All right, so

3
00:00:14.778 --> 00:00:24.738
let's say our list is, I don't know.
&gt;&gt; Bianca: Okay.

4
00:00:26.775 --> 00:00:27.682
&gt;&gt; Bianca: So,

5
00:00:29.664 --> 00:00:32.355
&gt;&gt; Bianca: We're gonna start with our

6
00:00:32.355 --> 00:00:40.020
list.
&gt;&gt; Bianca: So, is the list.length &lt; 2?

7
00:00:40.020 --> 00:00:43.490
Nope, we're gonna break it in half.

8
00:00:43.490 --> 00:00:46.020
So now, we're calling mergeSort
again on the left side.

9
00:00:48.275 --> 00:00:48.858
&gt;&gt; Bianca: So,

10
00:00:59.366 --> 00:01:01.544
&gt;&gt; Bianca: On the left side, which,

11
00:01:01.544 --> 00:01:03.227
if we cut it in half,

12
00:01:03.227 --> 00:01:08.114
we could just take these two,
&gt;&gt; Bianca: So you can do this.

13
00:01:08.114 --> 00:01:12.400
[7,6 and then 1,12].

14
00:01:12.400 --> 00:01:17.240
So, remember,
I said this was important for later.

15
00:01:17.240 --> 00:01:21.000
This is why it's important, because we are
recursing on the left side, and then we're

16
00:01:21.000 --> 00:01:26.314
also recursing on the right side.
&gt;&gt; Bianca: So, we're gonna

17
00:01:26.314 --> 00:01:31.295
go all the way down to the bottom of
our left side, so is it less than 2?

18
00:01:31.295 --> 00:01:36.675
7,6, no, so we're going to do it again,
where we're gonna break

19
00:01:36.675 --> 00:01:42.029
it,
&gt;&gt; Bianca: In half,

20
00:01:42.029 --> 00:01:44.330
it's gonna look like this.

21
00:01:44.330 --> 00:01:49.054
We're gonna have the 7, and
then we're gonna have the 6, and

22
00:01:49.054 --> 00:01:52.567
we're gonna merge the left side,
which is 7.

23
00:01:52.567 --> 00:01:54.650
We're gonna put our little line here.

24
00:02:04.772 --> 00:02:05.339
&gt;&gt; Bianca: Okay,

25
00:02:05.339 --> 00:02:08.366
I don't know where that 2 came from.

26
00:02:08.366 --> 00:02:10.630
Okay, so, is it less than 2?

27
00:02:10.630 --> 00:02:13.936
Yes, so this is when we return, so

28
00:02:13.936 --> 00:02:18.610
now we're returning
a sorted list of length 1,

29
00:02:18.610 --> 00:02:22.717
which is 7, so this Lsorted is 7, okay?

30
00:02:22.717 --> 00:02:25.620
We're good?

31
00:02:25.620 --> 00:02:30.520
So, we're popping this off, nothing else
is executed, because we hit that return.

32
00:02:30.520 --> 00:02:37.220
Then, we're gonna go to the right sorted,
and we're going to pause there.

33
00:02:38.570 --> 00:02:39.824
We're gonna pass in our 6,

34
00:02:47.354 --> 00:02:48.708
&gt;&gt; Bianca: Pass in our 6 here,

35
00:02:48.708 --> 00:02:51.670
which we're just gonna return right away.

36
00:02:51.670 --> 00:02:55.233
We hit that base case, so

37
00:02:55.233 --> 00:03:00.506
we have our sorted list of length 1.

38
00:03:00.506 --> 00:03:04.640
Now, we're gonna continue, and
we're going to merge the left sorted and

39
00:03:04.640 --> 00:03:05.700
the right sorted.

40
00:03:05.700 --> 00:03:10.560
We talked about how the merge was gonna
happen, but let's just skip that part, and

41
00:03:10.560 --> 00:03:16.150
understand that it's going to return
these two lists merged in order.

42
00:03:16.150 --> 00:03:19.280
So, we have 6, and we have 7.

43
00:03:19.280 --> 00:03:21.570
We good?

44
00:03:21.570 --> 00:03:24.546
We're gonna return this,
we have a return statement, so

45
00:03:24.546 --> 00:03:32.501
we're gonna pop this off.
&gt;&gt; Bianca: And

46
00:03:32.501 --> 00:03:36.620
this is gonna be,
&gt;&gt; Bianca: Our left sorted list.

47
00:03:37.830 --> 00:03:40.359
Then, we're gonna continue on, and we're
gonna do the same thing with the right

48
00:03:40.359 --> 00:03:44.642
side.
&gt;&gt; Bianca: And

49
00:03:44.642 --> 00:03:48.070
in the spirit of completeness, I'm gonna
go all the way through this example.

50
00:03:49.180 --> 00:03:52.483
So, the left side,
what do we have, we have 1 and

51
00:03:52.483 --> 00:03:55.878
we have 12, 1 and
then we have 12, all right?

52
00:03:55.878 --> 00:03:59.365
We don't have our base case,
we're going to call the left side.

53
00:04:05.072 --> 00:04:07.919
&gt;&gt; Bianca: Okay, so the left side is going

54
00:04:07.919 --> 00:04:14.875
to be 1, we're gonna return that up,
because that is our sorted.

55
00:04:14.875 --> 00:04:17.756
So, I just think this is genius,
who thinks of this stuff,

56
00:04:17.756 --> 00:04:19.440
like assorted lists of length 1?

57
00:04:19.440 --> 00:04:25.034
Man, okay, so then, we're going to call it

58
00:04:25.034 --> 00:04:32.502
on the right side,
&gt;&gt; Bianca: And again,

59
00:04:32.502 --> 00:04:36.740
we're gonna do the same thing, we're just
gonna return it, cuz we hit our base case.

60
00:04:36.740 --> 00:04:42.130
Here we go,
we get our sorted list of length 1, and

61
00:04:42.130 --> 00:04:47.630
then we're gonna merge it in this step,
and we're gonna return that merged value.

62
00:04:47.630 --> 00:04:50.170
So, it's gonna actually just
be the same as what it was.

63
00:04:51.240 --> 00:04:57.860
Cool, so we're gonna pop that off.
&gt;&gt; Bianca: And

64
00:04:57.860 --> 00:05:03.329
we're gonna reconvene where we left off.,
and now we're going to merge these two.

65
00:05:03.329 --> 00:05:06.678
And again, we know that internally,

66
00:05:06.678 --> 00:05:12.550
this merge routine is going to pick it and
put it in the right order.

67
00:05:13.570 --> 00:05:18.466
And so, it's gonna return [1,
6, 7, 12], and

68
00:05:18.466 --> 00:05:22.660
we pop that off, and
then, that's our answer.

69
00:05:28.661 --> 00:05:29.323
&gt;&gt; Bianca: Very short.

70
00:05:35.427 --> 00:05:36.134
&gt;&gt; Bianca: Any questions?

71
00:05:42.209 --> 00:05:42.836
&gt;&gt; Bianca: It's a fun one.

72
00:05:45.667 --> 00:05:46.651
&gt;&gt; Bianca: All right, so

73
00:05:46.651 --> 00:05:52.203
I have some more pseudocode.
&gt;&gt; Bianca: And

74
00:05:52.203 --> 00:05:55.502
we can kinda talk about it
like an algorithmic analysis,

75
00:05:55.502 --> 00:05:59.908
just,
&gt;&gt; Bianca: Very high level here.

76
00:05:59.908 --> 00:06:04.691
And we have some constant themes,
like returning and

77
00:06:04.691 --> 00:06:09.473
cutting things in half, and
then we have our merges,

78
00:06:09.473 --> 00:06:13.470
which is we're slicing it in half.

79
00:06:13.470 --> 00:06:14.970
And then, our merge routine here,

80
00:06:14.970 --> 00:06:18.420
where we're looping through,
the list is gonna be linear.

81
00:06:18.420 --> 00:06:23.531
And so, we can kind of imagine that to be,

82
00:06:23.531 --> 00:06:29.680
or is, in login time complexity for
a mergeSort.

