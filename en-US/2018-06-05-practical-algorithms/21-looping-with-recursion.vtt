WEBVTT

1
00:00:00.000 --> 00:00:03.650
&gt;&gt; Bianca: The typical recipe for
recursion is

2
00:00:03.650 --> 00:00:06.940
to identify your base case which is,
when do you want your loop to stop?

3
00:00:06.940 --> 00:00:08.930
So if you're doing a for loop and you say,

4
00:00:08.930 --> 00:00:11.740
four of r i equals i less
than a rate at length.

5
00:00:11.740 --> 00:00:14.770
Your base case is i is less
than a rate at length,

6
00:00:14.770 --> 00:00:16.550
when do you want that loop to stop?

7
00:00:16.550 --> 00:00:21.142
Or you want it to stop when it's
greater than, but you know what I mean,

8
00:00:21.142 --> 00:00:25.140
that's the condition of the loop and
that's your base case.

9
00:00:25.140 --> 00:00:26.660
What is your recursive case?

10
00:00:26.660 --> 00:00:30.437
So the recursive case is the work
that you wanna do, right?

11
00:00:30.437 --> 00:00:31.977
So we're not just looping for

12
00:00:31.977 --> 00:00:35.250
no reason, there's some work that
we need to do for each loop.

13
00:00:35.250 --> 00:00:40.670
So maybe we're adding some numbers, maybe
we're doing some other sort of operations.

14
00:00:40.670 --> 00:00:43.600
So we need to identify that recursive
case, and we need to make sure that

15
00:00:43.600 --> 00:00:48.590
each time we call our recursion,
we're getting closer to our base case.

16
00:00:48.590 --> 00:00:52.340
Because otherwise, we never meet our
base case, we're gonna loop forever.

17
00:00:52.340 --> 00:00:56.380
And we get into this infinite loop and
it crashes your browser.

18
00:00:56.380 --> 00:01:00.904
Nice thing about repl.it is that
it stops the infinite loop so

19
00:01:00.904 --> 00:01:04.043
it doesn't actually crash your browser.

20
00:01:04.043 --> 00:01:06.800
And it will warn you that you have
an infinite loop, which is super nice.

21
00:01:06.800 --> 00:01:10.101
Cuz otherwise if you're playing around
with this stuff, you'll have to close and

22
00:01:10.101 --> 00:01:11.526
open your browser when you mess up.

23
00:01:11.526 --> 00:01:12.750
And you always mess up the first time.

24
00:01:13.900 --> 00:01:18.226
So the other thing is you need to make
sure that you're returning where it's

25
00:01:18.226 --> 00:01:21.690
appropriate, cuz you can lose your data,
as we mentioned.

26
00:01:21.690 --> 00:01:29.387
And again, write a procedure that's gonna
bring your input closer to your base case.

27
00:01:29.387 --> 00:01:33.721
And so this sounds all fine and dandy, but
applying this to a real problem can be

28
00:01:33.721 --> 00:01:40.459
a little bit tricky.
&gt;&gt; Bianca: All right,

29
00:01:40.459 --> 00:01:43.302
so let's look at our fancy loop.

30
00:01:43.302 --> 00:01:47.450
Or this is just, yeah,
this is our recursive loop.

31
00:01:47.450 --> 00:01:55.580
So let's check it out and play our game.
&gt;&gt; Bianca: So

32
00:01:55.580 --> 00:02:00.331
like I mentioned,
recursion is just fancy loops,

33
00:02:00.331 --> 00:02:05.740
and most of the time I would
suggest just using a loop.

34
00:02:05.740 --> 00:02:10.224
However, as you grow with your
algorithms and data structures,

35
00:02:10.224 --> 00:02:13.485
there's gonna be times
when it's actually way

36
00:02:13.485 --> 00:02:17.573
harder to write a solution
iteratively over recursively.

37
00:02:17.573 --> 00:02:21.533
So it's good to get familiar with
the simple cases until you get to

38
00:02:21.533 --> 00:02:24.773
a point where, okay,
then it's really needed, and

39
00:02:24.773 --> 00:02:28.242
we're applying it to something
a little more advanced.

40
00:02:28.242 --> 00:02:30.790
Okay, so we're gonna pass 3.

41
00:02:30.790 --> 00:02:35.379
All right, so we're gonna push this on
to our call stack, emulating how our

42
00:02:35.379 --> 00:02:40.199
JavaScript actually would be executing,
and we're creating our scope here.

43
00:02:40.199 --> 00:02:42.647
Every time we push something
onto a call stack,

44
00:02:42.647 --> 00:02:44.735
we're creating an execution context.

45
00:02:44.735 --> 00:02:51.608
All the variables that live inside of that
function have their own little world and

46
00:02:51.608 --> 00:02:57.400
you can't, like this when we call again,
can't really interact.

47
00:02:57.400 --> 00:03:00.519
This parent can't interact with the child,
but

48
00:03:00.519 --> 00:03:04.260
the child can interact with
the parent in terms of scope.

49
00:03:04.260 --> 00:03:08.049
You can reach up, but you can't reach in.

50
00:03:08.049 --> 00:03:12.643
So I'm getting ahead of myself.

51
00:03:12.643 --> 00:03:16.684
So we're passing 3 in as 3.

52
00:03:16.684 --> 00:03:20.860
So this will just console.log that
n equals 3 for your reference.

53
00:03:20.860 --> 00:03:27.950
So if our n is less than or equal to 1,
our loop is complete, right?

54
00:03:27.950 --> 00:03:34.129
This is similar to where you say
i is greater than area.length.

55
00:03:34.129 --> 00:03:35.530
So is it less than 1?

56
00:03:35.530 --> 00:03:40.630
No, okay, fine, we're gonna have to call
it again and we're gonna decrement n.

57
00:03:40.630 --> 00:03:41.644
This is the important part.

58
00:03:41.644 --> 00:03:45.627
We need to decrement, otherwise that
infinite loop case is what's gonna happen.

59
00:03:47.100 --> 00:03:53.930
So now n is 2, it's not less than 1,
okay, let's do it again.

60
00:03:53.930 --> 00:03:55.556
And then usually I like to,

61
00:03:55.556 --> 00:03:59.391
in these examples it doesn't
really matter where we leave off.

62
00:03:59.391 --> 00:04:03.004
But sometimes there'll be more work
that needs to be done after we call

63
00:04:03.004 --> 00:04:06.630
a recursion, so
it's good to keep track of where you were.

64
00:04:06.630 --> 00:04:10.000
When you have to go back and do more work.

65
00:04:11.130 --> 00:04:14.630
Okay, so now this is 1, is it 1, great.

66
00:04:14.630 --> 00:04:16.360
Now we're gonna return complete.

67
00:04:17.500 --> 00:04:21.899
Again, we never get down here cuz we hit
this case, and once we see that return,

68
00:04:21.899 --> 00:04:25.591
that means we're gonna exit this function,
pop it off the stack.

69
00:04:25.591 --> 00:04:29.199
Whatever this returns is
what this is returning, so

70
00:04:29.199 --> 00:04:34.690
this is gonna return complete.
&gt;&gt; Bianca: And let's pop it off the stack.

71
00:04:36.130 --> 00:04:40.050
So since there's a return statement,
we will return again.

72
00:04:40.050 --> 00:04:43.158
The value complete, pop this guy off

73
00:04:43.158 --> 00:04:47.981
the stack.
&gt;&gt; Bianca: And

74
00:04:47.981 --> 00:04:54.556
then pop this guy off the stack.
&gt;&gt; Bianca: So

75
00:04:54.556 --> 00:04:56.228
that's our loop with recursion.

76
00:04:56.228 --> 00:05:00.883
And through this workshop in this
particular section, I want you to get

77
00:05:00.883 --> 00:05:06.460
really familiar with translating loops
into recursion and recursion into loops.

78
00:05:06.460 --> 00:05:11.710
That's the goal, because loops are easier
to reason about, recursion is just a loop.

79
00:05:11.710 --> 00:05:13.830
How we do put those two things together?

80
00:05:13.830 --> 00:05:14.722
That's what we're doing.

