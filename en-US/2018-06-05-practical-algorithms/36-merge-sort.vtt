WEBVTT

1
00:00:00.260 --> 00:00:05.920
&gt;&gt; Bianca Gandolfo: So the merge step,
let's just look at this slide here.

2
00:00:05.920 --> 00:00:12.210
So during the merge step, we have two
pointers which when we say two pointers,

3
00:00:12.210 --> 00:00:15.710
that means you're keeping track
of some sort of index, right?

4
00:00:15.710 --> 00:00:17.010
When you were working with link list,

5
00:00:17.010 --> 00:00:18.610
you're doing a lot of
things with two pointers.

6
00:00:18.610 --> 00:00:24.790
Sometimes that means you have a nested
loops, right, with indices being tracked.

7
00:00:24.790 --> 00:00:28.390
It also could be,
you have some variable with an index,

8
00:00:28.390 --> 00:00:30.100
two variables with an index
that's being tracked.

9
00:00:30.100 --> 00:00:31.550
So that's what, when people say,

10
00:00:31.550 --> 00:00:34.560
it's a common thing people say
that just is kinda confusing.

11
00:00:34.560 --> 00:00:38.190
So we have two pointers,
one looks at the beginning of this array,

12
00:00:38.190 --> 00:00:42.160
and one looks at the beginning
of the other array.

13
00:00:42.160 --> 00:00:47.096
And so, we ask at each step,
which one is less.

14
00:00:47.096 --> 00:00:50.200
And so, in this case, three is less and

15
00:00:50.200 --> 00:00:54.720
we recreate a new array each time each of
these steps, we're creating a new array.

16
00:00:54.720 --> 00:00:58.276
This is not an inplace sort and
so, there is some memory,

17
00:00:58.276 --> 00:01:03.668
some space complexity things
there to keep in mind.

18
00:01:03.668 --> 00:01:08.500
So as we reason through this.

19
00:01:08.500 --> 00:01:12.910
So if 3 is less we push 3 on there,
and so we slice it, this is gone.

20
00:01:12.910 --> 00:01:16.170
So now we're have 27 and we have 9,
and we say, which is less?

21
00:01:16.170 --> 00:01:17.580
Okay, then we put 9.

22
00:01:17.580 --> 00:01:20.600
Okay, then that goes away and

23
00:01:20.600 --> 00:01:24.700
now we're still with 27 and
we're looking at 10, 10 is less.

24
00:01:24.700 --> 00:01:27.970
And then we keep going through that
until we build up our final array and

25
00:01:27.970 --> 00:01:28.900
that's the merge step.

26
00:01:28.900 --> 00:01:32.306
So this is the conquer part of
the divide and conquer algorithm.

27
00:01:32.306 --> 00:01:37.886
We're conquering it
through this merge step.

28
00:01:37.886 --> 00:01:43.258
So what does that look like in code?
&gt;&gt; Bianca Gandolfo: Merge,

29
00:01:43.258 --> 00:01:50.768
left and right.
&gt;&gt; Bianca Gandolfo: Let's look at,

30
00:01:50.768 --> 00:01:56.870
let's try and
think of the fastest way to do this.

31
00:01:56.870 --> 00:02:01.850
Let's just pseudocode it right together.

32
00:02:01.850 --> 00:02:04.340
Okay, so we went through the logic.

33
00:02:04.340 --> 00:02:06.390
Usually I would have you guys
do this as an exercise, but

34
00:02:06.390 --> 00:02:12.470
we went through the logic
of the merge routine.

35
00:02:12.470 --> 00:02:14.203
But let's pseudocode it out.

36
00:02:14.203 --> 00:02:18.482
So we have a left list and
we have a right list.

37
00:02:18.482 --> 00:02:21.796
So what was our example?

38
00:02:21.796 --> 00:02:27.683
So let's say it is 3, 27
&gt;&gt; Bianca Gandolfo: So,

39
00:02:27.683 --> 00:02:31.003
3, 27, etc.

40
00:02:31.003 --> 00:02:36.388
And then our second list
is going to be 9 and

41
00:02:36.388 --> 00:02:41.486
10, [INAUDIBLE] a little bit shorter.

42
00:02:41.486 --> 00:02:42.869
So, 9 and 10.

43
00:02:42.869 --> 00:02:47.228
So we're going to compare

44
00:02:47.228 --> 00:02:52.980
the first index of the left array,

45
00:02:55.977 --> 00:03:00.713
&gt;&gt; Bianca Gandolfo: To the first index of

46
00:03:00.713 --> 00:03:04.898
the right array.

47
00:03:09.915 --> 00:03:11.724
&gt;&gt; Bianca Gandolfo: Then, actually,

48
00:03:11.724 --> 00:03:17.510
the very first thing we want to
do is initialize empty array.

49
00:03:17.510 --> 00:03:20.340
We initialize an empty array.

50
00:03:20.340 --> 00:03:25.110
And then, you want to push the lower value

51
00:03:26.130 --> 00:03:31.110
to the empty array, vabloo,
value, to empty array.

52
00:03:32.390 --> 00:03:35.945
And then you want to unshift or whatever.

53
00:03:35.945 --> 00:03:41.118
Shift, unshift?
&gt;&gt; Speaker 2: Unshift is [INAUDIBLE]

54
00:03:41.118 --> 00:03:42.730
&gt;&gt; Bianca Gandolfo: What?

55
00:03:42.730 --> 00:03:46.234
We wanna remove the first one.
&gt;&gt; Speaker 2: Shift.

56
00:03:46.234 --> 00:03:48.771
&gt;&gt; Bianca Gandolfo: Thank you.

57
00:03:48.771 --> 00:03:51.983
We want to shift the.

58
00:03:51.983 --> 00:03:53.362
Yeah, I always get them,

59
00:03:53.362 --> 00:03:58.010
cuz it seems like unshift sounds
like you're taking something off.

60
00:03:58.010 --> 00:04:02.530
Shift the.
&gt;&gt; Speaker 2: Original array?

61
00:04:02.530 --> 00:04:03.170
&gt;&gt; Bianca Gandolfo: Yeah,

62
00:04:03.170 --> 00:04:05.040
the array with the lower value.

63
00:04:06.040 --> 00:04:08.270
So you're going to remove that first one.

64
00:04:09.510 --> 00:04:14.150
Then you're going to repeat

65
00:04:17.040 --> 00:04:22.030
until both arrays are empty.
&gt;&gt; Speaker 2: In this case you'll

66
00:04:22.030 --> 00:04:24.483
be comparing 9 to 27?
&gt;&gt; Bianca Gandolfo: Mm-hm.

67
00:04:24.483 --> 00:04:30.603
So If we are going to
look at it like this.

68
00:04:30.603 --> 00:04:34.860
So we have our two arrays,
we're gonna say is 3 less than 9?

69
00:04:34.860 --> 00:04:39.222
We can initialize our empty one here,
we say yes.

70
00:04:39.222 --> 00:04:46.036
We add 3, we're going to shift that and
then we are still keeping track.

71
00:04:46.036 --> 00:04:51.436
So we're gonna need to be
incrementing the indices here.

72
00:04:51.436 --> 00:04:55.850
We're keeping track here,
you can do that with a while loop.

73
00:04:56.980 --> 00:04:58.520
And then we say, which one's less?

74
00:04:58.520 --> 00:05:03.430
9, okay, we're gonna push 9 here and
we're gonna shift that one.

75
00:05:04.790 --> 00:05:06.360
And then we find this one.

76
00:05:08.410 --> 00:05:14.528
And then, now this one is empty,
so all we have left is 27.

77
00:05:14.528 --> 00:05:21.520
And so this one is empty, and then you
would just return this sorted list.

78
00:05:21.520 --> 00:05:27.330
And you're gonna keep doing that for
each height.

79
00:05:28.810 --> 00:05:32.280
So you start with just two and
then you go to four and

80
00:05:32.280 --> 00:05:34.440
then you're going to do the entire list.

81
00:05:34.440 --> 00:05:35.990
So that's the core.

82
00:05:35.990 --> 00:05:40.910
That's the meat of the merge sort
algorithm, this merge routine.

83
00:05:43.590 --> 00:05:45.630
This is the divide part.

84
00:05:45.630 --> 00:05:49.683
So you're gonna keep dividing it in
half until you get a sorted list of one.

85
00:05:49.683 --> 00:05:56.173
So our base case is when
array dot length equals one.

86
00:05:56.173 --> 00:05:57.090
So that's our base case.

87
00:05:57.090 --> 00:06:02.114
We're gonna start returning from that.

88
00:06:02.114 --> 00:06:07.582
And once we start returning, so
after we return from our recursion,

89
00:06:07.582 --> 00:06:14.126
we are going to start doing our merge.
&gt;&gt; Bianca Gandolfo: So

90
00:06:14.126 --> 00:06:21.638
we go all the way down to our base case,
and then we hit a return.

91
00:06:21.638 --> 00:06:24.008
My goodness.

92
00:06:24.008 --> 00:06:29.059
And then we return.
&gt;&gt; Bianca Gandolfo: And after,

93
00:06:29.059 --> 00:06:34.500
where we're returning our merge
step each step of the way.

94
00:06:35.590 --> 00:06:39.090
Here is a visualization
you can take a look at.

95
00:06:39.090 --> 00:06:42.297
There's also this really
funny YouTube video,

96
00:06:42.297 --> 00:06:46.912
where they're doing Eastern European
sorts, or they're dancing at

97
00:06:46.912 --> 00:06:51.778
Eastern European type Style to
different sorts, that's kind of funny.

98
00:06:51.778 --> 00:06:55.850
And there's lots of visualizations
that you can take a look at.

99
00:06:56.890 --> 00:07:04.030
Okay, so here our base case is if list,
that length is one or less than two.

100
00:07:04.030 --> 00:07:07.280
You're going to break the list in halves.

101
00:07:07.280 --> 00:07:09.820
You're gonna mergesort left,
mergesort right.

102
00:07:09.820 --> 00:07:13.080
And then you're gonna merge
the left sorted and the left right

