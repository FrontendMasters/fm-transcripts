WEBVTT

1
00:00:00.720 --> 00:00:04.645
&gt;&gt; Bianca Gandolfo: All right, so
we are going to go over the solution for

2
00:00:04.645 --> 00:00:08.446
linearSearch.
&gt;&gt; Bianca Gandolfo: We're

3
00:00:08.446 --> 00:00:09.050
gonna hop right in.

4
00:00:10.170 --> 00:00:14.460
All right, so the first thing you want
to do is we're gonna need a loop.

5
00:00:14.460 --> 00:00:20.680
We can do just a simple,
let's do forEach, just for fun.

6
00:00:21.700 --> 00:00:27.756
So, we are going to
look at each list item,

7
00:00:27.756 --> 00:00:34.080
and we're going just check if
list item equals our item.

8
00:00:35.760 --> 00:00:40.210
If that's true,
we can return a few things here.

9
00:00:40.210 --> 00:00:42.090
We can return the index.

10
00:00:42.090 --> 00:00:45.750
We could return true,
we could return false.

11
00:00:45.750 --> 00:00:48.250
In this case I'm just
gonna return the index.

12
00:00:48.250 --> 00:00:55.990
So we're gonna say var,
we're gonna say let index equals.

13
00:00:55.990 --> 00:00:59.160
So typically when we're doing a search.

14
00:00:59.160 --> 00:01:02.190
Negative one means that it wasn't found,
so

15
00:01:02.190 --> 00:01:06.470
as a typical base for
not found we'll just do negative one.

16
00:01:06.470 --> 00:01:10.883
So that's why I'm initializing
the index as negative one,

17
00:01:10.883 --> 00:01:15.383
so if list item equal item,
we're gonna need to actually have

18
00:01:15.383 --> 00:01:19.830
a second,
&gt;&gt; Bianca Gandolfo: Parameter here.

19
00:01:19.830 --> 00:01:24.170
So the API forEach when it
calls the callback function.

20
00:01:24.170 --> 00:01:26.000
The first thing it calls
it with is each item.

21
00:01:27.510 --> 00:01:29.800
So the first time, it'll be 2.

22
00:01:29.800 --> 00:01:31.740
And it also passes the index.

23
00:01:31.740 --> 00:01:34.230
So in this case, for 2, the index is 0.

24
00:01:34.230 --> 00:01:36.950
So it's gonna loop through.

25
00:01:36.950 --> 00:01:41.310
So if the listItem equals item,
we are going to

26
00:01:43.230 --> 00:01:52.680
update our index to the current index,
and there are a few things to consider.

27
00:01:52.680 --> 00:01:58.230
So if you have multiple 90s in this list,
how do you handle that?

28
00:01:58.230 --> 00:02:00.050
Do you want to return the first one?

29
00:02:00.050 --> 00:02:01.270
Do you want to return the last one?

30
00:02:01.270 --> 00:02:03.240
These are things that you should
be asking your interviewer,

31
00:02:03.240 --> 00:02:07.210
and it's going to affect
this conditional here.

32
00:02:07.210 --> 00:02:08.360
Make sure you always do triple equals.

33
00:02:10.560 --> 00:02:14.500
So, in this case, what it's gonna
do is it's always gonna return

34
00:02:14.500 --> 00:02:16.210
the last index if there's a duplicate.

35
00:02:16.210 --> 00:02:19.150
So just keep that in mind, and
that's okay for our solution,

36
00:02:20.360 --> 00:02:25.460
we just need to return the index.

37
00:02:25.460 --> 00:02:27.802
So if it doesn't find anything,
it's just gonna return negative 1.

38
00:02:27.802 --> 00:02:28.359
&gt;&gt; Speaker 2: Okay,

39
00:02:28.359 --> 00:02:31.030
how does it know what the value of i is?

40
00:02:31.030 --> 00:02:35.880
It just knows that, hey, since we
passed in an array as an argument,

41
00:02:35.880 --> 00:02:41.620
I know it inherently will have an index.
&gt;&gt; Bianca Gandolfo: So underneath for

42
00:02:41.620 --> 00:02:45.970
each, you can imagine in
the internals of JavaScript,

43
00:02:45.970 --> 00:02:50.650
it's looping and
it's calling this function, and

44
00:02:50.650 --> 00:02:53.706
when it invokes the function it
passes three things actually.

45
00:02:53.706 --> 00:02:57.620
It passes the item, it passes
the index and it passes the list.

46
00:02:57.620 --> 00:03:00.731
So,
&gt;&gt; Bianca Gandolfo: Yeah,

47
00:03:00.731 --> 00:03:03.150
that's just how it works, yeah.

48
00:03:03.150 --> 00:03:07.540
Often if you don't need the index,
you don't need to reference it, but

49
00:03:07.540 --> 00:03:09.600
it's there if you want it, yeah, exactly.

50
00:03:11.030 --> 00:03:18.870
Okay, let's check our solution, 0,
1, 2, 3, cool and then you search.

51
00:03:18.870 --> 00:03:19.390
Any question?

52
00:03:19.390 --> 00:03:21.884
What do we think the time complexity
of something like this is?

53
00:03:24.683 --> 00:03:25.542
&gt;&gt; Speaker 3: Linear.

54
00:03:25.542 --> 00:03:26.852
&gt;&gt; Bianca Gandolfo: Linear, yeah,

55
00:03:26.852 --> 00:03:28.640
yeah, exactly.

56
00:03:28.640 --> 00:03:32.510
Cuz in the worst case,
90 is always at the end, right?

57
00:03:32.510 --> 00:03:39.370
And you'd have to run through
the entire array until you get to 90.

58
00:03:39.370 --> 00:03:44.760
Now, best case is the first one and
then it would just be, do one thing but

59
00:03:44.760 --> 00:03:48.520
we're kind of thinking in worst case and
we're thinking about in general.

60
00:03:48.520 --> 00:03:52.040
Not for a specific example when
we're estimating time complexity.

61
00:03:55.661 --> 00:03:57.118
&gt;&gt; Bianca Gandolfo: All right,

62
00:03:57.118 --> 00:03:59.195
any questions?

63
00:03:59.195 --> 00:04:01.430
Mm-hm.
&gt;&gt; Speaker 4: I thought we mentioned

64
00:04:01.430 --> 00:04:05.690
previously that the for each and the map
were a little bit more complicated,

65
00:04:05.690 --> 00:04:08.880
was this?
&gt;&gt; Bianca Gandolfo: They are in a way,

66
00:04:08.880 --> 00:04:12.560
you can consider, so for
each is just a loop under the hood.

67
00:04:12.560 --> 00:04:15.920
The thing that makes it a little
more complicated is that

68
00:04:15.920 --> 00:04:18.860
it kind of depends on what
you're doing in the callback.

69
00:04:18.860 --> 00:04:22.840
So, since in this callback we're only
doing constant timed operations.

70
00:04:22.840 --> 00:04:24.880
We're doing a comparison check.

71
00:04:24.880 --> 00:04:27.240
We are assigning a variable.

72
00:04:27.240 --> 00:04:28.180
Those are all constant.

73
00:04:28.180 --> 00:04:29.900
We don't have to worry about it.

74
00:04:29.900 --> 00:04:33.320
However, if this was
doing maybe another loop.

75
00:04:33.320 --> 00:04:39.600
If it was doing some recursion or was
doing something that wasn't constant time.

76
00:04:39.600 --> 00:04:44.480
Then that's when it gets
a little more complicated.

77
00:04:44.480 --> 00:04:45.171
Yeah, good question.

