WEBVTT

1
00:00:02.242 --> 00:00:03.502
&gt;&gt; Bianca Gandolfo: So
we talked about speed.

2
00:00:03.502 --> 00:00:06.650
Are you guys ready to make it faster?

3
00:00:06.650 --> 00:00:12.761
Let's check our time, okay.
&gt;&gt; Bianca Gandolfo: So,

4
00:00:16.549 --> 00:00:18.167
&gt;&gt; Bianca Gandolfo: What is the time

5
00:00:18.167 --> 00:00:21.530
complexity of this algorithm?

6
00:00:21.530 --> 00:00:26.230
So this algorithm returns if
an array is unique or not unique.

7
00:00:26.230 --> 00:00:31.420
It does so
by comparing each item to one another.

8
00:00:31.420 --> 00:00:37.382
So we could spread this out a little bit.
&gt;&gt; Bianca Gandolfo: So

9
00:00:37.382 --> 00:00:39.741
we have our first loop is looping
through the length of the array.

10
00:00:39.741 --> 00:00:41.869
We have the second loop is
looping through the length of

11
00:00:41.869 --> 00:00:42.690
the array.
&gt;&gt; Speaker 2: Is it

12
00:00:42.690 --> 00:00:44.050
n squared?
&gt;&gt; Bianca Gandolfo: Mm-hm.

13
00:00:44.050 --> 00:00:46.150
&gt;&gt; Speaker 2: Quadratic [INAUDIBLE]

14
00:00:46.150 --> 00:00:47.130
&gt;&gt; Bianca Gandolfo: Yeah, exactly.

15
00:00:47.130 --> 00:00:52.167
Quadratic, and we can see I have
some console logs here so that we

16
00:00:52.167 --> 00:00:59.448
can see where n is 3.
&gt;&gt; Bianca Gandolfo: We

17
00:00:59.448 --> 00:01:04.370
have at least 6, sorry, 9.

18
00:01:04.370 --> 00:01:06.100
So we start with the outer loop.

19
00:01:06.100 --> 00:01:08.330
Then we do the inner loop three times.

20
00:01:08.330 --> 00:01:11.160
Outer loop, inner loop three times.

21
00:01:11.160 --> 00:01:17.545
And so that's gonna be 9,

22
00:01:17.545 --> 00:01:22.300
9,
&gt;&gt; Bianca Gandolfo: Steps, more or less.

23
00:01:24.180 --> 00:01:27.410
Cool, all right, well, we can do better.

24
00:01:27.410 --> 00:01:29.130
This is our first technique.

25
00:01:29.130 --> 00:01:30.114
I call it the breadcrumb method.

26
00:01:30.114 --> 00:01:33.900
I'm not sure where I got that from,
to be honest.

27
00:01:33.900 --> 00:01:35.170
It could be very common.

28
00:01:35.170 --> 00:01:38.161
It could also just be something I made up.

29
00:01:38.161 --> 00:01:42.392
But essentially what you do with the bread
crumb method is that you're keeping track

30
00:01:42.392 --> 00:01:44.810
of things that you've already seen.

31
00:01:44.810 --> 00:01:46.516
It's also called caching.

32
00:01:46.516 --> 00:01:48.950
Right, so once we see something,
we save it and

33
00:01:48.950 --> 00:01:52.785
then we can do a property look
up on an object, which is what?

34
00:01:52.785 --> 00:01:54.540
What's the time complexity
of our copy look up?

35
00:01:54.540 --> 00:01:56.460
Which is a constant time operation, so

36
00:01:56.460 --> 00:02:02.030
instead of having to do more work,
again, we just take a look.

37
00:02:02.030 --> 00:02:07.600
So in this case we're gonna do
one loop through the array.

38
00:02:07.600 --> 00:02:10.410
And if we have already found it before.

39
00:02:10.410 --> 00:02:14.960
So if we haven't found it, let's start
with that, we're going to save that value

40
00:02:16.520 --> 00:02:19.390
to the object, and set it to true.

41
00:02:19.390 --> 00:02:24.050
So the next time we run into that,
we simply check,

42
00:02:24.050 --> 00:02:27.490
this is a constant time operation,
check if we've seen it before.

43
00:02:28.540 --> 00:02:31.310
And if we have,
then we know it's not unique,

44
00:02:31.310 --> 00:02:35.820
versus the first method where
we have to have two loops.

45
00:02:35.820 --> 00:02:38.680
We were comparing each one to one another.

46
00:02:38.680 --> 00:02:40.530
That's going to be quadratic time.

47
00:02:40.530 --> 00:02:45.050
When we use the breadcrumbs technique we
could take a quadratic time algorithm and

48
00:02:45.050 --> 00:02:45.870
make it linear.

49
00:02:45.870 --> 00:02:48.030
And so huge gains in performance.

50
00:02:48.030 --> 00:02:52.310
Something that essentially can't even
ever be completed in quadratic time is so

51
00:02:52.310 --> 00:02:56.910
slow to something that's pretty easy
to manage with a large data set.

52
00:02:56.910 --> 00:02:58.710
&gt;&gt; Speaker 2: This is common nomenclature,

53
00:02:58.710 --> 00:03:00.510
to refer to it as breadcrumbs?

54
00:03:00.510 --> 00:03:02.480
Or is it just like your favorite-
&gt;&gt; Bianca Gandolfo: I don't know.

55
00:03:02.480 --> 00:03:05.450
Like I was saying,
I'm not sure where I got that from.

56
00:03:05.450 --> 00:03:07.600
Have you ever heard of
it called breadcrumbs?

57
00:03:07.600 --> 00:03:14.620
It's caching, but I call it breadcrumbs,
cuz I like that mental image.

58
00:03:14.620 --> 00:03:17.284
And then we can see here,
inside of our loop,

59
00:03:17.284 --> 00:03:23.026
we're only looping three times
&gt;&gt; Bianca Gandolfo: Whereas before,

60
00:03:23.026 --> 00:03:28.032
we are looping multiple times.
&gt;&gt; Bianca Gandolfo: Cool,

61
00:03:28.032 --> 00:03:31.360
so easy optimization,
we're just gonna cache the result.

