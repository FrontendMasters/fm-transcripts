WEBVTT

1
00:00:00.330 --> 00:00:03.650
&gt;&gt; Bianca: All right, so
let's take a look at our solution.

2
00:00:04.900 --> 00:00:08.860
So we're going to use
the breadcrumbs method.

3
00:00:08.860 --> 00:00:13.080
Which is a way of caching values, so

4
00:00:13.080 --> 00:00:19.530
that we can keep track and
remember values that we've already seen.

5
00:00:19.530 --> 00:00:24.050
And this method has a trade-off between,
it speeds up our algorithm,

6
00:00:24.050 --> 00:00:29.690
but it does something with
our space complexity.

7
00:00:29.690 --> 00:00:36.190
So as in rows, we are caching more
values to our breadcrumb object.

8
00:00:36.190 --> 00:00:41.150
Which means that we have a linear space
complexity that we need to consider

9
00:00:42.370 --> 00:00:43.210
with this algorithm.

10
00:00:43.210 --> 00:00:46.720
So we're doing a trade-off,
time for space.

11
00:00:46.720 --> 00:00:49.640
Which in most cases is fine, but
it's just something to be aware of.

12
00:00:50.740 --> 00:00:56.930
So our task was to take a sorting
algorithm and turn it into a unique

13
00:00:56.930 --> 00:01:02.130
sort algorithm, which means that we wanna
return an array with no duplicates.

14
00:01:02.130 --> 00:01:06.918
And so you can see our demo data
here has a bunch of 2s in it.

15
00:01:06.918 --> 00:01:10.216
And we simply wanna return 2, 3, 4.

16
00:01:10.216 --> 00:01:14.140
And any duplicates, we want to ignore.

17
00:01:14.140 --> 00:01:15.780
So how are we gonna go about doing that?

18
00:01:15.780 --> 00:01:20.225
So first thing we're gonna do is, we're
gonna set up our breadcrumbs object here.

19
00:01:20.225 --> 00:01:24.322
You can also call this cache, if you want.

20
00:01:24.322 --> 00:01:27.650
And this is where we're gonna keep track
of all values that we've seen before.

21
00:01:27.650 --> 00:01:30.410
If we've seen it before and
we come across it again,

22
00:01:30.410 --> 00:01:34.530
we know that we don't need to
push that value to our result.

23
00:01:34.530 --> 00:01:38.690
So we'll start our result of here, right?

24
00:01:38.690 --> 00:01:43.280
And this is another thing to keep a note
of in terms of the trade-off between time

25
00:01:43.280 --> 00:01:47.030
complexity and space complexity, is that
we're creating a brand new array here.

26
00:01:47.030 --> 00:01:49.584
So not only are we creating a new object,

27
00:01:49.584 --> 00:01:54.080
we're are also creating an array
to push into all of our results.

28
00:01:54.080 --> 00:01:59.031
There are other ways that you can do this
without pushing into a new array, but

29
00:01:59.031 --> 00:02:01.560
this is the easiest way to get started.

30
00:02:01.560 --> 00:02:02.510
But just keep that in mind.

31
00:02:04.480 --> 00:02:08.785
So the first thing we're gonna do is,

32
00:02:08.785 --> 00:02:14.434
we're gonna loop through
the length of our list,

33
00:02:14.434 --> 00:02:20.504
and we're gonna check if
we haven't seen it before.

34
00:02:20.504 --> 00:02:21.756
How do we know we haven't seen it before?

35
00:02:21.756 --> 00:02:27.990
It's because when we look up array of i,
so i is gonna start at 1, right?

36
00:02:27.990 --> 00:02:31.330
We're just assuming the very first
one is not a duplicate, right?

37
00:02:32.390 --> 00:02:36.460
So then we're gonna start at the second
one, which is gonna be this 2.

38
00:02:36.460 --> 00:02:41.730
So array at one is actually 2.

39
00:02:43.350 --> 00:02:49.230
And so if we do a lookup of
breadcrumbs with the key 2,

40
00:02:49.230 --> 00:02:54.900
what is it gonna return for
us at this point where i is 1?

41
00:02:54.900 --> 00:02:59.190
Our very first loop.
&gt;&gt; Bianca: At this point, so i is 1.

42
00:02:59.190 --> 00:03:02.130
We haven't actually saved anything yet
to our breadcrumbs.

43
00:03:02.130 --> 00:03:04.960
So it's the very first scenario.

44
00:03:04.960 --> 00:03:06.510
So we initialize it as empty.

45
00:03:06.510 --> 00:03:11.907
And so we're saying,
what is breadcrumbs at 2?

46
00:03:11.907 --> 00:03:16.305
It's gonna be undefined,
because breadcrumbs is empty at this

47
00:03:16.305 --> 00:03:20.700
point.
&gt;&gt; Speaker 2: This is where I'm

48
00:03:20.700 --> 00:03:21.460
getting tripped up.

49
00:03:21.460 --> 00:03:25.900
So if it's an object, I'm used to thinking
of an object as a key value pair, right?

50
00:03:25.900 --> 00:03:26.970
So how are we saving this?

51
00:03:26.970 --> 00:03:29.832
Are we saying this index of i,

52
00:03:29.832 --> 00:03:33.020
this is the value?
&gt;&gt; Bianca: Well, this is a lookup.

53
00:03:33.020 --> 00:03:35.550
This isn't, so
we're not saving any data right now.

54
00:03:35.550 --> 00:03:37.580
At this point, we're just looking up.

55
00:03:37.580 --> 00:03:41.278
We're like, is this data on our object.
&gt;&gt; Speaker 2: Okay.

56
00:03:41.278 --> 00:03:43.260
&gt;&gt; Bianca: And so we do a lookup.

57
00:03:43.260 --> 00:03:46.405
And if it returns undefined,
then we know that we haven't-

58
00:03:46.405 --> 00:03:47.010
&gt;&gt; Speaker 2: Found it.

59
00:03:47.010 --> 00:03:48.870
&gt;&gt; Bianca: Yeah, we haven't seen it yet,

60
00:03:48.870 --> 00:03:50.370
so good question.

61
00:03:50.370 --> 00:03:54.900
So this says, if this is false or
undefined, right,

62
00:03:54.900 --> 00:03:57.408
we're gonna force this into a boolean.

63
00:03:57.408 --> 00:04:00.210
So undefined is gonna be false.

64
00:04:00.210 --> 00:04:01.980
So this condition is true.

65
00:04:01.980 --> 00:04:06.230
Since this condition is true, we're gonna
enter it into the body of this if block.

66
00:04:07.230 --> 00:04:09.370
And so, since we haven't seen it before,

67
00:04:09.370 --> 00:04:13.150
we're gonna push that item
into our result array.

68
00:04:13.150 --> 00:04:19.768
So now our result array has,
&gt;&gt; Bianca: It has 4, and it also has 2.

69
00:04:19.768 --> 00:04:26.370
Can you guys see this on the bottom?
&gt;&gt; Bianca: And then our cache is empty,

70
00:04:26.370 --> 00:04:31.340
we're only here.
&gt;&gt; Bianca: I

71
00:04:31.340 --> 00:04:36.172
found a bug already.
&gt;&gt; Bianca: Then we're going

72
00:04:36.172 --> 00:04:38.290
to run this operation.

73
00:04:38.290 --> 00:04:39.680
This is a constant time operation,

74
00:04:39.680 --> 00:04:44.080
where we're saving a value
to our breadcrumbs object.

75
00:04:44.080 --> 00:04:48.383
So array at i is what again?
&gt;&gt; Bianca: 2, and

76
00:04:48.383 --> 00:04:50.820
then we're giving it the value true.

77
00:04:52.930 --> 00:04:59.000
That way, when we run into this condition
again, we look up 2 in the very next one.

78
00:04:59.000 --> 00:05:04.664
So i is now 2, array at 2 is 2.

79
00:05:04.664 --> 00:05:07.210
There's a lot of 2s going on,
so our very next one is 2.

80
00:05:08.990 --> 00:05:12.410
And have we seen that before?
&gt;&gt; Speaker 2: No.

81
00:05:12.410 --> 00:05:17.000
&gt;&gt; Bianca: So does array at i, which is 2,

82
00:05:17.000 --> 00:05:19.950
what does this evaluate to?

83
00:05:19.950 --> 00:05:21.860
We're gonna look up on
our breadcrumbs object.

84
00:05:21.860 --> 00:05:24.980
We see 2 is there, and
it's gonna evaluate to true.

85
00:05:24.980 --> 00:05:26.170
So is it false?

86
00:05:26.170 --> 00:05:29.509
No, since it's not false,

87
00:05:29.509 --> 00:05:33.980
we're going to skip this condition.

88
00:05:33.980 --> 00:05:36.418
And we'll go to the next one.

89
00:05:36.418 --> 00:05:36.989
Yep?
&gt;&gt; Speaker 3: I have

90
00:05:36.989 --> 00:05:37.879
a question.
&gt;&gt; Bianca: Sure.

91
00:05:37.879 --> 00:05:39.731
&gt;&gt; Speaker 3: So you haven't, you never-

92
00:05:39.731 --> 00:05:40.491
&gt;&gt; Bianca: Can you speak up just

93
00:05:40.491 --> 00:05:41.790
a little bit more?
&gt;&gt; Speaker 3: Yeah,

94
00:05:41.790 --> 00:05:47.200
you never push 4 to breadcrumbs,
and so it is never true.

95
00:05:47.200 --> 00:05:52.730
So if you have another 4,
I feel that the breadcrumbs would

96
00:05:52.730 --> 00:05:56.320
evaluate to false and then push the 4 in?
&gt;&gt; Bianca: Yeah, absolutely, so

97
00:05:56.320 --> 00:05:57.590
that's the bug-
&gt;&gt; Speaker 3: Okay.

98
00:05:57.590 --> 00:05:58.653
&gt;&gt; Bianca: In our code, yeah,

99
00:05:58.653 --> 00:05:59.470
good finding.

100
00:05:59.470 --> 00:06:03.873
So how do we manage that bug,

101
00:06:03.873 --> 00:06:09.319
how do we fix that?
&gt;&gt; Speaker 2: Just start at i equals 0,

102
00:06:09.319 --> 00:06:14.759
and then empty result array, no?
&gt;&gt; Bianca: Well, that's what I would do.

103
00:06:14.759 --> 00:06:16.838
I see, so you're saying we could do this?

104
00:06:16.838 --> 00:06:19.179
Yeah, that's another way.
&gt;&gt; [CROSSTALK]

105
00:06:19.179 --> 00:06:20.195
&gt;&gt; Bianca: Mm-hm, so

106
00:06:20.195 --> 00:06:22.230
we could do it that way.

107
00:06:22.230 --> 00:06:26.010
We can also just initialize breadcrumbs
with the first one in there.

108
00:06:26.010 --> 00:06:30.206
Both are good, cool.

109
00:06:34.563 --> 00:06:35.970
&gt;&gt; Bianca: Cool, we can do it like that.

110
00:06:38.320 --> 00:06:40.750
But I don't wanna ruin the solution for
everyone.

111
00:06:42.540 --> 00:06:45.280
Okay, so I'm gonna keep the bug in there.

112
00:06:45.280 --> 00:06:49.923
Because as I edit these slides, it's gonna
update them for the other people who use

113
00:06:49.923 --> 00:06:57.794
it.
&gt;&gt; Bianca: Okay, so cool.

114
00:06:57.794 --> 00:07:02.640
So then as we go through all these 2s,
we already found it.

115
00:07:02.640 --> 00:07:06.470
So we're gonna keep skipping this if,
until we get to which index?

116
00:07:06.470 --> 00:07:12.720
Zero, one, two, the third index,
which is inconveniently valued at 3.

117
00:07:12.720 --> 00:07:14.910
Or very conveniently, even.

118
00:07:14.910 --> 00:07:17.940
So where I is 3, array at i is 3.

119
00:07:21.260 --> 00:07:27.750
So then we do the lookup,
breadcrumbs at 3, does it exist?

120
00:07:27.750 --> 00:07:28.620
No, it's undefined.

121
00:07:28.620 --> 00:07:30.480
So then we're gonna push it to our result.

122
00:07:30.480 --> 00:07:33.290
And then we're going to cache it, or

123
00:07:33.290 --> 00:07:37.510
simply save that value into
our object breadcrumbs.

124
00:07:39.480 --> 00:07:42.020
And so this is a way for
us to remember and

125
00:07:42.020 --> 00:07:44.215
keep track of values that
we've seen in the past.

126
00:07:44.215 --> 00:07:49.220
A couple hiccups, just like we saw the bug
with, we forgot to cache the first one.

127
00:07:49.220 --> 00:07:55.905
There is also the problem of objects,
the keys of an object are always a string.

128
00:07:55.905 --> 00:08:00.774
And so
it might be wise to JSON.stringify a value

129
00:08:00.774 --> 00:08:04.910
before you save it as a key in an object.

130
00:08:04.910 --> 00:08:06.886
Otherwise, you can use
a different data structure.

131
00:08:06.886 --> 00:08:09.970
If you're using ES6,
you can use a map data structure,

132
00:08:09.970 --> 00:08:13.110
where the keys can have different values,
not just a string.

133
00:08:13.110 --> 00:08:16.880
So those are a couple things to
keep in mind with this technique.

134
00:08:16.880 --> 00:08:21.850
But this is just a cool way
to speed up your algorithms

135
00:08:21.850 --> 00:08:26.450
from quadratic to linear, all right?

136
00:08:26.450 --> 00:08:34.940
So this is linear because we have a loop,
this lookup is gonna be constant.

137
00:08:34.940 --> 00:08:40.740
This push is constant, this saving is
constant, in terms of timing complexity.

138
00:08:42.750 --> 00:08:48.271
This is gonna be linear, however our
sorting is a little bit more complex.

139
00:08:50.230 --> 00:08:53.880
And sorting we can think of
as inlogging a general sense.

