WEBVTT

1
00:00:00.000 --> 00:00:02.138
&gt;&gt; Scott Moss: Yes.

2
00:00:02.138 --> 00:00:07.270
&gt;&gt; Speaker 2: When I'm writing resolvers,
do I need to worry about concurrency?

3
00:00:07.270 --> 00:00:12.162
&gt;&gt; [SOUND]
&gt;&gt; Scott Moss: It depends on what language

4
00:00:12.162 --> 00:00:12.863
you're using.

5
00:00:12.863 --> 00:00:18.313
[LAUGH] Yeah, if you're using Node,
do you need to worry about concurrency?

6
00:00:18.313 --> 00:00:21.090
Yeah, you do.

7
00:00:21.090 --> 00:00:22.160
I can't speak for other languages.

8
00:00:22.160 --> 00:00:24.179
But yeah,
you do need to keep in mind concurrency.

9
00:00:24.179 --> 00:00:27.472
And it really depends on the client,
see, because if we're using Apollo,

10
00:00:27.472 --> 00:00:29.590
like I said,
Apollo will batch queries for you.

11
00:00:29.590 --> 00:00:32.546
So if I'm a client,
if I send up ten queries, and one loop,

12
00:00:32.546 --> 00:00:34.920
one event loop is gonna batch all of them.

13
00:00:34.920 --> 00:00:38.260
And it's going to take every single one of
those queries and run them in parallel.

14
00:00:38.260 --> 00:00:40.600
So your database is gonna
get hit in parallel.

15
00:00:40.600 --> 00:00:46.010
And if one of those things is depending
on a value but something else just had

16
00:00:46.010 --> 00:00:50.030
a race condition to finish before it and
updated the cache, everything's messed up.

17
00:00:50.030 --> 00:00:52.440
So, yeah, you have to deal with that.

18
00:00:52.440 --> 00:00:56.500
You can turn up batching if you want,
which will help it.

19
00:00:56.500 --> 00:01:01.370
But if you write it in a way that
where concurrency didn't matter,

20
00:01:01.370 --> 00:01:02.730
not from a performance standpoint, but

21
00:01:02.730 --> 00:01:06.390
from this data correct standpoint,
then you won't have to worry about it.

22
00:01:06.390 --> 00:01:09.930
But for performance, 100% gonna
have to worry about concurrency.

23
00:01:11.240 --> 00:01:12.740
Any questions online?

24
00:01:12.740 --> 00:01:13.400
&gt;&gt; Speaker 3: There's one,

25
00:01:13.400 --> 00:01:18.540
can we have links to any good open
source projects using GraphQL probably?

26
00:01:18.540 --> 00:01:20.510
&gt;&gt; Scott Moss: My God,
there's so many of them.

27
00:01:20.510 --> 00:01:27.178
Okay, okay, Prisma is a good one,
never used it, but I know it's good.

28
00:01:27.178 --> 00:01:33.286
Basically, it creates an ORM based
off a database for your graph.

29
00:01:33.286 --> 00:01:38.907
Actually, it has nothing to do with graph
I think they moved away from GraphQL but

30
00:01:38.907 --> 00:01:42.345
it basically creates a really
sick ORM that you can use.

31
00:01:42.345 --> 00:01:47.237
So instead of using something like
ctx.models.Pet.create, you get a type

32
00:01:47.237 --> 00:01:51.905
checked or that's validated against
some database schema that you have,

33
00:01:51.905 --> 00:01:54.072
no matter what database you have.

34
00:01:54.072 --> 00:01:56.644
And they started off using it with
GraphQL, but they kinda just like,

35
00:01:56.644 --> 00:01:58.540
actually this works for everything.

36
00:01:58.540 --> 00:02:01.450
So, they've made a lot of product changes,
and this is one of them.

37
00:02:01.450 --> 00:02:02.980
So I would check them out, really cool.

38
00:02:02.980 --> 00:02:08.960
I already talked about Hasura, these folks
are really cool, super talented people.

39
00:02:08.960 --> 00:02:11.014
That's really good.

40
00:02:11.014 --> 00:02:14.806
Another one is graphql-anywhere.

41
00:02:16.711 --> 00:02:19.220
&gt;&gt; Scott Moss: Which is
exactly what it sounds like.

42
00:02:19.220 --> 00:02:20.740
You can run graphql-anywhere.

43
00:02:20.740 --> 00:02:25.570
That's literally what it says here,
run a GraphQL query anywhere.

44
00:02:25.570 --> 00:02:26.610
What does that mean?

45
00:02:26.610 --> 00:02:29.950
Well, if you think about it, if all you
have was some resolvers, a schema and then

46
00:02:29.950 --> 00:02:33.920
a query, you could output anything, you
could execute that in any environment and

47
00:02:33.920 --> 00:02:36.460
that's basically what
graphql-anywhere does.

48
00:02:36.460 --> 00:02:41.720
I guess it's pretty low level but if you
start understanding GraphQL pretty well,

49
00:02:41.720 --> 00:02:44.902
you'll realize that you
can run graphql-anywhere.

50
00:02:44.902 --> 00:02:48.930
Like for instance, here's an example
of getting some REST response back from

51
00:02:48.930 --> 00:02:50.980
GitHub, and then executing it again,

52
00:02:50.980 --> 00:02:55.900
say GraphQL query client side and
getting back exactly what you asked for.

53
00:02:55.900 --> 00:02:57.360
So they're just picking and

54
00:02:57.360 --> 00:03:00.890
plucking from an object, and then we're
using GraphQL to query that object.

55
00:03:00.890 --> 00:03:02.460
So, there's a lot of different scenarios.

56
00:03:02.460 --> 00:03:06.380
Like I said, you can build applications
with this, you can write CSS with this.

57
00:03:06.380 --> 00:03:09.390
Here's an example of generating
React components using GraphQL.

58
00:03:10.750 --> 00:03:12.880
It gets pretty crazy, look at this.

59
00:03:12.880 --> 00:03:15.062
Look at this.
I don't know who would wanna do this, but-

60
00:03:15.062 --> 00:03:16.843
&gt;&gt; Group: [LAUGH]

61
00:03:16.843 --> 00:03:18.461
&gt;&gt; Scott Moss: You can do it.

62
00:03:18.461 --> 00:03:19.650
You can do it.

63
00:03:19.650 --> 00:03:20.710
It's possible, yes.

64
00:03:20.710 --> 00:03:25.517
&gt;&gt; Speaker 5: So,
I read about Apollo server that can

65
00:03:25.517 --> 00:03:30.490
deploy two cloud flares edge workers.

66
00:03:30.490 --> 00:03:31.235
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Speaker 5: And

67
00:03:31.235 --> 00:03:36.118
I was just wondering what you've
heard about that in terms of how

68
00:03:36.118 --> 00:03:39.210
well it performs in that situation.

69
00:03:39.210 --> 00:03:40.690
&gt;&gt; Scott Moss: Yeah, so
we use their products.

70
00:03:40.690 --> 00:03:42.030
We use it in beta.

71
00:03:42.030 --> 00:03:46.353
We use cloud for our workers in beta, we
were some of the first people to use them,

72
00:03:46.353 --> 00:03:48.461
I think it works pretty well actually.

73
00:03:48.461 --> 00:03:51.780
The thing with Apollo is that although
they're really good company and

74
00:03:51.780 --> 00:03:55.721
have a lot of good open source, they're
a product, they're trying to make money.

75
00:03:55.721 --> 00:03:58.633
So a lot of the stuff that's
really useful, you have to pay for

76
00:03:58.633 --> 00:04:02.441
after you've already used a lot of open
source stuff and to me I was like, I don't

77
00:04:02.441 --> 00:04:06.267
mind paying for it, but I'm already this
close, I might as well make it myself.

78
00:04:06.267 --> 00:04:09.456
So we end up just making stuff ourselves,
but I think it's really good if you opt

79
00:04:09.456 --> 00:04:12.940
into their ecosystem, especially on
something like Cloudflare Workers.

80
00:04:12.940 --> 00:04:18.732
Or another one which is like a fly.io,
which is just like Cloudfare Workers but

81
00:04:18.732 --> 00:04:23.847
I don't know, it might be better,
it depends on what you're doing.

82
00:04:23.847 --> 00:04:26.432
I think it works pretty good,
that's what's called a gateway,

83
00:04:26.432 --> 00:04:29.069
a GraphQL gateway,
that's basically what they're calling it.

84
00:04:29.069 --> 00:04:32.724
So it sits in front of, I mean,
it's your intro to your CDN,

85
00:04:32.724 --> 00:04:36.188
that can go anywhere,
you can talk to any single entity.

86
00:04:36.188 --> 00:04:40.409
So, basically you started
getting into what's called

87
00:04:40.409 --> 00:04:44.975
Apollo Federation,
&gt;&gt; Scott Moss: Which is basically

88
00:04:44.975 --> 00:04:48.595
creating a, yeah,
you just gotta read this.

89
00:04:48.595 --> 00:04:51.420
It's basically creating a,
[LAUGH] it's so complicated.

90
00:04:51.420 --> 00:04:56.670
You're creating a gateway
of many different services,

91
00:04:56.670 --> 00:04:59.400
all that also are GraphQL.

92
00:04:59.400 --> 00:05:01.160
And they all share the same schema.

93
00:05:01.160 --> 00:05:04.034
Yes, like a graph of graphs, and
they all know about each other.

94
00:05:04.034 --> 00:05:05.380
They know everything about each other.

95
00:05:05.380 --> 00:05:08.008
That's all type-safe and
it's all extendable.

96
00:05:08.008 --> 00:05:12.240
And you got different teams working on
stuff and nobody hurts anybody, it's that.

97
00:05:12.240 --> 00:05:13.860
And that's what you start getting into.

98
00:05:15.170 --> 00:05:16.120
Yeah, it's pretty crazy.

99
00:05:16.120 --> 00:05:19.507
Yeah, so I talked about graphql-yoga.

100
00:05:19.507 --> 00:05:22.441
This is something also
created by the Prisma team.

101
00:05:22.441 --> 00:05:25.877
It's just another alternative to the
Apollo server, it's a server for GraphQL,

102
00:05:25.877 --> 00:05:29.113
they have their own features, they all
follow the same specs, the same spec,

103
00:05:29.113 --> 00:05:30.210
you write the resolvers.

104
00:05:30.210 --> 00:05:33.070
Everything's exactly the same way
you write to type definitions.

105
00:05:33.070 --> 00:05:38.070
It's just that they have different things,
like for instance, they have mocks here.

106
00:05:38.070 --> 00:05:41.570
They have middlewares,
which is I think is really cool.

107
00:05:41.570 --> 00:05:45.860
There's a lot of different features
that they have versus what Apollo may or

108
00:05:45.860 --> 00:05:46.620
may not have.

109
00:05:46.620 --> 00:05:49.686
So, definitely check it out.

110
00:05:49.686 --> 00:05:50.616
Let me see.

111
00:05:53.529 --> 00:05:57.975
&gt;&gt; Scott Moss: Can't think of anything
else super cool off the top of my head,

112
00:05:57.975 --> 00:06:02.230
you know what, that's why they
have this for times like this.

113
00:06:02.230 --> 00:06:04.960
Awesome graphql, just go there.

114
00:06:04.960 --> 00:06:08.770
Awesome graphql,
there's a list of awesome GraphQL things.

115
00:06:09.830 --> 00:06:14.310
So, I would imagine you would find
something super legit inside of here.

