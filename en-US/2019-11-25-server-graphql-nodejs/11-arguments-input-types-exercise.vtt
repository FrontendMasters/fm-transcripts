WEBVTT

1
00:00:00.470 --> 00:00:04.710
&gt;&gt; Scott Moss: So you're gonna create
input types for query arguments,

2
00:00:04.710 --> 00:00:08.650
you're gonna add arguments for
your queries, and

3
00:00:08.650 --> 00:00:14.280
you're gonna use arguments in your
query filled resolvers to filter data.

4
00:00:14.280 --> 00:00:16.970
So let me go over that
with you right quick.

5
00:00:16.970 --> 00:00:21.760
So if we go back to our schema.js.

6
00:00:21.760 --> 00:00:25.690
Right now, you have a pets query, right?

7
00:00:25.690 --> 00:00:28.598
Everyone should have that,
because we did that last exercise.

8
00:00:28.598 --> 00:00:33.690
So you're gonna have to add a input for
the pets query that

9
00:00:33.690 --> 00:00:40.269
allows someone to filter their pets by
the properties that exist on a pet,

10
00:00:40.269 --> 00:00:44.638
which I would say for now,
let's just do a type.

11
00:00:44.638 --> 00:00:47.451
Just stick with the type,
if you wanna add something fancy,

12
00:00:47.451 --> 00:00:50.640
get fancy when it filtered it out but
a type is good for now.

13
00:00:50.640 --> 00:00:53.730
And you also need to create
another query for just one pet.

14
00:00:55.240 --> 00:00:57.320
So I should be able to have
a query that just gets one pet.

15
00:00:58.440 --> 00:01:03.130
And maybe it should just
be either by an ID, or

16
00:01:03.130 --> 00:01:07.060
maybe a name, I'll let you decide how you
wanna get one pet, but you need to make

17
00:01:07.060 --> 00:01:12.220
a query that gets one pet and it takes an
input on how to fetch just that one pet.

18
00:01:12.220 --> 00:01:14.747
So I'll let you do that, yes?

19
00:01:14.747 --> 00:01:17.855
&gt;&gt; Speaker 2: Are there any rules like,
[COUGH] required if?

20
00:01:17.855 --> 00:01:23.538
So say you had get pet by ID or by name,
but you gotta give me one of them.

21
00:01:23.538 --> 00:01:25.090
&gt;&gt; Scott Moss: So, that's a good question.

22
00:01:25.090 --> 00:01:31.200
So, if you have to give me either, or,
you won't be able to do that in the SDL,

23
00:01:31.200 --> 00:01:35.510
the schema language, cuz you can only say,
either you always have to give me that,

24
00:01:35.510 --> 00:01:38.040
or you always have to give me that, or
you always have to give me both, or

25
00:01:38.040 --> 00:01:39.360
you don't have to give me both.

26
00:01:39.360 --> 00:01:42.820
So, that type of dynamic check,
because this is not dynamic,

27
00:01:42.820 --> 00:01:46.182
you wrote this as static,
you gotta do that in the resolver.

28
00:01:46.182 --> 00:01:49.238
In the resolver, you have to check,
okay, because my schema,

29
00:01:49.238 --> 00:01:52.576
it doesn't have a check on neither
of them, but I require one of them,

30
00:01:52.576 --> 00:01:56.055
then therefore, you'd have to do
that check yourself in the resolver.

31
00:01:56.055 --> 00:02:02.659
&gt;&gt; Speaker 2: Can you throw schema
level errors manually like that?

32
00:02:02.659 --> 00:02:03.909
&gt;&gt; Scott Moss: We're gonna
get into the errors.

33
00:02:03.909 --> 00:02:06.597
Yeah, we're gonna get to the errors but,
if you wanna try,

34
00:02:06.597 --> 00:02:09.099
throw an error in the resolver and
tell me what happens.

35
00:02:10.170 --> 00:02:13.443
Yup, just throw it, don't worry
about catching it, just throw it.

36
00:02:13.443 --> 00:02:15.823
See what happens, yes?

37
00:02:15.823 --> 00:02:20.342
&gt;&gt; Speaker 2: Is it considered bad
form to go back through the schema?

38
00:02:20.342 --> 00:02:21.108
&gt;&gt; Scott Moss: Yes.

39
00:02:21.108 --> 00:02:24.412
&gt;&gt; Speaker 2: Is it considered
bad form to reuse any input-

40
00:02:24.412 --> 00:02:25.175
&gt;&gt; Scott Moss: No.

41
00:02:25.175 --> 00:02:30.650
&gt;&gt; Speaker 2: For more than one query, so
using the same input for pets and pet.

42
00:02:30.650 --> 00:02:31.720
&gt;&gt; Scott Moss: No, I think that's smart.

43
00:02:31.720 --> 00:02:33.360
If it's the same one, then do it.

44
00:02:33.360 --> 00:02:35.180
I don't think that's a bad thing,
bad idea.

45
00:02:35.180 --> 00:02:40.100
I would say as long as they make sense,
like if this

46
00:02:40.100 --> 00:02:44.330
pet input had some weird strange name
that only apply to this pets query and

47
00:02:44.330 --> 00:02:47.820
it didn't apply to this one,
then maybe change the name or something.

48
00:02:47.820 --> 00:02:50.090
But no, using the same one, no,

49
00:02:50.090 --> 00:02:54.480
it's just as widely accepted as
using the same type in many places.

50
00:02:54.480 --> 00:02:57.664
So I would say go for it if it works.

51
00:02:57.664 --> 00:02:59.562
Cool, yes?

52
00:02:59.562 --> 00:03:04.334
&gt;&gt; Speaker 2: If I want to query by
all fields of my type,that means

53
00:03:04.334 --> 00:03:07.811
I need to duplicate in the input type?

54
00:03:07.811 --> 00:03:10.559
&gt;&gt; Scott Moss: Yes, you have to
be extremely explicit about it.

55
00:03:10.559 --> 00:03:13.999
You can't say-
&gt;&gt; Speaker 2: Why can't I reuse as a type,

56
00:03:13.999 --> 00:03:15.210
as an input?

57
00:03:15.210 --> 00:03:20.193
&gt;&gt; Scott Moss: You can reuse
the types as an input because GraphQL

58
00:03:20.193 --> 00:03:25.670
treats types and
inputs differently on the AST level.

59
00:03:25.670 --> 00:03:29.910
There's different operations they
perform on types than they do inputs and

60
00:03:29.910 --> 00:03:33.680
mixing the two would complicate
the system for them.

61
00:03:33.680 --> 00:03:36.130
So they specifically asked
you to make input types.

62
00:03:36.130 --> 00:03:40.800
Now, if you're saying I just want to be
able to just to say, come down here and

63
00:03:40.800 --> 00:03:44.760
just be like, give me all that pet.fields
and something like that, right?

64
00:03:44.760 --> 00:03:47.619
Yeah, you can't do that because
they want you to be explicit.

65
00:03:47.619 --> 00:03:51.933
The whole point of this schema is for
someone to come in and visually look at

66
00:03:51.933 --> 00:03:56.810
it, and be like, okay, I know exactly
what this is, it's very explicit.

67
00:03:56.810 --> 00:04:01.690
So they don't allow you to do that,
even if and when we get to it later,

68
00:04:01.690 --> 00:04:06.720
we're gonna get into like, advanced
STO features where you can like, have

69
00:04:06.720 --> 00:04:09.860
implementations and stuff like that, even
then you still have to repeat the fields.

70
00:04:09.860 --> 00:04:11.992
There's just no way around,

71
00:04:11.992 --> 00:04:16.390
at least on the schema level,
of easily not repeating those fields.

72
00:04:16.390 --> 00:04:17.680
On the client level,

73
00:04:17.680 --> 00:04:21.470
we have something called fragments
which allow us to avoid that.

74
00:04:23.310 --> 00:04:26.990
And you could use fragments on
the Schema Definition Language but

75
00:04:26.990 --> 00:04:30.590
it's a little different from the fragments
you would be using on the client side.

76
00:04:30.590 --> 00:04:33.560
So if you wanna know more about it,
if that's like really a problem for you,

77
00:04:33.560 --> 00:04:37.509
I will look into fragments but
it's not gonna solve all the problems.

78
00:04:39.500 --> 00:04:40.370
Good question though.

79
00:04:40.370 --> 00:04:44.036
Yeah, when I learn that, I was like, why?

80
00:04:44.036 --> 00:04:47.090
I had a long conversation with the people
on Facebook about this, trust me.

81
00:04:48.520 --> 00:04:52.430
Cool, any questions about that stuff?

82
00:04:52.430 --> 00:04:55.450
Okay, so once you have that,
then like I said,

83
00:04:55.450 --> 00:04:58.864
you need to make that pet query,
add some stuff here.

84
00:04:58.864 --> 00:05:03.473
And they you need to, one,
use your inputs inside your resolver.

85
00:05:03.473 --> 00:05:09.817
If you go to the resolvers,
there's going to be,

86
00:05:09.817 --> 00:05:14.348
when you use the context of models,

87
00:05:14.348 --> 00:05:19.042
for instance, ctx.models.pet.

88
00:05:19.042 --> 00:05:21.351
So in this case,
it would be like a findMany.

89
00:05:21.351 --> 00:05:24.828
You can just pass any filter object here
which are the properties that exist and

90
00:05:24.828 --> 00:05:26.153
it'll filter it out for you.

91
00:05:26.153 --> 00:05:28.417
So findOne does the same thing.

92
00:05:28.417 --> 00:05:30.673
findOne takes an object of
fields you wanna filter out and

93
00:05:30.673 --> 00:05:31.895
findMany does the same thing.

94
00:05:31.895 --> 00:05:34.146
So that's done for you,
you don't have to worry about that,

95
00:05:34.146 --> 00:05:36.588
works just like a regular database
REM with, so take note of that.

96
00:05:36.588 --> 00:05:40.311
But yeah, you need to update
your pets query to do that and

97
00:05:40.311 --> 00:05:45.370
you need to create a pet query that also
has an input type that does that, yes?

98
00:05:45.370 --> 00:05:49.125
&gt;&gt; Speaker 2: Can a resolver
call another resolver?

99
00:05:49.125 --> 00:05:49.690
&gt;&gt; Scott Moss: No.

100
00:05:49.690 --> 00:05:52.197
&gt;&gt; Speaker 2: No, cuz, yeah,
promise same definition.

101
00:05:52.197 --> 00:05:54.239
&gt;&gt; Scott Moss: I see what you're saying,
it's just the same thing but

102
00:05:54.239 --> 00:05:54.987
different method.

103
00:05:54.987 --> 00:05:58.658
You have no control in what are these
resolvers are called, the client does,

104
00:05:58.658 --> 00:05:59.911
that's the whole point.

105
00:05:59.911 --> 00:06:04.108
So the only way that you can call
another resolver is if you created

106
00:06:04.108 --> 00:06:08.914
a function that did this and call them
in both places, I would imagine, but

107
00:06:08.914 --> 00:06:13.594
you can't because the job of the resolvers
is to resolve just one field.

108
00:06:13.594 --> 00:06:17.496
So, in that case, if you were calling
another function, that's not a resolver,

109
00:06:17.496 --> 00:06:20.190
that's just something that
gets data from somewhere.

110
00:06:20.190 --> 00:06:21.470
And that's a good practice.

111
00:06:21.470 --> 00:06:24.330
We didn't talk about data sources and
things like that.

112
00:06:24.330 --> 00:06:28.346
But Apollo has something built into it
called a data source which is meant for

113
00:06:28.346 --> 00:06:32.689
fetching external APIs but you can use it
for just data in your server internally.

114
00:06:32.689 --> 00:06:35.115
And then that can be responsible for
fetching and

115
00:06:35.115 --> 00:06:37.246
caching data on an application level, and

116
00:06:37.246 --> 00:06:41.171
then you can reuse that logic within
the resolvers, and that's the only way.

117
00:06:41.171 --> 00:06:44.070
But yeah, resolver doesn't
know about another resolver.

118
00:06:44.070 --> 00:06:48.290
They don't know what happened before and
they don't know what's gonna happen after,

119
00:06:48.290 --> 00:06:49.805
and they can't talk to another one.

120
00:06:49.805 --> 00:06:50.305
So yeah.

