WEBVTT

1
00:00:00.005 --> 00:00:02.159
&gt;&gt; Scott Moss: So you're gonna a define
a mutation type in your schema.

2
00:00:02.159 --> 00:00:05.372
You're gonna add some fields
on your mutation type.

3
00:00:05.372 --> 00:00:08.836
You're gonna create input types for
your mutation field arguments.

4
00:00:08.836 --> 00:00:11.070
And you're gonna create resolvers for
your mutation fields.

5
00:00:11.070 --> 00:00:14.337
So the mutation stuff that
you're going to be creating,

6
00:00:14.337 --> 00:00:18.023
if you head over to the schema,
we need to be able to create a pet.

7
00:00:18.023 --> 00:00:22.170
So you're gonna make a mutation
that allows us to create a new pet.

8
00:00:22.170 --> 00:00:27.030
It should take in all the necessary
input that a pet needs.

9
00:00:27.030 --> 00:00:30.160
In this case, a pet just needs,
don't worry about ID.

10
00:00:30.160 --> 00:00:31.570
ID is generated for you.

11
00:00:31.570 --> 00:00:32.810
So you don't have to ask for an ID.

12
00:00:32.810 --> 00:00:34.290
That's generated.

13
00:00:34.290 --> 00:00:35.303
You did need to take in the.

14
00:00:35.303 --> 00:00:37.638
And you don't worry about createdAt,

15
00:00:37.638 --> 00:00:41.110
that should also eventually
get generated for you.

16
00:00:41.110 --> 00:00:44.106
But you do need a name,
a type, that's basically it.

17
00:00:44.106 --> 00:00:45.560
Don't worry about image either.

18
00:00:45.560 --> 00:00:46.500
All that's just there for you.

19
00:00:46.500 --> 00:00:47.800
Just a name and a type.

20
00:00:50.870 --> 00:00:53.820
&gt;&gt; Scott Moss: So
that's what the pet's gonna need.

21
00:00:53.820 --> 00:00:56.178
All this other stuff should
get generated for you.

22
00:00:56.178 --> 00:01:02.150
You shouldn't have to generate the ID or
the createdAt or any of that stuff.

23
00:01:02.150 --> 00:01:02.885
You should be good to go.

24
00:01:02.885 --> 00:01:06.862
And what you're going to want to use
if you go look at the pet model,

25
00:01:06.862 --> 00:01:09.220
this should be a create function here.

26
00:01:09.220 --> 00:01:11.490
And you can see this is where
it creates the ID for you.

27
00:01:11.490 --> 00:01:13.830
It creates the createdAt now for you.

28
00:01:13.830 --> 00:01:15.599
And then this is the pet
that you will pass it.

29
00:01:15.599 --> 00:01:17.826
So it does, like I said,
all the stuff gets generated for you.

30
00:01:17.826 --> 00:01:20.430
So your input doesn't need these fields.

31
00:01:20.430 --> 00:01:24.170
But your input is gonna need
the other required fields.

32
00:01:24.170 --> 00:01:27.270
I guess you can make an image
not required, in this case.

33
00:01:27.270 --> 00:01:29.296
Name and type, so
you don't need a name and type here.

34
00:01:29.296 --> 00:01:31.060
So mutation.

35
00:01:31.060 --> 00:01:35.998
Make a mutation for creating a pet,
make an input to handle the arguments for

36
00:01:35.998 --> 00:01:37.740
that mutation.

37
00:01:37.740 --> 00:01:42.124
And then you need to write a resolver
inside your resolvers file

38
00:01:42.124 --> 00:01:46.271
that actually handles the mutation for
creating that pet.

39
00:01:46.271 --> 00:01:49.739
And if everything goes right, when you
create it, you will actually be able to go

40
00:01:49.739 --> 00:01:53.440
into the database, this JSON file,
and you'll see it pop up here.

41
00:01:53.440 --> 00:01:57.672
When you do see that, write a query inside
of graphical playground to query for

42
00:01:57.672 --> 00:02:01.019
that pet using either pets or
pet and see if you can get it back.

43
00:02:01.019 --> 00:02:02.922
You should be able to get it back.

44
00:02:02.922 --> 00:02:07.005
And that's basically a whole
cycle of mutations and queries.

