WEBVTT

1
00:00:00.100 --> 00:00:02.380
&gt;&gt; Scott Moss: You can see this is
a really good use case if for instance,

2
00:00:02.380 --> 00:00:06.520
you're returning a list of very similar
items but with slightly different fields

3
00:00:06.520 --> 00:00:11.180
user interface, because they're very
common but they differ slightly.

4
00:00:11.180 --> 00:00:14.520
And then you will need a special
syntax here to say cool,

5
00:00:14.520 --> 00:00:16.110
give me the common fields.

6
00:00:16.110 --> 00:00:18.310
But on this type,
give me these fields, on this type,

7
00:00:18.310 --> 00:00:20.110
give me these fields and etc, etc.

8
00:00:20.110 --> 00:00:23.421
&gt;&gt; Speaker 2: Can you query their
type inside of that as well?

9
00:00:23.421 --> 00:00:25.480
&gt;&gt; Scott Moss: Can you query their type?

10
00:00:25.480 --> 00:00:27.630
&gt;&gt; Speaker 2: And
can you get boot or sneaker?

11
00:00:27.630 --> 00:00:29.080
&gt;&gt; Scott Moss: So
there's a special thing called,

12
00:00:29.080 --> 00:00:30.320
I don't know if it's gonna work here,

13
00:00:30.320 --> 00:00:35.910
you do type name,
type name let's see if this works here.

14
00:00:35.910 --> 00:00:38.660
Yeah, so video I'm just going to type name
you'll always get the type of any type.

15
00:00:38.660 --> 00:00:41.860
And that's anything with graph deals,
so yeah, you can do that.

16
00:00:44.130 --> 00:00:46.616
Good question, any other questions?

17
00:00:49.346 --> 00:00:53.082
&gt;&gt; Speaker 3: Did that type name
go outside of that interface?

18
00:00:53.082 --> 00:00:56.080
&gt;&gt; Scott Moss: Yeah, you could put
that type name pretty much anywhere.

19
00:00:56.080 --> 00:00:58.183
There you go.

20
00:01:00.097 --> 00:01:00.916
&gt;&gt; Scott Moss: Wherever you want,

21
00:01:00.916 --> 00:01:02.030
you can put-
&gt;&gt; Speaker 4: It looks

22
00:01:03.480 --> 00:01:08.230
like it's only allowing it to
appear in one location though.

23
00:01:08.230 --> 00:01:11.890
So for example, interesting,

24
00:01:11.890 --> 00:01:14.836
cuz it hides it on-
&gt;&gt; Scott Moss: Yeah,

25
00:01:14.836 --> 00:01:16.560
cuz these are on the same level, yeah.

26
00:01:16.560 --> 00:01:17.660
&gt;&gt; Speaker 2: So it's showing once.

27
00:01:17.660 --> 00:01:21.440
&gt;&gt; Scott Moss: Right, this field and
this field are on the same level, so

28
00:01:21.440 --> 00:01:23.850
the second one overwrites it, right?

29
00:01:23.850 --> 00:01:26.190
This looks like it's overwriten
cuz I got this object here,

30
00:01:26.190 --> 00:01:27.980
well, all of these are sibling fields.

31
00:01:27.980 --> 00:01:31.380
Everything inside this shoe are siblings
So this one just gets ignored.

32
00:01:31.380 --> 00:01:34.630
I'm like asking for the same field
twice so it's like okay, cool.

33
00:01:39.150 --> 00:01:41.270
Any other questions on interfaces?

34
00:01:42.680 --> 00:01:47.330
&gt;&gt; Speaker 3: Is there a reason that
they have you type out those fields and

35
00:01:47.330 --> 00:01:48.790
on all the interfaces twice or

36
00:01:48.790 --> 00:01:51.530
is that just like a limitation
of this apollos implementation?

37
00:01:51.530 --> 00:01:54.670
&gt;&gt; Scott Moss: No, it's,
that's the spec, it's very annoying.

38
00:01:54.670 --> 00:01:56.080
Trust me, I wouldn't-
&gt;&gt; Speaker 3: Kind of the same

39
00:01:56.080 --> 00:01:59.920
reason that they don't want to help us
with strict when you're querying things.

40
00:01:59.920 --> 00:02:02.550
&gt;&gt; Scott Moss: Yeah, I think they're
always going to go down a path of being

41
00:02:02.550 --> 00:02:05.600
extremely explicit of looking at stuff
because you got to think about it.

42
00:02:05.600 --> 00:02:07.550
All right, cool,
we're one follower right now but

43
00:02:07.550 --> 00:02:11.900
imagine you have multiple files and
the interface was all over here.

44
00:02:11.900 --> 00:02:14.820
How would you know what fields are on
this type if you're looking at

45
00:02:14.820 --> 00:02:16.290
like you got to go navigate.

46
00:02:16.290 --> 00:02:19.820
And then you get it, gets even crazier
when you start combining schemas from

47
00:02:19.820 --> 00:02:21.630
different servers together.

48
00:02:21.630 --> 00:02:25.210
You literally won't know what the fields
are unless you went to the other server or

49
00:02:25.210 --> 00:02:26.250
looked at something.

50
00:02:26.250 --> 00:02:30.580
So they always try to have it at the point
where I can just look at a server, or

51
00:02:30.580 --> 00:02:33.550
I can look at a schema and
know exactly what I'm gonna get back

52
00:02:33.550 --> 00:02:36.070
without having to go
look at other sources.

53
00:02:36.070 --> 00:02:38.420
Just look at this one place,
I know exactly what I'm gonna get.

54
00:02:38.420 --> 00:02:43.150
So I think they try to do that as much as
possible and It has to be that path but

55
00:02:43.150 --> 00:02:44.830
there's issues about this.

56
00:02:44.830 --> 00:02:48.570
There's literally open issues on GraphQL,
like, we want to not do this and

57
00:02:48.570 --> 00:02:49.266
they're like, cool.

58
00:02:49.266 --> 00:02:52.530
&gt;&gt; Speaker 3: Cuz I think the other way,
too, is if you have this interface and

59
00:02:52.530 --> 00:02:56.685
you wanna just update that now you have to
go and find every place you've used that.

60
00:02:56.685 --> 00:02:58.870
&gt;&gt; Scott Moss: 100%, yeah, this is not for
the purpose of, like I said,

61
00:02:58.870 --> 00:02:59.840
brevity, it is not.

62
00:02:59.840 --> 00:03:04.530
It's only for the purpose of not creating
more queries because if I didn't have

63
00:03:04.530 --> 00:03:07.790
that, I would have a sneakers query,
then I would have a boot query.

64
00:03:07.790 --> 00:03:11.460
Right now, all I need is a shoes query and
I could get both, that's what it's for.

65
00:03:11.460 --> 00:03:14.980
It's not for what we're used to
with the type systems, like, cool,

66
00:03:14.980 --> 00:03:17.720
we got interfaces because we don't
wanna write the same code again.

67
00:03:17.720 --> 00:03:18.800
No, it's not for that.

68
00:03:18.800 --> 00:03:20.930
It's for
not writing the same queries again.

69
00:03:20.930 --> 00:03:22.100
Yep, Mark?

70
00:03:22.100 --> 00:03:26.760
&gt;&gt; Mark: If I had two data sources and
both had the same common fields,

71
00:03:26.760 --> 00:03:30.084
how will GraphQL choose the resolver?

72
00:03:30.084 --> 00:03:34.710
&gt;&gt; Scott Moss: 100% the same thing we
just did nothing changes because GraphQL

73
00:03:34.710 --> 00:03:36.890
has no clue what your data sources are.

74
00:03:36.890 --> 00:03:40.810
In fact this array that I just hard coated
could have in from 10 different data

75
00:03:40.810 --> 00:03:45.510
sources, it doesn't matter so
you would still have to do the same thing.

76
00:03:45.510 --> 00:03:49.440
It's still your responsibility
to format the response of

77
00:03:49.440 --> 00:03:54.140
that resolver to match the types
that you specified in your schema.

78
00:03:54.140 --> 00:03:57.810
So doesn't matter what data source it
came from you still have to format it.

79
00:03:57.810 --> 00:04:00.710
You can format it all in a top
level resolver like I did here or

80
00:04:00.710 --> 00:04:04.330
you can write a field level resolver for
every single thing that comes back out of

81
00:04:04.330 --> 00:04:05.780
the database and
resolve them individually.

82
00:04:05.780 --> 00:04:07.280
But at the end of the day,

83
00:04:07.280 --> 00:04:12.650
you still have to make a resolve type
that's gonna get an instance of a shoe.

84
00:04:12.650 --> 00:04:15.410
And you need to check some
type of logic that you created

85
00:04:15.410 --> 00:04:16.890
to return to the name of the type.

86
00:04:16.890 --> 00:04:20.170
That doesn't change no matter
where the data source came from.

87
00:04:20.170 --> 00:04:23.040
In fact that a the one thing that does not

88
00:04:23.040 --> 00:04:27.550
determine how GraphQL
works is the data source.

89
00:04:27.550 --> 00:04:30.490
It's gonna do whatever it wants,
it's gonna determine how well it works,

90
00:04:30.490 --> 00:04:33.300
it's gonna determine how secure it is and
how fast it is.

91
00:04:33.300 --> 00:04:35.010
But it's never gonna
determine how it works.

92
00:04:35.010 --> 00:04:37.530
It's gonna work exactly the same no
matter what data source you use.

93
00:04:37.530 --> 00:04:38.710
Any other questions?

94
00:04:38.710 --> 00:04:43.092
&gt;&gt; Speaker 6: So aside from enforcing
the next foot where item you add has

95
00:04:43.092 --> 00:04:48.740
the correct all the fields that are
required there to make a shoe or makeup.

96
00:04:48.740 --> 00:04:53.599
I don't see any benefit to having
interface because the shape of the object

97
00:04:53.599 --> 00:04:58.533
you return as long as it looks like
the thing you've defined which you have to

98
00:04:58.533 --> 00:05:01.385
define anyways, and you're not, I mean,

99
00:05:01.385 --> 00:05:04.807
you could have any number
of queries no matter what.

100
00:05:04.807 --> 00:05:09.703
Even with that interface, you have one
query for all of the footwear that returns

101
00:05:09.703 --> 00:05:15.390
is a matter of different kinds of objects,
is a matter of different kinds of sources.

102
00:05:15.390 --> 00:05:18.020
Is it simply to enforce
the fact that every

103
00:05:18.020 --> 00:05:21.550
new footwear type you add
has the required fields?

104
00:05:21.550 --> 00:05:25.020
&gt;&gt; Scott Moss: Well, to demystify
some of that without an interface,

105
00:05:25.020 --> 00:05:28.830
there's no way you could return
a list of things that are dissimilar.

106
00:05:28.830 --> 00:05:32.280
They all have to be exactly the same,
there's no way to do it.

107
00:05:32.280 --> 00:05:35.000
Let's go back and
look at what we've done so far.

108
00:05:35.000 --> 00:05:39.970
There's no way for me to come down here
and say I want to return a sneaker

109
00:05:41.630 --> 00:05:45.770
and the boot, like you can,
it's only one type.

110
00:05:45.770 --> 00:05:49.820
But there are scenarios where in your
client side application where you

111
00:05:49.820 --> 00:05:55.330
wanna list of all these stuff that's
basically the same but slightly different.

112
00:05:55.330 --> 00:05:59.970
So you would wanna do this, that's the
scenario yeah, cuz there's no other way,

113
00:05:59.970 --> 00:06:00.760
it's too explicit

