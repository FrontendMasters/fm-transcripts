WEBVTT

1
00:00:00.090 --> 00:00:03.340
&gt;&gt; Scott Moss: So unions are pretty
much exactly like interfaces

2
00:00:03.340 --> 00:00:04.670
except for one could eat.

3
00:00:04.670 --> 00:00:06.230
They don't have any similar fields.

4
00:00:06.230 --> 00:00:10.850
A union is just like this type or
this type or this type or this type.

5
00:00:10.850 --> 00:00:14.690
They may have similar fields, they may
not have similar fields, doesn't matter.

6
00:00:14.690 --> 00:00:16.790
It's just it can be either
one of these types.

7
00:00:16.790 --> 00:00:18.212
And that's basically what a union is.

8
00:00:18.212 --> 00:00:22.244
The difference between a union, or why you
would use a union over an interface is,

9
00:00:22.244 --> 00:00:25.692
I mean, the only use case I could
think of like something like a union,

10
00:00:25.692 --> 00:00:28.050
as far as from a UI
perspective is like a search.

11
00:00:28.050 --> 00:00:31.126
If you had a global search and you could
search for many different types of

12
00:00:31.126 --> 00:00:34.407
entities throughout an application that
have nothing to do with each other,

13
00:00:34.407 --> 00:00:35.626
a union is perfect for that.

14
00:00:35.626 --> 00:00:38.769
Because they have no relation,
they don't share any common fields.

15
00:00:38.769 --> 00:00:42.020
But you want to do one query and
get all of them back.

16
00:00:42.020 --> 00:00:44.070
You would do a union.

17
00:00:44.070 --> 00:00:45.510
That's basically it.

18
00:00:45.510 --> 00:00:48.453
And the syntax there is a lot
simpler than an interface,

19
00:00:48.453 --> 00:00:50.968
because a union will
look something like this.

20
00:00:50.968 --> 00:00:52.128
You would say like union.

21
00:00:52.128 --> 00:00:57.282
I'm ran out of shoe stuff here.

22
00:00:57.282 --> 00:00:59.929
So [LAUGH] you could say like union thing.

23
00:00:59.929 --> 00:01:03.647
And you say, equals, and
then you just start putting types here.

24
00:01:03.647 --> 00:01:07.050
You say, like, I know what we'll do.

25
00:01:07.050 --> 00:01:11.170
We'll say, instead of shoe, we'll put,
what's another word for a shoe?

26
00:01:12.400 --> 00:01:15.370
Footwear, [LAUGH] man, it's so good.

27
00:01:17.060 --> 00:01:24.465
Footwear equals a sneaker or
a, what do I have, boot.

28
00:01:24.465 --> 00:01:25.962
Not body, look at that.

29
00:01:25.962 --> 00:01:28.123
Boot, and that's a union.

30
00:01:28.123 --> 00:01:30.530
And it's exact.

31
00:01:30.530 --> 00:01:32.980
You have to treat it exactly the same
way as you treat an interface.

32
00:01:32.980 --> 00:01:37.934
You have to create a resolver for
it that resolves the type.

33
00:01:37.934 --> 00:01:41.714
You have to use the dot dot dot syntax.

34
00:01:41.714 --> 00:01:43.523
Where is that?

35
00:01:43.523 --> 00:01:47.232
You have to use this syntax to
say individually for this one,

36
00:01:47.232 --> 00:01:48.553
I want these fields.

37
00:01:48.553 --> 00:01:50.378
The only difference is if
you were using unions,

38
00:01:50.378 --> 00:01:53.286
you wouldn't have any common fields,
there would be no common fields here.

39
00:01:53.286 --> 00:01:57.603
Everything will just be like,
dot dot dot, dot dot dot, dot dot dot.

40
00:01:57.603 --> 00:01:58.610
It's just, there's no common fields.

41
00:01:58.610 --> 00:02:00.240
Maybe you do with some of them,
but you don't know.

42
00:02:00.240 --> 00:02:02.129
So, and you didn't specify.

43
00:02:02.129 --> 00:02:03.221
So GraphQL doesn't know.

44
00:02:03.221 --> 00:02:04.944
So even if there were common fields,
you couldn't do that.

45
00:02:04.944 --> 00:02:06.565
You still had to do dot dot dot.

46
00:02:06.565 --> 00:02:08.596
And it's basically how it works.

47
00:02:08.596 --> 00:02:09.350
Yes?

48
00:02:09.350 --> 00:02:14.800
&gt;&gt; Speaker 2: Under the hood,
what is union Footwear doing there?

49
00:02:14.800 --> 00:02:18.340
&gt;&gt; Scott Moss: It's creating a new
abstract type just like an interface is

50
00:02:18.340 --> 00:02:24.460
that you can use in place
of scholars on queries.

51
00:02:25.560 --> 00:02:30.006
&gt;&gt; Speaker 2: So it effectively
contains a result set of, or

52
00:02:30.006 --> 00:02:35.480
could contain a result set of
all sneakers and all boots?

53
00:02:35.480 --> 00:02:36.125
&gt;&gt; Scott Moss: Yeah.

54
00:02:36.125 --> 00:02:37.507
Or, it can be or.

55
00:02:37.507 --> 00:02:40.060
It doesn't have to be and,
but it can be or.

56
00:02:40.060 --> 00:02:41.990
It can be and, but
it doesn't have to be and.

57
00:02:41.990 --> 00:02:42.960
It could also be or.

58
00:02:42.960 --> 00:02:46.710
You could just have one thing in there and
one of them is a sneaker and it's fine.

59
00:02:46.710 --> 00:02:48.870
You could have ten things in them,
five are sneakers, five are boots.

60
00:02:48.870 --> 00:02:49.580
That's fine.

61
00:02:49.580 --> 00:02:52.367
&gt;&gt; Speaker 2: Right, but
it's a starting point for filtering down.

62
00:02:52.367 --> 00:02:54.186
&gt;&gt; Scott Moss: Yes, exactly.

63
00:02:54.186 --> 00:02:57.321
Again, its purpose is just so
you can make one query.

64
00:02:57.321 --> 00:02:58.399
That's what it's for.

65
00:02:58.399 --> 00:03:03.626
It's like, I just need one query
where I can get this or this or this.

66
00:03:03.626 --> 00:03:05.697
It's basically what I told you you
couldn't do, this is how you do it.

67
00:03:05.697 --> 00:03:09.313
I was like, you can't put a comma in here,
say I want an array of all this stuff.

68
00:03:09.313 --> 00:03:10.562
You don't have to.

69
00:03:10.562 --> 00:03:13.215
Now you can just say it's a footwear now.

70
00:03:13.215 --> 00:03:14.365
You can just say footwear.

71
00:03:14.365 --> 00:03:19.195
And that's how you do a comma separated,
like it's an array of this and this and

72
00:03:19.195 --> 00:03:20.650
this and this and this.

73
00:03:20.650 --> 00:03:22.767
That's what union's for.

74
00:03:22.767 --> 00:03:25.423
And I don't know if any of
them have anything in common.

75
00:03:25.423 --> 00:03:28.230
Because if they did,
I would make it an interface.

76
00:03:28.230 --> 00:03:30.873
If they don't have anything in common,
it's just a union.

77
00:03:30.873 --> 00:03:33.514
Up to you when you want to pick them.

78
00:03:33.514 --> 00:03:36.400
As far as GraphQL's concerned,
when it comes to resolvers and

79
00:03:36.400 --> 00:03:38.475
queries, they're exactly the same thing.

80
00:03:38.475 --> 00:03:40.375
Yes?

81
00:03:40.375 --> 00:03:44.340
&gt;&gt; Speaker 2: Is there a difference in
performance, or one versus the other?

82
00:03:44.340 --> 00:03:45.950
&gt;&gt; Scott Moss: No,
there's no difference in performance.

83
00:03:48.170 --> 00:03:50.845
No, because as far as
the code that you write,

84
00:03:50.845 --> 00:03:53.530
there is nothing different
about what you do.

85
00:03:53.530 --> 00:03:57.331
As far as how GraphQL resolves it, no,
the GraphQL doesn't even resolve things at

86
00:03:57.331 --> 00:03:59.794
asynchronous anyway,
everything's pretty much.

87
00:03:59.794 --> 00:04:01.017
Yeah, there's there's no difference.

88
00:04:01.017 --> 00:04:02.649
It shouldn't be anything.

89
00:04:02.649 --> 00:04:05.995
The only difference like I said,
is just going to be your queries.

90
00:04:05.995 --> 00:04:07.616
You're not going to have
any common fields here.

91
00:04:07.616 --> 00:04:10.140
It's always going to be this for unions.

92
00:04:10.140 --> 00:04:11.050
Always.

93
00:04:11.050 --> 00:04:14.515
Any questions on unions?

94
00:04:14.515 --> 00:04:18.721
&gt;&gt; Speaker 3: Do the client libraries have
a way to kind of automatically resolve how

95
00:04:18.721 --> 00:04:23.355
to write, say you had a union that took
every model, every type you have, and

96
00:04:23.355 --> 00:04:26.156
concatenated it together
as a global search.

97
00:04:26.156 --> 00:04:30.476
Does the client side have
any way to kinda write that,

98
00:04:30.476 --> 00:04:35.759
to splat out all those ons for
the query itself when it asks for it?

99
00:04:35.759 --> 00:04:36.468
Or do you gotta?

100
00:04:36.468 --> 00:04:37.804
&gt;&gt; Scott Moss: Not by default.

101
00:04:37.804 --> 00:04:39.620
It's not by default, but
there's a lot of tools.

102
00:04:39.620 --> 00:04:41.781
So it depends on,
if you want to pay for something or

103
00:04:41.781 --> 00:04:43.353
if you want to not pay for something.

104
00:04:43.353 --> 00:04:47.070
So there are services that you can
upload your schema to remotely, and

105
00:04:47.070 --> 00:04:50.976
then you'll have a plugin in VS Code
that reads that schema remotely, and

106
00:04:50.976 --> 00:04:55.071
it gives you tools inside your editor
that whenever you write a GraphQL file,

107
00:04:55.071 --> 00:04:58.600
it gives you autocomplete just
like this does, inside of VS Code,

108
00:04:58.600 --> 00:05:01.090
cuz it's reading your
schema from remotely.

109
00:05:01.090 --> 00:05:02.154
That's something you've gotta pay for.

110
00:05:02.154 --> 00:05:04.900
Or you can hack it together yourself.

111
00:05:04.900 --> 00:05:06.690
There's other ones where
you can just copy and

112
00:05:06.690 --> 00:05:09.830
paste the schema from your server and
paste it in your client site repo,

113
00:05:09.830 --> 00:05:12.420
if they're not in the same repo and
have your tool read from that.

114
00:05:12.420 --> 00:05:15.900
It's just, if it gets updated, you've
gotta do the copying and pasting yourself.

115
00:05:15.900 --> 00:05:17.420
So that's another thing.

116
00:05:17.420 --> 00:05:19.700
I think a lot of people do
is a cheap alternative,

117
00:05:19.700 --> 00:05:23.510
they'll write their schema,
they'll push it up to the CDN somewhere.

118
00:05:23.510 --> 00:05:25.706
And whenever their schema
gets checked into GitHub,

119
00:05:25.706 --> 00:05:27.274
they update the CDN with that schema.

120
00:05:27.274 --> 00:05:30.354
And then the frontend app just
pulls down from that CDN and

121
00:05:30.354 --> 00:05:32.609
is always up to date with the right thing.

122
00:05:32.609 --> 00:05:36.124
So that's like a cheap way to keep it
automatically updated if you really want

123
00:05:36.124 --> 00:05:36.781
those tools.

124
00:05:36.781 --> 00:05:41.300
And a lot of people really depend on those
tools, because they go a step beyond,

125
00:05:41.300 --> 00:05:45.011
take that schema on the frontend and
generate like TypeScript for

126
00:05:45.011 --> 00:05:47.786
the response of the data,
which is really cool.

127
00:05:47.786 --> 00:05:50.945
Cuz it's really hard to
get TypeScript support for

128
00:05:50.945 --> 00:05:54.041
something dynamic from
data that comes a server.

129
00:05:54.041 --> 00:05:58.174
You don't really get that, well,
because GraphQL is strictly typed,

130
00:05:58.174 --> 00:05:59.403
you can get that now.

131
00:05:59.403 --> 00:06:04.300
So now, you no longer have to say
data is type any from the server.

132
00:06:04.300 --> 00:06:07.420
Data is exactly this type, cuz I know
what it is, and it's generated for me.

133
00:06:07.420 --> 00:06:12.199
So a lot of people invest
a lot of time into that.

134
00:06:12.199 --> 00:06:13.348
Cool, any other questions?

135
00:06:13.348 --> 00:06:17.200
&gt;&gt; Speaker 4: You said you need to
write a resolver for the union.

136
00:06:17.200 --> 00:06:20.290
Like for footwear,
where do you write that resolver?

137
00:06:20.290 --> 00:06:22.210
Is it under shoes, or?

138
00:06:22.210 --> 00:06:23.870
&gt;&gt; Scott Moss: It's a good question.

139
00:06:23.870 --> 00:06:26.089
You would write it.

140
00:06:26.089 --> 00:06:30.112
Just like you wrote one for shoe,
you write one for footwear.

141
00:06:30.112 --> 00:06:31.827
&gt;&gt; Speaker 4: So
it's its own exclusive one.

142
00:06:31.827 --> 00:06:33.077
&gt;&gt; Scott Moss: Yep, it's its own thing.

143
00:06:33.077 --> 00:06:34.353
And it's basically the same thing.

144
00:06:34.353 --> 00:06:37.310
You would just copy that and
put that there, done.

