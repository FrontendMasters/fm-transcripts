WEBVTT

1
00:00:00.140 --> 00:00:02.850
&gt;&gt; Scott Moss: So I know that there
is no automatic resolving here,

2
00:00:02.850 --> 00:00:05.490
because the names don't add up,
so I had to resolve it myself.

3
00:00:05.490 --> 00:00:10.160
So I go to resolvers,
I wanna go to the pet type,

4
00:00:10.160 --> 00:00:15.390
because we're looking at a owner on a pet.

5
00:00:15.390 --> 00:00:19.250
So I need to tell GraphQL on how to
resolve an owner that belongs to a pet.

6
00:00:19.250 --> 00:00:21.274
So that's why I'm gonna the pet type.

7
00:00:21.274 --> 00:00:25.120
I'm gonna say I want an owner,
with the same name, yours might be user.

8
00:00:26.760 --> 00:00:30.080
And this is a field level resolver.

9
00:00:30.080 --> 00:00:34.080
So a field level resolver
is any resolver for

10
00:00:34.080 --> 00:00:38.970
a field that's on a type,
that's other than the mutation or query.

11
00:00:38.970 --> 00:00:40.490
That's how you know what
a field of resolver is.

12
00:00:40.490 --> 00:00:44.140
So say that again, basically,
if you're writing a resolver for

13
00:00:44.140 --> 00:00:49.400
a field that belongs to a type that
is anything other than a query or

14
00:00:49.400 --> 00:00:51.250
a mutation, it's a field level resolver.

15
00:00:51.250 --> 00:00:53.954
These are top level resolvers,
nothing resolves before them.

16
00:00:53.954 --> 00:00:58.930
They happen first, everything comes after,
which includes a field.

17
00:00:58.930 --> 00:01:00.920
So we're writing a field level resolver,
so

18
00:01:00.920 --> 00:01:05.020
it means its first argument is gonna be
the type that got resolved before it.

19
00:01:05.020 --> 00:01:09.312
In this case, the type that gets resolved
before an owner is always gonna be a pet.

20
00:01:09.312 --> 00:01:13.010
And you know that because
an owner belongs to a pet.

21
00:01:13.010 --> 00:01:16.610
You can just see here, owner, pet, okay,
the first argument's gonna be a pet.

22
00:01:16.610 --> 00:01:19.730
Same thing here, owner, pet, cool,
the first argument's gonna be a pet.

23
00:01:21.730 --> 00:01:25.090
So I would put pet here,
if I was gonna use pet, cool.

24
00:01:25.090 --> 00:01:26.410
Second argument, it's the same thing.

25
00:01:26.410 --> 00:01:28.570
All the rest of the arguments is
the same thing as every other resolver.

26
00:01:28.570 --> 00:01:30.300
Any arguments or inputs,

27
00:01:30.300 --> 00:01:33.820
we don't have any,
because this field doesn't have any input.

28
00:01:33.820 --> 00:01:36.790
If it did, then you have some,
but we don't have any here, so

29
00:01:36.790 --> 00:01:38.370
we don't need any inputs and
any arguments.

30
00:01:38.370 --> 00:01:40.820
So I'm not even gonna use them.

31
00:01:40.820 --> 00:01:43.110
Something's gonna block that out.

32
00:01:43.110 --> 00:01:46.540
And then we have some contexts here, cool.

33
00:01:46.540 --> 00:01:51.130
So in a real-world example, the way you
would resolve this is if you would say

34
00:01:51.130 --> 00:01:55.870
I wanna get the context.models.user.

35
00:01:55.870 --> 00:02:02.034
And you would say find by ID,
pet.user, right?

36
00:02:02.034 --> 00:02:06.230
Cuz that pet.user has an ID of a user,
you say, give me the user.

37
00:02:06.230 --> 00:02:09.460
That is this ID, and that's what you
would do in a real world scenario.

38
00:02:09.460 --> 00:02:12.800
But because we only have one user
database, I can say find one,

39
00:02:12.800 --> 00:02:13.720
I don't even need this argument.

40
00:02:13.720 --> 00:02:19.070
I just want you to know that this pet
is the first argument that's coming in,

41
00:02:19.070 --> 00:02:22.920
because that's what got resolved
before this fill over resolver, so

42
00:02:22.920 --> 00:02:23.800
just know that.

43
00:02:24.870 --> 00:02:31.760
And I'm also gonna add a console.log,
and I'm gonna call it owner, or

44
00:02:31.760 --> 00:02:37.640
let's say this pet owner,
and I'm gonna return this.

45
00:02:37.640 --> 00:02:39.840
That's gonna help out a lot, cool.

46
00:02:40.860 --> 00:02:45.430
And then what I'm gonna do
is I'm gonna call pets.

47
00:02:45.430 --> 00:02:48.090
No, let's just do one pet,
I'm gonna log here.

48
00:02:49.190 --> 00:02:55.497
And I was gonna say query pet, like that.

49
00:02:57.476 --> 00:03:00.740
&gt;&gt; Scott Moss: And this is how we're
gonna resolve the user for a pet, or

50
00:03:00.740 --> 00:03:01.900
the owner for a pet.

51
00:03:01.900 --> 00:03:06.370
So now if I run this,
&gt;&gt; Scott Moss: There we go.

52
00:03:09.654 --> 00:03:12.210
&gt;&gt; Scott Moss: Cool,
it looks like something broke.

53
00:03:12.210 --> 00:03:14.610
UpdatePet, I have updatePet
in here somewhere.

54
00:03:14.610 --> 00:03:17.880
There we go, get rid of that thing.

55
00:03:21.070 --> 00:03:22.130
All right, that works.

56
00:03:22.130 --> 00:03:23.430
Go back, refresh this.

57
00:03:25.910 --> 00:03:32.910
&gt;&gt; Scott Moss: So now if I say, give me
one pet, I don't need any arguments here.

58
00:03:32.910 --> 00:03:35.960
I want the name,
verify that still works, cool.

59
00:03:35.960 --> 00:03:39.791
Now if I want the user,

60
00:03:39.791 --> 00:03:44.840
I can get the users, hold on.

61
00:03:44.840 --> 00:03:46.926
Call the owner, sorry,
that's why it's not working.

62
00:03:46.926 --> 00:03:50.370
If I wanna get the owners username,
and I could do that, and

63
00:03:50.370 --> 00:03:52.420
now I get the owners username.

64
00:03:52.420 --> 00:03:54.510
So what I'm gonna do is I'm
gonna clear this console, and

65
00:03:54.510 --> 00:03:57.560
I'm gonna look at what's happening,
so you can see what's going on.

66
00:03:57.560 --> 00:04:00.300
So I'm just gonna execute this once,
and we're gonna go, and

67
00:04:00.300 --> 00:04:03.690
we're gonna look at this console
to see what's actually happening.

68
00:04:03.690 --> 00:04:07.063
So the first thing that happened is we
executed the top level query called pet,

69
00:04:07.063 --> 00:04:08.810
that's the first thing that happened.

70
00:04:08.810 --> 00:04:12.426
Because I asked for the owner in my query,

71
00:04:12.426 --> 00:04:17.070
GraphQL is like, cool,
I gotta resolve that.

72
00:04:17.070 --> 00:04:20.390
It couldn't automatically resolve it,
because guess what?

73
00:04:20.390 --> 00:04:25.640
Pet doesn't have an owner field in it,
so it couldn't automatically resolve it.

74
00:04:25.640 --> 00:04:27.400
There is just nothing it could do.

75
00:04:27.400 --> 00:04:30.685
So one or two things would have happened.

76
00:04:30.685 --> 00:04:33.485
It would have failed because
it's a non-null field, or

77
00:04:33.485 --> 00:04:37.440
it's just gonna go look for a resolver
that I registered for this field.

78
00:04:37.440 --> 00:04:43.091
And that's exactly what I did,
I registered an owner for this pet.

79
00:04:43.091 --> 00:04:46.135
So when I ask for the owner,
it now went ahead and

80
00:04:46.135 --> 00:04:50.259
executed the pet.owner field
which is this one, pet.owner.

81
00:04:50.259 --> 00:04:51.650
How did they know the do that?

82
00:04:51.650 --> 00:04:55.953
Well, because the query.pet
returns the type of pet.

83
00:04:55.953 --> 00:05:00.407
So it knows to go look at the pet
resolvers, and the owner field for that,

84
00:05:00.407 --> 00:05:02.244
cuz that's what I asked for.

85
00:05:02.244 --> 00:05:04.723
So this is looking at the types,
and it's gonna the fields.

86
00:05:04.723 --> 00:05:06.318
It's literally just following the clues.

87
00:05:06.318 --> 00:05:07.925
And it's only gonna that
because I asked for it.

88
00:05:07.925 --> 00:05:11.793
So if I clear this out again, and
let's say, I don't ask for the owner,

89
00:05:11.793 --> 00:05:14.600
it's not gonna ask for the owner.

90
00:05:14.600 --> 00:05:17.440
You can see it only did query.pet,
and everything went to the owner.

91
00:05:17.440 --> 00:05:21.120
So I didn't ask for it, it doesn't know
what to do, unless I send it to query,

92
00:05:21.120 --> 00:05:22.230
that's when it knows what to do.

93
00:05:24.450 --> 00:05:28.253
So now if I go back and add that, and
you can see that's how that works.

94
00:05:28.253 --> 00:05:31.640
Any questions on that,
adding an owner to a pet?

95
00:05:33.400 --> 00:05:34.670
No, okay, so now we're gonna do
the other way around, go ahead.

96
00:05:34.670 --> 00:05:36.050
&gt;&gt; Speaker 2: An unrelated question.

97
00:05:36.050 --> 00:05:38.688
&gt;&gt; Scott Moss: Yep.
&gt;&gt; Speaker 2: Is there a way to enables

98
00:05:38.688 --> 00:05:43.608
this kind of slogan on
those resolver calls,

99
00:05:43.608 --> 00:05:44.990
or-
&gt;&gt; Scott Moss: Yes.

100
00:05:44.990 --> 00:05:46.780
&gt;&gt; Speaker 2: In the log somewhere?

101
00:05:46.780 --> 00:05:48.050
&gt;&gt; Scott Moss: 100%, there is.

102
00:05:49.140 --> 00:05:51.750
It depends on how granular
you want the logging.

103
00:05:51.750 --> 00:05:55.790
But yes, there's a way to
automatically add logging for

104
00:05:55.790 --> 00:05:57.740
all this stuff if you wanna follow it.

105
00:05:57.740 --> 00:06:00.030
You can do middleware.

106
00:06:00.030 --> 00:06:02.020
I mean, you can log it,
you can log in the context object.

107
00:06:02.020 --> 00:06:06.470
If you want, you could add a directive,
directive might be the best one.

108
00:06:08.450 --> 00:06:09.970
There's a lot of ways that you can do it.

109
00:06:10.980 --> 00:06:15.060
Are you specifically wanting to log every
single resolver to see what's happening?

110
00:06:15.060 --> 00:06:18.440
&gt;&gt; Speaker 2: Just if I need to
troubleshoot some, if there-

111
00:06:18.440 --> 00:06:19.460
&gt;&gt; Scott Moss: Just quickly turn it on?

112
00:06:19.460 --> 00:06:23.950
&gt;&gt; Speaker 2: To turn the and
to run a query and see what happened.

113
00:06:23.950 --> 00:06:26.707
&gt;&gt; Scott Moss: No, not by default,
but there's nothing stopping you.

114
00:06:26.707 --> 00:06:30.716
Like I said, I would say the easiest way
would be to have a directive, which,

115
00:06:30.716 --> 00:06:33.362
you can think of directives
are just middleware.

116
00:06:33.362 --> 00:06:37.480
Directives are just middleware that
intercepts a resolver, and you can put

117
00:06:37.480 --> 00:06:41.240
a log before you call those over, or
a log after you call the resolver.

118
00:06:41.240 --> 00:06:43.930
And you can do that globally for
every single resolver.

119
00:06:43.930 --> 00:06:49.690
But then you have to explicitly, in your
schema, add that directive on every single

120
00:06:51.440 --> 00:06:54.880
field or type that you want,
something like that, you got to do that.

121
00:06:54.880 --> 00:06:57.549
And then by default,
it'll just log for you.

122
00:06:57.549 --> 00:06:59.768
&gt;&gt; Speaker 2: Cuz Directive's
an advanced topic?

123
00:06:59.768 --> 00:07:01.660
&gt;&gt; Scott Moss: Directive
is a very advanced topic.

124
00:07:01.660 --> 00:07:04.440
Yeah, we're gonna talk about
that in the advanced course.

125
00:07:04.440 --> 00:07:07.030
But you don't need to know about
Directives to use ones that

126
00:07:07.030 --> 00:07:07.770
are already made.

127
00:07:07.770 --> 00:07:10.054
So if you wanna just
download a MPM install,

128
00:07:10.054 --> 00:07:13.092
I'm 100% sure there is
a director that does logging.

129
00:07:13.092 --> 00:07:16.530
That's a very simple use case, so I would
imagine you could just install that and

130
00:07:16.530 --> 00:07:17.250
get it working.

131
00:07:20.400 --> 00:07:25.060
Cool, okay,
any other questions on that, no?

132
00:07:25.060 --> 00:07:25.797
Okay, so let's do it the other way around.

133
00:07:25.797 --> 00:07:29.703
So now that we have owners and usernames,
I wanna be able to come out here and

134
00:07:29.703 --> 00:07:31.750
say I want some pets here on this owner.

135
00:07:31.750 --> 00:07:35.380
I wanna get this owner's pets,
so let's do that.

136
00:07:35.380 --> 00:07:39.190
We'll come up to user, and
I will say a user has pets.

137
00:07:39.190 --> 00:07:41.750
And it's an array of pet,
and it's not null.

138
00:07:41.750 --> 00:07:45.320
And if you look at the database again,
a user doesn't have pets.

139
00:07:45.320 --> 00:07:47.870
It doesn't exist,
we have to virtualize it, so

140
00:07:47.870 --> 00:07:49.370
it's not gonna automatically
be resolved for us.

141
00:07:49.370 --> 00:07:53.047
So as our job, as a person who's creating
this API, we need to resolve these fields.

142
00:07:53.047 --> 00:07:57.544
Otherwise, somebody is gonna break our
API, and it's gonna be our fault, so

143
00:07:57.544 --> 00:07:58.510
let's do that.

144
00:07:58.510 --> 00:08:01.580
So I go to the resolvers, and
I'll make a field level resolver for

145
00:08:01.580 --> 00:08:04.100
pets that exists on the user type.

146
00:08:04.100 --> 00:08:06.070
So I'll go to the user type,
which is down here.

147
00:08:07.590 --> 00:08:12.200
I'll make a field level resolver called
pets, same way it's indicated in there.

148
00:08:12.200 --> 00:08:15.530
And can somebody tell me what the first
value that's gonna be inside this field

149
00:08:15.530 --> 00:08:17.460
resolver for
pets that exist on either type?

150
00:08:17.460 --> 00:08:20.323
What's that gonna be?

151
00:08:20.323 --> 00:08:20.908
&gt;&gt; Speaker 2: User.
&gt;&gt; Scott Moss: It's gonna be

152
00:08:20.908 --> 00:08:21.596
user, exactly.

153
00:08:21.596 --> 00:08:26.360
It's gonna be user, because user is
gonna be resolved before the pets do.

154
00:08:26.360 --> 00:08:27.413
And we know that,

155
00:08:27.413 --> 00:08:31.925
because pets is a field that exists on
a type that doesn't belong to a query.

156
00:08:31.925 --> 00:08:35.201
And we know it's an user,
because that's what's before here,

157
00:08:35.201 --> 00:08:37.680
and it's also what's before here.

158
00:08:37.680 --> 00:08:39.370
It's always gonna be the user.

159
00:08:39.370 --> 00:08:43.150
The interesting part here is that there's
many ways to get to a user, right?

160
00:08:43.150 --> 00:08:44.470
Let's think about it.

161
00:08:44.470 --> 00:08:49.920
We can get to a user by,
if we had a query called me,

162
00:08:49.920 --> 00:08:52.460
and it returned a user,
we can get to a user that way.

163
00:08:52.460 --> 00:08:55.990
We can also get to a user through a pet,
because we just made an association where

164
00:08:55.990 --> 00:08:57.756
a pet has an owner,
which is appointed to a user.

165
00:08:57.756 --> 00:08:58.520
So there's so

166
00:08:58.520 --> 00:09:01.860
many ways that you can get to a user,
that part is unimportant to you.

167
00:09:01.860 --> 00:09:06.174
It doesn't matter, because although
you can come to a user at any point,

168
00:09:06.174 --> 00:09:09.736
through any path,
a user is always gonna have these fields.

169
00:09:09.736 --> 00:09:11.160
And that's never gonna change.

170
00:09:11.160 --> 00:09:12.660
And all these fields are always
gonna belong to a user,

171
00:09:12.660 --> 00:09:13.484
that's never gonna change.

172
00:09:13.484 --> 00:09:17.021
So it doesn't matter how
a query got to your type,

173
00:09:17.021 --> 00:09:21.760
as long as you resolve the fields,
everything's gonna work out.

174
00:09:21.760 --> 00:09:22.940
And that's how it works.

175
00:09:24.020 --> 00:09:28.040
That's the trick, is not to think about
how someone's able to do a thing,

176
00:09:28.040 --> 00:09:29.830
because they can do it however they want.

177
00:09:29.830 --> 00:09:33.680
They can get to wherever ways they want,
especially if you have these third degree,

178
00:09:33.680 --> 00:09:36.740
and third degree connections
where things are referencing,

179
00:09:36.740 --> 00:09:38.030
other things that reference other things.

180
00:09:38.030 --> 00:09:41.760
You're never gonna figure out all the
different scenarios that someone can come

181
00:09:41.760 --> 00:09:45.660
to your type, so
you can't put that logic in a resolver.

182
00:09:45.660 --> 00:09:47.920
You could only resolve a type.

183
00:09:47.920 --> 00:09:51.060
A type is only responsible for
resolving its own fields, that's it.

184
00:09:51.060 --> 00:09:53.000
It doesn't care about the other fields.

185
00:09:53.000 --> 00:09:55.630
It just only wants to
resolve its own fields, and

186
00:09:55.630 --> 00:09:58.930
it hopes that all the other types
are resolving its own fields.

187
00:09:58.930 --> 00:10:00.170
Just worry about your own business.

188
00:10:00.170 --> 00:10:03.560
Don't worry about my business,
I will just resolve it myself.

189
00:10:03.560 --> 00:10:05.662
That's how this stuff works, so
if you think about it that way.

190
00:10:05.662 --> 00:10:08.422
If you went through every single type
that you have and was like, cool,

191
00:10:08.422 --> 00:10:09.207
database has that.

192
00:10:09.207 --> 00:10:12.670
Database's got that, database ain't
got that I gotta write a resolver.

193
00:10:12.670 --> 00:10:15.190
Cool, database got these,
nope database don't have this.

194
00:10:15.190 --> 00:10:17.247
So I gotta write a resolver,
and that's all you gotta do.

195
00:10:17.247 --> 00:10:22.690
And everything's resolved, you're
good to go, so let's go to the pets.

196
00:10:22.690 --> 00:10:25.310
We know a user is gonna come here,
even though we're not gonna use it.

197
00:10:25.310 --> 00:10:30.330
And then we still have all these other
arguments that we're not gonna use.

198
00:10:30.330 --> 00:10:31.470
And then we have context.

199
00:10:31.470 --> 00:10:36.736
So in the real world, you would
do something like ctx.models.pet,

200
00:10:36.736 --> 00:10:38.890
and you would do a find many.

201
00:10:38.890 --> 00:10:43.654
And you would say I'm gonna
find all the pets whose user is

202
00:10:43.654 --> 00:10:48.034
like user.id,
that's what you would do, right?

203
00:10:48.034 --> 00:10:52.537
Give me all the pets whose users use their
ID, but all of them have the same user ID,

204
00:10:52.537 --> 00:10:55.500
so I was gonna say,
just give me all of them right now.

205
00:10:55.500 --> 00:11:00.130
And my example, because I did add
that ID fill to them, I can do this,

206
00:11:00.130 --> 00:11:01.130
and it will work.

207
00:11:01.130 --> 00:11:03.520
But if you didn't add the ID fill to them,
you can do this, and

208
00:11:03.520 --> 00:11:06.470
it'll just give you all the pets, which
we could say belong to the owner anyway.

209
00:11:06.470 --> 00:11:08.370
So either way, it's fine.

210
00:11:08.370 --> 00:11:11.710
But that's what you would do, so
I'm just gonna do that right quick.

211
00:11:13.670 --> 00:11:15.469
And now we can restart this thing.

212
00:11:15.469 --> 00:11:19.946
Actually, I'm gonna add some logs here,
so you can see what I'm talking about.

213
00:11:19.946 --> 00:11:27.970
And we'll say User =&gt; pets, like that.

214
00:11:27.970 --> 00:11:30.376
Oops, there we go.

215
00:11:32.849 --> 00:11:36.060
&gt;&gt; Scott Moss: All right, so
now if I run this, I say pets.

216
00:11:36.060 --> 00:11:36.900
Let me refresh this.

217
00:11:38.170 --> 00:11:39.540
And pets, I wanna get the name.

218
00:11:40.850 --> 00:11:43.846
And now you can see, let me go here.

219
00:11:43.846 --> 00:11:45.480
What actually happened?

220
00:11:45.480 --> 00:11:52.318
So we did a query on pet top level query,
and then the pet resolve the owner.

221
00:11:52.318 --> 00:11:57.471
And then owner's a user type,
so then it resolved the pets.

222
00:11:57.471 --> 00:12:01.140
Everybody follow me there?

223
00:12:01.140 --> 00:12:02.310
All right, it's pretty crazy.

224
00:12:02.310 --> 00:12:04.730
And if I kept going,
let me clear this console out.

225
00:12:08.081 --> 00:12:11.070
&gt;&gt; Scott Moss: Let me clear that out.

226
00:12:11.070 --> 00:12:18.259
If I keep going with this
approach of owner, that's owner.

227
00:12:21.200 --> 00:12:22.108
&gt;&gt; Scott Moss: It's just
gonna keep doing it.

228
00:12:27.210 --> 00:12:27.710
&gt;&gt; Scott Moss: Let me execute that.

229
00:12:33.399 --> 00:12:35.300
&gt;&gt; Scott Moss: It's just gonna keep going,
right?

230
00:12:35.300 --> 00:12:40.141
So we started with a top level query,
which return a pet type.

231
00:12:40.141 --> 00:12:44.620
We ask the owner of that pet type, and
then we ask for the pets of that owner.

232
00:12:44.620 --> 00:12:46.874
And then we ask for the owner of that pet,
and then we ask for

233
00:12:46.874 --> 00:12:49.921
the pets of that owner, and owner of that
pet, and it goes on, and on, and on.

234
00:12:49.921 --> 00:12:53.612
And then you can see here, it starts to
get in parallel, where you see pet owner,

235
00:12:53.612 --> 00:12:54.735
pet owner, pet owner.

236
00:12:54.735 --> 00:12:58.440
We're gonna have a list of pets, and they
all are being resolved at the same time.

237
00:12:58.440 --> 00:13:03.080
So they're running a parallel and then
we only have one user for all the pets.

238
00:13:03.080 --> 00:13:06.360
That's the one to many relationship
that you're observing right now.

239
00:13:06.360 --> 00:13:13.392
One user has many pets,
one user has many pets.

240
00:13:13.392 --> 00:13:15.206
One user has many pets, and
that's what you're seeing right now.

