WEBVTT

1
00:00:40.750 --> 00:00:41.440
&gt;&gt; Scott Moss: Type definitions,

2
00:00:41.440 --> 00:00:44.710
you can use a .GraphQL file,
you can put them in the stream.

3
00:00:44.710 --> 00:00:47.480
If you wanna use a file server
side you have to like set that up,

4
00:00:47.480 --> 00:00:50.320
use the file system,
read it, do all that stuff.

5
00:00:50.320 --> 00:00:51.220
I don't feel like doing all of that.

6
00:00:51.220 --> 00:00:54.780
So we're just gonna use what's
called a GraphQL template tag.

7
00:00:54.780 --> 00:00:58.470
So I'm just gonna say gql equals and

8
00:00:58.470 --> 00:01:01.645
you're gonna have this
package called GraphQL-tag.

9
00:01:01.645 --> 00:01:08.318
[SOUND] And
I'm just going to make some typedefs here.

10
00:01:08.318 --> 00:01:12.250
And who's here has used template tags and
JavaScript?

11
00:01:12.250 --> 00:01:13.690
It kind of looks like this.

12
00:01:13.690 --> 00:01:14.930
Right okay yeah.
So that's what we're doing.

13
00:01:14.930 --> 00:01:18.350
Basically what this is gonna do is going
to take whatever we put in this string,

14
00:01:18.350 --> 00:01:23.340
and it's going to compile
it into an AST graph QST

15
00:01:23.340 --> 00:01:24.870
that can be understood by the server.

16
00:01:24.870 --> 00:01:29.652
That's basically what it's doing, it
allows us to do it in a declarative way.

17
00:01:29.652 --> 00:01:32.646
And if you have like a plugin and
VS code or whatever editor you're using,

18
00:01:32.646 --> 00:01:34.644
you'll get some nice
syntax highlighting too.

19
00:01:34.644 --> 00:01:37.454
So the first thing is we
need to create some types.

20
00:01:37.454 --> 00:01:40.696
So to create a type, use the type keyword.

21
00:01:40.696 --> 00:01:41.820
You then give it a name.

22
00:01:41.820 --> 00:01:43.370
Let's just call this a user.

23
00:01:43.370 --> 00:01:44.730
All API's have users.

24
00:01:44.730 --> 00:01:45.710
So we'll make a type called user.

25
00:01:46.820 --> 00:01:50.300
And then you notice this kind of
looks like JavaScript here or Java or

26
00:01:50.300 --> 00:01:53.610
any C based language
with these brackets here.

27
00:01:53.610 --> 00:01:55.425
And then we can just
start adding some fields.

28
00:01:55.425 --> 00:01:57.652
So I'll say user has an email and

29
00:01:57.652 --> 00:02:01.870
this is where you would use
the scholars that I talked about.

30
00:02:01.870 --> 00:02:03.670
So GraphQL has some built in scholars.

31
00:02:03.670 --> 00:02:05.920
The main one that you'll use the most
is probably gonna be string.

32
00:02:07.430 --> 00:02:10.950
So I'm gonna say type user
has an email field and

33
00:02:10.950 --> 00:02:12.900
it expects that email
field to be a string.

34
00:02:14.170 --> 00:02:22.750
I can also say this user has a avatar,
which is also a string.

35
00:02:22.750 --> 00:02:28.560
And let's say in our database that a user
always has an email, which they should,

36
00:02:28.560 --> 00:02:31.550
and they always have an avatar
because maybe you set a default one.

37
00:02:31.550 --> 00:02:35.390
So you should let your graphical API
to know that hey, these are non no,

38
00:02:35.390 --> 00:02:38.600
these will always be here and the way you
can do that is using the exclamation mark.

39
00:02:38.600 --> 00:02:41.420
And by doing this, you're telling GraphQL

40
00:02:41.420 --> 00:02:45.940
that the email field on the user is
expected to always have a value.

41
00:02:45.940 --> 00:02:50.420
If it doesn't, then GraphQL is gonna break
because it's a strong read type language.

42
00:02:50.420 --> 00:02:54.160
It's not going to allow
a query to complete if that

43
00:02:54.160 --> 00:02:55.950
condition is not satisfied.

44
00:02:55.950 --> 00:02:57.890
So if you were to return a no for

45
00:02:57.890 --> 00:03:01.470
an email field on a user then
GraphQL would just break.

46
00:03:01.470 --> 00:03:04.330
It will literally tell you
there is a no value here so

47
00:03:04.330 --> 00:03:06.300
I'm not gonna complete
what you want me to do.

48
00:03:07.840 --> 00:03:11.850
Same thing that avatar
if I were to do that.

49
00:03:11.850 --> 00:03:16.430
So we got that,
let's also say a user has friends.

50
00:03:16.430 --> 00:03:17.320
This is a social network.

51
00:03:19.220 --> 00:03:23.020
And the way we can handle this is we can
use the array syntax here just like in

52
00:03:23.020 --> 00:03:24.190
JavaScript.

53
00:03:24.190 --> 00:03:27.140
And we can say,
friends are an array of users.

54
00:03:29.090 --> 00:03:29.780
It's that simple.

55
00:03:29.780 --> 00:03:34.570
And if I wanted the friends to always be
an array, I can put exclamation there.

56
00:03:34.570 --> 00:03:38.560
This would say a user has friends,
that's an array and

57
00:03:38.560 --> 00:03:41.370
the array itself not the not
the items in the array but

58
00:03:41.370 --> 00:03:45.530
the actual array should be non no as in
there should always be an array there.

59
00:03:45.530 --> 00:03:48.430
But if I also want to say that that
array should always have users in it

60
00:03:48.430 --> 00:03:50.980
as well then I can put an exclamation
mark inside of it like that.

61
00:03:50.980 --> 00:03:54.560
And this would say a user has friends.

62
00:03:54.560 --> 00:03:58.680
And the friends is always an array, and
that array always has something in it.

63
00:03:58.680 --> 00:04:01.030
So you can get pretty crazy with it.

64
00:04:01.030 --> 00:04:03.570
And again,
if these conditions aren't satisfied,

65
00:04:03.570 --> 00:04:06.460
GraphQL will break during a query or
during a mutation.

66
00:04:07.620 --> 00:04:10.250
And we'll get to the point where
how do you satisfy these things?

67
00:04:10.250 --> 00:04:11.941
And that's where resolvers come in.

68
00:04:11.941 --> 00:04:14.934
Cool, so we have a type.

69
00:04:14.934 --> 00:04:17.321
The next thing is what we can do,
and again, and

70
00:04:17.321 --> 00:04:19.180
again there's more scholars here.

71
00:04:19.180 --> 00:04:22.950
So we talked about string, but
we also have things like ints, which for

72
00:04:22.950 --> 00:04:26.810
integer, float for decimal based numbers.

73
00:04:26.810 --> 00:04:31.686
We have boolean for obviously a boolean,
and then you have ID,

74
00:04:31.686 --> 00:04:37.390
which is basically a string, but
meant to be used as a unique identifier.

75
00:04:37.390 --> 00:04:39.100
But it's basically a string.

76
00:04:39.100 --> 00:04:41.920
And those are the built in
scholars in GraphQL and

77
00:04:41.920 --> 00:04:44.600
you can get to the point where you
can make your own custom scholars.

78
00:04:44.600 --> 00:04:45.828
We're not going to do that today.

79
00:04:45.828 --> 00:04:46.512
But you can.

80
00:04:46.512 --> 00:04:49.052
You can make your own custom
scholar to do whatever you want.

81
00:04:49.052 --> 00:04:52.552
I mean, one of the biggest hacks that
people do in the graphical community is

82
00:04:52.552 --> 00:04:56.070
they make a JSON scholar to get around
the strongly typed nature of GraphQL.

83
00:04:56.070 --> 00:04:57.900
So I was like,
I'll just add a JSON field here.

84
00:04:57.900 --> 00:04:59.124
I was like.

85
00:04:59.124 --> 00:05:02.372
What's the point of GraphQL
if you just add a JSON field.

86
00:05:02.372 --> 00:05:05.365
So it's a big hack.

87
00:05:05.365 --> 00:05:06.682
I used it before, so that's how I know.

88
00:05:06.682 --> 00:05:11.331
[LAUGH] Okay, so
now that we have our user type.

89
00:05:11.331 --> 00:05:15.230
We now need to at minimum
a schema needs a query.

90
00:05:15.230 --> 00:05:16.218
So you can make a type.

91
00:05:16.218 --> 00:05:19.176
But if you don't need a query,
then how is someone gonna access it?

92
00:05:19.176 --> 00:05:23.970
You need to describe how
a client can access this type.

93
00:05:23.970 --> 00:05:24.990
And that's what a query is for.

94
00:05:24.990 --> 00:05:27.910
So at minimum,
a schema always needs a query.

95
00:05:27.910 --> 00:05:32.901
You don't need a mutation, but
you also you'll always need a query so

96
00:05:32.901 --> 00:05:35.620
to do that we'll just say type query.

97
00:05:36.620 --> 00:05:40.100
And by default, that's what GraphQL is
expecting, if you were to call this

98
00:05:40.100 --> 00:05:45.015
something else and expect this to be
the query, then you would have to tell

99
00:05:45.015 --> 00:05:49.980
GraphQL when you set up the server, that
the query type is now called something.

100
00:05:49.980 --> 00:05:51.044
I don't recommend doing that.

101
00:05:51.044 --> 00:05:53.159
I always recommend just calling it query.

102
00:05:53.159 --> 00:05:58.971
By default, it's looking for
a type called query to be the query type.

103
00:05:58.971 --> 00:06:00.965
So I don't recommend deviating from that.

104
00:06:00.965 --> 00:06:03.690
You're just gonna confuse
everyone at your company.

105
00:06:03.690 --> 00:06:04.840
They're not gonna know what you're doing.

106
00:06:04.840 --> 00:06:05.710
So just call it query.

107
00:06:05.710 --> 00:06:09.160
And the query type is no
different than a user type.

108
00:06:09.160 --> 00:06:11.630
It has fields that resolved to values.

109
00:06:11.630 --> 00:06:13.760
The only difference with this is,
for instance,

110
00:06:13.760 --> 00:06:19.540
let's say I wanted to get myself so
I'll make a query called me.

111
00:06:19.540 --> 00:06:21.270
Maybe instead of returning a scholar here,

112
00:06:21.270 --> 00:06:25.560
like a string, I don't want to do
that actually want to return a user.

113
00:06:25.560 --> 00:06:29.730
So now I can, I can say that the type
query has a field called me.

114
00:06:29.730 --> 00:06:32.430
And it's value is expected
to be a non null user.

115
00:06:32.430 --> 00:06:35.320
And we know that a user has
the email avatar to friends.

116
00:06:35.320 --> 00:06:40.250
So therefore this query should be like
an object with these fields on it.

117
00:06:40.250 --> 00:06:41.530
That will always be there.

118
00:06:42.770 --> 00:06:43.950
So that's what this is saying.

119
00:06:43.950 --> 00:06:49.649
So now I created a query, I have a type,
this is the basic stuff that I need.

120
00:06:49.649 --> 00:06:53.850
All I have to do now is write some
resolvers and create a server.

121
00:06:53.850 --> 00:06:56.210
So resolvers,

122
00:06:56.210 --> 00:06:58.380
there's a whole section of resolvers
that we're going to go over later.

123
00:06:58.380 --> 00:07:02.080
So if you have questions, you need to save
them for that or you can ask me now, but

124
00:07:02.080 --> 00:07:03.550
I'm not going to go too deep in resolvers,

125
00:07:03.550 --> 00:07:05.890
other than just making some
to satisfy this query.

126
00:07:06.910 --> 00:07:10.740
So if I were going to make some resolvers
here so it's gonna be an object.

127
00:07:10.740 --> 00:07:15.140
The way resolvers work is you
have to name them the same

128
00:07:15.140 --> 00:07:17.030
as they are in your type definitions.

129
00:07:17.030 --> 00:07:20.610
So I have to make a resolver for
the query type for the me field.

130
00:07:20.610 --> 00:07:26.330
So resolvers query me and
resolvers are just gonna be a function.

131
00:07:26.330 --> 00:07:29.252
Like I said we're gonna talk more about
it; I'm not gonna talk about the arguments

132
00:07:29.252 --> 00:07:30.304
till I get past here just yet.

133
00:07:30.304 --> 00:07:31.654
But what we're gonna do is this,

134
00:07:31.654 --> 00:07:35.840
this resolver it's job is literally just
to return something that looks like this.

135
00:07:35.840 --> 00:07:38.900
And what does the user look like,
it has email, avatar and a friend.

136
00:07:38.900 --> 00:07:39.800
So that's what we're gonna do.

137
00:07:39.800 --> 00:07:43.678
We're just gonna hearts code,
an object here that has an email.

138
00:07:49.682 --> 00:07:51.628
&gt;&gt; Scott Moss: And we have an avatar.

139
00:07:58.177 --> 00:08:02.204
&gt;&gt; Scott Moss: And then we have some
friends that also I'm gonna get rid of

140
00:08:02.204 --> 00:08:03.941
that excavation there.

141
00:08:03.941 --> 00:08:06.220
I don't feel like an adding object,
but a friend is an array.

142
00:08:07.650 --> 00:08:09.280
Cool so now we have our resolvers.

143
00:08:11.180 --> 00:08:12.360
Yes, question.

144
00:08:12.360 --> 00:08:14.760
&gt;&gt; Speaker 2: You named the part
that's supposed to be friend?

145
00:08:14.760 --> 00:08:15.340
&gt;&gt; Scott Moss: Sorry.

146
00:08:15.340 --> 00:08:16.560
Yes, thank you.

147
00:08:18.930 --> 00:08:19.810
Apollo server.

148
00:08:21.990 --> 00:08:23.770
And this is going to take a few things.

149
00:08:23.770 --> 00:08:26.350
One is going to take the type definitions,

150
00:08:26.350 --> 00:08:28.750
which I believe is just typed def
the same way that I have it here.

151
00:08:30.240 --> 00:08:33.210
Then it's going to take some resolvers,

152
00:08:33.210 --> 00:08:35.060
which is spelled the same
that I have it here.

153
00:08:36.780 --> 00:08:43.790
And once we have that, we can just say
server.listen, and I can give it a port.

154
00:08:43.790 --> 00:08:50.932
I'm just gonna say 4000, and
I believe this is a promise.

155
00:08:50.932 --> 00:08:56.733
So, I'll just say,
console.log on port 4000.

156
00:08:58.999 --> 00:09:02.240
&gt;&gt; Scott Moss: So this should be
all we need to create a GraphQL.

157
00:09:02.240 --> 00:09:05.925
Sorry, if you're just looking at it,
I mean this only 34 lines of codes.

158
00:09:05.925 --> 00:09:09.124
This is one of the most simplest
servers I ever had to create.

159
00:09:09.124 --> 00:09:12.934
I think this is even more simpler
than Express, in my opinion.

160
00:09:12.934 --> 00:09:15.490
Pretty simple, very declarative.

161
00:09:15.490 --> 00:09:16.810
If you were looking at an Express server,

162
00:09:16.810 --> 00:09:20.840
you wouldn't know what data it exposed
by looking at the route definitions.

163
00:09:20.840 --> 00:09:23.210
You'd have to go to another file,
go look at the database models,

164
00:09:23.210 --> 00:09:23.950
go look at the schemas.

165
00:09:23.950 --> 00:09:26.560
So you have to do a lot of stuff to
figure out, but just by looking here,

166
00:09:26.560 --> 00:09:28.989
I know exactly what my
API is capable of doing.

167
00:09:30.800 --> 00:09:33.810
Cool so if I run this,
let's see what happens?

168
00:09:35.970 --> 00:09:41.140
So I can say node api/demo.js, okay?

169
00:09:44.030 --> 00:09:45.380
ApolloServers now it's okay.

170
00:09:45.380 --> 00:09:49.900
It's I think it is named important
like that, let's check that out.

171
00:09:54.140 --> 00:09:55.140
Yeah, there we go.

172
00:09:55.140 --> 00:10:00.012
Okay, so it says we're on port 4000 and
this is where you're

173
00:10:00.012 --> 00:10:05.166
about to see something really cool
if you never seen GraphQL before.

174
00:10:05.166 --> 00:10:07.434
So I go to 4000.

175
00:10:07.434 --> 00:10:12.365
So this is called graphical
playground GraphQL Playground is one

176
00:10:12.365 --> 00:10:16.408
of many tools that allow you
to explore a GraphQL API.

177
00:10:16.408 --> 00:10:19.761
And because you are on a strongly
typed system like GraphQL,

178
00:10:19.761 --> 00:10:24.114
you get really cool stuff like this
like automated generated documentation.

179
00:10:24.114 --> 00:10:27.417
So you can see when I click on docs it
shows me all the queries that my API is

180
00:10:27.417 --> 00:10:31.120
capable of doing which is only one
at this point, it's called me.

181
00:10:31.120 --> 00:10:32.656
And it returns a user.

182
00:10:32.656 --> 00:10:35.625
I can also click on the schema and
see the entire schema.

183
00:10:35.625 --> 00:10:38.647
You'll see some stuff that
I didn't create in here and

184
00:10:38.647 --> 00:10:43.110
that's because this is what Apollo's
doing Apollo's adding, like this.

185
00:10:43.110 --> 00:10:44.730
A brand new scholar called upload.

186
00:10:44.730 --> 00:10:47.960
It's adding a something called
a directive called cache control

187
00:10:47.960 --> 00:10:49.080
is doing all that stuff for you.

188
00:10:49.080 --> 00:10:52.520
So this is why you would use a server and
not do it yourself.

189
00:10:52.520 --> 00:10:54.580
But yeah, you get that for free.

190
00:10:54.580 --> 00:10:56.970
So now that we have that,
what we can do is we can just run a query.

191
00:10:58.270 --> 00:11:00.110
And don't worry too much
about queries right now.

192
00:11:00.110 --> 00:11:01.790
We're gonna talk about that later.

193
00:11:01.790 --> 00:11:03.422
But this is how you would execute a query.

194
00:11:03.422 --> 00:11:08.535
So I wanted to run the me query,
pull that up,

195
00:11:08.535 --> 00:11:13.792
run the me query, and
I wanted to get my email.

196
00:11:13.792 --> 00:11:14.414
I can do that.

197
00:11:14.414 --> 00:11:17.160
And you can see, I get a response
back that's exactly the same.

198
00:11:18.530 --> 00:11:20.160
That's GraphQL in a nutshell.

199
00:11:20.160 --> 00:11:24.388
This is just the complete overview of how
you would go from nothing to something in

200
00:11:24.388 --> 00:11:25.145
two minutes.

201
00:11:25.145 --> 00:11:28.786
So now the whole point of this course is
we're gonna be covering how all of this

202
00:11:28.786 --> 00:11:31.208
works in detail from the front end and
the back end.

203
00:11:31.208 --> 00:11:34.082
I just wanted to demystify how simple
it is to actually make a server and

204
00:11:34.082 --> 00:11:35.898
if you don't know what
the hell is going on.

205
00:11:35.898 --> 00:11:39.224
&gt;&gt; Speaker 3: Yeah, I was curious as to
why you didn't need to put commas in your

206
00:11:39.224 --> 00:11:44.000
type desk for user when you have comments
and other places that look like objects.

207
00:11:44.000 --> 00:11:45.375
&gt;&gt; Scott Moss: You use JavaScript a lot,
don't you?

208
00:11:45.375 --> 00:11:45.890
&gt;&gt; Speaker 3: I do.
&gt;&gt; Scott Moss: Yeah,

209
00:11:45.890 --> 00:11:48.673
[LAUGH] I did the same thing
when I was learning JavaScript.

210
00:11:48.673 --> 00:11:50.022
I was like, wait,
you got to put commas here?

211
00:11:50.022 --> 00:11:54.320
No, it's not JavaScript,
it just looks like it.

212
00:11:54.320 --> 00:11:56.205
Just like,
have you ever used TypeScript before?

213
00:11:56.205 --> 00:11:57.764
&gt;&gt; [INAUDIBLE]
&gt;&gt; Scott Moss: Yeah, so

214
00:11:57.764 --> 00:12:01.430
in TypeScript I think you don't
have to put commas after the fields

215
00:12:01.430 --> 00:12:02.980
if you make a type in TypeScript.

216
00:12:02.980 --> 00:12:04.630
So it's basically the same thing.

217
00:12:04.630 --> 00:12:07.580
It's object like but it's not an object.

218
00:12:07.580 --> 00:12:11.070
This is not JavaScript like you can
run this and it would not execute,

219
00:12:11.070 --> 00:12:12.370
it will definitely fail.

220
00:12:12.370 --> 00:12:13.170
So there are no commas here.

221
00:12:13.170 --> 00:12:19.750
In fact I think if you put a comma here,
it just ignores it.

222
00:12:19.750 --> 00:12:23.274
So it's not that you can't
it just doesn't matter.

223
00:12:23.274 --> 00:12:27.698
So I think they did that for JavaScript
developers who put commas there.

224
00:12:27.698 --> 00:12:29.036
But you would never see,

225
00:12:29.036 --> 00:12:32.550
you will never see someone put
commas in their graphical schema.

226
00:12:32.550 --> 00:12:33.640
I've never seen it before so.

