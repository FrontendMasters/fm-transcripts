WEBVTT

1
00:00:00.140 --> 00:00:02.710
&gt;&gt; Scott Moss: Hoping everyone had some
time to wrap their head around that one.

2
00:00:02.710 --> 00:00:04.720
I saved the best one for last.

3
00:00:04.720 --> 00:00:08.480
That was the last exercise of
the server side stuff today.

4
00:00:08.480 --> 00:00:11.990
And I wanted that to be, yeah,
there's a lot building up to that.

5
00:00:11.990 --> 00:00:16.640
But if you can get past that,
you pretty much understand graph kill.

6
00:00:16.640 --> 00:00:19.110
So what I'm gonna do now,
is actually go through and build it.

7
00:00:19.110 --> 00:00:23.310
But I'll also explain it a little
more in a way that I think

8
00:00:23.310 --> 00:00:26.920
what helped make sense of it,
because it can be pretty confusing.

9
00:00:26.920 --> 00:00:28.240
But so let's do that.

10
00:00:28.240 --> 00:00:31.010
So what I'll do is I'll
go to the schema here.

11
00:00:31.010 --> 00:00:35.040
And first thing is a pet needs a user.

12
00:00:35.040 --> 00:00:38.702
So I'm gonna add a field
on a pet called user.

13
00:00:38.702 --> 00:00:41.460
Okay, I'm going to set its type to a user.

14
00:00:41.460 --> 00:00:43.670
I'm gonna say it's required.

15
00:00:44.860 --> 00:00:47.550
In fact, I don't like pets having users,
I like them having owners.

16
00:00:47.550 --> 00:00:49.810
I mean, pets don't have users.

17
00:00:49.810 --> 00:00:51.030
[COUGH] They have I have owners.

18
00:00:52.056 --> 00:00:54.170
So I'm gonna call it an owner, but
still keep it to the user type.

19
00:00:55.610 --> 00:00:59.040
And then I'm gonna go to the, actually
we're not gonna focus that part right now.

20
00:00:59.040 --> 00:01:00.240
I'm gonna keep it very simple.

21
00:01:00.240 --> 00:01:02.440
So we're gonna focus on
the pet part right now.

22
00:01:02.440 --> 00:01:04.880
So, let's just think about this.

23
00:01:06.220 --> 00:01:10.800
A pet doesn't actually have an owner

24
00:01:10.800 --> 00:01:14.240
associated with it,
stored in the database somewhere.

25
00:01:14.240 --> 00:01:15.430
It just doesn't exist.

26
00:01:15.430 --> 00:01:17.610
I mean,
let's go look at our database .Json.

27
00:01:17.610 --> 00:01:19.800
There's nothing in here,

28
00:01:19.800 --> 00:01:23.895
that says anything about an owner or
anything like that.

29
00:01:23.895 --> 00:01:26.323
And if it was.

30
00:01:27.799 --> 00:01:30.020
&gt;&gt; Scott Moss: It would be at most.

31
00:01:31.140 --> 00:01:33.660
It would be an ID of something.

32
00:01:33.660 --> 00:01:35.850
It wouldn't be an actual owner object,

33
00:01:35.850 --> 00:01:39.540
like you don't store stuff in a database
like that, like your database be so

34
00:01:39.540 --> 00:01:41.750
denormalized, I don't know
how you would even query it.

35
00:01:41.750 --> 00:01:43.991
So you can't do that,
mostly for references.

36
00:01:43.991 --> 00:01:45.845
So let's imagine that
there's a reference here, and

37
00:01:45.845 --> 00:01:48.035
the reason that you don't see it yet
is we haven't created any.

38
00:01:48.035 --> 00:01:52.585
We haven't made any with any IDs,
but for the sake of this exercise,

39
00:01:52.585 --> 00:01:55.980
I can just,
I'll just put some in here for now.

40
00:01:55.980 --> 00:01:59.020
I have my user, and
just put all these IDs in here and

41
00:01:59.020 --> 00:02:02.490
that will help us do some associations.

42
00:02:02.490 --> 00:02:04.110
You didn't have to manually do this.

43
00:02:04.110 --> 00:02:07.070
But, this was going to help me get
through the example a lot better, and

44
00:02:07.070 --> 00:02:08.010
make sense of it.

45
00:02:08.010 --> 00:02:12.820
So, I will put the user ID on all these
pets, which is the only user the database.

46
00:02:12.820 --> 00:02:13.640
So that is gonna help us.

47
00:02:13.640 --> 00:02:17.959
So, now that I have that,
what I can do is.

48
00:02:19.440 --> 00:02:21.340
Let's go back to the schema.

49
00:02:21.340 --> 00:02:25.010
And we know that a pet has an owner and
a user.

50
00:02:25.010 --> 00:02:25.770
But again if we go.

51
00:02:25.770 --> 00:02:26.560
But look at the database.

52
00:02:26.560 --> 00:02:27.390
There's no owner field here.

53
00:02:27.390 --> 00:02:28.980
So that means we have to virtualize it.

54
00:02:28.980 --> 00:02:32.830
That means we have to write a resolver for
that field on a pet.

55
00:02:32.830 --> 00:02:35.470
Because it's not gonna be
automatically resolved for

56
00:02:35.470 --> 00:02:39.920
us, because there's no key in our
pet object that's called owner.

57
00:02:39.920 --> 00:02:43.370
Or in your case called user or
whatever you call it, it doesn't exist.

58
00:02:43.370 --> 00:02:46.560
So you have to resolve it because if
a query from the client came in and

59
00:02:46.560 --> 00:02:50.880
asked for it, gravity is gonna break
because it doesn't exist, especially if

60
00:02:50.880 --> 00:02:55.600
it's not know which I think in our case, I
didn't make it not know, it's gonna break.

61
00:02:55.600 --> 00:02:58.290
So that's the indication that okay,
I need to write a resolver for

62
00:02:58.290 --> 00:03:01.960
this, because if it's not automatically
gonna be resolved from a data source.

63
00:03:01.960 --> 00:03:03.670
Then you have to write a resolver for it.

64
00:03:04.720 --> 00:03:07.880
I told you, your your job is a person
who's building a graphical server,

65
00:03:07.880 --> 00:03:10.230
is making sure all your
fields are resolved.

66
00:03:10.230 --> 00:03:11.060
That's it.

67
00:03:11.060 --> 00:03:13.780
If you make sure all your fields
eventually get resolved either

68
00:03:13.780 --> 00:03:17.200
automatically because the database
connects exactly what the types, or

69
00:03:17.200 --> 00:03:19.680
because you wrote manual resolvers,
your job is done.

70
00:03:19.680 --> 00:03:20.850
You're not to do anything else.

