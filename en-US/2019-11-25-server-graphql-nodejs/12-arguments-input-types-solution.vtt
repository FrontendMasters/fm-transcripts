WEBVTT

1
00:00:00.120 --> 00:00:03.970
&gt;&gt; Scott Moss: So you were tasked with
adding some inputs to the pets query,

2
00:00:03.970 --> 00:00:07.950
than adding a pet query here.

3
00:00:07.950 --> 00:00:09.880
So let's just finish that.

4
00:00:09.880 --> 00:00:13.930
So right now, I already have a pet input
that I created through the last example.

5
00:00:13.930 --> 00:00:15.420
So I'm just going to expand on that, and

6
00:00:15.420 --> 00:00:18.940
actually finished a resolver to do that,
and already did most of that too.

7
00:00:18.940 --> 00:00:22.990
So I'm just gonna return In front of this,
and the way find many works, and

8
00:00:22.990 --> 00:00:26.640
the way find one works, it just takes
an object of fields and values.

9
00:00:26.640 --> 00:00:31.460
So, if you look at my pet input,
it's an object of fields and values, so

10
00:00:31.460 --> 00:00:35.800
I can just pass the entire input objects
in like that, and it just works.

11
00:00:35.800 --> 00:00:38.300
It'll filter for me, so I'll do that.

12
00:00:39.350 --> 00:00:40.920
That'll do my pets.

13
00:00:40.920 --> 00:00:45.870
And then, for the one pet,
I need to make another input here.

14
00:00:45.870 --> 00:00:49.010
And then depending on what you decided
to filter on, you might have just reused

15
00:00:49.010 --> 00:00:53.520
the pet input, which allows you to
select one pet based off this criteria.

16
00:00:53.520 --> 00:00:57.809
So you can just do that, and I'll make
a resolver for that, which is called pets.

17
00:00:59.290 --> 00:01:05.020
And it also has an input, and
take the context here and

18
00:01:05.020 --> 00:01:08.170
I'm just gonna do literally the same
thing as I have up here, but,

19
00:01:08.170 --> 00:01:12.550
instead of find many it should
be find one so we'll do that.

20
00:01:12.550 --> 00:01:15.570
Make sure everything is saved.

21
00:01:15.570 --> 00:01:16.660
What is this?

22
00:01:16.660 --> 00:01:17.347
Why is this not saved?

23
00:01:17.347 --> 00:01:20.920
Okay, and
we don't have anything in our database, so

24
00:01:20.920 --> 00:01:25.284
I'm gonna ask some stuff here so
we can actually see this working.

25
00:01:25.284 --> 00:01:29.207
So, I know a pet looks like,
if I go to scheme.json,

26
00:01:29.207 --> 00:01:34.285
I know what pet looks like this as an ID,
a type, and stuff like that.

27
00:01:34.285 --> 00:01:38.378
So, I'll just make some right
quick hard code's on in here.

28
00:01:41.018 --> 00:01:44.428
&gt;&gt; Scott Moss: And give it some ids of 1.

29
00:01:44.428 --> 00:01:49.140
Give this one an id of 2.

30
00:01:50.900 --> 00:01:53.599
&gt;&gt; Speaker 2: Your createdAt
needs to be a number.

31
00:01:53.599 --> 00:01:58.916
&gt;&gt; Scott Moss: Thank you,
createdAt some number.

32
00:01:58.916 --> 00:02:02.918
Wait, No, createdAt,
I think it's a string on mine, let's see,

33
00:02:02.918 --> 00:02:04.990
we'll see, we'll figure it out.

34
00:02:04.990 --> 00:02:09.470
Name, moves, type, dog,

35
00:02:09.470 --> 00:02:13.950
let's do dog like that, and

36
00:02:13.950 --> 00:02:19.935
we'll do the same thing, like that.

37
00:02:19.935 --> 00:02:24.465
Some more Time stuff in there.

38
00:02:24.465 --> 00:02:27.770
I actually have a cat named Daryl,
so I'm gonna put Daryl.

39
00:02:27.770 --> 00:02:29.362
[LAUGH]
&gt;&gt; Speaker 3: Great cat name.

40
00:02:29.362 --> 00:02:32.755
&gt;&gt; Scott Moss: It's a good cat name,
he has a wardrobe of pajamas.

41
00:02:32.755 --> 00:02:34.716
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Scott Moss: [LAUGH] And

42
00:02:34.716 --> 00:02:37.939
we just shaved him so
he looks like a lion now, it's hilarious.

43
00:02:39.400 --> 00:02:40.450
Cool, so we got that.

44
00:02:41.490 --> 00:02:44.950
Restart this server here.

45
00:02:46.290 --> 00:02:47.172
Everything looks good.

46
00:02:50.952 --> 00:02:51.750
&gt;&gt; Scott Moss: Look at our docs.

47
00:02:51.750 --> 00:02:55.790
So, if you look here, you can see
in our docs in GraphQL Playground,

48
00:02:55.790 --> 00:02:59.130
you can see that it actually takes
note of the inputs that we have.

49
00:02:59.130 --> 00:03:00.870
Pet input and things like that.

50
00:03:00.870 --> 00:03:03.690
We can even select the pet input,
and see what that looks like.

51
00:03:03.690 --> 00:03:07.170
And then obviously, we can keep drilling
down and doing all that stuff like that.

52
00:03:07.170 --> 00:03:10.330
So we get the full example,
if we look at the schema.

53
00:03:10.330 --> 00:03:13.280
We can also see our inputs
showing up on the schema,

54
00:03:13.280 --> 00:03:17.480
with our inputs being placed inside of
our queries and all sorts of things.

55
00:03:17.480 --> 00:03:18.800
So, pretty good.

56
00:03:18.800 --> 00:03:23.780
So now, what we'll do,
is get this to go away, go away.

57
00:03:23.780 --> 00:03:28.120
Thank you, did not want to go away.

58
00:03:29.280 --> 00:03:35.989
And we'll do some pets like this,
will pass up some arguments, so inputs.

59
00:03:38.010 --> 00:03:42.463
And I'm gonna say, I wanna type dog, and

60
00:03:42.463 --> 00:03:47.692
I'll get to type here and
name, and we run this.

61
00:03:47.692 --> 00:03:53.614
And you can see, I only get back
an array of pets whose type is dog,

62
00:03:53.614 --> 00:03:57.785
if I change this to cat,
I should get back.

63
00:03:57.785 --> 00:04:01.260
I guess I spelled cat definitely
on the server than I did.

64
00:04:01.260 --> 00:04:04.790
Yeah, put a S, gotta love that Jason.

65
00:04:06.360 --> 00:04:07.270
Boom, now we get a cat.

66
00:04:09.410 --> 00:04:15.967
Right, so that's for pets, for pet, I just
open up a new tab here, gonna put pet.

67
00:04:15.967 --> 00:04:18.204
And pretty much gonna do the same thing.

68
00:04:18.204 --> 00:04:19.505
I was gonna get one pet.

69
00:04:22.711 --> 00:04:27.412
&gt;&gt; Scott Moss: That has a type of,
&gt;&gt; Scott Moss: Cat and

70
00:04:27.412 --> 00:04:31.220
give it a name and I get Daryl.

71
00:04:31.220 --> 00:04:31.720
Yes?

72
00:04:32.890 --> 00:04:40.201
&gt;&gt; Speaker 4: Is case sensitivity
going to depend on the files system.

73
00:04:40.201 --> 00:04:45.530
&gt;&gt; Scott Moss: Cases activity for
what exactly?

74
00:04:45.530 --> 00:04:46.520
&gt;&gt; Speaker 4: For the query.

75
00:04:46.520 --> 00:04:49.191
So for example, if you type in cat,

76
00:04:49.191 --> 00:04:54.722
that's all lower case on a case
insensitive file system, would it care?

77
00:04:56.847 --> 00:05:00.520
&gt;&gt; Scott Moss: So this has nothing to
do with file systems in this case.

78
00:05:00.520 --> 00:05:05.080
This is explicitly only
looking at this value here.

79
00:05:05.080 --> 00:05:05.613
&gt;&gt; Speaker 4: Gotcha.

80
00:05:05.613 --> 00:05:06.173
&gt;&gt; Scott Moss: Right?

81
00:05:06.173 --> 00:05:10.640
But node, or I guess it's not node.

82
00:05:10.640 --> 00:05:12.500
I guess it's just MacBooks in general.

83
00:05:12.500 --> 00:05:17.415
MacBooks are insensitive
to case sensitivity.

84
00:05:17.415 --> 00:05:19.156
&gt;&gt; Speaker 4: The default
is case sensitive.

85
00:05:19.156 --> 00:05:20.198
&gt;&gt; Scott Moss: The default case sensitive.

86
00:05:20.198 --> 00:05:21.510
Okay, I want to change mine.

87
00:05:21.510 --> 00:05:27.241
But yeah, but graph field is not looking
at the files as anything like that, this

88
00:05:27.241 --> 00:05:33.245
type is literally, I mean, I guess I could
just show you inside of, let me show you.

89
00:05:33.245 --> 00:05:35.160
If I go to the pet.

90
00:05:35.160 --> 00:05:40.050
Stuff inside of five minute you can see
that it's getting a pet from the Jason

91
00:05:40.050 --> 00:05:43.550
file, and it's applying the filter that
you passed and this is getting value.

92
00:05:43.550 --> 00:05:46.488
So it's only looking at those fields and
those values, and

93
00:05:46.488 --> 00:05:48.202
it's doing a direct comparison.

94
00:05:48.202 --> 00:05:52.130
It's literally using lodash or whatever
lodash does to compete those values.

95
00:05:52.130 --> 00:05:52.760
That's what it's doing.

96
00:05:53.800 --> 00:05:54.300
Yeah.

97
00:05:56.960 --> 00:06:00.440
Any questions on input types and
arguments?

98
00:06:00.440 --> 00:06:01.100
Yes?

99
00:06:01.100 --> 00:06:03.201
&gt;&gt; Speaker 5: Yeah, one quick question.

100
00:06:03.201 --> 00:06:06.469
If you used the same input type,
the pet input, for

101
00:06:06.469 --> 00:06:10.118
both of the queries, but
then, like so, for find many,

102
00:06:10.118 --> 00:06:14.833
that makes sense you can expose multiple
values, but then with find one,

103
00:06:14.833 --> 00:06:17.268
it doesn't really make sense to
&gt;&gt; Scott Moss: Exactly

104
00:06:17.268 --> 00:06:18.693
&gt;&gt; Speaker 5: Create by name it, but

105
00:06:18.693 --> 00:06:20.943
then if you want to so use pet input,

106
00:06:20.943 --> 00:06:25.620
Is there a way to specify that you
can only allow queries by the id?

107
00:06:25.620 --> 00:06:26.660
On that same pet input or

108
00:06:26.660 --> 00:06:28.140
do you have to create another pet input-
&gt;&gt; Scott Moss: So,

109
00:06:28.140 --> 00:06:29.600
that's like a code level thing.

110
00:06:29.600 --> 00:06:33.030
So, whenever you have to
check the value of something.

111
00:06:33.030 --> 00:06:34.236
You have to do that on resolver.

112
00:06:34.236 --> 00:06:35.951
Because GraphQL is just static,

113
00:06:35.951 --> 00:06:39.572
it's not gonna check the value when
you statically type your scheme.

114
00:06:39.572 --> 00:06:42.435
So, if you want that grade of graduality,

115
00:06:42.435 --> 00:06:45.623
then you have to do that
inside your resolvers.

116
00:06:45.623 --> 00:06:48.910
For this resolver on pet,
you can only send an ID, everything else,

117
00:06:48.910 --> 00:06:52.480
I'm either gonna throw an error, or
I'm just gonna ignore it, right?

118
00:06:52.480 --> 00:06:53.950
You will do that in your resolver 100%.

119
00:06:55.240 --> 00:07:00.128
But then you gotta ask yourself,
do you want to allow your

120
00:07:00.128 --> 00:07:03.600
GraphQL schema to

121
00:07:03.600 --> 00:07:07.164
let people know that you can do something
when your resolvers don't allow it?

122
00:07:07.164 --> 00:07:11.050
So, you gotta the point where
you stay true to your schema.

123
00:07:11.050 --> 00:07:14.160
Like if your schema allows it,
then you should support it.

124
00:07:14.160 --> 00:07:18.650
And if it doesn't,
then you should change the schema.

125
00:07:18.650 --> 00:07:23.070
&gt;&gt; Speaker 4: Can you pass in
more than one value to match?

126
00:07:23.070 --> 00:07:24.460
&gt;&gt; Scott Moss: Yes,
you can pass on more than one value.

127
00:07:24.460 --> 00:07:28.060
So, what do I have for,
what's on the pet type?

128
00:07:28.060 --> 00:07:34.750
Input, a name, so
I pass in a name here, my God, go away.

129
00:07:34.750 --> 00:07:38.802
So I pass it a name that I
don't have like, this is,

130
00:07:38.802 --> 00:07:45.860
I know Moose is the dog, but I'm asking
for a cat, so let's see what happens.

131
00:07:45.860 --> 00:07:46.490
Nothing comes back.

132
00:07:48.350 --> 00:07:51.790
&gt;&gt; Speaker 4: Not to filter
parameters simultaneously.

133
00:07:51.790 --> 00:07:56.520
What I'm saying is cat or
dog, or name one or name two.

134
00:07:57.720 --> 00:07:59.326
&gt;&gt; Scott Moss: No.
Not in this use case, no.

135
00:07:59.326 --> 00:08:04.333
The very generic simple Davis sensation
that I've built as an abstraction,

136
00:08:04.333 --> 00:08:05.882
does not support that.

137
00:08:05.882 --> 00:08:10.995
But, yes, that is possible,
a lot of GraphQL API's is a support,

138
00:08:10.995 --> 00:08:14.873
ors and ands and
different combinators like that.

139
00:08:14.873 --> 00:08:19.357
Are GraphQL API supports that, and
a lot of the GraphQL API support that,

140
00:08:19.357 --> 00:08:22.990
It really depends on if you want
a support in your resolver.

141
00:08:22.990 --> 00:08:24.370
But yeah, you can do that.

142
00:08:24.370 --> 00:08:26.920
And that's when it gets really crazy,
where it's like,

143
00:08:26.920 --> 00:08:32.010
do you want the inputs to be so
specific, like for instance,

144
00:08:32.010 --> 00:08:36.800
if you had a cat, and you have all these
fields, are you gonna make an input for

145
00:08:36.800 --> 00:08:40.770
every single field, for
instance, the field is a number.

146
00:08:40.770 --> 00:08:44.255
You'll have to say input
dot age dot greater than,

147
00:08:44.255 --> 00:08:46.370
or input dot age dot less than.

148
00:08:46.370 --> 00:08:51.850
So there's a strategy on how you determine
that, and the community has come together,

149
00:08:51.850 --> 00:08:57.330
and they've created standards on how to
define those resources on the GraphGL API.

150
00:08:57.330 --> 00:08:59.960
So there are standards
to defining inputs for

151
00:08:59.960 --> 00:09:02.170
resources that you can
do things like that.

152
00:09:02.170 --> 00:09:04.900
I'm pretty sure Prisma created one.

153
00:09:04.900 --> 00:09:05.660
I forgot the name of it.

154
00:09:05.660 --> 00:09:07.750
I'll find the link to it,
they have whole website, it's like,

155
00:09:07.750 --> 00:09:11.890
here's how you should build a GraphQL API,
if you need this flexibility, because

156
00:09:11.890 --> 00:09:15.180
otherwise you're gonna be sited there,
thinking for a long time how to do it.

157
00:09:15.180 --> 00:09:17.470
Hasura, the thing that
I showed you instantly,

158
00:09:17.470 --> 00:09:19.390
also has pretty much the same thing.

159
00:09:19.390 --> 00:09:23.310
They do it slightly differently,
but if you look at their docs,

160
00:09:23.310 --> 00:09:26.560
wherever their docs are, I don't know
where the link to their docs are.

161
00:09:27.800 --> 00:09:28.360
Wow, okay.

162
00:09:30.160 --> 00:09:31.500
They're docs are around here somewhere.

163
00:09:31.500 --> 00:09:34.484
Look at their docs,
you can see how they generate their API's.

164
00:09:34.484 --> 00:09:35.234
And you'll see notes talking about it.

165
00:09:35.234 --> 00:09:39.898
They have very specific filtering rules
based off on fields that exist on your

166
00:09:39.898 --> 00:09:40.530
schema.

167
00:09:40.530 --> 00:09:42.760
So they're extremely well typed.

168
00:09:42.760 --> 00:09:44.564
So, good question.

169
00:09:47.080 --> 00:09:49.360
&gt;&gt; Scott Moss: Any questions on input,
types, and arguments.

170
00:09:50.710 --> 00:09:51.630
Yes?

171
00:09:51.630 --> 00:09:55.009
&gt;&gt; Speaker 6: Assuming you can make custom
scalar values for these input types,

172
00:09:55.009 --> 00:09:57.369
it's like you can define
custom scalars for.

173
00:09:57.369 --> 00:09:57.972
&gt;&gt; Scott Moss: Yep
&gt;&gt; Speaker 6: So you

174
00:09:57.972 --> 00:10:02.340
have some crazy query language,
you kind of want to invent, or adopt.

175
00:10:02.340 --> 00:10:03.620
You can make a scalar that defines,

176
00:10:03.620 --> 00:10:07.476
that has to conform to this
kind of string specifications.

177
00:10:07.476 --> 00:10:12.460
&gt;&gt; Scott Moss: Yup, 100%, as long as
there's a scholar, the input can use it.

178
00:10:12.460 --> 00:10:15.670
Same thing goes with the type, and
you can make anything a scholar.

179
00:10:15.670 --> 00:10:17.644
Like I said, you can make and
adjacent screen a scholar.

180
00:10:17.644 --> 00:10:21.020
I mean there's literally nothing
you can't do with a scholar,

181
00:10:21.020 --> 00:10:25.930
cuz a scholar basically an object
that has some functions on it,

182
00:10:25.930 --> 00:10:31.210
that get executed when GraphQL
is trying to resolve a scholar,

183
00:10:31.210 --> 00:10:34.270
or parse a scholar, or
get it ready for execution.

184
00:10:34.270 --> 00:10:35.855
All you gotta do,
is just define those functions and

185
00:10:35.855 --> 00:10:37.631
it's up to you to do whatever
you want in those functions.

