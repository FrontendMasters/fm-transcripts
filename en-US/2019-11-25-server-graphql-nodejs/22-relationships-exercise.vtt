WEBVTT

1
00:00:00.040 --> 00:00:04.380
&gt;&gt; Scott Moss: So now you're gonna add
new fields on the types, the reference

2
00:00:04.380 --> 00:00:08.680
other types, and then create resolvers for
those field types that point to types.

3
00:00:08.680 --> 00:00:10.330
That was super redundant.

4
00:00:10.330 --> 00:00:14.450
But basically what you're gonna be doing
is if you go to the schema, a pet should

5
00:00:14.450 --> 00:00:20.390
have a user, and
a user should have an array of pets.

6
00:00:20.390 --> 00:00:21.930
So you need to make that happen.

7
00:00:21.930 --> 00:00:24.760
One thing you're gonna
have to do is because

8
00:00:24.760 --> 00:00:27.340
the user is pretty much hard
coded inside the database,

9
00:00:27.340 --> 00:00:32.120
you could just copy the ID and paste that
whenever you make a pet yourself, or

10
00:00:32.120 --> 00:00:37.380
what you can do is if you
go into the server file,

11
00:00:37.380 --> 00:00:41.300
you can get the user here,
and add it to the context.

12
00:00:41.300 --> 00:00:46.850
So if you did something like
const user = models.user.get.

13
00:00:46.850 --> 00:00:48.139
That'll give you the user, and

14
00:00:48.139 --> 00:00:50.610
then you can just pass it
here on the context object.

15
00:00:50.610 --> 00:00:52.020
And now every resolver has the user.

16
00:00:53.610 --> 00:00:55.070
That's a quick way to get the user.

17
00:00:55.070 --> 00:00:58.950
You're probably gonna need that when
you're trying to resolve a user for

18
00:00:58.950 --> 00:01:03.455
a pet, basically when you're trying
to resolve a user for a pet.

19
00:01:03.455 --> 00:01:04.030
pet.user.

20
00:01:04.030 --> 00:01:06.290
You're gonna need that, and
you can just return that thing.

21
00:01:07.350 --> 00:01:13.720
So your goal is to one,
go into the schema, add a relationship

22
00:01:13.720 --> 00:01:19.530
to users on the pet object, and then add
a relationship to pets on the user object.

23
00:01:19.530 --> 00:01:22.580
And then you need to write
the resolvers for those fields, so

24
00:01:22.580 --> 00:01:30.870
that would be pet.user needs a resolver,
and then user.pets needs a resolver,

25
00:01:30.870 --> 00:01:34.780
and yeah, go ahead and
resolve those things.

26
00:01:34.780 --> 00:01:38.770
So for the all pets have the same user,
so you don't need to filter by

27
00:01:38.770 --> 00:01:41.190
give me all the pets for this user,
there's only one using the database so

28
00:01:41.190 --> 00:01:44.170
you don't need to filter there,
you can just get all the pets.

29
00:01:44.170 --> 00:01:47.720
Then for the user,
there's only one user in the database, and

30
00:01:47.720 --> 00:01:50.600
you can use the trigger I
showed you with the context, or

31
00:01:50.600 --> 00:01:54.030
you can just query the database for models
dot, you can do it inside the resolver.

32
00:01:54.030 --> 00:01:55.900
Either way, you can do it in the context
or you can do it in the resolver,

33
00:01:55.900 --> 00:01:58.150
it's up to you, but
you gotta write the same code.

34
00:01:58.150 --> 00:02:01.690
Cool, any questions on relationships, yes?

35
00:02:01.690 --> 00:02:02.950
&gt;&gt; Speaker 2: How'd you get the user?

36
00:02:02.950 --> 00:02:05.422
&gt;&gt; Scott Moss: Yeah, so I got the user
using models dot user dot get.

37
00:02:09.849 --> 00:02:10.370
&gt;&gt; Scott Moss: Or.

38
00:02:10.370 --> 00:02:11.540
Actually, let's a look.

39
00:02:12.920 --> 00:02:13.789
Now I'm second guessing myself.

40
00:02:13.789 --> 00:02:14.840
What did I put here?

41
00:02:14.840 --> 00:02:16.272
Yeah, it's find one.

42
00:02:16.272 --> 00:02:19.330
I standardize it at the last, cool.

43
00:02:19.330 --> 00:02:20.660
So find one, that'll give you the user.

44
00:02:20.660 --> 00:02:23.810
And then once you do that,
it's just some queries and

45
00:02:23.810 --> 00:02:26.340
see if you can get your computer to crash.

46
00:02:26.340 --> 00:02:29.310
Tell me how many levels you
had to go to get it crash.

47
00:02:29.310 --> 00:02:29.810
That'll be cool.

