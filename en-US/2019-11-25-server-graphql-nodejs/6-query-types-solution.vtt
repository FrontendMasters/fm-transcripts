WEBVTT

1
00:00:00.280 --> 00:00:02.803
&gt;&gt; Scott Moss: All right,
so now we're back.

2
00:00:02.803 --> 00:00:07.980
Hopefully, everyone had enough
time to get through that exercise.

3
00:00:07.980 --> 00:00:13.800
If you ran through an issue where,
I'm sorry,

4
00:00:13.800 --> 00:00:15.870
if the app was breaking,
well, not breaking.

5
00:00:15.870 --> 00:00:18.651
But it wasn't returning a context
like it should have been.

6
00:00:18.651 --> 00:00:22.623
I discovered there might be an issue
with the file syncing of the database in

7
00:00:22.623 --> 00:00:24.398
the different versions of Node.

8
00:00:24.398 --> 00:00:27.140
Or possibly something else,
but it's failing silently.

9
00:00:27.140 --> 00:00:29.640
So that's the thing,
we had one person with that problem.

10
00:00:29.640 --> 00:00:33.440
So if you're having that problem,
I will get to the bottom of it soon.

11
00:00:33.440 --> 00:00:36.650
If not, I'll offer an alternative
with just using something in memory

12
00:00:36.650 --> 00:00:38.891
versus using a file,
which is a lot simpler.

13
00:00:40.330 --> 00:00:43.490
But let's hop into the solution here.

14
00:00:45.080 --> 00:00:47.310
So, where are we at?

15
00:00:47.310 --> 00:00:50.130
Let's go to schema.

16
00:00:50.130 --> 00:00:53.828
So first thing is,
if you look at this schema and

17
00:00:53.828 --> 00:00:57.808
then you look at schema.json,
open that up here.

18
00:00:57.808 --> 00:00:59.630
Open this one up here.

19
00:00:59.630 --> 00:01:05.180
We wanna make some types based off
these schemas inside of schema.json.

20
00:01:05.180 --> 00:01:06.010
So I'll do just that.

21
00:01:06.010 --> 00:01:09.474
So I'll have a type User that has an id.

22
00:01:09.474 --> 00:01:11.082
And I'm gonna give it the ID type.

23
00:01:11.082 --> 00:01:12.847
Very misleading, I put string here.

24
00:01:12.847 --> 00:01:15.428
But this is where you
would use the ID type.

25
00:01:15.428 --> 00:01:20.845
Which like I said, is basically a string,
but it's meant to be a unique identifier.

26
00:01:20.845 --> 00:01:21.671
That's it.

27
00:01:21.671 --> 00:01:23.260
I don't think GraphQL does anything.

28
00:01:23.260 --> 00:01:24.930
GraphQL doesn't know if this is unique.

29
00:01:24.930 --> 00:01:28.590
It's not gonna know that this
user's id is different than this.

30
00:01:28.590 --> 00:01:30.040
It's not doing that check.

31
00:01:30.040 --> 00:01:31.040
This is more meant for

32
00:01:31.040 --> 00:01:35.610
you as a developer to represent
this as being a unique identifier.

33
00:01:35.610 --> 00:01:37.120
As far as GraphQL is concerned,

34
00:01:37.120 --> 00:01:40.437
I'm pretty sure this gets parsed exactly
the same way a string gets parsed.

35
00:01:40.437 --> 00:01:42.140
So that's that.

36
00:01:42.140 --> 00:01:45.300
And that's always gonna be there,
so I'll put a bang.

37
00:01:45.300 --> 00:01:48.493
Also has a username,
that's gonna be a String, and

38
00:01:48.493 --> 00:01:52.390
also gonna say that that's there.

39
00:01:52.390 --> 00:01:55.471
So that's it for the User, for now.

40
00:01:55.471 --> 00:01:57.121
And one thing to note is,

41
00:01:57.121 --> 00:02:00.903
this is what your schema will
look like in your database.

42
00:02:00.903 --> 00:02:03.786
And the reason I'm saying that
is cuz as we get further along,

43
00:02:03.786 --> 00:02:08.330
we're gonna be adding more fields to the
types that don't exist in the database.

44
00:02:08.330 --> 00:02:10.290
So you can think of
them as virtual fields.

45
00:02:10.290 --> 00:02:13.573
So I just want you to think about it,
it's not always one-for-one.

46
00:02:13.573 --> 00:02:18.139
You might start off with your GraphQL
types looking like your models and

47
00:02:18.139 --> 00:02:19.750
stuff like that.

48
00:02:19.750 --> 00:02:23.380
But they will most,
eventually expand to be something else.

49
00:02:23.380 --> 00:02:27.550
Just like if you ever used any ORM that
allows you to virtualize fields that don't

50
00:02:27.550 --> 00:02:30.490
actually persist in the database,
it's basically the same thing.

51
00:02:30.490 --> 00:02:32.955
You can virtualize fields, and

52
00:02:32.955 --> 00:02:37.984
that represents a combination of things or
something like that.

53
00:02:37.984 --> 00:02:43.502
And we got type Pet, which has also an ID,

54
00:02:43.502 --> 00:02:46.510
also has a createdAt.

55
00:02:48.560 --> 00:02:51.132
createdAt is a timestamp.

56
00:02:51.132 --> 00:02:54.710
I just found out that you can't actually
use the Int one here, cuz of the bits.

57
00:02:54.710 --> 00:02:57.300
So, and Flow obviously won't work.

58
00:02:57.300 --> 00:03:00.180
So I'm just gonna put String here and
use a string timestamp.

59
00:03:00.180 --> 00:03:01.645
And that's always gonna be there.

60
00:03:01.645 --> 00:03:05.367
The other alternative is you could create,
or download and

61
00:03:05.367 --> 00:03:07.910
install a new scalar just for dates.

62
00:03:07.910 --> 00:03:10.215
I'm pretty sure there's a lot
of them that I've seen.

63
00:03:10.215 --> 00:03:13.170
If you look, you'll find a lot of them.

64
00:03:13.170 --> 00:03:15.090
But I don't wanna get into
custom scalars right now,

65
00:03:15.090 --> 00:03:17.830
because that's a whole nother thing.

66
00:03:17.830 --> 00:03:23.116
But yeah, you can add custom scalars,
which are very primitive values.

67
00:03:23.116 --> 00:03:26.038
The way you do that is, like I said,
you either install it or

68
00:03:26.038 --> 00:03:29.721
you have to create the parsing mechanisms,
how they come into the schema,

69
00:03:29.721 --> 00:03:33.230
how they go out of the schema,
all that stuff, the validation rules.

70
00:03:33.230 --> 00:03:35.500
It's a lot that goes
into creating a scalar.

71
00:03:35.500 --> 00:03:41.739
So that's why we're not gonna get into it,
but you could do that.

72
00:03:41.739 --> 00:03:42.460
The name is a String, and
it's always gonna be there.

73
00:03:43.720 --> 00:03:46.360
And type is a String, and
that's always gonna be there.

74
00:03:48.320 --> 00:03:52.600
So that's it for the types,
as far as the models in our database go.

75
00:03:52.600 --> 00:03:56.450
Okay, the next thing is we need to
create a query to get all the pets.

76
00:03:56.450 --> 00:03:58.750
So I'm gonna say, type Query.

77
00:03:58.750 --> 00:04:00.490
And I'm gonna call it pets.

78
00:04:00.490 --> 00:04:05.350
And for now, it's just gonna return
all the pets in the database.

79
00:04:05.350 --> 00:04:06.613
And the array has to be there.

80
00:04:09.144 --> 00:04:10.039
&gt;&gt; Scott Moss: And that's it for Query.

81
00:04:13.020 --> 00:04:14.131
&gt;&gt; Scott Moss: Any questions
on the Query type?

82
00:04:17.181 --> 00:04:17.830
&gt;&gt; Scott Moss: Yes?

83
00:04:21.190 --> 00:04:27.090
&gt;&gt; Speaker 2: The case of pets,
lowercase versus uppercase [INAUDIBLE]?

84
00:04:27.090 --> 00:04:31.162
&gt;&gt; Scott Moss: So you're saying what's
the difference between this lowercase pets

85
00:04:31.162 --> 00:04:33.240
field and this uppercase Pet type?

86
00:04:33.240 --> 00:04:34.116
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Scott Moss: Right, so

87
00:04:34.116 --> 00:04:35.480
they have no relation.

88
00:04:35.480 --> 00:04:39.540
I can call this whatever I want,
doesn't matter.

89
00:04:39.540 --> 00:04:44.680
This field, its name has no relation
as far as GraphQL is concerned,

90
00:04:44.680 --> 00:04:45.880
with its value.

91
00:04:45.880 --> 00:04:51.785
This is just for us, this is just my
convention of querying a list of things.

92
00:04:51.785 --> 00:04:55.359
And usually in GraphQL, when I'm like, all
right, I need to query a list of things,

93
00:04:55.359 --> 00:04:58.291
I'll take whatever that thing is
I'm querying for, lowercase it and

94
00:04:58.291 --> 00:05:00.649
pluralize it, and
say that's what I'm querying for.

95
00:05:00.649 --> 00:05:06.653
So if this was users, I would have called
this users, and this would have been User.

96
00:05:06.653 --> 00:05:08.490
But some people have their own convention.

97
00:05:08.490 --> 00:05:15.940
Some people might say something
like petsList or allPets.

98
00:05:17.170 --> 00:05:18.310
So it's up to you.

99
00:05:18.310 --> 00:05:21.823
But for me, that's simple for
me cuz I always did it that way.

100
00:05:21.823 --> 00:05:24.183
Yes?
&gt;&gt; Speaker 2: But the key, the casing and

101
00:05:24.183 --> 00:05:28.211
whatever it is has to match
whatever is on the resolver?

102
00:05:28.211 --> 00:05:29.172
&gt;&gt; Scott Moss: 100%.

103
00:05:29.172 --> 00:05:30.285
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Scott Moss: So yeah,

104
00:05:30.285 --> 00:05:35.301
that's why the validations on what
you can put here are very similar

105
00:05:35.301 --> 00:05:40.440
to the validations to what you
can put in a JavaScript object.

106
00:05:40.440 --> 00:05:44.250
So you couldn't come in here and
say, this is a field.

107
00:05:44.250 --> 00:05:45.360
That's not gonna work.

108
00:05:45.360 --> 00:05:46.720
Cuz you can't put that an object,

109
00:05:46.720 --> 00:05:50.730
at least not without putting a bracket and
having it evaluate it.

110
00:05:50.730 --> 00:05:53.310
So it has to be a valid property name.

111
00:05:53.310 --> 00:05:54.606
Therefore, your resolvers
can match up with it.

112
00:05:58.204 --> 00:05:59.280
&gt;&gt; Scott Moss: Yes?

113
00:05:59.280 --> 00:06:02.480
&gt;&gt; Speaker 3: So one thing I saw
was that while defining a type,

114
00:06:02.480 --> 00:06:05.310
it was colliding with
the type user in demo.js.

115
00:06:05.310 --> 00:06:08.230
So is there a way to namespace these,
or are these always global?

116
00:06:10.090 --> 00:06:13.450
&gt;&gt; Scott Moss: So
that conflict was probably just a tool

117
00:06:13.450 --> 00:06:16.020
that you had built into your IDE.

118
00:06:16.020 --> 00:06:19.427
It shouldn't conflict our runtime,
unless for some reason,

119
00:06:19.427 --> 00:06:22.974
you were importing those typeDefs
into the same server, right?

120
00:06:22.974 --> 00:06:27.432
Because that server that's inside of this
repo is different than the server that I

121
00:06:27.432 --> 00:06:28.863
created in the demo file.

122
00:06:28.863 --> 00:06:32.029
These are two different servers, so
they don't know about each other.

123
00:06:32.029 --> 00:06:34.840
So the only conflict you should have had
is probably some tooling in your editor

124
00:06:34.840 --> 00:06:37.082
that was like, hey,
there's already a thing here.

125
00:06:37.082 --> 00:06:41.000
And at runtime, you can ignore that,
cuz it's not gonna matter anymore.

126
00:06:41.000 --> 00:06:43.145
&gt;&gt; Speaker 4: I was just gonna say,
I was running into that error too.

127
00:06:43.145 --> 00:06:46.957
But then when I commented out Pet and
users on the resolvers,

128
00:06:46.957 --> 00:06:48.689
I didn't have that issue.

129
00:06:48.689 --> 00:06:50.860
And I didn't need to comment
out my demo.js file.

130
00:06:50.860 --> 00:06:54.570
&gt;&gt; Scott Moss: Say that again,
you commented out what?

131
00:06:54.570 --> 00:06:59.341
&gt;&gt; Speaker 4: So I was having issues too,
something about the users model or

132
00:06:59.341 --> 00:07:00.271
whatever.

133
00:07:00.271 --> 00:07:02.796
But I think it had to do with
the resolvers.js file, and

134
00:07:02.796 --> 00:07:03.888
not the demo.js file.

135
00:07:03.888 --> 00:07:04.580
&gt;&gt; Scott Moss: Got it, okay.

136
00:07:04.580 --> 00:07:07.719
&gt;&gt; Speaker 4: So as soon as I commented it
out on the resolvers in this directory,

137
00:07:07.719 --> 00:07:09.660
I didn't have the error anymore.

138
00:07:09.660 --> 00:07:12.843
&gt;&gt; Scott Moss: Yeah, so if you had an
error at runtime, the server printed out

139
00:07:12.843 --> 00:07:16.280
an error, then yeah,
there's something wrong with your server.

140
00:07:16.280 --> 00:07:18.804
But if you had an error,
as in just browsing your code and

141
00:07:18.804 --> 00:07:21.566
it's saying this is broken,
then that's a plugin, yeah.

142
00:07:21.566 --> 00:07:22.730
But yeah, you're right.

143
00:07:22.730 --> 00:07:24.298
We're gonna come into that error too.

144
00:07:24.298 --> 00:07:27.154
That error is because I have
placeholders in the resolvers file for

145
00:07:27.154 --> 00:07:29.520
code that you're gonna be writing.

146
00:07:29.520 --> 00:07:31.680
But there's no code there yet,
so it breaks.

147
00:07:31.680 --> 00:07:34.400
So I left that there intentionally,
so you can see the output.

148
00:07:34.400 --> 00:07:36.700
And you can figure out that,
I gotta get rid of this.

149
00:07:36.700 --> 00:07:38.084
Which I'm glad you did,
so that's great, yeah.

150
00:07:39.560 --> 00:07:40.083
Any other questions?

151
00:07:42.957 --> 00:07:43.610
&gt;&gt; Scott Moss: No?

152
00:07:43.610 --> 00:07:45.760
Okay, so now we'll go to resolvers.

153
00:07:47.390 --> 00:07:52.240
And let's just try to run this and
see what happens.

154
00:07:52.240 --> 00:07:56.217
So if I go here, the command I wanna run
will be, if you look at that package,

155
00:07:56.217 --> 00:07:58.680
that JSON, there's one for yarn server.

156
00:07:58.680 --> 00:08:01.998
Or you can just type in node and
follow the path to the server, but

157
00:08:01.998 --> 00:08:03.541
you can just run yarn server.

158
00:08:06.202 --> 00:08:08.100
&gt;&gt; Scott Moss: And this breaks, right?

159
00:08:08.100 --> 00:08:09.837
So this breaks for a couple of reasons.

160
00:08:09.837 --> 00:08:12.575
One, I never even created a server.

161
00:08:12.575 --> 00:08:14.550
The resolvers and stuff are messed up.

162
00:08:14.550 --> 00:08:16.085
So this is kinda like how I develop.

163
00:08:16.085 --> 00:08:18.439
I like just error-driven development.

164
00:08:18.439 --> 00:08:22.700
I'll just let it break, [LAUGH] hoping
the errors will tell me what to do.

165
00:08:22.700 --> 00:08:24.482
So it's really good.

166
00:08:24.482 --> 00:08:29.130
To me, it's better than TDD,
[LAUGH] at least initially.

167
00:08:29.130 --> 00:08:31.490
Initially, at least, okay?

168
00:08:32.900 --> 00:08:36.470
So now we'll go to the server.

169
00:08:36.470 --> 00:08:37.680
And we'll make this a server.

170
00:08:37.680 --> 00:08:41.784
So to make this a server,
we're just gonna pass in some typeDefs and

171
00:08:41.784 --> 00:08:43.161
some resolvers here.

172
00:08:43.161 --> 00:08:47.708
And then I'm going to do
some context like this.

173
00:08:47.708 --> 00:08:52.127
And I'm just gonna return my models,
cuz I like to use my models in here.

174
00:08:52.127 --> 00:08:54.310
I'm also just gonna add the db,
just in case.

175
00:08:54.310 --> 00:08:57.389
You wanna do some raw db stuff that's not
included on the models, you can do that.

176
00:08:57.389 --> 00:08:59.385
I mean,
you can put whatever you want here.

177
00:08:59.385 --> 00:09:01.887
So I got that, so
now we're gonna try to run it.

178
00:09:01.887 --> 00:09:04.790
Let's see,
&gt;&gt; Scott Moss: Get another error.

179
00:09:04.790 --> 00:09:08.289
So this error is basically
saying you defined

180
00:09:09.410 --> 00:09:12.180
a mutation in the resolvers,
but not in the schema.

181
00:09:12.180 --> 00:09:14.976
So that's the errors that you
probably would have ran into.

182
00:09:14.976 --> 00:09:18.454
So the way you would
have to get past that is,

183
00:09:18.454 --> 00:09:23.344
you'd have to go back to resolvers,
and basically just start

184
00:09:23.344 --> 00:09:28.910
commenting out any resolvers that
aren't associated in the schema.

185
00:09:28.910 --> 00:09:31.500
That includes this User one,
I'm gonna comment that out too.

186
00:09:31.500 --> 00:09:36.020
So now if we run this,
we get another error.

187
00:09:36.020 --> 00:09:38.720
So pet.img is defined in resolvers,
but not in the schema.

188
00:09:38.720 --> 00:09:40.812
So you might as well just go ahead and
get rid of this Pet too.

189
00:09:40.812 --> 00:09:42.809
Or you can just get rid of that image,
it's up to you.

190
00:09:42.809 --> 00:09:45.780
I'm just gonna get rid of the whole Pet.

191
00:09:45.780 --> 00:09:47.514
And boom, at least we're error free.

192
00:09:47.514 --> 00:09:48.680
The server's running.

193
00:09:48.680 --> 00:09:53.250
But we're not quite done yet, because
we haven't defined a query for pets.

194
00:09:53.250 --> 00:09:56.610
So to do that,
I go to the Query field in the resolvers.

195
00:09:56.610 --> 00:09:59.810
I type in pets exactly the way it is here.

196
00:09:59.810 --> 00:10:01.240
Just copy and paste it, to be safe.

197
00:10:02.760 --> 00:10:04.160
And that's a function.

198
00:10:04.160 --> 00:10:06.560
The initial value is nothing.

199
00:10:07.660 --> 00:10:10.630
We don't have any arguments,
so that's nothing.

200
00:10:10.630 --> 00:10:12.580
But we do have the context here.

201
00:10:12.580 --> 00:10:14.366
So I'm gonna get that.

202
00:10:14.366 --> 00:10:16.558
There is a fourth argument here.

203
00:10:16.558 --> 00:10:19.274
I didn't talk about it because
it's really advanced and

204
00:10:19.274 --> 00:10:20.810
you will probably never use it.

205
00:10:20.810 --> 00:10:24.793
But it's basically the AST
of the incoming query.

206
00:10:26.632 --> 00:10:29.313
&gt;&gt; Scott Moss: Yeah,
that's basically what it is.

207
00:10:29.313 --> 00:10:31.330
I think it also has
the schema on it as well.

208
00:10:31.330 --> 00:10:34.540
So this is useful for
doing projection on database queries.

209
00:10:34.540 --> 00:10:37.290
So if you wanna only query for
the specific,

210
00:10:37.290 --> 00:10:42.706
if your GraphQL types match up
one-for-one with your database types,

211
00:10:42.706 --> 00:10:47.500
you could theoretically just look at that
info object, look at every field that's

212
00:10:47.500 --> 00:10:51.800
coming here from the query, and go to your
database and only query for those fields.

213
00:10:51.800 --> 00:10:54.120
So you can optimize your
database queries that way.

214
00:10:54.120 --> 00:10:55.930
And that's what the info
object would be for.

215
00:10:55.930 --> 00:11:00.288
But that only works if there's
a one-to-one relationship with the fields

216
00:11:00.288 --> 00:11:04.792
and your GraphQL schema, versus the fields
on your models and your database.

217
00:11:04.792 --> 00:11:06.190
Then you can do something like that.

218
00:11:06.190 --> 00:11:08.208
And there are tons of
libraries that do that for

219
00:11:08.208 --> 00:11:10.607
different types of databases
if you're interested.

220
00:11:10.607 --> 00:11:13.404
But in my opinion, probably not.

221
00:11:13.404 --> 00:11:16.810
You're probably gonna have way more
stuff over here than you do here.

222
00:11:16.810 --> 00:11:20.470
So a one-to-one projection is
probably not gonna happen.

223
00:11:20.470 --> 00:11:21.145
At first, it will.

224
00:11:21.145 --> 00:11:21.970
It's gonna seem legit.

225
00:11:21.970 --> 00:11:24.582
But then eventually, you're gonna
get real serious about GraphQL and

226
00:11:24.582 --> 00:11:25.980
it's just not gonna happen.

227
00:11:25.980 --> 00:11:28.972
So now we got the context, and

228
00:11:28.972 --> 00:11:34.971
we should be able to just
return ctx.models.Pet.find,

229
00:11:36.676 --> 00:11:39.438
&gt;&gt; Scott Moss: Many.

230
00:11:39.438 --> 00:11:42.915
Type was butterfly thing, okay?

231
00:11:42.915 --> 00:11:46.179
All right, so now we'll restart this.

232
00:11:46.179 --> 00:11:48.206
&gt;&gt; Scott Moss: And we'll go to Playground.

233
00:11:50.786 --> 00:11:54.360
&gt;&gt; Scott Moss: Refresh that, and
verify I'm looking at our docs.

234
00:11:54.360 --> 00:11:55.487
Cool, we got Pets.

235
00:11:55.487 --> 00:11:58.374
If you click on it,
you can see a Pet has an ID.

236
00:11:58.374 --> 00:12:01.854
You click on this, it'll even tell you,
the ID scalar type represents a unique.

237
00:12:01.854 --> 00:12:05.845
It breaks it down so hard for you,
you just can't get this wrong.

238
00:12:05.845 --> 00:12:08.060
All right, so
now we can query for our pets.

239
00:12:09.430 --> 00:12:13.345
And I should be able to get my pet stuff,
like this.

240
00:12:13.345 --> 00:12:15.730
And hit Enter, and I'll just get
back at the end of the array.

241
00:12:15.730 --> 00:12:18.370
So I saw a lot of people
that tried to do this.

242
00:12:18.370 --> 00:12:19.840
Cuz they were like,
there's no pets in there.

243
00:12:19.840 --> 00:12:20.530
So I'll just do this.

244
00:12:21.690 --> 00:12:26.651
But remember,
GraphQL doesn't know what to do.

245
00:12:26.651 --> 00:12:27.980
You've gotta think about it like this.

246
00:12:27.980 --> 00:12:31.310
It's like if you had a baby
that had superpowers.

247
00:12:32.490 --> 00:12:33.579
It can do anything, but

248
00:12:33.579 --> 00:12:36.750
only if you told it what to do,
cuz it just doesn't understand much.

249
00:12:36.750 --> 00:12:40.050
You have to tell it exactly what to do,
and then it can do it.

250
00:12:40.050 --> 00:12:41.550
We're not telling it what to do.

251
00:12:41.550 --> 00:12:42.620
We're just saying, pets.

252
00:12:42.620 --> 00:12:45.810
And it's like, cool, but
what about the pets?

253
00:12:45.810 --> 00:12:46.470
We have to tell it.

254
00:12:46.470 --> 00:12:48.460
Otherwise, it won't know
what resolvers to go to.

255
00:12:48.460 --> 00:12:50.590
It won't know what to execute.

256
00:12:50.590 --> 00:12:54.380
It can do it, but you have to be very
specific and explicit about it, so.

257
00:12:54.380 --> 00:13:00.455
And because pets is an object type and has
sub-fields, that's what this is saying.

258
00:13:00.455 --> 00:13:03.530
It's saying,
you must have a selection of sub-fields.

259
00:13:03.530 --> 00:13:06.950
Did you mean pets,
this bracket with some fields in here?

260
00:13:06.950 --> 00:13:07.610
Is that what you meant?

261
00:13:07.610 --> 00:13:13.080
Because I'm pretty sure Pet is an object.

262
00:13:13.080 --> 00:13:15.940
And you didn't ask for any field, so
I don't know what you want me to do.

263
00:13:15.940 --> 00:13:17.610
That's what it's saying.

264
00:13:17.610 --> 00:13:18.620
So you have to do that.

265
00:13:18.620 --> 00:13:22.660
Even though you don't have any pets,
you can do that and it works.

