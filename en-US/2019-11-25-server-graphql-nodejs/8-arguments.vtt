WEBVTT

1
00:00:00.280 --> 00:00:01.050
&gt;&gt; Scott Moss: Let's get in here.

2
00:00:01.050 --> 00:00:02.070
Arguments input types.

3
00:00:02.070 --> 00:00:03.770
Let's go, arguments.

4
00:00:03.770 --> 00:00:08.510
So arguments allow clients to pass
variables along with Queries and

5
00:00:08.510 --> 00:00:11.960
mutations when we get there that can
be used in your Resolvers to get data.

6
00:00:11.960 --> 00:00:14.930
So, let's go back to our codes.

7
00:00:16.750 --> 00:00:20.419
We go look at these Resolvers here,
the second argument right here.

8
00:00:20.419 --> 00:00:25.451
Those are gonna be your arguments from
the client, that's what that's gonna be.

9
00:00:27.620 --> 00:00:29.881
&gt;&gt; Scott Moss: They must be
defined in your schema, so

10
00:00:29.881 --> 00:00:33.443
a client can't just pass up
an arbitrary whatever they want,

11
00:00:33.443 --> 00:00:37.790
and have them appear in that second
argument inside the Resolvers.

12
00:00:37.790 --> 00:00:40.530
You have to define arguments

13
00:00:40.530 --> 00:00:43.530
in your Schema the same way
you define everything else.

14
00:00:43.530 --> 00:00:44.940
You'll notice a trend here.

15
00:00:44.940 --> 00:00:48.230
Everything you wanna do in GraphQL
has to go through the Schema,

16
00:00:48.230 --> 00:00:49.480
so there's no surprises.

17
00:00:49.480 --> 00:00:53.200
There is nothing that you're gonna
get inside your Resolvers that

18
00:00:53.200 --> 00:00:55.550
the Schema didn't already approve.

19
00:00:55.550 --> 00:00:58.190
Cuz the Resolver is only being run
until the query gets validated.

20
00:00:58.190 --> 00:01:00.500
In fact when someone issues
a query to your server,

21
00:01:00.500 --> 00:01:03.590
the first step is to validate the query.

22
00:01:03.590 --> 00:01:08.260
Only when that's validated against your
Schema do the Resolvers run, unless you do

23
00:01:08.260 --> 00:01:12.030
something like persistent queries and
they get validated ahead of time, but

24
00:01:12.030 --> 00:01:16.890
it has to be validated so you're
guaranteed to know what's happening.

25
00:01:16.890 --> 00:01:19.670
They can be added to any field though and
when I say any field,

26
00:01:19.670 --> 00:01:20.910
I really mean any field.

27
00:01:20.910 --> 00:01:25.650
So you can add arguments to an ID field.

28
00:01:25.650 --> 00:01:28.280
You can add arguments to a query field.

29
00:01:28.280 --> 00:01:30.820
You can add arguments to an image field,
any field you want,

30
00:01:30.820 --> 00:01:32.640
you can add an argument to.

31
00:01:32.640 --> 00:01:33.860
There's no limit to that.

32
00:01:33.860 --> 00:01:36.940
And I know that seems strange
why you would want to do that.

33
00:01:36.940 --> 00:01:41.658
But trust me, there are use cases where
you would want to add arguments to fields

34
00:01:41.658 --> 00:01:42.937
that exist on a type.

35
00:01:42.937 --> 00:01:46.063
Other than just for the obvious ones
like queries and stuff like that.

36
00:01:49.032 --> 00:01:51.903
&gt;&gt; Scott Moss: They either
have to all be Scalars, or

37
00:01:51.903 --> 00:01:55.240
they have to be what's called Input Types.

38
00:01:55.240 --> 00:01:57.250
And we're gonna go over
Input Types in a minute.

39
00:01:57.250 --> 00:02:01.550
So Scalars are things like strings,
integers, floats, Booleans, IDs.

40
00:02:01.550 --> 00:02:03.500
All your arguments have to be that.

41
00:02:03.500 --> 00:02:05.307
So, if you wanted to create an argument,

42
00:02:05.307 --> 00:02:08.562
let's say for pets, the way you would
do it is you would do that, say cool,

43
00:02:08.562 --> 00:02:12.370
I wanna add some arguments to my
pets here with these parentheses.

44
00:02:12.370 --> 00:02:13.960
And then you have to name them.

45
00:02:13.960 --> 00:02:16.690
So let's say a pet can have- what is it?

46
00:02:16.690 --> 00:02:18.600
What is a pet?
A pet has a type on it, right?

47
00:02:18.600 --> 00:02:22.110
So, obviously a pet has a type,
and you can pass a string here.

48
00:02:22.110 --> 00:02:26.890
So this is saying, pets now takes
a type and its type is string.

49
00:02:28.890 --> 00:02:31.625
And this follows the same rules as
when defining a type, I'm sorry,

50
00:02:31.625 --> 00:02:35.810
a field on a type so
I can put an exclamation here saying,

51
00:02:35.810 --> 00:02:41.180
you have to pass me an argument called
type in order to execute this pets query.

52
00:02:41.180 --> 00:02:45.700
And you would have to do that and now
if you go near resolvers for that pets,

53
00:02:45.700 --> 00:02:51.930
you get access to an object whose keys are
the names of the arguments that you pass.

54
00:02:51.930 --> 00:02:58.120
In this case, I would have type here and
type will be whatever was passed up.

55
00:02:58.120 --> 00:02:59.640
In this case, it's required.

56
00:02:59.640 --> 00:03:02.970
So that means this query won't even
execute, I'm sorry, this resolver won't

57
00:03:02.970 --> 00:03:08.300
even execute, unless there is an argument
or yeah, an argument that was passed up.

58
00:03:08.300 --> 00:03:11.600
So you don't have to come in here and
check to see if type, do this.

59
00:03:11.600 --> 00:03:15.300
I know it's guaranteed to be there
because you put an exclamation there.

60
00:03:15.300 --> 00:03:17.830
So it's not a no.

61
00:03:17.830 --> 00:03:21.870
You still have to do some other validation
probably, like value type validations.

62
00:03:21.870 --> 00:03:23.980
But if it's there or not,
you would have to check.

63
00:03:25.020 --> 00:03:27.465
So that's basically what arguments are and
you can do as many as you want.

64
00:03:27.465 --> 00:03:32.750
Call them whatever.

65
00:03:32.750 --> 00:03:37.640
Like I said, they have to be
either Scalars or input types.

66
00:03:37.640 --> 00:03:38.903
You can't put a type here.

67
00:03:38.903 --> 00:03:44.416
My friend says, I can't say,
&gt;&gt; Scott Moss: If a pet has a buddy,

68
00:03:44.416 --> 00:03:45.980
I can't say it's a pet.

69
00:03:47.000 --> 00:03:48.320
I can't do that.

70
00:03:48.320 --> 00:03:52.260
And I'm not saying I can't do that
because pet and pet are the same.

71
00:03:52.260 --> 00:03:55.920
No, I'm saying you can't do that because
this is a type, it's not an input type,

72
00:03:55.920 --> 00:03:56.690
it's a type.

73
00:03:56.690 --> 00:03:59.620
You can only put Scalars in input types.

74
00:04:00.820 --> 00:04:02.790
Now we're gonna learn
how to make input types.

75
00:04:02.790 --> 00:04:03.590
Any questions, yes?

76
00:04:03.590 --> 00:04:07.200
&gt;&gt; Speaker 2: Does an argument
order matter in our definition?

77
00:04:07.200 --> 00:04:12.760
&gt;&gt; Scott Moss: Argument order doesn't
matter to the server, it only matters to

78
00:04:12.760 --> 00:04:16.240
the client when they issue the query,

79
00:04:16.240 --> 00:04:20.300
they had to pass arguments in that order,
but most of the time,

80
00:04:20.300 --> 00:04:22.910
you're gonna name your arguments anyway,
which means you're gonna get an object.

81
00:04:22.910 --> 00:04:26.040
So, it literally doesn't matter,
because it's an object.

82
00:04:26.040 --> 00:04:27.686
It's not an array, it's an object.

83
00:04:29.931 --> 00:04:31.054
&gt;&gt; Scott Moss: Any other questions?

84
00:04:33.647 --> 00:04:36.020
&gt;&gt; Scott Moss: And
I say you can put them on any field.

85
00:04:36.020 --> 00:04:37.640
I can do the same thing for image.

86
00:04:37.640 --> 00:04:43.229
An example for image, maybe you wanna
add transformations to an image.

87
00:04:43.229 --> 00:04:45.126
So you can say, what height do you want?

88
00:04:45.126 --> 00:04:46.743
And that's a string.

89
00:04:46.743 --> 00:04:49.432
And what width do you want?

90
00:04:49.432 --> 00:04:51.450
And that's a string.

91
00:04:51.450 --> 00:04:54.248
Something like that, pretty cool.

92
00:04:54.248 --> 00:04:56.967
So, you can add those
arguments to anything, and

93
00:04:56.967 --> 00:05:01.045
this is where you would want to go write
a resolver just for this field to take

94
00:05:01.045 --> 00:05:04.902
advantage of these arguments to
apply your transformations, yeah.

