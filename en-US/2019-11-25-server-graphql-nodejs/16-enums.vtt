WEBVTT

1
00:00:00.580 --> 00:00:03.200
&gt;&gt; Scott Moss: Cool, so advanced SDL, so

2
00:00:03.200 --> 00:00:05.740
advanced Schema Definition Language,
let's talk about a few things.

3
00:00:05.740 --> 00:00:09.150
So someone, I think it was you, Seth,
earlier mentioned something about enums.

4
00:00:09.150 --> 00:00:10.890
Cool, so now we're gonna talk about enums.

5
00:00:10.890 --> 00:00:15.150
So basically, enums are just like
any other language that uses enums.

6
00:00:15.150 --> 00:00:18.610
It's a set of discrete values that
can be used in place of scalars.

7
00:00:18.610 --> 00:00:21.870
So an enum field must resolve to
one of the values in the enum.

8
00:00:21.870 --> 00:00:24.882
Great for limiting a field to
only a few different options.

9
00:00:24.882 --> 00:00:29.530
Basically, an enum is saying, here's some
possible values that you can have, and

10
00:00:29.530 --> 00:00:31.570
I'm gonna add that in place of a scalar.

11
00:00:31.570 --> 00:00:33.460
So wherever you put a scalar,
you can put an enum.

12
00:00:33.460 --> 00:00:36.877
So that means on a type field,
on an input type field, yeah,

13
00:00:36.877 --> 00:00:39.436
those are the only place
you can put scalars.

14
00:00:39.436 --> 00:00:42.767
You can replace that with an enum,
which is saying one of these things and

15
00:00:42.767 --> 00:00:44.560
that's basically what it is.

16
00:00:44.560 --> 00:00:47.270
So I'll just give you an example
of what I'm talking about.

17
00:00:47.270 --> 00:00:50.580
If I go to our schema, and I say,
cool, I wanna make an enum.

18
00:00:50.580 --> 00:00:51.525
So I'll say, enum.

19
00:00:51.525 --> 00:00:53.965
Actually, I should go to demo, do it here.

20
00:00:53.965 --> 00:00:57.618
If I go to our schema and
I say I wanna make an enum,

21
00:00:57.618 --> 00:01:02.160
you basically use the keyword enum,
like this.

22
00:01:02.160 --> 00:01:04.930
You give it a name,
I'm gonna say this one is a ShoeType.

23
00:01:06.280 --> 00:01:07.880
Select an object thing here.

24
00:01:07.880 --> 00:01:12.200
And then usually the convention is people
just put like all caps names here.

25
00:01:12.200 --> 00:01:15.843
So I might say something like JORDAN or
NIKE.

26
00:01:15.843 --> 00:01:19.803
I don't know why that lowercased it for
me.

27
00:01:19.803 --> 00:01:23.217
ADIDAS, all right, so these are my enums.

28
00:01:23.217 --> 00:01:28.720
By default, these enums resolve
to strings with the same value.

29
00:01:29.930 --> 00:01:33.580
So the response from this in the API
is literally gonna be a string

30
00:01:33.580 --> 00:01:37.660
with this exact same value,
with the same capitalization.

31
00:01:37.660 --> 00:01:38.640
It's the same thing.

32
00:01:38.640 --> 00:01:40.774
You can write custom resolvers for enums.

33
00:01:40.774 --> 00:01:42.147
That's the sweet thing about GraphQL,

34
00:01:42.147 --> 00:01:44.093
you can literally write
a custom resolver for anything.

35
00:01:44.093 --> 00:01:50.064
Not just fields, on queries and
mutations and time split for enums.

36
00:01:50.064 --> 00:01:53.716
If you get to it, directives, scalars,
you can literally write a resolver for

37
00:01:53.716 --> 00:01:55.199
pretty much anything you want.

38
00:01:55.199 --> 00:01:58.229
It's just by default, it's gonna be
whatever you put here wrapped in a string.

39
00:01:58.229 --> 00:02:02.058
So now I can go in the place of,
for instance, Shoe,

40
00:02:02.058 --> 00:02:06.249
instead of putting brand I
can put ShoeType, like that.

41
00:02:06.249 --> 00:02:10.940
So now brand is a ShoeType,
which means it's gonna be one of these.

42
00:02:10.940 --> 00:02:13.200
And then on my input,
I can also do the same thing.

43
00:02:13.200 --> 00:02:14.760
You are also gonna be a ShoeType.

44
00:02:14.760 --> 00:02:17.080
And you are also gonna be a ShoeType,
like that.

45
00:02:18.260 --> 00:02:20.770
And do I have anything else that has that?

46
00:02:20.770 --> 00:02:29.624
Nope, so if I were to run this,
&gt;&gt; Scott Moss: And

47
00:02:29.624 --> 00:02:34.722
we were to look at the docs here,
you can see Shoe takes,

48
00:02:34.722 --> 00:02:40.056
let's just find, let's just find,
Shoe, there we go.

49
00:02:40.056 --> 00:02:42.533
So Shoe is a type,
it takes a brand called ShoeType.

50
00:02:42.533 --> 00:02:45.609
If I click on ShoeType, you can see
it's one of these things, right?

51
00:02:45.609 --> 00:02:48.570
So if I try to create a shoe here,
let's see what happens.

52
00:02:48.570 --> 00:02:56.270
So I say, I need to type that's
not a fragment, mutation, newShoe.

53
00:02:56.270 --> 00:03:01.903
It takes an input of a size, whatever.

54
00:03:01.903 --> 00:03:07.980
And then if I put brand, you can see I get
an autocomplete of the enums right here.

55
00:03:07.980 --> 00:03:13.232
I'm not able to, if I try to
pass something that's not that,

56
00:03:13.232 --> 00:03:15.359
it's not gonna like it.

57
00:03:15.359 --> 00:03:20.545
So Expected type,
ShoeType non-null, found not that.

58
00:03:20.545 --> 00:03:24.457
It should have been a ShoeType, which
is basically the enum that I created.

59
00:03:24.457 --> 00:03:26.279
So to pass the enum,
I don't have to wrap it in a string.

60
00:03:26.279 --> 00:03:31.850
I can just type in the actual enum,
one of the enum values,

61
00:03:31.850 --> 00:03:35.420
which in this case is one of these.

62
00:03:35.420 --> 00:03:37.570
So I wouldn't put ShoeType in there,

63
00:03:37.570 --> 00:03:40.460
I would put one of the values
of ShoeType as the actual value.

64
00:03:40.460 --> 00:03:41.864
&gt;&gt; Speaker 2: Spaces allowed in those?

65
00:03:41.864 --> 00:03:42.883
Or do you have to use a resolver for that?

66
00:03:42.883 --> 00:03:44.950
&gt;&gt; Scott Moss: Spaces
are not allowed in this.

67
00:03:44.950 --> 00:03:49.304
These follow the same rules as
naming types basically, yeah.

68
00:03:49.304 --> 00:03:55.190
I don't think spaces are allowed
anywhere in a name in a GraphQL schema,

69
00:03:55.190 --> 00:03:57.130
not that I can think of.

70
00:03:57.130 --> 00:03:59.910
Unless you're doing something
like comments which, by the way,

71
00:03:59.910 --> 00:04:01.230
comments are just using hashtags.

72
00:04:01.230 --> 00:04:03.370
That's a comment, if you didn't know that.

73
00:04:03.370 --> 00:04:07.040
You can also do documents like this.

74
00:04:07.040 --> 00:04:12.053
So if you do triple quotes like that,

75
00:04:12.053 --> 00:04:18.053
you can do things here
that show up in tools.

76
00:04:18.053 --> 00:04:23.008
So basically, yeah,
whatever you put there is commenting on

77
00:04:23.008 --> 00:04:26.260
the thing beneath it and it'll show it.

78
00:04:26.260 --> 00:04:30.913
Okay, [INAUDIBLE],
it'll show up in your tools.

79
00:04:30.913 --> 00:04:33.289
So where did I put that?

80
00:04:33.289 --> 00:04:38.300
ShoeType, do things here
that show up in tools.

81
00:04:38.300 --> 00:04:42.044
So those are just like descriptions or
things you wanna do to annotate stuff,

82
00:04:42.044 --> 00:04:43.030
it's really cool.

83
00:04:43.030 --> 00:04:46.640
But, yeah, you can't put spaces
anywhere else other than that.

84
00:04:46.640 --> 00:04:50.182
But now if I put JORDAN there,
then boom, that works, right?

85
00:04:50.182 --> 00:04:52.966
And if I say brand,
you'll see that it's just a string,

86
00:04:52.966 --> 00:04:56.110
the enum wrapped in a string,
unless I resolve it differently.

