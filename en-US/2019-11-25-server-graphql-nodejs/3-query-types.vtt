WEBVTT

1
00:00:00.404 --> 00:00:05.240
&gt;&gt; Scott Moss: All right, so now that we
have some context on how a GraphQL server

2
00:00:05.240 --> 00:00:07.880
is made and how it's built,
let's dive a little deeper.

3
00:00:07.880 --> 00:00:11.170
First thing I want to talk
about is the query type.

4
00:00:11.170 --> 00:00:12.220
So as a reference,

5
00:00:12.220 --> 00:00:15.210
let's just go back to what we have here,
a query type is this, right?

6
00:00:15.210 --> 00:00:19.290
So we talked about types or what you
will also hear them referred to in

7
00:00:19.290 --> 00:00:24.770
the graphical communities object types
because they are literally definitions of

8
00:00:24.770 --> 00:00:30.011
objects or nodes that your API can expose.

9
00:00:30.011 --> 00:00:35.910
So a query type is just a special type
that the GraphQL server is expecting

10
00:00:35.910 --> 00:00:41.910
to have, there's nothing special, there's
nothing else you need about the query

11
00:00:41.910 --> 00:00:45.710
type other than the fact that GraphQL
expects it to be there to expose data.

12
00:00:45.710 --> 00:00:48.375
Other than that it follows the same
rules as every other type.

13
00:00:51.914 --> 00:00:55.548
&gt;&gt; Scott Moss: So like I said, it's a type
on a schema that defines operations

14
00:00:55.548 --> 00:00:59.940
clients can perform to access data that
resembles the shape of other types in

15
00:00:59.940 --> 00:01:02.490
the schema, which is exactly what we did.

16
00:01:02.490 --> 00:01:06.920
So we had to type, it defined a field that

17
00:01:06.920 --> 00:01:12.020
its value is expected to be the shape of
another type that's defined in our schema.

18
00:01:12.020 --> 00:01:13.370
You can also put scholars here I mean,

19
00:01:13.370 --> 00:01:16.230
you can say a query just returns a string,
there's nothing wrong with that.

20
00:01:16.230 --> 00:01:21.280
If I were to do that and execute
this query or let me run this again

21
00:01:23.760 --> 00:01:29.600
and go back to playground, refresh this.

22
00:01:29.600 --> 00:01:32.040
If I were to do this, but
keep this query asking for

23
00:01:32.040 --> 00:01:36.660
an object, I'm gonna get
an error here because it's saying

24
00:01:36.660 --> 00:01:41.140
the me field must not have a selection
since string has no sub-fields.

25
00:01:41.140 --> 00:01:45.470
So, me doesn't return an object anymore,
it just returns a string.

26
00:01:46.540 --> 00:01:49.970
And the reason it still brings, I didn't
change the resolvers to actually return

27
00:01:49.970 --> 00:01:52.280
a string, the resolvers
are still returning an object.

28
00:01:52.280 --> 00:01:56.870
So you can see GraphQL
really is very touchy about

29
00:01:56.870 --> 00:01:58.050
following the rules of your schema,

30
00:01:58.050 --> 00:02:01.990
it's very strongly typed so nothing is
gonna work unless you obey those rules.

31
00:02:01.990 --> 00:02:05.480
So Creating Queries, we already
walked through it super fast but

32
00:02:05.480 --> 00:02:08.690
in more detail it's actually just
as simple as us walking through it.

33
00:02:08.690 --> 00:02:11.680
So the first thing you do is you create
a query type in the schema definition

34
00:02:11.680 --> 00:02:16.400
language which is exactly what we just did
and then you add fields to the Query Type.

35
00:02:18.490 --> 00:02:22.340
And then the next thing is you have to
create the resolvers for the fields.

36
00:02:22.340 --> 00:02:26.950
So we talked a little bit about
resolvers and kind of the functions and

37
00:02:26.950 --> 00:02:28.910
how they're supposed to resolve a data.

38
00:02:28.910 --> 00:02:33.600
But other than that, that's all
you have to do to create a query.

39
00:02:33.600 --> 00:02:37.890
It's just that if you have more queries
here then you would add more fields.

40
00:02:37.890 --> 00:02:43.350
So if I want to say, to get me as a user,
to get, I don't know,

41
00:02:43.350 --> 00:02:50.050
some friends, you could say friends
turns an array of users like that.

42
00:02:50.050 --> 00:02:53.240
There's no limit to what you want to
do as long as you respect the rules of

43
00:02:53.240 --> 00:02:56.610
the schema that you created, so
you can use scholars, you can use types.

44
00:02:56.610 --> 00:03:00.310
And as long as your resolvers
were named exactly the same and

45
00:03:00.310 --> 00:03:03.370
return the respective values,
then you can do whatever you want.

46
00:03:03.370 --> 00:03:06.000
That's your schema so
there's no limitations there.

47
00:03:07.590 --> 00:03:08.300
Yes?

48
00:03:08.300 --> 00:03:13.014
&gt;&gt; Speaker 2: If you have a response
that has kind of complex data

49
00:03:13.014 --> 00:03:18.292
structure with side loaded models but
you have to create

50
00:03:18.292 --> 00:03:24.255
intermediate schema to iterate,
what's the word here here.

51
00:03:26.441 --> 00:03:31.843
&gt;&gt; Speaker 2: Model, to define like
say a user's friend, jobs, and pets.

52
00:03:31.843 --> 00:03:32.660
&gt;&gt; Scott Moss: Yeah.

53
00:03:32.660 --> 00:03:36.970
&gt;&gt; Speaker 2: Paternal side load where you
create a model that define that response?

54
00:03:36.970 --> 00:03:37.860
&gt;&gt; Scott Moss: Yes and no.

55
00:03:37.860 --> 00:03:39.850
It's, so that's a really good question.

56
00:03:39.850 --> 00:03:43.030
Wow, you can think it,
I like what you thinking.

57
00:03:43.030 --> 00:03:45.370
So, yes, you can.

58
00:03:45.370 --> 00:03:47.450
And there's a couple of
ways you can do that.

59
00:03:47.450 --> 00:03:51.180
There's tools that literally will look at
like your Postgres database or your secret

60
00:03:51.180 --> 00:03:54.960
database or your Mongo database and
generate a graphical schema based off of

61
00:03:54.960 --> 00:03:58.310
it so that if you really wanted that
strongly type nature, you could do it.

62
00:03:58.310 --> 00:04:01.070
Or you can use what we're about
to talk about the next slide,

63
00:04:01.070 --> 00:04:03.030
which is just using the resolvers.

64
00:04:03.030 --> 00:04:08.360
So if you think about it, the queries,
they don't care how you get the job done,

65
00:04:08.360 --> 00:04:12.290
they just expect it to be
the exact shape that you say.

66
00:04:12.290 --> 00:04:16.190
So if the resolvers need to go talk to
another database or another server or

67
00:04:16.190 --> 00:04:20.440
something else, query don't care as
long as you return it in that shape.

68
00:04:20.440 --> 00:04:24.220
So you as an engineer, if you know what it
is, then you could hard code that shape,

69
00:04:24.220 --> 00:04:26.110
you could transform it yourself.

70
00:04:26.110 --> 00:04:29.530
There's a lot of processes that you
can do to get it to be that shape.

71
00:04:29.530 --> 00:04:35.160
&gt;&gt; Speaker 2: You should define that
shape in this GQL string right here.

72
00:04:35.160 --> 00:04:37.920
&gt;&gt; Scott Moss: For now yes, but
if you get to composition and

73
00:04:37.920 --> 00:04:41.810
there's another GraphQL schema,
you could just piggyback off of that one.

74
00:04:41.810 --> 00:04:43.760
But in this case, yes,

75
00:04:43.760 --> 00:04:48.110
it has to be defined in a schema somewhere
that the server knows about, 100%.

76
00:04:48.110 --> 00:04:52.790
There's no way for you to send down
a shape that isn't defined in the schema.

77
00:04:52.790 --> 00:04:56.340
&gt;&gt; Speaker 2: So you might have types
that aren't necessarily defining objects,

78
00:04:56.340 --> 00:04:58.730
you're defining response objects.

79
00:04:58.730 --> 00:05:02.290
&gt;&gt; Scott Moss: Yes, in fact, there's
really no reason why you would define

80
00:05:02.290 --> 00:05:06.940
a type in a schema if you didn't have any
intention on it being returned somewhere.

81
00:05:06.940 --> 00:05:08.560
Like there's like, why even define it.

82
00:05:08.560 --> 00:05:12.900
So like, for instance, you might have
schemas or models in your database

83
00:05:12.900 --> 00:05:15.860
that you never want a client to hit
because it's for like some internal tool.

84
00:05:15.860 --> 00:05:18.490
You'll never put that on your
schema because GraphQL needs

85
00:05:18.490 --> 00:05:19.730
not to know about it.

86
00:05:19.730 --> 00:05:22.830
So yeah,
if you don't want someone querying for

87
00:05:22.830 --> 00:05:24.790
it then you just don't add it.

88
00:05:24.790 --> 00:05:25.600
Yes?

89
00:05:25.600 --> 00:05:28.350
&gt;&gt; Speaker 3: I think you
already covered this, the bang.

90
00:05:28.350 --> 00:05:28.980
&gt;&gt; Scott Moss: Yeah.

91
00:05:28.980 --> 00:05:33.370
&gt;&gt; Speaker 3: The string and
the user array.

92
00:05:33.370 --> 00:05:35.320
Is that a required field or what is that?

93
00:05:35.320 --> 00:05:39.320
&gt;&gt; Scott Moss: Yeah, so it's not exactly
that it's required it's basically saying,

94
00:05:39.320 --> 00:05:41.290
this is a non null field.

95
00:05:41.290 --> 00:05:44.180
As in it can't be null if queried.

96
00:05:44.180 --> 00:05:47.370
If it is null, GraphQL is gonna
throw an exception and say,

97
00:05:47.370 --> 00:05:52.180
hey, I got back a null value for
email and you asked for an email but

98
00:05:52.180 --> 00:05:54.260
it should not be null cuz
you put a bang there.

99
00:05:54.260 --> 00:05:55.380
That's basically what it is.

100
00:05:55.380 --> 00:06:00.060
Yeah, you could think of it as required
but, technically it's non null.

101
00:06:00.060 --> 00:06:00.920
Which is the same damn thing, right.

102
00:06:04.770 --> 00:06:06.640
&gt;&gt; Speaker 2: An empty
string is valid string?

103
00:06:08.380 --> 00:06:10.111
&gt;&gt; Scott Moss: As long as it's not null.

104
00:06:10.111 --> 00:06:13.300
Yeah, bossy is bossy is fine.

105
00:06:13.300 --> 00:06:17.050
As far as the schema is concerned
your resolvers though was,

106
00:06:17.050 --> 00:06:20.460
we're gonna talk about have the power
to do whatever they want, right?

107
00:06:20.460 --> 00:06:22.280
You can add your own
validation checks in there.

108
00:06:22.280 --> 00:06:27.372
It's just that automatically the rules,
automatically GraphQL server is gonna

109
00:06:27.372 --> 00:06:32.406
look at your schema to figure out what
exceptions to throw based off these rules.

110
00:06:32.406 --> 00:06:35.619
It's not going to know
about like runtime things,

111
00:06:35.619 --> 00:06:40.112
like if this is end of string,
it doesn't look at the values like that.

112
00:06:40.112 --> 00:06:45.535
So you have to do that in your resolver or
you can teach the GraphQL server that hey,

113
00:06:45.535 --> 00:06:48.773
because this is MD I wanna
throw it right in here.

114
00:06:48.773 --> 00:06:52.913
So you can teach but by default
it wont do for you automatically.

