WEBVTT

1
00:00:00.070 --> 00:00:01.460
&gt;&gt; Scott Moss: So relationships.

2
00:00:01.460 --> 00:00:05.270
I saw some people downloading this
earlier, I think they saw it coming,

3
00:00:05.270 --> 00:00:09.330
how to link pets with users and
users with pets and so forth.

4
00:00:09.330 --> 00:00:12.020
So in our database,
there is no relationships.

5
00:00:12.020 --> 00:00:14.660
But we want to virtualize those
relationships with GraphQL and

6
00:00:14.660 --> 00:00:16.850
this is where it gets really powerful.

7
00:00:16.850 --> 00:00:21.214
And this is where you end up in the place
where people will dedash you or

8
00:00:21.214 --> 00:00:22.354
stuff like that.

9
00:00:22.354 --> 00:00:26.050
So it's like super powerful but
at the same time very dangerous.

10
00:00:26.050 --> 00:00:29.470
This is basically the graph in GraphQL, so

11
00:00:29.470 --> 00:00:32.350
saying that,
let's talk about thinking in graphs.

12
00:00:32.350 --> 00:00:36.220
So your API is no longer a predefined
list of operations that you always return

13
00:00:36.220 --> 00:00:37.000
the same shapes.

14
00:00:37.000 --> 00:00:40.800
So for instance, like in REST, you have
to literally create all the routes,

15
00:00:40.800 --> 00:00:43.855
with these verbs, and these parameters,
and maybe these query strings and

16
00:00:43.855 --> 00:00:47.690
they're predefined ahead of time that's
the only thing your client can do.

17
00:00:47.690 --> 00:00:52.550
Well, in this graph implementation you
have no idea how someone's gonna access

18
00:00:52.550 --> 00:00:56.100
your server and instead you just say,
here are these nodes they look like these.

19
00:00:56.100 --> 00:00:58.775
Here is the connections between
these nodes, they exist here,

20
00:00:58.775 --> 00:01:01.540
do whatever you want, in fact,
you can do whatever you want.

21
00:01:01.540 --> 00:01:05.090
And it's that way all the way down,
no matter how deep it is,

22
00:01:05.090 --> 00:01:08.758
no matter how many nested node you have,
it's going that way all the way down

23
00:01:08.758 --> 00:01:13.080
until you hit a scholar or
some primitive value, right?

24
00:01:13.080 --> 00:01:14.350
That's how a graph works.

25
00:01:14.350 --> 00:01:16.983
So friends can have friends, they can
have friends, they can have friends,

26
00:01:16.983 --> 00:01:18.618
they can have friends,
they can have friends.

27
00:01:18.618 --> 00:01:23.180
All the way until you don't want any
more friends to show wherever that is.

28
00:01:23.180 --> 00:01:25.650
But they they can be cyclic.

29
00:01:25.650 --> 00:01:27.440
They can be recursive.

30
00:01:27.440 --> 00:01:28.610
They can be all of those things.

31
00:01:28.610 --> 00:01:32.994
So because of that, yeah, I mean, could
you imagine writing a controller on your

32
00:01:32.994 --> 00:01:36.250
database to resolve a REST throughout and
it was recursive?

33
00:01:36.250 --> 00:01:40.027
It just went on forever, like probably not
a good idea, I probably wouldn't do that,

34
00:01:40.027 --> 00:01:41.960
so that's why people use Graph databases.

35
00:01:43.100 --> 00:01:47.750
So instead, your API is a set of nodes
that know how to resolve themselves and

36
00:01:47.750 --> 00:01:49.060
have links to other nodes.

37
00:01:49.060 --> 00:01:50.280
This allows a client to ask for

38
00:01:50.280 --> 00:01:53.250
nodes and then follow those
links to get related nodes.

39
00:01:53.250 --> 00:01:55.800
And that's basically nodes and
edges inside of graph,

40
00:01:55.800 --> 00:01:57.860
and that's the graph in GraphQL.

41
00:01:57.860 --> 00:02:00.800
And we're about to experiment
with some of that.

42
00:02:00.800 --> 00:02:03.960
Any questions on that when I'm even like
thinking and graphs, because I think

43
00:02:03.960 --> 00:02:08.785
that's the biggest hurdle for people when
they switch over to GraphQL it's they're

44
00:02:08.785 --> 00:02:12.890
thinking, well,
how is someone gonna access these data and

45
00:02:12.890 --> 00:02:15.440
he doesn't have to do this, like no,
you don't have to think about it.

46
00:02:15.440 --> 00:02:16.630
You don't have to think any of it.

47
00:02:16.630 --> 00:02:19.180
Just make a resolver
that resolves the field.

48
00:02:19.180 --> 00:02:21.488
And as long as all of your
fields are accounted for,

49
00:02:21.488 --> 00:02:25.590
automatically or directly by you, you're
good, you don't have to do anything else.

50
00:02:25.590 --> 00:02:29.672
And so you have performance issues and
even then you're not worrying about

51
00:02:29.672 --> 00:02:33.128
specific queries, you are worrying
about every query [LAUGH].

52
00:02:33.128 --> 00:02:36.720
So there's not one scenario
you're concerned about.

53
00:02:36.720 --> 00:02:40.614
You're concerned about the generic
possibility of all the scenarios and

54
00:02:40.614 --> 00:02:42.632
that's what you have to account for.

55
00:02:44.575 --> 00:02:46.508
&gt;&gt; Scott Moss: So adding relationships,
how does this work?

56
00:02:46.508 --> 00:02:50.008
So you can add a type as
a field value on another type.

57
00:02:50.008 --> 00:02:52.511
And then you can just create resolvers for
those fields on the type.

58
00:02:52.511 --> 00:02:53.960
It's that simple.

59
00:02:53.960 --> 00:03:01.210
So if I were to come here and so
I have a user and I have a shoe.

60
00:03:01.210 --> 00:03:04.760
I can say users, you could see I already
have this one here for friends but

61
00:03:04.760 --> 00:03:05.970
I'm gonna do shoes now.

62
00:03:05.970 --> 00:03:11.640
Users have shoes, and exists as shoe,
and it's not null, right?

63
00:03:11.640 --> 00:03:16.610
I can also go the other way around and
I could say, a shoe has a user,

64
00:03:16.610 --> 00:03:18.350
and its user is not null.

65
00:03:20.140 --> 00:03:22.174
And I want my database
doesn't have to reflect this.

66
00:03:22.174 --> 00:03:23.815
My database doesn't have to have,

67
00:03:23.815 --> 00:03:28.440
this one too many relationship that I just
described inside of my graph field schema.

68
00:03:28.440 --> 00:03:30.450
Doesn't need to know about it at all.

69
00:03:30.450 --> 00:03:33.690
Because we're virtualizing and we're gonna
do all this with inside the resolvers

