WEBVTT

1
00:00:00.030 --> 00:00:02.180
&gt;&gt; Scott Moss: This is basically
the core of graphQL APIs.

2
00:00:02.180 --> 00:00:07.110
If you never get into stitching APIs
together and having APIs gate graphQL

3
00:00:07.110 --> 00:00:11.930
APIs gateways and interested in
data piper line stuff, this is it.

4
00:00:11.930 --> 00:00:15.200
Everything else beyond this is like
I said, managing performance and

5
00:00:15.200 --> 00:00:20.180
security and
how do you organize your app, that's it.

6
00:00:20.180 --> 00:00:23.660
There's nothing more to it
than I just described to you.

7
00:00:23.660 --> 00:00:27.890
So if you feel like you're missing
something, you're not, this is it.

8
00:00:27.890 --> 00:00:29.080
I promise you, this is all it is.

9
00:00:29.080 --> 00:00:32.860
You can look at the documentation for
Apollo, it's literally mostly that and

10
00:00:32.860 --> 00:00:34.570
them trying to upsell you on stuff.

11
00:00:34.570 --> 00:00:38.824
There is so many ways to authenticate,
and I'm gonna go over more detail on

12
00:00:38.824 --> 00:00:43.028
the advanced one, but basically,
it depends on what you wanna protect.

13
00:00:43.028 --> 00:00:45.370
Do you wanna protect the entire API?

14
00:00:45.370 --> 00:00:48.154
Do you wanna protect one query?

15
00:00:48.154 --> 00:00:50.449
Do you wanna protect one field?

16
00:00:50.449 --> 00:00:52.338
You can do that in GraphQL.

17
00:00:52.338 --> 00:00:52.889
It's up to you.

18
00:00:52.889 --> 00:00:55.556
You can say, everything is
public except for this field.

19
00:00:55.556 --> 00:00:58.700
Only admins can see this field and
then, you can do that.

20
00:00:58.700 --> 00:01:01.070
And there's a lot of ways
just to do that one thing.

21
00:01:01.070 --> 00:01:04.190
You can do it in logic, in your resolver.

22
00:01:04.190 --> 00:01:08.940
You can create a custom directive
that takes in a level of user role or

23
00:01:08.940 --> 00:01:10.150
something like that.

24
00:01:10.150 --> 00:01:13.350
But obviously, the most simplest
thing that you could do right now

25
00:01:13.350 --> 00:01:16.620
based off the stuff that we've been
doing so far would be just to go and

26
00:01:16.620 --> 00:01:18.039
this is just to log down the host server.

27
00:01:19.060 --> 00:01:21.610
Would be to go into Serverjs and

28
00:01:21.610 --> 00:01:24.790
inside this context object,
you would lock it down here.

29
00:01:24.790 --> 00:01:28.810
So basically this context object gets
access to the request object from Express.

30
00:01:28.810 --> 00:01:30.380
ApolloServer is based off Express.

31
00:01:30.380 --> 00:01:33.110
If you never used Express,
it's a server that's

32
00:01:33.110 --> 00:01:36.160
based off something called Connect
which is something a long time ago.

33
00:01:36.160 --> 00:01:38.817
But basically you get
the incoming request object here.

34
00:01:38.817 --> 00:01:44.359
If you wanna get the headers on here,
you can say, reg.headers.authorization.

35
00:01:44.359 --> 00:01:46.809
You get the authorization header here,
maybe you have jwto here or

36
00:01:46.809 --> 00:01:48.170
something like that.

37
00:01:48.170 --> 00:01:53.260
Whatever your auth schema is or
cookie, whatever that is.

38
00:01:53.260 --> 00:01:56.870
And then you can async stuff in here so
then you can come in here and

39
00:01:56.870 --> 00:02:00.540
be like cool, decoder jwt,
check the user of the database.

40
00:02:00.540 --> 00:02:07.125
If none of that's good, then I'm just
gonna throw an error, throw error.

41
00:02:07.125 --> 00:02:09.745
And I'll just try this right now,
not auth.

42
00:02:09.745 --> 00:02:12.374
So let's just do that,
you'll see what I'm talking about.

43
00:02:12.374 --> 00:02:19.456
So we'll just throw an error here,
&gt;&gt; Scott Moss: Where is this thing?

44
00:02:23.111 --> 00:02:25.384
&gt;&gt; Scott Moss: Starts up,
looks innocent, looks good.

45
00:02:25.384 --> 00:02:27.554
And then, boom, you try to create
something, it says you're not auth,

46
00:02:27.554 --> 00:02:28.080
you can't do it.

47
00:02:29.140 --> 00:02:32.890
So, that's probably the easiest way
to lock down your entire server.

48
00:02:32.890 --> 00:02:37.910
But again, if you have sign up and
sign in implemented in your GraphQL server

49
00:02:37.910 --> 00:02:40.730
then you can't lock down the whole server
because nobody can sign up or sign in.

50
00:02:40.730 --> 00:02:44.380
So maybe you just wanna lock down
these parts or just these parts.

51
00:02:44.380 --> 00:02:49.392
From there, you're gonna have to get
to like, if it is a middleware, or

52
00:02:49.392 --> 00:02:54.917
directives, or hard coding your logic and
a resolver, that's basically it.

53
00:02:54.917 --> 00:02:56.542
Any other questions?

54
00:02:56.542 --> 00:02:57.164
&gt;&gt; Speaker 2: Can I ask a [INAUDIBLE]?

55
00:02:57.164 --> 00:02:57.919
&gt;&gt; Scott Moss: Yes, yeah.

56
00:02:57.919 --> 00:02:59.449
&gt;&gt; Speaker 2: Okay, [LAUGH] so

57
00:02:59.449 --> 00:03:04.983
if you have an application
that has a bunch of services,

58
00:03:04.983 --> 00:03:11.250
do people typically call those
services from within GraphQL?

59
00:03:11.250 --> 00:03:15.933
Or do they start to deprecate those
services and do more in GraphQL?

60
00:03:15.933 --> 00:03:17.170
&gt;&gt; Scott Moss: That's
the beauty about GraphQL.

61
00:03:17.170 --> 00:03:19.220
It literally works with
any service you have.

62
00:03:19.220 --> 00:03:21.440
You never have to ger rid of it,
you never have to change it.

63
00:03:21.440 --> 00:03:22.990
You just throw GraphQL in front of it.

64
00:03:22.990 --> 00:03:26.304
So, if you have a whole bunch of
services and you want to unify them,

65
00:03:26.304 --> 00:03:28.641
the best approach is to
create what's called.

66
00:03:28.641 --> 00:03:32.231
Well, are those services GraphQL
services or are they not?

67
00:03:32.231 --> 00:03:33.982
&gt;&gt; Speaker 2: They're
not GraphQL services.

68
00:03:33.982 --> 00:03:35.174
&gt;&gt; Scott Moss: That's easy.

69
00:03:35.174 --> 00:03:36.755
If you're not doing GraphQL services,

70
00:03:36.755 --> 00:03:39.461
then all you would do there is that
they solved this problem already.

71
00:03:39.461 --> 00:03:45.210
You don't even need this,
it's just makes it easy, data sources.

72
00:03:45.210 --> 00:03:49.142
But basically there's a thing
called data sources in Apollo, so

73
00:03:49.142 --> 00:03:53.728
we have the models inside of our resolvers
that we use to query our database.

74
00:03:53.728 --> 00:03:56.220
Data sources are used to query services.

75
00:03:56.220 --> 00:04:00.837
So you just make a data service for
each single service that you wanna query.

76
00:04:00.837 --> 00:04:02.503
And then you just inject
those into context.

77
00:04:02.503 --> 00:04:05.761
Just like we did the database, just
like we had the models, just like we did

78
00:04:05.761 --> 00:04:09.178
the user and inside your resolvers,
you can just call these data sources which

79
00:04:09.178 --> 00:04:12.743
will call some service that you have
somewhere else, and that's basically it.

80
00:04:12.743 --> 00:04:15.647
The resolvers don't care
where the data come from,

81
00:04:15.647 --> 00:04:18.870
as long as they meet the shape
that's in the schema.

82
00:04:18.870 --> 00:04:20.450
So I didn't talk about databases too much.

83
00:04:20.450 --> 00:04:24.770
But as you would imagine, the reason I
built this database the way that I did is

84
00:04:24.770 --> 00:04:29.400
because I wanted to abstract
away the database but I mean,

85
00:04:29.400 --> 00:04:31.910
this is exactly what a database
thing will look like, anyway.

86
00:04:31.910 --> 00:04:33.720
So you can imagine if
you would have went and

87
00:04:33.720 --> 00:04:35.490
replaced this in the database,
it would work.

88
00:04:35.490 --> 00:04:39.220
And like I said, resolvers can return
promises, they can also so async await.

89
00:04:39.220 --> 00:04:41.800
So you can just return a promise here and
enter the resolver for you.

90
00:04:41.800 --> 00:04:43.970
So, that's why I'm also
returning stuff here.

91
00:04:43.970 --> 00:04:46.254
So, you can do whatever you want and
it still works.

92
00:04:46.254 --> 00:04:47.191
It doesn't matter what database you want.

93
00:04:47.191 --> 00:04:48.861
You can have multiple databases,
if you want.

94
00:04:48.861 --> 00:04:51.291
Just pass them in, in the context
object and switch between them.

95
00:04:51.291 --> 00:04:55.347
Doesn't matter,
you just gotta return that shape.

96
00:04:55.347 --> 00:04:58.607
And then you have to figure out
caching and things like that.

97
00:04:58.607 --> 00:05:02.145
Request-level caching is
a big thing in GraphQL.

98
00:05:02.145 --> 00:05:03.930
How do you cache per request, right?

99
00:05:03.930 --> 00:05:07.887
So if I'm asking for the same thing
over and over and over again,

100
00:05:07.887 --> 00:05:10.390
each one of these is a database.

101
00:05:10.390 --> 00:05:11.411
I already got this owner up here,

102
00:05:11.411 --> 00:05:13.540
why do I have to get it here, and
why do I have to get it here again?

103
00:05:13.540 --> 00:05:16.840
I should be able to cache that
specifically just for this request.

104
00:05:16.840 --> 00:05:20.970
So there's like request level caching and
memory that they use.

105
00:05:20.970 --> 00:05:25.030
There's persistent caching in something
like Redis or MIM SQL or MIM cache or

106
00:05:25.030 --> 00:05:26.440
whatever like that.

107
00:05:26.440 --> 00:05:28.250
So there's different types of caching,

108
00:05:28.250 --> 00:05:32.160
but request level caching is probably
the one that people get into the most.

109
00:05:32.160 --> 00:05:35.470
And you could use something, and
I think that's what this data source does.

110
00:05:35.470 --> 00:05:38.970
This data source handles a lot of that
request level caching and then something

111
00:05:38.970 --> 00:05:45.470
like data loader is something that
also handles request level caching.

112
00:05:45.470 --> 00:05:49.160
And you can use those in combination,
data loader and data sources.

