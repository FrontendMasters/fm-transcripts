WEBVTT

1
00:00:00.140 --> 00:00:01.880
&gt;&gt; Scott Moss: So we call it shoes.

2
00:00:01.880 --> 00:00:08.010
Let's say a type shoes,
shoes has a brands and that's a string.

3
00:00:08.010 --> 00:00:12.730
And they also have size and
that's a integer.

4
00:00:12.730 --> 00:00:17.170
Sure, okay, and they will make a query for
some shoes here.

5
00:00:17.170 --> 00:00:20.060
And what we'll do is we'll give us
an argument that will make it a minute.

6
00:00:20.060 --> 00:00:25.800
I'm gonna say shoe that they're
called a shoe and not shoes.

7
00:00:25.800 --> 00:00:28.390
Cool and
now we're gonna make an input type.

8
00:00:28.390 --> 00:00:32.380
So input for shoes input and

9
00:00:32.380 --> 00:00:38.170
I'm gonna let you query by brand,
which can be a string.

10
00:00:38.170 --> 00:00:40.996
I'm also gonna let you query
by size which is an editor.

11
00:00:42.916 --> 00:00:47.541
&gt;&gt; Scott Moss: So, and then I'm gonna
pass this here as input and shoes input,

12
00:00:47.541 --> 00:00:50.640
I'm not gonna make it required.

13
00:00:50.640 --> 00:00:55.230
So I made a type, I made an input with
some fields that I'm going to use for

14
00:00:55.230 --> 00:00:56.660
filter, and I made a query.

15
00:00:56.660 --> 00:00:58.590
Now I've just got to make a resolver for
these shoes.

16
00:01:01.292 --> 00:01:06.100
So open here, shoes, no value here,

17
00:01:06.100 --> 00:01:08.460
no initial value but
we do have the arguments here and

18
00:01:08.460 --> 00:01:12.480
that's gonna be an object with an input
key on it which is the same name as this.

19
00:01:12.480 --> 00:01:17.760
If I change the name here then that's
what gets changed here but I always

20
00:01:17.760 --> 00:01:22.990
me personally, I just always keep it
the same it's a lot easier to deal with.

21
00:01:22.990 --> 00:01:27.280
So I don't need context in this example.

22
00:01:27.280 --> 00:01:34.450
So then what I'll do is I'll just return
an array of shoes, which have a brand

23
00:01:38.630 --> 00:01:42.285
Nike, and a size of 12, and 15,

24
00:01:42.285 --> 00:01:46.970
yeah.

25
00:01:46.970 --> 00:01:52.119
Let's make one more,
let's make one more, and

26
00:01:52.119 --> 00:01:59.040
we'll call this one Adidas and
this one is 14 in Adidas, cool.

27
00:02:00.140 --> 00:02:04.182
So now we have two shoes,
two brands, two sizes and

28
00:02:04.182 --> 00:02:09.728
we're not filtering, we're not doing
anything with it right now but

29
00:02:09.728 --> 00:02:15.384
we'll just start this and
I'll say no API source demo our source.js.

30
00:02:15.384 --> 00:02:23.299
Cool, 4,000
&gt;&gt; Scott Moss: All right,

31
00:02:23.299 --> 00:02:25.010
got our shoes here.

32
00:02:25.010 --> 00:02:27.700
Cool, so if I ask for some shoes,

33
00:02:27.700 --> 00:02:32.570
I should get back all those
shoes with the brand on them.

34
00:02:32.570 --> 00:02:34.060
Cool, simple enough.

35
00:02:34.060 --> 00:02:36.980
Now let's actually apply our arguments and
get going with that.

36
00:02:36.980 --> 00:02:41.110
So remember I didn't make the arguments
required so the query didn't break but

37
00:02:41.110 --> 00:02:44.400
now if I want to use them in my query,
I'll just go in here and

38
00:02:44.400 --> 00:02:46.430
I'll pretty much do the same
thing I did on the server.

39
00:02:46.430 --> 00:02:47.300
I'll use parenthesis

40
00:02:48.730 --> 00:02:51.900
then I'll start typing in the name of the
argument in this case it's always input.

41
00:02:51.900 --> 00:02:55.140
You can see I get a autocomplete
there cuz it knows it's called input.

42
00:02:55.140 --> 00:02:57.680
So I just hit enter, autocomplete.

43
00:02:57.680 --> 00:03:00.630
We know input has a certain shape too,

44
00:03:00.630 --> 00:03:02.950
if I start typing right here,
I'll get that shape too.

45
00:03:02.950 --> 00:03:06.440
So if I say I want to filter by brand,

46
00:03:06.440 --> 00:03:09.940
you see brands there then
I can pass in a brand.

47
00:03:10.950 --> 00:03:13.500
The thing is with strings you always
have to do double quotes in here,

48
00:03:13.500 --> 00:03:15.430
don't do single quotes
that they go to break.

49
00:03:15.430 --> 00:03:18.820
So cool all you want to get
the ones that have Nike, right?

50
00:03:18.820 --> 00:03:20.330
So I'm gonna say Nike.

51
00:03:20.330 --> 00:03:23.250
And obviously this isn't gonna do anything
if I run it, I'm still gonna get all of

52
00:03:23.250 --> 00:03:26.390
them because I'm not actually doing
anything with this in the resolver.

53
00:03:26.390 --> 00:03:32.052
Right, so
now if I go inside of the resolver,

54
00:03:32.052 --> 00:03:36.969
I have input, I can say actually,

55
00:03:36.969 --> 00:03:44.419
let's filter shoe by,
I'm just gonna hard code the case of

56
00:03:44.419 --> 00:03:49.642
Parco the case of brand right now for now.

57
00:03:49.642 --> 00:03:56.310
So just return of shoe.brand
equals input.brand.

58
00:03:56.310 --> 00:03:57.780
Right, so I'm gonna filter those out.

59
00:03:59.330 --> 00:04:00.043
Start this thing.

60
00:04:03.843 --> 00:04:08.430
&gt;&gt; Scott Moss: And if we run around
this again, did I not spell it right?

61
00:04:08.430 --> 00:04:11.084
&gt;&gt; Speaker 2: I think you
did a return statement.

62
00:04:11.084 --> 00:04:12.290
&gt;&gt; Scott Moss: Yeah, you're right.

63
00:04:12.290 --> 00:04:13.367
&gt;&gt; Speaker 2: The same line.

64
00:04:13.367 --> 00:04:14.042
&gt;&gt; Scott Moss: Yeah.

65
00:04:14.042 --> 00:04:15.630
&gt;&gt; Speaker 2: Which displaced the devices.

66
00:04:15.630 --> 00:04:17.060
&gt;&gt; Scott Moss: There we go.

67
00:04:17.060 --> 00:04:19.945
Gotta love that new Javascript smell.

68
00:04:19.945 --> 00:04:25.390
All right, there you go, now you get an
array of shoes filtered out just by Nike.

69
00:04:25.390 --> 00:04:31.010
So that's one example of how you
would use arguments, very easy to do.

70
00:04:31.010 --> 00:04:35.100
You can imagine you passing these
arguments over to like a database or

71
00:04:35.100 --> 00:04:38.050
where you're filtering sequel or
creating a query or Mongo or

72
00:04:38.050 --> 00:04:40.110
something like that,
that's what this is for.

73
00:04:40.110 --> 00:04:42.710
Or if you're hitting
some third party API and

74
00:04:42.710 --> 00:04:47.130
you need something to pass the API,
that's what these arguments are for.

75
00:04:47.130 --> 00:04:50.620
At least on the career level and
on the field level, they're just, for

76
00:04:50.620 --> 00:04:55.150
me personally I use them,
what I like to do on the field level

77
00:04:55.150 --> 00:04:59.290
is any field on a type
that is an array type.

78
00:04:59.290 --> 00:05:03.580
For instance, if Pets did have
something called Buddies here and

79
00:05:03.580 --> 00:05:05.530
it was an array of Pets,

80
00:05:05.530 --> 00:05:11.076
then I would always pass off an argument
here to be able to manipulate that array.

81
00:05:11.076 --> 00:05:14.670
Whether I wanna sort it, filter it,
cuz maybe I don't wanna get all of it's

82
00:05:14.670 --> 00:05:18.930
Buddies, I only want to get it's Buddies
that are dogs, something like that.

83
00:05:18.930 --> 00:05:24.440
So I would always pass arguments
to fields who return array types.

84
00:05:24.440 --> 00:05:27.690
And that's just a habit that I picked
up because you normally want to be

85
00:05:27.690 --> 00:05:31.820
able to manipulate an array whether it's
pagination, whether it's transforming,

86
00:05:31.820 --> 00:05:34.680
sorting, filtering whatever that is,
so that's one thing I always learned.

87
00:05:34.680 --> 00:05:39.160
Other than that on fields you
probably don't need arguments.

88
00:05:39.160 --> 00:05:41.320
Like I said, you can do things
like transformations on images and

89
00:05:41.320 --> 00:05:41.830
things like that.

90
00:05:41.830 --> 00:05:44.980
But there's also another way that you can
do that and those are called directives.

91
00:05:44.980 --> 00:05:47.162
And we're not talking about
those in this course, but

92
00:05:47.162 --> 00:05:48.880
most people just use directives for that.

