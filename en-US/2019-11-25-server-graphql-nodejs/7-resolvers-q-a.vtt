WEBVTT

1
00:00:00.020 --> 00:00:04.853
&gt;&gt; Scott Moss: So I talked about doing the
resolvers on the query level like this,

2
00:00:04.853 --> 00:00:10.825
but then like I slightly mentioned, is
that you can also resolve fields, right?

3
00:00:10.825 --> 00:00:15.129
So if you want to resolve fields,
that's where this pet object is, and

4
00:00:15.129 --> 00:00:16.935
this user object is, right?

5
00:00:16.935 --> 00:00:21.090
So remember, query is just the type,
and we have a field called pets.

6
00:00:21.090 --> 00:00:24.220
Well, pet is a type and user is a type.

7
00:00:24.220 --> 00:00:26.850
And all the types can have resolvers.

8
00:00:26.850 --> 00:00:31.460
So just like query is a type and
it resolves its fields,

9
00:00:31.460 --> 00:00:35.860
well, so could pet which is also a type,
and it can resolve its fields.

10
00:00:35.860 --> 00:00:40.940
So there's nothing stopping you
from resolving all the fields for

11
00:00:40.940 --> 00:00:43.216
a specific type with individual resolvers.

12
00:00:43.216 --> 00:00:49.900
By default, GraphQL will look at the
return object from a top level resolver.

13
00:00:49.900 --> 00:00:51.280
And it will match the keys, and

14
00:00:51.280 --> 00:00:56.250
that object with the fields on
that object's type, one for one.

15
00:00:56.250 --> 00:01:01.545
So by default, GraphQL actually does
create a resolver for every single field.

16
00:01:01.545 --> 00:01:04.538
It's actually is an internal thing
called the default resolver, and

17
00:01:04.538 --> 00:01:08.150
all it does is it looks for a key with
the same name and it resolves that field.

18
00:01:08.150 --> 00:01:09.429
That's what it does by default.

19
00:01:09.429 --> 00:01:12.650
So every field does have its own resolver,
whether you wrote it or not.

20
00:01:12.650 --> 00:01:17.842
That's how you're able to return, for
instance, an entire pet object here,

21
00:01:17.842 --> 00:01:21.418
but only asked for an ID,
and that's all you get back.

22
00:01:21.418 --> 00:01:24.478
And if you could look at the network tab
and you would inspect that, you would only

23
00:01:24.478 --> 00:01:27.542
get back what you ask for, even though
the resolver returned the entire object.

24
00:01:27.542 --> 00:01:30.830
And that's because you didn't ask for
it, so they didn't get resolved.

25
00:01:30.830 --> 00:01:34.860
Yes.
&gt;&gt; Speaker 2: So when you manually define

26
00:01:34.860 --> 00:01:39.310
a field resolver,
does that extend the default resolvers?

27
00:01:39.310 --> 00:01:40.623
Or does it completely replace them?

28
00:01:40.623 --> 00:01:44.704
&gt;&gt; Scott Moss: That's a good question.

29
00:01:44.704 --> 00:01:49.470
Let's just walk through it so
that you can see what I'm talking about.

30
00:01:49.470 --> 00:01:50.212
That's a very good question.

31
00:01:50.212 --> 00:01:55.607
So if I return an array of, I'm just
gonna put an array of empty objects,

32
00:01:55.607 --> 00:02:00.390
there's nothing in them,
they are just empty objects, okay?

33
00:02:01.540 --> 00:02:04.730
And then let's run this,
let's see what happens.

34
00:02:04.730 --> 00:02:06.388
So I've put an array of empty objects.

35
00:02:06.388 --> 00:02:07.950
Obviously, if I try to run this,

36
00:02:07.950 --> 00:02:10.690
it's going to say pets must have an ID,
so it breaks.

37
00:02:10.690 --> 00:02:11.560
Okay, cool.

38
00:02:11.560 --> 00:02:14.460
So then what I'm gonna do,
is I'm gonna put an ID on both of these.

39
00:02:14.460 --> 00:02:18.340
I'm gonna say id 1, and then id 2, okay?

40
00:02:20.962 --> 00:02:24.510
&gt;&gt; Scott Moss: And now if I run this, I'll
get back pets, I didn't want id 2, right?

41
00:02:24.510 --> 00:02:25.187
It makes sense.

42
00:02:25.187 --> 00:02:29.627
But if I go down here to pet and
comment that,

43
00:02:29.627 --> 00:02:37.730
don't worry about the image thing, and
I say id for pet is going to be this.

44
00:02:37.730 --> 00:02:40.270
Now, what I can do is I can
return whatever I want.

45
00:02:42.920 --> 00:02:43.630
I'm going to return 3.

46
00:02:45.000 --> 00:02:45.610
Let's save that.

47
00:02:48.732 --> 00:02:54.003
&gt;&gt; Scott Moss: Yeah,
sorry it can't be that, maybe 2.

48
00:02:54.003 --> 00:02:58.450
Something like that was a safe pet,
yeah, the image thing.

49
00:03:00.350 --> 00:03:00.970
I'll just do that, there we go.

50
00:03:03.870 --> 00:03:06.420
Cool, so now if I do that and
I come back, I return this.

51
00:03:06.420 --> 00:03:07.260
They both say 3 now.

52
00:03:08.470 --> 00:03:12.500
That's because of the resolver of
ID that belongs to pet completely

53
00:03:12.500 --> 00:03:15.820
overrides whatever the parent
resolver returned.

54
00:03:15.820 --> 00:03:16.410
Yes?

55
00:03:16.410 --> 00:03:19.880
&gt;&gt; Speaker 2: Right, but
did the default resolvers for

56
00:03:19.880 --> 00:03:24.000
each of the other fields still live there?

57
00:03:24.000 --> 00:03:25.120
&gt;&gt; Scott Moss: Yes, they still live there.

58
00:03:25.120 --> 00:03:27.360
So, for instance,
what's another thing on here?

59
00:03:27.360 --> 00:03:27.860
A name.

60
00:03:30.242 --> 00:03:35.771
&gt;&gt; Scott Moss: Moose, and
this one is Garfield,

61
00:03:35.771 --> 00:03:39.400
something like that.

62
00:03:40.500 --> 00:03:43.840
So I'm not, I don't have resolvers for
names, so their default resolver.

63
00:03:43.840 --> 00:03:51.230
So they should still resolve
to whatever they were, right.

64
00:03:51.230 --> 00:03:52.950
So, and that's because like I said,

65
00:03:52.950 --> 00:03:56.810
each individual field does
have its own default resolver.

66
00:03:56.810 --> 00:03:59.630
Everything resolves down
to a scalar at some point,

67
00:03:59.630 --> 00:04:00.930
there's no way to get around that.

68
00:04:00.930 --> 00:04:03.730
Even if you have a type that references
a type that references a type that

69
00:04:03.730 --> 00:04:07.070
references a type, eventually
there's a scalar there somewhere.

70
00:04:07.070 --> 00:04:08.504
So everything has to resolve to that and

71
00:04:08.504 --> 00:04:10.333
each one of those could
have a resolver function.

72
00:04:12.864 --> 00:04:13.696
&gt;&gt; Scott Moss: Yes.

73
00:04:13.696 --> 00:04:18.215
&gt;&gt; Speaker 2: On the pets query resolver,
the first argument is

74
00:04:18.215 --> 00:04:22.850
the context of the previously
resolved resolver?

75
00:04:25.330 --> 00:04:30.130
Is that, in this case, pet,
or is it still undefined?

76
00:04:30.130 --> 00:04:32.170
Because it's a top level of the query.

77
00:04:32.170 --> 00:04:34.630
&gt;&gt; Scott Moss: So are you saying
the first argument for this ID on here?

78
00:04:34.630 --> 00:04:36.890
&gt;&gt; Speaker 2: The first
underscore you got in that.

79
00:04:36.890 --> 00:04:37.520
&gt;&gt; Scott Moss: This one?
&gt;&gt; Speaker 2: That's, yeah.

80
00:04:37.520 --> 00:04:41.050
&gt;&gt; Scott Moss: That's still undefined
because pets is still a top level query.

81
00:04:41.050 --> 00:04:47.530
But because id is no longer a top level
query, because id runs after pets run.

82
00:04:47.530 --> 00:04:49.910
Therefore, this first argument here,
guess what it'll be?

83
00:04:49.910 --> 00:04:51.110
It'll be the pet.

84
00:04:51.110 --> 00:04:52.193
It'll be one of these pets here.

85
00:04:57.649 --> 00:04:59.359
&gt;&gt; Scott Moss: All right, so
just to show you if I were to say.

86
00:04:59.359 --> 00:05:02.622
All right,
we can just do something like this,

87
00:05:02.622 --> 00:05:05.811
yeah i'll just log in that's so
much better.

88
00:05:10.740 --> 00:05:17.490
&gt;&gt; Scott Moss: Log that pet and
you can see, I run that, go back to this.

89
00:05:17.490 --> 00:05:19.640
You can see there we go, that's the pet.

90
00:05:21.120 --> 00:05:24.849
So that's what I meant by having these top
level resolvers and you know something's

91
00:05:24.849 --> 00:05:27.696
a top level resolver because it
exists on the query or mutation.

92
00:05:27.696 --> 00:05:29.260
That's how you know it's top level.

93
00:05:29.260 --> 00:05:33.886
Anything other than that is not a top
level and they're gonna resolve after

94
00:05:33.886 --> 00:05:38.449
something on a top level resolves or
after some field before it resolves.

95
00:05:38.449 --> 00:05:41.737
When we get into relationships,
a pet might reference a user,

96
00:05:41.737 --> 00:05:43.418
the user might reference a pet.

97
00:05:43.418 --> 00:05:45.080
And that can go on for infinity.

98
00:05:45.080 --> 00:05:49.970
So, that first argument, it could
be either one of those things, and

99
00:05:49.970 --> 00:05:52.280
depends on how the person is resolving it.

100
00:05:52.280 --> 00:05:53.910
So it can get confusing,

101
00:05:53.910 --> 00:05:57.700
but the thing is, you just don't
have to think about those use cases.

102
00:05:57.700 --> 00:05:58.840
I think a lot of people that do GraphQL,

103
00:05:58.840 --> 00:06:03.590
they try to think about all the different
ways that someone can query the API so

104
00:06:03.590 --> 00:06:06.080
they try to account for that,
but that's the whole purpose.

105
00:06:06.080 --> 00:06:09.280
You don't have to account for it,
you don't need to think about it, you just

106
00:06:09.280 --> 00:06:13.340
need to make the types and make the
connections and then make the resolvers.

107
00:06:13.340 --> 00:06:18.690
That's it, as long as every field
in your schema is accounted for,

108
00:06:18.690 --> 00:06:21.210
either by a default resolver or
by one that you created.

109
00:06:21.210 --> 00:06:22.310
then you're good.

110
00:06:22.310 --> 00:06:24.315
You don't have to do anything else.

111
00:06:24.315 --> 00:06:27.160
As long as you know,
all the fields are accounted for

112
00:06:27.160 --> 00:06:29.294
through some mechanism of resolving.

113
00:06:29.294 --> 00:06:31.041
They can do whatever they want.

114
00:06:31.041 --> 00:06:31.752
That's it.

115
00:06:31.752 --> 00:06:34.208
It's up to you to define
the relationships.

116
00:06:34.208 --> 00:06:37.764
It's up to you to define what top
level queries they can execute.

117
00:06:37.764 --> 00:06:38.992
Any other questions?

118
00:06:38.992 --> 00:06:42.548
&gt;&gt; Can you show all your passing that
the login context in a nd a gain in

119
00:06:42.548 --> 00:06:43.259
the server?

120
00:06:43.259 --> 00:06:43.841
&gt;&gt; For sure.

121
00:06:43.841 --> 00:06:44.870
Yeah, so.

122
00:06:44.870 --> 00:06:45.880
Should just be like this.

123
00:06:45.880 --> 00:06:48.960
So context, which is a field

124
00:06:48.960 --> 00:06:53.530
that exists on the object that's passed
into Apollo server should be a function.

125
00:06:53.530 --> 00:06:55.700
And whatever you return here
is going to be on the context.

126
00:06:56.940 --> 00:07:02.100
Like I said, if this is not, if you're,
if you go into your resolver and

127
00:07:02.100 --> 00:07:05.250
context is undefined for
you or something like that.

128
00:07:05.250 --> 00:07:07.710
What I found out was in db, db

129
00:07:09.800 --> 00:07:15.030
where is the index, index db area.

130
00:07:15.030 --> 00:07:18.920
This file adapter here that
syncs with the JSON file?

131
00:07:18.920 --> 00:07:22.150
I think this is silently failing for

132
00:07:22.150 --> 00:07:24.904
some individuals trying to
read this from the file.

133
00:07:24.904 --> 00:07:26.240
And it just fails.

134
00:07:26.240 --> 00:07:30.010
So this file never gets exported so
it models this as undefined.

135
00:07:30.010 --> 00:07:31.490
That's happening for one person, at least.

136
00:07:31.490 --> 00:07:34.523
So I don't know what the issue
is with the file sync.

137
00:07:34.523 --> 00:07:36.922
Only thing I can think of is,
it's a different version of Note,

138
00:07:36.922 --> 00:07:40.220
which completely changed how they read
files in the last couple versions.

139
00:07:40.220 --> 00:07:43.540
So if you if you are having undefined,
models is undefined.

140
00:07:43.540 --> 00:07:45.423
It's probably this thing failing,
right now.

141
00:07:45.423 --> 00:07:50.549
You can just literally turn this into
an array in memory versus using your file.

142
00:07:50.549 --> 00:07:53.960
You just get a new database
every time your server restarts.

143
00:07:53.960 --> 00:07:57.762
So, any other questions?

144
00:07:57.762 --> 00:08:01.014
Yes.
Kinda like a high level question,

145
00:08:01.014 --> 00:08:04.395
you know how you can have field specific,

146
00:08:04.395 --> 00:08:07.990
I forgot what you called it, but-
&gt;&gt; Speaker 2: Resolver?

147
00:08:07.990 --> 00:08:09.997
Yeah, resolver, field specific resolvers.

148
00:08:09.997 --> 00:08:15.572
Is it because on the query, on the capital
Q query resolver, that's responsible for

149
00:08:15.572 --> 00:08:20.608
fetching data from whatever your data
source is, but then the field specific

150
00:08:20.608 --> 00:08:25.480
resolver is used for modifying that
data and preparing it for the client?

151
00:08:25.480 --> 00:08:28.080
What's the point of having
these field specific?

152
00:08:28.080 --> 00:08:30.590
&gt;&gt; Scott Moss: Because those fields can
come from anywhere, like for instance,

153
00:08:30.590 --> 00:08:33.070
if I had a field here.

154
00:08:33.070 --> 00:08:35.679
Like for instance, let's say I had
an image, and this image was a string.

155
00:08:35.679 --> 00:08:38.420
But let's say in order for
me to get the image,

156
00:08:38.420 --> 00:08:40.680
I don't actually use it to upload it.

157
00:08:40.680 --> 00:08:43.190
I'll just go fetch it from some dog API.

158
00:08:43.190 --> 00:08:45.750
Right, that can come from anywhere, and

159
00:08:45.750 --> 00:08:48.430
I want to make a resolver specifically for
that.

160
00:08:48.430 --> 00:08:53.190
Because if I didn't, the alternative would
be, I have to go inside of this pets

161
00:08:53.190 --> 00:08:56.614
query, I have to loop through
every single one of these.

162
00:08:56.614 --> 00:08:58.729
And then make an API call
to get every single one,

163
00:08:58.729 --> 00:09:00.900
when in reality all you wanted was one.

164
00:09:00.900 --> 00:09:02.460
Or maybe you never asked for
it in this field and

165
00:09:02.460 --> 00:09:04.010
I did all this work for no reason.

166
00:09:04.010 --> 00:09:04.617
So, yeah.

167
00:09:04.617 --> 00:09:09.730
&gt;&gt; Speaker 2: I would just say it
can be derived rather than stored.

168
00:09:09.730 --> 00:09:11.880
&gt;&gt; Scott Moss: Yes,
it can be derived, right?

169
00:09:11.880 --> 00:09:14.010
You can think of this like
computer properties, right?

170
00:09:14.010 --> 00:09:18.523
You compute them at runtime versus
having them persistant in some place.

171
00:09:18.523 --> 00:09:24.961
Another good example is if
a user had a first name and

172
00:09:24.961 --> 00:09:31.413
that was a string and
then they also had a last name.

173
00:09:31.413 --> 00:09:33.211
Like this.

174
00:09:36.679 --> 00:09:39.565
&gt;&gt; Scott Moss: You could just make one
called name that just adds them together,

175
00:09:39.565 --> 00:09:40.830
and you have a name, right?

176
00:09:40.830 --> 00:09:43.056
So you don't have to, you know what,
this is in the database,

177
00:09:43.056 --> 00:09:44.330
I don't care about that.

178
00:09:44.330 --> 00:09:46.081
The front end,
all they care about is name.

179
00:09:46.081 --> 00:09:48.746
So I'm gonna make a resolver that
takes first name plus last name and

180
00:09:48.746 --> 00:09:49.650
return name, right?

181
00:09:49.650 --> 00:09:55.460
So it's computed at runtime and
not so much stored somewhere.

182
00:09:55.460 --> 00:09:56.752
So that's a good example.

183
00:09:56.752 --> 00:10:00.363
And that's mostly the only
time you will have a resolver.

184
00:10:00.363 --> 00:10:04.395
Is when you need to compute something
at runtime that's different from where

185
00:10:04.395 --> 00:10:06.990
the source that you got it from.

186
00:10:06.990 --> 00:10:12.480
I know like Mongo has underscore ID, but
I hate using underscore ID everywhere.

187
00:10:12.480 --> 00:10:16.820
So I just make a resolver for
ID that just returns underscore ID.

188
00:10:16.820 --> 00:10:17.610
So something like that.

189
00:10:17.610 --> 00:10:19.770
You can do that on database level too,
but I just do it in GraphQL.

