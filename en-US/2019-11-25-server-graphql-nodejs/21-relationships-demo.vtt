WEBVTT

1
00:00:00.999 --> 00:00:03.173
&gt;&gt; Scott Moss: Okay, so
see what else I have here.

2
00:00:03.173 --> 00:00:06.750
All right, so before I set you off, let
me show you an example of how this works.

3
00:00:06.750 --> 00:00:11.400
So, like I said,
I added the shoes to the user and

4
00:00:11.400 --> 00:00:15.020
I added the- let me get rid
of this union right quick.

5
00:00:16.210 --> 00:00:18.690
Get out of here, too much stuff,
too much stuff happening.

6
00:00:18.690 --> 00:00:24.646
So what I'm gonna do now is let's go down
to shoes and we'll put a user ID here,

7
00:00:24.646 --> 00:00:29.699
I know I put up there a user must be
a user type which is an object, but

8
00:00:29.699 --> 00:00:35.601
I'm just gonna put an ID here of user 1
and I'm gonna put an ID here of user 1.

9
00:00:35.601 --> 00:00:40.003
Cool, they all have user 1, and then what
I'm going to do is I'm going to make

10
00:00:40.003 --> 00:00:44.422
another resolver for a new query that
I'm gonna make, I already have it.

11
00:00:44.422 --> 00:00:46.580
Neat, cool, I already got it.

12
00:00:46.580 --> 00:00:51.046
So for me,
I'm gonna return all those user stuff but

13
00:00:51.046 --> 00:00:54.100
I'm gonna put a id of one like that.

14
00:00:55.960 --> 00:00:58.920
Cool and users have shoes now, so

15
00:00:58.920 --> 00:01:04.331
I'm gonna put shoes there like that,
which is empty array.

16
00:01:04.331 --> 00:01:07.108
All right, so we got empty array here,
we got a user of one.

17
00:01:09.157 --> 00:01:12.790
&gt;&gt; Scott Moss: Did I spell this right,
shoes, shoe, shoe.

18
00:01:12.790 --> 00:01:13.340
Okay, cool.

19
00:01:16.440 --> 00:01:20.120
This broke because- I've
still got footwear somewhere.

20
00:01:20.120 --> 00:01:21.520
Where do I have it?

21
00:01:21.520 --> 00:01:22.059
There it is.

22
00:01:27.662 --> 00:01:30.666
&gt;&gt; Scott Moss: Okay, this one broke
because I still have footwear in

23
00:01:30.666 --> 00:01:31.546
my resolvers.

24
00:01:31.546 --> 00:01:33.940
Look how strict that is, gotta love it.

25
00:01:35.877 --> 00:01:36.663
&gt;&gt; Scott Moss: There we go.

26
00:01:38.614 --> 00:01:42.441
&gt;&gt; Scott Moss: And
it broke again because shoe.user-

27
00:01:42.441 --> 00:01:46.595
I still have the interface,
where is that at?

28
00:01:46.595 --> 00:01:50.944
So now it's basically saying, hey,
you added a new field called user on

29
00:01:50.944 --> 00:01:54.022
the interface but
you didn't add it on all of them.

30
00:01:54.022 --> 00:01:56.632
So this is what I was telling you,
it's really explicit.

31
00:01:56.632 --> 00:02:00.197
You have to add them everywhere,
it does not care.

32
00:02:02.046 --> 00:02:03.360
&gt;&gt; Scott Moss: And there we go.

33
00:02:03.360 --> 00:02:04.736
Now we're good to go.

34
00:02:04.736 --> 00:02:09.927
So, if we go look and explore this, it's
gonna get a little crazy, refresh this.

35
00:02:11.784 --> 00:02:15.682
&gt;&gt; Scott Moss: If I said,
give me some shoes and I asked for a user,

36
00:02:15.682 --> 00:02:18.410
let's just see what happens.

37
00:02:18.410 --> 00:02:20.410
So clearly this is gonna break,
because it's saying,

38
00:02:20.410 --> 00:02:24.930
fill user of type user must have a
selection of sub fills, did you mean user?

39
00:02:24.930 --> 00:02:28.170
Well, I only put an ID of
one on those shoes' user, so

40
00:02:28.170 --> 00:02:31.916
therefore if I try to do anything here,
it's not gonna do it,

41
00:02:31.916 --> 00:02:36.930
because it can't get a .email from
a number, it doesn't work that way.

42
00:02:36.930 --> 00:02:39.360
So I had the right resolvers for
those fields.

43
00:02:39.360 --> 00:02:41.940
And typically what I found
out is what you wanna do,

44
00:02:41.940 --> 00:02:43.626
there's a lot of ways to do this.

45
00:02:43.626 --> 00:02:47.152
But to save yourself a headache,
so let me tell you what not to do.

46
00:02:47.152 --> 00:02:52.575
[LAUGH] What not to do is to like,
okay, cool, I got all these shoes here.

47
00:02:52.575 --> 00:02:56.170
I'm gonna go to back to the database or
my data source,

48
00:02:56.170 --> 00:02:58.840
take all these user IDs and go get those.

49
00:02:58.840 --> 00:03:01.978
And then put them here and when I
return this object, it's gonna be good.

50
00:03:01.978 --> 00:03:03.260
Correct, it will be good.

51
00:03:03.260 --> 00:03:05.758
But what if I didn't ask for
the user in the first place?

52
00:03:05.758 --> 00:03:06.402
You just went and

53
00:03:06.402 --> 00:03:09.226
resolved a whole bunch of users of
a list of 1000 shoes for no reason.

54
00:03:09.226 --> 00:03:10.266
I didn't even ask for the user.

55
00:03:10.266 --> 00:03:13.850
How do you know that, if you don't know
what I'm asking, why go do the work?

56
00:03:13.850 --> 00:03:15.080
Leave that up to the resolvers.

57
00:03:15.080 --> 00:03:17.255
The resolvers are only gonna
execute if you ask for it.

58
00:03:17.255 --> 00:03:19.110
Why re-implement that logic?

59
00:03:19.110 --> 00:03:21.980
The only way that you can
determine what someone asked for

60
00:03:21.980 --> 00:03:26.400
if you're already inside a resolver is if
you look at this fourth argument here,

61
00:03:26.400 --> 00:03:28.450
like I told you, info,
that's the only way.

62
00:03:28.450 --> 00:03:32.366
If I looked at this AST, I could
determine, they didn't ask for users.

63
00:03:32.366 --> 00:03:35.333
So I'm not gonna go back to the database
and try to resolve these user IDs.

64
00:03:35.333 --> 00:03:36.390
That's the only way you can do it.

65
00:03:36.390 --> 00:03:40.510
But again, why reinvent that wheel
when GraphQL already does it for you?

66
00:03:40.510 --> 00:03:44.511
So all you have to do is just make
a resolver for a shoes user object,

67
00:03:44.511 --> 00:03:46.094
that's all you gotta do.

68
00:03:46.094 --> 00:03:49.107
So if I go down to shoe,

69
00:03:49.107 --> 00:03:54.508
I can make a resolver for its user field.

70
00:03:54.508 --> 00:03:57.980
And I know because it's being
resolved underneath the shoe type,

71
00:03:57.980 --> 00:03:59.910
its first argument is gonna be shoe.

72
00:04:01.210 --> 00:04:06.206
And I know that shoes have a user
ID on them or whatever that is, so

73
00:04:06.206 --> 00:04:11.223
I can just return, and
I'm just gonna hard code this user here.

74
00:04:11.223 --> 00:04:15.981
Let's go ahead and take this user
like this, so we'll reuse it.

75
00:04:19.120 --> 00:04:21.290
&gt;&gt; Scott Moss: Boom,
we'll hard code that user like that.

76
00:04:22.330 --> 00:04:26.630
So now I can just return, and
this is where you would say,

77
00:04:26.630 --> 00:04:30.390
find user by shoe.user, but
I'm just hard coding it right now, so

78
00:04:30.390 --> 00:04:32.490
I'm just gonna say return user.

79
00:04:32.490 --> 00:04:38.280
So then now you have to resolve this on
the actual type and not the abstract type.

80
00:04:38.280 --> 00:04:40.270
So this is where it gets complicated.

81
00:04:41.510 --> 00:04:44.869
So instead, we'll say,
let's resolve this on a Sneaker.

82
00:04:44.869 --> 00:04:48.533
And we'll say a user, like that.

83
00:04:48.533 --> 00:04:54.035
And I'll do the same thing for a,
&gt;&gt; Scott Moss: Boot.

84
00:04:58.171 --> 00:04:58.918
&gt;&gt; Scott Moss: Like that.

85
00:05:01.975 --> 00:05:07.120
&gt;&gt; Scott Moss: Cool, so if I run this,
then boom, you can see, yes?

86
00:05:07.120 --> 00:05:11.883
&gt;&gt; Speaker 2: So,
earlier when you were doing the union,

87
00:05:11.883 --> 00:05:15.357
if you go back there to the code,

88
00:05:15.357 --> 00:05:20.664
would you be able to do
the resolver on the union?

89
00:05:20.664 --> 00:05:22.435
&gt;&gt; Scott Moss: Would you be able to put,
no.

90
00:05:22.435 --> 00:05:26.759
You can't do resolver in the union,
you can't write field level

91
00:05:26.759 --> 00:05:31.246
resolvers on abstract types,
they have to exist on the real types.

92
00:05:35.612 --> 00:05:40.386
&gt;&gt; Speaker 2: Okay but you're [LAUGH]
returning something off of Sneaker or

93
00:05:40.386 --> 00:05:42.919
Boot and those are abstracted.

94
00:05:42.919 --> 00:05:46.938
&gt;&gt; Scott Moss: No, Sneaker and
Boot are real types, so let's go look.

95
00:05:46.938 --> 00:05:48.346
&gt;&gt; Speaker 2: They're
real because they're-

96
00:05:48.346 --> 00:05:49.253
&gt;&gt; Scott Moss: They have the word type in

97
00:05:49.253 --> 00:05:49.938
front of them.

98
00:05:49.938 --> 00:05:50.529
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Scott Moss: Yeah,

99
00:05:50.529 --> 00:05:53.080
anything with the word type in front of,
it's a real type.

100
00:05:53.080 --> 00:05:56.506
Anything that is an interface
is an abstract type.

101
00:05:56.506 --> 00:05:58.138
A union is also an abstract type.

102
00:06:01.458 --> 00:06:03.495
&gt;&gt; Scott Moss: Cool, so obviously this
is redundant, it's the same thing.

103
00:06:03.495 --> 00:06:05.095
So this is where failover resolvers,

104
00:06:05.095 --> 00:06:08.920
I actually have those in separate files
because I wanna reuse them all the time.

105
00:06:08.920 --> 00:06:12.636
Like, I'm gonna make this field level
resolver for every single thing that

106
00:06:12.636 --> 00:06:15.030
implements this interface,
why do I have to write it ten times?

107
00:06:15.030 --> 00:06:17.727
We'll take this function out,
put it somewhere else and import it.

108
00:06:17.727 --> 00:06:19.280
And that way,
you don't have to rewrite it.

109
00:06:19.280 --> 00:06:20.831
But yes, it's the same thing.

110
00:06:20.831 --> 00:06:24.883
Okay, so that's one level, sand we
should not be able just to do this now.

111
00:06:27.622 --> 00:06:31.046
&gt;&gt; Scott Moss: Cool, so now we're
able to get a users from the shoe but

112
00:06:31.046 --> 00:06:35.288
users also have shoes, so if we set
shoes and now we wanna get the ID or

113
00:06:35.288 --> 00:06:39.580
the size of that shoe and
I ran this, chooses it in the array.

114
00:06:39.580 --> 00:06:42.388
But we know shoes isn't in the array,
so let's fix that.

115
00:06:42.388 --> 00:06:47.370
So now what I'll do is I'll take
these shoes here, like this,

116
00:06:47.370 --> 00:06:51.704
and I'm just gonna say, return the shoes.

117
00:06:51.704 --> 00:06:53.270
&gt;&gt; Scott Moss: Some shoes here like that.

118
00:06:54.630 --> 00:06:58.260
Now what I need to do is I need to
write a resolver for the user's shoes.

119
00:06:58.260 --> 00:06:59.970
So it can get back in array of shoes.

120
00:06:59.970 --> 00:07:02.066
So I'll just erase that one there.

121
00:07:02.066 --> 00:07:04.709
I'll keep it, cuz it doesn't matter,
I'm gonna overwrite it.

122
00:07:06.622 --> 00:07:10.520
&gt;&gt; Scott Moss: And now, I'm just gonna
make a new type for user like this.

123
00:07:10.520 --> 00:07:12.380
And I could say,
give me the shoes for the user.

124
00:07:12.380 --> 00:07:15.070
And I'm just gonna return shoes.

125
00:07:15.070 --> 00:07:18.479
But normally what you would do is you
would take the user from the first object.

126
00:07:18.479 --> 00:07:19.752
You will go to your data source and

127
00:07:19.752 --> 00:07:21.806
like, give me all those shoes
that have this user ID.

128
00:07:21.806 --> 00:07:22.828
Right, that's what you would do.

129
00:07:22.828 --> 00:07:25.848
But I just have all these code,
and so it doesn't matter.

130
00:07:28.914 --> 00:07:32.931
&gt;&gt; Scott Moss: Now, if I rerun this again,
you can see, okay cool, so I got some

131
00:07:32.931 --> 00:07:38.141
shoes, I got the users for that shoes, and
I got that user shoes, and I got the size.

132
00:07:38.141 --> 00:07:40.805
Okay, we'll check this out.

133
00:07:40.805 --> 00:07:44.753
So if I say, cool,
give me the user, give me the shoes,

134
00:07:44.753 --> 00:07:48.629
give me the user, give me the shoes,
give me the user.

135
00:07:48.629 --> 00:07:50.192
Give me the shoes.

136
00:07:50.192 --> 00:07:51.893
Okay, you can see this goes on forever.

137
00:07:54.398 --> 00:07:56.180
&gt;&gt; Scott Moss: Well,
this broke because they want something.

138
00:07:56.180 --> 00:07:57.950
Now finally give me
the size of those shoes.

139
00:07:57.950 --> 00:07:58.980
Cool, there we go.

140
00:08:00.650 --> 00:08:01.390
This goes on forever.

141
00:08:01.390 --> 00:08:05.987
And this wasn't that bad because honestly,
I've seen [SOUND] so much worse than this.

142
00:08:05.987 --> 00:08:08.560
And all this is synchronous,
it's in memory.

143
00:08:08.560 --> 00:08:12.960
Imagine if every single one of these
was a database call, or a rest call or

144
00:08:12.960 --> 00:08:14.980
something like that.

145
00:08:14.980 --> 00:08:15.640
[LAUGH] And

146
00:08:15.640 --> 00:08:19.930
imagine you were getting a lot of these
queries a second, hundreds a second.

147
00:08:19.930 --> 00:08:22.106
Just think about what would
happen to your server.

148
00:08:22.106 --> 00:08:27.002
It would be ridiculous, but
this is the cyclic nature of GraphQL.

149
00:08:27.002 --> 00:08:29.891
If you allow it to be cyclic, and
how do you know something is cyclic?

150
00:08:29.891 --> 00:08:34.886
Well, if you make a field whose value's
a type and that type also has a field

151
00:08:34.886 --> 00:08:40.214
whose value is the previous type,
that's a cyclic dependency, a direct one.

152
00:08:40.214 --> 00:08:44.931
You can also have an indirect one where
you have a type referencing a field

153
00:08:44.931 --> 00:08:49.726
on another type but that field references
are completely third type, but

154
00:08:49.726 --> 00:08:52.609
that third time references the first type.

155
00:08:52.609 --> 00:08:56.101
And now you have a cyclic [LAUGH]
dependency that's not direct.

156
00:08:56.101 --> 00:08:57.646
So there's really not
much you can do about it.

157
00:08:57.646 --> 00:09:01.208
So I wouldn't say just maybe don't design
your data that way, I wouldn't say that.

158
00:09:01.208 --> 00:09:04.014
I would say, you should design your
data that way, it's a great thing,

159
00:09:04.014 --> 00:09:05.441
that's the whole point of GraphQL.

160
00:09:05.441 --> 00:09:08.519
And the solution is with
inside the resolvers and

161
00:09:08.519 --> 00:09:13.600
the caching strategies and the security
limiting depths and adding scores.

162
00:09:13.600 --> 00:09:15.170
It's not a data modeling problem.

163
00:09:15.170 --> 00:09:15.799
Don't do that.

164
00:09:15.799 --> 00:09:19.300
If you try to restrict how you
can model data in GraphQL,

165
00:09:19.300 --> 00:09:21.919
you're gonna miss the point of GraphQL.

166
00:09:21.919 --> 00:09:22.985
You're gonna completely miss it.

167
00:09:22.985 --> 00:09:24.370
So, don't do that.

168
00:09:24.370 --> 00:09:26.590
Solve it on another level.

169
00:09:26.590 --> 00:09:27.800
But yeah, that's how this happens.

170
00:09:27.800 --> 00:09:29.856
As you can see, it gets pretty crazy.

171
00:09:29.856 --> 00:09:30.853
I mean, even with this,

172
00:09:30.853 --> 00:09:35.662
I could probably get this to break,
&gt;&gt; Scott Moss: Pretty easily,

173
00:09:35.662 --> 00:09:39.075
let's see, bet if I did three more levels,

174
00:09:39.075 --> 00:09:43.055
it will just crash or
at least it'll be super slow.

175
00:09:47.866 --> 00:09:50.584
&gt;&gt; Scott Moss: Let's see,
it's crushing it.

176
00:09:50.584 --> 00:09:54.348
[LAUGH] You can get this to the point
where it'll take a couple seconds to come

177
00:09:54.348 --> 00:09:55.650
back even in a memory.

178
00:09:55.650 --> 00:09:56.820
I've had it.

179
00:09:56.820 --> 00:09:57.730
But yeah.

180
00:09:59.480 --> 00:10:01.916
Everybody see the issue that
I'm talking about here?

181
00:10:01.916 --> 00:10:03.000
This is what I mean by DDoS.

182
00:10:03.000 --> 00:10:05.110
And remember, this is one request.

183
00:10:05.110 --> 00:10:06.240
GraphQL is only one request.

184
00:10:06.240 --> 00:10:07.510
This isn't multiple requests.

185
00:10:07.510 --> 00:10:08.955
So a CDN wouldn't help here.

186
00:10:08.955 --> 00:10:10.373
Cloudflare would not help here.

187
00:10:10.373 --> 00:10:11.489
The cloud's like,
what are you talking about?

188
00:10:11.489 --> 00:10:12.265
It's just one request.

189
00:10:12.265 --> 00:10:13.930
I don't know what you mean.

190
00:10:13.930 --> 00:10:17.370
Cuz this is application level,
it's not network level.

191
00:10:17.370 --> 00:10:19.250
GraphQL doesn't care about https.

192
00:10:19.250 --> 00:10:21.119
Whatever, I don't care about that.

193
00:10:21.119 --> 00:10:23.452
I'm issuing many things on one request.

194
00:10:23.452 --> 00:10:27.211
So, something to think about here.

195
00:10:27.211 --> 00:10:29.310
But that's relationships in GraphQL.

196
00:10:29.310 --> 00:10:33.680
So in short, resolve,
write field resolvers for relationships.

197
00:10:33.680 --> 00:10:34.830
They work really good.

