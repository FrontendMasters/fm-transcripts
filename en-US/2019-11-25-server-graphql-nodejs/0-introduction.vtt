WEBVTT

1
00:00:00.110 --> 00:00:02.290
&gt;&gt; Scott Moss: I'm back to
talk more about GraphQL.

2
00:00:02.290 --> 00:00:04.220
Super excited,
it's one of my favorite segment,

3
00:00:04.220 --> 00:00:06.260
one of my most favorite technologies.

4
00:00:06.260 --> 00:00:10.193
And this is the only platform that I
teach on because Frontend Masters and

5
00:00:10.193 --> 00:00:11.240
Mark and the team.

6
00:00:11.240 --> 00:00:13.240
It's always a good time.

7
00:00:13.240 --> 00:00:17.410
And like Mark said, so much has changed
in GraphQL landscape since last I talked

8
00:00:17.410 --> 00:00:20.810
about it, and
even then I only talked about server side,

9
00:00:20.810 --> 00:00:24.020
things with GraphQL,
which is like evolving in

10
00:00:24.020 --> 00:00:26.730
a completely different direction
than what you can do on the client.

11
00:00:26.730 --> 00:00:31.080
So this time I want to talk about GraphQL
from the back end perspective and

12
00:00:31.080 --> 00:00:34.800
also the front end perspective,
using some of the most popular

13
00:00:34.800 --> 00:00:38.540
implementations out there, which include
Node and also React on the front end.

14
00:00:38.540 --> 00:00:43.340
So if you're interested in learning how
to use GraphQL on a different server or

15
00:00:43.340 --> 00:00:45.650
on a different framework, a lot of this,

16
00:00:45.650 --> 00:00:49.300
I would say 80% of it is still going to
apply to you because it's focusing just on

17
00:00:49.300 --> 00:00:52.880
GraphQL which doesn't really change
on the framework, anything like that.

18
00:00:52.880 --> 00:00:55.320
And then the last 20% is specific to

19
00:00:55.320 --> 00:00:57.430
the platform that we on which is Node or
React.

20
00:00:57.430 --> 00:00:59.830
So you still get a lot from this.

21
00:00:59.830 --> 00:01:03.360
To start things off, there is a repose,

22
00:01:03.360 --> 00:01:06.500
let me get you that URL if
you didn't get it all ready.

23
00:01:06.500 --> 00:01:09.529
But it'll be on GitHub,

24
00:01:09.529 --> 00:01:15.060
Frontend Masters, Fullstack GraphQL.

25
00:01:15.060 --> 00:01:19.620
So the only dependencies you need for
this is no version greater than six.

26
00:01:19.620 --> 00:01:21.210
There's no database.

27
00:01:21.210 --> 00:01:22.260
There's nothing like that.

28
00:01:22.260 --> 00:01:23.560
I cleaned all that up.

29
00:01:23.560 --> 00:01:27.440
I learned my lesson of having everyone
try to install Mongo [LAUGH] I

30
00:01:27.440 --> 00:01:28.420
didn't try to get this going.

31
00:01:28.420 --> 00:01:30.140
I don't want to focus on
databases this course.

32
00:01:30.140 --> 00:01:32.730
We're purely focusing on GraphQL and

33
00:01:32.730 --> 00:01:34.410
that's the beauty of GraphQL
that you'll find out.

34
00:01:34.410 --> 00:01:36.920
It doesn't really matter what you use for
your data source.

35
00:01:36.920 --> 00:01:40.690
So, yeah, I just put down this repo and
the links of the slides are in the read

36
00:01:40.690 --> 00:01:42.480
me, so you can click on that and
follow along,

37
00:01:42.480 --> 00:01:47.320
if you're online, if you're here you can
also follow along or just watch my screen.

38
00:01:47.320 --> 00:01:49.710
So, with that being said,
I'm just gonna go ahead and

39
00:01:49.710 --> 00:01:51.980
kick things off with the slides.

40
00:01:51.980 --> 00:01:58.100
So the first thing is I want to
talk about GraphQL the big picture.

41
00:01:59.200 --> 00:02:00.250
What is it?

42
00:02:00.250 --> 00:02:03.330
When people's mentioned GraphQL I
think there's a lot of,

43
00:02:04.650 --> 00:02:08.550
there's different scenarios of what they
could be talking about because GraphQL

44
00:02:08.550 --> 00:02:11.450
itself covers a lot of things.

45
00:02:11.450 --> 00:02:14.500
But basically what I
think of GraphQL is and

46
00:02:14.500 --> 00:02:19.240
this is kind of my definition is it's
a spec that describes a declarative query

47
00:02:19.240 --> 00:02:24.700
language that your clients can use to
ask an API for the exact data they want.

48
00:02:24.700 --> 00:02:27.100
This is achieved by creating
a strongly typed Schema for

49
00:02:27.100 --> 00:02:31.460
your API, ultimate flexibility, and
how your API can resolve data and

50
00:02:31.460 --> 00:02:33.110
client queries validated
against your Schema.

51
00:02:33.110 --> 00:02:37.480
Now all that just sounds crazy, but
it took me a while to come up with that

52
00:02:37.480 --> 00:02:40.500
definition to get this so many different
things over what I believe GraphQL.

53
00:02:40.500 --> 00:02:42.200
So basically what this is saying,

54
00:02:42.200 --> 00:02:46.360
if you ever use any strong typed
language like Java, or TypeScript or

55
00:02:46.360 --> 00:02:50.810
anything like that, imagine putting a type
system in front of an existing API.

56
00:02:50.810 --> 00:02:55.510
And then now on any client if
they want to interact with API

57
00:02:55.510 --> 00:03:00.330
they could leverage that type system to
ask the API for exactly what they wanted.

58
00:03:00.330 --> 00:03:02.910
So if you created some types
with some fields on it,

59
00:03:02.910 --> 00:03:07.110
then you could from the client say, give
me this data with these exact fields and

60
00:03:07.110 --> 00:03:10.150
the API will respond back
with that exact shape

61
00:03:10.150 --> 00:03:13.640
just like if you were using a type
system on astronomy typed language.

62
00:03:13.640 --> 00:03:17.870
It's basically that as far as like how
the client interacts with it service side,

63
00:03:17.870 --> 00:03:19.690
as you find out, there's a lot more to it.

64
00:03:19.690 --> 00:03:20.790
It's actually a graph.

65
00:03:20.790 --> 00:03:21.660
You're creating a graph.

66
00:03:21.660 --> 00:03:25.250
If you don't know what a graph is,
you're going to learn what a graph is.

67
00:03:25.250 --> 00:03:27.480
And, and we'll get into it.

68
00:03:27.480 --> 00:03:28.990
Any questions on that?

69
00:03:30.390 --> 00:03:31.870
What is GraphQL?

70
00:03:31.870 --> 00:03:34.850
After me telling you the definition
I don't expect you to know everything

71
00:03:34.850 --> 00:03:35.430
about GraphQL.

72
00:03:35.430 --> 00:03:38.140
So if you still don't know
what GraphQL is, that's fine.

73
00:03:38.140 --> 00:03:39.285
This is just to give you some context.

74
00:03:42.794 --> 00:03:45.417
&gt;&gt; Scott Moss: So like I said,
it's just a speck,

75
00:03:45.417 --> 00:03:48.400
GraphQL itself is not a repo somewhere.

76
00:03:48.400 --> 00:03:51.960
It's not a It's not a framework,
it's literally just a spec and

77
00:03:51.960 --> 00:03:52.630
here's the link to it.

78
00:03:52.630 --> 00:03:56.710
If you click this,
it'll actually take you to the spec

79
00:03:56.710 --> 00:04:00.210
that was created by the people who
created GraphQL which is Facebook.

80
00:04:00.210 --> 00:04:01.880
Facebook created GraphQL.

81
00:04:01.880 --> 00:04:04.970
And here's the spec for it and
it changes all the time.

82
00:04:04.970 --> 00:04:08.810
If we go to look at this one they
have here, you start scrolling, yeah,

83
00:04:08.810 --> 00:04:11.440
it looks like what a spec
looks like very boring.

84
00:04:11.440 --> 00:04:16.060
A lot of stuff that you probably don't
want to read and it just scrolls forever.

85
00:04:16.060 --> 00:04:17.190
That's what a spec is.

86
00:04:17.190 --> 00:04:20.340
So if you really want to understand
how GraphQL works and the ins and

87
00:04:20.340 --> 00:04:21.840
outs, then go do this.

88
00:04:21.840 --> 00:04:23.010
This is what GraphQL.

89
00:04:23.010 --> 00:04:24.610
It's just this spec.

90
00:04:24.610 --> 00:04:26.250
See how Facebook created this spec,

91
00:04:26.250 --> 00:04:29.500
which spawned from some internal
thing that they were using,

92
00:04:29.500 --> 00:04:33.110
there are several implementations and
variations of that spec.

93
00:04:33.110 --> 00:04:37.170
So like I said, it's just a spec, people
from the community, including Facebook

94
00:04:37.170 --> 00:04:40.730
themselves have taken that spec and
created different libraries and

95
00:04:40.730 --> 00:04:43.860
frameworks and implementations,
based off languages and

96
00:04:43.860 --> 00:04:48.800
platforms and the there's so
many different graphical things out there.

97
00:04:48.800 --> 00:04:56.400
So, talking about server side, we actually
don't want to say that right now.

98
00:04:56.400 --> 00:05:01.860
So when we get into GraphQL on
the server side, there's gonna be,

99
00:05:01.860 --> 00:05:03.310
how you handle GraphQL
on the server side and

100
00:05:03.310 --> 00:05:06.350
how you handle on the client side
are two different scenarios.

101
00:05:06.350 --> 00:05:12.200
So, on the server side, the whole purpose
of GraphQL is to create some type of graph

102
00:05:12.200 --> 00:05:17.520
that's based off some shapes that
you are want to expose in API.

103
00:05:17.520 --> 00:05:22.130
And then you need to allow
the client to query that graph

104
00:05:22.130 --> 00:05:23.670
in whatever direction they want.

105
00:05:23.670 --> 00:05:27.890
You have no idea, how the clients gonna
query, and you're gonna find out in little

106
00:05:27.890 --> 00:05:32.250
bit and that's the whole purpose of server
side GraphQL from a client's perspective.

107
00:05:32.250 --> 00:05:35.000
There's other things associated with
GraphQL and server side that we're not

108
00:05:35.000 --> 00:05:37.030
going to cover in this course
that's more advanced things.

109
00:05:37.030 --> 00:05:41.110
And that's like communicating with
like other GraphQL services and

110
00:05:41.110 --> 00:05:44.540
doing service discovery and
meshing APIs together and

111
00:05:44.540 --> 00:05:48.510
all that crazy stuff creating
Federations and stuff like that.

112
00:05:48.510 --> 00:05:49.640
That's a whole another thing.

113
00:05:49.640 --> 00:05:53.880
That's more advanced, for this course
we're focusing on server side GraphQL for

114
00:05:53.880 --> 00:05:58.660
the client,
which is a lot easier to conceptualize.

115
00:05:58.660 --> 00:06:01.490
So for this course, one of the
implementations that we're going to use is

116
00:06:01.490 --> 00:06:04.530
going to be obviously
GraphQL server side in Node.

117
00:06:04.530 --> 00:06:07.920
So this is primarily going to be a Node or
all of it's going to be in Node.

118
00:06:07.920 --> 00:06:11.000
We're gonna be using
a library called Apollo.

119
00:06:11.000 --> 00:06:12.050
Apollo is a company.

120
00:06:12.050 --> 00:06:15.060
Have you ever heard of
a framework called Meteor?

121
00:06:15.060 --> 00:06:17.840
Okay, so the same people that
made Meteor made Apollo,

122
00:06:17.840 --> 00:06:20.540
they kind of just pivoted,
I don't even work on Meteor anymore.

123
00:06:20.540 --> 00:06:25.340
They now do Apollo and Apollo, they have
services that you can use GraphQL for,

124
00:06:25.340 --> 00:06:26.680
but they are very well known for

125
00:06:26.680 --> 00:06:30.370
their open source that they use
to create a lot of GraphQL stuff.

126
00:06:30.370 --> 00:06:33.490
And the library that we're gonna use
is gonna be called Apollo server.

127
00:06:33.490 --> 00:06:35.926
So that's just to give you some
context of what we're gonna be doing.

128
00:06:35.926 --> 00:06:40.580
Now, server side, for
us to actually compose

129
00:06:40.580 --> 00:06:44.470
a GraphQL API, there's a few things that
we're gonna need and this is just for

130
00:06:44.470 --> 00:06:48.710
me to go over you and this is a complete
overview, we're gonna go into more detail

131
00:06:48.710 --> 00:06:50.760
about each one of these things
later on in the course, but

132
00:06:50.760 --> 00:06:53.040
just giving you an overview
of some context.

133
00:06:53.040 --> 00:06:55.810
So first thing is really
something called type definitions.

134
00:06:55.810 --> 00:07:00.260
So like I said, this is a strongly
typed language of a sort,

135
00:07:00.260 --> 00:07:03.680
and because of that you have to create
type definition, so if you've ever used

136
00:07:03.680 --> 00:07:07.220
something like Java or TypeScript
you'll create some types, right?

137
00:07:07.220 --> 00:07:08.120
It's the same thing with GraphQL.

138
00:07:08.120 --> 00:07:11.930
You're gonna create types,
those types are usually

139
00:07:11.930 --> 00:07:15.490
based off on shapes in your database,
Schemas, things like that,

140
00:07:15.490 --> 00:07:18.220
or some other third-party research
you're gonna interact with.

141
00:07:18.220 --> 00:07:20.300
That's what they're usually based off on.

142
00:07:20.300 --> 00:07:22.130
You're also gonna create
something called resolvers.

143
00:07:22.130 --> 00:07:25.199
If you ever built something on a server,
I guess you could think of this as

144
00:07:26.980 --> 00:07:30.410
controllers and the rest API or something
like that, they're responsible for

145
00:07:30.410 --> 00:07:32.650
actually retrieving data
from a data source,

146
00:07:32.650 --> 00:07:35.580
whether it's a database in memory,
Redis or

147
00:07:35.580 --> 00:07:39.890
rest API, wherever the data is, it's
the resolver's job to go fetch that data.

148
00:07:41.390 --> 00:07:45.190
We have query definitions, and
we also have mutation definitions.

149
00:07:45.190 --> 00:07:49.910
These are specific types that allow
us to ask our API for data, or

150
00:07:49.910 --> 00:07:54.200
modify data, whether it's updating,
deleting, or creating things like that.

151
00:07:56.480 --> 00:07:58.970
And then we have like I said,
compositions, so

152
00:07:58.970 --> 00:08:00.320
this is a bit more advanced.

153
00:08:00.320 --> 00:08:05.180
But this is the ability to compose
different APIs together underneath one

154
00:08:05.180 --> 00:08:10.430
GraphQL umbrella and that's something new
that the community the direction is going.

155
00:08:10.430 --> 00:08:13.096
I think GraphQL started off in a way,
this is really great for

156
00:08:13.096 --> 00:08:14.680
client side front end developers.

157
00:08:14.680 --> 00:08:15.960
It's super awesome.

158
00:08:15.960 --> 00:08:18.810
But I think now people are starting to
realize, hold on, this is really good for

159
00:08:18.810 --> 00:08:23.430
back end too, for transporting data
across many different services and

160
00:08:23.430 --> 00:08:27.950
have the GraphQL API sitting in front of
it and have one unified type save API.

161
00:08:27.950 --> 00:08:31.420
There's a lot of benefits, there that
a lot of people are just not realizing.

162
00:08:31.420 --> 00:08:32.900
So that's what that is.

163
00:08:34.570 --> 00:08:37.160
And then all that together
kind of just creates a Schema.

164
00:08:37.160 --> 00:08:39.060
So our type definitions are resolvers or

165
00:08:39.060 --> 00:08:43.851
queries and mutations, all that
comes together and we have a Schema.

166
00:08:43.851 --> 00:08:48.760
Client side, we have queries,

167
00:08:48.760 --> 00:08:54.660
which are what we use to access the data
on our API from the query definitions.

168
00:08:54.660 --> 00:08:59.600
We also have mutations which is how
we want to modify data on our server.

169
00:08:59.600 --> 00:09:03.860
So if we want to create or create or
update or delete, we will do mutation.

170
00:09:03.860 --> 00:09:07.280
And then we have fragments and
we'll talk a little more about fragments.

171
00:09:07.280 --> 00:09:11.980
This is just an overview, but
fragments are just little pieces of shared

172
00:09:11.980 --> 00:09:14.700
queries and mutations so we don't
have to rewrite them all over again.

173
00:09:16.692 --> 00:09:18.340
&gt;&gt; Scott Moss: All right,
so that was a lot.

174
00:09:18.340 --> 00:09:21.190
I wanted to go over that and
get that out the way so

175
00:09:21.190 --> 00:09:22.930
you'll have some context
when we get back to it.

176
00:09:22.930 --> 00:09:25.660
But where does GraphQL fit in?

177
00:09:25.660 --> 00:09:30.280
So I talked about what GraphQL is,
some different moving pieces of it,

178
00:09:30.280 --> 00:09:32.460
how does it fit in to your
architecture right now?

179
00:09:32.460 --> 00:09:34.870
So there's a couple of ways.

180
00:09:34.870 --> 00:09:39.070
One is a traditional GraphQL
server with a connected database.

181
00:09:39.070 --> 00:09:40.840
And I put most greenfields
are gonna have this.

182
00:09:40.840 --> 00:09:43.210
And this is what we're gonna
be doing in this course.

183
00:09:43.210 --> 00:09:45.160
You just gonna have a server.

184
00:09:45.160 --> 00:09:47.730
It's primarily gonna be GraphQL and

185
00:09:47.730 --> 00:09:50.290
it has one data source which
is usually a database.

186
00:09:50.290 --> 00:09:51.540
And that's a traditional thing.

187
00:09:51.540 --> 00:09:54.350
If you're building out a new project with
GraphQL you're most likely going to be

188
00:09:54.350 --> 00:09:55.769
doing this.

189
00:09:55.769 --> 00:09:59.370
The second one is
a GraphQL server as a layer

190
00:09:59.370 --> 00:10:02.250
in front of many other
third party services.

191
00:10:02.250 --> 00:10:06.830
So you can think of if you have a service
or oriented architecture with different

192
00:10:06.830 --> 00:10:11.040
servers everywhere, this GraphQL server
was sit in front of all of them, and

193
00:10:11.040 --> 00:10:13.490
it would unify them with just one API.

194
00:10:13.490 --> 00:10:15.270
So if you go to interact
with any of your services,

195
00:10:15.270 --> 00:10:19.070
instead of going to each one individually,
you would just hit the GraphQL API,

196
00:10:19.070 --> 00:10:25.500
which would allow you to interact
with all of them with just one API.

197
00:10:25.500 --> 00:10:28.750
So that's one way to do it and the next
one is just a hybrid approach where you

198
00:10:28.750 --> 00:10:32.470
have a GraphQL server that's connected to
a database, but it also communicates with

199
00:10:32.470 --> 00:10:37.420
other third party resources via
resolvers so that's a hybrid approach.

200
00:10:37.420 --> 00:10:40.650
There's other ways you can use GraphQL I
mean it's literally their package called

201
00:10:40.650 --> 00:10:43.230
GraphQL anywhere we could use it anywhere.

202
00:10:43.230 --> 00:10:48.070
But these are the three biggest
places I've seen GraphQL use.

203
00:10:48.070 --> 00:10:50.760
I said we're gonna focus
on the first one today.

204
00:10:50.760 --> 00:10:51.430
The most simplest one.

205
00:10:53.530 --> 00:10:55.400
So I talked about a little
bit about the the tools,

206
00:10:55.400 --> 00:10:56.880
we're going to use it with Node.

207
00:10:56.880 --> 00:11:02.000
But basically, for the server side,
we're gonna use an Apollo server.

208
00:11:03.250 --> 00:11:05.110
There's another one called GraphQL Yoga.

209
00:11:05.110 --> 00:11:07.100
If you've ever Google that,
you've probably seen that,

210
00:11:07.100 --> 00:11:09.680
we're not gonna be using that,
one that is also really good.

211
00:11:09.680 --> 00:11:11.670
There's plenty other ones.

212
00:11:11.670 --> 00:11:16.450
As far as services, if you want it to
just get into GraphQL and get something

213
00:11:16.450 --> 00:11:19.610
deployed really quick without having to
write code, you have something called

214
00:11:19.610 --> 00:11:24.520
Amplify from AWS, which basically allows
you to write GraphQL and things like that.

215
00:11:24.520 --> 00:11:25.400
It deploys it for you.

216
00:11:25.400 --> 00:11:27.010
You don't have to do anything.

217
00:11:27.010 --> 00:11:28.000
There's also others.

218
00:11:28.000 --> 00:11:30.580
They used to be some more, but
they kind of just shut down.

219
00:11:30.580 --> 00:11:33.380
And then as far as tools,
there's this thing called Prisma.

220
00:11:33.380 --> 00:11:34.690
And also many other things.

221
00:11:34.690 --> 00:11:37.240
And the reason I'm showing you all this
because you're gonna come across this as

222
00:11:37.240 --> 00:11:40.330
you're working on this curriculum, and
I just want to let you know if you come

223
00:11:40.330 --> 00:11:43.850
across this stuff, this is what you're
gonna see but we're gonna be focusing on

224
00:11:43.850 --> 00:11:47.730
Apollo server specifically,
its implementation of GraphQL

