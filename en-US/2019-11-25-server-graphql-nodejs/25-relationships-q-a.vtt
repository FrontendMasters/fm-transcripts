WEBVTT

1
00:00:01.570 --> 00:00:02.440
&gt;&gt; Scott Moss: Yes?

2
00:00:02.440 --> 00:00:05.990
&gt;&gt; Speaker 2: You said they run
in parallel, do they really?

3
00:00:09.540 --> 00:00:11.640
&gt;&gt; Scott Moss: In this example,
no, they don't run in parallel.

4
00:00:11.640 --> 00:00:16.264
But if you were to send.

5
00:00:16.264 --> 00:00:19.771
So I don't wanna say don't,
because there is another case where,

6
00:00:19.771 --> 00:00:21.875
I don't know if anyone thought of this.

7
00:00:21.875 --> 00:00:27.470
But let's say you had,
let's think about it like this.

8
00:00:27.470 --> 00:00:30.710
Let's say you're resolving
multiple fields on a type.

9
00:00:30.710 --> 00:00:36.090
So we're resolving owner, but we're also
gonna resolve pet dot, I don't know, name.

10
00:00:36.090 --> 00:00:38.660
For some reason, you wanted to capitalize
the name or something like that.

11
00:00:38.660 --> 00:00:39.780
I don't know what you're gonna do to it.

12
00:00:39.780 --> 00:00:42.710
But you also wanna resolve that name,
right?

13
00:00:42.710 --> 00:00:43.210
Okay.

14
00:00:45.365 --> 00:00:49.765
&gt;&gt; Scott Moss: And you have access to
the pet here just like you have access to

15
00:00:49.765 --> 00:00:51.330
the pet here, okay?

16
00:00:53.280 --> 00:00:57.960
But what if you need it the owner,
pet.owner, inside of pet.name,

17
00:00:57.960 --> 00:01:02.660
you needed the result of whatever this
resolves to inside of this one you can't,

18
00:01:02.660 --> 00:01:03.990
because these run in parallel.

19
00:01:05.150 --> 00:01:08.838
These fields that get resolved for
a type, they all run a parallel.

20
00:01:08.838 --> 00:01:13.542
So the pet that you see here is gonna be
the same pet that you see here before

21
00:01:13.542 --> 00:01:18.440
this executes, it's not gonna be
the pet that happens after this.

22
00:01:18.440 --> 00:01:22.767
So that's why I'm hesitant to say like no.

23
00:01:22.767 --> 00:01:25.956
True, that those ones in
the list run serially, but

24
00:01:25.956 --> 00:01:30.088
the fields that get resolved run in
parallel because you might catch

25
00:01:30.088 --> 00:01:35.021
yourself in a point where you're writing
these fill level resolvers that depend

26
00:01:35.021 --> 00:01:39.130
on sibling fill level resolvers and
it just doesn't work.

27
00:01:39.130 --> 00:01:42.480
So I've had to have move forward,
I didn't really understand GraphQL.

28
00:01:42.480 --> 00:01:48.090
So, yeah, just don't depend on
things working in a certain order.

29
00:01:48.090 --> 00:01:52.740
The only order you can guarantee is that,
this is the source of truth.

30
00:01:52.740 --> 00:01:54.990
The query that they send up,
that's the order.

31
00:01:54.990 --> 00:01:56.923
There is no other order
that you can guarantee.

32
00:01:56.923 --> 00:01:58.080
It's pretty crazy, right?

33
00:01:58.080 --> 00:01:58.912
I bet you're thinking like,

34
00:01:58.912 --> 00:02:03.100
it will probably be some
pretty crazy stuff about this.

35
00:02:03.100 --> 00:02:06.149
The whole purpose of them creating this is
that, imagine if you're writing a client,

36
00:02:06.149 --> 00:02:07.922
you're writing something to React or
whatever.

37
00:02:07.922 --> 00:02:11.162
You can just write a query like this, if
you had a component that literally took in

38
00:02:11.162 --> 00:02:14.670
only these fields and that's all
the needed, it's exactly what they needed.

39
00:02:14.670 --> 00:02:16.135
Imagine writing a query like this and

40
00:02:16.135 --> 00:02:18.649
then getting back exactly that
without having to do anything.

41
00:02:18.649 --> 00:02:20.870
You can throw it straight in
your template and it just works.

42
00:02:20.870 --> 00:02:24.030
That's why they made GraphQL,
it was made because of that.

43
00:02:24.030 --> 00:02:26.790
Cuz you can just take data and throw it
in, and you only get back what you needed,

44
00:02:26.790 --> 00:02:29.690
nothing more, you got the formatting,
you're not doing anything.

45
00:02:29.690 --> 00:02:33.190
But now, it's expanding towards like all
the service type of stuff where it's like,

46
00:02:33.190 --> 00:02:35.106
wait, hold on, hold on now.

47
00:02:35.106 --> 00:02:36.640
GraphQL is actually pretty
dope with the server now,

48
00:02:36.640 --> 00:02:38.670
you can go as crazy shit,
we didn't think about that.

49
00:02:38.670 --> 00:02:42.800
It's really good for like ETO, data
pipeline, and all these other crazy stuff,

50
00:02:42.800 --> 00:02:45.560
where you got two services that
don't know about each other.

51
00:02:45.560 --> 00:02:49.280
But if you have a strict
contract between them two, wait,

52
00:02:49.280 --> 00:02:50.890
like a schema, wait GraphQL.

53
00:02:50.890 --> 00:02:53.140
So like they're doing stuff like that now.

54
00:02:53.140 --> 00:02:53.930
It's a lot different.

55
00:02:53.930 --> 00:02:55.750
Yes?
&gt;&gt; Speaker 2: So in the while is it or

56
00:02:55.750 --> 00:03:00.560
like in your workplace, it's important
that you're building relationships between

57
00:03:01.950 --> 00:03:04.470
like these two types like user and pet,

58
00:03:04.470 --> 00:03:08.730
because you're trying to build connections
using the data for your client.

59
00:03:08.730 --> 00:03:10.710
Is that kinda like the approach?

60
00:03:10.710 --> 00:03:11.470
&gt;&gt; Scott Moss: It depends.

61
00:03:11.470 --> 00:03:12.960
It depends on who your APIs for.

62
00:03:12.960 --> 00:03:17.420
If it's a public API, I think you wanna
expose different avenues that allow people

63
00:03:17.420 --> 00:03:19.150
to do different things,
different connections.

64
00:03:19.150 --> 00:03:21.080
But internally for our products,

65
00:03:21.080 --> 00:03:25.750
we build our schema based off
on what the UI needs, right?

66
00:03:25.750 --> 00:03:27.200
It's usually based off a page.

67
00:03:27.200 --> 00:03:29.497
It's like for this page,
we need all this stuff.

68
00:03:29.497 --> 00:03:33.457
Like if there is a settings page, you
might have credit card info, user info,

69
00:03:33.457 --> 00:03:37.790
subscription info, and those are all
different entities on your database.

70
00:03:37.790 --> 00:03:40.600
So you'll make types for all those.

71
00:03:40.600 --> 00:03:44.290
And then you'll make a query that
might just say, give me this page or

72
00:03:44.290 --> 00:03:49.805
you might just make a query that just
says, I don't know, give me subscription

73
00:03:49.805 --> 00:03:53.150
info and I'll link to something else and
you could compose it yourself.

74
00:03:53.150 --> 00:03:56.280
We normally base it off of UI,
because that's the whole point of this.

75
00:03:56.280 --> 00:03:56.980
&gt;&gt; Speaker 2: Yeah, yeah.

76
00:03:56.980 --> 00:03:59.820
&gt;&gt; Scott Moss: We wanna make one
call when this page loads up and

77
00:03:59.820 --> 00:04:00.940
everything just goes into it.

78
00:04:00.940 --> 00:04:03.530
&gt;&gt; Speaker 2: Yeah,
cuz I think why I had that question is cuz

79
00:04:03.530 --> 00:04:06.660
you were mentioning how in
our traditional rest API,

80
00:04:06.660 --> 00:04:10.490
you have to anticipate every combination
or whatever they're going to need.

81
00:04:10.490 --> 00:04:15.307
And so, maybe GraphQL overcomes that
by just pre-building connections in

82
00:04:15.307 --> 00:04:16.709
the same way,
&gt;&gt; Scott Moss: Yeah.

83
00:04:16.709 --> 00:04:19.640
&gt;&gt; Speaker 2: But maybe what you're
saying is, depending on the app,

84
00:04:19.640 --> 00:04:22.460
those are the different
connections that you needed.

85
00:04:22.460 --> 00:04:25.410
&gt;&gt; Scott Moss: Right, a 100%, cuz I
wouldn't just connect everything together.

86
00:04:25.410 --> 00:04:28.030
I wouldn't go in like,
all right, make it a new type.

87
00:04:28.030 --> 00:04:30.350
Let me add a field for
every other type to reference it.

88
00:04:30.350 --> 00:04:32.430
I wouldn't need to do that.

89
00:04:32.430 --> 00:04:34.040
It was like, okay.

90
00:04:34.040 --> 00:04:35.820
Who is using this type and
why do they need it?

91
00:04:35.820 --> 00:04:39.780
You'll write the code in your run into
like, okay, I'm on the profile page and

92
00:04:39.780 --> 00:04:43.100
I absolutely need this thing
that's all way over here.

93
00:04:43.100 --> 00:04:45.470
I can make another query or
I could just add a relationship and

94
00:04:45.470 --> 00:04:47.389
just do it in one query, right?

95
00:04:47.389 --> 00:04:49.427
So basically.

