WEBVTT

1
00:00:00.000 --> 00:00:01.110
&gt;&gt; Scott Moss: Let's
talk about Input Types.

2
00:00:01.110 --> 00:00:03.220
So I've been talking
about these input types.

3
00:00:03.220 --> 00:00:03.780
What are they?

4
00:00:03.780 --> 00:00:04.920
How are they different?

5
00:00:04.920 --> 00:00:08.690
They're literally just
like types of arguments.

6
00:00:08.690 --> 00:00:10.790
That's it.
It's nothing special about them.

7
00:00:10.790 --> 00:00:15.410
They work exactly the same way as types
do, except you can only use them for

8
00:00:15.410 --> 00:00:16.650
arguments.

9
00:00:16.650 --> 00:00:20.290
That is the only difference
between a type, and input type.

10
00:00:20.290 --> 00:00:22.950
They follow the same rules,
they have fills that

11
00:00:22.950 --> 00:00:27.590
will eventually resolve to scholars, and
you can always use this for arguments.

12
00:00:27.590 --> 00:00:29.810
That's basically it.

13
00:00:29.810 --> 00:00:32.000
All the fields on an input type,

14
00:00:32.000 --> 00:00:37.320
eventually have to resolve into a scholar,
but they can also be other input types.

15
00:00:37.320 --> 00:00:39.710
So, what does that mean.

16
00:00:39.710 --> 00:00:42.256
Well, let's make it input type first.

17
00:00:42.256 --> 00:00:46.020
So if we wanted to make an input type for
pets,

18
00:00:46.020 --> 00:00:50.577
let's say we wanna be able to
pass in a filter for pets,

19
00:00:50.577 --> 00:00:55.950
you can filter based off on the type and
the name for some reason.

20
00:00:55.950 --> 00:00:57.660
I don't know,
you wanna be able to something like that.

21
00:00:57.660 --> 00:01:00.480
So, first you would do is
the difference going to input type at

22
00:01:00.480 --> 00:01:04.680
a type is instead of using the type
keyword, you use the input keyword.

23
00:01:07.160 --> 00:01:08.250
And you would give it a name.

24
00:01:08.250 --> 00:01:10.960
I have a convention that I
like to name all my inputs,

25
00:01:10.960 --> 00:01:13.380
because they look very much like types.

26
00:01:13.380 --> 00:01:17.310
And you could give them the same name of
a type, like I could call this input pet.

27
00:01:18.530 --> 00:01:19.997
And this would work.

28
00:01:19.997 --> 00:01:22.518
But isn't that confusing of a type
called pet input called pet,

29
00:01:22.518 --> 00:01:24.022
you wouldn't know which ones which.

30
00:01:24.022 --> 00:01:27.050
So always put the word input
after the name of my input, so

31
00:01:27.050 --> 00:01:31.820
I know this is the input types so
I'll say like pet input, whatever input.

32
00:01:31.820 --> 00:01:35.360
And then from there, it's,
it's the same thing as a type.

33
00:01:35.360 --> 00:01:38.450
So, I wouldn't be able
to filter by a name.

34
00:01:38.450 --> 00:01:39.420
So that's optional.

35
00:01:39.420 --> 00:01:43.400
So I won't put an exclamation,
I want you to filter by a type.

36
00:01:43.400 --> 00:01:44.160
And that's optional.

37
00:01:44.160 --> 00:01:48.140
And so I won't put a string there,
or I won't put an exclamation.

38
00:01:48.140 --> 00:01:51.360
And then inside of pets,
my other conventions I like to do is,

39
00:01:51.360 --> 00:01:55.050
I always like to call my
arguments instead of passing in.

40
00:01:55.050 --> 00:01:58.270
Multiple arguments like
this was just kind of

41
00:01:58.270 --> 00:02:01.280
a pain when you get back
here to the resolvers.

42
00:02:01.280 --> 00:02:06.730
I instead always just pass up one object,
and I always call it input, all right?

43
00:02:06.730 --> 00:02:10.080
I always just call it input, and
you set it to whatever the input type is.

44
00:02:10.080 --> 00:02:12.510
And if it's required,
you put a bang if not, you don't.

45
00:02:12.510 --> 00:02:15.190
In this case, you don't have to
give me a filter if you don't want.

46
00:02:15.190 --> 00:02:18.200
And then in your resolvers,
you always have this looks for input, and

47
00:02:18.200 --> 00:02:19.890
it's always gonna be there.

48
00:02:19.890 --> 00:02:23.830
That's it.
And that's because the name of the key,

49
00:02:23.830 --> 00:02:27.690
of the arguments object in your resolvers
is the same name as the argument name.

50
00:02:28.980 --> 00:02:32.000
And the arguments in the schema,
they match and in hand.

51
00:02:32.000 --> 00:02:35.040
So pet inputs and
object does not have a name and a type.

52
00:02:35.040 --> 00:02:35.940
And that's what this is gonna be,

53
00:02:35.940 --> 00:02:38.159
inputs going to be an object
that has a name and a type.

54
00:02:39.820 --> 00:02:41.442
This has passed through the client.

55
00:02:43.949 --> 00:02:46.879
&gt;&gt; Scott Moss: So if I were to put
exclamation here, then I would,

56
00:02:46.879 --> 00:02:50.720
the client would always have
to send me a pet input.

57
00:02:50.720 --> 00:02:53.130
I could not do that, and
I could put one here.

58
00:02:53.130 --> 00:02:56.300
And now the client can optionally
send me a pet input, but

59
00:02:56.300 --> 00:02:59.130
when they do it better include a name,
or it's gonna break.

60
00:02:59.130 --> 00:03:02.570
So there is a lot of different
scenarios you can do here,

61
00:03:02.570 --> 00:03:03.850
to really figure out your input.

62
00:03:03.850 --> 00:03:05.870
And again, your resolver is nobody.

63
00:03:05.870 --> 00:03:07.270
So, there is no surprises.

64
00:03:07.270 --> 00:03:08.470
You're good to go.

65
00:03:08.470 --> 00:03:11.370
But these are some of
the conventions that I adopted,

66
00:03:11.370 --> 00:03:14.030
because what happens is you start
to have a lot of crazy invitations.

67
00:03:14.030 --> 00:03:16.060
People just start calling
these whatever they want,

68
00:03:16.060 --> 00:03:19.060
and then you have all
these resolvers that.

69
00:03:20.360 --> 00:03:23.160
I have like different names, and
it's like these words scenarios.

70
00:03:23.160 --> 00:03:28.590
So I just decided to call it input and
keep it the same pass an object versus,

71
00:03:28.590 --> 00:03:32.250
having a whole bunch of
other properties in here.

72
00:03:32.250 --> 00:03:32.750
Like that.

