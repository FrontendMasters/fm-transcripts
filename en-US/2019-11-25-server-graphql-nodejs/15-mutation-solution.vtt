WEBVTT

1
00:00:00.870 --> 00:00:02.500
&gt;&gt; Scott Moss: All right, welcome back.

2
00:00:02.500 --> 00:00:06.300
Hopefully everyone had enough
time to create some, or

3
00:00:06.300 --> 00:00:08.300
create a mutation for the pets.

4
00:00:08.300 --> 00:00:10.330
And if you had some more time to explore,

5
00:00:10.330 --> 00:00:14.390
you might have even created some
update mutations, or delete mutations.

6
00:00:14.390 --> 00:00:18.180
But let's just focus on
the creative mutation for pets.

7
00:00:18.180 --> 00:00:20.482
Anybody have any questions before
I get started, or the solution?

8
00:00:23.037 --> 00:00:24.460
&gt;&gt; Scott Moss: All right,
so let's do that.

9
00:00:24.460 --> 00:00:32.860
So what we'll do is make a new type here
in the schema called mutation, like that.

10
00:00:32.860 --> 00:00:36.886
And we'll make one for a new pet, you can
call it whatever you want, no right or

11
00:00:36.886 --> 00:00:38.360
wrong here.

12
00:00:38.360 --> 00:00:40.390
And it's gotta return a pet,
that's always required.

13
00:00:42.050 --> 00:00:47.870
And I'm going to make a new pet input,
NewPetInput,

14
00:00:47.870 --> 00:00:51.380
and that's always gotta
be a name with a string.

15
00:00:51.380 --> 00:00:53.770
And it's always gotta be a type of string.

16
00:00:56.360 --> 00:00:58.600
And let's say this is input, and

17
00:00:58.600 --> 00:01:04.350
it absolutely has to take a new pet as
input, no if, ands, or buts about it.

18
00:01:04.350 --> 00:01:08.673
So that's updating our schema to
have a mutation called new pet,

19
00:01:08.673 --> 00:01:11.902
that takes an argument
with a name called input.

20
00:01:11.902 --> 00:01:15.438
Whose type is a new pet input,
that's required, and

21
00:01:15.438 --> 00:01:19.222
it returns a pet type that is
also non-null or required.

22
00:01:19.222 --> 00:01:21.850
Everybody following me so far, yes?

23
00:01:21.850 --> 00:01:26.360
Why do you need to require
that the pet is return?

24
00:01:26.360 --> 00:01:31.090
Cuz what if the new pet creation fails?

25
00:01:31.090 --> 00:01:34.098
If the new pet creation fails,
that's a good question.

26
00:01:34.098 --> 00:01:38.710
So this non-null thing
does not account for

27
00:01:38.710 --> 00:01:40.710
any errors that might
happen to your resolver.

28
00:01:40.710 --> 00:01:42.900
This is saying if your
resolver did return, so

29
00:01:42.900 --> 00:01:46.580
assuming no errors happened,
it better return a pet.

30
00:01:46.580 --> 00:01:49.890
If an error did happen,
then that error is gonna be thrown and

31
00:01:49.890 --> 00:01:50.950
knock this non-null error.

32
00:01:52.190 --> 00:01:53.053
But yeah, good question.

33
00:01:55.897 --> 00:02:00.190
&gt;&gt; Scott Moss: All right, so
then we will go to our resolvers here.

34
00:02:00.190 --> 00:02:03.420
Uncomment this mutation thing,
and give it the same name,

35
00:02:03.420 --> 00:02:05.710
newPet, just like we did our queries.

36
00:02:07.000 --> 00:02:12.820
We have nothing here, we have an input
here, and we got some context here.

37
00:02:12.820 --> 00:02:18.048
So I'm just gonna return, or
I shall say be very explicit about this.

38
00:02:18.048 --> 00:02:24.158
Pet = ctx.models.pet.create,

39
00:02:24.158 --> 00:02:28.305
I believe is the method.

40
00:02:28.305 --> 00:02:31.416
And it should be able to just
pass an input there, and

41
00:02:31.416 --> 00:02:33.060
I was gonna return the pet.

42
00:02:35.030 --> 00:02:36.550
Pretty simple, let's start this.

43
00:02:39.860 --> 00:02:42.650
All right, nothing broke,
that's always good when nothing breaks, so

44
00:02:42.650 --> 00:02:45.992
it's a good feeling
&gt;&gt; Scott Moss: And

45
00:02:45.992 --> 00:02:48.290
cool, we got a new pet mutation here.

46
00:02:49.460 --> 00:02:52.640
Input looks good,
new pet input, that's non-null.

47
00:02:52.640 --> 00:02:57.020
Pet type looks good, new input,
non-null name, non-null type.

48
00:02:57.020 --> 00:02:59.360
Everything is looking good,
so let's do that.

49
00:02:59.360 --> 00:03:02.678
So make a new mutation here,
and we'll say new pet.

50
00:03:04.814 --> 00:03:10.290
&gt;&gt; Scott Moss: And we'll go ahead and
pass our input, which is an object type.

51
00:03:10.290 --> 00:03:14.300
And it takes a name, Daryl.

52
00:03:14.300 --> 00:03:17.346
I really miss Daryl,

53
00:03:17.346 --> 00:03:23.108
if you hadn't noticed, and a type cat.

54
00:03:23.108 --> 00:03:27.355
So look at the ID, make sure the ID
got created, look at the type,

55
00:03:27.355 --> 00:03:30.440
let me get the created at,
see what happens.

56
00:03:30.440 --> 00:03:32.480
Boom, there we go, got a new path here.

57
00:03:33.630 --> 00:03:37.770
So if we were to go look at the db.json,
we can see that,

58
00:03:37.770 --> 00:03:41.066
here it is,
here's the path that got created.

59
00:03:41.066 --> 00:03:45.108
So you created Daryl, and

60
00:03:45.108 --> 00:03:50.080
it returned to previous Daryl.

61
00:03:51.944 --> 00:03:57.800
No, your mutator,
your query returns three for every ID.

62
00:03:58.850 --> 00:04:00.794
Yeah.
The ID is just three.

63
00:04:00.794 --> 00:04:01.942
Yeah.
Not in a string.

64
00:04:01.942 --> 00:04:05.970
Yeah, I should get rid of [INAUDIBLE]
that's confusing, there we go.

65
00:04:05.970 --> 00:04:11.618
[LAUGH] Let me get rid of that,
I'm sorry, that was really confusing.

66
00:04:11.618 --> 00:04:13.160
Let's run that again there.

67
00:04:13.160 --> 00:04:16.950
There we go, there's another one.

68
00:04:16.950 --> 00:04:20.230
Any questions on the mutation stuff?

69
00:04:20.230 --> 00:04:25.274
So how come that doesn't update then,
instead of why isn't it updating?

70
00:04:25.274 --> 00:04:26.720
Cuz we already have a Daryl that's a cat.

71
00:04:29.130 --> 00:04:32.250
Are you saying why is it not updating
the Daryl that we already had?

72
00:04:32.250 --> 00:04:34.180
Because we didn't write
the resolver to do that.

73
00:04:34.180 --> 00:04:37.280
So if you wanted to do that, so I mean,
let's look at the mutation here,

74
00:04:37.280 --> 00:04:38.440
this mutation.

75
00:04:38.440 --> 00:04:41.833
All it does is create it,
we didn't tell it to update.

76
00:04:41.833 --> 00:04:47.241
If you wanted to do an update,
then I would make another resolver,

77
00:04:47.241 --> 00:04:51.700
and another mutation called update that,
like this.

78
00:04:51.700 --> 00:04:54.769
And this will take in something like that.

79
00:04:54.769 --> 00:04:58.672
It'll take in an input, which is
whatever fields you want to update,

80
00:04:58.672 --> 00:05:00.870
taking the context, stuff like that.

81
00:05:00.870 --> 00:05:06.362
And then I would say pet = ctx dot,

82
00:05:06.362 --> 00:05:10.914
or context.models.pet.

83
00:05:10.914 --> 00:05:14.634
And if I had an update method on here,
which I don't, I would just say update.

84
00:05:14.634 --> 00:05:19.599
And I would say first
find it by the input.id.

85
00:05:19.599 --> 00:05:24.546
And then I wanna use an input.updates,
which are the updates

86
00:05:24.546 --> 00:05:29.636
that I want to get back on the pet and
return that like that.

87
00:05:29.636 --> 00:05:33.360
And then you'd just have to go make
this mutation inside your schema.

88
00:05:33.360 --> 00:05:35.410
So it's because we just
didn't do anything.

89
00:05:35.410 --> 00:05:38.807
I mean, we didn't account for that, we
can do whatever we want in our resolvers.

90
00:05:38.807 --> 00:05:42.700
And we didn't choose to account for that,
we just went ahead and created a new one.

91
00:05:42.700 --> 00:05:44.260
And this is not a real database,

92
00:05:44.260 --> 00:05:47.130
so names and stuff aren't indexed, so
you can just make whatever you want.

93
00:05:50.620 --> 00:05:51.310
Any other questions?

94
00:05:53.976 --> 00:06:00.222
So GraphQL doesn't care about what
these mutations do, and how they do it.

95
00:06:00.222 --> 00:06:03.260
Exactly.
Do any of the frameworks have constructs

96
00:06:03.260 --> 00:06:08.500
for that stuff, or is it you use
bit freewheel to do what you want?

97
00:06:08.500 --> 00:06:10.110
You can do whatever the hell you want.

98
00:06:10.110 --> 00:06:13.090
There's literally nothing,
that's the whole point of it.

99
00:06:13.090 --> 00:06:17.020
The closest you're gonna get to that is
you're gonna get helpers from libraries,

100
00:06:17.020 --> 00:06:20.600
or from frameworks that help
you do whatever you want.

101
00:06:20.600 --> 00:06:26.790
There's things like data loaders that
help with runtime response queries.

102
00:06:26.790 --> 00:06:31.740
There's things like data sources that
Apollo actually provides to help you use,

103
00:06:31.740 --> 00:06:35.710
to interact with third-party rest APIs.

104
00:06:35.710 --> 00:06:39.350
There's bindings to databases like Prisma.

105
00:06:39.350 --> 00:06:40.150
Prisma does that.

106
00:06:40.150 --> 00:06:45.540
Prisma binds to a database, and
gives you like a GraphQL ORM.

107
00:06:45.540 --> 00:06:50.980
So you can basically query your database
using a query, using a GraphQL query.

108
00:06:50.980 --> 00:06:54.300
That sounded really complicated,
but that's what that does.

109
00:06:54.300 --> 00:06:57.950
But yeah, you could do whatever you want,
there's no restrictions around it.

110
00:06:57.950 --> 00:07:03.510
The only restriction is that your
resolver returns the specified type for

111
00:07:03.510 --> 00:07:10.418
the field that it's responsible for,
how you do it doesn't matter.

112
00:07:10.418 --> 00:07:12.513
All in the same lines, admittedly,

113
00:07:12.513 --> 00:07:15.360
my brain conflates GraphQL
with graph database.

114
00:07:16.650 --> 00:07:18.010
Yeah, they kinda work hand in hand, yeah.

115
00:07:18.010 --> 00:07:22.687
Is there any tradeoffs with using
relational database in the graph database?

116
00:07:22.687 --> 00:07:27.180
Are there tradeoffs with trying to use
GraphQL with relational databases?

117
00:07:27.180 --> 00:07:33.090
I mean, do you find yourself butting up
against performance issues with that?

118
00:07:34.710 --> 00:07:37.792
So we're about to get into relations,
I wanna talk about that a little more.

119
00:07:37.792 --> 00:07:40.647
But yes, there are performance issues, but

120
00:07:40.647 --> 00:07:45.700
just like you using a rest architecture,
there is different solutions there.

121
00:07:45.700 --> 00:07:49.519
You have to get a lot more creative with
those solutions, because it's not as

122
00:07:49.519 --> 00:07:53.930
simple as just throwing Redis in front
of your database and calling it a day.

123
00:07:53.930 --> 00:07:55.970
It's literally not that
simple with GraphQL,

124
00:07:55.970 --> 00:07:58.940
because anyone can enter
your graph at any node.

125
00:07:58.940 --> 00:08:00.320
And it's like, what do you do?

126
00:08:00.320 --> 00:08:02.270
You cast a whole response of that query?

127
00:08:02.270 --> 00:08:03.250
Cool, I added a new field.

128
00:08:03.250 --> 00:08:04.514
It's a different query now.

129
00:08:04.514 --> 00:08:07.070
Okay, I must have cached it.

130
00:08:07.070 --> 00:08:11.490
So there's a lot of different
things you have to account for, but

131
00:08:11.490 --> 00:08:16.690
I'll talk about those, the specific
performance stuff in the events course.

132
00:08:16.690 --> 00:08:22.238
But yes, you will have performance issues,
100%, guaranteed.

