WEBVTT

1
00:00:00.710 --> 00:00:01.690
&gt;&gt; Scott Moss: Cool,
so now it's your turn.

2
00:00:02.840 --> 00:00:07.610
So, I'm gonna walk you through the repo,
right click.

3
00:00:07.610 --> 00:00:09.770
So you can kind of see what's going on.

4
00:00:09.770 --> 00:00:12.300
So couple of things in this repo,
if you pull it open, if you not,

5
00:00:12.300 --> 00:00:13.361
just follow along with me.

6
00:00:13.361 --> 00:00:14.940
You're gonna have two main folders here.

7
00:00:14.940 --> 00:00:17.530
You gonna have API folder,
you gonna have a client folder.

8
00:00:17.530 --> 00:00:21.136
The client is when we get to the clients
side of stuff, so not today.

9
00:00:21.136 --> 00:00:24.710
But API folder is where you're
gonna be doing all the work today.

10
00:00:24.710 --> 00:00:28.950
And to around this folder, you're gonna
see a source, you're gonna see some tests,

11
00:00:28.950 --> 00:00:31.894
and if you create a demo file,
you'll see that pop in a source.

12
00:00:31.894 --> 00:00:35.600
I wanna show you the database
right quick because this is

13
00:00:35.600 --> 00:00:36.860
something you won't have to touch.

14
00:00:36.860 --> 00:00:38.090
But I want you to know about it.

15
00:00:38.090 --> 00:00:39.030
So you know what's happening.

16
00:00:39.030 --> 00:00:40.190
So it's not just magic.

17
00:00:40.190 --> 00:00:43.570
We're not actually using a real
database because I think

18
00:00:43.570 --> 00:00:46.380
getting everyone set up on the same
database and having that dependency is

19
00:00:46.380 --> 00:00:49.450
just a lot mental overheard that
gets in the way of learning GraphQL.

20
00:00:49.450 --> 00:00:51.560
So I decided not to have a real database,

21
00:00:51.560 --> 00:00:55.350
instead just use an in memory database,
which is what I'm doing.

22
00:00:55.350 --> 00:00:58.480
And all that is gonna be
stored in a db.json file.

23
00:00:58.480 --> 00:01:00.707
You'll have a user in there,
you'll have some pets.

24
00:01:00.707 --> 00:01:04.292
And that's because we're making a pet
app that allows you to add pets,

25
00:01:04.292 --> 00:01:07.340
and like track their vaccinations,
and stuff like that.

26
00:01:07.340 --> 00:01:09.040
That's what this app is gonna be.

27
00:01:09.040 --> 00:01:10.820
But you won't see that until
we get to the client side.

28
00:01:10.820 --> 00:01:13.050
You're just building the API for it today.

29
00:01:13.050 --> 00:01:15.730
So, all your stuff is gonna
be stored in the db.jason.

30
00:01:15.730 --> 00:01:19.330
This index file here is where we actually
create the models for this database.

31
00:01:19.330 --> 00:01:23.454
Again, you won't be interacting, or
you won't be having to add any code here,

32
00:01:23.454 --> 00:01:24.921
it's just here to show you.

33
00:01:24.921 --> 00:01:29.328
And then you have like these models
that have query methods on them to find

34
00:01:29.328 --> 00:01:32.364
things in the database like findMany,
findOne,

35
00:01:32.364 --> 00:01:35.274
create, for
every single model that you have.

36
00:01:35.274 --> 00:01:38.270
And then in this case all you have
is a user model and a pet model.

37
00:01:38.270 --> 00:01:38.920
That's all we are using.

38
00:01:39.980 --> 00:01:42.623
So all this is completely
obstructed from you and

39
00:01:42.623 --> 00:01:48.391
you won't have to touch it
&gt;&gt; Scott Moss: Any questions on that?

40
00:01:50.854 --> 00:01:52.710
&gt;&gt; Scott Moss: Cool, all right,
that was really fast.

41
00:01:52.710 --> 00:01:54.470
I just don't want you haven't,
think about it.

42
00:01:54.470 --> 00:01:58.460
And then it's also inside the source
folder, you have the resolvers.

43
00:01:58.460 --> 00:02:02.630
You have a schema and
then you have a server.

44
00:02:02.630 --> 00:02:04.420
So what your job is gonna be for

45
00:02:04.420 --> 00:02:09.260
this exercise is your going to have to,
let's go back here.

46
00:02:09.260 --> 00:02:11.460
Define a query type in your schema.

47
00:02:11.460 --> 00:02:14.100
So when I say that I mean
go into the schema file and

48
00:02:14.100 --> 00:02:15.970
you can see that there's nothing in here.

49
00:02:15.970 --> 00:02:17.180
It's literally nothing in here.

50
00:02:17.180 --> 00:02:18.930
You need to define some stuff.

51
00:02:18.930 --> 00:02:20.830
And what do you need to define?

52
00:02:20.830 --> 00:02:22.270
Well, if you go into the database.

53
00:02:22.270 --> 00:02:24.310
You look at the schema.JSON.

54
00:02:24.310 --> 00:02:25.400
You'll see a user schema.

55
00:02:25.400 --> 00:02:29.300
So this is the shape that the database
is expecting the user to be.

56
00:02:29.300 --> 00:02:33.040
So these types of fields,
you also need to define a pet type.

57
00:02:33.040 --> 00:02:36.550
And here's the shape of what
the database expects a pet to be.

58
00:02:36.550 --> 00:02:38.830
So based off the shapes
that I put in JSON,

59
00:02:38.830 --> 00:02:41.980
you need to create them in
GraphQL on your schema.

60
00:02:41.980 --> 00:02:46.136
So use this as a model to
create your types in GraphQL.

61
00:02:46.136 --> 00:02:48.710
So look at these and create those types.

62
00:02:48.710 --> 00:02:56.760
And then you need to create a query
type for getting an array of pets.

63
00:02:56.760 --> 00:03:00.980
So I should be able to retrieve an array
of pets based off of some queries.

64
00:03:00.980 --> 00:03:03.424
So you got to make that query type.

65
00:03:03.424 --> 00:03:07.732
And then you need to
create the resolvers for

66
00:03:07.732 --> 00:03:11.590
that query inside the resolvers file.

67
00:03:11.590 --> 00:03:14.660
So if you go here you can see
that the query object is empty.

68
00:03:14.660 --> 00:03:18.944
So whatever you call your query for
getting an array of pets, you'd have to

69
00:03:18.944 --> 00:03:23.234
put that here and have that function
actually return the value of the pets.

70
00:03:26.946 --> 00:03:27.822
&gt;&gt; Scott Moss: And then from there,

71
00:03:27.822 --> 00:03:30.750
the last thing you have to do is
actually get your server up and running.

72
00:03:30.750 --> 00:03:35.340
So if you go to server js, you can see
this Apollo server instance is empty.

73
00:03:35.340 --> 00:03:37.490
You're actually gonna have to
pass in your type definitions and

74
00:03:37.490 --> 00:03:40.640
your resolvers here to get this to execute
cuz we said the minimum you need to

75
00:03:40.640 --> 00:03:44.180
create a server are gonna be
type definitions and resolvers.

76
00:03:44.180 --> 00:03:45.580
I believe they're already
imported up here.

77
00:03:45.580 --> 00:03:47.670
So it's really simple to
just add them right there.

78
00:03:49.140 --> 00:03:51.620
So what I'm gonna do is I'm gonna walk
through one example of using the in memory

79
00:03:51.620 --> 00:03:53.570
database so you understand how that works.

80
00:03:53.570 --> 00:03:55.140
Then, I'll kinda let you go.

81
00:03:55.140 --> 00:03:57.920
So, if you were hopping to
one of these resolvers,

82
00:03:58.950 --> 00:04:00.499
I'm just gonna make one right quick.

83
00:04:04.854 --> 00:04:08.240
We're gonna talk about some of
the arguments here and the resolvers.

84
00:04:08.240 --> 00:04:13.053
So the first argument that you
are gonna get in a resolver is

85
00:04:13.053 --> 00:04:16.011
gonna be called the initial value.

86
00:04:16.011 --> 00:04:17.924
I'm putting an underscore here and

87
00:04:17.924 --> 00:04:22.400
that's because I don't wanna go too deep
into this until we get to relationships.

88
00:04:22.400 --> 00:04:25.490
But this is what's called
a top level resolver as in.

89
00:04:25.490 --> 00:04:29.180
There's there's nothing
resolving before this

90
00:04:29.180 --> 00:04:32.790
resolver that sounds super complicated,
but the way you can figure that out

91
00:04:32.790 --> 00:04:37.300
is based off your schema because this
field exists on the query object.

92
00:04:37.300 --> 00:04:41.340
I can be guaranteed that there is
nothing that's resolving before it.

93
00:04:41.340 --> 00:04:46.284
For instance, if I were to have
a field that resolve the user, and

94
00:04:46.284 --> 00:04:50.140
then the user had a field called email,
and I was resolving the email field,

95
00:04:50.140 --> 00:04:54.660
well I can be sure that the email field
got resolved after the user object did.

96
00:04:54.660 --> 00:04:57.282
So therefore,
there was a parent resolve before it, and

97
00:04:57.282 --> 00:04:58.873
that's what this value would be.

98
00:04:58.873 --> 00:05:00.990
It would be the value that came before it.

99
00:05:00.990 --> 00:05:05.070
In this case, there's nothing before this
demo, because it exist on a query type,

100
00:05:05.070 --> 00:05:06.680
there is nothing before it.

101
00:05:06.680 --> 00:05:09.200
The root level was over,
you can think of it that way.

102
00:05:09.200 --> 00:05:11.520
So it's initial value it's
probably gonna be no,

103
00:05:11.520 --> 00:05:15.420
unless you set it to something on the
server object, which we didn't talk about.

104
00:05:15.420 --> 00:05:18.240
But you could, you could go to
the server object here, and

105
00:05:18.240 --> 00:05:20.140
you can set an initial value in here, and

106
00:05:20.140 --> 00:05:24.900
that initial value will be the first
argument to every top level resolver.

107
00:05:24.900 --> 00:05:26.420
But we didn't set one so
it's always gonna be no,

108
00:05:26.420 --> 00:05:28.150
someone's gonna put a placeholder here for
underscore.

109
00:05:29.210 --> 00:05:33.570
The second argument in here is
gonna be actually called arguments.

110
00:05:33.570 --> 00:05:37.420
So when we get to the point of using
arguments inside our mutations and

111
00:05:37.420 --> 00:05:39.320
our queries,
this is where they're gonna be passed.

112
00:05:39.320 --> 00:05:43.010
So this allows clients to send up
variables with their queries so

113
00:05:43.010 --> 00:05:45.900
you can do things like patternation or
filtering and sorting.

114
00:05:45.900 --> 00:05:46.970
That's where this is going to happen.

115
00:05:49.310 --> 00:05:50.590
We're not doing that right now.

116
00:05:50.590 --> 00:05:52.600
And then this next thing right
here is going to be what's called

117
00:05:52.600 --> 00:05:54.050
the context object.

118
00:05:55.400 --> 00:05:58.240
So the context object is
exactly what it sounds like.

119
00:05:58.240 --> 00:06:03.217
It's, shared context amongst
all your resolvers basically,

120
00:06:03.217 --> 00:06:07.375
and the way you can do that,
so you go into the server.

121
00:06:07.375 --> 00:06:08.665
You do this object like this.

122
00:06:11.243 --> 00:06:17.966
&gt;&gt; Scott Moss: You pass a context
field like this, which is a function.

123
00:06:17.966 --> 00:06:20.506
And whatever you return here,
that's gonna be the context.

124
00:06:24.291 --> 00:06:27.231
&gt;&gt; Scott Moss: So what you should do
if you want to access the models, and

125
00:06:27.231 --> 00:06:28.880
this is what I recommend.

126
00:06:28.880 --> 00:06:32.550
I recommend grabbing these
models from the database and

127
00:06:32.550 --> 00:06:35.060
passing them on a context like that,

128
00:06:35.060 --> 00:06:40.750
that way you have access to them inside
your resolvers via the same key models.

129
00:06:40.750 --> 00:06:41.640
You don't have to do that way.

130
00:06:41.640 --> 00:06:44.740
I mean, you could just import the models
at the top of the file and use them.

131
00:06:44.740 --> 00:06:45.570
That's up to you.

132
00:06:45.570 --> 00:06:48.220
The reason I like to pass them in like
this is because when you get the testing,

133
00:06:48.220 --> 00:06:49.920
you can just mock\g all this stuff out.

134
00:06:49.920 --> 00:06:55.030
By overriding the arguments, if you import
it then now you're relying on the testing

135
00:06:55.030 --> 00:06:57.930
framework to help you out with mocking
stuff out and it gets more complicated.

136
00:06:57.930 --> 00:07:02.340
So I like for my resolvers I normally
don't import anything at the top of

137
00:07:02.340 --> 00:07:06.520
the resolver files, I try to just
pass everything in via the context.

138
00:07:06.520 --> 00:07:09.210
That way I have complete
control over marketing demo.

139
00:07:09.210 --> 00:07:12.140
So something you either way you're
gonna need access to the models and

140
00:07:12.140 --> 00:07:12.719
your resolvers.

141
00:07:12.719 --> 00:07:14.580
And once you have that,

142
00:07:14.580 --> 00:07:17.860
it's as simple as in your case
since we're gonna be doing pets,

143
00:07:17.860 --> 00:07:22.510
you're gonna say models pet, and there
should be like a fine, mini on there.

144
00:07:22.510 --> 00:07:24.410
Something like that.

145
00:07:24.410 --> 00:07:27.820
And find many takes an object that
filters things out by properties.

146
00:07:27.820 --> 00:07:30.590
If you don't pass anything,
I think it returns everything.

147
00:07:30.590 --> 00:07:32.000
So that's what you're
gonna be interested in.

148
00:07:32.000 --> 00:07:33.370
So how you do that it's totally up to you.

149
00:07:33.370 --> 00:07:34.660
There's no right there's no wrong.

150
00:07:34.660 --> 00:07:36.040
It's totally up to you get lost in it.

