WEBVTT

1
00:00:00.770 --> 00:00:03.225
&gt;&gt; Scott Moss: Resolvers we
talked a little bit about it.

2
00:00:03.225 --> 00:00:07.053
I think this is the part where at least
for me, learned about resolvers and

3
00:00:07.053 --> 00:00:08.500
kinda got into it.

4
00:00:08.500 --> 00:00:12.906
It kinda just changed a lot for me.

5
00:00:12.906 --> 00:00:16.107
Resolvers they're functions
that are responsible for

6
00:00:16.107 --> 00:00:19.452
turning values for
fields that exist on Types in a Schema.

7
00:00:19.452 --> 00:00:22.910
Resolvers execution is dependent
on the incoming client Query.

8
00:00:22.910 --> 00:00:26.810
So I really wanna dive into that a little
bit because I think it's very important

9
00:00:26.810 --> 00:00:29.540
of what I'm trying to talk about here.

10
00:00:30.660 --> 00:00:31.665
So a few things.

11
00:00:34.535 --> 00:00:35.737
&gt;&gt; Scott Moss: One,
the thing to mention is,

12
00:00:35.737 --> 00:00:37.542
I don't remember if I
mentioned earlier on but

13
00:00:37.542 --> 00:00:39.980
now is definitely a good
time to mention it.

14
00:00:39.980 --> 00:00:42.770
GraphQL, only has one endpoint.

15
00:00:44.240 --> 00:00:46.150
There's not many endpoints.

16
00:00:46.150 --> 00:00:49.684
There's there's not like a rest where
you have some resource slash ID and

17
00:00:49.684 --> 00:00:51.802
then you want another resources and other.

18
00:00:51.802 --> 00:00:54.870
No, there's literally only one
endpoint for GraphQL and that's it.

19
00:00:54.870 --> 00:00:58.935
And most of the time,
you can do everything over GET, but

20
00:00:58.935 --> 00:01:02.170
most the time is probably
gonna be over POST.

21
00:01:02.170 --> 00:01:04.860
And that's because GrapQL doesn't
respect HTTP, it doesn't care.

22
00:01:05.920 --> 00:01:07.610
[LAUGH] It does not respect HTTP.

23
00:01:07.610 --> 00:01:10.357
If you got an error back, it's not gonna
give you back a status code of an error,

24
00:01:10.357 --> 00:01:11.590
you still gonna get back at 200.

25
00:01:11.590 --> 00:01:16.430
It doesn't respect HTTP, so
if you have a system based off of that,

26
00:01:16.430 --> 00:01:19.130
you're gonna struggle with GraphQL,
you're gonna have to do some refactoring.

27
00:01:19.130 --> 00:01:22.150
In fact, everything with GraphQL
is based off the response.

28
00:01:22.150 --> 00:01:26.640
So instead of getting back a status code
of 400 or something like that by default,

29
00:01:26.640 --> 00:01:29.740
you might get back an object that has
an error that tells you the code,

30
00:01:29.740 --> 00:01:31.280
then it hears a message.

31
00:01:31.280 --> 00:01:33.084
So you have to look at that stuff.

32
00:01:33.084 --> 00:01:34.808
But yeah, there's only one endpoint, and

33
00:01:34.808 --> 00:01:37.910
then the only thing that's dynamic
is the Query that you send up.

34
00:01:37.910 --> 00:01:40.480
The reason I'm saying
that is because the Query

35
00:01:40.480 --> 00:01:44.070
that the client sends up dictates
what resolvers get executed.

36
00:01:44.070 --> 00:01:47.750
So the only resolvers that get
executed are the ones that are for

37
00:01:47.750 --> 00:01:49.990
the fields that you ask for in your Query.

38
00:01:49.990 --> 00:01:55.540
So if I say I wanna execute the me
Query and I wanna get the email.

39
00:01:55.540 --> 00:01:57.889
In this example, this is a Query
that the client is sending up.

40
00:01:59.040 --> 00:02:03.560
I'm executing the me Query and
I want to get the actual email.

41
00:02:03.560 --> 00:02:06.492
If we go and
look at the resolvers that I created.

42
00:02:06.492 --> 00:02:09.414
In this case I created one resolver for

43
00:02:09.414 --> 00:02:14.090
the entire me field that
returns all these fields.

44
00:02:14.090 --> 00:02:17.652
So I only have one resolver,
I only have one field in this case.

45
00:02:17.652 --> 00:02:19.970
It's always going to run this
resolver if I asked for it.

46
00:02:19.970 --> 00:02:23.220
So if I were to run this,
we get back the result.

47
00:02:23.220 --> 00:02:29.980
But let's say I noticed I have this
friends, this friends Query here.

48
00:02:29.980 --> 00:02:31.350
There's no resolver for it.

49
00:02:31.350 --> 00:02:33.463
But yet GraphQL didn't throw an error
cuz there's no resolver, but

50
00:02:33.463 --> 00:02:35.090
that's because I didn't ask for it.

51
00:02:35.090 --> 00:02:37.260
So therefore didn't even try
to go look for it there.

52
00:02:37.260 --> 00:02:38.758
I didn't ask for friends in the Query,

53
00:02:38.758 --> 00:02:43.620
so therefore, GraphQL didn't even go try
to execute, it doesn't make any sense.

54
00:02:44.920 --> 00:02:48.784
The resolvers only get resolved
based off the Queries that you sent.

55
00:02:48.784 --> 00:02:50.218
And that's basically how it works.

56
00:02:50.218 --> 00:02:53.756
It's going to get a little deeper than
that, I just don't wanna get to it yet

57
00:02:53.756 --> 00:02:56.710
when we start talking about
field level resolvers.

58
00:02:56.710 --> 00:03:01.748
But you can also write a resolver for
each single field that exists on a Type.

59
00:03:01.748 --> 00:03:06.308
Right now we only have a resolver for
a whole field called me, which is

60
00:03:06.308 --> 00:03:11.500
an object type but we can also have
resolvers for the email or the avatar.

61
00:03:11.500 --> 00:03:14.440
And those resolvers won't get executed
unless you ask for that field.

62
00:03:14.440 --> 00:03:17.740
So in this case I'm asking for
the email field.

63
00:03:17.740 --> 00:03:21.370
If I have resolvers for
avatar and friends,

64
00:03:21.370 --> 00:03:23.020
those resolvers won't get executed.

65
00:03:23.020 --> 00:03:25.760
They never will run cuz I didn't ask for
them from the client Query.

66
00:03:26.950 --> 00:03:29.741
So this is kinda the graph
nature of GraphQL.

67
00:03:29.741 --> 00:03:34.091
You are responsible as far as a server
developer for creating nodes and

68
00:03:34.091 --> 00:03:36.800
how they connect with each other.

69
00:03:36.800 --> 00:03:40.240
And you are responsible for
creating resolvers to resolve those nodes.

70
00:03:40.240 --> 00:03:42.100
You're not responsible for sayin,

71
00:03:42.100 --> 00:03:44.950
here's how you can access though,
that's up to the client.

72
00:03:44.950 --> 00:03:47.640
The client says,
here's how I want to access them.

73
00:03:47.640 --> 00:03:51.290
And your server should be able to satisfy
that within the bounds of the schema.

74
00:03:52.620 --> 00:03:56.830
As long as the client sends up something
that satisfies the schema validation,

75
00:03:56.830 --> 00:03:58.960
therefore, they should
be able to retrieve it.

76
00:03:58.960 --> 00:04:02.891
So your creating something that flexible
without having to think of every single

77
00:04:02.891 --> 00:04:03.419
use case.

78
00:04:03.419 --> 00:04:06.665
In rest you would have to think
of that use case ahead of time,

79
00:04:06.665 --> 00:04:08.074
make a controller for it.

80
00:04:08.074 --> 00:04:10.595
Then eventually you'll probably just
get lazy and be like all right,

81
00:04:10.595 --> 00:04:11.930
just pass me a Query string, right?

82
00:04:11.930 --> 00:04:13.908
Just give me a Query string and
I'll take that Query string and

83
00:04:13.908 --> 00:04:16.730
I'll just throw it in SQL, or I'll throw
it in Mongo or something like that.

84
00:04:16.730 --> 00:04:20.030
Well, yeah, that's basically
what GraphQL was doing so for

85
00:04:20.030 --> 00:04:23.210
you don't have to think about it ahead
of time the client just does it.

86
00:04:23.210 --> 00:04:26.410
Okay, so creating resolvers.

87
00:04:26.410 --> 00:04:29.326
Like what went through an early example,

88
00:04:29.326 --> 00:04:34.511
resolvers names must match the exact
field name on your Schema's Types.

89
00:04:34.511 --> 00:04:38.011
So that means a resolver
which is a function,

90
00:04:38.011 --> 00:04:42.072
its name must exactly map
to what's in your Schema.

91
00:04:42.072 --> 00:04:44.735
So in this case I have
a Query type with a me field.

92
00:04:44.735 --> 00:04:48.479
So my resolvers object I have
a Query field and a me field and

93
00:04:48.479 --> 00:04:49.940
that's how it works.

94
00:04:49.940 --> 00:04:54.248
If I change it to something
else you can bet that

95
00:04:54.248 --> 00:04:58.990
it won't even start up,
it was like what is that?

96
00:04:58.990 --> 00:05:05.343
It's basically saying you have a resolver
defined but it's not in the Schema.

97
00:05:05.343 --> 00:05:09.611
So you made a resolver called mes but
the Schema knows nothing about that, so

98
00:05:09.611 --> 00:05:10.970
it's broke.

99
00:05:10.970 --> 00:05:12.740
That's something that Apollo does for
you for free.

100
00:05:12.740 --> 00:05:15.190
It'll check your resolvers
versus your crazy mutations and

101
00:05:15.190 --> 00:05:16.630
see if they match on start up.

102
00:05:16.630 --> 00:05:17.980
You can turn it off if you don't want.

103
00:05:17.980 --> 00:05:20.205
Don't recommend doing it.

104
00:05:20.205 --> 00:05:23.563
But yeah, it's basically doing that check
for you to make sure that they work.

105
00:05:26.046 --> 00:05:28.810
&gt;&gt; Scott Moss: So that's one thing,
they must match exactly the same.

106
00:05:30.310 --> 00:05:33.720
Resolvers must return the value type
declared for the matching field.

107
00:05:33.720 --> 00:05:39.120
So I went over this before, but
in the example that we have the me field

108
00:05:39.120 --> 00:05:44.200
on the Query returns a user type which is
an object as an email avatar and friends.

109
00:05:44.200 --> 00:05:45.032
And this is a string.

110
00:05:45.032 --> 00:05:47.630
This is a string.
This is an array of users.

111
00:05:47.630 --> 00:05:48.960
I satisfied that.

112
00:05:48.960 --> 00:05:53.410
If I don't satisfy this and I ask for
field then it's gonna break.

113
00:05:53.410 --> 00:05:55.640
For instance, if I don't return an avatar,

114
00:05:56.890 --> 00:06:01.060
I'm sorry if I don't return an email,
which, as we know is not know.

115
00:06:06.560 --> 00:06:10.648
And I tried to ask for that email
I'm gonna get back an error because

116
00:06:10.648 --> 00:06:14.299
the resolver didn't resolve
that non-null value for me.

117
00:06:14.299 --> 00:06:18.039
So therefore GraphQL saying
I cannot return null for

118
00:06:18.039 --> 00:06:20.849
non-nullable field, and it breaks.

119
00:06:20.849 --> 00:06:22.700
And that's the resolvers job.

120
00:06:22.700 --> 00:06:24.020
I mean,
I guess you could just come here and

121
00:06:24.020 --> 00:06:27.150
say well, it's not non-null anymore,
I just bypassed it.

122
00:06:27.150 --> 00:06:29.448
Well okay,
you're kinada defeating the purpose.

123
00:06:29.448 --> 00:06:33.227
You really [LAUGH] want your
resolvers to respect your schema and

124
00:06:33.227 --> 00:06:34.805
not the other way around.

125
00:06:34.805 --> 00:06:37.626
Everyone in your company will hate you
if you go around changing the schema,

126
00:06:37.626 --> 00:06:38.211
I promise you.

127
00:06:38.211 --> 00:06:39.190
It is never a good thing.

128
00:06:40.890 --> 00:06:44.026
Guaranteed, everybody get
together agree on the schema,

129
00:06:44.026 --> 00:06:47.070
keep it that way until you
can't keep it that way.

130
00:06:47.070 --> 00:06:49.020
But don't go around change and stuff.

131
00:06:49.020 --> 00:06:50.976
People won't like it.

132
00:06:50.976 --> 00:06:51.608
I promise you.

133
00:06:54.907 --> 00:06:55.569
&gt;&gt; Scott Moss: All right.

134
00:06:59.744 --> 00:07:01.540
&gt;&gt; Scott Moss: And
then resolvers can be async.

135
00:07:01.540 --> 00:07:04.520
And my example is clearly I'll just
I was just returning an object, but

136
00:07:04.520 --> 00:07:05.940
resolvers can be async.

137
00:07:05.940 --> 00:07:07.410
So because they can be an async,

138
00:07:07.410 --> 00:07:10.280
you can retrieve data from pretty
much any source that you want.

139
00:07:10.280 --> 00:07:14.330
I mean, graticule has no idea
where you're getting data from,

140
00:07:14.330 --> 00:07:19.290
whether it's a database, multiple
databases another service, a REST API.

141
00:07:19.290 --> 00:07:22.670
It doesn't know,
it doesn't care just satisfied this shape.

142
00:07:22.670 --> 00:07:25.209
And if you're gonna take
20 seconds to get back and

143
00:07:25.209 --> 00:07:27.498
this resolver, then that's your problem.

144
00:07:27.498 --> 00:07:30.392
Now, you've gotta deal with the Query
complexity of someone DDoS and

145
00:07:30.392 --> 00:07:33.641
you by doing an infinite Query or
something like that, that's your problem.

146
00:07:33.641 --> 00:07:35.980
That's not GraphQL's problem,
you gotta fix that.

147
00:07:35.980 --> 00:07:38.190
So [LAUGH] and that is a thing.

148
00:07:38.190 --> 00:07:40.253
So you can retrieve from any data source,
and

149
00:07:40.253 --> 00:07:42.549
I think this is where
the flexibility comes from.

150
00:07:42.549 --> 00:07:45.726
At least for me,
when I saw this I was like, okay,

151
00:07:45.726 --> 00:07:49.383
you can pretty much mesh
together a whole bunch of stuff.

152
00:07:49.383 --> 00:07:52.413
For instance, if you're app gets
data from your data base but

153
00:07:52.413 --> 00:07:56.142
it also gets data from Stripe to get
your customer's account status to see if

154
00:07:56.142 --> 00:07:58.570
they're still active or whatever.

155
00:07:58.570 --> 00:08:02.404
You could just put that in a resolver and
expose that VN and API and

156
00:08:02.404 --> 00:08:04.890
have like a Stripe status on your schema.

157
00:08:04.890 --> 00:08:07.510
And as far as a client is concerned,
it just came from your server.

158
00:08:07.510 --> 00:08:10.640
But what your server did is actually went
to Stripe and merge it with your data and

159
00:08:10.640 --> 00:08:12.020
created one type.

160
00:08:12.020 --> 00:08:13.590
And it just looks like
it came from the server.

161
00:08:13.590 --> 00:08:16.790
So you can do pretty
interesting stuff like that.

162
00:08:16.790 --> 00:08:20.480
Which I think is really cool because
without that it's a lot more challenging.

163
00:08:20.480 --> 00:08:24.340
You gotta build that system your self and
the guarantees and all that stuff.

164
00:08:26.400 --> 00:08:27.443
Any questions on this?

165
00:08:29.990 --> 00:08:31.291
&gt;&gt; Scott Moss: No?

166
00:08:31.291 --> 00:08:32.701
Okay.

167
00:08:32.701 --> 00:08:37.500
So a schema plus resolvers equal server.

168
00:08:37.500 --> 00:08:42.725
And, I said it earlier, but
the minimum you need for a server is,

169
00:08:42.725 --> 00:08:48.242
you need a schema which has some
typedefs and at least one Query on it.

170
00:08:48.242 --> 00:08:49.810
And then a resolver for that field.

171
00:08:49.810 --> 00:08:51.310
That's exactly what we have here.

172
00:08:51.310 --> 00:08:53.040
We have nothing more.

173
00:08:53.040 --> 00:08:56.366
We have one type definition,
we have one Query.

174
00:08:56.366 --> 00:09:01.400
I don't even need this friends things here
only one and only have a resolver for it.

175
00:09:01.400 --> 00:09:04.310
That's the minimum you need for
working GraphQL API.

176
00:09:04.310 --> 00:09:04.965
That's it.
And

177
00:09:04.965 --> 00:09:09.552
everything else after this is
even to just more of the same or

178
00:09:09.552 --> 00:09:14.622
optimizations as far as speed,
security, and stuff like that.

179
00:09:14.622 --> 00:09:17.200
But this is mostly GraphQL at this point.

180
00:09:18.630 --> 00:09:21.742
Like I said, other than
the caching stuff that gets hard,

181
00:09:21.742 --> 00:09:25.680
from here it's just about getting
creative about how you resolve data and

182
00:09:25.680 --> 00:09:29.315
how do you do advanced things,
how do you organize stuff like that.

183
00:09:29.315 --> 00:09:32.640
But this is mostly how GraphQL works,
is very simple.

184
00:09:32.640 --> 00:09:37.886
And if you really looked at this,
this has nothing to do with the server.

185
00:09:37.886 --> 00:09:39.810
I mean, you could run this anywhere.

186
00:09:39.810 --> 00:09:42.874
If you think about if you had a schema,
some type definitions, and

187
00:09:42.874 --> 00:09:46.283
a map of resolver functions,
you could execute this on any environment.

188
00:09:46.283 --> 00:09:47.560
You can put this on the client.

189
00:09:47.560 --> 00:09:49.210
You can put this wherever you want.

190
00:09:49.210 --> 00:09:53.490
I know people who write CSS in
GraphQL [LAUGH] it's a thing.

191
00:09:53.490 --> 00:09:55.140
You can execute this wherever you want.

192
00:09:55.140 --> 00:09:57.930
People use it to do all
types of crazy stuff.

193
00:09:57.930 --> 00:10:03.240
So this has nothing to do with a server
and data base, is more about resolving and

194
00:10:03.240 --> 00:10:08.860
satisfying a specific shape of data that's
being asked by some third party client,

195
00:10:08.860 --> 00:10:09.980
or something like that.

196
00:10:09.980 --> 00:10:14.400
So pretty interesting if you
think about it in that way.

197
00:10:14.400 --> 00:10:17.441
&gt;&gt; Speaker 2: In a passing comment [COUGH]
about string concatenation being kind of

198
00:10:17.441 --> 00:10:18.518
pain in the butt
&gt;&gt; Scott Moss: Yes.

199
00:10:18.518 --> 00:10:22.107
&gt;&gt; Speaker 2: You're talking about all
of your Queries trying to concatenate

200
00:10:22.107 --> 00:10:25.430
the strings together in this
one file from separate files or

201
00:10:25.430 --> 00:10:29.888
is there-
&gt;&gt; Scott Moss: Yeah, that sucks too.

202
00:10:29.888 --> 00:10:32.280
Yeah [LAUGH] I don't recommend doing that.

203
00:10:32.280 --> 00:10:36.103
If you wanna separate things and put
them in separate files, me, personally,

204
00:10:36.103 --> 00:10:39.200
I would use a .graphql file and
then I would use the file system.

205
00:10:41.130 --> 00:10:46.940
For this type definitions thing here, you
can pass an array of type definitions and

206
00:10:46.940 --> 00:10:48.500
it will just split them together for you.

207
00:10:48.500 --> 00:10:49.870
So it does have to be one string.

208
00:10:49.870 --> 00:10:50.820
So you don't have to do that yourself.

209
00:10:50.820 --> 00:10:52.063
So that's one thing.

210
00:10:52.063 --> 00:10:56.879
But what I was specifically talking
about is if you had to create dynamic

211
00:10:56.879 --> 00:10:59.607
schemas on the fly, based off a model and

212
00:10:59.607 --> 00:11:04.950
having to generate that programmatically
with a string, that is painful.

213
00:11:04.950 --> 00:11:10.800
You can't test it and GraphQL's
very particular about spacing and

214
00:11:10.800 --> 00:11:13.064
all types of characters.

215
00:11:13.064 --> 00:11:14.230
It's very unforgiving.

216
00:11:14.230 --> 00:11:18.597
So I don't recommend doing that if you
were dynamically creating schemas.

217
00:11:18.597 --> 00:11:22.032
If you are dynamically creating schemas,
I recommend using the programmatic

218
00:11:22.032 --> 00:11:25.200
approach based off whatever language
you're creating GraphQL in.

219
00:11:25.200 --> 00:11:27.300
So you'd generate those
schemas dynamically.

220
00:11:27.300 --> 00:11:27.830
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Scott Moss: Yep.

