WEBVTT

1
00:00:00.134 --> 00:00:01.835
&gt;&gt; Scott Moss: We also have interfaces.

2
00:00:01.835 --> 00:00:06.127
Interfaces, if you ever use a type
language, Java, TypeScript, pick one,

3
00:00:06.127 --> 00:00:07.370
it's the same thing.

4
00:00:07.370 --> 00:00:11.270
Abstract Types that can't
be used as field values but

5
00:00:11.270 --> 00:00:14.918
instead used as foundations for
explicit types.

6
00:00:14.918 --> 00:00:19.212
Great for when you have types that share
common fields but differ slightly.

7
00:00:19.212 --> 00:00:21.571
So what does all that mean?

8
00:00:21.571 --> 00:00:28.073
Basically that means if you have two or
more types that share common fields,

9
00:00:28.073 --> 00:00:34.880
but they have like maybe one or two or
three fields that are slightly different,

10
00:00:34.880 --> 00:00:39.370
then you can use an interface
to share those fields.

11
00:00:39.370 --> 00:00:42.401
But not for the sake of brevity
inside of your code because you still

12
00:00:42.401 --> 00:00:45.341
have to provide all the fields
regardless if it's a interface.

13
00:00:45.341 --> 00:00:48.621
But for the sake of your clients,
only asking for

14
00:00:48.621 --> 00:00:52.621
that interface versus having to ask for
individual types or

15
00:00:52.621 --> 00:00:57.821
versus having to make a query for every
single time, you can make one query for

16
00:00:57.821 --> 00:01:02.785
that interface and that interface
covers all the types that belong to it.

17
00:01:02.785 --> 00:01:05.700
So it saves you on queries basically.

18
00:01:05.700 --> 00:01:10.236
So an example of that would be,
so let's say we have a shoe here,

19
00:01:10.236 --> 00:01:13.602
we'll convert shoe to
an interface actually.

20
00:01:13.602 --> 00:01:18.969
So we'll say interface Shoe,
like this, I'll get this stuff,

21
00:01:18.969 --> 00:01:25.714
and use the interface keyword just like
I did there, paste in your fields, cool.

22
00:01:25.714 --> 00:01:32.908
And then from there you can make
types that implement the interface,

23
00:01:32.908 --> 00:01:37.013
if I say type Sneaker implements Shoe.

24
00:01:37.013 --> 00:01:40.314
And like I said, this is not for the sake
of brevity because I still have to put

25
00:01:40.314 --> 00:01:42.756
these fields in here,
you still have to put them there.

26
00:01:42.756 --> 00:01:45.822
You cannot put those fields there,
you still have to put them there.

27
00:01:45.822 --> 00:01:48.846
This is not for out of like
write in these fields again, so

28
00:01:48.846 --> 00:01:50.489
I'm gonna make an interface.

29
00:01:50.489 --> 00:01:54.413
Now, this is so you don't have to make a
whole other query for a shoe, and another

30
00:01:54.413 --> 00:01:58.373
query for sneaker, and another query for
whatever thing is gonna implement it.

31
00:01:58.373 --> 00:02:01.778
You can just make one query for
everything that's a shoe, right?

32
00:02:01.778 --> 00:02:05.435
All right, so if I have a sneaker,
but then let's say a sneaker

33
00:02:05.435 --> 00:02:09.230
has a sport field on it,
which is a string, something like that.

34
00:02:09.230 --> 00:02:14.198
And then you have another type of,
and this might be a,

35
00:02:14.198 --> 00:02:17.121
I don't know, a boot, right?

36
00:02:17.121 --> 00:02:21.674
And a boot is a shoe and
what do boots have?

37
00:02:21.674 --> 00:02:26.940
[LAUGH] Grip, it has grip, I don't know.

38
00:02:26.940 --> 00:02:29.082
I don't really wear boots.

39
00:02:29.082 --> 00:02:33.494
Cool, so all right, so
you can see the sneakers and

40
00:02:33.494 --> 00:02:39.659
the boot both share brand and size,
brand and size from the interface.

41
00:02:39.659 --> 00:02:43.595
So a couple things know here
the interface describes the common field.

42
00:02:43.595 --> 00:02:47.850
Anything that implements an interface has
to put all the common fields in their

43
00:02:47.850 --> 00:02:50.438
definition of they don't
GraphQL will break.

44
00:02:50.438 --> 00:02:52.882
It's not an option,
you have to put them there.

45
00:02:52.882 --> 00:02:56.664
And then you can add whatever you want,
the order doesn't matter, you can put

46
00:02:56.664 --> 00:03:00.903
sport up but above this, it doesn't matter
it's just conventionally you probably put

47
00:03:00.903 --> 00:03:04.418
the shared fields first because it's
the interface so you put it first.

48
00:03:04.418 --> 00:03:10.097
And then put whatever you want,
so you can never query for

49
00:03:10.097 --> 00:03:14.128
a shoe cuz the shoes is an abstract type.

50
00:03:14.128 --> 00:03:18.072
Eventually, a shoe is gonna
resolve to either a sneaker or

51
00:03:18.072 --> 00:03:20.171
it's gonna resolve to a boot.

52
00:03:20.171 --> 00:03:22.799
That's it, it can never be a shoe.

53
00:03:22.799 --> 00:03:29.380
But from the client side, you can ask for
a shoe to get the common fields.

54
00:03:29.380 --> 00:03:34.608
But then if you want something specific
about it, you have to tell GraphQL hey,

55
00:03:34.608 --> 00:03:38.287
but for a boot I want this,
but for a sneaker I want this.

56
00:03:38.287 --> 00:03:40.956
I wanna show what that looks like
that sounded really complicated was

57
00:03:40.956 --> 00:03:41.883
actually a lot easier.

58
00:03:41.883 --> 00:03:43.877
So we shouldn't have to change anything.

59
00:03:43.877 --> 00:03:46.752
We have shoe type here, a shoe type here.

60
00:03:46.752 --> 00:03:47.913
All these returns shoes.

61
00:03:47.913 --> 00:03:50.787
So basically what this means now is
because shoes and abstract type.

62
00:03:50.787 --> 00:03:54.668
We're saying shoes kinda return
an array of either boots or

63
00:03:54.668 --> 00:03:58.948
sneakers, because the shoes
are either now and same thing here.

64
00:03:58.948 --> 00:04:04.175
So let's do that.

65
00:04:04.175 --> 00:04:09.145
And boom, we already get this little, not
so much of an error, but it's more of a,

66
00:04:09.145 --> 00:04:12.917
hey, by the way, so maybe I said
they all have to resolve down.

67
00:04:12.917 --> 00:04:15.241
The shoe has to resolve to
either sneaker or boot.

68
00:04:15.241 --> 00:04:17.019
This warning is telling me,

69
00:04:17.019 --> 00:04:21.323
hey, shoe is missing something
called __resolveType resolver.

70
00:04:21.323 --> 00:04:24.414
This is basically saying,
Apollo is saying, hey,

71
00:04:24.414 --> 00:04:27.307
you didn't teach us what
to do when we get a shoe.

72
00:04:27.307 --> 00:04:28.237
How do we resolve it?

73
00:04:28.237 --> 00:04:29.902
How do we know if the shoe is a sneaker?

74
00:04:29.902 --> 00:04:32.985
How do we know if the shoe is a boot?

75
00:04:32.985 --> 00:04:34.407
That's what it's saying.

76
00:04:34.407 --> 00:04:37.311
So you've got to write a resolver for
that.

77
00:04:37.311 --> 00:04:44.291
So the way you would do that is you just
do a __resolveType underneath the type for

78
00:04:44.291 --> 00:04:48.152
the interface,
which in this case is a shoe.

79
00:04:48.152 --> 00:04:49.782
So for a shoe, I would need it.

80
00:04:49.782 --> 00:04:53.180
__resolveType, which is also a resolver.

81
00:04:53.180 --> 00:04:56.026
And as its first argument
it's going to take the shoe.

82
00:04:56.026 --> 00:04:59.878
So I'm just gonna say shoe, the shoe
could be a boot, it could be a sneaker,

83
00:04:59.878 --> 00:05:02.668
we don't know yet,
it's some object I got resolved.

84
00:05:02.668 --> 00:05:06.708
And depending on this object I need to
determine if this is a show, I'm sorry,

85
00:05:06.708 --> 00:05:08.173
if this is a sneaker or a boot.

86
00:05:08.173 --> 00:05:11.928
So I gotta go look up here like what
could I look at that would tell me?

87
00:05:11.928 --> 00:05:17.035
I guess if there's a hasGrip thing on it,
or something like that,

88
00:05:17.035 --> 00:05:23.621
or this is where you, I mean, I'll make
that for that thing, and that's required.

89
00:05:23.621 --> 00:05:25.827
So cool, if there's a sport owner,
it must be a sneaker.

90
00:05:25.827 --> 00:05:27.186
If there's not a sport owner, it's a boot.

91
00:05:27.186 --> 00:05:29.425
Let's just do that,
that's a quick boolean check.

92
00:05:29.425 --> 00:05:35.045
So what you can do is you can
come down here and you can say,

93
00:05:35.045 --> 00:05:39.983
okay, cool, if Shoe.,
what did I put in there?

94
00:05:39.983 --> 00:05:41.045
&gt;&gt; Speaker 2: Sport.

95
00:05:41.045 --> 00:05:42.075
&gt;&gt; Scott Moss: Sport, there we go.

96
00:05:42.075 --> 00:05:45.642
Shoe.sport, then you can
just put the string,

97
00:05:45.642 --> 00:05:49.213
the exact name of the type,
as you put it up here.

98
00:05:49.213 --> 00:05:51.623
So in this case Sneaker with a capital S.

99
00:05:51.623 --> 00:05:57.775
So I'll say I'm gonna return a Sneaker,
else just return a Boot.

100
00:05:57.775 --> 00:06:02.200
And that's how you tell GraphQL
based on the actual value,

101
00:06:02.200 --> 00:06:06.459
what type to resolve to,
otherwise, it doesn't know.

102
00:06:06.459 --> 00:06:11.010
So if I start the server up again,
I don't get that warning, it goes away,

103
00:06:11.010 --> 00:06:12.398
everything's good.

104
00:06:12.398 --> 00:06:16.261
And if I go back to playground.

105
00:06:20.457 --> 00:06:21.824
&gt;&gt; Scott Moss: I guess I
should add some shoes, so

106
00:06:21.824 --> 00:06:23.485
you can actually see what's happening.

107
00:06:23.485 --> 00:06:25.886
So we have a query.

108
00:06:25.886 --> 00:06:29.055
Here we go, here we go,
we got brand Nike size.

109
00:06:29.055 --> 00:06:32.675
Let's put some sport in here.

110
00:06:32.675 --> 00:06:34.978
Sport would be basketball.

111
00:06:38.629 --> 00:06:44.572
&gt;&gt; Scott Moss: Timberland, size 14 and
then hasGrip, I don't know,

112
00:06:44.572 --> 00:06:50.171
sure I know where Timberland is,
[LAUGH] I'm not sure.

113
00:06:50.171 --> 00:06:51.314
What else, buddy?

114
00:06:51.314 --> 00:06:55.589
So start that again, refresh this, and

115
00:06:55.589 --> 00:06:59.502
we'll run a query to get some shoes.

116
00:06:59.502 --> 00:07:04.650
So shoes and we can say, let's get all
the common fields first on the shoe,

117
00:07:04.650 --> 00:07:06.957
we have a brand and we have a size.

118
00:07:06.957 --> 00:07:11.652
So let's get those first, brand and
see if everything works and size.

119
00:07:11.652 --> 00:07:15.780
It cannot read property brand of
undefined, we're up with that.

120
00:07:17.353 --> 00:07:19.021
&gt;&gt; Scott Moss: Where is that brand?

121
00:07:19.021 --> 00:07:23.101
Let me get rid of this filter sorry,
that was killing us that was another

122
00:07:23.101 --> 00:07:27.910
example
&gt;&gt; Scott Moss: Expected value of type,

123
00:07:27.910 --> 00:07:31.230
sheet type, but receive, man,
I forgot the other types here.

124
00:07:31.230 --> 00:07:38.836
Sheet type Nike, and
I guess I'll add Timberland up there.

125
00:07:41.319 --> 00:07:45.675
&gt;&gt; Scott Moss: Timberland,
that command button is so sticky.

126
00:07:49.430 --> 00:07:51.927
&gt;&gt; Scott Moss: There we go and
add this email.

127
00:07:54.742 --> 00:07:58.486
&gt;&gt; Scott Moss: There we go, and make sure
we don't have any, yeah, okay, cool,

128
00:07:58.486 --> 00:08:04.766
that's not required, perfect
&gt;&gt; Scott Moss: There we go, so cool, so

129
00:08:04.766 --> 00:08:09.533
now we got a Nike, we got Timberland and
we got the common fields, brand and size.

130
00:08:09.533 --> 00:08:11.448
But let's say I wanna get the sport.

131
00:08:11.448 --> 00:08:14.904
So I just typed in sport here,
it's not auto completing.

132
00:08:14.904 --> 00:08:18.431
So I'm not sure what I'm supposed to do.

133
00:08:18.431 --> 00:08:20.164
Well, this is where use
this special syntax.

134
00:08:20.164 --> 00:08:24.791
You use got ..., use the key word on, and

135
00:08:24.791 --> 00:08:28.056
then on the sport or a sneaker.

136
00:08:28.056 --> 00:08:33.300
I wanna get the sport, and
the now I'll get the sport.

137
00:08:33.300 --> 00:08:39.063
If it's on a sneaker and
then I can say ..., on boot,

138
00:08:39.063 --> 00:08:44.105
I wanna get the hasGrip,
and I'll get hasGrip.

139
00:08:44.105 --> 00:08:45.680
And that's how interfaces work.

