WEBVTT

1
00:00:00.480 --> 00:00:01.610
&gt;&gt; Scott Moss: So what are mutations?

2
00:00:01.610 --> 00:00:06.510
It's basically a type on a schema that
defines operations clients can perform to

3
00:00:06.510 --> 00:00:09.940
mutate data, which basically means create,
update, and delete.

4
00:00:09.940 --> 00:00:13.390
So queries are types on the schema that
define operations that a client can

5
00:00:13.390 --> 00:00:14.630
retrieve data.

6
00:00:14.630 --> 00:00:17.638
A mutation is the opposite,
it's basically you're modifying,

7
00:00:17.638 --> 00:00:19.850
the intention is you're
modifying something.

8
00:00:19.850 --> 00:00:23.390
Now, GraphQL can't enforce what
you do inside of a resolver.

9
00:00:23.390 --> 00:00:24.550
You can do whatever you want.

10
00:00:24.550 --> 00:00:27.110
You could make a mutation that
doesn't modify anything, and

11
00:00:27.110 --> 00:00:28.910
just send something down,
like a query does.

12
00:00:28.910 --> 00:00:30.430
But why would you do that?

13
00:00:30.430 --> 00:00:31.270
I don't know.

14
00:00:31.270 --> 00:00:34.880
There's no enforcement, like it doesn't
know what you're doing in the resolver.

15
00:00:34.880 --> 00:00:36.330
That's the intention.

16
00:00:36.330 --> 00:00:39.122
The intention is you
are modifying something.

17
00:00:39.122 --> 00:00:40.752
If you're not, then it's probably a query.

18
00:00:40.752 --> 00:00:43.424
There's also a third thing
called a subscription.

19
00:00:43.424 --> 00:00:45.846
But we're not talking about
subscriptions in this course, that's for

20
00:00:45.846 --> 00:00:46.610
the advanced course.

21
00:00:46.610 --> 00:00:49.105
But most of the time it's
either a query or a mutation.

22
00:00:49.105 --> 00:00:51.966
So mutations are for when you want
to create, update, or delete.

23
00:00:51.966 --> 00:00:55.670
So if you're doing REST,
this will be post, put, and delete.

24
00:00:55.670 --> 00:00:56.603
That's what this is.

25
00:00:58.829 --> 00:01:00.280
&gt;&gt; Scott Moss: So
how do you create mutations?

26
00:01:00.280 --> 00:01:03.250
Well, you define a mutation type on
the schema using the schema definition

27
00:01:03.250 --> 00:01:06.280
language, just like we did with
queries and every other type.

28
00:01:06.280 --> 00:01:06.960
You add fields for

29
00:01:06.960 --> 00:01:10.010
the mutation type, just like we did
with queries and every other type.

30
00:01:11.470 --> 00:01:13.380
You add arguments for mutations.

31
00:01:13.380 --> 00:01:16.230
So most mutations will
probably have arguments.

32
00:01:16.230 --> 00:01:21.107
If you're creating something,
deleting something, or updating something,

33
00:01:21.107 --> 00:01:23.337
you'll probably have an argument.

34
00:01:23.337 --> 00:01:25.450
Otherwise, how do you know
what you are creating,

35
00:01:25.450 --> 00:01:28.709
how do you know what you're deleting,
how do you know what you're updating?

36
00:01:28.709 --> 00:01:32.141
So most of the time,
your mutations are gonna have arguments,

37
00:01:32.141 --> 00:01:36.349
unless there's just this one thing on
the server, and all you gotta do is just

38
00:01:36.349 --> 00:01:39.742
hit it with no arguments to,
I don't know, delete it maybe?

39
00:01:39.742 --> 00:01:42.281
I don't know, you will probably
always need arguments for mutations.

40
00:01:42.281 --> 00:01:44.210
I can't think of a use
case where you wouldn't.

41
00:01:45.320 --> 00:01:46.710
So you probably always have them.

42
00:01:46.710 --> 00:01:47.970
You don't need them.

43
00:01:47.970 --> 00:01:49.013
It's not a requirement.

44
00:01:49.013 --> 00:01:52.615
I'm just logically saying, you will
probably always have arguments there.

45
00:01:52.615 --> 00:01:54.640
Whereas quarters you can get away
with just saying give me everything.

46
00:01:54.640 --> 00:01:55.319
I don't need an argument.

47
00:01:56.450 --> 00:01:59.437
And then the last thing is you need
to create for the resolvers for

48
00:01:59.437 --> 00:02:02.940
the mutation fields, just like you do
with all of the other types, right.

49
00:02:02.940 --> 00:02:04.333
So let's talk about that.

50
00:02:06.607 --> 00:02:09.963
&gt;&gt; Scott Moss: Let me go to
that demo thing one more time.

51
00:02:09.963 --> 00:02:11.413
Here we go.

52
00:02:11.413 --> 00:02:15.183
So if we were to, let me close a lot
of this stuff, a lot of noise.

53
00:02:17.481 --> 00:02:20.640
&gt;&gt; Scott Moss: All right, so
we're gonna make a Mutation here.

54
00:02:20.640 --> 00:02:21.140
And again,

55
00:02:21.140 --> 00:02:24.960
a Mutation is not required, only thing
that's required in a schema is a Query.

56
00:02:24.960 --> 00:02:28.420
You just say type Mutation,
just like this.

57
00:02:28.420 --> 00:02:32.330
And just like Query, GraphQL is
looking for a type called Mutation for

58
00:02:32.330 --> 00:02:34.370
its Mutation type.

59
00:02:34.370 --> 00:02:35.600
So if you want to call it something else,

60
00:02:35.600 --> 00:02:39.970
you have to tell GraphQL, my mutation
type is actually called something else.

61
00:02:39.970 --> 00:02:42.605
But again, I do not recommend doing that.

62
00:02:42.605 --> 00:02:44.510
For the same reasons I don't
recommend doing it for the query.

63
00:02:44.510 --> 00:02:47.790
So we'll just call it mutation and
just stick with that.

64
00:02:47.790 --> 00:02:49.210
And it's the same thing as a query.

65
00:02:49.210 --> 00:02:50.336
Nothing special here.

66
00:02:50.336 --> 00:02:55.584
So I'm this case, if I wanted to create
a new shoe, I would say, cool, I'm gonna

67
00:02:55.584 --> 00:03:00.700
make a mutation called shoe, or new shoe,
or whatever you want, create shoe.

68
00:03:02.210 --> 00:03:03.620
It's gonna take an argument.

69
00:03:03.620 --> 00:03:09.640
It's gonna take some new shoe input,
that's required.

70
00:03:09.640 --> 00:03:12.620
You can't create a new shoe unless you
give me an argument to create one.

71
00:03:12.620 --> 00:03:13.989
So I'm gonna make it required,

72
00:03:13.989 --> 00:03:16.688
there's nothing I can do if you
didn't pass me that argument.

73
00:03:16.688 --> 00:03:21.890
And then it's going to return, you guessed
it, a shoe, that's always gonna be there.

74
00:03:21.890 --> 00:03:26.090
So if this resolver doesn't error out,
you are guaranteed to get a shoe.

75
00:03:26.090 --> 00:03:28.130
If it does error out,
you're gonna see the error.

76
00:03:28.130 --> 00:03:30.270
So that's basically it.

77
00:03:30.270 --> 00:03:32.080
So now you have to define your input type.

78
00:03:33.510 --> 00:03:36.410
So your input type for a new shoe input.

79
00:03:37.570 --> 00:03:41.760
And all new shoes have a brand
which is required, string.

80
00:03:41.760 --> 00:03:45.598
And a size.

81
00:03:45.598 --> 00:03:47.020
Looks like I already have shoes inputs.

82
00:03:47.020 --> 00:03:50.670
So actually I can't use shoes input,
because these aren't required.

83
00:03:50.670 --> 00:03:54.080
These are optional and
I need these to be required.

84
00:03:54.080 --> 00:03:55.650
So I have to make a whole new one.

85
00:03:55.650 --> 00:03:58.180
Even though they
are the exact same fields,

86
00:03:58.180 --> 00:04:01.730
I need these to be required on creation,
but optional on query.

87
00:04:02.890 --> 00:04:06.200
&gt;&gt; Speaker 2: If you had a complex input,
could you extend it, and

88
00:04:06.200 --> 00:04:08.670
then rewrite the required fields?

89
00:04:08.670 --> 00:04:09.290
&gt;&gt; Scott Moss: I wish.

90
00:04:09.290 --> 00:04:10.040
You can't.

91
00:04:10.040 --> 00:04:13.591
I think I actually made an issue on
GitHub about two years ago to do that.

92
00:04:13.591 --> 00:04:15.314
&gt;&gt; Speaker 2: They haven't
listened to you yet.

93
00:04:15.314 --> 00:04:16.505
&gt;&gt; Scott Moss: We talked about it.

94
00:04:16.505 --> 00:04:17.762
We talked about it.

95
00:04:17.762 --> 00:04:19.201
But no you can't.

96
00:04:19.201 --> 00:04:19.958
&gt;&gt; Speaker 2: All right.

97
00:04:19.958 --> 00:04:22.488
&gt;&gt; Scott Moss: Cool, so now we've got our
new shoe input, got the new shoe here.

98
00:04:22.488 --> 00:04:24.985
And then resolvers.

99
00:04:24.985 --> 00:04:28.530
Anyone know the name of the resolver
that I have to put here?

100
00:04:28.530 --> 00:04:29.538
&gt;&gt; Speaker 2: Mutation?

101
00:04:29.538 --> 00:04:30.243
&gt;&gt; Scott Moss: Exactly.

102
00:04:30.243 --> 00:04:31.882
Mutation cuz that's the type.

103
00:04:31.882 --> 00:04:33.004
Just like I did with query.

104
00:04:33.004 --> 00:04:37.729
And then the actual name of the mutation,
which is NewShoe.

105
00:04:37.729 --> 00:04:39.855
This command button is so jammed.

106
00:04:39.855 --> 00:04:42.098
newShoe.

107
00:04:42.098 --> 00:04:45.532
And first argument, nothing here.

108
00:04:45.532 --> 00:04:48.190
Arguments from the client, got the input.

109
00:04:48.190 --> 00:04:50.521
And then you have your context and
stuff like that.

110
00:04:50.521 --> 00:04:52.679
So then over here,
you just create a new shoe.

111
00:04:52.679 --> 00:04:54.290
I don't have any data or
anything like that.

112
00:04:54.290 --> 00:04:57.110
So I'm just gonna return the input
here and just call it a day.

113
00:04:57.110 --> 00:04:58.460
But that's it.

114
00:04:58.460 --> 00:05:00.220
That's how you would create a mutation.

115
00:05:00.220 --> 00:05:02.070
So if I were to start this.

116
00:05:04.650 --> 00:05:08.967
&gt;&gt; Speaker 2: Do names under queries and
mutations conflict?

117
00:05:08.967 --> 00:05:10.543
&gt;&gt; Scott Moss: So
if you had a mutation with the same name-

118
00:05:10.543 --> 00:05:11.640
&gt;&gt; Speaker 2: Called shoe?

119
00:05:11.640 --> 00:05:12.768
&gt;&gt; Scott Moss: No, they don't conflict.

120
00:05:12.768 --> 00:05:15.133
Because the only thing that conflicts.

121
00:05:15.133 --> 00:05:16.563
So when you're inside of a type,

122
00:05:16.563 --> 00:05:19.792
the only thing that conflicts is if you
had a field with the exact same name.

123
00:05:19.792 --> 00:05:23.489
But field names are scoped by
the type that they belong to, so

124
00:05:23.489 --> 00:05:25.670
they don't bleed out.

125
00:05:25.670 --> 00:05:28.440
So you could theoretically have
ten different types in here, and

126
00:05:28.440 --> 00:05:32.070
they all have the exact same field name,
and that would not be a problem.

127
00:05:32.070 --> 00:05:34.760
Cool, so if I go here, refresh this thing.

128
00:05:34.760 --> 00:05:37.090
Back in the demo thing now.

129
00:05:37.090 --> 00:05:38.210
Get rid of these.

130
00:05:38.210 --> 00:05:43.290
If I look at my docks, I should have, you
notice this new section here, mutations.

131
00:05:43.290 --> 00:05:45.540
It's like they knew it was gonna happen.

132
00:05:45.540 --> 00:05:49.940
So this is what I was saying, GraphQL
treats queries and mutations differently.

133
00:05:49.940 --> 00:05:53.080
You don't see a section here for
every type that we have.

134
00:05:53.080 --> 00:05:56.757
You only see a section here for
queries and a section here for mutations,

135
00:05:56.757 --> 00:06:00.209
cuz that's built into the GraphQL spec,
that's a special thing.

136
00:06:00.209 --> 00:06:03.094
It just so
happens we treat them as regular types.

137
00:06:03.094 --> 00:06:06.920
So don't override them unless
you have a good reason to.

138
00:06:06.920 --> 00:06:08.530
Let me see.

139
00:06:08.530 --> 00:06:12.248
Cool, so we see this new
mutation we have here for Shoe.

140
00:06:12.248 --> 00:06:15.524
And what we're gonna do is go ahead and
run that mutation.

141
00:06:15.524 --> 00:06:20.667
The way you do that is you type in
the mutation keyword like this,

142
00:06:20.667 --> 00:06:25.347
and then you hit the brackets
there like that, hit Enter.

143
00:06:25.347 --> 00:06:27.044
And then you type in
the name of the mutation.

144
00:06:27.044 --> 00:06:28.724
In this case, it's newShoe.

145
00:06:28.724 --> 00:06:32.364
newShoe takes some input like that,
got to do that.

146
00:06:32.364 --> 00:06:36.333
And then we need to go ahead and
pass that input, which will be input.

147
00:06:36.333 --> 00:06:43.903
The input for the new shoe is going to be
a brand and a size, they're both required.

148
00:06:43.903 --> 00:06:46.422
So I'm gonna do that, get out of here.

149
00:06:46.422 --> 00:06:51.628
Brand, Jordan, and

150
00:06:51.628 --> 00:06:56.838
size, nine, cool.

151
00:06:56.838 --> 00:07:00.308
And then I can just, I'm returning
the input directly if you saw my resolver.

152
00:07:00.308 --> 00:07:01.917
So I can just ask for
the same stuff and I'll get it back.

153
00:07:01.917 --> 00:07:03.767
I'm not saving the stuff anywhere.

154
00:07:03.767 --> 00:07:07.834
And, oops, I've put nine as a string,
it should be an int.

155
00:07:07.834 --> 00:07:09.038
There we go.

156
00:07:09.038 --> 00:07:11.995
And boom, I get back my Jordans.

157
00:07:11.995 --> 00:07:14.278
So that's a mutation.

158
00:07:14.278 --> 00:07:17.862
You noticde the only difference thing here
with doing a mutation than a query is that

159
00:07:17.862 --> 00:07:20.881
we have to put this keyword mutation
in front of our query object here,

160
00:07:20.881 --> 00:07:23.510
whereas if I didn't do that,
it would think this is a query.

161
00:07:23.510 --> 00:07:27.305
So you can see right there,
cannot query field newShoe on type query,

162
00:07:27.305 --> 00:07:30.310
because new shoe doesn't
exist on type query.

163
00:07:30.310 --> 00:07:32.330
It exists on type mutation.

164
00:07:32.330 --> 00:07:34.740
So you gotta put the mutation
keyword in front of it.

165
00:07:34.740 --> 00:07:37.941
That's the difference between
a mutation and a query for now.

166
00:07:37.941 --> 00:07:41.972
I think this is one point to talk about,
I've had people asked me this before is,

167
00:07:41.972 --> 00:07:45.194
well, if mutations are creating things,
what do they return?

168
00:07:45.194 --> 00:07:50.554
Well, I think that's up to you and
your application and your use case.

169
00:07:50.554 --> 00:07:57.570
So what I've got in the habit of doing is
always returning the thing that I mutated.

170
00:07:57.570 --> 00:07:59.670
So if I created something, I return that.

171
00:07:59.670 --> 00:08:03.020
If I updated something,
I return that after I updated it.

172
00:08:03.020 --> 00:08:05.876
If I deleted something,
I at least return the ID.

173
00:08:05.876 --> 00:08:08.820
And the reason I do that is
because if you're using a client,

174
00:08:08.820 --> 00:08:13.156
you're gonna learn tomorrow, client side
GraphQL implementations like Apollo, they

175
00:08:13.156 --> 00:08:17.450
cache stuff on the client side, like you
would do in Redux and things like that.

176
00:08:17.450 --> 00:08:22.020
They need to know about mutations in
order to update the client side cache.

177
00:08:22.020 --> 00:08:24.511
So if we delete something,
they need to know about what got deleted.

178
00:08:24.511 --> 00:08:26.723
So they might need an ID to
delete it from the cache.

179
00:08:26.723 --> 00:08:29.123
If you created something,
if you don't send that back,

180
00:08:29.123 --> 00:08:30.879
they're just gonna go ask for it anyway.

181
00:08:30.879 --> 00:08:33.764
So you might as well just send it back so
they don't have to ask for it again.

182
00:08:33.764 --> 00:08:35.281
If you updated something, same thing.

183
00:08:35.281 --> 00:08:37.286
You might as well send back
the updated state of that,

184
00:08:37.286 --> 00:08:40.450
otherwise they're gonna have to do
another query and go get it again.

185
00:08:40.450 --> 00:08:43.140
So it really depends on your use case.

186
00:08:43.140 --> 00:08:48.300
But to me, always just get in the habit
of returning the thing that you mutated.

187
00:08:48.300 --> 00:08:52.509
Otherwise, the client that's interested
in this data is gonna have to make

188
00:08:52.509 --> 00:08:56.010
an additional query to get
the mutation that you just applied.

189
00:08:56.010 --> 00:08:58.730
So you might as well just send it back.

190
00:08:58.730 --> 00:08:59.917
There's no standard.

191
00:08:59.917 --> 00:09:01.569
There's nothing stopping you
from doing whatever you want.

192
00:09:01.569 --> 00:09:02.888
But that's just something
that I picked up.

193
00:09:02.888 --> 00:09:06.320
And that's what we're gonna do for
the remainder of the course.

