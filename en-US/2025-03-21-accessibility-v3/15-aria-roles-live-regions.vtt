WEBVTT

1
00:00:00.000 --> 00:00:03.789
&gt;&gt; Jon Kuperman: So outside of labels and
descriptions, ARIA also provides roles,

2
00:00:03.789 --> 00:00:05.189
states and properties.

3
00:00:05.189 --> 00:00:09.075
So roles are really important and
we've kind of discussed them a little bit

4
00:00:09.075 --> 00:00:13.035
before when we were making the div into
a button by giving it a role of button.

5
00:00:13.035 --> 00:00:15.652
But these roles can be
applied to any HTML element.

6
00:00:15.652 --> 00:00:20.208
And here are just a few examples, but they
can be like gifts of the role of button or

7
00:00:20.208 --> 00:00:24.700
checkbox or tree, banner, an autocomplete,
or some button that has a popup.

8
00:00:24.700 --> 00:00:28.484
These are basically indications that
speak directly to the screen reader.

9
00:00:28.484 --> 00:00:31.370
And the screen reader can
kind of help guide the user.

10
00:00:31.370 --> 00:00:34.645
So if you were in a situation where
you had to make a custom checkbox, but

11
00:00:34.645 --> 00:00:38.358
they had checkbox functionality, these
ARIA roles can go a long way with helping

12
00:00:38.358 --> 00:00:41.743
the screen reader tell the user how to
expect to interact with this thing,

13
00:00:41.743 --> 00:00:42.754
like which hotkeys?

14
00:00:42.754 --> 00:00:45.942
Or is there text required to enter, or

15
00:00:45.942 --> 00:00:50.337
is it just an on off interaction,
things like that.

16
00:00:50.337 --> 00:00:53.610
ARIA can also be used in CSS,
which is pretty cool.

17
00:00:53.610 --> 00:00:57.773
So these ARIA properties are very
similar to data attributes in CSS.

18
00:00:57.773 --> 00:00:59.900
You can use them in your CSS selectors.

19
00:00:59.900 --> 00:01:03.632
So one really nice thing, like when
you're building kind of like trees or

20
00:01:03.632 --> 00:01:07.484
navigation or something like that,
you can have the ARIA roles saying which

21
00:01:07.484 --> 00:01:09.852
one is expanded or
which one's not expanded.

22
00:01:09.852 --> 00:01:14.500
So as a screen reader,
user tabs through, it'll say first item,

23
00:01:14.500 --> 00:01:19.077
headphones not expanded,
monitors expanded, whatever it is.

24
00:01:19.077 --> 00:01:22.794
And then you can use those same data tags,
those ARIA tags in your CSS to

25
00:01:22.794 --> 00:01:27.032
do something like maybe display a little
content arrow or something like that.

26
00:01:27.032 --> 00:01:29.692
So ARIA is completely
interoperable with CSS.

27
00:01:29.692 --> 00:01:33.365
Any ARIA attribute or role you apply,
you can reach in CSS and

28
00:01:33.365 --> 00:01:35.103
apply styles accordingly.

29
00:01:35.103 --> 00:01:37.863
One of my absolute favorite
things with ARIA and

30
00:01:37.863 --> 00:01:42.072
what our next exercise will be on,
is this concept of ARIA live regions.

31
00:01:42.072 --> 00:01:44.901
And so this has become more and
more true over

32
00:01:44.901 --> 00:01:49.572
the years that you have these
applications that are extremely dynamic.

33
00:01:49.572 --> 00:01:51.826
One use case that I often give is like,

34
00:01:51.826 --> 00:01:55.360
imagine you're using your Uber
app to book a ride, right?

35
00:01:55.360 --> 00:01:57.308
There's all these different states and

36
00:01:57.308 --> 00:02:00.692
some of them require immediate user
attention and other ones don't.

37
00:02:00.692 --> 00:02:05.307
So for example, your driver's 10 minutes
away, now your driver's nine minutes away.

38
00:02:05.307 --> 00:02:08.221
You don't really need to alert
a user via a screen reader or

39
00:02:08.221 --> 00:02:09.841
assistive technology of that.

40
00:02:09.841 --> 00:02:13.004
Something has changed and
it's worth having visually, and

41
00:02:13.004 --> 00:02:16.177
maybe it is worth announcing,
but it's not vital, right?

42
00:02:16.177 --> 00:02:21.506
Whereas, your driver is here is
an action that is extremely important.

43
00:02:21.506 --> 00:02:23.842
And from the visual side
of the application,

44
00:02:23.842 --> 00:02:26.554
we often don't distinguish these things,
right?

45
00:02:26.554 --> 00:02:30.054
Visually we just change every
minute that they get closer.

46
00:02:30.054 --> 00:02:31.707
We change when they're here, but

47
00:02:31.707 --> 00:02:34.675
we don't really call one out
over the other one necessarily.

48
00:02:34.675 --> 00:02:36.348
Maybe sometimes we do,

49
00:02:36.348 --> 00:02:41.873
the ARIA spec provides this ability to
mark elements as containing live data so

50
00:02:41.873 --> 00:02:45.902
that screen readers can read
out updates as they come in.

51
00:02:45.902 --> 00:02:48.793
So back to the Uber app,
you could take a few different fields.

52
00:02:48.793 --> 00:02:52.805
You could take the minutes away, you could
take the your driver is here field, and

53
00:02:52.805 --> 00:02:55.711
maybe you could take the we found
a driver for you field, and

54
00:02:55.711 --> 00:02:57.999
you can mark all of those
as ARIA live regions.

55
00:02:57.999 --> 00:03:01.695
Meaning that when you use JavaScript to
update those, like an API call comes in

56
00:03:01.695 --> 00:03:05.615
and you update it, the screen reader will
interrupt what's currently going on and

57
00:03:05.615 --> 00:03:08.808
alert the user, hey,
your driver's here now, things like that.

58
00:03:08.808 --> 00:03:14.402
So these are pretty simple, but pretty
powerful APIs where you can build really,

59
00:03:14.402 --> 00:03:19.445
really cool, accessible experiences for
big, dynamic applications.

60
00:03:19.445 --> 00:03:22.834
One of the reasons Live Regions is
one of my favorite APIs is because

61
00:03:22.834 --> 00:03:25.558
the property that goes into
it is called politeness,

62
00:03:25.558 --> 00:03:27.938
which I find a really funny name for
a setting.

63
00:03:27.938 --> 00:03:30.034
So basically you get three options.

64
00:03:30.034 --> 00:03:35.520
You make an ARIA live region and then
you set either assertive, polite or off.

65
00:03:35.520 --> 00:03:38.957
Assertive means interrupt whatever
you're doing right now and announce.

66
00:03:38.957 --> 00:03:41.609
This, I think would be great for
your driver is here, right,

67
00:03:41.609 --> 00:03:43.250
nothing else is as important as that.

68
00:03:43.250 --> 00:03:46.565
Polite would be maybe what you would use,
announce it, but

69
00:03:46.565 --> 00:03:48.565
when the screen reader next idles.

70
00:03:48.565 --> 00:03:51.247
So if the screen reader's
currently reading a paragraph,

71
00:03:51.247 --> 00:03:54.315
it'll wait until that paragraph is
finished and then let you know.

72
00:03:54.315 --> 00:03:57.869
So maybe keeping in our kind of Uber
example, maybe this would be a good thing

73
00:03:57.869 --> 00:04:00.716
when your driver is one minute
closer than they were before.

74
00:04:00.716 --> 00:04:03.971
Only if the app is idling, say, hey,
now they're only seven minutes away.

75
00:04:03.971 --> 00:04:07.340
And then off, you can toggle these
things to not read the update.

76
00:04:07.340 --> 00:04:10.752
So maybe lots of different examples here,
but maybe the user interacts in some way

77
00:04:10.752 --> 00:04:14.274
and says, okay, I don't care about that
anymore, we could turn off these things.

78
00:04:14.274 --> 00:04:19.354
So you get this ARIA Live region, you pick
the kind of politeness setting that you

79
00:04:19.354 --> 00:04:24.434
want, and then from then on, the screen
reader will know to watch those areas and

80
00:04:24.434 --> 00:04:27.891
update by reading out the new
value as updates come in.

81
00:04:27.891 --> 00:04:31.449
So another example that we could
imagine this is very good for

82
00:04:31.449 --> 00:04:34.459
is like imagine some sports application,
right?

83
00:04:34.459 --> 00:04:37.173
And this keeps track of all your
favorite teams and their matches and

84
00:04:37.173 --> 00:04:38.707
their scores or something like that.

85
00:04:38.707 --> 00:04:43.183
And people really like to watch these
live in real time while the matches

86
00:04:43.183 --> 00:04:44.088
are going on.

87
00:04:44.088 --> 00:04:47.510
And so you could imagine you have
this app, this HTML and you have some

88
00:04:47.510 --> 00:04:51.583
JavaScript and the JavaScript's hitting
an API or maybe it's got web sockets and

89
00:04:51.583 --> 00:04:55.083
it's getting pushed new information and
then it's updating the UI.

90
00:04:55.083 --> 00:04:57.936
For a visual experience,
it's very good as it is, but

91
00:04:57.936 --> 00:05:00.914
maybe you add some comes in big or
there's an explosion or

92
00:05:00.914 --> 00:05:04.096
it comes in green and
then it settles, something like that.

93
00:05:04.096 --> 00:05:08.252
So how do we make an equally good
experience for non sighted users, for

94
00:05:08.252 --> 00:05:10.091
people using screen readers?

95
00:05:10.091 --> 00:05:12.734
And you can think about ways that
you could use live regions for this.

96
00:05:12.734 --> 00:05:16.348
So if you were to take those regions
like where the scores are or

97
00:05:16.348 --> 00:05:20.188
where the latest news article is,
or where the latest update is.

98
00:05:20.188 --> 00:05:23.474
And you were to wrap those in live
regions, like we can see at the top div

99
00:05:23.474 --> 00:05:27.433
ARIA Live polite, then that means that
anything inside of there, when it changes,

100
00:05:27.433 --> 00:05:30.758
when the markup changes, the values
will be read out loud to the user.

101
00:05:30.758 --> 00:05:32.296
So I think these are pretty creative.

102
00:05:32.296 --> 00:05:34.816
You can start thinking of different
combinations like maybe this is polite and

103
00:05:34.816 --> 00:05:36.742
this is assertive, or
maybe the whole thing is assertive.

104
00:05:36.742 --> 00:05:43.762
Again, I think basically the ARIA bit
here has the functionality that it has.

105
00:05:43.762 --> 00:05:47.208
And then it's up to you, playing with
the JavaScript to change the DOM at

106
00:05:47.208 --> 00:05:49.992
the cadence that you want,
with the values that you want.

107
00:05:49.992 --> 00:05:52.466
And whatever you change it to,
ARIA will read that.

