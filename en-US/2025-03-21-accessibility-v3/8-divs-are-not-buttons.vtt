WEBVTT

1
00:00:00.160 --> 00:00:05.840
Let's get into this DIVs soup kind
of debate that I'm a big fan of.

2
00:00:05.840 --> 00:00:10.232
So this is from an Accessibility Weekly
article I saw, DIVs are not buttons.

3
00:00:10.232 --> 00:00:13.987
And this has been one of the most classic
and kind of time honored debates of

4
00:00:13.987 --> 00:00:17.137
accessibility is showing people
that use DIVs to be buttons or

5
00:00:17.137 --> 00:00:20.800
DIVs to be checkboxes and
all the problems therein.

6
00:00:20.800 --> 00:00:24.400
So let's make a button with a DIV,
the thing that you're not supposed to do.

7
00:00:24.400 --> 00:00:26.064
But I hope it works as a nice exercise,

8
00:00:26.064 --> 00:00:28.464
like a mental exercise to
see how much goes into this.

9
00:00:28.464 --> 00:00:32.610
So, we take a div and we give it an on
click listener and it says click me.

10
00:00:32.610 --> 00:00:35.779
And then we add some style to it, and it
looks like a button and you click it, and

11
00:00:35.779 --> 00:00:38.370
it does a button thing, great, we're done.

12
00:00:38.370 --> 00:00:39.906
So what are we missing here?

13
00:00:39.906 --> 00:00:43.468
So one thing we're missing is that
screen readers will not know that it's

14
00:00:43.468 --> 00:00:44.578
clickable, right?

15
00:00:44.578 --> 00:00:48.096
There's no way that a screen reader would
tell you that the DIV is interactable

16
00:00:48.096 --> 00:00:51.018
because screen readers don't
read into the onclicklistener.

17
00:00:51.018 --> 00:00:52.290
They don't do anything like that.

18
00:00:52.290 --> 00:00:54.800
So if you wanted to tell a screen
reader that it was clickable,

19
00:00:54.800 --> 00:00:56.804
all you'd have to do,
is add an aria role to it.

20
00:00:56.804 --> 00:01:00.660
And so with aria, we say hey, this
DIV's role is button and that's great.

21
00:01:00.660 --> 00:01:03.802
Now the screen reader will say hey,
you've hit a button, and

22
00:01:03.802 --> 00:01:06.284
the button's text is click me, excellent.

23
00:01:06.284 --> 00:01:09.362
Okay, but problem here is keyboard
only users can't get to it,

24
00:01:09.362 --> 00:01:11.364
because DIVs aren't tabable, right?

25
00:01:11.364 --> 00:01:12.460
You can't tab over to a DIV,

26
00:01:12.460 --> 00:01:15.276
otherwise you'd be tabbing on all
these like structural elements.

27
00:01:15.276 --> 00:01:17.858
And so we'll get into this
a little bit more later, but

28
00:01:17.858 --> 00:01:21.100
if you want an element to be tabable,
you have to give it tab index.

29
00:01:21.100 --> 00:01:22.370
So quite simple there too.

30
00:01:22.370 --> 00:01:26.164
So okay, so we take the thing, we give it
an on click listener, we give it an aria

31
00:01:26.164 --> 00:01:29.538
roll a button and a tab index and
now a keyboard only user can get to it.

32
00:01:29.538 --> 00:01:31.471
A screen reader will tell
you it's a button, and

33
00:01:31.471 --> 00:01:33.506
it does the button thing
where you click on it.

34
00:01:33.506 --> 00:01:34.839
Okay, but we've got another issue,

35
00:01:34.839 --> 00:01:36.706
the keyboard only users can't click on it,
right?

36
00:01:36.706 --> 00:01:37.782
They're keyboard only.

37
00:01:37.782 --> 00:01:41.544
So we need to make sure that all of these
DIV buttons not only have the on click

38
00:01:41.544 --> 00:01:44.610
listener, but
they also need an on key up listener.

39
00:01:44.610 --> 00:01:46.066
This is the way that buttons work, right?

40
00:01:46.066 --> 00:01:47.956
You can go to any button and
you can hit space on it, and

41
00:01:47.956 --> 00:01:49.354
it'll interact with the button.

42
00:01:49.354 --> 00:01:50.450
Okay, so we're getting there.

43
00:01:50.450 --> 00:01:53.495
So we've got a div, we've got the tab
index for keyboard only users,

44
00:01:53.495 --> 00:01:56.592
the key up for keyboard only users,
we've got our on click listener and

45
00:01:56.592 --> 00:01:58.370
our roll of button, amazing.

46
00:01:58.370 --> 00:02:01.463
Okay, but the problem here is that
screen readers will tell you that

47
00:02:01.463 --> 00:02:04.673
the button is interactable,
it's not just that it's a button that.

48
00:02:04.673 --> 00:02:08.526
When a screen reader hits a button, it'll
read the value of the button and tell you,

49
00:02:08.526 --> 00:02:10.690
like, button submit or
something like that.

50
00:02:10.690 --> 00:02:13.385
So we wanna accomplish that
similar thing now with our DIV.

51
00:02:13.385 --> 00:02:16.117
So we can do that using the ARIA
label that we just learned.

52
00:02:16.117 --> 00:02:19.683
So we could either have aria label,
click me, or we could have aria label and

53
00:02:19.683 --> 00:02:21.990
a little bit of a better description.

54
00:02:21.990 --> 00:02:25.187
And so I hope that this kinda gets
you into the mindset of like,

55
00:02:25.187 --> 00:02:27.686
I'm pretty sure this gets
us all the way there.

56
00:02:27.686 --> 00:02:32.676
I think the only thing that we're 100%
missing here is that buttons in CSS

57
00:02:32.676 --> 00:02:36.678
they have strong focus rings,
in all the browsers, right?

58
00:02:36.678 --> 00:02:40.133
For visual indicators that it's
highlighted as you're tabbing through.

59
00:02:40.133 --> 00:02:44.096
So it wouldn't be in the HTML necessarily
but, I think the only thing that we're

60
00:02:44.096 --> 00:02:48.000
missing here is, some really good style
attributes to make sure that on hover,

61
00:02:48.000 --> 00:02:51.906
on focus, on select, they all have very
obvious visual indicators which would

62
00:02:51.906 --> 00:02:54.734
probably bloat this code
example to being quite large.

63
00:02:54.734 --> 00:02:57.950
But those are like the 6 things
that you would need to do,

64
00:02:57.950 --> 00:03:02.726
in order to relatively guarantee that your
DIV would work the same way as a button.

65
00:03:02.726 --> 00:03:06.358
Or you could literally just use a button
and just have your one on click listener.

66
00:03:06.358 --> 00:03:09.413
The button will automatically wire up
the key, press to the click listener,

67
00:03:09.413 --> 00:03:12.014
it'll read it, it'll give it tab index,
all of those things.

68
00:03:12.014 --> 00:03:16.491
So, there's quite a bit sometimes unseen
with HTML elements, and I think button's

69
00:03:16.491 --> 00:03:20.408
actually kind of a simpler one than
date picker or something like that, but

70
00:03:20.408 --> 00:03:24.156
kinda goes to show how much power
there is in just these HTML elements.

71
00:03:24.156 --> 00:03:26.764
And it also saves you quite a bit of
JavaScript that you have to maintain.

72
00:03:26.764 --> 00:03:29.892
One of the most contentious ones
is Twitter's DIV soup, right.

73
00:03:29.892 --> 00:03:31.836
This has been true since I was there,

74
00:03:31.836 --> 00:03:35.977
and we did the rewrite into react from our
Ruby on Rails app and people started as

75
00:03:35.977 --> 00:03:39.679
the new mobile app launched, and
people were playing around with it,

76
00:03:39.679 --> 00:03:43.614
they started opening the Inspector or
opening the View, code, source.

77
00:03:43.614 --> 00:03:47.101
And they would see millions and
millions and millions of DIVs.

78
00:03:47.101 --> 00:03:49.841
And so people immediately went out and
they said,

79
00:03:49.841 --> 00:03:54.219
Twitter's website is inaccessible, but
this isn't necessarily true, right?

80
00:03:54.219 --> 00:03:56.514
It is DIV soup, and
it is kind of a mess to look at, and

81
00:03:56.514 --> 00:04:00.254
I do think it would be better if it wasn't
DIV soup, but it's not necessarily true.

82
00:04:00.254 --> 00:04:04.417
So Twitter uses this technology,
that allows you to generate a website for

83
00:04:04.417 --> 00:04:05.814
react native or for web.

84
00:04:05.814 --> 00:04:08.646
And that's never been used,
the react native side.

85
00:04:08.646 --> 00:04:13.301
But it is possible in doing so, there's
all these elements that you don't get in

86
00:04:13.301 --> 00:04:15.464
a native app that you do get in HTML.

87
00:04:15.464 --> 00:04:19.472
And so the way that it works is actually
it works the way that we just saw before.

88
00:04:19.472 --> 00:04:23.372
So it takes all of these elements that
don't exist in one operating system and

89
00:04:23.372 --> 00:04:24.872
do exist in the other one, and

90
00:04:24.872 --> 00:04:28.112
fully recreates them using standard
items like DIVs or spans and

91
00:04:28.112 --> 00:04:32.176
a bunch of JavaScript, and a bunch of
styling, and a bunch of things like that.

92
00:04:32.176 --> 00:04:35.462
And so if you were to browse the Twitter
website with a screen reader,

93
00:04:35.462 --> 00:04:38.484
you would actually get a very
excellent accessibility story.

94
00:04:38.484 --> 00:04:42.128
But it would be very hard to tell from
looking at it because it's DIV soup.

95
00:04:42.128 --> 00:04:45.358
So I guess my point here
is I'm anti DIV soup,

96
00:04:45.358 --> 00:04:51.336
with caveats that it is possible to
recreate, there's no magic to HTML, right?

97
00:04:51.336 --> 00:04:54.038
It is possible to recreate
all this functionality, but

98
00:04:54.038 --> 00:04:57.427
I think if you're ever going to stray
from the semantic HTML buttons,

99
00:04:57.427 --> 00:05:00.456
you should know what you're
getting yourself signed up for.

100
00:05:00.456 --> 00:05:03.743
You really do have to handle all these
cases, the different key presses,

101
00:05:03.743 --> 00:05:06.896
the different screen reader interactions,
everything like that.

102
00:05:06.896 --> 00:05:10.360
&gt;&gt; Speaker 1: Does this story change
a little bit with web components?

103
00:05:10.360 --> 00:05:11.912
&gt;&gt; Speaker 1: In what way?

104
00:05:11.912 --> 00:05:15.056
&gt;&gt; Speaker 1: Like to encapsulate
the DIV soup and make it look semantic.

105
00:05:15.056 --> 00:05:16.032
&gt;&gt; Speaker 1: Yeah, that's a great idea.

106
00:05:16.032 --> 00:05:19.249
&gt;&gt; Speaker 1: Yeah, so I think web
components could go a long way here,

107
00:05:19.249 --> 00:05:23.032
I'm not at all in favor of the output
that Twitter's markup has.

108
00:05:23.032 --> 00:05:27.668
Yeah, I think you could wrap, you could
make great web components that were like

109
00:05:27.668 --> 00:05:32.360
native acceptable button, or native
acceptable clickers, things like that.

110
00:05:32.360 --> 00:05:36.008
So, I think you could do a great
job with kind of cleaning that up.

111
00:05:36.008 --> 00:05:38.208
I guess it's a little
bit more philosophical,

112
00:05:38.208 --> 00:05:41.000
like how much you care about
your source being easy to read.

113
00:05:41.000 --> 00:05:43.943
I would prefer it be a lot better, but
this is what they ended up going with.

