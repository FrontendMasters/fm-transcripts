WEBVTT

1
00:00:00.000 --> 00:00:03.354
&gt;&gt; Jon Kuperman: Coming up on our kind
of final section here, and I think a lot

2
00:00:03.354 --> 00:00:07.581
of this is now that we got all this
great information about focusability and

3
00:00:07.581 --> 00:00:10.220
ARIA roles and tab content and
all this stuff.

4
00:00:10.220 --> 00:00:13.036
How do we ensure that our
code bases are up to par and

5
00:00:13.036 --> 00:00:15.330
how do we ensure that they stay up to par?

6
00:00:15.330 --> 00:00:18.716
So kind of broken this
section of testing and

7
00:00:18.716 --> 00:00:22.475
tooling down into a few
different subsections.

8
00:00:22.475 --> 00:00:25.990
One of them being like,
how do you manually audit your website?

9
00:00:25.990 --> 00:00:27.788
How do you check that things are working?

10
00:00:27.788 --> 00:00:32.260
One of them being, how can you set up
CI/CD to guarantee that your website stays

11
00:00:32.260 --> 00:00:34.614
accessible as you keep building things?

12
00:00:34.614 --> 00:00:39.471
And then another one is Linters or
Authoring tools, basically,

13
00:00:39.471 --> 00:00:42.296
as you're kind of writing your code,

14
00:00:42.296 --> 00:00:46.287
what tools are out there to
help you stay accessible?

15
00:00:46.287 --> 00:00:49.479
So gonna talk about a lot of things,
there's quite a lot of

16
00:00:49.479 --> 00:00:53.928
competition in this space and honestly
I've used most of it and it's all great.

17
00:00:53.928 --> 00:00:57.686
So if I recommend a certain auditing
tool and you have another one that you

18
00:00:57.686 --> 00:01:02.014
like to use, please don't, I try to go by
most popular, not by best necessarily.

19
00:01:02.014 --> 00:01:05.660
So if you've got some workflow that works
for you, that's great, the standard

20
00:01:05.660 --> 00:01:09.430
is the standard, so if they're auditing
the standard, then that's fantastic.

21
00:01:09.430 --> 00:01:13.459
&gt;&gt; Student 1: Cool, so one company
that I just like a lot is Deque.

22
00:01:13.459 --> 00:01:17.902
&gt;&gt; Jon Kuperman: They've been in the space
forever, they do all sorts of cool tools.

23
00:01:17.902 --> 00:01:23.475
They have a browser DevTool
called Axe DevTools.

24
00:01:23.475 --> 00:01:27.079
They also have a JavaScript
library that does the same things,

25
00:01:27.079 --> 00:01:29.870
I just can't say enough
good things about them.

26
00:01:29.870 --> 00:01:33.052
They do accessibility consulting,
they make all sorts of cool tools,

27
00:01:33.052 --> 00:01:34.597
they give cool conference talks.

28
00:01:34.597 --> 00:01:36.618
If you're looking for
accessibility experts,

29
00:01:36.618 --> 00:01:39.586
I think they're one of my highest
recommendations, they're great.

30
00:01:39.586 --> 00:01:43.714
So they have this tool called Axe,
I find it extremely good.

31
00:01:43.714 --> 00:01:46.896
It catches as much,
basically as much as you can catch

32
00:01:46.896 --> 00:01:51.085
automatically as far as accessibility
violations go and it's free.

33
00:01:51.085 --> 00:01:55.435
They have premium services where you can
hook things into regular runs and testing,

34
00:01:55.435 --> 00:01:57.158
but it's just a very great tool.

35
00:01:57.158 --> 00:02:01.323
So you can go ahead and get this as
an extension for Opera or Firefox or

36
00:02:01.323 --> 00:02:04.772
Chrome or whatever your browser is and
it's very nice.

37
00:02:04.772 --> 00:02:08.495
Google DevTools,
which now applies to the Edge DevTools and

38
00:02:08.495 --> 00:02:12.153
all of the Google based browsers
like DuckDuckGo on Brave.

39
00:02:12.153 --> 00:02:16.248
They come with Lighthouse and
we'll do a little Lighthouse look soon.

40
00:02:16.248 --> 00:02:19.549
But essentially via Lighthouse you
can run an accessibility audit.

41
00:02:19.549 --> 00:02:24.397
Here is a screenshot I took of just a page
where it is giving you a score out of 100,

42
00:02:24.397 --> 00:02:26.546
as well as detailed instructions for

43
00:02:26.546 --> 00:02:29.972
what it considers the kind
of accessibility violations.

44
00:02:29.972 --> 00:02:33.325
And each one of them links to a nice
documentation page where you can kind of

45
00:02:33.325 --> 00:02:34.149
see how to fix it.

46
00:02:34.149 --> 00:02:38.124
These are quite similar acts in
Lighthouse, they're both great.

47
00:02:38.124 --> 00:02:42.632
There's also this really cool one and
some of these more fun ones, the WebAIM,

48
00:02:42.632 --> 00:02:47.212
which is the non-profit that we've been
using for our rules and instructions,

49
00:02:47.212 --> 00:02:48.718
has this great wave tool.

50
00:02:48.718 --> 00:02:50.641
There was a really other cool one,

51
00:02:50.641 --> 00:02:54.033
which I think is called totally
by the folks at Khan Academy.

52
00:02:54.033 --> 00:02:57.419
I think they've stopped supporting it
as much, but I kinda like these ones

53
00:02:57.419 --> 00:03:00.377
where they decorate your website
with where the violations are,

54
00:03:00.377 --> 00:03:02.602
kinda makes it very easy
to reason about and see.

55
00:03:02.602 --> 00:03:06.574
Again, not recommending one over another,
but just really like the idea of having

56
00:03:06.574 --> 00:03:09.821
some tool in your toolkit that you
regularly use to audit your site.

57
00:03:09.821 --> 00:03:14.656
And it'll catch a lot of these easy
to spot and easy to automate errors,

58
00:03:14.656 --> 00:03:15.713
which is nice.

59
00:03:15.713 --> 00:03:19.620
Moving on to like, okay, so
let's say we've got that done.

60
00:03:19.620 --> 00:03:21.326
We've done some audits,
we fixed some things.

61
00:03:21.326 --> 00:03:24.827
We know our website's in a pretty good
spot and now we wanna keep it that way.

62
00:03:24.827 --> 00:03:27.756
So there's lots of cool things
that you can add to your CI/CD,

63
00:03:27.756 --> 00:03:31.460
whether it's like a Jenkins job or a
GitHub action, different things like that

64
00:03:31.460 --> 00:03:34.746
that will run a similar suite of
automated tests and give you a report.

65
00:03:34.746 --> 00:03:39.263
The caveat before we go further
is accessibility testing.

66
00:03:39.263 --> 00:03:43.386
To do a really good job is always going to
need a certain degree of manual testing,

67
00:03:43.386 --> 00:03:46.921
like we did the tab trapping that's
very hard to automate a test for.

68
00:03:46.921 --> 00:03:50.088
But these tools are so
much better than nothing, so

69
00:03:50.088 --> 00:03:53.413
I think that having these
CI/CD tools is fantastic.

70
00:03:53.413 --> 00:03:57.092
But ideally you would still spend a bit of
time manually testing your features with

71
00:03:57.092 --> 00:04:00.289
the stuff that we've learned today,
like turning on a screen reader,

72
00:04:00.289 --> 00:04:03.880
trying to access every workflow with
the keyboard, that can go such a long way.

73
00:04:03.880 --> 00:04:08.788
But Deque, the same team that makes Axe
also makes a product called Axe-core.

74
00:04:08.788 --> 00:04:12.773
And Axe-core has this, you can plug it
in with whatever your CI/CD system is,

75
00:04:12.773 --> 00:04:16.759
like Jenkins or whatever, where you just
do a run and then it returns results and

76
00:04:16.759 --> 00:04:18.922
they either do or don't have violations.

77
00:04:18.922 --> 00:04:22.419
So you can hook this up with
whatever your current CI/CD is and

78
00:04:22.419 --> 00:04:25.794
they have full instructions on
how to do so on their GitHub.

79
00:04:25.794 --> 00:04:29.959
In a similar vein,
Lighthouse also offers Lighthouse CI.

80
00:04:29.959 --> 00:04:33.425
So for those that have used Lighthouse,
maybe for performance or SEO audits,

81
00:04:33.425 --> 00:04:36.850
it also has accessibility audits, and
you can hook those up in a similar way.

82
00:04:36.850 --> 00:04:40.433
They also offer it as a GitHub Workflow,
so it couldn't be easier.

83
00:04:40.433 --> 00:04:44.001
If you're already on GitHub,
you can just add this Workflow and

84
00:04:44.001 --> 00:04:48.109
on push you can just spin up a Linux
distro, do your install and run again.

85
00:04:48.109 --> 00:04:52.675
This is all on their GitHub repo, so we
can kinda give that a check as well then.

86
00:04:52.675 --> 00:04:57.883
Authoring tools these are abundant
if you're using a framework.

87
00:04:57.883 --> 00:05:01.615
If you're using one of the main
frameworks like Vue or React or Angular,

88
00:05:01.615 --> 00:05:04.444
that already come with great
accessibility plugins.

89
00:05:04.444 --> 00:05:08.211
So they'll analyze your jsx, they'll do
things like, if you make an image tag,

90
00:05:08.211 --> 00:05:10.354
they'll require you to have an alt tag for
it.

91
00:05:10.354 --> 00:05:13.678
Or if you are making form
elements that don't have labels,

92
00:05:13.678 --> 00:05:17.875
they'll flag that all as you're
developing for you, which is very nice.

93
00:05:17.875 --> 00:05:19.522
Going a step further than that,

94
00:05:19.522 --> 00:05:23.681
there's also design systems that come
with a ton of accessible functionality.

95
00:05:23.681 --> 00:05:27.461
So the two that always stand out to
me are Adobe's React Spectrum and

96
00:05:27.461 --> 00:05:31.926
Google's Material Design, which has
libraries for a variety of frameworks.

97
00:05:31.926 --> 00:05:36.812
These will give you things like really
customizable dropdowns and input boxes and

98
00:05:36.812 --> 00:05:37.520
sliders and

99
00:05:37.520 --> 00:05:42.501
complex UI components that come out of the
box with a huge amount of accessibility.

100
00:05:42.501 --> 00:05:45.893
Whether it's color contrast,
keyboard accessibility,

101
00:05:45.893 --> 00:05:50.110
live regions as things update,
all of that stuff kind of bundled for you.

102
00:05:50.110 --> 00:05:53.629
So if it's possible,
I highly recommend checking these out.

103
00:05:53.629 --> 00:05:57.204
Again there's nothing stopping you from
rolling your own, especially armed with

104
00:05:57.204 --> 00:06:00.178
the knowledge that we have now of how
to kind of test these things out.

105
00:06:00.178 --> 00:06:04.367
But yeah, there's quite a lot of authoring
tools that I think are really great, and

106
00:06:04.367 --> 00:06:08.084
you should be able to find one that fits
very nicely in whatever your current

107
00:06:08.084 --> 00:06:09.265
stacking code base is.

108
00:06:09.265 --> 00:06:13.972
At the very minimum, you can get
an HTML accessibility Linter that

109
00:06:13.972 --> 00:06:17.429
will just at the very least,
lint your raw HTML.

110
00:06:17.429 --> 00:06:21.255
Cool, so, yeah, these accessible
component libraries are really nice,

111
00:06:21.255 --> 00:06:23.967
I've used React Spectrum for
a long time from Adobe.

112
00:06:23.967 --> 00:06:26.474
They have a really nice website,
you can play with all their components.

113
00:06:26.474 --> 00:06:29.261
Again, this isn't about how your
component will look visually,

114
00:06:29.261 --> 00:06:31.762
you're free to style your
component however you'd like.

115
00:06:31.762 --> 00:06:33.524
This is about all that other stuff,

116
00:06:33.524 --> 00:06:37.579
just making sure that the screen reader
works well, that updates are read aloud,

117
00:06:37.579 --> 00:06:40.752
that it works really well with
the keyboard and the arrow keys and

118
00:06:40.752 --> 00:06:44.380
Escape closes it and Space triggers it,
all of these different things.

119
00:06:44.380 --> 00:06:48.222
So they basically offer on the right
a whole list of pickers, collections,

120
00:06:48.222 --> 00:06:52.135
buttons and then you can implement those
and style them however you'd like.

121
00:06:52.135 --> 00:06:54.338
Google's material design is very similar.

122
00:06:54.338 --> 00:06:56.751
&gt;&gt; Student 1: Yeah,
they might not be related to this, but

123
00:06:56.751 --> 00:06:59.356
when we were talking about
the forms generally,

124
00:06:59.356 --> 00:07:03.022
what's the best way way to handle
validations to screen reader?

125
00:07:03.022 --> 00:07:04.123
&gt;&gt; Jon Kuperman: That's
a really good question.

126
00:07:04.123 --> 00:07:08.914
Yeah, so form validation is quite a big
topic in general as far as like with

127
00:07:08.914 --> 00:07:13.647
the screen reader, I would say that
you've got a few different things.

128
00:07:13.647 --> 00:07:17.805
So making use of these semantic
components are fantastic because for

129
00:07:17.805 --> 00:07:22.178
example input type email or
input type password, different things like

130
00:07:22.178 --> 00:07:26.857
that they will register to the screen
reader and read aloud when you violate.

131
00:07:26.857 --> 00:07:30.777
So they'll inject, I think it's like
yellow on Chrome it says invalid email

132
00:07:30.777 --> 00:07:33.506
that will read aloud to
the screen reader by default.

133
00:07:33.506 --> 00:07:37.477
So I think the first step I would say
is trying to use those kind of semantic

134
00:07:37.477 --> 00:07:40.406
elements whenever possible
because they come with so

135
00:07:40.406 --> 00:07:42.378
much functionality on top of that.

136
00:07:42.378 --> 00:07:43.246
More than that,

137
00:07:43.246 --> 00:07:47.276
I would say probably the thing to do would
be make sure that your form has a label

138
00:07:47.276 --> 00:07:51.379
that there's some kind of DOM change
that happens when you fail a validation.

139
00:07:51.379 --> 00:07:53.556
And, and to wrap that in a live
region would be really good.

140
00:07:53.556 --> 00:07:57.854
So if you have a little span that's empty,
you wrap it in a sort of live region and

141
00:07:57.854 --> 00:08:00.036
then you put invalid password in there,

142
00:08:00.036 --> 00:08:03.910
whatever your validation is that'll
read aloud to the screen reader.

143
00:08:03.910 --> 00:08:06.761
But always my first thing I grab for

144
00:08:06.761 --> 00:08:12.672
is these standardized built in APIs
because they do all of that for you.

145
00:08:12.672 --> 00:08:13.503
Great question.

146
00:08:13.503 --> 00:08:17.464
&gt;&gt; Student 2: And just to add on to that,
in Marcy Sutton's web app accessibility

147
00:08:17.464 --> 00:08:21.564
course, she does a little bit more
with JavaScript accessibility and

148
00:08:21.564 --> 00:08:25.247
also form interaction and
kind of making landmark elements and

149
00:08:25.247 --> 00:08:27.356
some of the built in form elements.

150
00:08:27.356 --> 00:08:28.003
&gt;&gt; Jon Kuperman: That is awesome, yeah.

151
00:08:28.003 --> 00:08:31.282
I actually do have a shout out to her
course at the end of this course, so yeah,

152
00:08:31.282 --> 00:08:32.350
that's great, great.

