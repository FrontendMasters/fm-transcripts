WEBVTT

1
00:00:00.240 --> 00:00:03.213
Let's keep going on this topic
of keyboard-only users, and

2
00:00:03.213 --> 00:00:05.008
all the great things that we can do.

3
00:00:05.008 --> 00:00:08.451
And here's where I think we get into the
most fun engineering tasks for the next

4
00:00:08.451 --> 00:00:12.160
little bit of a section, cuz we can build
some really cool things for people.

5
00:00:12.160 --> 00:00:15.243
So, the idea being,
your entire application should be usable

6
00:00:15.243 --> 00:00:18.568
with only the keyboard,
all of your forms, your buttons, etc.

7
00:00:18.568 --> 00:00:21.964
You should have some type of focus
indicator to provide a necessary clue as

8
00:00:21.964 --> 00:00:24.728
to the currently active item,
where you are on the page.

9
00:00:24.728 --> 00:00:27.710
And you should consider offering
an any kind of shortcuts for

10
00:00:27.710 --> 00:00:30.633
keyboard-only users to jump
quickly to the main content,

11
00:00:30.633 --> 00:00:34.450
which we often call a skip link, and
we'll show some cool examples of those.

12
00:00:35.470 --> 00:00:39.790
So WebAIM's recommendations here is,
when elements receive focus,

13
00:00:39.790 --> 00:00:42.998
they don't make a substantial
change to the page.

14
00:00:42.998 --> 00:00:47.710
So again, like pop up windows or changing
keyboard focus or anything like that.

15
00:00:47.710 --> 00:00:51.590
Make sure that you don't do anything that
could confuse or disorient the user.

16
00:00:51.590 --> 00:00:53.540
When a user inputs information or
interacts,

17
00:00:53.540 --> 00:00:55.478
it doesn't result in substantial changes.

18
00:00:55.478 --> 00:00:59.474
So again, we're a little bit just trying
to think of good design principles here

19
00:00:59.474 --> 00:01:03.235
that, as you tabbing around the page,
shouldn't be shifting and moving or

20
00:01:03.235 --> 00:01:04.412
anything like that.

21
00:01:04.412 --> 00:01:05.368
As you open a modal,

22
00:01:05.368 --> 00:01:09.404
it shouldn't necessarily change out
the entire background, things like that.

23
00:01:09.404 --> 00:01:13.131
And then navigation links that
are repeated, they don't change order,

24
00:01:13.131 --> 00:01:15.412
so again,
this is just a good UX principle.

25
00:01:15.412 --> 00:01:20.452
But if you have a set of ten links at the
top, let those be the same on every page.

26
00:01:20.452 --> 00:01:22.420
Because oftentimes, screen reader users or

27
00:01:22.420 --> 00:01:25.012
keyboard-only users will
skip the navigation section.

28
00:01:25.012 --> 00:01:27.882
So if it's inconsistent, and then they
go back to it, and it's different,

29
00:01:27.882 --> 00:01:29.810
that can cause confusion.

30
00:01:29.810 --> 00:01:31.336
Great, so keyboard shortcuts,

31
00:01:31.336 --> 00:01:35.170
these are one of my favorite things to
build whenever I work on new websites.

32
00:01:35.170 --> 00:01:38.004
Website social networks like Twitter and
Facebook and

33
00:01:38.004 --> 00:01:40.186
YouTube offer really cool shortcuts.

34
00:01:40.186 --> 00:01:43.377
These are great for accessibility
purposes, they're great for power users,

35
00:01:43.377 --> 00:01:45.810
and they're great for people who like Vim.

36
00:01:45.810 --> 00:01:50.052
They're really fun to build and really
nice for people to use, so, some examples,

37
00:01:50.052 --> 00:01:52.920
if you go to any of your favorite
social media websites and

38
00:01:52.920 --> 00:01:56.522
hit question mark or shift question mark,
you'll get these popups.

39
00:01:56.522 --> 00:01:59.865
So I think I took these from like
Twitter and Facebook and YouTube, but

40
00:01:59.865 --> 00:02:01.234
most websites have these.

41
00:02:01.234 --> 00:02:04.123
So you load the page, you hit shift
question mark or question mark, and

42
00:02:04.123 --> 00:02:05.546
you get this keyboard shortcut.

43
00:02:05.546 --> 00:02:09.879
And the idea here is it should have a big
list of common actions that you would want

44
00:02:09.879 --> 00:02:10.405
to take.

45
00:02:10.405 --> 00:02:11.930
I guess maybe a show of hands,

46
00:02:11.930 --> 00:02:15.938
how many people have used keyboard
shortcuts on popular websites before?

47
00:02:15.938 --> 00:02:19.460
All right, Vim users maybe, yeah,
cool, so a lot of people don't,

48
00:02:19.460 --> 00:02:22.865
I get really addicted to them when
I kinda figure it out cuz it's just

49
00:02:22.865 --> 00:02:26.594
really fast to hop to the timeline,
send up a new message or whatever.

50
00:02:26.594 --> 00:02:30.384
Similarly, this is Facebook, so you just
go and you hit question mark, and it pops

51
00:02:30.384 --> 00:02:34.218
up this big keyboard shortcut window, and
then YouTube has a really similar one.

52
00:02:34.218 --> 00:02:37.162
So it's just a nice accessibility thing
that's there on all your favorite

53
00:02:37.162 --> 00:02:40.170
websites, but
maybe you haven't noticed before.

54
00:02:40.170 --> 00:02:45.024
Skip links, these are another foundational
concept is that websites are often

55
00:02:45.024 --> 00:02:49.738
structured with a big header, and
the header stays the same on every page.

56
00:02:49.738 --> 00:02:52.850
And that header is usually full of
tabbable items, like links, and

57
00:02:52.850 --> 00:02:56.344
if you imagine being a keyboard-only user,
every time you go to a new page,

58
00:02:56.344 --> 00:03:00.288
you'd have to tab through all 28 of your
header links to get to the main content.

59
00:03:00.288 --> 00:03:04.496
And so skip links are a concept where
if you've just refreshed the page, and

60
00:03:04.496 --> 00:03:06.467
you hit Tab for the very first time,

61
00:03:06.467 --> 00:03:11.136
they inject a secret extra link into the
HTML that's called skip to main content.

62
00:03:11.136 --> 00:03:15.126
And if you interact with that, then you
jump down into the main container, and

63
00:03:15.126 --> 00:03:18.790
if you tab past it, then you can
freely use the links like normal.

64
00:03:18.790 --> 00:03:22.586
And so, these are really great, they're
quite easy to build, but they're very nice

65
00:03:22.586 --> 00:03:25.886
for people, and these are very common
on news' websites, for example.

66
00:03:25.886 --> 00:03:30.174
So if you go to BBC and you load a page,
and then right when you've hit refresh for

67
00:03:30.174 --> 00:03:34.854
the first time you hit Tab, you'll notice
this little skip to content link shows up.

68
00:03:34.854 --> 00:03:38.727
This is true on GitHub as well,
you load GitHub.com and then hit Tab, and

69
00:03:38.727 --> 00:03:41.554
you'll get this skip link
kind of embedded in there.

70
00:03:41.554 --> 00:03:44.078
And you hit space or
click on it or whatever, and

71
00:03:44.078 --> 00:03:49.260
it'll jump you to the main bit of content,
let you skip right over the navigation.

72
00:03:49.260 --> 00:03:53.405
So, the idea with a skip link is
pretty easy, you make an anchor, and

73
00:03:53.405 --> 00:03:55.978
it should be the first
anchor in your list,

74
00:03:55.978 --> 00:03:59.343
and it's got the body,
skip to main content, or skip.

75
00:03:59.343 --> 00:04:01.886
Make sure it's prepended to your website,

76
00:04:01.886 --> 00:04:05.260
AKA make sure it's the first
tabbable item that there is.

77
00:04:05.260 --> 00:04:08.648
Make it visually hidden,
use the class that we used before, and

78
00:04:08.648 --> 00:04:12.716
then on focus state, make it visually
visible, and it's quite easy to do.

79
00:04:12.716 --> 00:04:16.391
So yeah, you basically just add
an anchor hover, hide it visually, but

80
00:04:16.391 --> 00:04:20.610
make sure with your CSS selector that the
on focus selector is visual, not hidden,

81
00:04:20.610 --> 00:04:22.268
and then it'll show up there.

82
00:04:22.268 --> 00:04:26.107
And make sure that the link itself is
an internal anchor to your container ID,

83
00:04:26.107 --> 00:04:30.700
like a hash anchor to whatever, main, or
whatever you call your main container.

84
00:04:30.700 --> 00:04:34.276
Cool, so yeah, WebAIM compliance here,
links are provided

85
00:04:34.276 --> 00:04:38.692
in some way to skip navigation and
other page elements that are repeated.

86
00:04:38.692 --> 00:04:42.114
So just any structure, it doesn't
even need to be visually hidden,

87
00:04:42.114 --> 00:04:45.949
it could just be there, your first link
could just be skipped to navigation.

88
00:04:45.949 --> 00:04:49.987
And then proper structure of a page
might be considered sufficient, so

89
00:04:49.987 --> 00:04:54.092
here I think it's saying that having
a good heading structure of H1S and

90
00:04:54.092 --> 00:04:57.542
things like that may well be
sufficient without a skip link.

91
00:04:57.542 --> 00:05:00.772
Cuz as we saw before, we could use
something like the web rotor and

92
00:05:00.772 --> 00:05:02.023
just skip through H1S.

93
00:05:02.023 --> 00:05:05.789
But if you have a lot of repeated links
that are hard to navigate through,

94
00:05:05.789 --> 00:05:08.234
a skip link can be a really
great way to do it.

95
00:05:08.234 --> 00:05:09.659
And also related things,

96
00:05:09.659 --> 00:05:13.138
making sure the webpage itself
has an informative page title.

97
00:05:13.138 --> 00:05:16.827
So that's like the title tag in HTML and
that the navigation is logical and

98
00:05:16.827 --> 00:05:17.570
intuitive.

99
00:05:17.570 --> 00:05:21.145
So again, a lot of these are just
kind of good design principles, but

100
00:05:21.145 --> 00:05:24.227
the skip link itself is a very
fun to build, easy to build and

101
00:05:24.227 --> 00:05:26.710
really powerful tool for
keyboard only users.

102
00:05:28.170 --> 00:05:32.533
Cool, so keeping the story going with tab
navigation, we hinted at this a little bit

103
00:05:32.533 --> 00:05:36.058
earlier when we did the exercise
of building the button with a DIV.

104
00:05:36.058 --> 00:05:40.812
But the idea being that you need to be
able to use the tab key to navigate to

105
00:05:40.812 --> 00:05:46.102
the next tabbable item and shift tab to
navigate to the previous tabable item.

106
00:05:46.102 --> 00:05:49.987
So this is the way that the web works
by default in all major browsers, but

107
00:05:49.987 --> 00:05:52.782
we do have some cool
control as developers here.

108
00:05:52.782 --> 00:05:56.473
So the requirement here is that all
page functionality is available using

109
00:05:56.473 --> 00:05:57.302
the keyboard.

110
00:05:57.302 --> 00:06:00.284
So making sure that there aren't any
things that are out of reach for

111
00:06:00.284 --> 00:06:01.710
keyboard only users.

112
00:06:01.710 --> 00:06:05.832
Suggestions here that you can add shortcut
keys, but make sure that they don't go

113
00:06:05.832 --> 00:06:09.142
conflict with existing browser and
screen reader shortcuts.

114
00:06:09.142 --> 00:06:14.019
So the examples here being usually
I think we stick to the same set

115
00:06:14.019 --> 00:06:18.909
of keys which are largely influenced
by vim and other keyboard.

116
00:06:18.909 --> 00:06:20.926
Heavy things, so using, what is it?

117
00:06:20.926 --> 00:06:24.421
Like H and J to go up and down,
things like that, just make sure

118
00:06:24.421 --> 00:06:28.862
that you're not binding any helpful
keyboard shortcuts to escape caps lock,

119
00:06:28.862 --> 00:06:33.110
control, anything that might
be necessary for other things.

120
00:06:33.110 --> 00:06:37.390
Again, the compliance thing here is
that make sure that AAA compliance,

121
00:06:37.390 --> 00:06:40.366
everything can be available
using the keyboard.

122
00:06:40.366 --> 00:06:43.819
But for A compliance, everything can
be available using the keyboard,

123
00:06:43.819 --> 00:06:47.238
unless it's something that can't
be accomplished in any known way.

124
00:06:47.238 --> 00:06:50.950
So you can be A and AA compliant,
let's say you have a drawing app or

125
00:06:50.950 --> 00:06:52.326
something like that.

126
00:06:52.326 --> 00:06:56.078
You don't need to make the entire
drawing app itself keyboard accessible.

127
00:06:56.078 --> 00:06:59.660
You just need to make everything that
can be done with a keyboard done with

128
00:06:59.660 --> 00:07:01.250
the keyboard.

129
00:07:01.250 --> 00:07:02.290
How are we feeling about that?

130
00:07:02.290 --> 00:07:03.349
Pretty good?

131
00:07:03.349 --> 00:07:06.170
Cool, so what are tabbable elements?

132
00:07:06.170 --> 00:07:10.379
So the tabbable elements in HTML are
anchors, buttons, inputs, selects, text

133
00:07:10.379 --> 00:07:14.522
areas and iframes, so these are things
that come with default functionality.

134
00:07:14.522 --> 00:07:17.949
They register themselves as tabbable,
and then as a user is tabbing or

135
00:07:17.949 --> 00:07:22.130
shift tabbing through a website,
they can interact with these things.

136
00:07:22.130 --> 00:07:26.912
So most of these, or all of these are
items where there will be some user input

137
00:07:26.912 --> 00:07:31.247
required in some way, whether it's
an anchor that a user clicks on or

138
00:07:31.247 --> 00:07:36.588
an input that a user enters information,
or an iframe that a user hops in between.

139
00:07:36.588 --> 00:07:39.670
There's a reason these are tabbable
because they mark points where a user

140
00:07:39.670 --> 00:07:41.120
would need to interact with them.

141
00:07:42.220 --> 00:07:46.126
Just a quick shout out, I really don't
care if people use this or not, but

142
00:07:46.126 --> 00:07:50.035
if you are making a list of all of your
focusable or tabbable elements, and

143
00:07:50.035 --> 00:07:54.385
you want to have that in a CSS selector,
I have this very simple JavaScript library

144
00:07:54.385 --> 00:07:57.946
that just exports a simple string
of all tabbable HTML elements.

145
00:07:57.946 --> 00:08:00.415
Because while this list has the main ones,

146
00:08:00.415 --> 00:08:05.080
there are actually hundreds of sub
tabbable elements like input type, emails,

147
00:08:05.080 --> 00:08:09.226
or all sorts of things with ARIA
attributes or tabbable attributes.

148
00:08:09.226 --> 00:08:13.232
And so I have this little open source
repository here, jcoop/focusable, and

149
00:08:13.232 --> 00:08:17.178
it's literally just a string of every
modern tabbable element that you can use

150
00:08:17.178 --> 00:08:21.120
in a number of ways when you're
building accessibility features.

151
00:08:21.120 --> 00:08:24.353
So what if we have an element
that we wanna be interactive, but

152
00:08:24.353 --> 00:08:25.560
it's not tabbable?

153
00:08:25.560 --> 00:08:28.728
And we covered this a little
bit with the button before, so

154
00:08:28.728 --> 00:08:32.232
there is a tab index attribute
that you can add to any element.

155
00:08:32.232 --> 00:08:34.825
And so if you take a div, and
you add tabIndex 0 to it,

156
00:08:34.825 --> 00:08:38.804
then all of a sudden you refresh the page,
and you start tabbing through the page,

157
00:08:38.804 --> 00:08:42.665
and you will focus on this div, and it'll
get a focus state like it was an input,

158
00:08:42.665 --> 00:08:45.528
and it will show up, and
the screen reader will read it.

159
00:08:45.528 --> 00:08:49.444
The screen reader will not read a role
assigned to it until you assign an ARIA

160
00:08:49.444 --> 00:08:53.554
role, but it will read it and treat it
as a focusable interactive element.

161
00:08:53.554 --> 00:08:56.244
Has anybody used tabindexes
before on their website?

162
00:08:56.244 --> 00:08:58.850
Cool, people have, that's great,
yeah, really exciting.

163
00:08:58.850 --> 00:09:03.862
So tabindex has three values,
it has a negative value, which means that

164
00:09:03.862 --> 00:09:09.762
the element should be focusable but not
reachable through sequential navigation.

165
00:09:09.762 --> 00:09:12.043
Meaning, if you think of
when you load a page,

166
00:09:12.043 --> 00:09:14.326
it basically crawls
every tabbable element,

167
00:09:14.326 --> 00:09:17.816
and it puts them in a list together,
and then as you tab, it goes next.

168
00:09:17.816 --> 00:09:22.520
And as you shift tab, it goes previous,
a negative value means we still want this.

169
00:09:22.520 --> 00:09:25.501
We wanna be able to call like with
JavaScript, call, focus on it,

170
00:09:25.501 --> 00:09:28.640
but we don't want the user to be
able to access it with the keyboard.

171
00:09:28.640 --> 00:09:32.584
Maybe a little bit more rarely to use
this one, the more common one is 0.

172
00:09:32.584 --> 00:09:34.984
So 0 means the element
should be focusable,

173
00:09:34.984 --> 00:09:37.321
it should be reachable via navigation, and

174
00:09:37.321 --> 00:09:41.828
its relative order should be defined where
it falls in the dom, basically, right?

175
00:09:41.828 --> 00:09:45.671
So if it's the first element, like a div,
and you add tabIndex 0 to it,

176
00:09:45.671 --> 00:09:48.060
it'll be the first thing there.

177
00:09:48.060 --> 00:09:51.989
I realize that wording is a little bit
complex, does that make sense though,

178
00:09:51.989 --> 00:09:53.925
that 0, tabbable, focusable, and

179
00:09:53.925 --> 00:09:58.196
it'll just show up in the order in which
it appears in the markup, essentially.

180
00:09:58.196 --> 00:10:00.922
And then a positive value
means it should be focusable,

181
00:10:00.922 --> 00:10:03.284
reachable through the keyboard navigation.

182
00:10:03.284 --> 00:10:06.482
But now its relative order is defined
by the value of the attribute,

183
00:10:06.482 --> 00:10:07.896
kind of like Z index, right?

184
00:10:07.896 --> 00:10:10.170
Where the higher it is,
the higher it shows up.

185
00:10:10.170 --> 00:10:14.265
Okay, so this is possible,
this is supported, this is standard, but

186
00:10:14.265 --> 00:10:16.322
it is very much not recommended.

187
00:10:16.322 --> 00:10:20.526
So the W3C and MDN recommend
that you only use 0 and -1, So

188
00:10:20.526 --> 00:10:25.810
you can have it focusable and
not navigable, or focusable and navigable.

189
00:10:25.810 --> 00:10:30.038
But don't use these positive integer
values because they can mess with so

190
00:10:30.038 --> 00:10:34.675
many different types of navigation, and
they can make things very confusing for

191
00:10:34.675 --> 00:10:35.762
screen readers.

192
00:10:35.762 --> 00:10:39.275
So it is possible it is supported,
Just got a big red warning on it to stick

193
00:10:39.275 --> 00:10:41.880
with the zeros and
the negative ones where possible.

194
00:10:43.060 --> 00:10:47.452
I don't think I've ever used a positive
value in production, I use the negative

195
00:10:47.452 --> 00:10:51.841
one very rarely when I have something that
I want to be able to draw focus to later,

196
00:10:51.841 --> 00:10:55.044
but isn't really something
to be interacted with now.

197
00:10:55.044 --> 00:10:58.952
And I use the zero by far the most often
to just turn something into a tappable

198
00:10:58.952 --> 00:11:00.420
element.

199
00:11:00.420 --> 00:11:04.294
Cool, so as we're building
these accessibility features,

200
00:11:04.294 --> 00:11:08.240
there's a really nice API that's
important for a lot of them,

201
00:11:08.240 --> 00:11:10.710
which is the document active element.

202
00:11:11.770 --> 00:11:15.252
And so on single page applications,
I often come up with a lot of

203
00:11:15.252 --> 00:11:19.026
different use cases for
storing the currently focused element.

204
00:11:19.026 --> 00:11:21.867
So one that I'll give you is
there's this pretty common design

205
00:11:21.867 --> 00:11:25.028
workflow that you have in your app,
and it's got a list of things, and

206
00:11:25.028 --> 00:11:28.074
you're tabbing through news articles or
something like that.

207
00:11:28.074 --> 00:11:32.147
Then you interact with something that
pops up a modal, like a login modal or

208
00:11:32.147 --> 00:11:35.724
like view the article in details modal or
something like that.

209
00:11:35.724 --> 00:11:37.330
When you close the modal,

210
00:11:37.330 --> 00:11:42.364
the ideal experience is that you send the
focus right back to where it was before.

211
00:11:42.364 --> 00:11:44.716
Or otherwise, the users will have
to start at the top again and

212
00:11:44.716 --> 00:11:45.852
navigate all the way down.

213
00:11:45.852 --> 00:11:50.913
So it's actually really easy to do where
when you trigger the modal in JavaScript,

214
00:11:50.913 --> 00:11:55.252
before you change anything,
you store the currently active element,

215
00:11:55.252 --> 00:11:57.188
document an active element.

216
00:11:57.188 --> 00:12:01.276
And then when the modal closes, you just
call .focus on it, quite simple APIs.

217
00:12:01.276 --> 00:12:06.182
So anytime that you're dealing with these
page transitions or something pops up and

218
00:12:06.182 --> 00:12:09.844
you just wanna make sure that
the user remains in their place.

219
00:12:09.844 --> 00:12:12.360
I think we've all been there before,
you're on a social site, and

220
00:12:12.360 --> 00:12:14.699
then you click on something,
then you hit the back button, and

221
00:12:14.699 --> 00:12:17.620
it takes you back to the top, and
you've lost your feed or whatever.

222
00:12:17.620 --> 00:12:22.383
This is really easy to solve with code,
so on click, store the current active and

223
00:12:22.383 --> 00:12:26.514
then on close, call .focus on it,
and it takes you right back there,

224
00:12:26.514 --> 00:12:28.430
exactly like you would expect.

225
00:12:29.530 --> 00:12:33.834
Cool, I think the last concept we
talked about skip links and navigation,

226
00:12:33.834 --> 00:12:37.858
all this stuff, tabbable elements,
is this idea of tab trapping.

227
00:12:37.858 --> 00:12:42.221
This is another one that I think these big
professional websites almost always do,

228
00:12:42.221 --> 00:12:45.896
and as a user you would expect it to
be there, but it's not necessarily

229
00:12:45.896 --> 00:12:49.602
something that you would think of
when building your application.

230
00:12:49.602 --> 00:12:54.055
And the idea is best described with
a modal pop up, so like a login modal or

231
00:12:54.055 --> 00:12:55.584
something like that.

232
00:12:55.584 --> 00:12:59.352
You would think that when the modal is
popped up and your website is grayed out,

233
00:12:59.352 --> 00:13:03.160
that the modal sort of becomes the whole
website as far as you're concerned.

234
00:13:03.160 --> 00:13:07.401
And therefore, tabbing and shift tabbing
should only take you through the tabbable

235
00:13:07.401 --> 00:13:09.472
elements in the modal itself, right?

236
00:13:09.472 --> 00:13:13.160
Like you shouldn't be like tabbing all the
way back into the page, which is grayed

237
00:13:13.160 --> 00:13:16.473
out because even though the page is
still there and the HTML is still live,

238
00:13:16.473 --> 00:13:19.306
we're visually telling yo u that
we've grayed out the page and

239
00:13:19.306 --> 00:13:21.248
the modal is the only thing important.

240
00:13:21.248 --> 00:13:22.892
And so with workflows like this,

241
00:13:22.892 --> 00:13:26.591
sometimes it's on us as developers to
add a little bit of JavaScript to make

242
00:13:26.591 --> 00:13:30.208
sure that the sequential tabbing works
in the way that we would expect.

243
00:13:30.208 --> 00:13:34.560
Because as far as the browser knows, we
still have all of those tabbable elements

244
00:13:34.560 --> 00:13:37.576
on the core page itself as
well as all of these new ones.

245
00:13:37.576 --> 00:13:40.798
And you could quickly get into a situation
where you tab down to the submit button,

246
00:13:40.798 --> 00:13:42.292
and then you hit tab one more time, and

247
00:13:42.292 --> 00:13:44.680
you're somewhere in the grayed
out website underneath.

248
00:13:44.680 --> 00:13:49.203
And so this is like a common thing that
if you use like a CSS component library,

249
00:13:49.203 --> 00:13:53.358
they'll almost always have tab
trapping built in with their modals.

250
00:13:53.358 --> 00:13:56.924
Like, if you were to use Material UI or
Bootstrap or some React library,

251
00:13:56.924 --> 00:13:58.886
they almost always have this built in.

252
00:13:58.886 --> 00:14:02.666
But it is an important thing to consider,
especially if you're building your own

253
00:14:02.666 --> 00:14:05.150
components, this is expected
behavior from users.

