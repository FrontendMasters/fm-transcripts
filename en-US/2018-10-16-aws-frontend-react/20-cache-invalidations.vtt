WEBVTT

1
00:00:00.100 --> 00:00:07.636
&gt;&gt; Steve Kinney: You cache,
then you change, right?

2
00:00:07.636 --> 00:00:09.565
What is the process of deploying?

3
00:00:09.565 --> 00:00:12.240
Well, we build the app and
then we push it to S3.

4
00:00:13.290 --> 00:00:14.620
Let's think about that.

5
00:00:14.620 --> 00:00:18.500
We know that the good
thing about CloudFront is

6
00:00:18.500 --> 00:00:23.320
that if it thinks it has the page,
it doesn't go to S3.

7
00:00:23.320 --> 00:00:24.561
So how do you deploy your app?

8
00:00:26.470 --> 00:00:30.397
&gt;&gt; Steve Kinney: Right,
technically, you could deploy, but

9
00:00:30.397 --> 00:00:35.670
it's probably unacceptable
to have a day go by, right?

10
00:00:35.670 --> 00:00:36.962
And so you have a bunch of options.

11
00:00:36.962 --> 00:00:39.480
You can,

12
00:00:39.480 --> 00:00:44.482
this is an argument that we had, you can
lower the caching time to five minutes.

13
00:00:44.482 --> 00:00:49.640
So t as long as people are hitting
it relatively consistently,

14
00:00:49.640 --> 00:00:52.390
somebody will eat that longer term cost,
and

15
00:00:52.390 --> 00:00:56.590
then everyone else will get the fresh
one for the next five minutes, right?

16
00:00:56.590 --> 00:01:00.362
But that all depends on how
much traffic you're getting.

17
00:01:00.362 --> 00:01:02.090
And it also means that somebody,

18
00:01:02.090 --> 00:01:06.130
every five minutes,
is suffering the situation we had before.

19
00:01:06.130 --> 00:01:07.130
I don't love that, right?

20
00:01:07.130 --> 00:01:10.080
It's the easiest thing to do,
but I don't love it.

21
00:01:11.822 --> 00:01:16.900
&gt;&gt; Steve Kinney: The other thing we
can do is we can create invalidations.

22
00:01:16.900 --> 00:01:19.585
Which is basically, with browser caching,

23
00:01:19.585 --> 00:01:22.560
you don't control people's browsers,
right?

24
00:01:22.560 --> 00:01:25.000
You can't evict something
from their cache.

25
00:01:25.000 --> 00:01:28.885
That's why service workers can be
very dangerous if you get them wrong.

26
00:01:28.885 --> 00:01:30.668
Because it's really hard for

27
00:01:30.668 --> 00:01:34.670
you to take a cached version out
of somebody's computer, right?

28
00:01:34.670 --> 00:01:37.569
You can't send messages to their computer.

29
00:01:37.569 --> 00:01:40.815
It's not cool, [LAUGH] right?

30
00:01:40.815 --> 00:01:43.826
On the other hand, CloudFront,
you can be like, yo,

31
00:01:43.826 --> 00:01:46.000
get everything out of cache right now.

32
00:01:46.000 --> 00:01:48.350
Let's take a look at that real quick.

33
00:01:48.350 --> 00:01:51.320
So you can basically
create an invalidation.

34
00:01:52.760 --> 00:01:56.250
So over here, see this Invalidations tab.

35
00:01:56.250 --> 00:02:03.430
We can say hey, CloudFront, I want
you to kick everything out of cache.

36
00:02:03.430 --> 00:02:05.190
I know that I have made a change.

37
00:02:05.190 --> 00:02:10.780
I have deployed said change,
please don't serve the version you have.

38
00:02:10.780 --> 00:02:14.046
Go back to S3 and get the latest and
greatest version of my website.

39
00:02:17.800 --> 00:02:21.781
&gt;&gt; Steve Kinney: We at Sun Grid create an
invalidation every single time we deploy,

40
00:02:21.781 --> 00:02:22.285
right?

41
00:02:22.285 --> 00:02:26.470
Cuz that is where we have our fresh
version application to which every time I

42
00:02:26.470 --> 00:02:29.062
say that,
a backend engineer on my team goes,

43
00:02:29.062 --> 00:02:32.460
well, you only get 1,000
free invalidations a month.

44
00:02:33.540 --> 00:02:36.890
To which I say, if I am deploying
more than 1,000 times a month,

45
00:02:36.890 --> 00:02:39.110
I will happily eat that cost, right?

46
00:02:39.110 --> 00:02:43.070
If we get to the fact that we are so
efficient that we're deploying

47
00:02:43.070 --> 00:02:47.061
literally 1,000 or more times a month,
for whatever that costs,

48
00:02:47.061 --> 00:02:52.310
for whatever number of pennies it costs,
that is a high class problem to solve.

49
00:02:52.310 --> 00:02:55.700
I have personally not run into that,
where we're deploying that frequently.

50
00:02:55.700 --> 00:02:57.250
But it is a thing to keep in mind.

51
00:02:57.250 --> 00:03:01.156
It's maybe important not
to get willy nilly with it.

52
00:03:01.156 --> 00:03:03.775
Let's show what happens if we hit
the Create Invalidation button.

53
00:03:03.775 --> 00:03:06.720
It's basically,
what do you want to invalidate?

54
00:03:08.620 --> 00:03:13.290
So you can be like,
I just wanna invalidate index.html, right?

55
00:03:13.290 --> 00:03:15.870
Or I just wanna invalidate these images.

56
00:03:15.870 --> 00:03:19.718
Personally, the way we deploy our
application is Webpack is hashing

57
00:03:19.718 --> 00:03:23.180
each of those files, so
the files are always unique, right?

58
00:03:23.180 --> 00:03:26.990
But index.html will have the reference
to the new one, there's images.

59
00:03:26.990 --> 00:03:30.525
Here's the thing, each invalidation
either counts towards your

60
00:03:30.525 --> 00:03:34.330
1,000 invalidations a month or
costs you money.

61
00:03:35.820 --> 00:03:40.260
However, it doesn't matter how
much stuff you invalidate, right?

62
00:03:40.260 --> 00:03:46.410
So generally speaking,
I would rather one person per edge node

63
00:03:46.410 --> 00:03:51.770
per deploy pay that cost of going back
to S3 for everything than think that I

64
00:03:51.770 --> 00:03:56.120
have deployed a new version of some asset
that I didn't properly invalidate and

65
00:03:56.120 --> 00:03:59.420
have it lingering around forever
causing who knows what chaos.

66
00:03:59.420 --> 00:04:02.430
So what I'll usually do is I'll
put a nice little star in there.

67
00:04:02.430 --> 00:04:08.955
Which is invalidate everything, everything
you have in cache, invalidate it, right?

68
00:04:08.955 --> 00:04:11.617
Doesn't really matter for my client-side
asset, or my JavaScript, my CSS,

69
00:04:11.617 --> 00:04:13.110
cuz they're fingerprinted anyway.

70
00:04:13.110 --> 00:04:15.590
They were gonna get new
ones no matter what.

71
00:04:15.590 --> 00:04:19.926
It's just really index.html,
which I want out, but

72
00:04:19.926 --> 00:04:23.400
it's a little sledge hammery, right?

73
00:04:23.400 --> 00:04:26.990
But I would like to feel safe that
everything is out of cache, and

74
00:04:26.990 --> 00:04:30.120
I have something lingering around,
cuz I don't know what, right?

75
00:04:30.120 --> 00:04:32.473
I don't need that in my life.

76
00:04:32.473 --> 00:04:34.250
You can go ahead and
create an invalidation.

77
00:04:35.260 --> 00:04:40.103
And this will go ahead and
clear out everything.

78
00:04:40.103 --> 00:04:41.160
You see it's in progress.

79
00:04:41.160 --> 00:04:42.880
It does need to distribute.

80
00:04:42.880 --> 00:04:45.510
Nothing with CloudFront is instantaneous.

81
00:04:45.510 --> 00:04:50.098
If you do something in CloudFront and
go to the browser, try it out, but

82
00:04:50.098 --> 00:04:53.782
be pleasantly surprised if it
is in any sense immediate.

83
00:04:53.782 --> 00:04:58.962
That seems annoying, but also remember you
are literally distributing something to,

84
00:04:58.962 --> 00:05:01.708
I think, 114 locations around the world.

85
00:05:01.708 --> 00:05:02.914
It's cool.

86
00:05:02.914 --> 00:05:06.580
[LAUGH] Don't worry about it, but it is.

87
00:05:06.580 --> 00:05:09.370
And once you have this set up and running,

88
00:05:09.370 --> 00:05:13.776
you are probably not playing with
CloudFront that much, right?

89
00:05:13.776 --> 00:05:17.657
And we'll talk about the fact that we'll
trigger these when we get our CI/CD

90
00:05:17.657 --> 00:05:19.052
process in place, right?

91
00:05:19.052 --> 00:05:22.953
We will not be going into
CloudFront as a step to invalidate.

92
00:05:22.953 --> 00:05:25.310
We'll create the invalidations
programmatically.

