WEBVTT

1
00:00:02.030 --> 00:00:06.375
&gt;&gt; Steve Kinney: This is a course
on deploying like rich client-side

2
00:00:06.375 --> 00:00:08.259
applications on AWS.

3
00:00:08.259 --> 00:00:12.497
And this starts from like
how we did it at SendGrid.

4
00:00:12.497 --> 00:00:14.858
So, I'll tell you a little bit
about the problem that we had.

5
00:00:14.858 --> 00:00:18.995
And then I'll tell you about the solution
and then we'll spend the next little

6
00:00:18.995 --> 00:00:22.955
bit together getting to that solution
together to figure out how we did it.

7
00:00:22.955 --> 00:00:28.080
Cuz the really interesting part is the
same architecture that we use for hosting,

8
00:00:28.080 --> 00:00:33.353
building and deploying a application that
makes about $20 million dollars a year

9
00:00:33.353 --> 00:00:38.419
is relatively easy for you to get going
for pretty much any project that you have.

10
00:00:38.419 --> 00:00:43.228
So it's the same thing that works for
my personal homepage, or something along

11
00:00:43.228 --> 00:00:47.989
those lines, can also scale all the way
up to a large enterprise application.

12
00:00:47.989 --> 00:00:50.893
So let's talk a little bit
about the problem that we had.

13
00:00:50.893 --> 00:00:56.359
The original version of our site,
the version still in production today,

14
00:00:56.359 --> 00:01:01.217
was backed originally by a Ruby on
Rails back-end sitting in a data

15
00:01:01.217 --> 00:01:05.752
center we call it NDW,
which stands for the nearest airport.

16
00:01:05.752 --> 00:01:09.390
So somewhere in Chicago, I don't actually
know the address of the data center,

17
00:01:09.390 --> 00:01:10.578
because it's not my job.

18
00:01:10.578 --> 00:01:14.614
So the problem was a few steps.

19
00:01:14.614 --> 00:01:19.494
One is that all requests had to go to
Chicago, which means if you were in

20
00:01:19.494 --> 00:01:24.070
Sydney, you still had to make
a request to our server in Chicago.

21
00:01:24.070 --> 00:01:26.912
If you were in Ireland,
the same case, right?

22
00:01:26.912 --> 00:01:30.417
If you're in Mumbai,
you had to make a request to Chicago.

23
00:01:30.417 --> 00:01:35.022
It also meant that every single time that
we wanted to deploy our application,

24
00:01:35.022 --> 00:01:38.949
let's say, it was a React application
on top of this Rail server.

25
00:01:38.949 --> 00:01:43.067
Originally, two versions of
the application ago, it was jQuery and

26
00:01:43.067 --> 00:01:45.770
CoffeeScript served by the asset pipeline.

27
00:01:45.770 --> 00:01:50.145
The newer version was a React app kind
of sitting on top of the Rails app and

28
00:01:50.145 --> 00:01:52.240
making Ajax calls to get the data.

29
00:01:52.240 --> 00:01:55.452
So we usually worked on
the React application

30
00:01:55.452 --> 00:01:58.417
separately from the Rails application.

31
00:01:58.417 --> 00:02:03.102
And for the most part, the number of
changes we would make to the client-side

32
00:02:03.102 --> 00:02:06.132
React application was in
the order of magnitude of

33
00:02:06.132 --> 00:02:10.553
honestly 100 times more common than
us changing the Rails code base.

34
00:02:10.553 --> 00:02:14.269
So we had to deploy the Rails app every
single time we made a client-side code

35
00:02:14.269 --> 00:02:15.149
change, right?

36
00:02:15.149 --> 00:02:19.673
This involved building it,
all sorts of fun Docker,

37
00:02:19.673 --> 00:02:23.199
Linux stuff, it took a really long time.

38
00:02:23.199 --> 00:02:26.554
And it wasn't lost on us that
we didn't need to be doing that.

39
00:02:26.554 --> 00:02:30.990
So the first thing we did was take a lot
of the process we're gonna talk about

40
00:02:30.990 --> 00:02:34.523
today and take our JavaScript and
our CSS and host it on AWS.

41
00:02:34.523 --> 00:02:38.061
The index.HTML page was still,
at that point, hosted from Rails.

42
00:02:38.061 --> 00:02:39.182
So we didn't solve all the problems.

43
00:02:39.182 --> 00:02:44.061
But we're working on a new version of the
application where even the index.HTML page

44
00:02:44.061 --> 00:02:48.620
is built by web pack, put onto S3,
fronted by CloudFront, so on and so forth.

45
00:02:48.620 --> 00:02:50.062
And that's gonna be what
we're talking about today.

46
00:02:50.062 --> 00:02:51.525
So we got halfway with
our current architecture.

47
00:02:51.525 --> 00:02:55.940
We're going all the way as we kind
of move the entire company onto AWS.

48
00:02:55.940 --> 00:03:00.634
Cool, so
just to show you some of the metrics.

49
00:03:00.634 --> 00:03:04.765
This is basically the only two
changes we had made to the app

50
00:03:04.765 --> 00:03:09.656
to get this kind of performance change,
performance gains really,

51
00:03:09.656 --> 00:03:12.884
is implement code
splitting on a page level.

52
00:03:12.884 --> 00:03:16.087
So, if you think about, think of Twitter
has that kinda navigation on top.

53
00:03:16.087 --> 00:03:18.752
Facebook has the navigation along
the side, we had one as well.

54
00:03:18.752 --> 00:03:23.326
So we basically code split based
on each nav item in our sidebar.

55
00:03:23.326 --> 00:03:27.895
And then the other part was to put
it on S3 fronted by CloudFront and

56
00:03:27.895 --> 00:03:30.759
distribute it around the world, right?

57
00:03:30.759 --> 00:03:32.196
And we're gonna talk about how to do that.

58
00:03:32.196 --> 00:03:33.997
And we'll talk about what that
actually means in a second.

59
00:03:33.997 --> 00:03:41.281
But from Denver, going to Chicago,
we saw performance gains.

60
00:03:41.281 --> 00:03:45.050
But if you look as you get further and
further away from Denver,

61
00:03:45.050 --> 00:03:48.193
the performance gains
are increasingly dramatic.

62
00:03:48.193 --> 00:03:56.558
So users in Sydney saw a 1300% increase
in time to first meaningful byte, right?

63
00:03:56.558 --> 00:03:59.765
So that's gonna be what we look at today,
and we'll see how you can do this.

64
00:03:59.765 --> 00:04:04.962
And for our $20 million a year
application, it costs about $13 a month.

65
00:04:04.962 --> 00:04:09.843
For a personal website, you're looking
at more along the lines of $0.60,

66
00:04:09.843 --> 00:04:13.088
and 50 of those cents come from Route 53,
right?

67
00:04:13.088 --> 00:04:16.134
So that's a static cost,
so the actual S3 and

68
00:04:16.134 --> 00:04:20.525
CloudFront parts are going to run
you about a dime a month, right?

69
00:04:20.525 --> 00:04:23.941
Unless you're like me and spin up a whole
bunch of them as you're preparing for

70
00:04:23.941 --> 00:04:25.772
a workshop, and forget to shut them off.

71
00:04:25.772 --> 00:04:28.790
That's a different story for
a different day, cool.

72
00:04:28.790 --> 00:04:31.427
This is gonna be the app that we use.

73
00:04:31.427 --> 00:04:36.986
It is actually a hollowed out version
of our production application, right?

74
00:04:36.986 --> 00:04:40.029
Taking away all the things that will
get me a long talk with legal, but

75
00:04:40.029 --> 00:04:42.671
keeping the web pack, config and
stuff along those lines.

76
00:04:42.671 --> 00:04:48.087
And what's important here is that
it does have client-side routing.

77
00:04:48.087 --> 00:04:50.239
It does have lazy loading of inputs,
right?

78
00:04:50.239 --> 00:04:55.715
So it's supposed to be more of a real
app that's not gonna get me in trouble.

79
00:04:55.715 --> 00:04:58.795
But not just a single HTML page,
cuz then there's really

80
00:04:58.795 --> 00:05:02.919
interesting problems with client-side
routing and not breaking the web.

81
00:05:02.919 --> 00:05:05.911
We will fight that battle around
three to four times today, and

82
00:05:05.911 --> 00:05:08.292
only at the very end of
the workshop actually win.

83
00:05:08.292 --> 00:05:13.353
There's a different set of trade-offs that
we have to make through the entire way.

84
00:05:13.353 --> 00:05:16.982
And we'll do this, and
then we'll have this other bad part to it.

85
00:05:16.982 --> 00:05:21.959
So, it's got enough, it's got all the
hallmarks of a real application, will not

86
00:05:21.959 --> 00:05:27.167
be overwhelming and contain too much of
my company's intellectual property, cool.

87
00:05:27.167 --> 00:05:31.694
Yep, so all the things, the big difference
is obviously, it's a lot smaller.

88
00:05:31.694 --> 00:05:35.357
Cuz it's not a large application for
creating HTML emails.

89
00:05:35.357 --> 00:05:38.930
And I switched it back to
JavaScript instead of TypeScript.

90
00:05:38.930 --> 00:05:40.667
So it was a kinda major difference for

91
00:05:40.667 --> 00:05:44.268
the actual shell around the application
is like I took the application out.

92
00:05:44.268 --> 00:05:47.594
And I didn't make us all
learn TypeScript today.

93
00:05:47.594 --> 00:05:50.191
But you should learn TypeScript,
cuz it's great.

94
00:05:50.191 --> 00:05:53.318
So we're gonna build the infrastructure
that we have at SendGrid.

95
00:05:53.318 --> 00:05:57.368
We will be able to do it all together
pretty much the exact same way that we

96
00:05:57.368 --> 00:06:00.150
have it, right,
over the course of a day today.

97
00:06:00.150 --> 00:06:03.636
And it's actually a lot faster if there
wasn't somebody walking you through and

98
00:06:03.636 --> 00:06:05.643
explaining everything step by step, right?

99
00:06:05.643 --> 00:06:08.646
So if you were to go sit down and try to
do this on your application tomorrow, you

100
00:06:08.646 --> 00:06:12.035
could probably knock it out in a morning,
right, which is kind of incredible, right?

101
00:06:12.035 --> 00:06:16.027
If you think about how long it would
take to provision a VPS server,

102
00:06:16.027 --> 00:06:19.322
it's not gonna take you a morning,
trust me, I know.

103
00:06:19.322 --> 00:06:21.874
So, what are we gonna cover?

104
00:06:21.874 --> 00:06:25.603
We are gonna cover how to get our
single-page application hosted on AWS

105
00:06:25.603 --> 00:06:28.292
distributed around the world,
secured with SSL.

106
00:06:28.292 --> 00:06:31.667
So it's an HTTPS domain,
instead of just HTTP.

107
00:06:31.667 --> 00:06:34.581
We'll have that automatically
deployed with CI/CD.

108
00:06:34.581 --> 00:06:37.462
So every time you merge to master,
it will automatically deploy.

109
00:06:37.462 --> 00:06:41.150
Cuz I don't like manually deploying,
it's not fun for me.

110
00:06:41.150 --> 00:06:45.881
And finally we will add a little
bit of ability to dynamically

111
00:06:45.881 --> 00:06:47.654
respond to requests.

112
00:06:47.654 --> 00:06:50.483
And we'll talk a little bit more about
what that means when we get there.

113
00:06:50.483 --> 00:06:54.691
What we're not going to cover,
we're not gonna cover servers, right?

114
00:06:54.691 --> 00:06:57.160
This is about getting a client-side
application out the door.

115
00:06:57.160 --> 00:06:59.664
Also not gonna talk about serverless.

116
00:06:59.664 --> 00:07:03.932
Because there's a really great
Frontend Masters course on that,

117
00:07:03.932 --> 00:07:08.286
where Scott goes into the deep detail
on how to work with AWS Lambda.

118
00:07:08.286 --> 00:07:12.603
So we have kind of supplementary or
additional courses.

119
00:07:12.603 --> 00:07:15.820
If any of that stuff becomes
really interesting to you,

120
00:07:15.820 --> 00:07:19.525
we will talk a little bit about
using Lambdas to program our CDN.

121
00:07:19.525 --> 00:07:23.599
And that's a little bit what I talked
about with things being dynamic.

