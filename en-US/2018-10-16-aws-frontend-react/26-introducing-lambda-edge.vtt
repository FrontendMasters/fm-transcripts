WEBVTT

1
00:00:02.235 --> 00:00:05.176
&gt;&gt; Steve Kinney: We've set up a CI/CD
pipeline, we put our application on

2
00:00:05.176 --> 00:00:08.725
the Internet, globally distributed it,
so on and so forth, right?

3
00:00:08.725 --> 00:00:13.603
Now we get to kind of the bonus
round of all of this, right?

4
00:00:13.603 --> 00:00:15.260
Which is beginning to figure out,

5
00:00:15.260 --> 00:00:18.755
there's usually a point in time where
you can serve just Static assets.

6
00:00:18.755 --> 00:00:22.825
But all of a sudden you get to a point
where, do I need to put a server in

7
00:00:22.825 --> 00:00:26.551
front of that to do URL rewriting or
any kind of logic, right?

8
00:00:26.551 --> 00:00:28.926
It seems heavy to have to
set up a node server or

9
00:00:28.926 --> 00:00:31.501
some other application
server in front of that.

10
00:00:31.501 --> 00:00:38.079
It also adds a decent amount of
complexity that we might not really want.

11
00:00:38.079 --> 00:00:42.204
So a few years ago Amazon
came out with AWS Lambda, and

12
00:00:42.204 --> 00:00:45.149
AWS Lambda is basically server less.

13
00:00:45.149 --> 00:00:48.813
By server less, I mean,
somebody else's server,

14
00:00:48.813 --> 00:00:52.410
functions that you just pay on execution,
right?

15
00:00:52.410 --> 00:00:57.351
So every time a certain event happens,
this function fires and it can do stuff,

16
00:00:57.351 --> 00:00:57.877
right?

17
00:00:57.877 --> 00:00:59.689
And those are really cool, and

18
00:00:59.689 --> 00:01:03.182
again, Frontend Masters has
a whole course on AWS Lambda.

19
00:01:03.182 --> 00:01:06.697
That you should totally check
out if you're interested

20
00:01:06.697 --> 00:01:08.872
on the server side implications.

21
00:01:08.872 --> 00:01:10.259
For this course,

22
00:01:10.259 --> 00:01:15.902
I am only concerned with how it fits
into our current deployment layout.

23
00:01:15.902 --> 00:01:22.544
And so on top of Lambda
there is also Lambda@Edge.

24
00:01:22.544 --> 00:01:27.135
The major difference is your AWS Lambda
functions exist in one of the data

25
00:01:27.135 --> 00:01:29.780
centers in one of the regions somewhere.

26
00:01:29.780 --> 00:01:35.639
So if you deploy it to US East 1, it's in
Virginia, US West 2 is I think in Oregon.

27
00:01:35.639 --> 00:01:39.509
And I'm not going to play a game
where I try to guess where all

28
00:01:39.509 --> 00:01:42.851
the regions are based out of,
but you get the idea.

29
00:01:42.851 --> 00:01:46.608
And you can even just do
the multi-region if you want.

30
00:01:46.608 --> 00:01:47.958
But generally speaking,

31
00:01:47.958 --> 00:01:51.647
you deploy a Lambda function to a region
that acts almost like a server.

32
00:01:51.647 --> 00:01:55.420
It can be with an API gateway,
so on and so forth.

33
00:01:55.420 --> 00:01:59.191
There's also Lambda@Edge,
which is a very similar concept to Lambda.

34
00:01:59.191 --> 00:02:00.861
It's the same idea as Lambda,

35
00:02:00.861 --> 00:02:05.305
except that you can do it at each one of
those Edge nodes that CloudFront provides.

36
00:02:05.305 --> 00:02:10.537
So all, over 100 plus Edge nodes can
actually run a certain amount of code.

37
00:02:10.537 --> 00:02:17.801
And so you're like, well, why would I do
regular Lambda if I could do Lambda@Edge?

38
00:02:17.801 --> 00:02:18.901
I mean, there's a few reasons, right?

39
00:02:18.901 --> 00:02:23.730
One is that the Edge ones are much
more limited than the ones that are in

40
00:02:23.730 --> 00:02:26.239
a data center for obvious reasons.

41
00:02:26.239 --> 00:02:27.938
There are hundreds of locations.

42
00:02:27.938 --> 00:02:31.625
When you're doing a regular AWS Lambda
function, I think you have,

43
00:02:31.625 --> 00:02:34.627
your Lambda can take up to
five minutes of time, right?

44
00:02:34.627 --> 00:02:38.459
On a Lambda@Edge, depending on which one.

45
00:02:38.459 --> 00:02:41.946
And we'll talk about the different kinds
in a second, gets between five seconds and

46
00:02:41.946 --> 00:02:42.940
30 seconds, right?

47
00:02:42.940 --> 00:02:46.375
So that is way less,
you get less memory, so on and so forth.

48
00:02:46.375 --> 00:02:49.834
We're going to use,
if it's mostly like server side stuff,

49
00:02:49.834 --> 00:02:52.103
you'd probably want a regular Lambda.

50
00:02:52.103 --> 00:02:56.278
Lambda@Edge is really useful when
it comes down to taking any of the,

51
00:02:56.278 --> 00:02:57.849
coming into CloudFront.

52
00:02:57.849 --> 00:03:01.349
Any of the requests and
responses that we're getting back and

53
00:03:01.349 --> 00:03:04.792
the client's interaction with
our Static assets, right?

54
00:03:04.792 --> 00:03:07.079
If we need to do anything along the way,
right?

55
00:03:07.079 --> 00:03:08.830
So if you're modifying requests and

56
00:03:08.830 --> 00:03:11.208
responses Lambda@Edge is
a really good choice.

57
00:03:11.208 --> 00:03:14.106
Because now you can deploy
this all around the world and

58
00:03:14.106 --> 00:03:16.374
be able to solve a whole
bunch of problems.

59
00:03:16.374 --> 00:03:19.006
And we're going to solve a few
of them together today, but

60
00:03:19.006 --> 00:03:21.383
first let's look at exactly
what Lambda@Edge is.

61
00:03:21.383 --> 00:03:26.039
So Lambda@Edge allows you to put Lambda
functions at one of four locations.

62
00:03:26.039 --> 00:03:30.324
Viewer request, origin request,
origin response, viewer response.

63
00:03:30.324 --> 00:03:35.788
We're going to go over each of these
in a little more detail in a moment,

64
00:03:35.788 --> 00:03:38.895
but let's just to do a high level first.

65
00:03:38.895 --> 00:03:43.119
Viewer request is from,
it's basically the Lambda in between

66
00:03:43.119 --> 00:03:46.958
the user's browser before
it hits CloudFront, right?

67
00:03:46.958 --> 00:03:50.647
So it gives you an opportunity
to modify stuff there.

68
00:03:50.647 --> 00:03:53.637
Now, if CloudFront has it in cache,

69
00:03:53.637 --> 00:03:57.600
it just ends up being a viewer response,
right?

70
00:03:57.600 --> 00:04:01.334
That's leaving CloudFront and
going back to the browser, right?

71
00:04:01.334 --> 00:04:05.880
Because we said the first time it gets
a request, it goes all the way back to S3.

72
00:04:05.880 --> 00:04:10.399
Which is our origin in this case,
does everything, and sends it back.

73
00:04:10.399 --> 00:04:14.292
On repeat requests,
it will actually go ahead and

74
00:04:14.292 --> 00:04:19.309
it will just immediately send it
back because it has it in cache.

75
00:04:19.309 --> 00:04:22.817
So viewer request is
browser to CloudFront,

76
00:04:22.817 --> 00:04:25.780
origin request is CloudFront to S3.

77
00:04:25.780 --> 00:04:30.851
Going the opposite direction origin
responses, S3 back to CloudFront,

78
00:04:30.851 --> 00:04:34.403
and viewer response is
CloudFront back to the user.

79
00:04:34.403 --> 00:04:39.255
So let's take a look at what each one of
those means in a little more depth, right?

80
00:04:39.255 --> 00:04:44.157
A viewer request is executed on every
request before CloudFront even checks

81
00:04:44.157 --> 00:04:45.465
its cache, right?

82
00:04:45.465 --> 00:04:50.253
This could be used full for
normalizing, right?

83
00:04:50.253 --> 00:04:53.600
We talked about like we wanted
to ignore headers, right?

84
00:04:53.600 --> 00:04:57.742
But if we need a given header we might
want to put a Lambda to at least like

85
00:04:57.742 --> 00:04:59.091
normalize all those.

86
00:04:59.091 --> 00:05:00.925
So make them all lowercase,
make them all capital.

87
00:05:00.925 --> 00:05:03.620
Don't have this thing where it's like,
okay, I've got one header that's

88
00:05:03.620 --> 00:05:06.123
capitalized, and one that's not
well those are different head, no.

89
00:05:06.123 --> 00:05:07.265
Right?
It's great for

90
00:05:07.265 --> 00:05:10.945
normalizing query strings,
headers and stuff along those lines.

91
00:05:10.945 --> 00:05:15.145
Right now our current application,
it's a react application and

92
00:05:15.145 --> 00:05:18.150
what happens is,
we send you the application.

93
00:05:18.150 --> 00:05:20.725
It loads up, then it checks to
see if you're logged in and

94
00:05:20.725 --> 00:05:22.348
kicks you back into the login page.

95
00:05:22.348 --> 00:05:26.324
One of the things that I want to implement
eventually is just checking if they do

96
00:05:26.324 --> 00:05:27.356
have an off cookie.

97
00:05:28.524 --> 00:05:29.604
&gt;&gt; Steve Kinney: On your way in, if not,

98
00:05:29.604 --> 00:05:32.308
we'll redirect you before we
send you the entire payload.

99
00:05:32.308 --> 00:05:35.673
Wait for it to get parsed by the browser,
all those kind of things.

100
00:05:35.673 --> 00:05:39.451
It needs to make additional network calls,
or if you need to generate responses,

101
00:05:39.451 --> 00:05:41.107
this is before it hits CloudFront.

102
00:05:41.107 --> 00:05:43.440
So none of these would
be cached in this case.

103
00:05:43.440 --> 00:05:47.604
So if it hits CloudFront and CloudFront's
like, I don't have this in cache,

104
00:05:47.604 --> 00:05:49.699
I need to go back to the origin, right?

105
00:05:49.699 --> 00:05:52.839
We have another place where we can drop
in a Lambda at the origin request.

106
00:05:52.839 --> 00:05:57.501
So when there's a cache miss,
before we go to S3.

107
00:05:57.501 --> 00:06:00.892
The viewer request gets about
five seconds to execute,

108
00:06:00.892 --> 00:06:05.162
the origin request gets a luxurious
30 seconds to execute, right?

109
00:06:05.162 --> 00:06:09.151
Not a regular Lambda's five minutes by
any stretch of the imagination, but

110
00:06:09.151 --> 00:06:10.406
a little bit more time.

111
00:06:10.406 --> 00:06:12.342
It can make external network calls.

112
00:06:12.342 --> 00:06:16.364
So if you want to even like go get
something from a different bucket based

113
00:06:16.364 --> 00:06:19.527
on some conditions, so on and
so forth, that's cool.

114
00:06:19.527 --> 00:06:24.033
Like I said, dynamically set in origin, so
this is good for like if you want to A, B,

115
00:06:24.033 --> 00:06:25.313
test so on and so forth.

116
00:06:25.313 --> 00:06:29.394
It can rewrite the URLs, and
other cool stuff like that.

117
00:06:29.394 --> 00:06:33.598
Once we've hit S3 and
we've either found it in S3 or not,

118
00:06:33.598 --> 00:06:37.144
it hasn't been cached yet
so we can change stuff.

119
00:06:37.144 --> 00:06:40.521
So this is again how to go to S3 for
these to get called.

120
00:06:40.521 --> 00:06:45.253
This can make more external calls, it can
modify response headers prior to caching.

121
00:06:45.253 --> 00:06:47.200
The second it gets back to CloudFront,

122
00:06:47.200 --> 00:06:51.458
CloudFront's going to be like, this is
what I do when I get this kind of request.

123
00:06:51.458 --> 00:06:54.777
So this is an opportunity to
change the response, right?

124
00:06:54.777 --> 00:06:59.794
It basically gives you pragmatic access to
modify stuff as it enters CloudFront and

125
00:06:59.794 --> 00:07:01.094
leaves CloudFront.

126
00:07:01.094 --> 00:07:04.929
Which is kind of cool, it means
that your CDN is now programmable.

127
00:07:04.929 --> 00:07:09.411
It's not just like, my assets are there,
and they're distributed, neat,

128
00:07:09.411 --> 00:07:11.279
you can actually do stuff with it.

129
00:07:11.279 --> 00:07:14.509
Finally, the viewer response,
this is always executed, right?

130
00:07:14.509 --> 00:07:17.924
Because we are always gonna at
least have the viewer request and

131
00:07:17.924 --> 00:07:19.218
then viewer response.

132
00:07:19.218 --> 00:07:21.393
It's only if we have a cache or miss that
we go all the way back to the origin.

133
00:07:21.393 --> 00:07:24.293
So it's executed on all requests
after response is received from

134
00:07:24.293 --> 00:07:25.251
the origin or cache.

135
00:07:25.251 --> 00:07:29.914
We can modify the header's outcaching
the result that you can make for

136
00:07:29.914 --> 00:07:31.978
more external network calls.

137
00:07:31.978 --> 00:07:36.335
There is one drawback that, again,
this is one of those things that's like,

138
00:07:36.335 --> 00:07:39.253
let me make this point now and
put it into your brain.

139
00:07:39.253 --> 00:07:42.334
Because you will get tripped
up by it eventually.

140
00:07:42.334 --> 00:07:47.866
Amazon has a lot of things that
start with the word Cloud,

141
00:07:47.866 --> 00:07:51.215
they have CloudFront, as we saw.

142
00:07:51.215 --> 00:07:53.711
There is CloudFormation, which is, again,

143
00:07:53.711 --> 00:07:57.109
the ability to write down your
entire infrastructure as code.

144
00:07:57.109 --> 00:08:00.757
And then say, okay, I need a CloudFront
distribution, S3 bucket, so on and

145
00:08:00.757 --> 00:08:03.210
so forth, and
it will provision all of that for you.

146
00:08:03.210 --> 00:08:06.382
There's also CloudWatch,
and there's probably two or

147
00:08:06.382 --> 00:08:10.487
three other things that start with
the word Cloud, to be honest with you.

148
00:08:10.487 --> 00:08:13.835
CloudWatch is their logging service,
it collects a bunch of logs.

149
00:08:13.835 --> 00:08:17.751
Now, CloudWatch has regions, right?

150
00:08:17.751 --> 00:08:23.634
So if you set a regular
Lambda function in US West 1,

151
00:08:23.634 --> 00:08:30.068
what region do you think you
should be on to read the logs?

152
00:08:30.068 --> 00:08:31.523
US West 1, right?

153
00:08:31.523 --> 00:08:32.716
Makes sense,

154
00:08:32.716 --> 00:08:38.393
what happens if your application
is distributed around the world?

155
00:08:40.176 --> 00:08:42.460
&gt;&gt; Steve Kinney: They're not all
going to be in the same region.

156
00:08:42.460 --> 00:08:46.850
So the tricky part,
especially as you're trying to debug,

157
00:08:46.850 --> 00:08:52.112
is you kind of have to take a lucky
guess what the closest region to you is.

158
00:08:52.112 --> 00:08:55.705
And that's where you have to go look for
the logs, right?

159
00:08:55.705 --> 00:09:00.282
And now, if you are in Northern Virginia,
probably pretty easy.

160
00:09:00.282 --> 00:09:03.834
But as you get further from one
of the actual region's locations,

161
00:09:03.834 --> 00:09:06.001
it becomes a little bit more guesswork.

162
00:09:06.001 --> 00:09:09.367
Particularly if you live in Denver,
Colorado, or

163
00:09:09.367 --> 00:09:14.081
sometimes, like this week,
my logs were in US East 2, which is Ohio.

164
00:09:14.081 --> 00:09:18.109
Definitely a month ago they were
totally in California [LAUGH], so

165
00:09:18.109 --> 00:09:21.122
that is a thing that I'm
going to warn you of now.

166
00:09:21.122 --> 00:09:23.966
Like, is it that your thing
isn't providing any logs, or

167
00:09:23.966 --> 00:09:26.534
are you not looking in the right place for
your logs?

168
00:09:26.534 --> 00:09:31.306
These, again, distributed systems
are hard, this is all cool,

169
00:09:31.306 --> 00:09:34.386
but there are some drawbacks in this case.

