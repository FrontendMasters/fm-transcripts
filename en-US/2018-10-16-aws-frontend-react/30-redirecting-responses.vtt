WEBVTT

1
00:00:00.140 --> 00:00:03.233
&gt;&gt; Steve Kinney: So
we have all of that in place, and

2
00:00:03.233 --> 00:00:06.978
we can see that we're now earning an A+.

3
00:00:06.978 --> 00:00:11.423
I had one little thing that I had to fix,
and I'm not sure if it was a mistake I

4
00:00:11.423 --> 00:00:15.420
made when I set up, or
something that I messed up along the way.

5
00:00:15.420 --> 00:00:20.270
You may or may not have had this,
where it was the /note/1

6
00:00:20.270 --> 00:00:25.027
was a valid 200, but
I was getting a 404 on the root.

7
00:00:25.027 --> 00:00:31.210
So I just handled that relatively
easily by making that okay as well.

8
00:00:34.050 --> 00:00:38.752
So again, we can program everything
along the request and the response.

9
00:00:38.752 --> 00:00:43.630
Let's try one more, which is,
one of the things that we, a lot of times,

10
00:00:43.630 --> 00:00:46.050
do with a server is redirects.

11
00:00:46.050 --> 00:00:49.478
Right, this is, again, we're talking
about maybe, if they haven't logged in,

12
00:00:49.478 --> 00:00:50.994
redirecting them to the login page.

13
00:00:50.994 --> 00:00:53.785
The problem we have right now is, we've
been able to serve different content,

14
00:00:53.785 --> 00:00:55.268
we've been able to change status codes.

15
00:00:55.268 --> 00:00:58.240
Right, we've been able to show
a different picture of Prince.

16
00:00:58.240 --> 00:01:01.857
But with a redirect, you don't wanna say,
hey, you're at notes, four, five, six,

17
00:01:01.857 --> 00:01:03.417
when you're not actually logged in.

18
00:01:03.417 --> 00:01:07.669
We wanna actually change the URL,
right, and that's a 302, and

19
00:01:07.669 --> 00:01:10.322
we need some other
things in there as well.

20
00:01:10.322 --> 00:01:14.705
So you kind of,
last thing that we're gonna try out is,

21
00:01:14.705 --> 00:01:20.450
we're gonna go ahead and,
&gt;&gt; Steve Kinney: We'll go ahead and

22
00:01:20.450 --> 00:01:27.440
basically make a redirect, right, and
this'll happen on origin request.

23
00:01:27.440 --> 00:01:31.629
So as we go in, we leave CloudFront,
we hit the cache.

24
00:01:31.629 --> 00:01:35.788
We're about to go to S3, rather,
right, hey, if we see this is a URL,

25
00:01:35.788 --> 00:01:39.013
we can actually just generate
the response from there.

26
00:01:39.013 --> 00:01:41.907
And that'll get cached on the way out.

27
00:01:41.907 --> 00:01:43.826
So we'll make one more function together.

28
00:01:49.675 --> 00:01:55.044
&gt;&gt; Steve Kinney: We'll call it,
&gt;&gt; Steve Kinney: I'm

29
00:01:55.044 --> 00:01:58.121
feeling less inventive with names
all of a sudden, call it Redirect.

30
00:02:01.002 --> 00:02:05.220
&gt;&gt; Steve Kinney: And we'll go ahead,
&gt;&gt; Steve Kinney: We'll

31
00:02:05.220 --> 00:02:06.977
grab our request object this time.

32
00:02:09.097 --> 00:02:13.733
&gt;&gt; Steve Kinney: So if you see me,
no, yeah, this'll be the request.

33
00:02:13.733 --> 00:02:17.244
Right, I'm gonna take the request,
I'm gonna make a response.

34
00:02:17.244 --> 00:02:20.050
Now since this involves both a request and
a response,

35
00:02:20.050 --> 00:02:23.529
you know that the chances of me
typing the wrong one are pretty high.

36
00:02:23.529 --> 00:02:27.896
So this is basically a late afternoon way
to see if everyone's paying attention, so

37
00:02:27.896 --> 00:02:28.887
we'll try it out.

38
00:02:33.321 --> 00:02:37.147
&gt;&gt; Steve Kinney: We'll get, and again,
if we looked in the Amazon docs for

39
00:02:37.147 --> 00:02:39.423
what the shape of these look like.

40
00:02:39.423 --> 00:02:42.377
If you ever forget, you can just
look at the shape of the object and

41
00:02:42.377 --> 00:02:44.166
traverse to find what you need as well.

42
00:02:44.166 --> 00:02:49.800
But if you do it enough times, you just
start remembering it, famous last words.

43
00:02:52.110 --> 00:02:54.769
&gt;&gt; Steve Kinney: Cool, and then we
can basically make our own response.

44
00:02:57.690 --> 00:03:00.344
&gt;&gt; Steve Kinney: And
we'll say that the status,

45
00:03:00.344 --> 00:03:06.357
the status is actually the only
required property on a response object.

46
00:03:09.317 --> 00:03:15.134
&gt;&gt; Steve Kinney: Say statusDescription:
'Found', and we'll give it some headers.

47
00:03:27.150 --> 00:03:28.798
&gt;&gt; Steve Kinney: I could
probably clean that up slightly.

48
00:03:33.660 --> 00:03:36.197
&gt;&gt; Steve Kinney: This is
gonna be our custom response,

49
00:03:36.197 --> 00:03:39.221
maybe I'll even spell response correctly.

50
00:03:42.244 --> 00:03:47.656
&gt;&gt; Steve Kinney: Cool,
and we'll say that the key

51
00:03:47.656 --> 00:03:52.885
is Location, and the value is,

52
00:03:58.691 --> 00:04:03.381
&gt;&gt; Steve Kinney: Very-secret.

53
00:04:03.381 --> 00:04:07.960
So just take them to wherever
this really legit URL is.

54
00:04:07.960 --> 00:04:13.324
So we've got this response object,
and we'll say if,

55
00:04:16.716 --> 00:04:18.923
&gt;&gt; Steve Kinney: request.uri,

56
00:04:22.231 --> 00:04:24.110
&gt;&gt; Steve Kinney: Is /secret,

57
00:04:24.110 --> 00:04:26.304
we will simply.

58
00:04:31.640 --> 00:04:34.298
&gt;&gt; Steve Kinney: With our response.

59
00:04:34.298 --> 00:04:39.606
Otherwise,
&gt;&gt; Steve Kinney: We'll

60
00:04:39.606 --> 00:04:41.322
pass the request along to S3.

61
00:04:41.322 --> 00:04:45.323
Right, so if it's this one
that we're looking for, cool,

62
00:04:45.323 --> 00:04:50.870
we have a response ready to go for you,
it's 302 and it's redirecting you.

63
00:04:50.870 --> 00:04:54.472
If not, we'll just keep
passing that request along.

64
00:04:54.472 --> 00:04:58.382
You might be asking, how does AWS
slam.edge tell the difference between

65
00:04:58.382 --> 00:05:00.790
a request and response,
I have no idea, so.

66
00:05:06.085 --> 00:05:09.380
&gt;&gt; Steve Kinney: Cool, and so we'll go
ahead we'll and publish a new version.

67
00:05:12.435 --> 00:05:15.594
&gt;&gt; Steve Kinney: Initial version.

68
00:05:18.320 --> 00:05:22.020
&gt;&gt; Steve Kinney: And
we'll grab that first version there.

69
00:05:24.120 --> 00:05:27.218
Add CloudFront,
we'll do this at origin request.

70
00:05:30.780 --> 00:05:32.630
&gt;&gt; Steve Kinney: It should
work out of the box,

71
00:05:32.630 --> 00:05:36.186
I am just gonna do an invalidation though,
for funsies.

72
00:05:42.706 --> 00:05:46.400
&gt;&gt; Steve Kinney: All right, let's see
if CloudFront has distributed that yet.

73
00:05:47.520 --> 00:05:51.575
So if we go to notes,
you should be at notes.

74
00:05:51.575 --> 00:05:59.461
If we go to Secret,
&gt;&gt; Steve Kinney: Let's go ahead and

75
00:05:59.461 --> 00:06:00.420
turn my volume off.

76
00:06:02.586 --> 00:06:03.492
&gt;&gt; Steve Kinney: Apropos of nothing.

77
00:06:06.036 --> 00:06:09.390
&gt;&gt; Steve Kinney: Nope, not yet,
hasn't distributed just yet, so

78
00:06:09.390 --> 00:06:11.365
we'll give it a few seconds.

79
00:06:11.365 --> 00:06:14.645
Another thing, anything you console
log will be put into CloudWatch.

80
00:06:14.645 --> 00:06:17.057
So if you wanna see if
it's hitting at all,

81
00:06:17.057 --> 00:06:20.270
I probably could have afforded
a console log in there.

82
00:06:20.270 --> 00:06:23.213
If it doesn't work in a few seconds,
we'll go ahead and give it another shot.

83
00:06:26.940 --> 00:06:33.540
&gt;&gt; Speaker 2: Is there a way to automate
deploys for after it's distributed?

84
00:06:33.540 --> 00:06:37.350
Do you get a notification anywhere
that it's been distributed?

85
00:06:39.830 --> 00:06:40.590
&gt;&gt; Steve Kinney: No, right, and so

86
00:06:40.590 --> 00:06:43.163
this is actually one of the problems
we're trying to deal with.

87
00:06:43.163 --> 00:06:47.283
Cuz our staging enviorment
is exactly the same as

88
00:06:47.283 --> 00:06:51.210
our production environment
cuz it should be.

89
00:06:51.210 --> 00:06:56.382
Right, and so what happens if one of my
queues deploys the new version of the app,

90
00:06:56.382 --> 00:06:58.295
and they see the same old bug?

91
00:06:58.295 --> 00:07:02.101
Does that mean it didn't get fixed or
that they were too fast, right?

92
00:07:02.101 --> 00:07:07.000
So that is unfortunately, now, one thing
we can do for staging is to simply not

93
00:07:07.000 --> 00:07:12.200
deploy to CloudFront, or let everything
pass through and not cache anything.

94
00:07:12.200 --> 00:07:15.767
So on and so forth, right,
that would all theoretically work.

95
00:07:15.767 --> 00:07:18.960
Except the fact that I just had
the idea just now talking to you.

96
00:07:20.742 --> 00:07:23.736
So now it'll either have
been magically deployed, or

97
00:07:23.736 --> 00:07:27.000
at least we should be getting consoles,
so we can debug it.

98
00:07:27.000 --> 00:07:30.971
&gt;&gt; [MUSIC]

99
00:07:30.971 --> 00:07:32.265
&gt;&gt; Steve Kinney: It works, so

100
00:07:32.265 --> 00:07:38.272
if they go [LAUGH] to
superimportantwebsite.com/secret,

101
00:07:38.272 --> 00:07:44.880
they will get Rickrolled, right,
cuz we modified the requests.

102
00:07:44.880 --> 00:07:47.466
Apparently I was just impatient,
it likely worked the first time.

103
00:07:47.466 --> 00:07:51.005
Cuz all I did was add console logs,
and to my knowledge,

104
00:07:51.005 --> 00:07:53.510
console logs don't make code better.

105
00:07:53.510 --> 00:07:58.063
[LAUGH] Agree to disagree,
[LAUGH] console logs make code great.

106
00:07:58.063 --> 00:08:03.110
But yeah, so
now we're able to do a lot server stuff.

107
00:08:03.110 --> 00:08:05.990
And again, we just kind of
took three different angles,

108
00:08:05.990 --> 00:08:09.770
we looked at a viewer request,
an origin request, and a viewer response.

109
00:08:09.770 --> 00:08:13.850
And we tried to solve things that,
no, I would totally need a server now.

110
00:08:13.850 --> 00:08:15.875
And we realized that we
can program our CDN.

111
00:08:15.875 --> 00:08:20.299
Right, we can do a lot of these
things at the CloudFront level, and

112
00:08:20.299 --> 00:08:23.130
this will be closer to the user as well.

113
00:08:23.130 --> 00:08:26.098
Right, that means, for the viewer request,
we'll cache that, right,

114
00:08:26.098 --> 00:08:27.992
we're not going all the way
to a single server.

115
00:08:27.992 --> 00:08:31.026
We don't have to deploy this
server around the world, right,

116
00:08:31.026 --> 00:08:33.250
it's already deployed everywhere.

117
00:08:33.250 --> 00:08:35.885
So when we modify that request,
we do that at the edge node.

118
00:08:35.885 --> 00:08:40.276
And if CloudFront has that where we
change the request to, for the notes for

119
00:08:40.276 --> 00:08:42.727
index.html, it's not gonna go to S3.

120
00:08:42.727 --> 00:08:47.873
Right, they get that back immediately,
so then we cache that 302 redirect,

121
00:08:47.873 --> 00:08:52.730
with the viewer responses potentially
already coming from cache already.

122
00:08:52.730 --> 00:08:56.470
So we've just moved our entire client-side
application closer to our users.

123
00:09:02.840 --> 00:09:04.667
&gt;&gt; Steve Kinney: So,
if you think about it,

124
00:09:04.667 --> 00:09:08.491
all the problems we had with
our initial deploy are gone.

125
00:09:08.491 --> 00:09:14.260
The URL is wonderful,
client-side routing works as it should.

126
00:09:14.260 --> 00:09:17.613
Right, what we think are valid
routes count as 200s, and

127
00:09:17.613 --> 00:09:19.532
invalid routes count as 404s.

128
00:09:19.532 --> 00:09:23.947
We have a CICD pipeline so that basically,
any time we write code and

129
00:09:23.947 --> 00:09:28.300
we push it out, we know it's going
there as long as the tests pass.

130
00:09:28.300 --> 00:09:29.727
And finally, it's hosted around the world.

131
00:09:29.727 --> 00:09:36.673
So we've solved, we've built ourselves,
honestly, a world class infrastructure,

132
00:09:36.673 --> 00:09:42.525
for the smallest personal site to
the largest client-side application.

133
00:09:42.525 --> 00:09:45.125
Right, so some additional things
that you can do with Lambda Edge.

134
00:09:45.125 --> 00:09:47.827
And we talked a little
bit about A/B testing,

135
00:09:47.827 --> 00:09:52.690
we did a little URL redirection as well,
header normalization, we talked about.

136
00:09:52.690 --> 00:09:56.978
Because if you do decide you care about
certain headers with query strings,

137
00:09:56.978 --> 00:10:01.199
you can at least cut down on cache misses
by making them all the same case, or

138
00:10:01.199 --> 00:10:04.087
format a theme different ways,
so on and so forth.

139
00:10:04.087 --> 00:10:06.551
Redirecting unauthenticated users, right,

140
00:10:06.551 --> 00:10:10.500
you can do a lot of interesting things
to save you, depends on your use case.

141
00:10:10.500 --> 00:10:14.270
For us, I know that we don't check to
see if they're logged in until our giant

142
00:10:14.270 --> 00:10:16.424
client side app has been loaded and
parsed.

143
00:10:16.424 --> 00:10:20.924
That stinks, so the experience right
now that we're trying to fix is,

144
00:10:20.924 --> 00:10:24.130
you go in, our cookies last for 24 hours.

145
00:10:24.130 --> 00:10:27.530
So you go and refresh your browser
when you come into work the next day.

146
00:10:27.530 --> 00:10:31.182
You see the UI for a second,
[LAUGH] and then you get kicked back.

147
00:10:31.182 --> 00:10:34.062
I would love to rid of that experience,
right, and so

148
00:10:34.062 --> 00:10:38.290
there's an opportunity to us do that as
we rework a lot of our infrastructure.

