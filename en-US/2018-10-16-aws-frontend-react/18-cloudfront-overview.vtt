WEBVTT

1
00:00:00.000 --> 00:00:04.053
&gt;&gt; Steve Kinney: My
superimportantwebsite.com is

2
00:00:04.053 --> 00:00:07.837
currently located in Virginia.

3
00:00:07.837 --> 00:00:12.067
We are currently in Minneapolis,
that is not super far from Virginia, but

4
00:00:12.067 --> 00:00:14.899
there are places that
are farther from Virginia.

5
00:00:14.899 --> 00:00:17.985
And so getting this website
will take longer from England,

6
00:00:17.985 --> 00:00:22.570
it will take even longer from Melbourne,
it'll take even longer from Mumbai, right?

7
00:00:22.570 --> 00:00:25.940
The further you are from Virginia,
the longer it will take.

8
00:00:25.940 --> 00:00:31.377
There's not only just physical distance,
but it's not a straight line.

9
00:00:31.377 --> 00:00:33.690
It turns out that the Internet is
in fact a series of tubes, right?

10
00:00:33.690 --> 00:00:36.979
[LAUGH] And you do need to go
through all of those tubes and

11
00:00:36.979 --> 00:00:40.709
all the network stuff in the middle
to get to the actual thing.

12
00:00:40.709 --> 00:00:42.231
Yeah, and because of physics.

13
00:00:42.231 --> 00:00:47.435
One other thing I wanted to point out
real quick is CloudFront is also good

14
00:00:47.435 --> 00:00:53.419
because when you make a network request,
you go through the public tubes, right?

15
00:00:53.419 --> 00:00:55.415
You go through the Internet.

16
00:00:55.415 --> 00:01:00.072
CloudFront is also really useful for
APIs and a whole bunch of other things,

17
00:01:00.072 --> 00:01:03.659
cuz Amazon has their own series
of private tubes, right?

18
00:01:03.659 --> 00:01:06.013
And once you've connected to CloudFront,

19
00:01:06.013 --> 00:01:10.275
if you're trying to get any other Amazon
resource, it is faster for Amazon to go

20
00:01:10.275 --> 00:01:14.680
through its express lane to get stuff than
it is to go through the public Internet.

21
00:01:14.680 --> 00:01:18.694
So you might choose to even put your APIs,
which you don't really cache,

22
00:01:18.694 --> 00:01:23.573
right, behind CloudFront as well, cuz it's
basically an express lane for doing that.

23
00:01:23.573 --> 00:01:25.067
But we're focused on frontend apps today.

24
00:01:25.067 --> 00:01:29.687
So a way to solve the problem where an app
is slower in Melbourne than it is in DC,

25
00:01:29.687 --> 00:01:34.587
is to just move the app closer to people,
it's like an elegantly simple solution.

26
00:01:34.587 --> 00:01:38.442
Being far from a server makes it
take longer, how do you solve this?

27
00:01:38.442 --> 00:01:41.756
You move the servers closer to the people,
right?

28
00:01:41.756 --> 00:01:47.158
And we did it, so our solution, cuz you
could try and be really strategic, right?

29
00:01:47.158 --> 00:01:51.093
I've done metrics, I know that most
of our users are in Germany, so

30
00:01:51.093 --> 00:01:53.801
I'm gonna get a data center in Berlin,
neat.

31
00:01:53.801 --> 00:01:57.101
With CloudFront,
you can just put it everywhere and

32
00:01:57.101 --> 00:01:59.282
you don't have to deal with that.

33
00:01:59.282 --> 00:02:03.648
All right, so this, it's a little
faded on the projector right now,

34
00:02:03.648 --> 00:02:06.839
this is a chart of all of
the CloudFront edge nodes.

35
00:02:06.839 --> 00:02:11.964
So when I say everywhere, I don't really
mean everywhere, I mean these places.

36
00:02:11.964 --> 00:02:14.605
In fact, the two in South Africa are new.

37
00:02:14.605 --> 00:02:21.318
I actually had to change the slide a few
days ago because those were just added.

38
00:02:21.318 --> 00:02:24.325
I'm gonna show you some
matrix in a second,

39
00:02:24.325 --> 00:02:29.287
I actually had to update the matrix
slides too because the response times

40
00:02:29.287 --> 00:02:33.947
was really slow when I first did all
the metrics for a response time.

41
00:02:33.947 --> 00:02:37.775
And then, when I ran it again, because
there's CloudFront nodes there now,

42
00:02:37.775 --> 00:02:38.825
it's fast, right?

43
00:02:38.825 --> 00:02:41.399
So this graph is perpetually out of date,
so

44
00:02:41.399 --> 00:02:45.238
if you're watching this later,
there are probably more nodes.

45
00:02:45.238 --> 00:02:49.214
But there's a lot of them,
there's one in Minneapolis,

46
00:02:49.214 --> 00:02:52.958
there's one in Denver,
they're all over the place.

47
00:02:52.958 --> 00:02:56.972
Cool, so
this is my S3 version of the site,

48
00:02:56.972 --> 00:03:00.452
as you can see, that was in Virginia.

49
00:03:00.452 --> 00:03:05.024
And not so
bad in the Eastern United States, but

50
00:03:05.024 --> 00:03:08.464
not even so great on the West Coast.

51
00:03:08.464 --> 00:03:12.830
Red definitely in Alaska, and
then you can see, what is,

52
00:03:12.830 --> 00:03:18.106
I can't actually see what Denver is
cuz it's covered by another one.

53
00:03:18.106 --> 00:03:23.043
But you can see what looks around
Boston to be 14.3 milliseconds to get

54
00:03:23.043 --> 00:03:27.109
that first byte,
is 250 in Southern Australia, right?

55
00:03:27.109 --> 00:03:31.486
As well as South Africa,
so on and so forth, right?

56
00:03:31.486 --> 00:03:35.236
So the further we get away,
the worse it gets.

57
00:03:35.236 --> 00:03:38.035
So this is the same app.

58
00:03:38.035 --> 00:03:43.035
This is the app we're currently using,
the previous version, right?

59
00:03:43.035 --> 00:03:46.183
So what happens when we
move it to CloudFront and

60
00:03:46.183 --> 00:03:51.078
move it out to all those edge nodes,
this is how the data changes, right.

61
00:03:51.078 --> 00:03:56.724
You can see that now in western Austrailia
it's 2.64 milli seconds, right.

62
00:03:56.724 --> 00:04:00.038
That is roughly, it wasn't even
showing up on the previous one.

63
00:04:00.038 --> 00:04:04.335
But sometimes we're seeing it almost
a hundred time improvement, right.

64
00:04:04.335 --> 00:04:09.286
Just simply by moving it closer to people,
so I think this is super interesting and

65
00:04:09.286 --> 00:04:12.758
you can see, obviously you can
run this test a few times.

66
00:04:12.758 --> 00:04:17.710
You'll get slightly different numbers so
I would pay more attention to the colors.

67
00:04:17.710 --> 00:04:22.215
But we can see we went from a lot of red
as soon as we got far away from Virginia

68
00:04:22.215 --> 00:04:25.864
to pretty consistent green
throughout the world, right?

69
00:04:25.864 --> 00:04:30.197
So very easy performance win that you
don't need to do a lot of work for, right?

70
00:04:30.197 --> 00:04:38.329
It's I would argue that there is no
reason why you shouldn't be using a CDN.

71
00:04:38.329 --> 00:04:43.452
Other cool things is you
get HTTP/2 out of the box.

72
00:04:43.452 --> 00:04:45.282
What is HTTP/2?

73
00:04:45.282 --> 00:04:47.674
It's the second version of HTTP, come on.

74
00:04:47.674 --> 00:04:50.322
Why is that important?

75
00:04:50.322 --> 00:04:54.696
So with HTTP/1 basically,
you could make a single request and

76
00:04:54.696 --> 00:04:56.721
get a response back, right?

77
00:04:56.721 --> 00:05:00.646
So okay, I wanna get this JavaScript
file or this image asset, so on so

78
00:05:00.646 --> 00:05:01.583
forth, right?

79
00:05:01.583 --> 00:05:05.287
You'd request one, you get it back.

80
00:05:05.287 --> 00:05:07.262
Browsers cheat a little bit,

81
00:05:07.262 --> 00:05:12.566
they can open up up to six simultaneous
connections to the same domain, right?

82
00:05:12.566 --> 00:05:15.576
Which is why an old tactic
was to take your assets and

83
00:05:15.576 --> 00:05:17.611
spread them across many domains.

84
00:05:17.611 --> 00:05:21.648
So browsers have a hack where they'll
open up six connections at a time,

85
00:05:21.648 --> 00:05:25.032
and then people decided that to
lay a hack on top of that hack.

86
00:05:25.032 --> 00:05:27.221
Where they would spread it out
through multiple domains so

87
00:05:27.221 --> 00:05:28.747
they'd get another set of six, right?

88
00:05:28.747 --> 00:05:32.351
And then they reuse those connections,
there's a whole bunch of trickery.

89
00:05:32.351 --> 00:05:35.635
With HTTP/2, you can open up
one persistent connection and

90
00:05:35.635 --> 00:05:39.562
it can basically send you pieces of all
the files you want at the same time.

91
00:05:39.562 --> 00:05:41.700
The browser can get them all
under a single connection,

92
00:05:41.700 --> 00:05:43.530
there's no more of this trickery and
hackery.

93
00:05:43.530 --> 00:05:46.599
It's just basically, we're gonna stream
you the JavaScript, the CSS, and

94
00:05:46.599 --> 00:05:47.821
all the stuff at the same time.

95
00:05:47.821 --> 00:05:52.463
You get it all, put it all together and
you're good to go, right?

96
00:05:52.463 --> 00:05:57.825
So by definition, HTTP/2 has wide browser
support at this point and HTTP/1 is

97
00:05:57.825 --> 00:06:03.357
a fall back in CloudFront for those that
don't that's why we kept that box checked.

98
00:06:03.357 --> 00:06:07.491
So you'll see a performance gain
not just from moving it closer, but

99
00:06:07.491 --> 00:06:11.279
you'll also be able to get them
those bits even faster as well.

100
00:06:11.279 --> 00:06:16.081
There's a little bonus too which
is remember, really early on in

101
00:06:16.081 --> 00:06:20.988
this workshop, I talked about how
we pay for every request to S3.

102
00:06:20.988 --> 00:06:24.225
CloudFront caches this stuff
at the edge nodes, right?

103
00:06:24.225 --> 00:06:28.828
Which means the first person to hit
that South African edge node be,

104
00:06:28.828 --> 00:06:34.347
I don't know, I've never seen
superimportantwebsite.com before, right?

105
00:06:34.347 --> 00:06:37.624
So then it goes through
Amazon's private tubes, right?

106
00:06:37.624 --> 00:06:43.060
And it finds that file, but
then it caches it in South Africa.

107
00:06:43.060 --> 00:06:46.740
Which means that if a second
person requests that file,

108
00:06:46.740 --> 00:06:49.332
we don't ask S3 for it again, right?

109
00:06:49.332 --> 00:06:53.625
Which means, you're now paying
less to S3 because many fewer

110
00:06:53.625 --> 00:06:56.704
requests are actually going to S3, right?

111
00:06:56.704 --> 00:07:03.546
And the requests to CloudFront
are way cheaper, right?

112
00:07:03.546 --> 00:07:05.224
So it turns out you're getting
a big performance gain,

113
00:07:05.224 --> 00:07:06.484
you're also saving some money, right?

114
00:07:06.484 --> 00:07:08.305
If you were hosting your own server,

115
00:07:08.305 --> 00:07:11.254
those are requests that are not
going to that server at all.

116
00:07:11.254 --> 00:07:14.620
So if you're worried about being
web scale, [LAUGH] it's easy,

117
00:07:14.620 --> 00:07:16.924
if the request never
made it to your server,

118
00:07:16.924 --> 00:07:20.557
your server doesn't have to support
nearly as many scaling issues.

119
00:07:20.557 --> 00:07:24.950
So it's why it might make sense for
certain things to even again, for

120
00:07:24.950 --> 00:07:30.281
more than just S3, CloudFront might be
a really great choice worth looking into.

121
00:07:30.281 --> 00:07:34.705
At Sun Grid we have geopods which is
effectively a reduced set of that for

122
00:07:34.705 --> 00:07:36.190
our back end services.

123
00:07:36.190 --> 00:07:40.726
We have a few mini data centers
that do roughly the same thing, but

124
00:07:40.726 --> 00:07:43.952
we will likely switch to
this as we move to AWS.

125
00:07:43.952 --> 00:07:48.587
Cool, we talked a little bit about
headers and the fact that by

126
00:07:48.587 --> 00:07:53.684
default they are ignored, right,
and this is to improve caching.

127
00:07:53.684 --> 00:07:57.477
If you homogenized your requests,
you can treat them the same,

128
00:07:57.477 --> 00:07:59.101
which means you can cache.

129
00:07:59.101 --> 00:08:03.239
The more headers you let through, the more
different versions of that request

130
00:08:03.239 --> 00:08:07.324
there are, and so you could have to hit
one of each one before you're cached.

131
00:08:07.324 --> 00:08:10.261
However, there are the headers
that you normally have,

132
00:08:10.261 --> 00:08:13.699
CloudFront adds a few,
you just need to actually whitelist them.

133
00:08:13.699 --> 00:08:17.395
Before you saw the drop down,
it was none and it improves caching,

134
00:08:17.395 --> 00:08:18.855
keep that one on, right?

135
00:08:18.855 --> 00:08:23.827
But CloudFront added some interesting
ones that when we get to Lambda@Edge,

136
00:08:23.827 --> 00:08:26.857
you can kind of explore,
that might be useful.

137
00:08:26.857 --> 00:08:30.996
So these are the ones that it adds, I
think there's one additional one which is

138
00:08:30.996 --> 00:08:33.204
what protocol, by the way HTTP or HTTPS.

139
00:08:33.204 --> 00:08:36.986
But it'll add the whether or
not it's a desktop viewer, mobile viewer,

140
00:08:36.986 --> 00:08:38.828
the space on the user agent string.

141
00:08:38.828 --> 00:08:43.346
A smart TV viewer, a tablet viewer or
from a particular country, all right?

142
00:08:43.346 --> 00:08:50.496
CloudFront will let you say, no one from a
given region, so you might be that's mean.

143
00:08:50.496 --> 00:08:53.799
But depending on if you
are a media service,

144
00:08:53.799 --> 00:08:58.633
right, you might only have
contracts with certain countries.

145
00:08:58.633 --> 00:09:03.373
One of the things I'm kind of interested
in doing is trying to maybe when we fully

146
00:09:03.373 --> 00:09:08.047
support internationalization looking
at the viewer country, trying to take

147
00:09:08.047 --> 00:09:12.179
a guess on which set of language is
to load first in that case, right?

148
00:09:12.179 --> 00:09:16.189
You should go by their client
preferences in JavaScript cuz just cuz I

149
00:09:16.189 --> 00:09:19.381
am in Norway does not mean
I a speak Norwegian, right?

150
00:09:19.381 --> 00:09:22.318
But in terms of which ones
you might pre-load or

151
00:09:22.318 --> 00:09:25.263
something like that,
being clever with that.

152
00:09:25.263 --> 00:09:29.098
These are ignored by default but
you can add them to the whitelist, and

153
00:09:29.098 --> 00:09:32.814
when we get to Lambda@Edge,
you would have them available to you.

154
00:09:32.814 --> 00:09:37.646
One would argue if you do responsive
design correctly, you don't need these,

155
00:09:37.646 --> 00:09:38.880
but yes, totally.

156
00:09:38.880 --> 00:09:41.777
But you could theoretically
intercept requests for

157
00:09:41.777 --> 00:09:44.949
JPEGs and send smaller JPEGs
to mobile devices, right?

158
00:09:44.949 --> 00:09:49.180
There's interesting things
that you could do here.

159
00:09:49.180 --> 00:09:52.881
Probably all of them
are somewhat a bad idea, right?

160
00:09:52.881 --> 00:09:57.608
But again, falls under the, we're not
gonna really cover it but I am going to

161
00:09:57.608 --> 00:10:02.073
expose this to you in case there is
an interesting use case that you have.

162
00:10:02.073 --> 00:10:03.869
I don't wanna shadow it away.

