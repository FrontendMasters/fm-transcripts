WEBVTT

1
00:00:00.650 --> 00:00:04.956
&gt;&gt; Speaker 1: Does Lambda integrate
with GitHub or version control at all?

2
00:00:04.956 --> 00:00:07.986
&gt;&gt; Steve Kinney: Go on.

3
00:00:07.986 --> 00:00:13.223
&gt;&gt; Speaker 1: So they've got
their versions that are listed.

4
00:00:13.223 --> 00:00:17.991
But I'd be concerned about keeping
potentially critical functions out of

5
00:00:17.991 --> 00:00:22.239
version control in their own repo,
where we can roll things back.

6
00:00:22.239 --> 00:00:23.892
&gt;&gt; Steve Kinney: So this is where
some of the stuff like Terraform and

7
00:00:23.892 --> 00:00:25.474
CloudFormation becomes interesting, right?

8
00:00:25.474 --> 00:00:31.534
Cuz you can basically deploy your
infrastructure from any of these files.

9
00:00:31.534 --> 00:00:36.051
So that's a much more useful way of
doing it, rather than going into the UI,

10
00:00:36.051 --> 00:00:38.041
hope for the best, is not great.

11
00:00:38.041 --> 00:00:43.335
But that is definitely, it's one of
those things where having reusable

12
00:00:43.335 --> 00:00:48.906
infrastructure and code,
automated infrastructure, is great, right?

13
00:00:48.906 --> 00:00:50.714
And anything you can do in the UI,
you can do from the command line.

14
00:00:50.714 --> 00:00:55.399
So the very first level is, could you
set up a Travis job, or whatever, to,

15
00:00:55.399 --> 00:00:59.648
upon committing to master,
deploys that through the command line,

16
00:00:59.648 --> 00:01:01.640
up to Lambda, yes, right?

17
00:01:01.640 --> 00:01:05.770
But then you get into the world where your
world is run by a set of batch scripts,

18
00:01:05.770 --> 00:01:07.530
which is true, right?

19
00:01:07.530 --> 00:01:12.409
So the easiest way is the command
line tool, some batch scripts, CI/CD.

20
00:01:12.409 --> 00:01:15.596
A more advanced way is then, when you
get into Terraform and CloudFormation.

21
00:01:15.596 --> 00:01:19.254
Of being able to just push those things,
and spin up the entire world,

22
00:01:19.254 --> 00:01:22.108
is probably a more robust,
long-term way to do that.

23
00:01:22.108 --> 00:01:27.400
But again, doing it in the UI, super quick
and easy, paste, hit Save, hit Publish.

24
00:01:27.400 --> 00:01:31.210
Doing it from the command line, there's
that little bit more effort, right?

25
00:01:31.210 --> 00:01:34.945
If you're doing this all the time,
the effort to get Terraform or

26
00:01:34.945 --> 00:01:36.814
CloudFormation is not unbearable.

27
00:01:36.814 --> 00:01:40.020
I mean, some people on my
team will disagree with that.

28
00:01:40.020 --> 00:01:44.510
But it all depends on
what level of effort you,

29
00:01:44.510 --> 00:01:47.516
putting a lot of effort now to
save it later, totally worth it.

30
00:01:47.516 --> 00:01:49.370
And so you've gotta have
to dial that in correctly.

31
00:01:49.370 --> 00:01:53.020
And that's always one of the hard
choices of, next thing you know,

32
00:01:53.020 --> 00:01:55.700
you're writing your own blogging engine,
[LAUGH].

33
00:01:55.700 --> 00:01:58.670
Cuz who amongst us,
before you can write a blog post,

34
00:01:58.670 --> 00:02:01.360
you have to write a blogging engine, cool.

35
00:02:01.360 --> 00:02:05.105
&gt;&gt; Speaker 3: Can you use CloudFront
in front of your own servers?

36
00:02:05.105 --> 00:02:10.661
&gt;&gt; Steve Kinney: Yep, so we pasted in that
S3 URL, that could be anything, right?

37
00:02:10.661 --> 00:02:14.404
If you have static SS just sitting
on a digital ocean server?

38
00:02:14.404 --> 00:02:17.387
Yeah, you could totally
just point it there, and

39
00:02:17.387 --> 00:02:20.736
it'll cache those things,
so on and so forth, right?

40
00:02:20.736 --> 00:02:23.852
You can actually have a Cloudfront
distribution with multiple origins too.

41
00:02:23.852 --> 00:02:27.992
So you could say, okay,
slash API goes here, so and and so forth.

42
00:02:27.992 --> 00:02:31.124
But yeah, you can put it in front
of pretty much anything, and

43
00:02:31.124 --> 00:02:32.639
it will do its basic caching.

44
00:02:32.639 --> 00:02:36.090
And you can choose what you let through,
and stuff like that as well.

45
00:02:36.090 --> 00:02:37.650
&gt;&gt; Speaker 3: Do they bill
you differently for that,

46
00:02:37.650 --> 00:02:39.077
if you're not getting it from S3?

47
00:02:39.077 --> 00:02:42.322
&gt;&gt; Steve Kinney: They bill you,
I believe, and don't quote me on this,

48
00:02:42.322 --> 00:02:45.506
it is data transferred through CloudFront,
okay?

49
00:02:45.506 --> 00:02:46.957
&gt;&gt; Speaker 3: Okay, [CROSSTALK]
&gt;&gt; Steve Kinney: Right, so

50
00:02:46.957 --> 00:02:50.228
they don't care where it came from.

51
00:02:50.228 --> 00:02:55.798
That said, I said before, when you go from
CloudFront to another Amazon service,

52
00:02:55.798 --> 00:02:59.075
you do use that private
set of tubes to get there.

53
00:02:59.075 --> 00:03:00.351
So it's also really great,

54
00:03:00.351 --> 00:03:03.501
even if you have CloudFront
effectively as a pass-through, right?

55
00:03:03.501 --> 00:03:06.063
So for some of your APIs,
you might not wanna cache stuff,

56
00:03:06.063 --> 00:03:07.647
you might always want fresh stuff.

57
00:03:07.647 --> 00:03:10.933
There are a few things you need,
it's either got a super low TTL, right,

58
00:03:10.933 --> 00:03:11.953
time to live, right?

59
00:03:11.953 --> 00:03:15.406
That means if your server's
getting hammered, and let's say,

60
00:03:15.406 --> 00:03:17.493
that data's not changing that often.

61
00:03:17.493 --> 00:03:21.281
You could have a CloudFront distribution
on an API that has a TTL of one second.

62
00:03:21.281 --> 00:03:24.429
Which means, now, instead of
getting 10,000 requests a minute,

63
00:03:24.429 --> 00:03:26.627
you're only getting 60 on that server,
right?

64
00:03:26.627 --> 00:03:29.968
But even if you pass everything through,
because it's on Amazon Network,

65
00:03:29.968 --> 00:03:32.383
it will get to other Amazon
services faster, as well.

66
00:03:32.383 --> 00:03:36.890
Which is tangential to the question you
asked, but yeah, cool, thank you so much.

67
00:03:36.890 --> 00:03:42.063
&gt;&gt; Group: [APPLAUSE]

