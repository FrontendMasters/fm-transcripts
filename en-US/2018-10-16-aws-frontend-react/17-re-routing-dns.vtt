WEBVTT

1
00:00:00.786 --> 00:00:03.228
&gt;&gt; Steve Kinney: All right, so CloudFront.

2
00:00:06.368 --> 00:00:09.948
&gt;&gt; Steve Kinney: All right, so,
if you've never used CloudFront before,

3
00:00:09.948 --> 00:00:11.674
this is what you should see.

4
00:00:11.674 --> 00:00:15.001
Which is this blue button here
saying Create a Distribution.

5
00:00:15.001 --> 00:00:19.181
Distribution is basically in
the same way you have an S3 bucket,

6
00:00:19.181 --> 00:00:21.618
you have a CloudFront distribution.

7
00:00:21.618 --> 00:00:22.887
All right, you have two options.

8
00:00:22.887 --> 00:00:29.253
You have RTMP, which is for
real time media, and you have Web.

9
00:00:29.253 --> 00:00:30.821
You wanna take a lucky guess
which one we're gonna pick?

10
00:00:32.574 --> 00:00:35.482
&gt;&gt; Steve Kinney: You could have all
trolled me and yelled out RTMP, but yeah,

11
00:00:35.482 --> 00:00:37.204
we're definitely gonna pick Web.

12
00:00:37.204 --> 00:00:40.434
All right, so we have some options.

13
00:00:40.434 --> 00:00:45.610
So it is very tempting
to click one of these.

14
00:00:45.610 --> 00:00:47.540
CloudFront can be used as three buckets.

15
00:00:47.540 --> 00:00:51.872
If you, right now have your
static SS on some other server,

16
00:00:51.872 --> 00:00:57.517
you can put CloudFront in front of that
as well, and it will do the same thing.

17
00:00:57.517 --> 00:01:04.192
So we're actually going to treat our
S3 website as the actual website.

18
00:01:04.192 --> 00:01:07.916
So we're not gonna pick one of these,
even though from a US perspective,

19
00:01:07.916 --> 00:01:09.007
it is very tempting.

20
00:01:09.007 --> 00:01:11.956
And then you do it thinking
it's the same thing, and

21
00:01:11.956 --> 00:01:17.264
then 40 minutes later you're wondering why
your CloudFront distribution doesn't work.

22
00:01:17.264 --> 00:01:20.729
So we'll actually get
the full version of this.

23
00:01:25.049 --> 00:01:27.577
&gt;&gt; Steve Kinney: And we'll paste that in.

24
00:01:27.577 --> 00:01:32.386
And you can see that Amazon clearly knows
roughly what that is because it was

25
00:01:32.386 --> 00:01:34.688
able to fill in the origin ID for us.

26
00:01:34.688 --> 00:01:35.722
&gt;&gt; Speaker 2: Where do you get that from?

27
00:01:35.722 --> 00:01:39.251
&gt;&gt; Steve Kinney: This is the full S3 one,
I went to my browser history to get it,

28
00:01:39.251 --> 00:01:43.182
but if you just go into the Static
Web Hosting option, in Properties,

29
00:01:43.182 --> 00:01:46.130
in your bucket,
you could also get that URL as well.

30
00:01:46.130 --> 00:01:54.833
But spoiler alert, it's the name of your
bucket.s3-website-theregion.amazonaws.com.

31
00:01:54.833 --> 00:01:56.662
Cuz we can all remember that, right?

32
00:01:56.662 --> 00:02:01.215
[LAUGH] Hence I went to my
browser history and found it.

33
00:02:01.215 --> 00:02:06.735
All right, so
we have a viewer protocol policy.

34
00:02:06.735 --> 00:02:11.950
I'm gonna say, hey, anytime they even
try to get HTTP redirect them to HTTPS.

35
00:02:11.950 --> 00:02:15.190
It is a static website, so
we're only allowed GET and HEAD.

36
00:02:15.190 --> 00:02:20.094
You can put CloudFront in front of an API
even and be able to actually intercept

37
00:02:20.094 --> 00:02:23.346
post requests and
stuff along those lines as well.

38
00:02:23.346 --> 00:02:26.595
We don't need any of that.

39
00:02:26.595 --> 00:02:31.995
Moving along, there's some stuff
about cache headers here and

40
00:02:31.995 --> 00:02:34.998
which ones you want to let through.

41
00:02:34.998 --> 00:02:39.905
See, right now we're gonna have
CloudFront ignore all headers, right?

42
00:02:39.905 --> 00:02:43.150
If it ignores all of them,
it can treat all GET requests the same,

43
00:02:43.150 --> 00:02:44.273
which means caching.

44
00:02:44.273 --> 00:02:47.793
Anytime someone asks for
a given resource, it'll cache it.

45
00:02:47.793 --> 00:02:50.764
If you have stuff where you do
care about one of the headers,

46
00:02:50.764 --> 00:02:53.566
you can whitelist just the ones
you care about, right?

47
00:02:53.566 --> 00:02:58.095
Because if you care about every
single permutation of headers, right,

48
00:02:58.095 --> 00:03:02.789
then CloudFront will only be able to
cache on that permutation of headers.

49
00:03:02.789 --> 00:03:05.829
If it ignores all of them,
right, your caching is better.

50
00:03:05.829 --> 00:03:10.378
So my piece of advice, never pick all.

51
00:03:10.378 --> 00:03:15.642
[LAUGH] Pick none for as long as you
can get away with it until you have

52
00:03:15.642 --> 00:03:21.118
a particular use case where you
need to whitelist a header, right?

53
00:03:21.118 --> 00:03:22.528
And there are some, right?

54
00:03:22.528 --> 00:03:26.979
Even CloudFront provides some reasons, but
if you needed some, like an auth token.

55
00:03:26.979 --> 00:03:30.790
Okay, cool, that might be a good reason
and we'll see some other ones that

56
00:03:30.790 --> 00:03:33.710
CloudFront inserts in as well
that you might care about.

57
00:03:33.710 --> 00:03:38.509
But generally speaking, in our
production app, we currently have none,

58
00:03:38.509 --> 00:03:41.189
because our API is a different end point.

59
00:03:41.189 --> 00:03:43.446
So this is solely for
our client-side assets.

60
00:03:43.446 --> 00:03:46.078
So I don't care what the headers are.

61
00:03:46.078 --> 00:03:51.414
I just basically want you to cache the
strongest caching I can get my hands on.

62
00:03:51.414 --> 00:03:56.423
You have a minimum time to live,
maximum which is this is a day.

63
00:03:56.423 --> 00:03:57.425
I think that's a year.

64
00:03:57.425 --> 00:03:59.027
Don't quote me.

65
00:03:59.027 --> 00:04:02.740
Which is just how long that
will stay in cache by default.

66
00:04:02.740 --> 00:04:06.734
And it'll be somewhere in between these
two numbers if the minimum goes higher

67
00:04:06.734 --> 00:04:09.594
than the default,
then the default is the new minimum.

68
00:04:09.594 --> 00:04:12.077
But why would you do that?

69
00:04:12.077 --> 00:04:15.359
Again these,
turn them on if you need them,

70
00:04:15.359 --> 00:04:18.742
leave them off unless
you have a good reason.

71
00:04:18.742 --> 00:04:21.235
Again, okay, send all the cookies through.

72
00:04:21.235 --> 00:04:24.835
Now each cookie is going to
be its own cache hit or miss,

73
00:04:24.835 --> 00:04:27.198
versus treating them all the same.

74
00:04:27.198 --> 00:04:29.869
At which point you would
get better caching.

75
00:04:29.869 --> 00:04:33.865
The less unique you can make every
request, the more generic they all are,

76
00:04:33.865 --> 00:04:35.521
the easier it is to cache them.

77
00:04:35.521 --> 00:04:37.189
Same thing as query strings.

78
00:04:37.189 --> 00:04:39.848
This will just basically
ignore query strings.

79
00:04:39.848 --> 00:04:43.703
If you use query strings for something in
your application, go ahead and turn it on.

80
00:04:43.703 --> 00:04:48.361
But wait until you have the reason
before you turn these things on.

81
00:04:48.361 --> 00:04:52.632
I'm basically only exploring this, I'm
gonna put into your brain that they exist.

82
00:04:52.632 --> 00:04:55.096
[LAUGH] And so,
when you go where are my query strings?

83
00:04:55.096 --> 00:04:58.884
Hopefully, you remember this moment
where I told you leave it off and

84
00:04:58.884 --> 00:05:02.750
then you can go turn it on but leave
it off unless you have a good reason.

85
00:05:02.750 --> 00:05:07.201
All right, so remember I told you
we're gonna G zip our assets?

86
00:05:07.201 --> 00:05:08.603
Boom, we're done.

87
00:05:08.603 --> 00:05:10.940
We're now G zipping assets.

88
00:05:10.940 --> 00:05:12.414
Compress objects automatically?

89
00:05:12.414 --> 00:05:14.108
Yes.

90
00:05:14.108 --> 00:05:16.619
Lambda, we will get to in a little bit.

91
00:05:16.619 --> 00:05:19.172
This is important.

92
00:05:19.172 --> 00:05:25.546
I may or may not have lost 30
minutes of my life earlier this

93
00:05:25.546 --> 00:05:31.425
week when I mistyped the domain
names in here, right?

94
00:05:31.425 --> 00:05:34.113
That way somebody else can't
just wrap your thing, right?

95
00:05:34.113 --> 00:05:38.086
So here we'll do superimportantwebsite.

96
00:05:38.086 --> 00:05:40.143
Your domain for your case.

97
00:05:40.143 --> 00:05:46.155
And we will do www.superimportantwebsite.

98
00:05:46.155 --> 00:05:49.445
Is someone making sure
I didn't make a typo?

99
00:05:49.445 --> 00:05:53.371
Cool, if you didn't buy a domain,
you don't put anything in there and

100
00:05:53.371 --> 00:05:54.688
you leave this option.

101
00:05:54.688 --> 00:05:58.241
Which is they have a cert for
*.cloudfront.net.

102
00:05:58.241 --> 00:06:03.130
So you will get a very
glamorous URL at one point,

103
00:06:03.130 --> 00:06:08.498
which would be like
d42ho7ntw.cloudfront.net

104
00:06:08.498 --> 00:06:13.997
that you can share with all
of your friends and family.

105
00:06:13.997 --> 00:06:18.156
But we're also, we just did all that
work to get superimportantwebsite.com,

106
00:06:18.156 --> 00:06:20.196
we're gonna wanna keep that.

107
00:06:20.196 --> 00:06:25.807
But we would need an SSL cert,
but we made one and there it is.

108
00:06:25.807 --> 00:06:30.385
So now when we hook this up,
when we hook the DNS up

109
00:06:30.385 --> 00:06:34.865
to CloudFront,
it will be HTTPS out of the box.

110
00:06:34.865 --> 00:06:39.545
Now they try to go to HTTP, remember we
said hey, redirect them to HTTPS right?

111
00:06:39.545 --> 00:06:43.104
We will be secure out of the box.

112
00:06:43.104 --> 00:06:45.708
Everything else we're gonna
pretty much leave as defaults.

113
00:06:45.708 --> 00:06:48.962
We're gonna support HTTP 2
because HTTP 2 is great for

114
00:06:48.962 --> 00:06:51.325
reasons that I will explain in a second.

115
00:06:51.325 --> 00:06:54.654
And then the default root
object will be index.html.

116
00:06:54.654 --> 00:06:58.356
So, they just go to
superimportantwebsite.com,

117
00:06:58.356 --> 00:07:00.803
we want to show them index.html.

118
00:07:00.803 --> 00:07:05.560
And you can do all this and you can switch
it to Disabled, which defeats the purpose,

119
00:07:05.560 --> 00:07:07.304
so just leave that as Enabled.

120
00:07:07.304 --> 00:07:09.750
I actually don't know what Comment does.

121
00:07:09.750 --> 00:07:13.355
[LAUGH] Just fun facts that you can,
I guess, have in there.

122
00:07:13.355 --> 00:07:17.787
Cool, and we will create a distribution.

123
00:07:17.787 --> 00:07:21.062
We're gonna do one other thing
because DNS also takes time.

124
00:07:21.062 --> 00:07:25.804
We will also update our DNS records and
hopefully, that will catch up with us.

125
00:07:25.804 --> 00:07:32.418
So I told you that you would get a very
aesthetically pleasing domain name.

126
00:07:32.418 --> 00:07:38.773
This will not be anything yet,
.cloudfront.net, right?

127
00:07:38.773 --> 00:07:41.578
That is currently our beautiful
CloudFront distribution.

128
00:07:41.578 --> 00:07:44.965
If you thought that S3 one was bad,
this is worst.

129
00:07:44.965 --> 00:07:50.012
So let's go ahead, let's go back to
route 53 and we will solve for that.

130
00:07:50.012 --> 00:07:55.144
You can also see that the status
right now is in progress.

131
00:07:55.144 --> 00:07:58.262
You know that it is globally
distributed when it's complete.

132
00:07:58.262 --> 00:08:03.455
But sometimes you can jump the gun and
get it a little bit early.

133
00:08:03.455 --> 00:08:05.965
In fact, out of pure curiosity.

134
00:08:05.965 --> 00:08:06.695
No, not yet.

135
00:08:15.968 --> 00:08:18.021
&gt;&gt; Steve Kinney: All right,
I'm just gonna grab this officially,

136
00:08:18.021 --> 00:08:20.416
just to make sure that I didn't
make a typo or miss a letter.

137
00:08:20.416 --> 00:08:22.333
I'll grab that domain name.

138
00:08:22.333 --> 00:08:25.264
And we will go back to route.

139
00:08:27.858 --> 00:08:30.725
&gt;&gt; Steve Kinney: I love that one of
the Google autocompletes was router login.

140
00:08:30.725 --> 00:08:34.841
[LAUGH] We're gonna change these.

141
00:08:38.305 --> 00:08:39.383
&gt;&gt; Steve Kinney: And we will swap it out.

142
00:08:43.223 --> 00:08:46.977
&gt;&gt; Steve Kinney: So it is an autocomplete
there which if you don't see it in

143
00:08:46.977 --> 00:08:49.884
the autocomplete, don't worry about it.

144
00:08:49.884 --> 00:08:52.200
In my experience, it takes time for

145
00:08:52.200 --> 00:08:56.304
the CloudFront distributions to
end up in that autocomplete.

146
00:08:56.304 --> 00:08:58.222
That's why I copy and pasted it.

147
00:08:58.222 --> 00:09:02.049
I was shocked to find it there.

148
00:09:02.049 --> 00:09:03.869
Of all the times I've done it,

149
00:09:03.869 --> 00:09:08.366
this is the first time that I have seen
my CloudFront distribution in there.

150
00:09:13.311 --> 00:09:14.877
&gt;&gt; Steve Kinney: So eventually,
I see it the next day but

151
00:09:14.877 --> 00:09:16.312
I've never seen it the first time.

152
00:09:16.312 --> 00:09:19.458
So if you don't see it,
you have not done anything wrong.

153
00:09:19.458 --> 00:09:22.094
I was just surprised by something
worked the first time out of the box.

154
00:09:27.617 --> 00:09:29.322
&gt;&gt; Steve Kinney: So we'll save both and

155
00:09:29.322 --> 00:09:32.742
all of that will take
some time to propagate.

156
00:09:32.742 --> 00:09:33.745
So in the meantime,

157
00:09:33.745 --> 00:09:37.875
we've set up CloudFront without actually
talking about why CloudFront is great,

158
00:09:37.875 --> 00:09:41.013
even though we accidentally
discovered some of those things.

