WEBVTT

1
00:00:00.248 --> 00:00:03.225
So Z-Index sets the stacking
order of elements and

2
00:00:03.225 --> 00:00:06.410
it takes a couple of different values,
can take auto,

3
00:00:06.410 --> 00:00:11.000
the keyword auto can take an integer,
or can take a global value like inherit.

4
00:00:12.670 --> 00:00:16.580
Here's a CodePen I'm gonna take
you to Skellington the slides.

5
00:00:16.580 --> 00:00:18.790
Here we've got a div with
a class of container.

6
00:00:18.790 --> 00:00:20.348
We got four blocks inside of it here.

7
00:00:22.789 --> 00:00:27.238
So, each block, there's a block
class that is setting the width and

8
00:00:27.238 --> 00:00:28.629
height explicitly.

9
00:00:30.842 --> 00:00:33.200
And then each color is
gonna set the background.

10
00:00:33.200 --> 00:00:35.771
Each class that has a color name will
set the background to a different

11
00:00:35.771 --> 00:00:36.400
color, right?

12
00:00:37.460 --> 00:00:38.620
So ignore the position for now.

13
00:00:38.620 --> 00:00:40.129
We're not gonna worry about position.

14
00:00:42.100 --> 00:00:44.180
What I want to do is show
you the stacking order.

15
00:00:44.180 --> 00:00:47.461
So right now, they all have
a stacking order index, or z-index 0.

16
00:00:47.461 --> 00:00:49.764
They start out at 0.

17
00:00:49.764 --> 00:00:53.010
So the yellow square here is on top.

18
00:00:53.010 --> 00:00:56.683
It's defined last in our code here.

19
00:00:56.683 --> 00:01:01.840
If I set z-index of -1, well, now it's
gonna come behind all of the other

20
00:01:01.840 --> 00:01:07.820
elements because the other elements have a
z-index of 0, so they'll sit on top of it.

21
00:01:07.820 --> 00:01:11.461
And if I want the red one to be on top,
I can give it a z-index of 2 or

22
00:01:11.461 --> 00:01:13.200
even a z-index of 1, right?

23
00:01:13.200 --> 00:01:14.830
Because zero is a default.

24
00:01:16.190 --> 00:01:20.237
So this is a way that you can layer
elements into your UI regardless of how

25
00:01:20.237 --> 00:01:23.080
it's structured in your code and
your HTML code.

26
00:01:26.627 --> 00:01:28.520
Okay, we go back to this.

27
00:01:28.520 --> 00:01:31.210
Now, I just mentioned
it to ignore position.

28
00:01:31.210 --> 00:01:34.329
Position is something that I struggled
with immensely when I started out,

29
00:01:34.329 --> 00:01:36.170
it was very confusing for
me to understand.

30
00:01:36.170 --> 00:01:40.440
So I'm hoping that this
explanation will suffice.

31
00:01:40.440 --> 00:01:43.950
So, position sets how an element
is positioned in a document.

32
00:01:43.950 --> 00:01:45.645
We can set top, right, bottom, and

33
00:01:45.645 --> 00:01:48.340
left values to assign it in
accordance with the position.

34
00:01:48.340 --> 00:01:49.200
But let's look at this.

35
00:01:49.200 --> 00:01:51.070
And again, these are not cumulative.

36
00:01:51.070 --> 00:01:53.120
There are other values for position.

37
00:01:53.120 --> 00:01:54.960
These are the most frequently used.

38
00:01:57.080 --> 00:01:58.569
So a position of static.

39
00:01:58.569 --> 00:02:02.409
The element is positioned according
to the normal document flow.

40
00:02:02.409 --> 00:02:05.588
So the top, right, bottom and
left the properties,

41
00:02:05.588 --> 00:02:10.050
they won't have an effect on an element
with a position of static, right?

42
00:02:10.050 --> 00:02:15.182
So if we've got two boxes and we set
the red box to have a position of static,

43
00:02:15.182 --> 00:02:17.235
it's gonna stay where it is.

44
00:02:17.235 --> 00:02:22.391
Let me, Open this.

45
00:02:22.391 --> 00:02:24.259
So we set position of static,

46
00:02:24.259 --> 00:02:28.384
we can see the red boxes to find first,
blue boxes to find second.

47
00:02:28.384 --> 00:02:33.160
Position of static does not change,
where it's located stays the same.

48
00:02:33.160 --> 00:02:36.190
And you can see top and left,
that has no effect on that element.

49
00:02:38.060 --> 00:02:39.072
Position relative.

50
00:02:39.072 --> 00:02:42.934
So that element is positioned according
to the normal document flow, but

51
00:02:42.934 --> 00:02:46.550
it's offset relative to where
it normally would show up.

52
00:02:46.550 --> 00:02:50.040
So this is where top, right, bottom,
and left will come into play.

53
00:02:50.040 --> 00:02:54.850
So if we go back here, let's set a
position on relative on this red box here.

54
00:02:56.310 --> 00:02:58.110
So comment this out.

55
00:02:58.110 --> 00:02:59.130
It's position relative.

56
00:03:03.070 --> 00:03:04.170
There we go, that's why.

57
00:03:04.170 --> 00:03:06.900
There was a top value
set on the box class.

58
00:03:06.900 --> 00:03:08.890
Okay, so
we set position relative on the box.

59
00:03:08.890 --> 00:03:11.250
It's rendered normally where it would be,
right?

60
00:03:11.250 --> 00:03:15.080
But let's say we wanna shift it
down into the right 20 pixels.

61
00:03:16.680 --> 00:03:19.570
We can do that using top 20 pixels,
left 20 pixels.

62
00:03:19.570 --> 00:03:24.168
It's saying take the top and the left and
shift them 20 pixels to the right,

63
00:03:24.168 --> 00:03:25.320
20 pixels down.

64
00:03:26.550 --> 00:03:28.550
So that's what relative does.

65
00:03:28.550 --> 00:03:30.676
It's relative to where it
normally would show up.

66
00:03:33.725 --> 00:03:35.450
Absolute is interesting.

67
00:03:35.450 --> 00:03:38.340
So it's gonna remove the element
from the normal document flow.

68
00:03:39.360 --> 00:03:43.840
And it's gonna be positioned relative
to its closest positioned ancestor.

69
00:03:43.840 --> 00:03:45.780
So what does that mean?

70
00:03:45.780 --> 00:03:46.616
Let's go back in here.

71
00:03:49.853 --> 00:03:54.330
So let's change this to position absolute,
and I'm gonna comment these out.

72
00:03:55.910 --> 00:03:58.870
So position absolute, okay,
we're only seeing the red box.

73
00:04:00.050 --> 00:04:00.860
Why is that?

74
00:04:00.860 --> 00:04:02.060
That's a little strange?

75
00:04:02.060 --> 00:04:05.160
Because we're setting position
absolute on this red box,

76
00:04:05.160 --> 00:04:08.508
it's being removed from the DOM
the normal flow and as a result,

77
00:04:08.508 --> 00:04:11.980
the blue box underneath it is being
rendered in its place, right?

78
00:04:11.980 --> 00:04:14.300
It's filling the spot where the red
one normally would have gone.

79
00:04:16.020 --> 00:04:18.663
But because position
absolute is removing it,

80
00:04:18.663 --> 00:04:24.449
it's also setting the z-index to be
higher, so it's gonna sit on top And

81
00:04:24.449 --> 00:04:27.646
that's why we're seeing it,
only the red box.

82
00:04:27.646 --> 00:04:30.705
The blue box is being rendered where
the red one should have been, but

83
00:04:30.705 --> 00:04:32.830
the red one is now higher
in the stacking order.

84
00:04:34.570 --> 00:04:36.864
So if we set top and
left again now, on the red box,

85
00:04:36.864 --> 00:04:38.910
we can see they're both there.

86
00:04:38.910 --> 00:04:40.787
Blue is pretending that
red does not exist.

87
00:04:43.053 --> 00:04:46.340
And top and left have moved
the position of this red box.

88
00:04:47.480 --> 00:04:50.530
But what's weird, why is it so
close to this border here?

89
00:04:50.530 --> 00:04:55.160
Like we're trying to make it 20
pixels to the right, 20 pixels down.

90
00:04:55.160 --> 00:04:57.330
So why is it so close to this container?

91
00:05:00.380 --> 00:05:05.140
And that's because we haven't set
a position on the container here.

92
00:05:05.140 --> 00:05:09.375
This container does not
have position relative, so

93
00:05:09.375 --> 00:05:14.284
what's happening is that this
red box is being positioned in

94
00:05:14.284 --> 00:05:18.145
relation to this body,
the body of the render.

95
00:05:18.145 --> 00:05:23.920
It's being positioned relative to the
viewport or the rendering of the UI here.

96
00:05:25.020 --> 00:05:29.300
So in order to fix that, we want this
positioned relative to its container.

97
00:05:29.300 --> 00:05:31.690
The container has to have
a position of relative.

98
00:05:32.900 --> 00:05:36.965
So now it's being respected
from the container,

99
00:05:36.965 --> 00:05:40.367
as opposed to the entire viewport there.

100
00:05:40.367 --> 00:05:43.748
If you're wondering why you're seeing
a little like sliver of blue here,

101
00:05:43.748 --> 00:05:46.873
that's because we've set 24 pixels
of padding on the container.

102
00:05:46.873 --> 00:05:50.233
And so, we're getting a tiny bit
of overlap because we've said 20,

103
00:05:50.233 --> 00:05:53.370
move this down 20 by 20, but
there's 24 pixels of padding.

104
00:05:53.370 --> 00:05:55.560
So that's why you're seeing
that little sliver there.

105
00:05:55.560 --> 00:05:59.059
There is a great use case for this.

106
00:06:01.300 --> 00:06:02.591
And that is tool tips.

107
00:06:05.282 --> 00:06:08.628
So when you hover over this,
you want a tool tip to display, right?

108
00:06:08.628 --> 00:06:10.750
This is a pretty common paradigm.

109
00:06:10.750 --> 00:06:12.520
So we've got a div, that's the container.

110
00:06:12.520 --> 00:06:14.967
We've got a paragraph that says,
hover over me.

111
00:06:14.967 --> 00:06:15.920
We've got a tool tip.

112
00:06:17.710 --> 00:06:23.961
So we want this tooltip to be
positioned relative to the container,

113
00:06:23.961 --> 00:06:31.680
we want it to show up relative to what's
already in here to this paragraph here.

114
00:06:31.680 --> 00:06:34.540
So I'm not gonna run through
this example in depth here.

115
00:06:34.540 --> 00:06:38.251
I just wanted to point out that it's very
common practice to use position absolute

116
00:06:38.251 --> 00:06:41.963
and have the container have a position of
relative when you're trying to position

117
00:06:41.963 --> 00:06:42.950
a tooltip in your UI.

118
00:06:42.950 --> 00:06:44.640
So, feel free to check this out later.

119
00:06:47.230 --> 00:06:49.020
That leads us to position of fixed.

120
00:06:49.020 --> 00:06:53.494
So, fixed and sticky are two that confuse
the living daylights out of me for

121
00:06:53.494 --> 00:06:54.640
the longest time.

122
00:06:54.640 --> 00:06:55.800
I didn't understand the difference.

123
00:06:55.800 --> 00:06:58.920
So I have a couple of videos that
will illustrate the difference here.

124
00:07:00.010 --> 00:07:03.184
So fixed, when you have
an element of position fixed,

125
00:07:03.184 --> 00:07:06.090
it is again removed
from the document flow.

126
00:07:06.090 --> 00:07:08.983
And it's positioned relative to
the containing block that's established by

127
00:07:08.983 --> 00:07:10.030
the viewport.

128
00:07:10.030 --> 00:07:11.180
So what does that mean?

129
00:07:11.180 --> 00:07:12.907
So here is a little video.

130
00:07:17.553 --> 00:07:21.315
Our red box has a position of fixed,
you can see that on line 20 here and

131
00:07:21.315 --> 00:07:23.930
we can go do this in the code pen.

132
00:07:23.930 --> 00:07:27.906
And you'll notice as we scroll it
scrolls with the viewport, right?

133
00:07:31.476 --> 00:07:35.459
So, position fixed, it's gonna be fixed.

134
00:07:35.459 --> 00:07:40.420
20 pixels top,
it's pushed 20 pixels right and down, but

135
00:07:40.420 --> 00:07:44.830
it scrolls with you the entire
viewport width, right?

136
00:07:49.616 --> 00:07:54.710
When it comes to position sticky,
it's very similar.

137
00:07:56.230 --> 00:08:03.230
The difference is, it's going to stop
when its container has reached its end.

138
00:08:05.850 --> 00:08:10.236
So if we go back to our CodePen, and now
instead of fixed we want it to be sticky,

139
00:08:10.236 --> 00:08:11.970
let's code it in real time.

140
00:08:11.970 --> 00:08:13.140
We've got our container.

141
00:08:13.140 --> 00:08:14.517
Let's give it a height.

142
00:08:14.517 --> 00:08:20.310
Let's say height 600 Pixels, right?

143
00:08:20.310 --> 00:08:24.241
We give it a border, so we can see were
that continuous lies, and say 4 pixels

144
00:08:24.241 --> 00:08:28.010
solid block, am also coding live
an the fly, so let's see how this goes.

145
00:08:29.630 --> 00:08:35.124
I wanna be able to wrap this, we gonna
give it div with a class of wrapper,

146
00:08:35.124 --> 00:08:41.360
I am using that mi notation for brevity
here so, bear with me, ignore my spacing.

147
00:08:42.510 --> 00:08:44.080
So now we've got a div
with a class of wrapper.

148
00:08:44.080 --> 00:08:47.370
We'll give the wrapper a background
color so we can see it.

149
00:08:47.370 --> 00:08:51.790
Background, we'll call it light gray,
it's a named color.

150
00:08:53.420 --> 00:08:59.030
And we will give this a height,
let's say, of 400 pixels, okay?

151
00:08:59.030 --> 00:09:05.610
So it doesn't take up the entire,
Container.

152
00:09:05.610 --> 00:09:09.405
Now, instead of fixed, you can see fixed,
it's gonna scroll with the whole thing,

153
00:09:09.405 --> 00:09:11.890
regardless of the bounding container here.

154
00:09:11.890 --> 00:09:13.940
Change this to sticky.

155
00:09:13.940 --> 00:09:15.731
If we change this to sticky,

156
00:09:15.731 --> 00:09:19.626
it's gonna stop when this
container is scrolled out of view.

157
00:09:19.626 --> 00:09:24.820
Let's illustrate that, let's make this
800 so there's a bigger gap, right?

158
00:09:24.820 --> 00:09:29.301
Scrolls and scrolls, it stops and it
scrolls up with the rest of its container.

159
00:09:29.301 --> 00:09:32.171
So that's the difference between fixed and
sticky.

160
00:09:32.171 --> 00:09:34.729
All right, that was the hardest
concept in this whole course, so

161
00:09:34.729 --> 00:09:36.183
if you stuck with me you're golden.

