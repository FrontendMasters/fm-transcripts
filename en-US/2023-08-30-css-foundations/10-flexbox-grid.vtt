WEBVTT

1
00:00:00.000 --> 00:00:05.551
So Flexbox became a CSS
module in October of 2017.

2
00:00:05.551 --> 00:00:10.592
And its goal was to lay out and
distribute space between or

3
00:00:10.592 --> 00:00:13.226
around items in a container.

4
00:00:13.226 --> 00:00:18.072
And it wanted to do this even if
the container had an unknown size, or

5
00:00:18.072 --> 00:00:19.270
flexible size.

6
00:00:19.270 --> 00:00:22.532
They wanted to be able to resize
elements within that flexible container.

7
00:00:25.330 --> 00:00:29.744
So to get started, you can set the display
property on the container to flex.

8
00:00:29.744 --> 00:00:31.560
So now it's a flex container.

9
00:00:33.540 --> 00:00:36.391
Now if you're in the slides, there is
a link to a CodePen where you can go try

10
00:00:36.391 --> 00:00:38.899
this out, but I have slides, so
we'll talk through the slides.

11
00:00:40.400 --> 00:00:43.136
We're only going to cover some of
the flex container properties and

12
00:00:43.136 --> 00:00:44.250
some of their values.

13
00:00:44.250 --> 00:00:46.650
These are the ones I'm gonna
use most often day to day.

14
00:00:46.650 --> 00:00:50.500
Of course, if you need more
advanced Flexbox properties,

15
00:00:50.500 --> 00:00:55.428
I'd recommend checking out there's
a great article in CSS tricks that lays

16
00:00:55.428 --> 00:00:57.749
out all of the properties for flex.

17
00:00:59.533 --> 00:01:01.688
So flex-direction.

18
00:01:01.688 --> 00:01:06.270
This establishes the main axis
along which items are laid out.

19
00:01:06.270 --> 00:01:09.705
It can be row, row- reverse,
column or column-reverse.

20
00:01:09.705 --> 00:01:14.270
So if you have row,
we've got four boxes here.

21
00:01:14.270 --> 00:01:15.110
Row is the default.

22
00:01:16.110 --> 00:01:20.050
So the blue box is the first box,
the purple box is the last defined box.

23
00:01:20.050 --> 00:01:20.980
So they're laid out in a row.

24
00:01:22.910 --> 00:01:27.610
When we have row reverse, you can see,
the items themselves are reversed.

25
00:01:27.610 --> 00:01:31.120
So, now the first declared box, the blue
one, it's all the way on the right.

26
00:01:33.260 --> 00:01:35.980
So they reverse themselves, but they're
also on the right side of the container.

27
00:01:35.980 --> 00:01:38.055
And that's cuz we're changing the axis.

28
00:01:41.690 --> 00:01:46.306
Setting flex-direction to column
lays out the items in a column.

29
00:01:46.306 --> 00:01:47.987
And as you might expect,

30
00:01:47.987 --> 00:01:52.800
column-reverse swaps the direction
as well as the order of the items.

31
00:01:55.330 --> 00:01:59.800
So that's the first most commonly
used flex property on the container.

32
00:02:02.250 --> 00:02:04.950
Justify-content defines
alignment along the main axis.

33
00:02:04.950 --> 00:02:07.407
So these are a few of the properties
that can be used, and

34
00:02:07.407 --> 00:02:09.306
let's take a look at what that looks like.

35
00:02:09.306 --> 00:02:13.615
So this didn't really change much,
justify-content flex-start.

36
00:02:15.217 --> 00:02:17.070
Now you can see justify-content flex end.

37
00:02:17.070 --> 00:02:19.416
This looks like what we just saw, but

38
00:02:19.416 --> 00:02:23.850
you'll notice that the first
declared box is still on the left.

39
00:02:23.850 --> 00:02:26.579
So it's not swapping the order,
it's not reversing the order,

40
00:02:26.579 --> 00:02:29.860
it's just shifting them to the end of
that flex container or justifying them.

41
00:02:31.700 --> 00:02:33.420
We can justify items to the center.

42
00:02:35.510 --> 00:02:40.335
We can also justify content with space
between, so the items are gonna be

43
00:02:40.335 --> 00:02:45.415
distributed evenly with the first item
on the left, last item on the right.

44
00:02:48.123 --> 00:02:52.541
Space around is gonna put just
that space around the items.

45
00:02:52.541 --> 00:02:55.899
So they're distributed evenly in
line with equal space around them.

46
00:02:58.480 --> 00:03:00.500
Space-evenly only is pretty similar.

47
00:03:00.500 --> 00:03:05.210
It's a little nuanced, but the distance
between any two items is equal.

48
00:03:05.210 --> 00:03:12.200
So that includes the ends as well,
which is different from space around.

49
00:03:12.200 --> 00:03:15.260
Admittedly, my screenshots
do not do it justice.

50
00:03:15.260 --> 00:03:17.656
So [LAUGH] feel free to go play
around with the CodePen or

51
00:03:17.656 --> 00:03:19.053
look at the CSS Tricks article.

52
00:03:21.240 --> 00:03:24.684
Now align items, I always get
confused with justify content.

53
00:03:24.684 --> 00:03:28.600
So it's hit or miss for me,
half the time I define the wrong one.

54
00:03:28.600 --> 00:03:30.870
You probably will too, but that's okay.

55
00:03:31.870 --> 00:03:35.820
So this defines the behavior for how
they are laid out along the cross axis.

56
00:03:37.220 --> 00:03:41.097
So if the main axis is going
from left to right horizontally,

57
00:03:41.097 --> 00:03:45.440
the cross axis is gonna be vertically
up and down, perpendicular.

58
00:03:45.440 --> 00:03:48.250
So here we've got a larger
flex container here.

59
00:03:48.250 --> 00:03:52.958
We're aligning our items to
the start of the cross-axis here.

60
00:03:52.958 --> 00:03:56.792
Now you can see our items when we
define that as align-items flex-end

61
00:03:56.792 --> 00:03:58.833
now they've moved to the bottom.

62
00:03:58.833 --> 00:04:00.476
So it's not left and right anymore,

63
00:04:00.476 --> 00:04:02.652
now we're on the cross
axis which is up and down.

64
00:04:05.710 --> 00:04:09.638
We can align items to the center.

65
00:04:09.638 --> 00:04:13.360
We can also stretch our items so
that they take up the entire height.

66
00:04:14.560 --> 00:04:17.220
Additionally, we can wrap our flex items.

67
00:04:17.220 --> 00:04:20.400
So by default, flex items are all
gonna try to fit onto one line.

68
00:04:21.590 --> 00:04:24.150
But we can change this and
we can allow items to wrap as needed.

69
00:04:24.150 --> 00:04:25.930
We'll see this with
the speakers page later.

70
00:04:27.860 --> 00:04:30.872
So when our flex container is too small,

71
00:04:30.872 --> 00:04:35.935
you can see our items have squished
their width to fit onto one line.

72
00:04:38.303 --> 00:04:42.369
If we say, flex-wrap, set it to wrap.

73
00:04:42.369 --> 00:04:45.550
Well, now you can see our items
are maintaining their predefined width.

74
00:04:47.170 --> 00:04:50.094
And since there's not
enough space horizontally,

75
00:04:50.094 --> 00:04:52.559
the last one is gonna
jump down to a new line.

76
00:04:54.865 --> 00:04:58.054
And then there's also wrap-reverse.

77
00:04:58.054 --> 00:05:03.960
So the full line will be at the bottom and
that when it wraps it'll wrap above.

78
00:05:03.960 --> 00:05:06.300
I don't know what use case
you might have for this.

79
00:05:06.300 --> 00:05:07.018
I'm sure there is one.

80
00:05:07.018 --> 00:05:11.096
I couldn't tell you, but
it is possible to do it [LAUGH].

81
00:05:15.597 --> 00:05:22.532
So whereas Flexbox is one dimensional,
grid is a two dimensional layout tool.

82
00:05:22.532 --> 00:05:27.355
So this was shipped to
browsers in March of 2017.

83
00:05:29.976 --> 00:05:34.526
And we define grid the same way that we
define flex with the display property.

84
00:05:34.526 --> 00:05:35.321
So display grid.

85
00:05:38.589 --> 00:05:42.456
So here's a mockup of a two-dimensional
layout that might benefit from using

86
00:05:42.456 --> 00:05:43.462
a grid as it's two.

87
00:05:43.462 --> 00:05:45.474
Yeah, like I said,
it's two dimensional and

88
00:05:45.474 --> 00:05:48.170
there's always this argument of
should use flex box or grid.

89
00:05:48.170 --> 00:05:50.120
And the answer is, it depends [LAUGH].

90
00:05:51.490 --> 00:05:54.856
Both, you can use them together,
and you should use them together,

91
00:05:54.856 --> 00:05:56.897
and we'll see how to do that in practice.

92
00:05:56.897 --> 00:06:00.116
But grid is meant for two-dimensional,
like this, and flexbox is meant for

93
00:06:00.116 --> 00:06:03.450
one-dimensional, like maybe a navigation,
which is what we'll use it for.

94
00:06:06.765 --> 00:06:08.999
So we define grid template columns.

95
00:06:08.999 --> 00:06:15.310
This looks very scientific here, but we'll
actually draw this out with diagrams.

96
00:06:15.310 --> 00:06:18.792
So this is our maker from two slides ago,
we've got our nav,

97
00:06:18.792 --> 00:06:22.840
that spans the whole top,
we've got an aside, a main, and a footer.

98
00:06:24.759 --> 00:06:28.957
So the aside is gonna have, let's say,
a fixed width of 180 pixels.

99
00:06:28.957 --> 00:06:32.146
I've made these numbers up for
the sake of this example.

100
00:06:32.146 --> 00:06:35.603
And then we're saying, okay, well,
we want the main content and

101
00:06:35.603 --> 00:06:40.010
the footer just to take up one fraction of
whatever the available space left over is.

102
00:06:40.010 --> 00:06:41.464
So just take up the remaining space.

103
00:06:44.742 --> 00:06:48.783
So we can declare that using this
grid template columns property.

104
00:06:48.783 --> 00:06:51.773
So we're saying we want two columns here.

105
00:06:51.773 --> 00:06:54.220
The first is 180 pixels fixed.

106
00:06:54.220 --> 00:06:58.744
The second one, just take up
the remaining available space.

107
00:06:58.744 --> 00:07:01.540
&gt;&gt; Can we use percentage with it?

108
00:07:01.540 --> 00:07:02.796
&gt;&gt; Yes, you can use percentage.

109
00:07:02.796 --> 00:07:04.921
Absolutely, yeah.

110
00:07:08.720 --> 00:07:11.182
In terms of rows,
we've got three rows here.

111
00:07:11.182 --> 00:07:14.350
We've got our nav, our aside and
main and our footer.

112
00:07:14.350 --> 00:07:15.650
Where our footer sits.

113
00:07:15.650 --> 00:07:21.049
So the nav will have a fixed height of 80
pixels, our footer will be a fixed height

114
00:07:21.049 --> 00:07:26.540
of 100 pixels, and whatever's in the
middle just take up the remaining space.

115
00:07:26.540 --> 00:07:29.990
So that's how we [LAUGH]
define that in English terms.

116
00:07:31.160 --> 00:07:34.590
We're gonna find our rows essentially
the same way as the columns.

117
00:07:34.590 --> 00:07:35.521
We said we want three rows.

118
00:07:35.521 --> 00:07:39.530
The first is 80 pixels, the middle one
is whatever the remaining space is and

119
00:07:39.530 --> 00:07:41.122
the last one is 100 pixels.

120
00:07:44.294 --> 00:07:48.942
Now this is terrible to read
in English terms, right?

121
00:07:48.942 --> 00:07:53.490
Because what we're doing now is we're
taking these four areas, nav, aside, main,

122
00:07:53.490 --> 00:07:57.310
and footer, and we're defining a grid
area for each of these sections.

123
00:07:57.310 --> 00:08:02.828
We're saying, I want nav to take
up this grid area 1 / 1 / 2 / 3.

124
00:08:02.828 --> 00:08:07.213
So it spans the first row,

125
00:08:07.213 --> 00:08:11.781
I'm confusing my own self now.

126
00:08:14.111 --> 00:08:15.363
We're defining this grid area.

127
00:08:15.363 --> 00:08:15.903
You know what?

128
00:08:15.903 --> 00:08:17.330
We're gonna do this together.

129
00:08:17.330 --> 00:08:18.340
Let's look up grid area.

130
00:08:19.860 --> 00:08:22.660
Not beautiful to read, that's why
I'm confusing myself here, right?

131
00:08:22.660 --> 00:08:23.430
It's a shorthand.

132
00:08:23.430 --> 00:08:28.010
It specifies the start location and
size of a grid item in the layout.

133
00:08:28.010 --> 00:08:32.189
So these four values correspond to
grid row start, grid column start,

134
00:08:32.189 --> 00:08:34.290
grid row end, and grid column end.

135
00:08:36.260 --> 00:08:36.970
That's a lot, right?

136
00:08:36.970 --> 00:08:41.299
So now we're saying
start at grid row 1 and

137
00:08:41.299 --> 00:08:47.199
grid column 1, and
span to grid row 2 and grid column 3.

138
00:08:49.142 --> 00:08:52.913
My point is,
this is not fun to work with, right?

139
00:08:52.913 --> 00:08:56.411
But there is an easier way,
[LAUGH] thankfully.

140
00:08:56.411 --> 00:09:01.250
So the easier way's to define
grid areas and give them labels.

141
00:09:01.250 --> 00:09:02.630
So these are more semantics.

142
00:09:02.630 --> 00:09:04.670
So we're saying, top left quadrant here.

143
00:09:04.670 --> 00:09:09.250
We want this to be nav, next column,
same row to be also nav.

144
00:09:10.340 --> 00:09:11.410
Moving down to row two.

145
00:09:12.570 --> 00:09:14.690
We have an aside and we have main.

146
00:09:14.690 --> 00:09:18.551
And then on the bottom, the last row we've
got aside and column one, footer and

147
00:09:18.551 --> 00:09:19.191
column two.

148
00:09:19.191 --> 00:09:20.004
This is much more semantic.

149
00:09:20.004 --> 00:09:24.514
When I get designs, I literally
will sit there with line paper and

150
00:09:24.514 --> 00:09:28.131
write this out because it
makes way more sense to me.

151
00:09:28.131 --> 00:09:34.674
And luckily, we can define these in
English terms using grid-template-areas.

152
00:09:34.674 --> 00:09:36.416
So this is much more semantic.

153
00:09:39.669 --> 00:09:42.717
And now, instead of defining those
[LAUGH] four integers, we can say,

154
00:09:42.717 --> 00:09:44.431
assign yourself to grid-area of nav.

155
00:09:44.431 --> 00:09:47.821
Assign yourself to grid-area of main.

156
00:09:47.821 --> 00:09:50.701
Much more fun to work with.

157
00:09:51.728 --> 00:09:53.716
So this is what our layout will look like.

158
00:09:53.716 --> 00:09:57.130
And I've created a CodePen where you
can go physically play around with this

159
00:09:57.130 --> 00:09:59.330
if I just confuse the daylight out of you.

160
00:09:59.330 --> 00:10:02.897
So feel free to check that out but
of course, this is not like CSS grid or

161
00:10:02.897 --> 00:10:03.940
Flexbox in depth.

162
00:10:03.940 --> 00:10:07.475
There are courses that I'll link to and
you can check those out.

163
00:10:07.475 --> 00:10:09.666
But we'll see in practice
how to make this work.

164
00:10:11.765 --> 00:10:16.243
&gt;&gt; Yeah, we have both CSS Grid and
Flexbox course by Jen and

165
00:10:16.243 --> 00:10:20.354
then a practical CSS layouts
course which covers.

166
00:10:20.354 --> 00:10:23.580
&gt;&gt; Absolutely, I think I linked
them in the resources as well.

167
00:10:23.580 --> 00:10:26.520
So check out those courses
by Jen on front-end masters.

168
00:10:28.976 --> 00:10:33.349
Look at that, I literally have
a screenshot for you Mark, look at that,

169
00:10:33.349 --> 00:10:38.024
CSS Grid and Flexbox for Responsive
Web Design, I can recommend this, yes.

