WEBVTT

1
00:00:00.000 --> 00:00:01.131
Let's talk about pseudo-classes.

2
00:00:01.131 --> 00:00:06.748
I mentioned earlier,
these do affect CSS specificity,

3
00:00:06.748 --> 00:00:10.734
and we'll see that in a couple moments.

4
00:00:10.734 --> 00:00:19.082
So there are several different types
of pseudo-classes for input elements.

5
00:00:19.082 --> 00:00:21.342
These are gonna relate
to form elements and

6
00:00:21.342 --> 00:00:24.301
allow you to select elements
based on HTML attributes.

7
00:00:24.301 --> 00:00:28.331
So this is like enabled, disabled,
checked, if the checkbox is checked.

8
00:00:28.331 --> 00:00:31.198
If a form element is required,
if it's optional,

9
00:00:31.198 --> 00:00:34.277
we can target those elements
using pseudo-classes.

10
00:00:34.277 --> 00:00:39.290
These are not comprehensive as well, so
check out documentation if you need it.

11
00:00:39.290 --> 00:00:42.771
There are location pseudo-classes,
so these relate to links.

12
00:00:42.771 --> 00:00:45.088
So a link is visited if it is a link.

13
00:00:45.088 --> 00:00:48.404
You can target those those elements.

14
00:00:51.236 --> 00:00:55.098
If we have media capable of playing
things, we can target whether or

15
00:00:55.098 --> 00:00:58.782
not it's playing or if it's paused,
if it's a video or audio.

16
00:01:01.763 --> 00:01:04.650
Tree-structural pseudo-classes
are one of the most useful.

17
00:01:04.650 --> 00:01:08.959
So nth-child,
we can select the sixth child in a list or

18
00:01:08.959 --> 00:01:11.627
the first of that type of element.

19
00:01:11.627 --> 00:01:16.597
Last-child, this is often, if I want to
give every navigation item a margin inline

20
00:01:16.597 --> 00:01:21.574
end so that there's space in between it,
we don't want the last one to have margin.

21
00:01:21.574 --> 00:01:25.116
So we can say, we don't want this
last child, target that last child,

22
00:01:25.116 --> 00:01:26.960
we don't want that to have a margin.

23
00:01:29.202 --> 00:01:33.957
We can target whether a user is
hovering over an element, it's focused.

24
00:01:33.957 --> 00:01:38.550
These are often very used when we're
working on accessibility states.

25
00:01:39.990 --> 00:01:42.489
And then there are a couple
of functional pseudo-classes,

26
00:01:42.489 --> 00:01:44.230
like not is a really useful one, right?

27
00:01:44.230 --> 00:01:45.241
So we wanna target all links.

28
00:01:45.241 --> 00:01:48.671
We wanna give all links in
our navigation margin, right,

29
00:01:48.671 --> 00:01:53.646
except we don't want to target, so not,
the last of type, so not the last element.

30
00:01:53.646 --> 00:01:56.305
We'll see what that means in code here.

31
00:01:56.305 --> 00:01:58.374
So here we've got a list.

32
00:01:58.374 --> 00:02:02.240
How would I make the fourth one red?

33
00:02:02.240 --> 00:02:05.922
Anyone know what type of
pseudo-class I might use or

34
00:02:05.922 --> 00:02:09.947
pseudo-selector I might use
to target that fourth one?

35
00:02:09.947 --> 00:02:12.282
&gt;&gt; I use the nth position.

36
00:02:12.282 --> 00:02:17.120
&gt;&gt; Yes, nth, so we want to target
list item, nth-of-type(4).

37
00:02:17.120 --> 00:02:22.989
So the fourth list item,
we wanna color that red.

38
00:02:24.748 --> 00:02:29.681
If we've got a navigation bar,
I want the text to be bolded on hover.

39
00:02:29.681 --> 00:02:33.136
So what pseudo-class would I used here?

40
00:02:33.136 --> 00:02:34.924
&gt;&gt; Hover on bold?

41
00:02:34.924 --> 00:02:35.676
Hover.

42
00:02:35.676 --> 00:02:37.262
&gt;&gt; Yeah, hover.

43
00:02:37.262 --> 00:02:41.342
So all links on hover, make them bold.

44
00:02:41.342 --> 00:02:43.943
Last one,
if I have a checkbox and a label,

45
00:02:43.943 --> 00:02:47.354
I want the label to be read
when the checkbox is checked.

46
00:02:49.163 --> 00:02:50.650
What might you use here?

47
00:02:53.241 --> 00:02:55.378
This one's harder.

48
00:02:55.378 --> 00:02:56.274
&gt;&gt; Do we have checked?

49
00:02:56.274 --> 00:02:57.550
No.

50
00:02:57.550 --> 00:02:58.413
We do.
&gt;&gt; We do have checked, yeah.

51
00:02:58.413 --> 00:02:59.700
&gt;&gt; Wow.

52
00:02:59.700 --> 00:03:00.957
&gt;&gt; Absolutely.

53
00:03:00.957 --> 00:03:02.343
&gt;&gt; We are hearing this for the first time.

54
00:03:02.343 --> 00:03:03.364
&gt;&gt; Absolutely we do.

55
00:03:03.364 --> 00:03:07.652
So what I'm saying here,
input, type is checkbox, so

56
00:03:07.652 --> 00:03:11.761
only checkbox's inputs,
right, not text inputs,

57
00:03:11.761 --> 00:03:16.080
not other type of inputs there are,
only checkbox's.

58
00:03:16.080 --> 00:03:21.320
If it's checked and it's immediately
followed by a label, say a direct sibling

59
00:03:21.320 --> 00:03:26.032
or an adjacent sibling, remember
that combinator here, color it red.

60
00:03:26.032 --> 00:03:26.915
That's a big one.

61
00:03:26.915 --> 00:03:30.650
I know that's a really ugly selector,
but that's how you might do that.

62
00:03:30.650 --> 00:03:31.910
&gt;&gt; It's helpful, anyway.

63
00:03:31.910 --> 00:03:34.959
&gt;&gt; Yeah, I'm glad.

64
00:03:34.959 --> 00:03:36.926
So those were pseudo-classes.

65
00:03:36.926 --> 00:03:40.360
Pseudo-elements are a little
bit confusing, admittedly.

66
00:03:40.360 --> 00:03:43.021
So I won't dive too deeply into them,

67
00:03:43.021 --> 00:03:46.442
we're not gonna use them
much in our code today.

68
00:03:46.442 --> 00:03:48.146
They're similar to pseudo-classes.

69
00:03:48.146 --> 00:03:50.769
They act as if there was
an HTML element in the markup.

70
00:03:50.769 --> 00:03:54.284
So if you've seen a tooltip,
remember we hover over the paragraph.

71
00:03:54.284 --> 00:03:58.185
So oftentimes what you'll see is
a box that says, hover here, and

72
00:03:58.185 --> 00:04:01.330
then when you hover,
tooltip will come out, right?

73
00:04:01.330 --> 00:04:05.690
And often we see on the box, they've
got this caret symbol that connects, so

74
00:04:05.690 --> 00:04:08.925
it's clearly,
this is a flyout that's attached.

75
00:04:08.925 --> 00:04:11.777
You might use a pseudo-element
there to give it a before and

76
00:04:11.777 --> 00:04:13.383
after, give it some dimension.

77
00:04:13.383 --> 00:04:17.713
It's a little bit more advanced,
so we're not gonna cover that.

78
00:04:17.713 --> 00:04:19.653
But here's an example of
a pseudo-element here.

79
00:04:19.653 --> 00:04:24.791
So if we've got a paragraph and
we want to select the first line of it and

80
00:04:24.791 --> 00:04:29.771
make it red, we can use that first
line pseudo-element like that.

81
00:04:29.771 --> 00:04:34.950
We could wrap the first line in a div and
give it a selector that makes it red,

82
00:04:34.950 --> 00:04:37.922
but what happens when we change the width?

83
00:04:37.922 --> 00:04:41.575
Then you don't know where the text on the
first line stops and wraps through line.

84
00:04:41.575 --> 00:04:44.794
So using the pseudo-element
is gonna be the easiest way.

85
00:04:44.794 --> 00:04:48.084
Okay, but real,
quick circling back to specificity,

86
00:04:48.084 --> 00:04:51.029
we had those three classes ID class type,
right?

87
00:04:51.029 --> 00:04:54.918
Pseudo-classes and pseudo-elements, they
hold weight when we're calculating and

88
00:04:54.918 --> 00:04:56.241
they fit into these columns.

89
00:04:56.241 --> 00:05:01.318
So if you've got a pseudo-class or
an attribute selector, remember we

90
00:05:01.318 --> 00:05:07.242
saw type = checkbox in a previous example,
that's called an attribute selector.

91
00:05:07.242 --> 00:05:12.251
They hold weight, so they will give
you points in the class column here.

92
00:05:12.251 --> 00:05:14.983
Pseudo-elements like placeholder,
for example,

93
00:05:14.983 --> 00:05:19.056
when you're styling an input placeholder,
those fit in with the type column.

94
00:05:19.056 --> 00:05:23.463
This is the last one before we
actually put the stuff into use, and

95
00:05:23.463 --> 00:05:27.402
it'll become a lot easier as
we're doing it in real time.

96
00:05:27.402 --> 00:05:31.371
But transitions are gonna make
transitioning from one state

97
00:05:31.371 --> 00:05:35.201
to another much more beautiful and
less jarring, right?

98
00:05:35.201 --> 00:05:39.572
So for example, when you have
a nav that slides in on mobile,

99
00:05:39.572 --> 00:05:43.025
It would be kind of jarring
if it just appeared.

100
00:05:43.025 --> 00:05:46.385
So being able to transition some of
these properties is really important.

101
00:05:46.385 --> 00:05:51.391
So there are three properties that
we will work with as they relate

102
00:05:51.391 --> 00:05:56.407
to transition, so property,
duration, and timing function.

103
00:05:56.407 --> 00:06:01.007
Property is the name or names of the
properties that we want to apply it to,

104
00:06:01.007 --> 00:06:05.140
whether that's background color or
position x, for example.

105
00:06:05.140 --> 00:06:07.774
These are the things
that we wanna transition.

106
00:06:07.774 --> 00:06:11.177
The duration is how long
the transition should be applied over,

107
00:06:11.177 --> 00:06:13.391
the time frame it should be applied over.

108
00:06:13.391 --> 00:06:17.240
And the timing function,
these are a little bit tricky, but it's

109
00:06:17.240 --> 00:06:22.133
essentially a curve that defines how over
time these properties should be applied.

110
00:06:22.133 --> 00:06:26.145
There is a website I've linked here that
physically will draw out all of these

111
00:06:26.145 --> 00:06:28.130
different timing functions for you.

112
00:06:29.690 --> 00:06:33.730
So as the time goes on,
how is the transition applied?

113
00:06:33.730 --> 00:06:36.014
That's a visual depiction of it.

114
00:06:36.014 --> 00:06:43.508
EaseIn, easeOut, these are pretty common
ones, linear is also pretty common.

115
00:06:43.508 --> 00:06:47.889
A curve is literally, over time,
apply it evenly, across time.

116
00:06:49.815 --> 00:06:53.369
And you can, again, define these
in three separate properties, but

117
00:06:53.369 --> 00:06:55.064
we can use the shorthand as well.

118
00:06:55.064 --> 00:07:00.697
So really quick example here before we,
Jump into our code.

119
00:07:00.697 --> 00:07:03.162
We've got a box here.

120
00:07:03.162 --> 00:07:06.520
On hover,
we want the background to be blue, right?

121
00:07:08.134 --> 00:07:11.748
Look at this, with hover,
it changes immediately.

122
00:07:11.748 --> 00:07:15.935
It's fine, but to users, this can be
a little bit jarring if we're animating

123
00:07:15.935 --> 00:07:18.101
an entire navigation in, for example.

124
00:07:18.101 --> 00:07:20.981
So here, I set transition.

125
00:07:20.981 --> 00:07:27.139
I wanna transition our background over
0.2 second or was it 2000 milliseconds?

126
00:07:27.139 --> 00:07:31.901
And I wanted to ease-in, that's
the timing function we're using here.

127
00:07:31.901 --> 00:07:35.847
It could be linear, it could be ease-in,
out, I just chose ease-in, right?

128
00:07:35.847 --> 00:07:40.660
So now if I hover over,
you can see it's transitioning.

129
00:07:40.660 --> 00:07:44.233
So it's a pretty straightforward
way to add small animations or

130
00:07:44.233 --> 00:07:48.880
transitions between states without getting
too hefty into animation timelines.

131
00:07:51.000 --> 00:07:53.069
So we'll use this with our navigation.

