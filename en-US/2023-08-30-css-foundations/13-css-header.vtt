WEBVTT

1
00:00:00.180 --> 00:00:03.759
Okay, so now we've learned some of
the skills we're gonna use to create

2
00:00:03.759 --> 00:00:06.010
the header of our website.

3
00:00:06.010 --> 00:00:09.500
So just to remind you, this is what
our website looks like at the moment.

4
00:00:09.500 --> 00:00:11.200
It's not looking too
bad it's getting there.

5
00:00:11.200 --> 00:00:14.550
Okay, let's jump into coding
the header portion of our website.

6
00:00:14.550 --> 00:00:17.334
So on the left of our design,
we've got our conference name, and

7
00:00:17.334 --> 00:00:20.030
on the right we've got our navigation and
shopping cart icon.

8
00:00:21.350 --> 00:00:23.270
This is a great use case for Flexbox.

9
00:00:23.270 --> 00:00:25.110
So, let's go ahead and do that.

10
00:00:25.110 --> 00:00:30.270
So, to use Flexbox, remember we
set the display property to flex.

11
00:00:31.520 --> 00:00:35.170
So, let's go ahead and do that.

12
00:00:35.170 --> 00:00:39.830
If we look in our index html file here,
let's look at our header code.

13
00:00:39.830 --> 00:00:41.960
So we've got a header inside,
we've got our link.

14
00:00:41.960 --> 00:00:46.203
And then we've got a div that contains
all of the right side portion of

15
00:00:46.203 --> 00:00:47.700
the navigation.

16
00:00:47.700 --> 00:00:50.297
So we wanna make this a flex container.

17
00:00:50.297 --> 00:00:50.909
Let's go in here.

18
00:00:54.920 --> 00:00:56.082
I'm gonna go ahead and

19
00:00:56.082 --> 00:01:00.314
do this in the base file, because we've
got our header on both pages, remember.

20
00:01:00.314 --> 00:01:02.910
So, let's go ahead and
do this in the base file.

21
00:01:02.910 --> 00:01:08.185
I'm gonna select the header element and
give it a display: flex.

22
00:01:10.340 --> 00:01:15.916
When I do that, now you can see if we
inspect using Chrome Inspector here, yeah.

23
00:01:18.695 --> 00:01:23.812
Now our header is a flex container,
so you can see CSS Day,

24
00:01:23.812 --> 00:01:27.270
and the div containing the right side.

25
00:01:29.380 --> 00:01:31.473
We wanna align our items to the center.

26
00:01:35.840 --> 00:01:38.721
And you can see now they're vertically
aligned in the center here where

27
00:01:38.721 --> 00:01:40.363
before they were floating up at the top.

28
00:01:42.542 --> 00:01:47.260
And now, we want our conference name on
the left, our navigation on the right.

29
00:01:47.260 --> 00:01:50.753
So we're gonna justify our
content with space between.

30
00:01:56.499 --> 00:01:59.308
Okay, so
now we can see in our flex container,

31
00:01:59.308 --> 00:02:01.910
our items are spaced away from each other.

32
00:02:01.910 --> 00:02:05.020
There's space between them and
they're also centered vertically.

33
00:02:06.850 --> 00:02:08.801
Now you'll notice that
the shopping cart icon and

34
00:02:08.801 --> 00:02:10.989
the navigation are displayed
on top of each other here.

35
00:02:12.610 --> 00:02:16.708
That's because the nav item is a block
element, so it takes up an entire line and

36
00:02:16.708 --> 00:02:18.483
it's forcing the shopping cart or

37
00:02:18.483 --> 00:02:21.010
other elements around it
to move on to a new line.

38
00:02:22.800 --> 00:02:26.415
So in order to fix that,
I'm gonna select the nav element here.

39
00:02:26.415 --> 00:02:30.727
And I'm gonna change this display
property to inline-block.

40
00:02:33.680 --> 00:02:36.800
So when I do that,
now we can see that the nav and

41
00:02:36.800 --> 00:02:40.090
the icon are sitting next to each other,
right?

42
00:02:40.090 --> 00:02:44.296
So what this is saying is we still want
the navigation to maintain some block

43
00:02:44.296 --> 00:02:47.794
properties, like being able to
set margin and those things.

44
00:02:47.794 --> 00:02:49.417
But we want it to sit in line,

45
00:02:49.417 --> 00:02:53.310
we don't want other elements to
break onto a new line around it.

46
00:02:53.310 --> 00:02:57.250
So now that these two items, the nav, and
the shopping cart they sit on the same

47
00:02:57.250 --> 00:03:00.068
line, we also want our nav
items to sit on the same line.

48
00:03:00.068 --> 00:03:02.612
So you can see here that three nav items
in the shopping cart all sit in line

49
00:03:02.612 --> 00:03:03.249
with each other.

50
00:03:05.398 --> 00:03:08.200
So there's a little bit
of styling to do here.

51
00:03:10.410 --> 00:03:14.012
So first, let's remove the bullet points
from the nav items because we don't want

52
00:03:14.012 --> 00:03:16.410
them to have those bullet points.

53
00:03:16.410 --> 00:03:22.310
So I will do this using the direct child
combinator or the direct descendant.

54
00:03:22.310 --> 00:03:26.926
So we're saying, any unordered list
immediately inside of a nav, we want

55
00:03:26.926 --> 00:03:31.852
the list-style to be none, we don't
want it to have any bullet points, okay?

56
00:03:31.852 --> 00:03:33.670
So that's going to remove those dots here.

57
00:03:38.407 --> 00:03:42.440
We also, let's use Flexbox for
this as well, right?

58
00:03:42.440 --> 00:03:43.957
It's a one-dimensional layout,

59
00:03:43.957 --> 00:03:46.750
we're laying these things
out along a horizontal axis.

60
00:03:46.750 --> 00:03:49.163
So let's set this as
a flex container as well.

61
00:03:53.348 --> 00:03:56.790
Now the default layout for flex is row.

62
00:03:56.790 --> 00:03:59.683
So now we can see they're all
sitting in a row with one another.

63
00:03:59.683 --> 00:04:03.312
If we go back to our design,
I think it was in here.

64
00:04:03.312 --> 00:04:07.238
If we look at our red line
designs here we can see

65
00:04:07.238 --> 00:04:11.077
36 pixels of space in between these items.

66
00:04:11.077 --> 00:04:13.552
So let's go ahead and do that.

67
00:04:13.552 --> 00:04:15.892
We use the same selectors here.

68
00:04:15.892 --> 00:04:19.909
So nav with a direct child
of unordered list and

69
00:04:19.909 --> 00:04:23.211
select all of the list items in there.

70
00:04:23.211 --> 00:04:27.117
We're gonna give it
a margin-right of 36 pixels.

71
00:04:30.794 --> 00:04:35.860
So, now we can see here each list
item has a right margin of 36 pixels.

72
00:04:35.860 --> 00:04:39.470
You can see that here and
the inspector shows up here.

73
00:04:39.470 --> 00:04:40.740
There are a couple different ways.

74
00:04:40.740 --> 00:04:43.110
So, margin is a shorthand property.

75
00:04:43.110 --> 00:04:44.500
So, we could write margin, right?

76
00:04:44.500 --> 00:04:47.000
Maybe in this case it is
the best way to write that.

77
00:04:47.000 --> 00:04:49.237
We can also use the shorthand for margin.

78
00:04:51.799 --> 00:04:53.480
Ignore my spacing.

79
00:04:53.480 --> 00:04:56.780
So margin could be defined as top,
right, bottom, and left.

80
00:04:56.780 --> 00:05:00.370
So would be 0 pixels margin on top.

81
00:05:00.370 --> 00:05:04.239
We want 36 pixels on the right for
each element, 0 on the bottom, and

82
00:05:04.239 --> 00:05:05.430
0 on the left.

83
00:05:05.430 --> 00:05:11.290
So again, this is top right bottom left,
all right?

84
00:05:11.290 --> 00:05:14.520
Margin can also take three values.

85
00:05:14.520 --> 00:05:18.260
If there are only three values here,
get rid of this last 0.

86
00:05:18.260 --> 00:05:23.094
It's gonna be top/bottom, right and left.

87
00:05:25.743 --> 00:05:28.720
And again,
we could just define one property here.

88
00:05:28.720 --> 00:05:32.840
But if there's only one value, let's
say there's 36 pixels, one value here.

89
00:05:32.840 --> 00:05:36.170
If I have one value here,
it's gonna be all 4,

90
00:05:36.170 --> 00:05:39.346
it's gonna be top/right/bottom/left.

91
00:05:42.036 --> 00:05:44.840
So these are the ways that
we can access the shorthand.

92
00:05:44.840 --> 00:05:48.252
These are the different
values you might see.

93
00:05:48.252 --> 00:05:50.158
I'll just declare margin-right.

94
00:05:50.158 --> 00:05:51.133
And actually,

95
00:05:51.133 --> 00:05:56.870
this works really well in languages that
are read from left to right like English.

96
00:05:56.870 --> 00:05:59.990
But in languages like Arabic
that are read right to left,

97
00:05:59.990 --> 00:06:03.829
we don't wanna have a right-margin,
we wanna have a left-margin.

98
00:06:04.860 --> 00:06:11.780
So, in order to alleviate that, I'm gonna
change margin-right to margin-inline-end.

99
00:06:11.780 --> 00:06:15.145
So this will take into consideration
the direction of a language.

100
00:06:15.145 --> 00:06:17.192
Margin-inline-end, we check this out.

101
00:06:19.824 --> 00:06:22.930
It defines the inline and
margin of an element.

102
00:06:22.930 --> 00:06:27.170
So again, it depends on the writing mode,
the directionality, and text orientation.

103
00:06:27.170 --> 00:06:30.870
So this will be more responsive
to these different languages.

104
00:06:30.870 --> 00:06:34.645
Okay, lastly, you'll notice the shopping
cart icon is not perfectly aligned with

105
00:06:34.645 --> 00:06:37.620
our nav items,
it's kind of sitting a little further up.

106
00:06:37.620 --> 00:06:39.589
So we can address this
in a couple of ways.

107
00:06:41.090 --> 00:06:45.201
So we could set another display flex
on the div that wraps our nav and

108
00:06:45.201 --> 00:06:46.964
our shopping cart icon, but

109
00:06:46.964 --> 00:06:51.570
that's gonna be three flex containers
in just the header, right?

110
00:06:51.570 --> 00:06:55.457
So you can do it, but
let's discuss using grid for this.

111
00:06:55.457 --> 00:06:58.914
Grid's gonna allow us to do
this more complex layout,

112
00:06:58.914 --> 00:07:01.930
even two-dimensional
layouts on my flexbox.

113
00:07:01.930 --> 00:07:06.200
So we gonna go to Grid Generator,
I just searched for it.

114
00:07:06.200 --> 00:07:09.203
This was created by Sarah Drasner,
who is another fellow friend and

115
00:07:09.203 --> 00:07:11.060
master's instructor.

116
00:07:11.060 --> 00:07:14.290
And we gonna use Grid Generator
to build a grid for our header.

117
00:07:14.290 --> 00:07:18.560
When we look at our design,
we only need one row, right?

118
00:07:18.560 --> 00:07:19.920
We just have this 1 row here.

119
00:07:21.040 --> 00:07:25.360
So instead of 5 rows,
we'll just do 1 row, 1 row.

120
00:07:25.360 --> 00:07:28.700
And we'll have 3 columns for our 3 items.

121
00:07:28.700 --> 00:07:32.065
So we'll have the logo in one column,
the nav in another column, and

122
00:07:32.065 --> 00:07:34.690
the shopping cart in another column,
so 3 columns.

123
00:07:35.790 --> 00:07:37.880
What, not 53, can you imagine?

124
00:07:37.880 --> 00:07:40.550
So when it comes to these right now
they're all set to one fraction.

125
00:07:40.550 --> 00:07:44.316
So that's one fraction of whatever
available space is there.

126
00:07:44.316 --> 00:07:50.283
If we go and look at our design again.

127
00:07:52.200 --> 00:07:58.970
Let's see, we want our nav to take up
most of the space in this design, right?

128
00:08:00.010 --> 00:08:04.904
So we're gonna set the second element
here to have 3 fractions of the available

129
00:08:04.904 --> 00:08:07.180
space, so it takes up the majority.

130
00:08:07.180 --> 00:08:09.250
And then the nav and the shopping cart,

131
00:08:09.250 --> 00:08:12.720
we're gonna take up one fraction
of whatever space is left over.

132
00:08:15.130 --> 00:08:19.723
So, what this looks like,
if we set, this as our logo header,

133
00:08:19.723 --> 00:08:23.900
this is our navigation,
this is our shopping cart icon.

134
00:08:25.100 --> 00:08:27.818
Let's go ahead and generate some code and
see what that looks like here.

135
00:08:27.818 --> 00:08:33.413
Actually, what I'm gonna do is for
that shopping cart logo,

136
00:08:33.413 --> 00:08:39.190
It's about 34 pixels in width, so
I'm actually gonna use that value.

137
00:08:39.190 --> 00:08:41.477
So instead of one
fraction available space,

138
00:08:41.477 --> 00:08:45.460
I'm gonna set it explicitly to 34
pixels here, that's what I'm gonna do.

139
00:08:45.460 --> 00:08:47.490
So now we can see we've got
that exact column width for

140
00:08:47.490 --> 00:08:49.130
the exact width of that icon.

141
00:08:49.130 --> 00:08:52.559
The nav is gonna take up the majority
of the remaining space, and

142
00:08:52.559 --> 00:08:54.800
then the logo will fit right in here.

143
00:08:54.800 --> 00:08:58.190
So I'm gonna generate the code here,
this is what it looks like.

144
00:08:58.190 --> 00:09:01.400
I'll grab everything from that
grid-container right here.

145
00:09:02.870 --> 00:09:05.706
So back in our header,
instead of having a display of flex,

146
00:09:05.706 --> 00:09:08.290
let's change this to display of grid.

147
00:09:08.290 --> 00:09:11.040
And in fact, I think it was also
from the code I just pulled.

148
00:09:11.040 --> 00:09:12.810
So yeah, we'll have a duplicate here.

149
00:09:14.740 --> 00:09:19.026
So our grid template columns again will be
1 fraction, 3 fractions, and 34 pixels.

150
00:09:19.026 --> 00:09:21.135
We'll have 1 grid row, 1 fraction, and

151
00:09:21.135 --> 00:09:24.709
we don't care about the gaps because
we're not gonna be using them, but

152
00:09:24.709 --> 00:09:27.890
that will allow you to put space
in between the columns and rows.

153
00:09:29.840 --> 00:09:32.411
We still wanna align our
items in the center as well,

154
00:09:32.411 --> 00:09:34.740
that is something we will carry over.

155
00:09:34.740 --> 00:09:36.420
Just so that they're vertically centered.

156
00:09:36.420 --> 00:09:38.290
And so when we go back,
what does this look like?

157
00:09:38.290 --> 00:09:41.722
Okay, it's not terrible, things are like,
they're a little shifted, but

158
00:09:41.722 --> 00:09:42.660
it's not terrible.

159
00:09:42.660 --> 00:09:44.850
So let's inspect and
see what that looks like right now.

160
00:09:46.040 --> 00:09:46.620
Where's our header?

161
00:09:46.620 --> 00:09:47.430
Here we go.

162
00:09:47.430 --> 00:09:50.170
You can see we've got 3 cells.

163
00:09:50.170 --> 00:09:52.690
I know it's a little hard to see, but
if you're following along in your own

164
00:09:52.690 --> 00:09:54.890
browser, you can see
there are three cells.

165
00:09:54.890 --> 00:09:56.650
See the logo's already sitting in cell 1.

166
00:09:57.700 --> 00:10:00.850
And it looks like the nav on the shopping
cart sitting in the same section here.

167
00:10:03.602 --> 00:10:07.059
This is because some of these elements are
already assigning themselves to these grid

168
00:10:07.059 --> 00:10:09.840
areas without us even having
to tell them where to go.

169
00:10:09.840 --> 00:10:12.223
What I'm gonna do if we go
back into our HTML file here.

170
00:10:12.223 --> 00:10:14.340
Again, we've got this wrapping div, right?

171
00:10:14.340 --> 00:10:18.548
So that's why we're only seeing
2 of our grid areas being used.

172
00:10:18.548 --> 00:10:22.071
Because when we look,
here's our grid container,

173
00:10:22.071 --> 00:10:25.040
we have 2 elements directly inside of it.

174
00:10:25.040 --> 00:10:29.770
So that's why you're getting the logo in
one and everything else in the second.

175
00:10:29.770 --> 00:10:34.020
So since we're not using Flexbox,
I'm gonna remove this div now, right?

176
00:10:34.020 --> 00:10:38.223
So now we've got 3 distinct elements,
we have the logo, the nav, and the image.

177
00:10:38.223 --> 00:10:41.477
And now they're sitting
nicely in these 3 grid areas.

178
00:10:41.477 --> 00:10:44.160
So before I forget I'm
gonna do the same thing and

179
00:10:44.160 --> 00:10:47.117
speakers because we've got
the same code over here.

180
00:10:47.117 --> 00:10:51.513
So remove this wrapping div otherwise I'm
gonna forget forgetting wondering why

181
00:10:51.513 --> 00:10:52.795
everything is broken.

182
00:10:52.795 --> 00:10:56.505
And again, we can use grid template
areas to name these cells so

183
00:10:56.505 --> 00:10:59.515
that we can actually
explicitly declare that hey,

184
00:10:59.515 --> 00:11:02.455
I want the logo to be in
cell 1 where the logo cell.

185
00:11:03.825 --> 00:11:08.177
So, back in here under header element,

186
00:11:08.177 --> 00:11:12.275
to find our grid-template curious.

187
00:11:13.330 --> 00:11:16.110
So the first one is gonna be for our logo.

188
00:11:16.110 --> 00:11:20.946
The second one will be for our nav,
and the third one will be for

189
00:11:20.946 --> 00:11:23.930
our shopping-cart, there we go.

190
00:11:23.930 --> 00:11:26.457
So to see if this actually works,

191
00:11:26.457 --> 00:11:30.350
let's try setting the image
to a grid area of logo.

192
00:11:32.230 --> 00:11:36.990
So, let's see,
we want image inside of a header,

193
00:11:36.990 --> 00:11:41.800
and we want to set that
to the grid-area: logo.

194
00:11:41.800 --> 00:11:42.610
Let's see what happens.

195
00:11:45.390 --> 00:11:49.156
Well, that looks silly now because
our shopping cart is in spot one, but

196
00:11:49.156 --> 00:11:50.720
it's working, right?

197
00:11:50.720 --> 00:11:52.540
So we've got the shopping cart image.

198
00:11:52.540 --> 00:11:57.371
We've said, hey, position yourself into
the first cell, which is our logo cell,

199
00:11:57.371 --> 00:11:58.780
and it's working.

200
00:11:58.780 --> 00:11:59.670
So, that's fantastic.

201
00:11:59.670 --> 00:12:03.290
I'm gonna remove that because that was
just for show, we don't need that.

202
00:12:03.290 --> 00:12:07.514
But what we can do now with the header
image is we can explicitly set the grid,

203
00:12:07.514 --> 00:12:09.633
let me not delete all of that, right?

204
00:12:09.633 --> 00:12:11.710
We can set the grid-area to shopping-cart.

205
00:12:15.280 --> 00:12:17.430
Not that we need to it
will fill itself in there.

206
00:12:17.430 --> 00:12:19.738
So now we're ready to align
our navigation items.

207
00:12:19.738 --> 00:12:21.347
Right now they're sitting
kind of in the middle here.

208
00:12:24.510 --> 00:12:27.981
If you haven't worked much with CSS in
Chrome in particular, or Firefox or

209
00:12:27.981 --> 00:12:31.673
another browser, I always like when I'm
trying to figure this stuff out before

210
00:12:31.673 --> 00:12:32.962
I'll write it in the file.

211
00:12:32.962 --> 00:12:39.131
I'll just write it in my browser and
make sure it works for a cell.

212
00:12:39.131 --> 00:12:43.987
If we want to assign these to
the end of their grid cell,

213
00:12:43.987 --> 00:12:50.500
let's say justify self-flex,
not flex, end, sorry, look at that.

214
00:12:50.500 --> 00:12:54.673
So instead of everything being justified
in the center, now we're saying, okay,

215
00:12:54.673 --> 00:12:56.090
but let's take this nav.

216
00:12:56.090 --> 00:12:58.349
I want it to justify itself
to the end of its container.

217
00:12:59.790 --> 00:13:02.750
So it backs right up against
the end of that grid cell there.

218
00:13:04.660 --> 00:13:05.501
So let's go ahead and

219
00:13:05.501 --> 00:13:08.290
transition that over to our code
now that we know it works, right?

220
00:13:08.290 --> 00:13:12.440
So we'll put it under here just
to isolate that, there we go.

221
00:13:14.310 --> 00:13:16.817
Now we can add some padding
to that header element so

222
00:13:16.817 --> 00:13:20.446
it doesn't sit directly against
the edge right now the shopping-cart.

223
00:13:20.446 --> 00:13:23.390
And the logo are sitting right
on the edge of our viewport.

224
00:13:23.390 --> 00:13:26.660
And if we look at our design,
we want 60 pixels of padding here.

225
00:13:28.360 --> 00:13:29.990
So, let's go back to our header.

226
00:13:31.760 --> 00:13:34.544
And just like margin has a shorthand,
padding also has a shorthand.

227
00:13:34.544 --> 00:13:38.760
So I could say like padding-left,
was it 60 pixels padding-right 60 pixels.

228
00:13:38.760 --> 00:13:41.310
But I'm not,
I'm just gonna use the shorthand.

229
00:13:41.310 --> 00:13:45.585
So top and bottom padding, we don't wanna
add any, we just want left and right.

230
00:13:45.585 --> 00:13:50.535
So top and bottom will be 0, left and
right will be 60 pixels, like that.

231
00:13:50.535 --> 00:13:55.520
So now they're sitting
a little bit nicer there.

232
00:13:55.520 --> 00:13:57.220
The last thing just to
finish out our header.

233
00:13:57.220 --> 00:14:01.810
We need to set the font size of the logo
in the nav items just to make them

234
00:14:01.810 --> 00:14:03.980
consistent here.

235
00:14:03.980 --> 00:14:07.896
So if we go back to our design,
I forgot over here.

236
00:14:07.896 --> 00:14:13.208
You can see the logo should be 40 pixels,
the nav should be 20 pixels.

237
00:14:18.110 --> 00:14:19.710
So, do this here header.

238
00:14:19.710 --> 00:14:25.188
So all direct children that are links
inside of a header, we'll do a font-size

239
00:14:25.188 --> 00:14:30.359
of 40 pixels and a font-weight,
a bold, want that to be bold, whoops.

240
00:14:31.670 --> 00:14:33.030
Types of fonts, there we go.

241
00:14:33.030 --> 00:14:36.730
That CSS Day looks a little bit
more like our mark-up there.

242
00:14:38.220 --> 00:14:40.925
And the nav items should be
a font size of 20 pixels.

243
00:14:40.925 --> 00:14:43.948
Whatever that is, there we go.

244
00:14:43.948 --> 00:14:47.724
So nav &gt; ul li, and here,
we're coming down and

245
00:14:47.724 --> 00:14:51.056
we're saying font-size, 20 pixels.

246
00:14:56.380 --> 00:15:00.438
Okay, so, that looks pretty
close to our design there.

247
00:15:02.430 --> 00:15:04.993
So, that's what we were given,
this is what we're working with.

248
00:15:09.337 --> 00:15:12.454
But you'll notice we've written our code
using element selectors and combinators,

249
00:15:12.454 --> 00:15:14.350
which is fine,
there's nothing wrong with that.

250
00:15:14.350 --> 00:15:15.423
But like I'd mentioned,

251
00:15:15.423 --> 00:15:18.410
Block Element Modifier is a really
nice way to add some semantic markup.

252
00:15:19.990 --> 00:15:23.620
So I'm gonna add the following
classes to the HTML file here.

253
00:15:24.770 --> 00:15:28.704
So header, I will give a class of header.

254
00:15:30.028 --> 00:15:33.822
We've got a block here for header link,

255
00:15:33.822 --> 00:15:40.230
class ="header_link",
we've got one block here for nav.

256
00:15:40.230 --> 00:15:42.317
Nav is gonna be its own block.

257
00:15:46.628 --> 00:15:50.626
The unordered list will
be an element nav_list.

258
00:15:50.626 --> 00:15:53.999
And now in VS code there's a cool
multi-select I'm gonna do that by

259
00:15:53.999 --> 00:15:56.615
highlighting the list item
element with my cursor.

260
00:15:56.615 --> 00:16:00.831
And I'm gonna press Command+D to
highlight the next one that matches and

261
00:16:00.831 --> 00:16:03.015
the next one that matches after that.

262
00:16:03.015 --> 00:16:08.295
So command+D three times on my Mac and VS
code is gonna give me triple cursor here,

263
00:16:08.295 --> 00:16:11.630
so I can be a little bit more efficient.

264
00:16:11.630 --> 00:16:17.944
So for this, I wanna add an element
here of nav_list item like that.

265
00:16:22.590 --> 00:16:27.234
Okay, so now that we've got our classes,
let's just go replace those in our file.

266
00:16:29.411 --> 00:16:35.920
We're gonna replace these so instead of
header element it's gonna be header class.

267
00:16:37.270 --> 00:16:40.810
So be header_ link.

268
00:16:44.100 --> 00:16:45.959
This will be class of nav.

269
00:16:48.950 --> 00:16:50.882
We've got nav_list.

270
00:16:52.947 --> 00:16:56.390
And nav_list-item.

271
00:16:58.080 --> 00:17:00.744
And we don't actually need to assign
the shopping-cart to a grid area,

272
00:17:00.744 --> 00:17:02.980
it does fit itself in there,
so I'm just gonna remove that.

273
00:17:04.410 --> 00:17:08.700
So now that we've replaced our type
selectors with class selectors,

274
00:17:08.700 --> 00:17:11.980
everything is working as expected,
which is great.

275
00:17:13.450 --> 00:17:15.272
We will need to replace the markup or

276
00:17:15.272 --> 00:17:17.835
add some class names to
our speakers page as well.

277
00:17:20.580 --> 00:17:22.661
But we'll do that when we
get to the speakers page.

