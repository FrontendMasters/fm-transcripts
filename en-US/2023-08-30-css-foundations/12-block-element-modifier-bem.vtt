WEBVTT

1
00:00:00.160 --> 00:00:01.872
So, when we're building small websites,

2
00:00:01.872 --> 00:00:05.124
it's really not usually a big deal how we
organize our styles or how we name things.

3
00:00:05.124 --> 00:00:08.710
But when it comes to larger,
more complicated projects,

4
00:00:08.710 --> 00:00:12.952
how we organize our CSS affects how
long it takes to write the code, or

5
00:00:12.952 --> 00:00:16.340
how easy it is to read,
how much we have to write, etc.

6
00:00:17.850 --> 00:00:21.775
So, there's this architecture,
naming architecture, called BEM, or

7
00:00:21.775 --> 00:00:23.730
Block Element Modifier.

8
00:00:23.730 --> 00:00:27.180
You might have heard of it,
it was pretty popular a few years ago.

9
00:00:28.710 --> 00:00:32.336
It's a design methodology that helps
create components and code sharing and

10
00:00:32.336 --> 00:00:34.275
create semantic names.

11
00:00:34.275 --> 00:00:38.864
And you might have heard of other
methodologies like Atomic, or OOCSS,

12
00:00:38.864 --> 00:00:40.907
lots of acronym names, right?

13
00:00:40.907 --> 00:00:43.955
SMACSS, I don't know if people say that.

14
00:00:43.955 --> 00:00:44.725
Is it S-M-A-C-S-S?

15
00:00:44.725 --> 00:00:46.505
I don't know, I call it SMACSS.

16
00:00:46.505 --> 00:00:51.480
But essentially,
We've got blocks, elements,

17
00:00:51.480 --> 00:00:54.400
and modifiers, so it's gonna break down
elements into these different categories.

18
00:00:54.400 --> 00:00:58.462
So block is a standalone entity that's
meaningful on its own, so like header,

19
00:00:58.462 --> 00:01:00.320
menu, input, things like that.

20
00:01:00.320 --> 00:01:03.916
The element is part of a block that
doesn't necessarily have a standalone

21
00:01:03.916 --> 00:01:04.440
meaning.

22
00:01:04.440 --> 00:01:06.687
So it could be menu item,
list item, header title.

23
00:01:09.263 --> 00:01:14.050
And the modifier part is something
like disabled, highlighted, checked.

24
00:01:14.050 --> 00:01:16.950
It typically is used to change
appearance or behavior.

25
00:01:18.090 --> 00:01:19.410
Okay, what does that actually mean?

26
00:01:19.410 --> 00:01:22.418
So, when we're naming our elements for
this project,

27
00:01:22.418 --> 00:01:24.410
we will use block element modifier.

28
00:01:24.410 --> 00:01:28.712
Now if you're using a CSS framework, or
a JavaScript library, or things like that,

29
00:01:28.712 --> 00:01:30.470
you might not need this, right?

30
00:01:30.470 --> 00:01:33.230
This is because we're using plain CSS.

31
00:01:33.230 --> 00:01:37.778
It's nice to have some sort of naming
architecture in place to create those

32
00:01:37.778 --> 00:01:39.445
semantic relationships.

33
00:01:39.445 --> 00:01:43.130
So, our block is prefaced by a dot,
it's a class name.

34
00:01:43.130 --> 00:01:45.797
The element is prefaced
by two underscores, and

35
00:01:45.797 --> 00:01:48.080
the modifier is prefaced by two hyphens.

36
00:01:49.150 --> 00:01:50.690
So an example might be a form.

37
00:01:50.690 --> 00:01:54.810
Let's take a form, we set a class
of form on that form element.

38
00:01:55.950 --> 00:01:57.880
Inside we've got two inputs on a button.

39
00:02:00.180 --> 00:02:03.310
So, those are elements inside that block.

40
00:02:03.310 --> 00:02:06.820
So form__input might be that element name.

41
00:02:08.050 --> 00:02:11.859
Same thing for the inputs for
the button form__button.

42
00:02:13.640 --> 00:02:18.030
And then we'll have modifiers for
the button and the input.

43
00:02:18.030 --> 00:02:19.990
So it might be a disabled input.

44
00:02:19.990 --> 00:02:23.910
It might be a large button, so
it's changing that appearance.

45
00:02:23.910 --> 00:02:27.246
We'll use this when we're naming our
classes in the next coding section.

