WEBVTT

1
00:00:00.310 --> 00:00:04.977
Okay let's move into the foundation
this is gonna be the foundation of

2
00:00:04.977 --> 00:00:09.738
our webpage so we'll deal with a lot
of the foundational CSS concepts.

3
00:00:09.738 --> 00:00:11.986
Let's just hit the ground running,
let's start with color.

4
00:00:15.030 --> 00:00:18.760
As a preface to this section it does get
a little bit technical and feel free to

5
00:00:18.760 --> 00:00:22.315
go back and reference the slides on this,
they're not things you need to

6
00:00:22.315 --> 00:00:26.132
memorize but I think it's good to have
an overview on some of these concepts.

7
00:00:26.132 --> 00:00:28.934
So feel free to stop me and
ask questions along the way.

8
00:00:28.934 --> 00:00:30.704
Okay, so when it comes to color,

9
00:00:30.704 --> 00:00:34.261
there are several different types
of color values that we can use.

10
00:00:34.261 --> 00:00:41.320
We've got named colors, hexadecimal,
RGB, RGBA, HSL, a lot of acronyms.

11
00:00:41.320 --> 00:00:45.749
Let's take a look at
what each of these means.

12
00:00:45.749 --> 00:00:49.078
So, named color are color
values like blue, red, orange,

13
00:00:49.078 --> 00:00:52.820
we were just using these
in the previous examples.

14
00:00:52.820 --> 00:00:55.803
I've linked out to
the Mozilla Developer Network here,

15
00:00:55.803 --> 00:00:57.543
the documentation on color, and

16
00:00:57.543 --> 00:01:01.770
they have a whole table full of different
named color values that you can use.

17
00:01:01.770 --> 00:01:05.441
Hexadecimal, also known as hex,
is another really common one,

18
00:01:05.441 --> 00:01:08.390
you'll probably see this
a lot in production code.

19
00:01:09.660 --> 00:01:12.729
So the values that you see here are
actually identical the ones we just saw on

20
00:01:12.729 --> 00:01:13.617
the previous slide.

21
00:01:13.617 --> 00:01:18.280
So blue, red, and orange, they correspond
exactly to these hexadecimal values.

22
00:01:19.360 --> 00:01:24.766
Now, as humans we typically work off of
base 10, so this is known as decimal and

23
00:01:24.766 --> 00:01:28.661
that, I don't know what the right
word in English is, but

24
00:01:28.661 --> 00:01:31.150
the deca in decimal, it means 10.

25
00:01:31.150 --> 00:01:34.133
So decimal means base 10.

26
00:01:34.133 --> 00:01:39.140
Now we sometimes use hexadecimal
with color values, and hexa means 6.

27
00:01:39.140 --> 00:01:42.246
So hexadecimal means base 16.

28
00:01:42.246 --> 00:01:46.480
This means we can have 16 values
represented in each place value here.

29
00:01:46.480 --> 00:01:50.204
So instead of just 0 through 9,
the digits we use in decimal,

30
00:01:50.204 --> 00:01:52.490
we also have the values A through F.

31
00:01:52.490 --> 00:01:56.698
That's gonna give us a total of
16 characters that we can use and

32
00:01:56.698 --> 00:01:59.835
each place value and
there are six place values,

33
00:01:59.835 --> 00:02:03.912
each having that range again from
0 through 9 and A through F.

34
00:02:03.912 --> 00:02:10.421
There is a shorthand, sometimes you'll see
this that contain only three place values,

35
00:02:10.421 --> 00:02:14.958
so this means repeat the character
found at this place value.

36
00:02:14.958 --> 00:02:19.074
So #FFF is equivalent to #FFFFFF,

37
00:02:19.074 --> 00:02:22.924
same with 000 which is black and

38
00:02:22.924 --> 00:02:27.059
same with FC0, which is FFCC00.

39
00:02:27.059 --> 00:02:29.713
RGB stands for red, green and blue.

40
00:02:29.713 --> 00:02:36.009
So there are three place values here
each has a range from 0 to 255.

41
00:02:36.009 --> 00:02:40.774
This RGB function accepts
three space separated values.

42
00:02:40.774 --> 00:02:46.708
Again, each with that range 0 to 255
each corresponds to red, green and blue.

43
00:02:46.708 --> 00:02:50.988
We can also use percentages for
these values.

44
00:02:50.988 --> 00:02:54.448
And in the previous versions
of the RGB functions,

45
00:02:54.448 --> 00:02:56.872
they took comma separated values.

46
00:02:56.872 --> 00:02:59.480
So the first example
here it does use commas.

47
00:02:59.480 --> 00:03:04.790
So it's still valid syntax, it just the
more modern syntax to be space separated.

48
00:03:08.176 --> 00:03:12.719
RGBA is the same as RGB, but
there is a fourth place value here, and

49
00:03:12.719 --> 00:03:14.355
that stands for alpha.

50
00:03:14.355 --> 00:03:19.903
So alpha is a value from 0 to
1 that represents the opacity.

51
00:03:19.903 --> 00:03:27.514
So 1 corresponds to 100% opacity and
0 corresponds to 0% opacity.

52
00:03:27.514 --> 00:03:31.481
So there is an RGBA function that we
can use that takes those four values.

53
00:03:31.481 --> 00:03:36.613
Again, the old syntax uses comma separated
values, the new syntax is space separated.

54
00:03:36.613 --> 00:03:41.596
The caveat with the space-separated
syntax is that between the RGB and

55
00:03:41.596 --> 00:03:44.014
the alpha values there is a slash.

56
00:03:44.014 --> 00:03:45.681
You don't have to use RGBA,

57
00:03:45.681 --> 00:03:49.369
you can declare that alpha value
directly in the RGB function.

58
00:03:49.369 --> 00:03:53.150
So if it's comma separated again,
you've got four comma separated values and

59
00:03:53.150 --> 00:03:57.000
if it's space separated, you just have
to preface the alpha value with a slash.

60
00:04:00.610 --> 00:04:04.913
HSL stands for hue,
saturation and lightness.

61
00:04:04.913 --> 00:04:10.075
Again, HSLA is kind of like the RGBA
of HSL, so they're very similar,

62
00:04:10.075 --> 00:04:14.394
it allows for that alpha value or
for opacity to be defined.

63
00:04:14.394 --> 00:04:18.840
Now, the difference is HSL
relates to the color wheel.

64
00:04:18.840 --> 00:04:24.158
So hue is gonna take either a degree
radius gradient or term value.

65
00:04:24.158 --> 00:04:29.773
If we don't declare a unit on that value
it's gonna be interpreted as a degree but

66
00:04:29.773 --> 00:04:36.064
you can see here the color wheel red is at
0 degrees, cyan is at 180, blue is at 240.

67
00:04:36.064 --> 00:04:40.170
The saturation in HSL is a percentage,
where 0 is unsaturated and

68
00:04:40.170 --> 00:04:42.089
100% is fully saturated.

69
00:04:45.165 --> 00:04:51.087
And lightness is a percentage where 0 is
black, 50% is normal, and 100% is white.

70
00:04:53.701 --> 00:04:58.488
So the real question is that's a lot,
which one should I actually use?

71
00:04:58.488 --> 00:05:03.607
The short answer is they're all
valid [LAUGH] The long answer is

72
00:05:03.607 --> 00:05:09.133
hexadecimal is probably the most
widely used in production apps.

73
00:05:09.133 --> 00:05:13.641
You might see some named color values,
but yeah, I would say hexadecimal or

74
00:05:13.641 --> 00:05:17.532
RGB are gonna be the most common
you might see in a production app.

75
00:05:20.767 --> 00:05:22.602
Yes.

76
00:05:22.602 --> 00:05:27.483
&gt;&gt; Have you seen anything
about the level four colors?

77
00:05:27.483 --> 00:05:31.759
They're like HD colors like LCH and
stuff like that.

78
00:05:31.759 --> 00:05:34.203
&gt;&gt; I have not.

79
00:05:34.203 --> 00:05:37.708
Yeah, I'm not able to speak to that,
but the W3C has great documentation.

80
00:05:37.708 --> 00:05:40.062
So I'd recommend checking that out,
level four colors.

81
00:05:40.062 --> 00:05:43.919
So when we're coding,
if you're using Visual Studio Code,

82
00:05:43.919 --> 00:05:46.082
which is my code editor of choice.

83
00:05:46.082 --> 00:05:48.942
There's a really fun plug
in called color highlight

84
00:05:48.942 --> 00:05:51.868
that will actually take
these hexadecimal values and

85
00:05:51.868 --> 00:05:55.717
replace them with a snippet of
the actual color that will be rendered.

86
00:05:55.717 --> 00:05:59.222
So this is linked in the Readme for
the repository as well.

87
00:05:59.222 --> 00:06:01.722
So feel free to add that if
you're using Visual Studio Code.

