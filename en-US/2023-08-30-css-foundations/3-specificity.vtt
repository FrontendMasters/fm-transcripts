WEBVTT

1
00:00:00.200 --> 00:00:02.970
What color is our paragraph text
gonna be in this example here?

2
00:00:02.970 --> 00:00:07.150
So we've got a div class of blue,
inside of that div, there's a paragraph.

3
00:00:07.150 --> 00:00:13.090
And our style rule here is class blue
equals, not equals but color blue.

4
00:00:13.090 --> 00:00:15.480
So what color is our
paragraph text is gonna be?

5
00:00:17.150 --> 00:00:18.440
&gt;&gt; Still gonna be blue.

6
00:00:18.440 --> 00:00:19.550
&gt;&gt; You think it's gonna be blue?

7
00:00:20.940 --> 00:00:23.920
Indeed it is gonna be blue, if you can
see that text has changed to blue,

8
00:00:23.920 --> 00:00:26.230
I know that's not the most
accessible blue color.

9
00:00:26.230 --> 00:00:27.989
Do we know why that's gonna be blue?

10
00:00:31.115 --> 00:00:34.404
&gt;&gt; Cuz it applies to itself and

11
00:00:34.404 --> 00:00:39.271
all of its children children elements?

12
00:00:39.271 --> 00:00:41.110
&gt;&gt; Yeah, that's pretty close, yeah.

13
00:00:41.110 --> 00:00:44.525
So, it's due to this concept
called inheritance, yeah.

14
00:00:44.525 --> 00:00:45.990
&gt;&gt; Automatically inherits.

15
00:00:45.990 --> 00:00:50.950
&gt;&gt; Inheritance, so this occurs when an
inheritable property like color is not set

16
00:00:50.950 --> 00:00:53.590
directly on the element itself.

17
00:00:53.590 --> 00:00:56.608
But the parent chain is gonna be
traversed up until it finds a value for

18
00:00:56.608 --> 00:00:57.347
that property.

19
00:01:00.945 --> 00:01:02.100
Okay, another one.

20
00:01:02.100 --> 00:01:03.450
What happens now?

21
00:01:03.450 --> 00:01:05.860
So now we've got two style rules here.

22
00:01:05.860 --> 00:01:08.847
We've got paragraph color red,
that's the type selector,

23
00:01:08.847 --> 00:01:12.290
and then we've got a class
selector with color blue.

24
00:01:12.290 --> 00:01:14.708
It could be two options,
so which one do we say?

25
00:01:14.708 --> 00:01:17.688
You got a 50% chance.

26
00:01:17.688 --> 00:01:18.737
&gt;&gt; I'll say red.

27
00:01:18.737 --> 00:01:21.140
&gt;&gt; Yeah, the paragraph is-
&gt;&gt; Say red.

28
00:01:21.140 --> 00:01:22.710
&gt;&gt; Yeah, enforced now to be in red.

29
00:01:24.170 --> 00:01:26.250
&gt;&gt; Yeah, totally right.

30
00:01:26.250 --> 00:01:27.631
So, do we know why?

31
00:01:30.821 --> 00:01:35.770
&gt;&gt; I'm assuming because it goes
up the inheritance tree until it

32
00:01:35.770 --> 00:01:40.759
finds the first match
&gt;&gt; It doesn't actually need

33
00:01:40.759 --> 00:01:42.254
to traverse the tree in this case, right?

34
00:01:42.254 --> 00:01:46.820
Because our paragraph has a declared
style rule, but it would.

35
00:01:46.820 --> 00:01:51.633
So, if there was no selector that matched
that paragraph, it would traverse up and

36
00:01:51.633 --> 00:01:55.788
look for, okay, maybe the direct
parent has a color set on there.

37
00:01:58.695 --> 00:02:00.860
Okay, last one.

38
00:02:00.860 --> 00:02:03.735
So now again we've got our two selectors,
but

39
00:02:03.735 --> 00:02:06.406
any guess what the color
now is going to be?

40
00:02:06.406 --> 00:02:07.637
&gt;&gt; Blue.

41
00:02:07.637 --> 00:02:13.060
&gt;&gt; Blue, yes, absolutely.

42
00:02:13.060 --> 00:02:13.860
You wanna guess why?

43
00:02:15.370 --> 00:02:22.474
&gt;&gt; It's the stronger specifier,
I guess I would say.

44
00:02:22.474 --> 00:02:23.312
&gt;&gt; Stronger specifier, yeah,
totally true it has a higher specificity.

45
00:02:23.312 --> 00:02:25.309
&gt;&gt; Yeah.
&gt;&gt; Absolutely, and

46
00:02:25.309 --> 00:02:30.328
we're going to learn what that
means right now actually.

47
00:02:30.328 --> 00:02:34.959
So specificity is that algorithm that our
browsers are using to determine what CSS

48
00:02:34.959 --> 00:02:37.550
declaration should be applied.

49
00:02:37.550 --> 00:02:41.057
So every selector that we write
has a calculated weight, and

50
00:02:41.057 --> 00:02:45.810
it's kinda like a survival of the fittest,
the most specific weight wins.

51
00:02:45.810 --> 00:02:47.826
It does get a little bit technical, so

52
00:02:47.826 --> 00:02:50.850
you don't need to memorize
how this calculation is run.

53
00:02:50.850 --> 00:02:52.482
I think the more practice you get,

54
00:02:52.482 --> 00:02:55.191
the more easily identifiable
these things will become.

55
00:02:55.191 --> 00:02:59.277
And it really only matters if you
have two selectors that are trying to

56
00:02:59.277 --> 00:03:03.653
style the same exact element,
that's when this really comes into play.

57
00:03:03.653 --> 00:03:08.574
So, when we calculate specificity,
we use a three column approach here.

58
00:03:08.574 --> 00:03:11.990
For every ID selector,
we add 1 to the ID column.

59
00:03:11.990 --> 00:03:15.090
For every class selector we
add a 1 in the class column.

60
00:03:15.090 --> 00:03:17.710
And for every type selector,
we add a 1 in the type column.

61
00:03:19.100 --> 00:03:23.190
Now, the ID column is the most specific,
followed by class, and then by type.

62
00:03:23.190 --> 00:03:27.064
And to get that specificity value,
we're gonna add up the values of all of

63
00:03:27.064 --> 00:03:29.704
the columns to get the final
specificity weight.

64
00:03:29.704 --> 00:03:31.233
So, let's take an example.

65
00:03:31.233 --> 00:03:34.273
So, given the specificity
calculation rules,

66
00:03:34.273 --> 00:03:39.324
we can calculate the specificity of this,
and we'll do the first one together.

67
00:03:41.380 --> 00:03:43.932
So, the first selector
is a class selector,

68
00:03:43.932 --> 00:03:47.030
so we're selecting all
elements with a class of body.

69
00:03:48.280 --> 00:03:50.099
So that's gonna put a 1
in the class column.

70
00:03:51.180 --> 00:03:55.706
And then we are also targeting
the type selector for paragraphs,

71
00:03:55.706 --> 00:03:58.100
so you get a 1 and the type column.

72
00:03:58.100 --> 00:04:00.783
So this is gonna give us
a specificity of 0-1-1.

73
00:04:00.783 --> 00:04:02.950
Does anyone wanna take a guess
what this one might be?

74
00:04:04.500 --> 00:04:08.017
So remember it's id class type.

75
00:04:13.865 --> 00:04:20.702
&gt;&gt; 2 for in the class column, and
then 1 in the selector column?

76
00:04:20.702 --> 00:04:23.053
&gt;&gt; Yeah, 1 in the type column,
&gt;&gt; Type colomn, yeah.

77
00:04:23.053 --> 00:04:25.820
&gt;&gt; Yes, so, yep, it's gonna be 0-2-1.

78
00:04:25.820 --> 00:04:28.737
There are no ID selectors,
there are two class selectors, and

79
00:04:28.737 --> 00:04:29.954
one type selector, yep.

80
00:04:32.492 --> 00:04:33.768
Okay, last one.

81
00:04:33.768 --> 00:04:37.266
Anyone wanna guess what
this specificity will be?

82
00:04:37.266 --> 00:04:40.223
&gt;&gt; 1-1-0?

83
00:04:40.223 --> 00:04:43.500
&gt;&gt; 1-1-0, absolutely it is.

84
00:04:43.500 --> 00:04:45.382
We have one ID and one class.

85
00:04:48.059 --> 00:04:50.203
Now, the caveat here, inline styles.

86
00:04:50.203 --> 00:04:54.792
Inline styles have a higher specificity
than the ID selector, and we just said,

87
00:04:54.792 --> 00:04:57.670
ID is the highest specificity column,
right?

88
00:04:57.670 --> 00:04:59.200
But inline styles overrule that.

89
00:05:00.260 --> 00:05:02.240
So let's take an example.

90
00:05:02.240 --> 00:05:08.800
In our CSS, we are styling an element
that has an ID of text to be red.

91
00:05:08.800 --> 00:05:12.040
But we can see in our HTML here,
we've got style equals color blue.

92
00:05:13.520 --> 00:05:17.778
Now because inline styles override IDs,
it's going to be blue.

93
00:05:19.994 --> 00:05:23.370
Now, there's also this
notation called important.

94
00:05:24.650 --> 00:05:28.610
So this marks the style rule as
important of all things, right?

95
00:05:28.610 --> 00:05:30.650
It's gonna override all the other styles.

96
00:05:32.010 --> 00:05:33.740
So what might that look like in practice?

97
00:05:35.510 --> 00:05:40.187
So we still have our style equals color
blue in line, but now we've got the ID

98
00:05:40.187 --> 00:05:45.290
selector text, we're setting the color
to red, and noting it as important.

99
00:05:45.290 --> 00:05:47.860
So this takes precedence,
and the text will be red.

100
00:05:50.310 --> 00:05:55.068
Now, adding this important declaration
can make it really difficult to

101
00:05:55.068 --> 00:05:57.176
create maintainable CSS code.

102
00:05:57.176 --> 00:06:01.192
And it might actually be necessary to use
it when you're working with third party

103
00:06:01.192 --> 00:06:04.689
libraries or CSS libraries,
just the way that they're structured.

104
00:06:04.689 --> 00:06:09.204
But always try to write a higher
specificity selector instead of

105
00:06:09.204 --> 00:06:10.940
adding important.

106
00:06:10.940 --> 00:06:12.800
You can add important if
you're trying to debug, right?

107
00:06:12.800 --> 00:06:17.058
But generally it's better practice
to not ship this to production.

108
00:06:17.058 --> 00:06:20.294
So specificity calculations, again,
are gonna come into play when you have

109
00:06:20.294 --> 00:06:22.600
multiple selectors trying
to style the same element.

110
00:06:24.820 --> 00:06:29.737
If there are two or more declarations that
provide different property values for

111
00:06:29.737 --> 00:06:34.362
the same element, so if we have two
selectors trying to style the color of one

112
00:06:34.362 --> 00:06:37.128
element, the most specific selector wins.

113
00:06:37.128 --> 00:06:39.919
&gt;&gt; Let's say a selector
has more than ten classes,

114
00:06:39.919 --> 00:06:42.650
will this selector be
more specific than an ID?

115
00:06:44.450 --> 00:06:47.220
&gt;&gt; No, the ID selector wins.

116
00:06:49.390 --> 00:06:55.322
So if there's one ID
that will overrule ten.

117
00:06:55.322 --> 00:06:59.028
I can show you a little
trick to calculating this.

118
00:07:01.420 --> 00:07:05.799
If you're curious,
there's a specificity calculator.

119
00:07:05.799 --> 00:07:10.144
So let's say we have one,
we'll call it ID.

120
00:07:10.144 --> 00:07:16.854
And then let's say we've got class1,
I'm not gonna do ten,

121
00:07:16.854 --> 00:07:22.559
we'll do like four,
class2, class3, class4.

122
00:07:22.559 --> 00:07:27.806
But the question as well is this
one element with four classes,

123
00:07:27.806 --> 00:07:32.100
or is it gonna be four spaces separated,
right?

124
00:07:32.100 --> 00:07:34.059
So four children.

125
00:07:36.314 --> 00:07:39.971
If we click sort by specificity,
you can see ID is still on top, so

126
00:07:39.971 --> 00:07:42.243
it's still gonna be the most specific.

127
00:07:42.243 --> 00:07:44.430
But that was a great question.

128
00:07:44.430 --> 00:07:47.864
It's not the quantity in the column,
it's, we start at ID,

129
00:07:47.864 --> 00:07:52.040
if there is an ID on one element and
not on a second, the first element wins.

130
00:07:54.090 --> 00:07:57.340
But you can use this tool, if you're
uncertain, you can plug these in.

131
00:07:57.340 --> 00:07:58.470
Yeah, Mark.

132
00:07:58.470 --> 00:08:00.525
&gt;&gt; Do media queries add points?

133
00:08:00.525 --> 00:08:04.470
&gt;&gt; That's a great question.

134
00:08:04.470 --> 00:08:06.970
I think the answer is no,
I'm not a hundred percent certain.

135
00:08:06.970 --> 00:08:11.450
We will see pseudo classes,
and is it pseudo elements?

136
00:08:11.450 --> 00:08:15.300
In a later chapter, we're gonna
discuss how those will add weight, but

137
00:08:15.300 --> 00:08:17.960
I don't believe media
queries add specificity.

138
00:08:17.960 --> 00:08:19.450
Let's Google it together.

139
00:08:19.450 --> 00:08:23.670
Do media queries add specificity in CSS?

140
00:08:25.560 --> 00:08:29.625
They do not affect specificity according
to this random website I found on Google.

141
00:08:31.132 --> 00:08:33.963
So my answer is gonna say no.

142
00:08:35.907 --> 00:08:43.580
But, If we go to CSS tricks here,
does the media query increase specificity?

143
00:08:43.580 --> 00:08:46.370
No, that's also a great question.

144
00:08:46.370 --> 00:08:49.410
But there are a couple other
caveats to the specificity weights.

145
00:08:49.410 --> 00:08:52.730
Like I mentioned pseudo classes, pseudo
elements, we'll get to those later on.

146
00:08:52.730 --> 00:08:55.690
So here's an unordered list,
it contains three list items.

147
00:08:56.710 --> 00:08:58.777
Each list item has a link in it.

148
00:08:58.777 --> 00:09:02.460
So given the following CSS,
what color will the links be?

149
00:09:02.460 --> 00:09:04.650
We're gonna walk through this together.

150
00:09:04.650 --> 00:09:06.288
I know it might be a little
bit hard to see this,

151
00:09:06.288 --> 00:09:08.550
we're gonna zoom in on
some of the CSS code here.

152
00:09:08.550 --> 00:09:10.680
This is what the output looks like.

153
00:09:10.680 --> 00:09:14.530
So links 1 and 3 will be blue,
and link 2 will be red.

154
00:09:14.530 --> 00:09:18.200
But let's actually walk through how,
how does this come to fruition?

155
00:09:18.200 --> 00:09:19.650
So, the first selector.

156
00:09:20.990 --> 00:09:24.186
We're going to tackle the second
link here, the one that's red,

157
00:09:24.186 --> 00:09:26.380
we're gonna figure out why it's red.

158
00:09:26.380 --> 00:09:31.093
So, the first selector has one type,
so it's weight is 0-0-1.

159
00:09:31.093 --> 00:09:34.945
The second selector also has a one type,
so it's 0-0-1 as well.

160
00:09:37.545 --> 00:09:43.495
The third selector has one in each column,
so one ID, one class, one type selector.

161
00:09:47.481 --> 00:09:53.685
The fourth selector has one type and
one class, so that's 0-1-1.

162
00:09:53.685 --> 00:09:57.712
The next one has one ID and one type.

163
00:09:57.712 --> 00:10:02.350
And the last one has one ID,
one type, and one class.

164
00:10:02.350 --> 00:10:06.260
So I know that's a lot, and you won't
have to probably do this day to day.

165
00:10:06.260 --> 00:10:08.100
But it's good to understand
how these are calculated.

166
00:10:10.220 --> 00:10:12.750
So when we zoom back out, these are the
weights that we're working with here.

167
00:10:14.250 --> 00:10:15.905
So now let's just look at the styles or

168
00:10:15.905 --> 00:10:18.350
the selectors that are aiming
to style the second link.

169
00:10:20.060 --> 00:10:24.330
So if we start in that left column,
that ID column that I just mentioned,

170
00:10:24.330 --> 00:10:28.262
let's compare which selectors has
the highest ID column weight.

171
00:10:31.752 --> 00:10:35.004
So three of our selectors have
a one in the ID column, so

172
00:10:35.004 --> 00:10:39.230
that's gonna be the third, fifth,
and sixth if my math is correct.

173
00:10:39.230 --> 00:10:44.930
So, all these three selectors
still have a 1 in the ID column.

174
00:10:44.930 --> 00:10:47.535
We move one space to the right,
to the class column,

175
00:10:47.535 --> 00:10:50.500
they also all have a 1
in the class column.

176
00:10:50.500 --> 00:10:55.097
So now we move to the third column,
the type column.

177
00:10:55.097 --> 00:10:57.515
So we can see here, just the third and

178
00:10:57.515 --> 00:11:00.638
the sixth selector have
a 1 in the type column.

179
00:11:01.720 --> 00:11:03.590
But these selectors are tied.

180
00:11:03.590 --> 00:11:07.006
So, the first one is trying to style
this link with a color of yellow, and

181
00:11:07.006 --> 00:11:09.820
the second one is attempting to
style it with a color of red.

182
00:11:09.820 --> 00:11:12.911
If two or more selectors have the same
weight, the most recent one wins when

183
00:11:12.911 --> 00:11:15.040
you're reading it from top
to bottom on your file.

184
00:11:15.040 --> 00:11:18.835
So because the bottom one is
at the bottom, it wins, and so

185
00:11:18.835 --> 00:11:21.473
the color of this link is going to be red.

186
00:11:24.430 --> 00:11:26.580
But what about the other links?

187
00:11:26.580 --> 00:11:27.632
What colors are those gonna be?

188
00:11:27.632 --> 00:11:28.721
Selectors one, two and

189
00:11:28.721 --> 00:11:32.590
four are the selectors attempting to
style the rest of our list items.

190
00:11:32.590 --> 00:11:35.474
So we can follow that same methodology
of calculating the weight,

191
00:11:35.474 --> 00:11:37.695
starting with the ID column,
they all have zeros.

192
00:11:37.695 --> 00:11:42.506
In the class column, you can see,
number four has 1 in the class column.

193
00:11:42.506 --> 00:11:44.686
So that wins and
the rest of the links will be blue.

194
00:11:44.686 --> 00:11:46.660
But there's something
a little bit odd here.

195
00:11:48.170 --> 00:11:51.690
Why is the dot for link two still blue?

196
00:11:52.760 --> 00:11:57.451
So this is because we're only setting
the style of the link element and

197
00:11:57.451 --> 00:12:00.240
not the actual list item, right?

198
00:12:00.240 --> 00:12:05.616
So the list item, that dot,
it's going to inherit that color blue.

199
00:12:05.616 --> 00:12:09.463
So like I had mentioned for one of
the questions, there is a specificity

200
00:12:09.463 --> 00:12:13.953
calculator, so if you've got a couple of
selectors you're uncertain which one is

201
00:12:13.953 --> 00:12:17.970
the most specific, you can plop them
in here, and it'll help you out.

202
00:12:17.970 --> 00:12:20.970
So, we've learned about the history of
CSS, we've learned about different types

203
00:12:20.970 --> 00:12:23.308
of elements, replaced,
non-replaced, block, and inline.

204
00:12:23.308 --> 00:12:30.324
We learned a little bit more about
selectors, specificity, and inheritance.

205
00:12:30.324 --> 00:12:34.411
So next step, in the next chapter we're
gonna start building our project, but

206
00:12:34.411 --> 00:12:38.266
before that we'll learn some of
the skills needed for that first portion.

