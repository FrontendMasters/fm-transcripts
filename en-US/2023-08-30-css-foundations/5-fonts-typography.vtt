WEBVTT

1
00:00:00.000 --> 00:00:04.520
So you'll notice that the first
font-family, Georgia in this example, so

2
00:00:04.520 --> 00:00:07.230
first of all,
a font-family is a list of one or

3
00:00:07.230 --> 00:00:10.584
more font-family names
and/or generic family names.

4
00:00:10.584 --> 00:00:14.469
So we've got font-family: Georgia, serif.

5
00:00:14.469 --> 00:00:20.718
And the second one is font-family is
Comic Sans in quotations, sans-serif.

6
00:00:20.718 --> 00:00:24.547
So the first font-family, Georgia,
it doesn't have quotes around the name,

7
00:00:24.547 --> 00:00:25.857
while the second one does.

8
00:00:25.857 --> 00:00:31.247
And it's really good practice to quote
font-family names that have whitespace or

9
00:00:31.247 --> 00:00:32.867
digits or punctuation.

10
00:00:32.867 --> 00:00:37.521
Anything other than a hyphen,
it should be in quotes.

11
00:00:37.521 --> 00:00:41.861
You'll also notice we've got serif and
sans-serif noted after a comma, and

12
00:00:41.861 --> 00:00:44.830
that's because these
are generic font-families.

13
00:00:44.830 --> 00:00:50.401
So these are essentially a fallback
mechanism, where if we declare a font and

14
00:00:50.401 --> 00:00:55.990
it's not available, this fallback
family is what's going to be rendered.

15
00:00:55.990 --> 00:00:58.790
This is not a comprehensive list
of the generic font-families, but

16
00:00:58.790 --> 00:01:02.230
you'll typically see these the most,
right, monospace or serif, sans-serif.

17
00:01:02.230 --> 00:01:07.960
Let's take a look at what these
are actually, what they look like.

18
00:01:07.960 --> 00:01:12.559
So in serif fonts, the glyphs
have finishing strokes, flared or

19
00:01:12.559 --> 00:01:16.250
tapering ends, or
they have actual serif endings.

20
00:01:16.250 --> 00:01:20.476
And that stroke is one of the main
lines that make up the appearance of

21
00:01:20.476 --> 00:01:21.374
a character.

22
00:01:21.374 --> 00:01:24.430
So here are a couple of
fonts that are serif fonts.

23
00:01:24.430 --> 00:01:28.580
You can see they have that little
tail on the end of each character.

24
00:01:28.580 --> 00:01:29.986
You might see this in,

25
00:01:29.986 --> 00:01:34.804
the font-family is they go back to
the whole brand identity of your website.

26
00:01:34.804 --> 00:01:38.151
So if you have a really established
newspaper, The New York Times,

27
00:01:38.151 --> 00:01:38.855
for example,

28
00:01:38.855 --> 00:01:42.926
they might use a serif font because it's
typically more established in feeling.

29
00:01:45.637 --> 00:01:49.791
The contrast of this sans-serif,
sans in French means without, so

30
00:01:49.791 --> 00:01:51.160
means without serif.

31
00:01:51.160 --> 00:01:54.835
So the glyphs have stroke
endings that are plain,

32
00:01:54.835 --> 00:01:58.259
they don't have that tail at the end,
right?

33
00:01:58.259 --> 00:02:02.864
So here are few fonts that
are sans-serif fonts.

34
00:02:02.864 --> 00:02:05.429
They don't have that tail at the end.

35
00:02:05.429 --> 00:02:08.779
And sans-serif fonts
are typically more playful.

36
00:02:08.779 --> 00:02:11.722
So you might see this on
a really modern website builder,

37
00:02:11.722 --> 00:02:15.787
like Squarespace or something that has
a little bit more bubbly personality.

38
00:02:18.270 --> 00:02:21.614
And then I think most of us,
if we are developers,

39
00:02:21.614 --> 00:02:24.093
are familiar with monospace fonts.

40
00:02:24.093 --> 00:02:29.175
All glyphs have the same fixed width,
so we use these in our code editors.

41
00:02:29.175 --> 00:02:30.991
Yeah, question.

42
00:02:30.991 --> 00:02:34.918
&gt;&gt; Are family names case-sensitive?

43
00:02:34.918 --> 00:02:37.351
&gt;&gt; That's actually a great question.

44
00:02:37.351 --> 00:02:40.063
Are font-family names case-sensitive?

45
00:02:40.063 --> 00:02:42.107
Let's Google it together.

46
00:02:42.107 --> 00:02:45.540
Are CSS font-family names case-sensitive?

47
00:02:45.540 --> 00:02:51.610
It is case-insensitive within the ASCII
range, according to Stack Overflow.

48
00:02:54.290 --> 00:02:58.744
I mean, I think it's good practice to
follow the capitalization, but yeah,

49
00:03:01.327 --> 00:03:05.767
They are case-insensitive according
to my first page Google search.

50
00:03:05.767 --> 00:03:07.321
That's a fantastic question, though.

51
00:03:14.697 --> 00:03:17.818
Okay, some of the properties we will
see when it comes to font-family.

52
00:03:17.818 --> 00:03:21.749
So font weight, often, this is dependent
on the font-family being used.

53
00:03:21.749 --> 00:03:25.875
There are limitations, some font-families
don't allow for really bolded font.

54
00:03:25.875 --> 00:03:29.146
Some don't allow for
a really thin font, but

55
00:03:29.146 --> 00:03:32.171
it does set the bold appearance of a font.

56
00:03:32.171 --> 00:03:33.530
So here are some of the values, right?

57
00:03:33.530 --> 00:03:37.891
So it can take a keyword,
like normal or bold.

58
00:03:37.891 --> 00:03:42.649
There are keywords that are relative
to parent, like bolder or lighter.

59
00:03:42.649 --> 00:03:45.294
There are numeric key values,
like 100 or 700.

60
00:03:45.294 --> 00:03:48.523
And then there are global values,
like inherent.

61
00:03:48.523 --> 00:03:51.008
If you decided to use numerical weight,

62
00:03:51.008 --> 00:03:53.720
they do map to some of
these keyword values.

63
00:03:53.720 --> 00:03:56.801
So 100 is gonna be really,
really thin or hairline.

64
00:03:56.801 --> 00:04:00.837
Probably not the best to use on a website,
probably not very accessible.

65
00:04:00.837 --> 00:04:05.776
400 is normal font weight,
700 is bold font weight.

66
00:04:05.776 --> 00:04:10.178
So that's how those numerical
values are mapped to the keywords.

67
00:04:13.152 --> 00:04:16.450
Font size sets the size of the font.

68
00:04:16.450 --> 00:04:19.854
And there are a few values
that are accepted when you're

69
00:04:19.854 --> 00:04:21.455
defining your font size.

70
00:04:21.455 --> 00:04:26.231
So we've got absolute values,
relative values, length values,

71
00:04:26.231 --> 00:04:29.180
percentage values, and global values.

72
00:04:29.180 --> 00:04:30.676
Let's see what this means.

73
00:04:30.676 --> 00:04:34.517
So absolute values,
you probably won't see them very often,

74
00:04:34.517 --> 00:04:38.438
it's based on the user's default
font size, which is medium.

75
00:04:38.438 --> 00:04:42.539
But there's xx-small, x-small,
small, medium, xx-large,

76
00:04:42.539 --> 00:04:47.360
kind of T-shirt sizes, I suppose, you
probably will not see these very often.

77
00:04:47.360 --> 00:04:48.103
Yeah, Mark.

78
00:04:48.103 --> 00:04:54.939
&gt;&gt; Is making font size a function
of viewport with a common practice?

79
00:04:54.939 --> 00:05:02.218
&gt;&gt; We're gonna talk about and rem, it's
like calculating based on a viewport size.

80
00:05:02.218 --> 00:05:06.358
I don't think viewport size, but in terms
of the root to clear a font size or

81
00:05:06.358 --> 00:05:09.975
the user-defined font size,
the x that is common practice, and

82
00:05:09.975 --> 00:05:11.384
we'll talk about that.

83
00:05:11.384 --> 00:05:13.703
So we've relative values smaller or

84
00:05:13.703 --> 00:05:17.230
larger it makes it relative
to the parent's font size.

85
00:05:17.230 --> 00:05:19.413
Again, you probably won't
see these very often.

86
00:05:21.467 --> 00:05:24.920
Length values are gonna be
the most commonly used.

87
00:05:24.920 --> 00:05:27.630
So we've got pixels, and rem.

88
00:05:27.630 --> 00:05:31.340
I know and rem seem to confuse many
people, so let's talk about those.

89
00:05:31.340 --> 00:05:34.301
For most font-relative units like

90
00:05:34.301 --> 00:05:38.840
the font size is relative to
the parent element's font size.

91
00:05:38.840 --> 00:05:43.099
So here we've got a div,
it has one child, a paragraph element.

92
00:05:43.099 --> 00:05:47.019
On the HTML,
we're setting a font size of 16 pixels.

93
00:05:47.019 --> 00:05:51.286
On the div element,
we're setting font-size of 2em, and

94
00:05:51.286 --> 00:05:54.825
on paragraph, font-size also 2em.

95
00:05:54.825 --> 00:05:59.417
So if we calculate this,
we've got a base of 16 pixels on HTML,

96
00:05:59.417 --> 00:06:04.776
times 2em for the div, gives us a font
size of 32 pixels for a div element.

97
00:06:07.378 --> 00:06:12.150
Now, the paragraph element, again, is
relative to its parent, which is our div.

98
00:06:12.150 --> 00:06:17.600
So instead of 16 pixels times 2em,
it is 32 pixels times 2em.

99
00:06:17.600 --> 00:06:20.860
This gives us a font size for
that paragraph of 64 pixels.

100
00:06:20.860 --> 00:06:23.377
So again, relative to the parent.

101
00:06:26.202 --> 00:06:29.241
Rem is relative to the root.

102
00:06:31.504 --> 00:06:36.323
So instead of calculating the div first
and then the paragraph font size,

103
00:06:36.323 --> 00:06:40.675
these are both gonna be relative
to the font size declared in HTML,

104
00:06:40.675 --> 00:06:42.633
on that HTML element of 16.

105
00:06:42.633 --> 00:06:47.520
So both the div and the paragraph have
a declared font size of 2rem, and

106
00:06:47.520 --> 00:06:50.627
that calculates out to 32 pixels for each.

107
00:06:50.627 --> 00:06:55.597
&gt;&gt; And so
does this helps in responsiveness?

108
00:06:55.597 --> 00:06:57.181
&gt;&gt; Does it help with responsiveness?

109
00:06:57.181 --> 00:07:01.043
Yes, we're gonna talk
about this right now.

110
00:07:01.043 --> 00:07:06.163
Yeah, so there is a debate about
which one we should be using.

111
00:07:06.163 --> 00:07:08.832
Many argue we shouldn't use pixels
because they're not scalable,

112
00:07:08.832 --> 00:07:09.851
not responsive, right?

113
00:07:09.851 --> 00:07:14.024
So if we declare, this paragraph needs
to be 16 pixels, it'll be 16 pixels.

114
00:07:14.024 --> 00:07:17.781
Of course, users can zoom, right?

115
00:07:17.781 --> 00:07:22.958
But for users who set a different default
font size, maybe they want their base

116
00:07:22.958 --> 00:07:28.229
font size to be 20 pixels instead of 16,
using and rem, they will scale.

117
00:07:28.229 --> 00:07:32.162
That's why it's really useful for
responsive design.

118
00:07:32.162 --> 00:07:35.820
Yeah, the thing is since is
calculated based on the parent,

119
00:07:35.820 --> 00:07:40.443
it can be a little tricky when you're
nesting elements to know exactly what font

120
00:07:40.443 --> 00:07:43.013
size a nested child's gonna have, right?

121
00:07:43.013 --> 00:07:45.143
So I always recommend using rem,

122
00:07:45.143 --> 00:07:49.184
that's relative to the base,
the root to clear the font size.

123
00:07:49.184 --> 00:07:54.302
And that will scale nicely as users update
their base font size in their browser.

124
00:07:57.833 --> 00:07:59.158
Does that answer your question?

125
00:07:59.158 --> 00:08:00.762
&gt;&gt; Yeah.
&gt;&gt; Okay, you're welcome.

126
00:08:03.520 --> 00:08:05.937
So we have percentage values as well.

127
00:08:05.937 --> 00:08:10.410
Positive percent value is relative
to the parent font size again.

128
00:08:10.410 --> 00:08:14.710
So here, we've got a declared font
size again, 16 pixels on HTML.

129
00:08:14.710 --> 00:08:20.962
The div has a font size of 120%, and
paragraph is also font size of 120%.

130
00:08:23.201 --> 00:08:25.117
And it gets a little bit messy, right?

131
00:08:25.117 --> 00:08:31.409
So 120% is 16 pixels declared
in the HTML times 1.2,

132
00:08:31.409 --> 00:08:36.733
gives us a font size for
that div of 19.2 pixels.

133
00:08:36.733 --> 00:08:40.523
And then instead of using that 16
pixels for the paragraph calculation,

134
00:08:40.523 --> 00:08:43.001
we have to refer to its parent,
which is the div.

135
00:08:43.001 --> 00:08:44.472
It's very confusing,

136
00:08:44.472 --> 00:08:49.038
this is why you're not often seeing
percentages declared for font size.

137
00:08:49.038 --> 00:08:51.755
But this is how you would
calculate that if need be.

138
00:08:51.755 --> 00:08:56.998
You look to its parent to see what
font size they have and you multiply.

139
00:09:01.311 --> 00:09:03.614
So we've also got a couple global values.

140
00:09:03.614 --> 00:09:08.133
So inherit, font size inherit, it's gonna
set the property to the computed value of

141
00:09:08.133 --> 00:09:09.783
the property from its parent.

142
00:09:09.783 --> 00:09:13.674
So it's gonna inherit that font
size from whatever its parent has.

143
00:09:13.674 --> 00:09:18.156
Initial applies the initial or
default value of a property, so

144
00:09:18.156 --> 00:09:22.143
it would be maybe 16 pixels,
if that's the initial.

145
00:09:22.143 --> 00:09:24.485
Revert and
revert-layer are a little tricky, and

146
00:09:24.485 --> 00:09:27.870
we're not gonna cover those in this
since this is a foundational course.

147
00:09:27.870 --> 00:09:34.011
You're welcome to refer to
the Mozilla documents linked below.

148
00:09:34.011 --> 00:09:38.516
And then unset will reset a property
to its inherited value if the property

149
00:09:38.516 --> 00:09:43.978
naturally inherits from the parent, like
color, for example, is inherited, right?

150
00:09:43.978 --> 00:09:48.610
So if the property is not heritable by
default, it's just set to the default.

151
00:09:48.610 --> 00:09:52.582
You'll see these keywords used in a lot of
places with a lot of different properties.

152
00:09:55.711 --> 00:09:57.146
Okay, text decoration.

153
00:09:57.146 --> 00:10:00.175
So this is gonna set the appearance
of decorative lines on texts.

154
00:10:00.175 --> 00:10:04.112
So it's shorthand for
text-decoration-line,

155
00:10:04.112 --> 00:10:08.330
text-decoration-color, style,
and thickness.

156
00:10:08.330 --> 00:10:09.970
So this is a concept of shorthand.

157
00:10:09.970 --> 00:10:13.878
So instead of defining multiple CSS
properties, we can use shorthand keywords

158
00:10:13.878 --> 00:10:17.333
and many different properties to
change several properties at once.

159
00:10:19.203 --> 00:10:24.035
So here we've got an example that shows
four different properties defined on

160
00:10:24.035 --> 00:10:27.532
this paragraph element for
text-decoration-line,

161
00:10:27.532 --> 00:10:30.967
text-decoration-color, style,
and thickness.

162
00:10:30.967 --> 00:10:33.731
So we got four declarations there, but

163
00:10:33.731 --> 00:10:39.107
we can just use the text-decoration
shorthand to set all of those in one go.

164
00:10:39.107 --> 00:10:44.408
You'll see this a lot with transition and
other, trying to think,

165
00:10:44.408 --> 00:10:49.811
of course, when I have to come up
with examples of my mind, I can't.

166
00:10:49.811 --> 00:10:53.142
But yeah, you'll see shorthand often,
and I'll make sure to call that out.

