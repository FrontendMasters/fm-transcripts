WEBVTT

1
00:00:00.095 --> 00:00:02.080
So what is CSS?

2
00:00:02.080 --> 00:00:05.433
CSS stands for cascading style sheets.

3
00:00:05.433 --> 00:00:10.247
So while HTML allows us to write our
content for the web, where we can add

4
00:00:10.247 --> 00:00:16.810
headings, and paragraphs, and images,
it's not gonna have a beautiful style.

5
00:00:16.810 --> 00:00:19.709
So you might see some default styling
when you load a plain HTML document, and

6
00:00:19.709 --> 00:00:21.015
we'll see that with our project.

7
00:00:21.015 --> 00:00:25.483
And that's because the browser that
you're using provides default styling for

8
00:00:25.483 --> 00:00:26.670
some HTML elements.

9
00:00:26.670 --> 00:00:28.791
But we use CSS to style
these web pages and

10
00:00:28.791 --> 00:00:32.301
make them visually appealing,
but also accessible to our users.

11
00:00:32.301 --> 00:00:34.980
So CSS1 was first proposed in 1994.

12
00:00:34.980 --> 00:00:39.721
And at the time, browsers gave a lot
of styling power to the user and

13
00:00:39.721 --> 00:00:42.863
not a lot of it was
available to the authors.

14
00:00:42.863 --> 00:00:47.186
So all the webpage authors could do is
kind of mark a piece of content as, hey,

15
00:00:47.186 --> 00:00:49.590
this is a paragraph, or this is a heading.

16
00:00:49.590 --> 00:00:51.451
And that was about it.

17
00:00:51.451 --> 00:00:56.442
So the goal of CSS was to provide
a declarative styling language that was

18
00:00:56.442 --> 00:00:58.938
flexible for website authors, and

19
00:00:58.938 --> 00:01:03.380
it kinda shared the styling
power between authors and users.

20
00:01:03.380 --> 00:01:08.359
And by means of this cascade, the styles
could be combined and prioritized, so

21
00:01:08.359 --> 00:01:11.498
the authors and readers,
again, both had a say.

22
00:01:11.498 --> 00:01:13.769
So by late 1996, CSS1 was finished.

23
00:01:17.040 --> 00:01:20.165
So while the CSS Working Group
proceeded with CSS2,

24
00:01:20.165 --> 00:01:23.440
a lot of the web browsers
struggled to implement CSS1.

25
00:01:23.440 --> 00:01:27.162
Each piece of CSS was pretty
simple on its own, but

26
00:01:27.162 --> 00:01:33.017
the combination of all of these pieces
is what created some complex behavior.

27
00:01:33.017 --> 00:01:36.090
So the CSS Working Group
finalized CSS2 in early 1998.

28
00:01:39.930 --> 00:01:43.580
And once CSS2 was finalized,
work immediately began on CSS3.

29
00:01:43.580 --> 00:01:49.384
But it was a little bit different, because
instead of one big package essentially,

30
00:01:49.384 --> 00:01:53.159
it was constructed as a series
of standalone modules.

31
00:01:53.159 --> 00:01:58.339
So the rationale behind this was that each
module could be worked on at its own pace,

32
00:01:58.339 --> 00:02:02.927
and really critical or popular modules
could be advanced along the W3C or

33
00:02:02.927 --> 00:02:06.405
the World Wide Web Consortium,
their progress track,

34
00:02:06.405 --> 00:02:09.079
instead of being held up by other modules.

35
00:02:09.079 --> 00:02:10.287
So by early 2012,

36
00:02:10.287 --> 00:02:14.561
there were three CSS3 modules that have
reached full recommendation status.

37
00:02:14.561 --> 00:02:19.510
So those were color level three,
namespaces, and selectors level three.

38
00:02:19.510 --> 00:02:21.658
So when a browser displays a document,

39
00:02:21.658 --> 00:02:24.856
it has to combine the content
with the style information.

40
00:02:24.856 --> 00:02:27.450
So, first,
the browser is gonna load the HTML.

41
00:02:28.690 --> 00:02:33.496
Next, it's gonna convert the HTML to
the DOM, or the Document Object Model, and

42
00:02:33.496 --> 00:02:37.957
this is a representation of the objects
that really make up the structure and

43
00:02:37.957 --> 00:02:39.718
the content of the document.

44
00:02:39.718 --> 00:02:42.790
Third, the browser fetches
the linked resources.

45
00:02:42.790 --> 00:02:46.824
So these are gonna be things like images,
videos, and CSS.

46
00:02:46.824 --> 00:02:50.217
JavaScript's handled a little
bit later on in the process, so

47
00:02:50.217 --> 00:02:51.890
it's not included in Step 3.

48
00:02:51.890 --> 00:02:54.616
Step 4 is the browser
parses this FetchCSS, and

49
00:02:54.616 --> 00:02:58.810
it's gonna determine which style rules
should be applied to which nodes in

50
00:02:58.810 --> 00:03:01.749
the DOM, and
it's gonna associate styles to them.

51
00:03:01.749 --> 00:03:04.389
So this is called the render tree.

52
00:03:05.960 --> 00:03:09.792
And Step 5, the render tree is
laid out in the structure, and

53
00:03:09.792 --> 00:03:13.640
it should appear after all
the style rules have been applied.

54
00:03:13.640 --> 00:03:18.674
And then lastly, the visual display
of the page is shown on the screen.

55
00:03:18.674 --> 00:03:21.267
I believe this is called
first contentful pin.

56
00:03:21.267 --> 00:03:24.422
So let's talk about some of
the terminology that you might hear.

57
00:03:24.422 --> 00:03:27.920
So elements are the basis
of document structure.

58
00:03:27.920 --> 00:03:31.509
And CSS depends on elements,
and they can take two forms,

59
00:03:31.509 --> 00:03:35.255
they can be replaced elements and
non-replaced elements.

60
00:03:37.890 --> 00:03:41.628
So replaced elements are elements where
the content is going to be replaced by

61
00:03:41.628 --> 00:03:44.630
something that's not directly
represented in the content.

62
00:03:48.530 --> 00:03:52.224
So, for example, this might be an image.

63
00:03:52.224 --> 00:03:53.776
This element that we see here,

64
00:03:53.776 --> 00:03:57.860
it presents nothing unless you
point it to some external content.

65
00:03:57.860 --> 00:04:01.951
So if you point it to a valid image file,
that's gonna be placed in the document and

66
00:04:01.951 --> 00:04:02.736
replace this.

67
00:04:02.736 --> 00:04:05.004
But if not,
it's either gonna display nothing,

68
00:04:05.004 --> 00:04:07.660
or the browser might display
a broken image placeholder.

69
00:04:09.870 --> 00:04:13.032
Non-replaced elements, they comprise, or

70
00:04:13.032 --> 00:04:16.630
are comprised by the majority
of HTML elements.

71
00:04:16.630 --> 00:04:19.447
So it means that their content
is presented by the user agent,

72
00:04:19.447 --> 00:04:23.146
which is generally a browser, inside of
a box that's generated by the element.

73
00:04:25.420 --> 00:04:29.515
So this might be like a heading
level one that says hello.

74
00:04:29.515 --> 00:04:32.466
So in addition to replaced and
non-replaced elements,

75
00:04:32.466 --> 00:04:35.780
you may have heard of block and
inline elements.

76
00:04:35.780 --> 00:04:38.819
There are more display types, but these
are kinda the most foundational ones.

77
00:04:42.640 --> 00:04:46.511
So block elements, they generate
an element box that fills the parent

78
00:04:46.511 --> 00:04:50.792
element's content area, and they don't
have other elements beside them.

79
00:04:53.460 --> 00:04:55.041
So what does that look like?

80
00:04:55.041 --> 00:04:58.590
So here we've got a heading level one,
followed by a paragraph.

81
00:04:58.590 --> 00:05:00.938
And both of these are block elements.

82
00:05:00.938 --> 00:05:04.310
And if it were to be rendered,
we can see that hello is on Line 1.

83
00:05:04.310 --> 00:05:07.662
And this is a paragraph with really
important information is rendered

84
00:05:07.662 --> 00:05:08.242
on Line 2.

85
00:05:08.242 --> 00:05:12.022
Inline elements generate an element
box within a line of text and

86
00:05:12.022 --> 00:05:14.810
they don't break up the flow of that line.

87
00:05:14.810 --> 00:05:16.969
So what would this look like in practice?

88
00:05:16.969 --> 00:05:20.620
So we can see within our paragraph
element we have a link, and

89
00:05:20.620 --> 00:05:23.566
it says,
this is a link to a really cool website.

90
00:05:23.566 --> 00:05:29.282
And we can see that link is being rendered
inline with the paragraph element.

91
00:05:29.282 --> 00:05:31.855
So there are some nuances to block and
inline elements, and

92
00:05:31.855 --> 00:05:33.770
we'll talk about those a little bit later.

93
00:05:33.770 --> 00:05:36.815
But those are gonna be two of
the foundational types of elements that we

94
00:05:36.815 --> 00:05:37.801
will be working with.

95
00:05:37.801 --> 00:05:40.750
So CSS is a rule-based language.

96
00:05:40.750 --> 00:05:44.944
We define these rules by creating
different styles that should be applied to

97
00:05:44.944 --> 00:05:47.245
a certain element or a group of elements.

98
00:05:47.245 --> 00:05:51.226
So, for example, if we want to select
all heading level ones on our page,

99
00:05:51.226 --> 00:05:53.360
we can do that with the following code.

100
00:05:54.550 --> 00:05:59.506
So we select all h1 headers
with the h1 element selector.

101
00:05:59.506 --> 00:06:02.548
So the selector is followed by
a set of curly brackets, and

102
00:06:02.548 --> 00:06:06.100
inside these curly brackets,
we're gonna write our style rules.

103
00:06:07.470 --> 00:06:09.302
So we call these declarations.

104
00:06:09.302 --> 00:06:14.172
So a declaration is a pair that contains a
property, in this case color, and a value,

105
00:06:14.172 --> 00:06:15.440
in this case red.

106
00:06:15.440 --> 00:06:19.074
If we break down this into
the terminology, right,

107
00:06:19.074 --> 00:06:21.883
we've got the selector, which is h1,

108
00:06:21.883 --> 00:06:26.114
and the declaration block,
again, is the curly brackets.

109
00:06:26.114 --> 00:06:29.820
The declaration is that color red,
that key-value property pair.

110
00:06:29.820 --> 00:06:37.001
And again, color is a type of property,
and red is the value for that property.

