WEBVTT

1
00:00:00.480 --> 00:00:04.090
Welcome to JavaScript and
TypeScript repos.

2
00:00:04.090 --> 00:00:05.260
My name is Mike North.

3
00:00:05.260 --> 00:00:08.248
I'm a senior staff engineer at LinkedIn,

4
00:00:08.248 --> 00:00:11.820
where I lead the infrastructure
as a product team.

5
00:00:11.820 --> 00:00:17.000
So I'm kind of a product designer for
for software infrastructure.

6
00:00:17.000 --> 00:00:22.650
And one of the things I'm focused on
is helping teams lots of engineers,

7
00:00:22.650 --> 00:00:26.000
Find a great developer experience.

8
00:00:26.000 --> 00:00:28.660
mono repos are a big part of that.

9
00:00:28.660 --> 00:00:33.320
So the idea behind a mono repo is I mean,
if we break it down,

10
00:00:33.320 --> 00:00:36.160
it's literally one repo.

11
00:00:36.160 --> 00:00:39.420
This word can be used to
describe many things.

12
00:00:39.420 --> 00:00:40.310
And in fact it is.

13
00:00:40.310 --> 00:00:43.458
So if you talk to People who are,
you know,

14
00:00:43.458 --> 00:00:47.393
not primarily focused in
the JavaScript ecosystem,

15
00:00:47.393 --> 00:00:52.560
they may think it describes the way
Google manages their source code.

16
00:00:52.560 --> 00:00:57.180
For example, the whole company
commits everything to one repository.

17
00:00:57.180 --> 00:00:59.390
We mean something specific today.

18
00:00:59.390 --> 00:01:02.510
And that is many related packages.

19
00:01:02.510 --> 00:01:07.105
Usually packages that have
interdependencies between them, right,

20
00:01:07.105 --> 00:01:13.020
they're deeply entangled, they're all
located in a single git repository.

21
00:01:13.020 --> 00:01:17.290
We're gonna learn about this today
in the context of a Slack app.

22
00:01:17.290 --> 00:01:20.130
So, if you look at this app,
many things going on.

23
00:01:20.130 --> 00:01:22.940
Right, you can have all of
these different concerns.

24
00:01:22.940 --> 00:01:27.555
You have some UI components, you have
a data layer things that are fetching,

25
00:01:27.555 --> 00:01:31.700
JSON, you have some utilities like for
date formatting.

26
00:01:31.700 --> 00:01:35.156
And then we have some types because
this project is going to be written in

27
00:01:35.156 --> 00:01:39.189
TypeScript although you don't need to know
TypeScript At all today in order to take

28
00:01:39.189 --> 00:01:40.770
this course.

29
00:01:40.770 --> 00:01:44.339
What we'll get by structuring
this as a mono repo,

30
00:01:44.339 --> 00:01:48.904
we can break it apart, and
we can treat it as independent layers,

31
00:01:48.904 --> 00:01:53.700
each of which has a great
encapsulation boundary around it.

32
00:01:53.700 --> 00:01:57.112
So it's almost like
within the same Git repo,

33
00:01:57.112 --> 00:02:02.460
we have three small libraries Then I'll
come together to become an app.

34
00:02:03.960 --> 00:02:07.426
And you can imagine how
we could use the same

35
00:02:07.426 --> 00:02:10.800
three libraries to create a COI or an API.

36
00:02:10.800 --> 00:02:12.197
Or maybe we have a desktop and

37
00:02:12.197 --> 00:02:15.530
a mobile web experience that
are a little bit different.

38
00:02:15.530 --> 00:02:18.064
We have lots of options here because we,

39
00:02:18.064 --> 00:02:23.139
we have these composable building blocks,
instead of just one big pool of code.

40
00:02:24.800 --> 00:02:26.970
So why should you care about monorepos?

41
00:02:26.970 --> 00:02:31.619
Well I mentioned that they are a great
encapsulation tool that otherwise

42
00:02:31.619 --> 00:02:34.520
would not be able to get
in the job ecosystem.

43
00:02:35.970 --> 00:02:39.020
You have low overhead of making changes.

44
00:02:39.020 --> 00:02:43.738
So if you make a change that affects
types And a web component and

45
00:02:43.738 --> 00:02:47.654
the data layer,
you can just have a single commit and

46
00:02:47.654 --> 00:02:53.230
a single pull request that will do
everything that's needed to be done.

47
00:02:53.230 --> 00:02:55.340
And, and that's it.

48
00:02:55.340 --> 00:02:59.150
The alternative would be, you know,
treating these as fully independent

49
00:02:59.150 --> 00:03:02.657
libraries, and you'd need to Make
a small change, cut a release and

50
00:03:02.657 --> 00:03:04.850
thread all of that through many releases.

51
00:03:04.850 --> 00:03:06.240
It's a lot more work.

52
00:03:07.690 --> 00:03:11.933
You also get the ability to test
everything together before you

53
00:03:11.933 --> 00:03:12.980
cut a release.

54
00:03:14.300 --> 00:03:16.109
The other approach I just mentioned,

55
00:03:16.109 --> 00:03:19.750
where you have individual
libraries each in their own repo.

56
00:03:19.750 --> 00:03:24.040
There's a possibility that
you only find out at the end.

57
00:03:24.040 --> 00:03:26.910
When you're bringing things through
propagating things through your

58
00:03:26.910 --> 00:03:28.120
dependency tree.

59
00:03:28.120 --> 00:03:31.810
You only find out problems as
you reach those last steps.

60
00:03:33.390 --> 00:03:38.720
Today I hope to show you how you get a lot
of the benefits of using many libraries.

61
00:03:38.720 --> 00:03:42.488
With the overhead of one Git repository,
right,

62
00:03:42.488 --> 00:03:47.345
a lot lower than maintaining
a bunch of independent libraries.

63
00:03:49.132 --> 00:03:53.100
So like anything, I want to make sure
we don't treat this as a cure all.

64
00:03:54.870 --> 00:03:58.030
There are a few new tools that
we're going to have to learn.

65
00:03:58.030 --> 00:03:59.798
And there are some new risks,

66
00:03:59.798 --> 00:04:04.460
duplicate dependencies is one of
the things we're goa e talking about.

67
00:04:04.460 --> 00:04:09.459
So, it's important to understand that
this is not a pattern it's just better

68
00:04:09.459 --> 00:04:13.170
than a typical monolith project structure.

69
00:04:13.170 --> 00:04:16.230
There are cases where it
provides lots of benefits and

70
00:04:16.230 --> 00:04:19.960
today we're gonna learn how
to identify those cases.

71
00:04:19.960 --> 00:04:23.862
And those those will be the good
candidates, you know, to,

72
00:04:23.862 --> 00:04:26.550
to use a mono repo project structure for.

73
00:04:27.920 --> 00:04:32.851
So not only are we gonna get a slack app
out of this, we're gonna have some great

74
00:04:32.851 --> 00:04:37.933
API documentation and you can see here at
the bottom of the screen We have all these

75
00:04:37.933 --> 00:04:42.940
different packages, data layer types,
our UI, which is our components, and

76
00:04:42.940 --> 00:04:47.798
then utilities, each of which is going
to have a nice little like homepage for

77
00:04:47.798 --> 00:04:51.020
this little package within our app.

78
00:04:51.020 --> 00:04:55.229
And then you can see that we're able to
have great documentation for functions and

79
00:04:55.229 --> 00:04:56.320
for types.

80
00:04:56.320 --> 00:05:00.977
And so I will show you how to use
a tool that sort of brings all of this

81
00:05:00.977 --> 00:05:05.750
together into one documentation site,
not one site per package.

82
00:05:06.900 --> 00:05:08.620
In order to learn about mono repos.

83
00:05:08.620 --> 00:05:12.767
Today we're going to address
a series of topics and

84
00:05:12.767 --> 00:05:18.071
the the point of ordering things
the way I've chosen to order them

85
00:05:18.071 --> 00:05:24.230
today is I want us to start with
a very basic, mostly empty project.

86
00:05:24.230 --> 00:05:28.692
And I want us to layer up piece by piece,
all of this tooling that you

87
00:05:28.692 --> 00:05:33.030
typically would end up using
when working with a mono repo.

88
00:05:33.030 --> 00:05:37.927
By the end of this course you're
going to understand exactly what each

89
00:05:37.927 --> 00:05:40.666
thing does and you'll be able to feel,

90
00:05:40.666 --> 00:05:45.480
How it is to work with the project
before you add it and after.

91
00:05:45.480 --> 00:05:48.930
And this was a big pain point for me when
I was learning this kind of tooling.

92
00:05:48.930 --> 00:05:53.249
I you know, you're just given like six or
seven new CL eyes and

93
00:05:53.249 --> 00:05:57.987
you're not necessarily it's not
clear who does what thing right So

94
00:05:57.987 --> 00:06:00.880
we'll start with yarn workspaces.

95
00:06:00.880 --> 00:06:04.906
We will use the composite project
feature of the TypeScript

96
00:06:04.906 --> 00:06:08.700
compiler that can work with JavaScript or
TypeScript.

97
00:06:08.700 --> 00:06:11.720
So don't worry if you're
not used to TypeScript,

98
00:06:11.720 --> 00:06:16.690
this would still be a very useful thing
for you to Incorporate into your app.

99
00:06:16.690 --> 00:06:20.520
We're going to work a little
bit with some build scripts.

100
00:06:20.520 --> 00:06:25.325
We're gonna then deal with the learner
which makes it easy to almost have

101
00:06:25.325 --> 00:06:30.380
like a four loop where you'd say for
each package I want to run this command.

102
00:06:31.560 --> 00:06:36.328
Well, we will experiment with API
extractor which is a documentation tool

103
00:06:36.328 --> 00:06:37.940
from Microsoft.

104
00:06:37.940 --> 00:06:41.350
That helps us understand what our
public API surface looks like.

105
00:06:42.370 --> 00:06:47.103
And we will even set up our
own private NPM registry

106
00:06:47.103 --> 00:06:50.380
using a project called verragio.

107
00:06:51.480 --> 00:06:54.840
And that will let us experiment
with publishing packages.

108
00:06:54.840 --> 00:06:57.889
right you are going to be
publishing some packages today,

109
00:06:57.889 --> 00:07:02.480
although not to the real NPM You'll just
publish them to your own own machine.

110
00:07:02.480 --> 00:07:05.050
And that will let us play with
some versioning strategies.

111
00:07:07.150 --> 00:07:09.658
So, with that, it's time for

112
00:07:09.658 --> 00:07:15.070
us to jump into the workshop project and
get our hands on some code.

113
00:07:16.080 --> 00:07:21.280
So this bitly link is where you
can find the GitHub repository.

114
00:07:21.280 --> 00:07:24.150
There is a folder called notes.

115
00:07:24.150 --> 00:07:27.181
Make sure you look at that because
those are all the markdown notes for

116
00:07:27.181 --> 00:07:29.730
each of the steps we're
gonna be taking today.

117
00:07:29.730 --> 00:07:33.120
Be sure you look at the readme carefully.

118
00:07:33.120 --> 00:07:35.990
There are a few tools that
you may not have used before.

119
00:07:35.990 --> 00:07:38.632
And I wanna make sure that
you have everything set up so

120
00:07:38.632 --> 00:07:41.460
that you will have a good time
going through this course.

