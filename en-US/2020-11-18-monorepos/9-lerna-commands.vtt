WEBVTT

1
00:00:00.025 --> 00:00:05.605
[BBLOCK_AUDIO] So first off,
we can see that the command exists and

2
00:00:05.605 --> 00:00:08.400
we can see the help documentation.

3
00:00:10.560 --> 00:00:14.584
If we look at these, there are a couple
important things that you'll you'll need

4
00:00:14.584 --> 00:00:17.350
to worry about as you're
just getting started.

5
00:00:17.350 --> 00:00:19.163
One of them is bootstrap.

6
00:00:20.934 --> 00:00:23.540
Link you also want to know about.

7
00:00:23.540 --> 00:00:26.850
So bootstrap includes linking.

8
00:00:28.280 --> 00:00:30.070
But bootstrap does more things.

9
00:00:30.070 --> 00:00:32.440
It's like a superset of yarn link.

10
00:00:33.490 --> 00:00:37.930
learner add so
that you can think of as yarn add.

11
00:00:37.930 --> 00:00:41.190
It's very similar And

12
00:00:41.190 --> 00:00:47.250
then the others that are very important,
learn to run and learn to exec.

13
00:00:48.360 --> 00:00:53.790
So let me go through those in order in
order from lowest level to highest level.

14
00:00:53.790 --> 00:00:58.876
Learner link, so
as soon as we have interdependencies

15
00:00:58.876 --> 00:01:03.963
between our packages We're
going to wanna have some of

16
00:01:03.963 --> 00:01:10.931
our packages discoverable in the node
modules folder of another package,

17
00:01:10.931 --> 00:01:16.440
right so that,
slack slash UI needs slack slash utils.

18
00:01:16.440 --> 00:01:19.429
It needs to find it in the node modules
folder the way it would find any

19
00:01:19.429 --> 00:01:20.550
other package.

20
00:01:20.550 --> 00:01:24.210
So link creates the symlinks
that make that work.

21
00:01:24.210 --> 00:01:30.546
bootstrap does the same thing as yarn
link, but it also runs yarn install and

22
00:01:30.546 --> 00:01:36.399
it downloads anything that might
need to be downloaded.Learn a run.

23
00:01:36.399 --> 00:01:39.330
It's like a for loop.

24
00:01:39.330 --> 00:01:43.074
With a yarn script, so
if you would, if you were to say,

25
00:01:43.074 --> 00:01:47.800
learn a run build, it would go to
each package and it would build them.

26
00:01:47.800 --> 00:01:52.550
And it's smarter than just the way
I stated it now because it

27
00:01:52.550 --> 00:01:55.680
will analyse who depends on who.

28
00:01:55.680 --> 00:01:59.460
And it will first build
the lowest level packages.

29
00:01:59.460 --> 00:02:03.660
And then only after that's built, it'll
build things that depend on those little

30
00:02:03.660 --> 00:02:05.940
level packages so
builds from the bottom up,

31
00:02:05.940 --> 00:02:09.540
which is exactly what you want in order
to make sure things stay in sync.

32
00:02:10.840 --> 00:02:14.010
learner exec is kind of like learn to run.

33
00:02:14.010 --> 00:02:16.340
It operates in the same order.

34
00:02:16.340 --> 00:02:20.414
However, you can run an arbitrary
command So you could just run LS or

35
00:02:20.414 --> 00:02:22.640
you could make a directory, right?

36
00:02:22.640 --> 00:02:27.650
You're not running like yarn test, you're
just running some sort of shell command.

37
00:02:27.650 --> 00:02:31.940
So those are the four I want you to
pay attention to now, run, exec,

38
00:02:31.940 --> 00:02:33.720
link and bootstrap.

39
00:02:33.720 --> 00:02:37.610
And if you wanted to learn a 5th,
add, like yarn, add.

40
00:02:39.690 --> 00:02:41.530
Okay, it's a question about link.

41
00:02:41.530 --> 00:02:42.790
So yarn.

42
00:02:42.790 --> 00:02:44.280
We'll look at our node modules.

43
00:02:44.280 --> 00:02:47.870
Right now yarn already created at Schlag.

44
00:02:47.870 --> 00:02:49.900
And then it already has types and utils.

45
00:02:49.900 --> 00:02:50.405
Right?
Like,

46
00:02:50.405 --> 00:02:53.030
do we really need link yarn is
already creating the link for us.

47
00:02:54.030 --> 00:02:55.670
Parents, right, good question.

48
00:02:55.670 --> 00:03:00.040
So, in class, we just got a question
that says Look we have we

49
00:03:00.040 --> 00:03:04.450
have already got in our top
level node modules folder.

50
00:03:04.450 --> 00:03:07.810
We already have slack.

51
00:03:07.810 --> 00:03:10.520
And we already have types in utils here.

52
00:03:10.520 --> 00:03:12.680
So why exactly do we need link?

53
00:03:14.075 --> 00:03:15.825
Again, it comes down to versioning.

54
00:03:15.825 --> 00:03:18.656
Right?
Like, it's possible that one package in

55
00:03:18.656 --> 00:03:23.735
your mono repo might use an old version of
something that exists in your mono repo.

56
00:03:23.735 --> 00:03:25.995
It sounds weird, but it can happen.

57
00:03:25.995 --> 00:03:30.535
Let me show you what learner link does.

58
00:03:30.535 --> 00:03:34.655
That is different from what we're
seeing as the yarn workspaces

59
00:03:34.655 --> 00:03:36.649
functionality in front of us.

60
00:03:40.220 --> 00:03:43.630
I'm going to introduce
a pointless dependency, right?

61
00:03:43.630 --> 00:03:49.300
I'm going to entangle these two packages,
even though I don't strictly need to.

62
00:03:49.300 --> 00:03:50.630
So here's how I would do that.

63
00:03:50.630 --> 00:03:54.911
I would say as a dependency,
let's say that the utils need the types.

64
00:03:58.034 --> 00:04:01.116
And I'm gonna point to 001.

65
00:04:13.888 --> 00:04:19.276
Now you can see that even within
the local node modules Have you tails,

66
00:04:19.276 --> 00:04:20.930
I can now find types.

67
00:04:22.670 --> 00:04:28.960
It's a subtle difference, but this
would not have happened with just yarn.

68
00:04:28.960 --> 00:04:32.870
This is something that lerna is doing for
us.

69
00:04:32.870 --> 00:04:38.650
All right, I'm gonna kind of take
advantage of some of the benefits here.

70
00:04:38.650 --> 00:04:39.740
So let's say.

71
00:04:40.940 --> 00:04:43.060
Go to the root of my workspace.

72
00:04:43.060 --> 00:04:47.685
I could do, they're gonna run clean and
it's going to

73
00:04:47.685 --> 00:04:53.050
visit each of my packages and
it ran clean in two packages.

74
00:04:53.050 --> 00:04:58.213
They're gonna run build And
it's going to build my packages and

75
00:04:58.213 --> 00:05:02.705
it is not an accident that it
is first going into types and

76
00:05:02.705 --> 00:05:09.310
then going into utils because I introduced
that pointless dependency there.

77
00:05:09.310 --> 00:05:11.904
utils doesn't really need types but

78
00:05:11.904 --> 00:05:17.594
my package JSON says otherwise package
JSON for you tell says, in order to work,

79
00:05:17.594 --> 00:05:22.528
I must have types So we got to build
that first can't build utils before

80
00:05:22.528 --> 00:05:27.550
you have everything that it needs,
so it figures out this order.

81
00:05:27.550 --> 00:05:28.919
Now if I were to remove this

82
00:05:35.460 --> 00:05:38.701
let's see if that sibling
disappears as it should.

83
00:05:42.649 --> 00:05:44.826
Hmm, not quite.

84
00:05:44.826 --> 00:05:46.093
Maybe I need to run.

85
00:05:49.874 --> 00:05:51.500
Later to bootstrap.

86
00:05:51.500 --> 00:05:55.570
Let's see if this does it.There it goes.

87
00:05:55.570 --> 00:06:01.430
Now that symlink goes away because now we
have two equally low level dependencies.

88
00:06:01.430 --> 00:06:06.470
Let's see if lerna run build will
choose a different order now.

89
00:06:06.470 --> 00:06:08.920
It chose utils first.

90
00:06:08.920 --> 00:06:12.230
Actually, it didn't really do utils first.

91
00:06:13.460 --> 00:06:16.155
I suspect it ran them both side by side.

92
00:06:21.952 --> 00:06:24.600
Just judging by the amount
of time this is taking.

93
00:06:26.620 --> 00:06:28.376
Just let's do some quick math here.

94
00:06:28.376 --> 00:06:33.100
point eight seconds plus point eight
seconds is point eight seconds.

95
00:06:33.100 --> 00:06:35.720
Nope, these must have
been running in parallel.

96
00:06:35.720 --> 00:06:39.760
So learner understands that these
things can be built in parallel.

97
00:06:39.760 --> 00:06:43.169
And so they will be,
because no one depends on anything else.

98
00:06:44.270 --> 00:06:48.149
This is something that as your
project gets more complicated,

99
00:06:48.149 --> 00:06:50.929
it would be very difficult
to keep track of and

100
00:06:50.929 --> 00:06:55.700
it would be hard to keep any build scripts
where this was explicitly defined.

101
00:06:56.850 --> 00:06:58.350
It would be hard to keep them up to date.

102
00:06:58.350 --> 00:07:03.375
I think a lot of teams would end up just
building everything sequentially and

103
00:07:03.375 --> 00:07:05.740
You know, that takes a lot longer.

104
00:07:06.890 --> 00:07:11.961
We have a lot of CPU cores these days on,
you know, on new newer computers,

105
00:07:11.961 --> 00:07:17.450
this, you know, fans out and takes more
advantage of that horizontal scaling.

106
00:07:19.180 --> 00:07:22.682
We could also run yarn test

107
00:07:25.188 --> 00:07:28.732
And this should be more obvious
because we see some results come out.

108
00:07:28.732 --> 00:07:29.680
It's not obvious.

109
00:07:29.680 --> 00:07:33.182
Now, these were definitely
still run in parallel,

110
00:07:33.182 --> 00:07:37.878
right because the total amount of time
it took was the longest leg right

111
00:07:37.878 --> 00:07:42.640
this 2.7 happened within the 3.2
We didn't see any output.

112
00:07:42.640 --> 00:07:46.185
There's an argument you can
add here called stream,

113
00:07:46.185 --> 00:07:51.610
which is just like any console log or
any standard out, and standard error.

114
00:07:51.610 --> 00:07:55.210
That may happen while
we're running yarn test.

115
00:07:55.210 --> 00:08:00.980
I wanna see that, and now you can see
the interleaving of the outpu,t right?

116
00:08:00.980 --> 00:08:02.010
At least up at the top.

117
00:08:03.070 --> 00:08:06.515
Or we're saying just just it's running
these two packages very obviously,

118
00:08:06.515 --> 00:08:08.300
they're running in parallel.

119
00:08:08.300 --> 00:08:10.100
Whereas if I were to say concurrency one.

120
00:08:12.680 --> 00:08:16.941
Here's types doing its thing followed
by you tells you a whole lot of little

121
00:08:16.941 --> 00:08:22.290
knobs you can turn here, especially if you
have a bunch of different packages right?

122
00:08:22.290 --> 00:08:25.930
The ability to run all your tests
in parallel where possible.

123
00:08:25.930 --> 00:08:27.450
It's a big deal.

124
00:08:27.450 --> 00:08:28.190
So that's learner

