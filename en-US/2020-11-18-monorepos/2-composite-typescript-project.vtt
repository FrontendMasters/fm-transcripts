WEBVTT

1
00:00:00.300 --> 00:00:07.440
So we're going to begin step two, and
I call this step composite project.

2
00:00:07.440 --> 00:00:12.854
So TypeScript has a way
of describing a build

3
00:00:12.854 --> 00:00:20.680
process that involves multiple
sub parts of a project.

4
00:00:20.680 --> 00:00:25.531
where they can refer,
like pieces of the project can

5
00:00:25.531 --> 00:00:29.640
refer to build outputs of other pieces.

6
00:00:29.640 --> 00:00:33.978
Right so this saves us from having to
build our lowest level chunk, and then go

7
00:00:33.978 --> 00:00:38.890
and like separately build the next chunk
which includes the lowest level piece.

8
00:00:38.890 --> 00:00:43.622
You can build these things as independent
parts and they're sort of stitched

9
00:00:43.622 --> 00:00:48.160
together like a quilt without having
to sort of do a lot of redundant work.

10
00:00:49.480 --> 00:00:55.145
So if you go to two notes,
page number two, or about to begin now,

11
00:00:55.145 --> 00:00:59.280
it only makes sense to
talk about this concept.

12
00:01:00.330 --> 00:01:05.173
If we have multiple packages within our
workspace because without that there

13
00:01:05.173 --> 00:01:09.718
will be nothing for us to stitch
together.We can't really demonstrate

14
00:01:09.718 --> 00:01:14.560
that.This is a beneficial idea until
we have,you know,two things that can

15
00:01:14.560 --> 00:01:19.029
possibly refer to each other.So I'm
going up here into my course files

16
00:01:19.029 --> 00:01:24.168
folder.I'm going to go to Folder number
two in case you haven't figured it out,

17
00:01:24.168 --> 00:01:28.170
each one of these is for
a particular step of the workshop.

18
00:01:28.170 --> 00:01:31.463
We're going to grab this utils folder, and

19
00:01:31.463 --> 00:01:35.210
we're going to drag it
into our packages folder.

20
00:01:36.650 --> 00:01:43.970
So now You could use like, CP to do this
on the command line if you wanted to.

21
00:01:43.970 --> 00:01:47.448
But the important thing is
we've got the packages, and

22
00:01:47.448 --> 00:01:50.410
then within that types and utils.

23
00:01:50.410 --> 00:01:54.918
Now, what we could do is we could give it,
you know,

24
00:01:54.918 --> 00:02:01.168
ts config Just like what you see here,
the same kind of deal that we had for

25
00:02:01.168 --> 00:02:06.494
the types folder, but
we're gonna run into a problem here and

26
00:02:06.494 --> 00:02:11.721
that is that we have a bunch of
different independent sources

27
00:02:11.721 --> 00:02:16.639
of truth where If we wanna
change the strictness settings

28
00:02:16.639 --> 00:02:21.660
of our compiler or
if we want to change our language level,

29
00:02:21.660 --> 00:02:26.510
right, so
right now we're set up to support node 10.

30
00:02:26.510 --> 00:02:30.100
But let's say we don't care
about node 10 anymore.

31
00:02:30.100 --> 00:02:32.530
We only run on node 12.

32
00:02:32.530 --> 00:02:36.240
So we can go to es 20 in 2019.

33
00:02:36.240 --> 00:02:38.620
We would have to do that in each package.

34
00:02:38.620 --> 00:02:40.820
Right?
This is a lot of redundancy.

35
00:02:40.820 --> 00:02:45.331
And a central theme that you're
going to see us align with today is,

36
00:02:45.331 --> 00:02:49.850
we want to have one central
place where these settings live.

37
00:02:49.850 --> 00:02:54.808
And then very thin configuration files
on a per package basis that we can kind

38
00:02:54.808 --> 00:02:56.940
of forget about.

39
00:02:56.940 --> 00:02:58.370
So we're gonna set that up right now.

40
00:02:59.530 --> 00:03:06.104
So what we're gonna do next is we're going
to to create a source of truth, right

41
00:03:06.104 --> 00:03:12.790
a meaningful configuration file that we
can sort of extend from in each package.

42
00:03:12.790 --> 00:03:16.309
So we'll have one place where these
important settings will be defined,

43
00:03:16.309 --> 00:03:18.989
regardless of how many packages
we have in our project.

44
00:03:20.300 --> 00:03:26.960
So what I'm gonna do is create a new
Ts config, inside this packages folder.

45
00:03:26.960 --> 00:03:30.861
And I take this like
the reason I put this here is,

46
00:03:30.861 --> 00:03:34.870
it, pertains to each of my packages,
all right?

47
00:03:34.870 --> 00:03:37.360
So it's a sibling of the packages.

48
00:03:37.360 --> 00:03:40.007
That kind of makes sense
to me as a convention, and

49
00:03:40.007 --> 00:03:41.720
I'm gonna call this Ts config.

50
00:03:43.180 --> 00:03:44.060
settings.

51
00:03:45.260 --> 00:03:45.760
json.

52
00:03:47.730 --> 00:03:51.666
And I'm gonna begin by going to
the the TS config for types,

53
00:03:51.666 --> 00:03:54.737
right, which contains
all of these values and

54
00:03:54.737 --> 00:03:59.480
I'm just gonna copy this And paste it
into this new file that I created.

55
00:04:01.860 --> 00:04:07.565
Now, if you take in the TypeScript course,
you know that this, this here and in fact,

56
00:04:07.565 --> 00:04:12.958
you'll see in the, the tooltip that this
points to the location of source files so

57
00:04:12.958 --> 00:04:14.890
we don't need this.

58
00:04:14.890 --> 00:04:17.528
Each package will be responsible for
saying, Look,

59
00:04:17.528 --> 00:04:19.530
this is where my source code is located.

60
00:04:20.530 --> 00:04:23.520
Really what we wanna share
is all of this stuff here.

61
00:04:24.620 --> 00:04:27.990
Let me change this back to 2018 so
we don't have any problems.

62
00:04:27.990 --> 00:04:33.090
So this is this is normally not a complete
Ts config, but it doesn't need to be.

63
00:04:33.090 --> 00:04:37.025
It's really just one place where we
have all the knobs that we can turn So

64
00:04:37.025 --> 00:04:40.450
that we don't have to worry about
them on a per project basis.

65
00:04:42.340 --> 00:04:46.460
Next, we can go back to
our types Ts config.

66
00:04:46.460 --> 00:04:48.760
And we're actually going
to delete most of this.

67
00:04:48.760 --> 00:04:54.791
So we'll leave our out dir and
our root dir and delete the rest.

68
00:04:57.881 --> 00:04:59.535
And up here.

69
00:04:59.535 --> 00:05:06.796
We can say extends that
Ts config settings.

70
00:05:06.796 --> 00:05:07.973
JSON.

71
00:05:07.973 --> 00:05:10.718
And we need to add one more
thing here real quick.

72
00:05:10.718 --> 00:05:12.553
composite.

73
00:05:12.553 --> 00:05:13.373
True.

74
00:05:13.373 --> 00:05:19.040
We're dealing with composite projects and
we need to say this is one of them.

75
00:05:19.040 --> 00:05:24.600
This is a piece that comes together
with other pieces to form the quilt.

76
00:05:25.800 --> 00:05:30.282
So, by extending from this file here and
we can Command click on it and

77
00:05:30.282 --> 00:05:34.532
VS code to make sure everything's
wired up the way it should be and

78
00:05:34.532 --> 00:05:38.860
it is We're saying just borrow
everything you find in that file and

79
00:05:38.860 --> 00:05:43.150
then here's a little thin
layer to put on top of it.

80
00:05:43.150 --> 00:05:47.640
Now let's compare this with the tsconfig
that's already in the utils folder.

81
00:05:49.000 --> 00:05:51.870
All right, so
this looks like it needs some updating.

82
00:05:51.870 --> 00:05:56.600
The good news is,
I'm gonna copy and paste.

83
00:05:56.600 --> 00:06:02.843
There's nothing in this file that is
specific To utils or two types, so

84
00:06:02.843 --> 00:06:08.044
we can have the same, you know,
like, paste everywhere,

85
00:06:08.044 --> 00:06:12.725
really thin Ts config in
all these different places,

86
00:06:12.725 --> 00:06:18.029
one last thing that we need here so
let me show you where we're

87
00:06:18.029 --> 00:06:24.327
at just to prove that the build
still works Should And it does.

88
00:06:26.631 --> 00:06:31.780
Now, one new thing popped up and
that's this Ts config dot build info.

89
00:06:31.780 --> 00:06:37.502
If we click on that we can see
that it is just a JSON file that

90
00:06:37.502 --> 00:06:43.944
contains a bunch of things that
have a version In a signature, so

91
00:06:43.944 --> 00:06:49.671
you can think of this as a place
where we track the checksum

92
00:06:49.671 --> 00:06:55.910
like the MT five checksum of the file,
as it stands right now.

93
00:06:56.970 --> 00:07:02.180
And, when it was last built, so you can
see that these are equal to each other.

94
00:07:02.180 --> 00:07:04.600
And that means everything is up to date.

95
00:07:04.600 --> 00:07:09.033
This is what lets us do things like,
when we try to build a project,

96
00:07:09.033 --> 00:07:12.370
we just want to update
whatever needs to be built.

97
00:07:12.370 --> 00:07:14.260
We don't need to build this whole thing.

98
00:07:14.260 --> 00:07:17.150
So this is where we track
all that information.

99
00:07:17.150 --> 00:07:21.090
And then, you can see that
there's some other stuff in here.

100
00:07:21.090 --> 00:07:25.470
This includes things that
are built into typescript itself.

101
00:07:25.470 --> 00:07:31.580
So here like es2017 language features,
es2015 language features.

102
00:07:31.580 --> 00:07:33.474
And then down here you can see that,

103
00:07:33.474 --> 00:07:36.773
all right now we're referring
to things in my source folder.

104
00:07:39.487 --> 00:07:41.810
That's your whole project there.

105
00:07:41.810 --> 00:07:45.543
We're not gonna look inside
these files anymore, but

106
00:07:45.543 --> 00:07:50.496
I just want you to understand that they
hold information that is used when

107
00:07:50.496 --> 00:07:55.950
determining whether the current build is
in sync with the current source code.

108
00:07:58.600 --> 00:08:03.060
And that I believe means that
subsequent builds are really fast.

109
00:08:03.060 --> 00:08:05.250
So look at this 1.91 seconds.

110
00:08:05.250 --> 00:08:12.470
That was for us to do our first build,
since we turned composite true on, right.

111
00:08:12.470 --> 00:08:15.072
And now look, we've got 0.39 seconds for

112
00:08:15.072 --> 00:08:19.690
another build That's much faster some
work with skipped some significant work.

