WEBVTT

1
00:00:00.050 --> 00:00:01.964
Where we last left off.

2
00:00:01.964 --> 00:00:06.980
We had tests working, linting working.

3
00:00:06.980 --> 00:00:12.825
We just now got script D in place,
which allowed us to take all of the things

4
00:00:12.825 --> 00:00:17.917
that would have been in our script
object within each packages,

5
00:00:17.917 --> 00:00:23.575
package, JSON We've moved that all
out to the root of the workspace and

6
00:00:23.575 --> 00:00:30.080
we have a really nice and manageable set
of things that apply to our packages.

7
00:00:30.080 --> 00:00:33.892
Instead of things that apply to our
workspace each very clearly in its own

8
00:00:33.892 --> 00:00:34.900
labelled folder.

9
00:00:34.900 --> 00:00:38.453
That way, we can have a builds that's for
the whole project and

10
00:00:38.453 --> 00:00:40.950
then each package has its own built.

11
00:00:40.950 --> 00:00:43.290
So we don't need to change
the names of these things.

12
00:00:44.740 --> 00:00:46.820
We can just be what
people expect them to be.

13
00:00:48.250 --> 00:00:51.330
scripty is a really,
really cool little tool there.

14
00:00:51.330 --> 00:00:56.122
Next we are going to
We're gonna apply some

15
00:00:56.122 --> 00:01:01.200
more opinionated stuff to this repo.

16
00:01:01.200 --> 00:01:07.772
And the point here is not that any
specific opinion is the right one,

17
00:01:07.772 --> 00:01:12.610
but having an opinion, gives us benefits.

18
00:01:12.610 --> 00:01:17.080
And I'm talking strictly
now about commit messages.

19
00:01:17.080 --> 00:01:21.050
So we right now can make commit
messages however we like.

20
00:01:23.020 --> 00:01:27.144
In fact, if I look at the commit messages
here we've got like, first break and

21
00:01:27.144 --> 00:01:29.100
linting and learner, right?

22
00:01:29.100 --> 00:01:30.310
Just one word each.

23
00:01:31.610 --> 00:01:34.600
We're going to establish a convention.

24
00:01:34.600 --> 00:01:37.850
Actually we're going to adopt
a distinct an existing convention.

25
00:01:37.850 --> 00:01:41.510
And we're going to
enforce that convention.

26
00:01:41.510 --> 00:01:46.372
And because of that, we're going to get
automatically generated change logs,

27
00:01:46.372 --> 00:01:49.170
and automatically bumping version numbers.

28
00:01:49.170 --> 00:01:52.130
So when we add a feature,
we'll see a minor release.

29
00:01:52.130 --> 00:01:55.420
When we fix a bug,
we'll see a patch release, and so on.

30
00:01:55.420 --> 00:01:58.590
So we get a lot of good automation.

31
00:01:58.590 --> 00:02:01.293
Just by aligning with this opinion and

32
00:02:01.293 --> 00:02:06.618
the opinion we're going to align with
is called conventional change lug.

33
00:02:09.873 --> 00:02:15.090
Now the idea here, so
this is the home of the project.

34
00:02:15.090 --> 00:02:18.380
The idea here is that you have a cli.

35
00:02:19.380 --> 00:02:25.690
You have some tools like commit lint,
which we're going to use today.

36
00:02:25.690 --> 00:02:30.325
Commit isn't, is it's kind of like a
prompt like a multi step wizard that helps

37
00:02:30.325 --> 00:02:32.840
you assemble your commit message.

38
00:02:32.840 --> 00:02:35.412
Right It asks you questions,
you provide your answers,

39
00:02:35.412 --> 00:02:37.190
and it gives you a nice commit message.

40
00:02:38.350 --> 00:02:45.610
So it's a family of tools that sort
of align around a single convention.

41
00:02:45.610 --> 00:02:50.815
And that is that commit
messages should have a semver

42
00:02:50.815 --> 00:02:55.682
specifier like feature,
fix Breaking change.

43
00:02:55.682 --> 00:02:59.090
a chore,chore might just be build scripts,
right?

44
00:02:59.090 --> 00:03:03.059
We're not releasing new packages,
we're just fixing the scripts and

45
00:03:03.059 --> 00:03:05.760
then a description of what's going on.

46
00:03:05.760 --> 00:03:12.302
So with that, let's install the packages
that will help us do this and,

47
00:03:12.302 --> 00:03:16.870
We're going to be using
this little config file.

48
00:03:16.870 --> 00:03:18.770
Actually, we can get this out of the way.

49
00:03:18.770 --> 00:03:21.450
Let's just drop this in
the root of our project.

50
00:03:21.450 --> 00:03:23.190
So I'm going to grab this.

51
00:03:23.190 --> 00:03:25.150
Copy and Paste.

52
00:03:25.150 --> 00:03:28.820
So I've got this commit lint, config j.

53
00:03:28.820 --> 00:03:29.459
s here.

54
00:03:32.088 --> 00:03:36.444
And we got to install a few packages and
these will all be at the workspace root.

55
00:03:38.909 --> 00:03:45.324
So we're gonna say yarn,
add workspace, Dev DEP.

56
00:03:48.164 --> 00:03:49.520
Commit Lyndsey Li.

57
00:03:50.533 --> 00:03:55.696
Commitment config,

58
00:03:55.696 --> 00:04:02.008
conventional commitment

59
00:04:02.008 --> 00:04:07.470
config lerna scopes.

60
00:04:07.470 --> 00:04:11.960
So this will force us to say For
a given commit,

61
00:04:11.960 --> 00:04:15.310
which packages will this affect?

62
00:04:18.410 --> 00:04:22.678
install, commit,
lend itself the root package and

63
00:04:22.678 --> 00:04:26.560
then two more Husky and
then learn a change log.

64
00:04:28.930 --> 00:04:33.730
And I will show you my package JSON here
because it'll be much easier to read.

65
00:04:33.730 --> 00:04:35.643
In terms of what I just installed.

66
00:04:39.348 --> 00:04:41.020
I take a look at that.

67
00:04:41.020 --> 00:04:42.620
So here you go.

68
00:04:42.620 --> 00:04:47.980
Anything with this little this to
the left, that is what I just installed.

69
00:04:47.980 --> 00:04:52.134
And as long as you get the same major
version as what you see on my screen,

70
00:04:52.134 --> 00:04:53.599
you should be good to go.

71
00:04:58.018 --> 00:05:02.090
We're gonna add a little piece of
configuration to our package JSON as well.

72
00:05:02.090 --> 00:05:04.840
So this Husky package that we installed.

73
00:05:04.840 --> 00:05:11.290
It is a nice little library that
helps us wire up Git hooks.

74
00:05:12.390 --> 00:05:17.390
And this will make sure that as we're
making our commit We validate and

75
00:05:17.390 --> 00:05:22.580
we only allow that process to
get commit process to complete.

76
00:05:22.580 --> 00:05:27.724
If the commit message aligns with
the convention we're trying to maintain

77
00:05:27.724 --> 00:05:32.784
a convention isn't worth much,
if there's no enforcement mechanism,

78
00:05:32.784 --> 00:05:37.290
because of we're to trust that
release numbers and change logs.

79
00:05:37.290 --> 00:05:42.058
They're based off of The new
commits since the last release

80
00:05:42.058 --> 00:05:45.120
that had better be good information.

81
00:05:45.120 --> 00:05:49.510
We can't let people slip things in there,
slip into breaking change.

82
00:05:49.510 --> 00:05:54.980
And we won't detect it if it
doesn't align with the convention.

83
00:05:54.980 --> 00:06:00.020
Now you have a lot of control,i will leave
it as an exercise to to you, the viewer.

84
00:06:01.320 --> 00:06:08.040
You have a lot of control over what
convention commit lint detects.

85
00:06:08.040 --> 00:06:11.473
I'm aligning with the most common one
because it lets us use a bunch of other

86
00:06:11.473 --> 00:06:13.870
tools and take advantage of that goodness.

87
00:06:13.870 --> 00:06:14.658
But you can,

88
00:06:14.658 --> 00:06:19.620
customize things you can customize
the way your change log is represented.

89
00:06:19.620 --> 00:06:21.890
Just know that if you start to get.

90
00:06:21.890 --> 00:06:24.210
You start to deviate from the norm.

91
00:06:24.210 --> 00:06:28.766
it's more likely that some of these tools
that we're looking at they may not work as

92
00:06:28.766 --> 00:06:31.060
easily as you're about to see them work.

93
00:06:32.090 --> 00:06:39.910
So husky because it installs get
hooks like it has to set itself up.

94
00:06:39.910 --> 00:06:43.810
And frankly, I don't actually remember,
How it sets itself up.

95
00:06:43.810 --> 00:06:48.060
But what I do remember is exactly
how I can discover this information.

96
00:06:48.060 --> 00:06:49.740
I'm going to look into the package JSON.

97
00:06:50.830 --> 00:06:52.310
Hey, look at this.

98
00:06:52.310 --> 00:06:56.520
So we've got an install hook.

99
00:06:56.520 --> 00:06:58.200
We have a post install hook.

100
00:06:59.950 --> 00:07:00.460
Right?

101
00:07:00.460 --> 00:07:03.180
We have so pre publish.

102
00:07:03.180 --> 00:07:07.024
Post publish this has to do with
publishing a new version of Husky itself,

103
00:07:07.024 --> 00:07:08.520
but this post install hook.

104
00:07:09.570 --> 00:07:14.431
It's gonna run whenever I run yarn install

105
00:07:16.894 --> 00:07:20.419
As is this so that tells me what I need

106
00:07:20.419 --> 00:07:25.470
to invoke in order to get
Husky doing its thing.

107
00:07:25.470 --> 00:07:26.308
For example.

108
00:07:28.983 --> 00:07:31.460
I just want to create a commit
with the message foo.

109
00:07:33.358 --> 00:07:35.980
Actually seems to have
done something here.

110
00:07:37.410 --> 00:07:41.160
In this, honestly this might be because
I already had Husky installed here.

111
00:07:41.160 --> 00:07:42.810
So you might not see this.

112
00:07:42.810 --> 00:07:47.259
Now what you definitely don't see is
evidence that I am being asked to

113
00:07:47.259 --> 00:07:49.867
conform to a particular standard like,

114
00:07:49.867 --> 00:07:54.331
I just made my commit and
it's obviously just a junk Commit message.

115
00:07:56.808 --> 00:07:58.449
So undo that one.

116
00:08:01.740 --> 00:08:07.840
Being careful with these commands because
Git reset is potentially destructive.

117
00:08:07.840 --> 00:08:10.320
So this is just saying it's a soft reset.

118
00:08:10.320 --> 00:08:14.230
Just take what I just, Take the commit I
just made and like, let's get them back.

119
00:08:14.230 --> 00:08:15.400
It's just staged changes.

120
00:08:15.400 --> 00:08:17.400
Let's undo the commit but
don't throw anything away.

121
00:08:18.420 --> 00:08:21.990
So, let's, let's run yarn install.

122
00:08:23.040 --> 00:08:25.971
Just to like trigger that hook, being run,

123
00:08:25.971 --> 00:08:30.160
let it do any of its setup
stuff that it's going to do.

124
00:08:30.160 --> 00:08:33.820
I don't know if I'm going
to see any evidence here.

125
00:08:33.820 --> 00:08:34.951
That it did its thing.

