WEBVTT

1
00:00:00.480 --> 00:00:05.110
So we got a question from the class,
which TSC are we using?

2
00:00:05.110 --> 00:00:10.380
And it's a fair question, and here's why,
I have a global TSC Let me prove it.

3
00:00:10.380 --> 00:00:16.910
If I go open a new terminal here real
quick and I go to my home folder, right?

4
00:00:16.910 --> 00:00:23.050
I have TSC somewhere, outside
the context of any specific project.

5
00:00:24.130 --> 00:00:25.834
I have Within each package,

6
00:00:25.834 --> 00:00:29.520
you see you have a little node
modules here with dot bin.

7
00:00:29.520 --> 00:00:34.170
There's a tsc in here,
right in each package.

8
00:00:34.170 --> 00:00:36.290
But this one doesn't have one interesting.

9
00:00:36.290 --> 00:00:37.856
It's because it's not.

10
00:00:39.942 --> 00:00:44.690
It is not stating a dependency
on TypeScript compiler here.

11
00:00:44.690 --> 00:00:46.760
Doesn't seem to be hurting us for
the time being.

12
00:00:48.040 --> 00:00:53.593
And then of course in my top
level node modules folder,

13
00:00:53.593 --> 00:01:00.970
if I close all this stuff we have in
our dot bin folder, there's the TSC.

14
00:01:02.260 --> 00:01:03.410
So here's what's going on.

15
00:01:03.410 --> 00:01:06.700
There are a couple things that
are working together in concert.

16
00:01:06.700 --> 00:01:10.885
To make this work really nicely, and
let me actually bring this back.

17
00:01:17.473 --> 00:01:20.537
Let me create some nuance here so
we can see what's going on.

18
00:01:28.565 --> 00:01:33.217
So part of the Installation
instructions here had you set up

19
00:01:33.217 --> 00:01:35.970
something called volta.

20
00:01:35.970 --> 00:01:40.459
volta manages global and
package specific dependencies and

21
00:01:40.459 --> 00:01:46.100
its job is to make sure you get
the right thing, depending on context.

22
00:01:46.100 --> 00:01:51.266
So I just installed a TypeScript 397
Now I did this deliberately because

23
00:01:51.266 --> 00:01:57.500
I want us to see a difference when we're
working inside the project versus outside.

24
00:01:57.500 --> 00:02:00.160
So here's one thing volta is doing for us.

25
00:02:00.160 --> 00:02:04.820
We can do TSC dash dash version in
my user home folder, I get 397.

26
00:02:04.820 --> 00:02:08.574
And if I go back into the project and
run the exact same command

27
00:02:12.909 --> 00:02:16.398
Let me make sure that this is
working the way I thought it would

28
00:02:25.872 --> 00:02:32.230
There we've got 403397

29
00:02:36.963 --> 00:02:42.975
and back in the project 403 so
you can see here when I call TSC.

30
00:02:44.500 --> 00:02:46.500
Volta is doing some work for us here.

31
00:02:46.500 --> 00:02:52.260
It knows it finds that, based on our
working directory, we have a package JSON.

32
00:02:52.260 --> 00:02:56.610
And that specifies a version
of a TypeScript package.

33
00:02:56.610 --> 00:03:02.550
So even if we invoke this globally,
right, we did not do this.

34
00:03:02.550 --> 00:03:04.130
I'm sure you're used to doing this.

35
00:03:04.130 --> 00:03:08.260
This basically says Go
into node modules dot bin.

36
00:03:08.260 --> 00:03:09.510
Find something there, right?

37
00:03:09.510 --> 00:03:10.920
We didn't do this.

38
00:03:10.920 --> 00:03:11.920
This still works.

39
00:03:13.230 --> 00:03:14.660
This still works.

40
00:03:14.660 --> 00:03:18.065
And although it's not strictly
necessary for things like PSC,

41
00:03:18.065 --> 00:03:20.595
it's totally necessary for
things like that.

42
00:03:20.595 --> 00:03:21.875
A yarn.

43
00:03:21.875 --> 00:03:26.945
Yarn without volta yarn is nowhere in our
package JSON, are we using 118 or 122?

44
00:03:26.945 --> 00:03:31.425
We still need to be able to
sort of pin that version so

45
00:03:31.425 --> 00:03:34.565
we get a truly reproducible build.

46
00:03:34.565 --> 00:03:35.485
All right?

47
00:03:35.485 --> 00:03:40.775
If a version of yarn is creating
buggy lock files, we may, need to.

48
00:03:42.820 --> 00:03:47.790
Use an older version that doesn't
have that bug we need to pin yarn.

49
00:03:47.790 --> 00:03:49.400
So that's one thing that's happening here.

50
00:03:50.740 --> 00:03:55.526
And the other thing I wanna
shed some light on is

51
00:03:55.526 --> 00:03:59.460
these inner node modules, folders.

52
00:04:00.680 --> 00:04:06.801
So note that all of these things that
are in the .binfolder like inside types,

53
00:04:06.801 --> 00:04:11.719
node modules, utils node modules,
they're just symlinks,

54
00:04:11.719 --> 00:04:15.894
symbolic links that take
you to the workspace level,

55
00:04:15.894 --> 00:04:19.540
package or
the workspace level node modules.

56
00:04:19.540 --> 00:04:22.590
And you can see,
Those sim links right here.

57
00:04:22.590 --> 00:04:27.590
So really there is only one jest,
there is only one TSC.

58
00:04:27.590 --> 00:04:34.280
The reason that they're placed
in this local node modules,

59
00:04:34.280 --> 00:04:42.029
here is because not every tool in
the ecosystem can handle the idea of.

60
00:04:43.680 --> 00:04:47.970
Being invoked from a non
conventional location, right?

61
00:04:47.970 --> 00:04:52.063
Some things just expect a local
node modules to be there,

62
00:04:52.063 --> 00:04:56.000
relative to what package JSON and
it should just work.

63
00:04:56.000 --> 00:04:57.160
So you get symlinks,

64
00:04:57.160 --> 00:05:01.700
to ensure that the tools that are more
picky about this kind of thing.

65
00:05:01.700 --> 00:05:09.150
They, they are happy because they can be
found in a relatively common location.

66
00:05:10.690 --> 00:05:18.930
So you can think of this types folder, too
many, like CLS and things that would run.

67
00:05:18.930 --> 00:05:21.980
It doesn't even feel like
it's special thing, right?

68
00:05:21.980 --> 00:05:23.810
It just feels like.

69
00:05:23.810 --> 00:05:27.558
There's this node modules dot bin PSC or
es lint is in there,

70
00:05:27.558 --> 00:05:31.340
you know we'll put linting
in there in there later on.

71
00:05:31.340 --> 00:05:37.086
So that's why this is treated specially
now, for non executable node modules,

72
00:05:37.086 --> 00:05:41.226
because those all use the require
dot resolve algorithm,

73
00:05:41.226 --> 00:05:44.110
which will basically start from.

74
00:05:44.110 --> 00:05:47.470
Where the require happens
right in that JavaScript file?

75
00:05:47.470 --> 00:05:52.140
And it'll keep going to parent and parent
and parent and looking for node modules.

76
00:05:52.140 --> 00:05:53.220
Do you have something for me?

77
00:05:53.220 --> 00:05:54.200
Is there a node modules?

78
00:05:54.200 --> 00:05:58.601
Do you have something for me and keep
bubbling up, all of that's going to end up

79
00:05:58.601 --> 00:06:02.220
working out with it without
any special treatment needed.

80
00:06:02.220 --> 00:06:07.470
So that's why you only see these
executable things in the dot bin folder.

