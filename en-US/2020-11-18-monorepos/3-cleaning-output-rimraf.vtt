WEBVTT

1
00:00:00.940 --> 00:00:06.010
I wanna add another package, sorry,
another Ts config to my packages folder.

2
00:00:09.310 --> 00:00:11.610
And this one serves a different purpose.

3
00:00:11.610 --> 00:00:16.896
The purpose of this Ts config that
I'm about to create is that I wanna

4
00:00:16.896 --> 00:00:22.182
be able to say, build whatever is
necessary For all of my packages,

5
00:00:22.182 --> 00:00:26.580
if anything's out of date,
go ahead and just catch up.

6
00:00:27.750 --> 00:00:29.800
So this one's gonna be very simple.

7
00:00:29.800 --> 00:00:35.611
We just need to say references and
this is gonna be an array of paths.

8
00:00:42.672 --> 00:00:46.130
So this lets us do something
like the following.

9
00:00:46.130 --> 00:00:51.640
I'm actually gonna stage my files here
because I'm about to make a mess.

10
00:00:51.640 --> 00:00:53.767
If you're gonna repeat
what I'm doing here,

11
00:00:53.767 --> 00:00:57.159
I advise you also stage your files
because we're gonna create some junk.

12
00:00:58.480 --> 00:01:02.460
So I could do tsc -build.

13
00:01:02.460 --> 00:01:04.565
And remember I'm in
the packages folder now.

14
00:01:10.201 --> 00:01:12.400
All right,
we're missing some dependencies here.

15
00:01:12.400 --> 00:01:19.550
I got it, I gotta straighten this out,
yarn add date-functions.

16
00:01:20.680 --> 00:01:26.130
And react, says we need react up here.

17
00:01:27.760 --> 00:01:30.035
And I'm gonna need the type
information for both of these.

18
00:01:33.083 --> 00:01:36.551
We're already seeing that we're attempting
to build we wouldn't be getting

19
00:01:36.551 --> 00:01:37.640
these errors.

20
00:01:37.640 --> 00:01:43.830
If we didn't If we were not that command
was not being interpreted properly.

21
00:01:45.250 --> 00:01:46.190
So we'll try this again.

22
00:01:46.190 --> 00:01:47.440
I'm back in the packages folder.

23
00:01:47.440 --> 00:01:50.140
And it should work this time.

24
00:01:53.070 --> 00:01:53.570
Nope.

25
00:01:54.916 --> 00:01:56.970
I need just, of course I need just.

26
00:01:59.120 --> 00:02:05.330
So what I'm using for my tests,
yarn add types just and

27
00:02:05.330 --> 00:02:13.230
jest and then we're going to do
the same thing in our types folder.

28
00:02:13.230 --> 00:02:18.467
So already what you're seeing here is
like I'm having to run like install

29
00:02:18.467 --> 00:02:23.702
just in this one package and then go to
this other package and install it and

30
00:02:23.702 --> 00:02:29.022
this other package, this is a problem
that a later tool we incorporate into

31
00:02:29.022 --> 00:02:34.257
this project will solve, so just to
recap what I did in my utils package And

32
00:02:34.257 --> 00:02:38.380
let you know I would have
gotten this if I just run yarn.

33
00:02:38.380 --> 00:02:40.580
In fact, let me run it right now.

34
00:02:40.580 --> 00:02:43.950
Just make sure that I
catch up with everything.

35
00:02:43.950 --> 00:02:45.990
So everything is in my package JSON here.

36
00:02:45.990 --> 00:02:50.110
I just forgot to run yarn as I dragged
those those folders into packages.

37
00:02:50.110 --> 00:02:52.880
That's why I was missing things for
my node modules.

38
00:02:52.880 --> 00:02:58.023
But If we were to instal new dependencies,
right, let's say we found a new es

39
00:02:58.023 --> 00:03:03.565
lint plugin, and we wanted to instal it
broadly throughout our entire workspace,

40
00:03:03.565 --> 00:03:07.049
we would have to go to each
independent package, and

41
00:03:07.049 --> 00:03:12.433
we would have to run this command and it's
kind of We're manually doing like a for

42
00:03:12.433 --> 00:03:16.680
loop here for each package,
I want to install this thing.

43
00:03:16.680 --> 00:03:17.810
It's a little bit painful.

44
00:03:17.810 --> 00:03:22.483
I just want to point that out because
we're gonna provide some medicine for

45
00:03:22.483 --> 00:03:24.270
that pain in a little while.

46
00:03:26.520 --> 00:03:28.270
Let's see if I'm ready now.

47
00:03:28.270 --> 00:03:33.196
So I'm back in the packages folder
that contains all of my packages, and

48
00:03:33.196 --> 00:03:38.930
I want to run TSC dash B Dot write that's
build everything according to the package,

49
00:03:38.930 --> 00:03:41.550
sorry, the TS config in this folder.

50
00:03:43.250 --> 00:03:48.832
I'm just going to remove the use of
this this concept of a private field,

51
00:03:48.832 --> 00:03:52.690
which is a new thing to,
to JavaScript this year.

52
00:03:54.220 --> 00:03:55.760
There we go.

53
00:03:55.760 --> 00:03:59.280
Now here's the mess that I've created for
myself as promised,

54
00:03:59.280 --> 00:04:03.430
you see that we've got these j s files
right next to all of our Ts files.

55
00:04:03.430 --> 00:04:06.496
Well, that's because this this Ts config,

56
00:04:06.496 --> 00:04:11.870
this this one that we were creating so
we could build everything.

57
00:04:11.870 --> 00:04:13.475
This points to these project but

58
00:04:13.475 --> 00:04:17.290
it doesn't have any opinion about what
the output directory is going to be.

59
00:04:18.710 --> 00:04:25.040
So it's not really looking at the TS
configs of each respective package.

60
00:04:25.040 --> 00:04:29.540
It's just sort of referring to their
build output and linking it all together.

61
00:04:29.540 --> 00:04:33.150
So we can get around this problem.

62
00:04:34.190 --> 00:04:38.395
We can either like pop off all the new
code changes that have been made, right,

63
00:04:38.395 --> 00:04:40.970
so we've got a bunch of j, s stuff.

64
00:04:40.970 --> 00:04:45.010
staged in Git right now we
could manually roll those back.

65
00:04:45.010 --> 00:04:50.550
Or we could run the same command here with
dash clean and they should disappear.

66
00:04:50.550 --> 00:04:51.580
Go away.

67
00:04:51.580 --> 00:04:52.880
There it goes.

68
00:04:52.880 --> 00:05:00.640
So, we can modify our Ts config
here with files and empty array.

69
00:05:01.830 --> 00:05:09.210
And if we try this again, [BLANK AUDIO]
we shouldn't get all that JavaScript.

70
00:05:09.210 --> 00:05:10.132
And in fact we don't.

71
00:05:10.132 --> 00:05:17.440
[BLANK AUDIO].

72
00:05:17.440 --> 00:05:20.573
So and So just to be clear,
if I were to delete these,

73
00:05:20.573 --> 00:05:23.620
let's delete some of our build output.

74
00:05:23.620 --> 00:05:25.390
Let's see if this build really works.

75
00:05:25.390 --> 00:05:28.038
Let's I wanna see something in front
of me that proves that this works.

76
00:05:28.038 --> 00:05:32.161
rm rf star.star.ts

77
00:05:32.161 --> 00:05:37.201
build info and star dist.

78
00:05:40.251 --> 00:05:45.170
So now we should be We
just collapse things down.

79
00:05:45.170 --> 00:05:46.790
There's no dist folder here.

80
00:05:48.270 --> 00:05:52.469
And there's no Ts build info, and I should
see those things pop up by building

81
00:05:52.469 --> 00:05:55.330
everything in the packages folder.

82
00:05:55.330 --> 00:05:57.280
And in fact, I do, there it is.

83
00:05:57.280 --> 00:06:02.480
So now I have a single command I
can run that builds everything.

84
00:06:02.480 --> 00:06:03.480
Pretty nice.

85
00:06:03.480 --> 00:06:09.970
So again, just these references they point
to and we can command click into these.

86
00:06:09.970 --> 00:06:16.760
They point to other parts of the project,
which must have composite true turned on.

87
00:06:16.760 --> 00:06:21.573
And that's what lets, you know if we had
interdependencies between these things,

88
00:06:21.573 --> 00:06:25.220
they would just each refer
to each other's dist folder.

89
00:06:25.220 --> 00:06:30.710
They don't need to kind of like, include
like a package A depends on package B.

90
00:06:32.900 --> 00:06:38.470
Package B doesn't need to have stuff
from package A in its dist folder.

91
00:06:38.470 --> 00:06:41.580
All we have in here is things
that pertain to types.

92
00:06:41.580 --> 00:06:44.360
All we have in here is things
that pertain to utils.

93
00:06:44.360 --> 00:06:48.650
Right, they're sort of stitched
together at the tooling level,

94
00:06:48.650 --> 00:06:52.942
no duplication, which means you
can't fall out of sync.Because

95
00:06:52.942 --> 00:06:57.460
there's one build output in
one location for each package.

96
00:06:57.460 --> 00:06:59.766
So what I just did this rm rf thing,

97
00:06:59.766 --> 00:07:03.850
that's something that
you're gonna need to do.

98
00:07:03.850 --> 00:07:04.900
Every so often right?

99
00:07:04.900 --> 00:07:09.459
They're part of how this works
part of the state current

100
00:07:09.459 --> 00:07:14.115
state of monorepo tooling
involves caching layers, and

101
00:07:14.115 --> 00:07:19.790
it involves potentially things
falling a little bit out of sync.

102
00:07:19.790 --> 00:07:24.608
So you wanna give yourself a nice button
you can hit Or command you can run

103
00:07:24.608 --> 00:07:29.970
where it'll sort of clear everything
away and you can start fresh.

104
00:07:29.970 --> 00:07:34.958
That's the first thing I advise you do if
things start to look weird, right like

105
00:07:34.958 --> 00:07:40.530
I'm missing a dependency or something's
complaining about not having a module.

106
00:07:40.530 --> 00:07:44.240
Blow your build away and
start clean and see if that works.

107
00:07:44.240 --> 00:07:47.400
So let's give ourselves
the ability to do that.

108
00:07:47.400 --> 00:07:52.035
Now, we don't need this to be a function
that's tied to a particular package or

109
00:07:52.035 --> 00:07:55.640
a functionality that's tied
to a particular package.

110
00:07:55.640 --> 00:07:58.140
It really has to do with the workspace.

111
00:07:58.140 --> 00:08:01.630
So we can install this as
a workspace dependency.

112
00:08:01.630 --> 00:08:05.902
So we're back at the root
of our mono repo and

113
00:08:05.902 --> 00:08:09.260
we can do this yarn, add rim raph.

114
00:08:10.970 --> 00:08:14.100
Now if I do this I think yarn
is going to complain to me.

115
00:08:14.100 --> 00:08:18.775
It's going to say running this
command will add this dependency

116
00:08:18.775 --> 00:08:23.870
to the workspace root,
rather than to the workspace itself.

117
00:08:23.870 --> 00:08:27.180
Which means like, rather than to
a package within the workspace.

118
00:08:28.840 --> 00:08:30.430
It might not be what you want.

119
00:08:31.830 --> 00:08:37.220
But I can use the dash w flag if this
is what I want, and in this case it is.

120
00:08:38.280 --> 00:08:42.320
So you can see that once you're
in this yarn workspaces mode.

121
00:08:42.320 --> 00:08:48.070
You kind of want to be operating
with yarn add within a package,

122
00:08:48.070 --> 00:08:50.690
not at the outer level.

123
00:08:50.690 --> 00:08:54.232
The exception being like
what we're doing right now,

124
00:08:54.232 --> 00:08:56.469
which is just utilities that are.

125
00:08:57.530 --> 00:08:59.171
Just for development purposes only,

126
00:08:59.171 --> 00:09:02.410
they have nothing to do with the package
actually, you know functioning.

127
00:09:05.510 --> 00:09:10.406
So now if I look at my outer package JSON,
I have rimraf here,

128
00:09:10.406 --> 00:09:14.246
rimraf is a platform
independent RM dash RF, so

129
00:09:14.246 --> 00:09:18.950
to people that may be following
along on Windows This would

130
00:09:18.950 --> 00:09:23.090
also work in your PowerShell or
your command line.

131
00:09:24.460 --> 00:09:28.253
So we're not tied to Unix here.

132
00:09:30.752 --> 00:09:39.269
So now, in each file, I close all this
down I can go to each of my packages.

133
00:09:41.220 --> 00:09:44.517
To their package JSON and

134
00:09:44.517 --> 00:09:49.384
in this little script section here,

135
00:09:49.384 --> 00:09:57.710
I can add a clean "rimraf dist
tsbuildinfo, I should do star.

136
00:09:59.900 --> 00:10:04.090
I'm going to copy that line and
paste it into this other package as well.

137
00:10:05.900 --> 00:10:08.080
This one doesn't even have a belt.

138
00:10:08.080 --> 00:10:09.140
I should add that too.

139
00:10:18.580 --> 00:10:21.120
So both of these, I'll just put
them side by side real quick.

140
00:10:24.000 --> 00:10:26.170
They have identical code here.

141
00:10:27.590 --> 00:10:28.680
Same thing.

142
00:10:28.680 --> 00:10:33.845
So now if I were to say
go into my packages,

143
00:10:36.320 --> 00:10:40.828
Yarn clean, so I'm in types right so
we should see dist and

144
00:10:40.828 --> 00:10:46.300
Ts build info disappear And we done.

145
00:10:47.760 --> 00:10:49.000
Then we can do yarn build.

146
00:10:53.020 --> 00:10:53.610
And they come back.

147
00:10:54.720 --> 00:10:56.930
So now we have a clean and a built.

148
00:10:58.180 --> 00:10:59.020
good starting point.

149
00:11:00.640 --> 00:11:04.225
Now already we're saying
this is another place where

150
00:11:04.225 --> 00:11:08.270
each package defines its own clean and
its own belt.

151
00:11:08.270 --> 00:11:13.320
We will solve that because the mantra
here is, I want one source of truth.

152
00:11:13.320 --> 00:11:17.383
I do not want to break my
promise to you about this being

153
00:11:17.383 --> 00:11:21.550
an easier thing to manage
than having 10 libraries.

154
00:11:21.550 --> 00:11:25.364
10 packages in a mono repo
should feel like a library and

155
00:11:25.364 --> 00:11:28.090
a half worth of maintenance overhead.

156
00:11:28.090 --> 00:11:30.590
It should not feel like 10 libraries.

157
00:11:30.590 --> 00:11:32.740
Right.
That's the whole value proposition here.

158
00:11:32.740 --> 00:11:35.310
That's the reason we're
choosing this pattern.

159
00:11:35.310 --> 00:11:37.350
So I want to make sure that
we deliver on that promise.

