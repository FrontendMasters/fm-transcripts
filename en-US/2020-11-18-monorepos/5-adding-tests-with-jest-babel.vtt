WEBVTT

1
00:00:00.000 --> 00:00:03.149
Going to be adding testing
to this mono repo and

2
00:00:03.149 --> 00:00:06.310
we're just going to be using jest it.

3
00:00:06.310 --> 00:00:11.496
It is a good choice for for
something like a mono repo because

4
00:00:11.496 --> 00:00:16.477
just can handle TypeScript
files JavaScript files JSX,

5
00:00:16.477 --> 00:00:20.700
TSX it can handle
whatever you throw at it.

6
00:00:20.700 --> 00:00:25.813
And I wanna have one solution
when I'm working with mono repos,

7
00:00:25.813 --> 00:00:30.750
one solution that solves a problem for
all of my packages.

8
00:00:30.750 --> 00:00:34.124
I do not want to find myself
using mocha for some things, and

9
00:00:34.124 --> 00:00:35.910
Q unit for other things.

10
00:00:35.910 --> 00:00:40.580
And just for some other things,
That just introduces a lot of complexity.

11
00:00:40.580 --> 00:00:43.105
And if you're working
on this with the team,

12
00:00:43.105 --> 00:00:47.700
they need to basically learn all of these
different tools, that's bad, right?

13
00:00:47.700 --> 00:00:52.380
Extra mental overhead, extra work,
extra things that can break.

14
00:00:52.380 --> 00:00:56.730
So we want to have the thing that solves
the problem, wherever we may need it.

15
00:00:59.170 --> 00:01:02.260
Just works pretty much out of the box.

16
00:01:02.260 --> 00:01:03.480
With a small exception.

17
00:01:04.550 --> 00:01:09.970
It needs some Babel plugins so that it
can understand TypeScript, for example.

18
00:01:11.950 --> 00:01:18.688
So what we're gonna do is install some
Babel plugins in each of our packages and

19
00:01:18.688 --> 00:01:24.625
those are preset and preset TypeScript
yarn add as a dev dependency.

20
00:01:33.007 --> 00:01:38.057
So we're just gonna run this
preset env preset TypeScript And

21
00:01:38.057 --> 00:01:43.020
then I'm gonna run the exact
same thing in the utils folder.

22
00:01:45.660 --> 00:01:50.619
Now, following our
convention of one meaningful

23
00:01:50.619 --> 00:01:54.878
source of truth I want
to have a Babel config

24
00:01:57.940 --> 00:02:02.721
In my packages folder that every package
can extend from, because they're

25
00:02:02.721 --> 00:02:08.090
pretty much going to be the same until
we introduce some react components.

26
00:02:08.090 --> 00:02:12.160
All we need to worry about is
understand JavaScript and TypeScript.

27
00:02:12.160 --> 00:02:15.030
Right?
So We can have one place to define that.

28
00:02:15.030 --> 00:02:19.730
I'm gonna create a new file,
it's gonna be called dot Babel RC.

29
00:02:19.730 --> 00:02:24.714
And if you look in your course files
under step, I don't have one for

30
00:02:24.714 --> 00:02:28.075
you here, because this one's pretty easy.

31
00:02:28.075 --> 00:02:31.010
[LAUGH] So here it is.

32
00:02:31.010 --> 00:02:31.810
presets.

33
00:02:33.260 --> 00:02:34.360
And then you have an array.

34
00:02:37.490 --> 00:02:39.570
This is in the notes free to copy and
paste.

35
00:02:39.570 --> 00:02:43.510
I just don't have a file for
you to just drag.

36
00:02:46.300 --> 00:02:51.909
So we're gonna say preset and the purpose
of preset end is for you For Babel to

37
00:02:51.909 --> 00:02:58.390
transform whatever it needs to transform
based on the build target environment.

38
00:02:58.390 --> 00:03:01.490
So we're going to say, look I'm writing
my code the way I want to write it.

39
00:03:01.490 --> 00:03:06.630
I have lots of modern language features
in here, how it's in TypeScript.

40
00:03:06.630 --> 00:03:10.190
But I want you to sort of dumb it down.

41
00:03:11.640 --> 00:03:14.560
So that it works in Node 10.

42
00:03:14.560 --> 00:03:19.701
Good also put like iE 11 here, and
it'll polyfill whatever it needs to

43
00:03:19.701 --> 00:03:25.750
polyfill iE 11 doesn't know about
async await node eight doesn't either.

44
00:03:25.750 --> 00:03:26.910
No date is end of life.

45
00:03:26.910 --> 00:03:28.430
So we're not building for that.

46
00:03:28.430 --> 00:03:32.315
But this will automatically, you know,

47
00:03:32.315 --> 00:03:37.980
simplify things down based on
the build target you specify.

48
00:03:39.160 --> 00:03:43.814
And if you're interested in the different
types of targets that you can use here,

49
00:03:43.814 --> 00:03:47.090
there is an NPM package
called browser list.

50
00:03:47.090 --> 00:03:49.400
And that is the thing.

51
00:03:49.400 --> 00:03:55.133
All build tools typically refer
to like that is the thing that's

52
00:03:55.133 --> 00:04:01.430
used to provide expressions for
which target you're aiming for.

53
00:04:01.430 --> 00:04:07.380
So that you can have strings
like last two chrome versions,

54
00:04:07.380 --> 00:04:14.420
or all browsers that have Greater
than a quarter of 1% market share.

55
00:04:14.420 --> 00:04:18.230
And that's sort of a moving target
right as market share changes.

56
00:04:18.230 --> 00:04:20.680
Like ie 11 drops off.

57
00:04:20.680 --> 00:04:25.620
Well, the day that happens the day
it's less than a quarter of a percent.

58
00:04:25.620 --> 00:04:29.872
Your builds will get smaller, you don't
have to worry about turning things off on

59
00:04:29.872 --> 00:04:34.310
a per feature basis like I can use a sync
await now, it'll just happen for you.

60
00:04:34.310 --> 00:04:36.100
So it's really, really convenient.

61
00:04:38.950 --> 00:04:42.320
So that's our preset and
then this second value here.

62
00:04:44.580 --> 00:04:46.961
Oops sorry it has to be
in this in this array.

63
00:04:50.851 --> 00:04:55.745
Babel, TypeScript, preset TypeScript with

64
00:04:55.745 --> 00:05:00.630
a comma because that's how arrays work.

65
00:05:00.630 --> 00:05:04.480
So in the end,
your Babel RC should look like this.

66
00:05:04.480 --> 00:05:09.607
We are building for node 10 And
we want to strip out the symbols

67
00:05:09.607 --> 00:05:15.240
that are specific to TypeScript,
leaving only JavaScript behind.

68
00:05:17.420 --> 00:05:19.866
This is our single place where
we're gonna defined this.

69
00:05:23.462 --> 00:05:27.870
Following our convention,
we're gonna create a very simple.

70
00:05:27.870 --> 00:05:30.082
Babel RC in each package.

71
00:05:38.068 --> 00:05:39.530
That's it.

72
00:05:39.530 --> 00:05:44.436
So create one of these at the root
of your utils folder, and

73
00:05:44.436 --> 00:05:50.260
one at the root of your types
folder.I'm just gonna copy And paste.

74
00:05:51.821 --> 00:05:52.890
So I've got Babel RC.

75
00:05:52.890 --> 00:05:55.144
And then here's actually, so

76
00:05:55.144 --> 00:06:00.820
you don't need to see both of those
because those are both very trivial.

77
00:06:00.820 --> 00:06:03.958
So this is the meaningful one,
which is in the packages folder, and

78
00:06:03.958 --> 00:06:05.620
then each package has one of these.

79
00:06:07.090 --> 00:06:09.270
And you never need to think
about this one again.

80
00:06:09.270 --> 00:06:14.099
Now the exception would be,
let's say that some of your

81
00:06:14.099 --> 00:06:19.030
code runs on the server side
some runs on the client side,

82
00:06:19.030 --> 00:06:25.470
then you might have a different
Babel RC.Like the the bar is much.

83
00:06:25.470 --> 00:06:31.340
You need to dumb things down much more for
IE 11 compared to node 10.

84
00:06:31.340 --> 00:06:35.660
Node 10 is the oldest supported
node version right now.

85
00:06:37.440 --> 00:06:41.030
Ie 11 unfortunately is still supported and
it is much, much older.

86
00:06:44.980 --> 00:06:48.920
If we've done our job right, let me
just do a quick check of my notes here.

87
00:06:48.920 --> 00:06:51.510
All right,
I don't see anything else should be good.

88
00:06:51.510 --> 00:06:53.751
Should be able now to just just run.

89
00:06:58.318 --> 00:07:03.662
Just Nice,

90
00:07:03.662 --> 00:07:09.480
our tests pass and I see that there's
some meaningful, meaningful output here.

91
00:07:09.480 --> 00:07:11.625
Let's see if it also works
in our types folder.

92
00:07:16.915 --> 00:07:20.591
Past looking good, I was easy,

93
00:07:20.591 --> 00:07:24.954
just is really easy to set up these days

94
00:07:28.664 --> 00:07:34.058
just to put the icing on the cake
here Let's create an NPM script so

95
00:07:34.058 --> 00:07:36.990
that we can just run yarn test.

96
00:07:36.990 --> 00:07:41.784
And this would let us we're trying to
define a common convention here because

97
00:07:41.784 --> 00:07:43.840
this will pay off later.

98
00:07:43.840 --> 00:07:48.960
So certain packages may have extra
testing steps that need to happen.

99
00:07:48.960 --> 00:07:53.555
For example, At LinkedIn, one of
the one of my little pet projects is

100
00:07:53.555 --> 00:07:58.960
visual regression testing,
where you take screenshots of components.

101
00:07:58.960 --> 00:08:03.530
And as you make code changes, you take
new screenshots and you compare them.

102
00:08:03.530 --> 00:08:05.633
So this can catch things like CSS bugs,

103
00:08:05.633 --> 00:08:08.600
which are otherwise quite
difficult to catch.

104
00:08:08.600 --> 00:08:12.100
So test might mean something different for
that package.

105
00:08:12.100 --> 00:08:15.624
This is the value of having
a convention where you can just say,

106
00:08:15.624 --> 00:08:18.630
Look visit any package and
just run yarn test.

107
00:08:18.630 --> 00:08:23.200
And it's run whatever it has to run,
whatever test means for that package.

108
00:08:25.550 --> 00:08:29.960
So we'll say in this case test
just means Just run jest.

109
00:08:31.130 --> 00:08:34.740
We're gonna add this to both
of our current packages.

110
00:08:34.740 --> 00:08:36.200
So there it is in types.

111
00:08:37.390 --> 00:08:45.980
And there it is in our utils package,
and that's it.

112
00:08:45.980 --> 00:08:50.070
We have testing, we can run yarn test
in any package within our workspace.

