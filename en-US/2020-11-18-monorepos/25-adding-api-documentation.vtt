WEBVTT

1
00:00:00.470 --> 00:00:06.226
The last thing we are going to do
to this App is finish our quest for

2
00:00:06.226 --> 00:00:08.210
API documentation.

3
00:00:08.210 --> 00:00:12.012
So we already have this
API extractor in place and

4
00:00:12.012 --> 00:00:15.990
that's whats giving, This nice API report.

5
00:00:15.990 --> 00:00:23.560
It's helping us make very deliberate and
highly visible changes to our API surface.

6
00:00:23.560 --> 00:00:27.880
So all that remains is for
us to hook up this.

7
00:00:27.880 --> 00:00:30.590
This API document or tool.

8
00:00:30.590 --> 00:00:32.920
Let's begin by installing.

9
00:00:32.920 --> 00:00:35.060
Again, it's a work workspace dependency.

10
00:00:39.990 --> 00:00:41.100
This one's really easy.

11
00:00:41.100 --> 00:00:43.440
Oops, what's going on here?

12
00:00:43.440 --> 00:00:47.990
Sorry, it's Microsoft API documented now.

13
00:00:47.990 --> 00:00:51.470
I have a somewhat more complicated
than normal script here.

14
00:00:53.150 --> 00:00:57.680
We can just copy that into
your scripts workspace folder.

15
00:00:57.680 --> 00:00:59.350
Now let me tell you what this is doing.

16
00:01:01.320 --> 00:01:05.745
This is an attempt to make sure that your
API Doc's are always up to date, and

17
00:01:05.745 --> 00:01:10.540
that entails a totally fresh build,
so that you pick up on everything.

18
00:01:10.540 --> 00:01:13.530
Right, you're not, you don't have
out of date type information.

19
00:01:13.530 --> 00:01:18.080
And you're building your docks
off of stale build output.

20
00:01:18.080 --> 00:01:20.670
So we clean, get a fresh build.

21
00:01:20.670 --> 00:01:25.624
And then we run that api report and
running this command

22
00:01:25.624 --> 00:01:30.870
this way instead of going dash,
dash, local.

23
00:01:30.870 --> 00:01:31.520
Right?

24
00:01:31.520 --> 00:01:39.210
Running the command this way means that we
will fail unless everything's up-to-date.

25
00:01:39.210 --> 00:01:44.137
So you're not building API docs
unless you've sorta given a thumbs

26
00:01:44.137 --> 00:01:48.900
up to any intentional changes you
made to the public API surface.

27
00:01:51.040 --> 00:01:55.780
Now, GitHub Pages has recently
advanced significantly.

28
00:01:55.780 --> 00:01:58.531
It used to be that you had
to publish mark down or

29
00:01:58.531 --> 00:02:01.790
HTML, whatever you wanted
to put on your GitHub page.

30
00:02:01.790 --> 00:02:05.615
You had to put that on a special,
Branch called gh pages.

31
00:02:05.615 --> 00:02:10.755
Now you can put it on any branch and
potentially just in any folder you like.

32
00:02:10.755 --> 00:02:15.783
Now, the docs gets themed and
there's a config yamo Yml file

33
00:02:15.783 --> 00:02:21.022
that says which theme you're using,
so I detect if it exists.

34
00:02:22.102 --> 00:02:26.330
And if it does, I move that file out of
the way because we're about to blow that

35
00:02:26.330 --> 00:02:29.012
Doc's folder away and recreate it.

36
00:02:29.012 --> 00:02:33.704
And then later if we found that
it did exist, we put it back And

37
00:02:33.704 --> 00:02:41.140
then in the meantime, between those two
things, we run this api-documenter thing.

38
00:02:41.140 --> 00:02:43.040
So we go yarn api-documenter.

39
00:02:43.040 --> 00:02:44.707
We want to generate markdown, and

40
00:02:44.707 --> 00:02:47.360
I'll talk about the other
output option in just a sec.

41
00:02:48.400 --> 00:02:55.180
Our input folder is this root level temp
folder containing all of these json files.

42
00:02:55.180 --> 00:02:57.780
And then the output folder is docs.

43
00:03:01.560 --> 00:03:03.950
I'm just going to make sure I
don't have dogs around already.

44
00:03:06.840 --> 00:03:08.540
So let's see.

45
00:03:08.540 --> 00:03:11.652
O think I have to do a couple
more things to Ahmad.

46
00:03:11.652 --> 00:03:12.342
Make sure that script is executable.

47
00:03:12.342 --> 00:03:19.020
I have to make sure that I've
wired it up in my package, JSON.

48
00:03:20.760 --> 00:03:23.410
So here I'll need API Doc's.

49
00:03:25.000 --> 00:03:26.210
And now it should be good to go.

50
00:03:28.820 --> 00:03:30.380
Let's see what happens.

51
00:03:30.380 --> 00:03:31.320
So we're cleaning.

52
00:03:33.550 --> 00:03:36.860
We are now building
everything from scratch.

53
00:03:36.860 --> 00:03:38.370
We have some build errors.

54
00:03:38.370 --> 00:03:39.128
What happened here.

55
00:03:47.614 --> 00:03:49.515
This is strange.

56
00:04:01.874 --> 00:04:03.960
Let's just try building it normally.

57
00:04:05.782 --> 00:04:08.302
You know what might be happening here?

58
00:04:12.222 --> 00:04:13.130
There we go.

59
00:04:13.130 --> 00:04:14.210
Now we're seeing the problem.

60
00:04:15.820 --> 00:04:22.371
So, I think when we do yarn, or
TSC dash B packages it might,

61
00:04:22.371 --> 00:04:27.790
I don't think it's doing the layering up.

62
00:04:27.790 --> 00:04:30.921
That we need for
like that what learners doing,

63
00:04:30.921 --> 00:04:34.960
where it starts from the bottom and
works at way up.

64
00:04:34.960 --> 00:04:37.980
Its way up.
So let's try it learner run build.

65
00:04:39.460 --> 00:04:41.870
And I think there's something
we could do to fix this.

66
00:04:41.870 --> 00:04:48.440
So if this works,
we still have a problem All right.

67
00:04:48.440 --> 00:04:48.940
I believe you.

68
00:04:54.535 --> 00:04:57.191
So, this is it's useful for you to for

69
00:04:57.191 --> 00:05:01.800
me to verbalise how I kind of
deal with this kind of problem.

70
00:05:01.800 --> 00:05:07.920
So here's what I suspect I'm looking at
this right we're in this data layer, and

71
00:05:07.920 --> 00:05:14.410
I am reading this information from another
package, right, another local package.

72
00:05:16.100 --> 00:05:17.310
I know what's going on here.

73
00:05:18.440 --> 00:05:19.870
Here you go.

74
00:05:19.870 --> 00:05:21.820
So here's where the error is happening.

75
00:05:23.120 --> 00:05:25.581
I see that I get this piece
of type information and

76
00:05:25.581 --> 00:05:27.870
I don't get this piece
of type information.

77
00:05:29.650 --> 00:05:30.730
What's going on.

78
00:05:30.730 --> 00:05:33.420
Well I wanna look at the decoration file.

79
00:05:33.420 --> 00:05:36.500
I wanna look at the types.

80
00:05:36.500 --> 00:05:40.868
And I do notice that we've got

81
00:05:40.868 --> 00:05:46.990
potentially our beta somewhere in here.

82
00:05:46.990 --> 00:05:50.670
So this is not a publicly
available method.

83
00:05:50.670 --> 00:05:52.520
So I can deal with this.

84
00:05:52.520 --> 00:05:55.770
And I'll show you how I
would go about it here.

85
00:05:55.770 --> 00:05:59.625
So, back in my data folder,
I basically want to say look,

86
00:05:59.625 --> 00:06:04.520
I want to use the beta things that
are exposed from this package.

87
00:06:04.520 --> 00:06:06.610
It is it is pretty simple to do.

88
00:06:06.610 --> 00:06:10.720
So, just need to go to this Ts config for
the project.

89
00:06:10.720 --> 00:06:16.225
And it's a compiler option
paths Slack types and

90
00:06:16.225 --> 00:06:21.470
we're just going to point
it to node modules.

91
00:06:24.680 --> 00:06:26.623
Types sorry.

92
00:06:33.218 --> 00:06:39.810
This and then types beta, DTS.

93
00:06:39.810 --> 00:06:43.810
So I'm saying don't use
the regular type information.

94
00:06:43.810 --> 00:06:45.280
Use this file.

95
00:06:45.280 --> 00:06:48.264
And I have to say base URL is this folder.

96
00:06:48.264 --> 00:06:52.928
That should go away.

97
00:06:52.928 --> 00:06:56.930
All right now, nothing's picking up yet.

98
00:06:56.930 --> 00:06:59.995
First thing I want to do is
restart my language server and

99
00:06:59.995 --> 00:07:02.289
let's see if this symbol comes through.

100
00:07:10.783 --> 00:07:17.130
Interesting Ts config.

101
00:07:17.130 --> 00:07:18.630
Let's look in this dist folder.

102
00:07:18.630 --> 00:07:21.318
Alright, so there's the types Clearly,

103
00:07:21.318 --> 00:07:26.106
it's not coming through because we're
looking at this declaration file.

104
00:07:32.621 --> 00:07:34.320
There's one more thing I could try here.

105
00:07:36.680 --> 00:07:37.874
No.
I already have this

106
00:07:45.160 --> 00:07:53.390
I can get around this more easily by
just making those no longer beta.

107
00:07:53.390 --> 00:07:55.460
I think part of the problem here is,

108
00:07:55.460 --> 00:07:58.950
I have two different
competing lookup mechanisms.

109
00:07:58.950 --> 00:08:01.440
On the one hand,
there's no require resolve.

110
00:08:01.440 --> 00:08:07.263
On the other hand, there's This TypeScript
composite project where I'm saying go and

111
00:08:07.263 --> 00:08:11.920
actually look at the source code,
the TS files in this other project.

112
00:08:13.070 --> 00:08:17.087
So let's untangle that
a bit by just saying,

113
00:08:17.087 --> 00:08:22.810
we're just going to expose
the the API surface directly index.

114
00:08:25.190 --> 00:08:27.500
And then all this stuff should
just go away and be happy.

115
00:08:30.370 --> 00:08:31.650
And we may need another belt.

116
00:08:31.650 --> 00:08:32.150
Let's see.

117
00:08:40.001 --> 00:08:40.740
Looks good.

118
00:08:40.740 --> 00:08:42.250
All right, so that took care of it.

119
00:08:43.640 --> 00:08:44.953
Let's try the API docs again

120
00:08:50.687 --> 00:08:54.375
Much better.

121
00:09:00.073 --> 00:09:03.518
There is API extractor
finishing each package.

122
00:09:03.518 --> 00:09:10.590
Okay, completed successfully.

123
00:09:10.590 --> 00:09:14.099
Look at our Docs folder got
a bunch of good stuff in there.

