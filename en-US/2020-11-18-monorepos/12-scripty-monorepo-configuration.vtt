WEBVTT

1
00:00:00.020 --> 00:00:04.650
Now we're going to get a little more
creative here from for mono repurpose.

2
00:00:04.650 --> 00:00:07.760
So I'm going to go back to
the workspace level package JSON.

3
00:00:07.760 --> 00:00:09.500
And I'm going to configure script D.

4
00:00:09.500 --> 00:00:12.853
And I'm going to say,
I know by default, you just look for

5
00:00:12.853 --> 00:00:14.570
this folder called scripts.

6
00:00:15.660 --> 00:00:20.460
But I want to have a place for
workspace level scripts and then a folder.

7
00:00:21.520 --> 00:00:24.140
Where packages can discover their scripts.

8
00:00:26.420 --> 00:00:28.440
So we're going to start with
this little config here.

9
00:00:28.440 --> 00:00:32.610
And then I'm going to go
into our course files.

10
00:00:32.610 --> 00:00:37.096
And in folder for step number six,
we've got these packages and

11
00:00:37.096 --> 00:00:39.370
workspace sub folders.

12
00:00:39.370 --> 00:00:43.350
I'm going to drag those right into
the Scripts folder that I just created.

13
00:00:43.350 --> 00:00:44.800
I can leave great in there, it's fine.

14
00:00:47.760 --> 00:00:50.520
All right, so this is what I've got now.

15
00:00:50.520 --> 00:00:55.450
And I got to do my chmod thing again, just
to be sure I can recursively apply this.

16
00:00:55.450 --> 00:00:59.570
And now if you're using Windows right now,
you're probably like screaming at me.

17
00:00:59.570 --> 00:01:03.496
But frankly I'm not sure how
to do this in windows with

18
00:01:03.496 --> 00:01:06.210
the permission situation is there.

19
00:01:07.520 --> 00:01:10.000
I say this is Microsoft employee
which is pretty shameful.

20
00:01:11.260 --> 00:01:14.678
But Try out windows subsystem for
Linux or cygwin,

21
00:01:14.678 --> 00:01:18.505
you'll be able to do all
the stuff I'm doing right here.

22
00:01:20.395 --> 00:01:23.588
Alright, so
the only thing I added here was dash R,

23
00:01:23.588 --> 00:01:26.795
which is recursive meaning And
I need to do this.

24
00:01:27.945 --> 00:01:31.950
Right go into the Scripts folder and
all the way down.

25
00:01:31.950 --> 00:01:34.183
Set the permissions on these files.

26
00:01:38.283 --> 00:01:45.720
So now we can see, the important thing
is when we do ls-l, we can see this x.

27
00:01:46.850 --> 00:01:51.920
So this means anyone can execute
this file is read, write Execute.

28
00:01:53.110 --> 00:01:58.990
Finally we just need to kinda wire
up our package Jayson so it knows.

29
00:02:00.250 --> 00:02:07.030
Like it can, like yan can receive this
command and delegate that work to screpti.

30
00:02:07.030 --> 00:02:13.370
So I'm just gonna create a bunch of
this and we are gonna have field Clean.

31
00:02:13.370 --> 00:02:17.540
I'm just matching the names of the folders
here are the files within the folder,

32
00:02:17.540 --> 00:02:18.350
lint and test.

33
00:02:22.810 --> 00:02:25.207
That's in our workspace level and

34
00:02:25.207 --> 00:02:29.200
packages, they just get a build lint and
test.

35
00:02:29.200 --> 00:02:31.480
So we're about to make
the same change there.

36
00:02:31.480 --> 00:02:36.710
I could have called this Create j s and
deleted this.

37
00:02:37.830 --> 00:02:39.220
And I believe it would also have worked.

38
00:02:40.530 --> 00:02:42.650
But it's maybe it doesn't.

39
00:02:48.140 --> 00:02:49.620
Maybe I need to try it again.

40
00:02:49.620 --> 00:02:50.710
Let's see if that was the problem.

41
00:02:52.140 --> 00:02:52.790
Aha Aha.

42
00:02:53.850 --> 00:02:56.065
That's what I get from going off script.

43
00:03:03.612 --> 00:03:07.449
Interesting looks like at least for
a node,

44
00:03:07.449 --> 00:03:12.620
I have to have an extension list file and
I have to use this.

45
00:03:12.620 --> 00:03:16.049
It's called a shebang
interpreter directives.

46
00:03:17.230 --> 00:03:18.320
Which is this thing up here?

47
00:03:19.810 --> 00:03:27.435
I mean, I can run this I could
literally do Just run it like that.

48
00:03:32.263 --> 00:03:36.900
Least for JavaScript files, it looks like
for shell scripts this.sh is not harmful.

49
00:03:38.010 --> 00:03:41.674
So, now that we've got this,
take my word for it,

50
00:03:41.674 --> 00:03:46.160
we have to do this next step
before we test things out.

51
00:03:46.160 --> 00:03:51.764
And that is to go into
each of our packages and

52
00:03:51.764 --> 00:03:56.470
to tell it about scripty and have it.

53
00:03:58.700 --> 00:04:01.336
Delegates work for most of these things.

54
00:04:05.832 --> 00:04:10.407
To those shell scripts, and
we're going to look at those shell

55
00:04:10.407 --> 00:04:14.290
scripts in a second because
I do not want you to think,

56
00:04:14.290 --> 00:04:18.880
I am staying deceptively
close to the happy path.

57
00:04:18.880 --> 00:04:22.170
Write, easy to set up.

58
00:04:22.170 --> 00:04:26.700
And there is no magic it just
kinda it works by convention.

59
00:04:26.700 --> 00:04:31.890
So the things I've done is
I am a package of giving it

60
00:04:31.890 --> 00:04:37.220
its own responsibility to
define what clean means.

61
00:04:38.610 --> 00:04:46.650
But everything else I'm saying Like
just build lint and test the usual way.

62
00:04:46.650 --> 00:04:51.382
And then finally, normally this would look
within each package, it would look for

63
00:04:51.382 --> 00:04:54.740
its own Scripts folder,
but I don't want that.

64
00:04:54.740 --> 00:04:56.596
I want it to go reach up to the top and

65
00:04:56.596 --> 00:05:00.600
to use the centralized folder that
applies for all of our packages.

66
00:05:00.600 --> 00:05:02.309
If we had 50 packages.

67
00:05:04.480 --> 00:05:09.660
And we had built lint and
test as our script we'd still have only

68
00:05:09.660 --> 00:05:14.741
three shell scripts to maintain,
do not have to worry about,

69
00:05:14.741 --> 00:05:19.940
like things falling out,
same package or get a typo one place.

70
00:05:22.370 --> 00:05:26.500
Gonna make a similar modification
to the utils package JSON.

71
00:05:26.500 --> 00:05:32.521
So we're gonna say test scripty,

72
00:05:32.521 --> 00:05:38.340
lint scripty and build scripty.

73
00:05:40.200 --> 00:05:44.223
And then finally this path,
go look for your scripts here.

74
00:05:47.683 --> 00:05:51.006
All right, so it's just this little
bit and then this bit up here.

75
00:05:59.316 --> 00:06:04.080
And I think we're good to go.

76
00:06:04.080 --> 00:06:08.083
I see that I have one little bug fix
here that I realized at this point

77
00:06:12.561 --> 00:06:17.100
I'm gonna let us slam into it because
it'll prove that things are working.

78
00:06:18.910 --> 00:06:24.194
So if I have delivered on my promise,

79
00:06:24.194 --> 00:06:28.115
I should be able to do this,

80
00:06:28.115 --> 00:06:33.370
lerna run What should be able to run this?

81
00:06:37.340 --> 00:06:38.700
And it should not blow up in my face.

82
00:06:40.960 --> 00:06:42.310
Doesn't look like it's blown up.

83
00:06:43.630 --> 00:06:46.273
So ran the lint task into packages and

84
00:06:46.273 --> 00:06:49.683
I see I've got a little
like Nice little awine so

85
00:06:49.683 --> 00:06:55.550
I can see this twice gives me confidence
that I'm running it in two packages.

86
00:06:55.550 --> 00:07:02.340
So I believe that it is delegating
its work to this shell script.

87
00:07:02.340 --> 00:07:02.940
Why?

88
00:07:02.940 --> 00:07:08.060
Because if we go and look in my scripts,
packages, lint There it is.

89
00:07:08.060 --> 00:07:11.420
There's a little detective looking for
the lint problems.

90
00:07:13.010 --> 00:07:15.800
And note,
this is not anything complicated.

91
00:07:15.800 --> 00:07:20.490
There's no special magic here about
finding the right directory script is

92
00:07:20.490 --> 00:07:22.750
handling that for me.

93
00:07:22.750 --> 00:07:28.061
So, it will regardless of where
the script is located It will invoke

94
00:07:28.061 --> 00:07:34.210
this from within the working directory
of where the command was run.

95
00:07:34.210 --> 00:07:37.270
So I don't need to wire up
any special paths here.

96
00:07:37.270 --> 00:07:39.010
It just works.

97
00:07:39.010 --> 00:07:42.245
And for that matter if you have
scripts that you need to share between

98
00:07:42.245 --> 00:07:43.580
your projects,.

99
00:07:43.580 --> 00:07:48.260
Going beyond mono repos here,
you could put these into an NPM package.

100
00:07:48.260 --> 00:07:50.850
And you could reach into
your node modules folder.

101
00:07:50.850 --> 00:07:54.000
And you could find these and
you could run them.

102
00:07:54.000 --> 00:07:58.332
So you could have a set of build scripts
that's distributed as a package that

103
00:07:58.332 --> 00:08:00.780
a bunch of things in your company consume.

104
00:08:01.980 --> 00:08:03.270
Totally fair game.

105
00:08:03.270 --> 00:08:09.100
Now of course, that means your scripts
won't work, until you run, yarn install.

106
00:08:09.100 --> 00:08:11.385
But that is not deal breaker,
as far as I'm concerned.

107
00:08:14.604 --> 00:08:16.840
So, let's try this.

108
00:08:16.840 --> 00:08:20.780
Now that we're at the base of our project,
what we have accomplished.

109
00:08:20.780 --> 00:08:24.000
So let me show you that
nothing's up my sleeve here.

110
00:08:24.000 --> 00:08:26.800
Building is the same linting is the same.

111
00:08:26.800 --> 00:08:28.380
Testing is the same.

112
00:08:28.380 --> 00:08:33.270
That's all that we're doing for
packages, for workspace building.

113
00:08:33.270 --> 00:08:34.760
Well, we've already been doing this.

114
00:08:36.170 --> 00:08:40.598
By the way, I'm choosing to do
this instead of learner run build,

115
00:08:40.598 --> 00:08:45.028
cuz learn to run build simply goes
to each package individually and

116
00:08:45.028 --> 00:08:49.141
runs build This is a bit smarter and
it takes advantage of the,

117
00:08:49.141 --> 00:08:54.202
the references that we set up on step two,
like our composite project step,

118
00:08:54.202 --> 00:08:58.990
and this will update only what's
necessary across our whole project.

119
00:08:58.990 --> 00:09:03.881
So I'm choosing to do this but
for clean And just cleaning, and

120
00:09:03.881 --> 00:09:07.310
I can clean with maximum concurrency.

121
00:09:07.310 --> 00:09:10.880
Who cares about the order of the packages,
we're just deleting.

122
00:09:12.210 --> 00:09:14.046
Lint, I want to see the output so

123
00:09:14.046 --> 00:09:18.410
I make sure that I stream we've
already been running this.

124
00:09:18.410 --> 00:09:19.270
And same with test.

125
00:09:21.110 --> 00:09:22.390
I'll test things in sequence.

126
00:09:23.450 --> 00:09:28.860
Actually, let's make it explicit
that the sequences Concurrency one.

127
00:09:28.860 --> 00:09:35.440
And here's why reading interleaved test
output in your console is just a big pain.

128
00:09:35.440 --> 00:09:38.400
So I honestly will have
them run a bit slower.

129
00:09:39.540 --> 00:09:45.870
And I can read them, but
maybe if I was running them locally.

130
00:09:45.870 --> 00:09:48.000
And I was just incrementally
changing things.

131
00:09:48.000 --> 00:09:52.693
I might run them in parallel then because
I only expect like the odd tester to

132
00:09:52.693 --> 00:09:54.250
to fail.

133
00:09:54.250 --> 00:09:58.948
Let's see if we have arrived at a point
where this now feels more like a non

134
00:09:58.948 --> 00:10:01.490
mono repo JavaScript project.

135
00:10:01.490 --> 00:10:07.170
Yarn, build Building workspace and
we're done.

136
00:10:07.170 --> 00:10:14.880
Yarn clean Cleaning both of our packages,
yarn build again.

137
00:10:16.870 --> 00:10:20.297
Now it's pausing for a moment
because it's doing real work right,

138
00:10:20.297 --> 00:10:22.670
it's updating only what's necessary.

139
00:10:22.670 --> 00:10:24.980
I just cleaned up to update everything.

140
00:10:24.980 --> 00:10:26.000
And then yarn lint.

141
00:10:27.050 --> 00:10:31.092
Should do linting in sequence types and

142
00:10:31.092 --> 00:10:35.140
then utils and then finally yarn test.

143
00:10:39.830 --> 00:10:44.913
There's test number one and
here comes test number two.

144
00:10:47.642 --> 00:10:48.740
So there we go.

145
00:10:48.740 --> 00:10:53.515
Now it's not feeling it's it's feeling
like the maintenance overhead is more like

146
00:10:53.515 --> 00:10:55.870
a monolith app, cheap to maintain.

147
00:10:55.870 --> 00:10:58.310
But we have the benefit of
all those little libraries.

