WEBVTT

1
00:00:00.540 --> 00:00:02.120
So there's something we can run.

2
00:00:05.514 --> 00:00:07.830
It's in my bash history.

3
00:00:07.830 --> 00:00:09.680
So I'm just there we go.

4
00:00:09.680 --> 00:00:12.470
So take a look at this.

5
00:00:14.320 --> 00:00:20.980
I am echoing out a statement, like some
text and I'm piping it to commitment.

6
00:00:20.980 --> 00:00:24.599
This is a great way if you're fiddling
with things, you're trying to make sure

7
00:00:24.599 --> 00:00:28.250
you understand what should be allowed
to work and what doesn't work.

8
00:00:28.250 --> 00:00:32.240
This should make it work here.

9
00:00:32.240 --> 00:00:36.840
Now, I'm also seeing evidence
here that maybe I don't have

10
00:00:36.840 --> 00:00:39.370
a global commitment installed.

11
00:00:39.370 --> 00:00:40.650
I should be able to do this though.

12
00:00:42.550 --> 00:00:47.060
There we go yarn commit lead, right
that's going to look in my node modules.

13
00:00:47.060 --> 00:00:49.840
It's not going to rely on
a global installation.

14
00:00:49.840 --> 00:00:51.290
And now we can see all right.

15
00:00:54.960 --> 00:00:59.530
I see a problem with the the sample
commit message here.

16
00:00:59.530 --> 00:01:04.490
Right, it's saying the scope
must be one of the following.

17
00:01:04.490 --> 00:01:06.550
So it's a look API.

18
00:01:07.720 --> 00:01:08.800
This is my scope.

19
00:01:10.470 --> 00:01:12.130
I need it to be a package name.

20
00:01:12.130 --> 00:01:15.520
Like you need to tell me
which package you affected.

21
00:01:15.520 --> 00:01:18.650
And I have no package called API.

22
00:01:18.650 --> 00:01:21.470
If I change that Two types.

23
00:01:24.160 --> 00:01:26.770
Maybe it'll be happy and it's happy.

24
00:01:26.770 --> 00:01:28.120
That didn't actually make commit.

25
00:01:28.120 --> 00:01:30.930
All we did was validate
the commit message.

26
00:01:30.930 --> 00:01:35.586
I'm going to install a global commitment
just in case that is part of a little

27
00:01:35.586 --> 00:01:39.390
challenge I'm running into
here folta install commitment.

28
00:01:40.810 --> 00:01:43.666
That's gonna be that's
like NPM install dash G or

29
00:01:43.666 --> 00:01:45.844
yarn global add something like that.

30
00:01:48.239 --> 00:01:51.680
And then the first variant that I ran,
right?

31
00:01:51.680 --> 00:01:55.260
So I, this was what ended up
being successful previously.

32
00:01:55.260 --> 00:01:56.420
This failed.

33
00:01:56.420 --> 00:01:57.210
I bet it works now.

34
00:01:58.410 --> 00:01:59.650
And it does.

35
00:01:59.650 --> 00:02:02.794
I mean,
the command is invoked successfully and

36
00:02:02.794 --> 00:02:08.090
as it should, it's telling me that
API is not a package in my repo.

37
00:02:08.090 --> 00:02:13.084
One of the things that's tricky,
about Husky is sometimes I find that

38
00:02:13.084 --> 00:02:16.990
it's tough for
it to pick up on changes in particular.

39
00:02:18.030 --> 00:02:21.610
Once it's set up some scopes,
some hooks, rather.

40
00:02:23.830 --> 00:02:28.530
Sometimes it's hard to get them to sort
of update and let's see what we have.

41
00:02:28.530 --> 00:02:32.881
So there's my Husky sh and
Husky local sh and

42
00:02:32.881 --> 00:02:36.180
then there is my commit message.

43
00:02:38.040 --> 00:02:39.390
So they're like Huskies.

44
00:02:39.390 --> 00:02:41.930
Obviously, it's dropped
all of this stuff in here.

45
00:02:43.830 --> 00:02:49.537
In an effort to sort of to receive these,
like when, what this is where I get expect

46
00:02:49.537 --> 00:02:55.740
hooks to live, and the Husky package
is now going to sort of like, catch it.

47
00:02:55.740 --> 00:02:59.812
And do something about it depending on how
we have things configured that's kind of

48
00:02:59.812 --> 00:03:01.000
how it works.

49
00:03:01.000 --> 00:03:04.708
The Husky thing isn't the most
important aspect of this and

50
00:03:04.708 --> 00:03:09.710
I don't want to drill in too deep here,
but let me tell you what that would do.

51
00:03:09.710 --> 00:03:12.012
It would It would kind of like,

52
00:03:12.012 --> 00:03:17.630
bust me if I made a commit message
that deviated from our conventions.

53
00:03:17.630 --> 00:03:22.458
What's important is that we aligned with
our conventions and we're just going to be

54
00:03:22.458 --> 00:03:26.538
good about it here so that you can see
what happens with the change log and

55
00:03:26.538 --> 00:03:30.414
you can see how that's taken into
account when versioning things So

56
00:03:30.414 --> 00:03:34.160
you want to commit message
that looks like this.

57
00:03:34.160 --> 00:03:37.290
So you'd say this is a feature.

58
00:03:37.290 --> 00:03:41.170
So I'd say feet and
an effects the types package.

59
00:03:42.800 --> 00:03:47.742
And then this is where you would write
your description to be something like

60
00:03:52.955 --> 00:03:57.242
More reasonable default types for

61
00:03:57.242 --> 00:04:02.712
generics something like that sounds sounds

62
00:04:02.712 --> 00:04:08.623
like a very fancy feature
I've added instead,

63
00:04:08.623 --> 00:04:14.529
so this is fine, but
if I just said Like that,

64
00:04:14.529 --> 00:04:18.580
it seems to like that as well.

65
00:04:18.580 --> 00:04:23.140
Maybe I need some additional linting
configuration to say only feet is added.

66
00:04:24.470 --> 00:04:29.257
only feet is allowed, right this is what
this should be what describes you're

67
00:04:29.257 --> 00:04:33.910
like whether this is a breaking change,
non breaking change.

68
00:04:33.910 --> 00:04:38.150
Or patch, or chore or
docks, things like that.

69
00:04:38.150 --> 00:04:42.167
And these will become subsections of
your change log when that the change log

70
00:04:42.167 --> 00:04:43.367
generation happens.

71
00:04:48.031 --> 00:04:51.600
So here's how we would do
this git commit message.

72
00:04:52.660 --> 00:04:54.240
Actually, we can read her message in here.

73
00:04:54.240 --> 00:05:01.580
So we'd say, This would really
be a chore to be quite honest.

74
00:05:01.580 --> 00:05:05.070
But I want to bump our version
number deliberately so

75
00:05:05.070 --> 00:05:07.720
that I can show you how that works.

76
00:05:07.720 --> 00:05:12.190
So let's pretend that this is
like a minor release where

77
00:05:12.190 --> 00:05:16.100
the change now this is
really truly just a chore.

78
00:05:17.720 --> 00:05:19.760
But we'll call it a feature.

79
00:05:19.760 --> 00:05:21.196
And we'll say it affects utils.

80
00:05:21.196 --> 00:05:25.263
Conventional.

81
00:05:25.263 --> 00:05:32.050
Commits and commitment.

82
00:05:32.050 --> 00:05:36.664
This is an effort to see if we

83
00:05:36.664 --> 00:05:41.480
can get automatic changelog

84
00:05:41.480 --> 00:05:46.504
generation and versioning.

85
00:05:51.319 --> 00:05:52.910
Cool, all right, so we have our commit.

