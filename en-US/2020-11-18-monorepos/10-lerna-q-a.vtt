WEBVTT

1
00:00:00.200 --> 00:00:04.581
So the answer to your question about
one package needing an older version of

2
00:00:04.581 --> 00:00:08.350
something well, we're seeing
that right now with jest right?

3
00:00:08.350 --> 00:00:14.088
We downgrade a jest here to like
the latest version is 20 653 And

4
00:00:14.088 --> 00:00:21.190
we're at 26 for we don't let ourselves
float up to 26 five anything.

5
00:00:21.190 --> 00:00:25.060
So that's what's giving us
this local version of jest.

6
00:00:25.060 --> 00:00:27.840
Part of how JavaScript
resolves dependencies.

7
00:00:27.840 --> 00:00:30.870
It allows for duplication.

8
00:00:30.870 --> 00:00:35.925
There are other types of package
managers in other ecosystems

9
00:00:35.925 --> 00:00:40.395
that require you to They will
they will scream at you and

10
00:00:40.395 --> 00:00:46.711
fail fail to work unless you have one set
of one non duplicate dependency graph

11
00:00:46.711 --> 00:00:54.550
with exactly one version of everything you
need that meets the needs of everything.

12
00:00:54.550 --> 00:00:56.869
This would never work in JavaScript
though, because we have so

13
00:00:56.869 --> 00:00:58.290
many little tiny packages.

14
00:00:58.290 --> 00:01:00.030
Alright, question in the class.

15
00:01:00.030 --> 00:01:01.332
So Jonathan asked,

16
00:01:01.332 --> 00:01:06.159
Does it make a big difference having
something local versus at the top right

17
00:01:06.159 --> 00:01:12.070
having a local dependency in your node
modules versus this outer node modules?

18
00:01:12.070 --> 00:01:16.613
I would say zero difference
its closest can be zero,

19
00:01:16.613 --> 00:01:20.240
like not a measurable difference.

20
00:01:20.240 --> 00:01:24.630
And therefore,
you should optimize for other things.

21
00:01:24.630 --> 00:01:29.202
It is not faster to have something local
Now the only way you'll end up with

22
00:01:29.202 --> 00:01:33.777
something local is if you have slightly
different versions like we have to

23
00:01:33.777 --> 00:01:36.600
jests in this project right now.

24
00:01:36.600 --> 00:01:41.546
That has some downsides, the size of this
project on disk is going to get much

25
00:01:41.546 --> 00:01:46.800
bigger if we don't try to get on a mostly
common set of things, and for that matter

26
00:01:46.800 --> 00:01:51.592
If you have two different jests,
if there's an old bug and it gets fixed,

27
00:01:51.592 --> 00:01:56.900
like you could really confuse yourself
by saying, Well I see this pattern.

28
00:01:56.900 --> 00:01:58.000
It's working in one place.

29
00:01:58.000 --> 00:02:00.050
Why isn't it working in this other place?

30
00:02:00.050 --> 00:02:03.200
It's you can lose some
significant productivity there.

31
00:02:03.200 --> 00:02:08.030
I would say that's the big risk
of making more things local.

32
00:02:09.530 --> 00:02:12.260
Versus having this workspace route.

33
00:02:12.260 --> 00:02:17.574
With everything as much as possible your
dev dependencies get hoisted up to that

34
00:02:17.574 --> 00:02:23.315
workspace level node modules folder, and
because of the way require resolve works.

35
00:02:23.315 --> 00:02:27.999
A node modules folder is a node modules
folder when you say, give me just or

36
00:02:27.999 --> 00:02:32.910
give me lodash Like node is just going to
go like look for local node modules and

37
00:02:32.910 --> 00:02:37.369
then go up to the parent look for
node modules there go up to the parent,

38
00:02:37.369 --> 00:02:41.190
look for node modules there and
it'll keep going up.

39
00:02:41.190 --> 00:02:44.100
So all you'd be saving is
just like a couple hops.

40
00:02:44.100 --> 00:02:48.669
And that would be measured in probably
microseconds in terms of the time that it

41
00:02:48.669 --> 00:02:49.439
would take.

42
00:02:50.690 --> 00:02:57.020
Okay, so another question in
the class was asked about symlinks.

43
00:02:57.020 --> 00:03:02.070
And the difference between these local,
symlinks.

44
00:03:02.070 --> 00:03:06.430
Like, if I were to go back to
having this dependency on types,

45
00:03:08.669 --> 00:03:14.243
and I would run your learn on link, This

46
00:03:14.243 --> 00:03:17.228
is an important topic and
I wanna make sure we get it right here.

47
00:03:17.228 --> 00:03:18.448
So like what,

48
00:03:18.448 --> 00:03:24.360
why do we need this local symlink
if require resolve just works well.

49
00:03:26.370 --> 00:03:31.850
It kinda has to do with There are a couple
reasons number one versions, right.

50
00:03:31.850 --> 00:03:37.120
So the same logic that I just applied
to jest applies here as well.

51
00:03:37.120 --> 00:03:38.350
That's one reason.

52
00:03:38.350 --> 00:03:40.880
Another reason is tooling.

53
00:03:40.880 --> 00:03:45.620
So typically, when you have
like a build that watches for

54
00:03:45.620 --> 00:03:52.970
changes in certain places, Often you're
gonna watch a folder and all sub folders.

55
00:03:52.970 --> 00:03:56.313
So if we had webpack running here and

56
00:03:56.313 --> 00:04:01.106
we wanted it to update any
time we saved something,

57
00:04:01.106 --> 00:04:05.460
you can tell webpack to
monitor node modules.

58
00:04:05.460 --> 00:04:08.278
And if you're in there
fiddling with dependencies,

59
00:04:08.278 --> 00:04:12.474
maybe you're trying to find a bug fix
Right Webpack dev server will bounce, and

60
00:04:12.474 --> 00:04:15.230
you'll see the changes in front of you.

61
00:04:15.230 --> 00:04:18.360
That only works if you're
in this node modules.

62
00:04:18.360 --> 00:04:21.451
And that's why the files
that you're touching,

63
00:04:21.451 --> 00:04:25.260
being in your local node modules
folder is a benefit to you.

64
00:04:25.260 --> 00:04:27.680
That's that's another reason, right?

65
00:04:27.680 --> 00:04:30.980
So we can still watch everything
that's going on here.

66
00:04:30.980 --> 00:04:38.730
And that lets you and we'll see we'll
get to this workflow a little bit later.

67
00:04:38.730 --> 00:04:42.302
But you want to be able to basically
fire up your workspace and

68
00:04:42.302 --> 00:04:46.240
then change anything anywhere,
and your build reloads.

69
00:04:46.240 --> 00:04:50.770
And it just you get the same benefit that
you would if this were a monolith app.

70
00:04:50.770 --> 00:04:53.650
You have all of your code together and
you can watch all that stuff.

71
00:04:56.790 --> 00:05:04.340
And I also see in the class, so,
Jonathan from Eventbrite, they use bolt.

72
00:05:04.340 --> 00:05:10.890
So bolt is a package manager
that is currently in preview.

73
00:05:10.890 --> 00:05:15.650
It kind of does a lot of stuff that
yarn does and yarn workspaces.

74
00:05:15.650 --> 00:05:20.442
It's still under active development looks
really promising in terms of potentially

75
00:05:20.442 --> 00:05:22.760
being an alternative to learner.

76
00:05:22.760 --> 00:05:28.520
It's just not in a state where I would say
those that are just learning mono repos.

77
00:05:29.670 --> 00:05:31.850
Would benefit from using
it I'd say use lerna.

78
00:05:31.850 --> 00:05:34.180
It's mature at this point.

79
00:05:35.240 --> 00:05:37.250
It has shortcomings.

80
00:05:37.250 --> 00:05:41.780
Both addresses some of these,
but just go to the readme.

81
00:05:41.780 --> 00:05:44.520
See if it's ready by the time
that you're watching this video.

82
00:05:44.520 --> 00:05:48.822
As of the time we're recording
it is clearly stated as

83
00:05:48.822 --> 00:05:51.504
sort of like a a preview release.

