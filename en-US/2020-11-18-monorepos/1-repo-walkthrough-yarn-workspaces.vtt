WEBVTT

1
00:00:00.440 --> 00:00:05.063
When looking at the read me, you're
gonna wanna make sure that you follow

2
00:00:05.063 --> 00:00:09.390
the instructions to install volta,
which helps manage your node and

3
00:00:09.390 --> 00:00:14.580
your yarn versions, so you get
the correct version for this project.

4
00:00:14.580 --> 00:00:17.671
Make sure you're using
Visual Studio code as well if you

5
00:00:17.671 --> 00:00:22.710
wanna see what I see on the screen, a
little bit less important to use VS.code.

6
00:00:22.710 --> 00:00:26.791
For this course, compared to say,
a TypeScript course, but

7
00:00:26.791 --> 00:00:29.550
it does offer some benefits in this case.

8
00:00:31.320 --> 00:00:33.675
So, if you check out your project,

9
00:00:33.675 --> 00:00:38.970
you should see something similar
to what I'm seeing on the screen.

10
00:00:38.970 --> 00:00:42.550
There's not much here,
There's a notes folder.

11
00:00:42.550 --> 00:00:46.404
So this contains a markdown files
that represent each step of

12
00:00:46.404 --> 00:00:49.290
the project that we're
going to take today.

13
00:00:50.330 --> 00:00:53.370
And then there's this
folder called course files.

14
00:00:53.370 --> 00:00:55.860
And that includes some
of the source code for

15
00:00:55.860 --> 00:00:59.430
example that you're going
to be working with today.

16
00:00:59.430 --> 00:01:01.670
Because I don't want you to be
spending time writing code.

17
00:01:01.670 --> 00:01:06.064
A lot of the work that we're going to be
doing today, has to do with configuring

18
00:01:06.064 --> 00:01:09.870
our project and setting up some
build scripts and things like that.

19
00:01:09.870 --> 00:01:14.600
So I want your time, focused as
much as possible on the meaningful

20
00:01:14.600 --> 00:01:18.220
stuff that has to do with
working with a mono repo.

21
00:01:20.970 --> 00:01:24.012
The first thing we're gonna
have to do today is take

22
00:01:24.012 --> 00:01:27.030
our package json at
the root of our project.

23
00:01:27.030 --> 00:01:32.980
And this is basically what you get out
of the box if you just run yarn in net.

24
00:01:32.980 --> 00:01:38.400
In fact, if you follow the instructions
in step one The workshop project.

25
00:01:38.400 --> 00:01:41.470
I start even earlier
than what you see here.

26
00:01:41.470 --> 00:01:44.625
I will start with it,
basically an empty project and

27
00:01:44.625 --> 00:01:49.570
go through the process of creating
this file, but it's kind of boring.

28
00:01:49.570 --> 00:01:52.130
So I decided to give
you the starting point.

29
00:01:52.130 --> 00:01:55.080
The first thing we're going to
do is add a new property here.

30
00:01:56.130 --> 00:01:58.841
And let's call it workspaces, actually,

31
00:01:58.841 --> 00:02:03.310
I'm not gonna say let's call it
workspaces, because that implies that

32
00:02:03.310 --> 00:02:07.360
other things would be appropriate here,
it must be workspaces.

33
00:02:09.150 --> 00:02:12.770
And we're gonna say packages star, right?

34
00:02:12.770 --> 00:02:19.950
So it's an array and We can put one or
more values in this array.

35
00:02:19.950 --> 00:02:23.986
Now what we're telling yarn
here is that number one,

36
00:02:23.986 --> 00:02:28.600
we want to use this feature
called the yarn workspaces.

37
00:02:28.600 --> 00:02:33.844
And number two, any subfolders
found within the packages folder,

38
00:02:33.844 --> 00:02:35.690
which I can create now.

39
00:02:39.020 --> 00:02:43.914
Any sub folders within packages
should be regarded as packages

40
00:02:43.914 --> 00:02:47.110
that are part of this workspace.

41
00:02:47.110 --> 00:02:50.410
That's where yarn can look to find them.

42
00:02:50.410 --> 00:02:57.217
Now you could, if you want to have a bunch
of things in the root of your project,

43
00:02:57.217 --> 00:03:02.287
you could say Library a,
Something like this,

44
00:03:02.287 --> 00:03:04.640
or you could just press a bunch of things.

45
00:03:04.640 --> 00:03:09.682
I kind of like this wild card approach
because that's what's gonna let us

46
00:03:09.682 --> 00:03:14.740
add additional packages here without
having to touch this file, right?

47
00:03:14.740 --> 00:03:19.197
As long as we establish the convention
Darren's just going to find things as we

48
00:03:19.197 --> 00:03:22.180
drop new folders into this,
this packages folder.

49
00:03:23.520 --> 00:03:27.947
So we save this just to save ourselves a
little bit of work.Now if you go into this

50
00:03:27.947 --> 00:03:32.575
course Files folder, which is where we're
going to get a lot of the things that will

51
00:03:32.575 --> 00:03:34.183
become part of our project.

52
00:03:35.493 --> 00:03:38.290
Look in a folder number one.

53
00:03:39.480 --> 00:03:43.570
And you'll see that within
this yarn workspaces folder,

54
00:03:43.570 --> 00:03:46.340
we have something called types.

55
00:03:46.340 --> 00:03:49.450
And that has a source and a test folder.

56
00:03:49.450 --> 00:03:51.102
It's got its own package JSON and

57
00:03:51.102 --> 00:03:54.460
a Ts config,
which is our Type Script configuration.

58
00:03:54.460 --> 00:03:56.399
So I want you to grab types.

59
00:03:57.760 --> 00:04:01.266
Or if you could do the command
line version of this, but

60
00:04:01.266 --> 00:04:06.310
we effectively just wanna move it into
this packages folder, just like this.

61
00:04:08.630 --> 00:04:12.162
So you get packages types, and
then the rest of this code here.

62
00:04:15.012 --> 00:04:20.500
Now I want us to look at
what's going on here.

63
00:04:23.560 --> 00:04:30.280
So we have a pretty small and
thin package JSON.

64
00:04:32.880 --> 00:04:37.850
We have a Ts config, If you've seen these
before, this kind of looks like a very

65
00:04:37.850 --> 00:04:42.240
typical one with sort of the strictness
you know, cranked up to 11.

66
00:04:42.240 --> 00:04:47.030
And then we've got some source code and
some tests.

67
00:04:49.170 --> 00:04:51.720
Nothing too fancy here.

68
00:04:52.780 --> 00:04:56.960
Now I do want to talk a little bit
about this, naming convention.

69
00:04:56.960 --> 00:05:00.346
So if I call my, if I call this package,

70
00:05:00.346 --> 00:05:05.380
at flack slash types,
I'm using what is called a scope for

71
00:05:05.380 --> 00:05:09.692
my package,
meaning when I publish these to NPM,

72
00:05:09.692 --> 00:05:15.300
they're all going to be sort
of owned by a single org.

73
00:05:15.300 --> 00:05:21.690
And this is a common convention that's
used for library style mana repos.

74
00:05:21.690 --> 00:05:26.532
Because it allows you to sort of have
a group of published artifacts that

75
00:05:26.532 --> 00:05:29.980
are associated with the single repository.

76
00:05:29.980 --> 00:05:32.336
So the naming convention makes it easy for

77
00:05:32.336 --> 00:05:36.383
users of this library to understand
that these are all parts of a whole.

78
00:05:39.101 --> 00:05:41.570
Let's just make sure
that things work here.

79
00:05:41.570 --> 00:05:43.935
And we're gonna remember
all we have here is yarn,

80
00:05:43.935 --> 00:05:46.560
we haven't really
installed any dependencies.

81
00:05:46.560 --> 00:05:50.840
We can run yarn, just to make sure that
everything's wired up the way it should.

82
00:05:50.840 --> 00:05:51.340
Should be.

83
00:05:55.973 --> 00:05:57.910
So we've saved our lock file.

84
00:05:57.910 --> 00:06:00.050
I wonder what happened to the lock file.

85
00:06:00.050 --> 00:06:04.490
We brought in TypeScript, but
this is like, that's the whole lock file.

86
00:06:04.490 --> 00:06:06.340
Just have this one, one dependency.

87
00:06:07.390 --> 00:06:12.415
What this does prove though,
is that this TypeScript dependency, which

88
00:06:12.415 --> 00:06:18.332
is not present In our root level package
JSON, it's not here, right version 403,

89
00:06:18.332 --> 00:06:23.950
which resolved to exactly 403 because
that's the latest release as of today.

90
00:06:25.550 --> 00:06:28.820
So this inner package JSON.

91
00:06:30.060 --> 00:06:31.698
It is found by yarn and

92
00:06:31.698 --> 00:06:37.350
when you run yarn install You get it
just like you would get anything else.

93
00:06:39.840 --> 00:06:43.520
So let's go into that package and
try to build it.

94
00:06:48.830 --> 00:06:50.643
So I see a dist folder here and

95
00:06:50.643 --> 00:06:55.810
I see some JavaScript that got spit
out as part of the build process.

96
00:06:55.810 --> 00:06:58.400
So we have in fact finished
our first step here.

97
00:06:59.540 --> 00:07:03.864
And what we can see already is
that yarn workspaces allows

98
00:07:03.864 --> 00:07:07.377
multiple little sub
projects to work like when

99
00:07:07.377 --> 00:07:12.130
you're executing code when
you're saying yarn build.

100
00:07:12.130 --> 00:07:17.180
From within the right sub folder,
things work exactly as you would expect.

101
00:07:17.180 --> 00:07:19.150
This already has a lot of value, right?

102
00:07:20.940 --> 00:07:25.626
And because of how nodes
require resolve method works,

103
00:07:25.626 --> 00:07:30.412
which by the way if you're interested,
there's a great

104
00:07:30.412 --> 00:07:35.498
There's a great page that like
in the anode documentation,

105
00:07:35.498 --> 00:07:42.790
it's called all together now I think,
Yeah, all together.

106
00:07:42.790 --> 00:07:47.502
So this is worth a read if you don't
understand how like importing modules

107
00:07:47.502 --> 00:07:48.330
works.

108
00:07:48.330 --> 00:07:52.421
It's worth a read there's a great
Great page here in the Node JS

109
00:07:52.421 --> 00:07:57.000
official docs that helps you
understand exactly how this works.

110
00:07:57.000 --> 00:08:01.662
And it will help you make
sense of why this works and

111
00:08:01.662 --> 00:08:07.101
why having a node modules folder
at the root of your project

112
00:08:07.101 --> 00:08:12.318
is sufficient in order to
help you understand why this,

113
00:08:12.318 --> 00:08:15.648
The sub project concept it works and

114
00:08:15.648 --> 00:08:19.870
it would work even before
yarn spaces was loud

