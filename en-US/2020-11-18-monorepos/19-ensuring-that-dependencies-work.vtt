WEBVTT

1
00:00:00.370 --> 00:00:05.108
So now it's time for
us to make sure that these new

2
00:00:05.108 --> 00:00:09.384
packages that we just
added to our project,

3
00:00:09.384 --> 00:00:15.180
they do the same things that we
have benefitted from so far.

4
00:00:15.180 --> 00:00:19.170
And you can see Like,
we've already talked about this stuff.

5
00:00:19.170 --> 00:00:22.780
So these are already set up with some
of the things we've done so far.

6
00:00:22.780 --> 00:00:25.230
They already know about scripting.

7
00:00:25.230 --> 00:00:27.387
Right?
They already take responsibility for

8
00:00:27.387 --> 00:00:31.424
their own clean Now,

9
00:00:31.424 --> 00:00:35.515
let's check this one just to make
sure everything is copacetic.

10
00:00:36.884 --> 00:00:38.090
Looks good.

11
00:00:38.090 --> 00:00:43.174
This one has different like an additional
script which is totally fine for

12
00:00:43.174 --> 00:00:44.160
it to do this.

13
00:00:45.580 --> 00:00:50.520
Cuz in the case of this UI, it has some
functionality that just doesn't apply to

14
00:00:50.520 --> 00:00:55.463
other things, right, starting up a local
web server like that doesn't really

15
00:00:55.463 --> 00:00:59.450
make so much sense in the context
of just type information.

16
00:00:59.450 --> 00:01:01.420
But here, it's great.

17
00:01:01.420 --> 00:01:05.150
All right, let's see if Yarn build works.

18
00:01:06.930 --> 00:01:10.590
Building the workspace everything
should have stuff in a dist folder.

19
00:01:10.590 --> 00:01:11.570
And in fact, we do.

20
00:01:12.830 --> 00:01:17.711
Now let's say let's try Yarn went

21
00:01:17.711 --> 00:01:22.592
starting with the types package,

22
00:01:22.592 --> 00:01:27.500
then utils, and then data.

23
00:01:27.500 --> 00:01:28.790
And then finally the UI.

24
00:01:28.790 --> 00:01:33.010
We didn't make it past data looks
like we have a problem here.

25
00:01:33.010 --> 00:01:34.590
What's the problem?

26
00:01:34.590 --> 00:01:36.310
I have a debugger somewhere.

27
00:01:36.310 --> 00:01:38.253
I should probably remove that.

28
00:01:40.640 --> 00:01:48.984
Good job linter Types he tells
again going from the bottom up

29
00:01:53.222 --> 00:01:55.430
Success across the board.

30
00:01:55.430 --> 00:02:00.410
Now, if I wanted to make that
run a little bit faster.

31
00:02:02.580 --> 00:02:04.280
All that have to do is go like this.

32
00:02:05.540 --> 00:02:06.370
Let's see what happens.

33
00:02:06.370 --> 00:02:11.080
So I basically this is how many
lanes I allow on the highway.

34
00:02:11.080 --> 00:02:12.310
When I only have one lane.

35
00:02:13.390 --> 00:02:16.570
The cars are ordered in
a way that makes sense.

36
00:02:16.570 --> 00:02:18.970
lowest level first and then building up.

37
00:02:18.970 --> 00:02:22.260
Here, up to four things can
happen at the same time.

38
00:02:22.260 --> 00:02:26.297
But if this works the way I suspect
it well, we're still going to have so

39
00:02:26.297 --> 00:02:31.033
it's like types in utils so I save this

40
00:02:36.792 --> 00:02:39.779
interesting, still seems pretty serial

41
00:02:45.216 --> 00:02:51.010
I know why it's serial This is a good
opportunity for me to talk about this.

42
00:02:51.010 --> 00:02:55.440
So we introduced a fake dependency.

43
00:02:55.440 --> 00:02:58.252
Right?
We said that I depend on types utils

44
00:02:58.252 --> 00:02:59.920
depends on types.

45
00:02:59.920 --> 00:03:01.500
We don't have a need for this anymore.

46
00:03:01.500 --> 00:03:05.694
We have some real examples in our
project now, so I can run yarn,

47
00:03:05.694 --> 00:03:08.190
I can learn a link I've removed that.

48
00:03:08.190 --> 00:03:15.250
So now like the way we had things
before it was types utils data UI.

49
00:03:15.250 --> 00:03:18.800
Now that we've removed that
interdependency of the two lowest layer,

50
00:03:18.800 --> 00:03:20.940
two lowest layers, it's types in utils.

51
00:03:20.940 --> 00:03:24.090
Together, then data then UI.

52
00:03:24.090 --> 00:03:25.159
Let's see if it makes a difference.

53
00:03:27.962 --> 00:03:28.710
See that?

54
00:03:28.710 --> 00:03:33.492
See how they're interleaved, utils and
types of going together first,

55
00:03:33.492 --> 00:03:37.340
and then data by itself,
and then the ui by itself.

56
00:03:37.340 --> 00:03:41.640
So we kind of sped our build up because
there's no reason why you can't do those

57
00:03:41.640 --> 00:03:43.310
two things together.

58
00:03:43.310 --> 00:03:45.450
For lint errors, this might be okay.

59
00:03:45.450 --> 00:03:50.016
Given that interleaved output,
I mean, for that kind of thing,

60
00:03:50.016 --> 00:03:53.100
I'm just kind of clicking on single lines.

61
00:03:53.100 --> 00:03:55.850
I don't really care where they
are as I address this stuff.

62
00:03:55.850 --> 00:03:59.667
Tests are a bit different cuz often
you have a folder of tests and

63
00:03:59.667 --> 00:04:02.910
then Some assertions and
if things get mixed up.

64
00:04:02.910 --> 00:04:07.620
Those lines of output don't
really stand on their own.

65
00:04:07.620 --> 00:04:09.216
And as many things get interleaved,

66
00:04:09.216 --> 00:04:12.680
it can get really confusing linting
I'm a little more tolerant of it.

67
00:04:12.680 --> 00:04:17.459
But there you go, you're seeing that
learner does a good job of figuring out

68
00:04:17.459 --> 00:04:19.399
the right order to do things and

69
00:04:19.399 --> 00:04:23.205
even though I allow up to 4 things
to happen at the same time,

70
00:04:23.205 --> 00:04:28.460
Our dependency graph of our own packages
doesn't really permit us to go up to four.

71
00:04:29.470 --> 00:04:35.520
It's just not we don't like at most.

72
00:04:35.520 --> 00:04:40.083
We have two things on a particular layer
and we build layer by layer by layer.

73
00:04:42.760 --> 00:04:46.878
Thank you start, hopefully you're starting
to see some of the value that a tool like

74
00:04:46.878 --> 00:04:48.740
this adds to your project.

75
00:04:48.740 --> 00:04:53.502
And it's important to understand also that
all the tools that are aiming to compete

76
00:04:53.502 --> 00:04:57.120
with lerna in this space,
they tend to aim to do the same thing.

77
00:04:57.120 --> 00:05:02.220
So if you're interested in
the rush stack from Microsoft or

78
00:05:02.220 --> 00:05:07.320
bolt is an up and coming yarn
like purely yarn based mono repo

79
00:05:07.320 --> 00:05:12.420
tool that is currently,
in progress and an early preview.

80
00:05:14.530 --> 00:05:16.860
They could be a drop in replacement.

81
00:05:16.860 --> 00:05:20.240
I mean not in terms of
the commands are exactly the same.

82
00:05:20.240 --> 00:05:22.460
I guess that's what a drop
in replacement would be.

83
00:05:22.460 --> 00:05:24.650
But they do equivalent work, right?

84
00:05:24.650 --> 00:05:29.185
They aim to make things like this
easy because this at a large scale,

85
00:05:29.185 --> 00:05:34.039
large number of packages, this kind
of stuff just gets to the point where

86
00:05:34.039 --> 00:05:37.859
even the most meticulous team
will often make mistakes in

87
00:05:37.859 --> 00:05:42.749
managing this stuff the right way,
building things in the right order.

88
00:05:43.810 --> 00:05:47.916
Write so that you don't have like,
This new package compiled but

89
00:05:47.916 --> 00:05:51.395
only with the stale out stale
old build from this old thing so

90
00:05:51.395 --> 00:05:54.690
everything looks good but
it's not really good.

91
00:05:54.690 --> 00:05:56.554
Like you don't want that you
want to build in this order.

