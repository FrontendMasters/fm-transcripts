WEBVTT

1
00:00:00.000 --> 00:00:04.887
We got a question in the class about how

2
00:00:04.887 --> 00:00:10.864
multiple teams may collaborate on a.

3
00:00:10.864 --> 00:00:14.780
And about how fixes work for example.

4
00:00:14.780 --> 00:00:20.360
So I think the base
fund compare these two.

5
00:00:20.360 --> 00:00:24.450
Lets just say client and server exist
as two packages In your mono repo,

6
00:00:24.450 --> 00:00:27.726
traditionally they'd be
independent projects right,

7
00:00:27.726 --> 00:00:33.280
the server would apply effects, the client
would start consuming it or vice versa.

8
00:00:33.280 --> 00:00:37.802
In a mono repo, you have the opportunity
to collaborate on a single branch,

9
00:00:37.802 --> 00:00:39.710
open up a single pull request and

10
00:00:39.710 --> 00:00:43.950
apply a single fix that touches
both packages the same time.

11
00:00:43.950 --> 00:00:48.596
You can validate you can actually have
tests before any part of the fix is

12
00:00:48.596 --> 00:00:49.740
merged.

13
00:00:49.740 --> 00:00:55.070
You can have tests that assert that
they prove the existence of the bug.

14
00:00:55.070 --> 00:00:59.662
And then they start working once the fix
is applied from one commit to the next

15
00:00:59.662 --> 00:01:02.690
which is a great way to have
a high quality bug fix.

16
00:01:04.240 --> 00:01:07.310
So I think that it's an even
better experience there.

17
00:01:07.310 --> 00:01:12.680
The one of the challenges when I think
about big teams working on mono repos.

18
00:01:15.150 --> 00:01:19.186
The big challenge that I see
there is organizational,

19
00:01:19.186 --> 00:01:23.923
where often you want an ownership model,
You would say, Okay,

20
00:01:23.923 --> 00:01:29.370
well, the DBA is they have,
they control the database schemas.

21
00:01:29.370 --> 00:01:31.040
And we have our back end experts.

22
00:01:31.040 --> 00:01:35.080
And they're doing the, you know,
the data science stuff or whatever it is.

23
00:01:35.080 --> 00:01:38.486
And then we have like
the application engineers, and

24
00:01:38.486 --> 00:01:43.329
they're doing the the REST API and
then the web developers doing the UI Right

25
00:01:43.329 --> 00:01:47.567
you want to have like code reviews
happening by the right people and

26
00:01:47.567 --> 00:01:50.150
accountability in place there.

27
00:01:50.150 --> 00:01:52.963
GitHub doesn't really provide
a whole lot like they're,

28
00:01:52.963 --> 00:01:56.520
they don't have that fine grained
sense of, you know, I own this folder.

29
00:01:56.520 --> 00:01:57.350
you own that folder.

30
00:01:57.350 --> 00:02:02.500
They have a concept of code owners, but
it's really a little bit too lightweight.

31
00:02:02.500 --> 00:02:07.150
For for this kind of thing, but
I see that as the big challenge and

32
00:02:07.150 --> 00:02:10.681
just remember that one of
the things you can do for

33
00:02:10.681 --> 00:02:16.107
a large team working on a mono repo,
like one of the best things you can do for

34
00:02:16.107 --> 00:02:20.480
a team in general is ensure
that they have the ability.

35
00:02:20.480 --> 00:02:22.740
To move independently, right?

36
00:02:22.740 --> 00:02:27.342
They are not held back and bottlenecked by
some platform like core team that's just

37
00:02:27.342 --> 00:02:30.270
making sure that everything
passes through them.

38
00:02:30.270 --> 00:02:34.800
So what I see a lot of people do is
they will have their packages.right?

39
00:02:34.800 --> 00:02:39.799
Like our four packages here, and then they
will add a fifth one that effectively is

40
00:02:39.799 --> 00:02:42.698
just; Some people call it
like a meta package or

41
00:02:42.698 --> 00:02:47.570
wrapping package that just serves to
sort of unify everything together.

42
00:02:47.570 --> 00:02:51.741
And so whenever anything changes
a new release of that thing that

43
00:02:51.741 --> 00:02:54.521
sort of the umbrella over the whole thing,

44
00:02:54.521 --> 00:02:58.720
actually i think some people
call it an umbrella package.

45
00:02:58.720 --> 00:03:03.318
But that will be what gets cut,
release gets cut that gets deployed or

46
00:03:03.318 --> 00:03:06.030
published to NPM or whatever it is.

47
00:03:06.030 --> 00:03:10.400
But this ensures that all you need to
worry about is your little sub part and

48
00:03:10.400 --> 00:03:14.740
no matter what, just because of
the way learn a publish works, right?

49
00:03:14.740 --> 00:03:17.370
It doesn't just look at what changed.

50
00:03:17.370 --> 00:03:21.350
It also releases things that
depend on what changed.

51
00:03:21.350 --> 00:03:25.662
If you have that umbrella project,
then, you know that can be sort of this

52
00:03:25.662 --> 00:03:29.490
automated unification where no
matter what changed into place,

53
00:03:29.490 --> 00:03:32.300
like everything kind of comes together.

54
00:03:32.300 --> 00:03:35.715
So you could have UI and
API on equal footing, and

55
00:03:35.715 --> 00:03:38.140
then the whole app as an umbrella.

56
00:03:39.140 --> 00:03:39.779
And you know,

57
00:03:39.779 --> 00:03:43.330
you could have one person make changes and
that'll trigger a release.

58
00:03:43.330 --> 00:03:46.760
And then someone changes the other side
and that would trigger another release.

59
00:03:46.760 --> 00:03:51.540
No one's everyone has the ability to just
sort of make a change, get an approval,

60
00:03:51.540 --> 00:03:56.251
send it out there, and then just make your
test suite good enough that you can have

61
00:03:56.251 --> 00:04:00.590
confidence around that model, which is
a easy thing to say or thing to do.

