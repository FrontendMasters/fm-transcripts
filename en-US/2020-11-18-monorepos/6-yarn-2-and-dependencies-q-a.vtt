WEBVTT

1
00:00:00.000 --> 00:00:08.110
We had some great questions in class that
I kind of want to recap a little bit here.

2
00:00:08.110 --> 00:00:12.440
In case you're watching this course and
you have the same questions.

3
00:00:12.440 --> 00:00:17.239
So the first one we got was about
having the correct version of yarn and

4
00:00:17.239 --> 00:00:21.706
a node part of what we installed and
we went through the readme and

5
00:00:21.706 --> 00:00:25.450
Follow the instructions there was,
we set up volta.

6
00:00:27.200 --> 00:00:35.410
So the point of volta is, it manages
the versions of things in your tool chain.

7
00:00:35.410 --> 00:00:38.319
So if we did volta pin node and

8
00:00:38.319 --> 00:00:43.049
yarn you can see that
we're getting you know,

9
00:00:43.049 --> 00:00:47.670
as of this moment This
is the latest LTS node.

10
00:00:49.500 --> 00:00:52.790
There's also a maintenance LTS,
which is node 10.

11
00:00:52.790 --> 00:00:53.380
Node.

12
00:00:53.380 --> 00:00:56.860
12 is also an LTS and
then we've got yarn one dot 22.

13
00:00:56.860 --> 00:00:59.650
And this is all stored
in your package JSON.

14
00:00:59.650 --> 00:01:02.968
So even if you're using,
let's say, node 14,

15
00:01:02.968 --> 00:01:05.680
In other places on your machine, right?

16
00:01:05.680 --> 00:01:08.549
Let's say that you have
that globally installed,

17
00:01:08.549 --> 00:01:11.980
you are kicking the tires at
the latest stable release.

18
00:01:11.980 --> 00:01:17.570
Well, if you use node from within
the project, you are always good.

19
00:01:17.570 --> 00:01:21.710
I think maybe we have to leave and
enter something.

20
00:01:21.710 --> 00:01:22.982
Let's try closing and reopening.

21
00:01:26.593 --> 00:01:30.130
Interesting, I kinda expected
to get the right node here.

22
00:01:41.330 --> 00:01:46.370
Well, I should be getting node 12 We
might be seeing a bug here, folks.

23
00:01:46.370 --> 00:01:53.598
I don't think it'll hold us back but,
Getting the correct yarn at least.

24
00:02:01.913 --> 00:02:06.370
I'm using node 1219.

25
00:02:06.370 --> 00:02:07.010
Am I though?

26
00:02:07.010 --> 00:02:11.150
I will get in touch with the volta team
and make sure that this all works out.

27
00:02:11.150 --> 00:02:15.664
But the the point of this is, you should
just have this in your package JSON and

28
00:02:15.664 --> 00:02:17.070
it should just work.

29
00:02:17.070 --> 00:02:20.190
Clearly there's some funky
stuff going on here.

30
00:02:20.190 --> 00:02:25.340
Again, I don't think we're sensitive to
any particular node version, right now.

31
00:02:25.340 --> 00:02:29.341
At the time of recording this course,
but this is more for those of you who

32
00:02:29.341 --> 00:02:33.667
are watching this a year from now, I want
to make sure that everything works for

33
00:02:33.667 --> 00:02:36.310
you and
that it will work by the time it matters.

34
00:02:37.840 --> 00:02:42.650
So that's number one,
node and yarn versions.

35
00:02:42.650 --> 00:02:48.806
The second question I got was, are we
going to be talking about yarn V2 So,

36
00:02:48.806 --> 00:02:55.220
yarn v2 is a total reimagining of
the way package management works.

37
00:02:55.220 --> 00:02:59.520
I liken the difference between yarn v1 and
v2.

38
00:02:59.520 --> 00:03:04.373
It's kind of like the difference
between Angular v1 and v2 in that,

39
00:03:04.373 --> 00:03:09.320
yep, you almost have to think of it
as a completely different project.

40
00:03:10.540 --> 00:03:16.720
It's not just a few changes, and
that's get rid of some tech that it is.

41
00:03:16.720 --> 00:03:17.760
It's a different thing.

42
00:03:19.400 --> 00:03:24.830
I don't know of any big companies
that currently use yarn v2.

43
00:03:24.830 --> 00:03:30.830
And this is because oftentimes a lot of
tooling has to be built on top of yarn.

44
00:03:31.960 --> 00:03:35.620
We're going to use Lerna later
today that's built on top of yarn.

45
00:03:35.620 --> 00:03:40.326
So all of these things will have
to change in non trivial ways in

46
00:03:40.326 --> 00:03:43.140
order to take advantage of yarn v2.

47
00:03:43.140 --> 00:03:47.750
So it's an interesting idea.

48
00:03:47.750 --> 00:03:49.430
It solves some problems.

49
00:03:49.430 --> 00:03:54.268
But it's gonna take a lot of work for
the ecosystem to catch up and

50
00:03:54.268 --> 00:03:56.428
for that to become the norm.

51
00:03:59.173 --> 00:04:00.809
Good questions.

52
00:04:02.810 --> 00:04:07.685
I have a follow up question and
I'm allowed to, my question has to do with

53
00:04:07.685 --> 00:04:12.485
just like right now we are configuring
just basically at the package level,

54
00:04:12.485 --> 00:04:15.410
is there merit to having
it at the root level and

55
00:04:15.410 --> 00:04:18.935
essentially just pointing just to like for
coverage and

56
00:04:18.935 --> 00:04:23.690
whatnot to like each package independently
Good question from the class.

57
00:04:23.690 --> 00:04:29.164
So, is there any difference to us
stating that Jest is a workspace

58
00:04:29.164 --> 00:04:34.150
level dependency kind of how
we treated Rim Wrath, right?

59
00:04:35.170 --> 00:04:39.430
Why are we putting Jest as
a package level dependency.

60
00:04:39.430 --> 00:04:40.720
Dev dependency at that matter.

61
00:04:42.560 --> 00:04:45.300
And why is rim ref at the workspace level?

62
00:04:45.300 --> 00:04:50.680
Well, for one,
one version of rim ref will do for me.

63
00:04:51.760 --> 00:04:53.580
I just want to get rid of some files.

64
00:04:53.580 --> 00:04:58.261
I'm invoking it as a CLA So
it may not seem the difference may not be

65
00:04:58.261 --> 00:05:02.280
apparent at the moment, but
I want you to imagine this.

66
00:05:04.880 --> 00:05:07.240
What if we had this?

67
00:05:07.240 --> 00:05:11.117
What if I use a slightly
different version of for

68
00:05:11.117 --> 00:05:16.068
one of my packages let's see what happens.

69
00:05:19.651 --> 00:05:21.320
We'll look at that.

70
00:05:21.320 --> 00:05:26.826
So, the fact that we have
a different version of jest for

71
00:05:26.826 --> 00:05:29.754
one package versus another,

72
00:05:29.754 --> 00:05:36.070
you can see that in my utils Package,
I still just have only a.

73
00:05:36.070 --> 00:05:40.550
bin sub folder in its local node modules.

74
00:05:40.550 --> 00:05:43.639
But up here in types
where I downgraded jest,

75
00:05:43.639 --> 00:05:49.530
right it was it was 26 ,5 now it's 24 and
I'm not letting it float up to.

76
00:05:49.530 --> 00:05:51.280
The latest version here.

77
00:05:51.280 --> 00:05:55.230
Now it gets its own local version of jest.

78
00:05:55.230 --> 00:06:00.304
And if you follow my advice and
you go to the Node JS documentation and

79
00:06:00.304 --> 00:06:05.912
go look at the require resolve docks,
the section that says all together,

80
00:06:05.912 --> 00:06:11.255
right, where it describes
the algorithm Basically when you say,

81
00:06:11.255 --> 00:06:17.690
require jest, well, the first place you're
gonna look is this local node modules.

82
00:06:17.690 --> 00:06:20.622
And if you find something that resolves,

83
00:06:20.622 --> 00:06:24.610
you will never bubble up
to this outer node modules.

84
00:06:24.610 --> 00:06:30.020
So this is the way that we can handle
having different versions of dependencies.

85
00:06:30.020 --> 00:06:37.670
For various packages and it will happen,
it will happen in an ideal world like it.

86
00:06:37.670 --> 00:06:39.270
One would hope it doesn't.

87
00:06:39.270 --> 00:06:40.220
But just imagine.

88
00:06:40.220 --> 00:06:46.980
All you have to do is imagine
an upgrade on a bunch of packages.

89
00:06:46.980 --> 00:06:50.040
That's just too big for one poll request.

90
00:06:51.250 --> 00:06:55.136
So if you have, imagine you have,
you know, 30 packages in here,

91
00:06:55.136 --> 00:06:59.893
and you're upgrading to a major release of
TypeScript, you're not going to want to

92
00:06:59.893 --> 00:07:03.580
try to do that in one shot, and
just bump everything up together.

93
00:07:03.580 --> 00:07:05.540
So you'll bump a few of them up.

94
00:07:05.540 --> 00:07:09.849
And then you'll be at this in between spot
and then you'll finish your work, but for

95
00:07:09.849 --> 00:07:13.690
that in between time You're gonna have
some of these like local versions.

96
00:07:15.930 --> 00:07:20.626
So that's why we allow some of these
things to be dead dependencies on a pro

97
00:07:20.626 --> 00:07:26.146
package level where as other things they
can operate at the work space level.

98
00:07:26.146 --> 00:07:29.860
All it is,
it's a platform in the platform way.

99
00:07:32.140 --> 00:07:36.400
To say RM dash RF,
it's never going to be anything else.

100
00:07:36.400 --> 00:07:40.250
It's very,
very stable in terms of an API surface.

101
00:07:40.250 --> 00:07:45.160
There's no one's gonna revolutionize
what rm rf means, right?

102
00:07:45.160 --> 00:07:47.960
You just pass it some files to delete and
you're done.

103
00:07:47.960 --> 00:07:49.331
So, in that sense,

104
00:07:49.331 --> 00:07:53.780
I don't need each package to have
its own version of of rim graph.

105
00:07:55.180 --> 00:08:00.480
Recorded that answer your
question.&gt;&gt; It did thank you.

106
00:08:00.480 --> 00:08:01.680
&gt;&gt; Fantastic.

107
00:08:01.680 --> 00:08:03.210
Very good question to have.

108
00:08:03.210 --> 00:08:04.790
And same with the Babel plugins.

109
00:08:04.790 --> 00:08:07.304
By the way,
those are things that just inherently,

110
00:08:07.304 --> 00:08:10.110
some of them are gonna float forward and
flow backward.

111
00:08:10.110 --> 00:08:14.910
I might not need TypeScript in some
places, I might have react in some places.

112
00:08:14.910 --> 00:08:20.026
So it's important to be able to, To have
these little knobs that you can turn,

113
00:08:20.026 --> 00:08:22.517
and it matters most around upgrades.

