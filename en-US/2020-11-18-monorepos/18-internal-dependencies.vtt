WEBVTT

1
00:00:00.440 --> 00:00:03.920
Let me recap where we
left things off just now.

2
00:00:05.850 --> 00:00:09.003
We saw that through using learner and

3
00:00:09.003 --> 00:00:14.191
automated automated change logs,
we're able to focus only

4
00:00:14.191 --> 00:00:19.290
on the specific effect that
a given code change would have.

5
00:00:21.020 --> 00:00:22.710
Like, is this a fix?

6
00:00:22.710 --> 00:00:23.830
Is this a feature?

7
00:00:23.830 --> 00:00:25.320
Is this a breaking change?

8
00:00:25.320 --> 00:00:30.260
And then all of these numbers are of
the release numbers and all the change,

9
00:00:30.260 --> 00:00:34.720
change log stuff is calculated for
us automatically.

10
00:00:34.720 --> 00:00:39.060
And let me just run,
yarn real quick to clear things out.

11
00:00:39.060 --> 00:00:41.640
Get us back to a good state here.

12
00:00:44.320 --> 00:00:45.650
Let me refresh.

13
00:00:45.650 --> 00:00:46.590
Good.

14
00:00:46.590 --> 00:00:52.040
Okay, so we're about to begin,
Step nine here.

15
00:00:52.040 --> 00:00:57.019
So you're going to see two little
folders within like the course files and

16
00:00:57.019 --> 00:01:02.610
you know some folder number nine One is
called data and one one is called UI.

17
00:01:02.610 --> 00:01:04.100
Data is our data layer.

18
00:01:04.100 --> 00:01:12.100
So that deals with making like fetches
to a locally running little JSON API.

19
00:01:12.100 --> 00:01:14.710
And then this UI is a react app.

20
00:01:14.710 --> 00:01:17.029
So in here you can see some TSX files.

21
00:01:18.480 --> 00:01:22.526
And there's even a little server folder
with like a tiny little express server

22
00:01:22.526 --> 00:01:25.527
that's running and
it's serving up these Jayson thing so

23
00:01:25.527 --> 00:01:28.020
everything is running locally.

24
00:01:28.020 --> 00:01:31.737
I leave as an exercise to
you if you want to take this

25
00:01:31.737 --> 00:01:36.075
workshop project a little bit
further This server concern

26
00:01:36.075 --> 00:01:41.540
is kind of begging to become its
own package within the mono repo.

27
00:01:41.540 --> 00:01:46.800
So you could either have the server,
consume the UI, and build it as part

28
00:01:46.800 --> 00:01:52.900
of the startup process, and then serve
up the UI and the API that goes with it.

29
00:01:52.900 --> 00:01:57.859
Or you could say, All right,
this UI has an asset serving layer, and

30
00:01:57.859 --> 00:01:59.400
my JSON back end.

31
00:01:59.400 --> 00:02:01.990
It's just a middleware for
my asset serving layer.

32
00:02:01.990 --> 00:02:03.930
You could do it either of those two ways.

33
00:02:03.930 --> 00:02:07.873
But this makes perfect sense to separate,
because you could imagine,

34
00:02:07.873 --> 00:02:10.620
maybe you just want to stand up the API.

35
00:02:10.620 --> 00:02:11.710
Maybe you don't need the UI.

36
00:02:11.710 --> 00:02:14.000
Maybe you have an iOS or an Android app.

37
00:02:14.000 --> 00:02:16.779
That hits this API and
it needs to use this, but

38
00:02:16.779 --> 00:02:20.420
doesn't need all the React
stuff in there as well.

39
00:02:20.420 --> 00:02:25.246
So you could see how having these little
composable building blocks allows your

40
00:02:25.246 --> 00:02:27.780
your system to be more flexible, right?

41
00:02:27.780 --> 00:02:29.940
We always draw these
systems on whiteboards.

42
00:02:29.940 --> 00:02:33.780
And as we're building these things,
evolve these independent little boxes.

43
00:02:33.780 --> 00:02:37.180
Well now they each have
an encapsulation boundary around them.

44
00:02:37.180 --> 00:02:41.609
They're each independently tested and
each independently versioned but

45
00:02:41.609 --> 00:02:45.480
with none of the burden of them
each being a separate repository.

46
00:02:46.640 --> 00:02:49.320
So, let's get started with this next step.

47
00:02:49.320 --> 00:02:55.590
We're going to sorry, I just need
to blow some extra stuff away here.

48
00:02:55.590 --> 00:02:57.110
You would not have seen these here yet.

49
00:02:57.110 --> 00:03:03.240
Just because that stuff that's not
checked in to get so No code changes.

50
00:03:03.240 --> 00:03:07.820
We're on the ready to
begin Step nine here.

51
00:03:07.820 --> 00:03:10.123
So I'm just going to grab these,
copy them and

52
00:03:10.123 --> 00:03:12.870
then paste them right
into my packages folder.

53
00:03:12.870 --> 00:03:15.810
So now we have four things in here.

54
00:03:15.810 --> 00:03:17.040
One from two to four.

55
00:03:18.230 --> 00:03:21.233
We're going to need to
modify one file here and

56
00:03:21.233 --> 00:03:25.160
it's the TS config inside
your packages folder.

57
00:03:25.160 --> 00:03:27.670
This remember is what we're using.

58
00:03:27.670 --> 00:03:33.350
So we can say TSC build
Everything in packages, right?

59
00:03:33.350 --> 00:03:38.050
This is what refers to each of
those little like each package.

60
00:03:38.050 --> 00:03:43.495
And it's what led us have these
this nice composite Project Setup

61
00:03:43.495 --> 00:03:48.870
where we have this Ts config build info,
right and so on.

62
00:03:48.870 --> 00:03:52.690
As these things stack up,
everything just has its own dist folder,

63
00:03:52.690 --> 00:03:54.780
and projects that depend on things.

64
00:03:54.780 --> 00:03:57.162
They just need to look at
the right dist folder,

65
00:03:57.162 --> 00:04:00.150
they don't need to make an entirely
new build of their own.

66
00:04:01.310 --> 00:04:04.300
really save some time as
things gets get complicated.

67
00:04:05.660 --> 00:04:08.620
So, let's modify that file here.

68
00:04:08.620 --> 00:04:09.770
And it's pretty predictable.

69
00:04:09.770 --> 00:04:10.730
What we're gonna need to do.

70
00:04:11.760 --> 00:04:17.225
Select this and just create two more with
a comma because that's how JSON works.

71
00:04:17.225 --> 00:04:22.950
And this will be data and this will
be UI the ordering does not matter.

72
00:04:24.855 --> 00:04:28.335
Just need to refer to each and that is it.

73
00:04:28.335 --> 00:04:34.795
So now In addition,
we drop these folders in.

74
00:04:34.795 --> 00:04:36.695
They each have a package JSON.

75
00:04:36.695 --> 00:04:39.611
And I noticed that there are things in
here that were not part of our project

76
00:04:39.611 --> 00:04:42.010
before, we're going to need to run yarn.

77
00:04:42.010 --> 00:04:46.054
Right to pull in any of those
dependencies, remember with yarn

78
00:04:46.054 --> 00:04:50.950
workspaces, the package JSON files
of each package in the workspace.

79
00:04:50.950 --> 00:04:55.288
They're taking into account so we're
gonna go and we're gonna obtain react and

80
00:04:55.288 --> 00:04:59.750
react router and all the other things
here all this type information.

81
00:04:59.750 --> 00:05:02.630
Right, that gives us
those nice autocompletes.

82
00:05:02.630 --> 00:05:07.429
This one's gonna take a little while
because this, react app has a lot more

83
00:05:07.429 --> 00:05:12.930
going on in it compared to just these sort
of low level, utility style dependencies.

84
00:05:14.610 --> 00:05:15.840
And we are done.

85
00:05:15.840 --> 00:05:18.360
Let's see if the build works.

86
00:05:18.360 --> 00:05:20.030
Yarn built.

87
00:05:22.630 --> 00:05:25.130
So in this case, it's going to work.

88
00:05:26.750 --> 00:05:30.050
Now, it may just happen to work.

89
00:05:32.190 --> 00:05:37.383
And I say it may happen to work because
we have things like we're effectively

90
00:05:37.383 --> 00:05:42.710
referring to things that happened to
be present in our node modules folder.

91
00:05:42.710 --> 00:05:45.260
This, in this case,
the workspace level one.

92
00:05:45.260 --> 00:05:49.530
But we're not stating that we have
a dependency on those things.

93
00:05:49.530 --> 00:05:51.320
This is bad.

94
00:05:51.320 --> 00:05:55.560
This is bad because when a user
installs this package, right,

95
00:05:55.560 --> 00:06:00.780
we're going to need to resolve
this thing and we may not have it.

96
00:06:00.780 --> 00:06:03.210
The user may not have it
in their node modules.

97
00:06:03.210 --> 00:06:07.280
We're not stating that this needs
to be downloaded and set up.

98
00:06:07.280 --> 00:06:10.620
This is a common mistake
that that people make.

99
00:06:10.620 --> 00:06:15.640
Usually not having to do with a mono
repo but transitive dependencies, right?

100
00:06:15.640 --> 00:06:19.680
So you might import something from
a dependency of your dependency.

101
00:06:19.680 --> 00:06:24.866
Well what happens if that changes like
you thought lodash was gonna be brought

102
00:06:24.866 --> 00:06:30.510
into your project by express what
happens if expressed up to using lodash.

103
00:06:30.510 --> 00:06:33.470
That thing kind of just disappears.

104
00:06:33.470 --> 00:06:37.282
Probably not lodash because so many things
use it, but things can just vanish, and

105
00:06:37.282 --> 00:06:39.690
your app will break and
it'll be really confusing.

106
00:06:39.690 --> 00:06:40.230
Why?

107
00:06:40.230 --> 00:06:42.405
Because maybe just your
lock file change but

108
00:06:42.405 --> 00:06:46.360
not in a way that makes it super obvious
that this thing went from present.

109
00:06:46.360 --> 00:06:47.190
Missing.

110
00:06:47.190 --> 00:06:49.340
So good rule of thumb.

111
00:06:49.340 --> 00:06:53.376
Everything you pull in from
code that runs at runtime

112
00:06:53.376 --> 00:06:58.200
should be listed as a dependency,
not a dev dependency.

113
00:06:58.200 --> 00:07:02.360
So here we got to make sure that
this stuff is added properly.

114
00:07:02.360 --> 00:07:04.850
We can use learner to do this, right.

115
00:07:04.850 --> 00:07:08.830
So we want these two new things
that we just added to our packages.

116
00:07:08.830 --> 00:07:15.760
The UI and data layer, they should
each depend on types and utils.

117
00:07:15.760 --> 00:07:16.928
Here's how we make that happen.

118
00:07:16.928 --> 00:07:20.740
lerna add slack types, and

119
00:07:20.740 --> 00:07:26.420
then we can provide a scope argument.

120
00:07:26.420 --> 00:07:27.200
This scope.

121
00:07:28.540 --> 00:07:30.070
Sorry, it's like an option.

122
00:07:30.070 --> 00:07:33.450
This scope option can be used with a.

123
00:07:33.450 --> 00:07:36.980
Wide range of learner sub commands.

124
00:07:36.980 --> 00:07:41.590
And this is where we can control
where this command is applied.

125
00:07:41.590 --> 00:07:46.675
So we have all ready done
things like learn a run test,

126
00:07:46.675 --> 00:07:49.390
and it runs all of the tests.

127
00:07:49.390 --> 00:07:52.633
But if you just wanted to run
them on one or two packages,

128
00:07:52.633 --> 00:07:56.350
you could scope it down and
you could say only on types.

129
00:07:56.350 --> 00:07:57.850
Just run the tests there.

130
00:07:57.850 --> 00:08:03.040
So this is sort of a general purpose thing
that broadly applies across learner.

131
00:08:03.040 --> 00:08:07.720
Not every command but
the most common ones.

132
00:08:09.730 --> 00:08:17.230
And we can use this syntax here, slacks
and then we could say UI common data.

133
00:08:17.230 --> 00:08:21.999
This is you might look at this as
the familiar kind of syntax you use

134
00:08:21.999 --> 00:08:24.253
maybe an es lint config to say,

135
00:08:24.253 --> 00:08:29.750
Yeah everything in this folder that's
a Ts or TSX file or js and a JSX.

136
00:08:29.750 --> 00:08:32.190
You'd have like multiple extensions.

137
00:08:32.190 --> 00:08:36.791
It's kind of like a regular expression,
or just like anything from this set.

138
00:08:41.562 --> 00:08:44.510
And let's see,
no packages where types can be added.

139
00:08:47.890 --> 00:08:51.053
Let me make sure that
we're all synched up,

140
00:08:51.053 --> 00:08:55.150
that we don't have
anything lingering around.

141
00:08:55.150 --> 00:08:56.310
Maybe it's already applied.

142
00:08:56.310 --> 00:08:59.062
Let's check it out.

143
00:09:02.129 --> 00:09:07.992
Interesting, A bit of a spelling error.

144
00:09:11.701 --> 00:09:14.350
I tried this and it failed.

145
00:09:14.350 --> 00:09:16.880
I put quotes around it and it worked.

146
00:09:16.880 --> 00:09:21.989
What's happening here is zsh
Is interpreting some of this

147
00:09:21.989 --> 00:09:28.020
as special syntax that I'm using
to do the SH stuff in my shell.

148
00:09:28.020 --> 00:09:30.570
I just want to pass this as a string,
right?

149
00:09:30.570 --> 00:09:33.820
So the argument wasn't
reaching learner intact.

150
00:09:33.820 --> 00:09:36.660
So I had to say, put quotes around it,
and then it worked.

151
00:09:38.370 --> 00:09:42.110
All right, let's try Adding utils.

152
00:09:47.300 --> 00:09:51.999
So if we look at the package JSON here,
we can see this is for the UI package,

153
00:09:51.999 --> 00:09:55.010
we can see that we've got types and utils.

154
00:09:55.010 --> 00:09:58.715
And if we look at the local node modules,
if I refresh,

155
00:09:58.715 --> 00:10:01.200
tell VS code take another look.

156
00:10:01.200 --> 00:10:01.700
Come on.

157
00:10:04.081 --> 00:10:05.750
Maybe I need to learn a link.

158
00:10:05.750 --> 00:10:06.980
That's probably what has to happen.

159
00:10:11.787 --> 00:10:13.100
Yep.

160
00:10:13.100 --> 00:10:17.530
And there it is a local
version of types and utils.

161
00:10:17.530 --> 00:10:22.738
So if I were to drill into here and
change stuff I could you know,

162
00:10:22.738 --> 00:10:29.070
this is just a reference to the,
to my source code to my own source code.

163
00:10:29.070 --> 00:10:32.945
But if I were, you know,
using node mon or something and

164
00:10:32.945 --> 00:10:38.058
I just wanted to watch my node modules
folder for any changes These would be

165
00:10:38.058 --> 00:10:43.092
picked up,you know because of their
location,cool.So through using

166
00:10:43.092 --> 00:10:48.124
Lerna we have added those dependencies
now have one more.Well,we've

167
00:10:48.124 --> 00:10:53.160
specified interdependencies amongst
a set of packages,right?It's

168
00:10:53.160 --> 00:10:57.364
not just adding a dependency one
more I have to worry about and

169
00:10:57.364 --> 00:11:01.200
that is I need data to be
a dependency of the UI, right?

170
00:11:01.200 --> 00:11:03.930
The UI makes requests.

171
00:11:03.930 --> 00:11:05.550
That all happens in the data layer.

172
00:11:06.670 --> 00:11:07.330
And there you go.

173
00:11:08.870 --> 00:11:12.750
So we've kind of got like
the UI on the top data, and

174
00:11:12.750 --> 00:11:16.555
then types in utils below
that nice little stack.

175
00:11:19.561 --> 00:11:23.866
And I'll do learn a link one
more time just to make sure

176
00:11:23.866 --> 00:11:27.700
that the data folder ends
up where it should be.

177
00:11:27.700 --> 00:11:35.420
It should be in here and
let's see if it is There it is.

178
00:11:35.420 --> 00:11:37.220
data types and utils.

179
00:11:37.220 --> 00:11:40.220
Let's just check another one to
make sure we're looking good.

180
00:11:41.220 --> 00:11:43.280
Just types new tells.

181
00:11:43.280 --> 00:11:44.530
Seems good.

182
00:11:44.530 --> 00:11:45.155
Seems good.

