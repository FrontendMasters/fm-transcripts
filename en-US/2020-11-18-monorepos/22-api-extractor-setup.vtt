WEBVTT

1
00:00:00.480 --> 00:00:04.811
What we're going to do next
is a two step process for

2
00:00:04.811 --> 00:00:10.070
having an excellent documentation for
this monorepo.

3
00:00:10.070 --> 00:00:13.588
Now, as you start building
software that's more and

4
00:00:13.588 --> 00:00:18.132
more complicated apps that
are more complicated It starts to.

5
00:00:18.132 --> 00:00:26.070
It starts to become important to have
documentation even for the app itself.

6
00:00:26.070 --> 00:00:28.398
Right?
You have a team of like 15 or

7
00:00:28.398 --> 00:00:33.475
20 people having Good API Doc's is
an important way that you can share

8
00:00:33.475 --> 00:00:39.100
share information in a situation where
nobody is an expert in everything.

9
00:00:39.100 --> 00:00:40.740
And you don't want to have to go.

10
00:00:40.740 --> 00:00:42.038
You know, ask somebody and

11
00:00:42.038 --> 00:00:46.330
have them explain it to you like it's
a very expensive way to pass information.

12
00:00:46.330 --> 00:00:50.320
And it's lossy because they might
not be available or they might.

13
00:00:50.320 --> 00:00:53.520
Give you a short and quick and
then complete explanation.

14
00:00:53.520 --> 00:00:57.020
So, API Doc's are not just for libraries.

15
00:00:57.020 --> 00:00:59.480
And I'm going to show you a way
that you can set this up.

16
00:00:59.480 --> 00:01:02.530
such that if you just
document your code Well,

17
00:01:02.530 --> 00:01:07.378
in a way that will pull just you're
already going to be motivated by having

18
00:01:07.378 --> 00:01:11.630
good tooltips right and
having good autocompletes.

19
00:01:11.630 --> 00:01:17.245
If you document your code well, such that
you have a good developer experience,

20
00:01:17.245 --> 00:01:21.460
you're going to get some
great extra stuff for free.

21
00:01:21.460 --> 00:01:25.710
In particular,
we're going to have an API report.

22
00:01:25.710 --> 00:01:30.890
So we can understand how
a given proposed code changes.

23
00:01:32.160 --> 00:01:38.270
Has an effect on the public API surface of
any one of these little modules, right?

24
00:01:38.270 --> 00:01:44.350
If you treated them as libraries,
you want types and data, and utils.

25
00:01:44.350 --> 00:01:48.700
At the very least, these three,
you want those to be relatively stable.

26
00:01:49.860 --> 00:01:54.690
Especially like in a situation where If
you do what I'm suggesting you can do, and

27
00:01:54.690 --> 00:01:58.330
kind of mix and match these
potentially you have a mobile app or

28
00:01:58.330 --> 00:02:02.100
you have a desktop app in
addition to the web experience.

29
00:02:02.100 --> 00:02:05.987
As soon as you have multiple consumers
having a stable way to talk to them is of

30
00:02:05.987 --> 00:02:08.020
critical importance.

31
00:02:08.020 --> 00:02:11.772
So we're gonna build that API report so
that you can understand for

32
00:02:11.772 --> 00:02:14.890
a given change,
how will this affect my API?

33
00:02:14.890 --> 00:02:19.690
The second thing we're gonna do is use
that same information to provide some

34
00:02:19.690 --> 00:02:23.600
turn key documentation that
works beautifully with GitHub.

35
00:02:25.100 --> 00:02:25.660
So here we go.

36
00:02:27.410 --> 00:02:31.610
The first thing we're gonna do is
install a couple of new packages.

37
00:02:31.610 --> 00:02:38.000
And those are called API extractor and
API documenter.

38
00:02:38.000 --> 00:02:40.820
Actually, let's just do
API extractor first.

39
00:02:40.820 --> 00:02:44.610
Now this is a so workspace wide tool.

40
00:02:45.620 --> 00:02:48.328
And so we're just going to install
it as a workspace dependency.

41
00:02:48.328 --> 00:02:56.040
Microsoft API extractor,

42
00:03:01.730 --> 00:03:08.330
So the next thing we're gonna do is
we're gonna say yarn api-extractor init.

43
00:03:08.330 --> 00:03:13.023
And that will create
a baseline config file for us.

44
00:03:17.320 --> 00:03:21.060
And we're gonna rename that config
file soon as it's generated.

45
00:03:21.060 --> 00:03:23.430
So it's API extractor js.

46
00:03:23.430 --> 00:03:30.020
This is going to be again, a common
file that other packages extend from.

47
00:03:32.980 --> 00:03:38.189
And I'm gonna leave it at the root
of the project here, cuz actually,

48
00:03:38.189 --> 00:03:44.120
I don't think we need to in this case
Let's move it into the packages folder.

49
00:03:44.120 --> 00:03:47.280
That's where I like to
keep the sort of base.

50
00:03:47.280 --> 00:03:55.000
And we're going to API extractor base.

51
00:03:55.000 --> 00:03:59.950
This is not to be used directly
baseline configuration.

52
00:03:59.950 --> 00:04:01.130
I'm going to save that.

53
00:04:01.130 --> 00:04:03.730
And then I'm going to go
into our course files.

54
00:04:03.730 --> 00:04:10.380
And in Section 11 API report,
there is another API extractor base.

55
00:04:10.380 --> 00:04:12.200
So I'm going to go get add.

56
00:04:12.200 --> 00:04:17.170
And then I'm going to copy the contents
of this file into the new one we just

57
00:04:17.170 --> 00:04:18.320
created.

58
00:04:18.320 --> 00:04:19.820
Why am I doing this?

59
00:04:19.820 --> 00:04:22.320
I want to show you what I've changed.

60
00:04:22.320 --> 00:04:26.930
And now we can see in the gutter here, all
of the things that have sort of flipped.

61
00:04:28.310 --> 00:04:32.206
So, starting from the top, I have,

62
00:04:32.206 --> 00:04:39.390
let's see was this enabled by default
Looks like I have enabled it.

63
00:04:43.350 --> 00:04:49.350
So this creates a JSON file
that can be used later.

64
00:04:49.350 --> 00:04:51.250
To generate API documentation.

65
00:04:51.250 --> 00:04:54.030
We know we're going to do this so
we may as well enable it now.

66
00:04:55.080 --> 00:04:58.230
And we're placing this
file in a particular path.

67
00:04:58.230 --> 00:04:59.950
There's going to be this temp folder.

68
00:04:59.950 --> 00:05:02.750
You don't have this yet,
because it's get ignored.

69
00:05:02.750 --> 00:05:05.526
And I still have mine here, but
I can point to it thankfully,

70
00:05:05.526 --> 00:05:07.540
because it's still here.

71
00:05:07.540 --> 00:05:12.820
So this project folder is going to be
one of the packages in your mono repo.

72
00:05:12.820 --> 00:05:18.580
So we're going to go one directory up,
packages, one directory up to the root.

73
00:05:18.580 --> 00:05:20.540
And then into the temp folder.

74
00:05:20.540 --> 00:05:22.024
And then finally,

75
00:05:22.024 --> 00:05:27.810
we're creating a JSON file that has
the package name in the filename.

76
00:05:27.810 --> 00:05:31.590
So what we should end up with is this,
four files,

77
00:05:31.590 --> 00:05:36.369
each representing docs for
one package within your monorepo.

78
00:05:38.633 --> 00:05:43.370
We're going to enable this
feature called a dtsRollup.

79
00:05:43.370 --> 00:05:51.610
So what this allows you to do is define
on a per export basis, what is public?

80
00:05:51.610 --> 00:05:56.369
What is internal only you may expose
things through your modules that

81
00:05:56.369 --> 00:06:00.160
are strictly available for
testing purposes.

82
00:06:00.160 --> 00:06:02.390
You just need to unit test a function.

83
00:06:02.390 --> 00:06:04.480
You have to expose that function.

84
00:06:04.480 --> 00:06:05.970
But you can mark it.

85
00:06:05.970 --> 00:06:09.330
As you know, this is just for
internal use.

86
00:06:09.330 --> 00:06:13.190
API extractor supports
the concept of betas.

87
00:06:13.190 --> 00:06:16.063
So you can have several
of these DTS roll ups,

88
00:06:16.063 --> 00:06:21.450
each of which includes complete
type information for your project.

89
00:06:21.450 --> 00:06:25.676
And one's for the stable release,
one's for the beta, and then one is

90
00:06:25.676 --> 00:06:30.630
an untrimmed roll up that contains
all of your internal types as well.

91
00:06:30.630 --> 00:06:32.505
And depending on what your purposes,

92
00:06:32.505 --> 00:06:35.580
there's there may be a good
reason to use each of them.

93
00:06:35.580 --> 00:06:40.245
For example, In some cases,
packages within your mono repo

94
00:06:40.245 --> 00:06:44.920
may communicate with each other
through non public API's.

95
00:06:46.960 --> 00:06:52.128
Right So, they may change and you may
not call that a breaking change because

96
00:06:52.128 --> 00:06:56.999
these things are only supposed to
talk to each other Through that path.

97
00:06:58.502 --> 00:07:00.860
So we're going to enable
these DTS roll ups.

98
00:07:00.860 --> 00:07:04.025
It's a great way to be more deliberate and

99
00:07:04.025 --> 00:07:09.380
explicit about the type of
information you expose to your users.

100
00:07:09.380 --> 00:07:10.669
And for that matter,

101
00:07:10.669 --> 00:07:16.220
it also allows you to have a concept that
other languages call package, private.

102
00:07:16.220 --> 00:07:20.825
So, Java allows this, where you can say,
I'm creating a package

103
00:07:20.825 --> 00:07:25.846
called com.fernenmasters.shclack and
anything within this package

104
00:07:25.846 --> 00:07:31.160
can access these fields on the class but
nothing outside of the package.

105
00:07:31.160 --> 00:07:33.290
We don't have that concept
in the Java script world.

106
00:07:33.290 --> 00:07:34.670
Right?

107
00:07:34.670 --> 00:07:36.240
You're either in the module or you're not.

108
00:07:37.330 --> 00:07:43.524
And so this Enables that concept and
there's a good rationale for

109
00:07:43.524 --> 00:07:47.250
why that exists and it's a useful one.

110
00:07:47.250 --> 00:07:51.730
And in addition to this,
I'm also just stating

111
00:07:51.730 --> 00:07:56.110
where various DTS roll
ups should be placed.

112
00:07:56.110 --> 00:07:59.620
They're going to be placed in
each packages dist folder.

113
00:07:59.620 --> 00:08:04.502
Alongside the original output, and we're
just going to modify the package JSON

114
00:08:04.502 --> 00:08:09.167
of each package so that it's pointing to
these roll ups instead of pointing to

115
00:08:09.167 --> 00:08:13.220
the raw type information that comes
straight out of the compiler.

116
00:08:14.350 --> 00:08:18.880
So we've got one for our untrimmed file
path and I'm calling this private.

117
00:08:18.880 --> 00:08:19.880
We've got a beta.

118
00:08:20.920 --> 00:08:24.360
And then we've got one with no
qualifier at the end, right.

119
00:08:24.360 --> 00:08:27.140
And this is the public stable API.

120
00:08:27.140 --> 00:08:32.257
This is what if you change this
in a backwards incompatible way,

121
00:08:32.257 --> 00:08:36.616
this is where you should be
major versioning That is all

122
00:08:36.616 --> 00:08:40.470
I've changed the other
things you can do here.

123
00:08:40.470 --> 00:08:43.500
So this behaves kind of like a linter,
as we'll see.

124
00:08:43.500 --> 00:08:47.893
And this allows you to do things like
configure whether things are treated as

125
00:08:47.893 --> 00:08:52.697
warnings or errors, whether they're
surfaced in the console, or they're added

126
00:08:52.697 --> 00:08:57.110
to this API report file where you'll
just see notes like this was a problem.

127
00:08:57.110 --> 00:08:58.580
I found here.

128
00:08:58.580 --> 00:09:02.620
You have a lot of different
knobs you can turn here.

129
00:09:04.090 --> 00:09:08.230
And these each represent a rule of sorts.

130
00:09:10.110 --> 00:09:14.961
So let's keep keep on going here.

131
00:09:18.171 --> 00:09:22.550
I need to create I'm going to go
back up into our starter files here.

132
00:09:23.810 --> 00:09:27.620
So I have a folder here that's
like packages slash pkg.

133
00:09:27.620 --> 00:09:31.190
And then this API extractor JSON thing.

134
00:09:31.190 --> 00:09:34.725
Just copy this into the root of
every one of your packages didn't

135
00:09:34.725 --> 00:09:38.310
want to give you four because
it's the exact same file.

136
00:09:38.310 --> 00:09:40.130
You're just going to put it in each.

137
00:09:40.130 --> 00:09:46.353
123 and

138
00:09:46.353 --> 00:09:49.120
4.

139
00:09:49.120 --> 00:09:55.543
Again, this follows this time, Convention,
have one meaningful confide file,

140
00:09:55.543 --> 00:10:00.435
and then these really thin
ones that I'll extend from it.

141
00:10:00.435 --> 00:10:04.845
So if we want to change options, we're
changing things on the whole project.

142
00:10:06.585 --> 00:10:09.057
By default, at least, of course,
you could go in here and

143
00:10:09.057 --> 00:10:10.895
you could make little adjustments.

144
00:10:10.895 --> 00:10:13.565
But I don't want to have
to do that by default.

145
00:10:13.565 --> 00:10:17.527
I want as much consolidation as I can have
because I If you're bothering to make

146
00:10:17.527 --> 00:10:21.220
a mono repo, you're gonna end up
with a lot of packages in here.

147
00:10:21.220 --> 00:10:25.250
And you just want to think about
the per package maintenance overhead.

148
00:10:25.250 --> 00:10:29.531
You don't want that number to be high
because there's a big coefficient

149
00:10:29.531 --> 00:10:30.800
next to it.

150
00:10:30.800 --> 00:10:31.450
Right?

151
00:10:31.450 --> 00:10:33.987
So if it's like takes
an hour of my time a week,

152
00:10:33.987 --> 00:10:38.085
and there are 50 packages, well,
that just became your full time job and

153
00:10:38.085 --> 00:10:41.430
then a little bit You know,
you can't you can't have that.

154
00:10:41.430 --> 00:10:45.050
So you want that number to be really
small per package maintenance.

