WEBVTT

1
00:00:00.630 --> 00:00:02.260
So there we go.

2
00:00:02.260 --> 00:00:06.220
Now we've arrived at something I
promised that we would arrive at.

3
00:00:06.220 --> 00:00:10.210
We have an app, and it looked like we
were building a family of libraries.

4
00:00:10.210 --> 00:00:13.060
But really, we were building
our way up to an application.

5
00:00:13.060 --> 00:00:17.512
And the benefit is, instead of these
concerns like utilities type information

6
00:00:17.512 --> 00:00:21.832
or data layer, possibly a server if you
choose to take this one step further If

7
00:00:21.832 --> 00:00:25.022
all of those,
if we weren't working with the mono repo,

8
00:00:25.022 --> 00:00:28.478
we just have kind of a big pile of code,
maybe folders as well,

9
00:00:28.478 --> 00:00:32.862
where we could sort of like just dot,
dot, dot, dot, you know, reach out and

10
00:00:32.862 --> 00:00:37.820
into another folder, we wouldn't have
these nice encapsulation boundaries.

11
00:00:37.820 --> 00:00:42.030
We wouldn't have the ability
to maybe like a b test.

12
00:00:42.030 --> 00:00:45.380
Maybe we choose to write a folder
like a server a different way, right?

13
00:00:45.380 --> 00:00:46.920
We have two different versions of it.

14
00:00:46.920 --> 00:00:49.340
Let's try it with A versus B.

15
00:00:49.340 --> 00:00:54.119
You don't have the ability to do
that if there are no boundaries

16
00:00:54.119 --> 00:00:59.439
around these concerns within your
codebase and now we have it In fact,

17
00:00:59.439 --> 00:01:06.690
what I can do here Let's
see if this is gonna work.

18
00:01:07.880 --> 00:01:09.014
should work

19
00:01:20.028 --> 00:01:23.155
Maybe not, all right,
I'm gonna need one more script here.

20
00:01:26.365 --> 00:01:31.689
And you just copy this and
I'm gonna make this dev and

21
00:01:31.689 --> 00:01:36.772
we're gonna say type script
build give ourselves

22
00:01:36.772 --> 00:01:43.690
a different emoji.Are watching
the workspace probably is right.

23
00:01:44.970 --> 00:01:50.270
So we'll say watch.Preserve watch.

24
00:01:50.270 --> 00:01:52.520
Output, Save.

25
00:01:53.880 --> 00:01:57.184
And then now we're gonna do our chmod
just to make sure it works like

26
00:01:57.184 --> 00:01:59.340
make sure this is executable.

27
00:01:59.340 --> 00:02:03.317
Last thing is in our package
JSON in addition to the Build.

28
00:02:03.317 --> 00:02:06.345
We have a watch.

29
00:02:06.345 --> 00:02:08.415
All right, or
no we call the dev didn't we?

30
00:02:09.625 --> 00:02:10.125
Dev.

31
00:02:11.935 --> 00:02:13.515
Those are interchangeable in my mind.

32
00:02:16.055 --> 00:02:22.539
Alright, so now we can do Yarn dev.

33
00:02:25.418 --> 00:02:31.334
So now what I can do,
I can change something in my data layer,

34
00:02:31.334 --> 00:02:35.170
let's mess up this API endpoint.

35
00:02:35.170 --> 00:02:38.922
Save Change detected starting
incremental compilation,

36
00:02:38.922 --> 00:02:43.050
I can go over to a totally
different part of the mono repo.

37
00:02:43.050 --> 00:02:50.260
I can mess up this type guard, save,
change detected, you get your errors.

38
00:02:50.260 --> 00:02:52.240
So we have sliced this thing up.

39
00:02:52.240 --> 00:02:57.046
But we're not deprived of the same
experience we're used to having

40
00:02:57.046 --> 00:03:02.022
where all of our source code is watched
and An incremental build a quick

41
00:03:02.022 --> 00:03:06.741
one at that happens every time we save so
we are seeing type guards,

42
00:03:06.741 --> 00:03:12.222
type source index ,I think this is
a relatively ,this is a method that's not

43
00:03:12.222 --> 00:03:17.254
used extensively outside of this
package but you could very quickly.

44
00:03:17.254 --> 00:03:19.136
,let me prove this.

45
00:03:24.281 --> 00:03:28.277
If I were to do this and I'm gonna
actually export it in a weird way

46
00:03:41.460 --> 00:03:45.172
I want that symbol to make
its way out of the package.

47
00:03:47.807 --> 00:03:49.922
And I would expect let's see.

48
00:03:54.558 --> 00:03:59.370
No, this actually this won't this won't
be the breakage I thought it would be.

49
00:03:59.370 --> 00:04:02.870
I'm basically trying to break one package
and show that it will be reflected.

50
00:04:02.870 --> 00:04:06.814
As we tried to build the other one,
but simply renaming something and

51
00:04:06.814 --> 00:04:09.810
fixing it as we export
it is not gonna cut it.

52
00:04:09.810 --> 00:04:15.468
But let's say I require
here a second argument

53
00:04:19.971 --> 00:04:21.409
Like strict mode,

54
00:04:28.577 --> 00:04:30.888
not with the default would
have to be a Boolean.

55
00:04:30.888 --> 00:04:35.172
I keep making backwards compatible changes
and that's not gonna prove my point here.

56
00:04:37.797 --> 00:04:39.840
Come on, somebody uses his message.

57
00:04:41.220 --> 00:04:42.170
Like in the data layer.

58
00:04:44.986 --> 00:04:45.980
Yeah, it's showing up here.

59
00:04:45.980 --> 00:04:50.950
It's one of these weird things
that like a type signature is.

60
00:04:53.340 --> 00:04:57.480
Like that strict function type matching
thing, it's not picking up on this.

61
00:04:57.480 --> 00:05:03.320
I'm just trying to break something so
that it actually makes things problematic.

62
00:05:04.590 --> 00:05:08.984
Strict Boolean

63
00:05:08.984 --> 00:05:13.380
interesting.

64
00:05:13.380 --> 00:05:16.249
It's only reporting things at the site.

65
00:05:16.249 --> 00:05:23.680
At the at the site of the error but
then elsewhere.

66
00:05:23.680 --> 00:05:26.340
Obviously there's a problem here
if I were to touch this file.

67
00:05:27.840 --> 00:05:31.750
Mention that for
some time that it wasn't sure I was wrong.

68
00:05:33.330 --> 00:05:34.380
Interesting.

69
00:05:34.380 --> 00:05:37.340
Yeah, I'm not 100% sure
what's going on here.

70
00:05:37.340 --> 00:05:42.397
Obviously the type checker is

71
00:05:42.397 --> 00:05:49.710
objecting configuration the TS config.

72
00:05:49.710 --> 00:05:50.920
Yes.

73
00:05:50.920 --> 00:05:54.258
I you know what if you're watching this
course just pay real close attention to

74
00:05:54.258 --> 00:05:55.430
the notes on this section.

75
00:05:55.430 --> 00:05:56.800
If I find.

76
00:05:56.800 --> 00:06:01.420
Other stuff about this,
I'll be sure to, to add it here.

77
00:06:01.420 --> 00:06:05.920
But what we're looking for is the similar
experience that you would get with

78
00:06:05.920 --> 00:06:09.576
a nice easy to maintain monolith
app where you would just say,

79
00:06:09.576 --> 00:06:12.090
start up my local dev environment.

80
00:06:12.090 --> 00:06:15.821
And then every file you
touch,it causes some

81
00:06:15.821 --> 00:06:20.030
ramifications incremental build happens.

82
00:06:20.030 --> 00:06:22.550
The server bounces, right?

83
00:06:22.550 --> 00:06:25.300
And then you see what you
need to see on screen.

84
00:06:25.300 --> 00:06:29.381
That is certainly attainable here, and

85
00:06:29.381 --> 00:06:33.941
with this with the composite
Project Setup,

86
00:06:33.941 --> 00:06:38.501
the build process is not
it is about as cheap as

87
00:06:38.501 --> 00:06:43.436
the the monolithic One
thing in one repo approach

88
00:06:59.131 --> 00:07:01.295
Getting busted on my commitment.

89
00:07:03.575 --> 00:07:07.220
So this would be a UI.

90
00:07:07.220 --> 00:07:08.669
Internal dependencies.

