WEBVTT

1
00:00:00.470 --> 00:00:03.620
We can see how Lerna interprets this.

2
00:00:08.056 --> 00:00:10.180
And we're going to look at
a couple other commands here.

3
00:00:10.180 --> 00:00:14.290
So one of them is changed.

4
00:00:14.290 --> 00:00:19.000
Right list the local packages that have
changed since the last tagged release.

5
00:00:19.000 --> 00:00:21.440
Now we don't really have a tag release,
yet.

6
00:00:21.440 --> 00:00:23.180
So this is going to be a little weird.

7
00:00:24.900 --> 00:00:30.132
We have a list that tells us just
helps us understand which of

8
00:00:30.132 --> 00:00:37.830
the packages learn a C's and is managing
the version of and then there's version.

9
00:00:37.830 --> 00:00:42.470
So bump versions of packages that
have changed since the last release.

10
00:00:42.470 --> 00:00:43.510
Let's try that one.

11
00:00:51.500 --> 00:00:56.678
So now it's asking us to pick
a version number 001 is what we

12
00:00:56.678 --> 00:01:02.320
found in that was what we started
with in our package, JSON.

13
00:01:02.320 --> 00:01:05.610
And now it's like letting
us choose something here.

14
00:01:05.610 --> 00:01:08.460
And you can see that it is
smart about incrementing.

15
00:01:08.460 --> 00:01:12.370
Right, so if I want to cut
a patch that's a to a minor.

16
00:01:12.370 --> 00:01:18.720
Well, I'd go from middle digit from 0-1 So
this is all contextually relevant here.

17
00:01:18.720 --> 00:01:23.550
Custom pre release would be like
cutting a beta or a release candidate.

18
00:01:23.550 --> 00:01:28.088
Sometimes you see RC as this last little,
you know,

19
00:01:28.088 --> 00:01:32.938
this is a colonel December
calls this it's like a custom

20
00:01:32.938 --> 00:01:38.020
release specifier or
something Little here.

21
00:01:38.020 --> 00:01:41.678
It's important to realize that
these are sorted alphabetically.

22
00:01:43.223 --> 00:01:47.879
I know if someone who run too
little problem, they're tryna

23
00:01:47.879 --> 00:01:52.820
make a little cute joke where they,
I guess an April fools joke.

24
00:01:52.820 --> 00:01:58.431
They cut a release With a version, so
their current real release was a beta,

25
00:01:58.431 --> 00:02:02.991
and they cut a release with
a specifier that started with AES,

26
00:02:02.991 --> 00:02:06.430
thinking that it would just be funny.

27
00:02:06.430 --> 00:02:10.239
But all of the people that were on
the beta there, they ran yarn install,

28
00:02:10.239 --> 00:02:13.960
they saw a new thing was available and
they pull back down.

29
00:02:13.960 --> 00:02:16.680
So, alphabetically matters.

30
00:02:16.680 --> 00:02:19.250
A is for alpha, B is for beta.

31
00:02:19.250 --> 00:02:23.382
You don't want to keep going down
the alphabet because those will be seen as

32
00:02:23.382 --> 00:02:24.771
more stable than a beta.

33
00:02:29.315 --> 00:02:30.483
Let me try something else here.

34
00:02:36.795 --> 00:02:38.300
Check that out.

35
00:02:38.300 --> 00:02:41.800
So I added this conventional
commits argument.

36
00:02:41.800 --> 00:02:45.060
And it's not asking me a question anymore.

37
00:02:45.060 --> 00:02:50.240
It's telling me that

38
00:02:50.240 --> 00:02:56.240
I'm bumping up to two.

39
00:02:56.240 --> 00:02:57.260
What are we doing here?

40
00:02:58.397 --> 00:03:00.320
Crap, my tag already exists.

41
00:03:00.320 --> 00:03:01.970
All right,
here's what I'm gonna have to do.

42
00:03:01.970 --> 00:03:04.860
And this is only because I
ran this workshop project.

43
00:03:06.790 --> 00:03:09.950
Like while I was testing things out,
making sure it was working for you.

44
00:03:09.950 --> 00:03:14.090
So I'm going to have to do a little
workaround you won't have to do locally.

45
00:03:14.090 --> 00:03:16.530
I'm going to call this a minor release.

46
00:03:16.530 --> 00:03:19.950
Because I've already I have some
get tags that already exist.

47
00:03:19.950 --> 00:03:22.484
In fact,
I'd better call it a major, just so

48
00:03:22.484 --> 00:03:25.710
I get completely out of anything
that I was doing before.

49
00:03:28.400 --> 00:03:29.650
Right, this is new territory.

50
00:03:29.650 --> 00:03:33.220
It's been no part of any
of my dry runs here.

51
00:03:33.220 --> 00:03:35.170
And now you can see that it finishes.

52
00:03:35.170 --> 00:03:38.180
So but
this is I would expect this to fail right?

53
00:03:38.180 --> 00:03:43.300
Like I already have a tag 002 and I like
that learner is being honest about that.

54
00:03:43.300 --> 00:03:46.560
And it's telling me like I
already published this release.

55
00:03:46.560 --> 00:03:49.350
Are you sure have you pulled
that latest code from Master?

56
00:03:49.350 --> 00:03:51.835
Maybe someone else cut
a double two already.

57
00:03:56.018 --> 00:03:57.925
No, check this out.

58
00:03:57.925 --> 00:04:05.520
Ccnagelog.md so
this is in the root of the project.

59
00:04:06.900 --> 00:04:11.502
And you can see i've got 002 this was for
my patch release I probably

60
00:04:11.502 --> 00:04:15.720
should've reverted this,
I shouldn't have committed this.

61
00:04:15.720 --> 00:04:19.020
It's not gonna really cause harm here,
but like.

62
00:04:19.020 --> 00:04:21.330
don't really want this to say 1.0.

63
00:04:21.330 --> 00:04:24.427
And now we've got this
little description here and

64
00:04:24.427 --> 00:04:29.260
if we've done our job, right, each package
also has a little change log here.

65
00:04:29.260 --> 00:04:31.570
So we didn't make.

66
00:04:31.570 --> 00:04:36.227
We said that our inner commit
message we said that it was,

67
00:04:36.227 --> 00:04:40.509
I believe utils, Hopefully,
where's my commit?

68
00:04:45.129 --> 00:04:46.670
I can just do git log.

69
00:04:50.250 --> 00:04:53.010
Right so we touched utils.

70
00:04:53.010 --> 00:04:55.950
So that means that types, right?

71
00:04:55.950 --> 00:05:00.715
It's just a version bump only
Version bump only meaning,

72
00:05:00.715 --> 00:05:05.700
like types didn't really change,
then really change.

73
00:05:05.700 --> 00:05:09.313
Now if we looked at the utils change
log or commission show up there.

74
00:05:12.603 --> 00:05:16.660
Maybe I spelled something
wrong feet utils.

75
00:05:16.660 --> 00:05:21.793
Well, the hope is that it would show up
here And it's certainly showing up here.

76
00:05:25.291 --> 00:05:27.681
I may be getting the syntax
slightly wrong, but

77
00:05:27.681 --> 00:05:30.130
I hope you understand the concept here.

78
00:05:30.130 --> 00:05:35.322
This is where I'm probably just
a little bit off in the convention,

79
00:05:35.322 --> 00:05:39.570
but you would want to see
that specific things.

80
00:05:39.570 --> 00:05:46.650
Then, in fact, certain packages show up in
the respective changelog they belong in.

81
00:05:46.650 --> 00:05:51.206
Now, the reason that we released new
versions of both of these packages is

82
00:05:51.206 --> 00:05:54.670
because of our versioning strategy here,
right?

83
00:05:54.670 --> 00:05:56.770
So this number has changed.

84
00:05:56.770 --> 00:05:57.980
It used to be 01.

85
00:05:57.980 --> 00:06:03.074
And now it's 1.00 Means all of
the packages in our workspace

86
00:06:03.074 --> 00:06:09.110
are tracking that same number,
this is the lockstep versioning strategy,

87
00:06:09.110 --> 00:06:14.484
we're not always going to make things
like this, we are going to get

88
00:06:14.484 --> 00:06:20.740
we're going to let some of these things
float independently in just a moment.

