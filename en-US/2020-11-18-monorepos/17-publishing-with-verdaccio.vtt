WEBVTT

1
00:00:00.690 --> 00:00:06.433
So normally, publishing packages
would be a really annoying thing for

2
00:00:06.433 --> 00:00:08.870
us to do in the workshop.

3
00:00:08.870 --> 00:00:16.000
Because to really experience publishing,
you have to pollute NPM.

4
00:00:16.000 --> 00:00:19.580
You have to actually
send packages into NPM.

5
00:00:19.580 --> 00:00:21.080
Don't want to have us do that.

6
00:00:21.080 --> 00:00:23.935
And in particular,
as you're playing around with this and

7
00:00:23.935 --> 00:00:27.415
as you're learning this, I want you to
feel like you have a thing that you

8
00:00:27.415 --> 00:00:29.740
can make messy and then throw it away.

9
00:00:29.740 --> 00:00:35.810
We're going to use something called for
Dotto, which is a local NPM proxy.

10
00:00:36.980 --> 00:00:37.890
Here's how it works.

11
00:00:39.230 --> 00:00:43.031
You're gonna go and all I did here is I
opened up a second shell because I want my

12
00:00:43.031 --> 00:00:46.200
Verdaccio kind of running
in the background here.

13
00:00:46.200 --> 00:00:51.488
So I did,
you can do like volta install Verdaccio,

14
00:00:57.581 --> 00:00:59.059
I already have the latest
version installed.

15
00:01:00.110 --> 00:01:01.149
And then here's how you started.

16
00:01:04.051 --> 00:01:10.216
Just run through dacha So

17
00:01:12.223 --> 00:01:19.350
What we have now is A local
packaging industry.

18
00:01:21.460 --> 00:01:23.600
So you can see this is this is mine.

19
00:01:23.600 --> 00:01:25.140
This is like the web UI.

20
00:01:25.140 --> 00:01:27.510
So I just went to localhost 4873.

21
00:01:27.510 --> 00:01:31.254
Right, which is just
the same thing that it

22
00:01:31.254 --> 00:01:35.530
originally told me right
after it started up.

23
00:01:35.530 --> 00:01:42.420
Yet right here 4873 and you can see
that there's some stuff in here already.

24
00:01:44.630 --> 00:01:48.990
Now so
this it knows how to talk like NPM talks.

25
00:01:48.990 --> 00:01:53.830
Your your ci tools will think that this
is NPM we just have to do one little

26
00:01:53.830 --> 00:01:55.890
thing real quick.

27
00:01:55.890 --> 00:01:58.810
And that is in our project.

28
00:01:58.810 --> 00:02:00.830
I think I left a file here for us.

29
00:02:02.460 --> 00:02:06.788
I did not because it's so trivial So

30
00:02:06.788 --> 00:02:14.289
all we need to do is create an NPMRC
file which will tell yarn and

31
00:02:14.289 --> 00:02:18.780
learner To use this as our registry.

32
00:02:21.010 --> 00:02:22.020
That's it.

33
00:02:22.020 --> 00:02:23.240
That's all you have to do.

34
00:02:25.510 --> 00:02:30.320
Now when you run yarn install, it's going
to look at prodotto instead of NPM.

35
00:02:30.320 --> 00:02:34.869
And by the way, for dacha if it
doesn't have something cached and

36
00:02:34.869 --> 00:02:40.260
sort of local overrides, it'll just go
ask NPM for you, This is also great.

37
00:02:40.260 --> 00:02:46.884
By the way, if you're, if you're attending
a workshop at a conference, or if you,

38
00:02:46.884 --> 00:02:52.670
you have to do some work in a place
where like the connectivity is bad.

39
00:02:52.670 --> 00:02:56.960
This can be like a cache of your NPM
packages that work offline since it's all

40
00:02:56.960 --> 00:02:58.380
running off localhost.

41
00:02:59.390 --> 00:03:02.072
If there's an internet connection,
it'll get stuff, you know,

42
00:03:02.072 --> 00:03:03.070
get the latest things.

43
00:03:03.070 --> 00:03:07.985
Otherwise you can use what you have songs,
it's recent enough that it satisfies

44
00:03:07.985 --> 00:03:13.270
the version constraints.So I'm gonna
leave this running in the background.

45
00:03:13.270 --> 00:03:15.240
And in fact,
I already have some junk in there.

46
00:03:15.240 --> 00:03:16.180
I want to clean it out.

47
00:03:16.180 --> 00:03:18.950
So we're all looking at the same thing and
we have a clean slate.

48
00:03:18.950 --> 00:03:23.593
On Mac OS,
it would be like this rm rf Local

49
00:03:23.593 --> 00:03:27.990
share production, just blow it away.

50
00:03:29.310 --> 00:03:30.870
Let's see, I might have to restart it.

51
00:03:32.100 --> 00:03:33.400
I didn't even have to restart it.

52
00:03:33.400 --> 00:03:36.460
Now we're back in the brand new state.

53
00:03:36.460 --> 00:03:39.250
So all I had to do was that
just blew away my packages.

54
00:03:43.000 --> 00:03:45.310
So let's try publishing some stuff now.

55
00:03:45.310 --> 00:03:47.650
Because I can do this and you can too.

56
00:03:47.650 --> 00:03:49.971
Even though we're all using
the same package name,

57
00:03:49.971 --> 00:03:52.300
I'm publishing just to
another thing on my laptop.

58
00:03:52.300 --> 00:03:55.159
So we're not gonna collide in
terms of names and versions.

59
00:04:00.533 --> 00:04:03.810
So I'll say that this is,
I'm just gonna make a comment.

60
00:04:03.810 --> 00:04:08.859
This is a making a fix to the types

61
00:04:08.859 --> 00:04:14.298
package and we'll say reductio.

62
00:04:14.298 --> 00:04:19.066
All right now I'm going to

63
00:04:19.066 --> 00:04:23.255
say learner publish.

64
00:04:23.255 --> 00:04:27.046
Conventional ,commits.

65
00:04:30.341 --> 00:04:30.980
Enter.

66
00:04:33.937 --> 00:04:36.773
It says there are no changes to publish,
interesting.

67
00:04:39.909 --> 00:04:42.370
Let me see if there's anything here.

68
00:04:43.930 --> 00:04:45.843
This first step is a little bit hard here.

69
00:04:49.423 --> 00:04:53.601
Learn is very good once we have a version
that already exists cuz some of how it

70
00:04:53.601 --> 00:04:57.977
determines that the bump to the version
number is it looks at the last release and

71
00:04:57.977 --> 00:05:00.250
compares to the code you have now.

72
00:05:00.250 --> 00:05:02.290
There is no last release at this time.

73
00:05:02.290 --> 00:05:06.100
So I think I just need to
publish each package manually.

74
00:05:06.100 --> 00:05:09.215
Which is simple as this learner exact,
by the way,

75
00:05:09.215 --> 00:05:13.990
isn't it good that we have like this
local thing now, we can just try this.

76
00:05:13.990 --> 00:05:16.100
If it doesn't work, we just float away.

77
00:05:16.100 --> 00:05:19.910
Nothing's in NPM everything's
depletable right?

78
00:05:19.910 --> 00:05:25.680
learner exec,
actually learner, run, publish

79
00:05:29.571 --> 00:05:34.210
No, it's gonna be learning
exact yarn publish.

80
00:05:34.210 --> 00:05:41.500
Because while it is like yarn build, it's
not an NPM script is a yarn sub command.

81
00:05:41.500 --> 00:05:45.870
And I'm going to wrap
quotes around this just so

82
00:05:45.870 --> 00:05:50.356
that It is clear whose
argument is passed to who.

83
00:05:58.420 --> 00:06:00.325
I'm just keeping the same version numbers.

84
00:06:02.354 --> 00:06:04.220
And let's see what we've got.

85
00:06:04.220 --> 00:06:05.330
There we go.

86
00:06:05.330 --> 00:06:10.483
Publish two versions A app has no
idea that this did not end up on NPM.

87
00:06:12.900 --> 00:06:17.660
And if I look I've got this fix here.

88
00:06:19.222 --> 00:06:20.730
So let's make a change.

89
00:06:20.730 --> 00:06:24.900
I'm just gonna go to
really want this to work.

90
00:06:24.900 --> 00:06:26.440
I think it will.

91
00:06:26.440 --> 00:06:27.760
Go to this type card.

92
00:06:28.938 --> 00:06:30.070
You know what we can do here.

93
00:06:31.260 --> 00:06:34.320
There is a legit improvement
I can make here.

94
00:06:34.320 --> 00:06:35.730
Okay here.

95
00:06:35.730 --> 00:06:40.460
So this is meant to check to
see if an array of items,

96
00:06:40.460 --> 00:06:43.690
they're all of the same type.

97
00:06:43.690 --> 00:06:49.170
So I filter out Any mismatches,
I get all mismatches.

98
00:06:49.170 --> 00:06:53.230
And then I check to see if there
are greater than 0 mismatches.

99
00:06:53.230 --> 00:06:58.252
This is not ideal from a performance
standpoint because as soon

100
00:06:58.252 --> 00:07:04.180
as I find the first violator,
I know that I'm going to return false.

101
00:07:04.180 --> 00:07:07.720
I do not need to check every
single item in this array.

102
00:07:07.720 --> 00:07:11.625
So, I can just use some array.some,

103
00:07:11.625 --> 00:07:16.505
If some of the items fail
to check return false,

104
00:07:16.505 --> 00:07:20.020
otherwise, return true.

105
00:07:20.020 --> 00:07:22.862
So in theory, I've just sped this up,
made it a little bit faster.

106
00:07:42.073 --> 00:07:43.574
And I wanna make one more change here.

107
00:07:45.482 --> 00:07:49.442
In my learner,
I want to get change this version from 1 0

108
00:07:49.442 --> 00:07:54.470
0 to independent.

109
00:07:54.470 --> 00:07:58.577
Right to that there's a reason we've been
like, regardless of what we touched,

110
00:07:58.577 --> 00:08:02.970
it's always a new release of everything,
everything, everything.

111
00:08:02.970 --> 00:08:08.120
Independent allows us To just say,
look, only types changed.

112
00:08:08.120 --> 00:08:09.571
So types will get released and

113
00:08:09.571 --> 00:08:13.030
anything that depends on types
because it needs a bump.

114
00:08:13.030 --> 00:08:13.990
It may get released.

115
00:08:17.910 --> 00:08:19.120
And I'll call this a chore.

116
00:08:22.220 --> 00:08:24.685
We'll see if it's happy
with no scope here.

117
00:08:28.923 --> 00:08:34.158
Called independent versioning
seems happy with it.

118
00:08:34.158 --> 00:08:41.550
All right,
now let's learn a command for changed.

119
00:08:41.550 --> 00:08:43.470
Let's see what this looks like.

120
00:08:43.470 --> 00:08:51.374
Lerna changed 2 packages ready to publish.

121
00:08:51.374 --> 00:08:53.958
There's one explanation here.

122
00:08:53.958 --> 00:09:00.620
Yep, two packages.

123
00:09:00.620 --> 00:09:04.850
Types got bumped utili depends on types.

124
00:09:04.850 --> 00:09:05.920
It gets pumped too

