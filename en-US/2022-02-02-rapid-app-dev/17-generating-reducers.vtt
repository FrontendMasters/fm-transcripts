WEBVTT

1
00:00:00.314 --> 00:00:06.913
One of the things that I
want to just point out, and

2
00:00:06.913 --> 00:00:12.258
I feel pretty good about everything that

3
00:00:12.258 --> 00:00:17.456
we've accomplished up to this point.

4
00:00:17.456 --> 00:00:21.480
We can write home about this, but

5
00:00:21.480 --> 00:00:27.230
what you will notice is
that these events here or

6
00:00:27.230 --> 00:00:34.013
these methods all, find,
create, update, delete.

7
00:00:34.013 --> 00:00:40.499
And more importantly,
if we go down into the reducer,

8
00:00:40.499 --> 00:00:44.447
select, load, create update,

9
00:00:44.447 --> 00:00:50.938
these are all part of the template,
they're static.

10
00:00:50.938 --> 00:00:55.447
And in a lot of cases, this is fine,
this is a good starting point.

11
00:00:55.447 --> 00:01:00.172
But when we get into or the extension of

12
00:01:00.172 --> 00:01:05.341
this is true Domain-Driven Design, and

13
00:01:05.341 --> 00:01:10.361
not to go off into something that is worth

14
00:01:10.361 --> 00:01:15.248
an entire workshop in and unto itself.

15
00:01:15.248 --> 00:01:20.925
The point of Domain-Driven Design
is to establish,

16
00:01:20.925 --> 00:01:25.972
to work with stakeholders and
domain experts,

17
00:01:25.972 --> 00:01:32.800
to, one, understand how the domain
is modeled, how it works.

18
00:01:32.800 --> 00:01:39.336
And to tease out a set of semantics that
you can use to create more meaningful

19
00:01:39.336 --> 00:01:44.967
communication with the stakeholders,
domain experts, etc.

20
00:01:44.967 --> 00:01:50.452
And so if you pick up a book
on Domain-Driven Development,

21
00:01:50.452 --> 00:01:56.378
invariably, probably within
the first two or three chapters,

22
00:01:56.378 --> 00:02:02.212
you are going to run up against
this concept of event storming.

23
00:02:02.212 --> 00:02:08.112
And so what they do or how this process
works is you sit down with a domain

24
00:02:08.112 --> 00:02:13.728
expert and you say, all right,
let's talk about how this works.

25
00:02:13.728 --> 00:02:21.431
What are the actors in this particular
domain, snd what do they do?

26
00:02:21.431 --> 00:02:26.951
And your idea or
the idea is to uncover the events, so

27
00:02:26.951 --> 00:02:33.100
events storming,
that these actors within this domain,

28
00:02:33.100 --> 00:02:38.128
that they essentially emit or
participate in.

29
00:02:38.128 --> 00:02:43.440
So that you can start to
develop essentially these user

30
00:02:43.440 --> 00:02:48.635
interaction flows and
you can understand how a user or

31
00:02:48.635 --> 00:02:52.228
an actor can interact with a system.

32
00:02:52.228 --> 00:02:59.163
And this is very congruent
with a framework like NgRx or

33
00:02:59.163 --> 00:03:05.363
Redux in that they
are basically event-based.

34
00:03:05.363 --> 00:03:09.860
And so, I know, for instance, Mike Ryan,

35
00:03:09.860 --> 00:03:13.873
who is one of the co-creators of NgRx,

36
00:03:13.873 --> 00:03:18.736
he is a huge proponent of
before you write NgRx,

37
00:03:18.736 --> 00:03:23.478
that you take the time
to understand how pieces

38
00:03:23.478 --> 00:03:28.728
within the application
interact with each other.

39
00:03:28.728 --> 00:03:33.983
And this is pertinent as well for
understanding control flow.

40
00:03:33.983 --> 00:03:41.005
And so, if you look into my StackBlitz
examples, one of the last ones,

41
00:03:41.005 --> 00:03:46.164
so this is seven,
has an event storming generator.

42
00:03:46.164 --> 00:03:49.589
Which is, interestingly enough,

43
00:03:49.589 --> 00:03:55.535
the idea that we generate a schema and
we generate our events.

44
00:03:55.535 --> 00:03:58.336
So all I'm doing is I'm starting
to break these pieces out.

45
00:03:58.336 --> 00:04:03.312
So in this case, we have a game and
you would ask yourself,

46
00:04:03.312 --> 00:04:06.882
what should I be able
to do with this game?

47
00:04:06.882 --> 00:04:14.096
Well, play a game, pause a game,
stop a game, reset a game, exit a game.

48
00:04:14.096 --> 00:04:18.366
And so
this is where when you start ,and so

49
00:04:18.366 --> 00:04:23.859
the initial kind of this question or
this request is,

50
00:04:23.859 --> 00:04:28.983
how does this work or
what would this look like from

51
00:04:28.983 --> 00:04:33.762
essentially idea conception to deployment?

52
00:04:33.762 --> 00:04:40.636
And how I would take this is that I
would say, what are our entities?

53
00:04:40.636 --> 00:04:46.364
And what do they do or
what can we do with them?

54
00:04:46.364 --> 00:04:50.061
So what is the thing and
what can you do with it?

55
00:04:50.061 --> 00:04:56.834
Well, in this case, I have a game,
and I have five events.

56
00:04:56.834 --> 00:05:02.569
So I should be able to play a game,
reset a game, exit a game.

57
00:05:02.569 --> 00:05:08.947
And I've isolated these events,
which, bit of surprise,

58
00:05:08.947 --> 00:05:14.073
all I've done is just
dumped them onto the page,

59
00:05:14.073 --> 00:05:18.591
as well as, ta-da, naming variations.

60
00:05:18.591 --> 00:05:23.442
And because of that, now what I can do is

61
00:05:23.442 --> 00:05:28.587
instead of generating a coarse-grained

62
00:05:28.587 --> 00:05:33.732
template, which may be sufficient, but

63
00:05:33.732 --> 00:05:38.877
the very next step in
my opinion would be to

64
00:05:38.877 --> 00:05:45.060
generate action sets for
each individual event.

65
00:05:45.060 --> 00:05:52.165
And so when I say action sets is that
you have NgRx actions, in this case.

66
00:05:52.165 --> 00:05:55.616
And so you have the trigger event.

67
00:05:55.616 --> 00:06:01.275
So if you've ever used any kind of effects
or Saga or something of that nature,

68
00:06:01.275 --> 00:06:06.765
is that you have kind of this middleware
that handles your business logic and

69
00:06:06.765 --> 00:06:09.197
your asynchronous operations.

70
00:06:09.197 --> 00:06:13.600
Is that at the end of the day,
the concept is fairly simple,

71
00:06:13.600 --> 00:06:19.696
that you have a trigger event that kicks
off this asynchronous middleware piece.

72
00:06:19.696 --> 00:06:24.597
And then you have a completion event,
which is either going to be a success or

73
00:06:24.597 --> 00:06:25.756
a failure event.

74
00:06:25.756 --> 00:06:29.529
So with every event,
you have your trigger event,

75
00:06:29.529 --> 00:06:34.193
so I wanna play a game,
playGameSuccess, playGameFailure.

76
00:06:34.193 --> 00:06:38.406
Same thing here, pauseGame,
pauseGameSuccess, stopGame,

77
00:06:38.406 --> 00:06:39.738
stopGameSuccess.

78
00:06:39.738 --> 00:06:44.616
So you imagine I'm gonna stop the game,
there's some command, great,

79
00:06:44.616 --> 00:06:46.355
we've stopped the game.

80
00:06:46.355 --> 00:06:51.656
Cuz maybe you need to actually stop
it at the server, not uncommon.

81
00:06:51.656 --> 00:06:57.641
But from here, you have, and
I'm going to open this into a new window.

82
00:06:57.641 --> 00:07:00.906
I should just start
doing this as a default.

83
00:07:00.906 --> 00:07:04.041
So notice we have trigger event,
completion event.

84
00:07:04.041 --> 00:07:09.290
In our effects, and philosophically,
or I think this is really,

85
00:07:09.290 --> 00:07:15.195
really close to how we would do in React,
that you have your trigger event,

86
00:07:15.195 --> 00:07:21.222
playGame, and then you have your
completion event, so playGameSuccess.

87
00:07:21.222 --> 00:07:25.374
It sends it on down the line,
playGameFailure,

88
00:07:25.374 --> 00:07:27.918
then it does something else.

89
00:07:27.918 --> 00:07:33.259
Pause trigger event, stop trigger event,

90
00:07:33.259 --> 00:07:38.028
reset trigger event, perfect triad.

91
00:07:38.028 --> 00:07:44.027
But now, once you have a completion event,
that needs to go into a reducer.

92
00:07:44.027 --> 00:07:48.897
And so now, I am generating kind
of the trappings of reducer logic,

93
00:07:48.897 --> 00:07:54.546
I would put the entity stuff in here,
eventually, if I were to flesh this out.

94
00:07:54.546 --> 00:07:59.377
But now, playGamesSuccess,
playGameFailure, pauseGameSuccess,

95
00:07:59.377 --> 00:08:00.811
pauseGameFailure.

96
00:08:00.811 --> 00:08:04.158
And you'll notice here,
that on the failure events,

97
00:08:04.158 --> 00:08:08.535
I'm simply delegating out to a generic
standalone failure function.

98
00:08:10.161 --> 00:08:16.699
And what we can do is we
can take this individual or

99
00:08:16.699 --> 00:08:21.960
just the reducer logic, and then we can

100
00:08:21.960 --> 00:08:27.552
wrap this in the full generated reducer.

101
00:08:27.552 --> 00:08:31.150
And so let's see what this
looks like in the code.

102
00:08:34.185 --> 00:08:38.655
So I have generateCode, which is,

103
00:08:38.655 --> 00:08:43.870
it takes a generator, events, entity,

104
00:08:43.870 --> 00:08:50.279
and config, and
big surprise, events.reduce.

105
00:08:50.279 --> 00:08:55.994
I'm generating, I'm sending in the event,

106
00:08:55.994 --> 00:09:00.395
yay, and it's all the same stuff.

107
00:09:00.395 --> 00:09:03.797
It's turtles all the way
down every single time.

108
00:09:03.797 --> 00:09:08.753
Now a full reducer, what I'm doing is,
I'm generating the logic,

109
00:09:08.753 --> 00:09:12.941
and then I'm calling
ReducerGenerator.generate, and

110
00:09:12.941 --> 00:09:15.514
I'm passing that in to be wrapped.

111
00:09:15.514 --> 00:09:22.257
And maybe if I thought about this a bit
more, I possibly would do something.

112
00:09:22.257 --> 00:09:23.778
Maybe this could be improved upon.

113
00:09:23.778 --> 00:09:28.596
More importantly is I think
this illustrates the point.

114
00:09:28.596 --> 00:09:32.221
And so if I go into the generators,

115
00:09:32.221 --> 00:09:36.347
let's look at our reducer generator.

116
00:09:36.347 --> 00:09:42.934
So here, reducer logic,
I'm just iterating over the events and

117
00:09:45.624 --> 00:09:50.838
Again, this is, at this point,
when you see the shape,

118
00:09:50.838 --> 00:09:55.293
I'm not surprised if you're like, yeah,

119
00:09:55.293 --> 00:10:00.415
that again, mashed potatoes for
dinner again, urgh.

120
00:10:00.415 --> 00:10:08.680
Because if I took out,
This bit right here,

121
00:10:11.821 --> 00:10:17.088
And this is going to get very angry for
a moment.

122
00:10:19.275 --> 00:10:24.292
This looks like pretty
much every generator

123
00:10:24.292 --> 00:10:29.986
that I've written,
is that it takes some stuff,

124
00:10:29.986 --> 00:10:35.700
it does some stuff, and
then it returns a string.

125
00:10:35.700 --> 00:10:42.085
Even here, with the build name variations,
very, very conventional.

126
00:10:42.085 --> 00:10:48.395
And so this is really, really important,
at the risk of tipping over into tedium or

127
00:10:48.395 --> 00:10:53.443
like, my God, we're watching
the same movie over and over,

128
00:10:53.443 --> 00:10:58.607
is that this is a non-trivial piece
of code that we've generated.

129
00:10:58.607 --> 00:11:05.457
But all we've done is iterate it
off of some basic stuff over and

130
00:11:05.457 --> 00:11:10.756
over and
over until we are generating an entire,

131
00:11:10.756 --> 00:11:18.530
well, in this case, a couple layers
of state management code in NgRx.

132
00:11:18.530 --> 00:11:21.165
So, you're welcome,

133
00:11:21.165 --> 00:11:26.579
I really believe that
these are money printers.

134
00:11:26.579 --> 00:11:31.524
And it's not uncommon for a client or
somebody to reach out and

135
00:11:31.524 --> 00:11:34.769
say, hey, we need to build this thing.

136
00:11:34.769 --> 00:11:38.776
And first of all, we need to
figure out what we're building and

137
00:11:38.776 --> 00:11:40.749
then we need to build it quick.

138
00:11:40.749 --> 00:11:45.735
And so the majority of our time,
the real value is figuring out what

139
00:11:45.735 --> 00:11:50.471
we're building, and
then this part is easy, relatively so.

140
00:11:50.471 --> 00:11:55.802
Because once you understand the domain
using Domain-Driven Design techniques,

141
00:11:55.802 --> 00:11:59.607
and this is like a typical road
mapping discovery process,

142
00:11:59.607 --> 00:12:04.729
that you understand, okay, these
are the actors, this is how they interact.

143
00:12:04.729 --> 00:12:07.227
So this is the business logic and

144
00:12:07.227 --> 00:12:11.946
this is the UIUX that we're
gonna need to accommodate this,

145
00:12:11.946 --> 00:12:17.699
the underlying application structure
is very, very straightforward.

146
00:12:17.699 --> 00:12:21.941
There's even been times
where we've accomplished,

147
00:12:21.941 --> 00:12:26.192
we've been able to generate
the entire application.

148
00:12:26.192 --> 00:12:30.606
And it would have actually
been inappropriate for

149
00:12:30.606 --> 00:12:36.176
political reasons to actually
just trot out what we've done,

150
00:12:36.176 --> 00:12:42.186
until our project champion actually
was in a position to show that.

151
00:12:42.186 --> 00:12:46.663
And so there's times where
this has worked so fast,

152
00:12:46.663 --> 00:12:51.874
we've actually had to actually
be coy about how far we were.

153
00:12:51.874 --> 00:12:56.950
Because for us to be like, by the way,
we know it took your team nine months to

154
00:12:56.950 --> 00:13:02.125
do it, but it's been nine days and we're
done, it's flipped to the other side.

155
00:13:02.125 --> 00:13:07.860
Where we've had to actually
measure our delivery so

156
00:13:07.860 --> 00:13:12.433
that we could protect ourstakeholders.

157
00:13:12.433 --> 00:13:17.856
Hopefully, that answered that question
about we, from conception, how we do that,

158
00:13:17.856 --> 00:13:22.835
is you understand the domain, the actors,
the actions, and then you can start

159
00:13:22.835 --> 00:13:27.770
to generate that, which is where this
event generator StackBlitz came from.

