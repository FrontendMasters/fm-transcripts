WEBVTT

1
00:00:00.090 --> 00:00:04.698
And I have one more example
that I will leave you

2
00:00:04.698 --> 00:00:08.960
with because I believe this is the future.

3
00:00:08.960 --> 00:00:14.360
So in example nine, I want to show you,

4
00:00:14.360 --> 00:00:21.248
a bit of functionality for
generating a mock API.

5
00:00:21.248 --> 00:00:27.562
And from here,
the difference is I'm using Faker and

6
00:00:27.562 --> 00:00:36.000
I'm using Moment so Faker generates
fake data moment generate dates.

7
00:00:36.000 --> 00:00:44.802
And in this case I want to
generate an API that has users.

8
00:00:44.802 --> 00:00:52.549
So the first thing to do when you're
coming from a horizontal approach or

9
00:00:52.549 --> 00:00:57.756
a domain driven design
approach is to understand

10
00:00:57.756 --> 00:01:02.715
the model so
here I have an interface for user.

11
00:01:02.715 --> 00:01:11.114
Now what I have done is I have created
an array that has the props in it.

12
00:01:11.114 --> 00:01:15.050
And you'll see why in just a moment and

13
00:01:15.050 --> 00:01:19.604
I've built out a few very small functions.

14
00:01:19.604 --> 00:01:23.495
Random int, get random date and

15
00:01:23.495 --> 00:01:27.830
this is starting to look familiar.

16
00:01:27.830 --> 00:01:31.996
I have a generators function or

17
00:01:31.996 --> 00:01:37.285
object rather, that has a key that maps

18
00:01:37.285 --> 00:01:42.422
to the properties on this interface.

19
00:01:42.422 --> 00:01:47.157
And I have an object attached to that with

20
00:01:47.157 --> 00:01:53.712
the appropriate faker function
to generate that data.

21
00:01:53.712 --> 00:01:58.564
So faker, if you don't know,
there is a number of functions that

22
00:01:58.564 --> 00:02:02.359
exist on within the faker
library that you can say,

23
00:02:02.359 --> 00:02:06.878
I wanna fake first name,
last name, email words whatever.

24
00:02:06.878 --> 00:02:12.597
And so now I have a generate method

25
00:02:14.795 --> 00:02:19.991
Hopefully you're starting to see this
repetition I mean convention we're

26
00:02:19.991 --> 00:02:24.716
reducing over this and I am calling, The,

27
00:02:24.716 --> 00:02:28.837
I'm passing in the prop,
which is, this right here.

28
00:02:28.837 --> 00:02:31.659
And I'm getting the generator.

29
00:02:31.659 --> 00:02:38.983
From here, I'm calling generator
function and passing in generator.args.

30
00:02:40.706 --> 00:02:46.268
Again, this is just a slow
variation of what we've done.

31
00:02:46.268 --> 00:02:49.564
Now, what I do want to call out here and

32
00:02:49.564 --> 00:02:55.649
this is something that I did not know
until I endeavored to build this.

33
00:02:55.649 --> 00:02:59.033
The, if somebody would have asked me well,

34
00:02:59.033 --> 00:03:03.616
is there ever a case that we
need to use the classic fortlib.

35
00:03:03.616 --> 00:03:08.300
Prior to this, I would have said,
well, generally not.

36
00:03:08.300 --> 00:03:14.593
But the only place that I can think
of that you would need a classic for

37
00:03:14.593 --> 00:03:21.009
loop is if you needed to iterate for
a specific number of iterations.

38
00:03:21.009 --> 00:03:26.651
So if I needed to loop over something or
create a loop for

39
00:03:26.651 --> 00:03:33.399
let's say 50 times,
then I was left doing length equals 50,

40
00:03:33.399 --> 00:03:38.571
i equals zero increment i,
i is less than length.

41
00:03:38.571 --> 00:03:41.725
And by poking around,

42
00:03:41.725 --> 00:03:46.871
I found this little bit of code here,

43
00:03:46.871 --> 00:03:51.851
this gem that basically creates new

44
00:03:51.851 --> 00:03:55.679
array, so array.apply.

45
00:03:55.679 --> 00:03:59.380
And so, what this does is
essentially I'm calling a function.

46
00:03:59.380 --> 00:04:07.240
And I'm basically saying create a new
array to whatever length it is.

47
00:04:07.240 --> 00:04:09.974
And then map over it.

48
00:04:09.974 --> 00:04:14.711
And then from here generate
call the generator and

49
00:04:14.711 --> 00:04:18.899
passing the user props and the generators.

50
00:04:18.899 --> 00:04:23.795
And so somebody asked like,
am I going to talk about call or apply?

51
00:04:23.795 --> 00:04:27.993
In this case, here we have it.

52
00:04:27.993 --> 00:04:34.169
I've played my hand this alone in
my opinion was worth the price

53
00:04:34.169 --> 00:04:41.519
of admission that when I found this out
I thought this was incredibly cool.

54
00:04:41.519 --> 00:04:46.811
Is I'm basically saying I want to create
an empty array of this length and

55
00:04:46.811 --> 00:04:49.431
then I'm going to iterate over it.

56
00:04:49.431 --> 00:04:55.357
So what's neat about this
as well is that you'll

57
00:04:55.357 --> 00:05:02.008
notice that the generate function Is,
very generic,

58
00:05:02.008 --> 00:05:07.519
then the function that
calls it is specific.

59
00:05:07.519 --> 00:05:12.003
And so, in this case I could, call or

60
00:05:12.003 --> 00:05:16.635
I could create a generate, courses or

61
00:05:16.635 --> 00:05:21.847
any kind of a domain
specific function that

62
00:05:21.847 --> 00:05:28.528
then defers to this underlying
function of generate.

63
00:05:28.528 --> 00:05:33.191
And so this was intentionally vague and

64
00:05:33.191 --> 00:05:38.001
then this is a little bit more specific.

65
00:05:38.001 --> 00:05:43.873
Now, what you could do is well from here.

66
00:05:48.450 --> 00:05:53.873
Imagine that we have another
object that has title and

67
00:05:53.873 --> 00:05:56.531
possibly like progress.

68
00:05:56.531 --> 00:06:00.304
Because I have this segmented out and

69
00:06:00.304 --> 00:06:05.294
it's not specifically to
the user object itself

70
00:06:05.294 --> 00:06:09.919
that I've essentially
created a registry or

71
00:06:09.919 --> 00:06:16.141
a HashMap to be able to generate
these specific properties.

72
00:06:16.141 --> 00:06:21.011
But what I could do is for instance, and

73
00:06:21.011 --> 00:06:24.848
I'll just make something up,

74
00:06:24.848 --> 00:06:31.047
let's just go interface and
let's do this book,

75
00:06:31.047 --> 00:06:35.623
and we're going to go id: string and

76
00:06:35.623 --> 00:06:40.360
we're going to go title, also string

77
00:06:44.032 --> 00:06:48.660
And we'll go notes, also a string.

78
00:06:48.660 --> 00:06:53.200
And then from here I'm just
going to call out the props.

79
00:06:53.200 --> 00:06:59.406
So const_bookProps equals,
and I'm doing this so

80
00:06:59.406 --> 00:07:04.623
when I iterate like I'm
using this as the key

81
00:07:04.623 --> 00:07:10.701
to look up the generator
in the generators object.

82
00:07:10.701 --> 00:07:14.414
And so I'm certain,
there's probably another way to do this,

83
00:07:14.414 --> 00:07:20.347
but, For efficiency's sake,
I'm just doing this.

84
00:07:20.347 --> 00:07:25.969
Now, what I can do is I
can create a generatebooks

85
00:07:25.969 --> 00:07:31.045
method that will just go here like this,
and

86
00:07:31.045 --> 00:07:36.669
we're gonna go mean
let's just say 10 books,

87
00:07:36.669 --> 00:07:43.138
which is not nearly enough and
we'll go 10,000.

88
00:07:43.138 --> 00:07:48.064
And from here length equals

89
00:07:48.064 --> 00:07:52.989
getRandomInt min, max and

90
00:07:52.989 --> 00:07:59.640
then we're going to go const books.

91
00:07:59.640 --> 00:08:06.319
equals array.apply null,

92
00:08:06.319 --> 00:08:10.774
Array length map.

93
00:08:14.299 --> 00:08:20.243
And from here generate

94
00:08:23.178 --> 00:08:31.953
And will do bookProps and generators

95
00:08:37.556 --> 00:08:40.404
And return books.

96
00:08:42.922 --> 00:08:48.160
And I did something this does not

97
00:08:48.160 --> 00:08:53.011
like const get over there.

98
00:08:53.011 --> 00:08:58.061
There we go generate books and from here,

99
00:08:58.061 --> 00:09:02.978
what I can do is I'll just copy this out,

100
00:09:07.233 --> 00:09:15.933
And, generate books.

101
00:09:18.797 --> 00:09:21.386
And let's see what this looks like.

102
00:09:24.949 --> 00:09:31.240
All right, mock API users and
under here books.

103
00:09:37.470 --> 00:09:43.869
And so It's not it wouldn't
take much to turn around and

104
00:09:43.869 --> 00:09:51.510
drop this into like a serverless
function into a lambda function.

105
00:09:51.510 --> 00:09:54.472
And then all of a sudden now,

106
00:09:54.472 --> 00:09:59.420
you actually have a remote
API that you can hit.

107
00:09:59.420 --> 00:10:04.743
And so what's interesting again,
the extension of this is that just

108
00:10:04.743 --> 00:10:10.067
as much as I borrowed from immutable
infrastructure, that there's

109
00:10:10.067 --> 00:10:16.199
absolutely nothing that's keeping us
from extending this into generating.

110
00:10:16.199 --> 00:10:20.213
Infrastructures code by that, I mean,

111
00:10:20.213 --> 00:10:24.229
typically CloudFormation templates,

112
00:10:24.229 --> 00:10:29.437
TerraForm templates,
Serverless templates etc.

113
00:10:29.437 --> 00:10:32.915
And I think the Holy Grail, in my opinion,

114
00:10:32.915 --> 00:10:38.920
would be able to you where you would
define this in let's say stack Blitz.

115
00:10:38.920 --> 00:10:43.818
And then you could press a button and
not only would it build your code, but

116
00:10:43.818 --> 00:10:47.060
it would deploy it into
the cloud on your behalf.

117
00:10:47.060 --> 00:10:51.976
And to me, that is where things or
at least mentally,

118
00:10:51.976 --> 00:10:59.540
where I think somebody who could do that
would have a huge competitive advantage.

