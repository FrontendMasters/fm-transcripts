WEBVTT

1
00:00:00.540 --> 00:00:06.110
Let's start to get a little bit more
precise in what we're generating.

2
00:00:07.240 --> 00:00:13.129
So, I mentioned that I think of
a rapid application development

3
00:00:13.129 --> 00:00:18.036
approach very much like
a spreadsheet is that you have

4
00:00:18.036 --> 00:00:23.320
a cell which is where a feature and
a layer converge.

5
00:00:23.320 --> 00:00:28.099
And there's nothing wrong with
generating a single cell,

6
00:00:28.099 --> 00:00:31.070
like I need to update this one thing.

7
00:00:32.620 --> 00:00:39.440
No problem, you can generate
that one thing and that is fine.

8
00:00:39.440 --> 00:00:47.640
So, a cell is nothing
more than a template.

9
00:00:47.640 --> 00:00:52.154
And so, a template is a very
context specific thing that you're

10
00:00:52.154 --> 00:00:56.860
taking the data,
you're hydrating it and there you go.

11
00:00:56.860 --> 00:01:00.314
So let's step into stackblitz and

12
00:01:00.314 --> 00:01:05.310
let's look at how to generate a template.

13
00:01:05.310 --> 00:01:09.199
So in the starter we have a couple things.

14
00:01:12.608 --> 00:01:17.642
We have our templates here and
in one of our templates,

15
00:01:17.642 --> 00:01:24.240
and so let me open this in a new window so
we can see this a little better.

16
00:01:24.240 --> 00:01:29.544
You notice here,
we have our model name variations and

17
00:01:29.544 --> 00:01:32.900
we have an HttpClient templates.

18
00:01:32.900 --> 00:01:39.244
So this is angular and
you'll notice that we have albums,

19
00:01:39.244 --> 00:01:43.909
and here this is inappropriate template.

20
00:01:45.050 --> 00:01:50.454
Now, when we get down to our axios
template, so if I was doing this in react,

21
00:01:50.454 --> 00:01:55.010
this is what this particular
service would look like.

22
00:01:55.010 --> 00:01:58.598
The problem is,
what do you notice about this?

23
00:01:58.598 --> 00:02:03.264
This is, Oriented

24
00:02:03.264 --> 00:02:08.030
towards a course,
which is not what we're using.

25
00:02:08.030 --> 00:02:13.871
And so the challenge here
is that we want to go and

26
00:02:13.871 --> 00:02:18.835
take this axios template and update it so

27
00:02:18.835 --> 00:02:26.295
that it is appropriate for
us to hydrate with a domain model.

28
00:02:26.295 --> 00:02:31.535
And, so what you'll notice
here is we have our config,

29
00:02:31.535 --> 00:02:37.110
we have our schema,
we have our build name variations and so

30
00:02:37.110 --> 00:02:42.352
we've seen this just generating
the name variations,

31
00:02:42.352 --> 00:02:46.270
and then we have this generator.

32
00:02:46.270 --> 00:02:51.409
We have a few generators and so
if you look into the file system here,

33
00:02:51.409 --> 00:02:54.490
I'll pull up service generator first.

34
00:02:56.510 --> 00:03:02.064
That at the core of this,
we have an object

35
00:03:02.064 --> 00:03:07.622
that adheres to a generator interface and

36
00:03:07.622 --> 00:03:12.720
this has a single generate function.

37
00:03:12.720 --> 00:03:18.862
And so you'll see here interface
generator and it has a single function,

38
00:03:18.862 --> 00:03:23.517
but what this allows us to do
is anything that implements

39
00:03:23.517 --> 00:03:27.990
this interface we know that
it has a generate method.

40
00:03:28.990 --> 00:03:33.690
Very, very important, because now
we can program to the interface,

41
00:03:33.690 --> 00:03:35.850
and not the concrete instance.

42
00:03:35.850 --> 00:03:40.302
So any design pattern book talks
about why this is important,

43
00:03:40.302 --> 00:03:43.298
is that we can swap out any generator, and

44
00:03:43.298 --> 00:03:49.240
we just know that if I call generate,
something's going to happen.

45
00:03:49.240 --> 00:03:53.483
And what this returns,
and so we'll come up here,

46
00:03:53.483 --> 00:03:58.910
this generates method takes a schema
object and a config object,

47
00:03:58.910 --> 00:04:03.175
and all we care about on
the config object is scope.

48
00:04:03.175 --> 00:04:07.734
And so using npm scoping you
have something like at scope,

49
00:04:07.734 --> 00:04:12.110
your API interfaces, so whatever that is.

50
00:04:12.110 --> 00:04:17.510
And at the bottom,
we are returning an object that has

51
00:04:17.510 --> 00:04:24.310
the generated template, it has a title,
and it has a file name.

52
00:04:24.310 --> 00:04:28.880
And so this is interesting and
I'm not gonna get to it today.

53
00:04:28.880 --> 00:04:32.379
But using a library like JS zip,

54
00:04:32.379 --> 00:04:37.432
that when you zip up a number
of files that if you

55
00:04:37.432 --> 00:04:42.485
have a constructed or
a calculated file name,

56
00:04:42.485 --> 00:04:49.375
that will actually preserve that
structure inside of the zip.

57
00:04:49.375 --> 00:04:51.586
And so you can actually take a folder and

58
00:04:51.586 --> 00:04:56.209
within the folder when you unzip it it'll
be libs core data source lib services and

59
00:04:56.209 --> 00:04:59.091
so will actually respect
that file structure and so

60
00:04:59.091 --> 00:05:03.200
you can just pick it up and drop it on
your generator project, so pro tip.

61
00:05:05.050 --> 00:05:10.196
And inside of the template we are pulling
off the properties that we need

62
00:05:10.196 --> 00:05:15.537
off of the name variations, so
ref refs, model models, single params.

63
00:05:15.537 --> 00:05:19.790
And then we're just jumping in and
we're filling them out.

64
00:05:21.600 --> 00:05:23.260
Pretty simple, right?

65
00:05:23.260 --> 00:05:27.794
So if we go into our axios generator,

66
00:05:27.794 --> 00:05:33.792
you can see here that I
have the basic shape here,

67
00:05:33.792 --> 00:05:39.060
axios generator, generate, template,

68
00:05:39.060 --> 00:05:44.472
title, file name, and
the problem is I have

69
00:05:44.472 --> 00:05:51.240
a template that has not been
turned into a proper mold.

70
00:05:52.860 --> 00:05:58.384
So, what I'll do here is
I'm going to go course and

71
00:05:58.384 --> 00:06:01.858
we'll just replace this with.

72
00:06:05.018 --> 00:06:06.025
Refs.

73
00:06:09.222 --> 00:06:12.923
And I think that is actually incorrect.

74
00:06:12.923 --> 00:06:14.791
This would actually be model.

75
00:06:25.546 --> 00:06:26.868
This would be refs.

76
00:06:29.819 --> 00:06:33.870
And we'll just kind of
click through here and so

77
00:06:33.870 --> 00:06:38.225
this is again you're just
kind of going through and

78
00:06:38.225 --> 00:06:43.409
looking for this, so
this I can go here, this is singleParam

79
00:06:48.348 --> 00:06:52.550
And so this is where it's a little
frustrating in stackblitz.

80
00:06:54.000 --> 00:06:59.799
Wanna go ref and
then because this is plural,

81
00:06:59.799 --> 00:07:03.470
I'm going to capture this.

82
00:07:04.690 --> 00:07:10.420
And I guess if I would have started the
plurals first, this would have been fine.

83
00:07:11.480 --> 00:07:17.442
So let me just go top to bottom one more
time and make sure that I have this.

84
00:07:17.442 --> 00:07:19.109
So environment model.

85
00:07:21.481 --> 00:07:24.042
Good, good, good, good, good.

86
00:07:24.042 --> 00:07:29.258
One thing that you will see here
is that when you have string

87
00:07:29.258 --> 00:07:36.510
literals in a template that is a string
literal, you have to escape some things.

88
00:07:36.510 --> 00:07:40.237
So if you're using backticks
in a template as I am,

89
00:07:40.237 --> 00:07:45.354
you need to escape the backtick and
you need to escape the dollar sign or

90
00:07:45.354 --> 00:07:51.190
the string literal inside of the string
literal will literally mess things up.

91
00:07:52.530 --> 00:07:57.616
So hopefully I'm good here just looking,

92
00:07:57.616 --> 00:08:02.986
looking, looking and
so let's save this and

93
00:08:02.986 --> 00:08:07.931
let's go back into our example here, and

94
00:08:07.931 --> 00:08:11.670
see if I blew up everything.

95
00:08:11.670 --> 00:08:18.980
So our HttpClient is working
still as advertised.

96
00:08:18.980 --> 00:08:26.192
But then now within our axios
template we have album.

97
00:08:26.192 --> 00:08:31.669
Albums And

98
00:08:35.028 --> 00:08:38.645
This might be a little broken,

99
00:08:38.645 --> 00:08:44.320
but I'm not gonna get too hung up on this.

100
00:08:44.320 --> 00:08:50.470
The main thing is that we have effectively
replaced the pieces that we need.

101
00:08:50.470 --> 00:08:56.205
So now, service generator generate,

102
00:08:56.205 --> 00:09:00.551
axios generator generate and

103
00:09:00.551 --> 00:09:05.954
let's do another schema just for fun

104
00:09:08.820 --> 00:09:14.931
Let's go with, I don't know.

105
00:09:14.931 --> 00:09:21.780
Let's say you're in a band and Or

106
00:09:21.780 --> 00:09:25.650
you run a guitar shop and so
you have a guitar schema.

107
00:09:26.870 --> 00:09:28.900
I don't know why you would do this,
but why not?

108
00:09:31.010 --> 00:09:31.908
So model plural.

109
00:09:37.590 --> 00:09:42.660
Here and now let's take and

110
00:09:42.660 --> 00:09:48.614
we'll just copy this instead of

111
00:09:48.614 --> 00:09:54.580
album schema, guitar schema.

112
00:09:55.900 --> 00:09:56.732
We'll flip back over.

113
00:10:02.562 --> 00:10:08.360
And lo and behold, now, I have a working,

114
00:10:08.360 --> 00:10:13.041
for the most part guitar service.

115
00:10:13.041 --> 00:10:20.610
And I think somewhere around here,
I even have a reducer.

116
00:10:20.610 --> 00:10:21.780
So why not?

117
00:10:21.780 --> 00:10:22.760
Let's just throw that in here.

118
00:10:24.250 --> 00:10:29.434
We'll go like this reducer template and

119
00:10:29.434 --> 00:10:32.180
reducer generator.

120
00:10:32.180 --> 00:10:36.744
We'll save this.

121
00:10:36.744 --> 00:10:42.527
And now we have a reducer.

122
00:10:42.527 --> 00:10:45.810
But I need one for the guitar.

123
00:10:45.810 --> 00:10:54.876
Okay, well if you insist stakeholders
can be so rude sometimes.

124
00:10:54.876 --> 00:10:56.923
And here we go.

125
00:10:56.923 --> 00:11:02.881
So, once this is set up adding
another reducer or another service,

126
00:11:02.881 --> 00:11:07.910
it's really not that, I mean,
it becomes negligible.

127
00:11:07.910 --> 00:11:13.268
So if you remember that graph that it
gets to the place where it's like,

128
00:11:13.268 --> 00:11:17.538
you need one of those, no problem,
you define the object and

129
00:11:17.538 --> 00:11:21.080
you have now generated it and
you're ready to go.

130
00:11:21.080 --> 00:11:26.165
So, in a lot of cases,
you absolutely can become

131
00:11:26.165 --> 00:11:31.250
10 times faster or
program 10 times faster or

132
00:11:31.250 --> 00:11:37.577
rather achieve outcomes 10
times faster by delegating and

133
00:11:37.577 --> 00:11:42.640
automating the pieces
that are conventional.

134
00:11:42.640 --> 00:11:47.693
So just kind of hammering on
this point reinforcing it is

135
00:11:47.693 --> 00:11:52.744
that we saw how what an incredible
short amount of time it

136
00:11:52.744 --> 00:11:58.667
took me to generate some reducers,
some additional templates.

137
00:11:58.667 --> 00:12:03.880
And at least in this example,
I didn't have an axios template,

138
00:12:03.880 --> 00:12:09.863
I just had a an axios file that was
specific to a specific domain model and,

139
00:12:09.863 --> 00:12:14.230
we went through,
chopped it out and, that was that.

