WEBVTT

1
00:00:00.007 --> 00:00:04.690
You can catch me on Twitter,
if you build something amazing or

2
00:00:04.690 --> 00:00:09.744
you get totally stuck or you need
some kind of a review or whatever.

3
00:00:09.744 --> 00:00:15.593
I try to make myself as available
as I possibly can to the community.

4
00:00:15.593 --> 00:00:21.786
I do like to eat, I do like to sleep and
I'd like to see my family on occasion.

5
00:00:21.786 --> 00:00:26.678
So, again,
schedule permitting that I absolutely I

6
00:00:26.678 --> 00:00:31.040
love to answer questions,
I love to interact.

7
00:00:31.040 --> 00:00:35.922
You can catch me on Twitter at
simpleton as well as LinkedIn please

8
00:00:35.922 --> 00:00:38.680
send a connection request.

9
00:00:38.680 --> 00:00:40.532
And this is absolutely,

10
00:00:40.532 --> 00:00:45.559
I would say last year I had
the opportunity to do enterprise patterns

11
00:00:45.559 --> 00:00:50.426
where I talked at length about
the four elements of programming.

12
00:00:50.426 --> 00:00:55.809
And we were able to build that
out into some really cool stuff.

13
00:00:55.809 --> 00:01:00.549
And this is I think my second love
letter to the development community and

14
00:01:00.549 --> 00:01:02.269
programming in general.

15
00:01:02.269 --> 00:01:06.475
So to that end,
I think this is super powerful,

16
00:01:06.475 --> 00:01:12.048
I use these techniques a lot, and
I feel like the joke I make is,

17
00:01:12.048 --> 00:01:15.854
take these ideas and
go make a lot of money.

18
00:01:15.854 --> 00:01:20.576
And seriously go make money with this,
and when you do,

19
00:01:20.576 --> 00:01:26.312
let me know about it, because that
to me is one of the best outcomes.

20
00:01:26.312 --> 00:01:31.151
Is that you've found a way to convert
this into a valuable outcome and

21
00:01:31.151 --> 00:01:34.581
you're being compensated
via monetary gains.

22
00:01:34.581 --> 00:01:37.442
Or you could barter for
chickens or cows or

23
00:01:37.442 --> 00:01:42.513
whatever oftentimes I do actually
barter my services but with that said,

24
00:01:42.513 --> 00:01:46.623
if you do something amazing,
I would love to hear about it.

25
00:01:46.623 --> 00:01:50.404
&gt;&gt; How would you create a mock
API that is not hard coded,

26
00:01:50.404 --> 00:01:52.768
how do you sync it with real code?

27
00:01:52.768 --> 00:01:57.781
&gt;&gt; The only thing that it's hard

28
00:01:57.781 --> 00:02:03.397
coded in this particular example

29
00:02:03.397 --> 00:02:07.816
is the interface itself.

30
00:02:07.816 --> 00:02:12.581
And so in that sense,
you absolutely want to have

31
00:02:12.581 --> 00:02:17.927
a clear API contract or
a data contract with whatever or

32
00:02:17.927 --> 00:02:22.593
whoever you're interacting
with to consume.

33
00:02:22.593 --> 00:02:27.087
When I think about hard coding,
the only thing for

34
00:02:27.087 --> 00:02:33.403
me that is hard coded in the sense
of canonical truth is the interface.

35
00:02:33.403 --> 00:02:38.036
From there,
everything else should be dynamic,

36
00:02:38.036 --> 00:02:42.227
or should have the ability to be dynamic,
but

37
00:02:42.227 --> 00:02:46.110
the interface itself is non negotiable.

38
00:02:46.110 --> 00:02:52.332
I would say as well if you're doing
automated end to end testing,

39
00:02:52.332 --> 00:02:57.650
that you want to have the ability
to mock your data out and

40
00:02:57.650 --> 00:03:01.498
test against mock data in cypress versus

41
00:03:01.498 --> 00:03:05.930
having to hit a real
server every single time.

42
00:03:05.930 --> 00:03:10.534
This is going to be the difference
between your test running in

43
00:03:10.534 --> 00:03:14.436
let's say ten minutes and
five hours in some cases.

44
00:03:14.436 --> 00:03:20.106
That you actually should have the ability
to run a test against a real API but

45
00:03:20.106 --> 00:03:24.156
you also need to have the option
to run it against a mock

46
00:03:24.156 --> 00:03:26.499
API that honors the contract.

47
00:03:26.499 --> 00:03:31.182
So, to that end,
I would say when we talk about hardcoding

48
00:03:31.182 --> 00:03:35.866
that the thing that you actually
have to be crystal clear,

49
00:03:35.866 --> 00:03:39.213
it's sacrosanct, it is almost wholly,

50
00:03:39.213 --> 00:03:44.975
is that you have to honor the contract
that needs to be written in stone.

51
00:03:44.975 --> 00:03:50.373
I say that a little bit facetiously but
if somebody changes the contract,

52
00:03:50.373 --> 00:03:53.255
there's going to be a lot of problems.

53
00:03:53.255 --> 00:03:58.988
But from there we're programmers and
we can generate anything off of that.

54
00:03:58.988 --> 00:04:03.547
So hopefully I was able to
answer that question is that,

55
00:04:03.547 --> 00:04:10.544
rarely do I hard code things if possible
and sometimes I will, if it's appropriate.

56
00:04:10.544 --> 00:04:16.486
But more often than not,
once I understand what the contract is,

57
00:04:16.486 --> 00:04:20.059
then I mean, I can generate a mock API.

58
00:04:20.059 --> 00:04:27.493
And you'll notice here like, if I refresh
this and hopefully this will work.

59
00:04:27.493 --> 00:04:29.268
And let's see if we can get this to go,

60
00:04:33.612 --> 00:04:37.528
Because this should actually think
I go between 3 and 12 and so

61
00:04:37.528 --> 00:04:40.223
occasionally you'll see a word just as 3.

62
00:04:40.223 --> 00:04:44.578
The length here is actually dynamic and
so it's even how many am I get, well,

63
00:04:44.578 --> 00:04:46.726
I don't know because it's dynamic.

64
00:04:46.726 --> 00:04:51.649
And so that's where program against
the interface everything else or

65
00:04:51.649 --> 00:04:56.664
hard code the interface or
make hard assumptions about the interface.

66
00:04:56.664 --> 00:04:59.080
Everything else should be dynamic.

67
00:04:59.080 --> 00:05:03.657
&gt;&gt; How easy is it to maintain these
templates inside an organization,

68
00:05:03.657 --> 00:05:08.558
like where do you draw the line between
building the components directly

69
00:05:08.558 --> 00:05:11.227
rather than working on the generator.

70
00:05:13.354 --> 00:05:18.128
&gt;&gt; So the question is how easy is
it to maintain the templates and

71
00:05:18.128 --> 00:05:22.807
kind of a tangent intent question
is where do we draw the line

72
00:05:22.807 --> 00:05:27.883
between working on the generator and
working on the templates?

73
00:05:27.883 --> 00:05:34.882
And so easy is absolutely
relative with that said,

74
00:05:34.882 --> 00:05:40.902
it is a lot easier here
when you have a clearly

75
00:05:40.902 --> 00:05:45.786
defined set of coding standards and

76
00:05:45.786 --> 00:05:52.653
conventions that your
organization adheres to.

77
00:05:52.653 --> 00:05:57.644
And if you are having trouble finding

78
00:05:57.644 --> 00:06:02.313
a good place to capture some kind of

79
00:06:02.313 --> 00:06:07.633
convention and automate around that.

80
00:06:07.633 --> 00:06:10.252
The question that I would ask or

81
00:06:10.252 --> 00:06:14.583
what I would want to discover
with you is your code,

82
00:06:14.583 --> 00:06:19.648
written in such a way,
do you have the right abstractions?

83
00:06:19.648 --> 00:06:25.998
Is your code fine grained enough
to allow it to be automated?

84
00:06:25.998 --> 00:06:31.663
Is it a candidate for that, so
now to just kind of summarize this,

85
00:06:31.663 --> 00:06:36.401
is that when you have clear
consistent guidelines that

86
00:06:36.401 --> 00:06:41.242
people follow,
you can treat your code generators like

87
00:06:41.242 --> 00:06:45.481
every other piece of code
in your organization.

88
00:06:45.481 --> 00:06:50.154
And so even in the sense of
you'll notice that all my

89
00:06:50.154 --> 00:06:55.165
generators that they followed
a specific interface.

90
00:06:55.165 --> 00:07:02.580
Well now, anybody could write a generator,
give it to me, and I could plug it in.

91
00:07:02.580 --> 00:07:05.947
And so again,
this is where establishing that contract.

92
00:07:05.947 --> 00:07:13.199
So, for me, and hopefully you've seen how
this works the wizard behind the curtain.

93
00:07:13.199 --> 00:07:18.323
I could write a generator from scratch,
in well,

94
00:07:18.323 --> 00:07:24.186
at least as long as this workshop and
actually much less.

95
00:07:24.186 --> 00:07:30.634
And then write various templates
to put into the generator and

96
00:07:30.634 --> 00:07:35.346
output code,
that when you do it correctly,

97
00:07:35.346 --> 00:07:41.548
effort goes down is your skill and
your perception goes up.

98
00:07:41.548 --> 00:07:46.602
So, I would say even on a personal level,
and

99
00:07:46.602 --> 00:07:51.390
you could just do this it's your own desk,

100
00:07:51.390 --> 00:07:55.380
keep it as a magic trick if you want.

101
00:07:55.380 --> 00:08:01.512
That, I'm hoping that when you
look at what we've done today,

102
00:08:01.512 --> 00:08:09.704
you realize that what I'm proposing that
some of this stuff would take 10 minutes.

103
00:08:09.704 --> 00:08:14.011
I mean we saw how long it
took me to turn the Axions

104
00:08:14.011 --> 00:08:17.907
snippet of code into a reusable template.

105
00:08:17.907 --> 00:08:21.977
And so
now when you start to factor in that,

106
00:08:21.977 --> 00:08:26.273
it actually is less effort
to have a good set of

107
00:08:26.273 --> 00:08:30.588
templates in good, well architected code.

108
00:08:30.588 --> 00:08:35.124
I think that the cost of
investment becomes negligible.

109
00:08:35.124 --> 00:08:39.343
In other words, it cost very little and
the upside is so

110
00:08:39.343 --> 00:08:45.322
high that I'm really hoping that the light
bulbs went on for a few of us today.

111
00:08:45.322 --> 00:08:47.795
And this is something that's like,

112
00:08:47.795 --> 00:08:53.319
we are going to start doing this is just
part of our regular development workflow.

113
00:08:54.610 --> 00:08:59.172
And so, again, ECS is relative,
but I believe in ECS for

114
00:08:59.172 --> 00:09:03.829
me my experience is that it's
a lot easier to actually even

115
00:09:03.829 --> 00:09:08.028
individually to generate
the conventional stuff.

116
00:09:08.028 --> 00:09:12.121
So you can focus on
the stuff that's important.

117
00:09:12.121 --> 00:09:17.175
Any tips or techniques for
dealing with non trivial data types?

118
00:09:17.175 --> 00:09:22.805
One, realize that when you're
dealing with a complex data model,

119
00:09:22.805 --> 00:09:25.786
that it's still just a data model.

120
00:09:25.786 --> 00:09:30.242
And more importantly is that
the complexity is probably not in

121
00:09:30.242 --> 00:09:34.611
the data model but
it's in the business rules that govern how

122
00:09:34.611 --> 00:09:38.651
you mutate that data model
that's been my experience.

123
00:09:38.651 --> 00:09:44.267
And treat that piece or
any of the complexity is a candidate for

124
00:09:44.267 --> 00:09:51.071
isolation and optimization by removing
the things that are unnecessary,

125
00:09:51.071 --> 00:09:55.823
consolidating the things
that are duplicated, and

126
00:09:55.823 --> 00:10:00.585
then automating the things
that are conventional.

127
00:10:00.585 --> 00:10:04.151
So the question is with mock data,
what I recommend using

128
00:10:04.151 --> 00:10:08.404
tools like mock service worker or
any number of the ones that exist?

129
00:10:08.404 --> 00:10:12.995
I know for instance, there's one
that my friend Wes Grimes wrote for

130
00:10:12.995 --> 00:10:16.120
nest, and it's called In-memory DB.

131
00:10:16.120 --> 00:10:21.944
And what it does basically is takes
an interface or a model definition and

132
00:10:21.944 --> 00:10:26.347
it generates a bunch of mock
data in memory for an SAPI.

133
00:10:26.347 --> 00:10:31.867
And the answer is
absolutely that if there's

134
00:10:31.867 --> 00:10:37.387
a tool that achieves
the outcome that you're

135
00:10:37.387 --> 00:10:42.335
looking for, leverage that to the max.

136
00:10:42.335 --> 00:10:47.295
Even there's a number of
things in terms of just

137
00:10:47.295 --> 00:10:51.889
even testing of generating mocks for test.

138
00:10:51.889 --> 00:10:56.947
If that enhances or
accelerates your ability

139
00:10:56.947 --> 00:11:03.079
to build things that people love,
absolutely use it.

140
00:11:03.079 --> 00:11:07.770
No, there was, without reservation,
that's what we're here for.

141
00:11:07.770 --> 00:11:14.460
It's how fast and how effectively
can we build relevant things.

142
00:11:14.460 --> 00:11:19.813
And so obviously it wouldn't make
sense to turn this into a wire

143
00:11:19.813 --> 00:11:25.469
cutter style dissertation,
I give this one an eight out of 10 and

144
00:11:25.469 --> 00:11:30.318
whatever is that there's so
many great tools out there.

145
00:11:30.318 --> 00:11:33.620
I couldn't possibly even begin
to touch the tip of the iceberg.

146
00:11:33.620 --> 00:11:38.324
But again, use the tools that
are available and leverage them.

147
00:11:38.324 --> 00:11:44.277
And realize that a lot of times
you get this not invented here

148
00:11:44.277 --> 00:11:51.080
syndrome worse like we didn't write it so
we're gonna rewrite it.

149
00:11:52.180 --> 00:11:56.765
Even individuals there are certain people
that just have an aversion to JavaScript

150
00:11:56.765 --> 00:11:58.934
frameworks or frameworks in general.

151
00:11:58.934 --> 00:12:04.708
And I would love to talk to one of these
individuals, or if I ever met someone and

152
00:12:04.708 --> 00:12:08.921
honestly try to understand
what their workflow is like.

153
00:12:08.921 --> 00:12:13.457
Because I suspect that what
they're doing is creating a quasi

154
00:12:13.457 --> 00:12:18.525
JavaScript framework every single
time that they create a project.

155
00:12:18.525 --> 00:12:25.108
And so at least for me, because my
identity is not wrapped up into like,

156
00:12:25.108 --> 00:12:30.283
I'm an Angular developer,
or I'm a react developer.

157
00:12:30.283 --> 00:12:37.434
So now I'm constrained by those
limiting belief is that really I think,

158
00:12:37.434 --> 00:12:44.953
for me is I wanna build great stuff
that people love, and being very candid.

159
00:12:44.953 --> 00:12:48.648
I learned that lesson the hard way when,

160
00:12:48.648 --> 00:12:54.528
in the first 10 years of my career
when I was a flash developer.

161
00:12:54.528 --> 00:12:58.773
And that is how I identified
my that was baked into my

162
00:12:58.773 --> 00:13:02.543
identity is that I am
a flash flex developer.

163
00:13:02.543 --> 00:13:08.330
And I learned very quickly that that
is a very precarious position to

164
00:13:08.330 --> 00:13:14.233
be in is that we are identity is not
baked into tools or our framework.

165
00:13:14.233 --> 00:13:19.693
Or even what we do for a living,

166
00:13:19.693 --> 00:13:27.043
it's amazing how when you ask somebody,

167
00:13:27.043 --> 00:13:32.297
so what do you do for a living?

168
00:13:32.297 --> 00:13:38.418
And without splitting hairs or becoming
pedantic is a lot of times they'll say,

169
00:13:38.418 --> 00:13:43.382
I'm an Angular developer or
I'm a React developer or whatever.

170
00:13:43.382 --> 00:13:44.040
And it's, like, that's interesting that,

171
00:13:44.040 --> 00:13:45.235
people that's what they say is like I am
a, and then they'll insert some framework.

172
00:13:45.235 --> 00:13:52.634
So a little bit,
kinda a philosophical twist in there but

173
00:13:52.634 --> 00:13:57.413
to that end the underlying ideas that

174
00:13:57.413 --> 00:14:02.191
our identity is not baked in the tools

175
00:14:02.191 --> 00:14:07.431
that we use it's the things that we do and

176
00:14:07.431 --> 00:14:11.000
the tools only support that

