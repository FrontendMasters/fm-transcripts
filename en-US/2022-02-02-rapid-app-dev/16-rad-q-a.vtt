WEBVTT

1
00:00:00.023 --> 00:00:03.020
If you start to build out the application,

2
00:00:03.020 --> 00:00:07.920
don't you have to toss these modes or
can you adapt them as you go?

3
00:00:07.920 --> 00:00:11.676
&gt;&gt; So the question is,
as we start to build out the application,

4
00:00:11.676 --> 00:00:14.290
do we toss out the modes or
do we adapt them?

5
00:00:15.320 --> 00:00:20.061
And the answer is absolutely
you can adapt them.

6
00:00:20.061 --> 00:00:23.846
And as you saw it's very,

7
00:00:23.846 --> 00:00:28.327
very easy when you have a mold.

8
00:00:28.327 --> 00:00:32.984
So again one of the most important
things is that if we don't

9
00:00:32.984 --> 00:00:37.560
repeat ourselves and
we have a canonical source of truth.

10
00:00:37.560 --> 00:00:40.304
When we change that source of truth,

11
00:00:40.304 --> 00:00:45.094
it should update everything,
that is downstream, from that.

12
00:00:45.094 --> 00:00:50.340
And so when you change a template,
then in my case,

13
00:00:50.340 --> 00:00:55.954
I'd be like, well,
we need to change this slightly.

14
00:00:55.954 --> 00:01:01.292
So let's say there was some kind
of a naming convention that,

15
00:01:01.292 --> 00:01:05.140
I needed to redo the way
that we did our API.

16
00:01:05.140 --> 00:01:10.421
So like a very, very common example
would be this like, let's say,

17
00:01:10.421 --> 00:01:15.261
depending on the layer that this
needed to have like a v1 in it.

18
00:01:15.261 --> 00:01:18.566
Well, how hard you think it is for
me to update that?

19
00:01:18.566 --> 00:01:20.688
I'm just gonna go into
the service generator.

20
00:01:20.688 --> 00:01:27.845
I'm gonna go down here, and
I'm gonna do something like this.

21
00:01:27.845 --> 00:01:35.061
Then I'm gonna go back and hopefully,
you'll see here now we have v1.

22
00:01:35.061 --> 00:01:42.810
All I had to do was adapt the template
regenerate the layer and drop it back in.

23
00:01:44.390 --> 00:01:49.620
And so I think the next question somebody
would ask rightly so is well, what if?

24
00:01:50.630 --> 00:01:53.313
What about the pieces that
you can't throw away?

25
00:01:53.313 --> 00:01:59.351
And I would say isolate those pieces.

26
00:01:59.351 --> 00:02:02.907
In abstract those into a single place so

27
00:02:02.907 --> 00:02:08.743
that everything else is conventional and
you can throw it away.

28
00:02:08.743 --> 00:02:09.569
For instance if you look at this service
here I believe you'll notice here that

29
00:02:09.569 --> 00:02:10.097
there's nothing stateful about this,
is well,

30
00:02:10.097 --> 00:02:10.767
this there's no business logic
in this particular service.

31
00:02:10.767 --> 00:02:16.860
The reason being is this

32
00:02:16.860 --> 00:02:22.344
service has one job,

33
00:02:22.344 --> 00:02:29.048
and that is communicating

34
00:02:29.048 --> 00:02:33.626
with the server.

35
00:02:33.626 --> 00:02:36.188
And whatever's returned back,

36
00:02:36.188 --> 00:02:40.864
it returns it to whoever asked for
that operation to be done.

37
00:02:40.864 --> 00:02:43.768
So there's nothing in
here that is stateful.

38
00:02:43.768 --> 00:02:48.587
There's nothing in here
that contains any logic.

39
00:02:48.587 --> 00:02:53.042
And so this is very much a candidate for,

40
00:02:53.042 --> 00:02:59.209
being an immutable layer,
because I can throw it away.

41
00:02:59.209 --> 00:03:00.812
I can regenerate it.

42
00:03:00.812 --> 00:03:05.991
And, because this does
one very specific thing,

43
00:03:05.991 --> 00:03:08.712
this allows me to do this.

44
00:03:08.712 --> 00:03:12.408
And so this is why, I will say this,

45
00:03:12.408 --> 00:03:16.600
I think angular, has done a better job,

46
00:03:16.600 --> 00:03:21.678
of creating clearer, and
well defined layers.

47
00:03:21.678 --> 00:03:27.317
That within the Angular community,
it's very, very kind of clear,

48
00:03:27.317 --> 00:03:33.147
and there's guidance on how to do
certain things that, this goes here,

49
00:03:33.147 --> 00:03:37.848
this goes here, separate this out,
especially with NX.

50
00:03:37.848 --> 00:03:39.799
That it's very easy for

51
00:03:39.799 --> 00:03:44.883
me to have very thin razor thin layers for
every little thing.

52
00:03:44.883 --> 00:03:49.329
Here's my selectors, here's my effects,

53
00:03:49.329 --> 00:03:54.243
here's my reducers,
here's my service layer,

54
00:03:54.243 --> 00:03:58.931
here's my graph SQL schemas etc,
with react.

55
00:03:58.931 --> 00:04:05.500
It's hard for me to find a canonical
sense of like this is how you do react.

56
00:04:05.500 --> 00:04:10.017
As well as, philosophically
the idea of that you kind of self

57
00:04:10.017 --> 00:04:13.838
contained everything into
a single kind of a file.

58
00:04:13.838 --> 00:04:18.884
Or into a single place seems to be
a little bit more predominant is

59
00:04:18.884 --> 00:04:25.059
that things should be more portable,
which is not a deal breaker by any means.

60
00:04:25.059 --> 00:04:29.460
It just means that you have to be a little
bit more sensitive to how you generate

61
00:04:29.460 --> 00:04:32.388
the code when you're doing
something like react.

62
00:04:32.388 --> 00:04:38.225
So this idea that within react that
you're mixing declarative markup,

63
00:04:38.225 --> 00:04:43.979
and imperative logic in their in
a single component file not a problem.

64
00:04:43.979 --> 00:04:48.783
But I do believe it diminishes
somebody's ability to generate

65
00:04:48.783 --> 00:04:50.602
kind of a slice of that.

66
00:04:50.602 --> 00:04:53.884
Because you might have
a details component for

67
00:04:53.884 --> 00:04:57.429
courses that is different
than maybe like a list.

68
00:04:57.429 --> 00:05:01.505
And if you don't have the ability to
segment out that logic that drives that

69
00:05:01.505 --> 00:05:03.587
presentation later It can be tricky.

70
00:05:03.587 --> 00:05:07.344
Now, with that said,
I do appreciate the fact that at

71
00:05:07.344 --> 00:05:11.271
least everything that I've
read within react is that,

72
00:05:11.271 --> 00:05:15.798
they definitely favor very small,
very specific components.

73
00:05:15.798 --> 00:05:20.312
So I think there's a kind of the seminal
perennial like article around,

74
00:05:20.312 --> 00:05:22.833
you know, having a component mindset.

75
00:05:22.833 --> 00:05:27.952
And I agree with that is that they
slice it a little bit differently but

76
00:05:27.952 --> 00:05:31.042
when you have these appropriate slices,

77
00:05:31.042 --> 00:05:35.208
throw a slice away regenerate it and
you're good to go.

78
00:05:35.208 --> 00:05:39.516
And this is what I think
having very clean layers of

79
00:05:39.516 --> 00:05:42.807
clean abstractions will afford you.

80
00:05:42.807 --> 00:05:48.289
&gt;&gt; Instead of overwrite, you're always
replacing rather than mutating.

81
00:05:48.289 --> 00:05:53.133
&gt;&gt; Exactly, so replace,
that's immutable versus mutate.

82
00:05:53.133 --> 00:05:56.675
&gt;&gt; Would you generate tests
alongside this generated code?

83
00:05:56.675 --> 00:06:01.601
&gt;&gt; So question is what I generate test
alongside the generated code, and

84
00:06:01.601 --> 00:06:03.527
the answer is absolutely.

85
00:06:03.527 --> 00:06:07.977
Because, if you have
a series of components,

86
00:06:07.977 --> 00:06:11.752
that are conventionally equivalent.

87
00:06:11.752 --> 00:06:17.045
And you want to test for
instance, well, I'll say this,

88
00:06:17.045 --> 00:06:22.678
is that contextually,
my components do very, very little.

89
00:06:22.678 --> 00:06:27.794
But let's say you have a container
component, that I want to check that

90
00:06:27.794 --> 00:06:32.752
when this particular event happens
that I'm issuing this command.

91
00:06:32.752 --> 00:06:35.590
Or I'm calling this method on this facade.

92
00:06:35.590 --> 00:06:40.066
And that's going to happen
the same pretty much for

93
00:06:40.066 --> 00:06:44.752
every component within the layer in so
as a result I can

94
00:06:44.752 --> 00:06:49.767
infer what the test is for
every one of those components.

95
00:06:49.767 --> 00:06:55.918
So I absolutely will generate test for
the things that I know.

96
00:06:55.918 --> 00:07:00.112
So again,
when you start to look at your code,

97
00:07:00.112 --> 00:07:03.566
you start to do pattern recognition.

98
00:07:03.566 --> 00:07:09.133
It's really interesting how
close conventional things are.

99
00:07:09.133 --> 00:07:13.506
But because we think of these vertically,
we never like, I don't know,

100
00:07:13.506 --> 00:07:14.502
a lot of people.

101
00:07:14.502 --> 00:07:20.623
I don't think that they set, and they put
five component specs next to each other,

102
00:07:20.623 --> 00:07:23.695
and they're like, how close are these?

103
00:07:23.695 --> 00:07:28.608
And it's not that you would eliminate
them, because it's not duplication,

104
00:07:28.608 --> 00:07:29.883
it's convention.

105
00:07:29.883 --> 00:07:33.549
But you would say these
are conventionally exactly the same.

106
00:07:33.549 --> 00:07:35.072
What if I just created and so

107
00:07:35.072 --> 00:07:38.330
a lot of times what people do
is they create a code snippet.

108
00:07:39.700 --> 00:07:43.130
And so this is why you have code
snippet extensions for VS code.

109
00:07:43.130 --> 00:07:47.267
But they know like, because they haven't
thought about like, well, what if I

110
00:07:47.267 --> 00:07:51.529
could just write a small thing everything
that we've done here is in stack Blitz,

111
00:07:51.529 --> 00:07:52.675
this is in the cloud.

112
00:07:52.675 --> 00:07:57.739
This is about as I think, is,
I don't want to say low tech, but

113
00:07:57.739 --> 00:08:03.875
there's very little ceremony and
dependencies around what we're doing.

114
00:08:03.875 --> 00:08:05.077
I'm in a browser and

115
00:08:05.077 --> 00:08:09.762
I'm just writing some code like there's
nothing sophisticated about this.

116
00:08:09.762 --> 00:08:14.887
And so this is where again,
if you've ever used good templates,

117
00:08:14.887 --> 00:08:20.961
like code snippets or whatever,
you appreciate the velocity that gets you.

118
00:08:20.961 --> 00:08:27.932
But, I want to challenge you, to realize
that how to do this everybody does.

119
00:08:27.932 --> 00:08:31.707
If you know how to write
a reduce function.

120
00:08:31.707 --> 00:08:38.392
And how to work array.split array.join
there's no reason why you can't

121
00:08:38.392 --> 00:08:43.922
build a full fledged code generator and
be 10 times faster.

122
00:08:43.922 --> 00:08:49.119
&gt;&gt; How would a project develop from the
design of the domain models to deployment.

123
00:08:49.119 --> 00:08:52.844
&gt;&gt; A portion of what I
have done here today and

124
00:08:52.844 --> 00:08:57.528
interestingly enough
the first this was originally

125
00:08:57.528 --> 00:09:02.647
going to be called
Domain Driven Development Patterns.

126
00:09:02.647 --> 00:09:08.301
And there's certainly an element
of that here I think the extension

127
00:09:08.301 --> 00:09:13.559
of this is I realized like what
I'm talking about is a precursor

128
00:09:13.559 --> 00:09:19.830
to what is a very well established
practice of domain driven development.

129
00:09:21.030 --> 00:09:26.170
But this leads me into
a demo that I set up.

130
00:09:26.170 --> 00:09:32.134
This is in the readme, but
we will transition to that.

131
00:09:32.134 --> 00:09:39.290
So perfect segue in to domain driven
design, development and event storming.

