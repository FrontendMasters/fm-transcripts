WEBVTT

1
00:00:00.000 --> 00:00:05.202
So we've talked about domain models and
the role that that plays in,

2
00:00:05.202 --> 00:00:09.777
I think, really being kind of
the Genesis of everything that

3
00:00:09.777 --> 00:00:14.730
we are going to build off of
in terms of our application.

4
00:00:14.730 --> 00:00:19.182
And so the next extension
of this is we're going to

5
00:00:19.182 --> 00:00:23.846
revisit our previous initial
primer exercise, and

6
00:00:23.846 --> 00:00:28.680
we're going to talk about
string manipulation.

7
00:00:28.680 --> 00:00:33.833
And so what I wanna do is,
we'll just step out of the slides,

8
00:00:33.833 --> 00:00:39.710
because there was only one, and
I want to look at just a piece of code.

9
00:00:40.730 --> 00:00:42.850
This is from one of the examples.

10
00:00:42.850 --> 00:00:46.167
So if you have any
questions of what this is,

11
00:00:46.167 --> 00:00:49.493
I think this might be
the red stack example.

12
00:00:49.493 --> 00:00:55.141
But more so, I wanted to just pull
up a piece of functional code and

13
00:00:55.141 --> 00:00:58.730
just point out a couple things.

14
00:00:58.730 --> 00:01:04.562
So, this is operating on
top of the course entity,

15
00:01:04.562 --> 00:01:11.220
and so you'll notice here we
have Course with a capital C.

16
00:01:12.610 --> 00:01:17.342
Then we have Courses
plural with a capital C,

17
00:01:17.342 --> 00:01:20.838
then we have courses lowercase.

18
00:01:20.838 --> 00:01:23.152
And if we keep going down,

19
00:01:23.152 --> 00:01:28.941
you'll see here that we have this
interesting typed parameter,

20
00:01:28.941 --> 00:01:33.478
of course, lowercase,
colon Course uppercase.

21
00:01:33.478 --> 00:01:40.510
And if we scroll down, I'm looking for
something specific here.

22
00:01:43.030 --> 00:01:48.028
You'll see here that we have uppercase,
so in the case of a constant

23
00:01:48.028 --> 00:01:52.614
and, There's one more I was looking for,

24
00:01:52.614 --> 00:01:55.643
If I can't find it,
I'm not going to cry for Argentina.

25
00:01:55.643 --> 00:02:02.255
But the idea is that when you
are puling out pieces of a template,

26
00:02:02.255 --> 00:02:07.520
one of the biggest challenges
that you're going to

27
00:02:07.520 --> 00:02:15.070
have when you're hydrating it is
coming up with model name variations.

28
00:02:15.070 --> 00:02:20.345
And so this is why in the primer,
we went ahead and

29
00:02:20.345 --> 00:02:25.365
we experimented with
some ways to replace some

30
00:02:25.365 --> 00:02:30.890
strings, build a couple different things.

31
00:02:30.890 --> 00:02:37.794
And one thing that I do wanna call
out here is that if you go to Lodash,

32
00:02:37.794 --> 00:02:42.640
and I would say that what
you're going to see any

33
00:02:42.640 --> 00:02:47.021
competent string manipulation library.

34
00:02:47.021 --> 00:02:52.020
In fact, a lot of it's even baked
into a lot of just languages

35
00:02:52.020 --> 00:02:56.738
itself is going to have these
functions baked into them.

36
00:02:56.738 --> 00:03:01.412
But with that said, for instance,
if we go to Lodash, they have and

37
00:03:01.412 --> 00:03:05.926
I might have passed it,
they have an entire section for strings.

38
00:03:05.926 --> 00:03:10.434
So camelCase, well,
this is something we use.

39
00:03:10.434 --> 00:03:17.472
Capitalize, kebabCase,
lowerCase, and on and on.

40
00:03:17.472 --> 00:03:23.489
What I believe, this is just
a recommendation from me to you,

41
00:03:23.489 --> 00:03:27.191
hashtag pro tip, is that, I think and

42
00:03:27.191 --> 00:03:32.052
I highly recommend,
if you're using a library,

43
00:03:32.052 --> 00:03:36.477
experiment with building
a version of that.

44
00:03:36.477 --> 00:03:40.906
So I think one of the best
examples is if you use redux,

45
00:03:40.906 --> 00:03:45.570
take the time to build redux,
do it at least once.

46
00:03:45.570 --> 00:03:50.553
And what you'll realize is that you can
build a version of Redux in less than ten

47
00:03:50.553 --> 00:03:52.230
minutes.

48
00:03:52.230 --> 00:03:57.055
But what that does is it gives you
a much clearer sense of what's

49
00:03:57.055 --> 00:03:59.490
happening under the hood.

50
00:03:59.490 --> 00:04:01.143
And I think to a point,

51
00:04:01.143 --> 00:04:06.545
almost I think the essence of the pattern
suddenly becomes a lot clearer.

52
00:04:06.545 --> 00:04:11.960
The other piece is that if you
only need four or five functions,

53
00:04:11.960 --> 00:04:16.148
a lot of times it's easier
just to write those and

54
00:04:16.148 --> 00:04:21.171
segment them out instead of
pulling in an entire library.

55
00:04:21.171 --> 00:04:24.965
So I have nothing against Lodash, in fact,

56
00:04:24.965 --> 00:04:29.899
I think that I actually use
it in various circumstances.

57
00:04:29.899 --> 00:04:34.500
But in the case of this context,
in this exercise,

58
00:04:34.500 --> 00:04:40.385
that we are doing what somebody
would rightfully conclude that,

59
00:04:40.385 --> 00:04:43.708
well, can't you do this in Lodash?

60
00:04:43.708 --> 00:04:48.572
And the answer is yes but
it is important, I believe,

61
00:04:48.572 --> 00:04:54.858
to take the time to go ahead and
write some of these things initially.

62
00:04:54.858 --> 00:05:01.203
So that once you understand it, then you
can leverage it in an automated fashion.

63
00:05:01.203 --> 00:05:06.614
So I've said this before, if you're using
a CLI, don't let that be a crutch and

64
00:05:06.614 --> 00:05:10.524
a barrier between you truly
learning what's happening.

65
00:05:10.524 --> 00:05:15.338
So again, we don't need to learn more, we
need to understand what we already know.

66
00:05:15.338 --> 00:05:20.345
So, if we go to this example
in our stack blitz, so

67
00:05:20.345 --> 00:05:27.286
this is gonna be rad hyphen name,
hyphen generator, hyphen start.

68
00:05:27.286 --> 00:05:33.864
We are going to see the bits and pieces
that we started in the previous exercise.

69
00:05:33.864 --> 00:05:38.893
So we have, replace,
stripDashes, stripUnderscores,

70
00:05:38.893 --> 00:05:42.925
stripSpaces, addDashes, addUnderscores.

71
00:05:42.925 --> 00:05:47.802
And these all are entirely built
upon this replace function here,

72
00:05:47.802 --> 00:05:51.897
which is it takes a string,
a target, a character, and

73
00:05:51.897 --> 00:05:57.740
a sub character, and it's just
splitting and joining it together.

74
00:05:57.740 --> 00:06:03.801
But notice here that I have five
incredibly useful functions that

75
00:06:03.801 --> 00:06:10.410
are just delegating to an underlying
more general function.

76
00:06:10.410 --> 00:06:14.910
And if you really wanted to get fancy,
you could do partial application.

77
00:06:14.910 --> 00:06:18.260
I'm not gonna get into that because it
would take me 20 minutes to explain it.

78
00:06:18.260 --> 00:06:21.951
But we have a very basic function and

79
00:06:21.951 --> 00:06:26.873
we are drilling down in
terms of specificity but

80
00:06:26.873 --> 00:06:32.050
just delegating from one
function into another.

81
00:06:33.280 --> 00:06:37.663
A few other functions that I have
here that I'll just call out.

82
00:06:37.663 --> 00:06:39.836
If I wanna lowercase something,

83
00:06:39.836 --> 00:06:44.966
it's just s toLowerCase toUpperCase
as well as capitalize, decapitalize.

84
00:06:44.966 --> 00:06:47.373
All I'm doing there is I'm saying,

85
00:06:47.373 --> 00:06:50.944
give me the first character and
I wanna uppercase it and

86
00:06:50.944 --> 00:06:56.243
then I wanna take everything after the
first character and just add it together.

87
00:06:56.243 --> 00:07:00.969
And if we wanted to
capitalize an entire string,

88
00:07:00.969 --> 00:07:05.941
we would split on space,
then map over that array.

89
00:07:05.941 --> 00:07:08.953
We know what this is,
capitalize the first letters and

90
00:07:08.953 --> 00:07:11.449
then put it back together
in terms of spaces.

91
00:07:11.449 --> 00:07:16.314
So we had a number of words
that were all lowercase.

92
00:07:16.314 --> 00:07:19.991
You could call this function,
it would split on the space, loop over,

93
00:07:19.991 --> 00:07:22.886
capitalize all the words and
then put it back together.

94
00:07:22.886 --> 00:07:26.914
And this is super handy and
it's most of these, well,

95
00:07:26.914 --> 00:07:30.514
all of these are basically
a single line of code.

96
00:07:30.514 --> 00:07:35.543
Now the one thing that
I do wanna call out or

97
00:07:35.543 --> 00:07:39.710
I want to just point out here is that

98
00:07:39.710 --> 00:07:44.912
JavaScript is a lisp in Java's clothing.

99
00:07:44.912 --> 00:07:48.626
So under the hood, even with TypeScript,

100
00:07:48.626 --> 00:07:53.477
that it looks like a traditional
classical language and

101
00:07:53.477 --> 00:07:58.753
we have types, classes,
private, public members, etc.

102
00:07:58.753 --> 00:08:04.279
But under the hood, it is a lisp,
it was written to be a lisp because

103
00:08:04.279 --> 00:08:09.542
lisps are very easy languages
in terms of compilers to create.

104
00:08:09.542 --> 00:08:11.427
So this is what Brendan Eich did.

105
00:08:11.427 --> 00:08:16.144
But because of marketing reasons,
it became JavaScript.

106
00:08:16.144 --> 00:08:21.303
But with that said is it lends itself to
functional programming principles and

107
00:08:21.303 --> 00:08:23.266
I'm not gonna get into that.

108
00:08:23.266 --> 00:08:28.943
FrontEnd Masters has a ton of amazing
functional JavaScript concepts.

109
00:08:28.943 --> 00:08:33.277
I will not do justice to
anything that Brian Lonsdorf or

110
00:08:33.277 --> 00:08:38.272
Will Sentance or any of those
amazing structures would have but

111
00:08:38.272 --> 00:08:42.057
I have two functions here
that I am leveraging.

112
00:08:42.057 --> 00:08:46.839
So one is a pipe function that
takes in two parameters and

113
00:08:46.839 --> 00:08:51.521
it returns a new function
that accepts arguments, and

114
00:08:51.521 --> 00:08:57.041
then whatever these two functions are,
it will then call them.

115
00:08:57.041 --> 00:08:59.420
And so
it's basically taking two functions,

116
00:08:59.420 --> 00:09:01.130
calling one inside of the other.

117
00:09:01.130 --> 00:09:06.226
And then we have a wrapper
function that allows us to

118
00:09:06.226 --> 00:09:11.216
then pass in a number of
functions as parameters.

119
00:09:11.216 --> 00:09:12.845
And then we're looping over and

120
00:09:12.845 --> 00:09:15.990
we're essentially iterating
over that chain of functions.

121
00:09:15.990 --> 00:09:19.950
So this is pretty hardcore
functional stuff but

122
00:09:19.950 --> 00:09:25.300
what this allows us to do is
create these transformation pipes.

123
00:09:25.300 --> 00:09:29.672
So for instance, if I wanted to
strip a string with dashes and

124
00:09:29.672 --> 00:09:34.250
underscores, I simply create
a function called strip.

125
00:09:34.250 --> 00:09:40.680
And then I define that as transformPipe,
stripDashes stripUnderscores.

126
00:09:40.680 --> 00:09:44.776
Now where this gets interesting, is that
what if I wanted to do start case, so

127
00:09:44.776 --> 00:09:49.700
basically this title case where everything
is capitalized, the first letter.

128
00:09:49.700 --> 00:09:53.945
I would strip everything of
underscores and dashes, and

129
00:09:53.945 --> 00:09:57.480
then I would capitalize everything.

130
00:09:57.480 --> 00:09:59.830
Well, what if I wanted to do pascalCase?

131
00:09:59.830 --> 00:10:03.339
So that's essentially everything is
capitalized and then it's put together, so

132
00:10:03.339 --> 00:10:04.830
the spaces are removed.

133
00:10:04.830 --> 00:10:08.540
Well, I would essentially
turn it into startCase and

134
00:10:08.540 --> 00:10:10.690
then I would strip the spaces.

135
00:10:12.180 --> 00:10:14.000
What if I wanted to do camelCase?

136
00:10:14.000 --> 00:10:17.132
So the difference between pascalCase and

137
00:10:17.132 --> 00:10:21.100
camelCase is the first
letter is lowercase.

138
00:10:21.100 --> 00:10:24.765
So I would say, turn this into pascalCase,
which is gonna say, okay,

139
00:10:24.765 --> 00:10:29.480
well I'm gonna turn this into startCase
but then I'm gonna strip it first.

140
00:10:29.480 --> 00:10:34.494
Both camelCase and so pascalCase and
then it decapitalizes the first letter.

141
00:10:34.494 --> 00:10:39.633
So this is why a lot of times you'll
see something that looks like this,

142
00:10:39.633 --> 00:10:42.128
so let's say we had user courses.

143
00:10:44.808 --> 00:10:49.646
Is this is a camelCase and
this is pascalCase, so

144
00:10:49.646 --> 00:10:54.484
all we're doing is just
making this lowercase.

145
00:10:54.484 --> 00:10:58.120
And then we have snakeCase,
kebabCase and constantCase,

146
00:10:58.120 --> 00:11:02.346
and all we're doing is we're taking
these small little functions.

147
00:11:02.346 --> 00:11:07.013
And we're transforming
them into these pipes that

148
00:11:07.013 --> 00:11:11.147
we're able to send
whatever we want into it.

149
00:11:11.147 --> 00:11:14.238
And it's just passing it from
one function to another.

150
00:11:14.238 --> 00:11:18.507
But under the hood,
we have these very simple,

151
00:11:18.507 --> 00:11:22.465
single purpose, fine grained functions.

152
00:11:22.465 --> 00:11:25.660
So functional programming for the win.

