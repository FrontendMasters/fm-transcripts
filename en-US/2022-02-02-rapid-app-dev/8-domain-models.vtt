WEBVTT

1
00:00:00.523 --> 00:00:01.802
Let's get tactical.

2
00:00:01.802 --> 00:00:07.136
We have spent a little bit of time
talking about some high level concepts.

3
00:00:07.136 --> 00:00:15.318
But now we're going to start to see
how these concepts apply to code.

4
00:00:15.318 --> 00:00:20.197
And so this is the progression that

5
00:00:20.197 --> 00:00:24.241
we're going to go through.

6
00:00:24.241 --> 00:00:29.308
When I think of application development,

7
00:00:29.308 --> 00:00:33.951
I think of it like a spreadsheet that you

8
00:00:33.951 --> 00:00:38.595
have your data and you take this data and

9
00:00:38.595 --> 00:00:44.390
you put it into a cell and
the cell exists in a row.

10
00:00:44.390 --> 00:00:50.912
And when you stack those cells up
vertically, you have a column.

11
00:00:50.912 --> 00:00:58.304
And so, when I think of what am I
building, where does it fit, well,

12
00:00:58.304 --> 00:01:03.926
I think of am I thinking about the data or
the schema?

13
00:01:03.926 --> 00:01:08.328
Or am I thinking about the template,

14
00:01:08.328 --> 00:01:13.724
the cell, or
the entire layer which is a row or

15
00:01:13.724 --> 00:01:16.993
stack, which is a column?

16
00:01:16.993 --> 00:01:25.292
And so, I want to start with the first
demo which is domain models.

17
00:01:25.292 --> 00:01:30.442
This is where we're gonna start,
rad-domain-models-start,

18
00:01:30.442 --> 00:01:33.161
and we are going to work from there.

19
00:01:33.161 --> 00:01:40.369
So in the code,
in this particular example,

20
00:01:40.369 --> 00:01:45.111
what we'll see here is that we

21
00:01:45.111 --> 00:01:50.435
have a form, super compelling.

22
00:01:50.435 --> 00:01:53.835
And I'm gonna put this in zen mode.

23
00:01:53.835 --> 00:01:58.722
And this is what or
this is where I want to start,

24
00:01:58.722 --> 00:02:05.447
that when we understand a domain entity,
even subconsciously,

25
00:02:05.447 --> 00:02:11.314
we make all sorts of inferences
about the rest of the app,

26
00:02:11.314 --> 00:02:16.719
including the form required
to manage that entity.

27
00:02:16.719 --> 00:02:21.679
So, for instance, if I said, hey,

28
00:02:21.679 --> 00:02:25.199
what do you think a form for

29
00:02:25.199 --> 00:02:30.486
this album interface would look like?

30
00:02:30.486 --> 00:02:34.724
Well, yes,
I know it's sitting right over here.

31
00:02:34.724 --> 00:02:38.833
So this is pretty obvious,

32
00:02:38.833 --> 00:02:44.201
title description to text fields.

33
00:02:44.201 --> 00:02:48.016
Now, let's take a user.

34
00:02:48.016 --> 00:02:53.991
What do you think a user
form would look like?

35
00:02:53.991 --> 00:02:58.896
So, again,
I have to imagine that we're not having

36
00:02:58.896 --> 00:03:03.141
to exercise too much
creative thought here.

37
00:03:03.141 --> 00:03:07.785
That first name, text field, last name,

38
00:03:07.785 --> 00:03:12.822
text field, email, text field, password.

39
00:03:12.822 --> 00:03:17.380
It's a text field but
it's of type password, in so

40
00:03:17.380 --> 00:03:22.049
much that if I made a change to this and
I went active,

41
00:03:25.452 --> 00:03:28.687
And I said this is of type boolean,

42
00:03:28.687 --> 00:03:34.713
immediately I have to imagine
that you have mentally said,

43
00:03:34.713 --> 00:03:38.190
well, that's gonna be a check box.

44
00:03:38.190 --> 00:03:42.186
And so we can look at a domain model or,
in this case, an interface.

45
00:03:42.186 --> 00:03:46.361
And so I use that word interchangeably,
for the most part it is.

46
00:03:46.361 --> 00:03:51.391
It's that when I talk about a domain
model, I'm talking about something

47
00:03:51.391 --> 00:03:56.028
that is in your domain that's been
modeled and defined in some way.

48
00:03:56.028 --> 00:04:00.679
In most cases, either an interface or,
by extension, a schema will do.

49
00:04:00.679 --> 00:04:04.230
So, Within this interface,

50
00:04:04.230 --> 00:04:08.473
we can look at this and say,
I know what this form is gonna look like.

51
00:04:08.473 --> 00:04:13.363
And all the interface is
telling us is the type or

52
00:04:13.363 --> 00:04:18.143
the property that exists,
what type that is.

53
00:04:18.143 --> 00:04:24.872
But we can extend our ability to describe
these properties using a schema.

54
00:04:24.872 --> 00:04:29.556
And so I'm borrowing from loosely off of

55
00:04:29.556 --> 00:04:34.791
something like JSON schema
to where I am using

56
00:04:34.791 --> 00:04:39.913
a mechanism to describe
what a property is.

57
00:04:39.913 --> 00:04:42.510
And so,
this is information about this property.

58
00:04:42.510 --> 00:04:48.686
So model, modelPlural, and then props.

59
00:04:48.686 --> 00:04:53.414
And so I want to describe the properties
for whatever the schema is.

60
00:04:53.414 --> 00:04:59.461
And now I have an interface here and I'm
saying this is just going to be a string.

61
00:04:59.461 --> 00:05:04.708
That's going to have really
anything on the right side of this,

62
00:05:04.708 --> 00:05:07.436
but this is what this looks like.

63
00:05:07.436 --> 00:05:12.613
So, here we have props which has a key,
a type,

64
00:05:12.613 --> 00:05:16.894
and then I have some template options.

65
00:05:16.894 --> 00:05:23.025
So album title, placeholder required.

66
00:05:23.025 --> 00:05:27.095
And so
I'm able to then take the schema and,

67
00:05:27.095 --> 00:05:31.826
using a tool like Formly,
or there is another one,

68
00:05:31.826 --> 00:05:38.318
I think it's called React JSON schema,
so there's an equivalent for

69
00:05:38.318 --> 00:05:44.837
React, I can take the schema and
feed it right into a tool like Formly.

70
00:05:44.837 --> 00:05:52.119
And it's going to generate the form for
that entity based off of the schema.

71
00:05:52.119 --> 00:05:55.209
And so, as a starting point,

72
00:05:55.209 --> 00:06:00.403
we realize that when we
have a domain definition,

73
00:06:00.403 --> 00:06:05.608
that there's a lot of things
we can know about it.

74
00:06:05.608 --> 00:06:09.769
The most obvious and the most tangible

75
00:06:09.769 --> 00:06:14.717
is the form that we use
to manage that entity.

76
00:06:14.717 --> 00:06:19.412
So what I'm going to do
is a challenge to myself,

77
00:06:19.412 --> 00:06:24.681
which I welcome everybody to
follow along is I'm going

78
00:06:24.681 --> 00:06:30.766
to create a user schema and
then update this forum to render it.

79
00:06:30.766 --> 00:06:34.354
So real quick,
I'm gonna come out of zen mode so

80
00:06:34.354 --> 00:06:38.862
I have a little bit more spot space and
let me move this over.

81
00:06:38.862 --> 00:06:40.417
I don't know how that got in there.

82
00:06:40.417 --> 00:06:43.948
All right, so I'm out of zen mode, and

83
00:06:43.948 --> 00:06:50.373
I've moved the render pane over so
that I have all the room I need to fly.

84
00:06:50.373 --> 00:06:54.376
So I'm going to create a user schema.

85
00:06:54.376 --> 00:06:57.453
So let's go ahead and try this.

86
00:06:57.453 --> 00:07:03.861
So const userSchema and
we're gonna to type this as Schema.

87
00:07:03.861 --> 00:07:08.451
And we have some things that
we need to do to satisfy this.

88
00:07:08.451 --> 00:07:15.345
So the first thing is model, and so
I always do a singular version of this,

89
00:07:15.345 --> 00:07:20.923
and then I have modelPlural for
the plural version of this.

90
00:07:20.923 --> 00:07:25.268
Now the reason why I do this
explicitly is because, guess what?

91
00:07:25.268 --> 00:07:28.116
English is weird.

92
00:07:28.116 --> 00:07:34.425
So for instance,
what is the plural of pony?

93
00:07:34.425 --> 00:07:37.245
Well, it's not this.

94
00:07:37.245 --> 00:07:40.982
So I can't just add an s to the end
of it because then it becomes ponys.

95
00:07:40.982 --> 00:07:46.794
And so rather than having to rely on some
third party library or try to figure this

96
00:07:46.794 --> 00:07:52.971
out, I think it's just easier to just type
the plural version of it once and for all.

97
00:07:52.971 --> 00:07:58.213
And then from here,
we need to define our props.

98
00:07:58.213 --> 00:08:02.334
So we're gonna go props and
we are going to add this in.

99
00:08:02.334 --> 00:08:09.554
Now, when I do this,
what I'm hoping is you watch me do this.

100
00:08:09.554 --> 00:08:12.054
Pay attention to this process.

101
00:08:16.079 --> 00:08:22.167
I start an object, I go key, and
we're going to go firstName.

102
00:08:22.167 --> 00:08:28.603
We'll go type is going to be input, and
we're going to go template options.

103
00:08:28.603 --> 00:08:34.912
And we're going to give
this a label of First Name,

104
00:08:34.912 --> 00:08:41.086
not Frist Name, First Name,
and a placeholder.

105
00:08:44.034 --> 00:08:47.945
Enter a first name, and

106
00:08:47.945 --> 00:08:55.190
we are going to set this to required,
okay?

107
00:08:55.190 --> 00:09:00.311
Now, watch what I do here.

108
00:09:03.298 --> 00:09:05.761
I have three more properties to go.

109
00:09:05.761 --> 00:09:11.238
And so what's funny about this,
what I'm proposing,

110
00:09:11.238 --> 00:09:15.906
we kinda do this already
without realizing it.

111
00:09:17.017 --> 00:09:22.592
I think copy and
paste might be probably the most inelegant

112
00:09:22.592 --> 00:09:28.758
code generator that exists, but
it's still a code generator.

113
00:09:28.758 --> 00:09:32.988
So now I'm just gonna go here, lastName.

114
00:09:34.406 --> 00:09:40.005
Enter a last name, and
I'm being very intentional

115
00:09:40.005 --> 00:09:46.656
about this particular ceremony
that I am participating in.

116
00:09:46.656 --> 00:09:54.132
So, email, We're gonna go email.

117
00:09:54.132 --> 00:09:58.663
And let's just go ahead and operate under

118
00:09:58.663 --> 00:10:03.842
the assumption that
everything that I need, or

119
00:10:03.842 --> 00:10:09.293
everything I've defined here,
that we need it.

120
00:10:09.293 --> 00:10:14.199
So I need an email and
I need a password or

121
00:10:14.199 --> 00:10:17.632
you cannot log in, sorry.

122
00:10:17.632 --> 00:10:22.426
So we'll go here password and

123
00:10:22.426 --> 00:10:25.501
enter a password.

124
00:10:25.501 --> 00:10:29.701
And I believe if my memory
serves me correctly,

125
00:10:29.701 --> 00:10:34.218
I think I can go just type here and
type in password.

126
00:10:34.218 --> 00:10:35.074
Hopefully this works.

127
00:10:38.202 --> 00:10:42.042
Now notice,
all I've done is taken the interface and

128
00:10:42.042 --> 00:10:44.528
I've converted it into a schema.

129
00:10:44.528 --> 00:10:46.097
So let me bring this code back here.

130
00:10:50.333 --> 00:10:52.814
And I'm actually gonna
give this a hard refresh.

131
00:10:52.814 --> 00:10:54.953
We'll put this to the side.

132
00:10:54.953 --> 00:11:02.960
And now let's go ahead and we're going
to replace albumSchema with userSchema.

133
00:11:02.960 --> 00:11:08.433
First Name, last name, email, password.

134
00:11:08.433 --> 00:11:11.460
And let's go ahead and
see if this ended up.

135
00:11:11.460 --> 00:11:14.578
Now, what's interesting, and

136
00:11:14.578 --> 00:11:20.369
I think what's really cool about
this particular example and

137
00:11:20.369 --> 00:11:25.950
why I chose it is that notice
when I put in my email here that,

138
00:11:33.983 --> 00:11:39.272
Notice this interface here,
or this object that's

139
00:11:39.272 --> 00:11:44.319
generated off the form is
pretty much identical to

140
00:11:44.319 --> 00:11:50.102
this interface definition over here,
this would pass.

141
00:11:50.102 --> 00:11:54.416
And so, just as code is strings that,

142
00:11:55.831 --> 00:12:02.605
Or characters that we use to
essentially expand out to infinity,

143
00:12:02.605 --> 00:12:08.148
that that next layer that if
code is strings is atoms,

144
00:12:08.148 --> 00:12:12.721
then I consider this to
be maybe a molecule.

145
00:12:12.721 --> 00:12:17.663
That you'll notice here that what
is being generated off of this

146
00:12:17.663 --> 00:12:19.591
matches the interface.

147
00:12:19.591 --> 00:12:24.033
And so, this leads me to one
example that I wasn't for

148
00:12:24.033 --> 00:12:29.066
sure, or at least a point that
I wanted to make, I wasn't for

149
00:12:29.066 --> 00:12:33.113
sure where it was going to
end up in the workshop,

150
00:12:33.113 --> 00:12:36.210
but this is, I think, a good place.

151
00:12:36.210 --> 00:12:42.368
When I was a teenager,
I had a friend that lived in Missouri and

152
00:12:42.368 --> 00:12:46.522
I went and stayed with him and his father.

153
00:12:46.522 --> 00:12:51.187
They lived out in the middle of nowhere,
little, tiny house, and on the property,

154
00:12:51.187 --> 00:12:55.345
they had a double wide trailer, and
this is where his father worked out of.

155
00:12:55.345 --> 00:13:02.695
And what his father did is
that he made molds and,

156
00:13:02.695 --> 00:13:10.779
but more importantly is that
he made molds for molds.

157
00:13:10.779 --> 00:13:16.428
So, if you imagine that we need
to make a bunch of molds for

158
00:13:16.428 --> 00:13:20.924
a manufacturing plant,
this is what he did.

159
00:13:20.924 --> 00:13:27.197
And I had the opportunity to sit and
watch him build a bunch of these molds.

160
00:13:27.197 --> 00:13:30.934
And in a way,
he's building these metal molds.

161
00:13:30.934 --> 00:13:35.873
But what was really
interesting about it is that

162
00:13:35.873 --> 00:13:40.194
the molds that he would make looked very,

163
00:13:40.194 --> 00:13:46.121
very close to the original
artifact with some additional

164
00:13:46.121 --> 00:13:51.937
tooling around it so
that to accommodate the work flow.

165
00:13:51.937 --> 00:13:58.011
And so this is where, when you think
about molds, how do you build a mold?

166
00:13:58.011 --> 00:14:04.007
Well, you start with the real thing or
at least a version of it,

167
00:14:04.007 --> 00:14:09.213
and then you make a mold around that,
and then what that

168
00:14:09.213 --> 00:14:16.362
outputs is essentially almost equivalent
to what you use to make the mold.

169
00:14:16.362 --> 00:14:20.856
And so, when we think of co-generation and

170
00:14:20.856 --> 00:14:25.957
templates specifically,
I think of templates as

171
00:14:25.957 --> 00:14:31.180
the mold with some additional
tooling that you'll

172
00:14:31.180 --> 00:14:36.524
start to realize that
the thing that I'm generating

173
00:14:36.524 --> 00:14:43.590
looks very close to the mold that
I'm using to define the generator.

174
00:14:43.590 --> 00:14:49.476
And so, just as much is, if we look at and
we're like I need to build 1,000 forms,

175
00:14:49.476 --> 00:14:54.396
or I have this Christmas ornament and
I need to build 1,000 of them,

176
00:14:54.396 --> 00:14:57.783
well, what we don't want to do is be like,
well,

177
00:14:57.783 --> 00:15:01.764
let me get out the whittling knife and
let's get started.

178
00:15:01.764 --> 00:15:05.664
Absolutely not,
this is where plastic injection molding or

179
00:15:05.664 --> 00:15:08.723
whatever comes in,
is that we are starting with

180
00:15:08.723 --> 00:15:12.560
something that looks as close
to the original as possible.

181
00:15:12.560 --> 00:15:15.817
I think interfaces
are pretty good at this.

182
00:15:15.817 --> 00:15:18.740
And then we're building
some tooling around it so

183
00:15:18.740 --> 00:15:21.951
that we can stamp out versions
of what we've defined.

184
00:15:21.951 --> 00:15:26.569
So I think a lot of times an interface to
an actual concrete instance is kind of

185
00:15:26.569 --> 00:15:27.736
that transition.

186
00:15:27.736 --> 00:15:32.266
When I think of molds and building molds,
this is where this comes in.

187
00:15:32.266 --> 00:15:34.519
&gt;&gt; I use Formly extensively at my job, but

188
00:15:34.519 --> 00:15:38.905
I hadn't thought about abstracting
the fields props to a different model.

189
00:15:38.905 --> 00:15:41.748
What would you do if they
needed dynamic properties?

190
00:15:41.748 --> 00:15:46.444
Wrap the props inside a function that
returns the formal lay field config?

191
00:15:46.444 --> 00:15:50.792
&gt;&gt; The person who asked this question,
if I had a t shirt gun, and

192
00:15:50.792 --> 00:15:53.984
we were at a game,
I would shoot you a t shirt.

193
00:15:53.984 --> 00:15:56.306
That is the best question ever,

194
00:15:56.306 --> 00:16:00.348
is extracting out the props and
generating off of that,

195
00:16:00.348 --> 00:16:06.034
the question is what would you do if you
needed to dynamically generate props?

196
00:16:06.034 --> 00:16:11.427
Would you create a function that
would then generate the props and

197
00:16:11.427 --> 00:16:16.147
then output that,
then you would then feed in to Formly?

198
00:16:16.147 --> 00:16:18.269
And the answer is yes.

199
00:16:18.269 --> 00:16:19.745
That's the point.

200
00:16:19.745 --> 00:16:22.590
Things are starting to click.

201
00:16:22.590 --> 00:16:26.148
We are programmers.

202
00:16:26.148 --> 00:16:31.741
And a lot of times,
it's a lot faster to write the code

203
00:16:31.741 --> 00:16:36.713
that writes the code
instead of doing a one off,

204
00:16:36.713 --> 00:16:42.454
I'm just gonna write this here and
I'm going to do it.

205
00:16:42.454 --> 00:16:44.251
And so that is a great question.

206
00:16:44.251 --> 00:16:49.114
And if you needed to
dynamically generate props to

207
00:16:49.114 --> 00:16:54.341
feed into Formly,
this is exactly what you would do.

208
00:16:54.341 --> 00:16:59.276
You would write little
bit of code to write

209
00:16:59.276 --> 00:17:04.212
the real code that you
feed in as a schema.

210
00:17:04.212 --> 00:17:06.090
So very good question.

211
00:17:06.090 --> 00:17:10.615
[LAUGH] This is, essentially,
you have arrived at the entire

212
00:17:10.615 --> 00:17:15.330
essence of this is that let's
use code to solve code problems.

