WEBVTT

1
00:00:00.000 --> 00:00:06.162
The next example that I want
to pull up in the primer is

2
00:00:06.162 --> 00:00:11.500
the ability to dynamically
invoke a method.

3
00:00:11.500 --> 00:00:15.319
So I have four methods here, add,

4
00:00:15.319 --> 00:00:19.151
subtract, divide and multiply.

5
00:00:19.151 --> 00:00:26.437
And in this case we're taking a and b and
we're doing something with this so,

6
00:00:26.437 --> 00:00:32.619
from here I have defined an action and
it has two properties on it.

7
00:00:32.619 --> 00:00:34.383
So it's an action object.

8
00:00:34.383 --> 00:00:38.825
It has a funk property for
function and params and so

9
00:00:38.825 --> 00:00:42.510
it's taking a parameters object.

10
00:00:42.510 --> 00:00:48.180
Now the one thing I will point out is
that when you're doing dynamic method

11
00:00:48.180 --> 00:00:54.598
invocation, you may not always know what
your parameter signature is going to be.

12
00:00:54.598 --> 00:00:59.311
As a result, I prefer to put in
a single parameter object and

13
00:00:59.311 --> 00:01:01.300
then using JavaScript.

14
00:01:02.300 --> 00:01:09.100
I like to D structure the parameters that
I want to use from the parameters itself.

15
00:01:09.100 --> 00:01:14.379
So in this case, I'm passing in a single
object, and then I'm pulling a and

16
00:01:14.379 --> 00:01:18.603
b off of it performing some
calculation and sending it back.

17
00:01:18.603 --> 00:01:26.753
Now we have a single transaction which is
just a single action or we have a ledger.

18
00:01:26.753 --> 00:01:30.771
So imagine that you're working
like a cashier stand or

19
00:01:30.771 --> 00:01:35.575
you're doing some kind of math and
these different events happen

20
00:01:35.575 --> 00:01:40.136
that you need to either multiply,
divide, add or subtract.

21
00:01:40.136 --> 00:01:45.028
And so the question is,

22
00:01:45.028 --> 00:01:52.128
how do we execute a single action.

23
00:01:52.128 --> 00:01:53.109
How can we accomplish that?

24
00:01:53.109 --> 00:02:00.059
So, I am going to just delete everything
that was there and we will build this out.

25
00:02:00.059 --> 00:02:04.400
So, to execute a single action,

26
00:02:04.400 --> 00:02:08.748
we can create an execute method.

27
00:02:08.748 --> 00:02:15.247
And this takes in
a single action property.

28
00:02:15.247 --> 00:02:18.196
And then from here,

29
00:02:18.196 --> 00:02:23.227
we're just going to call action,

30
00:02:23.227 --> 00:02:27.048
funk, action, params.

31
00:02:27.048 --> 00:02:30.947
And so we are able to store
a reference to that function and

32
00:02:30.947 --> 00:02:35.104
then take a parameter object D
structure it and then call it.

33
00:02:35.104 --> 00:02:40.580
So in this case if I wanted to execute

34
00:02:40.580 --> 00:02:45.694
the single transaction we'll go

35
00:02:45.694 --> 00:02:51.903
const result execute, transaction and

36
00:02:51.903 --> 00:02:57.015
then from here let's go ahead and

37
00:02:57.015 --> 00:03:02.511
realize it's looking for output.

38
00:03:02.511 --> 00:03:04.866
So let me just go ahead and
define that real quick.

39
00:03:04.866 --> 00:03:09.768
So now, I have my result, and if I go down

40
00:03:09.768 --> 00:03:14.962
here we can see that
the result of the single

41
00:03:14.962 --> 00:03:19.890
invocation was, well let's see here.

42
00:03:19.890 --> 00:03:25.666
I want to add 1 and 3,
I could update this to be five and,

43
00:03:28.409 --> 00:03:32.244
83, and you'll see here it's 88.

44
00:03:32.244 --> 00:03:37.381
So just this very, very simple idea of we
are storing a reference to a function,

45
00:03:37.381 --> 00:03:41.153
and then we're storing
a reference to the parameter map.

46
00:03:41.153 --> 00:03:47.178
And then we are able to essentially
call this at some point.

47
00:03:47.178 --> 00:03:52.983
And so now I could take this transaction
object it stored in a database,

48
00:03:52.983 --> 00:03:55.999
pull this out, and then execute it.

49
00:03:55.999 --> 00:04:00.369
So what this represents,
and this is really,

50
00:04:00.369 --> 00:04:05.636
really important is simple and
basic is this is that this

51
00:04:05.636 --> 00:04:12.267
represents something that can happen
now or it anytime in the future.

52
00:04:12.267 --> 00:04:17.340
So now we're starting to play
with space and time just a bit.

53
00:04:17.340 --> 00:04:21.337
And so the next question is, well,

54
00:04:21.337 --> 00:04:25.744
how can we execute an array of actions?

55
00:04:25.744 --> 00:04:29.337
So what would this look like?

56
00:04:29.337 --> 00:04:36.685
Well, what I can do is
underneath this output,

57
00:04:36.685 --> 00:04:42.747
I can go and go ledger for each action and

58
00:04:42.747 --> 00:04:49.198
we will from here I'm going to go output.

59
00:04:53.181 --> 00:04:57.987
Within this we're going to
capture the output of every

60
00:04:57.987 --> 00:05:01.652
one of these particular action objects.

61
00:05:01.652 --> 00:05:04.219
So, we're gonna go action.

62
00:05:04.219 --> 00:05:07.524
Well, before I do that, so real quick,

63
00:05:07.524 --> 00:05:12.950
I can go action.func(action.params) And

64
00:05:12.950 --> 00:05:18.078
let me update this from constant let,
there we go.

65
00:05:18.078 --> 00:05:23.433
And if we go here,
what we see is that it's

66
00:05:23.433 --> 00:05:28.336
just kind of bunching them together.

67
00:05:28.336 --> 00:05:29.951
So let's fix this.

68
00:05:29.951 --> 00:05:36.346
So within here, I'm gonna just
enter a newline character output,

69
00:05:36.346 --> 00:05:41.184
who would have thought that
that was case sensitive

70
00:05:42.881 --> 00:05:49.422
Now what I've done here and hopefully
everybody kind of saw this is like,

71
00:05:49.422 --> 00:05:53.553
well, aren't you kind
of doing that up here?

72
00:05:53.553 --> 00:05:59.832
And so I realized and this is
important that when you are coding,

73
00:05:59.832 --> 00:06:06.576
have your spidey sense on so
that if you type something you're like,

74
00:06:06.576 --> 00:06:10.786
wait a second,
I feel like I just did this.

75
00:06:10.786 --> 00:06:15.081
Then this is an opportunity to stop and

76
00:06:15.081 --> 00:06:20.593
realize like can I optimize this so
in this case.

77
00:06:22.738 --> 00:06:28.234
I was able to refer to the smaller
function that I defined up here and

78
00:06:28.234 --> 00:06:34.614
so on by having fine grained single
purpose functions that they do one thing,

79
00:06:34.614 --> 00:06:40.129
we're able to composite it together
in a much more efficient way.

80
00:06:40.129 --> 00:06:45.695
Also something that is very,
very important.

81
00:06:45.695 --> 00:06:50.751
Now, this is kinda cool, but
the problem is that we actually

82
00:06:50.751 --> 00:06:56.417
have six different results or
four different results in this case.

83
00:06:56.417 --> 00:07:02.334
We have unique distinct results whereas
there is back to the clothesline

84
00:07:02.334 --> 00:07:07.378
a lot of circumstances where
instead of just going through and

85
00:07:07.378 --> 00:07:14.168
just kind of outputting stuff Into these
individual kind of function executions.

86
00:07:14.168 --> 00:07:19.186
We want to contain that into
a single collection and

87
00:07:19.186 --> 00:07:23.863
ideally, preserve the previous collection.

88
00:07:23.863 --> 00:07:29.186
So I'm gonna go here, ledger and so,
we'll just switch this up to map.

89
00:07:29.186 --> 00:07:34.504
We're going to go action and then

90
00:07:38.844 --> 00:07:43.867
From here, we are going

91
00:07:43.867 --> 00:07:48.137
to then go execute,

92
00:07:48.137 --> 00:07:51.661
action, okay.

93
00:07:51.661 --> 00:07:58.160
Now what we're gonna see here is
that map returns a brand new array.

94
00:07:58.160 --> 00:08:04.865
So we were able to preserve an array or
preserve this order and

95
00:08:04.865 --> 00:08:10.265
push it back into a new
array which is important.

96
00:08:10.265 --> 00:08:11.571
Last one.

97
00:08:11.571 --> 00:08:17.219
Instead of having a collection
of transformed objects,

98
00:08:17.219 --> 00:08:23.817
you may want to condense this into
a single value that is returned.

99
00:08:23.817 --> 00:08:28.196
And so this is where reduce comes in.

100
00:08:28.196 --> 00:08:32.945
So from here ledger, reduce.

101
00:08:32.945 --> 00:08:38.121
And now,
the typical parameter signature for

102
00:08:38.121 --> 00:08:41.704
reduce is something like ACC for

103
00:08:41.704 --> 00:08:45.825
accumulated plus CURR for current.

104
00:08:45.825 --> 00:08:51.475
I tend to deviate after that and
so in my case,

105
00:08:51.475 --> 00:08:56.250
I'm gonna go with output and action.

106
00:08:57.530 --> 00:09:02.267
And I don't have a strong opinion
on this if you wanna preserve

107
00:09:02.267 --> 00:09:06.091
the original API,
I find that it is a lot easier for

108
00:09:06.091 --> 00:09:11.669
me when I update the parameters to be
a little bit more self documenting.

109
00:09:11.669 --> 00:09:13.960
So we're going to return,

110
00:09:19.793 --> 00:09:24.166
Execute, action.

111
00:09:24.166 --> 00:09:28.192
And we're going to start with,

112
00:09:32.786 --> 00:09:41.511
An empty string, And this was actually
a little more verbose than I needed to be.

113
00:09:48.264 --> 00:09:51.968
So, I need to go.

114
00:09:55.673 --> 00:10:01.468
And then I'm just going to
return this We save this,

115
00:10:05.276 --> 00:10:13.579
[LAUGH] And now what we have is
some sweet string concatenation.

116
00:10:13.579 --> 00:10:17.914
And execute action.

117
00:10:17.914 --> 00:10:20.940
This is so, why this is happening?

118
00:10:20.940 --> 00:10:23.932
Because guess what we're doing,
math operations, and

119
00:10:23.932 --> 00:10:25.563
I put an empty string in there.

120
00:10:25.563 --> 00:10:30.673
So this is the real result, which is 13.

121
00:10:30.673 --> 00:10:36.839
And so, hopefully,
question to the audience.

122
00:10:38.840 --> 00:10:47.410
On a scale of 1 to 10, how complex
was the JavaScript that we just did?

123
00:10:47.410 --> 00:10:51.724
Hopefully, you're not super offended in
the sense of like, I came here to learn

124
00:10:51.724 --> 00:10:55.920
how to do magic tricks or came here to
learn how to do something really complex.

125
00:10:55.920 --> 00:11:00.456
And we start out by wax in the car,
wax on,

126
00:11:00.456 --> 00:11:05.510
wax off painting the fence
is that in my opinion

127
00:11:05.510 --> 00:11:12.909
that I would say in terms of complexity
this is maybe a two or a three.

128
00:11:14.280 --> 00:11:19.210
We're doing some basic
string concatenation.

129
00:11:19.210 --> 00:11:24.691
We are doing some basic
higher order JavaScript

130
00:11:24.691 --> 00:11:28.809
functions for each map and reduce.

131
00:11:28.809 --> 00:11:34.493
So I'd give this maybe a two or three, so
hopefully everybody we're looking at this

132
00:11:34.493 --> 00:11:39.955
and we're saying this is approachable,
just some basic high order functions.

133
00:11:39.955 --> 00:11:44.928
And so, this is it.

134
00:11:44.928 --> 00:11:49.749
This is in terms of JavaScript,
in JavaScript complexity.

135
00:11:49.749 --> 00:11:54.350
This is as far as we are going.

136
00:11:54.350 --> 00:11:59.555
And with that said we are going to
take these very basic techniques, and

137
00:11:59.555 --> 00:12:04.520
we're going to start to assemble
them into some very powerful tools

