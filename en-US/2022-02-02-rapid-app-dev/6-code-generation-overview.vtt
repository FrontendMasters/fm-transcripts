WEBVTT

1
00:00:00.230 --> 00:00:01.960
Let's talk about architecture.

2
00:00:01.960 --> 00:00:06.890
I've used this quote before, I will keep
using this quote, because I think it's so

3
00:00:06.890 --> 00:00:08.360
absolutely important.

4
00:00:08.360 --> 00:00:13.980
So this is from a paper called Out of
the Tarpit Ben Moseley Peter Marks.

5
00:00:13.980 --> 00:00:19.390
If you Google it, you can find it,
it's free and I recommend reading

6
00:00:19.390 --> 00:00:25.006
I don't know about half way through
the paper it got a little academic.

7
00:00:25.006 --> 00:00:29.888
But right in the first page,
they make this point, and,

8
00:00:29.888 --> 00:00:32.440
it has stuck with ever since.

9
00:00:33.610 --> 00:00:35.414
The biggest problem in the development and

10
00:00:35.414 --> 00:00:38.870
maintenance of large scale
software systems is complexity.

11
00:00:38.870 --> 00:00:41.270
Large systems are hard to understand.

12
00:00:41.270 --> 00:00:47.680
Everybody collectively just be like,
duh but what do we mean by complexity?

13
00:00:47.680 --> 00:00:52.190
We believe that the major
contributor to this complexity in

14
00:00:52.190 --> 00:00:55.256
many systems is the handling of state and

15
00:00:55.256 --> 00:01:01.133
the burden that this adds when trying
to analyze and reason about the system.

16
00:01:01.133 --> 00:01:05.213
Other closely related
contributors are code volume,

17
00:01:05.213 --> 00:01:10.189
and explicit concern with the flow
of control through the system.

18
00:01:10.189 --> 00:01:14.392
So, for me, I believe that Redux and

19
00:01:14.392 --> 00:01:22.258
by extension NgRx is probably one
of the most important inventions or

20
00:01:22.258 --> 00:01:27.834
compositions in the modern
frontend web stack.

21
00:01:27.834 --> 00:01:32.970
And when we look at complexity,
more on this,

22
00:01:32.970 --> 00:01:37.711
that there are a number
of layers that exist

23
00:01:37.711 --> 00:01:42.810
within an entire application stack.

24
00:01:42.810 --> 00:01:46.929
You have your cloud infrastructure.

25
00:01:46.929 --> 00:01:52.810
You have Nx, NgRx, Component
Driven Architecture, Observables.

26
00:01:52.810 --> 00:01:56.921
And what's interesting about this is that,
so

27
00:01:56.921 --> 00:02:00.415
one you could replace NgRx with Redux and

28
00:02:00.415 --> 00:02:05.992
depending on how you do react,
this still absolutely applies.

29
00:02:05.992 --> 00:02:11.730
That every one of these layers
are concerned with managing complexity.

30
00:02:13.400 --> 00:02:17.362
At a micro level, so
observables are phenomenal,

31
00:02:17.362 --> 00:02:20.034
because at an interaction level or

32
00:02:20.034 --> 00:02:26.133
an event level it allows you to manage
state, flow control, and code volume.

33
00:02:26.133 --> 00:02:31.904
And as you start to iterate over this
that component driven architecture

34
00:02:31.904 --> 00:02:36.736
allows you to manage complexity
at the presentation layer.

35
00:02:36.736 --> 00:02:42.757
That NgRx or Redux allows you to manage
complexity at the state layer or

36
00:02:42.757 --> 00:02:45.720
the application layer.

37
00:02:45.720 --> 00:02:50.507
Nx when I say Nx, I mean Nx Dev tools
by Narwhal that this allows you

38
00:02:50.507 --> 00:02:54.512
to manage complexity at
the file structure level, and

39
00:02:54.512 --> 00:03:00.366
then infrastructure level that you can
use things like infrastructures code.

40
00:03:00.366 --> 00:03:05.175
I'm a pretty big fan of
the serverless framework, lambda and

41
00:03:05.175 --> 00:03:07.774
these different things Docker.

42
00:03:07.774 --> 00:03:12.851
But ultimately what you're doing is you're
managing complexity at a macro level.

43
00:03:12.851 --> 00:03:17.717
And so when we realize that we're
managing complexity kind of

44
00:03:17.717 --> 00:03:22.677
in this vertical orientation on the stack,
that we can start to

45
00:03:22.677 --> 00:03:27.840
think about like what are the patterns
that exist going this way?

46
00:03:29.290 --> 00:03:34.487
And at the same time, historically,
when we build applications and

47
00:03:34.487 --> 00:03:39.423
so this is a really, really important
shift that we need to make.

48
00:03:39.423 --> 00:03:44.466
We think of application development
in a vertical sense of like

49
00:03:44.466 --> 00:03:48.788
we've got this feature and
we need to build this thing.

50
00:03:48.788 --> 00:03:52.525
So we might need to build
the component layer and

51
00:03:52.525 --> 00:03:57.291
then we need to build like the state
layer then we need to build

52
00:03:57.291 --> 00:04:02.347
let's say your HTTP layer to
your server communication layer.

53
00:04:02.347 --> 00:04:05.878
And then you move on the next feature and

54
00:04:05.878 --> 00:04:11.561
you move on the next feature and
you move on to the next feature.

55
00:04:11.561 --> 00:04:15.386
And so this is when we think
of application development.

56
00:04:15.386 --> 00:04:22.382
And we are vertically oriented just by
default this is just how this works so

57
00:04:22.382 --> 00:04:30.690
if you think about how our teams organized
typically within an organization well.

58
00:04:30.690 --> 00:04:34.804
It's usually around product teams or

59
00:04:34.804 --> 00:04:39.173
feature teams and the problem is that and

60
00:04:39.173 --> 00:04:46.643
remember I said we are managing
complexity at these various levels.

61
00:04:46.643 --> 00:04:54.676
That across these features we are managing
that complexity the same exact way.

62
00:04:54.676 --> 00:04:59.347
But when you are in a vertical slice if

63
00:04:59.347 --> 00:05:03.717
you solve a problem in one slice and

64
00:05:03.717 --> 00:05:09.143
somebody else solves it in another slice,

65
00:05:09.143 --> 00:05:12.627
how do you know about that?

66
00:05:12.627 --> 00:05:18.749
And so what you have is,
you have these decoupled architecture

67
00:05:18.749 --> 00:05:24.292
in not a good way I would say
it's essentially cohesion,

68
00:05:24.292 --> 00:05:27.542
that like anti cohesion versus.

69
00:05:27.542 --> 00:05:31.299
And so now we think of just by default
vertical development I building

70
00:05:31.299 --> 00:05:34.408
this feature and
I'm working on this layer right here and

71
00:05:34.408 --> 00:05:37.670
then I'm gonna move to this one
I'm gonna move to this one.

72
00:05:38.740 --> 00:05:43.456
And we fail to realise
that as we build our

73
00:05:43.456 --> 00:05:48.729
features that there is
a lot of commonality,

74
00:05:48.729 --> 00:05:56.813
a lot of patterns to be recognized
across all of the components.

75
00:05:56.813 --> 00:06:02.290
There is a lot of convention
that exist across

76
00:06:02.290 --> 00:06:08.055
the logic layer around
all of these features and

77
00:06:08.055 --> 00:06:12.105
the data layer exactly the same.

78
00:06:12.105 --> 00:06:17.341
And so what we start to notice
is that when you start to

79
00:06:17.341 --> 00:06:22.458
shift your thinking from
a vertical orientation,

80
00:06:22.458 --> 00:06:29.843
I'm thinking about this implementation
in the context of this feature.

81
00:06:29.843 --> 00:06:35.495
And you start to think about
your applications horizontally

82
00:06:35.495 --> 00:06:41.934
in other words not about the feature but
about the particular layer.

83
00:06:41.934 --> 00:06:47.057
So I don't want to think about
the service for courses so

84
00:06:47.057 --> 00:06:52.725
I have a service course I want to
think about all of the services

85
00:06:52.725 --> 00:06:58.626
that this allows you to start to
notice patterns of convention.

86
00:06:58.626 --> 00:07:03.219
This also allows you to notice
patterns of duplication to

87
00:07:03.219 --> 00:07:06.770
where like I'm doing this thing over here.

88
00:07:06.770 --> 00:07:13.718
But over here in this other feature,
I'm doing this thing over here.

89
00:07:13.718 --> 00:07:19.928
And as a result, we realized that for
convention that this is a candidate,

90
00:07:19.928 --> 00:07:25.449
we can optimize this through
automation and through automation,

91
00:07:25.449 --> 00:07:29.802
that tactically we can build tools for
generation.

92
00:07:29.802 --> 00:07:35.719
In terms of duplication, that duplication
is optimized via elimination.

93
00:07:35.719 --> 00:07:38.788
How do we do that?

94
00:07:38.788 --> 00:07:44.221
Well consolidation and
so if you remember back

95
00:07:44.221 --> 00:07:49.246
to my quote complexity managing of state.

96
00:07:49.246 --> 00:07:54.505
So now with Redux the reason why I love
this is you have all of your code or

97
00:07:54.505 --> 00:07:59.141
all of your state in a single
state tree you are eliminating all

98
00:07:59.141 --> 00:08:01.573
these floating stateful bits.

99
00:08:01.573 --> 00:08:05.646
And you're consolidating them
into a single state tree.

100
00:08:05.646 --> 00:08:10.798
And its the same time, is that with
reactive frameworks like angular and

101
00:08:10.798 --> 00:08:16.118
react, that you're now because
everything is consolidated, it's a lot

102
00:08:16.118 --> 00:08:21.363
easier to control how that information
flows through your application.

103
00:08:21.363 --> 00:08:26.236
So unidirectional data flow, you even get
a separation between commands and queries.

104
00:08:26.236 --> 00:08:30.131
So when they say state
flows down events flow up,

105
00:08:30.131 --> 00:08:35.179
well queries state flows down,
that's all in one direction.

106
00:08:35.179 --> 00:08:39.872
You have an established one way street,
unidirectional for

107
00:08:39.872 --> 00:08:45.750
those four state to flow down, and
then you can issue commands back up.

108
00:08:45.750 --> 00:08:52.540
And so you start to recognize the patterns
between convention and duplication.

109
00:08:52.540 --> 00:08:57.302
More importantly,
it's really important to understand

110
00:08:57.302 --> 00:09:00.419
that convention is not duplication.

111
00:09:00.419 --> 00:09:06.619
And so it's very common with
like Redux and NgRx to say like,

112
00:09:06.619 --> 00:09:11.362
well, there's just all
this boilerplate and

113
00:09:11.362 --> 00:09:16.227
boilerplate implies code
that doesn't need to

114
00:09:16.227 --> 00:09:20.994
exist extraneous code, ie duplicated code.

115
00:09:20.994 --> 00:09:26.321
And just because something
looks similar to something else

116
00:09:26.321 --> 00:09:31.444
doesn't mean that they're
doing the same exact thing.

117
00:09:31.444 --> 00:09:33.809
In fact, if they're operating
on different domain models,

118
00:09:33.809 --> 00:09:35.634
they're definitely not
doing the same thing.

119
00:09:35.634 --> 00:09:42.885
In other words, you couldn't just replace
one with the other and vice versa.

120
00:09:42.885 --> 00:09:47.196
And so it's really important to understand
that duplication is not convention

121
00:09:47.196 --> 00:09:49.008
convention is not duplication.

122
00:09:49.008 --> 00:09:54.223
And convention is good because
it presents an opportunity for

123
00:09:54.223 --> 00:09:58.936
automation via generation duplication,
believe it or

124
00:09:58.936 --> 00:10:03.650
not, when you recognize it
presents an opportunity for

125
00:10:03.650 --> 00:10:06.476
elimination by consolidation.

126
00:10:06.476 --> 00:10:12.739
So, when we achieve clear functional
cohesion from cleanly abstracted layers,

127
00:10:12.739 --> 00:10:16.289
natural patterns of
convention will emerge.

128
00:10:16.289 --> 00:10:19.522
So this is really, really important and

129
00:10:19.522 --> 00:10:25.046
I don't want to rush to this statement
because it's a little dense.

130
00:10:25.046 --> 00:10:31.184
But when we're able to take our code and
create functional cohesion,

131
00:10:31.184 --> 00:10:35.760
other words that things that
do similar things are or

132
00:10:35.760 --> 00:10:41.188
perform a function is that
they're being grouped together.

133
00:10:41.188 --> 00:10:43.236
So, cohesion is basically
just logical grouping.

134
00:10:43.236 --> 00:10:47.975
It's like the opposite of
coupling that when we can create

135
00:10:47.975 --> 00:10:52.723
functional cohesion into cleanly,
abstracted layers.

136
00:10:52.723 --> 00:10:57.945
That all of a sudden you start
to realize that there is

137
00:10:57.945 --> 00:11:03.772
a lot of convention that exists
within this application.

138
00:11:07.504 --> 00:11:10.330
And so, this is too big for a tweet but,

139
00:11:10.330 --> 00:11:16.960
fine-grained functionality reduces
code variance between domain models.

140
00:11:16.960 --> 00:11:21.995
This is why if you go read any
classic architecture book and,

141
00:11:21.995 --> 00:11:26.834
not even classic like,
pretty much most architects, and

142
00:11:26.834 --> 00:11:31.740
people that are creating
content in the space.

143
00:11:31.740 --> 00:11:38.048
That they're constantly talking about
fine grained single purpose code.

144
00:11:38.048 --> 00:11:42.963
So, fine grained functionality,
reduces covariances between domain models.

145
00:11:42.963 --> 00:11:47.563
And when you have fine grained
functionality what you

146
00:11:47.563 --> 00:11:51.957
realize is that performing
an action on one model is

147
00:11:51.957 --> 00:11:56.776
almost identical to the same
action on any other model.

