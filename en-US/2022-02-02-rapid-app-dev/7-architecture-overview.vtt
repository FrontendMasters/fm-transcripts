WEBVTT

1
00:00:00.000 --> 00:00:03.335
When we look at this reducer,
it's for courses.

2
00:00:03.335 --> 00:00:06.503
And so my initial course is state, and

3
00:00:06.503 --> 00:00:10.666
then I'm handling a bunch
of different actions.

4
00:00:10.666 --> 00:00:13.932
So you can see here, well,
what are these actions?

5
00:00:13.932 --> 00:00:18.896
Well, the course is actions,
and they're doing corsi

6
00:00:18.896 --> 00:00:23.244
things like load course,
create course, etc.

7
00:00:23.244 --> 00:00:28.240
Well, you may not realize this,
but I just switched the slide.

8
00:00:28.240 --> 00:00:32.509
And how you would know
this is if I just go back,

9
00:00:32.509 --> 00:00:36.250
one is for courses, one is for lessons.

10
00:00:36.250 --> 00:00:39.180
And if I hold these side by side,
what's different?

11
00:00:41.060 --> 00:00:46.129
The only thing that is
different is the fact that

12
00:00:46.129 --> 00:00:51.333
we are dealing with two
separate domain models.

13
00:00:51.333 --> 00:00:58.083
This is good convention, and this is
why good architecture is so powerful.

14
00:00:58.083 --> 00:01:03.685
And so I wanna take you on
a quick horizontal tour.

15
00:01:03.685 --> 00:01:06.270
So instead of saying,
let's talk about an application,

16
00:01:06.270 --> 00:01:07.755
let's talk about the features.

17
00:01:07.755 --> 00:01:10.831
We have the courses feature,
we have the users feature,

18
00:01:10.831 --> 00:01:12.443
we have the lessons feature.

19
00:01:12.443 --> 00:01:18.599
And this is going to set the stage for
us to start to get into code.

20
00:01:18.599 --> 00:01:20.321
So horizontal tour.

21
00:01:20.321 --> 00:01:24.887
And this is around NGRX or
really Redux is very,

22
00:01:24.887 --> 00:01:28.668
very conventional in this way as well.

23
00:01:28.668 --> 00:01:34.638
When you are writing your
state layer using any NGRX or

24
00:01:34.638 --> 00:01:38.229
Redux, you have your actions.

25
00:01:38.229 --> 00:01:42.797
Well, these are so simple,
we don't even write test for them, but

26
00:01:42.797 --> 00:01:44.253
you have selectors.

27
00:01:44.253 --> 00:01:47.308
They're very simple,
they're very conventional.

28
00:01:47.308 --> 00:01:54.960
You have entities, simple, conventional,
reducers, simple, conventional, facade.

29
00:01:54.960 --> 00:01:58.627
Now, this is a hot topic, but
I am profacades because it

30
00:01:58.627 --> 00:02:03.360
decouples the component layer
from the rest of the application.

31
00:02:03.360 --> 00:02:08.061
In other words, I don't believe your
component layer should be coupled to

32
00:02:08.061 --> 00:02:12.690
the implementation details of how
you manage state, different course,

33
00:02:12.690 --> 00:02:14.510
different workshop.

34
00:02:14.510 --> 00:02:19.842
But I will say this, it should be
simple as it's a delegation layer.

35
00:02:19.842 --> 00:02:26.614
Effects, well, these are complex as it
contains asynchronous business logic.

36
00:02:26.614 --> 00:02:28.700
And then your initial wiring.

37
00:02:28.700 --> 00:02:33.102
So this is semi complex as
it is initially tedious.

38
00:02:33.102 --> 00:02:39.949
When we start talking about CLIs,
you'll see this as being the case.

39
00:02:39.949 --> 00:02:45.115
But think about this before I go into
the next kind of version of this,

40
00:02:45.115 --> 00:02:47.330
where we extend this.

41
00:02:47.330 --> 00:02:49.798
If you have two airlines, and

42
00:02:49.798 --> 00:02:54.738
I know this because I've
actually built an application for

43
00:02:54.738 --> 00:03:00.100
an airline, you have two airlines,
and they have mobile apps.

44
00:03:01.650 --> 00:03:04.700
What is going to change
from one app to the other?

45
00:03:06.010 --> 00:03:07.187
For the most part,

46
00:03:07.187 --> 00:03:11.757
the domain models are identical because
the infrastructure is the same.

47
00:03:11.757 --> 00:03:16.225
Guess what,
they're flying airplanes into airports,

48
00:03:16.225 --> 00:03:20.227
and they have passengers and
pilots and tickets and

49
00:03:20.227 --> 00:03:25.700
reservations, and so
their domain models are the same.

50
00:03:25.700 --> 00:03:30.933
What changes from one
application to another?

51
00:03:30.933 --> 00:03:35.180
Two things, in my opinion,
so put my thumb down.

52
00:03:35.180 --> 00:03:42.511
One, UI UX and your business domain logic.

53
00:03:42.511 --> 00:03:47.892
So for instance,
Southwest has different business rules for

54
00:03:47.892 --> 00:03:51.315
travelers versus American Airlines.

55
00:03:51.315 --> 00:03:55.629
The domain models are the same,
the business logic is different,

56
00:03:55.629 --> 00:03:57.948
the user experience is different.

57
00:03:57.948 --> 00:04:01.461
For the most part,
everything else is identical.

58
00:04:01.461 --> 00:04:06.423
The things that change from
application to application is

59
00:04:06.423 --> 00:04:10.380
typically your UI UX and
your business logic.

60
00:04:11.560 --> 00:04:16.648
And I propose that this is
where you should spend 90% of

61
00:04:16.648 --> 00:04:23.541
your time in the software development
lifecycle is one, nailing your UI UX.

62
00:04:23.541 --> 00:04:30.236
And then building rock solid
logic around your business layer.

63
00:04:30.236 --> 00:04:36.159
Everything else find a way to automate it,
be rapid about it.

64
00:04:36.159 --> 00:04:40.772
Be rad about it so
you can focus on the things that matter,

65
00:04:40.772 --> 00:04:43.670
your business logic and your UI UX.

66
00:04:43.670 --> 00:04:47.902
So, I'm gonna just flip
through these real quick.

67
00:04:47.902 --> 00:04:50.836
But what I want you to notice
is that these are very,

68
00:04:50.836 --> 00:04:52.755
very small basic pieces of code.

69
00:04:52.755 --> 00:04:56.724
So actions, they're conventional.

70
00:04:56.724 --> 00:04:59.401
Selectors, they're conventional.

71
00:04:59.401 --> 00:05:03.769
Entities, these are very conventional.

72
00:05:03.769 --> 00:05:06.405
Reducers, conventional.

73
00:05:06.405 --> 00:05:12.553
And what's interesting about this is
that when NGRX implemented entities,

74
00:05:12.553 --> 00:05:18.528
they basically borrowed directly from
the Redux how they are handling it.

75
00:05:18.528 --> 00:05:22.450
So, the code is very simple or similar.

76
00:05:22.450 --> 00:05:26.071
So entities, reducers, all together.

77
00:05:26.071 --> 00:05:30.859
This is, again,
notice that these are very small pieces

78
00:05:30.859 --> 00:05:35.564
of code that are put together,
a conventional facade.

79
00:05:35.564 --> 00:05:42.571
And so, I will point out at the top,
we are executing a query on the store,

80
00:05:42.571 --> 00:05:48.950
so you have a clearly segmented
section for your queries.

81
00:05:48.950 --> 00:05:53.477
And underneath of it, we are just patching
actions, which is a clear separation for

82
00:05:53.477 --> 00:05:54.321
your command.

83
00:05:54.321 --> 00:05:59.069
So command query or separation is,
I think really important.

84
00:05:59.069 --> 00:06:04.972
And then our effects, so
this is where the complexity comes in.

85
00:06:04.972 --> 00:06:10.678
And this can be very complex, but this is
where you should spend most of your time.

86
00:06:10.678 --> 00:06:16.172
Wiring, so this is typically for me that
I prefer to take all of my state slices,

87
00:06:16.172 --> 00:06:21.760
and then put them into a single reducer
that I then register with my application.

88
00:06:22.870 --> 00:06:27.715
So this is angular and NGRX, but
these are the little things that they take

89
00:06:27.715 --> 00:06:31.830
a little bit of time, but
they can be automated.

90
00:06:31.830 --> 00:06:37.639
So in terms of a basic front end project,
same thing.

91
00:06:37.639 --> 00:06:42.620
HTTP services, simple conventional,
your container components, conventional.

92
00:06:43.730 --> 00:06:47.949
I like to do a list presentation
component, conventional,

93
00:06:47.949 --> 00:06:50.608
details component, conventional.

94
00:06:50.608 --> 00:06:54.558
Your basic shell, well,
now, we're back into UI UX.

95
00:06:54.558 --> 00:06:56.417
So this is semi complex.

96
00:06:56.417 --> 00:06:59.531
Styling, this can become very complex.

97
00:06:59.531 --> 00:07:01.920
Project generation,
simple and conventional.

98
00:07:01.920 --> 00:07:04.905
So, just blowing through these real quick,

99
00:07:04.905 --> 00:07:08.460
this is what an HTTP service
looks like in Angular.

100
00:07:08.460 --> 00:07:13.228
It looks even simpler using Axios in
React, which we'll see a little bit later.

101
00:07:13.228 --> 00:07:16.555
Container component, simple.

102
00:07:16.555 --> 00:07:19.246
Here is the component itself.

103
00:07:19.246 --> 00:07:22.850
Notice, the one thing I wanna
point out is I flip through these.

104
00:07:22.850 --> 00:07:26.134
Notice how small my functions are,

105
00:07:26.134 --> 00:07:31.150
they are fine grained
single purpose functions.

106
00:07:31.150 --> 00:07:36.046
The reason being is that I am
reducing the potential for

107
00:07:36.046 --> 00:07:39.780
code variants at each individual layer.

108
00:07:41.170 --> 00:07:46.488
This component, list component,
I mean, this is beauty.

109
00:07:46.488 --> 00:07:51.486
I think this type of a presentation
component is one of the prettiest things

110
00:07:51.486 --> 00:07:52.448
in the world.

111
00:07:52.448 --> 00:07:56.953
I would take this home to meet my mother,
that's how much I like it.

112
00:07:56.953 --> 00:08:04.183
Details component, Simple, so this is
where things get a little interesting.

113
00:08:04.183 --> 00:08:06.735
So if you're building an application,

114
00:08:06.735 --> 00:08:10.945
it's kind of the shell of do we
want something on the side, a menu?

115
00:08:10.945 --> 00:08:12.656
You have to start to
think about those things.

116
00:08:12.656 --> 00:08:16.646
And so once we start to get
into the UI UX portion of it,

117
00:08:16.646 --> 00:08:19.416
you have to start making decisions.

118
00:08:19.416 --> 00:08:23.745
And rightly, so because this is
what's going to delineate or

119
00:08:23.745 --> 00:08:29.820
distinguish your application from
every other application in the world.

120
00:08:29.820 --> 00:08:35.147
And I think it's ironic when
you are using a framework,

121
00:08:35.147 --> 00:08:42.640
let's say material, they'll allows you
to get up and running very quickly.

122
00:08:42.640 --> 00:08:48.080
The problem is that everything looks
the same, and so what are you gonna do?

123
00:08:48.080 --> 00:08:53.194
You're going to spend and invest some time
into changing that user experience into

124
00:08:53.194 --> 00:08:58.018
something that is a little bit more
congruent with your stakeholders vision or

125
00:08:58.018 --> 00:08:59.350
whoever that may be.

126
00:09:00.430 --> 00:09:03.993
To kind of summarize this with a landing,
let me stick it,

127
00:09:03.993 --> 00:09:06.410
that I flipped through a bunch of code.

128
00:09:07.490 --> 00:09:14.500
And a lot of this is very, very small,
fine grained pieces of code.

129
00:09:14.500 --> 00:09:19.600
And this allows us,
this is the architecture that we need,

130
00:09:19.600 --> 00:09:24.088
is that we need to think
about things horizontally,

131
00:09:24.088 --> 00:09:28.272
we need to write very
small single purpose code.

132
00:09:28.272 --> 00:09:32.514
And every good architecture book in
the world agrees with me on this.

133
00:09:32.514 --> 00:09:36.826
And when you start to go
through this horizontally,

134
00:09:36.826 --> 00:09:41.820
is that I could swap out
just little foreshadowing.

135
00:09:41.820 --> 00:09:48.860
That if in this case I swapped out course
with lesson, you think this would work?

136
00:09:48.860 --> 00:09:52.771
Would suddenly this become
a lessons detail component?

137
00:09:55.156 --> 00:10:00.089
Think about it, you're gonna have to come
back in six months for season two for

138
00:10:00.089 --> 00:10:03.548
me to get you off this cliffhanger,
totally kidding.

139
00:10:03.548 --> 00:10:09.159
But Horizontal not vertical,

140
00:10:09.159 --> 00:10:13.870
this approach opens up
a world of possibilities.

