WEBVTT

1
00:00:00.370 --> 00:00:06.095
Let's talk about the CLI and
CLIs are incredibly important

2
00:00:06.095 --> 00:00:12.052
because it allows us to leverage
the collective intelligence

3
00:00:12.052 --> 00:00:17.452
of a much broader,
more available smarter community.

4
00:00:17.452 --> 00:00:23.356
And so every modern framework
has a CLI from view to react,

5
00:00:23.356 --> 00:00:28.899
to angular, to ember etc and
a lot of times individuals

6
00:00:28.899 --> 00:00:33.493
will use the CLI to
generate a basic project.

7
00:00:33.493 --> 00:00:38.252
Possibly even a single in the terms of
the data model or the the progression

8
00:00:38.252 --> 00:00:42.963
that we talked about, like a cell,
like I need to generate a component.

9
00:00:42.963 --> 00:00:46.812
Well, that's very convenient to do that.

10
00:00:46.812 --> 00:00:52.408
But what I want to illustrate
here is the ability to

11
00:00:52.408 --> 00:00:57.605
put this together in a way
that you can generate

12
00:00:57.605 --> 00:01:04.814
the entire structure of a project
in a mirror matter of minutes.

13
00:01:04.814 --> 00:01:11.081
And so if we hop into this
particular stackblitz here,

14
00:01:11.081 --> 00:01:14.630
we are going to go on a journey.

15
00:01:14.630 --> 00:01:19.265
And this is potentially a little
bit disjointed because there's

16
00:01:19.265 --> 00:01:23.738
a little bit of angular and
there's a little bit of react here.

17
00:01:23.738 --> 00:01:27.814
But I would like to
demonstrate what is in so

18
00:01:27.814 --> 00:01:31.901
let me just pull this
out into a new window.

19
00:01:31.901 --> 00:01:39.079
So we can see it in all its glory is
most people when they work with the CLI,

20
00:01:39.079 --> 00:01:45.332
typically, they go about this far,
or certainly doing mbmi.

21
00:01:45.332 --> 00:01:46.640
That's nothing new.

22
00:01:46.640 --> 00:01:49.426
But maybe we wanna generate a component.

23
00:01:49.426 --> 00:01:53.355
So I've seen a lot of developers,
just do it.

24
00:01:53.355 --> 00:01:56.232
A little tiny piece like this.

25
00:01:56.232 --> 00:02:01.289
And when in fact,
you stack this all together very quickly,

26
00:02:01.289 --> 00:02:06.544
you can generate a single command
that you can even download and

27
00:02:06.544 --> 00:02:08.940
run this as a shell command.

28
00:02:08.940 --> 00:02:13.286
And so right now, in our domain model,

29
00:02:13.286 --> 00:02:18.960
we have users courses,
lessons and assignments.

30
00:02:18.960 --> 00:02:22.348
But let's go ahead and

31
00:02:22.348 --> 00:02:27.519
let's add in another domain model

32
00:02:27.519 --> 00:02:32.341
to just make this interesting.

33
00:02:32.341 --> 00:02:37.319
And so as we go through this,
you're going to

34
00:02:37.319 --> 00:02:42.434
notice that I'm just
defining some schemas.

35
00:02:42.434 --> 00:02:45.658
So let's go with feedback schema.

36
00:02:50.664 --> 00:02:54.470
And we'll go with feedback.

37
00:02:54.470 --> 00:03:02.656
Now this is interesting because
what is coral, the feedback.

38
00:03:02.656 --> 00:03:08.845
Well, to the best of my knowledge,
it's feedback.

39
00:03:08.845 --> 00:03:12.925
So we're gonna go with feedback.

40
00:03:12.925 --> 00:03:16.744
We'll see what happens we'll generate it,
so

41
00:03:16.744 --> 00:03:20.371
if it just looks super
kooky then guess what,

42
00:03:20.371 --> 00:03:24.863
it's immutable we throw it away and
we go from there so.

43
00:03:24.863 --> 00:03:28.437
Now, I have a config.

44
00:03:28.437 --> 00:03:34.290
And so I recommend that post workshop
that you take this stackblitz and

45
00:03:34.290 --> 00:03:38.060
you kind of walk through
these properties and

46
00:03:38.060 --> 00:03:42.721
what they are doing but
really all I'm doing is creating

47
00:03:42.721 --> 00:03:47.508
a basic object that contains
the properties that I want.

48
00:03:47.508 --> 00:03:52.137
So, a couple of things we're pointing out,
we have libs,

49
00:03:52.137 --> 00:03:55.019
which in nx is a standalone library.

50
00:03:55.019 --> 00:04:01.808
So we're gonna have a data lib,
a state lib, a material lib, a login lib.

51
00:04:01.808 --> 00:04:06.589
And so this allows us to create kind of
stand alone libraries that we can reuse.

52
00:04:06.589 --> 00:04:14.114
And warm, portly we have these
entities here and a couple prefixes.

53
00:04:14.114 --> 00:04:19.298
So everything in here, we have
essentially covered a variation of it.

54
00:04:19.298 --> 00:04:24.157
And then if you remember in the primer,
we iterated

55
00:04:24.157 --> 00:04:29.355
over a collection of commands
to generate something.

56
00:04:29.355 --> 00:04:35.183
And as part of that,
we used the array.reduce to consolidate

57
00:04:35.183 --> 00:04:42.705
the output of that particular command
into a single thing into a single string.

58
00:04:42.705 --> 00:04:48.316
And so I think of this as a list
of steps that we're going to take.

59
00:04:48.316 --> 00:04:49.633
So in this case.

60
00:04:49.633 --> 00:04:56.496
We're going to generate workspace,
packages, dependencies, libs, slice.

61
00:04:56.496 --> 00:05:00.695
In this case react is a slice,
our component layer,

62
00:05:00.695 --> 00:05:03.660
a container component called home.

63
00:05:03.660 --> 00:05:08.400
We'll go ahead and install jsonserver and
then we're going to start.

64
00:05:08.400 --> 00:05:13.208
The application again function and
parameters.

65
00:05:13.208 --> 00:05:18.035
And then up at the top.

66
00:05:18.035 --> 00:05:22.880
We're going to look at just
a couple of these a couple

67
00:05:22.880 --> 00:05:27.625
of these methods and
they should be very familiar.

68
00:05:27.625 --> 00:05:32.830
So we'll go with state, or
rather slice, same thing.

69
00:05:32.830 --> 00:05:35.963
We're just reducing over the entities.

70
00:05:35.963 --> 00:05:40.963
And we're taking in
generating a command based

71
00:05:40.963 --> 00:05:46.091
on each of the entities and
attaching it to code.

72
00:05:46.091 --> 00:05:50.165
So what this looks like
when it's generated is this

73
00:05:50.165 --> 00:05:52.633
particular block right here.

74
00:05:52.633 --> 00:05:57.222
So again basic string manipulation string

75
00:05:57.222 --> 00:06:02.578
interpolation and
we're using array.reduce.

76
00:06:02.578 --> 00:06:09.092
And for basic one line stuff that we have,
like let's say,

77
00:06:09.092 --> 00:06:14.968
container component, nx gc,
entity model plural.

78
00:06:14.968 --> 00:06:15.992
And then we have a suffix.

79
00:06:15.992 --> 00:06:21.651
So I'm going to leave the other
example in straight angular and

80
00:06:21.651 --> 00:06:24.872
hope that they fix that ESLn thing.

81
00:06:24.872 --> 00:06:29.954
But what's really interesting
is most of these commands I

82
00:06:29.954 --> 00:06:35.151
did not have to change at all
from one from react to angular.

83
00:06:35.151 --> 00:06:39.710
The reason being is that the command for

84
00:06:39.710 --> 00:06:46.066
generating a component is
almost identical except for

85
00:06:46.066 --> 00:06:52.005
the suffix and so
this was a little bit different but

86
00:06:52.005 --> 00:07:00.597
I was able to capture that inside of
the suffix parameter and pass that in.

87
00:07:00.597 --> 00:07:06.068
So here where we have an object
that has the suffixes,

88
00:07:06.068 --> 00:07:13.015
you'll notice export falls,
routing is true, and style is scss.

89
00:07:13.015 --> 00:07:18.598
And so this is a combination
of everything we've talked

90
00:07:18.598 --> 00:07:23.598
up to this point and
if you remember in the slides.

91
00:07:23.598 --> 00:07:28.667
Then I said the initial
project configuration or

92
00:07:28.667 --> 00:07:32.384
the wiring is a little bit tedious.

93
00:07:32.384 --> 00:07:37.365
The reason being is you have
to do it at least once and so

94
00:07:37.365 --> 00:07:41.902
this is in my mind I think
this is like this is a true

95
00:07:41.902 --> 00:07:45.250
custom mold that we have just made.

96
00:07:45.250 --> 00:07:52.548
So with that I'm going to roll the dice
one more time and we're going to run this.

97
00:07:52.548 --> 00:07:59.313
So I'm just gonna paste this is and I'm
going to just let this do its thing, and

98
00:07:59.313 --> 00:08:04.441
while this is going,
that once it successfully installs,

99
00:08:04.441 --> 00:08:09.259
then we will sing, we will dance,
we will be merry, and

100
00:08:09.259 --> 00:08:13.691
we'll move on to more
sophisticated generators.

101
00:08:13.691 --> 00:08:18.983
If not, I'll probably tip off the chair,

102
00:08:18.983 --> 00:08:22.364
and die of a heart attack but

103
00:08:22.364 --> 00:08:27.950
the ability to add in
additional entities and

104
00:08:27.950 --> 00:08:33.389
then generate the entire slice and
stack for

105
00:08:33.389 --> 00:08:38.693
that particular entity is very powerful.

106
00:08:38.693 --> 00:08:44.432
So if I wanted to generate
not only horizontally but

107
00:08:44.432 --> 00:08:49.770
vertically, a slice for
a particular entity,

108
00:08:49.770 --> 00:08:54.447
I simply need to add it into my generator.

109
00:08:54.447 --> 00:09:00.548
And I'm able to pick and choose the bits
and pieces that I want and spin it up.

110
00:09:00.548 --> 00:09:02.586
So this is by far in my opinion.

111
00:09:02.586 --> 00:09:07.752
The most high touch part
of building a generator.

112
00:09:07.752 --> 00:09:13.794
With that said, what this allows you
to do is if you have an agreement

113
00:09:13.794 --> 00:09:18.671
with your stakeholders on
what the domain models are,

114
00:09:18.671 --> 00:09:22.395
then you can plug this in within minutes.

115
00:09:22.395 --> 00:09:29.286
You have the entire structure for
your application.

116
00:09:29.286 --> 00:09:36.819
What I do with this is typically, I will
generate the structure for my application.

117
00:09:36.819 --> 00:09:42.735
And at the same time I will generate the
actual templates that I want to use for

118
00:09:42.735 --> 00:09:48.098
my application separately and
then once the project's generated,

119
00:09:48.098 --> 00:09:53.091
I'll download my generated
templates that are specific to this

120
00:09:53.091 --> 00:09:56.346
particular domain organization, etc.

121
00:09:56.346 --> 00:10:00.918
And then I'll just overwrite them
onto the generated application.

122
00:10:00.918 --> 00:10:03.955
So it's very easy when it's like
I want to move this thing over.

123
00:10:03.955 --> 00:10:09.427
And go find the equivalent file and
just overwrite it.

124
00:10:09.427 --> 00:10:12.345
So I have a pretty good
feeling about this.

125
00:10:12.345 --> 00:10:15.679
So let me click on localhost 4200.

126
00:10:15.679 --> 00:10:19.548
And let me just drag this over.

127
00:10:19.548 --> 00:10:21.900
And here we go.

128
00:10:21.900 --> 00:10:25.330
So I was able to generate
this application.

129
00:10:25.330 --> 00:10:32.066
But let's go ahead and
hop into the code just so

130
00:10:32.066 --> 00:10:36.918
we can see what we were left with.

131
00:10:36.918 --> 00:10:43.793
So if we look at this real quick,

132
00:10:43.793 --> 00:10:48.893
I have an app which has.

133
00:10:48.893 --> 00:10:54.814
The app but it has assignments,
courses, feedback, lessons, users.

134
00:10:54.814 --> 00:11:01.583
And I've generated
essentially placeholders for

135
00:11:01.583 --> 00:11:05.049
all of these components.

136
00:11:05.049 --> 00:11:09.753
And not only that, the if I go to this is

137
00:11:09.753 --> 00:11:14.459
why I think nx is really good if I go into

138
00:11:14.459 --> 00:11:19.033
course state into source into libs.

139
00:11:19.033 --> 00:11:24.987
Here I now have a redux slice for

140
00:11:24.987 --> 00:11:32.554
every single entity, that I defined.

141
00:11:32.554 --> 00:11:36.620
Now this may not be exactly
what I wanna use but

142
00:11:36.620 --> 00:11:42.077
at least I have a placeholder or
something to start with and so

143
00:11:42.077 --> 00:11:49.141
this alone by simply creating a small bit
of tooling to generate a CLI command.

144
00:11:49.141 --> 00:11:54.473
A really a composite CLI
command allows me to do what

145
00:11:54.473 --> 00:11:59.686
historically would have
taken me all afternoon.

146
00:11:59.686 --> 00:12:04.102
Pre CLI I mean,
it would take me a day pre CLI but

147
00:12:04.102 --> 00:12:10.557
post CLI that I've seen a number of
developers do this one command at

148
00:12:10.557 --> 00:12:17.466
a time when I have been on engagements
where I'm working with a client and

149
00:12:17.466 --> 00:12:22.479
we are doing some kind of roadmapping or
discovery.

150
00:12:22.479 --> 00:12:25.634
And my entire goal in that engagement or

151
00:12:25.634 --> 00:12:30.615
that particular activity is to
understand the domain model.

152
00:12:30.615 --> 00:12:36.158
And once I understand the domain model,

153
00:12:36.158 --> 00:12:41.700
then I can come over to
a tool like this and

154
00:12:41.700 --> 00:12:46.440
I can generate an entire project.

155
00:12:46.440 --> 00:12:51.474
Is fast is it takes me to
generate these basic schemas for

156
00:12:51.474 --> 00:12:56.831
the models that I've discovered
through the conversation

157
00:12:56.831 --> 00:13:01.542
with the client and
this is very powerful because now

158
00:13:01.542 --> 00:13:06.254
you have something that
immediately you can show and

159
00:13:06.254 --> 00:13:12.358
you can show your stakeholders within
you can start to iterate on and

160
00:13:12.358 --> 00:13:15.719
get feedback, Alice immediately.

161
00:13:15.719 --> 00:13:20.503
The other thing that I want to
point out here before we move on is

162
00:13:20.503 --> 00:13:24.827
that these are the same commands
that I would use if I were

163
00:13:24.827 --> 00:13:29.161
building a production
enterprise grade application.

164
00:13:29.161 --> 00:13:34.428
There's nothing different between
this generated project for

165
00:13:34.428 --> 00:13:40.093
a, let's say a proof of concept or
a production grade application.

166
00:13:40.093 --> 00:13:44.886
The approach,
the techniques are exactly the same,

167
00:13:44.886 --> 00:13:48.198
the artifacts are exactly the same.

168
00:13:48.198 --> 00:13:52.518
The difference is that I have or
we are looking at how to

169
00:13:52.518 --> 00:13:56.934
accelerate that timeline by
not changing the scope but

170
00:13:56.934 --> 00:14:02.323
by changing the way that we think
about application development.

171
00:14:02.323 --> 00:14:04.786
Unfortunately, I don't yet

172
00:14:04.786 --> 00:14:10.303
know how to make myself immune to
JavaScript package conflicts and

173
00:14:10.303 --> 00:14:15.132
inconsistencies I heard somebody
say they were very smart

174
00:14:15.132 --> 00:14:19.664
that probably what you should
do is pin your versions in

175
00:14:19.664 --> 00:14:24.521
your package.JSON and
I think that Is a pretty good idea.

176
00:14:24.521 --> 00:14:29.056
So the question is how would I adapt this
approach to changes within the domain

177
00:14:29.056 --> 00:14:32.913
model or more importantly my
understanding of the domain model.

178
00:14:32.913 --> 00:14:34.839
So it's my understanding changes.

179
00:14:34.839 --> 00:14:37.537
How do I adapt this approach?

180
00:14:37.537 --> 00:14:41.892
Well, the beauty of this
approach is that it is

181
00:14:41.892 --> 00:14:46.808
significantly more adaptable
that my experience is

182
00:14:46.808 --> 00:14:52.057
that I realized very quickly
that I have an incomplete or

183
00:14:52.057 --> 00:14:56.318
a superficial understanding of the domain.

184
00:14:56.318 --> 00:15:03.411
When I put something in front of a domain
expert and I start to get feedback.

185
00:15:03.411 --> 00:15:09.287
And so for example, I built a travel
application for a very large airline.

186
00:15:09.287 --> 00:15:14.244
And it was a constant cycle of
I would build something I would

187
00:15:14.244 --> 00:15:18.207
show it to the stakeholder and
they'd be like,

188
00:15:18.207 --> 00:15:23.478
that's kind of right but
that's not how it works all the time.

189
00:15:23.478 --> 00:15:27.577
And then they would then go on to explain

190
00:15:27.577 --> 00:15:33.179
the 10,000 rules that
govern airline travel.

191
00:15:33.179 --> 00:15:38.556
And so by using this approach,
this one allows me to get or

192
00:15:38.556 --> 00:15:43.711
to uncover my superficial
understanding of the domain

193
00:15:43.711 --> 00:15:48.865
much quicker which is what
you want is that when you're

194
00:15:48.865 --> 00:15:54.038
programming the question is
how do you know anything.

195
00:15:54.038 --> 00:15:58.735
And that's a really serious question is
that how do you know that you are doing

196
00:15:58.735 --> 00:15:59.826
the right thing?

197
00:15:59.826 --> 00:16:01.259
Well, this is with feedback loops.

198
00:16:01.259 --> 00:16:02.754
This is why we write tests.

199
00:16:02.754 --> 00:16:04.770
This is why we do automated testing.

200
00:16:04.770 --> 00:16:06.905
This is why we do user testing.

201
00:16:06.905 --> 00:16:11.802
And in this case,
what I do is that I isolate

202
00:16:11.802 --> 00:16:16.154
the pieces that are going to change and

203
00:16:16.154 --> 00:16:19.568
I generate the other pieces.

204
00:16:19.568 --> 00:16:24.427
And so if I realize that my
domain was not quite right, well,

205
00:16:24.427 --> 00:16:30.165
in this case, it's fairly trivial
that I would simply just generate.

206
00:16:30.165 --> 00:16:34.245
Maybe I don't have to generate
the entire project but

207
00:16:34.245 --> 00:16:39.877
I would generate an entire slice of
that project and then just replace it.

208
00:16:39.877 --> 00:16:45.131
And so I really want to encourage
us to start thinking about

209
00:16:45.131 --> 00:16:50.817
our projects like immutable
infrastructure is the pieces that

210
00:16:50.817 --> 00:16:58.017
we are going to change a lot where there
is variance you want to segment that out.

211
00:16:58.017 --> 00:17:01.114
And isolate that abstract that out but

212
00:17:01.114 --> 00:17:06.242
the pieces that are conventional
that are not going to change,

213
00:17:06.242 --> 00:17:11.272
you want to create a system in
an environment that you can throw

214
00:17:11.272 --> 00:17:16.521
those away and replace it with
an updated version very quickly.

215
00:17:16.521 --> 00:17:22.448
And again, this is the entire concept
behind cloud based architecture and

216
00:17:22.448 --> 00:17:24.808
immutable infrastructure.

217
00:17:24.808 --> 00:17:28.048
Is that I don't need
this container anymore.

218
00:17:28.048 --> 00:17:30.176
You tear down, you put something else up.

219
00:17:30.176 --> 00:17:33.116
And I am proposing that
we can do this in code.

