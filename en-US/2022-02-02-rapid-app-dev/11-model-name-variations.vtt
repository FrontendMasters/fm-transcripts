WEBVTT

1
00:00:00.030 --> 00:00:05.990
Back to our schema,
we need to generate name variations.

2
00:00:05.990 --> 00:00:08.290
And once we generate name variations,

3
00:00:08.290 --> 00:00:12.470
we are in a good place to actually
plug that into a template.

4
00:00:12.470 --> 00:00:16.360
So let me close this for space.

5
00:00:16.360 --> 00:00:22.268
And as with anything,
the first thing I do is I ask myself,

6
00:00:22.268 --> 00:00:24.929
how do I model the models?

7
00:00:24.929 --> 00:00:27.239
So I'm starting with a basic schema and

8
00:00:27.239 --> 00:00:30.118
then I'm adding in a name
variations property.

9
00:00:30.118 --> 00:00:37.007
And I'm asking myself,
when I'm generating a template,

10
00:00:37.007 --> 00:00:42.116
what are the most common
things that I need?

11
00:00:42.116 --> 00:00:46.904
What are the most common name variations
that I need to plug it into a template and

12
00:00:46.904 --> 00:00:47.909
to make it work?

13
00:00:47.909 --> 00:00:52.997
And so I think of this and
I worked around this, I polished it and

14
00:00:52.997 --> 00:00:58.853
I won't get hang up so much on he said
ref and refs and what does that mean,

15
00:00:58.853 --> 00:01:03.366
is that typically I try to think or
arrive at a semantic or

16
00:01:03.366 --> 00:01:09.150
set of semantics that is self documenting
and that feels natural to me.

17
00:01:09.150 --> 00:01:14.523
So we have refs, models,
selectors and model plans.

18
00:01:14.523 --> 00:01:19.309
And so all I've done is I've
defined these in an interface and

19
00:01:19.309 --> 00:01:23.646
then I have two additional
ones here that are optional.

20
00:01:23.646 --> 00:01:25.878
So this is what this question mark means.

21
00:01:25.878 --> 00:01:31.188
And so, based on this here,
what ideally we want

22
00:01:31.188 --> 00:01:36.379
to generate is something
that looks like this.

23
00:01:39.943 --> 00:01:41.514
So a ref is camel case.

24
00:01:41.514 --> 00:01:48.953
A model, and so this would be like
a case name, it's Pasco case selectors.

25
00:01:48.953 --> 00:01:53.439
And so this is distinctly angular,
but it could be CSS, whatever.

26
00:01:53.439 --> 00:01:55.756
These are kabob cases.

27
00:01:55.756 --> 00:02:00.196
And then these parameters
are something a little different.

28
00:02:00.196 --> 00:02:03.410
So, I think of these are just strongly
typed parameters singular and plural.

29
00:02:04.910 --> 00:02:10.930
And so the challenge here is we
need to first build our base.

30
00:02:10.930 --> 00:02:15.070
And then we need to add our parameters.

31
00:02:15.070 --> 00:02:19.070
And so I have these two empty
functions here, buildBase and

32
00:02:19.070 --> 00:02:21.150
addParams, and I have a pipe.

33
00:02:22.510 --> 00:02:28.060
And then from here,
we can go ahead and trace this out.

34
00:02:28.060 --> 00:02:29.999
So when we're all said and done,

35
00:02:29.999 --> 00:02:33.400
we should hopefully have
something that looks like this.

36
00:02:34.640 --> 00:02:37.000
So let me just double check.

37
00:02:37.000 --> 00:02:38.850
We have our schema here.

38
00:02:38.850 --> 00:02:44.189
And so in our base we need to return

39
00:02:44.189 --> 00:02:49.510
the name variations object.

40
00:02:49.510 --> 00:02:55.040
And clearly this is definitely
not a name variations object.

41
00:02:55.040 --> 00:03:00.113
So, what we're gonna do is,
we're gonna go ref, and I'm gonna,

42
00:03:00.113 --> 00:03:04.476
and this is just for
me preferential if I have to generate or

43
00:03:04.476 --> 00:03:10.080
build an object, then I just will
type out the properties first.

44
00:03:10.080 --> 00:03:13.145
And so this is even as I write code,
it's kind of horizontal.

45
00:03:13.145 --> 00:03:19.372
Models selector and

46
00:03:19.372 --> 00:03:23.403
selectors.

47
00:03:23.403 --> 00:03:32.810
All right, so for a ref, what we need is
you'll notice here, this is camel case.

48
00:03:32.810 --> 00:03:34.850
So I'm gonna go camel case.

49
00:03:34.850 --> 00:03:37.590
And I'm going to go schema.model.

50
00:03:38.840 --> 00:03:41.940
And for refs, same exact thing.

51
00:03:43.840 --> 00:03:46.939
And I'm gonna go schema.model Plural.

52
00:03:46.939 --> 00:03:52.296
And then for models you'll see here,
this is pascal case,

53
00:03:52.296 --> 00:03:56.809
so I'm just gonna go
pascalcase schema.model.

54
00:03:59.146 --> 00:04:05.831
And, We'll do the same thing for models.

55
00:04:05.831 --> 00:04:08.040
The difference is that
I'm making this plural.

56
00:04:09.180 --> 00:04:12.185
And again,
if the English language was consistent,

57
00:04:12.185 --> 00:04:15.530
I may do this a little differently but
it's not.

58
00:04:15.530 --> 00:04:21.638
And so pony, ponies and
even potato, potatoes.

59
00:04:21.638 --> 00:04:27.499
And for selectors,
we are going to go kebab case.

60
00:04:27.499 --> 00:04:33.291
And the difference is,
we're just going single model, and plural.

61
00:04:36.324 --> 00:04:37.959
All right, let's save this out.

62
00:04:37.959 --> 00:04:42.320
All right, and then,
let's do our add params.

63
00:04:42.320 --> 00:04:47.193
So now this is taking
a named variations object and

64
00:04:47.193 --> 00:04:50.796
we're going to return a new object.

65
00:04:50.796 --> 00:04:54.584
So now using the spread operator,

66
00:04:54.584 --> 00:04:59.817
what I can do here is just
add in the variations.

67
00:04:59.817 --> 00:05:06.857
And then I'm going to add in the two,

68
00:05:06.857 --> 00:05:11.173
I believe it's single

69
00:05:11.173 --> 00:05:15.725
param and multi param.

70
00:05:21.570 --> 00:05:25.051
So buildSingleParam,
which is gonna take in variations.

71
00:05:31.830 --> 00:05:35.808
And buildMultiParam,
also going to take in variations.

72
00:05:35.808 --> 00:05:40.608
And you'll notice here that,

73
00:05:40.608 --> 00:05:45.221
if I can drag this over, now,

74
00:05:45.221 --> 00:05:50.955
we have user course, user courses.

75
00:05:50.955 --> 00:05:58.269
So, camel case, Pascal case,
kebab case and then our params.

76
00:06:01.207 --> 00:06:08.266
And, I can hear it now.

77
00:06:08.266 --> 00:06:08.860
Like, this is it.

78
00:06:08.860 --> 00:06:12.825
What's interesting about this though,

79
00:06:12.825 --> 00:06:20.700
when I think of writing a code generator,
this in my opinion is the engine.

80
00:06:20.700 --> 00:06:25.574
So if code is characters,
characters become strings,

81
00:06:25.574 --> 00:06:31.902
is that your ability to intelligently
manipulate strings determines or

82
00:06:31.902 --> 00:06:35.960
fetch your ability to
write code generators.

83
00:06:35.960 --> 00:06:44.160
And so if someone said, what does the
engine look like for your code generator?

84
00:06:44.160 --> 00:06:48.407
Well, my answer would be, this right here.

85
00:06:48.407 --> 00:06:53.200
Within a whopping 60 ish lines

86
00:06:53.200 --> 00:06:58.000
of code, this is my generator.

87
00:06:59.760 --> 00:07:02.840
Basic string manipulation.

88
00:07:02.840 --> 00:07:08.972
But this produces something
that is invaluable,

89
00:07:08.972 --> 00:07:14.520
which is this domain
model variations object

90
00:07:14.520 --> 00:07:20.030
which I will use to hydrate my templates.

91
00:07:20.030 --> 00:07:29.200
So that is, String manipulation 101.

92
00:07:29.200 --> 00:07:34.203
Array.join, array.split, array.join.

93
00:07:34.203 --> 00:07:39.737
And this very basic
transform pipe method which

94
00:07:39.737 --> 00:07:45.280
then allows me to generate
an object like this.

