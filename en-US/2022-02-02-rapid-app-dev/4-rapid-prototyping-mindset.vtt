WEBVTT

1
00:00:00.240 --> 00:00:05.028
If you've ever done any kind of
prototyping, think about being in a room,

2
00:00:05.028 --> 00:00:10.053
having those discussions about like,
hey, we're gonna build a prototype.

3
00:00:10.053 --> 00:00:13.648
We're gonna build a proof of concept.

4
00:00:13.648 --> 00:00:19.357
And try to remember the conversation,

5
00:00:19.357 --> 00:00:24.893
and think about what limiting beliefs

6
00:00:24.893 --> 00:00:29.914
exist around rapid prototyping.

7
00:00:29.914 --> 00:00:34.361
And there are a ton of limiting beliefs.

8
00:00:34.361 --> 00:00:38.549
I think one of the biggest ones is,
should we even do a prototype?

9
00:00:38.549 --> 00:00:44.252
Should we see if this is
indeed what the user wants?

10
00:00:44.252 --> 00:00:51.274
Or do we just go ahead, roll the dice,
YOLO, you only launch once,

11
00:00:51.274 --> 00:00:56.833
literally, and just build it and
hope people buy it.

12
00:00:56.833 --> 00:00:59.085
Or do we build a prototype?

13
00:00:59.085 --> 00:01:04.463
And so once you get beyond kind
of that initial threshold,

14
00:01:04.463 --> 00:01:10.498
there are a myriad of, I think,
beliefs that kind of exist around

15
00:01:10.498 --> 00:01:15.547
rapid prototyping that I want
to kind of walk through or

16
00:01:15.547 --> 00:01:18.872
just cut through this a little bit.

17
00:01:18.872 --> 00:01:25.199
So when we think of prototyping,
the most basic form is pen and paper.

18
00:01:25.199 --> 00:01:30.058
And then you have wireframes,
static mocks,

19
00:01:30.058 --> 00:01:36.920
interactive mocks, and so
this is where things get super fancy.

20
00:01:36.920 --> 00:01:39.398
Something like InVision or

21
00:01:39.398 --> 00:01:45.117
something that you can go a long
ways with an interactive mock.

22
00:01:45.117 --> 00:01:48.736
And I am not criticizing any of those, but

23
00:01:48.736 --> 00:01:54.737
once you get up to kind of like that
InVision style interactive mock,

24
00:01:54.737 --> 00:01:59.610
there seems to be this barrier
that just kinda comes in.

25
00:02:00.930 --> 00:02:05.781
And what the barrier is that,

26
00:02:05.781 --> 00:02:12.193
do we build a high fidelity prototype?

27
00:02:12.193 --> 00:02:18.494
And I have just encountered a ton of
criticism, or even resistance around,

28
00:02:18.494 --> 00:02:22.634
hey, why don't we skip
all of these pieces here?

29
00:02:22.634 --> 00:02:24.707
Pen and paper, wireframes, etc.

30
00:02:24.707 --> 00:02:28.039
Or let's do just
an abbreviated version and

31
00:02:28.039 --> 00:02:31.379
let's go straight to building something.

32
00:02:31.379 --> 00:02:38.744
And I think the reason this is, is that
there's a perceived high level of effort,

33
00:02:38.744 --> 00:02:42.800
that if we were actually
going to build this,

34
00:02:42.800 --> 00:02:47.320
that this would take more
effort than it is worth.

35
00:02:48.360 --> 00:02:54.745
The reason being, is that code is hard.

36
00:02:56.394 --> 00:03:01.582
I think as well there is this,
I've had variations of

37
00:03:01.582 --> 00:03:07.344
this from engineers, tons of them,
that just to be clear,

38
00:03:07.344 --> 00:03:13.021
this prototype must never,
ever be put into production.

39
00:03:13.021 --> 00:03:17.328
We'll throw this away and
we'll replace it with real code.

40
00:03:17.328 --> 00:03:22.770
And so that is a huge limiting belief.

41
00:03:22.770 --> 00:03:28.527
And I believe it's probably one of
the largest barriers to entry for

42
00:03:28.527 --> 00:03:33.476
people, especially business
stakeholders to getting on

43
00:03:33.476 --> 00:03:37.828
board with just building
the thing as a prototype.

44
00:03:37.828 --> 00:03:41.551
The reason being is that historically,

45
00:03:41.551 --> 00:03:45.602
prototypes are designated as disposable or

46
00:03:45.602 --> 00:03:51.855
throw away because they're not
written to production standards.

47
00:03:51.855 --> 00:03:57.804
And so this is where, just to be clear,
if we do this, we got to throw it away.

48
00:03:57.804 --> 00:04:03.965
We're simply doing recon, and they think
of it like, I don't know, like a Trojan

49
00:04:03.965 --> 00:04:09.375
horse in a way of like we're gonna build
something that looks like a horse.

50
00:04:09.375 --> 00:04:13.008
We're gonna basically go on this journey,
see what everybody's doing and

51
00:04:13.008 --> 00:04:16.583
then we're gonna come back, and
then we're gonna get on real horses, and

52
00:04:16.583 --> 00:04:18.910
then we're gonna go and invade.

53
00:04:18.910 --> 00:04:23.981
And so mentally,
the distinction between a prototype and

54
00:04:23.981 --> 00:04:30.501
real code, that distinction or
that chasm that exists between the two is,

55
00:04:30.501 --> 00:04:34.744
I think this is what
prevents organizations from

56
00:04:34.744 --> 00:04:39.210
leaning in to building
high fidelity prototypes.

57
00:04:41.430 --> 00:04:44.485
And here is a another big idea.

58
00:04:44.485 --> 00:04:46.927
So this is number two for the day.

59
00:04:46.927 --> 00:04:52.023
Prototypes, they should be
disposable because they

60
00:04:52.023 --> 00:04:56.785
are immutable and
not because they are inferior.

61
00:04:56.785 --> 00:05:00.912
I feel like I need a little
Twitter icon in the corner for

62
00:05:00.912 --> 00:05:06.407
the things that I think are probably
something that I would tweet about.

63
00:05:06.407 --> 00:05:10.700
And so this is where when
we think about prototypes,

64
00:05:10.700 --> 00:05:15.775
that they should be disposable
because they're immutable,

65
00:05:15.775 --> 00:05:18.811
and not because they're inferior.

66
00:05:18.811 --> 00:05:27.240
And I'm drawing heavily on this idea of
immutable architecture or infrastructure.

67
00:05:27.240 --> 00:05:30.017
So immutable infrastructure,

68
00:05:30.017 --> 00:05:36.095
it's an approach that components
are replaced rather than changed.

69
00:05:36.095 --> 00:05:37.935
So an application or

70
00:05:37.935 --> 00:05:44.009
services is effectively redeployed
each time any change occurs.

71
00:05:44.009 --> 00:05:48.081
Now in the cloud infrastructure space,

72
00:05:48.081 --> 00:05:52.752
this adoption of immutable
infrastructure or

73
00:05:52.752 --> 00:06:00.190
an immutable infrastructure approach
has absolutely changed the game.

74
00:06:01.420 --> 00:06:06.971
This allows high velocity
organizations to sometimes have 20,

75
00:06:06.971 --> 00:06:09.260
30 deployments in a day.

76
00:06:10.570 --> 00:06:15.883
And the reason being, is that
they're not pulling something down,

77
00:06:15.883 --> 00:06:21.469
trying to fix it, and then push it
back up, in terms of infrastructure,

78
00:06:21.469 --> 00:06:25.750
that we simply just redeploy
another instance of it.

79
00:06:25.750 --> 00:06:32.228
And so this idea is cattle, not pets.

80
00:06:32.228 --> 00:06:37.436
And I believe that we
would go with service well

81
00:06:37.436 --> 00:06:42.780
as application engineers
to think of our code,

82
00:06:42.780 --> 00:06:49.340
at least major pieces of it
as immutable infrastructure.

83
00:06:49.340 --> 00:06:57.132
In the sense of these are the things that
we're just going to redeploy, regenerate.

84
00:06:57.132 --> 00:07:00.884
And we can focus on
the things that change.

85
00:07:00.884 --> 00:07:09.228
So I'm gonna do a quick
interlude around expertise.

86
00:07:11.672 --> 00:07:15.124
So specifically experience and expertise.

87
00:07:15.124 --> 00:07:19.480
And the reason why I
bring this up is because

88
00:07:19.480 --> 00:07:23.599
we're talking about skill and effort.

89
00:07:23.599 --> 00:07:27.957
I don't wanna do a rapid prototype,
because it's hard, it will take too much

90
00:07:27.957 --> 00:07:31.801
effort, it's too much time,
too much cost, too much investment.

91
00:07:31.801 --> 00:07:36.103
And so there's one point that
I'd like to just call out here,

92
00:07:36.103 --> 00:07:39.262
this is a bonus section but
it's important.

93
00:07:39.262 --> 00:07:42.620
There's a book called The Business
of Expertise, I highly recommend it.

94
00:07:42.620 --> 00:07:46.040
And within the first couple pages,
he says,

95
00:07:46.040 --> 00:07:50.160
intelligence is essentially
pattern matching.

96
00:07:50.160 --> 00:07:55.468
And so remember what I said
about mastery being reductive.

97
00:07:55.468 --> 00:08:01.218
Pattern matching is possible when
similar scenarios are presented,

98
00:08:01.218 --> 00:08:05.090
ideally over a long period of time.

99
00:08:05.090 --> 00:08:10.399
And so it's actually repeated
exposure to similar scenarios

100
00:08:10.399 --> 00:08:15.298
that's going to allow you to
be in an environment that you

101
00:08:15.298 --> 00:08:20.010
can start to establish
patterns within that context.

102
00:08:21.130 --> 00:08:25.054
And when enough scenarios are presented,

103
00:08:25.054 --> 00:08:28.763
pattern matching turns into insights.

104
00:08:28.763 --> 00:08:34.435
And so I believe that a domain expert
has been described as somebody

105
00:08:34.435 --> 00:08:39.813
who's made every possible mistake
within a specific domain.

106
00:08:39.813 --> 00:08:47.826
And so this idea is that when you've
been presented with enough scenarios and

107
00:08:47.826 --> 00:08:52.881
you have started to converge
on the most dominant

108
00:08:52.881 --> 00:08:57.582
patterns, all of a sudden now, guess what?

109
00:08:57.582 --> 00:09:02.423
You're probably,
if you have applied those patterns and

110
00:09:02.423 --> 00:09:08.647
converted them into insight,
that you're probably a, quite possibly,

111
00:09:08.647 --> 00:09:14.606
a senior engineer, an architect,
a staff engineer, whatever it is.

112
00:09:14.606 --> 00:09:19.527
Because expertise is the ability
to convert these insights into

113
00:09:19.527 --> 00:09:21.174
valuable outcomes.

114
00:09:21.174 --> 00:09:26.320
And so when we are exposed

115
00:09:26.320 --> 00:09:32.521
to, The same scenario over and

116
00:09:32.521 --> 00:09:36.699
over and over, we have an opportunity
to start to notice patterns.

117
00:09:36.699 --> 00:09:40.645
From those patterns,
we start to gain insight.

118
00:09:40.645 --> 00:09:42.426
And from that insight,

119
00:09:42.426 --> 00:09:47.153
we are able to convert those
insights into valuable outcomes.

120
00:09:47.153 --> 00:09:50.519
And so back to mastery.

121
00:09:50.519 --> 00:09:58.284
I believe that true mastery is
the ability to transfer mastery.

122
00:09:58.284 --> 00:10:02.935
And so
my opinion is that you do not truly know

123
00:10:02.935 --> 00:10:07.839
something until you can
transfer that thing,

124
00:10:07.839 --> 00:10:12.759
that idea, that concept, to somebody else.

125
00:10:12.759 --> 00:10:17.455
And for efficiency sake, that at least for

126
00:10:17.455 --> 00:10:22.509
me, The gold standard for me,

127
00:10:22.509 --> 00:10:28.012
for mastery, is being able to
transfer ideas to small children.

128
00:10:28.012 --> 00:10:33.006
Because when you can do that or
in a way like the mom test,

129
00:10:33.006 --> 00:10:37.913
that's how you, I believe,
really know something.

130
00:10:37.913 --> 00:10:41.328
And it's not that you
are condescending towards,

131
00:10:41.328 --> 00:10:43.798
let's say a small child or your mom.

132
00:10:43.798 --> 00:10:49.917
More importantly is that it is
amazing the amount of effort and

133
00:10:49.917 --> 00:10:56.392
energy and discipline that it takes
to take something you know and

134
00:10:56.392 --> 00:11:03.002
reduce it into such a way that you
could explain it to a small child.

135
00:11:03.002 --> 00:11:06.991
And they would understand the concept
that you're trying to communicate.

136
00:11:06.991 --> 00:11:12.685
And so I have a super,
super fancy graph here,

137
00:11:12.685 --> 00:11:16.189
and just for math reasons and

138
00:11:16.189 --> 00:11:20.861
scientific purposes is that skill and

139
00:11:20.861 --> 00:11:25.687
effort are inversely proportionate.

140
00:11:25.687 --> 00:11:31.221
That your first repetition of anything

141
00:11:31.221 --> 00:11:35.752
is going to be very high effort.

142
00:11:35.752 --> 00:11:40.203
But as you start to acquire skills, so

143
00:11:40.203 --> 00:11:44.656
let's say on your 1,000th rep,

144
00:11:44.656 --> 00:11:49.943
all of a sudden now your
body starts to adapt,

145
00:11:49.943 --> 00:11:52.743
and it becomes easier.

146
00:11:52.743 --> 00:11:57.750
And then on your 1,000th rep,
then it becomes much,

147
00:11:57.750 --> 00:12:02.962
much easier to the point it's your 10th,
10,000th

148
00:12:02.962 --> 00:12:08.169
rep that all of a sudden now
the effort that you are trying to or

149
00:12:08.169 --> 00:12:14.838
the effort that you are expecting to
accomplish a goal is almost negligible.

150
00:12:14.838 --> 00:12:21.965
And so, one, that do not be
afraid to do the hard things.

151
00:12:21.965 --> 00:12:26.382
Because in doing so,
the hard things become effortless things.

152
00:12:26.382 --> 00:12:35.051
And in the context of rapid prototypes
is that it's not that coding is hard,

153
00:12:35.051 --> 00:12:40.479
relative term, or
rapid prototyping is hard.

154
00:12:40.479 --> 00:12:46.847
It's that we simply need to
commit to gaining the reps and

155
00:12:46.847 --> 00:12:50.960
the exposure to the right context and

156
00:12:50.960 --> 00:12:55.736
the right environment to reduce the effort

157
00:12:55.736 --> 00:13:00.531
that it takes to produce these artifacts.

158
00:13:00.531 --> 00:13:05.933
So this is not so
much a philosophical idea,

159
00:13:05.933 --> 00:13:12.357
but I just want to really
pin this particular thing,

160
00:13:12.357 --> 00:13:15.576
patterns are important.

161
00:13:15.576 --> 00:13:20.741
So, if you've heard of the saying,

162
00:13:20.741 --> 00:13:24.583
DRY, what does that mean?

163
00:13:24.583 --> 00:13:27.875
Don't repeat yourself.

164
00:13:27.875 --> 00:13:34.888
Well, how do we know if
something has been repeated?

165
00:13:34.888 --> 00:13:37.021
Think about that.

166
00:13:37.021 --> 00:13:39.449
Well, it's pattern matching.

167
00:13:39.449 --> 00:13:41.677
And so patterns are really important.

168
00:13:41.677 --> 00:13:45.287
And so if you've ever stopped and
you're like I've done this before.

169
00:13:45.287 --> 00:13:50.713
On some level mentally, you've realized
that you have repeated yourself or

170
00:13:50.713 --> 00:13:55.972
that you've already implemented
something that this pattern over here,

171
00:13:55.972 --> 00:14:00.828
this output, matches this thing over here,
and this is important.

172
00:14:00.828 --> 00:14:05.484
And I want to encourage you as
engineers to be very sensitive to that.

173
00:14:05.484 --> 00:14:10.281
When you start to get the Spidey-sense,
I think they call it the Peter tingle in

174
00:14:10.281 --> 00:14:15.578
the movies, hilarious, is that all of a
sudden, you're like I've done this before,

175
00:14:15.578 --> 00:14:19.751
something doesn't feel right, or
I feel like this could be easier.

176
00:14:19.751 --> 00:14:24.989
That is on a subconscious level,
possibly a conscious level that

177
00:14:24.989 --> 00:14:30.240
your brain is trying to tell you
this is a pattern, I've seen it.

178
00:14:30.240 --> 00:14:32.090
And so do not underestimate
the importance of patterns.

