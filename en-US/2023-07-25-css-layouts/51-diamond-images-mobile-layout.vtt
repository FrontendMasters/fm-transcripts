WEBVTT

1
00:00:00.520 --> 00:00:05.913
Next up comes one of my favorite
parts of this entire course,

2
00:00:05.913 --> 00:00:12.960
and that is a diamond-based layout for
images here inside of this webpage.

3
00:00:12.960 --> 00:00:16.796
We have ten separate images
that we are going to use and

4
00:00:16.796 --> 00:00:22.730
splay them in this diamond format,
and we're gonna do this with Flexbox.

5
00:00:22.730 --> 00:00:25.146
So to get started with this,

6
00:00:25.146 --> 00:00:30.760
I have given you some very important
parts to the starting state.

7
00:00:30.760 --> 00:00:32.919
So, let's take a look at that right now.

8
00:00:33.970 --> 00:00:39.009
As you can see here, this was inspired by
a blog post that I read earlier this year,

9
00:00:39.009 --> 00:00:42.170
and I encourage you to take
a look at this blog post.

10
00:00:43.260 --> 00:00:47.860
What I'm doing is not exactly like it,
but it's definitely inspired by it.

11
00:00:47.860 --> 00:00:52.714
So first of all in this little bit of
HTML we have our wrapper wrapped around

12
00:00:52.714 --> 00:00:57.430
everything, just like we have had for
the rest of the website.

13
00:00:57.430 --> 00:01:01.310
We have a div with a class
called diamond-container.

14
00:01:01.310 --> 00:01:04.027
And then inside of that we're
going to have an unordered list,

15
00:01:04.027 --> 00:01:05.990
because this is a list of pictures.

16
00:01:05.990 --> 00:01:08.910
And the unordered list here
has a class of diamonds.

17
00:01:08.910 --> 00:01:11.211
And then you see just
a bunch of list items, and

18
00:01:11.211 --> 00:01:13.400
they actually have nothing inside of them.

19
00:01:16.160 --> 00:01:19.786
So that's our HTML, that's it,
that's all we've got.

20
00:01:19.786 --> 00:01:26.720
Then here in our CSS, I have to streamline
things and make this a little easier.

21
00:01:26.720 --> 00:01:30.010
I have given you a starting
layer called diamonds.

22
00:01:30.010 --> 00:01:33.193
And for each one of those bullets and for

23
00:01:33.193 --> 00:01:37.250
fun we've used nth child
to select all of these.

24
00:01:37.250 --> 00:01:39.904
I've given you a background image,

25
00:01:39.904 --> 00:01:44.530
that's the image that should
appear here on the page.

26
00:01:44.530 --> 00:01:48.670
And we set the background size to contain.

27
00:01:48.670 --> 00:01:53.596
So we have our first child, our nth
child two, nth child three, so on and so

28
00:01:53.596 --> 00:01:58.448
forth all the way down the list to our
10th child which is the very last one

29
00:01:58.448 --> 00:01:59.800
that we have.

30
00:01:59.800 --> 00:02:03.314
And they all have set to
background size of contain.

31
00:02:03.314 --> 00:02:08.346
What contained does for a background
size is it means that no matter how big

32
00:02:08.346 --> 00:02:13.800
this background image is, we want it to
be contained within whatever we have.

33
00:02:13.800 --> 00:02:16.710
And so right now, this is just a list.

34
00:02:16.710 --> 00:02:18.970
So we have the entire image.

35
00:02:18.970 --> 00:02:21.550
These are images that have
been cropped into squares.

36
00:02:23.070 --> 00:02:24.935
They are very, very small,

37
00:02:24.935 --> 00:02:30.380
[COUGH] and they tile very nicely
here across this particular window.

38
00:02:30.380 --> 00:02:32.976
Obviously, it will not look like this for
long, but

39
00:02:32.976 --> 00:02:36.420
that is our starting point here for
what we are going to build.

40
00:02:36.420 --> 00:02:41.311
So all of these initial styles here that
are calling for our background images,

41
00:02:41.311 --> 00:02:43.063
those are going to be true and

42
00:02:43.063 --> 00:02:47.360
we'll hold through no matter what
the screen size happens to be.

43
00:02:47.360 --> 00:02:49.980
So we'll leave those outside
of the media queries.

44
00:02:49.980 --> 00:02:53.190
I'm gonna scroll all the way
down to the end of that list.

45
00:02:53.190 --> 00:02:57.810
And this is where we can start
to add new styles to this page.

46
00:02:57.810 --> 00:03:02.270
I'm going to start on
the diamond-container.

47
00:03:04.180 --> 00:03:06.610
So that's the dib that goes
all the way around everything.

48
00:03:07.730 --> 00:03:12.587
And I'm going to establish some variables
here that we'll use inside of this

49
00:03:12.587 --> 00:03:14.460
diamond environment.

50
00:03:14.460 --> 00:03:18.349
Because we are doing wild and
wacky things with this layout,

51
00:03:18.349 --> 00:03:23.200
it really isn't very flexible or
responsive within the layout itself.

52
00:03:23.200 --> 00:03:27.637
So instead, we'll wind up putting together
a diamond structure that starts at a fixed

53
00:03:27.637 --> 00:03:31.730
width, jumps to the next fixed width,
jumps to the next fixed width.

54
00:03:31.730 --> 00:03:34.292
Because anything in between
those fixed widths,

55
00:03:34.292 --> 00:03:38.050
the pictures will wind up being all
out of place and it won't look right.

56
00:03:38.050 --> 00:03:41.840
So this is not necessarily
a flexible layout.

57
00:03:41.840 --> 00:03:45.408
But you can write a series of
media queries, and if you leverage

58
00:03:45.408 --> 00:03:49.395
your variables, it's actually
really very straightforward to do.

59
00:03:49.395 --> 00:03:53.956
So here in this diamond container,
I'll set up some variables we'll call one

60
00:03:53.956 --> 00:03:57.590
square, and
I'm going to set that to be 200 pixels.

61
00:03:57.590 --> 00:04:01.882
Ultimately SQ here will be our
variable that's used for the width and

62
00:04:01.882 --> 00:04:03.680
the height of these images.

63
00:04:03.680 --> 00:04:08.742
And again, we're working with square
images because we took our square and

64
00:04:08.742 --> 00:04:11.518
we turned it on its
side to make a diamond.

65
00:04:11.518 --> 00:04:18.570
We can set up a variable
called square gap of one rem.

66
00:04:18.570 --> 00:04:21.880
And of course, that's the gap
in between our various pictures.

67
00:04:21.880 --> 00:04:26.000
And we'll set up another
variable called max width.

68
00:04:26.000 --> 00:04:29.744
In this case we're gonna
start with 325 pixels.

69
00:04:29.744 --> 00:04:36.003
So in other words this is for
very small mobile sizes.

70
00:04:36.003 --> 00:04:40.042
Then we can start declaring these, so

71
00:04:40.042 --> 00:04:44.215
our max width will be our var max width,

72
00:04:49.766 --> 00:04:54.298
Now our margin will be 2rem,
auto, give us a little

73
00:04:54.298 --> 00:04:59.242
space on the top and the bottom,
center it on the screen,

74
00:04:59.242 --> 00:05:03.990
and our border will be 2 pixels,
solid, var, cyan.

75
00:05:06.670 --> 00:05:08.180
So there's our border going around it.

76
00:05:09.480 --> 00:05:12.562
Now remember,
these variables that I've declared here

77
00:05:12.562 --> 00:05:15.460
inside of diamond container
are so-called scoped.

78
00:05:15.460 --> 00:05:18.077
It's kind of how we scope inside of CSS,
so

79
00:05:18.077 --> 00:05:22.620
these variables are not available
anywhere inside of our document.

80
00:05:22.620 --> 00:05:28.028
They are available to the items with
the class of diamond container and

81
00:05:28.028 --> 00:05:29.710
their children.

82
00:05:29.710 --> 00:05:33.700
That is the only place we can
access these particular variables.

83
00:05:33.700 --> 00:05:37.920
We could in fact put these variables
inside of root if we want it.

84
00:05:37.920 --> 00:05:41.743
Your route declaration can get really,
really long that way.

85
00:05:41.743 --> 00:05:46.655
So if you have variables that are specific
to certain parts of your web page,

86
00:05:46.655 --> 00:05:47.499
like these,

87
00:05:47.499 --> 00:05:53.120
you may want to scope them by putting them
where you are actually going to use them.

88
00:05:53.120 --> 00:05:57.030
Things like colors and fonts that we've
been using in our document, obviously,

89
00:05:57.030 --> 00:05:58.400
those are used everywhere.

90
00:05:58.400 --> 00:06:01.200
So it makes sense to put them
in that root declaration.

91
00:06:04.400 --> 00:06:08.950
All right, so
now we can work on our list items here.

92
00:06:08.950 --> 00:06:12.950
So we'll say .diamonds li.

93
00:06:12.950 --> 00:06:18.710
And that is, of course,
here in our HTML, diamonds is on our ul.

94
00:06:20.380 --> 00:06:25.905
So for all of these specific list items,
we wanna do the following.

95
00:06:25.905 --> 00:06:32.860
List Style of none, and then we'll, of
course, that makes everything disappear.

96
00:06:32.860 --> 00:06:38.899
Then we'll say our width is a var of sq,

97
00:06:38.899 --> 00:06:44.759
our square, and our height is var sq.

98
00:06:47.054 --> 00:06:48.090
So there we go.

99
00:06:48.090 --> 00:06:50.980
There's all of our images,
they show up immediately.

100
00:06:50.980 --> 00:06:52.340
They're all the same size.

101
00:06:55.210 --> 00:06:59.438
And we can set a margin on

102
00:06:59.438 --> 00:07:05.151
the bottom of var sq hyphen gap.

103
00:07:05.151 --> 00:07:08.552
So that'll give us a little bit of
space in between those pictures.

104
00:07:08.552 --> 00:07:11.943
On screens that are this
small 325 pixels and

105
00:07:11.943 --> 00:07:17.290
smaller is what we're current kind
of currently de designing for.

106
00:07:17.290 --> 00:07:21.382
My diamond layout actually
doesn't work at all, so

107
00:07:21.382 --> 00:07:27.714
we're gonna give everybody a default
layout here for extremely small devices.

108
00:07:27.714 --> 00:07:33.440
And this is fine, it's okay but
it might be better if we did something

109
00:07:33.440 --> 00:07:39.030
fun with this and so I am going to
write an additional style here.

110
00:07:39.030 --> 00:07:44.090
So this is just gonna give us a list
of photos here for a very small device.

111
00:07:44.090 --> 00:07:47.082
There they are all in a list,
not especially fun,

112
00:07:47.082 --> 00:07:52.290
especially compared to that diamond layout
that we'll get to here in a moment.

113
00:07:52.290 --> 00:07:56.352
So one of the things that we could do to
make this a little bit more fun would be

114
00:07:56.352 --> 00:07:57.850
to tilt these.

115
00:07:57.850 --> 00:08:01.421
We can just give them a little bit of
a rotation, sort of like you took some

116
00:08:01.421 --> 00:08:04.720
photos and threw them on a table,
some physical photos.

117
00:08:04.720 --> 00:08:09.190
So we can do that really easily because
we have just a series of list items.

118
00:08:09.190 --> 00:08:16.984
We'll say dot diamonds li:nthchildodd.

119
00:08:16.984 --> 00:08:21.642
So for odd number images,

120
00:08:21.642 --> 00:08:25.877
let's do a transform,

121
00:08:25.877 --> 00:08:29.920
rotate four degrees.

122
00:08:29.920 --> 00:08:33.844
So there's all my odd pictures,
now they've just rotated a little bit,

123
00:08:33.844 --> 00:08:34.750
not a lot.

124
00:08:34.750 --> 00:08:38.950
Just a little bit and we could do
the same thing for our even ones.

125
00:08:40.620 --> 00:08:44.507
Diamonds li and child even.

126
00:08:46.996 --> 00:08:49.635
Transform, rotate.

127
00:08:52.998 --> 00:08:56.130
-6 degrees.

128
00:08:56.130 --> 00:08:57.200
Why did I pick those?

129
00:08:57.200 --> 00:08:59.500
I don't know, looks kind of fun.

130
00:08:59.500 --> 00:09:00.100
Isn't that better?

131
00:09:02.010 --> 00:09:02.620
That looks great.

132
00:09:03.660 --> 00:09:06.856
So on a really, really small screen,
you'll be able to see the pictures,

133
00:09:06.856 --> 00:09:08.500
they don't look completely boring.

134
00:09:09.530 --> 00:09:13.260
And here I've just used even and
odd in my display here.

135
00:09:13.260 --> 00:09:15.520
You could amp this up and
make it even more fun.

136
00:09:15.520 --> 00:09:19.267
You could do something like every third or
every fourth, and you could set different

137
00:09:19.267 --> 00:09:23.060
transforms for all of those and make it
look even more random than I have here.

138
00:09:23.060 --> 00:09:26.644
But that's the general idea for
styling at these small dimensions.

