WEBVTT

1
00:00:00.000 --> 00:00:03.980
[MUSIC]

2
00:00:03.980 --> 00:00:06.914
&gt;&gt; Kevin Whinnery: So the first thing
that I wanna do before we get started,

3
00:00:06.914 --> 00:00:11.357
is to ensure everybody is at a good place
with their local development environment.

4
00:00:11.357 --> 00:00:15.959
So that GitHub repository, that I sent
out before, contains what should be,

5
00:00:15.959 --> 00:00:20.790
at this point, a fully functional no JS
web application that you can run locally.

6
00:00:21.830 --> 00:00:25.800
So if you head out,
if you haven't gone there already,

7
00:00:25.800 --> 00:00:28.934
it's actually up on my GitHub repository.

8
00:00:28.934 --> 00:00:33.780
GitHub.com/kwhinnery/todomvc-plusplus, and

9
00:00:33.780 --> 00:00:38.523
thanks to some great QA from
here in the room earlier.

10
00:00:38.523 --> 00:00:42.465
I believe that ReadMe should take you all
the way through actually getting this

11
00:00:42.465 --> 00:00:44.328
thing set up locally on your laptop.

12
00:00:44.328 --> 00:00:48.005
And I think that is the first step that
we need to accomplish before we get on to

13
00:00:48.005 --> 00:00:49.280
some of the other things.

14
00:00:49.280 --> 00:00:52.118
So we'll take as much time as we need,
hopefully,

15
00:00:52.118 --> 00:00:56.672
not too much time, just to make sure that
we get everybody with a functioning local

16
00:00:56.672 --> 00:01:00.383
development environment so
they can start playing along at home.

17
00:01:00.383 --> 00:01:03.227
So let's go ahead and do that, and

18
00:01:03.227 --> 00:01:08.290
I'll be coming around to help
folks as they might need help.

19
00:01:08.290 --> 00:01:13.072
The one potential tripping point for
a local development environment,

20
00:01:13.072 --> 00:01:16.766
may or may not be getting like
post grads up and running.

21
00:01:16.766 --> 00:01:21.350
Postgres can be kind of a bear to
configure for local local development.

22
00:01:21.350 --> 00:01:25.580
So if you want to take
sort of a short cut,

23
00:01:25.580 --> 00:01:29.660
there is a service out there you
can sign up for called ElephantSQL.

24
00:01:29.660 --> 00:01:35.800
And you can actually provision
a shared Postgres database for free.

25
00:01:35.800 --> 00:01:39.190
And we can drop that database
configuration directly

26
00:01:39.190 --> 00:01:40.620
into your application.

27
00:01:41.750 --> 00:01:43.930
So I would invite you to
go through the README,

28
00:01:43.930 --> 00:01:46.270
start taking those steps
if you haven't already.

29
00:01:46.270 --> 00:01:49.644
And while you're doing that,
I'll very briefly kind of

30
00:01:49.644 --> 00:01:53.944
go through the structure of the
application project as it exists today.

31
00:01:53.944 --> 00:01:55.950
So you have a sense of where to look for
what.

32
00:01:57.640 --> 00:02:00.640
So I'll browse it out here on GitHub.

33
00:02:02.010 --> 00:02:06.785
And the bits that I'll draw your
attention to you right away are this bit,

34
00:02:06.785 --> 00:02:10.801
the grant file, which I'll dive
into you a little bit later.

35
00:02:10.801 --> 00:02:12.587
And that's sort of the nexus for

36
00:02:12.587 --> 00:02:16.703
most of the administrative commands
that will run for this application.

37
00:02:16.703 --> 00:02:18.934
Grunt is a general purpose task runner.

38
00:02:18.934 --> 00:02:21.706
Again, that will dive
into in more depth later.

39
00:02:21.706 --> 00:02:25.671
We have a package.json, which contains
all of our projects dependencies,

40
00:02:25.671 --> 00:02:27.198
that you'll be installing.

41
00:02:27.198 --> 00:02:32.365
And then we have a bin directory,
which contains the the JavaScript file,

42
00:02:32.365 --> 00:02:37.802
which actually run a watch is the HTTP
server, which powers our application.

43
00:02:37.802 --> 00:02:42.544
And then right now we just have one
custom grunt task located in this

44
00:02:42.544 --> 00:02:43.989
directory as well.

45
00:02:43.989 --> 00:02:48.654
But anything having to do with any
custom code, we're gonna write for

46
00:02:48.654 --> 00:02:50.570
the command lives in there.

47
00:02:50.570 --> 00:02:54.721
The configure directory,
this is how we use it.

48
00:02:54.721 --> 00:02:59.535
It's sort of loosely based
on Django configuration, but

49
00:02:59.535 --> 00:03:05.038
we have a this index.js,
which has sort of the global defaults for

50
00:03:05.038 --> 00:03:08.002
the applications configuration.

51
00:03:08.002 --> 00:03:11.981
And then we have a configuration files
with overrides for the development

52
00:03:11.981 --> 00:03:15.970
production and test environments so
you can dig through that if you like.

53
00:03:15.970 --> 00:03:18.875
But we also have this file user.save.js,

54
00:03:18.875 --> 00:03:21.945
which doesn't have
anything in it right now.

55
00:03:21.945 --> 00:03:25.391
But if you create a user.js for
local development,

56
00:03:25.391 --> 00:03:29.474
you could override any of
the configuration settings there.

57
00:03:29.474 --> 00:03:34.346
Such as a custom database URL perhaps,
if you go the route of spinning

58
00:03:34.346 --> 00:03:38.550
up an ElephantSQL database
rather than having a local one.

59
00:03:40.650 --> 00:03:45.073
So configuration lives there,
we have this db directory,

60
00:03:45.073 --> 00:03:50.026
and the primary bit you'll be
interested in is this is where we have

61
00:03:50.026 --> 00:03:55.345
configured our orm to place the migration
files for this application.

62
00:03:55.345 --> 00:03:59.034
We are using a relational database for
this application, so

63
00:03:59.034 --> 00:04:03.806
as we modify the database we'll have to
create migrations to move the database

64
00:04:03.806 --> 00:04:05.490
from one state to another.

65
00:04:05.490 --> 00:04:08.863
If you're used frameworks like Rails or

66
00:04:08.863 --> 00:04:14.228
maybe hibernate before you kind
of familiar with this concept.

67
00:04:14.228 --> 00:04:18.010
The source directory is where
most of the fun stuff lives.

68
00:04:18.010 --> 00:04:25.110
The browser directory has all of the front
end JavaScript code and as SCSS files.

69
00:04:25.110 --> 00:04:29.868
The static directory contains
things that will be copied over

70
00:04:29.868 --> 00:04:33.630
verbatim into the web
root of your application.

71
00:04:33.630 --> 00:04:39.848
The server directory contains
our express web app,

72
00:04:39.848 --> 00:04:44.234
our mocha task for our back end code.

73
00:04:44.234 --> 00:04:51.222
It also contains the model directory which
configures our database connection and

74
00:04:51.222 --> 00:04:55.332
defines the model objects for
our application.

75
00:04:55.332 --> 00:05:00.165
We have controllers which have the routes
for our application, and this to do is

76
00:05:00.165 --> 00:05:04.725
controller, which actually powers all
of the routes in the application.

77
00:05:04.725 --> 00:05:08.641
If you don't know what these things are
don't worry we'll kind of dive into more

78
00:05:08.641 --> 00:05:10.020
of them as we go.

79
00:05:10.020 --> 00:05:14.238
Now we also have the views directory
which actually has the HTML which will

80
00:05:14.238 --> 00:05:16.702
serve the front end for this application.

81
00:05:19.199 --> 00:05:22.731
&gt;&gt; Kevin Whinnery: And there is a tiny
bit of shared code, in my experience,

82
00:05:22.731 --> 00:05:25.456
the opportunity for
code reads on client and

83
00:05:25.456 --> 00:05:28.270
server is not maybe as
great as you had hoped.

84
00:05:28.270 --> 00:05:31.692
The bigger win is the ability
to write the same kind of code.

85
00:05:31.692 --> 00:05:36.621
And both line in the server, but
there is a tiny bit of affordance for

86
00:05:36.621 --> 00:05:38.969
shared code across platforms.

87
00:05:38.969 --> 00:05:42.050
And will if you have any questions
about other stuff as we go along.

88
00:05:42.050 --> 00:05:47.550
I'd be happy to be happy to go
specifically into any of the decisions or

89
00:05:47.550 --> 00:05:49.802
the other other bits there.

90
00:05:49.802 --> 00:05:52.800
But many of them will go over
as we go through the course.

91
00:05:53.930 --> 00:05:59.061
So at this point, what I would like
to do is ensure that everybody

92
00:05:59.061 --> 00:06:04.002
gets the application going locally
to the point where they can

93
00:06:04.002 --> 00:06:08.200
run a grunt in the top level
application directory.

94
00:06:08.200 --> 00:06:11.614
Which will fire up a couple
of neat tools which will

95
00:06:11.614 --> 00:06:15.350
monitor your application project for
changes.

96
00:06:15.350 --> 00:06:17.980
And then execute compilation steps or

97
00:06:17.980 --> 00:06:21.310
relaunching the application
based on changes.

98
00:06:21.310 --> 00:06:27.499
So what you should be able to do
with a running Postgres database and

99
00:06:27.499 --> 00:06:32.694
a valid database connection
is I have a persistent set of

100
00:06:32.694 --> 00:06:37.796
todos that will stick with
you across page refreshes.

101
00:06:37.796 --> 00:06:41.480
Because in this instance, they're actually
being stored in a Postgres database.

102
00:06:41.480 --> 00:06:43.932
So this is the step that I
would like to get everybody to.

103
00:06:43.932 --> 00:06:47.197
So we'll spend a little bit of time doing
that before we dive into some of the code

104
00:06:47.197 --> 00:06:49.350
that drives the web server.

105
00:06:49.350 --> 00:06:55.208
All right, so I remiked myself
because I was talking about the option

106
00:06:55.208 --> 00:07:00.372
of using ElephantSQL rather
than a local Postgre database.

107
00:07:00.372 --> 00:07:07.418
It looks like my configuration
might not be totally sound as yet.

108
00:07:07.418 --> 00:07:11.202
Because I haven't run the migrations
cuz I change my database URL, but

109
00:07:11.202 --> 00:07:12.850
I didn't run the migrations.

110
00:07:12.850 --> 00:07:19.030
So I am going to run sequelize db:migrate.

111
00:07:21.668 --> 00:07:25.227
&gt;&gt; Kevin Whinnery: And
that should go across the network and

112
00:07:25.227 --> 00:07:29.040
update my ElephantSQL database.

113
00:07:29.040 --> 00:07:32.752
&gt;&gt; Speaker 2: Show us where
you change the config.

114
00:07:32.752 --> 00:07:36.875
&gt;&gt; Kevin Whinnery: And again where I
change that config was I created a file

115
00:07:36.875 --> 00:07:40.112
called user.js in the config directory.

116
00:07:40.112 --> 00:07:44.580
And I didn't override for this database
URL property, and you can actually copy

117
00:07:44.580 --> 00:07:49.880
the configuration like say from the test
environment and just bring that over.

118
00:07:49.880 --> 00:07:54.817
And then you can paste
in that Postgres URL,

119
00:07:54.817 --> 00:07:57.892
you get from ElephantSQL.

120
00:07:57.892 --> 00:08:02.168
And now when I refresh, I get an empty
list of to do's which is okay.

121
00:08:02.168 --> 00:08:04.352
And if I go back to the UI,

122
00:08:04.352 --> 00:08:09.940
I should start being able to
pop in some to do list items.

123
00:08:09.940 --> 00:08:16.125
So the steps there would be to update
the configuration to your ElephantSQL

124
00:08:16.125 --> 00:08:20.110
database URL to go out to the terminal and

125
00:08:20.110 --> 00:08:24.540
execute, sequelize db:migrate.

126
00:08:24.540 --> 00:08:29.096
And then you can rerun your
development server with Grunt and

127
00:08:29.096 --> 00:08:32.231
you should be off to the races from there.

128
00:08:32.231 --> 00:08:34.984
&gt;&gt; Speaker 3: And
what is the get path to ElephantSQL?

129
00:08:37.361 --> 00:08:41.875
&gt;&gt; Kevin Whinnery: It is,
&gt;&gt; Kevin Whinnery: If you go to

130
00:08:41.875 --> 00:08:46.580
ElephantSQL.com, you can sign up for an
account, and then you can create your own.

131
00:08:46.580 --> 00:08:50.890
&gt;&gt; Speaker 3: What are the limitations
on ElephantSQL, as far as use?

132
00:08:50.890 --> 00:08:54.476
&gt;&gt; Kevin Whinnery: The free
database is only 20 megabytes.

133
00:08:54.476 --> 00:08:55.550
So that would be the big one right there.

134
00:08:57.700 --> 00:09:03.610
But you can create multiple free
databases if you would like.

135
00:09:03.610 --> 00:09:05.321
&gt;&gt; Speaker 2: Charting across free.

136
00:09:05.321 --> 00:09:06.793
[LAUGH]
&gt;&gt; Kevin Whinnery: Yes,

137
00:09:06.793 --> 00:09:10.619
maybe it has some other
fun features as well.

138
00:09:10.619 --> 00:09:14.714
But use this a couple times in workshops
just for something quick and dirty.

139
00:09:16.624 --> 00:09:21.912
&gt;&gt; Kevin Whinnery: All right, so,
&gt;&gt; Kevin Whinnery: We have a couple folks

140
00:09:21.912 --> 00:09:26.853
online reporting an issue that was,
if you loaded up the README earlier.

141
00:09:26.853 --> 00:09:29.710
We actually discovered some bugs in it,
I apologize,

142
00:09:29.710 --> 00:09:31.769
here in the room earlier this morning.

143
00:09:31.769 --> 00:09:35.066
If you're loading up the page and
you don't see, and

144
00:09:35.066 --> 00:09:39.467
the style sheets aren't being loaded
run grunt collect_static, and

145
00:09:39.467 --> 00:09:43.662
collects static has an underscore
between the collect and static.

146
00:09:43.662 --> 00:09:47.030
The README on GitHub has been
updated to reflect this.

147
00:09:47.030 --> 00:09:51.883
But that will copy over the static
CSS files that you need to be

148
00:09:51.883 --> 00:09:54.640
in that public directory.

149
00:09:54.640 --> 00:09:58.901
So the README is with
updated to reflect that.

150
00:09:58.901 --> 00:10:03.625
But I'll show one more time is the fastest
path to success with Postgres,

151
00:10:03.625 --> 00:10:06.911
which I think is where most
people are tripping up.

152
00:10:06.911 --> 00:10:07.900
If you're on the repo and

153
00:10:07.900 --> 00:10:10.740
following the README, we'll start
kind of right from the beginning.

154
00:10:10.740 --> 00:10:13.622
You're still gonna wanna do this
after you download the code.

155
00:10:13.622 --> 00:10:15.065
If you haven't already,

156
00:10:15.065 --> 00:10:19.207
you wanna do npm install in the directory
in which you downloaded the code.

157
00:10:19.207 --> 00:10:23.579
You wanna do npm install -g grunt-cli and
sequalize cli, and

158
00:10:23.579 --> 00:10:27.220
that'll put two new commands
on your system path.

159
00:10:27.220 --> 00:10:31.227
One is called grunt, and that's the task
order that we're gonna be using.

160
00:10:31.227 --> 00:10:35.963
And another is called sequelize, and that
will control the database migrations and

161
00:10:35.963 --> 00:10:38.039
the other stuff the only to do later.

162
00:10:38.039 --> 00:10:42.403
And then for setting up the database,
if you don't wanna go the route or

163
00:10:42.403 --> 00:10:45.241
were not successful going
the route of getting

164
00:10:45.241 --> 00:10:48.899
a local Postgres database
going with these instructions.

165
00:10:50.450 --> 00:10:53.810
Simply forgo these instructions and

166
00:10:53.810 --> 00:10:59.530
create a database using ElephantSQL
which you can sign up for

167
00:10:59.530 --> 00:11:03.120
a free account at elephantsql.com.

168
00:11:03.120 --> 00:11:07.390
Then once you have signed up for one,

169
00:11:07.390 --> 00:11:12.520
the first thing you're gonna see
is a URL for your database info.

170
00:11:12.520 --> 00:11:17.930
And you can use this connection string
in lieu of a local Postgres database.

171
00:11:17.930 --> 00:11:23.110
So to connect to this database rather
than one that's running locally

172
00:11:23.110 --> 00:11:26.650
inside your application folder here.

173
00:11:26.650 --> 00:11:29.983
And this is the code that you
downloaded from GitHub or

174
00:11:29.983 --> 00:11:32.515
you cloned when you got the repository.

175
00:11:32.515 --> 00:11:36.734
You will create a file called user.js, and

176
00:11:36.734 --> 00:11:41.410
you can initialize
the contents of that file with

177
00:11:41.410 --> 00:11:45.420
what's in the test.js file or similar.

178
00:11:45.420 --> 00:11:53.601
And then you will copy in your ElephantSQL
database string into this file.

179
00:11:53.601 --> 00:11:58.554
And then the application will connect to
that ElephantSQL database rather than one

180
00:11:58.554 --> 00:12:00.660
that's running locally.

181
00:12:00.660 --> 00:12:01.370
After you do that,

182
00:12:02.560 --> 00:12:07.400
then you can continue along with the rest
of the instructions in the README.

183
00:12:07.400 --> 00:12:11.294
See, you will then do
sequelize db:migrate.

184
00:12:11.294 --> 00:12:15.281
And then you will do grunt collect_static,
and then at that point,

185
00:12:15.281 --> 00:12:20.180
you should be able to run the application
locally just by running the grunt command.

186
00:12:22.050 --> 00:12:26.170
So we'll make sure that we
get everybody to that step.

187
00:12:26.170 --> 00:12:30.070
But again, I think the fastest path
to success is signing up, if you're

188
00:12:30.070 --> 00:12:34.400
struggling with Postgres locally, sign
up for an account here and ElephantSQL.

189
00:12:34.400 --> 00:12:37.954
And just go ahead and use that,
we'll be totally fine for

190
00:12:37.954 --> 00:12:40.557
our little local development purposes.

191
00:12:40.557 --> 00:12:45.417
Right, so we will come around make
sure if anybody still needs help.

192
00:12:45.417 --> 00:12:47.149
And when we get into the next exercise,

193
00:12:47.149 --> 00:12:50.890
we make sure everybody starts by getting
the local development environment radio.

