WEBVTT

1
00:00:00.000 --> 00:00:04.024
[MUSIC]

2
00:00:04.024 --> 00:00:08.624
&gt;&gt; Kevin Whinnery: It was a lot of code to
bite off but, I think it hopefully gave

3
00:00:08.624 --> 00:00:13.880
you a sense of the end process of
migrating a database in this way.

4
00:00:13.880 --> 00:00:15.640
So it was about half and half.

5
00:00:15.640 --> 00:00:20.080
So what I think we'll do is actually
live code this solution together, so

6
00:00:20.080 --> 00:00:24.990
we understand how to like all the pieces
of code that are necessary to make this

7
00:00:24.990 --> 00:00:26.490
make this change happen.

8
00:00:26.490 --> 00:00:29.680
So the first the first bit that
you're gonna want to do like

9
00:00:29.680 --> 00:00:34.010
if I'm going to want to
update my data model.

10
00:00:34.010 --> 00:00:37.790
the first thing I want to do
is generate a a migration and

11
00:00:37.790 --> 00:00:42.960
that that piece of That piece
of code there that documentation

12
00:00:42.960 --> 00:00:47.720
that I put in the chat kind of takes
you through how that works using SQL.

13
00:00:47.720 --> 00:00:53.451
So I'm gonna use the sequelize command
line utility and then it has a it

14
00:00:53.451 --> 00:00:59.801
has an option called migration:create.
&gt;&gt; Kevin Whinnery: And

15
00:00:59.801 --> 00:01:05.287
that's going to create a new
migration file for me in my project,

16
00:01:05.287 --> 00:01:12.711
so close some of this stuff down.
&gt;&gt; Kevin Whinnery: All right,

17
00:01:12.711 --> 00:01:17.590
so again when we have
a migration like this.

18
00:01:17.590 --> 00:01:22.020
A migration is gonna consist of two
operations, the up and the down operation.

19
00:01:22.020 --> 00:01:26.979
So when I am migrating my database up,
when I am modifying it from it's

20
00:01:26.979 --> 00:01:32.544
previous state, all of the logic to do
that is gonna be within the up function.

21
00:01:32.544 --> 00:01:37.170
And if for some reason I need to
roll that database change back.

22
00:01:37.170 --> 00:01:41.930
All the logic to do that is
gonna be in my down function.

23
00:01:41.930 --> 00:01:45.804
And one of the mistakes I saw
people making was trying to

24
00:01:45.804 --> 00:01:49.800
recreate the table for

25
00:01:49.800 --> 00:01:55.000
a user within the up function adding in
that boolean field that we had before.

26
00:01:55.000 --> 00:01:57.420
So totally understandable
why you'd think so.

27
00:01:57.420 --> 00:02:00.790
Like you'd wanna update
the definition of this model.

28
00:02:00.790 --> 00:02:05.910
But with a database you probably
already have a database full

29
00:02:05.910 --> 00:02:08.860
of like hundreds of thousands of todos or
whatever, and

30
00:02:08.860 --> 00:02:13.040
you can't recreate that database table or
you'll lose all the data.

31
00:02:13.040 --> 00:02:15.770
So what you wanna do
is modify it in place.

32
00:02:15.770 --> 00:02:19.990
And that is the role of
code in a migration.

33
00:02:19.990 --> 00:02:27.570
So in the up function I wanna add
a column to my existing database.

34
00:02:27.570 --> 00:02:31.340
So the way that I do that and
this is again in the documentation that I

35
00:02:31.340 --> 00:02:35.649
put in the chat is using
a query interface.addColumn.

36
00:02:37.050 --> 00:02:39.070
And this takes a couple of arguments.

37
00:02:41.020 --> 00:02:44.160
The first is going to be
the name of an existing table.

38
00:02:45.210 --> 00:02:47.430
Which I believe is Todos.

39
00:02:49.070 --> 00:02:55.130
I can double check that
actually in my model on a file.

40
00:02:55.130 --> 00:02:56.690
To do, actually might be called.

41
00:02:59.420 --> 00:03:04.568
So that's gonna be the name of my table.
&gt;&gt; Kevin Whinnery: And

42
00:03:04.568 --> 00:03:08.901
then it's going to be the name of
the attribute that I want to add, and

43
00:03:08.901 --> 00:03:16.141
in this case I'll call it completed.
&gt;&gt; Kevin Whinnery: And

44
00:03:16.141 --> 00:03:20.220
then finally I need the data
type that I want it to be in.

45
00:03:20.220 --> 00:03:23.568
In this case,
I'm gonna make it a boolean and so

46
00:03:23.568 --> 00:03:26.350
I'll say a sequelize is boolean type.

47
00:03:27.560 --> 00:03:32.850
So I'm gonna add, add a column
to do table called completed and

48
00:03:32.850 --> 00:03:36.790
it's gonna be of type of boolean and
then in the down.

49
00:03:36.790 --> 00:03:41.160
I'm gonna do something very,very similar.

50
00:03:41.160 --> 00:03:42.840
So rather than add column.

51
00:03:42.840 --> 00:03:50.189
I'm going to remove column.
&gt;&gt; Kevin Whinnery: And

52
00:03:50.189 --> 00:03:53.599
the two parameters are gonna pass and

53
00:03:53.599 --> 00:03:58.769
again are the name of the table,
and then the actual just

54
00:03:58.769 --> 00:04:05.030
the name of the of the property
owner move, so we had to do you.

55
00:04:05.030 --> 00:04:05.530
And then [INAUDIBLE].

56
00:04:09.960 --> 00:04:10.990
All right, so

57
00:04:12.440 --> 00:04:17.310
now I've got my migration logic in
a place where I feel like I want it.

58
00:04:17.310 --> 00:04:22.150
Now what I want to do is you know that
time stamp that gets generated for

59
00:04:22.150 --> 00:04:25.350
the migration is important
because it lets us see sequalize.

60
00:04:25.350 --> 00:04:29.980
No way which migrations have actually been
applied because each migration is ordered

61
00:04:29.980 --> 00:04:31.300
chronologically.

62
00:04:31.300 --> 00:04:34.950
So that I don't want to touch but
the second part is just for

63
00:04:34.950 --> 00:04:36.450
humans to make it more readable.

64
00:04:36.450 --> 00:04:42.401
So I'm gonna call this migration
add-competed-column or

65
00:04:42.401 --> 00:04:46.610
something like that just.
&gt;&gt; Speaker 2: I had to do's for

66
00:04:46.610 --> 00:04:49.490
the table name instead of todo.
&gt;&gt; Kevin Whinnery: It is to do's?

67
00:04:50.490 --> 00:04:51.200
&gt;&gt; Speaker 3: If you look at the other

68
00:04:51.200 --> 00:04:53.810
migration it has an S on it.
&gt;&gt; Kevin Whinnery: Okay.

69
00:04:53.810 --> 00:04:57.060
So I'm sure I would have figured that
out when my code didn't run, but

70
00:04:57.060 --> 00:04:58.810
I appreciate the heads up.
&gt;&gt; Speaker 2: So

71
00:04:58.810 --> 00:05:01.750
can you explain again why
would the down and the column,

72
00:05:01.750 --> 00:05:03.650
wouldn't it remove a column?
&gt;&gt; Kevin Whinnery: I'm sorry that

73
00:05:03.650 --> 00:05:04.300
was another typo.

74
00:05:04.300 --> 00:05:07.460
It was a copy paste error on my part.

75
00:05:08.530 --> 00:05:10.170
Thank you guys, appreciate it.

76
00:05:10.170 --> 00:05:12.170
You are helping me debug left,
right, and center.

77
00:05:12.170 --> 00:05:15.640
So yeah, the up is gonna add the column
and the down is going to remove,

78
00:05:15.640 --> 00:05:16.500
remove the column.

79
00:05:16.500 --> 00:05:18.810
So that is my bad.

80
00:05:18.810 --> 00:05:22.650
That is definitely
the danger of doing it live.

81
00:05:22.650 --> 00:05:24.870
So my migration is created.

82
00:05:24.870 --> 00:05:27.688
I've given it a human readable label.

83
00:05:27.688 --> 00:05:33.123
And then I can head out to
the command line again.

84
00:05:33.123 --> 00:05:37.395
And I'm gonna run sequalize db:migrate.

85
00:05:40.367 --> 00:05:43.069
&gt;&gt; Speaker 2: Do you want to be allowing

86
00:05:43.069 --> 00:05:48.474
null as a value for
the completed attribute here,

87
00:05:48.474 --> 00:05:53.320
or does it not matter in this instance?
&gt;&gt; Kevin Whinnery: So

88
00:05:53.320 --> 00:05:56.250
that's a question you have to answer
based on your application logics.

89
00:05:56.250 --> 00:05:59.810
So if it is very important that
this value is not null and

90
00:05:59.810 --> 00:06:02.260
you want to have that
constraint in the database.

91
00:06:02.260 --> 00:06:06.730
In your migration, you'll also
have to update all of the other

92
00:06:06.730 --> 00:06:11.920
rows in the database to have either
a true or false value for that.

93
00:06:11.920 --> 00:06:13.900
So you'd have to code
that into the migration.

94
00:06:13.900 --> 00:06:16.620
In this case,
we are going to allow a null, and

95
00:06:16.620 --> 00:06:19.490
we're not gonna mutate
the rest of the table.

96
00:06:19.490 --> 00:06:22.500
But you can kinda decide based on
the needs of the your application.

97
00:06:23.690 --> 00:06:28.240
That's definitely something
you have to think through.

98
00:06:28.240 --> 00:06:30.160
Right, so I've run my migration.

99
00:06:30.160 --> 00:06:36.640
So now if I check my database and
I this is another little tool that I use

100
00:06:36.640 --> 00:06:42.050
a lot when I'm using postgre locally it's
called Postico I don't know what exactly,

101
00:06:42.050 --> 00:06:45.850
it's supposed to be called.

102
00:06:45.850 --> 00:06:51.920
But it's a nice Mac GUI
over my database and

103
00:06:51.920 --> 00:06:58.520
it lets me sort of take a look at my
at the current status of my database.

104
00:06:58.520 --> 00:07:02.530
And I think actually my database
configuration might still be.

105
00:07:03.970 --> 00:07:06.580
Yeah, it's actually set up
to go to this other thing.

106
00:07:06.580 --> 00:07:10.180
So I'm just gonna delete that.

107
00:07:10.180 --> 00:07:13.640
Cuz I don't care about that.

108
00:07:13.640 --> 00:07:14.683
And I'll run my migration again.

109
00:07:14.683 --> 00:07:16.135
This will actually target my local

110
00:07:16.135 --> 00:07:20.822
database.
&gt;&gt; Kevin Whinnery: And

111
00:07:20.822 --> 00:07:25.962
I'll hit refresh and there,
now I have my completed column, but

112
00:07:25.962 --> 00:07:31.210
it's null because I didn't do any
mutation of the existing data.

113
00:07:31.210 --> 00:07:32.740
So now my database is in a good state.

114
00:07:32.740 --> 00:07:35.630
Now, I need to update my model to reflect

115
00:07:35.630 --> 00:07:39.313
this new value.
&gt;&gt; Speaker 4: I missed

116
00:07:39.313 --> 00:07:41.902
the command for the update them database

117
00:07:41.902 --> 00:07:44.637
what was that again?
&gt;&gt; Kevin Whinnery: It was sequelize

118
00:07:44.637 --> 00:07:49.080
db:migrate it was the same command that
you ran, to run the first migration

119
00:07:49.080 --> 00:07:52.700
initially but now it's gonna pick up that
there's a new migration that it needs

120
00:07:52.700 --> 00:07:56.307
to run against the database.
&gt;&gt; Speaker 3: Or npm run migrate.

121
00:07:56.307 --> 00:07:57.630
&gt;&gt; Kevin Whinnery: Exactly,

122
00:07:57.630 --> 00:08:04.050
we added that feature
earlier today good point.

123
00:08:04.050 --> 00:08:07.970
So we run the migrations and
now we have this new column.

124
00:08:07.970 --> 00:08:11.830
Now we need to update our model
declaration in JavaScript

125
00:08:11.830 --> 00:08:15.960
to be aware of this new property
to make this property persistent.

126
00:08:15.960 --> 00:08:20.960
And so add a completed attribute to

127
00:08:20.960 --> 00:08:26.160
the model which again is gonna be of type,
BOOLEAN

