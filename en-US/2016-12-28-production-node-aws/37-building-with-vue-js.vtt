WEBVTT

1
00:00:00.000 --> 00:00:03.869
[MUSIC]

2
00:00:03.869 --> 00:00:08.007
&gt;&gt; Kevin Whinnery: We talked a little
bit about some of the tools that we used

3
00:00:08.007 --> 00:00:10.737
that are sort of a framework agnostic

4
00:00:10.737 --> 00:00:15.890
to enhance what we can do in our
front-end JavaScript and CSS.

5
00:00:15.890 --> 00:00:20.693
Now we're gonna dive a little
deeper into the the core front-end

6
00:00:20.693 --> 00:00:25.235
framework that we're using to
drive most of the interface for

7
00:00:25.235 --> 00:00:28.572
TodoMVC in this example, which is Vue.js.

8
00:00:28.572 --> 00:00:33.016
And Vue.js, if you remember from
yesterday I'm fond of talking about

9
00:00:33.016 --> 00:00:36.622
spectrums to kind of place
different tools inside them.

10
00:00:36.622 --> 00:00:40.912
When you're thinking about sort
of building a rich front-end,

11
00:00:40.912 --> 00:00:45.047
there are frameworks that do quite
a lot for you up on the right.

12
00:00:45.047 --> 00:00:49.447
We have AngularJS which
with version 2.0 and

13
00:00:49.447 --> 00:00:55.610
in previous versions, really demands
a lot of you as a developer.

14
00:00:55.610 --> 00:01:00.297
You really have to buy into the angular
way of writing applications and

15
00:01:00.297 --> 00:01:05.144
you're probably gonna write your
entire front-end to be an angular web

16
00:01:05.144 --> 00:01:09.371
application, and the same is true
of react to a lesser degree.

17
00:01:09.371 --> 00:01:13.765
It is possible, I think more possible and
I shouldn't say,

18
00:01:13.765 --> 00:01:16.264
it's impossible of annular, but

19
00:01:16.264 --> 00:01:21.350
I see react employed more frequently
as to provide dynamic features to

20
00:01:21.350 --> 00:01:26.370
a component of a web application more so
than I do on the angular side.

21
00:01:26.370 --> 00:01:31.410
But again, you're kind of buying into
the framework whole hog and writing

22
00:01:31.410 --> 00:01:36.292
all of your code to kind of specifically
cater to that to that framework.

23
00:01:36.292 --> 00:01:39.191
And then on the sort of
other end of the spectrum,

24
00:01:39.191 --> 00:01:41.750
you can write write JavaScript yourself.

25
00:01:41.750 --> 00:01:46.259
You can write jQuery plugins that
do all the fancy stuff on your

26
00:01:46.259 --> 00:01:51.114
page without really any any set
structure imposed by a framework or

27
00:01:51.114 --> 00:01:53.889
you can use something like backbone,

28
00:01:53.889 --> 00:01:59.265
which is quite a bit less opinionated and
just provide sort of a minimum for

29
00:01:59.265 --> 00:02:03.804
how you can write the JavaScript
which runs your front-end.

30
00:02:03.804 --> 00:02:05.425
And I think Vue actually,

31
00:02:05.425 --> 00:02:10.230
one of the reasons I like it is a kind of
sits in the middle of these approaches.

32
00:02:10.230 --> 00:02:14.270
It's something that is fairly easy
to add into any page whether or

33
00:02:14.270 --> 00:02:17.434
not you're already using
Vue as a library itself.

34
00:02:17.434 --> 00:02:20.782
It's reasonably lightweight, but

35
00:02:20.782 --> 00:02:26.290
it also provides some of the key
features that make a reactive

36
00:02:26.290 --> 00:02:31.258
angular useful like reactive
two-way data binding,

37
00:02:31.258 --> 00:02:37.090
a JavaScript object model that you
can use to update your data and

38
00:02:37.090 --> 00:02:39.820
keep your data out of the Vue.

39
00:02:39.820 --> 00:02:44.971
So I think Vue kind of setting in an
interesting middle ground between a large

40
00:02:44.971 --> 00:02:50.363
framework which kind of takes over your,
can take over your front-end code and

41
00:02:50.363 --> 00:02:55.212
these other libraries which you used
to implement parts of your logic.

42
00:02:55.212 --> 00:02:58.127
So some of the key features, again,

43
00:02:58.127 --> 00:03:03.300
the two-way data binding is
definitely one of the highlights and

44
00:03:03.300 --> 00:03:08.377
the object model is like the Vue
models that you're interacting

45
00:03:08.377 --> 00:03:13.360
with to update the data which
drives your user interface is just

46
00:03:13.360 --> 00:03:17.630
a plain JavaScript object
which I've always done.

47
00:03:17.630 --> 00:03:22.382
There's not like a special scope object or

48
00:03:22.382 --> 00:03:27.670
any kind of fancy affordance
by the framework.

49
00:03:27.670 --> 00:03:32.450
You're just interacting with
a plain JavaScript object to update

50
00:03:32.450 --> 00:03:34.020
the data of your Vue.

51
00:03:34.020 --> 00:03:39.017
It also provides much like angular
if you've used that before,

52
00:03:39.017 --> 00:03:45.031
HTML directives which you can add into
your markup to assign event handlers or

53
00:03:45.031 --> 00:03:48.474
bind event handlers to
methods on your Vue.

54
00:03:48.474 --> 00:03:53.464
And you can build fully compliant
component oriented applications

55
00:03:53.464 --> 00:03:57.664
much like you can with reacted
angular using Vue as well,

56
00:03:57.664 --> 00:04:01.180
if you decide to use it
in that in that capacity.

