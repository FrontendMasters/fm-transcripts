WEBVTT

1
00:00:00.000 --> 00:00:04.182
[MUSIC]

2
00:00:04.182 --> 00:00:07.746
&gt;&gt; Kevin Whinnery: Got two more big media
sections here this afternoon before I turn

3
00:00:07.746 --> 00:00:08.780
you loose.

4
00:00:08.780 --> 00:00:13.890
The first is digging into the data tier
of the application that we've been

5
00:00:15.000 --> 00:00:16.410
looking at today.

6
00:00:16.410 --> 00:00:20.390
And in this, case we're actually gonna
be looking at how to use Node.js

7
00:00:20.390 --> 00:00:22.760
with a relational database.

8
00:00:22.760 --> 00:00:27.270
Anyway, so the stack we're going
to look at is one that's actually.

9
00:00:27.270 --> 00:00:33.480
You know, less less heralded in Node.

10
00:00:33.480 --> 00:00:37.050
Because most of the no
sequel databases out there.

11
00:00:39.040 --> 00:00:43.555
Because they sort of natively speak
JSON end up being a really good fit for

12
00:00:43.555 --> 00:00:44.760
node.js.

13
00:00:44.760 --> 00:00:48.500
But for certain use cases,

14
00:00:48.500 --> 00:00:51.780
there are relational database
does make a lot of sense.

15
00:00:51.780 --> 00:00:57.630
And particularly post grads is actually
a really feature rich relational database

16
00:00:57.630 --> 00:01:00.910
which can do a lot of interesting stuff
that JavaScript can take advantage of.

17
00:01:00.910 --> 00:01:07.400
Particularly with its JSON fields allowing
you within a table to have you know of

18
00:01:07.400 --> 00:01:14.840
a rich query like a unstructured query a
bowl column with JSON data embedded in it.

19
00:01:14.840 --> 00:01:18.880
So still a really great choice for
node.js development.

20
00:01:18.880 --> 00:01:23.890
And specifically,
it allows us to use RDS which is

21
00:01:23.890 --> 00:01:28.910
the managed relational
database service from Amazon

22
00:01:28.910 --> 00:01:32.010
which is very perform entirely
available all those things.

23
00:01:32.010 --> 00:01:33.260
All right.

24
00:01:33.260 --> 00:01:38.920
So if you're gonna be using a relational
database of any kind with Node.js,

25
00:01:38.920 --> 00:01:41.310
the chances are you're probably
gonna go one of two routes.

26
00:01:41.310 --> 00:01:44.420
You're gonna either use a driver for
your database directly.

27
00:01:44.420 --> 00:01:50.700
So just to use pg, or you know postgresql,
or on MySQL driver directly.

28
00:01:50.700 --> 00:01:54.550
Maybe, execute Ross equal against it or
maybe use a SQL builder.

29
00:01:54.550 --> 00:01:59.730
But if you're using an RM, and no JS,
you're probably going to use sequelize.

30
00:01:59.730 --> 00:02:03.870
Sequelize is definitely
the most feature rich or

31
00:02:03.870 --> 00:02:07.550
and that's out there for node.JS today.

32
00:02:07.550 --> 00:02:11.600
So if you're looking for
the type of experience that you might have

33
00:02:11.600 --> 00:02:14.360
enjoyed with say active
record which is kind of for

34
00:02:14.360 --> 00:02:17.154
me I like the gold standard
to which I will compare all.

35
00:02:17.154 --> 00:02:22.910
It definitely has its problems but
I feel like it's a great piece software.

36
00:02:22.910 --> 00:02:28.630
It's probably the closest you're going
to get to that in the node.js world.

37
00:02:28.630 --> 00:02:34.620
That said this is another situation
where if you choose to use Sequelize

38
00:02:34.620 --> 00:02:39.030
the support that you're going to find out
there on the inner webs is not awesome.

39
00:02:39.030 --> 00:02:40.670
There aren't a lot of tutorials.

40
00:02:40.670 --> 00:02:41.830
There aren't a lot of resources,

41
00:02:41.830 --> 00:02:45.310
there aren't a lot of sample apps
that have been built using Sequelize.

42
00:02:45.310 --> 00:02:50.290
So, you're gonna be a little bit in
the wilderness, if you use Sequelize.

43
00:02:50.290 --> 00:02:56.030
The documentation is pretty okay,
but there's a lot of things

44
00:02:56.030 --> 00:03:01.470
that go unsaid that you occasionally have
to dive into the source to figure out.

45
00:03:01.470 --> 00:03:05.640
But all that said it definitely
is of all the out there

46
00:03:05.640 --> 00:03:08.840
on top of a relational database.

47
00:03:08.840 --> 00:03:11.690
I think it's definitely a crime to cram.

48
00:03:11.690 --> 00:03:12.740
But yeah.

49
00:03:12.740 --> 00:03:18.040
As I mentioned isn't SQL for old people
like should we be using no SQL databases.

50
00:03:19.940 --> 00:03:23.440
And there's some reasons why you might
want to consider going with a no SQL

51
00:03:23.440 --> 00:03:26.530
database for
node mostly because the support for

52
00:03:26.530 --> 00:03:28.340
no SQL databases in node is much better.

53
00:03:28.340 --> 00:03:32.020
Like there's a lot more folks
using those technologies,

54
00:03:32.020 --> 00:03:33.800
a lot more resources available.

55
00:03:33.800 --> 00:03:35.780
The libraries are a little bit better for

56
00:03:35.780 --> 00:03:41.310
instance like mongoose which is the ODM
the object Document Map for Mongo DB.

57
00:03:41.310 --> 00:03:47.570
I think is particularly good, but
the main reason that I've gone with SQL

58
00:03:47.570 --> 00:03:52.810
is that postgres itself is
an awesome feature rich database.

59
00:03:52.810 --> 00:03:59.400
RDS was a good choice within our
Amazon centric Ecosystem and

60
00:03:59.400 --> 00:04:04.290
always gonna be the best
data store solution for us.

61
00:04:04.290 --> 00:04:08.780
So the opportunity go it RDS was
it was definitely a driving factor

62
00:04:08.780 --> 00:04:09.500
in making that choice.

