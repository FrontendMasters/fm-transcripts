WEBVTT

1
00:00:00.000 --> 00:00:03.767
[MUSIC]

2
00:00:03.767 --> 00:00:09.790
&gt;&gt; Kevin Whinnery: Provisioning
an environment is again kind of a journey.

3
00:00:09.790 --> 00:00:12.580
So we're gonna do that together and
we'll do it kind of manually so

4
00:00:12.580 --> 00:00:16.880
we can see the different pieces and
how they fit together.

5
00:00:16.880 --> 00:00:22.280
But at a high level you're first
gonna decide which AWS Region

6
00:00:22.280 --> 00:00:24.260
you're gonna run your code in and

7
00:00:24.260 --> 00:00:28.310
it's usually best to be geographically
close to where your users are and there's

8
00:00:28.310 --> 00:00:33.600
ways to run your application in multiple
regions which were not going to get into.

9
00:00:33.600 --> 00:00:37.780
Will select a region whether it's U.S.
East region or U.S.

10
00:00:37.780 --> 00:00:42.800
West to Oregon or whatever it doesn't
really matter, and then we will

11
00:00:42.800 --> 00:00:48.060
then create a user with
permissions to allow

12
00:00:48.060 --> 00:00:53.320
us to essentially create the Amazon EC2
environment that we need,

13
00:00:53.320 --> 00:00:57.550
and allow us to deploy new versions of
our application and things like that.

14
00:00:57.550 --> 00:01:01.970
So we will create an AWS user and

15
00:01:01.970 --> 00:01:06.800
that user will be assigned
credentials that we will use to

16
00:01:06.800 --> 00:01:12.090
configure a command line client
to access Amazon on our behalf,

17
00:01:12.090 --> 00:01:16.200
which is part of the exercise
that we'll be doing shortly.

18
00:01:17.960 --> 00:01:22.630
Next we're going to be a creating
an elastic bin stack environment.

19
00:01:22.630 --> 00:01:27.570
And environment is basically
a fully functional

20
00:01:27.570 --> 00:01:32.890
like execution environment for
your application.

21
00:01:32.890 --> 00:01:36.090
So typically you'll have multiple
environments you might have like

22
00:01:36.090 --> 00:01:40.910
development a staging in a production
environment, and those environments might

23
00:01:40.910 --> 00:01:46.030
be configured slightly differently.They
might use different sized EC2 instances.

24
00:01:46.030 --> 00:01:50.050
Use different sizes or
configurations of RDS.

25
00:01:51.820 --> 00:01:53.560
That sort of thing.

26
00:01:53.560 --> 00:01:57.220
So we'll create an environment in this
case we'll just create one environment

27
00:01:57.220 --> 00:01:58.590
to start with.

28
00:01:58.590 --> 00:02:02.070
And then that will be added
to a security group and

29
00:02:02.070 --> 00:02:07.530
a security group is a construct
within Amazon that defines

30
00:02:07.530 --> 00:02:13.050
like which resources within your Amazon
account can communicate with one another.

31
00:02:13.050 --> 00:02:18.120
So our RDS instance and
our elastic beanstalk instances

32
00:02:18.120 --> 00:02:23.080
like the EC2 instances managed their Will
be a part of the same security group which

33
00:02:23.080 --> 00:02:28.440
means that our instances can connect to
our RDS instance that will create but

34
00:02:28.440 --> 00:02:32.320
the outside world can't directly
connect to the to the RDS instance.

35
00:02:33.940 --> 00:02:38.510
So we'll create both an EV environment and
the RDS instance, add them to the same

36
00:02:38.510 --> 00:02:43.060
security group And then we have to
configure that security group to allow

37
00:02:43.060 --> 00:02:49.070
incoming connections to post press and
then we need to deploy our application and

38
00:02:49.070 --> 00:02:54.820
application version and
then potentially, we a profit.

39
00:02:54.820 --> 00:03:00.330
So, it's a long journey and there's
a lot of things that you can screw up.

40
00:03:00.330 --> 00:03:05.450
Which is why I've been super super nervous
about this component of the workshop,

41
00:03:05.450 --> 00:03:09.870
but I have done it three or
four times over the course of the week so

42
00:03:09.870 --> 00:03:14.690
I'm like 94% sure this is gonna work.

43
00:03:14.690 --> 00:03:15.910
So let's do this thing.

