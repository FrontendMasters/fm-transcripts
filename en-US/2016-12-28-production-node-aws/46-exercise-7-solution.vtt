WEBVTT

1
00:00:00.000 --> 00:00:04.353
[MUSIC]

2
00:00:04.353 --> 00:00:08.254
&gt;&gt; Kevin Whinnery: Before I went to break
I was kind of working a little bit on

3
00:00:08.254 --> 00:00:12.736
figuring out why my view.js theme
switcher that I had attempted

4
00:00:12.736 --> 00:00:16.280
to demo a few minutes ago wasn't working.

5
00:00:16.280 --> 00:00:18.500
And it was a silly mistake
as you might imagine.

6
00:00:19.570 --> 00:00:21.110
Here if we if we pull this up again,

7
00:00:22.350 --> 00:00:25.780
I have moved the location
of the radio buttons.

8
00:00:25.780 --> 00:00:33.500
And now when I click them, I switch
between a light and a dark CSS theme.

9
00:00:33.500 --> 00:00:38.650
And looking at the if we take a look at
the elements we can see that the class

10
00:00:38.650 --> 00:00:43.390
changes from light to dark
when I go back and forth.

11
00:00:43.390 --> 00:00:49.610
So the issue at play was I had added
the radio buttons here above the footer,

12
00:00:49.610 --> 00:00:55.030
but it actually wasn't a part of
the same element, the section element,

13
00:00:55.030 --> 00:00:59.300
that we attached our view.js component to.

14
00:00:59.300 --> 00:01:03.970
So the events that I was firing in
the model I was trying to bind to

15
00:01:03.970 --> 00:01:07.750
was not actually part of the component.

16
00:01:07.750 --> 00:01:14.140
And so by moving the inputs
inside the actual component,

17
00:01:14.140 --> 00:01:16.040
they were able to bind to the same model.

18
00:01:17.560 --> 00:01:23.180
So it's just the location of my
mark up in the DOM was misplaced.

19
00:01:23.180 --> 00:01:29.270
The rest of the code was working fine.
&gt;&gt; Audience: [INAUDIBLE]

20
00:01:29.270 --> 00:01:31.380
&gt;&gt; Kevin Whinnery: So that is the piece

21
00:01:31.380 --> 00:01:37.280
for the to do app for the theme switcher
using view.js that we had before.

22
00:01:38.810 --> 00:01:44.050
And the other bit on that we asked you
to take a look at going into the break

23
00:01:44.050 --> 00:01:49.800
was a socket IO and
trying to incorporate socket IO

24
00:01:49.800 --> 00:01:55.280
into the updating flow
of a of the To Do item.

25
00:01:57.860 --> 00:02:02.370
The challenge that I placed to you
guys going into the break, and

26
00:02:02.370 --> 00:02:05.860
I didn't see any poor requests
come in which is okay you're out

27
00:02:05.860 --> 00:02:10.560
having some Thai food, chowing down
a sandwich catching up, totally fine.

28
00:02:12.180 --> 00:02:18.870
But the challenge I post to you
guys was to using socket IO.

29
00:02:18.870 --> 00:02:23.760
Update the user, the view.JS based
user interface based on some

30
00:02:25.050 --> 00:02:27.580
activity that was going on the server.

31
00:02:27.580 --> 00:02:33.530
Whenever a new to do was added, pushing
event using socket IO up to the server.

32
00:02:33.530 --> 00:02:37.190
So let's go ahead and do that,
I didn't see the poor request come in.

33
00:02:37.190 --> 00:02:41.361
So to over launch to try to get this,
get this going, so

34
00:02:41.361 --> 00:02:47.770
we can take a look at that.
&gt;&gt; Kevin Whinnery: We reload here.

35
00:02:47.770 --> 00:02:49.550
We have a list of todos.

36
00:02:51.080 --> 00:02:52.800
Maybe knockout a couple of those there.

37
00:02:54.140 --> 00:02:55.010
There's our list.

38
00:02:56.740 --> 00:03:01.610
And we can still see that it is working
and persisting stuff to a database.

39
00:03:01.610 --> 00:03:06.510
But now what we would like to have happen
is when I add a to do list item over

40
00:03:06.510 --> 00:03:12.090
here and I just implement it for the add
I get another item showing up over here.

41
00:03:12.090 --> 00:03:15.780
Here we go, if I add that over here.

42
00:03:17.500 --> 00:03:21.840
No, we do have a little JS error so

43
00:03:21.840 --> 00:03:26.410
whoops, minor problem as
I was finishing this up.

44
00:03:27.890 --> 00:03:33.097
One moment please.
&gt;&gt; Kevin Whinnery: Just

45
00:03:33.097 --> 00:03:35.500
need to change that up right quick.

46
00:03:38.210 --> 00:03:42.070
Reload both of these and
with any luck that will be the end of it.

47
00:03:43.190 --> 00:03:47.910
So I get it to you list yup yup and

48
00:03:47.910 --> 00:03:52.180
then we see that added on
our other other tab as well.

49
00:03:52.180 --> 00:03:55.600
So the way that we implemented this was

50
00:03:55.600 --> 00:03:59.890
wiring up a socket server
with our REST API endpoint.

51
00:03:59.890 --> 00:04:03.240
And when that add operation is executed,

52
00:04:03.240 --> 00:04:08.030
emit a message backup to the client
with that todo that was added.

53
00:04:08.030 --> 00:04:11.320
So let's break down that
code here real quick.

54
00:04:11.320 --> 00:04:12.590
We'll start on the backend.

55
00:04:13.790 --> 00:04:19.590
Now here in the server, at the command
where we actually start up our server

56
00:04:19.590 --> 00:04:24.310
we add a little bit of logic
here to actually initialize

57
00:04:24.310 --> 00:04:29.840
a socket IO server and associate that
with the HTTP server for the application.

58
00:04:29.840 --> 00:04:35.120
So we create our HTTP server like before
and now we create an instance of socket IO

59
00:04:35.120 --> 00:04:40.940
that we can use to manage incoming
socket connections from our users.

60
00:04:40.940 --> 00:04:46.410
And then I pass that to a utility
module that I created for

61
00:04:46.410 --> 00:04:51.340
handling socket communication over here
which has a method called init, and

62
00:04:51.340 --> 00:04:55.760
then we pass to that a socket IO object.

63
00:04:55.760 --> 00:04:59.220
Now if we look at that socket object

64
00:05:02.220 --> 00:05:05.270
to find it's same level as webapp.js.

65
00:05:05.270 --> 00:05:10.460
That init function just passes the socket

66
00:05:10.460 --> 00:05:16.620
IO instance and assigns that to
a module scoped variable called IO.

67
00:05:16.620 --> 00:05:21.500
And then we export another
function called todo added which

68
00:05:21.500 --> 00:05:23.100
we intend to be called
from our controller.

69
00:05:24.360 --> 00:05:26.673
It's gonna be passed todo item and

70
00:05:26.673 --> 00:05:31.778
then it's gonna use that socket IO
instance to admit this event todo added to

71
00:05:31.778 --> 00:05:37.175
the other connected clients.
&gt;&gt; Kevin Whinnery: So that's the,

72
00:05:37.175 --> 00:05:42.575
I guess the other bit on the server
side to point out is we just create it,

73
00:05:42.575 --> 00:05:47.210
we required that module
here in our controller.

74
00:05:47.210 --> 00:05:52.610
And then in our create function,
if the todo is created successfully then

75
00:05:52.610 --> 00:05:55.840
recall that function and
omit that event in our socket IO server.

76
00:05:58.260 --> 00:06:03.270
Back in the in the view JS view,
right now this is all

77
00:06:03.270 --> 00:06:08.730
implemented within the constructor for
the view component.

78
00:06:08.730 --> 00:06:13.815
There's a few ways we could approach
this but I create a property that's not

79
00:06:13.815 --> 00:06:20.100
gonna be observable on the on
this view instance called socket.

80
00:06:20.100 --> 00:06:25.112
And I call that IO function,
which is added into the window

81
00:06:25.112 --> 00:06:30.740
global scope by including this
socket IO JavaScript file, which

82
00:06:30.740 --> 00:06:37.332
is served up by socket IO on the server.
&gt;&gt; Kevin Whinnery: And

83
00:06:37.332 --> 00:06:41.780
after I create that socket,
I add a listener for to do added.

84
00:06:41.780 --> 00:06:45.340
Because the scope of this does
change within this function,

85
00:06:45.340 --> 00:06:48.680
I just stashed it away in
a variable called self.

86
00:06:48.680 --> 00:06:53.600
And then when that todo added item is
fired, I'm going to check the list

87
00:06:53.600 --> 00:06:57.636
of todos that I already have to
see if I have that todo item.

88
00:06:57.636 --> 00:07:02.618
So I'll check the ID of all of
the ones that have been successfully

89
00:07:02.618 --> 00:07:06.109
created against the one
that just got added.

90
00:07:06.109 --> 00:07:11.877
And if I don't already have it in my
list of todo items, I go ahead and

91
00:07:11.877 --> 00:07:17.040
push that into that array,
which then will update the UI with

92
00:07:17.040 --> 00:07:22.089
the latest list of todo items.
&gt;&gt; Kevin Whinnery: Any

93
00:07:22.089 --> 00:07:26.271
questions on that
particular bit of code or

94
00:07:26.271 --> 00:07:30.345
socket IO stuff before we keep trucking?

95
00:07:30.345 --> 00:07:32.840
Yes?
&gt;&gt; Speaker 4: What is the of keyword?

96
00:07:32.840 --> 00:07:37.460
Is it basically serving the same purpose
there as a for each loop or how exactly

97
00:07:37.460 --> 00:07:42.330
are you doing that particular loop?
&gt;&gt; Kevin Whinnery: It's sort of

98
00:07:42.330 --> 00:07:45.732
a variation on the traditional for

99
00:07:45.732 --> 00:07:51.140
loop where you have an iterator
which is incremented.

100
00:07:52.600 --> 00:07:56.780
The primary reason I'm using this
here rather than like an array for

101
00:07:56.780 --> 00:08:00.920
each, where you pass in a function
with every element of the array

102
00:08:00.920 --> 00:08:05.930
is you can't break out of a for each loop.

103
00:08:05.930 --> 00:08:09.020
It's gonna be executed for
every member of the array.

104
00:08:09.020 --> 00:08:14.527
Whereas in a for of loop,
you can breakout early,

105
00:08:14.527 --> 00:08:17.420
which I needed to do here.

106
00:08:17.420 --> 00:08:19.380
So, yeah, so
I'm sort of tracking the state there.

107
00:08:19.380 --> 00:08:24.891
I assign the current todo item to that t
variable and then start to work with it in

108
00:08:24.891 --> 00:08:31.515
the for loop.
&gt;&gt; Kevin Whinnery: Other questions?

109
00:08:37.073 --> 00:08:38.750
&gt;&gt; Kevin Whinnery: All right, cool beans.

110
00:08:38.750 --> 00:08:40.970
Let's keep moving.

111
00:08:40.970 --> 00:08:44.700
If you have any other questions
as we go along that's great.

112
00:08:44.700 --> 00:08:48.187
I'll push up that branch of
the socket IO changes and

113
00:08:48.187 --> 00:08:51.920
after we’re sort of off to
the races our next exercise.

