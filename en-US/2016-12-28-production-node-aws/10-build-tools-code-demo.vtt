WEBVTT

1
00:00:00.000 --> 00:00:03.787
[MUSIC]

2
00:00:03.787 --> 00:00:08.137
&gt;&gt; Kevin Whinnery: So at this point, I'd
like to give you a quick demo of how you

3
00:00:08.137 --> 00:00:12.228
create scripts that run in
both of these environments.

4
00:00:12.228 --> 00:00:18.470
So I'll start off by doing
a run through of the tests for

5
00:00:18.470 --> 00:00:23.085
the application that we all ready have to

6
00:00:23.085 --> 00:00:27.713
demonstrate some built in npn scripts.

7
00:00:27.713 --> 00:00:35.059
So first, oops, I'm gonna pull
down all those tasty bug fixes.

8
00:00:39.987 --> 00:00:46.275
&gt;&gt; Kevin Whinnery: That you guys work so
hard on, and now, if I come back out here.

9
00:00:46.275 --> 00:00:50.903
Let's move this back
down to a single column,

10
00:00:50.903 --> 00:00:54.828
and see if we can blow it up a little bit.

11
00:00:54.828 --> 00:00:59.472
Wait, not that one, this one.

12
00:00:59.472 --> 00:01:05.589
All right, so the ones that we have in
our project right now are the npm start,

13
00:01:05.589 --> 00:01:09.090
which executes our server process.

14
00:01:09.090 --> 00:01:14.457
And we also have this guy,
npm test, which is another

15
00:01:14.457 --> 00:01:20.320
one of those conventional bits
that npm knows to execute.

16
00:01:20.320 --> 00:01:23.643
And in this case, we're setting
the current node environment to test,

17
00:01:23.643 --> 00:01:27.640
which is going to change our
applications configuration a little bit.

18
00:01:27.640 --> 00:01:33.612
Mostly, I think it just hits the test
database rather than the development one.

19
00:01:33.612 --> 00:01:39.368
It's gonna run a command called mocha,
which is a testing framework for Node.js.

20
00:01:39.368 --> 00:01:44.004
And it's gonna run all of
the tests in this test directory.

21
00:01:44.004 --> 00:01:49.536
Now if we go to the terminal here,
and execute mocha.

22
00:01:49.536 --> 00:01:53.894
We can see that the mocha command isn't
found like it is installed globally,

23
00:01:53.894 --> 00:01:55.580
it's not on the system path.

24
00:01:55.580 --> 00:02:02.029
But if I run an npm test, no, what's that?

25
00:02:02.029 --> 00:02:05.462
Server models db.

26
00:02:05.462 --> 00:02:09.559
So I have a problem with the tests.

27
00:02:09.559 --> 00:02:13.264
Clearly, I haven't run them enough lately,
gonna have to fix that.

28
00:02:13.264 --> 00:02:21.709
But what did happen is the mocha
command was being past this argument.

29
00:02:21.709 --> 00:02:27.183
So the npm scripts in addition to
whatever is on the system path normally,

30
00:02:27.183 --> 00:02:30.998
will also look another place for
binary commands.

31
00:02:30.998 --> 00:02:36.883
So if I look in the node modules
directory, there's this subdirectory

32
00:02:36.883 --> 00:02:42.180
called .bin and that contains all
of the potential command line

33
00:02:42.180 --> 00:02:47.103
functions that were installed
by any of my local packages.

34
00:02:47.103 --> 00:02:51.733
So here is that that mocha
command which will invoke

35
00:02:51.733 --> 00:02:55.834
the test harness which
I clearly have to fix.

36
00:02:55.834 --> 00:02:59.941
So a npm script is a way
that you can run a script

37
00:02:59.941 --> 00:03:04.070
using a locally installed node module.

38
00:03:04.070 --> 00:03:07.890
So that somebody who wants to run that
task doesn't have to install your

39
00:03:07.890 --> 00:03:11.400
command line utility globally,
which is kind of gross.

40
00:03:11.400 --> 00:03:16.206
All they have to do is clone your
look repository, run npm, whatever.

41
00:03:16.206 --> 00:03:22.096
And all of the command line utilities that
are necessary to execute the scripts will

42
00:03:22.096 --> 00:03:27.580
be automatically added to the path, but
not pollute the global system path.

43
00:03:28.600 --> 00:03:35.738
So that's the primary benefit
of using the npm scripts.

44
00:03:35.738 --> 00:03:40.530
So in addition to the these
scripts in the package.json.

45
00:03:40.530 --> 00:03:43.960
We have the ability to create grunt tasks.

46
00:03:43.960 --> 00:03:49.830
Now the the place where the sort
of conventional location for

47
00:03:49.830 --> 00:03:54.445
configuration of grunt
is in a grunt file.js.

48
00:03:54.445 --> 00:03:58.620
The root directory of your application.

49
00:03:58.620 --> 00:04:03.891
And within this directory,
when the grunt command is executed

50
00:04:03.891 --> 00:04:10.066
will load up different tasks that
are grunt task runner that can perform.

51
00:04:10.066 --> 00:04:15.874
So we have browserfy and sass targets
which we'll talk about tomorrow.

52
00:04:15.874 --> 00:04:20.538
But we also have a couple of
bits that we've all ready

53
00:04:20.538 --> 00:04:25.460
been using which is this watch and
nodemon command.

54
00:04:25.460 --> 00:04:31.411
So watch is a third party module
that's available for grunt.

55
00:04:31.411 --> 00:04:35.985
And you can basically specify
different targets within this

56
00:04:35.985 --> 00:04:38.593
that will watch this set of files.

57
00:04:38.593 --> 00:04:43.779
So in this case,
if any of our browser JavaScript changes,

58
00:04:43.779 --> 00:04:47.020
we'll execute the browserfy task.

59
00:04:47.020 --> 00:04:51.374
And in this case,
if any of our sass files changes,

60
00:04:51.374 --> 00:04:54.324
we will execute the sass dev task.

61
00:04:54.324 --> 00:04:59.061
We also have the nodemon task, and
nodemon, even if you install it globally

62
00:04:59.061 --> 00:05:03.813
standalone, it's a really useful
utility for monitoring a node process.

63
00:05:03.813 --> 00:05:08.296
And if JavaScript changed within
the directory that no process was run,

64
00:05:08.296 --> 00:05:11.467
you can automatically
restart that node process.

65
00:05:11.467 --> 00:05:16.026
So it's a very handy development tool
that will I'm sure be in your belt,

66
00:05:16.026 --> 00:05:17.434
if it isn't already.

67
00:05:17.434 --> 00:05:19.480
But there's along a grunt plugin for it.

68
00:05:19.480 --> 00:05:23.832
So in this case, we pass in the script
that we would like to execute.

69
00:05:23.832 --> 00:05:28.606
And then by default nodemon will monitor
the entire current directory for

70
00:05:28.606 --> 00:05:31.000
changes to JavaScript files.

71
00:05:31.000 --> 00:05:34.580
But in this case, we told it to
ignore the node modules folder, so

72
00:05:34.580 --> 00:05:38.310
we don't care about any
changes to the dependencies.

73
00:05:38.310 --> 00:05:43.879
We ignore the public folder which is where
grunt will put our compiled static assets.

74
00:05:43.879 --> 00:05:47.170
And then we also ignore any
browser specific JavaScript,

75
00:05:47.170 --> 00:05:50.540
because that's not going to
impact the server code at all.

76
00:05:52.480 --> 00:05:54.482
Other than down here at the bottom,

77
00:05:54.482 --> 00:05:58.575
we have this concurrent task which
is again another third party plugin.

78
00:05:58.575 --> 00:06:04.176
Which will run these two tasks,
nodemon and watch concurrently.

79
00:06:04.176 --> 00:06:08.143
So that we can both recompile
our static assets and

80
00:06:08.143 --> 00:06:14.198
watch our server side code for changes
at the same time when we run this task.

81
00:06:14.198 --> 00:06:18.641
Cuz otherwise unless
a task returns something,

82
00:06:18.641 --> 00:06:22.115
grunt won't move on to the next task.

83
00:06:22.115 --> 00:06:27.190
So in this case, if we want both of
these tasks to execute concurrently,

84
00:06:27.190 --> 00:06:31.700
we have to use this special module
make them run at the same time.

85
00:06:31.700 --> 00:06:35.782
And then down here is where we actually
configure grunt to load in those

86
00:06:35.782 --> 00:06:36.969
third party tasks.

87
00:06:36.969 --> 00:06:40.015
So we have grunt sass and browserify.

88
00:06:40.015 --> 00:06:46.634
We also have watch, and nodemon, and
concurrent, and then we also have shell

89
00:06:46.634 --> 00:06:52.569
which just executes shell commands
which is a fairly simple bit to do.

90
00:06:52.569 --> 00:06:55.640
And then the default
command is what happens

91
00:06:55.640 --> 00:06:58.628
when you just run grunt with no arguments.

92
00:06:58.628 --> 00:07:02.625
And our case what we wanna do is first,
we wanna compile like this

93
00:07:02.625 --> 00:07:07.230
is essentially the way that we provide
to run our development web server.

94
00:07:07.230 --> 00:07:08.494
So we're gonna do first,

95
00:07:08.494 --> 00:07:11.774
is we're gonna compile a development
version of our style sheets.

96
00:07:11.774 --> 00:07:14.435
We're gonna run our
JavaScript through browserfy.

97
00:07:14.435 --> 00:07:19.126
And then we're going to start up both
our watch and our nodemon tasks.

98
00:07:19.126 --> 00:07:24.617
So that we can continually recompile and
rerun our node app as we run.

99
00:07:24.617 --> 00:07:29.048
Then we also have some custom tasks,
which are just collections of other tasks.

100
00:07:29.048 --> 00:07:33.292
So this collects static task, which you
had to run eventually to get your local

101
00:07:33.292 --> 00:07:35.239
development environment to work.

102
00:07:36.350 --> 00:07:40.290
Runs an init static task
which will look at a second.

103
00:07:40.290 --> 00:07:43.424
And then it runs the sass task,
but it's for

104
00:07:43.424 --> 00:07:48.860
dist rather than div which will actually
minified the output in CSS as well.

105
00:07:48.860 --> 00:07:52.268
And then we have the browserfy
task there as well.

106
00:07:52.268 --> 00:07:57.599
And this init_static task, if you're
paying very, very close attention.

107
00:07:57.599 --> 00:08:02.554
You might notice has not been
defined anywhere in our grunt file.

108
00:08:02.554 --> 00:08:04.735
That's because it's a custom
task that we wrote.

109
00:08:04.735 --> 00:08:07.705
So what we can do is
tell grunt to look for

110
00:08:07.705 --> 00:08:11.496
more tasks in another
directory that we specify.

111
00:08:11.496 --> 00:08:14.396
So in this case,
we're gonna say that our custom

112
00:08:14.396 --> 00:08:18.806
tasks are gonna be located potentially
for, in our bin/ask directory.

113
00:08:19.880 --> 00:08:25.800
So if we expand that, we can see that
we have this custom grunt task here.

114
00:08:27.230 --> 00:08:31.689
The exports for a function here,
it got a little sloppy.

115
00:08:31.689 --> 00:08:37.985
I forgot my const up at the top there for
my module requires, apologies there.

116
00:08:37.985 --> 00:08:41.851
But we have a custom task here called, so

117
00:08:41.851 --> 00:08:46.073
we call it register task and init_static.

118
00:08:46.073 --> 00:08:52.250
We include a basic description of that
task in case anybody runs grunt help.

119
00:08:52.250 --> 00:08:56.439
And then we have the actual
function which executes,

120
00:08:56.439 --> 00:09:01.852
which is going to destroy the public
directory if it already exists.

121
00:09:01.852 --> 00:09:05.576
Recreate it,
copy over the static like this,

122
00:09:05.576 --> 00:09:10.639
unmodified static assets from
our from our source directory.

123
00:09:10.639 --> 00:09:14.736
And then copy those over
as a part of that task.

124
00:09:14.736 --> 00:09:19.659
So you can do any kind of
functionality this way.

125
00:09:19.659 --> 00:09:23.650
For instance, in our workshop,
we're gonna be using

126
00:09:23.650 --> 00:09:28.445
the Elastic Beanstalk command
line utility directly to deploy.

127
00:09:28.445 --> 00:09:33.305
But for our application,
we have grunt task that manage lots of

128
00:09:33.305 --> 00:09:38.819
different parts of the deploy process for
us using the AWS SDK for node.

129
00:09:38.819 --> 00:09:42.443
And sometimes the Elastic Beanstalk
command line utility directly.

130
00:09:42.443 --> 00:09:46.731
So that's one of the things
I like about grunt is just

131
00:09:46.731 --> 00:09:50.445
a general purpose task runner for
node code.

132
00:09:50.445 --> 00:09:55.285
So we use it for
all kinds of stuff as a result there.

133
00:09:55.285 --> 00:10:00.096
Any questions on npm scripts or
grunt tasks?

134
00:10:09.249 --> 00:10:10.068
&gt;&gt; Kevin Whinnery: Yeah,
question, go ahed.

135
00:10:10.068 --> 00:10:15.185
&gt;&gt; Speaker 2: Question,
when you do the grunt log npm tasks.

136
00:10:15.185 --> 00:10:17.941
&gt;&gt; Kevin Whinnery: Yeah.

137
00:10:17.941 --> 00:10:23.709
&gt;&gt; Speaker 2: Does it automatically
include all of the grunt sass,

138
00:10:23.709 --> 00:10:31.412
grunt browersify things when you do
a grunts without any prior unders?

139
00:10:31.412 --> 00:10:35.912
&gt;&gt; Kevin Whinnery: So when you do
a grunt without any parameters.

140
00:10:35.912 --> 00:10:40.840
What's gonna happen is grunt's gonna
look for a task called default.

141
00:10:40.840 --> 00:10:45.705
And in this case, I specified the default
task to be these other tasks,

142
00:10:45.705 --> 00:10:50.017
the saas task, the browserify task and
the concurrent tasks.

143
00:10:50.017 --> 00:10:54.914
And the way they grunt acquires those
abilities is through these lines

144
00:10:54.914 --> 00:10:55.917
of code here.

145
00:10:55.917 --> 00:11:00.097
We register these additional
task types from npm,

146
00:11:00.097 --> 00:11:06.037
like we've installed a grunt sass
plugin and a grunt browserfy plugin.

147
00:11:06.037 --> 00:11:09.044
And in the init config which is this,

148
00:11:09.044 --> 00:11:13.897
which is usually the first part
of a grunt file that you see.

149
00:11:13.897 --> 00:11:17.889
This is where we can figure
all of those plugins.

150
00:11:17.889 --> 00:11:22.433
So here's configuration for
browserify, for sass,

151
00:11:22.433 --> 00:11:25.900
for watch, nodemon and the rest of them.

152
00:11:25.900 --> 00:11:30.850
So after you type grunt,
look for that default task,

153
00:11:30.850 --> 00:11:34.263
then it executes this list of tasks.

154
00:11:34.263 --> 00:11:38.400
Which it knows how to do, because we
loaded those tasks from npm here, and

155
00:11:38.400 --> 00:11:40.955
configured how they
should operate up here.

156
00:11:45.574 --> 00:11:47.340
&gt;&gt; Kevin Whinnery: Yes?
&gt;&gt; Speaker 3: Few people are asking for

157
00:11:47.340 --> 00:11:48.137
your slides.

158
00:11:48.137 --> 00:11:53.446
&gt;&gt; Kevin Whinnery: Yeah,
sure thing I'll just like create a PDF,

159
00:11:53.446 --> 00:11:58.100
and maybe check into that I GitHub repro.

160
00:11:58.100 --> 00:12:03.322
So we'll do that, this is weekend and
after we break down here.

161
00:12:03.322 --> 00:12:10.306
Other questions before we move on,
on the grunt or npm stuff?

162
00:12:10.306 --> 00:12:14.601
&gt;&gt; Speaker 4: Is there a good online
resource for finding the different

163
00:12:14.601 --> 00:12:20.340
available grunt modules that are npm
modules that we might want to include?

164
00:12:20.340 --> 00:12:24.064
&gt;&gt; Kevin Whinnery: The grunt site does
have a number of them that you might find

165
00:12:24.064 --> 00:12:25.060
interesting.

166
00:12:25.060 --> 00:12:30.190
Also the npm package registry,

167
00:12:30.190 --> 00:12:34.750
so if you go to npmjs.org and

168
00:12:34.750 --> 00:12:38.552
just search for grunt.

169
00:12:38.552 --> 00:12:42.494
You can kind of search for
the kind of stuff you're looking for,

170
00:12:42.494 --> 00:12:45.130
that's not gonna probably lend too much.

171
00:12:45.130 --> 00:12:49.429
But let's say, I wanna find grunt webpack.

172
00:12:49.429 --> 00:12:53.398
This is what you would
use if you wanted to do

173
00:12:53.398 --> 00:12:58.154
webpack stuff from the context
of your grunt file.

174
00:12:58.154 --> 00:13:01.817
So usually, if you search for
grunt whatever.

175
00:13:01.817 --> 00:13:05.024
That's one of the reasons why I still
use it if I search for grunt whatever.

176
00:13:05.024 --> 00:13:11.734
There's like a 90% chance I find something
that kind of does what I need to do.

177
00:13:11.734 --> 00:13:14.451
&gt;&gt; Speaker 4: Grunt website
has a plugin search that will,

178
00:13:14.451 --> 00:13:16.964
well I think it just
goes over npm as well.

179
00:13:16.964 --> 00:13:18.977
&gt;&gt; Kevin Whinnery: Yeah.

180
00:13:18.977 --> 00:13:20.585
&gt;&gt; Speaker 4: And
you don't have to type grunt.

181
00:13:20.585 --> 00:13:21.337
&gt;&gt; Kevin Whinnery: Exactly.

182
00:13:21.337 --> 00:13:24.779
&gt;&gt; [LAUGH]
&gt;&gt; Kevin Whinnery: Even better like that.

183
00:13:24.779 --> 00:13:29.758
&gt;&gt; Speaker 5: Some people are saying that
they did sent you a PR to fix the tests.

184
00:13:29.758 --> 00:13:33.190
&gt;&gt; Kevin Whinnery: Nice,
nice appreciate that.

185
00:13:33.190 --> 00:13:37.153
I'll go take a look after we get working.

186
00:13:37.153 --> 00:13:38.680
Bet I'll be able to merge
it down right away.

