WEBVTT

1
00:00:00.000 --> 00:00:04.396
[MUSIC]

2
00:00:04.396 --> 00:00:07.852
&gt;&gt; Kevin Whinnery: Now, what I'd like you
to do is we'll take at least a half hour

3
00:00:07.852 --> 00:00:11.360
of this time cuz this is gonna
be a little bit trickier.

4
00:00:11.360 --> 00:00:16.660
Both of these issues that we had before,
which is

5
00:00:16.660 --> 00:00:22.350
updating the client side code in our
application in a couple key ways.

6
00:00:22.350 --> 00:00:27.652
The GitHub issues for
these are tagged as exercise six.

7
00:00:27.652 --> 00:00:34.750
And the two that I will ask of
you are a couple media tasks.

8
00:00:34.750 --> 00:00:40.080
The first is to actually start persisting
the completed status of a to do item

9
00:00:40.080 --> 00:00:44.330
using the REST API that we've
set up on the back end.

10
00:00:44.330 --> 00:00:48.760
Now if you remember,
we yesterday updated our application

11
00:00:48.760 --> 00:00:54.420
to accept a completed attribute
in addition to the title.

12
00:00:54.420 --> 00:00:57.720
So our API and our backend is
fully set up to support this.

13
00:00:57.720 --> 00:01:01.800
But our front end still doesn't
do anything about this.

14
00:01:01.800 --> 00:01:06.936
So our task would be to update
the view JS application to

15
00:01:06.936 --> 00:01:12.417
persist to that completed
attribute as well as the title.

16
00:01:12.417 --> 00:01:14.490
So that would be issue number one.

17
00:01:14.490 --> 00:01:19.790
And then issue number two, if you get
through that is to use some data binding

18
00:01:19.790 --> 00:01:28.020
features in view to add a feature to the
application which it doesn't have today.

19
00:01:28.020 --> 00:01:33.910
The concept I had was adding a light and
a dark theme to the Todo list.

20
00:01:33.910 --> 00:01:38.420
So what I would like to do is
maybe underneath the Todo list,

21
00:01:38.420 --> 00:01:42.530
add a UI element which is essentially
a chooser of some kind, which will let

22
00:01:42.530 --> 00:01:49.750
the user switch between a light theme and
a dark theme for the CSS on the Todo list.

23
00:01:49.750 --> 00:01:51.860
So the a way that I
imagine this will work,

24
00:01:51.860 --> 00:01:56.760
although feel free to riff if you
would like, is that there will be some

25
00:01:56.760 --> 00:02:02.430
component, some HTML links or
radio buttons, or whatever.

26
00:02:02.430 --> 00:02:05.195
Underneath the Todo list,
you click one of them and

27
00:02:05.195 --> 00:02:10.180
it'll either toggle between a light and
a dark by adding a CSS

28
00:02:10.180 --> 00:02:15.470
class to the container element for
the entire Todo list application.

29
00:02:15.470 --> 00:02:16.640
And you also have to

30
00:02:18.930 --> 00:02:22.950
write the CSS to power a different
theme for the application.

31
00:02:22.950 --> 00:02:27.294
So whether it's a different
background color, different fonts, or

32
00:02:27.294 --> 00:02:31.577
whatever, adding an alternate theme
to the Todo list application.

33
00:02:31.577 --> 00:02:36.489
For bonus points, if you want to,
after the user selects a theme,

34
00:02:36.489 --> 00:02:40.670
save that in local storage
as a user preference.

35
00:02:40.670 --> 00:02:43.530
That I think would also be
a pretty nifty feature.

36
00:02:43.530 --> 00:02:48.590
So you can peel off whichever of
those you feel is more interesting,

37
00:02:49.770 --> 00:02:53.610
or do both of them,
which would be even better.

38
00:02:53.610 --> 00:02:57.730
And as I said, I think we'll take at
least a half hour to work through those.

39
00:02:57.730 --> 00:03:03.272
As for many of you, this will be the first
time that you're really digging in to view

40
00:03:03.272 --> 00:03:08.513
in any great detail, so take some time and
see if you can knock out one of those.

41
00:03:08.513 --> 00:03:14.720
If you only choose one, the REST API one
might be the more instructive of the two.

42
00:03:14.720 --> 00:03:19.406
But if you get through that pretty easily,
the light dark theme will introduce

43
00:03:19.406 --> 00:03:24.167
you to a few more features of view that
you wouldn't be exposed to, otherwise.

44
00:03:24.167 --> 00:03:25.180
&gt;&gt; Speaker 2: A couple of questions.

45
00:03:25.180 --> 00:03:26.375
&gt;&gt; Kevin Whinnery: Yeah.

46
00:03:26.375 --> 00:03:28.875
&gt;&gt; Speaker 2: What's this in the scope of

47
00:03:28.875 --> 00:03:30.800
the view object?
&gt;&gt; Kevin Whinnery: This

48
00:03:30.800 --> 00:03:34.210
is going to be the view
component object itself.

49
00:03:35.480 --> 00:03:43.375
So the actual instance of the view
component, that's what this is.

50
00:03:43.375 --> 00:03:49.678
And also incidentally,
it's why when in our handler code so

51
00:03:49.678 --> 00:03:56.321
if we look at the view here,
&gt;&gt; Kevin Whinnery: We

52
00:03:56.321 --> 00:04:00.538
don't usually, for the methods,
use the arrow syntax for

53
00:04:00.538 --> 00:04:05.510
the function here because we want view
to be able to set this in the scope

54
00:04:05.510 --> 00:04:09.920
of the function,
to refer to the actual component instance.

55
00:04:11.880 --> 00:04:17.698
So yeah, this refers to the actual
view component instance.

56
00:04:17.698 --> 00:04:20.311
The other question was is
viewed the primary framework.

57
00:04:20.311 --> 00:04:25.267
We use a Tooleo my team does use
view in our little chunk but

58
00:04:25.267 --> 00:04:31.579
it's not the only framework and
you said like in the developer console.

59
00:04:32.940 --> 00:04:37.560
They are now just like star and
introduced a lot of reaction stuff.

60
00:04:37.560 --> 00:04:40.493
There's also a lot of hand
written JavaScript in there.

61
00:04:40.493 --> 00:04:45.409
But the two primary
ones in use that I know

62
00:04:45.409 --> 00:04:49.901
of are view and and react this point.

63
00:04:49.901 --> 00:04:53.920
We're the only ones using view though,
probably, because of me.

64
00:04:53.920 --> 00:04:54.496
But yeah,

65
00:04:54.496 --> 00:04:58.410
a lot more of Tooleo is now being written
in react as well on the front end.

