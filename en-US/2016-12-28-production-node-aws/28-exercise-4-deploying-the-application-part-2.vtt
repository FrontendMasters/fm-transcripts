WEBVTT

1
00:00:00.017 --> 00:00:03.937
[MUSIC]

2
00:00:03.937 --> 00:00:08.913
&gt;&gt; Kevin Whinnery: So, it's possible to go
to create environments through the console

3
00:00:08.913 --> 00:00:12.429
directly, but
what we did during our exercise,

4
00:00:12.429 --> 00:00:18.117
was actually create it from the command
line using the elastic be in stock CLI.

5
00:00:18.117 --> 00:00:23.883
So we cloned our application,
we entered that application and

6
00:00:23.883 --> 00:00:30.050
then we started off,
&gt;&gt; Kevin Whinnery: With the eb init.

7
00:00:31.330 --> 00:00:34.120
And eb init is what took us through

8
00:00:36.990 --> 00:00:40.770
choosing an AWS region to
run our application in.

9
00:00:40.770 --> 00:00:45.591
It's where we created an environment or
excuse me,

10
00:00:45.591 --> 00:00:50.411
it's where we sort of
configure our credentials for

11
00:00:50.411 --> 00:00:55.228
our AWS user that we used to
use the Elastic Beanstalk

12
00:00:55.228 --> 00:01:00.724
command line interface.
&gt;&gt; Kevin Whinnery: And

13
00:01:00.724 --> 00:01:04.780
then, after we ran eb init.
&gt;&gt; Speaker 2: When you're going through

14
00:01:04.780 --> 00:01:07.210
that and ask for the AWS access id,

15
00:01:07.210 --> 00:01:09.940
where do you get that from
&gt;&gt; Kevin Whinnery: When you downloaded

16
00:01:09.940 --> 00:01:13.900
your credentials before in the console
when you created the user.

17
00:01:13.900 --> 00:01:19.107
That download will have the cs
eb init with an access key and

18
00:01:19.107 --> 00:01:21.717
a secret value.
&gt;&gt; Speaker 2: Where does that get stored

19
00:01:21.717 --> 00:01:24.385
if you had a user already created.
&gt;&gt; Kevin Whinnery: If you had a user

20
00:01:24.385 --> 00:01:29.431
already created but you didn't
download the credentials you need

21
00:01:29.431 --> 00:01:34.748
to regenerate credentials for
the user and whatever credentials they

22
00:01:34.748 --> 00:01:39.367
had previously would no longer reality.
&gt;&gt; Speaker 2: So- And

23
00:01:39.367 --> 00:01:43.810
you can do that from the user.
&gt;&gt; Kevin Whinnery: Yes, you can.

24
00:01:43.810 --> 00:01:50.360
So for individual users here's,
I'll do a different one.

25
00:01:50.360 --> 00:01:56.540
So here's the on the user that a user
I created for an earlier test.

26
00:01:56.540 --> 00:02:00.310
So here is their credentials.

27
00:02:00.310 --> 00:02:07.110
You can see the access key again but
the secret, you'll never see again.

28
00:02:07.110 --> 00:02:12.150
But what you can do is you can
create a new access key and

29
00:02:12.150 --> 00:02:16.760
you can download those credentials or
you can click on this link and

30
00:02:16.760 --> 00:02:18.750
you can actually show them in the browser.

31
00:02:18.750 --> 00:02:24.634
So you have a chance to create
a new set of keys as well.

32
00:02:24.634 --> 00:02:25.581
Is that kinda
&gt;&gt; Speaker 2: So,

33
00:02:25.581 --> 00:02:30.324
you do create an access skin,
then you download the credentials there.

34
00:02:30.324 --> 00:02:34.366
And then,
that file is the one that you put in

35
00:02:34.366 --> 00:02:37.130
when you do an eb init.
&gt;&gt; Kevin Whinnery: You don't put it

36
00:02:37.130 --> 00:02:40.200
in the file, but you use the access key

37
00:02:40.200 --> 00:02:43.070
in the secret strings from
that file that you downloaded.

38
00:02:44.160 --> 00:02:47.550
So here, I'll just download this and
I'll show you what I mean.

39
00:02:47.550 --> 00:02:49.220
So I just created these access keys.

40
00:02:50.590 --> 00:02:53.266
And then, that's gonna be downloaded in

41
00:02:53.266 --> 00:02:59.863
a CSV
&gt;&gt; Kevin Whinnery: So

42
00:02:59.863 --> 00:03:03.838
if I open that CSV with a text editor,

43
00:03:03.838 --> 00:03:09.501
it's got my username,
my access key and my secret.

44
00:03:09.501 --> 00:03:12.595
And those are the values that
I will plug in during the eb

45
00:03:12.595 --> 00:03:16.032
init.
&gt;&gt; Kevin Whinnery: That kind of

46
00:03:16.032 --> 00:03:16.685
makes sense?

47
00:03:26.196 --> 00:03:28.908
&gt;&gt; Kevin Whinnery: So the eb init is where

48
00:03:28.908 --> 00:03:33.129
we plug in our AWS credentials and

49
00:03:33.129 --> 00:03:38.270
we sort of initialize our application.

50
00:03:39.350 --> 00:03:44.790
And then eb create, is where we
create an actual environment with

51
00:03:44.790 --> 00:03:49.390
EC2 instances in it,
that we can actually use to run our code.

52
00:03:54.480 --> 00:04:00.420
And that took a very long time but once
it was created, we ended up with this.

53
00:04:01.600 --> 00:04:08.550
When we went to ask the Beanstalk, now all
of the sudden, we have this environment.

54
00:04:08.550 --> 00:04:12.760
And the way we did it before, it was under
configured so it wasn't okay right away.

55
00:04:12.760 --> 00:04:16.070
But we have this environment
which is actually running EC2

56
00:04:16.070 --> 00:04:17.270
instances which have our code.

57
00:04:18.380 --> 00:04:24.940
So on the configuration side,
what we needed to do is go into our

58
00:04:24.940 --> 00:04:31.419
instance configuration and
check out what EC2 security group.

59
00:04:32.480 --> 00:04:37.530
The EC2 instance is managed by
Elastic Beanstalk or a member of.

60
00:04:38.780 --> 00:04:44.270
And that is a value that we had to use
a few other places, if you remember.

61
00:04:45.570 --> 00:04:51.000
The first was when we created a new RDS
instance, which is what we did next.

62
00:04:51.000 --> 00:04:55.847
So [INAUDIBLE] RDS
&gt;&gt; Kevin Whinnery: And

63
00:04:55.847 --> 00:05:00.862
we created an instance,
&gt;&gt; Kevin Whinnery: for

64
00:05:00.862 --> 00:05:06.863
PostgreSQL, and
during the configuration process we

65
00:05:06.863 --> 00:05:12.342
added that RDS instance to
the same security group

66
00:05:12.342 --> 00:05:18.614
that are Elastic Beanstalk EC2
instances are a part of.

67
00:05:18.614 --> 00:05:22.196
So that essentially enables them
to communicate with one another.

68
00:05:22.196 --> 00:05:26.358
Once we created that RDS instance,

69
00:05:26.358 --> 00:05:30.389
put it in the same security group.

70
00:05:31.390 --> 00:05:34.805
The other step we needed
to do was to go into

71
00:05:34.805 --> 00:05:39.727
the EC2 configuration,
&gt;&gt; Kevin Whinnery: Go down to

72
00:05:39.727 --> 00:05:46.089
Security Groups,
&gt;&gt; Kevin Whinnery: And then select,

73
00:05:46.089 --> 00:05:51.518
I believe it was,
&gt;&gt; Kevin Whinnery: Keep my mouse

74
00:05:51.518 --> 00:05:56.779
over that.
&gt;&gt; Kevin Whinnery: We selected

75
00:05:56.779 --> 00:06:02.857
the same security group in
this administrative interface.

76
00:06:02.857 --> 00:06:09.157
And for under this inbound tab,
we needed to add another configuration for

77
00:06:09.157 --> 00:06:12.960
Postgres on port five, four, three, two.

78
00:06:12.960 --> 00:06:18.319
That would allow inbound
connections to four members

79
00:06:18.319 --> 00:06:24.424
of this security group.
&gt;&gt; Speaker 2: So

80
00:06:24.424 --> 00:06:27.310
the typical port for Postgres?
&gt;&gt; Kevin Whinnery: What's that?

81
00:06:27.310 --> 00:06:28.530
&gt;&gt; Speaker 2: Is that is a typical port

82
00:06:28.530 --> 00:06:29.890
that's used for?
&gt;&gt; Kevin Whinnery: Yeah.

83
00:06:29.890 --> 00:06:30.660
Five, four, three,

84
00:06:30.660 --> 00:06:32.410
two, is the sort of default.

85
00:06:32.410 --> 00:06:33.180
&gt;&gt; Speaker 2: Standard.
&gt;&gt; Kevin Whinnery: Yeah.

