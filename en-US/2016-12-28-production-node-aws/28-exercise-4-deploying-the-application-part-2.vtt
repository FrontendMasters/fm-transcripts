WEBVTT

1
00:00:00.017 --> 00:00:03.937
[MUSIC]

2
00:00:03.937 --> 00:00:08.913
&gt;&gt; Kevin Whinnery: So, it's possible to go
to create environments through the console

3
00:00:08.913 --> 00:00:12.429
directly, but
what we did during our exercise,

4
00:00:12.429 --> 00:00:18.117
was actually create it from the command
line using the elastic be in stock CLI.

5
00:00:18.117 --> 00:00:23.883
So we cloned our application,
we entered that application and

6
00:00:23.883 --> 00:00:30.050
then we started off,
&gt;&gt; Kevin Whinnery: With the eb init.

7
00:00:31.330 --> 00:00:34.120
And eb init is what took us through

8
00:00:36.990 --> 00:00:40.770
choosing an AWS region to
run our application in.

9
00:00:40.770 --> 00:00:45.591
It's where we created an environment or
excuse me,

10
00:00:45.591 --> 00:00:50.411
it's where we sort of
configure our credentials for

11
00:00:50.411 --> 00:00:57.655
our AWS user that we used to use the
Elastic Beanstalk command line interface.

12
00:01:00.497 --> 00:01:02.540
&gt;&gt; Kevin Whinnery: And
then, after we ran eb init.

13
00:01:04.090 --> 00:01:07.210
&gt;&gt; Speaker 2: When you're going through
that and ask for the AWS access id,

14
00:01:07.210 --> 00:01:09.940
where do you get that from
&gt;&gt; Kevin Whinnery: When you downloaded

15
00:01:09.940 --> 00:01:13.900
your credentials before in the console
when you created the user.

16
00:01:13.900 --> 00:01:20.606
That download will have the cs eb init
with an access key and a secret value.

17
00:01:20.606 --> 00:01:23.215
&gt;&gt; Speaker 2: Where does that get stored
if you had a user already created.

18
00:01:23.215 --> 00:01:27.539
&gt;&gt; Kevin Whinnery: If you had a user
already created but you didn't download

19
00:01:27.539 --> 00:01:32.675
the credentials you need to regenerate
credentials for the user and

20
00:01:32.675 --> 00:01:37.925
whatever credentials they had
previously would no longer reality.

21
00:01:37.925 --> 00:01:41.280
&gt;&gt; Speaker 2: So- And
you can do that from the user.

22
00:01:41.280 --> 00:01:43.810
&gt;&gt; Kevin Whinnery: Yes, you can.

23
00:01:43.810 --> 00:01:50.360
So for individual users here's,
I'll do a different one.

24
00:01:50.360 --> 00:01:56.540
So here's the on the user that a user
I created for an earlier test.

25
00:01:56.540 --> 00:02:00.310
So here is their credentials.

26
00:02:00.310 --> 00:02:07.110
You can see the access key again but
the secret, you'll never see again.

27
00:02:07.110 --> 00:02:12.150
But what you can do is you can
create a new access key and

28
00:02:12.150 --> 00:02:16.760
you can download those credentials or
you can click on this link and

29
00:02:16.760 --> 00:02:18.750
you can actually show them in the browser.

30
00:02:18.750 --> 00:02:24.634
So you have a chance to create
a new set of keys as well.

31
00:02:24.634 --> 00:02:25.581
Is that kinda
&gt;&gt; Speaker 2: So,

32
00:02:25.581 --> 00:02:30.324
you do create an access skin,
then you download the credentials there.

33
00:02:30.324 --> 00:02:36.460
And then, that file is the one that
you put in when you do an eb init.

34
00:02:36.460 --> 00:02:38.980
&gt;&gt; Kevin Whinnery: You don't
put it in the file, but you use

35
00:02:38.980 --> 00:02:43.070
the access key in the secret strings
from that file that you downloaded.

36
00:02:44.160 --> 00:02:47.550
So here, I'll just download this and
I'll show you what I mean.

37
00:02:47.550 --> 00:02:49.220
So I just created these access keys.

38
00:02:50.590 --> 00:02:53.266
And then, that's gonna be downloaded in

39
00:02:53.266 --> 00:02:59.863
a CSV
&gt;&gt; Kevin Whinnery: So

40
00:02:59.863 --> 00:03:03.838
if I open that CSV with a text editor,

41
00:03:03.838 --> 00:03:09.501
it's got my username,
my access key and my secret.

42
00:03:09.501 --> 00:03:13.004
And those are the values that I
will plug in during the eb init.

43
00:03:15.490 --> 00:03:16.685
&gt;&gt; Kevin Whinnery: That
kind of makes sense?

44
00:03:26.196 --> 00:03:33.129
&gt;&gt; Kevin Whinnery: So the eb init is
where we plug in our AWS credentials and

45
00:03:33.129 --> 00:03:38.270
we sort of initialize our application.

46
00:03:39.350 --> 00:03:44.790
And then eb create, is where we
create an actual environment with

47
00:03:44.790 --> 00:03:49.390
EC2 instances in it,
that we can actually use to run our code.

48
00:03:54.480 --> 00:04:00.420
And that took a very long time but once
it was created, we ended up with this.

49
00:04:01.600 --> 00:04:08.550
When we went to ask the Beanstalk, now all
of the sudden, we have this environment.

50
00:04:08.550 --> 00:04:12.760
And the way we did it before, it was under
configured so it wasn't okay right away.

51
00:04:12.760 --> 00:04:16.070
But we have this environment
which is actually running EC2

52
00:04:16.070 --> 00:04:17.270
instances which have our code.

53
00:04:18.380 --> 00:04:24.940
So on the configuration side,
what we needed to do is go into our

54
00:04:24.940 --> 00:04:31.419
instance configuration and
check out what EC2 security group.

55
00:04:32.480 --> 00:04:37.530
The EC2 instance is managed by
Elastic Beanstalk or a member of.

56
00:04:38.780 --> 00:04:44.270
And that is a value that we had to use
a few other places, if you remember.

57
00:04:45.570 --> 00:04:51.000
The first was when we created a new RDS
instance, which is what we did next.

58
00:04:51.000 --> 00:04:55.847
So [INAUDIBLE] RDS
&gt;&gt; Kevin Whinnery: And

59
00:04:55.847 --> 00:05:00.862
we created an instance,
&gt;&gt; Kevin Whinnery: for

60
00:05:00.862 --> 00:05:06.863
PostgreSQL, and
during the configuration process we

61
00:05:06.863 --> 00:05:12.342
added that RDS instance to
the same security group

62
00:05:12.342 --> 00:05:18.614
that are Elastic Beanstalk EC2
instances are a part of.

63
00:05:18.614 --> 00:05:22.196
So that essentially enables them
to communicate with one another.

64
00:05:22.196 --> 00:05:26.358
Once we created that RDS instance,

65
00:05:26.358 --> 00:05:30.389
put it in the same security group.

66
00:05:31.390 --> 00:05:34.805
The other step we needed
to do was to go into

67
00:05:34.805 --> 00:05:39.727
the EC2 configuration,
&gt;&gt; Kevin Whinnery: Go down to

68
00:05:39.727 --> 00:05:46.089
Security Groups,
&gt;&gt; Kevin Whinnery: And then select,

69
00:05:46.089 --> 00:05:51.070
I believe it was,
&gt;&gt; Kevin Whinnery: Keep

70
00:05:51.070 --> 00:05:52.162
my mouse over that.

71
00:05:55.588 --> 00:05:59.874
&gt;&gt; Kevin Whinnery: We selected
the same security group in this

72
00:05:59.874 --> 00:06:02.857
administrative interface.

73
00:06:02.857 --> 00:06:09.157
And for under this inbound tab,
we needed to add another configuration for

74
00:06:09.157 --> 00:06:12.960
Postgres on port five, four, three, two.

75
00:06:12.960 --> 00:06:20.826
That would allow inbound connections
to four members of this security group.

76
00:06:24.305 --> 00:06:26.034
&gt;&gt; Speaker 2: So
the typical port for Postgres?

77
00:06:26.034 --> 00:06:27.310
&gt;&gt; Kevin Whinnery: What's that?

78
00:06:27.310 --> 00:06:29.360
&gt;&gt; Speaker 2: Is that is
a typical port that's used for?

79
00:06:29.360 --> 00:06:29.890
&gt;&gt; Kevin Whinnery: Yeah.

80
00:06:29.890 --> 00:06:32.410
Five, four, three, two,
is the sort of default.

81
00:06:32.410 --> 00:06:33.060
&gt;&gt; Speaker 2: Standard.

82
00:06:33.060 --> 00:06:33.560
&gt;&gt; Kevin Whinnery: Yeah.

