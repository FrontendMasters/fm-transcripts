WEBVTT

1
00:00:00.032 --> 00:00:04.009
[MUSIC]

2
00:00:04.009 --> 00:00:09.250
&gt;&gt; Speaker 1: And then, once that
security group MumboJumbo was configured,

3
00:00:10.900 --> 00:00:14.960
then at that point, we pretty much had
everything we needed to actually deploy

4
00:00:14.960 --> 00:00:20.280
the application, so we had to complete
the configuration of our software.

5
00:00:22.200 --> 00:00:26.900
So if we go back to our actual
Elastic Beanstalk application and

6
00:00:26.900 --> 00:00:31.950
configuration, we changed
our software configuration.

7
00:00:31.950 --> 00:00:36.519
We changed the version of Node that we
were running on our instances to 622.

8
00:00:38.400 --> 00:00:42.640
We created a virtual directory for
our static assets.

9
00:00:42.640 --> 00:00:46.750
So the NGINX proxy server
on each of our instances

10
00:00:46.750 --> 00:00:50.240
will serve static assets
rather than Node doing it.

11
00:00:50.240 --> 00:00:55.770
The express static server is
much slower than NGINX would be.

12
00:00:55.770 --> 00:00:59.790
So we can figure that directory, so
engine X will serve up our JavaScript and

13
00:00:59.790 --> 00:01:01.200
CSS, and images and what have you.

14
00:01:01.200 --> 00:01:05.010
And then,
we created three environment properties.

15
00:01:05.010 --> 00:01:08.460
We set the NODE_ ENV to production.

16
00:01:08.460 --> 00:01:14.610
We set the NPM_CONFIG_PRODUCTION
value to true,

17
00:01:14.610 --> 00:01:21.600
so that when Elastic Beanstalk does
an NPM install on our application

18
00:01:21.600 --> 00:01:24.630
it only installs the dependencies
that are necessary for production.

19
00:01:24.630 --> 00:01:29.468
And then we also created a Postgres

20
00:01:29.468 --> 00:01:34.400
connection URL,
which we are here storing as

21
00:01:34.400 --> 00:01:38.500
a as a system environment variable
that we created through the interface.

22
00:01:40.540 --> 00:01:44.480
But an alternate way that you
could do that is to store

23
00:01:44.480 --> 00:01:49.090
this connection string somewhere else
outside of the administrative interface.

24
00:01:49.090 --> 00:01:53.520
You could store it in S3 bucket or
something of that nature.

25
00:01:53.520 --> 00:01:57.340
Because this database can't accept
connections from the public Internet,

26
00:01:57.340 --> 00:02:01.940
it's like not the end of
the world necessarily.

27
00:02:01.940 --> 00:02:06.110
But the proper way to do this with any
secret value like this would be to

28
00:02:06.110 --> 00:02:08.310
have it outside of
the administrative interface.

29
00:02:10.290 --> 00:02:17.980
For our purposes, it's a decent solution.

30
00:02:17.980 --> 00:02:23.584
So after that was configured,
&gt;&gt; Speaker 1: Bruce asked

31
00:02:23.584 --> 00:02:28.906
does anyone know what
the needed environment

32
00:02:28.906 --> 00:02:34.120
properties are for
the to do MVC config screen?

33
00:02:34.120 --> 00:02:36.870
That would be these three.

34
00:02:36.870 --> 00:02:41.170
The environment variables that you need
in production are the Node_ENV set to

35
00:02:41.170 --> 00:02:47.220
production, the NPM_CONFIG_PRODUCTION
flag set to true,

36
00:02:47.220 --> 00:02:50.190
and then a RDS_CONNECTION_URL,

37
00:02:50.190 --> 00:02:55.296
which is the database connection string
for the actual post res database.

38
00:02:55.296 --> 00:02:59.834
And that URL string,
the URL string for RDS,

39
00:02:59.834 --> 00:03:06.820
comes from the configuration for
the RDS instance that we created.

40
00:03:06.820 --> 00:03:15.335
So if we go to our instances over here,
&gt;&gt; Speaker 1: Here's

41
00:03:15.335 --> 00:03:16.103
the one that we created.

42
00:03:18.840 --> 00:03:23.785
&gt;&gt; Speaker 1: If we inspect its
properties, we can see it's what's

43
00:03:23.785 --> 00:03:28.084
labeled as the a Writer Endpoint
over here and

44
00:03:28.084 --> 00:03:35.110
that is essentially the internal
address of that particular database.

45
00:03:35.110 --> 00:03:41.720
And when we created the database, we
created a user which we called AWS user.

46
00:03:41.720 --> 00:03:46.828
So we included those
credentials in the form

47
00:03:46.828 --> 00:03:52.076
that Postgres://username:password@

48
00:03:52.076 --> 00:03:58.427
this URL :5432 a this URL port 5432/ToDos,

49
00:03:58.427 --> 00:04:05.618
which is the name of the database
that we need it to connect to.

50
00:04:05.618 --> 00:04:13.030
So that is the full genesis of
that RDS connection string.

51
00:04:17.656 --> 00:04:20.913
&gt;&gt; Speaker 2: So if you create an instance
like that and you're in development and

52
00:04:20.913 --> 00:04:24.599
you just let it sit for a while,
does it just go away for a month or

53
00:04:24.599 --> 00:04:27.952
something of inactivity or
does it stay there forever?

54
00:04:27.952 --> 00:04:28.950
&gt;&gt; Speaker 1: It'll stay there forever.

55
00:04:28.950 --> 00:04:34.244
So the default configuration is that you

56
00:04:34.244 --> 00:04:39.694
can only ever have one instance running.

57
00:04:39.694 --> 00:04:43.443
So we can take a look at that.

58
00:04:46.205 --> 00:04:50.990
&gt;&gt; Speaker 1: So
that is actually a scaling configuration.

59
00:04:50.990 --> 00:04:53.210
So if we go in here for

60
00:04:53.210 --> 00:04:59.444
Scaling,
&gt;&gt; Speaker 1: We

61
00:04:59.444 --> 00:05:02.644
have the minimum instance count of one and

62
00:05:02.644 --> 00:05:07.044
then we also have a maximum
of four configured right now.

63
00:05:16.766 --> 00:05:19.317
&gt;&gt; Speaker 1: Yeah I know,
I'm too excited.

64
00:05:19.317 --> 00:05:25.025
I can't sit down with this
much raw AWS action going on.

65
00:05:30.492 --> 00:05:35.230
&gt;&gt; Speaker 1: So yeah,
lots of yak shaving at the beginning.

66
00:05:37.040 --> 00:05:42.100
When you get past that,
&gt;&gt; Speaker 1: As I said,

67
00:05:42.100 --> 00:05:46.595
we're really in the situation
of building your application,

68
00:05:46.595 --> 00:05:51.480
zipping it up, and
deploying it with eb deploy.

69
00:05:51.480 --> 00:05:53.070
There's different options you can do.

70
00:05:53.070 --> 00:05:56.340
You can deploy applications
to different environments.

71
00:05:56.340 --> 00:06:01.330
There's lots of flexibility that
you have with the platform.

72
00:06:01.330 --> 00:06:06.380
But in terms of the workflow, it
improves significantly from here on out.

73
00:06:18.575 --> 00:06:21.951
&gt;&gt; Speaker 1: So was that helpful
to go through one more time?

74
00:06:21.951 --> 00:06:22.480
Okay.

75
00:06:34.575 --> 00:06:36.670
&gt;&gt; Speaker 1: So yeah, there we have it.

76
00:06:36.670 --> 00:06:42.920
I think I have successfully made sure that
like 50% of you will run screaming for

77
00:06:42.920 --> 00:06:47.710
tomorrow with dropping this
AWS bomb on you today.

78
00:06:47.710 --> 00:06:53.460
But tomorrow, now that we have
this bad boy up in production,

79
00:06:53.460 --> 00:06:56.940
we're gonna be focusing mostly on
more of the application stack.

80
00:06:56.940 --> 00:07:02.520
We'll be looking at
the front end tool chain.

81
00:07:02.520 --> 00:07:05.170
We'll be learning a little
bit about Vue JS and

82
00:07:05.170 --> 00:07:08.320
how we implement a rich
front end with view.

83
00:07:08.320 --> 00:07:11.070
We'll be adding some features.

84
00:07:12.070 --> 00:07:16.700
We might have successfully got our
back end application working to

85
00:07:16.700 --> 00:07:18.060
set that completed flag, but

86
00:07:18.060 --> 00:07:21.370
we still have to do some work in
the user interface to make that happen.

87
00:07:21.370 --> 00:07:24.930
So we'll be doing some
work with Vue JS tomorrow.

88
00:07:24.930 --> 00:07:29.430
Well to be talking a little bit about
monitoring production environment.

89
00:07:29.430 --> 00:07:36.750
We'll add some modest real time features,
a socket IO, to our to do application,

90
00:07:36.750 --> 00:07:41.320
so we can see how that plays out in
our production environment as well.

91
00:07:42.880 --> 00:07:48.300
Nothing too crazy, but we will be
adding a little bit of real time spice

92
00:07:48.300 --> 00:07:52.625
and we'll be looking at how
to implement web analytics.

93
00:07:52.625 --> 00:07:57.480
Because we're using Node and
Browserify, we have kind of a nice way

94
00:07:57.480 --> 00:08:02.330
to implement Google Analytics on
our in our application, both for

95
00:08:02.330 --> 00:08:07.040
custom event tracking and for
basic stuff like page views.

96
00:08:07.040 --> 00:08:12.978
So we'll implement universal
analytics in the front end as well.

97
00:08:12.978 --> 00:08:17.270
So yeah, I think this is
definitely the hardest part.

98
00:08:17.270 --> 00:08:22.860
So if you wanna keep banging on it,
we definitely still have some time and

99
00:08:22.860 --> 00:08:25.270
I'm happy to go through any of
those steps again for anybody.

100
00:08:27.690 --> 00:08:32.830
Question if there is
going to be a merge for

101
00:08:32.830 --> 00:08:37.428
the exercise three solution and
there definitely will be.

102
00:08:37.428 --> 00:08:42.200
I'll push out my local changes for
the database

103
00:08:42.200 --> 00:08:47.040
piece in the migration.

104
00:08:47.040 --> 00:08:50.480
We have a question if we can work along
with our local environment tomorrow.

105
00:08:50.480 --> 00:08:53.520
You absolutely can.

106
00:08:53.520 --> 00:08:55.880
You don't have to use
the production environment,

107
00:08:55.880 --> 00:08:57.122
if you if you don't want to tomorrow.

108
00:08:57.122 --> 00:08:58.744
You can just use your local
development environment.

109
00:09:09.375 --> 00:09:13.882
&gt;&gt; Speaker 2: All right, with that, I
think I'm gonna un-mic, but I will stay on

110
00:09:13.882 --> 00:09:18.563
the chat and stay in the room for
anybody that wants to keep on trucking.

111
00:09:18.563 --> 00:09:23.081
If you have questions on the deployment
stuff or any of the Node stuff that we

112
00:09:23.081 --> 00:09:27.240
covered today, I'd be happy to answer
any questions that you have or

113
00:09:27.240 --> 00:09:30.899
talk about specific scenarios
that you're interested in.

114
00:09:32.185 --> 00:09:33.210
I know that was a lot.

115
00:09:33.210 --> 00:09:34.455
I hope it was helpful.

116
00:09:34.455 --> 00:09:38.085
Once you kind of get through all this
stuff, as we'll actually see tomorrow,

117
00:09:39.385 --> 00:09:43.995
this environment can actually take
a decent beating, much more than you would

118
00:09:43.995 --> 00:09:48.605
think out of compute
resources of this size.

119
00:09:48.605 --> 00:09:52.625
So will beat up on it a little bit
tomorrow and see how that works as well.

