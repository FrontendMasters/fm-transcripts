WEBVTT

1
00:00:00.000 --> 00:00:03.758
[MUSIC]

2
00:00:03.758 --> 00:00:08.712
&gt;&gt; Kevin Whinnery: Now, we should be
able to start using the model with

3
00:00:08.712 --> 00:00:10.678
this new property.

4
00:00:10.678 --> 00:00:16.628
So, the first thing I might try
is to run my test, npm test,

5
00:00:16.628 --> 00:00:22.110
and it does actually
successfully create a Todo item.

6
00:00:22.110 --> 00:00:27.988
But I might sort of modify that to also,
&gt;&gt; Kevin Whinnery: Add

7
00:00:27.988 --> 00:00:29.308
in a completed flag.

8
00:00:29.308 --> 00:00:35.320
So, in addition to creating

9
00:00:35.320 --> 00:00:39.577
a todo with the title

10
00:00:39.577 --> 00:00:44.470
text.
&gt;&gt; Kevin Whinnery: I think I

11
00:00:44.470 --> 00:00:49.902
actually want completed,
there all right, right.

12
00:00:49.902 --> 00:00:54.777
I'm gonna create a todo
with both the title and

13
00:00:54.777 --> 00:01:00.904
the completed and
add another assertion there that says,

14
00:01:00.904 --> 00:01:05.043
todo.completed, [INAUDIBLE] false.

15
00:01:05.043 --> 00:01:09.175
And there's a bunch of ways to do that
assertion but that one works okay.

16
00:01:09.175 --> 00:01:14.488
But this is one way for
me to just quick verify that the table

17
00:01:14.488 --> 00:01:20.573
has been sort of updated and
the model is kinda doing what I expect.

18
00:01:20.573 --> 00:01:23.780
These are fairly shallow tests again but
it's the first step.

19
00:01:23.780 --> 00:01:28.580
Now, what I need to do is update

20
00:01:28.580 --> 00:01:33.560
my REST API endpoints to actually update
these properties on the models as well.

21
00:01:33.560 --> 00:01:37.820
So for that,
I'm gonna open up my todo routes.

22
00:01:37.820 --> 00:01:42.320
And for both the update and the create
operation, I'm gonna have to accept

23
00:01:42.320 --> 00:01:47.810
another parameter for
the completed flag essentially.

24
00:01:47.810 --> 00:01:53.883
So, for update, we'll do this first.
&gt;&gt; Kevin Whinnery: I'm

25
00:01:53.883 --> 00:01:58.649
gonna look for a request body.

26
00:01:58.649 --> 00:02:02.086
Excuse me I'm actually gonna
do that after my 404 check.

27
00:02:03.099 --> 00:02:03.633
&gt;&gt; Kevin Whinnery: So,

28
00:02:03.633 --> 00:02:09.104
I'm gonna set the completed
property of my model

29
00:02:09.104 --> 00:02:14.050
to be equal to the result
of a Boolean check.

30
00:02:14.050 --> 00:02:20.279
So, if a request.body.completed
=== 'true',

31
00:02:20.279 --> 00:02:24.917
that's gonna set completed to be true for

32
00:02:24.917 --> 00:02:32.730
all other values of that component
that's gonna evaluate false.

33
00:02:32.730 --> 00:02:37.190
There's other ways to do this, this is a
fairly quick and dirty implementation but

34
00:02:37.190 --> 00:02:41.400
it's one way to make that piece happen.

35
00:02:41.400 --> 00:02:47.370
And then, in my create,
I'm gonna do something similar.

36
00:02:47.370 --> 00:02:50.400
So, in this case, I'm

37
00:02:52.190 --> 00:02:56.280
gonna set that completed property,
again based

38
00:02:58.250 --> 00:03:03.330
on the result of that Boolean comparison,
whether or not it's true.

39
00:03:03.330 --> 00:03:07.360
And then, it should be updated
in my database accordingly.

40
00:03:07.360 --> 00:03:11.910
So, those are the two REST API endpoints,
I need to update.

41
00:03:13.630 --> 00:03:16.100
Now, I'm gonna run my application and

42
00:03:16.100 --> 00:03:20.010
make sure that my REST API is
doing what I feel it should do.

43
00:03:20.010 --> 00:03:24.535
So, I'll start up the dev server.
&gt;&gt; Kevin Whinnery: And

44
00:03:24.535 --> 00:03:29.040
now, you can verify this using cURL or
whatever HTTP client you want.

45
00:03:29.040 --> 00:03:33.530
Like I said I'm kinda a fan of Postman so,
I'm gonna do it that way.

46
00:03:33.530 --> 00:03:37.450
So, if I start off by
sending a get to my input,

47
00:03:37.450 --> 00:03:41.730
I can see that I have all of my
todos in the database but for

48
00:03:41.730 --> 00:03:46.190
most of them the completed
attribute is set to null.

49
00:03:46.190 --> 00:03:49.412
So, let's create a new one
with that attribute in place.

50
00:03:49.412 --> 00:03:54.559
So, in addition to the body,
title excuse me,

51
00:03:54.559 --> 00:03:58.936
I'm gonna pass in a completed string and

52
00:03:58.936 --> 00:04:02.557
I'll initially set it to false.

53
00:04:02.557 --> 00:04:08.626
And I created that value in the database
so, completed is set to false.

54
00:04:08.626 --> 00:04:13.666
I could create another one,
&gt;&gt; Kevin Whinnery: Set to true.

55
00:04:15.195 --> 00:04:17.066
&gt;&gt; Kevin Whinnery: Send that in and then,

56
00:04:17.066 --> 00:04:23.770
again, if it's anything but the string
true, it's going to default to false.

57
00:04:25.300 --> 00:04:30.550
So now,
if I list those items in the database,

58
00:04:30.550 --> 00:04:36.410
the most recently created ones
are there with their proper values.

59
00:04:38.120 --> 00:04:45.060
And I can test the update
by using the put.

60
00:04:47.330 --> 00:04:53.030
Put is the operation that I'm
using to update the models.

61
00:04:53.030 --> 00:04:57.618
In this case, the title is going to be,
whatever I want that to be.

62
00:04:59.533 --> 00:05:03.069
&gt;&gt; Kevin Whinnery: And completed is going

63
00:05:03.069 --> 00:05:07.540
to be true, I can send that.

64
00:05:07.540 --> 00:05:11.831
And once again, I can see ID11 has
been updated but that had one already.

65
00:05:11.831 --> 00:05:16.423
So let's do maybe ID number two.

66
00:05:23.816 --> 00:05:25.900
&gt;&gt; Kevin Whinnery: And hit Send, and then,

67
00:05:25.900 --> 00:05:32.029
that's been updated as well.
&gt;&gt; Kevin Whinnery: All right,

68
00:05:32.029 --> 00:05:36.640
so, once again,
the steps were creating a migration,

69
00:05:36.640 --> 00:05:41.055
handling, adding and
removing the column whether or

70
00:05:41.055 --> 00:05:45.670
not we're migrating the database up or
down.

71
00:05:45.670 --> 00:05:50.755
After we did that,
we updated our actual Todo model,

72
00:05:50.755 --> 00:05:56.370
to have the property that
we added to the database.

73
00:05:56.370 --> 00:06:01.427
We updated our test and then,
we updated our express controller

74
00:06:01.427 --> 00:06:06.014
logic to take advantage of
that new property which wasn't

75
00:06:06.014 --> 00:06:10.639
there before.
&gt;&gt; Kevin Whinnery: Cool,

76
00:06:10.639 --> 00:06:12.930
any questions on any of that code?

77
00:06:12.930 --> 00:06:17.550
There were a number of steps
there that you had to discover.

78
00:06:17.550 --> 00:06:19.840
So, not surprised that
a good chunk of people.

79
00:06:21.710 --> 00:06:25.173
Yeah, there was definitely a lot to
grok there if you haven't done it

80
00:06:25.173 --> 00:06:30.277
before.
&gt;&gt; Kevin Whinnery: Anybody

81
00:06:30.277 --> 00:06:32.771
in the chat maybe we'll
give them a chance to

82
00:06:41.939 --> 00:06:43.363
&gt;&gt; Kevin Whinnery: Okay, if you have any

83
00:06:43.363 --> 00:06:48.440
other questions on the SQLite side of
things, I'd be happy to answer them.

84
00:06:48.440 --> 00:06:51.380
SQLite is a fairly full-featured ORM.

85
00:06:51.380 --> 00:06:57.120
It can do complex relationships and

86
00:06:57.120 --> 00:07:01.950
can use database specific features
like JSON fields and Postgres.

87
00:07:01.950 --> 00:07:06.090
So, if you're interested in digging
deeper, it's definitely gonna be your best

88
00:07:06.090 --> 00:07:10.942
bet for an ORM if you're not
gonna go with a driver directly.

