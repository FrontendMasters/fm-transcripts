WEBVTT

1
00:00:00.000 --> 00:00:03.843
[MUSIC]

2
00:00:03.843 --> 00:00:07.819
&gt;&gt; Kevin Whinnery: Today, we're gonna look
a little bit at starting off with kind of

3
00:00:07.819 --> 00:00:11.300
a deeper dive on the front
end part of our application.

4
00:00:11.300 --> 00:00:16.980
So we sort of hand waved at the primary
tools in the front end tool chain

5
00:00:16.980 --> 00:00:17.760
a little bit.

6
00:00:17.760 --> 00:00:21.790
But I wanted to dive in a little bit
further and kind of explain some of

7
00:00:21.790 --> 00:00:24.089
the things that are going on there, and
some of the tools we're bringing to bear.

8
00:00:25.200 --> 00:00:27.312
Did you have a question mark or-
&gt;&gt; Speaker 2: Yeah,

9
00:00:27.312 --> 00:00:33.370
fill [INAUDIBLE] to see an example of
how to properly stores credentials

10
00:00:33.370 --> 00:00:37.870
in S3 like we suggested yesterday.
&gt;&gt; Kevin Whinnery: Yeah, yeah, definitely.

11
00:00:37.870 --> 00:00:42.596
I don't have that in the materials, but

12
00:00:42.596 --> 00:00:49.136
maybe over lunch,
I can whip something up to show that.

13
00:00:49.136 --> 00:00:55.063
It's really just a matter of creating
an S3 Bucket, uploading a credential

14
00:00:55.063 --> 00:01:00.470
file there, and then accessing that
S3 Bucket from your instances.

15
00:01:00.470 --> 00:01:06.090
But that's essentially what it is,
and there are different

16
00:01:06.090 --> 00:01:11.650
ways to accomplish that, but
having an S3 bucket with restricted access

17
00:01:11.650 --> 00:01:15.270
such that only members of a certain,
kind of like we do with our [INAUDIBLE]

18
00:01:15.270 --> 00:01:20.570
such that only members of a certain
group can have access to that bucket.

19
00:01:20.570 --> 00:01:24.392
So in theory,
you can you can configure it such that

20
00:01:24.392 --> 00:01:29.250
an administrator creates credentials,
creates the connection strings.

21
00:01:29.250 --> 00:01:32.481
That administrator uploads
those values to an S3 bucket.

22
00:01:32.481 --> 00:01:36.975
And only the instances running in
production have access to actually read

23
00:01:36.975 --> 00:01:38.068
that S3 bucket.

24
00:01:38.068 --> 00:01:41.740
So me as the developer,
I never know what those values are, and

25
00:01:41.740 --> 00:01:45.691
when I deploy my application I read
in those values from S3 because I

26
00:01:45.691 --> 00:01:49.040
only have access to that
bucket in production.

27
00:01:49.040 --> 00:01:53.273
And that's that's kind of what we do
with our production environment and

28
00:01:53.273 --> 00:01:54.100
our ops team.

29
00:01:54.100 --> 00:01:57.614
They provision the credentials, and they
give our production instances access to

30
00:01:57.614 --> 00:02:00.340
that bucket, and then we read
in those credentials from there.

31
00:02:01.470 --> 00:02:05.812
So at a high level, that's how it works.

32
00:02:05.812 --> 00:02:09.954
But yeah, I'll see if I can
do a specific example, but

33
00:02:09.954 --> 00:02:13.118
that's essentially what it would it be.

34
00:02:13.118 --> 00:02:18.037
Provisioning an S3 Bucket, and
giving permissions to the Node

35
00:02:18.037 --> 00:02:22.236
app to read from that bucket,
but only in production.

36
00:02:22.236 --> 00:02:27.120
So again I think what we're
gonna lead off with today is

37
00:02:27.120 --> 00:02:32.124
driving a little bit more onto
the front end tool chain.

38
00:02:32.124 --> 00:02:37.659
We'll start off with a little look at
BrowserFI and Sask, kind of the two

39
00:02:37.659 --> 00:02:43.397
primary tools we're using for
JavaScript and CSS code pre-processing.

40
00:02:43.397 --> 00:02:46.304
We'll dive into a few those features,

41
00:02:46.304 --> 00:02:52.290
do a few little tweaks to our TodoMVC++
application with those tools.

42
00:02:52.290 --> 00:02:54.952
And then we'll spend a good
amount of time this morning.

43
00:02:54.952 --> 00:02:58.880
We might extend the workshop
time a little bit,

44
00:02:58.880 --> 00:03:01.370
since it'll be a new framework for
most of you.

45
00:03:01.370 --> 00:03:03.372
I'm talking about Vue.js.

46
00:03:03.372 --> 00:03:07.670
Maybe it's Voo, maybe it's View,
I don't know, I always said View.

47
00:03:07.670 --> 00:03:11.350
I thought it was just
a clever way of saying view.

48
00:03:11.350 --> 00:03:15.420
But we'll be extending Vue.js with

49
00:03:15.420 --> 00:03:20.230
a few more features that we've been
lacking in the todo application,

50
00:03:20.230 --> 00:03:24.780
like actually persisting the state
of a todo item to the database.

51
00:03:24.780 --> 00:03:29.660
And also playing a little bit with some of
the capabilities Vue has on the Vue model.

52
00:03:30.800 --> 00:03:32.491
And hopefully getting a little
bit more familiar there.

53
00:03:32.491 --> 00:03:36.790
We'll also do a kind of an extended live
code walk-through of some of the key

54
00:03:36.790 --> 00:03:40.836
features of the framework just to give
people a taste of of how it works.

55
00:03:40.836 --> 00:03:48.200
After that we'll dive into adding some
real time features to our application.

56
00:03:48.200 --> 00:03:51.740
Again, we'll do a little bit of
a code walkthrough on how Socket.IO

57
00:03:51.740 --> 00:03:53.040
works at a high level, and

58
00:03:53.040 --> 00:03:58.620
then we'll add a specific realtime
feature into the TodoMVC applications.

59
00:03:58.620 --> 00:04:03.565
So we can see how we can maybe
update that to do list in

60
00:04:03.565 --> 00:04:08.115
real time as folks are adding
more items to the list.

61
00:04:08.115 --> 00:04:09.165
We'll take a little break.

62
00:04:09.165 --> 00:04:13.585
We may or may not start Socket.io or
finish Socket.io before break,

63
00:04:13.585 --> 00:04:15.605
we'll kind of play that by year.

64
00:04:15.605 --> 00:04:17.005
And then this afternoon,

65
00:04:17.005 --> 00:04:21.929
we'll talk about a couple of tools that
we use in our production applications.

66
00:04:22.950 --> 00:04:27.879
For load testing, I will take a quick
look at a tool called Locust which will

67
00:04:27.879 --> 00:04:32.516
help you do some load testing on
your on your web applications.

68
00:04:32.516 --> 00:04:37.430
And then we'll have you in the exercise
actually integrate a tool that we

69
00:04:37.430 --> 00:04:40.240
found really useful called rollbar,

70
00:04:40.240 --> 00:04:45.260
which is a service which tracks exceptions
that are raised by your application, and

71
00:04:45.260 --> 00:04:49.870
allows you to send out notifications
with that information.

72
00:04:49.870 --> 00:04:55.660
So we'll actually integrate that into
our TodoMVC application as well.

73
00:04:55.660 --> 00:04:59.340
And then we'll wrap up with
some web analytics basics.

74
00:04:59.340 --> 00:05:02.710
Google Analytics is a tool
we use all the time, and

75
00:05:02.710 --> 00:05:08.200
I think it's sometimes poorly understood
by developers, or maybe developers

76
00:05:08.200 --> 00:05:12.530
feel like there's nothing that you can
glean that's useful from this tool.

77
00:05:12.530 --> 00:05:15.780
So we'll talk a little bit about

78
00:05:15.780 --> 00:05:19.030
some of the information that
you can get from the tool.

79
00:05:20.700 --> 00:05:24.270
I'll try to equip you with a couple
skills within the Google Analytics UI

80
00:05:24.270 --> 00:05:28.640
that you can use to track effectiveness
of your web applications.

81
00:05:28.640 --> 00:05:31.400
And then we'll look at the technical
implementation side, and

82
00:05:31.400 --> 00:05:34.670
add a couple analytics tracking
features to our to do application.

83
00:05:36.400 --> 00:05:39.720
And then we'll wrap up with some Q and A.

84
00:05:39.720 --> 00:05:43.280
And if there are specific topics
that we want to dive deeper on,

85
00:05:43.280 --> 00:05:44.330
maybe we can look at that.

86
00:05:46.640 --> 00:05:51.590
Yeah, maybe we can look at
the S3 Bucket bit there.

87
00:05:51.590 --> 00:05:53.500
Maybe do some live coding there.

88
00:05:55.170 --> 00:05:58.740
But yeah, that's kinda what
we're gonna do here on day two.

89
00:05:58.740 --> 00:06:00.650
And it's gonna be a lot of code.

90
00:06:00.650 --> 00:06:03.720
And I hope you enjoy
doing it as much as I do.

