WEBVTT

1
00:00:00.000 --> 00:00:04.151
[MUSIC]

2
00:00:04.151 --> 00:00:09.888
&gt;&gt; Kevin Whinnery: The exercise that
we are just working on was to integrate

3
00:00:09.888 --> 00:00:16.370
Rollbar into our error handling
process for our application.

4
00:00:16.370 --> 00:00:18.450
Now, I did sort of a quick and
dirty solution.

5
00:00:18.450 --> 00:00:23.091
So I can show you what happens,
but Rollbar does provide

6
00:00:23.091 --> 00:00:28.143
a Node.js module that you can
include in your application.

7
00:00:28.143 --> 00:00:30.561
So, you can NPN install a Rollbar.

8
00:00:30.561 --> 00:00:34.915
And if you're doing
an application based on Express,

9
00:00:34.915 --> 00:00:40.217
they have a connect to middleware
that you can plugin after the rest

10
00:00:40.217 --> 00:00:45.520
of your routes have been defined and
it will handle the integration

11
00:00:45.520 --> 00:00:50.443
of handling or it'll pass off all
the data that I can glean from

12
00:00:50.443 --> 00:00:55.570
the request off to Rollbar
whenever an exception is thrown.

13
00:00:55.570 --> 00:01:00.846
So I have my error handler here and
my disposable account ID which

14
00:01:00.846 --> 00:01:05.830
I'll terminate shortly, but
I also have introduced a route

15
00:01:05.830 --> 00:01:10.539
in the application which I
intend to throw an exception.

16
00:01:10.539 --> 00:01:18.229
So when I open up my browser, hit Error.

17
00:01:18.229 --> 00:01:24.750
In development, Express will actually show
me the stack trace here in the browser.

18
00:01:25.750 --> 00:01:30.360
And in production mode, it won't do that,
but I've generated an error.

19
00:01:30.360 --> 00:01:33.404
I got a stack trace and I need to
know I need to know what's going on.

20
00:01:33.404 --> 00:01:38.057
So I'm gonna head over to Rollbar and
look at my dashboard and

21
00:01:38.057 --> 00:01:43.451
I've just signed up for this account,
so I have a lot of to-do items.

22
00:01:43.451 --> 00:01:46.096
I can invite more people to my team.

23
00:01:46.096 --> 00:01:50.040
It's setup deployed tracking,
which is actually super useful.

24
00:01:50.040 --> 00:01:51.260
When you do a deploy,

25
00:01:51.260 --> 00:01:57.330
you can possibly correlate errors
to a particular deployment.

26
00:01:57.330 --> 00:01:59.235
There's lots of different
stuff you can do.

27
00:01:59.235 --> 00:02:00.717
But on the dashboard,

28
00:02:00.717 --> 00:02:06.570
I can see what errors have occurred from
my application over the last 24 hours.

29
00:02:06.570 --> 00:02:10.245
So I can see, I sent like the Hello World
message during the onboarding experience

30
00:02:10.245 --> 00:02:12.278
and now I'm starting to
get an actual error.

31
00:02:12.278 --> 00:02:18.701
So if I click on that,
I can see the status of that issue.

32
00:02:18.701 --> 00:02:23.874
It's actually possible to have your
team resolve issues through Rollbar.

33
00:02:23.874 --> 00:02:25.906
We don't actually use Rollbar for that.

34
00:02:25.906 --> 00:02:30.433
We use PagerDuty to actually
track down who is responsible for

35
00:02:30.433 --> 00:02:36.250
closing out an issue, but there
are some workflow possibilities there.

36
00:02:36.250 --> 00:02:41.900
If we scroll down, we get the entire
traceback from our application showing us

37
00:02:41.900 --> 00:02:46.410
the error happened on
line 37 of webapp.js.

38
00:02:46.410 --> 00:02:49.210
So, it helps us to understand
where the error occurred.

39
00:02:50.720 --> 00:02:54.120
It'll tell us when all the occurrences
have been, so we get a timestamp.

40
00:02:54.120 --> 00:02:57.586
The browser that generated
the operating system, if available.

41
00:02:57.586 --> 00:03:02.525
The route,
which of our servers it came from.

42
00:03:02.525 --> 00:03:07.836
So if we're running the application on
multiple servers, we can help track down

43
00:03:07.836 --> 00:03:13.660
the precise box that it came from and we
can go in a couple other bits from this.

44
00:03:13.660 --> 00:03:17.721
If we had a logging user, we could
configure our Rollbar integration to

45
00:03:17.721 --> 00:03:22.123
actually send the account information or
some kind of account identifier for

46
00:03:22.123 --> 00:03:23.627
a user to Rollbar as well.

47
00:03:23.627 --> 00:03:28.031
So we could say, account one, two, three,
four just experience this error in

48
00:03:28.031 --> 00:03:31.410
the production environment like
maybe we need to follow up.

49
00:03:33.750 --> 00:03:37.160
We can see some graphs about
like the browser and OS.

50
00:03:37.160 --> 00:03:42.070
If you have deployments configured,
you can see those deployments.

51
00:03:42.070 --> 00:03:46.915
You can see what the potentially
suspicious deployment would be and

52
00:03:46.915 --> 00:03:48.616
other similar errors.

53
00:03:48.616 --> 00:03:53.587
Now when one of these things happens
where the value of this comes in is

54
00:03:53.587 --> 00:03:58.214
the is the notification scheme,
because if an error happens and

55
00:03:58.214 --> 00:04:04.150
nobody is listening, then it doesn't
really matter how effectively you log it.

56
00:04:04.150 --> 00:04:08.223
So on a on a personal and
on a project level,

57
00:04:08.223 --> 00:04:13.442
you can configure different
notification channels.

58
00:04:13.442 --> 00:04:18.433
The only one that's active
by default is email, but

59
00:04:18.433 --> 00:04:25.700
you can notify yourself of errors in
many many different ways as you can see.

60
00:04:25.700 --> 00:04:28.574
Again, the one we like
to use is PagerDuty,

61
00:04:28.574 --> 00:04:33.393
cuz PagerDuty has itself some very
robust notification capabilities and

62
00:04:33.393 --> 00:04:37.122
it can alert an entire chain of command,
essentially and

63
00:04:37.122 --> 00:04:41.805
escalate at each level if you know
one person doesn't answer the page.

64
00:04:41.805 --> 00:04:44.049
So we usually, I have Rollbar.

65
00:04:44.049 --> 00:04:51.813
We have Rollbar passed through
to a PagerDuy when necessary.

66
00:04:51.813 --> 00:04:53.644
Any questions on a Rollbar?

67
00:04:56.853 --> 00:04:58.060
&gt;&gt; Kevin Whinnery: A very
simple integration.

68
00:04:58.060 --> 00:05:03.748
There's more data that you can
send to help diagnose your errors,

69
00:05:03.748 --> 00:05:06.120
but very easy to get setup.

70
00:05:06.120 --> 00:05:10.009
Definitely I recommend it, if you're
looking for a service like this one.

71
00:05:10.009 --> 00:05:12.167
Lets you know when bad stuff is happening.

72
00:05:12.167 --> 00:05:15.567
It's just one part of
a notification scheme.

73
00:05:15.567 --> 00:05:20.299
The other things that you'll wanna
look at configuring are maybe

74
00:05:20.299 --> 00:05:24.517
a Pingdom configuration that
will check your servers from

75
00:05:24.517 --> 00:05:29.430
the outside world to ensure
that they remain accessible.

76
00:05:29.430 --> 00:05:33.240
You can check the HTML, that's coming back
to ensure it's doing what you expect.

77
00:05:34.260 --> 00:05:38.686
And then within Elastic Beanstalk,
if you're running on Beanstalk,

78
00:05:38.686 --> 00:05:42.608
there are some configurations
around notifications as well.

79
00:05:42.608 --> 00:05:49.810
You can setup, such that when certain
events happen on your instances.

80
00:05:49.810 --> 00:05:52.133
You can see that happen.

81
00:05:52.133 --> 00:05:55.351
As you can see,
since the load has died down,

82
00:05:55.351 --> 00:06:00.200
the other two instances that got
spun up have been terminated.

83
00:06:00.200 --> 00:06:02.510
And so,
I'm backed down my single instance.

84
00:06:02.510 --> 00:06:05.321
Over here in a monitoring,

85
00:06:05.321 --> 00:06:10.950
you can dig into the data
coming out of your instances.

86
00:06:10.950 --> 00:06:13.845
And then with the alarms,

87
00:06:13.845 --> 00:06:19.640
you can see if any are alarm
configuration you have.

88
00:06:19.640 --> 00:06:24.751
So for like a CPU utilization and
say, let's see.

89
00:06:24.751 --> 00:06:29.570
If I click on this little alarm,
we can send out

90
00:06:29.570 --> 00:06:35.009
notification if the CPU goes
over a certain level and

91
00:06:35.009 --> 00:06:40.370
we can specify an email
address that gets that.

92
00:06:40.370 --> 00:06:45.020
There's also other services Amazon
provides that are more robust like

93
00:06:45.020 --> 00:06:49.570
a cloud watch that can do
more notifications about

94
00:06:49.570 --> 00:06:52.044
happenings going on
inside your AWS account.

