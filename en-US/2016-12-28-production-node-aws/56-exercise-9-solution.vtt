WEBVTT

1
00:00:00.000 --> 00:00:03.958
[MUSIC]

2
00:00:03.958 --> 00:00:07.610
&gt;&gt; Kevin Whinnery: So we'll take 20
minutes or so to go through that.

3
00:00:07.610 --> 00:00:12.760
We'll take a look at what
this code could look like and

4
00:00:12.760 --> 00:00:15.110
then we'll finish up with any questions or

5
00:00:15.110 --> 00:00:18.460
deeper dives into any of the topics that
we covered over the last couple days.

6
00:00:20.940 --> 00:00:23.990
Alright, so we'll at least go over

7
00:00:25.660 --> 00:00:29.970
the basic configuration and
tracking the initial page view.

8
00:00:29.970 --> 00:00:34.510
And then the custom event tracking
would happen within the guts of your

9
00:00:34.510 --> 00:00:39.210
view JS application as you're
selecting different filters.

10
00:00:39.210 --> 00:00:43.630
If you're interested in tracking
which to use are being clicked and

11
00:00:43.630 --> 00:00:44.470
things like that.

12
00:00:44.470 --> 00:00:47.990
We'll kind of focus on
the page view one right now.

13
00:00:47.990 --> 00:00:55.409
So the first thing that you would need to
do is npm install universal-analytics.

14
00:00:55.409 --> 00:01:00.370
And I then we would create
a visitor which we'd have to

15
00:01:00.370 --> 00:01:02.850
propagate to other pieces
of our application.

16
00:01:02.850 --> 00:01:08.876
So we create a new
visitor object with a ua.

17
00:01:08.876 --> 00:01:13.593
And then we would pass in the tracking
code that we'd created when we

18
00:01:13.593 --> 00:01:16.836
signed up for
a new Google Analytics account.

19
00:01:16.836 --> 00:01:23.140
I actually already had one so
I just created a new property which gives

20
00:01:23.140 --> 00:01:29.134
me a tracking ID that I can use in
my code, so I'm gonna copy that.

21
00:01:29.134 --> 00:01:32.430
And plop that guy right in there.

22
00:01:32.430 --> 00:01:38.118
Now once I do that the signature
to actually track a page view,

23
00:01:38.118 --> 00:01:43.875
is visitor.pageview,

24
00:01:43.875 --> 00:01:49.420
and then we would pass in
the current page being viewed.

25
00:01:49.420 --> 00:01:54.348
I think the default if you don't pass one
in is just trying to get the location

26
00:01:54.348 --> 00:01:55.743
of the current page.

27
00:01:55.743 --> 00:01:58.128
But you could do something like

28
00:01:58.128 --> 00:02:03.253
window.location.href,
&gt;&gt; Kevin Whinnery: To

29
00:02:03.253 --> 00:02:05.460
pass in the current page.

30
00:02:05.460 --> 00:02:08.380
And then the event the way that
this particular API is set up,

31
00:02:08.380 --> 00:02:11.660
the event won't actually
fire until you hit Send.

32
00:02:12.660 --> 00:02:16.530
And then that will actually
initially send off the page view to

33
00:02:16.530 --> 00:02:20.910
analytics to track that
event in your application.

34
00:02:20.910 --> 00:02:26.780
Now the way that you would probably
approach adding this to the router for

35
00:02:26.780 --> 00:02:32.350
the application is having this router
function take in addition to the view app

36
00:02:32.350 --> 00:02:38.260
as a parameter, also this visitor object.

37
00:02:39.880 --> 00:02:45.378
So if we go to the routes in
addition to taking the app,

38
00:02:45.378 --> 00:02:51.890
we'll accept a visitor as an argument and

39
00:02:51.890 --> 00:02:57.840
then for
each of those we'll configure the router

40
00:02:57.840 --> 00:03:05.277
to send a page view event when
any of these routes are reached.

41
00:03:05.277 --> 00:03:10.760
So within each of these in addition to
setting this property on the View app

42
00:03:10.760 --> 00:03:15.350
that's gonna be a part of the view model
for the visibility of the current to-dos.

43
00:03:15.350 --> 00:03:19.470
We'll also call a visitor.pageview.

44
00:03:19.470 --> 00:03:24.685
Then we'll pass in, slash visibility,

45
00:03:24.685 --> 00:03:32.070
which is the shorthand for
the slug that we're seeing.

46
00:03:32.070 --> 00:03:34.610
So we'll track all of those different

47
00:03:34.610 --> 00:03:39.350
filters as an individual page
view in our application, and

48
00:03:39.350 --> 00:03:44.630
once again we'll have to immediately hit
send to actually send that off to Google.

49
00:03:44.630 --> 00:03:48.510
So in a single page application,
this is typically what you do,

50
00:03:48.510 --> 00:03:52.530
if you are handling routing on the client
side, you'll need to manually send those

51
00:03:52.530 --> 00:03:56.770
page view events to Google, or
else every visit to your site if

52
00:03:56.770 --> 00:04:00.650
it's a single page application will appear
as if it was only a single page view,

53
00:04:00.650 --> 00:04:05.760
when in fact they might be viewing
multiple pages within your spot.

54
00:04:05.760 --> 00:04:11.280
So that's the basics of page views,
and then also with that visitor object

55
00:04:11.280 --> 00:04:16.810
within your JavaScript, that's gonna be
handling events for button clicks and

56
00:04:16.810 --> 00:04:22.900
other user-created events, you have
the capacity to create those custom events

57
00:04:22.900 --> 00:04:27.760
which you can then use in your
Google Analytics reporting later on.

58
00:04:27.760 --> 00:04:29.840
But that's pretty much all there is to it.

59
00:04:29.840 --> 00:04:33.680
The only bit that you probably
are gonna want to do, and

60
00:04:33.680 --> 00:04:36.180
that was part of the GitHub issue,

61
00:04:36.180 --> 00:04:41.270
was to only execute this logic
if you're in production.

62
00:04:41.270 --> 00:04:45.540
So there's a couple ways
that you could do that, but

63
00:04:45.540 --> 00:04:50.880
probably the easiest is in the view,

64
00:04:50.880 --> 00:04:55.830
we already have some logic here
that is conditionally executed

65
00:04:59.330 --> 00:05:01.280
based on the current environment.

66
00:05:02.570 --> 00:05:07.872
So in this, inside the same conditional,

67
00:05:07.872 --> 00:05:13.471
we could place some
additional JavaScript or

68
00:05:13.471 --> 00:05:18.631
maybe just set window.environmentType

69
00:05:18.631 --> 00:05:23.520
= production or something like that.

70
00:05:23.520 --> 00:05:29.910
So we would conditionally create that
JavaScript in our application and

71
00:05:29.910 --> 00:05:35.550
set that JavaScript property such that we
could access it from our client side code.

72
00:05:35.550 --> 00:05:41.320
So now, say in our in our app.js, before

73
00:05:41.320 --> 00:05:46.880
we actually go to the trouble of creating
this visitor, we could do a check.

74
00:05:46.880 --> 00:05:55.959
So you know if (window.environmentType =

75
00:05:58.672 --> 00:05:59.520
&gt;&gt; Kevin Whinnery: Production.

76
00:06:00.730 --> 00:06:04.360
Then you would actually go through and
create the visitor.

77
00:06:04.360 --> 00:06:05.480
Otherwise you wouldn't.

78
00:06:05.480 --> 00:06:10.200
Because you won't want to track
that stuff in development mode.

79
00:06:10.200 --> 00:06:14.730
Once you actually do get this implemented
there is a delay before the data

80
00:06:14.730 --> 00:06:18.180
starts coming in to Google Analytics.

81
00:06:18.180 --> 00:06:20.910
It says it can be up to a couple hours.

82
00:06:20.910 --> 00:06:25.860
In my experience it can be anything from
you know a few minutes to a couple hours.

83
00:06:25.860 --> 00:06:28.300
So it'll be kind of dependent on

84
00:06:28.300 --> 00:06:31.900
how things are moving through
the Google tubes on a given day but

85
00:06:31.900 --> 00:06:34.949
it could take quite some time
before the data starts showing up.

86
00:06:37.460 --> 00:06:42.300
So that is a, one handy way to
implement Google Analytics and

87
00:06:42.300 --> 00:06:46.520
integrate it within the rest of your
JavaScript if you're building a JavaScript

88
00:06:46.520 --> 00:06:47.460
application in this way.

