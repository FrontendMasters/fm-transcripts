WEBVTT

1
00:00:00.000 --> 00:00:03.922
[MUSIC]

2
00:00:03.922 --> 00:00:07.207
&gt;&gt; Kevin Whinnery: For those of you
who haven't maybe seen Express before,

3
00:00:07.207 --> 00:00:11.725
I'm just gonna do a very brief demo of
some of the key things that you'll want to

4
00:00:11.725 --> 00:00:15.230
accomplish when you're building
an Express application.

5
00:00:17.290 --> 00:00:23.280
So I'm just gonna do one from scratch to
kind of demonstrate how Express works.

6
00:00:23.280 --> 00:00:28.430
And here in this directory, I've actually
already downloaded the Express module, so

7
00:00:28.430 --> 00:00:33.040
I can write a simple node
program that's going to use it.

8
00:00:33.040 --> 00:00:35.890
So I'm gonna create a new file, index.js,

9
00:00:35.890 --> 00:00:38.660
which is gonna be our
simple Express application.

10
00:00:39.700 --> 00:00:42.936
I'm going to open that up.
&gt;&gt; Kevin Whinnery: And

11
00:00:42.936 --> 00:00:48.669
in my text editor here, I'm gonna be
able to require the Express module.

12
00:00:48.669 --> 00:00:51.801
And I'm gonna repeat some things that
if you've been doing node for a while,

13
00:00:51.801 --> 00:00:53.590
you probably already know.

14
00:00:53.590 --> 00:00:56.930
So I apologize for that, but
there are lots of folks in the room and

15
00:00:56.930 --> 00:00:59.940
online whom some of this
stuff might be new.

16
00:00:59.940 --> 00:01:01.930
So I'll break it down as best I can,

17
00:01:01.930 --> 00:01:05.540
and feel free to shoot in any
questions that you have along the way.

18
00:01:05.540 --> 00:01:12.881
So the first thing I'm gonna hue is
require Express as a common JS module.

19
00:01:12.881 --> 00:01:17.525
And this is the modularization
mechanism provided

20
00:01:17.525 --> 00:01:21.992
natively in node JS.
&gt;&gt; Speaker 3: And if we could, in the text

21
00:01:21.992 --> 00:01:26.178
editor too, if we can bump [INAUDIBLE].
&gt;&gt; Kevin Whinnery: Sure thing,

22
00:01:26.178 --> 00:01:35.012
I could probably go a little bit bigger.
&gt;&gt; Kevin Whinnery: All right,

23
00:01:35.012 --> 00:01:39.150
so there is a global function in
a node program called require.

24
00:01:39.150 --> 00:01:43.658
And when I pass into name, it's going
to try to find a module of that name.

25
00:01:43.658 --> 00:01:47.571
So if it's just a string like this,
like express,

26
00:01:47.571 --> 00:01:51.032
it's gonna reference the node module path.

27
00:01:51.032 --> 00:01:54.160
And the way that,
that is resolved is in a couple of ways.

28
00:01:54.160 --> 00:01:56.610
First locally, here in this directory,

29
00:01:56.610 --> 00:02:00.770
if there's a node modules folder,
it's going to look in here and

30
00:02:00.770 --> 00:02:05.900
say, there's something called
Express in this node modules folder.

31
00:02:05.900 --> 00:02:08.420
So I'm gonna load that module from there.

32
00:02:08.420 --> 00:02:13.520
And after that, if it doesn't find
Express in a local node modules folder,

33
00:02:13.520 --> 00:02:18.330
it'll actually start walking up
the folders up above that, looking for

34
00:02:18.330 --> 00:02:23.730
node modules and failing that, it will
look for globally installed node modules.

35
00:02:23.730 --> 00:02:25.950
So if you've installed express globally,

36
00:02:25.950 --> 00:02:30.240
it will require that
version of the module.

37
00:02:30.240 --> 00:02:34.530
If you want to require local
modules that you've created,

38
00:02:34.530 --> 00:02:38.300
which we'll do here in a second, there's
a slightly different syntax for that.

39
00:02:38.300 --> 00:02:44.548
But now, I've created this express object
which represents the express library.

40
00:02:44.548 --> 00:02:50.080
And I'm gonna create an application
just using the Express constructor or

41
00:02:50.080 --> 00:02:55.893
the Express builder, I would say,
it's not really a constructor function.

42
00:02:55.893 --> 00:03:00.044
And with that application,
I can start defining routes to handle

43
00:03:00.044 --> 00:03:05.000
incoming HTTP peer requests or
I can start configuring middleware.

44
00:03:05.000 --> 00:03:10.697
But before I do that,
the Express module does have the capacity

45
00:03:10.697 --> 00:03:16.934
to start like a built in HTTP
server which we'll do on port 3000,

46
00:03:16.934 --> 00:03:21.793
so that'll actually start listening for
requests.

47
00:03:21.793 --> 00:03:26.680
Typically, you don't use the built
in HTTP server like this, but

48
00:03:26.680 --> 00:03:30.190
for demonstration purposes, we'll do that.

49
00:03:30.190 --> 00:03:34.772
And there's a couple ways were I can
define handlers in my application.

50
00:03:34.772 --> 00:03:42.709
And app.use is a way that I can define
a middleware function for my application.

51
00:03:42.709 --> 00:03:47.520
So use expects a function as an argument.

52
00:03:50.320 --> 00:03:55.764
And a middleware function will have
an area of three so it'll take three

53
00:03:55.764 --> 00:04:01.221
arguments which is going to be
the request, your response, and next.

54
00:04:01.221 --> 00:04:05.513
And next is a callback function that
is going to be called to continue on

55
00:04:05.513 --> 00:04:09.900
processing the request after
the middleware has finished executing.

56
00:04:11.480 --> 00:04:15.861
So in this case, a common use case for
a middleware is to check for

57
00:04:15.861 --> 00:04:17.809
an authenticated user, and

58
00:04:17.809 --> 00:04:23.588
then add that user's information to the
current quest for downstream processing.

59
00:04:23.588 --> 00:04:29.125
So I could say, request user equals

60
00:04:29.125 --> 00:04:35.010
name Kevin or something like that.

61
00:04:35.010 --> 00:04:39.950
Maybe I would check the cookies associated
with the request and get some data there.

62
00:04:39.950 --> 00:04:45.246
But I would do some processing on
the request and or the response.

63
00:04:45.246 --> 00:04:48.978
And then whenever I'm done
executing that logic,

64
00:04:48.978 --> 00:04:54.199
I'll just call next, and
then the request will continue processing.

65
00:04:54.199 --> 00:04:56.371
And then when I want to handle specific,
yes,

66
00:04:56.371 --> 00:04:58.305
question.
&gt;&gt; Speaker 4: Is there a meaningful

67
00:04:58.305 --> 00:05:02.605
difference between declaring
your app variable and

68
00:05:02.605 --> 00:05:07.357
using a let versus a var?
&gt;&gt; Kevin Whinnery: The difference

69
00:05:07.357 --> 00:05:09.525
with let is block scope.

70
00:05:09.525 --> 00:05:12.700
It's actually the scope in
which the variable is declared.

71
00:05:12.700 --> 00:05:17.320
So with var,
the scope is always going to be

72
00:05:17.320 --> 00:05:21.200
whatever the enclosing
meaning of this would be.

73
00:05:21.200 --> 00:05:25.870
So if this code were to execute in
the browser, outside of a function scope,

74
00:05:25.870 --> 00:05:30.320
if I did var app, that would
declare the app variable globally.

75
00:05:30.320 --> 00:05:33.394
Let declares variables
within the scope of a block.

76
00:05:33.394 --> 00:05:39.950
So in this case, this method is
visible to my entire application.

77
00:05:39.950 --> 00:05:42.141
But if it was declared
within an if block or

78
00:05:42.141 --> 00:05:46.406
some other other kind of block within
the application, it would only be scoped.

79
00:05:46.406 --> 00:05:49.550
It would only be visible
within that block.

80
00:05:49.550 --> 00:05:52.190
So you can basically
use it in place of var.

81
00:05:52.190 --> 00:05:55.550
And it usually means what you want it
to mean which is declare this variable

82
00:05:55.550 --> 00:05:56.929
inside the current block scope.

83
00:05:59.660 --> 00:06:04.030
So in the const is for variables yet

84
00:06:04.030 --> 00:06:08.170
you don't expect to change,
they should be immutable, essentially.

85
00:06:09.810 --> 00:06:14.224
So we create the application,
we define some middleware.

86
00:06:14.224 --> 00:06:20.510
And then we can handle specific HTTP
methods on the application as well.

87
00:06:20.510 --> 00:06:23.830
So when a browser makes a web
request to our web application,

88
00:06:23.830 --> 00:06:26.170
that's an HTTP get request.

89
00:06:26.170 --> 00:06:32.310
So on our application object,
I can say get, whenever there's

90
00:06:32.310 --> 00:06:38.470
a get request to slash hello in my web
application, I want to execute some logic.

91
00:06:38.470 --> 00:06:43.030
And in this case, I'm just going to create
a callback function with a request and

92
00:06:43.030 --> 00:06:43.639
a response.

93
00:06:45.960 --> 00:06:50.590
Technically, I don't even need these other
parens but it's a hard habit to break, and

94
00:06:50.590 --> 00:06:52.750
I'm probably not ever going to use it.

95
00:06:52.750 --> 00:06:55.335
Never gonna to break it, I don't think.

96
00:06:55.335 --> 00:07:01.870
But at this point, I'm probably going to
render an actual response to this route.

97
00:07:01.870 --> 00:07:07.871
So now, I'm gonna say response.send,

98
00:07:07.871 --> 00:07:12.320
and response.send will send back

99
00:07:12.320 --> 00:07:16.030
different content types depending on
the kind of object that you pass it.

100
00:07:16.030 --> 00:07:17.350
If you pass it a string,

101
00:07:17.350 --> 00:07:21.130
it will assume that you're trying
to send HTML back to the client.

102
00:07:21.130 --> 00:07:24.830
If you pass it, a JavaScript object,
it'll serialize it to JSON, and

103
00:07:24.830 --> 00:07:28.320
assume you wanna send
JSON back to the client.

104
00:07:28.320 --> 00:07:36.697
So in this case,
I'm gonna send back a string that says,

105
00:07:36.697 --> 00:07:41.596
hello, request.user.name.

106
00:07:41.596 --> 00:07:46.769
And it's gonna use that value which
was defined in the middleware to

107
00:07:46.769 --> 00:07:53.110
actually insert that name into the HTML
response that I'm sending back.

108
00:07:53.110 --> 00:07:57.810
And this is another newish
feature that I won't beat in, but

109
00:07:57.810 --> 00:08:00.730
it's possible to do string interpolation

110
00:08:00.730 --> 00:08:05.150
in this version of node using the back
ticks rather than the single ticks.

111
00:08:05.150 --> 00:08:09.429
So it's just one of those niceties that
is snuck into the language recently.

112
00:08:11.180 --> 00:08:16.413
So if I save that up and run the program.

113
00:08:16.413 --> 00:08:19.174
No, yeah, I'm actually already
running something on port 3000.

114
00:08:19.174 --> 00:08:23.224
That would be why.

115
00:08:23.224 --> 00:08:27.600
Okay, so now, I have a little Express
application running on port 3000.

116
00:08:27.600 --> 00:08:32.938
And if I Visit hello in the browser,
I see Hello Kevin

117
00:08:32.938 --> 00:08:39.989
which is based on the result of that
middleware stack that I defined.

118
00:08:39.989 --> 00:08:45.193
Now, the way and typically, if you as
an application developer are creating

119
00:08:45.193 --> 00:08:51.330
your own middleware, you don't probably
wanna define middleware in this way.

120
00:08:51.330 --> 00:08:56.590
Most of the middleware that you see,
that you'll use from NPM or

121
00:08:56.590 --> 00:09:00.660
else we're on ecosystem, will actually
define a constructor function

122
00:09:00.660 --> 00:09:04.260
which returns a function that
you can use as middleware.

123
00:09:05.340 --> 00:09:10.347
So in this case, I'll just
demonstrate that technique really

124
00:09:10.347 --> 00:09:15.546
quickly by creating a new file,
we'll call it middleware.js.

125
00:09:22.196 --> 00:09:23.456
&gt;&gt; Kevin Whinnery: And in this case,

126
00:09:23.456 --> 00:09:28.419
I'm gonna create a function that's
going to accept some arguments,

127
00:09:28.419 --> 00:09:32.540
and then produce a middleware
function as a response.

128
00:09:32.540 --> 00:09:37.020
So I'm gonna do a function called create.

129
00:09:39.050 --> 00:09:41.150
And it'll accept an argument
like a user name.

130
00:09:42.590 --> 00:09:48.574
And this create function is itself
going to return a function.

131
00:09:55.690 --> 00:09:56.551
&gt;&gt; Kevin Whinnery: Which will

132
00:09:56.551 --> 00:10:01.340
be the actual middleware
that's actually not necessary.

133
00:10:02.760 --> 00:10:07.478
So this will be the actual middleware
function that you can mount in

134
00:10:07.478 --> 00:10:08.919
your application.

135
00:10:08.919 --> 00:10:16.420
So if we copy over kind of what we
did here, we get request.user.name.

136
00:10:16.420 --> 00:10:20.530
So we put that processing
logic inside of this

137
00:10:20.530 --> 00:10:25.300
middleware function,
excuse me, let's do that.

138
00:10:26.450 --> 00:10:29.780
But now, instead of like hard
coding the name that we send back,

139
00:10:31.290 --> 00:10:36.110
we'll just pass in the username
that was configured here.

140
00:10:36.110 --> 00:10:36.690
And in this way,

141
00:10:36.690 --> 00:10:40.680
you can essentially parametrize
the creation of your middleware, so

142
00:10:40.680 --> 00:10:44.730
you can have middleware behave differently
based on the arguments that are passed.

143
00:10:44.730 --> 00:10:49.048
And so typically, this is how you're
gonna wanna construct some middleware.

144
00:10:49.048 --> 00:10:53.724
And then to actually make
that create function,

145
00:10:53.724 --> 00:10:58.627
the public interface by module,
I will assign that

146
00:10:58.627 --> 00:11:03.544
function that I just
created to module.exports.

147
00:11:03.544 --> 00:11:09.351
So now,
I can require my own middleware by passing

148
00:11:09.351 --> 00:11:16.270
in a relative path to the module
that I'd like to require.

149
00:11:16.270 --> 00:11:19.570
So in this case,
it's gonna be in the same directory.

150
00:11:19.570 --> 00:11:21.550
It was called middleware.

151
00:11:22.910 --> 00:11:25.690
So I'm gonna require
that middleware function.

152
00:11:25.690 --> 00:11:30.992
And now, rather than having
the function inline there,

153
00:11:30.992 --> 00:11:36.720
I'm going to say,
&gt;&gt; Kevin Whinnery: Gonna

154
00:11:36.720 --> 00:11:39.290
change up my middle ware to
pass in a different name.

155
00:11:40.300 --> 00:11:47.800
And now, if I kill that process and
restart it, go back out to my server.

156
00:11:47.800 --> 00:11:52.220
I have a parametrized middleware that
does something slightly different.

157
00:11:52.220 --> 00:11:56.060
So again, if you're developing your own
middleware that's typically the way that

158
00:11:56.060 --> 00:12:02.240
you're gonna structure it with
a factory function that will, in fact,

159
00:12:02.240 --> 00:12:07.290
return a function based on
the parameters that you pass in.

160
00:12:07.290 --> 00:12:12.080
Any questions on Express or middleware
right away before we keep trucking?

161
00:12:13.480 --> 00:12:18.140
Or things that you'd like further
information on before we tried ourselves?

