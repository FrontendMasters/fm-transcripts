WEBVTT

1
00:00:00.000 --> 00:00:03.883
[MUSIC]

2
00:00:03.883 --> 00:00:08.856
&gt;&gt; Kevin Whinnery: I think we'll start off
with the two kind of heroes of our front

3
00:00:08.856 --> 00:00:15.170
end toolchain which are Browserify and
SAS and they help with a lot of different

4
00:00:15.170 --> 00:00:20.547
things that make our front end code
much more expressive to write.

5
00:00:20.547 --> 00:00:24.029
And also also more performant and
feature rich.

6
00:00:24.029 --> 00:00:29.240
So Browserify and
SAS are both preprocessors,

7
00:00:29.240 --> 00:00:34.066
Browserify for JavaScript and SAS for CSS.

8
00:00:34.066 --> 00:00:39.169
In our application we're actually
using Browserify as the primary

9
00:00:39.169 --> 00:00:44.721
mechanism by which we transform our
JavaScript into actual cross browser

10
00:00:44.721 --> 00:00:50.180
JavaScript code that can run again
across a variety of browsers.

11
00:00:50.180 --> 00:00:52.580
So Browserify provides a few things.

12
00:00:52.580 --> 00:00:57.180
It actually has a transform
which we'll talk about next.

13
00:00:57.180 --> 00:01:01.632
That runs it through another tool
called Babel which ultimately produces

14
00:01:01.632 --> 00:01:06.400
a cross-platform JavaScript code that you
can actually serve which we've been doing

15
00:01:06.400 --> 00:01:09.510
this entire time with
our to do application.

16
00:01:09.510 --> 00:01:12.570
SAS is a is a preprocessor for CSS.

17
00:01:12.570 --> 00:01:18.280
It takes a language that is
a superset of CSS features and

18
00:01:18.280 --> 00:01:21.030
converts that to plain vanilla CSS.

19
00:01:22.790 --> 00:01:26.940
So Browserify I think is

20
00:01:26.940 --> 00:01:31.450
maybe one of the key technologies
of the entire Node.js ecosystem.

21
00:01:33.600 --> 00:01:40.320
It's a critical component of being able to
realize this idea of isomorphic JavaScript

22
00:01:40.320 --> 00:01:44.590
where you can write code that can run
both on the client's and on the server.

23
00:01:44.590 --> 00:01:49.620
And while as a practical matter
you don't really that often

24
00:01:49.620 --> 00:01:54.070
share a ton of code between client and
server unless it's pure JavaScript.

25
00:01:55.660 --> 00:02:00.540
The primary thing that Browserify
provides is the ability to

26
00:02:00.540 --> 00:02:02.570
write your code the same way.

27
00:02:02.570 --> 00:02:07.050
So when you're writing a view.js component
you're still dealing with a common

28
00:02:07.050 --> 00:02:08.250
js module.

29
00:02:08.250 --> 00:02:13.140
You're using the same language features
that you can use on the server and node.

30
00:02:13.140 --> 00:02:15.600
And Browserify makes all of that possible.

31
00:02:15.600 --> 00:02:19.602
So there's no context switching
where you're going to the front and

32
00:02:19.602 --> 00:02:20.430
the back end.

33
00:02:20.430 --> 00:02:23.760
If you've worked as I have in
languages where JavaScript is

34
00:02:23.760 --> 00:02:27.950
purely on the front end and on the back,
you're writing Ruby or Java or whatever.

35
00:02:27.950 --> 00:02:32.430
You know that there's a switch when you
go from one language to the other and

36
00:02:32.430 --> 00:02:36.520
Browserify makes that switch
pretty much seamless.

37
00:02:36.520 --> 00:02:42.535
So a it's a a critical tool in my mind for
the success of node.js.

38
00:02:42.535 --> 00:02:47.305
So Browserify itself provides
one primary service for

39
00:02:47.305 --> 00:02:51.866
your application which is
t o analyze the dependency

40
00:02:51.866 --> 00:02:56.963
structure of your code to see
which modules are required.

41
00:02:56.963 --> 00:03:03.138
And then it builds a JavaScript bundle and
a sort of integrated require system

42
00:03:03.138 --> 00:03:09.419
which will allow that your node.js style
common js code to run in the browser.

43
00:03:09.419 --> 00:03:15.208
And that's pretty much what Browserify
provides but the other thing that it

44
00:03:15.208 --> 00:03:20.460
does is it provides an affordance for
transformations and plugins.

45
00:03:20.460 --> 00:03:24.802
And the transformations that you can
include along with Browserify do lots of

46
00:03:24.802 --> 00:03:26.440
very useful things.

47
00:03:26.440 --> 00:03:31.170
In our case we're using
a Browserify Transform for Babel so

48
00:03:31.170 --> 00:03:36.220
we're able to, during that process
of packaging our JavaScript,

49
00:03:36.220 --> 00:03:39.585
convert code that is
written on the server for

50
00:03:39.585 --> 00:03:45.540
an ES2015+ version of JavaScript.

51
00:03:45.540 --> 00:03:50.880
And we can actually take that code and
convert it to

52
00:03:50.880 --> 00:03:56.280
regular ES5 code that can run
on a variety of browsers.

53
00:03:56.280 --> 00:04:01.400
So the Babelify Transform provides
that functionality for us.

54
00:04:01.400 --> 00:04:07.190
And that's just one of many different
transforms that you can use.

55
00:04:07.190 --> 00:04:12.270
There are transforms that allow you
to require like templates, so if you

56
00:04:12.270 --> 00:04:17.700
have Jade templates or a Pug templates
I guess, they're calling it these days.

57
00:04:17.700 --> 00:04:23.730
You can actually require those files and
there's a transform, they'll turn

58
00:04:23.730 --> 00:04:28.600
it into a JavaScript function that you can
require directly in your JavaScript code.

59
00:04:28.600 --> 00:04:32.250
So there's a ton of really
useful technologies,

60
00:04:32.250 --> 00:04:37.610
transforms out there that you
can integrate into Browserify.

61
00:04:37.610 --> 00:04:43.710
The transforms are typically installed
as peer modules of Browserify.

62
00:04:43.710 --> 00:04:46.599
Browserify itself doesn't ship
with any of these transformations.

63
00:04:47.960 --> 00:04:52.100
And while you can execute Browserify
directly from the from the command line,

64
00:04:52.100 --> 00:04:57.650
typically you can execute it
with a variety of options.

65
00:04:58.880 --> 00:05:03.390
Typically what ends up being
expedient is configuring your

66
00:05:03.390 --> 00:05:08.090
Browserify transforms and options within
the package.json for the project.

67
00:05:08.090 --> 00:05:14.220
And if you look in the to-do MBC++ repo,
you can see the configuration options for

68
00:05:14.220 --> 00:05:18.700
Browserify, so in this case we're
right now using two transforms.

69
00:05:18.700 --> 00:05:24.343
The first is Browserify Shim,
sorry for the laser pointer usage for

70
00:05:24.343 --> 00:05:29.293
those online, but
Browserify Shim will helps you to shim in

71
00:05:29.293 --> 00:05:34.837
different modules that may exist
as regular JavaScript modules so

72
00:05:34.837 --> 00:05:38.410
they can be required in your application.

73
00:05:38.410 --> 00:05:42.502
So in the configuration down below for
Browserify Shim,

74
00:05:42.502 --> 00:05:47.801
we have the ability to require jquery
in our common js style browser code.

75
00:05:47.801 --> 00:05:52.493
But that's essentially going to be
a reference to the window scoped dollar

76
00:05:52.493 --> 00:05:57.920
sign object to which jquery is assigned
when actually running in the browser.

77
00:05:57.920 --> 00:06:02.280
In addition to the shim transform
we also have the Babelify

78
00:06:02.280 --> 00:06:07.760
transform which again is a framework for
integrating lots of different

79
00:06:07.760 --> 00:06:12.630
features for advanced versions of
actual script into your application.

80
00:06:12.630 --> 00:06:17.660
In our current application we're
using the ES 2015 presets which

81
00:06:17.660 --> 00:06:22.702
add a lot of language features that
don't yet exist in most browsers.

82
00:06:22.702 --> 00:06:24.159
But there's other presets
that you can use.

83
00:06:24.159 --> 00:06:28.013
There's a popular react
preset which allows you

84
00:06:28.013 --> 00:06:32.714
to convert JSX files with
integrated view code into regular

85
00:06:32.714 --> 00:06:36.300
JavaScript as a part of
this process as well.

86
00:06:37.890 --> 00:06:38.760
So Browserify,

87
00:06:38.760 --> 00:06:41.990
a key tool in our tool chain here.
&gt;&gt; Speaker 2: Where is that

88
00:06:41.990 --> 00:06:45.080
configuration file?
&gt;&gt; Kevin Whinnery: That's actually gonna

89
00:06:45.080 --> 00:06:50.350
be in package.json, so
down near the bottom.

