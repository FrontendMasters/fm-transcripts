WEBVTT

1
00:00:00.000 --> 00:00:03.846
[MUSIC]

2
00:00:03.846 --> 00:00:06.932
&gt;&gt; Kevin Whinnery: If you want
to build something similar,

3
00:00:06.932 --> 00:00:12.770
the Socket IO documentation is
actually fairly good on this front.

4
00:00:12.770 --> 00:00:18.820
If you just go to SOCKET.IO,
and click on Getting Started,

5
00:00:18.820 --> 00:00:24.050
you can do a pretty much around about to
do here by going through this tutorial

6
00:00:24.050 --> 00:00:27.370
in setting up a basic
basic chat application.

7
00:00:30.250 --> 00:00:33.315
So what we're gonna need
to do to use socket I O.

8
00:00:33.315 --> 00:00:38.240
I'll use it in a simple sort
of stand alone project first.

9
00:00:38.240 --> 00:00:42.070
And then we'll pose
a challenge to the group

10
00:00:42.070 --> 00:00:45.270
to integrate socket IO in our
TODO List application as well.

11
00:00:46.570 --> 00:00:51.140
First thing we're gonna do,
we already have if memory serves,

12
00:00:51.140 --> 00:00:56.940
we have a express module
installed in this directory.

13
00:00:58.190 --> 00:00:59.520
Yep there we go.

14
00:00:59.520 --> 00:01:02.240
But we don't yet have socket IO.

15
00:01:02.240 --> 00:01:03.235
I'm going to install that now.

16
00:01:07.625 --> 00:01:12.479
&gt;&gt; Kevin Whinnery: And
socket.io works alongside pretty much

17
00:01:12.479 --> 00:01:15.510
every node web framework.

18
00:01:15.510 --> 00:01:20.730
It requires an HTTP server instance to
do things like serve up the client side

19
00:01:20.730 --> 00:01:27.420
interface JavaScript to the browser and
a few other bits.

20
00:01:27.420 --> 00:01:30.660
And I'll show you how to kind of set
that up on the on the server side first.

21
00:01:35.500 --> 00:01:39.320
If we open this app this is the simple
express example that we looked at

22
00:01:39.320 --> 00:01:43.570
yesterday that showed us
the basics of creating middleware.

23
00:01:43.570 --> 00:01:49.250
And in that application, we let
express create an HTTP server for us.

24
00:01:49.250 --> 00:01:53.890
But in this instance we are actually
not gonna be doing that.

25
00:01:53.890 --> 00:02:00.809
So let's go ahead and
require the HTTP module from core node.

26
00:02:05.820 --> 00:02:10.171
And we're also going to
require the socket IO module.

27
00:02:10.171 --> 00:02:16.829
We're actually just gonna create,
I'll require that.

28
00:02:16.829 --> 00:02:19.720
We'll actually require that
here in a A little bit.

29
00:02:19.720 --> 00:02:24.800
Now instead of calling this
in on our express app,

30
00:02:24.800 --> 00:02:29.610
after we create our express app,
we're gonna create an HTP server.

31
00:02:39.840 --> 00:02:44.914
And then we're gonna have that
server listen on port 3,000 and

32
00:02:44.914 --> 00:02:49.810
this time we'll pass in a little
function that's gonna say there

33
00:02:49.810 --> 00:02:54.370
are servers running just so
we know that it's working fine.

34
00:02:54.370 --> 00:03:03.300
All right so
we have our have our server there.

35
00:03:04.320 --> 00:03:10.840
Now that we have our express application
set up, we're also going to serve

36
00:03:10.840 --> 00:03:15.640
up some static assets so we can see what's
happening on the HTML side of things.

37
00:03:15.640 --> 00:03:18.800
So we're going to use the built-in
express static server.

38
00:03:22.540 --> 00:03:27.590
And we're gonna serve up the public

39
00:03:27.590 --> 00:03:33.270
directory which has yet to be created
from within the current directory.

40
00:03:33.270 --> 00:03:35.100
So if there's an HTML, CSS,

41
00:03:35.100 --> 00:03:39.460
JavaScript other assets,
they'll be loaded from this public folder.

42
00:03:44.380 --> 00:03:49.124
Here, let me just pull this up.

43
00:03:55.874 --> 00:03:57.756
&gt;&gt; Kevin Whinnery: Once we
get that piece all set up,

44
00:03:57.756 --> 00:04:00.520
we have our regular old Express app.

45
00:04:00.520 --> 00:04:05.610
Now we need to,
let's maybe start by creating that

46
00:04:05.610 --> 00:04:10.314
HTML application next that we'll be using
the socket IO stuff on the client side.

47
00:04:10.314 --> 00:04:16.588
So we'll create an indexed HTML and

48
00:04:16.588 --> 00:04:22.660
we'll just have some some basic.

49
00:04:24.730 --> 00:04:27.160
Some basic markup here.

50
00:04:27.160 --> 00:04:30.710
Maybe an owner list,
which will have our messages.

51
00:04:36.030 --> 00:04:40.570
And then we'll have a form or
maybe even just an input.

52
00:04:42.430 --> 00:04:50.478
Type text
&gt;&gt; Kevin Whinnery: And

53
00:04:50.478 --> 00:04:55.298
then this is going to be the way in
which users are going to interact

54
00:04:55.298 --> 00:04:59.570
with our application,
by typing in some chat messages.

55
00:04:59.570 --> 00:05:06.846
And then we'll have a button,
&gt;&gt; Kevin Whinnery: To

56
00:05:06.846 --> 00:05:11.400
actually send that message
out to some folks.

57
00:05:11.400 --> 00:05:15.690
All right, so we have our basic
Express app running here.

58
00:05:15.690 --> 00:05:17.986
We actually don't need
any of this anymore.

59
00:05:17.986 --> 00:05:22.900
And if we've done everything correctly,
we should have an Express app running.

60
00:05:26.068 --> 00:05:28.940
Yeah we already have one running
on port 3,000 over here.

61
00:05:31.940 --> 00:05:36.671
We should have a server running
on port 3,000 that just has

62
00:05:36.671 --> 00:05:41.860
a basic HTML U I here that eventually
will become a chat application.

