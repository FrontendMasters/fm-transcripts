WEBVTT

1
00:00:00.000 --> 00:00:03.992
[MUSIC]

2
00:00:03.992 --> 00:00:08.751
&gt;&gt; Kevin Whinnery: When we sent
you off on this Vue.js journey,

3
00:00:08.751 --> 00:00:14.765
we had you try to change
the application to take advantage

4
00:00:14.765 --> 00:00:20.026
of the API that we just put
in place last time around

5
00:00:20.026 --> 00:00:26.819
to actually save the completed
status of the to-do list items.

6
00:00:26.819 --> 00:00:30.152
And so we actually do have,
looking through,

7
00:00:30.152 --> 00:00:33.056
we got one pull request which is great and

8
00:00:33.056 --> 00:00:38.534
definitely implements this in a way
very similar to what I would recommend.

9
00:00:38.534 --> 00:00:41.790
So let's actually take a look and
blow that up.

10
00:00:43.200 --> 00:00:48.600
So, what we have here in this pull
request is a couple of changes.

11
00:00:50.370 --> 00:00:59.660
The first is to our existing store utility
class or a utility object, I guess.

12
00:00:59.660 --> 00:01:05.267
So we had some logic before that would
actually save every todo in the list,

13
00:01:05.267 --> 00:01:09.731
if it was flagged with a Boolean
property called modified.

14
00:01:09.731 --> 00:01:14.213
And this is just kind of
a byproduct of the way to do NBC,

15
00:01:14.213 --> 00:01:18.598
it was originally implemented
where like the only way

16
00:01:18.598 --> 00:01:23.190
todo items were saved were as
an entire list all at once.

17
00:01:23.190 --> 00:01:24.780
So, that's still the way that it works.

18
00:01:26.080 --> 00:01:30.999
So what we what we've done here
is updated that those AJAX

19
00:01:30.999 --> 00:01:36.122
requests to in addition to
sending the title to the server,

20
00:01:36.122 --> 00:01:42.178
also sending the completed status of
a todo item to the server as well.

21
00:01:42.178 --> 00:01:43.674
We also have that down here in the update.

22
00:01:43.674 --> 00:01:47.427
So both in the create and
the update steps,

23
00:01:47.427 --> 00:01:53.590
we have just also started tracking
the completion status of the todo.

24
00:01:53.590 --> 00:01:56.273
So, that was step one
that we had to do it.

25
00:01:56.273 --> 00:02:01.316
Next, we had to modify
the user interface to actually

26
00:02:01.316 --> 00:02:05.909
like save that property as
a part of the as a part of

27
00:02:05.909 --> 00:02:11.196
the interface when something
was actually completed.

28
00:02:11.196 --> 00:02:19.251
So what we did here, this is
the actual model or the view component.

29
00:02:19.251 --> 00:02:21.612
We added another instance function here.

30
00:02:21.612 --> 00:02:26.710
Actually, I might just open this file up,
so we can see what we did.

31
00:02:28.660 --> 00:02:35.620
So there is a section of functions
within a view component called methods

32
00:02:35.620 --> 00:02:42.140
which are callable as a part of,
then handling and other other scenarios.

33
00:02:42.140 --> 00:02:47.337
So we had before and addTodo,
a removeTodo, editTodo,

34
00:02:47.337 --> 00:02:51.994
doneEdit and
what we added here was a new method call

35
00:02:51.994 --> 00:02:57.370
complete which takes
a todo that was completed.

36
00:02:57.370 --> 00:03:04.608
And the actual property completed of
the to do is already being updated,

37
00:03:04.608 --> 00:03:10.435
because it was bound to a property
of the checkbox object.

38
00:03:10.435 --> 00:03:15.714
Maybe it would be easier to look at

39
00:03:15.714 --> 00:03:22.132
that here in the source for index.ejs.

40
00:03:22.132 --> 00:03:29.923
So, here is the for loop in which were
rendering all the individual list items.

41
00:03:29.923 --> 00:03:35.121
And inside each list item,
there is a div that contains

42
00:03:35.121 --> 00:03:40.658
the contents of the button,
but also this checkbox toggle

43
00:03:40.658 --> 00:03:46.436
which was bound to the completed
property of the todo model.

44
00:03:46.436 --> 00:03:51.445
So any time that checkbox is updated,
it's actually going to be

45
00:03:51.445 --> 00:03:57.384
updating the bullion property completed
on the underlying to do list item,

46
00:03:57.384 --> 00:04:00.840
so that property is already being updated.

47
00:04:00.840 --> 00:04:09.399
So, what we did in this change set
here is we take the completed todo.

48
00:04:09.399 --> 00:04:14.607
We flag it as having been modified,
which is necessary to actually

49
00:04:14.607 --> 00:04:19.536
persist the save to the server and
then we call that same storage

50
00:04:19.536 --> 00:04:24.482
method that we had before passing
in the current list of todos.

51
00:04:24.482 --> 00:04:28.050
And because this todo
was marked as modified,

52
00:04:28.050 --> 00:04:31.991
we're going to persist
that change to the server.

53
00:04:31.991 --> 00:04:36.981
So, that was the only thing
we needed to change on

54
00:04:36.981 --> 00:04:42.096
the actual view instance itself and
then the third

55
00:04:42.096 --> 00:04:46.987
change in the pull request
was also necessary.

56
00:04:46.987 --> 00:04:49.858
So we updated our our service,
which is the back-end.

57
00:04:49.858 --> 00:04:53.815
We updated our controller,
our component logic.

58
00:04:53.815 --> 00:04:59.822
We also updated our HTML here for
the actual view and

59
00:04:59.822 --> 00:05:06.120
it was reformatted a little bit,
which is also good.

60
00:05:07.390 --> 00:05:11.511
Get it closer to under 80 columns,
which I appreciate.

61
00:05:11.511 --> 00:05:18.478
The primary change here was adding
a new event listener on this object.

62
00:05:18.478 --> 00:05:23.106
So whenever the change of the event
happens on this checkbox,

63
00:05:23.106 --> 00:05:29.336
we're gonna call this complete function on
the component passing in the current to

64
00:05:29.336 --> 00:05:35.481
do that was that was updated and there's
a few ways you could've gone about this.

65
00:05:35.481 --> 00:05:42.692
Listening for the change event is great
and probably, maybe the cleanest.

66
00:05:42.692 --> 00:05:49.750
Another way would have been to attach
a click handler to this input, as well.

67
00:05:49.750 --> 00:05:53.400
So here's our input checkbox,
listening for

68
00:05:53.400 --> 00:05:57.740
the change of event and
calling our function is a great solution.

69
00:05:57.740 --> 00:06:00.560
Another thing that you
might have done is add

70
00:06:02.050 --> 00:06:07.100
a click handler function here and
then you could have called that

71
00:06:08.230 --> 00:06:13.520
complete function passing in
the current todo for this item.

72
00:06:13.520 --> 00:06:19.236
So that would have been a response
to the actual click, but

73
00:06:19.236 --> 00:06:27.417
listening for the change of the property
is probably the best way to approach that.

74
00:06:27.417 --> 00:06:29.806
So, excellent work on that piece.

75
00:06:29.806 --> 00:06:35.529
That is precisely what I would
have done in this situation.

76
00:06:35.529 --> 00:06:39.439
So good work and you did it much
better than I would have done,

77
00:06:39.439 --> 00:06:42.340
had I live coded it in front of you.

78
00:06:42.340 --> 00:06:47.335
So, I'm going to go ahead and
apply a plus one to that.

79
00:06:47.335 --> 00:06:51.585
And since it's a bigger change, I'll pull
it down locally and make sure that it's

80
00:06:51.585 --> 00:06:56.565
working properly before I merge it in, but
it looks absolutely perfect at this point.

