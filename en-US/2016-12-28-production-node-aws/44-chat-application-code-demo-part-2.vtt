WEBVTT

1
00:00:00.000 --> 00:00:03.935
[MUSIC]

2
00:00:03.935 --> 00:00:07.560
&gt;&gt; Kevin Whinnery: Now we're ready to
start adding in the Socket.IO pieces.

3
00:00:07.560 --> 00:00:13.180
So on the server, we're going to create

4
00:00:13.180 --> 00:00:18.770
the Socket.IO object that's gonna allow us
to manage incoming web socket connections.

5
00:00:18.770 --> 00:00:23.041
So we're gonna create this
IO object by requiring

6
00:00:23.041 --> 00:00:27.675
a Socket.IO,
&gt;&gt; Kevin Whinnery: And

7
00:00:27.675 --> 00:00:32.743
then to that we're gonna pass in
the HTTP server that we just created.

8
00:00:32.743 --> 00:00:37.620
And that's gonna allow Socket.IO serve
up our, the client side JavaScript

9
00:00:37.620 --> 00:00:41.780
that will be using here in a second
in addition to a few other bits.

10
00:00:41.780 --> 00:00:47.118
And I, next with that IO object
we're going to be listening for

11
00:00:47.118 --> 00:00:48.940
a connection event.

12
00:00:48.940 --> 00:00:54.048
So whenever a new web socket
connects this function is going to

13
00:00:54.048 --> 00:00:59.908
be called with that socket.
&gt;&gt; Kevin Whinnery: So, for

14
00:00:59.908 --> 00:01:09.630
now I'll just console that log,
&gt;&gt; Kevin Whinnery: So I can connect it.

15
00:01:12.090 --> 00:01:15.320
And we'll start doing some more
interesting stuff with that socket here in

16
00:01:15.320 --> 00:01:16.030
a minute.

17
00:01:16.030 --> 00:01:18.920
So that is the server side component.

18
00:01:18.920 --> 00:01:23.270
Now on the client side because though

19
00:01:23.270 --> 00:01:27.040
one of the things Socket.IO provides
us is like a dynamic script tag.

20
00:01:28.650 --> 00:01:32.510
So this route that I'm about
to type in the source here

21
00:01:32.510 --> 00:01:34.885
is actually gonna be
generated by Socket.IO.

22
00:01:34.885 --> 00:01:39.175
Cuz this isn't a route that we created, so

23
00:01:39.175 --> 00:01:44.440
it's just gonna be socket.io/socket.io.js.

24
00:01:44.440 --> 00:01:47.640
That's gonna load up
a Socket.IO JavaScript object for

25
00:01:47.640 --> 00:01:49.510
us to start working with
on the client side.

26
00:01:51.500 --> 00:01:55.100
And then in my script tag here, this
is where we'll write all the logic for

27
00:01:55.100 --> 00:01:56.570
our chat application.

28
00:01:56.570 --> 00:02:01.520
I'm just gonna create a new instance of
Socket.IO here on the client as well.

29
00:02:01.520 --> 00:02:04.503
We'll just call that socket and

30
00:02:04.503 --> 00:02:10.140
then we'll use the Windows
scoped.IO object to initialize

31
00:02:10.140 --> 00:02:15.237
it which is what we get when
we include that script tag.

32
00:02:15.237 --> 00:02:18.333
So I'll save that up, and
I'll kill my server and

33
00:02:18.333 --> 00:02:21.137
I'll actually run
the script with nodemon so

34
00:02:21.137 --> 00:02:27.243
we don't have to restart it every time.
&gt;&gt; Kevin Whinnery: And

35
00:02:27.243 --> 00:02:31.054
if we refresh the page, go back out here,
we should have our message,

36
00:02:31.054 --> 00:02:33.410
that the socket was connected.

37
00:02:33.410 --> 00:02:36.700
So now we have a connection
between the client and the server.

38
00:02:36.700 --> 00:02:40.910
And now we can start doing something
some interesting stuff with it.

39
00:02:40.910 --> 00:02:45.898
So,
&gt;&gt; Kevin Whinnery: The first

40
00:02:45.898 --> 00:02:49.680
bit that I think we'll do,
we'll start off on the client side.

41
00:02:49.680 --> 00:02:52.620
We can use the client side
socket connection to emit

42
00:02:52.620 --> 00:02:55.050
events that will be
received on the server.

43
00:02:55.050 --> 00:02:59.480
So I'm gonna say socket.emit('message').

44
00:03:01.520 --> 00:03:05.080
And in addition at Socket.IO,
maybe I'll just for

45
00:03:05.080 --> 00:03:09.810
good measure, grab a version of jQuery to
help me grab some stuff out of the dom.

46
00:03:11.570 --> 00:03:16.317
So for that message, I'm gonna
actually grab the current value of

47
00:03:16.317 --> 00:03:19.923
the,
&gt;&gt; Kevin Whinnery: Yeah,

48
00:03:19.923 --> 00:03:21.920
the current value of
the of the form field.

49
00:03:21.920 --> 00:03:27.407
So I'm going to emit a message and then,
so the message is kind of the event

50
00:03:27.407 --> 00:03:32.200
that other sockets can listen for
and the server can listen for.

51
00:03:32.200 --> 00:03:36.622
And the second argument is essentially
the data value that you wanna send along

52
00:03:36.622 --> 00:03:37.158
with it.

53
00:03:37.158 --> 00:03:43.888
So for the input of the chat,
&gt;&gt; Kevin Whinnery: Object,

54
00:03:43.888 --> 00:03:48.216
I'm just gonna grab
the current value of that.

55
00:03:48.216 --> 00:03:54.650
And that's gonna be enough logic
to emit the current value of that.

56
00:03:54.650 --> 00:03:58.348
We also wanna wrap that
in an event handler.

57
00:03:58.348 --> 00:04:02.027
So we have that send button, so

58
00:04:02.027 --> 00:04:09.238
on a click.
&gt;&gt; Kevin Whinnery: That's

59
00:04:09.238 --> 00:04:12.540
when we want to grab
the current value of that.

60
00:04:13.670 --> 00:04:18.070
And we'll emit that value
back to the server.

61
00:04:20.040 --> 00:04:28.530
And then we'll also reset the value of
like our local chat box back to no.

62
00:04:30.182 --> 00:04:34.321
So that'll be kind of the send
part of the equation here, and

63
00:04:34.321 --> 00:04:38.963
then back on the server to actually
listen for that incoming event.

64
00:04:38.963 --> 00:04:40.619
We're gonna listen for

65
00:04:40.619 --> 00:04:46.850
an event on that socket object that we
get when somebody connects to the server.

66
00:04:46.850 --> 00:04:52.878
So when that socket
receives a message event,

67
00:04:59.164 --> 00:05:00.831
&gt;&gt; Kevin Whinnery: We are going to execute

68
00:05:00.831 --> 00:05:06.359
this logic on the server and for now
we'll just acknowledge that we got it by

69
00:05:06.359 --> 00:05:11.440
writing that out to the console.
&gt;&gt; Kevin Whinnery: And

70
00:05:11.440 --> 00:05:17.440
again if everything went according
to plan, we'll send some messages.

71
00:05:19.810 --> 00:05:21.938
And hopefully out here, no!

72
00:05:21.938 --> 00:05:26.294
Missing handler console is not a function.

73
00:05:26.294 --> 00:05:31.154
Oops yeah, console.log that
would be a more effective thing

74
00:05:31.154 --> 00:05:34.838
to try.
&gt;&gt; Kevin Whinnery: So

75
00:05:34.838 --> 00:05:41.961
we'll send that.
&gt;&gt; Kevin Whinnery: And then here we go,

76
00:05:41.961 --> 00:05:46.369
we have some messages being emitted in
real time from the client to the server.

77
00:05:48.870 --> 00:05:51.550
Now we've implemented one half of this but

78
00:05:51.550 --> 00:05:57.720
what we haven't done is send this
out to any other connected client.

79
00:05:57.720 --> 00:06:03.820
So, what we can do when we want to send

80
00:06:03.820 --> 00:06:10.110
a message to every other socket that's
currently connected is use the IO object.

81
00:06:10.110 --> 00:06:14.126
This guy that we created here and

82
00:06:14.126 --> 00:06:19.510
use a method called emit to

83
00:06:19.510 --> 00:06:24.840
fire off a message on that object that
will be received by every client so.

84
00:06:24.840 --> 00:06:30.402
It's very similar actually to what we did
on the client side emitting that event.

85
00:06:30.402 --> 00:06:34.948
So we're going to emit,
a message event, and

86
00:06:34.948 --> 00:06:39.959
then we'll pass in,
I will just relay that message

87
00:06:39.959 --> 00:06:46.532
that we just got.
&gt;&gt; Kevin Whinnery: All right so,

88
00:06:46.532 --> 00:06:51.929
now after we emit that to every
connected socket up here on the client,

89
00:06:51.929 --> 00:06:56.776
we're gonna have another event
handler here so on that message

90
00:06:56.776 --> 00:07:04.144
event.
&gt;&gt; Kevin Whinnery: This

91
00:07:04.144 --> 00:07:08.620
is going to be fired every time a message
event is emitted from the server.

92
00:07:08.620 --> 00:07:13.404
And what we wanna do is on that
unordered list that we had,

93
00:07:13.404 --> 00:07:20.157
just append a list item to it.
&gt;&gt; Kevin Whinnery: So

94
00:07:20.157 --> 00:07:25.552
for that, what do we call that messages.

95
00:07:25.552 --> 00:07:28.662
We'll actually start by creating an li,

96
00:07:32.800 --> 00:07:37.955
&gt;&gt; Kevin Whinnery: Oops li=.

97
00:07:37.955 --> 00:07:39.014
Create li item and

98
00:07:39.014 --> 00:07:43.540
we'll set the text of that to be the
message that we got back from the server.

99
00:07:44.860 --> 00:07:49.397
And then we will append that list item to

100
00:07:49.397 --> 00:07:54.419
the messages.
&gt;&gt; Kevin Whinnery: So now what should be

101
00:07:54.419 --> 00:07:59.134
happening is we'll emit a message from the
client, it will be received on the server,

102
00:07:59.134 --> 00:08:03.540
and then the server will emit that message
back to every other connected client.

103
00:08:04.630 --> 00:08:07.400
So let's reload and
see if that is indeed what we

104
00:08:07.400 --> 00:08:13.976
experience.
&gt;&gt; Kevin Whinnery: So

105
00:08:13.976 --> 00:08:20.040
looks like we have a very crappy real time
chat application running in the browser.

106
00:08:20.040 --> 00:08:25.080
And now one other tool that is
a constant companion for me, and for

107
00:08:25.080 --> 00:08:31.510
many other developers that work
with web hooks or have to expose

108
00:08:31.510 --> 00:08:35.950
their local development machines to the
Internet is a little tool called ngrok.

109
00:08:38.125 --> 00:08:42.215
And ngrok basically
allows my laptop to get

110
00:08:42.215 --> 00:08:46.211
a a publicly addressable
URL on the Internet.

111
00:08:46.211 --> 00:08:51.265
So this'll allow all of you to
test my application along with me.

112
00:08:51.265 --> 00:08:59.290
So this tool I'll call ngrok http and
we'll want to expose port 3,000.

113
00:08:59.290 --> 00:09:01.780
And then I'll reserve the subdomain

114
00:09:04.310 --> 00:09:08.530
of frontendmasters.

115
00:09:11.130 --> 00:09:15.228
So now,
if you go to frontendmasters.ngrok.io,

116
00:09:19.596 --> 00:09:20.542
&gt;&gt; Kevin Whinnery: We should see that

117
00:09:20.542 --> 00:09:26.960
interface that we just saw.
&gt;&gt; Kevin Whinnery: And

118
00:09:26.960 --> 00:09:29.330
I'll start sending some messages.

119
00:09:29.330 --> 00:09:32.690
And hopefully some of you out there will

120
00:09:32.690 --> 00:09:35.040
start sending some messages
back to us as well.

121
00:09:36.390 --> 00:09:38.980
Try to keep it PG13,
this is a family show.

122
00:09:38.980 --> 00:09:42.800
All right, so
we got some folks coming in here.

123
00:09:42.800 --> 00:09:49.630
So there we have, again,
the magic of Socket.IO for all to see.

124
00:09:50.940 --> 00:09:54.220
Certainly that I'm sure
folks have seen before.

125
00:09:54.220 --> 00:09:59.300
But in just a tiny amount of code,
a few lines in the client.

126
00:09:59.300 --> 00:10:03.647
A few lines on the server, we are able
to create this real time interface for

127
00:10:03.647 --> 00:10:04.758
our application.

