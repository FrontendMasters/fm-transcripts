WEBVTT

1
00:00:00.000 --> 00:00:03.784
[MUSIC]

2
00:00:03.784 --> 00:00:07.888
&gt;&gt; Kevin Whinnery: So rather than tell you
about it, I thought I would write a little

3
00:00:07.888 --> 00:00:12.981
code to kind of demonstrate some of the
key features of the framework that we're

4
00:00:12.981 --> 00:00:18.106
already taking advantage of in the TODO
application in kind of a smaller chunk.

5
00:00:18.106 --> 00:00:26.920
I'll drop the JS fiddle here into the chat
after we get through things here.

6
00:00:26.920 --> 00:00:31.850
But I'm going to write a little
bit of code here in this fiddle.

7
00:00:31.850 --> 00:00:37.522
I'm loading in View from NPMCDN.com
which is actually a nifty tool for

8
00:00:37.522 --> 00:00:41.964
loading in NPM modules into
your In your front end code,

9
00:00:41.964 --> 00:00:48.020
especially in situations like this
where you're whipping up a fiddle.

10
00:00:48.020 --> 00:00:52.540
In any case this is all
I've started off with

11
00:00:52.540 --> 00:00:56.630
here is having View loaded
in the global window scope.

12
00:00:56.630 --> 00:00:59.570
And then I've got a HTML element that I'm

13
00:00:59.570 --> 00:01:02.850
gonna essentially buy
my view component too.

14
00:01:04.310 --> 00:01:09.155
I'm gonna create a new view and
what I'm gonna endeavor

15
00:01:09.155 --> 00:01:14.000
to do is to create a Todo list
interface which will show up

16
00:01:14.000 --> 00:01:18.764
in the lower right hand corner
of the screen over here.

17
00:01:18.764 --> 00:01:21.864
When I create a component,
a view component,

18
00:01:21.864 --> 00:01:25.057
I'm going to bind it to
an individual element.

19
00:01:25.057 --> 00:01:28.200
And here I pass in a selector for
that component element.

20
00:01:30.000 --> 00:01:34.970
And the first thing I'm probably gonna
want for my View is some kind of

21
00:01:34.970 --> 00:01:40.990
input like a text field
input that's going to,

22
00:01:40.990 --> 00:01:44.811
it's gonna be the place where I
actually type in my TODO list item.

23
00:01:45.930 --> 00:01:47.670
And then I'll have a button.

24
00:01:47.670 --> 00:01:51.230
I'll make this a little bigger.

25
00:01:51.230 --> 00:01:55.512
I'll have a button that you'll click
to actually add the TODO item.

26
00:01:58.151 --> 00:02:00.786
&gt;&gt; Kevin Whinnery: And then I'll probably

27
00:02:00.786 --> 00:02:06.059
have a list here of all
the items on my TODO list.

28
00:02:07.620 --> 00:02:11.480
If I reload the page I've
got my user interface but

29
00:02:11.480 --> 00:02:15.480
it doesn't actually do anything just yet.

30
00:02:15.480 --> 00:02:22.280
The first bit that I'm gonna do is declare
a data attribute of my View component.

31
00:02:23.380 --> 00:02:26.920
This data attribute when you
declare it upfront like this

32
00:02:28.130 --> 00:02:32.920
basically allows a view to monitor
these properties of this data object.

33
00:02:32.920 --> 00:02:38.970
If you make any changes to
the properties of this object,

34
00:02:38.970 --> 00:02:41.770
those will update any
user interface elements.

35
00:02:41.770 --> 00:02:44.990
They're bound to those attributes.

36
00:02:44.990 --> 00:02:50.870
In this case, I'm gonna create
a data element for need TODO's.

37
00:02:50.870 --> 00:02:54.360
And maybe I'll seed it with one to
do list item like get the milk or

38
00:02:54.360 --> 00:02:58.270
something like that.

39
00:03:02.000 --> 00:03:03.458
So I've got whoops,
that's not what I wanted.

40
00:03:03.458 --> 00:03:06.640
I wanted that.

41
00:03:06.640 --> 00:03:11.080
I've got a View component
with some basic data in it.

42
00:03:11.080 --> 00:03:16.410
And now I need to render that
out to my user interface here.

43
00:03:16.410 --> 00:03:21.650
The way in which you do that in
View is with an HTML directive,

44
00:03:22.900 --> 00:03:28.350
which most of which for
ViewJS are prefixed with a [INAUDIBLE].

45
00:03:28.350 --> 00:03:33.740
And there's a directive called
Vfor which will loop over an array

46
00:03:35.400 --> 00:03:40.120
within your data model and
output some template based on that.

47
00:03:40.120 --> 00:03:44.990
For TODO in the TODO's
which is this element of my

48
00:03:44.990 --> 00:03:49.640
data object down here I'm
gonna render a list item.

49
00:03:49.640 --> 00:03:56.240
And then gonna use the double mustaches
to output some data from my model And

50
00:03:56.240 --> 00:04:01.130
then going just output to do.text.

51
00:04:01.130 --> 00:04:04.480
And when I read that I
now get my list updating.

52
00:04:07.300 --> 00:04:11.160
Now I need to wire up my user
interface here such that

53
00:04:11.160 --> 00:04:13.760
I can enter a new to do
list item click the button.

54
00:04:13.760 --> 00:04:15.550
And something's going to happen.

55
00:04:15.550 --> 00:04:17.900
So for
that I'm gonna do a couple of things.

56
00:04:17.900 --> 00:04:22.640
I'm going to bind the value
of the input field

57
00:04:22.640 --> 00:04:27.080
to a property of my of my
underlying data model.

58
00:04:27.080 --> 00:04:33.190
And the way that I do that in view
is with this V model directive.

59
00:04:33.190 --> 00:04:38.440
And I'm gonna say that I want to
bind the value of this input field

60
00:04:38.440 --> 00:04:44.000
with a model field called newTodo,
which doesn't yet exist.

61
00:04:44.000 --> 00:04:49.420
I'm going to come down here and
add that to my data model.

62
00:04:50.680 --> 00:04:53.379
And I'll initialize that
to just be an empty string.

63
00:04:56.520 --> 00:05:01.985
And then, to actually make it such
that I can add newTodo items,

64
00:05:01.985 --> 00:05:05.790
I gotta have, I have to make this
button do something as well.

65
00:05:05.790 --> 00:05:11.450
There's also a directive for that for
binding event handlers on your HTML and

66
00:05:11.450 --> 00:05:13.154
that directive is called V-on.

67
00:05:14.220 --> 00:05:19.197
And then you after a colon you can
pass in the name of a that you're

68
00:05:19.197 --> 00:05:21.004
interested in bindings.

69
00:05:21.004 --> 00:05:25.633
So V-on click,
is going to be a model object or

70
00:05:25.633 --> 00:05:30.160
a model method that we
haven't defined yet.

71
00:05:30.160 --> 00:05:33.210
I will just call.

72
00:05:33.210 --> 00:05:36.330
Now we need to go down
here back to our component

73
00:05:36.330 --> 00:05:40.480
in addition to tracking the element and
the data associated with it.

74
00:05:40.480 --> 00:05:44.836
We're gonna create some
methods on our object.

75
00:05:44.836 --> 00:05:46.250
And we're gonna create one called ADD.

76
00:05:46.250 --> 00:05:50.950
And what that ADD function is gonna do.

77
00:05:52.990 --> 00:05:59.560
It's going to push a new item
into our list of TODO's.

78
00:05:59.560 --> 00:06:02.850
So in this case,

79
00:06:02.850 --> 00:06:08.224
the text is going to be
the current value of this.newTodo.

80
00:06:09.870 --> 00:06:11.780
We're gonna add that
to our list of TODO's.

81
00:06:11.780 --> 00:06:16.383
And then we'll also blank
out our new TODO item,

82
00:06:16.383 --> 00:06:22.818
setting that back to a blank string.
&gt;&gt; Kevin Whinnery: So

83
00:06:22.818 --> 00:06:28.156
if I run that I should be
able to come over here and

84
00:06:28.156 --> 00:06:32.040
say new to do item and click Enter.

85
00:06:32.040 --> 00:06:37.330
And it looks like by and large,
my little TODO list is working.

86
00:06:37.330 --> 00:06:42.480
So, again what I think is
really neat about this is

87
00:06:42.480 --> 00:06:46.460
with what is a very small amount of code,
and

88
00:06:46.460 --> 00:06:51.840
not having to change how I render my
page very much, I get this really

89
00:06:51.840 --> 00:06:57.390
powerful data binding mechanism and
event handling in this component,

90
00:06:57.390 --> 00:07:02.430
which is pretty much completely
decoupled from my HTML markup.

91
00:07:03.530 --> 00:07:05.883
There's a lot more that View can do.

92
00:07:05.883 --> 00:07:10.821
For the exercise that I'm
about to turn you loose on,

93
00:07:10.821 --> 00:07:16.532
you're gonna want to definitely
check out View's excellent

94
00:07:16.532 --> 00:07:23.557
guide which kind of takes you through
a lot of the core concepts you're going

95
00:07:23.557 --> 00:07:28.870
to need to learn get up to
speed I'm developing with you.

96
00:07:28.870 --> 00:07:32.950
And as always we like to bring up
the alternative slide here because

97
00:07:32.950 --> 00:07:37.180
there's always a million ways to do
everything in the in the JavaScript world.

98
00:07:37.180 --> 00:07:43.140
We had to kind of went over them all
of them are great alternatives to use.

99
00:07:43.140 --> 00:07:48.720
I explained some of the reasoning behind
like why I am kind of high on View because

100
00:07:48.720 --> 00:07:54.330
I feel like the value that it provides
me is very high relative to what it asks

101
00:07:54.330 --> 00:07:57.240
of me in terms of how I
structure my application,

102
00:07:57.240 --> 00:08:00.790
in terms of how many
dependencies I need to load in.

103
00:08:00.790 --> 00:08:05.490
So I think View is a nice
combination of features and weight.

104
00:08:05.490 --> 00:08:09.630
But these other frameworks
up here are also awesome.

105
00:08:09.630 --> 00:08:11.780
React is taking over the world.

106
00:08:11.780 --> 00:08:14.790
React Native is a really
cool project especially.

107
00:08:15.810 --> 00:08:17.770
Ember does a lot of things really well.

108
00:08:17.770 --> 00:08:24.810
Backbone, it was my previous go to for
a lighter weight MVC type thing.

109
00:08:24.810 --> 00:08:27.190
So all of these, totally awesome.

110
00:08:27.190 --> 00:08:29.440
You should use them if you like them,
if it makes you happy.

