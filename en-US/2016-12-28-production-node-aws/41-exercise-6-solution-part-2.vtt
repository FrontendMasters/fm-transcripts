WEBVTT

1
00:00:00.000 --> 00:00:03.990
[MUSIC]

2
00:00:03.990 --> 00:00:07.986
&gt;&gt; Kevin Whinnery: So
that was the fix that we had submitted for

3
00:00:07.986 --> 00:00:13.750
completing that particular issue,
and that was awesome.

4
00:00:13.750 --> 00:00:16.305
It looks like we might
have some other ones

5
00:00:16.305 --> 00:00:20.122
here.
&gt;&gt; Kevin Whinnery: Okay, so

6
00:00:20.122 --> 00:00:24.468
we have a,
&gt;&gt; Kevin Whinnery: Slightly

7
00:00:24.468 --> 00:00:25.530
different one here.

8
00:00:25.530 --> 00:00:31.810
It looks like this was
maybe not the theme piece.

9
00:00:31.810 --> 00:00:34.380
So we can actually do
that together right now,

10
00:00:34.380 --> 00:00:39.590
since I don't think we have a pull request
for the theme challenge specifically.

11
00:00:39.590 --> 00:00:45.241
So the other issue that
we that we had open

12
00:00:45.241 --> 00:00:52.058
was the ability to change
the current CSS class of

13
00:00:52.058 --> 00:00:57.870
the component.
&gt;&gt; Kevin Whinnery: Let's

14
00:00:57.870 --> 00:01:02.656
see here.
&gt;&gt; Kevin Whinnery: Based on some

15
00:01:02.656 --> 00:01:07.582
kind of selector, or a radio button,
or something that would

16
00:01:07.582 --> 00:01:13.390
indicate that we wanna change
the current theme of the object.

17
00:01:13.390 --> 00:01:17.250
So let's go ahead and
implement that here together.

18
00:01:17.250 --> 00:01:22.200
So at the end of the day,
what we'd want to do,

19
00:01:22.200 --> 00:01:28.000
here is the the todoapp section, which is
the container for the entire interface.

20
00:01:29.070 --> 00:01:36.671
And if we look at our
todo controller here,

21
00:01:36.671 --> 00:01:41.070
the element that we
are binding to is this todoapp,

22
00:01:41.070 --> 00:01:45.022
which I'm sure many of
you already figured out.

23
00:01:45.022 --> 00:01:47.960
Let me back out the changes here,
cuz I haven't done that.

24
00:01:49.060 --> 00:01:53.640
So what we want to do is
conditionally add a class

25
00:01:56.360 --> 00:02:02.590
to this section that kind of
contains all of our component.

26
00:02:02.590 --> 00:02:06.909
Based on the property of a View model that
we'll update through some kind of user

27
00:02:06.909 --> 00:02:08.202
interface component.

28
00:02:08.202 --> 00:02:17.450
So the way that View provides to
do this is a couple of things.

29
00:02:17.450 --> 00:02:22.530
One thing you could do is you could
have a Mustache template here

30
00:02:22.530 --> 00:02:27.900
which will put the value of a View model

31
00:02:27.900 --> 00:02:34.280
property directly into the class
list of the element here.

32
00:02:34.280 --> 00:02:39.740
So I could have a themeClass

33
00:02:39.740 --> 00:02:44.910
like View model property, and I could
drop it directly in the class list there.

34
00:02:44.910 --> 00:02:52.660
The other thing that I can do,
is I can use a bind directive.

35
00:02:52.660 --> 00:02:56.360
Which is a little bit more flexible
if you have to do complex things with

36
00:02:56.360 --> 00:03:01.240
the classes that you're adding
based on the state of the model.

37
00:03:01.240 --> 00:03:09.418
So one of the ways that we have to do
that is with this v-bind directive.

38
00:03:09.418 --> 00:03:16.224
We can bind the class of that object to
be the result of an array of properties,

39
00:03:16.224 --> 00:03:21.879
or of an object with properties
that we can toggle true or false,

40
00:03:21.879 --> 00:03:27.030
indicating whether or
not that class should be selected.

41
00:03:27.030 --> 00:03:32.190
So in this case, I'll pass in an array
of potential model properties.

42
00:03:32.190 --> 00:03:36.995
In this case, I'll just call it dark,
because by default

43
00:03:36.995 --> 00:03:42.294
we'll assume that the light theme
is essentially the default,

44
00:03:42.294 --> 00:03:45.531
and just add some additional styles for

45
00:03:45.531 --> 00:03:50.329
the dark theme.
&gt;&gt; Kevin Whinnery: So

46
00:03:50.329 --> 00:03:55.918
what we're gonna, excuse we'll do that,
we'll actually just call that theme.

47
00:03:55.918 --> 00:04:02.280
So we'll be setting up property
based on the View model.

48
00:04:02.280 --> 00:04:05.860
So now I think that's pretty much all
we're gonna have to do here in the markup.

49
00:04:05.860 --> 00:04:08.080
If we go to the into the actual view,

50
00:04:08.080 --> 00:04:12.310
we're gonna add another
property called theme.

51
00:04:14.200 --> 00:04:18.280
And this is actually where we'll set
the default, so the CSS theme for

52
00:04:18.280 --> 00:04:22.360
light will be the value by default.

53
00:04:22.360 --> 00:04:25.920
Or we could actually not have
a light theme class at all, and

54
00:04:25.920 --> 00:04:27.580
just leave it empty.

55
00:04:27.580 --> 00:04:29.804
But we'll have a light theme class,

56
00:04:29.804 --> 00:04:33.838
just in case we decide we wanna add
some properties for that later.

57
00:04:33.838 --> 00:04:37.115
So now what we need to do,
actually I lied,

58
00:04:37.115 --> 00:04:40.680
we do need to go back to
the markup a little bit.

59
00:04:43.330 --> 00:04:48.270
So down at the bottom here,
at the section that has

60
00:04:48.270 --> 00:04:52.990
the filters,
we'll do something just quick and dirty.

61
00:04:52.990 --> 00:04:58.300
There's a few ways you could do this,
you could do like an input radio button.

62
00:05:00.740 --> 00:05:05.602
Which maybe I will do right now,
input radio

63
00:05:05.602 --> 00:05:10.464
with a name of a theme,
and a value of, say,

64
00:05:10.464 --> 00:05:15.701
light.
&gt;&gt; Kevin Whinnery: And

65
00:05:15.701 --> 00:05:23.348
we'll default that to checked.
&gt;&gt; Kevin Whinnery: And

66
00:05:23.348 --> 00:05:28.154
in addition,
we're going to bind that to that theme

67
00:05:28.154 --> 00:05:33.690
property that we just created.
&gt;&gt; Kevin Whinnery: So

68
00:05:33.690 --> 00:05:36.660
that's gonna be our radio option for
the light theme.

69
00:05:36.660 --> 00:05:39.630
And then we're gonna do
something similar for

70
00:05:39.630 --> 00:05:45.068
the dark theme.
&gt;&gt; Kevin Whinnery: Although this time,

71
00:05:45.068 --> 00:05:47.438
it's not going to be checked, and

72
00:05:47.438 --> 00:05:52.561
the value is going to be dark.
&gt;&gt; Kevin Whinnery: So

73
00:05:52.561 --> 00:05:59.270
we've updated our view model to track
this new property called theme.

74
00:05:59.270 --> 00:06:03.260
We have a little bit of user interface
here to allow people to select a radio

75
00:06:03.260 --> 00:06:09.504
button based on their current preference.

76
00:06:09.504 --> 00:06:12.500
It's gonna start updating the model,

77
00:06:12.500 --> 00:06:17.320
which should start toggling
this class up here at the top.

78
00:06:19.150 --> 00:06:22.326
So let's fire that up,
make sure that that worked.

79
00:06:31.857 --> 00:06:32.457
&gt;&gt; Kevin Whinnery: And again,

80
00:06:32.457 --> 00:06:34.317
because I was spamming my database,

81
00:06:34.317 --> 00:06:37.200
we're gonna have a long way
to scroll down to the bottom.

82
00:06:38.320 --> 00:06:43.176
But there is our light theme and
our dark theme,

83
00:06:43.176 --> 00:06:49.500
which doesn't seem to be updating
the way that I had thought.

84
00:06:56.181 --> 00:06:57.583
&gt;&gt; Kevin Whinnery: Let's see here,

85
00:06:57.583 --> 00:07:03.629
name theme, value dark.
&gt;&gt; Kevin Whinnery: Actually,

86
00:07:03.629 --> 00:07:05.570
you know what?

87
00:07:05.570 --> 00:07:09.840
This is gonna change that to be
a Boolean and rather than a string.

88
00:07:09.840 --> 00:07:14.377
So that's not exactly what I want in this

89
00:07:14.377 --> 00:07:19.996
instance.
&gt;&gt; Kevin Whinnery: All

90
00:07:19.996 --> 00:07:25.080
right.
&gt;&gt; Kevin Whinnery: What

91
00:07:25.080 --> 00:07:26.439
did I goof up there?

92
00:07:26.439 --> 00:07:27.149
Let's see

93
00:07:35.997 --> 00:07:36.720
&gt;&gt; Kevin Whinnery: Yeah, I'm not sure.

94
00:07:36.720 --> 00:07:39.680
That kinda matches my node over there.

95
00:07:39.680 --> 00:07:40.920
So I'm gonna have to dig into that.
&gt;&gt; Speaker 2: [INAUDIBLE] it

96
00:07:40.920 --> 00:07:42.616
needs a checkbox.
&gt;&gt; Speaker 3: Does it need to

97
00:07:42.616 --> 00:07:46.343
be checkboxed instead of radio?
&gt;&gt; Kevin Whinnery: No, I think the radio

98
00:07:46.343 --> 00:07:51.397
is what I want, because I only want one of
these to be selected at any given time.

99
00:07:51.397 --> 00:07:52.363
&gt;&gt; Speaker 2: Yeah, good point.

100
00:07:52.363 --> 00:07:55.283
&gt;&gt; Kevin Whinnery: What is weirding me out

101
00:07:55.283 --> 00:08:01.440
a little bit is the fact
that I can't update it.

102
00:08:01.440 --> 00:08:03.490
It could be some z-indexing stuff.

103
00:08:03.490 --> 00:08:08.550
I'll just, as a Hail Mary, try this and
then I will leave you alone to debug this.

104
00:08:08.550 --> 00:08:15.010
I do wanna show you how this works though,
so I'll do this over the break.

105
00:08:15.010 --> 00:08:20.499
All right, so there, I think it
might have been like a z-indexing

106
00:08:20.499 --> 00:08:25.220
issue in the CSS,
cuz I am able to start it, click it now.

107
00:08:25.220 --> 00:08:31.080
So now, if everything worked according
to plan, if I inspect this component.

108
00:08:35.011 --> 00:08:37.163
&gt;&gt; Kevin Whinnery: Open up the body,

109
00:08:37.163 --> 00:08:40.605
there is the current class,

110
00:08:40.605 --> 00:08:46.105
and.
&gt;&gt; Kevin Whinnery: That's

111
00:08:46.105 --> 00:08:48.000
not exactly doing what
I thought it would do.

112
00:08:48.000 --> 00:08:55.787
Let's see, value dark.
&gt;&gt; Kevin Whinnery: All right,

113
00:08:55.787 --> 00:09:01.620
so that binding isn't working
exactly the way I wanted here.

114
00:09:01.620 --> 00:09:04.660
I thought that,
I'm gonna have to figure out why it is.

115
00:09:06.215 --> 00:09:07.985
Man, that is a bummer.

116
00:09:07.985 --> 00:09:12.815
But the idea is,
we are going to be toggling this property.

117
00:09:12.815 --> 00:09:17.805
That's gonna be updating
the class on that DOM element,

118
00:09:17.805 --> 00:09:22.340
and then we can add CSS
styles to make that work.

119
00:09:22.340 --> 00:09:25.825
So during the during the next
break I'll debug that.

120
00:09:25.825 --> 00:09:31.540
I'll check my gist that I had set up for
that, figure out why that's not working,

121
00:09:31.540 --> 00:09:34.880
and we'll cover that when
we when we come back.

122
00:09:34.880 --> 00:09:39.900
But the next piece that we are gonna
tackle was starting to dig into

123
00:09:39.900 --> 00:09:41.550
socket I/O little bit.

124
00:09:41.550 --> 00:09:43.713
Yes, question.
&gt;&gt; Speaker 4: A quick question about,

125
00:09:43.713 --> 00:09:46.915
this a little a while ago, but
what about the allDone input?

126
00:09:46.915 --> 00:09:49.381
Did you mean?
&gt;&gt; Kevin Whinnery: Done input.

127
00:09:49.381 --> 00:09:51.422
&gt;&gt; Speaker 4: They're just asking,

128
00:09:51.422 --> 00:09:54.470
what about the allDone input?
&gt;&gt; Kevin Whinnery: Yeah,

129
00:09:54.470 --> 00:09:55.800
so.
&gt;&gt; Speaker 4: I can

130
00:09:55.800 --> 00:09:58.487
ask them to clarify if.
&gt;&gt; Kevin Whinnery: Yeah what is

131
00:09:58.487 --> 00:10:02.823
the allDone,
what do we mean by the allDone input?

132
00:10:07.606 --> 00:10:08.624
&gt;&gt; Speaker 4: I'll ask them.

133
00:10:08.624 --> 00:10:12.140
&gt;&gt; Kevin Whinnery: Okay.

134
00:10:12.140 --> 00:10:13.750
&gt;&gt; Speaker 5: The main section,

135
00:10:13.750 --> 00:10:17.591
right above the to do's header is
bound to an allDone View model.

136
00:10:19.050 --> 00:10:24.172
Line 25, I think.
&gt;&gt; Speaker 4: I think maybe,

137
00:10:24.172 --> 00:10:27.705
is that the completed stuff?
&gt;&gt; Kevin Whinnery: View model,

138
00:10:27.705 --> 00:10:30.135
allDone.
&gt;&gt; Speaker 4: Alt toggle all.

139
00:10:30.135 --> 00:10:32.009
It's if you you wanna mark
all of them as [CROSSTALK].

140
00:10:32.009 --> 00:10:32.550
&gt;&gt; Kevin Whinnery: Yeah, so

141
00:10:32.550 --> 00:10:36.541
that is essentially, I think that's
gonna be like a Boolean toggle,

142
00:10:36.541 --> 00:10:39.993
let's take a look at that.
&gt;&gt; Speaker 4: Maybe it's just saying that

143
00:10:39.993 --> 00:10:43.443
it's not saving to the database.
&gt;&gt; Kevin Whinnery: The allDone is not

144
00:10:43.443 --> 00:10:45.090
saving to the database.

145
00:10:47.790 --> 00:10:49.410
That's a good question.

146
00:10:49.410 --> 00:10:53.540
I'm not sure off the dome
what that's supposed to do,

147
00:10:53.540 --> 00:10:59.280
cuz the allDone, this is code that I
took from the To Do MVC implementation

148
00:11:00.590 --> 00:11:06.209
is not actually a model object.

149
00:11:06.209 --> 00:11:06.784
You know what it is?

150
00:11:06.784 --> 00:11:12.110
I think it's probably a computed property.

151
00:11:12.110 --> 00:11:17.390
So allDone is this computed property here,
which has a getter and a setter.

152
00:11:18.620 --> 00:11:21.350
So it can be treated
as if it is a property

153
00:11:22.700 --> 00:11:25.010
of the View model associated
with the component.

154
00:11:25.010 --> 00:11:27.550
And then when it's called in the view,

155
00:11:27.550 --> 00:11:31.199
like it is over here,
the get function is called.

156
00:11:32.670 --> 00:11:39.270
So this check box is
toggled based on whether or

157
00:11:39.270 --> 00:11:45.060
not all of the current to do
items have been completed.

158
00:11:45.060 --> 00:11:46.337
So that's where that's coming from,

159
00:11:46.337 --> 00:11:52.880
it's one of these computed properties.
&gt;&gt; Speaker 6: [COUGH] Did

160
00:11:52.880 --> 00:11:59.180
want to save all of them after doing that,
you'd just update this for each call back

161
00:11:59.180 --> 00:12:02.590
to mark them as modified and [INAUDIBLE].
&gt;&gt; Kevin Whinnery: Yes,

162
00:12:02.590 --> 00:12:04.312
yes that's what we would do.

163
00:12:04.312 --> 00:12:06.795
So you would, in addition to completed for
each of them,

164
00:12:06.795 --> 00:12:10.020
you would also mark them as modified,
and they would all go to the server.

165
00:12:11.980 --> 00:12:13.270
Based on the current implementation.

166
00:12:15.480 --> 00:12:19.810
So the setter is what happens on change.

167
00:12:19.810 --> 00:12:22.840
So if I were to click this check box,

168
00:12:22.840 --> 00:12:27.190
then that's when the setter
logic gets executed.

