WEBVTT

1
00:00:00.000 --> 00:00:03.662
[MUSIC]

2
00:00:03.662 --> 00:00:07.602
&gt;&gt; Kevin Whinnery: But again, the goal
is to get a 10,000 foot view of what

3
00:00:07.602 --> 00:00:10.617
a production node code
base could look like and

4
00:00:10.617 --> 00:00:13.416
some of the tools that you're gonna need.

5
00:00:13.416 --> 00:00:18.308
So in order to do that, I did put together
a sample application that is based on

6
00:00:18.308 --> 00:00:22.827
a sample application that you've
seen probably 100 times before,

7
00:00:22.827 --> 00:00:24.920
which is TodoMVC.

8
00:00:24.920 --> 00:00:28.550
I called it TodoMVC++.

9
00:00:28.550 --> 00:00:31.621
Thank you, I'll show myself out.

10
00:00:31.621 --> 00:00:35.910
But what the application does
is not the important bit.

11
00:00:35.910 --> 00:00:40.822
Basically what this thing is going to do
is present a rich front end that shows

12
00:00:40.822 --> 00:00:42.762
a To Do list that you can edit.

13
00:00:42.762 --> 00:00:46.963
Most of the time this TodoMVC application
just lives on the client side and

14
00:00:46.963 --> 00:00:49.690
persists stuff to local storage.

15
00:00:49.690 --> 00:00:55.640
We've extended it to actually store
those todo list items in a database

16
00:00:55.640 --> 00:00:59.838
which is driven by
an express based API layer.

17
00:00:59.838 --> 00:01:04.917
So the what of the application is not so
not as important as the how,

18
00:01:04.917 --> 00:01:09.747
so that's what we're going to
be focusing most of our time on.

19
00:01:09.747 --> 00:01:13.810
So that's why I went with a sample
application that we already understand.

20
00:01:13.810 --> 00:01:16.710
So that we can focus on
the layout of the project, and

21
00:01:16.710 --> 00:01:19.640
how we go about our business
of building the project.

22
00:01:19.640 --> 00:01:23.786
We will dive into a few specific details,
especially tomorrow when we talk about

23
00:01:23.786 --> 00:01:30.810
ViewJS and how ViewJS handles rich front
end development tasks, things like that.

24
00:01:30.810 --> 00:01:33.385
But we probably won't go
too deep into any one tool.

25
00:01:33.385 --> 00:01:36.080
Again, the focus is on
that 10,000 foot view.

26
00:01:36.080 --> 00:01:39.990
It'll mirror the techniques that you might
really use in your NodeJS application,

27
00:01:39.990 --> 00:01:43.550
I'm sure you'll riff on
what we put forward.

28
00:01:43.550 --> 00:01:47.460
It also doesn't do everything
that you might do in production.

29
00:01:48.850 --> 00:01:52.712
Just at some point you have to draw
the line in a learning experience like

30
00:01:52.712 --> 00:01:53.355
this one, so

31
00:01:53.355 --> 00:01:57.591
there's stuff that you're gonna wanna do
in production that you won't see in here.

32
00:01:57.591 --> 00:02:02.546
So we're not going to do the DNS
configuration to route a domain to our

33
00:02:02.546 --> 00:02:05.830
elastic load balancer instance.

34
00:02:05.830 --> 00:02:09.050
We don't implement cache busting

35
00:02:09.050 --> 00:02:13.830
file names based on the hashes of CSS and
JavaScript content.

36
00:02:13.830 --> 00:02:19.020
So there's definitely areas in which we
can go further in our road to production.

37
00:02:19.020 --> 00:02:22.414
But this is kind of a baseline
that you can use to build

38
00:02:22.414 --> 00:02:24.510
out those other things as well.

39
00:02:24.510 --> 00:02:27.870
It's going to do most of the big
things the way that you're

40
00:02:27.870 --> 00:02:29.950
probably gonna want to approach it.

41
00:02:29.950 --> 00:02:34.740
The code is structured using
the Google JavaScript style guide.

42
00:02:34.740 --> 00:02:37.100
I don't know if it's the best one,
but it's the one I use, and

43
00:02:37.100 --> 00:02:41.290
as long as you have a style guide
I feel like that's pretty good.

44
00:02:41.290 --> 00:02:45.780
And it also combines a set of
technologies that I use personally, and

45
00:02:45.780 --> 00:02:47.290
have used for a long time.

46
00:02:47.290 --> 00:02:51.080
And again, there might be some
that you prefer over another.

47
00:02:51.080 --> 00:02:55.580
Maybe you think Happy is better than
Express, and maybe that's true but

48
00:02:55.580 --> 00:02:59.280
this is a set of technologies
that work together pretty well.

49
00:02:59.280 --> 00:03:02.500
And I invite you to riff
on that as we go through.

