WEBVTT

1
00:00:00.000 --> 00:00:03.841
[MUSIC]

2
00:00:03.841 --> 00:00:05.880
&gt;&gt; Kevin Whinnery: We did a little
bit of hacking on Express.

3
00:00:05.880 --> 00:00:10.300
Now we're gonna move into a part of
the stack that we've already been using.

4
00:00:10.300 --> 00:00:14.420
But we're gonna try to dive
in a little bit to understand

5
00:00:14.420 --> 00:00:17.810
better how these things work and
what they can do for us.

6
00:00:17.810 --> 00:00:21.110
We've been executing these commands,
these migration commands,

7
00:00:21.110 --> 00:00:24.100
these Grunt commands and

8
00:00:24.100 --> 00:00:29.420
these are provided by some of the build
tooling that we have in this project.

9
00:00:29.420 --> 00:00:34.910
Now, build tooling, there's a lot
of different choices out there,

10
00:00:34.910 --> 00:00:41.229
but the two that I keep coming
back to are npm scripts and Grunt.

11
00:00:41.229 --> 00:00:43.785
And Grunt tasks in general.

12
00:00:43.785 --> 00:00:46.280
And I'll kinda take you through
what each of these things do.

13
00:00:46.280 --> 00:00:53.132
So npm scripts are commands that
you register in the package.json

14
00:00:53.132 --> 00:00:58.500
of your node project and
can execute arbitrary shell commands.

15
00:00:58.500 --> 00:01:02.280
So it's essentially
like adding aliases for

16
00:01:02.280 --> 00:01:05.490
commands that you could run
from the command line yourself.

17
00:01:06.506 --> 00:01:11.270
However there is a couple things
that you that you get for

18
00:01:11.270 --> 00:01:15.840
free when you do an npm script like this.

19
00:01:15.840 --> 00:01:20.720
Probably the most notable one is that
if you have npm installed locally,

20
00:01:20.720 --> 00:01:24.630
any modules which should
be command line utilities,

21
00:01:24.630 --> 00:01:27.822
that have some kind of
command line option.

22
00:01:27.822 --> 00:01:32.668
Those utilities will be added
to your system path when

23
00:01:32.668 --> 00:01:36.240
you run a script through an npm script.

24
00:01:36.240 --> 00:01:40.310
And we'll see what we mean
by that here in a moment.

25
00:01:40.310 --> 00:01:45.458
It's also a conventional way of
interacting with node projects.

26
00:01:45.458 --> 00:01:50.843
So the npm defines a set of,
I don't know, about 15 different

27
00:01:50.843 --> 00:01:57.153
scripts that it sort of expects to
possibly be present in a package.json.

28
00:01:57.153 --> 00:02:03.675
There's an npm start, an npm test,
an npm after install.

29
00:02:03.675 --> 00:02:08.709
There's a few like lifecycle hooks and
other bits that npm will sort

30
00:02:08.709 --> 00:02:13.932
of conventionally expect to possibly
be present in a package.json.

31
00:02:13.932 --> 00:02:18.173
So by conforming to that convention,
another node developer who may or

32
00:02:18.173 --> 00:02:21.425
may not have ever seen your
project before knows well,

33
00:02:21.425 --> 00:02:25.780
if I execute npm start probably
something is supposed to happen.

34
00:02:25.780 --> 00:02:29.320
And in fact lots of platform
as a service providers,

35
00:02:29.320 --> 00:02:34.710
including Elastic Beanstalk
which is the bit that

36
00:02:34.710 --> 00:02:39.710
we'll be using later on this afternoon,
will look for that npm start script as

37
00:02:39.710 --> 00:02:45.800
the primary way to kick off your
node js web application process.

38
00:02:45.800 --> 00:02:50.365
So, having these npm scripts
is usually a good idea anyway.

39
00:02:50.365 --> 00:02:55.942
Then, the other one that I use is Grunt.

40
00:02:55.942 --> 00:03:00.634
And I'm already seeing some questions in
the chat about you know Grunt over Gulp or

41
00:03:00.634 --> 00:03:04.380
whatever and
we'll talk about some of the conventions.

42
00:03:04.380 --> 00:03:08.330
I think it largely does
come down to preference.

43
00:03:08.330 --> 00:03:14.300
Gulp in some scenarios performs really,
really well, so that's really great.

44
00:03:14.300 --> 00:03:16.400
Webpack you can actually use with Grunt,
and

45
00:03:16.400 --> 00:03:19.160
it's really good at doing
a subset of frontendy stuff.

46
00:03:19.160 --> 00:03:22.730
So there's lots of different
choices out there, but

47
00:03:22.730 --> 00:03:27.780
the reason why I kind of stick with
Grunt is the mature plugin ecosystem.

48
00:03:27.780 --> 00:03:34.250
There's a ton of plugins out there that
do 99% of the things that I wanna do.

49
00:03:34.250 --> 00:03:37.130
And it's better than other
solutions out there,

50
00:03:37.130 --> 00:03:39.920
I think,
at like synchronously orchestrating tasks.

51
00:03:39.920 --> 00:03:43.410
If you wanna do this,
then this, then this, or

52
00:03:43.410 --> 00:03:46.800
do a couple thing concurrently and
then another thing.

53
00:03:46.800 --> 00:03:48.470
Grunt to makes that easiest.

54
00:03:48.470 --> 00:03:54.572
And there are other tools out there that
all that stuff is still totally possible,

55
00:03:54.572 --> 00:03:58.464
but the code becomes, for
at least my simple brain,

56
00:03:58.464 --> 00:04:01.402
possibly a little bit more confusing.

57
00:04:01.402 --> 00:04:06.831
There are lots of people out
there in fact like Lloyd who

58
00:04:06.831 --> 00:04:13.455
lives here in town in the Twin Cities
does node dev ops for Walmart.

59
00:04:13.455 --> 00:04:19.071
And for
most of their orchestrations stuff,

60
00:04:19.071 --> 00:04:23.810
his weapon of choice is bash scripts.

61
00:04:23.810 --> 00:04:26.810
They just have a ton of really bad ass

62
00:04:26.810 --> 00:04:30.320
bash scripts which run all of their
deployments and do all that stuff.

63
00:04:30.320 --> 00:04:33.190
So ultimately,
it comes down to preference.

64
00:04:34.990 --> 00:04:39.000
But the thing that I think Grunt helps
with over just pure bash scripts and

65
00:04:39.000 --> 00:04:42.590
npm scripts is orchestrating and
building tasks that work together.

