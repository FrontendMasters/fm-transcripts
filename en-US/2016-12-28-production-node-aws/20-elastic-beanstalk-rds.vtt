WEBVTT

1
00:00:00.032 --> 00:00:03.977
[MUSIC].

2
00:00:03.977 --> 00:00:07.216
&gt;&gt; Kevin Whinnery: That was
the spin through the data model.

3
00:00:07.216 --> 00:00:11.977
And now we're gonna get into one of
the parts that I think might be new to

4
00:00:11.977 --> 00:00:13.600
more folks in the room.

5
00:00:13.600 --> 00:00:18.307
Who here today deploys code like on AWS.

6
00:00:18.307 --> 00:00:20.472
&gt;&gt; Speaker 2: Tried.

7
00:00:20.472 --> 00:00:27.365
&gt;&gt; Kevin Whinnery: You try it a little
bit, that's okay, totally fine.

8
00:00:27.365 --> 00:00:33.000
So what we're gonna go
over here is a stack

9
00:00:33.000 --> 00:00:40.010
that we can use in AWS using a few of
their more popular product offerings.

10
00:00:40.010 --> 00:00:43.840
To stand up this
application in production.

11
00:00:43.840 --> 00:00:46.840
Now this is definitely a piddly process.

12
00:00:46.840 --> 00:00:50.640
The reason why I think
not too many people have

13
00:00:50.640 --> 00:00:54.660
deployed code into production on Amazon is
because it's kind of a pain in the butt.

14
00:00:54.660 --> 00:00:56.880
There's a lot of different
things you have to learn.

15
00:00:56.880 --> 00:00:59.370
There's a lot of steps
that you can screw up.

16
00:00:59.370 --> 00:01:01.510
There's security groups and

17
00:01:01.510 --> 00:01:06.790
IM users and configurations and
command line interfaces.

18
00:01:06.790 --> 00:01:10.200
And there's a hundred different
ways you could screw it up.

19
00:01:10.200 --> 00:01:13.510
So what we're going to
do is go through one

20
00:01:13.510 --> 00:01:18.260
pipeline to get a no JS
app deployed on AWS.

21
00:01:19.460 --> 00:01:26.790
Using a combination of elastic stock which
is essentially a managed Amazon instances.

22
00:01:28.440 --> 00:01:33.670
That and that are talking to an RDS
database on the back end, and

23
00:01:33.670 --> 00:01:38.770
that are part of an auto scaling group
that we can configure to add you know more

24
00:01:38.770 --> 00:01:44.190
instances to our application if
necessary to handle bursts in traffic.

25
00:01:44.190 --> 00:01:47.460
And can scale down based on
our requirements as well.

26
00:01:47.460 --> 00:01:51.190
So we'll talk a little bit about the
production environment that we're going to

27
00:01:51.190 --> 00:01:52.740
create a high level.

28
00:01:52.740 --> 00:01:58.540
Talk about some AWS terms and
then what we're actually gonna do is step

29
00:01:58.540 --> 00:02:04.030
through the provisioning of a new
environment which is gonna take a while.

30
00:02:04.030 --> 00:02:09.940
So we'll kind of do it together
over the course of the exercise.

31
00:02:09.940 --> 00:02:13.560
Hopefully with the magic of television we
can cut this up a little bit later because

32
00:02:13.560 --> 00:02:17.350
each step does tend to
take a little while.

33
00:02:17.350 --> 00:02:21.250
But the goal is for everybody to get
the current running version of their

34
00:02:21.250 --> 00:02:26.450
application deployed onto their
own personal AWS account.

35
00:02:26.450 --> 00:02:30.500
That is the desired end state for today.

36
00:02:30.500 --> 00:02:34.630
All right, let's do this thing.

37
00:02:34.630 --> 00:02:40.380
First we'll kind of talk about the stack
we're choosing, kind of where it sits

38
00:02:40.380 --> 00:02:45.340
on the spectrum of possible production
deployment environments for

39
00:02:45.340 --> 00:02:47.390
your web application code.

40
00:02:47.390 --> 00:02:51.210
There's kind of two ends of the spectrum
that you might be familiar with.

41
00:02:51.210 --> 00:02:55.730
There's stuff that is
completely 100% managed and

42
00:02:55.730 --> 00:02:59.050
you're really only
interacting with it via API.

43
00:02:59.050 --> 00:03:04.590
Things like a Firebase which you
see on the far right of the screen.

44
00:03:04.590 --> 00:03:10.910
Firebase is you use an SDK to
sync data to their their backend.

45
00:03:10.910 --> 00:03:13.300
And you don't actually manage
any infrastructure at all.

46
00:03:13.300 --> 00:03:17.590
You're just using their
backend as a service.

47
00:03:17.590 --> 00:03:20.670
There have been other things
like Parse and Convey and

48
00:03:20.670 --> 00:03:25.450
lots of other vendors in this space
that have tried to remove the need for

49
00:03:25.450 --> 00:03:27.970
a backend in your application at all.

50
00:03:27.970 --> 00:03:32.970
On the other extreme, there is virtual
hardware that you manage yourself,

51
00:03:32.970 --> 00:03:38.680
like Digital Ocean,
Virtual Private Servers or Amazon EC2

52
00:03:38.680 --> 00:03:43.700
instances, which are servers that
you configure and deploy code to and

53
00:03:43.700 --> 00:03:48.070
SSH into as if you were managing
a fleet of physical servers.

54
00:03:50.120 --> 00:03:53.460
More towards the middle
is something like Heroku,

55
00:03:53.460 --> 00:03:56.180
where you are running
an actual web application.

56
00:03:56.180 --> 00:03:59.050
But it's on a fully managed stack,

57
00:03:59.050 --> 00:04:03.270
like you can't SSH into the server,
which is running your code.

58
00:04:03.270 --> 00:04:06.950
And the way that your code is run is
actually completely abstracted to you.

59
00:04:06.950 --> 00:04:11.440
You say Heroku,
here's my application, run it for me.

60
00:04:12.880 --> 00:04:15.650
And that works that works out really well.

61
00:04:15.650 --> 00:04:17.820
And then kind of in between,

62
00:04:17.820 --> 00:04:22.560
is this guy this weirdo called
Amazon elastic bean stalk.

63
00:04:22.560 --> 00:04:28.060
And this is sort of the Amazon
answer to Heroku but

64
00:04:28.060 --> 00:04:34.040
it's It's much closer to managed
infrastructure on your end then it

65
00:04:34.040 --> 00:04:40.900
is to Heroku where there's sort of a veil
of secrecy which you can never penetrate.

66
00:04:40.900 --> 00:04:45.489
So, the environment for this
application that we're gonna try out is

67
00:04:45.489 --> 00:04:50.546
a combination or the two key technologies
are Elastic Beanstalk Amazon RDS or

68
00:04:50.546 --> 00:04:53.200
Relational Database Service.

69
00:04:53.200 --> 00:04:58.680
So Elastic Beanstalk is interesting
in that it's more configurable than

70
00:04:58.680 --> 00:05:01.320
most other platforms as a service.

71
00:05:01.320 --> 00:05:05.210
At the end of the day, even though you're
using Elastic Beanstalk to configure it,

72
00:05:05.210 --> 00:05:09.970
you're just running EC2
instances that you can SSH

73
00:05:09.970 --> 00:05:15.150
into that are just like Linux servers
that are alternately under your control.

74
00:05:15.150 --> 00:05:18.830
There are some management
software that is running on them.

75
00:05:18.830 --> 00:05:24.989
And the way that you interact with them
is can be a little wonky sometimes.

76
00:05:24.989 --> 00:05:29.629
But ultimately you have a lot more control
over the actual hardware that your code is

77
00:05:29.629 --> 00:05:32.558
running on than you would
in something like Heroku.

78
00:05:32.558 --> 00:05:36.038
Also because it's part of
like the Amazon ecosystem and

79
00:05:36.038 --> 00:05:40.802
you can manage it through the ministry
of interface, it's easier to make.

80
00:05:40.802 --> 00:05:45.500
Elastic bean stock in play with
other Amazon resources and

81
00:05:45.500 --> 00:05:49.580
I think your quote easy because
if you've ever been in the Amazon

82
00:05:49.580 --> 00:05:54.370
administrative interface before you'll
realize that nothing is ever easy ever.

83
00:05:54.370 --> 00:06:01.880
But if once you do figure it out like
it is actually pretty cool sometimes.

84
00:06:01.880 --> 00:06:05.940
The way that you can set up you
know your DNS with route 53 and

85
00:06:05.940 --> 00:06:10.720
use S3 buckets in cloud front for
your static assets.

86
00:06:10.720 --> 00:06:12.730
There's lots of cool
stuff that you can do but

87
00:06:12.730 --> 00:06:15.040
the a learning curve is incredibly high.

88
00:06:15.040 --> 00:06:17.430
And RTS is a pretty good service.

89
00:06:17.430 --> 00:06:20.560
It's a performant way
to run your database.

90
00:06:20.560 --> 00:06:22.350
It's obviously highly available.

91
00:06:22.350 --> 00:06:27.150
And it has managed software updates and
snapshots.

92
00:06:27.150 --> 00:06:31.640
So a lot of the questions about
reliability of your database kind of go

93
00:06:31.640 --> 00:06:35.940
away by using this this managed service,
which has been working out pretty well.

94
00:06:37.980 --> 00:06:44.030
So this is kind of the topology of the
solution that we're going to create today.

95
00:06:44.030 --> 00:06:48.950
So, the key technologies in the Amazon
world that we're going to be

96
00:06:48.950 --> 00:06:53.030
employing are an Elastic Load Balancer,
and

97
00:06:53.030 --> 00:06:59.030
elastic beanstalk environment
which provisions Amazon,

98
00:06:59.030 --> 00:07:03.880
EC 2 instances within what's
called an auto scaling group.

99
00:07:03.880 --> 00:07:08.110
So we can define rules that say,

100
00:07:08.110 --> 00:07:12.910
all right once the instances
in our application are at 60%

101
00:07:12.910 --> 00:07:17.730
usage of CPU, that's the time to spin
up another instance of the application.

102
00:07:17.730 --> 00:07:21.500
So the elastic load balancer
is what will accept

103
00:07:21.500 --> 00:07:26.410
incoming HTTP traffic from
the from the outside world.

104
00:07:26.410 --> 00:07:32.990
And then, the elastic load balancer will
delegate those HTTP requests to instances

105
00:07:32.990 --> 00:07:38.630
within our auto scaling group which
again is managed by elastic being stuck.

106
00:07:38.630 --> 00:07:43.502
And then all of our instances
are talking to an RTS instance

107
00:07:43.502 --> 00:07:47.720
that we also create within
our Amazon account.

108
00:07:47.720 --> 00:07:54.904
So again at a high level elastic
load balancer is shutting off HTTP

109
00:07:54.904 --> 00:08:00.770
traffic to all the different EC2
instances within our auto scaling group,

110
00:08:00.770 --> 00:08:04.000
all of which are communicating with
an RTS instance on the backend.

111
00:08:05.470 --> 00:08:08.450
So that's what we're trying to create
at least at a very high level.

