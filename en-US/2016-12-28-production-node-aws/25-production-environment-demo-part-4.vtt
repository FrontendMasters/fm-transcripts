WEBVTT

1
00:00:00.000 --> 00:00:04.190
[MUSIC]

2
00:00:04.190 --> 00:00:09.511
&gt;&gt; Kevin Whinnery: So we're going to
go in here, into our configuration,

3
00:00:09.511 --> 00:00:14.847
software configuration, and
our RDS connection URL.

4
00:00:14.847 --> 00:00:19.998
And we're gonna create a postgreSQL
connection string, just like we have been.

5
00:00:19.998 --> 00:00:26.458
For local development only, this is the
one that we're gonna use in production.

6
00:00:26.458 --> 00:00:31.626
User name is gonna be
awsuser.awspassword and

7
00:00:31.626 --> 00:00:39.000
that's going to be @ the URL for
that RDS instance that we just saw.

8
00:00:39.000 --> 00:00:44.168
And then /todos is going to
be the name of the database.

9
00:00:44.168 --> 00:00:49.832
We'll hit Apply, and
now we should have the necessary

10
00:00:49.832 --> 00:00:56.501
environment configuration to
actually get this bad boy going.

11
00:00:56.501 --> 00:01:01.770
So once this environment
update is complete.

12
00:01:01.770 --> 00:01:07.992
We're gonna do the pen ultimate

13
00:01:07.992 --> 00:01:13.528
step which is the EB deploy.

14
00:01:13.528 --> 00:01:18.640
So we're ready to do that
here in just a minute.

15
00:01:18.640 --> 00:01:23.462
With the environment updating,
we can't actually kick off the deploy.

16
00:01:29.530 --> 00:01:31.836
&gt;&gt; Kevin Whinnery: And
we can see that right now,

17
00:01:31.836 --> 00:01:36.544
the application has not been
successfully deployed yet, so

18
00:01:36.544 --> 00:01:41.079
we can't see anything on our
last to be in stock instance.

19
00:01:41.079 --> 00:01:44.752
&gt;&gt; Speaker 2: Couple
questions coming in here.

20
00:01:44.752 --> 00:01:49.005
Where is the best place and
safest place to have elastic

21
00:01:49.005 --> 00:01:53.860
bean stock pull in the AWS access key and
secret access key?

22
00:01:53.860 --> 00:01:57.480
&gt;&gt; Kevin Whinnery: When you go
through the EB and knit process.

23
00:01:57.480 --> 00:02:00.603
It's gonna actually save your access

24
00:02:00.603 --> 00:02:05.102
key in secret in a doc file
like in your home directory.

25
00:02:05.102 --> 00:02:09.952
And that's generally speaking,
where everybody who

26
00:02:09.952 --> 00:02:14.907
deploys to [INAUDIBLE] stock
on our team keeps it in a .aws

27
00:02:14.907 --> 00:02:19.455
directory essentially,
in your home directory.

28
00:02:19.455 --> 00:02:21.951
So that's where that goes.

29
00:02:21.951 --> 00:02:25.318
&gt;&gt; Speaker 2: And the next question,
is it safe to put the DB username and

30
00:02:25.318 --> 00:02:28.712
password in an ECT environment
variable for production?

31
00:02:28.712 --> 00:02:33.628
&gt;&gt; Kevin Whinnery: If you if you've
configured your RDS instance to not accept

32
00:02:33.628 --> 00:02:38.642
traffic from the outside as we have like,
it's not possible

33
00:02:38.642 --> 00:02:43.680
to connect to the database outside
of the of the current BPC.

34
00:02:46.050 --> 00:02:50.449
In which case, it's not the end of
the world to have the connection string as

35
00:02:50.449 --> 00:02:52.046
an environment variable.

36
00:02:52.046 --> 00:02:56.878
But what we typically do
is like there's a way

37
00:02:56.878 --> 00:03:01.963
to store secure credentials
in an S3 bucket and

38
00:03:01.963 --> 00:03:07.420
then load them into
the system environment.

39
00:03:07.420 --> 00:03:12.822
So rather than managing it through
the administrative interface directly,

40
00:03:12.822 --> 00:03:17.151
you could pull in credential
information from an S3 bucket.

41
00:03:17.151 --> 00:03:21.060
So that it's not accessible directly
through the through the console interface.

42
00:03:21.060 --> 00:03:22.566
There's different ways to approach that.

43
00:03:22.566 --> 00:03:25.964
And this is probably, again because
it's not publicly accessible,

44
00:03:25.964 --> 00:03:27.470
it's not the end of the world.

45
00:03:27.470 --> 00:03:33.062
But probably the best place to do it is
in an S3 bucket like in an XML file or

46
00:03:33.062 --> 00:03:39.043
JSON file or something like that,
that read those in from your application.

47
00:03:39.043 --> 00:03:42.999
All right, so now our environment
is actually in a decent state.

48
00:03:44.210 --> 00:03:48.614
So now we've actually npm install,
I think we still need

49
00:03:48.614 --> 00:03:53.219
to do grunt collect_static to
get everything ready to go.

50
00:03:53.219 --> 00:04:00.019
Now, we can do an eb deploy,
&gt;&gt; Kevin Whinnery: And

51
00:04:00.019 --> 00:04:03.422
that's going to package up,

52
00:04:03.422 --> 00:04:10.238
all of the application logic in
our directory to a zip file.

53
00:04:10.238 --> 00:04:13.121
It's gonna create a new application
version which we can see

54
00:04:13.121 --> 00:04:15.110
through the administrative interface.

55
00:04:16.570 --> 00:04:17.730
And ultimately,

56
00:04:17.730 --> 00:04:22.531
it's gonna deploy that new version
of the application to our instances.

57
00:04:22.531 --> 00:04:27.767
And what we saw before,
what they're gonna do once the once

58
00:04:27.767 --> 00:04:34.799
the application version has been deployed
is run these commands that we set up.

59
00:04:34.799 --> 00:04:37.860
So we have a npm prestart command,

60
00:04:37.860 --> 00:04:43.150
which is going to run our
migrations against the database.

61
00:04:43.150 --> 00:04:45.700
So if there is any available
migrations to run,

62
00:04:45.700 --> 00:04:49.620
those will get run prior to
the application being deployed.

63
00:04:49.620 --> 00:04:54.970
And then we have a start command
which will run our server process,

64
00:04:54.970 --> 00:04:59.900
and start listening for inbound
connections on the configured HDP port.

65
00:05:01.600 --> 00:05:09.784
So if all goes according to plan,
&gt;&gt; Kevin Whinnery: We

66
00:05:09.784 --> 00:05:13.730
should have a new version to
look at here in a few minutes.

67
00:05:20.525 --> 00:05:22.255
&gt;&gt; Kevin Whinnery: All right, so

68
00:05:22.255 --> 00:05:27.975
I'm afraid to look,
&gt;&gt; Kevin Whinnery: But

69
00:05:27.975 --> 00:05:32.280
that looks like suspiciously like a to do.

70
00:05:34.290 --> 00:05:40.440
And it seems like we are successfully
running an application

71
00:05:40.440 --> 00:05:45.450
in production has to be instructed you
get up there and add some good for you.

72
00:05:45.450 --> 00:05:47.220
Good looking out.

73
00:05:47.220 --> 00:05:50.470
So now we have our RDS instance connected

74
00:05:50.470 --> 00:05:53.970
to all of our ACTU instances
in the same security group.

75
00:05:53.970 --> 00:06:00.694
We have an elastic load balancer, which is
what this what this URL is pointing to.

76
00:06:00.694 --> 00:06:04.456
It is accepting traffic
from the outside world, and

77
00:06:04.456 --> 00:06:10.109
it is routing it to all the instances
in our elastic beanstalk configuration.

78
00:06:10.109 --> 00:06:17.208
And our elastic bin stock again is talking
back and forth with an RDS database.

79
00:06:17.208 --> 00:06:25.440
So that's all it takes to deploy
an application on elastic bin stock.

80
00:06:25.440 --> 00:06:30.960
But the good part is once
you get all of this set up,

81
00:06:30.960 --> 00:06:37.815
really all you're gonna be doing
going forward is eb deploy.

82
00:06:37.815 --> 00:06:41.921
You're gonna be is zipping up
your application into an archive.

83
00:06:41.921 --> 00:06:46.966
You're gonna be deploying a new version,
the new version will

84
00:06:46.966 --> 00:06:53.260
get installed on all your instances and
you can sort of go about your business.

85
00:06:54.260 --> 00:07:00.720
There are ways to do a lot of the things
that we did manually via API.

86
00:07:00.720 --> 00:07:04.347
But I wanted to go through kind
of all of the different steps, so

87
00:07:04.347 --> 00:07:07.230
you could understand
hopefully a little better.

88
00:07:08.280 --> 00:07:12.460
What it's gonna take to actually get a new

89
00:07:12.460 --> 00:07:17.485
environment provisioned
on Elastic Beanstalk.

90
00:07:17.485 --> 00:07:21.404
Phil asks, do you recommend having
a staging environment before going

91
00:07:21.404 --> 00:07:23.690
to a production environment on AWS?

92
00:07:23.690 --> 00:07:26.260
Absolutely, you definitely
want to do that.

93
00:07:26.260 --> 00:07:30.593
So right now, we only have one
environment that we can push to.

94
00:07:30.593 --> 00:07:33.508
But it's possible to deploy
to multiple environments.

95
00:07:33.508 --> 00:07:38.622
So it's definitely good to verify your
changes in the stage environment,

96
00:07:38.622 --> 00:07:42.449
as we definitely always do
prior to go into production.

97
00:07:42.449 --> 00:07:48.184
The other thing that actually kind
of nifty about Elastic Beanstalk

98
00:07:48.184 --> 00:07:52.330
is you have the ability
to do blue green deploys.

99
00:07:52.330 --> 00:07:56.164
So you can deploy your application
code to an environment,

100
00:07:56.164 --> 00:07:59.320
which is essentially
the standby environment.

101
00:07:59.320 --> 00:08:05.375
You can validate that everything
is good to go in that environment.

102
00:08:05.375 --> 00:08:10.015
And then in the administrative
interface or via API,

103
00:08:10.015 --> 00:08:14.448
you can actually change in
this public facing URL,

104
00:08:14.448 --> 00:08:18.381
you can swap URLs with
another environment.

105
00:08:18.381 --> 00:08:23.142
So you can with zero down time just
convert to another environment that's

106
00:08:23.142 --> 00:08:26.521
already been deployed and
verified to work with like

107
00:08:26.521 --> 00:08:30.920
directly through the interface
which is actually pretty rad.

108
00:08:30.920 --> 00:08:36.410
We don't actually take advantage of that
cuz we don't have access to the console.

109
00:08:36.410 --> 00:08:40.290
Because when you work in
a large organization,

110
00:08:40.290 --> 00:08:43.107
things can be pretty locked down.

111
00:08:43.107 --> 00:08:47.752
But it's something that we'd
like to explore doing cuz it's

112
00:08:47.752 --> 00:08:51.869
definitely something that
can be done via API as well.

113
00:08:51.869 --> 00:08:56.574
Going into the dashboard here,
let me just point

114
00:08:56.574 --> 00:09:01.395
out a few bits in
the administrative interface for

115
00:09:01.395 --> 00:09:05.435
Elastic Beanstalk that might be useful.

116
00:09:05.435 --> 00:09:07.413
With all of your applications,

117
00:09:07.413 --> 00:09:13.420
there's multiple potential versions of
the application that could be deployed.

118
00:09:13.420 --> 00:09:19.810
So if I'm at this level looking
at todomvc-plusplus application.

119
00:09:19.810 --> 00:09:23.450
I can see all the environments that
are running this application, and

120
00:09:23.450 --> 00:09:27.190
I can also see all
the application versions.

121
00:09:27.190 --> 00:09:33.550
So this is the current version of the
application that's deployed to production.

122
00:09:33.550 --> 00:09:37.738
So you can see, it's currently
deployed to this environment.

123
00:09:37.738 --> 00:09:44.092
And I can deploy past
versions of the application.

124
00:09:44.092 --> 00:09:48.884
This is how you would do a rollback like
if something some stuff hit the fan.

125
00:09:48.884 --> 00:09:55.613
You could roll back to a previous deployed
version of the of the application.

126
00:09:55.613 --> 00:10:02.652
So there's a few things you can do
here in the environment configuration,

127
00:10:02.652 --> 00:10:07.358
there's also a few bits
there worth calling out.

128
00:10:07.358 --> 00:10:12.238
The log interface, you can actually
view the last 100 lines of

129
00:10:12.238 --> 00:10:16.599
the logs directly within
the administrative interface.

130
00:10:16.599 --> 00:10:22.005
But we also have this eb logs oops,
eb logs command

131
00:10:22.005 --> 00:10:27.297
that we can run from
the command line interface.

132
00:10:27.297 --> 00:10:31.528
Which will give us the last 100
lines of a couple of different logs.

133
00:10:31.528 --> 00:10:37.333
It will give us the from
our no JS application and

134
00:10:37.333 --> 00:10:43.721
it'll also give us like
the logs from the deployment

135
00:10:43.721 --> 00:10:50.122
commands that are happening
on our ESTU instances.

136
00:10:50.122 --> 00:10:55.716
So here, we can see the output
of our var migrations.

137
00:11:00.170 --> 00:11:05.528
&gt;&gt; Kevin Whinnery: And then we start
to see the Morgan logging that you guys

138
00:11:05.528 --> 00:11:12.183
were nice enough to add into our
application earlier this morning.

139
00:11:12.183 --> 00:11:14.567
So you can retrieve the logs in that way.

140
00:11:14.567 --> 00:11:21.375
The other bits worth showing off
in the scaling configuration.

141
00:11:21.375 --> 00:11:28.720
This is where you can start to toy with
the settings for your application.

142
00:11:28.720 --> 00:11:32.992
We can sort of mandate that there's
never gonna be fewer than two instances,

143
00:11:32.992 --> 00:11:36.489
two EC2 instances running
the application at any given time.

144
00:11:36.489 --> 00:11:41.350
We can put an upper bound on the number
of instances that can be running the app,

145
00:11:41.350 --> 00:11:44.310
can configure different
availability zones.

146
00:11:44.310 --> 00:11:47.472
And we can also configure
different scaling triggers.

147
00:11:47.472 --> 00:11:53.116
So we can say that when the network
bandwidth reaches a certain level

148
00:11:53.116 --> 00:11:59.369
that is the trigger point at which we
can spin up another another instance.

149
00:11:59.369 --> 00:12:06.084
So there's a lot a lot of
capability that we have there.

150
00:12:06.084 --> 00:12:11.500
And then on the instances themselves,
this is where you can

151
00:12:11.500 --> 00:12:18.561
actually configure the type of EC2
instance that will be running your code.

152
00:12:18.561 --> 00:12:25.097
The default is a t2 micro, which is pretty
small, it has like one virtual core and

153
00:12:25.097 --> 00:12:30.435
512 megs of memory I think and
it kind of goes goes up from there.

154
00:12:30.435 --> 00:12:35.292
So you can configure the actual machines
that are running your application

155
00:12:35.292 --> 00:12:38.076
based on your performance requirements.

156
00:12:43.002 --> 00:12:46.375
&gt;&gt; Kevin Whinnery: We've already kind of
looked into the software configuration

157
00:12:46.375 --> 00:12:47.590
which is another bit.

158
00:12:47.590 --> 00:12:51.637
We're also look at some of the health
check features that are present here

159
00:12:51.637 --> 00:12:55.960
tomorrow, and we talk about like
monitoring this application environment.

160
00:12:57.180 --> 00:13:02.209
There's a few other that you
can you can mess with for

161
00:13:02.209 --> 00:13:05.874
updates and deployments by default.

162
00:13:05.874 --> 00:13:10.177
A third of your fleet of instances
whatever that happens to be.

163
00:13:10.177 --> 00:13:12.630
If it's just three,
it'll be just one of them.

164
00:13:12.630 --> 00:13:16.193
But essentially,
when you're doing a deployment,

165
00:13:16.193 --> 00:13:21.022
that's how many of those instances
will be taken out of the load balancer

166
00:13:21.022 --> 00:13:24.125
to perform your application
update at a time.

167
00:13:24.125 --> 00:13:27.101
And once that one instance has been
updated, it's gonna be put back in

168
00:13:27.101 --> 00:13:29.683
the load balancer and
the other instances will be taken out.

169
00:13:29.683 --> 00:13:34.080
And that instance will start accepting
the traffic from the load balancer.

170
00:13:34.080 --> 00:13:38.206
And you can configure like how much
of your fleet you wanna take out and

171
00:13:38.206 --> 00:13:41.209
update and
put back in to the load balancer there.

172
00:13:44.743 --> 00:13:51.560
&gt;&gt; Kevin Whinnery: All right, so
that was a tremendous pile of stuff to do.

173
00:13:51.560 --> 00:13:57.940
But for anyone who wants to attempt it,
I will take you through the steps.

174
00:13:57.940 --> 00:14:02.027
The documentation or the place to start,

175
00:14:02.027 --> 00:14:06.948
that I put in the chat was
starting with the EB COI.

176
00:14:06.948 --> 00:14:14.106
Then again, I think actually bring up
the 10,000 foot view of this process here.

177
00:14:17.412 --> 00:14:19.451
&gt;&gt; Kevin Whinnery: Within a region,
you'll create a user,

178
00:14:19.451 --> 00:14:21.792
you'll download those user's credentials.

179
00:14:21.792 --> 00:14:25.045
You're going to create
an Elastic Beanstalk environment from

180
00:14:25.045 --> 00:14:26.033
the command line.

181
00:14:26.033 --> 00:14:32.855
You'll create an RDS instance through
the administrative interface.

182
00:14:32.855 --> 00:14:36.741
And you'll configure a security
group to allow incoming connections.

183
00:14:36.741 --> 00:14:42.599
So there's a few pieces of that
process that are a little bit patsy.

184
00:14:42.599 --> 00:14:47.031
So I'm happy to help you through any of
those individual pieces if you'd like to

185
00:14:47.031 --> 00:14:48.430
give it a shot yourself.

186
00:14:50.700 --> 00:14:54.920
But again, I think the benefit here
is that this is being recorded and

187
00:14:54.920 --> 00:15:00.780
all of you can watch that ordeal
again at another time when you're

188
00:15:00.780 --> 00:15:03.220
actually going through this and
clicking the buttons.

189
00:15:03.220 --> 00:15:07.020
So there's definitely
a lot of pieces to set up.

190
00:15:07.020 --> 00:15:10.113
But hopefully that gives you
a sense of what the moving

191
00:15:10.113 --> 00:15:11.910
parts are during the process.

