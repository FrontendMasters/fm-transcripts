WEBVTT

1
00:00:00.000 --> 00:00:03.931
[MUSIC]

2
00:00:03.931 --> 00:00:06.461
&gt;&gt; Kevin Whinnery: There's a lot of
different configuration options here,

3
00:00:06.461 --> 00:00:08.600
which I'll get into in a little bit.

4
00:00:08.600 --> 00:00:12.580
But now that we have the security
group created, I'm gonna go ahead and

5
00:00:12.580 --> 00:00:19.090
create an Amazon RDS instance to
associate with this environment.

6
00:00:19.090 --> 00:00:23.055
So it is possible to create
an RDS instance within

7
00:00:23.055 --> 00:00:27.323
the Elastic Beanstalk
administrative interface.

8
00:00:27.323 --> 00:00:30.658
But they recommend against doing that for

9
00:00:30.658 --> 00:00:37.240
a production configuration because
environments are not necessarily durable.

10
00:00:37.240 --> 00:00:42.110
They do get created and
deleted with more frequency.

11
00:00:42.110 --> 00:00:46.290
So the typical way that you
are instructed to set this up is to create

12
00:00:46.290 --> 00:00:51.420
an RDS instance independently and
then add it to the security group

13
00:00:51.420 --> 00:00:56.760
associated with your Elastic Beanstalk EC2
instances, so they can talk to each other.

14
00:00:56.760 --> 00:01:00.410
So that's what we're gonna do right now.

15
00:01:00.410 --> 00:01:04.670
So we'll scroll down, I'm on
the console home page, and go to RDS.

16
00:01:08.102 --> 00:01:11.593
&gt;&gt; Kevin Whinnery: And
we'll go down to Instances, and

17
00:01:11.593 --> 00:01:15.092
we are going to launch a DB instance.

18
00:01:15.092 --> 00:01:17.660
And in this case,
we are going to choose Postgres.

19
00:01:19.810 --> 00:01:25.540
And to stay in the free tier, we'll
use this dev/test version of Postgres.

20
00:01:27.010 --> 00:01:31.900
And then the other handy option here is
only show options that are eligible for

21
00:01:31.900 --> 00:01:36.595
the free tier, so for
just messing around, it's good to,

22
00:01:37.726 --> 00:01:40.643
&gt;&gt; Kevin Whinnery: Check that out.

23
00:01:40.643 --> 00:01:48.992
And we can leave the defaults here for
the most part.

24
00:01:48.992 --> 00:01:54.840
So the database instance
identifier we will call

25
00:01:56.660 --> 00:02:02.110
to dos or to do NBC,
it doesn't really matter.

26
00:02:03.460 --> 00:02:10.700
And then we're gonna configure a username
and password for our database.

27
00:02:10.700 --> 00:02:14.590
Now in this case, because our
database isn't open to the world,

28
00:02:14.590 --> 00:02:18.870
these aren't necessarily
super secret squirrel values.

29
00:02:18.870 --> 00:02:26.129
So I'm gonna choose aws user and
aws password for these values.

30
00:02:36.686 --> 00:02:40.947
&gt;&gt; Kevin Whinnery: And
now I'm going to select the security

31
00:02:40.947 --> 00:02:44.770
group to add this instance to.

32
00:02:44.770 --> 00:02:48.736
I can leave those default settings, but

33
00:02:48.736 --> 00:02:56.330
I need to be able to choose the security
group associated with my EB instance.

34
00:02:56.330 --> 00:03:00.481
So let's see, EWSEB security group.

35
00:03:01.990 --> 00:03:04.380
I forget what it actually was.

36
00:03:04.380 --> 00:03:06.524
Let me go to my output here.

37
00:03:10.994 --> 00:03:13.770
&gt;&gt; Kevin Whinnery: Might have to go
refresh my memory on which one that was.

38
00:03:17.578 --> 00:03:20.822
&gt;&gt; Kevin Whinnery: And as we can see, our
environment is degraded right now because

39
00:03:20.822 --> 00:03:24.700
it's underconfigured, and
we still need to do a few things.

40
00:03:24.700 --> 00:03:30.106
I'm gonna go in here,
go into my instance configuration, and

41
00:03:30.106 --> 00:03:36.026
see that security group is something
that looks like that, XTUIAQ.

42
00:03:40.422 --> 00:03:43.046
&gt;&gt; Kevin Whinnery: And we don't want
the load balancer security group,

43
00:03:43.046 --> 00:03:46.254
we want the Elastic Beanstalk
security group because it's those

44
00:03:46.254 --> 00:03:49.185
EC2 instances that need to
actually talk to the database.

45
00:03:51.525 --> 00:03:56.919
And now these values matter,
if you remember the database name

46
00:03:56.919 --> 00:04:01.907
that we have configured by
default in our configuration,

47
00:04:01.907 --> 00:04:04.980
I believe it's just called todos.

48
00:04:04.980 --> 00:04:09.630
So that's we're gonna call it in
our actual application as well.

49
00:04:09.630 --> 00:04:13.230
We can leave the default port, and

50
00:04:13.230 --> 00:04:18.570
a lot of these other options
we can tweak a little bit.

51
00:04:18.570 --> 00:04:24.540
But right now, we can launch our instance,

52
00:04:24.540 --> 00:04:28.070
and it is gonna take a few minutes,
that is not a lie.

53
00:04:28.070 --> 00:04:32.942
So that instance is being spun up,
it's gonna be added to the security

54
00:04:32.942 --> 00:04:37.090
group that our Elastic Beanstalk
application can access.

55
00:04:37.090 --> 00:04:43.730
So while that's happening, let's head back
into the console for Elastic Beanstalk and

56
00:04:43.730 --> 00:04:47.500
do some configuration that we
needed to take care of anyway.

57
00:04:47.500 --> 00:04:53.840
So at the software level,
there's a couple things we need to do.

58
00:04:53.840 --> 00:04:58.040
So this software configuration
refers to the actual

59
00:04:58.040 --> 00:05:02.250
Linux operating environment that
our application is executing in.

60
00:05:02.250 --> 00:05:07.646
And there are some other properties that
we can tweak in here that will be useful.

61
00:05:07.646 --> 00:05:09.630
So for a Node.js instance,

62
00:05:09.630 --> 00:05:14.670
you have the option of using either
engine X or Apache as a proxy server for

63
00:05:14.670 --> 00:05:19.729
your Node JASS application, or
you can use you know proxy server at all.

64
00:05:19.729 --> 00:05:22.934
But probably,
you do you want to have that, and

65
00:05:22.934 --> 00:05:28.720
then you can specify which Node version
you'd like to run on your instances.

66
00:05:28.720 --> 00:05:32.790
And the most recent version of
Node that you can elect for

67
00:05:32.790 --> 00:05:35.564
your instance right now is 622.

68
00:05:35.564 --> 00:05:40.080
There is a listing of this in
the documentation that you can refer to.

69
00:05:40.080 --> 00:05:45.380
So we'll update that to the latest
Node version that we can.

70
00:05:46.680 --> 00:05:50.720
We'll leave this blank because we have
an NPM start script, which is going to

71
00:05:50.720 --> 00:05:54.760
specify the command, which actually
launches our web application.

72
00:05:56.430 --> 00:05:58.350
And now when we scroll down a little bit,

73
00:05:58.350 --> 00:06:01.220
there are a couple of pieces
that we do wanna configure.

74
00:06:01.220 --> 00:06:08.040
So one of the things we wanna
make sure we do is have

75
00:06:08.040 --> 00:06:13.070
our static assets served by
engine X rather than Node

76
00:06:13.070 --> 00:06:17.600
cuz engine X is going to do a much faster
and better job of serving those up for us.

77
00:06:17.600 --> 00:06:23.826
So we're going to map the static path,
so any incoming HTTP requests that go

78
00:06:23.826 --> 00:06:29.975
to /static will be mapped to a virtual
directory within our application.

79
00:06:29.975 --> 00:06:35.122
In this case,
that's going to be the public directory,

80
00:06:35.122 --> 00:06:38.680
which is generated by our Grunt tasks.

81
00:06:38.680 --> 00:06:41.937
So, we're gonna go ahead and add that.

82
00:06:41.937 --> 00:06:46.939
And we also need a couple environment
variables, so we are actually gonna

83
00:06:46.939 --> 00:06:53.156
be populating our RDS connection string
here, but we don't have that quite yet.

84
00:06:53.156 --> 00:06:56.220
So what we'll do for
now is configure a few other bits we need,

85
00:06:56.220 --> 00:07:01.040
number one is we need to create
a environment variable indicating that

86
00:07:01.040 --> 00:07:04.010
our Node environment is production.

87
00:07:05.950 --> 00:07:11.870
We also need to indicate that for
NPM, NPM should only install

88
00:07:13.070 --> 00:07:17.520
the direct dependencies of our project,
not the dev dependencies.

89
00:07:17.520 --> 00:07:22.190
They don't need to install all the Grunt
crap that we need for local development.

90
00:07:22.190 --> 00:07:23.830
They just need
the production dependencies.

91
00:07:23.830 --> 00:07:33.790
So, I'm gonna specify
NPM_CONFIG_PRODUCTION equals true.

92
00:07:37.372 --> 00:07:40.239
&gt;&gt; Kevin Whinnery: And
then just as a placeholder,

93
00:07:40.239 --> 00:07:44.380
I'm gonna put in RDS_CONNECTION_URL, and

94
00:07:44.380 --> 00:07:49.901
that's going to be the actual
database connection string for

95
00:07:49.901 --> 00:07:57.143
the Postgres database that we just kicked
off the creation of a little while ago.

96
00:07:58.420 --> 00:08:02.308
So let's go over here and
view our database instances and

97
00:08:02.308 --> 00:08:03.849
see how we're doing.

98
00:08:03.849 --> 00:08:09.402
So, it looks like our instance
is not quite created yet,

99
00:08:09.402 --> 00:08:13.730
so we don't have an endpoint for
it as yet.

100
00:08:13.730 --> 00:08:17.550
So, once it's actually created,
we'll have an endpoint that

101
00:08:19.710 --> 00:08:24.400
our Elastic Beanstalk application can
actually address in this application.

102
00:08:25.690 --> 00:08:29.950
So, hasn't been created yet, so
we'll check back here in a little bit.

103
00:08:31.000 --> 00:08:34.150
But for now,
we'll apply those configuration changes.

104
00:08:38.000 --> 00:08:42.690
And whenever we change
the configuration like this,

105
00:08:42.690 --> 00:08:45.020
the environment is gonna start an update.

106
00:08:46.560 --> 00:08:48.442
So if you only have one instance,

107
00:08:48.442 --> 00:08:55.320
Elastic Beanstalk will spin up
another instance and begin the update.

108
00:08:55.320 --> 00:09:00.040
And then once the update is complete, it
will start accepting all the traffic, and

109
00:09:00.040 --> 00:09:03.489
then other instances that need to be
updated will be updated after that.

110
00:09:05.460 --> 00:09:09.820
Yeah, so this is going down.

111
00:09:11.070 --> 00:09:15.230
We'll check in again on our RDS instance.

112
00:09:21.254 --> 00:09:22.415
&gt;&gt; Kevin Whinnery: Still creating.

113
00:09:25.408 --> 00:09:29.520
&gt;&gt; Kevin Whinnery: All right, so once we
have the RDS URL that we can add to our

114
00:09:29.520 --> 00:09:35.230
configuration, we are gonna be
mostly ready to actually deploy.

115
00:09:35.230 --> 00:09:41.078
So to get ready for that, we're going to
run the Grunt collect_static command.

116
00:09:48.995 --> 00:09:50.118
&gt;&gt; Kevin Whinnery: What's going on?

117
00:09:52.922 --> 00:09:55.660
&gt;&gt; Kevin Whinnery: Unable to find local
grunt, yeah, we need to do npm install.

118
00:09:58.314 --> 00:10:01.884
&gt;&gt; Kevin Whinnery: All right, so
these steps that are actually preparing

119
00:10:01.884 --> 00:10:06.940
the application, in our case,
happen on a continuous integration server.

120
00:10:06.940 --> 00:10:11.861
So when we push a commit to master,
RCI server is going to

121
00:10:11.861 --> 00:10:17.100
create all of our static assets and
do whatever command line

122
00:10:17.100 --> 00:10:22.890
functions are necessary to get
our application ready to deploy.

123
00:10:22.890 --> 00:10:28.729
And then we will actually
zip up a deployment artifact

124
00:10:28.729 --> 00:10:35.150
that we will send to
Elastic Beanstalk from our CI server.

125
00:10:35.150 --> 00:10:37.630
We'll send that to S3, and

126
00:10:37.630 --> 00:10:42.000
then we'll kick off a deploy of
that artifact that we created.

127
00:10:42.000 --> 00:10:42.650
In our case,

128
00:10:42.650 --> 00:10:47.020
we're gonna be doing the creation of
the zip file right here on my laptop.

129
00:10:47.020 --> 00:10:50.870
But typically, what you would do is
set up a continuous integration server

130
00:10:50.870 --> 00:10:54.790
that would actually execute
all of these tasks for you.

131
00:10:54.790 --> 00:10:58.990
So we're doing npm install
getting all of this ready, so

132
00:10:58.990 --> 00:11:02.970
we can execute our Grunt task
to create our static assets and

133
00:11:02.970 --> 00:11:06.270
the public directory where
all of those will be held.

134
00:11:08.779 --> 00:11:11.008
&gt;&gt; Kevin Whinnery: So
while that's happening,

135
00:11:11.008 --> 00:11:13.420
we can check back in on RDS land.

136
00:11:17.188 --> 00:11:21.271
&gt;&gt; Kevin Whinnery: So it's backing up,
which means it's pretty close,

137
00:11:21.271 --> 00:11:22.438
that's good.

138
00:11:25.317 --> 00:11:29.027
&gt;&gt; Kevin Whinnery: All right,
and while that's happening,

139
00:11:29.027 --> 00:11:34.790
there is one last piece of
configuration that we need to do.

140
00:11:34.790 --> 00:11:40.320
We're gonna go into our EC2 configuration.

141
00:11:49.804 --> 00:11:51.050
&gt;&gt; Kevin Whinnery: Let's
see where is this,

142
00:11:53.481 --> 00:11:54.289
&gt;&gt; Kevin Whinnery: Clusters,

143
00:11:54.289 --> 00:11:57.146
task definitions, repositories.

144
00:11:57.146 --> 00:12:01.847
Wait, that's ECS, not EC2.

145
00:12:01.847 --> 00:12:07.275
That is for Docker containers, I'm not
interested in Docker containers right now.

146
00:12:08.661 --> 00:12:12.425
&gt;&gt; Kevin Whinnery: All right, so
we're gonna go into our security group

147
00:12:12.425 --> 00:12:17.540
configuration for our EC2 instances and
look for some security group.

148
00:12:17.540 --> 00:12:24.708
So we have two security groups that were
created for our todo NBC application.

149
00:12:24.708 --> 00:12:31.852
One was created for
our Elastic load balancer configuration,

150
00:12:31.852 --> 00:12:36.860
and one was created for our EC2 instances.

151
00:12:36.860 --> 00:12:39.380
So I'm going to take a look at this one.

152
00:12:46.614 --> 00:12:50.500
&gt;&gt; Kevin Whinnery: And yup, I think that's
the security group we're looking for.

153
00:12:50.500 --> 00:12:56.250
Now, I need to go over here to the inbound
tab, I see a lot of heads in hands here.

154
00:12:56.250 --> 00:13:00.154
I know, I feel your pain, but

155
00:13:00.154 --> 00:13:07.817
the initial setup is definitely
where most of the pain is.

156
00:13:07.817 --> 00:13:12.113
So what we're gonna do is
edit inbound rules, and

157
00:13:12.113 --> 00:13:16.923
we already have a rule that's
gonna allow HTTP requests

158
00:13:16.923 --> 00:13:21.780
on port 80 to be accepted for
the security group.

159
00:13:21.780 --> 00:13:26.660
We're gonna add a rule,
it's going to be for Postgratis SQL.

160
00:13:28.560 --> 00:13:33.660
And we are going to put in the security
group again for our EB instance.

161
00:13:33.660 --> 00:13:37.473
So that's gonna be this one,

162
00:13:37.473 --> 00:13:43.123
this AWS EB security group blabadee bloop.

163
00:13:43.123 --> 00:13:44.244
And we'll hit Save.

164
00:13:53.475 --> 00:13:54.508
&gt;&gt; Kevin Whinnery: This is being recorded.

165
00:13:54.508 --> 00:13:58.851
Don't worry, you can go back and
check it out.

166
00:13:58.851 --> 00:14:04.287
All right, so now, let's see if we
have our RDS instance ready to go.

167
00:14:11.114 --> 00:14:12.860
&gt;&gt; Kevin Whinnery: Awesome,
it looks like it is available.

168
00:14:15.979 --> 00:14:19.676
&gt;&gt; Kevin Whinnery: So
now if we go to the configuration details,

169
00:14:19.676 --> 00:14:24.910
we can see we actually have
an endpoint for it, which is great.

170
00:14:24.910 --> 00:14:30.320
That means we can configure an environment
variable in our EC2 instances,

171
00:14:30.320 --> 00:14:33.770
which contain the connection string for
the database.

