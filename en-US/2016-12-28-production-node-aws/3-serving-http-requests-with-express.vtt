WEBVTT

1
00:00:00.000 --> 00:00:03.681
[MUSIC]

2
00:00:03.681 --> 00:00:07.035
&gt;&gt; Kevin Whinnery: The first part
that we'll start to break down in our

3
00:00:07.035 --> 00:00:11.796
application stack is one of the most
important components that we have in

4
00:00:11.796 --> 00:00:15.310
the stack,
which is the Express Web server.

5
00:00:15.310 --> 00:00:22.135
It handles incoming HTTP requests and
renders HTTP responses with HTML and JSON.

6
00:00:22.135 --> 00:00:28.550
It's kind of a core component of this and
any other NODE.JS web application.

7
00:00:28.550 --> 00:00:33.630
It's very similar in style to,

8
00:00:33.630 --> 00:00:37.240
say Sinatra, if you've worked with
that framework in the Ruby world.

9
00:00:37.240 --> 00:00:42.690
Or maybe Nancy from the C# world,
or any number of other HTTP

10
00:00:42.690 --> 00:00:48.110
micro frameworks out there,
in that it is very minimal.

11
00:00:48.110 --> 00:00:55.960
And it's also by far the most popular
HTTP request handling library out there.

12
00:00:55.960 --> 00:00:59.817
I'm loath to call it a web framework
because it's not really a framework.

13
00:00:59.817 --> 00:01:03.477
It's a module that's really good at
routing HTTP requests to a chunk of

14
00:01:03.477 --> 00:01:06.410
JavaScript code that you would
like to run on the server.

15
00:01:07.720 --> 00:01:12.964
Unlike a framework like Rails or
ASP.net, NVC, or

16
00:01:12.964 --> 00:01:18.900
Spring, batteries are absolutely
not included with Express.

17
00:01:18.900 --> 00:01:23.799
Anything you want Express to do,
you have to install as

18
00:01:23.799 --> 00:01:29.453
additional middleware or
some other add-on to the software.

19
00:01:29.453 --> 00:01:33.285
So there's good things and
bad things about this.

20
00:01:33.285 --> 00:01:37.385
The good thing is that you never
end up with more bloat in your

21
00:01:37.385 --> 00:01:40.435
application than you absolutely require.

22
00:01:40.435 --> 00:01:43.771
Because you're consciously choosing
every single piece of software

23
00:01:43.771 --> 00:01:47.210
that's executed when you're
handling an HTTP request.

24
00:01:47.210 --> 00:01:50.410
The downside is that there
are no intelligent defaults.

25
00:01:50.410 --> 00:01:56.400
So if you want to do something like,
I don't know parse incoming post requests

26
00:01:56.400 --> 00:02:01.968
from a client, you need to install
an extra piece of middleware to do that.

27
00:02:01.968 --> 00:02:05.004
Which we have in our
our sample application.

28
00:02:05.004 --> 00:02:08.520
So there's good things and
bad things about that design.

29
00:02:08.520 --> 00:02:12.960
The reason why I still like it very
much today is because it's not magical.

30
00:02:12.960 --> 00:02:18.900
It's very easy for me to reason about what
this piece of software is actually doing.

31
00:02:18.900 --> 00:02:23.810
And the reason for that is it's
all based on a middleware stack.

32
00:02:23.810 --> 00:02:25.100
Before we go any any further,

33
00:02:25.100 --> 00:02:28.535
does anybody know what this picture
is a reference to, by any chance?

34
00:02:28.535 --> 00:02:30.489
No?

35
00:02:30.489 --> 00:02:35.287
All right, so what you all need to
do today when you go home is fire up

36
00:02:35.287 --> 00:02:38.475
your Kindle and download Ready Player One.

37
00:02:38.475 --> 00:02:40.623
It's the name of the name of the book.

38
00:02:40.623 --> 00:02:43.893
And this is the stacks,
which is a vertical trailer home,

39
00:02:43.893 --> 00:02:48.040
which is a trailer park which
is featured in Ready Player One.

40
00:02:48.040 --> 00:02:51.840
A fantastic book you will not
be sorry that you did that.

41
00:02:51.840 --> 00:02:54.831
But the middleware stack
is all Express is.

42
00:02:54.831 --> 00:02:59.497
It's just executing a set of JavaScript
functions to process an incoming HTTP

43
00:02:59.497 --> 00:03:02.760
request, which is coming
into your web application.

44
00:03:04.040 --> 00:03:09.047
So when your web app receives
a HTTP request on port 3000 or

45
00:03:09.047 --> 00:03:13.769
wherever it's running,
usually what happens is Express

46
00:03:13.769 --> 00:03:17.736
will execute something
called the middleware.

47
00:03:17.736 --> 00:03:22.932
And that's just a fancy name for
a JavaScript function, which takes in

48
00:03:22.932 --> 00:03:27.956
an HTTP request, execute some logic and
either returns a response or

49
00:03:27.956 --> 00:03:32.580
passes it ahead to the next
handler in the middleware stacked.

50
00:03:32.580 --> 00:03:37.930
So, in a typical Express application,
you have some number of global middleware,

51
00:03:37.930 --> 00:03:41.610
they're gonna run on almost
every request or every request.

52
00:03:41.610 --> 00:03:45.300
And we'll see how we can
figure that here in a second.

53
00:03:45.300 --> 00:03:49.086
We'll also have some specific
routes in our applications.

54
00:03:49.086 --> 00:03:53.383
So we'll wanna handle specific
URLs with specific logic, for

55
00:03:53.383 --> 00:03:56.707
maybe getting a to-do item
out of our database or

56
00:03:56.707 --> 00:04:03.240
executing other logic when a certain path
is requested within the web application.

57
00:04:03.240 --> 00:04:06.237
And then if the global middleware and

58
00:04:06.237 --> 00:04:11.078
the application routes are unable
to process the request.

59
00:04:11.078 --> 00:04:16.591
Or, God forbid, an error happens during
the execution of those middleware,

60
00:04:16.591 --> 00:04:21.102
we can have other middleware that's
lower down in our stack that

61
00:04:21.102 --> 00:04:24.121
will catch errors like a 404 not found.

62
00:04:24.121 --> 00:04:28.202
Like, if we don't have a handler to
handle a certain kind of request.

63
00:04:28.202 --> 00:04:32.920
Or a 500 error if one of our other
middlewares throws an exception.

64
00:04:32.920 --> 00:04:38.130
So we have this stack of JavaScript
functions that are executed sequentially.

65
00:04:38.130 --> 00:04:44.008
At some point, someone is going to return
a response of some kind, hopefully.

66
00:04:44.008 --> 00:04:45.338
It's kind of how this works.

67
00:04:45.338 --> 00:04:49.772
And if you've done any servlet programming
or developed Rack applications for Ruby,

68
00:04:49.772 --> 00:04:53.370
you might be kind of familiar with
this concept of a middleware stack.

