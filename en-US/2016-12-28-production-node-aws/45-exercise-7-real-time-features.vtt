WEBVTT

1
00:00:00.000 --> 00:00:03.890
[MUSIC]

2
00:00:03.890 --> 00:00:08.076
&gt;&gt; Kevin Whinnery: The issue that I
have right now with the application,

3
00:00:08.076 --> 00:00:11.145
which will be labeled exercise seven,

4
00:00:11.145 --> 00:00:16.180
is to update the TODO list when
a new TODO is added via web socket.

5
00:00:17.910 --> 00:00:21.040
The way that the view
application works right now is

6
00:00:21.040 --> 00:00:26.010
it appears that TODO items are added
to the database in real time.

7
00:00:26.010 --> 00:00:29.260
But really what happens is
we add them to an array.

8
00:00:29.260 --> 00:00:32.200
The array gets rendered
in our interface and

9
00:00:32.200 --> 00:00:37.560
then we make a request of the server which
actually persists it onto the database.

10
00:00:37.560 --> 00:00:41.980
So the challenge that I would
like to pose for all of you is to

11
00:00:41.980 --> 00:00:46.920
create a socket connection between
the TODO client and the server.

12
00:00:46.920 --> 00:00:50.080
And whenever a new TODO is added, and

13
00:00:50.080 --> 00:00:52.670
right now we just do it for,
we can do it for an ADD.

14
00:00:52.670 --> 00:00:56.990
If you want to try to implement it for
an update too that's totally fine.

15
00:00:56.990 --> 00:01:00.710
But we won't immediately
add the TODO list item

16
00:01:00.710 --> 00:01:04.150
to the array associated
with the view component.

17
00:01:04.150 --> 00:01:06.740
We'll actually make
a request to the server,

18
00:01:06.740 --> 00:01:11.240
save it in the database like we are right
now and then when the TODO list item has

19
00:01:11.240 --> 00:01:16.110
been successfully saved, we will
omit from the server to the client.

20
00:01:16.110 --> 00:01:21.770
Containing the saved to do list item
which then will be added to the array and

21
00:01:21.770 --> 00:01:24.530
then represented in our user interface.

22
00:01:24.530 --> 00:01:28.800
So what it'll be only when the TODO
list item has actually been persisted

23
00:01:28.800 --> 00:01:31.250
that it will be displayed
in the user interface,

24
00:01:31.250 --> 00:01:33.970
which hopefully should be pretty
close to pretty close to real time.

25
00:01:35.460 --> 00:01:38.240
So after lunch we're going
to take a crack at that.

26
00:01:38.240 --> 00:01:42.970
And yeah, that should be a good time and

27
00:01:42.970 --> 00:01:46.220
give you a chance to dig
into Socket IO a little bit.

28
00:01:46.220 --> 00:01:53.090
The challenge here is going to be how
you structure your Socket IO code.

29
00:01:53.090 --> 00:01:55.830
So right here we kind of have
everything in the same file and

30
00:01:55.830 --> 00:01:59.450
access to the HTP server and
all that jazz.

31
00:01:59.450 --> 00:02:02.900
But generally speaking that's not
the way you're gonna wanna handle

32
00:02:02.900 --> 00:02:04.670
it in your application.

33
00:02:04.670 --> 00:02:09.683
So much as we have this
web app.js file which kind

34
00:02:09.683 --> 00:02:14.332
of creates a reusable express application,

35
00:02:14.332 --> 00:02:18.860
we're probably gonna wanna create another

36
00:02:18.860 --> 00:02:23.649
file which manages Socket.IO related data.

37
00:02:23.649 --> 00:02:29.391
As a little bit of a spoiler probably what
you're gonna wanna do is in a module,

38
00:02:29.391 --> 00:02:34.176
create an object which exports one
function which is a connection

39
00:02:34.176 --> 00:02:37.753
handler which will be used
by the socket server.

40
00:02:37.753 --> 00:02:42.160
So if I bring up this simple connection or
the simple example,

41
00:02:42.160 --> 00:02:47.078
you probably wanna create a module
which has this function which will

42
00:02:47.078 --> 00:02:51.620
be called every time a new socket
connects to the application.

43
00:02:51.620 --> 00:02:53.170
That module,

44
00:02:53.170 --> 00:02:58.310
for the sake of argument should probably
create like a global registry of sockets,

45
00:02:58.310 --> 00:03:01.710
of all the sockets there are currently
connected to the system.

46
00:03:01.710 --> 00:03:05.730
And then that module should probably
have another function which will allow

47
00:03:05.730 --> 00:03:11.470
the controllers to omit messages to
all the currently connected sockets.

48
00:03:11.470 --> 00:03:15.950
So you're gonna be creating a common
JS module that exports two functions.

49
00:03:15.950 --> 00:03:19.870
One is going to handle incoming socket
connections and the other is gonna be used

50
00:03:19.870 --> 00:03:24.450
by controllers to emit messages to
the currently connected sockets.

51
00:03:25.530 --> 00:03:26.720
And again,

52
00:03:26.720 --> 00:03:31.230
because that's a decent amount of code I
thought I would at least prime the pump

53
00:03:31.230 --> 00:03:35.270
a little bit with what I think would
probably be a reasonable implementation.

54
00:03:36.270 --> 00:03:38.400
So I will break now for lunch and

55
00:03:38.400 --> 00:03:42.940
then we'll take another half hour on
top of that to tackle the challenge.

56
00:03:42.940 --> 00:03:43.750
And then we'll come back and

57
00:03:43.750 --> 00:03:47.420
look at the solution at 1:30
along with the UJS solution.

58
00:03:48.660 --> 00:03:50.110
&gt;&gt; Speaker 2: I've got
a kinda quick question.

59
00:03:50.110 --> 00:03:51.780
&gt;&gt; Kevin Whinnery: Yeah.
&gt;&gt; Speaker 2: It seems like the whole

60
00:03:51.780 --> 00:03:56.110
socket IO kind of a template is

61
00:03:56.110 --> 00:04:00.670
much cleaner than messaging
then a restful interface.

62
00:04:01.700 --> 00:04:04.360
What's the tradeoff between them.

63
00:04:04.360 --> 00:04:05.790
I know in socket I was a lot faster.

64
00:04:07.250 --> 00:04:12.790
&gt;&gt; Kevin Whinnery: Between a restful
interface and a socket connection I mean,

65
00:04:12.790 --> 00:04:17.030
it's kind of about the kind of
client that you expect to connect.

66
00:04:18.210 --> 00:04:22.220
It's possible to do authentication
with web socket connections,

67
00:04:22.220 --> 00:04:24.671
if that's something you wanna do.

68
00:04:24.671 --> 00:04:25.970
But yeah,

69
00:04:25.970 --> 00:04:31.610
I mean there's other than exposing
an API that can be used by all kinds of

70
00:04:31.610 --> 00:04:35.770
clients like not every kind of client can
create a socket connection to your server.

71
00:04:35.770 --> 00:04:39.120
And like do create read update
to the operations that way

72
00:04:39.120 --> 00:04:42.100
having a restful interface
is probably more accessible.

73
00:04:42.100 --> 00:04:46.300
But yeah you could certainly architect
your system in such a way where most of

74
00:04:47.400 --> 00:04:50.760
your average credit operations
happen over a Web socket.

75
00:04:50.760 --> 00:04:53.210
&gt;&gt; Speaker 2: If you're
controlling both ends of the pipe

76
00:04:53.210 --> 00:04:56.255
sockets would be more efficient.

77
00:04:56.255 --> 00:04:58.630
&gt;&gt; Kevin Whinnery: Potentially yeah.

78
00:04:58.630 --> 00:05:00.300
It's certainly is faster.

79
00:05:01.760 --> 00:05:07.270
But the support for like authentication
especially is a little more fit only

80
00:05:07.270 --> 00:05:09.570
with web sockets than it is with Rest.

81
00:05:10.710 --> 00:05:15.260
With Rest you have cookies where
you can store authentication tokens

82
00:05:16.560 --> 00:05:21.190
and by default you don't get that
with a web socket connection.

83
00:05:21.190 --> 00:05:24.640
There are other modules you can use
to get that type of functionality.

84
00:05:25.810 --> 00:05:28.500
There's no reason why you couldn't
implement a lot of your services

85
00:05:28.500 --> 00:05:29.690
over WebSockets if you wanted to.

