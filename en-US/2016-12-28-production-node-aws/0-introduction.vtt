WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:39.393 --> 00:00:40.990
&gt;&gt; Kevin Whinnery: Well yeah,
very, very stoked to be here.

3
00:00:40.990 --> 00:00:44.840
As Mark said, my name is Kevin Whinnery,
I work for an outfit called Twilio.

4
00:00:44.840 --> 00:00:47.962
We make an API that lets you send and
receive text messages,

5
00:00:47.962 --> 00:00:52.180
make and receive phone calls, and
embed chat and video calling, and

6
00:00:52.180 --> 00:00:56.830
any kind of communication experience that
you might imagine into your applications.

7
00:00:56.830 --> 00:01:00.170
And I lead a team called
Developer Education, and

8
00:01:00.170 --> 00:01:05.090
we build the the website which
serves twilio.com/docs, and

9
00:01:05.090 --> 00:01:08.330
also manage a couple other
internal services as well.

10
00:01:09.360 --> 00:01:11.590
And yeah, I'm very,
very stoked to be here.

11
00:01:11.590 --> 00:01:16.316
One of my favorite parts about the about
the job is when I can get in front of

12
00:01:16.316 --> 00:01:17.489
groups of folks.

13
00:01:17.489 --> 00:01:23.397
And work through some content, and
facilitate some learning on your part,

14
00:01:23.397 --> 00:01:28.330
on a subject that I like to talk
about a lot, which is Node.js.

15
00:01:28.330 --> 00:01:33.640
Just a quick refresher on the agenda,
we are gonna be here for two days.

16
00:01:33.640 --> 00:01:35.890
So make sure that you
take care of yourself,

17
00:01:35.890 --> 00:01:38.290
take breaks whenever you need to.

18
00:01:38.290 --> 00:01:41.304
Cuz it's definitely gonna
be a lot of content and

19
00:01:41.304 --> 00:01:44.915
a lot of code for over the course
of the next couple of days.

20
00:01:44.915 --> 00:01:49.104
And today, we're gonna start off by
getting to know some folks here in

21
00:01:49.104 --> 00:01:52.170
the room, and
also hopefully online a little bit.

22
00:01:52.170 --> 00:01:54.280
Looks like we have a good set of folks,

23
00:01:54.280 --> 00:01:57.270
52 users right now online,
which is pretty awesome.

24
00:01:57.270 --> 00:02:00.270
And then, over the course
of the next couple of days,

25
00:02:00.270 --> 00:02:05.680
we'll be talking about a Node.js
application code base.

26
00:02:05.680 --> 00:02:08.853
And I'll get into some of the theory
around that after we talk about

27
00:02:08.853 --> 00:02:09.710
the agenda here.

28
00:02:09.710 --> 00:02:15.500
But we'll kind of start with the basics
of just running a Node.js web server.

29
00:02:15.500 --> 00:02:17.510
Talk a little bit about
some of the build tools and

30
00:02:17.510 --> 00:02:21.530
the automation that's built into
the project that we'll be looking at.

31
00:02:21.530 --> 00:02:24.635
We'll take a break after we, and

32
00:02:24.635 --> 00:02:29.520
we'll be writing code, a lot of code,
in between each of these presentations.

33
00:02:29.520 --> 00:02:33.200
Then we'll talk about the data
tier of the application, and

34
00:02:33.200 --> 00:02:35.070
some of the choices we made there.

35
00:02:35.070 --> 00:02:40.219
And then we'll cap off the day by actually
deploying this application to AWS.

36
00:02:40.219 --> 00:02:44.816
So if you haven't already,
now would be an excellent time, or

37
00:02:44.816 --> 00:02:49.000
at some in the near future,
to sign up for an AWS account.

38
00:02:49.000 --> 00:02:53.480
Everything that we'll today can be
done with the free tier of services.

39
00:02:53.480 --> 00:02:56.890
So you can sign up for an account, and
then we'll actually kind of together,

40
00:02:56.890 --> 00:03:00.200
go through the steps that
you need to accomplish

41
00:03:00.200 --> 00:03:03.600
to get this application configured and
deployed.

42
00:03:03.600 --> 00:03:07.800
And we'll be doing a little
more manually than you might,

43
00:03:07.800 --> 00:03:09.740
after you've done this a few times.

44
00:03:09.740 --> 00:03:12.850
But configuring the stack manually

45
00:03:12.850 --> 00:03:16.920
has some advantages in learning kind
of what some of the moving parts are.

46
00:03:16.920 --> 00:03:21.350
So we'll be kind of configuring
our production environment, and

47
00:03:21.350 --> 00:03:24.106
kind of understanding what all
those different moving pieces are.

48
00:03:24.106 --> 00:03:27.640
And tomorrow,
we'll be talking about the front end, so

49
00:03:27.640 --> 00:03:32.620
we'll talk about some of the front
end tool chain bits that we're using

50
00:03:32.620 --> 00:03:37.980
to build and compile our JavaScript and
CSS assets for the front end.

51
00:03:37.980 --> 00:03:42.950
And then we'll talk about how we actually
build the front end with Vue.js.

52
00:03:42.950 --> 00:03:47.250
Our sample application uses Vue, it's

53
00:03:47.250 --> 00:03:51.880
not quite the behemoth of, say React,
or Angular, or one of those.

54
00:03:51.880 --> 00:03:55.780
But the toolchain and
the general techniques of

55
00:03:55.780 --> 00:03:59.970
building an application like this
will be similar across all of those.

56
00:03:59.970 --> 00:04:02.659
And if you haven't checked out Vue before,

57
00:04:02.659 --> 00:04:07.528
hopefully that kind of whet your appetite
for what I think is a kind of nice middle

58
00:04:07.528 --> 00:04:10.665
ground between very large
frameworks like React.

59
00:04:10.665 --> 00:04:14.530
Which kind of assert themselves
into your application in a big way.

60
00:04:14.530 --> 00:04:16.990
And something maybe
lightweight like jQuery.

61
00:04:16.990 --> 00:04:20.350
I think it kind of sits in an interesting
middle ground between those two

62
00:04:20.350 --> 00:04:21.380
frameworks.

63
00:04:21.380 --> 00:04:24.520
We'll talk a little bit about
how we create a real-time

64
00:04:24.520 --> 00:04:27.070
component to this application.

65
00:04:27.070 --> 00:04:29.950
And some of the things that
we have to work through

66
00:04:29.950 --> 00:04:34.532
in our production environment on AWS
to make sure that that works correctly.

67
00:04:34.532 --> 00:04:39.788
We'll take a little break, and then we'll
finish up the [COUGH] afternoon by looking

68
00:04:39.788 --> 00:04:44.690
at some of the lesser known, the lesser
celebrated parts of web development.

69
00:04:44.690 --> 00:04:48.750
Which are the things that you have to do
after the application is deployed to make

70
00:04:48.750 --> 00:04:51.340
sure that it stays running in production.

71
00:04:51.340 --> 00:04:54.430
That it can handle
a reasonable amount of load,

72
00:04:54.430 --> 00:04:58.200
that it is actually solving problems for
your users.

73
00:04:58.200 --> 00:05:01.060
And how to kind of
instrument your application

74
00:05:01.060 --> 00:05:03.770
to understand how users
are interacting with it.

75
00:05:03.770 --> 00:05:06.560
So we'll talk a little bit about
those production monitoring and

76
00:05:06.560 --> 00:05:07.964
load testing tools.

77
00:05:07.964 --> 00:05:11.010
And also dig into some web
analytics stuff as well.

78
00:05:12.330 --> 00:05:15.140
And then, afterwards,
I will definitely stick around for

79
00:05:15.140 --> 00:05:18.540
as long as folks want to for
Q and A on both days.

80
00:05:18.540 --> 00:05:23.297
And we should have enough time,
in between each of the presentations, and

81
00:05:23.297 --> 00:05:27.919
the brief demos, to answer any questions
that folks might have as well.

82
00:05:27.919 --> 00:05:32.400
And I'm happy to dive as deep as
I can into those different areas.

83
00:05:32.400 --> 00:05:40.810
So the title of this course is
Zero To Production With Node.js.

84
00:05:40.810 --> 00:05:45.380
And the reason I wanted to approach
the workshop like this in a slightly

85
00:05:45.380 --> 00:05:50.570
different way, Mark said I actually
did do a workshop many years ago.

86
00:05:50.570 --> 00:05:55.600
Which focused on just a sort of basic
introduction to Node.js, and some of

87
00:05:55.600 --> 00:06:00.160
the key modules that you are likely to use
in your journey as a Node.js developer.

88
00:06:00.160 --> 00:06:03.730
But that is really kind of the easy part,
right?

89
00:06:03.730 --> 00:06:08.760
Writing code that does stuff is something
that we're all reasonably good at.

90
00:06:08.760 --> 00:06:10.830
We can download a module,

91
00:06:10.830 --> 00:06:14.480
we can dig through the documentation,
we can figure out how it works.

92
00:06:14.480 --> 00:06:19.190
What is not necessarily super well
understood is how you fit all those

93
00:06:19.190 --> 00:06:24.300
pieces together in an actual code
base that builds an application and

94
00:06:24.300 --> 00:06:26.950
solves a problem for a user.

95
00:06:26.950 --> 00:06:31.330
So the goal of this workshop
is to get everybody in here

96
00:06:31.330 --> 00:06:33.950
walking away with a starting point.

97
00:06:33.950 --> 00:06:36.860
I imagine that all of
us will wanna customize

98
00:06:36.860 --> 00:06:39.650
some of the components that
we'll find here quite a bit.

99
00:06:39.650 --> 00:06:43.980
But I would like us to at least
walk away with a starting

100
00:06:43.980 --> 00:06:46.600
point that has a productive
development environment

101
00:06:46.600 --> 00:06:50.050
that you can iterate on quickly
as you're building features.

102
00:06:50.050 --> 00:06:54.929
And also one that won't fall over under
under a reasonable amount of load.

103
00:06:54.929 --> 00:06:59.780
We're not gonna be creating a deployment
infrastructure to run Netflix or Twitter.

104
00:06:59.780 --> 00:07:03.470
But we should be able to
understand what the performance

105
00:07:03.470 --> 00:07:05.800
ceiling is of our application.

106
00:07:05.800 --> 00:07:11.000
And we'll hopefully leave today with
the tools to understand what that is.

107
00:07:11.000 --> 00:07:16.450
So we'll be walking through a sample
project which uses a structure which

108
00:07:16.450 --> 00:07:22.460
is very similar to what you might find
in a production Node application.

109
00:07:22.460 --> 00:07:26.780
Uses a lot of the same techniques and
tools, and is something that you can

110
00:07:26.780 --> 00:07:30.860
build on as a template to build your
own production Node applications.

111
00:07:30.860 --> 00:07:31.860
Over the next two days,

112
00:07:31.860 --> 00:07:35.420
you'll notice we're not going
too deep on any one module.

113
00:07:35.420 --> 00:07:37.770
We'll be talking a little bit about
Express we'll be talking a little bit

114
00:07:37.770 --> 00:07:40.550
about Sequelize and Postgres.

115
00:07:40.550 --> 00:07:44.860
Be talking a little bit about Grunt and
npm run scripts and

116
00:07:44.860 --> 00:07:47.820
some of the command line tooling.

117
00:07:47.820 --> 00:07:53.470
But again, the objective here is to
get a sense of what are all the pieces

118
00:07:53.470 --> 00:07:59.300
that you'll need to bring together to
actually deploy a Node.js web application.

119
00:07:59.300 --> 00:08:03.630
The other bit that I wanted to
expose you to with this content is,

120
00:08:03.630 --> 00:08:09.570
usage of newer ES 2015, ES 2016,
whatever you wanna call it,

121
00:08:09.570 --> 00:08:13.820
features of the JavaScript programming
language that are showing up in Node 6.

122
00:08:13.820 --> 00:08:19.577
Which is the version of Node that I
wrote and tested this content against.

123
00:08:19.577 --> 00:08:25.620
And using transforms, we can actually
also use that same code in the browser.

124
00:08:25.620 --> 00:08:28.490
So I wanted to give you a little
bit of exposure to those

125
00:08:28.490 --> 00:08:32.180
new JavaScript programming
language features that you may or

126
00:08:32.180 --> 00:08:35.990
may not have started to use in
your own applications already.

127
00:08:35.990 --> 00:08:39.830
But mostly, the most important bit is
that bit down on the bottom there,

128
00:08:39.830 --> 00:08:41.589
is taking the time to write code.

129
00:08:42.890 --> 00:08:47.980
The collective opportunity cost of
everybody here in the room, and

130
00:08:47.980 --> 00:08:50.590
the 50 people online, is tremendous.

131
00:08:50.590 --> 00:08:54.720
There's nothing more valuable in the world
than an hour of a developer's time.

132
00:08:54.720 --> 00:08:59.107
So number one, I really appreciate you
spending that time here with me and

133
00:08:59.107 --> 00:09:01.290
learning about Node.js.

134
00:09:01.290 --> 00:09:05.515
And number two, I think that the best
investment of that time is just getting

135
00:09:05.515 --> 00:09:07.030
soak time writing code.

136
00:09:07.030 --> 00:09:11.580
There's no substitute for
actually digging into code,

137
00:09:11.580 --> 00:09:16.590
debugging stuff, referencing
documentation, figuring things out.

138
00:09:16.590 --> 00:09:20.860
So this workshop experience has been
optimized to allow you to write

139
00:09:20.860 --> 00:09:25.170
lots of code with support from everybody
here in this room, and support from me.

140
00:09:25.170 --> 00:09:28.220
But really to get you that time and
repetition.

141
00:09:28.220 --> 00:09:31.970
You will be your own best teacher,
here in the in the next two days.

