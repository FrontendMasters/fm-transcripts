WEBVTT

1
00:00:00.000 --> 00:00:04.021
[MUSIC]

2
00:00:04.021 --> 00:00:08.818
&gt;&gt; Kevin Whinnery: The other bit that
I was gonna show is just a few minor

3
00:00:08.818 --> 00:00:10.612
features of SCSS.

4
00:00:10.612 --> 00:00:16.020
So here is the very simple CSS
that we have for the application.

5
00:00:16.020 --> 00:00:21.030
Most of the styling for the TodoMVC
application is provided by some

6
00:00:21.030 --> 00:00:26.290
external style sheets that we
don't necessarily care about.

7
00:00:26.290 --> 00:00:32.010
Those are actually located here in
the base in index style sheets,

8
00:00:32.010 --> 00:00:35.360
all of the different
implementations of TodoMVC.

9
00:00:35.360 --> 00:00:40.820
Of which there are many, by the way, I
don't know if I called that out yesterday.

10
00:00:40.820 --> 00:00:45.850
But if you're interested in seeing
the same application implemented across

11
00:00:45.850 --> 00:00:50.510
multiple frameworks,
you can head out to TodoMVC.com and

12
00:00:50.510 --> 00:00:53.630
kind of compare and
contrast different approaches to this.

13
00:00:53.630 --> 00:00:55.960
So this is the place where I got the code,

14
00:00:55.960 --> 00:00:57.700
if you haven't navigated
out there already.

15
00:01:00.010 --> 00:01:04.630
So in our case, we actually don't
have a lot of custom CSS yet.

16
00:01:06.690 --> 00:01:11.476
But some of the features that
Sass provides you that you

17
00:01:11.476 --> 00:01:16.475
wouldn't necessarily have
otherwise are the ability to

18
00:01:16.475 --> 00:01:21.055
create variables and
mix-ins and to nest your CSS,

19
00:01:21.055 --> 00:01:26.285
which is actually one of the things
that I find most useful.

20
00:01:26.285 --> 00:01:28.790
So for our server,
let's go ahead and run our server.

21
00:01:33.160 --> 00:01:35.120
Come on now, expected character.

22
00:01:38.415 --> 00:01:42.417
Yeah, I didn't back out the JavaScript
changes, so let's do that.

23
00:01:51.559 --> 00:01:52.200
&gt;&gt; Kevin Whinnery: Okay, super.

24
00:01:55.966 --> 00:01:59.680
&gt;&gt; Kevin Whinnery: All right, so
here's our to do application.

25
00:01:59.680 --> 00:02:00.210
As you can see,

26
00:02:00.210 --> 00:02:05.260
I was spamming in quite a few entries
into the [INAUDIBLE] earlier on.

27
00:02:05.260 --> 00:02:09.328
But when I'm writing my CSS code,

28
00:02:09.328 --> 00:02:16.763
I'm usually kind of concerned
about the structure of my HTML,

29
00:02:16.763 --> 00:02:22.675
so I have this section where
all of my to do's are.

30
00:02:22.675 --> 00:02:26.210
I have this,
an ordered list with all of my to do's.

31
00:02:26.210 --> 00:02:31.662
And I'm used to being able to write HTML
in a nice nested structure like this.

32
00:02:31.662 --> 00:02:37.140
And SAS lets me write CSS in
that nested structure as well.

33
00:02:37.140 --> 00:02:39.430
So in here, let's say I wanted to

34
00:02:41.660 --> 00:02:46.390
add some styling to the list
items in my main class.

35
00:02:46.390 --> 00:02:50.910
So I can come in here and
write a selector for

36
00:02:50.910 --> 00:02:55.230
the main div much like
you would in Vanilla CSS.

37
00:02:57.220 --> 00:03:05.460
And what I could do if I wanted to
target the list items of this list.

38
00:03:05.460 --> 00:03:08.910
I could write a selector that
went something like this,

39
00:03:08.910 --> 00:03:13.430
so for the owner, or excuse me,

40
00:03:13.430 --> 00:03:19.520
the owner list items, these are the CSS
classes I would like to apply.

41
00:03:19.520 --> 00:03:26.150
But that's not super dry because if
I also wanted to style d on our list,

42
00:03:26.150 --> 00:03:32.410
itself, I'd have to have another CSS
declaration up there to do that.

43
00:03:32.410 --> 00:03:37.620
So one of the nice things you can do
you in SaaS is nest those declarations.

44
00:03:37.620 --> 00:03:40.665
So within the main div,

45
00:03:40.665 --> 00:03:45.724
I'm going to add some styles to the UL.

46
00:03:45.724 --> 00:03:50.040
Let's say, this might break the layout but

47
00:03:50.040 --> 00:03:55.080
I'll add a nice big padding all
the way around the ordered list.

48
00:03:55.080 --> 00:03:59.850
And then for the list items,
I'm gonna change the font style,

49
00:04:01.230 --> 00:04:07.990
obviously, to Comic Sans MS
to class it up a little bit.

50
00:04:07.990 --> 00:04:15.480
So our tooling found the changes to
the SaaS, automatically recompiled.

51
00:04:15.480 --> 00:04:19.560
If I come back out here,
looks like I need to be

52
00:04:19.560 --> 00:04:24.213
more specific with my list item styling
but I've got my big padding around the UL.

53
00:04:24.213 --> 00:04:29.024
Obviously, we could just do that.

54
00:04:29.024 --> 00:04:30.847
&gt;&gt; [LAUGH]
&gt;&gt; Kevin Whinnery: I won't

55
00:04:30.847 --> 00:04:32.101
actually fix it.

56
00:04:32.101 --> 00:04:38.030
&gt;&gt; Speaker 2: I just saw a tweet that
important is sounding like importing ants.

57
00:04:38.030 --> 00:04:39.290
&gt;&gt; Kevin Whinnery: Importing ants.

58
00:04:39.290 --> 00:04:40.297
&gt;&gt; Speaker 2: Into your CSS.

59
00:04:40.297 --> 00:04:42.819
&gt;&gt; Kevin Whinnery: In fact,
I think it might must not be the LI.

60
00:04:42.819 --> 00:04:48.546
There's another div in here
called the view input, and

61
00:04:48.546 --> 00:04:54.640
it's a label so I don't know if
it's a cascading down that far.

62
00:04:54.640 --> 00:05:00.294
So here if I did the label.

63
00:05:00.294 --> 00:05:03.420
I just have to see it in Comic Sans now,
I have to get my fix.

64
00:05:03.420 --> 00:05:08.330
&gt;&gt; Speaker 3: Actually, it's cuz of
your CSS properties, use font style.

65
00:05:08.330 --> 00:05:12.261
&gt;&gt; Kevin Whinnery: Font family,
yeah, there we go.

66
00:05:16.078 --> 00:05:17.832
&gt;&gt; Kevin Whinnery: There we go,
much better.

67
00:05:17.832 --> 00:05:20.010
&gt;&gt; [LAUGH]
&gt;&gt; Kevin Whinnery: Yes, so

68
00:05:20.010 --> 00:05:25.136
that's one of my favorite
features is that you can

69
00:05:25.136 --> 00:05:30.270
keep your CSS much drier
by nesting it in this way.

70
00:05:32.230 --> 00:05:39.930
And let's say, now that we've decided that
Comic Sans is clearly the best font for

71
00:05:39.930 --> 00:05:44.894
this application, and
we want to apply it globally.

72
00:05:44.894 --> 00:05:49.810
We can create a variable
called app font or

73
00:05:49.810 --> 00:05:54.728
something like that, and essentially,

74
00:05:54.728 --> 00:05:58.389
set that equal to this string.

75
00:05:58.389 --> 00:06:03.266
So we can use this Comic Sans MS,
font family declaration, and

76
00:06:03.266 --> 00:06:05.670
we can use that variable here.

77
00:06:07.580 --> 00:06:11.300
As the app font we could also say for

78
00:06:11.300 --> 00:06:13.770
our, I believe, it's an H one,
I'll double check.

79
00:06:15.910 --> 00:06:19.298
And say for the H one in our application,

80
00:06:19.298 --> 00:06:24.493
I wanna do the same thing when
you use the app font font family.

81
00:06:24.493 --> 00:06:31.000
So I've come out here and refresh,
it is actually quite a bit better.

82
00:06:31.000 --> 00:06:33.519
I think they should have done that,
to begin with.

83
00:06:35.400 --> 00:06:38.520
So few bits they are really useful.

84
00:06:38.520 --> 00:06:43.400
And then let's say,
your CSS is getting a little crazy.

85
00:06:43.400 --> 00:06:47.530
You feel the need to
break it up a little bit.

86
00:06:47.530 --> 00:06:53.640
If you want to import CSS into
regular CSS style sheets,

87
00:06:53.640 --> 00:06:59.590
there is one and only one place you can do
that which is at the top of the CSS file.

88
00:06:59.590 --> 00:07:05.590
And you can't do that nested
within other CSS declarations.

89
00:07:05.590 --> 00:07:13.503
But what we can do with SaaS is move this
content out to something called a partial,

90
00:07:13.503 --> 00:07:20.840
which by convention as a file name,
we prefix it with an underscore.

91
00:07:20.840 --> 00:07:23.747
We can call this main.css.

92
00:07:23.747 --> 00:07:27.409
And here, in that SaaS file,

93
00:07:27.409 --> 00:07:31.509
I can have these declarations and

94
00:07:31.509 --> 00:07:38.400
not necessarily that you
would structured in this way.

95
00:07:38.400 --> 00:07:45.511
But now, rather than declaring them
in line, I can actually include,

96
00:07:47.272 --> 00:07:53.555
&gt;&gt; Kevin Whinnery: The main.scss.

97
00:07:53.555 --> 00:07:56.457
&gt;&gt; Speaker 3: Does anyone
underscore on that?

98
00:07:56.457 --> 00:07:58.916
&gt;&gt; Kevin Whinnery: The underscore
is conventional.

99
00:07:58.916 --> 00:08:02.818
It denotes a SaaS file as a partial.

100
00:08:02.818 --> 00:08:08.530
And when you do the include, you don't
actually need to include the underscore.

101
00:08:14.723 --> 00:08:18.372
&gt;&gt; Kevin Whinnery: [INAUDIBLE]
was.

102
00:08:22.565 --> 00:08:23.292
&gt;&gt; Kevin Whinnery: What?

103
00:08:23.292 --> 00:08:24.365
You know what?

104
00:08:24.365 --> 00:08:24.990
I think I just goofed this up.

105
00:08:24.990 --> 00:08:26.831
I don't think I need the parenthesis.

106
00:08:26.831 --> 00:08:28.556
I think I can just do that.

107
00:08:35.065 --> 00:08:36.262
&gt;&gt; Kevin Whinnery: Or
maybe do I not even need that?

108
00:08:39.316 --> 00:08:42.075
&gt;&gt; Kevin Whinnery: I might have to-
&gt;&gt; Speaker 4: Include or import?

109
00:08:42.075 --> 00:08:42.710
&gt;&gt; Kevin Whinnery: What's that?

110
00:08:42.710 --> 00:08:43.496
&gt;&gt; Speaker 4: Is it include or import?

111
00:08:43.496 --> 00:08:46.024
&gt;&gt; Kevin Whinnery: I
thought it was include.

112
00:08:50.046 --> 00:08:52.066
&gt;&gt; Kevin Whinnery: And
I think I do need the quotes but yeah,

113
00:08:52.066 --> 00:08:53.621
I think it might be important.

114
00:08:53.621 --> 00:08:55.830
Yeah, there we go.

115
00:08:55.830 --> 00:09:02.300
Yeah, it's the danger of doing it live,
that's for sure.

116
00:09:02.300 --> 00:09:09.311
So now, if I refresh my page,
I still have my same stylings there.

117
00:09:09.311 --> 00:09:13.990
So you can include like nested CSS,
I mean this way as well.

118
00:09:13.990 --> 00:09:18.980
So basically, it gives your application
CSS an entirely new bag of tricks

119
00:09:18.980 --> 00:09:21.000
that it didn't have before.

120
00:09:23.532 --> 00:09:26.761
&gt;&gt; Speaker 5: What is it that's
actually monitoring the SaaS files and

121
00:09:26.761 --> 00:09:28.830
compiling it to CSS?

122
00:09:28.830 --> 00:09:29.540
&gt;&gt; Kevin Whinnery: Yeah, right on.

123
00:09:29.540 --> 00:09:34.280
So in our grunt file,
the default task which runs

124
00:09:34.280 --> 00:09:39.330
the development apps server
is this one the default task.

125
00:09:39.330 --> 00:09:44.030
And what that is gonna do is it's
initially gonna compile our SaaS and

126
00:09:44.030 --> 00:09:48.170
run our JavaScript code through browserify
like right away when we watch it.

127
00:09:48.170 --> 00:09:52.240
And then it's gonna launch
this task concurrent dev.

128
00:09:52.240 --> 00:09:56.710
And that's gonna do two things, it's gonna
launch two tasks, one of which is nodemon

129
00:09:56.710 --> 00:10:00.154
which is gonna watch for
changes to our server-side JavaScript.

130
00:10:00.154 --> 00:10:07.380
And the other is this guy or
is concurrent, where should I define that?

131
00:10:07.380 --> 00:10:08.460
Here we go.

132
00:10:08.460 --> 00:10:11.760
So here is where we define the task
that we want to run concurrently.

133
00:10:11.760 --> 00:10:14.820
One of them is Watch which is
gonna recompile our SaaS and

134
00:10:14.820 --> 00:10:16.460
our front end JavaScript.

135
00:10:16.460 --> 00:10:17.580
And then the other one is nodemon.

136
00:10:21.420 --> 00:10:26.402
&gt;&gt; Speaker 5: So it's really grunt
that's in the background, watching for

137
00:10:26.402 --> 00:10:28.658
changes to your Saas files?

138
00:10:28.658 --> 00:10:31.590
&gt;&gt; Kevin Whinnery: Yes,
it's a grunt plugin called Watch.

139
00:10:31.590 --> 00:10:36.170
It's in the contrib package here.

140
00:10:36.170 --> 00:10:40.794
So this Watch plugin has that capability.

141
00:10:40.794 --> 00:10:43.040
It can run tasks when
a certain condition is true.

