WEBVTT

1
00:00:00.000 --> 00:00:03.993
[MUSIC]

2
00:00:03.993 --> 00:00:07.916
&gt;&gt; Kevin Whinnery: So now we're going to
be moving on to our third exercise of

3
00:00:07.916 --> 00:00:13.420
the day, which is enhancing our data
model to use some additional properties.

4
00:00:14.860 --> 00:00:20.246
So, if we head out to GitHub,
&gt;&gt; Kevin Whinnery: You'll

5
00:00:20.246 --> 00:00:23.930
notice that there are two
issues remaining.

6
00:00:23.930 --> 00:00:26.940
Both are tagged with exercise three.

7
00:00:26.940 --> 00:00:32.950
And both will get you into a little bit
meatier parts of the of this application.

8
00:00:34.040 --> 00:00:39.867
The first is, and it could be that you'll
be able to knock these out both at once,

9
00:00:39.867 --> 00:00:44.411
because maybe you'll want to
write a test which exercises your

10
00:00:44.411 --> 00:00:47.426
new functionality that you're adding.

11
00:00:47.426 --> 00:00:52.569
But the first issue that I have is
that right now is that there's no

12
00:00:52.569 --> 00:00:57.920
way to track the status of a Todo
model once you mark it as complete.

13
00:00:57.920 --> 00:01:02.213
So, many of you were astute enough to

14
00:01:02.213 --> 00:01:06.084
note,
&gt;&gt; Kevin Whinnery: That when we actually

15
00:01:06.084 --> 00:01:08.841
run our application here
in development mode.

16
00:01:14.627 --> 00:01:17.498
&gt;&gt; Kevin Whinnery: When you mark
a todo item as complete, and

17
00:01:17.498 --> 00:01:21.870
refresh the page it doesn't
actually do anything.

18
00:01:21.870 --> 00:01:28.830
Now the way the user interface part of
this will actually get to get to tomorrow.

19
00:01:28.830 --> 00:01:33.340
That will be a sort of our entree into
learning a little bit about how VGS works.

20
00:01:33.340 --> 00:01:37.000
However, the backend part of this
is something that I'd like to for

21
00:01:37.000 --> 00:01:38.470
us to address today.

22
00:01:38.470 --> 00:01:45.020
So, what I would like for
folks to do is to take a D model for

23
00:01:45.020 --> 00:01:50.840
the todo, and add a Boolean flag for
whether or not it's been completed.

24
00:01:50.840 --> 00:01:53.760
And in addition to adding that flag,

25
00:01:53.760 --> 00:01:59.440
we also need to modify our API in Express.

26
00:02:00.440 --> 00:02:05.536
Implement it with Express to accept
a completed field, along with

27
00:02:05.536 --> 00:02:11.819
the current title field, which is the only
one that's persistent at the moment.

28
00:02:11.819 --> 00:02:13.933
And again I wouldn't spend too much time,

29
00:02:13.933 --> 00:02:17.380
I wouldn't spend any time
because we'll do that tomorrow.

30
00:02:17.380 --> 00:02:18.970
I'm trying to update the user interface.

31
00:02:18.970 --> 00:02:24.000
I would just look to test
these URL's directly.

32
00:02:24.000 --> 00:02:30.510
And if you're into doing that, the go to,
for me, I mean, if you're like Curl,

33
00:02:30.510 --> 00:02:35.784
that's great, but if you're using
Chrome there is an app called Post Man.

34
00:02:35.784 --> 00:02:41.150
And Postman I feel is kind of
the bee's knees if you're testing

35
00:02:41.150 --> 00:02:46.745
a rest API, because it gives you
a nice GUI that lets you construct

36
00:02:46.745 --> 00:02:52.170
HTTP requests with different HTTP
methods against your backend.

37
00:02:52.170 --> 00:02:57.500
So here and it sort of saves your history
as well which is also kind of nice.

38
00:02:57.500 --> 00:03:02.430
So here we can do a GET request
against /TODOs and hit Send,

39
00:03:02.430 --> 00:03:06.310
and then we can see the JSON
that comes back from the server.

40
00:03:06.310 --> 00:03:09.390
We can do a POST request to todos, and

41
00:03:09.390 --> 00:03:11.770
then along with that,
pass in some form encoded.

42
00:03:11.770 --> 00:03:15.785
And they do need to be form encoded, by
the way if you do decide to use this tool,

43
00:03:15.785 --> 00:03:19.820
cuz that's the way that
we're parsing the body.

44
00:03:19.820 --> 00:03:23.772
If we pass in some values like,

45
00:03:23.772 --> 00:03:28.028
hey there front end masters, and

46
00:03:28.028 --> 00:03:33.270
hit Send, we can create a todo that way.

47
00:03:33.270 --> 00:03:39.730
We get that representation back,
and if we list them out again

48
00:03:39.730 --> 00:03:44.230
we can see that the front end
masters record is in the database.

49
00:03:44.230 --> 00:03:50.290
So after you add that property using
something like Postman to test the API,

50
00:03:50.290 --> 00:03:52.290
would be it would be useful.

51
00:03:52.290 --> 00:03:57.280
In addition to that,
the second issue that I would like for

52
00:03:57.280 --> 00:04:02.510
folks to take a look at during this time,
Dovetail's kind of nicely into that, which

53
00:04:02.510 --> 00:04:06.600
is adding some integration tests which
we don't have yet in the application.

54
00:04:06.600 --> 00:04:11.810
We have like one kind of crappy unit
test for our back end right now.

55
00:04:11.810 --> 00:04:14.070
Test coverage in this
application is not great yet.

56
00:04:14.070 --> 00:04:19.160
So we could definitely do more unit
tests as we add more functionality

57
00:04:19.160 --> 00:04:24.640
to the application, but if our test
pyramid should be fat at the bottom

58
00:04:24.640 --> 00:04:30.250
with unit tests, and kind of skinnier
in the middle with integration tests,

59
00:04:30.250 --> 00:04:33.300
that's the part of the pyramid that
we're gonna be implementing next.

60
00:04:33.300 --> 00:04:36.282
And then, of course, at the top of the
pyramid you have some end to end tests,

61
00:04:36.282 --> 00:04:39.080
which we will talk about later.

62
00:04:39.080 --> 00:04:45.320
But we're at this point looking to add
to the middle of that test pyramid.

63
00:04:45.320 --> 00:04:48.130
I'm adding an integration test
where we're testing that,

64
00:04:48.130 --> 00:04:52.200
controller logic is working with model
logic in the way that we expect.

65
00:04:52.200 --> 00:04:56.350
So I would like for
us to write an integration test

66
00:04:56.350 --> 00:04:59.560
that covers our controller logic.

67
00:04:59.560 --> 00:05:03.560
So write at least one test, the challenge
here is to write at least one test for

68
00:05:03.560 --> 00:05:08.780
the todos controller that exercises
one of the crud operations.

69
00:05:08.780 --> 00:05:14.240
Now to do that, you're gonna have to mock
an express request and response object,

70
00:05:16.190 --> 00:05:20.890
and provide some values
that can be used to satisfy

71
00:05:20.890 --> 00:05:25.520
the requirements of the of the controller
logic that we have in that file.

72
00:05:25.520 --> 00:05:28.370
So that'll be part of the challenge there.

73
00:05:28.370 --> 00:05:33.320
So we'll probably for this, since this is
a meatier task, we'll take for sure 30

74
00:05:33.320 --> 00:05:38.340
minutes, we'll probably say 40 minutes,
to tackle this because this will

75
00:05:38.340 --> 00:05:43.880
be the first time that you've
engage with these technologies.

76
00:05:43.880 --> 00:05:48.421
And if you have any questions
on the testing front,

77
00:05:48.421 --> 00:05:56.040
you can just create if you'd like, create
a new file in the test directory here.

78
00:05:56.040 --> 00:05:58.830
And if you run an NPN in test

79
00:05:58.830 --> 00:06:04.060
any test logic that you run
will be picked up and executed.

80
00:06:04.060 --> 00:06:09.454
So if you'd like to take a crack at that
first before modifying the model at all,

81
00:06:09.454 --> 00:06:11.315
you can certainly do that.

82
00:06:11.315 --> 00:06:13.454
Or if you'd like to modify
the model first and

83
00:06:13.454 --> 00:06:17.550
update the API with this new property
you can take a crack at that first.

84
00:06:17.550 --> 00:06:21.295
But I think would be a good opportunity
to try to take a crack at both of

85
00:06:21.295 --> 00:06:22.190
these tasks.

86
00:06:22.190 --> 00:06:26.660
So adding one integration test for
the controller and

87
00:06:26.660 --> 00:06:30.700
then also adding the addition to the todo
model that we've been talking about.

