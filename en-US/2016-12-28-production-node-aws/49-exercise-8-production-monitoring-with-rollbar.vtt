WEBVTT

1
00:00:00.000 --> 00:00:03.856
[MUSIC]

2
00:00:03.856 --> 00:00:08.320
&gt;&gt; Kevin Whinnery: In the final bit that
you're gonna look at in the workshop

3
00:00:08.320 --> 00:00:12.320
session this afternoon is
a tool called a Rollbar.

4
00:00:14.110 --> 00:00:20.063
And a Rollbar, again super useful.

5
00:00:20.063 --> 00:00:25.981
You can sign up for a free trial
account to exercise it a little bit.

6
00:00:25.981 --> 00:00:31.604
But when you sign up, if you elect the
programming language you're looking for,

7
00:00:31.604 --> 00:00:37.640
gives you some handy dandy instructions
on how to get your module initialized.

8
00:00:37.640 --> 00:00:42.370
So you can start sending some test
notifications pretty quickly.

9
00:00:42.370 --> 00:00:47.620
But you'll find that there is
an express middleware that

10
00:00:47.620 --> 00:00:52.300
you can actually plug directly into your
application that will capture exceptions

11
00:00:52.300 --> 00:00:57.060
coming in to your express app and
send them directly to Rollbar.

12
00:00:57.060 --> 00:01:00.030
So your mission,
if you would choose to accept it,

13
00:01:01.530 --> 00:01:04.569
is to sign up for a free Rollbar account.

14
00:01:06.830 --> 00:01:13.020
And start sending any exceptions which
are caught by Express to RollBar.

15
00:01:13.020 --> 00:01:18.380
Now one thing that you'll I'm sure
figure out in your travels is

16
00:01:18.380 --> 00:01:24.190
that the order in which you add middleware
to an Express application is significant.

17
00:01:24.190 --> 00:01:28.321
And the errors that you put in place for
404 handling and for

18
00:01:28.321 --> 00:01:32.628
error handling are gonna come
after the routes that you define.

19
00:01:32.628 --> 00:01:39.109
So here in the routes file,
that's a different one.

20
00:01:40.530 --> 00:01:42.950
This is where your application
routes are defined.

21
00:01:42.950 --> 00:01:44.670
We're probably not gonna do it here.

22
00:01:44.670 --> 00:01:49.190
Where we're gonna go is into webapp.js
where we configure our other middleware.

23
00:01:49.190 --> 00:01:50.860
And after our

24
00:01:52.560 --> 00:01:57.569
other routes in middleware have had
a chance to try to handle the request.

25
00:01:59.170 --> 00:02:02.090
Somewhere down beneath here we're probably
going to add in that other middleware

26
00:02:02.090 --> 00:02:06.630
that's going to start capturing
exceptions and sending them to Rollbar.

27
00:02:06.630 --> 00:02:12.690
You can test that by throwing an exception
in one of the controllers and

28
00:02:12.690 --> 00:02:16.300
seeing that bubble into the middleware.

29
00:02:16.300 --> 00:02:23.272
The signature for error handling
middleware is going to be app.use.

30
00:02:23.272 --> 00:02:28.832
And then that function's going
to have an errority of four,

31
00:02:28.832 --> 00:02:33.846
I believe,
which is going to be a request, response,

32
00:02:33.846 --> 00:02:40.972
the next handler and then the error that
was produced further up in the stack.

33
00:02:40.972 --> 00:02:47.050
The Rollbar module will, I believe

34
00:02:47.050 --> 00:02:53.200
provide one of these types of middleware,
so that you can just plug directly in.

35
00:02:53.200 --> 00:02:57.460
So it actually ends up
working out pretty great.

36
00:02:57.460 --> 00:03:01.219
You can also add your own custom error
handling logic in this way as well.

37
00:03:03.450 --> 00:03:10.224
So the issue for that is out on GitHub and
that's going to be issue number 38.

38
00:03:10.224 --> 00:03:14.287
So we're gonna add some error handling
into our Express application and

39
00:03:14.287 --> 00:03:18.082
in the a production environment
we're gonna want to send that error

40
00:03:18.082 --> 00:03:20.170
information to Rollbar.

41
00:03:20.170 --> 00:03:24.771
So we should think about
where it would make sense to

42
00:03:24.771 --> 00:03:29.599
store our Rollbar service
key in our configuration.

43
00:03:29.599 --> 00:03:33.716
And how to put their proper checks
in place to make sure that it's

44
00:03:33.716 --> 00:03:38.310
only happening in our production
environment rather than dev or test.

45
00:03:38.310 --> 00:03:42.980
So we'll take, I'm going to say
20 minutes, to break that down.

46
00:03:42.980 --> 00:03:47.090
I bet that's something that you can we
can get in place out pretty quickly, and

47
00:03:47.090 --> 00:03:49.950
then we can we can take a look at

48
00:03:49.950 --> 00:03:53.035
what that feedback looks like
in the in the Rollbar interface.

49
00:03:54.610 --> 00:03:57.017
Yes Mark?
&gt;&gt; Speaker 2: Did the beanstalk actually

50
00:03:57.017 --> 00:04:02.762
provision more instances, I don't know
if I saw actually provision more.

51
00:04:02.762 --> 00:04:05.290
Yeah, there was two, right?

52
00:04:05.290 --> 00:04:10.040
&gt;&gt; Kevin Whinnery: Yeah, so there was
a third that got provisioned, and

53
00:04:10.040 --> 00:04:14.100
I think it could have gone up to six.

54
00:04:14.100 --> 00:04:19.810
But the network usage wasn't
the best indicator in this case.

55
00:04:19.810 --> 00:04:23.550
Cuz weren't actually sending all
that much data over the wire.

56
00:04:23.550 --> 00:04:25.632
It was more like
the deluge of requests and

57
00:04:25.632 --> 00:04:29.096
the CPU would have been a better
indicator for when we should spin up.

58
00:04:29.096 --> 00:04:32.838
&gt;&gt; Speaker 2: And does it go back down.

59
00:04:32.838 --> 00:04:34.416
&gt;&gt; Kevin Whinnery: Yeah,
it will cool back down.

60
00:04:34.416 --> 00:04:39.482
Eventually this list will
drop to just one after it's

61
00:04:39.482 --> 00:04:45.461
determined that we're not sending
as much data over the wire.

62
00:04:45.461 --> 00:04:47.629
&gt;&gt; Speaker 2: Pretty awesome.

63
00:04:47.629 --> 00:04:48.491
&gt;&gt; Kevin Whinnery: It can be.

64
00:04:48.491 --> 00:04:49.889
&gt;&gt; Speaker 2: So
we put a really heavy load on it,

65
00:04:49.889 --> 00:04:51.637
can hear the credit card machine running?

66
00:04:51.637 --> 00:04:53.903
[LAUGH]
&gt;&gt; Kevin Whinnery: Yeah.

67
00:04:53.903 --> 00:04:58.386
&gt;&gt; Speaker 2: If you have a live web
socket counter of all the money that's

68
00:04:58.386 --> 00:05:00.548
coming out of your account.

69
00:05:00.548 --> 00:05:02.011
&gt;&gt; Kevin Whinnery: Well, I don't know.

70
00:05:02.011 --> 00:05:04.708
Hopefully, I have been spamming a lot but

71
00:05:04.708 --> 00:05:08.960
it seems like I haven't used up
my my credits yet, so we'll see.

72
00:05:10.520 --> 00:05:12.470
I'm willing to take that one for
the team though.

