WEBVTT

1
00:00:00.287 --> 00:00:03.908
[MUSIC]

2
00:00:03.908 --> 00:00:07.709
&gt;&gt; Kevin Whinnery: Now, I'm gonna talk a
little bit about a few tools that we found

3
00:00:07.709 --> 00:00:12.890
really useful in monitoring and sort of
preparing our applications for production.

4
00:00:14.130 --> 00:00:17.382
The two aspects that
I'm gonna focus on and

5
00:00:17.382 --> 00:00:23.359
give you a little demo of this afternoon
are a load testing tool called Locust.

6
00:00:23.359 --> 00:00:28.999
And a error tracking service that
lots of teams use at Twilio actually

7
00:00:28.999 --> 00:00:34.653
called Rollbar, which we'll take
exceptions in our application.

8
00:00:34.653 --> 00:00:39.235
And put them in a service that will
notify us if bad things happen

9
00:00:39.235 --> 00:00:43.220
in our application wall
it's running in production.

10
00:00:43.220 --> 00:00:47.473
So I'll do a quick demo of locust, and
then I'll turn you all loose on starting

11
00:00:47.473 --> 00:00:51.148
to add in some error handling in
our application on the server side,

12
00:00:51.148 --> 00:00:54.970
which we haven't actually done yet,
if you have might have noticed.

13
00:00:55.990 --> 00:01:00.960
So the first thing I'm gonna show
you is a tool called Locust on their

14
00:01:00.960 --> 00:01:05.210
load testing tools for
just about every platform.

15
00:01:05.210 --> 00:01:09.655
This particular one is a Python
based tool that I have

16
00:01:09.655 --> 00:01:13.703
favored because it's
relatively easy to use.

17
00:01:13.703 --> 00:01:18.229
It gives really good reporting output and
is configurable through a web interface,

18
00:01:18.229 --> 00:01:20.880
which I'll show you here in a second.

19
00:01:20.880 --> 00:01:23.540
It's got a large community around it.

20
00:01:23.540 --> 00:01:26.470
And it allows you using Python code

21
00:01:26.470 --> 00:01:31.850
to actually simulate different types
of usage scenarios on your website.

22
00:01:31.850 --> 00:01:35.400
So the flexibility of
the configuration and

23
00:01:35.400 --> 00:01:38.860
the maturity of the tool as well
as sort of the general usability

24
00:01:38.860 --> 00:01:43.550
are some reasons why I favor it over
other things that are out there.

25
00:01:43.550 --> 00:01:47.620
The production monitoring tool, we're
gonna take a look at is called Rollbar.

26
00:01:47.620 --> 00:01:55.270
It's a third party service in whose API
you integrate into your application.

27
00:01:55.270 --> 00:01:58.300
And when handled exceptions are raised,

28
00:01:58.300 --> 00:02:02.364
you can send that exception
data to this service.

29
00:02:02.364 --> 00:02:05.460
And it'll send out notifications

30
00:02:05.460 --> 00:02:08.990
to whatever provider you
happen to have configured.

31
00:02:08.990 --> 00:02:14.100
At Twilio, we use pager duty to create a
schedule of folks that are responsible for

32
00:02:14.100 --> 00:02:17.970
responding to issues and
outages on the website.

33
00:02:17.970 --> 00:02:22.880
&gt;&gt; Speaker 3: So,
Rollbar does server side stuff too?

34
00:02:22.880 --> 00:02:25.010
&gt;&gt; Kevin Whinnery: It's fully
a server side, it's not quite.

35
00:02:25.010 --> 00:02:28.388
Yeah, I think you might be able to do
client side, but we only use it for

36
00:02:28.388 --> 00:02:30.550
the server side.

37
00:02:30.550 --> 00:02:32.650
&gt;&gt; Speaker 3: You can use track
to ask in the clients side.

38
00:02:32.650 --> 00:02:34.540
&gt;&gt; Kevin Whinnery: I know you can
use track to ask on the client side.

39
00:02:34.540 --> 00:02:36.056
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Kevin Whinnery: Minor plug for

40
00:02:36.056 --> 00:02:38.630
our hometown hero, Todd Gartner.

41
00:02:38.630 --> 00:02:39.290
&gt;&gt; Speaker 3: Yeah.

42
00:02:39.290 --> 00:02:44.326
&gt;&gt; Kevin Whinnery: But yeah, so
Rollbar is used across many services

43
00:02:44.326 --> 00:02:49.500
at Twilio to notify folks
that things are going wrong,

44
00:02:49.500 --> 00:02:52.710
and it's something that
I've really come to enjoy.

45
00:02:52.710 --> 00:02:59.350
If you have identifying information about
a user at the time an exception is thrown.

46
00:02:59.350 --> 00:03:01.820
You can, in your Rollbar output,

47
00:03:01.820 --> 00:03:07.170
see which user an exception
was generated from the origin.

48
00:03:07.170 --> 00:03:11.180
If you have Rollbar configured correctly,
you can get a lot of very useful

49
00:03:11.180 --> 00:03:14.414
information about any exceptions
in your application, so

50
00:03:14.414 --> 00:03:16.240
definitely worth checking out.

51
00:03:16.240 --> 00:03:19.281
And it integrates very nicely with Express

52
00:03:19.281 --> 00:03:24.015
applications as you will find out
when you check out the exercise.

