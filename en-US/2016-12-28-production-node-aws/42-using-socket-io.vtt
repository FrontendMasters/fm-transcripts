WEBVTT

1
00:00:00.000 --> 00:00:03.370
[MUSIC]

2
00:00:03.370 --> 00:00:07.531
&gt;&gt; Kevin Whinnery: The next challenge that
we have is to start adding some real time

3
00:00:07.531 --> 00:00:11.490
user interface capabilities
to the application.

4
00:00:11.490 --> 00:00:14.551
And I think we'll probably
take this one and

5
00:00:14.551 --> 00:00:17.869
work into lunch if we're
having lunch at noon.

6
00:00:17.869 --> 00:00:23.148
So we'll talk about this and
set up the exercise,

7
00:00:23.148 --> 00:00:28.176
and then we can work on
that kind of over lunch and

8
00:00:28.176 --> 00:00:34.249
maybe pick back up again at
right around 1 PM local time.

9
00:00:34.249 --> 00:00:39.285
So Socket.IO is the one
library I'll present here

10
00:00:39.285 --> 00:00:44.211
during the day, for
which there is no alternate.

11
00:00:44.211 --> 00:00:46.522
It's pretty much the defacto standard for

12
00:00:46.522 --> 00:00:49.510
adding real time
capabilities to a node app.

13
00:00:49.510 --> 00:00:51.470
There are a couple others
out there that you can use,

14
00:00:51.470 --> 00:00:54.616
but Socket.IO is by far the most popular.

15
00:00:54.616 --> 00:01:00.750
And Socket.IO essentially provides
two things to your application.

16
00:01:00.750 --> 00:01:05.240
It provides a client side library
that you'll load up in your HTML.

17
00:01:05.240 --> 00:01:12.360
That will allow you to communicate
with the server over a websocket.

18
00:01:12.360 --> 00:01:17.180
And it also provides a server side API
that you can use in your Node.js code

19
00:01:17.180 --> 00:01:21.880
to push data to connect to
clients over a websocket.

20
00:01:21.880 --> 00:01:27.290
And I think the best way to go through
this is to again show you the sort of

21
00:01:27.290 --> 00:01:33.140
hello world of Socket.IO which
is a simple chat application.

