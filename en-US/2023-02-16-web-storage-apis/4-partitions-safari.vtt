WEBVTT

1
00:00:00.230 --> 00:00:04.010
Safari is making things more complicated,
a little bit.

2
00:00:04.010 --> 00:00:07.348
So, I'm not saying this negatively.

3
00:00:07.348 --> 00:00:10.422
So they have a reason for
that and the reason is privacy.

4
00:00:10.422 --> 00:00:14.696
So, because we already mentioned
that on most browsers,

5
00:00:14.696 --> 00:00:17.846
storage is per origin or eTLD+1, okay?

6
00:00:17.846 --> 00:00:21.265
So, that's, let's say,
Chromium, and Firefox.

7
00:00:21.265 --> 00:00:26.914
So, Chromium is per machine, and
this is a spoiler for a future slide,

8
00:00:26.914 --> 00:00:31.637
so, Chromium is per machine,
on Firefox is per ETLD+1.

9
00:00:31.637 --> 00:00:36.537
On Safari, okay, it's different.

10
00:00:36.537 --> 00:00:42.000
So, let me show you directly
what's going on here.

11
00:00:42.000 --> 00:00:48.244
So, let's say you have search.example.com,
okay?

12
00:00:48.244 --> 00:00:50.150
And then you have another website.

13
00:00:50.150 --> 00:00:54.120
It can be blog.sample, it can be a
completely different page with an iframe.

14
00:00:55.190 --> 00:00:59.120
And the iframe points to search.example.

15
00:00:59.120 --> 00:01:03.420
So, in here, the yellow parts, am
talking about two different navigations.

16
00:01:03.420 --> 00:01:07.049
Okay, they can be two different
tabs in your browser, but

17
00:01:07.049 --> 00:01:11.215
one is with an iframe and
the other one is a full screen navigation.

18
00:01:11.215 --> 00:01:18.023
So on the standard browsers like Chrome
and Firefox, they are sharing the storage.

19
00:01:18.023 --> 00:01:25.099
So search.example.com, can access the same
storage on both situations, okay?

20
00:01:25.099 --> 00:01:30.704
And the thing that, because, you know
an iframe is like an embedded window,

21
00:01:30.704 --> 00:01:33.136
okay, so it feels like natural.

22
00:01:33.136 --> 00:01:37.750
Yeah, it's the same domain,
we will get the same data.

23
00:01:37.750 --> 00:01:43.231
Well, Safari or WebKit actually
decided to make a partition

24
00:01:43.231 --> 00:01:48.933
on these cases to avoid fingerprinting and
increase privacy.

25
00:01:48.933 --> 00:01:51.030
How does it look like?

26
00:01:51.030 --> 00:01:54.430
Like this, they're creating a partition,
what's a partition?

27
00:01:55.710 --> 00:02:00.134
So in this case,
search.example.com has one storage,

28
00:02:00.134 --> 00:02:05.013
search.example.com has an iframe
of blog.example.com has

29
00:02:05.013 --> 00:02:08.460
a different storage, that's a partition.

30
00:02:09.460 --> 00:02:13.798
And if you have search.example.com
on an iframe on a third website,

31
00:02:13.798 --> 00:02:16.160
there will be a different partition.

32
00:02:17.740 --> 00:02:20.927
So the idea here is that
search.example.com,

33
00:02:20.927 --> 00:02:24.890
when it's with an iframe cannot
share data from its parent,

34
00:02:24.890 --> 00:02:29.360
that sometimes has to do
with fingerprinting, okay?

35
00:02:29.360 --> 00:02:36.690
Because an iframe can sometimes can know
things about its parent origin, okay?

36
00:02:36.690 --> 00:02:41.030
So, for example,
what's the use case for this?

37
00:02:41.030 --> 00:02:45.373
Ads, ads are typically iframes today.

38
00:02:45.373 --> 00:02:50.192
So the idea of Safari is to
reduce fingerprinting from

39
00:02:50.192 --> 00:02:52.770
ad companies, make sense?

40
00:02:52.770 --> 00:02:56.445
So if your web app will
never appear in an iframe,

41
00:02:56.445 --> 00:03:00.960
you forget about partitions,
they don't exist.

42
00:03:00.960 --> 00:03:06.994
But if your web app will appear
within an iframe in another origin,

43
00:03:06.994 --> 00:03:11.480
have in mind that that's a partition.

44
00:03:11.480 --> 00:03:16.480
So if you store data here,
it won't be appear here.

45
00:03:17.870 --> 00:03:23.130
Even if it's the same web app in
the same origin, okay, makes sense?

46
00:03:24.500 --> 00:03:26.203
If you wanna read more about that,

47
00:03:26.203 --> 00:03:30.050
in the WebKit blog there is a whole
article talking about partitions.

48
00:03:30.050 --> 00:03:33.350
If you search about partitions,
you will find more information about this.

49
00:03:33.350 --> 00:03:36.998
So then we have, Chrome is using origin,

50
00:03:36.998 --> 00:03:42.857
Firefox is using eTLD+1 groups and
WebKit is using partitions.

51
00:03:42.857 --> 00:03:48.183
So, maybe an hour ago you are not
thinking that we will cover this.

52
00:03:48.183 --> 00:03:50.763
So because most developers
sometimes don't think about this.

53
00:03:50.763 --> 00:03:52.320
So sorry, that's simple, right?

54
00:03:52.320 --> 00:03:56.377
All right, well,
no it's not so simple, okay?

55
00:03:56.377 --> 00:04:02.540
We have a lot of quirks, things that
might change how data storage work.

