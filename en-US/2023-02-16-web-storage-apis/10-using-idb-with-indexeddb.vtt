WEBVTT

1
00:00:00.000 --> 00:00:01.378
Let's look at the code.

2
00:00:01.378 --> 00:00:04.820
This is the standard API,
not the one that we're going to use, okay?

3
00:00:04.820 --> 00:00:09.380
So this is the API that is available
in the browser without any wrapper,

4
00:00:09.380 --> 00:00:11.420
without any library.

5
00:00:11.420 --> 00:00:16.040
So we need to call
indexedDB.open with a name.

6
00:00:16.040 --> 00:00:17.843
There is an optional second argument,
the version number.

7
00:00:17.843 --> 00:00:21.120
If you don't provide the version number,
it's one.

8
00:00:21.120 --> 00:00:26.440
And that's a request,
the request to open a database.

9
00:00:26.440 --> 00:00:30.394
And then I need to use
events like on success,

10
00:00:30.394 --> 00:00:34.983
on upgrade, okay,
to actually use that database.

11
00:00:34.983 --> 00:00:40.316
And the database actually arrives
the object in event.target.result.

12
00:00:40.316 --> 00:00:43.993
So you need to save that
in a global variable.

13
00:00:43.993 --> 00:00:46.340
So the API looks terrible.

14
00:00:47.640 --> 00:00:51.654
Every time you need to open a database and
work with it,

15
00:00:51.654 --> 00:00:54.560
it doesn't look right, right?

16
00:00:54.560 --> 00:00:58.610
So that's why we will use a wrapper, okay?

17
00:00:58.610 --> 00:01:02.130
So using a wrapper it's called idb,
the one we're going to use.

18
00:01:02.130 --> 00:01:05.570
So idb [LAUGH] [INAUDIBLE].

19
00:01:05.570 --> 00:01:07.188
You just open the database like this.

20
00:01:07.188 --> 00:01:13.299
You say, idb.openDB, you await for
it because it's promise-based and

21
00:01:13.299 --> 00:01:16.696
you have the object to use, that's all.

22
00:01:16.696 --> 00:01:21.515
And if you wanna handle the update event,
this is how it looks like.

23
00:01:21.515 --> 00:01:24.917
It's idb.openDB, the name,
the version, and

24
00:01:24.917 --> 00:01:28.240
then we pass an object
with an upgrade function.

25
00:01:29.970 --> 00:01:33.736
On that upgrade function you
will receive the DB object,

26
00:01:33.736 --> 00:01:38.129
old version number, new version number,
a transaction object,

27
00:01:38.129 --> 00:01:41.592
in case you wanna run transactions,
and the event.

28
00:01:41.592 --> 00:01:45.192
You don't need to receive those arguments
if you're not going to use them.

29
00:01:45.192 --> 00:01:47.513
This is JavaScript, okay?

30
00:01:47.513 --> 00:01:49.012
So it looks simpler.

31
00:01:49.012 --> 00:01:52.797
We're going to see this
in action in a second.

32
00:01:52.797 --> 00:01:55.900
Then within the upgrade event, so

33
00:01:55.900 --> 00:02:00.719
within that function,
we can create object stores.

34
00:02:00.719 --> 00:02:05.364
How do we create object store name,
that's all?

35
00:02:05.364 --> 00:02:08.793
What's the object of the table, okay?

36
00:02:08.793 --> 00:02:14.653
And there are three ways to create
an object store without the key,

37
00:02:14.653 --> 00:02:19.466
with a key path,
where we express as a string the name of

38
00:02:19.466 --> 00:02:24.721
the property that has the key like ID,
customer ID, okay?

39
00:02:24.721 --> 00:02:29.114
Remember, we are storing objects, so
we set the key, or a key generator?

40
00:02:29.114 --> 00:02:33.203
What's a key generator,
an autoIncrement key.

41
00:02:33.203 --> 00:02:37.583
So this is like databases,
SQL-based database, an autoIncrement,

42
00:02:37.583 --> 00:02:38.974
something like that.

43
00:02:38.974 --> 00:02:40.048
It's called the key generator.

44
00:02:40.048 --> 00:02:42.972
So we don't provide the key,
we provide the key generator.

45
00:02:42.972 --> 00:02:44.850
And actually we can mix both.

46
00:02:44.850 --> 00:02:47.844
We can have a key path,
and then key generator.

47
00:02:47.844 --> 00:02:50.526
That's for weird situations.

48
00:02:50.526 --> 00:02:52.648
We can delete the database, okay?

49
00:02:52.648 --> 00:02:56.763
We delete DB, that's pretty simple,
straightforward.

50
00:02:56.763 --> 00:03:01.704
And based on how you are creating
the data store, okay,

51
00:03:01.704 --> 00:03:06.032
you can have a key path or
a key generator, okay?

52
00:03:06.032 --> 00:03:09.823
And based off what do you have,
this is what you can store.

53
00:03:09.823 --> 00:03:14.943
For example, if you don't provide
a key path or autoIncrement,

54
00:03:14.943 --> 00:03:19.594
you can hold any kind of value
in that data store, numbers,

55
00:03:19.594 --> 00:03:24.360
strings, objects,
whatever you want, okay, anything.

56
00:03:24.360 --> 00:03:28.056
If you provide a key path and
no generator,

57
00:03:28.056 --> 00:03:31.446
you can only hold JavaScript objects,

58
00:03:31.446 --> 00:03:36.595
that they must have the key path
of the ID, the primary key.

59
00:03:36.595 --> 00:03:40.995
If you provide only this one,
it can also hold any kind of value.

60
00:03:40.995 --> 00:03:47.950
And there is an automatic generated ID,
okay, that we can use later if we want.

61
00:03:47.950 --> 00:03:53.575
And if you provide both, okay,
if for some weird situations, okay?

62
00:03:53.575 --> 00:03:57.745
Because you can only hold
JavaScript objects, okay?

63
00:03:57.745 --> 00:04:03.775
But you have two IDs, two primary keys,
the orange generator one and yours.

64
00:04:04.935 --> 00:04:06.353
Anyway, it's not common.

65
00:04:06.353 --> 00:04:11.380
The most common scenario is typically
this one when you provide your key

66
00:04:11.380 --> 00:04:17.018
path unless you're storing bytes or
something that are not actually objects.

67
00:04:17.018 --> 00:04:18.053
Make sense?

68
00:04:18.053 --> 00:04:24.385
Again, how much store can you use,
one gigabyte.

69
00:04:24.385 --> 00:04:27.245
You can create as many stores as you want,

70
00:04:27.245 --> 00:04:30.363
as many databases as you
want up to the quota.

71
00:04:32.810 --> 00:04:35.244
Make sense?

72
00:04:35.244 --> 00:04:36.838
And as I mentioned before,

73
00:04:36.838 --> 00:04:41.470
the wrapper that we're going to
use supports quick transactions.

74
00:04:41.470 --> 00:04:46.358
In this case, we don't need to create
a transaction to then run one query.

75
00:04:46.358 --> 00:04:52.359
We just say db.add, it will add a value or
an object, join a store.

76
00:04:52.359 --> 00:04:57.136
Db.put will replace, this is like

77
00:04:57.136 --> 00:05:01.918
the update to a key with this value.

78
00:05:01.918 --> 00:05:05.810
Delete and clear is delete star,

79
00:05:05.810 --> 00:05:10.126
the delete in SQL, okay?

80
00:05:10.126 --> 00:05:13.017
Makes sense?
So these are very simple APIs, actually,

81
00:05:13.017 --> 00:05:14.666
it's not a big deal, okay?

82
00:05:14.666 --> 00:05:20.707
You put a new object, [INAUDIBLE],
it's actually pretty straightforward.

83
00:05:20.707 --> 00:05:24.706
And to get the data, okay,
you can, for example,

84
00:05:24.706 --> 00:05:29.177
count how many objects do you have,
async await always.

85
00:05:29.177 --> 00:05:33.701
You can get all the objects
in one store name,

86
00:05:33.701 --> 00:05:37.642
or you can get one object by key, okay?

87
00:05:37.642 --> 00:05:45.069
If you have the key, give me the customer
with the key one, two, three, that's all.

88
00:05:45.069 --> 00:05:48.781
So you can see that the API is
actually straightforward and

89
00:05:48.781 --> 00:05:53.497
simple to use if we're using promises and
if you're using this wrapper.

90
00:05:53.497 --> 00:05:58.795
For those of you that had experience
playing with IndexedDB before,

91
00:05:58.795 --> 00:06:03.558
probably you can feel the difference
pretty quickly, okay?

92
00:06:03.558 --> 00:06:07.233
And because this is async await,
this is asynchronously,

93
00:06:07.233 --> 00:06:09.518
this won't harm performance a lot.

94
00:06:09.518 --> 00:06:11.737
The only part where it can
harm performance is here.

95
00:06:11.737 --> 00:06:16.808
When you are adding or putting new
element, this value will be cloned.

96
00:06:16.808 --> 00:06:20.480
And that cloning,
if it's a really large object for

97
00:06:20.480 --> 00:06:25.752
example a Redux state, and your Redux
state you're storing everything.

98
00:06:25.752 --> 00:06:31.539
I've seen a lot of weird situations
like your localization dictionary or

99
00:06:31.539 --> 00:06:35.938
the dictionary for
all your strings in the Redux state.

100
00:06:35.938 --> 00:06:40.015
So you have like 200k in your Redux state.

101
00:06:40.015 --> 00:06:43.750
Well, if you do that,
the cloning will take time.

102
00:06:43.750 --> 00:06:48.967
So in that case you need to
move that into a worker or

103
00:06:48.967 --> 00:06:54.570
split that object into
several objects in the store.

104
00:06:54.570 --> 00:06:58.695
So instead of writing
one large Redux state,

105
00:06:58.695 --> 00:07:03.478
you just get a slice and
you start different slices.

