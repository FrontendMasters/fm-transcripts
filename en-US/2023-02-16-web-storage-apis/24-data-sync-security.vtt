WEBVTT

1
00:00:00.000 --> 00:00:04.925
And for data syncs,
there are a lot of algorithms, ideas,

2
00:00:04.925 --> 00:00:10.649
there are many, even books on that topic,
maybe not just on the web.

3
00:00:10.649 --> 00:00:15.399
How you sync data because what happens
if the data changed server-side, and

4
00:00:15.399 --> 00:00:19.783
also client side at the same time,
how you're going to manage that, so

5
00:00:19.783 --> 00:00:22.660
it's a whole topic by itself,
data syncing.

6
00:00:22.660 --> 00:00:29.904
And for data syncing, you should
Master Service Workers and the sync's API.

7
00:00:29.904 --> 00:00:36.197
Backgroung sync, periodic background sync,
background fetch, and many others.

8
00:00:36.197 --> 00:00:42.237
And always think about versions and
data migration between versions, okay?

9
00:00:42.237 --> 00:00:45.317
So, there is a new version of your app,
so the user,

10
00:00:45.317 --> 00:00:49.460
we need to remember that the user may
come back to your app a year later.

11
00:00:49.460 --> 00:00:56.231
And in a year, maybe you've changed your
app 15 times and your schema 15 times.

12
00:00:56.231 --> 00:01:00.458
So, don't think that you're
always migrating data from

13
00:01:00.458 --> 00:01:03.485
the previous version to the new one, no.

14
00:01:03.485 --> 00:01:08.141
The user might be coming back,
okay, and it needs 15 migrations.

15
00:01:08.141 --> 00:01:12.430
Of course, at that point,
some apps are saying, now this is too old,

16
00:01:12.430 --> 00:01:15.776
I'm sorry user,
I'm not going to migrate your data,

17
00:01:15.776 --> 00:01:18.714
or you have a history of
migration algorithms.

18
00:01:18.714 --> 00:01:24.503
So you run through version 2 to 3,
3 to 4, 4 to 5, until version 15 and

19
00:01:24.503 --> 00:01:28.884
you cross your fingers that
everything will work, okay?

20
00:01:28.884 --> 00:01:34.757
But that's also possible Makes sense?

21
00:01:34.757 --> 00:01:39.828
And in terms of security, remember that
all browser data storage is public, okay?

22
00:01:39.828 --> 00:01:47.239
So it's insecure by definition, don't
store there anything that is sensitive.

23
00:01:47.239 --> 00:01:49.914
No private data, no sensitive data.

24
00:01:49.914 --> 00:01:53.405
And if you store authentication data,

25
00:01:53.405 --> 00:01:57.847
have in mind that data
should be revoked somehow,

26
00:01:57.847 --> 00:02:02.202
there should be a way to revoke that data,
okay?

27
00:02:02.202 --> 00:02:06.984
And where to continue and
rate more do more, Web Workers.

28
00:02:06.984 --> 00:02:12.699
So mastering Web Workers will help
in Data Management, Service Workers,

29
00:02:12.699 --> 00:02:17.705
the Sync API's, and
more about IndexedDB performance, okay?

30
00:02:17.705 --> 00:02:21.441
And finally, Web Assembly-based Databases,

31
00:02:21.441 --> 00:02:26.734
that's high performance,
there are things that can be done there.

32
00:02:26.734 --> 00:02:29.703
And where do you store those databases?

33
00:02:29.703 --> 00:02:35.257
They can be on top of IndexedDB, so you
use IndexedDB as a file system kind of,

34
00:02:35.257 --> 00:02:38.684
or the real file system,
it's also possible.

35
00:02:38.684 --> 00:02:42.794
And then you can use MySQL
technically if you want.

36
00:02:42.794 --> 00:02:45.590
The problem with my SQL is
that it's TCP-based and

37
00:02:45.590 --> 00:02:47.418
you cannot open sockets, okay?

38
00:02:47.418 --> 00:02:53.125
But despite that, the engine can
actually be portaled into Web Assembly.

