WEBVTT

1
00:00:00.430 --> 00:00:03.390
Now the next step is to
change the load function.

2
00:00:03.390 --> 00:00:05.320
We already have the load function.

3
00:00:05.320 --> 00:00:11.150
The load function is fetching the menu
from the API and rendering the menu.

4
00:00:11.150 --> 00:00:15.330
So we need to change that structure, okay?

5
00:00:15.330 --> 00:00:19.633
So it's already async,
so we are already there.

6
00:00:19.633 --> 00:00:22.402
So what we need is the database.

7
00:00:22.402 --> 00:00:26.533
So we're going to call Menu.openDB, and

8
00:00:26.533 --> 00:00:31.710
remember this returns a promise,
so we await for it.

9
00:00:31.710 --> 00:00:33.780
So we open the database.

10
00:00:33.780 --> 00:00:41.490
And here, something that we can use our
count to see if there is something.

11
00:00:41.490 --> 00:00:43.810
Because maybe the database is empty.

12
00:00:43.810 --> 00:00:48.110
So if it's empty, I don't need
to load it from the IndexedDB.

13
00:00:48.110 --> 00:00:50.143
If it's empty, I need to go to a network.

14
00:00:50.143 --> 00:00:51.842
Does it make sense?

15
00:00:51.842 --> 00:00:55.240
Because nothing is there yet
in the database.

16
00:00:55.240 --> 00:00:56.510
So how can we check that?

17
00:00:56.510 --> 00:01:01.180
Well, we can call db.count.

18
00:01:01.180 --> 00:01:05.980
Count will count the amount of objects or
values in one data store.

19
00:01:05.980 --> 00:01:06.880
What's the data store?

20
00:01:06.880 --> 00:01:11.750
Categories, okay, but
we need to await for that.

21
00:01:11.750 --> 00:01:14.428
Can we await in an if condition?

22
00:01:14.428 --> 00:01:16.146
Yeah, we can.

23
00:01:16.146 --> 00:01:18.530
These days, we can do these things.

24
00:01:18.530 --> 00:01:24.100
So if it's zero,
it means the database is empty, okay?

25
00:01:24.100 --> 00:01:29.760
DB is empty, so it's empty,
I need to go and fetch the data.

26
00:01:29.760 --> 00:01:34.812
But instead of,
Saving the data in my array,

27
00:01:34.812 --> 00:01:37.201
I'm going to save it in a local variable.

28
00:01:39.899 --> 00:01:42.962
So I'm going to the network,
getting the values.

29
00:01:42.962 --> 00:01:44.820
Now, what do I need to do with that data?

30
00:01:46.640 --> 00:01:48.639
Save it, right?

31
00:01:48.639 --> 00:01:51.297
But, I mean,
I can stringify this, but yeah,

32
00:01:51.297 --> 00:01:53.637
we're not going to do that again, okay?

33
00:01:53.637 --> 00:01:58.422
Or I can just save it in one object,
but I don't need that.

34
00:01:58.422 --> 00:02:04.946
I can take my data, my data is directly,
we can call this categories.

35
00:02:06.165 --> 00:02:09.656
And forEach, so I can execute forEach.

36
00:02:09.656 --> 00:02:13.132
For each category,
I can use a lambda expression here.

37
00:02:13.132 --> 00:02:16.811
I'm going to talk to my DB,
and I'm going to add,

38
00:02:18.899 --> 00:02:22.642
One object in the categories store.

39
00:02:25.329 --> 00:02:27.793
And that's the value.

40
00:02:27.793 --> 00:02:29.728
I think it's fine, yep.

41
00:02:29.728 --> 00:02:35.659
Now, Menu.data is not API.fetchMenu,

42
00:02:35.659 --> 00:02:41.598
it's getAll, get me all the categories.

43
00:02:44.045 --> 00:02:46.644
Does it make sense?

44
00:02:46.644 --> 00:02:51.156
The flow, so using async await and
using this wrapper,

45
00:02:51.156 --> 00:02:54.228
the code, it's okay, it's clean.

46
00:02:54.228 --> 00:02:55.028
You can follow the code.

47
00:02:55.028 --> 00:02:58.144
You can follow the flow of
thought of what's going on.

48
00:02:58.144 --> 00:03:02.259
With the original API,
because it's event-based,

49
00:03:02.259 --> 00:03:07.990
it's actually difficult to do something
like this, really simple to get.

50
00:03:10.030 --> 00:03:12.820
So I think it should work.

51
00:03:12.820 --> 00:03:16.940
By the way, this code that we have here
is using a pattern that we haven't

52
00:03:16.940 --> 00:03:19.520
mentioned in this workshop today.

53
00:03:19.520 --> 00:03:21.500
It's called cache first.

54
00:03:22.720 --> 00:03:24.910
What is cache first?

55
00:03:24.910 --> 00:03:29.285
So if I do have categories in my database,

56
00:03:29.285 --> 00:03:35.785
I'm serving to the rendering
the categories from the cache.

57
00:03:37.155 --> 00:03:40.095
But what if the server
is changing the menu?

58
00:03:41.414 --> 00:03:42.517
And not updating the menu.

59
00:03:42.517 --> 00:03:43.890
Does it make sense?

60
00:03:43.890 --> 00:03:48.470
So this is known as cache first,
and it's a pattern, okay?

61
00:03:48.470 --> 00:03:50.443
You can use it or not.

62
00:03:50.443 --> 00:03:52.220
Hey, it's a pattern.

63
00:03:52.220 --> 00:03:54.608
Just have in mind that with this pattern,

64
00:03:54.608 --> 00:03:58.920
once you have saved something in
the database, you will use that forever.

65
00:04:00.470 --> 00:04:04.354
Maybe you need to add another
code that every morning or

66
00:04:04.354 --> 00:04:08.330
every time you open the app,
you check with the server.

67
00:04:08.330 --> 00:04:14.850
You download the menu again and
you upgrade your database, okay?

68
00:04:14.850 --> 00:04:20.142
I will show you another, a second policy,
a second algorithm in a minute.

69
00:04:20.142 --> 00:04:21.380
Well, let's see this in action.

70
00:04:23.010 --> 00:04:28.910
So back in my Coffee Masters website,
if I reload.

71
00:04:30.060 --> 00:04:35.990
So if I go to the Console,
I have an error.

72
00:04:35.990 --> 00:04:43.165
So I think that we have
an error with count in line 17.

73
00:04:43.165 --> 00:04:48.118
So it's here, I think that the problem is

74
00:04:48.118 --> 00:04:52.512
that I didn't return the database.

75
00:04:52.512 --> 00:04:57.640
So I should always return the database.

76
00:04:57.640 --> 00:05:00.640
So then I will get the database here,
okay?

77
00:05:01.690 --> 00:05:03.540
So we have that error there.

78
00:05:03.540 --> 00:05:05.920
And now, it's working again.

79
00:05:05.920 --> 00:05:10.242
How do I know if this is working or not,
this is taken from the database or not?

80
00:05:10.242 --> 00:05:13.783
First, let's go to application IndexedDB.

81
00:05:13.783 --> 00:05:16.465
Now I have my new data store.

82
00:05:16.465 --> 00:05:21.789
And if I open, I have my database and
my data store inside.

83
00:05:21.789 --> 00:05:25.389
I have four objects, okay?

84
00:05:25.389 --> 00:05:29.630
And each object has its
array of products inside.

85
00:05:29.630 --> 00:05:34.308
But again, as a homework,
you would have an exercise to actually

86
00:05:34.308 --> 00:05:37.794
also take the product out
of this object store and

87
00:05:37.794 --> 00:05:42.318
you can create another object
store in the cm-menu database.

88
00:05:42.318 --> 00:05:46.927
Another way to see if
this is working because

89
00:05:46.927 --> 00:05:51.294
this is cache first is to change the menu.

90
00:05:51.294 --> 00:05:54.675
So this is hot coffee, and

91
00:05:54.675 --> 00:05:59.141
I can add some exclamation marks.

92
00:05:59.141 --> 00:06:05.215
So if I refresh, I'm not seeing
the exclamation marks at all.

93
00:06:05.215 --> 00:06:08.483
Because they're coming from the database.

94
00:06:08.483 --> 00:06:13.030
If I delete the database and refresh,

95
00:06:13.030 --> 00:06:17.729
now it's downloading the data again.

96
00:06:19.418 --> 00:06:20.403
Make sense?

97
00:06:20.403 --> 00:06:23.997
That's cache first,
has advantages and disadvantages.

98
00:06:23.997 --> 00:06:27.910
So now every time you
get into this web app,

99
00:06:27.910 --> 00:06:31.835
the data is already there in the database.

100
00:06:31.835 --> 00:06:34.990
I don't need to wait for
the menu to arrive.

101
00:06:34.990 --> 00:06:40.210
Every time we are working with cache,
we have advantages and disadvantages.

102
00:06:40.210 --> 00:06:44.300
So you need to find the balance there.

103
00:06:44.300 --> 00:06:49.796
&gt;&gt; For invalidation, we were talking about
when you open the app or whatever, turn it

104
00:06:49.796 --> 00:06:55.467
off, requests kind of the monocron or last
modified version of cache invalidation.

105
00:06:55.467 --> 00:07:01.209
Is there an e-tag variant version
of cache invalidation for-

106
00:07:01.209 --> 00:07:02.809
&gt;&gt; No, first, e-tags.

107
00:07:02.809 --> 00:07:05.858
&gt;&gt; [INAUDIBLE] not literally e-tags.

108
00:07:05.858 --> 00:07:08.253
&gt;&gt; E-tags are kind of deprecated.

109
00:07:08.253 --> 00:07:09.710
Who is using e-tags this day?

110
00:07:09.710 --> 00:07:14.961
But anyway, the problem that we
have is that HTTP as a protocol,

111
00:07:14.961 --> 00:07:17.504
okay, it's client-based.

112
00:07:17.504 --> 00:07:19.643
So the client needs to start a request.

113
00:07:19.643 --> 00:07:23.565
So the problem is that server side,
we know when we are changing the menu.

114
00:07:23.565 --> 00:07:27.810
So how the server can let the client
know that there are changes,

115
00:07:27.810 --> 00:07:29.468
that's the challenge.

116
00:07:29.468 --> 00:07:32.338
So there are design patterns,
okay, to do that.

117
00:07:32.338 --> 00:07:37.125
Now you can have a manifest JSON
file with metadata with a timestamp.

118
00:07:37.125 --> 00:07:40.154
So every time you open your web app,
you download that JSON.

119
00:07:40.154 --> 00:07:44.650
You check with your local storage
timestamp, and you see if there is a new

120
00:07:44.650 --> 00:07:48.347
version of the data, and
then you start an update process.

121
00:07:48.347 --> 00:07:51.712
Or you can use one of
the new APIs available.

122
00:07:51.712 --> 00:07:56.279
Check my course of Frontend Masters,
JavaScript in the background.

123
00:07:56.279 --> 00:07:59.785
So you have background sync,
periodic background sync.

124
00:07:59.785 --> 00:08:04.551
So you can actually ask the browser
to every morning check if there

125
00:08:04.551 --> 00:08:05.598
is a new menu.

126
00:08:05.598 --> 00:08:11.192
And then you update IndexedDB in the
background or you can send a push message,

127
00:08:11.192 --> 00:08:15.010
and the push message will
wake up a service worker.

128
00:08:15.010 --> 00:08:19.253
And because service worker has access
to IndexedDB, the service worker,

129
00:08:19.253 --> 00:08:22.634
even if you're not using the app
can go and update the menu.

130
00:08:22.634 --> 00:08:25.000
So next time you open the app,
the menu is updated.

