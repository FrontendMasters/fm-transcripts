WEBVTT

1
00:00:00.000 --> 00:00:04.480
Before actually going and
call some data storage APIs,

2
00:00:04.480 --> 00:00:09.245
let's talk about those APIs and
the state of those APIs, so

3
00:00:09.245 --> 00:00:12.223
we understand what we can use today.

4
00:00:12.223 --> 00:00:18.090
So, this is the current list of
APIs that are still available

5
00:00:18.090 --> 00:00:23.395
at different levels,
at different browsers, okay?

6
00:00:23.395 --> 00:00:29.394
So, Cookies, Web Storage, WebSQL,
Application Cache, IndexedDB,

7
00:00:29.394 --> 00:00:34.732
File and Directories, Cache Storage,
and Filesystem Access.

8
00:00:34.732 --> 00:00:38.813
So, let's go one by one, Cookies.

9
00:00:38.813 --> 00:00:43.629
Well, Cookies, I already spoiled
you on this one, Cookies is not

10
00:00:43.629 --> 00:00:48.717
a good way to store data because
the API is not really good, actually.

11
00:00:48.717 --> 00:00:53.380
Also, it's very limited in terms of
the amount of data that you can store,

12
00:00:53.380 --> 00:00:56.356
the structure of that
data is a string-based.

13
00:00:56.356 --> 00:01:01.825
But the worst part of Cookies is that
they are being sent to the server.

14
00:01:01.825 --> 00:01:08.154
So if you store 5K of data on every HTTP
request that is made to your server,

15
00:01:08.154 --> 00:01:13.175
every one, every image,
every JSON, every CSS request,

16
00:01:13.175 --> 00:01:19.921
every JSK file, on everyone though,
the 5k will travel to the server, okay?

17
00:01:19.921 --> 00:01:24.679
And that will impact performance,
so it's actually a bad idea.

18
00:01:24.679 --> 00:01:29.659
Web Storage, barely, you haven't
heard about Web Storage as a name,

19
00:01:29.659 --> 00:01:32.398
Web Storage is the name of the spec, but

20
00:01:32.398 --> 00:01:36.477
actually it's session storage or
local storage, okay?

21
00:01:36.477 --> 00:01:40.666
We will get deeper with those,
but let me spoil you this,

22
00:01:40.666 --> 00:01:46.013
we shouldn't be using these APIs anymore,
even local storage, okay?

23
00:01:46.013 --> 00:01:50.820
We will see why in a second, but
Web Storage then is an umbrella

24
00:01:50.820 --> 00:01:55.174
term that includes session storage and
local storage.

25
00:01:55.174 --> 00:02:00.934
WebSQL, okay, that I'm not sure,
have you ever used WebSQL before?

26
00:02:00.934 --> 00:02:02.061
No?

27
00:02:02.061 --> 00:02:02.916
Lucky you.

28
00:02:02.916 --> 00:02:08.650
Anyway, actually it wasn't so bad, and
I'm talking about the past, wasn't.

29
00:02:08.650 --> 00:02:11.889
So, we shouldn't be using WebSQL,
and I will explain in a minute why?

30
00:02:11.889 --> 00:02:16.355
Application Cache, indexedDB,
File and Directories, again,

31
00:02:16.355 --> 00:02:19.153
Cache Storage, and FileSystem Access.

32
00:02:19.153 --> 00:02:23.883
And, FileSystem Access has some
kind of a subset API known as

33
00:02:23.883 --> 00:02:26.220
Origin Private File System.

34
00:02:26.220 --> 00:02:29.744
Let's try to go one by one.

35
00:02:29.744 --> 00:02:32.506
Cookies, we are not going to use them,
okay?

36
00:02:32.506 --> 00:02:36.246
So it's grayed out, no, we are not
going to use it for data storage,

37
00:02:36.246 --> 00:02:37.808
we already mentioned that.

38
00:02:37.808 --> 00:02:42.130
So Web Storage, WebSQL,
let me show you this,

39
00:02:42.130 --> 00:02:46.680
Cookies, not suitable for
data storage, okay?

40
00:02:46.680 --> 00:02:52.092
So, we are taking that out,
so Web Storage has problems,

41
00:02:52.092 --> 00:02:57.069
so I'm not saying don't
use it 100% of the time.

42
00:02:57.069 --> 00:03:02.350
We will try to avoid using Web Storage,
okay?

43
00:03:02.350 --> 00:03:06.820
So, let me give you a quick idea of why?

44
00:03:06.820 --> 00:03:13.095
The main reason, but not the only one,
but the main reason is performance,

45
00:03:13.095 --> 00:03:18.209
local storage or
session storage APIs are synchronous APIs.

46
00:03:18.209 --> 00:03:22.508
That means that they take
the thread until they're done, so

47
00:03:22.508 --> 00:03:25.807
that when you save data,
it takes the thread.

48
00:03:25.807 --> 00:03:29.251
And the thread is shared,
it's the main UI thread,

49
00:03:29.251 --> 00:03:33.951
it's shared between you, your code,
the local storage manager, and

50
00:03:33.951 --> 00:03:38.203
the rest of the browser that is
occupied rendering the website.

51
00:03:38.203 --> 00:03:44.558
And also,
managing events over that website, okay?

52
00:03:44.558 --> 00:03:48.428
So that's why it's a very bad
idea to use local storage.

53
00:03:48.428 --> 00:03:54.175
Because even if it's, I mean,
if storing data takes 40 milliseconds,

54
00:03:54.175 --> 00:03:59.023
it might impact in the performance
of your website for a while.

55
00:03:59.023 --> 00:04:04.589
So you're not keeping 60 frames per second
in your animation for example, okay?

56
00:04:04.589 --> 00:04:07.389
So, we will see the API
anyway really quickly,

57
00:04:07.389 --> 00:04:10.269
we will do a quick sample on it,
and that's all.

58
00:04:10.269 --> 00:04:12.284
We will try to replace it, okay?

59
00:04:12.284 --> 00:04:16.831
So if you're using Web Storage,
local storage in your websites,

60
00:04:16.831 --> 00:04:20.252
have in mind that it's time to replace it,
okay?

61
00:04:20.252 --> 00:04:25.259
So, Cookies, not suitable for
data storage, Web Storage is kind of yeah,

62
00:04:25.259 --> 00:04:29.187
we will try to replace,
that WebSQL is deprecated, okay?

63
00:04:29.187 --> 00:04:33.737
So it's actually marked as deprecated,
we shouldn't be using anymore in

64
00:04:33.737 --> 00:04:37.641
there is a big warning saying that,
hey, we shouldn't be using this.

65
00:04:37.641 --> 00:04:42.177
So actually, just to give you
a quick idea of what it was,

66
00:04:42.177 --> 00:04:45.211
it was a SQLite client, client side.

67
00:04:45.211 --> 00:04:50.667
So actually you could create SQL queries,
tables, and run inner joins,

68
00:04:50.667 --> 00:04:55.343
and everything that you know from SQL,
from ANSI SQL at least.

69
00:04:55.343 --> 00:04:59.998
I mean it was fine, and then we'll
explain you in case you really want to

70
00:04:59.998 --> 00:05:02.729
still use SQL, which options do we have?

71
00:05:02.729 --> 00:05:08.478
So, we are also ready for using SQL
if you actually need you to do that,

72
00:05:08.478 --> 00:05:10.824
if you need to do that, why?

73
00:05:10.824 --> 00:05:15.175
Maybe some corporate applications,
they are really

74
00:05:15.175 --> 00:05:20.202
heavily based on data, and
you're relying on SQL queries for

75
00:05:20.202 --> 00:05:24.370
counting, making some math operations and
so on.

76
00:05:24.370 --> 00:05:28.274
Application Cache is also deprecated for
good.

77
00:05:28.274 --> 00:05:32.342
Application Cache,
also known as App Cache,

78
00:05:32.342 --> 00:05:37.776
was a way before to actually
make your app available offline.

79
00:05:37.776 --> 00:05:42.942
And I'm talking about ten years ago,
okay, kind of ten to 15 years ago.

80
00:05:42.942 --> 00:05:48.804
So I used that many times doing
web apps into cell phone eight,

81
00:05:48.804 --> 00:05:51.179
cell phone nine, okay?

82
00:05:51.179 --> 00:05:52.491
Today it's deprecated,

83
00:05:52.491 --> 00:05:55.723
that means that on some browsers
it might be still there, okay?

84
00:05:55.723 --> 00:05:58.858
You will see a warning in
the console if you use that, and

85
00:05:58.858 --> 00:06:01.341
fortunately we have
better ways to do that.

86
00:06:01.341 --> 00:06:05.537
So, have in mind, it's deprecated,
don't use it, okay?

87
00:06:05.537 --> 00:06:08.621
We need to find another way.

88
00:06:08.621 --> 00:06:12.018
IndexedDB, yeah, that's our first green,

89
00:06:12.018 --> 00:06:17.865
if you have ever played with IndexedDB
before, maybe you have weird face here.

90
00:06:17.865 --> 00:06:22.684
Because, many reasons,
buggy implementations or

91
00:06:22.684 --> 00:06:27.062
many browsers, the API,
it's kind of awful,

92
00:06:27.062 --> 00:06:31.015
terrible, we don't want the API, okay?

93
00:06:31.015 --> 00:06:34.579
But we'll see how to
make it better anyway.

94
00:06:34.579 --> 00:06:41.874
And also,
it wasn't clear how it was working, okay?

95
00:06:41.874 --> 00:06:46.662
Anyway, today we are using IndexedDB
2.0 that has a better API,

96
00:06:46.662 --> 00:06:49.439
it's still not the API we want, okay?

97
00:06:49.439 --> 00:06:52.913
But we will do something
on top of that anyway.

98
00:06:52.913 --> 00:06:58.630
The bugs for
normal operations are gone, okay?

99
00:06:58.630 --> 00:07:02.894
So, it's safe to use most
of indexedDB these days.

100
00:07:02.894 --> 00:07:04.394
What's IndexedDB?

101
00:07:04.394 --> 00:07:10.278
It's a no SQL database,
it's an object-based client side database.

102
00:07:10.278 --> 00:07:15.713
So, it's kind of fun,
kind of a MongoDB client side of course,

103
00:07:15.713 --> 00:07:20.056
much simpler than MongoDB but
client side, okay?

104
00:07:20.056 --> 00:07:24.270
Files and Directories API,
it's also kind of deprecated,

105
00:07:24.270 --> 00:07:27.917
it's about to be deprecated,
you have a question?

106
00:07:27.917 --> 00:07:30.580
&gt;&gt; Yeah, you mentioned IndexedDB 2.0,

107
00:07:30.580 --> 00:07:36.134
I'm sure SemVer is different with browser
vendors, but is it backwards compatible,

108
00:07:36.134 --> 00:07:41.618
is the API like similar to [INAUDIBLE]
&gt;&gt; IndexedDB 2.0 is backward compatible,

109
00:07:41.618 --> 00:07:46.109
it just added new ways to query data,
a new way to work with it.

110
00:07:46.109 --> 00:07:49.319
So yeah,
it's compatible with previous versions.

111
00:07:49.319 --> 00:07:53.506
The thing is that previous version,
I mean the first version was actually very

112
00:07:53.506 --> 00:07:57.769
limited in terms of how you can't transact
with the query, only with cursors.

113
00:07:57.769 --> 00:08:02.035
And there were a couple of problems there,
okay?

114
00:08:02.035 --> 00:08:07.772
So now it's better, and
there's an IndexedDB 3.0 proposed also,

115
00:08:07.772 --> 00:08:10.554
coming, but it's not there yet.

116
00:08:10.554 --> 00:08:14.863
File and Directories,
this is to be deprecated, okay?

117
00:08:14.863 --> 00:08:16.010
So, what is that first?

118
00:08:16.010 --> 00:08:19.974
File and Directories API,
also known as the File System API, but

119
00:08:19.974 --> 00:08:23.808
not to be confused with the other
one that you see at the bottom.

120
00:08:23.808 --> 00:08:27.722
So the File System API or
File and Directories API,

121
00:08:27.722 --> 00:08:30.368
today is Chromium-only, okay?

122
00:08:30.368 --> 00:08:35.066
And the whole idea was to create
a file system for our origin,

123
00:08:35.066 --> 00:08:38.770
that is not the actual real file system,
okay?

124
00:08:38.770 --> 00:08:44.822
It's a built-on file system created for
our machines where we can create files,

125
00:08:44.822 --> 00:08:50.887
directories, read files, write files,
without any permission issue, okay?

126
00:08:50.887 --> 00:08:54.077
Because it's not the real
user's file system.

127
00:08:54.077 --> 00:08:58.565
But this is about to be deprecated,
so you shouldn't be using that, and

128
00:08:58.565 --> 00:09:00.857
also it's Chromium-only, okay?

129
00:09:00.857 --> 00:09:04.413
Cache Storage is the other
one that is green.

130
00:09:04.413 --> 00:09:08.818
The Cache Storage API actually
is a cache storage interface,

131
00:09:08.818 --> 00:09:13.238
it's not its own API,
it's part of the service worker spec.

132
00:09:13.238 --> 00:09:18.614
But anyway, it's not actually only
available from a service worker,

133
00:09:18.614 --> 00:09:21.580
we are going to also use that API later.

134
00:09:21.580 --> 00:09:28.938
So indexedDB stores data,
typically JavaScript objects, IndexedDB.

135
00:09:28.938 --> 00:09:33.633
So when am talking about IndexedDB,
so IndexedDB is storing objects,

136
00:09:33.633 --> 00:09:35.290
it can also store bytes.

137
00:09:35.290 --> 00:09:41.484
Cache Storage is storing HTTP responses,
okay?

138
00:09:41.484 --> 00:09:45.898
So, assets that we can
download from a server, but

139
00:09:45.898 --> 00:09:51.660
it's storing the whole response
including Heathers on the body.

140
00:09:51.660 --> 00:09:56.371
And then we have
the FileSystem Access API.

141
00:09:56.371 --> 00:10:00.629
There is a new one that they wanted
to call it the File System API, but

142
00:10:00.629 --> 00:10:04.740
there was already another one with
the name File System API, so,

143
00:10:04.740 --> 00:10:07.831
they called that FileSystem Access API,
okay?

144
00:10:07.831 --> 00:10:13.020
It's yellow because
compatibility is still not 100%.

145
00:10:13.020 --> 00:10:16.725
So, IndexedDB, and Cache Storage,
and even Web Storage,

146
00:10:16.725 --> 00:10:19.860
we have 100% compatibility
on every browser.

147
00:10:19.860 --> 00:10:24.701
Firefox, Chromium-based browsers,
Safari, iPhone,

148
00:10:24.701 --> 00:10:28.199
Android, PWAs, Hybrids, everywhere.

149
00:10:28.199 --> 00:10:31.654
But the FileSystem Access API,
it's a new one, okay?

150
00:10:31.654 --> 00:10:37.557
So it's a new API, today it's
available on Chromium-based browsers.

151
00:10:37.557 --> 00:10:42.438
So that's Google Chrome, Microsoft Edge,
Samsung Internet Browser,

152
00:10:42.438 --> 00:10:44.574
Opera Brave, and many others.

153
00:10:44.574 --> 00:10:47.685
And it will let you open and

154
00:10:47.685 --> 00:10:52.364
work with the real File System, okay?

155
00:10:52.364 --> 00:10:57.737
The real File System of the user with
user's permission, that's the only

156
00:10:57.737 --> 00:11:02.956
one from all the list you see here
that will require user's permission.

157
00:11:02.956 --> 00:11:06.959
So you can open a folder,
you can open a file, and

158
00:11:06.959 --> 00:11:11.854
you can read the contents, and
you can write there, okay?

159
00:11:11.854 --> 00:11:16.268
Web Kit Safari is not
supporting the full API, but

160
00:11:16.268 --> 00:11:23.119
is supporting a subset of that API,
known as the Origin Private File System.

161
00:11:23.119 --> 00:11:24.237
Okay, what is that?

162
00:11:24.237 --> 00:11:29.835
Actually, the same idea as the one that we
mentioned before as File and Directories.

163
00:11:29.835 --> 00:11:34.824
So you can still use the same API but
not for the real file system but

164
00:11:34.824 --> 00:11:37.023
for a built-on one, okay?

165
00:11:37.023 --> 00:11:42.183
So Safari is supporting
FileSystem Access API, but

166
00:11:42.183 --> 00:11:48.875
not for the use of real file system,
but for a built-on one, okay?

167
00:11:48.875 --> 00:11:49.795
What's the idea?

168
00:11:49.795 --> 00:11:51.040
So why Apple did that?

169
00:11:51.040 --> 00:11:56.507
Because of Photoshop,
Adobe portal Photoshop to the web,

170
00:11:56.507 --> 00:11:59.469
so it's a PWA now, Photoshop.

171
00:11:59.469 --> 00:12:03.817
Of course, they have the native app,
but also they have Illustrator and

172
00:12:03.817 --> 00:12:05.679
Photoshop, they are PWA's.

173
00:12:05.679 --> 00:12:10.144
They needed a couple of things, one of
the things is they need to write temporary

174
00:12:10.144 --> 00:12:12.757
files in the file system,
not just in memory.

175
00:12:12.757 --> 00:12:16.358
Because sometimes they
work with huge files,

176
00:12:16.358 --> 00:12:19.139
so they cannot rely on just the RAM.

177
00:12:19.139 --> 00:12:23.835
So they needed access to the disk, even if
it's not the public File System, just for

178
00:12:23.835 --> 00:12:24.905
temporary usage.

179
00:12:24.905 --> 00:12:28.390
So that's why WebKit
implemented the API but for

180
00:12:28.390 --> 00:12:31.705
Origin Private File System
because of Adobe.

181
00:12:31.705 --> 00:12:32.788
But we can use it, okay?

182
00:12:32.788 --> 00:12:35.709
It's not just for Adobe, makes sense?

183
00:12:35.709 --> 00:12:41.789
So, that means that today
we have like two API's.

184
00:12:41.789 --> 00:12:46.415
Only two API's that are safe to use,
and are the two recommended API's,

185
00:12:46.415 --> 00:12:50.380
that's indexedDB and Cache Storage for
different use cases.

186
00:12:50.380 --> 00:12:56.335
And with some observations,
you can still use Web Storage,

187
00:12:56.335 --> 00:13:03.245
try not to, or let's start the process
to stop using it in the future.

188
00:13:03.245 --> 00:13:08.181
And FileSystem Access for
some specific use cases, if [INAUDIBLE]

189
00:13:08.181 --> 00:13:13.310
Safari will actually implement
the whole FileSystem Access soon.

190
00:13:13.310 --> 00:13:21.115
For now, it's just the Origin Private
File System subset, makes sense?

191
00:13:21.115 --> 00:13:22.796
Yeah, you have a question?

192
00:13:22.796 --> 00:13:28.800
&gt;&gt; So, some roles have moved data that
we would keep typically in Cookies into

193
00:13:28.800 --> 00:13:34.250
Web Storage, just, the hash,
session state, things like that.

194
00:13:34.250 --> 00:13:36.649
I assume we're gonna discuss where
that would go instead, right?

195
00:13:36.649 --> 00:13:37.428
&gt;&gt; Yeah.

196
00:13:37.428 --> 00:13:40.407
&gt;&gt; Okay, [INAUDIBLE]
&gt;&gt; But if you want the answer now,

197
00:13:40.407 --> 00:13:41.260
I can give you the answer now.

198
00:13:41.260 --> 00:13:42.582
&gt;&gt; Is it IndexedDB?

199
00:13:42.582 --> 00:13:45.840
&gt;&gt; Typically we move
Web Storage to IndexedDB.

200
00:13:45.840 --> 00:13:50.425
In fact, there are a couple of wrappers
on top of IndexedDB that will give

201
00:13:50.425 --> 00:13:53.147
you even a very similar
API to Web Storage.

202
00:13:53.147 --> 00:13:59.969
But on top of it, but we will actually
do that exact example in our project.

203
00:13:59.969 --> 00:14:03.003
So we are going to use Web Storage first,
and

204
00:14:03.003 --> 00:14:06.619
then we will upgrade that
experience to IndexedDB.

205
00:14:06.619 --> 00:14:08.920
So we can see how we can do that, okay?

206
00:14:08.920 --> 00:14:09.710
&gt;&gt; Great, thanks.

207
00:14:09.710 --> 00:14:15.832
&gt;&gt; So at the end,
we will care only these days about

208
00:14:15.832 --> 00:14:21.814
these four API's in terms of storage,
okay?

209
00:14:21.814 --> 00:14:27.779
To completely okay to use and
to that they depends, okay?

210
00:14:27.779 --> 00:14:30.570
And Web Storage, let's say it's like,

211
00:14:30.570 --> 00:14:35.434
I don't wanna say it's going to be
deprecated, but as a best practice,

212
00:14:35.434 --> 00:14:40.017
and let's say that today it's
becoming an anti-pattern, okay?

213
00:14:40.017 --> 00:14:44.812
So it's becoming an API
that we should avoid, okay?

214
00:14:44.812 --> 00:14:49.169
We will cover it briefly anyway,
just to get a quick idea, and that's all.

