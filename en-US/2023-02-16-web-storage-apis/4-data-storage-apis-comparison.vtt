WEBVTT

1
00:00:00.034 --> 00:00:04.396
In terms of comparison,
let me go quickly over this chart.

2
00:00:04.396 --> 00:00:09.765
So IndexedDB stores JavaScripts
objects and binary data.

3
00:00:09.765 --> 00:00:15.503
Cache storage stores HTTP responses,
so a PNG file,

4
00:00:15.503 --> 00:00:20.485
a JavaScript file,
an HTML file, a PDF file.

5
00:00:20.485 --> 00:00:24.502
Web storage, both session and
local, are storing strings,

6
00:00:24.502 --> 00:00:27.218
just strings, it's also very limited.

7
00:00:27.218 --> 00:00:32.268
So if you have ever used web storage or
local storage before, it's just strings.

8
00:00:32.268 --> 00:00:36.253
So if you have an array, you have to
convert that array into a string,

9
00:00:36.253 --> 00:00:40.105
like comma separated or JSON stringify or
something like that, so

10
00:00:40.105 --> 00:00:41.511
it's limited, okay?

11
00:00:41.511 --> 00:00:45.306
And the file system access
is working with files.

12
00:00:45.306 --> 00:00:48.015
Directly text files or binary files,

13
00:00:48.015 --> 00:00:52.258
you have the full API to work
with the complete file system.

14
00:00:52.258 --> 00:00:58.860
So IndexedDB is using a key of a key path
on most situations within the object.

15
00:00:58.860 --> 00:01:00.100
What's the key path?

16
00:01:00.100 --> 00:01:05.407
The name of a property in your
object that is the primary key.

17
00:01:05.407 --> 00:01:10.698
Id for example, but you can be name,
it can be a path within the JSON,

18
00:01:10.698 --> 00:01:15.276
within the object that you are saving,
within IndexedDB.

19
00:01:15.276 --> 00:01:19.737
On cache storage,
the key is the request, okay?

20
00:01:19.737 --> 00:01:24.259
So that involves the URL,
but also it can be cookies,

21
00:01:24.259 --> 00:01:28.090
the header, so
the whole request is the key.

22
00:01:28.090 --> 00:01:31.259
So if you wanna get an object
from the cache storage,

23
00:01:31.259 --> 00:01:33.285
you need to provide the request.

24
00:01:33.285 --> 00:01:38.143
And the storage will give you okay, here
you have the response for that request,

25
00:01:38.143 --> 00:01:38.937
make sense?

26
00:01:38.937 --> 00:01:41.076
That's the primary key.

27
00:01:41.076 --> 00:01:46.044
On web storage, it's another string,
so the key is another string, so

28
00:01:46.044 --> 00:01:48.417
key value, and both are strings.

29
00:01:48.417 --> 00:01:51.768
And for the File System Access,
well, we don't have a key,

30
00:01:51.768 --> 00:01:55.468
we just have a path maybe, okay,
for the file that we need to open.

31
00:01:55.468 --> 00:01:58.475
On IndexedDB, the data, okay?

32
00:01:58.475 --> 00:02:03.402
Or the JavaScript objects
are grouped in object stores, and

33
00:02:03.402 --> 00:02:07.467
objects stores are grouped in databases,
okay?

34
00:02:07.467 --> 00:02:12.747
In the cache storage is grouped and
in caches, that's the name.

35
00:02:12.747 --> 00:02:18.089
In web storage, there are no group,
they are just at at the root level, okay?

36
00:02:18.089 --> 00:02:23.533
So you just store keys at the root level,
and the same with File System Access.

37
00:02:23.533 --> 00:02:27.893
IndexedDB, you can store
JavaScript objects and

38
00:02:27.893 --> 00:02:34.755
binary data with a key path grouped in
object stores up to the available quota.

39
00:02:34.755 --> 00:02:40.302
And this is the first time we
are using that term officially.

40
00:02:40.302 --> 00:02:44.560
So, of course, the next question will be,
what's the quota?

41
00:02:44.560 --> 00:02:47.246
Stay with me we will see that.

42
00:02:47.246 --> 00:02:54.089
On cache storage the same, but
the web storage that's not the same.

43
00:02:54.089 --> 00:02:58.386
So web storage is not using
your available quota.

44
00:02:58.386 --> 00:03:03.128
On session storage is
typically 12 megabytes.

45
00:03:03.128 --> 00:03:07.082
And local storage is
typically five megabytes.

46
00:03:07.082 --> 00:03:12.912
So we don't know the quota,
what quota is, but let me spoil you this.

47
00:03:12.912 --> 00:03:19.306
Typically today,
you can safely store up to a gigabyte per

48
00:03:19.306 --> 00:03:25.843
origin without any issue on IndexedDB,
or cache storage.

49
00:03:25.843 --> 00:03:30.967
So five megabytes doesn't
seem good enough.

50
00:03:30.967 --> 00:03:37.165
So that's another reason of why we
don't wanna use local storage anymore.

51
00:03:37.165 --> 00:03:40.864
And, it's even worse,
and I will explain why.

52
00:03:40.864 --> 00:03:44.497
So those five megabytes
are not really five megabytes,

53
00:03:44.497 --> 00:03:46.515
I will explain why in a minute.

54
00:03:46.515 --> 00:03:51.540
Okay, so remember I mentioned that
if you like SQL databases for

55
00:03:51.540 --> 00:03:56.764
whatever reason, there are new
ideas today that are coming back.

56
00:03:56.764 --> 00:04:00.723
So do you still wanna use SQL,
do you wanna create your own API,

57
00:04:00.723 --> 00:04:02.228
your own database API?

58
00:04:02.228 --> 00:04:07.354
So you feel you have the knowledge to
create a high-performance database,

59
00:04:07.354 --> 00:04:11.048
and you wanna create your
own IndexedDB alternative.

60
00:04:11.048 --> 00:04:15.984
Well, today, thanks to WebAssembly,
and IndexedDB and, or

61
00:04:15.984 --> 00:04:18.508
filesystem, it's possible.

62
00:04:18.508 --> 00:04:23.226
So, there are currently some
libraries that are taking SQLite,

63
00:04:23.226 --> 00:04:25.559
for example that is a C library.

64
00:04:25.559 --> 00:04:31.121
So they took the C library, they
converted it into a WebAssembly module,

65
00:04:31.121 --> 00:04:35.441
and then you can run directly
SQLite on top of IndexedDB.

66
00:04:35.441 --> 00:04:38.501
So then you can still use SQL if you want.

67
00:04:38.501 --> 00:04:41.262
Yeah, you will have probably
a performance penalty,

68
00:04:41.262 --> 00:04:43.852
because you need to load
that WebAssembly module.

69
00:04:43.852 --> 00:04:46.765
It's not a native module in the browser,
but

70
00:04:46.765 --> 00:04:50.843
we are talking about a couple
of kilobytes, not huge library.

71
00:04:50.843 --> 00:04:55.077
And, if you really need SQL for
whatever reason, what are the reasons?

72
00:04:55.077 --> 00:04:59.741
Well, maybe you already have
a system that works with SQLite, and

73
00:04:59.741 --> 00:05:02.751
you already have a really huge structure.

74
00:05:02.751 --> 00:05:06.113
And you wanna reuse all the code,
all the queries, and

75
00:05:06.113 --> 00:05:08.978
everything that you have
done on your web app.

76
00:05:08.978 --> 00:05:13.891
Well, you can do that now with WebAssembly
there is a high-performance way

77
00:05:13.891 --> 00:05:15.825
to run code, Client-side.

