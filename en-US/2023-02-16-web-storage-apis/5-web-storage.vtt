WEBVTT

1
00:00:00.370 --> 00:00:02.740
So web storage,
that's localStorage, remember?

2
00:00:02.740 --> 00:00:04.464
It's a very simple API.

3
00:00:04.464 --> 00:00:06.714
It stores one string per key.

4
00:00:06.714 --> 00:00:11.338
Okay, the entries are also strings,
but it's a synchronous API.

5
00:00:11.338 --> 00:00:12.651
I already said that.

6
00:00:12.651 --> 00:00:14.206
Performance issues, and

7
00:00:14.206 --> 00:00:18.670
because it's a synchronous API,
that's another reason not to use this.

8
00:00:18.670 --> 00:00:22.981
It's not available on workers or
service workers.

9
00:00:22.981 --> 00:00:28.912
So from a service worker, you cannot
read or write onto localStorage.

10
00:00:28.912 --> 00:00:34.347
That's enough reason these
days to not use the API.

11
00:00:34.347 --> 00:00:37.864
Okay, so we should try to avoid it.

12
00:00:39.607 --> 00:00:41.530
Typically, that's your question.

13
00:00:41.530 --> 00:00:47.366
We are going to emulate that simple
key value storage with IndexedDB.

14
00:00:47.366 --> 00:00:52.701
It's possible, and with a very
thin wrapper on top of IndexedDB,

15
00:00:52.701 --> 00:00:55.762
you can have a very simple API as well.

16
00:00:55.762 --> 00:00:57.845
Okay, make sense?

17
00:00:57.845 --> 00:00:59.776
So the API looked like this.

18
00:00:59.776 --> 00:01:03.285
We are going to write some code in
here in a second, is the same API for

19
00:01:03.285 --> 00:01:05.205
localStorage and sessionStorage.

20
00:01:05.205 --> 00:01:07.100
What's the difference?

21
00:01:07.100 --> 00:01:12.860
Persistence, the sessionStorage leaves
only within the browser session,

22
00:01:12.860 --> 00:01:17.113
so if you close the browser,
everything that was storing

23
00:01:17.113 --> 00:01:21.204
session storage in any
operation will be cleared out.

24
00:01:21.204 --> 00:01:25.716
And localStorage will
keep the data forever.

25
00:01:25.716 --> 00:01:29.149
Kind of, okay?

26
00:01:29.149 --> 00:01:33.756
And it's a very simple API is setItem,
key value, getItem key.

27
00:01:33.756 --> 00:01:34.560
That's all.

28
00:01:34.560 --> 00:01:40.775
You have removeItem, you have clear
that clears everything, and that's all.

29
00:01:40.775 --> 00:01:45.150
So localStorage will persist data
between navigation and browser sessions.

30
00:01:45.150 --> 00:01:51.270
Quota is Is typically 5 megabytes per
origin, but on WebKit-based browsers,

31
00:01:51.270 --> 00:01:56.490
that includes chromium,
because I'm not sure if you remember, but

32
00:01:56.490 --> 00:02:03.243
chromium [LAUGH] is a fork from WebKit, so
they're using UTF-16 for storing strings.

33
00:02:03.243 --> 00:02:09.425
I'm not sure if you know what that means,
but that 16 is twice 8,

34
00:02:09.425 --> 00:02:16.056
so that means that every character
in your string is occupying 2 bytes.

35
00:02:16.056 --> 00:02:23.320
So when you're storing strings, it's not
5 megabytes, it's kind of half of it.

36
00:02:23.320 --> 00:02:28.435
Firefox is using UTF-8, so, okay?

37
00:02:28.435 --> 00:02:33.585
So at the end, it's around 2.5 megabytes,
so it doesn't look nice.

38
00:02:33.585 --> 00:02:38.439
And there are a couple of projects on
some browsers, starting from Firefox,

39
00:02:38.439 --> 00:02:43.144
that they will start using your quota
instead of this alternative quota for

40
00:02:43.144 --> 00:02:46.298
local storage, but
we're not there yet, okay?

41
00:02:46.298 --> 00:02:51.216
Maybe in the future,
that limit will be removed, okay?

42
00:02:51.216 --> 00:02:54.557
But not now, we're not there yet.

43
00:02:54.557 --> 00:02:58.683
SessionStorage, it persist
data within a browser session,

44
00:02:58.683 --> 00:03:02.183
but that includes page reloads,
and page restore.

45
00:03:02.183 --> 00:03:08.487
So you are in disney.com, then you go
to starwars.com, you go back to disney,

46
00:03:08.487 --> 00:03:13.053
it's the same browser session so
the data is still there.

47
00:03:13.053 --> 00:03:14.647
But I have a question for you.

48
00:03:14.647 --> 00:03:17.410
What's a session on mobile?

49
00:03:17.410 --> 00:03:22.784
So on your iPhone, on your Android device,
what's a browser session?

50
00:03:22.784 --> 00:03:26.150
Do you close the browser?

51
00:03:26.150 --> 00:03:27.692
When do you close the browser?

52
00:03:31.207 --> 00:03:32.620
Safari or Chrome?

53
00:03:32.620 --> 00:03:33.291
Do you close them?

54
00:03:37.230 --> 00:03:40.587
You press the home button,
and what happens there?

55
00:03:40.587 --> 00:03:42.153
Are you closing the browser?

56
00:03:42.153 --> 00:03:42.972
Are you stopping the session?

57
00:03:42.972 --> 00:03:48.036
If you go back to the browser,
is it the same session or not?

58
00:03:48.036 --> 00:03:53.416
And what happens if I come back tomorrow,
is the same session or not?

59
00:03:53.416 --> 00:03:56.453
So there is no single answer to that.

60
00:03:56.453 --> 00:04:04.012
Which means that the session for a browser
makes no more sense in a mobile side.

61
00:04:04.012 --> 00:04:07.511
It's not clear what the session is, so

62
00:04:07.511 --> 00:04:13.141
that's one sessionStorage is
also becoming useless, okay?

63
00:04:13.141 --> 00:04:17.965
And the quota is typically between
5 megabytes and 12 megabytes, for

64
00:04:17.965 --> 00:04:23.676
some reason, session storage always have
more space on some browsers including IE.

65
00:04:23.676 --> 00:04:27.877
So by the way, localStorage is
available in IE as well, okay?

66
00:04:27.877 --> 00:04:29.907
Even in IE6.

67
00:04:29.907 --> 00:04:34.185
Okay, so to increase performance,
quota and reachability,

68
00:04:34.185 --> 00:04:37.828
we are going to use IndexedDB
instead of web storage.

69
00:04:37.828 --> 00:04:41.110
I think I mentioned that enough
times at this point, okay?

70
00:04:41.110 --> 00:04:46.770
So if you're using localStorage in
your websites, please stop doing that.

