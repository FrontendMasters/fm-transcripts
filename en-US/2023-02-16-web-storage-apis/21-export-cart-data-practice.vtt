WEBVTT

1
00:00:00.060 --> 00:00:04.260
For our project, what we're going
to do is something like this.

2
00:00:04.260 --> 00:00:07.560
Let me go back to Coffee Masters.

3
00:00:08.560 --> 00:00:09.483
I don't have it for some reason.

4
00:00:12.758 --> 00:00:17.643
So, when we have an order,
just to play with this API,

5
00:00:17.643 --> 00:00:21.380
we will have an export and import button.

6
00:00:21.380 --> 00:00:26.138
So, we can export the cart in a file,
and import cart.

7
00:00:26.138 --> 00:00:31.104
So I can send you my cart by email,
by WhatsApp, by messages and

8
00:00:31.104 --> 00:00:32.978
then you can get that and

9
00:00:32.978 --> 00:00:38.258
you can import that in your
Coffee Masters app just for fun, okay?

10
00:00:38.258 --> 00:00:40.720
She'll do something here.

11
00:00:40.720 --> 00:00:46.200
Well, the first step will be to
actually add the icons here, okay?

12
00:00:46.200 --> 00:00:50.820
So because again, this is not
actually a plain HTML document.

13
00:00:50.820 --> 00:00:53.650
It's vanilla JS, it's on React.

14
00:00:53.650 --> 00:00:58.512
So, it's still like,
I don't want to say weird, but

15
00:00:58.512 --> 00:01:03.150
pretty hard work to actually do that part.

16
00:01:03.150 --> 00:01:06.400
So, I have here the setup that
instead of writing that HTML,

17
00:01:06.400 --> 00:01:09.560
it's probably better to copy and paste.

18
00:01:09.560 --> 00:01:12.950
First, we need to check
that the API is available.

19
00:01:12.950 --> 00:01:17.471
The simplest way to do that is to
check if showOpenFilePicker is

20
00:01:17.471 --> 00:01:19.362
available in the window.

21
00:01:19.362 --> 00:01:23.455
Because on Safari,
we do have the API but not the picker.

22
00:01:23.455 --> 00:01:27.298
So in Safari, that will be false, okay?

23
00:01:27.298 --> 00:01:31.825
Which is okay, because in Safari if we
save the file it will be in a private file

24
00:01:31.825 --> 00:01:34.625
system is the same as index DV at the end,
okay?

25
00:01:34.625 --> 00:01:37.563
So yeah, we don't need to do that.

26
00:01:37.563 --> 00:01:42.265
So if it's available,
I'm going to add, okay?

27
00:01:42.265 --> 00:01:45.370
Two links with two icons, okay?

28
00:01:46.510 --> 00:01:50.512
These icons are coming from material
design, we're in the Order.js file.

29
00:01:50.512 --> 00:01:57.122
So, I'm going to copy
this into Order.js file.

30
00:01:57.122 --> 00:02:00.590
But let me close the one
that we don't use.

31
00:02:02.220 --> 00:02:06.287
So I'm going to Order.js and
within render,

32
00:02:06.287 --> 00:02:11.618
it doesn't look so nice, but
anyway I'm going to add this.

33
00:02:16.210 --> 00:02:18.190
Okay?
Two icons.

34
00:02:18.190 --> 00:02:24.160
So if I run this now,
I should see two icons.

35
00:02:24.160 --> 00:02:25.230
But I'm not seeing two icons.

36
00:02:25.230 --> 00:02:25.730
Why?

37
00:02:28.660 --> 00:02:30.198
Why do you think I'm not saying to icons?

38
00:02:32.640 --> 00:02:34.050
Anyone?
&gt;&gt; You're still offline

39
00:02:35.540 --> 00:02:36.940
&gt;&gt; I might be offline but I'm not.

40
00:02:38.010 --> 00:02:41.514
But yeah, the problem is that it's cached.

41
00:02:41.514 --> 00:02:46.284
And so, you can realize now how difficult

42
00:02:46.284 --> 00:02:51.060
it is to debug apps with service workers.

43
00:02:51.060 --> 00:02:54.090
You never know which person
is currently rendering.

44
00:02:55.660 --> 00:03:00.080
Also, here you can see that there is a new
version of the service worker waiting to

45
00:03:00.080 --> 00:03:01.530
be activated.

46
00:03:01.530 --> 00:03:03.417
So probably we changed the service worker,
but

47
00:03:03.417 --> 00:03:05.600
it's still not the service
worker that is activated.

48
00:03:05.600 --> 00:03:08.920
So it's still cache first, okay?

49
00:03:08.920 --> 00:03:09.420
Makes sense?

50
00:03:09.420 --> 00:03:13.900
So that's why it will take time
to get used to that, okay?

51
00:03:13.900 --> 00:03:19.750
So now you can see that I have
these two icons here, okay?

52
00:03:19.750 --> 00:03:25.140
I can center the icons, but
I have the import and export icons there.

53
00:03:25.140 --> 00:03:28.790
So every time you make a change now, if
you have a service worker up and running,

54
00:03:28.790 --> 00:03:30.660
sometimes you need to do double reload.

55
00:03:30.660 --> 00:03:34.981
Sometimes you need to wait a couple of
minutes after the service worker was

56
00:03:34.981 --> 00:03:38.900
activated, because you need to wait for
the new one to appear.

57
00:03:38.900 --> 00:03:42.580
So debugging with service workers,
it's not simple.

58
00:03:42.580 --> 00:03:43.255
It takes time, okay?

59
00:03:43.255 --> 00:03:44.369
And you need to get used to that?

60
00:03:45.530 --> 00:03:48.270
So, now I need to add the code, okay?

61
00:03:48.270 --> 00:03:51.920
That's the most important
part to these two icons.

62
00:03:51.920 --> 00:03:55.961
These two icons are calling importCart and
exportCart, because import and

63
00:03:55.961 --> 00:03:57.930
export are keywords in JavaScript.

64
00:03:57.930 --> 00:04:02.506
So, what I need is to add here somewhere

65
00:04:02.506 --> 00:04:07.400
importCart, and exportCart, okay?

66
00:04:07.400 --> 00:04:09.340
So don't use import and

67
00:04:09.340 --> 00:04:14.878
export because you might have some
problems with keywords, okay?

68
00:04:14.878 --> 00:04:19.092
So, first,
we can check if the API is available but

69
00:04:19.092 --> 00:04:24.876
actually if we are getting here,
we have already did a check on the UI.

70
00:04:24.876 --> 00:04:29.830
So, if the API is not available we
shouldn't be seeing the icons anyway.

71
00:04:31.160 --> 00:04:36.456
But anyway, I want to show you here
in the console, let me close this for

72
00:04:36.456 --> 00:04:41.224
a second, that in Window,
we have these showOpenFilePicker,

73
00:04:41.224 --> 00:04:45.940
showSaveFilePicker, and
showDirectoryPicker.

74
00:04:45.940 --> 00:04:48.560
Those are the three pickers,
come from this API.

75
00:04:48.560 --> 00:04:51.350
BS code, was using showDirectoryPicker.

76
00:04:52.570 --> 00:04:56.533
And with that permission, it could read
all the files, the name of the file, so

77
00:04:56.533 --> 00:04:58.080
it appears in the list.

78
00:04:58.080 --> 00:05:00.126
And also it can read the files.

79
00:05:00.126 --> 00:05:03.970
And then the first time it tried
to write over that folder,

80
00:05:03.970 --> 00:05:06.570
we needed to give another permission.

81
00:05:06.570 --> 00:05:10.560
But we are going to use the file
pickers in our case, okay?

82
00:05:10.560 --> 00:05:12.109
But they are pretty similar anyway.

83
00:05:14.080 --> 00:05:17.218
So, we're going to start
with a properly export, so

84
00:05:17.218 --> 00:05:21.700
we can actually see if it's working
the file, so we can try this.

85
00:05:21.700 --> 00:05:24.804
So, we're going to create a handle,

86
00:05:24.804 --> 00:05:28.970
because this is going to be a new file,
okay?

87
00:05:28.970 --> 00:05:36.580
So, we're going to use on the await
The show save, showSaveFilePicker.

88
00:05:37.710 --> 00:05:40.450
We don't need the window actually,
but anyway.

89
00:05:42.720 --> 00:05:46.960
And because it's a weight,
we need to convert this to async.

90
00:05:46.960 --> 00:05:50.125
And probably we have to
do that also on import,

91
00:05:50.125 --> 00:05:55.490
because the whole API Is promise-based,
and we are not using them on catch.

92
00:05:55.490 --> 00:05:57.353
We're using async await, okay?

93
00:05:57.353 --> 00:06:03.066
So show.SaveFile.Picker receives
an objects with better data, okay?

94
00:06:03.066 --> 00:06:08.140
We need to pass the types
of objects that we accept.

95
00:06:08.140 --> 00:06:13.120
Why it's plural so
I can actually set more than one time.

96
00:06:13.120 --> 00:06:15.300
It's not common, okay?

97
00:06:15.300 --> 00:06:19.357
But you can let the system
side that you accept,

98
00:06:19.357 --> 00:06:25.344
the user can save a txt file or
a CSV file, comma separated value file,

99
00:06:25.344 --> 00:06:29.119
or so you can set a couple of options,
okay?

100
00:06:29.119 --> 00:06:31.120
For the user.

101
00:06:31.120 --> 00:06:34.296
Or you can say png or
jpeg or gif or gif and

102
00:06:34.296 --> 00:06:38.253
then the browser will show in the dialog,
okay?

103
00:06:38.253 --> 00:06:43.260
Several possible options for
the extension, for example.

104
00:06:43.260 --> 00:06:46.630
Or things like that, but
typically we have only one, okay?

105
00:06:46.630 --> 00:06:51.444
So we are going to pass a description, so

106
00:06:51.444 --> 00:07:00.140
we can call this is going to be
a JSON CoffeeMasters Cart File, okay?

107
00:07:00.140 --> 00:07:06.303
Then the accept will be, it's an object

108
00:07:06.303 --> 00:07:11.378
with the MIME type as the key, and

109
00:07:11.378 --> 00:07:18.080
an array of possible extensions like so.

110
00:07:18.080 --> 00:07:20.750
It's your list, okay?

111
00:07:21.870 --> 00:07:22.580
That's how it works.

112
00:07:22.580 --> 00:07:24.320
So that's the handle.

113
00:07:24.320 --> 00:07:28.440
So if the user accepts this,
then you have the handle, okay?

114
00:07:28.440 --> 00:07:31.707
So what you need to do is
create the file object.

115
00:07:35.055 --> 00:07:37.000
That is getting the file from that handle.

116
00:07:38.800 --> 00:07:40.940
That's the file reference now.

117
00:07:40.940 --> 00:07:43.560
Over that file,
you can read or you can write.

118
00:07:43.560 --> 00:07:45.970
But in this case we want to write, okay?

119
00:07:45.970 --> 00:07:50.514
So, because we want to write,
we need to create this other object.

120
00:07:52.546 --> 00:07:58.480
So, we create a writeable one.

121
00:07:58.480 --> 00:08:05.263
So this handle, it's for read-only,
and this handle it's for writing.

122
00:08:08.400 --> 00:08:10.360
Okay?
So, if you wanna read the file,

123
00:08:10.360 --> 00:08:14.360
you use this one, if you wanna write
the file, you take the first one.

124
00:08:14.360 --> 00:08:17.820
So, now that I have this,
I just need to write.

125
00:08:17.820 --> 00:08:22.344
So, you write and after that,
you close the file.

126
00:08:28.043 --> 00:08:31.542
Both are promise-based,
so I should wait for

127
00:08:31.542 --> 00:08:35.860
the right operation to finish
before trying to close it.

128
00:08:35.860 --> 00:08:38.223
By the way,
I'm not setting the content yet, and

129
00:08:38.223 --> 00:08:40.260
what's the content I'm going to write?

130
00:08:40.260 --> 00:08:45.114
I can write array buffers, so
if I have bites from somewhere I

131
00:08:45.114 --> 00:08:50.720
can directly write that, or
in this case, it can be text.

132
00:08:50.720 --> 00:08:53.698
So I can stringify my cart.

133
00:09:02.434 --> 00:09:03.390
Okay, make sense?

134
00:09:05.960 --> 00:09:07.080
Those are the steps.

135
00:09:08.150 --> 00:09:10.020
Do you have any questions at this point?

136
00:09:12.140 --> 00:09:13.160
Yep.

137
00:09:13.160 --> 00:09:15.975
&gt;&gt; One, but I think it's probably
just me misunderstanding some of

138
00:09:15.975 --> 00:09:17.007
the underlying stuff.

139
00:09:17.007 --> 00:09:18.870
You said you could write array buffers.

140
00:09:18.870 --> 00:09:22.030
You couldn't write like
a binary large object.

141
00:09:22.030 --> 00:09:23.374
Like if you just had.

142
00:09:23.374 --> 00:09:24.195
&gt;&gt; Like a blob.

143
00:09:24.195 --> 00:09:25.110
&gt;&gt; Yeah, a blob.

144
00:09:25.110 --> 00:09:29.256
&gt;&gt; So this is more array buffer,
but you can convert, from blob,

145
00:09:29.256 --> 00:09:31.613
you can convert your array buffer.

146
00:09:31.613 --> 00:09:36.070
So JavaScript today has these
two-ways of handle binary data.

147
00:09:36.070 --> 00:09:39.852
And there are more because you can
also use an int eight array or

148
00:09:39.852 --> 00:09:41.450
things like that.

149
00:09:41.450 --> 00:09:44.300
So there are many ways
to handle binary data,

150
00:09:44.300 --> 00:09:49.480
it depends on where the data is coming
from, you will get different ways.

151
00:09:49.480 --> 00:09:52.570
But this is more array buffer oriented.

152
00:09:53.980 --> 00:09:57.360
But it's possible to move
between these two options.

153
00:09:57.360 --> 00:09:58.937
&gt;&gt; And
I think that's a piece I was missing.

154
00:09:58.937 --> 00:09:59.437
All right, thanks.

155
00:10:00.620 --> 00:10:02.912
&gt;&gt; Okay.
So if we try this,

156
00:10:04.000 --> 00:10:09.194
We can now try to export,
that is the download icon,

157
00:10:09.194 --> 00:10:15.229
and you can see the first thing
that I've seen is the dialog.

158
00:10:15.229 --> 00:10:21.889
So this dialog is on Mac OS is not showing
you a lot of metadata actually, okay?

159
00:10:21.889 --> 00:10:29.084
On Windows, you'll see more metadata, such
as the name of the type that I'm saving,

160
00:10:29.084 --> 00:10:33.240
but that has to do with how
the OS renders a picker.

161
00:10:34.260 --> 00:10:36.670
So I can save this as Cart.JSON.

162
00:10:37.740 --> 00:10:38.586
That's all.

163
00:10:38.586 --> 00:10:40.827
I have the fun, okay?

164
00:10:40.827 --> 00:10:44.993
So, I can actually look
into my desktop and

165
00:10:44.993 --> 00:10:50.450
I have the cart.JSON,
400 bytes, so it's there.

166
00:10:51.960 --> 00:10:57.630
So, there is no second permission
dialog in this case because, it was

167
00:10:57.630 --> 00:11:04.183
originally a save dialog I don't get
a second permission dialogue for writing.

168
00:11:04.183 --> 00:11:10.460
That typically, you will get on other
situations when you create a writeable.

169
00:11:11.950 --> 00:11:17.263
So, if you open a file for reading and
then you try to write over that file,

170
00:11:17.263 --> 00:11:19.946
the user will get a second dialogue.

171
00:11:19.946 --> 00:11:23.203
Say, hey, you open a file for reading, but

172
00:11:23.203 --> 00:11:28.324
now this web is trying to write on
that file, do you allow that or not?

