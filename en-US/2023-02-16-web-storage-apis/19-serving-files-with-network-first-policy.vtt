WEBVTT

1
00:00:00.000 --> 00:00:06.913
The only problem that we have is
that this fetch is also cache first.

2
00:00:06.913 --> 00:00:10.587
And we already know what that means.

3
00:00:10.587 --> 00:00:13.646
This code is going to the cache first.

4
00:00:13.646 --> 00:00:16.877
If it's in the cache,
it will serve it from the cache.

5
00:00:16.877 --> 00:00:20.556
But it will never update the cache.

6
00:00:20.556 --> 00:00:22.075
When is the cache being updated?

7
00:00:22.075 --> 00:00:28.203
If I change my HTML, if I change my CSS,
I changed the colors.

8
00:00:28.203 --> 00:00:30.486
Will I take the change?

9
00:00:30.486 --> 00:00:36.743
No, because after I cached the CSS,
it will be there in the cache forever.

10
00:00:36.743 --> 00:00:41.014
So I also need to find
a way to solve the problem.

11
00:00:41.014 --> 00:00:48.566
Remember that when we were using index vb,
we use other algorithm also.

12
00:00:48.566 --> 00:00:49.964
It was network first.

13
00:00:49.964 --> 00:00:52.830
Well, something similar happens here.

14
00:00:52.830 --> 00:00:56.224
You can also have network first.

15
00:00:56.224 --> 00:00:59.025
There are other design patterns as well.

16
00:00:59.025 --> 00:01:02.378
There is one known as
stale-wide-revalidate.

17
00:01:02.378 --> 00:01:04.366
I'm not sure if you're
have heard about it.

18
00:01:04.366 --> 00:01:07.241
So in that case, what you're doing is,

19
00:01:07.241 --> 00:01:13.248
you're always starting from the cache like
this one, but also you go to a network and

20
00:01:13.248 --> 00:01:17.502
update the cache for
the next time you need, that's fine.

21
00:01:17.502 --> 00:01:24.599
But for here, we can go back
to our companion website and

22
00:01:24.599 --> 00:01:30.495
I have a code here that
makes Network-First.

23
00:01:30.495 --> 00:01:36.908
Actually, it's not so different, it's
just changing a little bit the structure.

24
00:01:36.908 --> 00:01:40.428
So, for example, please don't keep both.

25
00:01:40.428 --> 00:01:44.749
This is not going to work, is one
fetch even handler or the other one.

26
00:01:44.749 --> 00:01:47.658
For this example at least I
will comment the other one.

27
00:01:47.658 --> 00:01:48.953
So in this case,

28
00:01:48.953 --> 00:01:54.700
it's actually pretty similar to
the network first we did for IndexedDB.

29
00:01:54.700 --> 00:01:57.533
So when there is a new
fetch to the network,

30
00:01:57.533 --> 00:01:59.912
we respond with an async function.

31
00:01:59.912 --> 00:02:06.008
We first try to go to the network and
return that network based response.

32
00:02:06.008 --> 00:02:13.251
And only if it fails,
we go to the cached version.

33
00:02:13.251 --> 00:02:19.869
And if you want here,
also you can update the cache.

34
00:02:19.869 --> 00:02:20.402
Can you?

35
00:02:20.402 --> 00:02:23.974
Yes, it's not so complicated,
we can do it if we want.

36
00:02:23.974 --> 00:02:29.122
So, we need to open the same,
we need to open the cache.

37
00:02:29.122 --> 00:02:33.106
So, caches.open with the name.

38
00:02:33.106 --> 00:02:36.723
I think, well,
in this case we should know which one,

39
00:02:36.723 --> 00:02:42.246
because now we have two caches, the image
cache, and we have the other one, okay?

40
00:02:42.246 --> 00:02:44.365
So, we need to look at the URL.

41
00:02:44.365 --> 00:02:48.287
Well, right now,
let me do it quickly with just assets or

42
00:02:48.287 --> 00:02:50.668
let's call this updated assets.

43
00:02:50.668 --> 00:02:53.404
So, I'm creating a new one for this, okay?

44
00:02:53.404 --> 00:02:55.205
Just to show you how it works.

45
00:02:55.205 --> 00:03:00.797
And what you do,
you don't do add, you do put.

46
00:03:00.797 --> 00:03:06.148
Put, what it does is takes a request.

47
00:03:06.148 --> 00:03:07.661
I forgot the await here.

48
00:03:07.661 --> 00:03:12.796
So, that's the await created
by Visual Studio was okay, but

49
00:03:12.796 --> 00:03:18.450
in a weird place, we take a request,
and then the response, okay?

50
00:03:18.450 --> 00:03:22.256
So, you typically we think that
we can do something like this.

51
00:03:22.256 --> 00:03:27.159
So, this is my request and
I will save the fetch response.

52
00:03:27.159 --> 00:03:32.109
The problem is that HTTP responses in

53
00:03:32.109 --> 00:03:37.218
JavaScript, they cannot be reused,

54
00:03:37.218 --> 00:03:41.858
okay, because they are streams.

55
00:03:41.858 --> 00:03:44.194
When you have an a stream type of object,

56
00:03:44.194 --> 00:03:47.994
when you consume the stream
the stream is gone, the data is gone.

57
00:03:47.994 --> 00:03:52.939
So I cannot return
the response to the browser if

58
00:03:52.939 --> 00:03:56.778
I have already used it for the cache.

59
00:03:56.778 --> 00:03:57.911
Make sense?

60
00:03:57.911 --> 00:04:02.002
So I need to clone it.

61
00:04:02.002 --> 00:04:06.107
So I make a clone of that response for
the cache.

62
00:04:06.107 --> 00:04:09.835
So then, I can return
the original one to the browser.

63
00:04:09.835 --> 00:04:11.593
And so little tricky, okay?

64
00:04:11.593 --> 00:04:15.243
This is a bonus,
I wasn't expecting to do that but anyway.

65
00:04:15.243 --> 00:04:18.126
Make sense.
So in that case you also update the cache.

66
00:04:18.126 --> 00:04:20.777
And that's how you do Network-First.

67
00:04:20.777 --> 00:04:25.526
And in in service workers,
there many more diagrams, ideas,

68
00:04:25.526 --> 00:04:28.044
and algorithms that you can use.

69
00:04:28.044 --> 00:04:31.699
And if you don't want to write your
own code for the service worker,

70
00:04:31.699 --> 00:04:33.443
typically you use a framework.

71
00:04:33.443 --> 00:04:38.603
And there is one framework that
is the king here, it's Workbox.

72
00:04:38.603 --> 00:04:41.423
Workbox comes with it's open source,

73
00:04:41.423 --> 00:04:46.128
it comes from the Chrome team,
but it's multiplatform, okay?

74
00:04:46.128 --> 00:04:49.244
This is the name.

75
00:04:49.244 --> 00:04:51.943
So, it's a set of libraries for
service workers.

76
00:04:51.943 --> 00:04:57.050
So a few years ago, someone said,
it's the jQuery of service workers.

77
00:04:57.050 --> 00:05:01.631
Yeah, but now it feels like if I say that,
it's like something old, right?

78
00:05:01.631 --> 00:05:03.247
[LAUGH] Deprecated.

79
00:05:03.247 --> 00:05:07.384
So, anyway, but it's like the library for
service workers.

80
00:05:07.384 --> 00:05:13.189
So, if you don't want to write your
own service worker with your codes,

81
00:05:13.189 --> 00:05:17.473
it includes a lot of strategies
already for caching,

82
00:05:17.473 --> 00:05:20.537
already done and ready for you to use.

83
00:05:20.537 --> 00:05:24.374
You just specify which strategy
you want for the folder images.

84
00:05:24.374 --> 00:05:27.333
You want another strategy for
the folder data.

85
00:05:27.333 --> 00:05:31.322
And it will do the caching,
the pre-caching and the serving for you.

86
00:05:31.322 --> 00:05:38.225
So here, you have the three more common
caching strategies, cache first.

87
00:05:38.225 --> 00:05:46.117
So with cache first, you are prioritizing
speed over freshness of the data.

88
00:05:46.117 --> 00:05:51.504
Network first,
you prioritize freshness over speed.

89
00:05:51.504 --> 00:05:56.152
And stay-while-validate that is trying

90
00:05:56.152 --> 00:06:01.064
to keep a balance between
the other two okay?

91
00:06:01.064 --> 00:06:05.656
And the main challenge here is how
to update the resources because

92
00:06:05.656 --> 00:06:07.910
files are saved in the client and

93
00:06:07.910 --> 00:06:13.356
updating files in the server one trigger
any automatic change in the client.

94
00:06:13.356 --> 00:06:15.711
We have already discussed this, okay?

95
00:06:15.711 --> 00:06:18.114
But just as a wrap up on this topic, so

96
00:06:18.114 --> 00:06:22.548
if you change something on the server,
the client will never know.

97
00:06:22.548 --> 00:06:27.138
So we need to define and
code an update algorithm, okay?

98
00:06:27.138 --> 00:06:29.881
So unfortunately,
the API is not helping us with this.

99
00:06:29.881 --> 00:06:31.839
It's up to us, okay?

100
00:06:31.839 --> 00:06:34.751
So, if you have a build process,
typically,

101
00:06:34.751 --> 00:06:40.144
the build process will create with a hash,
with a version number, with a timestamp.

102
00:06:40.144 --> 00:06:43.816
You can create like a manifest
of resources, and versions or

103
00:06:43.816 --> 00:06:45.402
hashes of each resource.

104
00:06:45.402 --> 00:06:49.835
So then, client side, you can compare and

105
00:06:49.835 --> 00:06:53.169
update your code, make sense?

106
00:06:53.169 --> 00:06:56.954
Developer is in full
control on how to cache and

107
00:06:56.954 --> 00:07:01.708
serve the resources of the PWA and
how to manage API calls,

108
00:07:01.708 --> 00:07:05.022
with the good and the bad of that, okay?

109
00:07:05.022 --> 00:07:07.945
Full responsibility we have on this.

