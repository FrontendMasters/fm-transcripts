WEBVTT

1
00:00:00.350 --> 00:00:03.421
Now if you're following
along with instructions,

2
00:00:03.421 --> 00:00:06.926
we will get into the next chapter,
that's cache storage.

3
00:00:06.926 --> 00:00:13.410
So it's chapter four,
cash storage, caching images.

4
00:00:13.410 --> 00:00:16.735
We are already caching the menu,
so we know that on IndexedDB,

5
00:00:16.735 --> 00:00:18.510
we are caching the menu, right?

6
00:00:19.620 --> 00:00:22.180
So, but what about images?

7
00:00:22.180 --> 00:00:25.612
Because I have images, so
if I'm offline, I have the menu but

8
00:00:25.612 --> 00:00:27.070
I don't have the images.

9
00:00:28.360 --> 00:00:31.824
Well, maybe we can cache images.

10
00:00:31.824 --> 00:00:35.855
So for that, we're going to
without the service worker, okay?

11
00:00:35.855 --> 00:00:41.160
So I'm going to show you how the API
works first without the service worker.

12
00:00:41.160 --> 00:00:45.000
So within the Menu.js,
that's where we were right now.

13
00:00:45.000 --> 00:00:50.453
In the load method,
maybe at the end before rendering or

14
00:00:50.453 --> 00:00:54.399
after rendering, it doesn't matter,

15
00:00:54.399 --> 00:00:59.170
I can try to also download all the images,
okay?

16
00:00:59.170 --> 00:01:02.050
And you will see how this works.

17
00:01:02.050 --> 00:01:05.760
So first,
I should check if I do have data, why?

18
00:01:05.760 --> 00:01:10.607
Because maybe or if the length is greater
than zero, maybe there is an error I

19
00:01:10.607 --> 00:01:15.530
don't have data so the rest of the code
will not work because I'm going to loop

20
00:01:15.530 --> 00:01:20.790
through the data and if it's not an array,
it's gonna work and blah blah blah.

21
00:01:20.790 --> 00:01:23.155
So I'm just checking this.

22
00:01:23.155 --> 00:01:26.250
So how the caches API work.

23
00:01:26.250 --> 00:01:29.160
So it's actually promise-based by default.

24
00:01:29.160 --> 00:01:31.010
Remember IDB that has OpenDB?

25
00:01:32.090 --> 00:01:36.935
Well this one is caches.open and
a name For

26
00:01:36.935 --> 00:01:41.390
example coffee master prefix images.

27
00:01:41.390 --> 00:01:43.180
That's all.

28
00:01:43.180 --> 00:01:45.010
So we wait for that.

29
00:01:45.010 --> 00:01:50.310
And we save this in a cache
reference file like so.

30
00:01:51.680 --> 00:01:53.308
As simple as this.

31
00:01:53.308 --> 00:01:58.190
We open the cache and if it doesn't exist,
it will create it as IndexedDB.

32
00:01:58.190 --> 00:02:01.700
So there is no new or create,
it's just the same open.

33
00:02:02.860 --> 00:02:03.728
So in this case,

34
00:02:03.728 --> 00:02:07.900
it's like opening a folder where now
the browser will be ready to install data.

35
00:02:09.680 --> 00:02:10.509
Make sense?

36
00:02:10.509 --> 00:02:15.036
So now I will start looping
through the data that I have and

37
00:02:15.036 --> 00:02:18.241
I will say for each category that I have,

38
00:02:18.241 --> 00:02:22.885
I'm going to talk to that cache,
and then go in the cache.

39
00:02:22.885 --> 00:02:27.540
In the cache, I can add one element or
a lot of elements.

40
00:02:27.540 --> 00:02:29.880
So I can add one request.

41
00:02:29.880 --> 00:02:33.130
I'm adding a response
using a request as a key.

42
00:02:33.130 --> 00:02:36.838
So I can just say here I want
to add index html just for

43
00:02:36.838 --> 00:02:40.270
you to understand what I'm doing here.

44
00:02:40.270 --> 00:02:43.288
So I can add a URL and
then the browser will go,

45
00:02:43.288 --> 00:02:47.750
will download that URL and
it will store the response in the cache.

46
00:02:49.070 --> 00:02:55.621
Of course I don't want this and
instead of add, there is an addAll.

47
00:02:55.621 --> 00:02:59.698
AddAll receives an array use of resources.

48
00:02:59.698 --> 00:03:05.541
So what I can do is I can add all and
I can take my categories or

49
00:03:05.541 --> 00:03:09.836
my category, one category and
I can say for

50
00:03:09.836 --> 00:03:15.220
the list of products that I have there,
I can do a map.

51
00:03:16.220 --> 00:03:18.590
How are you with functional programming?

52
00:03:18.590 --> 00:03:22.220
So if you're coming from react,
you're pretty used to that.

53
00:03:22.220 --> 00:03:28.980
So I can take every product that I
have and what I need is the image.

54
00:03:28.980 --> 00:03:31.850
There is an let's review the JSON.

55
00:03:31.850 --> 00:03:38.220
So we have the product's array and
every product has an image, okay?

56
00:03:38.220 --> 00:03:39.890
So something like this.

57
00:03:39.890 --> 00:03:43.849
The problem is this is not gonna
work because this is going

58
00:03:43.849 --> 00:03:46.817
to add an array of images
throughout all but

59
00:03:46.817 --> 00:03:52.160
not the full path of where the image
resides, just the image name.

60
00:03:52.160 --> 00:03:57.870
So that's why I need to
put this in a string.

61
00:03:57.870 --> 00:04:02.570
And right now they are in data images.

62
00:04:02.570 --> 00:04:03.703
They are here.

63
00:04:03.703 --> 00:04:08.303
What I'm doing here is that
every time I'm loading,

64
00:04:08.303 --> 00:04:13.514
I'm also going to the network and
I'm caching all the images

65
00:04:13.514 --> 00:04:18.344
in the cache storage of
the browser under a name, okay?

66
00:04:18.344 --> 00:04:21.350
Let's see.

67
00:04:21.350 --> 00:04:25.740
So I'm going back here to Coffee Masters,
I'm going to refresh.

68
00:04:25.740 --> 00:04:28.418
How do I know if this is working?

69
00:04:28.418 --> 00:04:33.940
Well within application,
it's not within storage, so it's not here.

70
00:04:33.940 --> 00:04:37.230
If we scroll down a little bit,
we have a section for cache.

71
00:04:38.560 --> 00:04:40.930
And here I have my cache storage.

72
00:04:40.930 --> 00:04:45.729
I can open this and
I see my cm-image storage prefixed.

73
00:04:46.780 --> 00:04:53.100
And if I click there,
I can see all the files that were cached.

74
00:04:53.100 --> 00:04:57.910
And if I click on those files, I can
preview the files, so they are there.

75
00:04:57.910 --> 00:04:58.670
Where?

76
00:04:58.670 --> 00:05:04.700
Client side, all the files
were downloaded in my device.

77
00:05:05.830 --> 00:05:11.100
And if I have persistent storage,
they're not going to be removed

78
00:05:11.100 --> 00:05:16.570
by storage pressure like
the standard HTTP browser cache.

79
00:05:16.570 --> 00:05:20.880
Remember, this goes to my quota and
to the persistence of my storage.

80
00:05:22.880 --> 00:05:23.670
Do you have any questions?

81
00:05:25.190 --> 00:05:25.690
No?

82
00:05:27.630 --> 00:05:30.940
I mean the problem is that
I'm not using those images.

83
00:05:30.940 --> 00:05:33.810
I mean I have downloaded those images,
the browser has those images.

84
00:05:33.810 --> 00:05:38.719
I have access to those, but
I'm not using them, okay, yet.

85
00:05:38.719 --> 00:05:43.024
So there are two options to
actually use now this cache API.

86
00:05:43.024 --> 00:05:45.445
One is to query because I could query.

87
00:05:45.445 --> 00:05:48.260
Let me do that from the console.

88
00:05:48.260 --> 00:05:52.354
So I can await, I can say hey caches API,

89
00:05:52.354 --> 00:05:56.220
I wanna see if you match this request.

90
00:05:56.220 --> 00:06:00.548
I can pass a request or
a URL such as data, images and

91
00:06:00.548 --> 00:06:03.380
let me take the name of one image.

92
00:06:05.250 --> 00:06:07.880
Data images like blacktea.png.

93
00:06:10.330 --> 00:06:13.258
So and I'm going to await for that.

94
00:06:13.258 --> 00:06:18.154
This is going to search in
the cache to see if there is any

95
00:06:18.154 --> 00:06:21.810
cache that contains that URL.

96
00:06:21.810 --> 00:06:25.330
And it's given me an HTTP
response in return.

97
00:06:26.500 --> 00:06:28.850
So I have the body there.

98
00:06:28.850 --> 00:06:34.000
So I could pass the body as JSON or
as array buffer, and do something with it.

99
00:06:35.510 --> 00:06:40.140
In JavaScript, I have the status text,
this is like making a fetch.

100
00:06:40.140 --> 00:06:42.400
This is the object that you
will receive from a fetch.

101
00:06:42.400 --> 00:06:43.450
But I'm not doing a fetch.

102
00:06:44.610 --> 00:06:48.530
I'm just making a request
to the local cache.

103
00:06:48.530 --> 00:06:51.776
And the object that they're
receiving return is the same.

104
00:06:51.776 --> 00:06:54.120
And if it doesn't exist,
I'm not getting a 404.

105
00:06:54.120 --> 00:06:59.400
So if it doesn't exist,
I'm getting undefined in return.

106
00:06:59.400 --> 00:07:04.550
So if the query has no results,
it's not giving me any response in return.

107
00:07:07.010 --> 00:07:10.102
Make sense?
The problem is that working with images

108
00:07:10.102 --> 00:07:14.896
like this, it's complicated because
how can I take that response and

109
00:07:14.896 --> 00:07:19.140
take that response to
the IMG element in the HTML?

110
00:07:19.140 --> 00:07:23.999
I'm not saying you can't, but you need
to do an array buffer or a blob and

111
00:07:23.999 --> 00:07:25.923
work with the IMG, the DOM.

112
00:07:25.923 --> 00:07:30.621
I mean I can but
there are better ways, okay?

113
00:07:30.621 --> 00:07:32.507
What's the other way?

114
00:07:32.507 --> 00:07:34.249
The service worker.

