WEBVTT

1
00:00:00.220 --> 00:00:05.210
The next step is try to
start writing some storage.

2
00:00:05.210 --> 00:00:11.393
So, if you look at the Coffee Masters,
actually if I add the Black Americano,

3
00:00:11.393 --> 00:00:15.157
and then I had an iced
coffee as well to my order.

4
00:00:15.157 --> 00:00:20.031
The first problem that we have
in terms of user experience with

5
00:00:20.031 --> 00:00:25.103
these PWA Is that if I refresh my order,
my order is gone, okay?

6
00:00:25.103 --> 00:00:29.985
So as the first thing that we
can do is to use WebStorage that

7
00:00:29.985 --> 00:00:33.515
we know that we don't want to, okay.

8
00:00:33.515 --> 00:00:36.888
But just in case you wanna see the API,
and also,

9
00:00:36.888 --> 00:00:43.155
we can replace that WebStorage-based
solution with an index DB solution, okay?

10
00:00:43.155 --> 00:00:47.484
So, what we're going to do
is we're going to apply some

11
00:00:47.484 --> 00:00:52.181
techniques from local storage
to save the order or the cart,

12
00:00:52.181 --> 00:00:58.730
the current contents of the cart in local
storage and retrieve that later, okay?

13
00:00:58.730 --> 00:01:03.730
That's kind of the idea, so
I'm going back to my project,

14
00:01:03.730 --> 00:01:08.832
and we are going to work right
now with the Order.js module.

15
00:01:08.832 --> 00:01:13.807
So, here we have actually the order,
we have the cart here and

16
00:01:13.807 --> 00:01:18.840
some methods like add,
remove, place, render.

17
00:01:18.840 --> 00:01:25.045
So, remember this is plain JavaScript,
so don't be afraid, okay, it works,

18
00:01:25.045 --> 00:01:32.590
of course, later you can convert this PWA
into Menu.js, react, wherever you want.

19
00:01:32.590 --> 00:01:37.679
So, what we're going to do here,
remember that you can follow along

20
00:01:37.679 --> 00:01:42.856
also the code that I'm going to write
with the companion site as well,

21
00:01:42.856 --> 00:01:47.180
I'm going to add here two methods,
load and save, okay?

22
00:01:47.180 --> 00:01:52.176
So, I'm going to add two methods to my
order, so I'm going to save the order and

23
00:01:52.176 --> 00:01:55.290
then I'm going to load the order, okay?

24
00:01:55.290 --> 00:02:00.786
So this order is actually using
JSON Syntax not like static classes,

25
00:02:00.786 --> 00:02:06.295
starting members to classes that
is not available in every browser.

26
00:02:06.295 --> 00:02:10.493
So, I'm trying to stay here
because I don't have Webpack, and

27
00:02:10.493 --> 00:02:13.605
I'm not passing this
through any transpiler,

28
00:02:13.605 --> 00:02:17.880
I don't have any of that TypeScript or
things like that.

29
00:02:17.880 --> 00:02:22.678
What I'm doing here is just
staying with ECMAScript 2017, so,

30
00:02:22.678 --> 00:02:27.230
that is currently compatible
with every browser out there.

31
00:02:27.230 --> 00:02:30.316
So, saving is actually pretty simple,

32
00:02:30.316 --> 00:02:35.320
I need to take the contents of my card and
save it in local storage.

33
00:02:36.510 --> 00:02:41.647
It can be session storage as well, but
remember that we said that on mobile,

34
00:02:41.647 --> 00:02:44.393
the session is like an unclear concept.

35
00:02:44.393 --> 00:02:49.299
So maybe we can use local storage and
we're going to set an item key value,

36
00:02:49.299 --> 00:02:51.080
the key is a string.

37
00:02:51.080 --> 00:02:56.665
The value is also a string, so for
the key, so I can use card but

38
00:02:56.665 --> 00:03:03.980
as I mentioned before, it's a good
idea to prefix your storage names.

39
00:03:03.980 --> 00:03:08.680
In case in the future,
you have more web apps running your

40
00:03:08.680 --> 00:03:12.276
remember that everything
is shared in that case.

41
00:03:12.276 --> 00:03:16.500
So again, I say cm, coffee master's,
okay, flashcard, and

42
00:03:16.500 --> 00:03:19.745
the cart is actually
available in order.cart.

43
00:03:19.745 --> 00:03:26.455
The problem is that that's an array, it's
an array of objects, it's not in a string.

44
00:03:26.455 --> 00:03:29.763
So, every time I'm working
with local storage,

45
00:03:29.763 --> 00:03:33.305
I must convert everything into a string.

46
00:03:33.305 --> 00:03:39.985
So, the simpler way to do that,
if you don't have circular references or

47
00:03:39.985 --> 00:03:44.095
weird things, is to stringify that option.

48
00:03:44.095 --> 00:03:49.234
JSON.stringify will then take
that array of objects and

49
00:03:49.234 --> 00:03:54.063
give me a string version of that,
okay, make sense?

50
00:03:54.063 --> 00:03:57.512
I need to find a way to call save, I mean,

51
00:03:57.512 --> 00:04:03.260
we could analyze the whole code
to understand where to go save.

52
00:04:03.260 --> 00:04:08.036
But for now, to make it simple
every time we are rendering, for

53
00:04:08.036 --> 00:04:12.905
example, there is a render method here,
I can call order save,

54
00:04:12.905 --> 00:04:15.633
just to simplify this for a second.

55
00:04:15.633 --> 00:04:21.432
So, every time there is something to be
said like an update in the rendering,

56
00:04:21.432 --> 00:04:23.500
I'm going to save as well.

57
00:04:23.500 --> 00:04:27.596
It's not the best performance solution
right now, but the simplest one for

58
00:04:27.596 --> 00:04:31.690
us to understand how to apply
a little bit of local storage here.

59
00:04:31.690 --> 00:04:38.940
So, now, if I'm going back to my project,
I'm refreshing to get the latest version.

60
00:04:38.940 --> 00:04:43.360
I'm going to add something to my order and

61
00:04:43.360 --> 00:04:49.043
now if I'm going to
the application tab in DevTools,

62
00:04:49.043 --> 00:04:54.340
within storage, I can open local storage.

63
00:04:54.340 --> 00:04:59.584
And I will see an entry here
with my origin and luckily,

64
00:04:59.584 --> 00:05:05.260
I'd find my key with
an array converter as JSON.

65
00:05:05.260 --> 00:05:09.508
So, it's saving the data, it's actually
pretty simple, okay, to save the data,

66
00:05:09.508 --> 00:05:11.870
it's actually pretty simple, any question?

67
00:05:14.070 --> 00:05:15.420
It's pretty straightforward, right?

68
00:05:15.420 --> 00:05:18.315
So now we need to do the load, okay, so,

69
00:05:18.315 --> 00:05:22.160
for the load is like
the reverse operation.

70
00:05:22.160 --> 00:05:25.292
However we should think about
a couple of situations but

71
00:05:25.292 --> 00:05:28.180
let's do the reverse operation first.

72
00:05:28.180 --> 00:05:31.348
So, I will just say that the Order.cart,

73
00:05:31.348 --> 00:05:36.560
do you know what's the opposite
of stringify, does anyone know?

74
00:05:36.560 --> 00:05:38.940
&gt;&gt; Python parse.

75
00:05:38.940 --> 00:05:41.860
&gt;&gt; Parse, yeah, that's correct,

76
00:05:41.860 --> 00:05:46.600
JSON.parse, so I give a string and
it will parse it.

77
00:05:46.600 --> 00:05:51.780
So, it's localStorage.getItem
with the same key.

78
00:05:51.780 --> 00:05:56.277
I should put the keys in constants,
so I don't have problems but

79
00:05:56.277 --> 00:06:00.530
anyway, you get the idea,
so, will it work?

80
00:06:00.530 --> 00:06:04.599
It will work on some situations but
not on all situations, for example,

81
00:06:04.599 --> 00:06:07.680
what happens the first time
you get into this website?

82
00:06:08.760 --> 00:06:16.010
So, there is nothing as cm-cart, so local
storage getItem will give you undefined,

83
00:06:16.010 --> 00:06:21.990
then JSON.parse of undefined,
we don't know what happens, right?

84
00:06:21.990 --> 00:06:24.335
We can try, but
actually it is going to for

85
00:06:24.335 --> 00:06:28.830
sure replace my empty array with
something that is not an array.

86
00:06:28.830 --> 00:06:34.613
So that's the first problem, okay,
that we have with this code,

87
00:06:34.613 --> 00:06:40.210
so we should check first if we
do have something, okay, there.

88
00:06:42.890 --> 00:06:48.123
If it's not undefined,
then we are going to do this, but

89
00:06:48.123 --> 00:06:55.115
that's not the only problem, so
what if we cannot parse this at JSON, why?

90
00:06:55.115 --> 00:07:01.980
You say, well, maybe the user is getting
here and making an invalid JSON.

91
00:07:03.110 --> 00:07:08.196
So now if I'm trying to parse this,
it throws an exception,

92
00:07:08.196 --> 00:07:12.720
so I should also manage that,
how to manage that?

93
00:07:12.720 --> 00:07:16.660
Try catch, so
I should catch these servers,

94
00:07:16.660 --> 00:07:21.130
maybe I don't wanna do
anything if there is error.

95
00:07:21.130 --> 00:07:23.062
Maybe I should clean this, so

96
00:07:23.062 --> 00:07:27.480
I can say localStorage.removeItem
because yeah, you know what?

97
00:07:29.290 --> 00:07:33.627
It's corrupted, I don't know what
happened, okay, but it's not JSON anymore,

98
00:07:33.627 --> 00:07:36.697
so, let's remove that and
I will stay with my empty array.

99
00:07:36.697 --> 00:07:41.078
You can log that in your server
if you want, if it's an expected

100
00:07:41.078 --> 00:07:46.790
situation that you wanna log,
wherever you want, okay, make sense?

101
00:07:46.790 --> 00:07:50.752
And after that, what I need,
is to call render,

102
00:07:50.752 --> 00:07:57.324
yeah here we are calling rendering and
rendering is saving again which is again,

103
00:07:57.324 --> 00:08:01.984
not per format but
we are not right now caring about that.

104
00:08:01.984 --> 00:08:07.221
In fact probably as homework at the end of
the workshop I have a list of things that

105
00:08:07.221 --> 00:08:13.020
you can do to improve this app and
one is improving performance here, okay?

106
00:08:13.020 --> 00:08:18.693
So, this is not react or angular or view,
so this is not reactive programming,

107
00:08:18.693 --> 00:08:22.928
so it's not going to detect
that the array has changed, and

108
00:08:22.928 --> 00:08:25.740
the UI will be updated automatically.

109
00:08:25.740 --> 00:08:29.454
So, I'm manually rendering this, so

110
00:08:29.454 --> 00:08:34.629
if this works well first now,
I have a corrupted JSON,

111
00:08:34.629 --> 00:08:39.368
so if I refresh it's going
back to an empty array.

112
00:08:39.368 --> 00:08:43.000
So, it deleted the data and
then it was replaced by an empty array.

113
00:08:43.000 --> 00:08:50.022
And if I add to the cart, let me add two
Americanos, if I had to Americanos, so

114
00:08:50.022 --> 00:08:55.110
if I refresh,
I'm still getting an empty array, why?

115
00:08:55.110 --> 00:08:55.892
What do you think?

116
00:08:55.892 --> 00:08:58.736
Well, let's, let's try to debug this.

117
00:08:58.736 --> 00:09:03.581
How can we debug this?

118
00:09:03.581 --> 00:09:04.819
What do you think?

119
00:09:08.490 --> 00:09:13.378
So, you can use the debugger,
we can add breakpoints, okay?

120
00:09:13.378 --> 00:09:17.500
So, what's going on here
is that if I add this here,

121
00:09:17.500 --> 00:09:20.930
it's fine, so it's loading fine.

122
00:09:20.930 --> 00:09:24.560
So, we can also go to the console and

123
00:09:24.560 --> 00:09:29.580
try here order.load and see what happens.

124
00:09:29.580 --> 00:09:34.684
So, now if I see what my card has,
it's loading properly, okay,

125
00:09:34.684 --> 00:09:39.440
so I do have my Black Americano,
do you want to say something?

126
00:09:41.430 --> 00:09:44.717
&gt;&gt; I think that's the answer, right,
you need to call load somewhere.

127
00:09:44.717 --> 00:09:48.878
&gt;&gt; We need to call load somewhere,
yeah, that's the problem,

128
00:09:48.878 --> 00:09:51.927
so we are calling save but
we are not loading.

129
00:09:51.927 --> 00:09:55.849
So that when I load again it
starts with an empty array and

130
00:09:55.849 --> 00:09:59.060
that's the only thing we have, so where?

131
00:09:59.060 --> 00:10:04.787
Well, here the simplest way to do that,
it's just manually here,

132
00:10:04.787 --> 00:10:09.613
you can say, can we wait for
document content load?

133
00:10:09.613 --> 00:10:13.272
We can, but
this is a module-based project, so

134
00:10:13.272 --> 00:10:16.676
we don't need to do that, actually, okay.

135
00:10:16.676 --> 00:10:24.050
So we were actually not calling load,
so if I call load manually, it's fine.

136
00:10:24.050 --> 00:10:30.593
This is classic web app programming,
okay, this was pretty common 15 years ago.

137
00:10:30.593 --> 00:10:36.743
Anyway, so, if I refresh now you can
see my Black Americano is still there,

138
00:10:36.743 --> 00:10:41.932
okay, so if I add a cappuccino,
if I refresh, its still there,

139
00:10:41.932 --> 00:10:47.450
if I close a tab and open a new tab,
my order is still there.

140
00:10:47.450 --> 00:10:50.930
But I'm using local storage,
well, what's the problem?

141
00:10:50.930 --> 00:10:54.587
Well, first the quota is,
in fact, let's look at the quota,

142
00:10:54.587 --> 00:10:57.010
so if I open my quota, it still says zero.

143
00:10:58.710 --> 00:11:00.110
You say why?

144
00:11:00.110 --> 00:11:04.781
Because local storage right now at least,
it's a separate five megabytes of storage,

145
00:11:04.781 --> 00:11:07.420
it's not actually using your quota.

146
00:11:07.420 --> 00:11:12.675
Okay, so that's expectable but
the worst issue here is performance,

147
00:11:12.675 --> 00:11:16.100
we can't actually see
the problem in action.

148
00:11:17.200 --> 00:11:19.028
But every time we are saving or

149
00:11:19.028 --> 00:11:23.870
loading, it's actually using the thread,
the main UI thread.

150
00:11:23.870 --> 00:11:28.798
So, the parsing and also saving that
in the real file system of the browser,

151
00:11:28.798 --> 00:11:33.191
everything is synchronous and
that's actually a bad idea, okay.

152
00:11:33.191 --> 00:11:37.878
So that's why, I mean,
the API is pretty simple, it's this one,

153
00:11:37.878 --> 00:11:42.830
it's working, but we should try to
avoid using this API, make sense?

154
00:11:44.060 --> 00:11:47.530
So that's actually everything we
are going to cover about WebStorage.

