WEBVTT

1
00:00:00.040 --> 00:00:02.429
We covered the four APIs, okay?

2
00:00:02.429 --> 00:00:07.356
The last thing that I have for
you is just a set of best practices,

3
00:00:07.356 --> 00:00:12.750
ideas, things that you should
follow after this course.

4
00:00:12.750 --> 00:00:16.028
So first, in terms of database and
performance,

5
00:00:16.028 --> 00:00:19.440
it's always better to store small objects.

6
00:00:19.440 --> 00:00:24.319
So remember the case that we mentioned
before of storing a redux state,

7
00:00:24.319 --> 00:00:27.180
a large redux state, that's a bad idea.

8
00:00:28.220 --> 00:00:34.120
So it's always better to store smaller
objects because of the cloning,

9
00:00:34.120 --> 00:00:39.343
and also because of the performance
of the database itself, and

10
00:00:39.343 --> 00:00:45.070
also because there is no way to get
a slice of an object from IndexedDB.

11
00:00:46.230 --> 00:00:50.985
The only way if the object is
in a slice beforehand, okay?

12
00:00:50.985 --> 00:00:55.650
So that's why you should store
smaller objects in the database.

13
00:00:55.650 --> 00:01:00.827
Remember to use Web Workers or
Service Worker even

14
00:01:00.827 --> 00:01:05.640
if the IndexedDB API is asynchronous,
okay?

15
00:01:07.130 --> 00:01:10.670
The worker will help you
also to increase UX.

16
00:01:11.720 --> 00:01:17.050
And remember that you can create
custom indices or indexes for

17
00:01:17.050 --> 00:01:23.833
faster access or collections of objects
for keys that you wanna search later.

18
00:01:23.833 --> 00:01:28.707
But also,
don't abuse the generation of indexes,

19
00:01:28.707 --> 00:01:32.933
because they are going
to harm performance.

20
00:01:32.933 --> 00:01:38.049
Okay, this is always a problem in
databases to find the balance between,

21
00:01:38.049 --> 00:01:42.273
mostly if you have thousands or
millions of options, okay?

22
00:01:42.273 --> 00:01:45.700
For ten objects,
not going to make any difference.

23
00:01:46.740 --> 00:01:49.550
So serverless ideas, okay, what's that?

24
00:01:50.600 --> 00:01:56.068
So the data that we have in our
local storages lives locally

25
00:01:56.068 --> 00:02:01.326
on the device, and
we know they may disappear anytime.

26
00:02:01.326 --> 00:02:03.370
So yeah, you can sync to the server.

27
00:02:03.370 --> 00:02:08.130
We know how to do that kind of,
okay, in the cloud, that's fine.

28
00:02:08.130 --> 00:02:13.231
But there are other ideas that some
web apps are taking mostly in,

29
00:02:13.231 --> 00:02:16.022
let's say, the federated space.

30
00:02:16.022 --> 00:02:22.214
Even, we can call it the Web3 space,
where let's own the data,

31
00:02:22.214 --> 00:02:27.140
let's make the user owns the data, okay?

32
00:02:27.140 --> 00:02:31.520
So you can export your data,
your IndexedDB to a file system.

33
00:02:31.520 --> 00:02:34.648
So offer the user a way to export
the data to the file system.

34
00:02:34.648 --> 00:02:35.985
Take the IndexedDB.

35
00:02:35.985 --> 00:02:40.040
Cache storage, maybe you don't need that
because it's a cache at the end, okay?

36
00:02:40.040 --> 00:02:44.640
But IndexedDB, well, let's export
IndexedDB to the file system, okay?

37
00:02:45.780 --> 00:02:48.917
So you can import that in another system,

38
00:02:48.917 --> 00:02:52.599
in another device,
you can backup that, okay?

39
00:02:52.599 --> 00:02:55.821
So offer the user that option.

40
00:02:55.821 --> 00:03:00.785
Export and import through QR codes,
I mean, the size is limited here,

41
00:03:00.785 --> 00:03:03.710
but I've seen a couple of options.

42
00:03:03.710 --> 00:03:06.477
So you can generate client side,
the QR code.

43
00:03:06.477 --> 00:03:14.790
Typically up to 3, 4, or even up to 5k of
data is possible to put into a QR code.

44
00:03:14.790 --> 00:03:18.695
So you just take a screenshot,
if you want,

45
00:03:18.695 --> 00:03:23.878
of the QR code, and
you have the data in the QR code, okay?

46
00:03:23.878 --> 00:03:25.760
That's an option that I've seen a lot.

47
00:03:25.760 --> 00:03:30.370
Again, these are options to let the user
own the data and get the data out, okay?

48
00:03:32.480 --> 00:03:36.244
Blockchain-based data storage as well,
okay,

49
00:03:36.244 --> 00:03:41.901
through new JavaScript APIs that
are available are also possible, okay?

50
00:03:41.901 --> 00:03:48.095
This is just to get off the standard sync
to the server that needs authentication on

51
00:03:48.095 --> 00:03:53.510
and needs something to identify the user
and a lot of stuff around that.

52
00:03:55.520 --> 00:04:00.410
Being a good citizen, don't store what you
won't use, remember it's user's device.

53
00:04:00.410 --> 00:04:04.113
Remember that even if
you have a large quota,

54
00:04:04.113 --> 00:04:09.584
that quota is also living with
other quotas, with other.

55
00:04:09.584 --> 00:04:12.285
And at one point,
the space will be off, and

56
00:04:12.285 --> 00:04:17.114
if you don't have persistent storage,
okay, your storage will be removed.

57
00:04:17.114 --> 00:04:23.728
So if you are good citizens, you have
a greater opportunity to still be there.

58
00:04:23.728 --> 00:04:28.843
So let's say browsers,
yypically when they delete data,

59
00:04:28.843 --> 00:04:35.400
when there is storage pressure,
typically they delete the older data.

60
00:04:35.400 --> 00:04:39.544
But also they try to find,
okay, maybe within the older,

61
00:04:39.544 --> 00:04:43.367
we have one that is taking 500 megabytes.

62
00:04:43.367 --> 00:04:47.275
Okay, let's go with that one first, okay?

63
00:04:47.275 --> 00:04:51.320
Clear the storage when it's not needed,
don't leave that forever.

64
00:04:52.790 --> 00:04:56.250
Think about what will
happen in the future.

65
00:04:56.250 --> 00:05:00.302
We change our websites,
we change the data that we store.

66
00:05:00.302 --> 00:05:04.603
Well, think about versioning the data and
the schemas, and

67
00:05:04.603 --> 00:05:10.083
every time there is a new schema when
the user loads the new version of the app,

68
00:05:10.083 --> 00:05:16.530
delete all the data that your previous
version left on users' devices, okay?

69
00:05:16.530 --> 00:05:20.620
Best-effort first,
remember that the data might not be there.

70
00:05:20.620 --> 00:05:25.100
So plan for the data not been there first.

71
00:05:25.100 --> 00:05:29.775
And then if it's there, well,
we will improve the experience,

72
00:05:29.775 --> 00:05:32.926
like a progressive enhancement over data.

73
00:05:32.926 --> 00:05:34.493
Capture quota errors.

74
00:05:34.493 --> 00:05:39.123
This is important, cuz I've seen
a lot of local storage usage,

75
00:05:39.123 --> 00:05:42.747
IndexedDB, that are not
checking quota limits.

76
00:05:42.747 --> 00:05:48.140
And they say, well, but quota is okay,
because I have 2GB, I don't care.

77
00:05:48.140 --> 00:05:54.175
Yeah, but maybe your user is on
an Android chip phone that is full.

78
00:05:54.175 --> 00:05:57.776
Maybe it's not a desktop,
and maybe it's full,

79
00:05:57.776 --> 00:06:01.635
so that Android device has
only one megabyte left, so

80
00:06:01.635 --> 00:06:05.690
when you try to save your IndexedDB,
it doesn't work.

81
00:06:06.780 --> 00:06:10.740
And then maybe you may end
up with a broken database,

82
00:06:10.740 --> 00:06:15.060
you have some objects but
not others, things like that.

83
00:06:15.060 --> 00:06:19.016
So plan for the possible errors, okay?

84
00:06:19.016 --> 00:06:22.887
Because in chrome, it's a percentage
of your available space, and

85
00:06:22.887 --> 00:06:25.570
maybe your available space is nothing,
okay?

86
00:06:26.900 --> 00:06:32.198
And offer the user way to get out,
to get that user-generated data

87
00:06:32.198 --> 00:06:38.359
out of the web app, if possible,
in different formats, in different ways.

