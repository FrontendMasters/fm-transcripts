WEBVTT

1
00:00:00.220 --> 00:00:05.242
So instead of doing something like this,
bringing the data I can do that,

2
00:00:05.242 --> 00:00:10.260
but instead of doing that,
I can use the service worker, okay?

3
00:00:10.260 --> 00:00:17.110
So, the next step is to start
talking about the service worker.

4
00:00:17.110 --> 00:00:19.400
So the service worker
is a JavaScript thread.

5
00:00:20.590 --> 00:00:25.837
That we install, we register in
users browsers, in users device, I

6
00:00:25.837 --> 00:00:31.730
will give you a quick and dirty definition
that most developers don't like.

7
00:00:32.880 --> 00:00:36.027
Mostly if you have experienced with
service worker, but if you have never

8
00:00:36.027 --> 00:00:39.390
worked with service workers before you
understand really quickly what it is.

9
00:00:40.650 --> 00:00:43.090
It's my definition quick and dirty.

10
00:00:43.090 --> 00:00:48.246
A service worker is a web server
that we install client side or

11
00:00:48.246 --> 00:00:52.189
we install on user's
device that will serve or

12
00:00:52.189 --> 00:00:56.960
can serve files only for
our machine, only for our PWA.

13
00:00:58.360 --> 00:01:02.951
So if you think about that definition
that is not technically 100% true, but

14
00:01:02.951 --> 00:01:05.989
if you have never played
with service worker before,

15
00:01:05.989 --> 00:01:09.990
it gives you a quick idea because
now it will impersonate your server.

16
00:01:11.440 --> 00:01:16.378
So it's sitting in the middle
between your PWA and your server,

17
00:01:16.378 --> 00:01:18.760
even cross-domain servers.

18
00:01:18.760 --> 00:01:22.633
So every time the PWA is requesting
a file from your server,

19
00:01:22.633 --> 00:01:28.069
the service worker is there in the middle
and it says let me see what do you want?

20
00:01:28.069 --> 00:01:32.913
PNG lemme see, the service worker looks in
the back in the cache and it says yeah,

21
00:01:32.913 --> 00:01:33.981
I have that okay,

22
00:01:33.981 --> 00:01:38.130
here you have the PNG requested,
the image, the cappuccino image.

23
00:01:39.210 --> 00:01:41.910
And the server now is never hidden,

24
00:01:41.910 --> 00:01:45.700
in that situation is never
hid by an HTTP request.

25
00:01:46.860 --> 00:01:50.896
Because the service worker act
in the name of the server, okay,

26
00:01:50.896 --> 00:01:53.550
of course that's not mandatory.

27
00:01:53.550 --> 00:01:55.647
You write the service worker and

28
00:01:55.647 --> 00:02:00.780
you decide what the service worker is
going to do and how, okay, makes sense?

29
00:02:01.920 --> 00:02:06.109
Well, so the next step is to
write our first service worker.

30
00:02:06.109 --> 00:02:08.898
So we need to create
the service worker file, but

31
00:02:08.898 --> 00:02:12.210
please don't create that
file in the scripts folder.

32
00:02:12.210 --> 00:02:15.647
If you do that,
that's gonna be the, script folder,

33
00:02:15.647 --> 00:02:20.358
it's gonna be the scope of your service
worker and your service worker will

34
00:02:20.358 --> 00:02:24.860
be able to render content or
to serve content only from that folder.

35
00:02:24.860 --> 00:02:29.387
So that's why I'm going to create a new
Finder root folder with the name sw or

36
00:02:29.387 --> 00:02:30.742
serviceworker.js.

37
00:02:30.742 --> 00:02:35.609
It's up to you any name will work and
here we need to write

38
00:02:35.609 --> 00:02:40.385
some code to actually do
that serve operation, okay?

39
00:02:40.385 --> 00:02:45.526
We're going to be a server now or
a proxy and we are going to

40
00:02:45.526 --> 00:02:52.980
use the cache to see if the file that we
need is actually in the cache or not.

41
00:02:52.980 --> 00:02:54.752
So, from the service worker,

42
00:02:54.752 --> 00:02:59.197
we are going to add an event listener
over the self option with the name fetch.

43
00:02:59.197 --> 00:03:05.153
So every time my PWA is
making an HTTP request,

44
00:03:05.153 --> 00:03:12.210
this event will be fired,
okay, every time, right?

45
00:03:12.210 --> 00:03:17.790
So, from here we are going
to call event.respondWith.

46
00:03:17.790 --> 00:03:21.220
RespondWith, so
we're going to respond with something.

47
00:03:21.220 --> 00:03:26.120
RespondWith receives a promise or
a function returning a promise.

48
00:03:26.120 --> 00:03:31.033
So from here, I can do something
similar to what I did before,

49
00:03:31.033 --> 00:03:37.550
creating an immediately executable
async function something like this.

50
00:03:37.550 --> 00:03:43.651
It can be a real function or not it's
just the same and here I can go and

51
00:03:43.651 --> 00:03:50.600
try to see if the request,
the request is available event.request.

52
00:03:50.600 --> 00:03:55.481
Okay, so
I can try to see if it's in the cache.

53
00:03:55.481 --> 00:03:59.279
Remember, this event is going to re fire

54
00:03:59.279 --> 00:04:04.194
every time my website needs
a resource from the web,

55
00:04:04.194 --> 00:04:08.340
from anywhere, my server or other server.

56
00:04:08.340 --> 00:04:13.044
So remember, we are actually here,
the PWA needs

57
00:04:13.044 --> 00:04:19.280
something from my server or
from a CDN, I'm in the middle.

58
00:04:19.280 --> 00:04:25.390
I'm catching that request and
I can say, okay, let's see what you do.

59
00:04:25.390 --> 00:04:28.259
So we're writing code there, okay?

60
00:04:28.259 --> 00:04:33.260
So, back here,
then I'm going to talk to my cache first,

61
00:04:33.260 --> 00:04:38.995
so lemme remove this for a second,
we're going back there later.

62
00:04:38.995 --> 00:04:44.409
So we're going to try to see
if there is a cached response,

63
00:04:44.409 --> 00:04:51.162
lemme hide the panel for a second because
this is going to be a large line.

64
00:04:51.162 --> 00:04:57.230
I'm going to wait for caches.match,
again caches.match opens all or

65
00:04:57.230 --> 00:05:01.520
checks over all the caches
available in my origin.

66
00:05:01.520 --> 00:05:05.616
If you don't wanna check on every cache,

67
00:05:05.616 --> 00:05:09.945
you can first open
the cache with the name and

68
00:05:09.945 --> 00:05:14.430
then do a match, match is search, okay?

69
00:05:14.430 --> 00:05:18.287
It's checking if it can
find that request and

70
00:05:18.287 --> 00:05:25.100
we saw before that if it's not in
the cache it gives me undefined, right?

71
00:05:25.100 --> 00:05:27.880
So I'm going to check if it exists,

72
00:05:27.880 --> 00:05:32.430
if it exists it means that
we do have a cache response.

73
00:05:32.430 --> 00:05:36.204
So I'm going to return
that object to whom,

74
00:05:36.204 --> 00:05:40.770
I'm going to return this to respond with,
okay?

75
00:05:40.770 --> 00:05:47.161
So we are responding with
the cash response, make sense?

76
00:05:47.161 --> 00:05:51.447
And if not, if it's not the cache,
I'm going to return a fetch, so

77
00:05:51.447 --> 00:05:53.328
I'm actually saying, hey,

78
00:05:53.328 --> 00:05:58.164
we need to go to a network because we
don't have this resource here in cache.

79
00:06:01.348 --> 00:06:05.965
So if the file that you're
requesting is not in the cache,

80
00:06:05.965 --> 00:06:10.125
what's happening is I'm
responding with a fetch.

81
00:06:13.137 --> 00:06:16.270
That's the code,
is the code making sense, kind of?

82
00:06:18.140 --> 00:06:22.360
This file the service worker,
is still not attached to my website.

83
00:06:23.550 --> 00:06:28.683
Okay, so we still need to register
that file, but before doing that,

84
00:06:28.683 --> 00:06:33.120
I wanna show you a diagram to see
if you can finally understand

85
00:06:33.120 --> 00:06:38.520
what's going on with the algorithm
that we have just coded.

86
00:06:38.520 --> 00:06:42.080
So, your PWA is making a request, right?

87
00:06:42.080 --> 00:06:44.540
The service worker is
catching that request, so

88
00:06:44.540 --> 00:06:48.590
it's not going directly to the network,
is catching the request it first.

89
00:06:48.590 --> 00:06:53.403
So step two, is searching in the cache,
in the cache's storage, right?

90
00:06:53.403 --> 00:06:57.613
If it's a cache hit, so it's there,

91
00:06:57.613 --> 00:07:03.673
it's responding with that
cache response to the PWA.

92
00:07:03.673 --> 00:07:09.486
And if it's a cache miss, so
it's not in the cache, it's responding

93
00:07:09.486 --> 00:07:15.690
with a network request that finally
will get back to the PWA, make sense?

94
00:07:15.690 --> 00:07:18.920
That's the algorithm that
we have just created.

95
00:07:20.100 --> 00:07:26.520
So, now that we understand what's the
idea, let's register the service worker.

96
00:07:26.520 --> 00:07:33.870
So I'm going back to VS code and
let's go to app.js.

97
00:07:33.870 --> 00:07:39.125
And any place,
we're going to go navigator.serviceWorker,

98
00:07:39.125 --> 00:07:42.432
be careful with capital W, register and

99
00:07:42.432 --> 00:07:47.416
the name of the service worker
file that I have just created.

100
00:07:47.416 --> 00:07:50.753
That's all, with that, okay,

101
00:07:50.753 --> 00:07:57.740
we are specifying that we wanna
install that server, okay?

102
00:07:57.740 --> 00:07:58.460
That proxy.

103
00:08:00.420 --> 00:08:07.080
So going back to my browser, I'm going to
refresh, how do I know if this is working?

104
00:08:07.080 --> 00:08:10.273
Well first,
there was something that was really small,

105
00:08:10.273 --> 00:08:12.520
probably you haven't seen that.

106
00:08:12.520 --> 00:08:17.390
You didn't even realize that there is
something new from the previous runs.

107
00:08:17.390 --> 00:08:22.254
I do have this icon here, not sure if
you realize, it wasn't there before,

108
00:08:22.254 --> 00:08:26.690
believe me, it wasn't there before,
what is that icon?

109
00:08:26.690 --> 00:08:30.740
The PWA installation icon on desktop.

110
00:08:32.580 --> 00:08:38.406
Chrome or Chromium, so that's also Edge,
on desktop, when you have a PWA and

111
00:08:38.406 --> 00:08:44.980
you have a service worker, you are passing
what is known as a PWA criteria.

112
00:08:44.980 --> 00:08:48.360
And it's inviting the user
to install the PWA now,

113
00:08:48.360 --> 00:08:51.700
because it feels now your
app will work offline.

114
00:08:51.700 --> 00:08:56.130
So it says, okay, you are following
all the requirements for the PWA.

115
00:08:56.130 --> 00:08:59.032
This is changing from Chrome 109 or

116
00:08:59.032 --> 00:09:04.844
it will change probably from Chrome 109,
from Chrome 109 or 110.

117
00:09:05.880 --> 00:09:08.512
They are changing these requirements and

118
00:09:08.512 --> 00:09:12.871
now you will see that icon even if
you don't have a service worker, so

119
00:09:12.871 --> 00:09:17.830
service worker won't be mandatory for
PWA's in a couple of months.

120
00:09:17.830 --> 00:09:19.287
Okay, so that's new.

121
00:09:19.287 --> 00:09:25.710
Anyway, if I actually see my service
worker, I can go to the application tab.

122
00:09:25.710 --> 00:09:30.201
And the one where we were seeing
the storages, and if we scroll to the top,

123
00:09:30.201 --> 00:09:33.160
there is a section for service workers.

124
00:09:33.160 --> 00:09:37.431
And if I click there I can see that I have
a service worker, that is activated and

125
00:09:37.431 --> 00:09:38.550
running right now.

126
00:09:39.620 --> 00:09:43.802
That means that now my images,
it's difficult to see that,

127
00:09:43.802 --> 00:09:48.727
are my images being served from
the service worker or from the network?

128
00:09:48.727 --> 00:09:50.780
How do I know?

129
00:09:50.780 --> 00:09:56.940
One way to know,
is opening the network tab.

130
00:09:58.257 --> 00:10:06.540
In the network tab, where you see all the
resources, okay, there is a size column.

131
00:10:06.540 --> 00:10:10.940
Don't ask me why it's in the size
column because it makes no sense.

132
00:10:10.940 --> 00:10:15.404
But in the size columns, it will tell you
which assets were actually delivered from

133
00:10:15.404 --> 00:10:18.380
the service worker and
not from the network.

134
00:10:18.380 --> 00:10:24.014
And you will see that on my PNG files,
were served from the service worker.

135
00:10:24.014 --> 00:10:28.804
Not the .js file or API.js file, why?

136
00:10:28.804 --> 00:10:31.906
Because it's not in the service worker.

137
00:10:31.906 --> 00:10:36.660
By the way, you can always go
back to the application tab,

138
00:10:36.660 --> 00:10:42.203
I should move it, you can drag tabs,
I'm not sure if you know that.

139
00:10:42.203 --> 00:10:46.448
So I can drag the application tab there,
I can go to storage and

140
00:10:46.448 --> 00:10:50.367
you can see now that I have 1
megabytes in cache storage,

141
00:10:50.367 --> 00:10:54.302
45k in indexedDB and
some bytes on the service worker.

142
00:10:54.302 --> 00:10:59.294
Right now my quota usage is 1.2 megabytes,
but I can clear everything,

143
00:10:59.294 --> 00:11:03.334
so if you clear everything now,
there is no service worker,

144
00:11:03.334 --> 00:11:06.844
there are no IndexedDB no cache storage,
nothing.

145
00:11:06.844 --> 00:11:08.920
It's like the first time
I'm visiting the website.

146
00:11:08.920 --> 00:11:15.180
So if I reload, now things were not
coming from the service worker, okay?

147
00:11:15.180 --> 00:11:19.059
So if I go into the network, you can
see in the size column that you won't

148
00:11:19.059 --> 00:11:22.681
see service worker because the first
time you access the website,

149
00:11:22.681 --> 00:11:26.130
you don't have the service worker,
you don't have storage.

150
00:11:27.260 --> 00:11:31.004
But if I refresh now again,
I should see the difference and

151
00:11:31.004 --> 00:11:34.071
now images are coming
from the service worker.

152
00:11:34.071 --> 00:11:37.390
So the logic is kind of working.

