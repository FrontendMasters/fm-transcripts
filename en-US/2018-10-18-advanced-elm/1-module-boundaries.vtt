WEBVTT

1
00:00:00.450 --> 00:00:02.810
&gt;&gt; Richard Feldman: So on the big tapes,
we're gonna talk about four things.

2
00:00:02.810 --> 00:00:05.490
First is the concept of module boundaries.

3
00:00:05.490 --> 00:00:08.270
Second is opaque types themselves.

4
00:00:08.270 --> 00:00:10.460
Third is validated data.

5
00:00:10.460 --> 00:00:12.300
And fourth is when not to go opaque.

6
00:00:13.810 --> 00:00:15.020
Okay.
Let's start by talking about

7
00:00:15.020 --> 00:00:15.840
module boundaries.

8
00:00:16.970 --> 00:00:19.810
So here is a type,
a custom type we've created.

9
00:00:19.810 --> 00:00:22.100
It says type email equals
valid email string.

10
00:00:23.260 --> 00:00:26.729
The comments says th is guaranteed to be
a valid email address which s a bold claim

11
00:00:26.729 --> 00:00:30.050
to make considering there is no
validation going on here whatsoever.

12
00:00:30.050 --> 00:00:32.690
Is there someway we can
make that comment true?

13
00:00:32.690 --> 00:00:35.400
Well there is from a module perspective.

14
00:00:35.400 --> 00:00:37.530
But not if we do this.

15
00:00:37.530 --> 00:00:41.230
So if this is our module heading this is
module email exposing email parenthesis

16
00:00:41.230 --> 00:00:45.690
dot dot double parenthesis dot dot right
there means that we can't actually make

17
00:00:45.690 --> 00:00:47.554
any guarantees about how
this thing is constructed.

18
00:00:47.554 --> 00:00:52.610
The (..) means that we are exposing
this ValidEmail variant.

19
00:00:52.610 --> 00:00:56.040
We're saying that even though this is our
only variant, any module that imports

20
00:00:56.040 --> 00:00:59.550
the email module can construct one
of these themselves if they want to.

21
00:00:59.550 --> 00:01:00.880
Not only that but
they can pattern match on it.

22
00:01:00.880 --> 00:01:03.930
They can look into it, see what it's got,
modify it and make a new one.

23
00:01:05.110 --> 00:01:08.040
So this claim that this is guaranteed
to be a valid email address just can't

24
00:01:08.040 --> 00:01:10.270
possibly hold as long as
we're exposing this variant.

25
00:01:11.670 --> 00:01:16.130
Okay, but let's say that we wanted
to do a little bit better and

26
00:01:16.130 --> 00:01:19.690
we wanted to make it so that we could
actually enforce this in variant.

27
00:01:19.690 --> 00:01:23.450
The way we will do this is by
not exposing that variant.

28
00:01:23.450 --> 00:01:27.251
We would say, this is going to expose
email type which means that other modules

29
00:01:27.251 --> 00:01:30.130
can import it so
they can use it in their annotations.

30
00:01:30.130 --> 00:01:32.960
But we have not expose
this ValidEmail variant.

31
00:01:32.960 --> 00:01:36.760
Nobody else can do that, only within this
module can this thing can be instantiated.

32
00:01:37.840 --> 00:01:42.360
And then we can expose various ways
to obtain one of these email values

33
00:01:42.360 --> 00:01:44.680
in a different without
constructing it directly.

34
00:01:44.680 --> 00:01:47.890
So we can say, we'll have a fromString
function, which takes a string and

35
00:01:47.890 --> 00:01:52.580
then returns a result with either a string
error, just describing what went wrong,

36
00:01:52.580 --> 00:01:55.740
ie this email address doesn't have
an at sign in it so it's not valid.

37
00:01:55.740 --> 00:01:56.700
It's missing the domain, so

38
00:01:56.700 --> 00:01:59.540
it's not valid,
some description of what went wrong.

39
00:01:59.540 --> 00:02:02.750
And then in the event that it did
successfully get converted from a string

40
00:02:02.750 --> 00:02:05.390
to a valid email,
then we provide you with an email.

41
00:02:05.390 --> 00:02:08.280
And then of course we could offer
a toString to let you go back

42
00:02:08.280 --> 00:02:09.730
from an Email to a String.

43
00:02:09.730 --> 00:02:12.270
Because that's an important thing to
be able to do when you're rendering

44
00:02:12.270 --> 00:02:13.000
things on the screen.

45
00:02:14.150 --> 00:02:17.490
But with this API,
because of this module boundary and

46
00:02:17.490 --> 00:02:21.830
the fact that we're not exposing
this one variant that it has.

47
00:02:21.830 --> 00:02:26.620
We've made it so that it's not possible
for someone to obtain an email value

48
00:02:26.620 --> 00:02:30.340
in any other module, without having
gone through this fromString function,

49
00:02:30.340 --> 00:02:33.580
without having run through
this validation that ends up

50
00:02:33.580 --> 00:02:36.380
giving us an email only
if the validation passed.

51
00:02:36.380 --> 00:02:38.050
And now the comment's actually accurate.

52
00:02:38.050 --> 00:02:41.245
It really is guaranteed to be valid email
address because if you've obtained one,

53
00:02:41.245 --> 00:02:43.631
you must have obtained it through
this validation function.

