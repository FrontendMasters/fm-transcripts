WEBVTT

1
00:00:00.140 --> 00:00:03.006
&gt;&gt; Richard Feldman: Let's move
on to the exercise for part two.

2
00:00:03.006 --> 00:00:06.457
Down here that part two, open that up

3
00:00:11.366 --> 00:00:13.860
&gt;&gt; Richard Feldman: put up a okay.

4
00:00:13.860 --> 00:00:17.539
Now open source article.elm and all there.

5
00:00:17.539 --> 00:00:21.460
Okay, so essentially,
we have a couple of to-dos here.

6
00:00:21.460 --> 00:00:26.390
And they have to do with
this extensible data idea.

7
00:00:26.390 --> 00:00:30.070
So we have Article Full and
Article Preview.

8
00:00:30.070 --> 00:00:33.900
And in this example, we don't quite have
the complete implementation of these.

9
00:00:33.900 --> 00:00:37.620
We have the types mapped out,
where we have the Article, itself.

10
00:00:37.620 --> 00:00:43.170
Which is defined as type Article a, which
we called in the other example extraInfo.

11
00:00:43.170 --> 00:00:45.050
We can call it that as well.

12
00:00:45.050 --> 00:00:46.460
Totally fine.

13
00:00:46.460 --> 00:00:52.990
Then we have this internals type and
internals, is essentially a type alias for

14
00:00:52.990 --> 00:00:57.190
that particular chunk of
data inside that record.

15
00:00:57.190 --> 00:01:01.807
The reason I like to do type alias
called Internals, for this rather

16
00:01:01.807 --> 00:01:06.667
than inlining the record directly
inside the custom type definition,

17
00:01:06.667 --> 00:01:08.785
the way that it is on the slide.

18
00:01:08.785 --> 00:01:12.965
Is that this way, I get to use this
the automatic record instructor that comes

19
00:01:12.965 --> 00:01:16.220
from the type alias when
I'm decoding this thing.

20
00:01:16.220 --> 00:01:18.730
So, we'll get into that in part 7,

21
00:01:18.730 --> 00:01:22.100
but suffice it to say that that's
a common pattern that I use and that

22
00:01:22.100 --> 00:01:26.230
is the answer to a question that somebody
asked in the last exercise, and about when

23
00:01:26.230 --> 00:01:29.930
to use that or when not, if you're using
it with a decoder it's a very nice thing.

24
00:01:29.930 --> 00:01:32.362
So that's the structure of this article.

25
00:01:32.362 --> 00:01:35.425
Now as we previously discussed extra info,

26
00:01:35.425 --> 00:01:39.810
can either hold onto the value preview,
or the value full, and

27
00:01:39.810 --> 00:01:44.466
if it's holding onto a full,
then we have the body inside of that.

28
00:01:44.466 --> 00:01:48.275
Now that's what we've got but
our implementation is not complete yet,

29
00:01:48.275 --> 00:01:52.150
because we don't have a couple of
these functions filled in yet.

30
00:01:52.150 --> 00:01:55.440
So we have this function called body,
which says I take an article full and

31
00:01:55.440 --> 00:01:57.780
return a body,
that's a publicly exposed function.

32
00:01:57.780 --> 00:01:59.330
That's part of the public API.

33
00:01:59.330 --> 00:02:02.320
But it currently doesn't do anything,
it just always returns an empty string.

34
00:02:02.320 --> 00:02:05.580
So that's no good, especially because
sting is not actually a body.

35
00:02:05.580 --> 00:02:06.880
So it's not gonna compile.

36
00:02:06.880 --> 00:02:11.380
And in fact if we try to compile this,
what we get is the pilot type errors.

37
00:02:11.380 --> 00:02:14.779
[LAUGH] So, we're gonna have
to fix these one at a time.

38
00:02:15.880 --> 00:02:18.700
So that's the first to-do, is make it
actually return the article's body,

39
00:02:18.700 --> 00:02:24.470
the second one, is this one converts
from a preview to an article full.

40
00:02:24.470 --> 00:02:27.640
So this comes up in I forget
which part of the code base,

41
00:02:27.640 --> 00:02:29.210
but basically we need
to sort of upgrade it.

42
00:02:29.210 --> 00:02:32.422
And it says okay, well if you've got
a preview, and you can provide a body for

43
00:02:32.422 --> 00:02:36.100
me, well, then putting those two
together I can give you an Article Full.

44
00:02:36.100 --> 00:02:39.050
So this is sort of the function that
does that conversion for the caller.

45
00:02:40.210 --> 00:02:43.098
And finally we have, [INAUDIBLE] TODO.

46
00:02:43.098 --> 00:02:47.230
Right, use Body.decoder which
is type of Decoder Body,

47
00:02:47.230 --> 00:02:51.230
to decode the body into this Article Full.

48
00:02:51.230 --> 00:02:53.600
So this is something where we
have two different decoders.

49
00:02:53.600 --> 00:02:56.570
We have a preview decoder,
which decodes the preview article and

50
00:02:56.570 --> 00:02:59.760
then we have a full decoder,
which decodes full article.

51
00:02:59.760 --> 00:03:01.710
So we're gonna implement
the latter of those and

52
00:03:01.710 --> 00:03:03.430
you can see in the preview decoder.

53
00:03:03.430 --> 00:03:07.900
We, first we do the internals decoder and
resolve all of that, and

54
00:03:07.900 --> 00:03:10.850
then we separately always
hard code this to say,

55
00:03:10.850 --> 00:03:13.860
okay well we're just gonna stick
a preview in there and then move on.

56
00:03:13.860 --> 00:03:16.790
But in this one, we're not gonna do that
we're gonna actually decode the body and

57
00:03:16.790 --> 00:03:20.760
then put that into
the resulting data structure.

