WEBVTT

1
00:00:00.180 --> 00:00:03.030
&gt;&gt; Richard Feldman: Okay, so let's look at
a couple of examples of opaque types in

2
00:00:03.030 --> 00:00:05.120
practice and
the guarantees they can give us.

3
00:00:05.120 --> 00:00:07.840
So this is one from
rtfeldman/elm-validate.

4
00:00:07.840 --> 00:00:10.770
This is a form Validation library.

5
00:00:10.770 --> 00:00:12.650
And it's got this module
called Validate and

6
00:00:12.650 --> 00:00:16.770
it exposes two values that we care
about for the purposes of this example.

7
00:00:16.770 --> 00:00:19.240
One is called Validator,
the other is called Valid.

8
00:00:19.240 --> 00:00:22.010
So Validator essentially describe
some validation that is going to

9
00:00:22.010 --> 00:00:23.710
perform on some piece of the data.

10
00:00:23.710 --> 00:00:27.169
So you might say, for example,
I've got a Validator for my form type and

11
00:00:27.169 --> 00:00:31.046
it's going to validate that there's field
called user name which is not blank.

12
00:00:31.046 --> 00:00:34.692
There's an email address field that's got
an at symbol in it, and maybe there is

13
00:00:34.692 --> 00:00:38.140
password which matches the confirm
password field, something like that.

14
00:00:39.360 --> 00:00:42.824
The type Valid, I'm gonna show you
the implementation detail of it,

15
00:00:42.824 --> 00:00:43.947
is extremely boring.

16
00:00:43.947 --> 00:00:47.397
It's not quite as bad as the email
one we saw in the previous slide, but

17
00:00:47.397 --> 00:00:49.340
it's extremely, extremely boring.

18
00:00:49.340 --> 00:00:51.612
It's type Valid a = Valid a.

19
00:00:51.612 --> 00:00:54.560
So in other words,
it's just a wrapper around whatever.

20
00:00:54.560 --> 00:00:56.560
It's a wrapper that adds
no additional information.

21
00:00:56.560 --> 00:00:58.379
All it does is wrap
the thing that you give it.

22
00:00:59.890 --> 00:01:04.839
However, it turns out it's actually got
a [LAUGH] surprisingly useful purpose.

23
00:01:04.839 --> 00:01:08.567
So we also expose a function called
fromValid, which means if you give me

24
00:01:08.567 --> 00:01:12.049
a valid thing, I will just give you
back the thing inside of itself,

25
00:01:12.049 --> 00:01:14.610
sort of unwrap it, and
give it back to you.

26
00:01:14.610 --> 00:01:16.690
Which again would be
pretty boring except for

27
00:01:16.690 --> 00:01:20.700
there is only one way to get
one of these valid values.

28
00:01:20.700 --> 00:01:25.700
So notice that we have not exposed
the valid variance, just the type itself.

29
00:01:25.700 --> 00:01:27.900
So it is okay to other modules.

30
00:01:27.900 --> 00:01:31.410
And the only way to get one is by
calling this function called Validate.

31
00:01:31.410 --> 00:01:34.890
So Validate takes a Validator which
you've constructed elsewhere.

32
00:01:34.890 --> 00:01:38.020
So Validator has two type parameters,
one is the error type so

33
00:01:38.020 --> 00:01:42.220
you can give it a custom error type
if you want, and then the subject.

34
00:01:42.220 --> 00:01:43.800
Then it takes the subject, and

35
00:01:43.800 --> 00:01:48.160
it returns a result with either a list
of errors if the validation failed.

36
00:01:48.160 --> 00:01:50.880
In which case it says hey,
here are all the things that went wrong.

37
00:01:50.880 --> 00:01:54.170
Or it gives you back
the subject wrapped in a Valid.

38
00:01:55.660 --> 00:02:00.180
So this is the only way to obtain one of
these Valid wrappers is to call Validate

39
00:02:00.180 --> 00:02:02.520
passing whatever your
particular subject is.

40
00:02:02.520 --> 00:02:04.360
Once you've got one of those
you can unwrap it, but

41
00:02:04.360 --> 00:02:07.410
the only way to get one in the first
place is to call Validate.

42
00:02:07.410 --> 00:02:08.880
Why might that be useful?

43
00:02:08.880 --> 00:02:10.960
Well, imagine we wanted to
write a function like this.

44
00:02:10.960 --> 00:02:13.660
SubmitForm takes a valid form and

45
00:02:13.660 --> 00:02:17.070
returns an HTTP request that
ends up giving you a user.

46
00:02:17.070 --> 00:02:19.870
So this might be a sign-up form or
something like that.

47
00:02:19.870 --> 00:02:25.060
So what's cool about this is if I write
this type, I know that the only way

48
00:02:25.060 --> 00:02:28.060
that I'm going to be able to submit
the form is if it's been validated first.

49
00:02:29.070 --> 00:02:32.640
So this tiny simple,
unremarkable wrapper that has

50
00:02:32.640 --> 00:02:35.980
essentially no logic inside of it,
just by virtue of its existing

51
00:02:35.980 --> 00:02:39.640
guarantees that I can't forget to
validate my form before submitting it.

52
00:02:39.640 --> 00:02:40.370
That has to happen.

53
00:02:41.740 --> 00:02:46.500
So the submit form function just by adding
the six characters on the front it gives

54
00:02:46.500 --> 00:02:50.430
us guarantee that it's no longer possible
to forget to take care of form validation.

55
00:02:51.600 --> 00:02:56.740
So essentially the whole purpose
of this type is only to be opaque.

56
00:02:56.740 --> 00:03:00.580
If this type were not opaque, then that
guarantee would go out the window.

57
00:03:00.580 --> 00:03:03.114
I could no longer add this to my form and
say, yes,

58
00:03:03.114 --> 00:03:05.224
this ensures that I
remember to validate it.

59
00:03:05.224 --> 00:03:08.003
Because it's entirely possible that
somewhere in my code I just said,

60
00:03:08.003 --> 00:03:09.964
[SOUND] forget it,
I'll instantiate this thing.

61
00:03:09.964 --> 00:03:13.075
Or maybe somebody who is new to the team
and didn't realize what it was supposed to

62
00:03:13.075 --> 00:03:15.660
be marking said I don't know how
I'm supposed to get a Valid Form.

63
00:03:15.660 --> 00:03:18.660
I'll just go ahead and
construct one cuz that thing's in scope.

64
00:03:18.660 --> 00:03:21.260
If somebody new to the team
did try to do that,

65
00:03:21.260 --> 00:03:24.470
they would find that it wouldn't compile
just like our email example from earlier.

66
00:03:24.470 --> 00:03:25.870
They'd go hunting through
the documentation.

67
00:03:25.870 --> 00:03:27.246
Eventually they would say,

68
00:03:27.246 --> 00:03:30.355
the only way I can actually get one of
these is I have to call Validate, etc.

69
00:03:30.355 --> 00:03:35.156
So this is going to be the first in a long
series of examples of things of the form.

70
00:03:35.156 --> 00:03:38.512
It's better to make it so that it won't
compile if you don't remember to do

71
00:03:38.512 --> 00:03:41.709
the thing than it is to document hey,
everyone, please do the thing and

72
00:03:41.709 --> 00:03:44.720
everyone always remember
that perfectly forever.

73
00:03:44.720 --> 00:03:47.020
Nice thing about the compiler
is it always remembers.

