WEBVTT

1
00:00:00.100 --> 00:00:01.729
&gt;&gt; Richard Feldman: Open and
closed records.

2
00:00:01.729 --> 00:00:05.866
So this is a closed record, and
the one below it is an open record.

3
00:00:05.866 --> 00:00:09.824
So a closed record essentially means this
is exactly the shape of this record.

4
00:00:09.824 --> 00:00:13.853
It is closed for extension, you can't
make any sort of variations on that.

5
00:00:13.853 --> 00:00:17.045
You also have open records, which look
similar to closed records except they have

6
00:00:17.045 --> 00:00:19.743
this additional type variable with
a pipe after it at the beginning.

7
00:00:19.743 --> 00:00:24.366
And that means that it's like a closed
record except that it says I have at least

8
00:00:24.366 --> 00:00:26.901
these fields, possibly I have some more.

9
00:00:26.901 --> 00:00:28.592
So let's see an example.

10
00:00:28.592 --> 00:00:32.547
So here is a closed record,
it says firstName = "Sam", and

11
00:00:32.547 --> 00:00:36.137
the type of these closed
record is firstName : String.

12
00:00:36.137 --> 00:00:37.170
That's closed.

13
00:00:37.170 --> 00:00:38.904
Here is an open record.

14
00:00:38.904 --> 00:00:43.194
So if you say .username, just out of
the blue you put that in the elm-repl,

15
00:00:43.194 --> 00:00:47.013
that will give you like a function
that says I am an open record with at

16
00:00:47.013 --> 00:00:48.837
least a field called username.

17
00:00:48.837 --> 00:00:53.430
And I don't know what the type is,
but whatever that record is,

18
00:00:53.430 --> 00:00:56.591
I'm gonna give you back
one of those types.

19
00:00:56.591 --> 00:01:00.519
So you can call this .username on
any closed record that has, or

20
00:01:00.519 --> 00:01:04.543
even another open record,
something that has a username field.

21
00:01:04.543 --> 00:01:08.290
And whatever's on that field,
that's what you're gonna get back.

22
00:01:08.290 --> 00:01:12.483
If we put this into elm-repl and
we see, like, an anonymous function,

23
00:01:12.483 --> 00:01:15.600
take a record and
then say record pipe name equals Li.

24
00:01:15.600 --> 00:01:20.585
That says, okay, based on what you've told
me about this record, I can infer that

25
00:01:20.585 --> 00:01:25.162
it is at least a record that has a name
field, and that name field is a string.

26
00:01:25.162 --> 00:01:27.805
So it's gonna say, I'm gonna take one of
those, and then give you back another one.

27
00:01:27.805 --> 00:01:31.380
So this is the purpose of the type
variable in an open record, is in

28
00:01:31.380 --> 00:01:35.670
case you have two of them appearing in
the same type, it sort of unifies them and

29
00:01:35.670 --> 00:01:38.923
says well, I know that this
record has to have a least name.

30
00:01:38.923 --> 00:01:43.718
And I'm gonna return you the same exact
record that has to have that name.

31
00:01:43.718 --> 00:01:46.458
It's not just that I'm gonna return
you any old record that has name,

32
00:01:46.458 --> 00:01:48.977
it's gonna be exactly the same
shape as the one that you gave me.

33
00:01:48.977 --> 00:01:53.166
But all I know about them is that it
at least has a field called name which

34
00:01:53.166 --> 00:01:54.450
has the type string.

35
00:01:54.450 --> 00:01:59.309
&gt;&gt; Speaker 2: So this is declaring
it right here with the arrow?

36
00:01:59.309 --> 00:02:01.198
Or-
&gt;&gt; Richard Feldman: That's just

37
00:02:01.198 --> 00:02:02.082
showing the type.

38
00:02:02.082 --> 00:02:05.586
So I'm pretending I put this into
elm-repl, and elm-repl told me the type of

39
00:02:05.586 --> 00:02:07.992
this function, and
this is the type of the function.

40
00:02:07.992 --> 00:02:10.309
So this is sort of an annotation for
that anonymous function.

41
00:02:10.309 --> 00:02:13.587
I could have also written it
out as a name function, but

42
00:02:13.587 --> 00:02:16.236
I'm not sure if that makes sense, though.

43
00:02:16.236 --> 00:02:20.213
&gt;&gt; Speaker 2: Well,
if I just wanted to create one of these-

44
00:02:20.213 --> 00:02:21.070
&gt;&gt; Richard Feldman: Open records?

45
00:02:21.070 --> 00:02:22.470
&gt;&gt; Speaker 2: Yeah, an open record.

46
00:02:22.470 --> 00:02:24.317
&gt;&gt; Richard Feldman: [CROSSTALK] Right, so

47
00:02:24.317 --> 00:02:28.530
you can't actually just
create an open record.

48
00:02:28.530 --> 00:02:31.338
So there are literals for
closed records like we have up here.

49
00:02:31.338 --> 00:02:35.979
But the only way to obtain a type that has
an open record is to use something like,

50
00:02:35.979 --> 00:02:39.677
either a function like this, or
to modify an existing record.

51
00:02:39.677 --> 00:02:43.354
So they only exist in the context of type
annotations, not really in terms of, and

52
00:02:43.354 --> 00:02:46.096
in terms of type unification,
but not in terms of literals.

53
00:02:46.096 --> 00:02:49.501
So here's how constraint unification works
in the context of open and closed records.

54
00:02:49.501 --> 00:02:53.102
So here we have two identical records,
they're closed,

55
00:02:53.102 --> 00:02:55.313
they're identical, no problem.

56
00:02:55.313 --> 00:02:58.025
Here we have one that is open and
one that is closed.

57
00:02:58.025 --> 00:03:02.750
So if I pass a closed record, that has x
Int to a function that accepts an open

58
00:03:02.750 --> 00:03:06.200
record with at least x Int,
it will unify as per usual,

59
00:03:06.200 --> 00:03:10.634
to the more constrained of the two,
which is to say the closed record.

60
00:03:10.634 --> 00:03:13.973
And of course, if I give it two
incompatible ones, which could be,

61
00:03:13.973 --> 00:03:16.785
by the way, that they have
the same number of fields, and

62
00:03:16.785 --> 00:03:20.197
the same types on those fields, but
different names for the fields.

63
00:03:20.197 --> 00:03:22.807
Even that is enough for
them to be incompatible.

64
00:03:22.807 --> 00:03:26.580
So they either have to have
exactly the same field names and

65
00:03:26.580 --> 00:03:29.204
exactly the same types on those fields.

66
00:03:29.204 --> 00:03:33.725
Or they have to have one is an open record
that has at least the fields supported by

67
00:03:33.725 --> 00:03:35.625
that particular closed record.

68
00:03:35.625 --> 00:03:39.517
In that case, still unified to
the more constrained of the two.

69
00:03:39.517 --> 00:03:43.063
So some examples of this, let's say we
have an open record with a least x which

70
00:03:43.063 --> 00:03:46.065
is an Int, and with a closed record
which has x which is an Int, and

71
00:03:46.065 --> 00:03:47.612
y which is an Int, it says great.

72
00:03:47.612 --> 00:03:52.551
No problem, I will unify that to the more
constrained than the two which is to say

73
00:03:52.551 --> 00:03:54.188
the x and y closed record.

74
00:03:54.188 --> 00:03:58.920
We can also have two open records, one
of which has more fields than the other.

75
00:03:58.920 --> 00:04:03.912
In which case, it will unify, once again,
to the more constrained of the two,

76
00:04:03.912 --> 00:04:07.800
which is to say the one that has
two fields instead of just one.

77
00:04:07.800 --> 00:04:11.320
Now, so we can get into some more
interesting cases here with open and

78
00:04:11.320 --> 00:04:12.237
closed records.

79
00:04:12.237 --> 00:04:14.362
So let's say I write a function
that says it takes a point and

80
00:04:14.362 --> 00:04:15.777
that returns point.x plus point.y.

81
00:04:15.777 --> 00:04:19.844
This is going to return something that
says I'm an open record with a least x

82
00:04:19.844 --> 00:04:24.063
which is a number and y which is a number,
and that's gong to return a number.

83
00:04:24.063 --> 00:04:27.967
So here we have open records interacting
with our constrained type of number.

84
00:04:27.967 --> 00:04:32.048
And this will unify to x and
y being a number, and

85
00:04:32.048 --> 00:04:37.559
worth noting that even though
it's able to do this, even though

86
00:04:37.559 --> 00:04:43.909
I never at any point said I'm going to
return a record that has both x and y.

87
00:04:43.909 --> 00:04:48.079
It has to infer that by unifying two
disparate open records, one of which says

88
00:04:48.079 --> 00:04:52.134
I had x which is the number, the other
which says I had y which us the number.

89
00:04:52.134 --> 00:04:56.539
One of the only things that makes open
records different than all the other

90
00:04:56.539 --> 00:05:01.445
things we've talked about before is that
this is an example of two things unifying

91
00:05:01.445 --> 00:05:04.735
which are not picking the more
constrained of the two.

92
00:05:04.735 --> 00:05:08.126
But rather unifying their constraints, and
saying this one has gotta have x which is

93
00:05:08.126 --> 00:05:10.483
the number, this one has gotta
have y which is the number.

94
00:05:10.483 --> 00:05:13.052
I wanna put those together and
say actually,

95
00:05:13.052 --> 00:05:17.239
both of them now need to have both x and
y present in order to, so this is sort

96
00:05:17.239 --> 00:05:21.995
of like we've learned two different things
about point from this one expression.

97
00:05:21.995 --> 00:05:24.404
One is that it has x and
the other is that it has y, and

98
00:05:24.404 --> 00:05:28.275
it will unify those constraints and say,
by putting all the knowledge I have about

99
00:05:28.275 --> 00:05:31.920
this things together I have learned that
this record must at least have an x and

100
00:05:31.920 --> 00:05:32.958
it must also have a y.

101
00:05:32.958 --> 00:05:36.402
&gt;&gt; Speaker 2: What you have here
is of you wrote that in the REPL,

102
00:05:36.402 --> 00:05:41.006
that anonymous function,
it would give you this type signature.

103
00:05:41.006 --> 00:05:44.209
&gt;&gt; Richard Feldman: Yes, that's what it
would infer just if you have no other

104
00:05:44.209 --> 00:05:47.031
information and
just say here's my expression.

105
00:05:47.031 --> 00:05:48.310
That's what it would infer for you.

