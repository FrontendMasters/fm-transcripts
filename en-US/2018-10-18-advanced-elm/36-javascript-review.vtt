WEBVTT

1
00:00:00.000 --> 00:00:03.610
&gt;&gt; Richard Feldman: Now this is a pattern
that I'm using with authentication here.

2
00:00:03.610 --> 00:00:06.825
But this is a general pattern with
JavaScript interop in general.

3
00:00:06.825 --> 00:00:10.330
Whenever you're working on an application
that needs to interface with JavaScript,

4
00:00:10.330 --> 00:00:13.498
whether it's through a port, through
a custom element, if you haven't seen

5
00:00:13.498 --> 00:00:16.588
Luke Wesley's talk on custom elements,
highly recommend that by the way.

6
00:00:16.588 --> 00:00:20.660
Any case where you have
stateful JavaScript logic,

7
00:00:20.660 --> 00:00:24.277
you gotta decide who's
gonna own that state.

8
00:00:24.277 --> 00:00:28.580
Either your JavaScript code is going to be
subservient to the Elm code and say yeah,

9
00:00:28.580 --> 00:00:29.379
you know what,

10
00:00:29.379 --> 00:00:33.328
I happen to know this JavaScript code
is not doing its own state management.

11
00:00:33.328 --> 00:00:34.937
It's going to completely delegate and

12
00:00:34.937 --> 00:00:36.891
to entrust all the values
that it gets from Elm.

13
00:00:36.891 --> 00:00:39.306
In which case, great,
you can say Elm is the source of truth.

14
00:00:39.306 --> 00:00:41.285
Whatever's in the model is reality, and

15
00:00:41.285 --> 00:00:45.311
that JavaScript code is going to rely on
that, and at best, it's going to cache it.

16
00:00:45.311 --> 00:00:46.842
Or you can do the reverse.

17
00:00:46.842 --> 00:00:49.289
And I think the reverse is
a lot more common in practice.

18
00:00:49.289 --> 00:00:51.801
Which is to say,
I'm interacting with this JavaScript code.

19
00:00:51.801 --> 00:00:54.582
Being JavaScript code,
it's probably got its own state.

20
00:00:54.582 --> 00:00:56.950
It's probably not a big
bucket of pure functions,

21
00:00:56.950 --> 00:00:59.494
cuz that's not as normal in
JavaScript as it is in Elm.

22
00:00:59.494 --> 00:01:03.056
So given that this JavaScript code is
already going to manage its own state,

23
00:01:03.056 --> 00:01:06.282
all I can do is make it worse if I also
separately manage my own state and

24
00:01:06.282 --> 00:01:08.864
now have a competing source
of truth with JavaScript.

25
00:01:08.864 --> 00:01:11.313
We'll have a much better time if I say,
you know what,

26
00:01:11.313 --> 00:01:13.515
JavaScript's managing its own state,
great.

27
00:01:13.515 --> 00:01:16.240
I am just going to listen
to what it's got going on.

28
00:01:16.240 --> 00:01:19.262
And I'm just gonna do my best to
keep my own caches as fresh and

29
00:01:19.262 --> 00:01:21.872
unstale as possible,
using techniques like this,

30
00:01:21.872 --> 00:01:25.992
where we're saying every single time your
state changes, I wanna know about it.

31
00:01:25.992 --> 00:01:27.212
I wanna update my cache.

32
00:01:27.212 --> 00:01:30.160
I'm not gonna directly mess
with my own cache at all.

33
00:01:30.160 --> 00:01:31.692
I'm just gonna be a passthrough.

34
00:01:31.692 --> 00:01:35.722
All I'm ever gonna do is store the latest
value that I heard about from that

35
00:01:35.722 --> 00:01:38.270
stateful JavaScript, whatever it might be.

36
00:01:39.814 --> 00:01:40.686
&gt;&gt; Richard Feldman: So by doing this,

37
00:01:40.686 --> 00:01:44.585
we can prevent as many of these sort of
state synchronization bugs as possible,

38
00:01:44.585 --> 00:01:48.384
by sort of thinking in terms of who's
the cache, who's the source of truth?

39
00:01:48.384 --> 00:01:52.816
And we want to have as few
sources of truth as possible, and

40
00:01:52.816 --> 00:01:58.514
have the hierarchy be the one that is
the most reliable is sort of at the top,

41
00:01:58.514 --> 00:02:02.234
and everybody else is just
caching that at best.

42
00:02:02.234 --> 00:02:03.060
So to recap,

43
00:02:03.060 --> 00:02:07.579
we started off by talking about
impossible states that we can end up in.

44
00:02:07.579 --> 00:02:10.503
Multiple sources of truth is one
possible way we can do that.

45
00:02:10.503 --> 00:02:14.372
We looked at the tab var, where we had
each of the tabs potentially thinking that

46
00:02:14.372 --> 00:02:16.064
they were the one that was active.

47
00:02:16.064 --> 00:02:19.575
And when we shift that to say
there's only source of truth,

48
00:02:19.575 --> 00:02:23.788
we model each of these tabs as a different
variance in a custom type, and

49
00:02:23.788 --> 00:02:27.390
all we can have is one source of truth for
which one is active.

50
00:02:27.390 --> 00:02:29.978
That prevented that impossible
state from happening,

51
00:02:29.978 --> 00:02:32.191
which actually did come
up in practice before.

52
00:02:32.191 --> 00:02:35.625
I talked about derived data, and how when
we start off with something that's like

53
00:02:35.625 --> 00:02:39.011
a timestamp in the database, it goes
through a number of transformations before

54
00:02:39.011 --> 00:02:41.290
it makes it all the way to
being rendered for the user.

55
00:02:41.290 --> 00:02:45.359
In a lot of cases, we can't avoid caching
that in the model, which is fair enough.

56
00:02:45.359 --> 00:02:49.218
But if we can, it's best to do that
derived data in the view, not storing it

57
00:02:49.218 --> 00:02:53.100
in the model where it can potentially
end up as a competing source of truth.

58
00:02:53.100 --> 00:02:55.592
We talked about authentication and
how, again,

59
00:02:55.592 --> 00:02:58.036
ultimately the source of
truth is on the server.

60
00:02:58.036 --> 00:03:00.548
And if we disagree with the server,
we're out of luck.

61
00:03:00.548 --> 00:03:04.164
So we're gonna cache stuff for performance
reasons, so that we don't have to have

62
00:03:04.164 --> 00:03:07.587
the users enter their credentials every
single time they wanna do something.

63
00:03:07.587 --> 00:03:09.607
But we're gonna be aware that
those things are caches.

64
00:03:09.607 --> 00:03:13.805
And we're gonna take as many steps as we
can to prevent those caches from getting

65
00:03:13.805 --> 00:03:18.191
stale by doing things like every time
local storage updates, updating the model,

66
00:03:18.191 --> 00:03:22.390
and not ever changing the session in the
model through any other means other than

67
00:03:22.390 --> 00:03:23.736
refreshing that cache.

68
00:03:23.736 --> 00:03:26.534
And finally, we talked about
the implications on JavaScript interop.

69
00:03:26.534 --> 00:03:29.515
So if we're running into the same
situation, where we have something that

70
00:03:29.515 --> 00:03:32.496
we're interoperating with on the job
description side that is stateful,

71
00:03:32.496 --> 00:03:33.366
let it own the state.

72
00:03:33.366 --> 00:03:36.526
Treat the Elm stuff as a cache
of that state, and trust it for

73
00:03:36.526 --> 00:03:37.990
as much state as possible.

74
00:03:37.990 --> 00:03:42.408
Because the consequence of having
competing sources of truth is much more

75
00:03:42.408 --> 00:03:45.900
severe than the minor inconvenience
of having to ask it for

76
00:03:45.900 --> 00:03:47.694
its state on a regular basis.

