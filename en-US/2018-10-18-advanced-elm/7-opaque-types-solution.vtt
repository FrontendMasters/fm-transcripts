WEBVTT

1
00:00:00.000 --> 00:00:01.029
&gt;&gt; Richard Feldman: Let's
go through the solution.

2
00:00:01.029 --> 00:00:04.443
So the goal here is to make
a cred an opaque type.

3
00:00:04.443 --> 00:00:05.784
Let's see how we can do that.

4
00:00:05.784 --> 00:00:10.056
So the first thing I'm gonna do is change
this from type alias to type, and I'm

5
00:00:10.056 --> 00:00:14.539
gonna need to give it some sort of variant
here, so I'm just gonna name that cred.

6
00:00:14.539 --> 00:00:16.620
So we're gonna have type Cred = Cred.

7
00:00:16.620 --> 00:00:20.723
And then at this point I have a record for
username and token.

8
00:00:20.723 --> 00:00:25.384
But honestly, records are most often
useful in my experience when used within

9
00:00:25.384 --> 00:00:28.010
context of a type I'm
going to make opaque.

10
00:00:28.010 --> 00:00:30.451
If I have different fields
with the same types or

11
00:00:30.451 --> 00:00:32.352
I have quite a few different fields.

12
00:00:32.352 --> 00:00:36.386
In this case, I only have two fields here,
I have two pieces of data.

13
00:00:36.386 --> 00:00:38.627
So I'm just gonna go ahead and say,

14
00:00:38.627 --> 00:00:41.623
Username String and
cut directly to the chase.

15
00:00:41.623 --> 00:00:44.351
We can see elsewhere in this
project where I didn't do this,

16
00:00:44.351 --> 00:00:48.000
where I actually did use record insider,
but for this one I'm not gonna bother.

17
00:00:48.000 --> 00:00:48.696
Either way works.

18
00:00:48.696 --> 00:00:52.018
If you did that way and you kept
the record in there, that's totally fine,

19
00:00:52.018 --> 00:00:54.203
but I'm gonna demonstrate
solving it this way.

20
00:00:54.203 --> 00:00:57.021
Okay, so let's see if this compiles.

21
00:00:57.021 --> 00:00:58.119
Shocking, it didn't.

22
00:00:58.119 --> 00:01:00.470
Okay, so we have some errors.

23
00:01:00.470 --> 00:01:03.734
And immediately we have errors, even
though we were compiling targeting main,

24
00:01:03.734 --> 00:01:07.103
the first errors that we see are actually
in the module that we're editing itself.

25
00:01:07.103 --> 00:01:11.325
So it says, TYPE MISMATCH, this is not
a record, so it has no fields to access,

26
00:01:11.325 --> 00:01:13.987
which is true cuz we stopped
making it be a record.

27
00:01:13.987 --> 00:01:18.263
So first thing we need to use,
we need to have access cred.token.

28
00:01:18.263 --> 00:01:22.251
I'm just gonna destructure this inline and
say, Cred token.

29
00:01:22.251 --> 00:01:26.571
And now that should, oops sorry, and
I'm gonna need to do an underscore for

30
00:01:26.571 --> 00:01:27.459
the other one.

31
00:01:27.459 --> 00:01:30.221
This is one of the downsides of doing
it this way instead of doing it

32
00:01:30.221 --> 00:01:30.885
with a record.

33
00:01:30.885 --> 00:01:33.219
If I'd done it with a record,
I could go like this and

34
00:01:33.219 --> 00:01:36.737
then no matter how many fields I had, I
would be able to pull the token off of it.

35
00:01:36.737 --> 00:01:40.398
If you haven't seen that syntax, by the
way, that's inline record destructuring.

36
00:01:40.398 --> 00:01:43.565
That would work if I had made it so
that there was a record inside there, but

37
00:01:43.565 --> 00:01:45.984
since I didn't,
I'm gonna need to do the underscore.

38
00:01:45.984 --> 00:01:49.421
Again, there are trade offs
to doing it either way, but

39
00:01:49.421 --> 00:01:51.405
I'm choosing to do it this way.

40
00:01:51.405 --> 00:01:54.500
Okay, let's see if that fixed that one.

41
00:01:54.500 --> 00:01:57.330
Okay, nope, not happy about that.

42
00:01:57.330 --> 00:02:00.850
I see, because token is the other field.

43
00:02:00.850 --> 00:02:04.669
So t one of the downsides of doing this
is you can potentially mix those up.

44
00:02:04.669 --> 00:02:07.919
Fortunately, if you do mix it up, the
compiler will tell you, as long as they

45
00:02:07.919 --> 00:02:11.277
have different types, which I only do
this because these are different types.

46
00:02:11.277 --> 00:02:14.675
If those were both strings, I absolutely
would give them names, because otherwise,

47
00:02:14.675 --> 00:02:16.314
I might make the mistake that I just made.

48
00:02:16.314 --> 00:02:20.604
Okay, looking up here,
we have encode.string, cred.token.

49
00:02:20.604 --> 00:02:24.066
So once again,
we want to get Cred _ token.

50
00:02:24.066 --> 00:02:28.986
And, whoops,
&gt;&gt; Richard Feldman: tokeben, okay, so

51
00:02:28.986 --> 00:02:33.468
now we're done resolving the type
errors within this module.

52
00:02:33.468 --> 00:02:37.485
We're on to the next module,
which is viewer, okay?

53
00:02:37.485 --> 00:02:39.683
So, it's got the same concern here,

54
00:02:39.683 --> 00:02:44.712
which is that info.cred.username does not
exist because cred is now an opaque type.

55
00:02:44.712 --> 00:02:49.517
So, since, sorry, since it's not a record
anymore, I can't save.username directly.

56
00:02:49.517 --> 00:02:53.039
But what I can do is I can expose
something called Username,

57
00:02:53.039 --> 00:02:56.922
like a function called Username,
which exposes that directly.

58
00:02:56.922 --> 00:02:59.813
Now, that's something that
is totally fine to expose.

59
00:02:59.813 --> 00:03:02.833
The whole point of this was to make it so
that they can't see the token, but

60
00:03:02.833 --> 00:03:04.407
it's okay if we expose the username.

61
00:03:04.407 --> 00:03:08.314
So the way we're gonna do that is I'm just
gonna add something here that says INFO.

62
00:03:08.314 --> 00:03:12.273
This is usually where I will put some
thing that sort of the read-only section.

63
00:03:12.273 --> 00:03:16.354
Stuff that I'm choosing to expose that
does not actually result in a new cred

64
00:03:16.354 --> 00:03:19.236
value being exposed for
the particular opaque type.

65
00:03:19.236 --> 00:03:21.291
That's what I usually tend
to mean by that heading.

66
00:03:21.291 --> 00:03:22.425
So I'm gonna call it username.

67
00:03:22.425 --> 00:03:26.912
I'm gonna say username takes a Cred and
returns a String.

68
00:03:26.912 --> 00:03:32.546
So cred =, and at this point,
since Cred is a custom type,

69
00:03:32.546 --> 00:03:38.658
I'm actually gonna wanna
destructure it inline, and do that.

70
00:03:38.658 --> 00:03:42.857
Calling it uname instead of username to
avoid the name conflict with the llll name

71
00:03:42.857 --> 00:03:44.164
of the function itself.

72
00:03:44.164 --> 00:03:47.051
And then I need to
remember to expose that.

73
00:03:47.051 --> 00:03:50.337
Okay, so now we have a way for
others to access it.

74
00:03:50.337 --> 00:03:54.846
All they need to do is say Cred.username,
and then pass the cred value, and

75
00:03:54.846 --> 00:03:57.460
then now they have
access to that username.

76
00:03:57.460 --> 00:03:58.662
Let's see what that does.

77
00:03:58.662 --> 00:04:03.677
Okay, oops nope, I said that,
[LAUGH] that's my mistake.

78
00:04:03.677 --> 00:04:06.328
I said that it was gonna return a string,
but

79
00:04:06.328 --> 00:04:11.217
in fact the type of the username is in
fact username, it's another opaque type.

80
00:04:11.217 --> 00:04:15.676
So this is inaccurate,
this should actually be Cred to Username.

81
00:04:15.676 --> 00:04:20.534
Okay, there we go, and finally
we're down to the pages themselves.

82
00:04:20.534 --> 00:04:26.253
So pagesettings, here we have 65,

83
00:04:26.253 --> 00:04:29.836
Cred.username cred.

84
00:04:29.836 --> 00:04:31.957
We have page.elm line,

85
00:04:31.957 --> 00:04:37.921
this would be easier if I had my
integration turned out, but I don't.

86
00:04:42.393 --> 00:04:43.378
&gt;&gt; Richard Feldman: cred, [INAUDIBLE].

87
00:04:43.378 --> 00:04:46.457
All right, so here I'm trying
to destructure this inline, but

88
00:04:46.457 --> 00:04:50.460
that's not going to work anymore because
it's not a record, so Username.cred.

89
00:04:50.460 --> 00:04:54.577
Sorry, backwards Cred.username, okay.

90
00:04:54.577 --> 00:04:56.243
And then now username can be that.

91
00:04:56.243 --> 00:04:57.411
Let's see what we have left.

92
00:04:57.411 --> 00:05:01.211
Both in author 223.

93
00:05:02.899 --> 00:05:03.706
&gt;&gt; Richard Feldman: Okay.

94
00:05:08.045 --> 00:05:09.916
&gt;&gt; Richard Feldman: And the last one, 98.

95
00:05:11.818 --> 00:05:12.693
&gt;&gt; Richard Feldman: Okay.

96
00:05:15.825 --> 00:05:17.554
&gt;&gt; Richard Feldman: There was one more,
pageprofile.

97
00:05:19.787 --> 00:05:20.484
&gt;&gt; Richard Feldman: 260.

98
00:05:25.147 --> 00:05:26.379
&gt;&gt; Richard Feldman: There we go, okay.

99
00:05:26.379 --> 00:05:30.546
So now with a few mechanical
transformations that took maybe a minute,

100
00:05:30.546 --> 00:05:34.991
we have now created the guarantee that
across our entire system nobody knows

101
00:05:34.991 --> 00:05:37.504
what that token is except for Cred itself.

102
00:05:37.504 --> 00:05:40.963
That implementation detail is completely
hidden, and if we ever decide to change

103
00:05:40.963 --> 00:05:44.385
the format of the token, we know we can
do that without causing any regressions.

104
00:05:44.385 --> 00:05:48.089
One thing to note about that is, as you've
seen, if your currently exposing something

105
00:05:48.089 --> 00:05:51.691
and it's not opaque, and you realize, hey,
I could make some more guarantees, and

106
00:05:51.691 --> 00:05:54.342
it would be a little bit nicer to
maintain if I made this opaque,

107
00:05:54.342 --> 00:05:56.574
that's a transformation
you can do after the fact.

108
00:05:56.574 --> 00:06:00.028
One of the nice things about doing it this
way is that you'll immediately encounter

109
00:06:00.028 --> 00:06:03.107
all the scenarios where you were
aligned on the implementation details.

110
00:06:03.107 --> 00:06:05.717
And if there are any problem
cases where you're like, uh-oh,

111
00:06:05.717 --> 00:06:08.182
we really genuinely are relying
on this and it's a problem,

112
00:06:08.182 --> 00:06:11.154
you'll at least know about it and
have the potential to be able to fix it.

113
00:06:11.154 --> 00:06:14.058
So this is one of those things
where it's never too late.

114
00:06:14.058 --> 00:06:17.345
If you change your mind later and realize,
you know what, I actually could make this

115
00:06:17.345 --> 00:06:19.777
opaque and that would be better,
you can do it after the fact.

116
00:06:19.777 --> 00:06:23.522
A lot of these techniques that we're gonna
learn today are things that you don't need

117
00:06:23.522 --> 00:06:25.040
to feel bad about not having done.

118
00:06:25.040 --> 00:06:28.593
This is Elm, refactoring tends to
be pretty easy, pretty reliable,

119
00:06:28.593 --> 00:06:32.703
so you can always go back and make changes
after you learn a new technique, yeah?

120
00:06:32.703 --> 00:06:37.778
&gt;&gt; Speaker 2: Okay so before we were
exposing Cred and then parens, and

121
00:06:37.778 --> 00:06:43.699
then exposing within there,
that was because it was a union type,

122
00:06:43.699 --> 00:06:45.347
or I mean a-
&gt;&gt; Richard Feldman: Custom type.

123
00:06:45.347 --> 00:06:47.355
&gt;&gt; Speaker 2: Custom type.

124
00:06:47.355 --> 00:06:50.347
&gt;&gt; Richard Feldman: So
you mean like this, oops?

125
00:06:50.347 --> 00:06:54.460
&gt;&gt; Speaker 2: Yeah, like we would've
put username, say within there?

126
00:06:54.460 --> 00:06:57.844
&gt;&gt; Richard Feldman: So when we did it
this way, then that would mean that other

127
00:06:57.844 --> 00:07:02.624
modules would be able to call this
variant right here and make Cred by hand.

128
00:07:02.624 --> 00:07:06.460
&gt;&gt; Speaker 2: But you couldn't put
just one thing within the parens?

129
00:07:09.382 --> 00:07:13.607
&gt;&gt; Richard Feldman: I
forget if you still can.

130
00:07:13.607 --> 00:07:17.113
The syntax of that changed
recently on the import side.

131
00:07:17.113 --> 00:07:19.805
Yeah, you can't.
You have to either expose all of them or

132
00:07:19.805 --> 00:07:20.679
none of them.

133
00:07:20.679 --> 00:07:21.719
Those are the two options.

134
00:07:21.719 --> 00:07:23.854
[LAUGH]
&gt;&gt; Speaker 2: And then,

135
00:07:23.854 --> 00:07:29.038
username just is getting exposed
via cred because the compiler

136
00:07:29.038 --> 00:07:33.692
sees that we're using it
as it's signature, or?

137
00:07:33.692 --> 00:07:38.986
&gt;&gt; Richard Feldman: No, I just made
a function called username that extracts

138
00:07:38.986 --> 00:07:44.622
it and returns it, and
I'm exposing this function by hand.

139
00:07:44.622 --> 00:07:47.203
So once you make something opaque,

140
00:07:47.203 --> 00:07:51.771
all access to any of its internals
become completely opt-in.

141
00:07:51.771 --> 00:07:52.810
And this is the way that would you opt-in.

142
00:07:52.810 --> 00:07:54.481
Is you would expose
the function that says,

143
00:07:54.481 --> 00:07:55.978
here, now you can have access to this.

144
00:07:55.978 --> 00:07:57.943
Just call this function and you'll get it.

145
00:07:57.943 --> 00:08:02.650
&gt;&gt; Speaker 2: And we're accessing it off
of Cred in the other module because that's

146
00:08:02.650 --> 00:08:04.944
what we imported the module as?

147
00:08:04.944 --> 00:08:05.752
&gt;&gt; Richard Feldman: Yeah,
yeah, yeah, right.

148
00:08:05.752 --> 00:08:09.719
So the other modules have
import Viewer.Cred as Cred.

149
00:08:09.719 --> 00:08:11.568
Yeah, just as a shorthand.

150
00:08:11.568 --> 00:08:12.968
Yeah, good question.

151
00:08:12.968 --> 00:08:16.046
Worth noting, by the way,
that when I used to be a Java programmer,

152
00:08:16.046 --> 00:08:19.610
we had these things called getters and
setters, which kinda resembled this,

153
00:08:19.610 --> 00:08:22.217
where you would just do this
all the time for everything.

154
00:08:22.217 --> 00:08:25.827
And you'd also expose a function that
would modify, which defeats the entire

155
00:08:25.827 --> 00:08:29.067
purpose of all this, so I would
highly recommend against doing that.

156
00:08:29.067 --> 00:08:32.024
But rather think about in terms of, okay,

157
00:08:32.024 --> 00:08:37.212
what's the minimal set of things that
I can expose to make my program work?

158
00:08:37.212 --> 00:08:41.307
And how can I selectively expose them
one at a time on an as needed basis and

159
00:08:41.307 --> 00:08:45.203
not just be like, well,
I'm gonna make it technically hidden but

160
00:08:45.203 --> 00:08:48.046
then I'll just expose all
of it using functions?

161
00:08:48.046 --> 00:08:52.070
That's just a bunch of [LAUGH]
extra work for no benefit.

162
00:08:54.430 --> 00:08:55.222
&gt;&gt; Richard Feldman: Yeah?

163
00:08:55.222 --> 00:08:58.390
&gt;&gt; Speaker 3: So
it feels kind of implicit,

164
00:08:58.390 --> 00:09:04.092
that in the type of Cred,
String represents a token,

165
00:09:04.092 --> 00:09:08.156
could we make a type for token that-
&gt;&gt; Richard Feldman: Yeah,

166
00:09:08.156 --> 00:09:09.023
absolutely, for sure.

167
00:09:09.023 --> 00:09:10.701
&gt;&gt; Speaker 3: Would that be going too far,
or?

168
00:09:10.701 --> 00:09:13.121
&gt;&gt; Richard Feldman: No not at all,
I mean, honestly,

169
00:09:13.121 --> 00:09:16.880
I think that would be totally fine,
like AuthToken.

170
00:09:16.880 --> 00:09:18.192
&gt;&gt; Speaker 3: [CROSSTALK] mutation.

171
00:09:18.192 --> 00:09:20.463
&gt;&gt; Richard Feldman: Absolutely, yeah,
no, I think that's totally fine.

172
00:09:20.463 --> 00:09:23.863
The only reason that I didn't was
because it only lives in this module.

173
00:09:23.863 --> 00:09:27.513
So I was like, I'm not really worried
about other modules finding out about it.

174
00:09:27.513 --> 00:09:28.673
But yeah, I think that's totally fine.

175
00:09:28.673 --> 00:09:33.801
I mean, I could see doing even
something like type alias token.

176
00:09:33.801 --> 00:09:36.339
If it's just gonna be for
this module, I can do it that way.

177
00:09:36.339 --> 00:09:39.495
Or I could even see as far as just saying,
yeah, you know what,

178
00:09:39.495 --> 00:09:41.712
[LAUGH] I'm gonna straight
up do it that way.

179
00:09:41.712 --> 00:09:43.885
You could even give it its own module and
make it so

180
00:09:43.885 --> 00:09:45.954
that Cred is the only
consumer of that module.

181
00:09:45.954 --> 00:09:47.194
There's a number of ways you could do it.

182
00:09:47.194 --> 00:09:51.283
But I think given that this is
an implementation detail that lives within

183
00:09:51.283 --> 00:09:52.489
this module anyway,

184
00:09:52.489 --> 00:09:56.193
I think there's not gonna be a whole
lot of benefit to doing that.

185
00:09:56.193 --> 00:09:58.233
&gt;&gt; Speaker 3: There's only
like ten lines of code, so-

186
00:09:58.233 --> 00:09:59.600
&gt;&gt; Richard Feldman: Yeah, I mean,

187
00:09:59.600 --> 00:10:03.502
Cred's not doing a whole lot, so, [LAUGH].

