WEBVTT

1
00:00:00.000 --> 00:00:04.130
&gt;&gt; Richard Feldman: And the final
thing is using modules for modularity.

2
00:00:04.130 --> 00:00:05.600
So what does that mean?

3
00:00:05.600 --> 00:00:08.870
One of the things we noted about
the editor file, it's pretty long.

4
00:00:08.870 --> 00:00:10.290
It's about 600 lines of code.

5
00:00:10.290 --> 00:00:15.764
That sounds like a lot for
one module, or for one file.

6
00:00:15.764 --> 00:00:18.397
At the risk of repeating
something that Evan,

7
00:00:18.397 --> 00:00:22.996
I think gave an excellent talk on, which
we'll link to called the Life of a File.

8
00:00:22.996 --> 00:00:26.692
One of the things worth noting
about Elm Files is that

9
00:00:26.692 --> 00:00:31.490
the primary purpose of a module is
this line right here, exposing.

10
00:00:32.650 --> 00:00:36.360
It's to hide things,
it's to organize things that are related

11
00:00:36.360 --> 00:00:40.410
into a particular module, and then to
say some of these implementation details

12
00:00:40.410 --> 00:00:43.370
only matter to the related
things inside this module.

13
00:00:43.370 --> 00:00:47.140
And generally speaking,
they're built around a particular type.

14
00:00:47.140 --> 00:00:50.650
For example,
on pages usually that type is the model.

15
00:00:50.650 --> 00:00:53.310
Everything in this page has
to do with this model, and

16
00:00:53.310 --> 00:00:56.750
probably nobody else should
be messing with that model.

17
00:00:56.750 --> 00:01:00.720
As it happens, due to this current, the
way that this single page application is

18
00:01:00.720 --> 00:01:04.380
constructed, I do need to expose the model
so that main can have access to it.

19
00:01:04.380 --> 00:01:08.210
But that is hopefully a temporary
implementation detail and

20
00:01:08.210 --> 00:01:10.040
in the future we can do away with that.

21
00:01:11.410 --> 00:01:13.220
A better example would be
something like profile.

22
00:01:14.340 --> 00:01:15.520
Here's our profile.

23
00:01:15.520 --> 00:01:17.350
We have profile being an opaque type.

24
00:01:17.350 --> 00:01:21.300
It's got an internals record that
stores some information that only this

25
00:01:21.300 --> 00:01:22.810
profile module cares about.

26
00:01:22.810 --> 00:01:24.190
It doesn't expose them.

27
00:01:24.190 --> 00:01:28.090
So they're named internals for a reason,
they don't go outside this module.

28
00:01:28.090 --> 00:01:29.510
We've got the opaque type of profile,

29
00:01:29.510 --> 00:01:32.595
then we have a very small API of
stuff you can do with the profile.

30
00:01:32.595 --> 00:01:37.062
You can get the avatar, you can get the
bio, and you can get a decoder for it, and

31
00:01:37.062 --> 00:01:37.810
that's it.

32
00:01:39.060 --> 00:01:42.270
So this is a very compact Elm module.

33
00:01:42.270 --> 00:01:44.950
In terms of lines of code,
yeah okay, it's also a lot smaller.

34
00:01:44.950 --> 00:01:46.950
It's only 50 compared to editor.

35
00:01:46.950 --> 00:01:49.620
Less than, more than an order of
magnitude difference between the two.

36
00:01:50.630 --> 00:01:56.720
But to me, the bigger deal has more to
do with how these types tend to relate.

37
00:01:56.720 --> 00:02:00.230
When I was talking about debugging,
talking about making changes to code,

38
00:02:00.230 --> 00:02:02.670
talking about making
additions to code even.

39
00:02:02.670 --> 00:02:05.780
All I'm really thinking about is
how these types interrelate and

40
00:02:05.780 --> 00:02:09.360
what things I can put out of my mind,
and these pathways I can close off

41
00:02:09.360 --> 00:02:13.030
as I'm sort of traversing my search space
for implications of what I'm about to do.

42
00:02:14.510 --> 00:02:15.810
And what controls types?

43
00:02:15.810 --> 00:02:19.510
What controls the number of
pathways that I have to traverse?

44
00:02:19.510 --> 00:02:21.980
What controls how deep those pathways go?

45
00:02:21.980 --> 00:02:23.720
Is what gets exposed.

46
00:02:25.120 --> 00:02:29.710
So just by virtue of the fact that
this internals thing is not exposed,

47
00:02:29.710 --> 00:02:32.790
I know that any time here
that I'm using internals,

48
00:02:32.790 --> 00:02:34.570
that's something that only
exists in this module.

49
00:02:34.570 --> 00:02:36.440
There is no external dependency to that.

50
00:02:36.440 --> 00:02:38.910
I know that for a fact cuz it
doesn't ever escape this module.

51
00:02:40.860 --> 00:02:44.790
Likewise, even if I have a much
bigger one like for example, author.

52
00:02:44.790 --> 00:02:48.610
Author is about half the size
of the editor page, but

53
00:02:48.610 --> 00:02:49.970
is significantly bigger than profile.

54
00:02:51.140 --> 00:02:55.800
It's still built around this idea of one
data structure, in this case the author.

55
00:02:57.100 --> 00:02:59.490
So we have a decoder,
like we did for the profile.

56
00:02:59.490 --> 00:03:00.510
We have a couple of other things.

57
00:03:00.510 --> 00:03:04.409
You can fetch an author, you can follow,
you can get a followButton.

58
00:03:04.409 --> 00:03:07.405
There are requests for
following and unfollowing, and

59
00:03:07.405 --> 00:03:09.785
then there's username and there's view.

60
00:03:09.785 --> 00:03:14.285
Those are the, sort of the, this is
the entire API for working with an author.

61
00:03:14.285 --> 00:03:16.065
And all of these things are related.

62
00:03:16.065 --> 00:03:19.525
And for as much stuff as this is
exposing compared to the profile,

63
00:03:19.525 --> 00:03:22.335
there's a whole bunch more
that it's not exposing.

64
00:03:22.335 --> 00:03:24.635
For example, it doesn't expose
the constructors of these things.

65
00:03:24.635 --> 00:03:26.745
These are both opaque types.

66
00:03:26.745 --> 00:03:30.770
The implementation of username is
completely secret from the outside world.

67
00:03:30.770 --> 00:03:33.940
As far as outsiders know, username
just says hey, give me an author and

68
00:03:33.940 --> 00:03:35.600
I'll give you back the username.

69
00:03:35.600 --> 00:03:40.070
And it says yeah, okay, that's fine,
but I happen to know how to do that for

70
00:03:40.070 --> 00:03:43.190
all of the different types of things
that go on within a username.

71
00:03:44.200 --> 00:03:45.740
We also can get the profile out of those,

72
00:03:45.740 --> 00:03:48.109
no matter which combination
of things we have there.

73
00:03:49.530 --> 00:03:53.010
So all of these things that are internal
just like request help right here.

74
00:03:53.010 --> 00:03:55.310
We talked about help functions
more in the next section.

75
00:03:56.540 --> 00:03:59.740
Anytime I have potential bug in any of
these, anytime I have potential change I

76
00:03:59.740 --> 00:04:03.960
want to make any of these, all I have to
look at is what actually gets exposed.

77
00:04:03.960 --> 00:04:07.070
If it's not expose, if it's only a
dependency if things that don't get expose

78
00:04:07.070 --> 00:04:09.319
then we don't have to consider
any of the other modules.

79
00:04:10.480 --> 00:04:15.090
So really, that's where the sort of
implications of one value on another,

80
00:04:15.090 --> 00:04:16.880
one function on another come from.

81
00:04:16.880 --> 00:04:19.340
It has to do with the types and
what's exposed, not so

82
00:04:19.340 --> 00:04:21.210
much the length of the module.

83
00:04:21.210 --> 00:04:24.774
If I were to take this editor page and
chop it up arbitrarily, I just said,

84
00:04:24.774 --> 00:04:27.658
I'm gonna take the first third and
move that into a module.

85
00:04:27.658 --> 00:04:29.860
And the second third and
move that into another module.

86
00:04:29.860 --> 00:04:32.890
And the third third and
move that into a third module.

87
00:04:32.890 --> 00:04:34.500
What would I have done?

88
00:04:34.500 --> 00:04:36.690
Well, I can produce the line count.

89
00:04:36.690 --> 00:04:39.620
Have I actually depends on what else?

90
00:04:39.620 --> 00:04:41.160
No, I have the same search space before.

91
00:04:41.160 --> 00:04:44.390
In fact, now I only have a larger source
space because I only have more files to

92
00:04:44.390 --> 00:04:44.890
traverse.

93
00:04:44.890 --> 00:04:49.260
And so, it's actually going to take me
a longer to debug, longer to make changes,

94
00:04:49.260 --> 00:04:50.960
longer to figure out
where things are going,

95
00:04:50.960 --> 00:04:54.980
because I'm switching files more often for
no corresponding benefit.

96
00:04:54.980 --> 00:04:58.650
I've already organized these
things into a module such that

97
00:04:58.650 --> 00:05:00.960
I can draw tight module
boundaries around it.

98
00:05:00.960 --> 00:05:04.520
And say, I can expose as little as
possible because all of these things

99
00:05:04.520 --> 00:05:10.280
are related, they all go in one module,
and they're all interdependent anyway.

100
00:05:10.280 --> 00:05:12.330
If I were to split them up
into three different modules,

101
00:05:12.330 --> 00:05:14.490
I would start having to over-expose.

102
00:05:14.490 --> 00:05:18.680
I would have to say this module needs to
expose to the entire world this particular

103
00:05:18.680 --> 00:05:23.020
piece of implementation details just so
this first module can have access to it.

104
00:05:23.020 --> 00:05:26.330
Whereas if I put them all in one module,
if they only depend on one another,

105
00:05:26.330 --> 00:05:28.340
I can just not expose them at all.

106
00:05:28.340 --> 00:05:31.800
And I can limit the scope to say this
only is a concern within this module.

107
00:05:33.010 --> 00:05:37.390
Now, again, this only happens because
all functions in Elm are pure.

108
00:05:37.390 --> 00:05:39.210
If I were in JavaScript that
would not be true anymore.

109
00:05:40.400 --> 00:05:43.050
In JavaScript every
single line in a module

110
00:05:43.050 --> 00:05:46.510
can potentially affect every single
other line, every line of code.

111
00:05:46.510 --> 00:05:50.155
You can run a side effect, you can mutate
some global, it can read from a global.

112
00:05:50.155 --> 00:05:53.696
So there's no guarantee that by
taking what's going on in a module,

113
00:05:53.696 --> 00:05:56.931
I can't just hop from type
definition to type definition, and

114
00:05:56.931 --> 00:06:00.610
think only in terms of the types to
figure out how things interrelate.

115
00:06:00.610 --> 00:06:03.910
I also have to look at all the lines in
between to figure out what's going on.

116
00:06:05.530 --> 00:06:07.520
So that creates, naturally speaking,

117
00:06:07.520 --> 00:06:10.380
a habit to say,
lower line counts are better.

118
00:06:10.380 --> 00:06:11.810
Lower line counts are more maintainable.

119
00:06:11.810 --> 00:06:13.580
And I think in JavaScript that's true.

120
00:06:13.580 --> 00:06:15.570
But it's not true in Elm
the opposite is true.

121
00:06:16.660 --> 00:06:18.870
When you think in terms
of line counts in Elm,

122
00:06:18.870 --> 00:06:22.920
you're sacrificing this huge
opportunity to draw tighter boundaries.

123
00:06:22.920 --> 00:06:25.110
When you split things up
arbitrarily based on line length,

124
00:06:25.110 --> 00:06:28.520
you're forced to over expose and
actually cause more harm than good.

125
00:06:30.290 --> 00:06:33.650
So the better structure when
you're scaling an Elm application

126
00:06:33.650 --> 00:06:37.290
is to start off by just picking
a module and adding to it.

127
00:06:37.290 --> 00:06:40.710
Just saying, I've already got this module
here or maybe I'm creating a new page.

128
00:06:40.710 --> 00:06:43.950
New pages say you're gonna
want a new module for it.

129
00:06:43.950 --> 00:06:44.970
And just start adding stuff to it.

130
00:06:44.970 --> 00:06:47.000
Just build, build, build, build, build.

131
00:06:47.000 --> 00:06:49.960
And at some points you'll
decide to split it.

132
00:06:49.960 --> 00:06:52.720
Not because you said it was too big or
too many lines of code.

133
00:06:52.720 --> 00:06:54.440
That's not really a thing.

134
00:06:54.440 --> 00:06:58.248
But rather because you've identified
a subset of it that you could pull out and

135
00:06:58.248 --> 00:07:01.146
put it into its own module,
because they're all related.

136
00:07:01.146 --> 00:07:02.440
And you could hide parts of it.

137
00:07:03.690 --> 00:07:06.343
So the motivation for
splitting out a module is not so

138
00:07:06.343 --> 00:07:10.034
much that we've decided something was
too big or too many lines of code.

139
00:07:10.034 --> 00:07:13.118
But rather that we've identified
the opportunity to make something else

140
00:07:13.118 --> 00:07:14.220
that's smaller.

141
00:07:14.220 --> 00:07:16.210
Out of some related
group of functionality.

142
00:07:17.210 --> 00:07:18.373
That's really where the money is,

143
00:07:18.373 --> 00:07:21.070
because that's what feeds into all the
things we were talking about previously.

144
00:07:21.070 --> 00:07:24.678
All these ideas of how we're going to
traverse our code base when we're trying

145
00:07:24.678 --> 00:07:28.011
to figure out the implications of change,
a bug we're trying to fix, or

146
00:07:28.011 --> 00:07:30.049
even just some new addition we're making.

147
00:07:31.640 --> 00:07:34.640
So, that's what I mean by
using modules for modularity.

148
00:07:34.640 --> 00:07:39.560
To break things up into self contained
modules that expose ideally less than

149
00:07:39.560 --> 00:07:40.470
what they implement.

150
00:07:40.470 --> 00:07:44.548
Let's move on to the Review.

151
00:07:44.548 --> 00:07:46.130
So what fits in our heads?

152
00:07:46.130 --> 00:07:48.860
This is the idea of eventually
our program is going to

153
00:07:48.860 --> 00:07:52.640
outgrow what we can keep in our heads if
we keep building, it and building it out.

154
00:07:52.640 --> 00:07:55.910
The only solution to that is to
be able to have techniques for

155
00:07:55.910 --> 00:07:57.110
chopping it up into smaller bits.

156
00:07:57.110 --> 00:07:59.810
So that we can eventually
narrow down the potential

157
00:07:59.810 --> 00:08:03.120
implications of what we're trying to do
to something that does fit in our heads.

158
00:08:03.120 --> 00:08:06.070
Or if its still something that does fit
in our heads at least something where we

159
00:08:06.070 --> 00:08:08.930
can make a change, and
not the compile tells what to do next.

160
00:08:10.640 --> 00:08:12.920
Our mean tool for
doing this is narrowing types.

161
00:08:12.920 --> 00:08:16.190
If we were to say we're gonna pass model
to everything and how everything will turn

162
00:08:16.190 --> 00:08:20.090
a tool of model and command a message we
really couldn't narrow this down at all.

163
00:08:20.090 --> 00:08:22.980
We would have to look at every function,
everything is a potential corporate for

164
00:08:22.980 --> 00:08:24.060
every bug.

165
00:08:24.060 --> 00:08:27.650
Every change that we make potentially
has an impact on everything else.

166
00:08:27.650 --> 00:08:29.560
But if we narrow the types, we can very,

167
00:08:29.560 --> 00:08:32.940
very quickly rule out potential culprits
and potential things that are impacted by

168
00:08:32.940 --> 00:08:35.270
changes we're gonna make just
by looking at the types.

169
00:08:35.270 --> 00:08:37.070
We don't even have to glance
at the implementation.

170
00:08:38.500 --> 00:08:42.150
We talked about enforcement arguments,
which is a way of sort of,

171
00:08:42.150 --> 00:08:46.000
instead of narrowing types, it's a way of
adding arguments to something in order

172
00:08:46.000 --> 00:08:49.740
to show a dependency that's actually
there in terms of our business logic.

173
00:08:49.740 --> 00:08:53.310
So something, for example like saying, we
don't want to make is possible to render

174
00:08:53.310 --> 00:08:55.810
a follow button or
a favorite button unless you're logged in.

175
00:08:55.810 --> 00:08:57.420
Or even the save button,

176
00:08:57.420 --> 00:09:00.670
because you're only allowed to do
those actions if you are logged in.

177
00:09:00.670 --> 00:09:01.600
By putting them in the message,

178
00:09:01.600 --> 00:09:04.600
we say this is no longer
possible to do in the view.

179
00:09:04.600 --> 00:09:08.470
You can not instantiate one of these
unless you're able to provide an argument

180
00:09:08.470 --> 00:09:09.860
that demonstrates that you are logged in.

181
00:09:09.860 --> 00:09:10.970
We talked about using modules for

182
00:09:10.970 --> 00:09:15.380
modularity which is to say the idea
of growing your models one at a time.

183
00:09:15.380 --> 00:09:17.450
Building them out, building them out,
building them out.

184
00:09:17.450 --> 00:09:20.950
And only splitting them into different
modules when we realize that there is

185
00:09:20.950 --> 00:09:24.730
a subset of them that we could profitably
split out, and make something smaller,

186
00:09:24.730 --> 00:09:28.720
a self contain unit,
usually based around one particular type.

187
00:09:28.720 --> 00:09:30.830
As oppose to saying this
file feels too long,

188
00:09:30.830 --> 00:09:34.590
I'm going to split it, which can cause the
problems of needing to over expose things

189
00:09:34.590 --> 00:09:36.080
in order to make
the dependencies work out.

