WEBVTT

1
00:00:00.260 --> 00:00:02.582
&gt;&gt; Richard Feldman: To
go back to our overview.

2
00:00:02.582 --> 00:00:03.890
We said we were gonna
talk about four things,

3
00:00:03.890 --> 00:00:07.510
so we talked about what fits in our head,
we talked about narrowing types.

4
00:00:07.510 --> 00:00:11.176
And the two other things we talked
about are enforcement arguments and

5
00:00:11.176 --> 00:00:12.865
using modules for modularity.

6
00:00:12.865 --> 00:00:15.394
So let's talk about
enforcement arguments first.

7
00:00:15.394 --> 00:00:19.316
So one of the things we talked about here
was the idea of our arguments to these

8
00:00:19.316 --> 00:00:22.686
functions being used as a way for
us to sort of traverse our code and

9
00:00:22.686 --> 00:00:26.449
understand the dependencies between
different parts of our code base.

10
00:00:26.449 --> 00:00:30.865
So one of the ways we can do that is when
we're debugging or making modifications,

11
00:00:30.865 --> 00:00:34.135
we can actually do that when
we're creating things as well.

12
00:00:34.135 --> 00:00:38.549
When we're setting something up new from
the beginning, we can actually use that as

13
00:00:38.549 --> 00:00:42.219
a way to introduce intentional
dependencies between parts of our code

14
00:00:42.219 --> 00:00:46.288
that are not necessarily related if we
choose the narrowest possible types.

15
00:00:46.288 --> 00:00:48.706
So let me give you an example of this.

16
00:00:48.706 --> 00:00:51.826
The most canonical
example of this is cred.

17
00:00:51.826 --> 00:00:56.769
Now there are a couple of different
messages in here that don't

18
00:00:56.769 --> 00:00:59.669
have any cred associated with them.

19
00:00:59.669 --> 00:01:03.052
In fact there's only one that does,
it's called ClickedSave.

20
00:01:03.052 --> 00:01:06.901
The reason ClickedSave has cred
associated with it is two fold.

21
00:01:06.901 --> 00:01:11.218
Number one,
when we're in the article editor,

22
00:01:11.218 --> 00:01:14.283
we should be logged in as the user.

23
00:01:14.283 --> 00:01:18.235
There is no possible way that we
should be able to get to this page and

24
00:01:18.235 --> 00:01:19.305
not be logged in.

25
00:01:19.305 --> 00:01:24.052
And it's theoretically a possible in
the sense that the compiler doesn't

26
00:01:24.052 --> 00:01:28.871
rule it out, but if we did somehow get
to the new article or the editor article

27
00:01:28.871 --> 00:01:33.793
page without being logged in, something
probably went wrong at some point.

28
00:01:33.793 --> 00:01:38.318
So essentially, the point of having
this argument in here is to say,

29
00:01:38.318 --> 00:01:41.212
when you click save, we need credentials.

30
00:01:41.212 --> 00:01:45.672
Even if on the rest of the page we don't
have the ability to necessarily extract

31
00:01:45.672 --> 00:01:49.740
our credentials, because the session
stores credentials as a maybe.

32
00:01:49.740 --> 00:01:52.824
In the sense that you may or may not
be logged in, depending on what page

33
00:01:52.824 --> 00:01:56.401
you're on, or depending on whether or
not you've logged in for any given page.

34
00:01:56.401 --> 00:02:00.735
But in the particular case of save,
in order to successfully make an HTTP post

35
00:02:00.735 --> 00:02:04.802
that's going to be authenticated on
the server that's gonna succeed,

36
00:02:04.802 --> 00:02:07.020
you have to provide credentials to it.

37
00:02:07.020 --> 00:02:07.903
That's just part of the API.

38
00:02:07.903 --> 00:02:10.757
It's not gonna succeed if you
don't provide those credentials.

39
00:02:10.757 --> 00:02:14.844
So putting it in a ClickedSave means that
we don't have to look Into our model and

40
00:02:14.844 --> 00:02:17.711
try to extract credentials that may or
may not be there,

41
00:02:17.711 --> 00:02:19.909
handle the case with maybe is nothing etc.

42
00:02:19.909 --> 00:02:23.460
If we're in this state we know
we've got credentials and so

43
00:02:23.460 --> 00:02:28.005
we're able to pull them right out
the message and then just immediately call

44
00:02:28.005 --> 00:02:32.712
save which is the function that takes
the credentials and the current status.

45
00:02:32.712 --> 00:02:37.772
And then actually results in firing
off the HTTP request to record

46
00:02:37.772 --> 00:02:42.928
either the new article or
the edit to the existing article, okay.

47
00:02:42.928 --> 00:02:46.123
So that's sort of a convenience that
prevents us from having to unwrap a maybe.

48
00:02:46.123 --> 00:02:49.555
But it does something else
that's pretty important.

49
00:02:49.555 --> 00:02:53.809
The fact that ClickedSave has
cred as one of its arguments,

50
00:02:53.809 --> 00:02:58.661
that variant, means that we're
only capable of rendering a button

51
00:02:58.661 --> 00:03:02.595
that has this in its click
handler if we're logged in.

52
00:03:02.595 --> 00:03:07.429
In other words, we actually can't
render a save button that uses this as

53
00:03:07.429 --> 00:03:10.204
its message unless we're logged in, and

54
00:03:10.204 --> 00:03:14.981
we actually have access to
an instantiated cred value, not possible.

55
00:03:14.981 --> 00:03:17.553
So let's see if we can
take that a step further.

56
00:03:17.553 --> 00:03:20.740
So the article page you
have to be logged in.

57
00:03:20.740 --> 00:03:23.984
What about a page where you
don't have to be logged in?

58
00:03:23.984 --> 00:03:26.520
So a profile page is
a good example of this.

59
00:03:26.520 --> 00:03:27.510
If I'm on the profile page, and

60
00:03:27.510 --> 00:03:32.050
I'm viewing someone's profile I don't
necessarily have to be logged in.

61
00:03:32.050 --> 00:03:34.660
I may be logged in, but
I might also not be.

62
00:03:34.660 --> 00:03:35.920
Oop, that's not the profile page.

63
00:03:38.850 --> 00:03:41.100
I may or may not be logged in.

64
00:03:41.100 --> 00:03:45.473
And some of these operations
only work when I'm logged in.

65
00:03:45.473 --> 00:03:48.622
But they're still part of the message
type, because there's a whole bunch of

66
00:03:48.622 --> 00:03:51.450
stuff going on here that should work
when I'm either logged in or not.

67
00:03:52.570 --> 00:03:55.894
For example, when I'm on someone's
profile page, there's a couple of tabs.

68
00:03:55.894 --> 00:03:59.260
I'm allowed to click the tabs if I am or
not logged in.

69
00:03:59.260 --> 00:04:00.381
Also some errors could happened.

70
00:04:00.381 --> 00:04:03.851
There could be a loading error like if
the person's articles didn't show up,

71
00:04:03.851 --> 00:04:04.808
the server was down.

72
00:04:04.808 --> 00:04:06.033
I can get those.

73
00:04:06.033 --> 00:04:08.918
I can certainly dismiss those errors
whether or not I'm logged in.

74
00:04:08.918 --> 00:04:14.482
But there are other things that
explicitly do require being logged in.

75
00:04:14.482 --> 00:04:17.760
I can't follow someone
unless I'm logged in.

76
00:04:17.760 --> 00:04:18.463
That doesn't make any sense.

77
00:04:18.463 --> 00:04:21.895
I should not be able to render a follow
button without being logged in.

78
00:04:21.895 --> 00:04:26.285
And the fact that we have
cred in this message is

79
00:04:26.285 --> 00:04:32.029
an enforcement argument,
it's an argument to this message

80
00:04:32.029 --> 00:04:37.114
that enforces that we can
only use if we are logged in.

81
00:04:37.114 --> 00:04:42.244
It's not possible for
us to have any kind of button

82
00:04:42.244 --> 00:04:46.650
on this page without passing it some cred.

83
00:04:46.650 --> 00:04:50.707
So based on that, we're now able
to look at these messages and

84
00:04:50.707 --> 00:04:55.624
tell exactly which of these things can
be triggered from user interactions

85
00:04:55.624 --> 00:04:59.155
when you're logged in, and
the ones that can't be.

86
00:04:59.155 --> 00:05:01.456
This is sort of a bridge
between Update and View.

87
00:05:01.456 --> 00:05:05.269
It's connecting them by saying, yeah,
this is something that Update's going to

88
00:05:05.269 --> 00:05:08.328
require if you want to instantiate
one of these things in the View.

89
00:05:08.328 --> 00:05:10.387
Update doesn't need necessarily to use it.

90
00:05:10.387 --> 00:05:14.189
As it happens, it's handy for the case of
we saw previously where it sorts gives you

91
00:05:14.189 --> 00:05:17.845
access to it, you can use it right there
update the passage to the http request.

92
00:05:17.845 --> 00:05:20.880
Because the HTTP request
does actually credentials.

93
00:05:20.880 --> 00:05:25.380
But even if it didn't, this will be
a way for us to enforce, hey I only want

94
00:05:25.380 --> 00:05:29.000
to be able to substantiate one of these
things when you're actually on this page.

95
00:05:29.000 --> 00:05:33.440
And we can take it a step further and,
in fact, we do if you look at the author.

96
00:05:33.440 --> 00:05:37.316
So we talked earlier about how author
has a couple of different enforcement

97
00:05:37.316 --> 00:05:38.742
techniques going on here.

98
00:05:38.742 --> 00:05:42.175
One of which is we have the notion of
FollowedAuthors and UnfollowedAuthors, and

99
00:05:42.175 --> 00:05:45.261
we have this custom type that has these
three possibilities of either I'm

100
00:05:45.261 --> 00:05:48.440
following them,
I'm not following them, or it's me.

101
00:05:48.440 --> 00:05:53.330
But there's another thing that we have
here which is that this is viewer is using

102
00:05:53.330 --> 00:05:59.610
exactly the same technique as what we
saw previously, IsViewer takes cred.

103
00:05:59.610 --> 00:06:02.640
That means that Isviewer can only be
substantiated if you're logged in.

104
00:06:03.710 --> 00:06:08.360
And it takes it even a step further
with the signature of the follow button.

105
00:06:08.360 --> 00:06:09.740
And the unfollow button.

106
00:06:10.770 --> 00:06:11.920
So let's expand these out real quick.

107
00:06:14.100 --> 00:06:17.020
So the follow button accepts
a two message function.

108
00:06:17.020 --> 00:06:20.628
In the next section on reuse, we're going
to get into a little bit of the details of

109
00:06:20.628 --> 00:06:23.872
how these things work so let's not worry
too much about the HTML message in

110
00:06:23.872 --> 00:06:26.049
this sort of technique for
reuse for the moment.

111
00:06:26.049 --> 00:06:28.886
But the relevant part is, all it needs,

112
00:06:28.886 --> 00:06:32.480
is it needs to be able to
pass this button a message.

113
00:06:34.100 --> 00:06:38.320
This function absolutely could
take this as an argument for this.

114
00:06:38.320 --> 00:06:40.240
No problem at all, it would still work.

115
00:06:40.240 --> 00:06:43.310
All it needs is some message that's
just gonna get passed to a handler.

116
00:06:43.310 --> 00:06:44.480
But it doesn't.

117
00:06:44.480 --> 00:06:48.280
Instead what it does is it says,
give me a message that accepts Cred and

118
00:06:48.280 --> 00:06:51.770
UnfollowedAuthor, and then give me
Cred and an UnfollowedAuthor, and

119
00:06:51.770 --> 00:06:53.960
then I will render this thing for you.

120
00:06:53.960 --> 00:06:56.010
It absolutely does not need to.

121
00:06:56.010 --> 00:06:58.980
The whole point of doing
this is to enforce,

122
00:06:58.980 --> 00:07:03.830
you actually have a message that needs
some Cred, that needs an UnfollowedAuthor.

123
00:07:03.830 --> 00:07:08.680
Now, granted, this is a pretty weak
guarantee as it's not a guarantee at all

124
00:07:08.680 --> 00:07:13.100
in the sense that I could absolutely
pass this a function that

125
00:07:14.490 --> 00:07:17.110
it isn't a message variant but

126
00:07:17.110 --> 00:07:21.280
rather is just an anonymous function
that accepts cred and UnfollowedAuthor.

127
00:07:21.280 --> 00:07:23.534
It just completely disregards them.

128
00:07:23.534 --> 00:07:27.291
But at least by putting this in
a type like this, I make it so

129
00:07:27.291 --> 00:07:31.665
that it's quite convenient to pass
it a message that has this type,

130
00:07:31.665 --> 00:07:35.453
a message that has the enforcement
argument in it of cred.

131
00:07:35.453 --> 00:07:38.403
And it's actually sort of less
ergonomic to try and have

132
00:07:38.403 --> 00:07:42.671
a message that doesn't have that, because
then in order to call this function,

133
00:07:42.671 --> 00:07:46.212
I would have to pass some anonymous
function that disregarded it.

134
00:07:46.212 --> 00:07:49.790
So this is a way that I can sort
of propagate this through and

135
00:07:49.790 --> 00:07:54.755
make it so that the happy path, the easy
path, the most ergonomic way to use these

136
00:07:54.755 --> 00:07:59.063
things is to actually create that
link between View and Update to say,

137
00:07:59.063 --> 00:08:02.714
yeah, this only should be
possible if we are logged in, and

138
00:08:02.714 --> 00:08:06.835
otherwise it should not be possible
to render one of these things.

139
00:08:06.835 --> 00:08:11.111
Now worth noting that as previously
discussed with cred as it happens the cred

140
00:08:11.111 --> 00:08:14.687
holds on to a token which then
gets attached to the HTTP request.

141
00:08:14.687 --> 00:08:18.121
But let's say in the future we switched to
a cookie based system where this is not

142
00:08:18.121 --> 00:08:21.608
actually exposed to the application at
all it's just done transparently behind

143
00:08:21.608 --> 00:08:23.830
the scenes through
the browser's cookie system.

144
00:08:24.980 --> 00:08:28.220
Even in that world, I would still
want to have these same types here.

145
00:08:28.220 --> 00:08:32.481
I would want to have this in place just to
enforce the guarantee that I can't render

146
00:08:32.481 --> 00:08:36.520
one of these things when I'm not logged
in, because that would be messed up.

147
00:08:36.520 --> 00:08:40.695
If the user saw that, they would be like
what's going on here, a follow button?

148
00:08:40.695 --> 00:08:42.659
What does following even mean
when you don't have an account or

149
00:08:42.659 --> 00:08:43.410
you're not logged in?

