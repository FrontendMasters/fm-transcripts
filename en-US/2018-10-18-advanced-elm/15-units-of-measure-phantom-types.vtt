WEBVTT

1
00:00:00.430 --> 00:00:02.680
&gt;&gt; Richard Feldman: So
part three, creating constraints.

2
00:00:02.680 --> 00:00:04.120
We'll talk about a few things here.

3
00:00:04.120 --> 00:00:05.890
First, we're gonna talk
about units of measure.

4
00:00:05.890 --> 00:00:08.910
And we're gonna talk
about accessible HTML.

5
00:00:08.910 --> 00:00:10.620
Then the Never type.

6
00:00:10.620 --> 00:00:13.650
And finally, type parameter design.

7
00:00:13.650 --> 00:00:16.880
Okay, so this right here is
the Mars Climate Orbiter.

8
00:00:16.880 --> 00:00:19.470
I should say the ill-fated
Mars Climate Orbiter.

9
00:00:19.470 --> 00:00:20.830
A bad thing happened to this,

10
00:00:20.830 --> 00:00:24.150
because there were two different
teams of programmers working on it.

11
00:00:24.150 --> 00:00:29.050
And one of the teams put some of their
units in imperial units like inches and

12
00:00:29.050 --> 00:00:34.450
feet, and stuff, and the others
used the SI units of centimeters,

13
00:00:34.450 --> 00:00:35.800
and millimeters, and so forth.

14
00:00:35.800 --> 00:00:39.820
And they got their units mixed up, and
so their calculations when they sort of

15
00:00:39.820 --> 00:00:43.839
put them together didn't end up giving
it the right numbers, and so it crashed.

16
00:00:45.430 --> 00:00:46.610
So that's a bummer, and

17
00:00:46.610 --> 00:00:49.500
it would have been nice if we could
have averted that disaster by

18
00:00:50.600 --> 00:00:55.270
having some way to prevent ourselves
from mixing up our units of measure.

19
00:00:55.270 --> 00:00:56.910
So here's a way we can do that using Elm.

20
00:00:58.970 --> 00:01:01.550
The server defining
a type called length and

21
00:01:01.550 --> 00:01:05.760
length has a type parameter called
units or a type variable called units.

22
00:01:05.760 --> 00:01:08.440
And all it holds inside is two things.

23
00:01:08.440 --> 00:01:11.200
One, is it holds on to a float,
which can be actual measurements itself.

24
00:01:11.200 --> 00:01:13.760
And then it's holding into
another guide for the units.

25
00:01:14.940 --> 00:01:19.020
Now, let's separately define type
four centimeters, type for inches.

26
00:01:19.020 --> 00:01:22.420
And just like we had in
the previous example with preview.

27
00:01:22.420 --> 00:01:25.577
We're gonna have these just defined
with a single variant that doesn't hold

28
00:01:25.577 --> 00:01:26.510
on anything.

29
00:01:26.510 --> 00:01:27.720
Since are just place holders.

30
00:01:27.720 --> 00:01:30.210
So they're just there to
describe the units themselves.

31
00:01:30.210 --> 00:01:32.099
They don't actually hold
any information themselves.

32
00:01:33.980 --> 00:01:37.012
So we can write a function that called
centimeters, which is sort of convenience

33
00:01:37.012 --> 00:01:39.730
that takes a float and
gives you back the length of centimeters.

34
00:01:39.730 --> 00:01:40.920
Same thing with inches.

35
00:01:40.920 --> 00:01:43.479
Give limitations of those
just be to take the float,

36
00:01:43.479 --> 00:01:47.259
put it inside this length variant, and
then the hard code centimeters in this

37
00:01:47.259 --> 00:01:49.891
case and inches in the other case for
the units value.

38
00:01:51.500 --> 00:01:53.395
&gt;&gt; Richard Feldman: We could also
write a function called Add,

39
00:01:53.395 --> 00:01:56.990
which we won't get in the implementation
just yet, but it would have this type.

40
00:01:56.990 --> 00:02:00.040
It would say length units to length units.

41
00:02:00.040 --> 00:02:03.730
And so if you gave it some different
things that had the same units.

42
00:02:03.730 --> 00:02:04.630
They would work out.

43
00:02:04.630 --> 00:02:07.410
So I could say it like add 5
centimeters and 12 centimeters.

44
00:02:07.410 --> 00:02:08.360
And that'll work out and

45
00:02:08.360 --> 00:02:13.410
give me some answer that had a length
centimeters, which is what I want.

46
00:02:13.410 --> 00:02:16.990
And I could also do the same thing with
inches, say add inches 5, inches 12 and

47
00:02:16.990 --> 00:02:18.190
that would work out.

48
00:02:18.190 --> 00:02:20.250
But if I tried to do centimeters for
one, inches for

49
00:02:20.250 --> 00:02:24.230
the other, those would not unify and
it would give me a compile error.

50
00:02:25.710 --> 00:02:28.540
Okay, so
here's one way we can implement add.

51
00:02:28.540 --> 00:02:33.200
We can say add and then immediately
destructure this one variant with num1,

52
00:02:33.200 --> 00:02:37.380
which would be the float of the first one,
and then num2, for the second one.

53
00:02:37.380 --> 00:02:40.880
And we can also have units1 and
units2, which we know from the type,

54
00:02:40.880 --> 00:02:42.350
are going to be the same thing.

55
00:02:42.350 --> 00:02:47.201
So we can return length and just by chance
we decided to pick units1 there, but

56
00:02:47.201 --> 00:02:51.995
we could have picked either one,
we could have also said it returns units2.

57
00:02:51.995 --> 00:02:56.179
Another way we could do this is
what's known as a phantom type.

58
00:02:56.179 --> 00:02:58.966
Now that transition was pretty quick,
so let me just go back and forth so

59
00:02:58.966 --> 00:02:59.720
you can see it too.

60
00:02:59.720 --> 00:03:04.650
So this is with the phantom type and
this is without phantom type, without.

61
00:03:04.650 --> 00:03:08.410
So the difference is phantom type version,
we still have units up

62
00:03:08.410 --> 00:03:12.490
here in the type of length, but
we don't actually have it in the variant.

63
00:03:12.490 --> 00:03:17.620
We don't use it, it just sits up there
being constrained, being all constrainty,

64
00:03:17.620 --> 00:03:20.369
but it doesn't actually exist
anywhere in the implementation.

65
00:03:21.470 --> 00:03:24.190
It's something that we're defining
at the type level purely for

66
00:03:24.190 --> 00:03:27.680
the benefit of opting into a constraint
that we're going to enforce

67
00:03:27.680 --> 00:03:29.990
by other means than what's
actually inside there.

68
00:03:31.450 --> 00:03:32.580
So again going back and forth.

69
00:03:32.580 --> 00:03:35.010
So this version actually
holds on to some units.

70
00:03:35.010 --> 00:03:36.460
This version doesn't.

71
00:03:36.460 --> 00:03:39.440
This version has to
pattern match on those.

72
00:03:39.440 --> 00:03:43.330
It has to pull the units out and
this one pulls it out in both places,

73
00:03:43.330 --> 00:03:44.870
whereas the other one doesn't.

74
00:03:44.870 --> 00:03:48.790
And then, of course, the first one ends up
needing to provide that to the variants,

75
00:03:48.790 --> 00:03:51.110
so that we can actually construct
one of these length values.

76
00:03:51.110 --> 00:03:53.220
Which it does, and
it arbitrarily chooses units one,

77
00:03:53.220 --> 00:03:56.180
but it could just have
easily have chosen units2.

78
00:03:56.180 --> 00:03:58.970
Whereas this one doesn't
provide that at all.

79
00:03:58.970 --> 00:04:01.980
So this sorta begs the question,
okay, well in this version,

80
00:04:01.980 --> 00:04:06.970
we can see that it needs to be at least
returning some sort of units here,

81
00:04:06.970 --> 00:04:10.040
either units1 or units2.

82
00:04:10.040 --> 00:04:12.082
But this one doesn't
need to be doing that.

83
00:04:12.082 --> 00:04:16.111
So when it says that it takes
length units and length units and

84
00:04:16.111 --> 00:04:18.890
returns length units, why is that true?

85
00:04:18.890 --> 00:04:23.495
I mean, is that just some sort of made up
nonsense like really, couldn't we write

86
00:04:23.495 --> 00:04:27.460
just as easily write this one,
where it claims to take ab and return c?

87
00:04:27.460 --> 00:04:29.840
Yeah, we could.

88
00:04:29.840 --> 00:04:33.252
So in actuality,
there is no constraint on length,

89
00:04:33.252 --> 00:04:37.480
like in a to the way that we
designed this implementation.

90
00:04:37.480 --> 00:04:41.470
The whole point of the phantom type,
is that it's a constraint that is sort of

91
00:04:41.470 --> 00:04:45.710
free floating, does not exist by default,
doesn't do anything by default.

92
00:04:45.710 --> 00:04:50.326
But when you write type annotations in
Elm, you have the choice of choosing to

93
00:04:50.326 --> 00:04:54.031
make them more constrained than
they have to be if you want to.

94
00:04:54.031 --> 00:04:56.230
And the compiler will respect that.

95
00:04:56.230 --> 00:04:58.760
So most of the time in Elm, when you
write a type annotation, it's just for

96
00:04:58.760 --> 00:04:59.900
documentation.

97
00:04:59.900 --> 00:05:04.870
And you're gonna put down pretty close to
exactly what the compiler would infer.

98
00:05:04.870 --> 00:05:08.880
However, there are some examples like this
where it might make sense for you to say,

99
00:05:08.880 --> 00:05:13.590
you know what, I know that technically, I
could have length of one thing and length

100
00:05:13.590 --> 00:05:17.110
of another thing as the two arguments
in return, a length of a third thing.

101
00:05:17.110 --> 00:05:19.080
And I don't really care what they are,
doesn't really matter.

102
00:05:19.080 --> 00:05:21.680
I'm just gonna ignore them anyway so,
whatever.

103
00:05:21.680 --> 00:05:23.350
Just give me anything,
give me centimeters,

104
00:05:23.350 --> 00:05:26.960
millimeters, feet, uers, I don't care.

105
00:05:26.960 --> 00:05:30.550
I doesn't matter because I'm not
gonna use those values anyway.

106
00:05:30.550 --> 00:05:33.580
You could do that but then you would
be defeating the entire purpose of this

107
00:05:33.580 --> 00:05:38.830
design, which is that the whole point here
is that we want them to be constrained.

108
00:05:38.830 --> 00:05:42.150
We want to enforce that they
are the same in all three cases, or

109
00:05:42.150 --> 00:05:44.490
rather the case of the two arguments.

110
00:05:44.490 --> 00:05:47.740
Because otherwise it's entirely possible
that you will give centimeters on one

111
00:05:47.740 --> 00:05:50.100
side and inches on the other side.

112
00:05:50.100 --> 00:05:53.500
And there's still compile
they just will result in it

113
00:05:53.500 --> 00:05:55.000
unfortunately crushed miles pro.

114
00:05:57.250 --> 00:06:01.360
So the trade off here is that here we
have a little bit more enforcement.

115
00:06:01.360 --> 00:06:05.260
Its worth noting though that although
we have a little bit more enforcement,

116
00:06:05.260 --> 00:06:09.410
we still have to constrain this
add type annotation artificially.

117
00:06:09.410 --> 00:06:12.690
So notice that we chose
arbitrarily to return units1 here.

118
00:06:12.690 --> 00:06:14.820
Because of that, really, in actuality,

119
00:06:14.820 --> 00:06:19.500
we could change the length
of this other one to say,

120
00:06:19.500 --> 00:06:24.090
length units2, or length b or length x,
and then return the length units.

121
00:06:24.090 --> 00:06:27.310
Really, we are still artificially
constraining this one on purpose, and

122
00:06:27.310 --> 00:06:29.630
opting in to saying actually,
no, I promised,

123
00:06:29.630 --> 00:06:31.910
those second ones need to be there.

124
00:06:31.910 --> 00:06:36.900
And this is sort of a natural consequence
of having types that we don't really

125
00:06:36.900 --> 00:06:41.540
end up using in our actual calculations,
or anything like that.

126
00:06:41.540 --> 00:06:45.200
So this implementation at least requires
that the return value is going to be

127
00:06:45.200 --> 00:06:47.780
one of the two that we gave it, but

128
00:06:47.780 --> 00:06:51.160
it's still not sort of innately as
constrained as we've made it here.

129
00:06:51.160 --> 00:06:53.010
In either implementation,
the phantom type, or

130
00:06:53.010 --> 00:06:56.800
the non-phantom type version, we have to
sort of opt into constraining it more.

131
00:06:56.800 --> 00:07:01.230
If we want it to actually do its
job of preventing the type mismatch

132
00:07:01.230 --> 00:07:04.850
between the inches,
the imperial units and the SI units.

133
00:07:05.910 --> 00:07:09.700
Okay, so keeping on that mind, what
are the tradeoffs between the two like?

134
00:07:09.700 --> 00:07:11.000
Why would I choose one or the other?

135
00:07:11.000 --> 00:07:14.930
I mean I think the value of having some
sort of enforcement is pretty clear,

136
00:07:14.930 --> 00:07:17.640
we can prevent ourselves
from making the thing crash

137
00:07:17.640 --> 00:07:19.990
due to mixed up units of measure.

138
00:07:19.990 --> 00:07:24.420
However, it's less clear in Italy what the
tradeoffs are or why you might choose to

139
00:07:24.420 --> 00:07:27.350
use the phantom type versus actually
holding on to the units inside the value.

140
00:07:27.350 --> 00:07:29.050
And it's honestly,

141
00:07:29.050 --> 00:07:32.490
the tradeoff really comes down to
the degree of flexibility that the phantom

142
00:07:32.490 --> 00:07:36.310
types give you and also there is a little
bit of a performance aspect to it.

143
00:07:37.310 --> 00:07:42.020
So in Elm, when you have a custom
type with a single variant,

144
00:07:42.020 --> 00:07:45.270
and that variant holds onto one value.

145
00:07:46.610 --> 00:07:49.320
That's sort of a trivial type,
you look at this and you say yeah,

146
00:07:49.320 --> 00:07:51.930
this is just a wrapper
around this one type.

147
00:07:51.930 --> 00:07:54.070
Do we really need that
wrapper at run time?

148
00:07:54.070 --> 00:07:55.810
And the answer is, no we don't.

149
00:07:55.810 --> 00:07:58.770
And so actually when Elm encounters
this specific situation,

150
00:07:58.770 --> 00:08:02.670
a custom type with one variant
that holds on the one value.

151
00:08:02.670 --> 00:08:05.540
It does what's called unboxing, when
you run it, it was dash dash optimize.

152
00:08:05.540 --> 00:08:10.240
Which is to say, this code right here
at compiles sometime is a custom type.

153
00:08:10.240 --> 00:08:12.260
But a run type is just a float,

154
00:08:12.260 --> 00:08:16.320
like it's as if we just said
alias Length = Float at run time.

155
00:08:16.320 --> 00:08:20.511
Now compile is not gonna behave exactly
like a fully box wrapped up custom type

156
00:08:20.511 --> 00:08:22.961
with all the trimmings,
but a compile time,

157
00:08:22.961 --> 00:08:25.879
that's a performance
optimization I was able to do.

158
00:08:25.879 --> 00:08:28.709
Because it says well we'll just substitute
it in there and we already checked to

159
00:08:28.709 --> 00:08:31.214
make sure that it's gonna be used
consistently across the code base.

160
00:08:31.214 --> 00:08:34.352
So it's fine to just unbox it and
not bother putting that wrapper around it

161
00:08:34.352 --> 00:08:37.200
since the wrapper was only for
the benefit of the compiler anyway.

162
00:08:39.180 --> 00:08:40.869
However, it can't do
that with this version,

163
00:08:42.000 --> 00:08:43.520
because this version is
holding on to two things.

164
00:08:43.520 --> 00:08:47.210
If we were to substitute it with float,
then this other piece of information which

165
00:08:47.210 --> 00:08:50.280
theoretically we might be using
at runtime, would get discarded,

166
00:08:50.280 --> 00:08:52.890
we'd no longer be,
it wouldn't work anymore.

167
00:08:52.890 --> 00:08:55.680
Now, as it happens, we know that we're
not using this thing at runtime, but

168
00:08:55.680 --> 00:09:00.230
the compiler doesn't really have any
way of guaranteeing that ahead of time.

169
00:09:00.230 --> 00:09:00.880
I guess, theoretically,

170
00:09:00.880 --> 00:09:03.650
it might be able to figure out someday but
there's the running joke.

171
00:09:03.650 --> 00:09:07.770
With a sufficiently smart compiler you can
do just about anything, but of course,

172
00:09:07.770 --> 00:09:09.730
compilers don't just build themselves.

173
00:09:11.920 --> 00:09:14.710
So there is a definite
performance advantage here and

174
00:09:14.710 --> 00:09:17.220
the flexibility is both a pro and a con.

175
00:09:17.220 --> 00:09:21.050
On the one hand, the flexibility
to be able to write essentially

176
00:09:21.050 --> 00:09:23.160
whatever type of variables
you want in here.

177
00:09:23.160 --> 00:09:24.380
To make them as constrained or

178
00:09:24.380 --> 00:09:27.560
unconstrained as you like,
it's sort of a blessing and a curse.

179
00:09:27.560 --> 00:09:29.060
On one hand,
it's a blessing in the sense that hey,

180
00:09:29.060 --> 00:09:32.340
you can be as flexible as you want,
maybe we want this.

181
00:09:32.340 --> 00:09:36.561
On the other hand, it's some sets of foot
gun, I can very easily shoot myself in

182
00:09:36.561 --> 00:09:39.711
the foot with this and make it so
that I have defined a type for

183
00:09:39.711 --> 00:09:44.273
add, which completely defeats the entire
purpose of my going down this road anyway.

184
00:09:44.273 --> 00:09:47.085
That makes it so that it's perfectly
possible to mix these units up, and

185
00:09:47.085 --> 00:09:48.720
I won't get any compile time errors.

186
00:09:48.720 --> 00:09:51.170
So, that flexibility is both a pro and
a con.

187
00:09:52.630 --> 00:09:57.370
So essentially the tradeoff between these
two options here is, the phantom type

188
00:09:57.370 --> 00:10:01.420
version where we only hold onto a float
and we do not hold onto the units.

189
00:10:01.420 --> 00:10:05.940
We only have the units as part of the type
variable so that we can constrain it if we

190
00:10:05.940 --> 00:10:09.560
want to, gives us more performance but
fewer guaranties.

191
00:10:09.560 --> 00:10:11.550
It's a little bit easier to
shoot ourselves in the foot.

192
00:10:11.550 --> 00:10:16.540
The other version doesn't quite has good
performance but it does have a little bit

193
00:10:16.540 --> 00:10:21.730
more in the way of guarantees because this
is actually part of the implementation.

194
00:10:21.730 --> 00:10:24.760
Having said that, the performance
difference here is probably not going to

195
00:10:24.760 --> 00:10:27.320
really matter in practice for
almost all use cases.

196
00:10:27.320 --> 00:10:31.238
So I would definitely benchmark before
worrying about this from a performance

197
00:10:31.238 --> 00:10:32.020
perspective.

