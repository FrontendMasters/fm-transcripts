WEBVTT

1
00:00:00.000 --> 00:00:01.575
&gt;&gt; Speaker 1: So if you were to,

2
00:00:01.575 --> 00:00:07.350
this seems like it's maybe just
a more accurate and concise way,

3
00:00:07.350 --> 00:00:12.915
as opposed to creating a type alias for
both Preview Article and

4
00:00:12.915 --> 00:00:18.079
Full Article,
where you would have to repeat stuff like.

5
00:00:18.079 --> 00:00:20.905
You know, you'd have the same
representation in two different

6
00:00:20.905 --> 00:00:21.594
type aliases.

7
00:00:21.594 --> 00:00:22.370
&gt;&gt; Richard Feldman: Yeah.

8
00:00:22.370 --> 00:00:23.611
Right.

9
00:00:23.611 --> 00:00:25.865
So, right, so another way you could do
this is you could make two completely

10
00:00:25.865 --> 00:00:27.642
different types,
you could [INAUDIBLE] pseudotype alias.

11
00:00:27.642 --> 00:00:31.227
You could just say, I'm gonna have type
four article, type preview article and

12
00:00:31.227 --> 00:00:32.922
just keep them completely separate.

13
00:00:32.922 --> 00:00:36.833
The assumption here, is that we have some
significant chunk of this that we want to

14
00:00:36.833 --> 00:00:39.960
reuse in both contacts because
it's always going to be the same.

15
00:00:39.960 --> 00:00:44.040
And in particular, if you're dealing with
decoders on these things, you know that

16
00:00:44.040 --> 00:00:47.888
if one changes the other one is gonna
change,because the server format is gonna

17
00:00:47.888 --> 00:00:51.866
change, like you know the server is going
to be maintained the same between both.

18
00:00:51.866 --> 00:00:56.794
But it is a good point to make that quite
often, and we'll come back to this in

19
00:00:56.794 --> 00:01:01.125
a future section, things look similar but
are not quite the same.

20
00:01:01.125 --> 00:01:05.145
And actually, it can be a better choice
to actually duplicate them and make them

21
00:01:05.145 --> 00:01:09.286
completely separate, than to try and
reuse one it doesn't actually make sense.

22
00:01:09.286 --> 00:01:11.978
The really important point
to make here is that.

23
00:01:11.978 --> 00:01:14.690
Any situation where you
find yourself saying,

24
00:01:14.690 --> 00:01:17.468
I'm going to use an open record for
parameters or

25
00:01:17.468 --> 00:01:22.301
I'm going to use an open record for data
modeling, there is always an alternative.

26
00:01:22.301 --> 00:01:26.501
Like if you're doing for parameters, you
can just take a closed record if you wanna

27
00:01:26.501 --> 00:01:30.461
give a name or arguments or you could use
an opaque type or even just a custom type

28
00:01:30.461 --> 00:01:34.129
to maybe disambiguate in a different
way and that will definitely work.

29
00:01:34.129 --> 00:01:37.825
Also, if you're using for data modelling,
you could also use it this way.

30
00:01:37.825 --> 00:01:41.394
Just use a custom type instead and
that will definitely work as well.

31
00:01:41.394 --> 00:01:45.049
And in fact, this is more flexible,
using it with an extra type parameter.

32
00:01:45.049 --> 00:01:48.656
Gives you the flexibility to make extra
info have whatever type you want,

33
00:01:48.656 --> 00:01:49.594
not just a record.

34
00:01:49.594 --> 00:01:53.231
The reason I mention this is that,
I think that the future of open records as

35
00:01:53.231 --> 00:01:56.294
a concept nill [ph] has been
recently called into question,

36
00:01:56.294 --> 00:01:59.529
because it looks like there is
a downside when it comes to compiling

37
00:01:59.529 --> 00:02:03.681
due web assembly, in terms of how well we
can optimize, what we're compiling too.

38
00:02:03.681 --> 00:02:07.470
So it'd be really great if we knew that
every record had a consistent shape.

39
00:02:07.470 --> 00:02:11.271
And we could say, I'm gonna lay out in
memory exactly where these bits are, and

40
00:02:11.271 --> 00:02:14.080
I can say in field access means
go to this offset in memory.

41
00:02:14.080 --> 00:02:17.279
Field access for
this means goes to this offset in memory.

42
00:02:17.279 --> 00:02:18.428
If you have open records,

43
00:02:18.428 --> 00:02:21.824
then potentially a function that takes
an open record can no longer compile to

44
00:02:21.824 --> 00:02:24.920
just one implementation that says
always go to this offset in memory.

45
00:02:24.920 --> 00:02:27.090
Because depending on
what records it accepts,

46
00:02:27.090 --> 00:02:30.035
it could potentially need to go
to different offsets in memory.

47
00:02:30.035 --> 00:02:32.030
So that's the downside that means that,

48
00:02:32.030 --> 00:02:35.629
maybe this isn't actually the right
solution for the Elms record syntax.

49
00:02:35.629 --> 00:02:38.825
And maybe there is some other
way that it ought to work and

50
00:02:38.825 --> 00:02:43.596
maybe remove open records at least as they
exist today as a concept in the language.

51
00:02:43.596 --> 00:02:45.665
Now I'm not saying that will or
will not happen,

52
00:02:45.665 --> 00:02:48.093
nobody really knows that
that's going to happen or not.

53
00:02:48.093 --> 00:02:51.790
But, I wanna raise i as a red flag to
say like, these unintended uses of open

54
00:02:51.790 --> 00:02:55.078
records are not guaranteed to be
supportive long term and in fact,

55
00:02:55.078 --> 00:02:58.037
there's already at least one
reason why they might not be.

56
00:02:58.037 --> 00:03:00.646
So I'd encourage you,
when writing your code, to reach for

57
00:03:00.646 --> 00:03:01.832
these other things first.

58
00:03:01.832 --> 00:03:03.481
There's always an alternative.

59
00:03:03.481 --> 00:03:07.394
Any time you're using an open record for
something and I would tend to prefer those

60
00:03:07.394 --> 00:03:11.361
things, because there future is a lot more
secure than the future of open records,

61
00:03:11.361 --> 00:03:13.819
at least the way they're
currently implemented.

62
00:03:13.819 --> 00:03:19.619
Okay, so to recap, we talked sort off
talking about constraint unification and

63
00:03:19.619 --> 00:03:24.139
how Elm's type checker goes from
going from one type to another

64
00:03:24.139 --> 00:03:29.023
possibly more specific type and
possibly through a type mismatch.

65
00:03:29.023 --> 00:03:32.089
We talked about differences
between open and closed records.

66
00:03:32.089 --> 00:03:34.807
We talked about the reason
that open records exists.

67
00:03:34.807 --> 00:03:38.388
And finally, we talked about how to make
extensible custom types as alternative

68
00:03:38.388 --> 00:03:40.453
data modeling solutions
to using open records

