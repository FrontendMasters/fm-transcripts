WEBVTT

1
00:00:00.000 --> 00:00:02.331
&gt;&gt; Richard Feldman: We'll
start with the author decoder.

2
00:00:02.331 --> 00:00:07.155
We're going to use this profile and
this user name to decode an author.

3
00:00:07.155 --> 00:00:09.068
Hint decoderHelp will help here but

4
00:00:09.068 --> 00:00:12.010
slightly altering it's type
may make things easier.

5
00:00:12.010 --> 00:00:13.909
Let's take a little bit
of decoderHelp here.

6
00:00:13.909 --> 00:00:18.035
So decoderHelp takes maybe
cred takes the profile, and

7
00:00:18.035 --> 00:00:23.409
it takes the user name, and it then
proceeds to use them to decode stuff.

8
00:00:23.409 --> 00:00:26.784
So if we have credentials, if we,
sorry, if we don’t have credentials,

9
00:00:26.784 --> 00:00:30.332
then it says okay, if I’m logged out
then I’m definitely not following you.

10
00:00:30.332 --> 00:00:32.854
So this is where we get
the unfollowed author.

11
00:00:32.854 --> 00:00:37.313
If we are logged in,
then we might be following you.

12
00:00:37.313 --> 00:00:40.854
But we might also be this is me.

13
00:00:40.854 --> 00:00:43.553
So this is sort of that three way split
that we talked about earlier with

14
00:00:43.553 --> 00:00:44.066
the author.

15
00:00:44.066 --> 00:00:47.990
Where it's either I'm following this
person, I'm not following this person, or

16
00:00:47.990 --> 00:00:48.882
this person is me.

17
00:00:48.882 --> 00:00:51.888
So we're starting off by detecting,
okay, is this me?

18
00:00:51.888 --> 00:00:56.822
If so, then great, then we will succeed
with IsView, IsViewer, and otherwise,

19
00:00:56.822 --> 00:01:01.550
we will be like, okay, I'm gonna use
the non-viewer decoder, which is another

20
00:01:01.550 --> 00:01:05.934
helper that essentially checks to see
whether or not we are following them,

21
00:01:05.934 --> 00:01:09.869
in-according to the json and
then succeeds or fails accordingly.

22
00:01:09.869 --> 00:01:11.972
Worth noting that this
is actually optional.

23
00:01:11.972 --> 00:01:15.227
So, if the following is not there, then we
say okay, if there's no info on whether

24
00:01:15.227 --> 00:01:18.171
we're following this person,
that means that we are not following them.

25
00:01:18.171 --> 00:01:22.279
And depending on how this thing is being
used, it's used in a couple different

26
00:01:22.279 --> 00:01:26.401
places, that may or may not be present
on the JSON object we're getting back.

27
00:01:26.401 --> 00:01:30.414
Worth noting, that because of the way that
this is doing these things it actually

28
00:01:30.414 --> 00:01:34.724
doesn't even bother decoding the following
field unless it's already checked to see

29
00:01:34.724 --> 00:01:38.679
if we're logged out in which case no
need doesn't matter we're definitely not

30
00:01:38.679 --> 00:01:42.662
following them and we've also checked
to see whether we're the viewer or not.

31
00:01:42.662 --> 00:01:43.545
If we are the viewer,

32
00:01:43.545 --> 00:01:46.361
then again it doesn't matter we
don't need to bother decoding it.

33
00:01:46.361 --> 00:01:47.300
Okay.

34
00:01:47.300 --> 00:01:50.119
So that's what decoderHelp does.

35
00:01:50.119 --> 00:01:52.671
Now what's this bit about
this would be useful, but

36
00:01:52.671 --> 00:01:54.303
with a slightly different type.

37
00:01:54.303 --> 00:01:58.793
Well, what are we going to decode into
when we want to make this author.

38
00:01:58.793 --> 00:02:01.506
I mean, decoderHelp will
ultimately give us an author.

39
00:02:01.506 --> 00:02:06.654
But it's not quite what we want because,
essentially at this point we've

40
00:02:06.654 --> 00:02:12.222
got custom Profile.decoder And they've
also got required user name decoder.

41
00:02:12.222 --> 00:02:16.990
So let's say that I were to put
decoderHelp right into here.

42
00:02:16.990 --> 00:02:19.941
Well, that's clearly not going to work
because the first argument is it needs

43
00:02:19.941 --> 00:02:22.911
to take those credentials so that it can
do the logic to branch on these things.

44
00:02:22.911 --> 00:02:26.050
Let's say that we took it
a little bit further and we said,

45
00:02:26.050 --> 00:02:30.677
decoderHelp may be cred
&gt;&gt; Richard Feldman: Let's run L make

46
00:02:30.677 --> 00:02:31.713
on this.

47
00:02:33.401 --> 00:02:36.307
&gt;&gt; Richard Feldman: Actually
let's just run L make on author.

48
00:02:38.103 --> 00:02:40.558
&gt;&gt; Richard Feldman: So
we don't see any of the other mistakes.

49
00:02:40.558 --> 00:02:44.625
Okay, something is off with
the body of the decoded definition.

50
00:02:44.625 --> 00:02:47.024
The body is decoder of decoder author, but

51
00:02:47.024 --> 00:02:50.966
the type of annotation that decoder
says it should be decoder author.

52
00:02:50.966 --> 00:02:52.231
What's going off that?

53
00:02:52.231 --> 00:02:53.721
Well it's interesting,

54
00:02:53.721 --> 00:02:58.063
the problem here is that what we've
said here is I'm giving this a decoder.

55
00:02:58.063 --> 00:03:01.146
But what it wants is it actually
wants some sort of other thing,

56
00:03:01.146 --> 00:03:04.362
like it wants like something
that's actually going to resolve.

57
00:03:04.362 --> 00:03:07.749
It wants, not a decoder author,
but rather an actual author.

58
00:03:07.749 --> 00:03:11.326
That's not gonna really work out for
us because what we have here is we have

59
00:03:11.326 --> 00:03:14.168
potentially success, and
we have potentially failure.

60
00:03:14.168 --> 00:03:18.418
We have decode dot sixteen in some
branches and failure in other branches.

61
00:03:18.418 --> 00:03:22.587
Mm, if only we had a way to take a decoder
and then bridge it into either success or

62
00:03:22.587 --> 00:03:26.031
failure, depending on what happened,
which of course, we do.

63
00:03:26.031 --> 00:03:27.656
We have a decode dot M den.

64
00:03:27.656 --> 00:03:32.848
So let's hold off on figuring out what's
gonna go here for a second and say,

65
00:03:32.848 --> 00:03:38.124
well ultimately, after we successfully
decode the profile and the user name

66
00:03:38.124 --> 00:03:43.257
Let's say that we want to continue
on with Decode.andThen decoderHelp.

67
00:03:43.257 --> 00:03:44.038
Okay.

68
00:03:44.038 --> 00:03:48.064
So if we were able to do that, or,
sorry, decoderHelp passing maybeCred.

69
00:03:48.064 --> 00:03:51.231
If we were able to do that,
then we'd be all set.

70
00:03:51.231 --> 00:03:54.818
We would be able to successfully
continue the decoding process and

71
00:03:54.818 --> 00:03:58.341
it could potentially fail if
the decoding succeeded or, sorry,

72
00:03:58.341 --> 00:04:01.557
if the decoding failed somewhere
later on in the pipeline.

73
00:04:01.557 --> 00:04:04.076
So how would we possibly
go about doing that?

74
00:04:04.076 --> 00:04:07.898
Well, decoderHelp takes one argument,
which is maybeCred, and

75
00:04:07.898 --> 00:04:09.887
then it takes two more arguments.

76
00:04:09.887 --> 00:04:11.213
But it doesn't have to.

77
00:04:11.213 --> 00:04:17.357
I mean, Decode.succeed could be,
for example, Tuple.pair.

78
00:04:17.357 --> 00:04:19.126
And then inside decoderHelp,

79
00:04:19.126 --> 00:04:22.943
we could say I actually just want
these two to be stapled together.

80
00:04:22.943 --> 00:04:26.017
And then, I can destructure
them in line in the arguments.

81
00:04:26.017 --> 00:04:29.307
And now, we've got something that's
actually quite convenient to work with.

82
00:04:29.307 --> 00:04:33.195
So we start by succeeding it to tuple.pair
which is going to just staple these two

83
00:04:33.195 --> 00:04:33.778
together.

84
00:04:33.778 --> 00:04:37.705
It'll give us a profile as well as
a username inside of a tuple and

85
00:04:37.705 --> 00:04:42.146
then it's going to call Decode.andThen
passing that tuple as the other

86
00:04:42.146 --> 00:04:43.845
argument to decoderHelp.

87
00:04:43.845 --> 00:04:48.798
At which point we destructure it,
move along, and Bob's your uncle.

88
00:04:48.798 --> 00:04:52.387
So, let's take a look at what that does.

89
00:04:52.387 --> 00:04:53.823
It compiles.

90
00:04:53.823 --> 00:04:58.294
So we've downloaded successfully decoded
the profile, decoded the user name, and

91
00:04:58.294 --> 00:05:02.577
then gone on to decode the rest of the
author, potentially failing along the way,

92
00:05:02.577 --> 00:05:06.013
depending on what happens in
these various different branches.

93
00:05:06.013 --> 00:05:08.879
So that's the first of two,
but we had another to do,

94
00:05:08.879 --> 00:05:10.739
which was over here in timestamp.

95
00:05:10.739 --> 00:05:13.154
So this is our ISO-8601 decoder, and

96
00:05:13.154 --> 00:05:16.649
this one we're going to use
Decode.andThen more directly.

97
00:05:16.649 --> 00:05:20.270
So it says, use the following function
to decode this Time.Posix value.

98
00:05:20.270 --> 00:05:25.265
Iso8601.toTime That takes a string,
followed by a result, and

99
00:05:25.265 --> 00:05:28.240
we don't care about the error type here.

100
00:05:28.240 --> 00:05:32.746
So, we're just gonna ignore that, and
then a time.pause for the success value.

101
00:05:32.746 --> 00:05:33.623
All right.

102
00:05:33.623 --> 00:05:36.964
So, the way I like to start off
by writing things like this is,

103
00:05:36.964 --> 00:05:40.005
just focus on what's the first
thing we want to decode.

104
00:05:40.005 --> 00:05:41.221
In this case that's a string.

105
00:05:41.221 --> 00:05:44.477
So, I say decode.string and
once we've got that,

106
00:05:44.477 --> 00:05:47.734
then we're just gonna pipe
it to Decode.andThen.

107
00:05:47.734 --> 00:05:51.167
And I'm just gonna call this decoderHelp.

108
00:05:51.167 --> 00:05:52.698
So what is decoderHelp gonna do?

109
00:05:52.698 --> 00:05:57.472
Well, and, then always takes a function
which starts by taking this incessantly

110
00:05:57.472 --> 00:06:00.876
decoded value, which in this
case is going to be a string.

111
00:06:00.876 --> 00:06:03.902
And then returns a decoder
of the desired value.

112
00:06:03.902 --> 00:06:07.837
We'll just say a Time.Posix.

113
00:06:07.837 --> 00:06:12.709
Okay, now that we've got the types written
out, we know that we're gonna get a string

114
00:06:12.709 --> 00:06:16.447
and we want to use this somehow to
either return a success decoder or

115
00:06:16.447 --> 00:06:17.606
a failure decoder.

116
00:06:17.606 --> 00:06:21.402
So we're gonna call
Iso8601.toTime on the string.

117
00:06:21.402 --> 00:06:25.530
That's gonna give us back as we can
now see here, a result so we're

118
00:06:25.530 --> 00:06:30.503
gonna do a case on that if the result
was successful, then we've got sometime.

119
00:06:30.503 --> 00:06:36.374
And we will decode .succeed with .time.

120
00:06:36.374 --> 00:06:42.299
And if it failed,
we're gonna ignore the error message and

121
00:06:42.299 --> 00:06:45.153
say, NO IT DIDN'T WORK.

122
00:06:45.153 --> 00:06:49.403
All right, let's see if that compiles.

123
00:06:49.403 --> 00:06:49.988
You know what?

124
00:06:49.988 --> 00:06:52.765
I think I can just go back to
compiling main now because, author,

125
00:06:52.765 --> 00:06:53.889
we already know, works.

126
00:06:53.889 --> 00:06:55.858
Hey, success, it compiles.

