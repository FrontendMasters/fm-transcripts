WEBVTT

1
00:00:00.220 --> 00:00:03.040
&gt;&gt; Richard Feldman: Now let's talk
about authentication and JavaScript.

2
00:00:03.040 --> 00:00:04.780
And for that, we're gonna go to the code.

3
00:00:04.780 --> 00:00:09.450
All right,
&gt;&gt; Richard Feldman: So

4
00:00:09.450 --> 00:00:14.310
we've talked about a couple of
different sources of caching.

5
00:00:14.310 --> 00:00:18.450
Another really common source of caching is
authentication, so we go to the server.

6
00:00:18.450 --> 00:00:21.740
When you log in, you type in user name and
password, the server says,

7
00:00:21.740 --> 00:00:23.870
great, I accept that
authentication information.

8
00:00:23.870 --> 00:00:27.690
I will give you back some sort of token
that will identify you from now on.

9
00:00:27.690 --> 00:00:28.990
We want to cash that.

10
00:00:28.990 --> 00:00:31.810
It's very important that we cash that
because if we did not, once again,

11
00:00:31.810 --> 00:00:34.460
every single time the user wanted to do
anything that required authentication,

12
00:00:34.460 --> 00:00:36.760
they would have to type in their
username and password again.

13
00:00:36.760 --> 00:00:38.690
That would be a miserable user experience.

14
00:00:38.690 --> 00:00:41.930
Much, much, better to actually
cache that token locally, so

15
00:00:41.930 --> 00:00:43.940
that we can just send it back
to the server and say yep,

16
00:00:43.940 --> 00:00:47.920
I still am who I said I was earlier when
I actually typed in those credentials.

17
00:00:47.920 --> 00:00:49.930
So, as we've seen
elsewhere in the workshop.

18
00:00:49.930 --> 00:00:52.480
The way that we do this
is with this cred value.

19
00:00:52.480 --> 00:00:57.850
This is the thing that we sort of cache
in our model as the source of truth for

20
00:00:57.850 --> 00:00:58.760
where those credentials live.

21
00:00:59.780 --> 00:01:05.880
But, this is actually not a cache of
the credentials that are in the database.

22
00:01:05.880 --> 00:01:08.650
The database can have a log of
which sessions are allowed,

23
00:01:08.650 --> 00:01:11.400
which tokens are valid, and
it can invalidate those at any time.

24
00:01:11.400 --> 00:01:12.770
They can say, you know what?

25
00:01:12.770 --> 00:01:14.140
This user's account was compromised.

26
00:01:14.140 --> 00:01:15.550
We got a support email from them.

27
00:01:15.550 --> 00:01:17.430
We're deactivating all their tokens and
clearing them out.

28
00:01:17.430 --> 00:01:18.549
And now, none of them work anymore.

29
00:01:19.970 --> 00:01:23.650
And that token is not necessarily
the ones that are on model,

30
00:01:23.650 --> 00:01:26.540
the tokens that are on our models
actually cache of another cache

31
00:01:26.540 --> 00:01:28.200
which is the one that's
resisted on the browser.

32
00:01:29.650 --> 00:01:31.890
So the way that this works in
this particular application,

33
00:01:31.890 --> 00:01:33.620
there's lots of different
ways to authentication but

34
00:01:33.620 --> 00:01:37.000
the way that we do it is we
store it in local storage.

35
00:01:37.000 --> 00:01:38.924
And the code for that looks like this.

36
00:01:38.924 --> 00:01:44.101
So we have inside index.html,
we have Elm.Main.init.

37
00:01:44.101 --> 00:01:47.090
And we pass in flags of
localStorage.session.

38
00:01:47.090 --> 00:01:49.020
We just store it directly in localStorage.

39
00:01:49.020 --> 00:01:51.000
A lot of different ways you could do this.

40
00:01:51.000 --> 00:01:53.860
If you do it with cookies, you don't
actually need to write any JavaScript or

41
00:01:53.860 --> 00:01:56.630
any other code to persist this stuff.

42
00:01:56.630 --> 00:02:02.470
And then if we listen to
app.ports.storeSession, whatever

43
00:02:02.470 --> 00:02:06.190
Elm sends from a port, like after the user
logs in it says, hey, we got a session,

44
00:02:06.190 --> 00:02:10.690
then we put that into local storage, then
we'll come back to this line in a second.

45
00:02:10.690 --> 00:02:13.940
And we also have a separate one
that adds an event listener for

46
00:02:13.940 --> 00:02:15.940
whenever a storage event happens.

47
00:02:15.940 --> 00:02:17.510
That is to say,

48
00:02:17.510 --> 00:02:23.010
this fires when a different tab modifies
local storage for the same domain.

49
00:02:23.010 --> 00:02:25.730
Then we check to see if this
was a change to the session.

50
00:02:25.730 --> 00:02:28.960
If so, then we wanna send this into
Elm and say hey, one of these or

51
00:02:28.960 --> 00:02:30.750
your tabs, did something with the session.

52
00:02:30.750 --> 00:02:32.590
And you ought to know about that.

53
00:02:32.590 --> 00:02:34.870
So the classic example,
this is logging out.

54
00:02:34.870 --> 00:02:39.020
So let's say I have three tabs open and
I log in on all three of them.

55
00:02:39.020 --> 00:02:42.990
And on one of them, I log out and
then I forget about the other two.

56
00:02:42.990 --> 00:02:44.750
If we don't have some logic like this,

57
00:02:44.750 --> 00:02:47.060
I can potentially come back
to the other two tabs later.

58
00:02:47.060 --> 00:02:48.351
It appears to be, I've logged in,

59
00:02:48.351 --> 00:02:51.290
it's got my profile picture in the upper
right corner, everything looks fine.

60
00:02:51.290 --> 00:02:54.225
And then as soon as I go to do
anything I start getting errors,

61
00:02:54.225 --> 00:02:58.200
because I've actually logged out, my
token has been invalidated on the server,

62
00:02:58.200 --> 00:03:01.901
it's no longer going to be accepted,
because I pressed the log out button.

63
00:03:01.901 --> 00:03:05.929
But unfortunately these tabs
didn't know about that,

64
00:03:05.929 --> 00:03:08.850
because their caches had become stale.

65
00:03:10.040 --> 00:03:13.460
This is a way of at least removing
that middle layer of caching,

66
00:03:13.460 --> 00:03:17.780
that persistent layer in the browser such
that every single time this changes in

67
00:03:17.780 --> 00:03:21.960
another tab, we immediately update
our cache in the model and say, yeah,

68
00:03:21.960 --> 00:03:24.250
we got a new information
about the session.

69
00:03:24.250 --> 00:03:26.010
This is the new source of truth.

70
00:03:26.010 --> 00:03:27.770
So we sort of have three tiers here.

71
00:03:27.770 --> 00:03:30.990
Ultimate source of truth is once
again the database on the server and

72
00:03:30.990 --> 00:03:36.400
then inside local storage we have a cached
token from that which can get stale.

73
00:03:36.400 --> 00:03:38.710
And then on top of that,
we have our cache on the model,

74
00:03:38.710 --> 00:03:41.910
which is the value that we actually
use to attach HTTP requests.

75
00:03:41.910 --> 00:03:47.404
So this code right here along with right
after, we'll get back in a second.

76
00:03:47.404 --> 00:03:48.160
This code right here,

77
00:03:48.160 --> 00:03:52.970
the primary parser of that, is to make our
cache in the model as unstale as possible.

78
00:03:54.370 --> 00:03:57.610
Now, it's important to think about these
in terms of these caching dependencies and

79
00:03:57.610 --> 00:03:59.196
what the function of these is.

80
00:03:59.196 --> 00:04:02.450
Because it'd be pretty easy to say,
if you can only think about it,

81
00:04:02.450 --> 00:04:04.960
it's like, well I just didn't
write that code, yeah, why bother?

82
00:04:04.960 --> 00:04:06.520
Yeah, I mean, I've got it right here,

83
00:04:06.520 --> 00:04:11.010
I'm saving it in the model, it's gonna
be in the model, it's gonna be accurate.

84
00:04:11.010 --> 00:04:13.230
But the reality is,
it's not necessarily gonna be accurate.

85
00:04:13.230 --> 00:04:15.640
The model can be stale
relative to the cache,

86
00:04:15.640 --> 00:04:17.850
which itself can be stale
relative to the server.

87
00:04:17.850 --> 00:04:20.570
Now again we can't really
do much about if the server

88
00:04:20.570 --> 00:04:24.040
gets out of sync with our local storage,
but we can do something about our model.

89
00:04:25.230 --> 00:04:29.520
So right here, I am consciously
making the decision to say,

90
00:04:29.520 --> 00:04:33.030
I am aware that my model is in
a cache of what's in local storage.

91
00:04:33.030 --> 00:04:36.910
That should be the single source of truth,
at least once we get to the client.

92
00:04:36.910 --> 00:04:40.360
So anytime I have a disagreement
about what's in local storage,

93
00:04:40.360 --> 00:04:42.750
local storage is right I'm
just gonna agree with it.

94
00:04:43.830 --> 00:04:45.875
So that's why I have this
logic setup this way.

95
00:04:45.875 --> 00:04:50.841
And this has one other implication,
which is that I actually don't have any

96
00:04:50.841 --> 00:04:55.430
logic in the application to say set
the session directly on the model.

97
00:04:56.610 --> 00:05:00.600
The only way I change this session on the
model is through this stuff right here,

98
00:05:00.600 --> 00:05:02.930
is coming from local storage.

99
00:05:02.930 --> 00:05:07.170
To the point where, after we say,
hey we just logged in.

100
00:05:07.170 --> 00:05:08.520
I got a new session token.

101
00:05:08.520 --> 00:05:10.540
Hey, go put this in local storage.

102
00:05:10.540 --> 00:05:11.930
After we store it in local storage,

103
00:05:11.930 --> 00:05:15.580
the next thing we do is we
send it back into the port.

104
00:05:16.700 --> 00:05:20.850
And say hey,
go through the normal process of

105
00:05:20.850 --> 00:05:25.070
pretending that we got this from
some other local storage events and

106
00:05:25.070 --> 00:05:29.090
send it through the usual pathways
to store and update it in the model.

107
00:05:29.090 --> 00:05:33.180
And the reason I'm doing it that way is
because I don't actually want to have any

108
00:05:33.180 --> 00:05:36.450
code where the model is directly
setting the session because that means

109
00:05:36.450 --> 00:05:39.710
that's just a source of my cash
potentially being out of date.

110
00:05:39.710 --> 00:05:43.540
With this cache that's just
a bug waiting to happen.

111
00:05:43.540 --> 00:05:44.880
So even though it seems a little silly,

112
00:05:44.880 --> 00:05:47.850
like hey I've already got this data why
don't I just write it down, I got it.

113
00:05:47.850 --> 00:05:51.130
I would rather maintain the variant
that this is the source of truth.

114
00:05:51.130 --> 00:05:53.608
I only ever get information from here.

115
00:05:53.608 --> 00:05:58.194
Which means I can rely on knowing that if
nothing else I'm at least as up to date as

116
00:05:58.194 --> 00:05:59.084
this cache is or

117
00:05:59.084 --> 00:06:02.590
at least I'm trying as hard as I
can not to be out of date with it

