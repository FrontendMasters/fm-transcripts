WEBVTT

1
00:00:00.000 --> 00:00:01.722
&gt;&gt; Richard Feldman: So
we're gonna add a few things here.

2
00:00:01.722 --> 00:00:03.078
One is helper functions.

3
00:00:03.078 --> 00:00:06.094
A pretty broadly
applicable concept in Elm.

4
00:00:06.094 --> 00:00:09.492
The concept of similar versus the same.

5
00:00:09.492 --> 00:00:13.575
HTML message with an unbound
type as a source of reuse.

6
00:00:13.575 --> 00:00:16.705
And finally, HTML.map and command.map.

7
00:00:16.705 --> 00:00:20.772
That's sort of the most powerful tool for
use we have.

8
00:00:20.772 --> 00:00:25.404
Okay, like the previous section, this is
gonna be the second of three where we have

9
00:00:25.404 --> 00:00:29.325
immediately going to the code, and
looking into the examples there.

10
00:00:29.325 --> 00:00:33.254
Okay, so when we talk about reuse,
we're talking about essentially

11
00:00:33.254 --> 00:00:37.264
the notion of identifying some code
where we're like, you know what?

12
00:00:37.264 --> 00:00:40.858
I wanna use exactly this code
in multiple different contexts.

13
00:00:40.858 --> 00:00:42.608
That could be a piece of the view,

14
00:00:42.608 --> 00:00:46.181
maybe we have some UI elements that
we want to share, some UI logic.

15
00:00:46.181 --> 00:00:48.078
It could be just some business logic,

16
00:00:48.078 --> 00:00:51.943
something that update does that we want
to do in a couple of different places.

17
00:00:51.943 --> 00:00:55.031
There's a few different boundaries
across which we can share things,

18
00:00:55.031 --> 00:00:56.842
we can share within a particular module.

19
00:00:56.842 --> 00:01:00.487
We could have some code that only
exists in that particular module, and

20
00:01:00.487 --> 00:01:03.175
is used elsewhere in multiple
places in the module.

21
00:01:03.175 --> 00:01:05.487
We could have some code
that exists across modules.

22
00:01:05.487 --> 00:01:07.218
Maybe it's on a separate module and

23
00:01:07.218 --> 00:01:10.749
it exposes some stuff that several
other modules import and then reuse.

24
00:01:10.749 --> 00:01:15.104
Or even at the package level, we could
have a package that has a bundle of

25
00:01:15.104 --> 00:01:18.969
reusable things that we will import and
maybe use some of them.

26
00:01:18.969 --> 00:01:22.425
Fundamentally though,
the toolset that we're going to use for

27
00:01:22.425 --> 00:01:25.758
each of those is sort of the same
no matter how we're doing it.

28
00:01:25.758 --> 00:01:30.379
The sort of bread-and-butter most basic
tool that we have at our disposal is

29
00:01:30.379 --> 00:01:31.742
the helper function.

30
00:01:31.742 --> 00:01:36.475
So helper function essentially means
I've got some code that I want to write.

31
00:01:36.475 --> 00:01:39.642
And in the course of writing that
code I realized, you know what?

32
00:01:39.642 --> 00:01:43.674
There's a subset of this code that would
do better if I were to split it out and

33
00:01:43.674 --> 00:01:46.383
make another function whose
sole purpose is to help

34
00:01:46.383 --> 00:01:49.474
me out with the function I was
originally trying to write.

35
00:01:49.474 --> 00:01:51.916
So that term can apply to all
sorts of different functions.

36
00:01:51.916 --> 00:01:55.452
But the general gist of it is
that it's not something that I

37
00:01:55.452 --> 00:02:00.305
am exposing directly for others to use as
sort of a first-class part of the API.

38
00:02:00.305 --> 00:02:03.906
Rather, it's sort of an implementation
detail of something else that I'm doing.

39
00:02:03.906 --> 00:02:06.958
Now in a lot of cases, helper functions
have nothing to do with reuse,

40
00:02:06.958 --> 00:02:10.224
they're just something that's helpful for
implementing one function,

41
00:02:10.224 --> 00:02:11.747
they're not used anywhere else.

42
00:02:11.747 --> 00:02:16.584
But a good example of when they
can come up in cases like reuse is

43
00:02:16.584 --> 00:02:20.584
when we have two things
that are quite similar, and

44
00:02:20.584 --> 00:02:25.908
all that's different about them
is a little bit of configuration.

45
00:02:25.908 --> 00:02:28.231
So for example,
we have this Favorite button.

46
00:02:28.231 --> 00:02:32.824
So the Favorite button works on
a couple of different pages.

47
00:02:32.824 --> 00:02:36.805
This is when you want to be able to click,
this is a favorite article of mine and

48
00:02:36.805 --> 00:02:38.665
I want it to show up in my Favorites.

49
00:02:38.665 --> 00:02:40.912
So I can render one of these things, and

50
00:02:40.912 --> 00:02:44.875
the only real difference between
the two is in terms of their styles.

51
00:02:44.875 --> 00:02:47.036
So one of them looks like a dark green,

52
00:02:47.036 --> 00:02:50.766
the other has sort of a white with
light green outline type thing.

53
00:02:50.766 --> 00:02:53.277
And the way that we specify the one or

54
00:02:53.277 --> 00:02:56.639
the other is by giving it
a different CSS class.

55
00:02:56.639 --> 00:03:00.129
Everything else about these things, the
favorite button or the unfavorite button,

56
00:03:00.129 --> 00:03:01.006
is exactly the same.

57
00:03:01.006 --> 00:03:04.443
So we sort of consolidate all that
logic in this helper function,

58
00:03:04.443 --> 00:03:07.566
which deals with putting that
class together with this like

59
00:03:07.566 --> 00:03:10.328
onClickStopPropagation thing
that we're doing.

60
00:03:10.328 --> 00:03:13.178
And also the HTML
structure of this thing is,

61
00:03:13.178 --> 00:03:18.203
needs to be at a particular configuration
where it's a button on the outside and

62
00:03:18.203 --> 00:03:21.508
an iTag on the inside in order for
the CSS to work out.

63
00:03:21.508 --> 00:03:23.530
So this is a very basic example
of the helper function.

64
00:03:23.530 --> 00:03:27.325
We've split out this function just for the
purposes of helping out these two other

65
00:03:27.325 --> 00:03:29.869
functions, favoriteButton and
unfavoriteButton.

66
00:03:29.869 --> 00:03:33.439
This is the type of helper function
that is only used in this one module,

67
00:03:33.439 --> 00:03:35.295
it's only used in those two places.

68
00:03:35.295 --> 00:03:38.691
But it does its job well enough, and it
prevents us from having to maintain these

69
00:03:38.691 --> 00:03:42.409
two things separately, or worry about the
implementation details being different.

70
00:03:42.409 --> 00:03:44.110
That's sort of a way of saying,

71
00:03:44.110 --> 00:03:48.079
yeah, we have decided that these things
should share a good enough chunk of

72
00:03:48.079 --> 00:03:51.359
code that we're gonna split out
a separate function to do it.

73
00:03:51.359 --> 00:03:52.785
And that's all there is to it.

74
00:03:52.785 --> 00:03:56.784
Another common use is for
dealing with update.

75
00:03:56.784 --> 00:04:00.340
So let's say we're over here on
the Settings page and there's a pretty

76
00:04:00.340 --> 00:04:03.847
common operation that we're doing,
which is we are updating a form.

77
00:04:03.847 --> 00:04:06.024
So there's a lot of form fields on this.

78
00:04:06.024 --> 00:04:09.112
There's email, username,
password, bio, avatar, and

79
00:04:09.112 --> 00:04:12.026
all of those have a pretty
common operation that they do.

80
00:04:12.026 --> 00:04:16.476
Which is that the user types some piece of
text into a text field or a text area, and

81
00:04:16.476 --> 00:04:18.708
we just wanna write it down in the model.

82
00:04:18.708 --> 00:04:22.552
Later on we'll validate it, we'll send it
to the server, do all kinds of nice stuff

83
00:04:22.552 --> 00:04:25.117
like that, but for
now all we need to do is write it down.

84
00:04:25.117 --> 00:04:28.841
And since the operation of writing it down
essentially involves just taking the form

85
00:04:28.841 --> 00:04:32.473
out of the model, updating one field in
it, and then putting it back in the model.

86
00:04:32.473 --> 00:04:37.141
We've written a helper function here
that does not only that, but also,

87
00:04:37.141 --> 00:04:42.657
as a convenience, returns Cmd.none because
all these things don't do any effects.

88
00:04:42.657 --> 00:04:45.254
All they do is update
one model in the form.

89
00:04:45.254 --> 00:04:46.470
This is a one-liner.

90
00:04:46.470 --> 00:04:49.859
It's doing nothing more than saying,
update this one field in the form based on

91
00:04:49.859 --> 00:04:52.145
the transformation function
that you've given me.

92
00:04:52.145 --> 00:04:56.932
And I will return that inside
of a tuple with a Cmd.none so

93
00:04:56.932 --> 00:05:01.339
that we don't have to write
that every time up here.

94
00:05:01.339 --> 00:05:04.739
Worth noting that there are some
interesting trade-offs around this as far

95
00:05:04.739 --> 00:05:07.459
as some of the stuff we talked
about in the previous section.

96
00:05:07.459 --> 00:05:12.187
So this updateForm function, on the one
hand tells us that we are returning

97
00:05:12.187 --> 00:05:15.127
a model and
a Cmd.none which is pretty broad.

98
00:05:15.127 --> 00:05:18.338
But there's actually an interesting
opportunity here to say we

99
00:05:18.338 --> 00:05:21.370
can actually promise that this
does not return a command that

100
00:05:21.370 --> 00:05:23.100
has a message associated with it.

101
00:05:23.100 --> 00:05:26.676
We can say, yeah,
this returns a command, but guess what?

102
00:05:26.676 --> 00:05:29.271
That command still has
an unbound type variable,

103
00:05:29.271 --> 00:05:31.942
it's not actually going
to produce any messages.

104
00:05:31.942 --> 00:05:36.484
It's not quite the same as saying it's
doing nothing because this command right

105
00:05:36.484 --> 00:05:39.844
here could potentially be,
for example, a port command.

106
00:05:39.844 --> 00:05:43.256
There exists commands that do something,
they just don't produce a message.

107
00:05:43.256 --> 00:05:46.892
So if we wanted to, we could actually
narrow this type a little bit further.

108
00:05:46.892 --> 00:05:49.161
So that's an opportunity for
a refactor there.

109
00:05:49.161 --> 00:05:53.116
But in general, the fact that we
are returning this does mean that this

110
00:05:53.116 --> 00:05:55.681
is sort of a less narrow
type than it could be.

111
00:05:55.681 --> 00:05:58.719
So if we're looking for culprits and
we're trying to debug something and

112
00:05:58.719 --> 00:06:01.953
figuring out why some weird thing is
running a command that we didn't expect,

113
00:06:01.953 --> 00:06:04.763
this is a potential culprit because
we've chosen to do it this way.

114
00:06:04.763 --> 00:06:08.669
Now, the trade-off there is that if
we didn't put it inside updateForm,

115
00:06:08.669 --> 00:06:11.025
we'd have to put Cmd.none
in each of these.

116
00:06:11.025 --> 00:06:14.420
Now, the advantage of doing it this way
is they're all sort of centralized.

117
00:06:14.420 --> 00:06:18.462
So I know for a fact just by knowing what
update form does once I can say okay,

118
00:06:18.462 --> 00:06:21.670
all of these lines of code,
without even glancing at them,

119
00:06:21.670 --> 00:06:24.572
I know that they're not
running any commands at all.

120
00:06:24.572 --> 00:06:25.949
Otherwise, I would need to say okay,

121
00:06:25.949 --> 00:06:28.545
I'm trying to figure which branch
of update is resulting in commands.

122
00:06:28.545 --> 00:06:30.669
I have to now scan through each of these.

123
00:06:30.669 --> 00:06:31.559
So it's a trade-off.

124
00:06:31.559 --> 00:06:35.577
On the one hand, I've made this helper
function less narrow than it could be, but

125
00:06:35.577 --> 00:06:39.421
I'm doing that because I expect it's more
likely to come up that I'm trying to

126
00:06:39.421 --> 00:06:42.937
search through all the branches of
update for our particular command.

127
00:06:42.937 --> 00:06:45.653
And I think it's going to be
more helpful to me to say okay,

128
00:06:45.653 --> 00:06:49.535
each of these is running that thing, I can
just glance at the implementation once,

129
00:06:49.535 --> 00:06:51.875
see that it doesn't have
any conditionals here.

130
00:06:51.875 --> 00:06:53.255
It always returns to Cmd.none.

131
00:06:53.255 --> 00:06:57.514
So I can very quickly answer the question
of what do each of those branches do just

132
00:06:57.514 --> 00:06:58.732
by going one hop away.

133
00:06:58.732 --> 00:07:00.303
So it's a trade-off.

134
00:07:00.303 --> 00:07:03.570
It's not necessarily objectively correct
or incorrect to go either way, but

135
00:07:03.570 --> 00:07:07.147
it's something worth thinking about when
you're splitting out helper functions.

136
00:07:07.147 --> 00:07:09.843
Sometimes you want them to
be as narrow as possible,

137
00:07:09.843 --> 00:07:14.033
other times it can actually potentially
save you time to do something like this.

