WEBVTT

1
00:00:00.000 --> 00:00:04.121
&gt;&gt; Richard Feldman: So let's say we've got
our decode.map3 implementation up here.

2
00:00:04.121 --> 00:00:07.160
We could also do it like this,
this is the pipeline version.

3
00:00:08.310 --> 00:00:15.380
So instead of decode.map3 instructor,
we're saying Decode.succeed Instructor.

4
00:00:15.380 --> 00:00:19.490
And instead of calling field three times,
and getting three different decoders,

5
00:00:19.490 --> 00:00:23.740
we're instead calling required, but
giving it similar looking arguments.

6
00:00:23.740 --> 00:00:26.830
In both cases we got the same set
of strings which correspond to

7
00:00:26.830 --> 00:00:30.920
the fields on the JSON object and we've
got the same set of decoders specifying

8
00:00:30.920 --> 00:00:35.940
what value types we expect to be there
corresponding to those field names.

9
00:00:35.940 --> 00:00:38.050
So what are similarities between the two?

10
00:00:38.050 --> 00:00:40.670
Of course the purpose of
the decode pipeline version

11
00:00:40.670 --> 00:00:42.440
is that this doesn't stop at three.

12
00:00:43.490 --> 00:00:47.710
We don't have to change the function
that we're calling here if we wanna

13
00:00:47.710 --> 00:00:48.620
have 20 of these.

14
00:00:48.620 --> 00:00:52.190
We just need to make sure this function
takes 20 arguments and we've piped

15
00:00:52.190 --> 00:00:56.460
it 20 times to required or optional or
hard coded or something like that.

16
00:00:58.290 --> 00:01:02.000
Now, the types here are a little bit less
obvious than what they are over here.

17
00:01:03.110 --> 00:01:06.900
In this version, we saw the type of map3,
and we saw that it took three decoders,

18
00:01:06.900 --> 00:01:08.430
and we knew how to make those decoders.

19
00:01:08.430 --> 00:01:10.220
And that was all there was to it.

20
00:01:10.220 --> 00:01:12.610
But in order to make this trick work,
where it's flexible, and

21
00:01:12.610 --> 00:01:15.340
you can have it be as long or
as short as you want, as long as it's

22
00:01:15.340 --> 00:01:19.660
the same length as the function, we have
to have slightly more complex types.

23
00:01:21.030 --> 00:01:23.219
So let's kind of break
down what's going on here.

24
00:01:24.350 --> 00:01:26.940
So first, we have Decode.succeed.

25
00:01:26.940 --> 00:01:28.450
This is its type.

26
00:01:28.450 --> 00:01:31.420
It takes a value, and
then it returns the decoder of that value.

27
00:01:33.060 --> 00:01:36.010
In other words, it returns a decoder
which always succeeds no matter

28
00:01:36.010 --> 00:01:39.180
what the input is, and
succeeds with that value.

29
00:01:41.050 --> 00:01:43.070
So the whole goal of
Decode.succeed is to say, yeah,

30
00:01:43.070 --> 00:01:45.450
I'm not even gonna look at that JSON,
I don't care what's in there.

31
00:01:45.450 --> 00:01:47.240
I'm always gonna succeed
with this particular thing.

32
00:01:48.450 --> 00:01:48.950
Now, typically,

33
00:01:48.950 --> 00:01:53.720
this is used in the same way that sort
of hard-coded is used in JSON pipeline.

34
00:01:53.720 --> 00:01:57.360
It's used to say okay,
when we get to this particular situation.

35
00:01:57.360 --> 00:01:59.440
You know what,
I don't actually wanna run a decoder,

36
00:01:59.440 --> 00:02:01.860
I need to have provided a decoder here,
but

37
00:02:01.860 --> 00:02:05.340
I don't actually wanna do any decoding,
so I'm just gonna Decode.succeed.

38
00:02:05.340 --> 00:02:08.790
However, in this particular case,
we're using it in an unusual way.

39
00:02:08.790 --> 00:02:11.360
We're using it as a starting point for
our pipeline.

40
00:02:11.360 --> 00:02:15.578
So when we say Decode.succeed Instructor,
let's look at the types there.

41
00:02:15.578 --> 00:02:17.770
What does Decode.succeed take?

42
00:02:17.770 --> 00:02:19.800
It takes an a, and it returns Decoder a.

43
00:02:21.070 --> 00:02:22.630
So what's this gonna return?

44
00:02:22.630 --> 00:02:26.430
Well, Decode.succeed takes an a which
in this case is the instructor.

45
00:02:26.430 --> 00:02:29.530
And instructor is a type alias for
a String to Int to Bool to Instructor.

46
00:02:30.770 --> 00:02:34.200
So that means we're gonna get back
at decoder of String to Int to

47
00:02:34.200 --> 00:02:35.790
Bool to Instructor.

48
00:02:35.790 --> 00:02:37.390
Which is a very weird
thing to be working with?

49
00:02:38.420 --> 00:02:39.890
What does that even mean?

50
00:02:39.890 --> 00:02:44.720
Well what that means is this is a decoder,
which always succeeds, and what it

51
00:02:44.720 --> 00:02:49.000
succeeds with is here's this function,
again, kind of a weird thing to do.

52
00:02:49.000 --> 00:02:51.110
Which is why the types of this
library are kinda weird looking.

53
00:02:52.120 --> 00:02:55.240
What does it even mean to say I
have a decoder of a function?

54
00:02:55.240 --> 00:02:58.610
Well, it basically means, in this case,
whatever JSON you give me,

55
00:02:58.610 --> 00:03:01.350
I'm going to completely disregard and
hand you this function.

56
00:03:01.350 --> 00:03:05.550
Again, kind of a silly thing to do, but
at least we can understand that one step.

57
00:03:05.550 --> 00:03:09.900
If we run this decoder on any piece of
JSON, no matter what the fields on it,

58
00:03:09.900 --> 00:03:13.780
if it's an object, it's a string,
whatever, this decoder will ignore it and

59
00:03:13.780 --> 00:03:15.890
say here is a function.

60
00:03:15.890 --> 00:03:18.225
Okay, so
that's gonna be our starting point.

61
00:03:18.225 --> 00:03:21.911
Decode.succeed Instructor gives us back
a decoder of String to Int to Bool to

62
00:03:21.911 --> 00:03:22.601
Instructor.

63
00:03:23.850 --> 00:03:25.340
Now, the next thing we're going to do,

64
00:03:25.340 --> 00:03:27.440
is we're going to start
calling required on it.

65
00:03:27.440 --> 00:03:30.660
We're gonna say Decode.succeed Instructor,
pipe it to required "name" string, and

66
00:03:30.660 --> 00:03:33.790
then pipe it to required "name" string and
required "courses" int.

67
00:03:35.260 --> 00:03:38.110
Now, the types here start to
get a little more interesting.

68
00:03:38.110 --> 00:03:44.465
So here we see that the second one is a
decoder of Int to Bool to Instructor, ha.

69
00:03:44.465 --> 00:03:49.314
So essentially what required did
there is it said I'm going to

70
00:03:49.314 --> 00:03:55.060
take this decoder and
I'm going to apply it with one argument.

71
00:03:55.060 --> 00:03:57.460
As we know it supports
partial application.

72
00:03:57.460 --> 00:04:00.980
So anytime you have a function with three
arguments like we have at the top there.

73
00:04:00.980 --> 00:04:03.150
You can always call it
passing the first argument,

74
00:04:03.150 --> 00:04:06.760
and then you'll get back a function that's
a partially applied version of that,

75
00:04:06.760 --> 00:04:09.270
which is to say a function
with one fewer argument.

76
00:04:09.270 --> 00:04:11.110
And that's exactly what required does.

77
00:04:12.400 --> 00:04:15.110
It says, I'm gonna take this thing that
you're decoding, then I'm gonna map

78
00:04:15.110 --> 00:04:18.550
over it, then I'm gonna say, hey,
I've got this function inside there.

79
00:04:18.550 --> 00:04:19.300
What am I gonna do with it?

80
00:04:19.300 --> 00:04:23.960
I'm gonna call it passing the result
of my successful decoding.

81
00:04:23.960 --> 00:04:26.760
So in other words, if I'm successful,
I'm gonna have a string.

82
00:04:26.760 --> 00:04:28.810
The first argument to this
function is a string.

83
00:04:29.840 --> 00:04:31.765
So if I'm successful at decoding,
I'm gonna take that string,

84
00:04:31.765 --> 00:04:33.483
I'm gonna take that function and
I'm gonna pass it to it.

85
00:04:35.106 --> 00:04:38.413
&gt;&gt; Richard Feldman: Which gives us back a
decoder with that string missing from its

86
00:04:38.413 --> 00:04:41.480
function argument because
it's now been applied once.

87
00:04:42.500 --> 00:04:46.890
So we still have a decoder which always
succeeds no matter what happens.

88
00:04:46.890 --> 00:04:52.720
Except, with one exception that now it
additionally is going to check for name.

89
00:04:52.720 --> 00:04:55.070
So whereas before, we would always
succeed with this function.

90
00:04:55.070 --> 00:04:58.260
Now it only succeeds with
the function if we looked for

91
00:04:58.260 --> 00:05:02.080
a field called name on the JSON object,
and it was there and it was a string.

92
00:05:02.080 --> 00:05:06.890
In which case, we will take that
string and apply it to this function.

93
00:05:06.890 --> 00:05:09.890
So if this decoder succeeds,
meaning the name was there,

94
00:05:09.890 --> 00:05:12.540
we're still gonna say we've succeeded,
here you are, it's a function.

95
00:05:12.540 --> 00:05:15.100
But now it's a different function, it's
an Int to Bool to Instructor function.

96
00:05:16.510 --> 00:05:21.210
And as you might guess, this pattern's
going continue with the next one.

97
00:05:21.210 --> 00:05:23.320
Except we've applied it once more.

98
00:05:23.320 --> 00:05:25.550
This is an Int to Bool
to Instructor function.

99
00:05:25.550 --> 00:05:28.120
And the next required does exactly
the same thing as the previous one did.

100
00:05:28.120 --> 00:05:31.080
It said I'm gonna, okay,
if this succeeds, I'm gonna say,

101
00:05:31.080 --> 00:05:32.870
great, I've got this function.

102
00:05:32.870 --> 00:05:36.100
I'm going to apply this int to it
that I got from the courses field,

103
00:05:36.100 --> 00:05:37.220
assuming that succeeded as well.

104
00:05:39.060 --> 00:05:43.480
And we can take this one step further,
Decode.succeed Instructor required "name"

105
00:05:43.480 --> 00:05:46.220
string, required "courses" int And
required active bool.

106
00:05:46.220 --> 00:05:50.210
And as you might guess now you've got
this function from bool to instructor.

107
00:05:50.210 --> 00:05:53.030
If we now apply a bool to that,
we just have decoder instructor.

108
00:05:55.183 --> 00:05:57.720
&gt;&gt; Richard Feldman: So
that's how the pipeline types work.

109
00:05:57.720 --> 00:06:01.830
You start off by saying I'm always gonna
succeed and with this weird function.

110
00:06:01.830 --> 00:06:06.030
And then each of these required things, it
sort of peels things off of that layer and

111
00:06:06.030 --> 00:06:09.230
says, okay, we got to function
with these many arguments.

112
00:06:09.230 --> 00:06:13.230
I'm just gonna apply one argument to it
based on what I decode if I'm successful.

113
00:06:14.360 --> 00:06:15.050
So by the end of it,

114
00:06:15.050 --> 00:06:18.280
we've ended up with essentially the same
thing as what we had with map3.

115
00:06:18.280 --> 00:06:21.040
We're looking for name and
courses and active.

116
00:06:21.040 --> 00:06:22.610
If we find all three of those,

117
00:06:22.610 --> 00:06:26.110
they're going to get applied
one at a time to this function.

118
00:06:26.110 --> 00:06:29.560
Which is going to be
the resulting decoder, but

119
00:06:29.560 --> 00:06:33.820
we did it in a way where the pipeline
just needs to be the same length

120
00:06:33.820 --> 00:06:36.150
as the function that we're decoding into.

121
00:06:36.150 --> 00:06:39.840
And then we're all good, we're all set,
everything's gonna work out.

122
00:06:39.840 --> 00:06:42.286
We don't need to have a map three and
a map four and a map five etc.

123
00:06:42.286 --> 00:06:46.620
Based on the length, this pattern
will work no matter the length.

124
00:06:46.620 --> 00:06:50.610
&gt;&gt; Speaker 2: So if you left one off,
or get the order wrong,

125
00:06:50.610 --> 00:06:55.150
then this particular function
call wouldn't error, but

126
00:06:55.150 --> 00:06:57.620
it would error when you actually
tried to use the decoder?

127
00:06:57.620 --> 00:06:58.360
&gt;&gt; Richard Feldman: Right, yeah, exactly.

128
00:06:58.360 --> 00:07:03.120
So let's say I only called required twice.

129
00:07:03.120 --> 00:07:05.650
We can actually see exactly
what that would do right here.

130
00:07:05.650 --> 00:07:08.680
So if I left off the required
active at the end there,

131
00:07:09.690 --> 00:07:11.850
this expression right here
would totally be fine.

132
00:07:11.850 --> 00:07:14.960
It's just that it would produce
a Decoder of Bool to Instructor.

133
00:07:14.960 --> 00:07:18.060
So if I'm later on trying to use this
as though it's producing an Instructor,

134
00:07:18.060 --> 00:07:20.100
it's not gonna compile because it's like,
well, no, that's a function,

135
00:07:20.100 --> 00:07:23.770
that's not actually an Instructor, so
you gotta resolve something somewhere.

136
00:07:23.770 --> 00:07:26.990
Likewise, if I provided too many
arguments, if I tried to tried to

137
00:07:26.990 --> 00:07:30.940
call required one more time at the end
there, it would say, you've got a value

138
00:07:30.940 --> 00:07:33.980
that's not a function, and you're trying
to apply function arguments to it?

139
00:07:33.980 --> 00:07:34.490
That won't work.

140
00:07:35.750 --> 00:07:38.850
So that's how it works out that you have
to have exactly the correct number of

141
00:07:38.850 --> 00:07:42.146
things in the pipeline that correspond to
the number of arguments in the function

142
00:07:42.146 --> 00:07:44.097
that you're passing to the Decode.succeed.

143
00:07:47.314 --> 00:07:49.984
&gt;&gt; Richard Feldman: This also reveals
something that we did in one of

144
00:07:49.984 --> 00:07:54.657
the exercises earlier on, where we didn't
pass a record constructor to this, but

145
00:07:54.657 --> 00:07:57.490
rather we passed a variant to it directly.

146
00:07:57.490 --> 00:08:02.693
So as you can imagine, this whole pipeline
strategy, and in fact, the map3 strategy,

147
00:08:02.693 --> 00:08:07.690
or map2, or however many you wanna use
it with, only relies on functions.

148
00:08:07.690 --> 00:08:11.800
It doesn't actually care if this function
happens to be a record structure, or

149
00:08:11.800 --> 00:08:13.530
happens to be a variant function, or

150
00:08:13.530 --> 00:08:16.700
happens to be an anonymous function
that you just decided to write in line.

151
00:08:17.750 --> 00:08:22.390
All it's going to do is it's going to
apply these arguments to it one at a time.

152
00:08:22.390 --> 00:08:25.320
So you can put whatever you want in there,
as long as it's a function and

153
00:08:25.320 --> 00:08:28.660
that function's type correspond to
the different things that you're

154
00:08:28.660 --> 00:08:32.410
using with required, and
the decoder is just supplying to required.

155
00:08:32.410 --> 00:08:34.300
It's gonna work out, and
it's gonna do its thing.

