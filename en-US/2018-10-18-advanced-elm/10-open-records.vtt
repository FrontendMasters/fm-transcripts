WEBVTT

1
00:00:00.000 --> 00:00:01.008
&gt;&gt; Richard Feldman: So why do these exist?

2
00:00:01.008 --> 00:00:03.851
[LAUGH] Why have a distinction
between open and closed records?

3
00:00:03.851 --> 00:00:08.184
Well we've seen quite a few examples and
one way you could think of it is,

4
00:00:08.184 --> 00:00:11.468
well how would you do any of
those examples otherwise?

5
00:00:11.468 --> 00:00:14.229
But it actually really
boils down to one thing,

6
00:00:14.229 --> 00:00:17.414
which is essentially based
on the following example.

7
00:00:17.414 --> 00:00:19.179
Let's say I have a type alias Model.

8
00:00:19.179 --> 00:00:21.580
It's got a name which is a String,
age which is an Int, and

9
00:00:21.580 --> 00:00:23.010
then Post which is a list of posts.

10
00:00:23.010 --> 00:00:31.381
And in comparison, I have type Model
= Model String Int (List Post).

11
00:00:31.381 --> 00:00:36.116
Now, we don't need a notion of records
at all if we have custom types,

12
00:00:36.116 --> 00:00:37.417
as we can see here.

13
00:00:37.417 --> 00:00:41.320
I mean, really this Model's
the same information, right?

14
00:00:41.320 --> 00:00:45.046
In both cases,
I've got one value, named Model.

15
00:00:45.046 --> 00:00:49.447
And it holds on to, a string and
Int, and a list of posts.

16
00:00:49.447 --> 00:00:53.143
Now granted, its nice to be able to
tag these with names, like to say,

17
00:00:53.143 --> 00:00:55.411
this is a name, this is age, this is post.

18
00:00:55.411 --> 00:00:58.733
Especially because, what if several
of them, like most of those,

19
00:00:58.733 --> 00:01:00.731
multiple version of them were strings.

20
00:01:00.731 --> 00:01:03.017
I don't wanna have model,
string, string, string Int.

21
00:01:03.017 --> 00:01:05.073
That's gonna be very confusing,
very error prone.

22
00:01:05.073 --> 00:01:07.348
So records, you know,
make things less error prone.

23
00:01:07.348 --> 00:01:08.670
There's clearly a use case.

24
00:01:08.670 --> 00:01:11.447
But, strictly speaking
they don't need to exist.

25
00:01:11.447 --> 00:01:14.099
And in fact there are plenty of
ML family languages like Elm,

26
00:01:14.099 --> 00:01:15.971
which either don't have a record system or

27
00:01:15.971 --> 00:01:19.251
have a record system that's not nearly
as flexible as the one that Elm has.

28
00:01:19.251 --> 00:01:22.407
So why bother having them at all?

29
00:01:22.407 --> 00:01:25.611
Essentially it's for this, and only this.

30
00:01:25.611 --> 00:01:28.467
The ability to say record.name.

31
00:01:28.467 --> 00:01:31.962
It's that dot syntax being able to say,
I know I've got a record.

32
00:01:31.962 --> 00:01:34.946
I wanna access this field on there and
be certain that it exists.

33
00:01:34.946 --> 00:01:38.208
If you want to have that and
you want to have type inference,

34
00:01:38.208 --> 00:01:41.879
it's really hard to do that without
something like open records.

35
00:01:41.879 --> 00:01:45.538
So that's the whole reason they exist.

36
00:01:45.538 --> 00:01:49.628
And I mention this because there are a lot
of other things that they can be used for,

37
00:01:49.628 --> 00:01:53.498
despite the fact that all they're intended
to be used for is literally this.

38
00:01:53.498 --> 00:01:57.678
And this relevant, or potentially
relevant, because of the implications that

39
00:01:57.678 --> 00:02:01.741
this might have for the future of the
language, which we'll get in to in a bit.

40
00:02:01.741 --> 00:02:05.284
Okay, so here's one of the things that
they happen to be able to be used for

41
00:02:05.284 --> 00:02:06.383
is naming arguments.

42
00:02:06.383 --> 00:02:09.225
I talked about this is Elm Europe 2017.

43
00:02:09.225 --> 00:02:13.121
So let's say I have a function called
validate, and it takes email, firstName,

44
00:02:13.121 --> 00:02:16.865
and lastName, and it returns blah,
I don't know, some validation result.

45
00:02:16.865 --> 00:02:20.832
Email, firstName, and lastName in
this example are all strings, so

46
00:02:20.832 --> 00:02:24.745
anytime I see this as a type signature,
alarm bells go off in my head.

47
00:02:24.745 --> 00:02:28.766
I'm like, okay, I'm gonna definitely mix
those up at some point in my life and

48
00:02:28.766 --> 00:02:29.617
make a mistake.

49
00:02:29.617 --> 00:02:34.587
One way to solve this is, by using
records as a means of creating sort

50
00:02:34.587 --> 00:02:38.614
of pseudo named arguments,
or faux named arguments.

51
00:02:38.614 --> 00:02:41.702
Some languages have first class
support for, that's like a feature.

52
00:02:41.702 --> 00:02:42.562
It's named arguments.

53
00:02:42.562 --> 00:02:45.812
But, we can do the same thing
in Elm using records if we want.

54
00:02:45.812 --> 00:02:49.088
So I'm just saying, validate now takes
email, which is a string first name,

55
00:02:49.088 --> 00:02:51.122
which is a string last name,
which is a string and

56
00:02:51.122 --> 00:02:52.983
then I just destructure them immediately.

57
00:02:52.983 --> 00:02:53.780
So as if I had,

58
00:02:53.780 --> 00:02:57.511
I end up with the same things in
scope as with the previous version.

59
00:02:57.511 --> 00:03:01.299
But now, the caller has to specify here
is the email, here is the first name,

60
00:03:01.299 --> 00:03:02.423
here is the last name.

61
00:03:02.423 --> 00:03:04.183
So it's no longer as error prone, but

62
00:03:04.183 --> 00:03:06.774
now it doesn't support
partial application anymore.

63
00:03:06.774 --> 00:03:08.190
So that's a trade-off.

64
00:03:08.190 --> 00:03:10.233
It's a reasonable choice
to make either way.

65
00:03:10.233 --> 00:03:14.289
But there's also one more way I can do it,
which is I can do the same thing as

66
00:03:14.289 --> 00:03:17.702
the previous example,
except I can make this an open record.

67
00:03:17.702 --> 00:03:20.480
And now, this means that I could
potentially do something like,

68
00:03:20.480 --> 00:03:24.016
if my model happens to have a field called
email, and a field called firstName, and

69
00:03:24.016 --> 00:03:25.142
a field called lastName.

70
00:03:25.142 --> 00:03:29.916
I can just say hey, validate model, and
it would only use those three Fields

71
00:03:29.916 --> 00:03:34.615
from the model which is in a lot of ways
better than taking the entire model as

72
00:03:34.615 --> 00:03:38.813
an argument, and it'll still work
the same way as the others did.

73
00:03:38.813 --> 00:03:41.549
So again, not something it was
designed to be used for, but

74
00:03:41.549 --> 00:03:43.759
as it turns out it is
something we can use it for.

75
00:03:45.758 --> 00:03:49.946
&gt;&gt; Richard Feldman: Another thing we can
potentially do to solve this same problem,

76
00:03:49.946 --> 00:03:52.280
is to make one of them a custom type.

77
00:03:52.280 --> 00:03:57.123
So let's say that instead of having email
be a string we said, you know what?

78
00:03:57.123 --> 00:03:58.701
Email is a separate notion of a string.

79
00:03:58.701 --> 00:04:00.838
I'm just gonna make
a custom type called Email.

80
00:04:00.838 --> 00:04:02.450
Might even not bother making it opaque.

81
00:04:02.450 --> 00:04:04.312
And just say, look, if we have an email,

82
00:04:04.312 --> 00:04:06.514
that's a different thing
from having a string.

83
00:04:06.514 --> 00:04:09.288
An email is just conceptually different,
it's a special type of string.

84
00:04:09.288 --> 00:04:13.330
The second function I would
argue is not really error prone.

85
00:04:13.330 --> 00:04:16.442
So it's taking Email,
firstName, and lastName.

86
00:04:16.442 --> 00:04:19.882
Now granted, that is still taking two
string arguments right in a row, but

87
00:04:19.882 --> 00:04:20.864
passing last name and

88
00:04:20.864 --> 00:04:24.428
first name is not really a mistake I
don't think I've ever made in my career.

89
00:04:24.428 --> 00:04:25.891
I always pass the first name and
then last name.

90
00:04:25.891 --> 00:04:30.943
I could maybe get paranoid and do it even
more so than this, maybe use the record.

91
00:04:30.943 --> 00:04:34.011
I don't think I would go as far as
making a custom type for firstName and

92
00:04:34.011 --> 00:04:35.261
a custom type for lastName.

93
00:04:35.261 --> 00:04:39.192
But you could if you were really concerned
about it, but I think this is a sort

94
00:04:39.192 --> 00:04:42.029
of a more lightweight way of
solving the same problem.

95
00:04:42.029 --> 00:04:45.370
Especially because email is likely to
come up in a lot of different places,

96
00:04:45.370 --> 00:04:46.589
and having a custom type for

97
00:04:46.589 --> 00:04:49.677
email is something that's gonna
pay off beyond just this function.

98
00:04:49.677 --> 00:04:51.929
And, in fact, in this code base
I specifically did do this.

99
00:04:51.929 --> 00:04:53.947
I actually made a custom type for
emails so

100
00:04:53.947 --> 00:04:57.870
I can disambiguate when I have an email
versus I have some meaningless string, or

101
00:04:57.870 --> 00:05:00.199
some sttring that I'm
not as concerned about.

102
00:05:02.498 --> 00:05:04.973
&gt;&gt; Richard Feldman: So this is the way
that you could do it with an opaque type,

103
00:05:04.973 --> 00:05:07.619
or even just a custom type that
doesn't happen to be opaque.

104
00:05:07.619 --> 00:05:13.099
And finally, the other thing that you can
use open records for is for modeling data.

105
00:05:13.099 --> 00:05:15.047
This is another unintended use for them.

106
00:05:15.047 --> 00:05:18.579
So there is two ways to
do the following thing.

107
00:05:18.579 --> 00:05:20.878
One was with the type parameter,
the other was with open record.

108
00:05:20.878 --> 00:05:22.942
So we look at the open record way first.

109
00:05:22.942 --> 00:05:27.216
So you say type alias Article a =
a pipe title, which is a string, and

110
00:05:27.216 --> 00:05:29.225
tags which is a list of strings.

111
00:05:29.225 --> 00:05:31.696
So this comes up in
the following scenario.

112
00:05:31.696 --> 00:05:33.787
We have a feed full of
articles that we load.

113
00:05:33.787 --> 00:05:37.955
And in that feed we'll have, I don't know,
maybe it's like 10, 20 articles something

114
00:05:37.955 --> 00:05:40.834
like that, and each of them just
shows a preview of the article.

115
00:05:40.834 --> 00:05:44.497
It has like a title and then the author,
and like a little blurb about it and

116
00:05:44.497 --> 00:05:45.513
a link to read more.

117
00:05:45.513 --> 00:05:48.969
Now also, sometimes articles
have a body that goes with them,

118
00:05:48.969 --> 00:05:50.737
the entire text of the article.

119
00:05:50.737 --> 00:05:52.712
And when we're reviewing
the article's page,

120
00:05:52.712 --> 00:05:55.466
like where we click the link to read
more we view the entire article.

121
00:05:55.466 --> 00:05:58.784
We want all this info, like the title,
the tags, and all of that, but

122
00:05:58.784 --> 00:05:59.867
we also want the body.

123
00:05:59.867 --> 00:06:02.980
So essentially we want two variations
on article, we wanna have one,

124
00:06:02.980 --> 00:06:04.456
which is a preview of an article,

125
00:06:04.456 --> 00:06:07.329
and then the other which is the full
article including the body.

126
00:06:07.329 --> 00:06:08.750
Now when we're loading the feed,

127
00:06:08.750 --> 00:06:12.229
we're not gonna get from the server the
entire text of all 20 articles, that would

128
00:06:12.229 --> 00:06:15.071
be way too much data to transfer cuz
we're not gonna bother using it.

129
00:06:15.071 --> 00:06:18.171
So the server's only gonna send
us the preview information.

130
00:06:18.171 --> 00:06:20.593
But when we go to the full article,
we do want the body,

131
00:06:20.593 --> 00:06:22.873
we want all the other stuff,
plus we want the body.

132
00:06:22.873 --> 00:06:27.307
So how can we say I wanna have an article
that sort of shares these two pieces of

133
00:06:27.307 --> 00:06:30.567
common information about
the metadata of the article,

134
00:06:30.567 --> 00:06:34.889
but which separately has in some cases
a body, and in some cases does not?

135
00:06:34.889 --> 00:06:37.031
A pretty common way that people reach for

136
00:06:37.031 --> 00:06:40.625
to do this when they realize that
open records are a thing, is this.

137
00:06:40.625 --> 00:06:43.830
Because it's available, and
it works for that use case.

138
00:06:43.830 --> 00:06:46.965
You can also do it, though,
with a type parameter.

139
00:06:46.965 --> 00:06:52.123
You can say, type alias Article a =, and
just add that type parameter on the end.

140
00:06:52.123 --> 00:06:56.749
And essentially say, okay,
I've got some sort of article here,

141
00:06:56.749 --> 00:07:01.886
that has some particular piece of
extra information associated with it.

142
00:07:01.886 --> 00:07:07.030
So the problem over here is sort of like
what type would we extend this with?

143
00:07:07.030 --> 00:07:10.174
If we're doing it using an open record,
that type must be a record,

144
00:07:10.174 --> 00:07:12.657
whereas if we're just adding
it as a type parameter,

145
00:07:12.657 --> 00:07:15.440
we can have it be whatever we
want in whatever field we want.

146
00:07:15.440 --> 00:07:17.878
Could be a custom type, could be anything.

