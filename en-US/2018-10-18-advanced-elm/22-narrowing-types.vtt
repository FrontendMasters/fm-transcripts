WEBVTT

1
00:00:00.080 --> 00:00:02.250
&gt;&gt; Richard Feldman: Whenever we're trying
to narrow down our list of potential

2
00:00:02.250 --> 00:00:06.050
culprits, the first thing we're gonna
look at are the types, because in Elm,

3
00:00:06.050 --> 00:00:07.690
all functions are pure.

4
00:00:07.690 --> 00:00:10.980
So there's no possibility that any of
these functions are interacting with

5
00:00:10.980 --> 00:00:13.840
one another,
except by passing arguments and

6
00:00:13.840 --> 00:00:16.730
then accepting return values
from other functions.

7
00:00:16.730 --> 00:00:18.970
So when we're trying to decide
who's the potential culprit for

8
00:00:18.970 --> 00:00:24.410
this form bug, we can narrow it down
very quickly by looking at the types if

9
00:00:24.410 --> 00:00:25.410
they're sufficiently narrow.

10
00:00:26.410 --> 00:00:29.660
So let's take as an example, when I'm
looking at this function right here,

11
00:00:29.660 --> 00:00:30.390
initEdit.

12
00:00:31.540 --> 00:00:35.830
This is a function that's designed to be
setting up the page for the first time.

13
00:00:35.830 --> 00:00:40.082
So it takes a Session, which includes
the current authenticated user.

14
00:00:40.082 --> 00:00:43.546
It takes Slug, which is sort of the ID,
the identifier for

15
00:00:43.546 --> 00:00:45.612
the article that we're editing.

16
00:00:45.612 --> 00:00:48.590
And returns Model and Cmd Msg.

17
00:00:48.590 --> 00:00:51.010
That is a very broad type to return.

18
00:00:51.010 --> 00:00:54.450
We know that this function can
potentially do anything to the model.

19
00:00:54.450 --> 00:00:57.280
It can potentially run any command,
absolutely any.

20
00:00:58.360 --> 00:01:01.720
And unfortunately, it sort of needs to
have those types because this is init.

21
00:01:01.720 --> 00:01:03.990
I mean, its job is to setup
the model from scratch.

22
00:01:03.990 --> 00:01:07.335
It needs to be able to return the whole
thing because we don't have one yet,

23
00:01:07.335 --> 00:01:08.566
it needs to establish one.

24
00:01:08.566 --> 00:01:10.260
It also needs to run a couple of commands.

25
00:01:10.260 --> 00:01:12.180
It needs to go fetch the actual article.

26
00:01:12.180 --> 00:01:14.949
It needs to run the task for the slow
threshold for our loading spinner.

27
00:01:16.150 --> 00:01:20.500
So in order for it to do its job,
it has to return this fairly broad type.

28
00:01:20.500 --> 00:01:21.470
Okay, fair enough.

29
00:01:22.590 --> 00:01:26.191
But that does mean any time we're
dealing with this form-specific bug,

30
00:01:26.191 --> 00:01:30.337
we have to consider initEdit as one of the
possibilities just by looking at the type.

31
00:01:30.337 --> 00:01:32.230
But let's keep going.

32
00:01:32.230 --> 00:01:33.399
We're gonna skip over the view,

33
00:01:33.399 --> 00:01:35.710
let's just assume this has something
to do with modifying data.

34
00:01:36.710 --> 00:01:41.090
Okay, all of these view functions
are potentially not culprits because

35
00:01:41.090 --> 00:01:43.390
all they ever return is HTML.

36
00:01:43.390 --> 00:01:46.710
If we're worried about some modifications
happening to the form data, well,

37
00:01:46.710 --> 00:01:50.140
the HTML values don't have
anything to do with that.

38
00:01:50.140 --> 00:01:54.990
So it's not so much that these have Button
in the title or View in the title as it

39
00:01:54.990 --> 00:01:57.930
is that I can just look at their types and
say, yeah, none of these are culprits.

40
00:01:57.930 --> 00:02:00.780
I can safely rule out all
these view functions.

41
00:02:00.780 --> 00:02:03.990
Well, what about some code that
actually does modify stuff?

42
00:02:03.990 --> 00:02:07.680
Well, update, much like init, returns
the entire model and the entire command.

43
00:02:07.680 --> 00:02:10.310
So yeah, anything in update is fair game,

44
00:02:10.310 --> 00:02:12.010
we have to potentially
consider this as a culprit.

45
00:02:13.390 --> 00:02:16.120
What about this one, save?

46
00:02:16.120 --> 00:02:20.520
Well, save takes Cred and Status,
and then returns Status and Cmd Msg.

47
00:02:20.520 --> 00:02:22.700
Does Status hold onto the form?

48
00:02:22.700 --> 00:02:24.740
Yes it does, as we saw earlier.

49
00:02:24.740 --> 00:02:26.050
This is exactly where it's held onto.

50
00:02:26.050 --> 00:02:28.370
So the model itself does not
directly hold onto the form,

51
00:02:28.370 --> 00:02:31.600
we only have a form once
we're done loading the data.

52
00:02:31.600 --> 00:02:34.920
So we have it in these four
variants of Status, but

53
00:02:34.920 --> 00:02:38.640
it's still there, which means, yes, this
function, too, is a potential culprit.

54
00:02:39.920 --> 00:02:43.310
So save is a potential culprit,
update is, and initEdit is.

55
00:02:43.310 --> 00:02:47.540
But we have already ruled out all those
view functions, so that's progress.

56
00:02:47.540 --> 00:02:50.139
savingError, again, potential
culprit because it has Status in it.

57
00:02:51.290 --> 00:02:54.120
updateForm, yep,
definitely a potential culprit.

58
00:02:54.120 --> 00:02:55.870
Again, a little bit more of a narrow type.

59
00:02:55.870 --> 00:02:59.500
It doesn't have Status, it doesn't
have Model, but it still has Form, and

60
00:02:59.500 --> 00:03:03.420
it actually ends up returning
the entire Model and Cmd Msg.

61
00:03:03.420 --> 00:03:05.626
So now we have four culprits.

62
00:03:05.626 --> 00:03:09.760
So the question is, how can we
actually narrow these things down?

63
00:03:09.760 --> 00:03:13.000
Well, the answer is by
finding functions like this.

64
00:03:13.000 --> 00:03:16.580
This returns a list of problems,
that's it.

65
00:03:16.580 --> 00:03:20.730
If we have an issue with the form like the
user name field is not working properly,

66
00:03:20.730 --> 00:03:24.600
I can rule this function out just as
quickly as I was able to rule out all

67
00:03:24.600 --> 00:03:28.042
those view functions just by
looking at the return type.

68
00:03:28.042 --> 00:03:30.590
I'm like, yeah,
this thing can't possibly affect the form

69
00:03:30.590 --> 00:03:31.790
because it doesn't work with the form.

70
00:03:31.790 --> 00:03:33.150
All it does is return problems.

71
00:03:34.730 --> 00:03:35.943
That's a good thing to know.

72
00:03:37.849 --> 00:03:40.750
&gt;&gt; Richard Feldman: This one, TrimmedForm,
that could potentially affect it.

73
00:03:40.750 --> 00:03:46.030
HTTP, this one returns an HTTP
request that produces an Article Full.

74
00:03:46.030 --> 00:03:47.320
Could that possibly be the culprit?

75
00:03:47.320 --> 00:03:48.130
No, definitely not.

76
00:03:49.210 --> 00:03:53.200
And so by doing this, I can actually chop
this file down to a list of potential

77
00:03:53.200 --> 00:03:57.310
culprits from this entire list of
600 some-odd lines down to a much,

78
00:03:57.310 --> 00:04:00.410
much smaller set of lines
that I need to consider.

79
00:04:00.410 --> 00:04:03.670
And when I'm debugging, this is exactly
the process that I wanna go through.

80
00:04:03.670 --> 00:04:04.590
I wanna start with saying,

81
00:04:04.590 --> 00:04:10.190
okay, I know the problem is coming
from somewhere within the model.

82
00:04:10.190 --> 00:04:13.080
Somewhere within the model,
something is going wrong.

83
00:04:13.080 --> 00:04:15.481
What are all the functions
that affect the model?

84
00:04:15.481 --> 00:04:18.775
And then I can narrow that down and say,
actually, it's more specific than that,

85
00:04:18.775 --> 00:04:20.628
it's something is going
wrong with the form.

86
00:04:20.628 --> 00:04:22.790
What are all the functions
that interact with the form?

87
00:04:22.790 --> 00:04:25.806
Well, all the ones that interact
with Model, or that return Model,

88
00:04:25.806 --> 00:04:27.710
they're potential culprits.

89
00:04:27.710 --> 00:04:30.058
All the ones that return Status,
they're potential culprits,

90
00:04:30.058 --> 00:04:31.301
cuz that's where the form lives.

91
00:04:31.301 --> 00:04:33.540
All the ones that return Form,
they're potential culprits.

92
00:04:34.610 --> 00:04:38.160
But everything else, just by looking at
the type, doesn't matter how long this

93
00:04:38.160 --> 00:04:41.380
function is, I can't even see it,
it's not on my screen right now.

94
00:04:41.380 --> 00:04:45.400
And I already ruled it out without even
looking at the entirety of the function,

95
00:04:45.400 --> 00:04:47.909
let alone walking through and
figuring out what the implementation does.

96
00:04:49.000 --> 00:04:51.970
So much like in the way that if you're
doing a binary search through a tree,

97
00:04:51.970 --> 00:04:54.410
you can benefit from the tree
being sorted a certain way.

98
00:04:54.410 --> 00:04:56.100
You can go down pathways
more effectively and

99
00:04:56.100 --> 00:04:59.080
say, I can rule out this entire
half of the tree because

100
00:04:59.080 --> 00:05:02.440
the thing that I'm looking for I know has
to be in this part of the sorted tree.

101
00:05:03.450 --> 00:05:08.120
Having narrower types gives us the ability
to traverse our code much more quickly and

102
00:05:08.120 --> 00:05:10.900
rule out things that we don't
need to load into our brains

103
00:05:10.900 --> 00:05:12.869
as we're going through this
process of debugging something.

104
00:05:13.870 --> 00:05:15.470
And it's not just for debugging.

105
00:05:15.470 --> 00:05:16.990
It's for all sorts of different things.

106
00:05:16.990 --> 00:05:19.220
Any time we're making a modification,
I'm wondering, hey,

107
00:05:19.220 --> 00:05:21.830
what are the things that
are potentially impacted by this?

108
00:05:21.830 --> 00:05:24.470
Ideally, we've been using some of the
techniques that we've talked about earlier

109
00:05:24.470 --> 00:05:26.930
in the workshop,
such that if I make a modification, and

110
00:05:26.930 --> 00:05:30.650
there is some edge case,
the compiler's gonna tell me about it.

111
00:05:30.650 --> 00:05:34.448
But assuming that I didn't successfully
do that, which, let's be fair, not

112
00:05:34.448 --> 00:05:38.191
all edge cases can be represented in a way
where the compiler will help us out and

113
00:05:38.191 --> 00:05:40.310
tell us about it,
I wanna be able to do this.

114
00:05:40.310 --> 00:05:41.610
I wanna be able to say, okay,

115
00:05:41.610 --> 00:05:45.480
what are the things that are possibly
affected by this change I'm about to make?

116
00:05:45.480 --> 00:05:49.340
And just do a very quick search through
and see who's potentially affected.

117
00:05:49.340 --> 00:05:50.190
With a change like that,

118
00:05:50.190 --> 00:05:53.600
where I'm looking for something to change
as opposed to looking for the culprit for

119
00:05:53.600 --> 00:05:58.450
a bug, now the arguments come into play,
it's not just the return values.

120
00:05:58.450 --> 00:06:01.690
So if I'm saying, I'm making a change to
the way credentials work, for example,

121
00:06:01.690 --> 00:06:04.120
we talked about Cred earlier.

122
00:06:04.120 --> 00:06:08.300
All the functions that accept Cred are
potentially affected by that change, but

123
00:06:08.300 --> 00:06:10.800
the ones that don't accept
it I know are not affected.

124
00:06:10.800 --> 00:06:12.160
tagsFromString, not affected by that.

125
00:06:13.780 --> 00:06:15.210
create is affected by that.

126
00:06:15.210 --> 00:06:16.670
trimFields, not affected by that.

127
00:06:17.696 --> 00:06:20.000
So there are all these ways
that I can segment my program,

128
00:06:20.000 --> 00:06:22.780
and as I'm running these queries and
thinking about what things affect what

129
00:06:22.780 --> 00:06:27.100
other things, because all functions in Elm
are pure, they can't possibly interact

130
00:06:27.100 --> 00:06:30.540
with one another in any other way
other than calling and returning.

131
00:06:30.540 --> 00:06:35.155
Which means that of the lines of code
in this file, when I'm thinking about,

132
00:06:35.155 --> 00:06:37.820
how is a change going to
impact these things, or

133
00:06:37.820 --> 00:06:40.580
how am I going to find a bug
that impacts these things?

134
00:06:40.580 --> 00:06:42.500
The number lines of code is
actually extremely small,

135
00:06:43.520 --> 00:06:45.040
it's just the type annotations.

136
00:06:45.040 --> 00:06:47.310
Everything else I can pretty much ignore.

137
00:06:48.760 --> 00:06:50.130
Until I get to the very end.

138
00:06:50.130 --> 00:06:52.100
Once I finally narrow it down,
and I say, okay,

139
00:06:52.100 --> 00:06:56.230
I finally narrowed it down to just
this one particular set of functions,

140
00:06:56.230 --> 00:07:01.100
maybe we had a running tally earlier
that was around four or five of them.

141
00:07:01.100 --> 00:07:04.000
Eventually we get it down to just the set
of ones that could actually potentially be

142
00:07:04.000 --> 00:07:05.650
culprits for the bug, and then we say,

143
00:07:05.650 --> 00:07:09.550
okay, now I'll actually look at
the implementation of these things.

144
00:07:09.550 --> 00:07:10.300
And it's a much,

145
00:07:10.300 --> 00:07:12.909
much smaller set of things that
I have to look at at that point.

146
00:07:14.310 --> 00:07:18.010
&gt;&gt; Richard Feldman: Questions about
that idea of narrowing types?

147
00:07:18.010 --> 00:07:19.370
Yeah.

148
00:07:19.370 --> 00:07:21.118
&gt;&gt; Speaker 2: So that's really useful.

149
00:07:21.118 --> 00:07:26.030
Could you actually build a tool or
something to help you with this?

150
00:07:26.030 --> 00:07:29.050
Say, I have a bug in this
part of my model, and

151
00:07:29.050 --> 00:07:31.250
show me all the type signatures that?

152
00:07:32.600 --> 00:07:33.870
&gt;&gt; Richard Feldman: Yeah,
you totally could.

153
00:07:33.870 --> 00:07:37.160
Question was, is there tooling you could
have that would show you, like you say,

154
00:07:37.160 --> 00:07:41.040
I have a bug in this part of my model,
show me all the dependencies of that.

155
00:07:41.040 --> 00:07:42.510
Definitely, I mean,
the information's there.

156
00:07:42.510 --> 00:07:44.710
I've never heard of a tool like that,
but it sounds awesome.

