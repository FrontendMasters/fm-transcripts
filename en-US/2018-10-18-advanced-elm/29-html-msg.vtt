WEBVTT

1
00:00:00.000 --> 00:00:02.325
&gt;&gt; Richard Feldman: The third thing
we wanna talk about is Html msg.

2
00:00:02.325 --> 00:00:05.082
That is msg with a lowercase m.

3
00:00:05.082 --> 00:00:08.552
So this is a form of reuse in
which we're essentially saying,

4
00:00:08.552 --> 00:00:12.970
I've got a piece of my view, some view
code, some rendering logic for the UI.

5
00:00:12.970 --> 00:00:17.396
And I wanna use this in multiple modules,
or potentially in multiple places.

6
00:00:17.396 --> 00:00:19.870
I guess it could be
within the same module.

7
00:00:19.870 --> 00:00:22.343
Here's an example of the absolute,

8
00:00:22.343 --> 00:00:25.622
simplest possible,
reusable view you can get.

9
00:00:25.622 --> 00:00:27.959
Html msg, it's not even a function.

10
00:00:27.959 --> 00:00:29.550
This is our loading icon.

11
00:00:29.550 --> 00:00:33.172
And if you reference it with loading.icon,

12
00:00:33.172 --> 00:00:39.273
in those places where we were doing
the loading slowly custom type variant,

13
00:00:39.273 --> 00:00:42.341
this is what we displayed to the user.

14
00:00:42.341 --> 00:00:46.378
We don't wanna write out this entire
asset.src, and specify the width, and

15
00:00:46.378 --> 00:00:48.719
height, and
the alt text every single time.

16
00:00:48.719 --> 00:00:51.996
So I just extracted one
piece of code here.

17
00:00:51.996 --> 00:00:54.381
This is a helper,
it's not even a helper function.

18
00:00:54.381 --> 00:00:57.720
That just says I'm gonna do all that for
you, and you can drop it in anywhere.

19
00:00:57.720 --> 00:01:01.097
The reason you can drop it in anywhere is
because it has an unbound type variable.

20
00:01:01.097 --> 00:01:04.522
So no matter what page I'm on, no matter
what that page's message type is,

21
00:01:04.522 --> 00:01:05.597
this will work with it.

22
00:01:05.597 --> 00:01:07.577
I can just drop it in, no sweat.

23
00:01:07.577 --> 00:01:10.901
We have a slightly more
complicated version for error.

24
00:01:10.901 --> 00:01:13.069
As you can see,
it's doing a whole lot of work here.

25
00:01:13.069 --> 00:01:16.457
It takes the string and then wraps
it in the words, Error loading, and

26
00:01:16.457 --> 00:01:18.077
then passes that to Html.text.

27
00:01:18.077 --> 00:01:22.166
Really complicated one, super glad that
I don't have to write that everywhere.

28
00:01:22.166 --> 00:01:25.355
Also, I mean,
there is some benefit to centralization.

29
00:01:25.355 --> 00:01:29.918
I mean jokes aside, it's a very small
amount of reuse, but it is still useful.

30
00:01:29.918 --> 00:01:33.739
But if I ever decided that I wanted to
format the errors in a particular way,

31
00:01:33.739 --> 00:01:34.649
change the font or

32
00:01:34.649 --> 00:01:38.535
maybe color them red, because I'm
reusing this so much different places,

33
00:01:38.535 --> 00:01:42.384
I can change it in one place and have it
be consistent across all of my views.

34
00:01:42.384 --> 00:01:45.699
One of the considerations that comes
up for views, that doesn't typically

35
00:01:45.699 --> 00:01:48.647
come up when we're using business
logic is that, in a lot of cases,

36
00:01:48.647 --> 00:01:51.857
there is an element of consistency
that you want across your branding, or

37
00:01:51.857 --> 00:01:53.500
your theming, or things like that.

38
00:01:53.500 --> 00:01:55.607
And reuse is a good way to achieve that.

39
00:01:55.607 --> 00:01:57.676
So make sure that you're staying
consistent among things.

40
00:01:57.676 --> 00:01:59.470
And if you change something in one place,

41
00:01:59.470 --> 00:02:01.426
it's going to get changed
across the board.

42
00:02:01.426 --> 00:02:04.565
Having said that,
there's also a bit of a risk where,

43
00:02:04.565 --> 00:02:09.018
just as in our data model that we saw
earlier, sometimes things are the same.

44
00:02:09.018 --> 00:02:12.595
But actually, some other times,
things are slightly different, but

45
00:02:12.595 --> 00:02:15.230
they're sorta temptingly
close to being the same.

46
00:02:15.230 --> 00:02:19.439
And so you can end up with UIs where,
if I use this grid layout and

47
00:02:19.439 --> 00:02:23.899
I specify these widths exactly right,
that'll be really great.

48
00:02:23.899 --> 00:02:26.924
And then you come across a situation
where it's like, yeah, but

49
00:02:26.924 --> 00:02:29.685
really the best design is to
have this not quite in the grid.

50
00:02:29.685 --> 00:02:31.975
And there's sort of an innate
pressure to say, yeah, but

51
00:02:31.975 --> 00:02:34.804
I wanna reuse all this nice grid stuff
that I have and all these helpers.

52
00:02:34.804 --> 00:02:37.910
It's gonna be so beautiful and
easy, from a code perspective.

53
00:02:37.910 --> 00:02:40.302
Maybe I'll just let
the user sacrifice that,

54
00:02:40.302 --> 00:02:44.549
and I'll just do this slightly suboptimal
design, so that I can reuse this code.

55
00:02:44.549 --> 00:02:49.456
It's just so much of a trap on the side of
user interfaces as it is anywhere else,

56
00:02:49.456 --> 00:02:50.642
arguable more so.

57
00:02:50.642 --> 00:02:54.346
So again, there's that word of caution,
that it can be a pro, but

58
00:02:54.346 --> 00:02:57.007
with great power comes
great responsibility.

59
00:02:57.007 --> 00:03:00.356
Always be asking the question,
are these things actually the same,

60
00:03:00.356 --> 00:03:01.576
should I use reuse here?

61
00:03:01.576 --> 00:03:05.036
Or is it actually a better idea to
just say, nope, these are different,

62
00:03:05.036 --> 00:03:06.987
I'm gonna implement them separately.

63
00:03:06.987 --> 00:03:12.701
Okay, so these are two examples of
using Html with unbound type variable.

64
00:03:12.701 --> 00:03:13.683
Where in both cases,

65
00:03:13.683 --> 00:03:17.298
they're just returning Html that's
compatible with absolutely anything.

66
00:03:17.298 --> 00:03:18.339
But sometimes,

67
00:03:18.339 --> 00:03:22.885
you have a type variable that is bound
to something else in the function.

68
00:03:22.885 --> 00:03:24.085
So here's an example of that.

69
00:03:24.085 --> 00:03:27.547
This is our follow and
unfollow buttons from earlier.

70
00:03:27.547 --> 00:03:31.436
So both of these have a fairly
complicated msg type here,

71
00:03:31.436 --> 00:03:33.629
as we talked about previously.

72
00:03:33.629 --> 00:03:38.598
Because that's actually, the goal of
the design is to encourage having

73
00:03:38.598 --> 00:03:42.600
a msg type that incorporates Cred and
unfollow an author.

74
00:03:42.600 --> 00:03:46.233
But we can look at another example of
reuse that actually takes a simpler msg

75
00:03:46.233 --> 00:03:50.455
type, because it doesn't have that design
goal, which is favorite and unfavorite.

76
00:03:50.455 --> 00:03:53.291
So this is the equivalent of following,
but for articles.

77
00:03:53.291 --> 00:03:56.409
You can favorite an article or fave it,
if you will, by clicking on it and

78
00:03:56.409 --> 00:03:57.546
giving it a little heart.

79
00:03:57.546 --> 00:03:59.638
And now that appears in
your list of favorites.

80
00:03:59.638 --> 00:04:04.587
And also that author gets bragging rights
of the additional heart showing up

81
00:04:04.587 --> 00:04:05.755
on that article.

82
00:04:05.755 --> 00:04:08.302
So this takes a couple of arguments.

83
00:04:08.302 --> 00:04:09.418
But for our purposes,

84
00:04:09.418 --> 00:04:12.838
we're most interested in the ones
that have this msg type variable.

85
00:04:12.838 --> 00:04:15.950
So Cred is serving the same function
as it did before, saying that

86
00:04:15.950 --> 00:04:19.414
you should only be able to render
a favoriteButton if you're signed in.

87
00:04:19.414 --> 00:04:24.815
But the msg here is saying, hey, give me a
msg that represents favoriting something.

88
00:04:24.815 --> 00:04:26.633
That's what I'm gonna
produce when I click.

89
00:04:26.633 --> 00:04:30.646
And then, I'm also gonna take a list
of attributes and a list of children,

90
00:04:30.646 --> 00:04:34.086
basically so that I can call
favoriteButton in the same way that I

91
00:04:34.086 --> 00:04:36.337
would call button from the Html library.

92
00:04:36.337 --> 00:04:39.970
This is a design where you sort
of intentionally make it so

93
00:04:39.970 --> 00:04:41.939
that when you call this thing,

94
00:04:41.939 --> 00:04:46.556
you're going to specify a list of
attributes and a list of children, and

95
00:04:46.556 --> 00:04:51.575
sort of incorporate those into whatever
it is that you're deciding to reuse.

96
00:04:51.575 --> 00:04:54.533
So we can see, these both
delegate to toggleFavoriteButton.

97
00:04:54.533 --> 00:04:57.285
Which is a helper function,
much like we saw earlier.

98
00:04:57.285 --> 00:05:01.488
And once again, all it does is it renders
this same structure that we saw with

99
00:05:01.488 --> 00:05:05.426
the follow button, which is
an Html.button that's got an i in there,

100
00:05:05.426 --> 00:05:07.020
with the class ion-heart.

101
00:05:07.020 --> 00:05:10.263
And then it just takes
the class that we specified.

102
00:05:10.263 --> 00:05:14.761
Which is to say, either this one or this
one, depending on whether it's fave or

103
00:05:14.761 --> 00:05:19.194
unfave, and then attaches that to the
other list of default attributes that we

104
00:05:19.194 --> 00:05:20.287
wanna pass along.

105
00:05:20.287 --> 00:05:23.201
By the way,
worth noting that this is an example.

106
00:05:23.201 --> 00:05:26.911
This favoriteButton is an example of the
thing that we talked about previously with

107
00:05:26.911 --> 00:05:28.554
the idea of enforcement arguments.

108
00:05:28.554 --> 00:05:30.951
This actually is not using
the Cred that you give it.

109
00:05:30.951 --> 00:05:32.982
It really just throws it in the trash.

110
00:05:32.982 --> 00:05:36.458
It's only being passed in because we
want to enforce that you only can render

111
00:05:36.458 --> 00:05:39.140
favorite and
unfavorite buttons when you're logged in.

112
00:05:39.140 --> 00:05:42.220
So the last piece to note
about this is that, again,

113
00:05:42.220 --> 00:05:46.150
we are not actually returning Html
with an unbound type variable.

114
00:05:46.150 --> 00:05:49.002
It's bound to the msg
in these other things.

115
00:05:49.002 --> 00:05:54.220
So what this is essentially saying, is
it's saying hey caller, you need to tell

116
00:05:54.220 --> 00:05:59.515
me what the msg is that you're gonna use
to record that the user clicked favorite,

117
00:05:59.515 --> 00:06:04.605
and another one that you're gonna use to
tell me that the user did unfavorite.

118
00:06:04.605 --> 00:06:07.466
This is the sorta pattern I like to call,
teach me how to message.

119
00:06:07.466 --> 00:06:09.453
It's like, I don't actually know
how to do one of these messages.

120
00:06:09.453 --> 00:06:12.815
I don't have a notion of favoriting and
unfavoriting.

121
00:06:12.815 --> 00:06:13.808
You've gotta teach me that.

122
00:06:13.808 --> 00:06:16.455
When you call me,
tell me how to do that, and

123
00:06:16.455 --> 00:06:19.613
I'm just gonna wire that
up to the onclick handler.

124
00:06:19.613 --> 00:06:21.385
Which is exactly what it does.

125
00:06:21.385 --> 00:06:24.811
So we can see how this thing is used,
if we search for it in the code base.

126
00:06:24.811 --> 00:06:27.167
It's used in a couple of different places.

127
00:06:27.167 --> 00:06:30.148
So used on the article page,
it's used on the article feed.

128
00:06:30.148 --> 00:06:33.955
And it's used on the,
&gt;&gt; Richard Feldman: Actually,

129
00:06:33.955 --> 00:06:35.890
I guess just those two places.

130
00:06:35.890 --> 00:06:37.394
So here it is in the feed.

131
00:06:37.394 --> 00:06:41.119
And here it's passing
it an actual concrete.

132
00:06:41.119 --> 00:06:44.849
Sorry, that was the favorite, not the,
or yes, sorry, that is what we want.

133
00:06:44.849 --> 00:06:48.099
So here it's passing this
ClickedUnfavorite and

134
00:06:48.099 --> 00:06:51.746
ClickedFavorite, depending
on which of the two it is.

135
00:06:51.746 --> 00:06:54.563
And that's part of an actual
concrete Msg type.

136
00:06:54.563 --> 00:06:58.181
So this is an example of this module
sort of teaching the fave and

137
00:06:58.181 --> 00:07:03.050
unfave buttons how to record one of these
messages when the user clicks that action.

138
00:07:03.050 --> 00:07:06.002
But everything else is being
reused inside of that.

139
00:07:06.002 --> 00:07:08.513
So this thing doesn't need to know about
the actual structure of that button.

140
00:07:08.513 --> 00:07:10.449
It just says, hey,
I'm gonna give you some Cred.

141
00:07:10.449 --> 00:07:13.912
I'm gonna give you the clicked fave and
unfave messages, and

142
00:07:13.912 --> 00:07:16.849
you just make sure those
get sent when appropriate.

143
00:07:18.403 --> 00:07:23.124
&gt;&gt; Richard Feldman: Questions about that
as a tactic for reuse, passing in a msg?

144
00:07:23.124 --> 00:07:25.904
And by the way,
you're not limited to just one msg.

145
00:07:25.904 --> 00:07:30.103
Another thing you could do here
is you could say something like,

146
00:07:30.103 --> 00:07:31.282
fave is this msg.

147
00:07:31.282 --> 00:07:34.871
And then we can have something
else that's like, I don't know,

148
00:07:34.871 --> 00:07:36.710
funkyFave, which another msg.

149
00:07:36.710 --> 00:07:38.994
Then we have superFave, I don't know.

150
00:07:38.994 --> 00:07:42.015
We could have a bunch of different
configuration options here and say,

151
00:07:42.015 --> 00:07:45.709
give me different messages for different
scenarios, and I'm gonna wire them all up.

152
00:07:45.709 --> 00:07:47.878
Who knows how.

153
00:07:47.878 --> 00:07:54.002
But in this case, we only need to give
them one message and that's enough.

