WEBVTT

1
00:00:00.235 --> 00:00:01.758
&gt;&gt; Richard Feldman: So
we'll talk about a few things here.

2
00:00:01.758 --> 00:00:03.911
First we're gonna talk
about pipeline types.

3
00:00:03.911 --> 00:00:08.874
We're gonna talk about Decode.andThen,
then decoderizing which is a term

4
00:00:08.874 --> 00:00:12.401
I made up and
finally intermediate representations.

5
00:00:12.401 --> 00:00:14.871
Okay, let's start with pipeline types.

6
00:00:14.871 --> 00:00:19.021
And before we get to pipeline types, we're
actually gonna build our way up to that by

7
00:00:19.021 --> 00:00:22.936
talking about just plain old decoding
types, the plain old decoder primitives

8
00:00:22.936 --> 00:00:25.288
themselves that are gonna
be used in pipeline.

9
00:00:25.288 --> 00:00:28.602
So let's say we have a type alias
called Instructor, and it's got name,

10
00:00:28.602 --> 00:00:32.253
which is a string, courses, which is
an Int, and isTeaching, which is a Bool.

11
00:00:32.253 --> 00:00:35.426
So let's say Richard,
num_courses, 2 and active,

12
00:00:35.426 --> 00:00:38.815
these are the things that we're
going to be decoding from.

13
00:00:38.815 --> 00:00:41.653
So that's the JSON on the right,
and then on the left,

14
00:00:41.653 --> 00:00:45.048
we have the type alias that we're
going to decode into, okay, so

15
00:00:45.048 --> 00:00:48.445
because we've defined a record type alias,
anytime we do that,

16
00:00:48.445 --> 00:00:51.994
we get this function for free that
is the same name as the type alias.

17
00:00:51.994 --> 00:00:54.933
So if I put Instructor with
a capital I in record,

18
00:00:54.933 --> 00:00:58.667
just because I've defined this type alias,
it's going to say, cool,

19
00:00:58.667 --> 00:01:01.753
that is a function from String
to Int to Bool to Instructor.

20
00:01:01.753 --> 00:01:05.860
Because this has three fields, they are
defined String, Int, Bool, in that order,

21
00:01:05.860 --> 00:01:07.902
so that’s where the arguments come from.

22
00:01:07.902 --> 00:01:12.190
And if I provide all these, it’s going to
populate each of these fields in one of

23
00:01:12.190 --> 00:01:14.824
these records and return and
instructor for me.

24
00:01:14.824 --> 00:01:22.009
Okay, I can decode a single field from
any JSON object by using decode.field.

25
00:01:22.009 --> 00:01:26.404
So the way this decoder works is it takes
a string for the name of the field then it

26
00:01:26.404 --> 00:01:30.401
takes a decoder for the expected
value associated with that field, and

27
00:01:30.401 --> 00:01:34.687
then it gives me back a decoder which
will decode that value from the object.

28
00:01:34.687 --> 00:01:39.329
Important to note how
decode.field works in isolation.

29
00:01:39.329 --> 00:01:44.393
If all I do is I run this decoder on
a JSON object, all this decoder is

30
00:01:44.393 --> 00:01:49.471
going to do is it's gonna say I
don't care what's on that object.

31
00:01:49.471 --> 00:01:53.553
If that feels on there and its got that
value, we're good, decoding succeeded.

32
00:01:53.553 --> 00:01:56.030
It does not care at all
the rest of the values.

33
00:01:56.030 --> 00:01:57.726
It doesn't care about
the rest of the fields.

34
00:01:57.726 --> 00:02:01.341
It just cares does it have
at least that one field and

35
00:02:01.341 --> 00:02:03.370
is it the type that I expect.

36
00:02:03.370 --> 00:02:05.559
If so, great, we decoded and we succeeded,

37
00:02:05.559 --> 00:02:09.477
this is important to note because when we
start putting these things together and

38
00:02:09.477 --> 00:02:13.182
we start using multiple decode fields,
it's important to remember that.

39
00:02:13.182 --> 00:02:17.385
At no point are we saying this is
the exact shape of that JSON object.

40
00:02:17.385 --> 00:02:21.061
So essentially it works kind of like open
records in the sense of saying I expect

41
00:02:21.061 --> 00:02:24.457
that at least that field is present,
but there may be others, and if so,

42
00:02:24.457 --> 00:02:25.535
I don't really care.

43
00:02:25.535 --> 00:02:29.416
Okay, so let's decode that field.

44
00:02:29.416 --> 00:02:34.365
So we've got our instructor,
we've got decode.field.

45
00:02:34.365 --> 00:02:41.112
And we can put these
together with decode.map3.

46
00:02:41.112 --> 00:02:43.519
So let's say we take a look
at this function and

47
00:02:43.519 --> 00:02:45.433
we see that it takes three decoders,

48
00:02:45.433 --> 00:02:49.651
there's also a map two which takes two
decoders and map which takes one decoder.

49
00:02:49.651 --> 00:02:53.900
And it takes a function from a to b to c,
where a is the first Decoder's type, b is

50
00:02:53.900 --> 00:02:58.405
the second one's type, and c is the third
one's type, and that function is going to

51
00:02:58.405 --> 00:03:02.433
take a to b to c and return a val, and
ultimately this gives us a decoder val.

52
00:03:02.433 --> 00:03:06.272
So using all the ingredients
that we have here on the screen,

53
00:03:06.272 --> 00:03:11.088
we can see that if we want to make a
decoder that's going to decode some fields

54
00:03:11.088 --> 00:03:14.725
into an instructor and
end up with a decoder instructor.

55
00:03:14.725 --> 00:03:16.787
This is one way we can do that.

56
00:03:16.787 --> 00:03:18.970
We can say Decode.map3.

57
00:03:18.970 --> 00:03:22.881
Pass or function right here
which is string, int, to bool.

58
00:03:22.881 --> 00:03:27.963
Then pass a decoder string, a decoder
int to the decoder bool which we can

59
00:03:27.963 --> 00:03:32.980
use Decode.field to get as
the corresponding fields on a JSON object.

60
00:03:32.980 --> 00:03:37.163
And then, by putting all these together,
we say Decode.map3,

61
00:03:37.163 --> 00:03:42.096
Instructor, field name string,
field courses int, field active bool, and

62
00:03:42.096 --> 00:03:46.078
what map3 is going to do is it's
going to run them one at a time.

63
00:03:46.078 --> 00:03:48.947
It's going to run this one and
say, okay, did that succeed?

64
00:03:48.947 --> 00:03:50.962
And it says, all right, the first Decoder.

65
00:03:50.962 --> 00:03:55.736
If it's a field name and there is in fact
a field on that JSON object called name

66
00:03:55.736 --> 00:03:57.577
which happens to be a string.

67
00:03:57.577 --> 00:04:00.326
Then it says, great,
that decoder succeeded, next one.

68
00:04:00.326 --> 00:04:02.131
Run it again, that one succeeded.

69
00:04:02.131 --> 00:04:04.891
Run it again, run the third one,
that succeeded.

70
00:04:04.891 --> 00:04:08.373
Now, if all three of them succeeded,
then it's gonna say,

71
00:04:08.373 --> 00:04:12.692
great, I now have three values that I
can pass to this function right here.

72
00:04:12.692 --> 00:04:15.451
And since what we provided for
this function was instructor,

73
00:04:15.451 --> 00:04:16.464
it's gonna say okay.

74
00:04:16.464 --> 00:04:19.515
Take that first one, passes
the first argument, second argument,

75
00:04:19.515 --> 00:04:21.735
there was a third argument
which is the same name.

76
00:04:21.735 --> 00:04:24.495
That string is gonna be the first
argument which is what we want.

77
00:04:24.495 --> 00:04:26.124
Second is gonna be int
which is also what we want.

78
00:04:26.124 --> 00:04:28.192
And the third one is gonna be
a bool which is also what we want.

79
00:04:28.192 --> 00:04:32.512
And finally we will end up having
successfully decoded this instructor.

80
00:04:32.512 --> 00:04:35.274
So this is how to do it using map three.

