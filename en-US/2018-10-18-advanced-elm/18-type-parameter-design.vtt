WEBVTT

1
00:00:00.000 --> 00:00:02.110
&gt;&gt; Richard Feldman: So
one other use for, sorry, so

2
00:00:02.110 --> 00:00:05.458
that's essentially the trade
offs between these three.

3
00:00:05.458 --> 00:00:08.083
So the first one lists attribute
message with a lowercase m.

4
00:00:08.083 --> 00:00:11.515
It says I will accept any type of
attribute you want to give me,

5
00:00:11.515 --> 00:00:15.081
I don't care what it is,
just throw it at me and I will accept it.

6
00:00:15.081 --> 00:00:19.382
Second one says, give me an attribute
that is specifically your message type.

7
00:00:19.382 --> 00:00:22.360
Like this concrete,
I want this exact type of message.

8
00:00:22.360 --> 00:00:26.964
And the third one says,
only give me a list of unbound attributes.

9
00:00:26.964 --> 00:00:29.200
They have to still be unbound
when you provide them to me,

10
00:00:29.200 --> 00:00:30.562
otherwise I will not accept them.

11
00:00:30.562 --> 00:00:32.844
They can't be doing any
event handling on them.

12
00:00:32.844 --> 00:00:36.986
So those are the trade offs, and there are
good reasons to use all three of these.

13
00:00:36.986 --> 00:00:40.092
Okay, so
the reason that it's called never,

14
00:00:40.092 --> 00:00:44.324
incidentally as we saw anyone
can define their own never type.

15
00:00:44.324 --> 00:00:46.220
They don't have to call it never,
they can call it whatever they want.

16
00:00:46.220 --> 00:00:48.646
The whole point of it is just to
define it in terms of itself so

17
00:00:48.646 --> 00:00:50.011
that it can't be instantiated.

18
00:00:50.011 --> 00:00:54.262
Test is a reused one that
comes with the core package,

19
00:00:54.262 --> 00:00:57.956
and its purpose in that
package is with tasks.

20
00:00:57.956 --> 00:01:02.854
And it's called never because the idea is
it represents a task that never fails,

21
00:01:02.854 --> 00:01:04.955
a task that cannot possibly fail.

22
00:01:04.955 --> 00:01:09.369
And it's used in this function,
Task.perform.

23
00:01:09.369 --> 00:01:14.280
So tasks in Elm, if you've never used
them before, are essentially the idea of

24
00:01:14.280 --> 00:01:17.744
sort of a chainable command
is one way of thinking of it.

25
00:01:17.744 --> 00:01:21.975
So it's gonna perform an effect of some
sort, a task might include things like

26
00:01:21.975 --> 00:01:25.705
running an HTP request, you can
convert your HTP requests to tasks.

27
00:01:25.705 --> 00:01:28.646
You can chain them together and
say when this task is done,

28
00:01:28.646 --> 00:01:32.505
run this next task assuming the previous
one succeeded, things like that.

29
00:01:32.505 --> 00:01:37.876
And by default tasks much like
result have both an error type,

30
00:01:37.876 --> 00:01:40.058
as well as success type.

31
00:01:40.058 --> 00:01:43.698
So you can say like I have a task for
example of http.error as well as

32
00:01:43.698 --> 00:01:48.121
whatever the success value of your HTTP
request is based on what it's decoding.

33
00:01:48.121 --> 00:01:53.012
And what Task.perform is saying right
here is first, it's saying, okay,

34
00:01:53.012 --> 00:01:56.716
I need a way to translate your
success type into a message.

35
00:01:56.716 --> 00:02:00.272
And I need you to give me
a task that never fails.

36
00:02:00.272 --> 00:02:04.844
I need you to give me a task that still
has its error type unbound because this

37
00:02:04.844 --> 00:02:07.400
task is not capable of producing errors.

38
00:02:07.400 --> 00:02:10.910
So its exactly the same principle
that the test was using to say,

39
00:02:10.910 --> 00:02:14.032
I want a list of attributes
that do not produce messages.

40
00:02:14.032 --> 00:02:18.384
This is saying I want a task
that does not produce errors.

41
00:02:18.384 --> 00:02:22.415
And if so then I can give you
a command that will work.

42
00:02:22.415 --> 00:02:26.324
So essentially this is saying, give me
a way you can convert success type into

43
00:02:26.324 --> 00:02:30.535
a message, and then I'll take your task,
which I know can't fail, I'll run it,

44
00:02:30.535 --> 00:02:33.624
I know it's gonna succeed
because it can't possibly fail.

45
00:02:33.624 --> 00:02:37.074
It'll give me that success value,
I'll convert that into a message, and

46
00:02:37.074 --> 00:02:38.461
then there's your command.

47
00:02:38.461 --> 00:02:42.533
This is in contrast with Task.attempt,
which requires two of these functions

48
00:02:42.533 --> 00:02:45.949
right here, one for the success case and
one for the failure case.

49
00:02:45.949 --> 00:02:49.762
Perform says, you don't need to specify
what to do in the failure case,

50
00:02:49.762 --> 00:02:53.155
because by this type I know that
the failure case can't come up.

51
00:02:53.155 --> 00:02:56.655
So that's an example,
here is a task that can never fail.

52
00:02:56.655 --> 00:03:00.252
This is called getViewport and it returns
the dimensions of the entire window

53
00:03:00.252 --> 00:03:03.810
present, which of course can change,
that the user can resize the window.

54
00:03:03.810 --> 00:03:06.883
So depending on when you call this it
might give you a different answer which is

55
00:03:06.883 --> 00:03:10.120
why the task is opposed to just a plain
function that just returned the viewport.

56
00:03:10.120 --> 00:03:14.354
So getting the viewport is
a task that can never fail.

57
00:03:14.354 --> 00:03:16.345
It will always return an answer.

58
00:03:16.345 --> 00:03:20.753
And that's represented by the fact that
its error type is still unbound in

59
00:03:20.753 --> 00:03:21.686
the function.

60
00:03:21.686 --> 00:03:24.698
Sorry, it's not a function,
it's just a value.

61
00:03:24.698 --> 00:03:28.364
So here's the type of getViewport again,
remember for

62
00:03:28.364 --> 00:03:31.800
the next slide that we're
accepting a Task Never a.

63
00:03:31.800 --> 00:03:35.154
So let's say,
our message type says, we have

64
00:03:35.154 --> 00:03:39.982
one variant called ViewportChanged,
and it accepts a Viewport.

65
00:03:39.982 --> 00:03:43.885
We're gonna call Task.perform passing
ViewportChanged which was the aid to

66
00:03:43.885 --> 00:03:46.910
message function which is to say,
this variant right here.

67
00:03:46.910 --> 00:03:51.726
It has getViewport as the other argument,
which is Task x Viewport.

68
00:03:51.726 --> 00:03:56.211
Now remember that, that second argument
there was expecting a Task Never a,

69
00:03:56.211 --> 00:03:59.878
so a is the success type which is
accurate for what we want here.

70
00:03:59.878 --> 00:04:04.062
And then basically Elm is going to
unify these two and say okay great,

71
00:04:04.062 --> 00:04:05.875
this is going to give me back.

72
00:04:05.875 --> 00:04:10.195
So it's expecting a task that never
fails which is to say Task Never a and

73
00:04:10.195 --> 00:04:12.794
what we're giving it is a Task x Viewport.

74
00:04:12.794 --> 00:04:16.399
So it's actually going to unify
both of those at the same time,

75
00:04:16.399 --> 00:04:19.680
in the same way that we saw
with Open Records previously.

76
00:04:19.680 --> 00:04:23.390
So the first type variable,
it's gonna say, okay, Never and

77
00:04:23.390 --> 00:04:28.370
unbound, that unifies to Never, because
Never is the more constrained of the two.

78
00:04:28.370 --> 00:04:33.558
And then for the success type it's
gonna unify unbound a with Viewport and

79
00:04:33.558 --> 00:04:36.747
unify those the more constrained Viewport.

80
00:04:36.747 --> 00:04:39.051
So in the end, it says, well,
we have a Task Never Viewport.

81
00:04:39.051 --> 00:04:41.178
Fantastic that works,
that does what we want.

82
00:04:41.178 --> 00:04:46.639
And so I will compile and convert it to
command and everything works out great.

83
00:04:46.639 --> 00:04:48.747
Yeah?
&gt;&gt; Speaker 2: I'm assuming the reason that

84
00:04:48.747 --> 00:04:53.530
getViewport, the error type isn't
actually Never is that it can be used for

85
00:04:53.530 --> 00:04:57.228
other tasks that are maybe less-
&gt;&gt; Richard Feldman: Yes, exactly, yeah.

86
00:04:57.228 --> 00:05:01.690
So the reason that this is not Never,
but rather an unbound type is yeah,

87
00:05:01.690 --> 00:05:05.220
exactly, so that it is
compatible with any other tasks.

88
00:05:05.220 --> 00:05:07.479
So if you wanna chain this
together with other tasks,

89
00:05:07.479 --> 00:05:09.903
it's really important that
it be compatible with them.

90
00:05:09.903 --> 00:05:13.449
If we're gonna chain two tasks together,
they have to have the same error type, or

91
00:05:13.449 --> 00:05:14.929
at least compatible error types.

92
00:05:14.929 --> 00:05:19.146
So that if something fails, Elm knows what
the error type is that it's gonna send

93
00:05:19.146 --> 00:05:21.575
to the message that
represents that failure.

94
00:05:21.575 --> 00:05:23.330
So this can be chained together
with absolutely anything,

95
00:05:23.330 --> 00:05:24.851
because there's no chance
that it's gonna fail.

96
00:05:24.851 --> 00:05:29.068
So just use whatever error
type the other thing has, but

97
00:05:29.068 --> 00:05:33.203
that wouldn't be true if it
were Task Never Viewport.

98
00:05:33.203 --> 00:05:34.731
Are there questions?

99
00:05:34.731 --> 00:05:38.786
Okay, so to recap,
we talked about units of measure and

100
00:05:38.786 --> 00:05:43.277
how we can prevent expensive
space equipment from crashing,

101
00:05:43.277 --> 00:05:46.491
by using custom types with type variables.

102
00:05:46.491 --> 00:05:52.556
We talked about accessible HTML and sort
of ways that we can implement that and

103
00:05:52.556 --> 00:05:57.505
prevent ourselves from constructing
paragraph tags that have

104
00:05:57.505 --> 00:06:00.604
click handlers on them by using never.

105
00:06:00.604 --> 00:06:04.128
We talked about the other uses for
the never type specifically in tasks,

106
00:06:04.128 --> 00:06:05.996
the idea of a task that can never fail.

107
00:06:05.996 --> 00:06:08.894
And finally,
we talked about type parameter design in

108
00:06:08.894 --> 00:06:12.998
the context of the trade offs between
phantom types and non-phantom types.

109
00:06:12.998 --> 00:06:16.842
We talked about how we can use Never as
a constraint to require that something is

110
00:06:16.842 --> 00:06:17.669
still unbound.

111
00:06:17.669 --> 00:06:21.856
And how that will unify with
when you have two different type

112
00:06:21.856 --> 00:06:25.384
variables as we saw in
the case of Task.perform.

