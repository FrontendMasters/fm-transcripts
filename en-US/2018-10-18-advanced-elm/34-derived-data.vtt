WEBVTT

1
00:00:00.230 --> 00:00:02.010
&gt;&gt; Richard Feldman: Other
one is derived data.

2
00:00:03.660 --> 00:00:06.360
So let's say we have this
timestamp on our server,

3
00:00:06.360 --> 00:00:10.110
of one of our articles, and
that's what's stored in the database,

4
00:00:10.110 --> 00:00:12.560
and that's sort of the original
source of truth, right?

5
00:00:12.560 --> 00:00:14.500
This is data that lives on the server, and

6
00:00:14.500 --> 00:00:16.560
if anybody disagrees with the server,
they're wrong.

7
00:00:16.560 --> 00:00:17.950
The server is right.

8
00:00:17.950 --> 00:00:20.090
Let's general trend with
client server interaction.

9
00:00:20.090 --> 00:00:23.250
It's usually if the server things
one thing on the client things on

10
00:00:23.250 --> 00:00:24.440
the different thing.

11
00:00:24.440 --> 00:00:25.750
Generally speaking to
the servers gonna win, so

12
00:00:25.750 --> 00:00:27.280
if you're gonna have to
pick one source of truth.

13
00:00:27.280 --> 00:00:30.110
It's usually best to assume
the servers is correct.

14
00:00:30.110 --> 00:00:32.145
So it's coming back to the server and

15
00:00:32.145 --> 00:00:35.768
says, Come here cross the wire
in ISO-8601 string format.

16
00:00:35.768 --> 00:00:39.199
So it's a string that is gonna
come across and some JSON blog and

17
00:00:39.199 --> 00:00:42.761
we're going to decode that into
a Time.Posix, and from there,

18
00:00:42.761 --> 00:00:46.064
we're going to translate that,
we're going to render it,

19
00:00:46.064 --> 00:00:50.384
into the end user as a nicely formatted
humanly readable string in the client.

20
00:00:50.384 --> 00:00:51.120
And then finally,

21
00:00:51.120 --> 00:00:54.340
we're going to put that string in Html and
we're going to see something like this.

22
00:00:55.850 --> 00:00:58.779
So all of this is derived data.

23
00:00:58.779 --> 00:01:01.864
We have one source of truth at the root
here which is the database Timestamp and

24
00:01:01.864 --> 00:01:04.020
everything else is derived from that.

25
00:01:04.020 --> 00:01:08.990
This ISO-8601 string can be derived from
having this, given that we can derive

26
00:01:08.990 --> 00:01:11.460
this, given that we derive this and
given that we derive this.

27
00:01:12.500 --> 00:01:16.060
So there is really no motivation for
an example like this for

28
00:01:16.060 --> 00:01:18.470
us to have multiple sources of truth for
this.

29
00:01:18.470 --> 00:01:20.940
We're just saying yeah database
is the source of truth and

30
00:01:20.940 --> 00:01:24.120
everybody is just saying tell me
a thing that came from the database and

31
00:01:24.120 --> 00:01:30.350
I will translate it into one additional
step, or translate it one step further.

32
00:01:30.350 --> 00:01:32.800
So as far as like where
these things actually live,

33
00:01:32.800 --> 00:01:34.860
the database time stamp itself
is hidden from the client.

34
00:01:34.860 --> 00:01:40.140
The first thing that we actually
see is this decoded ISO-8601 string

35
00:01:40.140 --> 00:01:43.270
coming across the wire in the browser.

36
00:01:43.270 --> 00:01:45.680
And we take that,
we convert it through Time.Posix,

37
00:01:45.680 --> 00:01:48.250
from the HTTP request we
store in the the model.

38
00:01:48.250 --> 00:01:52.870
And then we calculate that string in the
view, that nicely formatted human-readable

39
00:01:52.870 --> 00:01:55.920
string says, May 5th,
2018, or whatever it was.

40
00:01:55.920 --> 00:01:59.460
And then of course, the HTML message
is also gonna be calculated in view.

41
00:02:00.920 --> 00:02:03.685
Now here we have an example of drive data.

42
00:02:03.685 --> 00:02:05.623
But we actually do unfortunately,

43
00:02:05.623 --> 00:02:08.860
regrettably end up with multiple
sources of truth anyway.

44
00:02:10.100 --> 00:02:14.361
So here, when we're storing this in
the model this is now a client cache of

45
00:02:14.361 --> 00:02:17.482
something where the source
of truth is the database.

46
00:02:17.482 --> 00:02:20.308
And because we're caching it,
cache invalidation is a well known,

47
00:02:20.308 --> 00:02:22.650
hard problem in computer science.

48
00:02:22.650 --> 00:02:24.578
This can get out of date.

49
00:02:24.578 --> 00:02:27.640
Now in the case of a database timestamp,
it really shouldn't be changing.

50
00:02:28.640 --> 00:02:31.060
If it's an actual timestamp
of when the post is created.

51
00:02:32.320 --> 00:02:35.810
But if it's a timestamp of when the post
was most recently edited, that could

52
00:02:35.810 --> 00:02:39.340
actually change on the database, and
now our cached version is out of date.

53
00:02:39.340 --> 00:02:42.270
Unless we have some sort of web socket
set up to live update every single time

54
00:02:42.270 --> 00:02:45.130
the database changes,
we're probably just stale.

55
00:02:45.130 --> 00:02:48.370
Like the user's looking at this timestamp
on the screen, and it's just wrong.

56
00:02:48.370 --> 00:02:51.370
If you wanna know the ultimate source
of truth for what that timestamp is,

57
00:02:51.370 --> 00:02:53.490
it's on the database, and it's
a different value than the one we've got.

58
00:02:54.650 --> 00:02:58.610
So again, we have ended up with multiple
sources of truth, they are competing.

59
00:02:58.610 --> 00:03:01.210
We are rendering the one from the client
cache, but actually the one that we want

60
00:03:01.210 --> 00:03:03.260
to trust is the one in the database,
which we don't have access to.

61
00:03:05.160 --> 00:03:07.090
So we actually end up catching
a lot of things in the model.

62
00:03:07.090 --> 00:03:09.660
In general, any time something
comes in from a HTTP request,

63
00:03:09.660 --> 00:03:11.640
we're probably caching it in the view.

64
00:03:11.640 --> 00:03:13.590
This is just a reality of
doing client-side development.

65
00:03:13.590 --> 00:03:16.020
I mean, the reason we cache things is for
performance.

66
00:03:16.020 --> 00:03:18.030
Imagine if every single
time you wanted to render,

67
00:03:18.030 --> 00:03:21.250
first you had to go to
the server with an HTTP request.

68
00:03:21.250 --> 00:03:24.135
Get everything back and
then render based on that.

69
00:03:24.135 --> 00:03:25.310
It will be incredibly slow.

70
00:03:25.310 --> 00:03:26.820
Unusably slow.

71
00:03:26.820 --> 00:03:28.540
So of course we're gonna cache things.

72
00:03:28.540 --> 00:03:31.600
But we have to be aware that when we
are caching things, we have to deal with

73
00:03:31.600 --> 00:03:35.800
caching validation which means some of the
time we're potentially going to be wrong.

74
00:03:35.800 --> 00:03:38.590
This is sort of an accepted cost of
doing business in web development or

75
00:03:38.590 --> 00:03:40.230
in any kind of client development.

76
00:03:40.230 --> 00:03:41.990
But it is something that's
important to be aware of.

77
00:03:41.990 --> 00:03:43.868
This can be a source of bugs.

78
00:03:45.906 --> 00:03:48.468
&gt;&gt; Richard Feldman: Here we have some
intermediate representations of this

79
00:03:48.468 --> 00:03:49.750
derived data.

80
00:03:49.750 --> 00:03:51.520
This is a lot less error prone.

81
00:03:51.520 --> 00:03:52.440
Like if we're saying,

82
00:03:52.440 --> 00:03:56.100
okay, we accept the model as the source
of truth that we're gonna render from.

83
00:03:56.100 --> 00:03:59.173
Which in the HTML application
sort of goes without saying.

84
00:03:59.173 --> 00:04:01.150
Then each of these can
be derived from those.

85
00:04:01.150 --> 00:04:04.570
And as we saw in the previous slide, we
can just put those in the view function.

86
00:04:04.570 --> 00:04:06.120
And then there's sort of transient.

87
00:04:06.120 --> 00:04:08.970
They are intermediate representations
on the way to the final representation

88
00:04:08.970 --> 00:04:11.900
that we want, which was the actual
done nodes on the screen.

89
00:04:13.370 --> 00:04:15.730
So the string which is
derive from the model and

90
00:04:15.730 --> 00:04:19.320
this HTML was derive from the string
are both intermediate representations

91
00:04:19.320 --> 00:04:20.720
on a way to the final form.

92
00:04:22.140 --> 00:04:25.980
And it's important that we don't store
those intermediate representations.

93
00:04:25.980 --> 00:04:28.600
As competing sources
of truth in our model.

94
00:04:28.600 --> 00:04:29.800
Unless we really, really have to.

95
00:04:30.810 --> 00:04:32.580
The reason we might have
to is again performance.

96
00:04:32.580 --> 00:04:35.750
Then for some reason this operation here,
we're calculating the intermediate

97
00:04:35.750 --> 00:04:38.650
representation is really expensive and
it's slowing everything down.

98
00:04:38.650 --> 00:04:41.410
Then yeah, maybe we have to cache that and
the model too.

99
00:04:41.410 --> 00:04:46.300
Separately from the original source
of truth that it comes from.

100
00:04:46.300 --> 00:04:49.510
But then that point where cache of
a cache of the original source of truth

101
00:04:49.510 --> 00:04:52.310
which is the database time stamp,
and the more times we do that

102
00:04:52.310 --> 00:04:55.400
the more convening source of the truth we
have, the more potential for bugs we have.

103
00:04:56.870 --> 00:04:58.897
So the moral of the story is number one,

104
00:04:58.897 --> 00:05:02.523
we're probably stuck we having that
client side cache of the model and

105
00:05:02.523 --> 00:05:06.103
the fact that it potentially out of
date with the underlying server.

106
00:05:06.103 --> 00:05:09.130
That's something we're just going to have
to live with for performance reasons.

107
00:05:09.130 --> 00:05:10.530
But we don't need to make it worse than,

108
00:05:10.530 --> 00:05:13.910
that unless we actually have
another performance problem.

109
00:05:13.910 --> 00:05:17.580
By default, if you have the option of
rendering something in the view and

110
00:05:17.580 --> 00:05:21.760
then discarding it afterwards rather than
recording it in the model, always do that.

111
00:05:21.760 --> 00:05:24.210
If it's derived data and it's something
that comes from the model and

112
00:05:24.210 --> 00:05:28.460
nothing else, great, put it in the view
and don't have it be anywhere else.

113
00:05:28.460 --> 00:05:31.790
So if you're ever wondering,
hey, where should this logic go?

114
00:05:31.790 --> 00:05:35.140
If the answer could be in the view,
start with that.

115
00:05:35.140 --> 00:05:37.940
And only if you have a performance
problem should you move it to update and

116
00:05:37.940 --> 00:05:38.970
then store the result in the model.

