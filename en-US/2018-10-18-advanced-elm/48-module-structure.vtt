WEBVTT

1
00:00:00.100 --> 00:00:02.290
&gt;&gt; Richard Feldman: Which gets
us into module structure.

2
00:00:02.290 --> 00:00:06.160
So one of the things that sometimes
comes up in Elm is you have

3
00:00:06.160 --> 00:00:10.220
sort of folders in your module
structure for use as namespaces.

4
00:00:10.220 --> 00:00:12.910
So an example of this
is we have viewer.cred.

5
00:00:12.910 --> 00:00:16.120
So basically, credentials only have to
do with the current logged in user,

6
00:00:16.120 --> 00:00:17.940
it's their credentials.

7
00:00:17.940 --> 00:00:21.960
So I chose the namespaces under
viewer to sort of indicate that link.

8
00:00:21.960 --> 00:00:24.040
And these credentials only exist for
the viewer.

9
00:00:24.040 --> 00:00:27.490
This is a sort of inextricably
linked concept there.

10
00:00:27.490 --> 00:00:29.911
We also have a number of things
that need page namespace.

11
00:00:29.911 --> 00:00:33.460
We have page.article,
page.blank, page.home.

12
00:00:33.460 --> 00:00:37.340
All of these sort of are coupled with
that page module that we just saw.

13
00:00:37.340 --> 00:00:39.220
They need that page module
in order to render.

14
00:00:39.220 --> 00:00:41.261
They need to call page.view
to get the header and footer.

15
00:00:43.160 --> 00:00:45.330
&gt;&gt; Richard Feldman: Also,
we have page.article.editor,

16
00:00:45.330 --> 00:00:47.750
which is sort of a special
case of the article.

17
00:00:47.750 --> 00:00:49.080
This is the article editor.

18
00:00:49.080 --> 00:00:52.242
I could also see, in the case of this,
saying page.articleeditor,

19
00:00:52.242 --> 00:00:55.050
that would also be fine, and
not putting another namespace.

20
00:00:55.050 --> 00:00:56.826
But it seemed like a reasonable
choice in this case.

21
00:00:58.753 --> 00:01:01.493
&gt;&gt; Richard Feldman: So
typically speaking, L namespaces,

22
00:01:01.493 --> 00:01:03.835
I like to make as flat as possible.

23
00:01:03.835 --> 00:01:06.635
I used to do this a little bit
differently in the previous edition of

24
00:01:06.635 --> 00:01:07.539
the single page app.

25
00:01:07.539 --> 00:01:12.165
I actually had a top level thing
called data, a folder called data,

26
00:01:12.165 --> 00:01:17.750
where I put all of my articles and
profiles and users-related stuff in there.

27
00:01:17.750 --> 00:01:21.503
And those were all just plain data
structures, and they didn't have any view

28
00:01:21.503 --> 00:01:25.557
logic, they didn't have any HTTP in them,
it was just the data structure itself.

29
00:01:25.557 --> 00:01:29.123
But what I found was that I actually
inadvertently encouraged myself to have

30
00:01:29.123 --> 00:01:30.470
sloppy module boundaries.

31
00:01:30.470 --> 00:01:32.523
Because, when I got rid of that,
and I said,

32
00:01:32.523 --> 00:01:36.760
what if I just didn't have data.article,
and requests.article, and views.article?

33
00:01:36.760 --> 00:01:40.350
What if I just put those together inside
article, and tried grouping them around

34
00:01:40.350 --> 00:01:43.960
the type, rather than saying the type
is gonna be isolated in its own thing.

35
00:01:43.960 --> 00:01:47.980
What I found was that, previously, I had
been needing to expose a bunch of stuff

36
00:01:47.980 --> 00:01:52.960
that was only being consumed by the other
article, or whatever dot article modules.

37
00:01:52.960 --> 00:01:55.220
It was like data.article,
requests.article, and

38
00:01:55.220 --> 00:01:57.194
whatever the third one was, abuse.article.

39
00:01:58.310 --> 00:02:01.806
All needed to expose more stuff just for
the benefit of one of the other two.

40
00:02:01.806 --> 00:02:04.182
Now, soon as I put them
together in the same module,

41
00:02:04.182 --> 00:02:07.098
because they were all related,
and all needed to do that stuff,

42
00:02:07.098 --> 00:02:09.487
I found that I needed to
expose a total of less stuff.

43
00:02:09.487 --> 00:02:12.160
I could keep more stuff
confined within that module.

44
00:02:12.160 --> 00:02:15.340
And, those dependencies,
which already existed for those modules,

45
00:02:15.340 --> 00:02:17.782
now no longer existed with
all the rest of the modules.

46
00:02:18.905 --> 00:02:20.760
&gt;&gt; Richard Feldman: So
in terms of how to structure your models,

47
00:02:20.760 --> 00:02:23.010
I think this is an important
thing to be aware of.

48
00:02:23.010 --> 00:02:25.804
Although these folders
are extensively just namespaces and

49
00:02:25.804 --> 00:02:27.831
don't really technically mean anything,

50
00:02:27.831 --> 00:02:30.747
they do certainly encourage
a certain style of organization.

51
00:02:30.747 --> 00:02:33.506
So I think it's important
to be really sure that,

52
00:02:33.506 --> 00:02:36.133
this is a common boundary
that you really want to

53
00:02:36.133 --> 00:02:40.160
have before making a new folder like
this and inserting a new namespace.

54
00:02:40.160 --> 00:02:41.572
So in the case of page, yeah,

55
00:02:41.572 --> 00:02:45.326
I'm quite sure that each of these pages
is going to want to have its own module.

56
00:02:45.326 --> 00:02:50.040
Like page.article, page.blankpage.home,
each of those, definitely I mean,

57
00:02:50.040 --> 00:02:53.990
I've never seen a single page app where
you didn't wanna have one module per page.

58
00:02:53.990 --> 00:02:57.810
It's not inconceivable, but
I think it's a safe enough bet,

59
00:02:57.810 --> 00:02:59.440
that it's probably what
you're going to want to do.

60
00:03:00.680 --> 00:03:06.020
But, I would caution against trying
to put more divisions in than that,

61
00:03:06.020 --> 00:03:07.230
at least at first.

62
00:03:07.230 --> 00:03:10.160
If you find something, you identify
something where you have this really kind

63
00:03:10.160 --> 00:03:12.950
of set of abstractions,
they all want to go together.

64
00:03:12.950 --> 00:03:16.650
For example, we have article that
has body, and comment, and feed, and

65
00:03:16.650 --> 00:03:17.760
slug, and tag it.

66
00:03:17.760 --> 00:03:21.982
All of those are coupled with the concept
of an article, I think that's reasonable.

67
00:03:21.982 --> 00:03:25.885
But I would caution it against having
a top level namespace like data or

68
00:03:25.885 --> 00:03:28.040
request or any of those things.

69
00:03:28.040 --> 00:03:29.440
Having done that experiment myself,

70
00:03:29.440 --> 00:03:33.730
I wasn't nearly as happy with that as
I have been with doing it this way.

71
00:03:33.730 --> 00:03:36.700
Where I just have a top level thing
called article, called author,

72
00:03:36.700 --> 00:03:38.450
called avatar, comment ID, etc.

73
00:03:39.800 --> 00:03:43.880
One other thing that I would note is that,
speaking of comment ID,

74
00:03:43.880 --> 00:03:47.820
I've also sort of gotten in the habit of
saying, I will make an opaque type out of

75
00:03:47.820 --> 00:03:52.370
pretty much anything at the drop of a hat,
ID's in particular.

76
00:03:52.370 --> 00:03:56.620
So I used to just do it like
a type alias CommentId equals int,

77
00:03:56.620 --> 00:03:59.865
that works perfectly well
with the the one problem,

78
00:03:59.865 --> 00:04:04.400
that if I ever accidentally have
a function like this where it is says foo,

79
00:04:04.400 --> 00:04:09.820
and it takes a CommentId, and
a UserId, and does something else.

80
00:04:09.820 --> 00:04:14.150
If those are just both type alias to int,
once again, I can mix up the order and

81
00:04:14.150 --> 00:04:15.800
potentially mess them up.

82
00:04:15.800 --> 00:04:18.780
And I've come to realize that this
is an unfortunate downside of

83
00:04:18.780 --> 00:04:23.240
using type alias to make things that
have slightly more readable names,

84
00:04:23.240 --> 00:04:24.710
which are not actually different types.

85
00:04:24.710 --> 00:04:27.310
It sort of messes with my
heuristic of looking at this and

86
00:04:27.310 --> 00:04:30.480
not seeing a red flag of saying,
wait, that's too ints back-to-back.

87
00:04:30.480 --> 00:04:33.180
Wait a minute, I probably need
somebody to disambiguate those.

88
00:04:33.180 --> 00:04:36.287
So since we've gotten out of a habit of
doing that and I've said, you know what,

89
00:04:36.287 --> 00:04:39.734
I'm gonna make this custom types so that
they're different, they're incompatible.

90
00:04:39.734 --> 00:04:40.755
And while I'm at it I say,

91
00:04:40.755 --> 00:04:43.730
you know what, I might as well also
restrict how these things are created.

92
00:04:43.730 --> 00:04:46.976
Once I'm gone out of my way to make
a custom type, so that much more work to

93
00:04:46.976 --> 00:04:50.500
throw it in the module and
then only select to the expose things.

94
00:04:50.500 --> 00:04:53.822
So cool thing about these CommentId right
here is that just from the module and

95
00:04:53.822 --> 00:04:56.540
what is exposing,
I can tell a couple of things.

96
00:04:56.540 --> 00:04:59.650
One is, it's opaque,
it's not exposing, it's variant.

97
00:04:59.650 --> 00:05:03.280
Two is, the only way to get
one is through a decoder,

98
00:05:03.280 --> 00:05:06.010
that's actually the only way
to extentiate a comment.

99
00:05:06.010 --> 00:05:09.800
Which tells me that I can't have
any pages on here that are, or

100
00:05:09.800 --> 00:05:13.130
at least I guess I technically could
if I wanted to go way out of my way and

101
00:05:13.130 --> 00:05:17.440
say I'm gonna make a JSON string,
encode it and then decode it.

102
00:05:17.440 --> 00:05:20.766
But I think at that point,
I deserve whatever I get.

103
00:05:20.766 --> 00:05:25.608
[LAUGH] I don't have at least
anyone non-maliciously creating one

104
00:05:25.608 --> 00:05:28.552
of these things except from the server.

105
00:05:28.552 --> 00:05:32.470
So this ties into our notion of
single sources of truth from earlier.

106
00:05:32.470 --> 00:05:33.990
This is basically saying,
hey, you know what,

107
00:05:33.990 --> 00:05:35.520
the source of truth for CommentIds is?

108
00:05:35.520 --> 00:05:36.630
It's the server.

109
00:05:36.630 --> 00:05:38.650
You should only ever decode
them from the server.

110
00:05:38.650 --> 00:05:41.740
You should never ever be writing
one out by hand for any reason.

111
00:05:41.740 --> 00:05:43.863
That shouldn't be happening,
these should always come from the server.

112
00:05:43.863 --> 00:05:46.800
And this is a pretty concise
way to express that.

113
00:05:46.800 --> 00:05:50.930
At the same time,
it also gives us a handy Decode.map so

114
00:05:50.930 --> 00:05:54.720
we don't have to bother doing that map
to convert it to the CommentId when

115
00:05:54.720 --> 00:05:56.920
we're actually using a decoder.

116
00:05:56.920 --> 00:06:00.357
So, by doing this, I've just sort of
gotten in the habit of saying, yeah,

117
00:06:00.357 --> 00:06:02.935
you know what,
whatever I got one of these CommentIds and

118
00:06:02.935 --> 00:06:04.547
I'm building a decoder around it,

119
00:06:04.547 --> 00:06:07.801
I'm just gonna say commentId.decoder,
rather than Decoder.int.

120
00:06:07.801 --> 00:06:11.005
And, yeah,
that's worked out pretty much fine for me.

121
00:06:11.005 --> 00:06:15.076
So you can see up here at the top level,
we have CommentId, we have Emails, and

122
00:06:15.076 --> 00:06:18.922
other opaque type that again,
doesn't necessarily need to be but it is.

123
00:06:18.922 --> 00:06:26.066
And all the other IDs, like Username,
it has its own opaque type, etc., etc.

124
00:06:26.066 --> 00:06:30.525
I've also used in some cases,
used these as a way to group,

125
00:06:30.525 --> 00:06:34.200
things that I want to reuse
a lot of these things.

126
00:06:34.200 --> 00:06:38.468
So for example, username.toHtml as opposed
to toString, which is just, it comes up

127
00:06:38.468 --> 00:06:42.618
quite often that I'm rendering a username
to the screen, so this is a convenient way

128
00:06:42.618 --> 00:06:46.438
to do that so I don't have to call two
functions here, I can just call the one.

129
00:06:48.238 --> 00:06:50.558
&gt;&gt; Richard Feldman: One
other note on this is that,

130
00:06:50.558 --> 00:06:54.668
I tried out doing IDs as
comment.Id which sounded like

131
00:06:54.668 --> 00:06:59.650
a better idea in my head than
it turned out to be in practice.

132
00:06:59.650 --> 00:07:03.740
The problem with this is that,
I can't actually do it that way and

133
00:07:03.740 --> 00:07:08.760
end up writing out this type the way
that I thought I might be able to.

134
00:07:08.760 --> 00:07:15.230
So I can't, for example say,
foo takes a Comment.Id and then whatever.

135
00:07:15.230 --> 00:07:19.330
The problem here is that this
module's name is Comment.Id.

136
00:07:19.330 --> 00:07:23.023
So I would have to say, Comment.Id.Id,

137
00:07:23.023 --> 00:07:28.510
which is kind of weird,
that's not really what I wanted.

138
00:07:28.510 --> 00:07:33.320
Also, if I want to import this as an alias
like I say import comment.Id as Id,

139
00:07:33.320 --> 00:07:38.278
well now I potentially have a namespace
conflict with the actual comment module

140
00:07:38.278 --> 00:07:38.880
itself.

141
00:07:38.880 --> 00:07:40.874
So in the end I decided, you know what,

142
00:07:40.874 --> 00:07:44.770
as neat as this looks, I don't think
it's actually the right choice.

143
00:07:44.770 --> 00:07:48.362
I think I'm just gonna name my module
CommentId and leave it at that.

