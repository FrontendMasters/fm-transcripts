WEBVTT

1
00:00:00.000 --> 00:00:01.613
&gt;&gt; Richard Feldman: To the code!

2
00:00:01.613 --> 00:00:06.040
For a real-world example.

3
00:00:06.040 --> 00:00:09.481
Pun intended, because this is
the real-world SPA example.

4
00:00:09.481 --> 00:00:16.614
All right, so, for an example of and
then, I want to look at our, whoops.

5
00:00:18.220 --> 00:00:19.557
&gt;&gt; Richard Feldman: ISO 8601, so

6
00:00:19.557 --> 00:00:25.630
we mentioned previously that we have
this notion of ISO 8601 encoded dates.

7
00:00:25.630 --> 00:00:27.790
This is in the previous section,
we talked about this.

8
00:00:27.790 --> 00:00:32.600
So this is a string format, and
we have a library called Iso8601,

9
00:00:32.600 --> 00:00:36.240
which converts from those date
strings to the POSIX timestamp,

10
00:00:36.240 --> 00:00:40.680
which is what we actually wanna
store in our model, okay?

11
00:00:40.680 --> 00:00:45.210
So right here, we have a little
helper function that decodes it,

12
00:00:45.210 --> 00:00:47.860
because we want to expose
an iso8601Decoder.

13
00:00:49.390 --> 00:00:52.070
The way that it works is,
it is a two-step process.

14
00:00:52.070 --> 00:00:54.975
First, we say Decode.string because we
know it's going to be a string coming

15
00:00:54.975 --> 00:00:55.643
from the server.

16
00:00:55.643 --> 00:00:57.947
And then we pipe that to Decode.andThen,

17
00:00:57.947 --> 00:01:01.280
a function named fromString
which is our little helper here.

18
00:01:02.310 --> 00:01:05.512
fromString takes the ISO 8601 string
which we've successfully decoded,

19
00:01:05.512 --> 00:01:07.970
but at this point,
all we know is it's some sort of string.

20
00:01:07.970 --> 00:01:10.208
We don't actually know if
it's got a date in there.

21
00:01:10.208 --> 00:01:12.419
If it's got a date,
we don't know if it's malformed.

22
00:01:12.419 --> 00:01:15.291
We don't know anything about it,
other than that it is a string.

23
00:01:15.291 --> 00:01:21.660
So then we call Iso8601.toTime which
takes a string and returns a result.

24
00:01:21.660 --> 00:01:26.880
So in the Ok branch of that result, we've
got a successValue which is a Time.Posix.

25
00:01:26.880 --> 00:01:27.740
And in the Err case,

26
00:01:27.740 --> 00:01:32.530
we have a fail, which is to say that
something didn't work out above the date.

27
00:01:34.250 --> 00:01:37.390
And here we're calling it Decode.succeed,
on the success branch,

28
00:01:37.390 --> 00:01:40.510
with the successful value,
which is to say, the POSIX timestamp.

29
00:01:40.510 --> 00:01:43.750
And the Err branch, we're just sort of
disregarding whatever failure string that

30
00:01:43.750 --> 00:01:45.270
it gave us, because we don't really care.

31
00:01:45.270 --> 00:01:48.040
And we're just saying yeah,
that was an invalid date of some sort, so

32
00:01:48.040 --> 00:01:48.870
we're failing decoding.

33
00:01:50.120 --> 00:01:53.939
So this is an example of our using
Decode.andThen as a way to turn

34
00:01:53.939 --> 00:01:58.415
a successful string decoding into
a potential overall decoding failure.

35
00:01:58.415 --> 00:02:02.692
Because this decoder's job is not
just to give us a string, but

36
00:02:02.692 --> 00:02:05.300
to give us an actual POSIX timestamp.

37
00:02:05.300 --> 00:02:08.512
Now in some cases we might be doing
additional validation that's sort of

38
00:02:08.512 --> 00:02:11.672
optional in the sense that that
validation might be on top of what we're

39
00:02:11.672 --> 00:02:12.474
normally doing.

40
00:02:12.474 --> 00:02:15.030
I wanna check that the string is
not empty, something like that.

41
00:02:15.030 --> 00:02:17.650
In this case,
we don't really have a choice.

42
00:02:17.650 --> 00:02:22.350
How can we possibly give it a valid
time.Posix value from a string

43
00:02:22.350 --> 00:02:24.860
without handling both of
these possibilities, right?

44
00:02:24.860 --> 00:02:28.570
Iso8601.toTime gives us back a result.

45
00:02:28.570 --> 00:02:31.080
So if we didn't wanna use decode.andThen,
I mean,

46
00:02:31.080 --> 00:02:33.320
how do we possibly map that
to a successful value?

47
00:02:33.320 --> 00:02:36.420
We need, in some way,
to handle this error case.

48
00:02:36.420 --> 00:02:40.420
And if we weren't using decode.andThen,
we'd be forced to succeed.

49
00:02:40.420 --> 00:02:41.770
And say something like, I don't know,

50
00:02:41.770 --> 00:02:46.280
assume it's the epic, which would be
much worse than failing the decoding,

51
00:02:46.280 --> 00:02:48.480
which is a much more accurate
representation of what's going on here.

52
00:02:49.840 --> 00:02:52.590
So we can see in this simple
example on the screen,

53
00:02:52.590 --> 00:02:55.920
sort of the power of decode.andThen.

54
00:02:55.920 --> 00:02:58.699
Not only could be from here, say success.

55
00:02:58.699 --> 00:03:01.150
We could actually do this
again if we wanted to.

56
00:03:01.150 --> 00:03:05.400
We could pipe this right here, because
this is a decoder, to decode.andThen and

57
00:03:05.400 --> 00:03:06.100
just keep going.

58
00:03:07.730 --> 00:03:12.389
We can create an entire branching
conditional system of decoders that checks

59
00:03:12.389 --> 00:03:13.687
one after the other.

60
00:03:13.687 --> 00:03:16.510
And makes sure that all of them pass,
every single one of them,

61
00:03:16.510 --> 00:03:19.016
those additional validations
that we want to perform,

62
00:03:19.016 --> 00:03:21.350
before ultimately resolving
to this one decoder.

63
00:03:21.350 --> 00:03:25.110
And all that logic is going to be wrapped
up inside of that one decoder value.

64
00:03:25.110 --> 00:03:28.338
And anybody who is using it doesn't
necessarily need to know all of the hoops

65
00:03:28.338 --> 00:03:31.221
it's jumping through to make sure
that this data is actually okay.

66
00:03:31.221 --> 00:03:34.909
We can also note that it's entirely
possible that we could implement

67
00:03:34.909 --> 00:03:37.272
decode.map in terms of decode.andThen.

68
00:03:37.272 --> 00:03:41.060
It essentially has the same semantics,
except that you always succeed.

69
00:03:41.060 --> 00:03:42.830
So if we wanted to, yeah,
that would be no problem.

70
00:03:42.830 --> 00:03:46.730
If we ever use a library that implements
something like andThen with those same

71
00:03:46.730 --> 00:03:50.150
semantics, I don't know, I really wish
this library gave me map, but it doesn't.

72
00:03:50.150 --> 00:03:52.618
Well, the good news is you
can implement it yourself.

73
00:03:52.618 --> 00:03:53.325
And that it's so

74
00:03:53.325 --> 00:03:56.670
powerful that it's actually capable of
implementing map in terms of itself.

