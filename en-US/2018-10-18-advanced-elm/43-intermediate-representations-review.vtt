WEBVTT

1
00:00:00.000 --> 00:00:02.799
&gt;&gt; Richard Feldman: Decode.map is
something we're using in quite a few

2
00:00:02.799 --> 00:00:04.141
places in the code base.

3
00:00:04.141 --> 00:00:07.510
So one example of it is
the one that we saw earlier,

4
00:00:07.510 --> 00:00:12.176
where we needed to translate the body
into a full body on the article.

5
00:00:12.176 --> 00:00:16.833
So this is an example of using decode.map
to essentially wrap a value that we're

6
00:00:16.833 --> 00:00:19.581
getting as one of our
fields in some other type.

7
00:00:19.581 --> 00:00:22.337
So the purpose of this was that
we have two notions of article,

8
00:00:22.337 --> 00:00:24.563
we have article full and
we have article preview.

9
00:00:24.563 --> 00:00:27.766
And in this case, when we're decoding
the preview, we wanna hard code it and

10
00:00:27.766 --> 00:00:30.527
say yeah, we're not gonna look for
any additional info on there,

11
00:00:30.527 --> 00:00:31.485
it's just a preview.

12
00:00:31.485 --> 00:00:34.662
There's no body associated with it,
so don't worry about it.

13
00:00:34.662 --> 00:00:38.926
And in this case, we want to say we have
an article full, and we use decode.map to

14
00:00:38.926 --> 00:00:42.909
say not only do I want to decode the body,
which is the same as body decoder.

15
00:00:42.909 --> 00:00:47.140
But once that's done,
I want to, if it's successful,

16
00:00:47.140 --> 00:00:52.705
transform that success value by wrapping
it in this full value right here.

17
00:00:52.705 --> 00:00:55.646
And full is defined like this, so

18
00:00:55.646 --> 00:01:00.911
it's a function that takes a body and
returns a full value.

19
00:01:00.911 --> 00:01:03.511
Okay, so that's one example.

20
00:01:03.511 --> 00:01:11.013
Another pretty common example
we can see in this right here.

21
00:01:11.013 --> 00:01:12.798
So here we have a comment.

22
00:01:12.798 --> 00:01:17.417
Comment, like so many other types in our
program, is opaque and it looks like this.

23
00:01:17.417 --> 00:01:21.906
This is a pretty common strategy that I
like to use for representing opaque types

24
00:01:21.906 --> 00:01:26.605
while still getting access to the nice
record constructor for decoding purposes.

25
00:01:26.605 --> 00:01:28.646
So I'll define alias called internals,

26
00:01:28.646 --> 00:01:32.332
that represents the record that I can
work with internally to this module.

27
00:01:32.332 --> 00:01:36.053
I don't ever expose it to the outside
world, and then I can use it for

28
00:01:36.053 --> 00:01:36.981
JSON decoding.

29
00:01:36.981 --> 00:01:39.970
So I have comment,
which has one variant, and

30
00:01:39.970 --> 00:01:43.662
its sole variant has one argument,
which is internals.

31
00:01:43.662 --> 00:01:47.266
And as previously discussed,
in terms of run time representation,

32
00:01:47.266 --> 00:01:51.441
that means that because it's a single
variant with a single value inside of it.

33
00:01:51.441 --> 00:01:54.257
Elm's going to unbox this and at run time,

34
00:01:54.257 --> 00:01:59.593
this is just going to be as if I'd used
a record, plain with no wrapper around it.

35
00:01:59.593 --> 00:02:04.206
But for compile side purposes, I do
actually need to specify that wrapping.

36
00:02:04.206 --> 00:02:07.256
So when I'm using this internal's decoder,

37
00:02:07.256 --> 00:02:12.191
I'm essentially writing as if I had
used this as my fundamental data type.

38
00:02:12.191 --> 00:02:13.895
I'm gonna decode into this.

39
00:02:13.895 --> 00:02:17.326
It's gonna follow the same pathway we saw
on the slides, we're gonna require this,

40
00:02:17.326 --> 00:02:19.531
which is gonna be the first
argument to that function.

41
00:02:19.531 --> 00:02:22.579
This will be the second, this will be
the third, this will be the fourth.

42
00:02:22.579 --> 00:02:28.691
And then once those are done, we know now
after having gone through those slides,

43
00:02:28.691 --> 00:02:32.868
this expression will evaluate
to a decoder internals.

44
00:02:34.963 --> 00:02:35.770
&gt;&gt; Richard Feldman: But
that's not what we want.

45
00:02:35.770 --> 00:02:37.910
What we want is a decoder comment.

46
00:02:37.910 --> 00:02:42.850
And in order to map it to a comment, we
can just take this expression right here

47
00:02:42.850 --> 00:02:46.118
and say once we're done
decoding into internals,

48
00:02:46.118 --> 00:02:48.630
just wrap it in a comment, no problem.

49
00:02:48.630 --> 00:02:50.346
And that's all there is to it.

50
00:02:50.346 --> 00:02:53.390
This is a pretty common
way of translating,

51
00:02:53.390 --> 00:02:56.195
sort of getting the best of both worlds.

52
00:02:56.195 --> 00:02:59.008
Getting to use the record
constructor internally for

53
00:02:59.008 --> 00:03:03.458
convenience while still exposing an opaque
type to the outside world for a decoder.

54
00:03:03.458 --> 00:03:07.810
So to recap, we talked about
pipeline types and how those work,

55
00:03:07.810 --> 00:03:10.073
talked about Decode.andThen.

56
00:03:10.073 --> 00:03:14.260
We talked about decoderizing,
so that's with the ISO 8601,

57
00:03:14.260 --> 00:03:19.435
we sort of decoderize that from a result
into a decoder by using decode.andThen.

58
00:03:19.435 --> 00:03:22.501
And finally, we talked about
intermediate representations, so

59
00:03:22.501 --> 00:03:25.796
the idea of using internals only for
the purpose of creating a decoder.

60
00:03:25.796 --> 00:03:29.457
Not exposing it to the outside world, and
just using that as an intermediate step.

61
00:03:29.457 --> 00:03:33.274
And then using decode.map to convert from
that intermediate representation into

62
00:03:33.274 --> 00:03:35.408
the one that the outside
world actually sees.

63
00:03:35.408 --> 00:03:38.447
One more note on intermediate
representations is that if you want,

64
00:03:38.447 --> 00:03:40.167
you can take that a few steps further.

65
00:03:40.167 --> 00:03:41.825
And use it with Decode.andThen or

66
00:03:41.825 --> 00:03:44.570
something else to decode into
some record that kind of has

67
00:03:44.570 --> 00:03:48.193
no relation to what the internal,
the final representations going to be.

68
00:03:48.193 --> 00:03:50.101
But which just get into the record so

69
00:03:50.101 --> 00:03:52.782
you can work with it more
nicely in your Elm logic.

70
00:03:52.782 --> 00:03:58.041
If you have some complicated andThen
code or something like that to work on.

