WEBVTT

1
00:00:00.000 --> 00:00:02.292
&gt;&gt; Richard Feldman: So we're gonna start
off in this advanced directory here.

2
00:00:02.292 --> 00:00:04.465
So you should have
the workshop checked out, and

3
00:00:04.465 --> 00:00:06.810
you should be inside
the advanced directory.

4
00:00:06.810 --> 00:00:08.020
If you look inside the directory,

5
00:00:08.020 --> 00:00:11.530
you'll see a variety of other
directories and a README.

6
00:00:11.530 --> 00:00:14.390
So the README sort of describes
general instructions for

7
00:00:14.390 --> 00:00:17.400
getting set up with this which
hopefully you've already gone through.

8
00:00:17.400 --> 00:00:19.010
At the end there are some links.

9
00:00:19.010 --> 00:00:21.950
And then the server holds on to
the back-end, which you should already

10
00:00:21.950 --> 00:00:24.890
have up and running over to
the side in some different tab,

11
00:00:24.890 --> 00:00:27.420
which we'll leave running throughout
the course of the workshop,

12
00:00:27.420 --> 00:00:30.450
because we're gonna be
hitting it on every exercise.

13
00:00:30.450 --> 00:00:34.030
So we're gonna start with part one so
we'll cd into there.

14
00:00:34.030 --> 00:00:38.476
Inside this directory we can see we've
got a README, a source directory and

15
00:00:38.476 --> 00:00:40.644
elm.json and some compiled stuff.

16
00:00:40.644 --> 00:00:42.505
You actually may not
have the compiled stuff,

17
00:00:42.505 --> 00:00:44.805
because I have this from
the last time I ran through this.

18
00:00:44.805 --> 00:00:48.245
But you may not see the elm.js or
elm stuff, but

19
00:00:48.245 --> 00:00:50.960
let's fire up our editor of choice.

20
00:00:50.960 --> 00:00:54.869
I'm gonna be using Adam, but any editor
you like to use should be totally fine.

21
00:00:54.869 --> 00:00:58.550
And we're gonna take a look
at the README for part one.

22
00:01:00.180 --> 00:01:02.540
So it starts off by just giving
me some basic build instructions.

23
00:01:02.540 --> 00:01:08.645
So we're going to elm make src/Main and
output it to ../server/public/elm.js.

24
00:01:08.645 --> 00:01:11.530
That way it ends up in the assets
directory of the server.

25
00:01:11.530 --> 00:01:12.940
And no matter which part we're in,

26
00:01:12.940 --> 00:01:15.600
this will jam it into
the correct place in the server.

27
00:01:15.600 --> 00:01:18.600
And then when we bring up
localhost:3000 in the browser,

28
00:01:18.600 --> 00:01:21.620
we will be able to see
the results of what we've done.

29
00:01:21.620 --> 00:01:23.750
Having said that,
in general these exercises,

30
00:01:23.750 --> 00:01:26.940
they pretty much tend to be about
making the code compile again.

31
00:01:26.940 --> 00:01:29.815
So probably don't need to do
a whole lot with the browser,

32
00:01:29.815 --> 00:01:31.998
except when we get to
the decoding section.

33
00:01:31.998 --> 00:01:37.616
And so we can start off by making
sure it compiles to begin with,

34
00:01:37.616 --> 00:01:39.745
which it does, great.

35
00:01:39.745 --> 00:01:44.890
And the excercise itself has to
do with src/Viewer/Cred.elm.

36
00:01:44.890 --> 00:01:47.204
So let's take a look at that.

37
00:01:47.204 --> 00:01:51.870
Okay, so here's our TODO, it says
basically, make Cred an opaque type,

38
00:01:51.870 --> 00:01:54.880
then fix the resulting compiler errors.

39
00:01:54.880 --> 00:01:56.370
Afterwards, it should no
longer be possible for

40
00:01:56.370 --> 00:01:59.270
any other module to access
this token value directly.

41
00:01:59.270 --> 00:02:01.800
So this token refers to the access
token that we're going to

42
00:02:01.800 --> 00:02:03.930
attach onto HTTP requests.

43
00:02:03.930 --> 00:02:07.970
And one of the things that I wanted to
guarantee about these credentials is that

44
00:02:07.970 --> 00:02:11.570
that token is an implementation detail
that is opaque to the rest of the world.

45
00:02:11.570 --> 00:02:15.430
None of the other modules outside of Cred
get to know what that token's format is.

46
00:02:15.430 --> 00:02:16.692
Which means that if the server,

47
00:02:16.692 --> 00:02:21.250
the back-end team decides they want
to change from JWT to something else.

48
00:02:21.250 --> 00:02:23.761
I can say, not a problem,
just tell me what the format is,

49
00:02:23.761 --> 00:02:25.162
I will change it in this module.

50
00:02:25.162 --> 00:02:27.923
And I can guarantee that that will
not cause any regressions on anyone

51
00:02:27.923 --> 00:02:28.560
else's code.

52
00:02:28.560 --> 00:02:31.830
Because guess what, nobody else's code
outside this module could possibly

53
00:02:31.830 --> 00:02:33.550
be relying on it,
they don't have access to it.

54
00:02:34.670 --> 00:02:35.860
So that's what we want to get to.

55
00:02:35.860 --> 00:02:37.460
Right now,
this is exposed to the whole world.

56
00:02:37.460 --> 00:02:39.910
Anyone can say cred.token and
access it directly,

57
00:02:39.910 --> 00:02:41.660
because we've just done a type alias.

58
00:02:41.660 --> 00:02:43.630
So what we want to do is use
the techniques we just talked about

59
00:02:43.630 --> 00:02:45.080
to convert this into an opaque type.

