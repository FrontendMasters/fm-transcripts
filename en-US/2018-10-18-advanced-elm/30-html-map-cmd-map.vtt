WEBVTT

1
00:00:00.160 --> 00:00:01.910
&gt;&gt; Richard Feldman: Which brings
us to the final tactic for

2
00:00:01.910 --> 00:00:05.740
reuse which is html.map and cmd.map.

3
00:00:05.740 --> 00:00:07.760
So let's take that idea I was
talking about a second ago, and

4
00:00:07.760 --> 00:00:09.290
let's kinda run with it.

5
00:00:09.290 --> 00:00:13.150
What if we have something that has a bunch
of different messages that it needs to do?

6
00:00:14.230 --> 00:00:17.460
And we want to accept these as
configuration options like this.

7
00:00:17.460 --> 00:00:18.960
Will they tell me how to fave,
and funky fave,

8
00:00:18.960 --> 00:00:21.130
and super fave, and maybe five others.

9
00:00:22.220 --> 00:00:25.430
At some point you realize that
calling this thing becomes a pretty

10
00:00:25.430 --> 00:00:26.910
substantial burden.

11
00:00:26.910 --> 00:00:30.490
The caller has to add end messages
to their message type for

12
00:00:30.490 --> 00:00:33.510
each of these different things that
I need to be taught how to do and

13
00:00:33.510 --> 00:00:35.180
each of them needs to
be wired up properly.

14
00:00:35.180 --> 00:00:37.300
Like they need to actually
do the right thing.

15
00:00:37.300 --> 00:00:39.820
It's not a big deal to say teach me how
to message when I have one message.

16
00:00:39.820 --> 00:00:44.290
It's like, okay, this needs to be a fave
[INAUDIBLE], we have another one.

17
00:00:44.290 --> 00:00:47.500
That's a grand total of 2
messages to add to your message.

18
00:00:47.500 --> 00:00:48.800
Really not the end of the world.

19
00:00:48.800 --> 00:00:50.340
Not a big deal.

20
00:00:50.340 --> 00:00:54.180
But if we end up with considerably more
than that, it could end up being that

21
00:00:54.180 --> 00:00:58.500
that's actually becoming a significant
burden and a potential source of errors if

22
00:00:58.500 --> 00:01:02.279
you get the wiring wrong as the number
of messages sort of pile up.

23
00:01:03.450 --> 00:01:05.580
At some point, we normally switch over and

24
00:01:05.580 --> 00:01:09.020
say, you know what I'm not gonna
ask you to teach me how to message.

25
00:01:09.020 --> 00:01:11.560
I'm gonna tell you how I message.

26
00:01:11.560 --> 00:01:15.420
And that's something that we're doing
on this feed, the article feed.

27
00:01:15.420 --> 00:01:18.850
So the feed actually has a decent
amount of complexity to it.

28
00:01:18.850 --> 00:01:22.730
If we look, it has its own
message type of four variants.

29
00:01:22.730 --> 00:01:24.320
So it's got its own notion of errors.

30
00:01:24.320 --> 00:01:29.490
So things can go wrong when you're loading
the feed, because it's doing some HTTP.

31
00:01:29.490 --> 00:01:31.730
It's got Favorite and
Unfavorite, which is,

32
00:01:31.730 --> 00:01:34.630
it's calling out to those other
helpers that we just looked at.

33
00:01:34.630 --> 00:01:37.120
It's also got CompletedFavorite,
because it's also

34
00:01:37.120 --> 00:01:40.230
handling the HTTP requests that
results from clicking Favorite.

35
00:01:40.230 --> 00:01:42.120
And handling what happens
when it comes back and

36
00:01:42.120 --> 00:01:44.520
updating itself to render accordingly.

37
00:01:44.520 --> 00:01:46.300
So we go from the green
heart to the outline and

38
00:01:46.300 --> 00:01:48.990
vice versa, depending on
whether you favor, unfaved it.

39
00:01:50.490 --> 00:01:53.810
So based on all of these things, there
are some non-trivial logic going on here.

40
00:01:53.810 --> 00:01:57.500
We don't want to have everyone who wants
to render a feed, needs to implement

41
00:01:57.500 --> 00:02:01.720
all four of these messages and then pass
them in, so that we know how they work.

42
00:02:01.720 --> 00:02:03.690
Instead we're sort of
flipping the paradigm and

43
00:02:03.690 --> 00:02:06.680
saying okay that was sort of
the lightweight way of doing it.

44
00:02:06.680 --> 00:02:11.380
But in this case doing it the lightweight
way is just going to be really

45
00:02:11.380 --> 00:02:13.560
heavyweight by virtue of
the fact that there are so

46
00:02:13.560 --> 00:02:16.860
many different messages that we
need you to teach us how to do.

47
00:02:16.860 --> 00:02:18.660
So instead we're gonna expose.

48
00:02:18.660 --> 00:02:21.680
Okay here is my message,
notice, by the way,

49
00:02:21.680 --> 00:02:26.360
that we're not exposing the variance here
so message is opaque to everybody else.

50
00:02:26.360 --> 00:02:27.910
Same thing with our model.

51
00:02:27.910 --> 00:02:29.920
This model is not actually a type alias.

52
00:02:29.920 --> 00:02:33.140
This is a model with its own internals so
both the model and

53
00:02:33.140 --> 00:02:35.340
the message are opaque to everyone
else who's using the feed.

54
00:02:35.340 --> 00:02:40.920
And what we're saying is essentially,
okay, I've got an init function.

55
00:02:42.070 --> 00:02:44.810
If you want one of these,
that's how you're gonna get a model,

56
00:02:44.810 --> 00:02:46.430
you need to call this init function.

57
00:02:46.430 --> 00:02:48.840
Now model is opaque so
there's no other way to get one.

58
00:02:48.840 --> 00:02:50.780
There's no other function in
here that returns a model,

59
00:02:50.780 --> 00:02:54.310
so the caller, whatever page
wants to embed a feed on itself,

60
00:02:54.310 --> 00:02:57.250
needs to start by calling init
in order to get one of these.

61
00:02:58.450 --> 00:03:01.450
Once it does that, it says, okay, great,
you've got a model, but it's opaque, so

62
00:03:01.450 --> 00:03:02.790
all you can do is hold onto it.

63
00:03:02.790 --> 00:03:06.550
You can't actually reach inside of it,
tweak it, mess with it, whatever.

64
00:03:06.550 --> 00:03:08.830
Nope.
This is encapsulated to me.

65
00:03:08.830 --> 00:03:09.930
You can't see the internals.

66
00:03:09.930 --> 00:03:11.480
You can't touch the internals.

67
00:03:11.480 --> 00:03:12.140
Only I can do that.

68
00:03:13.630 --> 00:03:17.260
So if the page wants the model to
actually do anything, or, I'm sorry,

69
00:03:17.260 --> 00:03:19.120
wants the feed to actually do anything,

70
00:03:19.120 --> 00:03:22.450
then it's going to need to call
something like this Update.

71
00:03:22.450 --> 00:03:27.230
So there's this feed saying, hey, I
actually have some update logic of my own.

72
00:03:27.230 --> 00:03:29.180
It's gonna return a tuple of model and

73
00:03:29.180 --> 00:03:33.490
command message, this being the feed's
model, and the feed's command message.

74
00:03:33.490 --> 00:03:36.470
And so it's got all of this
logic implemented in here.

75
00:03:36.470 --> 00:03:38.800
So this is another benefit
to doing it this way,

76
00:03:38.800 --> 00:03:42.990
is that I can also centralize the logic
for how to handle each of these messages.

77
00:03:42.990 --> 00:03:45.910
If I wanted to do this, I could also
make that part of the configuration

78
00:03:45.910 --> 00:03:48.510
if I were using the same pattern
that we did previously here.

79
00:03:48.510 --> 00:03:51.090
And I could say, not only do I need
you to teach me how to message,

80
00:03:51.090 --> 00:03:54.140
but I'm gonna tell you how
to handle those messages.

81
00:03:54.140 --> 00:03:57.090
I'm gonna give you some functions,
and you're supposed to call those.

82
00:03:57.090 --> 00:04:01.390
This is a way of sort of enforcing
not only am I going to implement

83
00:04:01.390 --> 00:04:03.690
the way that these messages
should be handled.

84
00:04:03.690 --> 00:04:07.294
But in fact nobody else has access to
handle them any other way because message

85
00:04:07.294 --> 00:04:08.075
is also opaque.

86
00:04:10.122 --> 00:04:13.637
&gt;&gt; Richard Feldman: Okay, so this update
function is taking an opaque message and

87
00:04:13.637 --> 00:04:16.950
an opaque model,
then returning another opaque model and

88
00:04:16.950 --> 00:04:20.598
a command with another opaque message,
which is to say, yeah,

89
00:04:20.598 --> 00:04:24.680
all of this logic in here is
completely opaque to the outside world.

90
00:04:24.680 --> 00:04:26.330
And all they can do is call update,

91
00:04:26.330 --> 00:04:28.490
passing the model that
they got back from init.

92
00:04:28.490 --> 00:04:32.603
And the only way that they can get
a message in here is through calling view

93
00:04:32.603 --> 00:04:33.689
from this sucker.

94
00:04:36.681 --> 00:04:40.466
&gt;&gt; Richard Feldman: And essentially,
we have this view function here that takes

95
00:04:40.466 --> 00:04:44.990
maybe cred and a time zone and
an article and then returns html message.

96
00:04:44.990 --> 00:04:47.090
Again, this is the opaque message type.

97
00:04:47.090 --> 00:04:50.170
So that's the only source of messages
other than the commands themselves that

98
00:04:50.170 --> 00:04:54.470
come from update that anyone who's
trying to embed what these feeds can do.

99
00:04:54.470 --> 00:04:59.540
So how do you actually build one,
let's take a look at that.

100
00:04:59.540 --> 00:05:02.340
So this is being used in two different
places, it's being reused on the homepage,

101
00:05:02.340 --> 00:05:03.700
as well as on the profile page.

102
00:05:03.700 --> 00:05:06.210
So let's take a look at
how it is on the homepage.

103
00:05:07.315 --> 00:05:09.795
So in the event that we actually
have one of these feeds, so

104
00:05:09.795 --> 00:05:11.665
first we had to initialize it.

105
00:05:11.665 --> 00:05:14.595
This is the case where we've already
got it initialized, and we're good.

106
00:05:14.595 --> 00:05:15.435
We're moving on.

107
00:05:15.435 --> 00:05:18.185
Essentially what we do
is we call feed.update,

108
00:05:18.185 --> 00:05:24.285
which gives us back a new feed, which,
remember, this is the Feed.model.

109
00:05:24.285 --> 00:05:26.485
And then,
we have this sort of sub-command,

110
00:05:26.485 --> 00:05:28.225
which is to say the Feed command.

111
00:05:28.225 --> 00:05:31.820
So this is, so command feed.message,

112
00:05:31.820 --> 00:05:34.700
and both of these are opaque so
we can't really do anything with them.

113
00:05:34.700 --> 00:05:37.530
We've just got them now because
we've called feed.update,

114
00:05:37.530 --> 00:05:41.538
passing the credentials as well as
the sub-message that we got in here.

115
00:05:41.538 --> 00:05:43.590
What's the sub-message?

116
00:05:43.590 --> 00:05:47.110
That's one of these,
it's sort of a wrapper of

117
00:05:47.110 --> 00:05:52.030
our message type that's containing
a feed message that came

118
00:05:52.030 --> 00:05:56.910
from the feed, and
we can see one of the two

119
00:05:56.910 --> 00:06:01.910
sources of where we might end up with one
of these got feed messages down here.

120
00:06:01.910 --> 00:06:04.740
When we say okay,
we've got this sub-command.

121
00:06:04.740 --> 00:06:09.090
I'm going to return that as
what I'm going to actually do

122
00:06:09.090 --> 00:06:10.910
as the result of this branch of update.

123
00:06:12.310 --> 00:06:16.790
But I'm gonna call command.map on
it to wrap it in a GotFeedMsg.

124
00:06:16.790 --> 00:06:19.210
So what this line is essentially
doing is it's saying, hey,

125
00:06:19.210 --> 00:06:22.810
I don't actually know where this
command is, because it's, you know,

126
00:06:22.810 --> 00:06:27.900
I got it from a stranger with an opaque
type, but whatever it is, I would like

127
00:06:27.900 --> 00:06:32.080
the elm run time to execute it and
to take whatever message it produces,

128
00:06:32.080 --> 00:06:34.490
which again is opaque to me,
and whatever that message is,

129
00:06:34.490 --> 00:06:37.640
wrap it up in one of these gotFeed
messages, which is to say it will

130
00:06:37.640 --> 00:06:41.330
come back here in this branch of update if
it does come back, and we will once again,

131
00:06:41.330 --> 00:06:44.000
have this opaque submessage,
which can go through the process again.

132
00:06:45.280 --> 00:06:48.310
So effectively, what we're doing
with this logic is we're saying,

133
00:06:48.310 --> 00:06:52.930
I want to delegate the notion
of updating to this feed, and

134
00:06:52.930 --> 00:06:55.820
importantly we can't monkey with
the feed while we're in here.

135
00:06:55.820 --> 00:06:58.630
All we can do is delegate
because those types are opaque.

136
00:06:58.630 --> 00:07:01.740
We delegate the message, and
then we also delegate the model itself.

137
00:07:01.740 --> 00:07:04.760
We say I'm gonna write down
the new feed that we got,

138
00:07:04.760 --> 00:07:07.300
that was returned by this update function.

139
00:07:07.300 --> 00:07:10.210
But again we can't really touch it,
all we can do is write down that

140
00:07:10.210 --> 00:07:12.830
we have a new one, and then we can use it
the next time that we need to update it.

141
00:07:14.250 --> 00:07:20.430
Finally, we have a second source of
potential feed messages over in the view.

142
00:07:21.990 --> 00:07:22.786
So that's right here.

143
00:07:22.786 --> 00:07:28.660
When we call feed.view articles, we're
passing in the arguments that it needs.

144
00:07:28.660 --> 00:07:32.610
And then at the end, we're getting
back a whole list of articles And

145
00:07:32.610 --> 00:07:36.093
we're mapping over that list
with Html.map GotFeedMsg.

146
00:07:36.093 --> 00:07:39.770
So Html.map and Command.map,
again both do the same thing.

147
00:07:39.770 --> 00:07:41.890
They say, I've got either from HTML,

148
00:07:41.890 --> 00:07:45.040
that's some foreign message type that I
don't know how to deal with, or I've got

149
00:07:45.040 --> 00:07:47.960
a Command with some foreign message
type that I don't know how to deal with.

150
00:07:47.960 --> 00:07:51.190
In both cases, all I wanna do
is wrap it in this GotFeedMsg,

151
00:07:51.190 --> 00:07:53.930
so whenever it comes into my update,
it's wrapped up and

152
00:07:53.930 --> 00:07:56.700
I can just do this delegation logic and
that's it.

153
00:07:57.900 --> 00:08:01.190
So by using these things,
I've effectively said, yeah,

154
00:08:01.190 --> 00:08:03.670
I am now delegating to this feed's update.

155
00:08:03.670 --> 00:08:07.790
I'm delegating to its view or wherever
I want to render it in my logic, and

156
00:08:07.790 --> 00:08:10.550
it's in charge of whatever
message it wants to have,

157
00:08:10.550 --> 00:08:15.050
whatever update logic it wants to have,
whatever view logic it wants to have.

158
00:08:15.050 --> 00:08:19.690
I don't actually have any idea what
any of that stuff is All I know is how

159
00:08:19.690 --> 00:08:23.720
to deal with its messages, and
just sort of pass them through.

160
00:08:23.720 --> 00:08:26.450
Additionally if we wanted to
it could expose subscriptions.

161
00:08:26.450 --> 00:08:28.510
It could say yeah here's
a subscription that I need.

162
00:08:28.510 --> 00:08:33.120
I do something every clock tick, or
I do something on every animation frame.

163
00:08:33.120 --> 00:08:37.370
And it could request that, and
then say you need to wire that into your

164
00:08:37.370 --> 00:08:39.780
Subscription in which
case you'd use sub.map.

165
00:08:39.780 --> 00:08:40.710
That's a lot less common.

166
00:08:40.710 --> 00:08:45.509
Typically you don't see those nearly as
often as you see cmd.map and html.map.

167
00:08:45.509 --> 00:08:48.470
Worth noting that you don't
necessarily need to have both.

168
00:08:48.470 --> 00:08:53.520
Sometimes you might have a bunch of
messages but honestly, it's not super

169
00:08:53.520 --> 00:08:58.230
critical that those things
happen in one place so

170
00:08:58.230 --> 00:09:02.300
maybe you'll just see only Cmd.map or
only html.map but that's pretty rare.

171
00:09:02.300 --> 00:09:03.770
Usually, they sort of go hand in hand.

172
00:09:03.770 --> 00:09:06.031
Most of the time it's either Cmd.map and

173
00:09:06.031 --> 00:09:11.370
html.map or using the much more
light weight approach of this.

174
00:09:11.370 --> 00:09:15.430
So in terms of what order I reach for
these, I've sort of, I tend to reach for

175
00:09:15.430 --> 00:09:17.460
these in the order I just introduced them.

176
00:09:17.460 --> 00:09:21.480
So if I can get away with it,
I'll just use HTMl with an unbounded type.

177
00:09:21.480 --> 00:09:22.840
That's the absolute easiest.

178
00:09:22.840 --> 00:09:24.830
I don't need to teach me how to message.

179
00:09:24.830 --> 00:09:25.480
I don't even care.

180
00:09:25.480 --> 00:09:27.390
I just work everywhere.

181
00:09:27.390 --> 00:09:30.490
But if I can't get away with that and I
still have decided that we use the correct

182
00:09:30.490 --> 00:09:32.550
choice here then I'm gonna say,
yeah, you know what?

183
00:09:32.550 --> 00:09:35.850
Just teach me how to do
whatever message is necessary.

184
00:09:35.850 --> 00:09:37.680
And that's what I'm gonna go with.

185
00:09:37.680 --> 00:09:40.760
And if that's not gonna work because
that's gonna require excessive

186
00:09:40.760 --> 00:09:43.890
configuration, because I just have so
many messages that need to get handled.

187
00:09:43.890 --> 00:09:46.410
I have so
much custom logic that needs to get run.

188
00:09:46.410 --> 00:09:48.580
And that's gonna be burdensome.

189
00:09:48.580 --> 00:09:52.550
Then I will do this because
although this is pretty trivial,

190
00:09:52.550 --> 00:09:55.930
sort of boring code to right, it's fixed.

191
00:09:55.930 --> 00:09:57.130
It's a fixed cost.

192
00:09:57.130 --> 00:09:58.500
I rate this once and

193
00:09:58.500 --> 00:10:03.230
I have now delegated all of the rest
of that stuff to the theme.

194
00:10:04.260 --> 00:10:07.898
Now worth noting that you can go
overboard with this, and that was a,

195
00:10:07.898 --> 00:10:12.227
especially a couple years ago, that was a
pretty common problem that we saw a lot of

196
00:10:12.227 --> 00:10:16.342
beginners run into was essentially
saying anytime I want to reuse anything.

197
00:10:16.342 --> 00:10:20.015
I'm gonna give it it's own model, it's own
view, it's own message, it's own inits.

198
00:10:20.015 --> 00:10:23.329
And I'm gonna do all of these stuff and
all these wiring every single time

199
00:10:23.329 --> 00:10:26.890
across the board and
basically never using these techniques.

200
00:10:26.890 --> 00:10:28.210
Instead.

201
00:10:28.210 --> 00:10:30.960
The result is that this sort of
propagates and explodes, and

202
00:10:30.960 --> 00:10:32.500
you end up with a huge amount of wiring.

203
00:10:32.500 --> 00:10:36.420
Because although this is only a fixed
cost, if you're sort of using it to avoid

204
00:10:36.420 --> 00:10:39.390
an even bigger cost, because you
actually have a whole bunch of messages,

205
00:10:39.390 --> 00:10:42.860
that this is sort of a blocking
out of our needing to handle.

206
00:10:42.860 --> 00:10:46.070
If you don't actually have a bunch
of messages that are necessary,

207
00:10:46.070 --> 00:10:49.350
then this just becomes a bunch of
overhead for no reason, for no benefit.

208
00:10:49.350 --> 00:10:52.120
And the result if you multiply
that by like every single time you

209
00:10:52.120 --> 00:10:54.530
reuse something, that can really add up.

210
00:10:54.530 --> 00:10:57.760
So I definitely encourage only reaching
for this if it's going to solve

211
00:10:57.760 --> 00:11:00.510
a problem with one of the two,
more lightweight approaches,

212
00:11:00.510 --> 00:11:03.780
and that'll basically keep things sort
of as lean and as light as possible.

213
00:11:03.780 --> 00:11:06.420
Given your constraints on
how you're building things.

214
00:11:06.420 --> 00:11:09.850
So to recap, we talked about
helper functions, so those can be

215
00:11:09.850 --> 00:11:14.270
anything as simple as a function
that we break out and only use once.

216
00:11:14.270 --> 00:11:17.400
doesn't necessarily a part of reuse,
or it can be.

217
00:11:17.400 --> 00:11:20.320
It can be something that we're only
using for two functions in the same

218
00:11:20.320 --> 00:11:22.610
module as we saw with the favorite button,
and the follow button.

219
00:11:22.610 --> 00:11:25.780
It could also be something that helps out
with update as in the case of update form.

220
00:11:25.780 --> 00:11:27.560
It's not limited to any particular domain,

221
00:11:27.560 --> 00:11:29.930
this is a very straightforward
technique for reuse.

222
00:11:31.000 --> 00:11:35.480
We talked about making sure things are
actually the same, and not just similar.

223
00:11:35.480 --> 00:11:37.840
We talked about those three
different flavors of status,

224
00:11:37.840 --> 00:11:39.580
each of which is a slightly
different state.

225
00:11:39.580 --> 00:11:42.630
And each of which makes sense to be
tailored to that particular page Rather

226
00:11:42.630 --> 00:11:47.010
than attempting to reuse and introducing
a bunch more configuration on top of them.

227
00:11:47.010 --> 00:11:49.730
We talked about HTML message with
either the unbounded type or

228
00:11:49.730 --> 00:11:54.830
with receiving the message from
whatever the thing is calling it.

229
00:11:54.830 --> 00:11:55.814
And we talked about the.

230
00:11:55.814 --> 00:11:59.834
So the most powerful, but also the highest
overhead at least from a fixed cost

231
00:11:59.834 --> 00:12:04.716
perspective way to reuse the view code,
which is to say using Html.map and

232
00:12:04.716 --> 00:12:08.574
Cmd.map in conjunction with a custom
message type and an update.

