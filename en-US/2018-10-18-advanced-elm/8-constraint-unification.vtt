WEBVTT

1
00:00:00.000 --> 00:00:02.566
&gt;&gt; Richard Feldman: Part
two extensible data.

2
00:00:02.566 --> 00:00:03.908
Let's talk about a few things here,

3
00:00:03.908 --> 00:00:06.598
first we're gonna talk about
Constrain Unification which is the process

4
00:00:06.598 --> 00:00:08.305
Elms Compiler uses to
type check everything.

5
00:00:08.305 --> 00:00:12.312
We'll talk about Open versus
Closed Records, we'll talk about why

6
00:00:12.312 --> 00:00:16.954
Open Records Exist, and finally we gonna
talk about Extensible Custom Types.

7
00:00:16.954 --> 00:00:19.825
All right,
let's start with Constrain Unification.

8
00:00:19.825 --> 00:00:23.737
So the way Elms Compiler works is it
basically starts with a series of known

9
00:00:23.737 --> 00:00:25.451
facts about time constraints.

10
00:00:25.451 --> 00:00:28.087
So here are some examples of those.

11
00:00:28.087 --> 00:00:29.217
Stuff is a string literal.

12
00:00:29.217 --> 00:00:30.933
All it says, okay, I just hard coded.

13
00:00:30.933 --> 00:00:32.378
I know what string literals are.

14
00:00:32.378 --> 00:00:34.165
They are all strings.

15
00:00:34.165 --> 00:00:35.904
I know what floats are,
they look like that.

16
00:00:35.904 --> 00:00:38.140
Every time I see that literal,
that's a float.

17
00:00:38.140 --> 00:00:41.770
Every time I see one of these, that is
a list of strings which it knows because

18
00:00:41.770 --> 00:00:44.234
this is a list literal and
this is a string literal.

19
00:00:44.234 --> 00:00:44.984
It also knows that empty list is a list
literal with unbound type variable, so

20
00:00:44.984 --> 00:00:47.862
list of A.
So these are things that her compiler

21
00:00:47.862 --> 00:00:50.535
just knows, they're hard coded,

22
00:00:50.535 --> 00:00:56.608
it doesn't need to do any type inference
to figure them out, it just knows them.

23
00:00:56.608 --> 00:00:58.846
So these are the known facts
that it starts out with and

24
00:00:58.846 --> 00:01:02.180
then it basically goes through your
program and starts inferring new facts, so

25
00:01:02.180 --> 00:01:03.987
here's an example of how it might do that.

26
00:01:03.987 --> 00:01:06.073
Let's say we have this expression,
Hi, my name is ++ name ++!

27
00:01:06.073 --> 00:01:10.491
Okay, this is a string, but
also, I know that's a string.

28
00:01:10.491 --> 00:01:12.559
Here is other string, and
you know that's a string.

29
00:01:12.559 --> 00:01:16.384
++ combines two strings, so
I know that, by influence,

30
00:01:16.384 --> 00:01:18.764
whatever name is, must be a string.

31
00:01:18.764 --> 00:01:22.290
So now let's add those two,
its a list of known fact.

32
00:01:22.290 --> 00:01:26.250
It says, okay, I've used what is known
as constraint unification, to say,

33
00:01:26.250 --> 00:01:29.498
by virtue of what I already know
about these other constraints.

34
00:01:29.498 --> 00:01:32.044
This constraint must be
a string constraint.

35
00:01:32.044 --> 00:01:35.479
That's what the name's type must be.

36
00:01:35.479 --> 00:01:38.096
And as it continues going through
the code it keeps doing this.

37
00:01:38.096 --> 00:01:40.875
So let's say we have
something called working,

38
00:01:40.875 --> 00:01:42.920
which is assigned to not isBroken.

39
00:01:42.920 --> 00:01:45.664
So it says, okay, well,,
not is a function from Bool to Bool.

40
00:01:45.664 --> 00:01:48.876
Which means that since we're
passing isBroken to not,

41
00:01:48.876 --> 00:01:50.595
well isBroken must be a Bool.

42
00:01:50.595 --> 00:01:52.390
So it's another form of
constraint unification.

43
00:01:52.390 --> 00:01:56.735
And then because working is assigned to
the result of not isBroken and not return.

44
00:01:56.735 --> 00:01:59.688
It says, okay, well working,
must also be a Bool.

45
00:01:59.688 --> 00:02:02.839
Then let's say later on on
the same let expression,

46
00:02:02.839 --> 00:02:05.642
we have caption = String.toUpper working.

47
00:02:05.642 --> 00:02:08.771
Now it says, okay, well,
String.toUpper takes a String and

48
00:02:08.771 --> 00:02:11.971
returns to a String which means
we're working must be a string.

49
00:02:11.971 --> 00:02:15.798
We've concluded two facts that
are at odds with one another.

50
00:02:15.798 --> 00:02:19.882
In one case, it claims that working as a
Bool, in the other case it claims working

51
00:02:19.882 --> 00:02:23.985
as a string, these are contradictory
facts, this is how we get a type mismatch.

52
00:02:23.985 --> 00:02:27.295
So as soon as it encounters
a contradiction like that it's like, okay,

53
00:02:27.295 --> 00:02:30.500
our constraints have unified to
something that does not makes sense,

54
00:02:30.500 --> 00:02:31.769
therefore type mismatch.

55
00:02:31.769 --> 00:02:36.079
Now with [INAUDIBLE] types,
it's a little bit trickier than that.

56
00:02:36.079 --> 00:02:37.420
It's not as straightforward.

57
00:02:37.420 --> 00:02:38.846
So here are two different
append functions.

58
00:02:38.846 --> 00:02:40.702
Sting.append and List.append.

59
00:02:40.702 --> 00:02:43.914
Both of them do the conceptual operation
of squishing two things together.

60
00:02:43.914 --> 00:02:46.926
So String.append takes
String -&gt; String -&gt; String.

61
00:02:46.926 --> 00:02:49.696
List.append List a -&gt; List a -&gt; List a.

62
00:02:49.696 --> 00:02:53.766
Now if I call String.append on a string
and something that's not a string, well,

63
00:02:53.766 --> 00:02:57.604
it stands to reason that's going to be
a type mismatch because it says, well,

64
00:02:57.604 --> 00:02:59.137
these both need to be a string.

65
00:02:59.137 --> 00:03:01.376
The second thing you
gave me is not a string.

66
00:03:01.376 --> 00:03:05.857
But you can't quite extend that same
pattern to parameterized types.

67
00:03:05.857 --> 00:03:09.406
So here I'm appending a list
of strings to a list of a.

68
00:03:09.406 --> 00:03:13.207
Now those are not exactly the same type,
but as we all sort of intuitively know,

69
00:03:13.207 --> 00:03:14.305
this will still work.

70
00:03:14.305 --> 00:03:16.997
It'll give us back
a which a list of string.

71
00:03:16.997 --> 00:03:18.278
So how did it know to do that?

72
00:03:18.278 --> 00:03:21.674
I mean, we understand how this works when
they are literally different types, but

73
00:03:21.674 --> 00:03:24.683
in this case they still are literally
different types, it's just that it

74
00:03:24.683 --> 00:03:27.668
figured out, okay, but these
are compatible and it put them together.

75
00:03:27.668 --> 00:03:29.939
And not only did it figure
out that they're compatible,

76
00:03:29.939 --> 00:03:32.351
but it concluded that it could
resolve them to a single type,

77
00:03:32.351 --> 00:03:34.792
which in this case it decided it
was going to be a list string.

78
00:03:34.792 --> 00:03:38.586
How did it decide list string over list a,
how does it figure those things out

79
00:03:38.586 --> 00:03:41.989
differently than it figures them
out with string and float up here?

80
00:03:41.989 --> 00:03:45.868
So this is the process of constraint
unification in the presence of

81
00:03:45.868 --> 00:03:46.984
type parameters.

82
00:03:46.984 --> 00:03:50.804
So if you have two types that are exactly
the same.Including the parameters.

83
00:03:50.804 --> 00:03:52.326
They're identical types.

84
00:03:52.326 --> 00:03:56.493
Okay, then it's going to unify to the same
thing because they are identical.

85
00:03:56.493 --> 00:03:58.636
There's no unification
that needs to happen.

86
00:03:58.636 --> 00:04:02.227
If one of them is more constrained
than another, for example,

87
00:04:02.227 --> 00:04:05.367
List String is more constrained
than an unbound type.

88
00:04:05.367 --> 00:04:07.598
Then it says, okay, we're gonna
go with the more constrained one.

89
00:04:07.598 --> 00:04:11.303
We're gonna unify to the one that's
more constrained of the two.

90
00:04:11.303 --> 00:04:15.926
And if they're incompatible,
then it says okay, type mismatch.

91
00:04:15.926 --> 00:04:17.116
So let's see an example of this.

92
00:04:17.116 --> 00:04:19.679
List.append a, b and c.

93
00:04:19.679 --> 00:04:23.149
These two are identical, so they're going
to unify from list string to list string.

94
00:04:23.149 --> 00:04:26.835
It says, okay, those unify to List String.

95
00:04:26.835 --> 00:04:28.554
Let's say we do a, b, and empty list.

96
00:04:28.554 --> 00:04:30.211
It says, okay, List String, List a.

97
00:04:30.211 --> 00:04:32.733
Well, List String is more
constrained than List a.

98
00:04:32.733 --> 00:04:34.839
So it says, okay,
those unify to List String.

99
00:04:34.839 --> 00:04:37.367
The more constrained of the two.

100
00:04:37.367 --> 00:04:39.560
And if we put two empty lists together,
once again, they're identical.

101
00:04:39.560 --> 00:04:44.904
So of course, List a,
List a, List a, identical.

102
00:04:44.904 --> 00:04:47.316
Another constraint we can have is number.

103
00:04:47.316 --> 00:04:51.883
So number is a constraint that is
somewhere in-between an unbound type

104
00:04:51.883 --> 00:04:55.241
variable and
a concrete variable like int or float.

105
00:04:55.241 --> 00:04:59.355
So number is one of Elm's three
constrained type variables.

106
00:04:59.355 --> 00:05:01.918
So number means this is either an int or
a float.

107
00:05:01.918 --> 00:05:05.365
The other two constrained type variables
are appendable and comparable.

108
00:05:05.365 --> 00:05:09.529
So appendable means it's
either a Strings or lists, and

109
00:05:09.529 --> 00:05:15.875
comparable means it's a int, list, sorry,
int, float, there's a list of these.

110
00:05:15.875 --> 00:05:19.792
String, if you ever get a mis-match on
trying to put a non-comparable thing into

111
00:05:19.792 --> 00:05:22.800
a dictionary, you'll see that
error message, and it lists,

112
00:05:22.800 --> 00:05:24.253
there's like seven of them.

113
00:05:24.253 --> 00:05:29.230
Regardless, they are more
constrained than your typical

114
00:05:29.230 --> 00:05:34.420
unbound type variable or
your concrete parametrized type.

115
00:05:34.420 --> 00:05:36.605
But when they're identical,
they work out the same way.

116
00:05:36.605 --> 00:05:39.900
If we have 1, 2 and 3, so
just from this list literal,

117
00:05:39.900 --> 00:05:42.107
we know that this is a list of numbers.

118
00:05:42.107 --> 00:05:43.840
But Elm, just based on this syntax alone,

119
00:05:43.840 --> 00:05:47.019
if we just put this directly into Elm
REPL, it doesn't know if these are ints or

120
00:05:47.019 --> 00:05:49.304
floats yet,
we haven't given it enough information.

121
00:05:49.304 --> 00:05:52.276
A literal starts out as a number, and
then it might get more specific later,

122
00:05:52.276 --> 00:05:53.443
depending on how it's used.

123
00:05:53.443 --> 00:05:57.261
But at first,
it's nothing more than a number.

124
00:05:57.261 --> 00:06:03.043
Okay, we can also append a list of number
to a list of unbound type variable.

125
00:06:03.043 --> 00:06:06.749
And that unifies to number because
number is more constrained

126
00:06:06.749 --> 00:06:08.537
than unbound type variable.

127
00:06:08.537 --> 00:06:13.754
So although we still have a type
variable in here, it's not concrete yet.

128
00:06:13.754 --> 00:06:17.492
When you unify these two, you still do get
something that is more constrained than

129
00:06:17.492 --> 00:06:20.053
what you started out with on
one side of the expression.

130
00:06:22.374 --> 00:06:25.395
&gt;&gt; Richard Feldman: Now if you unify
a number with a float, now okay it

131
00:06:25.395 --> 00:06:29.979
says the more constrained of the two
is float, so now we unify it to float.

132
00:06:29.979 --> 00:06:32.655
Okay,
&gt;&gt; Richard Feldman: We can still get type

133
00:06:32.655 --> 00:06:33.981
mismatches when it comes to number.

134
00:06:33.981 --> 00:06:36.624
So remember when we did a list
of a with a list of string,

135
00:06:36.624 --> 00:06:38.927
that unified successfully
the list of string.

136
00:06:38.927 --> 00:06:41.364
The problem is number is
not compatible with string.

137
00:06:41.364 --> 00:06:44.101
So even though this is a type variable,
it is constrained and

138
00:06:44.101 --> 00:06:46.099
it's constraint does not support String.

139
00:06:46.099 --> 00:06:49.275
Which means that if you try to unify
a List String with a List number,

140
00:06:49.275 --> 00:06:50.689
you'll get a type mismatch.

141
00:06:50.689 --> 00:06:54.128
But List String with List of unbound,
totally fine.

142
00:06:54.128 --> 00:06:56.186
Questions about that before
we move on to records?

143
00:07:01.088 --> 00:07:02.977
&gt;&gt; Speaker 2: So I guess for a number,

144
00:07:02.977 --> 00:07:07.427
it follows the pattern of
lowercase as a type variable.

145
00:07:07.427 --> 00:07:08.472
&gt;&gt; Richard Feldman: Right.

146
00:07:08.472 --> 00:07:10.414
&gt;&gt; Speaker 2: This is kind of
like a built in Elm thing.

147
00:07:10.414 --> 00:07:11.153
&gt;&gt; Richard Feldman: Yes.

148
00:07:11.153 --> 00:07:14.562
&gt;&gt; Speaker 2: It's variable
because it can be multiple things,

149
00:07:14.562 --> 00:07:19.830
but there is a pre-described meaning
to the domain of those variables?

150
00:07:19.830 --> 00:07:22.944
&gt;&gt; Richard Feldman: Yes, exactly, so the
reason for the syntactic choice of having

151
00:07:22.944 --> 00:07:26.751
it look like a type variable is that in
all ways it behaves like a type variable,

152
00:07:26.751 --> 00:07:28.444
except for the extra constraint.

153
00:07:28.444 --> 00:07:30.981
So for example, you can choose the name,
it just has to start with number.

154
00:07:30.981 --> 00:07:35.766
You can put number a, number b, number
c if you wanna have multiples of them,

155
00:07:35.766 --> 00:07:40.718
it gets replaced by a more concrete type
such as float if it's unified with one.

156
00:07:40.718 --> 00:07:43.006
So in most ways it behaves like one,
except for

157
00:07:43.006 --> 00:07:45.419
the additional constraint
that it has baked in.

158
00:07:45.419 --> 00:07:49.088
Some languages have these, and
they have a different syntax for them.

159
00:07:49.088 --> 00:07:53.481
So there's a lot of trade-offs in language
design, and so the choice here was just to

160
00:07:53.481 --> 00:07:57.523
go with looks the same as a type variable,
but has some extra properties to it.

161
00:07:57.523 --> 00:08:04.159
&gt;&gt; Speaker 3: So in comparison to if it
was a custom type where you would now

162
00:08:04.159 --> 00:08:09.301
have to be able to handle like adding in-
&gt;&gt; Richard Feldman: Yeah,

163
00:08:09.301 --> 00:08:15.222
so there is a, conceivably a way you
can do that with phantom types but

164
00:08:15.222 --> 00:08:17.583
that's a tangents [LAUGH].

165
00:08:17.583 --> 00:08:21.239
There are other possible designs for this.

166
00:08:21.239 --> 00:08:25.754
But the important thing is the way that
the constraints work out is that you can

167
00:08:25.754 --> 00:08:29.160
have something that represents
either an int or a float and

168
00:08:29.160 --> 00:08:33.608
they don't unify with strings, but
they do unify with ints and floats, and

169
00:08:33.608 --> 00:08:36.279
they unify to the more
constraint of the two.

170
00:08:36.279 --> 00:08:40.038
Yeah, there's a lot of bikeshedding
around [LAUGH] how to do constraints,

171
00:08:40.038 --> 00:08:41.600
syntactically or otherwise.

