WEBVTT

1
00:00:00.380 --> 00:00:02.790
&gt;&gt; Richard Feldman: That
brings us to Decode.map and

2
00:00:02.790 --> 00:00:05.890
its bigger cousin, Decode.andThen.

3
00:00:05.890 --> 00:00:09.340
So there are quite a few
map functions in Elm.

4
00:00:09.340 --> 00:00:11.770
Here are a couple of them,
one is Decode.map.

5
00:00:11.770 --> 00:00:15.080
So it takes a function from a to b,
and then takes a Decoder a and

6
00:00:15.080 --> 00:00:16.010
returns a Decoder b.

7
00:00:17.330 --> 00:00:18.630
We also have Maybe.map,

8
00:00:18.630 --> 00:00:21.970
which looks rather similar, a to b,
and then a Maybe a to a Maybe b.

9
00:00:23.170 --> 00:00:27.120
And Result.map, again, a to b, this is
a little bit different in the sense that

10
00:00:27.120 --> 00:00:31.560
it's Result x a, because result has
two type variables, to Result x b.

11
00:00:33.020 --> 00:00:37.630
So all three of these map functions
happen to have the same semantics.

12
00:00:37.630 --> 00:00:42.550
Which is to say, all of them have a notion
of success and a notion of failure.

13
00:00:42.550 --> 00:00:45.180
So in the case of decoding,
it's literally did decoding succeed, or

14
00:00:45.180 --> 00:00:46.620
did decoding fail?

15
00:00:46.620 --> 00:00:49.660
And maybe it's do we have a just,
or do we have nothing?

16
00:00:49.660 --> 00:00:51.580
And the result is, do we have okay,
or do we have error?

17
00:00:53.290 --> 00:00:55.841
And what all three of these
map functions do is they say,

18
00:00:55.841 --> 00:00:58.842
if we're on the happy path,
if we've got a successful decoder.

19
00:00:58.842 --> 00:01:02.314
Or we've got a just in the case of maybe,
and we've got an okay in the case of

20
00:01:02.314 --> 00:01:05.810
result, transform the value
that we're holding onto.

21
00:01:05.810 --> 00:01:09.120
Transform that successful value that
we're in the process of decoding,

22
00:01:09.120 --> 00:01:11.990
transform the just, transform the okay.

23
00:01:13.450 --> 00:01:16.970
Also all three of these
disregard the error case.

24
00:01:16.970 --> 00:01:20.710
So if we have a failing decoder,
this function will not even get called.

25
00:01:20.710 --> 00:01:22.900
If we have nothing for
the maybe, will not get called,

26
00:01:22.900 --> 00:01:24.369
if we have an error, will not get called.

27
00:01:25.840 --> 00:01:29.408
So all it does is it works on
the happy path, it transforms it.

28
00:01:29.408 --> 00:01:34.227
It also stays on the happy path, so
if you call Decode.map, Maybe.map, or

29
00:01:34.227 --> 00:01:38.171
Result.map, if it's going to
actually call this function.

30
00:01:38.171 --> 00:01:41.616
That is to say it's going to have
an okay result or a just maybe or

31
00:01:41.616 --> 00:01:45.971
a successful decoder, that's also what
you're gonna get out the other side.

32
00:01:45.971 --> 00:01:49.542
So in all three cases, it only does
anything if you're on the happy path.

33
00:01:49.542 --> 00:01:52.229
And the one that you get back is
still gonna be on the happy path,

34
00:01:52.229 --> 00:01:54.080
it's still gonna be a successful result.

35
00:01:55.870 --> 00:01:59.200
So this is basically transform
the success variant only

36
00:01:59.200 --> 00:02:00.890
don't touch the error case at all.

37
00:02:00.890 --> 00:02:02.026
If it's an error, just leave it alone.

38
00:02:02.026 --> 00:02:08.233
Okay, so that's map,
let's talk about andThen.

39
00:02:08.233 --> 00:02:12.469
So andThen has an extremely
similar signature to map,

40
00:02:12.469 --> 00:02:17.270
the only difference is instead of a to b,
it's a to decoder b.

41
00:02:17.270 --> 00:02:20.938
And the difference in what it does is
it says I'm going to take whatever you

42
00:02:20.938 --> 00:02:24.380
return in this function, and
I'm just gonna return that directly.

43
00:02:25.610 --> 00:02:28.840
So if we're on the happy path,
if we're in the success variant,

44
00:02:28.840 --> 00:02:30.950
then we're gonna say okay great.

45
00:02:30.950 --> 00:02:34.883
We're gonna call this function, and then
whatever you return here I'm not gonna

46
00:02:34.883 --> 00:02:38.075
wrap it up into success again,
I'm just gonna use it straight up.

47
00:02:39.892 --> 00:02:41.690
&gt;&gt; Richard Feldman: So what does that do,
what does that give us?

48
00:02:41.690 --> 00:02:45.660
That gives us a new power that we didn't
have with map, and it's the power to fail.

49
00:02:46.690 --> 00:02:49.220
So in the case of map,
we stay on the happy path.

50
00:02:49.220 --> 00:02:52.410
If it was successful before,
it's gonna be successful after mapping.

51
00:02:52.410 --> 00:02:56.570
With andThen, we can potentially say
Decode.succeed at the end of that,

52
00:02:56.570 --> 00:02:58.400
in which case we will
stay on the happy path.

53
00:02:58.400 --> 00:03:03.740
We can also say Decode.fail, in which
case we have gone from the success path

54
00:03:03.740 --> 00:03:09.820
to failure, so andThen introduces
the ability to change success to failure.

55
00:03:09.820 --> 00:03:13.200
A decoder that was in the process of
succeeding, now it has suddenly failed.

56
00:03:14.790 --> 00:03:18.340
At the same time it still has the power
to transform just like map does.

57
00:03:18.340 --> 00:03:21.855
So in that sense it's a more
powerful version of map.

58
00:03:21.855 --> 00:03:25.521
And you know what they say, with great
power comes great responsibility,

59
00:03:25.521 --> 00:03:28.853
which is why as a general rule,
if you can, if map gets the job done.

60
00:03:28.853 --> 00:03:32.160
Map is a better choice because
you know more about it.

61
00:03:32.160 --> 00:03:34.922
In the case of map you know that it's
only going to keep you on the happy path,

62
00:03:34.922 --> 00:03:37.490
whereas andThen you now
have more to think about.

63
00:03:37.490 --> 00:03:39.860
When you look at some code
that's using andThen,

64
00:03:39.860 --> 00:03:42.110
you think wait a minute it might
actually be changing it to a failure.

65
00:03:42.110 --> 00:03:45.359
What are the implications of that,
that has fewer implications.

66
00:03:45.359 --> 00:03:50.080
But, andThen does have more power,
and sometimes that's what you want.

67
00:03:51.410 --> 00:03:53.037
So, we can get into some
specific examples, but

68
00:03:53.037 --> 00:03:55.196
while we still have this on the screen,
any questions about it?

69
00:03:59.630 --> 00:04:04.323
&gt;&gt; Student 1: So, I'm assuming the
andThen, rhe use case is kind of you do

70
00:04:04.323 --> 00:04:10.042
some logic to decide if it's this
specific value we're gonna fail.

71
00:04:10.042 --> 00:04:13.166
&gt;&gt; Richard Feldman: Yeah, so most common
andThen is used for additional validation,

72
00:04:13.166 --> 00:04:15.061
where you have some code and it's like,

73
00:04:15.061 --> 00:04:17.652
I was able to successfully
decode it from the raw JSON.

74
00:04:17.652 --> 00:04:21.400
But I actually don't want the overall
decoder to succeed unless for example,

75
00:04:21.400 --> 00:04:23.980
not only did I get a string,
but it wasn't empty.

76
00:04:23.980 --> 00:04:27.520
If it was an empty string, that's invalid,
I wanna fail the decoder right there.

77
00:04:27.520 --> 00:04:30.730
Something like that, and we're gonna
see an example of that in a moment.

