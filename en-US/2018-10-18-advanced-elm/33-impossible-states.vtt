WEBVTT

1
00:00:00.000 --> 00:00:00.656
&gt;&gt; Richard Feldman: Sources of truth,

2
00:00:00.656 --> 00:00:02.505
we're gonna talk about a few
different topics here.

3
00:00:02.505 --> 00:00:06.425
One is impossible states and
the making impossible there of.

4
00:00:06.425 --> 00:00:11.532
Derived data,
authentication and JavaScript.

5
00:00:11.532 --> 00:00:14.722
Okay, lets start with
some impossible states.

6
00:00:14.722 --> 00:00:17.548
So when we're talking
about sources of truth,

7
00:00:17.548 --> 00:00:21.801
generally speaking these break down
into a few different categories.

8
00:00:21.801 --> 00:00:26.733
One of which is essentially do I have
agreement on where a particular piece

9
00:00:26.733 --> 00:00:28.333
of information lives.

10
00:00:28.333 --> 00:00:33.289
So let's say I have a model that has
selectedTag which is a string to represent

11
00:00:33.289 --> 00:00:35.816
which particular tag I have selected.

12
00:00:35.816 --> 00:00:37.818
And then let say for some reason.

13
00:00:37.818 --> 00:00:43.156
I have another field, I call
theSelectedTag which is also a string.

14
00:00:43.156 --> 00:00:45.573
Okay, which one's right?

15
00:00:45.573 --> 00:00:48.635
They're both claiming to represent
the currently selected tag.

16
00:00:48.635 --> 00:00:52.191
We have sort of multiple
alleged sources of truth, here.

17
00:00:52.191 --> 00:00:55.033
It's even worse if I'm actually
using them in different places,

18
00:00:55.033 --> 00:00:57.481
like in some cases I'm setting the one but
not the other.

19
00:00:57.481 --> 00:01:00.127
In another case as I'm reading the one but
not the other.

20
00:01:00.127 --> 00:01:03.261
That's going to lead to all sorts
of nasty blogs if I'm doing that.

21
00:01:03.261 --> 00:01:07.479
So hopefully, we can avoid something like
this when we're designing our models.

22
00:01:07.479 --> 00:01:09.523
But usually, it's trickier than that.

23
00:01:09.523 --> 00:01:10.907
Usually, it's less obvious.

24
00:01:10.907 --> 00:01:13.959
It's not that you have two things
that are the same name but

25
00:01:13.959 --> 00:01:18.130
rather that you have some piece of data
that is nested somewhere in some record or

26
00:01:18.130 --> 00:01:22.301
nested in some custom type that represents
the same piece of information as some

27
00:01:22.301 --> 00:01:26.055
other piece of data that's nested
somewhere else in some other thing.

28
00:01:26.055 --> 00:01:30.002
A classic example of this is the current
user or the current username.

29
00:01:30.002 --> 00:01:32.942
Sometimes that might appear in
multiple different places and

30
00:01:32.942 --> 00:01:35.554
as long as they all agree,
maybe there's no problem.

31
00:01:35.554 --> 00:01:39.397
But if they can get out of sync, and then
different parts of the UI think that we

32
00:01:39.397 --> 00:01:42.549
have a different current username,
that can cause a problem.

33
00:01:42.549 --> 00:01:46.088
Okay,
&gt;&gt; Richard Feldman: So when I first built

34
00:01:46.088 --> 00:01:50.579
out that tab box that we saw a moment ago,
this is what I had as a design.

35
00:01:50.579 --> 00:01:54.877
I'm sorry not that part of the tab box,
but rather this part.

36
00:01:54.877 --> 00:01:58.660
This is the The global feed,
your feed, and

37
00:01:58.660 --> 00:02:03.065
then the tag if you have
one of those tags selected.

38
00:02:03.065 --> 00:02:05.432
So each of these is a tab.

39
00:02:05.432 --> 00:02:08.649
I could represent these
in this way which I have.

40
00:02:08.649 --> 00:02:11.799
A name which is a string,
so Your Feed, Global Feed,

41
00:02:11.799 --> 00:02:16.769
or perhaps the name of the tag that we've
selected, so dragons or happiness or elm,

42
00:02:16.769 --> 00:02:18.744
or whatever those things may be.

43
00:02:18.744 --> 00:02:22.317
And I can store a Boolean for
whether or not it's the active tab.

44
00:02:22.317 --> 00:02:26.981
The problem with this is that it allows
an impossible state to be represented.

45
00:02:26.981 --> 00:02:31.353
It is entirely possible that we end
up with multiple tabs that have

46
00:02:31.353 --> 00:02:34.860
active set to true as is
evidence in the bottom here.

47
00:02:34.860 --> 00:02:39.232
And this is not a contrived example
because actually when I was browsing their

48
00:02:39.232 --> 00:02:43.952
react reducts example for this project,
the real world app, I encountered this.

49
00:02:43.952 --> 00:02:48.319
In fact, this just, I don't remember how I
got it, but I was just clicking around and

50
00:02:48.319 --> 00:02:51.066
somehow I ended up with two
different tabs selected.

51
00:02:51.066 --> 00:02:55.013
This is I would guess probably a symptom
of the fact that in React it's encouraged

52
00:02:55.013 --> 00:02:57.057
to use components that have local state.

53
00:02:57.057 --> 00:02:58.321
They manage their own state.

54
00:02:58.321 --> 00:02:59.377
In this case,

55
00:02:59.377 --> 00:03:05.026
that's a source of potential bugs in
the form of multiple sources of truth.

56
00:03:05.026 --> 00:03:08.069
Each of them thinks that
they are the active tab but

57
00:03:08.069 --> 00:03:10.536
in fact there can only be one active tab.

58
00:03:10.536 --> 00:03:12.824
That is one of our rules for these tabs.

59
00:03:12.824 --> 00:03:16.740
And so if each of them thinks that they
can potentially be it without having any

60
00:03:16.740 --> 00:03:20.538
innate coordination with the others,
that means they can potentially end

61
00:03:20.538 --> 00:03:24.092
up in a situation where we have
multiple competing sources of truth and

62
00:03:24.092 --> 00:03:25.801
bugs as a consequence like this.

63
00:03:25.801 --> 00:03:31.617
Where we ended up with this
is a different structure.

64
00:03:31.617 --> 00:03:36.393
So we have type tab and
this represents which tab we're on.

65
00:03:36.393 --> 00:03:38.536
It sort of inverts that and
says you know what?

66
00:03:38.536 --> 00:03:40.808
We're only gonna have one source
of truth for what tab we're on.

67
00:03:40.808 --> 00:03:44.759
We're going to enumerate the three
possibilities which is to say your feed is

68
00:03:44.759 --> 00:03:45.623
the active tab.

69
00:03:45.623 --> 00:03:47.394
The global feed is the active tab.

70
00:03:47.394 --> 00:03:50.090
Or we have a particular tag feed and
if so,

71
00:03:50.090 --> 00:03:55.266
we also have the tag that is associated
with that, so dragons or whatever else.

72
00:03:55.266 --> 00:04:00.276
So this is a custom type that enumerates
all of the possible states completely,

73
00:04:00.276 --> 00:04:03.133
and it's one source of truth for
all of them.

74
00:04:03.133 --> 00:04:07.082
So we don't have the possibility
of competition just stores,

75
00:04:07.082 --> 00:04:09.625
this is the tab that we're on like this.

76
00:04:09.625 --> 00:04:11.081
So this becomes impossible.

77
00:04:11.081 --> 00:04:15.891
This is an impossible state that we have
made impossible by virtue of modeling our

78
00:04:15.891 --> 00:04:17.105
data differently.

79
00:04:17.105 --> 00:04:21.690
As a consequence we've now
reduced our multiple sources of

80
00:04:21.690 --> 00:04:23.533
truth down to just one.

81
00:04:23.533 --> 00:04:26.283
I did a whole talk on this
concept a couple of years ago.

82
00:04:26.283 --> 00:04:28.331
It's called "Making
Impossible States Impossible".

83
00:04:28.331 --> 00:04:32.916
It talks about techniques like this in a
variety of different scenarios so we won't

84
00:04:32.916 --> 00:04:36.975
go into too much detail on that right
now except to note that this is one form

85
00:04:36.975 --> 00:04:41.447
of potential multiple sources of truth
causing problems is impossible states.

