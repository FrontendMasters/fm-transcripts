WEBVTT

1
00:00:00.190 --> 00:00:02.790
&gt;&gt; Richard Feldman: So
fundamentally, this is how we can,

2
00:00:02.790 --> 00:00:05.850
as Elm programmers,
construct guarantees like this.

3
00:00:07.370 --> 00:00:11.070
So if another module attempts to do this
anyway, and they say, you know what?

4
00:00:11.070 --> 00:00:12.970
I don't care about your alleged guarantee.

5
00:00:12.970 --> 00:00:15.450
I'm going to import this
email thing anyway, and

6
00:00:15.450 --> 00:00:18.560
I'm going to construct an invalid
email just to spite you.

7
00:00:18.560 --> 00:00:19.387
Well, it's just not gonna compile.

8
00:00:19.387 --> 00:00:23.980
Because if the variance is not exposed,

9
00:00:23.980 --> 00:00:28.713
you can't access it from other modules.

10
00:00:28.713 --> 00:00:31.610
So this is how we create what's
known as an Opaque Type.

11
00:00:31.610 --> 00:00:33.100
We define a type,

12
00:00:33.100 --> 00:00:35.820
and it doesn't even have to have any
particular data associated with it.

13
00:00:35.820 --> 00:00:41.865
We could literally say type Email = Email,
the most boring type you can imagine.

14
00:00:41.865 --> 00:00:46.220
But if we're not exposing that variant,
that is an opaque type.

15
00:00:46.220 --> 00:00:50.260
The opacity that it refers to means that
other modules can't look inside of it.

16
00:00:50.260 --> 00:00:53.183
They can see that they have one,
but that's all they can see.

17
00:00:53.183 --> 00:00:57.423
In other words, the implementation details
are hidden within the module where that

18
00:00:57.423 --> 00:00:58.686
custom type is defined.

19
00:01:01.037 --> 00:01:02.989
&gt;&gt; Richard Feldman: Some other
examples of opaque types,

20
00:01:02.989 --> 00:01:06.170
Random.Generator from
the core random library.

21
00:01:06.170 --> 00:01:10.143
Decoder, like JSON decoder is an opaque
type, and HTML is an opaque type.

22
00:01:10.143 --> 00:01:13.529
Now one of the interesting things about
opaque types is that this is not the only

23
00:01:13.529 --> 00:01:15.220
way to get them.

24
00:01:15.220 --> 00:01:20.720
So these things right here, Decoder and
Html, those in particular are built

25
00:01:20.720 --> 00:01:25.500
using kernel code, underlying root
level system stuff inside of Elm.

26
00:01:25.500 --> 00:01:27.460
The virtual DOM is baked into Elm.

27
00:01:27.460 --> 00:01:32.000
Html is an opaque type, but
its internals are not custom type.

28
00:01:32.000 --> 00:01:34.690
It's not just a series of variants.

29
00:01:34.690 --> 00:01:38.840
It's something more complicated than that
that relies on deep internals within Elm.

30
00:01:39.870 --> 00:01:42.310
But the point is that we don't know that,
and we can't know that.

31
00:01:42.310 --> 00:01:43.400
We can't rely on that.

32
00:01:43.400 --> 00:01:46.780
We can't rely on any of the internal
implementation details of Html,

33
00:01:46.780 --> 00:01:48.740
of decoder, of random.generator or

34
00:01:48.740 --> 00:01:53.310
even of this email type because it's
all confined to that one module.

35
00:01:53.310 --> 00:01:56.773
So the key thing here is not so
much that we've used a custom type, but

36
00:01:56.773 --> 00:01:58.341
not exposed the constructor.

37
00:01:58.341 --> 00:02:03.536
But rather that the opacity of the type is
what other modules can do with that type,

38
00:02:03.536 --> 00:02:05.060
once they've got one.

39
00:02:06.080 --> 00:02:06.670
And specifically,

40
00:02:06.670 --> 00:02:09.740
all they can do if it's opaque,
is they can annotate that they've got one.

41
00:02:09.740 --> 00:02:10.300
That's it.

42
00:02:10.300 --> 00:02:11.310
They can hold onto it.

43
00:02:11.310 --> 00:02:12.240
They can't look inside.

44
00:02:12.240 --> 00:02:12.980
They can't make a new one.

45
00:02:14.160 --> 00:02:14.800
Questions about that?

46
00:02:16.300 --> 00:02:17.450
Yeah?

47
00:02:17.450 --> 00:02:20.580
&gt;&gt; Speaker 2: Is there
an example of implementation?

48
00:02:20.580 --> 00:02:26.050
When you say implementation
details are in, for

49
00:02:26.050 --> 00:02:29.920
Html I guess it would be like how
does it turn into Html, right?

50
00:02:29.920 --> 00:02:31.458
&gt;&gt; Richard Feldman: Sure, yeah.
&gt;&gt; Speaker 2: Okay.

51
00:02:31.458 --> 00:02:34.619
&gt;&gt; Richard Feldman: Yeah, exactly, I mean,
basically you can't know the structure,

52
00:02:34.619 --> 00:02:36.211
might be another way of saying it.

53
00:02:36.211 --> 00:02:38.630
You can just see the outside shape or

54
00:02:38.630 --> 00:02:41.863
you don't know what is
going on under the hood.

55
00:02:41.863 --> 00:02:45.300
Right, you can modify it, so
in an immutable language or

56
00:02:45.300 --> 00:02:50.610
whenever you have immutable values, modify
means look at and create a new one, right?

57
00:02:50.610 --> 00:02:51.662
And you can't do either of those.

58
00:02:51.662 --> 00:02:56.400
[LAUGH] You can observe that you have
one but not what's going on inside it.

59
00:02:56.400 --> 00:02:57.410
This is also relevant for

60
00:02:57.410 --> 00:03:01.020
your ability to evolve your code over
time without causing regressions.

61
00:03:01.020 --> 00:03:04.290
Because if you know that nobody can rely
on your implementation details, if later

62
00:03:04.290 --> 00:03:07.820
on you wanna change those implementation
details to add a performance optimization

63
00:03:07.820 --> 00:03:11.110
or to just refractor your code,
you know that it's safe to do that.

64
00:03:11.110 --> 00:03:13.580
Because nobody else could
possibly be relying on those and

65
00:03:13.580 --> 00:03:15.380
have their code get broken by them.

66
00:03:15.380 --> 00:03:16.909
Even if it still type checks.

67
00:03:18.380 --> 00:03:20.270
Good question, other questions?

68
00:03:20.270 --> 00:03:22.920
Yeah.
&gt;&gt; Speaker 3: So in this specific example,

69
00:03:22.920 --> 00:03:26.540
the implementation detail is
just the ability to construct.

70
00:03:27.610 --> 00:03:28.280
&gt;&gt; Richard Feldman: Right, yeah, so

71
00:03:28.280 --> 00:03:32.760
this is the dumbest possible example
because we actually don't have any.

72
00:03:32.760 --> 00:03:35.080
As it happens, we've hidden
the implementation details, and

73
00:03:35.080 --> 00:03:37.410
the implementation details
are completely boring.

74
00:03:37.410 --> 00:03:40.986
The deep dark secret of this email
type is that it does nothing.

75
00:03:40.986 --> 00:03:44.560
But if we did have other stuff in here,
you still wouldn't be able to tell.

76
00:03:44.560 --> 00:03:48.097
This could be Email string,
it could be Email string int foo bar.

77
00:03:48.097 --> 00:03:49.970
No one knows outside this module.

