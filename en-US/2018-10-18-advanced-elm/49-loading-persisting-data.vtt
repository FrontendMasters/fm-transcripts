WEBVTT

1
00:00:00.000 --> 00:00:03.290
&gt;&gt; Richard Feldman: So, when I go over
here, when I'm loading this page.

2
00:00:03.290 --> 00:00:06.837
And I'm loading the free or
the global feed or one of these tags,

3
00:00:06.837 --> 00:00:08.490
that's doing HTTP request.

4
00:00:08.490 --> 00:00:11.660
And while that HTTP request is in flight,

5
00:00:11.660 --> 00:00:14.880
we have some decisions to make about what
we're going to render on the screen.

6
00:00:14.880 --> 00:00:18.610
Likewise, when I refresh the page, at the
very beginning, we have a little bit of

7
00:00:18.610 --> 00:00:24.330
loading here, so you can see a very brief
flash of content as it's coming in there.

8
00:00:24.330 --> 00:00:27.190
So what are we actually going
to do about the possibility that

9
00:00:27.190 --> 00:00:29.490
that loading might take
a little bit of time?

10
00:00:29.490 --> 00:00:32.130
Well, one thing we talked about
earlier was the loading spinner.

11
00:00:32.130 --> 00:00:34.860
So we have that concept of
wait 500 milliseconds and

12
00:00:34.860 --> 00:00:39.140
if we don't have the data loaded by then,
display a spinner.

13
00:00:39.140 --> 00:00:43.110
But we have a separate question
of at what level do we do that.

14
00:00:43.110 --> 00:00:46.670
Do we render as much of the page as we can
and then only show loading spinners for

15
00:00:46.670 --> 00:00:48.600
the parts of the page
that are still loading?

16
00:00:48.600 --> 00:00:51.020
Or do we just block the whole page and
say you know what,

17
00:00:51.020 --> 00:00:53.450
until we get all of our data,
we're not gonna show you anything?

18
00:00:53.450 --> 00:00:56.500
We're just gonna show you
at most a loading is there.

19
00:00:56.500 --> 00:00:57.880
So I used to do it that second way and

20
00:00:57.880 --> 00:01:00.980
I've since come around to the idea that
maybe that's not actually the best choice.

21
00:01:00.980 --> 00:01:03.890
Maybe the better choice is
to load as much as possible,

22
00:01:03.890 --> 00:01:07.310
render as much as possible, and
then just block waiting for

23
00:01:07.310 --> 00:01:10.280
the remaining data to load,
which is what we're doing now.

24
00:01:10.280 --> 00:01:14.820
So when I load this page,
I'm getting two HTTP requests,

25
00:01:14.820 --> 00:01:19.330
which we can see inside home.elm or
page/home.elm.

26
00:01:19.330 --> 00:01:21.070
We could see that right here in the model.

27
00:01:21.070 --> 00:01:22.610
So we have tags and feet.

28
00:01:22.610 --> 00:01:24.600
Those are the two separate
things that we're loading.

29
00:01:24.600 --> 00:01:26.900
And we talked about this status
type earlier that has loading,

30
00:01:26.900 --> 00:01:30.160
loadingSlowly, successfully loaded,
or failed.

31
00:01:30.160 --> 00:01:32.480
And both of those are loaded
at the same time.

32
00:01:32.480 --> 00:01:34.780
So when I visit this page,
it's loading the feed.

33
00:01:34.780 --> 00:01:37.710
And then a separate HTTP
request is loading the tags.

34
00:01:37.710 --> 00:01:40.870
And as soon as it gets one or the other,
it will immediately render it.

35
00:01:40.870 --> 00:01:43.990
So basically, this means that if
the user's on a slow connection

36
00:01:43.990 --> 00:01:48.110
they are getting as much of the screen
as possible as soon as possible.

37
00:01:48.110 --> 00:01:51.120
But that's not necessarily the right
choice for your application.

38
00:01:51.120 --> 00:01:53.370
As I said,
there are different trade offs here.

39
00:01:53.370 --> 00:01:55.820
It may be that what makes the most sense
for your application is to wait for

40
00:01:55.820 --> 00:01:57.500
all the data sources to come back,

41
00:01:57.500 --> 00:02:00.970
because perhaps it doesn't make sense
to show the one without the other.

42
00:02:00.970 --> 00:02:04.270
Depending on your use case, you may want
to actually intentionally block, and

43
00:02:04.270 --> 00:02:07.410
in that case, you would actually
organize this in your data model

44
00:02:07.410 --> 00:02:08.890
perhaps a little bit differently.

45
00:02:08.890 --> 00:02:12.665
Or at least in your view where you would
check to make sure that both of these were

46
00:02:12.665 --> 00:02:14.226
present before continuing on.

47
00:02:14.226 --> 00:02:16.233
Lots of different ways you can do it.

48
00:02:16.233 --> 00:02:20.680
Okay, then we have the final
question of persistence.

49
00:02:20.680 --> 00:02:24.670
So what is actually going
to be shared between pages?

50
00:02:24.670 --> 00:02:27.020
So we have a couple of
different examples of this.

51
00:02:27.020 --> 00:02:31.550
One is we are on this page, and

52
00:02:31.550 --> 00:02:34.830
when I go to different pages,
I wanna keep my session around in memory.

53
00:02:35.890 --> 00:02:38.730
So we talked earlier about having one
single source of truth for the session,

54
00:02:38.730 --> 00:02:41.260
which is ultimately a cache
of what's in local storage,

55
00:02:41.260 --> 00:02:43.410
which in turn is a cache
of what's on the server.

56
00:02:43.410 --> 00:02:47.700
But we do in fact have that cache in our
model, and so we have this notion of

57
00:02:47.700 --> 00:02:51.590
a session, which is data that is
essentially shared between pages.

58
00:02:51.590 --> 00:02:55.020
This is a cache that gets handed
around from page to page, and

59
00:02:55.020 --> 00:02:58.056
if we are logged in,
we have the navigation key.

60
00:02:58.056 --> 00:03:01.920
Which is an implementation detail of
navigation that we're not gonna get into

61
00:03:01.920 --> 00:03:03.140
in this workshop.

62
00:03:03.140 --> 00:03:05.860
And then we have the viewer
if we're logged in.

63
00:03:05.860 --> 00:03:09.500
And that just gets passed
around from page to page, and

64
00:03:09.500 --> 00:03:12.750
the viewer contains among other things,
the authentication token.

65
00:03:14.060 --> 00:03:17.300
So, that prevents us from having to go and
get that from the server or

66
00:03:17.300 --> 00:03:21.180
some local storage each time we
transition from page to page.

67
00:03:21.180 --> 00:03:24.380
But that notion of caching
that session from page to page

68
00:03:24.380 --> 00:03:26.220
can happen in all sorts of different ways.

69
00:03:26.220 --> 00:03:30.770
For example on the package website,
when you go from one page to another,

70
00:03:30.770 --> 00:03:34.570
it's actually caching the search
results from the previous page.

71
00:03:34.570 --> 00:03:37.835
So if I go to package website,
when I go from one link to another,

72
00:03:37.835 --> 00:03:41.340
it's able to cache the search results
that I had previously sourced.

73
00:03:41.340 --> 00:03:43.848
If I go back,
it doesn't need actually go back and

74
00:03:43.848 --> 00:03:46.614
do another HTTP request to
show these search results.

75
00:03:46.614 --> 00:03:50.413
It actually just remembers them and cache
them as it was transitioning from page to

76
00:03:50.413 --> 00:03:53.150
page in this single page application.

77
00:03:53.150 --> 00:03:55.990
So essentially, you can cache whatever
you want from page to page and

78
00:03:55.990 --> 00:03:58.990
you can say, yeah,
we don't need to do another HTTP request.

79
00:03:58.990 --> 00:04:02.310
I'm quite confident that these
are the search results that you want and

80
00:04:02.310 --> 00:04:06.030
the odds of your getting,
missing search results are so

81
00:04:06.030 --> 00:04:08.590
low that I'd rather just
show you them faster.

82
00:04:08.590 --> 00:04:10.980
But then once again,
we have caching is a hard problem.

83
00:04:10.980 --> 00:04:12.770
Cache and validation is a hard problem.

84
00:04:12.770 --> 00:04:16.200
Now you have questions like should
you have a timeout on your cache?

85
00:04:16.200 --> 00:04:19.520
Should you say I will keep these in
my cache for this period of time.

86
00:04:19.520 --> 00:04:23.460
But once a certain number of milliseconds,
or seconds, or minutes has elapsed.

87
00:04:23.460 --> 00:04:26.300
You know what, it's probably stale,
you've probably left that tab open for

88
00:04:26.300 --> 00:04:27.140
a long time.

89
00:04:27.140 --> 00:04:28.590
Now we need to validate that cache and

90
00:04:28.590 --> 00:04:32.170
say let's go do an HTTP request as
if we've loaded the page fresh.

91
00:04:33.180 --> 00:04:34.340
So all of these things are options, and

92
00:04:34.340 --> 00:04:37.200
they're worth considering based
on your particular use case.

93
00:04:37.200 --> 00:04:38.400
What things do you want to load?

94
00:04:38.400 --> 00:04:39.830
When do you want to load them?

95
00:04:39.830 --> 00:04:42.310
What should the user be able
to see while they're loading?

96
00:04:42.310 --> 00:04:45.720
And once you've loaded them, how do
you want to persist them across pages?

97
00:04:45.720 --> 00:04:46.850
Do you want to persist them at all?

98
00:04:46.850 --> 00:04:48.580
Do you want to go get
a fresh copy every time, or

99
00:04:48.580 --> 00:04:50.600
do you want to save some
of the stuff in a cache?

100
00:04:50.600 --> 00:04:53.390
If you're gonna save it in a cache,
do you wanna invalidate it?

101
00:04:53.390 --> 00:04:55.990
If so, when, under what circumstances?

102
00:04:55.990 --> 00:04:58.870
All of these things are tradeoffs worth
considering when building a single

103
00:04:58.870 --> 00:04:59.860
page application.

104
00:04:59.860 --> 00:05:03.440
So we talked about routes and
how they can go from URL to route,

105
00:05:03.440 --> 00:05:04.550
we have that mapping.

106
00:05:04.550 --> 00:05:06.830
We talked about pages, how we have, sorry,

107
00:05:06.830 --> 00:05:11.480
routes can also go from the particular
route that you already have to the URL.

108
00:05:11.480 --> 00:05:12.630
We talked about pages,

109
00:05:12.630 --> 00:05:16.740
which is the notion of a particular
page that you're viewing in the browser.

110
00:05:16.740 --> 00:05:19.544
Which is related to routes but
not on a one to one basis.

111
00:05:19.544 --> 00:05:24.090
And also the page module holds on to
the view that is used on all the pages for

112
00:05:24.090 --> 00:05:25.720
rendering the frame around each page.

113
00:05:25.720 --> 00:05:30.580
As well as the extra logic for viewing
errors, which a lot of pages had to used.

114
00:05:30.580 --> 00:05:31.850
Let's talk about loading and

115
00:05:31.850 --> 00:05:36.020
persisting data about when we should go
to the server to get more information and

116
00:05:36.020 --> 00:05:40.780
when we should come back and what we
should store in the cache, if anything.

117
00:05:40.780 --> 00:05:43.758
If we do decide to store something,
how we should go about persisting that,

118
00:05:43.758 --> 00:05:46.004
whether the cache should
expire under a certain policy.

119
00:05:46.004 --> 00:05:48.081
And finally,
we talked about module structure,

120
00:05:48.081 --> 00:05:50.060
like when to put things in a namespace.

121
00:05:50.060 --> 00:05:52.990
The potential downsides of having
a namespace like data or request or

122
00:05:52.990 --> 00:05:56.570
something that encourages putting
modules in a particular boundary.

123
00:05:56.570 --> 00:06:00.380
Even when perhaps there's a better
boundary to be had by focusing on a type,

124
00:06:00.380 --> 00:06:02.380
which tends to be
the better policy with Elm.

125
00:06:02.380 --> 00:06:06.010
So far, the only namespace that I've
consistently found use for is page.

