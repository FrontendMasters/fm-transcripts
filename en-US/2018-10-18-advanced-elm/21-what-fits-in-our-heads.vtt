WEBVTT

1
00:00:00.000 --> 00:00:01.840
&gt;&gt; Richard Feldman: So
in the topic of scaling,

2
00:00:01.840 --> 00:00:05.120
we're gonna talk about
a couple of things here.

3
00:00:05.120 --> 00:00:07.343
One is what fits in our
heads as developers,

4
00:00:07.343 --> 00:00:09.214
we'll talk about narrowing types.

5
00:00:09.214 --> 00:00:12.585
We're gonna talk about
enforcement arguments.

6
00:00:12.585 --> 00:00:17.057
And finally, we're gonna talk about
using modules for modularity.

7
00:00:17.057 --> 00:00:21.486
This is one of the three sections in
the workshop in which we go immediately,

8
00:00:21.486 --> 00:00:22.259
to the code!

9
00:00:22.259 --> 00:00:27.800
All right, so we're gonna be talking about
the code with no assistance from slides.

10
00:00:27.800 --> 00:00:29.301
All right, so what fits in our heads?

11
00:00:29.301 --> 00:00:31.187
Let's start with that.

12
00:00:31.187 --> 00:00:34.625
So here in the sidebar, we can see
the entire code base of elm-spa-example.

13
00:00:34.625 --> 00:00:40.762
We're gonna ignore the assets directory,
because there's no actual code in there.

14
00:00:40.762 --> 00:00:44.348
But if I expand out all of these
directories, and sub-directories, and so

15
00:00:44.348 --> 00:00:46.991
forth, you end up with quite
a good bit of stuff in here.

16
00:00:46.991 --> 00:00:51.566
Ignoring tests altogether,
we have a large number of modules,

17
00:00:51.566 --> 00:00:55.632
reasonably sized number of folders,
and quite a bit of,

18
00:00:55.632 --> 00:00:59.038
thousands of lines of
code across all of these.

19
00:00:59.038 --> 00:01:01.848
Now there comes a point
in every application,

20
00:01:01.848 --> 00:01:06.675
if it gets sufficiently large, that it's
not just enough to say that if I look at

21
00:01:06.675 --> 00:01:10.154
this one particular module,
I can keep it all in my head.

22
00:01:10.154 --> 00:01:14.008
But when we start off small and the whole
application sort of fits in our head,

23
00:01:14.008 --> 00:01:15.501
we outgrow that eventually.

24
00:01:15.501 --> 00:01:18.774
And maybe in some cases,
we outgrow it even at the module level.

25
00:01:18.774 --> 00:01:22.007
We have a particular module
where it's like, there's just so

26
00:01:22.007 --> 00:01:25.740
much logic going on in here that I
can't keep this whole thing in my head.

27
00:01:25.740 --> 00:01:28.905
The article editor in particular,
600-some-odd lines of code,

28
00:01:28.905 --> 00:01:30.654
there's a lot of stuff going on there.

29
00:01:30.654 --> 00:01:34.371
I can't necessarily just read this whole
thing, load it all into my head and

30
00:01:34.371 --> 00:01:38.163
be like, yep, I could answer a question
about any part of this, at any time.

31
00:01:38.163 --> 00:01:41.340
Because I just understand it all so
well, it all fits in my head.

32
00:01:41.340 --> 00:01:45.354
I mean as humans, we're limited by sort
of the notion of what fits in our heads.

33
00:01:45.354 --> 00:01:49.683
But we're also limited by the realities
of working on a collaborative team.

34
00:01:49.683 --> 00:01:52.969
So even if I did get something like this
loaded into my head, and I'm like yeah,

35
00:01:52.969 --> 00:01:54.410
I have perfect knowledge of this.

36
00:01:54.410 --> 00:01:56.989
I completely understand what's going on.

37
00:01:56.989 --> 00:01:59.779
If I have a big enough team,
by the time I finish that sentence,

38
00:01:59.779 --> 00:02:02.581
someone's already made a pull
request that changes the code.

39
00:02:02.581 --> 00:02:03.792
And now it's no longer true,

40
00:02:03.792 --> 00:02:06.366
even though it was true when I
started off saying the sentence.

41
00:02:06.366 --> 00:02:09.521
Now, I don't work at a company that's
big enough for that to be true.

42
00:02:09.521 --> 00:02:12.698
But there are companies out there where
you really can get, even if you have

43
00:02:12.698 --> 00:02:15.726
a perfect piece of knowledge about
some particular piece of code, that

44
00:02:15.726 --> 00:02:19.330
can be invalidated by somebody else before
you even finish what you're working on.

45
00:02:19.330 --> 00:02:21.954
So this is sort of a general
problem in software.

46
00:02:21.954 --> 00:02:26.405
This is not something Elm specific, but
Elm does have certain techniques that we

47
00:02:26.405 --> 00:02:29.359
can use to make this problem
at least more tractable.

48
00:02:29.359 --> 00:02:33.240
So in general, what we're going to try and
do here, is we're going to try and

49
00:02:33.240 --> 00:02:36.704
slice things up, so that there are parts
of the code that we could load

50
00:02:36.704 --> 00:02:39.060
into our heads,
that will fit into our heads.

51
00:02:39.060 --> 00:02:43.113
And where we can actually work just
in terms of that subset of the code,

52
00:02:43.113 --> 00:02:46.960
without having to load the rest
into our heads to be productive, or

53
00:02:46.960 --> 00:02:50.551
to avoid shooting ourselves in the foot or
causing problems.

54
00:02:50.551 --> 00:02:52.841
And as has been a recurring theme in here,

55
00:02:52.841 --> 00:02:56.840
what we're going to be doing to do
this is to leverage the compiler more.

56
00:02:56.840 --> 00:03:01.672
So it is entirely possible to write
an Elm program in which all of our

57
00:03:01.672 --> 00:03:04.538
types are sort of as broad as possible.

58
00:03:04.538 --> 00:03:08.067
So let's look at, for
example, the Model type.

59
00:03:08.067 --> 00:03:10.818
Every page that we have in
here has its own Model.

60
00:03:10.818 --> 00:03:14.273
Model has typically at least
a couple of things going on here.

61
00:03:14.273 --> 00:03:17.422
This particular Model doesn't actually
have that much going on in it,

62
00:03:17.422 --> 00:03:19.217
because it only has Session and Status.

63
00:03:19.217 --> 00:03:20.384
But if you look at Status,

64
00:03:20.384 --> 00:03:22.834
there's actually quite a bit
going on inside Status.

65
00:03:22.834 --> 00:03:26.447
There's a bunch of different incremental
states that we could be in with this

66
00:03:26.447 --> 00:03:27.570
article editing page.

67
00:03:27.570 --> 00:03:31.892
So just to walk through them, we could
say, okay, we might be editing an article.

68
00:03:31.892 --> 00:03:35.735
In which case,
we have this set of possibilities.

69
00:03:35.735 --> 00:03:38.135
Or we could be working on a New Article.

70
00:03:38.135 --> 00:03:41.501
Both of those are sorta dynamically
determined on the page,

71
00:03:41.501 --> 00:03:43.549
based on how you arrived at the page.

72
00:03:43.549 --> 00:03:47.936
And there's a lot in common between those
two, but they do have some differences.

73
00:03:47.936 --> 00:03:50.895
For example, on the New Article,
there's nothing to load.

74
00:03:50.895 --> 00:03:54.745
The Edit Article, we have to load
the existing article, load the data.

75
00:03:54.745 --> 00:03:57.505
You might also be in
the process of saving it.

76
00:03:57.505 --> 00:04:00.533
Whereas with the New Article,
once you're done with your stuff,

77
00:04:00.533 --> 00:04:02.925
you're then transitioning
to the creating state.

78
00:04:02.925 --> 00:04:04.211
And once that's finished,

79
00:04:04.211 --> 00:04:07.168
it's actually gonna redirect to
a different page immediately.

80
00:04:07.168 --> 00:04:10.622
And if you are editing it,
there might be some problems.

81
00:04:10.622 --> 00:04:13.672
Or you could be editing a new one,
there might also be some problems.

82
00:04:13.672 --> 00:04:14.940
There's gonna be a form.

83
00:04:14.940 --> 00:04:19.800
So there's all these different states, and
we're trying to sorta keep all of these

84
00:04:19.800 --> 00:04:22.821
in our head whenever we're
working with this code.

85
00:04:22.821 --> 00:04:26.357
Now if every function I wrote that had
to do with our state accepted Model,

86
00:04:26.357 --> 00:04:29.224
that's gonna mean we have to
keep the Session in our heads.

87
00:04:29.224 --> 00:04:30.992
We have to keep the Status in our heads.

88
00:04:30.992 --> 00:04:33.265
And there's sort of
a transitive dependency there.

89
00:04:33.265 --> 00:04:37.143
Which is to say, if I'm keeping the Model
in my head, that implies that I also need

90
00:04:37.143 --> 00:04:40.253
to keep the Status in my head,
because the Status is in the Model.

91
00:04:40.253 --> 00:04:44.038
So if all of that's potentially fair game,
that's what I need to be keeping in my

92
00:04:44.038 --> 00:04:47.112
head to work with any function
that accepts Model as an argument.

93
00:04:47.112 --> 00:04:49.112
Now, why does that matter?

94
00:04:49.112 --> 00:04:52.312
Let's suppose that I'm
trying to track down a bug.

95
00:04:52.312 --> 00:04:55.020
I've got some issue with this page and
there's some problem with the form.

96
00:04:55.020 --> 00:05:00.833
I'm like, yeah, in some combination
of things, I've got some bug.

97
00:05:00.833 --> 00:05:03.626
And the symptoms are some part of
the form just isn't quite working right.

98
00:05:03.626 --> 00:05:05.768
Something's getting cleared
out when it shouldn't, or

99
00:05:05.768 --> 00:05:07.307
maybe it's displaying the wrong thing.

100
00:05:07.307 --> 00:05:10.322
Whatever the case maybe,
it's very form specific.

101
00:05:10.322 --> 00:05:15.038
Any function that accepts the Model
is potentially doing something

102
00:05:15.038 --> 00:05:17.278
with the form's information.

103
00:05:17.278 --> 00:05:18.971
If there is a problem with the form,

104
00:05:18.971 --> 00:05:21.690
that function is potentially
affected by that problem.

105
00:05:21.690 --> 00:05:23.265
Depending on the symptoms,

106
00:05:23.265 --> 00:05:27.735
it might be that something is wrong with
the logic of how we are updating the form.

107
00:05:27.735 --> 00:05:32.005
So in that case, it would only matter if
the particular function returned a Model.

108
00:05:32.005 --> 00:05:34.575
In other words,
it's to say it's modifying the Model.

109
00:05:34.575 --> 00:05:37.136
Then we'd have to worry about
it as a potential culprit.

