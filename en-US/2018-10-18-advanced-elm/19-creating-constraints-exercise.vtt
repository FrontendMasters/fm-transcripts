WEBVTT

1
00:00:00.420 --> 00:00:02.540
&gt;&gt; Richard Feldman: All right,
let's move on to the exercise.

2
00:00:04.150 --> 00:00:08.430
Cd into part3, open up the old editor.

3
00:00:10.630 --> 00:00:17.520
Okay, and in readme it says,
I'm gonna open up src/page/article.elm.

4
00:00:17.520 --> 00:00:18.740
And resolve the TODOs there.

5
00:00:20.140 --> 00:00:24.850
Okay, so here we have some
tasks that are not commands.

6
00:00:24.850 --> 00:00:28.180
They're supposed to be commands because
we're passing them to Cmd.bash.

7
00:00:28.180 --> 00:00:30.860
But they haven't been
converted to commands yet.

8
00:00:31.950 --> 00:00:34.974
So what we're gonna do here is
we're gonna use task.attempt and

9
00:00:34.974 --> 00:00:37.860
task.perform to make this code compile.

10
00:00:37.860 --> 00:00:41.210
And we're going to choose which
one to use based on whether or

11
00:00:41.210 --> 00:00:44.139
not we can use task.perform.

12
00:00:44.139 --> 00:00:48.650
So task.perform only works if it's going
to be something that, a task that can

13
00:00:48.650 --> 00:00:52.500
never fail, otherwise we have to use a
temp that specify both the error case and

14
00:00:52.500 --> 00:00:55.480
the success case,
how to turn both of those into a message.

15
00:00:55.480 --> 00:00:58.920
So you can see elsewhere in the file
the types for a message, you can see right

16
00:00:58.920 --> 00:01:02.520
here we have the documentation for
attempt as well as perform.

17
00:01:02.520 --> 00:01:07.170
And between the two and this code right
here and compilers we should be able to

18
00:01:07.170 --> 00:01:11.760
figure out how to resolve these such
that all of these become commands.

19
00:01:11.760 --> 00:01:15.720
Quick note on what these are doing, so
article.fetch is essentially saying I

20
00:01:15.720 --> 00:01:19.845
want load this the http data for
this particular article.

21
00:01:19.845 --> 00:01:23.540
Comment.list is doing
the same thing except for

22
00:01:23.540 --> 00:01:28.927
comments on that article those are both
loaded asynchronously and concurrently.

23
00:01:28.927 --> 00:01:33.619
Time.here is the task that returns the
current time zone, we're gonna use that

24
00:01:33.619 --> 00:01:38.380
because wanna display for the comments we
wanna display the user local time down so

25
00:01:38.380 --> 00:01:41.281
this is a task that will just go and
get that for us.

26
00:01:41.281 --> 00:01:44.093
And finally we have Loading.slowThreshold.

27
00:01:44.093 --> 00:01:46.214
So this is a task that
essentially just waits for,

28
00:01:46.214 --> 00:01:49.346
I think it's 500 milliseconds, and
then fires a message saying hey,

29
00:01:49.346 --> 00:01:52.070
we have now passed the slow
loading threshold.

30
00:01:52.070 --> 00:01:55.630
And what that does is, once we get past
that threshold, if we still have not

31
00:01:55.630 --> 00:01:58.790
loaded, either the comment or the article,
we show a loading center for those.

32
00:01:58.790 --> 00:02:01.450
So essentially if it loads
within 500 milliseconds,

33
00:02:01.450 --> 00:02:03.090
we don't bother showing a spinner.

34
00:02:03.090 --> 00:02:05.112
If we pass that threshold
then it's like okay,

35
00:02:05.112 --> 00:02:07.842
now it's time to show a spinner
because this is taking a while and

36
00:02:07.842 --> 00:02:11.460
we wanted the user to be aware that it's
not errored out, it's just taking a while.

37
00:02:11.460 --> 00:02:12.650
So those are our four tasks and

38
00:02:12.650 --> 00:02:15.230
we're going to convert them to
commands using one of those two.

