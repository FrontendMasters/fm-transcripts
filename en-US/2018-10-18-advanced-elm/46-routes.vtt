WEBVTT

1
00:00:00.440 --> 00:00:02.238
&gt;&gt; Richard Feldman: Single page apps.

2
00:00:02.238 --> 00:00:04.272
All right, we're going to
talk about a few things here.

3
00:00:04.272 --> 00:00:06.119
First is routes.

4
00:00:06.119 --> 00:00:08.028
Second is pages.

5
00:00:08.028 --> 00:00:10.803
Third is loading and persisting data.

6
00:00:10.803 --> 00:00:13.862
And fourth is module structure.

7
00:00:13.862 --> 00:00:18.066
Okay, this is the third of three sections
by process of elimination in which we're

8
00:00:18.066 --> 00:00:20.963
immediately going to go to the code and
poke around in it.

9
00:00:20.963 --> 00:00:22.927
All right, let's take a look.

10
00:00:22.927 --> 00:00:25.202
So we'll start with talking about routes.

11
00:00:25.202 --> 00:00:29.877
So routes essentially are the conceptual
idea of, what is our URL space?

12
00:00:29.877 --> 00:00:34.222
We've got all these URLs that we
potentially do or do not handle,

13
00:00:34.222 --> 00:00:36.915
and URLs each map to a particular route.

14
00:00:36.915 --> 00:00:39.597
Now, we have a few routes
that look sort of familiar.

15
00:00:39.597 --> 00:00:42.245
We've got Home,
I'll get to Route in a second.

16
00:00:42.245 --> 00:00:46.064
Login, Logout, Register,
Settings, Article.

17
00:00:46.064 --> 00:00:48.744
Notice that the Article route
is parameterized on a slug.

18
00:00:48.744 --> 00:00:52.855
So you can't be on a particular viewing an
article page unless you also have a slug

19
00:00:52.855 --> 00:00:55.401
which identifies which
article we're viewing.

20
00:00:55.401 --> 00:00:58.566
You have a profile which has a username
that corresponds to it, in other words,

21
00:00:58.566 --> 00:00:59.809
whose profile are we viewing.

22
00:00:59.809 --> 00:01:03.144
We have NewArticle and EditArticle
which are a little bit different in

23
00:01:03.144 --> 00:01:06.608
that EditArticle has a slug associated
with it and NewArticle does not.

24
00:01:06.608 --> 00:01:07.371
Under the hood,

25
00:01:07.371 --> 00:01:10.871
these amount to a single page which
we've been editing throughout the day.

26
00:01:10.871 --> 00:01:15.812
But as we will see later, pages and
routes are slightly different concepts.

27
00:01:15.812 --> 00:01:19.652
So this is our route, and
it sort of determines, logically speaking,

28
00:01:19.652 --> 00:01:21.195
what are we doing right now?

29
00:01:21.195 --> 00:01:24.295
What are we on at this exact moment?

30
00:01:24.295 --> 00:01:26.417
These are the ones that we care about.

31
00:01:26.417 --> 00:01:29.364
If the URL is something that
does not map to one of these,

32
00:01:29.364 --> 00:01:31.519
then that's going to be an error state.

33
00:01:31.519 --> 00:01:35.646
That's something we just don't have
a concept of in our application.

34
00:01:35.646 --> 00:01:38.728
We do have a parser.

35
00:01:38.728 --> 00:01:44.602
So this is a URL parser, it comes from
the URL parsing library, the URL package.

36
00:01:44.602 --> 00:01:46.431
And it's got a couple of
handy things in here.

37
00:01:46.431 --> 00:01:47.697
If you have seen this before.

38
00:01:47.697 --> 00:01:54.217
So this is basically infects operated
use for DSL for specifying URL strings.

39
00:01:54.217 --> 00:01:59.011
And then it's gotta a couple of different
combiner here parser one of essence string

40
00:01:59.011 --> 00:02:00.913
which we'll look at the moment.

41
00:02:00.913 --> 00:02:06.180
So here's how we write a URL parser that
maps URL strings directly to these routes.

42
00:02:06.180 --> 00:02:09.765
So we start off with parser.oneOf,
which is basically going to say, run each

43
00:02:09.765 --> 00:02:13.646
of these in order, and the first one that
succeeds, that's what we're gonna use.

44
00:02:13.646 --> 00:02:14.491
Just stop going through the list.

45
00:02:14.491 --> 00:02:16.484
We'll just disregard the others.

46
00:02:16.484 --> 00:02:21.484
So first, we have Parser.map Home to
Parser.top, which essentially says, if

47
00:02:21.484 --> 00:02:26.634
we get empty URL, the top of our hierarchy
with nothing else on top, totally great.

48
00:02:26.634 --> 00:02:30.187
Then, we're gonna just succeed with Home.

49
00:02:30.187 --> 00:02:34.218
Then, we have Login, which is /login,
logout, which is /logout,

50
00:02:34.218 --> 00:02:36.520
settings, profile, register, etc.

51
00:02:36.520 --> 00:02:41.295
We can see the little slash infix
operator here, which is basically saying,

52
00:02:41.295 --> 00:02:44.968
when we have a profile here,
which is to say, one of these,

53
00:02:44.968 --> 00:02:47.265
that's gonna have two pieces to it.

54
00:02:47.265 --> 00:02:49.912
First, it's gonna have /Profile, and

55
00:02:49.912 --> 00:02:54.009
then it's going to have the results
of a Username.URL parser.

56
00:02:54.009 --> 00:02:55.569
So it's gonna look for a profile and

57
00:02:55.569 --> 00:02:59.366
then it's gonna parse whatever comes after
the slash, after a profile as a username.

58
00:02:59.366 --> 00:03:04.697
And it's gonna put both of those
into this profile right here, okay.

59
00:03:04.697 --> 00:03:09.022
So using this we have this sort of concise
DSL to show these mappings between URLs of

60
00:03:09.022 --> 00:03:12.343
various shapes and sizes,
in some cases with extra slashes and

61
00:03:12.343 --> 00:03:13.546
strings and so forth.

62
00:03:13.546 --> 00:03:16.294
And they're mapping to routes.

63
00:03:16.294 --> 00:03:20.338
Worth noting that sometimes we have routes
that do a different, we have a different

64
00:03:20.338 --> 00:03:24.225
route depending on whether or not the URL
does or doesn't have a slash after it.

65
00:03:24.225 --> 00:03:26.631
So for example,
we have Parser.map NewArticle.

66
00:03:26.631 --> 00:03:30.767
This is the case where we have just the
editor and we don't have a slash after it.

67
00:03:30.767 --> 00:03:34.277
Followed by the case where we do have
an editor followed by a slash and

68
00:03:34.277 --> 00:03:36.076
then we do the slug dot URL parser.

69
00:03:36.076 --> 00:03:39.163
As we see noted,
good module organization strategies for

70
00:03:39.163 --> 00:03:42.950
elm it typically our each module
revolves around the particular type.

71
00:03:42.950 --> 00:03:47.047
So this is the router module and it has
a couple of different functions here.

72
00:03:47.047 --> 00:03:51.353
Notice that we don't actually
expose that parser directly,

73
00:03:51.353 --> 00:03:54.095
we use it as a helper to something else.

74
00:03:54.095 --> 00:03:56.477
Namely, the from the URL function.

75
00:03:56.477 --> 00:04:01.202
So this says give me a URL, and
I may or may not give you back a route.

76
00:04:01.202 --> 00:04:04.218
Now, this is a little bit
of extra logic in here,

77
00:04:04.218 --> 00:04:08.705
that has to do with the fact that
the real world spec doesn't deal in terms

78
00:04:08.705 --> 00:04:12.752
of actual URLs look like slashes
in them directly, rather it does

79
00:04:12.752 --> 00:04:16.833
sort of builds like an extra layer
on top of them based on the hash.

80
00:04:16.833 --> 00:04:21.871
So if you look in here, you notice that
we're not actually on the root here,

81
00:04:21.871 --> 00:04:24.571
we're on localhost.300/pound.

82
00:04:24.571 --> 00:04:27.702
And if I go to new host
we're going to pound/editor.

83
00:04:27.702 --> 00:04:30.471
If I go to settings that's pound/settings.

84
00:04:30.471 --> 00:04:34.888
Essentially I wanted to work as though
we were not dealing in those terms.

85
00:04:34.888 --> 00:04:39.049
So what I did is I essentially wrote a
little helper here that says I'm going to

86
00:04:39.049 --> 00:04:42.715
actually take the fragment, and
pretend that's our actual path.

87
00:04:42.715 --> 00:04:46.748
And then use that, and then parse as
normal as though it were a regular path.

88
00:04:46.748 --> 00:04:50.687
So this is sort of a little extra step
that I took to make sure it feels like

89
00:04:50.687 --> 00:04:55.033
using the path because that’s really
what they’re going for with this spec.

90
00:04:55.033 --> 00:05:00.693
They want the hash routing for various
reasons, but I wanted to sort of pretend

91
00:05:00.693 --> 00:05:06.199
that it’s a path because that’s what
it most closely resembles by design.

92
00:05:06.199 --> 00:05:09.161
Okay, so
that's how we go from a URL to a route.

93
00:05:09.161 --> 00:05:12.503
And it's a maybe route, because again,
this could maybe not map to any of these.

94
00:05:12.503 --> 00:05:15.925
If this one of fails and we go through all
of our known routes and we don't see it,

95
00:05:15.925 --> 00:05:19.499
then it's like, yeah, I'm just gonna give
you back nothing because that URL that

96
00:05:19.499 --> 00:05:22.592
you're visiting does not map to any
of these routes that we know about.

97
00:05:22.592 --> 00:05:23.651
Then ultimately,

98
00:05:23.651 --> 00:05:27.627
that's what's gonna lead some other
logic to render a page not found.

99
00:05:27.627 --> 00:05:30.874
Okay, so
that's how we go from URL to a route.

100
00:05:30.874 --> 00:05:34.310
What's arguably more useful
is the other way around,

101
00:05:34.310 --> 00:05:36.485
is this Route to String function.

102
00:05:36.485 --> 00:05:40.276
Now, what this does is it takes
a route and it returns a string.

103
00:05:40.276 --> 00:05:43.602
And essentially what it does
is it uses this URL builder,

104
00:05:43.602 --> 00:05:47.780
sorry, this string.join to build
the URL with the hash in front of it.

105
00:05:47.780 --> 00:05:51.999
And essentially, I am making this
my single source of truth for

106
00:05:51.999 --> 00:05:55.513
how to generate links
throughout the application.

107
00:05:55.513 --> 00:06:01.094
So anywhere I wanna put a link,
I’m not going to call href directly.

108
00:06:01.094 --> 00:06:07.097
What I wanna use instead is this little
helper we have here called route.href.

109
00:06:07.097 --> 00:06:09.902
And route.href doesn't take a string,
it takes a route and

110
00:06:09.902 --> 00:06:11.281
gives you back an attribute.

111
00:06:11.281 --> 00:06:12.654
So through out the application,

112
00:06:12.654 --> 00:06:15.261
this is what we're using whenever
we wanna link to something.

113
00:06:15.261 --> 00:06:20.157
So rather than linking to it a hard-coded
string which could potentially get out

114
00:06:20.157 --> 00:06:22.902
of sync,
could potentially get a typo in it.

115
00:06:22.902 --> 00:06:27.411
We're instead passing it one of
these custom type values such that

116
00:06:27.411 --> 00:06:32.014
if we're ever giving it an invalid route,
it just won't compile.

117
00:06:32.014 --> 00:06:35.272
Not only that, but also are always
because we're passing it about,

118
00:06:35.272 --> 00:06:39.036
forcing us to specify, not only is this
an article, but also this article has to

119
00:06:39.036 --> 00:06:42.942
have a slogan associated with it, but
we can't forget that or it won't compile.

120
00:06:42.942 --> 00:06:45.748
So having this route type,
actually helps is us out in two ways.

121
00:06:45.748 --> 00:06:49.825
It helps us when parsing URLs because it
gives us a way to map so that route and

122
00:06:49.825 --> 00:06:50.536
say, okay,

123
00:06:50.536 --> 00:06:54.648
this is actually part of the set of
things that we recognize as a valid URLs.

124
00:06:54.648 --> 00:06:56.269
And it also helps us go
to the other way around.

125
00:06:56.269 --> 00:07:01.219
And to say,
when you want to get a URLs too something.

126
00:07:01.219 --> 00:07:03.531
Just work only in terms of the route, and

127
00:07:03.531 --> 00:07:06.867
leave all of the URL specific
logic inside of this module.

128
00:07:06.867 --> 00:07:11.076
So actually outside of this route module
none of the rest of the application should

129
00:07:11.076 --> 00:07:13.520
have any business dealing
with URLs directly.

130
00:07:13.520 --> 00:07:16.075
It should all be in term of routes for
them.

131
00:07:16.075 --> 00:07:19.733
So essentially, route is an abstraction
on top of valid URLs, URLs,

132
00:07:19.733 --> 00:07:22.776
that we actually know how to
work with in our application.

133
00:07:22.776 --> 00:07:24.870
Now, granted,
there are not guarantees around this.

134
00:07:24.870 --> 00:07:30.967
So it's encouraged to use routes.href,
but the plain HTML href still exists.

135
00:07:30.967 --> 00:07:34.149
If pages want to, they can continue
to use hard-coded strings.

136
00:07:34.149 --> 00:07:38.040
If we wanted to actually rule that out, we
could do something like what Tesla did and

137
00:07:38.040 --> 00:07:39.763
make sort of a drop in replacement for

138
00:07:39.763 --> 00:07:42.175
HTML which includes the route
module inside of it.

139
00:07:42.175 --> 00:07:45.924
And then also drop in replacements for
all the issue or functions, except for

140
00:07:45.924 --> 00:07:46.450
that one.

141
00:07:46.450 --> 00:07:47.589
Well, that seemed like overkill.

142
00:07:47.589 --> 00:07:51.141
So, instead it's just something
that is encouraged but which,

143
00:07:51.141 --> 00:07:54.575
there's an escape hatch if people
want to use the other thing.

144
00:07:54.575 --> 00:07:57.043
Hopefully, we could train our team,

145
00:07:57.043 --> 00:08:01.063
if I had a team of people working
on this code base to use route.

146
00:08:01.063 --> 00:08:04.016
And when we do it at work,
this is basically how we do it.

