WEBVTT

1
00:00:00.130 --> 00:00:02.250
&gt;&gt; Richard: Okay,
let's go through the solutions.

2
00:00:02.250 --> 00:00:06.610
All right, so first one we have TODO
make this return the article's body.

3
00:00:06.610 --> 00:00:11.230
So to do that, we're going need to
pattern match on it to extract it.

4
00:00:11.230 --> 00:00:16.750
So if we look back at the type of article,
we see the article has two,

5
00:00:16.750 --> 00:00:19.350
sorry, it has one variant which
has two pieces of data inside it.

6
00:00:19.350 --> 00:00:22.820
So one is internals and
the other is the extra info.

7
00:00:22.820 --> 00:00:24.890
So we don't really care
about the internals, so

8
00:00:24.890 --> 00:00:27.055
we're just gonna underscore
that out of the way.

9
00:00:27.055 --> 00:00:30.809
What we do care about in this particular
case, is the extra stuff because

10
00:00:30.809 --> 00:00:34.638
the extra stuff in this case, is full and
full is what holds onto our body.

11
00:00:34.638 --> 00:00:38.381
Now, because this is an inline
pattern match, we can grab full.

12
00:00:38.381 --> 00:00:42.373
And also, at the same time, pattern match
out the body, or as I'm gonna call it bod,

13
00:00:42.373 --> 00:00:44.712
to avoid a naming collision
with the body itself.

14
00:00:44.712 --> 00:00:48.385
[COUGH] And at that point,
I've now successfully extracted it and

15
00:00:48.385 --> 00:00:50.300
I can just return it.

16
00:00:50.300 --> 00:00:54.610
So this, a little bit of pattern matching,
followed by an extremely straightforward

17
00:00:54.610 --> 00:00:58.490
implementation with just returning
the thing that we pattern matched out.

18
00:00:58.490 --> 00:01:02.270
So now if I compile this, I should
theoretically get one fewer compile error.

19
00:01:02.270 --> 00:01:04.451
And sure enough,
I'm now down to two errors.

20
00:01:04.451 --> 00:01:07.710
The next one is upgrading
from a preview to a full one.

21
00:01:07.710 --> 00:01:09.890
So here we've got the body as an argument,
so

22
00:01:09.890 --> 00:01:12.390
we'll call that bod again,
so nothing else to do there.

23
00:01:12.390 --> 00:01:14.270
And then we've got article preview.

24
00:01:14.270 --> 00:01:16.190
So again we're going to
pattern match on it, and

25
00:01:16.190 --> 00:01:17.890
once again we don't really
care about the internals.

26
00:01:17.890 --> 00:01:20.910
But this case, we don't wanna give it
an underscore for a name because if we do,

27
00:01:20.910 --> 00:01:23.970
we don't be able to use it when we're
constructing the full one later.

28
00:01:23.970 --> 00:01:27.780
So I'm going to say internals and
just give it a name so

29
00:01:27.780 --> 00:01:30.360
that I can use it in a moment.

30
00:01:30.360 --> 00:01:34.419
However, in this case we have the preview
as the other piece of data that we could

31
00:01:34.419 --> 00:01:37.770
pattern match on, but now,
we actually don't care about that.

32
00:01:37.770 --> 00:01:39.040
So I could put that as an underscore.

33
00:01:39.040 --> 00:01:42.697
But I'm actually just gonna put Preview
here to do an explicit pattern match.

34
00:01:42.697 --> 00:01:47.588
Just so that I can remind my future self
that it's not an underscore because I'm

35
00:01:47.588 --> 00:01:49.050
choosing not to use it.

36
00:01:49.050 --> 00:01:51.970
It's a preview,
which is to say it is actually useless.

37
00:01:51.970 --> 00:01:54.880
There is no value I could possibly
get out of this thing, so I'm just

38
00:01:54.880 --> 00:01:58.030
gonna put it in the pattern match, just to
remind myself as a form of documentation.

39
00:01:59.080 --> 00:02:03.426
Okay, so we got that now, and
I want to convert to an Article Full.

40
00:02:03.426 --> 00:02:04.980
How do I do that?

41
00:02:04.980 --> 00:02:06.714
Well at this point,

42
00:02:06.714 --> 00:02:12.024
I want to construct one of these
articles and how can I do that?

43
00:02:12.024 --> 00:02:15.990
The answer is I'm going to once again
say Article Internals extraInfo.

44
00:02:15.990 --> 00:02:21.901
And to build this extraInfo,
I'm going to say Article internals, and

45
00:02:21.901 --> 00:02:26.924
I'm gonna build the extraInfo
by using the bod that I have and

46
00:02:26.924 --> 00:02:30.860
passing it to full as a constructor.

47
00:02:30.860 --> 00:02:33.620
So now, I have constructed a brand
new article which has the same

48
00:02:33.620 --> 00:02:36.880
internals as before, which is
completely discarding this preview and

49
00:02:36.880 --> 00:02:41.189
replacing it with a new instance of Full
that has the body that we are provided.

50
00:02:42.580 --> 00:02:46.240
And if we go to compile that,
we're now down to one error.

51
00:02:46.240 --> 00:02:50.560
And last but not least, we're going
to decode our way into having a body.

52
00:02:51.760 --> 00:02:55.380
So here we've got the custom
internals decoder, which is going to

53
00:02:55.380 --> 00:02:58.408
give us back the decoder necessary to
extract the internals part of that.

54
00:02:58.408 --> 00:03:02.290
We're calling decode.succeed
on article itself.

55
00:03:02.290 --> 00:03:05.430
As a quicker side here, I know that some
folks in the workshop who might have

56
00:03:05.430 --> 00:03:09.840
done this in the past have had more or
less experience with JSON decoders.

57
00:03:09.840 --> 00:03:12.620
So if you're feeling a little
bit stuck at this part,

58
00:03:12.620 --> 00:03:15.190
that's okay we're gonna get
into this in more detail later.

59
00:03:15.190 --> 00:03:18.530
But I did wanna go over this in
the context of how do you actually do this

60
00:03:18.530 --> 00:03:20.430
from one of these extensible custom types.

61
00:03:22.380 --> 00:03:26.685
So we're going to succeed directly into
the article which is to say we're going to

62
00:03:26.685 --> 00:03:32.700
pass these two things as arguments
directly to that article variance itself.

63
00:03:32.700 --> 00:03:36.880
So the first one is internals which is why
we have that custom internal z code there.

64
00:03:36.880 --> 00:03:42.110
The second one is body, but if I just
do body.decoder here like the comments

65
00:03:42.110 --> 00:03:47.070
suggest that I do,
which is of type decoder body.

66
00:03:47.070 --> 00:03:49.239
I'm just gonna turn that into a comment so
I can remind myself.

67
00:03:49.239 --> 00:03:52.790
[COUGH] Oops, that was a mistake.

68
00:03:52.790 --> 00:03:54.280
Let's put that up there.

69
00:03:54.280 --> 00:03:56.120
Nope, fourth time's the charm,
there we go.

70
00:03:56.120 --> 00:03:58.470
Okay, so that's what I've got in there.

71
00:03:58.470 --> 00:04:00.150
Let's see if that compiles.

72
00:04:00.150 --> 00:04:01.070
No, it doesn't.

73
00:04:01.070 --> 00:04:05.067
Well, part of the reason is because
I didn't spell it right, decoder.

74
00:04:07.659 --> 00:04:11.857
&gt;&gt; Richard: Okay, type mismatch, so the
problem is that I have decoded the body,

75
00:04:11.857 --> 00:04:16.710
but what we actually need is full because
that's what goes in that second slot.

76
00:04:16.710 --> 00:04:19.240
Body is not the type of extraInfo

77
00:04:19.240 --> 00:04:21.970
that we're going to need if we
wanna have an Article Full here.

78
00:04:21.970 --> 00:04:24.443
I could say I'm gonna return the article
body, but that's not what we want.

79
00:04:24.443 --> 00:04:25.930
What we want is an Article Full.

80
00:04:25.930 --> 00:04:28.800
An article body is not useful
because everything in this API is in

81
00:04:28.800 --> 00:04:30.630
terms of either full or preview.

82
00:04:30.630 --> 00:04:33.300
So if I decode my way into an article
body that's not really doing anybody

83
00:04:33.300 --> 00:04:34.580
any favors.

84
00:04:34.580 --> 00:04:36.180
So how can I do that?

85
00:04:36.180 --> 00:04:40.444
Well, essentially all I wanna do is I want
this decoder right here not to be a body

86
00:04:40.444 --> 00:04:43.260
decoder, but rather to be a full decoder.

87
00:04:43.260 --> 00:04:46.286
And the way I can do that
is by using Decode.map.

88
00:04:46.286 --> 00:04:51.070
So Decode.map takes a function which
will convert one decoder from another

89
00:04:51.070 --> 00:04:55.440
by wrapping its internals or
transforming its internals by a function.

90
00:04:55.440 --> 00:04:59.835
So I'm gonna say decode.map
Full Body.decoder, which means that since

91
00:04:59.835 --> 00:05:06.720
body.decoder is a decoder body, that's
going to translate it into a decoder Full.

92
00:05:06.720 --> 00:05:09.790
Because the function that I'm
providing decode.map is something that

93
00:05:09.790 --> 00:05:11.310
goes from a body to a full.

94
00:05:12.430 --> 00:05:16.600
So by doing this, I have now given,
I'm still requiring the same field.

95
00:05:16.600 --> 00:05:18.820
I'm still reading the same
body out of the json, but

96
00:05:18.820 --> 00:05:21.670
once I've got it, I'm now converting
it to a full, I'm upgrading it.

