WEBVTT

1
00:00:00.000 --> 00:00:02.904
&gt;&gt; Richard Feldman: So this is the edge
case that I ended up realizing that I had.

2
00:00:02.904 --> 00:00:07.235
When you render a follow button,
there's actually three possible states.

3
00:00:07.235 --> 00:00:11.327
One is I'm following this person,
another is I'm not following this person,

4
00:00:11.327 --> 00:00:12.560
and a third is it's me.

5
00:00:12.560 --> 00:00:16.603
I should never render a follow button for
myself, if I'm viewing my own profile,

6
00:00:16.603 --> 00:00:20.953
if I have a follow button there, that's a
mistake, that just doesn't make any sense.

7
00:00:20.953 --> 00:00:24.674
So I asked myself the question is it
possible to rule that out a compile

8
00:00:24.674 --> 00:00:28.858
attempt to make it actually impossible
to render a follow button for myself.

9
00:00:28.858 --> 00:00:31.754
It turns out,
yes it's possible and here's how.

10
00:00:31.754 --> 00:00:35.513
So let's say we have
a type called author and

11
00:00:35.513 --> 00:00:39.688
author is a non opaque
type with three variants.

12
00:00:39.688 --> 00:00:43.452
So it's got Isfollowing,
which means I am following this author,

13
00:00:43.452 --> 00:00:48.090
it's got Isnotfollowing, means I'm not
following this author, and Isviewer.

14
00:00:48.090 --> 00:00:52.021
Viewer is the term I've used here to
refer to currently logged in user,

15
00:00:52.021 --> 00:00:55.561
it's because it's one word
instead of three and essentially,

16
00:00:55.561 --> 00:00:57.477
this is the one that says it's me.

17
00:00:57.477 --> 00:01:01.753
Now notice that each of these has
different types that of data that they

18
00:01:01.753 --> 00:01:04.010
are storing along with the variant.

19
00:01:04.010 --> 00:01:08.750
So Isfollowing stores
FollowedAuthor is an opaque type.

20
00:01:08.750 --> 00:01:10.413
It holds on to user name and profile,

21
00:01:10.413 --> 00:01:13.484
those are the two pieces of information
we have about every author.

22
00:01:13.484 --> 00:01:18.625
So FollowedAuthor has one variant
which is also called FollowedAuthor.

23
00:01:18.625 --> 00:01:21.667
This is a pretty common pattern if you
have a single variant to just give

24
00:01:21.667 --> 00:01:23.640
the variant the same
name as the type itself.

25
00:01:23.640 --> 00:01:26.214
So it's a little bit confusing
the first time you see it.

26
00:01:26.214 --> 00:01:29.433
But over time you realize that well
it isn't really a better name for

27
00:01:29.433 --> 00:01:31.365
this thing if there is only one variant.

28
00:01:31.365 --> 00:01:36.037
So people end up typically using the same
name as the type of one variant when

29
00:01:36.037 --> 00:01:37.383
you're doing that.

30
00:01:37.383 --> 00:01:40.470
So we have FollowedAuthor which
has using your profile and

31
00:01:40.470 --> 00:01:43.119
UnfollowedAuthor which
has a username profile.

32
00:01:43.119 --> 00:01:43.932
Now if I go up and

33
00:01:43.932 --> 00:01:48.267
stop here we can see that sure enough I am
in fact exposing the variance for author.

34
00:01:48.267 --> 00:01:52.037
We'll talk about why momentarily, but
not for FollowedAuthor, and not for

35
00:01:52.037 --> 00:01:53.081
UnfollowedAuthor.

36
00:01:53.081 --> 00:01:56.986
So the only way that I can actually
get one of these FollowedAuthors or

37
00:01:56.986 --> 00:02:00.909
UnfollowedAuthors, is by using
functions like the ones down here.

38
00:02:00.909 --> 00:02:02.831
I can do things like follow someone,

39
00:02:02.831 --> 00:02:05.942
which takes me from
UnfollowedAuthor to FollowedAuthor.

40
00:02:05.942 --> 00:02:09.246
I can unfollow someone, which takes me
from FollowedAuthor to UnfollowedAuthor.

41
00:02:09.246 --> 00:02:11.469
I can request a follow which is to say,

42
00:02:11.469 --> 00:02:16.137
go tell the server I want to follow this
person or I want to unfollow this person.

43
00:02:16.137 --> 00:02:20.757
And in either case I'm always being very
explicit about whether I am currently

44
00:02:20.757 --> 00:02:22.581
following or not that person.

45
00:02:22.581 --> 00:02:26.900
Another thing to note is that this is
a nice handy trick when you have a single

46
00:02:26.900 --> 00:02:30.622
variant custom type is you can
actually destructure it in line.

47
00:02:30.622 --> 00:02:35.807
So this is effectively the same
thing as if I had instead said

48
00:02:35.807 --> 00:02:40.683
name this unfollowedAuthor,
and I'd said down here,

49
00:02:40.683 --> 00:02:47.030
case unfollowedAuthor of, and
then I just had the one case down in here.

50
00:02:47.030 --> 00:02:50.993
So instead of doing that, it's a lot
more concise to just do it in line.

51
00:02:50.993 --> 00:02:54.140
And that allows you to do that, because
it's essentially an in-line pattern match,

52
00:02:54.140 --> 00:02:55.403
where there's only one pattern.

53
00:02:55.403 --> 00:03:00.493
And since, with a single variant custom
type, there's only one possible pattern,

54
00:03:00.493 --> 00:03:03.902
the compiler accepts this and,
knows what to do with it.

55
00:03:03.902 --> 00:03:08.597
Okay, so now that I've got my
FollowedAuthor and UnfollowedAuthor,

56
00:03:08.597 --> 00:03:09.777
which are opaqu.

57
00:03:09.777 --> 00:03:12.398
How do I actually obtain
one from the get go?

58
00:03:12.398 --> 00:03:15.950
Well if you notice, we can request
to follow and unfollow people.

59
00:03:15.950 --> 00:03:20.633
But the only way we can actually
get an author in the first place,

60
00:03:20.633 --> 00:03:24.034
is to get one from one
of these Http.Request.

61
00:03:24.034 --> 00:03:29.103
Like I can do an Http.Request that
will give me an author, author back.

62
00:03:29.103 --> 00:03:30.504
But once I have one,

63
00:03:30.504 --> 00:03:35.301
all I can do is destructure it into
one of these three possibilities.

64
00:03:35.301 --> 00:03:39.290
Either I'm following them, in which case I
get a FollowedAuthor, I'm not following,

65
00:03:39.290 --> 00:03:42.978
in which case I get an UnfollowedAuthor,
or it's me and I get sort of myself back.

66
00:03:42.978 --> 00:03:45.971
Now, the fact that this is not
opaque doesn't really harm me in

67
00:03:45.971 --> 00:03:49.423
this cause because how could I possibly
construct one of these authors?

68
00:03:49.423 --> 00:03:54.264
Well, there are three variants here,
one of them is, contains an opaque type.

69
00:03:54.264 --> 00:03:57.047
So I need to already have a followedAuthor
in order to construct one of those.

70
00:03:57.047 --> 00:03:58.190
The other one is also opaque so

71
00:03:58.190 --> 00:04:00.672
I need an UnfollowedAuthor to be
able to construct one of those.

72
00:04:00.672 --> 00:04:04.451
And the final one is me which means I can
construct an author that is me if I am me,

73
00:04:04.451 --> 00:04:06.133
which okay, fine, I can do that.

74
00:04:06.133 --> 00:04:10.389
But I narrowly getting a new information
there not only breaking any in variance,

75
00:04:10.389 --> 00:04:14.396
I am able to just say this is an author
that is myself which is information that I

76
00:04:14.396 --> 00:04:15.150
already had.

77
00:04:15.150 --> 00:04:18.251
So the fact that we are exposing
these variance isnt really costing us

78
00:04:18.251 --> 00:04:19.053
any guarantees,

79
00:04:19.053 --> 00:04:22.590
it has kept the same set of guarantees
that if we did not expose those variance.

80
00:04:22.590 --> 00:04:25.759
But we're exposing them does
turns out to be pretty cool.

81
00:04:27.961 --> 00:04:31.260
&gt;&gt; Richard Feldman: So
let's take a look at the profile page.

82
00:04:31.260 --> 00:04:35.374
So here's what goes on
on the profile page.

83
00:04:35.374 --> 00:04:38.342
I want to render a follow-unfollow button.

84
00:04:38.342 --> 00:04:41.460
I do a case expression on my author and
I've got these three branches.

85
00:04:41.460 --> 00:04:44.295
One is it's me and say, well,
we can't follow ourselves.

86
00:04:44.295 --> 00:04:46.543
So here I rendered nothing.

87
00:04:46.543 --> 00:04:50.496
If I am following this person,
then I render an unfollow button and

88
00:04:50.496 --> 00:04:54.393
if I am not following this person,
then I render a follow button.

89
00:04:54.393 --> 00:04:56.956
Now, what's cool about this is that,

90
00:04:56.956 --> 00:05:01.702
I can't actually write this code
without writing the case expression.

91
00:05:01.702 --> 00:05:06.014
I can't call unfollow button without
having a FollowedAuthor, and

92
00:05:06.014 --> 00:05:10.189
I can't call follow button without
having an UnfollowedAuthor.

93
00:05:10.189 --> 00:05:11.197
Because each of those.

94
00:05:13.661 --> 00:05:16.093
&gt;&gt; Richard Feldman: Requires
passing the other one.

95
00:05:16.093 --> 00:05:18.431
Follow button requires
taking an UnfollowedAuthor,

96
00:05:18.431 --> 00:05:20.728
unfollow button requires
taking a FollowedAuthor.

97
00:05:20.728 --> 00:05:23.693
And the only way that I can obtain one
of those if I've got an article is to

98
00:05:23.693 --> 00:05:25.632
actually enumerate all
three of these cases.

99
00:05:25.632 --> 00:05:29.781
I have to write a case expression,
I have to handle all three types.

100
00:05:29.781 --> 00:05:33.049
So because of the way we set up
the variants and which of these types

101
00:05:33.049 --> 00:05:36.794
are opaque, it ends up being the case
that the only way to render a follow and

102
00:05:36.794 --> 00:05:37.757
unfollow button.

103
00:05:37.757 --> 00:05:41.199
Is to render a follow button for
someone I'm not following,

104
00:05:41.199 --> 00:05:44.709
to render an unfollow button for
someone that I am following,

105
00:05:44.709 --> 00:05:47.358
and I can't render either
of them if it's me.

106
00:05:47.358 --> 00:05:50.036
So it successfully turn this
edge case from something where I

107
00:05:50.036 --> 00:05:51.723
have to remember to do it all the time.

108
00:05:51.723 --> 00:05:53.035
Or I have to document to do it and

109
00:05:53.035 --> 00:05:55.710
hope that the present joins
the company 12 months from now and

110
00:05:55.710 --> 00:05:58.552
it's the first week on the job and
it's going to render to follow.

111
00:05:58.552 --> 00:06:03.754
But they remember that into something
where you kinda can't mess it up, or at

112
00:06:03.754 --> 00:06:09.212
least you can't mess up the part where you
need to know how to handle it properly.

113
00:06:09.212 --> 00:06:11.504
This isn't to say that you
can't make other mistakes,

114
00:06:11.504 --> 00:06:13.847
I could still render something
incomprehensible here or

115
00:06:13.847 --> 00:06:16.063
I could choose not to render
an unfollow button here.

116
00:06:16.063 --> 00:06:20.465
But at the very least the edge case of
forgetting to handle this is no longer

117
00:06:20.465 --> 00:06:22.170
really possible to ignore.

118
00:06:22.170 --> 00:06:23.474
Questions on that?

119
00:06:23.474 --> 00:06:24.538
Yeah?

120
00:06:24.538 --> 00:06:28.204
&gt;&gt; Speaker 2: So to that point about,
kinda like sharing knowledge,

121
00:06:28.204 --> 00:06:30.001
when you get a code review.

122
00:06:30.001 --> 00:06:34.170
If you see somebody expose something new,
would that, like, be a red flag, like,

123
00:06:34.170 --> 00:06:37.847
maybe they didn't get it and they kind
of dove into that opening type and.

124
00:06:37.847 --> 00:06:38.495
&gt;&gt; Richard Feldman: For sure, yeah.

125
00:06:38.495 --> 00:06:41.944
[LAUGH] So, like, if somebody makes
a pull request and they do this.

126
00:06:41.944 --> 00:06:43.496
Yeah, that's usually a red flag.

127
00:06:43.496 --> 00:06:46.676
If you're going from unexposed
constructors to exposed constructors,

128
00:06:46.676 --> 00:06:50.318
probably, there should be a name change
going along with that, because it probably

129
00:06:50.318 --> 00:06:54.241
means you're doing something fundamentally
different than what you were doing before.

130
00:06:54.241 --> 00:06:55.961
Yeah, I would definitely
consider that a pre.

131
00:06:55.961 --> 00:07:00.104
It's essentially the equivalent of,
if you're working in Ruby or Java, and

132
00:07:00.104 --> 00:07:04.083
someone takes all the stuff that was
in private and just moves it to public.

133
00:07:04.083 --> 00:07:04.864
It's like, wait, wait, wait.

134
00:07:04.864 --> 00:07:06.760
[LAUGH] Why are we doing this?

135
00:07:06.760 --> 00:07:07.904
This seems like a bad idea.

136
00:07:10.699 --> 00:07:14.105
&gt;&gt; Speaker 3: In the case statement
you are returning html and

137
00:07:14.105 --> 00:07:18.542
then just returning an empty text,
[INAUDIBLE] it looks like.

138
00:07:18.542 --> 00:07:19.515
&gt;&gt; Richard Feldman: Yeah.

139
00:07:19.515 --> 00:07:21.195
&gt;&gt; Speaker 3: Yeah, that's pretty common.

140
00:07:21.195 --> 00:07:24.775
&gt;&gt; Richard Feldman: Yeah, that's, so,
another way you can do it, this is a short

141
00:07:24.775 --> 00:07:29.507
hand I like to use for essentially saying
I don't wanna return any virtual download

142
00:07:29.507 --> 00:07:33.985
because an empty text node is essentially
Invisible in the DOM to the end user.

143
00:07:33.985 --> 00:07:37.069
Another way you can do it is you
could have this return a maybe, or

144
00:07:37.069 --> 00:07:39.126
you could have it return a list of HTML,
and

145
00:07:39.126 --> 00:07:42.458
then concatenate them on other things and
return empty lists there.

146
00:07:42.458 --> 00:07:49.531
But often enough I just tend to go with
this, any of those three ways work.

147
00:07:49.531 --> 00:07:53.267
We're done with to the code,
all right, so let's review.

148
00:07:53.267 --> 00:07:57.776
We started off by talking about module
boundaries, the idea of being able to

149
00:07:57.776 --> 00:08:02.851
selectively expose our variants such that
we don't expose everything by default but

150
00:08:02.851 --> 00:08:06.955
rather we choose to only expose
variance when it sort of makes sense.

151
00:08:06.955 --> 00:08:08.728
We talked about the idea of opaque type,

152
00:08:08.728 --> 00:08:11.821
which is to say types where
the implementation, details are hidden.

153
00:08:11.821 --> 00:08:15.931
The variance are not exposed or maybe it's
not even a custom type under the hood at

154
00:08:15.931 --> 00:08:19.757
all, in the case of some of the things
that are built in to the core library.

155
00:08:19.757 --> 00:08:23.005
We talked about the idea of validated
data, we talked about the email type,

156
00:08:23.005 --> 00:08:26.406
where we could guarantee that the email
had at least been validated if you were to

157
00:08:26.406 --> 00:08:27.646
obtain one of those values.

158
00:08:27.646 --> 00:08:30.673
Then we showed how to do that with a
wrapper called valid, which the other way

159
00:08:30.673 --> 00:08:33.341
to obtain one of those was to run
it through a validation function.

160
00:08:33.341 --> 00:08:36.253
And it would guarantee that
whatever type you had,

161
00:08:36.253 --> 00:08:38.901
had been run through
a validator of some sort.

162
00:08:38.901 --> 00:08:40.822
And finally we talked about
when not to go Opaque,

163
00:08:40.822 --> 00:08:43.176
we saw the example of the author
where we had three variance.

164
00:08:43.176 --> 00:08:46.958
Which was totally fine to expose based on
the way that we were ending up using it,

165
00:08:46.958 --> 00:08:49.273
it wasn't actually breaking
any guarantees and

166
00:08:49.273 --> 00:08:52.786
it did require that the end user needed
to handle all three of those cases.

167
00:08:52.786 --> 00:08:55.565
And in fact there,
the fact that you had the full pattern

168
00:08:55.565 --> 00:08:59.603
matching abilities without losing any
guarantees turned out to be beneficial.

