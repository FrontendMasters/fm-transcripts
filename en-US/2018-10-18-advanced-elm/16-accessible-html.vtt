WEBVTT

1
00:00:00.200 --> 00:00:02.050
&gt;&gt; Richard Feldman: Type Parameter Design.

2
00:00:02.050 --> 00:00:06.000
So here are three different
ways we could write a function

3
00:00:06.000 --> 00:00:10.150
to take a list of attributes, and
they all have different tradeoffs.

4
00:00:10.150 --> 00:00:14.080
So one is taking a list of attributes
with an unbound message type.

5
00:00:14.080 --> 00:00:17.600
The middle one is taking a list of
attributes with a concrete message

6
00:00:17.600 --> 00:00:20.220
type that is our actual message type.

7
00:00:20.220 --> 00:00:24.400
And the third one is taking a list
of attributes with the Never type.

8
00:00:24.400 --> 00:00:26.880
If you're not familiar with Never,
fear not, we're about to get into it.

9
00:00:28.280 --> 00:00:31.840
Okay, so
here's a sort of a motivating use case for

10
00:00:31.840 --> 00:00:33.730
why we might choose one
of this three things.

11
00:00:33.730 --> 00:00:37.460
So let's say I'm at my REPL and
I put in a HTML.text Hi.

12
00:00:37.460 --> 00:00:42.870
And it says okay, that's Html message with
an unbound type variable, no big deal.

13
00:00:42.870 --> 00:00:45.760
Here's another Html function,
this is the paragraph tag.

14
00:00:45.760 --> 00:00:49.701
So if we're gonna make an Html paragraph,
so it takes a list of attributes,

15
00:00:49.701 --> 00:00:51.747
a list of Html and returns list of Html.

16
00:00:51.747 --> 00:00:55.815
And they all share a common
messaged type variable there.

17
00:00:55.815 --> 00:00:58.915
So I can put that into the REPL, say
paragraph and not give it any attributes.

18
00:00:58.915 --> 00:01:04.035
Say text Hi, it says cool, Html msg
is the return value because I gave it

19
00:01:04.035 --> 00:01:07.645
unbounded list right here
because it's any empty list.

20
00:01:07.645 --> 00:01:09.905
I gave it a list of Html
message right here.

21
00:01:09.905 --> 00:01:13.662
As we saw for the previous example, that's
also Html with an unbound message type.

22
00:01:13.662 --> 00:01:15.941
So if I give it a list
with unbound type and

23
00:01:15.941 --> 00:01:20.098
then another list which has HTML with
an unbound message, the result is we

24
00:01:20.098 --> 00:01:24.250
still have HTML with an unbound
message type at the end of all that.

25
00:01:24.250 --> 00:01:29.040
Thatâ€™s why this paragraph returns as Html
with still an unbounded message type.

26
00:01:29.040 --> 00:01:32.140
Okay, we can also put our
onClick handler on there.

27
00:01:32.140 --> 00:01:33.450
So onClick has this signature.

28
00:01:33.450 --> 00:01:35.350
It takes a message and
then returns Attribute message.

29
00:01:35.350 --> 00:01:39.540
So that is not unbound, that's bound to
the message argument that it receives.

30
00:01:39.540 --> 00:01:42.510
So as soon as I give this paragraph
onClick of absolutely anything,

31
00:01:42.510 --> 00:01:45.870
whatever I pass to onClick in there
is going to be something concrete.

32
00:01:45.870 --> 00:01:48.110
So onClick's gonna give
me that thing back.

33
00:01:48.110 --> 00:01:50.200
And then we're now gonna have
Html paramaterized on that.

34
00:01:50.200 --> 00:01:53.300
So now we've ended up with
Html Message with a capital M,

35
00:01:53.300 --> 00:01:56.139
which is to say a concrete type,
it's no longer unbound.

36
00:01:57.830 --> 00:01:58.730
Now all of this works.

37
00:01:58.730 --> 00:01:59.540
All of this compiles.

38
00:01:59.540 --> 00:02:00.670
All of this is perfectly functional.

39
00:02:01.670 --> 00:02:04.060
The only problem with it
is it's not very semantic.

40
00:02:04.060 --> 00:02:05.640
Why does your paragraph
have a click handler?

41
00:02:05.640 --> 00:02:06.860
What are you doing?

42
00:02:06.860 --> 00:02:08.696
That's something that's totally valid.

43
00:02:08.696 --> 00:02:10.840
The browser will accept it, it'll work.

44
00:02:10.840 --> 00:02:12.479
But from an accessibility perspective,

45
00:02:12.479 --> 00:02:15.017
how is someone supposed to guess
that's going to be clickable?

46
00:02:15.017 --> 00:02:18.147
That's very non-semantic html.

47
00:02:18.147 --> 00:02:21.646
Wouldn't it be nice if we could rule that
out, and sort of say, hey, you know what?

48
00:02:21.646 --> 00:02:23.240
That's not what paragraphs are for.

49
00:02:23.240 --> 00:02:25.510
They're for other stuff, don't do that.

50
00:02:25.510 --> 00:02:29.159
If you you wanna put an onClick handler,
do it on a button or something like that,

51
00:02:29.159 --> 00:02:32.129
where it's actually semantically
intended to be used that way.

52
00:02:32.129 --> 00:02:36.481
So my coworker, Tessa Kelly, has
a library, and actually she gave a talk at

53
00:02:36.481 --> 00:02:40.364
Elm Conf US last year about this
library called accessible-html.

54
00:02:40.364 --> 00:02:41.550
And that's exactly what it does.

55
00:02:42.680 --> 00:02:45.140
So her library is essentially
a drop in replacement for

56
00:02:45.140 --> 00:02:47.710
the basic html library and it

57
00:02:47.710 --> 00:02:52.670
implements certain constraints like this
based around accessibility best practices.

58
00:02:52.670 --> 00:02:55.540
One of which is that paragraph
has a slightly different type

59
00:02:55.540 --> 00:02:58.310
than the one in the normal
Elm Html package.

60
00:02:59.440 --> 00:03:02.320
So it takes as its second
argument a list of children,

61
00:03:02.320 --> 00:03:03.330
which works the same as before.

62
00:03:03.330 --> 00:03:07.820
And then it returns Html message,
which has the same type variable as

63
00:03:07.820 --> 00:03:11.260
that list of children, but
the attributes are a little bit different.

64
00:03:11.260 --> 00:03:13.650
The attributes,
instead of taking List Attribute message,

65
00:03:13.650 --> 00:03:16.720
like we did before,
now it takes List Attribute Never.

66
00:03:18.660 --> 00:03:20.500
So again,
we'll get into what Never is in a moment.

67
00:03:20.500 --> 00:03:23.490
But the important thing is
that it's a concrete type, and

68
00:03:23.490 --> 00:03:26.930
it's not our message type,
it's a third thing.

69
00:03:28.840 --> 00:03:32.414
So going back to this example that we
had at the REPL before, paragraph,

70
00:03:32.414 --> 00:03:35.630
empty list, text Hi,
that'll still compile.

71
00:03:35.630 --> 00:03:39.400
It will give us back HTML message with
an unbounded type just like before.

72
00:03:39.400 --> 00:03:43.590
And the reason for that is that the first
argument we're passing is an empty list,

73
00:03:43.590 --> 00:03:46.980
which is a list with an unbounded type,
which means that yeah,

74
00:03:46.980 --> 00:03:48.290
that'll absolutely unify.

75
00:03:48.290 --> 00:03:52.881
The constraints will unify with attribute
never because this sucker unifies with

76
00:03:52.881 --> 00:03:53.554
anything.

77
00:03:53.554 --> 00:03:57.157
So although it's demanding an Attribute
with Never as it message type, it says,

78
00:03:57.157 --> 00:03:59.576
you must give me an Attribute
that has this Never type.

79
00:03:59.576 --> 00:04:02.873
It has to produce a message of that type.

80
00:04:02.873 --> 00:04:06.456
It's only kind of saying that because
really with the way that Elms type

81
00:04:06.456 --> 00:04:08.785
inference works and
can string unification,

82
00:04:08.785 --> 00:04:11.545
it'll accept something that
unifies with anything.

83
00:04:11.545 --> 00:04:14.802
Even though we actually don't have
the ability necessarily to produce one of

84
00:04:14.802 --> 00:04:15.460
these things.

85
00:04:17.100 --> 00:04:18.720
So this'll work.

86
00:04:18.720 --> 00:04:20.320
It'll give us back HTML message,

87
00:04:20.320 --> 00:04:23.600
still an unbound type variable,
just exactly like before.

88
00:04:23.600 --> 00:04:24.370
So so far, so

89
00:04:24.370 --> 00:04:28.160
good, so far, we're using it exactly the
same way as we would in either library.

90
00:04:29.270 --> 00:04:31.370
Now, let's try to put
a click handler on it.

91
00:04:31.370 --> 00:04:34.780
Well now, we have a problem because
this produces, this right here,

92
00:04:34.780 --> 00:04:38.920
this is a list of Attribute message
with a capital M as we saw before.

93
00:04:38.920 --> 00:04:43.180
That is a bound type variable, it is
a concrete type, it is our message type.

94
00:04:43.180 --> 00:04:46.750
It is most emphatically not Attribute
Never, which is what this type demands.

95
00:04:46.750 --> 00:04:48.320
So this will be a type mismatch.

96
00:04:48.320 --> 00:04:51.799
I tried to put a click handler on my
paragraph and it did not compile.

97
00:04:51.799 --> 00:04:54.940
Ouch, but good for accessibility,
that was the whole goal.

98
00:04:56.320 --> 00:04:59.650
However, I can still put
other attributes on there.

99
00:04:59.650 --> 00:05:03.060
For example, I can put a class on there,
like if I want to style my paragraph,

100
00:05:03.060 --> 00:05:04.760
that's totally fine.

101
00:05:04.760 --> 00:05:09.880
Because there's a whole set of attributes
which return unbound attributes.

102
00:05:09.880 --> 00:05:12.290
So class returns and actually,
with an unbound message,

103
00:05:12.290 --> 00:05:16.300
which means that it produces a list of
attributes of that unbound message.

104
00:05:16.300 --> 00:05:18.553
I could put class on there,
I could put id on there,

105
00:05:18.553 --> 00:05:21.295
I could put any number of
accessibility attributes on there.

106
00:05:21.295 --> 00:05:24.415
All of those things are totally fine
because they return attribute with

107
00:05:24.415 --> 00:05:27.233
an unbound message,
which we'll unify with attribute never.

108
00:05:27.233 --> 00:05:28.309
Because they'll unify with anything.

109
00:05:30.070 --> 00:05:33.917
So in this way we've specifically ruled
out with sort of like laser precision only

110
00:05:33.917 --> 00:05:35.375
things that are interactive.

111
00:05:35.375 --> 00:05:38.569
Things that actually can produce a message
that gets sent to update which is

112
00:05:38.569 --> 00:05:39.440
exactly the point.

113
00:05:41.920 --> 00:05:43.660
One way you can think of this type is,

114
00:05:43.660 --> 00:05:47.740
this is a paragraph that takes
a list of inner attributes.

115
00:05:47.740 --> 00:05:50.080
Attributes that do not
produce any interaction.

116
00:05:50.080 --> 00:05:52.565
In other words, paragraphs are static.

117
00:05:52.565 --> 00:05:53.723
You can style them all you want.

118
00:05:53.723 --> 00:05:55.953
You can add accessibility
attributes all you want.

119
00:05:55.953 --> 00:05:58.210
You can give them whatever
children you want.

120
00:05:58.210 --> 00:06:01.390
The only thing you can't do is
put event handlers on them.

