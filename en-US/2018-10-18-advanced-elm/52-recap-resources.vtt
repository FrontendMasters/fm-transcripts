WEBVTT

1
00:00:00.650 --> 00:00:02.238
&gt;&gt; Richard Feldman: So we're gonna
do three things in this wrap up.

2
00:00:02.238 --> 00:00:04.511
We're gonna start by recapping
our goals that we laid out at

3
00:00:04.511 --> 00:00:05.520
the beginning of the day.

4
00:00:05.520 --> 00:00:08.410
We're gonna talk about the topics
that we ended up covering, and

5
00:00:08.410 --> 00:00:11.850
finally list some additional resources
in case you wanna follow up on

6
00:00:11.850 --> 00:00:13.920
some of these concepts that
we talked about earlier on.

7
00:00:14.960 --> 00:00:21.020
Okay, so first we're gonna talk about the
goals that we lay it out at the beginning.

8
00:00:21.020 --> 00:00:23.980
So we talked about ruling out
more problems at compile time.

9
00:00:23.980 --> 00:00:25.790
We sure talked about a lot of that stuff.

10
00:00:25.790 --> 00:00:28.080
That was really a recurring
theme throughout.

11
00:00:28.080 --> 00:00:30.940
We talked about how to organize and
scale Elm applications.

12
00:00:30.940 --> 00:00:33.590
So we talked about things like
where to put your modules,

13
00:00:33.590 --> 00:00:34.830
where to draw the boundaries.

14
00:00:34.830 --> 00:00:38.210
How to think about how to organize
modules in relation to one another.

15
00:00:38.210 --> 00:00:38.790
How to scale.

16
00:00:38.790 --> 00:00:40.899
In other words,
in what order to build things out.

17
00:00:42.390 --> 00:00:45.320
We also talked about how to
reuse parts of a user interface.

18
00:00:45.320 --> 00:00:48.520
Whether it be parts of the UI,
helper functions for some of the logic.

19
00:00:48.520 --> 00:00:49.977
All those different things, and

20
00:00:49.977 --> 00:00:53.800
all the different tactics we can
potentially use to reuse things.

21
00:00:53.800 --> 00:00:56.000
And finally we talked about
how to manage external data,

22
00:00:56.000 --> 00:00:57.490
thinking in terms of caches.

23
00:00:57.490 --> 00:01:00.140
External data coming from the server,
coming from JavaScript.

24
00:01:00.140 --> 00:01:02.670
Who is the source of truth, how can we
make sure there's only one source of

25
00:01:02.670 --> 00:01:06.550
truth, and we don't have competing notions
of those as we build out our application?

26
00:01:07.600 --> 00:01:10.530
In support of those goals we covered
a bunch of different topics,

27
00:01:10.530 --> 00:01:13.550
we talked about opaque
types which came up a lot.

28
00:01:13.550 --> 00:01:14.670
We talked about extensible data,

29
00:01:14.670 --> 00:01:19.550
the idea of using a custom type to model
like full articles and article previews.

30
00:01:19.550 --> 00:01:23.680
And how we could do that instead of open
records which is sort of a more flexible,

31
00:01:23.680 --> 00:01:25.340
more powerful way to do that.

32
00:01:25.340 --> 00:01:27.060
We talked about ways
to create constraints.

33
00:01:27.060 --> 00:01:29.920
We talked about ways to introduce
constraints at the type level

34
00:01:29.920 --> 00:01:31.900
with phantom types or without.

35
00:01:31.900 --> 00:01:35.941
We talked about ways to link articles,
sorry, link views and

36
00:01:35.941 --> 00:01:39.205
update by adding additional
arguments to messages.

37
00:01:39.205 --> 00:01:40.218
We've talked about scaling.

38
00:01:40.218 --> 00:01:42.917
And how to go from sort of
a small application to a big one,

39
00:01:42.917 --> 00:01:44.886
while keeping our types nice and narrow so

40
00:01:44.886 --> 00:01:48.316
that, no matter how big it gets,
we can always mentally break it down and

41
00:01:48.316 --> 00:01:52.027
slice it up into just the things that
matter, just by looking at the types, and

42
00:01:52.027 --> 00:01:54.762
sort of more quickly traverse
through a large code base.

43
00:01:54.762 --> 00:01:58.868
We talked about reuse and a couple of
different techniques for doing that,

44
00:01:58.868 --> 00:02:02.600
both in terms of UI elements,
as well as in terms of internal logic.

45
00:02:03.610 --> 00:02:04.870
Talked about sources of truth and

46
00:02:04.870 --> 00:02:09.330
how to sort of keep them as small in
number as possible, ideally to one.

47
00:02:09.330 --> 00:02:12.090
Talked about decoding and a couple of
different ways to deals with that.

48
00:02:12.090 --> 00:02:16.242
We talked about decode.map and
contrasted it with result.map and

49
00:02:16.242 --> 00:02:19.890
maybe.map and decode.and then all
of which are concepts that appear,

50
00:02:19.890 --> 00:02:24.040
not just in deciding, but in other
data types, as well throughout Elm.

51
00:02:24.040 --> 00:02:25.810
And finally we talked
about single-page apps and

52
00:02:25.810 --> 00:02:28.910
sort of concepts around how to
organize the modules within them,

53
00:02:28.910 --> 00:02:33.240
how to name space things, how to load
data, how to persist it between pages and

54
00:02:33.240 --> 00:02:37.580
expire caches and how to deal with
things like routing and pages.

55
00:02:37.580 --> 00:02:39.573
And all these we focus
on sort of techniques.

56
00:02:39.573 --> 00:02:43.686
None of these were really with arguable
exception of JSON decoding revokes on

57
00:02:43.686 --> 00:02:47.878
a particular package, but rather on just
concepts that you can sort of apply.

58
00:02:47.878 --> 00:02:50.989
No matter what type of Elm
application you're building,

59
00:02:50.989 --> 00:02:53.790
as long as it's at least
related to these concepts.

60
00:02:55.300 --> 00:02:58.890
Some additional resources, I mentioned
a few talks in the course of this.

61
00:02:58.890 --> 00:03:01.100
Those are listed here,
as well as a few others.

62
00:03:01.100 --> 00:03:02.870
So The Life of a File, by Evan.

63
00:03:02.870 --> 00:03:06.170
He talks about the idea
of module boundaries and

64
00:03:06.170 --> 00:03:07.520
how to think about files in Elm.

65
00:03:08.540 --> 00:03:10.100
Accessibility with Elm by Tessa Kelly,

66
00:03:10.100 --> 00:03:12.110
she is the author of
the accessible HTML package.

67
00:03:12.110 --> 00:03:16.060
This is where she talks about that and
how she designed it.

68
00:03:16.060 --> 00:03:19.450
The Importance of Ports talks about
sources of truth by Murphy Randle,

69
00:03:19.450 --> 00:03:23.410
and specifically sources of
truth with JavaScript interopt.

70
00:03:23.410 --> 00:03:26.290
He also goes into a number of other
topics that are useful there.

71
00:03:26.290 --> 00:03:30.700
Working with Maybe, this has to do with
when to use maybe and in a lot of cases,

72
00:03:30.700 --> 00:03:31.850
when not to use maybe.

73
00:03:31.850 --> 00:03:36.480
This ties into our idea of reuse, and
is it always the right choice to go for

74
00:03:36.480 --> 00:03:36.990
reuse?

75
00:03:36.990 --> 00:03:38.960
So maybe is something
that can be overused, and

76
00:03:38.960 --> 00:03:42.280
he talks about some of the tradeoffs
around reusing the logic that comes with

77
00:03:42.280 --> 00:03:44.500
maybe versus rolling your own custom type.

78
00:03:45.710 --> 00:03:47.681
Custom Elements in Elm with Luke Westby.

79
00:03:47.681 --> 00:03:52.586
He talks about the alternative to other
forms of JavaScript interopt which I

80
00:03:52.586 --> 00:03:54.973
alluded to very briefly in part six.

81
00:03:54.973 --> 00:03:58.930
Making Impossible States Impossible.

82
00:03:58.930 --> 00:04:01.800
That's one that I talked about at
the very beginning of the workshop

83
00:04:01.800 --> 00:04:05.400
with regards to ruling out the things
that ought to be impossible.

84
00:04:05.400 --> 00:04:08.270
Scaling Elm Apps also deals
with a number of the things we

85
00:04:08.270 --> 00:04:10.030
talked about in the scaling section.

86
00:04:10.030 --> 00:04:14.970
And finally, Make Data Structures, which
is sort of my overall big picture advice

87
00:04:14.970 --> 00:04:19.699
in terms of in what order to build Elm
applications, and it talks about sort of,

88
00:04:19.699 --> 00:04:22.044
focusing on the data structures firs.

89
00:04:22.044 --> 00:04:24.480
And the module and
building module around them and

90
00:04:24.480 --> 00:04:26.570
then layering the view
code on top of that.

91
00:04:27.950 --> 00:04:30.530
Okay, that concludes our workshop.

92
00:04:30.530 --> 00:04:31.395
Thank you so much for coming.

93
00:04:31.395 --> 00:04:37.225
&gt;&gt; Group: [APPLAUSE]
&gt;&gt; Speaker 3: I have to imagine so

94
00:04:37.225 --> 00:04:41.600
like I don't any place more than one in

95
00:04:41.600 --> 00:04:46.537
this metro that using Elm and production.

96
00:04:46.537 --> 00:04:51.401
But when like if I were to go somewhere
and introduce it, and everything,

97
00:04:51.401 --> 00:04:56.904
it definitely would feel like I would
be introducing a lot of legacy in the.

98
00:04:56.904 --> 00:04:58.127
&gt;&gt; Richard Feldman: [LAUGH]
&gt;&gt; Speaker 3: Cuz I

99
00:04:58.127 --> 00:05:02.062
don't have all of this knowledge that
we went through out of the gate and

100
00:05:02.062 --> 00:05:05.220
it would be silly to try to
think that I could start there.

101
00:05:05.220 --> 00:05:05.720
&gt;&gt; Richard Feldman: Yeah, but

102
00:05:05.720 --> 00:05:08.330
I mean the good news is like,
you could re-factor, right.

103
00:05:08.330 --> 00:05:11.250
I mean like, even like

104
00:05:11.250 --> 00:05:15.180
own code that is like quite
suboptimal is still pretty awesome.

105
00:05:15.180 --> 00:05:17.120
I know having written a lot of it.

106
00:05:17.120 --> 00:05:22.120
[LAUGH] It's like the point of this course
is to be like, you can do even better than

107
00:05:22.120 --> 00:05:25.430
that, but even if you don't,
it's still pretty great in my experience.

108
00:05:25.430 --> 00:05:29.980
So maybe I should have made it a more
overt disclaimer like, hey, by the way,

109
00:05:29.980 --> 00:05:32.200
it's totally fine if you're not
doing all this, don't feel bad.

110
00:05:32.200 --> 00:05:34.770
Cuz I know that's not necessarily
true in a lot of JavaScript things.

111
00:05:34.770 --> 00:05:37.395
It's like, if you're not doing
the best practices, you are screwed.

112
00:05:37.395 --> 00:05:39.356
&gt;&gt; Group: [LAUGH]
&gt;&gt; Richard Feldman: That's not true,

113
00:05:39.356 --> 00:05:43.557
it's more like if you're not
doing the best practices,

114
00:05:43.557 --> 00:05:47.772
then you're missing out potentially,
on even better.

115
00:05:47.772 --> 00:05:50.377
But the floor is very high on
how good the experience is.

116
00:05:50.377 --> 00:05:55.650
&gt;&gt; Speaker 3: Would you say you
can get pretty far [INAUDIBLE].

117
00:05:55.650 --> 00:05:59.753
With a pretty good,
create a pretty good application and

118
00:05:59.753 --> 00:06:03.411
miss some of the stuff,
and then come back to it?

119
00:06:03.411 --> 00:06:07.141
&gt;&gt; Richard Feldman: Yeah, the only one of
all the stuff that we talked about that I

120
00:06:07.141 --> 00:06:09.849
would actually say is
a genuine caution is,

121
00:06:09.849 --> 00:06:12.719
don't overuse html.map and command.map.

122
00:06:12.719 --> 00:06:17.386
The only like, the thing that I've
seen people say, I did this, and

123
00:06:17.386 --> 00:06:19.816
then I had a really bad experience.

124
00:06:19.816 --> 00:06:22.680
Was like, every time I use something,
it gets its own model, and

125
00:06:22.680 --> 00:06:25.960
its own message and its own view and
its own update and its own everything and

126
00:06:25.960 --> 00:06:27.390
I was like, I am 90% wiring.

127
00:06:27.390 --> 00:06:27.906
How did this happen?

128
00:06:27.906 --> 00:06:29.344
And it's like, no.

129
00:06:29.344 --> 00:06:33.847
And I think that is an easy trap to fall
into, because if you do all those things,

130
00:06:33.847 --> 00:06:37.884
you end up with something that has
the design characteristics of a react

131
00:06:37.884 --> 00:06:38.644
component.

132
00:06:38.644 --> 00:06:42.898
So it's sort of a natural thing to do
to be, I'm used to doing it that way,

133
00:06:42.898 --> 00:06:46.350
this is a way to get something
that's familiar in Elm.

134
00:06:46.350 --> 00:06:51.780
But it leads to a pretty bad
outcome if you try to do that.

135
00:06:51.780 --> 00:06:54.914
So don't do OONFP,
just leave the OON, [LAUGH].

136
00:06:54.914 --> 00:06:56.320
Things will work out better.

137
00:06:56.320 --> 00:06:59.110
But, other then that all the other
stuff it's just sort of like.

138
00:06:59.110 --> 00:06:59.958
This is good, but

139
00:06:59.958 --> 00:07:03.700
even if you don't do it this way I think
you'll still end up having a good time.

140
00:07:03.700 --> 00:07:04.456
I certainly have.

141
00:07:04.456 --> 00:07:05.518
[LAUGH]

