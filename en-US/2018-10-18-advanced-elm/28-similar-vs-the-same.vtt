WEBVTT

1
00:00:00.270 --> 00:00:04.552
&gt;&gt; Richard Feldman: Second thing we're
talking about is similar versus the same.

2
00:00:04.552 --> 00:00:09.109
So this is a it of trap that is pretty
easy to fall into as programmers just in

3
00:00:09.109 --> 00:00:10.957
general, Elm or otherwise.

4
00:00:10.957 --> 00:00:12.347
Here's the trap.

5
00:00:12.347 --> 00:00:17.470
So we've got something here on this
article page, [COUGH] called a status.

6
00:00:17.470 --> 00:00:22.530
And the purpose of status
is to record in what state,

7
00:00:22.530 --> 00:00:27.400
these two different HTTP requests are.

8
00:00:27.400 --> 00:00:28.862
So we have a status for

9
00:00:28.862 --> 00:00:33.590
loading the comments that come
along with this particular article.

10
00:00:33.590 --> 00:00:35.612
So there's a little list of comments.

11
00:00:35.612 --> 00:00:39.412
And separately, we fire off another
HTTP request to load the article.

12
00:00:39.412 --> 00:00:42.264
Now these are running concurrently, so
it's possible that one of them's done,

13
00:00:42.264 --> 00:00:43.432
the other one's still loading.

14
00:00:43.432 --> 00:00:44.990
It's possible that neither
of them are done, or

15
00:00:44.990 --> 00:00:46.361
it's possible that both of them are done.

16
00:00:46.361 --> 00:00:49.504
Every combination of those is possible.

17
00:00:49.504 --> 00:00:53.527
We've also got a separate distinction
here between Loading and LoadingSlowly.

18
00:00:53.527 --> 00:00:57.097
LoadingSlowly means we've passed
the 500 millisecond threshold, and

19
00:00:57.097 --> 00:00:58.888
is now considered to be a slow loader.

20
00:00:58.888 --> 00:01:03.497
And we're going to show a loading
spinner to the user at that point.

21
00:01:03.497 --> 00:01:06.710
So we have these four different states,
and they are sort of independent.

22
00:01:06.710 --> 00:01:10.771
Either of these can be in either
state with any combination.

23
00:01:10.771 --> 00:01:15.043
Okay, so this then leads to sort of
a natural question which is yeah,

24
00:01:15.043 --> 00:01:18.220
don't we have this in
a bunch of different places?

25
00:01:18.220 --> 00:01:20.770
Don't we have this on
a bunch of different pages?

26
00:01:20.770 --> 00:01:24.466
Isn't this an opportunity for reuse?

27
00:01:24.466 --> 00:01:26.872
We've done a tiny bit of reuse
here within this module.

28
00:01:26.872 --> 00:01:29.370
We're using this type in
two places in this module.

29
00:01:30.670 --> 00:01:31.716
But couldn't we be using it in more?

30
00:01:31.716 --> 00:01:34.596
Why don't we use this thing
on the profile page, also,

31
00:01:34.596 --> 00:01:37.804
which also has two different
HTTP requests that it's doing?

32
00:01:37.804 --> 00:01:39.807
Why don't we use it on the editor,

33
00:01:39.807 --> 00:01:43.686
which also is in the same boat of
at least needing one HTTP request?

34
00:01:43.686 --> 00:01:47.743
We might as well have it load this
thing up so that it can use it for

35
00:01:47.743 --> 00:01:51.360
the sake of DRY,
don't repeat yourself, as they say.

36
00:01:52.720 --> 00:01:55.288
Well, let's take a look at those and
see what we actually ended

37
00:01:55.288 --> 00:01:58.196
up doing instead just by doing
nothing else rather than saying, okay,

38
00:01:58.196 --> 00:02:00.775
let's start by figuring out
the type that works for this page.

39
00:02:00.775 --> 00:02:04.306
And then see if it turns out that
those needs are actually the same.

40
00:02:04.306 --> 00:02:10.155
In other words, we successfully can reuse
this thing because the needs are the same,

41
00:02:10.155 --> 00:02:14.235
or if actually the needs are similar but
not quite the same.

42
00:02:14.235 --> 00:02:16.796
So here's what we ended
up with on Profile.

43
00:02:16.796 --> 00:02:20.410
So on Profile, we also have a type called
Status, and it works very similarly.

44
00:02:20.410 --> 00:02:21.450
We have author and feed,

45
00:02:21.450 --> 00:02:25.280
those two different HTTP requests that
are loading concurrently with one another.

46
00:02:25.280 --> 00:02:27.650
But it's not quite the same.

47
00:02:27.650 --> 00:02:30.691
If you look at these two types,
here we have Loading, Loading Slowly.

48
00:02:30.691 --> 00:02:33.538
Okay, we also Loading and
LoadingSlowly here, but

49
00:02:33.538 --> 00:02:35.615
here each variant stores a username.

50
00:02:35.615 --> 00:02:38.026
And failed, also stores a username.

51
00:02:38.026 --> 00:02:39.525
This is an important distinction.

52
00:02:39.525 --> 00:02:42.905
So on the profile page this is again,
getting into a concept,

53
00:02:42.905 --> 00:02:46.944
[LAUGH] that we're gonna talk about in
a little bit in a different section.

54
00:02:46.944 --> 00:02:51.041
But we wanna have a single source
of truth to answer the question,

55
00:02:51.041 --> 00:02:53.136
what username are we looking at?

56
00:02:53.136 --> 00:02:54.736
What is the current user?

57
00:02:54.736 --> 00:02:56.720
Who's profile is this?

58
00:02:56.720 --> 00:03:01.023
And the trick with that is that
we need to store that information

59
00:03:01.023 --> 00:03:03.467
before we actually load the thing.

60
00:03:03.467 --> 00:03:06.923
If I wanted to transition between these
states I potentially need to have

61
00:03:06.923 --> 00:03:08.518
that information written down.

62
00:03:08.518 --> 00:03:10.750
But actually once we're loaded,
I don't care anymore.

63
00:03:10.750 --> 00:03:13.699
Once we got the profile,
it's not longer important.

64
00:03:13.699 --> 00:03:16.086
But up until that point, it still is.

65
00:03:16.086 --> 00:03:17.611
Now that's not true on the article page.

66
00:03:17.611 --> 00:03:20.324
The article page doesn't have
that same design consideration.

67
00:03:20.324 --> 00:03:23.026
It's not important for it to store any
additional information in the status.

68
00:03:23.026 --> 00:03:26.339
It can just get away with Loading,
LoadingSlowly, and Failed.

69
00:03:26.339 --> 00:03:27.956
No additional info needed.

70
00:03:27.956 --> 00:03:29.317
Let's look at the editor.

71
00:03:29.317 --> 00:03:30.052
Now this one,

72
00:03:30.052 --> 00:03:33.675
we saw in the previous exercise,
this is actually even more complex.

73
00:03:33.675 --> 00:03:37.057
Yeah, it's still got Loading and
LoadingSlowly, much like Profile,

74
00:03:37.057 --> 00:03:40.716
it's also storing the slug, which is
to say the article that we're currently

75
00:03:40.716 --> 00:03:43.171
viewing, so
it shares that design consideration.

76
00:03:43.171 --> 00:03:46.517
But man, it doesn't even share
anymore stuff than than that.

77
00:03:46.517 --> 00:03:49.377
Here it starts to get
into a serious departure.

78
00:03:49.377 --> 00:03:52.499
So we now have this split between
Edit Article and New Article, and

79
00:03:52.499 --> 00:03:54.804
each of them have different
shapes of statuses.

80
00:03:54.804 --> 00:03:57.873
It's not just that each of them
could have a separate status,

81
00:03:57.873 --> 00:04:01.368
it's that the very notions of statuses
that they have are different.

82
00:04:01.368 --> 00:04:05.047
Edit has this whole series of statues
that have to do with loading,

83
00:04:05.047 --> 00:04:06.370
whereas new doesn't.

84
00:04:06.370 --> 00:04:09.104
When you're in the New Article
state you're either editing it,

85
00:04:09.104 --> 00:04:12.051
in which case you've got potentially
a list of problems in the forum.

86
00:04:12.051 --> 00:04:14.637
Or you're in the process of creating.

87
00:04:14.637 --> 00:04:18.153
Now the distinction between these two is
when you hit the Create Article button,

88
00:04:18.153 --> 00:04:21.738
we've validated your form, and confirmed
that there are no problems right now.

89
00:04:21.738 --> 00:04:25.970
Everything's cool, we validated it, we
sent the HTTP request off to the server,

90
00:04:25.970 --> 00:04:28.030
so there are no problems store in there.

91
00:04:29.490 --> 00:04:34.589
In contrast, editing has the same
kind of situation there with saving,

92
00:04:34.589 --> 00:04:37.607
but it now has a slug
associated with that.

93
00:04:37.607 --> 00:04:39.218
Because when you're editing the article,

94
00:04:39.218 --> 00:04:41.747
you need to know what the slug is
of the article that you're editing.

95
00:04:41.747 --> 00:04:45.650
That's an important piece of information
for the code that's gonna run in there.

96
00:04:45.650 --> 00:04:47.276
When you're a new article,
you don't have a slug yet.

97
00:04:47.276 --> 00:04:49.049
It doesn't exist.

98
00:04:49.049 --> 00:04:51.576
The whole point of this is we're trying
to create a new article from scratch and

99
00:04:51.576 --> 00:04:52.776
the server tells us what the slug is.

100
00:04:52.776 --> 00:04:54.195
We don't have one yet.

101
00:04:54.195 --> 00:04:58.871
So we can see that although in all
three cases we happen to have a type

102
00:04:58.871 --> 00:05:03.732
called status that effectively does
the same job in all three cases.

103
00:05:03.732 --> 00:05:08.333
We don't actually really have a good
argument that we should be trying to do

104
00:05:08.333 --> 00:05:09.144
reuse here.

105
00:05:09.144 --> 00:05:14.004
Imagine if we tried to extend this initial
status type to be flexible enough to

106
00:05:14.004 --> 00:05:16.191
accommodate all three use cases.

107
00:05:16.191 --> 00:05:20.242
How much configuration will we have to
introduce to this thing to make it capable

108
00:05:20.242 --> 00:05:21.335
of supporting this?

109
00:05:21.335 --> 00:05:25.904
Really, what we'd end up doing is
we'd effectively end up taking this,

110
00:05:25.904 --> 00:05:30.252
adding even more configuration on top
of it so that we could use this for

111
00:05:30.252 --> 00:05:34.546
that as well without having to handle
all of those extraneous cases.

112
00:05:34.546 --> 00:05:38.294
It's actually much better to just
repeat yourself, as it were.

113
00:05:38.294 --> 00:05:41.442
[LAUGH] To go against
the wisdom of that acronym,

114
00:05:41.442 --> 00:05:46.416
or the advice of that acronym and say,
yeah, actually these are similar.

115
00:05:46.416 --> 00:05:47.384
They do a similar job.

116
00:05:47.384 --> 00:05:48.286
They look similar.

117
00:05:48.286 --> 00:05:51.760
They have the same name,
but they're not the same.

118
00:05:51.760 --> 00:05:56.094
They actually do things differently enough
that it really does make sense not to

119
00:05:56.094 --> 00:05:57.400
reach for reuse here.

120
00:05:57.400 --> 00:06:00.454
It makes sense to say, yeah,
these are just different things.

121
00:06:00.454 --> 00:06:02.082
They do the same job but
they're different.

122
00:06:02.082 --> 00:06:05.377
We're just gonna have different types for
each of them.

123
00:06:05.377 --> 00:06:08.899
And that's something that I think I
sort of had to learn the hard way over

124
00:06:08.899 --> 00:06:11.246
the course of my years using Elm is that,
yeah,

125
00:06:11.246 --> 00:06:14.552
reuse is not necessarily the first
thing to reach for in all cases.

126
00:06:14.552 --> 00:06:17.567
In a lot of cases, it's better just
to say, no, these are different.

127
00:06:17.567 --> 00:06:20.304
We're just gonna have
a different thing here.

128
00:06:20.304 --> 00:06:24.141
I think there is a meaningful
difference when it comes to testing.

129
00:06:24.141 --> 00:06:26.705
So I think one of the reasons
that I reached for

130
00:06:26.705 --> 00:06:30.027
reuse as often as I did in JavaScript,
and I noticed that.

131
00:06:30.027 --> 00:06:32.804
I believe DRY comes from
the Ruby community, which is,

132
00:06:32.804 --> 00:06:36.054
of course, extremely big on testing,
is that, in JavaScript,

133
00:06:36.054 --> 00:06:40.034
I needed to lean on tests a lot to believe
that my code was actually going to work.

134
00:06:40.034 --> 00:06:44.037
I had a very low level of confidence in my
code actually working unless I had tests

135
00:06:44.037 --> 00:06:44.653
around it.

136
00:06:44.653 --> 00:06:46.613
And one of the things
about writing code and

137
00:06:46.613 --> 00:06:49.293
then reusing it is that you also
get to reuse all the tests.

138
00:06:49.293 --> 00:06:53.989
The thing is, in Elm, I have confidence in
this code, not because of the tests, but

139
00:06:53.989 --> 00:06:56.191
because of the way that I've typed it.

140
00:06:56.191 --> 00:06:59.163
The way that the compiler's going
to interact with my system and

141
00:06:59.163 --> 00:07:00.879
sort of check everything out for me.

142
00:07:00.879 --> 00:07:04.184
And that's gonna happen whether or
not I'm re-using it.

143
00:07:04.184 --> 00:07:07.620
This thing right here gets just as much
love from the compiler as this thing, and

144
00:07:07.620 --> 00:07:08.915
just as much from this thing.

145
00:07:08.915 --> 00:07:13.197
In all cases, I'm writing the same number
of tests around these pieces of code which

146
00:07:13.197 --> 00:07:14.115
is to say, none.

147
00:07:14.115 --> 00:07:17.820
And if I were going to write tests around
this, I would actually want the test for

148
00:07:17.820 --> 00:07:21.143
the state-transitions between these
different statuses to be pretty

149
00:07:21.143 --> 00:07:24.266
different from the tests I would write for
this one or for this one.

150
00:07:24.266 --> 00:07:26.977
In fact, if I were to look for
any opportunities for

151
00:07:26.977 --> 00:07:29.131
use most likely it would be in the tests.

152
00:07:29.131 --> 00:07:33.057
I would probably wanna write some
helper functions that would say, okay,

153
00:07:33.057 --> 00:07:36.855
I wanna look at if I've got a Loading,
or LoadingSlowly, or Loaded, or

154
00:07:36.855 --> 00:07:41.219
Failed the transitions between those two
should be the same regardless of username

155
00:07:41.219 --> 00:07:41.931
versus not.

156
00:07:41.931 --> 00:07:45.590
So if anything, I think that’s the
opportunity to reuse would be in testing,

157
00:07:45.590 --> 00:07:48.973
and it would be do through doing a helper
function rather than by trying to

158
00:07:48.973 --> 00:07:50.093
reuse the type itself.

