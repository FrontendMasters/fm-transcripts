WEBVTT

1
00:00:00.020 --> 00:00:01.160
&gt;&gt; Richard Feldman: Let's
go through these.

2
00:00:01.160 --> 00:00:04.460
So, we have a problem that
all of these are tasks, and

3
00:00:04.460 --> 00:00:06.320
we want them to be commands.

4
00:00:06.320 --> 00:00:09.221
So, we'll go over here and
build it, and unfortunately,

5
00:00:09.221 --> 00:00:11.483
the type mismatch that
we're gonna get here,

6
00:00:11.483 --> 00:00:14.568
although it is correctly telling
us that these don't line up.

7
00:00:14.568 --> 00:00:17.780
The particular thing that
it's complaining about,

8
00:00:17.780 --> 00:00:21.930
is not giving us a super great clue
as to what the real problem is here.

9
00:00:21.930 --> 00:00:26.383
What it's complaining about is the sort of
preliminary problem it encounters, which

10
00:00:26.383 --> 00:00:30.418
is to say that, these are all different
types that are all in the list literal.

11
00:00:30.418 --> 00:00:35.690
So, the problem that it's complaining
about is like ,hey, the second element is

12
00:00:35.690 --> 00:00:40.981
something, is a task that returns, yeah,
an HTTP error, but a list of comments.

13
00:00:40.981 --> 00:00:45.812
But the next task in the list,
has a different success type.

14
00:00:45.812 --> 00:00:50.122
So it's complaining about something that
is sort of unrelated to what we want.

15
00:00:50.122 --> 00:00:53.516
What we actually care about is the fact
that, yeah, but we're passing this whole

16
00:00:53.516 --> 00:00:57.270
list of alleged commands to command.batch
but they're not commands, they're tasks.

17
00:00:57.270 --> 00:01:01.652
Nevertheless, this does give us at least
the information that we need to figure out

18
00:01:01.652 --> 00:01:02.854
where to get started.

19
00:01:02.854 --> 00:01:07.021
So what it's telling us is that
the first element has the type

20
00:01:07.021 --> 00:01:09.645
Task Http.Error (Article Full).

21
00:01:09.645 --> 00:01:15.137
And the second one has a type
Task Http.Error (List Comment).

22
00:01:15.137 --> 00:01:17.624
So based on that,
we can see, well, clearly,

23
00:01:17.624 --> 00:01:19.625
this is not going to unify with Never.

24
00:01:19.625 --> 00:01:23.042
Both of these could potentially have HTTP
errors, which is to say that we're not

25
00:01:23.042 --> 00:01:25.690
gonna be able to use Task.perform
with either of these.

26
00:01:25.690 --> 00:01:28.071
We're gonna have to use Task.attempt.

27
00:01:28.071 --> 00:01:32.863
So, if we look at the docs for
Task.attempt, it's gonna tell us that we

28
00:01:32.863 --> 00:01:37.592
need to provide a message that accounts
for the two possible outcomes.

29
00:01:37.592 --> 00:01:39.932
One that it succeeds, and
the other that it fails.

30
00:01:39.932 --> 00:01:45.270
In order to do that,
it's gonna have them wrapped in a result,

31
00:01:45.270 --> 00:01:50.125
which means that,
when we want to call a Task.attempt.

32
00:01:50.125 --> 00:01:53.986
We're gonna have to give it a message
that get has a result that handles

33
00:01:53.986 --> 00:01:57.978
the Http.Error for the error case and
then for the success case whatever

34
00:01:57.978 --> 00:02:02.189
the particular thing is that each of
these tasks produces when it succeeds.

35
00:02:02.189 --> 00:02:05.106
So to figure to that out, we're gonna
go take a look at our message type, and

36
00:02:05.106 --> 00:02:07.358
we're gonna look for
something that lines up with these.

37
00:02:07.358 --> 00:02:12.125
We're gonna look for something
that is a message that holds on to

38
00:02:12.125 --> 00:02:15.403
a result of Http.Error and Lists Comment.

39
00:02:15.403 --> 00:02:18.313
And that's gonna be, but one for
the second one and for the first one,

40
00:02:18.313 --> 00:02:20.594
we're gonna want Http.Error and
(Article Full).

41
00:02:20.594 --> 00:02:23.684
So let's see if we got anything in here,
we'll go shopping for messages and

42
00:02:23.684 --> 00:02:25.335
see if we spot anything that looks good.

43
00:02:25.335 --> 00:02:28.609
So here's something that looks
pretty good, CompletedLoadArticle.

44
00:02:28.609 --> 00:02:32.442
It's got exactly the type we want,
result Http.Error (Article Full).

45
00:02:32.442 --> 00:02:36.575
So we're gonna try that out as
our type for the first thing.

46
00:02:36.575 --> 00:02:40.023
Task.attempt CompletedLoadArticle and for

47
00:02:40.023 --> 00:02:43.298
the second one this is
the list of comments.

48
00:02:43.298 --> 00:02:45.106
That's got the same thing but

49
00:02:45.106 --> 00:02:48.873
an Http.Error is gonna be paired
with List Comment instead.

50
00:02:48.873 --> 00:02:50.829
So let's see if we can see
anything in there, and

51
00:02:50.829 --> 00:02:52.996
sure enough the next one
is CompletedLoadComments.

52
00:02:52.996 --> 00:02:56.557
So we're gonna do that over here,
Task.attempt.

53
00:02:56.557 --> 00:03:00.138
CompletedLoadComments, okay,
now let's see what it complains about.

54
00:03:00.138 --> 00:03:02.760
Okay, now we see a new error.

55
00:03:02.760 --> 00:03:06.073
So, its still complaining about
the list being incongruous about

56
00:03:06.073 --> 00:03:08.034
the elements having different types.

57
00:03:08.034 --> 00:03:12.834
But this time it's saying hey
the problem now is that, this third one,

58
00:03:12.834 --> 00:03:17.238
is a task that produces no errors,
interesting, interesting.

59
00:03:17.238 --> 00:03:19.255
And the previous ones are all commands,

60
00:03:19.255 --> 00:03:22.345
which is now true because we made
those both go into commands.

61
00:03:22.345 --> 00:03:26.384
Since this one is producing a task
that cannot possibly have an error,

62
00:03:26.384 --> 00:03:28.647
we can safely use Task.perform on it.

63
00:03:30.634 --> 00:03:32.275
&gt;&gt; Richard Feldman: What are we
gonna pass to task.perform?

64
00:03:32.275 --> 00:03:35.902
Well, it doesn't expect a result because
there's no possibility that it could fail.

65
00:03:35.902 --> 00:03:37.517
So we're really just looking for

66
00:03:37.517 --> 00:03:40.642
something that accepts a Time.zone
value inside our message.

67
00:03:40.642 --> 00:03:45.368
So we go shopping for one of those and
here we go GotTimeZone Time.Zone.

68
00:03:45.368 --> 00:03:47.945
Fair enough, okay.

69
00:03:47.945 --> 00:03:53.891
Last but not least, we see SlowThreshold
is a task that takes task with actually,

70
00:03:53.891 --> 00:03:56.734
not only does it have no error type, but

71
00:03:56.734 --> 00:04:00.977
also on success it produces
a unit which is to say nothing.

72
00:04:00.977 --> 00:04:03.481
Nothing of any use whatsoever.

73
00:04:03.481 --> 00:04:06.108
But we wanted to convert
it into a message.

74
00:04:06.108 --> 00:04:10.503
So for that one,
we can definitely safely use Task.perform.

75
00:04:10.503 --> 00:04:13.614
And what we're gonna look for

76
00:04:13.614 --> 00:04:19.592
is a message that takes a unit and
then returns a message.

77
00:04:19.592 --> 00:04:21.930
So let's see if we have
anything like that.

78
00:04:23.700 --> 00:04:25.008
We actually don't.

79
00:04:25.008 --> 00:04:28.774
We don't have any of these that
fit that exact description.

80
00:04:28.774 --> 00:04:32.140
What we do have, is this thing whose
name matches what we want we want,

81
00:04:32.140 --> 00:04:33.752
the PassedSlowLoadThreshold.

82
00:04:33.752 --> 00:04:35.436
But, I think quite reasonably,

83
00:04:35.436 --> 00:04:39.416
this doesn't hold onto a unit because
unit doesn't tell us any information.

84
00:04:39.416 --> 00:04:42.902
It just says, yeah, this is a message
with no additional information.

85
00:04:42.902 --> 00:04:44.600
We passed the slow load threshold.

86
00:04:44.600 --> 00:04:45.273
That happened,

87
00:04:45.273 --> 00:04:47.829
I have no further information
to give you about what happened.

88
00:04:47.829 --> 00:04:49.652
It's just we did it.

89
00:04:49.652 --> 00:04:53.845
So the way we can handle that, is that,
we can rather than passing in the variant

90
00:04:53.845 --> 00:04:57.850
function like we did in all the other
case, we can just pass it in an anonymous

91
00:04:57.850 --> 00:05:01.690
function, that says, just always
return PassedSlowLoadThreshold.

92
00:05:01.690 --> 00:05:06.130
Or, if we wanna get a little bit more
explicit we can do this, which essentially

93
00:05:06.130 --> 00:05:09.974
says I am not only ignoring this,
but I am pattern-matching on it and

94
00:05:09.974 --> 00:05:14.382
saying it has to be unit, which is to say
it has to be this value with no meaning.

95
00:05:14.382 --> 00:05:16.990
This is similar to when we,
a couple of exercises ago,

96
00:05:16.990 --> 00:05:20.980
did preview in the pattern match, to say,
I know that this is exactly what this is.

97
00:05:20.980 --> 00:05:23.292
It is definitely something
that has no information.

98
00:05:23.292 --> 00:05:26.815
Also, I think quite important to note,
is that this thing right here,

99
00:05:26.815 --> 00:05:30.410
looks like a dude doing a karate type
of motion, so that's pretty cool.

100
00:05:32.130 --> 00:05:34.972
Questions about all of these?

101
00:05:34.972 --> 00:05:37.492
Yeah, let's confirm they actually compile,
they do.

