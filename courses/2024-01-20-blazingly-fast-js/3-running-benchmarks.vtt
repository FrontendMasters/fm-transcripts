WEBVTT

1
00:00:00.530 --> 00:00:02.640
All right, so how do we start?

2
00:00:02.640 --> 00:00:04.050
What do you guys think is slow?

3
00:00:05.110 --> 00:00:06.440
Can anyone give me like a guess?

4
00:00:08.572 --> 00:00:10.523
&gt;&gt; Creating objects.

5
00:00:10.523 --> 00:00:12.450
&gt;&gt; Okay,
creating objects I love that by the way.

6
00:00:12.450 --> 00:00:13.390
That's like my favorite.

7
00:00:13.390 --> 00:00:15.690
That's the thing I love to
harp on creating objects.

8
00:00:15.690 --> 00:00:16.450
What objects?

9
00:00:17.638 --> 00:00:18.685
&gt;&gt; JavaScript objects.

10
00:00:18.685 --> 00:00:19.810
&gt;&gt; All right, JavaScript objects.

11
00:00:19.810 --> 00:00:23.042
Yes, they are not fast to
create JavaScript objects.

12
00:00:23.042 --> 00:00:23.758
Any other guesses?

13
00:00:27.024 --> 00:00:28.160
&gt;&gt; Network.

14
00:00:28.160 --> 00:00:29.597
&gt;&gt; Network.

15
00:00:29.597 --> 00:00:31.637
We're trying to improve JavaScript, so

16
00:00:31.637 --> 00:00:34.342
we're gonna pretend
the network is unimprovable.

17
00:00:34.342 --> 00:00:37.079
Meaning that we have a WebSocket
connection, and so we're not gonna worry

18
00:00:37.079 --> 00:00:40.042
about the latency of the user,
cuz we don't have a control over that.

19
00:00:40.042 --> 00:00:42.727
We want to only control what
we can control right now.

20
00:00:42.727 --> 00:00:44.047
So we'll just keep that.

21
00:00:44.047 --> 00:00:46.151
We're not like thinking
about edge deploying and

22
00:00:46.151 --> 00:00:49.408
how we get servers closest to groups of
people are organizing web sockets with

23
00:00:49.408 --> 00:00:51.077
relation to where they're coming in.

24
00:00:51.077 --> 00:00:54.757
So we're just not gonna think
about that level of speed.

25
00:00:54.757 --> 00:00:55.907
&gt;&gt; Promises.

26
00:00:55.907 --> 00:00:58.287
&gt;&gt; Promises, okay, beautiful, beautiful.

27
00:00:58.287 --> 00:01:02.040
It's like you guys know me all right, yes,

28
00:01:02.040 --> 00:01:05.903
objects and
problems is both great answers.

29
00:01:05.903 --> 00:01:10.103
So usually the best way to find
out what is slow is to measure.

30
00:01:10.103 --> 00:01:15.343
So I highly recommend you don't guess but
instead we measure, right?

31
00:01:15.343 --> 00:01:17.753
That will give you the best answer.

32
00:01:17.753 --> 00:01:22.632
So a couple things, don't forget to change
your U limit because at some point you

33
00:01:22.632 --> 00:01:27.242
will exceed 1024, which is the default
on Pop OS or whatever your OS is.

34
00:01:27.242 --> 00:01:29.972
And then you'll get a bunch of errors
trying to create a bunch of test clients.

35
00:01:29.972 --> 00:01:33.662
So just remember that, adjust your U
limit so you can have lots of files open.

36
00:01:33.662 --> 00:01:37.754
First thing we're gonna do is actually
look at a little utility I've made

37
00:01:37.754 --> 00:01:41.067
to help kind of visualize
what's happening on our server.

38
00:01:42.088 --> 00:01:47.538
And so to be able to launch this,
it requires three separate terminal tabs.

39
00:01:47.538 --> 00:01:50.228
[INAUDIBLE] there we go,
I'll open that up next, okay?

40
00:01:50.228 --> 00:01:55.648
So CD shooter and then we need to launch
the program that actually runs the server.

41
00:01:55.648 --> 00:01:56.770
Then we're gonna do it again,

42
00:01:56.770 --> 00:01:59.238
where we actually are gonna launch
something to launch the client.

43
00:01:59.238 --> 00:02:03.826
And we're gonna do it one more time
to something that actually launches

44
00:02:03.826 --> 00:02:06.884
the kind of perf server
that looks at the logs and

45
00:02:06.884 --> 00:02:10.178
tells you what's happening
inside of the server.

46
00:02:10.178 --> 00:02:14.138
Okay, so the first one,
we're just gonna build node with TSC.

47
00:02:14.138 --> 00:02:17.118
Yes, I didn't make a watch command, okay?

48
00:02:17.118 --> 00:02:20.633
Cuz I don't wanna keep on running
just wanna running some of the times.

49
00:02:20.633 --> 00:02:25.510
So Okay, and so TSC and then node dist
server.js and we're gonna set a log path,

50
00:02:25.510 --> 00:02:27.608
this is where it puts all the logs.

51
00:02:27.608 --> 00:02:30.708
It's gonna log things that are happening
on your server into this file.

52
00:02:30.708 --> 00:02:33.938
So I'm just gonna copy this command and
this will launch the server.

53
00:02:33.938 --> 00:02:37.171
So I'm gonna go here and
if it doesn't launch for you, I'm sorry,

54
00:02:37.171 --> 00:02:38.379
it worked on my machine.

55
00:02:40.426 --> 00:02:41.309
All right, awesome.

56
00:02:41.309 --> 00:02:43.484
Next, we're gonna want to launch this.

57
00:02:43.484 --> 00:02:48.044
This is a simple rust program that does
the following a we run in release mode.

58
00:02:48.044 --> 00:02:51.454
Second, we're gonna have 500
connections created to the server.

59
00:02:51.454 --> 00:02:53.114
Third, we're gonna play
a whole bunch of games.

60
00:02:53.114 --> 00:02:56.204
I set it out to play a whole bunch,
so it can just keep on running.

61
00:02:56.204 --> 00:02:59.414
And then this T right here
is time between connections.

62
00:02:59.414 --> 00:03:03.780
So a connection will be created to
the server every two milliseconds.

63
00:03:03.780 --> 00:03:08.507
So that way we have a better distribution
of connections as opposed to make

64
00:03:08.507 --> 00:03:12.790
500 at once, lose 500,
make 500 at once, lose 500.

65
00:03:12.790 --> 00:03:16.324
So at least these 500 will be
created over the course of a second,

66
00:03:16.324 --> 00:03:17.970
as opposed to all at once.

67
00:03:17.970 --> 00:03:20.771
So copy that and here, I don't like it.

68
00:03:20.771 --> 00:03:23.461
Actually right there.

69
00:03:24.749 --> 00:03:25.827
Let's do the original one.

70
00:03:25.827 --> 00:03:30.480
I'm gonna make sure I have the exact
same command as you guys grab that,

71
00:03:30.480 --> 00:03:34.703
put that there, and
then we'll start the client.

72
00:03:34.703 --> 00:03:38.593
Yeah, the client there we go,
the little testing client will run rust.

73
00:03:38.593 --> 00:03:39.703
So it's gonna just start running.

74
00:03:39.703 --> 00:03:43.362
It's just gonna start Start running
against the server my computer will start

75
00:03:43.362 --> 00:03:46.052
going making sounds all that fantastic.

76
00:03:46.052 --> 00:03:49.552
And then we'll have this whole visual
server which this one's written in.

77
00:03:49.552 --> 00:03:51.202
Go with HTML, by the way.

78
00:03:51.202 --> 00:03:54.046
It was like the first time I was
playing around with go and HTML, so

79
00:03:54.046 --> 00:03:55.352
it's kind of a largely ugly.

80
00:03:55.352 --> 00:03:57.732
So enjoy all you want.

81
00:03:57.732 --> 00:04:00.355
And so I'm gonna go over here I'm
just gonna run this command that'll.

82
00:04:00.355 --> 00:04:03.188
Create a nice little echo server for 2068.

83
00:04:03.188 --> 00:04:09.287
And so if you go there, you'll be able
to see what's happening on the server.

84
00:04:09.287 --> 00:04:13.562
So I'm gonna jump over here, I'm gonna go
to localhost 420, sorry, this tiny font,

85
00:04:13.562 --> 00:04:14.365
420.68.

86
00:04:14.365 --> 00:04:15.361
Pretty simple.

87
00:04:15.361 --> 00:04:22.082
You're gonna simply pass in a file
that we specified as our log path.

88
00:04:22.082 --> 00:04:26.142
So our log path right here
was temp slash testing.

89
00:04:26.142 --> 00:04:31.662
So I'm gonna go Temp testing and
that's gonna tell you all about it.

90
00:04:31.662 --> 00:04:35.212
Now typically I actually like to have this
thing kind of split right here just makes

91
00:04:35.212 --> 00:04:38.504
it a little bit easier to see on this page
as you can see right now we've played

92
00:04:38.504 --> 00:04:39.992
about 500 games.

93
00:04:39.992 --> 00:04:42.228
We have this ratio find
that here in a second.

94
00:04:42.228 --> 00:04:46.908
We have about a million on time ticks
meaning 1516 or 17 on time ticks.

95
00:04:46.908 --> 00:04:50.785
We have about 400,000 ticks
that went over that went 18 or

96
00:04:50.785 --> 00:04:55.228
more milliseconds, and we have
about 67,000 ticks that were under.

97
00:04:55.228 --> 00:04:59.955
So if I refresh this again,
it continues this way the ratio is

98
00:04:59.955 --> 00:05:05.127
simply under plus over on top of
the sum of all possible ticks.

99
00:05:05.127 --> 00:05:08.568
So what percentage of
ticks are over plus under?

100
00:05:08.568 --> 00:05:12.767
And so 31% of the time we
are not behaving correctly.

101
00:05:12.767 --> 00:05:14.897
So this isn't a good place to be.

102
00:05:14.897 --> 00:05:15.597
I'm not happy about it.

103
00:05:17.080 --> 00:05:18.272
Your boss is probably not happy about it.

104
00:05:18.272 --> 00:05:21.930
Whatever number you're getting is probably
different than the number I'm getting

105
00:05:21.930 --> 00:05:23.227
getting, and that's okay.

106
00:05:24.976 --> 00:05:28.309
Then also you can look at like say
the distribution of the interval as

107
00:05:28.309 --> 00:05:31.835
you can see, we have a lot of 16 and
17s, we also have a lot of 18s.

108
00:05:31.835 --> 00:05:33.014
We also have a lot of 15s.

109
00:05:33.014 --> 00:05:34.724
We have some 19s.

110
00:05:34.724 --> 00:05:37.334
We have some 14s, and you see that
it kind of goes out a little bit.

111
00:05:37.334 --> 00:05:39.464
There's some unusual ones way out here.

112
00:05:39.464 --> 00:05:42.977
There's 1767 milliseconds to
take ticks that happened.

113
00:05:42.977 --> 00:05:47.291
And so things are happening
obviously On here so, there you go.

114
00:05:47.291 --> 00:05:49.578
So this is one way in which we
can look at performance and

115
00:05:49.578 --> 00:05:51.587
we can watch this happen over time.

116
00:05:51.587 --> 00:05:55.603
And so what I'm gonna do is I'm actually
gonna cut this and I'm gonna cut that and

117
00:05:55.603 --> 00:05:58.957
I'm gonna cut my, both my client and
my server for a second.

118
00:05:58.957 --> 00:06:01.007
And I want to run a few of them.

119
00:06:01.007 --> 00:06:05.525
And so, what we're gonna do is I want you
to name it in such a way you're not gonna

120
00:06:05.525 --> 00:06:10.261
lose it, so you could do it like temp,
master 500, 1,000, 1,500.

121
00:06:10.261 --> 00:06:11.502
However you want to do it, but

122
00:06:11.502 --> 00:06:15.191
let's try running on your own your numbers
may be a little bit different than mine.

123
00:06:15.191 --> 00:06:19.085
Just choose three numbers that are
progressively larger and we're gonna kind

124
00:06:19.085 --> 00:06:23.157
of look at each performance as it goes and
maybe see how does this the server react?

125
00:06:23.157 --> 00:06:26.882
And you're gonna keep running with
the same number of connections as we make

126
00:06:26.882 --> 00:06:29.746
these improvements and
see do we make it have less or more?

127
00:06:29.746 --> 00:06:31.871
And we'll be able to look
at this data in the past.

128
00:06:33.651 --> 00:06:36.097
So I'm gonna just start right here and

129
00:06:36.097 --> 00:06:39.468
I will simply run this thing
as I don't like to type.

130
00:06:39.468 --> 00:06:42.378
So I'm just gonna do master 500,
there we go.

131
00:06:42.378 --> 00:06:45.838
And we'll run this thing [INAUDIBLE] wrong
window I like to run it in this window.

132
00:06:45.838 --> 00:06:48.670
I have OCD about which
windows I like to run things?

133
00:06:48.670 --> 00:06:51.888
And so this will run the server,
then I'll run the client.

134
00:06:51.888 --> 00:06:56.068
I'll make sure I'm doing 500 connections,
and we're gonna run this one.

135
00:06:56.068 --> 00:06:57.788
So this one's gonna collect information.

136
00:06:57.788 --> 00:06:58.998
We'll let this one go for a little bit.

137
00:06:58.998 --> 00:07:03.882
So I'm gonna replace this right
here with a [INAUDIBLE] 500,

138
00:07:06.495 --> 00:07:10.015
I let this go until we get like
maybe 1 to 2 million tics, and

139
00:07:10.015 --> 00:07:15.143
then I'll repeat it again with 1,000,
then I'll repeat it again with 2000.

140
00:07:15.143 --> 00:07:16.445
We'll see how it goes.

141
00:07:16.445 --> 00:07:20.900
Probably go to about how about 1000
games played, two rounds of it.

142
00:07:20.900 --> 00:07:22.674
There you go, we're up to after that.

143
00:07:22.674 --> 00:07:23.774
So I'm just gonna kill that.

144
00:07:23.774 --> 00:07:27.141
I'm gonna kill both the client or
the server and the client and

145
00:07:27.141 --> 00:07:30.914
I'm gonna do it again, except for
this time I'm gonna do 1000.

146
00:07:30.914 --> 00:07:34.254
Be careful if you run the same log file
twice, you're gonna get mixed results.

147
00:07:34.254 --> 00:07:35.764
So careful with that.

148
00:07:35.764 --> 00:07:37.644
So I'm gonna run it at a 1000.

149
00:07:37.644 --> 00:07:38.454
There we go.

150
00:07:38.454 --> 00:07:39.294
I'm gonna go over here.

151
00:07:39.294 --> 00:07:43.094
I'm gonna rerun this one, but I'm gonna
make sure I put my 1 value as 1000.

152
00:07:43.094 --> 00:07:47.484
All right, so now, when we run the server,
we're running it with 1000 connections.

153
00:07:47.484 --> 00:07:50.942
One big thing about running
a lot of perf up, look at that.

154
00:07:50.942 --> 00:07:52.622
I didn't even listen to myself.

155
00:07:52.622 --> 00:07:55.282
I'd even set my own you
limits to be proper here.

156
00:07:55.282 --> 00:07:58.552
Look at that I got had by my own
problem that I warned you about.

157
00:07:58.552 --> 00:08:00.794
It says right there, too many files open.

158
00:08:00.794 --> 00:08:02.006
Just feels so bad.

159
00:08:03.275 --> 00:08:05.797
All right,
I'm gonna remove my previous log file, and

160
00:08:05.797 --> 00:08:09.174
I'll run it again, start that up,
start a nice, fresh, clean run here,

161
00:08:09.174 --> 00:08:12.254
because I don't want that to be
a part of things, and then run this.

162
00:08:12.254 --> 00:08:16.157
And so
now we're gonna let that thing run, and

163
00:08:16.157 --> 00:08:22.277
I'm gonna open up a new tab, and
I'm gonna change this out to 1000.

164
00:08:24.260 --> 00:08:26.607
And so we can kind of start
seeing this thing run nicely.

165
00:08:29.381 --> 00:08:31.661
As you can see, it's looking a lot worse.

166
00:08:37.928 --> 00:08:41.275
And my laptop 's a-spinning.

167
00:08:42.784 --> 00:08:46.957
Of that ratio,
we're sitting at 38% as opposed to 31%.

168
00:08:50.559 --> 00:08:54.879
So again, just let this go for
a little bit I'll try to get two rounds.

169
00:08:54.879 --> 00:08:58.934
Again, doing a lot of the perf stuff, you
find yourself doing a lot of waiting and

170
00:08:58.934 --> 00:08:59.481
running.

171
00:08:59.481 --> 00:09:02.983
It's just part of the game because
you want to try to get some

172
00:09:02.983 --> 00:09:07.497
level of, You want to be able to at

173
00:09:07.497 --> 00:09:11.208
least have some confidence moving forward
in the numbers you're looking at.

174
00:09:11.208 --> 00:09:13.108
And I just wanted to have these for
historical reasons.

175
00:09:13.108 --> 00:09:15.577
I think it's really fun to look
back on numbers to see how good or

176
00:09:15.577 --> 00:09:16.738
bad you're doing.

177
00:09:16.738 --> 00:09:19.692
So I'm gonna kill that and we're
gonna do it one more time, except for

178
00:09:19.692 --> 00:09:21.008
I'm gonna put 2000 here.

179
00:09:21.008 --> 00:09:22.356
So I'm gonna run with 2000.

180
00:09:22.356 --> 00:09:26.775
1000 on the server I'm gonna
run with 2000 on the client.

181
00:09:26.775 --> 00:09:30.791
I am making some assumptions that you
guys can follow along you know how to use

182
00:09:30.791 --> 00:09:34.645
your terminal well you know how to
use the browser localhost make sense.

183
00:09:34.645 --> 00:09:40.283
I just wanna make sure it cuz it's it's
difficult to always try to prepare for

184
00:09:40.283 --> 00:09:42.841
every situation at 2000.

185
00:09:42.841 --> 00:09:43.481
Look at that.

186
00:09:43.481 --> 00:09:47.687
This is not looking good at 2000,
yes Mark.

187
00:09:47.687 --> 00:09:50.075
&gt;&gt; Someone's asking if you
could clarify the scale.

188
00:09:51.719 --> 00:09:55.030
&gt;&gt; The scale,
&gt;&gt; Yeah, just like the chart.

189
00:09:55.030 --> 00:09:57.191
&gt;&gt; Yeah so
I'll clarify the chart one more time.

190
00:09:57.191 --> 00:09:59.371
So the chart is very, very simple.

191
00:09:59.371 --> 00:10:04.833
This first one right here is ticks on time
that is 15, 16, or 17 millisecond ticks.

192
00:10:04.833 --> 00:10:09.478
This right here, take overruns are 18 or
more milliseconds meaning a game

193
00:10:09.478 --> 00:10:14.323
loop that took longer than 17
milliseconds is considered an overrun.

194
00:10:14.323 --> 00:10:18.773
A game loop that took less than 15
milliseconds is considered an underrun.

195
00:10:18.773 --> 00:10:22.180
The ratio is simply the addition of
I should have not called it ratio,

196
00:10:22.180 --> 00:10:24.073
I should have called it percent late.

197
00:10:24.073 --> 00:10:29.780
And so that would be 1.185
million on time plus 466,000

198
00:10:29.780 --> 00:10:35.401
over plus 81,000 under on the bottom,
on the denominator.

199
00:10:35.401 --> 00:10:37.904
I'm just normalizing it according,

200
00:10:37.904 --> 00:10:42.446
I'm creating a nice little eigenvector,
if you will, of this guy.

201
00:10:42.446 --> 00:10:46.335
Sky right here and
normalize the value nicely, so it's 31%.

202
00:10:46.335 --> 00:10:49.519
And so when we increased to a 1000,
it went to 36%.

203
00:10:49.519 --> 00:10:52.185
Now that we're at 2000,
which I've probably played a lot of games.

204
00:10:52.185 --> 00:10:54.770
Well, it's not looking fantastic, right?

205
00:10:54.770 --> 00:10:59.265
&gt;&gt; We are looking at
about 62% of the time.

206
00:10:59.265 --> 00:11:00.716
We have values that are over.

207
00:11:00.716 --> 00:11:03.615
And that makes sense cuz it
almost looks like only 1/3 of

208
00:11:03.615 --> 00:11:05.282
the frames are actually on time.

209
00:11:05.282 --> 00:11:08.498
In fact, it looks like we even have we
actually have more frames that are over

210
00:11:08.498 --> 00:11:10.022
running that are actually on time.

211
00:11:10.022 --> 00:11:13.642
If we look at our distribution,
it looks terrible, right?

212
00:11:13.642 --> 00:11:17.601
We have a whole bunch of numbers
pegged at 0, meaning that it took so

213
00:11:17.601 --> 00:11:22.324
long on one side that they just had to try
to run frames as quickly as It's possible

214
00:11:22.324 --> 00:11:24.840
through the system to
try to catch back up.

215
00:11:26.508 --> 00:11:30.012
Which my ticker could have been probably
more smart and not done anything, but

216
00:11:30.012 --> 00:11:30.924
we didn't do that.

217
00:11:30.924 --> 00:11:32.540
We're just, it's a dumb ticker.

218
00:11:32.540 --> 00:11:34.483
It's not well-written.

219
00:11:34.483 --> 00:11:37.050
So there we go.
So I have some nice numbers now.

220
00:11:37.050 --> 00:11:38.980
I have, what does it look like at 500?

221
00:11:38.980 --> 00:11:40.300
What does it look like at a 1000?

222
00:11:40.300 --> 00:11:41.750
What does it look like at 2000?

223
00:11:41.750 --> 00:11:44.536
So exciting, right?

224
00:11:44.536 --> 00:11:49.087
All right, so we have these nice log
files, hopefully you guys have done.

225
00:11:49.087 --> 00:11:51.537
This is kind of like a very
crude stepladder test.

226
00:11:51.537 --> 00:11:56.001
If you don't know what a stepladder is,
all you do is you create a series of tests

227
00:11:56.001 --> 00:11:59.147
to see how does this thing
perform as we increase input.

228
00:11:59.147 --> 00:12:02.652
And that's gonna give you a good
idea as to what your server or

229
00:12:02.652 --> 00:12:06.247
what your program's gonna
do as it gets more complex.

230
00:12:06.247 --> 00:12:10.627
Measuring something at a singular point is
really difficult because you don't really

231
00:12:10.627 --> 00:12:11.827
know how fast it grows.

232
00:12:11.827 --> 00:12:15.144
You don't know what the behavior of the
program is cuz a lot of times you can run

233
00:12:15.144 --> 00:12:17.644
nice for a while and
once you cross some sort of threshold,

234
00:12:17.644 --> 00:12:20.597
then it just like takes off and
becomes really, really bad.

235
00:12:20.597 --> 00:12:23.577
So it's very good to make sure
you do multiple measurements

